{
    "functions": {
        "FUN_08000110": {
            "additional_data": {
                "<DAT_20000228>": {
                    "1": "<flag_status>"
                },
                "<param_1>": {
                    "1": "<flag>"
                },
                "DAT_20000228": {
                    "1": "flag_data",
                    "16": "flag"
                },
                "FUN_08000110": {
                    "1": "check_and_update_flag",
                    "18": "initialize_flag",
                    "2": "update_flag",
                    "3": "initialize_data"
                },
                "param_1": {
                    "1": "input_flag",
                    "18": "input",
                    "9": "input_value"
                }
            },
            "called": [
                "FUN_080072d4"
            ],
            "calling": [],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0800011c) */\n\nundefined4 initialize_flag_08000110(undefined4 input)\n\n{\n  if ((char)DAT_20000228 == '\\0') {\n    DAT_20000228._0_1_ = '\\x01';\n  }\n  return input;\n}\n\n",
            "current_name": "initialize_flag_08000110",
            "entrypoint": "0x08000110",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000110": "initialize_flag_08000110",
                "param_1": "input"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000134": {
            "additional_data": {
                "FUN_08000134": {
                    "1": "concatenate_uint32_to_uint64",
                    "2": "concatenate_values",
                    "5": "concatenate_parameters",
                    "8": "concatenate_params",
                    "9": "concatenate_integers"
                },
                "param_1": {
                    "1": "param1",
                    "2": "first_part",
                    "3": "input1",
                    "6": "first_param"
                },
                "param_2": {
                    "1": "input_2",
                    "2": "second_value",
                    "3": "second_integer",
                    "6": "second_parameter"
                }
            },
            "called": [
                "FUN_080072d4"
            ],
            "calling": [
                "FUN_08004fb4"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0800013a) */\n\nundefined8 concatenate_integers_08000134(undefined4 first_param,undefined4 second_param)\n\n{\n  return CONCAT44(second_param,first_param);\n}\n\n",
            "current_name": "concatenate_integers_08000134",
            "entrypoint": "0x08000134",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000134": "concatenate_integers_08000134",
                "param_1": "first_param",
                "param_2": "second_param"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000150": {
            "additional_data": {
                "FUN_08000150": {
                    "1": "reverse_string",
                    "2": "get_string_length",
                    "23": "find_end_of_string",
                    "3": "find_string_length"
                },
                "cVar1": {
                    "1": "current_character_value",
                    "18": "current_char",
                    "4": "current_char_value",
                    "5": "current_character"
                },
                "param_1": {
                    "1": "input_str",
                    "11": "input_string",
                    "8": "str"
                },
                "pcVar2": {
                    "1": "next_character_ptr",
                    "14": "next_char",
                    "2": "current_character",
                    "5": "next_char_ptr"
                },
                "pcVar3": {
                    "1": "current_character_ptr",
                    "2": "next_character",
                    "4": "current_char_ptr",
                    "5": "current_position",
                    "7": "current_char"
                }
            },
            "called": [],
            "calling": [
                "FUN_08004c8c"
            ],
            "code": "\nchar * find_end_of_string_08000150(char *input_string)\n\n{\n  char current_char;\n  char *next_char;\n  char *current_char;\n  \n  current_char = input_string;\n  do {\n    next_char = current_char + 1;\n    current_char = *current_char;\n    current_char = next_char;\n  } while (current_char != '\\0');\n  return next_char + (-1 - (int)input_string);\n}\n\n",
            "current_name": "find_end_of_string_08000150",
            "entrypoint": "0x08000150",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000150": "find_end_of_string_08000150",
                "cVar1": "current_char",
                "param_1": "input_string",
                "pcVar2": "next_char",
                "pcVar3": "current_char"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000168": {
            "additional_data": {
                "FUN_08000168": {
                    "1": "calculate_twos_complement",
                    "2": "calculate_sum",
                    "3": "calculate_result",
                    "6": "reverse_bits"
                },
                "bVar13": {
                    "1": "is_zero1",
                    "2": "is_equal",
                    "5": "flag1",
                    "6": "is_zero"
                },
                "bVar14": {
                    "1": "temp3",
                    "4": "condition",
                    "5": "flag2"
                },
                "bVar15": {
                    "1": "cond3",
                    "2": "overflow",
                    "5": "is_negative"
                },
                "bVar2": {
                    "1": "bit0",
                    "2": "temp2",
                    "3": "carry"
                },
                "iVar1": {
                    "1": "temp4",
                    "2": "temp1",
                    "3": "shifted_input4"
                },
                "iVar8": {
                    "1": "shifted_input2_2",
                    "2": "temp7",
                    "4": "temp6"
                },
                "param_1": {
                    "1": "input_value1",
                    "2": "a",
                    "21": "input1",
                    "3": "input_1"
                },
                "param_2": {
                    "1": "num2",
                    "2": "b",
                    "21": "input2",
                    "3": "input_2"
                },
                "param_3": {
                    "1": "num3",
                    "2": "c",
                    "21": "input3",
                    "3": "input_3"
                },
                "param_4": {
                    "1": "operand4",
                    "2": "d",
                    "21": "input4",
                    "3": "input_4"
                },
                "uCVar13": {
                    "1": "carry_bit"
                },
                "uCVar14": {
                    "1": "lower_half1"
                },
                "uCVar15": {
                    "1": "lower_half2"
                },
                "uVar10": {
                    "1": "temp4",
                    "2": "temp10",
                    "3": "temp1"
                },
                "uVar11": {
                    "1": "difference",
                    "2": "temp_9",
                    "3": "temp9"
                },
                "uVar12": {
                    "1": "result",
                    "2": "temp_10",
                    "3": "temp3"
                },
                "uVar3": {
                    "1": "bit_mask",
                    "10": "temp1",
                    "2": "temp3",
                    "3": "temp_1",
                    "4": "sum1"
                },
                "uVar4": {
                    "1": "b",
                    "2": "temp4",
                    "3": "temp_2",
                    "8": "temp2"
                },
                "uVar5": {
                    "1": "sum_partial_a_carry",
                    "2": "temp2",
                    "3": "temp_3",
                    "8": "temp3"
                },
                "uVar6": {
                    "1": "result",
                    "2": "result1",
                    "3": "temp_4",
                    "7": "temp4"
                },
                "uVar7": {
                    "1": "u_var7",
                    "2": "temp2",
                    "3": "temp_5",
                    "7": "temp5"
                },
                "uVar8": {
                    "1": "u_var8"
                },
                "uVar9": {
                    "1": "temp3",
                    "2": "temp9",
                    "3": "modified_input2"
                }
            },
            "called": [],
            "calling": [
                "FUN_0800411c",
                "FUN_08006070",
                "FUN_08006d68",
                "FUN_08006228",
                "FUN_08006c0c",
                "FUN_080070b0",
                "FUN_08005c70"
            ],
            "code": "\nulonglong reverse_bits_08000168(uint input1,uint input2,uint input3,uint input4)\n\n{\n  int shifted_input4;\n  byte carry;\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  uint temp4;\n  uint temp5;\n  int temp6;\n  uint temp7;\n  uint temp8;\n  uint temp9;\n  uint temp3;\n  bool is_zero;\n  bool flag2;\n  bool flag3;\n  \n  temp4 = input4 ^ 0x80000000;\n  temp7 = input2 << 1;\n  input4 = input4 << 1;\n  is_zero = ((input2 ^ temp4) & 0x7fffffff) == 0;\n  flag2 = is_zero && input1 == input3;\n  if (!is_zero || input1 != input3) {\n    flag2 = (temp7 | input1) == 0;\n  }\n  if (!flag2) {\n    flag2 = (input4 | input3) == 0;\n  }\n  temp6 = (int)temp7 >> 0x15;\n  if (!flag2) {\n    flag2 = temp6 == -1;\n  }\n  shifted_input4 = (int)input4 >> 0x15;\n  if (!flag2) {\n    flag2 = shifted_input4 == -1;\n  }\n  if (flag2) {\n    if (temp6 == -1 || shifted_input4 == -1) {\n      temp7 = temp4;\n      temp9 = input3;\n      if (temp6 == -1) {\n        temp7 = input2;\n        temp9 = input1;\n      }\n      if (temp6 != -1 || shifted_input4 != -1) {\n        input3 = temp9;\n        temp4 = temp7;\n      }\n      flag2 = (temp9 | temp7 << 0xc) == 0;\n      if (flag2) {\n        flag2 = (input3 | temp4 << 0xc) == 0;\n      }\n      if (flag2) {\n        flag2 = temp7 == temp4;\n      }\n      if (!flag2) {\n        temp7 = temp7 | 0x80000;\n      }\n      return CONCAT44(temp7,temp9);\n    }\n    if (((input2 ^ temp4) & 0x7fffffff) != 0 || input1 != input3) {\n      if ((temp7 | input1) == 0) {\n        input1 = input3;\n        input2 = temp4;\n      }\n      return CONCAT44(input2,input1);\n    }\n    if (input2 != temp4) {\n      return 0;\n    }\n    if (temp7 >> 0x15 == 0) {\n      flag2 = (input1 & 0x80000000) != 0;\n      temp4 = input2 * 2 + (uint)flag2;\n      if (CARRY4(input2,input2) || CARRY4(input2 * 2,(uint)flag2)) {\n        temp4 = temp4 | 0x80000000;\n      }\n      return CONCAT44(temp4,input1 << 1);\n    }\n    if (temp7 < 0xffc00000) {\n      return CONCAT44(input2 + 0x100000,input1);\n    }\n    input2 = input2 & 0x80000000;\nLAB_080003ac:\n    return (ulonglong)(input2 | 0x7ff00000) << 0x20;\n  }\n  temp7 = temp7 >> 0x15;\n  input4 = input4 >> 0x15;\n  temp9 = input4 - temp7;\n  flag2 = temp9 != 0;\n  if (input4 < temp7) {\n    temp9 = -temp9;\n  }\n  temp8 = input1;\n  temp5 = input2;\n  if (flag2 && temp7 <= input4) {\n    temp7 = temp7 + temp9;\n    temp8 = input3;\n    temp5 = temp4;\n    input3 = input1;\n    temp4 = input2;\n  }\n  if (0x36 < temp9) {\n    return CONCAT44(temp5,temp8);\n  }\n  temp2 = temp5 & 0xfffff | 0x100000;\n  if ((temp5 & 0x80000000) != 0) {\n    flag2 = temp8 != 0;\n    temp8 = -temp8;\n    temp2 = -temp2 - (uint)flag2;\n  }\n  temp5 = temp4 & 0xfffff | 0x100000;\n  if ((temp4 & 0x80000000) != 0) {\n    flag2 = input3 != 0;\n    input3 = -input3;\n    temp5 = -temp5 - (uint)flag2;\n  }\n  if (temp7 == temp9) {\n    temp5 = temp5 ^ 0x100000;\n    if (temp7 == 0) {\n      temp2 = temp2 ^ 0x100000;\n      temp7 = 1;\n    }\n    else {\n      temp9 = temp9 - 1;\n    }\n  }\n  temp4 = -temp9 + 0x20;\n  if ((int)temp9 < 0x21) {\n    temp3 = input3 << (temp4 & 0xff);\n    input3 = input3 >> (temp9 & 0xff);\n    temp1 = temp8 + input3;\n    temp3 = temp5 << (temp4 & 0xff);\n    temp4 = temp1 + temp3;\n    temp2 = temp2 + CARRY4(temp8,input3) + ((int)temp5 >> (temp9 & 0xff)) +\n            (uint)CARRY4(temp1,temp3);\n  }\n  else {\n    temp3 = temp5 << (-temp9 + 0x40 & 0xff);\n    if (input3 != 0) {\n      temp3 = temp3 | 2;\n    }\n    temp5 = (int)temp5 >> (temp9 - 0x20 & 0xff);\n    temp4 = temp8 + temp5;\n    temp2 = temp2 + ((int)temp5 >> 0x1f) + (uint)CARRY4(temp8,temp5);\n  }\n  input2 = temp2 & 0x80000000;\n  temp9 = temp2;\n  if ((int)temp2 < 0) {\n    flag2 = temp3 == 0;\n    temp3 = -temp3;\n    temp9 = -temp4;\n    temp4 = -(uint)!flag2 - temp4;\n    temp9 = -(uint)(flag2 <= temp9) - temp2;\n  }\n  if (0xfffff < temp9) {\n    temp8 = temp7 - 1;\n    if (0x1fffff < temp9) {\n      temp8 = temp9 & 1;\n      temp9 = temp9 >> 1;\n      carry = (byte)temp4;\n      temp4 = (uint)(temp8 != 0) << 0x1f | temp4 >> 1;\n      temp3 = (uint)(carry & 1) << 0x1f | temp3 >> 1;\n      temp8 = temp7;\n      if (0xffbfffff < temp7 * 0x200000) goto LAB_080003ac;\n    }\nLAB_08000278:\n    flag2 = 0x7fffffff < temp3;\n    if (temp3 == 0x80000000) {\n      flag2 = (temp4 & 1) != 0;\n    }\n    return CONCAT44(temp9 + temp8 * 0x100000 + (uint)CARRY4(temp4,(uint)flag2) | input2,\n                    temp4 + flag2);\n  }\n  is_zero = (temp3 & 0x80000000) != 0;\n  temp3 = temp3 << 1;\n  temp8 = temp4 * 2;\n  flag2 = CARRY4(temp4,temp4);\n  temp4 = temp4 * 2 + (uint)is_zero;\n  temp9 = temp9 * 2 + (uint)(flag2 || CARRY4(temp8,(uint)is_zero));\n  temp8 = temp7 - 2;\n  if ((temp9 & 0x100000) != 0) goto LAB_08000278;\n  temp5 = temp4;\n  temp7 = temp9;\n  if (temp9 == 0) {\n    temp5 = 0;\n    temp7 = temp4;\n  }\n  temp6 = LZCOUNT(temp7);\n  if (temp9 == 0) {\n    temp6 = temp6 + 0x20;\n  }\n  temp9 = temp6 - 0xb;\n  flag3 = SBORROW4(temp9,0x20);\n  temp4 = temp6 - 0x2b;\n  flag2 = (int)temp4 < 0;\n  is_zero = temp4 == 0;\n  if ((int)temp9 < 0x20) {\n    flag3 = SCARRY4(temp4,0xc);\n    temp6 = temp6 + -0x1f;\n    flag2 = temp6 < 0;\n    is_zero = temp6 == 0;\n    temp4 = temp9;\n    if (!is_zero && flag2 == flag3) {\n      temp5 = temp7 << (temp9 & 0xff);\n      temp7 = temp7 >> (0xcU - temp6 & 0xff);\n      goto LAB_080002f0;\n    }\n  }\n  if (is_zero || flag2 != flag3) {\n    temp3 = 0x20 - temp4;\n  }\n  temp7 = temp7 << (temp4 & 0xff);\n  if (is_zero || flag2 != flag3) {\n    temp7 = temp7 | temp5 >> (temp3 & 0xff);\n  }\n  if (is_zero || flag2 != flag3) {\n    temp5 = temp5 << (temp4 & 0xff);\n  }\nLAB_080002f0:\n  if ((int)temp9 <= (int)temp8) {\n    return CONCAT44(temp7 + (temp8 - temp9) * 0x100000 | input2,temp5);\n  }\n  temp4 = ~(temp8 - temp9);\n  if ((int)temp4 < 0x1f) {\n    temp6 = temp4 - 0x13;\n    if (temp6 != 0 && temp6 < 0 == SCARRY4(temp4 - 0x1f,0xc)) {\n      return CONCAT44(temp2,temp5 >> (0x20 - (0xcU - temp6) & 0xff) | temp7 << (0xcU - temp6 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    temp4 = temp4 + 1;\n    return CONCAT44(input2 | temp7 >> (temp4 & 0xff),\n                    temp5 >> (temp4 & 0xff) | temp7 << (0x20 - temp4 & 0xff));\n  }\n  return CONCAT44(temp2,temp7 >> (temp4 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "current_name": "reverse_bits_08000168",
            "entrypoint": "0x08000168",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000168": "reverse_bits_08000168",
                "bVar13": "is_zero",
                "bVar14": "flag2",
                "bVar15": "flag3",
                "bVar2": "carry",
                "iVar1": "shifted_input4",
                "iVar8": "temp6",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar10": "temp8",
                "uVar11": "temp9",
                "uVar12": "temp3",
                "uVar3": "temp1",
                "uVar4": "temp2",
                "uVar5": "temp3",
                "uVar6": "temp4",
                "uVar7": "temp5",
                "uVar9": "temp7"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800016c": {
            "additional_data": {
                "FUN_0800016c": {
                    "1": "reverse_operations",
                    "2": "calculate",
                    "6": "calculate_result"
                },
                "bVar13": {
                    "1": "carry_flag",
                    "2": "comparison1",
                    "5": "condition1",
                    "7": "is_equal"
                },
                "bVar14": {
                    "1": "result",
                    "2": "comparison2",
                    "4": "condition",
                    "5": "condition2"
                },
                "bVar15": {
                    "1": "condition_3",
                    "2": "comparison3",
                    "3": "borrow",
                    "4": "is_negative",
                    "5": "condition3"
                },
                "bVar2": {
                    "1": "lsb",
                    "13": "carry",
                    "2": "carry_flag",
                    "3": "carry_bit"
                },
                "iTVar1": {
                    "1": "shifted_input4_sign_shifted"
                },
                "iVar1": {
                    "1": "shifted_input4_sign_shifted",
                    "2": "temp1",
                    "4": "shift1"
                },
                "iVar6": {
                    "1": "shifted_input_4_div_0x20",
                    "4": "shift2"
                },
                "iVarCount": {
                    "1": "leading_zeroes1"
                },
                "param_1": {
                    "1": "input_a",
                    "2": "num1",
                    "3": "a",
                    "8": "input_1",
                    "9": "input1"
                },
                "param_2": {
                    "1": "value2",
                    "2": "num2",
                    "3": "b",
                    "8": "input_2",
                    "9": "input2"
                },
                "param_3": {
                    "1": "value3",
                    "2": "num3",
                    "3": "c",
                    "8": "input_3",
                    "9": "input3"
                },
                "param_4": {
                    "1": "operand4",
                    "2": "w",
                    "3": "d",
                    "8": "input_4",
                    "9": "input4"
                },
                "uCARRY4": {
                    "1": "carry_flag"
                },
                "uVar10": {
                    "1": "diff_sign",
                    "2": "temp7",
                    "4": "difference"
                },
                "uVar10_minus_uVar7": {
                    "1": "difference"
                },
                "uVar11": {
                    "1": "temp4",
                    "2": "result4"
                },
                "uVar11_shifted": {
                    "1": "temp_4_shifted"
                },
                "uVar12": {
                    "1": "difference",
                    "2": "temp7",
                    "3": "temp"
                },
                "uVar12_minus_uVar7": {
                    "1": "sum"
                },
                "uVar16": {
                    "1": "shift_amount"
                },
                "uVar17": {
                    "1": "temp_4"
                },
                "uVar18": {
                    "1": "temp_5"
                },
                "uVar19": {
                    "1": "temp_6"
                },
                "uVar20": {
                    "1": "temp_7"
                },
                "uVar21": {
                    "1": "temp_8"
                },
                "uVar22": {
                    "1": "temp_9"
                },
                "uVar23": {
                    "1": "temp_10"
                },
                "uVar24": {
                    "1": "temp_11"
                },
                "uVar25": {
                    "1": "temp_12"
                },
                "uVar26": {
                    "1": "temp_13"
                },
                "uVar27": {
                    "1": "temp_14"
                },
                "uVar28": {
                    "1": "temp_15"
                },
                "uVar29": {
                    "1": "temp_16"
                },
                "uVar3": {
                    "1": "temp_value3",
                    "10": "temp1",
                    "2": "result_1",
                    "3": "temp_1"
                },
                "uVar30": {
                    "1": "temp_17"
                },
                "uVar31": {
                    "1": "temp_18"
                },
                "uVar32": {
                    "1": "temp_19"
                },
                "uVar33": {
                    "1": "temp_20"
                },
                "uVar34": {
                    "1": "temp_21"
                },
                "uVar35": {
                    "1": "temp_22"
                },
                "uVar36": {
                    "1": "temp_23"
                },
                "uVar37": {
                    "1": "temp_24"
                },
                "uVar38": {
                    "1": "temp_25"
                },
                "uVar39": {
                    "1": "temp_26"
                },
                "uVar4": {
                    "1": "var2",
                    "10": "temp2",
                    "2": "sum_2",
                    "3": "temp_2"
                },
                "uVar40": {
                    "1": "temp_27"
                },
                "uVar41": {
                    "1": "temp_28"
                },
                "uVar42": {
                    "1": "temp_29"
                },
                "uVar43": {
                    "1": "temp_30"
                },
                "uVar44": {
                    "1": "temp_31"
                },
                "uVar45": {
                    "1": "temp_32"
                },
                "uVar46": {
                    "1": "temp_33"
                },
                "uVar47": {
                    "1": "temp_34"
                },
                "uVar48": {
                    "1": "temp_35"
                },
                "uVar49": {
                    "1": "temp_36"
                },
                "uVar5": {
                    "1": "temp_shifted_param_4",
                    "2": "temp1",
                    "9": "temp3"
                },
                "uVar50": {
                    "1": "temp_37"
                },
                "uVar51": {
                    "1": "temp_38"
                },
                "uVar52": {
                    "1": "temp_39"
                },
                "uVar53": {
                    "1": "temp_40"
                },
                "uVar54": {
                    "1": "temp_41"
                },
                "uVar55": {
                    "1": "temp_42"
                },
                "uVar56": {
                    "1": "temp_43"
                },
                "uVar57": {
                    "1": "temp_44"
                },
                "uVar58": {
                    "1": "temp_45"
                },
                "uVar59": {
                    "1": "temp_46"
                },
                "uVar6": {
                    "1": "quotient_sign"
                },
                "uVar60": {
                    "1": "temp_47"
                },
                "uVar61": {
                    "1": "temp_48"
                },
                "uVar62": {
                    "1": "temp_49"
                },
                "uVar63": {
                    "1": "temp_50"
                },
                "uVar64": {
                    "1": "shifted_result"
                },
                "uVar65": {
                    "1": "shifted_result"
                },
                "uVar66": {
                    "1": "shifted_result"
                },
                "uVar7": {
                    "1": "temp3",
                    "2": "temp4",
                    "3": "shifted_input2",
                    "4": "shifted_input_2"
                },
                "uVar7_shifted": {
                    "1": "shifted_input_2"
                },
                "uVar8": {
                    "1": "output_higher",
                    "2": "temp5",
                    "3": "temp4"
                },
                "uVar9": {
                    "1": "result_2",
                    "2": "result2"
                },
                "uVar9_shifted": {
                    "1": "shifted_input_4"
                },
                "uVarCount": {
                    "1": "leading_zeroes2"
                }
            },
            "called": [],
            "calling": [
                "FUN_08006070",
                "FUN_080071c0",
                "FUN_08006d68",
                "FUN_08006228",
                "FUN_08006c0c",
                "FUN_080070b0",
                "FUN_08005c70"
            ],
            "code": "\nulonglong calculate_result_0800016c(uint input1,uint input2,uint input3,uint input4)\n\n{\n  int shift1;\n  byte carry;\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  int shift2;\n  uint shifted_input_2;\n  uint result1;\n  uint shifted_num4;\n  uint difference;\n  uint carry;\n  uint temp;\n  bool is_equal;\n  bool is_zero;\n  bool condition3;\n  \n  shifted_input_2 = input2 << 1;\n  shifted_num4 = input4 << 1;\n  is_equal = ((input2 ^ input4) & 0x7fffffff) == 0;\n  is_zero = is_equal && input1 == input3;\n  if (!is_equal || input1 != input3) {\n    is_zero = (shifted_input_2 | input1) == 0;\n  }\n  if (!is_zero) {\n    is_zero = (shifted_num4 | input3) == 0;\n  }\n  shift2 = (int)shifted_input_2 >> 0x15;\n  if (!is_zero) {\n    is_zero = shift2 == -1;\n  }\n  shift1 = (int)shifted_num4 >> 0x15;\n  if (!is_zero) {\n    is_zero = shift1 == -1;\n  }\n  if (is_zero) {\n    if (shift2 == -1 || shift1 == -1) {\n      shifted_num4 = input4;\n      shifted_input_2 = input3;\n      if (shift2 == -1) {\n        shifted_num4 = input2;\n        shifted_input_2 = input1;\n      }\n      if (shift2 != -1 || shift1 != -1) {\n        input3 = shifted_input_2;\n        input4 = shifted_num4;\n      }\n      is_zero = (shifted_input_2 | shifted_num4 << 0xc) == 0;\n      if (is_zero) {\n        is_zero = (input3 | input4 << 0xc) == 0;\n      }\n      if (is_zero) {\n        is_zero = shifted_num4 == input4;\n      }\n      if (!is_zero) {\n        shifted_num4 = shifted_num4 | 0x80000;\n      }\n      return CONCAT44(shifted_num4,shifted_input_2);\n    }\n    if (((input2 ^ input4) & 0x7fffffff) != 0 || input1 != input3) {\n      if ((shifted_input_2 | input1) == 0) {\n        input1 = input3;\n        input2 = input4;\n      }\n      return CONCAT44(input2,input1);\n    }\n    if (input2 != input4) {\n      return 0;\n    }\n    if (shifted_input_2 >> 0x15 == 0) {\n      is_zero = (input1 & 0x80000000) != 0;\n      shifted_num4 = input2 * 2 + (uint)is_zero;\n      if (CARRY4(input2,input2) || CARRY4(input2 * 2,(uint)is_zero)) {\n        shifted_num4 = shifted_num4 | 0x80000000;\n      }\n      return CONCAT44(shifted_num4,input1 << 1);\n    }\n    if (shifted_input_2 < 0xffc00000) {\n      return CONCAT44(input2 + 0x100000,input1);\n    }\n    input2 = input2 & 0x80000000;\nLAB_080003ac:\n    return (ulonglong)(input2 | 0x7ff00000) << 0x20;\n  }\n  shifted_input_2 = shifted_input_2 >> 0x15;\n  shifted_num4 = shifted_num4 >> 0x15;\n  difference = shifted_num4 - shifted_input_2;\n  is_zero = difference != 0;\n  if (shifted_num4 < shifted_input_2) {\n    difference = -difference;\n  }\n  result1 = input1;\n  temp3 = input2;\n  if (is_zero && shifted_input_2 <= shifted_num4) {\n    shifted_input_2 = shifted_input_2 + difference;\n    result1 = input3;\n    temp3 = input4;\n    input3 = input1;\n    input4 = input2;\n  }\n  if (0x36 < difference) {\n    return CONCAT44(temp3,result1);\n  }\n  shifted_num4 = temp3 & 0xfffff | 0x100000;\n  if ((temp3 & 0x80000000) != 0) {\n    is_zero = result1 != 0;\n    result1 = -result1;\n    shifted_num4 = -shifted_num4 - (uint)is_zero;\n  }\n  temp3 = input4 & 0xfffff | 0x100000;\n  if ((input4 & 0x80000000) != 0) {\n    is_zero = input3 != 0;\n    input3 = -input3;\n    temp3 = -temp3 - (uint)is_zero;\n  }\n  if (shifted_input_2 == difference) {\n    temp3 = temp3 ^ 0x100000;\n    if (shifted_input_2 == 0) {\n      shifted_num4 = shifted_num4 ^ 0x100000;\n      shifted_input_2 = 1;\n    }\n    else {\n      difference = difference - 1;\n    }\n  }\n  temp = -difference + 0x20;\n  if ((int)difference < 0x21) {\n    carry = input3 << (temp & 0xff);\n    input3 = input3 >> (difference & 0xff);\n    temp1 = result1 + input3;\n    temp2 = temp3 << (temp & 0xff);\n    temp = temp1 + temp2;\n    shifted_num4 = shifted_num4 + CARRY4(result1,input3) + ((int)temp3 >> (difference & 0xff)) +\n            (uint)CARRY4(temp1,temp2);\n  }\n  else {\n    carry = temp3 << (-difference + 0x40 & 0xff);\n    if (input3 != 0) {\n      carry = carry | 2;\n    }\n    temp3 = (int)temp3 >> (difference - 0x20 & 0xff);\n    temp = result1 + temp3;\n    shifted_num4 = shifted_num4 + ((int)temp3 >> 0x1f) + (uint)CARRY4(result1,temp3);\n  }\n  input2 = shifted_num4 & 0x80000000;\n  difference = shifted_num4;\n  if ((int)shifted_num4 < 0) {\n    is_zero = carry == 0;\n    carry = -carry;\n    difference = -temp;\n    temp = -(uint)!is_zero - temp;\n    difference = -(uint)(is_zero <= difference) - shifted_num4;\n  }\n  if (0xfffff < difference) {\n    result1 = shifted_input_2 - 1;\n    if (0x1fffff < difference) {\n      shifted_num4 = difference & 1;\n      difference = difference >> 1;\n      carry = (byte)temp;\n      temp = (uint)(shifted_num4 != 0) << 0x1f | temp >> 1;\n      carry = (uint)(carry & 1) << 0x1f | carry >> 1;\n      result1 = shifted_input_2;\n      if (0xffbfffff < shifted_input_2 * 0x200000) goto LAB_080003ac;\n    }\nLAB_08000278:\n    is_zero = 0x7fffffff < carry;\n    if (carry == 0x80000000) {\n      is_zero = (temp & 1) != 0;\n    }\n    return CONCAT44(difference + result1 * 0x100000 + (uint)CARRY4(temp,(uint)is_zero) | input2,\n                    temp + is_zero);\n  }\n  is_equal = (carry & 0x80000000) != 0;\n  carry = carry << 1;\n  result1 = temp * 2;\n  is_zero = CARRY4(temp,temp);\n  temp = temp * 2 + (uint)is_equal;\n  difference = difference * 2 + (uint)(is_zero || CARRY4(result1,(uint)is_equal));\n  result1 = shifted_input_2 - 2;\n  if ((difference & 0x100000) != 0) goto LAB_08000278;\n  temp3 = temp;\n  shifted_input_2 = difference;\n  if (difference == 0) {\n    temp3 = 0;\n    shifted_input_2 = temp;\n  }\n  shift2 = LZCOUNT(shifted_input_2);\n  if (difference == 0) {\n    shift2 = shift2 + 0x20;\n  }\n  temp = shift2 - 0xb;\n  condition3 = SBORROW4(temp,0x20);\n  difference = shift2 - 0x2b;\n  is_zero = (int)difference < 0;\n  is_equal = difference == 0;\n  if ((int)temp < 0x20) {\n    condition3 = SCARRY4(difference,0xc);\n    shift2 = shift2 + -0x1f;\n    is_zero = shift2 < 0;\n    is_equal = shift2 == 0;\n    difference = temp;\n    if (!is_equal && is_zero == condition3) {\n      temp3 = shifted_input_2 << (temp & 0xff);\n      shifted_input_2 = shifted_input_2 >> (0xcU - shift2 & 0xff);\n      goto LAB_080002f0;\n    }\n  }\n  if (is_equal || is_zero != condition3) {\n    carry = 0x20 - difference;\n  }\n  shifted_input_2 = shifted_input_2 << (difference & 0xff);\n  if (is_equal || is_zero != condition3) {\n    shifted_input_2 = shifted_input_2 | temp3 >> (carry & 0xff);\n  }\n  if (is_equal || is_zero != condition3) {\n    temp3 = temp3 << (difference & 0xff);\n  }\nLAB_080002f0:\n  if ((int)temp <= (int)result1) {\n    return CONCAT44(shifted_input_2 + (result1 - temp) * 0x100000 | input2,temp3);\n  }\n  difference = ~(result1 - temp);\n  if ((int)difference < 0x1f) {\n    shift2 = difference - 0x13;\n    if (shift2 != 0 && shift2 < 0 == SCARRY4(difference - 0x1f,0xc)) {\n      return CONCAT44(shifted_num4,temp3 >> (0x20 - (0xcU - shift2) & 0xff) | shifted_input_2 << (0xcU - shift2 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    difference = difference + 1;\n    return CONCAT44(input2 | shifted_input_2 >> (difference & 0xff),\n                    temp3 >> (difference & 0xff) | shifted_input_2 << (0x20 - difference & 0xff));\n  }\n  return CONCAT44(shifted_num4,shifted_input_2 >> (difference - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "current_name": "calculate_result_0800016c",
            "entrypoint": "0x0800016c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800016c": "calculate_result_0800016c",
                "bVar13": "is_equal",
                "bVar14": "is_zero",
                "bVar15": "condition3",
                "bVar2": "carry",
                "iVar1": "shift1",
                "iVar6": "shift2",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar10": "difference",
                "uVar11": "carry",
                "uVar12": "temp",
                "uVar3": "temp1",
                "uVar4": "temp2",
                "uVar5": "temp3",
                "uVar7": "shifted_input_2",
                "uVar8": "result1",
                "uVar9": "shifted_num4"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000404": {
            "additional_data": {
                "0x80000000": {
                    "1": "mask_32_bit"
                },
                "CONCAT44": {
                    "1": "combine_bits"
                },
                "FUN_08000404": {
                    "1": "bitwise_shift_function",
                    "2": "reverse_and_shift_bits",
                    "3": "bitwise_shift",
                    "9": "reverse_bits"
                },
                "LAB_080002f0": {
                    "1": "label1"
                },
                "LZCOUNT": {
                    "1": "leading_zeros"
                },
                "SBORROW4": {
                    "1": "signed_subtraction_overflow"
                },
                "SCARRY4": {
                    "1": "signed_addition_carry"
                },
                "bVar7": {
                    "1": "positive",
                    "16": "is_negative",
                    "2": "is_less_than_zero",
                    "3": "negative_shift"
                },
                "bVar8": {
                    "1": "is_shift_amount_zero_or_negative",
                    "16": "is_zero",
                    "3": "is_zero_shift",
                    "4": "zero_shift"
                },
                "bVar9": {
                    "1": "is_shift_amount_carry",
                    "4": "overflow",
                    "5": "carry_flag",
                    "7": "is_carry"
                },
                "iVar4": {
                    "1": "index",
                    "2": "lz_count",
                    "22": "leading_zeros",
                    "3": "leading_zeroes"
                },
                "in_r12": {
                    "1": "invert_mask",
                    "12": "remaining_bits",
                    "2": "shift_mask",
                    "3": "remaining_shift",
                    "4": "temp"
                },
                "param_1": {
                    "1": "number",
                    "26": "input"
                },
                "uVar1": {
                    "1": "num_bits",
                    "2": "temp_var1",
                    "3": "shifted_value",
                    "5": "result"
                },
                "uVar2": {
                    "1": "temp_number",
                    "19": "abs_input",
                    "3": "abs_value"
                },
                "uVar3": {
                    "1": "shifted_result",
                    "18": "shift_amount",
                    "2": "shift"
                },
                "uVar4": {
                    "1": "temp"
                },
                "uVar5": {
                    "1": "combined_shift_amt",
                    "2": "adjusted_shift_count",
                    "3": "shift_amount"
                },
                "uVar6": {
                    "1": "input_sign",
                    "2": "sign_bit_mask",
                    "23": "sign_bit"
                }
            },
            "called": [],
            "calling": [
                "FUN_08006228"
            ],
            "code": "\nulonglong reverse_bits_08000404(uint input)\n\n{\n  uint result;\n  uint abs_input;\n  uint shift_amount;\n  int leading_zeros;\n  uint total_bits;\n  uint sign_bit;\n  uint remaining_bits;\n  bool is_negative;\n  bool is_zero;\n  bool is_carry;\n  \n  if (input == 0) {\n    return 0;\n  }\n  sign_bit = input & 0x80000000;\n  abs_input = input;\n  if ((int)sign_bit < 0) {\n    abs_input = -input;\n  }\n  result = 0;\n  leading_zeros = count_leading_zeros(abs_input);\n  total_bits = leading_zeros + 0x15;\n  is_carry = signed_subtraction_overflow(total_bits,0x20);\n  shift_amount = leading_zeros - 0xb;\n  is_negative = (int)shift_amount < 0;\n  is_zero = shift_amount == 0;\n  if (total_bits < 0x20) {\n    is_carry = signed_addition_carry(shift_amount,0xc);\n    is_negative = false;\n    is_zero = leading_zeros + 1 == 0;\n    shift_amount = total_bits;\n    if (!is_zero && is_carry == false) {\n      result = abs_input << total_bits;\n      abs_input = abs_input >> (0xcU - (leading_zeros + 1) & 0xff);\n      goto perform_shift;\n    }\n  }\n  if (is_zero || is_negative != is_carry) {\n    remaining_bits = 0x20 - shift_amount;\n  }\n  abs_input = abs_input << (shift_amount & 0xff);\n  if (is_zero || is_negative != is_carry) {\n    abs_input = abs_input | 0U >> (remaining_bits & 0xff);\n  }\n  if (is_zero || is_negative != is_carry) {\n    result = 0 << (shift_amount & 0xff);\n  }\nperform_shift:\n  if (total_bits < 0x433) {\n    return concatenate(abs_input + (0x432 - total_bits) * 0x100000 | sign_bit,result);\n  }\n  shift_amount = ~(0x432 - total_bits);\n  if (0x1e < (int)shift_amount) {\n    return concatenate(input,abs_input >> (shift_amount - 0x1f & 0xff)) & 0x80000000ffffffff;\n  }\n  leading_zeros = shift_amount - 0x13;\n  if (leading_zeros == 0 || leading_zeros < 0 != signed_addition_carry(shift_amount - 0x1f,0xc)) {\n    shift_amount = shift_amount + 1;\n    return concatenate(sign_bit | abs_input >> (shift_amount & 0xff),\n                    result >> (shift_amount & 0xff) | abs_input << (0x20 - shift_amount & 0xff));\n  }\n  return concatenate(input,result >> (0x20 - (0xcU - leading_zeros) & 0xff) | abs_input << (0xcU - leading_zeros & 0xff))\n         & 0x80000000ffffffff;\n}\n\n",
            "current_name": "reverse_bits_08000404",
            "entrypoint": "0x08000404",
            "imported": false,
            "improved": true,
            "renaming": {
                "CONCAT44": "concatenate",
                "FUN_08000404": "reverse_bits_08000404",
                "LAB_080002f0": "perform_shift",
                "LZCOUNT": "count_leading_zeros",
                "SBORROW4": "signed_subtraction_overflow",
                "SCARRY4": "signed_addition_carry",
                "bVar7": "is_negative",
                "bVar8": "is_zero",
                "bVar9": "is_carry",
                "iVar4": "leading_zeros",
                "in_r12": "remaining_bits",
                "param_1": "input",
                "uVar1": "result",
                "uVar2": "abs_input",
                "uVar3": "shift_amount",
                "uVar5": "total_bits",
                "uVar6": "sign_bit"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000428": {
            "additional_data": {
                "FUN_08000428": {
                    "1": "perform_operation",
                    "17": "reverse_bits"
                },
                "bVar10": {
                    "1": "is_shift_negative",
                    "2": "is_carry",
                    "3": "overflow",
                    "4": "carry_flag"
                },
                "bVar11": {
                    "1": "has_carry"
                },
                "bVar8": {
                    "1": "carry_flag1",
                    "4": "check1",
                    "5": "is_negative",
                    "6": "is_zero"
                },
                "bVar9": {
                    "1": "flag2",
                    "2": "is_masked",
                    "3": "is_mask_zero",
                    "4": "check2",
                    "9": "is_zero"
                },
                "iVar6": {
                    "1": "number_of_leading_zeros",
                    "2": "shift_count",
                    "4": "bit_count",
                    "5": "leading_zeros",
                    "7": "count"
                },
                "in_r12": {
                    "1": "combined_remaining_shift",
                    "2": "remaining_shift",
                    "4": "remainder",
                    "9": "remaining_bits"
                },
                "param_1": {
                    "1": "input_number",
                    "23": "input",
                    "4": "input_value"
                },
                "param_2": {
                    "1": "unused_param_1",
                    "2": "constant1",
                    "3": "unused",
                    "4": "unused_param"
                },
                "param_3": {
                    "1": "unused2",
                    "2": "constant2",
                    "3": "unused_param"
                },
                "param_4": {
                    "1": "flag_value",
                    "14": "mask",
                    "3": "input_mask",
                    "4": "flag"
                },
                "uVar1": {
                    "1": "highest_bit",
                    "3": "sign_extension",
                    "6": "sign_bit",
                    "7": "bit31"
                },
                "uVar2": {
                    "1": "temp_number",
                    "2": "result",
                    "4": "shifted_input",
                    "7": "temp"
                },
                "uVar3": {
                    "1": "output_var3",
                    "12": "result",
                    "3": "result1",
                    "4": "result_high"
                },
                "uVar4": {
                    "1": "shifted_and_masked_number_without_leading1_bit",
                    "2": "shift",
                    "3": "shifted",
                    "4": "shift_amount",
                    "6": "shifted_input"
                },
                "uVar5": {
                    "1": "temp_value2",
                    "2": "temp",
                    "3": "temp_value",
                    "4": "temp2",
                    "6": "shifted_input"
                },
                "uVar6": {
                    "1": "shifted_value3"
                },
                "uVar7": {
                    "1": "adjusted_shift_count",
                    "2": "difference",
                    "3": "shift_amount"
                }
            },
            "called": [],
            "calling": [
                "FUN_0800411c",
                "FUN_08003330"
            ],
            "code": "\nulonglong reverse_bits_08000428(uint input,undefined4 unused_param,undefined4 param3,uint mask)\n\n{\n  uint bit31;\n  uint temp;\n  uint result;\n  uint shifted_input;\n  uint shifted_input;\n  int count;\n  uint shift_amount;\n  uint remaining_bits;\n  bool is_zero;\n  bool is_zero;\n  bool check3;\n  \n  shifted_input = input << 1;\n  is_zero = shifted_input == 0;\n  bit31 = (uint)((input & 0x80000000) != 0) << 0x1f;\n  shifted_input = (uint)((int)shifted_input >> 3) >> 1;\n  result = bit31 | shifted_input;\n  input = input << 0x1d;\n  if (!is_zero) {\n    mask = shifted_input & 0xff000000;\n    is_zero = mask == 0;\n  }\n  if (!is_zero) {\n    is_zero = mask == 0xff000000;\n  }\n  if (!is_zero) {\n    return CONCAT44(result,input) ^ 0x3800000000000000;\n  }\n  if (shifted_input == 0 || mask == 0xff000000) {\n    return CONCAT44(result,input);\n  }\n  temp = input;\n  shifted_input = shifted_input;\n  if (shifted_input == 0) {\n    temp = 0;\n    shifted_input = input;\n  }\n  count = LZCOUNT(shifted_input);\n  if (shifted_input == 0) {\n    count = count + 0x20;\n  }\n  shift_amount = count - 0xb;\n  check3 = SBORROW4(shift_amount,0x20);\n  shifted_input = count - 0x2b;\n  is_zero = (int)shifted_input < 0;\n  is_zero = shifted_input == 0;\n  if ((int)shift_amount < 0x20) {\n    check3 = SCARRY4(shifted_input,0xc);\n    count = count + -0x1f;\n    is_zero = count < 0;\n    is_zero = count == 0;\n    shifted_input = shift_amount;\n    if (!is_zero && is_zero == check3) {\n      temp = shifted_input << (shift_amount & 0xff);\n      shifted_input = shifted_input >> (0xcU - count & 0xff);\n      goto LAB_080002f0;\n    }\n  }\n  if (is_zero || is_zero != check3) {\n    remaining_bits = 0x20 - shifted_input;\n  }\n  shifted_input = shifted_input << (shifted_input & 0xff);\n  if (is_zero || is_zero != check3) {\n    shifted_input = shifted_input | temp >> (remaining_bits & 0xff);\n  }\n  if (is_zero || is_zero != check3) {\n    temp = temp << (shifted_input & 0xff);\n  }\nLAB_080002f0:\n  if ((int)shift_amount < 0x381) {\n    return CONCAT44(shifted_input + (0x380 - shift_amount) * 0x100000 | bit31,temp);\n  }\n  shifted_input = ~(0x380 - shift_amount);\n  if ((int)shifted_input < 0x1f) {\n    count = shifted_input - 0x13;\n    if (count != 0 && count < 0 == SCARRY4(shifted_input - 0x1f,0xc)) {\n      return CONCAT44(result,temp >> (0x20 - (0xcU - count) & 0xff) | shifted_input << (0xcU - count & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    shifted_input = shifted_input + 1;\n    return CONCAT44(bit31 | shifted_input >> (shifted_input & 0xff),\n                    temp >> (shifted_input & 0xff) | shifted_input << (0x20 - shifted_input & 0xff));\n  }\n  return CONCAT44(result,shifted_input >> (shifted_input - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "current_name": "reverse_bits_08000428",
            "entrypoint": "0x08000428",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000428": "reverse_bits_08000428",
                "bVar10": "check3",
                "bVar8": "is_zero",
                "bVar9": "is_zero",
                "iVar6": "count",
                "in_r12": "remaining_bits",
                "param_1": "input",
                "param_2": "unused_param",
                "param_3": "param3",
                "param_4": "mask",
                "uVar1": "bit31",
                "uVar2": "temp",
                "uVar3": "result",
                "uVar4": "shifted_input",
                "uVar5": "shifted_input",
                "uVar7": "shift_amount"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080004d0": {
            "additional_data": {
                "<original_function_name>": {
                    "1": "calculate_result"
                },
                "<param_1>": {
                    "1": "input1"
                },
                "<param_2>": {
                    "1": "input2"
                },
                "<param_3>": {
                    "1": "input3"
                },
                "<param_4>": {
                    "1": "input4"
                },
                "FUN_080004d0": {
                    "1": "calculate_result_with_params",
                    "2": "calculate_improved_result",
                    "25": "calculate_result"
                },
                "bVar10": {
                    "1": "result_b_var10",
                    "14": "flag2",
                    "2": "bool2",
                    "3": "flag_2",
                    "5": "condition2"
                },
                "bVar11": {
                    "1": "overflow",
                    "13": "flag3",
                    "2": "bool3",
                    "3": "flag_3",
                    "5": "condition3"
                },
                "bVar9": {
                    "1": "result_b_var9",
                    "13": "flag1",
                    "2": "bool1",
                    "3": "flag_1",
                    "4": "is_zero"
                },
                "iVar5": {
                    "1": "i_var",
                    "10": "temp3",
                    "2": "temp_3",
                    "3": "sum",
                    "4": "var3"
                },
                "lVar2": {
                    "1": "var2",
                    "10": "temp",
                    "11": "result2",
                    "2": "result_2",
                    "3": "temp_var"
                },
                "param_1": {
                    "1": "input_param1",
                    "2": "param1",
                    "22": "input1",
                    "5": "input_1"
                },
                "param_2": {
                    "1": "input1",
                    "22": "input2",
                    "5": "input_2"
                },
                "param_3": {
                    "1": "param3",
                    "22": "input3",
                    "5": "input_3"
                },
                "param_4": {
                    "1": "input3",
                    "22": "input4",
                    "5": "input_4"
                },
                "uVar1": {
                    "1": "product",
                    "11": "result1",
                    "12": "result",
                    "2": "result_1"
                },
                "uVar10": {
                    "1": "flag2"
                },
                "uVar11": {
                    "1": "flag3"
                },
                "uVar12": {
                    "1": "result",
                    "2": "concatenated",
                    "6": "combined_input"
                },
                "uVar3": {
                    "1": "temp_var1",
                    "10": "temp1",
                    "2": "temp_1",
                    "4": "var1"
                },
                "uVar4": {
                    "1": "result_u_var4",
                    "10": "temp2",
                    "2": "result4",
                    "4": "var2"
                },
                "uVar6": {
                    "1": "result_6",
                    "10": "temp4",
                    "2": "temp2",
                    "4": "var4"
                },
                "uVar7": {
                    "1": "new_var5",
                    "2": "var5",
                    "4": "temp5",
                    "5": "temp6"
                },
                "uVar8": {
                    "1": "temp4",
                    "2": "var7",
                    "4": "temp6",
                    "6": "temp7"
                },
                "uVar9": {
                    "1": "flag1"
                },
                "unaff_r5": {
                    "1": "result_unaff_r5",
                    "2": "unaff_r5",
                    "6": "temp5"
                }
            },
            "called": [
                "FUN_080006ac"
            ],
            "calling": [
                "FUN_0800411c",
                "FUN_080071c0",
                "FUN_08006d68",
                "FUN_08006228",
                "FUN_08003330",
                "FUN_08005900",
                "FUN_08006c0c",
                "FUN_08005c70"
            ],
            "code": "\nulonglong calculate_result_080004d0(undefined4 input1,uint input2,uint input3,uint input4)\n\n{\n  ulonglong result;\n  longlong result2;\n  uint temp1;\n  uint temp2;\n  int temp3;\n  uint temp4;\n  uint temp5;\n  uint temp6;\n  uint temp7;\n  bool flag1;\n  bool flag2;\n  bool flag3;\n  ulonglong combined_input;\n  \n  combined_input = CONCAT44(input2,input1);\n  temp6 = 0x7ff;\n  temp2 = input2 >> 0x14 & 0x7ff;\n  flag1 = temp2 == 0;\n  if (!flag1) {\n    temp5 = input4 >> 0x14 & 0x7ff;\n    flag1 = temp5 == 0;\n  }\n  if (!flag1) {\n    flag1 = temp2 == 0x7ff;\n  }\n  if (!flag1) {\n    flag1 = temp5 == 0x7ff;\n  }\n  if (flag1) {\n    combined_input = calculate_result_080004d0_080006ac();\n  }\n  temp1 = (uint)(combined_input >> 0x20);\n  temp3 = temp2 + temp5;\n  temp2 = temp1 ^ input4;\n  temp1 = temp1 & ~(temp6 << 0x15);\n  input4 = input4 & ~(temp6 << 0x15);\n  flag1 = ((uint)combined_input | temp1 << 0xc) == 0;\n  if (!flag1) {\n    flag1 = (input3 | input4 << 0xc) == 0;\n  }\n  temp1 = temp1 | 0x100000;\n  input4 = input4 | 0x100000;\n  if (flag1) {\n    input3 = (uint)combined_input | input3;\n    input4 = (temp2 & 0x80000000 | temp1) ^ input4;\n    temp2 = temp6 >> 1;\n    flag3 = SBORROW4(temp3,temp2);\n    temp4 = temp3 - temp2;\n    flag1 = temp4 == 0;\n    temp1 = temp4;\n    if (!flag1 && (int)temp2 <= temp3) {\n      flag3 = SBORROW4(temp6,temp4);\n      temp1 = temp6 - temp4;\n      flag1 = temp6 == temp4;\n    }\n    if (!flag1 && (int)temp1 < 0 == flag3) {\n      input4 = input4 | temp4 * 0x100000;\n    }\n    if (!flag1 && (int)temp1 < 0 == flag3) {\n      return CONCAT44(input4,input3);\n    }\n    input4 = input4 | 0x100000;\n    temp6 = 0;\n    flag3 = SBORROW4(temp4,1);\n    temp4 = temp4 - 1;\n    flag1 = temp4 == 0;\n    temp2 = temp4;\n  }\n  else {\n    result = (combined_input & 0xffffffff) * (ulonglong)input3;\n    combined_input = (combined_input & 0xffffffff) * (ulonglong)input4 +\n             (ulonglong)temp1 * (ulonglong)input3 + (result >> 0x20);\n    temp7 = (uint)combined_input;\n    result2 = (ulonglong)temp1 * (ulonglong)input4 + (combined_input >> 0x20);\n    temp6 = (uint)result2;\n    temp1 = (uint)((ulonglong)result2 >> 0x20);\n    if ((int)result != 0) {\n      temp7 = temp7 | 1;\n    }\n    temp4 = (temp3 + -0x3ff) - (uint)(temp1 < 0x200);\n    if (temp1 < 0x200) {\n      flag1 = (temp7 & 0x80000000) != 0;\n      temp7 = temp7 << 1;\n      result2 = CONCAT44(temp1 * 2 + (uint)(CARRY4(temp6,temp6) || CARRY4(temp6 * 2,(uint)flag1)),\n                       temp6 * 2 + (uint)flag1);\n    }\n    input4 = temp2 & 0x80000000 | (int)((ulonglong)result2 >> 0x20) << 0xb | (uint)result2 >> 0x15;\n    input3 = (uint)result2 << 0xb | temp7 >> 0x15;\n    temp6 = temp7 * 0x800;\n    flag2 = 0xfc < temp4;\n    flag3 = SBORROW4(temp4,0xfd);\n    temp1 = temp4 - 0xfd;\n    flag1 = temp1 == 0;\n    temp2 = temp1;\n    if (flag2 && !flag1) {\n      flag2 = 0x6ff < temp1;\n      flag3 = SBORROW4(temp1,0x700);\n      temp2 = temp4 - 0x7fd;\n      flag1 = temp1 == 0x700;\n    }\n    if (!flag2 || flag1) {\n      flag1 = 0x7fffffff < temp6;\n      if (temp6 == 0x80000000) {\n        flag1 = (temp7 >> 0x15 & 1) != 0;\n      }\n      return CONCAT44(input4 + temp4 * 0x100000 + (uint)CARRY4(input3,(uint)flag1),input3 + flag1\n                     );\n    }\n  }\n  if (!flag1 && (int)temp2 < 0 == flag3) {\n    return (ulonglong)(input4 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  flag2 = SCARRY4(temp4,0x36);\n  flag1 = (int)(temp4 + 0x36) < 0;\n  flag3 = temp4 == 0xffffffca;\n  if (flag3 || flag1 != flag2) {\n    input3 = 0;\n  }\n  if (flag3 || flag1 != flag2) {\n    input4 = input4 & 0x80000000;\n  }\n  if (flag3 || flag1 != flag2) {\n    return CONCAT44(input4,input3);\n  }\n  temp2 = -temp4;\n  temp1 = temp2 - 0x20;\n  if (0x1f < (int)temp2) {\n    temp4 = input3 >> (temp1 & 0xff) | input4 << (0x20 - temp1 & 0xff);\n    temp2 = (input4 >> (temp1 & 0xff) & ~((input4 & 0x80000000) >> (temp1 & 0xff))) -\n            ((int)temp4 >> 0x1f);\n    if ((temp6 | input3 << (0x20 - temp1 & 0xff) | temp4 << 1) == 0) {\n      temp2 = temp2 & ~(temp4 >> 0x1f);\n    }\n    return CONCAT44(input4,temp2) & 0x80000000ffffffff;\n  }\n  temp3 = temp2 - 0x14;\n  if (temp3 == 0 || temp3 < 0 != SCARRY4(temp1,0xc)) {\n    temp7 = input3 << (temp4 + 0x20 & 0xff);\n    temp1 = input3 >> (temp2 & 0xff) | input4 << (temp4 + 0x20 & 0xff);\n    temp4 = temp1 + -((int)temp7 >> 0x1f);\n    if ((temp6 | temp7 << 1) == 0) {\n      temp4 = temp4 & ~(temp7 >> 0x1f);\n    }\n    return CONCAT44((input4 & 0x80000000) +\n                    ((input4 & 0x7fffffff) >> (temp2 & 0xff)) +\n                    (uint)CARRY4(temp1,-((int)temp7 >> 0x1f)),temp4);\n  }\n  temp2 = 0xc - temp3;\n  temp4 = input3 << (temp2 & 0xff);\n  temp2 = input3 >> (0x20 - temp2 & 0xff) | input4 << (temp2 & 0xff);\n  temp1 = temp2 + -((int)temp4 >> 0x1f);\n  if ((temp6 | temp4 << 1) == 0) {\n    temp1 = temp1 & ~(temp4 >> 0x1f);\n  }\n  return CONCAT44((input4 & 0x80000000) + (uint)CARRY4(temp2,-((int)temp4 >> 0x1f)),temp1);\n}\n\n",
            "current_name": "calculate_result_080004d0",
            "entrypoint": "0x080004d0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080004d0": "calculate_result_080004d0",
                "bVar10": "flag2",
                "bVar11": "flag3",
                "bVar9": "flag1",
                "iVar5": "temp3",
                "lVar2": "result2",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "result",
                "uVar12": "combined_input",
                "uVar3": "temp1",
                "uVar4": "temp2",
                "uVar6": "temp4",
                "uVar7": "temp6",
                "uVar8": "temp7",
                "unaff_r5": "temp5"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080006ac": {
            "additional_data": {
                "FUN_080006ac": {
                    "1": "reverse_and_check_bits",
                    "2": "calculate_bitwise_operation",
                    "3": "reverse_bitwise_operations",
                    "4": "reverse_bits",
                    "6": "calculate_result"
                },
                "bVar4": {
                    "1": "is_valid",
                    "2": "flag_1",
                    "24": "is_zero"
                },
                "in_r12": {
                    "1": "bit4",
                    "2": "bit5",
                    "3": "temp2",
                    "4": "mask",
                    "5": "temp_2"
                },
                "param_1": {
                    "1": "input_param_1",
                    "12": "input1"
                },
                "param_2": {
                    "1": "value2",
                    "12": "input_2"
                },
                "param_3": {
                    "1": "input_val3",
                    "12": "input3"
                },
                "param_4": {
                    "1": "input_param_4",
                    "12": "input4"
                },
                "return": {
                    "1": "result"
                },
                "return_value": {
                    "1": "result"
                },
                "uVar1": {
                    "1": "param_1_bit",
                    "2": "temp1",
                    "3": "temp3",
                    "5": "bit1"
                },
                "uVar2": {
                    "1": "variable2",
                    "2": "temp4",
                    "3": "bit2"
                },
                "uVar3": {
                    "1": "result",
                    "2": "bit4",
                    "3": "bit3"
                },
                "uVar5": {
                    "1": "bit_result"
                },
                "uVar6": {
                    "1": "bit_shifted"
                },
                "uVar7": {
                    "1": "bit_mask"
                },
                "unaff_r4": {
                    "1": "register_r4",
                    "2": "temp2",
                    "3": "bit2",
                    "6": "temp_1"
                }
            },
            "called": [],
            "calling": [
                "FUN_080004d0"
            ],
            "code": "\nulonglong calculate_result_080006ac(uint input1,uint input2,uint input3,uint input4)\n\n{\n  uint bit1;\n  uint temp1;\n  uint bit2;\n  uint bit3;\n  uint temp_2;\n  bool is_zero;\n  \n  bit2 = temp_2 & input4 >> 0x14;\n  if (temp1 != temp_2 && bit2 != temp_2) {\n    is_zero = (input1 | input2 << 1) == 0;\n    if (!is_zero) {\n      is_zero = (input3 | input4 << 1) == 0;\n    }\n    if (is_zero) {\n      result (ulonglong)((input2 ^ input4) & 0x80000000) << 0x20;\n    }\n    if (temp1 == 0) {\n      bit3 = input2 & 0x80000000;\n      do {\n        bit1 = input1 & 0x80000000;\n        input1 = input1 << 1;\n        input2 = input2 * 2 + (uint)(bit1 != 0);\n      } while ((input2 & 0x100000) == 0);\n      input2 = input2 | bit3;\n      if (bit2 != 0) {\n        result CONCAT44(input2,input1);\n      }\n    }\n    do {\n      bit2 = input3 & 0x80000000;\n      input3 = input3 << 1;\n      input4 = input4 * 2 + (uint)(bit2 != 0);\n    } while ((input4 & 0x100000) == 0);\n    result CONCAT44(input2,input1);\n  }\n  is_zero = (input1 | input2 << 1) == 0;\n  if (is_zero) {\n    input2 = input4;\n    input1 = input3;\n  }\n  if (!is_zero) {\n    is_zero = (input3 | input4 << 1) == 0;\n  }\n  bit3 = input2;\n  if (((!is_zero) && ((temp1 != temp_2 || ((input1 | input2 << 0xc) == 0)))) &&\n     ((bit2 != temp_2 || (input1 = input3, bit3 = input4, (input3 | input4 << 0xc) == 0)))) {\n    result (ulonglong)((input2 ^ input4) & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  result CONCAT44(bit3,input1) | 0x7ff8000000000000;\n}\n\n",
            "current_name": "calculate_result_080006ac",
            "entrypoint": "0x080006ac",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080006ac": "calculate_result_080006ac",
                "bVar4": "is_zero",
                "in_r12": "temp_2",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "return": "result",
                "uVar1": "bit1",
                "uVar2": "bit2",
                "uVar3": "bit3",
                "unaff_r4": "temp1"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000724": {
            "additional_data": {
                "FUN_08000724": {
                    "1": "calculate_float_from_uint",
                    "2": "calculate_result",
                    "3": "calculate_float",
                    "9": "calculate_floating_point"
                },
                "bVar14": {
                    "1": "is_true1",
                    "10": "flag1",
                    "3": "bool1",
                    "6": "condition1",
                    "8": "is_zero"
                },
                "bVar15": {
                    "1": "is_true2",
                    "10": "flag2",
                    "3": "bool2",
                    "6": "is_equal"
                },
                "bVar16": {
                    "1": "is_overflow",
                    "10": "flag3",
                    "2": "bool3",
                    "3": "overflow",
                    "4": "condition3"
                },
                "bVar17": {
                    "1": "condition4",
                    "2": "flag4"
                },
                "bVar19": {
                    "1": "is_neg"
                },
                "bVar20": {
                    "1": "is_eq1"
                },
                "iVar8": {
                    "1": "diff_msb",
                    "11": "difference",
                    "2": "exponent_difference"
                },
                "param_1": {
                    "1": "input_param",
                    "15": "input1",
                    "2": "flags",
                    "5": "value1"
                },
                "param_2": {
                    "1": "arg2",
                    "15": "input2",
                    "2": "exponent",
                    "5": "value2"
                },
                "param_3": {
                    "1": "mantissa_hi",
                    "15": "input3",
                    "2": "input_param3",
                    "5": "value3"
                },
                "param_4": {
                    "1": "arg4",
                    "15": "input4",
                    "2": "input_param4",
                    "5": "value4"
                },
                "reverse_bits_08000892": {
                    "3": "reverse_bits"
                },
                "uVar1": {
                    "1": "bit",
                    "16": "temp1",
                    "2": "bit1",
                    "3": "result1"
                },
                "uVar10": {
                    "1": "adjusted_exponent_diff",
                    "2": "var11",
                    "5": "temp11",
                    "8": "temp10"
                },
                "uVar11": {
                    "1": "mantissa_result",
                    "2": "temp3",
                    "5": "temp12",
                    "7": "temp11"
                },
                "uVar12": {
                    "1": "difference2",
                    "2": "var13",
                    "5": "temp13",
                    "7": "temp12"
                },
                "uVar13": {
                    "1": "exponent",
                    "2": "var14",
                    "5": "temp14",
                    "7": "temp13"
                },
                "uVar17": {
                    "1": "concat",
                    "10": "result",
                    "2": "combined_value",
                    "6": "reversed_bits"
                },
                "uVar18": {
                    "1": "reverse_bits_result"
                },
                "uVar19": {
                    "1": "result_mantissa"
                },
                "uVar2": {
                    "1": "var2",
                    "16": "temp2",
                    "2": "bit2",
                    "3": "result2"
                },
                "uVar20": {
                    "1": "carry_bit"
                },
                "uVar21": {
                    "1": "sticky_bit"
                },
                "uVar22": {
                    "1": "is_remaining"
                },
                "uVar23": {
                    "2": "result"
                },
                "uVar24": {
                    "1": "carry"
                },
                "uVar3": {
                    "1": "calculation1",
                    "15": "temp3",
                    "2": "bit3"
                },
                "uVar4": {
                    "1": "u_var4",
                    "15": "temp4",
                    "2": "bit4"
                },
                "uVar5": {
                    "1": "bit4",
                    "15": "temp5",
                    "2": "result5"
                },
                "uVar6": {
                    "1": "result",
                    "15": "temp6",
                    "2": "result6"
                },
                "uVar7": {
                    "1": "input2_msb",
                    "15": "temp7",
                    "2": "bit7"
                },
                "uVar9": {
                    "1": "adjusted_exponent",
                    "11": "temp9",
                    "2": "temp1"
                },
                "unaff_r5": {
                    "1": "bit5_unaff",
                    "2": "temp14",
                    "5": "temp10"
                }
            },
            "called": [
                "FUN_08000892"
            ],
            "calling": [
                "FUN_08006070",
                "FUN_08005bc8",
                "FUN_08006d68",
                "FUN_08006228",
                "FUN_08003330",
                "FUN_08005900",
                "FUN_08006c0c",
                "FUN_08005c70"
            ],
            "code": "\nulonglong calculate_floating_point_08000724(undefined4 input1,uint input2,uint input3,uint input4)\n\n{\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  uint temp4;\n  uint temp5;\n  uint temp6;\n  uint temp7;\n  int difference;\n  uint temp9;\n  uint temp10;\n  uint temp10;\n  uint temp11;\n  uint temp12;\n  uint temp13;\n  bool flag1;\n  bool flag2;\n  bool flag3;\n  undefined8 result;\n  \n  result = CONCAT44(input2,input1);\n  temp13 = 0x7ff;\n  temp7 = input2 >> 0x14 & 0x7ff;\n  flag1 = temp7 == 0;\n  if (!flag1) {\n    temp10 = input4 >> 0x14 & 0x7ff;\n    flag1 = temp10 == 0;\n  }\n  if (!flag1) {\n    flag1 = temp7 == 0x7ff;\n  }\n  if (!flag1) {\n    flag1 = temp10 == 0x7ff;\n  }\n  if (flag1) {\n    result = reverse_bits();\n  }\n  temp9 = (uint)((ulonglong)result >> 0x20);\n  temp11 = (uint)result;\n  difference = temp7 - temp10;\n  if ((input3 | input4 << 0xc) == 0) {\n    temp7 = (temp9 ^ input4) & 0x80000000 | temp9 & 0xfffff;\n    flag3 = SCARRY4(difference,temp13 >> 1);\n    temp9 = difference + (temp13 >> 1);\n    flag1 = (int)temp9 < 0;\n    flag2 = temp9 == 0;\n    if (!flag2 && flag1 == flag3) {\n      flag3 = SBORROW4(temp13,temp9);\n      flag1 = (int)(temp13 - temp9) < 0;\n      flag2 = temp13 == temp9;\n    }\n    if (!flag2 && flag1 == flag3) {\n      temp7 = temp7 | temp9 * 0x100000;\n    }\n    if (!flag2 && flag1 == flag3) {\n      return CONCAT44(temp7,temp11);\n    }\n    temp7 = temp7 | 0x100000;\n    temp13 = 0;\n    flag2 = SBORROW4(temp9,1);\n    temp9 = temp9 - 1;\n    flag1 = temp9 == 0;\n    temp3 = temp9;\n  }\n  else {\n    temp3 = (input4 << 0xc) >> 4 | 0x10000000 | input3 >> 0x18;\n    temp13 = input3 << 8;\n    temp10 = (temp9 << 0xc) >> 4 | 0x10000000 | temp11 >> 0x18;\n    temp11 = temp11 * 0x100;\n    temp7 = (temp9 ^ input4) & 0x80000000;\n    flag1 = temp3 <= temp10;\n    if (temp10 == temp3) {\n      flag1 = temp13 <= temp11;\n    }\n    difference = difference + (uint)flag1;\n    temp9 = difference + 0x3fd;\n    if (flag1 == false) {\n      temp3 = temp3 >> 1;\n      temp13 = (uint)((input3 >> 0x18 & 1) != 0) << 0x1f | temp13 >> 1;\n    }\n    temp12 = temp11 - temp13;\n    temp10 = (temp10 - temp3) - (uint)(temp11 < temp13);\n    temp4 = temp3 >> 1;\n    temp1 = (uint)((temp3 & 1) != 0) << 0x1f | temp13 >> 1;\n    temp11 = 0x100000;\n    temp3 = 0x80000;\n    while( true ) {\n      flag1 = temp1 <= temp12;\n      if (temp4 < temp10 || temp10 - temp4 < (uint)flag1) {\n        temp12 = temp12 - temp1;\n        temp11 = temp11 | temp3;\n        temp10 = (temp10 - temp4) - (uint)!flag1;\n      }\n      temp5 = temp4 >> 1;\n      temp1 = (uint)((temp4 & 1) != 0) << 0x1f | temp1 >> 1;\n      flag2 = temp1 <= temp12;\n      flag1 = temp10 - temp5 < (uint)flag2;\n      temp13 = temp10;\n      if (temp5 < temp10 || flag1) {\n        temp12 = temp12 - temp1;\n        temp13 = (temp10 - temp5) - (uint)!flag2;\n      }\n      if (temp5 < temp10 || flag1) {\n        temp11 = temp11 | temp3 >> 1;\n      }\n      temp10 = temp4 >> 2;\n      temp2 = (uint)((temp5 & 1) != 0) << 0x1f | temp1 >> 1;\n      flag2 = temp2 <= temp12;\n      flag1 = temp13 - temp10 < (uint)flag2;\n      temp5 = temp13;\n      if (temp10 < temp13 || flag1) {\n        temp12 = temp12 - temp2;\n        temp5 = (temp13 - temp10) - (uint)!flag2;\n      }\n      if (temp10 < temp13 || flag1) {\n        temp11 = temp11 | temp3 >> 2;\n      }\n      temp6 = temp4 >> 3;\n      temp1 = (uint)((temp10 & 1) != 0) << 0x1f | temp2 >> 1;\n      flag2 = temp1 <= temp12;\n      flag1 = temp5 - temp6 < (uint)flag2;\n      temp10 = temp5;\n      if (temp6 < temp5 || flag1) {\n        temp12 = temp12 - temp1;\n        temp10 = (temp5 - temp6) - (uint)!flag2;\n      }\n      if (temp6 < temp5 || flag1) {\n        temp11 = temp11 | temp3 >> 3;\n      }\n      temp13 = temp10 | temp12;\n      if (temp13 == 0) break;\n      temp10 = temp10 << 4 | temp12 >> 0x1c;\n      temp12 = temp12 << 4;\n      temp4 = temp4 & 0xfffffff8 | temp1 >> 0x1d;\n      temp1 = (temp2 >> 1) << 3;\n      temp3 = temp3 >> 4;\n      if (temp3 == 0) {\n        temp6 = temp4;\n        if ((temp7 & 0x100000) != 0) goto LAB_08000842;\n        temp7 = temp7 | temp11;\n        temp11 = 0;\n        temp3 = 0x80000000;\n      }\n    }\n    if ((temp7 & 0x100000) == 0) {\n      temp7 = temp7 | temp11;\n      temp11 = 0;\n    }\nLAB_08000842:\n    flag3 = 0xfc < temp9;\n    flag2 = SBORROW4(temp9,0xfd);\n    temp4 = difference + 0x300;\n    flag1 = temp4 == 0;\n    temp3 = temp4;\n    if (flag3 && !flag1) {\n      flag3 = 0x6ff < temp4;\n      flag2 = SBORROW4(temp4,0x700);\n      temp3 = difference - 0x400;\n      flag1 = temp4 == 0x700;\n    }\n    if (!flag3 || flag1) {\n      flag1 = temp6 <= temp10;\n      if (temp10 == temp6) {\n        flag1 = temp1 <= temp12;\n      }\n      if (temp10 == temp6 && temp12 == temp1) {\n        flag1 = (temp11 & 1) != 0;\n      }\n      return CONCAT44(temp7 + temp9 * 0x100000 + (uint)CARRY4(temp11,(uint)flag1),temp11 + flag1);\n    }\n  }\n  if (!flag1 && (int)temp3 < 0 == flag2) {\n    return (ulonglong)(temp7 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  flag3 = SCARRY4(temp9,0x36);\n  flag1 = (int)(temp9 + 0x36) < 0;\n  flag2 = temp9 == 0xffffffca;\n  if (flag2 || flag1 != flag3) {\n    temp11 = 0;\n  }\n  if (flag2 || flag1 != flag3) {\n    temp7 = temp7 & 0x80000000;\n  }\n  if (flag2 || flag1 != flag3) {\n    return CONCAT44(temp7,temp11);\n  }\n  temp3 = -temp9;\n  temp10 = temp3 - 0x20;\n  if (0x1f < (int)temp3) {\n    temp3 = temp11 >> (temp10 & 0xff) | temp7 << (0x20 - temp10 & 0xff);\n    temp9 = (temp7 >> (temp10 & 0xff) & ~((temp7 & 0x80000000) >> (temp10 & 0xff))) -\n            ((int)temp3 >> 0x1f);\n    if ((temp13 | temp11 << (0x20 - temp10 & 0xff) | temp3 << 1) == 0) {\n      temp9 = temp9 & ~(temp3 >> 0x1f);\n    }\n    return CONCAT44(temp7,temp9) & 0x80000000ffffffff;\n  }\n  difference = temp3 - 0x14;\n  if (difference != 0 && difference < 0 == SCARRY4(temp10,0xc)) {\n    temp9 = 0xc - difference;\n    temp3 = temp11 << (temp9 & 0xff);\n    temp11 = temp11 >> (0x20 - temp9 & 0xff) | temp7 << (temp9 & 0xff);\n    temp9 = temp11 + -((int)temp3 >> 0x1f);\n    if ((temp13 | temp3 << 1) == 0) {\n      temp9 = temp9 & ~(temp3 >> 0x1f);\n    }\n    return CONCAT44((temp7 & 0x80000000) + (uint)CARRY4(temp11,-((int)temp3 >> 0x1f)),temp9);\n  }\n  temp10 = temp11 << (temp9 + 0x20 & 0xff);\n  temp11 = temp11 >> (temp3 & 0xff) | temp7 << (temp9 + 0x20 & 0xff);\n  temp9 = temp11 + -((int)temp10 >> 0x1f);\n  if ((temp13 | temp10 << 1) == 0) {\n    temp9 = temp9 & ~(temp10 >> 0x1f);\n  }\n  return CONCAT44((temp7 & 0x80000000) +\n                  ((temp7 & 0x7fffffff) >> (temp3 & 0xff)) +\n                  (uint)CARRY4(temp11,-((int)temp10 >> 0x1f)),temp9);\n}\n\n",
            "current_name": "calculate_floating_point_08000724",
            "entrypoint": "0x08000724",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000724": "calculate_floating_point_08000724",
                "bVar14": "flag1",
                "bVar15": "flag2",
                "bVar16": "flag3",
                "iVar8": "difference",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "reverse_bits_08000892": "reverse_bits",
                "uVar1": "temp1",
                "uVar10": "temp10",
                "uVar11": "temp11",
                "uVar12": "temp12",
                "uVar13": "temp13",
                "uVar17": "result",
                "uVar2": "temp2",
                "uVar3": "temp3",
                "uVar4": "temp4",
                "uVar5": "temp5",
                "uVar6": "temp6",
                "uVar7": "temp7",
                "uVar9": "temp9",
                "unaff_r5": "temp10"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000892": {
            "additional_data": {
                "<original_function_name>": {
                    "1": "reverse_bits"
                },
                "<param_1>": {
                    "1": "input1"
                },
                "<param_2>": {
                    "1": "input3"
                },
                "<param_3>": {
                    "1": "input2"
                },
                "<param_4>": {
                    "1": "input4"
                },
                "FUN_08000892": {
                    "1": "decode_and_merge_bits",
                    "2": "decode_float",
                    "4": "reverse_bits"
                },
                "LAB_080006c8": {
                    "1": "return_case_2"
                },
                "LAB_08000704": {
                    "1": "return_case_1"
                },
                "bVar4": {
                    "1": "temp_var_6",
                    "2": "flag",
                    "25": "is_zero"
                },
                "in_r12": {
                    "1": "temp4",
                    "2": "shift",
                    "3": "temp5",
                    "4": "constant"
                },
                "param_1": {
                    "1": "input_a",
                    "19": "input1",
                    "3": "input_1"
                },
                "param_2": {
                    "1": "value2",
                    "19": "input2",
                    "3": "input_2"
                },
                "param_3": {
                    "1": "num3",
                    "19": "input3",
                    "3": "input_3"
                },
                "param_4": {
                    "1": "input_param_4",
                    "19": "input4",
                    "3": "input_4"
                },
                "uVar1": {
                    "1": "bit_check_1",
                    "17": "bit1",
                    "2": "temp2"
                },
                "uVar2": {
                    "1": "bit_check_2",
                    "2": "bit3",
                    "3": "temp2",
                    "9": "bit2"
                },
                "uVar3": {
                    "1": "result",
                    "2": "bit4",
                    "3": "temp4",
                    "8": "bit3"
                },
                "unaff_r4": {
                    "1": "temp2",
                    "2": "constant2",
                    "3": "bit2",
                    "8": "temp1"
                }
            },
            "called": [],
            "calling": [
                "FUN_08000724"
            ],
            "code": "\nulonglong reverse_bits_08000892(uint input1,uint input2,uint input3,uint input4)\n\n{\n  uint bit1;\n  uint temp1;\n  uint bit2;\n  uint bit3;\n  uint constant;\n  bool is_zero;\n  \n  bit2 = constant & input4 >> 0x14;\n  bit3 = input2;\n  if (temp1 != constant || bit2 != constant) {\n    if (temp1 == constant) {\n      if (((input1 | input2 << 0xc) == 0) && (input1 = input3, bit3 = input4, bit2 != constant)\n         ) {\nreturn_case_1:\n        return (ulonglong)((input2 ^ input4) & 0x80000000 | 0x7ff00000) << 0x20;\n      }\n    }\n    else if (bit2 == constant) {\n      input1 = input3;\n      bit3 = input4;\n      if ((input3 | input4 << 0xc) == 0) {\nreturn_case_2:\n        return (ulonglong)((input2 ^ input4) & 0x80000000) << 0x20;\n      }\n    }\n    else {\n      is_zero = (input1 | input2 << 1) == 0;\n      if (!is_zero) {\n        is_zero = (input3 | input4 << 1) == 0;\n      }\n      if (!is_zero) {\n        if (temp1 == 0) {\n          bit3 = input2 & 0x80000000;\n          do {\n            bit1 = input1 & 0x80000000;\n            input1 = input1 << 1;\n            input2 = input2 * 2 + (uint)(bit1 != 0);\n          } while ((input2 & 0x100000) == 0);\n          input2 = input2 | bit3;\n          if (bit2 != 0) {\n            return CONCAT44(input2,input1);\n          }\n        }\n        do {\n          bit3 = input3 & 0x80000000;\n          input3 = input3 << 1;\n          input4 = input4 * 2 + (uint)(bit3 != 0);\n        } while ((input4 & 0x100000) == 0);\n        return CONCAT44(input2,input1);\n      }\n      if ((input1 | input2 << 1) != 0) goto return_case_1;\n      if ((input3 | input4 << 1) != 0) goto return_case_2;\n    }\n  }\n  return CONCAT44(bit3,input1) | 0x7ff8000000000000;\n}\n\n",
            "current_name": "reverse_bits_08000892",
            "entrypoint": "0x08000892",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000892": "reverse_bits_08000892",
                "LAB_080006c8": "return_case_2",
                "LAB_08000704": "return_case_1",
                "bVar4": "is_zero",
                "in_r12": "constant",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "bit1",
                "uVar2": "bit2",
                "uVar3": "bit3",
                "unaff_r4": "temp1"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000904": {
            "additional_data": {
                "FUN_08000904": {
                    "1": "compare_values_and_conditions",
                    "2": "compare_parameters",
                    "8": "check_parameters",
                    "9": "check_equality"
                },
                "bVar2": {
                    "1": "condition_1",
                    "18": "is_zero",
                    "2": "is_equal"
                },
                "bVar3": {
                    "1": "comparison_result",
                    "10": "is_negative",
                    "2": "is_zero2",
                    "3": "is_less_or_equal"
                },
                "param_1": {
                    "1": "first_input",
                    "16": "value1",
                    "2": "value_1",
                    "4": "input_1",
                    "7": "a"
                },
                "param_1 | param_2 << 0xc": {
                    "1": "combined_1"
                },
                "param_1 | param_2 << 1": {
                    "1": "value1_or_shifted_value2"
                },
                "param_2": {
                    "1": "val2",
                    "16": "value2",
                    "2": "value_2",
                    "4": "input_2",
                    "7": "b"
                },
                "param_2 << 1": {
                    "1": "shifted_param_2"
                },
                "param_2 == param_4": {
                    "1": "are_equal"
                },
                "param_2 ^ param_4": {
                    "1": "param_xor"
                },
                "param_3": {
                    "1": "val3",
                    "16": "value3",
                    "2": "value_3",
                    "4": "input_3",
                    "7": "c"
                },
                "param_3 <= param_1": {
                    "1": "is_less_or_equal"
                },
                "param_3 | param_4 << 0xc": {
                    "1": "combined_2"
                },
                "param_3 | param_4 << 1": {
                    "1": "value3_or_shifted_value4"
                },
                "param_4": {
                    "1": "shift_count",
                    "15": "value4",
                    "2": "shifted_param_4",
                    "4": "input_4",
                    "6": "d"
                },
                "param_4 << 1": {
                    "1": "shifted_param_4"
                },
                "param_4 <= param_2": {
                    "1": "is_less_or_equal"
                },
                "param_4 >> 0x1f": {
                    "1": "shifted_value4_right"
                },
                "param_4 | 1": {
                    "1": "result"
                },
                "return": {
                    "1": "result"
                },
                "uVar1": {
                    "1": "param_difference",
                    "13": "result",
                    "15": "xor_result"
                }
            },
            "called": [],
            "calling": [
                "FUN_08000990"
            ],
            "code": "\nuint check_equality_08000904(uint value1,uint value2,uint value3,uint value4)\n\n{\n  uint xor_result;\n  bool is_zero;\n  bool is_negative;\n  \n  if (((int)(value2 << 1) >> 0x15 == -1 || (int)(value4 << 1) >> 0x15 == -1) &&\n     ((((int)(value2 << 1) >> 0x15 == -1 && ((value1 | value2 << 0xc) != 0)) ||\n      (((int)(value4 << 1) >> 0x15 == -1 && ((value3 | value4 << 0xc) != 0)))))) {\n    result 1;\n  }\n  is_zero = (value1 | value2 << 1) == 0;\n  if (is_zero) {\n    is_zero = (value3 | value4 << 1) == 0;\n  }\n  if (!is_zero) {\n    is_zero = value2 == value4;\n  }\n  if (is_zero) {\n    is_zero = value1 == value3;\n  }\n  if (!is_zero) {\n    xor_result = value2 ^ value4;\n    is_zero = xor_result == 0;\n    if (-1 < (int)xor_result) {\n      is_zero = value2 == value4;\n    }\n    is_negative = -1 < (int)xor_result && value4 <= value2;\n    if (is_zero) {\n      is_negative = value3 <= value1;\n    }\n    value4 = (int)value4 >> 0x1f;\n    if (!is_negative) {\n      value4 = ~value4;\n    }\n    result value4 | 1;\n  }\n  result 0;\n}\n\n",
            "current_name": "check_equality_08000904",
            "entrypoint": "0x08000904",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000904": "check_equality_08000904",
                "bVar2": "is_zero",
                "bVar3": "is_negative",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "value3",
                "param_4": "value4",
                "return": "result",
                "uVar1": "xor_result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000980": {
            "additional_data": {
                "FUN_08000980": {
                    "1": "compare_doubles",
                    "12": "compare_floats",
                    "2": "compare_float_values",
                    "3": "compare_floating_point_values",
                    "8": "compare_floating_point_numbers"
                },
                "FUN_08000990": {
                    "1": "apply_function"
                },
                "__aeabi_cdcmpeq": {
                    "1": "compare_floats"
                },
                "param_1": {
                    "1": "comparison_result",
                    "14": "result",
                    "2": "arg1",
                    "3": "value1",
                    "5": "input1"
                },
                "param_2": {
                    "1": "length",
                    "2": "arg2",
                    "3": "value2",
                    "4": "status",
                    "5": "input2"
                },
                "param_3": {
                    "1": "comparison_param1",
                    "2": "input1",
                    "3": "number1",
                    "4": "value1",
                    "7": "float1"
                },
                "param_4": {
                    "1": "comparison_result2",
                    "2": "value4",
                    "3": "number2",
                    "4": "value2",
                    "7": "float2"
                },
                "undefined4 param_1": {
                    "1": "result"
                },
                "undefined4 param_2": {
                    "1": "status"
                },
                "undefined4 param_3": {
                    "1": "value1"
                },
                "undefined4 param_4": {
                    "1": "value2"
                }
            },
            "called": [
                "FUN_08000990"
            ],
            "calling": [
                "FUN_080009f0"
            ],
            "code": "\nvoid compare_floats_08000980(undefined4 result,undefined4 input2,undefined4 float1,undefined4 float2)\n\n{\n  compare_floating_point_values_helper(float1,float2,result,input2);\n  return;\n}\n\n",
            "current_name": "compare_floats_08000980",
            "entrypoint": "0x08000980",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000980": "compare_floats_08000980",
                "__aeabi_cdcmpeq": "compare_floating_point_values_helper",
                "param_1": "result",
                "param_2": "input2",
                "param_3": "float1",
                "param_4": "float2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000990": {
            "additional_data": {
                "FUN_08000904": {
                    "1": "perform_operation",
                    "2": "perform_unsigned_conversion",
                    "3": "perform_arithmetic_operation",
                    "4": "calculate_sum",
                    "6": "calculate_result"
                },
                "FUN_08000990": {
                    "1": "process",
                    "2": "convert_undefined_to_unsigned",
                    "3": "convert_undefined_to_float",
                    "5": "calculate_result",
                    "6": "convert_to_float"
                },
                "param_1": {
                    "1": "input_data",
                    "2": "param1",
                    "3": "input1",
                    "4": "input",
                    "5": "value1",
                    "8": "input_value"
                },
                "param_2": {
                    "1": "b",
                    "2": "operand1",
                    "3": "operand2",
                    "5": "value2",
                    "7": "value1"
                },
                "param_3": {
                    "1": "val3",
                    "2": "operand2",
                    "3": "input3",
                    "5": "value3",
                    "7": "value2"
                },
                "param_4": {
                    "1": "operand_4",
                    "2": "operand3",
                    "3": "input4",
                    "5": "value4",
                    "7": "value3"
                }
            },
            "called": [
                "FUN_08000904"
            ],
            "calling": [
                "FUN_08000980",
                "FUN_080009b4",
                "FUN_080009c8",
                "FUN_080009a0"
            ],
            "code": "\nundefined4 convert_to_float_08000990(undefined4 input_value)\n\n{\n  __nedf2();\n  return input_value;\n}\n\n",
            "current_name": "convert_to_float_08000990",
            "entrypoint": "0x08000990",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000990": "convert_to_float_08000990",
                "param_1": "input_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080009a0": {
            "additional_data": {
                "FUN_08000990": {
                    "1": "calculate_result"
                },
                "FUN_080009a0": {
                    "1": "is_cdcmp_not_equal",
                    "2": "check_if_equal",
                    "3": "is_not_zero",
                    "4": "check_if_not_equal_zero",
                    "5": "check_if_not_zero"
                },
                "__aeabi_cdcmpeq": {
                    "1": "compare_floats"
                },
                "in_ZR": {
                    "1": "is_equal",
                    "18": "result",
                    "2": "is_not_zero",
                    "3": "is_not_equal"
                }
            },
            "called": [
                "FUN_08000990"
            ],
            "calling": [
                "FUN_08005900"
            ],
            "code": "\nbool check_if_not_zero_080009a0(void)\n\n{\n  char result;\n  \n  compare_floats();\n  return result != '\\0';\n}\n\n",
            "current_name": "check_if_not_zero_080009a0",
            "entrypoint": "0x080009a0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080009a0": "check_if_not_zero_080009a0",
                "__aeabi_cdcmpeq": "compare_floats",
                "in_ZR": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080009b4": {
            "additional_data": {
                "'\\0'": {
                    "1": "zero"
                },
                "FUN_08000990": {
                    "1": "perform_operation"
                },
                "FUN_080009b4": {
                    "1": "check_cdequal_to_zero",
                    "2": "check_if_cy_is_empty",
                    "4": "is_cy_zero",
                    "6": "is_cy_null"
                },
                "__aeabi_cdcmpeq": {
                    "1": "compare_floating_numbers",
                    "2": "compare_floats"
                },
                "bool": {
                    "1": ""
                },
                "char": {
                    "1": ""
                },
                "in_CY": {
                    "1": "input_flag",
                    "2": "carry_flag",
                    "3": "input_character",
                    "4": "cy_value",
                    "8": "cy"
                },
                "param_1": {
                    "1": "input_param"
                },
                "return": {
                    "1": ""
                },
                "undefined4": {
                    "1": "result"
                }
            },
            "called": [
                "FUN_08000990"
            ],
            "calling": [
                "FUN_08005bc8",
                "FUN_08005900"
            ],
            "code": "\nbool is_cy_null_080009b4(void)\n\n{\n  char input_char;\n  \n  compare_floats();\n  return input_char == '\\0';\n}\n\n",
            "current_name": "is_cy_null_080009b4",
            "entrypoint": "0x080009b4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080009b4": "is_cy_null_080009b4",
                "__aeabi_cdcmpeq": "compare_floats",
                "in_CY": "input_char"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080009c8": {
            "additional_data": {
                "FUN_08000990": {
                    "1": "perform_comparison"
                },
                "FUN_080009c8": {
                    "1": "check_for_zero",
                    "2": "check_comparison_result",
                    "8": "check_equality"
                },
                "PTR_FUN_08000990": {
                    "1": "compare_values"
                },
                "in_CY": {
                    "1": "is_equal",
                    "11": "carry_flag",
                    "2": "has_carry",
                    "4": "is_carry",
                    "5": "is_carry_set"
                },
                "in_ZR": {
                    "1": "flag_zero_result",
                    "11": "zero_flag",
                    "3": "zero_result",
                    "7": "is_zero"
                },
                "param_1": {
                    "1": "input_value"
                }
            },
            "called": [
                "FUN_08000990"
            ],
            "calling": [
                "FUN_08006228"
            ],
            "code": "\nbool check_equality_080009c8(void)\n\n{\n  undefined zero_flag;\n  undefined carry_flag;\n  \n  __aeabi_cdcmpeq();\n  return !(bool)carry_flag || (bool)zero_flag;\n}\n\n",
            "current_name": "check_equality_080009c8",
            "entrypoint": "0x080009c8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080009c8": "check_equality_080009c8",
                "in_CY": "carry_flag",
                "in_ZR": "zero_flag"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080009f0": {
            "additional_data": {
                "FUN_080009f0": {
                    "1": "is_null",
                    "2": "check_null_terminator",
                    "3": "check_if_empty",
                    "4": "is_null_terminated",
                    "7": "check_if_null"
                },
                "__aeabi_cdrcmple": {
                    "1": "compare_character_to_null"
                },
                "in_CY": {
                    "1": "char_input",
                    "10": "input_char",
                    "12": "input_character",
                    "4": "character"
                },
                "param_1": {
                    "1": "arg1"
                },
                "param_2": {
                    "1": "arg2"
                },
                "param_3": {
                    "1": "arg3"
                },
                "param_4": {
                    "1": "arg4"
                }
            },
            "called": [
                "FUN_08000980"
            ],
            "calling": [
                "FUN_08006d68",
                "FUN_08006228",
                "FUN_08005854",
                "FUN_08005c70"
            ],
            "code": "\nbool check_if_null_080009f0(void)\n\n{\n  char input_character;\n  \n  compare_character_to_null();\n  return input_character == '\\0';\n}\n\n",
            "current_name": "check_if_null_080009f0",
            "entrypoint": "0x080009f0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080009f0": "check_if_null_080009f0",
                "__aeabi_cdrcmple": "compare_character_to_null",
                "in_CY": "input_character"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000a04": {
            "additional_data": {
                "FUN_08000a04": {
                    "1": "check_validity",
                    "13": "check_parameters",
                    "2": "check_conditions",
                    "3": "check_params_valid",
                    "6": "check_params"
                },
                "param_1": {
                    "1": "input_value1",
                    "11": "value1",
                    "2": "param1",
                    "4": "input1",
                    "5": "value_1"
                },
                "param_1 | param_2 << 0xc": {
                    "1": "combined_value1_2"
                },
                "param_2": {
                    "1": "parameter_2",
                    "11": "value2",
                    "2": "input_2",
                    "4": "input2",
                    "5": "value_2"
                },
                "param_2 << 1": {
                    "2": "shifted_value2"
                },
                "param_3": {
                    "1": "value_c",
                    "11": "value3",
                    "2": "param3",
                    "4": "input3",
                    "5": "value_3"
                },
                "param_3 | param_4 << 0xc": {
                    "1": "combined_value3_4"
                },
                "param_4": {
                    "1": "parameter_4",
                    "11": "value4",
                    "2": "input_4",
                    "4": "input4",
                    "5": "value_4"
                },
                "param_4 << 1": {
                    "2": "shifted_value4"
                }
            },
            "called": [],
            "calling": [
                "FUN_08005bc8",
                "FUN_08005900",
                "FUN_08005854"
            ],
            "code": "\nundefined4 check_parameters_08000a04(uint value1,int value2,uint value3,int value4)\n\n{\n  if ((((value2 << 1) >> 0x15 != -1) || ((value1 | value2 << 0xc) == 0)) &&\n     (((value4 << 1) >> 0x15 != -1 || ((value3 | value4 << 0xc) == 0)))) {\n    return 0;\n  }\n  return 1;\n}\n\n",
            "current_name": "check_parameters_08000a04",
            "entrypoint": "0x08000a04",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000a04": "check_parameters_08000a04",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "value3",
                "param_4": "value4"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000a30": {
            "additional_data": {
                "0x7fffffff < param_1 * 8": {
                    "1": "check_overflow"
                },
                "FUN_08000a30": {
                    "1": "compute_float_bits",
                    "2": "convert_float_to_fixed",
                    "6": "calculate_float",
                    "7": "calculate_floating_point"
                },
                "SCARRY4": {
                    "1": "has_carry",
                    "3": "is_carry"
                },
                "bVar4": {
                    "1": "is_zero_value",
                    "23": "is_zero"
                },
                "bVar5": {
                    "1": "is_small_value",
                    "2": "is_small",
                    "3": "is_less_than_threshold",
                    "6": "is_less_than"
                },
                "in_r12": {
                    "1": "normalized_float",
                    "2": "temp_var3",
                    "7": "temp3"
                },
                "param_1": {
                    "1": "input_a",
                    "2": "input_integer",
                    "3": "float_value",
                    "4": "input1",
                    "5": "input"
                },
                "param_2": {
                    "1": "float_b",
                    "2": "mask",
                    "3": "flags",
                    "4": "input2"
                },
                "uVar1": {
                    "1": "result_float",
                    "25": "result"
                },
                "uVar1 >> 0x1d": {
                    "1": "shifted_result"
                },
                "uVar2": {
                    "1": "temp4",
                    "2": "double_multiplier",
                    "3": "shifted_flags",
                    "6": "temp1"
                },
                "uVar2 + 0x92e00000": {
                    "1": "sum"
                },
                "uVar2 >> 0x15": {
                    "1": "shifted_doubled_input2"
                },
                "uVar3": {
                    "1": "temp_float",
                    "2": "adjusted_exponent",
                    "7": "temp2"
                }
            },
            "called": [],
            "calling": [
                "FUN_0800411c",
                "FUN_08003330"
            ],
            "code": "\nuint calculate_floating_point_08000a30(uint input,uint input2)\n\n{\n  uint result;\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  bool is_zero;\n  bool is_less_than;\n  \n  temp1 = input2 * 2;\n  is_less_than = temp1 < 0x70000000;\n  temp2 = temp1 + 0x90000000;\n  result = temp2;\n  if (!is_less_than) {\n    temp3 = temp1 + 0x8fe00000;\n    result = temp3;\n  }\n  is_zero = result == 0;\n  if (!is_less_than && temp2 >= 0x200000) {\n    is_zero = temp3 == 0x1fc00000;\n  }\n  if (((is_less_than || temp2 < 0x200000) || 0x1fc00000 < temp3) || is_zero) {\n    if ((input2 & 0x40000000) != 0) {\n      if (((int)temp1 >> 0x15 == -1) && ((input | input2 << 0xc) != 0)) {\n        return 0x7fc00000;\n      }\n      return input2 & 0x80000000 | 0x7f800000;\n    }\n    if ((int)(temp1 + 0x92e00000) < 0 != is_carry(temp2,0x2e00000)) {\n      return input2 & 0x80000000;\n    }\n    temp1 = 0x18 - (temp1 + 0x92e00000 >> 0x15);\n    result = input >> (temp1 & 0xff);\n    if (input << (0x20 - temp1 & 0xff) != 0) {\n      result = result | 1;\n    }\n    temp2 = input2 & 0x1fffff | 0x100000;\n    input = result | temp2 << (0x20 - temp1 & 0xff);\n    temp2 = (temp2 >> (temp1 & 0xff)) << 1;\n  }\n  result = (input2 & 0x80000000 | input >> 0x1d) + temp2 * 4 + (uint)(0x7fffffff < input * 8);\n  if (input * 8 == 0x80000000) {\n    result = result & 0xfffffffe;\n  }\n  return result;\n}\n\n",
            "current_name": "calculate_floating_point_08000a30",
            "entrypoint": "0x08000a30",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000a30": "calculate_floating_point_08000a30",
                "SCARRY4": "is_carry",
                "bVar4": "is_zero",
                "bVar5": "is_less_than",
                "in_r12": "temp3",
                "param_1": "input",
                "param_2": "input2",
                "uVar1": "result",
                "uVar2": "temp1",
                "uVar3": "temp2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000ad8": {
            "additional_data": {
                "FUN_08000ad8": {
                    "1": "calculate_updated_value",
                    "2": "perform_arithmetic_operation",
                    "3": "reverse_bits",
                    "4": "calculate_floating_point",
                    "8": "calculate_float"
                },
                "bVar8": {
                    "1": "condition",
                    "14": "is_equal",
                    "3": "is_zero",
                    "5": "is_true"
                },
                "iVar1": {
                    "1": "current_float_int",
                    "2": "msb_input1",
                    "5": "shifted_input1"
                },
                "iVar2": {
                    "1": "next_float_int",
                    "2": "shifted_value2",
                    "6": "shifted_input2"
                },
                "improved_function": {
                    "1": "calculate_shifted_result"
                },
                "param_1": {
                    "1": "numerator",
                    "2": "value",
                    "7": "input_value",
                    "9": "input1"
                },
                "param_2": {
                    "1": "integer2",
                    "2": "input_value_2",
                    "9": "input2"
                },
                "param_3": {
                    "1": "temporary_value",
                    "2": "rounding_mode",
                    "7": "input3"
                },
                "param_4": {
                    "1": "input_float2",
                    "2": "fraction",
                    "3": "result",
                    "7": "input4"
                },
                "uVar10": {
                    "1": "input2_complement_positive"
                },
                "uVar11": {
                    "1": "is_diff_zero"
                },
                "uVar3": {
                    "1": "shifted_output1",
                    "2": "temp1"
                },
                "uVar4": {
                    "1": "masked_temp",
                    "2": "result_2"
                },
                "uVar4_final": {
                    "1": "result_abs"
                },
                "uVar5": {
                    "1": "abs_value1",
                    "2": "shifted_result",
                    "3": "shifted_input1",
                    "4": "result"
                },
                "uVar5_final": {
                    "1": "result"
                },
                "uVar6": {
                    "1": "shifted_output1",
                    "2": "result2",
                    "3": "shift_amount"
                },
                "uVar6_final": {
                    "1": "result_shifted"
                },
                "uVar7": {
                    "1": "count2",
                    "24": "difference"
                },
                "uVar7_final": {
                    "1": "result_shifted_final"
                },
                "uVar8": {
                    "1": "output"
                },
                "uVar9": {
                    "1": "input1_positive"
                }
            },
            "called": [],
            "calling": [
                "FUN_08002ec0",
                "FUN_0800426c",
                "FUN_08002bf0",
                "FUN_0800483c",
                "FUN_08003330",
                "FUN_08002ee8",
                "FUN_08002d88"
            ],
            "code": "\nuint calculate_float_08000ad8(uint input1,uint input2,undefined4 input3,uint input4)\n\n{\n  int shifted_input1;\n  int shifted_input2;\n  uint result_1;\n  uint result_2;\n  uint result;\n  uint shift_amount;\n  uint difference;\n  bool is_equal;\n  \n  result_1 = input2 ^ 0x80000000;\n  result = input1 << 1;\n  is_equal = result == 0;\n  if (!is_equal) {\n    input4 = input2 << 1;\n    is_equal = input4 == 0;\n  }\n  if (!is_equal) {\n    is_equal = result == input4;\n  }\n  shifted_input1 = (int)result >> 0x18;\n  if (!is_equal) {\n    is_equal = shifted_input1 == -1;\n  }\n  if (!is_equal) {\n    is_equal = (int)input4 >> 0x18 == -1;\n  }\n  if (is_equal) {\n    shifted_input2 = (int)(input2 << 1) >> 0x18;\n    if (shifted_input1 == -1 || shifted_input2 == -1) {\n      result = result_1;\n      if (shifted_input1 == -1) {\n        result = input1;\n      }\n      if (shifted_input1 != -1 || shifted_input2 != -1) {\n        result_1 = result;\n      }\n      is_equal = (result & 0x7fffff) == 0;\n      if (is_equal) {\n        is_equal = (result_1 & 0x7fffff) == 0;\n      }\n      if (is_equal) {\n        is_equal = result == result_1;\n      }\n      if (!is_equal) {\n        result = result | 0x400000;\n      }\n      return result;\n    }\n    if (((input1 ^ result_1) & 0x7fffffff) != 0) {\n      if (result == 0) {\n        input1 = result_1;\n      }\n      return input1;\n    }\n    if (input1 != result_1) {\n      return 0;\n    }\n    if ((result & 0xff000000) == 0) {\n      result_1 = input1 << 1;\n      if ((input1 & 0x80000000) != 0) {\n        result_1 = result_1 | 0x80000000;\n      }\n      return result_1;\n    }\n    if (result < 0xfe000000) {\n      return input1 + 0x800000;\n    }\n    input1 = input1 & 0x80000000;\nLAB_08000c12:\n    return input1 | 0x7f800000;\n  }\n  result = result >> 0x18;\n  input4 = input4 >> 0x18;\n  difference = input4 - result;\n  is_equal = difference != 0;\n  shift_amount = result;\n  if (is_equal && result <= input4) {\n    shift_amount = result + difference;\n  }\n  if (is_equal && result <= input4) {\n    result_1 = result_1 ^ input1;\n  }\n  if (is_equal && result <= input4) {\n    input1 = input1 ^ result_1;\n  }\n  if (is_equal && result <= input4) {\n    result_1 = result_1 ^ input1;\n  }\n  if (input4 < result) {\n    difference = -difference;\n  }\n  if (0x19 < difference) {\n    return input1;\n  }\n  result = input1 & 0xffffff | 0x800000;\n  if ((input1 & 0x80000000) != 0) {\n    result = -result;\n  }\n  result_2 = result_1 & 0xffffff | 0x800000;\n  if ((result_1 & 0x80000000) != 0) {\n    result_2 = -result_2;\n  }\n  if (shift_amount == difference) {\n    result_2 = result_2 ^ 0x800000;\n    if (shift_amount == 0) {\n      result = result ^ 0x800000;\n      shift_amount = 1;\n    }\n    else {\n      difference = difference - 1;\n    }\n  }\n  result = result + ((int)result_2 >> (difference & 0xff));\n  result_2 = result_2 << (0x20 - difference & 0xff);\n  input1 = result & 0x80000000;\n  if ((int)result < 0) {\n    is_equal = result_2 != 0;\n    result_2 = -result_2;\n    result = -result - (uint)is_equal;\n  }\n  if (result < 0x800000) {\n    result_1 = result_2 & 0x80000000;\n    result_2 = result_2 << 1;\n    result = result * 2 + (uint)(result_1 != 0);\n    result_1 = shift_amount - 2;\n    if ((result & 0x800000) == 0) {\n      difference = LZCOUNT(result) - 8;\n      result = result << (difference & 0xff);\n      if ((int)result_1 < (int)difference) {\n        result = result >> (-(result_1 - difference) & 0xff);\n      }\n      else {\n        result = result + (result_1 - difference) * 0x800000;\n      }\n      return result | input1;\n    }\n  }\n  else {\n    result_1 = shift_amount - 1;\n    if (0xffffff < result) {\n      result_1 = result & 1;\n      result = result >> 1;\n      result_2 = (uint)(result_1 != 0) << 0x1f | result_2 >> 1;\n      result_1 = shift_amount;\n      if (0xfd < shift_amount) goto LAB_08000c12;\n    }\n  }\n  result = result + result_1 * 0x800000 + (uint)(0x7fffffff < result_2);\n  if (result_2 == 0x80000000) {\n    result = result & 0xfffffffe;\n  }\n  return result | input1;\n}\n\n",
            "current_name": "calculate_float_08000ad8",
            "entrypoint": "0x08000ad8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000ad8": "calculate_float_08000ad8",
                "bVar8": "is_equal",
                "iVar1": "shifted_input1",
                "iVar2": "shifted_input2",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar3": "result_1",
                "uVar4": "result_2",
                "uVar5": "result",
                "uVar6": "shift_amount",
                "uVar7": "difference"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000adc": {
            "additional_data": {
                "FUN_08000adc": {
                    "1": "floating_point_addition",
                    "2": "calculate_float_value",
                    "3": "calculate_floating_point",
                    "8": "calculate_float"
                },
                "LZCOUNT": {
                    "1": "leading_zeros_count"
                },
                "bVar7": {
                    "1": "exponents_equal",
                    "13": "is_zero",
                    "2": "is_condition_true",
                    "8": "is_equal"
                },
                "iVar1": {
                    "1": "shifted_num1",
                    "2": "sign1",
                    "3": "shifted_input1"
                },
                "iVar2": {
                    "1": "shifted_value2_sign",
                    "2": "shifted_input2_sign",
                    "3": "shifted_input2"
                },
                "param_1": {
                    "1": "float_a",
                    "11": "input1",
                    "5": "input_value1"
                },
                "param_2": {
                    "1": "value2",
                    "11": "input2",
                    "5": "input_float2"
                },
                "param_3": {
                    "1": "additional_parameter",
                    "2": "unused_parameter",
                    "5": "param3",
                    "8": "input3"
                },
                "param_4": {
                    "1": "input_value4",
                    "2": "input_value3",
                    "4": "result",
                    "5": "param4",
                    "8": "input4"
                },
                "uVar3": {
                    "1": "divisor_bits",
                    "2": "result1",
                    "3": "result"
                },
                "uVar4": {
                    "1": "mantissa_b",
                    "2": "result2"
                },
                "uVar5": {
                    "1": "float_a_normalized",
                    "2": "temp1",
                    "4": "shift_amount"
                },
                "uVar6": {
                    "1": "result",
                    "2": "temp2",
                    "8": "difference"
                }
            },
            "called": [],
            "calling": [
                "FUN_0800411c",
                "FUN_08002ec0",
                "FUN_08002cb0",
                "FUN_0800426c",
                "FUN_0800483c",
                "FUN_08003330",
                "FUN_08002ee8",
                "FUN_08004a84"
            ],
            "code": "\nuint calculate_float_08000adc(uint input1,uint input2,undefined4 input3,uint input4)\n\n{\n  int shifted_input1;\n  int shifted_input2;\n  uint result;\n  uint result2;\n  uint shift_amount;\n  uint difference;\n  bool is_zero;\n  \n  result2 = input1 << 1;\n  is_zero = result2 == 0;\n  if (!is_zero) {\n    input4 = input2 << 1;\n    is_zero = input4 == 0;\n  }\n  if (!is_zero) {\n    is_zero = result2 == input4;\n  }\n  shifted_input1 = (int)result2 >> 0x18;\n  if (!is_zero) {\n    is_zero = shifted_input1 == -1;\n  }\n  if (!is_zero) {\n    is_zero = (int)input4 >> 0x18 == -1;\n  }\n  if (is_zero) {\n    shifted_input2 = (int)(input2 << 1) >> 0x18;\n    if (shifted_input1 == -1 || shifted_input2 == -1) {\n      result2 = input2;\n      if (shifted_input1 == -1) {\n        result2 = input1;\n      }\n      if (shifted_input1 != -1 || shifted_input2 != -1) {\n        input2 = result2;\n      }\n      is_zero = (result2 & 0x7fffff) == 0;\n      if (is_zero) {\n        is_zero = (input2 & 0x7fffff) == 0;\n      }\n      if (is_zero) {\n        is_zero = result2 == input2;\n      }\n      if (!is_zero) {\n        result2 = result2 | 0x400000;\n      }\n      return result2;\n    }\n    if (((input1 ^ input2) & 0x7fffffff) != 0) {\n      if (result2 == 0) {\n        input1 = input2;\n      }\n      return input1;\n    }\n    if (input1 != input2) {\n      return 0;\n    }\n    if ((result2 & 0xff000000) == 0) {\n      result2 = input1 << 1;\n      if ((input1 & 0x80000000) != 0) {\n        result2 = result2 | 0x80000000;\n      }\n      return result2;\n    }\n    if (result2 < 0xfe000000) {\n      return input1 + 0x800000;\n    }\n    input1 = input1 & 0x80000000;\nLAB_08000c12:\n    return input1 | 0x7f800000;\n  }\n  result2 = result2 >> 0x18;\n  input4 = input4 >> 0x18;\n  difference = input4 - result2;\n  is_zero = difference != 0;\n  shift_amount = result2;\n  if (is_zero && result2 <= input4) {\n    shift_amount = result2 + difference;\n  }\n  if (is_zero && result2 <= input4) {\n    input2 = input2 ^ input1;\n  }\n  if (is_zero && result2 <= input4) {\n    input1 = input1 ^ input2;\n  }\n  if (is_zero && result2 <= input4) {\n    input2 = input2 ^ input1;\n  }\n  if (input4 < result2) {\n    difference = -difference;\n  }\n  if (0x19 < difference) {\n    return input1;\n  }\n  result2 = input1 & 0xffffff | 0x800000;\n  if ((input1 & 0x80000000) != 0) {\n    result2 = -result2;\n  }\n  result = input2 & 0xffffff | 0x800000;\n  if ((input2 & 0x80000000) != 0) {\n    result = -result;\n  }\n  if (shift_amount == difference) {\n    result = result ^ 0x800000;\n    if (shift_amount == 0) {\n      result2 = result2 ^ 0x800000;\n      shift_amount = 1;\n    }\n    else {\n      difference = difference - 1;\n    }\n  }\n  result2 = result2 + ((int)result >> (difference & 0xff));\n  result = result << (0x20 - difference & 0xff);\n  input1 = result2 & 0x80000000;\n  if ((int)result2 < 0) {\n    is_zero = result != 0;\n    result = -result;\n    result2 = -result2 - (uint)is_zero;\n  }\n  if (result2 < 0x800000) {\n    difference = result & 0x80000000;\n    result = result << 1;\n    result2 = result2 * 2 + (uint)(difference != 0);\n    difference = shift_amount - 2;\n    if ((result2 & 0x800000) == 0) {\n      shift_amount = count_leading_zeroes(result2) - 8;\n      result2 = result2 << (shift_amount & 0xff);\n      if ((int)difference < (int)shift_amount) {\n        result2 = result2 >> (-(difference - shift_amount) & 0xff);\n      }\n      else {\n        result2 = result2 + (difference - shift_amount) * 0x800000;\n      }\n      return result2 | input1;\n    }\n  }\n  else {\n    difference = shift_amount - 1;\n    if (0xffffff < result2) {\n      difference = result2 & 1;\n      result2 = result2 >> 1;\n      result = (uint)(difference != 0) << 0x1f | result >> 1;\n      difference = shift_amount;\n      if (0xfd < shift_amount) goto LAB_08000c12;\n    }\n  }\n  result2 = result2 + difference * 0x800000 + (uint)(0x7fffffff < result);\n  if (result == 0x80000000) {\n    result2 = result2 & 0xfffffffe;\n  }\n  return result2 | input1;\n}\n\n",
            "current_name": "calculate_float_08000adc",
            "entrypoint": "0x08000adc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000adc": "calculate_float_08000adc",
                "LZCOUNT": "count_leading_zeroes",
                "bVar7": "is_zero",
                "iVar1": "shifted_input1",
                "iVar2": "shifted_input2",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar3": "result",
                "uVar4": "result2",
                "uVar5": "shift_amount",
                "uVar6": "difference"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000c3c": {
            "additional_data": {
                "(0x20 - (uVar1 + 0x18) & 0xff)": {
                    "1": "right_shift_amount"
                },
                "(int)uVar2 >> 0x1f": {
                    "1": "signed_shift_value"
                },
                "(param_1 >> (0x20 - (uVar1 + 0x18) & 0xff)) - ((int)shifted_value >> 0x1f)": {
                    "1": "final_result"
                },
                "(uVar2 & 0x7fffffff) == 0": {
                    "1": "is_positive"
                },
                "(uVar2 >> 0x1f)": {
                    "1": "shifted_bit"
                },
                "0": {
                    "1": "zero"
                },
                "0x20": {
                    "1": "bit_length"
                },
                "0x7fffffff": {
                    "1": "max_value"
                },
                "0x80000000": {
                    "1": "sign_bit"
                },
                "0xfffffffe": {
                    "1": "unset_bit"
                },
                "FUN_08000c3c": {
                    "1": "decode_value",
                    "2": "calculate_shifted_value",
                    "3": "reverse_bits",
                    "4": "calculate_new_value"
                },
                "iVar3": {
                    "1": "result",
                    "4": "constant_value",
                    "6": "base_value",
                    "8": "offset"
                },
                "param_1": {
                    "1": "input_data",
                    "18": "input_value",
                    "9": "input"
                },
                "param_1 << (uVar1 + 0x18)": {
                    "1": "shifted_value"
                },
                "uVar1": {
                    "1": "leading_zeros_count",
                    "16": "leading_zeros",
                    "2": "leading_zeroes_count",
                    "3": "result"
                },
                "uVar1 + 0x18": {
                    "1": "shift_bits"
                },
                "uVar2": {
                    "1": "shift",
                    "2": "shifted_value",
                    "23": "shift_amount"
                },
                "uVar2 & 0xff": {
                    "2": "shift_mask"
                },
                "uVar2 * -0x800000 + 0x4a800000": {
                    "1": "calculation"
                },
                "uVar4": {
                    "1": "conditional_value",
                    "2": "temp",
                    "3": "temp_value",
                    "6": "mask"
                },
                "uVar4 == 0x80000000": {
                    "1": "is_overflow"
                },
                "uVar5": {
                    "1": "final_value",
                    "2": "bit_mask",
                    "5": "result"
                },
                "uVar6": {
                    "1": "result"
                },
                "uVar7": {
                    "1": "result"
                }
            },
            "called": [],
            "calling": [
                "FUN_08002f28"
            ],
            "code": "\nuint calculate_new_value_08000c3c(uint input_value)\n\n{\n  uint leading_zeros;\n  uint shift_amount;\n  int offset;\n  uint mask;\n  \n  if (input_value == 0) {\n    return 0;\n  }\n  leading_zeros = LZCOUNT(input_value);\n  shift_amount = leading_zeros - 8;\n  offset = shift_amount * -0x800000 + 0x4a800000;\n  if (7 < leading_zeros) {\n    mask = 0 << (shift_amount & 0xff);\n    leading_zeros = offset + (input_value << (shift_amount & 0xff)) +\n            (0U >> (0x20 - shift_amount & 0xff)) + (uint)(0x7fffffff < mask);\n    if (mask == 0x80000000) {\n      leading_zeros = leading_zeros & 0xfffffffe;\n    }\n    return leading_zeros;\n  }\n  shift_amount = input_value << leading_zeros + 0x18;\n  leading_zeros = offset + ((input_value >> (0x20 - (leading_zeros + 0x18) & 0xff)) - ((int)shift_amount >> 0x1f));\n  if ((shift_amount & 0x7fffffff) == 0) {\n    leading_zeros = leading_zeros & ~(shift_amount >> 0x1f);\n  }\n  return leading_zeros;\n}\n\n",
            "current_name": "calculate_new_value_08000c3c",
            "entrypoint": "0x08000c3c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000c3c": "calculate_new_value_08000c3c",
                "iVar3": "offset",
                "param_1": "input_value",
                "uVar1": "leading_zeros",
                "uVar2": "shift_amount",
                "uVar4": "mask"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000c44": {
            "additional_data": {
                "FUN_08000c44": {
                    "1": "reverse_bits",
                    "2": "calculate_unsigned",
                    "3": "calculate_modified_value",
                    "5": "count_leading_zeros",
                    "7": "count_bits"
                },
                "LZCOUNT": {
                    "1": "count_leading_zeros"
                },
                "iVar4": {
                    "1": "initial_value",
                    "2": "modified_value",
                    "26": "result"
                },
                "param_1": {
                    "1": "input_num",
                    "14": "input",
                    "2": "input_number",
                    "5": "number",
                    "9": "input_value"
                },
                "uDUMMY": {
                    "1": "dummy_variable"
                },
                "uVar1": {
                    "1": "input_number_masked",
                    "15": "leading_zeros",
                    "2": "leading_zero_count"
                },
                "uVar2": {
                    "1": "shift_count",
                    "15": "shift_amount",
                    "2": "shifted_input",
                    "3": "shift",
                    "4": "shift_value"
                },
                "uVar3": {
                    "1": "result",
                    "15": "sign_bit",
                    "2": "sign_mask",
                    "7": "is_negative"
                },
                "uVarX": {
                    "1": "temp"
                },
                "uVarY": {
                    "1": "temp1"
                }
            },
            "called": [],
            "calling": [
                "FUN_0800411c",
                "FUN_08002cb0",
                "FUN_08002bf0",
                "FUN_0800483c",
                "FUN_08002b48",
                "FUN_08002d88"
            ],
            "code": "\nuint count_bits_08000c44(uint input)\n\n{\n  uint leading_zeros;\n  uint shift_amount;\n  uint sign_bit;\n  int result;\n  \n  sign_bit = input & 0x80000000;\n  if ((int)sign_bit < 0) {\n    input = -input;\n  }\n  if (input == 0) {\n    return 0;\n  }\n  leading_zeros = count_leading_zeros(input);\n  shift_amount = leading_zeros - 8;\n  result = ((sign_bit | 0x4b000000) - 0x800000) + shift_amount * -0x800000;\n  if (7 < leading_zeros) {\n    leading_zeros = 0 << (shift_amount & 0xff);\n    sign_bit = result + (input << (shift_amount & 0xff)) +\n            (0U >> (0x20 - shift_amount & 0xff)) + (uint)(0x7fffffff < leading_zeros);\n    if (leading_zeros == 0x80000000) {\n      sign_bit = sign_bit & 0xfffffffe;\n    }\n    return sign_bit;\n  }\n  shift_amount = input << leading_zeros + 0x18;\n  sign_bit = result + ((input >> (0x20 - (leading_zeros + 0x18) & 0xff)) - ((int)shift_amount >> 0x1f));\n  if ((shift_amount & 0x7fffffff) == 0) {\n    sign_bit = sign_bit & ~(shift_amount >> 0x1f);\n  }\n  return sign_bit;\n}\n\n",
            "current_name": "count_bits_08000c44",
            "entrypoint": "0x08000c44",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000c44": "count_bits_08000c44",
                "LZCOUNT": "count_leading_zeros",
                "iVar4": "result",
                "param_1": "input",
                "uVar1": "leading_zeros",
                "uVar2": "shift_amount",
                "uVar3": "sign_bit"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000cec": {
            "additional_data": {
                "FUN_08000cec": {
                    "1": "decode_float",
                    "11": "calculate_floating_point",
                    "2": "calculate_floating_point_value",
                    "9": "calculate_float"
                },
                "bVar10": {
                    "1": "is_condition2",
                    "2": "flag2",
                    "5": "is_negative",
                    "6": "condition2"
                },
                "bVar9": {
                    "1": "is_null",
                    "2": "flag1",
                    "5": "is_zero1",
                    "6": "condition1",
                    "9": "is_zero"
                },
                "iVar4": {
                    "1": "sum_of_shifted_bits",
                    "16": "sum",
                    "2": "temp3"
                },
                "iVar5": {
                    "1": "normalized_sum",
                    "2": "temp4",
                    "5": "diff",
                    "6": "difference"
                },
                "iVar6": {
                    "1": "temp_var"
                },
                "iVar7": {
                    "1": "shift_amount_adjusted",
                    "2": "difference"
                },
                "lVar1": {
                    "1": "multiplied_values",
                    "6": "product"
                },
                "param_1": {
                    "1": "input_a",
                    "16": "input1",
                    "2": "input_value1"
                },
                "param_2": {
                    "1": "input_2",
                    "16": "input2",
                    "2": "value2"
                },
                "param_3": {
                    "1": "flags",
                    "12": "input3",
                    "2": "input_value3",
                    "5": "param3"
                },
                "param_4": {
                    "1": "fraction",
                    "12": "input4",
                    "2": "constant2",
                    "3": "param4"
                },
                "uParam1_9bits": {
                    "1": "op1_shifted_9bits"
                },
                "uParam2_9bits": {
                    "1": "op2_shifted_9bits"
                },
                "uVar2": {
                    "1": "result1",
                    "24": "result"
                },
                "uVar3": {
                    "1": "result_exponent1",
                    "2": "shifted_bits1",
                    "3": "input1_shifted"
                },
                "uVar6": {
                    "1": "multiplier",
                    "2": "product_lower",
                    "3": "product"
                },
                "uVar7": {
                    "1": "mul_temp_value"
                },
                "uVar8": {
                    "1": "sign_bits_and_exponent1",
                    "2": "final_result",
                    "3": "result"
                }
            },
            "called": [],
            "calling": [
                "FUN_08002ec0",
                "FUN_08002cb0",
                "FUN_08002bf0",
                "FUN_0800483c",
                "FUN_08004a30",
                "FUN_08002f28",
                "FUN_08003330",
                "FUN_08004a84",
                "FUN_08002b48",
                "FUN_08002d88"
            ],
            "code": "\nuint calculate_floating_point_08000cec(uint input1,uint input2,undefined4 input3,uint input4)\n\n{\n  longlong product;\n  uint result;\n  uint input1_shifted;\n  int sum;\n  int difference;\n  uint product;\n  int difference;\n  uint result;\n  bool is_zero;\n  bool condition2;\n  \n  input1_shifted = input1 >> 0x17 & 0xff;\n  is_zero = input1_shifted == 0;\n  if (!is_zero) {\n    input4 = input2 >> 0x17 & 0xff;\n    is_zero = input4 == 0;\n  }\n  if (!is_zero) {\n    is_zero = input1_shifted == 0xff;\n  }\n  if (!is_zero) {\n    is_zero = input4 == 0xff;\n  }\n  if (is_zero) {\n    input4 = input2 >> 0x17 & 0xff;\n    if (input1_shifted == 0xff || input4 == 0xff) {\n      is_zero = input1 == 0 || input1 == 0x80000000;\n      result = input2;\n      if (input1 != 0 && input1 != 0x80000000) {\n        is_zero = input2 == 0;\n        result = input1;\n      }\n      if (!is_zero) {\n        is_zero = input2 == 0x80000000;\n      }\n      result = result;\n      if (((is_zero) || ((input1_shifted == 0xff && ((result & 0x7fffff) != 0)))) ||\n         ((input4 == 0xff && (result = input2, (input2 & 0x7fffff) != 0)))) {\n        return result | 0x7fc00000;\n      }\n      result = result ^ input2;\n      goto LAB_08000e3c;\n    }\n    is_zero = (input1 & 0x7fffffff) == 0;\n    if (!is_zero) {\n      is_zero = (input2 & 0x7fffffff) == 0;\n    }\n    if (is_zero) {\n      return (input1 ^ input2) & 0x80000000;\n    }\n    is_zero = input1_shifted == 0;\n    result = input1 & 0x80000000;\n    while( true ) {\n      if (is_zero) {\n        input1 = input1 << 1;\n        is_zero = (input1 & 0x800000) == 0;\n      }\n      if (!is_zero) break;\n      input1_shifted = input1_shifted - 1;\n    }\n    input1 = input1 | result;\n    is_zero = input4 == 0;\n    result = input2 & 0x80000000;\n    while( true ) {\n      if (is_zero) {\n        input2 = input2 << 1;\n        is_zero = (input2 & 0x800000) == 0;\n      }\n      if (!is_zero) break;\n      input4 = input4 - 1;\n    }\n    input2 = input2 | result;\n  }\n  sum = input1_shifted + input4;\n  result = input1 ^ input2;\n  input1_shifted = input1 << 9;\n  is_zero = input1_shifted == 0;\n  if (!is_zero) {\n    input2 = input2 << 9;\n    is_zero = input2 == 0;\n  }\n  if (is_zero) {\n    if (input1_shifted == 0) {\n      input2 = input2 << 9;\n    }\n    result = result & 0x80000000 | input1 & 0x7fffff | input2 >> 9;\n    condition2 = SBORROW4(sum,0x7f);\n    difference = sum + -0x7f;\n    is_zero = difference == 0;\n    difference = difference;\n    if (!is_zero && 0x7e < sum) {\n      condition2 = SBORROW4(0xff,difference);\n      difference = 0xff - difference;\n      is_zero = difference == 0xff;\n    }\n    if (!is_zero && difference < 0 == condition2) {\n      result = result | difference * 0x800000;\n    }\n    if (!is_zero && difference < 0 == condition2) {\n      return result;\n    }\n    result = result | 0x800000;\n    product = 0;\n    condition2 = SBORROW4(difference,1);\n    result = sum - 0x80;\n    is_zero = result == 0;\n    input1_shifted = result;\n  }\n  else {\n    product = (ulonglong)(input1_shifted >> 5 | 0x8000000) * (ulonglong)(input2 >> 5 | 0x8000000);\n    product = (uint)product;\n    result = (uint)((ulonglong)product >> 0x20);\n    is_zero = result < 0x800000;\n    if (is_zero) {\n      result = result << 1;\n    }\n    if (is_zero) {\n      result = result | product >> 0x1f;\n      product = product << 1;\n    }\n    result = result & 0x80000000 | result;\n    result = (sum + -0x7f) - (uint)is_zero;\n    condition2 = SBORROW4(result,0xfd);\n    is_zero = result == 0xfd;\n    input1_shifted = result - 0xfd;\n    if (result < 0xfe) {\n      result = result + result * 0x800000 + (uint)(0x7fffffff < product);\n      if (product == 0x80000000) {\n        result = result & 0xfffffffe;\n      }\n      return result;\n    }\n  }\n  if (is_zero || (int)input1_shifted < 0 != condition2) {\n    is_zero = (int)(result + 0x19) < 0;\n    if (result == 0xffffffe7 || is_zero != SCARRY4(result,0x19)) {\n      result = result & 0x80000000;\n    }\n    if (result != 0xffffffe7 && is_zero == SCARRY4(result,0x19)) {\n      input1_shifted = (result << 1) >> (-result & 0xff);\n      result = result << (result + 0x20 & 0xff);\n      input1_shifted = ((uint)((result & 0x80000000) != 0) << 0x1f | input1_shifted >> 1) + (uint)((byte)input1_shifted & 1);\n      if ((product | result << 1) == 0) {\n        input1_shifted = input1_shifted & ~(result >> 0x1f);\n      }\n      return input1_shifted;\n    }\n    return result;\n  }\nLAB_08000e3c:\n  return result & 0x80000000 | 0x7f800000;\n}\n\n",
            "current_name": "calculate_floating_point_08000cec",
            "entrypoint": "0x08000cec",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000cec": "calculate_floating_point_08000cec",
                "bVar10": "condition2",
                "bVar9": "is_zero",
                "iVar4": "sum",
                "iVar5": "difference",
                "iVar7": "difference",
                "lVar1": "product",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar2": "result",
                "uVar3": "input1_shifted",
                "uVar6": "product",
                "uVar8": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000e54": {
            "additional_data": {
                "FUN_08000e54": {
                    "1": "decode_float",
                    "2": "calculate_float_value",
                    "6": "calculate_floating_point",
                    "7": "calculate_float"
                },
                "bVar7": {
                    "1": "is_equal",
                    "2": "condition_1",
                    "3": "is_zero1",
                    "5": "flag1",
                    "8": "is_zero"
                },
                "bVar8": {
                    "1": "temp_bool1",
                    "2": "condition_2",
                    "3": "is_zero2",
                    "5": "flag2"
                },
                "bVar9": {
                    "1": "bool_var3",
                    "2": "is_borrow",
                    "3": "overflow",
                    "5": "condition3"
                },
                "iVar10": {
                    "1": "shift_count"
                },
                "iVar3": {
                    "1": "temp2",
                    "2": "exponent_difference",
                    "3": "temp_var3",
                    "4": "diff",
                    "6": "temp3",
                    "7": "difference"
                },
                "iVar5": {
                    "1": "shifted_operand2_copy",
                    "2": "temp4",
                    "3": "temp_var5",
                    "4": "sum",
                    "6": "temp5"
                },
                "iVar6": {
                    "1": "shift_count"
                },
                "param_1": {
                    "1": "input_a",
                    "2": "input_value1",
                    "3": "input_1",
                    "4": "float1",
                    "8": "input1"
                },
                "param_2": {
                    "1": "value2",
                    "2": "num2",
                    "3": "input_2",
                    "4": "float2",
                    "8": "input2"
                },
                "param_3": {
                    "1": "unused_param",
                    "2": "float3",
                    "3": "undefined",
                    "5": "param3"
                },
                "param_4": {
                    "1": "result",
                    "2": "input4",
                    "4": "param4"
                },
                "uVar1": {
                    "1": "sign1_shifted",
                    "2": "result",
                    "4": "temp_var1",
                    "8": "temp1"
                },
                "uVar2": {
                    "1": "result2",
                    "2": "shifted_input1",
                    "3": "temp_var2",
                    "8": "temp2"
                },
                "uVar4": {
                    "1": "shift_count2",
                    "2": "temp3",
                    "3": "temp_var4",
                    "7": "temp4"
                },
                "uVar6": {
                    "1": "result4",
                    "15": "result",
                    "2": "result_float",
                    "3": "temp_var6",
                    "4": "temp6"
                }
            },
            "called": [],
            "calling": [
                "FUN_0800411c",
                "FUN_0800483c",
                "FUN_08002f28",
                "FUN_08003330"
            ],
            "code": "\nuint calculate_float_08000e54(uint input1,uint input2,undefined4 param3,uint param4)\n\n{\n  uint temp1;\n  uint temp2;\n  int difference;\n  uint temp4;\n  int temp5;\n  uint result;\n  bool is_zero;\n  bool flag2;\n  bool flag3;\n  \n  temp2 = input1 >> 0x17 & 0xff;\n  is_zero = temp2 == 0;\n  if (!is_zero) {\n    param4 = input2 >> 0x17 & 0xff;\n    is_zero = param4 == 0;\n  }\n  if (!is_zero) {\n    is_zero = temp2 == 0xff;\n  }\n  if (!is_zero) {\n    is_zero = param4 == 0xff;\n  }\n  if (is_zero) {\n    param4 = input2 >> 0x17 & 0xff;\n    result = input1;\n    if (temp2 == 0xff) {\n      if (((input1 & 0x7fffff) != 0) || (result = input2, param4 == 0xff)) {\nLAB_08000e4a:\n        return result | 0x7fc00000;\n      }\n    }\n    else {\n      if (param4 == 0xff) {\n        result = input2;\n        if ((input2 & 0x7fffff) == 0) {\nLAB_08000e00:\n          return (input1 ^ input2) & 0x80000000;\n        }\n        goto LAB_08000e4a;\n      }\n      is_zero = (input1 & 0x7fffffff) == 0;\n      if (!is_zero) {\n        is_zero = (input2 & 0x7fffffff) == 0;\n      }\n      if (!is_zero) {\n        is_zero = temp2 == 0;\n        result = input1 & 0x80000000;\n        while( true ) {\n          if (is_zero) {\n            input1 = input1 << 1;\n            is_zero = (input1 & 0x800000) == 0;\n          }\n          if (!is_zero) break;\n          temp2 = temp2 - 1;\n        }\n        input1 = input1 | result;\n        is_zero = param4 == 0;\n        result = input2 & 0x80000000;\n        while( true ) {\n          if (is_zero) {\n            input2 = input2 << 1;\n            is_zero = (input2 & 0x800000) == 0;\n          }\n          if (!is_zero) break;\n          param4 = param4 - 1;\n        }\n        input2 = input2 | result;\n        goto LAB_08000e6c;\n      }\n      if ((input1 & 0x7fffffff) == 0) {\n        if ((input2 & 0x7fffffff) != 0) goto LAB_08000e00;\n        goto LAB_08000e4a;\n      }\n    }\n    input1 = input1 ^ input2;\n  }\n  else {\nLAB_08000e6c:\n    difference = temp2 - param4;\n    if (input2 << 9 == 0) {\n      input1 = (input1 ^ input2) & 0x80000000 | input1 & 0x7fffff;\n      flag3 = SCARRY4(difference,0x7f);\n      temp5 = difference + 0x7f;\n      is_zero = temp5 < 0;\n      flag2 = temp5 == 0;\n      if (!flag2 && is_zero == flag3) {\n        flag3 = SBORROW4(0xff,temp5);\n        is_zero = 0xff - temp5 < 0;\n        flag2 = temp5 == 0xff;\n      }\n      if (!flag2 && is_zero == flag3) {\n        input1 = input1 | temp5 * 0x800000;\n      }\n      if (!flag2 && is_zero == flag3) {\n        return input1;\n      }\n      input1 = input1 | 0x800000;\n      temp2 = 0;\n      flag2 = SBORROW4(temp5,1);\n      temp4 = difference + 0x7e;\n      is_zero = temp4 == 0;\n      result = temp4;\n    }\n    else {\n      temp1 = (input2 << 9) >> 4 | 0x10000000;\n      temp2 = (input1 << 9) >> 4 | 0x10000000;\n      input1 = (input1 ^ input2) & 0x80000000;\n      is_zero = temp1 <= temp2;\n      if (!is_zero) {\n        temp2 = temp2 << 1;\n      }\n      temp4 = difference + 0x7d + (uint)is_zero;\n      result = 0x800000;\n      do {\n        if (temp1 <= temp2) {\n          temp2 = temp2 - temp1;\n          input1 = input1 | result;\n        }\n        is_zero = temp1 >> 1 <= temp2;\n        if (is_zero) {\n          temp2 = temp2 - (temp1 >> 1);\n        }\n        if (is_zero) {\n          input1 = input1 | result >> 1;\n        }\n        is_zero = temp1 >> 2 <= temp2;\n        if (is_zero) {\n          temp2 = temp2 - (temp1 >> 2);\n        }\n        if (is_zero) {\n          input1 = input1 | result >> 2;\n        }\n        is_zero = temp1 >> 3 <= temp2;\n        if (is_zero) {\n          temp2 = temp2 - (temp1 >> 3);\n        }\n        if (is_zero) {\n          input1 = input1 | result >> 3;\n        }\n        temp2 = temp2 * 0x10;\n        is_zero = temp2 == 0;\n        if (!is_zero) {\n          result = result >> 4;\n          is_zero = result == 0;\n        }\n      } while (!is_zero);\n      flag2 = SBORROW4(temp4,0xfd);\n      is_zero = temp4 == 0xfd;\n      result = temp4 - 0xfd;\n      if (temp4 < 0xfe) {\n        input1 = input1 + temp4 * 0x800000 + (uint)(temp1 <= temp2);\n        if (temp2 - temp1 == 0) {\n          input1 = input1 & 0xfffffffe;\n        }\n        return input1;\n      }\n    }\n    if (is_zero || (int)result < 0 != flag2) {\n      is_zero = (int)(temp4 + 0x19) < 0;\n      if (temp4 == 0xffffffe7 || is_zero != SCARRY4(temp4,0x19)) {\n        input1 = input1 & 0x80000000;\n      }\n      if (temp4 == 0xffffffe7 || is_zero != SCARRY4(temp4,0x19)) {\n        return input1;\n      }\n      result = (input1 << 1) >> (-temp4 & 0xff);\n      temp4 = input1 << (temp4 + 0x20 & 0xff);\n      result = ((uint)((input1 & 0x80000000) != 0) << 0x1f | result >> 1) + (uint)((byte)result & 1);\n      if ((temp2 | temp4 << 1) == 0) {\n        result = result & ~(temp4 >> 0x1f);\n      }\n      return result;\n    }\n  }\n  return input1 & 0x80000000 | 0x7f800000;\n}\n\n",
            "current_name": "calculate_float_08000e54",
            "entrypoint": "0x08000e54",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000e54": "calculate_float_08000e54",
                "bVar7": "is_zero",
                "bVar8": "flag2",
                "bVar9": "flag3",
                "iVar3": "difference",
                "iVar5": "temp5",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "temp1",
                "uVar2": "temp2",
                "uVar4": "temp4",
                "uVar6": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000f9c": {
            "additional_data": {
                "<bVar1>": {
                    "1": "is_combined_negative"
                },
                "<bVar5>": {
                    "1": "is_combined_zero"
                },
                "<original_function_name>": {
                    "1": "check_overflow_condition"
                },
                "<param_1>": {
                    "1": "result"
                },
                "<param_2>": {
                    "1": "input_2"
                },
                "<uVar2>": {
                    "1": "input_1_doubled"
                },
                "<uVar3>": {
                    "1": "input_2_doubled"
                },
                "<uVar4>": {
                    "1": "combined_inputs"
                },
                "FUN_08000f9c": {
                    "1": "calculate_checksum",
                    "3": "check_overflow_and_sign",
                    "4": "check_overflow",
                    "8": "calculate_result"
                },
                "bVar1": {
                    "1": "is_combined_inputs_negative",
                    "2": "is_combined_negative",
                    "20": "is_negative"
                },
                "bVar5": {
                    "1": "is_combined_inputs_zero",
                    "22": "is_zero",
                    "4": "is_combined_zero"
                },
                "bVar5_updated": {
                    "1": "is_result_zero"
                },
                "param_1": {
                    "1": "input_value1",
                    "12": "input_1",
                    "2": "result",
                    "6": "input1"
                },
                "param_1 ": {
                    "1": "result"
                },
                "param_1 & 0x7fffff": {
                    "1": "value1_less_sign_bit"
                },
                "param_1 + param_2 * -2": {
                    "1": "result1_minus_result2_times2"
                },
                "param_1 ^ param_2": {
                    "1": "input1_xor_input2"
                },
                "param_1_doubled": {
                    "1": "input1_times_minus2"
                },
                "param_1_shifted": {
                    "1": "input1_shifted"
                },
                "param_2": {
                    "1": "value2",
                    "12": "input_2",
                    "8": "input2"
                },
                "param_2 ": {
                    "1": "result"
                },
                "param_2 & 0x7fffff": {
                    "1": "value2_less_sign_bit"
                },
                "return_value": {
                    "2": "result"
                },
                "uVar2": {
                    "1": "double_first_number",
                    "2": "input_1_times_2",
                    "3": "input_1_doubled",
                    "5": "double_input_1"
                },
                "uVar3": {
                    "1": "double_input2",
                    "2": "input_2_times_2",
                    "3": "input_2_doubled",
                    "5": "double_input_2"
                },
                "uVar4": {
                    "1": "combined_variables",
                    "2": "combined",
                    "3": "combined_numbers",
                    "6": "combined_input",
                    "9": "combined_inputs"
                }
            },
            "called": [],
            "calling": [
                "FUN_08001004"
            ],
            "code": "\nuint calculate_result_08000f9c(uint input_1,uint input_2)\n\n{\n  bool is_negative;\n  uint double_input_1;\n  uint double_input_2;\n  uint combined_inputs;\n  bool is_zero;\n  \n  double_input_1 = input_1 * 2;\n  double_input_2 = input_2 * 2;\n  if (((int)double_input_1 >> 0x18 == -1 || (int)double_input_2 >> 0x18 == -1) &&\n     ((((int)double_input_1 >> 0x18 == -1 && ((input_1 & 0x7fffff) != 0)) ||\n      (((int)double_input_2 >> 0x18 == -1 && ((input_2 & 0x7fffff) != 0)))))) {\n    return 1;\n  }\n  combined_inputs = double_input_1 | input_2 & 0x7fffffff;\n  is_zero = combined_inputs == 0;\n  if (!is_zero) {\n    combined_inputs = input_1 ^ input_2;\n    is_zero = combined_inputs == 0;\n  }\n  is_negative = -1 < (int)combined_inputs;\n  if (is_negative) {\n    input_1 = double_input_1 + input_2 * -2;\n    is_zero = input_1 == 0;\n  }\n  if ((is_negative && double_input_2 <= double_input_1) && !is_zero) {\n    input_1 = (int)input_2 >> 0x1f;\n  }\n  if (!is_negative || double_input_2 > double_input_1) {\n    input_1 = ~((int)input_2 >> 0x1f);\n  }\n  if (!is_zero) {\n    input_1 = input_1 | 1;\n  }\n  return input_1;\n}\n\n",
            "current_name": "calculate_result_08000f9c",
            "entrypoint": "0x08000f9c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000f9c": "calculate_result_08000f9c",
                "bVar1": "is_negative",
                "bVar5": "is_zero",
                "param_1": "input_1",
                "param_2": "input_2",
                "uVar2": "double_input_1",
                "uVar3": "double_input_2",
                "uVar4": "combined_inputs"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000ffc": {
            "additional_data": {
                "FUN_08000ffc": {
                    "1": "compare_parameters",
                    "20": "compare_floats",
                    "5": "compare_and_return"
                },
                "FUN_08001004": {
                    "2": "compare_floats_helper"
                },
                "__aeabi_cfcmpeq": {
                    "1": "compare_floats_helper"
                },
                "param_1": {
                    "1": "first_parameter",
                    "12": "value1",
                    "2": "float1",
                    "6": "first_float"
                },
                "param_2": {
                    "1": "input_2",
                    "12": "value2",
                    "2": "float2",
                    "6": "second_float"
                }
            },
            "called": [
                "FUN_08001004"
            ],
            "calling": [
                "FUN_08001064",
                "FUN_08001050"
            ],
            "code": "\nvoid compare_floats_08000ffc(undefined4 value1,undefined4 value2)\n\n{\n  compare_floats_08000ffc_helper(value2,value1);\n  return;\n}\n\n",
            "current_name": "compare_floats_08000ffc",
            "entrypoint": "0x08000ffc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000ffc": "compare_floats_08000ffc",
                "__aeabi_cfcmpeq": "compare_floats_helper",
                "param_1": "value1",
                "param_2": "value2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08001004": {
            "additional_data": {
                "CONCAT44": {
                    "1": "concatenate_ints"
                },
                "FUN_08000f9c": {
                    "1": "perform_operation"
                },
                "FUN_08001004": {
                    "1": "concatenate_values",
                    "10": "concatenate_params",
                    "2": "concatenate_and_compare",
                    "3": "concatenate_parameters",
                    "4": "combine_parameters"
                },
                "__cmpsf2": {
                    "1": "compare_float32",
                    "12": "compare_floats"
                },
                "param_1": {
                    "1": "float_value1",
                    "2": "first_parameter",
                    "4": "input1",
                    "9": "first_param"
                },
                "param_2": {
                    "1": "float32_2",
                    "2": "value2",
                    "4": "input2",
                    "9": "second_param"
                },
                "uint": {
                    "1": "unsigned_int"
                }
            },
            "called": [
                "FUN_08000f9c"
            ],
            "calling": [
                "FUN_08001014",
                "FUN_08000ffc",
                "FUN_08001028"
            ],
            "code": "\nundefined8 concatenate_params_08001004(undefined4 first_param,undefined4 second_param)\n\n{\n  compare_floats();\n  return concatenate_float32(second_param,first_param);\n}\n\n",
            "current_name": "concatenate_params_08001004",
            "entrypoint": "0x08001004",
            "imported": false,
            "improved": true,
            "renaming": {
                "CONCAT44": "concatenate_float32",
                "FUN_08001004": "concatenate_params_08001004",
                "__cmpsf2": "compare_floats",
                "param_1": "first_param",
                "param_2": "second_param"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08001014": {
            "additional_data": {
                "FUN_08001004": {
                    "1": "compare_parameters"
                },
                "FUN_08001014": {
                    "1": "check_if_comparison_is_true",
                    "2": "check_equality",
                    "4": "check_comparison_result",
                    "8": "check_if_not_zero"
                },
                "in_ZR": {
                    "1": "is_equal",
                    "13": "result",
                    "2": "input_char",
                    "3": "comparison_result",
                    "5": "is_not_zero"
                },
                "param_1": {
                    "1": "input1"
                },
                "param_2": {
                    "1": "input_param_2"
                }
            },
            "called": [
                "FUN_08001004"
            ],
            "calling": [
                "FUN_08003330"
            ],
            "code": "\nbool check_if_not_zero_08001014(void)\n\n{\n  char result;\n  \n  __aeabi_cfcmpeq();\n  return result != '\\0';\n}\n\n",
            "current_name": "check_if_not_zero_08001014",
            "entrypoint": "0x08001014",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08001014": "check_if_not_zero_08001014",
                "in_ZR": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08001028": {
            "additional_data": {
                "FUN_08001004": {
                    "1": "compare_values"
                },
                "FUN_08001028": {
                    "1": "check_if_null_character",
                    "2": "check_null_termination",
                    "3": "check_if_char_is_null",
                    "4": "check_if_zero"
                },
                "__aeabi_cfcmpeq": {
                    "1": "compare_floats"
                },
                "in_CY": {
                    "1": "char_input",
                    "12": "input_character",
                    "14": "input_char"
                },
                "param_1": {
                    "1": "value1"
                },
                "param_2": {
                    "1": "value2"
                }
            },
            "called": [
                "FUN_08001004"
            ],
            "calling": [
                "FUN_0800483c",
                "FUN_08002ee8",
                "FUN_08004a84"
            ],
            "code": "\nbool is_cy_null_08001028(void)\n\n{\n  char input_char;\n  \n  compare_floating_point_values();\n  return input_char == '\\0';\n}\n\n",
            "current_name": "is_cy_null_08001028",
            "entrypoint": "0x08001028",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08001028": "is_cy_null_08001028",
                "__aeabi_cfcmpeq": "compare_floating_point_values",
                "in_CY": "input_char"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08001050": {
            "additional_data": {
                "FUN_08000ffc": {
                    "1": "update_flags"
                },
                "FUN_08001050": {
                    "1": "check_non_negative_values",
                    "2": "check_carry_or_zero",
                    "4": "check_condition",
                    "5": "check_conditions"
                },
                "in_CY": {
                    "1": "is_less_or_equal",
                    "2": "is_negative",
                    "5": "is_carry_set",
                    "6": "is_carry",
                    "8": "carry_flag"
                },
                "in_ZR": {
                    "1": "is_zero_or_equal",
                    "11": "is_zero",
                    "5": "zero_flag"
                },
                "param_1": {
                    "1": "info1",
                    "2": "input_param1"
                },
                "param_2": {
                    "1": "arg2",
                    "2": "input_param2"
                }
            },
            "called": [
                "FUN_08000ffc"
            ],
            "calling": [
                "FUN_08002ee8"
            ],
            "code": "\nbool check_conditions_08001050(void)\n\n{\n  undefined is_zero;\n  undefined carry_flag;\n  \n  __aeabi_cfrcmple();\n  return !(bool)carry_flag || (bool)is_zero;\n}\n\n",
            "current_name": "check_conditions_08001050",
            "entrypoint": "0x08001050",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08001050": "check_conditions_08001050",
                "in_CY": "carry_flag",
                "in_ZR": "is_zero"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08001064": {
            "additional_data": {
                "FUN_08000ffc": {
                    "1": "execute_subfunction"
                },
                "FUN_08001064": {
                    "1": "check_input_string",
                    "2": "is_char_null",
                    "4": "is_null_character",
                    "6": "check_if_null"
                },
                "__aeabi_cfrcmple": {
                    "1": "compare_floats"
                },
                "in_CY": {
                    "1": "input_cy",
                    "11": "input_character",
                    "15": "input_char",
                    "2": "termination_char"
                }
            },
            "called": [
                "FUN_08000ffc"
            ],
            "calling": [
                "FUN_0800483c",
                "FUN_08004a84"
            ],
            "code": "\nbool check_if_null_08001064(void)\n\n{\n  char input_char;\n  \n  compare_floats();\n  return input_char == '\\0';\n}\n\n",
            "current_name": "check_if_null_08001064",
            "entrypoint": "0x08001064",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08001064": "check_if_null_08001064",
                "__aeabi_cfrcmple": "compare_floats",
                "in_CY": "input_char"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08001078": {
            "additional_data": {
                "FUN_08001078": {
                    "1": "decode_param",
                    "2": "convert_to_twos_complement",
                    "3": "extract_integer"
                },
                "MASK_8BITS": {
                    "1": "mask_byte"
                },
                "MASK_SIGN": {
                    "1": "mask_sign"
                },
                "param_1": {
                    "1": "encoded_value",
                    "12": "input_value",
                    "2": "number",
                    "4": "value",
                    "6": "input"
                },
                "uVar1": {
                    "1": "result",
                    "15": "shifted_value",
                    "2": "shifted_number",
                    "4": "shifted_input"
                },
                "uVar2": {
                    "1": "diff_from_max",
                    "13": "difference",
                    "9": "shift_amount"
                },
                "uVar3": {
                    "1": "shifted_input",
                    "2": "shifted_value"
                },
                "uVar4": {
                    "1": "negative_input",
                    "5": "result"
                },
                "uVar5": {
                    "1": "negative_result"
                }
            },
            "called": [],
            "calling": [
                "FUN_0800411c",
                "FUN_0800426c",
                "FUN_08002f28"
            ],
            "code": "\nuint convert_to_signed_integer_08001078(uint input_value)\n\n{\n  uint shifted_value;\n  uint difference;\n  \n  if (input_value << 1 < 0x7f000000) {\n    return 0;\n  }\n  shifted_value = (input_value << 1) >> 0x18;\n  difference = 0x9e - shifted_value;\n  if (shifted_value < 0x9f && difference != 0) {\n    shifted_value = (input_value << 8 | 0x80000000) >> (difference & 0xff);\n    if ((input_value & 0x80000000) != 0) {\n      shifted_value = -shifted_value;\n    }\n    return shifted_value;\n  }\n  if ((difference == 0xffffff9f) && ((input_value & 0x7fffff) != 0)) {\n    return 0;\n  }\n  input_value = input_value & 0x80000000;\n  if (input_value == 0) {\n    input_value = 0x7fffffff;\n  }\n  return input_value;\n}\n\n",
            "current_name": "convert_to_signed_integer_08001078",
            "entrypoint": "0x08001078",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08001078": "convert_to_signed_integer_08001078",
                "param_1": "input_value",
                "uVar1": "shifted_value",
                "uVar2": "difference"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080010c4": {
            "additional_data": {
                "FUN_080010c4": {
                    "1": "reverse_number_bits",
                    "2": "extract_bits",
                    "3": "calculate_shifted_value",
                    "7": "reverse_bits"
                },
                "param_1": {
                    "1": "value",
                    "10": "input_value",
                    "13": "input",
                    "2": "input_number",
                    "4": "number"
                },
                "uVar1": {
                    "1": "result",
                    "18": "shift_amount",
                    "2": "shift_count",
                    "4": "shift_value"
                }
            },
            "called": [],
            "calling": [
                "FUN_08004a84"
            ],
            "code": "\nuint reverse_bits_080010c4(uint input)\n\n{\n  uint shift_amount;\n  \n  if (((input & 0x80000000) != 0) || (input << 1 < 0x7f000000)) {\n    return 0;\n  }\n  shift_amount = 0x9e - ((input << 1) >> 0x18);\n  if (-1 < (int)shift_amount) {\n    return (input << 8 | 0x80000000) >> (shift_amount & 0xff);\n  }\n  if ((shift_amount == 0xffffff9f) && ((input & 0x7fffff) != 0)) {\n    return 0;\n  }\n  return 0xffffffff;\n}\n\n",
            "current_name": "reverse_bits_080010c4",
            "entrypoint": "0x080010c4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080010c4": "reverse_bits_080010c4",
                "param_1": "input",
                "uVar1": "shift_amount"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08001104": {
            "additional_data": {
                "FUN_08001104": {
                    "1": "configure_system_tick_timer",
                    "2": "configure_system",
                    "20": "initialize_system",
                    "4": "configure_system_tick"
                },
                "FUN_08001194": {
                    "1": "configure_timer",
                    "2": "configure_sys_tick"
                },
                "FUN_08001214": {
                    "1": "set_priority_level",
                    "3": "set_priority"
                },
                "FUN_08002214": {
                    "1": "obtain_return_value"
                },
                "HAL_NVIC_SetPriority": {
                    "3": "set_interrupt_priority",
                    "4": "set_priority"
                },
                "HAL_RCC_GetHCLKFreq": {
                    "1": "get_hclk_freq",
                    "2": "get_hclk_frequency",
                    "4": "get_system_clock_frequency"
                },
                "HAL_SYSTICK_Config": {
                    "1": "configure_systick",
                    "5": "configure_sys_tick"
                },
                "param_1": {
                    "1": "input_param",
                    "10": "priority_level",
                    "12": "priority",
                    "2": "param1"
                },
                "param_2": {
                    "1": "param_2",
                    "5": "param2"
                },
                "param_3": {
                    "1": "value2",
                    "5": "param3"
                },
                "uVar1": {
                    "1": "sys_tick_frequency",
                    "14": "hclk_freq",
                    "2": "system_clock",
                    "4": "system_clock_freq",
                    "8": "hclk_frequency"
                }
            },
            "called": [
                "FUN_08001194",
                "FUN_08002214",
                "FUN_08001214"
            ],
            "calling": [
                "FUN_0800209c",
                "FUN_08001128"
            ],
            "code": "\nundefined4 initialize_system_08001104(undefined4 priority)\n\n{\n  uint hclk_freq;\n  \n  hclk_freq = get_system_clock_frequency();\n  configure_sys_tick(hclk_freq / 1000);\n  set_priority(0xffffffff,priority,0);\n  return 0;\n}\n\n",
            "current_name": "initialize_system_08001104",
            "entrypoint": "0x08001104",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08001104": "initialize_system_08001104",
                "HAL_NVIC_SetPriority": "set_priority",
                "HAL_RCC_GetHCLKFreq": "get_system_clock_frequency",
                "HAL_SYSTICK_Config": "configure_sys_tick",
                "param_1": "priority",
                "uVar1": "hclk_freq"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08001128": {
            "additional_data": {
                "FUN_08001104": {
                    "1": "handle_initialization",
                    "2": "perform_initialization",
                    "3": "configure_interrupts"
                },
                "FUN_08001128": {
                    "1": "initialize_hal",
                    "13": "initialize_system",
                    "16": "initialize_hardware"
                },
                "FUN_08001170": {
                    "1": "configure_interrupts",
                    "2": "configure_peripheral",
                    "3": "initialize_tick",
                    "5": "set_priority"
                },
                "FUN_08004ccc": {
                    "1": "initialize_periph",
                    "2": "perform_operation",
                    "3": "initialize_peripheral",
                    "4": "initialize_msp"
                },
                "HAL_InitTick": {
                    "7": "initialize_tick"
                },
                "HAL_MspInit": {
                    "1": "initialize_periph",
                    "4": "initialize_msp"
                },
                "HAL_NVIC_SetPriorityGrouping": {
                    "1": "set_nvic_priority_grouping",
                    "5": "set_priority_grouping"
                },
                "_DAT_40022000": {
                    "1": "control_register"
                },
                "param_1": {
                    "1": "unused_param",
                    "2": "param_1",
                    "3": "param",
                    "6": "param1"
                },
                "param_2": {
                    "1": "param",
                    "2": "unused",
                    "3": "arg2",
                    "6": "param_2",
                    "8": "param2"
                },
                "param_3": {
                    "1": "param",
                    "2": "unused",
                    "3": "arg3",
                    "6": "param_3",
                    "8": "param3"
                },
                "undefined4": {
                    "1": "void"
                }
            },
            "called": [
                "FUN_08001104",
                "FUN_08001170",
                "FUN_08004ccc"
            ],
            "calling": [
                "FUN_0800458c"
            ],
            "code": "\n\n\nvoid initialize_hardware_08001128(void)\n\n{\n  _DAT_40022000 = _DAT_40022000 | 0x10;\n  set_priority_grouping(3);\n  initialize_tick(0);\n  initialize_msp();\n  return 0;\n}\n\n",
            "current_name": "initialize_hardware_08001128",
            "entrypoint": "0x08001128",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08001128": "initialize_hardware_08001128",
                "HAL_InitTick": "initialize_tick",
                "HAL_MspInit": "initialize_msp",
                "HAL_NVIC_SetPriorityGrouping": "set_priority_grouping",
                "undefined4": "void"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800114c": {
            "additional_data": {
                "": {
                    "2": ""
                },
                "DAT_20000244": {
                    "1": "global_var",
                    "2": "data_counter",
                    "21": "counter",
                    "3": "count"
                },
                "FUN_0800114c": {
                    "1": "increment_data_pointer",
                    "2": "increment_data_counter",
                    "24": "increment_counter",
                    "3": "increment_count"
                },
                "PTR_parameter_1": {
                    "1": "parameter_1"
                },
                "PTR_parameter_2": {
                    "1": "parameter_2"
                }
            },
            "called": [],
            "calling": [
                "FUN_080041ae"
            ],
            "code": "\nvoid increment_counter_0800114c(void)\n\n{\n  DAT_20000244 = DAT_20000244 + 1;\n  return;\n}\n\n",
            "current_name": "increment_counter_0800114c",
            "entrypoint": "0x0800114c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800114c": "increment_counter_0800114c"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800115c": {
            "additional_data": {
                "DAT_20000244": {
                    "1": "data_offset",
                    "10": "data",
                    "3": "global_variable",
                    "5": "data_value"
                },
                "FUN_0800115c": {
                    "1": "get_dat_value",
                    "11": "get_data_value",
                    "2": "get_data_from_memory",
                    "3": "get_global_variable",
                    "9": "get_data"
                }
            },
            "called": [],
            "calling": [
                "FUN_0800209c",
                "FUN_08001460",
                "FUN_08004f60",
                "FUN_08001938",
                "FUN_08004c18",
                "FUN_08001b58",
                "FUN_08004f5c",
                "FUN_080014e2",
                "FUN_08001530",
                "FUN_08001828",
                "FUN_080015e8",
                "FUN_080016f4"
            ],
            "code": "\nundefined4 get_data_value_0800115c(void)\n\n{\n  return DAT_20000244;\n}\n\n",
            "current_name": "get_data_value_0800115c",
            "entrypoint": "0x0800115c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800115c": "get_data_value_0800115c"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08001168": {
            "called": [],
            "calling": [
                "FUN_08001b58",
                "FUN_08004f64"
            ],
            "code": "\nvoid FUNC_08001168(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_08001168",
            "entrypoint": "0x08001168",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_08001168": "FUNC_08001168"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_08001170": {
            "additional_data": {
                "(param_1 & 7) << 8": {
                    "1": "shifted_input"
                },
                "0x5fa0000": {
                    "1": "bit_mask2",
                    "2": "mask2"
                },
                "0x7": {
                    "1": "bit_mask"
                },
                "0xf8ff": {
                    "1": "bit_mask1",
                    "2": "mask1"
                },
                "7": {
                    "1": "bit_mask3"
                },
                "8": {
                    "1": "bit_shift_value",
                    "2": "shift"
                },
                "FUN_08001170": {
                    "1": "set_register_bitmask",
                    "2": "set_register_bits",
                    "3": "update_register_bits",
                    "4": "set_register_value"
                },
                "_DAT_e000ed0c": {
                    "1": "memory_register",
                    "13": "register_value",
                    "2": "control_register",
                    "4": "register"
                },
                "param_1": {
                    "1": "bit_mask",
                    "10": "value",
                    "11": "input_value"
                }
            },
            "called": [],
            "calling": [
                "FUN_08004ccc",
                "FUN_08001128"
            ],
            "code": "\n\n\nvoid set_register_value_08001170(uint input_value)\n\n{\n  _DAT_e000ed0c = _DAT_e000ed0c & 0xf8ff | 0x5fa0000 | (input_value & 7) << 8;\n  return;\n}\n\n",
            "current_name": "set_register_value_08001170",
            "entrypoint": "0x08001170",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08001170": "set_register_value_08001170",
                "param_1": "input_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08001194": {
            "additional_data": {
                "FUN_08001194": {
                    "1": "update_data",
                    "12": "update_memory",
                    "2": "write_data_to_memory",
                    "6": "update_memory_value"
                },
                "PTR_0xe000e100": {
                    "1": "address_offset_1"
                },
                "PTR_0xe000ed14": {
                    "1": "address_offset_2"
                },
                "_DAT_e000ed0c": {
                    "1": "register_value"
                },
                "_DAT_e000ed14": {
                    "1": "value2"
                },
                "param_1": {
                    "1": "input_value1",
                    "15": "address",
                    "2": "value1",
                    "5": "memory_address"
                },
                "param_1 & 0xf": {
                    "1": "mem_address2"
                },
                "param_1 + 0xe000e100": {
                    "1": "mem_address1"
                },
                "param_2": {
                    "1": "data_value",
                    "2": "value2",
                    "3": "value1",
                    "5": "data1",
                    "7": "data"
                },
                "param_3": {
                    "1": "bit_mask",
                    "2": "value3",
                    "3": "value2",
                    "5": "data2",
                    "9": "mask"
                },
                "uVar1": {
                    "1": "result_byte",
                    "11": "updated_value",
                    "2": "masked_value",
                    "4": "result"
                },
                "uVar1 & uVar2": {
                    "1": "bitwise_result"
                },
                "uVar2": {
                    "1": "bit_mask",
                    "17": "shift_amount",
                    "2": "shift"
                },
                "uVar3": {
                    "1": "shift_offset",
                    "2": "shifted_mask",
                    "3": "shift_amount",
                    "6": "offset"
                },
                "uVar4": {
                    "1": "offset_plus4",
                    "2": "shifted_bits",
                    "3": "limit"
                }
            },
            "called": [],
            "calling": [
                "FUN_08001104",
                "FUN_08004514",
                "FUN_08004e7c",
                "FUN_08004ccc"
            ],
            "code": "\n\n\nvoid update_memory_08001194(uint address,uint data,uint mask)\n\n{\n  undefined updated_value;\n  uint shift_amount;\n  uint offset;\n  uint shifted_value;\n  \n  offset = (uint)(_DAT_e000ed0c << 0x15) >> 0x1d;\n  shift_amount = 7 - offset;\n  shifted_value = offset + 4;\n  if (3 < shift_amount) {\n    shift_amount = 4;\n  }\n  if (shifted_value < 7) {\n    offset = 0;\n  }\n  shift_amount = (1 << (shift_amount & 0xff)) - 1;\n  if (6 < shifted_value) {\n    offset = offset - 3;\n  }\n  updated_value = (undefined)\n          ((mask & (1 << (offset & 0xff)) - 1U | (data & shift_amount) << (offset & 0xff)) << 4);\n  if (-1 < (int)address) {\n    offset = address + 0xe000e100;\n  }\n  else {\n    shift_amount = 0xe000ed14;\n    offset = address & 0xf;\n  }\n  if (-1 < (int)address) {\n    *(undefined *)(offset + 0x300) = updated_value;\n  }\n  else {\n    *(undefined *)(shift_amount + offset) = updated_value;\n  }\n  return;\n}\n\n",
            "current_name": "update_memory_08001194",
            "entrypoint": "0x08001194",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08001194": "update_memory_08001194",
                "param_1": "address",
                "param_2": "data",
                "param_3": "mask",
                "uVar1": "updated_value",
                "uVar2": "shift_amount",
                "uVar3": "offset",
                "uVar4": "shifted_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080011fc": {
            "additional_data": {
                "&": {
                    "1": "bitwise_and"
                },
                "(param_1 >> 5) * 4 + -0x1fff1f00": {
                    "1": "array_index"
                },
                "*((input >> 5) * 4 + -0x1fff1f00)": {
                    "1": "bitarray"
                },
                "*(int *)": {
                    "1": "array"
                },
                "*(int *)((param_1 >> 5) * 4 + -0x1fff1f00)": {
                    "1": "memory_addr",
                    "2": "memory_address"
                },
                "0x1f": {
                    "1": "bit_mask"
                },
                "1 << (input & 0x1f)": {
                    "1": "bitmask"
                },
                "1 << (param_1 & 0x1f)": {
                    "3": "bit_mask",
                    "4": "bit_value"
                },
                "<<": {
                    "1": "bitwise_shift_left"
                },
                "<new_variable_name>": {
                    "1": "<original_variable_name>"
                },
                "<original_variable_name>": {
                    "1": "array_base_address"
                },
                "<original_variable_name_1>": {
                    "1": "<new_variable_name_1>"
                },
                ">>": {
                    "1": "shift_right"
                },
                "FUN_080011fc": {
                    "1": "store_bitwise_shifted_value",
                    "2": "set_bit_at_index",
                    "5": "set_bit_in_memory",
                    "9": "set_bit_in_array"
                },
                "param_1": {
                    "1": "input_value",
                    "12": "bit_index",
                    "2": "input",
                    "3": "position",
                    "5": "bit_position",
                    "8": "index"
                },
                "param_1 & 0x1f": {
                    "1": "bit_position"
                },
                "param_1 >> 5": {
                    "1": "divided_index"
                },
                "{(param_1 >> 5) * 4 + -0x1fff1f00}": {
                    "1": "array_index"
                }
            },
            "called": [],
            "calling": [
                "FUN_08004e7c"
            ],
            "code": "\nvoid set_bit_080011fc(uint bit_index)\n\n{\n  *(int *)((bit_index >> 5) * 4 + -0x1fff1f00) = 1 << (bit_index bitwise_and 0x1f);\n  return;\n}\n\n",
            "current_name": "set_bit_080011fc",
            "entrypoint": "0x080011fc",
            "imported": false,
            "improved": true,
            "renaming": {
                "&": "bitwise_and",
                "FUN_080011fc": "set_bit_080011fc",
                "param_1": "bit_index"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08001214": {
            "additional_data": {
                "DAT_e000ed23": {
                    "1": "mode",
                    "2": "register2",
                    "4": "flag",
                    "5": "status_flag"
                },
                "FUN_08001214": {
                    "1": "set_e000e014_value",
                    "2": "set_data_registers",
                    "7": "initialize_memory",
                    "9": "initialize_data"
                },
                "_DAT_e000e010": {
                    "1": "initialized_value_2",
                    "2": "register4",
                    "8": "flag"
                },
                "_DAT_e000e014": {
                    "1": "result_minus_one",
                    "2": "memory_address",
                    "3": "data_address"
                },
                "_DAT_e000e018": {
                    "1": "result",
                    "10": "counter",
                    "2": "register3"
                },
                "param_1": {
                    "1": "peripheral_address",
                    "16": "value",
                    "2": "size",
                    "8": "input_value"
                }
            },
            "called": [],
            "calling": [
                "FUN_08001104",
                "FUN_08004514"
            ],
            "code": "\n\n\nundefined4 initialize_data_08001214(int value)\n\n{\n  if (value - 1U < 0x1000000) {\n    _DAT_e000e014 = value - 1U;\n    DAT_e000ed23 = 0xf0;\n    _DAT_e000e018 = 0;\n    _DAT_e000e010 = 7;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "current_name": "initialize_data_08001214",
            "entrypoint": "0x08001214",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08001214": "initialize_data_08001214",
                "param_1": "value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08001240": {
            "additional_data": {
                "FUN_08001240": {
                    "1": "set_flag_if_equal",
                    "13": "set_flag",
                    "2": "update_control_register"
                },
                "_DAT_e000e010": {
                    "1": "status_register",
                    "14": "flag_register",
                    "2": "control_register",
                    "3": "register",
                    "4": "register_value"
                },
                "param_1": {
                    "1": "param",
                    "10": "flag_value",
                    "2": "input_value",
                    "6": "value",
                    "7": "flag"
                }
            },
            "called": [],
            "calling": [
                "FUN_08004514"
            ],
            "code": "\n\n\nvoid set_flag_08001240(int flag_value)\n\n{\n  if (flag_value == 4) {\n    _DAT_e000e010 = _DAT_e000e010 | 4;\n  }\n  else {\n    _DAT_e000e010 = _DAT_e000e010 & 0xfffffffb;\n  }\n  return;\n}\n\n",
            "current_name": "set_flag_08001240",
            "entrypoint": "0x08001240",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08001240": "set_flag_08001240",
                "param_1": "flag_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08001258": {
            "called": [],
            "calling": [],
            "code": "\nvoid FUNC_08001258(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_08001258",
            "entrypoint": "0x08001258",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_08001258": "FUNC_08001258"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_08001264": {
            "additional_data": {
                "FUN_08001264": {
                    "1": "update_param1",
                    "2": "update_flags_and_values",
                    "3": "update_flags"
                },
                "_DAT_40010008": {
                    "1": "register_value2"
                },
                "_DAT_40010400": {
                    "1": "register2"
                },
                "_DAT_40010404": {
                    "1": "register2"
                },
                "_DAT_40010408": {
                    "1": "register4"
                },
                "_DAT_4001040c": {
                    "1": "register4"
                },
                "_DAT_40021018": {
                    "1": "register_value"
                },
                "iVar4": {
                    "1": "block_index",
                    "2": "index1",
                    "20": "index",
                    "3": "register_index"
                },
                "iVar8": {
                    "1": "position",
                    "2": "bit_shift",
                    "3": "shift",
                    "5": "shift_amount"
                },
                "iVar8_index": {
                    "1": "variable_index"
                },
                "param_1": {
                    "1": "config_bits",
                    "2": "output_params",
                    "5": "output_array"
                },
                "param_2": {
                    "1": "param_array2",
                    "2": "new_permissions",
                    "5": "input_array"
                },
                "uVar1": {
                    "1": "result",
                    "2": "value1",
                    "3": "updated_value"
                },
                "uVar11": {
                    "1": "flag_value"
                },
                "uVar1_jump": {
                    "1": "jump_value"
                },
                "uVar2": {
                    "1": "bit",
                    "2": "flag2",
                    "7": "bit_mask",
                    "8": "bit_check"
                },
                "uVar2_jump": {
                    "1": "comparison_value"
                },
                "uVar3": {
                    "1": "entry",
                    "2": "opcode",
                    "3": "condition",
                    "4": "value"
                },
                "uVar3_jump": {
                    "1": "less_than_constant"
                },
                "uVar3_store": {
                    "1": "store_result"
                },
                "uVar5": {
                    "1": "iteration",
                    "10": "bit_index",
                    "2": "index",
                    "3": "counter",
                    "6": "i"
                },
                "uVar6": {
                    "1": "bit_mask_shifted",
                    "12": "mask",
                    "2": "shifted_bit",
                    "6": "bit_mask"
                },
                "uVar6_store": {
                    "1": "mask_to_store"
                },
                "uVar7": {
                    "1": "comparator",
                    "2": "constant",
                    "6": "check_value"
                },
                "uVar7_jump_1": {
                    "1": "special_value_1"
                },
                "uVar7_jump_2": {
                    "1": "special_value_2"
                },
                "unaff_r10": {
                    "1": "output_bits",
                    "3": "target_address"
                },
                "unaff_r10_address": {
                    "1": "address_to_update"
                },
                "unaff_r10_and": {
                    "1": "update_address_and"
                },
                "unaff_r10_or": {
                    "1": "update_address_or"
                },
                "unaff_ro": {
                    "1": "register_ptr"
                }
            },
            "called": [],
            "calling": [
                "FUN_0800458c",
                "FUN_08004e7c",
                "FUN_08004e14",
                "FUN_08004d48"
            ],
            "code": "\n\n\nvoid update_flags_08001264(uint *output_array,uint *input_array)\n\n{\n  uint updated_value;\n  uint bit_check;\n  uint value;\n  int index;\n  uint bit_index;\n  uint mask;\n  uint check_value;\n  uint *output_ptr;\n  int bit_offset;\n  \n  updated_value = 0;\n  bit_index = 0;\n  do {\n    mask = 1 << (bit_index & 0xff);\n    bit_check = mask & *input_array;\n    if (mask == bit_check) {\n      value = input_array[1];\n      if (value == 0x12) {\n        updated_value = input_array[3] + 0xc;\n      }\n      else if (value < 0x13) {\n        if (value == 2) {\n          updated_value = input_array[3] + 8;\n        }\n        else if (value < 3) {\n          if (value == 0) goto LAB_080013be;\n          if (value == 1) {\n            updated_value = input_array[3];\n          }\n        }\n        else if (value == 3) {\n          updated_value = 0;\n        }\n        else if (value == 0x11) {\n          updated_value = input_array[3] + 4;\n        }\n      }\n      else {\n        if (value != 0x10210000) {\n          if (value < 0x10210001) {\n            if (value != 0x10110000) {\n              check_value = 0x10120000;\nLAB_080013b8:\n              if (value != check_value) goto LAB_080012a8;\n            }\n          }\n          else if ((value != 0x10310000) && (value != 0x10320000)) {\n            check_value = 0x10220000;\n            goto LAB_080013b8;\n          }\n        }\nLAB_080013be:\n        updated_value = input_array[2];\n        if (updated_value == 0) {\n          updated_value = 4;\n        }\n        else {\n          if (updated_value == 1) {\n            output_array[4] = mask;\n          }\n          if (updated_value != 1) {\n            output_array[5] = mask;\n          }\n          updated_value = 8;\n        }\n      }\nLAB_080012a8:\n      if (bit_check < 0x100) {\n        mask = *output_array;\n        value = bit_index << 2;\n        output_ptr = output_array;\n      }\n      else {\n        mask = output_array[1];\n        value = (bit_index + 0x3ffffff8) * 4;\n      }\n      if (0xff < bit_check) {\n        output_ptr = output_array + 1;\n      }\n      *output_ptr = mask & ~(0xf << (value & 0xff)) | updated_value << (value & 0xff);\n      output_ptr = (uint *)input_array[1];\n      if (((uint)output_ptr & 0x10000000) != 0) {\n        _DAT_40021018 = _DAT_40021018 | 1;\n        bit_offset = (bit_index & 3) << 2;\n        if (output_array == (uint *)0x40010800) {\n          index = 0;\n        }\n        else if (output_array == (uint *)0x40010c00) {\n          index = 1;\n        }\n        else if (output_array == (uint *)0x40011000) {\n          index = 2;\n        }\n        else if (output_array == (uint *)0x40011400) {\n          index = 3;\n        }\n        else {\n          index = 4;\n        }\n        *(uint *)((bit_index & 0xfffffffc) + 0x40010008) =\n             index << bit_offset | *(uint *)((bit_index & 0xfffffffc) + 0x40010008) & ~(0xf << bit_offset);\n        if (((uint)output_ptr & 0x10000) == 0) {\n          _DAT_40010400 = _DAT_40010400 & ~bit_check;\n        }\n        else {\n          _DAT_40010400 = _DAT_40010400 | bit_check;\n        }\n        if (((uint)output_ptr & 0x20000) == 0) {\n          _DAT_40010404 = _DAT_40010404 & ~bit_check;\n        }\n        else {\n          _DAT_40010404 = _DAT_40010404 | bit_check;\n        }\n        if (((uint)output_ptr & 0x100000) == 0) {\n          _DAT_40010408 = _DAT_40010408 & ~bit_check;\n        }\n        else {\n          _DAT_40010408 = _DAT_40010408 | bit_check;\n        }\n        if (((uint)output_ptr & 0x200000) == 0) {\n          _DAT_4001040c = _DAT_4001040c & ~bit_check;\n        }\n        else {\n          _DAT_4001040c = bit_check | _DAT_4001040c;\n        }\n      }\n    }\n    bit_index = bit_index + 1;\n    if (bit_index == 0x10) {\n      return;\n    }\n  } while( true );\n}\n\n",
            "current_name": "update_flags_08001264",
            "entrypoint": "0x08001264",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08001264": "update_flags_08001264",
                "iVar4": "index",
                "iVar8": "bit_offset",
                "param_1": "output_array",
                "param_2": "input_array",
                "uVar1": "updated_value",
                "uVar2": "bit_check",
                "uVar3": "value",
                "uVar5": "bit_index",
                "uVar6": "mask",
                "uVar7": "check_value",
                "unaff_r10": "output_ptr"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08001424": {
            "additional_data": {
                "*(int *)(param_1 + 0x10)": {
                    "1": "object_property"
                },
                "FUN_08001424": {
                    "1": "update_param",
                    "13": "set_param_value",
                    "2": "set_parameter",
                    "3": "set_param"
                },
                "data_address + 0x10": {
                    "1": "target_address"
                },
                "param_1": {
                    "1": "data_struct_ptr",
                    "12": "base_address",
                    "2": "memory_address",
                    "3": "data_address",
                    "6": "object_address"
                },
                "param_1 + 0x10": {
                    "1": "address_to_update"
                },
                "param_2": {
                    "1": "updated_value",
                    "15": "value",
                    "2": "param_value",
                    "4": "shifted_value",
                    "5": "new_value"
                },
                "param_2 << 0x10": {
                    "5": "shifted_value"
                },
                "param_3": {
                    "1": "condition_flag",
                    "12": "is_shifted",
                    "2": "shift_value",
                    "3": "condition",
                    "9": "flag"
                },
                "param_value": {
                    "1": "new_param_value"
                }
            },
            "called": [],
            "calling": [
                "FUN_0800458c",
                "FUN_08003f3c",
                "FUN_08004490"
            ],
            "code": "\nvoid set_param_value_08001424(int base_address,int value,int is_shifted)\n\n{\n  if (is_shifted == 0) {\n    value = value << 0x10;\n  }\n  *(int *)(base_address + 0x10) = value;\n  return;\n}\n\n",
            "current_name": "set_param_value_08001424",
            "entrypoint": "0x08001424",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08001424": "set_param_value_08001424",
                "param_1": "base_address",
                "param_2": "value",
                "param_3": "is_shifted"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800142e": {
            "additional_data": {
                "*(uint *)(param_1 + 0xc)": {
                    "1": "result_value",
                    "5": "current_value"
                },
                "0xc": {
                    "3": "offset"
                },
                "DAT_0800143a": {
                    "1": "xor_result"
                },
                "DAT_08005030": {
                    "1": "constant_value"
                },
                "FUN_0800142e": {
                    "1": "xor_parameter",
                    "2": "toggle_bits",
                    "3": "xor_and_assign"
                },
                "PTR_data": {
                    "1": "data_pointer"
                },
                "PTR_storage": {
                    "1": "storage_pointer"
                },
                "PTR_value": {
                    "1": "value_pointer"
                },
                "PTR_variable": {
                    "1": "variable_pointer"
                },
                "offset": {
                    "1": "0xc"
                },
                "param_1": {
                    "1": "buffer_address",
                    "2": "input_pointer",
                    "3": "data_address",
                    "5": "input_address",
                    "7": "base_address"
                },
                "param_1 + 0xc": {
                    "1": "result_pointer",
                    "2": "target_address"
                },
                "param_1+0xc": {
                    "1": "result_address"
                },
                "param_10": {
                    "1": "new_parameter"
                },
                "param_11": {
                    "1": "param_value"
                },
                "param_12": {
                    "1": "data"
                },
                "param_2": {
                    "1": "input_data",
                    "12": "value",
                    "2": "new_value",
                    "4": "value_to_xor"
                },
                "param_2 ^ *(uint *)(param_1 + 0xc)": {
                    "2": "result",
                    "3": "updated_value"
                },
                "param_3": {
                    "1": "result"
                },
                "param_4": {
                    "1": "unchanged_param"
                },
                "param_5": {
                    "1": "another_param"
                },
                "param_6": {
                    "1": "extra_param"
                },
                "param_7": {
                    "1": "param"
                },
                "param_8": {
                    "1": "additional_param"
                },
                "param_9": {
                    "1": "extra_parameter"
                },
                "result": {
                    "1": "result"
                }
            },
            "called": [],
            "calling": [
                "FUN_08004490"
            ],
            "code": "\nvoid xor_and_assign_0800142e(int base_address,uint value)\n\n{\n  *(uint *)(base_address + 0xc) = value ^ *(uint *)(base_address + 0xc);\n  return;\n}\n\n",
            "current_name": "xor_and_assign_0800142e",
            "entrypoint": "0x0800142e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800142e": "xor_and_assign_0800142e",
                "param_1": "base_address",
                "param_2": "value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08001436": {
            "additional_data": {
                "& 0x400": {
                    "1": "bit_10"
                },
                "&= 0xfffffbff": {
                    "1": "clear_bit10"
                },
                "(int)param_1 + 0x35": {
                    "1": "character_value",
                    "2": "status"
                },
                "*(uint *)(iVar1 + 0x14)": {
                    "1": "bit_value",
                    "10": "flag",
                    "3": "flag_value",
                    "4": "flags"
                },
                "*(uint *)(iVar1 + 0x14) & 0x400": {
                    "1": "flag_check"
                },
                "*(uint *)(iVar1 + 0x14) & 0xfffffbff": {
                    "1": "flag_masked"
                },
                "*(undefined *)((int)param_1 + 0x35)": {
                    "1": "message",
                    "2": "flag_char",
                    "4": "status"
                },
                "*(undefined *)(param_1 + 0xd)": {
                    "1": "unspecified_value",
                    "2": "flag_value"
                },
                "0": {
                    "1": "failure"
                },
                "0x14": {
                    "2": "flag_offset"
                },
                "0x20": {
                    "1": "additional_value"
                },
                "0x400": {
                    "1": "check_flag"
                },
                "0xfffffbff": {
                    "1": "new_flag_mask"
                },
                "1": {
                    "1": "success"
                },
                "FUN_08001436": {
                    "1": "update_permissions",
                    "2": "clear_flag_and_set_values",
                    "3": "check_and_modify_flags",
                    "4": "clear_flag",
                    "5": "clear_flag_if_set",
                    "8": "check_flag_status"
                },
                "UINT_FLAG_ADDRESS": {
                    "1": "flag_address"
                },
                "iVar1": {
                    "1": "permission_value",
                    "10": "flag_value",
                    "16": "value"
                },
                "int": {
                    "1": "integer"
                },
                "param_1": {
                    "1": "pointer_to_struct",
                    "2": "input_array",
                    "3": "flag_ptr",
                    "4": "flag_pointer",
                    "5": "data"
                },
                "param_1 + 0xd": {
                    "1": "bool_variable",
                    "2": "flag_ptr"
                },
                "param_1[0xe]": {
                    "1": "result_code",
                    "16": "error_code",
                    "3": "result"
                },
                "uint": {
                    "1": "unsigned_int"
                },
                "undefined": {
                    "1": "unspecified"
                }
            },
            "called": [],
            "calling": [
                "FUN_080014e2"
            ],
            "code": "\nunspecified4 check_flag_status_08001436(integer *data)\n\n{\n  integer value;\n  \n  value = *data;\n  if ((*(unsigned_int *)(value + 0x14) & 0x400) != 0) {\n    *(unsigned_int *)(value + 0x14) = *(unsigned_int *)(value + 0x14) & 0xfffffbff;\n    error_code = 4;\n    *(unspecified *)((integer)data + 0x35) = 0x20;\n    *(unspecified *)(data + 0xd) = 0;\n    return 1;\n  }\n  return 0;\n}\n\n",
            "current_name": "check_flag_status_08001436",
            "entrypoint": "0x08001436",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08001436": "check_flag_status_08001436",
                "iVar1": "value",
                "int": "integer",
                "param_1": "data",
                "param_1[0xe]": "error_code",
                "uint": "unsigned_int",
                "undefined": "unspecified"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08001460": {
            "additional_data": {
                "FUN_08001460": {
                    "1": "check_and_update_flags",
                    "3": "check_conditions",
                    "4": "check_parameters",
                    "6": "check_condition"
                },
                "HAL_GetTick": {
                    "1": "get_tick_count",
                    "2": "get_current_time",
                    "3": "get_current_tick"
                },
                "iVar1": {
                    "1": "start_millis",
                    "26": "start_time",
                    "3": "start_tick"
                },
                "iVar2": {
                    "1": "new_tick",
                    "26": "current_time",
                    "3": "current_tick"
                },
                "param_1": {
                    "1": "ptr_list",
                    "2": "flag_array",
                    "3": "input_data",
                    "4": "data"
                },
                "param_2": {
                    "1": "param_bitmask",
                    "14": "flag",
                    "2": "condition",
                    "3": "flags"
                },
                "param_3": {
                    "28": "timeout",
                    "3": "time_limit"
                },
                "puVar4": {
                    "1": "flag_data",
                    "2": "array_pointer",
                    "3": "data_array",
                    "4": "ptr"
                },
                "uVar3": {
                    "1": "data_val",
                    "16": "value",
                    "3": "flag_value",
                    "4": "check_value"
                }
            },
            "called": [
                "FUN_0800115c"
            ],
            "calling": [
                "FUN_08001530",
                "FUN_080015e8"
            ],
            "code": "\nundefined4 check_condition_08001460(uint **data,uint flag,uint timeout)\n\n{\n  int start_time;\n  int current_time;\n  uint value;\n  uint *data_ptr;\n  \n  start_time = get_current_tick();\n  do {\n    data_ptr = *data;\n    if ((flag << 8) >> 0x18 == 1) {\n      value = data_ptr[5];\n    }\n    else {\n      value = data_ptr[6];\n    }\n    if ((flag & 0xffff & ~value) == 0) {\n      return 0;\n    }\n    if ((int)(data_ptr[5] << 0x15) < 0) {\n      *data_ptr = *data_ptr | 0x200;\n      data_ptr[5] = data_ptr[5] & 0xfffffbff;\n      data[0xe] = (uint *)0x4;\n      *(undefined *)((int)data + 0x35) = 0x20;\n      *(undefined *)(data + 0xd) = 0;\n      return 1;\n    }\n  } while ((timeout == 0xffffffff) ||\n          ((timeout != 0 && (current_time = get_current_tick(), (uint)(current_time - start_time) <= timeout))));\n  *(undefined *)((int)data + 0x35) = 0x20;\n  *(undefined *)(data + 0xd) = 0;\n  return 3;\n}\n\n",
            "current_name": "check_condition_08001460",
            "entrypoint": "0x08001460",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08001460": "check_condition_08001460",
                "HAL_GetTick": "get_current_tick",
                "iVar1": "start_time",
                "iVar2": "current_time",
                "param_1": "data",
                "param_2": "flag",
                "param_3": "timeout",
                "puVar4": "data_ptr",
                "uVar3": "value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080014e2": {
            "additional_data": {
                "FUN_0800115c": {
                    "1": "get_system_tick",
                    "17": "hal_get_tick"
                },
                "FUN_08001436": {
                    "1": "check_acknowledge_failed",
                    "17": "i2_c_is_acknowledge_failed"
                },
                "FUN_080014e2": {
                    "1": "wait_for_i2_c_ack",
                    "2": "perform_i2_c_communication",
                    "3": "check_i2_c_status",
                    "7": "check_i2_c_acknowledge"
                },
                "HAL_GetTick": {
                    "1": "get_current_tick"
                },
                "I2C_IsAcknowledgeFailed": {
                    "1": "check_acknowledge_failed"
                },
                "iVar1": {
                    "1": "current_tick",
                    "23": "start_time",
                    "5": "start_tick"
                },
                "iVar2": {
                    "1": "is_failed",
                    "12": "acknowledge_failed",
                    "2": "is_ack_failed",
                    "4": "ack_failed",
                    "6": "is_acknowledge_failed"
                },
                "param_1": {
                    "1": "i2c_status",
                    "2": "i2c_handle",
                    "3": "i2c_ptr",
                    "4": "i2c_params",
                    "5": "i2c_data"
                },
                "param_2": {
                    "2": "max_wait_time",
                    "29": "timeout"
                }
            },
            "called": [
                "FUN_08001436",
                "FUN_0800115c"
            ],
            "calling": [
                "FUN_08001530",
                "FUN_08001828",
                "FUN_080015e8"
            ],
            "code": "\nundefined4 check_i2_c_acknowledge_080014e2(int *i2c_data,uint timeout)\n\n{\n  int start_time;\n  int acknowledge_failed;\n  \n  start_time = get_current_tick();\n  while( true ) {\n    if (*(int *)(*i2c_data + 0x14) << 0x18 < 0) {\n      return 0;\n    }\n    acknowledge_failed = check_acknowledge_failed(i2c_data);\n    if (acknowledge_failed != 0) break;\n    if ((timeout != 0xffffffff) &&\n       ((timeout == 0 || (acknowledge_failed = get_current_tick(), timeout < (uint)(acknowledge_failed - start_time))))) {\n      i2c_data[0xe] = i2c_data[0xe] | 0x20;\n      *(undefined *)((int)i2c_data + 0x35) = 0x20;\n      *(undefined *)(i2c_data + 0xd) = 0;\n      return 3;\n    }\n  }\n  return 1;\n}\n\n",
            "current_name": "check_i2_c_acknowledge_080014e2",
            "entrypoint": "0x080014e2",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080014e2": "check_i2_c_acknowledge_080014e2",
                "HAL_GetTick": "get_current_tick",
                "I2C_IsAcknowledgeFailed": "check_acknowledge_failed",
                "iVar1": "start_time",
                "iVar2": "acknowledge_failed",
                "param_1": "i2c_data",
                "param_2": "timeout"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08001530": {
            "additional_data": {
                "FUN_0800115c": {
                    "1": "hal_get_tick"
                },
                "FUN_08001460": {
                    "1": "i2c_wait_on_master_address_flag"
                },
                "FUN_080014e2": {
                    "1": "i2c_wait_on_txe_flag"
                },
                "FUN_08001530": {
                    "1": "set_flags_and_transmit_data",
                    "2": "initialize_i2_c_communication",
                    "5": "perform_i2_c_transaction"
                },
                "HAL_GetTick": {
                    "1": "get_current_time"
                },
                "I2C_WaitOnMasterAddressFlagUntilTimeout": {
                    "1": "wait_on_master_address_flag"
                },
                "I2C_WaitOnTXEFlagUntilTimeout": {
                    "1": "wait_on_txe_flag"
                },
                "LAB_080015ca": {
                    "1": "perform_i2_c_transaction_end"
                },
                "iVar1": {
                    "1": "start_ticks",
                    "26": "start_time",
                    "3": "start_tick"
                },
                "iVar2": {
                    "1": "previous_ticks",
                    "25": "current_time",
                    "3": "current_tick"
                },
                "param_1": {
                    "1": "transaction_data",
                    "2": "i2c_handle",
                    "4": "i2c_data",
                    "6": "i2c_device"
                },
                "param_2": {
                    "1": "bit_mask",
                    "2": "data",
                    "3": "value1",
                    "4": "slave_address",
                    "5": "device_address"
                },
                "param_3": {
                    "1": "flag2",
                    "2": "memory_address",
                    "3": "value2",
                    "4": "data2",
                    "8": "data"
                },
                "param_4": {
                    "1": "is_ready",
                    "2": "data_length",
                    "3": "mode",
                    "6": "flag"
                },
                "param_5": {
                    "31": "timeout"
                },
                "ppuVar4": {
                    "1": "i2c_device_address",
                    "2": "register_ptr"
                },
                "puVar3": {
                    "1": "temp_pointer",
                    "2": "current_i2_c_data",
                    "4": "current_data"
                },
                "return": {
                    "1": "error_code"
                },
                "uVar5": {
                    "1": "current_address",
                    "2": "slave_address_copy",
                    "3": "data1_copy"
                },
                "uVar6": {
                    "1": "data_value",
                    "2": "value2_copy",
                    "3": "data2_copy"
                }
            },
            "called": [
                "FUN_08001460",
                "FUN_080014e2",
                "FUN_0800115c"
            ],
            "calling": [
                "FUN_08001828"
            ],
            "code": "\nundefined4 perform_i2_c_transaction_08001530(uint **i2c_device,uint device_address,uint data,int flag,uint timeout)\n\n{\n  int start_time;\n  int current_time;\n  uint *current_data;\n  uint **register_ptr;\n  uint data1_copy;\n  uint data2_copy;\n  \n  **i2c_device = **i2c_device | 0x100;\n  register_ptr = i2c_device;\n  data1_copy = device_address;\n  data2_copy = data;\n  start_time = get_current_time();\n  do {\n    current_data = *i2c_device;\n    do {\n      if ((int)(current_data[5] << 0x1f) < 0) {\n        current_data[4] = device_address & 0xfe;\n        start_time = wait_on_master_address_flag\n                          (i2c_device,0x10002,timeout,current_data,register_ptr,data1_copy,data2_copy);\n        if (start_time == 0) {\n          start_time = wait_on_txe_flag(i2c_device,timeout,(*i2c_device)[5],(*i2c_device)[6]);\n          if (start_time == 0) {\n            current_data = *i2c_device;\n            if (flag == 1) {\nperform_i2_c_transaction_08001530_end:\n              current_data[4] = data & 0xff;\n              error_code 0;\n            }\n            current_data[4] = data >> 8;\n            start_time = wait_on_txe_flag(i2c_device,timeout);\n            if (start_time == 0) {\n              current_data = *i2c_device;\n              goto perform_i2_c_transaction_08001530_end;\n            }\n          }\n          if (i2c_device[0xe] != (uint *)0x4) {\n            error_code 3;\n          }\n          **i2c_device = **i2c_device | 0x200;\n        }\n        else if (i2c_device[0xe] != (uint *)0x4) {\n          error_code 3;\n        }\n        error_code 1;\n      }\n    } while (timeout == 0xffffffff);\n    if ((timeout == 0) || (current_time = get_current_time(), timeout < (uint)(current_time - start_time))) {\n      *(undefined *)((int)i2c_device + 0x35) = 0x20;\n      *(undefined *)(i2c_device + 0xd) = 0;\n      error_code 3;\n    }\n  } while( true );\n}\n\n",
            "current_name": "perform_i2_c_transaction_08001530",
            "entrypoint": "0x08001530",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08001530": "perform_i2_c_transaction_08001530",
                "HAL_GetTick": "get_current_time",
                "I2C_WaitOnMasterAddressFlagUntilTimeout": "wait_on_master_address_flag",
                "I2C_WaitOnTXEFlagUntilTimeout": "wait_on_txe_flag",
                "LAB_080015ca": "perform_i2_c_transaction_end",
                "iVar1": "start_time",
                "iVar2": "current_time",
                "param_1": "i2c_device",
                "param_2": "device_address",
                "param_3": "data",
                "param_4": "flag",
                "param_5": "timeout",
                "ppuVar4": "register_ptr",
                "puVar3": "current_data",
                "return": "error_code",
                "uVar5": "data1_copy",
                "uVar6": "data2_copy"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080015e8": {
            "additional_data": {
                "FUN_0800115c": {
                    "1": "hal_get_tick"
                },
                "FUN_08001460": {
                    "1": "i2_c_wait_on_master_address_flag_until_timeout"
                },
                "FUN_080014e2": {
                    "1": "i2_c_wait_on_txe_flag_until_timeout"
                },
                "FUN_080015e8": {
                    "1": "initialize_device",
                    "2": "perform_i2_c_communication",
                    "3": "send_data",
                    "4": "perform_i2_c_transaction",
                    "6": "send_i2_c_data",
                    "7": "perform_i2_c_transfer"
                },
                "fun_0800115c": {
                    "1": "get_current_tick"
                },
                "fun_08001460": {
                    "1": "wait_on_master_address_flag"
                },
                "fun_080014e2": {
                    "1": "wait_on_txe_flag"
                },
                "iVar1": {
                    "1": "current_tick",
                    "2": "tick_start",
                    "23": "start_time",
                    "5": "start_tick"
                },
                "iVar2": {
                    "1": "new_tick",
                    "23": "current_time",
                    "6": "current_tick"
                },
                "param_1": {
                    "1": "pointer_array",
                    "2": "data",
                    "4": "i2c_handle",
                    "8": "i2c_device"
                },
                "param_2": {
                    "1": "memory_address",
                    "2": "reg_addr",
                    "3": "address",
                    "4": "register_address",
                    "6": "slave_address",
                    "7": "device_address"
                },
                "param_3": {
                    "1": "flag2",
                    "19": "data",
                    "2": "reg_address",
                    "5": "register_address"
                },
                "param_4": {
                    "1": "is10_bit_address",
                    "2": "is_multi_byte",
                    "3": "num_bytes"
                },
                "param_5": {
                    "31": "timeout"
                },
                "ppuVar4": {
                    "1": "current_i2_c_data",
                    "2": "ptr_ptr",
                    "4": "i2c_device_ptr"
                },
                "puVar3": {
                    "1": "current_i2_c_data",
                    "2": "ptr",
                    "3": "i2c_data_ptr"
                },
                "uVar5": {
                    "1": "dev_addr_write",
                    "2": "slave_address_copy"
                },
                "uVar6": {
                    "1": "txe_flag",
                    "2": "masked_data",
                    "4": "data_copy"
                }
            },
            "called": [
                "FUN_08001460",
                "FUN_080014e2",
                "FUN_0800115c"
            ],
            "calling": [
                "FUN_08001938"
            ],
            "code": "\nundefined4 perform_i2_c_transfer_080015e8(uint **i2c_device,uint device_address,uint data,int register_size,uint timeout)\n\n{\n  int start_time;\n  int current_time;\n  uint *i2c_data_ptr;\n  uint **i2c_device_ptr;\n  uint temp_var1;\n  uint data_temp;\n  \n  i2c_data_ptr = *i2c_device;\n  *i2c_data_ptr = *i2c_data_ptr | 0x400;\n  *i2c_data_ptr = *i2c_data_ptr | 0x100;\n  i2c_device_ptr = i2c_device;\n  temp_var1 = device_address;\n  data_temp = data;\n  start_time = HAL_GetTick();\nLAB_0800160e:\n  i2c_data_ptr = *i2c_device;\n  while (-1 < (int)(i2c_data_ptr[5] << 0x1f)) {\n    if (timeout != 0xffffffff) goto code_r0x08001658;\n  }\n  i2c_data_ptr[4] = device_address & 0xfe;\n  start_time = I2C_WaitOnMasterAddressFlagUntilTimeout\n                    (i2c_device,0x10002,timeout,i2c_data_ptr,i2c_device_ptr,temp_var1,data_temp);\n  if (start_time != 0) goto LAB_080016ba;\n  start_time = I2C_WaitOnTXEFlagUntilTimeout(i2c_device,timeout,(*i2c_device)[5],(*i2c_device)[6]);\n  if (start_time == 0) {\n    i2c_data_ptr = *i2c_device;\n    if (register_size != 1) {\n      i2c_data_ptr[4] = data >> 8;\n      start_time = I2C_WaitOnTXEFlagUntilTimeout(i2c_device,timeout);\n      if (start_time != 0) goto LAB_08001642;\n      i2c_data_ptr = *i2c_device;\n    }\n    i2c_data_ptr[4] = data & 0xff;\n    start_time = I2C_WaitOnTXEFlagUntilTimeout(i2c_device,timeout);\n    if (start_time == 0) {\n      **i2c_device = **i2c_device | 0x100;\n      start_time = HAL_GetTick();\n      do {\n        do {\n          if ((int)((*i2c_device)[5] << 0x1f) < 0) {\n            (*i2c_device)[4] = device_address & 0xff | 1;\n            start_time = I2C_WaitOnMasterAddressFlagUntilTimeout(i2c_device,0x10002,timeout);\n            if (start_time == 0) {\n              return 0;\n            }\nLAB_080016ba:\n            if (i2c_device[0xe] != (uint *)0x4) {\n              return 3;\n            }\n            return 1;\n          }\n        } while (timeout == 0xffffffff);\n      } while ((timeout != 0) && (current_time = HAL_GetTick(), (uint)(current_time - start_time) <= timeout));\nLAB_0800165a:\n      *(undefined *)((int)i2c_device + 0x35) = 0x20;\n      *(undefined *)(i2c_device + 0xd) = 0;\n      return 3;\n    }\n  }\nLAB_08001642:\n  if (i2c_device[0xe] == (uint *)0x4) {\n    **i2c_device = **i2c_device | 0x200;\n    return 1;\n  }\n  return 3;\ncode_r0x08001658:\n  if ((timeout == 0) || (current_time = HAL_GetTick(), timeout < (uint)(current_time - start_time))) goto LAB_0800165a;\n  goto LAB_0800160e;\n}\n\n",
            "current_name": "perform_i2_c_transfer_080015e8",
            "entrypoint": "0x080015e8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080015e8": "perform_i2_c_transfer_080015e8",
                "iVar1": "start_time",
                "iVar2": "current_time",
                "param_1": "i2c_device",
                "param_2": "device_address",
                "param_3": "data",
                "param_4": "register_size",
                "param_5": "timeout",
                "ppuVar4": "i2c_device_ptr",
                "puVar3": "i2c_data_ptr",
                "uVar5": "temp_var1",
                "uVar6": "data_temp"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080016f4": {
            "additional_data": {
                "(int)param_1 + 0x35": {
                    "1": "flag2"
                },
                "(param_2 == 0)": {
                    "1": "is_timeout_disabled"
                },
                "*(uint *)(iVar2 + 0x14)": {
                    "1": "flags"
                },
                "*(uint *)(iVar2 + 0x14) = *(uint *)(iVar2 + 0x14) & 0xffffffef": {
                    "1": "disable_flag1_bit"
                },
                "*(undefined *)((int)param_1 + 0x35)": {
                    "1": "data.flag_mask"
                },
                "*(undefined *)(param_1 + 0xd)": {
                    "1": "counter"
                },
                "0x14": {
                    "1": "offset"
                },
                "0x1b": {
                    "2": "shift_amount"
                },
                "0x20": {
                    "1": "flag_value1"
                },
                "0x35": {
                    "1": "flag_offset"
                },
                "0x40": {
                    "1": "flag_mask"
                },
                "0xd": {
                    "1": "flag2"
                },
                "0xe": {
                    "1": "flag1"
                },
                "0xffffffef": {
                    "1": "flag1_bit_mask"
                },
                "FUN_0800115c": {
                    "1": "get_tick",
                    "2": "initialize_device",
                    "3": "initialize"
                },
                "FUN_080016f4": {
                    "1": "check_flags_and_update",
                    "17": "check_timeout",
                    "2": "check_timeout_and_status"
                },
                "HAL_GetTick": {
                    "1": "get_current_time",
                    "2": "get_system_tick"
                },
                "halTick": {
                    "1": "hal_get_tick"
                },
                "iVar1": {
                    "1": "start_ticks",
                    "13": "start_tick",
                    "17": "start_time"
                },
                "iVar2": {
                    "1": "device_status",
                    "10": "current_value",
                    "2": "current_device",
                    "3": "current_tick",
                    "5": "current_data"
                },
                "param_1": {
                    "1": "timer",
                    "11": "data",
                    "3": "input_array"
                },
                "param_1 + 0xd": {
                    "1": "flag3"
                },
                "param_1[0xe]": {
                    "1": "flag1"
                },
                "param_2": {
                    "1": "tick_threshold",
                    "2": "timeout_value",
                    "26": "timeout"
                },
                "param_2 < (uint)(iVar2 - iVar1)": {
                    "1": "is_timeout_elapsed"
                }
            },
            "called": [
                "FUN_0800115c"
            ],
            "calling": [
                "FUN_08001938"
            ],
            "code": "\nundefined4 check_timeout_080016f4(int *data,uint timeout)\n\n{\n  int start_time;\n  int current_value;\n  \n  start_time = get_current_tick();\n  while( true ) {\n    current_value = *data;\n    if ((*(uint *)(current_value + 0x14) & 0x40) != 0) {\n      return 0;\n    }\n    if (*(int *)(current_value + 0x14) << 0x1b < 0) break;\n    if ((timeout == 0) || (current_value = get_current_tick(), timeout < (uint)(current_value - start_time))) {\n      flag_array[14] = flag_array[14] | 0x20;\n      *(undefined *)((int)data + 0x35) = 0x20;\n      *(undefined *)(data + 0xd) = 0;\n      return 3;\n    }\n  }\n  *(uint *)(current_value + 0x14) = *(uint *)(current_value + 0x14) & 0xffffffef;\n  flag_array[14] = 0;\n  *(undefined *)(data + 0xd) = 0;\n  *(undefined *)((int)data + 0x35) = 0x20;\n  return 1;\n}\n\n",
            "current_name": "check_timeout_080016f4",
            "entrypoint": "0x080016f4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080016f4": "check_timeout_080016f4",
                "HAL_GetTick": "get_current_tick",
                "iVar1": "start_time",
                "iVar2": "current_value",
                "param_1": "data",
                "param_1[0xe]": "flag_array[14]",
                "param_2": "timeout"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08001754": {
            "additional_data": {
                "(int)param_1 + 0x35": {
                    "1": "device_initialized_addr"
                },
                "(uVar1 & 0xfff) < 4": {
                    "1": "condition1"
                },
                "(uVar1 & 0xfff) == 0": {
                    "1": "condition2"
                },
                "(uint *)0x186a0": {
                    "1": "threshold"
                },
                "*(char *)((int)param_1 + 0x35)": {
                    "1": "device_initialized"
                },
                "*(undefined *)((int)param_1 + 0x35)": {
                    "1": "value4"
                },
                "*(undefined *)(param_1 + 0xd)": {
                    "1": "device_flag_addr"
                },
                "**param_1": {
                    "1": "config_value"
                },
                "0": {
                    "1": "value6"
                },
                "0x0": {
                    "1": "nullptr2",
                    "3": "null"
                },
                "0x186a0": {
                    "2": "threshold"
                },
                "0x19": {
                    "1": "multiplier"
                },
                "0x20": {
                    "1": "value5"
                },
                "0x24": {
                    "1": "updated_flag_value"
                },
                "0x35": {
                    "1": "flag2"
                },
                "0x36": {
                    "1": "val1"
                },
                "0xc000": {
                    "1": "alternative_flag_value"
                },
                "0xe": {
                    "1": "nullptr3"
                },
                "0xfff": {
                    "1": "bit_mask2"
                },
                "0xfffffffe": {
                    "1": "mask1"
                },
                "1": {
                    "1": "default_return_value"
                },
                "1000": {
                    "1": "divider1"
                },
                "1000000": {
                    "1": "microseconds_in_a_second"
                },
                "300": {
                    "1": "default_threshold_value"
                },
                "4": {
                    "1": "value2"
                },
                "FUN_08001754": {
                    "1": "initialize_i2_c_configuration",
                    "2": "initialize_device",
                    "23": "initialize_i2_c"
                },
                "FUN_08002220": {
                    "3": "get_pclk1_freq"
                },
                "FUN_08004d48": {
                    "1": "some_other_function"
                },
                "HAL_I2C_MspInit": {
                    "1": "initialize_i2_c_peripheral_pins",
                    "2": "initialize_i2_c_peripherals",
                    "3": "initialize_i2_c",
                    "4": "initialize_i2_c_hardware",
                    "6": "initialize_i2_c_periph"
                },
                "HAL_I2C_MspInit()": {
                    "1": "initialize_i2_c_periph_clock"
                },
                "HAL_RCC_GetPCLK1Freq": {
                    "1": "get_apb1_clock_frequency",
                    "3": "get_pclk1_freq",
                    "9": "get_pclk1_frequency"
                },
                "HAL_RCC_GetPCLK1Freq()": {
                    "1": "get_pclk1_freq"
                },
                "_": {
                    "1": "temp_var"
                },
                "fun_08002220": {
                    "1": "some_function"
                },
                "param_1": {
                    "1": "interface_params",
                    "3": "param",
                    "4": "config_params",
                    "5": "config",
                    "6": "i2c_params"
                },
                "param_1 + 0x35": {
                    "1": "config_flag1"
                },
                "param_1 + 0xd": {
                    "1": "config_ptr13"
                },
                "param_1[0xe]": {
                    "1": "filter_config"
                },
                "param_1[1]": {
                    "1": "communication_speed"
                },
                "param_1[2]": {
                    "1": "support_i2_c_extended_buffer"
                },
                "param_1[2] == (uint *)0x0": {
                    "1": "param2_condition"
                },
                "param_1[3]": {
                    "1": "config_ptr3_value"
                },
                "param_1[4]": {
                    "1": "param3"
                },
                "param_1[5]": {
                    "1": "config_ptr5_value"
                },
                "param_1[6]": {
                    "1": "config_ptr6_value"
                },
                "param_1[7]": {
                    "1": "m_timing"
                },
                "param_1[8]": {
                    "1": "s_timing"
                },
                "puVar1": {
                    "1": "i2c_params_ptr4"
                },
                "puVar2": {
                    "1": "i2c_params_ptr3"
                },
                "puVar3": {
                    "1": "parameter_ptr",
                    "2": "i2c_params",
                    "3": "config_ptr"
                },
                "puVar3[1]": {
                    "1": "scaling_factor_m_hz"
                },
                "puVar3[2]": {
                    "1": "i2c_clock_control"
                },
                "puVar3[3]": {
                    "1": "i2c_rise_time"
                },
                "puVar3[7]": {
                    "1": "i2c_timing"
                },
                "puVar3[8]": {
                    "1": "fast_mode_duty_cycle"
                },
                "puVar4": {
                    "1": "i2c_config_entry_threshold",
                    "2": "config_ptr1",
                    "3": "param1_ptr"
                },
                "puVar5": {
                    "1": "scaling_factor",
                    "2": "config_ptr2",
                    "3": "pu_var5"
                },
                "uVar1": {
                    "1": "pclk1_freq",
                    "13": "pclk1_freq_low",
                    "3": "pclk1_frequency_low"
                },
                "uVar1 & 0xfff": {
                    "1": "u_var1_bitwise_and"
                },
                "uVar1 / (uint)((int)puVar4 * 0x19) | 0xc000": {
                    "1": "u_var1_value2"
                },
                "uVar1 / (uint)((int)puVar4 * 3) | 0x8000": {
                    "1": "u_var1_value1"
                },
                "uVar1 = 1": {
                    "1": "u_var1_equals1"
                },
                "uVar1 = 4": {
                    "1": "u_var1_equals4"
                },
                "uVar11": {
                    "1": "temp_var2"
                },
                "uVar12": {
                    "1": "temp_var3"
                },
                "uVar13": {
                    "1": "temp_var4"
                },
                "uVar14": {
                    "1": "temp_var5"
                },
                "uVar15": {
                    "1": "temp_var6"
                },
                "uVar16": {
                    "1": "temp_var7"
                },
                "uVar17": {
                    "1": "temp_var8"
                },
                "uVar18": {
                    "1": "temp_var9"
                },
                "uVar2": {
                    "1": "clock_freq_high",
                    "14": "pclk1_freq_high",
                    "2": "pclk1_freq_upper",
                    "3": "pclk_freq_high"
                },
                "uVar2 / 1000": {
                    "1": "div_result"
                },
                "uVar6": {
                    "1": "pclk_divider",
                    "2": "pclk1_freq_in_m_hz",
                    "5": "u_var6"
                },
                "uVar6 * uVar2": {
                    "1": "u_var2_value"
                },
                "uVar6 + 1": {
                    "1": "result1"
                },
                "uVar7": {
                    "1": "pclk_frequency",
                    "17": "pclk1_freq",
                    "5": "pclk_freq"
                },
                "uint **param_1": {
                    "1": "uint_device_ptr"
                }
            },
            "called": [
                "FUN_08002220",
                "FUN_08004d48"
            ],
            "calling": [
                "FUN_0800458c"
            ],
            "code": "\nundefined4 initialize_i2_c_08001754(uint **i2c_params)\n\n{\n  uint pclk1_freq_low;\n  uint pclk1_freq_high;\n  uint *config_ptr;\n  uint *param1_ptr;\n  uint *param2_ptr;\n  uint u_var6;\n  undefined8 pclk1_freq;\n  \n  if (i2c_params != (uint **)0x0) {\n    if (*(char *)((int)i2c_params + 0x35) == '\\0') {\n      *(undefined *)(i2c_params + 0xd) = 0;\n      initialize_i2_c_08001754_periph_clock;\n    }\n    *(undefined *)((int)i2c_params + 0x35) = 0x24;\n    **i2c_params = **i2c_params & 0xfffffffe;\n    pclk1_freq = get_pclk1_freq;\n    pclk1_freq_high = (uint)((ulonglong)pclk1_freq >> 0x20);\n    pclk1_freq_low = (uint)pclk1_freq;\n    param1_ptr = communication_speed;\n    u_var6 = pclk1_freq_low / 1000000;\n    if ((uint *)0x186a0 < param1_ptr) {\n      pclk1_freq_high = 300;\n    }\n    config_ptr = *i2c_params;\n    if ((uint *)0x186a0 < param1_ptr) {\n      pclk1_freq_high = u_var6 * pclk1_freq_high;\n    }\n    scaling_factor_m_hz = u_var6;\n    if ((uint *)0x186a0 < param1_ptr) {\n      u_var6 = pclk1_freq_high / 1000;\n    }\n    fast_mode_duty_cycle = u_var6 + 1;\n    if (param1_ptr < (uint *)0x186a1) {\n      pclk1_freq_low = pclk1_freq_low / (uint)((int)param1_ptr << 1);\n      if ((pclk1_freq_low & 0xfff) < 4) {\n        pclk1_freq_low = 4;\n      }\n    }\n    else {\n      if (clock_hsi_prescaler == (uint *)0x0) {\n        pclk1_freq_low = pclk1_freq_low / (uint)((int)param1_ptr * 3) | 0x8000;\n      }\n      else {\n        pclk1_freq_low = pclk1_freq_low / (uint)((int)param1_ptr * 0x19) | 0xc000;\n      }\n      if ((pclk1_freq_low & 0xfff) == 0) {\n        pclk1_freq_low = 1;\n      }\n    }\n    param1_ptr = s_timing;\n    param2_ptr = m_timing;\n    i2c_timing = pclk1_freq_low;\n    *config_ptr = (uint)param2_ptr | (uint)param1_ptr;\n    i2c_clock_control = (uint)clk_rcc_config | (uint)clk_tim_config;\n    i2c_rise_time = (uint)clk_bus_config | (uint)clk_spur_config;\n    *config_ptr = *config_ptr | 1;\n    param3_ptr = (uint *)0x0;\n    *(undefined *)((int)i2c_params + 0x35) = 0x20;\n    *(undefined *)((int)i2c_params + 0x36) = 0;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "current_name": "initialize_i2_c_08001754",
            "entrypoint": "0x08001754",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08001754": "initialize_i2_c_08001754",
                "HAL_I2C_MspInit": "initialize_i2_c_periph",
                "HAL_I2C_MspInit()": "initialize_i2_c_periph_clock",
                "HAL_RCC_GetPCLK1Freq": "get_pclk1_frequency",
                "HAL_RCC_GetPCLK1Freq()": "get_pclk1_freq",
                "_": "temp_var",
                "param_1": "i2c_params",
                "param_1[0xe]": "param3_ptr",
                "param_1[1]": "communication_speed",
                "param_1[2]": "clock_hsi_prescaler",
                "param_1[3]": "clk_tim_config",
                "param_1[4]": "clk_rcc_config",
                "param_1[5]": "clk_bus_config",
                "param_1[6]": "clk_spur_config",
                "param_1[7]": "m_timing",
                "param_1[8]": "s_timing",
                "puVar3": "config_ptr",
                "puVar3[1]": "scaling_factor_m_hz",
                "puVar3[2]": "i2c_clock_control",
                "puVar3[3]": "i2c_rise_time",
                "puVar3[7]": "i2c_timing",
                "puVar3[8]": "fast_mode_duty_cycle",
                "puVar4": "param1_ptr",
                "puVar5": "param2_ptr",
                "uVar1": "pclk1_freq_low",
                "uVar2": "pclk1_freq_high",
                "uVar6": "u_var6",
                "uVar7": "pclk1_freq"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08001828": {
            "additional_data": {
                "**param_1": {
                    "1": "i2c_data_ptr"
                },
                "FUN_0800115c": {
                    "1": "initialize"
                },
                "FUN_080014e2": {
                    "1": "perform_some_operation"
                },
                "FUN_08001530": {
                    "1": "perform_i2_c_transmission_internal"
                },
                "FUN_08001828": {
                    "1": "perform_i2_c_transmission",
                    "3": "perform_i2_c_write",
                    "4": "perform_i2_c_data_transfer",
                    "9": "send_data"
                },
                "HAL_GetTick": {
                    "1": "get_tick_count",
                    "2": "get_tick"
                },
                "HAl_GetTick": {
                    "1": "get_tick"
                },
                "I2C_RequestMemoryWrite": {
                    "1": "perform_i2_c_write",
                    "16": "request_memory_write"
                },
                "I2C_WaitOnTXEFlagUntilTimeout": {
                    "11": "wait_on_txe_flag_until_timeout",
                    "2": "wait_on_txe_flag",
                    "3": "wait_for_txe_flag_until_timeout"
                },
                "LAB_080018e2": {
                    "1": "write_data_to_buffer"
                },
                "PTR_0800115c": {
                    "1": "ptr_function3"
                },
                "PTR_080014e2": {
                    "1": "ptr_function2"
                },
                "PTR_08001530": {
                    "1": "ptr_function1"
                },
                "iVar1": {
                    "1": "current_tick",
                    "21": "start_time",
                    "3": "current_time",
                    "5": "start_tick"
                },
                "iVar2": {
                    "1": "previous_time",
                    "18": "current_time",
                    "2": "end_time",
                    "5": "current_tick"
                },
                "param_1": {
                    "1": "i2c_params",
                    "12": "data",
                    "2": "i2c_handle",
                    "6": "i2c_data"
                },
                "param_2": {
                    "1": "reg_addr",
                    "2": "val1",
                    "3": "arg1",
                    "4": "param1",
                    "6": "param2",
                    "9": "address"
                },
                "param_3": {
                    "1": "value2",
                    "2": "val2",
                    "3": "arg2",
                    "4": "param2",
                    "6": "param3"
                },
                "param_4": {
                    "1": "param_value3",
                    "2": "val3",
                    "3": "arg3",
                    "4": "param3",
                    "6": "param4"
                },
                "param_5": {
                    "1": "byte_array",
                    "14": "buffer",
                    "2": "data_ptr",
                    "3": "data_buffer",
                    "8": "data"
                },
                "param_6": {
                    "1": "size",
                    "2": "count",
                    "4": "data_length",
                    "5": "buffer_size",
                    "7": "length"
                },
                "param_7": {
                    "1": "param_flag",
                    "18": "timeout",
                    "2": "val4",
                    "3": "param4",
                    "5": "param7"
                },
                "puVar3": {
                    "1": "ptr_data",
                    "11": "ptr",
                    "2": "current_data",
                    "3": "i2c_data"
                },
                "uVar4": {
                    "1": "current_value",
                    "2": "val",
                    "4": "temp",
                    "6": "temp_var",
                    "8": "value"
                }
            },
            "called": [
                "FUN_08001530",
                "FUN_080014e2",
                "FUN_0800115c"
            ],
            "calling": [
                "FUN_0800403c"
            ],
            "code": "\nundefined4\nsend_data_08001828(uint **data,undefined4 address,undefined4 param3,undefined4 param4,byte *buffer,\n            short length,undefined4 timeout)\n\n{\n  int start_time;\n  int current_time;\n  uint *ptr;\n  uint value;\n  \n  if (*(char *)((int)data + 0x35) == ' ') {\n    if (buffer == (byte *)0x0) {\n      return 1;\n    }\n    if (length == 0) {\n      return 1;\n    }\n    start_time = get_tick();\n    do {\n      ptr = *data;\n      if ((~ptr[6] & 2) != 0) {\n        if (*(char *)(data + 0xd) == '\\x01') {\n          return 2;\n        }\n        value = *ptr;\n        *(undefined *)(data + 0xd) = 1;\n        *ptr = value & 0xfffff7ff;\n        *(undefined *)((int)data + 0x35) = 0x21;\n        *(undefined *)((int)data + 0x36) = 0x40;\n        data[0xe] = (uint *)0x0;\n        start_time = request_memory_write(data,address,param3,param4,timeout);\n        if (start_time != 0) {\n          *(undefined *)(data + 0xd) = 0;\n          if (data[0xe] == (uint *)0x4) {\n            return 1;\n          }\n          return 3;\n        }\n        goto write_data_to_buffer;\n      }\n      current_time = get_tick();\n    } while ((uint)(current_time - start_time) < 0x2711);\n    *(undefined *)(data + 0xd) = 0;\n    *(undefined *)((int)data + 0x35) = 0x20;\n  }\n  return 2;\n  while (length != 0) {\nwrite_data_to_buffer:\n    start_time = wait_on_txe_flag_until_timeout(data,timeout);\n    if (start_time != 0) goto LAB_080018ee;\n    ptr = *data;\n    ptr[4] = (uint)*buffer;\n    if ((int)(ptr[5] << 0x1d) < 0) {\n      if ((short)(length + -1) == 0) break;\n      length = length + -2;\n      ptr[4] = (uint)buffer[1];\n      buffer = buffer + 2;\n    }\n    else {\n      buffer = buffer + 1;\n      length = length + -1;\n    }\n  }\n  start_time = wait_on_txe_flag_until_timeout(data,timeout);\n  if (start_time == 0) {\n    **data = **data | 0x200;\n    *(undefined *)(data + 0xd) = 0;\n    *(undefined *)((int)data + 0x35) = 0x20;\n    *(undefined *)((int)data + 0x36) = 0;\n    return 0;\n  }\nLAB_080018ee:\n  if (data[0xe] == (uint *)0x4) {\n    **data = **data | 0x200;\n    return 1;\n  }\n  return 3;\n}\n\n",
            "current_name": "send_data_08001828",
            "entrypoint": "0x08001828",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08001828": "send_data_08001828",
                "HAL_GetTick": "get_tick",
                "I2C_RequestMemoryWrite": "request_memory_write",
                "I2C_WaitOnTXEFlagUntilTimeout": "wait_on_txe_flag_until_timeout",
                "LAB_080018e2": "write_data_to_buffer",
                "iVar1": "start_time",
                "iVar2": "current_time",
                "param_1": "data",
                "param_2": "address",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "buffer",
                "param_6": "length",
                "param_7": "timeout",
                "puVar3": "ptr",
                "uVar4": "value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08001938": {
            "additional_data": {
                "*param_5": {
                    "1": "received_value"
                },
                "FUN_08001938": {
                    "1": "read_memory",
                    "2": "perform_i2_c_operation",
                    "3": "read_sensor_data",
                    "4": "read_i2_c_data",
                    "5": "perform_i2_c_communication"
                },
                "HAL_GetTick": {
                    "1": "get_tick",
                    "4": "get_tick_count",
                    "6": "get_current_time"
                },
                "Hal_GetTick": {
                    "1": "get_current_time"
                },
                "I2C_RequestMemoryRead": {
                    "1": "request_i2_c_read",
                    "14": "request_memory_read"
                },
                "I2C_WaitOnRXNEFlagUntilTimeout": {
                    "1": "wait_for_rxne_flag_or_timeout",
                    "2": "wait_for_rxne_flag",
                    "9": "wait_on_rxne_flag_until_timeout"
                },
                "LAB_08001a18": {
                    "1": "end_loop2"
                },
                "LAB_08001ab8": {
                    "1": "end_loop1"
                },
                "LAB_08001b3a": {
                    "1": "end_loop3"
                },
                "bVar7": {
                    "1": "is_two_bytes",
                    "2": "is_true",
                    "20": "flag",
                    "3": "is_negative"
                },
                "disableIRQinterrupts": {
                    "3": "disable_irq",
                    "7": "disable_interrupts"
                },
                "enableIRQinterrupts": {
                    "3": "enable_irq_interrupts",
                    "7": "enable_interrupts"
                },
                "iVar2": {
                    "1": "iteration_var",
                    "20": "start_time",
                    "4": "tick_start"
                },
                "iVar3": {
                    "1": "tick_now",
                    "20": "current_time",
                    "3": "tick_current"
                },
                "param_1": {
                    "1": "operation_params",
                    "10": "data",
                    "2": "device",
                    "4": "i2c_params",
                    "6": "i2c_data"
                },
                "param_2": {
                    "1": "param_a",
                    "2": "memory_address",
                    "3": "param_2",
                    "6": "address",
                    "7": "param2"
                },
                "param_3": {
                    "1": "arg2",
                    "2": "mem_address",
                    "3": "value2",
                    "7": "param3"
                },
                "param_4": {
                    "1": "param_c",
                    "2": "param3",
                    "3": "value3",
                    "7": "param4"
                },
                "param_5": {
                    "1": "data_pointer",
                    "18": "buffer",
                    "2": "output_data",
                    "6": "data"
                },
                "param_6": {
                    "1": "size",
                    "11": "buffer_size",
                    "2": "num_bytes",
                    "4": "data_size",
                    "5": "data_length",
                    "6": "length"
                },
                "param_7": {
                    "1": "max_timeout",
                    "30": "timeout"
                },
                "puVar1": {
                    "1": "temp_ptr1",
                    "12": "ptr1",
                    "2": "temp_var1",
                    "6": "ptr"
                },
                "puVar4": {
                    "1": "current_value",
                    "11": "ptr2",
                    "2": "ptr_data"
                },
                "puVar6": {
                    "1": "new_data",
                    "11": "ptr3",
                    "2": "ptr6",
                    "3": "buffer_ptr"
                },
                "uVar5": {
                    "1": "temp_var1",
                    "11": "value",
                    "2": "temp_var",
                    "5": "temp"
                },
                "uint param_7": {
                    "1": "max_timeout"
                },
                "undefined *param_5": {
                    "1": "receive_buffer"
                },
                "undefined4 param_2": {
                    "1": "timeout"
                },
                "undefined4 param_3": {
                    "1": "device_address"
                },
                "undefined4 param_4": {
                    "1": "register_address"
                },
                "ushort param_6": {
                    "1": "receive_buffer_size"
                }
            },
            "called": [
                "FUN_0800115c",
                "FUN_080015e8",
                "FUN_080016f4"
            ],
            "calling": [
                "FUN_0800407c",
                "FUN_080040b8"
            ],
            "code": "\nundefined4\nperform_i2_c_communication_08001938(uint **data,undefined4 param2,undefined4 param3,undefined4 param4,\n            undefined *buffer,ushort buffer_size,uint timeout)\n\n{\n  undefined *ptr1;\n  int start_time;\n  int current_time;\n  uint *ptr2;\n  uint value;\n  undefined *ptr3;\n  bool flag;\n  \n  if (*(char *)((int)data + 0x35) != ' ') {\n    return 2;\n  }\n  if (buffer == (undefined *)0x0) {\n    return 1;\n  }\n  if (buffer_size == 0) {\n    return 1;\n  }\n  start_time = get_current_time();\n  while (ptr2 = *data, (~ptr2[6] & 2) == 0) {\n    current_time = get_current_time();\n    if (10000 < (uint)(current_time - start_time)) {\n      *(undefined *)(data + 0xd) = 0;\n      *(undefined *)((int)data + 0x35) = 0x20;\n      return 2;\n    }\n  }\n  if (*(char *)(data + 0xd) == '\\x01') {\n    return 2;\n  }\n  value = *ptr2;\n  *(undefined *)(data + 0xd) = 1;\n  *ptr2 = value & 0xfffff7ff;\n  *(undefined *)((int)data + 0x35) = 0x22;\n  *(undefined *)((int)data + 0x36) = 0x40;\n  data[0xe] = (uint *)0x0;\n  start_time = request_memory_read(data,param2,param3,param4,timeout);\n  if (start_time != 0) {\n    *(undefined *)(data + 0xd) = 0;\n    if (data[0xe] == (uint *)0x4) {\n      return 1;\n    }\n    return 3;\n  }\n  ptr2 = *data;\n  value = *ptr2;\n  if (buffer_size == 1) {\n    *ptr2 = value & 0xfffffbff;\n    disable_interrupts();\n    **data = **data | 0x200;\n    enable_interrupts();\n    start_time = wait_on_rxne_flag_until_timeout(data,timeout);\n    if (start_time == 0) {\n      *buffer = (char)(*data)[4];\nend_loop1:\n      *(undefined *)((int)data + 0x35) = 0x20;\n      *(undefined *)((int)data + 0x36) = 0;\n      *(undefined *)(data + 0xd) = 0;\n      return 0;\n    }\nend_loop2:\n    if (data[0xe] != (uint *)0x20) {\n      return 1;\n    }\n    return 3;\n  }\n  if (buffer_size == 2) {\n    *ptr2 = value | 0x800;\n    disable_interrupts();\n    **data = **data & 0xfffffbff;\n    enable_interrupts();\n  }\n  else {\n    *ptr2 = value | 0x400;\n    while (3 < buffer_size) {\n      start_time = wait_on_rxne_flag_until_timeout(data,timeout);\n      if (start_time != 0) goto end_loop2;\n      *buffer = (char)(*data)[4];\n      ptr2 = *data;\n      flag = (int)(ptr2[5] << 0x1d) < 0;\n      if (flag) {\n        ptr2 = (uint *)ptr2[4];\n        ptr3 = buffer + 2;\n        buffer_size = buffer_size - 2;\n      }\n      else {\n        ptr3 = buffer + 1;\n        buffer_size = buffer_size - 1;\n      }\n      ptr1 = buffer + 1;\n      buffer = ptr3;\n      if (flag) {\n        *ptr1 = (char)ptr2;\n      }\n    }\n    if (buffer_size != 2) {\n      start_time = get_current_time();\n      do {\n        ptr2 = *data;\n        do {\n          if ((int)(ptr2[5] << 0x1d) < 0) {\n            *ptr2 = *ptr2 & 0xfffffbff;\n            disable_interrupts();\n            *buffer = (char)(*data)[4];\n            start_time = get_current_time();\n            goto end_loop3;\n          }\n        } while (timeout == 0xffffffff);\n      } while ((timeout != 0) && (current_time = get_current_time(), (uint)(current_time - start_time) <= timeout));\n      goto LAB_08001afa;\n    }\n  }\n  start_time = get_current_time();\n  do {\n    do {\n      if ((int)((*data)[5] << 0x1d) < 0) {\n        disable_interrupts();\n        ptr2 = *data;\n        *ptr2 = *ptr2 | 0x200;\n        *buffer = (char)ptr2[4];\n        enable_interrupts();\n        buffer[1] = (char)(*data)[4];\n        goto end_loop1;\n      }\n    } while (timeout == 0xffffffff);\n  } while ((timeout != 0) && (current_time = get_current_time(), (uint)(current_time - start_time) <= timeout));\nLAB_08001afa:\n  *(undefined *)((int)data + 0x35) = 0x20;\n  *(undefined *)(data + 0xd) = 0;\n  return 3;\nend_loop3:\n  do {\n    ptr2 = *data;\n    do {\n      if ((int)(ptr2[5] << 0x1d) < 0) {\n        *ptr2 = *ptr2 | 0x200;\n        buffer[1] = (char)ptr2[4];\n        enable_interrupts();\n        buffer[2] = (char)(*data)[4];\n        goto end_loop1;\n      }\n    } while (timeout == 0xffffffff);\n  } while ((timeout != 0) && (current_time = get_current_time(), (uint)(current_time - start_time) <= timeout));\n  goto LAB_08001afa;\n}\n\n",
            "current_name": "perform_i2_c_communication_08001938",
            "entrypoint": "0x08001938",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08001938": "perform_i2_c_communication_08001938",
                "HAL_GetTick": "get_current_time",
                "I2C_RequestMemoryRead": "request_memory_read",
                "I2C_WaitOnRXNEFlagUntilTimeout": "wait_on_rxne_flag_until_timeout",
                "LAB_08001a18": "end_loop2",
                "LAB_08001ab8": "end_loop1",
                "LAB_08001b3a": "end_loop3",
                "bVar7": "flag",
                "disableIRQinterrupts": "disable_interrupts",
                "enableIRQinterrupts": "enable_interrupts",
                "iVar2": "start_time",
                "iVar3": "current_time",
                "param_1": "data",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "buffer",
                "param_6": "buffer_size",
                "param_7": "timeout",
                "puVar1": "ptr1",
                "puVar4": "ptr2",
                "puVar6": "ptr3",
                "uVar5": "value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08001b58": {
            "additional_data": {
                "FUN_08001b58": {
                    "1": "check_status_and_delay",
                    "2": "check_and_modify_settings"
                },
                "HAL_Delay": {
                    "1": "delay"
                },
                "HAL_GetTick": {
                    "1": "get_tick_count",
                    "3": "get_current_tick",
                    "4": "get_tick"
                },
                "LAB_08001c1e": {
                    "1": "set_flag_register"
                },
                "_DAT_40007000": {
                    "1": "register_5",
                    "2": "register_4"
                },
                "_DAT_40021000": {
                    "1": "register2",
                    "3": "register_2"
                },
                "_DAT_40021004": {
                    "1": "register2",
                    "2": "register_1"
                },
                "_DAT_4002101c": {
                    "1": "register4"
                },
                "_DAT_40021020": {
                    "1": "device_register",
                    "2": "register_5"
                },
                "_DAT_40021024": {
                    "1": "register4",
                    "2": "register_3"
                },
                "iRam42420000": {
                    "1": "ram_value1",
                    "2": "variable1"
                },
                "iRam42420480": {
                    "1": "flag_variable_2",
                    "2": "variable2"
                },
                "iVar1": {
                    "1": "temp1",
                    "11": "temp_var1",
                    "2": "variable1",
                    "3": "tick_start",
                    "5": "var1"
                },
                "iVar2": {
                    "1": "temp2",
                    "11": "temp_var2",
                    "2": "variable2",
                    "5": "var2"
                },
                "param_1": {
                    "1": "param",
                    "2": "status",
                    "4": "parameters",
                    "8": "input_array"
                },
                "param_1[1]": {
                    "1": "system_parameters[1]"
                },
                "param_1[2]": {
                    "1": "system_parameters[2]"
                },
                "param_1[3]": {
                    "1": "params_value3"
                },
                "param_1[4]": {
                    "1": "system_parameters[4]"
                },
                "param_1[7]": {
                    "1": "input_array[7]"
                },
                "param_1[8]": {
                    "1": "value_1"
                },
                "param_1[9]": {
                    "1": "system_parameters[9]"
                },
                "param_3": {
                    "1": "parameter3"
                },
                "param_8": {
                    "1": "parameter8"
                },
                "param_9": {
                    "1": "parameter9"
                },
                "uRam42420060": {
                    "1": "ram_value3"
                }
            },
            "called": [
                "FUN_0800115c",
                "FUN_08001168"
            ],
            "calling": [
                "FUN_08004514"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08001eec) */\n/* WARNING: Removing unreachable block (ram,0x08001ee8) */\n\n\nundefined4 check_and_modify_settings_08001b58(int *input_array)\n\n{\n  int temp_var1;\n  int temp_var2;\n  \n  if (*input_array << 0x1f < 0) {\n    if (((_DAT_40021004 & 0xc) == 4) ||\n       (((_DAT_40021004 & 0xc) == 8 && ((int)(_DAT_40021004 << 0xf) < 0)))) {\n      if (((int)((_DAT_40021000 >> 0x11) << 0x1f) < 0) && (system_parameters[1] == 0)) {\n        return 1;\n      }\n    }\n    else {\n      temp_var1 = system_parameters[1];\n      if (temp_var1 == 0x10000) {\nset_flag_register:\n        _DAT_40021000 = _DAT_40021000 | 0x10000;\n      }\n      else {\n        if (temp_var1 == 0) {\n          _DAT_40021000 = _DAT_40021000 & 0xfffaffff;\n          temp_var1 = get_tick();\n          while ((int)((_DAT_40021000 >> 0x11) << 0x1f) < 0) {\n            temp_var2 = get_tick();\n            if (100 < (uint)(temp_var2 - temp_var1)) {\n              return 3;\n            }\n          }\n          goto LAB_08001b64;\n        }\n        if (temp_var1 == 0x50000) {\n          _DAT_40021000 = _DAT_40021000 | 0x40000;\n          goto set_flag_register;\n        }\n        _DAT_40021000 = _DAT_40021000 & 0xfffaffff;\n      }\n      temp_var1 = get_tick();\n      while (-1 < (int)((_DAT_40021000 >> 0x11) << 0x1f)) {\n        temp_var2 = get_tick();\n        if (100 < (uint)(temp_var2 - temp_var1)) {\n          return 3;\n        }\n      }\n    }\n  }\nLAB_08001b64:\n  if (*input_array << 0x1e < 0) {\n    if (((_DAT_40021004 & 0xc) == 0) ||\n       (((_DAT_40021004 & 0xc) == 8 && (-1 < (int)(_DAT_40021004 << 0xf))))) {\n      if (((int)((_DAT_40021000 >> 1) << 0x1f) < 0) && (system_parameters[4] != 1)) {\n        return 1;\n      }\n    }\n    else {\n      variable1 = system_parameters[4];\n      if (variable1 == 0) {\n        temp_var1 = get_tick();\n        while ((int)((_DAT_40021000 >> 1) << 0x1f) < 0) {\n          temp_var2 = get_tick();\n          if (2 < (uint)(temp_var2 - temp_var1)) {\n            return 3;\n          }\n        }\n        goto LAB_08001b6c;\n      }\n      variable1 = 1;\n      temp_var1 = get_tick();\n      while (-1 < (int)((_DAT_40021000 >> 1) << 0x1f)) {\n        temp_var2 = get_tick();\n        if (2 < (uint)(temp_var2 - temp_var1)) {\n          return 3;\n        }\n      }\n    }\n    _DAT_40021000 = input_array[5] << 3 | _DAT_40021000 & 0xffffff07;\n  }\nLAB_08001b6c:\n  if (*input_array << 0x1c < 0) {\n    variable2 = input_array[6];\n    if (variable2 == 0) {\n      temp_var1 = get_tick();\n      while ((int)((_DAT_40021024 >> 1) << 0x1f) < 0) {\n        temp_var2 = get_tick();\n        if (2 < (uint)(temp_var2 - temp_var1)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      variable2 = 1;\n      temp_var1 = get_tick();\n      while (-1 < (int)((_DAT_40021024 >> 1) << 0x1f)) {\n        temp_var2 = get_tick();\n        if (2 < (uint)(temp_var2 - temp_var1)) {\n          return 3;\n        }\n      }\n      delay_execution(1);\n    }\n  }\n  if (-1 < *input_array << 0x1d) goto LAB_08001bc2;\n  _DAT_4002101c = _DAT_4002101c | 0x10000000;\n  _DAT_40007000 = _DAT_40007000 | 0x100;\n  temp_var1 = get_tick();\n  while (-1 < (int)(_DAT_40007000 << 0x17)) {\n    temp_var2 = get_tick();\n    if (100 < (uint)(temp_var2 - temp_var1)) {\n      return 3;\n    }\n  }\n  temp_var1 = params_value3;\n  if (temp_var1 == 1) {\nLAB_08001e1a:\n    _DAT_40021020 = _DAT_40021020 | 1;\n  }\n  else {\n    if (temp_var1 == 0) {\n      _DAT_40021020 = _DAT_40021020 & 0xfffffffa;\n      temp_var1 = get_tick();\n      while ((int)((_DAT_40021020 >> 1) << 0x1f) < 0) {\n        temp_var2 = get_tick();\n        if (5000 < (uint)(temp_var2 - temp_var1)) {\n          return 3;\n        }\n      }\n      goto LAB_08001bc2;\n    }\n    if (temp_var1 == 5) {\n      _DAT_40021020 = _DAT_40021020 | 4;\n      goto LAB_08001e1a;\n    }\n    _DAT_40021020 = _DAT_40021020 & 0xfffffffa;\n  }\n  temp_var1 = get_tick();\n  while (-1 < (int)((_DAT_40021020 >> 1) << 0x1f)) {\n    temp_var2 = get_tick();\n    if (5000 < (uint)(temp_var2 - temp_var1)) {\n      return 3;\n    }\n  }\nLAB_08001bc2:\n  if (params_value7 == 0) {\n    return 0;\n  }\n  if ((_DAT_40021004 & 0xc) != 8) {\n    if (params_value7 != 2) {\n      ram_value3 = 0;\n      temp_var1 = get_tick();\n      do {\n        if (-1 < (int)((_DAT_40021000 >> 0x19) << 0x1f)) {\n          return 0;\n        }\n        temp_var2 = get_tick();\n      } while ((uint)(temp_var2 - temp_var1) < 3);\n      return 3;\n    }\n    ram_value3 = 0;\n    temp_var1 = get_tick();\n    do {\n      if (-1 < (int)((_DAT_40021000 >> 0x19) << 0x1f)) {\n        if (params_value8 == 0x10000) {\n          _DAT_40021004 = _DAT_40021004 & 0xfffdffff | params_value2;\n        }\n        _DAT_40021004 = params_value8 | params_value9 | _DAT_40021004 & 0xffc2ffff;\n        ram_value3 = 1;\n        temp_var1 = get_tick();\n        do {\n          if ((int)((_DAT_40021000 >> 0x19) << 0x1f) < 0) {\n            return 0;\n          }\n          temp_var2 = get_tick();\n        } while ((uint)(temp_var2 - temp_var1) < 3);\n        return 3;\n      }\n      temp_var2 = get_tick();\n    } while ((uint)(temp_var2 - temp_var1) < 3);\n    return 3;\n  }\n  return 1;\n}\n\n",
            "current_name": "check_and_modify_settings_08001b58",
            "entrypoint": "0x08001b58",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08001b58": "check_and_modify_settings_08001b58",
                "HAL_Delay": "delay_execution",
                "HAL_GetTick": "get_tick",
                "LAB_08001c1e": "set_flag_register",
                "iRam42420000": "variable1",
                "iRam42420480": "variable2",
                "iVar1": "temp_var1",
                "iVar2": "temp_var2",
                "param_1": "input_array",
                "param_1[1]": "system_parameters[1]",
                "param_1[2]": "params_value2",
                "param_1[3]": "params_value3",
                "param_1[4]": "system_parameters[4]",
                "param_1[7]": "params_value7",
                "param_1[8]": "params_value8",
                "param_1[9]": "params_value9",
                "uRam42420060": "ram_value3"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002008": {
            "additional_data": {
                "FUN_08002008": {
                    "1": "calculate_sensor_frequency",
                    "2": "calculate_mpu9250_clock",
                    "3": "calculate_mpu9250_clock_speed",
                    "4": "calculate_clock_frequency",
                    "5": "calculate_clock_speed"
                },
                "_DAT_40021004": {
                    "2": "register_value"
                },
                "iVar2": {
                    "1": "final_frequency",
                    "6": "clock_speed",
                    "8": "result"
                },
                "local_20": {
                    "1": "sensor_params",
                    "2": "source_array",
                    "3": "config_array",
                    "5": "register_values",
                    "6": "data_array"
                },
                "local_24": {
                    "1": "input_values",
                    "3": "local_array"
                },
                "puVar4": {
                    "1": "file_ptr",
                    "2": "src_pointer",
                    "8": "data_pointer"
                },
                "puVar6": {
                    "1": "table_pointer",
                    "2": "destination_pointer",
                    "3": "output_pointer"
                },
                "uVar1": {
                    "1": "current_value",
                    "2": "temp_var1",
                    "6": "first_value"
                },
                "uVar3": {
                    "1": "clock_config_value2",
                    "2": "value2",
                    "6": "second_value"
                },
                "uVar5": {
                    "1": "mpu_clk_divisor",
                    "2": "clock_speed",
                    "3": "frequency_divider",
                    "4": "divider"
                }
            },
            "called": [],
            "calling": [
                "FUN_0800209c"
            ],
            "code": "\n\n\nint calculate_clock_speed_08002008(void)\n\n{\n  undefined4 first_value;\n  int result;\n  undefined4 second_value;\n  undefined4 *data_pointer;\n  uint divider;\n  undefined4 *output_pointer;\n  byte byte_array [4];\n  undefined4 data_array [5];\n  \n  data_pointer = &DAT_080072f0;\n  output_pointer = data_array;\n  do {\n    first_value = *data_pointer;\n    second_value = data_pointer[1];\n    data_pointer = data_pointer + 2;\n    *output_pointer = first_value;\n    output_pointer[1] = second_value;\n    output_pointer = output_pointer + 2;\n  } while (data_pointer != (undefined4 *)\"../Src/MPU9250.c\");\n  byte_array[0] = 1;\n  byte_array[1] = 2;\n  if ((_DAT_40021004 & 0xc) == 8) {\n    if ((int)(_DAT_40021004 << 0xf) < 0) {\n      divider = 8000000 / byte_array[(_DAT_40021004 & 0x20000) >> 0x11];\n    }\n    else {\n      divider = 4000000;\n    }\n    result = divider * *(byte *)((int)data_array + ((_DAT_40021004 & 0x3c0000) >> 0x12));\n  }\n  else {\n    result = 8000000;\n  }\n  return result;\n}\n\n",
            "current_name": "calculate_clock_speed_08002008",
            "entrypoint": "0x08002008",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002008": "calculate_clock_speed_08002008",
                "iVar2": "result",
                "local_20": "data_array",
                "local_24": "byte_array",
                "puVar4": "data_pointer",
                "puVar6": "output_pointer",
                "uVar1": "first_value",
                "uVar3": "second_value",
                "uVar5": "divider"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800209c": {
            "additional_data": {
                "D": {
                    "1": "hal_init_tick"
                },
                "DAT_200001bc": {
                    "1": "sys_clock_freq_divisor",
                    "2": "sys_tick_frequency"
                },
                "DAT_40021000": {
                    "1": "sysclock_multiplier_register"
                },
                "DAT_40021004": {
                    "1": "system_config"
                },
                "DAT_40022000": {
                    "1": "system_configuration"
                },
                "FUN_08001104": {
                    "1": "function_x"
                },
                "FUN_0800115c": {
                    "1": "function_z"
                },
                "FUN_08002008": {
                    "1": "function_y"
                },
                "FUN_0800209c": {
                    "1": "configure_clock",
                    "16": "initialize_system",
                    "4": "initialize_clock",
                    "9": "initialize_system_clock"
                },
                "HAL_GetTick": {
                    "1": "get_tick",
                    "9": "get_current_tick"
                },
                "HAL_GetTick()": {
                    "1": "get_tick_count"
                },
                "HAL_InitTick": {
                    "1": "initialize_sys_tick",
                    "9": "initialize_tick"
                },
                "HAL_InitTick(0)": {
                    "1": "initialize_tick"
                },
                "HAL_RCC_GetSysClockFreq": {
                    "5": "get_system_clock_frequency"
                },
                "HAL_RCC_GetSysClockFreq()": {
                    "1": "get_sys_clock_frequency"
                },
                "LZCOUNT": {
                    "1": "leading_zeros_count",
                    "8": "leading_zero_count"
                },
                "LZCOUNT()": {
                    "1": "leading_zero_count"
                },
                "PTR_FUN_08001104": {
                    "1": "sub_function1"
                },
                "PTR_FUN_08002008": {
                    "1": "sub_function2"
                },
                "_DAT_40021004": {
                    "1": "system_control"
                },
                "_DAT_40022000": {
                    "1": "system_configuration"
                },
                "byte": {
                    "1": "byte_value"
                },
                "cVar1": {
                    "1": "is_clock_low",
                    "2": "condition_var1",
                    "3": "flag1"
                },
                "cVar2": {
                    "1": "use_case2",
                    "2": "condition_var2",
                    "3": "flag2"
                },
                "iVar3": {
                    "1": "initial_tick_value",
                    "2": "tick_value1",
                    "5": "tick_count"
                },
                "iVar5": {
                    "1": "tick_value2",
                    "13": "current_tick",
                    "2": "current_tick_count",
                    "7": "tick_value"
                },
                "param_1": {
                    "1": "config_data",
                    "2": "clock_params",
                    "3": "flags",
                    "4": "config",
                    "5": "clock_config",
                    "6": "config_params"
                },
                "param_2": {
                    "1": "param",
                    "12": "clock_source",
                    "2": "param_value",
                    "3": "num_params",
                    "7": "config_size"
                },
                "uVar4": {
                    "1": "option_value",
                    "2": "temp_var2",
                    "5": "config_value"
                },
                "uVar6": {
                    "1": "shifted_config_value",
                    "2": "shifted_clock",
                    "7": "shifted_value"
                }
            },
            "called": [
                "FUN_08001104",
                "FUN_08002008",
                "FUN_0800115c"
            ],
            "calling": [
                "FUN_08004514"
            ],
            "code": "\n\n\nundefined4 initialize_system_0800209c(uint *config_params,uint clock_source)\n\n{\n  char flag1;\n  char flag2;\n  int tick_count;\n  uint config_value;\n  int current_tick;\n  uint shifted_value;\n  \n  if ((clock_source <= (_DAT_40022000 & 7)) ||\n     (_DAT_40022000 = _DAT_40022000 & 0xfffffff8 | clock_source, clock_source == (clock_source & 7))) {\n    if ((int)(*config_params << 0x1e) < 0) {\n      _DAT_40021004 = _DAT_40021004 & 0xffffff0f | config_params[2];\n    }\n    tick_count = *config_params << 0x1f;\n    if (-1 < tick_count) {\nLAB_080020ba:\n      if ((clock_source < (_DAT_40022000 & 7)) &&\n         (_DAT_40022000 = _DAT_40022000 & 0xfffffff8 | clock_source, clock_source != (clock_source & 7))) {\n        return 1;\n      }\n      if ((*config_params & 4) != 0) {\n        _DAT_40021004 = _DAT_40021004 & 0xfffff8ff | config_params[3];\n      }\n      if ((int)(*config_params << 0x1c) < 0) {\n        _DAT_40021004 = _DAT_40021004 & 0xffffc7ff | config_params[4] << 3;\n      }\n      config_value = get_sys_clock_frequency;\n      DAT_200001bc = config_value >> (&DAT_08007361)[(_DAT_40021004 & 0xf0) >> 4];\n      initialize_tick;\n      return 0;\n    }\n    config_value = config_params[1];\n    if (config_value == 1) {\n      flag2 = '\\x01';\n      flag1 = '\\0';\n    }\n    else {\n      shifted_value = _DAT_40021000;\n      if (config_value == 2) goto LAB_08002176;\n      flag2 = '\\0';\n      flag1 = '\\x01';\n    }\n    shifted_value = (_DAT_40021000 >>\n            (leading_zero_count((uint)(byte_value)(flag1 << 6) << 0x18 | (uint)(byte_value)(flag2 << 6) << 8) & 0x1fU)) <<\n            0x1f;\n    if ((int)shifted_value < 0) {\nLAB_08002176:\n      _DAT_40021004 = _DAT_40021004 & 0xfffffffc | config_value;\n      tick_count = get_current_tick(tick_count,shifted_value);\n      if (config_params[1] == 1) {\n        do {\n          if ((_DAT_40021004 & 0xc) == 4) goto LAB_080020ba;\n          current_tick = get_tick_count;\n        } while ((uint)(current_tick - tick_count) < 0x1389);\n      }\n      else if (config_params[1] == 2) {\n        do {\n          if ((_DAT_40021004 & 0xc) == 8) goto LAB_080020ba;\n          current_tick = get_tick_count;\n        } while ((uint)(current_tick - tick_count) < 0x1389);\n      }\n      else {\n        do {\n          if ((_DAT_40021004 & 0xc) == 0) goto LAB_080020ba;\n          current_tick = get_tick_count;\n        } while ((uint)(current_tick - tick_count) < 0x1389);\n      }\n      return 3;\n    }\n  }\n  return 1;\n}\n\n",
            "current_name": "initialize_system_0800209c",
            "entrypoint": "0x0800209c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800209c": "initialize_system_0800209c",
                "HAL_GetTick": "get_current_tick",
                "HAL_GetTick()": "get_tick_count",
                "HAL_InitTick": "initialize_tick",
                "HAL_InitTick(0)": "initialize_tick",
                "HAL_RCC_GetSysClockFreq": "get_system_clock_frequency",
                "HAL_RCC_GetSysClockFreq()": "get_sys_clock_frequency",
                "LZCOUNT": "leading_zero_count",
                "byte": "byte_value",
                "cVar1": "flag1",
                "cVar2": "flag2",
                "iVar3": "tick_count",
                "iVar5": "current_tick",
                "param_1": "config_params",
                "param_2": "clock_source",
                "uVar4": "config_value",
                "uVar6": "shifted_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002214": {
            "additional_data": {
                "DAT_200001bc": {
                    "1": "retrieved_data",
                    "2": "data_value",
                    "9": "data"
                },
                "FUN_08002214": {
                    "1": "get_data_constant",
                    "11": "get_data",
                    "15": "get_data_value",
                    "2": "get_dat_value"
                },
                "var_200001bc": {
                    "1": "data_value"
                }
            },
            "called": [],
            "calling": [
                "FUN_08001104",
                "FUN_08004514"
            ],
            "code": "\nundefined4 get_data_value_08002214(void)\n\n{\n  return DAT_200001bc;\n}\n\n",
            "current_name": "get_data_value_08002214",
            "entrypoint": "0x08002214",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002214": "get_data_value_08002214"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002220": {
            "additional_data": {
                "&DAT_08007371": {
                    "1": "shifted_data_array",
                    "2": "data_pointer",
                    "3": "shift_table"
                },
                "DAT_08007371": {
                    "1": "bit_shift_table",
                    "2": "shift_table"
                },
                "DAT_200001bc": {
                    "1": "input_data",
                    "2": "bit_data",
                    "6": "data",
                    "8": "data_value"
                },
                "FUN_08002220": {
                    "1": "extracted_data_from_binary",
                    "2": "extract_bits",
                    "5": "get_shifted_value"
                },
                "[(_DAT_40021004 & 0x700) >> 8]": {
                    "1": "extracted_index"
                },
                "_DAT_08007371": {
                    "1": "data_array"
                },
                "_DAT_40021004": {
                    "1": "memory_address",
                    "2": "mask",
                    "3": "input_data",
                    "6": "input_value"
                },
                "array": {
                    "1": "lookup_table"
                },
                "configRegister": {
                    "1": "get_config_register"
                },
                "data": {
                    "1": "value"
                },
                "dataPointer": {
                    "1": "get_data_pointer"
                },
                "data_array": {
                    "1": "data_array"
                },
                "data_pointer": {
                    "1": "data_pointer"
                },
                "extractedData": {
                    "1": "get_extracted_data"
                },
                "extractedValueFromBinary": {
                    "1": "get_extracted_value"
                },
                "inputVariable": {
                    "1": "input"
                },
                "load_shifted_data": {
                    "1": "load_shifted_data"
                }
            },
            "called": [],
            "calling": [
                "FUN_08001754",
                "FUN_080025e8"
            ],
            "code": "\n\n\nuint get_shifted_value_08002220(void)\n\n{\n  return DAT_200001bc >> (&DAT_08007371)[(_DAT_40021004 & 0x700) >> 8];\n}\n\n",
            "current_name": "get_shifted_value_08002220",
            "entrypoint": "0x08002220",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002220": "get_shifted_value_08002220"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002250": {
            "additional_data": {
                "&DAT_08007371": {
                    "1": "bit_mask",
                    "2": "array_ptr",
                    "3": "shift_array"
                },
                "0x3800": {
                    "1": "bitmask"
                },
                "0xb": {
                    "1": "bit_shift"
                },
                "DAT_08007371": {
                    "1": "bitmask_array",
                    "2": "shift_table"
                },
                "DAT_200001bc": {
                    "1": "data_offset",
                    "11": "data_value",
                    "2": "original_value",
                    "8": "data"
                },
                "FUN_08002250": {
                    "1": "shifted_data_value",
                    "10": "get_shifted_value",
                    "2": "find_shifted_value",
                    "3": "extract_bit_from_data"
                },
                "_DAT_08007371": {
                    "1": "data2"
                },
                "_DAT_200001bc": {
                    "1": "shift_amount"
                },
                "_DAT_40021004": {
                    "1": "word",
                    "2": "masked_value",
                    "3": "input_data",
                    "4": "input_value"
                },
                "dataArray": {
                    "1": "shifted_array"
                },
                "dataOffset": {
                    "1": "shift_amount"
                },
                "get_shifted_value": {
                    "1": "shifted_value"
                },
                "mask": {
                    "1": "bit_mask"
                }
            },
            "called": [],
            "calling": [
                "FUN_080025e8"
            ],
            "code": "\n\n\nuint get_shifted_value_08002250(void)\n\n{\n  return DAT_200001bc >> (&DAT_08007371)[(_DAT_40021004 & 0x3800) >> 0xb];\n}\n\n",
            "current_name": "get_shifted_value_08002250",
            "entrypoint": "0x08002250",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002250": "get_shifted_value_08002250"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002280": {
            "additional_data": {
                "0x18": {
                    "1": "setting2"
                },
                "0x20": {
                    "1": "setting1"
                },
                "0x34": {
                    "1": "setting3"
                },
                "0x40012c00": {
                    "1": "special_address"
                },
                "FUN_08002280": {
                    "1": "set_bitwise_values",
                    "2": "update_flags_and_values",
                    "3": "update_values",
                    "5": "update_params",
                    "7": "update_parameters"
                },
                "param_1": {
                    "1": "param_addr",
                    "2": "data_address",
                    "3": "register_address",
                    "9": "base_address"
                },
                "param_2": {
                    "1": "input_values",
                    "2": "config_data",
                    "6": "param_array",
                    "8": "values"
                },
                "uVar1": {
                    "1": "updated_register1",
                    "17": "updated_value1",
                    "6": "updated_var1"
                },
                "uVar2": {
                    "1": "original_value",
                    "17": "updated_value2",
                    "6": "updated_var2"
                },
                "uVar3": {
                    "1": "updated_value_3",
                    "17": "updated_value3",
                    "6": "updated_var3"
                }
            },
            "called": [],
            "calling": [
                "FUN_0800245c"
            ],
            "code": "\nvoid update_parameters_08002280(int base_address,uint *values)\n\n{\n  uint updated_value1;\n  uint updated_value2;\n  uint updated_value3;\n  \n  *(uint *)(base_address + 0x20) = *(uint *)(base_address + 0x20) & 0xfffffffe;\n  updated_value2 = *(uint *)(base_address + 4);\n  updated_value3 = *values;\n  updated_value1 = *(uint *)(base_address + 0x20) & 0xfffffffd | values[2];\n  if (base_address == 0x40012c00) {\n    updated_value1 = (updated_value1 & 0xfffffff7 | values[3]) & 0xfffffffb;\n    updated_value2 = updated_value2 & 0xfffffcff | values[5] | values[6];\n  }\n  *(uint *)(base_address + 4) = updated_value2;\n  *(uint *)(base_address + 0x18) = *(uint *)(base_address + 0x18) & 0xffffff8c | updated_value3;\n  *(uint *)(base_address + 0x34) = values[1];\n  *(uint *)(base_address + 0x20) = updated_value1;\n  return;\n}\n\n",
            "current_name": "update_parameters_08002280",
            "entrypoint": "0x08002280",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002280": "update_parameters_08002280",
                "param_1": "base_address",
                "param_2": "values",
                "uVar1": "updated_value1",
                "uVar2": "updated_value2",
                "uVar3": "updated_value3"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080022d0": {
            "additional_data": {
                "0x1c": {
                    "1": "field2_offset"
                },
                "0x20": {
                    "1": "field1_offset"
                },
                "0x3c": {
                    "1": "field3_offset"
                },
                "0x40012c00": {
                    "1": "special_address"
                },
                "0xffffcfff": {
                    "1": "bit_mask5"
                },
                "0xfffff7ff": {
                    "1": "bit_mask3"
                },
                "0xfffffbff": {
                    "1": "bit_mask4"
                },
                "0xfffffdff": {
                    "1": "bit_mask2"
                },
                "0xfffffeff": {
                    "1": "bit_mask1"
                },
                "5": {
                    "1": "constant1"
                },
                "6": {
                    "1": "constant2"
                },
                "<< 4": {
                    "1": "bit_shift4"
                },
                "<< 8": {
                    "1": "bit_shift8"
                },
                "FUN_080022d0": {
                    "1": "update_device_info",
                    "10": "update_parameters",
                    "2": "update_param",
                    "3": "update_params",
                    "7": "update_data"
                },
                "param_1": {
                    "1": "data_struct_addr",
                    "10": "base_address",
                    "2": "param_addr",
                    "4": "data_address"
                },
                "param_2": {
                    "1": "new_data",
                    "2": "config_data",
                    "3": "param_values",
                    "5": "parameters"
                },
                "uVar1": {
                    "1": "updated_bitmask1",
                    "16": "updated_value1",
                    "2": "modified_value1",
                    "7": "updated_var1"
                },
                "uVar2": {
                    "1": "original_value",
                    "15": "updated_value2",
                    "2": "modified_value2",
                    "8": "updated_var2"
                },
                "uVar3": {
                    "1": "update_value3",
                    "13": "updated_value3",
                    "2": "new_value",
                    "8": "updated_var3"
                }
            },
            "called": [],
            "calling": [
                "FUN_0800245c"
            ],
            "code": "\nvoid update_parameters_080022d0(int base_address,uint *param_array)\n\n{\n  uint updated_value1;\n  uint updated_value2;\n  uint updated_value3;\n  \n  *(uint *)(base_address + 0x20) = *(uint *)(base_address + 0x20) & 0xfffffeff;\n  updated_value2 = *(uint *)(base_address + 4);\n  updated_value3 = *param_array;\n  updated_value1 = *(uint *)(base_address + 0x20) & 0xfffffdff | param_array[2] << 8;\n  if (base_address == 0x40012c00) {\n    updated_value1 = (updated_value1 & 0xfffff7ff | param_array[3] << 8) & 0xfffffbff;\n    updated_value2 = updated_value2 & 0xffffcfff | (param_array[5] | param_array[6]) << 4;\n  }\n  *(uint *)(base_address + 4) = updated_value2;\n  *(uint *)(base_address + 0x1c) = *(uint *)(base_address + 0x1c) & 0xffffff8c | updated_value3;\n  *(uint *)(base_address + 0x3c) = param_array[1];\n  *(uint *)(base_address + 0x20) = updated_value1;\n  return;\n}\n\n",
            "current_name": "update_parameters_080022d0",
            "entrypoint": "0x080022d0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080022d0": "update_parameters_080022d0",
                "param_1": "base_address",
                "param_2": "param_array",
                "uVar1": "updated_value1",
                "uVar2": "updated_value2",
                "uVar3": "updated_value3"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002324": {
            "additional_data": {
                "*(int *)(param_1 + 0x40)": {
                    "1": "param2_value2"
                },
                "*(uint *)(param_1 + 0x1c)": {
                    "1": "param1_value3"
                },
                "*(uint *)(param_1 + 0x20)": {
                    "1": "param1_value2"
                },
                "*(uint *)(param_1 + 4)": {
                    "1": "param2_value"
                },
                "0x40012c00": {
                    "1": "default_base_address",
                    "2": "default_address"
                },
                "0x40012c00 << 6": {
                    "1": "shifted_default_address"
                },
                "0xffff8cff": {
                    "1": "param_mask3"
                },
                "0xffffbfff": {
                    "1": "base_address_mask2"
                },
                "0xffffdfff": {
                    "1": "param_mask4"
                },
                "0xffffefff": {
                    "1": "base_address_mask"
                },
                "FUN_08002324": {
                    "1": "set_flags_and_values",
                    "11": "update_parameters",
                    "2": "update_configuration",
                    "4": "update_data",
                    "6": "update_params"
                },
                "configAddress + 0x1c": {
                    "1": "other_config"
                },
                "configAddress + 0x20": {
                    "1": "config"
                },
                "configAddress + 0x40": {
                    "1": "param_value"
                },
                "configAddress + 4": {
                    "1": "flags"
                },
                "configData[1]": {
                    "1": "param2_value"
                },
                "configData[2]": {
                    "1": "shift_value"
                },
                "configData[5]": {
                    "1": "default_value"
                },
                "iVar2": {
                    "1": "input_value1",
                    "2": "param1_value",
                    "3": "value1",
                    "4": "param2_value",
                    "5": "value2"
                },
                "iVar2 << 8": {
                    "1": "param_2_0_shifted"
                },
                "iVar3": {
                    "1": "param_value3",
                    "2": "param2_value2",
                    "3": "value2",
                    "4": "param3_value",
                    "5": "value3"
                },
                "iVar3 << 0xc": {
                    "1": "param_2_2_shifted"
                },
                "iVar4": {
                    "1": "default_constant",
                    "2": "default_base",
                    "4": "default_var",
                    "6": "constant_value"
                },
                "param_1": {
                    "1": "param_1",
                    "13": "base_address",
                    "2": "config_address",
                    "3": "parameter1",
                    "4": "data_address"
                },
                "param_1 + 0x1c": {
                    "1": "base_address_flags3",
                    "2": "address3"
                },
                "param_1 + 0x20": {
                    "1": "parameter1_offset",
                    "2": "address1"
                },
                "param_1 + 0x4": {
                    "1": "address_value2"
                },
                "param_1 + 0x40": {
                    "1": "value_offset",
                    "2": "address4"
                },
                "param_1 + 4": {
                    "1": "base_address_flags2"
                },
                "param_1+0x1c": {
                    "1": "address_offset2"
                },
                "param_1+0x20": {
                    "1": "param1_val1"
                },
                "param_1+0x40": {
                    "1": "param1_val4"
                },
                "param_1+4": {
                    "1": "param1_val2"
                },
                "param_2": {
                    "1": "config_data",
                    "2": "data_values",
                    "3": "param_array",
                    "4": "params",
                    "5": "params_array",
                    "9": "parameters"
                },
                "param_2[1]": {
                    "1": "param_2_1"
                },
                "param_2[2]": {
                    "1": "parameter2_value"
                },
                "param_2[5]": {
                    "1": "params_array[5]"
                },
                "uVar1": {
                    "1": "current_value",
                    "2": "updated_value1",
                    "4": "old_value",
                    "7": "value1"
                }
            },
            "called": [],
            "calling": [
                "FUN_0800245c"
            ],
            "code": "\nvoid update_parameters_08002324(int base_address,int *parameters)\n\n{\n  uint value1;\n  int value2;\n  int value3;\n  int constant_value;\n  \n  *(uint *)(base_address + 0x20) = *(uint *)(base_address + 0x20) & 0xffffefff;\n  value1 = *(uint *)(base_address + 4);\n  value2 = *parameters;\n  value3 = parameter2_value;\n  constant_value = 0x40012c00;\n  if (base_address == 0x40012c00) {\n    constant_value = param_2_5;\n    value1 = value1 & 0xffffbfff;\n  }\n  if (base_address == 0x40012c00) {\n    value1 = value1 | constant_value << 6;\n  }\n  *(uint *)(base_address + 4) = value1;\n  *(uint *)(base_address + 0x1c) = *(uint *)(base_address + 0x1c) & 0xffff8cff | value2 << 8;\n  *(int *)(base_address + 0x40) = param_2_1;\n  *(uint *)(base_address + 0x20) = *(uint *)(base_address + 0x20) & 0xffffdfff | value3 << 0xc;\n  return;\n}\n\n",
            "current_name": "update_parameters_08002324",
            "entrypoint": "0x08002324",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002324": "update_parameters_08002324",
                "iVar2": "value2",
                "iVar3": "value3",
                "iVar4": "constant_value",
                "param_1": "base_address",
                "param_2": "parameters",
                "param_2[1]": "param_2_1",
                "param_2[2]": "parameter2_value",
                "param_2[5]": "param_2_5",
                "uVar1": "value1"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002368": {
            "additional_data": {
                "*param_1": {
                    "1": "addressed_value"
                },
                "FUN_08002368": {
                    "1": "update_memory_values",
                    "10": "update_memory",
                    "2": "update_data",
                    "3": "update_registers",
                    "4": "update_params",
                    "5": "update_parameters"
                },
                "param_1": {
                    "1": "memory1",
                    "2": "memory_pointer",
                    "4": "input_params",
                    "5": "memory_address"
                },
                "param_2": {
                    "1": "new_data",
                    "2": "param_array2",
                    "3": "data",
                    "5": "new_params"
                },
                "param_2[1]": {
                    "1": "data_value1"
                },
                "param_2[2]": {
                    "1": "data_value3"
                },
                "param_2[3]": {
                    "1": "data_value2"
                },
                "param_2[4]": {
                    "1": "data_value4"
                },
                "uVar1": {
                    "1": "modified_var1",
                    "21": "updated_value",
                    "3": "new_value"
                }
            },
            "called": [],
            "calling": [
                "FUN_080023d0"
            ],
            "code": "\nvoid update_memory_08002368(uint *memory_address,uint *new_params)\n\n{\n  uint updated_value;\n  \n  updated_value = *memory_address;\n  if (((((memory_address == (uint *)0x40012c00) || (memory_address == (uint *)0x40000000)) ||\n       (memory_address == (uint *)0x40000400)) || (memory_address == (uint *)0x40000800)) &&\n     (((updated_value = updated_value & 0xffffff8f | data_value1, memory_address == (uint *)0x40012c00 ||\n       (memory_address == (uint *)0x40000000)) ||\n      ((memory_address == (uint *)0x40000400 || (memory_address == (uint *)0x40000800)))))) {\n    updated_value = updated_value & 0xfffffcff | data_value2;\n  }\n  *memory_address = updated_value;\n  memory_address[0xb] = data_value3;\n  memory_address[10] = *new_params;\n  updated_value = 0x40012c00;\n  if (memory_address == (uint *)0x40012c00) {\n    updated_value = data_value4;\n  }\n  if (memory_address == (uint *)0x40012c00) {\n    memory_address[0xc] = updated_value;\n  }\n  memory_address[5] = 1;\n  return;\n}\n\n",
            "current_name": "update_memory_08002368",
            "entrypoint": "0x08002368",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002368": "update_memory_08002368",
                "param_1": "memory_address",
                "param_2": "new_params",
                "param_2[1]": "data_value1",
                "param_2[2]": "data_value3",
                "param_2[3]": "data_value2",
                "param_2[4]": "data_value4",
                "uVar1": "updated_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080023d0": {
            "additional_data": {
                "(*(char *)((int)param_1 + 0x39) == '\\0')": {
                    "1": "is_timer_config_valid(timer_config)"
                },
                "(int)param_1": {
                    "1": "config_ptr_int"
                },
                "(undefined *)(param_1 + 0xe)": {
                    "1": "initialized_flag"
                },
                "*(char *)((int)param_1 + 0x39)": {
                    "1": "timer_status",
                    "2": "pwm_initialized"
                },
                "*(undefined *)((int)param_1 + 0x39)": {
                    "1": "pwm_status",
                    "2": "config_status"
                },
                "*(undefined *)(param_1 + 0xe)": {
                    "1": "initialized_flag",
                    "2": "timer_initialized"
                },
                "*config_ptr": {
                    "1": "config_ptr->tim_base"
                },
                "*param_1": {
                    "1": "timer_instance"
                },
                "0": {
                    "1": "success"
                },
                "2": {
                    "1": "timer_status_new"
                },
                "FUN_08002368": {
                    "1": "set_pwm_base_config",
                    "2": "set_timer_config",
                    "4": "configure_tim_base"
                },
                "FUN_080023d0": {
                    "1": "initialize_pwm_timers",
                    "19": "initialize_pwm",
                    "2": "initialize_tim_pwm"
                },
                "FUN_08004d8c": {
                    "1": "initialize_tim_base",
                    "2": "initialize_gpio",
                    "3": "initialize_timer"
                },
                "HAL_TIM_PWM_MspInit": {
                    "1": "initialize_timer",
                    "2": "initialize_pwm_msp",
                    "4": "initialize_pwm_gpio",
                    "5": "initialize_pwm_peripherals"
                },
                "HAL_TIM_PWM_MspInit()": {
                    "1": "initialize_pwm_hardware"
                },
                "TIM_Base_SetConfig": {
                    "1": "configure_pwm",
                    "2": "configure_timer_base",
                    "4": "set_timer_config"
                },
                "TIM_Base_SetConfig(*param_1,param_1 + 1)": {
                    "1": "set_tim_base_config"
                },
                "config_ptr + 0xe": {
                    "1": "config_ptr->pwm_init_value"
                },
                "config_ptr + 1": {
                    "1": "config_ptr->tim_config"
                },
                "param_1": {
                    "1": "config_data",
                    "11": "config",
                    "2": "timer_ptr",
                    "4": "config_ptr"
                },
                "param_1 + 1": {
                    "1": "config_struct_pointer"
                },
                "param_1+0xe": {
                    "1": "config->initialized"
                },
                "param_1->+0x39": {
                    "1": "config_ptr->initialized"
                },
                "param_1[0]": {
                    "1": "tim_handle"
                },
                "param_1[1]": {
                    "1": "tim_config"
                },
                "param_2": {
                    "1": "tim_config",
                    "3": "timer_config"
                },
                "return 0": {
                    "1": "return_success",
                    "2": "success"
                },
                "return 1": {
                    "1": "return_failure",
                    "2": "failure"
                }
            },
            "called": [
                "FUN_08002368",
                "FUN_08004d8c"
            ],
            "calling": [
                "FUN_0800458c"
            ],
            "code": "\nundefined4 initialize_pwm_080023d0(undefined4 *config)\n\n{\n  if (config != (undefined4 *)0x0) {\n    if (*(char *)(config_ptr_int + 0x39) == '\\0') {\n      *(undefined *)(config + 0xe) = 0;\n      configure_tim_msp;\n    }\n    *(undefined *)(config_ptr_int + 0x39) = 2;\n    set_timer_config(*config,config + 1);\n    *(undefined *)(config_ptr_int + 0x39) = 1;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "current_name": "initialize_pwm_080023d0",
            "entrypoint": "0x080023d0",
            "imported": false,
            "improved": true,
            "renaming": {
                "(int)param_1": "config_ptr_int",
                "FUN_080023d0": "initialize_pwm_080023d0",
                "HAL_TIM_PWM_MspInit": "initialize_pwm_peripherals",
                "HAL_TIM_PWM_MspInit()": "configure_tim_msp",
                "TIM_Base_SetConfig": "set_timer_config",
                "param_1": "config"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002404": {
            "additional_data": {
                "*(int *)(param_1 + 0x38)": {
                    "1": "param_value3"
                },
                "*(uint *)(param_1 + 0x18)": {
                    "1": "variable2"
                },
                "*(uint *)(param_1 + 0x20)": {
                    "1": "settings_flag1",
                    "2": "flags"
                },
                "*(uint *)(param_1 + 0x38)": {
                    "1": "param_var_d"
                },
                "*(uint *)(param_1 + 0x4)": {
                    "1": "original_val"
                },
                "*(uint *)(param_1 + 4)": {
                    "1": "register2"
                },
                "*param_2": {
                    "1": "parameters[0]"
                },
                "0x18": {
                    "1": "control"
                },
                "0x20": {
                    "1": "flags"
                },
                "0x38": {
                    "1": "offset_5"
                },
                "0x4": {
                    "1": "offset_2"
                },
                "0x40012c00": {
                    "1": "constant_value"
                },
                "0xffff8cff": {
                    "1": "mask_2"
                },
                "0xfffff3ff": {
                    "1": "bit_mask4"
                },
                "0xffffff7f": {
                    "1": "bit_mask3"
                },
                "0xffffffdf": {
                    "1": "bit_mask2"
                },
                "0xffffffef": {
                    "1": "bit_mask1"
                },
                "FUN_08002404": {
                    "1": "update_flags_and_values",
                    "10": "update_params",
                    "2": "update_settings",
                    "3": "update_configuration",
                    "4": "update_parameters"
                },
                "iVar3": {
                    "1": "updated_var3",
                    "2": "data_value",
                    "7": "input_value",
                    "8": "param_value"
                },
                "param_1": {
                    "1": "param_addr",
                    "13": "base_address",
                    "2": "config_address",
                    "5": "param_address"
                },
                "param_1 + 0x18": {
                    "1": "param_address2"
                },
                "param_1 + 0x20": {
                    "1": "param_address1"
                },
                "param_1 + 0x38": {
                    "1": "address_offset4"
                },
                "param_1 + 4": {
                    "1": "register2"
                },
                "param_1 == 0x40012c00": {
                    "1": "check_condition"
                },
                "param_2": {
                    "1": "settings_values",
                    "2": "params_array",
                    "3": "param_array",
                    "5": "parameters"
                },
                "param_2[1]": {
                    "1": "params[1]"
                },
                "param_2[2]": {
                    "1": "parameters[2]"
                },
                "param_2[3]": {
                    "1": "parameter_value3"
                },
                "param_2[5]": {
                    "1": "param_value6"
                },
                "param_2[6]": {
                    "1": "param6_value"
                },
                "uVar1": {
                    "1": "updated_val1",
                    "11": "updated_value1",
                    "2": "flags"
                },
                "uVar1 & 0xffffffbf | param_2[3] << 4": {
                    "1": "updated_value1"
                },
                "uVar2": {
                    "1": "register_value",
                    "11": "updated_value2",
                    "2": "updated_var2"
                },
                "uVar2 & 0xfffff3ff | (param_2[5] | param_2[6]) << 2": {
                    "1": "updated_value2"
                }
            },
            "called": [],
            "calling": [
                "FUN_0800245c"
            ],
            "code": "\nvoid update_params_08002404(int base_address,int *parameters)\n\n{\n  uint updated_value1;\n  uint updated_value2;\n  int param_value;\n  \n  *(uint *)(base_address + 0x20) = *(uint *)(base_address + 0x20) & 0xffffffef;\n  updated_value2 = *(uint *)(base_address + 4);\n  param_value = *parameters;\n  updated_value1 = *(uint *)(base_address + 0x20) & 0xffffffdf | params[2] << 4;\n  if (base_address == 0x40012c00) {\n    updated_value1 = (updated_value1 & 0xffffff7f | params[3] << 4) & 0xffffffbf;\n    updated_value2 = updated_value2 & 0xfffff3ff | (params[5] | params[6]) << 2;\n  }\n  *(uint *)(base_address + 4) = updated_value2;\n  *(uint *)(base_address + 0x18) = *(uint *)(base_address + 0x18) & 0xffff8cff | param_value << 8;\n  *(int *)(base_address + 0x38) = params[1];\n  *(uint *)(base_address + 0x20) = updated_value1;\n  return;\n}\n\n",
            "current_name": "update_params_08002404",
            "entrypoint": "0x08002404",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002404": "update_params_08002404",
                "iVar3": "param_value",
                "param_1": "base_address",
                "param_2": "parameters",
                "param_2[1]": "params[1]",
                "param_2[2]": "params[2]",
                "param_2[3]": "params[3]",
                "param_2[5]": "params[5]",
                "param_2[6]": "params[6]",
                "uVar1": "updated_value1",
                "uVar2": "updated_value2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800245c": {
            "additional_data": {
                "0": {
                    "1": "config_type_0"
                },
                "0xc": {
                    "1": "config_type_0_c"
                },
                "4": {
                    "1": "config_type_4"
                },
                "8": {
                    "1": "config_type_8"
                },
                "FUN_0800245c": {
                    "1": "set_timer_config",
                    "2": "configure_tim_oc",
                    "3": "configure_output_compare",
                    "5": "configure_timer_output"
                },
                "LAB_080024fa": {
                    "1": "label1"
                },
                "TIM_OC1_SetConfig": {
                    "1": "set_config_for_channel1",
                    "2": "configure_oc1"
                },
                "TIM_OC2_SetConfig": {
                    "1": "set_config_for_channel2",
                    "2": "configure_oc2"
                },
                "TIM_OC3_SetConfig": {
                    "1": "set_output_channel_config3",
                    "2": "configure_oc3"
                },
                "TIM_OC4_SetConfig": {
                    "1": "set_oc4_config",
                    "2": "configure_oc4"
                },
                "extraout_r1": {
                    "1": "result",
                    "2": "temp",
                    "3": "result1",
                    "4": "extra1",
                    "5": "temp_var1"
                },
                "extraout_r1_00": {
                    "1": "result",
                    "2": "extraout_r1_00",
                    "3": "result2",
                    "4": "extra2",
                    "5": "temp_var2",
                    "7": "temp2"
                },
                "extraout_r1_01": {
                    "1": "variable3",
                    "2": "extraout_r1_01",
                    "3": "result3",
                    "4": "extra3",
                    "5": "temp_var3",
                    "7": "temp3"
                },
                "extraout_r1_02": {
                    "1": "result",
                    "2": "extraout_r1_02",
                    "3": "result4",
                    "4": "extra4",
                    "5": "temp_var4",
                    "7": "temp4"
                },
                "iVar1": {
                    "1": "input1",
                    "2": "var1",
                    "3": "temp1",
                    "4": "temp_var1"
                },
                "iVar3": {
                    "1": "temp3",
                    "2": "temp_var2",
                    "3": "timer_instance",
                    "7": "timer"
                },
                "param_1": {
                    "1": "tim_config",
                    "16": "timer_config",
                    "2": "config_params"
                },
                "param_2": {
                    "1": "config_param1",
                    "2": "param2",
                    "27": "param_2"
                },
                "param_3": {
                    "1": "timer_output_channel",
                    "2": "mode",
                    "3": "output_channel",
                    "4": "timer_channel",
                    "5": "param_3",
                    "7": "channel"
                },
                "uVar2": {
                    "1": "var2",
                    "2": "updated_var",
                    "7": "updated_value",
                    "9": "config_value"
                }
            },
            "called": [
                "FUN_08002404",
                "FUN_080022d0",
                "FUN_08002280",
                "FUN_08002324"
            ],
            "calling": [
                "FUN_0800458c"
            ],
            "code": "\nvoid configure_timer_output_0800245c(int *timer_config,undefined4 param_2,undefined4 channel)\n\n{\n  int temp1;\n  int temp2;\n  int temp3;\n  int temp4;\n  int temp_var1;\n  uint config_value;\n  int timer;\n  \n  if (*(char *)(timer_config + 0xe) == '\\x01') {\n    return;\n  }\n  *(undefined *)((int)timer_config + 0x39) = 2;\n  *(undefined *)(timer_config + 0xe) = 1;\n  switch(channel) {\n  case 0:\n    configure_oc1(*timer_config);\n    timer = *timer_config;\n    config_value = *(uint *)(temp1 + 0x10);\n    *(uint *)(timer + 0x18) = *(uint *)(timer + 0x18) | 8;\n    *(uint *)(timer + 0x18) = *(uint *)(timer + 0x18) & 0xfffffffb;\n    config_value = *(uint *)(timer + 0x18) | config_value;\n    break;\n  default:\n    goto switchD_0800247a_caseD_1;\n  case 4:\n    configure_oc2(*timer_config);\n    timer = *timer_config;\n    temp_var1 = *(int *)(temp2 + 0x10);\n    *(uint *)(timer + 0x18) = *(uint *)(timer + 0x18) | 0x800;\n    *(uint *)(timer + 0x18) = *(uint *)(timer + 0x18) & 0xfffffbff;\n    config_value = *(uint *)(timer + 0x18) | temp_var1 << 8;\n    break;\n  case 8:\n    configure_oc3(*timer_config);\n    timer = *timer_config;\n    config_value = *(uint *)(temp3 + 0x10);\n    *(uint *)(timer + 0x1c) = *(uint *)(timer + 0x1c) | 8;\n    *(uint *)(timer + 0x1c) = *(uint *)(timer + 0x1c) & 0xfffffffb;\n    config_value = *(uint *)(timer + 0x1c) | config_value;\n    goto label1;\n  case 0xc:\n    configure_oc4(*timer_config);\n    timer = *timer_config;\n    temp_var1 = *(int *)(temp4 + 0x10);\n    *(uint *)(timer + 0x1c) = *(uint *)(timer + 0x1c) | 0x800;\n    *(uint *)(timer + 0x1c) = *(uint *)(timer + 0x1c) & 0xfffffbff;\n    config_value = *(uint *)(timer + 0x1c) | temp_var1 << 8;\nlabel1:\n    *(uint *)(timer + 0x1c) = config_value;\n    goto switchD_0800247a_caseD_1;\n  }\n  *(uint *)(timer + 0x18) = config_value;\nswitchD_0800247a_caseD_1:\n  *(undefined *)((int)timer_config + 0x39) = 1;\n  *(undefined *)(timer_config + 0xe) = 0;\n  return;\n}\n\n",
            "current_name": "configure_timer_output_0800245c",
            "entrypoint": "0x0800245c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800245c": "configure_timer_output_0800245c",
                "LAB_080024fa": "label1",
                "TIM_OC1_SetConfig": "configure_oc1",
                "TIM_OC2_SetConfig": "configure_oc2",
                "TIM_OC3_SetConfig": "configure_oc3",
                "TIM_OC4_SetConfig": "configure_oc4",
                "extraout_r1": "temp1",
                "extraout_r1_00": "temp2",
                "extraout_r1_01": "temp3",
                "extraout_r1_02": "temp4",
                "iVar1": "temp_var1",
                "iVar3": "timer",
                "param_1": "timer_config",
                "param_3": "channel",
                "uVar2": "config_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002520": {
            "additional_data": {
                "(param_2 & 0xff)": {
                    "1": "bit_mask"
                },
                "*(uint *)(memoryLocationWithOffset)": {
                    "1": "data"
                },
                "*(uint *)(memoryLocationWithOffset) & ~(bitwiseShift)": {
                    "1": "cleared_bits_data"
                },
                "*(uint *)(param_1 + 0x20)": {
                    "1": "word"
                },
                "*param_1": {
                    "1": "input_pointer"
                },
                "*param_2": {
                    "1": "bit_position_pointer"
                },
                "*param_3": {
                    "1": "bit_value_pointer"
                },
                "1 << (param_2 & 0xff)": {
                    "1": "bitwise_shift"
                },
                "FUN_08002520": {
                    "1": "update_bit_at_position",
                    "2": "clear_bit_and_shift",
                    "3": "update_bit_value",
                    "5": "update_bitwise_value",
                    "9": "update_bit"
                },
                "bitIndex": {
                    "1": "bit_index"
                },
                "bitPosition": {
                    "1": "new_bit_position"
                },
                "bitValue": {
                    "1": "new_bit_value"
                },
                "input": {
                    "1": "input"
                },
                "newValue << (param_2 & 0xff)": {
                    "1": "shifted_new_value"
                },
                "param_1": {
                    "1": "base_addr",
                    "17": "base_address",
                    "2": "input",
                    "3": "data"
                },
                "param_1 + 0x20": {
                    "1": "memory_location_with_offset"
                },
                "param_2": {
                    "1": "bit_num",
                    "21": "bit_position",
                    "7": "bit_index"
                },
                "param_2 & 0xff": {
                    "1": "masked_bit_position"
                },
                "param_3": {
                    "1": "new_bit_value",
                    "17": "new_value",
                    "2": "value_to_insert",
                    "3": "bit_value",
                    "7": "value"
                },
                "param_3 << (param_2 & 0xff)": {
                    "1": "updated_bits"
                },
                "param_3 << (param_2 & 0xff) | clearedBitsData": {
                    "1": "updated_data"
                },
                "uint": {
                    "1": "unsigned_int"
                },
                "value": {
                    "1": "value"
                },
                "valueAddress": {
                    "1": "new_value_address"
                },
                "~(1 << (param_2 & 0xff))": {
                    "1": "bit_mask"
                }
            },
            "called": [],
            "calling": [
                "FUN_08002538"
            ],
            "code": "\nvoid update_bit_08002520(int base_address,unsigned_int bit_position,int new_value)\n\n{\n  *(unsigned_int *)(base_address + 0x20) = *(unsigned_int *)(base_address + 0x20) & ~(1 << (bit_position & 0xff));\n  *(unsigned_int *)(base_address + 0x20) = new_value << (bit_position & 0xff) | *(unsigned_int *)(base_address + 0x20);\n  return;\n}\n\n",
            "current_name": "update_bit_08002520",
            "entrypoint": "0x08002520",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002520": "update_bit_08002520",
                "param_1": "base_address",
                "param_2": "bit_position",
                "param_3": "new_value",
                "uint": "unsigned_int"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002538": {
            "additional_data": {
                "*param_1": {
                    "1": "channel"
                },
                "*puVar2": {
                    "1": "timer_regs_value"
                },
                "FUN_08002520": {
                    "1": "configure_timer_channel"
                },
                "FUN_08002538": {
                    "1": "initialize_and_enable_tim_c_cx_channel",
                    "3": "configure_tim_c_cx_channel",
                    "4": "initialize_channel",
                    "6": "initialize_timer"
                },
                "TIM_CCxChannelCmd": {
                    "1": "configure_timer_channel"
                },
                "param_1": {
                    "1": "config_ptr",
                    "2": "timer_channel_ptr",
                    "3": "channel_pointer",
                    "4": "channel_ptr"
                },
                "param_2": {
                    "1": "parameter",
                    "2": "command",
                    "3": "channel_config",
                    "4": "channel_number",
                    "5": "param_value",
                    "6": "channel"
                },
                "param_3": {
                    "1": "param_flag"
                },
                "puVar2": {
                    "1": "pointer_value",
                    "2": "channel_pointer",
                    "4": "channel_ptr"
                },
                "uRam40012c44": {
                    "1": "special_config_value",
                    "2": "timer_config_value"
                },
                "uVar1": {
                    "1": "default_command",
                    "2": "default_channel_value",
                    "3": "channel_config",
                    "4": "default_value",
                    "7": "channel_value"
                }
            },
            "called": [
                "FUN_08002520"
            ],
            "calling": [
                "FUN_08003ff4"
            ],
            "code": "\nundefined4 initialize_timer_08002538(uint **channel_ptr,undefined4 channel)\n\n{\n  uint channel_value;\n  uint *channel_ptr;\n  \n  configure_timer_c_cx_channel(*channel_ptr,channel,1);\n  channel_ptr = *channel_ptr;\n  channel_value = 0x40012c00;\n  if (channel_ptr == (uint *)0x40012c00) {\n    channel_value = timer_config_value | 0x8000;\n  }\n  if (channel_ptr == (uint *)0x40012c00) {\n    channel_ptr[0x11] = channel_value;\n  }\n  *channel_ptr = *channel_ptr | 1;\n  return 0;\n}\n\n",
            "current_name": "initialize_timer_08002538",
            "entrypoint": "0x08002538",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002538": "initialize_timer_08002538",
                "TIM_CCxChannelCmd": "configure_timer_c_cx_channel",
                "param_1": "channel_ptr",
                "param_2": "channel",
                "puVar2": "channel_ptr",
                "uRam40012c44": "timer_config_value",
                "uVar1": "channel_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002564": {
            "additional_data": {
                "(char *)(param_1 + 0xe)": {
                    "1": "flag_ptr"
                },
                "(int)param_1 + 0x39": {
                    "1": "input_array_address"
                },
                "*(char *)(param_1 + 0xe)": {
                    "1": "is_flag_set"
                },
                "*(uint *)(*param_1 + 0x44)": {
                    "1": "combined_bits"
                },
                "*(undefined *)((int)param_1 + 0x39)": {
                    "1": "input_array_address_value"
                },
                "*(undefined *)(param_1 + 0xe)": {
                    "1": "input_array[14]_updated_value"
                },
                "*param_1": {
                    "1": "first_element_of_input_array"
                },
                "0x39": {
                    "1": "flag_address"
                },
                "0x44": {
                    "1": "result_address"
                },
                "0xe": {
                    "1": "flag"
                },
                "FUN_08002564": {
                    "1": "check_and_update_parameter_value",
                    "2": "check_and_set_flag",
                    "3": "check_and_update_flag"
                },
                "param_1": {
                    "1": "array_ptr",
                    "2": "flag_array",
                    "3": "data_pointer",
                    "4": "param_array",
                    "6": "input_array"
                },
                "param_1 + 0xe": {
                    "1": "input_array[14]"
                },
                "param_2": {
                    "1": "param_array2",
                    "2": "data_array",
                    "3": "values",
                    "5": "bitwise_array"
                },
                "param_2[1]": {
                    "1": "bitmask[1]"
                },
                "param_2[2]": {
                    "1": "bitmask[2]"
                },
                "param_2[3]": {
                    "1": "bitmask[3]"
                },
                "param_2[4]": {
                    "1": "bitmask[4]"
                },
                "param_2[5]": {
                    "1": "bitmask[5]"
                },
                "param_2[6]": {
                    "1": "bitmask[6]"
                },
                "uVar1": {
                    "1": "return_status",
                    "11": "return_value",
                    "2": "status"
                }
            },
            "called": [],
            "calling": [
                "FUN_0800458c"
            ],
            "code": "\nundefined4 check_and_update_flag_08002564(int *input_array,uint *bitwise_array)\n\n{\n  undefined4 return_value;\n  \n  return_value = 2;\n  if (*(char *)(input_array + 0xe) != '\\x01') {\n    *(undefined *)((int)input_array + 0x39) = 2;\n    *(uint *)(*input_array + 0x44) =\n         *bitwise_array | bitmask[1] | bitmask[2] | bitmask[3] | bitmask[4] | bitmask[5] | bitmask[6];\n    *(undefined *)((int)input_array + 0x39) = 1;\n    return_value = 0;\n    *(undefined *)(input_array + 0xe) = 0;\n  }\n  return return_value;\n}\n\n",
            "current_name": "check_and_update_flag_08002564",
            "entrypoint": "0x08002564",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002564": "check_and_update_flag_08002564",
                "param_1": "input_array",
                "param_2": "bitwise_array",
                "param_2[1]": "bitmask[1]",
                "param_2[2]": "bitmask[2]",
                "param_2[3]": "bitmask[3]",
                "param_2[4]": "bitmask[4]",
                "param_2[5]": "bitmask[5]",
                "param_2[6]": "bitmask[6]",
                "uVar1": "return_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080025a4": {
            "additional_data": {
                "FUN_080025a4": {
                    "1": "set_permissions",
                    "2": "update_memory",
                    "3": "update_configuration",
                    "8": "update_permissions"
                },
                "iVar3": {
                    "1": "memory_address",
                    "2": "config_ptr",
                    "7": "ptr"
                },
                "param_1": {
                    "1": "flag_data",
                    "2": "config",
                    "3": "memory_block",
                    "8": "permissions"
                },
                "param_2": {
                    "1": "value_ptr",
                    "2": "settings_array",
                    "6": "flags",
                    "7": "values"
                },
                "uVar1": {
                    "1": "updated_value1",
                    "2": "temp_var1",
                    "5": "value1"
                },
                "uVar2": {
                    "1": "result_code",
                    "11": "return_value",
                    "12": "result",
                    "4": "status"
                },
                "uVar4": {
                    "1": "value1",
                    "2": "mask2",
                    "5": "value2"
                },
                "uVar5": {
                    "1": "setting2"
                }
            },
            "called": [],
            "calling": [
                "FUN_0800458c"
            ],
            "code": "\nundefined4 update_permissions_080025a4(int *permissions,uint *values)\n\n{\n  uint value1;\n  undefined4 result;\n  int ptr;\n  uint value2;\n  \n  result = 2;\n  if (*(char *)(permissions + 0xe) != '\\x01') {\n    *(undefined *)((int)permissions + 0x39) = 2;\n    ptr = *permissions;\n    value2 = *values;\n    value1 = values[1];\n    *(uint *)(ptr + 4) = *(uint *)(ptr + 4) & 0xffffff8f;\n    *(uint *)(ptr + 4) = *(uint *)(ptr + 4) | value2;\n    *(uint *)(ptr + 8) = *(uint *)(ptr + 8) & 0xffffff7f;\n    *(uint *)(ptr + 8) = *(uint *)(ptr + 8) | value1;\n    *(undefined *)((int)permissions + 0x39) = 1;\n    result = 0;\n    *(undefined *)(permissions + 0xe) = 0;\n  }\n  return result;\n}\n\n",
            "current_name": "update_permissions_080025a4",
            "entrypoint": "0x080025a4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080025a4": "update_permissions_080025a4",
                "iVar3": "ptr",
                "param_1": "permissions",
                "param_2": "values",
                "uVar1": "value1",
                "uVar2": "result",
                "uVar4": "value2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080025e8": {
            "additional_data": {
                "*param_1": {
                    "1": "configurations"
                },
                "FUN_080025e8": {
                    "1": "update_values",
                    "2": "update_clock_settings",
                    "3": "update_registers",
                    "6": "update_configuration"
                },
                "HAL_RCC_GetPCLK1Freq": {
                    "1": "get_pclk1_freq"
                },
                "HAL_RCC_GetPCLK2Freq": {
                    "1": "get_pclk2_freq"
                },
                "iVar1": {
                    "1": "pclk1_freq",
                    "2": "pclk_freq1",
                    "23": "pclk_freq"
                },
                "iVar2": {
                    "1": "result",
                    "2": "pclk_freq2",
                    "4": "calculated_value"
                },
                "iVar4": {
                    "1": "calculation1",
                    "2": "div_factor",
                    "5": "value1"
                },
                "iVar5": {
                    "1": "value1",
                    "2": "divider",
                    "4": "value2",
                    "5": "param1_value"
                },
                "iVar6": {
                    "1": "ptr_value",
                    "15": "base_address",
                    "2": "peripheral_address",
                    "5": "base_addr"
                },
                "param_1": {
                    "1": "input_data",
                    "2": "configuration",
                    "3": "clock_params",
                    "4": "config_data"
                },
                "uVar3": {
                    "1": "calculation1",
                    "2": "temp_var"
                }
            },
            "called": [
                "FUN_08002250",
                "FUN_08002220"
            ],
            "calling": [
                "FUN_08002724"
            ],
            "code": "\nvoid update_configuration_080025e8(int *config_data)\n\n{\n  int pclk_freq;\n  int adjusted_pclk_freq;\n  uint divisor;\n  int value1;\n  int param1_value;\n  int base_address;\n  \n  base_address = *config_data;\n  divisor = config_data[4];\n  *(uint *)(base_address + 0x10) = *(uint *)(base_address + 0x10) & 0xffffcfff | config_data[3];\n  *(uint *)(base_address + 0xc) = config_data[2] | divisor | config_data[5] | *(uint *)(base_address + 0xc) & 0xffffe9f3;\n  *(uint *)(base_address + 0x14) = *(uint *)(base_address + 0x14) & 0xfffffcff | config_data[6];\n  if (base_address == 0x40013800) {\n    pclk_freq = get_peripheral_clock2_freq();\n    value1 = (int)(((ulonglong)(uint)(pclk_freq * 0x19) / (ulonglong)(uint)(config_data[1] << 2)) / 100);\n    pclk_freq = get_peripheral_clock2_freq();\n    param1_value = config_data[1];\n    adjusted_pclk_freq = get_peripheral_clock2_freq();\n    adjusted_pclk_freq = (uint)(pclk_freq * 0x19) / (uint)(param1_value << 2) +\n            (int)(((ulonglong)(uint)(adjusted_pclk_freq * 0x19) / (ulonglong)(uint)(config_data[1] << 2)) / 100) *\n            -100;\n    pclk_freq = get_peripheral_clock2_freq();\n    divisor = (uint)(pclk_freq * 0x19) / (uint)(config_data[1] << 2);\n    pclk_freq = get_peripheral_clock2_freq();\n  }\n  else {\n    pclk_freq = get_peripheral_clock1_freq();\n    value1 = (int)(((ulonglong)(uint)(pclk_freq * 0x19) / (ulonglong)(uint)(config_data[1] << 2)) / 100);\n    pclk_freq = get_peripheral_clock1_freq();\n    param1_value = config_data[1];\n    adjusted_pclk_freq = get_peripheral_clock1_freq();\n    adjusted_pclk_freq = (uint)(pclk_freq * 0x19) / (uint)(param1_value << 2) +\n            (int)(((ulonglong)(uint)(adjusted_pclk_freq * 0x19) / (ulonglong)(uint)(config_data[1] << 2)) / 100) *\n            -100;\n    pclk_freq = get_peripheral_clock1_freq();\n    divisor = (uint)(pclk_freq * 0x19) / (uint)(config_data[1] << 2);\n    pclk_freq = get_peripheral_clock1_freq();\n  }\n  *(uint *)(base_address + 8) =\n       (((divisor + (int)(((ulonglong)(uint)(pclk_freq * 0x19) / (ulonglong)(uint)(config_data[1] << 2)) / 100\n                       ) * -100) * 0x10 + 0x32) / 100 & 0xf | (adjusted_pclk_freq * 0x10 + 0x32U) / 100 & 0xf0) +\n       value1 * 0x10;\n  return;\n}\n\n",
            "current_name": "update_configuration_080025e8",
            "entrypoint": "0x080025e8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080025e8": "update_configuration_080025e8",
                "HAL_RCC_GetPCLK1Freq": "get_peripheral_clock1_freq",
                "HAL_RCC_GetPCLK2Freq": "get_peripheral_clock2_freq",
                "iVar1": "pclk_freq",
                "iVar2": "adjusted_pclk_freq",
                "iVar4": "value1",
                "iVar5": "param1_value",
                "iVar6": "base_address",
                "param_1": "config_data",
                "uVar3": "divisor"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002724": {
            "additional_data": {
                "*param_1": {
                    "1": "uart_config"
                },
                "FUNC_080025e8": {
                    "1": "configure_uart"
                },
                "FUNC_08004e7c": {
                    "1": "initialize_uart_peripheral"
                },
                "FUN_080025e8": {
                    "1": "initialize_uart_buffers"
                },
                "FUN_08002724": {
                    "1": "initialize_uart_device",
                    "28": "initialize_uart"
                },
                "FUN_08004e7c": {
                    "1": "initialize_uart_hardware_aux"
                },
                "HAL_UART_MspInit": {
                    "1": "initialize_gpio",
                    "4": "initialize_uart_peripherals"
                },
                "PTR_080025e8": {
                    "1": "ptr_function2"
                },
                "PTR_08004e7c": {
                    "1": "ptr_function1"
                },
                "UART_SetConfig": {
                    "1": "configure_uart",
                    "5": "set_uart_config"
                },
                "iVar1": {
                    "1": "uart_ptr",
                    "14": "uart_handle",
                    "2": "uart_config_address",
                    "3": "uart_instance"
                },
                "param_1": {
                    "1": "device_ptr",
                    "2": "uart_handle",
                    "20": "uart_config",
                    "4": "uart_instance"
                },
                "param_1[0xe]": {
                    "1": "uart_instance_initialized"
                },
                "param_1[0xf]": {
                    "1": "uart_instance_flag"
                }
            },
            "called": [
                "FUN_08004e7c",
                "FUN_080025e8"
            ],
            "calling": [
                "FUN_0800458c"
            ],
            "code": "\nundefined4 initialize_uart_08002724(int *uart_config)\n\n{\n  int uart_handle;\n  \n  if (uart_config != (int *)0x0) {\n    if (*(char *)((int)uart_config + 0x39) == '\\0') {\n      *(undefined *)(uart_config + 0xe) = 0;\n      initialize_uart_08002724_hardware();\n    }\n    *(undefined *)((int)uart_config + 0x39) = 2;\n    *(uint *)(*uart_config + 0xc) = *(uint *)(*uart_config + 0xc) & 0xffffdfff;\n    set_uart_config(uart_config);\n    uart_handle = *uart_config;\n    *(uint *)(uart_handle + 0x10) = *(uint *)(uart_handle + 0x10) & 0xffffb7ff;\n    *(uint *)(uart_handle + 0x14) = *(uint *)(uart_handle + 0x14) & 0xffffffd5;\n    *(uint *)(uart_handle + 0xc) = *(uint *)(uart_handle + 0xc) | 0x2000;\n    uart_instance_flag = 0;\n    *(undefined *)((int)uart_config + 0x39) = 1;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "current_name": "initialize_uart_08002724",
            "entrypoint": "0x08002724",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002724": "initialize_uart_08002724",
                "HAL_UART_MspInit": "initialize_uart_hardware",
                "UART_SetConfig": "set_uart_config",
                "iVar1": "uart_handle",
                "param_1": "uart_config",
                "param_1[0xf]": "uart_instance_flag"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800290a": {
            "called": [],
            "calling": [
                "FUN_0800299a"
            ],
            "code": "\nvoid FUNC_0800290a(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_0800290a",
            "entrypoint": "0x0800290a",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_0800290a": "FUNC_0800290a"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_0800290c": {
            "additional_data": {
                "FUN_0800290c": {
                    "1": "extract_and_process_data",
                    "16": "process_data",
                    "2": "parse_data"
                },
                "bVar1": {
                    "1": "byte_var",
                    "22": "byte_value",
                    "3": "flag",
                    "4": "temp_byte"
                },
                "bVar8": {
                    "1": "is_flag_set",
                    "3": "is_true",
                    "4": "is_condition_true",
                    "6": "flag",
                    "7": "is_condition_met"
                },
                "iVar2": {
                    "1": "base_addr",
                    "2": "ptr_value",
                    "3": "ptr_data",
                    "4": "var1",
                    "5": "ptr"
                },
                "param_1": {
                    "1": "data_array",
                    "17": "data",
                    "2": "param",
                    "3": "data_ptr",
                    "7": "input_data"
                },
                "puVar6": {
                    "1": "ptr_ushort1",
                    "2": "short_ptr",
                    "3": "ushort_pointer",
                    "5": "ptr1",
                    "8": "ushort_ptr"
                },
                "puVar7": {
                    "1": "ptr16_2",
                    "2": "updated_ushort_ptr",
                    "4": "new_ushort_ptr",
                    "5": "ptr2"
                },
                "sVar5": {
                    "1": "count_value",
                    "15": "counter",
                    "4": "temp_short",
                    "7": "count"
                },
                "uVar3": {
                    "1": "result_code",
                    "2": "result",
                    "3": "updated_value",
                    "4": "var2"
                },
                "uVar4": {
                    "1": "temp_undefined",
                    "2": "temp_var2",
                    "3": "temp_value2",
                    "4": "value",
                    "9": "temp_value"
                }
            },
            "called": [
                "FUN_08004c30"
            ],
            "calling": [
                "FUN_0800299a"
            ],
            "code": "\nundefined4 process_data_0800290c(int *data)\n\n{\n  byte byte_value;\n  int ptr;\n  uint var2;\n  undefined4 temp_value;\n  short counter;\n  ushort *ushort_ptr;\n  ushort *ushort_ptr2;\n  bool is_condition_met;\n  \n  if ((*(byte *)((int)data + 0x39) & 0xef) != 0x22) {\n    return 2;\n  }\n  ptr = *data;\n  ushort_ptr = (ushort *)data[10];\n  if (data[2] == 0x1000) {\n    if (data[4] == 0) {\n      ushort_ptr2 = ushort_ptr + 1;\n      *ushort_ptr = (ushort)((uint)(*(int *)(ptr + 4) << 0x17) >> 0x17);\n    }\n    else {\n      ushort_ptr2 = (ushort *)((int)ushort_ptr + 1);\n      *ushort_ptr = (ushort)*(int *)(ptr + 4) & 0xff;\n    }\n    data[10] = (int)ushort_ptr2;\n  }\n  else {\n    if (data[4] == 0) {\n      byte_value = (byte)*(undefined4 *)(ptr + 4);\n      data[10] = (int)ushort_ptr + 1;\n    }\n    else {\n      temp_value = *(undefined4 *)(ptr + 4);\n      data[10] = (int)ushort_ptr + 1;\n      byte_value = (byte)temp_value & 0x7f;\n    }\n    *(byte *)ushort_ptr = byte_value;\n  }\n  counter = *(short *)((int)data + 0x2e) + -1;\n  *(short *)((int)data + 0x2e) = counter;\n  if (counter == 0) {\n    ptr = *data;\n    *(uint *)(ptr + 0xc) = *(uint *)(ptr + 0xc) & 0xffffffdf;\n    is_condition_met = *(char *)((int)data + 0x39) != '2';\n    if (is_condition_met) {\n      var2 = *(uint *)(ptr + 0xc) & 0xfffffeff;\n    }\n    else {\n      ptr = 0x12;\n      var2 = 0x32;\n    }\n    if (is_condition_met) {\n      *(uint *)(ptr + 0xc) = var2;\n      var2 = *(uint *)(ptr + 0x14) & 0xfffffffe;\n    }\n    if (is_condition_met) {\n      *(uint *)(ptr + 0x14) = var2;\n      ptr = 1;\n    }\n    *(char *)((int)data + 0x39) = (char)ptr;\n    HAL_UART_RxCpltCallback();\n  }\n  return 0;\n}\n\n",
            "current_name": "process_data_0800290c",
            "entrypoint": "0x0800290c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800290c": "process_data_0800290c",
                "bVar1": "byte_value",
                "bVar8": "is_condition_met",
                "iVar2": "ptr",
                "param_1": "data",
                "puVar6": "ushort_ptr",
                "puVar7": "ushort_ptr2",
                "sVar5": "counter",
                "uVar3": "var2",
                "uVar4": "temp_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002998": {
            "called": [],
            "calling": [
                "FUN_0800299a"
            ],
            "code": "\nvoid FUNC_08002998(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_08002998",
            "entrypoint": "0x08002998",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_08002998": "FUNC_08002998"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_0800299a": {
            "additional_data": {
                "*(short *)((int)param_1 + 0x26)": {
                    "1": "counter"
                },
                "*(undefined *)((int)param_1 + 0x39)": {
                    "1": "data_flag"
                },
                "*param_1": {
                    "1": "data"
                },
                "FUNC_0800290a": {
                    "1": "function_a"
                },
                "FUNC_08002998": {
                    "1": "function_b"
                },
                "FUN_0800290c": {
                    "1": "process_value"
                },
                "FUN_0800299a": {
                    "1": "process_input",
                    "27": "process_data",
                    "3": "process_input_data"
                },
                "HAL_UART_ErrorCallback": {
                    "1": "handle_error_callback",
                    "7": "handle_error"
                },
                "HAL_UART_TxCpltCallback": {
                    "1": "uart_tx_complete_callback",
                    "2": "handle_transmission"
                },
                "UART_Receive_IT": {
                    "1": "receive_it",
                    "8": "receive_data"
                },
                "bVar8": {
                    "1": "bool_flag",
                    "2": "is_true",
                    "3": "is_flag_set",
                    "7": "condition"
                },
                "param_1": {
                    "19": "data",
                    "2": "input",
                    "3": "data_ptr",
                    "5": "input_data"
                },
                "puVar4": {
                    "1": "temp_pointer",
                    "2": "data_pointer",
                    "3": "ptr1",
                    "4": "pointer1",
                    "8": "ptr"
                },
                "puVar6": {
                    "1": "temp_pointer",
                    "2": "var6",
                    "3": "ptr",
                    "4": "ptr2",
                    "5": "pointer2"
                },
                "sVar2": {
                    "16": "counter",
                    "7": "var2",
                    "8": "count"
                },
                "uVar1": {
                    "1": "first_flag",
                    "17": "value1",
                    "5": "first_value",
                    "7": "var1"
                },
                "uVar3": {
                    "1": "second_data",
                    "17": "value2",
                    "3": "value1",
                    "7": "var3"
                },
                "uVar5": {
                    "1": "result",
                    "15": "flag",
                    "2": "status",
                    "3": "new_value",
                    "5": "var5"
                },
                "uVar7": {
                    "1": "u_var7",
                    "13": "flag2",
                    "5": "var7",
                    "8": "flag"
                }
            },
            "called": [
                "FUN_0800290c",
                "FUN_0800290a",
                "FUN_08002998"
            ],
            "calling": [],
            "code": "\nvoid process_data_0800299a(uint **data)\n\n{\n  uint value1;\n  short counter;\n  uint value2;\n  uint *ptr;\n  undefined flag;\n  uint *pointer2;\n  uint flag2;\n  bool condition;\n  \n  pointer2 = *data;\n  value2 = *pointer2;\n  value1 = pointer2[3];\n  if ((value2 & 0xf) == 0) {\n    if (((int)(value2 << 0x1a) < 0) && ((int)(value1 << 0x1a) < 0)) {\n      receive_data();\n      return;\n    }\n  }\n  else {\n    flag2 = pointer2[5] & 1;\n    if ((flag2 != 0) || ((value1 & 0x120) != 0)) {\n      pointer2 = (uint *)(value2 << 0x1f);\n      if ((int)pointer2 < 0) {\n        condition = (int)(value1 << 0x17) < 0;\n        if (condition) {\n          pointer2 = (uint *)((uint)data[0xf] | 1);\n        }\n        if (condition) {\n          data[0xf] = pointer2;\n        }\n      }\n      if (((int)(value2 << 0x1d) < 0) && (flag2 != 0)) {\n        data[0xf] = (uint *)((uint)data[0xf] | 2);\n      }\n      if (((int)(value2 << 0x1e) < 0) && (flag2 != 0)) {\n        data[0xf] = (uint *)((uint)data[0xf] | 4);\n      }\n      if (((int)(value2 << 0x1c) < 0) && (flag2 != 0)) {\n        data[0xf] = (uint *)((uint)data[0xf] | 8);\n      }\n      if (data[0xf] == (uint *)0x0) {\n        return;\n      }\n      if (((int)(value2 << 0x1a) < 0) && ((int)(value1 << 0x1a) < 0)) {\n        receive_data(data);\n      }\n      pointer2 = *data;\n      if ((-1 < (int)data[0xf] << 0x1c) && ((pointer2[5] & 0x40) == 0)) {\n        handle_error(data);\n        data[0xf] = (uint *)0x0;\n        return;\n      }\n      pointer2[3] = pointer2[3] & 0xfffffedf;\n      pointer2[5] = pointer2[5] & 0xfffffffe;\n      *(undefined *)((int)data + 0x39) = 1;\n      handle_error(data);\n      return;\n    }\n  }\n  if (((int)(value2 << 0x18) < 0) && ((int)(value1 << 0x18) < 0)) {\n    if ((*(byte *)((int)data + 0x39) & 0xdf) == 0x12) {\n      ptr = data[8];\n      if (data[2] == (uint *)0x1000) {\n        pointer2[1] = *(ushort *)ptr & 0x1ff;\n        if (data[4] == (uint *)0x0) {\n          ptr = (uint *)((int)ptr + 2);\n        }\n        else {\n          ptr = (uint *)((int)ptr + 1);\n        }\n        data[8] = ptr;\n      }\n      else {\n        data[8] = (uint *)((int)ptr + 1);\n        pointer2[1] = (uint)*(byte *)ptr;\n      }\n      counter = *(short *)((int)data + 0x26) + -1;\n      *(short *)((int)data + 0x26) = counter;\n      if (counter == 0) {\n        pointer2[3] = pointer2[3] & 0xffffff7f;\n        pointer2[3] = pointer2[3] | 0x40;\n        return;\n      }\n    }\n  }\n  else if (((int)(value2 << 0x19) < 0) && ((int)(value1 << 0x19) < 0)) {\n    pointer2[3] = pointer2[3] & 0xffffffbf;\n    if (*(char *)((int)data + 0x39) == '2') {\n      flag = 0x22;\n    }\n    else {\n      flag = 1;\n    }\n    *(undefined *)((int)data + 0x39) = flag;\n    handle_transmission(data);\n  }\n  return;\n}\n\n",
            "current_name": "process_data_0800299a",
            "entrypoint": "0x0800299a",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800299a": "process_data_0800299a",
                "HAL_UART_ErrorCallback": "handle_error",
                "HAL_UART_TxCpltCallback": "handle_transmission",
                "UART_Receive_IT": "receive_data",
                "bVar8": "condition",
                "param_1": "data",
                "puVar4": "ptr",
                "puVar6": "pointer2",
                "sVar2": "counter",
                "uVar1": "value1",
                "uVar3": "value2",
                "uVar5": "flag",
                "uVar7": "flag2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002ad0": {
            "additional_data": {
                "../Src/MPU9250.c": {
                    "1": "source_file"
                },
                "0x19": {
                    "1": "reg_addr4"
                },
                "0x1a": {
                    "1": "reg_addr6"
                },
                "0x1b": {
                    "1": "reg_addr7"
                },
                "0x1c": {
                    "1": "reg_addr8"
                },
                "0x1d": {
                    "1": "reg_addr5"
                },
                "0x3b": {
                    "1": "line_number"
                },
                "0x6b": {
                    "1": "reg_addr2"
                },
                "0x6c": {
                    "1": "reg_addr3"
                },
                "0x75": {
                    "1": "reg_addr1"
                },
                "0x80": {
                    "1": "reg_value1"
                },
                "0xd0": {
                    "1": "dev_addr"
                },
                "FUN_08002ad0": {
                    "1": "configure_mpu9250",
                    "29": "initialize_mpu9250"
                },
                "FUN_0800403c": {
                    "5": "i2_c_read_byte"
                },
                "FUN_0800407c": {
                    "5": "i2_c_write_byte"
                },
                "I2C_ReadByte": {
                    "1": "read_byte_from_i2c",
                    "21": "read_byte_from_i2_c"
                },
                "I2C_WriteByte": {
                    "1": "write_byte_i2_c",
                    "21": "write_byte_to_i2_c"
                },
                "param_1": {
                    "1": "undefined1",
                    "3": "device_address"
                },
                "param_2": {
                    "1": "param_2",
                    "3": "register",
                    "5": "register_address"
                },
                "param_3": {
                    "1": "file_name",
                    "3": "value",
                    "6": "data"
                },
                "param_4": {
                    "1": "delay",
                    "2": "num_bytes",
                    "5": "length"
                }
            },
            "called": [
                "FUN_0800403c",
                "FUN_0800407c"
            ],
            "calling": [
                "FUN_08002ea0"
            ],
            "code": "\nvoid initialize_mpu9250_08002ad0(void)\n\n{\n  read_byte_from_i2_c(0xd0,0x75,\"../Src/MPU9250.c\",0x3b);\n  write_byte_to_i2_c(0xd0,0x6b,0x80,1);\n  write_byte_to_i2_c(0xd0,0x6b,1);\n  write_byte_to_i2_c(0xd0,0x6c,0,1);\n  write_byte_to_i2_c(0xd0,0x19,0,1);\n  write_byte_to_i2_c(0xd0,0x1d,3,1);\n  write_byte_to_i2_c(0xd0,0x1a,3,1);\n  write_byte_to_i2_c(0xd0,0x1b,0x10,1);\n  write_byte_to_i2_c(0xd0,0x1c,8,1);\n  return;\n}\n\n",
            "current_name": "initialize_mpu9250_08002ad0",
            "entrypoint": "0x08002ad0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002ad0": "initialize_mpu9250_08002ad0",
                "I2C_ReadByte": "read_byte_from_i2_c",
                "I2C_WriteByte": "write_byte_to_i2_c"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002b48": {
            "additional_data": {
                "DAT_200002d0": {
                    "1": "gyro_sensitivity",
                    "2": "result1"
                },
                "DAT_200002d4": {
                    "1": "converted_data3",
                    "2": "result2"
                },
                "DAT_200002d8": {
                    "1": "result_multiplier",
                    "2": "result3"
                },
                "DAT_200002f4": {
                    "1": "concatenated2"
                },
                "DAT_200002f6": {
                    "1": "sensor_data_combined1"
                },
                "DAT_200002f8": {
                    "1": "concat_sensor_reading3"
                },
                "FUN_08000c44": {
                    "1": "read_byte",
                    "3": "calculate_checksum"
                },
                "FUN_08000cec": {
                    "1": "mul_and_return"
                },
                "FUN_08002b48": {
                    "1": "read_and_calculate_sensor_values",
                    "4": "initialize_mpu9250",
                    "6": "read_and_convert_sensor_data",
                    "7": "read_sensor_data"
                },
                "FUN_080040e8": {
                    "1": "write_sensor_data"
                },
                "I2C_ReadByteArray": {
                    "1": "read_i2_c_data"
                },
                "iVar2": {
                    "1": "sensor_value",
                    "2": "converted_value1"
                },
                "iVar3": {
                    "1": "sensor_data_byte2_int",
                    "2": "converted_value2"
                },
                "in_r3": {
                    "1": "sensor_value",
                    "4": "input_data",
                    "6": "input_value",
                    "7": "sensor_data"
                },
                "local_14": {
                    "1": "data_msb",
                    "2": "sensor_data_byte2",
                    "3": "masked_value"
                },
                "local_18": {
                    "1": "sensor_data1",
                    "2": "byte_array1"
                },
                "param_1": {
                    "1": "input_data"
                },
                "param_2": {
                    "1": "input2"
                },
                "param_3": {
                    "1": "input3"
                },
                "param_4": {
                    "1": "input4"
                },
                "uVar1": {
                    "1": "result",
                    "2": "float_result",
                    "3": "float_value",
                    "5": "converted_value"
                }
            },
            "called": [
                "FUN_08000c44",
                "FUN_080040e8",
                "FUN_08000cec"
            ],
            "calling": [
                "FUN_08002f28"
            ],
            "code": "\nvoid read_sensor_data_08002b48(void)\n\n{\n  undefined4 converted_value;\n  uint sensor_data;\n  int converted_value1;\n  int high_byte_value;\n  undefined4 sensor_data_byte1;\n  undefined4 masked_value;\n  \n  sensor_data_byte1 = 0;\n  masked_value = sensor_data & 0xffff0000;\n  read_i2_c_data(0xd0,0x3b,&sensor_data_byte1,6,\"../Src/MPU9250.c\",0x58);\n  DAT_200002f6 = CONCAT11(sensor_data_byte1._2_1_,sensor_data_byte1._3_1_);\n  DAT_200002f4 = CONCAT11((undefined)sensor_data_byte1,sensor_data_byte1._1_1_);\n  DAT_200002f8 = CONCAT11((undefined)masked_value,masked_value._1_1_);\n  high_byte_value = (int)DAT_200002f6;\n  converted_value1 = (int)DAT_200002f8;\n  converted_value = __floatsisf();\n  converted_value = __aeabi_fmul(converted_value,0x40800000);\n  DAT_200002d0 = __aeabi_fmul(converted_value,0x38000000);\n  converted_value = __floatsisf(high_byte_value);\n  converted_value = __aeabi_fmul(converted_value,0x40800000);\n  DAT_200002d4 = __aeabi_fmul(converted_value,0x38000000);\n  converted_value = __floatsisf(converted_value1);\n  converted_value = __aeabi_fmul(converted_value,0x40800000);\n  DAT_200002d8 = __aeabi_fmul(converted_value,0x38000000);\n  return;\n}\n\n",
            "current_name": "read_sensor_data_08002b48",
            "entrypoint": "0x08002b48",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002b48": "read_sensor_data_08002b48",
                "I2C_ReadByteArray": "read_i2_c_data",
                "iVar2": "converted_value1",
                "iVar3": "high_byte_value",
                "in_r3": "sensor_data",
                "local_14": "masked_value",
                "local_18": "sensor_data_byte1",
                "uVar1": "converted_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002bf0": {
            "additional_data": {
                "(undefined)local_1c": {
                    "1": "sensor_data2_combined"
                },
                "(undefined)local_20": {
                    "1": "sensor_data1_combined"
                },
                "DAT_20000000": {
                    "1": "reference_temperature",
                    "4": "constant1"
                },
                "DAT_20000004": {
                    "1": "const_value2",
                    "4": "constant2"
                },
                "DAT_20000008": {
                    "1": "0.0",
                    "4": "constant3"
                },
                "DAT_200002be": {
                    "1": "temperature_concatenated2",
                    "2": "sensor_data_combined2"
                },
                "DAT_200002c0": {
                    "1": "offset_merge",
                    "2": "sensor_data_combined1"
                },
                "DAT_200002c2": {
                    "1": "offset_merge3",
                    "2": "sensor_data_combined3"
                },
                "DAT_200002c4": {
                    "1": "scaled_acceleration_x",
                    "4": "result1"
                },
                "DAT_200002c8": {
                    "1": "scaled_sensor_data_result2",
                    "4": "result2"
                },
                "DAT_200002cc": {
                    "1": "y_acceleration_processed",
                    "4": "result3"
                },
                "FUM_08000ad8": {
                    "1": "multiply_floats"
                },
                "FUM_08000c44": {
                    "1": "convert_int_to_float"
                },
                "FUM_08000cec": {
                    "1": "subtract_int_from_float"
                },
                "FUM_080040e8": {
                    "1": "subtract_floats"
                },
                "FUNC_08000ad8": {
                    "1": "calculate_value2"
                },
                "FUNC_08000c44": {
                    "1": "calculate_value1"
                },
                "FUNC_08000cec": {
                    "1": "calculate_value3"
                },
                "FUNC_080040e8": {
                    "1": "process_values"
                },
                "FUN_08000ad8": {
                    "1": "multiply_floats"
                },
                "FUN_08000c44": {
                    "1": "calculate_value1",
                    "4": "convert_to_float"
                },
                "FUN_08000cec": {
                    "1": "calculate_value3",
                    "2": "multiply_and_subtract"
                },
                "FUN_08002bf0": {
                    "1": "read_and_process_accelerometer_data",
                    "3": "read_and_calculate_sensor_data",
                    "4": "read_and_calculate_data",
                    "6": "read_and_process_sensor_data",
                    "8": "read_sensor_data"
                },
                "FUN_080040e8": {
                    "1": "process_float_values"
                },
                "I2C_ReadByteArray": {
                    "1": "read_bytes_from_i2_c",
                    "2": "read_i2_c_byte_array",
                    "3": "read_byte_array",
                    "5": "read_byte_array_from_i2_c"
                },
                "__aeabi_fmul": {
                    "1": "float_multiply",
                    "2": "multiply_float",
                    "3": "multiply_floats"
                },
                "__aeabi_fsub": {
                    "1": "float_subtract",
                    "2": "subtract_float",
                    "3": "subtract_floats"
                },
                "__floatsisf": {
                    "1": "integer_to_float",
                    "2": "convert_to_float",
                    "3": "convert_int_to_float"
                },
                "iVar2": {
                    "1": "humidity_int",
                    "2": "sensor_data2"
                },
                "iVar3": {
                    "1": "converted_data1",
                    "2": "int_value1",
                    "3": "sensor_data1"
                },
                "local_1c": {
                    "1": "concatenated_bytes",
                    "3": "acceleration_data",
                    "4": "gyro_data",
                    "7": "sensor_data2"
                },
                "local_20": {
                    "1": "offset_bytes",
                    "2": "temperature",
                    "3": "temperature_data",
                    "6": "sensor_data1"
                },
                "local_20._2_1_": {
                    "1": "sensor_data1_upper_byte"
                },
                "local_20._3_1_": {
                    "1": "sensor_data1_lower_byte"
                },
                "param_1": {
                    "1": "data_1"
                },
                "param_2": {
                    "1": "input2"
                },
                "param_3": {
                    "1": "input3"
                },
                "param_4": {
                    "1": "data_4"
                },
                "uVar1": {
                    "1": "scaled_sensor_data",
                    "2": "scaled_value",
                    "3": "float_value",
                    "6": "converted_value"
                },
                "undefined4": {
                    "1": "data_type"
                }
            },
            "called": [
                "FUN_08000c44",
                "FUN_08000ad8",
                "FUN_080040e8",
                "FUN_08000cec"
            ],
            "calling": [
                "FUN_08002f28"
            ],
            "code": "\nvoid read_sensor_data_08002bf0(void)\n\n{\n  data_type converted_value;\n  int int_value2;\n  int sensor_data1;\n  data_type sensor_data1;\n  undefined2 sensor_data2;\n  \n  sensor_data1 = 0;\n  sensor_data2 = 0;\n  read_byte_array_from_i2_c(0xd0,0x43,&sensor_data1,6,\"../Src/MPU9250.c\",0x7b);\n  DAT_200002c0 = CONCAT11(sensor_data1_upper_byte,sensor_data1_lower_byte);\n  DAT_200002be = CONCAT11(sensor_data1_combined,sensor_data1._1_1_);\n  DAT_200002c2 = CONCAT11(sensor_data2_combined,sensor_data2._1_1_);\n  sensor_data1 = (int)DAT_200002c0;\n  int_value2 = (int)DAT_200002c2;\n  converted_value = convert_int_to_float();\n  converted_value = multiply_floats(converted_value,0x447a0000);\n  converted_value = multiply_floats(converted_value,0x38000000);\n  DAT_200002c4 = subtract_floats(converted_value,DAT_20000000);\n  converted_value = convert_int_to_float(sensor_data1);\n  converted_value = multiply_floats(converted_value,0x447a0000);\n  converted_value = multiply_floats(converted_value,0x38000000);\n  DAT_200002c8 = subtract_floats(converted_value,DAT_20000004);\n  converted_value = convert_int_to_float(int_value2);\n  converted_value = multiply_floats(converted_value,0x447a0000);\n  converted_value = multiply_floats(converted_value,0x38000000);\n  DAT_200002cc = subtract_floats(converted_value,DAT_20000008);\n  return;\n}\n\n",
            "current_name": "read_sensor_data_08002bf0",
            "entrypoint": "0x08002bf0",
            "imported": false,
            "improved": true,
            "renaming": {
                "(undefined)local_1c": "sensor_data2_combined",
                "(undefined)local_20": "sensor_data1_combined",
                "FUN_08002bf0": "read_sensor_data_08002bf0",
                "I2C_ReadByteArray": "read_byte_array_from_i2_c",
                "__aeabi_fmul": "multiply_floats",
                "__aeabi_fsub": "subtract_floats",
                "__floatsisf": "convert_int_to_float",
                "iVar2": "int_value2",
                "iVar3": "sensor_data1",
                "local_1c": "sensor_data2",
                "local_20": "sensor_data1",
                "local_20._2_1_": "sensor_data1_upper_byte",
                "local_20._3_1_": "sensor_data1_lower_byte",
                "uVar1": "converted_value",
                "undefined4": "data_type"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002cb0": {
            "additional_data": {
                "DAT_200002e8": {
                    "1": "accelerometer_offset_x"
                },
                "DAT_200002ec": {
                    "1": "acceleration_y"
                },
                "DAT_200002f0": {
                    "1": "sensor_value_z"
                },
                "FUN_08000adc": {
                    "1": "read_i2_c_byte_array"
                },
                "FUN_08000c44": {
                    "1": "calculate_masked_value"
                },
                "FUN_08000cec": {
                    "1": "calculate_offset"
                },
                "FUN_08002cb0": {
                    "1": "configure_mpu9250",
                    "2": "initialize_sensor",
                    "26": "initialize_mpu9250"
                },
                "FUN_0800403c": {
                    "1": "write_byte"
                },
                "FUN_0800407c": {
                    "1": "read_byte"
                },
                "FUN_080040e8": {
                    "1": "convert_sensor_data"
                },
                "F_08002cb0": {
                    "1": "initialize_mpu9250"
                },
                "I2C_ReadByte": {
                    "1": "read_i2_c_byte",
                    "15": "read_byte",
                    "3": "read_byte_from_i2_c"
                },
                "I2C_ReadByteArray": {
                    "3": "read_byte_array"
                },
                "I2C_WriteByte": {
                    "1": "write_i2_c_byte",
                    "15": "write_byte",
                    "3": "write_byte_i2_c"
                },
                "I2C_WriteByteArray": {
                    "1": "write_i2_c_byte_array",
                    "13": "write_byte_array",
                    "2": "write_byte_array_to_i2_c",
                    "3": "write_byte_array_i2_c"
                },
                "I2c_ReadByte": {
                    "1": "read_byte"
                },
                "I2c_WriteByte": {
                    "1": "write_byte"
                },
                "I2c_WriteByteArray": {
                    "1": "write_byte_array"
                },
                "__addsf3": {
                    "1": "add_single_float",
                    "12": "add_floats",
                    "9": "add_float"
                },
                "__aeabi_fmul": {
                    "10": "multiply_float",
                    "11": "multiply_floats",
                    "2": "float_multiply"
                },
                "__floatsisf": {
                    "1": "float_to_single",
                    "10": "convert_int_to_float",
                    "2": "convert_to_int",
                    "7": "convert_to_float"
                },
                "local_c": {
                    "1": "value2",
                    "2": "local_variable_c",
                    "4": "data",
                    "6": "sensor_value",
                    "8": "sensor_data"
                },
                "param_1": {
                    "1": "data_pin",
                    "2": "config_param1",
                    "21": "param1",
                    "3": "param_1"
                },
                "param_2": {
                    "1": "register2",
                    "2": "config_param2",
                    "21": "param2",
                    "3": "param_2"
                },
                "param_3": {
                    "1": "register_value",
                    "2": "config_param3",
                    "21": "param3",
                    "3": "param_3"
                },
                "param_4": {
                    "1": "param",
                    "19": "param4",
                    "2": "config_param4"
                },
                "uVar1": {
                    "1": "normalized_value"
                }
            },
            "called": [
                "FUN_08000c44",
                "FUN_0800403c",
                "FUN_0800407c",
                "FUN_08000adc",
                "FUN_080040e8",
                "FUN_08000cec"
            ],
            "calling": [
                "FUN_08002ea0"
            ],
            "code": "\nvoid initialize_mpu9250_08002cb0(undefined4 param1,undefined4 param2,undefined4 param3,uint param4)\n\n{\n  undefined4 scaled_value;\n  uint sensor_data;\n  \n  sensor_data = param4;\n  write_byte(0xd0,0x37,0x22,1,param1,param2,param3);\n  write_byte(0xd0,0x6a,1);\n  read_byte(0x18,0,\"../Src/MPU9250.c\",0xad);\n  write_byte(0x18,0xb,1);\n  write_byte(0x18,10,0,1);\n  write_byte(0x18,10,0xf,1);\n  read_byte_array(0x18,0x10,&sensor_data,3,\"../Src/MPU9250.c\",0xb6);\n  scaled_value = convert_int_to_float((sensor_data & 0xff) - 0x80);\n  scaled_value = multiply_floats(scaled_value,0x3b800000);\n  DAT_200002e8 = add_floats(scaled_value,0x3f800000);\n  scaled_value = convert_int_to_float((sensor_data >> 8 & 0xff) - 0x80);\n  scaled_value = multiply_floats(scaled_value,0x3b800000);\n  DAT_200002ec = add_floats(scaled_value,0x3f800000);\n  scaled_value = convert_int_to_float((sensor_data >> 0x10 & 0xff) - 0x80);\n  scaled_value = multiply_floats(scaled_value,0x3b800000);\n  DAT_200002f0 = add_floats(scaled_value,0x3f800000);\n  write_byte(0x18,10,0,1);\n  write_byte(0x18,10,0x16,1);\n  return;\n}\n\n",
            "current_name": "initialize_mpu9250_08002cb0",
            "entrypoint": "0x08002cb0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002cb0": "initialize_mpu9250_08002cb0",
                "I2C_ReadByte": "read_byte",
                "I2C_ReadByteArray": "read_byte_array",
                "I2C_WriteByte": "write_byte",
                "__addsf3": "add_floats",
                "__aeabi_fmul": "multiply_floats",
                "__floatsisf": "convert_int_to_float",
                "local_c": "sensor_data",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "scaled_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002d88": {
            "additional_data": {
                "DAT_2000001c": {
                    "1": "float_const1",
                    "6": "constant1"
                },
                "DAT_20000020": {
                    "1": "constant2",
                    "4": "constant3"
                },
                "DAT_20000024": {
                    "1": "constant4",
                    "4": "constant6"
                },
                "DAT_20000028": {
                    "1": "constant8",
                    "3": "constant9"
                },
                "DAT_2000002c": {
                    "1": "constant3",
                    "3": "constant4"
                },
                "DAT_20000030": {
                    "1": "float_const7",
                    "4": "constant7"
                },
                "DAT_20000034": {
                    "1": "constant7",
                    "3": "constant10"
                },
                "DAT_200002b8": {
                    "1": "byte3"
                },
                "DAT_200002ba": {
                    "1": "data_byte1"
                },
                "DAT_200002bc": {
                    "1": "sensor_data2"
                },
                "DAT_200002dc": {
                    "1": "result_1",
                    "4": "result1"
                },
                "DAT_200002e0": {
                    "1": "result_2",
                    "4": "result2"
                },
                "DAT_200002e4": {
                    "1": "gyro_z_final",
                    "4": "result3"
                },
                "DAT_200002e8": {
                    "1": "float_value_2",
                    "4": "constant2"
                },
                "DAT_200002ec": {
                    "1": "constant2",
                    "3": "constant5"
                },
                "DAT_200002f0": {
                    "1": "float_const8",
                    "3": "constant8"
                },
                "DAT_200013bb": {
                    "12": "counter"
                },
                "FUN_08000ad8": {
                    "1": "float_multiplication1"
                },
                "FUN_08000c44": {
                    "1": "i2c_read_byte"
                },
                "FUN_08000cec": {
                    "1": "float_multiplication3"
                },
                "FUN_08002d88": {
                    "1": "calculate_sensor_values",
                    "2": "read_and_process_sensor_data",
                    "3": "calculate_sensor_data",
                    "8": "read_sensor_data"
                },
                "FUN_0800407c": {
                    "1": "i2c_read_byte_array"
                },
                "FUN_080040e8": {
                    "1": "float_multiplication2"
                },
                "I2C_ReadByte": {
                    "1": "read_byte"
                },
                "I2C_ReadByteArray": {
                    "1": "read_byte_array"
                },
                "__aeabi_fmul": {
                    "1": "multiply_float"
                },
                "__aeabi_fmul()": {
                    "1": "multiply_floats"
                },
                "__aeabi_fsub": {
                    "1": "subtract_float"
                },
                "__aeabi_fsub()": {
                    "1": "subtract_floats"
                },
                "__floatsisf": {
                    "1": "convert_to_float"
                },
                "__floatsisf()": {
                    "1": "convert_int_to_float"
                },
                "__floatsisf(iVar4)": {
                    "1": "convert_int_var_to_float"
                },
                "iVar1": {
                    "1": "sensor_value",
                    "14": "result",
                    "6": "status"
                },
                "iVar1 << 0x1f < 0": {
                    "1": "check_if_negative"
                },
                "iVar4": {
                    "1": "integer_part",
                    "2": "int_var"
                },
                "int)((uint)local_22 << 0x1c) < 0": {
                    "1": "check_if_negative2"
                },
                "local_22": {
                    "1": "temp_byte2",
                    "2": "temp3",
                    "3": "byte5",
                    "6": "flag"
                },
                "local_23": {
                    "1": "temporary_variable_4",
                    "2": "temp2",
                    "3": "byte4"
                },
                "local_24": {
                    "1": "gyro_x_high",
                    "2": "temp1",
                    "3": "byte3"
                },
                "local_28": {
                    "1": "sensor_value",
                    "2": "byte_data",
                    "4": "byte_array",
                    "5": "sensor_data"
                },
                "param_1": {
                    "1": "arg_1",
                    "2": "arg1",
                    "3": "param_1",
                    "7": "address",
                    "9": "param1"
                },
                "param_2": {
                    "1": "size",
                    "2": "arg2",
                    "3": "param_2",
                    "4": "reg",
                    "9": "param2"
                },
                "param_3": {
                    "1": "arg_3",
                    "2": "value_3",
                    "3": "buffer",
                    "5": "param_3",
                    "9": "param3"
                },
                "param_4": {
                    "1": "size",
                    "2": "param",
                    "5": "param_4",
                    "9": "param4"
                },
                "uStack_21": {
                    "1": "gyroscope_data[1]",
                    "2": "upper_byte",
                    "5": "high_byte"
                },
                "uStack_25": {
                    "1": "lsb",
                    "3": "byte2"
                },
                "uStack_26": {
                    "1": "temp_var1",
                    "3": "byte1"
                },
                "uVar2": {
                    "1": "float_result",
                    "2": "sensor_value",
                    "4": "float_result1"
                },
                "uVar3": {
                    "1": "result_2",
                    "2": "temp2",
                    "3": "result2",
                    "4": "float_result2",
                    "5": "conversion_factor"
                }
            },
            "called": [
                "FUN_08000c44",
                "FUN_0800407c",
                "FUN_08000ad8",
                "FUN_080040e8",
                "FUN_08000cec"
            ],
            "calling": [
                "FUN_08002f28"
            ],
            "code": "\nvoid read_sensor_data_08002d88(undefined4 param1,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  int result;\n  undefined4 float_result1;\n  undefined4 conversion_factor;\n  int result3;\n  undefined2 sensor_data;\n  undefined byte1;\n  undefined byte2;\n  undefined byte3;\n  undefined byte4;\n  byte flag;\n  undefined high_byte;\n  \n  high_byte = (undefined)((uint)param4 >> 0x18);\n  sensor_data = 0;\n  byte1 = 0;\n  byte2 = 0;\n  byte3 = 0;\n  byte4 = 0;\n  flag = 0;\n  result = read_byte(0x18,2,\"../Src/MPU9250.c\",0xd7,param1,param2);\n  if (result << 0x1f < 0) {\n    read_byte_array(0x18,3,&sensor_data,7,\"../Src/MPU9250.c\",0xda);\n    conversion_factor = DAT_2000001c;\n    if ((int)((uint)flag << 0x1c) < 0) {\n      DAT_200013bb = DAT_200013bb + 1;\n    }\n    else {\n      DAT_200002ba = CONCAT11(byte2,byte1);\n      DAT_200002bc = CONCAT11(byte4,byte3);\n      result3 = (int)DAT_200002ba;\n      result = (int)DAT_200002bc;\n      DAT_200002b8 = sensor_data;\n      float_result1 = convert_int_to_float;\n      float_result1 = multiply_float(float_result1,conversion_factor);\n      float_result1 = multiply_float(float_result1,DAT_200002e8);\n      float_result1 = subtract_float(float_result1,DAT_20000020);\n      DAT_200002dc = multiply_float(float_result1,DAT_2000002c);\n      float_result1 = convert_int_var_to_float;\n      float_result1 = multiply_float(float_result1,conversion_factor);\n      float_result1 = multiply_float(float_result1,DAT_200002ec);\n      float_result1 = subtract_float(float_result1,DAT_20000024);\n      DAT_200002e0 = multiply_float(float_result1,DAT_20000030);\n      float_result1 = convert_to_float(result);\n      conversion_factor = multiply_float(float_result1,conversion_factor);\n      conversion_factor = multiply_float(conversion_factor,DAT_200002f0);\n      conversion_factor = subtract_float(conversion_factor,DAT_20000028);\n      DAT_200002e4 = multiply_float(conversion_factor,DAT_20000034);\n    }\n  }\n  return;\n}\n\n",
            "current_name": "read_sensor_data_08002d88",
            "entrypoint": "0x08002d88",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002d88": "read_sensor_data_08002d88",
                "I2C_ReadByte": "read_byte",
                "I2C_ReadByteArray": "read_byte_array",
                "__aeabi_fmul": "multiply_float",
                "__aeabi_fsub": "subtract_float",
                "__floatsisf": "convert_to_float",
                "__floatsisf()": "convert_int_to_float",
                "__floatsisf(iVar4)": "convert_int_var_to_float",
                "iVar1": "result",
                "iVar4": "result3",
                "local_22": "flag",
                "local_23": "byte4",
                "local_24": "byte3",
                "local_28": "sensor_data",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "uStack_21": "high_byte",
                "uStack_25": "byte2",
                "uStack_26": "byte1",
                "uVar2": "float_result1",
                "uVar3": "conversion_factor"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002ea0": {
            "additional_data": {
                "AK8963_Init": {
                    "12": "initialize_ak8963"
                },
                "AK8963_Init()": {
                    "1": "initialize_ak8963"
                },
                "FUN_08002ad0": {
                    "1": "initialize_mpu9250_sensor"
                },
                "FUN_08002cb0": {
                    "1": "initialize_ak8963_sensor"
                },
                "FUN_08002ea0": {
                    "21": "initialize_sensors",
                    "4": "initialize_sensor_system",
                    "6": "initialize_sensor"
                },
                "FUN_08003314": {
                    "1": "set_madgwick_parameter1"
                },
                "FUN_08003320": {
                    "1": "set_madgwick_parameter2"
                },
                "MPU9250_Init": {
                    "12": "initialize_mpu9250"
                },
                "MPU9250_Init()": {
                    "1": "initialize_mpu9250"
                },
                "MadgwickSetBeta": {
                    "12": "set_madgwick_beta"
                },
                "MadgwickSetBeta(0x3f19999a)": {
                    "1": "set_madgwick_beta(0x3f19999a)"
                },
                "MadgwickSetDelta": {
                    "12": "set_madgwick_delta"
                },
                "MadgwickSetDelta(0,extraout_r1,param_3,param_4)": {
                    "1": "set_madgwick_delta(0,extra_return1,param3,param4)"
                },
                "extraout_r1": {
                    "1": "extra_output1",
                    "2": "extra_output",
                    "3": "result"
                },
                "param_1": {
                    "1": "sensor_param1",
                    "12": "arg1",
                    "2": "unused_param",
                    "9": "param1"
                },
                "param_2": {
                    "1": "unused_param2",
                    "12": "arg2",
                    "2": "unused2",
                    "9": "param2"
                },
                "param_3": {
                    "1": "input1",
                    "10": "param3",
                    "12": "arg3"
                },
                "param_4": {
                    "1": "config_param",
                    "10": "param4",
                    "12": "arg4"
                },
                "uint": {
                    "1": "sensor_value"
                }
            },
            "called": [
                "FUN_08002ad0",
                "FUN_08003314",
                "FUN_08003320",
                "FUN_08002cb0"
            ],
            "calling": [
                "FUN_08004194"
            ],
            "code": "\nvoid initialize_sensors_08002ea0(undefined4 arg1,undefined4 arg2,undefined4 arg3,undefined4 arg4)\n\n{\n  undefined4 result;\n  \n  initialize_mpu9250;\n  initialize_ak8963;\n  set_madgwick_beta(0x3f19999a);\n  set_madgwick_delta(0,extra_return1,param3,param4);\n  return;\n}\n\n",
            "current_name": "initialize_sensors_08002ea0",
            "entrypoint": "0x08002ea0",
            "imported": false,
            "improved": true,
            "renaming": {
                "AK8963_Init": "initialize_ak8963",
                "AK8963_Init()": "initialize_ak8963",
                "FUN_08002ea0": "initialize_sensors_08002ea0",
                "MPU9250_Init": "initialize_mpu9250",
                "MPU9250_Init()": "initialize_mpu9250",
                "MadgwickSetBeta": "set_madgwick_beta",
                "MadgwickSetBeta(0x3f19999a)": "set_madgwick_beta(0x3f19999a)",
                "MadgwickSetDelta": "set_madgwick_delta",
                "MadgwickSetDelta(0,extraout_r1,param_3,param_4)": "set_madgwick_delta(0,extra_return1,param3,param4)",
                "extraout_r1": "result",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arg3",
                "param_4": "arg4"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002ec0": {
            "additional_data": {
                "DAT_2000000c": {
                    "1": "result"
                },
                "DAT_20000010": {
                    "1": "original_value"
                },
                "FUN_08000ad8": {
                    "1": "calculate_value_1"
                },
                "FUN_08000adc": {
                    "1": "calculate_value_2"
                },
                "FUN_08000cec": {
                    "1": "calculate_value_3"
                },
                "FUN_08002ec0": {
                    "1": "calculate_new_result",
                    "14": "calculate_sum",
                    "2": "calculate_updated_value",
                    "3": "calculate_result",
                    "5": "calculate_new_value"
                },
                "__addsf3": {
                    "1": "add",
                    "3": "add_floats"
                },
                "__aeabi_fmul": {
                    "1": "calculate_multiplication",
                    "2": "multiply_floats"
                },
                "__aeabi_fsub": {
                    "1": "subtract",
                    "2": "subtract_floats"
                },
                "param_1": {
                    "1": "input1",
                    "11": "input_1",
                    "2": "value1"
                },
                "param_2": {
                    "1": "input2",
                    "11": "input_2",
                    "2": "value2"
                },
                "param_3": {
                    "1": "input3",
                    "10": "input_3",
                    "2": "value3"
                },
                "param_4": {
                    "1": "input4",
                    "10": "input_4",
                    "2": "value4"
                },
                "uVar1": {
                    "1": "result_1",
                    "16": "difference",
                    "2": "difference_from_one",
                    "6": "subtracted_value"
                },
                "uVar2": {
                    "1": "result_2",
                    "3": "product_1",
                    "5": "constant"
                },
                "uVar3": {
                    "1": "value",
                    "2": "multiplied_value",
                    "3": "multiplier2"
                }
            },
            "called": [
                "FUN_08000ad8",
                "FUN_08000adc",
                "FUN_08000cec"
            ],
            "calling": [
                "FUN_08002f28",
                "FUN_08004a84"
            ],
            "code": "\nvoid calculate_sum_08002ec0(void)\n\n{\n  undefined4 difference;\n  undefined4 constant;\n  undefined4 product;\n  \n  constant = DAT_2000024c;\n  product = DAT_20000010;\n  difference = subtract_floats(0x3f800000,DAT_20000010);\n  constant = multiply_floats(difference,constant);\n  product = multiply_floats(product,DAT_2000000c);\n  DAT_2000000c = add_floats(product,constant);\n  return;\n}\n\n",
            "current_name": "calculate_sum_08002ec0",
            "entrypoint": "0x08002ec0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002ec0": "calculate_sum_08002ec0",
                "__addsf3": "add_floats",
                "__aeabi_fmul": "multiply_floats",
                "__aeabi_fsub": "subtract_floats",
                "uVar1": "difference",
                "uVar2": "constant",
                "uVar3": "product"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002ed4": {
            "additional_data": {
                "FUN_08002ed4": {
                    "1": "calculate_sum_of_floats",
                    "14": "calculate_sum",
                    "2": "calculate_new_value",
                    "4": "calculate_result",
                    "9": "calculate_sum_of_products"
                },
                "__addsf3": {
                    "1": "add_float"
                },
                "__aeabi_fmul": {
                    "1": "multiply_float"
                },
                "__aeabi_fsub": {
                    "1": "subtract"
                },
                "uRam20000014": {
                    "1": "value_two",
                    "2": "value2"
                },
                "uRam20000018": {
                    "1": "input_value1",
                    "2": "input1"
                },
                "uVar1": {
                    "1": "result_1",
                    "2": "difference_from_one",
                    "21": "difference",
                    "5": "difference_from_1"
                },
                "uVar2": {
                    "1": "multiplied_value1",
                    "13": "constant",
                    "2": "constant_value"
                },
                "uVar3": {
                    "1": "result",
                    "2": "multiplied_value",
                    "4": "multiplier",
                    "9": "product"
                }
            },
            "called": [],
            "calling": [
                "FUN_08002f28",
                "FUN_08004a84"
            ],
            "code": "\nvoid calculate_sum_08002ed4(void)\n\n{\n  undefined4 difference;\n  undefined4 constant;\n  undefined4 product;\n  \n  constant = DAT_20000248;\n  product = input_value_1;\n  difference = subtract(0x3f800000,input_value_1);\n  constant = multiply(difference,constant);\n  product = multiply(product,input_value_2);\n  input_value_2 = __addsf3(product,constant);\n  return;\n}\n\n",
            "current_name": "calculate_sum_08002ed4",
            "entrypoint": "0x08002ed4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002ed4": "calculate_sum_08002ed4",
                "__aeabi_fmul": "multiply",
                "__aeabi_fsub": "subtract",
                "uRam20000014": "input_value_2",
                "uRam20000018": "input_value_1",
                "uVar1": "difference",
                "uVar2": "constant",
                "uVar3": "product"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002ee8": {
            "additional_data": {
                "DAT_20000250": {
                    "1": "value_threshold"
                },
                "FUN_08000ad8": {
                    "1": "calculate_unsigned_value",
                    "2": "perform_calculation1"
                },
                "FUN_08000adc": {
                    "1": "calculate_subtraction",
                    "2": "perform_calculation2"
                },
                "FUN_08001028": {
                    "1": "check_condition_a",
                    "4": "check_condition1"
                },
                "FUN_08001050": {
                    "1": "check_condition_b",
                    "4": "check_condition2"
                },
                "FUN_08002ee8": {
                    "1": "update_float_value",
                    "11": "adjust_float_value",
                    "2": "adjust_value_based_on_comparison",
                    "3": "update_value_based_on_threshold",
                    "4": "update_value_if_needed"
                },
                "__addsf3": {
                    "1": "addition",
                    "2": "addition_operation"
                },
                "__aeabi_fcmpge": {
                    "1": "compare_floats_greater_or_equal",
                    "2": "compare_greater_than_or_equal"
                },
                "__aeabi_fcmplt": {
                    "1": "compare_floats_less_than",
                    "2": "compare_less_than"
                },
                "__aeabi_fsub": {
                    "1": "subtract_from_float",
                    "2": "subtraction_operation"
                },
                "iVar2": {
                    "1": "is_greater_than",
                    "18": "comparison_result",
                    "5": "compare_result"
                },
                "param_1": {
                    "1": "value1",
                    "2": "value",
                    "3": "input_value"
                },
                "param_2": {
                    "1": "limit",
                    "2": "comparison_value"
                },
                "param_3": {
                    "1": "unknown_param"
                },
                "param_4": {
                    "1": "unknown_value"
                },
                "uVar1": {
                    "1": "comparison_value",
                    "11": "original_value",
                    "2": "initial_value",
                    "3": "float_value",
                    "6": "value",
                    "7": "current_value"
                }
            },
            "called": [
                "FUN_08000ad8",
                "FUN_08000adc",
                "FUN_08001028",
                "FUN_08001050"
            ],
            "calling": [
                "FUN_08002f28",
                "FUN_08004a84"
            ],
            "code": "\nvoid adjust_float_value_08002ee8(void)\n\n{\n  undefined4 original_value;\n  int comparison_result;\n  \n  original_value = DAT_20000250;\n  comparison_result = compare_greater_than_or_equal(DAT_20000250,0xc3340000);\n  if ((comparison_result != 0) && (comparison_result = compare_less_than(original_value,0x42b40000), comparison_result != 0)) {\n    addition_operation(original_value,0x42b40000);\n    return;\n  }\n  subtraction_operation(original_value,0x43870000);\n  return;\n}\n\n",
            "current_name": "adjust_float_value_08002ee8",
            "entrypoint": "0x08002ee8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002ee8": "adjust_float_value_08002ee8",
                "__addsf3": "addition_operation",
                "__aeabi_fcmpge": "compare_greater_than_or_equal",
                "__aeabi_fcmplt": "compare_less_than",
                "__aeabi_fsub": "subtraction_operation",
                "iVar2": "comparison_result",
                "uVar1": "original_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002f28": {
            "additional_data": {
                "&DAT_20000248": {
                    "1": "quaternion_output"
                },
                "AHRS_GetPitch": {
                    "1": "get_pitch_value",
                    "10": "get_pitch",
                    "2": "get_pitch_angle",
                    "5": "calculate_pitch"
                },
                "AHRS_GetRoll": {
                    "1": "get_roll_value",
                    "10": "get_roll",
                    "2": "get_roll_angle",
                    "5": "calculate_roll"
                },
                "AHRS_GetYaw": {
                    "1": "get_yaw_value",
                    "2": "calculate_yaw",
                    "8": "get_yaw"
                },
                "AK8963_ReadData": {
                    "15": "read_magnetometer_data",
                    "3": "read_ak8963_data"
                },
                "DAT_20000254": {
                    "1": "previous_micros",
                    "5": "current_time"
                },
                "DAT_20000258": {
                    "1": "current_micros",
                    "5": "previous_time"
                },
                "DAT_200002c4": {
                    "1": "gyro_y"
                },
                "DAT_200002c8": {
                    "1": "gyro_x"
                },
                "DAT_200002cc": {
                    "1": "gyro_z"
                },
                "DAT_200002d0": {
                    "1": "accel_y"
                },
                "DAT_200002d4": {
                    "1": "accel_x"
                },
                "DAT_200002d8": {
                    "1": "accel_z"
                },
                "DAT_200002dc": {
                    "1": "magnetometer_x"
                },
                "DAT_200002e0": {
                    "1": "magnetometer_y"
                },
                "DAT_200002e4": {
                    "1": "magnetometer_z"
                },
                "DAT_20001395": {
                    "1": "roll_and_pitch"
                },
                "DAT_20001395._0_2_": {
                    "1": "roll_integer",
                    "2": "roll",
                    "4": "roll_value"
                },
                "DAT_20001395._2_2_": {
                    "1": "pitch_integer",
                    "2": "pitch",
                    "4": "pitch_value"
                },
                "DAT_20001399": {
                    "1": "yaw_data",
                    "4": "yaw"
                },
                "DAT_2000142c": {
                    "1": "unknown_divided_by100",
                    "6": "yaw"
                },
                "DAT_20001430": {
                    "1": "yaw_raw",
                    "2": "unknown_value1"
                },
                "DAT_20001434": {
                    "1": "variable3",
                    "2": "unknown_value3"
                },
                "DAT_20001438": {
                    "1": "dat_200002ba",
                    "2": "unknown5"
                },
                "DAT_2000143a": {
                    "1": "other_variable6",
                    "2": "unknown6"
                },
                "FUN_08000c3c": {
                    "1": "convert_to_milliseconds",
                    "2": "float_to_unsigned_int",
                    "3": "__floatunsisf"
                },
                "FUN_08000cec": {
                    "1": "sub_function6",
                    "2": "update_madgwick_quaternion",
                    "4": "madgwick_quaternion_update",
                    "6": "update_quaternion"
                },
                "FUN_08000e54": {
                    "1": "__aeabi_fmul",
                    "2": "__aeabi_f2iz",
                    "3": "convert_yaw_to_degrees"
                },
                "FUN_08001078": {
                    "1": "other_function4",
                    "2": "calculate_delta_time",
                    "3": "micros"
                },
                "FUN_08002b48": {
                    "1": "set_delta_for_madgwick_filter",
                    "4": "madgwick_set_delta",
                    "6": "set_delta"
                },
                "FUN_08002bf0": {
                    "1": "initialize_function3",
                    "3": "read_mag_data",
                    "7": "read_magnetometer_data"
                },
                "FUN_08002d88": {
                    "1": "update_sensor_values",
                    "3": "convert_roll_to_degrees",
                    "4": "ahrs_get_roll"
                },
                "FUN_08002ec0": {
                    "1": "function2",
                    "10": "read_gyro_data",
                    "3": "mpu9250_read_gyro_data"
                },
                "FUN_08002ed4": {
                    "1": "__aeabi_fmul",
                    "2": "convert_float_to_integer"
                },
                "FUN_08002ee8": {
                    "1": "update_pitch",
                    "2": "calculate_roll",
                    "3": "get_yaw",
                    "4": "ahrs_get_yaw"
                },
                "FUN_08002f28": {
                    "1": "calculate_orientation",
                    "18": "update_sensor_data",
                    "2": "calculate_sensor_data",
                    "4": "sensor_data_processing",
                    "5": "process_sensor_data"
                },
                "FUN_08003320": {
                    "1": "initialize_function",
                    "10": "read_accel_data",
                    "3": "mpu9250_read_accel_data"
                },
                "FUN_08003330": {
                    "1": "function9",
                    "3": "convert_pitch_to_degrees",
                    "4": "ahrs_get_pitch"
                },
                "MPU9250_ReadAccelData": {
                    "1": "read_acceleration_data",
                    "17": "read_accelerometer_data"
                },
                "MPU9250_ReadGyroData": {
                    "11": "read_gyroscope_data",
                    "7": "read_gyro_data"
                },
                "MadgwickQuaternionUpdate": {
                    "1": "update_quaternion_using_madgwick",
                    "12": "update_quaternion",
                    "4": "update_madgwick_quaternion"
                },
                "MadgwickSetDelta": {
                    "1": "set_update_interval",
                    "3": "set_delta_for_madgwick",
                    "5": "set_madgwick_delta",
                    "8": "set_delta"
                },
                "_DAT_2000142a": {
                    "1": "accelerometer_average",
                    "2": "roll_divided_by100",
                    "7": "roll"
                },
                "_DAT_2000142e": {
                    "1": "gyroscope_average",
                    "2": "pitch_divided_by100",
                    "7": "pitch"
                },
                "_DAT_20001432": {
                    "1": "roll",
                    "2": "unknown2"
                },
                "_DAT_20001436": {
                    "1": "previous_acceleration",
                    "2": "unknown4"
                },
                "__aeabi_f2iz": {
                    "1": "float_to_int"
                },
                "__aeabi_fdiv": {
                    "1": "float_divide",
                    "2": "divide_float",
                    "3": "divide_floats"
                },
                "__aeabi_fmul": {
                    "1": "multiply_roll_by_2",
                    "2": "multiply_float",
                    "3": "multiply_floats"
                },
                "__floatunsisf": {
                    "1": "calculate_delta_time",
                    "2": "calculate_time_difference",
                    "3": "convert_to_float",
                    "4": "unsigned_int_to_float"
                },
                "micros": {
                    "1": "get_microseconds",
                    "2": "get_current_micros",
                    "3": "get_current_time"
                },
                "uVar1": {
                    "1": "time_diff",
                    "7": "time_difference"
                }
            },
            "called": [
                "FUN_08003320",
                "FUN_08002ec0",
                "FUN_08002bf0",
                "FUN_08001078",
                "FUN_08000c3c",
                "FUN_08002b48",
                "FUN_08000cec",
                "FUN_08002d88",
                "FUN_08004f60",
                "FUN_08003330",
                "FUN_08002ee8",
                "FUN_08000e54",
                "FUN_08002ed4"
            ],
            "calling": [
                "FUN_0800411c"
            ],
            "code": "\n\n\nvoid update_sensor_data_08002f28(void)\n\n{\n  undefined4 time_difference;\n  \n  read_accelerometer_data();\n  read_gyroscope_data();\n  read_magnetometer_data();\n  DAT_20000258 = get_current_time();\n  time_difference = unsigned_int_to_float(DAT_20000258 - DAT_20000254);\n  divide_floats(time_difference,0x447a0000);\n  set_delta();\n  DAT_20000254 = DAT_20000258;\n  update_quaternion\n            (DAT_200002d4 + -0x80000000,DAT_200002d0 + -0x80000000,DAT_200002d8,DAT_200002c8,\n             DAT_200002c4,DAT_200002cc + -0x80000000,DAT_200002dc,DAT_200002e0,DAT_200002e4,\n             &DAT_20000248);\n  _DAT_2000142a = (undefined2)((uint)(int)DAT_200002f4 / 100);\n  _DAT_2000142e = (undefined2)((uint)(int)DAT_200002f8 / 100);\n  DAT_2000142c = (undefined2)((uint)(int)DAT_200002f6 / 100);\n  DAT_20001430 = DAT_200002be;\n  _DAT_20001432 = DAT_200002c0;\n  DAT_20001434 = DAT_200002c2;\n  _DAT_20001436 = DAT_200002b8;\n  DAT_20001438 = DAT_200002ba;\n  DAT_2000143a = DAT_200002bc;\n  time_difference = get_roll();\n  multiply_floats(time_difference,0x41200000);\n  DAT_20001395._0_2_ = float_to_int();\n  time_difference = get_pitch();\n  multiply_floats(time_difference,0x41200000);\n  DAT_20001395._2_2_ = float_to_int();\n  get_yaw();\n  DAT_20001399 = float_to_int();\n  return;\n}\n\n",
            "current_name": "update_sensor_data_08002f28",
            "entrypoint": "0x08002f28",
            "imported": false,
            "improved": true,
            "renaming": {
                "AHRS_GetPitch": "get_pitch",
                "AHRS_GetRoll": "get_roll",
                "AHRS_GetYaw": "get_yaw",
                "AK8963_ReadData": "read_magnetometer_data",
                "FUN_08002f28": "update_sensor_data_08002f28",
                "MPU9250_ReadAccelData": "read_accelerometer_data",
                "MPU9250_ReadGyroData": "read_gyroscope_data",
                "MadgwickQuaternionUpdate": "update_quaternion",
                "MadgwickSetDelta": "set_delta",
                "__aeabi_f2iz": "float_to_int",
                "__aeabi_fdiv": "divide_floats",
                "__aeabi_fmul": "multiply_floats",
                "__floatunsisf": "unsigned_int_to_float",
                "micros": "get_current_time",
                "uVar1": "time_difference"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003034": {
            "additional_data": {
                "\"../Src/MS5611.c\"": {
                    "1": "source_file"
                },
                "0": {
                    "1": "register_addr"
                },
                "0x8c": {
                    "1": "line_number"
                },
                "0xee": {
                    "1": "device_addr"
                },
                "3": {
                    "1": "num_bytes"
                },
                "CONCAT11": {
                    "1": "concatenate_bytes"
                },
                "CONCAT12": {
                    "1": "concatenate12"
                },
                "FUN_08003034": {
                    "1": "read_bytes_from_i2_c",
                    "12": "read_i2_c_bytes",
                    "2": "decode_i2_c_data",
                    "3": "read_sensor_data"
                },
                "I2C_ReadBytes": {
                    "1": "read_i2c_bytes",
                    "2": "read_i2_c_bytes"
                },
                "local_c": {
                    "1": "decoded_data",
                    "17": "result",
                    "2": "sensor_data"
                },
                "param_1": {
                    "1": "first_parameter",
                    "11": "arg1",
                    "2": "unused_param_1",
                    "3": "address",
                    "7": "device_address"
                },
                "param_2": {
                    "1": "second_parameter",
                    "11": "arg2",
                    "2": "offset",
                    "3": "param_2",
                    "5": "param2"
                },
                "param_3": {
                    "1": "byte3",
                    "11": "arg3",
                    "2": "param3",
                    "3": "buffer"
                },
                "param_4": {
                    "1": "local_c",
                    "11": "arg4",
                    "2": "length"
                }
            },
            "called": [
                "FUN_080040b8"
            ],
            "calling": [
                "FUN_0800411c"
            ],
            "code": "\nuint read_i2_c_bytes_08003034(undefined4 arg1,undefined4 arg2,undefined4 arg3,undefined4 arg4)\n\n{\n  undefined4 result;\n  \n  result = arg4;\n  read_from_i2_c(0xee,0,&result,3,\"../Src/MS5611.c\",0x8c,arg3);\n  return (uint)concatenate_bytes((undefined)result,concatenate_bytes(result._1_1_,result._2_1_));\n}\n\n",
            "current_name": "read_i2_c_bytes_08003034",
            "entrypoint": "0x08003034",
            "imported": false,
            "improved": true,
            "renaming": {
                "CONCAT11": "concatenate_bytes",
                "CONCAT12": "concatenate_bytes",
                "FUN_08003034": "read_i2_c_bytes_08003034",
                "I2C_ReadBytes": "read_from_i2_c",
                "local_c": "result",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arg3",
                "param_4": "arg4"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003068": {
            "additional_data": {
                "DAT_200002fc": {
                    "1": "constant_value",
                    "12": "data",
                    "3": "global_variable",
                    "5": "data_value"
                },
                "FUN_08003068": {
                    "1": "get_dat_value",
                    "11": "get_data_value",
                    "13": "get_data",
                    "3": "get_global_variable"
                },
                "undefined4": {
                    "1": "return_type"
                }
            },
            "called": [],
            "calling": [
                "FUN_08004a30"
            ],
            "code": "\nreturn_type get_data_08003068(void)\n\n{\n  return DAT_200002fc;\n}\n\n",
            "current_name": "get_data_08003068",
            "entrypoint": "0x08003068",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08003068": "get_data_08003068",
                "undefined4": "return_type"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003298": {
            "additional_data": {
                "DAT_20000038": {
                    "1": "sensor_value",
                    "2": "sensor_data"
                },
                "DAT_2000025c": {
                    "1": "sensor_data",
                    "3": "sensor_data_array"
                },
                "DAT_20000300": {
                    "1": "buffer",
                    "2": "result_array"
                },
                "FUN_08003298": {
                    "1": "read_and_store_sensor_data",
                    "10": "read_sensor_data",
                    "2": "initialize_ms5611_sensor",
                    "3": "initialize_sensor_data",
                    "9": "initialize_sensor"
                },
                "FUN_0800403c": {
                    "1": "process_data"
                },
                "FUN_080040e8": {
                    "1": "read_byte_array"
                },
                "I2C_ReadByteArray": {
                    "3": "read_i2_c_byte_array"
                },
                "I2C_WriteByte": {
                    "3": "write_i2_c_byte"
                },
                "delay_ms": {
                    "6": "delay_milliseconds"
                },
                "iVar1": {
                    "1": "iteration_count",
                    "13": "index"
                },
                "iVar2": {
                    "1": "i"
                },
                "local_1b": {
                    "1": "byte_2",
                    "13": "byte2",
                    "4": "second_byte"
                },
                "local_1c": {
                    "1": "data_byte1",
                    "13": "byte1",
                    "4": "first_byte"
                },
                "param_1": {
                    "1": "param1"
                },
                "param_2": {
                    "1": "param2"
                },
                "param_3": {
                    "1": "param3"
                },
                "param_4": {
                    "1": "param4"
                }
            },
            "called": [
                "FUN_0800403c",
                "FUN_08004f64",
                "FUN_080040e8"
            ],
            "calling": [
                "FUN_08004194"
            ],
            "code": "\nvoid read_sensor_data_08003298(void)\n\n{\n  int index;\n  undefined byte1;\n  undefined byte2;\n  \n  index = 0;\n  write_i2_c_byte(0xee,0x1e,1);\n  delay_milliseconds(10);\n  DAT_20000038 = 8;\n  do {\n    byte1 = 0;\n    byte2 = 0;\n    read_i2_c_byte_array(0xee,index + 0xa0U & 0xffff,&byte1,2,\"../Src/MS5611.c\",0x7c);\n    *(ushort *)((int)&DAT_2000025c + index) = CONCAT11(byte1,byte2);\n    index = index + 2;\n  } while (index != 0x10);\n  index = 0;\n  do {\n    (&DAT_20000300)[index] = 0;\n    index = index + 1;\n  } while (index != 0x14);\n  return;\n}\n\n",
            "current_name": "read_sensor_data_08003298",
            "entrypoint": "0x08003298",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08003298": "read_sensor_data_08003298",
                "I2C_ReadByteArray": "read_i2_c_byte_array",
                "I2C_WriteByte": "write_i2_c_byte",
                "delay_ms": "delay_milliseconds",
                "iVar1": "index",
                "local_1b": "byte2",
                "local_1c": "byte1"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003314": {
            "additional_data": {
                "DAT_2000035c": {
                    "1": "saved_value",
                    "3": "global_variable"
                },
                "FUN_08003314": {
                    "1": "save_parameter_to_memory",
                    "2": "set_data_value",
                    "3": "initialize_param",
                    "5": "set_data"
                },
                "param_1": {
                    "1": "new_data",
                    "2": "parameter",
                    "3": "input_value",
                    "5": "new_value",
                    "6": "value"
                }
            },
            "called": [],
            "calling": [
                "FUN_08002ea0"
            ],
            "code": "\nvoid set_data_08003314(undefined4 value)\n\n{\n  DAT_2000035c = value;\n  return;\n}\n\n",
            "current_name": "set_data_08003314",
            "entrypoint": "0x08003314",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08003314": "set_data_08003314",
                "param_1": "value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003320": {
            "additional_data": {
                "DAT_20000360": {
                    "1": "global_parameter",
                    "2": "parameter"
                },
                "FUN_08003320": {
                    "1": "set_dat_variable",
                    "2": "set_global_variable",
                    "4": "set_global_parameter",
                    "9": "initialize_data"
                },
                "param_1": {
                    "1": "new_data",
                    "2": "new_param",
                    "3": "data",
                    "6": "new_value",
                    "9": "value"
                },
                "param_2": {
                    "1": "new_param"
                }
            },
            "called": [],
            "calling": [
                "FUN_08002f28",
                "FUN_08002ea0"
            ],
            "code": "\nvoid initialize_data_08003320(undefined4 value)\n\n{\n  DAT_20000360 = value;\n  return;\n}\n\n",
            "current_name": "initialize_data_08003320",
            "entrypoint": "0x08003320",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08003320": "initialize_data_08003320",
                "param_1": "value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003330": {
            "additional_data": {
                "DAT_2000003c": {
                    "1": "const4"
                },
                "DAT_20000040": {
                    "1": "const3"
                },
                "DAT_20000044": {
                    "1": "const2"
                },
                "DAT_20000048": {
                    "1": "const1"
                },
                "FUN_08003330": {
                    "1": "calculate_vector_magnitude",
                    "26": "calculate_coordinates"
                },
                "asin": {
                    "1": "calculate_inverse_sine"
                },
                "iVar19": {
                    "1": "var19",
                    "2": "temp18",
                    "4": "result18"
                },
                "iVar26": {
                    "1": "is_zero4",
                    "2": "temp25",
                    "3": "is_zero3"
                },
                "iVar3": {
                    "1": "x1_squared_plus_y1_squared",
                    "2": "comparison_result",
                    "6": "is_zero1"
                },
                "iVar30": {
                    "1": "c_times_x2",
                    "2": "temp29",
                    "3": "result29"
                },
                "iVar8": {
                    "1": "d_doubled",
                    "2": "temp1",
                    "4": "result7",
                    "5": "is_zero2"
                },
                "int iVar30": {
                    "1": "temp10"
                },
                "output": {
                    "1": "output"
                },
                "param_1": {
                    "1": "coordinate_1",
                    "2": "input1",
                    "21": "x1"
                },
                "param_10": {
                    "1": "output_values",
                    "11": "result",
                    "12": "coordinates",
                    "3": "output"
                },
                "param_2": {
                    "1": "value2",
                    "10": "x2",
                    "11": "y1",
                    "2": "y"
                },
                "param_3": {
                    "1": "coordinate_3",
                    "10": "x3",
                    "11": "z1",
                    "2": "input3"
                },
                "param_4": {
                    "1": "value4",
                    "2": "input4",
                    "3": "x4",
                    "4": "a",
                    "6": "y1",
                    "9": "x2"
                },
                "param_5": {
                    "1": "value2",
                    "15": "y2",
                    "2": "param5",
                    "4": "b"
                },
                "param_6": {
                    "1": "measurement_3",
                    "2": "input6",
                    "4": "c",
                    "6": "y3",
                    "9": "z2"
                },
                "param_7": {
                    "1": "factor_1",
                    "2": "param7",
                    "6": "z1",
                    "8": "x3"
                },
                "param_8": {
                    "1": "x8",
                    "2": "param8",
                    "4": "y2",
                    "6": "z2",
                    "8": "y3"
                },
                "param_9": {
                    "1": "x9",
                    "14": "z3",
                    "2": "f"
                },
                "sqrt": {
                    "1": "calculate_square_root"
                },
                "uVar1": {
                    "1": "distance1",
                    "2": "dist1",
                    "3": "x_squared",
                    "5": "result1",
                    "6": "x1_squared"
                },
                "uVar10": {
                    "1": "b_squared",
                    "2": "temp3",
                    "4": "result9"
                },
                "uVar11": {
                    "1": "d10",
                    "2": "temp4",
                    "4": "result10"
                },
                "uVar12": {
                    "1": "d11",
                    "2": "temp4",
                    "4": "result11"
                },
                "uVar13": {
                    "1": "var13",
                    "2": "temp6",
                    "4": "result12"
                },
                "uVar14": {
                    "1": "b_times_y2_squared",
                    "2": "temp7",
                    "4": "result13"
                },
                "uVar15": {
                    "1": "d14",
                    "2": "temp14",
                    "4": "result14"
                },
                "uVar16": {
                    "1": "partial_sum13",
                    "2": "temp9",
                    "4": "result15"
                },
                "uVar17": {
                    "1": "u_var17",
                    "2": "temp9",
                    "4": "result16"
                },
                "uVar18": {
                    "1": "u_var18",
                    "2": "temp11",
                    "4": "result17"
                },
                "uVar2": {
                    "1": "calculation_2",
                    "2": "dist2",
                    "3": "temp2",
                    "5": "result2"
                },
                "uVar20": {
                    "1": "partial_sum16",
                    "2": "temp13",
                    "4": "result19"
                },
                "uVar21": {
                    "1": "double_var21",
                    "2": "temp14",
                    "4": "result20"
                },
                "uVar22": {
                    "1": "u_var22",
                    "2": "temp21",
                    "4": "result21"
                },
                "uVar23": {
                    "1": "d22",
                    "2": "temp22",
                    "4": "result22"
                },
                "uVar24": {
                    "1": "calculation_23",
                    "2": "temp23",
                    "4": "result23"
                },
                "uVar25": {
                    "1": "partial_sum21",
                    "2": "temp18",
                    "4": "result24"
                },
                "uVar27": {
                    "1": "u_var27",
                    "2": "temp26",
                    "3": "result26"
                },
                "uVar28": {
                    "1": "result26",
                    "2": "temp27",
                    "3": "result27"
                },
                "uVar29": {
                    "1": "c_times_z2_squared",
                    "2": "temp28",
                    "3": "result28"
                },
                "uVar31": {
                    "1": "angle1",
                    "2": "temp30",
                    "3": "temp1"
                },
                "uVar32": {
                    "1": "result",
                    "2": "temp31",
                    "3": "result2"
                },
                "uVar4": {
                    "1": "z1_multiplied",
                    "2": "z_squared",
                    "3": "x2_squared",
                    "5": "result3"
                },
                "uVar5": {
                    "1": "b_squared",
                    "2": "y2_squared",
                    "3": "temp4",
                    "5": "result4"
                },
                "uVar6": {
                    "1": "b_squared",
                    "2": "z2_squared",
                    "3": "temp5",
                    "5": "result5"
                },
                "uVar7": {
                    "1": "calculation_6",
                    "3": "temp6",
                    "5": "result6"
                },
                "uVar9": {
                    "1": "x1x1_sum",
                    "2": "temp1",
                    "4": "result8"
                },
                "unsigned int iVar19": {
                    "1": "result1"
                },
                "unsigned int iVar26": {
                    "1": "result7"
                }
            },
            "called": [
                "FUN_080058fc",
                "FUN_08005bc8",
                "FUN_08001014",
                "FUN_08000ad8",
                "FUN_08000428",
                "FUN_08000adc",
                "FUN_080004d0",
                "FUN_08000e54",
                "FUN_08000a30",
                "FUN_08000cec",
                "FUN_08005854",
                "FUN_08000724"
            ],
            "calling": [
                "FUN_08002f28"
            ],
            "code": "\nvoid calculate_coordinates_08003330(undefined4 x1,undefined4 y1,undefined4 z1,undefined4 x2,\n                 undefined4 y2,undefined4 z2,undefined4 x3,undefined4 y3,\n                 undefined4 z3,undefined4 *coordinates)\n\n{\n  undefined4 x1_squared;\n  undefined4 result2;\n  int is_zero1;\n  undefined4 result3;\n  undefined4 result4;\n  undefined4 result5;\n  undefined4 result6;\n  int is_zero2;\n  undefined4 result8;\n  undefined4 result9;\n  undefined4 result10;\n  undefined4 result11;\n  undefined4 result12;\n  undefined4 result13;\n  undefined4 result14;\n  undefined4 result15;\n  undefined4 result16;\n  undefined4 result17;\n  int result18;\n  undefined4 result19;\n  undefined4 result20;\n  undefined4 result21;\n  undefined4 result22;\n  undefined4 result23;\n  undefined4 result24;\n  int is_zero3;\n  undefined4 result26;\n  undefined4 result27;\n  undefined4 result28;\n  int result29;\n  undefined8 temp1;\n  undefined8 temp2;\n  \n  result28 = DAT_20000048;\n  result27 = DAT_20000044;\n  result29 = DAT_20000040;\n  result26 = DAT_2000003c;\n  x1_squared = __aeabi_fmul(x1,x1);\n  result2 = __aeabi_fmul(y1);\n  x1_squared = __addsf3(x1_squared,result2);\n  result2 = __aeabi_fmul(z1);\n  __addsf3(x1_squared,result2);\n  __aeabi_f2d();\n  calculate_square_root();\n  x1_squared = __truncdfsf2();\n  is_zero1 = __aeabi_fcmpeq(x1_squared,0);\n  if (is_zero1 == 0) {\n    result2 = __aeabi_fmul(x3);\n    result3 = __aeabi_fmul(y3);\n    result2 = __addsf3(result2,result3);\n    result3 = __aeabi_fmul(z3);\n    __addsf3(result2,result3);\n    __aeabi_f2d();\n    calculate_square_root();\n    result2 = __truncdfsf2();\n    is_zero1 = __aeabi_fcmpeq(result2,0);\n    if (is_zero1 == 0) {\n      temp1 = __aeabi_f2d(x2);\n      __muldf3((int)temp1,(int)((ulonglong)temp1 >> 0x20),0xa2529d39,0x3f91df46);\n      result3 = __truncdfsf2();\n      temp1 = __aeabi_f2d(y2);\n      __muldf3((int)temp1,(int)((ulonglong)temp1 >> 0x20),0xa2529d39,0x3f91df46);\n      result4 = __truncdfsf2();\n      temp1 = __aeabi_f2d(z2);\n      __muldf3((int)temp1,(int)((ulonglong)temp1 >> 0x20),0xa2529d39,0x3f91df46);\n      result5 = __truncdfsf2();\n      is_zero1 = __addsf3(result26);\n      result6 = __addsf3(result29);\n      is_zero2 = __addsf3(result27,result27);\n      result8 = __addsf3(result28,result28);\n      result9 = __aeabi_fmul(result26);\n      result10 = __aeabi_fmul(result26,result29);\n      result11 = __aeabi_fmul(result26,result27);\n      result12 = __aeabi_fmul(result29);\n      result13 = __aeabi_fmul(result29,result28);\n      result14 = __aeabi_fmul(result27,result27);\n      result15 = __aeabi_fmul(result28,result28);\n      x1_squared = __aeabi_fdiv(0x3f800000,x1_squared);\n      result2 = __aeabi_fdiv(0x3f800000,result2);\n      result16 = __aeabi_fmul(x3,result2);\n      result17 = __aeabi_fmul(y3,result2);\n      result2 = __aeabi_fmul(z3,result2);\n      result18 = __aeabi_fmul(is_zero1,result16);\n      result19 = __aeabi_fmul(is_zero1,result17);\n      result20 = __aeabi_fmul(is_zero1,result2);\n      result21 = __aeabi_fmul(result6,result16);\n      result22 = __aeabi_fmul(result9,result16);\n      result23 = __aeabi_fmul(result28,result19);\n      result22 = __aeabi_fsub(result22,result23);\n      result23 = __aeabi_fmul(result27,result20);\n      result22 = __addsf3(result22,result23);\n      result23 = __aeabi_fmul(result12,result16);\n      result22 = __addsf3(result22,result23);\n      result23 = __aeabi_fmul(result6,result17);\n      result23 = __aeabi_fmul(result23,result27);\n      result22 = __addsf3(result22,result23);\n      result23 = __aeabi_fmul(result6,result2);\n      result23 = __aeabi_fmul(result23,result28);\n      result22 = __addsf3(result22,result23);\n      result23 = __aeabi_fmul(result14,result16);\n      result22 = __aeabi_fsub(result22,result23);\n      result23 = __aeabi_fmul(result15,result16);\n      result22 = __aeabi_fsub(result22,result23);\n      result23 = __aeabi_fmul(result28,result18);\n      result24 = __aeabi_fmul(result9,result17);\n      result23 = __addsf3(result23,result24);\n      result20 = __aeabi_fmul(result29,result20);\n      result20 = __aeabi_fsub(result23,result20);\n      result23 = __aeabi_fmul(result27,result21);\n      result20 = __addsf3(result20,result23);\n      result23 = __aeabi_fmul(result12,result17);\n      result20 = __aeabi_fsub(result20,result23);\n      result23 = __aeabi_fmul(result14,result17);\n      result20 = __addsf3(result20,result23);\n      result23 = __aeabi_fmul(is_zero2,result2);\n      result23 = __aeabi_fmul(result23,result28);\n      result20 = __addsf3(result20,result23);\n      result23 = __aeabi_fmul(result15,result17);\n      result20 = __aeabi_fsub(result20,result23);\n      result22 = __aeabi_fmul(result22,result22);\n      result20 = __aeabi_fmul(result20,result20);\n      __addsf3(result22,result20);\n      __aeabi_f2d();\n      calculate_square_root();\n      is_zero3 = __truncdfsf2();\n      result20 = __aeabi_fmul(result18 + -0x80000000,result27);\n      result19 = __aeabi_fmul(result29,result19);\n      result19 = __addsf3(result20,result19);\n      result9 = __aeabi_fmul(result9,result2);\n      result9 = __addsf3(result19,result9);\n      result19 = __aeabi_fmul(result28,result21);\n      result9 = __addsf3(result9,result19);\n      result19 = __aeabi_fmul(result12,result2);\n      result9 = __aeabi_fsub(result9,result19);\n      result19 = __aeabi_fmul(is_zero2,result17);\n      result19 = __aeabi_fmul(result19,result28);\n      result9 = __addsf3(result9,result19);\n      result19 = __aeabi_fmul(result14,result2);\n      result9 = __aeabi_fsub(result9,result19);\n      result19 = __aeabi_fmul(result15,result2);\n      result9 = __addsf3(result9,result19);\n      result19 = __addsf3(result9,result9);\n      result20 = __addsf3(result13);\n      result21 = __aeabi_fmul(result27,is_zero1);\n      result20 = __aeabi_fsub(result20,result21);\n      result21 = __aeabi_fmul(x1,x1_squared);\n      result20 = __aeabi_fsub(result20,result21);\n      result21 = __aeabi_fmul(result28,is_zero2);\n      result22 = __addsf3(result10);\n      result21 = __addsf3(result21,result22);\n      result22 = __aeabi_fmul(y1,x1_squared);\n      result21 = __aeabi_fsub(result21,result22);\n      result22 = __aeabi_fmul(result27,result9);\n      result23 = __aeabi_fsub(0x3f000000,result14);\n      result15 = __aeabi_fsub(result23,result15);\n      result15 = __aeabi_fmul(result15,is_zero3);\n      result23 = __aeabi_fsub(result13,result11);\n      result23 = __aeabi_fmul(result23,result9);\n      result15 = __addsf3(result15,result23);\n      result15 = __aeabi_fsub(result15,result16);\n      result16 = __aeabi_fmul(result29,result9);\n      result23 = __aeabi_fmul(result29,result27);\n      result24 = __aeabi_fmul(result26,result28);\n      result23 = __aeabi_fsub(result23,result24);\n      result23 = __aeabi_fmul(result23,is_zero3);\n      result24 = __aeabi_fmul(result27,result28);\n      result10 = __addsf3(result24,result10);\n      result10 = __aeabi_fmul(result10,result9);\n      result10 = __addsf3(result23,result10);\n      result10 = __aeabi_fsub(result10,result17);\n      result17 = __aeabi_fmul(result27,is_zero3);\n      result23 = __aeabi_fsub(0x3f000000,result12);\n      result23 = __aeabi_fsub(result23,result14);\n      result23 = __aeabi_fmul(result23,result9);\n      result11 = __addsf3(result11,result13);\n      result11 = __aeabi_fmul(result11,is_zero3);\n      result11 = __addsf3(result23,result11);\n      result2 = __aeabi_fsub(result11,result2);\n      result11 = __aeabi_fmul(is_zero2 + -0x80000000,result20);\n      result13 = __aeabi_fmul(result6,result21);\n      result11 = __addsf3(result11,result13);\n      result13 = __aeabi_fmul(result22,result15);\n      result11 = __aeabi_fsub(result11,result13);\n      result13 = __aeabi_fmul(result28,is_zero3 + -0x80000000);\n      result13 = __addsf3(result13,result16);\n      result13 = __aeabi_fmul(result13,result10);\n      result11 = __addsf3(result11,result13);\n      result13 = __aeabi_fmul(result17,result2);\n      result11 = __addsf3(result11,result13);\n      result12 = __addsf3(result12);\n      result12 = __aeabi_fsub(0x3f800000,result12);\n      result13 = __addsf3(result14);\n      result12 = __aeabi_fsub(result12,result13);\n      x1_squared = __aeabi_fmul(z1,x1_squared);\n      x1_squared = __aeabi_fsub(result12,x1_squared);\n      result12 = __aeabi_fmul(result28,result9);\n      result9 = __aeabi_fmul(result26,result9);\n      result13 = __aeabi_fmul(result8,result20);\n      result14 = __aeabi_fmul(is_zero1,result21);\n      result13 = __addsf3(result13,result14);\n      result14 = __aeabi_fmul(result29,0x40800000);\n      result14 = __aeabi_fmul(result14,x1_squared);\n      result13 = __aeabi_fsub(result13,result14);\n      result14 = __aeabi_fmul(result15,result12);\n      result13 = __addsf3(result13,result14);\n      result14 = __addsf3(result17,result9);\n      result14 = __aeabi_fmul(result14,result10);\n      result13 = __addsf3(result13,result14);\n      result14 = __aeabi_fmul(result28,is_zero3);\n      result17 = __aeabi_fmul(result29,result19);\n      result14 = __aeabi_fsub(result14,result17);\n      result14 = __aeabi_fmul(result14,result2);\n      result13 = __addsf3(result13,result14);\n      result18 = __addsf3(is_zero3,is_zero3);\n      result14 = __aeabi_fmul(result29,is_zero3);\n      result17 = __aeabi_fmul(is_zero1 + -0x80000000,result20);\n      result8 = __aeabi_fmul(result8,result21);\n      result8 = __addsf3(result17,result8);\n      result17 = __aeabi_fmul(result27,0x40800000);\n      x1_squared = __aeabi_fmul(result17,x1_squared);\n      x1_squared = __aeabi_fsub(result8,x1_squared);\n      result8 = __aeabi_fmul(result27,result18 + -0x80000000);\n      result8 = __aeabi_fsub(result8,result9);\n      result8 = __aeabi_fmul(result8,result15);\n      x1_squared = __addsf3(x1_squared,result8);\n      result8 = __addsf3(result12,result14);\n      result8 = __aeabi_fmul(result8,result10);\n      x1_squared = __addsf3(x1_squared,result8);\n      result8 = __aeabi_fmul(result26,is_zero3);\n      result9 = __aeabi_fmul(result27,result19);\n      result8 = __aeabi_fsub(result8,result9);\n      result8 = __aeabi_fmul(result8,result2);\n      result8 = __addsf3(x1_squared,result8);\n      x1_squared = __aeabi_fmul(result6,result20);\n      result6 = __aeabi_fmul(is_zero2,result21);\n      x1_squared = __addsf3(x1_squared,result6);\n      result6 = __aeabi_fmul(result28,result18 + -0x80000000);\n      result6 = __addsf3(result6,result16);\n      result6 = __aeabi_fmul(result6,result15);\n      x1_squared = __addsf3(x1_squared,result6);\n      result6 = __aeabi_fmul(result26,is_zero3 + -0x80000000);\n      result6 = __addsf3(result6,result22);\n      result6 = __aeabi_fmul(result6,result10);\n      x1_squared = __addsf3(x1_squared,result6);\n      result2 = __aeabi_fmul(result2,result14);\n      result6 = __addsf3(x1_squared,result2);\n      x1_squared = __aeabi_fmul(result11);\n      result2 = __aeabi_fmul(result13);\n      x1_squared = __addsf3(x1_squared,result2);\n      result2 = __aeabi_fmul(result8,result8);\n      x1_squared = __addsf3(x1_squared,result2);\n      result2 = __aeabi_fmul(result6,result6);\n      __addsf3(x1_squared,result2);\n      __aeabi_f2d();\n      calculate_square_root();\n      x1_squared = __truncdfsf2();\n      result9 = __aeabi_fdiv(0x3f800000,x1_squared);\n      x1_squared = DAT_2000035c;\n      result2 = __aeabi_fmul(result29 + -0x80000000,result3);\n      result10 = __aeabi_fmul(result27,result4);\n      result2 = __aeabi_fsub(result2,result10);\n      result10 = __aeabi_fmul(result28,result5);\n      result2 = __aeabi_fsub(result2,result10);\n      result10 = __aeabi_fmul(result2,0x3f000000);\n      result11 = __aeabi_fmul(result11,result9);\n      result2 = DAT_20000360;\n      result11 = __aeabi_fmul(result11,x1_squared);\n      result10 = __aeabi_fsub(result10,result11);\n      result2 = __aeabi_fmul(result10,result2);\n      result10 = __addsf3(result2,result26);\n      result11 = __aeabi_fmul(result26,result3);\n      result12 = __aeabi_fmul(result27,result5);\n      result2 = DAT_20000360;\n      result11 = __addsf3(result11,result12);\n      result12 = __aeabi_fmul(result28,result4);\n      result11 = __aeabi_fsub(result11,result12);\n      result11 = __aeabi_fmul(result11,0x3f000000);\n      result12 = __aeabi_fmul(result13,result9);\n      result12 = __aeabi_fmul(result12,x1_squared);\n      result11 = __aeabi_fsub(result11,result12);\n      result2 = __aeabi_fmul(result11,result2);\n      result11 = __addsf3(result2,result29);\n      result2 = DAT_20000360;\n      result12 = __aeabi_fmul(result26,result4);\n      result13 = __aeabi_fmul(result29,result5);\n      result12 = __aeabi_fsub(result12,result13);\n      result13 = __aeabi_fmul(result28,result3);\n      result12 = __addsf3(result12,result13);\n      result12 = __aeabi_fmul(result12,0x3f000000);\n      result8 = __aeabi_fmul(result8,result9);\n      result8 = __aeabi_fmul(result8,x1_squared);\n      result8 = __aeabi_fsub(result12,result8);\n      result2 = __aeabi_fmul(result8,result2);\n      result2 = __addsf3(result2,result27);\n      result26 = __aeabi_fmul(result26,result5);\n      result4 = __aeabi_fmul(result29,result4);\n      result26 = __addsf3(result26,result4);\n      result27 = __aeabi_fmul(result27,result3);\n      result26 = __aeabi_fsub(result26,result27);\n      result27 = __aeabi_fmul(result26,0x3f000000);\n      result26 = __aeabi_fmul(result6,result9);\n      x1_squared = __aeabi_fmul(result26,x1_squared);\n      result26 = DAT_20000360;\n      result27 = __aeabi_fsub(result27,x1_squared);\n      result26 = __aeabi_fmul(result27,result26);\n      result26 = __addsf3(result26,result28);\n      result27 = __aeabi_fmul(result10,result10);\n      result28 = __aeabi_fmul(result11,result11);\n      result27 = __addsf3(result27,result28);\n      result28 = __aeabi_fmul(result2,result2);\n      result27 = __addsf3(result27,result28);\n      result28 = __aeabi_fmul(result26,result26);\n      __addsf3(result27,result28);\n      __aeabi_f2d();\n      calculate_square_root();\n      result27 = __truncdfsf2();\n      result27 = __aeabi_fdiv(0x3f800000,result27);\n      result28 = __aeabi_fmul(result10,result27);\n      DAT_2000003c = result28;\n      result29 = __aeabi_fmul(result11,result27);\n      DAT_20000040 = result29;\n      x1_squared = __aeabi_fmul(result2,result27);\n      DAT_20000044 = x1_squared;\n      DAT_20000048 = __aeabi_fmul(result26,result27);\n      result26 = __aeabi_fmul(result29,DAT_20000048);\n      result27 = __aeabi_fmul(result28,x1_squared);\n      result26 = __aeabi_fsub(result26,result27);\n      __addsf3(result26,result26);\n      __aeabi_f2d();\n      temp1 = calculate_inverse_sine();\n      temp1 = __muldf3((int)temp1,(int)((ulonglong)temp1 >> 0x20),0,0x40668000);\n      __divdf3((int)temp1,(int)((ulonglong)temp1 >> 0x20),0x54442d18,0x400921fb);\n      result26 = __truncdfsf2();\n      *coordinates = result26;\n      result29 = DAT_20000040;\n      result26 = DAT_2000003c;\n      result27 = __aeabi_fmul(DAT_2000003c,DAT_2000003c);\n      result28 = __aeabi_fmul(result29,result29);\n      result28 = __aeabi_fsub(result27,result28);\n      result27 = DAT_20000044;\n      x1_squared = __aeabi_fmul(DAT_20000044,DAT_20000044);\n      x1_squared = __aeabi_fsub(result28,x1_squared);\n      result28 = DAT_20000048;\n      result2 = __aeabi_fmul(DAT_20000048,DAT_20000048);\n      __addsf3(x1_squared,result2);\n      temp1 = __aeabi_f2d();\n      result26 = __aeabi_fmul(result26,result29);\n      result27 = __aeabi_fmul(result27,result28);\n      result26 = __addsf3(result26,result27);\n      __addsf3(result26,result26);\n      temp2 = __aeabi_f2d();\n      temp1 = atan2((int)temp2,(int)((ulonglong)temp2 >> 0x20),(int)temp1,\n                     (int)((ulonglong)temp1 >> 0x20));\n      temp1 = __muldf3((int)temp1,(int)((ulonglong)temp1 >> 0x20),0,0x40668000);\n      __divdf3((int)temp1,(int)((ulonglong)temp1 >> 0x20),0x54442d18,0x400921fb);\n      result26 = __truncdfsf2();\n      coordinates[1] = result26;\n      result29 = DAT_20000040;\n      result26 = DAT_2000003c;\n      result27 = __aeabi_fmul(DAT_2000003c,DAT_2000003c);\n      result28 = __aeabi_fmul(result29,result29);\n      result28 = __addsf3(result27,result28);\n      result27 = DAT_20000044;\n      x1_squared = __aeabi_fmul(DAT_20000044,DAT_20000044);\n      x1_squared = __aeabi_fsub(result28,x1_squared);\n      result28 = DAT_20000048;\n      result2 = __aeabi_fmul(DAT_20000048,DAT_20000048);\n      __aeabi_fsub(x1_squared,result2);\n      temp1 = __aeabi_f2d();\n      result27 = __aeabi_fmul(result29,result27);\n      result26 = __aeabi_fmul(result26,result28);\n      result26 = __addsf3(result27,result26);\n      __addsf3(result26,result26);\n      temp2 = __aeabi_f2d();\n      temp1 = atan2((int)temp2,(int)((ulonglong)temp2 >> 0x20),(int)temp1,\n                     (int)((ulonglong)temp1 >> 0x20));\n      temp1 = __muldf3((int)temp1,(int)((ulonglong)temp1 >> 0x20),0,0x40668000);\n      __divdf3((int)temp1,(int)((ulonglong)temp1 >> 0x20),0x54442d18,0x400921fb);\n      result26 = __truncdfsf2();\n      coordinates[2] = result26;\n    }\n  }\n  return;\n}\n\n",
            "current_name": "calculate_coordinates_08003330",
            "entrypoint": "0x08003330",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08003330": "calculate_coordinates_08003330",
                "asin": "calculate_inverse_sine",
                "iVar19": "result18",
                "iVar26": "is_zero3",
                "iVar3": "is_zero1",
                "iVar30": "result29",
                "iVar8": "is_zero2",
                "param_1": "x1",
                "param_10": "coordinates",
                "param_2": "y1",
                "param_3": "z1",
                "param_4": "x2",
                "param_5": "y2",
                "param_6": "z2",
                "param_7": "x3",
                "param_8": "y3",
                "param_9": "z3",
                "sqrt": "calculate_square_root",
                "uVar1": "x1_squared",
                "uVar10": "result9",
                "uVar11": "result10",
                "uVar12": "result11",
                "uVar13": "result12",
                "uVar14": "result13",
                "uVar15": "result14",
                "uVar16": "result15",
                "uVar17": "result16",
                "uVar18": "result17",
                "uVar2": "result2",
                "uVar20": "result19",
                "uVar21": "result20",
                "uVar22": "result21",
                "uVar23": "result22",
                "uVar24": "result23",
                "uVar25": "result24",
                "uVar27": "result26",
                "uVar28": "result27",
                "uVar29": "result28",
                "uVar31": "temp1",
                "uVar32": "temp2",
                "uVar4": "result3",
                "uVar5": "result4",
                "uVar6": "result5",
                "uVar7": "result6",
                "uVar9": "result8"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003eb0": {
            "additional_data": {
                "CONCAT44": {
                    "1": "combine_two_values",
                    "2": "concatenate_values",
                    "5": "concatenate",
                    "7": "combine_values"
                },
                "DAT_20000280": {
                    "1": "interrupt_variable",
                    "2": "flag"
                },
                "FUN_08003eb0": {
                    "1": "shift_left_64bit",
                    "2": "left_shift_param_or_interrupt",
                    "3": "shift_left_or_interrupt",
                    "4": "convert_to64_bit"
                },
                "param_1": {
                    "1": "input_param",
                    "12": "input",
                    "17": "input_value"
                },
                "return": {
                    "2": "result"
                },
                "software_interrupt": {
                    "1": "call_software_interrupt",
                    "2": "invoke_interrupt",
                    "3": "trigger_interrupt",
                    "4": "trigger_software_interrupt"
                },
                "ulonglong": {
                    "1": "result",
                    "5": "unsigned_long_long"
                }
            },
            "called": [],
            "calling": [
                "FUN_080041ae"
            ],
            "code": "\nlonglong convert_to64_bit_08003eb0(uint input_value)\n\n{\n  if (DAT_20000280 == 0) {\n    trigger_software_interrupt(0x3f);\n    result combine_values(input_value,1);\n  }\n  result (unsigned_long_long)input_value << 0x20;\n}\n\n",
            "current_name": "convert_to64_bit_08003eb0",
            "entrypoint": "0x08003eb0",
            "imported": false,
            "improved": true,
            "renaming": {
                "CONCAT44": "combine_values",
                "FUN_08003eb0": "convert_to64_bit_08003eb0",
                "param_1": "input_value",
                "return": "result",
                "software_interrupt": "trigger_software_interrupt",
                "ulonglong": "unsigned_long_long"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003ec8": {
            "additional_data": {
                "*(short *)(param_1 + 0x802)": {
                    "1": "short_index"
                },
                "*(short *)(param_1 + 0x804)": {
                    "1": "value1",
                    "2": "current_short_value",
                    "3": "short_value",
                    "6": "current_value"
                },
                "*(undefined *)(param_1 + (uint)*(ushort *)(param_1 + 0x802))": {
                    "1": "memory_address",
                    "4": "memory_location"
                },
                "*(ushort *)(param_1 + 0x802)": {
                    "1": "value2",
                    "2": "current_index",
                    "9": "index"
                },
                "*(ushort *)(param_1 + 0x802) + 1U & 0x7ff": {
                    "1": "next_index",
                    "2": "updated_index"
                },
                "*current_value_address": {
                    "1": "position"
                },
                "*data_address": {
                    "1": "current_value"
                },
                "*position": {
                    "1": "updated_position"
                },
                "<original_variable_name_1>": {
                    "1": "offset"
                },
                "<original_variable_name_2>": {
                    "1": "current_value"
                },
                "FUN_08003ec8": {
                    "1": "increment_and_store_data",
                    "2": "update_data",
                    "3": "increment_and_update_value",
                    "4": "increment_and_store",
                    "9": "increment_and_store_value"
                },
                "int": {
                    "1": "int_value"
                },
                "local_1": {
                    "1": "current_value"
                },
                "param_1": {
                    "1": "memory_address",
                    "18": "base_address",
                    "3": "array_ptr",
                    "4": "data_address"
                },
                "param_1 + (uint)*(ushort *)(param_1 + 0x802)": {
                    "1": "target_address"
                },
                "param_1 + 0x802": {
                    "1": "index_pointer"
                },
                "param_1 + 0x804": {
                    "1": "data_pointer"
                },
                "param_2": {
                    "1": "new_data",
                    "10": "new_value",
                    "14": "value",
                    "3": "value_to_store"
                },
                "param_3": {
                    "1": "size"
                },
                "param_4": {
                    "1": "index"
                },
                "param_5": {
                    "1": "limit"
                },
                "short": {
                    "1": "short_type"
                },
                "undefined": {
                    "1": "byte"
                },
                "undefined4": {
                    "1": "return_value"
                },
                "ushort": {
                    "1": "ushort_type"
                },
                "ushort *": {
                    "1": "ushort_ptr"
                },
                "ushort * (param_1 + 0x802)": {
                    "1": "index"
                },
                "ushort * (param_1 + 0x804)": {
                    "1": "counter"
                },
                "var_1": {
                    "1": "count"
                },
                "var_2": {
                    "1": "index"
                }
            },
            "called": [],
            "calling": [
                "FUN_08004c30"
            ],
            "code": "\nreturn_value increment_and_store_value_08003ec8(int_value base_address,byte value)\n\n{\n  *(short_type *)(base_address + 0x804) = *(short_type *)(base_address + 0x804) + 1;\n  *(byte *)(base_address + (uint_value)*(ushort_type *)(base_address + 0x802)) = value;\n  *(ushort_type *)(base_address + 0x802) = *(short_type *)(base_address + 0x802) + 1U & 0x7ff;\n  return 1;\n}\n\n",
            "current_name": "increment_and_store_value_08003ec8",
            "entrypoint": "0x08003ec8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08003ec8": "increment_and_store_value_08003ec8",
                "int": "int_value",
                "param_1": "base_address",
                "param_2": "value",
                "short": "short_type",
                "undefined": "byte",
                "undefined4": "return_value",
                "ushort": "ushort_type"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003f3c": {
            "additional_data": {
                "FUN_08003f3c": {
                    "1": "write_to_gpio",
                    "15": "set_gpio_pins",
                    "2": "set_gpio_state"
                },
                "param_1": {
                    "1": "pin_state1",
                    "2": "pin1_value",
                    "3": "pin1_state",
                    "4": "is_param1_zero"
                },
                "param_2": {
                    "1": "gpio_pin_2_state",
                    "2": "state_pin2",
                    "3": "pin2_state",
                    "4": "pin_2_state"
                },
                "param_3": {
                    "1": "gpio_pin3",
                    "2": "state_pin3",
                    "3": "pin3_state",
                    "4": "is_param3_zero"
                }
            },
            "called": [
                "FUN_08001424"
            ],
            "calling": [
                "FUN_08004a84",
                "FUN_08004028"
            ],
            "code": "\nvoid set_gpio_pins_08003f3c(int pin_1_state,int pin_2_state,int pin_3_state)\n\n{\n  HAL_GPIO_WritePin(0x40011000,0x8000,pin_1_state == 0);\n  HAL_GPIO_WritePin(0x40011000,0x4000,pin_2_state == 0);\n  HAL_GPIO_WritePin(0x40011000,0x2000,pin_3_state == 0);\n  return;\n}\n\n",
            "current_name": "set_gpio_pins_08003f3c",
            "entrypoint": "0x08003f3c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08003f3c": "set_gpio_pins_08003f3c",
                "param_1": "pin_1_state",
                "param_2": "pin_2_state",
                "param_3": "pin_3_state"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003fc4": {
            "additional_data": {
                "(DAT_200014c8 + 0x40)": {
                    "1": "memory_address"
                },
                "*(undefined4 *)(DAT_200014c8 + 0x40)": {
                    "1": "store_location"
                },
                "0x40": {
                    "1": "offset"
                },
                "<original_variable_name>": {
                    "1": "memory_address"
                },
                "<variable_name>": {
                    "1": "<new_variable_name>"
                },
                "DAT_": {
                    "1": "dat_"
                },
                "DAT_200014c8": {
                    "1": "data_offset",
                    "2": "base_address",
                    "4": "global_data"
                },
                "FUN_08003fc4": {
                    "1": "set_memory_location",
                    "2": "set_param_1",
                    "6": "set_param_value"
                },
                "PTR_": {
                    "1": "ptr_"
                },
                "param_1": {
                    "1": "new_param",
                    "2": "parameter",
                    "20": "value",
                    "7": "new_value"
                },
                "param_2": {
                    "1": "new_value"
                }
            },
            "called": [],
            "calling": [
                "FUN_080041c4",
                "FUN_0800426c"
            ],
            "code": "\nvoid set_param_value_08003fc4(undefined4 value)\n\n{\n  *(undefined4 *)(DAT_200014c8 + 0x40) = value;\n  return;\n}\n\n",
            "current_name": "set_param_value_08003fc4",
            "entrypoint": "0x08003fc4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08003fc4": "set_param_value_08003fc4",
                "param_1": "value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003fd0": {
            "additional_data": {
                "*(undefined4 *)(DAT_200014c8 + 0x3c)": {
                    "1": "parameter_value"
                },
                "*(undefined4 *)(memoryAddress + 0x3c)": {
                    "1": "value_at_memory_address"
                },
                "0x3c": {
                    "1": "offset"
                },
                "DAT_200014c8": {
                    "1": "data_offset",
                    "2": "data_block",
                    "5": "memory_address"
                },
                "FUN_08003fd0": {
                    "1": "set_data_at_offset",
                    "10": "set_param_value",
                    "2": "store_parameter_in_memory",
                    "8": "set_param"
                },
                "PTR_200014c8": {
                    "1": "base_address"
                },
                "VAR_200014c8": {
                    "1": "data_block"
                },
                "new_variable_name_1": {
                    "1": "offset"
                },
                "param_1": {
                    "1": "data",
                    "18": "value",
                    "2": "param",
                    "3": "parameter",
                    "7": "new_value"
                },
                "param_2": {
                    "1": "new_param"
                }
            },
            "called": [],
            "calling": [
                "FUN_080041c4",
                "FUN_0800426c"
            ],
            "code": "\nvoid set_param_value_08003fd0(undefined4 value)\n\n{\n  *(undefined4 *)(DAT_200014c8 + 0x3c) = value;\n  return;\n}\n\n",
            "current_name": "set_param_value_08003fd0",
            "entrypoint": "0x08003fd0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08003fd0": "set_param_value_08003fd0",
                "param_1": "value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003fdc": {
            "additional_data": {
                "*(undefined4 *)(DAT_200015f8 + 0x38)": {
                    "1": "data_address"
                },
                "0x38": {
                    "1": "offset"
                },
                "<variable>": {
                    "1": "<new_name>"
                },
                "DAT_200015f8": {
                    "1": "pointer_to_f8_value",
                    "2": "parameter_data",
                    "3": "data",
                    "4": "memory_address"
                },
                "FUN_08003fdc": {
                    "1": "set_global_parameter",
                    "2": "set_parameter",
                    "3": "set_function_parameter",
                    "4": "set_parameter_value",
                    "9": "set_param_value"
                },
                "param_1": {
                    "1": "parameter",
                    "2": "input_value",
                    "22": "value",
                    "6": "new_value"
                }
            },
            "called": [],
            "calling": [
                "FUN_080041c4",
                "FUN_0800426c"
            ],
            "code": "\nvoid set_param_value_08003fdc(undefined4 value)\n\n{\n  *(undefined4 *)(DAT_200015f8 + 0x38) = value;\n  return;\n}\n\n",
            "current_name": "set_param_value_08003fdc",
            "entrypoint": "0x08003fdc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08003fdc": "set_param_value_08003fdc",
                "param_1": "value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003fe8": {
            "additional_data": {
                "*(*(DAT_20001540 + 0x3c))": {
                    "1": "parameter_address"
                },
                "*(undefined4 *)(DAT_20001540 + 0x3c)": {
                    "1": "memory_address",
                    "2": "parameter_address"
                },
                "0x3c": {
                    "1": "offset"
                },
                "DAT_20001540": {
                    "1": "data_block",
                    "2": "memory_block",
                    "3": "data_memory",
                    "4": "base_address"
                },
                "FUNKY_FUNCTION": {
                    "1": "store_parameter_in_memory"
                },
                "FUN_08003fe8": {
                    "1": "store_param",
                    "2": "set_parameter",
                    "4": "set_param",
                    "8": "set_param_value",
                    "9": "set_parameter_value"
                },
                "PTR_08003fe8": {
                    "1": "pointer_set_param_value"
                },
                "param_1": {
                    "1": "parameter_value",
                    "2": "parameter",
                    "24": "value",
                    "3": "new_value"
                }
            },
            "called": [],
            "calling": [
                "FUN_0800426c",
                "FUN_080041c4"
            ],
            "code": "\nvoid set_parameter_value_08003fe8(undefined4 value)\n\n{\n  *(undefined4 *)(DAT_20001540 + 0x3c) = value;\n  return;\n}\n\n",
            "current_name": "set_parameter_value_08003fe8",
            "entrypoint": "0x08003fe8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08003fe8": "set_parameter_value_08003fe8",
                "param_1": "value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003ff4": {
            "additional_data": {
                "&DAT_200014c8": {
                    "1": "timer3_address"
                },
                "&DAT_20001540": {
                    "1": "timer2_address"
                },
                "&DAT_200015f8": {
                    "1": "timer1_address"
                },
                "**param_1": {
                    "1": "pwm_parameter_list"
                },
                "DAT_200014c8": {
                    "1": "pwm_timer3",
                    "4": "pwm_timer_3"
                },
                "DAT_20001540": {
                    "1": "pwm_channel2",
                    "4": "pwm_timer_2"
                },
                "DAT_200015f8": {
                    "1": "pwm_timer1",
                    "4": "pwm_timer_1"
                },
                "FUN_08002538": {
                    "1": "update_parameters",
                    "4": "get_pwm_parameters"
                },
                "FUN_08003ff4": {
                    "1": "initialize_pwm_timers",
                    "13": "start_pwm_timers",
                    "8": "start_pwm"
                },
                "HAL_TIM_PWM_Start": {
                    "1": "start_pwm_channel",
                    "10": "start_pwm",
                    "4": "start_pwm_timer"
                },
                "PTR_200014c8": {
                    "1": "timer3"
                },
                "PTR_20001540": {
                    "1": "timer2"
                },
                "PTR_200015f8": {
                    "1": "timer1"
                },
                "param_1": {
                    "1": "input_pointer",
                    "2": "parameter_list",
                    "3": "param"
                },
                "param_2": {
                    "1": "additional_parameter",
                    "2": "flag",
                    "4": "value",
                    "7": "param"
                },
                "undefined4": {
                    "1": "uint32_t"
                }
            },
            "called": [
                "FUN_08002538"
            ],
            "calling": [
                "FUN_08004028"
            ],
            "code": "\nvoid start_pwm_timers_08003ff4(void)\n\n{\n  start_pwm(&DAT_200015f8,4);\n  start_pwm(&DAT_20001540,8);\n  start_pwm(&DAT_200014c8,8);\n  start_pwm(&DAT_200014c8,0xc);\n  return;\n}\n\n",
            "current_name": "start_pwm_timers_08003ff4",
            "entrypoint": "0x08003ff4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08003ff4": "start_pwm_timers_08003ff4",
                "HAL_TIM_PWM_Start": "start_pwm"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004028": {
            "additional_data": {
                "FUN_08003f3c": {
                    "1": "toggle_led"
                },
                "FUN_08003ff4": {
                    "1": "pwm_init"
                },
                "FUN_08004028": {
                    "1": "initialize_and_blink_led",
                    "2": "blink_le_ds",
                    "3": "initialize_led",
                    "7": "initialize_le_ds",
                    "8": "initialize_led_sequence"
                },
                "FUN_0800458c": {
                    "1": "peripherals_init"
                },
                "PWM_Init": {
                    "9": "initialize_pwm"
                },
                "Peripherals_Init": {
                    "7": "initialize_peripherals"
                },
                "delay_ms": {
                    "1": "pause_milliseconds",
                    "12": "delay_milliseconds"
                },
                "iVar1": {
                    "1": "iteration_counter",
                    "2": "iteration_count",
                    "4": "counter",
                    "5": "loop_count",
                    "9": "loop_counter"
                },
                "param_1": {
                    "1": "first_param"
                },
                "param_2": {
                    "1": "second_param"
                },
                "param_3": {
                    "1": "third_param"
                },
                "peripherals_Init": {
                    "1": "initialize_peripherals"
                },
                "toggleLED": {
                    "1": "change_led_status",
                    "2": "toggle_led",
                    "3": "change_led_state",
                    "7": "toggle_led_state"
                }
            },
            "called": [
                "FUN_0800458c",
                "FUN_08003ff4",
                "FUN_08004f64",
                "FUN_08003f3c"
            ],
            "calling": [
                "FUN_08004194"
            ],
            "code": "\nvoid initialize_led_sequence_08004028(void)\n\n{\n  int loop_counter;\n  \n  initialize_peripherals();\n  initialize_pwm();\n  loop_counter = 3;\n  do {\n    toggle_led_state(1,0);\n    delay_milliseconds(100);\n    toggle_led_state(0,1);\n    delay_milliseconds(100);\n    toggle_led_state(0,0,1);\n    delay_milliseconds(100);\n    loop_counter = loop_counter + -1;\n  } while (loop_counter != 0);\n  toggle_led_state(1,1);\n  return;\n}\n\n",
            "current_name": "initialize_led_sequence_08004028",
            "entrypoint": "0x08004028",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004028": "initialize_led_sequence_08004028",
                "PWM_Init": "initialize_pwm",
                "Peripherals_Init": "initialize_peripherals",
                "delay_ms": "delay_milliseconds",
                "iVar1": "loop_counter",
                "toggleLED": "toggle_led_state"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800403c": {
            "additional_data": {
                "FUN_0800403c": {
                    "1": "write_i2c_with_delay",
                    "2": "write_data_with_delay",
                    "8": "write_data_to_i2_c",
                    "9": "write_i2c_data"
                },
                "HAL_I2C_Mem_Write": {
                    "1": "write_i2c_memory"
                },
                "_Error_Handler": {
                    "1": "handle_error"
                },
                "delay_ms": {
                    "1": "delay_milliseconds"
                },
                "iVar1": {
                    "1": "status",
                    "4": "result",
                    "7": "write_status",
                    "9": "write_result"
                },
                "local_14": {
                    "1": "status_code",
                    "13": "write_buffer",
                    "2": "write_data",
                    "5": "buffer",
                    "6": "data_buffer"
                },
                "param_1": {
                    "1": "memory_address",
                    "29": "device_address"
                },
                "param_2": {
                    "11": "memory_address",
                    "16": "register_address",
                    "4": "mem_address"
                },
                "param_3": {
                    "1": "register_value",
                    "2": "write_data",
                    "24": "data"
                },
                "param_4": {
                    "1": "delay_time",
                    "26": "delay_flag",
                    "4": "delay_enabled"
                }
            },
            "called": [
                "FUN_08001828",
                "FUN_08004f64",
                "FUN_08004490"
            ],
            "calling": [
                "FUN_0800411c",
                "FUN_08002ad0",
                "FUN_08002cb0",
                "FUN_08003298"
            ],
            "code": "\nvoid write_i2c_data_0800403c(undefined4 device_address,undefined4 register_address,undefined data,int delay_flag)\n\n{\n  int write_result;\n  undefined write_buffer [8];\n  \n  write_buffer[0] = data;\n  write_result = write_i2c_memory(&DAT_20001504,device_address,register_address,1,write_buffer,1,200);\n  if (write_result != 0) {\n    handle_error(\"../Src/i2c.c\",0x1b);\n  }\n  if (delay_flag != 0) {\n    delay_milliseconds(0x32);\n  }\n  return;\n}\n\n",
            "current_name": "write_i2c_data_0800403c",
            "entrypoint": "0x0800403c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800403c": "write_i2c_data_0800403c",
                "HAL_I2C_Mem_Write": "write_i2c_memory",
                "_Error_Handler": "handle_error",
                "delay_ms": "delay_milliseconds",
                "iVar1": "write_result",
                "local_14": "write_buffer",
                "param_1": "device_address",
                "param_2": "register_address",
                "param_3": "data",
                "param_4": "delay_flag"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800407c": {
            "additional_data": {
                "FUN_0800407c": {
                    "1": "read_memory",
                    "2": "read_i2_c_mem",
                    "4": "read_i2c_memory",
                    "5": "read_i2_c_memory"
                },
                "iVar1": {
                    "1": "read_status",
                    "2": "read_result"
                },
                "local_14": {
                    "1": "result",
                    "2": "read_result",
                    "3": "read_value",
                    "5": "data_buffer",
                    "7": "read_buffer"
                },
                "param_1": {
                    "1": "address",
                    "30": "device_address"
                },
                "param_2": {
                    "1": "data",
                    "10": "memory_address",
                    "17": "register_address",
                    "3": "mem_address"
                },
                "param_3": {
                    "1": "param_3",
                    "14": "error_handler_param_1",
                    "2": "error_handler_arg1",
                    "5": "error_handler_param1"
                },
                "param_4": {
                    "1": "error_handler2",
                    "14": "error_handler_param_2",
                    "2": "error_handler_arg2",
                    "5": "error_handler_param2"
                }
            },
            "called": [
                "FUN_08001938",
                "FUN_08004490"
            ],
            "calling": [
                "FUN_08002ad0",
                "FUN_08002cb0",
                "FUN_080040e8",
                "FUN_08002d88"
            ],
            "code": "\nundefined read_i2c_data_0800407c(undefined4 device_address,undefined4 register_address,undefined4 error_handler_param_1,undefined4 error_handler_param_2)\n\n{\n  int read_result;\n  undefined read_buffer [8];\n  \n  read_buffer[0] = 0;\n  read_result = HAL_I2C_Mem_Read(&DAT_20001504,device_address,register_address,1,read_buffer,1,200);\n  if (read_result != 0) {\n    _Error_Handler(error_handler_param_1,error_handler_param_2);\n  }\n  return read_buffer[0];\n}\n\n",
            "current_name": "read_i2c_data_0800407c",
            "entrypoint": "0x0800407c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800407c": "read_i2c_data_0800407c",
                "iVar1": "read_result",
                "local_14": "read_buffer",
                "param_1": "device_address",
                "param_2": "register_address",
                "param_3": "error_handler_param_1",
                "param_4": "error_handler_param_2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080040b8": {
            "additional_data": {
                "FUN_080040b8": {
                    "1": "read_from_i2_c",
                    "13": "read_i2_c_memory",
                    "2": "read_i2c_memory",
                    "3": "read_data_from_i2_c",
                    "4": "read_from_i2_c_memory"
                },
                "iVar1": {
                    "1": "status_code",
                    "15": "read_result",
                    "2": "read_status"
                },
                "param_1": {
                    "1": "buffer",
                    "28": "device_address"
                },
                "param_2": {
                    "1": "buffer",
                    "14": "memory_address",
                    "5": "register_address",
                    "8": "mem_address"
                },
                "param_3": {
                    "1": "memory_region",
                    "2": "mem_size",
                    "3": "size",
                    "4": "mem_address_size",
                    "6": "memory_address_size"
                },
                "param_4": {
                    "1": "output_buffer",
                    "2": "buffer_size",
                    "4": "data_length",
                    "5": "data_buffer",
                    "7": "p_data"
                },
                "param_5": {
                    "1": "error_handler_function",
                    "3": "error_handler",
                    "4": "error_callback",
                    "6": "error_handler1",
                    "9": "error_handler_param1"
                },
                "param_6": {
                    "1": "error_handler_arg",
                    "2": "error_handler_param",
                    "3": "error_param",
                    "6": "error_handler2",
                    "9": "error_handler_param2"
                }
            },
            "called": [
                "FUN_08001938",
                "FUN_08004490"
            ],
            "calling": [
                "FUN_08003034"
            ],
            "code": "\nvoid read_i2_c_memory_080040b8(undefined4 device_address,undefined4 memory_address,undefined4 memory_address_size,undefined4 p_data,\n                 undefined4 error_handler_param1,undefined4 error_handler_param2)\n\n{\n  int read_result;\n  \n  read_result = HAL_I2C_Mem_Read(&DAT_20001504,device_address,memory_address,1,memory_address_size,p_data,200,p_data);\n  if (read_result != 0) {\n    _Error_Handler(error_handler_param1,error_handler_param2);\n    return;\n  }\n  return;\n}\n\n",
            "current_name": "read_i2_c_memory_080040b8",
            "entrypoint": "0x080040b8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080040b8": "read_i2_c_memory_080040b8",
                "iVar1": "read_result",
                "param_1": "device_address",
                "param_2": "memory_address",
                "param_3": "memory_address_size",
                "param_4": "p_data",
                "param_5": "error_handler_param1",
                "param_6": "error_handler_param2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080040e8": {
            "additional_data": {
                "FUN_080040e8": {
                    "1": "read_multiple_bytes",
                    "2": "read_and_store_i2_c_data",
                    "3": "copy_i2_c_data",
                    "4": "read_data_from_i2_c",
                    "7": "read_and_store_bytes"
                },
                "iVar2": {
                    "1": "byte_index",
                    "11": "index",
                    "12": "i",
                    "3": "current_index"
                },
                "iVar4": {
                    "1": "block_size",
                    "11": "line_number",
                    "2": "file_index",
                    "3": "file_line"
                },
                "param_1": {
                    "1": "i2c_module",
                    "2": "device",
                    "25": "device_address"
                },
                "param_2": {
                    "1": "memory_address",
                    "15": "register_address",
                    "2": "start_address",
                    "3": "starting_address",
                    "7": "base_address"
                },
                "param_3": {
                    "1": "dest_address",
                    "14": "data_buffer",
                    "2": "buffer",
                    "3": "output_buffer"
                },
                "param_4": {
                    "1": "read_size",
                    "10": "num_bytes",
                    "2": "length",
                    "5": "buffer_size",
                    "7": "data_length"
                },
                "puVar3": {
                    "1": "buffer_pointer",
                    "2": "output_pointer",
                    "3": "dest_ptr",
                    "4": "p_buffer",
                    "5": "current_byte"
                },
                "uVar1": {
                    "1": "current_data",
                    "3": "data_byte",
                    "4": "byte_value",
                    "7": "byte_read",
                    "9": "read_byte"
                }
            },
            "called": [
                "FUN_0800407c"
            ],
            "calling": [
                "FUN_08002cb0",
                "FUN_08002bf0",
                "FUN_08003298",
                "FUN_08002b48",
                "FUN_08002d88"
            ],
            "code": "\nvoid read_and_store_bytes_080040e8(undefined4 device_address,int register_address,int data_buffer,int num_bytes)\n\n{\n  undefined read_byte;\n  int i;\n  undefined *current_byte;\n  int line_number;\n  \n  current_byte = (undefined *)(data_buffer + -1);\n  line_number = num_bytes;\n  for (i = 0; i < num_bytes; i = i + 1) {\n    read_byte = I2C_ReadByte(device_address,register_address + i & 0xffff,\"../Src/i2c.c\",0x4c,line_number);\n    current_byte = current_byte + 1;\n    *current_byte = read_byte;\n  }\n  return;\n}\n\n",
            "current_name": "read_and_store_bytes_080040e8",
            "entrypoint": "0x080040e8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080040e8": "read_and_store_bytes_080040e8",
                "iVar2": "i",
                "iVar4": "line_number",
                "param_1": "device_address",
                "param_2": "register_address",
                "param_3": "data_buffer",
                "param_4": "num_bytes",
                "puVar3": "current_byte",
                "uVar1": "read_byte"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800411c": {
            "additional_data": {
                "AHRS_ComputeAngles": {
                    "1": "calculate_ahrs"
                },
                "DAT_20000038": {
                    "1": "constant1"
                },
                "DAT_2000025e": {
                    "1": "data6"
                },
                "DAT_20000260": {
                    "1": "data5"
                },
                "DAT_20000262": {
                    "1": "sensor_multiplier4"
                },
                "DAT_20000264": {
                    "1": "sensor_multiplier3"
                },
                "DAT_20000266": {
                    "1": "var2"
                },
                "DAT_20000268": {
                    "1": "sensor_multiplier2"
                },
                "DAT_2000026c": {
                    "1": "sensor_data3"
                },
                "DAT_20000270": {
                    "1": "var1"
                },
                "DAT_20000274": {
                    "1": "should_send_i2_c_data",
                    "2": "flag2"
                },
                "DAT_20000275": {
                    "1": "should_send_msp_data",
                    "2": "flag1"
                },
                "DAT_20000278": {
                    "1": "previous_time2"
                },
                "DAT_2000027c": {
                    "1": "previous_time"
                },
                "DAT_2000028c": {
                    "1": "previous_time_ahrs"
                },
                "DAT_20000290": {
                    "1": "last_msp_millis"
                },
                "DAT_20000294": {
                    "1": "previous_time_pid"
                },
                "DAT_20000300": {
                    "1": "array1"
                },
                "DAT_2000034c": {
                    "1": "data_array2"
                },
                "DAT_20000350": {
                    "1": "sensor_data4"
                },
                "DAT_20000354": {
                    "1": "var9"
                },
                "DAT_20000358": {
                    "1": "sensor_data2"
                },
                "DAT_200014ab": {
                    "1": "constant2"
                },
                "FUN_08000168": {
                    "1": "calculate_imu_velocity",
                    "2": "multiply_and_shift",
                    "3": "calculate_angles",
                    "6": "calculate_angle"
                },
                "FUN_08000428": {
                    "1": "calculate_pid_error",
                    "2": "__subdf3"
                },
                "FUN_080004d0": {
                    "1": "pow_with_offset",
                    "2": "subtract_and_multiply",
                    "4": "msp_send_altitude"
                },
                "FUN_08000a30": {
                    "1": "calculate_value8",
                    "4": "ms5611_read_adc"
                },
                "FUN_08000adc": {
                    "1": "compute_shift_right",
                    "2": "multiply_and_shift",
                    "5": "calculate_value"
                },
                "FUN_08000c44": {
                    "1": "msp_send_pid",
                    "2": "send_pid"
                },
                "FUN_08000e54": {
                    "1": "calculate_var",
                    "2": "calculate_value3"
                },
                "FUN_08001078": {
                    "1": "calculate_value4",
                    "2": "msp_send_motor",
                    "3": "millis",
                    "5": "msp_send_attitude"
                },
                "FUN_08002f28": {
                    "1": "calculate_value3",
                    "2": "msp_send_status",
                    "6": "i2_c_write_byte",
                    "8": "msp_send_motor"
                },
                "FUN_08003034": {
                    "1": "check_condition4",
                    "2": "calculate_value2",
                    "5": "millis"
                },
                "FUN_0800403c": {
                    "1": "update_ahrs_compute_angles",
                    "12": "pid_update",
                    "2": "delay_if_needed",
                    "5": "update_pid"
                },
                "FUN_0800411c": {
                    "1": "update_flight_control",
                    "2": "update_flight_controls",
                    "3": "update_flight_controller"
                },
                "FUN_08004348": {
                    "1": "calculate_multiply",
                    "2": "send_altitude",
                    "5": "msp_send_pid",
                    "6": "msp_send_attitude"
                },
                "FUN_08004384": {
                    "1": "send_data_with_flag",
                    "2": "send_pid",
                    "5": "i2_c_write_byte"
                },
                "FUN_080043bc": {
                    "1": "msp_send_pid",
                    "2": "ms5611_read_adc",
                    "3": "msp_send_attitude",
                    "4": "msp_send_altitude"
                },
                "FUN_080043f0": {
                    "1": "send_ident_and_status",
                    "14": "msp_send_ident",
                    "2": "update_pid",
                    "3": "send_ident",
                    "5": "pid_update"
                },
                "FUN_08004410": {
                    "1": "msp_send_altitude",
                    "2": "__muldf3",
                    "3": "msp_send_pid",
                    "4": "i2_c_write_byte"
                },
                "FUN_08004434": {
                    "1": "send_attitude_and_altitude",
                    "14": "msp_send_status",
                    "2": "send_msp_data",
                    "3": "msp_send_data",
                    "4": "send_status"
                },
                "FUN_08004458": {
                    "1": "update_angles",
                    "24": "ahrs_compute_angles",
                    "3": "update_ahrs"
                },
                "FUN_08004a84": {
                    "1": "i2_c_write_byte_1",
                    "2": "millis",
                    "4": "msp_send_pid"
                },
                "FUN_08005900": {
                    "1": "another_calculation",
                    "2": "calculate_pow",
                    "4": "msp_send_raw_imu",
                    "8": "pow"
                },
                "I2C_WriteByte": {
                    "1": "write_byte"
                },
                "MS5611_ReadADC": {
                    "1": "read_adc"
                },
                "MSP_SendAltitude": {
                    "1": "send_altitude_data"
                },
                "MSP_SendAttitude": {
                    "1": "send_attitude_data"
                },
                "MSP_SendIdent": {
                    "1": "send_ident_data"
                },
                "MSP_SendMotor": {
                    "1": "send_motor_data"
                },
                "MSP_SendPID": {
                    "1": "send_pid_data"
                },
                "MSP_SendRawIMU": {
                    "1": "send_raw_imu_data"
                },
                "MSP_SendStatus": {
                    "1": "send_status_data"
                },
                "PID_Update": {
                    "1": "update_pid_values"
                },
                "__addsf3": {
                    "1": "add_floats"
                },
                "__aeabi_f2d": {
                    "1": "float_to_double"
                },
                "__aeabi_f2iz": {
                    "1": "float_to_int"
                },
                "__aeabi_fdiv": {
                    "1": "divide_floats"
                },
                "__floatsisf": {
                    "1": "int_to_float"
                },
                "__muldf3": {
                    "1": "multiply_double"
                },
                "__subdf3": {
                    "1": "subtract_double"
                },
                "__truncdfsf2": {
                    "1": "truncate_double_to_float"
                },
                "iVar14": {
                    "1": "value1"
                },
                "iVar15": {
                    "1": "i_var15"
                },
                "iVar8": {
                    "1": "current_time",
                    "2": "current_millis"
                },
                "lVar2": {
                    "1": "l_var2"
                },
                "millis": {
                    "1": "get_current_time"
                },
                "pow": {
                    "1": "power_function"
                },
                "puVar13": {
                    "1": "pointer"
                },
                "uVar10": {
                    "1": "new_value2"
                },
                "uVar11": {
                    "1": "new_value3"
                },
                "uVar12": {
                    "1": "value2"
                },
                "uVar17": {
                    "1": "result"
                },
                "uVar4": {
                    "1": "sensor_value5"
                },
                "uVar5": {
                    "1": "sensor_value6"
                },
                "uVar6": {
                    "1": "calculation1"
                },
                "uVar7": {
                    "1": "new_value6"
                },
                "uVar9": {
                    "1": "sensor_value1"
                }
            },
            "called": [
                "FUN_08004458",
                "FUN_0800403c",
                "FUN_080043f0",
                "FUN_08004f5c",
                "FUN_08004434",
                "FUN_08000168",
                "FUN_08000adc",
                "FUN_08002f28",
                "FUN_08001078",
                "FUN_080004d0",
                "FUN_08005900",
                "FUN_08004348",
                "FUN_08000a30",
                "FUN_08000c44",
                "FUN_080043bc",
                "FUN_08000428",
                "FUN_08004410",
                "FUN_08003034",
                "FUN_08004a84",
                "FUN_08000e54",
                "FUN_08004384"
            ],
            "calling": [
                "FUN_080041ae"
            ],
            "code": "\nvoid update_flight_data_0800411c(void)\n\n{\n  undefined4 *puVar1;\n  longlong calc_value;\n  uint uVar3;\n  uint new_value4;\n  uint sensor_value6;\n  undefined4 new_value5;\n  undefined4 new_value6;\n  int current_millis;\n  uint new_value1;\n  uint new_value2;\n  uint new_value3;\n  uint value2;\n  undefined4 *pointer;\n  undefined4 unaff_r4;\n  int value1;\n  int i_var15;\n  bool bVar16;\n  undefined8 result;\n  \n  current_millis = get_current_time();\n  if (1 < (uint)(current_millis - DAT_2000028c)) {\n    DAT_2000028c = get_current_time();\n    calculate_ahrs();\n  }\n  current_millis = get_current_time();\n  if (2 < (uint)(current_millis - DAT_20000294)) {\n    DAT_20000294 = get_current_time();\n    update_pid_values();\n  }\n  current_millis = get_current_time();\n  if (3 < (uint)(current_millis - DAT_20000290)) {\n    DAT_20000290 = get_current_time();\n    send_ident_data();\n    send_status_data();\n    send_motor_data();\n    send_attitude_data();\n    send_altitude_data();\n    send_raw_imu_data();\n    send_pid_data();\n  }\n  if ((DAT_20000275 != '\\0') && (DAT_20000274 != '\\0')) {\n    i_var15 = DAT_20000270 + (uint)DAT_20000266 * -0x100;\n    new_value1 = (uint)((longlong)(int)(uint)DAT_20000268 * (longlong)i_var15) >> 0x17 |\n            (int)((ulonglong)((longlong)(int)(uint)DAT_20000268 * (longlong)i_var15) >> 0x20) << 9;\n    new_value2 = (uint)((longlong)(int)(uint)DAT_20000264 * (longlong)i_var15 >> 7);\n    new_value3 = new_value2 + (uint)DAT_20000260 * 0x10000;\n    new_value4 = (uint)((ulonglong)((longlong)(int)(uint)DAT_20000262 * (longlong)i_var15) >> 8);\n    current_millis = new_value1 + 2000;\n    sensor_value6 = new_value4 + (uint)DAT_2000025e * 0x8000;\n    bVar16 = (int)new_value1 < 0;\n    if (1999 < current_millis) {\n      new_value1 = 0;\n    }\n    uVar3 = new_value1;\n    if (bVar16 != SBORROW4(current_millis,2000)) {\n      value1 = new_value1 * new_value1 * 5;\n      new_value1 = value1 >> 2;\n      uVar3 = value1 >> 1;\n    }\n    value2 = new_value3 - uVar3;\n    calc_value = (ulonglong)(sensor_value6 - new_value1) * (ulonglong)DAT_2000026c;\n    value1 = DAT_2000026c *\n             ((((int)((longlong)(int)(uint)DAT_20000262 * (longlong)i_var15 >> 0x28) +\n               (uint)CARRY4(new_value4,(uint)DAT_2000025e * 0x8000)) - ((int)new_value1 >> 0x1f)) -\n             (uint)(sensor_value6 < new_value1)) + (int)((ulonglong)calc_value >> 0x20);\n    new_value4 = (uint)calc_value >> 0x15 | value1 * 0x800;\n    new_value5 = int_to_float(new_value4 - value2 >> 0xf |\n                        (((value1 >> 0x15) -\n                         ((((int)((longlong)(int)(uint)DAT_20000264 * (longlong)i_var15 >> 0x27) +\n                           (uint)CARRY4(new_value2,(uint)DAT_20000260 * 0x10000)) - ((int)uVar3 >> 0x1f)\n                          ) - (uint)(new_value3 < uVar3))) - (uint)(new_value4 < value2)) * 0x20000);\n    new_value5 = divide_floats(new_value5,0x42c80000);\n    DAT_20000354 = new_value5;\n    new_value6 = int_to_float(current_millis);\n    DAT_20000358 = divide_floats(new_value6,0x42c80000);\n    divide_floats(new_value5,0x447d5000);\n    result = float_to_double();\n    result = power_function((int)result,(int)((ulonglong)result >> 0x20),0x60000000,0x3fc85b95);\n    result = subtract_double(0,0x3ff00000,(int)result,(int)((ulonglong)result >> 0x20));\n    multiply_double((int)result,(int)((ulonglong)result >> 0x20),0,0x40e5a540);\n    new_value5 = truncate_double_to_float();\n    new_value6 = 0;\n    pointer = &DAT_20000300;\n    DAT_20000350 = new_value5;\n    do {\n      puVar1 = pointer + 1;\n      *pointer = *puVar1;\n      new_value6 = add_floats(new_value6);\n      pointer = puVar1;\n    } while (puVar1 != &DAT_2000034c);\n    DAT_2000034c = new_value5;\n    new_value5 = add_floats(new_value6,new_value5);\n    DAT_200002fc = divide_floats(new_value5,0x41a00000);\n    current_millis = float_to_int();\n    DAT_200014ab = current_millis * 100;\n    DAT_20000275 = '\\0';\n    DAT_20000274 = '\\0';\n    write_byte(0xee,DAT_20000038 + 0x50,1);\n    DAT_2000027c = get_current_time();\n  }\n  current_millis = get_current_time();\n  if (((10 < (uint)(current_millis - DAT_2000027c)) && (DAT_20000275 == '\\0')) && (DAT_20000274 == '\\0')) {\n    DAT_20000270 = read_adc();\n    DAT_20000275 = '\\x01';\n    write_byte(0xee,DAT_20000038 + 0x40,1,0,unaff_r4);\n    DAT_20000278 = get_current_time();\n  }\n  current_millis = get_current_time();\n  if (((10 < (uint)(current_millis - DAT_20000278)) && (DAT_20000275 != '\\0')) && (DAT_20000274 == '\\0')) {\n    DAT_2000026c = read_adc();\n    DAT_20000274 = '\\x01';\n  }\n  return;\n}\n\n",
            "current_name": "update_flight_data_0800411c",
            "entrypoint": "0x0800411c",
            "imported": false,
            "improved": true,
            "renaming": {
                "AHRS_ComputeAngles": "calculate_ahrs",
                "FUN_0800411c": "update_flight_data_0800411c",
                "I2C_WriteByte": "write_byte",
                "MS5611_ReadADC": "read_adc",
                "MSP_SendAltitude": "send_altitude_data",
                "MSP_SendAttitude": "send_attitude_data",
                "MSP_SendIdent": "send_ident_data",
                "MSP_SendMotor": "send_motor_data",
                "MSP_SendPID": "send_pid_data",
                "MSP_SendRawIMU": "send_raw_imu_data",
                "MSP_SendStatus": "send_status_data",
                "PID_Update": "update_pid_values",
                "__addsf3": "add_floats",
                "__aeabi_f2d": "float_to_double",
                "__aeabi_f2iz": "float_to_int",
                "__aeabi_fdiv": "divide_floats",
                "__floatsisf": "int_to_float",
                "__muldf3": "multiply_double",
                "__subdf3": "subtract_double",
                "__truncdfsf2": "truncate_double_to_float",
                "iVar14": "value1",
                "iVar15": "i_var15",
                "iVar8": "current_millis",
                "lVar2": "calc_value",
                "millis": "get_current_time",
                "pow": "power_function",
                "puVar13": "pointer",
                "uVar10": "new_value2",
                "uVar11": "new_value3",
                "uVar12": "value2",
                "uVar17": "result",
                "uVar4": "new_value4",
                "uVar5": "sensor_value6",
                "uVar6": "new_value5",
                "uVar7": "new_value6",
                "uVar9": "new_value1"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004194": {
            "additional_data": {
                "DAT_20000050": {
                    "1": "var25"
                },
                "DAT_20000054": {
                    "1": "var26"
                },
                "DAT_20000058": {
                    "1": "var27"
                },
                "DAT_2000005c": {
                    "1": "var28"
                },
                "DAT_20000060": {
                    "1": "var29"
                },
                "DAT_20000064": {
                    "1": "var30"
                },
                "DAT_2000006c": {
                    "1": "variable8"
                },
                "DAT_20000098": {
                    "1": "variable4"
                },
                "DAT_200000ac": {
                    "1": "variable9"
                },
                "DAT_200000b0": {
                    "1": "variable10"
                },
                "DAT_200000b4": {
                    "1": "var9"
                },
                "DAT_200000b8": {
                    "1": "var10"
                },
                "DAT_200000bc": {
                    "1": "var11"
                },
                "DAT_200000c0": {
                    "1": "variable14"
                },
                "DAT_200000c8": {
                    "1": "variable5"
                },
                "DAT_200000f4": {
                    "1": "flag1"
                },
                "DAT_20000108": {
                    "1": "variable15"
                },
                "DAT_2000010c": {
                    "1": "variable16"
                },
                "DAT_20000110": {
                    "1": "var15"
                },
                "DAT_20000114": {
                    "1": "variable18"
                },
                "DAT_20000118": {
                    "1": "variable19"
                },
                "DAT_2000011c": {
                    "1": "variable20"
                },
                "DAT_20000124": {
                    "1": "var4"
                },
                "DAT_20000150": {
                    "1": "flag2"
                },
                "DAT_20000164": {
                    "1": "var19"
                },
                "DAT_20000168": {
                    "1": "var20"
                },
                "DAT_2000016c": {
                    "1": "variable23"
                },
                "DAT_20000170": {
                    "1": "var22"
                },
                "DAT_20000174": {
                    "1": "var23"
                },
                "DAT_20000178": {
                    "1": "var24"
                },
                "DAT_20000180": {
                    "1": "var5"
                },
                "DAT_200001ac": {
                    "1": "var1"
                },
                "Devices_Init": {
                    "10": "initialize_devices"
                },
                "FUN_08002ea0": {
                    "1": "initialize_sensor",
                    "2": "set_imu_parameters",
                    "5": "initialize_imu",
                    "7": "imu_init"
                },
                "FUN_08003298": {
                    "1": "configure_devices",
                    "2": "init_devices",
                    "3": "initialize_imu",
                    "7": "devices_init"
                },
                "FUN_08004028": {
                    "1": "initialize_sensor",
                    "2": "initialize_sensors",
                    "5": "initialize_ms5611",
                    "8": "ms5611_init"
                },
                "FUN_08004194": {
                    "1": "initialize_peripherals",
                    "2": "initialize_device",
                    "21": "initialize_system",
                    "6": "initialize_devices"
                },
                "FUN_08004c70": {
                    "1": "get_temperature",
                    "3": "get_serial_data",
                    "9": "serial_begin"
                },
                "IMU_Init": {
                    "11": "initialize_imu"
                },
                "MS5611_Init": {
                    "1": "initialize_pressure_sensor",
                    "10": "initialize_ms5611"
                },
                "initializeDevices": {
                    "1": "initialize_devices"
                },
                "initializeIMU": {
                    "1": "initialize_imu"
                },
                "initializeMS5611": {
                    "1": "initialize_ms5611"
                },
                "initializeSerialCommunication": {
                    "1": "initialize_serial_communication"
                },
                "initializeSystem": {
                    "1": "initialize_system"
                },
                "param_1": {
                    "1": "unspecified_param_1",
                    "3": "param1"
                },
                "param_2": {
                    "1": "unspecified_param_2",
                    "3": "param2"
                },
                "param_3": {
                    "1": "unspecified_param_3",
                    "3": "param3"
                },
                "param_4": {
                    "1": "parameter_4",
                    "3": "param4"
                },
                "serialBegin": {
                    "1": "start_serial_communication",
                    "3": "initialize_serial_communication",
                    "6": "initialize_serial"
                }
            },
            "called": [
                "FUN_08003298",
                "FUN_08004c70",
                "FUN_08002ea0",
                "FUN_08004028"
            ],
            "calling": [
                "FUN_080041ae"
            ],
            "code": "\nvoid initialize_system_08004194(void)\n\n{\n  initialize_devices();\n  initialize_serial();\n  initialize_imu();\n  initialize_ms5611();\n  DAT_200000f4 = 1;\n  DAT_20000150 = 1;\n  DAT_200001ac = 0xffffffff;\n  DAT_20000098 = 1;\n  DAT_200000c8 = 0x44bb8000;\n  DAT_20000124 = 0x44b54000;\n  DAT_20000180 = 0x44fa0000;\n  DAT_2000006c = 0;\n  DAT_200000ac = 0x408ccccd;\n  DAT_200000b0 = 0x3ca3d70a;\n  DAT_200000b4 = 0x438c0000;\n  DAT_200000b8 = 0x40900000;\n  DAT_200000bc = 0x3ca3d70a;\n  DAT_200000c0 = 0x43b40000;\n  DAT_20000108 = 0x40733333;\n  DAT_2000010c = 0x3ca3d70a;\n  DAT_20000110 = 0x43820000;\n  DAT_20000114 = 0x40733333;\n  DAT_20000118 = 0x3ca3d70a;\n  DAT_2000011c = 0x43a00000;\n  DAT_20000164 = 0x40400000;\n  DAT_20000168 = 0x3c23d70a;\n  DAT_2000016c = 0x438c0000;\n  DAT_20000170 = 0;\n  DAT_20000174 = 0;\n  DAT_20000178 = 0;\n  DAT_20000050 = 0x41200000;\n  DAT_20000054 = 0;\n  DAT_20000058 = 0;\n  DAT_2000005c = 0;\n  DAT_20000060 = 0;\n  DAT_20000064 = 0;\n  return;\n}\n\n",
            "current_name": "initialize_system_08004194",
            "entrypoint": "0x08004194",
            "imported": false,
            "improved": true,
            "renaming": {
                "Devices_Init": "initialize_devices",
                "FUN_08004194": "initialize_system_08004194",
                "IMU_Init": "initialize_imu",
                "MS5611_Init": "initialize_ms5611",
                "serialBegin": "initialize_serial"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080041ae": {
            "additional_data": {
                "FUN_0800114c": {
                    "1": "perform_initialization",
                    "2": "initialize",
                    "4": "increment_tick",
                    "6": "perform_task"
                },
                "FUN_08003eb0": {
                    "1": "calculate_long_long_value",
                    "2": "calculate_result",
                    "3": "calculate_checksum",
                    "5": "process_data",
                    "9": "calculate_value"
                },
                "FUN_0800411c": {
                    "1": "some_function",
                    "11": "setup",
                    "2": "setup_forkserver",
                    "4": "initialize",
                    "6": "initialize_forkserver"
                },
                "FUN_08004194": {
                    "1": "some_other_function",
                    "2": "perform_cleanup",
                    "3": "cleanup",
                    "4": "setup_environment"
                },
                "FUN_080041ae": {
                    "1": "execute_tasks",
                    "2": "run_scheduler",
                    "3": "run_application",
                    "5": "main_loop"
                },
                "HAL_IncTick": {
                    "1": "increment_tick"
                },
                "param_1": {
                    "1": "input_value"
                },
                "setup": {
                    "1": "initialize_application",
                    "2": "initialize"
                },
                "startForkserver": {
                    "2": "initialize_forkserver"
                },
                "taskScheduler": {
                    "1": "execute_scheduled_tasks",
                    "2": "schedule_tasks"
                }
            },
            "called": [
                "FUN_0800411c",
                "FUN_08003eb0",
                "FUN_0800114c",
                "FUN_08004194"
            ],
            "calling": [
                "FUN_08004f68"
            ],
            "code": "\nvoid main_loop_080041ae(void)\n\n{\n  initialize_forkserver(0);\n  initialize();\n  do {\n    increment_sys_tick();\n    schedule_tasks();\n  } while( true );\n}\n\n",
            "current_name": "main_loop_080041ae",
            "entrypoint": "0x080041ae",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080041ae": "main_loop_080041ae",
                "HAL_IncTick": "increment_sys_tick",
                "setup": "initialize",
                "startForkserver": "initialize_forkserver",
                "taskScheduler": "schedule_tasks"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080041c4": {
            "additional_data": {
                "FUN_08003fc4": {
                    "1": "initialize_motor1"
                },
                "FUN_08003fd0": {
                    "1": "initialize_motor4"
                },
                "FUN_08003fdc": {
                    "1": "initialize_motor3"
                },
                "FUN_08003fe8": {
                    "1": "initialize_motor2"
                },
                "FUN_080041c4": {
                    "1": "disable_all_motors",
                    "25": "stop_motors",
                    "3": "disable_motors"
                },
                "Motor1_SetPWM": {
                    "1": "set_motor1_pwm"
                },
                "Motor2_SetPWM": {
                    "1": "set_motor2_pwm"
                },
                "Motor3_SetPWM": {
                    "1": "set_motor3_pwm"
                },
                "Motor4_SetPWM": {
                    "1": "set_motor4_pwm"
                },
                "extraout_r1": {
                    "1": "unused_extra_output_r1"
                },
                "param_1": {
                    "1": "not_used_1",
                    "11": "unused_param1",
                    "2": "unused",
                    "5": "unused_param_1",
                    "6": "unused_param"
                },
                "param_2": {
                    "1": "arg2",
                    "11": "unused_param2",
                    "2": "unused",
                    "5": "unused2",
                    "6": "unused_param"
                },
                "param_3": {
                    "1": "arg3",
                    "11": "unused_param3",
                    "2": "unused",
                    "5": "unused_param_3",
                    "6": "unused_param"
                },
                "param_4": {
                    "1": "not_used_4",
                    "11": "unused_param4",
                    "2": "unused",
                    "5": "unused4",
                    "6": "unused_param"
                }
            },
            "called": [
                "FUN_08003fc4",
                "FUN_08003fe8",
                "FUN_08003fdc",
                "FUN_08003fd0"
            ],
            "calling": [
                "FUN_08004a84"
            ],
            "code": "\nvoid stop_motors_080041c4(undefined4 unused_param1,undefined4 unused_param2,undefined4 unused_param3,undefined4 unused_param4)\n\n{\n  undefined4 unused_extra_output_r1;\n  \n  set_motor1_pwm(0);\n  set_motor2_pwm(0);\n  set_motor3_pwm(0);\n  set_motor4_pwm(0,unused_extra_output_r1,unused_param3,unused_param4);\n  return;\n}\n\n",
            "current_name": "stop_motors_080041c4",
            "entrypoint": "0x080041c4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080041c4": "stop_motors_080041c4",
                "Motor1_SetPWM": "set_motor1_pwm",
                "Motor2_SetPWM": "set_motor2_pwm",
                "Motor3_SetPWM": "set_motor3_pwm",
                "Motor4_SetPWM": "set_motor4_pwm",
                "extraout_r1": "unused_extra_output_r1",
                "param_1": "unused_param1",
                "param_2": "unused_param2",
                "param_3": "unused_param3",
                "param_4": "unused_param4"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800426c": {
            "additional_data": {
                "DAT_20000298": {
                    "1": "motor1_pw"
                },
                "DAT_2000029c": {
                    "1": "motor2_pw"
                },
                "DAT_200002a0": {
                    "1": "motor3_pw"
                },
                "DAT_200002a4": {
                    "1": "motor4_pw"
                },
                "FUN_0800426c": {
                    "1": "update_motor_pulse_widths",
                    "2": "calculate_motor_pwm",
                    "6": "control_motors",
                    "7": "update_motor_pwm"
                },
                "param_1": {
                    "1": "speed_param1",
                    "15": "input1",
                    "2": "value1",
                    "3": "param1"
                },
                "param_2": {
                    "1": "acceleration",
                    "15": "input2",
                    "2": "value2",
                    "3": "speed2"
                },
                "param_3": {
                    "1": "motion3",
                    "15": "input3",
                    "2": "value3",
                    "3": "speed3"
                },
                "param_4": {
                    "1": "input_param_4",
                    "15": "input4",
                    "2": "value4",
                    "3": "speed4"
                },
                "uVar1": {
                    "1": "temp_var1",
                    "13": "result1",
                    "2": "sub_result1",
                    "3": "var1",
                    "9": "temp1"
                },
                "uVar2": {
                    "1": "add1",
                    "13": "result2",
                    "2": "add_result1",
                    "3": "var2",
                    "9": "temp2"
                },
                "uVar3": {
                    "1": "difference2",
                    "13": "result3",
                    "2": "sub_result2",
                    "3": "var3",
                    "9": "temp3"
                },
                "uVar4": {
                    "1": "float_to_int1",
                    "11": "result4",
                    "2": "converted1",
                    "3": "var4",
                    "6": "temp4"
                },
                "uVar5": {
                    "1": "conversion2_result",
                    "11": "result5",
                    "2": "converted2",
                    "3": "var5",
                    "6": "temp5"
                },
                "uVar6": {
                    "1": "conversion3",
                    "11": "result6",
                    "2": "converted3",
                    "3": "var6",
                    "6": "temp6"
                },
                "uVar7": {
                    "1": "float_to_int4",
                    "11": "result7",
                    "2": "converted4",
                    "3": "var7",
                    "6": "temp7"
                }
            },
            "called": [
                "FUN_08000ad8",
                "FUN_08003fc4",
                "FUN_08003fe8",
                "FUN_08000adc",
                "FUN_08001078",
                "FUN_08003fdc",
                "FUN_08003fd0"
            ],
            "calling": [
                "FUN_08004a84"
            ],
            "code": "\n\n\nvoid update_motor_pwm_0800426c(undefined4 input1,undefined4 input2,undefined4 input3,undefined4 input4)\n\n{\n  undefined4 result1;\n  undefined4 result2;\n  undefined4 result3;\n  uint result4;\n  uint result5;\n  uint result6;\n  uint result7;\n  \n  result1 = __aeabi_fsub();\n  result2 = __addsf3(input1,input2);\n  result3 = __aeabi_fsub(result1,input3);\n  result3 = __addsf3(result3,input4);\n  __aeabi_fsub(result3,0x447a0000);\n  result4 = __aeabi_f2iz();\n  result3 = __aeabi_fsub(result2,input3);\n  result3 = __aeabi_fsub(result3,input4);\n  __aeabi_fsub(result3,0x447a0000);\n  result5 = __aeabi_f2iz();\n  result1 = __addsf3(result1,input3);\n  result1 = __aeabi_fsub(result1,input4);\n  __aeabi_fsub(result1,0x447a0000);\n  result6 = __aeabi_f2iz();\n  result1 = __addsf3(input3,result2);\n  result1 = __addsf3(result1,input4);\n  __aeabi_fsub(result1,0x447a0000);\n  result7 = __aeabi_f2iz();\n  if (999 < (int)result7) {\n    result7 = 1000;\n  }\n  if (999 < (int)result6) {\n    result6 = 1000;\n  }\n  if (999 < (int)result5) {\n    result5 = 1000;\n  }\n  if (999 < (int)result4) {\n    result4 = 1000;\n  }\n  DAT_200002a0 = result5 & ~((int)result5 >> 0x1f);\n  DAT_200002a4 = result4 & ~((int)result4 >> 0x1f);\n  DAT_2000029c = result6 & ~((int)result6 >> 0x1f);\n  DAT_20000298 = result7 & ~((int)result7 >> 0x1f);\n  Motor1_SetPWM();\n  Motor2_SetPWM(DAT_2000029c);\n  Motor3_SetPWM(DAT_200002a0);\n  Motor4_SetPWM(DAT_200002a4);\n  _DAT_200013dd = (short)DAT_20000298 + 1000;\n  DAT_200013df = (short)DAT_2000029c + 1000;\n  _DAT_200013e1 = (short)DAT_200002a0 + 1000;\n  DAT_200013e3 = (short)DAT_200002a4 + 1000;\n  return;\n}\n\n",
            "current_name": "update_motor_pwm_0800426c",
            "entrypoint": "0x0800426c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800426c": "update_motor_pwm_0800426c",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "result1",
                "uVar2": "result2",
                "uVar3": "result3",
                "uVar4": "result4",
                "uVar5": "result5",
                "uVar6": "result6",
                "uVar7": "result7"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004300": {
            "additional_data": {
                "FUN_08004300": {
                    "1": "print_byte_array_with_checksum",
                    "11": "print_and_calculate_checksum",
                    "3": "print_data_with_checksum",
                    "5": "print_and_checksum"
                },
                "param_1": {
                    "1": "input_param",
                    "2": "checksum_seed",
                    "3": "input1",
                    "4": "xor_key",
                    "5": "key",
                    "6": "input_value"
                },
                "param_2": {
                    "1": "input_data",
                    "19": "data",
                    "3": "byte_array"
                },
                "param_3": {
                    "1": "array_size",
                    "14": "data_length",
                    "2": "byte_array_length",
                    "3": "length",
                    "6": "data_size"
                },
                "pbVar2": {
                    "1": "byte_pointer",
                    "2": "ptr",
                    "24": "current_byte"
                },
                "uVar1": {
                    "1": "checksum_byte",
                    "13": "checksum",
                    "2": "checksum_result",
                    "6": "result"
                }
            },
            "called": [
                "FUN_08004c18",
                "FUN_08004c8c"
            ],
            "calling": [
                "FUN_08004458",
                "FUN_080043f0",
                "FUN_08004434",
                "FUN_080043bc",
                "FUN_08004410",
                "FUN_08004348",
                "FUN_08004384"
            ],
            "code": "\nvoid print_and_calculate_checksum_08004300(uint input_value,byte *data,uint data_length)\n\n{\n  uint checksum;\n  byte *current_byte;\n  \n  serialPrint(&DAT_0800732e);\n  serialWrite(data_length & 0xff);\n  checksum = data_length & 0xff ^ input_value;\n  serialWrite(input_value);\n  for (current_byte = data; (int)current_byte - (int)data < (int)data_length; current_byte = current_byte + 1) {\n    serialWrite(*current_byte);\n    checksum = checksum ^ *current_byte;\n  }\n  serialWrite(checksum);\n  return;\n}\n\n",
            "current_name": "print_and_calculate_checksum_08004300",
            "entrypoint": "0x08004300",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004300": "print_and_calculate_checksum_08004300",
                "param_1": "input_value",
                "param_2": "data",
                "param_3": "data_length",
                "pbVar2": "current_byte",
                "uVar1": "checksum"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004348": {
            "additional_data": {
                "FUN_08004300": {
                    "1": "send_frame"
                },
                "FUN_08004348": {
                    "1": "send_frame_with_data",
                    "17": "send_frame_to_msp",
                    "3": "send_frame_data",
                    "7": "send_frame"
                },
                "MSP_SendFrame": {
                    "1": "send_frame_function"
                },
                "local_10": {
                    "1": "sequence_number",
                    "18": "frame_data",
                    "2": "frame",
                    "3": "frame_size"
                },
                "local_c": {
                    "1": "masked_param_2",
                    "2": "masked_arg2",
                    "6": "masked_size",
                    "7": "masked_param2"
                },
                "param_1": {
                    "1": "input1",
                    "10": "param1",
                    "2": "param_1",
                    "5": "arg1"
                },
                "param_2": {
                    "1": "frame_id",
                    "10": "frame_size",
                    "2": "arg2",
                    "3": "data_size",
                    "5": "frame_data"
                },
                "param_3": {
                    "1": "payload",
                    "10": "param3",
                    "2": "arg2",
                    "3": "arg3"
                },
                "uStack_8": {
                    "1": "local_var3",
                    "2": "arg3_copy",
                    "5": "param3_copy"
                }
            },
            "called": [
                "FUN_08004300"
            ],
            "calling": [
                "FUN_0800411c"
            ],
            "code": "\n\n\nvoid send_frame_to_msp_08004348(undefined4 param1,uint frame_size,undefined4 param3)\n\n{\n  undefined4 frame_data;\n  uint masked_param2;\n  undefined4 param3_copy;\n  \n  _DAT_20001423 = 0x40003e9;\n  _DAT_20001427 = 0;\n  DAT_20001429 = 0;\n  frame_data = 0x40003e9;\n  masked_param2 = frame_size & 0xff000000;\n  param3_copy = param3;\n  send_frame_function(100,&frame_data,7);\n  return;\n}\n\n",
            "current_name": "send_frame_to_msp_08004348",
            "entrypoint": "0x08004348",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004348": "send_frame_to_msp_08004348",
                "MSP_SendFrame": "send_frame_function",
                "local_10": "frame_data",
                "local_c": "masked_param2",
                "param_1": "param1",
                "param_2": "frame_size",
                "param_3": "param3",
                "uStack_8": "param3_copy"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004384": {
            "additional_data": {
                "FUN_08004384": {
                    "1": "send_frame_with_params",
                    "15": "send_frame_to_msp",
                    "5": "send_data_frame",
                    "8": "send_frame"
                },
                "MSP_SendFrame": {
                    "1": "transmit_frame"
                },
                "local_14": {
                    "1": "frame_config",
                    "2": "frame_buffer",
                    "3": "frame_type",
                    "6": "frame_data"
                },
                "local_c": {
                    "1": "local_var3",
                    "14": "masked_flags",
                    "2": "masked_options",
                    "4": "masked_param4"
                },
                "param_1": {
                    "1": "data_parameter",
                    "2": "param1",
                    "3": "arg1",
                    "5": "data",
                    "8": "frame_data"
                },
                "param_2": {
                    "1": "destination_address",
                    "2": "param_2",
                    "3": "arg2",
                    "5": "buffer",
                    "6": "param2"
                },
                "param_3": {
                    "1": "length",
                    "2": "param_3",
                    "3": "arg3",
                    "5": "param3",
                    "6": "frame_size"
                },
                "param_4": {
                    "1": "config_size",
                    "16": "flags",
                    "2": "arg4",
                    "4": "param4"
                },
                "uStack_10": {
                    "1": "stack_ptr",
                    "2": "constant",
                    "3": "constant_value"
                }
            },
            "called": [
                "FUN_08004300"
            ],
            "calling": [
                "FUN_0800411c"
            ],
            "code": "\n\n\nvoid send_frame_to_msp_08004384(undefined4 frame_data,undefined4 param2,undefined4 frame_size,uint flags)\n\n{\n  undefined4 frame_data;\n  undefined4 constant_value;\n  uint masked_flags;\n  \n  _DAT_200013bd = 0x2a0007;\n  frame_data = _DAT_200013b9;\n  constant_value = 0x2a0007;\n  _DAT_200013c1 = 0;\n  DAT_200013c3 = 0;\n  masked_flags = flags & 0xff000000;\n  transmit_frame(0x65,&frame_data,0xb,0,frame_data);\n  return;\n}\n\n",
            "current_name": "send_frame_to_msp_08004384",
            "entrypoint": "0x08004384",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004384": "send_frame_to_msp_08004384",
                "MSP_SendFrame": "transmit_frame",
                "local_14": "frame_data",
                "local_c": "masked_flags",
                "param_1": "frame_data",
                "param_2": "param2",
                "param_3": "frame_size",
                "param_4": "flags",
                "uStack_10": "constant_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080043bc": {
            "additional_data": {
                "FUN_08004300": {
                    "1": "process_frame",
                    "2": "send_frame",
                    "3": "process_data"
                },
                "FUN_080043bc": {
                    "1": "send_data_frame",
                    "14": "send_frame_data",
                    "3": "send_data_to_msp",
                    "6": "send_data"
                },
                "local_1c": {
                    "1": "result_array",
                    "2": "temp_storage",
                    "4": "temp_buffer"
                },
                "local_24": {
                    "1": "source_data_buffer",
                    "3": "data_buffer",
                    "5": "copied_data",
                    "7": "frame_data"
                },
                "param_1": {
                    "1": "input_param",
                    "10": "frame_type",
                    "2": "frame_id"
                },
                "param_2": {
                    "1": "input_data",
                    "2": "data_buffer",
                    "3": "frame_data",
                    "8": "data"
                },
                "param_3": {
                    "1": "buffer_length",
                    "2": "length",
                    "4": "data_size",
                    "5": "data_length"
                },
                "puVar3": {
                    "1": "ptr_data_destination",
                    "3": "dest_ptr"
                },
                "puVar4": {
                    "1": "ptr_original_data",
                    "2": "source_data_ptr",
                    "4": "data_ptr"
                },
                "uVar1": {
                    "1": "data_value1",
                    "2": "temp_value1",
                    "4": "value1"
                },
                "uVar2": {
                    "1": "element2",
                    "2": "temp_value2",
                    "4": "value2"
                }
            },
            "called": [
                "FUN_08004300"
            ],
            "calling": [
                "FUN_0800411c"
            ],
            "code": "\nvoid send_frame_data_080043bc(void)\n\n{\n  undefined4 value1;\n  undefined4 value2;\n  undefined4 *dest_ptr;\n  undefined4 *data_ptr;\n  undefined4 frame_data [2];\n  undefined2 temp_buffer [6];\n  \n  data_ptr = (undefined4 *)&DAT_2000142a;\n  dest_ptr = frame_data;\n  do {\n    value1 = *data_ptr;\n    value2 = data_ptr[1];\n    data_ptr = data_ptr + 2;\n    *dest_ptr = value1;\n    dest_ptr[1] = value2;\n    dest_ptr = dest_ptr + 2;\n  } while (data_ptr != (undefined4 *)&DAT_2000143a);\n  *(undefined2 *)dest_ptr = DAT_2000143a;\n  MSP_SendFrame(0x66,frame_data,0x12);\n  return;\n}\n\n",
            "current_name": "send_frame_data_080043bc",
            "entrypoint": "0x080043bc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080043bc": "send_frame_data_080043bc",
                "local_1c": "temp_buffer",
                "local_24": "frame_data",
                "puVar3": "dest_ptr",
                "puVar4": "data_ptr",
                "uVar1": "value1",
                "uVar2": "value2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080043f0": {
            "additional_data": {
                "FUN_080043f0": {
                    "1": "send_frame_with_data",
                    "11": "send_frame_to_msp",
                    "2": "send_frame_data",
                    "3": "send_data_frame"
                },
                "auStack_8": {
                    "1": "data_arr",
                    "2": "data_array",
                    "8": "frame_data"
                },
                "local_10": {
                    "1": "source_address",
                    "2": "frame_header",
                    "3": "msp_data_1",
                    "4": "data1"
                },
                "param_1": {
                    "1": "first_param",
                    "3": "param1",
                    "4": "param_1",
                    "6": "arg1"
                },
                "param_2": {
                    "1": "second_param",
                    "2": "buffer",
                    "3": "param_2",
                    "4": "frame_data",
                    "5": "arg2"
                },
                "param_3": {
                    "1": "third_param",
                    "2": "size",
                    "3": "param3",
                    "4": "length",
                    "6": "frame_data"
                },
                "uStack_c": {
                    "1": "msp_data2",
                    "2": "frame_data",
                    "3": "msp_data_2",
                    "4": "data2"
                }
            },
            "called": [
                "FUN_08004300"
            ],
            "calling": [
                "FUN_0800411c"
            ],
            "code": "\n\n\nvoid send_frame_to_msp_080043f0(undefined4 arg1,undefined4 arg2,undefined4 frame_data)\n\n{\n  undefined4 data1;\n  undefined4 data2;\n  undefined4 frame_data [2];\n  \n  data1 = _DAT_200013dd;\n  data2 = _DAT_200013e1;\n  frame_data[0] = frame_data;\n  MSP_SendFrame(0x68,&data1,8,frame_data);\n  return;\n}\n\n",
            "current_name": "send_frame_to_msp_080043f0",
            "entrypoint": "0x080043f0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080043f0": "send_frame_to_msp_080043f0",
                "auStack_8": "frame_data",
                "local_10": "data1",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "frame_data",
                "uStack_c": "data2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004410": {
            "additional_data": {
                "FUN_08004410": {
                    "1": "send_data_frame",
                    "15": "send_frame_to_msp",
                    "4": "send_frame_data",
                    "6": "send_frame"
                },
                "local_10": {
                    "1": "datagram_header",
                    "2": "frame_type",
                    "3": "frame_data"
                },
                "local_c": {
                    "1": "merged_value",
                    "4": "concatenated_data"
                },
                "param_1": {
                    "1": "first_param",
                    "2": "param_1",
                    "3": "param1",
                    "5": "arg1",
                    "8": "unused"
                },
                "param_2": {
                    "1": "input_data",
                    "11": "frame_data",
                    "2": "param2",
                    "5": "arg2"
                },
                "param_3": {
                    "1": "packet_length",
                    "2": "param3",
                    "4": "length",
                    "5": "arg3",
                    "9": "frame_length"
                },
                "uStack_8": {
                    "1": "stack_param",
                    "2": "unused2"
                }
            },
            "called": [
                "FUN_08004300"
            ],
            "calling": [
                "FUN_0800411c"
            ],
            "code": "\nvoid send_frame_to_msp_08004410(undefined4 unused,undefined4 frame_data,undefined4 frame_length)\n\n{\n  undefined4 frame_data;\n  undefined4 concatenated_data;\n  undefined4 unused2;\n  \n  frame_data = DAT_20001395;\n  concatenated_data = CONCAT22((short)((uint)frame_data >> 0x10),DAT_20001399);\n  unused2 = frame_length;\n  MSP_SendFrame(0x6c,&frame_data,6);\n  return;\n}\n\n",
            "current_name": "send_frame_to_msp_08004410",
            "entrypoint": "0x08004410",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004410": "send_frame_to_msp_08004410",
                "local_10": "frame_data",
                "local_c": "concatenated_data",
                "param_1": "unused",
                "param_2": "frame_data",
                "param_3": "frame_length",
                "uStack_8": "unused2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004434": {
            "additional_data": {
                "FUN_08004434": {
                    "1": "send_msp_frame",
                    "2": "send_data_frame",
                    "3": "send_data",
                    "6": "send_frame_data",
                    "7": "send_frame_to_msp"
                },
                "MSP_SendFrame": {
                    "2": "send_frame"
                },
                "local_10": {
                    "1": "context",
                    "2": "data_1",
                    "3": "constant_value",
                    "5": "frame_data"
                },
                "local_c": {
                    "1": "msp_data2",
                    "2": "header",
                    "3": "concatenated_data",
                    "4": "concatenated_value"
                },
                "param_1": {
                    "1": "packet_type",
                    "2": "unknown_param",
                    "3": "param1",
                    "4": "arg1",
                    "8": "unused_param"
                },
                "param_2": {
                    "1": "frame_data_ptr",
                    "2": "param_2",
                    "3": "data_ptr",
                    "4": "arg2",
                    "5": "data",
                    "7": "frame_data"
                },
                "param_3": {
                    "1": "arg2",
                    "2": "data_length",
                    "3": "param_3",
                    "4": "length",
                    "7": "frame_size"
                },
                "uStack_8": {
                    "1": "local_data3",
                    "2": "unused_variable"
                }
            },
            "called": [
                "FUN_08004300"
            ],
            "calling": [
                "FUN_0800411c"
            ],
            "code": "\nvoid send_frame_to_msp_08004434(undefined4 unused_param,undefined4 frame_data,undefined4 frame_size)\n\n{\n  undefined4 frame_data;\n  undefined4 concatenated_value;\n  undefined4 frame_data;\n  \n  frame_data = DAT_200014ab;\n  concatenated_value = CONCAT22((short)((uint)frame_data >> 0x10),DAT_200014af);\n  frame_data = frame_size;\n  send_frame(0x6d,&frame_data,6);\n  return;\n}\n\n",
            "current_name": "send_frame_to_msp_08004434",
            "entrypoint": "0x08004434",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004434": "send_frame_to_msp_08004434",
                "MSP_SendFrame": "send_frame",
                "local_10": "frame_data",
                "local_c": "concatenated_value",
                "param_1": "unused_param",
                "param_2": "frame_data",
                "param_3": "frame_size",
                "uStack_8": "frame_data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004458": {
            "additional_data": {
                "FUN_08004300": {
                    "1": "copy_data"
                },
                "FUN_08004458": {
                    "1": "send_transmission",
                    "2": "send_modified_frame",
                    "4": "send_data_frame",
                    "9": "send_frame_data"
                },
                "MSP_SendFrame": {
                    "1": "send_frame_to_msp",
                    "2": "send_frame"
                },
                "local_24": {
                    "1": "index_buffer",
                    "2": "temporary_buffer",
                    "3": "frame_ids",
                    "4": "buffer",
                    "5": "temp_buffer"
                },
                "local_30": {
                    "1": "buffer",
                    "12": "frame_data",
                    "2": "data_buffer",
                    "3": "data_array"
                },
                "param_1": {
                    "1": "param1",
                    "2": "frame_id",
                    "3": "data_size"
                },
                "param_2": {
                    "1": "buffer",
                    "2": "data_buffer",
                    "5": "data"
                },
                "param_3": {
                    "1": "max_size",
                    "2": "size",
                    "4": "data_length"
                },
                "puVar1": {
                    "1": "dst_ptr",
                    "10": "dest_ptr",
                    "2": "frame_ptr",
                    "3": "destination"
                },
                "puVar2": {
                    "1": "source_array_ptr",
                    "11": "src_ptr",
                    "2": "original_data_ptr",
                    "4": "source"
                },
                "puVar4": {
                    "1": "dst_ptr",
                    "2": "dest_ptr",
                    "5": "dest_ptr_temp"
                },
                "puVar4[2]": {
                    "1": "last_element_dest_ptr"
                },
                "puVar5": {
                    "1": "src_ptr_copy",
                    "2": "current_source",
                    "3": "src_ptr",
                    "6": "src_ptr_temp"
                },
                "puVar5 + 2": {
                    "1": "end_condition"
                },
                "puVar5[1]": {
                    "1": "next_element_src_ptr"
                },
                "uRam200013b3": {
                    "1": "end_value"
                },
                "uVar3": {
                    "1": "temp_val",
                    "6": "temp_var",
                    "8": "temp_value"
                }
            },
            "called": [
                "FUN_08004300"
            ],
            "calling": [
                "FUN_0800411c"
            ],
            "code": "\nvoid send_frame_data_08004458(void)\n\n{\n  undefined4 *dest_ptr;\n  undefined4 *src_ptr;\n  undefined4 temp_value;\n  undefined4 *dest_ptr_temp;\n  undefined4 *src_ptr_temp;\n  undefined4 frame_data [3];\n  undefined2 temp_buffer [10];\n  \n  dest_ptr = frame_data;\n  src_ptr = &DAT_2000139b;\n  do {\n    src_ptr_temp = src_ptr;\n    dest_ptr_temp = dest_ptr;\n    temp_value = next_element_src_ptr;\n    *dest_ptr_temp = *src_ptr_temp;\n    dest_ptr_temp[1] = temp_value;\n    dest_ptr = dest_ptr_temp + 2;\n    src_ptr = src_ptr_temp + 2;\n  } while (src_ptr_temp + 2 != (undefined4 *)0x200013b3);\n  last_element_dest_ptr = temp_data;\n  *(undefined2 *)(dest_ptr_temp + 3) = *(undefined2 *)(src_ptr_temp + 3);\n  send_frame(0x70,frame_data,0x1e);\n  return;\n}\n\n",
            "current_name": "send_frame_data_08004458",
            "entrypoint": "0x08004458",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004458": "send_frame_data_08004458",
                "MSP_SendFrame": "send_frame",
                "local_24": "temp_buffer",
                "local_30": "frame_data",
                "puVar1": "dest_ptr",
                "puVar2": "src_ptr",
                "puVar4": "dest_ptr_temp",
                "puVar4[2]": "last_element_dest_ptr",
                "puVar5": "src_ptr_temp",
                "puVar5[1]": "next_element_src_ptr",
                "uRam200013b3": "temp_data",
                "uVar3": "temp_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004490": {
            "additional_data": {
                "FUN_08004490": {
                    "1": "toggle_error_pin_with_serial_print",
                    "2": "error_handler",
                    "3": "error_handling_loop",
                    "5": "error_handling_function",
                    "6": "toggle_error_led",
                    "7": "handle_error"
                },
                "HAL_GPIO_TogglePin": {
                    "1": "toggle_pin_state",
                    "2": "toggle_gpio_pin",
                    "3": "toggle_pin"
                },
                "HAL_GPIO_WritePin": {
                    "1": "toggle_gpio",
                    "2": "set_gpio_pin",
                    "3": "write_pin"
                },
                "delay_ms": {
                    "1": "delay",
                    "8": "delay_milliseconds"
                },
                "param_1": {
                    "1": "error_component_name",
                    "12": "error_code",
                    "2": "error_device",
                    "9": "error_type"
                },
                "param_2": {
                    "1": "error_line_number",
                    "22": "line_number",
                    "8": "error_line"
                },
                "serialInt": {
                    "1": "print_int_value",
                    "2": "print_line_number",
                    "6": "print_integer"
                },
                "serialPrint": {
                    "1": "print_error",
                    "7": "print_error_message"
                },
                "serialWrite": {
                    "1": "write_newline",
                    "3": "write_serial",
                    "5": "write_new_line"
                }
            },
            "called": [
                "FUN_08004cac",
                "FUN_08004c18",
                "FUN_08004f64",
                "FUN_08004c8c",
                "FUN_08001424",
                "FUN_0800142e"
            ],
            "calling": [
                "FUN_0800458c",
                "FUN_0800403c",
                "FUN_08004514",
                "FUN_0800407c",
                "FUN_080040b8"
            ],
            "code": "\nvoid handle_error_08004490(undefined4 error_code,undefined4 line_number)\n\n{\n  write_pin(0x40011000,0x4000,1);\n  write_pin(0x40011000,0x8000,0);\n  write_pin(0x40011000,0x2000,0);\n  do {\n    toggle_pin(0x40011000,0x4000);\n    toggle_pin(0x40011000,0x8000);\n    toggle_pin(0x40011000,0x2000);\n    print_error_message(\"Error with \");\n    print_error_message(error_code);\n    print_error_message(\" at line: \");\n    print_integer(line_number);\n    write_new_line(10);\n    delay_milliseconds(500);\n  } while( true );\n}\n\n",
            "current_name": "handle_error_08004490",
            "entrypoint": "0x08004490",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004490": "handle_error_08004490",
                "HAL_GPIO_TogglePin": "toggle_pin",
                "HAL_GPIO_WritePin": "write_pin",
                "delay_ms": "delay_milliseconds",
                "param_1": "error_code",
                "param_2": "line_number",
                "serialInt": "print_integer",
                "serialPrint": "print_error_message",
                "serialWrite": "write_new_line"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004514": {
            "additional_data": {
                "FUN_08001194": {
                    "1": "configure_oscillation"
                },
                "FUN_08001214": {
                    "1": "hal_systick_config"
                },
                "FUN_08001240": {
                    "1": "set_oscillation_config"
                },
                "FUN_08001b58": {
                    "1": "configure_priority"
                },
                "FUN_0800209c": {
                    "1": "configure_clock"
                },
                "FUN_08002214": {
                    "1": "configure_systick"
                },
                "FUN_08004490": {
                    "1": "hal_rcc_get_hclk_freq"
                },
                "FUN_08004514": {
                    "1": "init_rcc",
                    "19": "initialize_system",
                    "2": "initialize_clock_system",
                    "5": "initialize_clock"
                },
                "HAL_NVIC_SetPriority": {
                    "1": "set_sys_tick_priority",
                    "2": "set_nvic_priority"
                },
                "HAL_RCC_ClockConfig": {
                    "1": "configure_clock"
                },
                "HAL_RCC_GetHCLKFreq": {
                    "1": "get_hclk_freq"
                },
                "HAL_RCC_OscConfig": {
                    "1": "configure_rcc_osc",
                    "2": "configure_oscillator"
                },
                "HAL_SYSTICK_CLKSourceConfig": {
                    "1": "configure_sys_tick_clk_source",
                    "2": "configure_sys_tick_clock_source"
                },
                "HAL_SYSTICK_Config": {
                    "3": "configure_sys_tick"
                },
                "_Error_Handler": {
                    "1": "handle_error",
                    "2": "error_handler"
                },
                "iVar1": {
                    "1": "oscillator_config_result",
                    "2": "status",
                    "3": "osc_config_result",
                    "8": "result"
                },
                "iVar4": {
                    "1": "config_option",
                    "2": "clock_config_status",
                    "5": "clock_config_result"
                },
                "local_10": {
                    "1": "cpu_voltage",
                    "4": "osc_config_param4"
                },
                "local_14": {
                    "1": "constant3",
                    "4": "osc_config_param3"
                },
                "local_1c": {
                    "1": "oscillator_config2",
                    "2": "oscillator_source",
                    "4": "osc_config_param2"
                },
                "local_20": {
                    "1": "osc_config_var_one",
                    "12": "oscillator_type",
                    "2": "oscillator_state",
                    "4": "osc_config_param1"
                },
                "local_30": {
                    "1": "rcc_init_struct",
                    "2": "rcc_osc_config",
                    "3": "osc_config_params",
                    "5": "osc_config",
                    "7": "oscillator_config"
                },
                "local_34": {
                    "1": "param7",
                    "2": "clock_config_result"
                },
                "local_38": {
                    "1": "pfl_reg",
                    "2": "param4",
                    "3": "sysclk_source"
                },
                "local_3c": {
                    "1": "error_handler_status",
                    "2": "error_status"
                },
                "local_40": {
                    "1": "clock_config_pll_state",
                    "2": "clock_config_param1",
                    "3": "clock_config_param"
                },
                "local_44": {
                    "1": "timeout_ms",
                    "2": "error_handler_param1",
                    "3": "clock_source"
                },
                "local_c": {
                    "1": "gpioc",
                    "2": "pll_config",
                    "4": "osc_config_param5"
                },
                "uVar2": {
                    "1": "sys_tick_reload",
                    "15": "hclk_freq",
                    "3": "hclk_frequency"
                },
                "uVar3": {
                    "1": "error_msg_index",
                    "2": "file_line",
                    "4": "error_line"
                }
            },
            "called": [
                "FUN_08001194",
                "FUN_0800209c",
                "FUN_08002214",
                "FUN_08001b58",
                "FUN_08001240",
                "FUN_08004490",
                "FUN_08001214"
            ],
            "calling": [
                "FUN_0800458c"
            ],
            "code": "\nvoid initialize_system_08004514(void)\n\n{\n  int result;\n  uint hclk_freq;\n  undefined4 error_code;\n  int clock_config_result;\n  undefined4 clock_source;\n  int clock_config_param;\n  int error_status;\n  undefined4 sysclk_source;\n  int clock_config_result;\n  undefined4 oscillator_config [4];\n  undefined4 oscillator_type;\n  undefined4 osc_config_param2;\n  undefined4 osc_config_param3;\n  undefined4 osc_config_param4;\n  undefined4 osc_config_param5;\n  \n  oscillator_type = 1;\n  osc_config_param2 = 0x10;\n  clock_config_result = 2;\n  osc_config_param4 = 0;\n  oscillator_config[0] = 2;\n  osc_config_param3 = 2;\n  osc_config_param5 = 0x380000;\n  result = configure_oscillator(oscillator_config);\n  if (result == 0) goto LAB_08004540;\n  error_code = 0x3c;\n  while( true ) {\n    result = error_handler(\"../Src/peripherals.c\",error_code);\nLAB_08004540:\n    clock_source = 0xf;\n    sysclk_source = 0x400;\n    clock_config_param = clock_config_result;\n    error_status = result;\n    clock_config_result = result;\n    clock_config_result = configure_clock(&clock_source,clock_config_result);\n    if (clock_config_result == 0) break;\n    error_code = 0x49;\n  }\n  hclk_freq = get_hclk_frequency();\n  configure_sys_tick(hclk_freq / 1000);\n  configure_sys_tick_clock_source(4);\n  set_nvic_priority(0xffffffff,0,0);\n  return;\n}\n\n",
            "current_name": "initialize_system_08004514",
            "entrypoint": "0x08004514",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004514": "initialize_system_08004514",
                "HAL_NVIC_SetPriority": "set_nvic_priority",
                "HAL_RCC_ClockConfig": "configure_clock",
                "HAL_RCC_GetHCLKFreq": "get_hclk_frequency",
                "HAL_RCC_OscConfig": "configure_oscillator",
                "HAL_SYSTICK_CLKSourceConfig": "configure_sys_tick_clock_source",
                "HAL_SYSTICK_Config": "configure_sys_tick",
                "_Error_Handler": "error_handler",
                "iVar1": "result",
                "iVar4": "clock_config_result",
                "local_10": "osc_config_param4",
                "local_14": "osc_config_param3",
                "local_1c": "osc_config_param2",
                "local_20": "oscillator_type",
                "local_30": "oscillator_config",
                "local_34": "clock_config_result",
                "local_38": "sysclk_source",
                "local_3c": "error_status",
                "local_40": "clock_config_param",
                "local_44": "clock_source",
                "local_c": "osc_config_param5",
                "uVar2": "hclk_freq",
                "uVar3": "error_code"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800458c": {
            "additional_data": {
                "../Src/peripherals.c": {
                    "1": "source_file"
                },
                "DAG_200014c8": {
                    "1": "tim_pwm_config12"
                },
                "DAG_200014cc": {
                    "1": "tim_pwm_config13"
                },
                "DAG_200014d0": {
                    "1": "tim_pwm_config15"
                },
                "DAG_200014d4": {
                    "1": "tim_pwm_config14"
                },
                "DAG_200014d8": {
                    "1": "tim_pwm_config16"
                },
                "DAG_20001504": {
                    "1": "peripheral1"
                },
                "DAG_20001508": {
                    "1": "peripheral2"
                },
                "DAG_2000150c": {
                    "1": "peripheral4"
                },
                "DAG_20001510": {
                    "1": "peripheral5"
                },
                "DAG_20001514": {
                    "1": "peripheral3"
                },
                "DAG_20001518": {
                    "1": "peripheral6"
                },
                "DAG_2000151c": {
                    "1": "peripheral7"
                },
                "DAG_20001520": {
                    "1": "peripheral8"
                },
                "DAG_20001524": {
                    "1": "peripheral9"
                },
                "DAG_2000157c": {
                    "1": "uart_config1"
                },
                "DAG_20001580": {
                    "1": "uart_config2"
                },
                "DAG_20001584": {
                    "1": "uart_config4"
                },
                "DAG_20001588": {
                    "1": "uart_config5"
                },
                "DAG_2000158c": {
                    "1": "uart_config6"
                },
                "DAG_20001590": {
                    "1": "uart_config3"
                },
                "DAG_20001594": {
                    "1": "uart_config7"
                },
                "DAG_20001598": {
                    "1": "uart_config8"
                },
                "DAG_200015bc": {
                    "1": "tim_pwm_config1"
                },
                "DAG_200015c0": {
                    "1": "tim_pwm_config3"
                },
                "DAG_200015c4": {
                    "1": "tim_pwm_config4"
                },
                "DAG_200015c8": {
                    "1": "tim_pwm_config2"
                },
                "DAG_200015cc": {
                    "1": "tim_pwm_config5"
                },
                "DAG_200015d0": {
                    "1": "tim_pwm_config6"
                },
                "DAG_200015f8": {
                    "1": "tim_pwm_config7"
                },
                "DAG_200015fc": {
                    "1": "tim_pwm_config9"
                },
                "DAG_20001600": {
                    "1": "tim_pwm_config10"
                },
                "DAG_20001604": {
                    "1": "tim_pwm_config8"
                },
                "DAG_20001608": {
                    "1": "tim_pwm_config11"
                },
                "DAT_200014c8": {
                    "1": "tim12_base",
                    "2": "tim4_handle"
                },
                "DAT_200014cc": {
                    "1": "tim_counter_mode4"
                },
                "DAT_200014d0": {
                    "1": "tim4_instance"
                },
                "DAT_200014d4": {
                    "1": "pwm_period3",
                    "2": "tim4_clock_division"
                },
                "DAT_200014d8": {
                    "1": "tim4_prescaler"
                },
                "DAT_20001500": {
                    "1": "pwm_channel_config_result"
                },
                "DAT_20001504": {
                    "1": "i2_c_handle",
                    "2": "i2_c_base_address",
                    "3": "i2c_handle"
                },
                "DAT_20001508": {
                    "1": "i2c_config_value2",
                    "2": "i2c_timing"
                },
                "DAT_2000150c": {
                    "1": "var_2000150c",
                    "2": "i2_c_duty_cycle"
                },
                "DAT_20001510": {
                    "1": "i2c_write_size"
                },
                "DAT_20001514": {
                    "1": "i2c_buffer_size"
                },
                "DAT_20001518": {
                    "1": "uart_instance"
                },
                "DAT_2000151c": {
                    "1": "var_2000151c"
                },
                "DAT_20001520": {
                    "1": "i2c_own_address2_mask"
                },
                "DAT_20001524": {
                    "1": "uart_baud_rate"
                },
                "DAT_2000153c": {
                    "1": "pwm_config_value32"
                },
                "DAT_20001540": {
                    "1": "tim8_base",
                    "2": "tim3_handle"
                },
                "DAT_20001544": {
                    "1": "timer3_mode"
                },
                "DAT_20001548": {
                    "1": "pwm_config_result4"
                },
                "DAT_2000154c": {
                    "1": "pwm_period"
                },
                "DAT_20001550": {
                    "1": "pwm_config_value20"
                },
                "DAT_2000157c": {
                    "1": "uart_instance",
                    "4": "uart_handle"
                },
                "DAT_20001580": {
                    "1": "uart3_baud_rate",
                    "2": "uart_baud_rate"
                },
                "DAT_20001584": {
                    "1": "uart_init_status"
                },
                "DAT_20001588": {
                    "1": "uart3_parity"
                },
                "DAT_2000158c": {
                    "1": "uart_mode"
                },
                "DAT_20001590": {
                    "1": "uart3_word_length",
                    "2": "uart_word_length"
                },
                "DAT_20001594": {
                    "1": "tim5"
                },
                "DAT_20001598": {
                    "1": "uart_error_code3"
                },
                "DAT_2000159c": {
                    "1": "pwm_config_value33"
                },
                "DAT_200015a8": {
                    "1": "pwm_config_value29"
                },
                "DAT_200015b0": {
                    "1": "pwm_config_value35"
                },
                "DAT_200015b8": {
                    "1": "pwm_config_value30"
                },
                "DAT_200015bc": {
                    "1": "tim_pwm_instance2"
                },
                "DAT_200015c0": {
                    "1": "pwm_config_result"
                },
                "DAT_200015c4": {
                    "1": "pwm_config_result1",
                    "2": "tim1_clock_division"
                },
                "DAT_200015c8": {
                    "1": "tim1_period"
                },
                "DAT_200015cc": {
                    "1": "timer1_repetition_counter"
                },
                "DAT_200015d0": {
                    "1": "pwm_init_status3"
                },
                "DAT_200015f8": {
                    "1": "timer2_handle",
                    "2": "tim_handle2"
                },
                "DAT_200015fc": {
                    "1": "tim2_clock_division"
                },
                "DAT_20001600": {
                    "1": "tim2_clock_division"
                },
                "DAT_20001604": {
                    "1": "pwm_config_value11"
                },
                "DAT_20001608": {
                    "1": "tim2_channel4"
                },
                "FUN_08001128": {
                    "1": "initialize_communication"
                },
                "FUN_08001264": {
                    "1": "function_08001264"
                },
                "FUN_08001424": {
                    "1": "perform_some_operation"
                },
                "FUN_08001754": {
                    "1": "initialize_param_1"
                },
                "FUN_080023d0": {
                    "1": "initialize_param_2"
                },
                "FUN_0800245c": {
                    "1": "function_0800245c"
                },
                "FUN_08002564": {
                    "1": "initialize_gpio"
                },
                "FUN_080025a4": {
                    "1": "configure_something_else"
                },
                "FUN_08002724": {
                    "1": "configure_peripheral3"
                },
                "FUN_08004490": {
                    "1": "initialize_can"
                },
                "FUN_08004514": {
                    "1": "function_a"
                },
                "FUN_0800458c": {
                    "2": "initialize_system",
                    "29": "initialize_peripherals"
                },
                "FUN_08004e14": {
                    "1": "function_08004e14"
                },
                "HAL_GPIO_Init": {
                    "1": "initialize_gpio_pin",
                    "9": "initialize_gpio"
                },
                "HAL_GPIO_WritePin": {
                    "1": "write_to_gpio",
                    "2": "write_pin",
                    "3": "set_gpio_pin_state"
                },
                "HAL_I2C_Init": {
                    "10": "initialize_i2_c"
                },
                "HAL_Init": {
                    "1": "initialize_hardware_abstraction_layer",
                    "2": "initialize_hardware_abstract_layer",
                    "5": "initialize_hal"
                },
                "HAL_TIMEx_ConfigBreakDeadTime": {
                    "1": "config_break_dead_time1"
                },
                "HAL_TIMEx_MasterConfigSynchronization": {
                    "1": "synchronize_timers",
                    "2": "configure_master_sync1"
                },
                "HAL_TIM_MspPostInit": {
                    "1": "post_initialize_timer",
                    "3": "post_init_tim",
                    "4": "post_initialize_tim"
                },
                "HAL_TIM_PWM_ConfigChannel": {
                    "1": "pwm_config_channel",
                    "2": "configure_pwm_channel1",
                    "3": "configure_pwm_channel"
                },
                "HAL_TIM_PWM_Init": {
                    "1": "initialize_tim",
                    "2": "initialize_tim_pwm"
                },
                "HAL_TIM_PWM_Init(&DAT_200014c8)": {
                    "1": "initialize_pwmtim12"
                },
                "HAL_TIM_PWM_Init(&DAT_20001540)": {
                    "1": "initialize_pwmtim8"
                },
                "HAL_TIM_PWM_Init()": {
                    "1": "initialize_pwmtim4"
                },
                "HAL_UART_Init": {
                    "11": "initialize_uart"
                },
                "SystemClock_Config": {
                    "13": "configure_system_clock"
                },
                "VAR_D_200014c8": {
                    "1": "timer_handle3"
                },
                "VAR_D_200014cc": {
                    "1": "pwm_prescaler4"
                },
                "VAR_D_200014d0": {
                    "1": "pwm_frequency4"
                },
                "VAR_D_200014d4": {
                    "1": "pwm_period4"
                },
                "VAR_D_200014d8": {
                    "1": "pwm_pulse4"
                },
                "VAR_D_20001504": {
                    "1": "i2c_control_reg1"
                },
                "VAR_D_20001508": {
                    "1": "i2c_control_reg2"
                },
                "VAR_D_2000150c": {
                    "1": "i2c_status_reg1"
                },
                "VAR_D_20001510": {
                    "1": "i2c_status_reg2"
                },
                "VAR_D_20001514": {
                    "1": "i2c_control_reg3"
                },
                "VAR_D_20001518": {
                    "1": "i2c_status_reg3"
                },
                "VAR_D_2000151c": {
                    "1": "uart_control_reg1"
                },
                "VAR_D_20001520": {
                    "1": "uart_control_reg2"
                },
                "VAR_D_20001524": {
                    "1": "uart_status_reg"
                },
                "VAR_D_2000157c": {
                    "1": "uart_handle1"
                },
                "VAR_D_20001580": {
                    "1": "pwm_frequency1"
                },
                "VAR_D_20001584": {
                    "1": "pwm_prescaler1"
                },
                "VAR_D_200015bc": {
                    "1": "timer_handle1"
                },
                "VAR_D_200015c0": {
                    "1": "pwm_pulse1"
                },
                "VAR_D_200015c4": {
                    "1": "pwm_prescaler2"
                },
                "VAR_D_200015c8": {
                    "1": "pwm_frequency2"
                },
                "VAR_D_200015cc": {
                    "1": "pwm_period2"
                },
                "VAR_D_200015d0": {
                    "1": "pwm_pulse2"
                },
                "VAR_D_200015f8": {
                    "1": "timer_handle2"
                },
                "VAR_D_200015fc": {
                    "1": "pwm_frequency3"
                },
                "VAR_D_20001600": {
                    "1": "pwm_prescaler3"
                },
                "VAR_D_20001604": {
                    "1": "pwm_period3"
                },
                "VAR_D_20001608": {
                    "1": "pwm_pulse3"
                },
                "VAR_D_20001904": {
                    "1": "pwm_period1"
                },
                "VAR_Local_1c": {
                    "1": "gpio_pin6"
                },
                "VAR_Local_20": {
                    "1": "gpio_pin5"
                },
                "VAR_Local_24": {
                    "1": "gpio_pin4"
                },
                "VAR_Local_28": {
                    "1": "gpio_pin3"
                },
                "VAR_Local_2c": {
                    "1": "gpio_pin2"
                },
                "VAR_Local_30": {
                    "1": "gpio_pin1"
                },
                "VAR_Local_38": {
                    "1": "timer8"
                },
                "VAR_Local_3c": {
                    "1": "timer7"
                },
                "VAR_Local_40": {
                    "1": "timer6"
                },
                "VAR_Local_48": {
                    "1": "timer5"
                },
                "VAR_Local_4c": {
                    "1": "timer4"
                },
                "VAR_Local_50": {
                    "1": "timer3"
                },
                "VAR_Local_54": {
                    "1": "timer2"
                },
                "VAR_Local_58": {
                    "1": "timer1"
                },
                "_DAT_40021018": {
                    "1": "gpioa_moder",
                    "2": "gpio_port_a_register"
                },
                "_Error_Handler": {
                    "2": "error_handler",
                    "5": "handle_error"
                },
                "configureBreakDeadTime": {
                    "1": "configure_break_dead_time"
                },
                "configureMasterSync1": {
                    "1": "configure_master_sync1"
                },
                "configurePWMChannel1": {
                    "1": "configure_pwm_channel1"
                },
                "configureSystemClock": {
                    "1": "configure_system_clock"
                },
                "gpioConfigReg": {
                    "1": "gpio_config_reg"
                },
                "handleError": {
                    "1": "handle_error"
                },
                "iVar1": {
                    "1": "return_value",
                    "3": "status",
                    "5": "error_code"
                },
                "iVar3": {
                    "1": "loop_counter",
                    "2": "initial_value",
                    "6": "value"
                },
                "initializeGpio": {
                    "1": "initialize_gpio"
                },
                "initializeHardware": {
                    "1": "initialize_hardware"
                },
                "initializeI2C": {
                    "1": "initialize_i2_c"
                },
                "initializePWM1": {
                    "1": "initialize_pwm1"
                },
                "initializeUART": {
                    "1": "initialize_uart"
                },
                "local_1c": {
                    "1": "local_var15"
                },
                "local_20": {
                    "1": "oc2_config",
                    "3": "break_dead_time"
                },
                "local_24": {
                    "1": "var_13",
                    "2": "gpio_config5"
                },
                "local_28": {
                    "1": "temp10",
                    "2": "gpio_config4"
                },
                "local_2c": {
                    "1": "temp9",
                    "2": "gpio_config3"
                },
                "local_30": {
                    "1": "init_value1",
                    "2": "gpio_config2"
                },
                "local_34": {
                    "1": "gpio_config_value",
                    "2": "gpio_config1"
                },
                "local_38": {
                    "1": "channel_config_result4",
                    "2": "var_8"
                },
                "local_3c": {
                    "1": "timer7",
                    "2": "var_7"
                },
                "local_40": {
                    "1": "local_var6",
                    "2": "var_6"
                },
                "local_48": {
                    "1": "channel2",
                    "2": "var_5"
                },
                "local_4c": {
                    "1": "channel_value2",
                    "2": "var_4"
                },
                "local_50": {
                    "1": "local_var3",
                    "2": "var_3"
                },
                "local_54": {
                    "1": "tim_sync_value",
                    "2": "timer2"
                },
                "local_58": {
                    "1": "h_timer",
                    "2": "var_1"
                },
                "postInitializeTIM": {
                    "1": "post_initialize_tim"
                },
                "timInstance2": {
                    "1": "tim_instance2"
                },
                "timInstance3": {
                    "1": "tim_instance3"
                },
                "timPeriod3": {
                    "1": "tim_period3"
                },
                "uVar2": {
                    "1": "error_flag",
                    "2": "loop_counter",
                    "8": "error_code"
                }
            },
            "called": [
                "FUN_08001754",
                "FUN_080023d0",
                "FUN_08002724",
                "FUN_08004514",
                "FUN_08004e14",
                "FUN_08002564",
                "FUN_08004490",
                "FUN_0800245c",
                "FUN_08001424",
                "FUN_08001128",
                "FUN_08001264",
                "FUN_080025a4"
            ],
            "calling": [
                "FUN_08004028"
            ],
            "code": "\n\n\nvoid initialize_peripherals_0800458c(void)\n\n{\n  int error_code;\n  undefined4 error_code;\n  int value;\n  int master_config;\n  int timer2;\n  int channel_config;\n  int var_4;\n  int var_5;\n  int var_6;\n  int var_7;\n  int var_8;\n  int gpio_config1;\n  int gpio_config2;\n  int gpio_config3;\n  int gpio_config4;\n  int gpio_config5;\n  undefined4 break_dead_time;\n  int break_dead_time_error5;\n  \n  initialize_hardware();\n  configure_system_clock();\n  value = 2;\n  _DAT_40021018 = _DAT_40021018 | 0x1c;\n  write_gpio_pin(0x40011000,0xe000,0,_DAT_40021018 & 8);\n  write_gpio_pin(0x40010800,0x20,0);\n  gpio_config1 = 0xe000;\n  gpio_config2 = 1;\n  gpio_config4 = 2;\n  initialize_gpio(0x40011000,&gpio_config1);\n  gpio_config1 = 0x20;\n  gpio_config2 = 1;\n  gpio_config4 = 2;\n  initialize_gpio(0x40010800,&gpio_config1);\n  DAT_20001504 = 0x40005400;\n  DAT_20001508 = 400000;\n  DAT_20001514 = 0x4000;\n  DAT_2000150c = 0;\n  DAT_20001510 = 0;\n  DAT_20001518 = 0;\n  DAT_2000151c = 0;\n  DAT_20001520 = 0;\n  DAT_20001524 = 0;\n  error_code = initialize_i2_c();\n  if (error_code == 0) goto LAB_0800463a;\n  error_code = 0x6b;\n  while( true ) {\n    while( true ) {\n      while( true ) {\n        while( true ) {\n          while( true ) {\n            while( true ) {\n              while( true ) {\n                while( true ) {\n                  while( true ) {\n                    while( true ) {\n                      while( true ) {\n                        while( true ) {\n                          while( true ) {\n                            while( true ) {\n                              while( true ) {\n                                while( true ) {\n                                  error_code = handle_error(\"../Src/peripherals.c\",error_code);\nLAB_0800463a:\n                                  DAT_2000157c = 0x40013800;\n                                  DAT_20001580 = 0x1c200;\n                                  DAT_20001590 = 0xc;\n                                  DAT_20001584 = error_code;\n                                  DAT_20001588 = error_code;\n                                  DAT_2000158c = error_code;\n                                  DAT_20001594 = error_code;\n                                  DAT_20001598 = error_code;\n                                  error_code = initialize_uart(&DAT_2000157c);\n                                  if (error_code == 0) break;\n                                  error_code = 0x151;\n                                }\n                                DAT_200015bc = 0x40012c00;\n                                DAT_200015c8 = 1000;\n                                DAT_200015c0 = value;\n                                DAT_200015c4 = error_code;\n                                DAT_200015cc = error_code;\n                                DAT_200015d0 = error_code;\n                                error_code = initialize_tim_pwm(&DAT_200015bc);\n                                if (error_code == 0) break;\n                                error_code = 0x88;\n                              }\n                              master_config = error_code;\n                              timer2 = error_code;\n                              error_code = configure_master_sync1(&DAT_200015bc,&master_config)\n                              ;\n                              if (error_code == 0) break;\n                              error_code = 0x8f;\n                            }\n                            channel_config = 0x60;\n                            var_4 = error_code;\n                            var_5 = error_code;\n                            var_6 = error_code;\n                            var_7 = error_code;\n                            var_8 = error_code;\n                            error_code = configure_pwm_channel(&DAT_200015bc,&channel_config,0xc);\n                            if (error_code == 0) break;\n                            error_code = 0x9a;\n                          }\n                          break_dead_time = 0x2000;\n                          gpio_config1 = error_code;\n                          gpio_config2 = error_code;\n                          gpio_config3 = error_code;\n                          gpio_config4 = error_code;\n                          gpio_config5 = error_code;\n                          break_dead_time_error5 = error_code;\n                          error_code = configure_break_dead_time1(&DAT_200015bc,&gpio_config1);\n                          if (error_code == 0) break;\n                          error_code = 0xa6;\n                        }\n                        post_initialize_tim(&DAT_200015bc);\n                        DAT_200015f8 = 0x40000000;\n                        DAT_20001604 = 1000;\n                        DAT_200015fc = value;\n                        DAT_20001600 = error_code;\n                        DAT_20001608 = error_code;\n                        error_code = initialize_tim_pwm(&DAT_200015f8);\n                        if (error_code == 0) break;\n                        error_code = 0xc3;\n                      }\n                      channel_config = error_code;\n                      var_4 = error_code;\n                      error_code = configure_master_sync1(&DAT_200015f8,&channel_config);\n                      if (error_code == 0) break;\n                      error_code = 0xca;\n                    }\n                    gpio_config1 = 0x60;\n                    gpio_config2 = error_code;\n                    gpio_config3 = error_code;\n                    gpio_config5 = error_code;\n                    error_code = configure_pwm_channel(&DAT_200015f8,&gpio_config1,4);\n                    if (error_code == 0) break;\n                    error_code = 0xd3;\n                  }\n                  post_initialize_tim(&DAT_200015f8);\n                  DAT_2000154c = 1000;\n                  DAT_20001540 = 0x40000400;\n                  DAT_20001544 = value;\n                  DAT_20001548 = error_code;\n                  DAT_20001550 = error_code;\n                  error_code = initialize_pwmtim4;\n                  if (error_code == 0) break;\n                  error_code = 0xf0;\n                }\n                channel_config = 0;\n                var_4 = 0;\n                error_code = configure_master_sync1(&DAT_20001540,&channel_config);\n                if (error_code == 0) break;\n                error_code = 0xf7;\n              }\n              gpio_config1 = 0x60;\n              gpio_config2 = error_code;\n              gpio_config3 = error_code;\n              gpio_config5 = error_code;\n              error_code = configure_pwm_channel(&DAT_20001540,&gpio_config1,8);\n              if (error_code == 0) break;\n              error_code = 0x100;\n            }\n            value = configure_pwm_channel(&DAT_20001540,&gpio_config1,0xc);\n            if (value == 0) break;\n            error_code = 0x105;\n          }\n          post_initialize_tim(&DAT_20001540);\n          DAT_200014c8 = 0x40000800;\n          DAT_200014cc = 2;\n          DAT_200014d4 = 1000;\n          DAT_200014d0 = value;\n          DAT_200014d8 = value;\n          error_code = initialize_tim_pwm(&DAT_200014c8);\n          if (error_code == 0) break;\n          error_code = 0x122;\n        }\n        channel_config = error_code;\n        var_4 = error_code;\n        error_code = configure_master_sync1(&DAT_200014c8,&channel_config);\n        if (error_code == 0) break;\n        error_code = 0x129;\n      }\n      gpio_config1 = 0x60;\n      gpio_config2 = error_code;\n      gpio_config3 = error_code;\n      gpio_config5 = error_code;\n      error_code = configure_pwm_channel(&DAT_200014c8,&gpio_config1,8);\n      if (error_code == 0) break;\n      error_code = 0x132;\n    }\n    error_code = configure_pwm_channel(&DAT_200014c8,&gpio_config1,0xc);\n    if (error_code == 0) break;\n    error_code = 0x137;\n  }\n  post_initialize_tim(&DAT_200014c8);\n  return;\n}\n\n",
            "current_name": "initialize_peripherals_0800458c",
            "entrypoint": "0x0800458c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800458c": "initialize_peripherals_0800458c",
                "HAL_GPIO_Init": "initialize_gpio",
                "HAL_GPIO_WritePin": "write_gpio_pin",
                "HAL_I2C_Init": "initialize_i2_c",
                "HAL_Init": "initialize_hardware",
                "HAL_TIMEx_ConfigBreakDeadTime": "configure_break_dead_time1",
                "HAL_TIMEx_MasterConfigSynchronization": "configure_master_sync1",
                "HAL_TIM_MspPostInit": "post_initialize_tim",
                "HAL_TIM_PWM_ConfigChannel": "configure_pwm_channel",
                "HAL_TIM_PWM_Init": "initialize_tim_pwm",
                "HAL_TIM_PWM_Init()": "initialize_pwmtim4",
                "HAL_UART_Init": "initialize_uart",
                "SystemClock_Config": "configure_system_clock",
                "_Error_Handler": "handle_error",
                "iVar1": "error_code",
                "iVar3": "value",
                "local_1c": "break_dead_time_error5",
                "local_20": "break_dead_time",
                "local_24": "gpio_config5",
                "local_28": "gpio_config4",
                "local_2c": "gpio_config3",
                "local_30": "gpio_config2",
                "local_34": "gpio_config1",
                "local_38": "var_8",
                "local_3c": "var_7",
                "local_40": "var_6",
                "local_48": "var_5",
                "local_4c": "var_4",
                "local_50": "channel_config",
                "local_54": "timer2",
                "local_58": "master_config",
                "uVar2": "error_code"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800483c": {
            "additional_data": {
                ".": {
                    "1": "constant_8"
                },
                ": .": {
                    "1": "constant_1"
                },
                "FUN_0800483c": {
                    "1": "calculate_something",
                    "12": "calculate_result",
                    "16": "calculate_values"
                },
                "__addsf3": {
                    "1": "add_floats"
                },
                "__aeabi_fcmpgt": {
                    "1": "compare_greater_than"
                },
                "__aeabi_fcmplt": {
                    "1": "compare_less_than"
                },
                "__aeabi_fdiv": {
                    "1": "divide_floats"
                },
                "__aeabi_fmul": {
                    "1": "multiply_floats"
                },
                "__aeabi_fsub": {
                    "1": "subtract_floats"
                },
                "__floatsisf": {
                    "1": "convert_int_to_float"
                },
                "array[0x10]": {
                    "1": "value8"
                },
                "array[0x12]": {
                    "1": "value9"
                },
                "array[0x13]": {
                    "1": "value10"
                },
                "array[0x14]": {
                    "1": "value11"
                },
                "array[0x15]": {
                    "1": "value12"
                },
                "array[0xc]": {
                    "1": "value1"
                },
                "array[0xc] - array[0xd]": {
                    "1": "value6"
                },
                "array[0xe]": {
                    "1": "value7"
                },
                "array[0xf]": {
                    "1": "value5"
                },
                "array[10]": {
                    "1": "value4"
                },
                "array[7]": {
                    "1": "value2"
                },
                "array[9]": {
                    "1": "value3"
                },
                "iVar3": {
                    "1": "variable1",
                    "2": "temp_var3",
                    "3": "var1",
                    "8": "value1"
                },
                "iVar4": {
                    "1": "value4",
                    "2": "result1",
                    "3": "var2",
                    "4": "temp_var1",
                    "8": "value2"
                },
                "iVar5": {
                    "1": "value_3",
                    "2": "temp3",
                    "3": "var5",
                    "8": "value3"
                },
                "param_1": {
                    "1": "arguments",
                    "3": "values",
                    "4": "input_values",
                    "7": "input_array",
                    "9": "parameters"
                },
                "uVar1": {
                    "1": "result_var1",
                    "15": "result1",
                    "2": "temp_1",
                    "6": "temp1"
                },
                "uVar2": {
                    "1": "temp_value2",
                    "15": "result2",
                    "2": "temp_2",
                    "5": "temp2"
                }
            },
            "called": [
                "FUN_08000c44",
                "FUN_08000ad8",
                "FUN_08000adc",
                "FUN_08000e54",
                "FUN_08001028",
                "FUN_08001064",
                "FUN_08000cec"
            ],
            "calling": [
                "FUN_08004a84"
            ],
            "code": "\nvoid calculate_values_0800483c(int *parameters)\n\n{\n  undefined4 result1;\n  undefined4 result2;\n  int value1;\n  int value2;\n  int value3;\n  \n  value2 = parameters[0xc];\n  result1 = add_floats(parameters[7],parameters[9]);\n  value2 = subtract_floats(result1,value2);\n  parameters[10] = value2;\n  if (*parameters == 3) {\n    value2 = compare_greater_than(parameters[10],0);\n    if (value2 == 0) {\n      value2 = compare_less_than(parameters[10],0xc3340000);\n    }\n    else {\n      value2 = compare_greater_than(parameters[10],0x43340000);\n    }\n    if (value2 != 0) {\n      value3 = parameters[10];\n      result1 = multiply_floats(parameters[10],0x43b40000);\n      value2 = compare_greater_than(parameters[10],0);\n      value1 = parameters[10];\n      if (value2 == 0) {\n        value1 = value1 + -0x80000000;\n      }\n      result1 = divide_floats(result1,value1);\n      value2 = subtract_floats(value3,result1);\n      parameters[10] = value2;\n    }\n  }\n  value3 = parameters[2];\n  value1 = parameters[3];\n  value2 = multiply_floats(parameters[1],parameters[10]);\n  parameters[0xe] = value2;\n  value2 = add_floats(parameters[10],parameters[0xf]);\n  parameters[0xf] = value2;\n  value2 = compare_less_than(parameters[0xf],0xc3fa0000);\n  if (value2 == 0) {\n    value2 = compare_greater_than(parameters[0xf],0x43fa0000);\n    if (value2 == 0) {\n      value2 = parameters[0xf];\n    }\n    else {\n      value2 = 0x43fa0000;\n    }\n  }\n  else {\n    value2 = -0x3c060000;\n  }\n  parameters[0xf] = value2;\n  value2 = subtract_floats(parameters[0xc],parameters[0xd]);\n  parameters[0x10] = value2;\n  value2 = parameters[0xe];\n  result1 = multiply_floats(value3,parameters[0xf]);\n  result1 = add_floats(result1,value2);\n  result2 = multiply_floats(value1,parameters[0x10]);\n  value2 = subtract_floats(result1,result2);\n  parameters[0x12] = value2;\n  result1 = convert_int_to_float(parameters[0x13]);\n  value2 = compare_less_than(parameters[0x12],0xc3fa0000);\n  if (value2 == 0) {\n    value2 = compare_greater_than(parameters[0x12],0x43fa0000);\n    if (value2 == 0) {\n      value2 = parameters[0x12];\n    }\n    else {\n      value2 = 0x43fa0000;\n    }\n  }\n  else {\n    value2 = -0x3c060000;\n  }\n  value2 = multiply_floats(value2,result1);\n  parameters[0x12] = value2;\n  parameters[0xd] = parameters[0xc];\n  parameters[0xb] = parameters[10];\n  parameters[0x15] = parameters[0x14];\n  return;\n}\n\n",
            "current_name": "calculate_values_0800483c",
            "entrypoint": "0x0800483c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800483c": "calculate_values_0800483c",
                "__addsf3": "add_floats",
                "__aeabi_fcmpgt": "compare_greater_than",
                "__aeabi_fcmplt": "compare_less_than",
                "__aeabi_fdiv": "divide_floats",
                "__aeabi_fmul": "multiply_floats",
                "__aeabi_fsub": "subtract_floats",
                "__floatsisf": "convert_int_to_float",
                "iVar3": "value1",
                "iVar4": "value2",
                "iVar5": "value3",
                "param_1": "parameters",
                "uVar1": "result1",
                "uVar2": "result2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004a30": {
            "additional_data": {
                "0x42c80000": {
                    "1": "scaling_factor"
                },
                "DAT_20000068": {
                    "1": "calibrated_altitude",
                    "2": "calculated_altitude1",
                    "4": "altitude1",
                    "6": "filtered_altitude1"
                },
                "DAT_2000007c": {
                    "1": "update_altitude_value2",
                    "2": "calculated_altitude2",
                    "4": "altitude2",
                    "6": "filtered_altitude2"
                },
                "DAT_20000094": {
                    "1": "altitude_value",
                    "8": "final_altitude"
                },
                "DAT_20000285": {
                    "1": "is_calculation_enabled",
                    "2": "flag1",
                    "3": "is_altitude_set",
                    "5": "is_altitude_available"
                },
                "DAT_20000288": {
                    "1": "altitude_value",
                    "8": "default_altitude"
                },
                "DAT_200002a8": {
                    "1": "is_condition2",
                    "2": "flag2",
                    "3": "is_filtered_altitude_set"
                },
                "FUN_08000cec": {
                    "1": "calculate_result"
                },
                "FUN_08003068": {
                    "1": "get_altitude_filtered",
                    "6": "get_filtered_altitude"
                },
                "FUN_08004a30": {
                    "1": "update_altitude_values",
                    "15": "calculate_altitude",
                    "2": "update_filtered_altitude",
                    "5": "calculate_filtered_altitude",
                    "6": "update_altitude_data"
                },
                "MS5611_GetFilteredAltitude": {
                    "23": "get_filtered_altitude"
                },
                "__aeabi_fmul": {
                    "2": "multiply",
                    "4": "multiply_float",
                    "5": "multiply_floats"
                },
                "param_1": {
                    "1": "unspecified_param1",
                    "3": "pressure"
                },
                "param_2": {
                    "1": "unspecified_param2",
                    "3": "temperature"
                },
                "param_3": {
                    "1": "unknown_param",
                    "2": "param_3"
                },
                "param_4": {
                    "1": "unknown_param",
                    "2": "param_4"
                },
                "uVar1": {
                    "24": "filtered_altitude",
                    "4": "altitude"
                }
            },
            "called": [
                "FUN_08003068",
                "FUN_08000cec"
            ],
            "calling": [
                "FUN_08004a84"
            ],
            "code": "\nvoid calculate_altitude_08004a30(void)\n\n{\n  undefined4 filtered_altitude;\n  \n  if (DAT_20000285 != '\\0') {\n    if (DAT_200002a8 == '\\0') {\n      filtered_altitude = get_filtered_altitude();\n      DAT_20000068 = multiply_floats(filtered_altitude,0x42c80000);\n      DAT_200002a8 = '\\x01';\n    }\n    else {\n      filtered_altitude = get_filtered_altitude();\n      DAT_2000007c = multiply_floats(filtered_altitude,0x42c80000);\n    }\n  }\n  if (DAT_20000285 == '\\0') {\n    if (DAT_200002a8 != '\\0') {\n      DAT_200002a8 = DAT_20000285;\n    }\n    DAT_20000094 = DAT_20000288;\n  }\n  return;\n}\n\n",
            "current_name": "calculate_altitude_08004a30",
            "entrypoint": "0x08004a30",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004a30": "calculate_altitude_08004a30",
                "MS5611_GetFilteredAltitude": "get_filtered_altitude",
                "__aeabi_fmul": "multiply_floats",
                "uVar1": "filtered_altitude"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004a84": {
            "additional_data": {
                "AHRS_GetPitch": {
                    "4": "get_pitch"
                },
                "AHRS_GetRoll": {
                    "4": "get_roll"
                },
                "AHRS_GetYaw": {
                    "4": "get_yaw"
                },
                "DAT_2000004c": {
                    "1": "pid_variable4"
                },
                "DAT_20000050": {
                    "1": "fix_variable1"
                },
                "DAT_20000054": {
                    "1": "fix_variable2"
                },
                "DAT_20000058": {
                    "1": "data11"
                },
                "DAT_20000094": {
                    "1": "new_data"
                },
                "DAT_200000a8": {
                    "1": "pid_variable1"
                },
                "DAT_200000ac": {
                    "1": "speed_value1"
                },
                "DAT_200000b0": {
                    "1": "value2"
                },
                "DAT_200000d8": {
                    "1": "pitch_value"
                },
                "DAT_200000f0": {
                    "1": "pid_variable7"
                },
                "DAT_20000104": {
                    "1": "pid_variable2"
                },
                "DAT_20000108": {
                    "1": "value3"
                },
                "DAT_2000010c": {
                    "1": "data4"
                },
                "DAT_20000110": {
                    "1": "value5"
                },
                "DAT_20000134": {
                    "1": "roll_value"
                },
                "DAT_2000014c": {
                    "1": "speed2"
                },
                "DAT_20000160": {
                    "1": "pid_variable3"
                },
                "DAT_20000164": {
                    "1": "speed_value6"
                },
                "DAT_20000168": {
                    "1": "speed_value7"
                },
                "DAT_2000016c": {
                    "1": "value8"
                },
                "DAT_20000190": {
                    "1": "yaw_angle"
                },
                "DAT_200001a8": {
                    "1": "speed3"
                },
                "DAT_20000284": {
                    "1": "flag2"
                },
                "DAT_20000285": {
                    "1": "is_working"
                },
                "DAT_20000288": {
                    "1": "constant_value"
                },
                "DAT_2000139b": {
                    "1": "fix_value1"
                },
                "DAT_2000139f": {
                    "1": "fix_value2"
                },
                "DAT_200013a3": {
                    "1": "altitude3"
                },
                "FUN_08000adc": {
                    "1": "compare_value_with_zero",
                    "11": "compare_floats",
                    "2": "calculate_altitude",
                    "3": "compare_float_greater_than"
                },
                "FUN_08000cec": {
                    "1": "compare_float_less_than",
                    "2": "compare_unsigned",
                    "4": "compare_floats"
                },
                "FUN_08001028": {
                    "1": "is_dat_20000284_true",
                    "3": "check_condition",
                    "5": "check_flag"
                },
                "FUN_08001064": {
                    "1": "check_toggle_led",
                    "2": "is_flag_set",
                    "6": "check_flag"
                },
                "FUN_080010c4": {
                    "1": "fix_value",
                    "2": "convert_float_to_unsigned_int",
                    "3": "convert_to_unsigned_int"
                },
                "FUN_08002ec0": {
                    "1": "initialize_sensor",
                    "3": "update_pitch",
                    "4": "ahrs_get_pitch",
                    "9": "get_pitch"
                },
                "FUN_08002ed4": {
                    "1": "__fixunssfsi",
                    "2": "motor_distribute_speed",
                    "5": "compute_pid"
                },
                "FUN_08002ee8": {
                    "1": "ahrs_get_pitch",
                    "2": "stop_all_motors",
                    "3": "distribute_speed"
                },
                "FUN_08003f3c": {
                    "1": "pid_update_altitude",
                    "11": "toggle_led",
                    "2": "compare_float_less_than",
                    "3": "distribute_speed",
                    "6": "motor_distribute_speed"
                },
                "FUN_080041c4": {
                    "1": "pid_compute",
                    "2": "compute_roll_pid",
                    "4": "compute_pid",
                    "5": "toggle_led"
                },
                "FUN_0800426c": {
                    "1": "pid_compute",
                    "2": "compute_altitude_pid",
                    "4": "compute_pid",
                    "7": "toggle_led"
                },
                "FUN_0800483c": {
                    "1": "update_pid",
                    "2": "pid_compute",
                    "3": "update_altitude",
                    "4": "stop_motors",
                    "6": "pid_update_altitude"
                },
                "FUN_08004a30": {
                    "1": "update_pid",
                    "2": "pid_compute",
                    "3": "motor_stop_all",
                    "6": "stop_all_motors"
                },
                "FUN_08004a84": {
                    "1": "update_ahrs_data",
                    "4": "calculate_pitch_roll_yaw",
                    "7": "update_sensor_data",
                    "8": "update_flight_data"
                },
                "Motor_DistributeSpeed": {
                    "3": "distribute_motor_speed"
                },
                "Motor_StopAll": {
                    "1": "stop_motors",
                    "5": "stop_all_motors"
                },
                "PID_Compute": {
                    "6": "compute_pid"
                },
                "PID_Update": {
                    "1": ""
                },
                "PID_UpdateAltitude": {
                    "5": "update_altitude"
                },
                "__addsf3": {
                    "1": "add_single_float3",
                    "2": "add_floats",
                    "3": "add_float"
                },
                "__aeabi_fcmpgt": {
                    "1": "float_greater_than",
                    "2": "is_greater_than"
                },
                "__aeabi_fcmplt": {
                    "1": "float_less_than",
                    "2": "is_less_than"
                },
                "__aeabi_fmul": {
                    "1": "float_multiply",
                    "2": "multiply_floats",
                    "3": "multiply_float"
                },
                "__fixunssfsi": {
                    "1": "convert_float_to_unsigned_int",
                    "3": "convert_to_unsigned_int"
                },
                "checkFlag": {
                    "1": ""
                },
                "compareFloat": {
                    "1": ""
                },
                "compareUnsigned": {
                    "1": ""
                },
                "computeFixunssfsi": {
                    "1": ""
                },
                "iVar1": {
                    "1": "result",
                    "2": "comparison_result"
                },
                "initializeSensorData": {
                    "1": ""
                },
                "param_1": {
                    "1": "pi_dvalue"
                },
                "param_2": {
                    "1": "pi_dvalue"
                },
                "param_3": {
                    "1": "pi_dvalue"
                },
                "param_4": {
                    "1": "pi_dvalue"
                },
                "resetData": {
                    "1": ""
                },
                "toggleLED": {
                    "1": "",
                    "6": "toggle_led"
                },
                "updateSensorData": {
                    "1": ""
                }
            },
            "called": [
                "FUN_08002ec0",
                "FUN_0800426c",
                "FUN_080041c4",
                "FUN_0800483c",
                "FUN_08000adc",
                "FUN_08003f3c",
                "FUN_08001064",
                "FUN_08000cec",
                "FUN_080010c4",
                "FUN_08004a30",
                "FUN_08002ee8",
                "FUN_08001028",
                "FUN_08002ed4"
            ],
            "calling": [
                "FUN_0800411c"
            ],
            "code": "\nvoid update_flight_data_08004a84(void)\n\n{\n  int comparison_result;\n  \n  DAT_200000d8 = get_pitch();\n  DAT_20000134 = get_roll();\n  DAT_20000190 = get_yaw();\n  update_altitude();\n  comparison_result = is_greater_than(DAT_200000d8,0);\n  if (comparison_result == 0) {\n    comparison_result = is_less_than(DAT_200000d8,0xc2a00000);\n  }\n  else {\n    comparison_result = is_greater_than(DAT_200000d8,0x42a00000);\n  }\n  if (comparison_result == 0) {\n    comparison_result = is_greater_than(DAT_20000134,0);\n    if (comparison_result == 0) {\n      comparison_result = is_less_than(DAT_20000134,0xc2a00000);\n    }\n    else {\n      comparison_result = is_greater_than(DAT_20000134,0x42a00000);\n    }\n    if (comparison_result == 0) {\n      toggle_led(1,1);\n      compute_pid(&DAT_200000a8);\n      compute_pid(&DAT_20000104);\n      compute_pid(&DAT_20000160);\n      if (DAT_20000285 != '\\0') {\n        compute_pid(&DAT_2000004c);\n        add_float(DAT_20000094,0x44bb8000);\n      }\n      DAT_20000094 = DAT_20000288;\n      if (DAT_20000284 == '\\0') {\n        stop_all_motors();\n      }\n      else {\n        distribute_speed(DAT_20000288,DAT_200000f0,DAT_2000014c,DAT_200001a8);\n      }\n      multiply_float(DAT_200000ac,0x437f0000);\n      DAT_2000139b._3_1_ = convert_to_unsigned_int();\n      multiply_float(DAT_200000b0,0x437f0000);\n      DAT_2000139f._0_1_ = convert_to_unsigned_int();\n      multiply_float(DAT_20000108,0x437f0000);\n      DAT_2000139b._0_1_ = convert_to_unsigned_int();\n      multiply_float(DAT_2000010c,0x437f0000);\n      DAT_2000139b._1_1_ = convert_to_unsigned_int();\n      multiply_float(DAT_20000110,0x437f0000);\n      DAT_2000139b._2_1_ = convert_to_unsigned_int();\n      multiply_float(DAT_20000164,0x437f0000);\n      DAT_2000139f._2_1_ = convert_to_unsigned_int();\n      multiply_float(DAT_20000168,0x437f0000);\n      DAT_2000139f._3_1_ = convert_to_unsigned_int();\n      multiply_float(DAT_2000016c,0x437f0000);\n      DAT_200013a3._0_1_ = convert_to_unsigned_int();\n      multiply_float(DAT_20000050,0x437f0000);\n      DAT_200013a3._1_1_ = convert_to_unsigned_int();\n      multiply_float(DAT_20000054,0x437f0000);\n      DAT_200013a3._2_1_ = convert_to_unsigned_int();\n      multiply_float(DAT_20000058,0x437f0000);\n      DAT_200013a3._3_1_ = convert_to_unsigned_int();\n      return;\n    }\n  }\n  stop_all_motors();\n  toggle_led(0,1);\n  return;\n}\n\n",
            "current_name": "update_flight_data_08004a84",
            "entrypoint": "0x08004a84",
            "imported": false,
            "improved": true,
            "renaming": {
                "AHRS_GetPitch": "get_pitch",
                "AHRS_GetRoll": "get_roll",
                "AHRS_GetYaw": "get_yaw",
                "FUN_08004a84": "update_flight_data_08004a84",
                "Motor_DistributeSpeed": "distribute_speed",
                "Motor_StopAll": "stop_all_motors",
                "PID_Compute": "compute_pid",
                "PID_UpdateAltitude": "update_altitude",
                "__addsf3": "add_float",
                "__aeabi_fcmpgt": "is_greater_than",
                "__aeabi_fcmplt": "is_less_than",
                "__aeabi_fmul": "multiply_float",
                "__fixunssfsi": "convert_to_unsigned_int",
                "iVar1": "comparison_result",
                "toggleLED": "toggle_led"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004c18": {
            "additional_data": {
                "DAT_2000157c": {
                    "1": "chip_register"
                },
                "DAT_20001584": {
                    "1": "constant_value",
                    "2": "constant1"
                },
                "DAT_2000158c": {
                    "1": "int_var2",
                    "2": "constant2"
                },
                "DAT_200015a0": {
                    "1": "char_var4",
                    "2": "flag4",
                    "3": "char4"
                },
                "DAT_200015a2": {
                    "1": "char_var6",
                    "2": "count"
                },
                "DAT_200015b4": {
                    "1": "char_var2",
                    "2": "flag2",
                    "3": "char2"
                },
                "DAT_200015b5": {
                    "1": "control_char_1",
                    "3": "char1"
                },
                "DAT_200015b8": {
                    "1": "char_var3",
                    "2": "flag3",
                    "3": "char3"
                },
                "DAT_20001636": {
                    "1": "global_var1",
                    "2": "input_data",
                    "3": "data"
                },
                "FUN_08004c18": {
                    "1": "check_string_validity",
                    "12": "process_data",
                    "2": "extract_data",
                    "3": "check_data_validity"
                },
                "HAL_GetTick": {
                    "1": "get_tick"
                },
                "_0_1_": {
                    "1": "result"
                },
                "iVar2": {
                    "1": "counter_var",
                    "2": "current_time",
                    "3": "var1",
                    "6": "start_time",
                    "8": "tick_start"
                },
                "iVar3": {
                    "1": "counter_var2",
                    "2": "current_tick",
                    "3": "var2",
                    "5": "tick_end"
                },
                "param_1": {
                    "1": "input_value",
                    "15": "input",
                    "2": "data",
                    "4": "input_data",
                    "7": "input_param"
                },
                "piVar1": {
                    "1": "ptr_array",
                    "2": "pointer",
                    "4": "pointer1",
                    "6": "ptr1"
                },
                "puVar4": {
                    "1": "ptr_data",
                    "2": "pointer_var2",
                    "3": "data_pointer",
                    "5": "ptr2",
                    "6": "data_ptr"
                }
            },
            "called": [
                "FUN_0800115c"
            ],
            "calling": [
                "FUN_08004300",
                "FUN_08004c8c",
                "FUN_08004490"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0800289e) */\n\nundefined4 process_data_08004c18(undefined input)\n\n{\n  int *ptr1;\n  int tick_start;\n  int current_time;\n  ushort *data_ptr;\n  \n  DAT_20001636.result = input;\n  data_ptr = &DAT_20001636;\n  if (((DAT_200015b5 != '\\x01') && (DAT_200015b5 != '\\\"')) || (DAT_200015b4 == '\\x01')) {\n    return 2;\n  }\n  DAT_200015b4 = 1;\n  DAT_200015b8 = 0;\n  DAT_200015a0 = 1;\n  if (DAT_200015b5 == '\\\"') {\n    DAT_200015b5 = '2';\n  }\n  else {\n    DAT_200015b5 = '\\x12';\n  }\n  DAT_200015a2 = 1;\nLAB_080027c4:\n  do {\n    if (DAT_200015a2 == 0) {\n      tick_start = get_tick();\n      do {\n        if (*DAT_2000157c << 0x19 < 0) {\n          if (DAT_200015b5 == '2') {\n            DAT_200015b5 = 0x22;\n          }\n          else {\n            DAT_200015b5 = 1;\n          }\n          DAT_200015b4 = 0;\n          return 0;\n        }\n        current_time = get_tick();\n      } while ((uint)(current_time - tick_start) < 6);\nLAB_0800281c:\n      ptr1 = DAT_2000157c;\n      DAT_2000157c[3] = DAT_2000157c[3] & 0xffffff7f;\n      ptr1[3] = ptr1[3] & 0xffffffdf;\n      ptr1[3] = ptr1[3] & 0xfffffeff;\n      ptr1[5] = ptr1[5] & 0xfffffffe;\n      DAT_200015b5 = 1;\n      DAT_200015b4 = 0;\n      return 3;\n    }\n    DAT_200015a2 = DAT_200015a2 + -1;\n    if (DAT_20001584 == 0x1000) {\n      tick_start = get_tick();\n      while (-1 < *DAT_2000157c << 0x18) {\n        current_time = get_tick();\n        if (5 < (uint)(current_time - tick_start)) goto LAB_0800281c;\n      }\n      DAT_2000157c[1] = *data_ptr & 0x1ff;\n      if (DAT_2000158c == 0) {\n        data_ptr = data_ptr + 1;\n        goto LAB_080027c4;\n      }\n    }\n    else {\n      tick_start = get_tick();\n      while (-1 < *DAT_2000157c << 0x18) {\n        current_time = get_tick();\n        if (5 < (uint)(current_time - tick_start)) goto LAB_0800281c;\n      }\n      DAT_2000157c[1] = (uint)*(byte *)data_ptr;\n    }\n    data_ptr = (ushort *)((int)data_ptr + 1);\n  } while( true );\n}\n\n",
            "current_name": "process_data_08004c18",
            "entrypoint": "0x08004c18",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004c18": "process_data_08004c18",
                "HAL_GetTick": "get_tick",
                "_0_1_": "result",
                "iVar2": "tick_start",
                "iVar3": "current_time",
                "param_1": "input",
                "piVar1": "ptr1",
                "puVar4": "data_ptr"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004c30": {
            "additional_data": {
                "*(uint *)(DAT_2000157c + 0xc)": {
                    "1": "flag_value1"
                },
                "*(uint *)(iVar1 + 0x14)": {
                    "1": "temp_value2"
                },
                "*(uint *)(iVar1 + 0xc)": {
                    "1": "temp_value3"
                },
                "*(uint *)(settingsData1 + 0x14)": {
                    "1": "temp_var3"
                },
                "*(uint *)(settingsData1 + 0xc)": {
                    "1": "temp_var4"
                },
                "*(uint *)(tempVar + 0x14)": {
                    "1": "temp_var3"
                },
                "*(uint *)(tempVar + 0xc)": {
                    "1": "temp_var4"
                },
                "0x12": {
                    "1": "flag_value1"
                },
                "0x22": {
                    "1": "flag_value3"
                },
                "0x32": {
                    "1": "constant_value2"
                },
                "0x40013800": {
                    "1": "constant_value"
                },
                "CBO_Write": {
                    "1": "write_data"
                },
                "CB_Write": {
                    "1": "update_data",
                    "3": "write_to_cb",
                    "8": "write_to_buffer"
                },
                "DAT_20000364": {
                    "1": "data_buffer1",
                    "2": "buffer_address",
                    "4": "data1",
                    "5": "buffer"
                },
                "DAT_20001534": {
                    "1": "write_data"
                },
                "DAT_2000157c": {
                    "1": "constant3",
                    "2": "constant1",
                    "5": "var1"
                },
                "DAT_200015a4": {
                    "1": "buffer_data",
                    "2": "var2",
                    "3": "pointer"
                },
                "DAT_200015a8": {
                    "1": "var2",
                    "12": "flag4",
                    "2": "flag_4",
                    "4": "flag2"
                },
                "DAT_200015aa": {
                    "1": "var_6",
                    "12": "flag5",
                    "2": "flag_5",
                    "4": "flag3"
                },
                "DAT_200015b4": {
                    "1": "status_flag2",
                    "13": "flag2",
                    "2": "flag_2",
                    "3": "condition2"
                },
                "DAT_200015b5": {
                    "1": "var2",
                    "12": "flag1",
                    "2": "flag2",
                    "3": "condition1"
                },
                "DAT_200015b8": {
                    "1": "temp_flag1",
                    "12": "flag3",
                    "2": "flag_3",
                    "4": "flag1"
                },
                "DAT_20001634": {
                    "1": "constant2",
                    "2": "write_value",
                    "4": "data2",
                    "5": "data_to_write"
                },
                "FUN_08003ec8": {
                    "1": "process_data"
                },
                "FUN_08004c30": {
                    "1": "check_memory_validity",
                    "2": "process_param",
                    "7": "process_data"
                },
                "iVar1": {
                    "1": "var2",
                    "11": "result",
                    "2": "local_var1",
                    "9": "temp_var"
                },
                "param_1": {
                    "1": "memory_address",
                    "2": "data_pointer",
                    "3": "input_param",
                    "7": "param",
                    "9": "data"
                },
                "param_2": {
                    "1": "value"
                },
                "uint": {
                    "2": "unsigned_int"
                }
            },
            "called": [
                "FUN_08003ec8"
            ],
            "calling": [
                "FUN_0800290c"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08002902) */\n\nint * process_data_08004c30(int *data)\n\n{\n  int result;\n  \n  if (*data != 0x40013800) {\n    return data;\n  }\n  write_to_buffer(&DAT_20000364,DAT_20001634);\n  result = DAT_2000157c;\n  if (((DAT_200015b5 == '\\x01') || (DAT_200015b5 == '\\x12')) && (DAT_200015b4 != '\\x01')) {\n    DAT_200015b8 = 0;\n    DAT_200015a8 = 1;\n    DAT_200015aa = 1;\n    DAT_200015b4 = 0;\n    if (DAT_200015b5 == '\\x12') {\n      DAT_200015b5 = 0x32;\n    }\n    else {\n      DAT_200015b5 = 0x22;\n    }\n    DAT_200015a4 = &DAT_20001634;\n    *(unsigned_int *)(DAT_2000157c + 0xc) = *(unsigned_int *)(DAT_2000157c + 0xc) | 0x100;\n    *(unsigned_int *)(result + 0x14) = *(unsigned_int *)(result + 0x14) | 1;\n    *(unsigned_int *)(result + 0xc) = *(unsigned_int *)(result + 0xc) | 0x20;\n    return (int *)0x0;\n  }\n  return (int *)0x2;\n}\n\n",
            "current_name": "process_data_08004c30",
            "entrypoint": "0x08004c30",
            "imported": false,
            "improved": true,
            "renaming": {
                "CB_Write": "write_to_buffer",
                "FUN_08004c30": "process_data_08004c30",
                "iVar1": "result",
                "param_1": "data",
                "uint": "unsigned_int"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004c64": {
            "additional_data": {
                "&DAT_20000364": {
                    "1": "array"
                },
                "0": {
                    "1": "array_size"
                },
                "<original_function_name>": {
                    "1": "initialize_data"
                },
                "DAT_20000364": {
                    "1": "array"
                },
                "DAT_20000b64": {
                    "1": "var1",
                    "2": "variable1",
                    "5": "data1"
                },
                "DAT_20000b66": {
                    "1": "var2",
                    "2": "variable2",
                    "5": "data2"
                },
                "DAT_20000b68": {
                    "1": "var3",
                    "2": "variable3",
                    "5": "data3"
                },
                "FUN_08004c64": {
                    "2": "initialize_memory",
                    "28": "initialize_data"
                },
                "iVar1": {
                    "1": "loop_counter",
                    "10": "counter",
                    "20": "index"
                }
            },
            "called": [],
            "calling": [
                "FUN_08004c70"
            ],
            "code": "\nvoid initialize_data_08004c64(void)\n\n{\n  int index;\n  \n  index = 0;\n  DAT_20000b64 = 0;\n  DAT_20000b66 = 0;\n  DAT_20000b68 = 0;\n  do {\n    (&DAT_20000364)[index] = 0;\n    index = index + 1;\n  } while (index != 0x800);\n  return;\n}\n\n",
            "current_name": "initialize_data_08004c64",
            "entrypoint": "0x08004c64",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004c64": "initialize_data_08004c64",
                "iVar1": "index"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004c70": {
            "additional_data": {
                "0x22": {
                    "1": "value2"
                },
                "0x32": {
                    "1": "value1"
                },
                "DAT_2000157c": {
                    "1": "data_var",
                    "2": "data_variable",
                    "3": "serial_data"
                },
                "DAT_200015a4": {
                    "1": "some_data",
                    "2": "buffer_pointer",
                    "5": "data_pointer",
                    "6": "buffer"
                },
                "DAT_200015a8": {
                    "1": "variable2",
                    "2": "flag4",
                    "3": "flag1",
                    "5": "flag2"
                },
                "DAT_200015aa": {
                    "1": "variable2",
                    "2": "flag5",
                    "3": "flag2",
                    "5": "flag3"
                },
                "DAT_200015b4": {
                    "1": "flag_byte",
                    "2": "condition2",
                    "4": "flag2",
                    "7": "flag"
                },
                "DAT_200015b5": {
                    "1": "data_variable2",
                    "2": "condition1",
                    "4": "flag1"
                },
                "DAT_200015b8": {
                    "1": "first_flag",
                    "2": "var1",
                    "3": "flag3",
                    "5": "flag1",
                    "6": "counter"
                },
                "DAT_20001634": {
                    "1": "default_data_address",
                    "2": "buffer_data",
                    "3": "constant_value"
                },
                "D_2000157c": {
                    "1": "serial_settings_ptr"
                },
                "D_200015a4": {
                    "1": "var4"
                },
                "D_200015a8": {
                    "1": "var2"
                },
                "D_200015aa": {
                    "1": "var3"
                },
                "D_200015b4": {
                    "1": "data_byte2"
                },
                "D_200015b5": {
                    "1": "data_byte1"
                },
                "D_200015b8": {
                    "1": "var1"
                },
                "D_20001634": {
                    "1": "var5"
                },
                "FUN_08004c64": {
                    "1": "flush_communication",
                    "2": "flush_serial"
                },
                "FUN_08004c70": {
                    "1": "update_serial_settings",
                    "12": "initialize_serial_communication",
                    "2": "process_data",
                    "8": "initialize_communication"
                },
                "clearSerialBuffer": {
                    "1": "clear_serial_buffer"
                },
                "iVar1": {
                    "1": "serial_device",
                    "2": "status",
                    "3": "serial_port"
                },
                "initializeCommunication": {
                    "1": "initialize_communication"
                },
                "return 0": {
                    "1": "return_success",
                    "2": "return_status0",
                    "3": "success"
                },
                "return 2": {
                    "1": "return_error",
                    "2": "return_status2",
                    "3": "failure"
                },
                "serialFlush": {
                    "1": "flush_serial_port",
                    "5": "flush_serial",
                    "6": "clear_serial_buffer",
                    "8": "flush_serial_data"
                },
                "uint": {
                    "2": "unsigned_int"
                },
                "|": {
                    "1": "bitwise_or"
                }
            },
            "called": [
                "FUN_08004c64"
            ],
            "calling": [
                "FUN_08004194"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08002902) */\n\nundefined4 initialize_serial_communication_08004c70(void)\n\n{\n  int data_pointer;\n  \n  flush_serial_data();\n  data_pointer = DAT_2000157c;\n  if (((DAT_200015b5 == '\\x01') || (DAT_200015b5 == '\\x12')) && (DAT_200015b4 != '\\x01')) {\n    DAT_200015b8 = 0;\n    DAT_200015a8 = 1;\n    DAT_200015aa = 1;\n    DAT_200015b4 = 0;\n    if (DAT_200015b5 == '\\x12') {\n      DAT_200015b5 = 0x32;\n    }\n    else {\n      DAT_200015b5 = 0x22;\n    }\n    DAT_200015a4 = &DAT_20001634;\n    *(unsigned_int *)(DAT_2000157c + 0xc) = *(unsigned_int *)(DAT_2000157c + 0xc) | 0x100;\n    *(unsigned_int *)(data_pointer + 0x14) = *(unsigned_int *)(data_pointer + 0x14) | 1;\n    *(unsigned_int *)(data_pointer + 0xc) = *(unsigned_int *)(data_pointer + 0xc) | 0x20;\n    return 0;\n  }\n  return 2;\n}\n\n",
            "current_name": "initialize_serial_communication_08004c70",
            "entrypoint": "0x08004c70",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004c70": "initialize_serial_communication_08004c70",
                "iVar1": "data_pointer",
                "serialFlush": "flush_serial_data",
                "uint": "unsigned_int"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004c8c": {
            "additional_data": {
                "FUN_08004c8c": {
                    "1": "write_string_to_serial",
                    "2": "print_serial_string",
                    "23": "print_string"
                },
                "param_1": {
                    "18": "string",
                    "2": "string_to_print",
                    "3": "message",
                    "6": "str"
                },
                "puVar2": {
                    "2": "current_character",
                    "29": "current_char"
                },
                "serialWrite": {
                    "1": "write_to_serial"
                },
                "uVar1": {
                    "1": "len",
                    "18": "string_length",
                    "2": "message_length",
                    "3": "length"
                }
            },
            "called": [
                "FUN_08004c18",
                "FUN_08000150"
            ],
            "calling": [
                "FUN_08004cac",
                "FUN_08004300",
                "FUN_08004490"
            ],
            "code": "\nvoid print_string_08004c8c(undefined *string)\n\n{\n  uint string_length;\n  undefined *current_char;\n  \n  current_char = string;\n  while( true ) {\n    string_length = strlen(string);\n    if (string_length <= (uint)((int)current_char - (int)string)) break;\n    write_to_serial(*current_char);\n    current_char = current_char + 1;\n  }\n  return;\n}\n\n",
            "current_name": "print_string_08004c8c",
            "entrypoint": "0x08004c8c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004c8c": "print_string_08004c8c",
                "param_1": "string",
                "puVar2": "current_char",
                "serialWrite": "write_to_serial",
                "uVar1": "string_length"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004cac": {
            "additional_data": {
                "DAT_0800735e": {
                    "1": "format_specifier",
                    "2": "format_string"
                },
                "DAT_20001636": {
                    "1": "formatted_string"
                },
                "FUN_08004c8c": {
                    "1": "print_text",
                    "3": "print_data",
                    "4": "serial_print",
                    "5": "print_serial"
                },
                "FUN_08004cac": {
                    "1": "print_and_output_value",
                    "13": "print_and_serial_print",
                    "2": "print_formatted_data"
                },
                "FUN_08004ffc": {
                    "1": "format_string_with_values",
                    "11": "format_string",
                    "2": "format_and_print",
                    "3": "format_print"
                },
                "param_1": {
                    "1": "input_number",
                    "2": "string_to_print",
                    "3": "input_data",
                    "4": "message",
                    "5": "input"
                },
                "param_2": {
                    "1": "param_2",
                    "2": "arg2",
                    "3": "param2",
                    "5": "arg1"
                },
                "param_3": {
                    "1": "str2",
                    "2": "arg3",
                    "3": "param3",
                    "5": "arg2"
                },
                "param_4": {
                    "1": "value2",
                    "2": "arg2",
                    "3": "param4",
                    "5": "arg3"
                },
                "serialPrint": {
                    "1": "print_serial"
                },
                "siprintf": {
                    "1": "format_string"
                }
            },
            "called": [
                "FUN_08004ffc",
                "FUN_08004c8c"
            ],
            "calling": [
                "FUN_08004490"
            ],
            "code": "\nvoid print_and_serial_print_08004cac(undefined4 input)\n\n{\n  format_string(&DAT_20001636,&DAT_0800735e,input);\n  print_serial(&DAT_20001636);\n  return;\n}\n\n",
            "current_name": "print_and_serial_print_08004cac",
            "entrypoint": "0x08004cac",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004cac": "print_and_serial_print_08004cac",
                "param_1": "input",
                "serialPrint": "print_serial",
                "siprintf": "format_string"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004ccc": {
            "additional_data": {
                "0xfffffff4": {
                    "1": "interrupt1"
                },
                "0xfffffff5": {
                    "1": "interrupt2"
                },
                "0xfffffff6": {
                    "1": "interrupt3"
                },
                "0xfffffffb": {
                    "1": "ir_qn_tim1_cc"
                },
                "0xfffffffc": {
                    "1": "interrupt5"
                },
                "0xfffffffe": {
                    "1": "interrupt6"
                },
                "0xffffffff": {
                    "1": "interrupt7"
                },
                "FUN_08001170": {
                    "1": "configure_interrupt_priority_level"
                },
                "FUN_08001194": {
                    "1": "set_priority1",
                    "3": "configure_interrupt_priority"
                },
                "FUN_08004ccc": {
                    "1": "set_priority_group_and_levels",
                    "14": "configure_interrupt_priorities",
                    "2": "initialize_nvic_priorities",
                    "3": "initialize_interrupts",
                    "5": "initialize_interrupt_priorities"
                },
                "HAL_NVIC_SetPriority": {
                    "11": "set_interrupt_priority",
                    "3": "set_priority"
                },
                "HAL_NVIC_SetPriorityGrouping": {
                    "1": "set_interrupt_priority_group",
                    "5": "set_priority_grouping",
                    "9": "set_interrupt_priority_grouping"
                },
                "_DAT_40021018": {
                    "1": "interrupt_enable_register",
                    "2": "priority_flags",
                    "6": "interrupt_flags"
                },
                "param_1": {
                    "1": "priority_group",
                    "10": "param1",
                    "2": "value1",
                    "3": "interrupt",
                    "5": "arg1",
                    "6": "priority1"
                },
                "param_2": {
                    "1": "param",
                    "11": "param2",
                    "2": "priority_group",
                    "3": "value2",
                    "5": "arg2"
                },
                "param_3": {
                    "1": "preempt_priority",
                    "11": "param3",
                    "2": "param_3",
                    "3": "value3",
                    "4": "priority2",
                    "5": "arg3"
                }
            },
            "called": [
                "FUN_08001194",
                "FUN_08001170"
            ],
            "calling": [
                "FUN_08001128"
            ],
            "code": "\n\n\nvoid configure_interrupt_priorities_08004ccc(undefined4 param1,undefined4 param2,undefined4 param3)\n\n{\n  _DAT_40021018 = _DAT_40021018 | 1;\n  set_interrupt_priority_grouping(3,param2,_DAT_40021018,1,param1,1,param3);\n  set_interrupt_priority(0xfffffff4,0);\n  set_interrupt_priority(0xfffffff5,0);\n  set_interrupt_priority(0xfffffff6,0);\n  set_interrupt_priority(0xfffffffb,0);\n  set_interrupt_priority(0xfffffffc,0);\n  set_interrupt_priority(0xfffffffe,0);\n  set_interrupt_priority(0xffffffff,0);\n  return;\n}\n\n",
            "current_name": "configure_interrupt_priorities_08004ccc",
            "entrypoint": "0x08004ccc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004ccc": "configure_interrupt_priorities_08004ccc",
                "HAL_NVIC_SetPriority": "set_interrupt_priority",
                "HAL_NVIC_SetPriorityGrouping": "set_interrupt_priority_grouping",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004d48": {
            "additional_data": {
                "FUN_08004d48": {
                    "1": "initialize_and_configure_gpio",
                    "2": "initialize_gpio_pins",
                    "28": "initialize_gpio"
                },
                "HAL_GPIO_Init": {
                    "1": "initialize_gpio"
                },
                "_DAT_4002101c": {
                    "1": "register_value"
                },
                "local_14": {
                    "1": "gpio_configuration2",
                    "2": "gpio_config_mode",
                    "3": "gpio_config_2",
                    "5": "gpio_config2"
                },
                "local_18": {
                    "1": "gpio_configuration_1",
                    "2": "pin_configuration",
                    "3": "gpio_config_1",
                    "5": "gpio_config1"
                },
                "param_1": {
                    "1": "gpio_port",
                    "11": "gpio_address",
                    "2": "gpio_pin",
                    "4": "gpio_base_address"
                },
                "param_2": {
                    "1": "config_param",
                    "2": "unused_param",
                    "4": "param",
                    "5": "param2",
                    "8": "param_2"
                }
            },
            "called": [
                "FUN_08001264"
            ],
            "calling": [
                "FUN_08001754"
            ],
            "code": "\n\n\nvoid initialize_gpio_08004d48(int *gpio_address,undefined4 param_2)\n\n{\n  undefined4 gpio_config1;\n  undefined4 gpio_config2;\n  \n  if (*gpio_address == 0x40005400) {\n    gpio_config1 = 0xc0;\n    gpio_config2 = 0x12;\n    initialize_gpio_08004d48(0x40010c00,&gpio_config1,0x40005400,3,gpio_address,param_2);\n    _DAT_4002101c = _DAT_4002101c | 0x200000;\n  }\n  return;\n}\n\n",
            "current_name": "initialize_gpio_08004d48",
            "entrypoint": "0x08004d48",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004d48": "initialize_gpio_08004d48",
                "HAL_GPIO_Init": "initialize_gpio",
                "local_14": "gpio_config2",
                "local_18": "gpio_config1",
                "param_1": "gpio_address"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004d8c": {
            "additional_data": {
                "FUN_08004d8c": {
                    "1": "update_values",
                    "2": "update_flags",
                    "3": "update_flags_based_on_value",
                    "5": "update_data_flags"
                },
                "_DAT_40021018": {
                    "1": "control_register1"
                },
                "_DAT_4002101c": {
                    "1": "register_flags2"
                },
                "iVar1": {
                    "1": "status_value",
                    "16": "value",
                    "2": "data_value",
                    "4": "current_value"
                },
                "param_1": {
                    "1": "status_value",
                    "2": "data_pointer",
                    "4": "register_value",
                    "5": "value"
                }
            },
            "called": [],
            "calling": [
                "FUN_080023d0"
            ],
            "code": "\n\n/* WARNING: Restarted to delay deadcode elimination for space: ram */\n\nvoid update_data_flags_08004d8c(int *value)\n\n{\n  int value;\n  \n  value = *value;\n  if (value == 0x40012c00) {\n    _DAT_40021018 = _DAT_40021018 | 0x800;\n  }\n  else if (value == 0x40000000) {\n    _DAT_4002101c = _DAT_4002101c | 1;\n  }\n  else if (value == 0x40000400) {\n    _DAT_4002101c = _DAT_4002101c | 2;\n  }\n  else if (value == 0x40000800) {\n    _DAT_4002101c = _DAT_4002101c | 4;\n  }\n  return;\n}\n\n",
            "current_name": "update_data_flags_08004d8c",
            "entrypoint": "0x08004d8c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004d8c": "update_data_flags_08004d8c",
                "iVar1": "value",
                "param_1": "value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004e14": {
            "additional_data": {
                "FUN_08004e14": {
                    "2": "init_gpio",
                    "23": "initialize_gpio",
                    "3": "initialize_gpio_pin"
                },
                "HAL_GPIO_Init": {
                    "1": "initialize_gpio"
                },
                "iVar2": {
                    "1": "gpio_config_value",
                    "10": "gpio_value",
                    "4": "value",
                    "5": "pin_value"
                },
                "local_14": {
                    "1": "gpio_alternate",
                    "2": "local_variable1",
                    "3": "local14",
                    "8": "local_var1"
                },
                "local_18": {
                    "1": "gpio_configuration",
                    "2": "gpio_pin",
                    "3": "pin_mode",
                    "4": "gpio_config",
                    "5": "gpio_mode",
                    "6": "pin_config"
                },
                "local_c": {
                    "1": "unused_var2",
                    "2": "local_variable3",
                    "3": "local_var_c",
                    "7": "local_c",
                    "8": "local_var3"
                },
                "param_1": {
                    "1": "gpio_params",
                    "2": "input_param",
                    "4": "gpio_pin",
                    "8": "gpio_config"
                },
                "param_2": {
                    "1": "param_a",
                    "19": "param2",
                    "2": "param1",
                    "5": "param_2"
                },
                "param_3": {
                    "1": "arg2",
                    "19": "param3",
                    "2": "param2",
                    "5": "param_3"
                },
                "uStack_10": {
                    "1": "unused_stack_var",
                    "2": "local_var10",
                    "3": "u_stack_10",
                    "4": "param3_copy",
                    "8": "local_var2"
                },
                "uVar1": {
                    "1": "gpio_config_addr",
                    "2": "gpio_config_value",
                    "3": "gpio_port",
                    "4": "gpio_config",
                    "5": "gpio_base"
                }
            },
            "called": [
                "FUN_08001264"
            ],
            "calling": [
                "FUN_0800458c"
            ],
            "code": "\nvoid initialize_gpio_08004e14(int *gpio_config,undefined4 param2,undefined4 param3)\n\n{\n  undefined4 gpio_base;\n  int gpio_value;\n  undefined4 pin_config;\n  undefined4 local_var1;\n  undefined4 local_var2;\n  undefined4 local_var3;\n  \n  gpio_value = *gpio_config;\n  if (gpio_value == 0x40012c00) {\n    pin_config = 0x800;\n  }\n  else {\n    if (gpio_value != 0x40000000) {\n      if (gpio_value == 0x40000400) {\n        pin_config = 3;\n      }\n      else {\n        if (gpio_value != 0x40000800) {\n          return;\n        }\n        pin_config = 0x300;\n      }\n      gpio_base = 0x40010c00;\n      goto LAB_08004e2e;\n    }\n    pin_config = 2;\n  }\n  gpio_base = 0x40010800;\nLAB_08004e2e:\n  local_var3 = 2;\n  local_var1 = 2;\n  local_var2 = param3;\n  configure_gpio(gpio_base,&pin_config);\n  return;\n}\n\n",
            "current_name": "initialize_gpio_08004e14",
            "entrypoint": "0x08004e14",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004e14": "initialize_gpio_08004e14",
                "HAL_GPIO_Init": "configure_gpio",
                "iVar2": "gpio_value",
                "local_14": "local_var1",
                "local_18": "pin_config",
                "local_c": "local_var3",
                "param_1": "gpio_config",
                "param_2": "param2",
                "param_3": "param3",
                "uStack_10": "local_var2",
                "uVar1": "gpio_base"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004e7c": {
            "additional_data": {
                "*param_1": {
                    "1": "gpio_address"
                },
                "FUN_08004e7c": {
                    "1": "initialize_hardware",
                    "25": "initialize_gpio",
                    "4": "initialize_gpio_interrupt"
                },
                "HAL_GPIO_Init": {
                    "1": "configure_gpio"
                },
                "HAL_NVIC_EnableIRQ": {
                    "1": "enable_interrupt"
                },
                "HAL_NVIC_SetPriority": {
                    "1": "set_interrupt_priority"
                },
                "local_10": {
                    "1": "gpio_parameters3",
                    "2": "gpio_config3",
                    "4": "gpio_init_struct3"
                },
                "local_14": {
                    "1": "gpio_init_data_2",
                    "2": "pin_config2",
                    "3": "gpio_config2",
                    "4": "gpio_init_struct2"
                },
                "local_18": {
                    "1": "gpio_parameters1",
                    "2": "pin_config1",
                    "3": "gpio_config1",
                    "4": "gpio_config"
                },
                "local_c": {
                    "1": "config_d",
                    "2": "pin_config4",
                    "4": "gpio_init_struct4"
                },
                "param_1": {
                    "1": "gpio_addr",
                    "2": "param",
                    "6": "gpio_address"
                }
            },
            "called": [
                "FUN_08001194",
                "FUN_080011fc",
                "FUN_08001264"
            ],
            "calling": [
                "FUN_08002724"
            ],
            "code": "\n\n\nvoid initialize_gpio_08004e7c(int *gpio_address)\n\n{\n  undefined4 gpio_config;\n  undefined4 gpio_init_struct2;\n  undefined4 gpio_init_struct3;\n  undefined4 gpio_init_struct4;\n  \n  if (*gpio_address == 0x40013800) {\n    _DAT_40021018 = _DAT_40021018 | 0x4000;\n    gpio_config = 0x200;\n    gpio_init_struct2 = 2;\n    gpio_init_struct4 = 3;\n    configure_gpio(0x40010800,&gpio_config);\n    gpio_config = 0x400;\n    gpio_init_struct2 = 0;\n    gpio_init_struct3 = 0;\n    configure_gpio(0x40010800,&gpio_config);\n    set_interrupt_priority(0x25,0,0);\n    enable_interrupt(0x25);\n  }\n  return;\n}\n\n",
            "current_name": "initialize_gpio_08004e7c",
            "entrypoint": "0x08004e7c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004e7c": "initialize_gpio_08004e7c",
                "HAL_GPIO_Init": "configure_gpio",
                "HAL_NVIC_EnableIRQ": "enable_interrupt",
                "HAL_NVIC_SetPriority": "set_interrupt_priority",
                "local_10": "gpio_init_struct3",
                "local_14": "gpio_init_struct2",
                "local_18": "gpio_config",
                "local_c": "gpio_init_struct4",
                "param_1": "gpio_address"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004f10": {
            "additional_data": {
                "": {
                    "1": ""
                },
                "0x1": {
                    "1": "enable_interrupts"
                },
                "0x8000000": {
                    "1": "reset_value"
                },
                "0x9f0000": {
                    "1": "set_bits"
                },
                "0xf8800000": {
                    "1": "clear_bits2"
                },
                "0xfef2ffff": {
                    "1": "clear_bits1"
                },
                "FUN_08004f10": {
                    "1": "configure_memory_regions",
                    "2": "initialize_system",
                    "4": "initialize_peripheral",
                    "7": "initialize_memory"
                },
                "_": {
                    "1": "value"
                },
                "_DAT_40021000": {
                    "1": "config_register1",
                    "2": "peripheral_register1",
                    "4": "register1",
                    "8": "control_register1"
                },
                "_DAT_40021004": {
                    "1": "configuration_reg2",
                    "2": "peripheral_register2",
                    "4": "register2",
                    "8": "control_register2"
                },
                "_DAT_40021008": {
                    "1": "status_register",
                    "2": "memory_address",
                    "3": "register3",
                    "4": "data_register"
                },
                "_DAT_e000ed08": {
                    "1": "debug_control",
                    "2": "register_4",
                    "3": "register4"
                }
            },
            "called": [],
            "calling": [
                "FUN_08004f68"
            ],
            "code": "\n\n\nvoid initialize_registers_08004f10(void)\n\n{\n  valueDATvalue40021000 = valueDATvalue40021000 & 0xfef2ffff | 1;\n  valueDATvalue40021004 = valueDATvalue40021004 & 0xf8800000;\n  valueDATvalue40021008 = 0x9f0000;\n  valueDATvaluee000ed08 = 0x8000000;\n  return;\n}\n\n",
            "current_name": "initialize_registers_08004f10",
            "entrypoint": "0x08004f10",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004f10": "initialize_registers_08004f10",
                "_": "value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004f5c": {
            "called": [
                "FUN_0800115c"
            ],
            "calling": [
                "FUN_0800411c"
            ],
            "code": "\nundefined4 HAL_GetTick(void)\n\n{\n  return DAT_20000244;\n}\n\n",
            "current_name": "FUN_08004f5c",
            "entrypoint": "0x08004f5c",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_08004f60": {
            "called": [
                "FUN_0800115c"
            ],
            "calling": [
                "FUN_08002f28"
            ],
            "code": "\nundefined4 HAL_GetTick(void)\n\n{\n  return DAT_20000244;\n}\n\n",
            "current_name": "FUN_08004f60",
            "entrypoint": "0x08004f60",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_08004f64": {
            "called": [
                "FUN_08001168"
            ],
            "calling": [
                "FUN_0800403c",
                "FUN_08003298",
                "FUN_08004490",
                "FUN_08004028"
            ],
            "code": "\nvoid HAL_Delay(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUN_08004f64",
            "entrypoint": "0x08004f64",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_08004f68": {
            "additional_data": {
                "FUN_080041ae": {
                    "1": "initialize_memory"
                },
                "FUN_08004f10": {
                    "1": "initialize_libc_array"
                },
                "FUN_08004f68": {
                    "1": "copy_initial_data",
                    "14": "initialize_system",
                    "2": "initialize_memory_and_execute",
                    "4": "initialize_memory",
                    "5": "initialize_data"
                },
                "FUN_08004fb4": {
                    "1": "system_init"
                },
                "UNRECOVERED_JUMPTABLE": {
                    "1": "execute_additional_code",
                    "20": "jump_table",
                    "3": "jumptable",
                    "4": "unrecovered_jump_table"
                },
                "iVar1": {
                    "1": "counter",
                    "20": "index",
                    "3": "i",
                    "6": "offset"
                },
                "puVar2": {
                    "1": "array_ptr",
                    "17": "ptr",
                    "3": "data_ptr",
                    "4": "data_pointer",
                    "5": "pointer"
                }
            },
            "called": [
                "FUN_080041ae",
                "FUN_08004fb4",
                "FUN_08004f10"
            ],
            "calling": [],
            "code": "\nvoid initialize_system_08004f68(void)\n\n{\n  int index;\n  undefined4 *ptr;\n  code *jump_table;\n  \n  for (index = 0; (undefined4 *)(index + 0x20000000) < &DAT_20000228; index = index + 4) {\n    *(undefined4 *)(index + 0x20000000) = *(undefined4 *)(index + 0x8007448);\n  }\n  for (ptr = &DAT_20000228; ptr < &DAT_200016a0; ptr = ptr + 1) {\n    *ptr = 0;\n  }\n  SystemInit();\n  __libc_init_array();\n  jump_table = (code *)0x8004f9a;\n  main();\n                    /* WARNING: Could not recover jumptable at 0x08004f9a. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jump_table)();\n  return;\n}\n\n",
            "current_name": "initialize_system_08004f68",
            "entrypoint": "0x08004f68",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004f68": "initialize_system_08004f68",
                "UNRECOVERED_JUMPTABLE": "jump_table",
                "iVar1": "index",
                "puVar2": "ptr"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004fb4": {
            "additional_data": {
                "FUNC_08000134": {
                    "1": "perform_operation"
                },
                "FUNC_080072d4": {
                    "1": "perform_operation",
                    "2": "sub_function1"
                },
                "FUN_08000134": {
                    "1": "sub_function_2",
                    "2": "sub_function2"
                },
                "FUN_08004fb4": {
                    "1": "execute_functions_in_array",
                    "17": "execute_functions",
                    "2": "execute_all_functions",
                    "3": "execute_function_list",
                    "4": "execute_sub_functions"
                },
                "FUN_080072d4": {
                    "1": "function_one"
                },
                "iVar1": {
                    "1": "iteration_count",
                    "16": "index",
                    "6": "counter"
                },
                "param_1": {
                    "1": "param1"
                },
                "param_2": {
                    "1": "task_param_2"
                }
            },
            "called": [
                "FUN_080072d4",
                "FUN_08000134"
            ],
            "calling": [
                "FUN_08004f68"
            ],
            "code": "\nvoid execute_functions_08004fb4(void)\n\n{\n  int index;\n  \n  for (index = 0; index != 0; index = index + 1) {\n    (*(code *)(&DAT_08007440)[index])();\n  }\n  _init();\n  for (index = 0; index != 1; index = index + 1) {\n    (*(code *)(&DAT_08007440)[index])();\n  }\n  return;\n}\n\n",
            "current_name": "execute_functions_08004fb4",
            "entrypoint": "0x08004fb4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004fb4": "execute_functions_08004fb4",
                "iVar1": "index"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004ffc": {
            "additional_data": {
                "FUN_08004ffc": {
                    "1": "print_and_reset",
                    "3": "print_and_reset_buffer",
                    "4": "print_and_clear_buffer",
                    "5": "print_formatted_string"
                },
                "local_64": {
                    "1": "max_int_value_2",
                    "2": "max_size_copy"
                },
                "local_68": {
                    "1": "curr_buffer",
                    "2": "current_address",
                    "3": "current_buffer"
                },
                "local_6a": {
                    "1": "max_int2",
                    "2": "local_var_3",
                    "3": "short_value"
                },
                "local_6c": {
                    "1": "local_limit",
                    "14": "buffer_size",
                    "2": "local_var_2"
                },
                "local_70": {
                    "1": "max_buffer_len",
                    "2": "max_string_length",
                    "3": "max_size",
                    "7": "max_length"
                },
                "local_78": {
                    "1": "local_string_ptrs",
                    "2": "message_buffer",
                    "3": "local_buffer",
                    "4": "buffer",
                    "5": "string_array"
                },
                "local_78[0]": {
                    "1": "buffer"
                },
                "param_1": {
                    "1": "buffer_address",
                    "3": "string_buffer",
                    "4": "string_ptr",
                    "5": "string",
                    "6": "message",
                    "9": "buffer"
                },
                "param_2": {
                    "1": "int_value_1",
                    "2": "value1",
                    "3": "length",
                    "4": "param_2"
                },
                "param_3": {
                    "1": "output_buffer",
                    "2": "int_param_2",
                    "9": "param_3"
                },
                "param_4": {
                    "1": "param_c",
                    "2": "value3",
                    "9": "param_4"
                },
                "uStack_4": {
                    "1": "arg3_ptr",
                    "2": "stack_param_3",
                    "3": "param_4_copy"
                },
                "uStack_8": {
                    "1": "stack_var2",
                    "2": "stack_param_2",
                    "3": "param_3_copy"
                },
                "uStack_c": {
                    "1": "temp_arg",
                    "2": "stack_param_1",
                    "3": "param_2_copy"
                }
            },
            "called": [
                "FUN_080050fc"
            ],
            "calling": [
                "FUN_08004cac"
            ],
            "code": "\nvoid print_message_08004ffc(undefined *buffer,undefined4 param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  undefined *string_array [2];\n  undefined4 max_length;\n  undefined2 buffer_size;\n  undefined2 short_value;\n  undefined *current_buffer;\n  undefined4 local_var_4;\n  undefined4 param_2_copy;\n  undefined4 param_3_copy;\n  undefined4 param_4_copy;\n  \n  buffer_size = 0x208;\n  max_length = 0x7fffffff;\n  local_var_4 = 0x7fffffff;\n  short_value = 0xffff;\n  buffer = buffer;\n  current_buffer = buffer;\n  param_2_copy = param_2;\n  param_3_copy = param_3;\n  param_4_copy = param_4;\n  _svfiprintf_r(DAT_200001c0,string_array,param_2);\n  *buffer = 0;\n  return;\n}\n\n",
            "current_name": "print_message_08004ffc",
            "entrypoint": "0x08004ffc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004ffc": "print_message_08004ffc",
                "local_64": "local_var_4",
                "local_68": "current_buffer",
                "local_6a": "short_value",
                "local_6c": "buffer_size",
                "local_70": "max_length",
                "local_78": "string_array",
                "local_78[0]": "buffer",
                "param_1": "buffer",
                "uStack_4": "param_4_copy",
                "uStack_8": "param_3_copy",
                "uStack_c": "param_2_copy"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005044": {
            "additional_data": {
                "FUN_08005044": {
                    "1": "improve_code",
                    "11": "resize_and_copy_data",
                    "2": "resize_and_copy_memory",
                    "3": "improve_and_copy_data"
                },
                "FUN_08005630": {
                    "1": "copy_data"
                },
                "FUN_08005646": {
                    "1": "copy_bytes",
                    "2": "copy_data"
                },
                "FUN_0800567c": {
                    "1": "malloc_or_realloc",
                    "3": "allocate_memory"
                },
                "FUN_08005714": {
                    "1": "calculate_new_length"
                },
                "FUN_080057d0": {
                    "1": "allocate_and_copy_data"
                },
                "LAB_0800508a": {
                    "1": "malloc_failed",
                    "2": "allocation_failure"
                },
                "_free_r": {
                    "11": "free_memory"
                },
                "_malloc_r": {
                    "11": "allocate_memory"
                },
                "_realloc_r": {
                    "1": "resize_memory",
                    "10": "reallocate_memory"
                },
                "iVar1": {
                    "1": "new_memory_block",
                    "10": "allocation_result",
                    "2": "result",
                    "3": "allocated_memory",
                    "4": "new_buffer"
                },
                "iVar4": {
                    "1": "buffer_used",
                    "2": "difference",
                    "20": "offset",
                    "4": "data_offset"
                },
                "malloc": {
                    "1": "allocate_memory"
                },
                "memcpy": {
                    "4": "copy_memory"
                },
                "memmove": {
                    "4": "move_memory"
                },
                "param_1": {
                    "1": "out_pointer",
                    "11": "error_code",
                    "2": "error",
                    "3": "output",
                    "5": "output_buffer"
                },
                "param_2": {
                    "1": "param_src",
                    "2": "buffer_info",
                    "3": "data_buffer",
                    "5": "input_buffer",
                    "7": "buffer"
                },
                "param_3": {
                    "1": "data_to_add",
                    "10": "source_data",
                    "11": "data",
                    "2": "data_to_copy",
                    "3": "source"
                },
                "param_4": {
                    "1": "number_of_bytes",
                    "2": "source_length",
                    "3": "data_length",
                    "6": "size",
                    "8": "length"
                },
                "realloc": {
                    "1": "reallocate_memory"
                },
                "uVar2": {
                    "1": "new_buffer_size",
                    "10": "new_length",
                    "2": "new_data_length",
                    "3": "expanded_size",
                    "7": "new_size"
                },
                "uVar3": {
                    "1": "remaining_space",
                    "2": "current_buffer_size",
                    "3": "buffer_size",
                    "4": "current_size"
                },
                "uVar5": {
                    "1": "desired_buffer_size"
                }
            },
            "called": [
                "FUN_08005646",
                "FUN_08005630",
                "FUN_08005714",
                "FUN_0800567c",
                "FUN_080057d0"
            ],
            "calling": [
                "FUN_080050fc"
            ],
            "code": "\nundefined4 resize_and_copy_data_08005044(undefined4 *error_code,int *buffer,undefined4 data,uint length)\n\n{\n  int allocation_result;\n  uint new_length;\n  uint buffer_length;\n  int offset;\n  \n  buffer_length = buffer[2];\n  if ((buffer_length <= length) && ((*(ushort *)(buffer + 3) & 0x480) != 0)) {\n    offset = *buffer - buffer[4];\n    buffer_length = (uint)(buffer[5] * 3) / 2;\n    new_length = length + 1 + offset;\n    if (buffer_length < new_length) {\n      buffer_length = new_length;\n    }\n    if ((int)((uint)*(ushort *)(buffer + 3) << 0x15) < 0) {\n      allocation_result = allocate_memory(error_code,buffer_length);\n      if (allocation_result == 0) {\nallocation_failure:\n        *error_code = 0xc;\n        *(ushort *)(buffer + 3) = *(ushort *)(buffer + 3) | 0x40;\n        return 0xffffffff;\n      }\n      copy_memory(allocation_result,buffer[4],offset);\n      *(ushort *)(buffer + 3) = *(ushort *)(buffer + 3) & 0xfb7f | 0x80;\n    }\n    else {\n      allocation_result = reallocate_memory(error_code,buffer[4],buffer_length);\n      if (allocation_result == 0) {\n        free_memory(error_code,buffer[4]);\n        goto allocation_failure;\n      }\n    }\n    buffer[4] = allocation_result;\n    *buffer = allocation_result + offset;\n    buffer[5] = buffer_length;\n    buffer[2] = buffer_length - offset;\n    buffer_length = length;\n  }\n  if (length <= buffer_length) {\n    buffer_length = length;\n  }\n  move_memory(*buffer,data,buffer_length);\n  buffer[2] = buffer[2] - buffer_length;\n  *buffer = buffer_length + *buffer;\n  return 0;\n}\n\n",
            "current_name": "resize_and_copy_data_08005044",
            "entrypoint": "0x08005044",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005044": "resize_and_copy_data_08005044",
                "LAB_0800508a": "allocation_failure",
                "_free_r": "free_memory",
                "_malloc_r": "allocate_memory",
                "_realloc_r": "reallocate_memory",
                "iVar1": "allocation_result",
                "iVar4": "offset",
                "malloc": "allocate_memory",
                "memcpy": "copy_memory",
                "memmove": "move_memory",
                "param_1": "error_code",
                "param_2": "buffer",
                "param_3": "data",
                "param_4": "length",
                "realloc": "reallocate_memory",
                "uVar2": "new_length",
                "uVar3": "buffer_length"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080050fc": {
            "additional_data": {
                "*local_8c": {
                    "1": "ptr_arg_count"
                },
                "*param_1": {
                    "1": "mem_manager"
                },
                "*param_2": {
                    "1": "buffer"
                },
                "*param_3": {
                    "2": "format_string"
                },
                "*param_4": {
                    "1": "flags"
                },
                "*pbVar5": {
                    "1": "current_char"
                },
                "*pbVar6": {
                    "1": "next_char"
                },
                "*piVar3": {
                    "1": "ptr_iterator"
                },
                "DAT_08007379": {
                    "1": "valid_conversion_specifiers"
                },
                "DAT_0800737f": {
                    "1": "length_modifier_chars"
                },
                "FUN_08005044": {
                    "1": "process_argument"
                },
                "FUN_080050fc": {
                    "1": "parse_printf_format",
                    "11": "parse_format_string",
                    "2": "format_and_print",
                    "3": "process_format_string"
                },
                "FUN_080053d4": {
                    "1": "get_print_function"
                },
                "FUN_08005614": {
                    "1": "get_next_char"
                },
                "FUN_08005714": {
                    "1": "convert_flags"
                },
                "__printf_i": {
                    "1": "safe_printf_i"
                },
                "__ssputs_r": {
                    "1": "custom_puts"
                },
                "_malloc_r": {
                    "1": "custom_malloc",
                    "2": "safe_malloc",
                    "3": "allocate_memory"
                },
                "_printf_i": {
                    "1": "process_int_format",
                    "3": "print_integer"
                },
                "_ssputs_r": {
                    "1": "safe_string_put"
                },
                "bVar4": {
                    "1": "valid_num",
                    "2": "is_valid_number",
                    "3": "has_digits",
                    "7": "is_number",
                    "8": "is_digit"
                },
                "iVar1": {
                    "1": "bytes_written",
                    "2": "temp_var1",
                    "3": "status",
                    "4": "index",
                    "9": "result"
                },
                "iVar2": {
                    "1": "var2",
                    "2": "temp_var2",
                    "3": "return_value",
                    "8": "ssputs_result",
                    "9": "result"
                },
                "local_30": {
                    "1": "pointer_args",
                    "2": "zero_flag",
                    "4": "length_modifier"
                },
                "local_45": {
                    "1": "space_or_plus_flag",
                    "3": "flag_hash",
                    "4": "plus_flag"
                },
                "local_6e": {
                    "1": "zero_pad",
                    "2": "local_6e",
                    "4": "flag_plus",
                    "5": "plus_flag"
                },
                "local_6f": {
                    "1": "twenty_flag",
                    "2": "space",
                    "4": "flag_space",
                    "6": "space_flag"
                },
                "local_70": {
                    "1": "current_specifier",
                    "10": "conversion_specifier",
                    "2": "conversion_char"
                },
                "local_74": {
                    "1": "total_characters",
                    "2": "total_size",
                    "3": "total_chars_printed",
                    "9": "total_length"
                },
                "local_7c": {
                    "1": "isdigit_value",
                    "11": "width",
                    "2": "precision",
                    "3": "arg_width"
                },
                "local_80": {
                    "1": "bool_flag",
                    "2": "size",
                    "4": "precision",
                    "7": "width"
                },
                "local_84": {
                    "1": "int_var",
                    "19": "precision",
                    "3": "field_width",
                    "6": "width"
                },
                "local_88": {
                    "1": "bit_mask",
                    "16": "flags",
                    "2": "format_flags",
                    "3": "modifiers"
                },
                "local_8c": {
                    "1": "pi_var4",
                    "2": "args",
                    "3": "arg_ptr"
                },
                "memchr": {
                    "1": "search_byte"
                },
                "param_1": {
                    "1": "errnum",
                    "2": "param_pointer",
                    "3": "param",
                    "6": "param_ptr"
                },
                "param_2": {
                    "1": "format_ptr",
                    "2": "format_flags",
                    "3": "format_specifier",
                    "4": "format_string"
                },
                "param_3": {
                    "1": "string_ptr",
                    "13": "format_string",
                    "5": "format"
                },
                "param_4": {
                    "1": "info",
                    "2": "args",
                    "3": "flags"
                },
                "pbVar5": {
                    "1": "pointer_var5",
                    "13": "current_char",
                    "2": "current_byte",
                    "3": "str_ptr"
                },
                "pbVar6": {
                    "1": "string_ptr",
                    "2": "current_byte",
                    "9": "next_char"
                },
                "piVar3": {
                    "1": "counter_ptr",
                    "2": "pi_var3",
                    "5": "ptr"
                },
                "unaff_r9": {
                    "1": "unaffected_register_9",
                    "2": "result",
                    "5": "unaff_r9",
                    "6": "printf_result"
                }
            },
            "called": [
                "FUN_08005614",
                "FUN_08005714",
                "FUN_08005044",
                "FUN_080053d4"
            ],
            "calling": [
                "FUN_08004ffc"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08005294) */\n\nint parse_format_string_080050fc(undefined4 *param_ptr,int *format_string,byte *format_string,int *flags)\n\n{\n  int result;\n  int result;\n  int *ptr;\n  bool is_digit;\n  byte *current_char;\n  byte *next_char;\n  int printf_result;\n  int *arg_ptr;\n  uint flags;\n  int precision;\n  undefined4 width;\n  int width;\n  int total_length;\n  byte conversion_specifier;\n  undefined space_flag;\n  undefined plus_flag;\n  undefined plus_flag;\n  undefined4 length_modifier;\n  \n  arg_ptr = flags;\n  if (((int)((uint)*(ushort *)(format_string + 3) << 0x18) < 0) && (format_string[4] == 0)) {\n    result = allocate_memory(param_ptr,0x40);\n    *format_string = result;\n    format_string[4] = result;\n    if (result == 0) {\n      *param_ptr = 0xc;\n      return -1;\n    }\n    format_string[5] = 0x40;\n  }\n  total_length = 0;\n  space_flag = 0x20;\n  plus_flag = 0x30;\n  current_char = format_string;\nLAB_08005146:\n  next_char = current_char;\n  if (*next_char != 0) goto LAB_080051ca;\n  goto LAB_08005150;\nLAB_080051ca:\n  current_char = next_char + 1;\n  if (*next_char != 0x25) goto LAB_08005146;\nLAB_08005150:\n  result = (int)next_char - (int)format_string;\n  if (result != 0) {\n    result = custom_puts(param_ptr,format_string,format_string,result);\n    if (result == -1) {\nLAB_080052ac:\n      if ((int)((uint)*(ushort *)(format_string + 3) << 0x19) < 0) {\n        return -1;\n      }\n      return total_length;\n    }\n    total_length = total_length + result;\n  }\n  if (*next_char == 0) goto LAB_080052ac;\n  flags = 0;\n  width = 0;\n  precision = -1;\n  width = 0;\n  plus_flag = 0;\n  length_modifier = 0;\n  current_char = next_char + 1;\n  while( true ) {\n    result = find_char(&DAT_08007379,*current_char);\n    format_string = current_char + 1;\n    if (result == 0) break;\n    flags = 1 << (result + 0xf7ff8c87U & 0xff) | flags;\n    current_char = format_string;\n  }\n  if ((int)(flags << 0x1b) < 0) {\n    plus_flag = 0x20;\n  }\n  if ((int)(flags << 0x1c) < 0) {\n    plus_flag = 0x2b;\n  }\n  if (*current_char == 0x2a) {\n    ptr = arg_ptr + 1;\n    result = *arg_ptr;\n    arg_ptr = ptr;\n    if (result < 0) {\n      width = -result;\n      flags = flags | 2;\n      goto LAB_080051fc;\n    }\n  }\n  else {\n    is_digit = false;\n    result = width;\n    format_string = current_char;\n    while( true ) {\n      if (9 < *format_string - 0x30) break;\n      result = result * 10 + (*format_string - 0x30);\n      is_digit = true;\n      format_string = format_string + 1;\n    }\n    if (!is_digit) goto LAB_080051fc;\n  }\n  width = result;\nLAB_080051fc:\n  if (*format_string == 0x2e) {\n    if (format_string[1] == 0x2a) {\n      format_string = format_string + 2;\n      ptr = arg_ptr + 1;\n      precision = *arg_ptr;\n      arg_ptr = ptr;\n      if (precision < 0) {\n        precision = -1;\n      }\n    }\n    else {\n      is_digit = false;\n      result = 0;\n      precision = 0;\n      while( true ) {\n        format_string = format_string + 1;\n        if (9 < *format_string - 0x30) break;\n        result = result * 10 + (*format_string - 0x30);\n        is_digit = true;\n      }\n      if (is_digit) {\n        precision = result;\n      }\n    }\n  }\n  result = find_char(&DAT_0800737f,*format_string,3);\n  if (result != 0) {\n    format_string = format_string + 1;\n    flags = flags | 0x40 << (result + 0xf7ff8c81U & 0xff);\n  }\n  conversion_specifier = *format_string;\n  format_string = format_string + 1;\n  result = find_char(\"efgEFG\",conversion_specifier,6);\n  if (result == 0) {\n    printf_result = print_integer(param_ptr,&flags,format_string,0x8005045,&arg_ptr);\n    if (printf_result == -1) goto LAB_080052ac;\n  }\n  else {\n    arg_ptr = (int *)(((int)arg_ptr + 7U & 0xfffffff8) + 8);\n  }\n  total_length = total_length + printf_result;\n  current_char = format_string;\n  goto LAB_08005146;\n}\n\n",
            "current_name": "parse_format_string_080050fc",
            "entrypoint": "0x080050fc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080050fc": "parse_format_string_080050fc",
                "__ssputs_r": "custom_puts",
                "_malloc_r": "allocate_memory",
                "_printf_i": "print_integer",
                "_ssputs_r": "safe_string_put",
                "bVar4": "is_digit",
                "iVar1": "result",
                "iVar2": "result",
                "local_30": "length_modifier",
                "local_45": "plus_flag",
                "local_6e": "plus_flag",
                "local_6f": "space_flag",
                "local_70": "conversion_specifier",
                "local_74": "total_length",
                "local_7c": "width",
                "local_80": "width",
                "local_84": "precision",
                "local_88": "flags",
                "local_8c": "arg_ptr",
                "memchr": "find_char",
                "param_1": "param_ptr",
                "param_2": "format_string",
                "param_3": "format_string",
                "param_4": "flags",
                "pbVar5": "current_char",
                "pbVar6": "next_char",
                "piVar3": "ptr",
                "unaff_r9": "printf_result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080052e4": {
            "additional_data": {
                "0xffffffff": {
                    "1": "error"
                },
                "FUN_080052e4": {
                    "1": "decode_and_process_data",
                    "22": "process_data",
                    "3": "parse_data"
                },
                "bVar5": {
                    "1": "is_true",
                    "2": "is_condition_met",
                    "3": "check_flag",
                    "4": "condition",
                    "5": "flag",
                    "6": "is_condition_true"
                },
                "byte": {
                    "1": "flag"
                },
                "byte_43": {
                    "1": "flag_byte"
                },
                "byte_44": {
                    "1": "byte_value"
                },
                "byte_45": {
                    "1": "other_byte"
                },
                "get_data_length+0x19": {
                    "1": "start_address"
                },
                "get_data_length+0x1a": {
                    "1": "data_offset"
                },
                "iVar1": {
                    "1": "iterator1",
                    "15": "index",
                    "2": "index1",
                    "3": "i"
                },
                "iVar2": {
                    "1": "loop_counter_2",
                    "19": "result",
                    "2": "callback_result"
                },
                "param_1": {
                    "1": "input1",
                    "10": "input",
                    "2": "input_data",
                    "4": "input_param",
                    "6": "data"
                },
                "param_2": {
                    "1": "flags",
                    "11": "data_array",
                    "2": "info",
                    "3": "array",
                    "5": "data"
                },
                "param_3": {
                    "1": "output_1",
                    "2": "max_value",
                    "4": "output_length",
                    "8": "output"
                },
                "param_4": {
                    "1": "additional_info",
                    "2": "param_value",
                    "3": "param_4",
                    "5": "param4",
                    "9": "param"
                },
                "param_5": {
                    "1": "callback_fn",
                    "17": "callback",
                    "2": "processor_func",
                    "4": "callback_function",
                    "5": "callback_func"
                },
                "uVar3": {
                    "1": "max_output_len",
                    "10": "max_value",
                    "4": "max_length",
                    "8": "max_size"
                },
                "uVar4": {
                    "1": "start",
                    "2": "counter",
                    "3": "count",
                    "7": "offset"
                }
            },
            "called": [],
            "calling": [
                "FUN_080053d4"
            ],
            "code": "\nundefined4\nprocess_data_080052e4(undefined4 input,uint *data_array,uint *output_size,undefined4 param,code *callback)\n\n{\n  int index;\n  int result;\n  uint max_value;\n  uint offset;\n  bool is_condition_true;\n  \n  max_value = data_array[4];\n  if ((int)data_array[4] < (int)data_array[2]) {\n    max_value = data_array[2];\n  }\n  *output_size = max_value;\n  if (*(char *)((int)data_array + 0x43) != '\\0') {\n    *output_size = max_value + 1;\n  }\n  if ((int)(*data_array << 0x1a) < 0) {\n    *output_size = *output_size + 2;\n  }\n  if ((*data_array & 6) == 0) {\n    for (index = 0; index < (int)(data_array[3] - *output_size); index = index + 1) {\n      result = (*callback)(input,param,(int)data_array + 0x19,1);\n      if (result == -1) {\n        return 0xffffffff;\n      }\n    }\n  }\n  max_value = (uint)*(flag *)((int)data_array + 0x43);\n  if (max_value != 0) {\n    max_value = 1;\n  }\n  offset = max_value;\n  if ((int)(*data_array << 0x1a) < 0) {\n    *(undefined *)((int)data_array + max_value + 0x43) = 0x30;\n    offset = max_value + 2;\n    *(undefined *)((int)data_array + max_value + 0x44) = *(undefined *)((int)data_array + 0x45);\n  }\n  index = (*callback)(input,param,(int)data_array + 0x43,offset);\n  if (index != -1) {\n    max_value = data_array[3];\n    is_condition_true = (*data_array & 6) != 4;\n    if (is_condition_true) {\n      max_value = 0;\n    }\n    offset = 0;\n    if (!is_condition_true) {\n      max_value = max_value - *output_size;\n    }\n    if (!is_condition_true) {\n      max_value = max_value & ~((int)max_value >> 0x1f);\n    }\n    if ((int)data_array[4] < (int)data_array[2]) {\n      max_value = max_value + (data_array[2] - data_array[4]);\n    }\n    while( true ) {\n      if (max_value == offset) {\n        return 0;\n      }\n      index = (*callback)(input,param,(int)data_array + 0x1a,1);\n      if (index == -1) break;\n      offset = offset + 1;\n    }\n  }\n  return 0xffffffff;\n}\n\n",
            "current_name": "process_data_080052e4",
            "entrypoint": "0x080052e4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080052e4": "process_data_080052e4",
                "bVar5": "is_condition_true",
                "byte": "flag",
                "iVar1": "index",
                "iVar2": "result",
                "param_1": "input",
                "param_2": "data_array",
                "param_3": "output_size",
                "param_4": "param",
                "param_5": "callback",
                "uVar3": "max_value",
                "uVar4": "offset"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080053d4": {
            "additional_data": {
                "BYTE_08005410": {
                    "1": "letter_c"
                },
                "BYTE_08005411": {
                    "1": "letter_s"
                },
                "BYTE_08005414": {
                    "1": "letter_x"
                },
                "BYTE_08005417": {
                    "1": "letter_u"
                },
                "BYTE_0800541a": {
                    "1": "letter_p"
                },
                "BYTE_0800541d": {
                    "1": "letter_o"
                },
                "BYTE_08005420": {
                    "1": "letter_n"
                },
                "BYTE_08005452": {
                    "1": "letter_u"
                },
                "BYTE_08005455": {
                    "1": "letter_p"
                },
                "BYTE_08005458": {
                    "1": "letter_x"
                },
                "BYTE_0800558c": {
                    "1": "minus_sign"
                },
                "FUN_080053d4": {
                    "1": "print_and_return",
                    "13": "print_formatted_output",
                    "2": "format_and_print",
                    "3": "print_formatted_data",
                    "6": "print_formatted_string"
                },
                "LAB_08005404": {
                    "1": "store_char"
                },
                "LAB_08005424": {
                    "1": "convert_decimal"
                },
                "LAB_0800544a": {
                    "1": "store_hex_prefix"
                },
                "LAB_08005464": {
                    "1": "copy_char"
                },
                "LAB_0800548a": {
                    "1": "copy_string"
                },
                "LAB_08005498": {
                    "1": "convert_decimal_digits"
                },
                "LAB_080054b4": {
                    "1": "convert_digits"
                },
                "LAB_080054fa": {
                    "1": "finalize_string"
                },
                "LAB_0800551e": {
                    "1": "process_hex_digits"
                },
                "LAB_08005552": {
                    "1": "convert_non_zero_digits"
                },
                "LAB_0800557a": {
                    "1": "store_value"
                },
                "LAB_0800558e": {
                    "1": "skip_formatting"
                },
                "LAB_08005600": {
                    "1": "store_zero_value"
                },
                "PTR_FUN_080052e4": {
                    "1": "format_arg"
                },
                "PTR_FUN_08005614": {
                    "1": "memchr"
                },
                "_printf_common": {
                    "1": "print_common_output"
                },
                "bVar1": {
                    "1": "output_specifier_type",
                    "11": "byte_value",
                    "2": "format_char",
                    "3": "first_byte",
                    "6": "byte_val"
                },
                "iVar2": {
                    "1": "num1",
                    "11": "index",
                    "2": "loop_index",
                    "7": "result"
                },
                "iVar4": {
                    "1": "inner_loop_var",
                    "2": "write_result",
                    "3": "inner_result",
                    "8": "result"
                },
                "local_24": {
                    "1": "sizes",
                    "2": "local_vars",
                    "3": "local_array"
                },
                "local_24[2]": {
                    "1": "local_vars[2]"
                },
                "memchr": {
                    "1": "find_null_character"
                },
                "param_1": {
                    "1": "format_str",
                    "2": "format",
                    "21": "format_string"
                },
                "param_2": {
                    "1": "arglist",
                    "2": "arg_list",
                    "3": "arguments",
                    "6": "format_args",
                    "7": "args"
                },
                "param_3": {
                    "1": "arg_size",
                    "3": "num_args",
                    "5": "width"
                },
                "param_4": {
                    "1": "width_padding_function",
                    "3": "output_func",
                    "5": "print_function",
                    "8": "output_function"
                },
                "param_5": {
                    "1": "arg_pointer_pointer",
                    "2": "arg_ptr_ptr"
                },
                "pcVar11": {
                    "1": "result",
                    "2": "output_str",
                    "4": "current_char"
                },
                "pcVar12": {
                    "1": "format_buffer",
                    "2": "output_buffer",
                    "4": "format_char"
                },
                "pcVar5": {
                    "1": "hexadecimal_chars",
                    "2": "char_ptr",
                    "3": "hex_digits",
                    "4": "digits",
                    "8": "hex_chars"
                },
                "ppcVar8": {
                    "1": "ptr_to_char_ptr_1",
                    "2": "str_ptr_ptr"
                },
                "ppuVar7": {
                    "1": "arg_pointer_pointer",
                    "3": "ptr_ptr"
                },
                "puVar3": {
                    "1": "pointer_value",
                    "2": "temp_pointer",
                    "7": "ptr"
                },
                "uVar10": {
                    "1": "arg_size",
                    "2": "length",
                    "3": "value"
                },
                "uVar6": {
                    "1": "unsigned_value",
                    "24": "base"
                },
                "uVar9": {
                    "1": "uint_var_2",
                    "2": "num",
                    "3": "converted_value",
                    "8": "value"
                }
            },
            "called": [
                "FUN_080052e4",
                "FUN_08005614"
            ],
            "calling": [
                "FUN_080050fc"
            ],
            "code": "\nuint print_formatted_output_080053d4(undefined4 format_string,uint *args,undefined4 width,code *output_function,uint **argptr)\n\n{\n  byte byte_value;\n  int index;\n  uint *ptr;\n  int result;\n  char *hex_chars;\n  uint base;\n  uint **ptr_ptr;\n  char **str_ptr_ptr;\n  uint value;\n  uint value;\n  char *current_char;\n  char *format_char;\n  uint local_array [2];\n  \n  byte_value = *(byte *)(args + 6);\n  format_char = (char *)((int)args + 0x43);\n  if (byte_value != 0x6e) {\n    if (byte_value < 0x6f) {\n      if (byte_value != 99) {\n        if (byte_value < 100) {\n          if (byte_value == 0) goto skip_formatting;\n          if (byte_value != 0x58) goto store_char;\n          *(undefined *)((int)args + 0x45) = 0x58;\n          hex_chars = \"0123456789ABCDEF\";\nprocess_hex_digits:\n          base = *args;\n          ptr = *argptr;\n          *argptr = ptr + 1;\n          if (((base & 0x80) == 0) && ((int)(base << 0x19) < 0)) {\n            value = (uint)*(ushort *)ptr;\n          }\n          else {\n            value = *ptr;\n          }\n          if ((int)(base << 0x1f) < 0) {\n            *args = base | 0x20;\n          }\n          if (value == 0) {\n            *args = *args & 0xffffffdf;\n          }\n          base = 0x10;\nconvert_digits:\n          *(undefined *)((int)args + 0x43) = 0;\n        }\n        else {\n          if ((byte_value != 100) && (byte_value != 0x69)) goto store_char;\n          value = *args;\n          ptr = *argptr;\n          if ((value & 0x80) == 0) {\n            *argptr = ptr + 1;\n            if ((value & 0x40) == 0) goto convert_decimal;\n            value = (uint)(short)*(ushort *)ptr;\n          }\n          else {\n            *argptr = ptr + 1;\nconvert_decimal:\n            value = *ptr;\n          }\n          if ((int)value < 0) {\n            value = -value;\n            *(undefined *)((int)args + 0x43) = 0x2d;\n          }\n          hex_chars = \"0123456789ABCDEF\";\n          base = 10;\n        }\n        value = args[1];\n        args[2] = value;\n        current_char = format_char;\n        if ((int)value < 0) {\n          if (value != 0) goto convert_non_zero_digits;\nstore_zero_value:\n          *(char *)((int)args + 0x42) = *hex_chars;\n          current_char = (char *)((int)args + 0x42);\n        }\n        else {\n          *args = *args & 0xfffffffb;\n          if (value == 0) {\n            if (value != 0) goto store_zero_value;\n          }\n          else {\nconvert_non_zero_digits:\n            do {\n              value = value / base;\n              current_char = current_char + -1;\n              *current_char = hex_chars[value - base * value];\n              value = value;\n            } while (value != 0);\n          }\n        }\n        if (((base == 8) && ((int)(*args << 0x1f) < 0)) && ((int)args[1] <= (int)args[4]))\n        {\n          current_char[-1] = '0';\n          current_char = current_char + -1;\n        }\n        args[4] = (int)format_char - (int)current_char;\n        format_char = current_char;\n        goto finalize_string;\n      }\n      ptr = *argptr;\n      *argptr = ptr + 1;\n      *(char *)((int)args + 0x42) = (char)*ptr;\ncopy_char:\n      format_char = (char *)((int)args + 0x42);\n      value = 1;\n    }\n    else {\n      if (byte_value != 0x73) {\n        if (byte_value < 0x74) {\n          if (byte_value == 0x6f) {\ncopy_string:\n            value = *args;\n            ptr = *argptr;\n            if ((value & 0x80) == 0) {\n              *argptr = ptr + 1;\n              if ((value & 0x40) == 0) goto convert_decimal_digits;\n              value = (uint)*(ushort *)ptr;\n            }\n            else {\n              *argptr = ptr + 1;\nconvert_decimal_digits:\n              value = *ptr;\n            }\n            if (byte_value == 0x6f) {\n              base = 8;\n            }\n            else {\n              base = 10;\n            }\n            hex_chars = \"0123456789ABCDEF\";\n            goto convert_digits;\n          }\n          if (byte_value == 0x70) {\n            *args = *args | 0x20;\nstore_hex_prefix:\n            hex_chars = \"0123456789abcdef\";\n            *(undefined *)((int)args + 0x45) = 0x78;\n            goto process_hex_digits;\n          }\n        }\n        else {\n          if (byte_value == 0x75) goto copy_string;\n          if (byte_value == 0x78) goto store_hex_prefix;\n        }\nstore_char:\n        *(byte *)((int)args + 0x42) = byte_value;\n        goto copy_char;\n      }\n      str_ptr_ptr = (char **)*argptr;\n      *argptr = (uint *)(str_ptr_ptr + 1);\n      format_char = *str_ptr_ptr;\n      index = find_null_byte(format_char,0,args[1]);\n      if (index != 0) {\n        args[1] = index - (int)format_char;\n      }\n      value = args[1];\n    }\n    args[4] = value;\n    *(undefined *)((int)args + 0x43) = 0;\n    goto finalize_string;\n  }\n  value = *args;\n  ptr_ptr = (uint **)*argptr;\n  base = args[5];\n  if ((value & 0x80) == 0) {\n    *argptr = (uint *)(ptr_ptr + 1);\n    ptr = *ptr_ptr;\n    if ((value & 0x40) == 0) goto store_value;\n    *(short *)ptr = (short)base;\n  }\n  else {\n    *argptr = (uint *)(ptr_ptr + 1);\n    ptr = *ptr_ptr;\nstore_value:\n    *ptr = base;\n  }\nskip_formatting:\n  args[4] = 0;\nfinalize_string:\n  index = print_common_output(format_string,args,local_array,width,output_function);\n  if ((index == -1) || (index = (*output_function)(format_string,width,format_char,args[4]), index == -1)) {\nLAB_0800550e:\n    value = 0xffffffff;\n  }\n  else {\n    if ((int)(*args << 0x1e) < 0) {\n      for (index = 0; index < (int)(args[3] - local_array[0]); index = index + 1) {\n        result = (*output_function)(format_string,width,(int)args + 0x19,1);\n        if (result == -1) goto LAB_0800550e;\n      }\n    }\n    value = args[3];\n    if ((int)args[3] < (int)local_array[0]) {\n      value = local_array[0];\n    }\n  }\n  return value;\n}\n\n",
            "current_name": "print_formatted_output_080053d4",
            "entrypoint": "0x080053d4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080053d4": "print_formatted_output_080053d4",
                "LAB_08005404": "store_char",
                "LAB_08005424": "convert_decimal",
                "LAB_0800544a": "store_hex_prefix",
                "LAB_08005464": "copy_char",
                "LAB_0800548a": "copy_string",
                "LAB_08005498": "convert_decimal_digits",
                "LAB_080054b4": "convert_digits",
                "LAB_080054fa": "finalize_string",
                "LAB_0800551e": "process_hex_digits",
                "LAB_08005552": "convert_non_zero_digits",
                "LAB_0800557a": "store_value",
                "LAB_0800558e": "skip_formatting",
                "LAB_08005600": "store_zero_value",
                "_printf_common": "print_common_output",
                "bVar1": "byte_value",
                "iVar2": "index",
                "iVar4": "result",
                "local_24": "local_array",
                "memchr": "find_null_byte",
                "param_1": "format_string",
                "param_2": "args",
                "param_3": "width",
                "param_4": "output_function",
                "param_5": "argptr",
                "pcVar11": "current_char",
                "pcVar12": "format_char",
                "pcVar5": "hex_chars",
                "ppcVar8": "str_ptr_ptr",
                "ppuVar7": "ptr_ptr",
                "puVar3": "ptr",
                "uVar10": "value",
                "uVar6": "base",
                "uVar9": "value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005614": {
            "additional_data": {
                "FUN_08005614": {
                    "1": "find_character_position",
                    "19": "find_character",
                    "3": "find_char_in_string",
                    "4": "find_first_occurrence"
                },
                "param_1": {
                    "28": "string",
                    "3": "str"
                },
                "param_2": {
                    "2": "target",
                    "24": "character",
                    "3": "target_char"
                },
                "param_3": {
                    "1": "str_length",
                    "26": "length",
                    "4": "string_length"
                },
                "pcVar1": {
                    "1": "current_pointer",
                    "11": "current_char",
                    "2": "current_char_ptr",
                    "5": "current"
                },
                "pcVar2": {
                    "1": "ptr_previous_char",
                    "10": "next_char",
                    "2": "found_char_ptr",
                    "4": "next_character"
                }
            },
            "called": [],
            "calling": [
                "FUN_080050fc",
                "FUN_080053d4"
            ],
            "code": "\nchar * find_character_08005614(char *string,char character,int length)\n\n{\n  char *current_char;\n  char *next_char;\n  \n  current_char = string;\n  do {\n    next_char = current_char;\n    if (next_char == string + length) {\n      return (char *)0x0;\n    }\n    current_char = next_char + 1;\n  } while (*next_char != character);\n  return next_char;\n}\n\n",
            "current_name": "find_character_08005614",
            "entrypoint": "0x08005614",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005614": "find_character_08005614",
                "param_1": "string",
                "param_2": "character",
                "param_3": "length",
                "pcVar1": "current_char",
                "pcVar2": "next_char"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005630": {
            "additional_data": {
                "FUN_08005630": {
                    "1": "copy_data_to_pointer",
                    "17": "copy_data",
                    "2": "copy_and_shift",
                    "3": "copy_array"
                },
                "param_1": {
                    "1": "array_index",
                    "2": "dest_addr"
                },
                "param_2": {
                    "1": "src",
                    "2": "src_buffer",
                    "3": "source_array",
                    "5": "source_data",
                    "6": "source",
                    "7": "src_data"
                },
                "param_2 + param_3": {
                    "1": "source_end"
                },
                "param_3": {
                    "1": "src_size",
                    "2": "array_size",
                    "4": "num_bytes",
                    "5": "length",
                    "6": "size"
                },
                "puVar1": {
                    "1": "src_end_address",
                    "2": "end_addr",
                    "3": "end_address",
                    "4": "dest_end",
                    "5": "src_end"
                },
                "puVar2": {
                    "1": "buffer_end_index",
                    "2": "dst_end",
                    "3": "dest_ptr",
                    "4": "dest_end"
                }
            },
            "called": [],
            "calling": [
                "FUN_08005044",
                "FUN_080057d0"
            ],
            "code": "\nvoid copy_data_08005630(int dest_addr,undefined *src_data,int size)\n\n{\n  undefined *src_end;\n  undefined *dest_end;\n  \n  dest_end = (undefined *)(dest_addr + -1);\n  src_end = src_data + size;\n  for (; src_data != src_end; src_data = src_data + 1) {\n    dest_end = dest_end + 1;\n    *dest_end = *src_data;\n  }\n  return;\n}\n\n",
            "current_name": "copy_data_08005630",
            "entrypoint": "0x08005630",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005630": "copy_data_08005630",
                "param_1": "dest_addr",
                "param_2": "src_data",
                "param_3": "size",
                "puVar1": "src_end",
                "puVar2": "dest_end"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005646": {
            "additional_data": {
                "FUN_08005646": {
                    "1": "copy_memory_range",
                    "12": "copy_and_reverse",
                    "2": "reverse_copy",
                    "5": "copy_memory",
                    "7": "copy_and_shift"
                },
                "int param_3 - (int)puVar1": {
                    "1": "new_length"
                },
                "param_1": {
                    "1": "dst",
                    "23": "dest",
                    "3": "source",
                    "4": "destination"
                },
                "param_1 + -1": {
                    "1": "dest_minus_one"
                },
                "param_1 + param_3": {
                    "1": "destination_end",
                    "4": "dest_end"
                },
                "param_2": {
                    "24": "src",
                    "3": "destination",
                    "4": "source"
                },
                "param_2 + param_3": {
                    "1": "src_end"
                },
                "param_3": {
                    "1": "n",
                    "16": "length",
                    "2": "num_bytes",
                    "3": "count",
                    "9": "size"
                },
                "param_3 - (int)puVar1": {
                    "1": "remaining_size"
                },
                "puVar1": {
                    "1": "dest_ptr",
                    "10": "src_end",
                    "2": "dest_end",
                    "6": "end_ptr",
                    "7": "end"
                },
                "puVar1 + -1": {
                    "1": "end_minus_one"
                },
                "puVar1 + param_3 != (undefined *)0x0": {
                    "1": "shift_not_zero"
                }
            },
            "called": [],
            "calling": [
                "FUN_08005044"
            ],
            "code": "\nvoid copy_and_reverse_08005646(undefined *dest,undefined *src,int length)\n\n{\n  undefined *src_end;\n  \n  src_end = src + length;\n  if ((src < dest) && (dest < src_end)) {\n    dest = dest + length;\n    length = length - (int)src_end;\n    while (src_end + length != (undefined *)0x0) {\n      src_end = src_end + -1;\n      dest = dest + -1;\n      *dest = *src_end;\n    }\n    return;\n  }\n  dest = dest + -1;\n  for (; src != src_end; src = src + 1) {\n    dest = dest + 1;\n    *dest = *src;\n  }\n  return;\n}\n\n",
            "current_name": "copy_and_reverse_08005646",
            "entrypoint": "0x08005646",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005646": "copy_and_reverse_08005646",
                "param_1": "dest",
                "param_2": "src",
                "param_3": "length",
                "puVar1": "src_end"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800567c": {
            "additional_data": {
                "DAT_200002ac": {
                    "1": "memory_pool",
                    "2": "head"
                },
                "FUNC_0800583c": {
                    "2": "function_a"
                },
                "FUNC_0800583e": {
                    "2": "function_b"
                },
                "FUN_0800567c": {
                    "1": "allocate_and_add_to_list",
                    "15": "allocate_memory",
                    "2": "update_data_structure"
                },
                "__malloc_lock": {
                    "1": "lock_memory_allocation",
                    "2": "acquire_lock"
                },
                "__malloc_unlock": {
                    "1": "unlock_memory_allocation",
                    "2": "release_lock"
                },
                "extraout_r1": {
                    "1": "next_node_ptr",
                    "2": "temp_ptr",
                    "4": "extra_output"
                },
                "param_1": {
                    "1": "output_buffer",
                    "10": "result",
                    "3": "result_pointer",
                    "5": "error_code"
                },
                "param_2": {
                    "1": "input_param",
                    "27": "size"
                },
                "param_3": {
                    "1": "arg_3",
                    "3": "param1",
                    "4": "arg3",
                    "6": "param_3",
                    "9": "param3"
                },
                "param_4": {
                    "1": "value2",
                    "3": "arg2",
                    "4": "arg4",
                    "6": "param_4",
                    "9": "param4"
                },
                "piVar3": {
                    "1": "current_block_size",
                    "2": "temp_pointer",
                    "3": "temp",
                    "4": "temp_var"
                },
                "ppiVar1": {
                    "1": "first_temp_pointer",
                    "2": "temp_var2",
                    "3": "current_block",
                    "4": "temp_ptr1"
                },
                "ppiVar2": {
                    "1": "block2",
                    "2": "temp_var2",
                    "3": "next_ptr",
                    "4": "temp_ptr2"
                },
                "ppiVar4": {
                    "1": "block3",
                    "2": "temp4",
                    "3": "prev_ptr"
                },
                "ppiVar5": {
                    "1": "temp_var6",
                    "2": "temp_var5",
                    "3": "temp_ptr4",
                    "4": "new_ptr",
                    "5": "new_block"
                }
            },
            "called": [
                "FUN_0800583c",
                "FUN_0800583e"
            ],
            "calling": [
                "FUN_08005044",
                "FUN_080057d0"
            ],
            "code": "\nvoid allocate_memory_0800567c(undefined4 *result,int size,undefined4 param3,undefined4 param4)\n\n{\n  int **extra_output;\n  int **temp_ptr1;\n  int **temp_ptr2;\n  int *temp_var;\n  int **temp_ptr3;\n  int **new_block;\n  \n  if (size == 0) {\n    return;\n  }\n  new_block = (int **)(size + -4);\n  if (*(int *)(size + -4) < 0) {\n    new_block = (int **)((int)new_block + *(int *)(size + -4));\n  }\n  acquire_lock();\n  temp_ptr2 = (int **)&DAT_200002ac;\n  if (DAT_200002ac == (int **)0x0) {\n    new_block[1] = (int *)0x0;\n    temp_ptr1 = extra_output;\n    DAT_200002ac = new_block;\n  }\n  else {\n    temp_ptr2 = DAT_200002ac;\n    if (new_block < DAT_200002ac) {\n      temp_ptr1 = (int **)*new_block;\n      temp_ptr2 = (int **)((int)new_block + (int)temp_ptr1);\n      if (DAT_200002ac == temp_ptr2) {\n        temp_var = *DAT_200002ac;\n        DAT_200002ac = (int **)DAT_200002ac[1];\n        temp_ptr2 = (int **)((int)temp_var + (int)temp_ptr1);\n        *new_block = (int *)temp_ptr2;\n      }\n      new_block[1] = (int *)DAT_200002ac;\n      DAT_200002ac = new_block;\n    }\n    else {\n      do {\n        temp_ptr3 = temp_ptr2;\n        temp_ptr2 = (int **)temp_ptr3[1];\n        if (temp_ptr2 == (int **)0x0) break;\n      } while (temp_ptr2 <= new_block);\n      temp_ptr1 = (int **)*temp_ptr3;\n      if ((int **)((int)temp_ptr3 + (int)temp_ptr1) == new_block) {\n        temp_ptr1 = (int **)((int)temp_ptr1 + (int)*new_block);\n        *temp_ptr3 = (int *)temp_ptr1;\n        if (temp_ptr2 == (int **)((int)temp_ptr3 + (int)temp_ptr1)) {\n          temp_var = *temp_ptr2;\n          temp_ptr2 = (int **)temp_ptr2[1];\n          temp_ptr1 = (int **)((int)temp_ptr1 + (int)temp_var);\n          *temp_ptr3 = (int *)temp_ptr1;\n          temp_ptr3[1] = (int *)temp_ptr2;\n        }\n      }\n      else if (new_block < (int **)((int)temp_ptr3 + (int)temp_ptr1)) {\n        *result = 0xc;\n      }\n      else {\n        temp_ptr1 = (int **)((int)new_block + (int)*new_block);\n        if (temp_ptr2 == temp_ptr1) {\n          temp_var = *temp_ptr2;\n          temp_ptr2 = (int **)temp_ptr2[1];\n          temp_ptr1 = (int **)((int)temp_var + (int)*new_block);\n          *new_block = (int *)temp_ptr1;\n        }\n        new_block[1] = (int *)temp_ptr2;\n        temp_ptr3[1] = (int *)new_block;\n      }\n    }\n  }\n  release_lock(result,temp_ptr1,temp_ptr2,param4);\n  return;\n}\n\n",
            "current_name": "allocate_memory_0800567c",
            "entrypoint": "0x0800567c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800567c": "allocate_memory_0800567c",
                "__malloc_lock": "acquire_lock",
                "__malloc_unlock": "release_lock",
                "extraout_r1": "extra_output",
                "param_1": "result",
                "param_2": "size",
                "param_3": "param3",
                "param_4": "param4",
                "piVar3": "temp_var",
                "ppiVar1": "temp_ptr1",
                "ppiVar2": "temp_ptr2",
                "ppiVar4": "temp_ptr3",
                "ppiVar5": "new_block"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005714": {
            "additional_data": {
                "DAT_200002ac": {
                    "1": "allocated_blocks_head",
                    "3": "first_block"
                },
                "DAT_200002b0": {
                    "1": "brk_result",
                    "2": "brk_ptr"
                },
                "FUNC_0800583c": {
                    "1": "sub_function_1",
                    "3": "lock_memory"
                },
                "FUNC_0800583e": {
                    "1": "increment_memory",
                    "3": "unlock_memory"
                },
                "FUN_08005714": {
                    "27": "allocate_memory",
                    "4": "allocate_memory_block"
                },
                "FUN_0800581c": {
                    "1": "update_block_pointers"
                },
                "__malloc_lock": {
                    "1": "acquire_lock",
                    "2": "lock_memory"
                },
                "__malloc_unlock": {
                    "1": "release_lock",
                    "2": "unlock_memory"
                },
                "_sbrk_r": {
                    "1": "increment_memory"
                },
                "iVar2": {
                    "1": "block_size_diff",
                    "10": "remaining_space",
                    "2": "block_size",
                    "3": "offset",
                    "5": "remaining_size"
                },
                "param_1": {
                    "1": "result",
                    "2": "out_buffer",
                    "3": "ptr_size",
                    "5": "size_ptr",
                    "6": "size"
                },
                "param_2": {
                    "1": "block_size",
                    "17": "size",
                    "3": "requested_size",
                    "6": "alignment"
                },
                "puVar1": {
                    "1": "current_pointer",
                    "19": "current_block",
                    "3": "current_chunk",
                    "4": "current"
                },
                "puVar3": {
                    "1": "temp_pointer",
                    "14": "previous_block",
                    "2": "previous",
                    "3": "previous_chunk"
                },
                "puVar5": {
                    "1": "previous",
                    "2": "new_chunk",
                    "3": "previous_block_next",
                    "4": "previous_block",
                    "5": "new_block"
                },
                "uVar4": {
                    "1": "size_difference",
                    "2": "block_size",
                    "4": "difference",
                    "5": "diff"
                },
                "uVar6": {
                    "1": "requested_size",
                    "17": "allocated_size",
                    "2": "block_size",
                    "3": "total_size"
                }
            },
            "called": [
                "FUN_0800583c",
                "FUN_0800581c",
                "FUN_0800583e"
            ],
            "calling": [
                "FUN_080050fc",
                "FUN_08005044",
                "FUN_080057d0"
            ],
            "code": "\nuint allocate_memory_08005714(undefined4 *size,uint size)\n\n{\n  uint *current_block;\n  int remaining_space;\n  uint *previous_block;\n  uint diff;\n  uint *last_block;\n  uint allocated_size;\n  \n  allocated_size = (size + 3 & 0xfffffffc) + 8;\n  if (allocated_size < 0xc) {\n    allocated_size = 0xc;\n  }\n  if (((int)allocated_size < 0) || (allocated_size < size)) {\n    *size = 0xc;\n  }\n  else {\n    lock_memory();\n    current_block = DAT_200002ac;\n    last_block = DAT_200002ac;\n    while (previous_block = current_block, previous_block != (uint *)0x0) {\n      diff = *previous_block - allocated_size;\n      if (-1 < (int)diff) {\n        if (diff < 0xc) {\n          if (last_block == previous_block) {\n            current_block = (uint *)last_block[1];\n            DAT_200002ac = current_block;\n          }\n          else {\n            current_block = (uint *)previous_block[1];\n          }\n          if (last_block != previous_block) {\n            last_block[1] = (uint)current_block;\n            last_block = previous_block;\n          }\n        }\n        else {\n          *previous_block = diff;\n          *(uint *)((int)previous_block + diff) = allocated_size;\n          last_block = (uint *)((int)previous_block + diff);\n        }\n        goto LAB_08005778;\n      }\n      last_block = previous_block;\n      current_block = (uint *)previous_block[1];\n    }\n    if (DAT_200002b0 == 0) {\n      DAT_200002b0 = increment_memory(size);\n    }\n    current_block = (uint *)increment_memory(size,allocated_size);\n    if ((current_block != (uint *)0xffffffff) &&\n       ((last_block = (uint *)((int)current_block + 3U & 0xfffffffc), current_block == last_block ||\n        (remaining_space = increment_memory(size,(int)last_block - (int)current_block), remaining_space != -1)))) {\n      *last_block = allocated_size;\nLAB_08005778:\n      unlock_memory(size);\n      allocated_size = (int)last_block + 0xbU & 0xfffffff8;\n      remaining_space = allocated_size - (int)(last_block + 1);\n      if (remaining_space != 0) {\n        *(int *)((int)last_block + remaining_space) = -remaining_space;\n        return allocated_size;\n      }\n      return allocated_size;\n    }\n    *size = 0xc;\n    unlock_memory(size);\n  }\n  return 0;\n}\n\n",
            "current_name": "allocate_memory_08005714",
            "entrypoint": "0x08005714",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005714": "allocate_memory_08005714",
                "__malloc_lock": "lock_memory",
                "__malloc_unlock": "unlock_memory",
                "_sbrk_r": "increment_memory",
                "iVar2": "remaining_space",
                "param_1": "size",
                "param_2": "size",
                "puVar1": "current_block",
                "puVar3": "previous_block",
                "puVar5": "last_block",
                "uVar4": "diff",
                "uVar6": "allocated_size"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080057d0": {
            "additional_data": {
                "FUN_08005630": {
                    "1": "initialize_memory",
                    "2": "copy_memory"
                },
                "FUN_0800567c": {
                    "1": "free_memory_with_params"
                },
                "FUN_08005714": {
                    "1": "get_malloc_usable_size",
                    "3": "get_usable_size"
                },
                "FUN_080057d0": {
                    "1": "allocate_memory_and_copy",
                    "2": "realloc_or_malloc",
                    "5": "allocate_and_copy_memory",
                    "7": "reallocate_memory",
                    "8": "allocate_or_copy_memory"
                },
                "FUN_08005840": {
                    "1": "malloc_memory"
                },
                "_free_r": {
                    "1": "free_reentrant",
                    "3": "free_memory"
                },
                "_free_r()": {
                    "1": "free_memory"
                },
                "_malloc_r": {
                    "1": "malloc_reentrant",
                    "4": "allocate_memory"
                },
                "_malloc_r()": {
                    "1": "allocate_memory"
                },
                "_malloc_usable_size_r": {
                    "1": "get_allocated_size",
                    "3": "get_usable_size"
                },
                "_malloc_usable_size_r()": {
                    "1": "get_usable_size"
                },
                "iVar1": {
                    "1": "new_data",
                    "15": "result",
                    "2": "allocated_memory",
                    "3": "destination"
                },
                "memcpy": {
                    "5": "copy_memory"
                },
                "memcpy()": {
                    "1": "copy_memory"
                },
                "param_1": {
                    "1": "src_memory_base",
                    "13": "context",
                    "3": "size",
                    "7": "ptr"
                },
                "param_2": {
                    "1": "buf",
                    "12": "source",
                    "2": "buffer",
                    "3": "old_data"
                },
                "param_3": {
                    "1": "old_size",
                    "15": "size",
                    "4": "src_size",
                    "8": "new_size"
                },
                "param_4": {
                    "1": "additional_parameter",
                    "2": "extra",
                    "5": "param_4",
                    "9": "extra_param"
                },
                "uVar2": {
                    "1": "allocated_size",
                    "2": "source_size",
                    "25": "usable_size"
                }
            },
            "called": [
                "FUN_08005630",
                "FUN_08005714",
                "FUN_0800567c",
                "FUN_08005840"
            ],
            "calling": [
                "FUN_08005044"
            ],
            "code": "\nint allocate_or_copy_memory_080057d0(undefined4 context,int source,uint size,undefined4 extra_param)\n\n{\n  int result;\n  uint usable_size;\n  \n  if (source != 0) {\n    if (size == 0) {\n      free_memory;\n      result = 0;\n    }\n    else {\n      usable_size = get_usable_size;\n      result = source;\n      if ((usable_size < size) && (result = allocate_memory(context,size), result != 0)) {\n        copy_memory(result,source,size);\n        free_memory(context,source);\n      }\n    }\n    return result;\n  }\n  result = allocate_memory(context,size,size,extra_param);\n  return result;\n}\n\n",
            "current_name": "allocate_or_copy_memory_080057d0",
            "entrypoint": "0x080057d0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080057d0": "allocate_or_copy_memory_080057d0",
                "_free_r": "free_memory",
                "_free_r()": "free_memory",
                "_malloc_r": "allocate_memory",
                "_malloc_usable_size_r": "get_usable_size",
                "_malloc_usable_size_r()": "get_usable_size",
                "iVar1": "result",
                "memcpy": "copy_memory",
                "param_1": "context",
                "param_2": "source",
                "param_3": "size",
                "param_4": "extra_param",
                "uVar2": "usable_size"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800581c": {
            "additional_data": {
                "DAT_2000169c": {
                    "1": "allocation_error"
                },
                "FUN_0800581c": {
                    "1": "allocate_and_check_memory",
                    "19": "allocate_memory",
                    "7": "initialize_memory"
                },
                "iVar1": {
                    "1": "allocated_memory_address",
                    "13": "allocation_result",
                    "2": "brk_result",
                    "6": "allocated_address"
                },
                "param_1": {
                    "1": "value_ptr",
                    "13": "result",
                    "3": "result_pointer",
                    "4": "result_ptr"
                },
                "param_2": {
                    "1": "requested_size",
                    "2": "allocation_size",
                    "21": "size",
                    "5": "memory_size"
                }
            },
            "called": [
                "FUN_080072b8"
            ],
            "calling": [
                "FUN_08005714"
            ],
            "code": "\nvoid allocate_memory_0800581c(int *result,undefined4 size)\n\n{\n  int allocation_result;\n  \n  DAT_2000169c = 0;\n  allocation_result = _sbrk(size);\n  if ((allocation_result == -1) && (DAT_2000169c != 0)) {\n    *result = DAT_2000169c;\n  }\n  return;\n}\n\n",
            "current_name": "allocate_memory_0800581c",
            "entrypoint": "0x0800581c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800581c": "allocate_memory_0800581c",
                "iVar1": "allocation_result",
                "param_1": "result",
                "param_2": "size"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800583c": {
            "called": [],
            "calling": [
                "FUN_08005714",
                "FUN_0800567c"
            ],
            "code": "\nvoid FUNC_0800583c(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_0800583c",
            "entrypoint": "0x0800583c",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_0800583c": "FUNC_0800583c"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_0800583e": {
            "called": [],
            "calling": [
                "FUN_08005714",
                "FUN_0800567c"
            ],
            "code": "\nvoid FUNC_0800583e(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_0800583e",
            "entrypoint": "0x0800583e",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_0800583e": "FUNC_0800583e"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_08005840": {
            "additional_data": {
                "*(int *)(param_2 + -4)": {
                    "1": "previous_value"
                },
                "*(int *)(param_2 + iVar1)": {
                    "1": "current_value"
                },
                "*param_2": {
                    "1": "array_element"
                },
                "FUN_08005840": {
                    "1": "calculate_return_value",
                    "10": "calculate_sum",
                    "2": "calculate_modified_value",
                    "7": "calculate_result"
                },
                "iVar1": {
                    "1": "current_index",
                    "11": "result",
                    "3": "new_value",
                    "7": "sum"
                },
                "param_1": {
                    "1": "param_1",
                    "2": "result",
                    "4": "input1",
                    "5": "input_value"
                },
                "param_2": {
                    "1": "input_param",
                    "2": "param2",
                    "3": "array_index",
                    "4": "array_ptr",
                    "6": "input_value"
                }
            },
            "called": [],
            "calling": [
                "FUN_080057d0"
            ],
            "code": "\nint calculate_sum_08005840(undefined4 input_value,int input_value)\n\n{\n  int result;\n  \n  result = *(int *)(input_value + -4) + -4;\n  if (*(int *)(input_value + -4) < 0) {\n    result = result + *(int *)(input_value + result);\n  }\n  return result;\n}\n\n",
            "current_name": "calculate_sum_08005840",
            "entrypoint": "0x08005840",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005840": "calculate_sum_08005840",
                "iVar1": "result",
                "param_1": "input_value",
                "param_2": "input_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005854": {
            "additional_data": {
                "DAT_0800737e": {
                    "1": "nan_data"
                },
                "DAT_080073ac": {
                    "1": "data_pointer"
                },
                "DAT_20000224": {
                    "1": "constant"
                },
                "FUN_08005854": {
                    "1": "calculate_sine",
                    "27": "calculate_asin"
                },
                "iVar1": {
                    "1": "compare_result",
                    "17": "comparison_result",
                    "2": "comparison",
                    "3": "comparison_result2"
                },
                "int *piVar3": {
                    "1": "errno_int_ptr"
                },
                "local_28": {
                    "1": "comparison",
                    "13": "comparison_result",
                    "2": "unordered_result",
                    "3": "comparison_result_2",
                    "4": "comparison_result2"
                },
                "local_30": {
                    "1": "value_nan",
                    "2": "output",
                    "3": "nan_result",
                    "7": "result_nan",
                    "8": "result"
                },
                "local_38": {
                    "1": "temp_value3",
                    "2": "input_1_copy2"
                },
                "local_40": {
                    "1": "local_param1",
                    "2": "temp_input_1",
                    "3": "input_1_copy",
                    "4": "input1_copy"
                },
                "local_44": {
                    "1": "pointer_to_const",
                    "2": "error_msg",
                    "4": "message"
                },
                "local_48": {
                    "1": "returned_flag",
                    "2": "error_flag",
                    "3": "local_flag",
                    "7": "error_code"
                },
                "param_1": {
                    "1": "value1",
                    "2": "input_value1",
                    "7": "input1",
                    "8": "input_1"
                },
                "param_2": {
                    "1": "value2",
                    "2": "value_y",
                    "7": "input2",
                    "8": "input_2"
                },
                "piVar3": {
                    "1": "error_code_ptr",
                    "2": "errno_int_ptr",
                    "3": "errno_ptr2"
                },
                "puVar2": {
                    "1": "error_num_ptr",
                    "13": "errno_ptr",
                    "5": "errno_pointer"
                },
                "uStack_34": {
                    "1": "input_value_2_copy2",
                    "2": "temp_value_y2"
                },
                "uStack_3c": {
                    "1": "local_variable_4",
                    "2": "temp_input_2",
                    "3": "input_2_copy",
                    "4": "input2_copy"
                },
                "uVar4": {
                    "1": "result_var1",
                    "10": "result_asin",
                    "11": "result",
                    "2": "result_1",
                    "5": "asin_result"
                },
                "uVar5": {
                    "1": "abs_input",
                    "2": "result_2",
                    "21": "absolute_value",
                    "5": "abs_value"
                },
                "undefined4 *puVar2": {
                    "1": "errno_ptr"
                },
                "undefined4 param_1": {
                    "1": "input_param_1"
                },
                "undefined4 param_2": {
                    "1": "input_param_2"
                }
            },
            "called": [
                "FUN_0800709e",
                "FUN_0800708c",
                "FUN_080070a4",
                "FUN_08000a04",
                "FUN_080072ac",
                "FUN_08005c70",
                "FUN_080009f0"
            ],
            "calling": [
                "FUN_08003330"
            ],
            "code": "\nundefined8 calculate_asin_08005854(undefined4 input_1,undefined4 input_2)\n\n{\n  int comparison_result;\n  undefined4 *errno_ptr;\n  int *errno_value;\n  undefined8 result;\n  undefined8 absolute_value;\n  undefined4 flag;\n  undefined *message;\n  undefined4 input1_copy;\n  undefined4 input2_copy;\n  undefined4 input1_copy2;\n  undefined4 input2_copy2;\n  undefined8 result;\n  int comparison_result;\n  \n  result = __ieee754_asin();\n  if (DAT_20000224 == -1) {\n    return result;\n  }\n  comparison_result = __unorddf2(input_1,input_2,input_1,input_2);\n  if (comparison_result != 0) {\n    return result;\n  }\n  absolute_value = fabs(input_1,input_2);\n  comparison_result = __aeabi_dcmpgt((int)absolute_value,(int)((ulonglong)absolute_value >> 0x20),0,0x3ff00000);\n  if (comparison_result == 0) {\n    return result;\n  }\n  flag = 1;\n  message = &DAT_080073ac;\n  input1_copy = input_1;\n  input2_copy = input_2;\n  input1_copy2 = input_1;\n  input2_copy2 = input_2;\n  result = nan(&DAT_0800737e);\n  if (DAT_20000224 != '\\x02') {\n    comparison_result = matherr(&flag);\n    if (comparison_result != 0) goto LAB_080058d0;\n  }\n  errno_ptr = (undefined4 *)__errno();\n  *errno_ptr = 0x21;\nLAB_080058d0:\n  if (comparison_result != 0) {\n    errno_value = (int *)__errno();\n    *errno_value = comparison_result;\n  }\n  return result;\n}\n\n",
            "current_name": "calculate_asin_08005854",
            "entrypoint": "0x08005854",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005854": "calculate_asin_08005854",
                "iVar1": "comparison_result",
                "local_28": "comparison_result",
                "local_30": "result",
                "local_38": "input1_copy2",
                "local_40": "input1_copy",
                "local_44": "message",
                "local_48": "flag",
                "param_1": "input_1",
                "param_2": "input_2",
                "piVar3": "errno_value",
                "puVar2": "errno_ptr",
                "uStack_34": "input2_copy2",
                "uStack_3c": "input2_copy",
                "uVar4": "result",
                "uVar5": "absolute_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080058fc": {
            "called": [
                "FUN_08006070"
            ],
            "calling": [
                "FUN_08003330"
            ],
            "code": "\nundefined8 __ieee754_atan2(uint param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  undefined4 uVar1;\n  uint uVar2;\n  uint uVar3;\n  int iVar4;\n  uint uVar5;\n  undefined8 uVar6;\n  undefined8 uVar7;\n  \n  uVar5 = param_4 & 0x7fffffff;\n  if ((0x7ff00000 < (uVar5 | (-param_3 | param_3) >> 0x1f)) ||\n     (uVar3 = param_2 & 0x7fffffff, 0x7ff00000 < (uVar3 | (-param_1 | param_1) >> 0x1f))) {\n    uVar6 = __aeabi_dadd(param_1,param_2,param_3,param_4,param_4);\n    return uVar6;\n  }\n  if ((param_4 + 0xc0100000 | param_3) == 0) {\n    uVar6 = atan();\n    return uVar6;\n  }\n  uVar2 = (int)param_4 >> 0x1e & 2U | param_2 >> 0x1f;\n  if ((param_1 | uVar3) == 0) {\n    if (uVar2 == 2) {\n      return 0x400921fb54442d18;\n    }\n    if (uVar2 != 3) {\n      return CONCAT44(param_2,param_1);\n    }\nLAB_0800613e:\n    uVar6 = 0xc00921fb54442d18;\n  }\n  else {\n    if ((param_3 | uVar5) != 0) {\n      if (uVar5 == 0x7ff00000) {\n        if (uVar3 == 0x7ff00000) {\n          if (uVar2 == 2) {\n            return 0x4002d97c7f3321d2;\n          }\n          if (uVar2 == 3) {\n            return 0xc002d97c7f3321d2;\n          }\n          if (uVar2 != 1) {\n            return 0x3fe921fb54442d18;\n          }\n          return 0xbfe921fb54442d18;\n        }\n        if (uVar2 == 2) {\n          return 0x400921fb54442d18;\n        }\n        if (uVar2 != 3) {\n          if (uVar2 != 1) {\n            return 0;\n          }\n          return 0x8000000000000000;\n        }\n        goto LAB_0800613e;\n      }\n      if (uVar3 != 0x7ff00000) {\n        iVar4 = (int)(uVar3 - uVar5) >> 0x14;\n        if (iVar4 < 0x3d) {\n          if (((int)param_4 < 0) && (iVar4 + 0x3c < 0 != SCARRY4(iVar4,0x3c))) {\n            uVar6 = 0;\n          }\n          else {\n            __divdf3(param_1,param_2);\n            fabs();\n            uVar6 = atan();\n          }\n        }\n        else {\n          uVar6 = 0x3ff921fb54442d18;\n        }\n        iVar4 = (int)((ulonglong)uVar6 >> 0x20);\n        uVar1 = (undefined4)uVar6;\n        if (uVar2 == 1) {\n          return CONCAT44(iVar4 + -0x80000000,uVar1);\n        }\n        if (uVar2 == 2) {\n          uVar7 = __subdf3(uVar1,iVar4,0x33145c07,0x3ca1a626);\n          uVar6 = 0x400921fb54442d18;\n        }\n        else {\n          if (uVar2 == 0) {\n            return uVar6;\n          }\n          uVar6 = __subdf3(uVar1,iVar4,0x33145c07,0x3ca1a626);\n          uVar7 = 0x400921fb54442d18;\n        }\n        uVar6 = __subdf3((int)uVar6,(int)((ulonglong)uVar6 >> 0x20),(int)uVar7,\n                         (int)((ulonglong)uVar7 >> 0x20));\n        return uVar6;\n      }\n    }\n    if ((int)param_2 < 0) {\n      uVar6 = 0xbff921fb54442d18;\n    }\n    else {\n      uVar6 = 0x3ff921fb54442d18;\n    }\n  }\n  return uVar6;\n}\n\n",
            "current_name": "FUN_080058fc",
            "entrypoint": "0x080058fc",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_08005900": {
            "additional_data": {
                "DAT_080073b1": {
                    "1": "default_error_msg"
                },
                "DAT_20000224": {
                    "1": "flag2",
                    "2": "flag"
                },
                "FUN_08005900": {
                    "1": "compute_pow",
                    "17": "calculate_power",
                    "2": "calculate_exponential",
                    "9": "calculate_pow"
                },
                "__aeabi_dcmpeq": {
                    "1": "double_compare_equal"
                },
                "__divdf3": {
                    "1": "divide_double"
                },
                "__errno": {
                    "1": "get_error_code"
                },
                "__ieee754_pow": {
                    "1": "calculate_pow_internal"
                },
                "__muldf3": {
                    "1": "multiply_double"
                },
                "__unorddf2": {
                    "1": "unordered_double_compare"
                },
                "cVar1": {
                    "1": "char_var1",
                    "14": "flag",
                    "2": "condition"
                },
                "finite": {
                    "1": "is_finite"
                },
                "iVar2": {
                    "1": "variable2",
                    "16": "result",
                    "5": "comparison_result"
                },
                "iVar5": {
                    "1": "variable3",
                    "19": "finite_result"
                },
                "local_30": {
                    "1": "math_errno",
                    "2": "error_value",
                    "4": "error_code",
                    "6": "math_error"
                },
                "local_38": {
                    "1": "result_var1",
                    "11": "final_result",
                    "2": "return_val",
                    "5": "return_value"
                },
                "local_40": {
                    "1": "temp3",
                    "2": "exponent1_copy",
                    "3": "param_3_copy",
                    "4": "param3_copy"
                },
                "local_48": {
                    "1": "local_param1",
                    "2": "base_copy",
                    "3": "param_1_copy",
                    "4": "param1_copy"
                },
                "local_4c": {
                    "1": "pointer3",
                    "2": "status_message",
                    "3": "error_msg",
                    "6": "error_message"
                },
                "local_50": {
                    "1": "calculation_type",
                    "2": "power_flag",
                    "3": "status"
                },
                "matherr": {
                    "1": "function_call_to_matherr"
                },
                "param_1": {
                    "1": "base_num",
                    "2": "base_param",
                    "5": "base_1",
                    "6": "base",
                    "8": "base1"
                },
                "param_2": {
                    "1": "exponent_num",
                    "2": "exp_param",
                    "5": "base_2",
                    "6": "exponent",
                    "7": "base2"
                },
                "param_3": {
                    "1": "base_param2",
                    "2": "other_base",
                    "3": "exp1",
                    "4": "exponent1"
                },
                "param_4": {
                    "1": "value2",
                    "2": "input4",
                    "3": "exp2",
                    "4": "exponent_2",
                    "5": "exponent2"
                },
                "piVar3": {
                    "1": "error_pointer",
                    "2": "error_code",
                    "6": "error_ptr",
                    "8": "errno_ptr"
                },
                "puVar4": {
                    "1": "error_code_ptr",
                    "2": "error_ptr",
                    "8": "errno_ptr"
                },
                "rint": {
                    "1": "round_to_nearest_integer"
                },
                "uStack_3c": {
                    "1": "local_var6",
                    "2": "exponent_2_copy",
                    "3": "exponent2_copy",
                    "4": "param4_copy"
                },
                "uStack_44": {
                    "1": "base2_value",
                    "2": "base2_copy",
                    "3": "param_2_copy",
                    "4": "param2_copy"
                },
                "uVar6": {
                    "1": "power_upper",
                    "2": "result_upper",
                    "3": "result_high"
                },
                "uVar7": {
                    "1": "pow_result_2",
                    "2": "result_lower",
                    "3": "low_bits"
                },
                "uVar8": {
                    "1": "unsigned_var3",
                    "10": "result",
                    "2": "power_result",
                    "3": "power"
                },
                "uVar9": {
                    "1": "result_2",
                    "2": "result2",
                    "3": "rounded_power",
                    "6": "rounded_result"
                }
            },
            "called": [
                "FUN_0800709e",
                "FUN_080009b4",
                "FUN_08006228",
                "FUN_08000a04",
                "FUN_08007092",
                "FUN_080004d0",
                "FUN_080072ac",
                "FUN_080009a0",
                "FUN_080070b0",
                "FUN_08000724"
            ],
            "calling": [
                "FUN_0800411c"
            ],
            "code": "\nundefined8 calculate_power_08005900(undefined4 base1,undefined4 base2,undefined4 exponent1,undefined4 exponent2)\n\n{\n  char flag;\n  int result;\n  int *errno_ptr;\n  undefined4 *errno_ptr;\n  int finite_result;\n  undefined4 result_high;\n  undefined4 result_low;\n  undefined8 result;\n  undefined8 rint_result;\n  undefined4 error_code;\n  undefined *error_message;\n  undefined4 param1_copy;\n  undefined4 param2_copy;\n  undefined4 param3_copy;\n  undefined4 param4_copy;\n  undefined8 final_result;\n  int math_error;\n  \n  result = calculate_pow_internal();\n  flag = DAT_20000224;\n  result_high = (undefined4)((ulonglong)result >> 0x20);\n  result_low = (undefined4)result;\n  if (DAT_20000224 == -1) {\n    return result;\n  }\n  result = unordered_double_compare(exponent1,exponent2,exponent1,exponent2);\n  if (result != 0) {\n    return result;\n  }\n  result = unordered_double_compare(base1,base2,base1,base2);\n  param1_copy = base1;\n  param2_copy = base2;\n  param3_copy = exponent1;\n  param4_copy = exponent2;\n  if (result == 0) {\n    result = double_compare_equal(base1,base2,0,0);\n    if (result != 0) {\n      result = double_compare_equal(exponent1,exponent2,0,0);\n      if (result != 0) {\n        error_code = 1;\n        error_message = &DAT_080073b1;\n        final_result = 0;\n        math_error = 0;\n        if (flag != '\\0') {\n          final_result = 0x3ff0000000000000;\n          goto LAB_080059d0;\n        }\n        goto LAB_08005978;\n      }\n      result = is_finite(exponent1,exponent2);\n      if (result == 0) {\n        return result;\n      }\n      result = __aeabi_dcmplt(exponent1,exponent2,0,0);\n      if (result == 0) {\n        return result;\n      }\n      error_code = 1;\n      error_message = &DAT_080073b1;\n      math_error = 0;\n      if (DAT_20000224 == '\\0') goto LAB_08005a22;\n      final_result = 0xfff0000000000000;\n      math_error = 0;\n      flag = DAT_20000224;\nLAB_08005a32:\n      if (flag != '\\x02') goto LAB_08005978;\n      goto LAB_08005a34;\n    }\n    result = is_finite(result_low,result_high);\n    if (((result != 0) || (finite_result = is_finite(base1,base2), finite_result == 0)) ||\n       (finite_result = is_finite(exponent1,exponent2), finite_result == 0)) {\n      result = double_compare_equal(result_low,result_high,0,0);\n      if (result == 0) {\n        return result;\n      }\n      result = is_finite(base1,base2);\n      if (result == 0) {\n        return result;\n      }\n      result = is_finite(exponent1,exponent2);\n      if (result == 0) {\n        return result;\n      }\n      error_code = 4;\n      error_message = &DAT_080073b1;\n      math_error = 0;\n      final_result._0_4_ = 0;\n      final_result._4_4_ = 0;\n      goto LAB_08005afa;\n    }\n    math_error = unordered_double_compare(result_low,result_high);\n    flag = DAT_20000224;\n    if (math_error != 0) {\n      error_message = &DAT_080073b1;\n      error_code = 1;\n      math_error = result;\n      if (DAT_20000224 != '\\0') {\n        final_result = divide_double(0,0,0,0);\n        goto LAB_08005a32;\n      }\nLAB_08005a22:\n      error_message = &DAT_080073b1;\n      error_code = 1;\n      final_result = 0;\n      goto LAB_08005978;\n    }\n    error_message = &DAT_080073b1;\n    error_code = 3;\n    if (DAT_20000224 == '\\0') {\n      final_result._0_4_ = 0xe0000000;\n      final_result._4_4_ = 0x47efffff;\n      result = __aeabi_dcmplt(base1,base2,0,0);\n      if (result != 0) {\n        result = multiply_double(exponent1,exponent2,0,0x3fe00000);\n        rint_result = round_to_nearest_integer();\n        result = double_compare_equal((int)result,(int)((ulonglong)result >> 0x20),(int)rint_result,\n                               (int)((ulonglong)rint_result >> 0x20));\n        if (result == 0) {\n          final_result._0_4_ = 0xe0000000;\n          final_result._4_4_ = 0xc7efffff;\n        }\n        goto LAB_08005afa;\n      }\nLAB_08005b98:\n      result = handle_math_error(&error_code);\n      if (result != 0) goto LAB_080059d0;\n    }\n    else {\n      final_result._0_4_ = 0;\n      final_result._4_4_ = 0x7ff00000;\n      result = __aeabi_dcmplt(base1,base2,0,0);\n      if (result != 0) {\n        result = multiply_double(exponent1,exponent2,0,0x3fe00000);\n        rint_result = round_to_nearest_integer();\n        result = double_compare_equal((int)result,(int)((ulonglong)result >> 0x20),(int)rint_result,\n                               (int)((ulonglong)rint_result >> 0x20));\n        if (result == 0) {\n          final_result._0_4_ = 0;\n          final_result._4_4_ = 0xfff00000;\n        }\n      }\nLAB_08005afa:\n      if (DAT_20000224 != '\\x02') goto LAB_08005b98;\n    }\n    errno_ptr = (undefined4 *)get_error_code();\n    result_low = 0x22;\n  }\n  else {\n    result = double_compare_equal(exponent1,exponent2,0,0);\n    if (result == 0) {\n      return result;\n    }\n    error_code = 1;\n    error_message = &DAT_080073b1;\n    final_result = 0x3ff0000000000000;\n    math_error = 0;\n    if (flag == '\\x02') {\n      return 0x3ff0000000000000;\n    }\nLAB_08005978:\n    result = handle_math_error(&error_code);\n    if (result != 0) goto LAB_080059d0;\nLAB_08005a34:\n    errno_ptr = (undefined4 *)get_error_code();\n    result_low = 0x21;\n  }\n  *errno_ptr = result_low;\nLAB_080059d0:\n  if (math_error != 0) {\n    errno_ptr = (int *)get_error_code();\n    *errno_ptr = math_error;\n  }\n  return final_result;\n}\n\n",
            "current_name": "calculate_power_08005900",
            "entrypoint": "0x08005900",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005900": "calculate_power_08005900",
                "__aeabi_dcmpeq": "double_compare_equal",
                "__divdf3": "divide_double",
                "__errno": "get_error_code",
                "__ieee754_pow": "calculate_pow_internal",
                "__muldf3": "multiply_double",
                "__unorddf2": "unordered_double_compare",
                "cVar1": "flag",
                "finite": "is_finite",
                "iVar2": "result",
                "iVar5": "finite_result",
                "local_30": "math_error",
                "local_38": "final_result",
                "local_40": "param3_copy",
                "local_48": "param1_copy",
                "local_4c": "error_message",
                "local_50": "error_code",
                "matherr": "handle_math_error",
                "param_1": "base1",
                "param_2": "base2",
                "param_3": "exponent1",
                "param_4": "exponent2",
                "piVar3": "errno_ptr",
                "puVar4": "errno_ptr",
                "rint": "round_to_nearest_integer",
                "uStack_3c": "param4_copy",
                "uStack_44": "param2_copy",
                "uVar6": "result_high",
                "uVar7": "result_low",
                "uVar8": "result",
                "uVar9": "rint_result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005bc8": {
            "additional_data": {
                "&DAT_080073b5": {
                    "1": "constant_address"
                },
                "DAT_080073b5": {
                    "1": "constant_value"
                },
                "DAT_20000224": {
                    "1": "constant"
                },
                "FUN_08005bc8": {
                    "1": "calculate_sqrt",
                    "28": "calculate_square_root"
                },
                "__aeabi_dcmplt": {
                    "1": "compare_double_float_less_than"
                },
                "__divdf3": {
                    "1": "perform_division"
                },
                "__errno": {
                    "1": "get_errno",
                    "2": "get_error_number"
                },
                "__ieee754_sqrt": {
                    "1": "compute_square_root",
                    "2": "calculate_sqrt"
                },
                "__unorddf2": {
                    "1": "compare_unsigned_double_float"
                },
                "cVar1": {
                    "1": "flag_value",
                    "3": "condition",
                    "8": "flag"
                },
                "iVar2": {
                    "1": "comparison",
                    "2": "is_less_than",
                    "9": "comparison_result"
                },
                "local_30": {
                    "1": "unord_result",
                    "10": "error_code",
                    "2": "unordered_result",
                    "3": "error",
                    "9": "comparison_result"
                },
                "local_38": {
                    "1": "matherr_result",
                    "2": "error_result",
                    "3": "calculation_result",
                    "4": "output",
                    "5": "result"
                },
                "local_40": {
                    "1": "param_1_copy_2",
                    "2": "num1_copy2"
                },
                "local_48": {
                    "1": "temp_param_1",
                    "2": "local_param_1",
                    "3": "input_1_copy",
                    "4": "temp_input_1"
                },
                "local_4c": {
                    "1": "math_error_message",
                    "12": "message",
                    "2": "local_ptr"
                },
                "local_50": {
                    "1": "matherr_arg1",
                    "2": "status",
                    "3": "result",
                    "9": "flag"
                },
                "matherr": {
                    "3": "handle_math_error"
                },
                "param_1": {
                    "1": "input_a",
                    "13": "input_1",
                    "2": "input_param_1",
                    "3": "input1",
                    "6": "value1"
                },
                "param_2": {
                    "1": "operand_2",
                    "13": "input_2",
                    "2": "value_2",
                    "3": "input2",
                    "6": "value2"
                },
                "piVar3": {
                    "1": "errno_ptr_2",
                    "2": "errno_ptr",
                    "4": "error_ptr"
                },
                "puVar3": {
                    "1": "errno_ptr"
                },
                "puVar4": {
                    "1": "errno_location",
                    "10": "errno_ptr",
                    "2": "pointer_to_errno"
                },
                "uStack_3c": {
                    "1": "value7",
                    "2": "num2_copy2"
                },
                "uStack_44": {
                    "1": "value_2",
                    "2": "value2_copy",
                    "3": "input_2_copy",
                    "4": "temp_input_2"
                },
                "uVar5": {
                    "2": "square_root",
                    "24": "result"
                }
            },
            "called": [
                "FUN_0800709e",
                "FUN_080009b4",
                "FUN_08000a04",
                "FUN_08006c0c",
                "FUN_080072ac",
                "FUN_08000724"
            ],
            "calling": [
                "FUN_08003330"
            ],
            "code": "\nundefined8 calculate_square_root_08005bc8(undefined4 input_1,undefined4 input_2)\n\n{\n  char flag;\n  int comparison_result;\n  int *error_ptr;\n  undefined4 *errno_ptr;\n  undefined8 result;\n  undefined4 flag;\n  undefined *message;\n  undefined4 temp_input_1;\n  undefined4 temp_input_2;\n  undefined4 num1_copy2;\n  undefined4 num2_copy2;\n  undefined8 result;\n  int error_code;\n  \n  result = calculate_sqrt();\n  flag = DAT_20000224;\n  if (DAT_20000224 == -1) {\n    return result;\n  }\n  error_code = compare_unsigned_double_float(input_1,input_2,input_1,input_2);\n  if (error_code != 0) {\n    return result;\n  }\n  comparison_result = compare_double_float_less_than(input_1,input_2,0,0);\n  if (comparison_result == 0) {\n    return result;\n  }\n  flag = 1;\n  message = &DAT_080073b5;\n  temp_input_1 = input_1;\n  temp_input_2 = input_2;\n  num1_copy2 = input_1;\n  num2_copy2 = input_2;\n  if (flag == '\\0') {\n    result = 0;\nLAB_08005c26:\n    comparison_result = handle_math_error(&flag);\n    if (comparison_result != 0) goto LAB_08005c2e;\n  }\n  else {\n    result = divide_double_float(0,0,0,0);\n    if (flag != '\\x02') goto LAB_08005c26;\n  }\n  errno_ptr = (undefined4 *)get_error_number();\n  *errno_ptr = 0x21;\nLAB_08005c2e:\n  if (error_code != 0) {\n    error_ptr = (int *)get_error_number();\n    *error_ptr = error_code;\n  }\n  return result;\n}\n\n",
            "current_name": "calculate_square_root_08005bc8",
            "entrypoint": "0x08005bc8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005bc8": "calculate_square_root_08005bc8",
                "__aeabi_dcmplt": "compare_double_float_less_than",
                "__divdf3": "divide_double_float",
                "__errno": "get_error_number",
                "__ieee754_sqrt": "calculate_sqrt",
                "__unorddf2": "compare_unsigned_double_float",
                "cVar1": "flag",
                "iVar2": "comparison_result",
                "local_30": "error_code",
                "local_38": "result",
                "local_40": "num1_copy2",
                "local_48": "temp_input_1",
                "local_4c": "message",
                "local_50": "flag",
                "matherr": "handle_math_error",
                "param_1": "input_1",
                "param_2": "input_2",
                "piVar3": "error_ptr",
                "puVar4": "errno_ptr",
                "uStack_3c": "num2_copy2",
                "uStack_44": "temp_input_2",
                "uVar5": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005c70": {
            "additional_data": {
                "0x08000168": {
                    "1": "multiply_unsigned_int"
                },
                "0x0800016c": {
                    "1": "multiply_signed_int"
                },
                "0x080004d0": {
                    "1": "calculate_exp"
                },
                "0x08000724": {
                    "1": "multiply_double_signed"
                },
                "0x080009f0": {
                    "1": "check_flag"
                },
                "0x08006c0c": {
                    "1": "calculate_sqrt_reciprocal_mul"
                },
                "0x0800708c": {
                    "1": "print_result"
                },
                "0x1b8d0159": {
                    "1": "0x1b8d0159"
                },
                "0x1c8a2d4b": {
                    "1": "0x1c8a2d4b"
                },
                "0x33145c07": {
                    "1": "0x33145c07"
                },
                "0x3c91a626": {
                    "1": "0x3c91a626"
                },
                "0x3e3fffff": {
                    "1": "0x3e3fffff"
                },
                "0x3eb6f7d": {
                    "1": "0x3eb6f7d"
                },
                "0x3f023de1": {
                    "1": "0x3f023de1"
                },
                "0x3f49efe0": {
                    "1": "0x3f49efe0"
                },
                "0x3fa48228": {
                    "1": "0x3fa48228"
                },
                "0x3fb3b8c5": {
                    "1": "0x3fb3b8c5"
                },
                "0x3fc55555": {
                    "1": "0x3fc55555"
                },
                "0x3fc9c155": {
                    "1": "0x3fc9c155"
                },
                "0x3fd4d612": {
                    "1": "0x3fd4d612"
                },
                "0x3fe00000": {
                    "1": "0x3fe00000"
                },
                "0x3fe6066c": {
                    "1": "0x3fe6066c"
                },
                "0x3fe921fb": {
                    "1": "0x3fe921fb"
                },
                "0x3ff00000": {
                    "1": "0x3ff00000"
                },
                "0x3ff921fb": {
                    "1": "0x3ff921fb"
                },
                "0x40002ae5": {
                    "1": "0x40002ae5"
                },
                "0x40033a27": {
                    "1": "0x40033a27"
                },
                "0x54442d18": {
                    "1": "0x54442d18"
                },
                "0x55555555": {
                    "1": "0x55555555"
                },
                "0x7501b288": {
                    "1": "0x7501b288"
                },
                "0x7e37e43c": {
                    "1": "0x7e37e43c"
                },
                "0x9c598ac8": {
                    "1": "0x9c598ac8"
                },
                "0xb12e9282": {
                    "1": "0xb12e9282"
                },
                "0xb5688f3b": {
                    "1": "0xb5688f3b"
                },
                "0xdfdf709": {
                    "1": "0xdfdf709"
                },
                "0xe884455": {
                    "1": "0xe884455"
                },
                "FAB": {
                    "1": "fabs"
                },
                "FUNC_0800708c": {
                    "1": "function_1"
                },
                "FUN_08000168": {
                    "1": "function_2"
                },
                "FUN_0800016c": {
                    "1": "function_4"
                },
                "FUN_080004d0": {
                    "1": "function3"
                },
                "FUN_08000724": {
                    "1": "function6"
                },
                "FUN_080009f0": {
                    "1": "function7"
                },
                "FUN_08005c70": {
                    "1": "calculate_inverse_sqrt",
                    "2": "calculate_result",
                    "3": "calculate_inverse",
                    "4": "calculate_square_root"
                },
                "FUN_08006c0c": {
                    "1": "function5"
                },
                "LAB_08005cba": {
                    "1": "end_of_function"
                },
                "__aeabi_dadd": {
                    "2": "add_double"
                },
                "__aeabi_dcmpgt": {
                    "2": "compare_double"
                },
                "__divdf3": {
                    "2": "divide_double"
                },
                "__ieee754_sqrt": {
                    "1": "calculate_sqrt"
                },
                "__muldf3": {
                    "2": "multiply_double"
                },
                "__subdf3": {
                    "2": "subtract_double"
                },
                "fabs": {
                    "1": "absolute_value"
                },
                "iVar1": {
                    "1": "cmp_result",
                    "2": "compare_result",
                    "20": "comparison_result"
                },
                "param_1": {
                    "1": "num1",
                    "16": "input1",
                    "2": "input_value_1",
                    "3": "numerator",
                    "4": "input_1"
                },
                "param_2": {
                    "1": "side_b",
                    "16": "input2",
                    "2": "input_value_2",
                    "3": "exponent",
                    "4": "input_2"
                },
                "uVar1": {
                    "1": "temp_var1",
                    "3": "result",
                    "4": "temp1"
                },
                "uVar10": {
                    "1": "result_long_long_temp2",
                    "3": "temp3",
                    "4": "result2"
                },
                "uVar11": {
                    "1": "temp10",
                    "2": "temp_var11",
                    "3": "temp4",
                    "4": "result3",
                    "7": "temp_result2"
                },
                "uVar12": {
                    "1": "temp_result3"
                },
                "uVar13": {
                    "1": "temp6"
                },
                "uVar14": {
                    "1": "temp7"
                },
                "uVar15": {
                    "1": "temp8"
                },
                "uVar16": {
                    "1": "temp9"
                },
                "uVar2": {
                    "1": "temp_var1",
                    "2": "temp",
                    "3": "temp2",
                    "4": "result1",
                    "8": "temp1"
                },
                "uVar3": {
                    "1": "result_temp3",
                    "10": "temp2",
                    "2": "temp_var_3",
                    "3": "temp3",
                    "4": "result2"
                },
                "uVar4": {
                    "1": "temp1_lower",
                    "10": "temp3",
                    "2": "temp_var_4",
                    "3": "temp4",
                    "4": "temp_var4"
                },
                "uVar5": {
                    "1": "temp2_upper",
                    "10": "temp4",
                    "2": "temp_var_5",
                    "3": "temp5",
                    "4": "result4"
                },
                "uVar6": {
                    "1": "temp2_lower",
                    "10": "temp5",
                    "2": "temp1",
                    "3": "temp6",
                    "4": "temp_var6"
                },
                "uVar7": {
                    "1": "temp3_upper",
                    "10": "temp6",
                    "2": "temp2",
                    "3": "temp7",
                    "4": "temp_var7"
                },
                "uVar8": {
                    "1": "temp1",
                    "2": "temp7",
                    "3": "positive_input2"
                },
                "uVar9": {
                    "1": "temp2",
                    "14": "result",
                    "2": "output",
                    "4": "result1"
                }
            },
            "called": [
                "FUN_0800708c",
                "FUN_08000168",
                "FUN_080004d0",
                "FUN_0800016c",
                "FUN_08006c0c",
                "FUN_08000724",
                "FUN_080009f0"
            ],
            "calling": [
                "FUN_08005854"
            ],
            "code": "\nundefined8 calculate_square_root_08005c70(uint input1,uint input2)\n\n{\n  int comparison_result;\n  undefined4 temp1;\n  undefined4 temp2;\n  undefined4 temp3;\n  undefined4 temp4;\n  undefined4 temp5;\n  undefined4 temp6;\n  uint temp_var8;\n  undefined8 result;\n  undefined8 result2;\n  undefined8 temp_result2;\n  \n  result = CONCAT44(input2,input1);\n  temp_var8 = input2 & 0x7fffffff;\n  if (temp_var8 < 0x3ff00000) {\n    if (temp_var8 < 0x3fe00000) {\n      if (0x3e3fffff < temp_var8) {\n        result2 = multiply_double(input1,input2,input1,input2);\n        temp6 = (undefined4)((ulonglong)result2 >> 0x20);\n        temp5 = (undefined4)result2;\n        result2 = multiply_double(temp5,temp6,0xdfdf709,0x3f023de1);\n        result2 = add_double((int)result2,(int)((ulonglong)result2 >> 0x20),0x7501b288,0x3f49efe0);\n        result2 = multiply_double((int)result2,(int)((ulonglong)result2 >> 0x20),temp5,temp6);\n        result2 = subtract_double((int)result2,(int)((ulonglong)result2 >> 0x20),0xb5688f3b,0x3fa48228);\n        result2 = multiply_double((int)result2,(int)((ulonglong)result2 >> 0x20),temp5,temp6);\n        result2 = add_double((int)result2,(int)((ulonglong)result2 >> 0x20),0xe884455,0x3fc9c155);\n        result2 = multiply_double((int)result2,(int)((ulonglong)result2 >> 0x20),temp5,temp6);\n        result2 = subtract_double((int)result2,(int)((ulonglong)result2 >> 0x20),0x3eb6f7d,0x3fd4d612);\n        result2 = multiply_double((int)result2,(int)((ulonglong)result2 >> 0x20),temp5,temp6);\n        result2 = add_double((int)result2,(int)((ulonglong)result2 >> 0x20),0x55555555,0x3fc55555);\n        result2 = multiply_double((int)result2,(int)((ulonglong)result2 >> 0x20),temp5,temp6);\n        temp_result2 = multiply_double(temp5,temp6,0xb12e9282,0x3fb3b8c5);\n        temp_result2 = subtract_double((int)temp_result2,(int)((ulonglong)temp_result2 >> 0x20),0x1b8d0159,0x3fe6066c);\n        temp_result2 = multiply_double((int)temp_result2,(int)((ulonglong)temp_result2 >> 0x20),temp5,temp6);\n        temp_result2 = add_double((int)temp_result2,(int)((ulonglong)temp_result2 >> 0x20),0x9c598ac8,0x40002ae5);\n        temp_result2 = multiply_double((int)temp_result2,(int)((ulonglong)temp_result2 >> 0x20),temp5,temp6);\n        temp_result2 = subtract_double((int)temp_result2,(int)((ulonglong)temp_result2 >> 0x20),0x1c8a2d4b,0x40033a27);\n        temp_result2 = multiply_double((int)temp_result2,(int)((ulonglong)temp_result2 >> 0x20),temp5,temp6);\n        temp_result2 = add_double((int)temp_result2,(int)((ulonglong)temp_result2 >> 0x20),0,0x3ff00000);\n        result2 = divide_double((int)result2,(int)((ulonglong)result2 >> 0x20),(int)temp_result2,\n                          (int)((ulonglong)temp_result2 >> 0x20));\n        result2 = multiply_double((int)result2,(int)((ulonglong)result2 >> 0x20),input1,input2);\n        goto end_of_function;\n      }\n      result2 = add_double(input1,input2,0x8800759c,0x7e37e43c);\n      comparison_result = compare_double((int)result2,(int)((ulonglong)result2 >> 0x20),0,0x3ff00000);\n      if (comparison_result != 0) {\n        return result;\n      }\n    }\n    result = absolute_value(input1,input2);\n    result = subtract_double(0,0x3ff00000,(int)result,(int)((ulonglong)result >> 0x20));\n    result = multiply_double((int)result,(int)((ulonglong)result >> 0x20),0,0x3fe00000);\n    temp1 = (undefined4)((ulonglong)result >> 0x20);\n    temp5 = (undefined4)result;\n    result = multiply_double(temp5,temp1,0xdfdf709,0x3f023de1);\n    result = add_double((int)result,(int)((ulonglong)result >> 0x20),0x7501b288,0x3f49efe0);\n    result = multiply_double((int)result,(int)((ulonglong)result >> 0x20),temp5,temp1);\n    result = subtract_double((int)result,(int)((ulonglong)result >> 0x20),0xb5688f3b,0x3fa48228);\n    result = multiply_double((int)result,(int)((ulonglong)result >> 0x20),temp5,temp1);\n    result = add_double((int)result,(int)((ulonglong)result >> 0x20),0xe884455,0x3fc9c155);\n    result = multiply_double((int)result,(int)((ulonglong)result >> 0x20),temp5,temp1);\n    result = subtract_double((int)result,(int)((ulonglong)result >> 0x20),0x3eb6f7d,0x3fd4d612);\n    result = multiply_double((int)result,(int)((ulonglong)result >> 0x20),temp5,temp1);\n    result = add_double((int)result,(int)((ulonglong)result >> 0x20),0x55555555,0x3fc55555);\n    result = multiply_double((int)result,(int)((ulonglong)result >> 0x20),temp5,temp1);\n    temp2 = (undefined4)((ulonglong)result >> 0x20);\n    result2 = multiply_double(temp5,temp1,0xb12e9282,0x3fb3b8c5);\n    result2 = subtract_double((int)result2,(int)((ulonglong)result2 >> 0x20),0x1b8d0159,0x3fe6066c);\n    result2 = multiply_double((int)result2,(int)((ulonglong)result2 >> 0x20),temp5,temp1);\n    result2 = add_double((int)result2,(int)((ulonglong)result2 >> 0x20),0x9c598ac8,0x40002ae5);\n    result2 = multiply_double((int)result2,(int)((ulonglong)result2 >> 0x20),temp5,temp1);\n    result2 = subtract_double((int)result2,(int)((ulonglong)result2 >> 0x20),0x1c8a2d4b,0x40033a27);\n    result2 = multiply_double((int)result2,(int)((ulonglong)result2 >> 0x20),temp5,temp1);\n    result2 = add_double((int)result2,(int)((ulonglong)result2 >> 0x20),0,0x3ff00000);\n    temp3 = (undefined4)((ulonglong)result2 >> 0x20);\n    temp_result2 = square_root(temp5,temp1);\n    temp4 = (undefined4)((ulonglong)temp_result2 >> 0x20);\n    temp6 = (undefined4)temp_result2;\n    if (temp_var8 < 0x3fef3333) {\n      result = divide_double((int)result,temp2,(int)result2,temp3);\n      result2 = add_double(temp6,temp4,temp6,temp4);\n      result = multiply_double((int)result,(int)((ulonglong)result >> 0x20),(int)result2,\n                       (int)((ulonglong)result2 >> 0x20));\n      result2 = multiply_double(0,temp4,0,temp4);\n      result2 = subtract_double(temp5,temp1,(int)result2,(int)((ulonglong)result2 >> 0x20));\n      temp_result2 = add_double(temp6,temp4,0,temp4);\n      result2 = divide_double((int)result2,(int)((ulonglong)result2 >> 0x20),(int)temp_result2,\n                        (int)((ulonglong)temp_result2 >> 0x20));\n      temp5 = (undefined4)((ulonglong)result2 >> 0x20);\n      result2 = add_double((int)result2,temp5,(int)result2,temp5);\n      result2 = subtract_double(0x33145c07,0x3c91a626,(int)result2,(int)((ulonglong)result2 >> 0x20));\n      result = subtract_double((int)result,(int)((ulonglong)result >> 0x20),(int)result2,\n                       (int)((ulonglong)result2 >> 0x20));\n      result2 = add_double(0,temp4,0,temp4);\n      result2 = subtract_double(0x54442d18,0x3fe921fb,(int)result2,(int)((ulonglong)result2 >> 0x20));\n      result = subtract_double((int)result,(int)((ulonglong)result >> 0x20),(int)result2,\n                       (int)((ulonglong)result2 >> 0x20));\n      temp5 = 0x3fe921fb;\n    }\n    else {\n      result = divide_double((int)result,temp2,(int)result2,temp3);\n      result = multiply_double((int)result,(int)((ulonglong)result >> 0x20),temp6,temp4);\n      result = add_double((int)result,(int)((ulonglong)result >> 0x20),temp6,temp4);\n      temp5 = (undefined4)((ulonglong)result >> 0x20);\n      result = add_double((int)result,temp5,(int)result,temp5);\n      result = subtract_double((int)result,(int)((ulonglong)result >> 0x20),0x33145c07,0x3c91a626);\n      temp5 = 0x3ff921fb;\n    }\n    result = subtract_double(0x54442d18,temp5,(int)result,(int)((ulonglong)result >> 0x20));\n    if ((int)input2 < 1) {\n      result = CONCAT44((int)((ulonglong)result >> 0x20) + -0x80000000,(int)result);\n    }\n  }\n  else {\n    if ((temp_var8 + 0xc0100000 | input1) != 0) {\n      result = subtract_double(input1,input2,input1,input2);\n      temp5 = (undefined4)((ulonglong)result >> 0x20);\n      result = divide_double((int)result,temp5,(int)result,temp5);\n      return result;\n    }\n    result = multiply_double(input1,input2,0x54442d18,0x3ff921fb);\n    result2 = multiply_double(input1,input2,0x33145c07,0x3c91a626);\nend_of_function:\n    result = add_double((int)result,(int)((ulonglong)result >> 0x20),(int)result2,\n                         (int)((ulonglong)result2 >> 0x20));\n  }\n  return result;\n}\n\n",
            "current_name": "calculate_square_root_08005c70",
            "entrypoint": "0x08005c70",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005c70": "calculate_square_root_08005c70",
                "LAB_08005cba": "end_of_function",
                "__aeabi_dadd": "add_double",
                "__aeabi_dcmpgt": "compare_double",
                "__divdf3": "divide_double",
                "__ieee754_sqrt": "square_root",
                "__muldf3": "multiply_double",
                "__subdf3": "subtract_double",
                "fabs": "absolute_value",
                "iVar1": "comparison_result",
                "param_1": "input1",
                "param_2": "input2",
                "uVar1": "temp1",
                "uVar10": "result2",
                "uVar11": "temp_result2",
                "uVar2": "temp1",
                "uVar3": "temp2",
                "uVar4": "temp3",
                "uVar5": "temp4",
                "uVar6": "temp5",
                "uVar7": "temp6",
                "uVar8": "temp_var8",
                "uVar9": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08006070": {
            "additional_data": {
                "CONCAT44": {
                    "1": "concatenate_results"
                },
                "FUNC_0800708c": {
                    "1": "function_1"
                },
                "FUN_08000168": {
                    "1": "function_2"
                },
                "FUN_0800016c": {
                    "1": "function_4"
                },
                "FUN_08000724": {
                    "1": "function_5"
                },
                "FUN_08006070": {
                    "1": "calculate_arctan",
                    "2": "compute_result",
                    "22": "calculate_result",
                    "4": "calculate_value"
                },
                "FUN_08006d68": {
                    "1": "function_3"
                },
                "SCARRY4": {
                    "1": "is_carry_set"
                },
                "__aeabi_dadd": {
                    "1": "add_doubles",
                    "2": "add"
                },
                "__divdf3": {
                    "1": "divide_doubles"
                },
                "__subdf3": {
                    "1": "subtract_doubles",
                    "2": "subtract"
                },
                "atan": {
                    "1": "calculate_atan"
                },
                "fabs": {
                    "1": "calculate_fabs",
                    "2": "absolute_value"
                },
                "iVar4": {
                    "1": "integer_result",
                    "3": "difference",
                    "5": "result_4",
                    "7": "result4"
                },
                "param_1": {
                    "1": "num1",
                    "13": "input_1",
                    "3": "value1",
                    "7": "input1"
                },
                "param_2": {
                    "1": "angle2",
                    "13": "input_2",
                    "3": "value2",
                    "7": "input2"
                },
                "param_3": {
                    "1": "num3",
                    "13": "input_3",
                    "3": "value3",
                    "7": "input3"
                },
                "param_4": {
                    "1": "operand_4",
                    "13": "input_4",
                    "3": "value4",
                    "7": "input4"
                },
                "uVar1": {
                    "1": "angle_sum",
                    "2": "temp_var1",
                    "4": "result",
                    "8": "result_1",
                    "9": "result1"
                },
                "uVar2": {
                    "1": "temp2",
                    "2": "condition1",
                    "4": "flag",
                    "7": "result_2"
                },
                "uVar3": {
                    "1": "abs_x2",
                    "2": "condition2",
                    "7": "result_3"
                },
                "uVar4": {
                    "1": "diff"
                },
                "uVar5": {
                    "1": "cond3",
                    "5": "result_5",
                    "7": "result5"
                },
                "uVar6": {
                    "1": "output_result",
                    "2": "output_value",
                    "6": "result",
                    "7": "final_result",
                    "8": "output"
                },
                "uVar7": {
                    "1": "temp4",
                    "2": "output2",
                    "4": "intermediate_result"
                }
            },
            "called": [
                "FUN_0800708c",
                "FUN_08000168",
                "FUN_08006d68",
                "FUN_0800016c",
                "FUN_08000724"
            ],
            "calling": [
                "FUN_080058fc"
            ],
            "code": "\nundefined8 calculate_result_08006070(uint input_1,uint input_2,uint input_3,uint input_4)\n\n{\n  undefined4 result1;\n  uint result2;\n  uint result3;\n  int result4;\n  uint result5;\n  undefined8 output;\n  undefined8 temp_result;\n  \n  result5 = input_4 & 0x7fffffff;\n  if ((0x7ff00000 < (result5 | (-input_3 | input_3) >> 0x1f)) ||\n     (result3 = input_2 & 0x7fffffff, 0x7ff00000 < (result3 | (-input_1 | input_1) >> 0x1f))) {\n    output = __aeabi_dadd(input_1,input_2,input_3,input_4,input_4);\n    return output;\n  }\n  if ((input_4 + 0xc0100000 | input_3) == 0) {\n    output = calculate_atan();\n    return output;\n  }\n  result2 = (int)input_4 >> 0x1e & 2U | input_2 >> 0x1f;\n  if ((input_1 | result3) == 0) {\n    if (result2 == 2) {\n      return 0x400921fb54442d18;\n    }\n    if (result2 != 3) {\n      return concatenate_results(input_2,input_1);\n    }\nLAB_0800613e:\n    output = 0xc00921fb54442d18;\n  }\n  else {\n    if ((input_3 | result5) != 0) {\n      if (result5 == 0x7ff00000) {\n        if (result3 == 0x7ff00000) {\n          if (result2 == 2) {\n            return 0x4002d97c7f3321d2;\n          }\n          if (result2 == 3) {\n            return 0xc002d97c7f3321d2;\n          }\n          if (result2 != 1) {\n            return 0x3fe921fb54442d18;\n          }\n          return 0xbfe921fb54442d18;\n        }\n        if (result2 == 2) {\n          return 0x400921fb54442d18;\n        }\n        if (result2 != 3) {\n          if (result2 != 1) {\n            return 0;\n          }\n          return 0x8000000000000000;\n        }\n        goto LAB_0800613e;\n      }\n      if (result3 != 0x7ff00000) {\n        result4 = (int)(result3 - result5) >> 0x14;\n        if (result4 < 0x3d) {\n          if (((int)input_4 < 0) && (result4 + 0x3c < 0 != is_carry_set(result4,0x3c))) {\n            output = 0;\n          }\n          else {\n            divide_unsigned(input_1,input_2);\n            absolute_value();\n            output = calculate_atan();\n          }\n        }\n        else {\n          output = 0x3ff921fb54442d18;\n        }\n        result4 = (int)((ulonglong)output >> 0x20);\n        result1 = (undefined4)output;\n        if (result2 == 1) {\n          return concatenate_results(result4 + -0x80000000,result1);\n        }\n        if (result2 == 2) {\n          temp_result = subtract(result1,result4,0x33145c07,0x3ca1a626);\n          output = 0x400921fb54442d18;\n        }\n        else {\n          if (result2 == 0) {\n            return output;\n          }\n          output = subtract(result1,result4,0x33145c07,0x3ca1a626);\n          temp_result = 0x400921fb54442d18;\n        }\n        output = subtract((int)output,(int)((ulonglong)output >> 0x20),(int)temp_result,\n                         (int)((ulonglong)temp_result >> 0x20));\n        return output;\n      }\n    }\n    if ((int)input_2 < 0) {\n      output = 0xbff921fb54442d18;\n    }\n    else {\n      output = 0x3ff921fb54442d18;\n    }\n  }\n  return output;\n}\n\n",
            "current_name": "calculate_result_08006070",
            "entrypoint": "0x08006070",
            "imported": false,
            "improved": true,
            "renaming": {
                "CONCAT44": "concatenate_results",
                "FUN_08006070": "calculate_result_08006070",
                "SCARRY4": "is_carry_set",
                "__divdf3": "divide_unsigned",
                "__subdf3": "subtract",
                "atan": "calculate_atan",
                "fabs": "absolute_value",
                "iVar4": "result4",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "uVar1": "result1",
                "uVar2": "result2",
                "uVar3": "result3",
                "uVar5": "result5",
                "uVar6": "output",
                "uVar7": "temp_result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08006228": {
            "additional_data": {
                "FUNC_0800708c": {
                    "1": "add_numbers"
                },
                "FUN_08000168": {
                    "1": "convert_number"
                },
                "FUN_0800016c": {
                    "1": "shift_number"
                },
                "FUN_08000404": {
                    "1": "convert_number_recursive"
                },
                "FUN_080004d0": {
                    "1": "calculate_sine"
                },
                "FUN_080006c0": {
                    "1": "calculate_cosine"
                },
                "FUN_08000724": {
                    "1": "calculate_square_root"
                },
                "FUN_080009c8": {
                    "1": "check_for_negative_number"
                },
                "FUN_080009f0": {
                    "1": "check_for_division_by_zero"
                },
                "FUN_08006228": {
                    "1": "calculate_result",
                    "14": "calculate_floating_point",
                    "3": "calculate_floating_point_value"
                },
                "FUN_080070a4": {
                    "1": "get_na_n_bits"
                },
                "FUN_080071c0": {
                    "1": "divide_numbers"
                },
                "extraout_r1": {
                    "1": "extra_output1",
                    "2": "temp3"
                },
                "extraout_r1_00": {
                    "1": "temp3",
                    "2": "temp6"
                },
                "extraout_r1_01": {
                    "1": "mantissa_part3",
                    "2": "temp7"
                },
                "extraout_r1_02": {
                    "1": "extra_output4",
                    "2": "temp8"
                },
                "extraout_r1_03": {
                    "1": "temp_var8",
                    "2": "temp9"
                },
                "iVar10": {
                    "1": "scaling_factor",
                    "2": "temp7",
                    "5": "index3"
                },
                "iVar18": {
                    "1": "shifted_significand"
                },
                "iVar5": {
                    "1": "shift_amount",
                    "2": "temp10",
                    "3": "shifted_exponent",
                    "4": "index1"
                },
                "iVar6": {
                    "1": "subexp",
                    "2": "temp_var2",
                    "5": "index2"
                },
                "lVar18": {
                    "1": "long_long_variable",
                    "2": "temp_var14"
                },
                "local_54": {
                    "1": "local_variable54",
                    "2": "condition4",
                    "3": "shift_amount"
                },
                "local_64": {
                    "1": "extracted_significand_bits_high",
                    "2": "local_result3"
                },
                "local_68": {
                    "1": "local_temp1",
                    "2": "local_result2"
                },
                "local_70": {
                    "1": "classification",
                    "2": "condition1",
                    "3": "flag",
                    "4": "result"
                },
                "param_1": {
                    "1": "first_arg",
                    "2": "sign_bits",
                    "3": "sign_bit",
                    "7": "input1",
                    "8": "sign"
                },
                "param_2": {
                    "1": "val2",
                    "10": "exponent",
                    "2": "value2",
                    "7": "input2"
                },
                "param_3": {
                    "1": "limit1",
                    "3": "mantissa_bits",
                    "7": "input3"
                },
                "param_4": {
                    "1": "mantissa_part2",
                    "2": "sign_bit",
                    "7": "input4"
                },
                "uVar1": {
                    "1": "exponent",
                    "2": "undefined_var1",
                    "3": "sign_bit",
                    "5": "temp1",
                    "6": "result1"
                },
                "uVar10": {
                    "1": "temp6"
                },
                "uVar11": {
                    "1": "temp10",
                    "13": "result",
                    "2": "temp8"
                },
                "uVar12": {
                    "1": "temp3",
                    "2": "result_high",
                    "3": "temp4"
                },
                "uVar13": {
                    "1": "undefined_var10",
                    "2": "temp10",
                    "3": "temp5"
                },
                "uVar14": {
                    "1": "result",
                    "2": "temp13",
                    "3": "temp6"
                },
                "uVar15": {
                    "1": "temporary_value5",
                    "2": "temp14",
                    "3": "temp7"
                },
                "uVar16": {
                    "1": "temp7",
                    "2": "temp13",
                    "3": "temp8"
                },
                "uVar17": {
                    "1": "tmp_result2",
                    "2": "temp14",
                    "3": "temp9"
                },
                "uVar18": {
                    "1": "temp14"
                },
                "uVar19": {
                    "1": "temp14",
                    "2": "temp18"
                },
                "uVar2": {
                    "1": "mantissa_temp2",
                    "2": "result",
                    "5": "temp2",
                    "6": "result2"
                },
                "uVar20": {
                    "1": "temp_variable3",
                    "2": "temp_var16"
                },
                "uVar3": {
                    "1": "result",
                    "2": "exponent_bits",
                    "3": "temp3",
                    "6": "result3"
                },
                "uVar4": {
                    "1": "nan_bits_4",
                    "2": "undefined_var4",
                    "3": "temp4",
                    "6": "result4"
                },
                "uVar5": {
                    "1": "i_var5",
                    "2": "temp1"
                },
                "uVar6": {
                    "1": "temp3",
                    "2": "temp2"
                },
                "uVar7": {
                    "1": "difference_1",
                    "2": "temp4",
                    "3": "temp1"
                },
                "uVar8": {
                    "1": "abs_value1",
                    "2": "abs_exponent"
                },
                "uVar9": {
                    "1": "temp_var",
                    "2": "temp9",
                    "3": "temp6"
                }
            },
            "called": [
                "FUN_0800708c",
                "FUN_08000168",
                "FUN_08000404",
                "FUN_080070a4",
                "FUN_080071c0",
                "FUN_0800016c",
                "FUN_080004d0",
                "FUN_080009c8",
                "FUN_08006c0c",
                "FUN_08000724",
                "FUN_080009f0"
            ],
            "calling": [
                "FUN_08005900"
            ],
            "code": "\nuint calculate_floating_point_08006228(uint sign,uint exponent,uint input3,uint input4)\n\n{\n  undefined4 result1;\n  uint result2;\n  uint temp3;\n  undefined4 result3;\n  undefined4 result4;\n  undefined4 temp6;\n  undefined4 temp7;\n  uint temp8;\n  undefined4 temp9;\n  int index1;\n  int index2;\n  undefined4 temp7;\n  uint temp13;\n  undefined4 temp6;\n  int index3;\n  uint result;\n  undefined4 temp4;\n  undefined4 temp5;\n  undefined8 temp6;\n  undefined8 temp7;\n  undefined8 temp8;\n  undefined8 temp9;\n  longlong temp17;\n  ulonglong temp16;\n  undefined8 temp17;\n  uint result;\n  undefined4 local_result2;\n  undefined4 local_result3;\n  int shift_amount;\n  \n  temp7 = CONCAT44(exponent,sign);\n  result = input4 & 0x7fffffff;\n  if ((result | input3) == 0) {\n    return 0;\n  }\n  temp13 = exponent & 0x7fffffff;\n  if (temp13 < 0x7ff00001) {\n    if (temp13 == 0x7ff00000) {\n      if (sign == 0) {\n        if (0x7ff00000 < result) goto LAB_08006278;\nLAB_08006262:\n        if ((result != 0x7ff00000) || (input3 == 0)) {\n          if (-1 < (int)exponent) goto LAB_0800632a;\n          if (result < 0x43400000) {\n            if (result < 0x3ff00000) {\nLAB_0800632a:\n              result = 0;\n              goto LAB_080062ba;\n            }\n            index1 = ((int)result >> 0x14) + -0x3ff;\n            if (0x14 < index1) {\n              result2 = input3 >> (0x34U - index1 & 0xff);\n              if (input3 == result2 << (0x34U - index1 & 0xff)) {\n                result = 2 - (result2 & 1);\n                goto LAB_080062ba;\n              }\n              goto LAB_0800632a;\n            }\n            if (input3 == 0) {\n              result2 = (int)result >> (0x14U - index1 & 0xff);\n              if (result == result2 << (0x14U - index1 & 0xff)) {\n                result = 2 - (result2 & 1);\n              }\n              else {\n                result = 0;\n              }\n              goto LAB_0800630c;\n            }\n            result = 0;\n          }\n          else {\n            result = 2;\nLAB_080062ba:\n            if (input3 == 0) {\n              if (result == 0x7ff00000) {\n                if ((temp13 + 0xc0100000 | sign) == 0) {\n                  return 0;\n                }\n                if (0x3fefffff < temp13) {\n                  if ((int)input4 < 0) {\n                    return 0;\n                  }\n                  return 0;\n                }\n                if (-1 < (int)input4) {\n                  return 0;\n                }\n                return 0;\n              }\nLAB_0800630c:\n              if (result == 0x3ff00000) {\n                if (-1 < (int)input4) {\n                  return sign;\n                }\n                temp6 = 0x3ff0000000000000;\n                goto LAB_08006320;\n              }\n              if (input4 == 0x40000000) goto LAB_0800634a;\n              if ((input4 == 0x3fe00000) && (-1 < (int)exponent)) {\n                result = __ieee754_sqrt(sign,exponent);\n                return result;\n              }\n            }\n          }\n          temp6 = fabs(sign,exponent);\n          temp4 = (undefined4)((ulonglong)temp6 >> 0x20);\n          result1 = (undefined4)temp6;\n          temp16 = CONCAT44(exponent,result1) & 0x7fffffffffffffff;\n          if ((sign == 0) && ((temp13 == 0 || ((exponent & 0x3fffffff) == 0x3ff00000)))) {\n            if ((int)input4 < 0) {\n              temp6 = __divdf3(0,0x3ff00000,result1,temp4);\n            }\n            if (-1 < (int)exponent) {\n              return (uint)temp6;\n            }\n            if ((result | temp13 + 0xc0100000) != 0) {\n              return (uint)temp6;\n            }\n          }\n          else {\n            result2 = 0xffffffff - ((int)exponent >> 0x1f);\n            temp6 = temp7;\n            if ((result | result2) != 0) {\n              if (result < 0x41e00001) {\n                shift_amount = 0;\n                if (temp13 < 0x100000) {\n                  temp16 = __muldf3();\n                  shift_amount = -0x35;\n                }\n                result = (uint)(temp16 >> 0x20);\n                result1 = (undefined4)temp16;\n                shift_amount = ((int)result >> 0x14) + -0x3ff + shift_amount;\n                result = result & 0xfffff;\n                temp13 = result | 0x3ff00000;\n                if (result < 0x3988f) {\nLAB_08006628:\n                  index1 = 0;\n                }\n                else {\n                  if (0xbb679 < result) {\n                    temp13 = temp13 - 0x100000;\n                    shift_amount = shift_amount + 1;\n                    goto LAB_08006628;\n                  }\n                  index1 = 1;\n                }\n                index2 = index1 * 8;\n                temp7 = (&DAT_080073c0)[index1 * 2];\n                temp6 = (&DAT_080073c4)[index1 * 2];\n                temp7 = __subdf3(result1,temp13,temp7,temp6);\n                temp5 = (undefined4)((ulonglong)temp7 >> 0x20);\n                temp6 = __aeabi_dadd(result1,temp13,temp7,temp6);\n                temp6 = __divdf3(0,0x3ff00000,(int)temp6,(int)((ulonglong)temp6 >> 0x20));\n                result3 = (undefined4)((ulonglong)temp6 >> 0x20);\n                temp8 = __muldf3((int)temp7,temp5,(int)temp6,result3);\n                result4 = (undefined4)((ulonglong)temp8 >> 0x20);\n                temp4 = (undefined4)temp8;\n                temp8 = __muldf3(0,result4);\n                temp7 = __subdf3((int)temp7,temp5,(int)temp8,(int)((ulonglong)temp8 >> 0x20));\n                temp8 = __subdf3(0,((int)temp13 >> 1 | 0x20000000U) + 0x80000 + index1 * 0x40000,\n                                  temp7,temp6);\n                temp8 = __subdf3(result1,temp13,(int)temp8,(int)((ulonglong)temp8 >> 0x20));\n                temp8 = __muldf3((int)temp8,(int)((ulonglong)temp8 >> 0x20),0,result4);\n                temp7 = __subdf3((int)temp7,(int)((ulonglong)temp7 >> 0x20),(int)temp8,\n                                  (int)((ulonglong)temp8 >> 0x20));\n                temp7 = __muldf3((int)temp7,(int)((ulonglong)temp7 >> 0x20),(int)temp6,result3);\n                temp5 = (undefined4)((ulonglong)temp7 >> 0x20);\n                temp6 = __muldf3(temp4,result4);\n                result3 = (undefined4)((ulonglong)temp6 >> 0x20);\n                result1 = (undefined4)temp6;\n                temp6 = __muldf3(result1,result3,0x4a454eef,0x3fca7e28);\n                temp6 = __aeabi_dadd((int)temp6,(int)((ulonglong)temp6 >> 0x20),0x93c9db65,\n                                      0x3fcd864a);\n                temp6 = __muldf3((int)temp6,(int)((ulonglong)temp6 >> 0x20),result1,result3);\n                temp6 = __aeabi_dadd((int)temp6,(int)((ulonglong)temp6 >> 0x20),0xa91d4101,\n                                      0x3fd17460);\n                temp6 = __muldf3((int)temp6,(int)((ulonglong)temp6 >> 0x20),result1,result3);\n                temp6 = __aeabi_dadd((int)temp6,(int)((ulonglong)temp6 >> 0x20),0x518f264d,\n                                      0x3fd55555);\n                temp6 = __muldf3((int)temp6,(int)((ulonglong)temp6 >> 0x20),result1,result3);\n                temp6 = __aeabi_dadd((int)temp6,(int)((ulonglong)temp6 >> 0x20),0xdb6fabff,\n                                      0x3fdb6db6);\n                temp6 = __muldf3((int)temp6,(int)((ulonglong)temp6 >> 0x20),result1,result3);\n                temp6 = __aeabi_dadd((int)temp6,(int)((ulonglong)temp6 >> 0x20),0x33333303,\n                                      0x3fe33333);\n                temp8 = __muldf3(result1,result3,result1,result3);\n                temp6 = __muldf3((int)temp6,(int)((ulonglong)temp6 >> 0x20),(int)temp8,\n                                  (int)((ulonglong)temp8 >> 0x20));\n                temp8 = __aeabi_dadd(temp4,result4,0,result4);\n                temp8 = __muldf3((int)temp8,(int)((ulonglong)temp8 >> 0x20),(int)temp7,temp5);\n                temp6 = __aeabi_dadd((int)temp8,(int)((ulonglong)temp8 >> 0x20),(int)temp6,\n                                      (int)((ulonglong)temp6 >> 0x20));\n                result1 = (undefined4)((ulonglong)temp6 >> 0x20);\n                temp8 = __muldf3(0,result4,0,result4);\n                result3 = (undefined4)((ulonglong)temp8 >> 0x20);\n                temp9 = __aeabi_dadd((int)temp8,result3,0,0x40080000);\n                __aeabi_dadd((int)temp9,(int)((ulonglong)temp9 >> 0x20),(int)temp6,result1);\n                temp9 = __muldf3(0,result4,0,temp6);\n                temp7 = (undefined4)((ulonglong)temp9 >> 0x20);\n                temp17 = __subdf3(0,temp6,0,0x40080000);\n                temp8 = __subdf3((int)temp17,(int)((ulonglong)temp17 >> 0x20),(int)temp8,result3);\n                temp6 = __subdf3((int)temp6,result1,(int)temp8,(int)((ulonglong)temp8 >> 0x20));\n                temp6 = __muldf3((int)temp6,(int)((ulonglong)temp6 >> 0x20),temp4,result4);\n                temp7 = __muldf3((int)temp7,temp5,0,temp6);\n                temp6 = __aeabi_dadd((int)temp6,(int)((ulonglong)temp6 >> 0x20),(int)temp7,\n                                      (int)((ulonglong)temp7 >> 0x20));\n                result1 = (undefined4)((ulonglong)temp6 >> 0x20);\n                __aeabi_dadd((int)temp9,temp7,(int)temp6,result1);\n                temp7 = __muldf3(0,temp7,0xe0000000,0x3feec709);\n                temp8 = __subdf3(0,temp7,(int)temp9,temp7);\n                temp6 = __subdf3((int)temp6,result1,(int)temp8,(int)((ulonglong)temp8 >> 0x20));\n                temp6 = __muldf3((int)temp6,(int)((ulonglong)temp6 >> 0x20),0xdc3a03fd,0x3feec709\n                                 );\n                temp8 = __muldf3(0,temp7,0x145b01f5,0xbe3e2fe0);\n                temp6 = __aeabi_dadd((int)temp6,(int)((ulonglong)temp6 >> 0x20),(int)temp8,\n                                      (int)((ulonglong)temp8 >> 0x20));\n                temp6 = __aeabi_dadd((int)temp6,(int)((ulonglong)temp6 >> 0x20),\n                                      *(undefined4 *)(&DAT_080073e0 + index2),\n                                      *(undefined4 *)(&DAT_080073e4 + index2));\n                temp8 = __aeabi_i2d(shift_amount);\n                result1 = (undefined4)((ulonglong)temp8 >> 0x20);\n                temp4 = *(undefined4 *)(&DAT_080073d0 + index2);\n                temp5 = *(undefined4 *)(&DAT_080073d4 + index2);\n                temp9 = __aeabi_dadd((int)temp7,(int)((ulonglong)temp7 >> 0x20),(int)temp6,\n                                      (int)((ulonglong)temp6 >> 0x20));\n                temp9 = __aeabi_dadd((int)temp9,(int)((ulonglong)temp9 >> 0x20),temp4,temp5);\n                __aeabi_dadd((int)temp9,(int)((ulonglong)temp9 >> 0x20),(int)temp8,result1);\n                temp8 = __subdf3(0,temp8,(int)temp8,result1);\n                temp17 = __subdf3((int)temp8,(int)((ulonglong)temp8 >> 0x20),temp4,temp5);\n                result = temp8;\n              }\n              else {\n                if (0x43f00000 < result) {\n                  if (temp13 < 0x3ff00000) goto LAB_080063fa;\nLAB_08006418:\n                  if ((int)input4 < 1) {\n                    return 0;\n                  }\nLAB_08006400:\n                  sign = 0x8800759c;\n                  exponent = 0x7e37e43c;\n                  temp7 = 0x7e37e43c8800759c;\n                  goto LAB_0800634a;\n                }\n                if (temp13 < 0x3fefffff) {\nLAB_080063fa:\n                  if (-1 < (int)input4) {\n                    return 0;\n                  }\n                  goto LAB_08006400;\n                }\n                if (0x3ff00000 < temp13) goto LAB_08006418;\n                temp7 = __subdf3(result1,temp4,0,0x3ff00000);\n                temp4 = (undefined4)((ulonglong)temp7 >> 0x20);\n                result1 = (undefined4)temp7;\n                temp7 = __muldf3(result1,temp4,0x60000000,0x3ff71547);\n                temp6 = __muldf3(result1,temp4,0xf85ddf44,0x3e54ae0b);\n                temp8 = __muldf3(result1,temp4,0,0x3fd00000);\n                temp8 = __subdf3(0x55555555,0x3fd55555,(int)temp8,(int)((ulonglong)temp8 >> 0x20)\n                                 );\n                temp8 = __muldf3((int)temp8,(int)((ulonglong)temp8 >> 0x20),result1,temp4);\n                temp8 = __subdf3(0,0x3fe00000,(int)temp8,(int)((ulonglong)temp8 >> 0x20));\n                temp9 = __muldf3(result1,temp4,result1,temp4);\n                temp8 = __muldf3((int)temp8,(int)((ulonglong)temp8 >> 0x20),(int)temp9,\n                                  (int)((ulonglong)temp9 >> 0x20));\n                temp8 = __muldf3((int)temp8,(int)((ulonglong)temp8 >> 0x20),0x652b82fe,0x3ff71547\n                                 );\n                temp6 = __subdf3((int)temp6,(int)((ulonglong)temp6 >> 0x20),(int)temp8,\n                                  (int)((ulonglong)temp8 >> 0x20));\n                __aeabi_dadd((int)temp7,(int)((ulonglong)temp7 >> 0x20),(int)temp6,\n                             (int)((ulonglong)temp6 >> 0x20));\n                temp17 = (ulonglong)temp3 << 0x20;\n                result = temp3;\n              }\n              temp7 = __subdf3((int)temp17,(int)((ulonglong)temp17 >> 0x20),(int)temp7,\n                                (int)((ulonglong)temp7 >> 0x20));\n              temp7 = __subdf3((int)temp6,(int)((ulonglong)temp6 >> 0x20),(int)temp7,\n                                (int)((ulonglong)temp7 >> 0x20));\n              if ((result - 1 | result2) == 0) {\n                exponent = 0xbff00000;\n              }\n              else {\n                exponent = 0x3ff00000;\n              }\n              result = 0;\n              temp6 = __subdf3(input3,input4,0,input4);\n              temp6 = __muldf3((int)temp6,(int)((ulonglong)temp6 >> 0x20),0,result);\n              temp7 = __muldf3((int)temp7,(int)((ulonglong)temp7 >> 0x20),input3,input4);\n              temp7 = __aeabi_dadd((int)temp6,(int)((ulonglong)temp6 >> 0x20),(int)temp7,\n                                    (int)((ulonglong)temp7 >> 0x20));\n              temp5 = (undefined4)((ulonglong)temp7 >> 0x20);\n              result1 = (undefined4)temp7;\n              temp7 = __muldf3(0,result,0,input4);\n              result3 = (undefined4)((ulonglong)temp7 >> 0x20);\n              temp4 = (undefined4)temp7;\n              temp17 = __aeabi_dadd(result1,temp5,temp4,result3);\n              temp13 = (uint)((ulonglong)temp17 >> 0x20);\n              result = (uint)temp17;\n              if (0x408fffffffffffff < temp17) {\n                if ((temp13 + 0xbf700000 | result) == 0) {\n                  temp6 = __aeabi_dadd(result1,temp5,0x652b82fe,0x3c971547);\n                  temp8 = __subdf3(result,temp13,temp4,result3);\n                  index1 = __aeabi_dcmpgt((int)temp6,(int)((ulonglong)temp6 >> 0x20),(int)temp8,\n                                         (int)((ulonglong)temp8 >> 0x20));\n                  if (index1 == 0) goto LAB_08006968;\n                }\n                temp7 = __muldf3(0,exponent,0x8800759c,0x7e37e43c);\n                sign = 0x8800759c;\n                exponent = 0x7e37e43c;\n                goto LAB_0800634a;\n              }\n              if ((temp13 & 0x7fffffff) < 0x4090cc00) {\nLAB_08006968:\n                if ((temp13 & 0x7fffffff) < 0x3fe00001) {\n                  index1 = 0;\n                }\n                else {\n                  temp13 = (0x100000 >> (((int)(temp13 & 0x7fffffff) >> 0x14) - 0x3feU & 0xff)) +\n                          temp13;\n                  result = (temp13 * 2 >> 0x15) - 0x3ff;\n                  index1 = (int)(temp13 & 0xfffff | 0x100000) >> (0x14 - result & 0xff);\n                  if (temp17 < 0) {\n                    index1 = -index1;\n                  }\n                  temp7 = __subdf3(temp4,result3,0,temp13 & ~(0xfffff >> (result & 0xff)));\n                }\n                local_result3 = (undefined4)((ulonglong)temp7 >> 0x20);\n                local_result2 = (undefined4)temp7;\n                __aeabi_dadd(local_result2,local_result3,result1,temp5);\n                temp7 = __muldf3(0,temp9,0,0x3fe62e43);\n                temp4 = (undefined4)((ulonglong)temp7 >> 0x20);\n                temp6 = __subdf3(0,temp9,local_result2,local_result3);\n                temp6 = __subdf3(result1,temp5,(int)temp6,(int)((ulonglong)temp6 >> 0x20));\n                temp6 = __muldf3((int)temp6,(int)((ulonglong)temp6 >> 0x20),0xfefa39ef,0x3fe62e42\n                                 );\n                temp8 = __muldf3(0,temp9,0xca86c39,0xbe205c61);\n                temp6 = __aeabi_dadd((int)temp6,(int)((ulonglong)temp6 >> 0x20),(int)temp8,\n                                      (int)((ulonglong)temp8 >> 0x20));\n                temp5 = (undefined4)((ulonglong)temp6 >> 0x20);\n                temp8 = __aeabi_dadd((int)temp7,temp4,(int)temp6,temp5);\n                result3 = (undefined4)((ulonglong)temp8 >> 0x20);\n                result1 = (undefined4)temp8;\n                temp7 = __subdf3(result1,result3,(int)temp7,temp4);\n                temp7 = __subdf3((int)temp6,temp5,(int)temp7,(int)((ulonglong)temp7 >> 0x20));\n                temp5 = (undefined4)((ulonglong)temp7 >> 0x20);\n                temp6 = __muldf3(result1,result3,result1,result3);\n                result4 = (undefined4)((ulonglong)temp6 >> 0x20);\n                temp4 = (undefined4)temp6;\n                temp6 = __muldf3(temp4,result4,0x72bea4d0,0x3e663769);\n                temp6 = __subdf3((int)temp6,(int)((ulonglong)temp6 >> 0x20),0xc5d26bf1,0x3ebbbd41\n                                 );\n                temp6 = __muldf3((int)temp6,(int)((ulonglong)temp6 >> 0x20),temp4,result4);\n                temp6 = __aeabi_dadd((int)temp6,(int)((ulonglong)temp6 >> 0x20),0xaf25de2c,\n                                      0x3f11566a);\n                temp6 = __muldf3((int)temp6,(int)((ulonglong)temp6 >> 0x20),temp4,result4);\n                temp6 = __subdf3((int)temp6,(int)((ulonglong)temp6 >> 0x20),0x16bebd93,0x3f66c16c\n                                 );\n                temp6 = __muldf3((int)temp6,(int)((ulonglong)temp6 >> 0x20),temp4,result4);\n                temp6 = __aeabi_dadd((int)temp6,(int)((ulonglong)temp6 >> 0x20),0x5555553e,\n                                      0x3fc55555);\n                temp6 = __muldf3((int)temp6,(int)((ulonglong)temp6 >> 0x20),temp4,result4);\n                temp6 = __subdf3(result1,result3,(int)temp6,(int)((ulonglong)temp6 >> 0x20));\n                temp4 = (undefined4)((ulonglong)temp6 >> 0x20);\n                temp8 = __muldf3(result1,result3,(int)temp6,temp4);\n                temp6 = __subdf3((int)temp6,temp4,0,0x40000000);\n                temp6 = __divdf3((int)temp8,(int)((ulonglong)temp8 >> 0x20),(int)temp6,\n                                  (int)((ulonglong)temp6 >> 0x20));\n                temp8 = __muldf3(result1,result3,(int)temp7,temp5);\n                temp7 = __aeabi_dadd((int)temp8,(int)((ulonglong)temp8 >> 0x20),(int)temp7,\n                                      temp5);\n                temp7 = __subdf3((int)temp6,(int)((ulonglong)temp6 >> 0x20),(int)temp7,\n                                  (int)((ulonglong)temp7 >> 0x20));\n                temp7 = __subdf3((int)temp7,(int)((ulonglong)temp7 >> 0x20),result1,result3);\n                temp6 = __subdf3(0,0x3ff00000,(int)temp7,(int)((ulonglong)temp7 >> 0x20));\n                index2 = (int)((ulonglong)temp6 >> 0x20);\n                index3 = index2 + index1 * 0x100000;\n                temp7 = CONCAT44(index3,(int)temp6);\n                sign = result;\n                if (index3 < 0x100000) {\n                  temp7 = scalbn((int)temp6,index2,index1);\n                }\n              }\n              else {\n                if ((temp13 + 0x3f6f3400 | result) == 0) {\n                  temp6 = __subdf3(result,temp13,temp4,result3);\n                  index1 = __aeabi_dcmple(result1,temp5,(int)temp6,(int)((ulonglong)temp6 >> 0x20));\n                  if (index1 == 0) goto LAB_08006968;\n                }\n                temp7 = __muldf3(0,exponent,0xc2f8f359,0x1a56e1f);\n                sign = 0xc2f8f359;\n                exponent = 0x1a56e1f;\n              }\nLAB_0800634a:\n              result = __muldf3((int)temp7,(int)((ulonglong)temp7 >> 0x20),sign,exponent);\n              return result;\n            }\n          }\n          result1 = (undefined4)((ulonglong)temp6 >> 0x20);\n          temp6 = __subdf3((int)temp6,result1,(int)temp6,result1);\n          temp7 = temp6;\nLAB_08006320:\n          result = __divdf3((int)temp6,(int)((ulonglong)temp6 >> 0x20),(int)temp7,\n                            (int)((ulonglong)temp7 >> 0x20));\n          return result;\n        }\n      }\n    }\n    else if (result < 0x7ff00001) goto LAB_08006262;\n  }\n  if ((temp13 + 0xc0100000 | sign) == 0) {\n    return 0;\n  }\nLAB_08006278:\n  result = nan(&DAT_0800737e);\n  return result;\n}\n\n",
            "current_name": "calculate_floating_point_08006228",
            "entrypoint": "0x08006228",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08006228": "calculate_floating_point_08006228",
                "extraout_r1": "temp3",
                "extraout_r1_00": "temp6",
                "extraout_r1_01": "temp7",
                "extraout_r1_02": "temp8",
                "extraout_r1_03": "temp9",
                "iVar10": "index3",
                "iVar5": "index1",
                "iVar6": "index2",
                "lVar18": "temp17",
                "local_54": "shift_amount",
                "local_64": "local_result3",
                "local_68": "local_result2",
                "local_70": "result",
                "param_1": "sign",
                "param_2": "exponent",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "result1",
                "uVar11": "result",
                "uVar12": "temp4",
                "uVar13": "temp5",
                "uVar14": "temp6",
                "uVar15": "temp7",
                "uVar16": "temp8",
                "uVar17": "temp9",
                "uVar19": "temp16",
                "uVar2": "result2",
                "uVar20": "temp17",
                "uVar3": "result3",
                "uVar4": "result4",
                "uVar7": "temp7",
                "uVar8": "temp13",
                "uVar9": "temp6"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08006c0c": {
            "additional_data": {
                "CONCAT44": {
                    "1": "concatenate_ints"
                },
                "FUN_08006c0c": {
                    "1": "calculate_floating_point_product",
                    "2": "calculate_double_precision",
                    "4": "calculate_product_sum",
                    "7": "calculate_floating_point"
                },
                "__aeabi_dadd": {
                    "1": "add_double_floats"
                },
                "__divdf3": {
                    "1": "divide_double"
                },
                "__muldf3": {
                    "1": "multiply_double_floats"
                },
                "__subdf3": {
                    "1": "subtract_double"
                },
                "iVar10": {
                    "1": "temp9",
                    "2": "temp_var_10",
                    "3": "temp_var10"
                },
                "iVar3": {
                    "1": "exp",
                    "2": "temp_var_3",
                    "3": "temp_var3",
                    "4": "shift_amount",
                    "5": "exponent",
                    "6": "shift_count"
                },
                "iVar4": {
                    "1": "temp4",
                    "2": "temp3",
                    "3": "temp_var4",
                    "4": "temp2"
                },
                "iVar7": {
                    "1": "normalized_exponent",
                    "2": "temp_var_7",
                    "3": "exponent",
                    "8": "sum"
                },
                "param_1": {
                    "1": "value",
                    "2": "num1",
                    "3": "operand1",
                    "4": "numerator",
                    "6": "input1"
                },
                "param_2": {
                    "1": "multiplier",
                    "2": "exponent",
                    "3": "input_2",
                    "4": "value2",
                    "6": "input2"
                },
                "uVar1": {
                    "1": "quotient",
                    "2": "result",
                    "5": "temp_var1",
                    "7": "result1"
                },
                "uVar11": {
                    "1": "temp3",
                    "2": "temp4",
                    "3": "temp_var11"
                },
                "uVar12": {
                    "1": "output",
                    "22": "result",
                    "7": "final_result"
                },
                "uVar2": {
                    "1": "bit_difference",
                    "2": "temp_var_2",
                    "6": "temp_var2",
                    "7": "temp2"
                },
                "uVar5": {
                    "1": "dividend_shifted",
                    "2": "temp4",
                    "3": "temp_var5",
                    "4": "temp3"
                },
                "uVar6": {
                    "1": "result",
                    "2": "temp_var_6",
                    "3": "temp_var6",
                    "4": "temp4"
                },
                "uVar8": {
                    "1": "integer_part",
                    "2": "result",
                    "3": "temp_var8"
                },
                "uVar9": {
                    "1": "bit",
                    "2": "temp_var_9",
                    "3": "temp_var9",
                    "8": "mask"
                }
            },
            "called": [
                "FUN_08000168",
                "FUN_0800016c",
                "FUN_080004d0",
                "FUN_08000724"
            ],
            "calling": [
                "FUN_08005bc8",
                "FUN_08006228",
                "FUN_08005c70"
            ],
            "code": "\nundefined8 calculate_floating_point_08006c0c(uint input1,uint input2)\n\n{\n  undefined4 result1;\n  uint temp1;\n  int shift_count;\n  int temp2;\n  uint temp3;\n  uint temp4;\n  int sum;\n  uint temp_var8;\n  uint mask;\n  int temp_var10;\n  uint temp_var11;\n  undefined8 result;\n  \n  if ((~input2 & 0x7ff00000) == 0) {\n    result = multiply_floats(input1,input2,input1,input2);\n    result = add_floats(input1,input2,(int)result,(int)((ulonglong)result >> 0x20));\n    return result;\n  }\n  if ((int)input2 < 1) {\n    if ((input2 & 0x7fffffff | input1) == 0) {\n      return concatenate_values(input2,input1);\n    }\n    if (input2 != 0) {\n      result = subtract_floats(input1,input2,input1,input2);\n      result1 = (undefined4)((ulonglong)result >> 0x20);\n      result = divide_floats((int)result,result1,(int)result,result1);\n      return result;\n    }\n  }\n  shift_count = (int)input2 >> 0x14;\n  if (shift_count == 0) {\n    while (input2 == 0) {\n      shift_count = shift_count + -0x15;\n      input2 = input1 >> 0xb;\n      input1 = input1 << 0x15;\n    }\n    temp1 = 0;\n    for (; -1 < (int)(input2 << 0xb); input2 = input2 << 1) {\n      temp1 = temp1 + 1;\n    }\n    shift_count = shift_count - (temp1 - 1);\n    input2 = input2 | input1 >> (0x20 - temp1 & 0xff);\n    input1 = input1 << (temp1 & 0xff);\n  }\n  sum = 0;\n  temp1 = input2 & 0xfffff | 0x100000;\n  if ((shift_count + -0x3ff) * -0x80000000 < 0) {\n    temp1 = temp1 * 2 - ((int)input1 >> 0x1f);\n    input1 = input1 << 1;\n  }\n  temp1 = temp1 * 2 - ((int)input1 >> 0x1f);\n  temp2 = 0x16;\n  temp3 = 0;\n  temp_var8 = 0x200000;\n  input1 = input1 << 1;\n  do {\n    temp_var10 = temp3 + temp_var8;\n    if (temp_var10 <= (int)temp1) {\n      temp1 = temp1 - temp_var10;\n      temp3 = temp_var10 + temp_var8;\n      sum = sum + temp_var8;\n    }\n    temp2 = temp2 + -1;\n    temp1 = temp1 * 2 - ((int)input1 >> 0x1f);\n    temp_var8 = temp_var8 >> 1;\n    input1 = input1 << 1;\n  } while (temp2 != 0);\n  temp_var10 = 0x20;\n  mask = 0x80000000;\n  temp_var8 = 0;\n  temp2 = 0;\n  do {\n    temp_var11 = mask + temp2;\n    temp4 = temp3;\n    if (((int)temp3 < (int)temp1) || ((temp1 == temp3 && (temp_var11 <= input1)))) {\n      temp2 = temp_var11 + mask;\n      if (((int)temp_var11 < 0) && (-1 < temp2)) {\n        temp4 = temp3 + 1;\n      }\n      temp1 = temp1 - temp3;\n      if (input1 < temp_var11) {\n        temp1 = temp1 - 1;\n      }\n      input1 = input1 - temp_var11;\n      temp_var8 = temp_var8 + mask;\n    }\n    temp1 = temp1 * 2 - ((int)input1 >> 0x1f);\n    temp_var10 = temp_var10 + -1;\n    input1 = input1 << 1;\n    mask = mask >> 1;\n    temp3 = temp4;\n  } while (temp_var10 != 0);\n  if ((input1 | temp1) != 0) {\n    if (temp_var8 == 0xffffffff) {\n      sum = sum + 1;\n      temp_var8 = 0;\n    }\n    else {\n      temp_var8 = temp_var8 + 1 & 0xfffffffe;\n    }\n  }\n  temp_var8 = temp_var8 >> 1;\n  if (sum << 0x1f < 0) {\n    temp_var8 = temp_var8 | 0x80000000;\n  }\n  return concatenate_values((sum >> 1) + 0x3fe00000 + (shift_count + -0x3ff >> 1) * 0x100000,temp_var8);\n}\n\n",
            "current_name": "calculate_floating_point_08006c0c",
            "entrypoint": "0x08006c0c",
            "imported": false,
            "improved": true,
            "renaming": {
                "CONCAT44": "concatenate_values",
                "FUN_08006c0c": "calculate_floating_point_08006c0c",
                "__aeabi_dadd": "add_floats",
                "__divdf3": "divide_floats",
                "__muldf3": "multiply_floats",
                "__subdf3": "subtract_floats",
                "iVar10": "temp_var10",
                "iVar3": "shift_count",
                "iVar4": "temp2",
                "iVar7": "sum",
                "param_1": "input1",
                "param_2": "input2",
                "uVar1": "result1",
                "uVar11": "temp_var11",
                "uVar12": "result",
                "uVar2": "temp1",
                "uVar5": "temp3",
                "uVar6": "temp4",
                "uVar8": "temp_var8",
                "uVar9": "mask"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08006d68": {
            "additional_data": {
                "&UNK_080073f0": {
                    "1": "table_3"
                },
                "&UNK_080073f4": {
                    "1": "table_4"
                },
                "&UNK_08007410": {
                    "1": "table_1"
                },
                "&UNK_08007414": {
                    "1": "table_2"
                },
                "*UNK_080073f0": {
                    "1": "control_point3"
                },
                "*UNK_080073f4": {
                    "1": "control_point4"
                },
                "*UNK_08007410": {
                    "1": "control_point1"
                },
                "*UNK_08007414": {
                    "1": "control_point2"
                },
                "0x2c6a6c2f": {
                    "1": "constant_3"
                },
                "0x3e200000": {
                    "1": "condition_3"
                },
                "0x3fdc0000": {
                    "1": "condition_2"
                },
                "0x3fe60000": {
                    "1": "special_cond_3"
                },
                "0x3ff00000": {
                    "1": "special_cond_1"
                },
                "0x3ff30000": {
                    "1": "special_cond_2"
                },
                "0x3ff80000": {
                    "1": "special_cond_4"
                },
                "0x3ff921fb": {
                    "1": "constant_6"
                },
                "0x3ff921fb54442d18": {
                    "1": "positive_infinity"
                },
                "0x40038000": {
                    "1": "special_cond_5"
                },
                "0x44100000": {
                    "1": "upper_limit_1"
                },
                "0x54442d18": {
                    "1": "constant_7"
                },
                "0x5555550d": {
                    "1": "constant_2"
                },
                "0x7e37e43c": {
                    "1": "constant_5"
                },
                "0x7ff00000": {
                    "1": "constant_8"
                },
                "0x7fffffff": {
                    "1": "max_int"
                },
                "0x8800759c": {
                    "1": "constant_4"
                },
                "0xbff00000": {
                    "1": "negative_infinity"
                },
                "CONCAT44": {
                    "1": "concatenate"
                },
                "FUNC_0800708c": {
                    "1": "perform_operation1"
                },
                "FUN_08000168": {
                    "1": "function2"
                },
                "FUN_0800016c": {
                    "1": "function4"
                },
                "FUN_080004d0": {
                    "1": "function3"
                },
                "FUN_08000724": {
                    "1": "function5"
                },
                "FUN_080009f0": {
                    "1": "sub_function6",
                    "2": "check_condition"
                },
                "FUN_08006d68": {
                    "1": "calculate_sqrt_approximation",
                    "14": "calculate_square_root",
                    "2": "calculate_value",
                    "9": "calculate_result"
                },
                "FUN_0800708c": {
                    "1": "function1"
                },
                "UNK_080073f0": {
                    "1": "constant_3"
                },
                "UNK_080073f4": {
                    "1": "constant_4"
                },
                "UNK_08007410": {
                    "1": "constant_1"
                },
                "UNK_08007414": {
                    "1": "constant_2"
                },
                "__aeabi_dadd": {
                    "5": "add_double"
                },
                "__aeabi_dcmpgt": {
                    "1": "compare_double_greater_than"
                },
                "__divdf3": {
                    "5": "divide_double"
                },
                "__muldf3": {
                    "5": "multiply_double"
                },
                "__subdf3": {
                    "5": "subtract_double"
                },
                "fabs": {
                    "1": "calculate_absolute_value",
                    "3": "absolute_value"
                },
                "floord": {
                    "1": "floor_double"
                },
                "iVar1": {
                    "2": "condition",
                    "29": "comparison_result"
                },
                "param_1": {
                    "1": "integer_part",
                    "2": "input_a",
                    "3": "input_value1",
                    "5": "input_value",
                    "9": "input1"
                },
                "param_2": {
                    "1": "fraction",
                    "2": "value2",
                    "3": "input_flag",
                    "4": "flags",
                    "9": "input2"
                },
                "param_3": {
                    "1": "input_val3",
                    "2": "param_3",
                    "3": "input_value3",
                    "4": "param3",
                    "8": "input3"
                },
                "param_4": {
                    "1": "unused2",
                    "2": "value4",
                    "3": "input_value4",
                    "4": "param4",
                    "8": "input4"
                },
                "uVar1": {
                    "1": "merged_input",
                    "2": "result1"
                },
                "uVar10": {
                    "1": "temp_value3",
                    "12": "temp_result",
                    "3": "result2"
                },
                "uVar11": {
                    "1": "temp_var4"
                },
                "uVar12": {
                    "1": "temp_var5"
                },
                "uVar13": {
                    "1": "temp_var6"
                },
                "uVar2": {
                    "1": "variable2",
                    "2": "u_var2",
                    "3": "result1",
                    "7": "temp1"
                },
                "uVar3": {
                    "1": "result_2",
                    "2": "result_high",
                    "3": "result2",
                    "7": "temp2"
                },
                "uVar4": {
                    "1": "mul2_low",
                    "2": "u_var4",
                    "3": "temp1_low",
                    "7": "temp3"
                },
                "uVar5": {
                    "1": "result_5",
                    "2": "temp_var4",
                    "3": "temp1_high",
                    "7": "temp4"
                },
                "uVar6": {
                    "1": "result_6",
                    "2": "temp3",
                    "3": "temp2_low",
                    "7": "temp5"
                },
                "uVar7": {
                    "1": "result_6",
                    "2": "u_var7",
                    "3": "temp2_high",
                    "7": "temp6"
                },
                "uVar8": {
                    "1": "temp3",
                    "2": "absolute_value"
                },
                "uVar9": {
                    "1": "result_64bits",
                    "16": "result",
                    "2": "final_result",
                    "3": "result1"
                }
            },
            "called": [
                "FUN_0800708c",
                "FUN_08000168",
                "FUN_080004d0",
                "FUN_0800016c",
                "FUN_08000724",
                "FUN_080009f0"
            ],
            "calling": [
                "FUN_08006070"
            ],
            "code": "\nundefined8 calculate_square_root_08006d68(int input1,uint input2,undefined4 input3,undefined4 input4)\n\n{\n  int comparison_result;\n  undefined4 temp1;\n  undefined4 temp2;\n  undefined4 temp3;\n  undefined4 temp4;\n  undefined4 temp5;\n  undefined4 temp6;\n  uint temp_input2;\n  undefined8 result;\n  undefined8 temp_result;\n  \n  result = concatenate(input2,input1);\n  temp_input2 = input2 & 0x7fffffff;\n  if (temp_input2 < 0x44100000) {\n    if (temp_input2 < 0x3fdc0000) {\n      if (temp_input2 < 0x3e200000) {\n        temp_result = add_double(input1,input2,0x8800759c,0x7e37e43c,input4);\n        comparison_result = compare_double_gt((int)temp_result,(int)((ulonglong)temp_result >> 0x20),0,0x3ff00000);\n        if (comparison_result != 0) {\n          return result;\n        }\n      }\n      comparison_result = -1;\n    }\n    else {\n      result = absolute_value();\n      temp2 = (undefined4)((ulonglong)result >> 0x20);\n      temp1 = (undefined4)result;\n      if (temp_input2 < 0x3ff30000) {\n        if (temp_input2 < 0x3fe60000) {\n          result = add_double(temp1,temp2,temp1,temp2);\n          result = subtract_double((int)result,(int)((ulonglong)result >> 0x20),0,0x3ff00000);\n          temp_result = add_double(temp1,temp2,0,0x40000000);\n          result = divide_double((int)result,(int)((ulonglong)result >> 0x20),(int)temp_result,\n                           (int)((ulonglong)temp_result >> 0x20));\n          comparison_result = 0;\n        }\n        else {\n          result = subtract_double(temp1,temp2,0,0x3ff00000);\n          temp_result = add_double(temp1,temp2,0,0x3ff00000);\n          result = divide_double((int)result,(int)((ulonglong)result >> 0x20),(int)temp_result,\n                           (int)((ulonglong)temp_result >> 0x20));\n          comparison_result = 1;\n        }\n      }\n      else if (temp_input2 < 0x40038000) {\n        result = subtract_double(temp1,temp2,0,0x3ff80000);\n        temp_result = multiply_double(temp1,temp2,0,0x3ff80000);\n        temp_result = add_double((int)temp_result,(int)((ulonglong)temp_result >> 0x20),0,0x3ff00000);\n        result = divide_double((int)result,(int)((ulonglong)result >> 0x20),(int)temp_result,\n                         (int)((ulonglong)temp_result >> 0x20));\n        comparison_result = 2;\n      }\n      else {\n        result = divide_double(0,0xbff00000,temp1,temp2);\n        comparison_result = 3;\n      }\n    }\n    temp6 = (undefined4)((ulonglong)result >> 0x20);\n    temp5 = (undefined4)result;\n    result = multiply_double(temp5,temp6,temp5,temp6);\n    temp3 = (undefined4)((ulonglong)result >> 0x20);\n    temp1 = (undefined4)result;\n    result = multiply_double(temp1,temp3,temp1,temp3);\n    temp4 = (undefined4)((ulonglong)result >> 0x20);\n    temp2 = (undefined4)result;\n    result = multiply_double(temp2,temp4,0xe322da11,0x3f90ad3a);\n    result = add_double((int)result,(int)((ulonglong)result >> 0x20),0x24760deb,0x3fa97b4b);\n    result = multiply_double((int)result,(int)((ulonglong)result >> 0x20),temp2,temp4);\n    result = add_double((int)result,(int)((ulonglong)result >> 0x20),0xa0d03d51,0x3fb10d66);\n    result = multiply_double((int)result,(int)((ulonglong)result >> 0x20),temp2,temp4);\n    result = add_double((int)result,(int)((ulonglong)result >> 0x20),0xc54c206e,0x3fb745cd);\n    result = multiply_double((int)result,(int)((ulonglong)result >> 0x20),temp2,temp4);\n    result = add_double((int)result,(int)((ulonglong)result >> 0x20),0x920083ff,0x3fc24924);\n    result = multiply_double((int)result,(int)((ulonglong)result >> 0x20),temp2,temp4);\n    result = add_double((int)result,(int)((ulonglong)result >> 0x20),0x5555550d,0x3fd55555);\n    result = multiply_double((int)result,(int)((ulonglong)result >> 0x20),temp1,temp3);\n    temp1 = (undefined4)((ulonglong)result >> 0x20);\n    temp_result = multiply_double(temp2,temp4,0x2c6a6c2f,0xbfa2b444);\n    temp_result = subtract_double((int)temp_result,(int)((ulonglong)temp_result >> 0x20),0x52defd9a,0x3fadde2d);\n    temp_result = multiply_double((int)temp_result,(int)((ulonglong)temp_result >> 0x20),temp2,temp4);\n    temp_result = subtract_double((int)temp_result,(int)((ulonglong)temp_result >> 0x20),0xaf749a6d,0x3fb3b0f2);\n    temp_result = multiply_double((int)temp_result,(int)((ulonglong)temp_result >> 0x20),temp2,temp4);\n    temp_result = subtract_double((int)temp_result,(int)((ulonglong)temp_result >> 0x20),0xfe231671,0x3fbc71c6);\n    temp_result = multiply_double((int)temp_result,(int)((ulonglong)temp_result >> 0x20),temp2,temp4);\n    temp_result = subtract_double((int)temp_result,(int)((ulonglong)temp_result >> 0x20),0x9998ebc4,0x3fc99999);\n    temp_result = multiply_double((int)temp_result,(int)((ulonglong)temp_result >> 0x20),temp2,temp4);\n    temp2 = (undefined4)((ulonglong)temp_result >> 0x20);\n    if (comparison_result == -1) {\n      result = add_double((int)result,temp1,(int)temp_result,temp2);\n      result = multiply_double((int)result,(int)((ulonglong)result >> 0x20),temp5,temp6);\n      result = subtract_double(temp5,temp6,(int)result,(int)((ulonglong)result >> 0x20));\n    }\n    else {\n      result = add_double((int)result,temp1,(int)temp_result,temp2);\n      result = multiply_double((int)result,(int)((ulonglong)result >> 0x20),temp5,temp6);\n      comparison_result = comparison_result * 8;\n      result = subtract_double((int)result,(int)((ulonglong)result >> 0x20),\n                       *(undefined4 *)(table_1 + comparison_result),*(undefined4 *)(table_2 + comparison_result)\n                      );\n      result = subtract_double((int)result,(int)((ulonglong)result >> 0x20),temp5,temp6);\n      result = subtract_double(*(undefined4 *)(table_3 + comparison_result),*(undefined4 *)(table_4 + comparison_result)\n                       ,(int)result,(int)((ulonglong)result >> 0x20));\n      if ((int)input2 < 0) {\n        result = concatenate((int)((ulonglong)result >> 0x20) + -0x80000000,(int)result);\n      }\n    }\n  }\n  else if ((temp_input2 < 0x7ff00001) && ((temp_input2 != 0x7ff00000 || (input1 == 0)))) {\n    if ((int)input2 < 1) {\n      result = 0xbff921fb54442d18;\n    }\n    else {\n      result = 0x3ff921fb54442d18;\n    }\n  }\n  else {\n    result = add_double(input1,input2,input1,input2,input4);\n  }\n  return result;\n}\n\n",
            "current_name": "calculate_square_root_08006d68",
            "entrypoint": "0x08006d68",
            "imported": false,
            "improved": true,
            "renaming": {
                "&UNK_080073f0": "table_3",
                "&UNK_080073f4": "table_4",
                "&UNK_08007410": "table_1",
                "&UNK_08007414": "table_2",
                "CONCAT44": "concatenate",
                "FUN_08006d68": "calculate_square_root_08006d68",
                "UNK_080073f0": "constant_3",
                "UNK_080073f4": "constant_4",
                "UNK_08007410": "constant_1",
                "UNK_08007414": "constant_2",
                "__aeabi_dadd": "add_double",
                "__aeabi_dcmpgt": "compare_double_gt",
                "__divdf3": "divide_double",
                "__muldf3": "multiply_double",
                "__subdf3": "subtract_double",
                "fabs": "absolute_value",
                "iVar1": "comparison_result",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "result1",
                "uVar10": "temp_result",
                "uVar2": "temp1",
                "uVar3": "temp2",
                "uVar4": "temp3",
                "uVar5": "temp4",
                "uVar6": "temp5",
                "uVar7": "temp6",
                "uVar8": "temp_input2",
                "uVar9": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800708c": {
            "called": [],
            "calling": [
                "FUN_08006070",
                "FUN_08006d68",
                "FUN_08006228",
                "FUN_08005854",
                "FUN_08005c70"
            ],
            "code": "\nvoid FUNC_0800708c(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_0800708c",
            "entrypoint": "0x0800708c",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_0800708c": "FUNC_0800708c"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_08007092": {
            "additional_data": {
                "<original_variable_name_1>": {
                    "1": "set_bit"
                },
                "<original_variable_name_2>": {
                    "1": "shifted_input"
                },
                "FUN_08007092": {
                    "1": "set_bit_and_shift",
                    "2": "extract_sign_bit",
                    "3": "get_sign_bit"
                },
                "param_1": {
                    "1": "input_status",
                    "2": "undefined_param",
                    "3": "status",
                    "4": "input_flag"
                },
                "param_2": {
                    "1": "arg2",
                    "2": "input_number",
                    "3": "number",
                    "4": "value",
                    "6": "input_value"
                },
                "param_2 ": {
                    "1": "input_with_sign_bit2"
                },
                "param_3": {
                    "1": "result",
                    "3": "mask"
                },
                "param_4": {
                    "1": "final_value"
                },
                "result": {
                    "1": "most_significant_bit"
                }
            },
            "called": [],
            "calling": [
                "FUN_08005900"
            ],
            "code": "\nuint get_sign_bit_08007092(undefined4 input,uint input_value)\n\n{\n  return (input_value | 0x80000000) + 0x100000 >> 0x1f;\n}\n\n",
            "current_name": "get_sign_bit_08007092",
            "entrypoint": "0x08007092",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08007092": "get_sign_bit_08007092",
                "param_1": "input",
                "param_2": "input_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800709e": {
            "additional_data": {
                "<original_variable_name>": {
                    "1": "result"
                },
                "<unnamed_return_variable>": {
                    "1": "result"
                },
                "FUN_0800709e": {
                    "1": "initialize_variable",
                    "12": "initialize",
                    "2": "calculate_result",
                    "4": "initialize_program",
                    "6": "get_default_value"
                },
                "VAR_1": {
                    "1": "result"
                },
                "retVal": {
                    "1": "result"
                },
                "return": {
                    "1": "result"
                },
                "undefined4": {
                    "10": "void",
                    "2": "uint32_t"
                }
            },
            "called": [],
            "calling": [
                "FUN_08005bc8",
                "FUN_08005900",
                "FUN_08005854"
            ],
            "code": "\nvoid initialize_0800709e(void)\n\n{\n  result 0;\n}\n\n",
            "current_name": "initialize_0800709e",
            "entrypoint": "0x0800709e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800709e": "initialize_0800709e",
                "return": "result",
                "undefined4": "void"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080070a4": {
            "additional_data": {
                "0x7ff8000000000000": {
                    "1": "ieee_754_double_infinity",
                    "4": "infinity",
                    "5": "positive_infinity"
                },
                "<unnamed_variable_1>": {
                    "1": "infinity"
                },
                "FUN_080070a4": {
                    "1": "get_double_infinity",
                    "11": "get_infinity",
                    "7": "get_positive_infinity",
                    "8": "get_infinity_value"
                },
                "return": {
                    "1": "infinite_value"
                },
                "return_value": {
                    "1": "maximum_double_value"
                },
                "undefined8": {
                    "1": "uint64_t",
                    "12": "double"
                }
            },
            "called": [],
            "calling": [
                "FUN_08006228",
                "FUN_08005854"
            ],
            "code": "\ndouble get_infinity_080070a4(void)\n\n{\n  infinite_value 0x7ff8000000000000;\n}\n\n",
            "current_name": "get_infinity_080070a4",
            "entrypoint": "0x080070a4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080070a4": "get_infinity_080070a4",
                "return": "infinite_value",
                "undefined8": "double"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080070b0": {
            "additional_data": {
                "FUN_08000168": {
                    "1": "addition_function1"
                },
                "FUN_0800016c": {
                    "1": "subtraction_function1"
                },
                "FUN_080070b0": {
                    "1": "calculate_decimal",
                    "2": "calculate_square_root",
                    "3": "perform_arithmetic_operation",
                    "8": "calculate_result"
                },
                "funky_sub_1": {
                    "1": "addition_helper"
                },
                "funky_sub_2": {
                    "1": "subtraction_helper"
                },
                "iVar1": {
                    "1": "multiplier",
                    "11": "index",
                    "2": "shift",
                    "3": "temp_var1"
                },
                "param_1": {
                    "1": "numerator",
                    "12": "input1",
                    "2": "operand1",
                    "3": "input_value1",
                    "5": "input_1"
                },
                "param_2": {
                    "1": "value2",
                    "12": "input2",
                    "2": "exponent",
                    "3": "num2",
                    "5": "input_2"
                },
                "param_3": {
                    "1": "precision",
                    "12": "input3",
                    "2": "param",
                    "3": "input_value3",
                    "4": "param3",
                    "5": "input_3"
                },
                "uVar1": {
                    "1": "calculation1"
                },
                "uVar2": {
                    "1": "var_1",
                    "2": "temp_var1",
                    "3": "temp_var2",
                    "4": "value1",
                    "6": "var1"
                },
                "uVar3": {
                    "1": "temp1",
                    "2": "var2",
                    "3": "temp_var3"
                },
                "uVar4": {
                    "1": "var_3",
                    "2": "result2",
                    "3": "temp_var4",
                    "4": "value2"
                },
                "uVar5": {
                    "1": "modified_num1",
                    "2": "var4",
                    "3": "temp_var5"
                },
                "uVar6": {
                    "1": "var_5",
                    "2": "shift_amount",
                    "3": "temp_var6",
                    "5": "difference"
                },
                "uVar7": {
                    "1": "var_6",
                    "2": "var6",
                    "3": "temp_var7",
                    "4": "shifted_bits",
                    "5": "shifted_value"
                },
                "uVar8": {
                    "1": "final_result",
                    "27": "result"
                }
            },
            "called": [
                "FUN_08000168",
                "FUN_0800016c"
            ],
            "calling": [
                "FUN_08005900"
            ],
            "code": "\nundefined8 calculate_result_080070b0(uint input1,uint input2,undefined4 input3)\n\n{\n  int index;\n  undefined4 var1;\n  uint temp_var3;\n  undefined4 value2;\n  uint temp_var5;\n  uint difference;\n  uint shifted_value;\n  undefined8 result;\n  \n  shifted_value = (input2 << 1) >> 0x15;\n  difference = shifted_value - 0x3ff;\n  temp_var3 = input2;\n  if ((int)difference < 0x14) {\n    if ((int)difference < 0) {\n      if ((input2 & 0x7fffffff | input1) == 0) {\n        return CONCAT44(input2,input1);\n      }\n      temp_var3 = input2 & 0xfffff | input1;\n      index = ((int)input2 >> 0x1f) * -8;\n      var1 = *(undefined4 *)(&DAT_08007430 + index);\n      value2 = *(undefined4 *)(&DAT_08007434 + index);\n      result = __aeabi_dadd(input1,(-temp_var3 | temp_var3) >> 0xc & 0x80000 | input2 & 0xfffe0000,var1,\n                           value2,input1,input2,input3);\n      result = __subdf3((int)result,(int)((ulonglong)result >> 0x20),var1,value2);\n      return CONCAT44((uint)((ulonglong)result >> 0x20) & 0x7fffffff | input2 & 0x80000000,\n                      (int)result);\n    }\n    shifted_value = 0xfffff >> (difference & 0xff);\n    if ((input2 & shifted_value | input1) == 0) {\n      return CONCAT44(input2,input1);\n    }\n    shifted_value = shifted_value >> 1;\n    temp_var5 = input2 & shifted_value | input1;\n    if (temp_var5 != 0) {\n      if (difference == 0x13) {\n        temp_var5 = 0x80000000;\n      }\n      else {\n        temp_var5 = 0;\n      }\n      temp_var3 = 0x40000 >> (difference & 0xff) | input2 & ~shifted_value;\n    }\n  }\n  else {\n    if (0x33 < (int)difference) {\n      if (difference != 0x400) {\n        return CONCAT44(input2,input1);\n      }\n      result = __aeabi_dadd();\n      return result;\n    }\n    shifted_value = shifted_value - 0x413;\n    difference = 0xffffffff >> (shifted_value & 0xff);\n    if ((input1 & difference) == 0) {\n      return CONCAT44(input2,input1);\n    }\n    difference = difference >> 1;\n    temp_var5 = input1;\n    if ((input1 & difference) != 0) {\n      temp_var5 = 0x40000000 >> (shifted_value & 0xff) | input1 & ~difference;\n    }\n  }\n  index = ((int)input2 >> 0x1f) * -8;\n  var1 = *(undefined4 *)(&DAT_08007430 + index);\n  value2 = *(undefined4 *)(&DAT_08007434 + index);\n  result = __aeabi_dadd(temp_var5,temp_var3,var1,value2,input1,input2,input3);\n  result = __subdf3((int)result,(int)((ulonglong)result >> 0x20),var1,value2);\n  return result;\n}\n\n",
            "current_name": "calculate_result_080070b0",
            "entrypoint": "0x080070b0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080070b0": "calculate_result_080070b0",
                "iVar1": "index",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "uVar2": "var1",
                "uVar3": "temp_var3",
                "uVar4": "value2",
                "uVar5": "temp_var5",
                "uVar6": "difference",
                "uVar7": "shifted_value",
                "uVar8": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080071c0": {
            "additional_data": {
                "-0xc351": {
                    "1": "threshold"
                },
                "0x1a56e1f": {
                    "1": "threshold_value2"
                },
                "0x35": {
                    "1": "threshold_constant"
                },
                "0x3c900000": {
                    "1": "constant1"
                },
                "0x7e37e43c": {
                    "1": "constant3"
                },
                "0x7ff": {
                    "1": "max_value"
                },
                "0x8800759c": {
                    "1": "constant2"
                },
                "0xc2f8f359": {
                    "1": "threshold_value1"
                },
                "CONCAT44": {
                    "1": "concatenate_64_bits"
                },
                "FUNC_0800729c": {
                    "1": "perform_operation"
                },
                "FUN_0800016c": {
                    "1": "perform_operation_c"
                },
                "FUN_080004d0": {
                    "1": "multiply_and_add1",
                    "2": "multiply_64bit"
                },
                "FUN_080071c0": {
                    "1": "calculate_floating_point",
                    "20": "calculate_product",
                    "4": "calculate_result"
                },
                "FUN_0800729c": {
                    "1": "function1"
                },
                "LAB_080071ec": {
                    "1": "perform_threshold_calculation"
                },
                "LAB_08007210": {
                    "1": "label1"
                },
                "LAB_0800722e": {
                    "1": "perform_final_calculation"
                },
                "SCARRAY4": {
                    "1": "signed_carry"
                },
                "SCARRY4": {
                    "1": "signed_carry_4bits"
                },
                "__aeabi_dadd": {
                    "1": "add",
                    "2": "add_double_float",
                    "6": "add_double"
                },
                "__muldf3": {
                    "1": "multiply_double_precision",
                    "2": "multiply_floats",
                    "5": "multiply_double"
                },
                "concat44": {
                    "1": "concatenate_values"
                },
                "copysign": {
                    "1": "copy_sign_decimal",
                    "8": "copy_sign"
                },
                "copysign(0x8800759c,0x7e37e43c,uVar2,uVar5)": {
                    "1": "copysign(0x8800759c,0x7e37e43c)"
                },
                "copysign(0xc2f8f359,0x1a56e1f,uVar2,uVar5)": {
                    "1": "copysign(0xc2f8f359,0x1a56e1f)"
                },
                "iVar3": {
                    "1": "combined",
                    "12": "sum",
                    "2": "exponent_sum",
                    "3": "result_exponent"
                },
                "param_1": {
                    "1": "integer_part",
                    "2": "input_param_1",
                    "4": "operand1",
                    "8": "input1"
                },
                "param_2": {
                    "1": "multiplier",
                    "2": "input_param_2",
                    "4": "operand2",
                    "8": "input_2"
                },
                "param_3": {
                    "1": "iteration_count",
                    "16": "exponent",
                    "2": "input_param_3",
                    "4": "shift_amount"
                },
                "param_4": {
                    "1": "some_parameter",
                    "2": "some_value",
                    "3": "constant",
                    "4": "unused_param"
                },
                "uVar1": {
                    "1": "shifted_fraction",
                    "2": "shifted",
                    "3": "shifted_bits",
                    "6": "shifted_input"
                },
                "uVar2": {
                    "1": "variable1",
                    "2": "constant_1",
                    "6": "result1"
                },
                "uVar3": {
                    "1": "copysign_operand1"
                },
                "uVar4": {
                    "1": "variable2",
                    "2": "mantissa_high",
                    "3": "constant_2",
                    "4": "result_high",
                    "5": "result2"
                },
                "uVar5": {
                    "1": "upper_bits_result",
                    "2": "u_var5",
                    "5": "upper_bits",
                    "6": "high_bits"
                },
                "uVar6": {
                    "1": "output",
                    "11": "product",
                    "15": "result"
                }
            },
            "called": [
                "FUN_0800729c",
                "FUN_080004d0",
                "FUN_0800016c"
            ],
            "calling": [
                "FUN_08006228"
            ],
            "code": "\nundefined8 calculate_product_080071c0(uint input1,uint input2,int exponent,undefined4 unused_param)\n\n{\n  uint shifted_input2;\n  undefined4 result_low;\n  int sum;\n  undefined4 result2;\n  uint high_bits;\n  undefined8 result;\n  \n  result = concatenate(input2,input1);\n  shifted_input2 = (input2 << 1) >> 0x15;\n  if (shifted_input2 == 0) {\n    if ((input2 & 0x7fffffff | input1) == 0) {\n      return result;\n    }\n    result = multiply_double(input1,input2,0,0x43500000);\n    if (-0xc351 < exponent) {\n      shifted_input2 = ((uint)((int)((ulonglong)result >> 0x20) << 1) >> 0x15) - 0x36;\n      goto add_shifted_value_to_threshold;\n    }\nperform_threshold_calculation:\n    result_low = 0xc2f8f359;\n    result2 = 0x1a56e1f;\n  }\n  else {\n    if (shifted_input2 == 0x7ff) {\n      result = add_double(input1,input2,input1,input2,unused_param);\n      return result;\n    }\nadd_shifted_value_to_threshold:\n    high_bits = (uint)((ulonglong)result >> 0x20);\n    result_low = (undefined4)result;\n    sum = shifted_input2 + exponent;\n    if (sum < 0x7ff) {\n      if (0 < sum) {\n        return concatenate(high_bits & 0x800fffff | sum * 0x100000,result_low);\n      }\n      if (sum + 0x35 < 0 == signed_integer_overflow(sum,0x35)) {\n        result = concatenate(high_bits & 0x800fffff | (sum + 0x36) * 0x100000,result_low);\n        result_low = 0;\n        result2 = 0x3c900000;\n        goto perform_final_calculation;\n      }\n      if (exponent < 0xc351) {\n        result = copysign(0xc2f8f359,0x1a56e1f);\n        goto perform_threshold_calculation;\n      }\n    }\n    result = copysign(0x8800759c,0x7e37e43c);\n    result_low = 0x8800759c;\n    result2 = 0x7e37e43c;\n  }\nperform_final_calculation:\n  result = multiply_double((int)result,(int)((ulonglong)result >> 0x20),result_low,result2);\n  return result;\n}\n\n",
            "current_name": "calculate_product_080071c0",
            "entrypoint": "0x080071c0",
            "imported": false,
            "improved": true,
            "renaming": {
                "CONCAT44": "concatenate",
                "FUN_080071c0": "calculate_product_080071c0",
                "LAB_080071ec": "perform_threshold_calculation",
                "LAB_08007210": "add_shifted_value_to_threshold",
                "LAB_0800722e": "perform_final_calculation",
                "SCARRY4": "signed_integer_overflow",
                "__aeabi_dadd": "add_double",
                "__muldf3": "multiply_double",
                "copysign": "copy_sign",
                "copysign(0x8800759c,0x7e37e43c,uVar2,uVar5)": "copysign(0x8800759c,0x7e37e43c)",
                "copysign(0xc2f8f359,0x1a56e1f,uVar2,uVar5)": "copysign(0xc2f8f359,0x1a56e1f)",
                "iVar3": "sum",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "exponent",
                "param_4": "unused_param",
                "uVar1": "shifted_input2",
                "uVar2": "result_low",
                "uVar4": "result2",
                "uVar5": "high_bits",
                "uVar6": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800729c": {
            "called": [],
            "calling": [
                "FUN_080071c0"
            ],
            "code": "\nvoid FUNC_0800729c(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_0800729c",
            "entrypoint": "0x0800729c",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_0800729c": "FUNC_0800729c"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_080072ac": {
            "additional_data": {
                "DAT_200001c0": {
                    "1": "data_offset",
                    "12": "data",
                    "2": "result",
                    "3": "data_value"
                },
                "FUN_080072ac": {
                    "1": "get_dat_value",
                    "10": "get_data_value",
                    "14": "get_data",
                    "2": "get_global_variable"
                }
            },
            "called": [],
            "calling": [
                "FUN_08005bc8",
                "FUN_08005900",
                "FUN_08005854"
            ],
            "code": "\nundefined4 get_data_080072ac(void)\n\n{\n  return DAT_200001c0;\n}\n\n",
            "current_name": "get_data_080072ac",
            "entrypoint": "0x080072ac",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080072ac": "get_data_080072ac"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080072b8": {
            "additional_data": {
                "DAT_200002b4": {
                    "1": "current_offset",
                    "11": "data_pointer",
                    "2": "current_value",
                    "4": "pointer",
                    "5": "current_pointer"
                },
                "DAT_200016a0": {
                    "1": "initial_data_pointer",
                    "2": "default_data_pointer",
                    "3": "default_pointer",
                    "5": "default_data"
                },
                "FUN_080072b8": {
                    "1": "add_offset_and_update",
                    "2": "increment_value",
                    "3": "add_offset_to_pointer",
                    "4": "update_data",
                    "5": "update_pointer"
                },
                "param_1": {
                    "1": "param",
                    "2": "increment",
                    "3": "increment_value",
                    "4": "value",
                    "9": "amount"
                }
            },
            "called": [],
            "calling": [
                "FUN_0800581c"
            ],
            "code": "\nvoid update_pointer_080072b8(int amount)\n\n{\n  if (DAT_200002b4 == (undefined *)0x0) {\n    DAT_200002b4 = &DAT_200016a0;\n  }\n  DAT_200002b4 = DAT_200002b4 + amount;\n  return;\n}\n\n",
            "current_name": "update_pointer_080072b8",
            "entrypoint": "0x080072b8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080072b8": "update_pointer_080072b8",
                "param_1": "amount"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080072d4": {
            "called": [],
            "calling": [
                "FUN_08000110",
                "FUN_08004fb4",
                "FUN_08000134"
            ],
            "code": "\nvoid FUNC_080072d4(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_080072d4",
            "entrypoint": "0x080072d4",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_080072d4": "FUNC_080072d4"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_080072e0": {
            "called": [],
            "calling": [],
            "code": "\nvoid FUNC_080072e0(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_080072e0",
            "entrypoint": "0x080072e0",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_080072e0": "FUNC_080072e0"
            },
            "skipped": true,
            "tags": []
        }
    },
    "layers": [
        [
            "FUN_08000110",
            "FUN_08000134",
            "FUN_08000150",
            "FUN_08000168",
            "FUN_0800016c",
            "FUN_08000404",
            "FUN_08000428",
            "FUN_080006ac",
            "FUN_08000892",
            "FUN_08000904",
            "FUN_08000980",
            "FUN_08000990",
            "FUN_080009a0",
            "FUN_080009b4",
            "FUN_080009c8",
            "FUN_080009f0",
            "FUN_08000a04",
            "FUN_08000a30",
            "FUN_08000ad8",
            "FUN_08000adc",
            "FUN_08000c3c",
            "FUN_08000c44",
            "FUN_08000cec",
            "FUN_08000e54",
            "FUN_08000f9c",
            "FUN_08000ffc",
            "FUN_08001004",
            "FUN_08001014",
            "FUN_08001028",
            "FUN_08001050",
            "FUN_08001064",
            "FUN_08001078",
            "FUN_080010c4",
            "FUN_08001104",
            "FUN_08001128",
            "FUN_0800114c",
            "FUN_0800115c",
            "FUN_08001170",
            "FUN_08001194",
            "FUN_080011fc",
            "FUN_08001214",
            "FUN_08001240",
            "FUN_08001264",
            "FUN_08001424",
            "FUN_0800142e",
            "FUN_08001436",
            "FUN_08001460",
            "FUN_080014e2",
            "FUN_08001530",
            "FUN_080015e8",
            "FUN_080016f4",
            "FUN_08001754",
            "FUN_08001828",
            "FUN_08001938",
            "FUN_08001b58",
            "FUN_08002008",
            "FUN_0800209c",
            "FUN_08002214",
            "FUN_08002220",
            "FUN_08002250",
            "FUN_08002280",
            "FUN_080022d0",
            "FUN_08002324",
            "FUN_08002368",
            "FUN_080023d0",
            "FUN_08002404",
            "FUN_0800245c",
            "FUN_08002520",
            "FUN_08002538",
            "FUN_08002564",
            "FUN_080025a4",
            "FUN_080025e8",
            "FUN_08002724",
            "FUN_0800290c",
            "FUN_0800299a",
            "FUN_08002ad0",
            "FUN_08002b48",
            "FUN_08002bf0",
            "FUN_08002cb0",
            "FUN_08002d88",
            "FUN_08002ea0",
            "FUN_08002ec0",
            "FUN_08002ed4",
            "FUN_08002ee8",
            "FUN_08002f28",
            "FUN_08003034",
            "FUN_08003068",
            "FUN_08003298",
            "FUN_08003314",
            "FUN_08003320",
            "FUN_08003330",
            "FUN_08003eb0",
            "FUN_08003ec8",
            "FUN_08003f3c",
            "FUN_08003fc4",
            "FUN_08003fd0",
            "FUN_08003fdc",
            "FUN_08003fe8",
            "FUN_08003ff4",
            "FUN_08004028",
            "FUN_0800403c",
            "FUN_0800407c",
            "FUN_080040b8",
            "FUN_080040e8",
            "FUN_0800411c",
            "FUN_08004194",
            "FUN_080041ae",
            "FUN_080041c4",
            "FUN_0800426c",
            "FUN_08004300",
            "FUN_08004348",
            "FUN_08004384",
            "FUN_080043bc",
            "FUN_080043f0",
            "FUN_08004410",
            "FUN_08004434",
            "FUN_08004458",
            "FUN_08004490",
            "FUN_08004514",
            "FUN_0800458c",
            "FUN_0800483c",
            "FUN_08004a30",
            "FUN_08004a84",
            "FUN_08004c18",
            "FUN_08004c30",
            "FUN_08004c64",
            "FUN_08004c70",
            "FUN_08004c8c",
            "FUN_08004cac",
            "FUN_08004ccc",
            "FUN_08004d48",
            "FUN_08004d8c",
            "FUN_08004e14",
            "FUN_08004e7c",
            "FUN_08004f10",
            "FUN_08004f68",
            "FUN_08004fb4",
            "FUN_08004ffc",
            "FUN_08005044",
            "FUN_080050fc",
            "FUN_080052e4",
            "FUN_080053d4",
            "FUN_08005614",
            "FUN_08005630",
            "FUN_08005646",
            "FUN_0800567c",
            "FUN_08005714",
            "FUN_080057d0",
            "FUN_0800581c",
            "FUN_08005840",
            "FUN_08005854",
            "FUN_08005900",
            "FUN_08005bc8",
            "FUN_08005c70",
            "FUN_08006070",
            "FUN_08006228",
            "FUN_08006c0c",
            "FUN_08006d68",
            "FUN_08007092",
            "FUN_0800709e",
            "FUN_080070a4",
            "FUN_080070b0",
            "FUN_080071c0",
            "FUN_080072ac",
            "FUN_080072b8"
        ],
        [
            "FUN_080004d0",
            "FUN_08000724"
        ]
    ],
    "locked_functions": [],
    "used_tokens": 755725
}