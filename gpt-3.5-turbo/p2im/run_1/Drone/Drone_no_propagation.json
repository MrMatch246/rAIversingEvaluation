{
    "functions": {
        "FUN_08000110": {
            "entrypoint": "0x08000110",
            "current_name": "initialize_flag_08000110",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0800011c) */\n\nundefined4 initializeFlag_08000110(undefined4 input)\n\n{\n  if ((char)DAT_20000228 == '\\0') {\n    DAT_20000228._0_1_ = '\\x01';\n  }\n  return input;\n}\n\n",
            "renaming": {
                "FUN_08000110": "initialize_flag_08000110",
                "param_1": "input"
            },
            "calling": [],
            "called": [
                "FUN_080072d4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000134": {
            "entrypoint": "0x08000134",
            "current_name": "concatenate_param_words_08000134",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0800013a) */\n\nundefined8 concatenate_param_words_08000134(undefined4 first_word,undefined4 second_word)\n\n{\n  return CONCAT44(second_word,first_word);\n}\n\n",
            "renaming": {
                "FUN_08000134": "concatenate_param_words_08000134",
                "param_1": "first_word",
                "param_2": "second_word"
            },
            "calling": [
                "FUN_08004fb4"
            ],
            "called": [
                "FUN_080072d4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000150": {
            "entrypoint": "0x08000150",
            "current_name": "get_null_terminated_string_length_08000150",
            "code": "\nchar * get_null_terminated_string_length_08000150(char *input_string)\n\n{\n  char current_character_value;\n  char *next_character;\n  char *current_character;\n  \n  current_character = input_string;\n  do {\n    next_character = current_character + 1;\n    current_character_value = *current_character;\n    current_character = next_character;\n  } while (current_character_value != '\\0');\n  return next_character + (-1 - (int)input_string);\n}\n\n",
            "renaming": {
                "FUN_08000150": "get_null_terminated_string_length_08000150",
                "param_1": "input_string",
                "pcVar3": "current_character",
                "pcVar2": "next_character",
                "cVar1": "current_character_value"
            },
            "calling": [
                "FUN_08004c8c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000168": {
            "entrypoint": "0x08000168",
            "current_name": "reverse_and_improve_08000168",
            "code": "\nulonglong reverseAndImprove_08000168(uint input1,uint input2,uint input3,uint input4)\n\n{\n  int tempVar1;\n  byte tempVar2;\n  uint tempVar3;\n  uint tempVar4;\n  uint tempVar5;\n  uint tempVar6;\n  uint tempVar7;\n  int tempVar8;\n  uint tempVar9;\n  uint tempVar10;\n  uint tempVar11;\n  uint tempVar12;\n  bool tempVar13;\n  bool tempVar14;\n  bool tempVar15;\n  \n  tempVar6 = input4 ^ 0x80000000;\n  tempVar9 = input2 << 1;\n  input4 = input4 << 1;\n  tempVar13 = ((input2 ^ tempVar6) & 0x7fffffff) == 0;\n  tempVar14 = tempVar13 && input1 == input3;\n  if (!tempVar13 || input1 != input3) {\n    tempVar14 = (tempVar9 | input1) == 0;\n  }\n  if (!tempVar14) {\n    tempVar14 = (input4 | input3) == 0;\n  }\n  tempVar8 = (int)tempVar9 >> 0x15;\n  if (!tempVar14) {\n    tempVar14 = tempVar8 == -1;\n  }\n  tempVar1 = (int)input4 >> 0x15;\n  if (!tempVar14) {\n    tempVar14 = tempVar1 == -1;\n  }\n  if (tempVar14) {\n    if (tempVar8 == -1 || tempVar1 == -1) {\n      tempVar9 = tempVar6;\n      tempVar11 = input3;\n      if (tempVar8 == -1) {\n        tempVar9 = input2;\n        tempVar11 = input1;\n      }\n      if (tempVar8 != -1 || tempVar1 != -1) {\n        input3 = tempVar11;\n        tempVar6 = tempVar9;\n      }\n      tempVar14 = (tempVar11 | tempVar9 << 0xc) == 0;\n      if (tempVar14) {\n        tempVar14 = (input3 | tempVar6 << 0xc) == 0;\n      }\n      if (tempVar14) {\n        tempVar14 = tempVar9 == tempVar6;\n      }\n      if (!tempVar14) {\n        tempVar9 = tempVar9 | 0x80000;\n      }\n      return CONCAT44(tempVar9,tempVar11);\n    }\n    if (((input2 ^ tempVar6) & 0x7fffffff) != 0 || input1 != input3) {\n      if ((tempVar9 | input1) == 0) {\n        input1 = input3;\n        input2 = tempVar6;\n      }\n      return CONCAT44(input2,input1);\n    }\n    if (input2 != tempVar6) {\n      return 0;\n    }\n    if (tempVar9 >> 0x15 == 0) {\n      tempVar14 = (input1 & 0x80000000) != 0;\n      tempVar6 = input2 * 2 + (uint)tempVar14;\n      if (CARRY4(input2,input2) || CARRY4(input2 * 2,(uint)tempVar14)) {\n        tempVar6 = tempVar6 | 0x80000000;\n      }\n      return CONCAT44(tempVar6,input1 << 1);\n    }\n    if (tempVar9 < 0xffc00000) {\n      return CONCAT44(input2 + 0x100000,input1);\n    }\n    input2 = input2 & 0x80000000;\nLAB_080003ac:\n    return (ulonglong)(input2 | 0x7ff00000) << 0x20;\n  }\n  tempVar9 = tempVar9 >> 0x15;\n  input4 = input4 >> 0x15;\n  tempVar11 = input4 - tempVar9;\n  tempVar14 = tempVar11 != 0;\n  if (input4 < tempVar9) {\n    tempVar11 = -tempVar11;\n  }\n  tempVar10 = input1;\n  tempVar7 = input2;\n  if (tempVar14 && tempVar9 <= input4) {\n    tempVar9 = tempVar9 + tempVar11;\n    tempVar10 = input3;\n    tempVar7 = tempVar6;\n    input3 = input1;\n    tempVar6 = input2;\n  }\n  if (0x36 < tempVar11) {\n    return CONCAT44(tempVar7,tempVar10);\n  }\n  tempVar4 = tempVar7 & 0xfffff | 0x100000;\n  if ((tempVar7 & 0x80000000) != 0) {\n    tempVar14 = tempVar10 != 0;\n    tempVar10 = -tempVar10;\n    tempVar4 = -tempVar4 - (uint)tempVar14;\n  }\n  tempVar7 = tempVar6 & 0xfffff | 0x100000;\n  if ((tempVar6 & 0x80000000) != 0) {\n    tempVar14 = input3 != 0;\n    input3 = -input3;\n    tempVar7 = -tempVar7 - (uint)tempVar14;\n  }\n  if (tempVar9 == tempVar11) {\n    tempVar7 = tempVar7 ^ 0x100000;\n    if (tempVar9 == 0) {\n      tempVar4 = tempVar4 ^ 0x100000;\n      tempVar9 = 1;\n    }\n    else {\n      tempVar11 = tempVar11 - 1;\n    }\n  }\n  tempVar6 = -tempVar11 + 0x20;\n  if ((int)tempVar11 < 0x21) {\n    tempVar12 = input3 << (tempVar6 & 0xff);\n    input3 = input3 >> (tempVar11 & 0xff);\n    tempVar3 = tempVar10 + input3;\n    tempVar5 = tempVar7 << (tempVar6 & 0xff);\n    tempVar6 = tempVar3 + tempVar5;\n    tempVar4 = tempVar4 + CARRY4(tempVar10,input3) + ((int)tempVar7 >> (tempVar11 & 0xff)) +\n            (uint)CARRY4(tempVar3,tempVar5);\n  }\n  else {\n    tempVar12 = tempVar7 << (-tempVar11 + 0x40 & 0xff);\n    if (input3 != 0) {\n      tempVar12 = tempVar12 | 2;\n    }\n    tempVar7 = (int)tempVar7 >> (tempVar11 - 0x20 & 0xff);\n    tempVar6 = tempVar10 + tempVar7;\n    tempVar4 = tempVar4 + ((int)tempVar7 >> 0x1f) + (uint)CARRY4(tempVar10,tempVar7);\n  }\n  input2 = tempVar4 & 0x80000000;\n  tempVar11 = tempVar4;\n  if ((int)tempVar4 < 0) {\n    tempVar14 = tempVar12 == 0;\n    tempVar12 = -tempVar12;\n    tempVar11 = -tempVar6;\n    tempVar6 = -(uint)!tempVar14 - tempVar6;\n    tempVar11 = -(uint)(tempVar14 <= tempVar11) - tempVar4;\n  }\n  if (0xfffff < tempVar11) {\n    tempVar10 = tempVar9 - 1;\n    if (0x1fffff < tempVar11) {\n      tempVar10 = tempVar11 & 1;\n      tempVar11 = tempVar11 >> 1;\n      tempVar2 = (byte)tempVar6;\n      tempVar6 = (uint)(tempVar10 != 0) << 0x1f | tempVar6 >> 1;\n      tempVar12 = (uint)(tempVar2 & 1) << 0x1f | tempVar12 >> 1;\n      tempVar10 = tempVar9;\n      if (0xffbfffff < tempVar9 * 0x200000) goto LAB_080003ac;\n    }\nLAB_08000278:\n    tempVar14 = 0x7fffffff < tempVar12;\n    if (tempVar12 == 0x80000000) {\n      tempVar14 = (tempVar6 & 1) != 0;\n    }\n    return CONCAT44(tempVar11 + tempVar10 * 0x100000 + (uint)CARRY4(tempVar6,(uint)tempVar14) | input2,\n                    tempVar6 + tempVar14);\n  }\n  tempVar13 = (tempVar12 & 0x80000000) != 0;\n  tempVar12 = tempVar12 << 1;\n  tempVar10 = tempVar6 * 2;\n  tempVar14 = CARRY4(tempVar6,tempVar6);\n  tempVar6 = tempVar6 * 2 + (uint)tempVar13;\n  tempVar11 = tempVar11 * 2 + (uint)(tempVar14 || CARRY4(tempVar10,(uint)tempVar13));\n  tempVar10 = tempVar9 - 2;\n  if ((tempVar11 & 0x100000) != 0) goto LAB_08000278;\n  tempVar7 = tempVar6;\n  tempVar9 = tempVar11;\n  if (tempVar11 == 0) {\n    tempVar7 = 0;\n    tempVar9 = tempVar6;\n  }\n  tempVar8 = LZCOUNT(tempVar9);\n  if (tempVar11 == 0) {\n    tempVar8 = tempVar8 + 0x20;\n  }\n  tempVar11 = tempVar8 - 0xb;\n  tempVar15 = SBORROW4(tempVar11,0x20);\n  tempVar6 = tempVar8 - 0x2b;\n  tempVar14 = (int)tempVar6 < 0;\n  tempVar13 = tempVar6 == 0;\n  if ((int)tempVar11 < 0x20) {\n    tempVar15 = SCARRY4(tempVar6,0xc);\n    tempVar8 = tempVar8 + -0x1f;\n    tempVar14 = tempVar8 < 0;\n    tempVar13 = tempVar8 == 0;\n    tempVar6 = tempVar11;\n    if (!tempVar13 && tempVar14 == tempVar15) {\n      tempVar7 = tempVar9 << (tempVar11 & 0xff);\n      tempVar9 = tempVar9 >> (0xcU - tempVar8 & 0xff);\n      goto LAB_080002f0;\n    }\n  }\n  if (tempVar13 || tempVar14 != tempVar15) {\n    tempVar12 = 0x20 - tempVar6;\n  }\n  tempVar9 = tempVar9 << (tempVar6 & 0xff);\n  if (tempVar13 || tempVar14 != tempVar15) {\n    tempVar9 = tempVar9 | tempVar7 >> (tempVar12 & 0xff);\n  }\n  if (tempVar13 || tempVar14 != tempVar15) {\n    tempVar7 = tempVar7 << (tempVar6 & 0xff);\n  }\nLAB_080002f0:\n  if ((int)tempVar11 <= (int)tempVar10) {\n    return CONCAT44(tempVar9 + (tempVar10 - tempVar11) * 0x100000 | input2,tempVar7);\n  }\n  tempVar6 = ~(tempVar10 - tempVar11);\n  if ((int)tempVar6 < 0x1f) {\n    tempVar8 = tempVar6 - 0x13;\n    if (tempVar8 != 0 && tempVar8 < 0 == SCARRY4(tempVar6 - 0x1f,0xc)) {\n      return CONCAT44(tempVar4,tempVar7 >> (0x20 - (0xcU - tempVar8) & 0xff) | tempVar9 << (0xcU - tempVar8 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    tempVar6 = tempVar6 + 1;\n    return CONCAT44(input2 | tempVar9 >> (tempVar6 & 0xff),\n                    tempVar7 >> (tempVar6 & 0xff) | tempVar9 << (0x20 - tempVar6 & 0xff));\n  }\n  return CONCAT44(tempVar4,tempVar9 >> (tempVar6 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_08000168": "reverse_and_improve_08000168",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "iVar1": "tempVar1",
                "bVar2": "tempVar2",
                "uVar3": "tempVar3",
                "uVar4": "tempVar4",
                "uVar5": "tempVar5",
                "uVar6": "tempVar6",
                "uVar7": "tempVar7",
                "iVar8": "tempVar8",
                "uVar9": "tempVar9",
                "uVar10": "tempVar10",
                "uVar11": "tempVar11",
                "uVar12": "tempVar12",
                "bVar13": "tempVar13",
                "bVar14": "tempVar14",
                "bVar15": "tempVar15"
            },
            "calling": [
                "FUN_08006d68",
                "FUN_08005c70",
                "FUN_080070b0",
                "FUN_08006c0c",
                "FUN_0800411c",
                "FUN_08006228",
                "FUN_08006070"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800016c": {
            "entrypoint": "0x0800016c",
            "current_name": "calculate_product_0800016c",
            "code": "\nulonglong calculate_product_0800016c(uint input_1,uint input_2,uint input_3,uint input_4)\n\n{\n  int shifted1;\n  byte bit;\n  uint temp_1;\n  uint temp_2;\n  uint temp_3;\n  int shifted2;\n  uint shifted_input_2;\n  uint shifted_input_4;\n  uint shifted_result_2;\n  uint shifted_result_4;\n  uint temp_4;\n  uint result_2;\n  bool flag_1;\n  bool flag_2;\n  bool flag_3;\n  \n  shifted_input_2 = input_2 << 1;\n  shifted_result_2 = input_4 << 1;\n  flag_1 = ((input_2 ^ input_4) & 0x7fffffff) == 0;\n  flag_2 = flag_1 && input_1 == input_3;\n  if (!flag_1 || input_1 != input_3) {\n    flag_2 = (shifted_input_2 | input_1) == 0;\n  }\n  if (!flag_2) {\n    flag_2 = (shifted_result_2 | input_3) == 0;\n  }\n  shifted2 = (int)shifted_input_2 >> 0x15;\n  if (!flag_2) {\n    flag_2 = shifted2 == -1;\n  }\n  shifted1 = (int)shifted_result_2 >> 0x15;\n  if (!flag_2) {\n    flag_2 = shifted1 == -1;\n  }\n  if (flag_2) {\n    if (shifted2 == -1 || shifted1 == -1) {\n      shifted_result_2 = input_4;\n      shifted_input_2 = input_3;\n      if (shifted2 == -1) {\n        shifted_result_2 = input_2;\n        shifted_input_2 = input_1;\n      }\n      if (shifted2 != -1 || shifted1 != -1) {\n        input_3 = shifted_input_2;\n        input_4 = shifted_result_2;\n      }\n      flag_2 = (shifted_input_2 | shifted_result_2 << 0xc) == 0;\n      if (flag_2) {\n        flag_2 = (input_3 | input_4 << 0xc) == 0;\n      }\n      if (flag_2) {\n        flag_2 = shifted_result_2 == input_4;\n      }\n      if (!flag_2) {\n        shifted_result_2 = shifted_result_2 | 0x80000;\n      }\n      return CONCAT44(shifted_result_2,shifted_input_2);\n    }\n    if (((input_2 ^ input_4) & 0x7fffffff) != 0 || input_1 != input_3) {\n      if ((shifted_input_2 | input_1) == 0) {\n        input_1 = input_3;\n        input_2 = input_4;\n      }\n      return CONCAT44(input_2,input_1);\n    }\n    if (input_2 != input_4) {\n      return 0;\n    }\n    if (shifted_input_2 >> 0x15 == 0) {\n      flag_2 = (input_1 & 0x80000000) != 0;\n      shifted_result_2 = input_2 * 2 + (uint)flag_2;\n      if (CARRY4(input_2,input_2) || CARRY4(input_2 * 2,(uint)flag_2)) {\n        shifted_result_2 = shifted_result_2 | 0x80000000;\n      }\n      return CONCAT44(shifted_result_2,input_1 << 1);\n    }\n    if (shifted_input_2 < 0xffc00000) {\n      return CONCAT44(input_2 + 0x100000,input_1);\n    }\n    input_2 = input_2 & 0x80000000;\nLAB_080003ac:\n    return (ulonglong)(input_2 | 0x7ff00000) << 0x20;\n  }\n  shifted_input_2 = shifted_input_2 >> 0x15;\n  shifted_result_2 = shifted_result_2 >> 0x15;\n  shifted_result_4 = shifted_result_2 - shifted_input_2;\n  flag_2 = shifted_result_4 != 0;\n  if (shifted_result_2 < shifted_input_2) {\n    shifted_result_4 = -shifted_result_4;\n  }\n  shifted_input_4 = input_1;\n  temp_3 = input_2;\n  if (flag_2 && shifted_input_2 <= shifted_result_2) {\n    shifted_input_2 = shifted_input_2 + shifted_result_4;\n    shifted_input_4 = input_3;\n    temp_3 = input_4;\n    input_3 = input_1;\n    input_4 = input_2;\n  }\n  if (0x36 < shifted_result_4) {\n    return CONCAT44(temp_3,shifted_input_4);\n  }\n  shifted_result_2 = temp_3 & 0xfffff | 0x100000;\n  if ((temp_3 & 0x80000000) != 0) {\n    flag_2 = shifted_input_4 != 0;\n    shifted_input_4 = -shifted_input_4;\n    shifted_result_2 = -shifted_result_2 - (uint)flag_2;\n  }\n  temp_3 = input_4 & 0xfffff | 0x100000;\n  if ((input_4 & 0x80000000) != 0) {\n    flag_2 = input_3 != 0;\n    input_3 = -input_3;\n    temp_3 = -temp_3 - (uint)flag_2;\n  }\n  if (shifted_input_2 == shifted_result_4) {\n    temp_3 = temp_3 ^ 0x100000;\n    if (shifted_input_2 == 0) {\n      shifted_result_2 = shifted_result_2 ^ 0x100000;\n      shifted_input_2 = 1;\n    }\n    else {\n      shifted_result_4 = shifted_result_4 - 1;\n    }\n  }\n  result_2 = -shifted_result_4 + 0x20;\n  if ((int)shifted_result_4 < 0x21) {\n    temp_4 = input_3 << (result_2 & 0xff);\n    input_3 = input_3 >> (shifted_result_4 & 0xff);\n    temp_1 = shifted_input_4 + input_3;\n    temp_2 = temp_3 << (result_2 & 0xff);\n    result_2 = temp_1 + temp_2;\n    shifted_result_2 = shifted_result_2 + CARRY4(shifted_input_4,input_3) + ((int)temp_3 >> (shifted_result_4 & 0xff)) +\n            (uint)CARRY4(temp_1,temp_2);\n  }\n  else {\n    temp_4 = temp_3 << (-shifted_result_4 + 0x40 & 0xff);\n    if (input_3 != 0) {\n      temp_4 = temp_4 | 2;\n    }\n    temp_3 = (int)temp_3 >> (shifted_result_4 - 0x20 & 0xff);\n    result_2 = shifted_input_4 + temp_3;\n    shifted_result_2 = shifted_result_2 + ((int)temp_3 >> 0x1f) + (uint)CARRY4(shifted_input_4,temp_3);\n  }\n  input_2 = shifted_result_2 & 0x80000000;\n  shifted_result_4 = shifted_result_2;\n  if ((int)shifted_result_2 < 0) {\n    flag_2 = temp_4 == 0;\n    temp_4 = -temp_4;\n    shifted_result_4 = -result_2;\n    result_2 = -(uint)!flag_2 - result_2;\n    shifted_result_4 = -(uint)(flag_2 <= shifted_result_4) - shifted_result_2;\n  }\n  if (0xfffff < shifted_result_4) {\n    shifted_input_4 = shifted_input_2 - 1;\n    if (0x1fffff < shifted_result_4) {\n      shifted_result_2 = shifted_result_4 & 1;\n      shifted_result_4 = shifted_result_4 >> 1;\n      bit = (byte)result_2;\n      result_2 = (uint)(shifted_result_2 != 0) << 0x1f | result_2 >> 1;\n      temp_4 = (uint)(bit & 1) << 0x1f | temp_4 >> 1;\n      shifted_input_4 = shifted_input_2;\n      if (0xffbfffff < shifted_input_2 * 0x200000) goto LAB_080003ac;\n    }\nLAB_08000278:\n    flag_2 = 0x7fffffff < temp_4;\n    if (temp_4 == 0x80000000) {\n      flag_2 = (result_2 & 1) != 0;\n    }\n    return CONCAT44(shifted_result_4 + shifted_input_4 * 0x100000 + (uint)CARRY4(result_2,(uint)flag_2) | input_2,\n                    result_2 + flag_2);\n  }\n  flag_1 = (temp_4 & 0x80000000) != 0;\n  temp_4 = temp_4 << 1;\n  shifted_input_4 = result_2 * 2;\n  flag_2 = CARRY4(result_2,result_2);\n  result_2 = result_2 * 2 + (uint)flag_1;\n  shifted_result_4 = shifted_result_4 * 2 + (uint)(flag_2 || CARRY4(shifted_input_4,(uint)flag_1));\n  shifted_input_4 = shifted_input_2 - 2;\n  if ((shifted_result_4 & 0x100000) != 0) goto LAB_08000278;\n  temp_3 = result_2;\n  shifted_input_2 = shifted_result_4;\n  if (shifted_result_4 == 0) {\n    temp_3 = 0;\n    shifted_input_2 = result_2;\n  }\n  shifted2 = LZCOUNT(shifted_input_2);\n  if (shifted_result_4 == 0) {\n    shifted2 = shifted2 + 0x20;\n  }\n  result_2 = shifted2 - 0xb;\n  flag_3 = SBORROW4(result_2,0x20);\n  shifted_result_4 = shifted2 - 0x2b;\n  flag_2 = (int)shifted_result_4 < 0;\n  flag_1 = shifted_result_4 == 0;\n  if ((int)result_2 < 0x20) {\n    flag_3 = SCARRY4(shifted_result_4,0xc);\n    shifted2 = shifted2 + -0x1f;\n    flag_2 = shifted2 < 0;\n    flag_1 = shifted2 == 0;\n    shifted_result_4 = result_2;\n    if (!flag_1 && flag_2 == flag_3) {\n      temp_3 = shifted_input_2 << (result_2 & 0xff);\n      shifted_input_2 = shifted_input_2 >> (0xcU - shifted2 & 0xff);\n      goto LAB_080002f0;\n    }\n  }\n  if (flag_1 || flag_2 != flag_3) {\n    temp_4 = 0x20 - shifted_result_4;\n  }\n  shifted_input_2 = shifted_input_2 << (shifted_result_4 & 0xff);\n  if (flag_1 || flag_2 != flag_3) {\n    shifted_input_2 = shifted_input_2 | temp_3 >> (temp_4 & 0xff);\n  }\n  if (flag_1 || flag_2 != flag_3) {\n    temp_3 = temp_3 << (shifted_result_4 & 0xff);\n  }\nLAB_080002f0:\n  if ((int)result_2 <= (int)shifted_input_4) {\n    return CONCAT44(shifted_input_2 + (shifted_input_4 - result_2) * 0x100000 | input_2,temp_3);\n  }\n  shifted_result_4 = ~(shifted_input_4 - result_2);\n  if ((int)shifted_result_4 < 0x1f) {\n    shifted2 = shifted_result_4 - 0x13;\n    if (shifted2 != 0 && shifted2 < 0 == SCARRY4(shifted_result_4 - 0x1f,0xc)) {\n      return CONCAT44(shifted_result_2,temp_3 >> (0x20 - (0xcU - shifted2) & 0xff) | shifted_input_2 << (0xcU - shifted2 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    shifted_result_4 = shifted_result_4 + 1;\n    return CONCAT44(input_2 | shifted_input_2 >> (shifted_result_4 & 0xff),\n                    temp_3 >> (shifted_result_4 & 0xff) | shifted_input_2 << (0x20 - shifted_result_4 & 0xff));\n  }\n  return CONCAT44(shifted_result_2,shifted_input_2 >> (shifted_result_4 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_0800016c": "calculate_product_0800016c",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "iVar1": "shifted1",
                "bVar2": "bit",
                "uVar3": "temp_1",
                "uVar4": "temp_2",
                "uVar5": "temp_3",
                "iVar6": "shifted2",
                "uVar7": "shifted_input_2",
                "uVar8": "shifted_input_4",
                "uVar9": "shifted_result_2",
                "uVar10": "shifted_result_4",
                "uVar11": "temp_4",
                "uVar12": "result_2",
                "bVar13": "flag_1",
                "bVar14": "flag_2",
                "bVar15": "flag_3"
            },
            "calling": [
                "FUN_080071c0",
                "FUN_08006d68",
                "FUN_08005c70",
                "FUN_080070b0",
                "FUN_08006c0c",
                "FUN_08006228",
                "FUN_08006070"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000404": {
            "entrypoint": "0x08000404",
            "current_name": "shift_and_concatenate_08000404",
            "code": "\nulonglong shift_and_concatenate_08000404(uint input)\n\n{\n  uint shifted_value1;\n  uint shifted_value2;\n  uint shifted_value3;\n  int leading_zeros;\n  uint shift_amount;\n  uint sign_bit;\n  uint output_high;\n  bool shift_condition1;\n  bool shift_condition2;\n  bool shift_condition3;\n  \n  if (input == 0) {\n    return 0;\n  }\n  sign_bit = input & 0x80000000;\n  shifted_value2 = input;\n  if ((int)sign_bit < 0) {\n    shifted_value2 = -input;\n  }\n  shifted_value1 = 0;\n  leading_zeros = LZCOUNT(shifted_value2);\n  shift_amount = leading_zeros + 0x15;\n  shift_condition3 = SBORROW4(shift_amount,0x20);\n  shifted_value3 = leading_zeros - 0xb;\n  shift_condition1 = (int)shifted_value3 < 0;\n  shift_condition2 = shifted_value3 == 0;\n  if (shift_amount < 0x20) {\n    shift_condition3 = SCARRY4(shifted_value3,0xc);\n    shift_condition1 = false;\n    shift_condition2 = leading_zeros + 1 == 0;\n    shifted_value3 = shift_amount;\n    if (!shift_condition2 && shift_condition3 == false) {\n      shifted_value1 = shifted_value2 << shift_amount;\n      shifted_value2 = shifted_value2 >> (0xcU - (leading_zeros + 1) & 0xff);\n      goto LAB_080002f0;\n    }\n  }\n  if (shift_condition2 || shift_condition1 != shift_condition3) {\n    output_high = 0x20 - shifted_value3;\n  }\n  shifted_value2 = shifted_value2 << (shifted_value3 & 0xff);\n  if (shift_condition2 || shift_condition1 != shift_condition3) {\n    shifted_value2 = shifted_value2 | 0U >> (output_high & 0xff);\n  }\n  if (shift_condition2 || shift_condition1 != shift_condition3) {\n    shifted_value1 = 0 << (shifted_value3 & 0xff);\n  }\nLAB_080002f0:\n  if (shift_amount < 0x433) {\n    return CONCAT44(shifted_value2 + (0x432 - shift_amount) * 0x100000 | sign_bit,shifted_value1);\n  }\n  shifted_value3 = ~(0x432 - shift_amount);\n  if (0x1e < (int)shifted_value3) {\n    return CONCAT44(input,shifted_value2 >> (shifted_value3 - 0x1f & 0xff)) & 0x80000000ffffffff;\n  }\n  leading_zeros = shifted_value3 - 0x13;\n  if (leading_zeros == 0 || leading_zeros < 0 != SCARRY4(shifted_value3 - 0x1f,0xc)) {\n    shifted_value3 = shifted_value3 + 1;\n    return CONCAT44(sign_bit | shifted_value2 >> (shifted_value3 & 0xff),\n                    shifted_value1 >> (shifted_value3 & 0xff) | shifted_value2 << (0x20 - shifted_value3 & 0xff));\n  }\n  return CONCAT44(input,shifted_value1 >> (0x20 - (0xcU - leading_zeros) & 0xff) | shifted_value2 << (0xcU - leading_zeros & 0xff))\n         & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_08000404": "shift_and_concatenate_08000404",
                "param_1": "input",
                "uVar1": "shifted_value1",
                "uVar2": "shifted_value2",
                "uVar3": "shifted_value3",
                "iVar4": "leading_zeros",
                "uVar5": "shift_amount",
                "uVar6": "sign_bit",
                "in_r12": "output_high",
                "bVar7": "shift_condition1",
                "bVar8": "shift_condition2",
                "bVar9": "shift_condition3"
            },
            "calling": [
                "FUN_08006228"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000428": {
            "entrypoint": "0x08000428",
            "current_name": "bitwise_operation_08000428",
            "code": "\nulonglong bitwiseOperation_08000428(uint input,undefined4 value1,undefined4 value2,uint mask)\n\n{\n  uint bit31;\n  uint temp;\n  uint result;\n  uint shiftedInput;\n  uint tempInput;\n  int shiftCount;\n  uint var7;\n  uint tempResult;\n  bool isZero;\n  bool isFF000000;\n  bool carryFlag;\n  \n  tempInput = input << 1;\n  isFF000000 = tempInput == 0;\n  bit31 = (uint)((input & 0x80000000) != 0) << 0x1f;\n  shiftedInput = (uint)((int)tempInput >> 3) >> 1;\n  result = bit31 | shiftedInput;\n  input = input << 0x1d;\n  if (!isFF000000) {\n    mask = tempInput & 0xff000000;\n    isFF000000 = mask == 0;\n  }\n  if (!isFF000000) {\n    isFF000000 = mask == 0xff000000;\n  }\n  if (!isFF000000) {\n    return CONCAT44(result,input) ^ 0x3800000000000000;\n  }\n  if (tempInput == 0 || mask == 0xff000000) {\n    return CONCAT44(result,input);\n  }\n  temp = input;\n  tempInput = shiftedInput;\n  if (shiftedInput == 0) {\n    temp = 0;\n    tempInput = input;\n  }\n  shiftCount = LZCOUNT(tempInput);\n  if (shiftedInput == 0) {\n    shiftCount = shiftCount + 0x20;\n  }\n  var7 = shiftCount - 0xb;\n  carryFlag = SBORROW4(var7,0x20);\n  shiftedInput = shiftCount - 0x2b;\n  isFF000000 = (int)shiftedInput < 0;\n  isZero = shiftedInput == 0;\n  if ((int)var7 < 0x20) {\n    carryFlag = SCARRY4(shiftedInput,0xc);\n    shiftCount = shiftCount + -0x1f;\n    isFF000000 = shiftCount < 0;\n    isZero = shiftCount == 0;\n    shiftedInput = var7;\n    if (!isZero && isFF000000 == carryFlag) {\n      temp = tempInput << (var7 & 0xff);\n      tempInput = tempInput >> (0xcU - shiftCount & 0xff);\n      goto LAB_080002f0;\n    }\n  }\n  if (isZero || isFF000000 != carryFlag) {\n    tempResult = 0x20 - shiftedInput;\n  }\n  tempInput = tempInput << (shiftedInput & 0xff);\n  if (isZero || isFF000000 != carryFlag) {\n    tempInput = tempInput | temp >> (tempResult & 0xff);\n  }\n  if (isZero || isFF000000 != carryFlag) {\n    temp = temp << (shiftedInput & 0xff);\n  }\nLAB_080002f0:\n  if ((int)var7 < 0x381) {\n    return CONCAT44(tempInput + (0x380 - var7) * 0x100000 | bit31,temp);\n  }\n  shiftedInput = ~(0x380 - var7);\n  if ((int)shiftedInput < 0x1f) {\n    shiftCount = shiftedInput - 0x13;\n    if (shiftCount != 0 && shiftCount < 0 == SCARRY4(shiftedInput - 0x1f,0xc)) {\n      return CONCAT44(result,temp >> (0x20 - (0xcU - shiftCount) & 0xff) | tempInput << (0xcU - shiftCount & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    shiftedInput = shiftedInput + 1;\n    return CONCAT44(bit31 | tempInput >> (shiftedInput & 0xff),\n                    temp >> (shiftedInput & 0xff) | tempInput << (0x20 - shiftedInput & 0xff));\n  }\n  return CONCAT44(result,tempInput >> (shiftedInput - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_08000428": "bitwise_operation_08000428",
                "param_1": "input",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "mask",
                "uVar1": "bit31",
                "uVar2": "temp",
                "uVar3": "result",
                "uVar4": "shiftedInput",
                "uVar5": "tempInput",
                "iVar6": "shiftCount",
                "uVar7": "var7",
                "in_r12": "tempResult",
                "bVar8": "isZero",
                "bVar9": "isFF000000",
                "bVar10": "carryFlag"
            },
            "calling": [
                "FUN_0800411c",
                "FUN_08003330"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080004d0": {
            "entrypoint": "0x080004d0",
            "current_name": "perform_calculation_080004d0",
            "code": "\nulonglong performCalculation_080004d0(undefined4 input1,uint input2,uint input3,uint input4)\n\n{\n  ulonglong result1;\n  longlong result2;\n  uint temp1;\n  uint temp2;\n  int temp3;\n  uint temp4;\n  uint temp5;\n  uint temp6;\n  uint temp7;\n  bool flag1;\n  bool flag2;\n  bool flag3;\n  ulonglong combinedInputs;\n  \n  combinedInputs = CONCAT44(input2,input1);\n  temp6 = 0x7ff;\n  temp2 = input2 >> 0x14 & 0x7ff;\n  flag1 = temp2 == 0;\n  if (!flag1) {\n    temp5 = input4 >> 0x14 & 0x7ff;\n    flag1 = temp5 == 0;\n  }\n  if (!flag1) {\n    flag1 = temp2 == 0x7ff;\n  }\n  if (!flag1) {\n    flag1 = temp5 == 0x7ff;\n  }\n  if (flag1) {\n    combinedInputs = FUN_080006ac();\n  }\n  temp1 = (uint)(combinedInputs >> 0x20);\n  temp3 = temp2 + temp5;\n  temp2 = temp1 ^ input4;\n  temp1 = temp1 & ~(temp6 << 0x15);\n  input4 = input4 & ~(temp6 << 0x15);\n  flag1 = ((uint)combinedInputs | temp1 << 0xc) == 0;\n  if (!flag1) {\n    flag1 = (input3 | input4 << 0xc) == 0;\n  }\n  temp1 = temp1 | 0x100000;\n  input4 = input4 | 0x100000;\n  if (flag1) {\n    input3 = (uint)combinedInputs | input3;\n    input4 = (temp2 & 0x80000000 | temp1) ^ input4;\n    temp2 = temp6 >> 1;\n    flag3 = SBORROW4(temp3,temp2);\n    temp4 = temp3 - temp2;\n    flag1 = temp4 == 0;\n    temp1 = temp4;\n    if (!flag1 && (int)temp2 <= temp3) {\n      flag3 = SBORROW4(temp6,temp4);\n      temp1 = temp6 - temp4;\n      flag1 = temp6 == temp4;\n    }\n    if (!flag1 && (int)temp1 < 0 == flag3) {\n      input4 = input4 | temp4 * 0x100000;\n    }\n    if (!flag1 && (int)temp1 < 0 == flag3) {\n      return CONCAT44(input4,input3);\n    }\n    input4 = input4 | 0x100000;\n    temp6 = 0;\n    flag3 = SBORROW4(temp4,1);\n    temp4 = temp4 - 1;\n    flag1 = temp4 == 0;\n    temp2 = temp4;\n  }\n  else {\n    result1 = (combinedInputs & 0xffffffff) * (ulonglong)input3;\n    combinedInputs = (combinedInputs & 0xffffffff) * (ulonglong)input4 +\n             (ulonglong)temp1 * (ulonglong)input3 + (result1 >> 0x20);\n    temp7 = (uint)combinedInputs;\n    result2 = (ulonglong)temp1 * (ulonglong)input4 + (combinedInputs >> 0x20);\n    temp6 = (uint)result2;\n    temp1 = (uint)((ulonglong)result2 >> 0x20);\n    if ((int)result1 != 0) {\n      temp7 = temp7 | 1;\n    }\n    temp4 = (temp3 + -0x3ff) - (uint)(temp1 < 0x200);\n    if (temp1 < 0x200) {\n      flag1 = (temp7 & 0x80000000) != 0;\n      temp7 = temp7 << 1;\n      result2 = CONCAT44(temp1 * 2 + (uint)(CARRY4(temp6,temp6) || CARRY4(temp6 * 2,(uint)flag1)),\n                       temp6 * 2 + (uint)flag1);\n    }\n    input4 = temp2 & 0x80000000 | (int)((ulonglong)result2 >> 0x20) << 0xb | (uint)result2 >> 0x15;\n    input3 = (uint)result2 << 0xb | temp7 >> 0x15;\n    temp6 = temp7 * 0x800;\n    flag2 = 0xfc < temp4;\n    flag3 = SBORROW4(temp4,0xfd);\n    temp1 = temp4 - 0xfd;\n    flag1 = temp1 == 0;\n    temp2 = temp1;\n    if (flag2 && !flag1) {\n      flag2 = 0x6ff < temp1;\n      flag3 = SBORROW4(temp1,0x700);\n      temp2 = temp4 - 0x7fd;\n      flag1 = temp1 == 0x700;\n    }\n    if (!flag2 || flag1) {\n      flag1 = 0x7fffffff < temp6;\n      if (temp6 == 0x80000000) {\n        flag1 = (temp7 >> 0x15 & 1) != 0;\n      }\n      return CONCAT44(input4 + temp4 * 0x100000 + (uint)CARRY4(input3,(uint)flag1),input3 + flag1\n                     );\n    }\n  }\n  if (!flag1 && (int)temp2 < 0 == flag3) {\n    return (ulonglong)(input4 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  flag2 = SCARRY4(temp4,0x36);\n  flag1 = (int)(temp4 + 0x36) < 0;\n  flag3 = temp4 == 0xffffffca;\n  if (flag3 || flag1 != flag2) {\n    input3 = 0;\n  }\n  if (flag3 || flag1 != flag2) {\n    input4 = input4 & 0x80000000;\n  }\n  if (flag3 || flag1 != flag2) {\n    return CONCAT44(input4,input3);\n  }\n  temp2 = -temp4;\n  temp1 = temp2 - 0x20;\n  if (0x1f < (int)temp2) {\n    temp4 = input3 >> (temp1 & 0xff) | input4 << (0x20 - temp1 & 0xff);\n    temp2 = (input4 >> (temp1 & 0xff) & ~((input4 & 0x80000000) >> (temp1 & 0xff))) -\n            ((int)temp4 >> 0x1f);\n    if ((temp6 | input3 << (0x20 - temp1 & 0xff) | temp4 << 1) == 0) {\n      temp2 = temp2 & ~(temp4 >> 0x1f);\n    }\n    return CONCAT44(input4,temp2) & 0x80000000ffffffff;\n  }\n  temp3 = temp2 - 0x14;\n  if (temp3 == 0 || temp3 < 0 != SCARRY4(temp1,0xc)) {\n    temp7 = input3 << (temp4 + 0x20 & 0xff);\n    temp1 = input3 >> (temp2 & 0xff) | input4 << (temp4 + 0x20 & 0xff);\n    temp4 = temp1 + -((int)temp7 >> 0x1f);\n    if ((temp6 | temp7 << 1) == 0) {\n      temp4 = temp4 & ~(temp7 >> 0x1f);\n    }\n    return CONCAT44((input4 & 0x80000000) +\n                    ((input4 & 0x7fffffff) >> (temp2 & 0xff)) +\n                    (uint)CARRY4(temp1,-((int)temp7 >> 0x1f)),temp4);\n  }\n  temp2 = 0xc - temp3;\n  temp4 = input3 << (temp2 & 0xff);\n  temp2 = input3 >> (0x20 - temp2 & 0xff) | input4 << (temp2 & 0xff);\n  temp1 = temp2 + -((int)temp4 >> 0x1f);\n  if ((temp6 | temp4 << 1) == 0) {\n    temp1 = temp1 & ~(temp4 >> 0x1f);\n  }\n  return CONCAT44((input4 & 0x80000000) + (uint)CARRY4(temp2,-((int)temp4 >> 0x1f)),temp1);\n}\n\n",
            "renaming": {
                "FUN_080004d0": "perform_calculation_080004d0",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "result1",
                "lVar2": "result2",
                "uVar3": "temp1",
                "uVar4": "temp2",
                "iVar5": "temp3",
                "uVar6": "temp4",
                "unaff_r5": "temp5",
                "uVar7": "temp6",
                "uVar8": "temp7",
                "bVar9": "flag1",
                "bVar10": "flag2",
                "bVar11": "flag3",
                "uVar12": "combinedInputs"
            },
            "calling": [
                "FUN_080071c0",
                "FUN_08006d68",
                "FUN_08005c70",
                "FUN_08005900",
                "FUN_08006c0c",
                "FUN_0800411c",
                "FUN_08006228",
                "FUN_08003330"
            ],
            "called": [
                "FUN_080006ac"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080006ac": {
            "entrypoint": "0x080006ac",
            "current_name": "calculate_bitwise_result_080006ac",
            "code": "\nulonglong calculate_bitwise_result_080006ac(uint input1,uint input2,uint input3,uint input4)\n\n{\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  uint temp4;\n  uint mask;\n  bool isZero;\n  \n  temp3 = mask & input4 >> 0x14;\n  if (temp2 != mask && temp3 != mask) {\n    isZero = (input1 | input2 << 1) == 0;\n    if (!isZero) {\n      isZero = (input3 | input4 << 1) == 0;\n    }\n    if (isZero) {\n      return (ulonglong)((input2 ^ input4) & 0x80000000) << 0x20;\n    }\n    if (temp2 == 0) {\n      temp4 = input2 & 0x80000000;\n      do {\n        temp1 = input1 & 0x80000000;\n        input1 = input1 << 1;\n        input2 = input2 * 2 + (uint)(temp1 != 0);\n      } while ((input2 & 0x100000) == 0);\n      input2 = input2 | temp4;\n      if (temp3 != 0) {\n        return CONCAT44(input2,input1);\n      }\n    }\n    do {\n      temp3 = input3 & 0x80000000;\n      input3 = input3 << 1;\n      input4 = input4 * 2 + (uint)(temp3 != 0);\n    } while ((input4 & 0x100000) == 0);\n    return CONCAT44(input2,input1);\n  }\n  isZero = (input1 | input2 << 1) == 0;\n  if (isZero) {\n    input2 = input4;\n    input1 = input3;\n  }\n  if (!isZero) {\n    isZero = (input3 | input4 << 1) == 0;\n  }\n  temp4 = input2;\n  if (((!isZero) && ((temp2 != mask || ((input1 | input2 << 0xc) == 0)))) &&\n     ((temp3 != mask || (input1 = input3, temp4 = input4, (input3 | input4 << 0xc) == 0)))) {\n    return (ulonglong)((input2 ^ input4) & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  return CONCAT44(temp4,input1) | 0x7ff8000000000000;\n}\n\n",
            "renaming": {
                "FUN_080006ac": "calculate_bitwise_result_080006ac",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "temp1",
                "unaff_r4": "temp2",
                "uVar2": "temp3",
                "uVar3": "temp4",
                "in_r12": "mask",
                "bVar4": "isZero"
            },
            "calling": [
                "FUN_080004d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000724": {
            "entrypoint": "0x08000724",
            "current_name": "calculate_floating_point_08000724",
            "code": "\nulonglong calculateFloatingPoint_08000724(undefined4 flags,uint lo,uint hi,uint val)\n\n{\n  uint loBits1;\n  uint loBits2;\n  uint hiBits1;\n  uint hiBits2;\n  uint uVar5;\n  uint uVar6;\n  uint uVar7;\n  int difference;\n  uint exponent1;\n  uint exponent2;\n  uint shiftedLo1;\n  uint shiftedLo2;\n  uint shiftedHi;\n  uint carryFlag;\n  bool cond1;\n  bool cond2;\n  bool carry;\n  undefined8 result;\n  \n  result = CONCAT44(lo,flags);\n  carryFlag = 0x7ff;\n  uVar7 = lo >> 0x14 & 0x7ff;\n  cond1 = uVar7 == 0;\n  if (!cond1) {\n    exponent2 = val >> 0x14 & 0x7ff;\n    cond1 = exponent2 == 0;\n  }\n  if (!cond1) {\n    cond1 = uVar7 == 0x7ff;\n  }\n  if (!cond1) {\n    cond1 = exponent2 == 0x7ff;\n  }\n  if (cond1) {\n    result = FUN_08000892();\n  }\n  exponent1 = (uint)((ulonglong)result >> 0x20);\n  shiftedLo2 = (uint)result;\n  difference = uVar7 - exponent2;\n  if ((hi | val << 0xc) == 0) {\n    uVar7 = (exponent1 ^ val) & 0x80000000 | exponent1 & 0xfffff;\n    carry = SCARRY4(difference,carryFlag >> 1);\n    exponent1 = difference + (carryFlag >> 1);\n    cond1 = (int)exponent1 < 0;\n    cond2 = exponent1 == 0;\n    if (!cond2 && cond1 == carry) {\n      carry = SBORROW4(carryFlag,exponent1);\n      cond1 = (int)(carryFlag - exponent1) < 0;\n      cond2 = carryFlag == exponent1;\n    }\n    if (!cond2 && cond1 == carry) {\n      uVar7 = uVar7 | exponent1 * 0x100000;\n    }\n    if (!cond2 && cond1 == carry) {\n      return CONCAT44(uVar7,shiftedLo2);\n    }\n    uVar7 = uVar7 | 0x100000;\n    carryFlag = 0;\n    cond2 = SBORROW4(exponent1,1);\n    exponent1 = exponent1 - 1;\n    cond1 = exponent1 == 0;\n    hiBits1 = exponent1;\n  }\n  else {\n    hiBits1 = (val << 0xc) >> 4 | 0x10000000 | hi >> 0x18;\n    carryFlag = hi << 8;\n    shiftedLo1 = (exponent1 << 0xc) >> 4 | 0x10000000 | shiftedLo2 >> 0x18;\n    shiftedLo2 = shiftedLo2 * 0x100;\n    uVar7 = (exponent1 ^ val) & 0x80000000;\n    cond1 = hiBits1 <= shiftedLo1;\n    if (shiftedLo1 == hiBits1) {\n      cond1 = carryFlag <= shiftedLo2;\n    }\n    difference = difference + (uint)cond1;\n    exponent1 = difference + 0x3fd;\n    if (cond1 == false) {\n      hiBits1 = hiBits1 >> 1;\n      carryFlag = (uint)((hi >> 0x18 & 1) != 0) << 0x1f | carryFlag >> 1;\n    }\n    shiftedHi = shiftedLo2 - carryFlag;\n    shiftedLo1 = (shiftedLo1 - hiBits1) - (uint)(shiftedLo2 < carryFlag);\n    hiBits2 = hiBits1 >> 1;\n    loBits1 = (uint)((hiBits1 & 1) != 0) << 0x1f | carryFlag >> 1;\n    shiftedLo2 = 0x100000;\n    hiBits1 = 0x80000;\n    while( true ) {\n      cond1 = loBits1 <= shiftedHi;\n      if (hiBits2 < shiftedLo1 || shiftedLo1 - hiBits2 < (uint)cond1) {\n        shiftedHi = shiftedHi - loBits1;\n        shiftedLo2 = shiftedLo2 | hiBits1;\n        shiftedLo1 = (shiftedLo1 - hiBits2) - (uint)!cond1;\n      }\n      uVar5 = hiBits2 >> 1;\n      loBits1 = (uint)((hiBits2 & 1) != 0) << 0x1f | loBits1 >> 1;\n      cond2 = loBits1 <= shiftedHi;\n      cond1 = shiftedLo1 - uVar5 < (uint)cond2;\n      carryFlag = shiftedLo1;\n      if (uVar5 < shiftedLo1 || cond1) {\n        shiftedHi = shiftedHi - loBits1;\n        carryFlag = (shiftedLo1 - uVar5) - (uint)!cond2;\n      }\n      if (uVar5 < shiftedLo1 || cond1) {\n        shiftedLo2 = shiftedLo2 | hiBits1 >> 1;\n      }\n      shiftedLo1 = hiBits2 >> 2;\n      loBits2 = (uint)((uVar5 & 1) != 0) << 0x1f | loBits1 >> 1;\n      cond2 = loBits2 <= shiftedHi;\n      cond1 = carryFlag - shiftedLo1 < (uint)cond2;\n      uVar5 = carryFlag;\n      if (shiftedLo1 < carryFlag || cond1) {\n        shiftedHi = shiftedHi - loBits2;\n        uVar5 = (carryFlag - shiftedLo1) - (uint)!cond2;\n      }\n      if (shiftedLo1 < carryFlag || cond1) {\n        shiftedLo2 = shiftedLo2 | hiBits1 >> 2;\n      }\n      uVar6 = hiBits2 >> 3;\n      loBits1 = (uint)((shiftedLo1 & 1) != 0) << 0x1f | loBits2 >> 1;\n      cond2 = loBits1 <= shiftedHi;\n      cond1 = uVar5 - uVar6 < (uint)cond2;\n      shiftedLo1 = uVar5;\n      if (uVar6 < uVar5 || cond1) {\n        shiftedHi = shiftedHi - loBits1;\n        shiftedLo1 = (uVar5 - uVar6) - (uint)!cond2;\n      }\n      if (uVar6 < uVar5 || cond1) {\n        shiftedLo2 = shiftedLo2 | hiBits1 >> 3;\n      }\n      carryFlag = shiftedLo1 | shiftedHi;\n      if (carryFlag == 0) break;\n      shiftedLo1 = shiftedLo1 << 4 | shiftedHi >> 0x1c;\n      shiftedHi = shiftedHi << 4;\n      hiBits2 = hiBits2 & 0xfffffff8 | loBits1 >> 0x1d;\n      loBits1 = (loBits2 >> 1) << 3;\n      hiBits1 = hiBits1 >> 4;\n      if (hiBits1 == 0) {\n        uVar6 = hiBits2;\n        if ((uVar7 & 0x100000) != 0) goto LAB_08000842;\n        uVar7 = uVar7 | shiftedLo2;\n        shiftedLo2 = 0;\n        hiBits1 = 0x80000000;\n      }\n    }\n    if ((uVar7 & 0x100000) == 0) {\n      uVar7 = uVar7 | shiftedLo2;\n      shiftedLo2 = 0;\n    }\nLAB_08000842:\n    carry = 0xfc < exponent1;\n    cond2 = SBORROW4(exponent1,0xfd);\n    hiBits2 = difference + 0x300;\n    cond1 = hiBits2 == 0;\n    hiBits1 = hiBits2;\n    if (carry && !cond1) {\n      carry = 0x6ff < hiBits2;\n      cond2 = SBORROW4(hiBits2,0x700);\n      hiBits1 = difference - 0x400;\n      cond1 = hiBits2 == 0x700;\n    }\n    if (!carry || cond1) {\n      cond1 = uVar6 <= shiftedLo1;\n      if (shiftedLo1 == uVar6) {\n        cond1 = loBits1 <= shiftedHi;\n      }\n      if (shiftedLo1 == uVar6 && shiftedHi == loBits1) {\n        cond1 = (shiftedLo2 & 1) != 0;\n      }\n      return CONCAT44(uVar7 + exponent1 * 0x100000 + (uint)CARRY4(shiftedLo2,(uint)cond1),shiftedLo2 + cond1);\n    }\n  }\n  if (!cond1 && (int)hiBits1 < 0 == cond2) {\n    return (ulonglong)(uVar7 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  carry = SCARRY4(exponent1,0x36);\n  cond1 = (int)(exponent1 + 0x36) < 0;\n  cond2 = exponent1 == 0xffffffca;\n  if (cond2 || cond1 != carry) {\n    shiftedLo2 = 0;\n  }\n  if (cond2 || cond1 != carry) {\n    uVar7 = uVar7 & 0x80000000;\n  }\n  if (cond2 || cond1 != carry) {\n    return CONCAT44(uVar7,shiftedLo2);\n  }\n  hiBits1 = -exponent1;\n  shiftedLo1 = hiBits1 - 0x20;\n  if (0x1f < (int)hiBits1) {\n    hiBits1 = shiftedLo2 >> (shiftedLo1 & 0xff) | uVar7 << (0x20 - shiftedLo1 & 0xff);\n    exponent1 = (uVar7 >> (shiftedLo1 & 0xff) & ~((uVar7 & 0x80000000) >> (shiftedLo1 & 0xff))) -\n            ((int)hiBits1 >> 0x1f);\n    if ((carryFlag | shiftedLo2 << (0x20 - shiftedLo1 & 0xff) | hiBits1 << 1) == 0) {\n      exponent1 = exponent1 & ~(hiBits1 >> 0x1f);\n    }\n    return CONCAT44(uVar7,exponent1) & 0x80000000ffffffff;\n  }\n  difference = hiBits1 - 0x14;\n  if (difference != 0 && difference < 0 == SCARRY4(shiftedLo1,0xc)) {\n    exponent1 = 0xc - difference;\n    hiBits1 = shiftedLo2 << (exponent1 & 0xff);\n    shiftedLo2 = shiftedLo2 >> (0x20 - exponent1 & 0xff) | uVar7 << (exponent1 & 0xff);\n    exponent1 = shiftedLo2 + -((int)hiBits1 >> 0x1f);\n    if ((carryFlag | hiBits1 << 1) == 0) {\n      exponent1 = exponent1 & ~(hiBits1 >> 0x1f);\n    }\n    return CONCAT44((uVar7 & 0x80000000) + (uint)CARRY4(shiftedLo2,-((int)hiBits1 >> 0x1f)),exponent1);\n  }\n  shiftedLo1 = shiftedLo2 << (exponent1 + 0x20 & 0xff);\n  shiftedLo2 = shiftedLo2 >> (hiBits1 & 0xff) | uVar7 << (exponent1 + 0x20 & 0xff);\n  exponent1 = shiftedLo2 + -((int)shiftedLo1 >> 0x1f);\n  if ((carryFlag | shiftedLo1 << 1) == 0) {\n    exponent1 = exponent1 & ~(shiftedLo1 >> 0x1f);\n  }\n  return CONCAT44((uVar7 & 0x80000000) +\n                  ((uVar7 & 0x7fffffff) >> (hiBits1 & 0xff)) +\n                  (uint)CARRY4(shiftedLo2,-((int)shiftedLo1 >> 0x1f)),exponent1);\n}\n\n",
            "renaming": {
                "FUN_08000724": "calculate_floating_point_08000724",
                "param_1": "flags",
                "param_2": "lo",
                "param_3": "hi",
                "param_4": "val",
                "uVar1": "loBits1",
                "uVar2": "loBits2",
                "uVar3": "hiBits1",
                "uVar4": "hiBits2",
                "iVar8": "difference",
                "uVar9": "exponent1",
                "unaff_r5": "exponent2",
                "uVar10": "shiftedLo1",
                "uVar11": "shiftedLo2",
                "uVar12": "shiftedHi",
                "uVar13": "carryFlag",
                "bVar14": "cond1",
                "bVar15": "cond2",
                "bVar16": "carry",
                "uVar17": "result"
            },
            "calling": [
                "FUN_08006d68",
                "FUN_08005c70",
                "FUN_08005900",
                "FUN_08006c0c",
                "FUN_08005bc8",
                "FUN_08006228",
                "FUN_08003330",
                "FUN_08006070"
            ],
            "called": [
                "FUN_08000892"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000892": {
            "entrypoint": "0x08000892",
            "current_name": "calculate_double_precision_08000892",
            "code": "\nulonglong calculate_double_precision_08000892(uint input1,uint input2,uint input3,uint input4)\n\n{\n  uint bit1;\n  uint bit2;\n  uint mask;\n  uint result;\n  uint constant;\n  bool check_result;\n  \n  mask = constant & input4 >> 0x14;\n  result = input2;\n  if (bit2 != constant || mask != constant) {\n    if (bit2 == constant) {\n      if (((input1 | input2 << 0xc) == 0) && (input1 = input3, result = input4, mask != constant)\n         ) {\nLAB_08000704:\n        return (ulonglong)((input2 ^ input4) & 0x80000000 | 0x7ff00000) << 0x20;\n      }\n    }\n    else if (mask == constant) {\n      input1 = input3;\n      result = input4;\n      if ((input3 | input4 << 0xc) == 0) {\nLAB_080006c8:\n        return (ulonglong)((input2 ^ input4) & 0x80000000) << 0x20;\n      }\n    }\n    else {\n      check_result = (input1 | input2 << 1) == 0;\n      if (!check_result) {\n        check_result = (input3 | input4 << 1) == 0;\n      }\n      if (!check_result) {\n        if (bit2 == 0) {\n          result = input2 & 0x80000000;\n          do {\n            bit1 = input1 & 0x80000000;\n            input1 = input1 << 1;\n            input2 = input2 * 2 + (uint)(bit1 != 0);\n          } while ((input2 & 0x100000) == 0);\n          input2 = input2 | result;\n          if (mask != 0) {\n            return CONCAT44(input2,input1);\n          }\n        }\n        do {\n          result = input3 & 0x80000000;\n          input3 = input3 << 1;\n          input4 = input4 * 2 + (uint)(result != 0);\n        } while ((input4 & 0x100000) == 0);\n        return CONCAT44(input2,input1);\n      }\n      if ((input1 | input2 << 1) != 0) goto LAB_08000704;\n      if ((input3 | input4 << 1) != 0) goto LAB_080006c8;\n    }\n  }\n  return CONCAT44(result,input1) | 0x7ff8000000000000;\n}\n\n",
            "renaming": {
                "FUN_08000892": "calculate_double_precision_08000892",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "bit1",
                "unaff_r4": "bit2",
                "uVar2": "mask",
                "uVar3": "result",
                "in_r12": "constant",
                "bVar4": "check_result"
            },
            "calling": [
                "FUN_08000724"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000904": {
            "entrypoint": "0x08000904",
            "current_name": "check_equality_with_conditions_08000904",
            "code": "\nuint checkEqualityWithConditions_08000904(uint value_1,uint value_2,uint value_3,uint value_4)\n\n{\n  uint result;\n  bool isZero;\n  bool isGreaterOrEqual;\n  \n  if (((int)(value_2 << 1) >> 0x15 == -1 || (int)(value_4 << 1) >> 0x15 == -1) &&\n     ((((int)(value_2 << 1) >> 0x15 == -1 && ((value_1 | value_2 << 0xc) != 0)) ||\n      (((int)(value_4 << 1) >> 0x15 == -1 && ((value_3 | value_4 << 0xc) != 0)))))) {\n    return 1;\n  }\n  isZero = (value_1 | value_2 << 1) == 0;\n  if (isZero) {\n    isZero = (value_3 | value_4 << 1) == 0;\n  }\n  if (!isZero) {\n    isZero = value_2 == value_4;\n  }\n  if (isZero) {\n    isZero = value_1 == value_3;\n  }\n  if (!isZero) {\n    result = value_2 ^ value_4;\n    isZero = result == 0;\n    if (-1 < (int)result) {\n      isZero = value_2 == value_4;\n    }\n    isGreaterOrEqual = -1 < (int)result && value_4 <= value_2;\n    if (isZero) {\n      isGreaterOrEqual = value_3 <= value_1;\n    }\n    value_4 = (int)value_4 >> 0x1f;\n    if (!isGreaterOrEqual) {\n      value_4 = ~value_4;\n    }\n    return value_4 | 1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08000904": "check_equality_with_conditions_08000904",
                "param_1": "value_1",
                "param_2": "value_2",
                "param_3": "value_3",
                "param_4": "value_4",
                "uVar1": "result",
                "bVar2": "isZero",
                "bVar3": "isGreaterOrEqual"
            },
            "calling": [
                "FUN_08000990"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000980": {
            "entrypoint": "0x08000980",
            "current_name": "execute_function_08000980",
            "code": "\nvoid executeFunction_08000980(undefined4 input_1,undefined4 input_2,undefined4 pointer_1,undefined4 pointer_2)\n\n{\n  FUN_08000990(pointer_1,pointer_2,input_1,input_2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000980": "execute_function_08000980",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "pointer_1",
                "param_4": "pointer_2"
            },
            "calling": [
                "FUN_080009f0"
            ],
            "called": [
                "FUN_08000990"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000990": {
            "entrypoint": "0x08000990",
            "current_name": "execute_and_return_param_08000990",
            "code": "\nundefined4 execute_and_return_param_08000990(undefined4 input_param)\n\n{\n  FUN_08000904();\n  return input_param;\n}\n\n",
            "renaming": {
                "FUN_08000990": "execute_and_return_param_08000990",
                "param_1": "input_param"
            },
            "calling": [
                "FUN_08000980",
                "FUN_080009c8",
                "FUN_080009a0",
                "FUN_080009b4"
            ],
            "called": [
                "FUN_08000904"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080009a0": {
            "entrypoint": "0x080009a0",
            "current_name": "check_condition_080009a0",
            "code": "\nbool check_condition_080009a0(void)\n\n{\n  char condition_result;\n  \n  FUN_08000990();\n  return condition_result != '\\0';\n}\n\n",
            "renaming": {
                "FUN_080009a0": "check_condition_080009a0",
                "in_ZR": "condition_result"
            },
            "calling": [
                "FUN_08005900"
            ],
            "called": [
                "FUN_08000990"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080009b4": {
            "entrypoint": "0x080009b4",
            "current_name": "is_null_terminated_080009b4",
            "code": "\nbool is_null_terminated_080009b4(void)\n\n{\n  char input_char;\n  \n  FUN_08000990();\n  return input_char == '\\0';\n}\n\n",
            "renaming": {
                "FUN_080009b4": "is_null_terminated_080009b4",
                "in_CY": "input_char"
            },
            "calling": [
                "FUN_08005900",
                "FUN_08005bc8"
            ],
            "called": [
                "FUN_08000990"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080009c8": {
            "entrypoint": "0x080009c8",
            "current_name": "check_cy_and_zr_flags_080009c8",
            "code": "\nbool check_CY_and_ZR_flags_080009c8(void)\n\n{\n  undefined zero_flag;\n  undefined carry_flag;\n  \n  FUN_08000990();\n  return !(bool)carry_flag || (bool)zero_flag;\n}\n\n",
            "renaming": {
                "FUN_080009c8": "check_cy_and_zr_flags_080009c8",
                "in_CY": "carry_flag",
                "in_ZR": "zero_flag"
            },
            "calling": [
                "FUN_08006228"
            ],
            "called": [
                "FUN_08000990"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080009f0": {
            "entrypoint": "0x080009f0",
            "current_name": "is_null_terminated_080009f0",
            "code": "\nbool is_null_terminated_080009f0(void)\n\n{\n  char input_character;\n  \n  FUN_08000980();\n  return input_character == '\\0';\n}\n\n",
            "renaming": {
                "FUN_080009f0": "is_null_terminated_080009f0",
                "in_CY": "input_character"
            },
            "calling": [
                "FUN_08006d68",
                "FUN_08005c70",
                "FUN_08005854",
                "FUN_08006228"
            ],
            "called": [
                "FUN_08000980"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000a04": {
            "entrypoint": "0x08000a04",
            "current_name": "check_inputs_08000a04",
            "code": "\nundefined4 check_inputs_08000a04(uint input_1,int input_2,uint input_3,int input_4)\n\n{\n  if ((((input_2 << 1) >> 0x15 != -1) || ((input_1 | input_2 << 0xc) == 0)) &&\n     (((input_4 << 1) >> 0x15 != -1 || ((input_3 | input_4 << 0xc) == 0)))) {\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08000a04": "check_inputs_08000a04",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4"
            },
            "calling": [
                "FUN_08005900",
                "FUN_08005854",
                "FUN_08005bc8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000a30": {
            "entrypoint": "0x08000a30",
            "current_name": "calculate_floating_point_offset_08000a30",
            "code": "\nuint calculateFloatingPointOffset_08000a30(uint inputValue,uint multiplier)\n\n{\n  uint result;\n  uint multiplierTimesTwo;\n  uint offset;\n  uint updatedOffset;\n  bool isZero;\n  bool isWithinRange;\n  \n  multiplierTimesTwo = multiplier * 2;\n  isWithinRange = multiplierTimesTwo < 0x70000000;\n  offset = multiplierTimesTwo + 0x90000000;\n  result = offset;\n  if (!isWithinRange) {\n    updatedOffset = multiplierTimesTwo + 0x8fe00000;\n    result = updatedOffset;\n  }\n  isZero = result == 0;\n  if (!isWithinRange && offset >= 0x200000) {\n    isZero = updatedOffset == 0x1fc00000;\n  }\n  if (((isWithinRange || offset < 0x200000) || 0x1fc00000 < updatedOffset) || isZero) {\n    if ((multiplier & 0x40000000) != 0) {\n      if (((int)multiplierTimesTwo >> 0x15 == -1) && ((inputValue | multiplier << 0xc) != 0)) {\n        return 0x7fc00000;\n      }\n      return multiplier & 0x80000000 | 0x7f800000;\n    }\n    if ((int)(multiplierTimesTwo + 0x92e00000) < 0 != SCARRY4(offset,0x2e00000)) {\n      return multiplier & 0x80000000;\n    }\n    multiplierTimesTwo = 0x18 - (multiplierTimesTwo + 0x92e00000 >> 0x15);\n    result = inputValue >> (multiplierTimesTwo & 0xff);\n    if (inputValue << (0x20 - multiplierTimesTwo & 0xff) != 0) {\n      result = result | 1;\n    }\n    offset = multiplier & 0x1fffff | 0x100000;\n    inputValue = result | offset << (0x20 - multiplierTimesTwo & 0xff);\n    offset = (offset >> (multiplierTimesTwo & 0xff)) << 1;\n  }\n  result = (multiplier & 0x80000000 | inputValue >> 0x1d) + offset * 4 + (uint)(0x7fffffff < inputValue * 8);\n  if (inputValue * 8 == 0x80000000) {\n    result = result & 0xfffffffe;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08000a30": "calculate_floating_point_offset_08000a30",
                "param_1": "inputValue",
                "param_2": "multiplier",
                "uVar1": "result",
                "uVar2": "multiplierTimesTwo",
                "uVar3": "offset",
                "in_r12": "updatedOffset",
                "bVar4": "isZero",
                "bVar5": "isWithinRange"
            },
            "calling": [
                "FUN_0800411c",
                "FUN_08003330"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000ad8": {
            "entrypoint": "0x08000ad8",
            "current_name": "calculate_float_08000ad8",
            "code": "\nuint calculate_float_08000ad8(uint input_float,uint input_int,undefined4 round_mode,uint exponent_base)\n\n{\n  int shifted_input_float;\n  int shifted_input_int;\n  uint input_float_binary;\n  uint input_int_binary;\n  uint adjusted_float;\n  uint exponent_difference;\n  uint exponent_abs_difference;\n  bool is_equal;\n  \n  input_float_binary = input_int ^ 0x80000000;\n  adjusted_float = input_float << 1;\n  is_equal = adjusted_float == 0;\n  if (!is_equal) {\n    exponent_base = input_int << 1;\n    is_equal = exponent_base == 0;\n  }\n  if (!is_equal) {\n    is_equal = adjusted_float == exponent_base;\n  }\n  shifted_input_float = (int)adjusted_float >> 0x18;\n  if (!is_equal) {\n    is_equal = shifted_input_float == -1;\n  }\n  if (!is_equal) {\n    is_equal = (int)exponent_base >> 0x18 == -1;\n  }\n  if (is_equal) {\n    shifted_input_int = (int)(input_int << 1) >> 0x18;\n    if (shifted_input_float == -1 || shifted_input_int == -1) {\n      adjusted_float = input_float_binary;\n      if (shifted_input_float == -1) {\n        adjusted_float = input_float;\n      }\n      if (shifted_input_float != -1 || shifted_input_int != -1) {\n        input_float_binary = adjusted_float;\n      }\n      is_equal = (adjusted_float & 0x7fffff) == 0;\n      if (is_equal) {\n        is_equal = (input_float_binary & 0x7fffff) == 0;\n      }\n      if (is_equal) {\n        is_equal = adjusted_float == input_float_binary;\n      }\n      if (!is_equal) {\n        adjusted_float = adjusted_float | 0x400000;\n      }\n      result adjusted_float;\n    }\n    if (((input_float ^ input_float_binary) & 0x7fffffff) != 0) {\n      if (adjusted_float == 0) {\n        input_float = input_float_binary;\n      }\n      result input_float;\n    }\n    if (input_float != input_float_binary) {\n      result 0;\n    }\n    if ((adjusted_float & 0xff000000) == 0) {\n      input_float_binary = input_float << 1;\n      if ((input_float & 0x80000000) != 0) {\n        input_float_binary = input_float_binary | 0x80000000;\n      }\n      result input_float_binary;\n    }\n    if (adjusted_float < 0xfe000000) {\n      result input_float + 0x800000;\n    }\n    input_float = input_float & 0x80000000;\nLAB_08000c12:\n    result input_float | 0x7f800000;\n  }\n  adjusted_float = adjusted_float >> 0x18;\n  exponent_base = exponent_base >> 0x18;\n  exponent_abs_difference = exponent_base - adjusted_float;\n  is_equal = exponent_abs_difference != 0;\n  exponent_difference = adjusted_float;\n  if (is_equal && adjusted_float <= exponent_base) {\n    exponent_difference = adjusted_float + exponent_abs_difference;\n  }\n  if (is_equal && adjusted_float <= exponent_base) {\n    input_float_binary = input_float_binary ^ input_float;\n  }\n  if (is_equal && adjusted_float <= exponent_base) {\n    input_float = input_float ^ input_float_binary;\n  }\n  if (is_equal && adjusted_float <= exponent_base) {\n    input_float_binary = input_float_binary ^ input_float;\n  }\n  if (exponent_base < adjusted_float) {\n    exponent_abs_difference = -exponent_abs_difference;\n  }\n  if (0x19 < exponent_abs_difference) {\n    result input_float;\n  }\n  adjusted_float = input_float & 0xffffff | 0x800000;\n  if ((input_float & 0x80000000) != 0) {\n    adjusted_float = -adjusted_float;\n  }\n  input_int_binary = input_float_binary & 0xffffff | 0x800000;\n  if ((input_float_binary & 0x80000000) != 0) {\n    input_int_binary = -input_int_binary;\n  }\n  if (exponent_difference == exponent_abs_difference) {\n    input_int_binary = input_int_binary ^ 0x800000;\n    if (exponent_difference == 0) {\n      adjusted_float = adjusted_float ^ 0x800000;\n      exponent_difference = 1;\n    }\n    else {\n      exponent_abs_difference = exponent_abs_difference - 1;\n    }\n  }\n  adjusted_float = adjusted_float + ((int)input_int_binary >> (exponent_abs_difference & 0xff));\n  input_int_binary = input_int_binary << (0x20 - exponent_abs_difference & 0xff);\n  input_float = adjusted_float & 0x80000000;\n  if ((int)adjusted_float < 0) {\n    is_equal = input_int_binary != 0;\n    input_int_binary = -input_int_binary;\n    adjusted_float = -adjusted_float - (uint)is_equal;\n  }\n  if (adjusted_float < 0x800000) {\n    input_float_binary = input_int_binary & 0x80000000;\n    input_int_binary = input_int_binary << 1;\n    adjusted_float = adjusted_float * 2 + (uint)(input_float_binary != 0);\n    input_float_binary = exponent_difference - 2;\n    if ((adjusted_float & 0x800000) == 0) {\n      exponent_abs_difference = LZCOUNT(adjusted_float) - 8;\n      adjusted_float = adjusted_float << (exponent_abs_difference & 0xff);\n      if ((int)input_float_binary < (int)exponent_abs_difference) {\n        adjusted_float = adjusted_float >> (-(input_float_binary - exponent_abs_difference) & 0xff);\n      }\n      else {\n        adjusted_float = adjusted_float + (input_float_binary - exponent_abs_difference) * 0x800000;\n      }\n      result adjusted_float | input_float;\n    }\n  }\n  else {\n    input_float_binary = exponent_difference - 1;\n    if (0xffffff < adjusted_float) {\n      input_float_binary = adjusted_float & 1;\n      adjusted_float = adjusted_float >> 1;\n      input_int_binary = (uint)(input_float_binary != 0) << 0x1f | input_int_binary >> 1;\n      input_float_binary = exponent_difference;\n      if (0xfd < exponent_difference) goto LAB_08000c12;\n    }\n  }\n  adjusted_float = adjusted_float + input_float_binary * 0x800000 + (uint)(0x7fffffff < input_int_binary);\n  if (input_int_binary == 0x80000000) {\n    adjusted_float = adjusted_float & 0xfffffffe;\n  }\n  result adjusted_float | input_float;\n}\n\n",
            "renaming": {
                "FUN_08000ad8": "calculate_float_08000ad8",
                "param_1": "input_float",
                "param_2": "input_int",
                "param_3": "round_mode",
                "param_4": "exponent_base",
                "iVar1": "shifted_input_float",
                "iVar2": "shifted_input_int",
                "uVar3": "input_float_binary",
                "uVar4": "input_int_binary",
                "uVar5": "adjusted_float",
                "uVar6": "exponent_difference",
                "uVar7": "exponent_abs_difference",
                "bVar8": "is_equal",
                "return": "result"
            },
            "calling": [
                "FUN_0800426c",
                "FUN_08002ee8",
                "FUN_08002d88",
                "FUN_08003330",
                "FUN_0800483c",
                "FUN_08002bf0",
                "FUN_08002ec0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000adc": {
            "entrypoint": "0x08000adc",
            "current_name": "calculate_float_value_08000adc",
            "code": "\nuint calculateFloatValue_08000adc(uint operand1,uint operand2,undefined4 flags,uint result)\n\n{\n  int msb1;\n  int msb2;\n  uint fraction1;\n  uint fraction2;\n  uint exponent1;\n  uint exponent2;\n  bool isZero;\n  \n  fraction2 = operand1 << 1;\n  isZero = fraction2 == 0;\n  if (!isZero) {\n    result = operand2 << 1;\n    isZero = result == 0;\n  }\n  if (!isZero) {\n    isZero = fraction2 == result;\n  }\n  msb1 = (int)fraction2 >> 0x18;\n  if (!isZero) {\n    isZero = msb1 == -1;\n  }\n  if (!isZero) {\n    isZero = (int)result >> 0x18 == -1;\n  }\n  if (isZero) {\n    msb2 = (int)(operand2 << 1) >> 0x18;\n    if (msb1 == -1 || msb2 == -1) {\n      fraction2 = operand2;\n      if (msb1 == -1) {\n        fraction2 = operand1;\n      }\n      if (msb1 != -1 || msb2 != -1) {\n        operand2 = fraction2;\n      }\n      isZero = (fraction2 & 0x7fffff) == 0;\n      if (isZero) {\n        isZero = (operand2 & 0x7fffff) == 0;\n      }\n      if (isZero) {\n        isZero = fraction2 == operand2;\n      }\n      if (!isZero) {\n        fraction2 = fraction2 | 0x400000;\n      }\n      return fraction2;\n    }\n    if (((operand1 ^ operand2) & 0x7fffffff) != 0) {\n      if (fraction2 == 0) {\n        operand1 = operand2;\n      }\n      return operand1;\n    }\n    if (operand1 != operand2) {\n      return 0;\n    }\n    if ((fraction2 & 0xff000000) == 0) {\n      fraction2 = operand1 << 1;\n      if ((operand1 & 0x80000000) != 0) {\n        fraction2 = fraction2 | 0x80000000;\n      }\n      return fraction2;\n    }\n    if (fraction2 < 0xfe000000) {\n      return operand1 + 0x800000;\n    }\n    operand1 = operand1 & 0x80000000;\nLAB_08000c12:\n    return operand1 | 0x7f800000;\n  }\n  fraction2 = fraction2 >> 0x18;\n  result = result >> 0x18;\n  exponent2 = result - fraction2;\n  isZero = exponent2 != 0;\n  exponent1 = fraction2;\n  if (isZero && fraction2 <= result) {\n    exponent1 = fraction2 + exponent2;\n  }\n  if (isZero && fraction2 <= result) {\n    operand2 = operand2 ^ operand1;\n  }\n  if (isZero && fraction2 <= result) {\n    operand1 = operand1 ^ operand2;\n  }\n  if (isZero && fraction2 <= result) {\n    operand2 = operand2 ^ operand1;\n  }\n  if (result < fraction2) {\n    exponent2 = -exponent2;\n  }\n  if (0x19 < exponent2) {\n    return operand1;\n  }\n  fraction2 = operand1 & 0xffffff | 0x800000;\n  if ((operand1 & 0x80000000) != 0) {\n    fraction2 = -fraction2;\n  }\n  fraction1 = operand2 & 0xffffff | 0x800000;\n  if ((operand2 & 0x80000000) != 0) {\n    fraction1 = -fraction1;\n  }\n  if (exponent1 == exponent2) {\n    fraction1 = fraction1 ^ 0x800000;\n    if (exponent1 == 0) {\n      fraction2 = fraction2 ^ 0x800000;\n      exponent1 = 1;\n    }\n    else {\n      exponent2 = exponent2 - 1;\n    }\n  }\n  fraction2 = fraction2 + ((int)fraction1 >> (exponent2 & 0xff));\n  fraction1 = fraction1 << (0x20 - exponent2 & 0xff);\n  operand1 = fraction2 & 0x80000000;\n  if ((int)fraction2 < 0) {\n    isZero = fraction1 != 0;\n    fraction1 = -fraction1;\n    fraction2 = -fraction2 - (uint)isZero;\n  }\n  if (fraction2 < 0x800000) {\n    exponent2 = fraction1 & 0x80000000;\n    fraction1 = fraction1 << 1;\n    fraction2 = fraction2 * 2 + (uint)(exponent2 != 0);\n    exponent2 = exponent1 - 2;\n    if ((fraction2 & 0x800000) == 0) {\n      exponent1 = LZCOUNT(fraction2) - 8;\n      fraction2 = fraction2 << (exponent1 & 0xff);\n      if ((int)exponent2 < (int)exponent1) {\n        fraction2 = fraction2 >> (-(exponent2 - exponent1) & 0xff);\n      }\n      else {\n        fraction2 = fraction2 + (exponent2 - exponent1) * 0x800000;\n      }\n      return fraction2 | operand1;\n    }\n  }\n  else {\n    exponent2 = exponent1 - 1;\n    if (0xffffff < fraction2) {\n      exponent2 = fraction2 & 1;\n      fraction2 = fraction2 >> 1;\n      fraction1 = (uint)(exponent2 != 0) << 0x1f | fraction1 >> 1;\n      exponent2 = exponent1;\n      if (0xfd < exponent1) goto LAB_08000c12;\n    }\n  }\n  fraction2 = fraction2 + exponent2 * 0x800000 + (uint)(0x7fffffff < fraction1);\n  if (fraction1 == 0x80000000) {\n    fraction2 = fraction2 & 0xfffffffe;\n  }\n  return fraction2 | operand1;\n}\n\n",
            "renaming": {
                "FUN_08000adc": "calculate_float_value_08000adc",
                "param_1": "operand1",
                "param_2": "operand2",
                "param_3": "flags",
                "param_4": "result",
                "iVar1": "msb1",
                "iVar2": "msb2",
                "uVar3": "fraction1",
                "uVar4": "fraction2",
                "uVar5": "exponent1",
                "uVar6": "exponent2",
                "bVar7": "isZero"
            },
            "calling": [
                "FUN_0800426c",
                "FUN_08004a84",
                "FUN_08002ee8",
                "FUN_0800411c",
                "FUN_08002cb0",
                "FUN_08003330",
                "FUN_0800483c",
                "FUN_08002ec0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000c3c": {
            "entrypoint": "0x08000c3c",
            "current_name": "calculate_value_08000c3c",
            "code": "\nuint calculateValue_08000c3c(uint inputValue)\n\n{\n  uint leadingZeroesCount;\n  uint shiftAmount;\n  int constant;\n  uint comparisonValue;\n  \n  if (inputValue == 0) {\n    return 0;\n  }\n  leadingZeroesCount = LZCOUNT(inputValue);\n  shiftAmount = leadingZeroesCount - 8;\n  constant = shiftAmount * -0x800000 + 0x4a800000;\n  if (7 < leadingZeroesCount) {\n    comparisonValue = 0 << (shiftAmount & 0xff);\n    leadingZeroesCount = constant + (inputValue << (shiftAmount & 0xff)) +\n            (0U >> (0x20 - shiftAmount & 0xff)) + (uint)(0x7fffffff < comparisonValue);\n    if (comparisonValue == 0x80000000) {\n      leadingZeroesCount = leadingZeroesCount & 0xfffffffe;\n    }\n    return leadingZeroesCount;\n  }\n  shiftAmount = inputValue << leadingZeroesCount + 0x18;\n  leadingZeroesCount = constant + ((inputValue >> (0x20 - (leadingZeroesCount + 0x18) & 0xff)) - ((int)shiftAmount >> 0x1f));\n  if ((shiftAmount & 0x7fffffff) == 0) {\n    leadingZeroesCount = leadingZeroesCount & ~(shiftAmount >> 0x1f);\n  }\n  return leadingZeroesCount;\n}\n\n",
            "renaming": {
                "FUN_08000c3c": "calculate_value_08000c3c",
                "param_1": "inputValue",
                "uVar1": "leadingZeroesCount",
                "uVar2": "shiftAmount",
                "iVar3": "constant",
                "uVar4": "comparisonValue"
            },
            "calling": [
                "FUN_08002f28"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000c44": {
            "entrypoint": "0x08000c44",
            "current_name": "count_leading_zeros_08000c44",
            "code": "\nuint countLeadingZeros_08000c44(uint input)\n\n{\n  uint leadingZeros;\n  uint shift;\n  uint signBit;\n  int result;\n  \n  signBit = input & 0x80000000;\n  if ((int)signBit < 0) {\n    input = -input;\n  }\n  if (input == 0) {\n    return 0;\n  }\n  leadingZeros = countLeadingZeros_08000c44(input);\n  shift = leadingZeros - 8;\n  result = ((signBit | 0x4b000000) - 0x800000) + shift * -0x800000;\n  if (7 < leadingZeros) {\n    leadingZeros = 0 << (shift & 0xff);\n    signBit = result + (input << (shift & 0xff)) +\n            (0U >> (0x20 - shift & 0xff)) + (uint)(0x7fffffff < leadingZeros);\n    if (leadingZeros == 0x80000000) {\n      signBit = signBit & 0xfffffffe;\n    }\n    return signBit;\n  }\n  shift = input << leadingZeros + 0x18;\n  signBit = result + ((input >> (0x20 - (leadingZeros + 0x18) & 0xff)) - ((int)shift >> 0x1f));\n  if ((shift & 0x7fffffff) == 0) {\n    signBit = signBit & ~(shift >> 0x1f);\n  }\n  return signBit;\n}\n\n",
            "renaming": {
                "FUN_08000c44": "count_leading_zeros_08000c44",
                "param_1": "input",
                "uVar1": "leadingZeros",
                "uVar2": "shift",
                "uVar3": "signBit",
                "iVar4": "result",
                "LZCOUNT": "countLeadingZeros"
            },
            "calling": [
                "FUN_08002b48",
                "FUN_0800411c",
                "FUN_08002d88",
                "FUN_08002cb0",
                "FUN_0800483c",
                "FUN_08002bf0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000cec": {
            "entrypoint": "0x08000cec",
            "current_name": "calculate_floating_point_08000cec",
            "code": "\nuint calculateFloatingPoint_08000cec(uint input1,uint input2,undefined4 unusedParam,uint unusedParam2)\n\n{\n  longlong longResult;\n  uint result;\n  uint byte1;\n  int sumOfBytes;\n  int byteDiff;\n  uint product;\n  int byteDiff2;\n  uint tempResult;\n  bool isZero;\n  bool isNegative;\n  \n  byte1 = input1 >> 0x17 & 0xff;\n  isZero = byte1 == 0;\n  if (!isZero) {\n    unusedParam2 = input2 >> 0x17 & 0xff;\n    isZero = unusedParam2 == 0;\n  }\n  if (!isZero) {\n    isZero = byte1 == 0xff;\n  }\n  if (!isZero) {\n    isZero = unusedParam2 == 0xff;\n  }\n  if (isZero) {\n    unusedParam2 = input2 >> 0x17 & 0xff;\n    if (byte1 == 0xff || unusedParam2 == 0xff) {\n      isZero = input1 == 0 || input1 == 0x80000000;\n      result = input2;\n      if (input1 != 0 && input1 != 0x80000000) {\n        isZero = input2 == 0;\n        result = input1;\n      }\n      if (!isZero) {\n        isZero = input2 == 0x80000000;\n      }\n      tempResult = result;\n      if (((isZero) || ((byte1 == 0xff && ((result & 0x7fffff) != 0)))) ||\n         ((unusedParam2 == 0xff && (tempResult = input2, (input2 & 0x7fffff) != 0)))) {\n        return tempResult | 0x7fc00000;\n      }\n      result = result ^ input2;\n      goto LAB_08000e3c;\n    }\n    isZero = (input1 & 0x7fffffff) == 0;\n    if (!isZero) {\n      isZero = (input2 & 0x7fffffff) == 0;\n    }\n    if (isZero) {\n      return (input1 ^ input2) & 0x80000000;\n    }\n    isZero = byte1 == 0;\n    result = input1 & 0x80000000;\n    while( true ) {\n      if (isZero) {\n        input1 = input1 << 1;\n        isZero = (input1 & 0x800000) == 0;\n      }\n      if (!isZero) break;\n      byte1 = byte1 - 1;\n    }\n    input1 = input1 | result;\n    isZero = unusedParam2 == 0;\n    result = input2 & 0x80000000;\n    while( true ) {\n      if (isZero) {\n        input2 = input2 << 1;\n        isZero = (input2 & 0x800000) == 0;\n      }\n      if (!isZero) break;\n      unusedParam2 = unusedParam2 - 1;\n    }\n    input2 = input2 | result;\n  }\n  sumOfBytes = byte1 + unusedParam2;\n  tempResult = input1 ^ input2;\n  byte1 = input1 << 9;\n  isZero = byte1 == 0;\n  if (!isZero) {\n    input2 = input2 << 9;\n    isZero = input2 == 0;\n  }\n  if (isZero) {\n    if (byte1 == 0) {\n      input2 = input2 << 9;\n    }\n    result = tempResult & 0x80000000 | input1 & 0x7fffff | input2 >> 9;\n    isNegative = SBORROW4(sumOfBytes,0x7f);\n    byteDiff = sumOfBytes + -0x7f;\n    isZero = byteDiff == 0;\n    byteDiff2 = byteDiff;\n    if (!isZero && 0x7e < sumOfBytes) {\n      isNegative = SBORROW4(0xff,byteDiff);\n      byteDiff2 = 0xff - byteDiff;\n      isZero = byteDiff == 0xff;\n    }\n    if (!isZero && byteDiff2 < 0 == isNegative) {\n      result = result | byteDiff * 0x800000;\n    }\n    if (!isZero && byteDiff2 < 0 == isNegative) {\n      return result;\n    }\n    result = result | 0x800000;\n    product = 0;\n    isNegative = SBORROW4(byteDiff,1);\n    tempResult = sumOfBytes - 0x80;\n    isZero = tempResult == 0;\n    byte1 = tempResult;\n  }\n  else {\n    longResult = (ulonglong)(byte1 >> 5 | 0x8000000) * (ulonglong)(input2 >> 5 | 0x8000000);\n    product = (uint)longResult;\n    result = (uint)((ulonglong)longResult >> 0x20);\n    isZero = result < 0x800000;\n    if (isZero) {\n      result = result << 1;\n    }\n    if (isZero) {\n      result = result | product >> 0x1f;\n      product = product << 1;\n    }\n    result = tempResult & 0x80000000 | result;\n    tempResult = (sumOfBytes + -0x7f) - (uint)isZero;\n    isNegative = SBORROW4(tempResult,0xfd);\n    isZero = tempResult == 0xfd;\n    byte1 = tempResult - 0xfd;\n    if (tempResult < 0xfe) {\n      result = result + tempResult * 0x800000 + (uint)(0x7fffffff < product);\n      if (product == 0x80000000) {\n        result = result & 0xfffffffe;\n      }\n      return result;\n    }\n  }\n  if (isZero || (int)byte1 < 0 != isNegative) {\n    isZero = (int)(tempResult + 0x19) < 0;\n    if (tempResult == 0xffffffe7 || isZero != SCARRY4(tempResult,0x19)) {\n      result = result & 0x80000000;\n    }\n    if (tempResult != 0xffffffe7 && isZero == SCARRY4(tempResult,0x19)) {\n      byte1 = (result << 1) >> (-tempResult & 0xff);\n      tempResult = result << (tempResult + 0x20 & 0xff);\n      byte1 = ((uint)((result & 0x80000000) != 0) << 0x1f | byte1 >> 1) + (uint)((byte)byte1 & 1);\n      if ((product | tempResult << 1) == 0) {\n        byte1 = byte1 & ~(tempResult >> 0x1f);\n      }\n      return byte1;\n    }\n    return result;\n  }\nLAB_08000e3c:\n  return result & 0x80000000 | 0x7f800000;\n}\n\n",
            "renaming": {
                "FUN_08000cec": "calculate_floating_point_08000cec",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "unusedParam",
                "param_4": "unusedParam2",
                "lVar1": "longResult",
                "uVar2": "result",
                "uVar3": "byte1",
                "iVar4": "sumOfBytes",
                "iVar5": "byteDiff",
                "uVar6": "product",
                "iVar7": "byteDiff2",
                "uVar8": "tempResult",
                "bVar9": "isZero",
                "bVar10": "isNegative"
            },
            "calling": [
                "FUN_08004a30",
                "FUN_08002b48",
                "FUN_08004a84",
                "FUN_08002d88",
                "FUN_08002cb0",
                "FUN_08003330",
                "FUN_0800483c",
                "FUN_08002f28",
                "FUN_08002bf0",
                "FUN_08002ec0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000e54": {
            "entrypoint": "0x08000e54",
            "current_name": "calculate_float_08000e54",
            "code": "\nuint calculateFloat_08000e54(uint operand1,uint operand2,undefined4 unknown,uint operand3)\n\n{\n  uint mantissa1;\n  uint exponent1;\n  int exponentDiff;\n  uint result;\n  int newExponent;\n  uint mantissa2;\n  bool isZero;\n  bool isOverflow;\n  bool isUnderflow;\n  \n  exponent1 = operand1 >> 0x17 & 0xff;\n  isZero = exponent1 == 0;\n  if (!isZero) {\n    operand3 = operand2 >> 0x17 & 0xff;\n    isZero = operand3 == 0;\n  }\n  if (!isZero) {\n    isZero = exponent1 == 0xff;\n  }\n  if (!isZero) {\n    isZero = operand3 == 0xff;\n  }\n  if (isZero) {\n    operand3 = operand2 >> 0x17 & 0xff;\n    mantissa2 = operand1;\n    if (exponent1 == 0xff) {\n      if (((operand1 & 0x7fffff) != 0) || (mantissa2 = operand2, operand3 == 0xff)) {\nLAB_08000e4a:\n        return mantissa2 | 0x7fc00000;\n      }\n    }\n    else {\n      if (operand3 == 0xff) {\n        mantissa2 = operand2;\n        if ((operand2 & 0x7fffff) == 0) {\nLAB_08000e00:\n          return (operand1 ^ operand2) & 0x80000000;\n        }\n        goto LAB_08000e4a;\n      }\n      isZero = (operand1 & 0x7fffffff) == 0;\n      if (!isZero) {\n        isZero = (operand2 & 0x7fffffff) == 0;\n      }\n      if (!isZero) {\n        isZero = exponent1 == 0;\n        mantissa2 = operand1 & 0x80000000;\n        while( true ) {\n          if (isZero) {\n            operand1 = operand1 << 1;\n            isZero = (operand1 & 0x800000) == 0;\n          }\n          if (!isZero) break;\n          exponent1 = exponent1 - 1;\n        }\n        operand1 = operand1 | mantissa2;\n        isZero = operand3 == 0;\n        mantissa2 = operand2 & 0x80000000;\n        while( true ) {\n          if (isZero) {\n            operand2 = operand2 << 1;\n            isZero = (operand2 & 0x800000) == 0;\n          }\n          if (!isZero) break;\n          operand3 = operand3 - 1;\n        }\n        operand2 = operand2 | mantissa2;\n        goto LAB_08000e6c;\n      }\n      if ((operand1 & 0x7fffffff) == 0) {\n        if ((operand2 & 0x7fffffff) != 0) goto LAB_08000e00;\n        goto LAB_08000e4a;\n      }\n    }\n    operand1 = operand1 ^ operand2;\n  }\n  else {\nLAB_08000e6c:\n    exponentDiff = exponent1 - operand3;\n    if (operand2 << 9 == 0) {\n      operand1 = (operand1 ^ operand2) & 0x80000000 | operand1 & 0x7fffff;\n      isUnderflow = SCARRY4(exponentDiff,0x7f);\n      newExponent = exponentDiff + 0x7f;\n      isZero = newExponent < 0;\n      isOverflow = newExponent == 0;\n      if (!isOverflow && isZero == isUnderflow) {\n        isUnderflow = SBORROW4(0xff,newExponent);\n        isZero = 0xff - newExponent < 0;\n        isOverflow = newExponent == 0xff;\n      }\n      if (!isOverflow && isZero == isUnderflow) {\n        operand1 = operand1 | newExponent * 0x800000;\n      }\n      if (!isOverflow && isZero == isUnderflow) {\n        return operand1;\n      }\n      operand1 = operand1 | 0x800000;\n      exponent1 = 0;\n      isOverflow = SBORROW4(newExponent,1);\n      result = exponentDiff + 0x7e;\n      isZero = result == 0;\n      mantissa2 = result;\n    }\n    else {\n      mantissa1 = (operand2 << 9) >> 4 | 0x10000000;\n      exponent1 = (operand1 << 9) >> 4 | 0x10000000;\n      operand1 = (operand1 ^ operand2) & 0x80000000;\n      isZero = mantissa1 <= exponent1;\n      if (!isZero) {\n        exponent1 = exponent1 << 1;\n      }\n      result = exponentDiff + 0x7d + (uint)isZero;\n      mantissa2 = 0x800000;\n      do {\n        if (mantissa1 <= exponent1) {\n          exponent1 = exponent1 - mantissa1;\n          operand1 = operand1 | mantissa2;\n        }\n        isZero = mantissa1 >> 1 <= exponent1;\n        if (isZero) {\n          exponent1 = exponent1 - (mantissa1 >> 1);\n        }\n        if (isZero) {\n          operand1 = operand1 | mantissa2 >> 1;\n        }\n        isZero = mantissa1 >> 2 <= exponent1;\n        if (isZero) {\n          exponent1 = exponent1 - (mantissa1 >> 2);\n        }\n        if (isZero) {\n          operand1 = operand1 | mantissa2 >> 2;\n        }\n        isZero = mantissa1 >> 3 <= exponent1;\n        if (isZero) {\n          exponent1 = exponent1 - (mantissa1 >> 3);\n        }\n        if (isZero) {\n          operand1 = operand1 | mantissa2 >> 3;\n        }\n        exponent1 = exponent1 * 0x10;\n        isZero = exponent1 == 0;\n        if (!isZero) {\n          mantissa2 = mantissa2 >> 4;\n          isZero = mantissa2 == 0;\n        }\n      } while (!isZero);\n      isOverflow = SBORROW4(result,0xfd);\n      isZero = result == 0xfd;\n      mantissa2 = result - 0xfd;\n      if (result < 0xfe) {\n        operand1 = operand1 + result * 0x800000 + (uint)(mantissa1 <= exponent1);\n        if (exponent1 - mantissa1 == 0) {\n          operand1 = operand1 & 0xfffffffe;\n        }\n        return operand1;\n      }\n    }\n    if (isZero || (int)mantissa2 < 0 != isOverflow) {\n      isZero = (int)(result + 0x19) < 0;\n      if (result == 0xffffffe7 || isZero != SCARRY4(result,0x19)) {\n        operand1 = operand1 & 0x80000000;\n      }\n      if (result == 0xffffffe7 || isZero != SCARRY4(result,0x19)) {\n        return operand1;\n      }\n      mantissa2 = (operand1 << 1) >> (-result & 0xff);\n      result = operand1 << (result + 0x20 & 0xff);\n      mantissa2 = ((uint)((operand1 & 0x80000000) != 0) << 0x1f | mantissa2 >> 1) + (uint)((byte)mantissa2 & 1);\n      if ((exponent1 | result << 1) == 0) {\n        mantissa2 = mantissa2 & ~(result >> 0x1f);\n      }\n      return mantissa2;\n    }\n  }\n  return operand1 & 0x80000000 | 0x7f800000;\n}\n\n",
            "renaming": {
                "FUN_08000e54": "calculate_float_08000e54",
                "param_1": "operand1",
                "param_2": "operand2",
                "param_3": "unknown",
                "param_4": "operand3",
                "uVar1": "mantissa1",
                "uVar2": "exponent1",
                "iVar3": "exponentDiff",
                "uVar4": "result",
                "iVar5": "newExponent",
                "uVar6": "mantissa2",
                "bVar7": "isZero",
                "bVar8": "isOverflow",
                "bVar9": "isUnderflow"
            },
            "calling": [
                "FUN_0800411c",
                "FUN_08003330",
                "FUN_0800483c",
                "FUN_08002f28"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000f9c": {
            "entrypoint": "0x08000f9c",
            "current_name": "check_and_adjust_parameters_08000f9c",
            "code": "\nuint check_and_adjust_parameters_08000f9c(uint input_value_1,uint input_value_2)\n\n{\n  bool is_negative_result;\n  uint doubled_value_1;\n  uint doubled_value_2;\n  uint combined_values;\n  bool is_zero_result;\n  \n  doubled_value_1 = input_value_1 * 2;\n  doubled_value_2 = input_value_2 * 2;\n  if (((int)doubled_value_1 >> 0x18 == -1 || (int)doubled_value_2 >> 0x18 == -1) &&\n     ((((int)doubled_value_1 >> 0x18 == -1 && ((input_value_1 & 0x7fffff) != 0)) ||\n      (((int)doubled_value_2 >> 0x18 == -1 && ((input_value_2 & 0x7fffff) != 0)))))) {\n    return 1;\n  }\n  combined_values = doubled_value_1 | input_value_2 & 0x7fffffff;\n  is_zero_result = combined_values == 0;\n  if (!is_zero_result) {\n    combined_values = input_value_1 ^ input_value_2;\n    is_zero_result = combined_values == 0;\n  }\n  is_negative_result = -1 < (int)combined_values;\n  if (is_negative_result) {\n    input_value_1 = doubled_value_1 + input_value_2 * -2;\n    is_zero_result = input_value_1 == 0;\n  }\n  if ((is_negative_result && doubled_value_2 <= doubled_value_1) && !is_zero_result) {\n    input_value_1 = (int)input_value_2 >> 0x1f;\n  }\n  if (!is_negative_result || doubled_value_2 > doubled_value_1) {\n    input_value_1 = ~((int)input_value_2 >> 0x1f);\n  }\n  if (!is_zero_result) {\n    input_value_1 = input_value_1 | 1;\n  }\n  return input_value_1;\n}\n\n",
            "renaming": {
                "FUN_08000f9c": "check_and_adjust_parameters_08000f9c",
                "param_1": "input_value_1",
                "param_2": "input_value_2",
                "bVar1": "is_negative_result",
                "uVar2": "doubled_value_1",
                "uVar3": "doubled_value_2",
                "uVar4": "combined_values",
                "bVar5": "is_zero_result"
            },
            "calling": [
                "FUN_08001004"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000ffc": {
            "entrypoint": "0x08000ffc",
            "current_name": "execute_function_08000ffc",
            "code": "\nvoid executeFunction_08000ffc(undefined4 inputParam,undefined4 outputParam)\n\n{\n  FUN_08001004(outputParam,inputParam);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000ffc": "execute_function_08000ffc",
                "param_1": "inputParam",
                "param_2": "outputParam"
            },
            "calling": [
                "FUN_08001050",
                "FUN_08001064"
            ],
            "called": [
                "FUN_08001004"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001004": {
            "entrypoint": "0x08001004",
            "current_name": "concatenate_params_08001004",
            "code": "\nundefined8 concatenateParams_08001004(undefined4 param1,undefined4 param2)\n\n{\n  FUN_08000f9c();\n  return CONCAT44(param2,param1);\n}\n\n",
            "renaming": {
                "FUN_08001004": "concatenate_params_08001004",
                "param_1": "param1",
                "param_2": "param2"
            },
            "calling": [
                "FUN_08001014",
                "FUN_08001028",
                "FUN_08000ffc"
            ],
            "called": [
                "FUN_08000f9c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001014": {
            "entrypoint": "0x08001014",
            "current_name": "check_if_valid_input_08001014",
            "code": "\nbool checkIfValidInput_08001014(void)\n\n{\n  char inputChar;\n  \n  FUN_08001004();\n  return inputChar != '\\0';\n}\n\n",
            "renaming": {
                "FUN_08001014": "check_if_valid_input_08001014",
                "in_ZR": "inputChar"
            },
            "calling": [
                "FUN_08003330"
            ],
            "called": [
                "FUN_08001004"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001028": {
            "entrypoint": "0x08001028",
            "current_name": "is_cy_null_08001028",
            "code": "\nbool is_cy_null_08001028(void)\n\n{\n  char cy_character;\n  \n  FUN_08001004();\n  return cy_character == '\\0';\n}\n\n",
            "renaming": {
                "FUN_08001028": "is_cy_null_08001028",
                "in_CY": "cy_character"
            },
            "calling": [
                "FUN_08004a84",
                "FUN_08002ee8",
                "FUN_0800483c"
            ],
            "called": [
                "FUN_08001004"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001050": {
            "entrypoint": "0x08001050",
            "current_name": "check_cy_and_zr_08001050",
            "code": "\nbool check_CY_and_ZR_08001050(void)\n\n{\n  undefined zero_flag;\n  undefined carry_flag;\n  \n  FUN_08000ffc();\n  return !(bool)carry_flag || (bool)zero_flag;\n}\n\n",
            "renaming": {
                "FUN_08001050": "check_cy_and_zr_08001050",
                "in_ZR": "zero_flag",
                "in_CY": "carry_flag"
            },
            "calling": [
                "FUN_08002ee8"
            ],
            "called": [
                "FUN_08000ffc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001064": {
            "entrypoint": "0x08001064",
            "current_name": "check_end_of_string_08001064",
            "code": "\nbool check_end_of_string_08001064(void)\n\n{\n  char end_of_string;\n  \n  FUN_08000ffc();\n  return end_of_string == '\\0';\n}\n\n",
            "renaming": {
                "FUN_08001064": "check_end_of_string_08001064",
                "in_CY": "end_of_string"
            },
            "calling": [
                "FUN_08004a84",
                "FUN_0800483c"
            ],
            "called": [
                "FUN_08000ffc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001078": {
            "entrypoint": "0x08001078",
            "current_name": "convert_to_normal_integer_08001078",
            "code": "\nuint convertToNormalInteger_08001078(uint inputNumber)\n\n{\n  uint shiftedInput;\n  uint difference;\n  \n  if (inputNumber << 1 < 0x7f000000) {\n    return 0;\n  }\n  shiftedInput = (inputNumber << 1) >> 0x18;\n  difference = 0x9e - shiftedInput;\n  if (shiftedInput < 0x9f && difference != 0) {\n    shiftedInput = (inputNumber << 8 | 0x80000000) >> (difference & 0xff);\n    if ((inputNumber & 0x80000000) != 0) {\n      shiftedInput = -shiftedInput;\n    }\n    return shiftedInput;\n  }\n  if ((difference == 0xffffff9f) && ((inputNumber & 0x7fffff) != 0)) {\n    return 0;\n  }\n  inputNumber = inputNumber & 0x80000000;\n  if (inputNumber == 0) {\n    inputNumber = 0x7fffffff;\n  }\n  return inputNumber;\n}\n\n",
            "renaming": {
                "FUN_08001078": "convert_to_normal_integer_08001078",
                "param_1": "inputNumber",
                "uVar1": "shiftedInput",
                "uVar2": "difference"
            },
            "calling": [
                "FUN_0800426c",
                "FUN_0800411c",
                "FUN_08002f28"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080010c4": {
            "entrypoint": "0x080010c4",
            "current_name": "check_integer_validity_080010c4",
            "code": "\nuint checkIntegerValidity_080010c4(uint input)\n\n{\n  uint shiftCount;\n  \n  if (((input & 0x80000000) != 0) || (input << 1 < 0x7f000000)) {\n    return 0;\n  }\n  shiftCount = 0x9e - ((input << 1) >> 0x18);\n  if (-1 < (int)shiftCount) {\n    return (input << 8 | 0x80000000) >> (shiftCount & 0xff);\n  }\n  if ((shiftCount == 0xffffff9f) && ((input & 0x7fffff) != 0)) {\n    return 0;\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_080010c4": "check_integer_validity_080010c4",
                "param_1": "input",
                "uVar1": "shiftCount"
            },
            "calling": [
                "FUN_08004a84"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001104": {
            "entrypoint": "0x08001104",
            "current_name": "initialize_program_08001104",
            "code": "\nundefined4 initializeProgram_08001104(undefined4 inputParameter)\n\n{\n  uint timeInMilliseconds;\n  \n  timeInMilliseconds = FUN_08002214();\n  FUN_08001214(timeInMilliseconds / 1000);\n  FUN_08001194(0xffffffff,inputParameter,0);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001104": "initialize_program_08001104",
                "param_1": "inputParameter",
                "uVar1": "timeInMilliseconds"
            },
            "calling": [
                "FUN_0800209c",
                "FUN_08001128"
            ],
            "called": [
                "FUN_08002214",
                "FUN_08001194",
                "FUN_08001214"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001128": {
            "entrypoint": "0x08001128",
            "current_name": "initialize_system_08001128",
            "code": "\n\n\nundefined4 initializeSystem_08001128(void)\n\n{\n  _DAT_40022000 = _DAT_40022000 | 0x10;\n  FUN_08001170(3);\n  FUN_08001104(0);\n  FUN_08004ccc();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001128": "initialize_system_08001128"
            },
            "calling": [
                "FUN_0800458c"
            ],
            "called": [
                "FUN_08001170",
                "FUN_08001104",
                "FUN_08004ccc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800114c": {
            "entrypoint": "0x0800114c",
            "current_name": "increment_counter_0800114c",
            "code": "\nvoid incrementCounter_0800114c(void)\n\n{\n  DAT_20000244 = DAT_20000244 + 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800114c": "increment_counter_0800114c"
            },
            "calling": [
                "FUN_080041ae"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800115c": {
            "entrypoint": "0x0800115c",
            "current_name": "get_global_variable_0800115c",
            "code": "\nundefined4 get_global_variable_0800115c(void)\n\n{\n  return DAT_20000244;\n}\n\n",
            "renaming": {
                "FUN_0800115c": "get_global_variable_0800115c"
            },
            "calling": [
                "FUN_08001530",
                "thunk_FUN_0800115c",
                "FUN_08001b58",
                "FUN_08004c18",
                "FUN_0800209c",
                "FUN_08001828",
                "FUN_08001938",
                "FUN_080014e2",
                "thunk_FUN_0800115c",
                "FUN_080015e8",
                "FUN_080016f4",
                "FUN_08001460"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001168": {
            "entrypoint": "0x08001168",
            "current_name": "FUNC_08001168",
            "code": "\nvoid FUNC_08001168(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001168": "FUNC_08001168"
            },
            "calling": [
                "FUN_08001b58",
                "thunk_FUN_08001168"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08001170": {
            "entrypoint": "0x08001170",
            "current_name": "set_register_bits_08001170",
            "code": "\n\n\nvoid setRegisterBits_08001170(uint inputParam)\n\n{\n  _DAT_e000ed0c = _DAT_e000ed0c & 0xf8ff | 0x5fa0000 | (inputParam & 7) << 8;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001170": "set_register_bits_08001170",
                "param_1": "inputParam"
            },
            "calling": [
                "FUN_08001128",
                "FUN_08004ccc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001194": {
            "entrypoint": "0x08001194",
            "current_name": "store_value_08001194",
            "code": "\n\n\nvoid store_value_08001194(uint input_value1,uint input_value2,uint input_value3)\n\n{\n  undefined shifted_value;\n  uint shift_amount;\n  uint offset;\n  uint updated_offset;\n  \n  offset = (uint)(_DAT_e000ed0c << 0x15) >> 0x1d;\n  shift_amount = 7 - offset;\n  updated_offset = offset + 4;\n  if (3 < shift_amount) {\n    shift_amount = 4;\n  }\n  if (updated_offset < 7) {\n    offset = 0;\n  }\n  shift_amount = (1 << (shift_amount & 0xff)) - 1;\n  if (6 < updated_offset) {\n    offset = offset - 3;\n  }\n  shifted_value = (undefined)\n          ((input_value3 & (1 << (offset & 0xff)) - 1U | (input_value2 & shift_amount) << (offset & 0xff)) << 4);\n  if (-1 < (int)input_value1) {\n    offset = input_value1 + 0xe000e100;\n  }\n  else {\n    shift_amount = 0xe000ed14;\n    offset = input_value1 & 0xf;\n  }\n  if (-1 < (int)input_value1) {\n    *(undefined *)(offset + 0x300) = shifted_value;\n  }\n  else {\n    *(undefined *)(shift_amount + offset) = shifted_value;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001194": "store_value_08001194",
                "param_1": "input_value1",
                "param_2": "input_value2",
                "param_3": "input_value3",
                "uVar1": "shifted_value",
                "uVar2": "shift_amount",
                "uVar3": "offset",
                "uVar4": "updated_offset"
            },
            "calling": [
                "FUN_08004e7c",
                "FUN_08001104",
                "FUN_08004514",
                "FUN_08004ccc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080011fc": {
            "entrypoint": "0x080011fc",
            "current_name": "set_bit_at_offset_080011fc",
            "code": "\nvoid setBitAtOffset_080011fc(uint offset)\n\n{\n  *(int *)((offset >> 5) * 4 + -0x1fff1f00) = 1 << (offset & 0x1f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080011fc": "set_bit_at_offset_080011fc",
                "param_1": "offset"
            },
            "calling": [
                "FUN_08004e7c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001214": {
            "entrypoint": "0x08001214",
            "current_name": "update_parameters_08001214",
            "code": "\n\n\nundefined4 updateParameters_08001214(int value)\n\n{\n  if (value - 1U < 0x1000000) {\n    _DAT_e000e014 = value - 1U;\n    DAT_e000ed23 = 0xf0;\n    _DAT_e000e018 = 0;\n    _DAT_e000e010 = 7;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08001214": "update_parameters_08001214",
                "param_1": "value"
            },
            "calling": [
                "FUN_08001104",
                "FUN_08004514"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001240": {
            "entrypoint": "0x08001240",
            "current_name": "update_flag_08001240",
            "code": "\n\n\nvoid updateFlag_08001240(int value)\n\n{\n  if (value == 4) {\n    _DAT_e000e010 = _DAT_e000e010 | 4;\n  }\n  else {\n    _DAT_e000e010 = _DAT_e000e010 & 0xfffffffb;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001240": "update_flag_08001240",
                "param_1": "value"
            },
            "calling": [
                "FUN_08004514"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001258": {
            "entrypoint": "0x08001258",
            "current_name": "FUNC_08001258",
            "code": "\nvoid FUNC_08001258(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001258": "FUNC_08001258"
            },
            "calling": [],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08001264": {
            "entrypoint": "0x08001264",
            "current_name": "process_parameters_08001264",
            "code": "\n\n\nvoid process_parameters_08001264(uint *output_data,uint *input_data)\n\n{\n  uint flag;\n  uint bit_mask;\n  uint value;\n  int index;\n  uint bit_index;\n  uint bit_num;\n  uint code;\n  uint *target_ptr;\n  int shift_amount;\n  \n  flag = 0;\n  bit_index = 0;\n  do {\n    bit_num = 1 << (bit_index & 0xff);\n    bit_mask = bit_num & *input_data;\n    if (bit_num == bit_mask) {\n      value = input_data[1];\n      if (value == 0x12) {\n        flag = input_data[3] + 0xc;\n      }\n      else if (value < 0x13) {\n        if (value == 2) {\n          flag = input_data[3] + 8;\n        }\n        else if (value < 3) {\n          if (value == 0) goto LAB_080013be;\n          if (value == 1) {\n            flag = input_data[3];\n          }\n        }\n        else if (value == 3) {\n          flag = 0;\n        }\n        else if (value == 0x11) {\n          flag = input_data[3] + 4;\n        }\n      }\n      else {\n        if (value != 0x10210000) {\n          if (value < 0x10210001) {\n            if (value != 0x10110000) {\n              code = 0x10120000;\nLAB_080013b8:\n              if (value != code) goto LAB_080012a8;\n            }\n          }\n          else if ((value != 0x10310000) && (value != 0x10320000)) {\n            code = 0x10220000;\n            goto LAB_080013b8;\n          }\n        }\nLAB_080013be:\n        flag = input_data[2];\n        if (flag == 0) {\n          flag = 4;\n        }\n        else {\n          if (flag == 1) {\n            output_data[4] = bit_num;\n          }\n          if (flag != 1) {\n            output_data[5] = bit_num;\n          }\n          flag = 8;\n        }\n      }\nLAB_080012a8:\n      if (bit_mask < 0x100) {\n        bit_num = *output_data;\n        value = bit_index << 2;\n        target_ptr = output_data;\n      }\n      else {\n        bit_num = output_data[1];\n        value = (bit_index + 0x3ffffff8) * 4;\n      }\n      if (0xff < bit_mask) {\n        target_ptr = output_data + 1;\n      }\n      *target_ptr = bit_num & ~(0xf << (value & 0xff)) | flag << (value & 0xff);\n      target_ptr = (uint *)input_data[1];\n      if (((uint)target_ptr & 0x10000000) != 0) {\n        _DAT_40021018 = _DAT_40021018 | 1;\n        shift_amount = (bit_index & 3) << 2;\n        if (output_data == (uint *)0x40010800) {\n          index = 0;\n        }\n        else if (output_data == (uint *)0x40010c00) {\n          index = 1;\n        }\n        else if (output_data == (uint *)0x40011000) {\n          index = 2;\n        }\n        else if (output_data == (uint *)0x40011400) {\n          index = 3;\n        }\n        else {\n          index = 4;\n        }\n        *(uint *)((bit_index & 0xfffffffc) + 0x40010008) =\n             index << shift_amount | *(uint *)((bit_index & 0xfffffffc) + 0x40010008) & ~(0xf << shift_amount);\n        if (((uint)target_ptr & 0x10000) == 0) {\n          _DAT_40010400 = _DAT_40010400 & ~bit_mask;\n        }\n        else {\n          _DAT_40010400 = _DAT_40010400 | bit_mask;\n        }\n        if (((uint)target_ptr & 0x20000) == 0) {\n          _DAT_40010404 = _DAT_40010404 & ~bit_mask;\n        }\n        else {\n          _DAT_40010404 = _DAT_40010404 | bit_mask;\n        }\n        if (((uint)target_ptr & 0x100000) == 0) {\n          _DAT_40010408 = _DAT_40010408 & ~bit_mask;\n        }\n        else {\n          _DAT_40010408 = _DAT_40010408 | bit_mask;\n        }\n        if (((uint)target_ptr & 0x200000) == 0) {\n          _DAT_4001040c = _DAT_4001040c & ~bit_mask;\n        }\n        else {\n          _DAT_4001040c = bit_mask | _DAT_4001040c;\n        }\n      }\n    }\n    bit_index = bit_index + 1;\n    if (bit_index == 0x10) {\n      return;\n    }\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08001264": "process_parameters_08001264",
                "param_1": "output_data",
                "param_2": "input_data",
                "uVar1": "flag",
                "uVar2": "bit_mask",
                "uVar3": "value",
                "iVar4": "index",
                "uVar5": "bit_index",
                "uVar6": "bit_num",
                "uVar7": "code",
                "unaff_r10": "target_ptr",
                "iVar8": "shift_amount"
            },
            "calling": [
                "FUN_08004e14",
                "FUN_08004e7c",
                "FUN_08004d48",
                "FUN_0800458c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001424": {
            "entrypoint": "0x08001424",
            "current_name": "set_param_08001424",
            "code": "\nvoid set_param_08001424(int base_address,int value,int is_shifted)\n\n{\n  if (is_shifted == 0) {\n    value = value << 0x10;\n  }\n  *(int *)(base_address + 0x10) = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001424": "set_param_08001424",
                "param_1": "base_address",
                "param_2": "value",
                "param_3": "is_shifted"
            },
            "calling": [
                "FUN_08004490",
                "FUN_08003f3c",
                "FUN_0800458c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800142e": {
            "entrypoint": "0x0800142e",
            "current_name": "apply_xor_0800142e",
            "code": "\nvoid applyXOR_0800142e(int inputBuffer,uint key)\n\n{\n  *(uint *)(inputBuffer + 0xc) = key ^ *(uint *)(inputBuffer + 0xc);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800142e": "apply_xor_0800142e",
                "param_1": "inputBuffer",
                "param_2": "key"
            },
            "calling": [
                "FUN_08004490"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001436": {
            "entrypoint": "0x08001436",
            "current_name": "update_flags_08001436",
            "code": "\nundefined4 updateFlags_08001436(int *param1)\n\n{\n  int value;\n  \n  value = *param1;\n  if ((*(uint *)(value + 0x14) & 0x400) != 0) {\n    *(uint *)(value + 0x14) = *(uint *)(value + 0x14) & 0xfffffbff;\n    status = 4;\n    *(undefined *)((int)param1 + 0x35) = 0x20;\n    *(undefined *)(param1 + 0xd) = 0;\n    return 1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001436": "update_flags_08001436",
                "param_": "param",
                "iVar1": "value",
                "param_1[0xe]": "status"
            },
            "calling": [
                "FUN_080014e2"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001460": {
            "entrypoint": "0x08001460",
            "current_name": "check_access_08001460",
            "code": "\nundefined4 checkAccess_08001460(uint **data,uint flags,uint timeout)\n\n{\n  int startTime;\n  int currentTime;\n  uint accessFlag;\n  uint *ptrToData;\n  \n  startTime = FUN_0800115c();\n  do {\n    ptrToData = *data;\n    if ((flags << 8) >> 0x18 == 1) {\n      accessFlag = ptrToData[5];\n    }\n    else {\n      accessFlag = ptrToData[6];\n    }\n    if ((flags & 0xffff & ~accessFlag) == 0) {\n      return 0;\n    }\n    if ((int)(ptrToData[5] << 0x15) < 0) {\n      *ptrToData = *ptrToData | 0x200;\n      ptrToData[5] = ptrToData[5] & 0xfffffbff;\n      data[0xe] = (uint *)0x4;\n      *(undefined *)((int)data + 0x35) = 0x20;\n      *(undefined *)(data + 0xd) = 0;\n      return 1;\n    }\n  } while ((timeout == 0xffffffff) ||\n          ((timeout != 0 && (currentTime = FUN_0800115c(), (uint)(currentTime - startTime) <= timeout))));\n  *(undefined *)((int)data + 0x35) = 0x20;\n  *(undefined *)(data + 0xd) = 0;\n  return 3;\n}\n\n",
            "renaming": {
                "FUN_08001460": "check_access_08001460",
                "param_1": "data",
                "param_2": "flags",
                "param_3": "timeout",
                "iVar1": "startTime",
                "iVar2": "currentTime",
                "uVar3": "accessFlag",
                "puVar4": "ptrToData"
            },
            "calling": [
                "FUN_08001530",
                "FUN_080015e8"
            ],
            "called": [
                "FUN_0800115c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080014e2": {
            "entrypoint": "0x080014e2",
            "current_name": "check_validity_080014e2",
            "code": "\nundefined4 checkValidity_080014e2(int *inputArray,uint length)\n\n{\n  int currentValue;\n  int status;\n  \n  currentValue = FUN_0800115c();\n  while( true ) {\n    if (*(int *)(*inputArray + 0x14) << 0x18 < 0) {\n      return 0;\n    }\n    status = FUN_08001436(inputArray);\n    if (status != 0) break;\n    if ((length != 0xffffffff) &&\n       ((length == 0 || (status = FUN_0800115c(), length < (uint)(status - currentValue))))) {\n      inputArray[0xe] = inputArray[0xe] | 0x20;\n      *(undefined *)((int)inputArray + 0x35) = 0x20;\n      *(undefined *)(inputArray + 0xd) = 0;\n      return 3;\n    }\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_080014e2": "check_validity_080014e2",
                "param_1": "inputArray",
                "param_2": "length",
                "iVar1": "currentValue",
                "iVar2": "status"
            },
            "calling": [
                "FUN_08001530",
                "FUN_08001828",
                "FUN_080015e8"
            ],
            "called": [
                "FUN_0800115c",
                "FUN_08001436"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001530": {
            "entrypoint": "0x08001530",
            "current_name": "update_and_process_data_08001530",
            "code": "\nundefined4 updateAndProcessData_08001530(uint **dataPtr,uint value1,uint value2,int condition,uint flag)\n\n{\n  int returnValue1;\n  int returnValue2;\n  uint *tempPtr;\n  uint **tempDataPtr;\n  uint tempValue1;\n  uint tempValue2;\n  \n  **dataPtr = **dataPtr | 0x100;\n  tempDataPtr = dataPtr;\n  tempValue1 = value1;\n  tempValue2 = value2;\n  returnValue1 = FUN_0800115c();\n  do {\n    tempPtr = *dataPtr;\n    do {\n      if ((int)(tempPtr[5] << 0x1f) < 0) {\n        tempPtr[4] = value1 & 0xfe;\n        returnValue1 = FUN_08001460(dataPtr,0x10002,flag,tempPtr,tempDataPtr,tempValue1,tempValue2);\n        if (returnValue1 == 0) {\n          returnValue1 = FUN_080014e2(dataPtr,flag,(*dataPtr)[5],(*dataPtr)[6]);\n          if (returnValue1 == 0) {\n            tempPtr = *dataPtr;\n            if (condition == 1) {\nLAB_080015ca:\n              tempPtr[4] = value2 & 0xff;\n              return 0;\n            }\n            tempPtr[4] = value2 >> 8;\n            returnValue1 = FUN_080014e2(dataPtr,flag);\n            if (returnValue1 == 0) {\n              tempPtr = *dataPtr;\n              goto LAB_080015ca;\n            }\n          }\n          if (dataPtr[0xe] != (uint *)0x4) {\n            return 3;\n          }\n          **dataPtr = **dataPtr | 0x200;\n        }\n        else if (dataPtr[0xe] != (uint *)0x4) {\n          return 3;\n        }\n        return 1;\n      }\n    } while (flag == 0xffffffff);\n    if ((flag == 0) || (returnValue2 = FUN_0800115c(), flag < (uint)(returnValue2 - returnValue1))) {\n      *(undefined *)((int)dataPtr + 0x35) = 0x20;\n      *(undefined *)(dataPtr + 0xd) = 0;\n      return 3;\n    }\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08001530": "update_and_process_data_08001530",
                "param_1": "dataPtr",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "condition",
                "param_5": "flag",
                "iVar1": "returnValue1",
                "iVar2": "returnValue2",
                "puVar3": "tempPtr",
                "ppuVar4": "tempDataPtr",
                "uVar5": "tempValue1",
                "uVar6": "tempValue2"
            },
            "calling": [
                "FUN_08001828"
            ],
            "called": [
                "FUN_080014e2",
                "FUN_0800115c",
                "FUN_08001460"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080015e8": {
            "entrypoint": "0x080015e8",
            "current_name": "process_data_080015e8",
            "code": "\nundefined4 processData_080015e8(uint **dataPointer,uint value1,uint value2,int condition,uint limit)\n\n{\n  int result;\n  int tempResult;\n  uint *ptrData;\n  uint **ptrPtrData;\n  uint var1;\n  uint var2;\n  \n  ptrData = *dataPointer;\n  *ptrData = *ptrData | 0x400;\n  *ptrData = *ptrData | 0x100;\n  ptrPtrData = dataPointer;\n  var1 = value1;\n  var2 = value2;\n  result = FUN_0800115c();\nLAB_0800160e:\n  ptrData = *dataPointer;\n  while (-1 < (int)(ptrData[5] << 0x1f)) {\n    if (limit != 0xffffffff) goto code_r0x08001658;\n  }\n  ptrData[4] = value1 & 0xfe;\n  result = FUN_08001460(dataPointer,0x10002,limit,ptrData,ptrPtrData,var1,var2);\n  if (result != 0) goto LAB_080016ba;\n  result = FUN_080014e2(dataPointer,limit,(*dataPointer)[5],(*dataPointer)[6]);\n  if (result == 0) {\n    ptrData = *dataPointer;\n    if (condition != 1) {\n      ptrData[4] = value2 >> 8;\n      result = FUN_080014e2(dataPointer,limit);\n      if (result != 0) goto LAB_08001642;\n      ptrData = *dataPointer;\n    }\n    ptrData[4] = value2 & 0xff;\n    result = FUN_080014e2(dataPointer,limit);\n    if (result == 0) {\n      **dataPointer = **dataPointer | 0x100;\n      result = FUN_0800115c();\n      do {\n        do {\n          if ((int)((*dataPointer)[5] << 0x1f) < 0) {\n            (*dataPointer)[4] = value1 & 0xff | 1;\n            result = FUN_08001460(dataPointer,0x10002,limit);\n            if (result == 0) {\n              return 0;\n            }\nLAB_080016ba:\n            if (dataPointer[0xe] != (uint *)0x4) {\n              return 3;\n            }\n            return 1;\n          }\n        } while (limit == 0xffffffff);\n      } while ((limit != 0) && (tempResult = FUN_0800115c(), (uint)(tempResult - result) <= limit));\nLAB_0800165a:\n      *(undefined *)((int)dataPointer + 0x35) = 0x20;\n      *(undefined *)(dataPointer + 0xd) = 0;\n      return 3;\n    }\n  }\nLAB_08001642:\n  if (dataPointer[0xe] == (uint *)0x4) {\n    **dataPointer = **dataPointer | 0x200;\n    return 1;\n  }\n  return 3;\ncode_r0x08001658:\n  if ((limit == 0) || (tempResult = FUN_0800115c(), limit < (uint)(tempResult - result)))\n  goto LAB_0800165a;\n  goto LAB_0800160e;\n}\n\n",
            "renaming": {
                "FUN_080015e8": "process_data_080015e8",
                "param_1": "dataPointer",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "condition",
                "param_5": "limit",
                "iVar1": "result",
                "iVar2": "tempResult",
                "puVar3": "ptrData",
                "ppuVar4": "ptrPtrData",
                "uVar5": "var1",
                "uVar6": "var2"
            },
            "calling": [
                "FUN_08001938"
            ],
            "called": [
                "FUN_0800115c",
                "FUN_080014e2",
                "FUN_08001460"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080016f4": {
            "entrypoint": "0x080016f4",
            "current_name": "update_data_state_080016f4",
            "code": "\nundefined4 updateDataState_080016f4(int *dataPtr,uint dataSize)\n\n{\n  int initialValue;\n  int currentValue;\n  \n  initialValue = FUN_0800115c();\n  while( true ) {\n    currentValue = *dataPtr;\n    if ((*(uint *)(currentValue + 0x14) & 0x40) != 0) {\n      return 0;\n    }\n    if (*(int *)(currentValue + 0x14) << 0x1b < 0) break;\n    if ((dataSize == 0) || (currentValue = FUN_0800115c(), dataSize < (uint)(currentValue - initialValue))) {\n      dataPtr[0xe] = dataPtr[0xe] | 0x20;\n      *(undefined *)((int)dataPtr + 0x35) = 0x20;\n      *(undefined *)(dataPtr + 0xd) = 0;\n      return 3;\n    }\n  }\n  *(uint *)(currentValue + 0x14) = *(uint *)(currentValue + 0x14) & 0xffffffef;\n  dataPtr[0xe] = 0;\n  *(undefined *)(dataPtr + 0xd) = 0;\n  *(undefined *)((int)dataPtr + 0x35) = 0x20;\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_080016f4": "update_data_state_080016f4",
                "param_1": "dataPtr",
                "param_2": "dataSize",
                "iVar1": "initialValue",
                "iVar2": "currentValue"
            },
            "calling": [
                "FUN_08001938"
            ],
            "called": [
                "FUN_0800115c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001754": {
            "entrypoint": "0x08001754",
            "current_name": "initialize_data_08001754",
            "code": "\nundefined4 initializeData_08001754(uint **data)\n\n{\n  uint tempVar1;\n  uint tempVar2;\n  uint *ptrVar3;\n  uint *ptrVar4;\n  uint *ptrVar5;\n  uint tempVar6;\n  undefined8 tempVar7;\n  \n  if (data != (uint **)0x0) {\n    if (*(char *)((int)data + 0x35) == '\\0') {\n      *(undefined *)(data + 0xd) = 0;\n      FUN_08004d48();\n    }\n    *(undefined *)((int)data + 0x35) = 0x24;\n    **data = **data & 0xfffffffe;\n    tempVar7 = FUN_08002220();\n    tempVar2 = (uint)((ulonglong)tempVar7 >> 0x20);\n    tempVar1 = (uint)tempVar7;\n    ptrVar4 = data[1];\n    tempVar6 = tempVar1 / 1000000;\n    if ((uint *)0x186a0 < ptrVar4) {\n      tempVar2 = 300;\n    }\n    ptrVar3 = *data;\n    if ((uint *)0x186a0 < ptrVar4) {\n      tempVar2 = tempVar6 * tempVar2;\n    }\n    ptrVar3[1] = tempVar6;\n    if ((uint *)0x186a0 < ptrVar4) {\n      tempVar6 = tempVar2 / 1000;\n    }\n    ptrVar3[8] = tempVar6 + 1;\n    if (ptrVar4 < (uint *)0x186a1) {\n      tempVar1 = tempVar1 / (uint)((int)ptrVar4 << 1);\n      if ((tempVar1 & 0xfff) < 4) {\n        tempVar1 = 4;\n      }\n    }\n    else {\n      if (data[2] == (uint *)0x0) {\n        tempVar1 = tempVar1 / (uint)((int)ptrVar4 * 3) | 0x8000;\n      }\n      else {\n        tempVar1 = tempVar1 / (uint)((int)ptrVar4 * 0x19) | 0xc000;\n      }\n      if ((tempVar1 & 0xfff) == 0) {\n        tempVar1 = 1;\n      }\n    }\n    ptrVar4 = data[8];\n    ptrVar5 = data[7];\n    ptrVar3[7] = tempVar1;\n    *ptrVar3 = (uint)ptrVar5 | (uint)ptrVar4;\n    ptrVar3[2] = (uint)data[4] | (uint)data[3];\n    ptrVar3[3] = (uint)data[5] | (uint)data[6];\n    *ptrVar3 = *ptrVar3 | 1;\n    data[0xe] = (uint *)0x0;\n    *(undefined *)((int)data + 0x35) = 0x20;\n    *(undefined *)((int)data + 0x36) = 0;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08001754": "initialize_data_08001754",
                "param_1": "data",
                "uVar1": "tempVar1",
                "uVar2": "tempVar2",
                "puVar3": "ptrVar3",
                "puVar4": "ptrVar4",
                "puVar5": "ptrVar5",
                "uVar6": "tempVar6",
                "uVar7": "tempVar7"
            },
            "calling": [
                "FUN_0800458c"
            ],
            "called": [
                "FUN_08002220",
                "FUN_08004d48"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001828": {
            "entrypoint": "0x08001828",
            "current_name": "process_data_08001828",
            "code": "\nundefined4\nprocessData_08001828(uint **data,undefined4 arg1,undefined4 arg2,undefined4 arg3,byte *buffer,\n            short bufferSize,undefined4 arg4)\n\n{\n  int returnValue;\n  int counter;\n  uint *ptr;\n  uint value;\n  \n  if (*(char *)((int)data + 0x35) == ' ') {\n    if (buffer == (byte *)0x0) {\n      return 1;\n    }\n    if (bufferSize == 0) {\n      return 1;\n    }\n    returnValue = FUN_0800115c();\n    do {\n      ptr = *data;\n      if ((~ptr[6] & 2) != 0) {\n        if (*(char *)(data + 0xd) == '\\x01') {\n          return 2;\n        }\n        value = *ptr;\n        *(undefined *)(data + 0xd) = 1;\n        *ptr = value & 0xfffff7ff;\n        *(undefined *)((int)data + 0x35) = 0x21;\n        *(undefined *)((int)data + 0x36) = 0x40;\n        data[0xe] = (uint *)0x0;\n        returnValue = FUN_08001530(data,arg1,arg2,arg3,arg4);\n        if (returnValue != 0) {\n          *(undefined *)(data + 0xd) = 0;\n          if (data[0xe] == (uint *)0x4) {\n            return 1;\n          }\n          return 3;\n        }\n        goto LAB_080018e2;\n      }\n      counter = FUN_0800115c();\n    } while ((uint)(counter - returnValue) < 0x2711);\n    *(undefined *)(data + 0xd) = 0;\n    *(undefined *)((int)data + 0x35) = 0x20;\n  }\n  return 2;\n  while (bufferSize != 0) {\nLAB_080018e2:\n    returnValue = FUN_080014e2(data,arg4);\n    if (returnValue != 0) goto LAB_080018ee;\n    ptr = *data;\n    ptr[4] = (uint)*buffer;\n    if ((int)(ptr[5] << 0x1d) < 0) {\n      if ((short)(bufferSize + -1) == 0) break;\n      bufferSize = bufferSize + -2;\n      ptr[4] = (uint)buffer[1];\n      buffer = buffer + 2;\n    }\n    else {\n      buffer = buffer + 1;\n      bufferSize = bufferSize + -1;\n    }\n  }\n  returnValue = FUN_080014e2(data,arg4);\n  if (returnValue == 0) {\n    **data = **data | 0x200;\n    *(undefined *)(data + 0xd) = 0;\n    *(undefined *)((int)data + 0x35) = 0x20;\n    *(undefined *)((int)data + 0x36) = 0;\n    return 0;\n  }\nLAB_080018ee:\n  if (data[0xe] == (uint *)0x4) {\n    **data = **data | 0x200;\n    return 1;\n  }\n  return 3;\n}\n\n",
            "renaming": {
                "FUN_08001828": "process_data_08001828",
                "param_1": "data",
                "param_2": "arg1",
                "param_3": "arg2",
                "param_4": "arg3",
                "param_5": "buffer",
                "param_6": "bufferSize",
                "param_7": "arg4",
                "iVar1": "returnValue",
                "iVar2": "counter",
                "puVar3": "ptr",
                "uVar4": "value"
            },
            "calling": [
                "FUN_0800403c"
            ],
            "called": [
                "FUN_08001530",
                "FUN_0800115c",
                "FUN_080014e2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001938": {
            "entrypoint": "0x08001938",
            "current_name": "process_data_08001938",
            "code": "\nundefined4\nprocessData_08001938(uint **paramList,undefined4 param2,undefined4 param3,undefined4 param4,\n            undefined *dataBuffer,ushort bufferSize,uint timeout)\n\n{\n  undefined *tempPtr1;\n  int startTime;\n  int currentTime;\n  uint *currentPtr;\n  uint value;\n  undefined *tempPtr2;\n  bool isNegative;\n  \n  if (*(char *)((int)paramList + 0x35) != ' ') {\n    return 2;\n  }\n  if (dataBuffer == (undefined *)0x0) {\n    return 1;\n  }\n  if (bufferSize == 0) {\n    return 1;\n  }\n  startTime = FUN_0800115c();\n  while (currentPtr = *paramList, (~currentPtr[6] & 2) == 0) {\n    currentTime = FUN_0800115c();\n    if (10000 < (uint)(currentTime - startTime)) {\n      *(undefined *)(paramList + 0xd) = 0;\n      *(undefined *)((int)paramList + 0x35) = 0x20;\n      return 2;\n    }\n  }\n  if (*(char *)(paramList + 0xd) == '\\x01') {\n    return 2;\n  }\n  value = *currentPtr;\n  *(undefined *)(paramList + 0xd) = 1;\n  *currentPtr = value & 0xfffff7ff;\n  *(undefined *)((int)paramList + 0x35) = 0x22;\n  *(undefined *)((int)paramList + 0x36) = 0x40;\n  paramList[0xe] = (uint *)0x0;\n  startTime = FUN_080015e8(paramList,param2,param3,param4,timeout);\n  if (startTime != 0) {\n    *(undefined *)(paramList + 0xd) = 0;\n    if (paramList[0xe] == (uint *)0x4) {\n      return 1;\n    }\n    return 3;\n  }\n  currentPtr = *paramList;\n  value = *currentPtr;\n  if (bufferSize == 1) {\n    *currentPtr = value & 0xfffffbff;\n    disableIRQinterrupts();\n    **paramList = **paramList | 0x200;\n    enableIRQinterrupts();\n    startTime = FUN_080016f4(paramList,timeout);\n    if (startTime == 0) {\n      *dataBuffer = (char)(*paramList)[4];\nLAB_08001ab8:\n      *(undefined *)((int)paramList + 0x35) = 0x20;\n      *(undefined *)((int)paramList + 0x36) = 0;\n      *(undefined *)(paramList + 0xd) = 0;\n      return 0;\n    }\nLAB_08001a18:\n    if (paramList[0xe] != (uint *)0x20) {\n      return 1;\n    }\n    return 3;\n  }\n  if (bufferSize == 2) {\n    *currentPtr = value | 0x800;\n    disableIRQinterrupts();\n    **paramList = **paramList & 0xfffffbff;\n    enableIRQinterrupts();\n  }\n  else {\n    *currentPtr = value | 0x400;\n    while (3 < bufferSize) {\n      startTime = FUN_080016f4(paramList,timeout);\n      if (startTime != 0) goto LAB_08001a18;\n      *dataBuffer = (char)(*paramList)[4];\n      currentPtr = *paramList;\n      isNegative = (int)(currentPtr[5] << 0x1d) < 0;\n      if (isNegative) {\n        currentPtr = (uint *)currentPtr[4];\n        tempPtr2 = dataBuffer + 2;\n        bufferSize = bufferSize - 2;\n      }\n      else {\n        tempPtr2 = dataBuffer + 1;\n        bufferSize = bufferSize - 1;\n      }\n      tempPtr1 = dataBuffer + 1;\n      dataBuffer = tempPtr2;\n      if (isNegative) {\n        *tempPtr1 = (char)currentPtr;\n      }\n    }\n    if (bufferSize != 2) {\n      startTime = FUN_0800115c();\n      do {\n        currentPtr = *paramList;\n        do {\n          if ((int)(currentPtr[5] << 0x1d) < 0) {\n            *currentPtr = *currentPtr & 0xfffffbff;\n            disableIRQinterrupts();\n            *dataBuffer = (char)(*paramList)[4];\n            startTime = FUN_0800115c();\n            goto LAB_08001b3a;\n          }\n        } while (timeout == 0xffffffff);\n      } while ((timeout != 0) && (currentTime = FUN_0800115c(), (uint)(currentTime - startTime) <= timeout));\n      goto LAB_08001afa;\n    }\n  }\n  startTime = FUN_0800115c();\n  do {\n    do {\n      if ((int)((*paramList)[5] << 0x1d) < 0) {\n        disableIRQinterrupts();\n        currentPtr = *paramList;\n        *currentPtr = *currentPtr | 0x200;\n        *dataBuffer = (char)currentPtr[4];\n        enableIRQinterrupts();\n        dataBuffer[1] = (char)(*paramList)[4];\n        goto LAB_08001ab8;\n      }\n    } while (timeout == 0xffffffff);\n  } while ((timeout != 0) && (currentTime = FUN_0800115c(), (uint)(currentTime - startTime) <= timeout));\nLAB_08001afa:\n  *(undefined *)((int)paramList + 0x35) = 0x20;\n  *(undefined *)(paramList + 0xd) = 0;\n  return 3;\nLAB_08001b3a:\n  do {\n    currentPtr = *paramList;\n    do {\n      if ((int)(currentPtr[5] << 0x1d) < 0) {\n        *currentPtr = *currentPtr | 0x200;\n        dataBuffer[1] = (char)currentPtr[4];\n        enableIRQinterrupts();\n        dataBuffer[2] = (char)(*paramList)[4];\n        goto LAB_08001ab8;\n      }\n    } while (timeout == 0xffffffff);\n  } while ((timeout != 0) && (currentTime = FUN_0800115c(), (uint)(currentTime - startTime) <= timeout));\n  goto LAB_08001afa;\n}\n\n",
            "renaming": {
                "FUN_08001938": "process_data_08001938",
                "param_1": "paramList",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "dataBuffer",
                "param_6": "bufferSize",
                "param_7": "timeout",
                "puVar1": "tempPtr1",
                "iVar2": "startTime",
                "iVar3": "currentTime",
                "puVar4": "currentPtr",
                "uVar5": "value",
                "puVar6": "tempPtr2",
                "bVar7": "isNegative"
            },
            "calling": [
                "FUN_0800407c",
                "FUN_080040b8"
            ],
            "called": [
                "FUN_0800115c",
                "FUN_080016f4",
                "FUN_080015e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001b58": {
            "entrypoint": "0x08001b58",
            "current_name": "check_conditions_08001b58",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08001eec) */\n/* WARNING: Removing unreachable block (ram,0x08001ee8) */\n\n\nundefined4 check_conditions_08001b58(int *input_params)\n\n{\n  int var1;\n  int var2;\n  \n  if (*input_params << 0x1f < 0) {\n    if (((_DAT_40021004 & 0xc) == 4) ||\n       (((_DAT_40021004 & 0xc) == 8 && ((int)(_DAT_40021004 << 0xf) < 0)))) {\n      if (((int)((_DAT_40021000 >> 0x11) << 0x1f) < 0) && (input_params[1] == 0)) {\n        return 1;\n      }\n    }\n    else {\n      var1 = input_params[1];\n      if (var1 == 0x10000) {\nLAB_08001c1e:\n        _DAT_40021000 = _DAT_40021000 | 0x10000;\n      }\n      else {\n        if (var1 == 0) {\n          _DAT_40021000 = _DAT_40021000 & 0xfffaffff;\n          var1 = FUN_0800115c();\n          while ((int)((_DAT_40021000 >> 0x11) << 0x1f) < 0) {\n            var2 = FUN_0800115c();\n            if (100 < (uint)(var2 - var1)) {\n              return 3;\n            }\n          }\n          goto LAB_08001b64;\n        }\n        if (var1 == 0x50000) {\n          _DAT_40021000 = _DAT_40021000 | 0x40000;\n          goto LAB_08001c1e;\n        }\n        _DAT_40021000 = _DAT_40021000 & 0xfffaffff;\n      }\n      var1 = FUN_0800115c();\n      while (-1 < (int)((_DAT_40021000 >> 0x11) << 0x1f)) {\n        var2 = FUN_0800115c();\n        if (100 < (uint)(var2 - var1)) {\n          return 3;\n        }\n      }\n    }\n  }\nLAB_08001b64:\n  if (*input_params << 0x1e < 0) {\n    if (((_DAT_40021004 & 0xc) == 0) ||\n       (((_DAT_40021004 & 0xc) == 8 && (-1 < (int)(_DAT_40021004 << 0xf))))) {\n      if (((int)((_DAT_40021000 >> 1) << 0x1f) < 0) && (input_params[4] != 1)) {\n        return 1;\n      }\n    }\n    else {\n      iRam42420000 = input_params[4];\n      if (iRam42420000 == 0) {\n        var1 = FUN_0800115c();\n        while ((int)((_DAT_40021000 >> 1) << 0x1f) < 0) {\n          var2 = FUN_0800115c();\n          if (2 < (uint)(var2 - var1)) {\n            return 3;\n          }\n        }\n        goto LAB_08001b6c;\n      }\n      iRam42420000 = 1;\n      var1 = FUN_0800115c();\n      while (-1 < (int)((_DAT_40021000 >> 1) << 0x1f)) {\n        var2 = FUN_0800115c();\n        if (2 < (uint)(var2 - var1)) {\n          return 3;\n        }\n      }\n    }\n    _DAT_40021000 = input_params[5] << 3 | _DAT_40021000 & 0xffffff07;\n  }\nLAB_08001b6c:\n  if (*input_params << 0x1c < 0) {\n    iRam42420480 = input_params[6];\n    if (iRam42420480 == 0) {\n      var1 = FUN_0800115c();\n      while ((int)((_DAT_40021024 >> 1) << 0x1f) < 0) {\n        var2 = FUN_0800115c();\n        if (2 < (uint)(var2 - var1)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      iRam42420480 = 1;\n      var1 = FUN_0800115c();\n      while (-1 < (int)((_DAT_40021024 >> 1) << 0x1f)) {\n        var2 = FUN_0800115c();\n        if (2 < (uint)(var2 - var1)) {\n          return 3;\n        }\n      }\n      FUNC_08001168(1);\n    }\n  }\n  if (-1 < *input_params << 0x1d) goto LAB_08001bc2;\n  _DAT_4002101c = _DAT_4002101c | 0x10000000;\n  _DAT_40007000 = _DAT_40007000 | 0x100;\n  var1 = FUN_0800115c();\n  while (-1 < (int)(_DAT_40007000 << 0x17)) {\n    var2 = FUN_0800115c();\n    if (100 < (uint)(var2 - var1)) {\n      return 3;\n    }\n  }\n  var1 = input_params[3];\n  if (var1 == 1) {\nLAB_08001e1a:\n    _DAT_40021020 = _DAT_40021020 | 1;\n  }\n  else {\n    if (var1 == 0) {\n      _DAT_40021020 = _DAT_40021020 & 0xfffffffa;\n      var1 = FUN_0800115c();\n      while ((int)((_DAT_40021020 >> 1) << 0x1f) < 0) {\n        var2 = FUN_0800115c();\n        if (5000 < (uint)(var2 - var1)) {\n          return 3;\n        }\n      }\n      goto LAB_08001bc2;\n    }\n    if (var1 == 5) {\n      _DAT_40021020 = _DAT_40021020 | 4;\n      goto LAB_08001e1a;\n    }\n    _DAT_40021020 = _DAT_40021020 & 0xfffffffa;\n  }\n  var1 = FUN_0800115c();\n  while (-1 < (int)((_DAT_40021020 >> 1) << 0x1f)) {\n    var2 = FUN_0800115c();\n    if (5000 < (uint)(var2 - var1)) {\n      return 3;\n    }\n  }\nLAB_08001bc2:\n  if (input_params[7] == 0) {\n    return 0;\n  }\n  if ((_DAT_40021004 & 0xc) != 8) {\n    if (input_params[7] != 2) {\n      uRam42420060 = 0;\n      var1 = FUN_0800115c();\n      do {\n        if (-1 < (int)((_DAT_40021000 >> 0x19) << 0x1f)) {\n          return 0;\n        }\n        var2 = FUN_0800115c();\n      } while ((uint)(var2 - var1) < 3);\n      return 3;\n    }\n    uRam42420060 = 0;\n    var1 = FUN_0800115c();\n    do {\n      if (-1 < (int)((_DAT_40021000 >> 0x19) << 0x1f)) {\n        if (input_params[8] == 0x10000) {\n          _DAT_40021004 = _DAT_40021004 & 0xfffdffff | input_params[2];\n        }\n        _DAT_40021004 = input_params[8] | input_params[9] | _DAT_40021004 & 0xffc2ffff;\n        uRam42420060 = 1;\n        var1 = FUN_0800115c();\n        do {\n          if ((int)((_DAT_40021000 >> 0x19) << 0x1f) < 0) {\n            return 0;\n          }\n          var2 = FUN_0800115c();\n        } while ((uint)(var2 - var1) < 3);\n        return 3;\n      }\n      var2 = FUN_0800115c();\n    } while ((uint)(var2 - var1) < 3);\n    return 3;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08001b58": "check_conditions_08001b58",
                "param_1": "input_params",
                "iVar1": "var1",
                "iVar2": "var2"
            },
            "calling": [
                "FUN_08004514"
            ],
            "called": [
                "FUN_0800115c",
                "FUN_08001168"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002008": {
            "entrypoint": "0x08002008",
            "current_name": "calculate_mpu_clock_speed_08002008",
            "code": "\n\n\nint calculateMpuClockSpeed_08002008(void)\n\n{\n  undefined4 prescalerValue;\n  int mpuClockSpeed;\n  undefined4 prescaler;\n  undefined4 *dataPointer;\n  uint clockSpeed;\n  undefined4 *prescalerPointer;\n  byte clockFlags [4];\n  undefined4 clockPrescalers [5];\n  \n  dataPointer = &DAT_080072f0;\n  prescalerPointer = clockPrescalers;\n  do {\n    prescalerValue = *dataPointer;\n    prescaler = dataPointer[1];\n    dataPointer = dataPointer + 2;\n    *prescalerPointer = prescalerValue;\n    prescalerPointer[1] = prescaler;\n    prescalerPointer = prescalerPointer + 2;\n  } while (dataPointer != (undefined4 *)\"../Src/MPU9250.c\");\n  clockFlags[0] = 1;\n  clockFlags[1] = 2;\n  if ((_DAT_40021004 & 0xc) == 8) {\n    if ((int)(_DAT_40021004 << 0xf) < 0) {\n      clockSpeed = 8000000 / clockFlags[(_DAT_40021004 & 0x20000) >> 0x11];\n    }\n    else {\n      clockSpeed = 4000000;\n    }\n    mpuClockSpeed = clockSpeed * *(byte *)((int)clockPrescalers + ((_DAT_40021004 & 0x3c0000) >> 0x12));\n  }\n  else {\n    mpuClockSpeed = 8000000;\n  }\n  return mpuClockSpeed;\n}\n\n",
            "renaming": {
                "FUN_08002008": "calculate_mpu_clock_speed_08002008",
                "local_24": "clockFlags",
                "local_20": "clockPrescalers",
                "puVar4": "dataPointer",
                "uVar1": "prescalerValue",
                "uVar3": "prescaler",
                "puVar6": "prescalerPointer",
                "uVar5": "clockSpeed",
                "iVar2": "mpuClockSpeed"
            },
            "calling": [
                "FUN_0800209c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800209c": {
            "entrypoint": "0x0800209c",
            "current_name": "validate_and_process_data_0800209c",
            "code": "\n\n\nundefined4 validate_and_process_data_0800209c(uint *data,uint size)\n\n{\n  char flag1;\n  char flag2;\n  int shifted_result;\n  uint value;\n  int comparison_result;\n  uint shifted_value;\n  \n  if ((size <= (_DAT_40022000 & 7)) ||\n     (_DAT_40022000 = _DAT_40022000 & 0xfffffff8 | size, size == (size & 7))) {\n    if ((int)(*data << 0x1e) < 0) {\n      _DAT_40021004 = _DAT_40021004 & 0xffffff0f | data[2];\n    }\n    shifted_result = *data << 0x1f;\n    if (-1 < shifted_result) {\nLAB_080020ba:\n      if ((size < (_DAT_40022000 & 7)) &&\n         (_DAT_40022000 = _DAT_40022000 & 0xfffffff8 | size, size != (size & 7))) {\n        return 1;\n      }\n      if ((*data & 4) != 0) {\n        _DAT_40021004 = _DAT_40021004 & 0xfffff8ff | data[3];\n      }\n      if ((int)(*data << 0x1c) < 0) {\n        _DAT_40021004 = _DAT_40021004 & 0xffffc7ff | data[4] << 3;\n      }\n      value = FUN_08002008();\n      DAT_200001bc = value >> (&DAT_08007361)[(_DAT_40021004 & 0xf0) >> 4];\n      FUN_08001104(0);\n      return 0;\n    }\n    value = data[1];\n    if (value == 1) {\n      flag2 = '\\x01';\n      flag1 = '\\0';\n    }\n    else {\n      shifted_value = _DAT_40021000;\n      if (value == 2) goto LAB_08002176;\n      flag2 = '\\0';\n      flag1 = '\\x01';\n    }\n    shifted_value = (_DAT_40021000 >>\n            (LZCOUNT((uint)(byte)(flag1 << 6) << 0x18 | (uint)(byte)(flag2 << 6) << 8) & 0x1fU)) <<\n            0x1f;\n    if ((int)shifted_value < 0) {\nLAB_08002176:\n      _DAT_40021004 = _DAT_40021004 & 0xfffffffc | value;\n      shifted_result = FUN_0800115c(shifted_result,shifted_value);\n      if (data[1] == 1) {\n        do {\n          if ((_DAT_40021004 & 0xc) == 4) goto LAB_080020ba;\n          comparison_result = FUN_0800115c();\n        } while ((uint)(comparison_result - shifted_result) < 0x1389);\n      }\n      else if (data[1] == 2) {\n        do {\n          if ((_DAT_40021004 & 0xc) == 8) goto LAB_080020ba;\n          comparison_result = FUN_0800115c();\n        } while ((uint)(comparison_result - shifted_result) < 0x1389);\n      }\n      else {\n        do {\n          if ((_DAT_40021004 & 0xc) == 0) goto LAB_080020ba;\n          comparison_result = FUN_0800115c();\n        } while ((uint)(comparison_result - shifted_result) < 0x1389);\n      }\n      return 3;\n    }\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_0800209c": "validate_and_process_data_0800209c",
                "param_1": "data",
                "param_2": "size",
                "cVar1": "flag1",
                "cVar2": "flag2",
                "iVar3": "shifted_result",
                "uVar4": "value",
                "iVar5": "comparison_result",
                "uVar6": "shifted_value"
            },
            "calling": [
                "FUN_08004514"
            ],
            "called": [
                "FUN_08001104",
                "FUN_0800115c",
                "FUN_08002008"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002214": {
            "entrypoint": "0x08002214",
            "current_name": "get_data_at_address_08002214",
            "code": "\nundefined4 get_data_at_address_08002214(void)\n\n{\n  return DAT_200001bc;\n}\n\n",
            "renaming": {
                "FUN_08002214": "get_data_at_address_08002214"
            },
            "calling": [
                "FUN_08001104",
                "FUN_08004514"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002220": {
            "entrypoint": "0x08002220",
            "current_name": "extracted_value_shifted_08002220",
            "code": "\n\n\nuint extractedValueShifted_08002220(void)\n\n{\n  return DAT_200001bc >> (&DAT_08007371)[(_DAT_40021004 & 0x700) >> 8];\n}\n\n",
            "renaming": {
                "FUN_08002220": "extracted_value_shifted_08002220"
            },
            "calling": [
                "FUN_08001754",
                "FUN_080025e8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002250": {
            "entrypoint": "0x08002250",
            "current_name": "get_shifted_value_08002250",
            "code": "\n\n\nuint get_shifted_value_08002250(void)\n\n{\n  return DAT_200001bc >> (&DAT_08007371)[(_DAT_40021004 & 0x3800) >> 0xb];\n}\n\n",
            "renaming": {
                "FUN_08002250": "get_shifted_value_08002250"
            },
            "calling": [
                "FUN_080025e8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002280": {
            "entrypoint": "0x08002280",
            "current_name": "initialize_data_08002280",
            "code": "\nvoid initializeData_08002280(int dataPointer,uint *inputData)\n\n{\n  uint modifiedData1;\n  uint modifiedData2;\n  uint inputDataValue;\n  \n  *(uint *)(dataPointer + 0x20) = *(uint *)(dataPointer + 0x20) & 0xfffffffe;\n  modifiedData2 = *(uint *)(dataPointer + 4);\n  inputDataValue = *inputData;\n  modifiedData1 = *(uint *)(dataPointer + 0x20) & 0xfffffffd | inputData[2];\n  if (dataPointer == 0x40012c00) {\n    modifiedData1 = (modifiedData1 & 0xfffffff7 | inputData[3]) & 0xfffffffb;\n    modifiedData2 = modifiedData2 & 0xfffffcff | inputData[5] | inputData[6];\n  }\n  *(uint *)(dataPointer + 4) = modifiedData2;\n  *(uint *)(dataPointer + 0x18) = *(uint *)(dataPointer + 0x18) & 0xffffff8c | inputDataValue;\n  *(uint *)(dataPointer + 0x34) = inputData[1];\n  *(uint *)(dataPointer + 0x20) = modifiedData1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002280": "initialize_data_08002280",
                "param_1": "dataPointer",
                "param_2": "inputData",
                "uVar1": "modifiedData1",
                "uVar2": "modifiedData2",
                "uVar3": "inputDataValue"
            },
            "calling": [
                "FUN_0800245c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080022d0": {
            "entrypoint": "0x080022d0",
            "current_name": "update_parameters_080022d0",
            "code": "\nvoid updateParameters_080022d0(int param_address,uint *param_values)\n\n{\n  uint updated_value_1;\n  uint updated_value_2;\n  uint updated_value_3;\n  \n  *(uint *)(param_address + 0x20) = *(uint *)(param_address + 0x20) & 0xfffffeff;\n  updated_value_2 = *(uint *)(param_address + 4);\n  updated_value_3 = *param_values;\n  updated_value_1 = *(uint *)(param_address + 0x20) & 0xfffffdff | param_values[2] << 8;\n  if (param_address == 0x40012c00) {\n    updated_value_1 = (updated_value_1 & 0xfffff7ff | param_values[3] << 8) & 0xfffffbff;\n    updated_value_2 = updated_value_2 & 0xffffcfff | (param_values[5] | param_values[6]) << 4;\n  }\n  *(uint *)(param_address + 4) = updated_value_2;\n  *(uint *)(param_address + 0x1c) = *(uint *)(param_address + 0x1c) & 0xffffff8c | updated_value_3;\n  *(uint *)(param_address + 0x3c) = param_values[1];\n  *(uint *)(param_address + 0x20) = updated_value_1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080022d0": "update_parameters_080022d0",
                "param_1": "param_address",
                "param_2": "param_values",
                "uVar1": "updated_value_1",
                "uVar2": "updated_value_2",
                "uVar3": "updated_value_3"
            },
            "calling": [
                "FUN_0800245c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002324": {
            "entrypoint": "0x08002324",
            "current_name": "update_parameter_values_08002324",
            "code": "\nvoid updateParameterValues_08002324(int baseAddress,int *parameters)\n\n{\n  uint param1Value;\n  int param2Value;\n  int param3Value;\n  int constantValue;\n  \n  *(uint *)(baseAddress + 0x20) = *(uint *)(baseAddress + 0x20) & 0xffffefff;\n  param1Value = *(uint *)(baseAddress + 4);\n  param2Value = *parameters;\n  param3Value = parameters[2];\n  constantValue = 0x40012c00;\n  if (baseAddress == 0x40012c00) {\n    constantValue = parameters[5];\n    param1Value = param1Value & 0xffffbfff;\n  }\n  if (baseAddress == 0x40012c00) {\n    param1Value = param1Value | constantValue << 6;\n  }\n  *(uint *)(baseAddress + 4) = param1Value;\n  *(uint *)(baseAddress + 0x1c) = *(uint *)(baseAddress + 0x1c) & 0xffff8cff | param2Value << 8;\n  *(int *)(baseAddress + 0x40) = parameters[1];\n  *(uint *)(baseAddress + 0x20) = *(uint *)(baseAddress + 0x20) & 0xffffdfff | param3Value << 0xc;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002324": "update_parameter_values_08002324",
                "param_1": "baseAddress",
                "param_2": "parameters",
                "uVar1": "param1Value",
                "iVar2": "param2Value",
                "iVar3": "param3Value",
                "iVar4": "constantValue"
            },
            "calling": [
                "FUN_0800245c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002368": {
            "entrypoint": "0x08002368",
            "current_name": "update_registers_08002368",
            "code": "\nvoid updateRegisters_08002368(uint *registers,uint *values)\n\n{\n  uint updatedValue;\n  \n  updatedValue = *registers;\n  if (((((registers == (uint *)0x40012c00) || (registers == (uint *)0x40000000)) ||\n       (registers == (uint *)0x40000400)) || (registers == (uint *)0x40000800)) &&\n     (((updatedValue = updatedValue & 0xffffff8f | values[1], registers == (uint *)0x40012c00 ||\n       (registers == (uint *)0x40000000)) ||\n      ((registers == (uint *)0x40000400 || (registers == (uint *)0x40000800)))))) {\n    updatedValue = updatedValue & 0xfffffcff | values[3];\n  }\n  *registers = updatedValue;\n  registers[0xb] = values[2];\n  registers[10] = *values;\n  updatedValue = 0x40012c00;\n  if (registers == (uint *)0x40012c00) {\n    updatedValue = values[4];\n  }\n  if (registers == (uint *)0x40012c00) {\n    registers[0xc] = updatedValue;\n  }\n  registers[5] = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002368": "update_registers_08002368",
                "param_1": "registers",
                "param_2": "values",
                "uVar1": "updatedValue"
            },
            "calling": [
                "FUN_080023d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080023d0": {
            "entrypoint": "0x080023d0",
            "current_name": "check_and_update_param_080023d0",
            "code": "\nundefined4 checkAndUpdateParam_080023d0(undefined4 *param)\n\n{\n  if (param != (undefined4 *)0x0) {\n    if (*(char *)((int)param + 0x39) == '\\0') {\n      *(undefined *)(param + 0xe) = 0;\n      FUN_08004d8c();\n    }\n    *(undefined *)((int)param + 0x39) = 2;\n    FUN_08002368(*param,param + 1);\n    *(undefined *)((int)param + 0x39) = 1;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_080023d0": "check_and_update_param_080023d0",
                "param_1": "param"
            },
            "calling": [
                "FUN_0800458c"
            ],
            "called": [
                "FUN_08002368",
                "FUN_08004d8c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002404": {
            "entrypoint": "0x08002404",
            "current_name": "update_parameters_08002404",
            "code": "\nvoid updateParameters_08002404(int param_address,int *param_values)\n\n{\n  uint updated_value1;\n  uint updated_value2;\n  int input_value;\n  \n  *(uint *)(param_address + 0x20) = *(uint *)(param_address + 0x20) & 0xffffffef;\n  updated_value2 = *(uint *)(param_address + 4);\n  input_value = *param_values;\n  updated_value1 = *(uint *)(param_address + 0x20) & 0xffffffdf | param_values[2] << 4;\n  if (param_address == 0x40012c00) {\n    updated_value1 = (updated_value1 & 0xffffff7f | param_values[3] << 4) & 0xffffffbf;\n    updated_value2 = updated_value2 & 0xfffff3ff | (param_values[5] | param_values[6]) << 2;\n  }\n  *(uint *)(param_address + 4) = updated_value2;\n  *(uint *)(param_address + 0x18) = *(uint *)(param_address + 0x18) & 0xffff8cff | input_value << 8;\n  *(int *)(param_address + 0x38) = param_values[1];\n  *(uint *)(param_address + 0x20) = updated_value1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002404": "update_parameters_08002404",
                "param_1": "param_address",
                "param_2": "param_values",
                "uVar1": "updated_value1",
                "uVar2": "updated_value2",
                "iVar3": "input_value"
            },
            "calling": [
                "FUN_0800245c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800245c": {
            "entrypoint": "0x0800245c",
            "current_name": "update_permissions_0800245c",
            "code": "\nvoid updatePermissions_0800245c(int *pPermissions,undefined4 param2,undefined4 action)\n\n{\n  int extraOut1;\n  int extraOut2;\n  int extraOut3;\n  int extraOut4;\n  int var1;\n  uint var2;\n  int var3;\n  \n  if (*(char *)(pPermissions + 0xe) == '\\x01') {\n    return;\n  }\n  *(undefined *)((int)pPermissions + 0x39) = 2;\n  *(undefined *)(pPermissions + 0xe) = 1;\n  switch(action) {\n  case 0:\n    FUN_08002280(*pPermissions);\n    var3 = *pPermissions;\n    var2 = *(uint *)(extraOut1 + 0x10);\n    *(uint *)(var3 + 0x18) = *(uint *)(var3 + 0x18) | 8;\n    *(uint *)(var3 + 0x18) = *(uint *)(var3 + 0x18) & 0xfffffffb;\n    var2 = *(uint *)(var3 + 0x18) | var2;\n    break;\n  default:\n    goto switchD_0800247a_caseD_1;\n  case 4:\n    FUN_08002404(*pPermissions);\n    var3 = *pPermissions;\n    var1 = *(int *)(extraOut2 + 0x10);\n    *(uint *)(var3 + 0x18) = *(uint *)(var3 + 0x18) | 0x800;\n    *(uint *)(var3 + 0x18) = *(uint *)(var3 + 0x18) & 0xfffffbff;\n    var2 = *(uint *)(var3 + 0x18) | var1 << 8;\n    break;\n  case 8:\n    FUN_080022d0(*pPermissions);\n    var3 = *pPermissions;\n    var2 = *(uint *)(extraOut3 + 0x10);\n    *(uint *)(var3 + 0x1c) = *(uint *)(var3 + 0x1c) | 8;\n    *(uint *)(var3 + 0x1c) = *(uint *)(var3 + 0x1c) & 0xfffffffb;\n    var2 = *(uint *)(var3 + 0x1c) | var2;\n    goto LAB_080024fa;\n  case 0xc:\n    FUN_08002324(*pPermissions);\n    var3 = *pPermissions;\n    var1 = *(int *)(extraOut4 + 0x10);\n    *(uint *)(var3 + 0x1c) = *(uint *)(var3 + 0x1c) | 0x800;\n    *(uint *)(var3 + 0x1c) = *(uint *)(var3 + 0x1c) & 0xfffffbff;\n    var2 = *(uint *)(var3 + 0x1c) | var1 << 8;\nLAB_080024fa:\n    *(uint *)(var3 + 0x1c) = var2;\n    goto switchD_0800247a_caseD_1;\n  }\n  *(uint *)(var3 + 0x18) = var2;\nswitchD_0800247a_caseD_1:\n  *(undefined *)((int)pPermissions + 0x39) = 1;\n  *(undefined *)(pPermissions + 0xe) = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800245c": "update_permissions_0800245c",
                "param_1": "pPermissions",
                "param_2": "param2",
                "param_3": "action",
                "extraout_r1": "extraOut1",
                "extraout_r1_00": "extraOut2",
                "extraout_r1_01": "extraOut3",
                "extraout_r1_02": "extraOut4",
                "iVar1": "var1",
                "uVar2": "var2",
                "iVar3": "var3"
            },
            "calling": [
                "FUN_0800458c"
            ],
            "called": [
                "FUN_080022d0",
                "FUN_08002324",
                "FUN_08002404",
                "FUN_08002280"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002520": {
            "entrypoint": "0x08002520",
            "current_name": "update_bitwise_value_08002520",
            "code": "\nvoid updateBitwiseValue_08002520(int baseAddress,uint bitPosition,int newValue)\n\n{\n  *(uint *)(baseAddress + 0x20) = *(uint *)(baseAddress + 0x20) & ~(1 << (bitPosition & 0xff));\n  *(uint *)(baseAddress + 0x20) = newValue << (bitPosition & 0xff) | *(uint *)(baseAddress + 0x20);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002520": "update_bitwise_value_08002520",
                "param_1": "baseAddress",
                "param_2": "bitPosition",
                "param_3": "newValue"
            },
            "calling": [
                "FUN_08002538"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002538": {
            "entrypoint": "0x08002538",
            "current_name": "initialize_and_set_flag_08002538",
            "code": "\nundefined4 initializeAndSetFlag_08002538(uint **pointerArray,undefined4 value)\n\n{\n  uint defaultFlagValue;\n  uint *arrayPointer;\n  \n  FUN_08002520(*pointerArray,value,1);\n  arrayPointer = *pointerArray;\n  defaultFlagValue = 0x40012c00;\n  if (arrayPointer == (uint *)0x40012c00) {\n    defaultFlagValue = uRam40012c44 | 0x8000;\n  }\n  if (arrayPointer == (uint *)0x40012c00) {\n    arrayPointer[0x11] = defaultFlagValue;\n  }\n  *arrayPointer = *arrayPointer | 1;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002538": "initialize_and_set_flag_08002538",
                "param_1": "pointerArray",
                "param_2": "value",
                "uVar1": "defaultFlagValue",
                "puVar2": "arrayPointer"
            },
            "calling": [
                "FUN_08003ff4"
            ],
            "called": [
                "FUN_08002520"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002564": {
            "entrypoint": "0x08002564",
            "current_name": "check_and_set_flag_08002564",
            "code": "\nundefined4 checkAndSetFlag_08002564(int *inputArray,uint *flagArray)\n\n{\n  undefined4 returnValue;\n  \n  returnValue = 2;\n  if (*(char *)(inputArray + 0xe) != '\\x01') {\n    *(undefined *)((int)inputArray + 0x39) = 2;\n    *(uint *)(*inputArray + 0x44) =\n         *flagArray | flagArray[1] | flagArray[2] | flagArray[3] | flagArray[4] | flagArray[5] | flagArray[6];\n    *(undefined *)((int)inputArray + 0x39) = 1;\n    returnValue = 0;\n    *(undefined *)(inputArray + 0xe) = 0;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_08002564": "check_and_set_flag_08002564",
                "param_1": "inputArray",
                "param_2": "flagArray",
                "uVar1": "returnValue"
            },
            "calling": [
                "FUN_0800458c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080025a4": {
            "entrypoint": "0x080025a4",
            "current_name": "update_permission_flag_080025a4",
            "code": "\nundefined4 updatePermissionFlag_080025a4(int *dataArray,uint *flagArray)\n\n{\n  uint flag1;\n  undefined4 result;\n  int dataPointer;\n  uint flag0;\n  \n  result = 2;\n  if (*(char *)(dataArray + 0xe) != '\\x01') {\n    *(undefined *)((int)dataArray + 0x39) = 2;\n    dataPointer = *dataArray;\n    flag0 = *flagArray;\n    flag1 = flagArray[1];\n    *(uint *)(dataPointer + 4) = *(uint *)(dataPointer + 4) & 0xffffff8f;\n    *(uint *)(dataPointer + 4) = *(uint *)(dataPointer + 4) | flag0;\n    *(uint *)(dataPointer + 8) = *(uint *)(dataPointer + 8) & 0xffffff7f;\n    *(uint *)(dataPointer + 8) = *(uint *)(dataPointer + 8) | flag1;\n    *(undefined *)((int)dataArray + 0x39) = 1;\n    result = 0;\n    *(undefined *)(dataArray + 0xe) = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080025a4": "update_permission_flag_080025a4",
                "param_1": "dataArray",
                "param_2": "flagArray",
                "uVar1": "flag1",
                "uVar2": "result",
                "iVar3": "dataPointer",
                "uVar4": "flag0"
            },
            "calling": [
                "FUN_0800458c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080025e8": {
            "entrypoint": "0x080025e8",
            "current_name": "update_values_080025e8",
            "code": "\nvoid updateValues_080025e8(int *parameters)\n\n{\n  int result1;\n  int result2;\n  uint value1;\n  int value2;\n  int value3;\n  int address;\n  \n  address = *parameters;\n  value1 = parameters[4];\n  *(uint *)(address + 0x10) = *(uint *)(address + 0x10) & 0xffffcfff | parameters[3];\n  *(uint *)(address + 0xc) = parameters[2] | value1 | parameters[5] | *(uint *)(address + 0xc) & 0xffffe9f3;\n  *(uint *)(address + 0x14) = *(uint *)(address + 0x14) & 0xfffffcff | parameters[6];\n  if (address == 0x40013800) {\n    result1 = FUN_08002250();\n    value2 = (int)(((ulonglong)(uint)(result1 * 0x19) / (ulonglong)(uint)(parameters[1] << 2)) / 100);\n    result1 = FUN_08002250();\n    value3 = parameters[1];\n    result2 = FUN_08002250();\n    result2 = (uint)(result1 * 0x19) / (uint)(value3 << 2) +\n            (int)(((ulonglong)(uint)(result2 * 0x19) / (ulonglong)(uint)(parameters[1] << 2)) / 100) *\n            -100;\n    result1 = FUN_08002250();\n    value1 = (uint)(result1 * 0x19) / (uint)(parameters[1] << 2);\n    result1 = FUN_08002250();\n  }\n  else {\n    result1 = FUN_08002220();\n    value2 = (int)(((ulonglong)(uint)(result1 * 0x19) / (ulonglong)(uint)(parameters[1] << 2)) / 100);\n    result1 = FUN_08002220();\n    value3 = parameters[1];\n    result2 = FUN_08002220();\n    result2 = (uint)(result1 * 0x19) / (uint)(value3 << 2) +\n            (int)(((ulonglong)(uint)(result2 * 0x19) / (ulonglong)(uint)(parameters[1] << 2)) / 100) *\n            -100;\n    result1 = FUN_08002220();\n    value1 = (uint)(result1 * 0x19) / (uint)(parameters[1] << 2);\n    result1 = FUN_08002220();\n  }\n  *(uint *)(address + 8) =\n       (((value1 + (int)(((ulonglong)(uint)(result1 * 0x19) / (ulonglong)(uint)(parameters[1] << 2)) / 100\n                       ) * -100) * 0x10 + 0x32) / 100 & 0xf | (result2 * 0x10 + 0x32U) / 100 & 0xf0) +\n       value2 * 0x10;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080025e8": "update_values_080025e8",
                "param_1": "parameters",
                "iVar1": "result1",
                "iVar2": "result2",
                "uVar3": "value1",
                "iVar4": "value2",
                "iVar5": "value3",
                "iVar6": "address"
            },
            "calling": [
                "FUN_08002724"
            ],
            "called": [
                "FUN_08002220",
                "FUN_08002250"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002724": {
            "entrypoint": "0x08002724",
            "current_name": "update_status_08002724",
            "code": "\nundefined4 updateStatus_08002724(int *status)\n\n{\n  int tempVar;\n  \n  if (status != (int *)0x0) {\n    if (*(char *)((int)status + 0x39) == '\\0') {\n      *(undefined *)(status + 0xe) = 0;\n      FUN_08004e7c();\n    }\n    *(undefined *)((int)status + 0x39) = 2;\n    *(uint *)(*status + 0xc) = *(uint *)(*status + 0xc) & 0xffffdfff;\n    FUN_080025e8(status);\n    tempVar = *status;\n    *(uint *)(tempVar + 0x10) = *(uint *)(tempVar + 0x10) & 0xffffb7ff;\n    *(uint *)(tempVar + 0x14) = *(uint *)(tempVar + 0x14) & 0xffffffd5;\n    *(uint *)(tempVar + 0xc) = *(uint *)(tempVar + 0xc) | 0x2000;\n    status[0xf] = 0;\n    *(undefined *)((int)status + 0x39) = 1;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08002724": "update_status_08002724",
                "param_1": "status",
                "iVar1": "tempVar"
            },
            "calling": [
                "FUN_0800458c"
            ],
            "called": [
                "FUN_08004e7c",
                "FUN_080025e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800290a": {
            "entrypoint": "0x0800290a",
            "current_name": "FUNC_0800290a",
            "code": "\nvoid FUNC_0800290a(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800290a": "FUNC_0800290a"
            },
            "calling": [
                "FUN_0800299a"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800290c": {
            "entrypoint": "0x0800290c",
            "current_name": "process_data_0800290c",
            "code": "\nundefined4 processData_0800290c(int *data)\n\n{\n  byte byteValue;\n  int ptrData;\n  uint bitMask;\n  undefined4 value;\n  short counter;\n  ushort *ptrShort1;\n  ushort *ptrShort2;\n  bool isNot2;\n  \n  if ((*(byte *)((int)data + 0x39) & 0xef) != 0x22) {\n    return 2;\n  }\n  ptrData = *data;\n  ptrShort1 = (ushort *)data[10];\n  if (data[2] == 0x1000) {\n    if (data[4] == 0) {\n      ptrShort2 = ptrShort1 + 1;\n      *ptrShort1 = (ushort)((uint)(*(int *)(ptrData + 4) << 0x17) >> 0x17);\n    }\n    else {\n      ptrShort2 = (ushort *)((int)ptrShort1 + 1);\n      *ptrShort1 = (ushort)*(int *)(ptrData + 4) & 0xff;\n    }\n    data[10] = (int)ptrShort2;\n  }\n  else {\n    if (data[4] == 0) {\n      byteValue = (byte)*(undefined4 *)(ptrData + 4);\n      data[10] = (int)ptrShort1 + 1;\n    }\n    else {\n      value = *(undefined4 *)(ptrData + 4);\n      data[10] = (int)ptrShort1 + 1;\n      byteValue = (byte)value & 0x7f;\n    }\n    *(byte *)ptrShort1 = byteValue;\n  }\n  counter = *(short *)((int)data + 0x2e) + -1;\n  *(short *)((int)data + 0x2e) = counter;\n  if (counter == 0) {\n    ptrData = *data;\n    *(uint *)(ptrData + 0xc) = *(uint *)(ptrData + 0xc) & 0xffffffdf;\n    isNot2 = *(char *)((int)data + 0x39) != '2';\n    if (isNot2) {\n      bitMask = *(uint *)(ptrData + 0xc) & 0xfffffeff;\n    }\n    else {\n      ptrData = 0x12;\n      bitMask = 0x32;\n    }\n    if (isNot2) {\n      *(uint *)(ptrData + 0xc) = bitMask;\n      bitMask = *(uint *)(ptrData + 0x14) & 0xfffffffe;\n    }\n    if (isNot2) {\n      *(uint *)(ptrData + 0x14) = bitMask;\n      ptrData = 1;\n    }\n    *(char *)((int)data + 0x39) = (char)ptrData;\n    FUN_08004c30();\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800290c": "process_data_0800290c",
                "param_1": "data",
                "bVar1": "byteValue",
                "iVar2": "ptrData",
                "uVar3": "bitMask",
                "uVar4": "value",
                "sVar5": "counter",
                "puVar6": "ptrShort1",
                "puVar7": "ptrShort2",
                "bVar8": "isNot2"
            },
            "calling": [
                "FUN_0800299a"
            ],
            "called": [
                "FUN_08004c30"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002998": {
            "entrypoint": "0x08002998",
            "current_name": "FUNC_08002998",
            "code": "\nvoid FUNC_08002998(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002998": "FUNC_08002998"
            },
            "calling": [
                "FUN_0800299a"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800299a": {
            "entrypoint": "0x0800299a",
            "current_name": "check_conditions_and_update_flags_0800299a",
            "code": "\nvoid checkConditionsAndUpdateFlags_0800299a(uint **param)\n\n{\n  uint data1;\n  short counter;\n  uint data2;\n  uint *pointer1;\n  undefined value;\n  uint *pointer2;\n  uint flag;\n  bool condition;\n  \n  pointer2 = *param;\n  data2 = *pointer2;\n  data1 = pointer2[3];\n  if ((data2 & 0xf) == 0) {\n    if (((int)(data2 << 0x1a) < 0) && ((int)(data1 << 0x1a) < 0)) {\n      FUN_0800290c();\n      return;\n    }\n  }\n  else {\n    flag = pointer2[5] & 1;\n    if ((flag != 0) || ((data1 & 0x120) != 0)) {\n      pointer2 = (uint *)(data2 << 0x1f);\n      if ((int)pointer2 < 0) {\n        condition = (int)(data1 << 0x17) < 0;\n        if (condition) {\n          pointer2 = (uint *)((uint)param[0xf] | 1);\n        }\n        if (condition) {\n          param[0xf] = pointer2;\n        }\n      }\n      if (((int)(data2 << 0x1d) < 0) && (flag != 0)) {\n        param[0xf] = (uint *)((uint)param[0xf] | 2);\n      }\n      if (((int)(data2 << 0x1e) < 0) && (flag != 0)) {\n        param[0xf] = (uint *)((uint)param[0xf] | 4);\n      }\n      if (((int)(data2 << 0x1c) < 0) && (flag != 0)) {\n        param[0xf] = (uint *)((uint)param[0xf] | 8);\n      }\n      if (param[0xf] == (uint *)0x0) {\n        return;\n      }\n      if (((int)(data2 << 0x1a) < 0) && ((int)(data1 << 0x1a) < 0)) {\n        FUN_0800290c(param);\n      }\n      pointer2 = *param;\n      if ((-1 < (int)param[0xf] << 0x1c) && ((pointer2[5] & 0x40) == 0)) {\n        FUNC_08002998(param);\n        param[0xf] = (uint *)0x0;\n        return;\n      }\n      pointer2[3] = pointer2[3] & 0xfffffedf;\n      pointer2[5] = pointer2[5] & 0xfffffffe;\n      *(undefined *)((int)param + 0x39) = 1;\n      FUNC_08002998(param);\n      return;\n    }\n  }\n  if (((int)(data2 << 0x18) < 0) && ((int)(data1 << 0x18) < 0)) {\n    if ((*(byte *)((int)param + 0x39) & 0xdf) == 0x12) {\n      pointer1 = param[8];\n      if (param[2] == (uint *)0x1000) {\n        pointer2[1] = *(ushort *)pointer1 & 0x1ff;\n        if (param[4] == (uint *)0x0) {\n          pointer1 = (uint *)((int)pointer1 + 2);\n        }\n        else {\n          pointer1 = (uint *)((int)pointer1 + 1);\n        }\n        param[8] = pointer1;\n      }\n      else {\n        param[8] = (uint *)((int)pointer1 + 1);\n        pointer2[1] = (uint)*(byte *)pointer1;\n      }\n      counter = *(short *)((int)param + 0x26) + -1;\n      *(short *)((int)param + 0x26) = counter;\n      if (counter == 0) {\n        pointer2[3] = pointer2[3] & 0xffffff7f;\n        pointer2[3] = pointer2[3] | 0x40;\n        return;\n      }\n    }\n  }\n  else if (((int)(data2 << 0x19) < 0) && ((int)(data1 << 0x19) < 0)) {\n    pointer2[3] = pointer2[3] & 0xffffffbf;\n    if (*(char *)((int)param + 0x39) == '2') {\n      value = 0x22;\n    }\n    else {\n      value = 1;\n    }\n    *(undefined *)((int)param + 0x39) = value;\n    FUNC_0800290a(param);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800299a": "check_conditions_and_update_flags_0800299a",
                "param_1": "param",
                "uVar1": "data1",
                "sVar2": "counter",
                "uVar3": "data2",
                "puVar4": "pointer1",
                "uVar5": "value",
                "puVar6": "pointer2",
                "uVar7": "flag",
                "bVar8": "condition"
            },
            "calling": [],
            "called": [
                "FUN_08002998",
                "FUN_0800290a",
                "FUN_0800290c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ad0": {
            "entrypoint": "0x08002ad0",
            "current_name": "FUNC_08002ad0",
            "code": "\nvoid FUNC_08002ad0(void)\n\n{\n  FUN_0800407c(0xd0,0x75,\"../Src/MPU9250.c\",0x3b);\n  FUN_0800403c(0xd0,0x6b,0x80,1);\n  FUN_0800403c(0xd0,0x6b,1);\n  FUN_0800403c(0xd0,0x6c,0,1);\n  FUN_0800403c(0xd0,0x19,0,1);\n  FUN_0800403c(0xd0,0x1d,3,1);\n  FUN_0800403c(0xd0,0x1a,3,1);\n  FUN_0800403c(0xd0,0x1b,0x10,1);\n  FUN_0800403c(0xd0,0x1c,8,1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ad0": "FUNC_08002ad0"
            },
            "calling": [
                "FUN_08002ea0"
            ],
            "called": [
                "FUN_0800407c",
                "FUN_0800403c"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08002b48": {
            "entrypoint": "0x08002b48",
            "current_name": "initialize_mpu9250_08002b48",
            "code": "\nvoid initializeMPU9250_08002b48(void)\n\n{\n  undefined4 temp;\n  uint input;\n  int value1;\n  int value2;\n  undefined4 result1;\n  undefined4 result2;\n  \n  result1 = 0;\n  result2 = input & 0xffff0000;\n  FUN_080040e8(0xd0,0x3b,&result1,6,\"../Src/MPU9250.c\",0x58);\n  DAT_200002f6 = CONCAT11(result1._2_1_,result1._3_1_);\n  DAT_200002f4 = CONCAT11((undefined)result1,result1._1_1_);\n  DAT_200002f8 = CONCAT11((undefined)result2,result2._1_1_);\n  value2 = (int)DAT_200002f6;\n  value1 = (int)DAT_200002f8;\n  temp = FUN_08000c44();\n  temp = FUN_08000cec(temp,0x40800000);\n  DAT_200002d0 = FUN_08000cec(temp,0x38000000);\n  temp = FUN_08000c44(value2);\n  temp = FUN_08000cec(temp,0x40800000);\n  DAT_200002d4 = FUN_08000cec(temp,0x38000000);\n  temp = FUN_08000c44(value1);\n  temp = FUN_08000cec(temp,0x40800000);\n  DAT_200002d8 = FUN_08000cec(temp,0x38000000);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002b48": "initialize_mpu9250_08002b48",
                "in_r3": "input",
                "iVar2": "value1",
                "iVar3": "value2",
                "local_18": "result1",
                "local_14": "result2",
                "uVar1": "temp"
            },
            "calling": [
                "FUN_08002f28"
            ],
            "called": [
                "FUN_08000c44",
                "FUN_08000cec",
                "FUN_080040e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002bf0": {
            "entrypoint": "0x08002bf0",
            "current_name": "initialize_mpu9250_08002bf0",
            "code": "\nvoid initializeMPU9250_08002bf0(void)\n\n{\n  undefined4 result;\n  int convertedData1;\n  int convertedData2;\n  undefined4 dataBuffer1;\n  undefined2 dataBuffer2;\n  \n  dataBuffer1 = 0;\n  dataBuffer2 = 0;\n  FUN_080040e8(0xd0,0x43,&dataBuffer1,6,\"../Src/MPU9250.c\",0x7b);\n  DAT_200002c0 = CONCAT11(dataBuffer1._2_1_,dataBuffer1._3_1_);\n  DAT_200002be = CONCAT11((undefined)dataBuffer1,dataBuffer1._1_1_);\n  DAT_200002c2 = CONCAT11((undefined)dataBuffer2,dataBuffer2._1_1_);\n  convertedData2 = (int)DAT_200002c0;\n  convertedData1 = (int)DAT_200002c2;\n  result = FUN_08000c44();\n  result = FUN_08000cec(result,0x447a0000);\n  result = FUN_08000cec(result,0x38000000);\n  DAT_200002c4 = FUN_08000ad8(result,DAT_20000000);\n  result = FUN_08000c44(convertedData2);\n  result = FUN_08000cec(result,0x447a0000);\n  result = FUN_08000cec(result,0x38000000);\n  DAT_200002c8 = FUN_08000ad8(result,DAT_20000004);\n  result = FUN_08000c44(convertedData1);\n  result = FUN_08000cec(result,0x447a0000);\n  result = FUN_08000cec(result,0x38000000);\n  DAT_200002cc = FUN_08000ad8(result,DAT_20000008);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002bf0": "initialize_mpu9250_08002bf0",
                "local_20": "dataBuffer1",
                "local_1c": "dataBuffer2",
                "iVar2": "convertedData1",
                "iVar3": "convertedData2",
                "uVar1": "result"
            },
            "calling": [
                "FUN_08002f28"
            ],
            "called": [
                "FUN_08000ad8",
                "FUN_08000c44",
                "FUN_08000cec",
                "FUN_080040e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002cb0": {
            "entrypoint": "0x08002cb0",
            "current_name": "initialize_sensor_08002cb0",
            "code": "\nvoid initializeSensor_08002cb0(undefined4 param1,undefined4 param2,undefined4 param3,uint sensorSettings)\n\n{\n  undefined4 result;\n  uint localSensorSettings;\n  \n  localSensorSettings = sensorSettings;\n  FUN_0800403c(0xd0,0x37,0x22,1,param1,param2,param3);\n  FUN_0800403c(0xd0,0x6a,1);\n  FUN_0800407c(0x18,0,\"../Src/MPU9250.c\",0xad);\n  FUN_0800403c(0x18,0xb,1);\n  FUN_0800403c(0x18,10,0,1);\n  FUN_0800403c(0x18,10,0xf,1);\n  FUN_080040e8(0x18,0x10,&localSensorSettings,3,\"../Src/MPU9250.c\",0xb6);\n  result = FUN_08000c44((localSensorSettings & 0xff) - 0x80);\n  result = FUN_08000cec(result,0x3b800000);\n  DAT_200002e8 = FUN_08000adc(result,0x3f800000);\n  result = FUN_08000c44((localSensorSettings >> 8 & 0xff) - 0x80);\n  result = FUN_08000cec(result,0x3b800000);\n  DAT_200002ec = FUN_08000adc(result,0x3f800000);\n  result = FUN_08000c44((localSensorSettings >> 0x10 & 0xff) - 0x80);\n  result = FUN_08000cec(result,0x3b800000);\n  DAT_200002f0 = FUN_08000adc(result,0x3f800000);\n  FUN_0800403c(0x18,10,0,1);\n  FUN_0800403c(0x18,10,0x16,1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002cb0": "initialize_sensor_08002cb0",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "sensorSettings",
                "uVar1": "result",
                "local_c": "localSensorSettings"
            },
            "calling": [
                "FUN_08002ea0"
            ],
            "called": [
                "FUN_0800407c",
                "FUN_0800403c",
                "FUN_08000c44",
                "FUN_08000cec",
                "FUN_080040e8",
                "FUN_08000adc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002d88": {
            "entrypoint": "0x08002d88",
            "current_name": "initialize_mpu9250_08002d88",
            "code": "\nvoid initializeMPU9250_08002d88(undefined4 param1,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  int returnValue;\n  undefined4 tempVar2;\n  undefined4 tempVar3;\n  int tempVar4;\n  undefined2 counter;\n  undefined var1;\n  undefined var2;\n  undefined var3;\n  undefined var4;\n  byte byteVar;\n  undefined var5;\n  \n  var5 = (undefined)((uint)param4 >> 0x18);\n  counter = 0;\n  var1 = 0;\n  var2 = 0;\n  var3 = 0;\n  var4 = 0;\n  byteVar = 0;\n  returnValue = FUN_0800407c(0x18,2,\"../Src/MPU9250.c\",0xd7,param1,param2);\n  if (returnValue << 0x1f < 0) {\n    FUN_080040e8(0x18,3,&counter,7,\"../Src/MPU9250.c\",0xda);\n    tempVar3 = DAT_2000001c;\n    if ((int)((uint)byteVar << 0x1c) < 0) {\n      DAT_200013bb = DAT_200013bb + 1;\n    }\n    else {\n      DAT_200002ba = CONCAT11(var2,var1);\n      DAT_200002bc = CONCAT11(var4,var3);\n      tempVar4 = (int)DAT_200002ba;\n      returnValue = (int)DAT_200002bc;\n      DAT_200002b8 = counter;\n      tempVar2 = FUN_08000c44();\n      tempVar2 = FUN_08000cec(tempVar2,tempVar3);\n      tempVar2 = FUN_08000cec(tempVar2,DAT_200002e8);\n      tempVar2 = FUN_08000ad8(tempVar2,DAT_20000020);\n      DAT_200002dc = FUN_08000cec(tempVar2,DAT_2000002c);\n      tempVar2 = FUN_08000c44(tempVar4);\n      tempVar2 = FUN_08000cec(tempVar2,tempVar3);\n      tempVar2 = FUN_08000cec(tempVar2,DAT_200002ec);\n      tempVar2 = FUN_08000ad8(tempVar2,DAT_20000024);\n      DAT_200002e0 = FUN_08000cec(tempVar2,DAT_20000030);\n      tempVar2 = FUN_08000c44(returnValue);\n      tempVar3 = FUN_08000cec(tempVar2,tempVar3);\n      tempVar3 = FUN_08000cec(tempVar3,DAT_200002f0);\n      tempVar3 = FUN_08000ad8(tempVar3,DAT_20000028);\n      DAT_200002e4 = FUN_08000cec(tempVar3,DAT_20000034);\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002d88": "initialize_mpu9250_08002d88",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "iVar1": "returnValue",
                "uVar2": "tempVar2",
                "uVar3": "tempVar3",
                "iVar4": "tempVar4",
                "local_28": "counter",
                "uStack_26": "var1",
                "uStack_25": "var2",
                "local_24": "var3",
                "local_23": "var4",
                "local_22": "byteVar",
                "uStack_21": "var5"
            },
            "calling": [
                "FUN_08002f28"
            ],
            "called": [
                "FUN_0800407c",
                "FUN_08000ad8",
                "FUN_08000c44",
                "FUN_08000cec",
                "FUN_080040e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ea0": {
            "entrypoint": "0x08002ea0",
            "current_name": "initialize_program_08002ea0",
            "code": "\nvoid initializeProgram_08002ea0(undefined4 arg1,undefined4 arg2,undefined4 arg3,undefined4 arg4)\n\n{\n  undefined4 result;\n  \n  FUNC_08002ad0();\n  FUN_08002cb0();\n  FUN_08003314(0x3f19999a);\n  FUN_08003320(0,result,arg3,arg4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ea0": "initialize_program_08002ea0",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arg3",
                "param_4": "arg4",
                "extraout_r1": "result"
            },
            "calling": [
                "FUN_08004194"
            ],
            "called": [
                "FUN_08002ad0",
                "FUN_08002cb0",
                "FUN_08003320",
                "FUN_08003314"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ec0": {
            "entrypoint": "0x08002ec0",
            "current_name": "calculate_result_08002ec0",
            "code": "\nvoid calculateResult_08002ec0(void)\n\n{\n  undefined4 uVar1;\n  undefined4 uVar2;\n  undefined4 uVar3;\n  \n  uVar2 = DAT_2000024c;\n  uVar3 = DAT_20000010;\n  uVar1 = FUN_08000ad8(0x3f800000,DAT_20000010);\n  uVar2 = FUN_08000cec(uVar1,uVar2);\n  uVar3 = FUN_08000cec(uVar3,DAT_2000000c);\n  DAT_2000000c = FUN_08000adc(uVar3,uVar2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ec0": "calculate_result_08002ec0"
            },
            "calling": [
                "FUN_08004a84",
                "FUN_08002f28"
            ],
            "called": [
                "FUN_08000ad8",
                "FUN_08000cec",
                "FUN_08000adc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ed4": {
            "entrypoint": "0x08002ed4",
            "current_name": "calculate_ram_value_08002ed4",
            "code": "\nvoid calculateRAMValue_08002ed4(void)\n\n{\n  undefined4 result1;\n  undefined4 initialValue;\n  undefined4 RAMValue;\n  \n  initialValue = DAT_20000248;\n  RAMValue = constant2;\n  result1 = FUN_08000ad8(0x3f800000,constant2);\n  initialValue = FUN_08000cec(result1,initialValue);\n  RAMValue = FUN_08000cec(RAMValue,RAMValue);\n  RAMValue = FUN_08000adc(RAMValue,initialValue);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ed4": "calculate_ram_value_08002ed4",
                "uVar1": "result1",
                "uVar2": "initialValue",
                "uVar3": "RAMValue",
                "uRam20000018": "constant2",
                "uRam20000014": "RAMValue"
            },
            "calling": [
                "FUN_08004a84",
                "FUN_08002f28"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ee8": {
            "entrypoint": "0x08002ee8",
            "current_name": "initialize_connection_08002ee8",
            "code": "\nvoid initializeConnection_08002ee8(void)\n\n{\n  undefined4 dataValue;\n  int result;\n  \n  dataValue = DAT_20000250;\n  result = FUN_08001050(DAT_20000250,0xc3340000);\n  if ((result != 0) && (result = FUN_08001028(dataValue,0x42b40000), result != 0)) {\n    FUN_08000adc(dataValue,0x42b40000);\n    return;\n  }\n  FUN_08000ad8(dataValue,0x43870000);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ee8": "initialize_connection_08002ee8",
                "uVar1": "dataValue",
                "iVar2": "result"
            },
            "calling": [
                "FUN_08004a84",
                "FUN_08002f28"
            ],
            "called": [
                "FUN_08000ad8",
                "FUN_08001050",
                "FUN_08001028",
                "FUN_08000adc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002f28": {
            "entrypoint": "0x08002f28",
            "current_name": "initialize_system_08002f28",
            "code": "\n\n\nvoid initializeSystem_08002f28(void)\n\n{\n  undefined4 returnValue;\n  \n  FUN_08002b48();\n  FUN_08002bf0();\n  FUN_08002d88();\n  DAT_20000258 = thunk_FUN_0800115c();\n  returnValue = FUN_08000c3c(DAT_20000258 - DAT_20000254);\n  FUN_08000e54(returnValue,0x447a0000);\n  FUN_08003320();\n  DAT_20000254 = DAT_20000258;\n  FUN_08003330(DAT_200002d4 + -0x80000000,DAT_200002d0 + -0x80000000,DAT_200002d8,DAT_200002c8,\n               DAT_200002c4,DAT_200002cc + -0x80000000,DAT_200002dc,DAT_200002e0,DAT_200002e4,\n               &DAT_20000248);\n  _DAT_2000142a = (undefined2)((uint)(int)DAT_200002f4 / 100);\n  _DAT_2000142e = (undefined2)((uint)(int)DAT_200002f8 / 100);\n  DAT_2000142c = (undefined2)((uint)(int)DAT_200002f6 / 100);\n  DAT_20001430 = DAT_200002be;\n  _DAT_20001432 = DAT_200002c0;\n  DAT_20001434 = DAT_200002c2;\n  _DAT_20001436 = DAT_200002b8;\n  DAT_20001438 = DAT_200002ba;\n  DAT_2000143a = DAT_200002bc;\n  returnValue = FUN_08002ed4();\n  FUN_08000cec(returnValue,0x41200000);\n  DAT_20001395._0_2_ = FUN_08001078();\n  returnValue = FUN_08002ec0();\n  FUN_08000cec(returnValue,0x41200000);\n  DAT_20001395._2_2_ = FUN_08001078();\n  FUN_08002ee8();\n  DAT_20001399 = FUN_08001078();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002f28": "initialize_system_08002f28",
                "uVar1": "returnValue"
            },
            "calling": [
                "FUN_0800411c"
            ],
            "called": [
                "FUN_08000e54",
                "FUN_08000c3c",
                "FUN_08002ee8",
                "FUN_08000cec",
                "FUN_08003320",
                "FUN_08002bf0",
                "FUN_08002ed4",
                "FUN_08002b48",
                "thunk_FUN_0800115c",
                "FUN_08002d88",
                "FUN_08003330",
                "FUN_08001078",
                "FUN_08002ec0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003034": {
            "entrypoint": "0x08003034",
            "current_name": "get_sensor_reading_08003034",
            "code": "\nuint getSensorReading_08003034(undefined4 arg1,undefined4 arg2,undefined4 arg3,undefined4 arg4)\n\n{\n  undefined4 sensorValue;\n  \n  sensorValue = arg4;\n  FUN_080040b8(0xee,0,&sensorValue,3,\"../Src/MS5611.c\",0x8c,arg3);\n  return (uint)CONCAT12((undefined)sensorValue,CONCAT11(sensorValue._1_1_,sensorValue._2_1_));\n}\n\n",
            "renaming": {
                "FUN_08003034": "get_sensor_reading_08003034",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arg3",
                "param_4": "arg4",
                "local_c": "sensorValue"
            },
            "calling": [
                "FUN_0800411c"
            ],
            "called": [
                "FUN_080040b8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003068": {
            "entrypoint": "0x08003068",
            "current_name": "get_data_value_08003068",
            "code": "\nundefined4 get_data_value_08003068(void)\n\n{\n  return DAT_200002fc;\n}\n\n",
            "renaming": {
                "FUN_08003068": "get_data_value_08003068"
            },
            "calling": [
                "FUN_08004a30"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003298": {
            "entrypoint": "0x08003298",
            "current_name": "initialize_sensor_data_08003298",
            "code": "\nvoid initializeSensorData_08003298(void)\n\n{\n  int iterationCount;\n  undefined sensorDataLowByte;\n  undefined sensorDataHighByte;\n  \n  iterationCount = 0;\n  FUN_0800403c(0xee,0x1e,1);\n  thunk_FUNC_08001168(10);\n  DAT_20000038 = 8;\n  do {\n    sensorDataLowByte = 0;\n    sensorDataHighByte = 0;\n    FUN_080040e8(0xee,iterationCount + 0xa0U & 0xffff,&sensorDataLowByte,2,\"../Src/MS5611.c\",0x7c);\n    *(ushort *)((int)&DAT_2000025c + iterationCount) = CONCAT11(sensorDataLowByte,sensorDataHighByte);\n    iterationCount = iterationCount + 2;\n  } while (iterationCount != 0x10);\n  iterationCount = 0;\n  do {\n    (&DAT_20000300)[iterationCount] = 0;\n    iterationCount = iterationCount + 1;\n  } while (iterationCount != 0x14);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003298": "initialize_sensor_data_08003298",
                "local_1c": "sensorDataLowByte",
                "local_1b": "sensorDataHighByte",
                "iVar1": "iterationCount"
            },
            "calling": [
                "FUN_08004194"
            ],
            "called": [
                "FUN_0800403c",
                "thunk_FUN_08001168",
                "FUN_080040e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003314": {
            "entrypoint": "0x08003314",
            "current_name": "initialize_data_08003314",
            "code": "\nvoid initializeData_08003314(undefined4 initialValue)\n\n{\n  DAT_2000035c = initialValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003314": "initialize_data_08003314",
                "param_1": "initialValue"
            },
            "calling": [
                "FUN_08002ea0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003320": {
            "entrypoint": "0x08003320",
            "current_name": "initialize_data_08003320",
            "code": "\nvoid initializeData_08003320(undefined4 data)\n\n{\n  DAT_20000360 = data;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003320": "initialize_data_08003320",
                "param_1": "data"
            },
            "calling": [
                "FUN_08002ea0",
                "FUN_08002f28"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003330": {
            "entrypoint": "0x08003330",
            "current_name": "calculate_complex_value_08003330",
            "code": "\nvoid calculateComplexValue_08003330(undefined4 input1,undefined4 input2,undefined4 input3,undefined4 param4,\n                 undefined4 param5,undefined4 param6,undefined4 param7,undefined4 param8,\n                 undefined4 param9,undefined4 *outputParams)\n\n{\n  undefined4 result1;\n  undefined4 result2;\n  int intValue;\n  undefined4 result3;\n  undefined4 result4;\n  undefined4 result5;\n  undefined4 result6;\n  int resultInt;\n  undefined4 result7;\n  undefined4 result8;\n  undefined4 result9;\n  undefined4 result10;\n  undefined4 result11;\n  undefined4 result12;\n  undefined4 result13;\n  undefined4 result14;\n  undefined4 result15;\n  undefined4 result16;\n  int resultInt2;\n  undefined4 result17;\n  undefined4 result18;\n  undefined4 result19;\n  undefined4 result20;\n  undefined4 result21;\n  undefined4 result22;\n  int resultInt3;\n  undefined4 savedValue1;\n  undefined4 savedValue2;\n  undefined4 savedValue4;\n  int savedValue3;\n  undefined8 tempVar1;\n  undefined8 tempVar2;\n  \n  savedValue4 = DAT_20000048;\n  savedValue2 = DAT_20000044;\n  savedValue3 = DAT_20000040;\n  savedValue1 = DAT_2000003c;\n  result1 = FUN_08000cec(input1,input1);\n  result2 = FUN_08000cec(input2);\n  result1 = FUN_08000adc(result1,result2);\n  result2 = FUN_08000cec(input3);\n  FUN_08000adc(result1,result2);\n  FUN_08000428();\n  FUN_08005bc8();\n  result1 = FUN_08000a30();\n  intValue = FUN_08001014(result1,0);\n  if (intValue == 0) {\n    result2 = FUN_08000cec(param7);\n    result3 = FUN_08000cec(param8);\n    result2 = FUN_08000adc(result2,result3);\n    result3 = FUN_08000cec(param9);\n    FUN_08000adc(result2,result3);\n    FUN_08000428();\n    FUN_08005bc8();\n    result2 = FUN_08000a30();\n    intValue = FUN_08001014(result2,0);\n    if (intValue == 0) {\n      tempVar1 = FUN_08000428(param4);\n      FUN_080004d0((int)tempVar1,(int)((ulonglong)tempVar1 >> 0x20),0xa2529d39,0x3f91df46);\n      result3 = FUN_08000a30();\n      tempVar1 = FUN_08000428(param5);\n      FUN_080004d0((int)tempVar1,(int)((ulonglong)tempVar1 >> 0x20),0xa2529d39,0x3f91df46);\n      result4 = FUN_08000a30();\n      tempVar1 = FUN_08000428(param6);\n      FUN_080004d0((int)tempVar1,(int)((ulonglong)tempVar1 >> 0x20),0xa2529d39,0x3f91df46);\n      result5 = FUN_08000a30();\n      intValue = FUN_08000adc(savedValue1);\n      result6 = FUN_08000adc(savedValue3);\n      resultInt = FUN_08000adc(savedValue2,savedValue2);\n      result7 = FUN_08000adc(savedValue4,savedValue4);\n      result8 = FUN_08000cec(savedValue1);\n      result9 = FUN_08000cec(savedValue1,savedValue3);\n      result10 = FUN_08000cec(savedValue1,savedValue2);\n      result11 = FUN_08000cec(savedValue3);\n      result12 = FUN_08000cec(savedValue3,savedValue4);\n      result13 = FUN_08000cec(savedValue2,savedValue2);\n      result14 = FUN_08000cec(savedValue4,savedValue4);\n      result1 = FUN_08000e54(0x3f800000,result1);\n      result2 = FUN_08000e54(0x3f800000,result2);\n      result15 = FUN_08000cec(param7,result2);\n      result16 = FUN_08000cec(param8,result2);\n      result2 = FUN_08000cec(param9,result2);\n      resultInt2 = FUN_08000cec(intValue,result15);\n      result17 = FUN_08000cec(intValue,result16);\n      result18 = FUN_08000cec(intValue,result2);\n      result19 = FUN_08000cec(result6,result15);\n      result20 = FUN_08000cec(result8,result15);\n      result21 = FUN_08000cec(savedValue4,result17);\n      result20 = FUN_08000ad8(result20,result21);\n      result21 = FUN_08000cec(savedValue2,result18);\n      result20 = FUN_08000adc(result20,result21);\n      result21 = FUN_08000cec(result11,result15);\n      result20 = FUN_08000adc(result20,result21);\n      result21 = FUN_08000cec(result6,result16);\n      result21 = FUN_08000cec(result21,savedValue2);\n      result20 = FUN_08000adc(result20,result21);\n      result21 = FUN_08000cec(result6,result2);\n      result21 = FUN_08000cec(result21,savedValue4);\n      result20 = FUN_08000adc(result20,result21);\n      result21 = FUN_08000cec(result13,result15);\n      result20 = FUN_08000ad8(result20,result21);\n      result21 = FUN_08000cec(result14,result15);\n      result20 = FUN_08000ad8(result20,result21);\n      result21 = FUN_08000cec(savedValue4,resultInt2);\n      result22 = FUN_08000cec(result8,result16);\n      result21 = FUN_08000adc(result21,result22);\n      result18 = FUN_08000cec(savedValue3,result18);\n      result18 = FUN_08000ad8(result21,result18);\n      result21 = FUN_08000cec(savedValue2,result19);\n      result18 = FUN_08000adc(result18,result21);\n      result21 = FUN_08000cec(result11,result16);\n      result18 = FUN_08000ad8(result18,result21);\n      result21 = FUN_08000cec(result13,result16);\n      result18 = FUN_08000adc(result18,result21);\n      result21 = FUN_08000cec(resultInt,result2);\n      result21 = FUN_08000cec(result21,savedValue4);\n      result18 = FUN_08000adc(result18,result21);\n      result21 = FUN_08000cec(result14,result16);\n      result18 = FUN_08000ad8(result18,result21);\n      result20 = FUN_08000cec(result20,result20);\n      result18 = FUN_08000cec(result18,result18);\n      FUN_08000adc(result20,result18);\n      FUN_08000428();\n      FUN_08005bc8();\n      resultInt3 = FUN_08000a30();\n      result18 = FUN_08000cec(resultInt2 + -0x80000000,savedValue2);\n      result17 = FUN_08000cec(savedValue3,result17);\n      result17 = FUN_08000adc(result18,result17);\n      result8 = FUN_08000cec(result8,result2);\n      result8 = FUN_08000adc(result17,result8);\n      result17 = FUN_08000cec(savedValue4,result19);\n      result8 = FUN_08000adc(result8,result17);\n      result17 = FUN_08000cec(result11,result2);\n      result8 = FUN_08000ad8(result8,result17);\n      result17 = FUN_08000cec(resultInt,result16);\n      result17 = FUN_08000cec(result17,savedValue4);\n      result8 = FUN_08000adc(result8,result17);\n      result17 = FUN_08000cec(result13,result2);\n      result8 = FUN_08000ad8(result8,result17);\n      result17 = FUN_08000cec(result14,result2);\n      result8 = FUN_08000adc(result8,result17);\n      result17 = FUN_08000adc(result8,result8);\n      result18 = FUN_08000adc(result12);\n      result19 = FUN_08000cec(savedValue2,intValue);\n      result18 = FUN_08000ad8(result18,result19);\n      result19 = FUN_08000cec(input1,result1);\n      result18 = FUN_08000ad8(result18,result19);\n      result19 = FUN_08000cec(savedValue4,resultInt);\n      result20 = FUN_08000adc(result9);\n      result19 = FUN_08000adc(result19,result20);\n      result20 = FUN_08000cec(input2,result1);\n      result19 = FUN_08000ad8(result19,result20);\n      result20 = FUN_08000cec(savedValue2,result8);\n      result21 = FUN_08000ad8(0x3f000000,result13);\n      result14 = FUN_08000ad8(result21,result14);\n      result14 = FUN_08000cec(result14,resultInt3);\n      result21 = FUN_08000ad8(result12,result10);\n      result21 = FUN_08000cec(result21,result8);\n      result14 = FUN_08000adc(result14,result21);\n      result14 = FUN_08000ad8(result14,result15);\n      result15 = FUN_08000cec(savedValue3,result8);\n      result21 = FUN_08000cec(savedValue3,savedValue2);\n      result22 = FUN_08000cec(savedValue1,savedValue4);\n      result21 = FUN_08000ad8(result21,result22);\n      result21 = FUN_08000cec(result21,resultInt3);\n      result22 = FUN_08000cec(savedValue2,savedValue4);\n      result9 = FUN_08000adc(result22,result9);\n      result9 = FUN_08000cec(result9,result8);\n      result9 = FUN_08000adc(result21,result9);\n      result9 = FUN_08000ad8(result9,result16);\n      result16 = FUN_08000cec(savedValue2,resultInt3);\n      result21 = FUN_08000ad8(0x3f000000,result11);\n      result21 = FUN_08000ad8(result21,result13);\n      result21 = FUN_08000cec(result21,result8);\n      result10 = FUN_08000adc(result10,result12);\n      result10 = FUN_08000cec(result10,resultInt3);\n      result10 = FUN_08000adc(result21,result10);\n      result2 = FUN_08000ad8(result10,result2);\n      result10 = FUN_08000cec(resultInt + -0x80000000,result18);\n      result12 = FUN_08000cec(result6,result19);\n      result10 = FUN_08000adc(result10,result12);\n      result12 = FUN_08000cec(result20,result14);\n      result10 = FUN_08000ad8(result10,result12);\n      result12 = FUN_08000cec(savedValue4,resultInt3 + -0x80000000);\n      result12 = FUN_08000adc(result12,result15);\n      result12 = FUN_08000cec(result12,result9);\n      result10 = FUN_08000adc(result10,result12);\n      result12 = FUN_08000cec(result16,result2);\n      result10 = FUN_08000adc(result10,result12);\n      result11 = FUN_08000adc(result11);\n      result11 = FUN_08000ad8(0x3f800000,result11);\n      result12 = FUN_08000adc(result13);\n      result11 = FUN_08000ad8(result11,result12);\n      result1 = FUN_08000cec(input3,result1);\n      result1 = FUN_08000ad8(result11,result1);\n      result11 = FUN_08000cec(savedValue4,result8);\n      result8 = FUN_08000cec(savedValue1,result8);\n      result12 = FUN_08000cec(result7,result18);\n      result13 = FUN_08000cec(intValue,result19);\n      result12 = FUN_08000adc(result12,result13);\n      result13 = FUN_08000cec(savedValue3,0x40800000);\n      result13 = FUN_08000cec(result13,result1);\n      result12 = FUN_08000ad8(result12,result13);\n      result13 = FUN_08000cec(result14,result11);\n      result12 = FUN_08000adc(result12,result13);\n      result13 = FUN_08000adc(result16,result8);\n      result13 = FUN_08000cec(result13,result9);\n      result12 = FUN_08000adc(result12,result13);\n      result13 = FUN_08000cec(savedValue4,resultInt3);\n      result16 = FUN_08000cec(savedValue3,result17);\n      result13 = FUN_08000ad8(result13,result16);\n      result13 = FUN_08000cec(result13,result2);\n      result12 = FUN_08000adc(result12,result13);\n      resultInt2 = FUN_08000adc(resultInt3,resultInt3);\n      result13 = FUN_08000cec(savedValue3,resultInt3);\n      result16 = FUN_08000cec(intValue + -0x80000000,result18);\n      result7 = FUN_08000cec(result7,result19);\n      result7 = FUN_08000adc(result16,result7);\n      result16 = FUN_08000cec(savedValue2,0x40800000);\n      result1 = FUN_08000cec(result16,result1);\n      result1 = FUN_08000ad8(result7,result1);\n      result7 = FUN_08000cec(savedValue2,resultInt2 + -0x80000000);\n      result7 = FUN_08000ad8(result7,result8);\n      result7 = FUN_08000cec(result7,result14);\n      result1 = FUN_08000adc(result1,result7);\n      result7 = FUN_08000adc(result11,result13);\n      result7 = FUN_08000cec(result7,result9);\n      result1 = FUN_08000adc(result1,result7);\n      result7 = FUN_08000cec(savedValue1,resultInt3);\n      result8 = FUN_08000cec(savedValue2,result17);\n      result7 = FUN_08000ad8(result7,result8);\n      result7 = FUN_08000cec(result7,result2);\n      result7 = FUN_08000adc(result1,result7);\n      result1 = FUN_08000cec(result6,result18);\n      result6 = FUN_08000cec(resultInt,result19);\n      result1 = FUN_08000adc(result1,result6);\n      result6 = FUN_08000cec(savedValue4,resultInt2 + -0x80000000);\n      result6 = FUN_08000adc(result6,result15);\n      result6 = FUN_08000cec(result6,result14);\n      result1 = FUN_08000adc(result1,result6);\n      result6 = FUN_08000cec(savedValue1,resultInt3 + -0x80000000);\n      result6 = FUN_08000adc(result6,result20);\n      result6 = FUN_08000cec(result6,result9);\n      result1 = FUN_08000adc(result1,result6);\n      result2 = FUN_08000cec(result2,result13);\n      result6 = FUN_08000adc(result1,result2);\n      result1 = FUN_08000cec(result10);\n      result2 = FUN_08000cec(result12);\n      result1 = FUN_08000adc(result1,result2);\n      result2 = FUN_08000cec(result7,result7);\n      result1 = FUN_08000adc(result1,result2);\n      result2 = FUN_08000cec(result6,result6);\n      FUN_08000adc(result1,result2);\n      FUN_08000428();\n      FUN_08005bc8();\n      result1 = FUN_08000a30();\n      result8 = FUN_08000e54(0x3f800000,result1);\n      result1 = DAT_2000035c;\n      result2 = FUN_08000cec(savedValue3 + -0x80000000,result3);\n      result9 = FUN_08000cec(savedValue2,result4);\n      result2 = FUN_08000ad8(result2,result9);\n      result9 = FUN_08000cec(savedValue4,result5);\n      result2 = FUN_08000ad8(result2,result9);\n      result9 = FUN_08000cec(result2,0x3f000000);\n      result10 = FUN_08000cec(result10,result8);\n      result2 = DAT_20000360;\n      result10 = FUN_08000cec(result10,result1);\n      result9 = FUN_08000ad8(result9,result10);\n      result2 = FUN_08000cec(result9,result2);\n      result9 = FUN_08000adc(result2,savedValue1);\n      result10 = FUN_08000cec(savedValue1,result3);\n      result11 = FUN_08000cec(savedValue2,result5);\n      result2 = DAT_20000360;\n      result10 = FUN_08000adc(result10,result11);\n      result11 = FUN_08000cec(savedValue4,result4);\n      result10 = FUN_08000ad8(result10,result11);\n      result10 = FUN_08000cec(result10,0x3f000000);\n      result11 = FUN_08000cec(result12,result8);\n      result11 = FUN_08000cec(result11,result1);\n      result10 = FUN_08000ad8(result10,result11);\n      result2 = FUN_08000cec(result10,result2);\n      result10 = FUN_08000adc(result2,savedValue3);\n      result2 = DAT_20000360;\n      result11 = FUN_08000cec(savedValue1,result4);\n      result12 = FUN_08000cec(savedValue3,result5);\n      result11 = FUN_08000ad8(result11,result12);\n      result12 = FUN_08000cec(savedValue4,result3);\n      result11 = FUN_08000adc(result11,result12);\n      result11 = FUN_08000cec(result11,0x3f000000);\n      result7 = FUN_08000cec(result7,result8);\n      result7 = FUN_08000cec(result7,result1);\n      result7 = FUN_08000ad8(result11,result7);\n      result2 = FUN_08000cec(result7,result2);\n      result2 = FUN_08000adc(result2,savedValue2);\n      savedValue1 = FUN_08000cec(savedValue1,result5);\n      result4 = FUN_08000cec(savedValue3,result4);\n      savedValue1 = FUN_08000adc(savedValue1,result4);\n      savedValue2 = FUN_08000cec(savedValue2,result3);\n      savedValue1 = FUN_08000ad8(savedValue1,savedValue2);\n      savedValue2 = FUN_08000cec(savedValue1,0x3f000000);\n      savedValue1 = FUN_08000cec(result6,result8);\n      result1 = FUN_08000cec(savedValue1,result1);\n      savedValue1 = DAT_20000360;\n      savedValue2 = FUN_08000ad8(savedValue2,result1);\n      savedValue1 = FUN_08000cec(savedValue2,savedValue1);\n      savedValue1 = FUN_08000adc(savedValue1,savedValue4);\n      savedValue2 = FUN_08000cec(result9,result9);\n      savedValue4 = FUN_08000cec(result10,result10);\n      savedValue2 = FUN_08000adc(savedValue2,savedValue4);\n      savedValue4 = FUN_08000cec(result2,result2);\n      savedValue2 = FUN_08000adc(savedValue2,savedValue4);\n      savedValue4 = FUN_08000cec(savedValue1,savedValue1);\n      FUN_08000adc(savedValue2,savedValue4);\n      FUN_08000428();\n      FUN_08005bc8();\n      savedValue2 = FUN_08000a30();\n      savedValue2 = FUN_08000e54(0x3f800000,savedValue2);\n      savedValue4 = FUN_08000cec(result9,savedValue2);\n      DAT_2000003c = savedValue4;\n      savedValue3 = FUN_08000cec(result10,savedValue2);\n      DAT_20000040 = savedValue3;\n      result1 = FUN_08000cec(result2,savedValue2);\n      DAT_20000044 = result1;\n      DAT_20000048 = FUN_08000cec(savedValue1,savedValue2);\n      savedValue1 = FUN_08000cec(savedValue3,DAT_20000048);\n      savedValue2 = FUN_08000cec(savedValue4,result1);\n      savedValue1 = FUN_08000ad8(savedValue1,savedValue2);\n      FUN_08000adc(savedValue1,savedValue1);\n      FUN_08000428();\n      tempVar1 = FUN_08005854();\n      tempVar1 = FUN_080004d0((int)tempVar1,(int)((ulonglong)tempVar1 >> 0x20),0,0x40668000);\n      FUN_08000724((int)tempVar1,(int)((ulonglong)tempVar1 >> 0x20),0x54442d18,0x400921fb);\n      savedValue1 = FUN_08000a30();\n      *outputParams = savedValue1;\n      savedValue3 = DAT_20000040;\n      savedValue1 = DAT_2000003c;\n      savedValue2 = FUN_08000cec(DAT_2000003c,DAT_2000003c);\n      savedValue4 = FUN_08000cec(savedValue3,savedValue3);\n      savedValue4 = FUN_08000ad8(savedValue2,savedValue4);\n      savedValue2 = DAT_20000044;\n      result1 = FUN_08000cec(DAT_20000044,DAT_20000044);\n      result1 = FUN_08000ad8(savedValue4,result1);\n      savedValue4 = DAT_20000048;\n      result2 = FUN_08000cec(DAT_20000048,DAT_20000048);\n      FUN_08000adc(result1,result2);\n      tempVar1 = FUN_08000428();\n      savedValue1 = FUN_08000cec(savedValue1,savedValue3);\n      savedValue2 = FUN_08000cec(savedValue2,savedValue4);\n      savedValue1 = FUN_08000adc(savedValue1,savedValue2);\n      FUN_08000adc(savedValue1,savedValue1);\n      tempVar2 = FUN_08000428();\n      tempVar1 = thunk_FUN_08006070((int)tempVar2,(int)((ulonglong)tempVar2 >> 0x20),(int)tempVar1,\n                                  (int)((ulonglong)tempVar1 >> 0x20));\n      tempVar1 = FUN_080004d0((int)tempVar1,(int)((ulonglong)tempVar1 >> 0x20),0,0x40668000);\n      FUN_08000724((int)tempVar1,(int)((ulonglong)tempVar1 >> 0x20),0x54442d18,0x400921fb);\n      savedValue1 = FUN_08000a30();\n      outputParams[1] = savedValue1;\n      savedValue3 = DAT_20000040;\n      savedValue1 = DAT_2000003c;\n      savedValue2 = FUN_08000cec(DAT_2000003c,DAT_2000003c);\n      savedValue4 = FUN_08000cec(savedValue3,savedValue3);\n      savedValue4 = FUN_08000adc(savedValue2,savedValue4);\n      savedValue2 = DAT_20000044;\n      result1 = FUN_08000cec(DAT_20000044,DAT_20000044);\n      result1 = FUN_08000ad8(savedValue4,result1);\n      savedValue4 = DAT_20000048;\n      result2 = FUN_08000cec(DAT_20000048,DAT_20000048);\n      FUN_08000ad8(result1,result2);\n      tempVar1 = FUN_08000428();\n      savedValue2 = FUN_08000cec(savedValue3,savedValue2);\n      savedValue1 = FUN_08000cec(savedValue1,savedValue4);\n      savedValue1 = FUN_08000adc(savedValue2,savedValue1);\n      FUN_08000adc(savedValue1,savedValue1);\n      tempVar2 = FUN_08000428();\n      tempVar1 = thunk_FUN_08006070((int)tempVar2,(int)((ulonglong)tempVar2 >> 0x20),(int)tempVar1,\n                                  (int)((ulonglong)tempVar1 >> 0x20));\n      tempVar1 = FUN_080004d0((int)tempVar1,(int)((ulonglong)tempVar1 >> 0x20),0,0x40668000);\n      FUN_08000724((int)tempVar1,(int)((ulonglong)tempVar1 >> 0x20),0x54442d18,0x400921fb);\n      savedValue1 = FUN_08000a30();\n      outputParams[2] = savedValue1;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003330": "calculate_complex_value_08003330",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "param4",
                "param_5": "param5",
                "param_6": "param6",
                "param_7": "param7",
                "param_8": "param8",
                "param_9": "param9",
                "param_10": "outputParams",
                "uVar1": "result1",
                "uVar2": "result2",
                "iVar3": "intValue",
                "uVar4": "result3",
                "uVar5": "result4",
                "uVar6": "result5",
                "uVar7": "result6",
                "iVar8": "resultInt",
                "uVar9": "result7",
                "uVar10": "result8",
                "uVar11": "result9",
                "uVar12": "result10",
                "uVar13": "result11",
                "uVar14": "result12",
                "uVar15": "result13",
                "uVar16": "result14",
                "uVar17": "result15",
                "uVar18": "result16",
                "iVar19": "resultInt2",
                "uVar20": "result17",
                "uVar21": "result18",
                "uVar22": "result19",
                "uVar23": "result20",
                "uVar24": "result21",
                "uVar25": "result22",
                "iVar26": "resultInt3",
                "uVar27": "savedValue1",
                "uVar28": "savedValue2",
                "iVar30": "savedValue3",
                "uVar29": "savedValue4",
                "uVar31": "tempVar1",
                "uVar32": "tempVar2"
            },
            "calling": [
                "FUN_08002f28"
            ],
            "called": [
                "FUN_08000ad8",
                "FUN_080004d0",
                "FUN_08001014",
                "FUN_08000e54",
                "thunk_FUN_08006070",
                "FUN_08000a30",
                "FUN_08005854",
                "FUN_08005bc8",
                "FUN_08000cec",
                "FUN_08000428",
                "FUN_08000724",
                "FUN_08000adc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003eb0": {
            "entrypoint": "0x08003eb0",
            "current_name": "extend_value_to_64_bits_08003eb0",
            "code": "\nlonglong extend_value_to_64_bits_08003eb0(uint input_value)\n\n{\n  if (DAT_20000280 == 0) {\n    software_interrupt(0x3f);\n    return CONCAT44(input_value,1);\n  }\n  return (ulonglong)input_value << 0x20;\n}\n\n",
            "renaming": {
                "FUN_08003eb0": "extend_value_to_64_bits_08003eb0",
                "param_1": "input_value"
            },
            "calling": [
                "FUN_080041ae"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003ec8": {
            "entrypoint": "0x08003ec8",
            "current_name": "increment_and_update_08003ec8",
            "code": "\nundefined4 incrementAndUpdate_08003ec8(int memAddress,undefined value)\n\n{\n  *(short *)(memAddress + 0x804) = *(short *)(memAddress + 0x804) + 1;\n  *(undefined *)(memAddress + (uint)*(ushort *)(memAddress + 0x802)) = value;\n  *(ushort *)(memAddress + 0x802) = *(short *)(memAddress + 0x802) + 1U & 0x7ff;\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08003ec8": "increment_and_update_08003ec8",
                "param_1": "memAddress",
                "param_2": "value"
            },
            "calling": [
                "FUN_08004c30"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003f3c": {
            "entrypoint": "0x08003f3c",
            "current_name": "initialize_flags_08003f3c",
            "code": "\nvoid initializeFlags_08003f3c(int flag1,int flag2,int flag3)\n\n{\n  FUN_08001424(0x40011000,0x8000,flag1 == 0);\n  FUN_08001424(0x40011000,0x4000,flag2 == 0);\n  FUN_08001424(0x40011000,0x2000,flag3 == 0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003f3c": "initialize_flags_08003f3c",
                "param_1": "flag1",
                "param_2": "flag2",
                "param_3": "flag3"
            },
            "calling": [
                "FUN_08004a84",
                "FUN_08004028"
            ],
            "called": [
                "FUN_08001424"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003fc4": {
            "entrypoint": "0x08003fc4",
            "current_name": "store_param_in_memory_08003fc4",
            "code": "\nvoid storeParamInMemory_08003fc4(undefined4 value)\n\n{\n  *(undefined4 *)(DAT_200014c8 + 0x40) = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003fc4": "store_param_in_memory_08003fc4",
                "param_1": "value"
            },
            "calling": [
                "FUN_0800426c",
                "FUN_080041c4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003fd0": {
            "entrypoint": "0x08003fd0",
            "current_name": "set_param_08003fd0",
            "code": "\nvoid setParam_08003fd0(undefined4 value)\n\n{\n  *(undefined4 *)(DAT_200014c8 + 0x3c) = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003fd0": "set_param_08003fd0",
                "param_1": "value"
            },
            "calling": [
                "FUN_0800426c",
                "FUN_080041c4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003fdc": {
            "entrypoint": "0x08003fdc",
            "current_name": "set_param_in_memory_08003fdc",
            "code": "\nvoid setParamInMemory_08003fdc(undefined4 value)\n\n{\n  *(undefined4 *)(DAT_200015f8 + 0x38) = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003fdc": "set_param_in_memory_08003fdc",
                "param_1": "value"
            },
            "calling": [
                "FUN_0800426c",
                "FUN_080041c4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003fe8": {
            "entrypoint": "0x08003fe8",
            "current_name": "set_memory_value_08003fe8",
            "code": "\nvoid setMemoryValue_08003fe8(undefined4 value)\n\n{\n  *(undefined4 *)(DAT_20001540 + 0x3c) = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003fe8": "set_memory_value_08003fe8",
                "param_1": "value"
            },
            "calling": [
                "FUN_0800426c",
                "FUN_080041c4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003ff4": {
            "entrypoint": "0x08003ff4",
            "current_name": "initialize_data_08003ff4",
            "code": "\nvoid initializeData_08003ff4(void)\n\n{\n  FUN_08002538(&DAT_200015f8,4);\n  FUN_08002538(&DAT_20001540,8);\n  FUN_08002538(&DAT_200014c8,8);\n  FUN_08002538(&DAT_200014c8,0xc);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003ff4": "initialize_data_08003ff4"
            },
            "calling": [
                "FUN_08004028"
            ],
            "called": [
                "FUN_08002538"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004028": {
            "entrypoint": "0x08004028",
            "current_name": "initialize_and_process_data_08004028",
            "code": "\nvoid initializeAndProcessData_08004028(void)\n\n{\n  int iterationCount;\n  \n  FUN_0800458c();\n  FUN_08003ff4();\n  iterationCount = 3;\n  do {\n    FUN_08003f3c(1,0);\n    thunk_FUNC_08001168(100);\n    FUN_08003f3c(0,1);\n    thunk_FUNC_08001168(100);\n    FUN_08003f3c(0,0,1);\n    thunk_FUNC_08001168(100);\n    iterationCount = iterationCount + -1;\n  } while (iterationCount != 0);\n  FUN_08003f3c(1,1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004028": "initialize_and_process_data_08004028",
                "iVar1": "iterationCount"
            },
            "calling": [
                "FUN_08004194"
            ],
            "called": [
                "FUN_08003ff4",
                "thunk_FUN_08001168",
                "FUN_08003f3c",
                "FUN_0800458c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800403c": {
            "entrypoint": "0x0800403c",
            "current_name": "perform_i2_c_transfer_0800403c",
            "code": "\nvoid performI2CTransfer_0800403c(undefined4 parameter1,undefined4 parameter2,undefined inputValue,int isFlagSet)\n\n{\n  int result;\n  undefined localArray [8];\n  \n  localArray[0] = inputValue;\n  result = FUN_08001828(&DAT_20001504,parameter1,parameter2,1,localArray,1,200);\n  if (result != 0) {\n    FUN_08004490(\"../Src/i2c.c\",0x1b);\n  }\n  if (isFlagSet != 0) {\n    thunk_FUNC_08001168(0x32);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800403c": "perform_i2_c_transfer_0800403c",
                "param_1": "parameter1",
                "param_2": "parameter2",
                "param_3": "inputValue",
                "param_4": "isFlagSet",
                "iVar1": "result",
                "local_14": "localArray"
            },
            "calling": [
                "FUN_08002ad0",
                "FUN_0800411c",
                "FUN_08002cb0",
                "FUN_08003298"
            ],
            "called": [
                "FUN_08004490",
                "FUN_08001828",
                "thunk_FUN_08001168"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800407c": {
            "entrypoint": "0x0800407c",
            "current_name": "check_and_execute_0800407c",
            "code": "\nundefined checkAndExecute_0800407c(undefined4 input1,undefined4 input2,undefined4 output1,undefined4 output2)\n\n{\n  int iVar1;\n  undefined returnValue [8];\n  \n  returnValue[0] = 0;\n  iVar1 = FUN_08001938(&DAT_20001504,input1,input2,1,returnValue,1,200);\n  if (iVar1 != 0) {\n    FUN_08004490(output1,output2);\n  }\n  return returnValue[0];\n}\n\n",
            "renaming": {
                "FUN_0800407c": "check_and_execute_0800407c",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "output1",
                "param_4": "output2",
                "local_14": "returnValue"
            },
            "calling": [
                "FUN_08002ad0",
                "FUN_08002d88",
                "FUN_08002cb0",
                "FUN_080040e8"
            ],
            "called": [
                "FUN_08004490",
                "FUN_08001938"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080040b8": {
            "entrypoint": "0x080040b8",
            "current_name": "check_data_validity_080040b8",
            "code": "\nvoid checkDataValidity_080040b8(undefined4 dataHeader,undefined4 dataSize,undefined4 dataType,undefined4 param4,\n                 undefined4 errorHandler,undefined4 errorCode)\n\n{\n  int dataCheckResult;\n  \n  dataCheckResult = FUN_08001938(&DAT_20001504,dataHeader,dataSize,1,dataType,param4,200,param4);\n  if (dataCheckResult != 0) {\n    FUN_08004490(errorHandler,errorCode);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080040b8": "check_data_validity_080040b8",
                "param_1": "dataHeader",
                "param_2": "dataSize",
                "param_3": "dataType",
                "param_4": "param4",
                "param_5": "errorHandler",
                "param_6": "errorCode",
                "iVar1": "dataCheckResult"
            },
            "calling": [
                "FUN_08003034"
            ],
            "called": [
                "FUN_08004490",
                "FUN_08001938"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080040e8": {
            "entrypoint": "0x080040e8",
            "current_name": "copy_data_to_buffer_080040e8",
            "code": "\nvoid copyDataToBuffer_080040e8(undefined4 buffer,int offset,int destination,int size)\n\n{\n  undefined data;\n  int i;\n  undefined *destPtr;\n  int index;\n  \n  destPtr = (undefined *)(destination + -1);\n  index = size;\n  for (i = 0; i < size; i = i + 1) {\n    data = FUN_0800407c(buffer,offset + i & 0xffff,\"../Src/i2c.c\",0x4c,index);\n    destPtr = destPtr + 1;\n    *destPtr = data;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080040e8": "copy_data_to_buffer_080040e8",
                "param_1": "buffer",
                "param_2": "offset",
                "param_3": "destination",
                "param_4": "size",
                "uVar1": "data",
                "iVar2": "i",
                "puVar3": "destPtr",
                "iVar4": "index"
            },
            "calling": [
                "FUN_08002b48",
                "FUN_08002d88",
                "FUN_08002cb0",
                "FUN_08003298",
                "FUN_08002bf0"
            ],
            "called": [
                "FUN_0800407c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800411c": {
            "entrypoint": "0x0800411c",
            "current_name": "initialize_application_0800411c",
            "code": "\nvoid initializeApplication_0800411c(void)\n\n{\n  undefined4 *ptr;\n  longlong longValue;\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  undefined4 value1;\n  undefined4 value2;\n  int returnValue;\n  uint temp4;\n  uint temp5;\n  uint temp6;\n  uint temp7;\n  undefined4 *ptr2;\n  undefined4 variable1;\n  int variable2;\n  int variable3;\n  bool isConditionTrue;\n  undefined8 resultValue;\n  \n  returnValue = thunk_FUN_0800115c();\n  if (1 < (uint)(returnValue - DAT_2000028c)) {\n    DAT_2000028c = thunk_FUN_0800115c();\n    FUN_08002f28();\n  }\n  returnValue = thunk_FUN_0800115c();\n  if (2 < (uint)(returnValue - DAT_20000294)) {\n    DAT_20000294 = thunk_FUN_0800115c();\n    FUN_08004a84();\n  }\n  returnValue = thunk_FUN_0800115c();\n  if (3 < (uint)(returnValue - DAT_20000290)) {\n    DAT_20000290 = thunk_FUN_0800115c();\n    FUN_08004348();\n    FUN_08004384();\n    FUN_080043f0();\n    FUN_08004410();\n    FUN_08004434();\n    FUN_080043bc();\n    FUN_08004458();\n  }\n  if ((DAT_20000275 != '\\0') && (DAT_20000274 != '\\0')) {\n    variable3 = DAT_20000270 + (uint)DAT_20000266 * -0x100;\n    temp4 = (uint)((longlong)(int)(uint)DAT_20000268 * (longlong)variable3) >> 0x17 |\n            (int)((ulonglong)((longlong)(int)(uint)DAT_20000268 * (longlong)variable3) >> 0x20) << 9;\n    temp5 = (uint)((longlong)(int)(uint)DAT_20000264 * (longlong)variable3 >> 7);\n    temp6 = temp5 + (uint)DAT_20000260 * 0x10000;\n    temp2 = (uint)((ulonglong)((longlong)(int)(uint)DAT_20000262 * (longlong)variable3) >> 8);\n    returnValue = temp4 + 2000;\n    temp3 = temp2 + (uint)DAT_2000025e * 0x8000;\n    isConditionTrue = (int)temp4 < 0;\n    if (1999 < returnValue) {\n      temp4 = 0;\n    }\n    temp1 = temp4;\n    if (isConditionTrue != SBORROW4(returnValue,2000)) {\n      variable2 = temp4 * temp4 * 5;\n      temp4 = variable2 >> 2;\n      temp1 = variable2 >> 1;\n    }\n    temp7 = temp6 - temp1;\n    longValue = (ulonglong)(temp3 - temp4) * (ulonglong)DAT_2000026c;\n    variable2 = DAT_2000026c *\n             ((((int)((longlong)(int)(uint)DAT_20000262 * (longlong)variable3 >> 0x28) +\n               (uint)CARRY4(temp2,(uint)DAT_2000025e * 0x8000)) - ((int)temp4 >> 0x1f)) -\n             (uint)(temp3 < temp4)) + (int)((ulonglong)longValue >> 0x20);\n    temp2 = (uint)longValue >> 0x15 | variable2 * 0x800;\n    value1 = FUN_08000c44(temp2 - temp7 >> 0xf |\n                         (((variable2 >> 0x15) -\n                          ((((int)((longlong)(int)(uint)DAT_20000264 * (longlong)variable3 >> 0x27) +\n                            (uint)CARRY4(temp5,(uint)DAT_20000260 * 0x10000)) -\n                           ((int)temp1 >> 0x1f)) - (uint)(temp6 < temp1))) - (uint)(temp2 < temp7)\n                         ) * 0x20000);\n    value1 = FUN_08000e54(value1,0x42c80000);\n    DAT_20000354 = value1;\n    value2 = FUN_08000c44(returnValue);\n    DAT_20000358 = FUN_08000e54(value2,0x42c80000);\n    FUN_08000e54(value1,0x447d5000);\n    resultValue = FUN_08000428();\n    resultValue = FUN_08005900((int)resultValue,(int)((ulonglong)resultValue >> 0x20),0x60000000,0x3fc85b95);\n    resultValue = FUN_08000168(0,0x3ff00000,(int)resultValue,(int)((ulonglong)resultValue >> 0x20));\n    FUN_080004d0((int)resultValue,(int)((ulonglong)resultValue >> 0x20),0,0x40e5a540);\n    value1 = FUN_08000a30();\n    value2 = 0;\n    ptr2 = &DAT_20000300;\n    DAT_20000350 = value1;\n    do {\n      ptr = ptr2 + 1;\n      *ptr2 = *ptr;\n      value2 = FUN_08000adc(value2);\n      ptr2 = ptr;\n    } while (ptr != &DAT_2000034c);\n    DAT_2000034c = value1;\n    value1 = FUN_08000adc(value2,value1);\n    DAT_200002fc = FUN_08000e54(value1,0x41a00000);\n    returnValue = FUN_08001078();\n    DAT_200014ab = returnValue * 100;\n    DAT_20000275 = '\\0';\n    DAT_20000274 = '\\0';\n    FUN_0800403c(0xee,DAT_20000038 + 0x50,1);\n    DAT_2000027c = thunk_FUN_0800115c();\n  }\n  returnValue = thunk_FUN_0800115c();\n  if (((10 < (uint)(returnValue - DAT_2000027c)) && (DAT_20000275 == '\\0')) && (DAT_20000274 == '\\0')) {\n    DAT_20000270 = FUN_08003034();\n    DAT_20000275 = '\\x01';\n    FUN_0800403c(0xee,DAT_20000038 + 0x40,1,0,variable1);\n    DAT_20000278 = thunk_FUN_0800115c();\n  }\n  returnValue = thunk_FUN_0800115c();\n  if (((10 < (uint)(returnValue - DAT_20000278)) && (DAT_20000275 != '\\0')) && (DAT_20000274 == '\\0')) {\n    DAT_2000026c = FUN_08003034();\n    DAT_20000274 = '\\x01';\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800411c": "initialize_application_0800411c",
                "puVar1": "ptr",
                "lVar2": "longValue",
                "uVar3": "temp1",
                "uVar4": "temp2",
                "uVar5": "temp3",
                "uVar6": "value1",
                "uVar7": "value2",
                "iVar8": "returnValue",
                "uVar9": "temp4",
                "uVar10": "temp5",
                "uVar11": "temp6",
                "uVar12": "temp7",
                "puVar13": "ptr2",
                "unaff_r4": "variable1",
                "iVar14": "variable2",
                "iVar15": "variable3",
                "bVar16": "isConditionTrue",
                "uVar17": "resultValue"
            },
            "calling": [
                "FUN_080041ae"
            ],
            "called": [
                "thunk_FUN_0800115c",
                "FUN_080004d0",
                "FUN_08000e54",
                "FUN_08003034",
                "FUN_08000a30",
                "FUN_08000c44",
                "FUN_08004410",
                "FUN_08005900",
                "FUN_08004348",
                "FUN_08000168",
                "FUN_08000428",
                "FUN_08002f28",
                "FUN_08004458",
                "FUN_080043bc",
                "FUN_08004384",
                "FUN_0800403c",
                "FUN_08004a84",
                "FUN_080043f0",
                "FUN_08004434",
                "FUN_08001078",
                "FUN_08000adc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004194": {
            "entrypoint": "0x08004194",
            "current_name": "initialize_system_08004194",
            "code": "\nvoid initializeSystem_08004194(void)\n\n{\n  FUN_08004028();\n  FUN_08004c70();\n  FUN_08002ea0();\n  FUN_08003298();\n  DAT_200000f4 = 1;\n  DAT_20000150 = 1;\n  DAT_200001ac = 0xffffffff;\n  DAT_20000098 = 1;\n  DAT_200000c8 = 0x44bb8000;\n  DAT_20000124 = 0x44b54000;\n  DAT_20000180 = 0x44fa0000;\n  DAT_2000006c = 0;\n  DAT_200000ac = 0x408ccccd;\n  DAT_200000b0 = 0x3ca3d70a;\n  DAT_200000b4 = 0x438c0000;\n  DAT_200000b8 = 0x40900000;\n  DAT_200000bc = 0x3ca3d70a;\n  DAT_200000c0 = 0x43b40000;\n  DAT_20000108 = 0x40733333;\n  DAT_2000010c = 0x3ca3d70a;\n  DAT_20000110 = 0x43820000;\n  DAT_20000114 = 0x40733333;\n  DAT_20000118 = 0x3ca3d70a;\n  DAT_2000011c = 0x43a00000;\n  DAT_20000164 = 0x40400000;\n  DAT_20000168 = 0x3c23d70a;\n  DAT_2000016c = 0x438c0000;\n  DAT_20000170 = 0;\n  DAT_20000174 = 0;\n  DAT_20000178 = 0;\n  DAT_20000050 = 0x41200000;\n  DAT_20000054 = 0;\n  DAT_20000058 = 0;\n  DAT_2000005c = 0;\n  DAT_20000060 = 0;\n  DAT_20000064 = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004194": "initialize_system_08004194"
            },
            "calling": [
                "FUN_080041ae"
            ],
            "called": [
                "FUN_08002ea0",
                "FUN_08004c70",
                "FUN_08004028",
                "FUN_08003298"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080041ae": {
            "entrypoint": "0x080041ae",
            "current_name": "run_infinite_loop_080041ae",
            "code": "\nvoid runInfiniteLoop_080041ae(void)\n\n{\n  FUN_08003eb0(0);\n  FUN_08004194();\n  do {\n    FUN_0800114c();\n    FUN_0800411c();\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_080041ae": "run_infinite_loop_080041ae"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_08003eb0",
                "FUN_08004194",
                "FUN_0800411c",
                "FUN_0800114c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080041c4": {
            "entrypoint": "0x080041c4",
            "current_name": "initialize_components_080041c4",
            "code": "\nvoid initializeComponents_080041c4(undefined4 arg1,undefined4 arg2,undefined4 arg3,undefined4 arg4)\n\n{\n  undefined4 tempVar1;\n  \n  FUN_08003fc4(0);\n  FUN_08003fd0(0);\n  FUN_08003fdc(0);\n  FUN_08003fe8(0,tempVar1,arg3,arg4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080041c4": "initialize_components_080041c4",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arg3",
                "param_4": "arg4",
                "extraout_r1": "tempVar1"
            },
            "calling": [
                "FUN_08004a84"
            ],
            "called": [
                "FUN_08003fe8",
                "FUN_08003fc4",
                "FUN_08003fdc",
                "FUN_08003fd0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800426c": {
            "entrypoint": "0x0800426c",
            "current_name": "calculate_thresholds_0800426c",
            "code": "\n\n\nvoid calculate_thresholds_0800426c(undefined4 arg1,undefined4 arg2,undefined4 arg3,undefined4 arg4)\n\n{\n  undefined4 result1;\n  undefined4 result2;\n  undefined4 result3;\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  uint temp4;\n  \n  result1 = FUN_08000ad8();\n  result2 = FUN_08000adc(arg1,arg2);\n  result3 = FUN_08000ad8(result1,arg3);\n  result3 = FUN_08000adc(result3,arg4);\n  FUN_08000ad8(result3,0x447a0000);\n  temp1 = FUN_08001078();\n  result3 = FUN_08000ad8(result2,arg3);\n  result3 = FUN_08000ad8(result3,arg4);\n  FUN_08000ad8(result3,0x447a0000);\n  temp2 = FUN_08001078();\n  result1 = FUN_08000adc(result1,arg3);\n  result1 = FUN_08000ad8(result1,arg4);\n  FUN_08000ad8(result1,0x447a0000);\n  temp3 = FUN_08001078();\n  result1 = FUN_08000adc(arg3,result2);\n  result1 = FUN_08000adc(result1,arg4);\n  FUN_08000ad8(result1,0x447a0000);\n  temp4 = FUN_08001078();\n  if (999 < (int)temp4) {\n    temp4 = 1000;\n  }\n  if (999 < (int)temp3) {\n    temp3 = 1000;\n  }\n  if (999 < (int)temp2) {\n    temp2 = 1000;\n  }\n  if (999 < (int)temp1) {\n    temp1 = 1000;\n  }\n  DAT_200002a0 = temp2 & ~((int)temp2 >> 0x1f);\n  DAT_200002a4 = temp1 & ~((int)temp1 >> 0x1f);\n  DAT_2000029c = temp3 & ~((int)temp3 >> 0x1f);\n  DAT_20000298 = temp4 & ~((int)temp4 >> 0x1f);\n  FUN_08003fc4();\n  FUN_08003fd0(DAT_2000029c);\n  FUN_08003fdc(DAT_200002a0);\n  FUN_08003fe8(DAT_200002a4);\n  _DAT_200013dd = (short)DAT_20000298 + 1000;\n  DAT_200013df = (short)DAT_2000029c + 1000;\n  _DAT_200013e1 = (short)DAT_200002a0 + 1000;\n  DAT_200013e3 = (short)DAT_200002a4 + 1000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800426c": "calculate_thresholds_0800426c",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arg3",
                "param_4": "arg4",
                "uVar1": "result1",
                "uVar2": "result2",
                "uVar3": "result3",
                "uVar4": "temp1",
                "uVar5": "temp2",
                "uVar6": "temp3",
                "uVar7": "temp4"
            },
            "calling": [
                "FUN_08004a84"
            ],
            "called": [
                "FUN_08000ad8",
                "FUN_08003fe8",
                "FUN_08003fc4",
                "FUN_08003fdc",
                "FUN_08001078",
                "FUN_08000adc",
                "FUN_08003fd0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004300": {
            "entrypoint": "0x08004300",
            "current_name": "verify_checksum_08004300",
            "code": "\nvoid verify_checksum_08004300(uint key,byte *data,uint length)\n\n{\n  uint checksum;\n  byte *byte_ptr;\n  \n  FUN_08004c8c(&DAT_0800732e);\n  FUN_08004c18(length & 0xff);\n  checksum = length & 0xff ^ key;\n  FUN_08004c18(key);\n  for (byte_ptr = data; (int)byte_ptr - (int)data < (int)length; byte_ptr = byte_ptr + 1) {\n    FUN_08004c18(*byte_ptr);\n    checksum = checksum ^ *byte_ptr;\n  }\n  FUN_08004c18(checksum);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004300": "verify_checksum_08004300",
                "param_1": "key",
                "param_2": "data",
                "param_3": "length",
                "uVar1": "checksum",
                "pbVar2": "byte_ptr"
            },
            "calling": [
                "FUN_08004458",
                "FUN_08004384",
                "FUN_080043bc",
                "FUN_08004410",
                "FUN_08004348",
                "FUN_080043f0",
                "FUN_08004434"
            ],
            "called": [
                "FUN_08004c18",
                "FUN_08004c8c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004348": {
            "entrypoint": "0x08004348",
            "current_name": "initialize_data_08004348",
            "code": "\n\n\nvoid initializeData_08004348(undefined4 dataPtr,uint dataSize,undefined4 param3)\n\n{\n  undefined4 constantValue;\n  uint maskedSize;\n  undefined4 param3Copy;\n  \n  _DAT_20001423 = 0x40003e9;\n  _DAT_20001427 = 0;\n  DAT_20001429 = 0;\n  constantValue = 0x40003e9;\n  maskedSize = dataSize & 0xff000000;\n  param3Copy = param3;\n  FUN_08004300(100,&constantValue,7);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004348": "initialize_data_08004348",
                "param_1": "dataPtr",
                "param_2": "dataSize",
                "param_3": "param3",
                "local_10": "constantValue",
                "local_c": "maskedSize",
                "uStack_8": "param3Copy"
            },
            "calling": [
                "FUN_0800411c"
            ],
            "called": [
                "FUN_08004300"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004384": {
            "entrypoint": "0x08004384",
            "current_name": "initialize_data_08004384",
            "code": "\n\n\nvoid initializeData_08004384(undefined4 inputParam1,undefined4 inputParam2,undefined4 inputParam3,uint inputParam4)\n\n{\n  undefined4 data1;\n  undefined4 data2;\n  uint maskedParam4;\n  \n  _DAT_200013bd = 0x2a0007;\n  data1 = _DAT_200013b9;\n  data2 = 0x2a0007;\n  _DAT_200013c1 = 0;\n  DAT_200013c3 = 0;\n  maskedParam4 = inputParam4 & 0xff000000;\n  FUN_08004300(0x65,&data1,0xb,0,inputParam1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004384": "initialize_data_08004384",
                "param_1": "inputParam1",
                "param_2": "inputParam2",
                "param_3": "inputParam3",
                "param_4": "inputParam4",
                "local_14": "data1",
                "uStack_10": "data2",
                "local_c": "maskedParam4"
            },
            "calling": [
                "FUN_0800411c"
            ],
            "called": [
                "FUN_08004300"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080043bc": {
            "entrypoint": "0x080043bc",
            "current_name": "copy_and_call_function_080043bc",
            "code": "\nvoid copyAndCallFunction_080043bc(void)\n\n{\n  undefined4 value1;\n  undefined4 value2;\n  undefined4 *ptrDest;\n  undefined4 *ptrSrc;\n  undefined4 destValues [2];\n  undefined2 srcValues [6];\n  \n  ptrSrc = (undefined4 *)&DAT_2000142a;\n  ptrDest = destValues;\n  do {\n    value1 = *ptrSrc;\n    value2 = ptrSrc[1];\n    ptrSrc = ptrSrc + 2;\n    *ptrDest = value1;\n    ptrDest[1] = value2;\n    ptrDest = ptrDest + 2;\n  } while (ptrSrc != (undefined4 *)&DAT_2000143a);\n  *(undefined2 *)ptrDest = DAT_2000143a;\n  FUN_08004300(0x66,destValues,0x12);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080043bc": "copy_and_call_function_080043bc",
                "puVar4": "ptrSrc",
                "puVar3": "ptrDest",
                "local_24": "destValues",
                "local_1c": "srcValues",
                "uVar1": "value1",
                "uVar2": "value2"
            },
            "calling": [
                "FUN_0800411c"
            ],
            "called": [
                "FUN_08004300"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080043f0": {
            "entrypoint": "0x080043f0",
            "current_name": "extract_data_080043f0",
            "code": "\n\n\nvoid extractData_080043f0(undefined4 arg1,undefined4 arg2,undefined4 arg3)\n\n{\n  undefined4 data1;\n  undefined4 data2;\n  undefined4 dataArray [2];\n  \n  data1 = _DAT_200013dd;\n  data2 = _DAT_200013e1;\n  dataArray[0] = arg3;\n  FUN_08004300(0x68,&data1,8,dataArray);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080043f0": "extract_data_080043f0",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arg3",
                "local_10": "data1",
                "uStack_c": "data2",
                "auStack_8": "dataArray"
            },
            "calling": [
                "FUN_0800411c"
            ],
            "called": [
                "FUN_08004300"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004410": {
            "entrypoint": "0x08004410",
            "current_name": "initialize_data_08004410",
            "code": "\nvoid initializeData_08004410(undefined4 inputParam1,undefined4 inputParam2,undefined4 inputParam3)\n\n{\n  undefined4 data1;\n  undefined4 data2;\n  undefined4 data3;\n  \n  data1 = DAT_20001395;\n  data2 = CONCAT22((short)((uint)inputParam2 >> 0x10),DAT_20001399);\n  data3 = inputParam3;\n  FUN_08004300(0x6c,&data1,6);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004410": "initialize_data_08004410",
                "param_1": "inputParam1",
                "param_2": "inputParam2",
                "param_3": "inputParam3",
                "local_10": "data1",
                "local_c": "data2",
                "uStack_8": "data3"
            },
            "calling": [
                "FUN_0800411c"
            ],
            "called": [
                "FUN_08004300"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004434": {
            "entrypoint": "0x08004434",
            "current_name": "initialize_and_send_data_08004434",
            "code": "\nvoid initializeAndSendData_08004434(undefined4 param1,undefined4 param2,undefined4 param3)\n\n{\n  undefined4 dataBuffer;\n  undefined4 concatenatedValue;\n  undefined4 paramValue;\n  \n  dataBuffer = DAT_200014ab;\n  concatenatedValue = CONCAT22((short)((uint)param2 >> 0x10),DAT_200014af);\n  paramValue = param3;\n  FUN_08004300(0x6d,&dataBuffer,6);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004434": "initialize_and_send_data_08004434",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "local_10": "dataBuffer",
                "local_c": "concatenatedValue",
                "uStack_8": "paramValue"
            },
            "calling": [
                "FUN_0800411c"
            ],
            "called": [
                "FUN_08004300"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004458": {
            "entrypoint": "0x08004458",
            "current_name": "copy_and_execute_08004458",
            "code": "\nvoid copyAndExecute_08004458(void)\n\n{\n  undefined4 *destination;\n  undefined4 *source;\n  undefined4 tempValue;\n  undefined4 *destinationPtr;\n  undefined4 *sourcePtr;\n  undefined4 copyBuffer [3];\n  undefined2 tempBuffer [10];\n  \n  destination = copyBuffer;\n  source = &DAT_2000139b;\n  do {\n    sourcePtr = source;\n    destinationPtr = destination;\n    tempValue = sourcePtr[1];\n    *destinationPtr = *sourcePtr;\n    destinationPtr[1] = tempValue;\n    destination = destinationPtr + 2;\n    source = sourcePtr + 2;\n  } while (sourcePtr + 2 != (undefined4 *)0x200013b3);\n  destinationPtr[2] = uRam200013b3;\n  *(undefined2 *)(destinationPtr + 3) = *(undefined2 *)(sourcePtr + 3);\n  FUN_08004300(0x70,copyBuffer,0x1e);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004458": "copy_and_execute_08004458",
                "puVar1": "destination",
                "puVar2": "source",
                "uVar3": "tempValue",
                "puVar4": "destinationPtr",
                "puVar5": "sourcePtr",
                "local_30": "copyBuffer",
                "local_24": "tempBuffer"
            },
            "calling": [
                "FUN_0800411c"
            ],
            "called": [
                "FUN_08004300"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004490": {
            "entrypoint": "0x08004490",
            "current_name": "continuous_error_handling_08004490",
            "code": "\nvoid continuousErrorHandling_08004490(undefined4 inputName,undefined4 lineNumber)\n\n{\n  FUN_08001424(0x40011000,0x4000,1);\n  FUN_08001424(0x40011000,0x8000,0);\n  FUN_08001424(0x40011000,0x2000,0);\n  do {\n    FUN_0800142e(0x40011000,0x4000);\n    FUN_0800142e(0x40011000,0x8000);\n    FUN_0800142e(0x40011000,0x2000);\n    FUN_08004c8c(\"Error with \");\n    FUN_08004c8c(inputName);\n    FUN_08004c8c(\" at line: \");\n    FUN_08004cac(lineNumber);\n    FUN_08004c18(10);\n    thunk_FUNC_08001168(500);\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08004490": "continuous_error_handling_08004490",
                "param_1": "inputName",
                "param_2": "lineNumber"
            },
            "calling": [
                "FUN_0800407c",
                "FUN_0800403c",
                "FUN_08004514",
                "FUN_080040b8",
                "FUN_0800458c"
            ],
            "called": [
                "FUN_08004cac",
                "FUN_08004c18",
                "FUN_0800142e",
                "thunk_FUN_08001168",
                "FUN_08001424",
                "FUN_08004c8c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004514": {
            "entrypoint": "0x08004514",
            "current_name": "initialize_peripherals_08004514",
            "code": "\nvoid initializePeripherals_08004514(void)\n\n{\n  int result;\n  uint time;\n  undefined4 fileIndex;\n  int counter;\n  undefined4 flag1;\n  int temp1;\n  int temp2;\n  undefined4 size;\n  int length;\n  undefined4 filePaths [4];\n  undefined4 value1;\n  undefined4 value2;\n  undefined4 value3;\n  undefined4 value4;\n  undefined4 value5;\n  \n  value1 = 1;\n  value2 = 0x10;\n  counter = 2;\n  value4 = 0;\n  filePaths[0] = 2;\n  value3 = 2;\n  value5 = 0x380000;\n  result = FUN_08001b58(filePaths);\n  if (result == 0) goto LAB_08004540;\n  fileIndex = 0x3c;\n  while( true ) {\n    result = FUN_08004490(\"../Src/peripherals.c\",fileIndex);\nLAB_08004540:\n    flag1 = 0xf;\n    size = 0x400;\n    temp1 = counter;\n    temp2 = result;\n    length = result;\n    counter = FUN_0800209c(&flag1,counter);\n    if (counter == 0) break;\n    fileIndex = 0x49;\n  }\n  time = FUN_08002214();\n  FUN_08001214(time / 1000);\n  FUN_08001240(4);\n  FUN_08001194(0xffffffff,0,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004514": "initialize_peripherals_08004514",
                "iVar1": "result",
                "uVar2": "time",
                "uVar3": "fileIndex",
                "iVar4": "counter",
                "local_44": "flag1",
                "local_40": "temp1",
                "local_3c": "temp2",
                "local_38": "size",
                "local_34": "length",
                "local_30": "filePaths",
                "local_20": "value1",
                "local_1c": "value2",
                "local_14": "value3",
                "local_10": "value4",
                "local_c": "value5"
            },
            "calling": [
                "FUN_0800458c"
            ],
            "called": [
                "FUN_08002214",
                "FUN_08001b58",
                "FUN_08004490",
                "FUN_0800209c",
                "FUN_08001194",
                "FUN_08001214",
                "FUN_08001240"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800458c": {
            "entrypoint": "0x0800458c",
            "current_name": "initialize_peripheral_0800458c",
            "code": "\n\n\nvoid initializePeripheral_0800458c(void)\n\n{\n  int returnValue;\n  undefined4 loopVariable;\n  int initialValue;\n  int var1;\n  int var2;\n  int var3;\n  int var4;\n  int var5;\n  int var6;\n  int var7;\n  int var8;\n  int var9;\n  int var10;\n  int var11;\n  int var12;\n  int var13;\n  undefined4 var14;\n  int var15;\n  \n  FUN_08001128();\n  FUN_08004514();\n  initialValue = 2;\n  _DAT_40021018 = _DAT_40021018 | 0x1c;\n  FUN_08001424(0x40011000,0xe000,0,_DAT_40021018 & 8);\n  FUN_08001424(0x40010800,0x20,0);\n  var9 = 0xe000;\n  var10 = 1;\n  var12 = 2;\n  FUN_08001264(0x40011000,&var9);\n  var9 = 0x20;\n  var10 = 1;\n  var12 = 2;\n  FUN_08001264(0x40010800,&var9);\n  DAT_20001504 = 0x40005400;\n  DAT_20001508 = 400000;\n  DAT_20001514 = 0x4000;\n  DAT_2000150c = 0;\n  DAT_20001510 = 0;\n  DAT_20001518 = 0;\n  DAT_2000151c = 0;\n  DAT_20001520 = 0;\n  DAT_20001524 = 0;\n  returnValue = FUN_08001754();\n  if (returnValue == 0) goto LAB_0800463a;\n  loopVariable = 0x6b;\n  while( true ) {\n    while( true ) {\n      while( true ) {\n        while( true ) {\n          while( true ) {\n            while( true ) {\n              while( true ) {\n                while( true ) {\n                  while( true ) {\n                    while( true ) {\n                      while( true ) {\n                        while( true ) {\n                          while( true ) {\n                            while( true ) {\n                              while( true ) {\n                                while( true ) {\n                                  returnValue = FUN_08004490(\"../Src/peripherals.c\",loopVariable);\nLAB_0800463a:\n                                  DAT_2000157c = 0x40013800;\n                                  DAT_20001580 = 0x1c200;\n                                  DAT_20001590 = 0xc;\n                                  DAT_20001584 = returnValue;\n                                  DAT_20001588 = returnValue;\n                                  DAT_2000158c = returnValue;\n                                  DAT_20001594 = returnValue;\n                                  DAT_20001598 = returnValue;\n                                  returnValue = FUN_08002724(&DAT_2000157c);\n                                  if (returnValue == 0) break;\n                                  loopVariable = 0x151;\n                                }\n                                DAT_200015bc = 0x40012c00;\n                                DAT_200015c8 = 1000;\n                                DAT_200015c0 = initialValue;\n                                DAT_200015c4 = returnValue;\n                                DAT_200015cc = returnValue;\n                                DAT_200015d0 = returnValue;\n                                returnValue = FUN_080023d0(&DAT_200015bc);\n                                if (returnValue == 0) break;\n                                loopVariable = 0x88;\n                              }\n                              var1 = returnValue;\n                              var2 = returnValue;\n                              returnValue = FUN_080025a4(&DAT_200015bc,&var1);\n                              if (returnValue == 0) break;\n                              loopVariable = 0x8f;\n                            }\n                            var3 = 0x60;\n                            var4 = returnValue;\n                            var5 = returnValue;\n                            var6 = returnValue;\n                            var7 = returnValue;\n                            var8 = returnValue;\n                            returnValue = FUN_0800245c(&DAT_200015bc,&var3,0xc);\n                            if (returnValue == 0) break;\n                            loopVariable = 0x9a;\n                          }\n                          var14 = 0x2000;\n                          var9 = returnValue;\n                          var10 = returnValue;\n                          var11 = returnValue;\n                          var12 = returnValue;\n                          var13 = returnValue;\n                          var15 = returnValue;\n                          returnValue = FUN_08002564(&DAT_200015bc,&var9);\n                          if (returnValue == 0) break;\n                          loopVariable = 0xa6;\n                        }\n                        FUN_08004e14(&DAT_200015bc);\n                        DAT_200015f8 = 0x40000000;\n                        DAT_20001604 = 1000;\n                        DAT_200015fc = initialValue;\n                        DAT_20001600 = returnValue;\n                        DAT_20001608 = returnValue;\n                        returnValue = FUN_080023d0(&DAT_200015f8);\n                        if (returnValue == 0) break;\n                        loopVariable = 0xc3;\n                      }\n                      var3 = returnValue;\n                      var4 = returnValue;\n                      returnValue = FUN_080025a4(&DAT_200015f8,&var3);\n                      if (returnValue == 0) break;\n                      loopVariable = 0xca;\n                    }\n                    var9 = 0x60;\n                    var10 = returnValue;\n                    var11 = returnValue;\n                    var13 = returnValue;\n                    returnValue = FUN_0800245c(&DAT_200015f8,&var9,4);\n                    if (returnValue == 0) break;\n                    loopVariable = 0xd3;\n                  }\n                  FUN_08004e14(&DAT_200015f8);\n                  DAT_2000154c = 1000;\n                  DAT_20001540 = 0x40000400;\n                  DAT_20001544 = initialValue;\n                  DAT_20001548 = returnValue;\n                  DAT_20001550 = returnValue;\n                  returnValue = FUN_080023d0();\n                  if (returnValue == 0) break;\n                  loopVariable = 0xf0;\n                }\n                var3 = 0;\n                var4 = 0;\n                returnValue = FUN_080025a4(&DAT_20001540,&var3);\n                if (returnValue == 0) break;\n                loopVariable = 0xf7;\n              }\n              var9 = 0x60;\n              var10 = returnValue;\n              var11 = returnValue;\n              var13 = returnValue;\n              returnValue = FUN_0800245c(&DAT_20001540,&var9,8);\n              if (returnValue == 0) break;\n              loopVariable = 0x100;\n            }\n            initialValue = FUN_0800245c(&DAT_20001540,&var9,0xc);\n            if (initialValue == 0) break;\n            loopVariable = 0x105;\n          }\n          FUN_08004e14(&DAT_20001540);\n          DAT_200014c8 = 0x40000800;\n          DAT_200014cc = 2;\n          DAT_200014d4 = 1000;\n          DAT_200014d0 = initialValue;\n          DAT_200014d8 = initialValue;\n          returnValue = FUN_080023d0(&DAT_200014c8);\n          if (returnValue == 0) break;\n          loopVariable = 0x122;\n        }\n        var3 = returnValue;\n        var4 = returnValue;\n        returnValue = FUN_080025a4(&DAT_200014c8,&var3);\n        if (returnValue == 0) break;\n        loopVariable = 0x129;\n      }\n      var9 = 0x60;\n      var10 = returnValue;\n      var11 = returnValue;\n      var13 = returnValue;\n      returnValue = FUN_0800245c(&DAT_200014c8,&var9,8);\n      if (returnValue == 0) break;\n      loopVariable = 0x132;\n    }\n    returnValue = FUN_0800245c(&DAT_200014c8,&var9,0xc);\n    if (returnValue == 0) break;\n    loopVariable = 0x137;\n  }\n  FUN_08004e14(&DAT_200014c8);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800458c": "initialize_peripheral_0800458c",
                "iVar1": "returnValue",
                "uVar2": "loopVariable",
                "iVar3": "initialValue",
                "local_58": "var1",
                "local_54": "var2",
                "local_50": "var3",
                "local_4c": "var4",
                "local_48": "var5",
                "local_40": "var6",
                "local_3c": "var7",
                "local_38": "var8",
                "local_34": "var9",
                "local_30": "var10",
                "local_2c": "var11",
                "local_28": "var12",
                "local_24": "var13",
                "local_20": "var14",
                "local_1c": "var15"
            },
            "calling": [
                "FUN_08004028"
            ],
            "called": [
                "FUN_08002564",
                "FUN_08001264",
                "FUN_08004e14",
                "FUN_08001754",
                "FUN_08004490",
                "FUN_0800245c",
                "FUN_08004514",
                "FUN_080023d0",
                "FUN_08001128",
                "FUN_08001424",
                "FUN_080025a4",
                "FUN_08002724"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800483c": {
            "entrypoint": "0x0800483c",
            "current_name": "initialize_data_0800483c",
            "code": "\nvoid initializeData_0800483c(int *data)\n\n{\n  undefined4 result1;\n  undefined4 result2;\n  int var3;\n  int temporary1;\n  int temporary2;\n  \n  temporary1 = data[0xc];\n  result1 = FUN_08000adc(data[7],data[9]);\n  temporary1 = FUN_08000ad8(result1,temporary1);\n  data[10] = temporary1;\n  if (*data == 3) {\n    temporary1 = FUN_08001064(data[10],0);\n    if (temporary1 == 0) {\n      temporary1 = FUN_08001028(data[10],0xc3340000);\n    }\n    else {\n      temporary1 = FUN_08001064(data[10],0x43340000);\n    }\n    if (temporary1 != 0) {\n      temporary2 = data[10];\n      result1 = FUN_08000cec(data[10],0x43b40000);\n      temporary1 = FUN_08001064(data[10],0);\n      var3 = data[10];\n      if (temporary1 == 0) {\n        var3 = var3 + -0x80000000;\n      }\n      result1 = FUN_08000e54(result1,var3);\n      temporary1 = FUN_08000ad8(temporary2,result1);\n      data[10] = temporary1;\n    }\n  }\n  temporary2 = data[2];\n  var3 = data[3];\n  temporary1 = FUN_08000cec(data[1],data[10]);\n  data[0xe] = temporary1;\n  temporary1 = FUN_08000adc(data[10],data[0xf]);\n  data[0xf] = temporary1;\n  temporary1 = FUN_08001028(data[0xf],0xc3fa0000);\n  if (temporary1 == 0) {\n    temporary1 = FUN_08001064(data[0xf],0x43fa0000);\n    if (temporary1 == 0) {\n      temporary1 = data[0xf];\n    }\n    else {\n      temporary1 = 0x43fa0000;\n    }\n  }\n  else {\n    temporary1 = -0x3c060000;\n  }\n  data[0xf] = temporary1;\n  temporary1 = FUN_08000ad8(data[0xc],data[0xd]);\n  data[0x10] = temporary1;\n  temporary1 = data[0xe];\n  result1 = FUN_08000cec(temporary2,data[0xf]);\n  result1 = FUN_08000adc(result1,temporary1);\n  result2 = FUN_08000cec(var3,data[0x10]);\n  temporary1 = FUN_08000ad8(result1,result2);\n  data[0x12] = temporary1;\n  result1 = FUN_08000c44(data[0x13]);\n  temporary1 = FUN_08001028(data[0x12],0xc3fa0000);\n  if (temporary1 == 0) {\n    temporary1 = FUN_08001064(data[0x12],0x43fa0000);\n    if (temporary1 == 0) {\n      temporary1 = data[0x12];\n    }\n    else {\n      temporary1 = 0x43fa0000;\n    }\n  }\n  else {\n    temporary1 = -0x3c060000;\n  }\n  temporary1 = FUN_08000cec(temporary1,result1);\n  data[0x12] = temporary1;\n  data[0xd] = data[0xc];\n  data[0xb] = data[10];\n  data[0x15] = data[0x14];\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800483c": "initialize_data_0800483c",
                "param_1": "data",
                "uVar1": "result1",
                "uVar2": "result2",
                "iVar3": "var3",
                "iVar4": "temporary1",
                "iVar5": "temporary2"
            },
            "calling": [
                "FUN_08004a84"
            ],
            "called": [
                "FUN_08000ad8",
                "FUN_08000e54",
                "FUN_08001028",
                "FUN_08000c44",
                "FUN_08001064",
                "FUN_08000cec",
                "FUN_08000adc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004a30": {
            "entrypoint": "0x08004a30",
            "current_name": "initialize_data_08004a30",
            "code": "\nvoid initializeData_08004a30(void)\n\n{\n  undefined4 result;\n  \n  if (DAT_20000285 != '\\0') {\n    if (DAT_200002a8 == '\\0') {\n      result = FUN_08003068();\n      DAT_20000068 = FUN_08000cec(result,0x42c80000);\n      DAT_200002a8 = '\\x01';\n    }\n    else {\n      result = FUN_08003068();\n      DAT_2000007c = FUN_08000cec(result,0x42c80000);\n    }\n  }\n  if (DAT_20000285 == '\\0') {\n    if (DAT_200002a8 != '\\0') {\n      DAT_200002a8 = DAT_20000285;\n    }\n    DAT_20000094 = DAT_20000288;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004a30": "initialize_data_08004a30",
                "uVar1": "result"
            },
            "calling": [
                "FUN_08004a84"
            ],
            "called": [
                "FUN_08003068",
                "FUN_08000cec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004a84": {
            "entrypoint": "0x08004a84",
            "current_name": "initialize_data_08004a84",
            "code": "\nvoid initializeData_08004a84(void)\n\n{\n  int result;\n  \n  DAT_200000d8 = FUN_08002ec0();\n  DAT_20000134 = FUN_08002ed4();\n  DAT_20000190 = FUN_08002ee8();\n  FUN_08004a30();\n  result = FUN_08001064(DAT_200000d8,0);\n  if (result == 0) {\n    result = FUN_08001028(DAT_200000d8,0xc2a00000);\n  }\n  else {\n    result = FUN_08001064(DAT_200000d8,0x42a00000);\n  }\n  if (result == 0) {\n    result = FUN_08001064(DAT_20000134,0);\n    if (result == 0) {\n      result = FUN_08001028(DAT_20000134,0xc2a00000);\n    }\n    else {\n      result = FUN_08001064(DAT_20000134,0x42a00000);\n    }\n    if (result == 0) {\n      FUN_08003f3c(1,1);\n      FUN_0800483c(&DAT_200000a8);\n      FUN_0800483c(&DAT_20000104);\n      FUN_0800483c(&DAT_20000160);\n      if (DAT_20000285 != '\\0') {\n        FUN_0800483c(&DAT_2000004c);\n        FUN_08000adc(DAT_20000094,0x44bb8000);\n      }\n      DAT_20000094 = DAT_20000288;\n      if (DAT_20000284 == '\\0') {\n        FUN_080041c4();\n      }\n      else {\n        FUN_0800426c(DAT_20000288,DAT_200000f0,DAT_2000014c,DAT_200001a8);\n      }\n      FUN_08000cec(DAT_200000ac,0x437f0000);\n      DAT_2000139b._3_1_ = FUN_080010c4();\n      FUN_08000cec(DAT_200000b0,0x437f0000);\n      DAT_2000139f._0_1_ = FUN_080010c4();\n      FUN_08000cec(DAT_20000108,0x437f0000);\n      DAT_2000139b._0_1_ = FUN_080010c4();\n      FUN_08000cec(DAT_2000010c,0x437f0000);\n      DAT_2000139b._1_1_ = FUN_080010c4();\n      FUN_08000cec(DAT_20000110,0x437f0000);\n      DAT_2000139b._2_1_ = FUN_080010c4();\n      FUN_08000cec(DAT_20000164,0x437f0000);\n      DAT_2000139f._2_1_ = FUN_080010c4();\n      FUN_08000cec(DAT_20000168,0x437f0000);\n      DAT_2000139f._3_1_ = FUN_080010c4();\n      FUN_08000cec(DAT_2000016c,0x437f0000);\n      DAT_200013a3._0_1_ = FUN_080010c4();\n      FUN_08000cec(DAT_20000050,0x437f0000);\n      DAT_200013a3._1_1_ = FUN_080010c4();\n      FUN_08000cec(DAT_20000054,0x437f0000);\n      DAT_200013a3._2_1_ = FUN_080010c4();\n      FUN_08000cec(DAT_20000058,0x437f0000);\n      DAT_200013a3._3_1_ = FUN_080010c4();\n      return;\n    }\n  }\n  FUN_080041c4();\n  FUN_08003f3c(0,1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004a84": "initialize_data_08004a84",
                "iVar1": "result"
            },
            "calling": [
                "FUN_0800411c"
            ],
            "called": [
                "FUN_08001028",
                "FUN_08002ee8",
                "FUN_080041c4",
                "FUN_0800483c",
                "FUN_08000cec",
                "FUN_08002ed4",
                "FUN_08004a30",
                "FUN_0800426c",
                "FUN_08001064",
                "FUN_080010c4",
                "FUN_08003f3c",
                "FUN_08000adc",
                "FUN_08002ec0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004c18": {
            "entrypoint": "0x08004c18",
            "current_name": "decode_string_08004c18",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0800289e) */\n\nundefined4 decode_string_08004c18(undefined input_string)\n\n{\n  int *ptr;\n  int value;\n  int next_value;\n  ushort *ptr;\n  \n  DAT_20001636._0_1_ = input_string;\n  ptr = &DAT_20001636;\n  if (((DAT_200015b5 != '\\x01') && (DAT_200015b5 != '\\\"')) || (DAT_200015b4 == '\\x01')) {\n    return 2;\n  }\n  DAT_200015b4 = 1;\n  DAT_200015b8 = 0;\n  DAT_200015a0 = 1;\n  if (DAT_200015b5 == '\\\"') {\n    DAT_200015b5 = '2';\n  }\n  else {\n    DAT_200015b5 = '\\x12';\n  }\n  DAT_200015a2 = 1;\nLAB_080027c4:\n  do {\n    if (DAT_200015a2 == 0) {\n      value = FUN_0800115c();\n      do {\n        if (*DAT_2000157c << 0x19 < 0) {\n          if (DAT_200015b5 == '2') {\n            DAT_200015b5 = 0x22;\n          }\n          else {\n            DAT_200015b5 = 1;\n          }\n          DAT_200015b4 = 0;\n          return 0;\n        }\n        next_value = FUN_0800115c();\n      } while ((uint)(next_value - value) < 6);\nLAB_0800281c:\n      ptr = DAT_2000157c;\n      DAT_2000157c[3] = DAT_2000157c[3] & 0xffffff7f;\n      ptr[3] = ptr[3] & 0xffffffdf;\n      ptr[3] = ptr[3] & 0xfffffeff;\n      ptr[5] = ptr[5] & 0xfffffffe;\n      DAT_200015b5 = 1;\n      DAT_200015b4 = 0;\n      return 3;\n    }\n    DAT_200015a2 = DAT_200015a2 + -1;\n    if (DAT_20001584 == 0x1000) {\n      value = FUN_0800115c();\n      while (-1 < *DAT_2000157c << 0x18) {\n        next_value = FUN_0800115c();\n        if (5 < (uint)(next_value - value)) goto LAB_0800281c;\n      }\n      DAT_2000157c[1] = *ptr & 0x1ff;\n      if (DAT_2000158c == 0) {\n        ptr = ptr + 1;\n        goto LAB_080027c4;\n      }\n    }\n    else {\n      value = FUN_0800115c();\n      while (-1 < *DAT_2000157c << 0x18) {\n        next_value = FUN_0800115c();\n        if (5 < (uint)(next_value - value)) goto LAB_0800281c;\n      }\n      DAT_2000157c[1] = (uint)*(byte *)ptr;\n    }\n    ptr = (ushort *)((int)ptr + 1);\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08004c18": "decode_string_08004c18",
                "param_1": "input_string",
                "piVar1": "ptr",
                "iVar2": "value",
                "iVar3": "next_value",
                "puVar4": "ptr"
            },
            "calling": [
                "FUN_08004490",
                "FUN_08004300",
                "FUN_08004c8c"
            ],
            "called": [
                "FUN_0800115c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004c30": {
            "entrypoint": "0x08004c30",
            "current_name": "handle_memory_block_08004c30",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08002902) */\n\nint * handleMemoryBlock_08004c30(int *memoryBlock)\n\n{\n  int iVar1;\n  \n  if (*memoryBlock != 0x40013800) {\n    return memoryBlock;\n  }\n  FUN_08003ec8(&DAT_20000364,DAT_20001634);\n  iVar1 = DAT_2000157c;\n  if (((DAT_200015b5 == '\\x01') || (DAT_200015b5 == '\\x12')) && (DAT_200015b4 != '\\x01')) {\n    DAT_200015b8 = 0;\n    DAT_200015a8 = 1;\n    DAT_200015aa = 1;\n    DAT_200015b4 = 0;\n    if (DAT_200015b5 == '\\x12') {\n      DAT_200015b5 = 0x32;\n    }\n    else {\n      DAT_200015b5 = 0x22;\n    }\n    DAT_200015a4 = &DAT_20001634;\n    *(uint *)(DAT_2000157c + 0xc) = *(uint *)(DAT_2000157c + 0xc) | 0x100;\n    *(uint *)(iVar1 + 0x14) = *(uint *)(iVar1 + 0x14) | 1;\n    *(uint *)(iVar1 + 0xc) = *(uint *)(iVar1 + 0xc) | 0x20;\n    return (int *)0x0;\n  }\n  return (int *)0x2;\n}\n\n",
            "renaming": {
                "FUN_08004c30": "handle_memory_block_08004c30",
                "param_1": "memoryBlock"
            },
            "calling": [
                "FUN_0800290c"
            ],
            "called": [
                "FUN_08003ec8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004c64": {
            "entrypoint": "0x08004c64",
            "current_name": "initialize_data_08004c64",
            "code": "\nvoid initializeData_08004c64(void)\n\n{\n  int counter;\n  \n  counter = 0;\n  DAT_20000b64 = 0;\n  DAT_20000b66 = 0;\n  DAT_20000b68 = 0;\n  do {\n    (&DAT_20000364)[counter] = 0;\n    counter = counter + 1;\n  } while (counter != 0x800);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004c64": "initialize_data_08004c64",
                "iVar1": "counter"
            },
            "calling": [
                "FUN_08004c70"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004c70": {
            "entrypoint": "0x08004c70",
            "current_name": "initialize_data_08004c70",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08002902) */\n\nundefined4 initializeData_08004c70(void)\n\n{\n  int dataPointer;\n  \n  FUN_08004c64();\n  dataPointer = DAT_2000157c;\n  if (((DAT_200015b5 == '\\x01') || (DAT_200015b5 == '\\x12')) && (DAT_200015b4 != '\\x01')) {\n    DAT_200015b8 = 0;\n    DAT_200015a8 = 1;\n    DAT_200015aa = 1;\n    DAT_200015b4 = 0;\n    if (DAT_200015b5 == '\\x12') {\n      DAT_200015b5 = 0x32;\n    }\n    else {\n      DAT_200015b5 = 0x22;\n    }\n    DAT_200015a4 = &DAT_20001634;\n    *(uint *)(DAT_2000157c + 0xc) = *(uint *)(DAT_2000157c + 0xc) | 0x100;\n    *(uint *)(dataPointer + 0x14) = *(uint *)(dataPointer + 0x14) | 1;\n    *(uint *)(dataPointer + 0xc) = *(uint *)(dataPointer + 0xc) | 0x20;\n    return 0;\n  }\n  return 2;\n}\n\n",
            "renaming": {
                "FUN_08004c70": "initialize_data_08004c70",
                "iVar1": "dataPointer"
            },
            "calling": [
                "FUN_08004194"
            ],
            "called": [
                "FUN_08004c64"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004c8c": {
            "entrypoint": "0x08004c8c",
            "current_name": "process_data_08004c8c",
            "code": "\nvoid process_data_08004c8c(undefined *data_array)\n\n{\n  uint comparison_val;\n  undefined *current_ptr;\n  \n  current_ptr = data_array;\n  while( true ) {\n    comparison_val = FUN_08000150(data_array);\n    if (comparison_val <= (uint)((int)current_ptr - (int)data_array)) break;\n    FUN_08004c18(*current_ptr);\n    current_ptr = current_ptr + 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004c8c": "process_data_08004c8c",
                "param_1": "data_array",
                "uVar1": "comparison_val",
                "puVar2": "current_ptr"
            },
            "calling": [
                "FUN_08004cac",
                "FUN_08004490",
                "FUN_08004300"
            ],
            "called": [
                "FUN_08000150",
                "FUN_08004c18"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004cac": {
            "entrypoint": "0x08004cac",
            "current_name": "initialize_data_08004cac",
            "code": "\nvoid initializeData_08004cac(undefined4 input)\n\n{\n  FUN_08004ffc(&DAT_20001636,&DAT_0800735e,input);\n  FUN_08004c8c(&DAT_20001636);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004cac": "initialize_data_08004cac",
                "param_1": "input"
            },
            "calling": [
                "FUN_08004490"
            ],
            "called": [
                "FUN_08004ffc",
                "FUN_08004c8c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004ccc": {
            "entrypoint": "0x08004ccc",
            "current_name": "set_flag_and_call_functions_08004ccc",
            "code": "\n\n\nvoid setFlagAndCallFunctions_08004ccc(undefined4 flagValue,undefined4 param2,undefined4 param3)\n\n{\n  _DAT_40021018 = _DAT_40021018 | 1;\n  FUN_08001170(3,param2,_DAT_40021018,1,flagValue,1,param3);\n  FUN_08001194(0xfffffff4,0);\n  FUN_08001194(0xfffffff5,0);\n  FUN_08001194(0xfffffff6,0);\n  FUN_08001194(0xfffffffb,0);\n  FUN_08001194(0xfffffffc,0);\n  FUN_08001194(0xfffffffe,0);\n  FUN_08001194(0xffffffff,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004ccc": "set_flag_and_call_functions_08004ccc",
                "param_1": "flagValue",
                "param_2": "param2",
                "param_3": "param3"
            },
            "calling": [
                "FUN_08001128"
            ],
            "called": [
                "FUN_08001170",
                "FUN_08001194"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004d48": {
            "entrypoint": "0x08004d48",
            "current_name": "check_and_set_flag_08004d48",
            "code": "\n\n\nvoid checkAndSetFlag_08004d48(int *ptr_value,undefined4 value)\n\n{\n  undefined4 local_var1;\n  undefined4 local_var2;\n  \n  if (*ptr_value == 0x40005400) {\n    local_var1 = 0xc0;\n    local_var2 = 0x12;\n    FUN_08001264(0x40010c00,&local_var1,0x40005400,3,ptr_value,value);\n    _DAT_4002101c = _DAT_4002101c | 0x200000;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004d48": "check_and_set_flag_08004d48",
                "param_1": "ptr_value",
                "param_2": "value",
                "local_18": "local_var1",
                "local_14": "local_var2"
            },
            "calling": [
                "FUN_08001754"
            ],
            "called": [
                "FUN_08001264"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004d8c": {
            "entrypoint": "0x08004d8c",
            "current_name": "update_register_value_08004d8c",
            "code": "\n\n/* WARNING: Restarted to delay deadcode elimination for space: ram */\n\nvoid updateRegisterValue_08004d8c(int *registerValue)\n\n{\n  int valueToCheck;\n  \n  valueToCheck = *registerValue;\n  if (valueToCheck == 0x40012c00) {\n    _DAT_40021018 = _DAT_40021018 | 0x800;\n  }\n  else if (valueToCheck == 0x40000000) {\n    _DAT_4002101c = _DAT_4002101c | 1;\n  }\n  else if (valueToCheck == 0x40000400) {\n    _DAT_4002101c = _DAT_4002101c | 2;\n  }\n  else if (valueToCheck == 0x40000800) {\n    _DAT_4002101c = _DAT_4002101c | 4;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004d8c": "update_register_value_08004d8c",
                "param_1": "registerValue",
                "iVar1": "valueToCheck"
            },
            "calling": [
                "FUN_080023d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004e14": {
            "entrypoint": "0x08004e14",
            "current_name": "initialize_config_08004e14",
            "code": "\nvoid initializeConfig_08004e14(int *config,undefined4 size,undefined4 paramValue)\n\n{\n  undefined4 defaultValue;\n  int configValue;\n  undefined4 newConfigValue;\n  undefined4 tempValue;\n  undefined4 paramResult;\n  undefined4 blockSize;\n  \n  configValue = *config;\n  if (configValue == 0x40012c00) {\n    newConfigValue = 0x800;\n  }\n  else {\n    if (configValue != 0x40000000) {\n      if (configValue == 0x40000400) {\n        newConfigValue = 3;\n      }\n      else {\n        if (configValue != 0x40000800) {\n          return;\n        }\n        newConfigValue = 0x300;\n      }\n      defaultValue = 0x40010c00;\n      goto LAB_08004e2e;\n    }\n    newConfigValue = 2;\n  }\n  defaultValue = 0x40010800;\nLAB_08004e2e:\n  blockSize = 2;\n  tempValue = 2;\n  paramResult = paramValue;\n  FUN_08001264(defaultValue,&newConfigValue);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004e14": "initialize_config_08004e14",
                "param_1": "config",
                "param_2": "size",
                "param_3": "paramValue",
                "uVar1": "defaultValue",
                "iVar2": "configValue",
                "local_18": "newConfigValue",
                "local_14": "tempValue",
                "uStack_10": "paramResult",
                "local_c": "blockSize"
            },
            "calling": [
                "FUN_0800458c"
            ],
            "called": [
                "FUN_08001264"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004e7c": {
            "entrypoint": "0x08004e7c",
            "current_name": "update_settings_08004e7c",
            "code": "\n\n\nvoid updateSettings_08004e7c(int *settings)\n\n{\n  undefined4 flag1;\n  undefined4 flag2;\n  undefined4 flag3;\n  undefined4 flag4;\n  \n  if (*settings == 0x40013800) {\n    _DAT_40021018 = _DAT_40021018 | 0x4000;\n    flag1 = 0x200;\n    flag2 = 2;\n    flag4 = 3;\n    FUN_08001264(0x40010800,&flag1);\n    flag1 = 0x400;\n    flag2 = 0;\n    flag3 = 0;\n    FUN_08001264(0x40010800,&flag1);\n    FUN_08001194(0x25,0,0);\n    FUN_080011fc(0x25);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004e7c": "update_settings_08004e7c",
                "param_1": "settings",
                "local_18": "flag1",
                "local_14": "flag2",
                "local_10": "flag3",
                "local_c": "flag4"
            },
            "calling": [
                "FUN_08002724"
            ],
            "called": [
                "FUN_08001264",
                "FUN_08001194",
                "FUN_080011fc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004f10": {
            "entrypoint": "0x08004f10",
            "current_name": "initialize_peripherals_08004f10",
            "code": "\n\n\nvoid initializePeripherals_08004f10(void)\n\n{\n  _DAT_40021000 = _DAT_40021000 & 0xfef2ffff | 1;\n  _DAT_40021004 = _DAT_40021004 & 0xf8800000;\n  _DAT_40021008 = 0x9f0000;\n  _DAT_e000ed08 = 0x8000000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004f10": "initialize_peripherals_08004f10"
            },
            "calling": [
                "entry"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "thunk_FUN_0800115c": {
            "entrypoint": "0x08004f60",
            "current_name": "get_global_variable_thunk_0800115c",
            "code": "\nundefined4 getGlobalVariable_thunk_0800115c(void)\n\n{\n  return DAT_20000244;\n}\n\n",
            "renaming": {
                "thunk_FUN_0800115c": "get_global_variable_thunk_0800115c"
            },
            "calling": [
                "FUN_08002f28"
            ],
            "called": [
                "FUN_0800115c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "thunk_FUN_08001168": {
            "entrypoint": "0x08004f64",
            "current_name": "thunk_FUNC_08001168",
            "code": "\nvoid thunk_FUNC_08001168(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "thunk_FUN_08001168": "thunk_FUNC_08001168"
            },
            "calling": [
                "FUN_0800403c",
                "FUN_08004490",
                "FUN_08004028",
                "FUN_08003298"
            ],
            "called": [
                "FUN_08001168"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "entry": {
            "entrypoint": "0x08004f68",
            "current_name": "entry",
            "code": "\nvoid entry(void)\n\n{\n  int iVar1;\n  undefined4 *puVar2;\n  code *UNRECOVERED_JUMPTABLE;\n  \n  for (iVar1 = 0; (undefined4 *)(iVar1 + 0x20000000) < &DAT_20000228; iVar1 = iVar1 + 4) {\n    *(undefined4 *)(iVar1 + 0x20000000) = *(undefined4 *)(iVar1 + 0x8007448);\n  }\n  for (puVar2 = &DAT_20000228; puVar2 < &DAT_200016a0; puVar2 = puVar2 + 1) {\n    *puVar2 = 0;\n  }\n  FUN_08004f10();\n  FUN_08004fb4();\n  UNRECOVERED_JUMPTABLE = (code *)0x8004f9a;\n  FUN_080041ae();\n                    /* WARNING: Could not recover jumptable at 0x08004f9a. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*UNRECOVERED_JUMPTABLE)();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [],
            "called": [
                "FUN_08004f10",
                "FUN_08004fb4",
                "FUN_080041ae"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004fb4": {
            "entrypoint": "0x08004fb4",
            "current_name": "execute_callbacks_08004fb4",
            "code": "\nvoid executeCallbacks_08004fb4(void)\n\n{\n  int callbackIndex;\n  \n  for (callbackIndex = 0; callbackIndex != 0; callbackIndex = callbackIndex + 1) {\n    (*(code *)(&DAT_08007440)[callbackIndex])();\n  }\n  FUNC_080072d4();\n  for (callbackIndex = 0; callbackIndex != 1; callbackIndex = callbackIndex + 1) {\n    (*(code *)(&DAT_08007440)[callbackIndex])();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004fb4": "execute_callbacks_08004fb4",
                "iVar1": "callbackIndex"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_08000134",
                "FUN_080072d4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004ffc": {
            "entrypoint": "0x08004ffc",
            "current_name": "clear_local_buffer_08004ffc",
            "code": "\nvoid clearLocalBuffer_08004ffc(undefined *buffer,undefined4 size,undefined4 param2,undefined4 param3)\n\n{\n  undefined *localBuffers [2];\n  undefined4 maxSize;\n  undefined2 bufferSize;\n  undefined2 defaultValue;\n  undefined *currentBuffer;\n  undefined4 maxSize2;\n  undefined4 param2Stack;\n  undefined4 param3Stack;\n  undefined4 param4Stack;\n  \n  bufferSize = 0x208;\n  maxSize = 0x7fffffff;\n  maxSize2 = 0x7fffffff;\n  defaultValue = 0xffff;\n  localBuffers[0] = buffer;\n  currentBuffer = buffer;\n  param2Stack = size;\n  param3Stack = param2;\n  param4Stack = param3;\n  FUN_080050fc(DAT_200001c0,localBuffers,size);\n  *localBuffers[0] = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004ffc": "clear_local_buffer_08004ffc",
                "param_1": "buffer",
                "param_2": "size",
                "param_3": "param2",
                "param_4": "param3",
                "local_78": "localBuffers",
                "local_70": "maxSize",
                "local_6c": "bufferSize",
                "local_6a": "defaultValue",
                "local_68": "currentBuffer",
                "local_64": "maxSize2",
                "uStack_c": "param2Stack",
                "uStack_8": "param3Stack",
                "uStack_4": "param4Stack"
            },
            "calling": [
                "FUN_08004cac"
            ],
            "called": [
                "FUN_080050fc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005044": {
            "entrypoint": "0x08005044",
            "current_name": "update_data_08005044",
            "code": "\nundefined4 updateData_08005044(undefined4 *output,int *data,undefined4 value,uint index)\n\n{\n  int result;\n  uint newIndex;\n  uint maxIndex;\n  int diff;\n  \n  maxIndex = data[2];\n  if ((maxIndex <= index) && ((*(ushort *)(data + 3) & 0x480) != 0)) {\n    diff = *data - data[4];\n    maxIndex = (uint)(data[5] * 3) / 2;\n    newIndex = index + 1 + diff;\n    if (maxIndex < newIndex) {\n      maxIndex = newIndex;\n    }\n    if ((int)((uint)*(ushort *)(data + 3) << 0x15) < 0) {\n      result = FUN_08005714(output,maxIndex);\n      if (result == 0) {\nlabel1:\n        *output = 0xc;\n        *(ushort *)(data + 3) = *(ushort *)(data + 3) | 0x40;\n        return 0xffffffff;\n      }\n      FUN_08005630(result,data[4],diff);\n      *(ushort *)(data + 3) = *(ushort *)(data + 3) & 0xfb7f | 0x80;\n    }\n    else {\n      result = FUN_080057d0(output,data[4],maxIndex);\n      if (result == 0) {\n        FUN_0800567c(output,data[4]);\n        goto label1;\n      }\n    }\n    data[4] = result;\n    *data = result + diff;\n    data[5] = maxIndex;\n    data[2] = maxIndex - diff;\n    maxIndex = index;\n  }\n  if (index <= maxIndex) {\n    maxIndex = index;\n  }\n  FUN_08005646(*data,value,maxIndex);\n  data[2] = data[2] - maxIndex;\n  *data = maxIndex + *data;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08005044": "update_data_08005044",
                "param_1": "output",
                "param_2": "data",
                "param_3": "value",
                "param_4": "index",
                "iVar1": "result",
                "uVar2": "newIndex",
                "uVar3": "maxIndex",
                "iVar4": "diff",
                "LAB_0800508a": "label1",
                "param_2[4]": "data[4]",
                "param_2[5]": "data[5]",
                "param_2[2]": "data[2]"
            },
            "calling": [
                "FUN_080050fc"
            ],
            "called": [
                "FUN_0800567c",
                "FUN_08005714",
                "FUN_080057d0",
                "FUN_08005646",
                "FUN_08005630"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080050fc": {
            "entrypoint": "0x080050fc",
            "current_name": "process_data_080050fc",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08005294) */\n\nint processData_080050fc(undefined4 *ptrResult,int *ptrBuffer,byte *byteArray,int *ptrSize)\n\n{\n  int tempVar1;\n  int tempVar2;\n  int *ptrVar3;\n  bool isNumber;\n  byte *ptrByte1;\n  byte *ptrByte2;\n  int tempVar3;\n  int *ptrLocal;\n  uint bitFlags;\n  int intValue;\n  undefined4 tempVar4;\n  int tempVar5;\n  int totalSize;\n  byte currentByte;\n  undefined constant1;\n  undefined constant2;\n  undefined constant3;\n  undefined4 constant4;\n  \n  ptrLocal = ptrSize;\n  if (((int)((uint)*(ushort *)(ptrBuffer + 3) << 0x18) < 0) && (ptrBuffer[4] == 0)) {\n    tempVar1 = FUN_08005714(ptrResult,0x40);\n    *ptrBuffer = tempVar1;\n    ptrBuffer[4] = tempVar1;\n    if (tempVar1 == 0) {\n      *ptrResult = 0xc;\n      return -1;\n    }\n    ptrBuffer[5] = 0x40;\n  }\n  totalSize = 0;\n  constant1 = 0x20;\n  constant2 = 0x30;\n  ptrByte1 = byteArray;\nLAB_08005146:\n  ptrByte2 = ptrByte1;\n  if (*ptrByte2 != 0) goto LAB_080051ca;\n  goto LAB_08005150;\nLAB_080051ca:\n  ptrByte1 = ptrByte2 + 1;\n  if (*ptrByte2 != 0x25) goto LAB_08005146;\nLAB_08005150:\n  tempVar1 = (int)ptrByte2 - (int)byteArray;\n  if (tempVar1 != 0) {\n    tempVar2 = FUN_08005044(ptrResult,ptrBuffer,byteArray,tempVar1);\n    if (tempVar2 == -1) {\nLAB_080052ac:\n      if ((int)((uint)*(ushort *)(ptrBuffer + 3) << 0x19) < 0) {\n        return -1;\n      }\n      return totalSize;\n    }\n    totalSize = totalSize + tempVar1;\n  }\n  if (*ptrByte2 == 0) goto LAB_080052ac;\n  bitFlags = 0;\n  tempVar5 = 0;\n  intValue = -1;\n  tempVar4 = 0;\n  constant3 = 0;\n  constant4 = 0;\n  ptrByte1 = ptrByte2 + 1;\n  while( true ) {\n    tempVar1 = FUN_08005614(&DAT_08007379,*ptrByte1);\n    byteArray = ptrByte1 + 1;\n    if (tempVar1 == 0) break;\n    bitFlags = 1 << (tempVar1 + 0xf7ff8c87U & 0xff) | bitFlags;\n    ptrByte1 = byteArray;\n  }\n  if ((int)(bitFlags << 0x1b) < 0) {\n    constant3 = 0x20;\n  }\n  if ((int)(bitFlags << 0x1c) < 0) {\n    constant3 = 0x2b;\n  }\n  if (*ptrByte1 == 0x2a) {\n    ptrVar3 = ptrLocal + 1;\n    tempVar1 = *ptrLocal;\n    ptrLocal = ptrVar3;\n    if (tempVar1 < 0) {\n      tempVar5 = -tempVar1;\n      bitFlags = bitFlags | 2;\n      goto LAB_080051fc;\n    }\n  }\n  else {\n    isNumber = false;\n    tempVar1 = tempVar5;\n    byteArray = ptrByte1;\n    while( true ) {\n      if (9 < *byteArray - 0x30) break;\n      tempVar1 = tempVar1 * 10 + (*byteArray - 0x30);\n      isNumber = true;\n      byteArray = byteArray + 1;\n    }\n    if (!isNumber) goto LAB_080051fc;\n  }\n  tempVar5 = tempVar1;\nLAB_080051fc:\n  if (*byteArray == 0x2e) {\n    if (byteArray[1] == 0x2a) {\n      byteArray = byteArray + 2;\n      ptrVar3 = ptrLocal + 1;\n      intValue = *ptrLocal;\n      ptrLocal = ptrVar3;\n      if (intValue < 0) {\n        intValue = -1;\n      }\n    }\n    else {\n      isNumber = false;\n      tempVar1 = 0;\n      intValue = 0;\n      while( true ) {\n        byteArray = byteArray + 1;\n        if (9 < *byteArray - 0x30) break;\n        tempVar1 = tempVar1 * 10 + (*byteArray - 0x30);\n        isNumber = true;\n      }\n      if (isNumber) {\n        intValue = tempVar1;\n      }\n    }\n  }\n  tempVar1 = FUN_08005614(&DAT_0800737f,*byteArray,3);\n  if (tempVar1 != 0) {\n    byteArray = byteArray + 1;\n    bitFlags = bitFlags | 0x40 << (tempVar1 + 0xf7ff8c81U & 0xff);\n  }\n  currentByte = *byteArray;\n  byteArray = byteArray + 1;\n  tempVar1 = FUN_08005614(\"efgEFG\",currentByte,6);\n  if (tempVar1 == 0) {\n    tempVar3 = FUN_080053d4(ptrResult,&bitFlags,ptrBuffer,0x8005045,&ptrLocal);\n    if (tempVar3 == -1) goto LAB_080052ac;\n  }\n  else {\n    ptrLocal = (int *)(((int)ptrLocal + 7U & 0xfffffff8) + 8);\n  }\n  totalSize = totalSize + tempVar3;\n  ptrByte1 = byteArray;\n  goto LAB_08005146;\n}\n\n",
            "renaming": {
                "FUN_080050fc": "process_data_080050fc",
                "param_1": "ptrResult",
                "param_2": "ptrBuffer",
                "param_3": "byteArray",
                "param_4": "ptrSize",
                "iVar1": "tempVar1",
                "iVar2": "tempVar2",
                "piVar3": "ptrVar3",
                "bVar4": "isNumber",
                "pbVar5": "ptrByte1",
                "pbVar6": "ptrByte2",
                "unaff_r9": "tempVar3",
                "local_8c": "ptrLocal",
                "local_88": "bitFlags",
                "local_84": "intValue",
                "local_80": "tempVar4",
                "local_7c": "tempVar5",
                "local_74": "totalSize",
                "local_70": "currentByte",
                "local_6f": "constant1",
                "local_6e": "constant2",
                "local_45": "constant3",
                "local_30": "constant4"
            },
            "calling": [
                "FUN_08004ffc"
            ],
            "called": [
                "FUN_08005044",
                "FUN_080053d4",
                "FUN_08005714",
                "FUN_08005614"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080052e4": {
            "entrypoint": "0x080052e4",
            "current_name": "process_data_080052e4",
            "code": "\nundefined4\nprocess_data_080052e4(undefined4 input_param,uint *data,uint *result,undefined4 param,code *callback_func)\n\n{\n  int index;\n  int callback_result;\n  uint max_value;\n  uint counter;\n  bool is_true;\n  \n  max_value = data[4];\n  if ((int)data[4] < (int)data[2]) {\n    max_value = data[2];\n  }\n  *result = max_value;\n  if (*(char *)((int)data + 0x43) != '\\0') {\n    *result = max_value + 1;\n  }\n  if ((int)(*data << 0x1a) < 0) {\n    *result = *result + 2;\n  }\n  if ((*data & 6) == 0) {\n    for (index = 0; index < (int)(data[3] - *result); index = index + 1) {\n      callback_result = (*callback_func)(input_param,param,(int)data + 0x19,1);\n      if (callback_result == -1) {\n        return 0xffffffff;\n      }\n    }\n  }\n  max_value = (uint)*(byte *)((int)data + 0x43);\n  if (max_value != 0) {\n    max_value = 1;\n  }\n  counter = max_value;\n  if ((int)(*data << 0x1a) < 0) {\n    *(undefined *)((int)data + max_value + 0x43) = 0x30;\n    counter = max_value + 2;\n    *(undefined *)((int)data + max_value + 0x44) = *(undefined *)((int)data + 0x45);\n  }\n  index = (*callback_func)(input_param,param,(int)data + 0x43,counter);\n  if (index != -1) {\n    max_value = data[3];\n    is_true = (*data & 6) != 4;\n    if (is_true) {\n      max_value = 0;\n    }\n    counter = 0;\n    if (!is_true) {\n      max_value = max_value - *result;\n    }\n    if (!is_true) {\n      max_value = max_value & ~((int)max_value >> 0x1f);\n    }\n    if ((int)data[4] < (int)data[2]) {\n      max_value = max_value + (data[2] - data[4]);\n    }\n    while( true ) {\n      if (max_value == counter) {\n        return 0;\n      }\n      index = (*callback_func)(input_param,param,(int)data + 0x1a,1);\n      if (index == -1) break;\n      counter = counter + 1;\n    }\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_080052e4": "process_data_080052e4",
                "param_1": "input_param",
                "param_2": "data",
                "param_3": "result",
                "param_4": "param",
                "param_5": "callback_func",
                "iVar1": "index",
                "iVar2": "callback_result",
                "uVar3": "max_value",
                "uVar4": "counter",
                "bVar5": "is_true"
            },
            "calling": [
                "FUN_080053d4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080053d4": {
            "entrypoint": "0x080053d4",
            "current_name": "parse_input_080053d4",
            "code": "\nuint parseInput_080053d4(undefined4 param1,uint *inputArr,undefined4 param3,code *callback,uint **outputArrPtr)\n\n{\n  byte firstByte;\n  int returnValue;\n  uint *ptr1;\n  int tempVar1;\n  char *hexDigits;\n  uint tempVar2;\n  uint **ppuVar7;\n  char **ppcVar8;\n  uint tempVar3;\n  uint tempVar4;\n  char *tempPtr;\n  char *currentPtr;\n  uint localVars [2];\n  \n  firstByte = *(byte *)(inputArr + 6);\n  currentPtr = (char *)((int)inputArr + 0x43);\n  if (firstByte != 0x6e) {\n    if (firstByte < 0x6f) {\n      if (firstByte != 99) {\n        if (firstByte < 100) {\n          if (firstByte == 0) goto LAB_0800558e;\n          if (firstByte != 0x58) goto LAB_08005404;\n          *(undefined *)((int)inputArr + 0x45) = 0x58;\n          hexDigits = \"0123456789ABCDEF\";\nLAB_0800551e:\n          tempVar2 = *inputArr;\n          ptr1 = *outputArrPtr;\n          *outputArrPtr = ptr1 + 1;\n          if (((tempVar2 & 0x80) == 0) && ((int)(tempVar2 << 0x19) < 0)) {\n            tempVar3 = (uint)*(ushort *)ptr1;\n          }\n          else {\n            tempVar3 = *ptr1;\n          }\n          if ((int)(tempVar2 << 0x1f) < 0) {\n            *inputArr = tempVar2 | 0x20;\n          }\n          if (tempVar3 == 0) {\n            *inputArr = *inputArr & 0xffffffdf;\n          }\n          tempVar2 = 0x10;\nLAB_080054b4:\n          *(undefined *)((int)inputArr + 0x43) = 0;\n        }\n        else {\n          if ((firstByte != 100) && (firstByte != 0x69)) goto LAB_08005404;\n          tempVar3 = *inputArr;\n          ptr1 = *outputArrPtr;\n          if ((tempVar3 & 0x80) == 0) {\n            *outputArrPtr = ptr1 + 1;\n            if ((tempVar3 & 0x40) == 0) goto LAB_08005424;\n            tempVar3 = (uint)(short)*(ushort *)ptr1;\n          }\n          else {\n            *outputArrPtr = ptr1 + 1;\nLAB_08005424:\n            tempVar3 = *ptr1;\n          }\n          if ((int)tempVar3 < 0) {\n            tempVar3 = -tempVar3;\n            *(undefined *)((int)inputArr + 0x43) = 0x2d;\n          }\n          hexDigits = \"0123456789ABCDEF\";\n          tempVar2 = 10;\n        }\n        tempVar4 = inputArr[1];\n        inputArr[2] = tempVar4;\n        tempPtr = currentPtr;\n        if ((int)tempVar4 < 0) {\n          if (tempVar3 != 0) goto LAB_08005552;\nLAB_08005600:\n          *(char *)((int)inputArr + 0x42) = *hexDigits;\n          tempPtr = (char *)((int)inputArr + 0x42);\n        }\n        else {\n          *inputArr = *inputArr & 0xfffffffb;\n          if (tempVar3 == 0) {\n            if (tempVar4 != 0) goto LAB_08005600;\n          }\n          else {\nLAB_08005552:\n            do {\n              tempVar4 = tempVar3 / tempVar2;\n              tempPtr = tempPtr + -1;\n              *tempPtr = hexDigits[tempVar3 - tempVar2 * tempVar4];\n              tempVar3 = tempVar4;\n            } while (tempVar4 != 0);\n          }\n        }\n        if (((tempVar2 == 8) && ((int)(*inputArr << 0x1f) < 0)) && ((int)inputArr[1] <= (int)inputArr[4]))\n        {\n          tempPtr[-1] = '0';\n          tempPtr = tempPtr + -1;\n        }\n        inputArr[4] = (int)currentPtr - (int)tempPtr;\n        currentPtr = tempPtr;\n        goto LAB_080054fa;\n      }\n      ptr1 = *outputArrPtr;\n      *outputArrPtr = ptr1 + 1;\n      *(char *)((int)inputArr + 0x42) = (char)*ptr1;\nLAB_08005464:\n      currentPtr = (char *)((int)inputArr + 0x42);\n      tempVar3 = 1;\n    }\n    else {\n      if (firstByte != 0x73) {\n        if (firstByte < 0x74) {\n          if (firstByte == 0x6f) {\nLAB_0800548a:\n            tempVar3 = *inputArr;\n            ptr1 = *outputArrPtr;\n            if ((tempVar3 & 0x80) == 0) {\n              *outputArrPtr = ptr1 + 1;\n              if ((tempVar3 & 0x40) == 0) goto LAB_08005498;\n              tempVar3 = (uint)*(ushort *)ptr1;\n            }\n            else {\n              *outputArrPtr = ptr1 + 1;\nLAB_08005498:\n              tempVar3 = *ptr1;\n            }\n            if (firstByte == 0x6f) {\n              tempVar2 = 8;\n            }\n            else {\n              tempVar2 = 10;\n            }\n            hexDigits = \"0123456789ABCDEF\";\n            goto LAB_080054b4;\n          }\n          if (firstByte == 0x70) {\n            *inputArr = *inputArr | 0x20;\nLAB_0800544a:\n            hexDigits = \"0123456789abcdef\";\n            *(undefined *)((int)inputArr + 0x45) = 0x78;\n            goto LAB_0800551e;\n          }\n        }\n        else {\n          if (firstByte == 0x75) goto LAB_0800548a;\n          if (firstByte == 0x78) goto LAB_0800544a;\n        }\nLAB_08005404:\n        *(byte *)((int)inputArr + 0x42) = firstByte;\n        goto LAB_08005464;\n      }\n      ppcVar8 = (char **)*outputArrPtr;\n      *outputArrPtr = (uint *)(ppcVar8 + 1);\n      currentPtr = *ppcVar8;\n      returnValue = FUN_08005614(currentPtr,0,inputArr[1]);\n      if (returnValue != 0) {\n        inputArr[1] = returnValue - (int)currentPtr;\n      }\n      tempVar3 = inputArr[1];\n    }\n    inputArr[4] = tempVar3;\n    *(undefined *)((int)inputArr + 0x43) = 0;\n    goto LAB_080054fa;\n  }\n  tempVar3 = *inputArr;\n  ppuVar7 = (uint **)*outputArrPtr;\n  tempVar2 = inputArr[5];\n  if ((tempVar3 & 0x80) == 0) {\n    *outputArrPtr = (uint *)(ppuVar7 + 1);\n    ptr1 = *ppuVar7;\n    if ((tempVar3 & 0x40) == 0) goto LAB_0800557a;\n    *(short *)ptr1 = (short)tempVar2;\n  }\n  else {\n    *outputArrPtr = (uint *)(ppuVar7 + 1);\n    ptr1 = *ppuVar7;\nLAB_0800557a:\n    *ptr1 = tempVar2;\n  }\nLAB_0800558e:\n  inputArr[4] = 0;\nLAB_080054fa:\n  returnValue = FUN_080052e4(param1,inputArr,localVars,param3,callback);\n  if ((returnValue == -1) || (returnValue = (*callback)(param1,param3,currentPtr,inputArr[4]), returnValue == -1)) {\nLAB_0800550e:\n    tempVar3 = 0xffffffff;\n  }\n  else {\n    if ((int)(*inputArr << 0x1e) < 0) {\n      for (returnValue = 0; returnValue < (int)(inputArr[3] - localVars[0]); returnValue = returnValue + 1) {\n        tempVar1 = (*callback)(param1,param3,(int)inputArr + 0x19,1);\n        if (tempVar1 == -1) goto LAB_0800550e;\n      }\n    }\n    tempVar3 = inputArr[3];\n    if ((int)inputArr[3] < (int)localVars[0]) {\n      tempVar3 = localVars[0];\n    }\n  }\n  return tempVar3;\n}\n\n",
            "renaming": {
                "FUN_080053d4": "parse_input_080053d4",
                "param_1": "param1",
                "param_2": "inputArr",
                "param_3": "param3",
                "param_4": "callback",
                "param_5": "outputArrPtr",
                "bVar1": "firstByte",
                "iVar2": "returnValue",
                "puVar3": "ptr1",
                "iVar4": "tempVar1",
                "pcVar5": "hexDigits",
                "uVar6": "tempVar2",
                "uVar9": "tempVar3",
                "uVar10": "tempVar4",
                "pcVar11": "tempPtr",
                "pcVar12": "currentPtr",
                "local_24": "localVars"
            },
            "calling": [
                "FUN_080050fc"
            ],
            "called": [
                "FUN_080052e4",
                "FUN_08005614"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005614": {
            "entrypoint": "0x08005614",
            "current_name": "find_character_index_08005614",
            "code": "\nchar * find_character_index_08005614(char *string,char character,int length)\n\n{\n  char *current_char;\n  char *next_char;\n  \n  current_char = string;\n  do {\n    next_char = current_char;\n    if (next_char == string + length) {\n      return (char *)0x0;\n    }\n    current_char = next_char + 1;\n  } while (*next_char != character);\n  return next_char;\n}\n\n",
            "renaming": {
                "FUN_08005614": "find_character_index_08005614",
                "param_1": "string",
                "param_2": "character",
                "param_3": "length",
                "pcVar1": "current_char",
                "pcVar2": "next_char"
            },
            "calling": [
                "FUN_080053d4",
                "FUN_080050fc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005630": {
            "entrypoint": "0x08005630",
            "current_name": "copy_data_08005630",
            "code": "\nvoid copyData_08005630(int srcStart,undefined *src,int size)\n\n{\n  undefined *destEnd;\n  undefined *dest;\n  \n  dest = (undefined *)(srcStart + -1);\n  destEnd = src + size;\n  for (; src != destEnd; src = src + 1) {\n    dest = dest + 1;\n    *dest = *src;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005630": "copy_data_08005630",
                "param_1": "srcStart",
                "param_2": "src",
                "param_3": "size",
                "puVar1": "destEnd",
                "puVar2": "dest"
            },
            "calling": [
                "FUN_08005044",
                "FUN_080057d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005646": {
            "entrypoint": "0x08005646",
            "current_name": "copy_and_shift_08005646",
            "code": "\nvoid copyAndShift_08005646(undefined *inputBuffer,undefined *outputBuffer,int length)\n\n{\n  undefined *puVar1;\n  \n  puVar1 = outputBuffer + length;\n  if ((outputBuffer < inputBuffer) && (inputBuffer < puVar1)) {\n    inputBuffer = inputBuffer + length;\n    length = length - (int)puVar1;\n    while (puVar1 + length != (undefined *)0x0) {\n      puVar1 = puVar1 + -1;\n      inputBuffer = inputBuffer + -1;\n      *inputBuffer = *puVar1;\n    }\n    return;\n  }\n  inputBuffer = inputBuffer + -1;\n  for (; outputBuffer != puVar1; outputBuffer = outputBuffer + 1) {\n    inputBuffer = inputBuffer + 1;\n    *inputBuffer = *outputBuffer;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005646": "copy_and_shift_08005646",
                "param_1": "inputBuffer",
                "param_2": "outputBuffer",
                "param_3": "length"
            },
            "calling": [
                "FUN_08005044"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800567c": {
            "entrypoint": "0x0800567c",
            "current_name": "update_data_structure_0800567c",
            "code": "\nvoid updateDataStructure_0800567c(undefined4 *resultPtr,int size,undefined4 param1,undefined4 param2)\n\n{\n  int **extraPtr;\n  int **tempPtr1;\n  int **tempPtr2;\n  int *tempVar;\n  int **tempPtr3;\n  int **tempPtr4;\n  \n  if (size == 0) {\n    return;\n  }\n  tempPtr4 = (int **)(size + -4);\n  if (*(int *)(size + -4) < 0) {\n    tempPtr4 = (int **)((int)tempPtr4 + *(int *)(size + -4));\n  }\n  FUNC_0800583c();\n  tempPtr2 = (int **)&DAT_200002ac;\n  if (DAT_200002ac == (int **)0x0) {\n    tempPtr4[1] = (int *)0x0;\n    tempPtr1 = extraPtr;\n    DAT_200002ac = tempPtr4;\n  }\n  else {\n    tempPtr2 = DAT_200002ac;\n    if (tempPtr4 < DAT_200002ac) {\n      tempPtr1 = (int **)*tempPtr4;\n      tempPtr2 = (int **)((int)tempPtr4 + (int)tempPtr1);\n      if (DAT_200002ac == tempPtr2) {\n        tempVar = *DAT_200002ac;\n        DAT_200002ac = (int **)DAT_200002ac[1];\n        tempPtr2 = (int **)((int)tempVar + (int)tempPtr1);\n        *tempPtr4 = (int *)tempPtr2;\n      }\n      tempPtr4[1] = (int *)DAT_200002ac;\n      DAT_200002ac = tempPtr4;\n    }\n    else {\n      do {\n        tempPtr3 = tempPtr2;\n        tempPtr2 = (int **)tempPtr3[1];\n        if (tempPtr2 == (int **)0x0) break;\n      } while (tempPtr2 <= tempPtr4);\n      tempPtr1 = (int **)*tempPtr3;\n      if ((int **)((int)tempPtr3 + (int)tempPtr1) == tempPtr4) {\n        tempPtr1 = (int **)((int)tempPtr1 + (int)*tempPtr4);\n        *tempPtr3 = (int *)tempPtr1;\n        if (tempPtr2 == (int **)((int)tempPtr3 + (int)tempPtr1)) {\n          tempVar = *tempPtr2;\n          tempPtr2 = (int **)tempPtr2[1];\n          tempPtr1 = (int **)((int)tempPtr1 + (int)tempVar);\n          *tempPtr3 = (int *)tempPtr1;\n          tempPtr3[1] = (int *)tempPtr2;\n        }\n      }\n      else if (tempPtr4 < (int **)((int)tempPtr3 + (int)tempPtr1)) {\n        *resultPtr = 0xc;\n      }\n      else {\n        tempPtr1 = (int **)((int)tempPtr4 + (int)*tempPtr4);\n        if (tempPtr2 == tempPtr1) {\n          tempVar = *tempPtr2;\n          tempPtr2 = (int **)tempPtr2[1];\n          tempPtr1 = (int **)((int)tempVar + (int)*tempPtr4);\n          *tempPtr4 = (int *)tempPtr1;\n        }\n        tempPtr4[1] = (int *)tempPtr2;\n        tempPtr3[1] = (int *)tempPtr4;\n      }\n    }\n  }\n  FUNC_0800583e(resultPtr,tempPtr1,tempPtr2,param2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800567c": "update_data_structure_0800567c",
                "param_1": "resultPtr",
                "param_2": "size",
                "param_3": "param1",
                "param_4": "param2",
                "extraout_r1": "extraPtr",
                "ppiVar1": "tempPtr1",
                "ppiVar2": "tempPtr2",
                "piVar3": "tempVar",
                "ppiVar4": "tempPtr3",
                "ppiVar5": "tempPtr4"
            },
            "calling": [
                "FUN_08005044",
                "FUN_080057d0"
            ],
            "called": [
                "FUN_0800583c",
                "FUN_0800583e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005714": {
            "entrypoint": "0x08005714",
            "current_name": "allocate_memory_08005714",
            "code": "\nuint allocate_memory_08005714(undefined4 *memory,uint size)\n\n{\n  uint *current_block;\n  int block_size;\n  uint *previous_block;\n  uint remaining_size;\n  uint *new_block;\n  uint alloc_size;\n  \n  alloc_size = (size + 3 & 0xfffffffc) + 8;\n  if (alloc_size < 0xc) {\n    alloc_size = 0xc;\n  }\n  if (((int)alloc_size < 0) || (alloc_size < size)) {\n    *memory = 0xc;\n  }\n  else {\n    FUNC_0800583c();\n    current_block = DAT_200002ac;\n    new_block = DAT_200002ac;\n    while (previous_block = current_block, previous_block != (uint *)0x0) {\n      remaining_size = *previous_block - alloc_size;\n      if (-1 < (int)remaining_size) {\n        if (remaining_size < 0xc) {\n          if (new_block == previous_block) {\n            current_block = (uint *)new_block[1];\n            DAT_200002ac = current_block;\n          }\n          else {\n            current_block = (uint *)previous_block[1];\n          }\n          if (new_block != previous_block) {\n            new_block[1] = (uint)current_block;\n            new_block = previous_block;\n          }\n        }\n        else {\n          *previous_block = remaining_size;\n          *(uint *)((int)previous_block + remaining_size) = alloc_size;\n          new_block = (uint *)((int)previous_block + remaining_size);\n        }\n        goto LAB_08005778;\n      }\n      new_block = previous_block;\n      current_block = (uint *)previous_block[1];\n    }\n    if (DAT_200002b0 == 0) {\n      DAT_200002b0 = FUN_0800581c(memory);\n    }\n    current_block = (uint *)FUN_0800581c(memory,alloc_size);\n    if ((current_block != (uint *)0xffffffff) &&\n       ((new_block = (uint *)((int)current_block + 3U & 0xfffffffc), current_block == new_block ||\n        (block_size = FUN_0800581c(memory,(int)new_block - (int)current_block), block_size != -1)))) {\n      *new_block = alloc_size;\nLAB_08005778:\n      FUNC_0800583e(memory);\n      alloc_size = (int)new_block + 0xbU & 0xfffffff8;\n      block_size = alloc_size - (int)(new_block + 1);\n      if (block_size != 0) {\n        *(int *)((int)new_block + block_size) = -block_size;\n        return alloc_size;\n      }\n      return alloc_size;\n    }\n    *memory = 0xc;\n    FUNC_0800583e(memory);\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08005714": "allocate_memory_08005714",
                "param_1": "memory",
                "param_2": "size",
                "puVar1": "current_block",
                "iVar2": "block_size",
                "puVar3": "previous_block",
                "uVar4": "remaining_size",
                "puVar5": "new_block",
                "uVar6": "alloc_size"
            },
            "calling": [
                "FUN_08005044",
                "FUN_080050fc",
                "FUN_080057d0"
            ],
            "called": [
                "FUN_0800583c",
                "FUN_0800581c",
                "FUN_0800583e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080057d0": {
            "entrypoint": "0x080057d0",
            "current_name": "perform_operation_080057d0",
            "code": "\nint performOperation_080057d0(undefined4 input1,int input2,uint size,undefined4 input4)\n\n{\n  int result;\n  uint randomValue;\n  \n  if (input2 != 0) {\n    if (size == 0) {\n      FUN_0800567c();\n      result = 0;\n    }\n    else {\n      randomValue = FUN_08005840();\n      result = input2;\n      if ((randomValue < size) && (result = FUN_08005714(input1,size), result != 0)) {\n        FUN_08005630(result,input2,size);\n        FUN_0800567c(input1,input2);\n      }\n    }\n    return result;\n  }\n  result = FUN_08005714(input1,size,size,input4);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080057d0": "perform_operation_080057d0",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "size",
                "param_4": "input4",
                "iVar1": "result",
                "uVar2": "randomValue"
            },
            "calling": [
                "FUN_08005044"
            ],
            "called": [
                "FUN_0800567c",
                "FUN_08005714",
                "FUN_08005840",
                "FUN_08005630"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800581c": {
            "entrypoint": "0x0800581c",
            "current_name": "check_and_update_value_0800581c",
            "code": "\nvoid checkAndUpdateValue_0800581c(int *result,undefined4 inputValue)\n\n{\n  int returnValue;\n  \n  DAT_2000169c = 0;\n  returnValue = FUN_080072b8(inputValue);\n  if ((returnValue == -1) && (DAT_2000169c != 0)) {\n    *result = DAT_2000169c;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800581c": "check_and_update_value_0800581c",
                "param_1": "result",
                "param_2": "inputValue",
                "iVar1": "returnValue"
            },
            "calling": [
                "FUN_08005714"
            ],
            "called": [
                "FUN_080072b8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800583c": {
            "entrypoint": "0x0800583c",
            "current_name": "FUNC_0800583c",
            "code": "\nvoid FUNC_0800583c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800583c": "FUNC_0800583c"
            },
            "calling": [
                "FUN_0800567c",
                "FUN_08005714"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800583e": {
            "entrypoint": "0x0800583e",
            "current_name": "FUNC_0800583e",
            "code": "\nvoid FUNC_0800583e(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800583e": "FUNC_0800583e"
            },
            "calling": [
                "FUN_0800567c",
                "FUN_08005714"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005840": {
            "entrypoint": "0x08005840",
            "current_name": "calculate_sum_08005840",
            "code": "\nint calculateSum_08005840(undefined4 input1,int input2)\n\n{\n  int sum;\n  \n  sum = *(int *)(input2 + -4) + -4;\n  if (*(int *)(input2 + -4) < 0) {\n    sum = sum + *(int *)(input2 + sum);\n  }\n  return sum;\n}\n\n",
            "renaming": {
                "FUN_08005840": "calculate_sum_08005840",
                "param_1": "input1",
                "param_2": "input2",
                "iVar1": "sum"
            },
            "calling": [
                "FUN_080057d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005854": {
            "entrypoint": "0x08005854",
            "current_name": "process_data_08005854",
            "code": "\nundefined8 processData_08005854(undefined4 inputParam1,undefined4 inputParam2)\n\n{\n  int result;\n  undefined4 *ptrVar;\n  int *intPtr;\n  undefined8 returnValue;\n  undefined8 funcReturnValue;\n  undefined4 flag;\n  undefined *dataPtr;\n  undefined4 tempVar1;\n  undefined4 tempVar2;\n  undefined4 tempVar3;\n  undefined4 tempVar4;\n  undefined8 outputResult;\n  int errorFlag;\n  \n  returnValue = FUN_08005c70();\n  if (DAT_20000224 == -1) {\n    return returnValue;\n  }\n  errorFlag = FUN_08000a04(inputParam1,inputParam2,inputParam1,inputParam2);\n  if (errorFlag != 0) {\n    return returnValue;\n  }\n  funcReturnValue = FUNC_0800708c(inputParam1,inputParam2);\n  result = FUN_080009f0((int)funcReturnValue,(int)((ulonglong)funcReturnValue >> 0x20),0,0x3ff00000);\n  if (result == 0) {\n    return returnValue;\n  }\n  flag = 1;\n  dataPtr = &DAT_080073ac;\n  tempVar1 = inputParam1;\n  tempVar2 = inputParam2;\n  tempVar3 = inputParam1;\n  tempVar4 = inputParam2;\n  outputResult = FUN_080070a4(&DAT_0800737e);\n  if (DAT_20000224 != '\\x02') {\n    result = FUN_0800709e(&flag);\n    if (result != 0) goto LAB_080058d0;\n  }\n  ptrVar = (undefined4 *)FUN_080072ac();\n  *ptrVar = 0x21;\nLAB_080058d0:\n  if (errorFlag != 0) {\n    intPtr = (int *)FUN_080072ac();\n    *intPtr = errorFlag;\n  }\n  return outputResult;\n}\n\n",
            "renaming": {
                "FUN_08005854": "process_data_08005854",
                "param_1": "inputParam1",
                "param_2": "inputParam2",
                "iVar1": "result",
                "puVar2": "ptrVar",
                "piVar3": "intPtr",
                "uVar4": "returnValue",
                "uVar5": "funcReturnValue",
                "local_48": "flag",
                "local_44": "dataPtr",
                "local_40": "tempVar1",
                "uStack_3c": "tempVar2",
                "local_38": "tempVar3",
                "uStack_34": "tempVar4",
                "local_30": "outputResult",
                "local_28": "errorFlag"
            },
            "calling": [
                "FUN_08003330"
            ],
            "called": [
                "FUN_0800708c",
                "FUN_080072ac",
                "FUN_080070a4",
                "FUN_08005c70",
                "FUN_080009f0",
                "FUN_0800709e",
                "FUN_08000a04"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "thunk_FUN_08006070": {
            "entrypoint": "0x080058fc",
            "current_name": "calculate_result_thunk_08006070",
            "code": "\nundefined8 calculateResult_thunk_08006070(uint inputA,uint inputB,uint inputC,uint inputD)\n\n{\n  undefined4 result1;\n  uint result2;\n  uint result3;\n  int result4;\n  uint positiveInputD;\n  undefined8 finalResult;\n  undefined8 intermediateResult;\n  \n  positiveInputD = inputD & 0x7fffffff;\n  if ((0x7ff00000 < (positiveInputD | (-inputC | inputC) >> 0x1f)) ||\n     (result3 = inputB & 0x7fffffff, 0x7ff00000 < (result3 | (-inputA | inputA) >> 0x1f))) {\n    finalResult = FUN_0800016c(inputA,inputB,inputC,inputD,inputD);\n    return finalResult;\n  }\n  if ((inputD + 0xc0100000 | inputC) == 0) {\n    finalResult = FUN_08006d68();\n    return finalResult;\n  }\n  result2 = (int)inputD >> 0x1e & 2U | inputB >> 0x1f;\n  if ((inputA | result3) == 0) {\n    if (result2 == 2) {\n      return 0x400921fb54442d18;\n    }\n    if (result2 != 3) {\n      return CONCAT44(inputB,inputA);\n    }\nLAB_0800613e:\n    finalResult = 0xc00921fb54442d18;\n  }\n  else {\n    if ((inputC | positiveInputD) != 0) {\n      if (positiveInputD == 0x7ff00000) {\n        if (result3 == 0x7ff00000) {\n          if (result2 == 2) {\n            return 0x4002d97c7f3321d2;\n          }\n          if (result2 == 3) {\n            return 0xc002d97c7f3321d2;\n          }\n          if (result2 != 1) {\n            return 0x3fe921fb54442d18;\n          }\n          return 0xbfe921fb54442d18;\n        }\n        if (result2 == 2) {\n          return 0x400921fb54442d18;\n        }\n        if (result2 != 3) {\n          if (result2 != 1) {\n            return 0;\n          }\n          return 0x8000000000000000;\n        }\n        goto LAB_0800613e;\n      }\n      if (result3 != 0x7ff00000) {\n        result4 = (int)(result3 - positiveInputD) >> 0x14;\n        if (result4 < 0x3d) {\n          if (((int)inputD < 0) && (result4 + 0x3c < 0 != SCARRY4(result4,0x3c))) {\n            finalResult = 0;\n          }\n          else {\n            FUN_08000724(inputA,inputB);\n            FUNC_0800708c();\n            finalResult = FUN_08006d68();\n          }\n        }\n        else {\n          finalResult = 0x3ff921fb54442d18;\n        }\n        result4 = (int)((ulonglong)finalResult >> 0x20);\n        result1 = (undefined4)finalResult;\n        if (result2 == 1) {\n          return CONCAT44(result4 + -0x80000000,result1);\n        }\n        if (result2 == 2) {\n          intermediateResult = FUN_08000168(result1,result4,0x33145c07,0x3ca1a626);\n          finalResult = 0x400921fb54442d18;\n        }\n        else {\n          if (result2 == 0) {\n            return finalResult;\n          }\n          finalResult = FUN_08000168(result1,result4,0x33145c07,0x3ca1a626);\n          intermediateResult = 0x400921fb54442d18;\n        }\n        finalResult = FUN_08000168((int)finalResult,(int)((ulonglong)finalResult >> 0x20),(int)intermediateResult,\n                             (int)((ulonglong)intermediateResult >> 0x20));\n        return finalResult;\n      }\n    }\n    if ((int)inputB < 0) {\n      finalResult = 0xbff921fb54442d18;\n    }\n    else {\n      finalResult = 0x3ff921fb54442d18;\n    }\n  }\n  return finalResult;\n}\n\n",
            "renaming": {
                "thunk_FUN_08006070": "calculate_result_thunk_08006070",
                "param_1": "inputA",
                "param_2": "inputB",
                "param_3": "inputC",
                "param_4": "inputD",
                "uVar1": "result1",
                "uVar2": "result2",
                "uVar3": "result3",
                "iVar4": "result4",
                "uVar5": "positiveInputD",
                "uVar6": "finalResult",
                "uVar7": "intermediateResult"
            },
            "calling": [
                "FUN_08003330"
            ],
            "called": [
                "FUN_08006070"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005900": {
            "entrypoint": "0x08005900",
            "current_name": "analyze_data_08005900",
            "code": "\nundefined8 analyzeData_08005900(undefined4 input_1,undefined4 input_2,undefined4 param_1,undefined4 param_2)\n\n{\n  char dataFlag;\n  int result;\n  int *ptrResult;\n  undefined4 *ptrData;\n  int tempResult;\n  undefined4 upper32;\n  undefined4 lower32;\n  undefined8 originalResult;\n  undefined8 newResult;\n  undefined4 flag;\n  undefined *dataPointer;\n  undefined4 originalInput_1;\n  undefined4 originalInput_2;\n  undefined4 originalParam_1;\n  undefined4 originalParam_2;\n  undefined8 finalResult;\n  int tempValue;\n  \n  originalResult = FUN_08006228();\n  dataFlag = DAT_20000224;\n  upper32 = (undefined4)((ulonglong)originalResult >> 0x20);\n  lower32 = (undefined4)originalResult;\n  if (DAT_20000224 == -1) {\n    return originalResult;\n  }\n  result = FUN_08000a04(param_1,param_2,param_1,param_2);\n  if (result != 0) {\n    return originalResult;\n  }\n  result = FUN_08000a04(input_1,input_2,input_1,input_2);\n  originalInput_1 = input_1;\n  originalInput_2 = input_2;\n  originalParam_1 = param_1;\n  originalParam_2 = param_2;\n  if (result == 0) {\n    result = FUN_080009a0(input_1,input_2,0,0);\n    if (result != 0) {\n      result = FUN_080009a0(param_1,param_2,0,0);\n      if (result != 0) {\n        flag = 1;\n        dataPointer = &DAT_080073b1;\n        finalResult = 0;\n        tempValue = 0;\n        if (dataFlag != '\\0') {\n          finalResult = 0x3ff0000000000000;\n          goto LAB_080059d0;\n        }\n        goto LAB_08005978;\n      }\n      result = FUN_08007092(param_1,param_2);\n      if (result == 0) {\n        return originalResult;\n      }\n      result = FUN_080009b4(param_1,param_2,0,0);\n      if (result == 0) {\n        return originalResult;\n      }\n      flag = 1;\n      dataPointer = &DAT_080073b1;\n      tempValue = 0;\n      if (DAT_20000224 == '\\0') goto LAB_08005a22;\n      finalResult = 0xfff0000000000000;\n      tempValue = 0;\n      dataFlag = DAT_20000224;\nLAB_08005a32:\n      if (dataFlag != '\\x02') goto LAB_08005978;\n      goto LAB_08005a34;\n    }\n    result = FUN_08007092(lower32,upper32);\n    if (((result != 0) || (tempResult = FUN_08007092(input_1,input_2), tempResult == 0)) ||\n       (tempResult = FUN_08007092(param_1,param_2), tempResult == 0)) {\n      result = FUN_080009a0(lower32,upper32,0,0);\n      if (result == 0) {\n        return originalResult;\n      }\n      result = FUN_08007092(input_1,input_2);\n      if (result == 0) {\n        return originalResult;\n      }\n      result = FUN_08007092(param_1,param_2);\n      if (result == 0) {\n        return originalResult;\n      }\n      flag = 4;\n      dataPointer = &DAT_080073b1;\n      tempValue = 0;\n      finalResult._0_4_ = 0;\n      finalResult._4_4_ = 0;\n      goto LAB_08005afa;\n    }\n    tempValue = FUN_08000a04(lower32,upper32);\n    dataFlag = DAT_20000224;\n    if (tempValue != 0) {\n      dataPointer = &DAT_080073b1;\n      flag = 1;\n      tempValue = result;\n      if (DAT_20000224 != '\\0') {\n        finalResult = FUN_08000724(0,0,0,0);\n        goto LAB_08005a32;\n      }\nLAB_08005a22:\n      dataPointer = &DAT_080073b1;\n      flag = 1;\n      finalResult = 0;\n      goto LAB_08005978;\n    }\n    dataPointer = &DAT_080073b1;\n    flag = 3;\n    if (DAT_20000224 == '\\0') {\n      finalResult._0_4_ = 0xe0000000;\n      finalResult._4_4_ = 0x47efffff;\n      result = FUN_080009b4(input_1,input_2,0,0);\n      if (result != 0) {\n        originalResult = FUN_080004d0(param_1,param_2,0,0x3fe00000);\n        newResult = FUN_080070b0();\n        result = FUN_080009a0((int)originalResult,(int)((ulonglong)originalResult >> 0x20),(int)newResult,\n                             (int)((ulonglong)newResult >> 0x20));\n        if (result == 0) {\n          finalResult._0_4_ = 0xe0000000;\n          finalResult._4_4_ = 0xc7efffff;\n        }\n        goto LAB_08005afa;\n      }\nLAB_08005b98:\n      result = FUN_0800709e(&flag);\n      if (result != 0) goto LAB_080059d0;\n    }\n    else {\n      finalResult._0_4_ = 0;\n      finalResult._4_4_ = 0x7ff00000;\n      result = FUN_080009b4(input_1,input_2,0,0);\n      if (result != 0) {\n        originalResult = FUN_080004d0(param_1,param_2,0,0x3fe00000);\n        newResult = FUN_080070b0();\n        result = FUN_080009a0((int)originalResult,(int)((ulonglong)originalResult >> 0x20),(int)newResult,\n                             (int)((ulonglong)newResult >> 0x20));\n        if (result == 0) {\n          finalResult._0_4_ = 0;\n          finalResult._4_4_ = 0xfff00000;\n        }\n      }\nLAB_08005afa:\n      if (DAT_20000224 != '\\x02') goto LAB_08005b98;\n    }\n    ptrData = (undefined4 *)FUN_080072ac();\n    lower32 = 0x22;\n  }\n  else {\n    result = FUN_080009a0(param_1,param_2,0,0);\n    if (result == 0) {\n      return originalResult;\n    }\n    flag = 1;\n    dataPointer = &DAT_080073b1;\n    finalResult = 0x3ff0000000000000;\n    tempValue = 0;\n    if (dataFlag == '\\x02') {\n      return 0x3ff0000000000000;\n    }\nLAB_08005978:\n    result = FUN_0800709e(&flag);\n    if (result != 0) goto LAB_080059d0;\nLAB_08005a34:\n    ptrData = (undefined4 *)FUN_080072ac();\n    lower32 = 0x21;\n  }\n  *ptrData = lower32;\nLAB_080059d0:\n  if (tempValue != 0) {\n    ptrResult = (int *)FUN_080072ac();\n    *ptrResult = tempValue;\n  }\n  return finalResult;\n}\n\n",
            "renaming": {
                "FUN_08005900": "analyze_data_08005900",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "param_1",
                "param_4": "param_2",
                "cVar1": "dataFlag",
                "iVar2": "result",
                "piVar3": "ptrResult",
                "puVar4": "ptrData",
                "iVar5": "tempResult",
                "uVar6": "upper32",
                "uVar7": "lower32",
                "uVar8": "originalResult",
                "uVar9": "newResult",
                "local_50": "flag",
                "local_4c": "dataPointer",
                "local_48": "originalInput_1",
                "uStack_44": "originalInput_2",
                "local_40": "originalParam_1",
                "uStack_3c": "originalParam_2",
                "local_38": "finalResult",
                "local_30": "tempValue"
            },
            "calling": [
                "FUN_0800411c"
            ],
            "called": [
                "FUN_080004d0",
                "FUN_08007092",
                "FUN_080072ac",
                "FUN_080070b0",
                "FUN_08006228",
                "FUN_080009a0",
                "FUN_08000724",
                "FUN_080009b4",
                "FUN_0800709e",
                "FUN_08000a04"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005bc8": {
            "entrypoint": "0x08005bc8",
            "current_name": "verify_license_08005bc8",
            "code": "\nundefined8 verify_license_08005bc8(undefined4 input1,undefined4 input2)\n\n{\n  char licenseState;\n  int errorCode;\n  int *licenseError;\n  undefined4 *licenseResult;\n  undefined8 uVar5;\n  undefined4 flag;\n  undefined *message;\n  undefined4 input1Copy;\n  undefined4 input2Copy;\n  undefined4 input1Copy2;\n  undefined4 input2Copy2;\n  undefined8 result;\n  int licenseCode;\n  \n  uVar5 = FUN_08006c0c();\n  licenseState = DAT_20000224;\n  if (DAT_20000224 == -1) {\n    return uVar5;\n  }\n  licenseCode = FUN_08000a04(input1,input2,input1,input2);\n  if (licenseCode != 0) {\n    return uVar5;\n  }\n  errorCode = FUN_080009b4(input1,input2,0,0);\n  if (errorCode == 0) {\n    return uVar5;\n  }\n  flag = 1;\n  message = &DAT_080073b5;\n  input1Copy = input1;\n  input2Copy = input2;\n  input1Copy2 = input1;\n  input2Copy2 = input2;\n  if (licenseState == '\\0') {\n    result = 0;\nLAB_08005c26:\n    errorCode = FUN_0800709e(&flag);\n    if (errorCode != 0) goto LAB_08005c2e;\n  }\n  else {\n    result = FUN_08000724(0,0,0,0);\n    if (licenseState != '\\x02') goto LAB_08005c26;\n  }\n  licenseResult = (undefined4 *)FUN_080072ac();\n  *licenseResult = 0x21;\nLAB_08005c2e:\n  if (licenseCode != 0) {\n    licenseError = (int *)FUN_080072ac();\n    *licenseError = licenseCode;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08005bc8": "verify_license_08005bc8",
                "param_1": "input1",
                "param_2": "input2",
                "cVar1": "licenseState",
                "iVar2": "errorCode",
                "piVar3": "licenseError",
                "puVar4": "licenseResult",
                "local_50": "flag",
                "local_4c": "message",
                "local_48": "input1Copy",
                "uStack_44": "input2Copy",
                "local_40": "input1Copy2",
                "uStack_3c": "input2Copy2",
                "local_38": "result",
                "local_30": "licenseCode"
            },
            "calling": [
                "FUN_08003330"
            ],
            "called": [
                "FUN_080072ac",
                "FUN_08006c0c",
                "FUN_08000724",
                "FUN_080009b4",
                "FUN_0800709e",
                "FUN_08000a04"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005c70": {
            "entrypoint": "0x08005c70",
            "current_name": "calculate_sum_08005c70",
            "code": "\nundefined8 calculate_sum_08005c70(uint input_1,uint input_2)\n\n{\n  int result;\n  undefined4 temp_var1;\n  undefined4 temp_var2;\n  undefined4 temp_var3;\n  undefined4 temp_var4;\n  undefined4 temp_var5;\n  undefined4 temp_var6;\n  uint abs_input_2;\n  undefined8 sum;\n  undefined8 temp_sum1;\n  undefined8 temp_sum2;\n  \n  sum = CONCAT44(input_2,input_1);\n  abs_input_2 = input_2 & 0x7fffffff;\n  if (abs_input_2 < 0x3ff00000) {\n    if (abs_input_2 < 0x3fe00000) {\n      if (0x3e3fffff < abs_input_2) {\n        temp_sum1 = FUN_080004d0(input_1,input_2,input_1,input_2);\n        temp_var6 = (undefined4)((ulonglong)temp_sum1 >> 0x20);\n        temp_var5 = (undefined4)temp_sum1;\n        temp_sum1 = FUN_080004d0(temp_var5,temp_var6,0xdfdf709,0x3f023de1);\n        temp_sum1 = FUN_0800016c((int)temp_sum1,(int)((ulonglong)temp_sum1 >> 0x20),0x7501b288,0x3f49efe0);\n        temp_sum1 = FUN_080004d0((int)temp_sum1,(int)((ulonglong)temp_sum1 >> 0x20),temp_var5,temp_var6);\n        temp_sum1 = FUN_08000168((int)temp_sum1,(int)((ulonglong)temp_sum1 >> 0x20),0xb5688f3b,0x3fa48228);\n        temp_sum1 = FUN_080004d0((int)temp_sum1,(int)((ulonglong)temp_sum1 >> 0x20),temp_var5,temp_var6);\n        temp_sum1 = FUN_0800016c((int)temp_sum1,(int)((ulonglong)temp_sum1 >> 0x20),0xe884455,0x3fc9c155);\n        temp_sum1 = FUN_080004d0((int)temp_sum1,(int)((ulonglong)temp_sum1 >> 0x20),temp_var5,temp_var6);\n        temp_sum1 = FUN_08000168((int)temp_sum1,(int)((ulonglong)temp_sum1 >> 0x20),0x3eb6f7d,0x3fd4d612);\n        temp_sum1 = FUN_080004d0((int)temp_sum1,(int)((ulonglong)temp_sum1 >> 0x20),temp_var5,temp_var6);\n        temp_sum1 = FUN_0800016c((int)temp_sum1,(int)((ulonglong)temp_sum1 >> 0x20),0x55555555,0x3fc55555);\n        temp_sum1 = FUN_080004d0((int)temp_sum1,(int)((ulonglong)temp_sum1 >> 0x20),temp_var5,temp_var6);\n        temp_sum2 = FUN_080004d0(temp_var5,temp_var6,0xb12e9282,0x3fb3b8c5);\n        temp_sum2 = FUN_08000168((int)temp_sum2,(int)((ulonglong)temp_sum2 >> 0x20),0x1b8d0159,0x3fe6066c);\n        temp_sum2 = FUN_080004d0((int)temp_sum2,(int)((ulonglong)temp_sum2 >> 0x20),temp_var5,temp_var6);\n        temp_sum2 = FUN_0800016c((int)temp_sum2,(int)((ulonglong)temp_sum2 >> 0x20),0x9c598ac8,0x40002ae5);\n        temp_sum2 = FUN_080004d0((int)temp_sum2,(int)((ulonglong)temp_sum2 >> 0x20),temp_var5,temp_var6);\n        temp_sum2 = FUN_08000168((int)temp_sum2,(int)((ulonglong)temp_sum2 >> 0x20),0x1c8a2d4b,0x40033a27);\n        temp_sum2 = FUN_080004d0((int)temp_sum2,(int)((ulonglong)temp_sum2 >> 0x20),temp_var5,temp_var6);\n        temp_sum2 = FUN_0800016c((int)temp_sum2,(int)((ulonglong)temp_sum2 >> 0x20),0,0x3ff00000);\n        temp_sum1 = FUN_08000724((int)temp_sum1,(int)((ulonglong)temp_sum1 >> 0x20),(int)temp_sum2,\n                              (int)((ulonglong)temp_sum2 >> 0x20));\n        temp_sum1 = FUN_080004d0((int)temp_sum1,(int)((ulonglong)temp_sum1 >> 0x20),input_1,input_2);\n        goto LAB_08005cba;\n      }\n      temp_sum1 = FUN_0800016c(input_1,input_2,0x8800759c,0x7e37e43c);\n      result = FUN_080009f0((int)temp_sum1,(int)((ulonglong)temp_sum1 >> 0x20),0,0x3ff00000);\n      if (result != 0) {\n        return sum;\n      }\n    }\n    sum = FUNC_0800708c(input_1,input_2);\n    sum = FUN_08000168(0,0x3ff00000,(int)sum,(int)((ulonglong)sum >> 0x20));\n    sum = FUN_080004d0((int)sum,(int)((ulonglong)sum >> 0x20),0,0x3fe00000);\n    temp_var1 = (undefined4)((ulonglong)sum >> 0x20);\n    temp_var5 = (undefined4)sum;\n    sum = FUN_080004d0(temp_var5,temp_var1,0xdfdf709,0x3f023de1);\n    sum = FUN_0800016c((int)sum,(int)((ulonglong)sum >> 0x20),0x7501b288,0x3f49efe0);\n    sum = FUN_080004d0((int)sum,(int)((ulonglong)sum >> 0x20),temp_var5,temp_var1);\n    sum = FUN_08000168((int)sum,(int)((ulonglong)sum >> 0x20),0xb5688f3b,0x3fa48228);\n    sum = FUN_080004d0((int)sum,(int)((ulonglong)sum >> 0x20),temp_var5,temp_var1);\n    sum = FUN_0800016c((int)sum,(int)((ulonglong)sum >> 0x20),0xe884455,0x3fc9c155);\n    sum = FUN_080004d0((int)sum,(int)((ulonglong)sum >> 0x20),temp_var5,temp_var1);\n    sum = FUN_08000168((int)sum,(int)((ulonglong)sum >> 0x20),0x3eb6f7d,0x3fd4d612);\n    sum = FUN_080004d0((int)sum,(int)((ulonglong)sum >> 0x20),temp_var5,temp_var1);\n    sum = FUN_0800016c((int)sum,(int)((ulonglong)sum >> 0x20),0x55555555,0x3fc55555);\n    sum = FUN_080004d0((int)sum,(int)((ulonglong)sum >> 0x20),temp_var5,temp_var1);\n    temp_var2 = (undefined4)((ulonglong)sum >> 0x20);\n    temp_sum1 = FUN_080004d0(temp_var5,temp_var1,0xb12e9282,0x3fb3b8c5);\n    temp_sum1 = FUN_08000168((int)temp_sum1,(int)((ulonglong)temp_sum1 >> 0x20),0x1b8d0159,0x3fe6066c);\n    temp_sum1 = FUN_080004d0((int)temp_sum1,(int)((ulonglong)temp_sum1 >> 0x20),temp_var5,temp_var1);\n    temp_sum1 = FUN_0800016c((int)temp_sum1,(int)((ulonglong)temp_sum1 >> 0x20),0x9c598ac8,0x40002ae5);\n    temp_sum1 = FUN_080004d0((int)temp_sum1,(int)((ulonglong)temp_sum1 >> 0x20),temp_var5,temp_var1);\n    temp_sum1 = FUN_08000168((int)temp_sum1,(int)((ulonglong)temp_sum1 >> 0x20),0x1c8a2d4b,0x40033a27);\n    temp_sum1 = FUN_080004d0((int)temp_sum1,(int)((ulonglong)temp_sum1 >> 0x20),temp_var5,temp_var1);\n    temp_sum1 = FUN_0800016c((int)temp_sum1,(int)((ulonglong)temp_sum1 >> 0x20),0,0x3ff00000);\n    temp_var3 = (undefined4)((ulonglong)temp_sum1 >> 0x20);\n    temp_sum2 = FUN_08006c0c(temp_var5,temp_var1);\n    temp_var4 = (undefined4)((ulonglong)temp_sum2 >> 0x20);\n    temp_var6 = (undefined4)temp_sum2;\n    if (abs_input_2 < 0x3fef3333) {\n      sum = FUN_08000724((int)sum,temp_var2,(int)temp_sum1,temp_var3);\n      temp_sum1 = FUN_0800016c(temp_var6,temp_var4,temp_var6,temp_var4);\n      sum = FUN_080004d0((int)sum,(int)((ulonglong)sum >> 0x20),(int)temp_sum1,\n                           (int)((ulonglong)temp_sum1 >> 0x20));\n      temp_sum1 = FUN_080004d0(0,temp_var4,0,temp_var4);\n      temp_sum1 = FUN_08000168(temp_var5,temp_var1,(int)temp_sum1,(int)((ulonglong)temp_sum1 >> 0x20));\n      temp_sum2 = FUN_0800016c(temp_var6,temp_var4,0,temp_var4);\n      temp_sum1 = FUN_08000724((int)temp_sum1,(int)((ulonglong)temp_sum1 >> 0x20),(int)temp_sum2,\n                            (int)((ulonglong)temp_sum2 >> 0x20));\n      temp_var5 = (undefined4)((ulonglong)temp_sum1 >> 0x20);\n      temp_sum1 = FUN_0800016c((int)temp_sum1,temp_var5,(int)temp_sum1,temp_var5);\n      temp_sum1 = FUN_08000168(0x33145c07,0x3c91a626,(int)temp_sum1,(int)((ulonglong)temp_sum1 >> 0x20));\n      sum = FUN_08000168((int)sum,(int)((ulonglong)sum >> 0x20),(int)temp_sum1,\n                           (int)((ulonglong)temp_sum1 >> 0x20));\n      temp_sum1 = FUN_0800016c(0,temp_var4,0,temp_var4);\n      temp_sum1 = FUN_08000168(0x54442d18,0x3fe921fb,(int)temp_sum1,(int)((ulonglong)temp_sum1 >> 0x20));\n      sum = FUN_08000168((int)sum,(int)((ulonglong)sum >> 0x20),(int)temp_sum1,\n                           (int)((ulonglong)temp_sum1 >> 0x20));\n      temp_var5 = 0x3fe921fb;\n    }\n    else {\n      sum = FUN_08000724((int)sum,temp_var2,(int)temp_sum1,temp_var3);\n      sum = FUN_080004d0((int)sum,(int)((ulonglong)sum >> 0x20),temp_var6,temp_var4);\n      sum = FUN_0800016c((int)sum,(int)((ulonglong)sum >> 0x20),temp_var6,temp_var4);\n      temp_var5 = (undefined4)((ulonglong)sum >> 0x20);\n      sum = FUN_0800016c((int)sum,temp_var5,(int)sum,temp_var5);\n      sum = FUN_08000168((int)sum,(int)((ulonglong)sum >> 0x20),0x33145c07,0x3c91a626);\n      temp_var5 = 0x3ff921fb;\n    }\n    sum = FUN_08000168(0x54442d18,temp_var5,(int)sum,(int)((ulonglong)sum >> 0x20));\n    if ((int)input_2 < 1) {\n      sum = CONCAT44((int)((ulonglong)sum >> 0x20) + -0x80000000,(int)sum);\n    }\n  }\n  else {\n    if ((abs_input_2 + 0xc0100000 | input_1) != 0) {\n      sum = FUN_08000168(input_1,input_2,input_1,input_2);\n      temp_var5 = (undefined4)((ulonglong)sum >> 0x20);\n      sum = FUN_08000724((int)sum,temp_var5,(int)sum,temp_var5);\n      return sum;\n    }\n    sum = FUN_080004d0(input_1,input_2,0x54442d18,0x3ff921fb);\n    temp_sum1 = FUN_080004d0(input_1,input_2,0x33145c07,0x3c91a626);\nLAB_08005cba:\n    sum = FUN_0800016c((int)sum,(int)((ulonglong)sum >> 0x20),(int)temp_sum1,\n                         (int)((ulonglong)temp_sum1 >> 0x20));\n  }\n  return sum;\n}\n\n",
            "renaming": {
                "FUN_08005c70": "calculate_sum_08005c70",
                "param_1": "input_1",
                "param_2": "input_2",
                "iVar1": "result",
                "uVar2": "temp_var1",
                "uVar3": "temp_var2",
                "uVar4": "temp_var3",
                "uVar5": "temp_var4",
                "uVar6": "temp_var5",
                "uVar7": "temp_var6",
                "uVar8": "abs_input_2",
                "uVar9": "sum",
                "uVar10": "temp_sum1",
                "uVar11": "temp_sum2"
            },
            "calling": [
                "FUN_08005854"
            ],
            "called": [
                "FUN_080004d0",
                "FUN_0800708c",
                "FUN_08006c0c",
                "FUN_08000168",
                "FUN_080009f0",
                "FUN_08000724",
                "FUN_0800016c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006070": {
            "entrypoint": "0x08006070",
            "current_name": "calculate_result_08006070",
            "code": "\nundefined8 calculateResult_08006070(uint input1,uint input2,uint input3,uint input4)\n\n{\n  undefined4 result1;\n  uint result2;\n  uint result3;\n  int result4;\n  uint result5;\n  undefined8 finalResult1;\n  undefined8 finalResult2;\n  \n  result5 = input4 & 0x7fffffff;\n  if ((0x7ff00000 < (result5 | (-input3 | input3) >> 0x1f)) ||\n     (result3 = input2 & 0x7fffffff, 0x7ff00000 < (result3 | (-input1 | input1) >> 0x1f))) {\n    finalResult1 = FUN_0800016c(input1,input2,input3,input4,input4);\n    return finalResult1;\n  }\n  if ((input4 + 0xc0100000 | input3) == 0) {\n    finalResult1 = FUN_08006d68();\n    return finalResult1;\n  }\n  result2 = (int)input4 >> 0x1e & 2U | input2 >> 0x1f;\n  if ((input1 | result3) == 0) {\n    if (result2 == 2) {\n      return 0x400921fb54442d18;\n    }\n    if (result2 != 3) {\n      return CONCAT44(input2,input1);\n    }\nLAB_0800613e:\n    finalResult1 = 0xc00921fb54442d18;\n  }\n  else {\n    if ((input3 | result5) != 0) {\n      if (result5 == 0x7ff00000) {\n        if (result3 == 0x7ff00000) {\n          if (result2 == 2) {\n            return 0x4002d97c7f3321d2;\n          }\n          if (result2 == 3) {\n            return 0xc002d97c7f3321d2;\n          }\n          if (result2 != 1) {\n            return 0x3fe921fb54442d18;\n          }\n          return 0xbfe921fb54442d18;\n        }\n        if (result2 == 2) {\n          return 0x400921fb54442d18;\n        }\n        if (result2 != 3) {\n          if (result2 != 1) {\n            return 0;\n          }\n          return 0x8000000000000000;\n        }\n        goto LAB_0800613e;\n      }\n      if (result3 != 0x7ff00000) {\n        result4 = (int)(result3 - result5) >> 0x14;\n        if (result4 < 0x3d) {\n          if (((int)input4 < 0) && (result4 + 0x3c < 0 != SCARRY4(result4,0x3c))) {\n            finalResult1 = 0;\n          }\n          else {\n            FUN_08000724(input1,input2);\n            FUNC_0800708c();\n            finalResult1 = FUN_08006d68();\n          }\n        }\n        else {\n          finalResult1 = 0x3ff921fb54442d18;\n        }\n        result4 = (int)((ulonglong)finalResult1 >> 0x20);\n        result1 = (undefined4)finalResult1;\n        if (result2 == 1) {\n          return CONCAT44(result4 + -0x80000000,result1);\n        }\n        if (result2 == 2) {\n          finalResult2 = FUN_08000168(result1,result4,0x33145c07,0x3ca1a626);\n          finalResult1 = 0x400921fb54442d18;\n        }\n        else {\n          if (result2 == 0) {\n            return finalResult1;\n          }\n          finalResult1 = FUN_08000168(result1,result4,0x33145c07,0x3ca1a626);\n          finalResult2 = 0x400921fb54442d18;\n        }\n        finalResult1 = FUN_08000168((int)finalResult1,(int)((ulonglong)finalResult1 >> 0x20),(int)finalResult2,\n                             (int)((ulonglong)finalResult2 >> 0x20));\n        return finalResult1;\n      }\n    }\n    if ((int)input2 < 0) {\n      finalResult1 = 0xbff921fb54442d18;\n    }\n    else {\n      finalResult1 = 0x3ff921fb54442d18;\n    }\n  }\n  return finalResult1;\n}\n\n",
            "renaming": {
                "FUN_08006070": "calculate_result_08006070",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "result1",
                "uVar2": "result2",
                "uVar3": "result3",
                "iVar4": "result4",
                "uVar5": "result5",
                "uVar6": "finalResult1",
                "uVar7": "finalResult2"
            },
            "calling": [
                "thunk_FUN_08006070"
            ],
            "called": [
                "FUN_0800708c",
                "FUN_08006d68",
                "FUN_08000168",
                "FUN_08000724",
                "FUN_0800016c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006228": {
            "entrypoint": "0x08006228",
            "current_name": "convert_to_floating_point_08006228",
            "code": "\nuint convertToFloatingPoint_08006228(uint sign,uint exponent,uint fraction1,uint fraction2)\n\n{\n  undefined4 signBit;\n  uint exponentBits;\n  uint fractionShift;\n  undefined4 fraction1Temp;\n  undefined4 fraction2Temp;\n  undefined4 fractionTemp;\n  undefined4 fractionTemp2;\n  uint fractionTemp3;\n  undefined4 fractionTemp4;\n  int index1;\n  int index2;\n  undefined4 temp1;\n  uint temp2;\n  undefined4 temp3;\n  int temp4;\n  uint result;\n  undefined4 resultFraction1;\n  undefined4 resultFraction2;\n  undefined8 resultFraction3;\n  undefined8 resultFraction4;\n  undefined8 conversionTemp1;\n  undefined8 conversionTemp2;\n  longlong largeTemp;\n  ulonglong largeTemp2;\n  undefined8 conversionTemp3;\n  uint specialCase;\n  undefined4 smallerFraction;\n  undefined4 largerFraction;\n  int shiftAmount;\n  \n  resultFraction4 = CONCAT44(exponent,sign);\n  result = fraction2 & 0x7fffffff;\n  if ((result | fraction1) == 0) {\n    return 0;\n  }\n  temp2 = exponent & 0x7fffffff;\n  if (temp2 < 0x7ff00001) {\n    if (temp2 == 0x7ff00000) {\n      if (sign == 0) {\n        if (0x7ff00000 < result) goto LAB_08006278;\nLAB_08006262:\n        if ((result != 0x7ff00000) || (fraction1 == 0)) {\n          if (-1 < (int)exponent) goto LAB_0800632a;\n          if (result < 0x43400000) {\n            if (result < 0x3ff00000) {\nLAB_0800632a:\n              specialCase = 0;\n              goto LAB_080062ba;\n            }\n            index1 = ((int)result >> 0x14) + -0x3ff;\n            if (0x14 < index1) {\n              exponentBits = fraction1 >> (0x34U - index1 & 0xff);\n              if (fraction1 == exponentBits << (0x34U - index1 & 0xff)) {\n                specialCase = 2 - (exponentBits & 1);\n                goto LAB_080062ba;\n              }\n              goto LAB_0800632a;\n            }\n            if (fraction1 == 0) {\n              exponentBits = (int)result >> (0x14U - index1 & 0xff);\n              if (result == exponentBits << (0x14U - index1 & 0xff)) {\n                specialCase = 2 - (exponentBits & 1);\n              }\n              else {\n                specialCase = 0;\n              }\n              goto LAB_0800630c;\n            }\n            specialCase = 0;\n          }\n          else {\n            specialCase = 2;\nLAB_080062ba:\n            if (fraction1 == 0) {\n              if (result == 0x7ff00000) {\n                if ((temp2 + 0xc0100000 | sign) == 0) {\n                  return 0;\n                }\n                if (0x3fefffff < temp2) {\n                  if ((int)fraction2 < 0) {\n                    return 0;\n                  }\n                  return 0;\n                }\n                if (-1 < (int)fraction2) {\n                  return 0;\n                }\n                return 0;\n              }\nLAB_0800630c:\n              if (result == 0x3ff00000) {\n                if (-1 < (int)fraction2) {\n                  return sign;\n                }\n                resultFraction3 = 0x3ff0000000000000;\n                goto LAB_08006320;\n              }\n              if (fraction2 == 0x40000000) goto LAB_0800634a;\n              if ((fraction2 == 0x3fe00000) && (-1 < (int)exponent)) {\n                result = FUN_08006c0c(sign,exponent);\n                return result;\n              }\n            }\n          }\n          resultFraction3 = FUNC_0800708c(sign,exponent);\n          resultFraction1 = (undefined4)((ulonglong)resultFraction3 >> 0x20);\n          signBit = (undefined4)resultFraction3;\n          largeTemp2 = CONCAT44(exponent,signBit) & 0x7fffffffffffffff;\n          if ((sign == 0) && ((temp2 == 0 || ((exponent & 0x3fffffff) == 0x3ff00000)))) {\n            if ((int)fraction2 < 0) {\n              resultFraction3 = FUN_08000724(0,0x3ff00000,signBit,resultFraction1);\n            }\n            if (-1 < (int)exponent) {\n              return (uint)resultFraction3;\n            }\n            if ((specialCase | temp2 + 0xc0100000) != 0) {\n              return (uint)resultFraction3;\n            }\n          }\n          else {\n            exponentBits = 0xffffffff - ((int)exponent >> 0x1f);\n            resultFraction3 = resultFraction4;\n            if ((specialCase | exponentBits) != 0) {\n              if (result < 0x41e00001) {\n                shiftAmount = 0;\n                if (temp2 < 0x100000) {\n                  largeTemp2 = FUN_080004d0();\n                  shiftAmount = -0x35;\n                }\n                result = (uint)(largeTemp2 >> 0x20);\n                signBit = (undefined4)largeTemp2;\n                shiftAmount = ((int)result >> 0x14) + -0x3ff + shiftAmount;\n                result = result & 0xfffff;\n                temp2 = result | 0x3ff00000;\n                if (result < 0x3988f) {\nLAB_08006628:\n                  index1 = 0;\n                }\n                else {\n                  if (0xbb679 < result) {\n                    temp2 = temp2 - 0x100000;\n                    shiftAmount = shiftAmount + 1;\n                    goto LAB_08006628;\n                  }\n                  index1 = 1;\n                }\n                index2 = index1 * 8;\n                temp1 = (&DAT_080073c0)[index1 * 2];\n                temp3 = (&DAT_080073c4)[index1 * 2];\n                resultFraction4 = FUN_08000168(signBit,temp2,temp1,temp3);\n                resultFraction2 = (undefined4)((ulonglong)resultFraction4 >> 0x20);\n                resultFraction3 = FUN_0800016c(signBit,temp2,temp1,temp3);\n                resultFraction3 = FUN_08000724(0,0x3ff00000,(int)resultFraction3,(int)((ulonglong)resultFraction3 >> 0x20));\n                fraction1Temp = (undefined4)((ulonglong)resultFraction3 >> 0x20);\n                conversionTemp1 = FUN_080004d0((int)resultFraction4,resultFraction2,(int)resultFraction3,fraction1Temp);\n                fraction2Temp = (undefined4)((ulonglong)conversionTemp1 >> 0x20);\n                resultFraction1 = (undefined4)conversionTemp1;\n                conversionTemp1 = FUN_080004d0(0,fraction2Temp);\n                resultFraction4 = FUN_08000168((int)resultFraction4,resultFraction2,(int)conversionTemp1,\n                                      (int)((ulonglong)conversionTemp1 >> 0x20));\n                conversionTemp1 = FUN_08000168(0,((int)temp2 >> 1 | 0x20000000U) + 0x80000 + index1 * 0x40000,\n                                      temp1,temp3);\n                conversionTemp1 = FUN_08000168(signBit,temp2,(int)conversionTemp1,(int)((ulonglong)conversionTemp1 >> 0x20));\n                conversionTemp1 = FUN_080004d0((int)conversionTemp1,(int)((ulonglong)conversionTemp1 >> 0x20),0,fraction2Temp);\n                resultFraction4 = FUN_08000168((int)resultFraction4,(int)((ulonglong)resultFraction4 >> 0x20),(int)conversionTemp1,\n                                      (int)((ulonglong)conversionTemp1 >> 0x20));\n                resultFraction4 = FUN_080004d0((int)resultFraction4,(int)((ulonglong)resultFraction4 >> 0x20),(int)resultFraction3,fraction1Temp\n                                     );\n                resultFraction2 = (undefined4)((ulonglong)resultFraction4 >> 0x20);\n                resultFraction3 = FUN_080004d0(resultFraction1,fraction2Temp);\n                fraction1Temp = (undefined4)((ulonglong)resultFraction3 >> 0x20);\n                signBit = (undefined4)resultFraction3;\n                resultFraction3 = FUN_080004d0(signBit,fraction1Temp,0x4a454eef,0x3fca7e28);\n                resultFraction3 = FUN_0800016c((int)resultFraction3,(int)((ulonglong)resultFraction3 >> 0x20),0x93c9db65,\n                                      0x3fcd864a);\n                resultFraction3 = FUN_080004d0((int)resultFraction3,(int)((ulonglong)resultFraction3 >> 0x20),signBit,fraction1Temp);\n                resultFraction3 = FUN_0800016c((int)resultFraction3,(int)((ulonglong)resultFraction3 >> 0x20),0xa91d4101,\n                                      0x3fd17460);\n                resultFraction3 = FUN_080004d0((int)resultFraction3,(int)((ulonglong)resultFraction3 >> 0x20),signBit,fraction1Temp);\n                resultFraction3 = FUN_0800016c((int)resultFraction3,(int)((ulonglong)resultFraction3 >> 0x20),0x518f264d,\n                                      0x3fd55555);\n                resultFraction3 = FUN_080004d0((int)resultFraction3,(int)((ulonglong)resultFraction3 >> 0x20),signBit,fraction1Temp);\n                resultFraction3 = FUN_0800016c((int)resultFraction3,(int)((ulonglong)resultFraction3 >> 0x20),0xdb6fabff,\n                                      0x3fdb6db6);\n                resultFraction3 = FUN_080004d0((int)resultFraction3,(int)((ulonglong)resultFraction3 >> 0x20),signBit,fraction1Temp);\n                resultFraction3 = FUN_0800016c((int)resultFraction3,(int)((ulonglong)resultFraction3 >> 0x20),0x33333303,\n                                      0x3fe33333);\n                conversionTemp1 = FUN_080004d0(signBit,fraction1Temp,signBit,fraction1Temp);\n                resultFraction3 = FUN_080004d0((int)resultFraction3,(int)((ulonglong)resultFraction3 >> 0x20),(int)conversionTemp1,\n                                      (int)((ulonglong)conversionTemp1 >> 0x20));\n                conversionTemp1 = FUN_0800016c(resultFraction1,fraction2Temp,0,fraction2Temp);\n                conversionTemp1 = FUN_080004d0((int)conversionTemp1,(int)((ulonglong)conversionTemp1 >> 0x20),(int)resultFraction4,\n                                      resultFraction2);\n                resultFraction3 = FUN_0800016c((int)conversionTemp1,(int)((ulonglong)conversionTemp1 >> 0x20),(int)resultFraction3,\n                                      (int)((ulonglong)resultFraction3 >> 0x20));\n                signBit = (undefined4)((ulonglong)resultFraction3 >> 0x20);\n                conversionTemp1 = FUN_080004d0(0,fraction2Temp,0,fraction2Temp);\n                fraction1Temp = (undefined4)((ulonglong)conversionTemp1 >> 0x20);\n                conversionTemp2 = FUN_0800016c((int)conversionTemp1,fraction1Temp,0,0x40080000);\n                FUN_0800016c((int)conversionTemp2,(int)((ulonglong)conversionTemp2 >> 0x20),(int)resultFraction3,signBit);\n                conversionTemp2 = FUN_080004d0(0,fraction2Temp,0,fractionTemp);\n                temp1 = (undefined4)((ulonglong)conversionTemp2 >> 0x20);\n                conversionTemp3 = FUN_08000168(0,fractionTemp,0,0x40080000);\n                conversionTemp1 = FUN_08000168((int)conversionTemp3,(int)((ulonglong)conversionTemp3 >> 0x20),(int)conversionTemp1,fraction1Temp\n                                     );\n                resultFraction3 = FUN_08000168((int)resultFraction3,signBit,(int)conversionTemp1,(int)((ulonglong)conversionTemp1 >> 0x20)\n                                     );\n                resultFraction3 = FUN_080004d0((int)resultFraction3,(int)((ulonglong)resultFraction3 >> 0x20),resultFraction1,fraction2Temp);\n                resultFraction4 = FUN_080004d0((int)resultFraction4,resultFraction2,0,fractionTemp);\n                resultFraction3 = FUN_0800016c((int)resultFraction3,(int)((ulonglong)resultFraction3 >> 0x20),(int)resultFraction4,\n                                      (int)((ulonglong)resultFraction4 >> 0x20));\n                signBit = (undefined4)((ulonglong)resultFraction3 >> 0x20);\n                FUN_0800016c((int)conversionTemp2,temp1,(int)resultFraction3,signBit);\n                resultFraction4 = FUN_080004d0(0,fractionTemp2,0xe0000000,0x3feec709);\n                conversionTemp1 = FUN_08000168(0,fractionTemp2,(int)conversionTemp2,temp1);\n                resultFraction3 = FUN_08000168((int)resultFraction3,signBit,(int)conversionTemp1,(int)((ulonglong)conversionTemp1 >> 0x20)\n                                     );\n                resultFraction3 = FUN_080004d0((int)resultFraction3,(int)((ulonglong)resultFraction3 >> 0x20),0xdc3a03fd,\n                                      0x3feec709);\n                conversionTemp1 = FUN_080004d0(0,fractionTemp2,0x145b01f5,0xbe3e2fe0);\n                resultFraction3 = FUN_0800016c((int)resultFraction3,(int)((ulonglong)resultFraction3 >> 0x20),(int)conversionTemp1,\n                                      (int)((ulonglong)conversionTemp1 >> 0x20));\n                resultFraction3 = FUN_0800016c((int)resultFraction3,(int)((ulonglong)resultFraction3 >> 0x20),\n                                      *(undefined4 *)(&DAT_080073e0 + index2),\n                                      *(undefined4 *)(&DAT_080073e4 + index2));\n                conversionTemp1 = FUN_08000404(shiftAmount);\n                signBit = (undefined4)((ulonglong)conversionTemp1 >> 0x20);\n                resultFraction1 = *(undefined4 *)(&DAT_080073d0 + index2);\n                resultFraction2 = *(undefined4 *)(&DAT_080073d4 + index2);\n                conversionTemp2 = FUN_0800016c((int)resultFraction4,(int)((ulonglong)resultFraction4 >> 0x20),(int)resultFraction3,\n                                      (int)((ulonglong)resultFraction3 >> 0x20));\n                conversionTemp2 = FUN_0800016c((int)conversionTemp2,(int)((ulonglong)conversionTemp2 >> 0x20),resultFraction1,resultFraction2);\n                FUN_0800016c((int)conversionTemp2,(int)((ulonglong)conversionTemp2 >> 0x20),(int)conversionTemp1,signBit);\n                conversionTemp1 = FUN_08000168(0,fractionTemp3,(int)conversionTemp1,signBit);\n                largeTemp = FUN_08000168((int)conversionTemp1,(int)((ulonglong)conversionTemp1 >> 0x20),resultFraction1,resultFraction2);\n                result = fractionTemp3;\n              }\n              else {\n                if (0x43f00000 < result) {\n                  if (temp2 < 0x3ff00000) goto LAB_080063fa;\nLAB_08006418:\n                  if ((int)fraction2 < 1) {\n                    return 0;\n                  }\nLAB_08006400:\n                  sign = 0x8800759c;\n                  exponent = 0x7e37e43c;\n                  resultFraction4 = 0x7e37e43c8800759c;\n                  goto LAB_0800634a;\n                }\n                if (temp2 < 0x3fefffff) {\nLAB_080063fa:\n                  if (-1 < (int)fraction2) {\n                    return 0;\n                  }\n                  goto LAB_08006400;\n                }\n                if (0x3ff00000 < temp2) goto LAB_08006418;\n                resultFraction4 = FUN_08000168(signBit,resultFraction1,0,0x3ff00000);\n                resultFraction1 = (undefined4)((ulonglong)resultFraction4 >> 0x20);\n                signBit = (undefined4)resultFraction4;\n                resultFraction4 = FUN_080004d0(signBit,resultFraction1,0x60000000,0x3ff71547);\n                resultFraction3 = FUN_080004d0(signBit,resultFraction1,0xf85ddf44,0x3e54ae0b);\n                conversionTemp1 = FUN_080004d0(signBit,resultFraction1,0,0x3fd00000);\n                conversionTemp1 = FUN_08000168(0x55555555,0x3fd55555,(int)conversionTemp1,\n                                      (int)((ulonglong)conversionTemp1 >> 0x20));\n                conversionTemp1 = FUN_080004d0((int)conversionTemp1,(int)((ulonglong)conversionTemp1 >> 0x20),signBit,resultFraction1);\n                conversionTemp1 = FUN_08000168(0,0x3fe00000,(int)conversionTemp1,(int)((ulonglong)conversionTemp1 >> 0x20));\n                conversionTemp2 = FUN_080004d0(signBit,resultFraction1,signBit,resultFraction1);\n                conversionTemp1 = FUN_080004d0((int)conversionTemp1,(int)((ulonglong)conversionTemp1 >> 0x20),(int)conversionTemp2,\n                                      (int)((ulonglong)conversionTemp2 >> 0x20));\n                conversionTemp1 = FUN_080004d0((int)conversionTemp1,(int)((ulonglong)conversionTemp1 >> 0x20),0x652b82fe,\n                                      0x3ff71547);\n                resultFraction3 = FUN_08000168((int)resultFraction3,(int)((ulonglong)resultFraction3 >> 0x20),(int)conversionTemp1,\n                                      (int)((ulonglong)conversionTemp1 >> 0x20));\n                FUN_0800016c((int)resultFraction4,(int)((ulonglong)resultFraction4 >> 0x20),(int)resultFraction3,\n                             (int)((ulonglong)resultFraction3 >> 0x20));\n                largeTemp = (ulonglong)fractionShift << 0x20;\n                result = fractionShift;\n              }\n              resultFraction4 = FUN_08000168((int)largeTemp,(int)((ulonglong)largeTemp >> 0x20),(int)resultFraction4,\n                                    (int)((ulonglong)resultFraction4 >> 0x20));\n              resultFraction4 = FUN_08000168((int)resultFraction3,(int)((ulonglong)resultFraction3 >> 0x20),(int)resultFraction4,\n                                    (int)((ulonglong)resultFraction4 >> 0x20));\n              if ((specialCase - 1 | exponentBits) == 0) {\n                exponent = 0xbff00000;\n              }\n              else {\n                exponent = 0x3ff00000;\n              }\n              specialCase = 0;\n              resultFraction3 = FUN_08000168(fraction1,fraction2,0,fraction2);\n              resultFraction3 = FUN_080004d0((int)resultFraction3,(int)((ulonglong)resultFraction3 >> 0x20),0,result);\n              resultFraction4 = FUN_080004d0((int)resultFraction4,(int)((ulonglong)resultFraction4 >> 0x20),fraction1,fraction2);\n              resultFraction4 = FUN_0800016c((int)resultFraction3,(int)((ulonglong)resultFraction3 >> 0x20),(int)resultFraction4,\n                                    (int)((ulonglong)resultFraction4 >> 0x20));\n              resultFraction2 = (undefined4)((ulonglong)resultFraction4 >> 0x20);\n              signBit = (undefined4)resultFraction4;\n              resultFraction4 = FUN_080004d0(0,result,0,fraction2);\n              fraction1Temp = (undefined4)((ulonglong)resultFraction4 >> 0x20);\n              resultFraction1 = (undefined4)resultFraction4;\n              largeTemp = FUN_0800016c(signBit,resultFraction2,resultFraction1,fraction1Temp);\n              temp2 = (uint)((ulonglong)largeTemp >> 0x20);\n              result = (uint)largeTemp;\n              if (0x408fffffffffffff < largeTemp) {\n                if ((temp2 + 0xbf700000 | result) == 0) {\n                  resultFraction3 = FUN_0800016c(signBit,resultFraction2,0x652b82fe,0x3c971547);\n                  conversionTemp1 = FUN_08000168(result,temp2,resultFraction1,fraction1Temp);\n                  index1 = FUN_080009f0((int)resultFraction3,(int)((ulonglong)resultFraction3 >> 0x20),(int)conversionTemp1,\n                                       (int)((ulonglong)conversionTemp1 >> 0x20));\n                  if (index1 == 0) goto LAB_08006968;\n                }\n                resultFraction4 = FUN_080004d0(0,exponent,0x8800759c,0x7e37e43c);\n                sign = 0x8800759c;\n                exponent = 0x7e37e43c;\n                goto LAB_0800634a;\n              }\n              if ((temp2 & 0x7fffffff) < 0x4090cc00) {\nLAB_08006968:\n                if ((temp2 & 0x7fffffff) < 0x3fe00001) {\n                  index1 = 0;\n                }\n                else {\n                  temp2 = (0x100000 >> (((int)(temp2 & 0x7fffffff) >> 0x14) - 0x3feU & 0xff)) +\n                          temp2;\n                  result = (temp2 * 2 >> 0x15) - 0x3ff;\n                  index1 = (int)(temp2 & 0xfffff | 0x100000) >> (0x14 - result & 0xff);\n                  if (largeTemp < 0) {\n                    index1 = -index1;\n                  }\n                  resultFraction4 = FUN_08000168(resultFraction1,fraction1Temp,0,temp2 & ~(0xfffff >> (result & 0xff)));\n                }\n                largerFraction = (undefined4)((ulonglong)resultFraction4 >> 0x20);\n                smallerFraction = (undefined4)resultFraction4;\n                FUN_0800016c(smallerFraction,largerFraction,signBit,resultFraction2);\n                resultFraction4 = FUN_080004d0(0,fractionTemp4,0,0x3fe62e43);\n                resultFraction1 = (undefined4)((ulonglong)resultFraction4 >> 0x20);\n                resultFraction3 = FUN_08000168(0,fractionTemp4,smallerFraction,largerFraction);\n                resultFraction3 = FUN_08000168(signBit,resultFraction2,(int)resultFraction3,(int)((ulonglong)resultFraction3 >> 0x20));\n                resultFraction3 = FUN_080004d0((int)resultFraction3,(int)((ulonglong)resultFraction3 >> 0x20),0xfefa39ef,\n                                      0x3fe62e42);\n                conversionTemp1 = FUN_080004d0(0,fractionTemp4,0xca86c39,0xbe205c61);\n                resultFraction3 = FUN_0800016c((int)resultFraction3,(int)((ulonglong)resultFraction3 >> 0x20),(int)conversionTemp1,\n                                      (int)((ulonglong)conversionTemp1 >> 0x20));\n                resultFraction2 = (undefined4)((ulonglong)resultFraction3 >> 0x20);\n                conversionTemp1 = FUN_0800016c((int)resultFraction4,resultFraction1,(int)resultFraction3,resultFraction2);\n                fraction1Temp = (undefined4)((ulonglong)conversionTemp1 >> 0x20);\n                signBit = (undefined4)conversionTemp1;\n                resultFraction4 = FUN_08000168(signBit,fraction1Temp,(int)resultFraction4,resultFraction1);\n                resultFraction4 = FUN_08000168((int)resultFraction3,resultFraction2,(int)resultFraction4,\n                                      (int)((ulonglong)resultFraction4 >> 0x20));\n                resultFraction2 = (undefined4)((ulonglong)resultFraction4 >> 0x20);\n                resultFraction3 = FUN_080004d0(signBit,fraction1Temp,signBit,fraction1Temp);\n                fraction2Temp = (undefined4)((ulonglong)resultFraction3 >> 0x20);\n                resultFraction1 = (undefined4)resultFraction3;\n                resultFraction3 = FUN_080004d0(resultFraction1,fraction2Temp,0x72bea4d0,0x3e663769);\n                resultFraction3 = FUN_08000168((int)resultFraction3,(int)((ulonglong)resultFraction3 >> 0x20),0xc5d26bf1,\n                                      0x3ebbbd41);\n                resultFraction3 = FUN_080004d0((int)resultFraction3,(int)((ulonglong)resultFraction3 >> 0x20),resultFraction1,fraction2Temp);\n                resultFraction3 = FUN_0800016c((int)resultFraction3,(int)((ulonglong)resultFraction3 >> 0x20),0xaf25de2c,\n                                      0x3f11566a);\n                resultFraction3 = FUN_080004d0((int)resultFraction3,(int)((ulonglong)resultFraction3 >> 0x20),resultFraction1,fraction2Temp);\n                resultFraction3 = FUN_08000168((int)resultFraction3,(int)((ulonglong)resultFraction3 >> 0x20),0x16bebd93,\n                                      0x3f66c16c);\n                resultFraction3 = FUN_080004d0((int)resultFraction3,(int)((ulonglong)resultFraction3 >> 0x20),resultFraction1,fraction2Temp);\n                resultFraction3 = FUN_0800016c((int)resultFraction3,(int)((ulonglong)resultFraction3 >> 0x20),0x5555553e,\n                                      0x3fc55555);\n                resultFraction3 = FUN_080004d0((int)resultFraction3,(int)((ulonglong)resultFraction3 >> 0x20),resultFraction1,fraction2Temp);\n                resultFraction3 = FUN_08000168(signBit,fraction1Temp,(int)resultFraction3,(int)((ulonglong)resultFraction3 >> 0x20));\n                resultFraction1 = (undefined4)((ulonglong)resultFraction3 >> 0x20);\n                conversionTemp1 = FUN_080004d0(signBit,fraction1Temp,(int)resultFraction3,resultFraction1);\n                resultFraction3 = FUN_08000168((int)resultFraction3,resultFraction1,0,0x40000000);\n                resultFraction3 = FUN_08000724((int)conversionTemp1,(int)((ulonglong)conversionTemp1 >> 0x20),(int)resultFraction3,\n                                      (int)((ulonglong)resultFraction3 >> 0x20));\n                conversionTemp1 = FUN_080004d0(signBit,fraction1Temp,(int)resultFraction4,resultFraction2);\n                resultFraction4 = FUN_0800016c((int)conversionTemp1,(int)((ulonglong)conversionTemp1 >> 0x20),(int)resultFraction4,\n                                      resultFraction2);\n                resultFraction4 = FUN_08000168((int)resultFraction3,(int)((ulonglong)resultFraction3 >> 0x20),(int)resultFraction4,\n                                      (int)((ulonglong)resultFraction4 >> 0x20));\n                resultFraction4 = FUN_08000168((int)resultFraction4,(int)((ulonglong)resultFraction4 >> 0x20),signBit,fraction1Temp);\n                resultFraction3 = FUN_08000168(0,0x3ff00000,(int)resultFraction4,(int)((ulonglong)resultFraction4 >> 0x20));\n                index2 = (int)((ulonglong)resultFraction3 >> 0x20);\n                temp4 = index2 + index1 * 0x100000;\n                resultFraction4 = CONCAT44(temp4,(int)resultFraction3);\n                sign = specialCase;\n                if (temp4 < 0x100000) {\n                  resultFraction4 = FUN_080071c0((int)resultFraction3,index2,index1);\n                }\n              }\n              else {\n                if ((temp2 + 0x3f6f3400 | result) == 0) {\n                  resultFraction3 = FUN_08000168(result,temp2,resultFraction1,fraction1Temp);\n                  index1 = FUN_080009c8(signBit,resultFraction2,(int)resultFraction3,(int)((ulonglong)resultFraction3 >> 0x20));\n                  if (index1 == 0) goto LAB_08006968;\n                }\n                resultFraction4 = FUN_080004d0(0,exponent,0xc2f8f359,0x1a56e1f);\n                sign = 0xc2f8f359;\n                exponent = 0x1a56e1f;\n              }\nLAB_0800634a:\n              result = FUN_080004d0((int)resultFraction4,(int)((ulonglong)resultFraction4 >> 0x20),sign,exponent);\n              return result;\n            }\n          }\n          signBit = (undefined4)((ulonglong)resultFraction3 >> 0x20);\n          resultFraction3 = FUN_08000168((int)resultFraction3,signBit,(int)resultFraction3,signBit);\n          resultFraction4 = resultFraction3;\nLAB_08006320:\n          result = FUN_08000724((int)resultFraction3,(int)((ulonglong)resultFraction3 >> 0x20),(int)resultFraction4,\n                                (int)((ulonglong)resultFraction4 >> 0x20));\n          return result;\n        }\n      }\n    }\n    else if (result < 0x7ff00001) goto LAB_08006262;\n  }\n  if ((temp2 + 0xc0100000 | sign) == 0) {\n    return 0;\n  }\nLAB_08006278:\n  result = FUN_080070a4(&DAT_0800737e);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08006228": "convert_to_floating_point_08006228",
                "param_1": "sign",
                "param_2": "exponent",
                "param_3": "fraction1",
                "param_4": "fraction2",
                "uVar1": "signBit",
                "uVar2": "exponentBits",
                "extraout_r1": "fractionShift",
                "uVar3": "fraction1Temp",
                "uVar4": "fraction2Temp",
                "extraout_r1_00": "fractionTemp",
                "extraout_r1_01": "fractionTemp2",
                "extraout_r1_02": "fractionTemp3",
                "extraout_r1_03": "fractionTemp4",
                "iVar5": "index1",
                "iVar6": "index2",
                "uVar7": "temp1",
                "uVar8": "temp2",
                "uVar9": "temp3",
                "iVar10": "temp4",
                "uVar11": "result",
                "uVar12": "resultFraction1",
                "uVar13": "resultFraction2",
                "uVar14": "resultFraction3",
                "uVar15": "resultFraction4",
                "uVar16": "conversionTemp1",
                "uVar17": "conversionTemp2",
                "lVar18": "largeTemp",
                "uVar19": "largeTemp2",
                "uVar20": "conversionTemp3",
                "local_70": "specialCase",
                "local_68": "smallerFraction",
                "local_64": "largerFraction",
                "local_54": "shiftAmount"
            },
            "calling": [
                "FUN_08005900"
            ],
            "called": [
                "FUN_080071c0",
                "FUN_080004d0",
                "FUN_0800708c",
                "FUN_080070a4",
                "FUN_080009c8",
                "FUN_08006c0c",
                "FUN_08000168",
                "FUN_080009f0",
                "FUN_08000724",
                "FUN_0800016c",
                "FUN_08000404"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006c0c": {
            "entrypoint": "0x08006c0c",
            "current_name": "calculate_floating_point_08006c0c",
            "code": "\nundefined8 calculateFloatingPoint_08006c0c(uint input1,uint input2)\n\n{\n  undefined4 result1;\n  uint temp1;\n  int temp2;\n  int temp3;\n  uint temp4;\n  uint temp5;\n  int temp6;\n  uint temp7;\n  uint temp8;\n  int temp9;\n  uint temp10;\n  undefined8 finalResult;\n  \n  if ((~input2 & 0x7ff00000) == 0) {\n    finalResult = FUN_080004d0(input1,input2,input1,input2);\n    finalResult = FUN_0800016c(input1,input2,(int)finalResult,(int)((ulonglong)finalResult >> 0x20));\n    return finalResult;\n  }\n  if ((int)input2 < 1) {\n    if ((input2 & 0x7fffffff | input1) == 0) {\n      return CONCAT44(input2,input1);\n    }\n    if (input2 != 0) {\n      finalResult = FUN_08000168(input1,input2,input1,input2);\n      result1 = (undefined4)((ulonglong)finalResult >> 0x20);\n      finalResult = FUN_08000724((int)finalResult,result1,(int)finalResult,result1);\n      return finalResult;\n    }\n  }\n  temp2 = (int)input2 >> 0x14;\n  if (temp2 == 0) {\n    while (input2 == 0) {\n      temp2 = temp2 + -0x15;\n      input2 = input1 >> 0xb;\n      input1 = input1 << 0x15;\n    }\n    temp1 = 0;\n    for (; -1 < (int)(input2 << 0xb); input2 = input2 << 1) {\n      temp1 = temp1 + 1;\n    }\n    temp2 = temp2 - (temp1 - 1);\n    input2 = input2 | input1 >> (0x20 - temp1 & 0xff);\n    input1 = input1 << (temp1 & 0xff);\n  }\n  temp6 = 0;\n  temp1 = input2 & 0xfffff | 0x100000;\n  if ((temp2 + -0x3ff) * -0x80000000 < 0) {\n    temp1 = temp1 * 2 - ((int)input1 >> 0x1f);\n    input1 = input1 << 1;\n  }\n  temp1 = temp1 * 2 - ((int)input1 >> 0x1f);\n  temp3 = 0x16;\n  temp4 = 0;\n  temp7 = 0x200000;\n  input1 = input1 << 1;\n  do {\n    temp9 = temp4 + temp7;\n    if (temp9 <= (int)temp1) {\n      temp1 = temp1 - temp9;\n      temp4 = temp9 + temp7;\n      temp6 = temp6 + temp7;\n    }\n    temp3 = temp3 + -1;\n    temp1 = temp1 * 2 - ((int)input1 >> 0x1f);\n    temp7 = temp7 >> 1;\n    input1 = input1 << 1;\n  } while (temp3 != 0);\n  temp9 = 0x20;\n  temp8 = 0x80000000;\n  temp7 = 0;\n  temp3 = 0;\n  do {\n    temp10 = temp8 + temp3;\n    temp5 = temp4;\n    if (((int)temp4 < (int)temp1) || ((temp1 == temp4 && (temp10 <= input1)))) {\n      temp3 = temp10 + temp8;\n      if (((int)temp10 < 0) && (-1 < temp3)) {\n        temp5 = temp4 + 1;\n      }\n      temp1 = temp1 - temp4;\n      if (input1 < temp10) {\n        temp1 = temp1 - 1;\n      }\n      input1 = input1 - temp10;\n      temp7 = temp7 + temp8;\n    }\n    temp1 = temp1 * 2 - ((int)input1 >> 0x1f);\n    temp9 = temp9 + -1;\n    input1 = input1 << 1;\n    temp8 = temp8 >> 1;\n    temp4 = temp5;\n  } while (temp9 != 0);\n  if ((input1 | temp1) != 0) {\n    if (temp7 == 0xffffffff) {\n      temp6 = temp6 + 1;\n      temp7 = 0;\n    }\n    else {\n      temp7 = temp7 + 1 & 0xfffffffe;\n    }\n  }\n  temp7 = temp7 >> 1;\n  if (temp6 << 0x1f < 0) {\n    temp7 = temp7 | 0x80000000;\n  }\n  return CONCAT44((temp6 >> 1) + 0x3fe00000 + (temp2 + -0x3ff >> 1) * 0x100000,temp7);\n}\n\n",
            "renaming": {
                "FUN_08006c0c": "calculate_floating_point_08006c0c",
                "param_1": "input1",
                "param_2": "input2",
                "uVar1": "result1",
                "uVar2": "temp1",
                "iVar3": "temp2",
                "iVar4": "temp3",
                "uVar5": "temp4",
                "uVar6": "temp5",
                "iVar7": "temp6",
                "uVar8": "temp7",
                "uVar9": "temp8",
                "iVar10": "temp9",
                "uVar11": "temp10",
                "uVar12": "finalResult"
            },
            "calling": [
                "FUN_08005c70",
                "FUN_08005bc8",
                "FUN_08006228"
            ],
            "called": [
                "FUN_080004d0",
                "FUN_08000168",
                "FUN_08000724",
                "FUN_0800016c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006d68": {
            "entrypoint": "0x08006d68",
            "current_name": "calculate_floating_point_08006d68",
            "code": "\nundefined8 calculateFloatingPoint_08006d68(int input1,uint input2,undefined4 parameter1,undefined4 parameter2)\n\n{\n  int result;\n  undefined4 temp1;\n  undefined4 temp2;\n  undefined4 temp3;\n  undefined4 temp4;\n  undefined4 temp5;\n  undefined4 temp6;\n  uint maskedInput2;\n  undefined8 result1;\n  undefined8 result2;\n  \n  result1 = CONCAT44(input2,input1);\n  maskedInput2 = input2 & 0x7fffffff;\n  if (maskedInput2 < 0x44100000) {\n    if (maskedInput2 < 0x3fdc0000) {\n      if (maskedInput2 < 0x3e200000) {\n        result2 = FUN_0800016c(input1,input2,0x8800759c,0x7e37e43c,parameter2);\n        result = FUN_080009f0((int)result2,(int)((ulonglong)result2 >> 0x20),0,0x3ff00000);\n        if (result != 0) {\n          return result1;\n        }\n      }\n      result = -1;\n    }\n    else {\n      result1 = FUNC_0800708c();\n      temp2 = (undefined4)((ulonglong)result1 >> 0x20);\n      temp1 = (undefined4)result1;\n      if (maskedInput2 < 0x3ff30000) {\n        if (maskedInput2 < 0x3fe60000) {\n          result1 = FUN_0800016c(temp1,temp2,temp1,temp2);\n          result1 = FUN_08000168((int)result1,(int)((ulonglong)result1 >> 0x20),0,0x3ff00000);\n          result2 = FUN_0800016c(temp1,temp2,0,0x40000000);\n          result1 = FUN_08000724((int)result1,(int)((ulonglong)result1 >> 0x20),(int)result2,\n                               (int)((ulonglong)result2 >> 0x20));\n          result = 0;\n        }\n        else {\n          result1 = FUN_08000168(temp1,temp2,0,0x3ff00000);\n          result2 = FUN_0800016c(temp1,temp2,0,0x3ff00000);\n          result1 = FUN_08000724((int)result1,(int)((ulonglong)result1 >> 0x20),(int)result2,\n                               (int)((ulonglong)result2 >> 0x20));\n          result = 1;\n        }\n      }\n      else if (maskedInput2 < 0x40038000) {\n        result1 = FUN_08000168(temp1,temp2,0,0x3ff80000);\n        result2 = FUN_080004d0(temp1,temp2,0,0x3ff80000);\n        result2 = FUN_0800016c((int)result2,(int)((ulonglong)result2 >> 0x20),0,0x3ff00000);\n        result1 = FUN_08000724((int)result1,(int)((ulonglong)result1 >> 0x20),(int)result2,\n                             (int)((ulonglong)result2 >> 0x20));\n        result = 2;\n      }\n      else {\n        result1 = FUN_08000724(0,0xbff00000,temp1,temp2);\n        result = 3;\n      }\n    }\n    temp6 = (undefined4)((ulonglong)result1 >> 0x20);\n    temp5 = (undefined4)result1;\n    result1 = FUN_080004d0(temp5,temp6,temp5,temp6);\n    temp3 = (undefined4)((ulonglong)result1 >> 0x20);\n    temp1 = (undefined4)result1;\n    result1 = FUN_080004d0(temp1,temp3,temp1,temp3);\n    temp4 = (undefined4)((ulonglong)result1 >> 0x20);\n    temp2 = (undefined4)result1;\n    result1 = FUN_080004d0(temp2,temp4,0xe322da11,0x3f90ad3a);\n    result1 = FUN_0800016c((int)result1,(int)((ulonglong)result1 >> 0x20),0x24760deb,0x3fa97b4b);\n    result1 = FUN_080004d0((int)result1,(int)((ulonglong)result1 >> 0x20),temp2,temp4);\n    result1 = FUN_0800016c((int)result1,(int)((ulonglong)result1 >> 0x20),0xa0d03d51,0x3fb10d66);\n    result1 = FUN_080004d0((int)result1,(int)((ulonglong)result1 >> 0x20),temp2,temp4);\n    result1 = FUN_0800016c((int)result1,(int)((ulonglong)result1 >> 0x20),0xc54c206e,0x3fb745cd);\n    result1 = FUN_080004d0((int)result1,(int)((ulonglong)result1 >> 0x20),temp2,temp4);\n    result1 = FUN_0800016c((int)result1,(int)((ulonglong)result1 >> 0x20),0x920083ff,0x3fc24924);\n    result1 = FUN_080004d0((int)result1,(int)((ulonglong)result1 >> 0x20),temp2,temp4);\n    result1 = FUN_0800016c((int)result1,(int)((ulonglong)result1 >> 0x20),0x5555550d,0x3fd55555);\n    result1 = FUN_080004d0((int)result1,(int)((ulonglong)result1 >> 0x20),temp1,temp3);\n    temp1 = (undefined4)((ulonglong)result1 >> 0x20);\n    result2 = FUN_080004d0(temp2,temp4,0x2c6a6c2f,0xbfa2b444);\n    result2 = FUN_08000168((int)result2,(int)((ulonglong)result2 >> 0x20),0x52defd9a,0x3fadde2d);\n    result2 = FUN_080004d0((int)result2,(int)((ulonglong)result2 >> 0x20),temp2,temp4);\n    result2 = FUN_08000168((int)result2,(int)((ulonglong)result2 >> 0x20),0xaf749a6d,0x3fb3b0f2);\n    result2 = FUN_080004d0((int)result2,(int)((ulonglong)result2 >> 0x20),temp2,temp4);\n    result2 = FUN_08000168((int)result2,(int)((ulonglong)result2 >> 0x20),0xfe231671,0x3fbc71c6);\n    result2 = FUN_080004d0((int)result2,(int)((ulonglong)result2 >> 0x20),temp2,temp4);\n    result2 = FUN_08000168((int)result2,(int)((ulonglong)result2 >> 0x20),0x9998ebc4,0x3fc99999);\n    result2 = FUN_080004d0((int)result2,(int)((ulonglong)result2 >> 0x20),temp2,temp4);\n    temp2 = (undefined4)((ulonglong)result2 >> 0x20);\n    if (result == -1) {\n      result1 = FUN_0800016c((int)result1,temp1,(int)result2,temp2);\n      result1 = FUN_080004d0((int)result1,(int)((ulonglong)result1 >> 0x20),temp5,temp6);\n      result1 = FUN_08000168(temp5,temp6,(int)result1,(int)((ulonglong)result1 >> 0x20));\n    }\n    else {\n      result1 = FUN_0800016c((int)result1,temp1,(int)result2,temp2);\n      result1 = FUN_080004d0((int)result1,(int)((ulonglong)result1 >> 0x20),temp5,temp6);\n      result = result * 8;\n      result1 = FUN_08000168((int)result1,(int)((ulonglong)result1 >> 0x20),\n                           *(undefined4 *)(&UNK_08007410 + result),\n                           *(undefined4 *)(&UNK_08007414 + result));\n      result1 = FUN_08000168((int)result1,(int)((ulonglong)result1 >> 0x20),temp5,temp6);\n      result1 = FUN_08000168(*(undefined4 *)(&UNK_080073f0 + result),\n                           *(undefined4 *)(&UNK_080073f4 + result),(int)result1,\n                           (int)((ulonglong)result1 >> 0x20));\n      if ((int)input2 < 0) {\n        result1 = CONCAT44((int)((ulonglong)result1 >> 0x20) + -0x80000000,(int)result1);\n      }\n    }\n  }\n  else if ((maskedInput2 < 0x7ff00001) && ((maskedInput2 != 0x7ff00000 || (input1 == 0)))) {\n    if ((int)input2 < 1) {\n      result1 = 0xbff921fb54442d18;\n    }\n    else {\n      result1 = 0x3ff921fb54442d18;\n    }\n  }\n  else {\n    result1 = FUN_0800016c(input1,input2,input1,input2,parameter2);\n  }\n  return result1;\n}\n\n",
            "renaming": {
                "FUN_08006d68": "calculate_floating_point_08006d68",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "parameter1",
                "param_4": "parameter2",
                "iVar1": "result",
                "uVar2": "temp1",
                "uVar3": "temp2",
                "uVar4": "temp3",
                "uVar5": "temp4",
                "uVar6": "temp5",
                "uVar7": "temp6",
                "uVar8": "maskedInput2",
                "uVar9": "result1",
                "uVar10": "result2"
            },
            "calling": [
                "FUN_08006070"
            ],
            "called": [
                "FUN_080004d0",
                "FUN_0800708c",
                "FUN_08000168",
                "FUN_080009f0",
                "FUN_08000724",
                "FUN_0800016c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800708c": {
            "entrypoint": "0x0800708c",
            "current_name": "FUNC_0800708c",
            "code": "\nvoid FUNC_0800708c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800708c": "FUNC_0800708c"
            },
            "calling": [
                "FUN_08006d68",
                "FUN_08005c70",
                "FUN_08005854",
                "FUN_08006228",
                "FUN_08006070"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08007092": {
            "entrypoint": "0x08007092",
            "current_name": "set_sign_bit_and_divide_08007092",
            "code": "\nuint setSignBitAndDivide_08007092(undefined4 flags,uint inputNumber)\n\n{\n  return (inputNumber | 0x80000000) + 0x100000 >> 0x1f;\n}\n\n",
            "renaming": {
                "FUN_08007092": "set_sign_bit_and_divide_08007092",
                "param_1": "flags",
                "param_2": "inputNumber"
            },
            "calling": [
                "FUN_08005900"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800709e": {
            "entrypoint": "0x0800709e",
            "current_name": "get_return_value_0800709e",
            "code": "\nundefined4 getReturnValue_0800709e(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800709e": "get_return_value_0800709e"
            },
            "calling": [
                "FUN_08005900",
                "FUN_08005854",
                "FUN_08005bc8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080070a4": {
            "entrypoint": "0x080070a4",
            "current_name": "get_infinity_080070a4",
            "code": "\ndouble getInfinity_080070a4(void)\n\n{\n  return 0x7ff8000000000000;\n}\n\n",
            "renaming": {
                "FUN_080070a4": "get_infinity_080070a4",
                "undefined8": "double"
            },
            "calling": [
                "FUN_08005854",
                "FUN_08006228"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080070b0": {
            "entrypoint": "0x080070b0",
            "current_name": "calculate_result_080070b0",
            "code": "\nundefined8 calculateResult_080070b0(uint input1,uint input2,undefined4 input3)\n\n{\n  int tempVar1;\n  undefined4 tempVar2;\n  uint tempVar3;\n  undefined4 tempVar4;\n  uint tempVar5;\n  uint tempVar6;\n  uint tempVar7;\n  undefined8 tempVar8;\n  \n  tempVar7 = (input2 << 1) >> 0x15;\n  tempVar6 = tempVar7 - 0x3ff;\n  tempVar3 = input2;\n  if ((int)tempVar6 < 0x14) {\n    if ((int)tempVar6 < 0) {\n      if ((input2 & 0x7fffffff | input1) == 0) {\n        return CONCAT44(input2,input1);\n      }\n      tempVar3 = input2 & 0xfffff | input1;\n      tempVar1 = ((int)input2 >> 0x1f) * -8;\n      tempVar2 = *(undefined4 *)(&DAT_08007430 + tempVar1);\n      tempVar4 = *(undefined4 *)(&DAT_08007434 + tempVar1);\n      tempVar8 = FUN_0800016c(input1,(-tempVar3 | tempVar3) >> 0xc & 0x80000 | input2 & 0xfffe0000,tempVar2,\n                           tempVar4,input1,input2,input3);\n      tempVar8 = FUN_08000168((int)tempVar8,(int)((ulonglong)tempVar8 >> 0x20),tempVar2,tempVar4);\n      return CONCAT44((uint)((ulonglong)tempVar8 >> 0x20) & 0x7fffffff | input2 & 0x80000000,\n                      (int)tempVar8);\n    }\n    tempVar7 = 0xfffff >> (tempVar6 & 0xff);\n    if ((input2 & tempVar7 | input1) == 0) {\n      return CONCAT44(input2,input1);\n    }\n    tempVar7 = tempVar7 >> 1;\n    tempVar5 = input2 & tempVar7 | input1;\n    if (tempVar5 != 0) {\n      if (tempVar6 == 0x13) {\n        tempVar5 = 0x80000000;\n      }\n      else {\n        tempVar5 = 0;\n      }\n      tempVar3 = 0x40000 >> (tempVar6 & 0xff) | input2 & ~tempVar7;\n    }\n  }\n  else {\n    if (0x33 < (int)tempVar6) {\n      if (tempVar6 != 0x400) {\n        return CONCAT44(input2,input1);\n      }\n      tempVar8 = FUN_0800016c();\n      return tempVar8;\n    }\n    tempVar7 = tempVar7 - 0x413;\n    tempVar6 = 0xffffffff >> (tempVar7 & 0xff);\n    if ((input1 & tempVar6) == 0) {\n      return CONCAT44(input2,input1);\n    }\n    tempVar6 = tempVar6 >> 1;\n    tempVar5 = input1;\n    if ((input1 & tempVar6) != 0) {\n      tempVar5 = 0x40000000 >> (tempVar7 & 0xff) | input1 & ~tempVar6;\n    }\n  }\n  tempVar1 = ((int)input2 >> 0x1f) * -8;\n  tempVar2 = *(undefined4 *)(&DAT_08007430 + tempVar1);\n  tempVar4 = *(undefined4 *)(&DAT_08007434 + tempVar1);\n  tempVar8 = FUN_0800016c(tempVar5,tempVar3,tempVar2,tempVar4,input1,input2,input3);\n  tempVar8 = FUN_08000168((int)tempVar8,(int)((ulonglong)tempVar8 >> 0x20),tempVar2,tempVar4);\n  return tempVar8;\n}\n\n",
            "renaming": {
                "FUN_080070b0": "calculate_result_080070b0",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "iVar1": "tempVar1",
                "uVar2": "tempVar2",
                "uVar3": "tempVar3",
                "uVar4": "tempVar4",
                "uVar5": "tempVar5",
                "uVar6": "tempVar6",
                "uVar7": "tempVar7",
                "uVar8": "tempVar8"
            },
            "calling": [
                "FUN_08005900"
            ],
            "called": [
                "FUN_08000168",
                "FUN_0800016c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080071c0": {
            "entrypoint": "0x080071c0",
            "current_name": "calculate_floating_point_value_080071c0",
            "code": "\nundefined8 calculateFloatingPointValue_080071c0(uint inputValue1,uint inputValue2,int offset,undefined4 param4)\n\n{\n  uint shiftedValue;\n  undefined4 result1;\n  int sum;\n  undefined4 result2;\n  uint upper32Bits;\n  undefined8 result;\n  \n  result = CONCAT44(inputValue2,inputValue1);\n  shiftedValue = (inputValue2 << 1) >> 0x15;\n  if (shiftedValue == 0) {\n    if ((inputValue2 & 0x7fffffff | inputValue1) == 0) {\n      return result;\n    }\n    result = FUN_080004d0(inputValue1,inputValue2,0,0x43500000);\n    if (-0xc351 < offset) {\n      shiftedValue = ((uint)((int)((ulonglong)result >> 0x20) << 1) >> 0x15) - 0x36;\n      goto LAB_08007210;\n    }\nLAB_080071ec:\n    result1 = 0xc2f8f359;\n    result2 = 0x1a56e1f;\n  }\n  else {\n    if (shiftedValue == 0x7ff) {\n      result = FUN_0800016c(inputValue1,inputValue2,inputValue1,inputValue2,param4);\n      return result;\n    }\nLAB_08007210:\n    upper32Bits = (uint)((ulonglong)result >> 0x20);\n    result1 = (undefined4)result;\n    sum = shiftedValue + offset;\n    if (sum < 0x7ff) {\n      if (0 < sum) {\n        return CONCAT44(upper32Bits & 0x800fffff | sum * 0x100000,result1);\n      }\n      if (sum + 0x35 < 0 == isSignedCarry(sum,0x35)) {\n        result = CONCAT44(upper32Bits & 0x800fffff | (sum + 0x36) * 0x100000,result1);\n        result1 = 0;\n        result2 = 0x3c900000;\n        goto LAB_0800722e;\n      }\n      if (offset < 0xc351) {\n        result = FUNC_0800729c(0xc2f8f359,0x1a56e1f,result1,upper32Bits);\n        goto LAB_080071ec;\n      }\n    }\n    result = FUNC_0800729c(0x8800759c,0x7e37e43c,result1,upper32Bits);\n    result1 = 0x8800759c;\n    result2 = 0x7e37e43c;\n  }\nLAB_0800722e:\n  result = FUN_080004d0((int)result,(int)((ulonglong)result >> 0x20),result1,result2);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080071c0": "calculate_floating_point_value_080071c0",
                "param_1": "inputValue1",
                "param_2": "inputValue2",
                "param_3": "offset",
                "param_4": "param4",
                "uVar1": "shiftedValue",
                "uVar2": "result1",
                "iVar3": "sum",
                "uVar4": "result2",
                "uVar5": "upper32Bits",
                "uVar6": "result",
                "SCARRY4": "isSignedCarry"
            },
            "calling": [
                "FUN_08006228"
            ],
            "called": [
                "FUN_080004d0",
                "FUN_0800016c",
                "FUN_0800729c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800729c": {
            "entrypoint": "0x0800729c",
            "current_name": "FUNC_0800729c",
            "code": "\nvoid FUNC_0800729c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800729c": "FUNC_0800729c"
            },
            "calling": [
                "FUN_080071c0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080072ac": {
            "entrypoint": "0x080072ac",
            "current_name": "get_data_value_080072ac",
            "code": "\nundefined4 get_data_value_080072ac(void)\n\n{\n  return DAT_200001c0;\n}\n\n",
            "renaming": {
                "FUN_080072ac": "get_data_value_080072ac"
            },
            "calling": [
                "FUN_08005900",
                "FUN_08005854",
                "FUN_08005bc8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080072b8": {
            "entrypoint": "0x080072b8",
            "current_name": "update_data_pointer_080072b8",
            "code": "\nvoid updateDataPointer_080072b8(int increment)\n\n{\n  if (DAT_200002b4 == (undefined *)0x0) {\n    DAT_200002b4 = &DAT_200016a0;\n  }\n  DAT_200002b4 = DAT_200002b4 + increment;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080072b8": "update_data_pointer_080072b8",
                "param_1": "increment"
            },
            "calling": [
                "FUN_0800581c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080072d4": {
            "entrypoint": "0x080072d4",
            "current_name": "FUNC_080072d4",
            "code": "\nvoid FUNC_080072d4(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080072d4": "FUNC_080072d4"
            },
            "calling": [
                "FUN_08000134",
                "FUN_08004fb4",
                "FUN_08000110"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080072e0": {
            "entrypoint": "0x080072e0",
            "current_name": "FUNC_080072e0",
            "code": "\nvoid FUNC_080072e0(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080072e0": "FUNC_080072e0"
            },
            "calling": [],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        }
    },
    "used_tokens": 166045,
    "layers": [
        [
            "FUN_08000110",
            "FUN_08000134",
            "FUN_08000150",
            "FUN_08000168",
            "FUN_0800016c",
            "FUN_08000404",
            "FUN_08000428",
            "FUN_080004d0",
            "FUN_080006ac",
            "FUN_08000724",
            "FUN_08000892",
            "FUN_08000904",
            "FUN_08000980",
            "FUN_08000990",
            "FUN_080009a0",
            "FUN_080009b4",
            "FUN_080009c8",
            "FUN_080009f0",
            "FUN_08000a04",
            "FUN_08000a30",
            "FUN_08000ad8",
            "FUN_08000adc",
            "FUN_08000c3c",
            "FUN_08000c44",
            "FUN_08000cec",
            "FUN_08000e54",
            "FUN_08000f9c",
            "FUN_08000ffc",
            "FUN_08001004",
            "FUN_08001014",
            "FUN_08001028",
            "FUN_08001050",
            "FUN_08001064",
            "FUN_08001078",
            "FUN_080010c4",
            "FUN_08001104",
            "FUN_08001128",
            "FUN_0800114c",
            "FUN_0800115c",
            "FUN_08001170",
            "FUN_08001194",
            "FUN_080011fc",
            "FUN_08001214",
            "FUN_08001240",
            "FUN_08001264",
            "FUN_08001424",
            "FUN_0800142e",
            "FUN_08001436",
            "FUN_08001460",
            "FUN_080014e2",
            "FUN_08001530",
            "FUN_080015e8",
            "FUN_080016f4",
            "FUN_08001754",
            "FUN_08001828",
            "FUN_08001938",
            "FUN_08001b58",
            "FUN_08002008",
            "FUN_0800209c",
            "FUN_08002214",
            "FUN_08002220",
            "FUN_08002250",
            "FUN_08002280",
            "FUN_080022d0",
            "FUN_08002324",
            "FUN_08002368",
            "FUN_080023d0",
            "FUN_08002404",
            "FUN_0800245c",
            "FUN_08002520",
            "FUN_08002538",
            "FUN_08002564",
            "FUN_080025a4",
            "FUN_080025e8",
            "FUN_08002724",
            "FUN_0800290c",
            "FUN_0800299a",
            "FUN_08002ad0",
            "FUN_08002b48",
            "FUN_08002bf0",
            "FUN_08002cb0",
            "FUN_08002d88",
            "FUN_08002ea0",
            "FUN_08002ec0",
            "FUN_08002ed4",
            "FUN_08002ee8",
            "FUN_08002f28",
            "FUN_08003034",
            "FUN_08003068",
            "FUN_08003298",
            "FUN_08003314",
            "FUN_08003320",
            "FUN_08003330",
            "FUN_08003eb0",
            "FUN_08003ec8",
            "FUN_08003f3c",
            "FUN_08003fc4",
            "FUN_08003fd0",
            "FUN_08003fdc",
            "FUN_08003fe8",
            "FUN_08003ff4",
            "FUN_08004028",
            "FUN_0800403c",
            "FUN_0800407c",
            "FUN_080040b8",
            "FUN_080040e8",
            "FUN_0800411c",
            "FUN_08004194",
            "FUN_080041ae",
            "FUN_080041c4",
            "FUN_0800426c",
            "FUN_08004300",
            "FUN_08004348",
            "FUN_08004384",
            "FUN_080043bc",
            "FUN_080043f0",
            "FUN_08004410",
            "FUN_08004434",
            "FUN_08004458",
            "FUN_08004490",
            "FUN_08004514",
            "FUN_0800458c",
            "FUN_0800483c",
            "FUN_08004a30",
            "FUN_08004a84",
            "FUN_08004c18",
            "FUN_08004c30",
            "FUN_08004c64",
            "FUN_08004c70",
            "FUN_08004c8c",
            "FUN_08004cac",
            "FUN_08004ccc",
            "FUN_08004d48",
            "FUN_08004d8c",
            "FUN_08004e14",
            "FUN_08004e7c",
            "FUN_08004f10",
            "thunk_FUN_0800115c",
            "FUN_08004fb4",
            "FUN_08004ffc",
            "FUN_08005044",
            "FUN_080050fc",
            "FUN_080052e4",
            "FUN_080053d4",
            "FUN_08005614",
            "FUN_08005630",
            "FUN_08005646",
            "FUN_0800567c",
            "FUN_08005714",
            "FUN_080057d0",
            "FUN_0800581c",
            "FUN_08005840",
            "FUN_08005854",
            "thunk_FUN_08006070",
            "FUN_08005900",
            "FUN_08005bc8",
            "FUN_08005c70",
            "FUN_08006070",
            "FUN_08006228",
            "FUN_08006c0c",
            "FUN_08006d68",
            "FUN_08007092",
            "FUN_0800709e",
            "FUN_080070a4",
            "FUN_080070b0",
            "FUN_080071c0",
            "FUN_080072ac",
            "FUN_080072b8"
        ]
    ],
    "locked_functions": []
}