{
    "functions": {
        "FUN_08000110": {
            "entrypoint": "0x08000110",
            "current_name": "initialize_flag_08000110",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0800011c) */\n\nundefined4 initialize_flag_08000110(undefined4 input)\n\n{\n  if ((char)DAT_20000228 == '\\0') {\n    DAT_20000228._0_1_ = '\\x01';\n  }\n  return input;\n}\n\n",
            "renaming": {
                "FUN_08000110": "initialize_flag_08000110",
                "param_1": "input"
            },
            "calling": [],
            "called": [
                "FUN_080072d4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08000110": {
                    "1": "initialize_flag_if_null",
                    "2": "update_flag",
                    "21": "initialize_flag"
                },
                "param_1": {
                    "13": "input",
                    "1": "input_data",
                    "12": "input_value",
                    "3": "value"
                },
                "DAT_20000228": {
                    "16": "flag",
                    "1": "status_flag"
                }
            }
        },
        "FUN_08000134": {
            "entrypoint": "0x08000134",
            "current_name": "concatenate_values_08000134",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0800013a) */\n\nundefined8 concatenate_values_08000134(undefined4 value1,undefined4 value2)\n\n{\n  return CONCAT44(value2,value1);\n}\n\n",
            "renaming": {
                "FUN_08000134": "concatenate_values_08000134",
                "param_1": "value1",
                "param_2": "value2"
            },
            "calling": [
                "FUN_08004fb4"
            ],
            "called": [
                "FUN_080072d4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08000134": {
                    "2": "concatenate_64bit",
                    "7": "concatenate_values",
                    "1": "concatenate_four_bytes",
                    "5": "concatenate_parameters",
                    "3": "concatenate_integers"
                },
                "param_1": {
                    "2": "param1",
                    "1": "first_byte",
                    "6": "value1",
                    "3": "first_parameter",
                    "4": "first_param"
                },
                "param_2": {
                    "2": "input_2",
                    "1": "value_2",
                    "6": "value2",
                    "4": "second_param",
                    "3": "second_integer"
                }
            }
        },
        "FUN_08000150": {
            "entrypoint": "0x08000150",
            "current_name": "find_end_of_string_08000150",
            "code": "\nchar * find_end_of_string_08000150(char *input_string)\n\n{\n  char current_char;\n  char *next_character;\n  char *current_char_ptr;\n  \n  current_char_ptr = input_string;\n  do {\n    next_character = current_char_ptr + 1;\n    current_char = *current_char_ptr;\n    current_char_ptr = next_character;\n  } while (current_char != '\\0');\n  return next_character + (-1 - (int)input_string);\n}\n\n",
            "renaming": {
                "FUN_08000150": "find_end_of_string_08000150",
                "param_1": "input_string",
                "pcVar3": "current_char_ptr",
                "pcVar2": "next_character",
                "cVar1": "current_char"
            },
            "calling": [
                "FUN_08004c8c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08000150": {
                    "1": "get_null_terminated_string_length",
                    "11": "find_end_of_string",
                    "2": "find_null_terminated_string",
                    "5": "find_string_length",
                    "6": "get_string_length"
                },
                "param_1": {
                    "7": "string",
                    "19": "input_string",
                    "1": "text",
                    "4": "str"
                },
                "pcVar3": {
                    "4": "current_char_ptr",
                    "3": "current_char",
                    "2": "current_position",
                    "1": "next_character"
                },
                "pcVar2": {
                    "1": "current_character",
                    "10": "next_character",
                    "5": "next_char_ptr",
                    "4": "next_char_pointer",
                    "8": "next_char",
                    "2": "next_character_pointer"
                },
                "cVar1": {
                    "8": "current_character",
                    "2": "current_char_value",
                    "17": "current_char"
                }
            }
        },
        "FUN_08000168": {
            "entrypoint": "0x08000168",
            "current_name": "calculate_result_08000168",
            "code": "\nulonglong calculate_result_08000168(uint input1,uint input2,uint input3,uint input4)\n\n{\n  int shift_amount1;\n  byte carry_bit;\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  uint temp1;\n  uint temp5;\n  int shift_amount2;\n  uint temp2;\n  uint temp6;\n  uint temp7;\n  uint temp6;\n  bool flag1;\n  bool flag2;\n  bool flag3;\n  \n  temp1 = input4 ^ 0x80000000;\n  temp2 = input2 << 1;\n  input4 = input4 << 1;\n  flag1 = ((input2 ^ temp1) & 0x7fffffff) == 0;\n  flag2 = flag1 && input1 == input3;\n  if (!flag1 || input1 != input3) {\n    flag2 = (temp2 | input1) == 0;\n  }\n  if (!flag2) {\n    flag2 = (input4 | input3) == 0;\n  }\n  shift_amount2 = (int)temp2 >> 0x15;\n  if (!flag2) {\n    flag2 = shift_amount2 == -1;\n  }\n  shift_amount1 = (int)input4 >> 0x15;\n  if (!flag2) {\n    flag2 = shift_amount1 == -1;\n  }\n  if (flag2) {\n    if (shift_amount2 == -1 || shift_amount1 == -1) {\n      temp2 = temp1;\n      temp7 = input3;\n      if (shift_amount2 == -1) {\n        temp2 = input2;\n        temp7 = input1;\n      }\n      if (shift_amount2 != -1 || shift_amount1 != -1) {\n        input3 = temp7;\n        temp1 = temp2;\n      }\n      flag2 = (temp7 | temp2 << 0xc) == 0;\n      if (flag2) {\n        flag2 = (input3 | temp1 << 0xc) == 0;\n      }\n      if (flag2) {\n        flag2 = temp2 == temp1;\n      }\n      if (!flag2) {\n        temp2 = temp2 | 0x80000;\n      }\n      return combine_values(temp2,temp7);\n    }\n    if (((input2 ^ temp1) & 0x7fffffff) != 0 || input1 != input3) {\n      if ((temp2 | input1) == 0) {\n        input1 = input3;\n        input2 = temp1;\n      }\n      return combine_values(input2,input1);\n    }\n    if (input2 != temp1) {\n      return 0;\n    }\n    if (temp2 >> 0x15 == 0) {\n      flag2 = (input1 & 0x80000000) != 0;\n      temp1 = input2 * 2 + (uint)flag2;\n      if (check_carry(input2,input2) || check_carry(input2 * 2,(uint)flag2)) {\n        temp1 = temp1 | 0x80000000;\n      }\n      return combine_values(temp1,input1 << 1);\n    }\n    if (temp2 < 0xffc00000) {\n      return combine_values(input2 + 0x100000,input1);\n    }\n    input2 = input2 & 0x80000000;\nLAB_080003ac:\n    return (ulonglong)(input2 | 0x7ff00000) << 0x20;\n  }\n  temp2 = temp2 >> 0x15;\n  input4 = input4 >> 0x15;\n  temp7 = input4 - temp2;\n  flag2 = temp7 != 0;\n  if (input4 < temp2) {\n    temp7 = -temp7;\n  }\n  temp6 = input1;\n  temp5 = input2;\n  if (flag2 && temp2 <= input4) {\n    temp2 = temp2 + temp7;\n    temp6 = input3;\n    temp5 = temp1;\n    input3 = input1;\n    temp1 = input2;\n  }\n  if (0x36 < temp7) {\n    return combine_values(temp5,temp6);\n  }\n  temp2 = temp5 & 0xfffff | 0x100000;\n  if ((temp5 & 0x80000000) != 0) {\n    flag2 = temp6 != 0;\n    temp6 = -temp6;\n    temp2 = -temp2 - (uint)flag2;\n  }\n  temp5 = temp1 & 0xfffff | 0x100000;\n  if ((temp1 & 0x80000000) != 0) {\n    flag2 = input3 != 0;\n    input3 = -input3;\n    temp5 = -temp5 - (uint)flag2;\n  }\n  if (temp2 == temp7) {\n    temp5 = temp5 ^ 0x100000;\n    if (temp2 == 0) {\n      temp2 = temp2 ^ 0x100000;\n      temp2 = 1;\n    }\n    else {\n      temp7 = temp7 - 1;\n    }\n  }\n  temp1 = -temp7 + 0x20;\n  if ((int)temp7 < 0x21) {\n    temp6 = input3 << (temp1 & 0xff);\n    input3 = input3 >> (temp7 & 0xff);\n    temp1 = temp6 + input3;\n    temp3 = temp5 << (temp1 & 0xff);\n    temp1 = temp1 + temp3;\n    temp2 = temp2 + check_carry(temp6,input3) + ((int)temp5 >> (temp7 & 0xff)) +\n            (uint)check_carry(temp1,temp3);\n  }\n  else {\n    temp6 = temp5 << (-temp7 + 0x40 & 0xff);\n    if (input3 != 0) {\n      temp6 = temp6 | 2;\n    }\n    temp5 = (int)temp5 >> (temp7 - 0x20 & 0xff);\n    temp1 = temp6 + temp5;\n    temp2 = temp2 + ((int)temp5 >> 0x1f) + (uint)check_carry(temp6,temp5);\n  }\n  input2 = temp2 & 0x80000000;\n  temp7 = temp2;\n  if ((int)temp2 < 0) {\n    flag2 = temp6 == 0;\n    temp6 = -temp6;\n    temp7 = -temp1;\n    temp1 = -(uint)!flag2 - temp1;\n    temp7 = -(uint)(flag2 <= temp7) - temp2;\n  }\n  if (0xfffff < temp7) {\n    temp6 = temp2 - 1;\n    if (0x1fffff < temp7) {\n      temp6 = temp7 & 1;\n      temp7 = temp7 >> 1;\n      carry_bit = (byte)temp1;\n      temp1 = (uint)(temp6 != 0) << 0x1f | temp1 >> 1;\n      temp6 = (uint)(carry_bit & 1) << 0x1f | temp6 >> 1;\n      temp6 = temp2;\n      if (0xffbfffff < temp2 * 0x200000) goto LAB_080003ac;\n    }\nLAB_08000278:\n    flag2 = 0x7fffffff < temp6;\n    if (temp6 == 0x80000000) {\n      flag2 = (temp1 & 1) != 0;\n    }\n    return combine_values(temp7 + temp6 * 0x100000 + (uint)check_carry(temp1,(uint)flag2) | input2,\n                    temp1 + flag2);\n  }\n  flag1 = (temp6 & 0x80000000) != 0;\n  temp6 = temp6 << 1;\n  temp6 = temp1 * 2;\n  flag2 = check_carry(temp1,temp1);\n  temp1 = temp1 * 2 + (uint)flag1;\n  temp7 = temp7 * 2 + (uint)(flag2 || check_carry(temp6,(uint)flag1));\n  temp6 = temp2 - 2;\n  if ((temp7 & 0x100000) != 0) goto LAB_08000278;\n  temp5 = temp1;\n  temp2 = temp7;\n  if (temp7 == 0) {\n    temp5 = 0;\n    temp2 = temp1;\n  }\n  shift_amount2 = leading_zero_count(temp2);\n  if (temp7 == 0) {\n    shift_amount2 = shift_amount2 + 0x20;\n  }\n  temp7 = shift_amount2 - 0xb;\n  flag3 = subtract_borrow(temp7,0x20);\n  temp1 = shift_amount2 - 0x2b;\n  flag2 = (int)temp1 < 0;\n  flag1 = temp1 == 0;\n  if ((int)temp7 < 0x20) {\n    flag3 = subtract_carry(temp1,0xc);\n    shift_amount2 = shift_amount2 + -0x1f;\n    flag2 = shift_amount2 < 0;\n    flag1 = shift_amount2 == 0;\n    temp1 = temp7;\n    if (!flag1 && flag2 == flag3) {\n      temp5 = temp2 << (temp7 & 0xff);\n      temp2 = temp2 >> (0xcU - shift_amount2 & 0xff);\n      goto LAB_080002f0;\n    }\n  }\n  if (flag1 || flag2 != flag3) {\n    temp6 = 0x20 - temp1;\n  }\n  temp2 = temp2 << (temp1 & 0xff);\n  if (flag1 || flag2 != flag3) {\n    temp2 = temp2 | temp5 >> (temp6 & 0xff);\n  }\n  if (flag1 || flag2 != flag3) {\n    temp5 = temp5 << (temp1 & 0xff);\n  }\nLAB_080002f0:\n  if ((int)temp7 <= (int)temp6) {\n    return combine_values(temp2 + (temp6 - temp7) * 0x100000 | input2,temp5);\n  }\n  temp1 = ~(temp6 - temp7);\n  if ((int)temp1 < 0x1f) {\n    shift_amount2 = temp1 - 0x13;\n    if (shift_amount2 != 0 && shift_amount2 < 0 == subtract_carry(temp1 - 0x1f,0xc)) {\n      return combine_values(temp2,temp5 >> (0x20 - (0xcU - shift_amount2) & 0xff) | temp2 << (0xcU - shift_amount2 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    temp1 = temp1 + 1;\n    return combine_values(input2 | temp2 >> (temp1 & 0xff),\n                    temp5 >> (temp1 & 0xff) | temp2 << (0x20 - temp1 & 0xff));\n  }\n  return combine_values(temp2,temp2 >> (temp1 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_08000168": "calculate_result_08000168",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "iVar1": "shift_amount1",
                "bVar2": "carry_bit",
                "uVar3": "temp1",
                "uVar4": "temp2",
                "uVar5": "temp3",
                "uVar6": "temp1",
                "uVar7": "temp5",
                "iVar8": "shift_amount2",
                "uVar9": "temp2",
                "uVar10": "temp6",
                "uVar11": "temp7",
                "uVar12": "temp6",
                "bVar13": "flag1",
                "bVar14": "flag2",
                "bVar15": "flag3",
                "CARRY4": "check_carry",
                "CONCAT44": "combine_values",
                "LZCOUNT": "leading_zero_count",
                "SBORROW4": "subtract_borrow",
                "SCARRY4": "subtract_carry",
                "uVar1": "result"
            },
            "calling": [
                "FUN_08006d68",
                "FUN_08005c70",
                "FUN_080070b0",
                "FUN_08006c0c",
                "FUN_0800411c",
                "FUN_08006228",
                "FUN_08006070"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08000168": {
                    "2": "reverse_bits",
                    "1": "calculate_xor",
                    "3": "calculate",
                    "6": "calculate_result"
                },
                "param_1": {
                    "6": "input_1",
                    "3": "a",
                    "1": "input_a",
                    "2": "num1",
                    "16": "input1"
                },
                "param_2": {
                    "16": "input2",
                    "1": "value2",
                    "2": "num2",
                    "3": "b",
                    "6": "input_2"
                },
                "param_3": {
                    "6": "input_3",
                    "3": "c",
                    "1": "value3",
                    "16": "input3",
                    "2": "num3"
                },
                "param_4": {
                    "1": "operand4",
                    "6": "input_4",
                    "2": "num4",
                    "3": "d",
                    "16": "input4"
                },
                "iVar1": {
                    "1": "bit_count1",
                    "2": "var1"
                },
                "bVar2": {
                    "1": "temp2",
                    "3": "carry_bit",
                    "2": "bit"
                },
                "uVar3": {
                    "3": "temp_1",
                    "1": "result",
                    "8": "temp1",
                    "2": "sum1"
                },
                "uVar4": {
                    "1": "shift_result_1",
                    "3": "temp_2",
                    "2": "sum2",
                    "8": "temp2"
                },
                "uVar5": {
                    "1": "temp10",
                    "3": "var5",
                    "8": "temp3",
                    "2": "sum3"
                },
                "uVar6": {
                    "2": "var6",
                    "1": "temp_u_int4",
                    "7": "temp1",
                    "4": "temp4",
                    "3": "temp_4"
                },
                "uVar7": {
                    "5": "temp5",
                    "3": "temp_5",
                    "1": "var11",
                    "4": "result2",
                    "2": "var7"
                },
                "iVar8": {
                    "1": "result_2",
                    "2": "var8",
                    "3": "shift_amount2"
                },
                "uVar9": {
                    "1": "result_2",
                    "2": "temp_7",
                    "3": "temp2"
                },
                "uVar10": {
                    "2": "temp4",
                    "1": "shifted_b",
                    "4": "temp6"
                },
                "uVar11": {
                    "1": "result_2",
                    "2": "temp4",
                    "3": "temp7"
                },
                "uVar12": {
                    "1": "result4",
                    "3": "temp6",
                    "2": "temp3"
                },
                "bVar13": {
                    "1": "temp_bool1",
                    "4": "condition1",
                    "2": "flag2",
                    "6": "flag1",
                    "3": "is_equal"
                },
                "bVar14": {
                    "1": "is_condition2",
                    "4": "condition2",
                    "2": "condition_2",
                    "3": "is_zero",
                    "6": "flag2"
                },
                "bVar15": {
                    "1": "bool3",
                    "6": "flag3",
                    "2": "flag_3",
                    "4": "condition3"
                },
                "uVar16": {
                    "1": "temp7"
                },
                "CARRY4": {
                    "1": "check_carry"
                },
                "CONCAT44": {
                    "1": "combine_values"
                },
                "LZCOUNT": {
                    "1": "leading_zero_count"
                },
                "SBORROW4": {
                    "1": "subtract_borrow"
                },
                "SCARRY4": {
                    "1": "subtract_carry"
                },
                "BVar8": {
                    "1": "flag1"
                },
                "iVar2": {
                    "1": "byte_result"
                },
                "uVar1": {
                    "1": "result"
                },
                "bVar3": {
                    "1": "is_negative"
                },
                "bVar4": {
                    "1": "is_zero"
                },
                "bVar5": {
                    "1": "carry"
                },
                "uVar8": {
                    "1": "temp3"
                },
                "iVar16": {
                    "1": "bit_count"
                },
                "FIND_PRECISION": {
                    "1": "calculate_precision"
                }
            }
        },
        "FUN_0800016c": {
            "entrypoint": "0x0800016c",
            "current_name": "calculate_0800016c",
            "code": "\nulonglong calculate_0800016c(uint input1,uint input2,uint input3,uint input4)\n\n{\n  int temp1;\n  byte carry;\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  int shift1;\n  uint shifted_input2;\n  uint shifted_input4;\n  uint shifted_input4;\n  uint difference;\n  uint carry;\n  uint result;\n  bool is_equal;\n  bool is_zero;\n  bool is_negative;\n  \n  shifted_input2 = input2 << 1;\n  shifted_input4 = input4 << 1;\n  is_equal = ((input2 ^ input4) & 0x7fffffff) == 0;\n  is_zero = is_equal && input1 == input3;\n  if (!is_equal || input1 != input3) {\n    is_zero = (shifted_input2 | input1) == 0;\n  }\n  if (!is_zero) {\n    is_zero = (shifted_input4 | input3) == 0;\n  }\n  shift1 = (int)shifted_input2 >> 0x15;\n  if (!is_zero) {\n    is_zero = shift1 == -1;\n  }\n  temp1 = (int)shifted_input4 >> 0x15;\n  if (!is_zero) {\n    is_zero = temp1 == -1;\n  }\n  if (is_zero) {\n    if (shift1 == -1 || temp1 == -1) {\n      shifted_input4 = input4;\n      shifted_input2 = input3;\n      if (shift1 == -1) {\n        shifted_input4 = input2;\n        shifted_input2 = input1;\n      }\n      if (shift1 != -1 || temp1 != -1) {\n        input3 = shifted_input2;\n        input4 = shifted_input4;\n      }\n      is_zero = (shifted_input2 | shifted_input4 << 0xc) == 0;\n      if (is_zero) {\n        is_zero = (input3 | input4 << 0xc) == 0;\n      }\n      if (is_zero) {\n        is_zero = shifted_input4 == input4;\n      }\n      if (!is_zero) {\n        shifted_input4 = shifted_input4 | 0x80000;\n      }\n      return CONCAT44(shifted_input4,shifted_input2);\n    }\n    if (((input2 ^ input4) & 0x7fffffff) != 0 || input1 != input3) {\n      if ((shifted_input2 | input1) == 0) {\n        input1 = input3;\n        input2 = input4;\n      }\n      return CONCAT44(input2,input1);\n    }\n    if (input2 != input4) {\n      return 0;\n    }\n    if (shifted_input2 >> 0x15 == 0) {\n      is_zero = (input1 & 0x80000000) != 0;\n      shifted_input4 = input2 * 2 + (uint)is_zero;\n      if (CARRY4(input2,input2) || CARRY4(input2 * 2,(uint)is_zero)) {\n        shifted_input4 = shifted_input4 | 0x80000000;\n      }\n      return CONCAT44(shifted_input4,input1 << 1);\n    }\n    if (shifted_input2 < 0xffc00000) {\n      return CONCAT44(input2 + 0x100000,input1);\n    }\n    input2 = input2 & 0x80000000;\nLAB_080003ac:\n    return (ulonglong)(input2 | 0x7ff00000) << 0x20;\n  }\n  shifted_input2 = shifted_input2 >> 0x15;\n  shifted_input4 = shifted_input4 >> 0x15;\n  difference = shifted_input4 - shifted_input2;\n  is_zero = difference != 0;\n  if (shifted_input4 < shifted_input2) {\n    difference = -difference;\n  }\n  shifted_input4 = input1;\n  temp3 = input2;\n  if (is_zero && shifted_input2 <= shifted_input4) {\n    shifted_input2 = shifted_input2 + difference;\n    shifted_input4 = input3;\n    temp3 = input4;\n    input3 = input1;\n    input4 = input2;\n  }\n  if (0x36 < difference) {\n    return CONCAT44(temp3,shifted_input4);\n  }\n  shifted_input4 = temp3 & 0xfffff | 0x100000;\n  if ((temp3 & 0x80000000) != 0) {\n    is_zero = shifted_input4 != 0;\n    shifted_input4 = -shifted_input4;\n    shifted_input4 = -shifted_input4 - (uint)is_zero;\n  }\n  temp3 = input4 & 0xfffff | 0x100000;\n  if ((input4 & 0x80000000) != 0) {\n    is_zero = input3 != 0;\n    input3 = -input3;\n    temp3 = -temp3 - (uint)is_zero;\n  }\n  if (shifted_input2 == difference) {\n    temp3 = temp3 ^ 0x100000;\n    if (shifted_input2 == 0) {\n      shifted_input4 = shifted_input4 ^ 0x100000;\n      shifted_input2 = 1;\n    }\n    else {\n      difference = difference - 1;\n    }\n  }\n  result = -difference + 0x20;\n  if ((int)difference < 0x21) {\n    carry = input3 << (result & 0xff);\n    input3 = input3 >> (difference & 0xff);\n    temp1 = shifted_input4 + input3;\n    temp2 = temp3 << (result & 0xff);\n    result = temp1 + temp2;\n    shifted_input4 = shifted_input4 + CARRY4(shifted_input4,input3) + ((int)temp3 >> (difference & 0xff)) +\n            (uint)CARRY4(temp1,temp2);\n  }\n  else {\n    carry = temp3 << (-difference + 0x40 & 0xff);\n    if (input3 != 0) {\n      carry = carry | 2;\n    }\n    temp3 = (int)temp3 >> (difference - 0x20 & 0xff);\n    result = shifted_input4 + temp3;\n    shifted_input4 = shifted_input4 + ((int)temp3 >> 0x1f) + (uint)CARRY4(shifted_input4,temp3);\n  }\n  input2 = shifted_input4 & 0x80000000;\n  difference = shifted_input4;\n  if ((int)shifted_input4 < 0) {\n    is_zero = carry == 0;\n    carry = -carry;\n    difference = -result;\n    result = -(uint)!is_zero - result;\n    difference = -(uint)(is_zero <= difference) - shifted_input4;\n  }\n  if (0xfffff < difference) {\n    shifted_input4 = shifted_input2 - 1;\n    if (0x1fffff < difference) {\n      shifted_input4 = difference & 1;\n      difference = difference >> 1;\n      carry = (byte)result;\n      result = (uint)(shifted_input4 != 0) << 0x1f | result >> 1;\n      carry = (uint)(carry & 1) << 0x1f | carry >> 1;\n      shifted_input4 = shifted_input2;\n      if (0xffbfffff < shifted_input2 * 0x200000) goto LAB_080003ac;\n    }\nLAB_08000278:\n    is_zero = 0x7fffffff < carry;\n    if (carry == 0x80000000) {\n      is_zero = (result & 1) != 0;\n    }\n    return CONCAT44(difference + shifted_input4 * 0x100000 + (uint)CARRY4(result,(uint)is_zero) | input2,\n                    result + is_zero);\n  }\n  is_equal = (carry & 0x80000000) != 0;\n  carry = carry << 1;\n  shifted_input4 = result * 2;\n  is_zero = CARRY4(result,result);\n  result = result * 2 + (uint)is_equal;\n  difference = difference * 2 + (uint)(is_zero || CARRY4(shifted_input4,(uint)is_equal));\n  shifted_input4 = shifted_input2 - 2;\n  if ((difference & 0x100000) != 0) goto LAB_08000278;\n  temp3 = result;\n  shifted_input2 = difference;\n  if (difference == 0) {\n    temp3 = 0;\n    shifted_input2 = result;\n  }\n  shift1 = LZCOUNT(shifted_input2);\n  if (difference == 0) {\n    shift1 = shift1 + 0x20;\n  }\n  result = shift1 - 0xb;\n  is_negative = SBORROW4(result,0x20);\n  difference = shift1 - 0x2b;\n  is_zero = (int)difference < 0;\n  is_equal = difference == 0;\n  if ((int)result < 0x20) {\n    is_negative = SCARRY4(difference,0xc);\n    shift1 = shift1 + -0x1f;\n    is_zero = shift1 < 0;\n    is_equal = shift1 == 0;\n    difference = result;\n    if (!is_equal && is_zero == is_negative) {\n      temp3 = shifted_input2 << (result & 0xff);\n      shifted_input2 = shifted_input2 >> (0xcU - shift1 & 0xff);\n      goto LAB_080002f0;\n    }\n  }\n  if (is_equal || is_zero != is_negative) {\n    carry = 0x20 - difference;\n  }\n  shifted_input2 = shifted_input2 << (difference & 0xff);\n  if (is_equal || is_zero != is_negative) {\n    shifted_input2 = shifted_input2 | temp3 >> (carry & 0xff);\n  }\n  if (is_equal || is_zero != is_negative) {\n    temp3 = temp3 << (difference & 0xff);\n  }\nLAB_080002f0:\n  if ((int)result <= (int)shifted_input4) {\n    return CONCAT44(shifted_input2 + (shifted_input4 - result) * 0x100000 | input2,temp3);\n  }\n  difference = ~(shifted_input4 - result);\n  if ((int)difference < 0x1f) {\n    shift1 = difference - 0x13;\n    if (shift1 != 0 && shift1 < 0 == SCARRY4(difference - 0x1f,0xc)) {\n      return CONCAT44(shifted_input4,temp3 >> (0x20 - (0xcU - shift1) & 0xff) | shifted_input2 << (0xcU - shift1 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    difference = difference + 1;\n    return CONCAT44(input2 | shifted_input2 >> (difference & 0xff),\n                    temp3 >> (difference & 0xff) | shifted_input2 << (0x20 - difference & 0xff));\n  }\n  return CONCAT44(shifted_input4,shifted_input2 >> (difference - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_0800016c": "calculate_0800016c",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "bVar2": "carry",
                "uVar3": "temp1",
                "uVar4": "temp2",
                "uVar5": "temp3",
                "iVar6": "shift1",
                "uVar7": "shifted_input2",
                "uVar8": "shifted_input4",
                "uVar9": "shifted_input4",
                "uVar10": "difference",
                "uVar11": "carry",
                "uVar12": "result",
                "bVar13": "is_equal",
                "bVar14": "is_zero",
                "bVar15": "is_negative",
                "iVar1": "temp1"
            },
            "calling": [
                "FUN_080071c0",
                "FUN_08006d68",
                "FUN_08005c70",
                "FUN_080070b0",
                "FUN_08006c0c",
                "FUN_08006228",
                "FUN_08006070"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800016c": {
                    "2": "calculate_result",
                    "1": "simplified_calculation",
                    "5": "calculate"
                },
                "param_1": {
                    "4": "input_1",
                    "1": "input_value1",
                    "2": "a",
                    "16": "input1"
                },
                "param_2": {
                    "16": "input2",
                    "1": "divisor1",
                    "2": "b",
                    "4": "input_2"
                },
                "param_3": {
                    "4": "input_3",
                    "1": "num3",
                    "2": "c",
                    "16": "input3"
                },
                "param_4": {
                    "1": "operand4",
                    "4": "input_4",
                    "2": "d",
                    "16": "input4"
                },
                "bVar2": {
                    "2": "temp2",
                    "1": "bit",
                    "5": "carry",
                    "4": "carry_bit"
                },
                "uVar3": {
                    "1": "addition_result",
                    "11": "temp1",
                    "3": "temp_1",
                    "2": "temp3"
                },
                "uVar4": {
                    "1": "temp_var4",
                    "2": "temp4",
                    "3": "temp_2",
                    "11": "temp2"
                },
                "uVar5": {
                    "2": "temp5",
                    "1": "param_2_mod",
                    "8": "temp3"
                },
                "iVar6": {
                    "1": "temp4",
                    "2": "temp6"
                },
                "uVar7": {
                    "1": "temp3",
                    "3": "shifted_input_2",
                    "8": "shifted_input2",
                    "2": "temp1"
                },
                "uVar8": {
                    "1": "updated_value1",
                    "3": "result1",
                    "2": "temp4"
                },
                "uVar9": {
                    "1": "temp9",
                    "4": "shifted_input4",
                    "3": "result1",
                    "2": "temp2"
                },
                "uVar10": {
                    "1": "difference_abs",
                    "2": "diff",
                    "4": "result2",
                    "6": "difference"
                },
                "uVar11": {
                    "1": "temp9",
                    "3": "temp4",
                    "4": "carry"
                },
                "uVar12": {
                    "1": "result4",
                    "2": "temp5",
                    "3": "result"
                },
                "bVar13": {
                    "1": "var13",
                    "2": "is_same_sign",
                    "7": "is_equal"
                },
                "bVar14": {
                    "1": "is_var_modified",
                    "2": "check2",
                    "6": "is_zero",
                    "3": "is_result_zero"
                },
                "bVar15": {
                    "1": "comparison_3",
                    "2": "borrow",
                    "8": "is_negative"
                },
                "iVar1": {
                    "1": "shift_bits1",
                    "2": "temp1"
                },
                "uVar13": {
                    "1": "temp_check"
                },
                "uVar14": {
                    "1": "temp_check_shifted"
                },
                "uVar15": {
                    "1": "a_shifted_check"
                },
                "uVar16": {
                    "1": "shifted_input1_after_overflow_check"
                },
                "uVar17": {
                    "1": "temp_result_high"
                },
                "uVar18": {
                    "1": "shifted_input3_after_overflow_check"
                },
                "uVar2": {
                    "1": "carried_output1"
                },
                "uVar6": {
                    "1": "carried_output2"
                },
                "uVar19": {
                    "1": "input1_result_after_overflow_check"
                },
                "uVar20": {
                    "1": "addition1_after_overflow_check"
                },
                "uVar21": {
                    "1": "addition2_after_overflow_check"
                },
                "uVar22": {
                    "1": "sum_after_overflow_check"
                },
                "uVar23": {
                    "1": "shifted_input2_sign_after_overflow_check"
                },
                "uVar24": {
                    "1": "input2_result_after_overflow_check"
                },
                "uVar25": {
                    "1": "divided_difference_after_overflow_check"
                },
                "uVar26": {
                    "1": "divided_input2_result_after_overflow_check"
                },
                "uVar27": {
                    "1": "is_negative_after_overflow_check"
                },
                "uVar28": {
                    "1": "is_overflow_after_overflow_check"
                },
                "iVar29": {
                    "1": "leading_zero_count"
                },
                "iVar30": {
                    "1": "trailing_zero_count"
                }
            }
        },
        "FUN_08000404": {
            "entrypoint": "0x08000404",
            "current_name": "reverse_bits_08000404",
            "code": "\nulonglong reverse_bits_08000404(uint input)\n\n{\n  uint shifted_value;\n  uint abs_input;\n  uint shift_amount;\n  int leading_zeros;\n  uint total_bits;\n  uint sign_bit;\n  uint remaining_bits;\n  bool is_negative;\n  bool is_zero;\n  bool overflow;\n  \n  if (input == 0) {\n    decoded_value 0;\n  }\n  sign_bit = input & 0x80000000;\n  abs_input = input;\n  if ((int)sign_bit < 0) {\n    abs_input = -input;\n  }\n  shifted_value = 0;\n  leading_zeros = count_leading_zeros(abs_input);\n  total_bits = leading_zeros + 0x15;\n  overflow = SBORROW4(total_bits,0x20);\n  shift_amount = leading_zeros - 0xb;\n  is_negative = (int)shift_amount < 0;\n  is_zero = shift_amount == 0;\n  if (total_bits < 0x20) {\n    overflow = SCARRY4(shift_amount,0xc);\n    is_negative = false;\n    is_zero = leading_zeros + 1 == 0;\n    shift_amount = total_bits;\n    if (!is_zero && overflow == false) {\n      shifted_value = abs_input << total_bits;\n      abs_input = abs_input >> (0xcU - (leading_zeros + 1) & 0xff);\n      goto perform_shift;\n    }\n  }\n  if (is_zero || is_negative != overflow) {\n    remaining_bits = 0x20 - shift_amount;\n  }\n  abs_input = abs_input << (shift_amount & 0xff);\n  if (is_zero || is_negative != overflow) {\n    abs_input = abs_input | 0U >> (remaining_bits & 0xff);\n  }\n  if (is_zero || is_negative != overflow) {\n    shifted_value = 0 << (shift_amount & 0xff);\n  }\nperform_shift:\n  if (total_bits < 0x433) {\n    decoded_value combine_results(abs_input + (0x432 - total_bits) * 0x100000 | sign_bit,shifted_value);\n  }\n  shift_amount = ~(0x432 - total_bits);\n  if (0x1e < (int)shift_amount) {\n    decoded_value combine_results(input,abs_input >> (shift_amount - 0x1f & 0xff)) & 0x80000000ffffffff;\n  }\n  leading_zeros = shift_amount - 0x13;\n  if (leading_zeros == 0 || leading_zeros < 0 != SCARRY4(shift_amount - 0x1f,0xc)) {\n    shift_amount = shift_amount + 1;\n    decoded_value combine_results(sign_bit | abs_input >> (shift_amount & 0xff),\n                    shifted_value >> (shift_amount & 0xff) | abs_input << (0x20 - shift_amount & 0xff));\n  }\n  decoded_value combine_results(input,shifted_value >> (0x20 - (0xcU - leading_zeros) & 0xff) | abs_input << (0xcU - leading_zeros & 0xff))\n         & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_08000404": "reverse_bits_08000404",
                "param_1": "input",
                "uVar1": "shifted_value",
                "uVar2": "abs_input",
                "uVar3": "shift_amount",
                "uVar5": "total_bits",
                "uVar6": "sign_bit",
                "iVar4": "leading_zeros",
                "bVar7": "is_negative",
                "bVar8": "is_zero",
                "bVar9": "overflow",
                "in_r12": "remaining_bits",
                "LAB_080002f0": "perform_shift",
                "CONCAT44": "combine_results",
                "LZCOUNT": "count_leading_zeros",
                "return": "decoded_value"
            },
            "calling": [
                "FUN_08006228"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08000404": {
                    "4": "shift_and_combine",
                    "1": "perform_shift_operation",
                    "2": "bitwise_shift",
                    "8": "reverse_bits"
                },
                "param_1": {
                    "20": "input",
                    "2": "num",
                    "5": "input_value",
                    "1": "number"
                },
                "uVar1": {
                    "1": "count_set_bits",
                    "7": "shifted_value",
                    "5": "count",
                    "3": "shift_count",
                    "4": "bit_count"
                },
                "uVar2": {
                    "1": "abs_num",
                    "6": "abs_value",
                    "15": "abs_input"
                },
                "uVar3": {
                    "1": "adjusted_shift_amount",
                    "2": "shift_amt",
                    "17": "shift_amount",
                    "4": "shift"
                },
                "uVar5": {
                    "1": "combined_shift",
                    "2": "adjusted_shift_amount",
                    "6": "total_bits",
                    "4": "shift_amount",
                    "3": "final_shift_amount"
                },
                "uVar6": {
                    "1": "temp2",
                    "23": "sign_bit"
                },
                "iVar4": {
                    "1": "bit_count",
                    "2": "leading_zeroes",
                    "22": "leading_zeros"
                },
                "bVar7": {
                    "1": "leading_zeros_less",
                    "23": "is_negative"
                },
                "bVar8": {
                    "1": "leading_zeros_equal",
                    "24": "is_zero"
                },
                "bVar9": {
                    "1": "has_carry",
                    "4": "carry",
                    "6": "is_overflow",
                    "5": "carry_flag"
                },
                "in_r12": {
                    "2": "temp",
                    "16": "remaining_bits",
                    "1": "extra_bits",
                    "3": "remaining_shift"
                },
                "LAB_080002f0": {
                    "1": "perform_shift"
                },
                "CONCAT44": {
                    "1": "combine"
                },
                "0x432": {
                    "1": "bit_limit"
                },
                "0x20": {
                    "2": "bit_length"
                },
                "0x1e": {
                    "1": "bit_diff_max"
                },
                "0x13": {
                    "1": "diff_const"
                },
                "DAT_": {
                    "1": "same"
                },
                "uVarUndef1": {
                    "1": "temp1"
                },
                "uVarUndef2": {
                    "1": "temp2"
                },
                "LZCOUNT": {
                    "1": "count_leading_zeros"
                },
                "return": {
                    "1": "decoded_value"
                },
                "uVar4": {
                    "1": "result"
                },
                "uVar7": {
                    "1": "negative_mask"
                },
                "uVar8": {
                    "1": "negative_sign_extension"
                },
                "uVar9": {
                    "1": "shifted_result"
                },
                "uVar10": {
                    "1": "shifted_value_and_result"
                },
                "0x80000000": {
                    "1": "sign_mask"
                },
                "0x15": {
                    "1": "leadingzeros_offset"
                },
                "0xb": {
                    "1": "shift_offset"
                },
                "0xc": {
                    "1": "total_bits_offset"
                },
                "0x433": {
                    "1": "max_bit_length"
                },
                "0x1f": {
                    "1": "shift_bit_offset"
                },
                "0x1": {
                    "1": "one"
                }
            }
        },
        "FUN_08000428": {
            "entrypoint": "0x08000428",
            "current_name": "reverse_bits_08000428",
            "code": "\nulonglong reverse_bits_08000428(uint input,undefined4 param2,undefined4 param3,uint mask)\n\n{\n  uint sign_bit;\n  uint shifted_input;\n  uint result;\n  uint shifted_input;\n  uint shifted_input;\n  int count;\n  uint shift_amount;\n  uint remaining_bits;\n  bool is_zero;\n  bool is_ff000000;\n  bool carry_flag;\n  \n  shifted_input = input << 1;\n  is_ff000000 = shifted_input == 0;\n  sign_bit = (uint)((input & 0x80000000) != 0) << 0x1f;\n  shifted_input = (uint)((int)shifted_input >> 3) >> 1;\n  result = sign_bit | shifted_input;\n  input = input << 0x1d;\n  if (!is_ff000000) {\n    mask = shifted_input & 0xff000000;\n    is_ff000000 = mask == 0;\n  }\n  if (!is_ff000000) {\n    is_ff000000 = mask == 0xff000000;\n  }\n  if (!is_ff000000) {\n    return CONCAT44(result,input) ^ 0x3800000000000000;\n  }\n  if (shifted_input == 0 || mask == 0xff000000) {\n    return CONCAT44(result,input);\n  }\n  shifted_input = input;\n  shifted_input = shifted_input;\n  if (shifted_input == 0) {\n    shifted_input = 0;\n    shifted_input = input;\n  }\n  count = LZCOUNT(shifted_input);\n  if (shifted_input == 0) {\n    count = count + 0x20;\n  }\n  shift_amount = count - 0xb;\n  carry_flag = SBORROW4(shift_amount,0x20);\n  shifted_input = count - 0x2b;\n  is_ff000000 = (int)shifted_input < 0;\n  is_zero = shifted_input == 0;\n  if ((int)shift_amount < 0x20) {\n    carry_flag = SCARRY4(shifted_input,0xc);\n    count = count + -0x1f;\n    is_ff000000 = count < 0;\n    is_zero = count == 0;\n    shifted_input = shift_amount;\n    if (!is_zero && is_ff000000 == carry_flag) {\n      shifted_input = shifted_input << (shift_amount & 0xff);\n      shifted_input = shifted_input >> (0xcU - count & 0xff);\n      goto LAB_080002f0;\n    }\n  }\n  if (is_zero || is_ff000000 != carry_flag) {\n    remaining_bits = 0x20 - shifted_input;\n  }\n  shifted_input = shifted_input << (shifted_input & 0xff);\n  if (is_zero || is_ff000000 != carry_flag) {\n    shifted_input = shifted_input | shifted_input >> (remaining_bits & 0xff);\n  }\n  if (is_zero || is_ff000000 != carry_flag) {\n    shifted_input = shifted_input << (shifted_input & 0xff);\n  }\nLAB_080002f0:\n  if ((int)shift_amount < 0x381) {\n    return CONCAT44(shifted_input + (0x380 - shift_amount) * 0x100000 | sign_bit,shifted_input);\n  }\n  shifted_input = ~(0x380 - shift_amount);\n  if ((int)shifted_input < 0x1f) {\n    count = shifted_input - 0x13;\n    if (count != 0 && count < 0 == SCARRY4(shifted_input - 0x1f,0xc)) {\n      return CONCAT44(result,shifted_input >> (0x20 - (0xcU - count) & 0xff) | shifted_input << (0xcU - count & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    shifted_input = shifted_input + 1;\n    return CONCAT44(sign_bit | shifted_input >> (shifted_input & 0xff),\n                    shifted_input >> (shifted_input & 0xff) | shifted_input << (0x20 - shifted_input & 0xff));\n  }\n  return CONCAT44(result,shifted_input >> (shifted_input - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_08000428": "reverse_bits_08000428",
                "param_1": "input",
                "param_4": "mask",
                "uVar1": "sign_bit",
                "uVar2": "shifted_input",
                "uVar3": "result",
                "uVar4": "shifted_input",
                "uVar5": "shifted_input",
                "iVar6": "count",
                "uVar7": "shift_amount",
                "in_r12": "remaining_bits",
                "bVar8": "is_zero",
                "bVar9": "is_ff000000",
                "bVar10": "carry_flag",
                "param_2": "param2",
                "param_3": "param3"
            },
            "calling": [
                "FUN_0800411c",
                "FUN_08003330"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08000428": {
                    "1": "perform_operation",
                    "18": "reverse_bits"
                },
                "param_1": {
                    "23": "input",
                    "5": "input_value",
                    "1": "input_param"
                },
                "param_4": {
                    "1": "unk_param_3",
                    "16": "mask",
                    "5": "param4",
                    "2": "condition"
                },
                "uVar1": {
                    "1": "bit31_set",
                    "3": "sign_extension",
                    "2": "bit31",
                    "6": "sign_bit"
                },
                "uVar2": {
                    "1": "upper_bits",
                    "2": "temp1",
                    "4": "temp",
                    "6": "output",
                    "3": "result",
                    "9": "shifted_input"
                },
                "uVar3": {
                    "1": "bit31_shifted",
                    "2": "high_bits",
                    "3": "result_upper",
                    "11": "result"
                },
                "uVar4": {
                    "1": "shifted_input_2",
                    "2": "shift",
                    "3": "shifted",
                    "6": "shifted_input"
                },
                "uVar5": {
                    "1": "temp_number",
                    "4": "shifted_input2",
                    "8": "shifted_input"
                },
                "iVar6": {
                    "1": "num_bits",
                    "8": "bit_count",
                    "7": "leading_zeros",
                    "2": "shift_amount"
                },
                "uVar7": {
                    "1": "bit_diff",
                    "2": "shifted_bits",
                    "4": "shifted_amount",
                    "8": "shift_amount"
                },
                "in_r12": {
                    "1": "unk_var",
                    "9": "remaining_bits",
                    "2": "in_r12",
                    "7": "remainder"
                },
                "bVar8": {
                    "1": "branch1",
                    "9": "is_zero",
                    "2": "is_zero_shift",
                    "4": "is_negative"
                },
                "bVar9": {
                    "1": "is_full_range",
                    "2": "is_full_mask",
                    "3": "is_zero",
                    "4": "is_ff000000"
                },
                "bVar10": {
                    "2": "is_shift_amount_negative",
                    "1": "is_borrow",
                    "3": "is_negative",
                    "6": "carry_flag"
                },
                "param_2": {
                    "5": "param2",
                    "1": "param_2",
                    "2": "unused_param"
                },
                "param_3": {
                    "1": "unk_param_2",
                    "4": "param3",
                    "2": "unused_param"
                },
                "new_variable_name_1": {
                    "1": "shifted_masked_input"
                },
                "new_variable_name_2": {
                    "1": "shifted_mask"
                },
                "new_variable_name_3": {
                    "1": "shifted_input_result"
                },
                "new_variable_name_4": {
                    "1": "shifted_input_result_masked"
                },
                "new_variable_name_5": {
                    "1": "shifted_input_result_masked_shifted"
                },
                "new_variable_name_6": {
                    "1": "shifted_input_result_shifted"
                },
                "new_variable_name_7": {
                    "1": "result2"
                },
                "concatValue": {
                    "1": "concatenation_value"
                }
            }
        },
        "FUN_080004d0": {
            "entrypoint": "0x080004d0",
            "current_name": "calculate_result_080004d0",
            "code": "\nulonglong calculate_result_080004d0(undefined4 input1,uint input2,uint input3,uint input4)\n\n{\n  ulonglong result;\n  longlong result2;\n  uint temp3;\n  uint temp4;\n  int temp3;\n  uint temp4;\n  uint temp5;\n  uint temp8;\n  uint temp7;\n  bool flag1;\n  bool flag2;\n  bool flag3;\n  ulonglong combined_input;\n  \n  combined_input = CONCAT44(input2,input1);\n  temp8 = 0x7ff;\n  temp4 = input2 >> 0x14 & 0x7ff;\n  flag1 = temp4 == 0;\n  if (!flag1) {\n    temp5 = input4 >> 0x14 & 0x7ff;\n    flag1 = temp5 == 0;\n  }\n  if (!flag1) {\n    flag1 = temp4 == 0x7ff;\n  }\n  if (!flag1) {\n    flag1 = temp5 == 0x7ff;\n  }\n  if (flag1) {\n    combined_input = FUN_080006ac();\n  }\n  temp3 = (uint)(combined_input >> 0x20);\n  temp3 = temp4 + temp5;\n  temp4 = temp3 ^ input4;\n  temp3 = temp3 & ~(temp8 << 0x15);\n  input4 = input4 & ~(temp8 << 0x15);\n  flag1 = ((uint)combined_input | temp3 << 0xc) == 0;\n  if (!flag1) {\n    flag1 = (input3 | input4 << 0xc) == 0;\n  }\n  temp3 = temp3 | 0x100000;\n  input4 = input4 | 0x100000;\n  if (flag1) {\n    input3 = (uint)combined_input | input3;\n    input4 = (temp4 & 0x80000000 | temp3) ^ input4;\n    temp4 = temp8 >> 1;\n    flag3 = SBORROW4(temp3,temp4);\n    temp4 = temp3 - temp4;\n    flag1 = temp4 == 0;\n    temp3 = temp4;\n    if (!flag1 && (int)temp4 <= temp3) {\n      flag3 = SBORROW4(temp8,temp4);\n      temp3 = temp8 - temp4;\n      flag1 = temp8 == temp4;\n    }\n    if (!flag1 && (int)temp3 < 0 == flag3) {\n      input4 = input4 | temp4 * 0x100000;\n    }\n    if (!flag1 && (int)temp3 < 0 == flag3) {\n      return CONCAT44(input4,input3);\n    }\n    input4 = input4 | 0x100000;\n    temp8 = 0;\n    flag3 = SBORROW4(temp4,1);\n    temp4 = temp4 - 1;\n    flag1 = temp4 == 0;\n    temp4 = temp4;\n  }\n  else {\n    result = (combined_input & 0xffffffff) * (ulonglong)input3;\n    combined_input = (combined_input & 0xffffffff) * (ulonglong)input4 +\n             (ulonglong)temp3 * (ulonglong)input3 + (result >> 0x20);\n    temp7 = (uint)combined_input;\n    result2 = (ulonglong)temp3 * (ulonglong)input4 + (combined_input >> 0x20);\n    temp8 = (uint)result2;\n    temp3 = (uint)((ulonglong)result2 >> 0x20);\n    if ((int)result != 0) {\n      temp7 = temp7 | 1;\n    }\n    temp4 = (temp3 + -0x3ff) - (uint)(temp3 < 0x200);\n    if (temp3 < 0x200) {\n      flag1 = (temp7 & 0x80000000) != 0;\n      temp7 = temp7 << 1;\n      result2 = CONCAT44(temp3 * 2 + (uint)(CARRY4(temp8,temp8) || CARRY4(temp8 * 2,(uint)flag1)),\n                       temp8 * 2 + (uint)flag1);\n    }\n    input4 = temp4 & 0x80000000 | (int)((ulonglong)result2 >> 0x20) << 0xb | (uint)result2 >> 0x15;\n    input3 = (uint)result2 << 0xb | temp7 >> 0x15;\n    temp8 = temp7 * 0x800;\n    flag2 = 0xfc < temp4;\n    flag3 = SBORROW4(temp4,0xfd);\n    temp3 = temp4 - 0xfd;\n    flag1 = temp3 == 0;\n    temp4 = temp3;\n    if (flag2 && !flag1) {\n      flag2 = 0x6ff < temp3;\n      flag3 = SBORROW4(temp3,0x700);\n      temp4 = temp4 - 0x7fd;\n      flag1 = temp3 == 0x700;\n    }\n    if (!flag2 || flag1) {\n      flag1 = 0x7fffffff < temp8;\n      if (temp8 == 0x80000000) {\n        flag1 = (temp7 >> 0x15 & 1) != 0;\n      }\n      return CONCAT44(input4 + temp4 * 0x100000 + (uint)CARRY4(input3,(uint)flag1),input3 + flag1\n                     );\n    }\n  }\n  if (!flag1 && (int)temp4 < 0 == flag3) {\n    return (ulonglong)(input4 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  flag2 = SCARRY4(temp4,0x36);\n  flag1 = (int)(temp4 + 0x36) < 0;\n  flag3 = temp4 == 0xffffffca;\n  if (flag3 || flag1 != flag2) {\n    input3 = 0;\n  }\n  if (flag3 || flag1 != flag2) {\n    input4 = input4 & 0x80000000;\n  }\n  if (flag3 || flag1 != flag2) {\n    return CONCAT44(input4,input3);\n  }\n  temp4 = -temp4;\n  temp3 = temp4 - 0x20;\n  if (0x1f < (int)temp4) {\n    temp4 = input3 >> (temp3 & 0xff) | input4 << (0x20 - temp3 & 0xff);\n    temp4 = (input4 >> (temp3 & 0xff) & ~((input4 & 0x80000000) >> (temp3 & 0xff))) -\n            ((int)temp4 >> 0x1f);\n    if ((temp8 | input3 << (0x20 - temp3 & 0xff) | temp4 << 1) == 0) {\n      temp4 = temp4 & ~(temp4 >> 0x1f);\n    }\n    return CONCAT44(input4,temp4) & 0x80000000ffffffff;\n  }\n  temp3 = temp4 - 0x14;\n  if (temp3 == 0 || temp3 < 0 != SCARRY4(temp3,0xc)) {\n    temp7 = input3 << (temp4 + 0x20 & 0xff);\n    temp3 = input3 >> (temp4 & 0xff) | input4 << (temp4 + 0x20 & 0xff);\n    temp4 = temp3 + -((int)temp7 >> 0x1f);\n    if ((temp8 | temp7 << 1) == 0) {\n      temp4 = temp4 & ~(temp7 >> 0x1f);\n    }\n    return CONCAT44((input4 & 0x80000000) +\n                    ((input4 & 0x7fffffff) >> (temp4 & 0xff)) +\n                    (uint)CARRY4(temp3,-((int)temp7 >> 0x1f)),temp4);\n  }\n  temp4 = 0xc - temp3;\n  temp4 = input3 << (temp4 & 0xff);\n  temp4 = input3 >> (0x20 - temp4 & 0xff) | input4 << (temp4 & 0xff);\n  temp3 = temp4 + -((int)temp4 >> 0x1f);\n  if ((temp8 | temp4 << 1) == 0) {\n    temp3 = temp3 & ~(temp4 >> 0x1f);\n  }\n  return CONCAT44((input4 & 0x80000000) + (uint)CARRY4(temp4,-((int)temp4 >> 0x1f)),temp3);\n}\n\n",
            "renaming": {
                "FUN_080004d0": "calculate_result_080004d0",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "result",
                "lVar2": "result2",
                "uVar3": "temp3",
                "uVar4": "temp4",
                "iVar5": "temp3",
                "uVar6": "temp4",
                "unaff_r5": "temp5",
                "uVar7": "temp8",
                "uVar8": "temp7",
                "bVar9": "flag1",
                "bVar10": "flag2",
                "bVar11": "flag3",
                "uVar12": "combined_input"
            },
            "calling": [
                "FUN_080071c0",
                "FUN_08006d68",
                "FUN_08005c70",
                "FUN_08005900",
                "FUN_08006c0c",
                "FUN_0800411c",
                "FUN_08006228",
                "FUN_08003330"
            ],
            "called": [
                "FUN_080006ac"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080004d0": {
                    "3": "calculate_sum",
                    "7": "calculate_product",
                    "1": "compute_result",
                    "18": "calculate_result"
                },
                "param_1": {
                    "1": "input_a",
                    "2": "param1",
                    "4": "value1",
                    "20": "input1"
                },
                "param_2": {
                    "1": "input_2",
                    "20": "input2",
                    "4": "value2"
                },
                "param_3": {
                    "1": "input_value3",
                    "4": "value3",
                    "20": "input3"
                },
                "param_4": {
                    "1": "num3",
                    "4": "value4",
                    "20": "input4"
                },
                "uVar1": {
                    "1": "product",
                    "7": "result1",
                    "2": "result_1",
                    "11": "result"
                },
                "lVar2": {
                    "1": "param_3_temp",
                    "6": "temp",
                    "5": "temp_var",
                    "7": "temp2",
                    "2": "result_2"
                },
                "uVar3": {
                    "1": "partial_product_high",
                    "2": "result3",
                    "3": "temp_var2",
                    "6": "temp1",
                    "4": "var1",
                    "7": "temp3"
                },
                "uVar4": {
                    "1": "temp_b",
                    "3": "temp_var3",
                    "2": "result4",
                    "7": "temp4",
                    "6": "temp2",
                    "4": "var2"
                },
                "iVar5": {
                    "4": "var3",
                    "7": "temp3",
                    "1": "result_5",
                    "2": "temp_var4",
                    "3": "sum"
                },
                "uVar6": {
                    "2": "difference",
                    "7": "temp4",
                    "4": "var4",
                    "1": "result_6"
                },
                "unaff_r5": {
                    "7": "temp7",
                    "1": "temp_d",
                    "3": "var5"
                },
                "uVar7": {
                    "2": "temp_var6",
                    "3": "var6",
                    "1": "result",
                    "5": "temp6",
                    "7": "temp8"
                },
                "uVar8": {
                    "1": "temp_var8",
                    "7": "temp9",
                    "2": "temp_var7",
                    "3": "var7"
                },
                "bVar9": {
                    "2": "is_zero1",
                    "3": "condition1",
                    "1": "temp_flag_a",
                    "13": "flag1"
                },
                "bVar10": {
                    "2": "bool2",
                    "1": "is_condition2",
                    "3": "condition2",
                    "13": "flag2"
                },
                "bVar11": {
                    "1": "check_3",
                    "2": "bool3",
                    "13": "flag3",
                    "3": "condition3"
                },
                "uVar12": {
                    "1": "concatenated",
                    "2": "combined_inputs",
                    "8": "combined_input",
                    "5": "result",
                    "3": "combined_params"
                }
            }
        },
        "FUN_080006ac": {
            "entrypoint": "0x080006ac",
            "current_name": "reverse_bits_080006ac",
            "code": "\nulonglong reverse_bits_080006ac(uint input1,uint input2,uint input3,uint input4)\n\n{\n  uint bit1;\n  uint bit2;\n  uint bit3;\n  uint bit4;\n  uint bit5;\n  bool is_zero;\n  \n  bit3 = bit5 & input4 >> 0x14;\n  if (bit2 != bit5 && bit3 != bit5) {\n    is_zero = (input1 | input2 << 1) == 0;\n    if (!is_zero) {\n      is_zero = (input3 | input4 << 1) == 0;\n    }\n    if (is_zero) {\n      return (ulonglong)((input2 ^ input4) & 0x80000000) << 0x20;\n    }\n    if (bit2 == 0) {\n      bit4 = input2 & 0x80000000;\n      do {\n        bit1 = input1 & 0x80000000;\n        input1 = input1 << 1;\n        input2 = input2 * 2 + (uint)(bit1 != 0);\n      } while ((input2 & 0x100000) == 0);\n      input2 = input2 | bit4;\n      if (bit3 != 0) {\n        return concatenate(input2,input1);\n      }\n    }\n    do {\n      bit3 = input3 & 0x80000000;\n      input3 = input3 << 1;\n      input4 = input4 * 2 + (uint)(bit3 != 0);\n    } while ((input4 & 0x100000) == 0);\n    return concatenate(input2,input1);\n  }\n  is_zero = (input1 | input2 << 1) == 0;\n  if (is_zero) {\n    input2 = input4;\n    input1 = input3;\n  }\n  if (!is_zero) {\n    is_zero = (input3 | input4 << 1) == 0;\n  }\n  bit4 = input2;\n  if (((!is_zero) && ((bit2 != bit5 || ((input1 | input2 << 0xc) == 0)))) &&\n     ((bit3 != bit5 || (input1 = input3, bit4 = input4, (input3 | input4 << 0xc) == 0)))) {\n    return (ulonglong)((input2 ^ input4) & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  return concatenate(bit4,input1) | 0x7ff8000000000000;\n}\n\n",
            "renaming": {
                "FUN_080006ac": "reverse_bits_080006ac",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "unaff_r4": "bit2",
                "in_r12": "bit5",
                "uVar1": "bit1",
                "uVar2": "bit3",
                "uVar3": "bit4",
                "bVar4": "is_zero",
                "CONCAT44": "concatenate"
            },
            "calling": [
                "FUN_080004d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080006ac": {
                    "1": "calculate_bitwise_operations",
                    "2": "reverse_operation",
                    "7": "reverse_bits"
                },
                "param_1": {
                    "5": "input_1",
                    "1": "num1",
                    "2": "input_a",
                    "15": "input1"
                },
                "param_2": {
                    "16": "input2",
                    "1": "second_param",
                    "2": "number2",
                    "5": "input_2"
                },
                "param_3": {
                    "5": "input_3",
                    "1": "input_var_3",
                    "2": "number3",
                    "15": "input3"
                },
                "param_4": {
                    "1": "input_value_4",
                    "2": "input_d",
                    "5": "input_4",
                    "15": "input4"
                },
                "unaff_r4": {
                    "1": "result2",
                    "7": "bit2",
                    "2": "temp1"
                },
                "in_r12": {
                    "4": "mask",
                    "2": "temp2",
                    "1": "var2",
                    "7": "bit5"
                },
                "uVar1": {
                    "1": "shifted_result1",
                    "2": "bit_1",
                    "5": "temp1",
                    "9": "bit1",
                    "3": "temp_1"
                },
                "uVar2": {
                    "1": "result_2",
                    "4": "bit3",
                    "2": "temp_2"
                },
                "uVar3": {
                    "2": "result",
                    "1": "result4",
                    "3": "bit3",
                    "4": "bit4"
                },
                "bVar4": {
                    "1": "condition1",
                    "27": "is_zero"
                },
                "CONCAT44": {
                    "1": "concatenate"
                },
                "uVar5": {
                    "1": "flag",
                    "2": "result"
                },
                "uVar6": {
                    "1": "flag2"
                },
                "return value": {
                    "1": "result"
                }
            }
        },
        "FUN_08000724": {
            "entrypoint": "0x08000724",
            "current_name": "calculate_floating_point_08000724",
            "code": "\nulonglong calculate_floating_point_08000724(undefined4 input1,uint input2,uint input3,uint input4)\n\n{\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  uint temp4;\n  uint temp5;\n  uint temp6;\n  uint temp7;\n  int temp8;\n  uint temp9;\n  uint temp10;\n  uint temp11;\n  uint temp12;\n  uint temp13;\n  uint temp14;\n  bool flag1;\n  bool flag2;\n  bool flag3;\n  undefined8 result;\n  \n  result = CONCAT44(input2,input1);\n  temp14 = 0x7ff;\n  temp7 = input2 >> 0x14 & 0x7ff;\n  flag1 = temp7 == 0;\n  if (!flag1) {\n    temp10 = input4 >> 0x14 & 0x7ff;\n    flag1 = temp10 == 0;\n  }\n  if (!flag1) {\n    flag1 = temp7 == 0x7ff;\n  }\n  if (!flag1) {\n    flag1 = temp10 == 0x7ff;\n  }\n  if (flag1) {\n    result = FUN_08000892();\n  }\n  temp9 = (uint)((ulonglong)result >> 0x20);\n  temp12 = (uint)result;\n  temp8 = temp7 - temp10;\n  if ((input3 | input4 << 0xc) == 0) {\n    temp7 = (temp9 ^ input4) & 0x80000000 | temp9 & 0xfffff;\n    flag3 = SCARRY4(temp8,temp14 >> 1);\n    temp9 = temp8 + (temp14 >> 1);\n    flag1 = (int)temp9 < 0;\n    flag2 = temp9 == 0;\n    if (!flag2 && flag1 == flag3) {\n      flag3 = SBORROW4(temp14,temp9);\n      flag1 = (int)(temp14 - temp9) < 0;\n      flag2 = temp14 == temp9;\n    }\n    if (!flag2 && flag1 == flag3) {\n      temp7 = temp7 | temp9 * 0x100000;\n    }\n    if (!flag2 && flag1 == flag3) {\n      return CONCAT44(temp7,temp12);\n    }\n    temp7 = temp7 | 0x100000;\n    temp14 = 0;\n    flag2 = SBORROW4(temp9,1);\n    temp9 = temp9 - 1;\n    flag1 = temp9 == 0;\n    temp3 = temp9;\n  }\n  else {\n    temp3 = (input4 << 0xc) >> 4 | 0x10000000 | input3 >> 0x18;\n    temp14 = input3 << 8;\n    temp11 = (temp9 << 0xc) >> 4 | 0x10000000 | temp12 >> 0x18;\n    temp12 = temp12 * 0x100;\n    temp7 = (temp9 ^ input4) & 0x80000000;\n    flag1 = temp3 <= temp11;\n    if (temp11 == temp3) {\n      flag1 = temp14 <= temp12;\n    }\n    temp8 = temp8 + (uint)flag1;\n    temp9 = temp8 + 0x3fd;\n    if (flag1 == false) {\n      temp3 = temp3 >> 1;\n      temp14 = (uint)((input3 >> 0x18 & 1) != 0) << 0x1f | temp14 >> 1;\n    }\n    temp13 = temp12 - temp14;\n    temp11 = (temp11 - temp3) - (uint)(temp12 < temp14);\n    temp4 = temp3 >> 1;\n    temp1 = (uint)((temp3 & 1) != 0) << 0x1f | temp14 >> 1;\n    temp12 = 0x100000;\n    temp3 = 0x80000;\n    while( true ) {\n      flag1 = temp1 <= temp13;\n      if (temp4 < temp11 || temp11 - temp4 < (uint)flag1) {\n        temp13 = temp13 - temp1;\n        temp12 = temp12 | temp3;\n        temp11 = (temp11 - temp4) - (uint)!flag1;\n      }\n      temp5 = temp4 >> 1;\n      temp1 = (uint)((temp4 & 1) != 0) << 0x1f | temp1 >> 1;\n      flag2 = temp1 <= temp13;\n      flag1 = temp11 - temp5 < (uint)flag2;\n      temp14 = temp11;\n      if (temp5 < temp11 || flag1) {\n        temp13 = temp13 - temp1;\n        temp14 = (temp11 - temp5) - (uint)!flag2;\n      }\n      if (temp5 < temp11 || flag1) {\n        temp12 = temp12 | temp3 >> 1;\n      }\n      temp11 = temp4 >> 2;\n      temp2 = (uint)((temp5 & 1) != 0) << 0x1f | temp1 >> 1;\n      flag2 = temp2 <= temp13;\n      flag1 = temp14 - temp11 < (uint)flag2;\n      temp5 = temp14;\n      if (temp11 < temp14 || flag1) {\n        temp13 = temp13 - temp2;\n        temp5 = (temp14 - temp11) - (uint)!flag2;\n      }\n      if (temp11 < temp14 || flag1) {\n        temp12 = temp12 | temp3 >> 2;\n      }\n      temp6 = temp4 >> 3;\n      temp1 = (uint)((temp11 & 1) != 0) << 0x1f | temp2 >> 1;\n      flag2 = temp1 <= temp13;\n      flag1 = temp5 - temp6 < (uint)flag2;\n      temp11 = temp5;\n      if (temp6 < temp5 || flag1) {\n        temp13 = temp13 - temp1;\n        temp11 = (temp5 - temp6) - (uint)!flag2;\n      }\n      if (temp6 < temp5 || flag1) {\n        temp12 = temp12 | temp3 >> 3;\n      }\n      temp14 = temp11 | temp13;\n      if (temp14 == 0) break;\n      temp11 = temp11 << 4 | temp13 >> 0x1c;\n      temp13 = temp13 << 4;\n      temp4 = temp4 & 0xfffffff8 | temp1 >> 0x1d;\n      temp1 = (temp2 >> 1) << 3;\n      temp3 = temp3 >> 4;\n      if (temp3 == 0) {\n        temp6 = temp4;\n        if ((temp7 & 0x100000) != 0) goto LAB_08000842;\n        temp7 = temp7 | temp12;\n        temp12 = 0;\n        temp3 = 0x80000000;\n      }\n    }\n    if ((temp7 & 0x100000) == 0) {\n      temp7 = temp7 | temp12;\n      temp12 = 0;\n    }\nLAB_08000842:\n    flag3 = 0xfc < temp9;\n    flag2 = SBORROW4(temp9,0xfd);\n    temp4 = temp8 + 0x300;\n    flag1 = temp4 == 0;\n    temp3 = temp4;\n    if (flag3 && !flag1) {\n      flag3 = 0x6ff < temp4;\n      flag2 = SBORROW4(temp4,0x700);\n      temp3 = temp8 - 0x400;\n      flag1 = temp4 == 0x700;\n    }\n    if (!flag3 || flag1) {\n      flag1 = temp6 <= temp11;\n      if (temp11 == temp6) {\n        flag1 = temp1 <= temp13;\n      }\n      if (temp11 == temp6 && temp13 == temp1) {\n        flag1 = (temp12 & 1) != 0;\n      }\n      return CONCAT44(temp7 + temp9 * 0x100000 + (uint)CARRY4(temp12,(uint)flag1),temp12 + flag1);\n    }\n  }\n  if (!flag1 && (int)temp3 < 0 == flag2) {\n    return (ulonglong)(temp7 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  flag3 = SCARRY4(temp9,0x36);\n  flag1 = (int)(temp9 + 0x36) < 0;\n  flag2 = temp9 == 0xffffffca;\n  if (flag2 || flag1 != flag3) {\n    temp12 = 0;\n  }\n  if (flag2 || flag1 != flag3) {\n    temp7 = temp7 & 0x80000000;\n  }\n  if (flag2 || flag1 != flag3) {\n    return CONCAT44(temp7,temp12);\n  }\n  temp3 = -temp9;\n  temp11 = temp3 - 0x20;\n  if (0x1f < (int)temp3) {\n    temp3 = temp12 >> (temp11 & 0xff) | temp7 << (0x20 - temp11 & 0xff);\n    temp9 = (temp7 >> (temp11 & 0xff) & ~((temp7 & 0x80000000) >> (temp11 & 0xff))) -\n            ((int)temp3 >> 0x1f);\n    if ((temp14 | temp12 << (0x20 - temp11 & 0xff) | temp3 << 1) == 0) {\n      temp9 = temp9 & ~(temp3 >> 0x1f);\n    }\n    return CONCAT44(temp7,temp9) & 0x80000000ffffffff;\n  }\n  temp8 = temp3 - 0x14;\n  if (temp8 != 0 && temp8 < 0 == SCARRY4(temp11,0xc)) {\n    temp9 = 0xc - temp8;\n    temp3 = temp12 << (temp9 & 0xff);\n    temp12 = temp12 >> (0x20 - temp9 & 0xff) | temp7 << (temp9 & 0xff);\n    temp9 = temp12 + -((int)temp3 >> 0x1f);\n    if ((temp14 | temp3 << 1) == 0) {\n      temp9 = temp9 & ~(temp3 >> 0x1f);\n    }\n    return CONCAT44((temp7 & 0x80000000) + (uint)CARRY4(temp12,-((int)temp3 >> 0x1f)),temp9);\n  }\n  temp11 = temp12 << (temp9 + 0x20 & 0xff);\n  temp12 = temp12 >> (temp3 & 0xff) | temp7 << (temp9 + 0x20 & 0xff);\n  temp9 = temp12 + -((int)temp11 >> 0x1f);\n  if ((temp14 | temp11 << 1) == 0) {\n    temp9 = temp9 & ~(temp11 >> 0x1f);\n  }\n  return CONCAT44((temp7 & 0x80000000) +\n                  ((temp7 & 0x7fffffff) >> (temp3 & 0xff)) +\n                  (uint)CARRY4(temp12,-((int)temp11 >> 0x1f)),temp9);\n}\n\n",
            "renaming": {
                "FUN_08000724": "calculate_floating_point_08000724",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "temp1",
                "uVar2": "temp2",
                "uVar3": "temp3",
                "uVar4": "temp4",
                "uVar5": "temp5",
                "uVar6": "temp6",
                "uVar7": "temp7",
                "iVar8": "temp8",
                "uVar9": "temp9",
                "unaff_r5": "temp10",
                "uVar10": "temp11",
                "uVar11": "temp12",
                "uVar12": "temp13",
                "uVar13": "temp14",
                "bVar14": "flag1",
                "bVar15": "flag2",
                "bVar16": "flag3",
                "uVar17": "result"
            },
            "calling": [
                "FUN_08006d68",
                "FUN_08005c70",
                "FUN_08005900",
                "FUN_08006c0c",
                "FUN_08005bc8",
                "FUN_08006228",
                "FUN_08003330",
                "FUN_08006070"
            ],
            "called": [
                "FUN_08000892"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08000724": {
                    "1": "process_numbers",
                    "2": "calculate_float",
                    "13": "calculate_floating_point"
                },
                "param_1": {
                    "3": "value1",
                    "1": "input_value1",
                    "5": "input_param1",
                    "8": "input1"
                },
                "param_2": {
                    "1": "arg2",
                    "8": "input2",
                    "5": "input_param2",
                    "4": "exponent",
                    "3": "value2"
                },
                "param_3": {
                    "1": "significand_h",
                    "5": "input_param3",
                    "2": "mantissa_high_bits",
                    "3": "value3",
                    "8": "input3"
                },
                "param_4": {
                    "1": "bits4",
                    "2": "mantissa_low_bits",
                    "5": "input_param4",
                    "3": "value4",
                    "8": "input4"
                },
                "uVar1": {
                    "1": "shifted_exponent1",
                    "22": "temp1",
                    "2": "temp_var1"
                },
                "uVar2": {
                    "1": "bit_extraction_result",
                    "2": "temp_var2",
                    "22": "temp2"
                },
                "uVar3": {
                    "2": "temp_var3",
                    "1": "exponent3",
                    "22": "temp3"
                },
                "uVar4": {
                    "1": "mask4",
                    "2": "temp_var4",
                    "22": "temp4"
                },
                "uVar5": {
                    "22": "temp5",
                    "2": "temp_var5",
                    "1": "shifted_mantissa"
                },
                "uVar6": {
                    "1": "bit_mask",
                    "22": "temp6",
                    "2": "temp_var6"
                },
                "uVar7": {
                    "1": "bitwise_or_result",
                    "2": "temp_var7",
                    "22": "temp7"
                },
                "iVar8": {
                    "1": "exponent_difference",
                    "19": "temp8",
                    "6": "difference",
                    "2": "temp_var8"
                },
                "uVar9": {
                    "1": "result_sign_bits",
                    "2": "result1",
                    "16": "temp9"
                },
                "unaff_r5": {
                    "1": "temp_result2",
                    "2": "unaff_r5",
                    "14": "temp10"
                },
                "uVar10": {
                    "1": "exponent_bits_diff2",
                    "2": "temp_var11",
                    "14": "temp11",
                    "5": "temp10"
                },
                "uVar11": {
                    "1": "result_mantissa",
                    "3": "temp11",
                    "14": "temp12",
                    "2": "temp_var12"
                },
                "uVar12": {
                    "1": "exponent13",
                    "2": "temp_var13",
                    "3": "temp12",
                    "14": "temp13"
                },
                "uVar13": {
                    "1": "bitwise_operation_result",
                    "2": "temp_var14",
                    "14": "temp14",
                    "3": "temp13"
                },
                "bVar14": {
                    "1": "temp_bool1",
                    "4": "is_zero",
                    "13": "flag1",
                    "2": "temp_var15"
                },
                "bVar15": {
                    "1": "is_zero_diff_normalized",
                    "2": "is_zero2",
                    "4": "condition2",
                    "13": "flag2",
                    "3": "is_equal"
                },
                "bVar16": {
                    "1": "is_condition_true3",
                    "11": "flag3",
                    "3": "carry_flag",
                    "4": "condition3"
                },
                "uVar17": {
                    "1": "combined",
                    "3": "temp15",
                    "12": "result",
                    "2": "temp13"
                },
                "bVar17": {
                    "1": "check4"
                },
                "uVar18": {
                    "1": "new_exponent"
                },
                "uVar19": {
                    "1": "result2"
                },
                "FUN_08000892": {
                    "1": "calculate_infinity"
                },
                "bVar18": {
                    "1": "is_diff_greater"
                },
                "bVar19": {
                    "1": "is_carry"
                },
                "uVar20": {
                    "1": "result3"
                },
                "uVar21": {
                    "1": "result4"
                },
                "uVar22": {
                    "1": "bitwise_or_result_shifted_carried"
                },
                "uVar23": {
                    "1": "bitwise_or_result_shifted_carried_shifted"
                },
                "uVar24": {
                    "1": "bitwise_or_result_shifted_carried_shifted_shifted"
                },
                "uVar25": {
                    "1": "normalized_denormalized_shifted"
                },
                "uVar26": {
                    "1": "partial_result"
                },
                "uVar27": {
                    "1": "partial_result_shifted"
                },
                "uVar28": {
                    "1": "partial_result_shifted_shifted"
                },
                "uVar29": {
                    "1": "partial_result_shifted_shifted_shifted"
                },
                "uVar30": {
                    "1": "partial_result_shifted_shifted_shifted_shifted"
                },
                "uVar31": {
                    "1": "partial_result_shifted_shifted_shifted_shifted_shifted"
                },
                "uVar32": {
                    "1": "partial_result_shifted_shifted_shifted_shifted_shifted_shifted"
                },
                "uVar33": {
                    "1": "partial_result_shifted_shifted_shifted_shifted_shifted_shifted_shifted"
                },
                "uVar34": {
                    "1": "partial_result_shifted_shifted_shifted_shifted_shifted_shifted_shifted_shifted"
                },
                "uVar35": {
                    "1": "partial_result_shifted_shifted_shifted_shifted_shifted_shifted_shifted_shifted_shifted"
                },
                "uVar36": {
                    "1": "partial_result_shifted_shifted_shifted_shifted_shifted_shifted_shifted_shifted_shifted_shifted"
                },
                "uVar37": {
                    "1": "result"
                },
                "uVar38": {
                    "1": "result_normalized"
                },
                "uVar39": {
                    "1": "result_normalized_rounded"
                },
                "uVar40": {
                    "1": "exceptional_result_high"
                }
            }
        },
        "FUN_08000892": {
            "entrypoint": "0x08000892",
            "current_name": "reverse_bits_08000892",
            "code": "\nulonglong reverse_bits_08000892(uint input1,uint input2,uint input3,uint input4)\n\n{\n  uint bit1;\n  uint temp1;\n  uint bit2;\n  uint result;\n  uint constant;\n  bool is_zero;\n  \n  bit2 = constant & input4 >> 0x14;\n  result = input2;\n  if (temp1 != constant || bit2 != constant) {\n    if (temp1 == constant) {\n      if (((input1 | input2 << 0xc) == 0) && (input1 = input3, result = input4, bit2 != constant)\n         ) {\nLAB_08000704:\n        return (ulonglong)((input2 ^ input4) & 0x80000000 | 0x7ff00000) << 0x20;\n      }\n    }\n    else if (bit2 == constant) {\n      input1 = input3;\n      result = input4;\n      if ((input3 | input4 << 0xc) == 0) {\nLAB_080006c8:\n        return (ulonglong)((input2 ^ input4) & 0x80000000) << 0x20;\n      }\n    }\n    else {\n      is_zero = (input1 | input2 << 1) == 0;\n      if (!is_zero) {\n        is_zero = (input3 | input4 << 1) == 0;\n      }\n      if (!is_zero) {\n        if (temp1 == 0) {\n          result = input2 & 0x80000000;\n          do {\n            bit1 = input1 & 0x80000000;\n            input1 = input1 << 1;\n            input2 = input2 * 2 + (uint)(bit1 != 0);\n          } while ((input2 & 0x100000) == 0);\n          input2 = input2 | result;\n          if (bit2 != 0) {\n            return CONCAT44(input2,input1);\n          }\n        }\n        do {\n          result = input3 & 0x80000000;\n          input3 = input3 << 1;\n          input4 = input4 * 2 + (uint)(result != 0);\n        } while ((input4 & 0x100000) == 0);\n        return CONCAT44(input2,input1);\n      }\n      if ((input1 | input2 << 1) != 0) goto LAB_08000704;\n      if ((input3 | input4 << 1) != 0) goto LAB_080006c8;\n    }\n  }\n  return CONCAT44(result,input1) | 0x7ff8000000000000;\n}\n\n",
            "renaming": {
                "FUN_08000892": "reverse_bits_08000892",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "bit1",
                "unaff_r4": "temp1",
                "uVar2": "bit2",
                "uVar3": "result",
                "in_r12": "constant",
                "bVar4": "is_zero"
            },
            "calling": [
                "FUN_08000724"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08000892": {
                    "1": "extract_bits",
                    "3": "calculate_double_precision",
                    "5": "reverse_bits",
                    "2": "decode_float"
                },
                "param_1": {
                    "1": "input_a",
                    "4": "input_1",
                    "17": "input1"
                },
                "param_2": {
                    "17": "input2",
                    "1": "value2",
                    "2": "exponent",
                    "4": "input_2"
                },
                "param_3": {
                    "4": "input_3",
                    "1": "value2",
                    "17": "input3"
                },
                "param_4": {
                    "1": "int_value4",
                    "4": "input_4",
                    "17": "input4"
                },
                "uVar1": {
                    "1": "msb_param1",
                    "2": "temp2",
                    "11": "bit1"
                },
                "unaff_r4": {
                    "1": "bit4",
                    "3": "bit2",
                    "2": "temp2",
                    "6": "temp1"
                },
                "uVar2": {
                    "1": "temp_var_5",
                    "5": "bit2",
                    "3": "temp3",
                    "2": "temp4"
                },
                "uVar3": {
                    "2": "temp",
                    "1": "result_2",
                    "3": "bit4",
                    "5": "result"
                },
                "in_r12": {
                    "1": "bit4",
                    "3": "temp2",
                    "2": "temp5",
                    "5": "constant"
                },
                "bVar4": {
                    "4": "flag",
                    "1": "temporary_var6",
                    "20": "is_zero"
                },
                "<param_1>": {
                    "1": "input1"
                },
                "<param_2>": {
                    "1": "input2"
                },
                "<param_3>": {
                    "1": "input3"
                },
                "<param_4>": {
                    "1": "input4"
                },
                "<unaff_r4>": {
                    "1": "unaffected"
                },
                "<in_r12>": {
                    "1": "param5"
                },
                "<uVar1>": {
                    "1": "temp1"
                },
                "<uVar2>": {
                    "1": "temp2"
                },
                "<uVar3>": {
                    "1": "temp3"
                },
                "<bVar4>": {
                    "1": "temp_bool"
                }
            }
        },
        "FUN_08000904": {
            "entrypoint": "0x08000904",
            "current_name": "check_equality_08000904",
            "code": "\nuint check_equality_08000904(uint value1,uint value2,uint value3,uint value4)\n\n{\n  uint result;\n  bool is_zero;\n  bool is_negative;\n  \n  if (((int)(value2 << 1) >> 0x15 == -1 || (int)(value4 << 1) >> 0x15 == -1) &&\n     ((((int)(value2 << 1) >> 0x15 == -1 && ((value1 | value2 << 0xc) != 0)) ||\n      (((int)(value4 << 1) >> 0x15 == -1 && ((value3 | value4 << 0xc) != 0)))))) {\n    result 1;\n  }\n  is_zero = (value1 | value2 << 1) == 0;\n  if (is_zero) {\n    is_zero = (value3 | value4 << 1) == 0;\n  }\n  if (!is_zero) {\n    is_zero = value2 == value4;\n  }\n  if (is_zero) {\n    is_zero = value1 == value3;\n  }\n  if (!is_zero) {\n    result = value2 ^ value4;\n    is_zero = result == 0;\n    if (-1 < (int)result) {\n      is_zero = value2 == value4;\n    }\n    is_negative = -1 < (int)result && value4 <= value2;\n    if (is_zero) {\n      is_negative = value3 <= value1;\n    }\n    value4 = (int)value4 >> 0x1f;\n    if (!is_negative) {\n      value4 = ~value4;\n    }\n    result value4 | 1;\n  }\n  result 0;\n}\n\n",
            "renaming": {
                "FUN_08000904": "check_equality_08000904",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "value3",
                "param_4": "value4",
                "bVar2": "is_zero",
                "bVar3": "is_negative",
                "uVar1": "result",
                "return": "result"
            },
            "calling": [
                "FUN_08000990"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08000904": {
                    "1": "check_params_and_update",
                    "2": "compare_params",
                    "6": "check_parameters",
                    "3": "compare_parameters",
                    "8": "check_equality"
                },
                "param_1": {
                    "3": "input_1",
                    "5": "value_1",
                    "4": "a",
                    "17": "value1",
                    "2": "first_param"
                },
                "param_2": {
                    "4": "b",
                    "5": "value_2",
                    "2": "second_param",
                    "3": "input_2",
                    "16": "value2",
                    "1": "shifted_param2"
                },
                "param_3": {
                    "3": "input_3",
                    "4": "c",
                    "1": "param3",
                    "16": "value3",
                    "5": "value_3",
                    "2": "third_param"
                },
                "param_4": {
                    "5": "value_4",
                    "3": "input_4",
                    "1": "shifted_param4",
                    "2": "fourth_param",
                    "4": "d",
                    "16": "value4"
                },
                "bVar2": {
                    "2": "are_params_equal",
                    "1": "is_zero_flag",
                    "18": "is_zero",
                    "4": "is_equal"
                },
                "bVar3": {
                    "1": "is_param4_smaller",
                    "14": "is_negative",
                    "2": "is_less_or_equal"
                },
                "uVar1": {
                    "1": "param2_xo_rparam4",
                    "20": "result",
                    "9": "xor_result"
                },
                "0x15": {
                    "1": "shift_value"
                },
                "0xc": {
                    "1": "bit_shift"
                },
                "1": {
                    "1": "return_value"
                },
                "return value": {
                    "1": "result"
                },
                "return": {
                    "1": "result"
                }
            }
        },
        "FUN_08000980": {
            "entrypoint": "0x08000980",
            "current_name": "execute_function_08000980",
            "code": "\nvoid execute_function_08000980(undefined4 arg1,undefined4 arg2,undefined4 arg3,undefined4 arg4)\n\n{\n  FUN_08000990(arg3,arg4,arg1,arg2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000980": "execute_function_08000980",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arg3",
                "param_4": "arg4"
            },
            "calling": [
                "FUN_080009f0"
            ],
            "called": [
                "FUN_08000990"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08000980": {
                    "1": "execute_and_return",
                    "4": "process_data",
                    "22": "execute_function"
                },
                "param_1": {
                    "2": "argument1",
                    "11": "arg1",
                    "1": "first_param",
                    "3": "input_param_1",
                    "7": "input1"
                },
                "param_2": {
                    "1": "second_param",
                    "2": "input_2",
                    "7": "input2",
                    "3": "input_param_2",
                    "11": "arg2"
                },
                "param_3": {
                    "2": "argument3",
                    "1": "third_param",
                    "3": "input3",
                    "11": "arg3"
                },
                "param_4": {
                    "1": "source2",
                    "2": "argument4",
                    "11": "arg4",
                    "3": "input4"
                },
                "FUN_08000990": {
                    "2": "call_sub_function",
                    "4": "sub_function",
                    "1": "reverse_data"
                }
            }
        },
        "FUN_08000990": {
            "entrypoint": "0x08000990",
            "current_name": "initialize_08000990",
            "code": "\nundefined4 initialize_08000990(undefined4 input)\n\n{\n  FUN_08000904();\n  return input;\n}\n\n",
            "renaming": {
                "FUN_08000990": "initialize_08000990",
                "param_1": "input"
            },
            "calling": [
                "FUN_08000980",
                "FUN_080009c8",
                "FUN_080009a0",
                "FUN_080009b4"
            ],
            "called": [
                "FUN_08000904"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08000990": {
                    "10": "initialize",
                    "1": "initiate_processing",
                    "2": "initialize_function",
                    "7": "execute_function",
                    "3": "execute_and_return"
                },
                "param_1": {
                    "14": "input",
                    "2": "data",
                    "6": "input_param",
                    "1": "input_data"
                },
                "FUN_08000904": {
                    "1": "calculate_result",
                    "6": "process_data",
                    "2": "perform_calculation",
                    "14": "perform_operation"
                },
                "param_2": {
                    "1": "param_2",
                    "3": "value1"
                },
                "param_3": {
                    "1": "value_3",
                    "3": "value2"
                },
                "param_4": {
                    "1": "num3",
                    "3": "value3"
                },
                "FUN_08000904_PARAM_1": {
                    "1": "action_param_1"
                },
                "FUN_08000904_PARAM_2": {
                    "1": "action_param_2"
                },
                "FUN_08000904_PARAM_3": {
                    "1": "action_param_3"
                },
                "FUN_08000904_PARAM_4": {
                    "1": "action_param_4"
                },
                "FUN_08000904_param_1": {
                    "1": "sub_func_param1",
                    "2": "value1"
                },
                "FUN_08000904_param_2": {
                    "1": "sub_func_param2",
                    "2": "value2"
                },
                "FUN_08000904_param_3": {
                    "1": "operation_param3",
                    "2": "value3"
                },
                "FUN_08000904_param_4": {
                    "1": "sub_func_param4",
                    "2": "value4"
                },
                "FUN_08000904_argument_1": {
                    "1": "calc_param1"
                },
                "FUN_08000904_argument_2": {
                    "1": "calc_param2"
                },
                "FUN_08000904_argument_3": {
                    "1": "calc_param3"
                },
                "FUN_08000904_argument_4": {
                    "1": "calc_param4"
                },
                "FUN_08000904(parameter_1)": {
                    "1": "process_data(input)"
                }
            }
        },
        "FUN_080009a0": {
            "entrypoint": "0x080009a0",
            "current_name": "check_if_nonzero_080009a0",
            "code": "\nbool check_if_nonzero_080009a0(void)\n\n{\n  char result;\n  \n  FUN_08000990();\n  return result != '\\0';\n}\n\n",
            "renaming": {
                "FUN_080009a0": "check_if_nonzero_080009a0",
                "in_ZR": "result"
            },
            "calling": [
                "FUN_08005900"
            ],
            "called": [
                "FUN_08000990"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080009a0": {
                    "2": "check_if_initialized",
                    "1": "check_if_value_is_not_null",
                    "3": "check_if_nonzero"
                },
                "in_ZR": {
                    "3": "return_value",
                    "1": "execution_result",
                    "2": "is_initialized",
                    "8": "result"
                },
                "FUN_08000990": {
                    "1": "prepare_function_08000990"
                }
            }
        },
        "FUN_080009b4": {
            "entrypoint": "0x080009b4",
            "current_name": "check_if_null_terminated_080009b4",
            "code": "\nbool check_if_null_terminated_080009b4(void)\n\n{\n  char input_char;\n  \n  FUN_08000990();\n  return input_char == '\\0';\n}\n\n",
            "renaming": {
                "FUN_080009b4": "check_if_null_terminated_080009b4",
                "in_CY": "input_char"
            },
            "calling": [
                "FUN_08005900",
                "FUN_08005bc8"
            ],
            "called": [
                "FUN_08000990"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080009b4": {
                    "1": "is_last_character_null",
                    "3": "check_if_cy_is_null",
                    "2": "check_null_terminated_string",
                    "4": "check_if_null_terminated"
                },
                "in_CY": {
                    "1": "last_character",
                    "16": "input_char",
                    "2": "cy",
                    "9": "input_character"
                },
                "FUN_08000990": {
                    "1": "call_fun_08000990"
                }
            }
        },
        "FUN_080009c8": {
            "entrypoint": "0x080009c8",
            "current_name": "check_cy_and_zr_080009c8",
            "code": "\nbool check_cy_and_zr_080009c8(void)\n\n{\n  undefined zero_flag;\n  undefined carry_flag;\n  \n  FUN_08000990();\n  return !(bool)carry_flag || (bool)zero_flag;\n}\n\n",
            "renaming": {
                "FUN_080009c8": "check_cy_and_zr_080009c8",
                "in_ZR": "zero_flag",
                "in_CY": "carry_flag"
            },
            "calling": [
                "FUN_08006228"
            ],
            "called": [
                "FUN_08000990"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080009c8": {
                    "1": "should_skip_execution",
                    "3": "check_flags",
                    "9": "check_cy_and_zr",
                    "2": "check_carry_and_zero"
                },
                "in_ZR": {
                    "1": "is_zero",
                    "2": "is_zero_result",
                    "21": "zero_flag"
                },
                "in_CY": {
                    "3": "is_carry",
                    "1": "condition_cy",
                    "21": "carry_flag"
                },
                "FUN_08000990": {
                    "1": "perform_initialization",
                    "6": "initialize_flags",
                    "2": "initialize_variables"
                },
                "param_1": {
                    "1": "parameter"
                }
            }
        },
        "FUN_080009f0": {
            "entrypoint": "0x080009f0",
            "current_name": "is_cy_null_080009f0",
            "code": "\nbool is_cy_null_080009f0(void)\n\n{\n  char input_character;\n  \n  FUN_08000980();\n  return input_character == '\\0';\n}\n\n",
            "renaming": {
                "FUN_080009f0": "is_cy_null_080009f0",
                "in_CY": "input_character"
            },
            "calling": [
                "FUN_08006d68",
                "FUN_08005c70",
                "FUN_08005854",
                "FUN_08006228"
            ],
            "called": [
                "FUN_08000980"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080009f0": {
                    "2": "is_string_null_terminated",
                    "1": "check_if_null_terminator",
                    "6": "is_cy_null",
                    "4": "check_if_string_empty"
                },
                "in_CY": {
                    "1": "input_cy",
                    "10": "input_char",
                    "2": "cy",
                    "11": "input_character"
                },
                "FUN_08000980": {
                    "1": "initialize_string"
                }
            }
        },
        "FUN_08000a04": {
            "entrypoint": "0x08000a04",
            "current_name": "check_parameters_08000a04",
            "code": "\nundefined4 check_parameters_08000a04(uint input1,int value2,uint value3,int value4)\n\n{\n  if ((((value2 << 1) >> 0x15 != -1) || ((input1 | value2 << 0xc) == 0)) &&\n     (((value4 << 1) >> 0x15 != -1 || ((value3 | value4 << 0xc) == 0)))) {\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08000a04": "check_parameters_08000a04",
                "param_1": "input1",
                "param_2": "value2",
                "param_3": "value3",
                "param_4": "value4"
            },
            "calling": [
                "FUN_08005900",
                "FUN_08005854",
                "FUN_08005bc8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08000a04": {
                    "12": "check_parameters",
                    "2": "check_parameters_valid",
                    "1": "validate_parameters",
                    "3": "check_parameters_validity",
                    "4": "check_params"
                },
                "param_1": {
                    "5": "input_1",
                    "6": "value_1",
                    "1": "first_param",
                    "7": "input1"
                },
                "param_2": {
                    "6": "value_2",
                    "1": "second_param",
                    "5": "input_2",
                    "7": "value2"
                },
                "param_3": {
                    "5": "input_3",
                    "1": "num3",
                    "7": "value3",
                    "6": "value_3"
                },
                "param_4": {
                    "6": "input4",
                    "1": "input_value4",
                    "5": "input_4",
                    "7": "value4"
                },
                "param_2_2": {
                    "1": "shifted_input2"
                },
                "param_4_2": {
                    "1": "shifted_input4"
                }
            }
        },
        "FUN_08000a30": {
            "entrypoint": "0x08000a30",
            "current_name": "calculate_floating_point_08000a30",
            "code": "\nuint calculate_floating_point_08000a30(uint input1,uint input2)\n\n{\n  uint result;\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  bool is_zero;\n  bool is_less_than_threshold;\n  \n  temp1 = input2 * 2;\n  is_less_than_threshold = temp1 < 0x70000000;\n  temp2 = temp1 + 0x90000000;\n  result = temp2;\n  if (!is_less_than_threshold) {\n    temp3 = temp1 + 0x8fe00000;\n    result = temp3;\n  }\n  is_zero = result == 0;\n  if (!is_less_than_threshold && temp2 >= 0x200000) {\n    is_zero = temp3 == 0x1fc00000;\n  }\n  if (((is_less_than_threshold || temp2 < 0x200000) || 0x1fc00000 < temp3) || is_zero) {\n    if ((input2 & 0x40000000) != 0) {\n      if (((int)temp1 >> 0x15 == -1) && ((input1 | input2 << 0xc) != 0)) {\n        return 0x7fc00000;\n      }\n      return input2 & 0x80000000 | 0x7f800000;\n    }\n    if ((int)(temp1 + 0x92e00000) < 0 != signed_carry4(temp2,0x2e00000)) {\n      return input2 & 0x80000000;\n    }\n    temp1 = 0x18 - (temp1 + 0x92e00000 >> 0x15);\n    result = input1 >> (temp1 & 0xff);\n    if (input1 << (0x20 - temp1 & 0xff) != 0) {\n      result = result | 1;\n    }\n    temp2 = input2 & 0x1fffff | 0x100000;\n    input1 = result | temp2 << (0x20 - temp1 & 0xff);\n    temp2 = (temp2 >> (temp1 & 0xff)) << 1;\n  }\n  result = (input2 & 0x80000000 | input1 >> 0x1d) + temp2 * 4 + (uint)(0x7fffffff < input1 * 8);\n  if (input1 * 8 == 0x80000000) {\n    result = result & 0xfffffffe;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08000a30": "calculate_floating_point_08000a30",
                "param_1": "input1",
                "param_2": "input2",
                "uVar1": "result",
                "uVar2": "temp1",
                "uVar3": "temp2",
                "in_r12": "temp3",
                "bVar4": "is_zero",
                "bVar5": "is_less_than_threshold",
                "SCARRY4": "signed_carry4"
            },
            "calling": [
                "FUN_0800411c",
                "FUN_08003330"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08000a30": {
                    "1": "float_to_u_int",
                    "2": "calculate_floating_point_value",
                    "6": "calculate_float",
                    "7": "calculate_floating_point"
                },
                "param_1": {
                    "2": "input",
                    "3": "float_value",
                    "1": "input_value1",
                    "4": "input_value",
                    "5": "input1"
                },
                "param_2": {
                    "1": "input_fraction",
                    "2": "exponent",
                    "3": "input_flag",
                    "5": "input2"
                },
                "uVar1": {
                    "1": "result_float",
                    "27": "result"
                },
                "uVar2": {
                    "1": "modifier_times2",
                    "2": "multiplied_value",
                    "3": "shifted_exponent",
                    "5": "temp1"
                },
                "uVar3": {
                    "1": "shifted_exponent_with_offset",
                    "3": "adjusted_value",
                    "2": "adjusted_exponent",
                    "5": "temp2"
                },
                "in_r12": {
                    "1": "temp_factor",
                    "2": "temp_var",
                    "5": "temp3"
                },
                "bVar4": {
                    "1": "is_result_zero",
                    "25": "is_zero"
                },
                "bVar5": {
                    "1": "check_input_2",
                    "3": "is_less_than70000000",
                    "4": "is_in_range",
                    "5": "is_less_than",
                    "7": "is_less_than_threshold"
                },
                "SCARRY4": {
                    "1": "is_signed_overflow"
                },
                "0x70000000": {
                    "1": "limit1"
                },
                "0x90000000": {
                    "1": "offset1"
                },
                "0x8fe00000": {
                    "1": "offset2"
                },
                "0x200000": {
                    "1": "limit2"
                },
                "0x1fc00000": {
                    "1": "limit3"
                },
                "0x40000000": {
                    "1": "bit_flag"
                },
                "0x7fc00000": {
                    "1": "nan_value"
                },
                "0x80000000": {
                    "1": "sign_limit"
                },
                "0x92e00000": {
                    "1": "offset3"
                },
                "0x18": {
                    "1": "shift_amount"
                },
                "0xff": {
                    "1": "bit_mask"
                },
                "0x20": {
                    "1": "bit_size"
                },
                "0x100000": {
                    "1": "mask1"
                },
                "0x1fffff": {
                    "1": "mask2"
                },
                "0x1d": {
                    "1": "sign_shift"
                },
                "0x7fffffff": {
                    "1": "max_value"
                },
                "0xfffffffe": {
                    "1": "clear_bit"
                },
                "uVar2 << 0xc": {
                    "1": "value2_shifted"
                },
                "(int)uVar2 >> 0x15": {
                    "1": "shifted_value2"
                },
                "param_1 | param_2 << 0xc": {
                    "1": "combined_values"
                },
                "uVar1 | 1": {
                    "1": "result_with_bit"
                },
                "uVar2 + 0x92e00000": {
                    "1": "sum_with_constant"
                },
                "(uVar2 + 0x92e00000) >> 0x15": {
                    "1": "sum_shifted"
                },
                "0x18 - (uVar2 + 0x92e00000 >> 0x15)": {
                    "1": "shift_amount"
                },
                "param_1 >> (uVar2 & 0xff)": {
                    "1": "shifted_value1"
                },
                "param_1 << (0x20 - uVar2 & 0xff)": {
                    "1": "shifted_value1_reverse"
                },
                "param_2 & 0x1fffff | 0x100000": {
                    "1": "mask"
                },
                "(uVar3 >> (uVar2 & 0xff)) << 1": {
                    "1": "masked_shift"
                },
                "param_2 & 0x80000000 | param_1 >> 0x1d": {
                    "1": "high_bits"
                },
                "uVar1 & 0xfffffffe": {
                    "1": "cleared_odd_bit"
                },
                "uVar9": {
                    "1": "normalized_input_int"
                },
                "uVar10": {
                    "1": "final_result"
                }
            }
        },
        "FUN_08000ad8": {
            "entrypoint": "0x08000ad8",
            "current_name": "reverse_bits_08000ad8",
            "code": "\nuint reverse_bits_08000ad8(uint input1,uint input2,undefined4 input3,uint input4)\n\n{\n  int shifted_input1;\n  int shifted_input2;\n  uint temp1;\n  uint temp2;\n  uint shifted_input;\n  uint temp_b;\n  uint difference;\n  bool is_equal;\n  \n  temp1 = input2 ^ 0x80000000;\n  shifted_input = input1 << 1;\n  is_equal = shifted_input == 0;\n  if (!is_equal) {\n    input4 = input2 << 1;\n    is_equal = input4 == 0;\n  }\n  if (!is_equal) {\n    is_equal = shifted_input == input4;\n  }\n  shifted_input1 = (int)shifted_input >> 0x18;\n  if (!is_equal) {\n    is_equal = shifted_input1 == -1;\n  }\n  if (!is_equal) {\n    is_equal = (int)input4 >> 0x18 == -1;\n  }\n  if (is_equal) {\n    shifted_input2 = (int)(input2 << 1) >> 0x18;\n    if (shifted_input1 == -1 || shifted_input2 == -1) {\n      shifted_input = temp1;\n      if (shifted_input1 == -1) {\n        shifted_input = input1;\n      }\n      if (shifted_input1 != -1 || shifted_input2 != -1) {\n        temp1 = shifted_input;\n      }\n      is_equal = (shifted_input & 0x7fffff) == 0;\n      if (is_equal) {\n        is_equal = (temp1 & 0x7fffff) == 0;\n      }\n      if (is_equal) {\n        is_equal = shifted_input == temp1;\n      }\n      if (!is_equal) {\n        shifted_input = shifted_input | 0x400000;\n      }\n      return shifted_input;\n    }\n    if (((input1 ^ temp1) & 0x7fffffff) != 0) {\n      if (shifted_input == 0) {\n        input1 = temp1;\n      }\n      return input1;\n    }\n    if (input1 != temp1) {\n      return 0;\n    }\n    if ((shifted_input & 0xff000000) == 0) {\n      temp1 = input1 << 1;\n      if ((input1 & 0x80000000) != 0) {\n        temp1 = temp1 | 0x80000000;\n      }\n      return temp1;\n    }\n    if (shifted_input < 0xfe000000) {\n      return input1 + 0x800000;\n    }\n    input1 = input1 & 0x80000000;\nLAB_08000c12:\n    return input1 | 0x7f800000;\n  }\n  shifted_input = shifted_input >> 0x18;\n  input4 = input4 >> 0x18;\n  difference = input4 - shifted_input;\n  is_equal = difference != 0;\n  temp_b = shifted_input;\n  if (is_equal && shifted_input <= input4) {\n    temp_b = shifted_input + difference;\n  }\n  if (is_equal && shifted_input <= input4) {\n    temp1 = temp1 ^ input1;\n  }\n  if (is_equal && shifted_input <= input4) {\n    input1 = input1 ^ temp1;\n  }\n  if (is_equal && shifted_input <= input4) {\n    temp1 = temp1 ^ input1;\n  }\n  if (input4 < shifted_input) {\n    difference = -difference;\n  }\n  if (0x19 < difference) {\n    return input1;\n  }\n  shifted_input = input1 & 0xffffff | 0x800000;\n  if ((input1 & 0x80000000) != 0) {\n    shifted_input = -shifted_input;\n  }\n  temp2 = temp1 & 0xffffff | 0x800000;\n  if ((temp1 & 0x80000000) != 0) {\n    temp2 = -temp2;\n  }\n  if (temp_b == difference) {\n    temp2 = temp2 ^ 0x800000;\n    if (temp_b == 0) {\n      shifted_input = shifted_input ^ 0x800000;\n      temp_b = 1;\n    }\n    else {\n      difference = difference - 1;\n    }\n  }\n  shifted_input = shifted_input + ((int)temp2 >> (difference & 0xff));\n  temp2 = temp2 << (0x20 - difference & 0xff);\n  input1 = shifted_input & 0x80000000;\n  if ((int)shifted_input < 0) {\n    is_equal = temp2 != 0;\n    temp2 = -temp2;\n    shifted_input = -shifted_input - (uint)is_equal;\n  }\n  if (shifted_input < 0x800000) {\n    temp1 = temp2 & 0x80000000;\n    temp2 = temp2 << 1;\n    shifted_input = shifted_input * 2 + (uint)(temp1 != 0);\n    temp1 = temp_b - 2;\n    if ((shifted_input & 0x800000) == 0) {\n      difference = LZCOUNT(shifted_input) - 8;\n      shifted_input = shifted_input << (difference & 0xff);\n      if ((int)temp1 < (int)difference) {\n        shifted_input = shifted_input >> (-(temp1 - difference) & 0xff);\n      }\n      else {\n        shifted_input = shifted_input + (temp1 - difference) * 0x800000;\n      }\n      return shifted_input | input1;\n    }\n  }\n  else {\n    temp1 = temp_b - 1;\n    if (0xffffff < shifted_input) {\n      temp1 = shifted_input & 1;\n      shifted_input = shifted_input >> 1;\n      temp2 = (uint)(temp1 != 0) << 0x1f | temp2 >> 1;\n      temp1 = temp_b;\n      if (0xfd < temp_b) goto LAB_08000c12;\n    }\n  }\n  shifted_input = shifted_input + temp1 * 0x800000 + (uint)(0x7fffffff < temp2);\n  if (temp2 == 0x80000000) {\n    shifted_input = shifted_input & 0xfffffffe;\n  }\n  return shifted_input | input1;\n}\n\n",
            "renaming": {
                "FUN_08000ad8": "reverse_bits_08000ad8",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "iVar1": "shifted_input1",
                "iVar2": "shifted_input2",
                "uVar3": "temp1",
                "uVar4": "temp2",
                "uVar5": "shifted_input",
                "uVar6": "temp_b",
                "uVar7": "difference",
                "bVar8": "is_equal"
            },
            "calling": [
                "FUN_0800426c",
                "FUN_08002ee8",
                "FUN_08002d88",
                "FUN_08003330",
                "FUN_0800483c",
                "FUN_08002bf0",
                "FUN_08002ec0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08000ad8": {
                    "1": "reverse_float",
                    "6": "reverse_bits",
                    "2": "compute_floating_point",
                    "4": "calculate_float",
                    "5": "calculate_floating_point"
                },
                "param_1": {
                    "6": "input",
                    "2": "input_1",
                    "1": "mantissa",
                    "8": "input1",
                    "3": "input_a"
                },
                "param_2": {
                    "7": "mask",
                    "1": "exponent",
                    "8": "input2",
                    "3": "input_b",
                    "4": "bit_mask",
                    "2": "input_2"
                },
                "param_3": {
                    "2": "input_3",
                    "1": "unknown_param",
                    "3": "constant",
                    "4": "unused",
                    "6": "input3"
                },
                "param_4": {
                    "1": "precision",
                    "3": "shift_amount",
                    "2": "shift",
                    "4": "result",
                    "6": "input4"
                },
                "iVar1": {
                    "1": "dividend_shifted",
                    "2": "shifted_input_a",
                    "3": "shifted_input1"
                },
                "iVar2": {
                    "1": "result_shift_count",
                    "2": "shifted_value2",
                    "3": "shifted_input2"
                },
                "uVar3": {
                    "2": "result_1",
                    "1": "shifted_input_a",
                    "3": "masked_input",
                    "5": "temp1"
                },
                "uVar4": {
                    "1": "result2",
                    "5": "temp2",
                    "2": "result_2"
                },
                "uVar5": {
                    "1": "u_var5",
                    "4": "result",
                    "2": "temp3"
                },
                "uVar6": {
                    "1": "result_temp",
                    "2": "temp4"
                },
                "uVar7": {
                    "2": "shift_difference",
                    "1": "abs_difference",
                    "18": "difference"
                },
                "bVar8": {
                    "3": "is_condition_met",
                    "1": "is_match",
                    "2": "is_zero",
                    "4": "is_true",
                    "11": "is_equal"
                },
                "uVar9": {
                    "1": "check_1"
                },
                "uVar10": {
                    "1": "check_2"
                },
                "<original_function_name>": {
                    "1": "reverse_bits"
                },
                "<original_parameter_name_1>": {
                    "1": "input"
                },
                "<original_parameter_name_2>": {
                    "1": "mask"
                },
                "<original_parameter_name_3>": {
                    "1": "temp"
                },
                "<original_parameter_name_4>": {
                    "1": "output"
                }
            }
        },
        "FUN_08000adc": {
            "entrypoint": "0x08000adc",
            "current_name": "calculate_float_08000adc",
            "code": "\nuint calculate_float_08000adc(uint input1,uint input2,undefined4 input3,uint input4)\n\n{\n  int shifted_input1;\n  int shifted_input2;\n  uint result1;\n  uint result2;\n  uint temp1;\n  uint difference;\n  bool is_zero;\n  \n  result2 = input1 << 1;\n  is_zero = result2 == 0;\n  if (!is_zero) {\n    input4 = input2 << 1;\n    is_zero = input4 == 0;\n  }\n  if (!is_zero) {\n    is_zero = result2 == input4;\n  }\n  shifted_input1 = (int)result2 >> 0x18;\n  if (!is_zero) {\n    is_zero = shifted_input1 == -1;\n  }\n  if (!is_zero) {\n    is_zero = (int)input4 >> 0x18 == -1;\n  }\n  if (is_zero) {\n    shifted_input2 = (int)(input2 << 1) >> 0x18;\n    if (shifted_input1 == -1 || shifted_input2 == -1) {\n      result2 = input2;\n      if (shifted_input1 == -1) {\n        result2 = input1;\n      }\n      if (shifted_input1 != -1 || shifted_input2 != -1) {\n        input2 = result2;\n      }\n      is_zero = (result2 & 0x7fffff) == 0;\n      if (is_zero) {\n        is_zero = (input2 & 0x7fffff) == 0;\n      }\n      if (is_zero) {\n        is_zero = result2 == input2;\n      }\n      if (!is_zero) {\n        result2 = result2 | 0x400000;\n      }\n      return result2;\n    }\n    if (((input1 ^ input2) & 0x7fffffff) != 0) {\n      if (result2 == 0) {\n        input1 = input2;\n      }\n      return input1;\n    }\n    if (input1 != input2) {\n      return 0;\n    }\n    if ((result2 & 0xff000000) == 0) {\n      result2 = input1 << 1;\n      if ((input1 & 0x80000000) != 0) {\n        result2 = result2 | 0x80000000;\n      }\n      return result2;\n    }\n    if (result2 < 0xfe000000) {\n      return input1 + 0x800000;\n    }\n    input1 = input1 & 0x80000000;\nLAB_08000c12:\n    return input1 | 0x7f800000;\n  }\n  result2 = result2 >> 0x18;\n  input4 = input4 >> 0x18;\n  difference = input4 - result2;\n  is_zero = difference != 0;\n  temp1 = result2;\n  if (is_zero && result2 <= input4) {\n    temp1 = result2 + difference;\n  }\n  if (is_zero && result2 <= input4) {\n    input2 = input2 ^ input1;\n  }\n  if (is_zero && result2 <= input4) {\n    input1 = input1 ^ input2;\n  }\n  if (is_zero && result2 <= input4) {\n    input2 = input2 ^ input1;\n  }\n  if (input4 < result2) {\n    difference = -difference;\n  }\n  if (0x19 < difference) {\n    return input1;\n  }\n  result2 = input1 & 0xffffff | 0x800000;\n  if ((input1 & 0x80000000) != 0) {\n    result2 = -result2;\n  }\n  result1 = input2 & 0xffffff | 0x800000;\n  if ((input2 & 0x80000000) != 0) {\n    result1 = -result1;\n  }\n  if (temp1 == difference) {\n    result1 = result1 ^ 0x800000;\n    if (temp1 == 0) {\n      result2 = result2 ^ 0x800000;\n      temp1 = 1;\n    }\n    else {\n      difference = difference - 1;\n    }\n  }\n  result2 = result2 + ((int)result1 >> (difference & 0xff));\n  result1 = result1 << (0x20 - difference & 0xff);\n  input1 = result2 & 0x80000000;\n  if ((int)result2 < 0) {\n    is_zero = result1 != 0;\n    result1 = -result1;\n    result2 = -result2 - (uint)is_zero;\n  }\n  if (result2 < 0x800000) {\n    difference = result1 & 0x80000000;\n    result1 = result1 << 1;\n    result2 = result2 * 2 + (uint)(difference != 0);\n    difference = temp1 - 2;\n    if ((result2 & 0x800000) == 0) {\n      temp1 = leading_zero_count(result2) - 8;\n      result2 = result2 << (temp1 & 0xff);\n      if ((int)difference < (int)temp1) {\n        result2 = result2 >> (-(difference - temp1) & 0xff);\n      }\n      else {\n        result2 = result2 + (difference - temp1) * 0x800000;\n      }\n      return result2 | input1;\n    }\n  }\n  else {\n    difference = temp1 - 1;\n    if (0xffffff < result2) {\n      difference = result2 & 1;\n      result2 = result2 >> 1;\n      result1 = (uint)(difference != 0) << 0x1f | result1 >> 1;\n      difference = temp1;\n      if (0xfd < temp1) goto LAB_08000c12;\n    }\n  }\n  result2 = result2 + difference * 0x800000 + (uint)(0x7fffffff < result1);\n  if (result1 == 0x80000000) {\n    result2 = result2 & 0xfffffffe;\n  }\n  return result2 | input1;\n}\n\n",
            "renaming": {
                "FUN_08000adc": "calculate_float_08000adc",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "iVar1": "shifted_input1",
                "iVar2": "shifted_input2",
                "uVar3": "result1",
                "uVar4": "result2",
                "uVar5": "temp1",
                "uVar6": "difference",
                "bVar7": "is_zero",
                "LZCOUNT": "leading_zero_count"
            },
            "calling": [
                "FUN_0800426c",
                "FUN_08004a84",
                "FUN_08002ee8",
                "FUN_0800411c",
                "FUN_08002cb0",
                "FUN_08003330",
                "FUN_0800483c",
                "FUN_08002ec0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08000adc": {
                    "1": "floating_point_addition",
                    "8": "calculate_float",
                    "6": "calculate_floating_point"
                },
                "param_1": {
                    "1": "input_operand_1",
                    "3": "operand1",
                    "2": "float_value1",
                    "9": "input1",
                    "4": "input_value1"
                },
                "param_2": {
                    "1": "input_2",
                    "9": "input2",
                    "4": "input_value2",
                    "2": "value2",
                    "3": "operand2"
                },
                "param_3": {
                    "4": "flag",
                    "5": "input3",
                    "1": "num3",
                    "2": "input_value3"
                },
                "param_4": {
                    "5": "input4",
                    "2": "input_value4",
                    "1": "operand4"
                },
                "iVar1": {
                    "1": "left_most_byte_operand1",
                    "2": "shifted_input_1",
                    "5": "shifted_input1"
                },
                "iVar2": {
                    "1": "shift_right_value2",
                    "2": "shifted_value2",
                    "5": "shifted_input2"
                },
                "uVar3": {
                    "1": "shifted_result_1",
                    "5": "result1",
                    "2": "result"
                },
                "uVar4": {
                    "1": "abs_first_value",
                    "3": "shifted_value1",
                    "5": "result2"
                },
                "uVar5": {
                    "1": "difference",
                    "2": "exponent1",
                    "3": "temp1"
                },
                "uVar6": {
                    "1": "temp4",
                    "2": "temp2",
                    "16": "difference"
                },
                "bVar7": {
                    "1": "is_shifted_value1_zero",
                    "16": "is_zero",
                    "10": "is_equal"
                },
                "LZCOUNT": {
                    "3": "leading_zero_count"
                }
            }
        },
        "FUN_08000c3c": {
            "entrypoint": "0x08000c3c",
            "current_name": "reverse_bits_08000c3c",
            "code": "\nuint reverse_bits_08000c3c(uint input_value)\n\n{\n  uint leading_zeros;\n  uint shift_amount;\n  int constant;\n  uint mask;\n  \n  if (input_value == 0) {\n    return 0;\n  }\n  leading_zeros = LZCOUNT(input_value);\n  shift_amount = leading_zeros - 8;\n  constant = shift_amount * -0x800000 + 0x4a800000;\n  if (7 < leading_zeros) {\n    mask = 0 << (shift_amount & 0xff);\n    leading_zeros = constant + (input_value << (shift_amount & 0xff)) +\n            (0U >> (0x20 - shift_amount & 0xff)) + (uint)(0x7fffffff < mask);\n    if (mask == 0x80000000) {\n      leading_zeros = leading_zeros & 0xfffffffe;\n    }\n    return leading_zeros;\n  }\n  shift_amount = input_value << leading_zeros + 0x18;\n  leading_zeros = constant + ((input_value >> (0x20 - (leading_zeros + 0x18) & 0xff)) - ((int)shift_amount >> 0x1f));\n  if ((shift_amount & 0x7fffffff) == 0) {\n    leading_zeros = leading_zeros & ~(shift_amount >> 0x1f);\n  }\n  return leading_zeros;\n}\n\n",
            "renaming": {
                "FUN_08000c3c": "reverse_bits_08000c3c",
                "param_1": "input_value",
                "uVar1": "leading_zeros",
                "uVar2": "shift_amount",
                "iVar3": "constant",
                "uVar4": "mask"
            },
            "calling": [
                "FUN_08002f28"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08000c3c": {
                    "1": "calculate_unsigned_result",
                    "2": "calculate_modified_value",
                    "7": "reverse_bits",
                    "4": "calculate_result"
                },
                "param_1": {
                    "10": "input",
                    "2": "input_number",
                    "1": "num",
                    "18": "input_value"
                },
                "uVar1": {
                    "1": "shifted_input",
                    "3": "result",
                    "15": "leading_zeros",
                    "2": "leading_zeroes_count"
                },
                "uVar2": {
                    "1": "result",
                    "2": "shift",
                    "14": "shift_amount",
                    "3": "shifted_input"
                },
                "iVar3": {
                    "1": "result",
                    "2": "shifted_value",
                    "7": "offset",
                    "10": "constant",
                    "4": "constant_value"
                },
                "uVar4": {
                    "1": "highest_bit",
                    "3": "temp_value",
                    "7": "mask",
                    "2": "comparison_result"
                },
                "uVar1_2": {
                    "1": "leading_zeroes_copy"
                },
                "uVar1_3": {
                    "1": "leading_zeroes_copy2"
                },
                "uVar1_4": {
                    "1": "leading_zeroes_copy3"
                },
                "uVar2_2": {
                    "1": "shift_amount_copy"
                },
                "uVar2_3": {
                    "1": "shift_amount_copy2"
                },
                "uVar2_4": {
                    "1": "shift_amount_copy3"
                },
                "uVar2_5": {
                    "1": "shift_amount_copy4"
                },
                "uVar2_6": {
                    "1": "shift_amount_copy5"
                },
                "uVar2_7": {
                    "1": "shift_amount_copy6"
                },
                "uVar2_8": {
                    "1": "shift_amount_copy7"
                },
                "uVar2_9": {
                    "1": "shift_amount_copy8"
                },
                "uVar2_10": {
                    "1": "shift_amount_copy9"
                },
                "uVar2_11": {
                    "1": "shift_amount_copy10"
                },
                "uVar2_12": {
                    "1": "shift_amount_copy11"
                },
                "uVar2_13": {
                    "1": "shift_amount_copy12"
                },
                "uVar2_14": {
                    "1": "shift_amount_copy13"
                },
                "uVar2_15": {
                    "1": "shift_amount_copy14"
                },
                "uVar2_16": {
                    "1": "shift_amount_copy15"
                },
                "uVar2_17": {
                    "1": "shift_amount_copy16"
                },
                "uVar2_18": {
                    "1": "shift_amount_copy17"
                },
                "uVar2_19": {
                    "1": "shift_amount_copy18"
                },
                "uVar2_20": {
                    "1": "shift_amount_copy19"
                },
                "uVar2_21": {
                    "1": "shift_amount_copy20"
                },
                "uVar2_22": {
                    "1": "shift_amount_copy21"
                },
                "uVar2_23": {
                    "1": "shift_amount_copy22"
                },
                "uVar2_24": {
                    "1": "shift_amount_copy23"
                },
                "uVar2_25": {
                    "1": "shift_amount_copy24"
                },
                "uVar2_26": {
                    "1": "shift_amount_copy25"
                },
                "uVar2_27": {
                    "1": "shift_amount_copy26"
                },
                "uVar2_28": {
                    "1": "shift_amount_copy27"
                },
                "uVar2_29": {
                    "1": "shift_amount_copy28"
                },
                "uVar2_30": {
                    "1": "shift_amount_copy29"
                },
                "uVar2_31": {
                    "1": "shift_amount_copy30"
                },
                "uVar2_32": {
                    "1": "shift_amount_copy31"
                },
                "uVar2_temp": {
                    "1": "shift_temp"
                },
                "uVar1_temp": {
                    "1": "leading_zeros_temp"
                },
                "uVar2_final": {
                    "1": "shift_final"
                },
                "uVar1_final": {
                    "1": "leading_zeros_final"
                },
                "uVar2_final2": {
                    "1": "shift_final2"
                },
                "uVar1_final2": {
                    "1": "leading_zeros_final2"
                },
                "uVar5": {
                    "1": "check_value",
                    "5": "result"
                },
                "uVar6": {
                    "1": "is_negative"
                },
                "uVar7": {
                    "1": "is_masked"
                },
                "uVar1_original": {
                    "1": "leading_zero_count_original"
                },
                "uVar2_original": {
                    "1": "shift_amount_original"
                },
                "iVar3_original": {
                    "1": "conversion_factor_original"
                },
                "uVar4_original": {
                    "1": "condition_check_original"
                },
                "uVar1_before_if": {
                    "1": "leading_zero_count_before_if"
                },
                "uVar4_before_if": {
                    "1": "condition_check_before_if"
                },
                "uVar2 & 0xff": {
                    "1": "shift_modulus"
                },
                "uVar1 + 0x18": {
                    "1": "left_shift_amount"
                },
                "uVar2 & 0x7fffffff": {
                    "1": "bit_mask"
                },
                "uVar2 >> 0x1f": {
                    "1": "sign_extension"
                },
                "0x1f - uVar2 & 0xff": {
                    "1": "right_shift_amount"
                },
                "uVar4Temp": {
                    "1": "overflow_temp"
                },
                "uVar2Temp": {
                    "1": "shift_amount_temp"
                },
                "uVarTemp": {
                    "1": "temp_var"
                },
                "uVarFinal": {
                    "1": "final_var"
                },
                "uVar3": {
                    "1": "mask"
                },
                "uVar_1": {
                    "1": "result"
                },
                "uVar_2": {
                    "1": "result"
                },
                "uVar_4": {
                    "1": "result"
                }
            }
        },
        "FUN_08000c44": {
            "entrypoint": "0x08000c44",
            "current_name": "count_bits_08000c44",
            "code": "\nuint count_bits_08000c44(uint input)\n\n{\n  uint leading_zeros;\n  uint shift_amount;\n  uint sign_bit;\n  int result;\n  \n  sign_bit = input & 0x80000000;\n  if ((int)sign_bit < 0) {\n    input = -input;\n  }\n  if (input == 0) {\n    return 0;\n  }\n  leading_zeros = LZCOUNT(input);\n  shift_amount = leading_zeros - 8;\n  result = ((sign_bit | 0x4b000000) - 0x800000) + shift_amount * -0x800000;\n  if (7 < leading_zeros) {\n    leading_zeros = 0 << (shift_amount & 0xff);\n    sign_bit = result + (input << (shift_amount & 0xff)) +\n            (0U >> (0x20 - shift_amount & 0xff)) + (uint)(0x7fffffff < leading_zeros);\n    if (leading_zeros == 0x80000000) {\n      sign_bit = sign_bit & 0xfffffffe;\n    }\n    return sign_bit;\n  }\n  shift_amount = input << leading_zeros + 0x18;\n  sign_bit = result + ((input >> (0x20 - (leading_zeros + 0x18) & 0xff)) - ((int)shift_amount >> 0x1f));\n  if ((shift_amount & 0x7fffffff) == 0) {\n    sign_bit = sign_bit & ~(shift_amount >> 0x1f);\n  }\n  return sign_bit;\n}\n\n",
            "renaming": {
                "FUN_08000c44": "count_bits_08000c44",
                "param_1": "input",
                "uVar1": "leading_zeros",
                "uVar2": "shift_amount",
                "uVar3": "sign_bit",
                "iVar4": "result"
            },
            "calling": [
                "FUN_08002b48",
                "FUN_0800411c",
                "FUN_08002d88",
                "FUN_08002cb0",
                "FUN_0800483c",
                "FUN_08002bf0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08000c44": {
                    "1": "count_leading_zero_bits",
                    "6": "count_bits",
                    "5": "count_leading_zeros",
                    "3": "reverse_bits"
                },
                "param_1": {
                    "17": "input",
                    "5": "input_number",
                    "1": "num",
                    "2": "number"
                },
                "uVar1": {
                    "1": "leading_zeros_count",
                    "4": "leading_zeroes",
                    "17": "leading_zeros"
                },
                "uVar2": {
                    "1": "shifted_sign_bit",
                    "20": "shift_amount",
                    "5": "shift"
                },
                "uVar3": {
                    "1": "result",
                    "18": "sign_bit",
                    "5": "is_negative",
                    "2": "sign_mask"
                },
                "iVar4": {
                    "1": "fixed_part",
                    "3": "adjusted_value",
                    "25": "result"
                },
                "uVar5": {
                    "1": "mask"
                },
                "uVar6": {
                    "1": "shifted_input"
                },
                "uVar7": {
                    "1": "temp"
                },
                "uVar8": {
                    "1": "is_overflow"
                },
                "uVar9": {
                    "1": "high_bits"
                },
                "uVar1_": {
                    "1": "leading_zeros_shifted"
                },
                "uVar3_": {
                    "1": "shifted_intermediate"
                },
                "uVar3__": {
                    "1": "sign_mask"
                },
                "uVar3___": {
                    "1": "negative"
                },
                "uVar3____": {
                    "1": "positive"
                },
                "uVar3_____": {
                    "1": "is_negative"
                },
                "uVar3______": {
                    "1": "is_positive"
                },
                "uVar3_______": {
                    "1": "even_positive"
                },
                "uVar3________": {
                    "1": "zero_check"
                },
                "uVar3_________": {
                    "1": "even_positive_mask"
                },
                "uVar3__________": {
                    "1": "shifted_sign_mask"
                },
                "uVar3___________": {
                    "1": "adjusted_sign_mask"
                },
                "uVar3____________": {
                    "1": "adjusted_output"
                },
                "uVar2_": {
                    "1": "shifted_input"
                },
                "uVar2__": {
                    "1": "positive_mask"
                },
                "uVar2___": {
                    "1": "adjusted_intermediate"
                }
            }
        },
        "FUN_08000cec": {
            "entrypoint": "0x08000cec",
            "current_name": "calculate_float_08000cec",
            "code": "\nuint calculate_float_08000cec(uint input1,uint input2,undefined4 param3,uint param4)\n\n{\n  longlong product;\n  uint result;\n  uint temp1;\n  int sum;\n  int difference;\n  uint product;\n  int exponent_diff_abs;\n  uint temp;\n  bool is_zero;\n  bool is_negative;\n  \n  temp1 = input1 >> 0x17 & 0xff;\n  is_zero = temp1 == 0;\n  if (!is_zero) {\n    param4 = input2 >> 0x17 & 0xff;\n    is_zero = param4 == 0;\n  }\n  if (!is_zero) {\n    is_zero = temp1 == 0xff;\n  }\n  if (!is_zero) {\n    is_zero = param4 == 0xff;\n  }\n  if (is_zero) {\n    param4 = input2 >> 0x17 & 0xff;\n    if (temp1 == 0xff || param4 == 0xff) {\n      is_zero = input1 == 0 || input1 == 0x80000000;\n      result = input2;\n      if (input1 != 0 && input1 != 0x80000000) {\n        is_zero = input2 == 0;\n        result = input1;\n      }\n      if (!is_zero) {\n        is_zero = input2 == 0x80000000;\n      }\n      temp = result;\n      if (((is_zero) || ((temp1 == 0xff && ((result & 0x7fffff) != 0)))) ||\n         ((param4 == 0xff && (temp = input2, (input2 & 0x7fffff) != 0)))) {\n        return temp | 0x7fc00000;\n      }\n      result = result ^ input2;\n      goto LAB_08000e3c;\n    }\n    is_zero = (input1 & 0x7fffffff) == 0;\n    if (!is_zero) {\n      is_zero = (input2 & 0x7fffffff) == 0;\n    }\n    if (is_zero) {\n      return (input1 ^ input2) & 0x80000000;\n    }\n    is_zero = temp1 == 0;\n    result = input1 & 0x80000000;\n    while( true ) {\n      if (is_zero) {\n        input1 = input1 << 1;\n        is_zero = (input1 & 0x800000) == 0;\n      }\n      if (!is_zero) break;\n      temp1 = temp1 - 1;\n    }\n    input1 = input1 | result;\n    is_zero = param4 == 0;\n    result = input2 & 0x80000000;\n    while( true ) {\n      if (is_zero) {\n        input2 = input2 << 1;\n        is_zero = (input2 & 0x800000) == 0;\n      }\n      if (!is_zero) break;\n      param4 = param4 - 1;\n    }\n    input2 = input2 | result;\n  }\n  sum = temp1 + param4;\n  temp = input1 ^ input2;\n  temp1 = input1 << 9;\n  is_zero = temp1 == 0;\n  if (!is_zero) {\n    input2 = input2 << 9;\n    is_zero = input2 == 0;\n  }\n  if (is_zero) {\n    if (temp1 == 0) {\n      input2 = input2 << 9;\n    }\n    result = temp & 0x80000000 | input1 & 0x7fffff | input2 >> 9;\n    is_negative = subtraction_overflow(sum,0x7f);\n    difference = sum + -0x7f;\n    is_zero = difference == 0;\n    exponent_diff_abs = difference;\n    if (!is_zero && 0x7e < sum) {\n      is_negative = subtraction_overflow(0xff,difference);\n      exponent_diff_abs = 0xff - difference;\n      is_zero = difference == 0xff;\n    }\n    if (!is_zero && exponent_diff_abs < 0 == is_negative) {\n      result = result | difference * 0x800000;\n    }\n    if (!is_zero && exponent_diff_abs < 0 == is_negative) {\n      return result;\n    }\n    result = result | 0x800000;\n    product = 0;\n    is_negative = subtraction_overflow(difference,1);\n    temp = sum - 0x80;\n    is_zero = temp == 0;\n    temp1 = temp;\n  }\n  else {\n    product = (ulonglong)(temp1 >> 5 | 0x8000000) * (ulonglong)(input2 >> 5 | 0x8000000);\n    product = (uint)product;\n    result = (uint)((ulonglong)product >> 0x20);\n    is_zero = result < 0x800000;\n    if (is_zero) {\n      result = result << 1;\n    }\n    if (is_zero) {\n      result = result | product >> 0x1f;\n      product = product << 1;\n    }\n    result = temp & 0x80000000 | result;\n    temp = (sum + -0x7f) - (uint)is_zero;\n    is_negative = subtraction_overflow(temp,0xfd);\n    is_zero = temp == 0xfd;\n    temp1 = temp - 0xfd;\n    if (temp < 0xfe) {\n      result = result + temp * 0x800000 + (uint)(0x7fffffff < product);\n      if (product == 0x80000000) {\n        result = result & 0xfffffffe;\n      }\n      return result;\n    }\n  }\n  if (is_zero || (int)temp1 < 0 != is_negative) {\n    is_zero = (int)(temp + 0x19) < 0;\n    if (temp == 0xffffffe7 || is_zero != addition_overflow(temp,0x19)) {\n      result = result & 0x80000000;\n    }\n    if (temp != 0xffffffe7 && is_zero == addition_overflow(temp,0x19)) {\n      temp1 = (result << 1) >> (-temp & 0xff);\n      temp = result << (temp + 0x20 & 0xff);\n      temp1 = ((uint)((result & 0x80000000) != 0) << 0x1f | temp1 >> 1) + (uint)((byte)temp1 & 1);\n      if ((product | temp << 1) == 0) {\n        temp1 = temp1 & ~(temp >> 0x1f);\n      }\n      return temp1;\n    }\n    return result;\n  }\nLAB_08000e3c:\n  return result & 0x80000000 | 0x7f800000;\n}\n\n",
            "renaming": {
                "FUN_08000cec": "calculate_float_08000cec",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar3": "temp1",
                "uVar2": "result",
                "uVar6": "product",
                "uVar8": "temp",
                "iVar4": "sum",
                "iVar5": "difference",
                "iVar7": "exponent_diff_abs",
                "bVar9": "is_zero",
                "bVar10": "is_negative",
                "lVar1": "product",
                "uVar": "temp3",
                "SBORROW4": "subtraction_overflow",
                "SCARRY4": "addition_overflow"
            },
            "calling": [
                "FUN_08004a30",
                "FUN_08002b48",
                "FUN_08004a84",
                "FUN_08002d88",
                "FUN_08002cb0",
                "FUN_08003330",
                "FUN_0800483c",
                "FUN_08002f28",
                "FUN_08002bf0",
                "FUN_08002ec0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08000cec": {
                    "1": "calculate_result",
                    "2": "calculate_floating_point_number",
                    "9": "calculate_float",
                    "6": "calculate_floating_point"
                },
                "param_1": {
                    "3": "operand1",
                    "1": "input_a",
                    "6": "value1",
                    "2": "num1",
                    "10": "input1"
                },
                "param_2": {
                    "10": "input2",
                    "1": "second_float",
                    "3": "input_2",
                    "2": "num2",
                    "6": "value2"
                },
                "param_3": {
                    "4": "flag",
                    "1": "value_3",
                    "8": "param3",
                    "2": "num3",
                    "3": "input3"
                },
                "param_4": {
                    "1": "fourth_float",
                    "2": "unused",
                    "7": "param4",
                    "3": "input4"
                },
                "uVar3": {
                    "1": "byte1",
                    "2": "shift_amount"
                },
                "uVar2": {
                    "1": "exponent",
                    "24": "result"
                },
                "uVar6": {
                    "4": "temp_result",
                    "1": "result",
                    "7": "product"
                },
                "uVar8": {
                    "1": "result_with_sign",
                    "2": "temp2",
                    "4": "temp",
                    "3": "result"
                },
                "iVar4": {
                    "3": "exponent_sum",
                    "1": "sum_of_bit17_to24",
                    "2": "sum_exponents",
                    "11": "sum"
                },
                "iVar5": {
                    "5": "difference",
                    "1": "shift",
                    "2": "shift_diff"
                },
                "iVar7": {
                    "1": "shift_diff_adjusted",
                    "4": "exponent_diff_abs"
                },
                "bVar9": {
                    "3": "is_zero1",
                    "2": "is_zero_exponent",
                    "1": "check_bounds2",
                    "13": "is_zero"
                },
                "bVar10": {
                    "11": "is_negative",
                    "1": "is_borrow",
                    "3": "condition2",
                    "2": "flag2"
                },
                "lVar1": {
                    "1": "result",
                    "2": "long_product",
                    "4": "product"
                },
                "uVar7": {
                    "1": "result3_high"
                },
                "iVar9": {
                    "1": "carry_flag"
                },
                "iVar10": {
                    "1": "carry_flag2"
                },
                "uVar11": {
                    "1": "shifted_mantissa"
                },
                "uVar12": {
                    "1": "shifted_mantissa_sign_bit"
                },
                "uVar13": {
                    "1": "shifted_mantissa_rounded"
                },
                "uVar14": {
                    "1": "shifted_mantissa_bit"
                },
                "uVar15": {
                    "1": "truncated_exp"
                },
                "uVar16": {
                    "1": "shifted_mantissa_sign_extended"
                },
                "uVar": {
                    "1": "temp3"
                },
                "SBORROW4": {
                    "1": "subtraction_overflow"
                },
                "SCARRY4": {
                    "1": "signed_addition_overflow"
                },
                "param_4_2": {
                    "1": "flag2"
                },
                "isValid1": {
                    "1": "is_valid_input1"
                },
                "isValid2": {
                    "1": "is_valid_input2"
                },
                "isValid3": {
                    "1": "is_valid_exponent1"
                },
                "isValid4": {
                    "1": "is_valid_exponent2"
                },
                "iVar11": {
                    "1": "shift_excess_adjusted"
                }
            }
        },
        "FUN_08000e54": {
            "entrypoint": "0x08000e54",
            "current_name": "calculate_floating_point_08000e54",
            "code": "\nuint calculate_floating_point_08000e54(uint input1,uint input2,undefined4 input3,uint input4)\n\n{\n  uint temp1;\n  uint temp2;\n  int temp3;\n  uint temp4;\n  int temp5;\n  uint result;\n  bool is_zero;\n  bool condition2;\n  bool condition3;\n  \n  temp2 = input1 >> 0x17 & 0xff;\n  is_zero = temp2 == 0;\n  if (!is_zero) {\n    input4 = input2 >> 0x17 & 0xff;\n    is_zero = input4 == 0;\n  }\n  if (!is_zero) {\n    is_zero = temp2 == 0xff;\n  }\n  if (!is_zero) {\n    is_zero = input4 == 0xff;\n  }\n  if (is_zero) {\n    input4 = input2 >> 0x17 & 0xff;\n    result = input1;\n    if (temp2 == 0xff) {\n      if (((input1 & 0x7fffff) != 0) || (result = input2, input4 == 0xff)) {\nLAB_08000e4a:\n        return result | 0x7fc00000;\n      }\n    }\n    else {\n      if (input4 == 0xff) {\n        result = input2;\n        if ((input2 & 0x7fffff) == 0) {\nLAB_08000e00:\n          return (input1 ^ input2) & 0x80000000;\n        }\n        goto LAB_08000e4a;\n      }\n      is_zero = (input1 & 0x7fffffff) == 0;\n      if (!is_zero) {\n        is_zero = (input2 & 0x7fffffff) == 0;\n      }\n      if (!is_zero) {\n        is_zero = temp2 == 0;\n        result = input1 & 0x80000000;\n        while( true ) {\n          if (is_zero) {\n            input1 = input1 << 1;\n            is_zero = (input1 & 0x800000) == 0;\n          }\n          if (!is_zero) break;\n          temp2 = temp2 - 1;\n        }\n        input1 = input1 | result;\n        is_zero = input4 == 0;\n        result = input2 & 0x80000000;\n        while( true ) {\n          if (is_zero) {\n            input2 = input2 << 1;\n            is_zero = (input2 & 0x800000) == 0;\n          }\n          if (!is_zero) break;\n          input4 = input4 - 1;\n        }\n        input2 = input2 | result;\n        goto LAB_08000e6c;\n      }\n      if ((input1 & 0x7fffffff) == 0) {\n        if ((input2 & 0x7fffffff) != 0) goto LAB_08000e00;\n        goto LAB_08000e4a;\n      }\n    }\n    input1 = input1 ^ input2;\n  }\n  else {\nLAB_08000e6c:\n    temp3 = temp2 - input4;\n    if (input2 << 9 == 0) {\n      input1 = (input1 ^ input2) & 0x80000000 | input1 & 0x7fffff;\n      condition3 = signed_carry_check(temp3,0x7f);\n      temp5 = temp3 + 0x7f;\n      is_zero = temp5 < 0;\n      condition2 = temp5 == 0;\n      if (!condition2 && is_zero == condition3) {\n        condition3 = signed_borrow_check(0xff,temp5);\n        is_zero = 0xff - temp5 < 0;\n        condition2 = temp5 == 0xff;\n      }\n      if (!condition2 && is_zero == condition3) {\n        input1 = input1 | temp5 * 0x800000;\n      }\n      if (!condition2 && is_zero == condition3) {\n        return input1;\n      }\n      input1 = input1 | 0x800000;\n      temp2 = 0;\n      condition2 = signed_borrow_check(temp5,1);\n      temp4 = temp3 + 0x7e;\n      is_zero = temp4 == 0;\n      result = temp4;\n    }\n    else {\n      temp1 = (input2 << 9) >> 4 | 0x10000000;\n      temp2 = (input1 << 9) >> 4 | 0x10000000;\n      input1 = (input1 ^ input2) & 0x80000000;\n      is_zero = temp1 <= temp2;\n      if (!is_zero) {\n        temp2 = temp2 << 1;\n      }\n      temp4 = temp3 + 0x7d + (uint)is_zero;\n      result = 0x800000;\n      do {\n        if (temp1 <= temp2) {\n          temp2 = temp2 - temp1;\n          input1 = input1 | result;\n        }\n        is_zero = temp1 >> 1 <= temp2;\n        if (is_zero) {\n          temp2 = temp2 - (temp1 >> 1);\n        }\n        if (is_zero) {\n          input1 = input1 | result >> 1;\n        }\n        is_zero = temp1 >> 2 <= temp2;\n        if (is_zero) {\n          temp2 = temp2 - (temp1 >> 2);\n        }\n        if (is_zero) {\n          input1 = input1 | result >> 2;\n        }\n        is_zero = temp1 >> 3 <= temp2;\n        if (is_zero) {\n          temp2 = temp2 - (temp1 >> 3);\n        }\n        if (is_zero) {\n          input1 = input1 | result >> 3;\n        }\n        temp2 = temp2 * 0x10;\n        is_zero = temp2 == 0;\n        if (!is_zero) {\n          result = result >> 4;\n          is_zero = result == 0;\n        }\n      } while (!is_zero);\n      condition2 = signed_borrow_check(temp4,0xfd);\n      is_zero = temp4 == 0xfd;\n      result = temp4 - 0xfd;\n      if (temp4 < 0xfe) {\n        input1 = input1 + temp4 * 0x800000 + (uint)(temp1 <= temp2);\n        if (temp2 - temp1 == 0) {\n          input1 = input1 & 0xfffffffe;\n        }\n        return input1;\n      }\n    }\n    if (is_zero || (int)result < 0 != condition2) {\n      is_zero = (int)(temp4 + 0x19) < 0;\n      if (temp4 == 0xffffffe7 || is_zero != signed_carry_check(temp4,0x19)) {\n        input1 = input1 & 0x80000000;\n      }\n      if (temp4 == 0xffffffe7 || is_zero != signed_carry_check(temp4,0x19)) {\n        return input1;\n      }\n      result = (input1 << 1) >> (-temp4 & 0xff);\n      temp4 = input1 << (temp4 + 0x20 & 0xff);\n      result = ((uint)((input1 & 0x80000000) != 0) << 0x1f | result >> 1) + (uint)((byte)result & 1);\n      if ((temp2 | temp4 << 1) == 0) {\n        result = result & ~(temp4 >> 0x1f);\n      }\n      return result;\n    }\n  }\n  return input1 & 0x80000000 | 0x7f800000;\n}\n\n",
            "renaming": {
                "FUN_08000e54": "calculate_floating_point_08000e54",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "temp1",
                "uVar2": "temp2",
                "iVar3": "temp3",
                "uVar4": "temp4",
                "iVar5": "temp5",
                "uVar6": "result",
                "bVar7": "is_zero",
                "bVar8": "condition2",
                "bVar9": "condition3",
                "SCARRY4": "signed_carry_check",
                "SBORROW4": "signed_borrow_check"
            },
            "calling": [
                "FUN_0800411c",
                "FUN_08003330",
                "FUN_0800483c",
                "FUN_08002f28"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08000e54": {
                    "1": "convert_to_float",
                    "2": "reverse_float_bits",
                    "3": "reverse_float",
                    "8": "calculate_float",
                    "9": "calculate_floating_point"
                },
                "param_1": {
                    "1": "input_a",
                    "7": "float1",
                    "3": "num1",
                    "8": "input1"
                },
                "param_2": {
                    "1": "second_float",
                    "8": "input2",
                    "7": "float2",
                    "3": "value2"
                },
                "param_3": {
                    "1": "flags",
                    "2": "undefined",
                    "5": "unused",
                    "6": "input3"
                },
                "param_4": {
                    "1": "w",
                    "2": "unused",
                    "4": "param4",
                    "6": "input4"
                },
                "uVar1": {
                    "1": "multiplier",
                    "3": "temp_var1",
                    "2": "quotient",
                    "11": "temp1"
                },
                "uVar2": {
                    "1": "var2",
                    "5": "exponent1",
                    "2": "shifted_float2",
                    "11": "temp2"
                },
                "iVar3": {
                    "4": "exponent_diff",
                    "1": "float_difference",
                    "7": "temp3",
                    "2": "shift_diff",
                    "5": "difference"
                },
                "uVar4": {
                    "2": "temp1",
                    "1": "bitwise_temp3",
                    "3": "temp3",
                    "7": "temp4"
                },
                "iVar5": {
                    "1": "temp4",
                    "4": "temp2",
                    "7": "temp5",
                    "2": "sum"
                },
                "uVar6": {
                    "1": "result_mantissa",
                    "5": "temp6",
                    "20": "result"
                },
                "bVar7": {
                    "7": "condition1",
                    "1": "is_zero_or_ff",
                    "4": "flag1",
                    "11": "is_zero",
                    "2": "is_zero1"
                },
                "bVar8": {
                    "2": "is_overflow",
                    "1": "is_same_sign",
                    "7": "condition2",
                    "4": "flag2"
                },
                "bVar9": {
                    "1": "flag2",
                    "2": "is_borrow",
                    "4": "flag3",
                    "3": "overflow",
                    "7": "condition3"
                },
                "uVar5": {
                    "1": "temp_exponent"
                },
                "SCARRY4": {
                    "1": "signed_subtract_overflow"
                },
                "SBORROW4": {
                    "1": "signed_borrow_check"
                },
                "uVar10": {
                    "1": "constant"
                },
                "iVar11": {
                    "1": "offset"
                }
            }
        },
        "FUN_08000f9c": {
            "entrypoint": "0x08000f9c",
            "current_name": "check_overflow_08000f9c",
            "code": "\nuint check_overflow_08000f9c(uint input_1,uint input_2)\n\n{\n  bool is_negative;\n  uint input_1_doubled;\n  uint input_2_doubled;\n  uint combined_inputs;\n  bool is_zero;\n  \n  input_1_doubled = input_1 * 2;\n  input_2_doubled = input_2 * 2;\n  if (((int)input_1_doubled >> 0x18 == -1 || (int)input_2_doubled >> 0x18 == -1) &&\n     ((((int)input_1_doubled >> 0x18 == -1 && ((input_1 & 0x7fffff) != 0)) ||\n      (((int)input_2_doubled >> 0x18 == -1 && ((input_2 & 0x7fffff) != 0)))))) {\n    result 1;\n  }\n  combined_inputs = input_1_doubled | input_2 & 0x7fffffff;\n  is_zero = combined_inputs == 0;\n  if (!is_zero) {\n    combined_inputs = input_1 ^ input_2;\n    is_zero = combined_inputs == 0;\n  }\n  is_negative = -1 < combined_scaled_as_signed;\n  if (is_negative) {\n    input_1 = input_1_doubled + input_2 * -2;\n    is_zero = input_1 == 0;\n  }\n  if ((is_negative && input_2_doubled <= input_1_doubled) && !is_zero) {\n    input_1 = (int)input_2 >> 0x1f;\n  }\n  if (!is_negative || input_2_doubled > input_1_doubled) {\n    input_1 = ~((int)input_2 >> 0x1f);\n  }\n  if (!is_zero) {\n    input_1 = input_1 | 1;\n  }\n  result input_1;\n}\n\n",
            "renaming": {
                "FUN_08000f9c": "check_overflow_08000f9c",
                "param_1": "input_1",
                "param_2": "input_2",
                "uVar2": "input_1_doubled",
                "uVar3": "input_2_doubled",
                "uVar4": "combined_inputs",
                "bVar1": "is_negative",
                "bVar5": "is_zero",
                "return": "result",
                "(int)uVar4": "combined_scaled_as_signed"
            },
            "calling": [
                "FUN_08001004"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08000f9c": {
                    "1": "double_positive_check",
                    "6": "check_overflow",
                    "4": "calculate_result",
                    "3": "multiply_and_check_overflow"
                },
                "param_1": {
                    "15": "input_1",
                    "2": "result",
                    "1": "output",
                    "5": "input1"
                },
                "param_2": {
                    "6": "input2",
                    "1": "value2",
                    "2": "multiplier",
                    "15": "input_2"
                },
                "uVar2": {
                    "1": "number_1_times_2",
                    "3": "input_1_times_2",
                    "2": "doubled_multiplicand",
                    "4": "input_1_doubled"
                },
                "uVar3": {
                    "2": "doubled_multiplier",
                    "1": "input2_times2",
                    "4": "input_2_doubled",
                    "3": "input_2_times_2"
                },
                "uVar4": {
                    "1": "bitwise_or_result",
                    "2": "combined",
                    "6": "combined_input",
                    "9": "combined_inputs",
                    "4": "result"
                },
                "bVar1": {
                    "1": "is_combined_result_negative",
                    "18": "is_negative",
                    "3": "is_combined_negative"
                },
                "bVar5": {
                    "1": "zero_flag",
                    "21": "is_zero",
                    "4": "is_combined_zero"
                },
                "return": {
                    "1": "result"
                },
                "param_1TimesTwo": {
                    "1": "temp1"
                },
                "param_1TimesNegativeTwo": {
                    "1": "temp2"
                },
                "return_value": {
                    "2": "result"
                },
                "param_1 | 1": {
                    "1": "result"
                },
                "param_1 & 0x7fffff": {
                    "1": "value1_last_23_bits"
                },
                "param_2 & 0x7fffff": {
                    "1": "value2_last_23_bits"
                },
                "param_1 * 2": {
                    "1": "value1_doubled"
                },
                "param_2 * 2": {
                    "1": "value2_doubled"
                },
                "uVar2 + param_2 * -2": {
                    "1": "value1_subtracted_by_twice_value2"
                },
                "(int)uVar2 >> 0x18": {
                    "1": "value1_most_significant_byte"
                },
                "(int)uVar3 >> 0x18": {
                    "1": "value2_most_significant_byte"
                },
                "(int)param_2 >> 0x1f": {
                    "1": "value2_most_significant_bit_shifted"
                },
                "~((int)param_2 >> 0x1f)": {
                    "1": "complement_of_value2_most_significant_bit_shifted"
                },
                "(int)uVar4": {
                    "1": "combined_scaled_as_signed"
                }
            }
        },
        "FUN_08000ffc": {
            "entrypoint": "0x08000ffc",
            "current_name": "execute_function_08000ffc",
            "code": "\nvoid execute_function_08000ffc(undefined4 input1,undefined4 input2)\n\n{\n  FUN_08001004(input2,input1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000ffc": "execute_function_08000ffc",
                "param_1": "input1",
                "param_2": "input2"
            },
            "calling": [
                "FUN_08001050",
                "FUN_08001064"
            ],
            "called": [
                "FUN_08001004"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08000ffc": {
                    "1": "execute_operation",
                    "2": "initialize",
                    "14": "execute_function"
                },
                "param_1": {
                    "2": "input_param1",
                    "1": "function_parameter1",
                    "4": "arg1",
                    "7": "input1",
                    "6": "input_param"
                },
                "param_2": {
                    "1": "function_param2",
                    "7": "input2",
                    "6": "output_param",
                    "2": "input_2",
                    "4": "arg2"
                },
                "FUN_08001004": {
                    "1": "perform_operation",
                    "3": "call_sub_function"
                }
            }
        },
        "FUN_08001004": {
            "entrypoint": "0x08001004",
            "current_name": "concatenate_params_08001004",
            "code": "\nundefined8 concatenate_params_08001004(undefined4 first_param,undefined4 second_param)\n\n{\n  FUN_08000f9c();\n  return CONCAT44(second_param,first_param);\n}\n\n",
            "renaming": {
                "FUN_08001004": "concatenate_params_08001004",
                "param_1": "first_param",
                "param_2": "second_param"
            },
            "calling": [
                "FUN_08001014",
                "FUN_08001028",
                "FUN_08000ffc"
            ],
            "called": [
                "FUN_08000f9c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08001004": {
                    "1": "combine_params",
                    "18": "concatenate_params",
                    "4": "concatenate_parameters",
                    "3": "concatenate_values"
                },
                "param_1": {
                    "1": "source_value",
                    "3": "value1",
                    "2": "first_parameter",
                    "13": "first_param"
                },
                "param_2": {
                    "1": "input_2",
                    "2": "second_parameter",
                    "13": "second_param",
                    "3": "value2"
                },
                "FUN_08000f9c": {
                    "4": "perform_operation",
                    "2": "perform_sub_function",
                    "1": "concat_values",
                    "6": "perform_concatenation",
                    "3": "concatenate_values"
                },
                "FUN_08000f9c.param_1": {
                    "1": "param1"
                },
                "FUN_08000f9c.param_2": {
                    "1": "param2"
                },
                "FUN_08000f9c[1]": {
                    "1": "param1_helper"
                },
                "FUN_08000f9c[2]": {
                    "1": "param2_helper"
                },
                "FUN_08000f9c(unsigned int, unsigned int)": {
                    "1": "calculate_checksum"
                }
            }
        },
        "FUN_08001014": {
            "entrypoint": "0x08001014",
            "current_name": "check_if_initialized_08001014",
            "code": "\nbool check_if_initialized_08001014(void)\n\n{\n  char input_char;\n  \n  FUN_08001004();\n  return input_char != '\\0';\n}\n\n",
            "renaming": {
                "FUN_08001014": "check_if_initialized_08001014",
                "in_ZR": "input_char"
            },
            "calling": [
                "FUN_08003330"
            ],
            "called": [
                "FUN_08001004"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08001014": {
                    "1": "check_nonzero_char",
                    "2": "check_input",
                    "4": "check_if_initialized"
                },
                "in_ZR": {
                    "1": "is_null",
                    "2": "is_not_zero",
                    "7": "input_char",
                    "3": "result",
                    "5": "input_character"
                },
                "FUN_08001004": {
                    "1": "execute_initialization"
                }
            }
        },
        "FUN_08001028": {
            "entrypoint": "0x08001028",
            "current_name": "check_if_null_terminated_08001028",
            "code": "\nbool check_if_null_terminated_08001028(void)\n\n{\n  char input_char;\n  \n  FUN_08001004();\n  return input_char == '\\0';\n}\n\n",
            "renaming": {
                "FUN_08001028": "check_if_null_terminated_08001028",
                "in_CY": "input_char"
            },
            "calling": [
                "FUN_08004a84",
                "FUN_08002ee8",
                "FUN_0800483c"
            ],
            "called": [
                "FUN_08001004"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08001028": {
                    "2": "check_if_cy_is_empty",
                    "1": "check_if_in_cy_null",
                    "5": "check_if_string_empty",
                    "6": "check_if_null_terminated"
                },
                "in_CY": {
                    "1": "input_cy",
                    "2": "cy_input",
                    "12": "input_char",
                    "11": "input_character"
                },
                "FUN_08001004": {
                    "1": "initialize_cy"
                }
            }
        },
        "FUN_08001050": {
            "entrypoint": "0x08001050",
            "current_name": "check_cy_zr_08001050",
            "code": "\nbool check_cy_zr_08001050(void)\n\n{\n  undefined zero_flag;\n  undefined carry_flag;\n  \n  FUN_08000ffc();\n  return !(bool)carry_flag || (bool)zero_flag;\n}\n\n",
            "renaming": {
                "FUN_08001050": "check_cy_zr_08001050",
                "in_CY": "carry_flag",
                "in_ZR": "zero_flag"
            },
            "calling": [
                "FUN_08002ee8"
            ],
            "called": [
                "FUN_08000ffc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08001050": {
                    "1": "check_for_zero_values",
                    "8": "check_cy_zr",
                    "3": "check_conditions",
                    "6": "check_cy_and_zr",
                    "2": "check_zero_and_carry"
                },
                "in_CY": {
                    "1": "is_carry_return",
                    "2": "is_carry_set",
                    "17": "carry_flag"
                },
                "in_ZR": {
                    "1": "is_zero_return",
                    "2": "is_zero_result",
                    "3": "is_zero",
                    "14": "zero_flag"
                },
                "FUN_08000ffc": {
                    "1": "perform_operation"
                },
                "param_1": {
                    "1": "first_param",
                    "2": "unused_param"
                },
                "param_2": {
                    "1": "arg2",
                    "2": "unused_param"
                }
            }
        },
        "FUN_08001064": {
            "entrypoint": "0x08001064",
            "current_name": "check_null_termination_08001064",
            "code": "\nbool check_null_termination_08001064(void)\n\n{\n  char input_character;\n  \n  FUN_08000ffc();\n  return input_character == '\\0';\n}\n\n",
            "renaming": {
                "FUN_08001064": "check_null_termination_08001064",
                "in_CY": "input_character"
            },
            "calling": [
                "FUN_08004a84",
                "FUN_0800483c"
            ],
            "called": [
                "FUN_08000ffc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08001064": {
                    "1": "check_null_terminator",
                    "6": "check_null_termination",
                    "3": "check_if_null_terminated",
                    "2": "is_input_null"
                },
                "in_CY": {
                    "1": "null_terminated",
                    "9": "input_char",
                    "17": "input_character"
                },
                "FUN_08000ffc": {
                    "1": "perform_initialization"
                }
            }
        },
        "FUN_08001078": {
            "entrypoint": "0x08001078",
            "current_name": "extract_integer_08001078",
            "code": "\nuint extract_integer_08001078(uint input_value)\n\n{\n  uint shifted_value;\n  uint difference;\n  \n  if (input_value << 1 < 0x7f000000) {\n    return 0;\n  }\n  shifted_value = (input_value << 1) >> 0x18;\n  difference = 0x9e - shifted_value;\n  if (shifted_value < 0x9f && difference != 0) {\n    shifted_value = (input_value << 8 | 0x80000000) >> (difference & 0xff);\n    if ((input_value & 0x80000000) != 0) {\n      shifted_value = -shifted_value;\n    }\n    return shifted_value;\n  }\n  if ((difference == 0xffffff9f) && ((input_value & 0x7fffff) != 0)) {\n    return 0;\n  }\n  input_value = input_value & 0x80000000;\n  if (input_value == 0) {\n    input_value = 0x7fffffff;\n  }\n  return input_value;\n}\n\n",
            "renaming": {
                "param_1": "input_value",
                "uVar1": "shifted_value",
                "uVar2": "difference",
                "FUN_08001078": "extract_integer_08001078"
            },
            "calling": [
                "FUN_0800426c",
                "FUN_0800411c",
                "FUN_08002f28"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "<original_function_name>": {
                    "1": "decode_integer"
                },
                "param_1": {
                    "7": "input",
                    "2": "input_number",
                    "14": "input_value",
                    "1": "output"
                },
                "uVar1": {
                    "2": "converted_value",
                    "10": "shifted_value",
                    "1": "result",
                    "4": "shifted_bits",
                    "9": "shifted_input"
                },
                "uVar2": {
                    "1": "temp2",
                    "2": "inverse_shift",
                    "3": "offset",
                    "18": "difference"
                },
                "uVar3": {
                    "1": "shift_count",
                    "4": "shifted_value",
                    "3": "shift_amount",
                    "2": "result"
                },
                "uVar4": {
                    "1": "signed_shifted_num",
                    "2": "sign_extended_value",
                    "4": "result"
                },
                "FUN_08001078": {
                    "1": "extract_and_convert_number",
                    "2": "decode_integer"
                },
                "uVar1_prev": {
                    "1": "extracted_value_shifted"
                },
                "uVar2_prev": {
                    "1": "extracted_value_difference"
                },
                "param_1_prev": {
                    "1": "input_masked"
                },
                "uVar5": {
                    "1": "converted_value"
                }
            }
        },
        "FUN_080010c4": {
            "entrypoint": "0x080010c4",
            "current_name": "reverse_bits_080010c4",
            "code": "\nuint reverse_bits_080010c4(uint input_value)\n\n{\n  uint shift_amount;\n  \n  if (((input_value & 0x80000000) != 0) || (input_value << 1 < 0x7f000000)) {\n    return 0;\n  }\n  shift_amount = 0x9e - ((input_value << 1) >> 0x18);\n  if (-1 < (int)shift_amount) {\n    return (input_value << 8 | 0x80000000) >> (shift_amount & 0xff);\n  }\n  if ((shift_amount == 0xffffff9f) && ((input_value & 0x7fffff) != 0)) {\n    return 0;\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_080010c4": "reverse_bits_080010c4",
                "param_1": "input_value",
                "uVar1": "shift_amount"
            },
            "calling": [
                "FUN_08004a84"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080010c4": {
                    "1": "perform_reverse_operation",
                    "2": "extract_bits",
                    "3": "calculate_shifted_value",
                    "9": "reverse_bits"
                },
                "param_1": {
                    "10": "input",
                    "1": "number",
                    "14": "input_value",
                    "2": "num"
                },
                "uVar1": {
                    "6": "shifted_value",
                    "1": "shifted_input",
                    "14": "shift_amount",
                    "2": "shift_count",
                    "5": "result"
                },
                "0x80000000": {
                    "2": "msb_mask",
                    "1": "sign_bit"
                },
                "0x7f000000": {
                    "1": "upper_limit"
                },
                "0x9e": {
                    "2": "shift_constant",
                    "1": "shift_amount"
                },
                "0x18": {
                    "2": "shift_amount",
                    "1": "shift_count"
                },
                "0xff": {
                    "1": "bits_to_keep"
                },
                "0xffffff9f": {
                    "2": "special_value",
                    "1": "check_value"
                },
                "0x7fffff": {
                    "1": "mask_value"
                },
                "0xffffffff": {
                    "1": "error_code"
                }
            }
        },
        "FUN_08001104": {
            "entrypoint": "0x08001104",
            "current_name": "initialize_system_08001104",
            "code": "\nundefined4 initialize_system_08001104(undefined4 input_parameter)\n\n{\n  uint time_in_milliseconds;\n  \n  time_in_milliseconds = FUN_08002214();\n  FUN_08001214(time_in_milliseconds / 1000);\n  FUN_08001194(0xffffffff,input_parameter,0);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001104": "initialize_system_08001104",
                "param_1": "input_parameter",
                "uVar1": "time_in_milliseconds"
            },
            "calling": [
                "FUN_0800209c",
                "FUN_08001128"
            ],
            "called": [
                "FUN_08002214",
                "FUN_08001194",
                "FUN_08001214"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08001104": {
                    "3": "initialize_function",
                    "1": "print_and_return_result",
                    "2": "initialize_process",
                    "8": "initialize_system"
                },
                "param_1": {
                    "8": "input_parameter",
                    "3": "input",
                    "1": "param",
                    "4": "input_param",
                    "2": "user_input"
                },
                "uVar1": {
                    "3": "time_in_millis",
                    "1": "timestamp",
                    "14": "time_in_milliseconds",
                    "2": "result",
                    "6": "time_in_seconds"
                },
                "FUN_08002214": {
                    "3": "get_time",
                    "1": "get_elapsed_time",
                    "2": "get_current_time_in_seconds",
                    "14": "get_current_time"
                },
                "FUN_08001214": {
                    "13": "convert_to_seconds",
                    "1": "process_time",
                    "5": "convert_milliseconds_to_seconds",
                    "2": "convert_time_to_seconds"
                },
                "FUN_08001194": {
                    "2": "execute_task",
                    "1": "execute_operation",
                    "3": "perform_operation"
                },
                "param_2": {
                    "4": "param2"
                },
                "param_3": {
                    "1": "unknown_parameter",
                    "4": "param3"
                },
                "undefined4 param_1": {
                    "1": "task_parameter"
                }
            }
        },
        "FUN_08001128": {
            "entrypoint": "0x08001128",
            "current_name": "initialize_system_08001128",
            "code": "\n\n\nundefined4 initialize_system_08001128(void)\n\n{\n  _DAT_40022000 = _DAT_40022000 | 0x10;\n  FUN_08001170(3);\n  FUN_08001104(0);\n  FUN_08004ccc();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001128": "initialize_system_08001128"
            },
            "calling": [
                "FUN_0800458c"
            ],
            "called": [
                "FUN_08001170",
                "FUN_08001104",
                "FUN_08004ccc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08001128": {
                    "3": "set_flag_and_call_functions",
                    "2": "initialize_hardware",
                    "1": "set_bit_and_call_functions",
                    "13": "initialize_system",
                    "4": "initialize_device"
                },
                "param_1": {
                    "1": "flag_value",
                    "4": "mode",
                    "2": "flags"
                },
                "_DAT_40022000": {
                    "1": "flags"
                },
                "FUN_08001170": {
                    "1": "execute_function_with_param",
                    "5": "set_mode",
                    "2": "set_configuration",
                    "3": "set_flag"
                },
                "FUN_08001104": {
                    "1": "perform_initialization",
                    "2": "initialize_process"
                },
                "FUN_08004ccc": {
                    "1": "perform_initialization",
                    "2": "perform_cleanup"
                },
                "param_2": {
                    "2": "param_1",
                    "1": "unused_param"
                },
                "param_3": {
                    "1": "setting",
                    "2": "param_2"
                },
                "DAT_40022000": {
                    "1": "flag_variable"
                }
            }
        },
        "FUN_0800114c": {
            "entrypoint": "0x0800114c",
            "current_name": "increment_counter_0800114c",
            "code": "\nvoid increment_counter_0800114c(void)\n\n{\n  DAT_20000244 = DAT_20000244 + 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800114c": "increment_counter_0800114c"
            },
            "calling": [
                "FUN_080041ae"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800114c": {
                    "1": "increment_global_count",
                    "24": "increment_counter",
                    "3": "increment_data_counter"
                },
                "DAT_20000244": {
                    "1": "data_value",
                    "21": "counter",
                    "2": "data_counter"
                },
                "": {
                    "3": ""
                },
                "<unnamed_variable_1>": {
                    "1": "counter"
                }
            }
        },
        "FUN_0800115c": {
            "entrypoint": "0x0800115c",
            "current_name": "get_data_0800115c",
            "code": "\nundefined4 get_data_0800115c(void)\n\n{\n  return DAT_20000244;\n}\n\n",
            "renaming": {
                "FUN_0800115c": "get_data_0800115c"
            },
            "calling": [
                "FUN_08001530",
                "thunk_FUN_0800115c",
                "FUN_08001b58",
                "FUN_08004c18",
                "FUN_0800209c",
                "FUN_08001828",
                "FUN_08001938",
                "FUN_080014e2",
                "thunk_FUN_0800115c",
                "FUN_080015e8",
                "FUN_080016f4",
                "FUN_08001460"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800115c": {
                    "1": "get_global_data",
                    "8": "get_data_value",
                    "19": "get_data"
                },
                "DAT_20000244": {
                    "13": "data",
                    "1": "global_variable_value",
                    "2": "global_value",
                    "6": "data_value",
                    "4": "result"
                }
            }
        },
        "FUN_08001168": {
            "entrypoint": "0x08001168",
            "current_name": "FUNC_08001168",
            "code": "\nvoid FUNC_08001168(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001168": "FUNC_08001168"
            },
            "calling": [
                "FUN_08001b58",
                "thunk_FUN_08001168"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08001170": {
            "entrypoint": "0x08001170",
            "current_name": "set_param_bits_08001170",
            "code": "\n\n\nvoid set_param_bits_08001170(uint input_value)\n\n{\n  _DAT_e000ed0c = _DAT_e000ed0c & 0xf8ff | 0x5fa0000 | (input_value & 7) << 8;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001170": "set_param_bits_08001170",
                "param_1": "input_value"
            },
            "calling": [
                "FUN_08001128",
                "FUN_08004ccc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08001170": {
                    "1": "set_control_bits",
                    "3": "configure_memory_protection",
                    "4": "set_param_bits",
                    "2": "set_memory_configuration"
                },
                "param_1": {
                    "5": "value",
                    "1": "param",
                    "9": "input_value",
                    "2": "configuration"
                },
                "param_1 & 7": {
                    "1": "bit_mask"
                },
                "_DAT_e000ed0c": {
                    "1": "memory_register",
                    "2": "control_register",
                    "10": "register_value"
                }
            }
        },
        "FUN_08001194": {
            "entrypoint": "0x08001194",
            "current_name": "update_memory_08001194",
            "code": "\n\n\nvoid update_memory_08001194(uint address,uint data,uint mask)\n\n{\n  undefined new_value;\n  uint shift_amount;\n  uint shifted_mask;\n  uint adjusted_shift;\n  \n  shifted_mask = (uint)(_DAT_e000ed0c << 0x15) >> 0x1d;\n  shift_amount = 7 - shifted_mask;\n  adjusted_shift = shifted_mask + 4;\n  if (3 < shift_amount) {\n    shift_amount = 4;\n  }\n  if (adjusted_shift < 7) {\n    shifted_mask = 0;\n  }\n  shift_amount = (1 << (shift_amount & 0xff)) - 1;\n  if (6 < adjusted_shift) {\n    shifted_mask = shifted_mask - 3;\n  }\n  new_value = (undefined)\n          ((mask & (1 << (shifted_mask & 0xff)) - 1U | (data & shift_amount) << (shifted_mask & 0xff)) << 4);\n  if (-1 < (int)address) {\n    shifted_mask = address + 0xe000e100;\n  }\n  else {\n    shift_amount = 0xe000ed14;\n    shifted_mask = address & 0xf;\n  }\n  if (-1 < (int)address) {\n    *(undefined *)(shifted_mask + 0x300) = new_value;\n  }\n  else {\n    *(undefined *)(shift_amount + shifted_mask) = new_value;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001194": "update_memory_08001194",
                "param_1": "address",
                "param_2": "data",
                "param_3": "mask",
                "uVar1": "new_value",
                "uVar2": "shift_amount",
                "uVar3": "shifted_mask",
                "uVar4": "adjusted_shift"
            },
            "calling": [
                "FUN_08004e7c",
                "FUN_08001104",
                "FUN_08004514",
                "FUN_08004ccc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08001194": {
                    "2": "write_data_to_memory",
                    "3": "update_memory_location",
                    "1": "update_memory_region",
                    "7": "update_memory",
                    "4": "write_to_memory"
                },
                "param_1": {
                    "14": "address",
                    "1": "address_param",
                    "6": "input_value",
                    "2": "address_offset"
                },
                "param_2": {
                    "6": "data1",
                    "8": "data",
                    "1": "input_2",
                    "5": "mask_value",
                    "2": "value"
                },
                "param_3": {
                    "1": "input3",
                    "10": "mask",
                    "6": "data2",
                    "2": "bit_mask"
                },
                "uVar1": {
                    "1": "decoded_data",
                    "2": "updated_byte",
                    "4": "result"
                },
                "uVar2": {
                    "1": "shift_count",
                    "2": "num_bits",
                    "21": "shift_amount"
                },
                "uVar3": {
                    "1": "shifted_address",
                    "4": "shift_amount",
                    "2": "shifted_value"
                },
                "uVar4": {
                    "1": "adjusted_shift_amount",
                    "2": "shifted_value"
                },
                "*(undefined *)(uVar3 + 0x300)": {
                    "1": "memory_location_1"
                },
                "*(undefined *)(uVar2 + uVar3)": {
                    "1": "memory_location_2"
                },
                "uVar5": {
                    "1": "mask"
                },
                "uVar6": {
                    "1": "shifted_mask"
                },
                "uVar7": {
                    "1": "shifted_data2"
                },
                "uVar8": {
                    "1": "updated_address_offset"
                }
            }
        },
        "FUN_080011fc": {
            "entrypoint": "0x080011fc",
            "current_name": "set_bit_in_array_080011fc",
            "code": "\nvoid set_bit_in_array_080011fc(uint bit_index)\n\n{\n  *(int *)((bit_index >> 5) * 4 + -0x1fff1f00) = 1 << (bit_index & 0x1f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080011fc": "set_bit_in_array_080011fc",
                "param_1": "bit_index"
            },
            "calling": [
                "FUN_08004e7c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080011fc": {
                    "4": "set_bit",
                    "2": "set_bit_at_position",
                    "3": "set_bit_in_memory",
                    "1": "store_bitwise_shifted_value",
                    "9": "set_bit_value",
                    "10": "set_bit_in_array"
                },
                "param_1": {
                    "1": "input",
                    "4": "input_value",
                    "8": "bit_position",
                    "11": "bit_index",
                    "2": "value",
                    "5": "index"
                },
                "*(int *)((param_1 >> 5) * 4 + -0x1fff1f00)": {
                    "1": "bit_pointer",
                    "2": "bit_array"
                },
                "1 << (param_1 & 0x1f)": {
                    "5": "bit_value"
                },
                "param_1 >> 5": {
                    "1": "index"
                },
                "param_1 & 0x1f": {
                    "1": "bit_position"
                },
                "<new_variable_name_1>": {
                    "1": "<new_variable_name_1>"
                },
                "<no_change>": {
                    "1": "bit_array"
                }
            }
        },
        "FUN_08001214": {
            "entrypoint": "0x08001214",
            "current_name": "initialize_memory_08001214",
            "code": "\n\n\nundefined4 initialize_memory_08001214(int value)\n\n{\n  if (value - 1U < 0x1000000) {\n    _DAT_e000e014 = value - 1U;\n    DAT_e000ed23 = 0xf0;\n    _DAT_e000e018 = 0;\n    _DAT_e000e010 = 7;\n    success 0;\n  }\n  success 1;\n}\n\n",
            "renaming": {
                "FUN_08001214": "initialize_memory_08001214",
                "param_1": "value",
                "return": "success"
            },
            "calling": [
                "FUN_08001104",
                "FUN_08004514"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08001214": {
                    "3": "set_initial_values",
                    "1": "set_limits",
                    "2": "initialize_data",
                    "10": "initialize_memory"
                },
                "param_1": {
                    "3": "size",
                    "4": "input_value",
                    "2": "memory_size",
                    "18": "value",
                    "1": "input_number"
                },
                "_DAT_e000e014": {
                    "1": "result",
                    "2": "register1",
                    "3": "base_address",
                    "7": "memory_address"
                },
                "DAT_e000ed23": {
                    "3": "flag",
                    "1": "permissions",
                    "4": "status",
                    "5": "memory_value",
                    "2": "register2"
                },
                "_DAT_e000e018": {
                    "1": "memory_offset",
                    "2": "offset",
                    "8": "counter"
                },
                "_DAT_e000e010": {
                    "4": "flag",
                    "1": "register_4",
                    "2": "limit",
                    "3": "counter"
                },
                "return": {
                    "1": "success"
                }
            }
        },
        "FUN_08001240": {
            "entrypoint": "0x08001240",
            "current_name": "set_flag_08001240",
            "code": "\n\n\nvoid set_flag_08001240(int value)\n\n{\n  if (value == 4) {\n    _DAT_e000e010 = _DAT_e000e010 | 4;\n  }\n  else {\n    _DAT_e000e010 = _DAT_e000e010 & 0xfffffffb;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001240": "set_flag_08001240",
                "param_1": "value"
            },
            "calling": [
                "FUN_08004514"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08001240": {
                    "1": "set_flag_bit",
                    "2": "set_flag_if_four",
                    "4": "update_status",
                    "8": "set_flag"
                },
                "param_1": {
                    "5": "flag",
                    "3": "input",
                    "1": "input_param",
                    "9": "value",
                    "4": "status",
                    "8": "flag_value"
                },
                "_DAT_e000e010": {
                    "5": "status_register",
                    "4": "register_value",
                    "1": "flag_value",
                    "6": "flag_register"
                },
                "4": {
                    "1": "status_flag"
                },
                "param_2": {
                    "1": "flag_state"
                }
            }
        },
        "FUN_08001258": {
            "entrypoint": "0x08001258",
            "current_name": "FUNC_08001258",
            "code": "\nvoid FUNC_08001258(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001258": "FUNC_08001258"
            },
            "calling": [],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08001264": {
            "entrypoint": "0x08001264",
            "current_name": "update_flags_and_registers_08001264",
            "code": "\n\n\nvoid update_flags_and_registers_08001264(uint *input_flags,uint *input)\n\n{\n  uint updated_value;\n  uint bit_mask;\n  uint opcode;\n  int index;\n  uint i;\n  uint bit_mask;\n  uint comparison_value;\n  uint *output_pointer;\n  int shift_amount;\n  \n  updated_value = 0;\n  i = 0;\n  do {\n    bit_mask = 1 << (i & 0xff);\n    bit_mask = bit_mask & *input;\n    if (bit_mask == bit_mask) {\n      opcode = input[1];\n      if (opcode == 0x12) {\n        updated_value = input[3] + 0xc;\n      }\n      else if (opcode < 0x13) {\n        if (opcode == 2) {\n          updated_value = input[3] + 8;\n        }\n        else if (opcode < 3) {\n          if (opcode == 0) goto LAB_080013be;\n          if (opcode == 1) {\n            updated_value = input[3];\n          }\n        }\n        else if (opcode == 3) {\n          updated_value = 0;\n        }\n        else if (opcode == 0x11) {\n          updated_value = input[3] + 4;\n        }\n      }\n      else {\n        if (opcode != 0x10210000) {\n          if (opcode < 0x10210001) {\n            if (opcode != 0x10110000) {\n              comparison_value = 0x10120000;\nLAB_080013b8:\n              if (opcode != comparison_value) goto LAB_080012a8;\n            }\n          }\n          else if ((opcode != 0x10310000) && (opcode != 0x10320000)) {\n            comparison_value = 0x10220000;\n            goto LAB_080013b8;\n          }\n        }\nLAB_080013be:\n        updated_value = input[2];\n        if (updated_value == 0) {\n          updated_value = 4;\n        }\n        else {\n          if (updated_value == 1) {\n            input_flags[4] = bit_mask;\n          }\n          if (updated_value != 1) {\n            input_flags[5] = bit_mask;\n          }\n          updated_value = 8;\n        }\n      }\nLAB_080012a8:\n      if (bit_mask < 0x100) {\n        bit_mask = *input_flags;\n        opcode = i << 2;\n        output_pointer = input_flags;\n      }\n      else {\n        bit_mask = input_flags[1];\n        opcode = (i + 0x3ffffff8) * 4;\n      }\n      if (0xff < bit_mask) {\n        output_pointer = input_flags + 1;\n      }\n      *output_pointer = bit_mask & ~(0xf << (opcode & 0xff)) | updated_value << (opcode & 0xff);\n      output_pointer = (uint *)input[1];\n      if (((uint)output_pointer & 0x10000000) != 0) {\n        _DAT_40021018 = _DAT_40021018 | 1;\n        shift_amount = (i & 3) << 2;\n        if (input_flags == (uint *)0x40010800) {\n          index = 0;\n        }\n        else if (input_flags == (uint *)0x40010c00) {\n          index = 1;\n        }\n        else if (input_flags == (uint *)0x40011000) {\n          index = 2;\n        }\n        else if (input_flags == (uint *)0x40011400) {\n          index = 3;\n        }\n        else {\n          index = 4;\n        }\n        *(uint *)((i & 0xfffffffc) + 0x40010008) =\n             index << shift_amount | *(uint *)((i & 0xfffffffc) + 0x40010008) & ~(0xf << shift_amount);\n        if (((uint)output_pointer & 0x10000) == 0) {\n          _DAT_40010400 = _DAT_40010400 & ~bit_mask;\n        }\n        else {\n          _DAT_40010400 = _DAT_40010400 | bit_mask;\n        }\n        if (((uint)output_pointer & 0x20000) == 0) {\n          _DAT_40010404 = _DAT_40010404 & ~bit_mask;\n        }\n        else {\n          _DAT_40010404 = _DAT_40010404 | bit_mask;\n        }\n        if (((uint)output_pointer & 0x100000) == 0) {\n          _DAT_40010408 = _DAT_40010408 & ~bit_mask;\n        }\n        else {\n          _DAT_40010408 = _DAT_40010408 | bit_mask;\n        }\n        if (((uint)output_pointer & 0x200000) == 0) {\n          _DAT_4001040c = _DAT_4001040c & ~bit_mask;\n        }\n        else {\n          _DAT_4001040c = bit_mask | _DAT_4001040c;\n        }\n      }\n    }\n    i = i + 1;\n    if (i == 0x10) {\n      return;\n    }\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08001264": "update_flags_and_registers_08001264",
                "param_1": "input_flags",
                "param_2": "input",
                "uVar1": "updated_value",
                "uVar2": "bit_mask",
                "uVar3": "opcode",
                "iVar4": "index",
                "uVar5": "i",
                "uVar6": "bit_mask",
                "uVar7": "comparison_value",
                "unaff_r10": "output_pointer",
                "iVar8": "shift_amount"
            },
            "calling": [
                "FUN_08004e14",
                "FUN_08004e7c",
                "FUN_08004d48",
                "FUN_0800458c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08001264": {
                    "1": "update_flag_registers",
                    "3": "update_flags",
                    "5": "update_flags_and_registers",
                    "2": "update_parameters"
                },
                "param_1": {
                    "1": "bits_to_update",
                    "4": "flags",
                    "2": "bits_to_be_updated",
                    "5": "input_flags"
                },
                "param_2": {
                    "2": "input_values",
                    "1": "data_pointer2",
                    "3": "input"
                },
                "uVar1": {
                    "2": "updated_value1",
                    "1": "status_value",
                    "3": "updated_value"
                },
                "uVar2": {
                    "1": "bit",
                    "3": "bit_check",
                    "15": "bit_mask"
                },
                "uVar3": {
                    "1": "value_type",
                    "5": "opcode",
                    "2": "constant",
                    "3": "value"
                },
                "iVar4": {
                    "1": "register_offset",
                    "3": "register_index",
                    "16": "index"
                },
                "uVar5": {
                    "2": "bit_position",
                    "1": "loop_var1",
                    "7": "i",
                    "4": "bit_index",
                    "5": "index"
                },
                "uVar6": {
                    "5": "bit",
                    "1": "shifted_bit",
                    "6": "bit_mask"
                },
                "uVar7": {
                    "1": "value",
                    "2": "constant_value",
                    "6": "comparison_value"
                },
                "unaff_r10": {
                    "1": "target_registers",
                    "2": "output_array",
                    "3": "output_pointer"
                },
                "iVar8": {
                    "1": "shift_index",
                    "3": "bit_index",
                    "2": "shift",
                    "6": "shift_amount",
                    "4": "offset"
                },
                "uVar1_temp": {
                    "1": "temp_value"
                },
                "uVar2_temp": {
                    "1": "temp_mask"
                },
                "uVar3_temp": {
                    "1": "temp_type"
                },
                "uVar6_temp": {
                    "1": "temp_bit"
                },
                "uVar5_temp": {
                    "1": "temp_index"
                },
                "_DAT_40021018": {
                    "1": "register_1"
                },
                "_DAT_40010400": {
                    "1": "register2"
                },
                "_DAT_40010404": {
                    "1": "register_3"
                },
                "_DAT_40010408": {
                    "1": "register4"
                },
                "_DAT_4001040c": {
                    "1": "register5"
                }
            }
        },
        "FUN_08001424": {
            "entrypoint": "0x08001424",
            "current_name": "set_param_value_08001424",
            "code": "\nvoid set_param_value_08001424(int base_address,int value,int is_shifted)\n\n{\n  if (is_shifted == 0) {\n    value = value << 0x10;\n  }\n  *(int *)(base_address + 0x10) = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001424": "set_param_value_08001424",
                "param_1": "base_address",
                "param_2": "value",
                "param_3": "is_shifted"
            },
            "calling": [
                "FUN_08004490",
                "FUN_08003f3c",
                "FUN_0800458c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08001424": {
                    "6": "set_parameter_value",
                    "2": "set_parameter",
                    "1": "store_parameter_at_address",
                    "11": "set_param_value"
                },
                "param_1": {
                    "1": "parameter_address",
                    "4": "object_address",
                    "18": "base_address",
                    "3": "target_address"
                },
                "param_2": {
                    "3": "shifted_value",
                    "17": "value",
                    "1": "arg2",
                    "2": "parameter_value"
                },
                "param_3": {
                    "7": "flag",
                    "3": "shift",
                    "2": "shift_value",
                    "1": "is_shift",
                    "8": "is_shifted"
                },
                "param_1 + 0x10": {
                    "1": "address_to_update",
                    "4": "target_address"
                },
                "param_2 << 0x10": {
                    "1": "shifted_arg2",
                    "6": "shifted_value"
                },
                "*(int *)(param_1 + 0x10)": {
                    "1": "object_addr_plus_offset"
                },
                "param_4": {
                    "1": "shift_amount"
                }
            }
        },
        "FUN_0800142e": {
            "entrypoint": "0x0800142e",
            "current_name": "apply_xor_0800142e",
            "code": "\nvoid apply_xor_0800142e(int base_address,uint value)\n\n{\n  *(uint *)(base_address + 0xc) = value ^ *(uint *)(base_address + 0xc);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800142e": "apply_xor_0800142e",
                "param_1": "base_address",
                "param_2": "value"
            },
            "calling": [
                "FUN_08004490"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800142e": {
                    "1": "xor_param_and_target",
                    "2": "bitwise_xor",
                    "3": "apply_xor"
                },
                "param_1": {
                    "2": "memory_address",
                    "1": "input_param",
                    "8": "base_address",
                    "5": "input_address"
                },
                "param_2": {
                    "1": "param_2",
                    "7": "input_value",
                    "4": "value_to_xor",
                    "10": "value"
                },
                "param_1 + 0xc": {
                    "1": "current_address",
                    "3": "target_address"
                },
                "*(uint *)(param_1 + 0xc)": {
                    "1": "original_value",
                    "6": "current_value"
                },
                "0xc": {
                    "1": "ptr1c",
                    "3": "offset"
                },
                "param_2 ^ *(uint *)(param_1 + 0xc)": {
                    "1": "result",
                    "2": "updated_value"
                },
                "*(uint *)(param_1 + 0xc) = param_2 ^ *(uint *)(param_1 + 0xc)": {
                    "1": "updated_value"
                },
                "new_variable_name_1": {
                    "1": "current_value"
                },
                "<original_variable_name_1>": {
                    "1": "offset"
                },
                "PTR_09004000": {
                    "1": "target"
                },
                "PTR_09005000": {
                    "1": "param"
                },
                "DAT_09006000": {
                    "1": "xor_result"
                },
                "<original_variable_name>": {
                    "1": "<new_variable_name>"
                }
            }
        },
        "FUN_08001436": {
            "entrypoint": "0x08001436",
            "current_name": "check_flag_status_08001436",
            "code": "\nundefined4 check_flag_status_08001436(int *input_array)\n\n{\n  int flag_value;\n  \n  flag_value = *input_array;\n  if ((*(unsigned_int *)(flag_value + 0x14) & 0x400) != 0) {\n    *(unsigned_int *)(flag_value + 0x14) = *(unsigned_int *)(flag_value + 0x14) & 0xfffffbff;\n    error_code = 4;\n    *(undefined *)((int)input_array + 0x35) = 0x20;\n    *(undefined *)(input_array + 0xd) = 0;\n    return 1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001436": "check_flag_status_08001436",
                "param_1": "input_array",
                "iVar1": "flag_value",
                "param_1[0xe]": "error_code",
                "uint": "unsigned_int"
            },
            "calling": [
                "FUN_080014e2"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08001436": {
                    "1": "update_flags_and_values",
                    "2": "check_bit_and_set",
                    "12": "check_flag_status"
                },
                "param_1": {
                    "3": "flag",
                    "2": "flags",
                    "1": "flag_array",
                    "5": "input_array"
                },
                "iVar1": {
                    "2": "flag_address",
                    "1": "array_value",
                    "12": "value",
                    "13": "flag_value"
                },
                "*(uint *)(iVar1 + 0x14)": {
                    "4": "flag_value",
                    "3": "flags",
                    "1": "array_element_masked_value"
                },
                "param_1[0xe]": {
                    "1": "flag_value",
                    "12": "error_code",
                    "2": "result"
                },
                "*(undefined *)((int)param_1 + 0x35)": {
                    "1": "first_byte",
                    "2": "flag_symbol",
                    "5": "status"
                },
                "*(undefined *)(param_1 + 0xd)": {
                    "1": "flag_character",
                    "2": "temp"
                },
                "param_1 + 0xd": {
                    "2": "pointer",
                    "1": "permission_flags"
                },
                "0x14": {
                    "1": "flag_register_offset"
                },
                "0x400": {
                    "1": "flag_bitmask"
                },
                "0xfffffbff": {
                    "1": "flag_disable_bit"
                },
                "0xe": {
                    "1": "index"
                },
                "0x35": {
                    "1": "some_byte_offset"
                },
                "(int)param_1 + 0x35": {
                    "1": "flag_location"
                },
                "uint": {
                    "2": "unsigned_int"
                },
                "e": {
                    "1": "error_code"
                },
                "*(uint *)(iVar1 + 0x14) & 0x400": {
                    "1": "is_bit_set"
                },
                "1": {
                    "1": "success"
                },
                "0": {
                    "1": "failure"
                },
                "(param_1 + 0xd)": {
                    "1": "flag_value"
                },
                "[iVar1 + 0x14]": {
                    "1": "flag_value"
                },
                "*param_1": {
                    "1": "ptr_value"
                },
                "(uint *)(iVar1 + 0x14)": {
                    "1": "permissions_value"
                },
                "0xd": {
                    "1": "some_index"
                },
                "*(uint *)(iVar1 + 0x14) & 0xfffffbff": {
                    "1": "clear_bit"
                },
                "param_1 + 0x35": {
                    "1": "permissions_buffer"
                },
                "*(param_1 + 0xe)": {
                    "1": "flags"
                },
                "*(int *)((int)dataArray + 0x35)": {
                    "1": "status"
                },
                "*(param_1 + 0xd)": {
                    "1": "other_value"
                }
            }
        },
        "FUN_08001460": {
            "entrypoint": "0x08001460",
            "current_name": "check_permissions_08001460",
            "code": "\nundefined4 check_permissions_08001460(uint **param_array,uint flag,uint timeout)\n\n{\n  int start_time;\n  int current_time;\n  uint value;\n  uint *data_ptr;\n  \n  start_time = FUN_0800115c();\n  do {\n    data_ptr = *param_array;\n    if ((flag << 8) >> 0x18 == 1) {\n      value = data_ptr[5];\n    }\n    else {\n      value = data_ptr[6];\n    }\n    if ((flag & 0xffff & ~value) == 0) {\n      result 0;\n    }\n    if ((int)(data_ptr[5] << 0x15) < 0) {\n      *data_ptr = *data_ptr | 0x200;\n      data_ptr[5] = data_ptr[5] & 0xfffffbff;\n      param_array[0xe] = (uint *)0x4;\n      *(undefined *)((int)param_array + 0x35) = 0x20;\n      *(undefined *)(param_array + 0xd) = 0;\n      result 1;\n    }\n  } while ((timeout == 0xffffffff) ||\n          ((timeout != 0 && (current_time = FUN_0800115c(), (uint)(current_time - start_time) <= timeout))));\n  *(undefined *)((int)param_array + 0x35) = 0x20;\n  *(undefined *)(param_array + 0xd) = 0;\n  result 3;\n}\n\n",
            "renaming": {
                "FUN_08001460": "check_permissions_08001460",
                "param_1": "param_array",
                "param_2": "flag",
                "param_3": "timeout",
                "iVar1": "start_time",
                "iVar2": "current_time",
                "puVar4": "data_ptr",
                "uVar3": "value",
                "return": "result"
            },
            "calling": [
                "FUN_08001530",
                "FUN_080015e8"
            ],
            "called": [
                "FUN_0800115c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08001460": {
                    "1": "check_parameter_validity",
                    "2": "check_access",
                    "3": "check_condition",
                    "5": "check_permissions"
                },
                "param_1": {
                    "1": "param",
                    "4": "data",
                    "3": "input_data",
                    "6": "param_array"
                },
                "param_2": {
                    "20": "flag",
                    "1": "flag_length",
                    "2": "value1"
                },
                "param_3": {
                    "1": "val2",
                    "22": "timeout",
                    "3": "time_limit",
                    "2": "value2"
                },
                "iVar1": {
                    "2": "result",
                    "1": "start_value",
                    "16": "start_time",
                    "4": "initial_value",
                    "3": "result1"
                },
                "iVar2": {
                    "1": "return_value2",
                    "2": "new_value",
                    "17": "current_time",
                    "4": "result2",
                    "3": "current_value"
                },
                "puVar4": {
                    "1": "flag_data",
                    "5": "data",
                    "6": "data_ptr",
                    "2": "ptr",
                    "3": "array_ptr"
                },
                "uVar3": {
                    "1": "flag_value",
                    "2": "check_value",
                    "15": "value"
                },
                "FUN_0800115c": {
                    "2": "get_current_time"
                },
                "*(undefined *)((int)param_1 + 0x35)": {
                    "1": "param_1_offset_35"
                },
                "*(undefined *)(param_1 + 0xd)": {
                    "1": "param_1_offset_d"
                },
                "uVar5": {
                    "1": "value2"
                },
                "return": {
                    "1": "result"
                },
                "param_1[x]": {
                    "1": "buffer[x]"
                },
                "param_1[5]": {
                    "1": "buffer[5]"
                },
                "param_1[6]": {
                    "1": "buffer[6]"
                },
                "DAT_080016b4": {
                    "1": "constant"
                },
                "DAT_080016b8": {
                    "1": "mask"
                },
                "DAT_080016bc": {
                    "1": "value"
                },
                "DAT_080016c0": {
                    "1": "offset"
                },
                "DAT_08001a6c": {
                    "1": "flag_value"
                },
                "DAT_08001a70": {
                    "1": "permission_value"
                },
                "*puVar4": {
                    "1": "dereferenced_pointer"
                }
            }
        },
        "FUN_080014e2": {
            "entrypoint": "0x080014e2",
            "current_name": "check_condition_080014e2",
            "code": "\nundefined4 check_condition_080014e2(int *array,uint value)\n\n{\n  int result1;\n  int result;\n  \n  result1 = FUN_0800115c();\n  while( true ) {\n    if (*(int *)(*array + 0x14) << 0x18 < 0) {\n      return 0;\n    }\n    result = FUN_08001436(array);\n    if (result != 0) break;\n    if ((value != 0xffffffff) &&\n       ((value == 0 || (result = FUN_0800115c(), value < (uint)(result - result1))))) {\n      flag1 = flag1 | 0x20;\n      *(undefined *)((int)array + 0x35) = 0x20;\n      *(undefined *)(array + 0xd) = 0;\n      return 3;\n    }\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_080014e2": "check_condition_080014e2",
                "param_1": "array",
                "param_2": "value",
                "iVar1": "result1",
                "iVar2": "result",
                "param_1[0xe]": "flag1"
            },
            "calling": [
                "FUN_08001530",
                "FUN_08001828",
                "FUN_080015e8"
            ],
            "called": [
                "FUN_0800115c",
                "FUN_08001436"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080014e2": {
                    "1": "check_condition_and_perform_action",
                    "2": "process_data",
                    "3": "check_data_validity",
                    "4": "check_validity"
                },
                "param_1": {
                    "1": "input_data",
                    "4": "data",
                    "10": "array",
                    "2": "param_list",
                    "6": "input_array"
                },
                "param_2": {
                    "1": "max_iterations",
                    "2": "length",
                    "6": "value",
                    "3": "size",
                    "5": "limit"
                },
                "iVar1": {
                    "1": "return_value1",
                    "5": "initial_value",
                    "10": "result1",
                    "7": "start_value"
                },
                "iVar2": {
                    "16": "result",
                    "2": "return_value",
                    "1": "return_value2",
                    "10": "result2"
                },
                "FUN_0800115c": {
                    "1": "get_threshold",
                    "4": "get_current_time",
                    "2": "get_current_value"
                },
                "FUN_08001436": {
                    "4": "process_data",
                    "1": "check_array_validity"
                },
                "0x14": {
                    "1": "offset1"
                },
                "0x18": {
                    "1": "shift_value1"
                },
                "0xffffffff": {
                    "1": "max_limit"
                },
                "0x20": {
                    "1": "flag_value"
                },
                "0x35": {
                    "1": "flag_offset"
                },
                "param_1[0xe]": {
                    "1": "flag1"
                },
                "param_1 + 0x35": {
                    "1": "flag2"
                },
                "param_1 + 0xd": {
                    "1": "flag3"
                }
            }
        },
        "FUN_08001530": {
            "entrypoint": "0x08001530",
            "current_name": "set_flag_and_check_08001530",
            "code": "\nundefined4 set_flag_and_check_08001530(uint **data,uint value1,uint value2,int condition,uint param)\n\n{\n  int result;\n  int result2;\n  uint *ptr;\n  uint **ptr2;\n  uint temp_value1;\n  uint temp_value2;\n  \n  **data = **data | 0x100;\n  ptr2 = data;\n  temp_value1 = value1;\n  temp_value2 = value2;\n  result = FUN_0800115c();\n  do {\n    ptr = *data;\n    do {\n      if ((int)(ptr[5] << 0x1f) < 0) {\n        ptr[4] = value1 & 0xfe;\n        result = FUN_08001460(data,0x10002,param,ptr,ptr2,temp_value1,temp_value2);\n        if (result == 0) {\n          result = FUN_080014e2(data,param,(*data)[5],(*data)[6]);\n          if (result == 0) {\n            ptr = *data;\n            if (condition == 1) {\nLAB_080015ca:\n              ptr[4] = value2 & 0xff;\n              return 0;\n            }\n            ptr[4] = value2 >> 8;\n            result = FUN_080014e2(data,param);\n            if (result == 0) {\n              ptr = *data;\n              goto LAB_080015ca;\n            }\n          }\n          if (data[0xe] != (uint *)0x4) {\n            return 3;\n          }\n          **data = **data | 0x200;\n        }\n        else if (data[0xe] != (uint *)0x4) {\n          return 3;\n        }\n        return 1;\n      }\n    } while (param == 0xffffffff);\n    if ((param == 0) || (result2 = FUN_0800115c(), param < (uint)(result2 - result))) {\n      *(undefined *)((int)data + 0x35) = 0x20;\n      *(undefined *)(data + 0xd) = 0;\n      return 3;\n    }\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08001530": "set_flag_and_check_08001530",
                "param_1": "data",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "condition",
                "param_5": "param",
                "iVar1": "result",
                "iVar2": "result2",
                "puVar3": "ptr",
                "ppuVar4": "ptr2",
                "uVar5": "temp_value1",
                "uVar6": "temp_value2"
            },
            "calling": [
                "FUN_08001828"
            ],
            "called": [
                "FUN_080014e2",
                "FUN_0800115c",
                "FUN_08001460"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08001530": {
                    "1": "set_bit_and_check",
                    "2": "update_flags_and_check",
                    "3": "set_flag_and_process_data",
                    "4": "set_flag_and_check"
                },
                "param_1": {
                    "5": "data",
                    "2": "input",
                    "1": "permissions",
                    "3": "data_ptr"
                },
                "param_2": {
                    "1": "arg2",
                    "6": "flag1",
                    "20": "value1"
                },
                "param_3": {
                    "1": "arg3",
                    "20": "value2",
                    "6": "flag2"
                },
                "param_4": {
                    "4": "flag",
                    "1": "param",
                    "2": "condition_flag",
                    "3": "flag1",
                    "15": "condition"
                },
                "param_5": {
                    "3": "flag2",
                    "2": "condition2",
                    "1": "param_5",
                    "11": "param"
                },
                "iVar1": {
                    "1": "difference",
                    "2": "start",
                    "8": "result1",
                    "14": "result"
                },
                "iVar2": {
                    "5": "temp_result",
                    "6": "temp",
                    "1": "new_initial_value",
                    "8": "result2",
                    "2": "end"
                },
                "puVar3": {
                    "1": "temp_pointer",
                    "3": "ptr1",
                    "2": "pointer_value",
                    "5": "ptr"
                },
                "ppuVar4": {
                    "1": "original_data_pointer",
                    "2": "ptr_ptr",
                    "4": "ptr2"
                },
                "uVar5": {
                    "5": "value1_copy",
                    "1": "value1_modified",
                    "7": "temp_value1",
                    "2": "val1",
                    "3": "temp1"
                },
                "uVar6": {
                    "1": "flag2",
                    "2": "val2",
                    "7": "temp_value2",
                    "5": "value2_copy",
                    "3": "var2"
                },
                "PTR_FUN_0800115c": {
                    "1": "get_difference"
                },
                "FUN_08001460": {
                    "1": "process_param",
                    "2": "process_data"
                },
                "FUN_080014e2": {
                    "1": "process_param2"
                },
                "FUN_0800115c": {
                    "1": "get_some_value"
                }
            }
        },
        "FUN_080015e8": {
            "entrypoint": "0x080015e8",
            "current_name": "process_data_080015e8",
            "code": "\nundefined4 process_data_080015e8(uint **data,uint value1,uint value2,int flag,uint limit)\n\n{\n  int result;\n  int temp_result;\n  uint *ptr;\n  uint **ptr_ptr;\n  uint temp1;\n  uint temp2;\n  \n  ptr = *data;\n  *ptr = *ptr | 0x400;\n  *ptr = *ptr | 0x100;\n  ptr_ptr = data;\n  temp1 = value1;\n  temp2 = value2;\n  result = FUN_0800115c();\nLAB_0800160e:\n  ptr = *data;\n  while (-1 < (int)(ptr[5] << 0x1f)) {\n    if (limit != 0xffffffff) goto code_r0x08001658;\n  }\n  ptr[4] = value1 & 0xfe;\n  result = FUN_08001460(data,0x10002,limit,ptr,ptr_ptr,temp1,temp2);\n  if (result != 0) goto LAB_080016ba;\n  result = FUN_080014e2(data,limit,(*data)[5],(*data)[6]);\n  if (result == 0) {\n    ptr = *data;\n    if (flag != 1) {\n      ptr[4] = value2 >> 8;\n      result = FUN_080014e2(data,limit);\n      if (result != 0) goto LAB_08001642;\n      ptr = *data;\n    }\n    ptr[4] = value2 & 0xff;\n    result = FUN_080014e2(data,limit);\n    if (result == 0) {\n      **data = **data | 0x100;\n      result = FUN_0800115c();\n      do {\n        do {\n          if ((int)((*data)[5] << 0x1f) < 0) {\n            (*data)[4] = value1 & 0xff | 1;\n            result = FUN_08001460(data,0x10002,limit);\n            if (result == 0) {\n              return 0;\n            }\nLAB_080016ba:\n            if (data[0xe] != (uint *)0x4) {\n              return 3;\n            }\n            return 1;\n          }\n        } while (limit == 0xffffffff);\n      } while ((limit != 0) && (temp_result = FUN_0800115c(), (uint)(temp_result - result) <= limit));\nLAB_0800165a:\n      *(undefined *)((int)data + 0x35) = 0x20;\n      *(undefined *)(data + 0xd) = 0;\n      return 3;\n    }\n  }\nLAB_08001642:\n  if (data[0xe] == (uint *)0x4) {\n    **data = **data | 0x200;\n    return 1;\n  }\n  return 3;\ncode_r0x08001658:\n  if ((limit == 0) || (temp_result = FUN_0800115c(), limit < (uint)(temp_result - result)))\n  goto LAB_0800165a;\n  goto LAB_0800160e;\n}\n\n",
            "renaming": {
                "FUN_080015e8": "process_data_080015e8",
                "param_1": "data",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "flag",
                "param_5": "limit",
                "iVar1": "result",
                "iVar2": "temp_result",
                "puVar3": "ptr",
                "ppuVar4": "ptr_ptr",
                "uVar5": "temp1",
                "uVar6": "temp2"
            },
            "calling": [
                "FUN_08001938"
            ],
            "called": [
                "FUN_0800115c",
                "FUN_080014e2",
                "FUN_08001460"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080015e8": {
                    "1": "update_flags_and_values",
                    "2": "decode_and_process_data",
                    "5": "process_data"
                },
                "param_1": {
                    "6": "data",
                    "1": "param",
                    "3": "pointer_array",
                    "2": "flags"
                },
                "param_2": {
                    "1": "data_1",
                    "6": "value_1",
                    "17": "value1"
                },
                "param_3": {
                    "1": "flag2",
                    "6": "value_2",
                    "17": "value2"
                },
                "param_4": {
                    "15": "flag",
                    "1": "value_3",
                    "8": "condition"
                },
                "param_5": {
                    "3": "threshold",
                    "1": "flag2",
                    "6": "timeout",
                    "12": "limit"
                },
                "iVar1": {
                    "1": "n_result",
                    "3": "result_1",
                    "21": "result"
                },
                "iVar2": {
                    "9": "temp_result",
                    "1": "current_result",
                    "4": "temp",
                    "3": "current_value"
                },
                "puVar3": {
                    "1": "ptr_input_data",
                    "2": "pointer",
                    "9": "ptr",
                    "3": "ptr_data"
                },
                "ppuVar4": {
                    "3": "ptr_array",
                    "1": "double_ptr",
                    "2": "data_ptr_ptr",
                    "4": "ptr_ptr"
                },
                "uVar5": {
                    "4": "value1_copy",
                    "2": "temp_value1",
                    "3": "temp_value_1",
                    "1": "n_var2",
                    "5": "temp1"
                },
                "uVar6": {
                    "1": "variable3",
                    "3": "val2",
                    "4": "value2_copy",
                    "5": "temp2",
                    "2": "temp_value2"
                },
                "FUN_0800115c": {
                    "1": "helper_function1"
                },
                "FUN_080014e2": {
                    "1": "check_condition"
                },
                "FUN_08001460": {
                    "1": "process_data_again"
                }
            }
        },
        "FUN_080016f4": {
            "entrypoint": "0x080016f4",
            "current_name": "process_data_080016f4",
            "code": "\nundefined4 process_data_080016f4(int *data,uint size)\n\n{\n  int start_value;\n  int current_value;\n  \n  start_value = FUN_0800115c();\n  while( true ) {\n    current_value = *data;\n    if ((*(uint *)(current_value + 0x14) & 0x40) != 0) {\n      return 0;\n    }\n    if (*(int *)(current_value + 0x14) << 0x1b < 0) break;\n    if ((size == 0) || (current_value = FUN_0800115c(), size < (uint)(current_value - start_value))) {\n      access_flags = access_flags | 0x20;\n      *(undefined *)((int)data + 0x35) = 0x20;\n      *(undefined *)(data + 0xd) = 0;\n      return 3;\n    }\n  }\n  *(uint *)(current_value + 0x14) = *(uint *)(current_value + 0x14) & 0xffffffef;\n  access_flags = 0;\n  *(undefined *)(data + 0xd) = 0;\n  *(undefined *)((int)data + 0x35) = 0x20;\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_080016f4": "process_data_080016f4",
                "param_1": "data",
                "param_2": "size",
                "iVar1": "start_value",
                "iVar2": "current_value",
                "param_1[0xe]": "access_flags"
            },
            "calling": [
                "FUN_08001938"
            ],
            "called": [
                "FUN_0800115c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080016f4": {
                    "1": "check_memory",
                    "5": "process_data",
                    "3": "check_memory_access",
                    "2": "validate_input"
                },
                "param_1": {
                    "1": "state_array",
                    "8": "data",
                    "4": "array",
                    "2": "memory_address",
                    "6": "input_array"
                },
                "param_2": {
                    "1": "time_limit",
                    "2": "memory_size",
                    "4": "data_length",
                    "7": "size",
                    "6": "length",
                    "3": "limit"
                },
                "iVar1": {
                    "1": "current_offset",
                    "5": "start_time",
                    "9": "start_value",
                    "3": "start_address"
                },
                "iVar2": {
                    "3": "current_address",
                    "1": "current_access_data",
                    "2": "current_index",
                    "21": "current_value"
                },
                "FUN_0800115c": {
                    "2": "get_current_time"
                },
                "param_1[0xe]": {
                    "1": "access_flags"
                },
                "param_1[0xd]": {
                    "1": "status"
                },
                "param_1 + 0xd": {
                    "1": "status"
                },
                "*(undefined *)((int)param_1 + 0x35)": {
                    "1": "status_flag"
                }
            }
        },
        "FUN_08001754": {
            "entrypoint": "0x08001754",
            "current_name": "initialize_parameters_08001754",
            "code": "\nundefined4 initialize_parameters_08001754(uint **parameters)\n\n{\n  uint quotient;\n  uint remainder;\n  uint *pointer1;\n  uint *pointer2;\n  uint *pointer3;\n  uint value3;\n  undefined8 result;\n  \n  if (parameters != (uint **)0x0) {\n    if (*(char *)((int)parameters + 0x35) == '\\0') {\n      *(undefined *)(parameters + 0xd) = 0;\n      FUN_08004d48();\n    }\n    *(undefined *)((int)parameters + 0x35) = 0x24;\n    **parameters = **parameters & 0xfffffffe;\n    result = FUN_08002220();\n    remainder = (uint)((ulonglong)result >> 0x20);\n    quotient = (uint)result;\n    pointer2 = pointer2;\n    value3 = quotient / 1000000;\n    if ((uint *)0x186a0 < pointer2) {\n      remainder = 300;\n    }\n    pointer1 = *parameters;\n    if ((uint *)0x186a0 < pointer2) {\n      remainder = value3 * remainder;\n    }\n    pointer1[1] = value3;\n    if ((uint *)0x186a0 < pointer2) {\n      value3 = remainder / 1000;\n    }\n    pointer1[8] = value3 + 1;\n    if (pointer2 < (uint *)0x186a1) {\n      quotient = quotient / (uint)((int)pointer2 << 1);\n      if ((quotient & 0xfff) < 4) {\n        quotient = 4;\n      }\n    }\n    else {\n      if (pointer3 == (uint *)0x0) {\n        quotient = quotient / (uint)((int)pointer2 * 3) | 0x8000;\n      }\n      else {\n        quotient = quotient / (uint)((int)pointer2 * 0x19) | 0xc000;\n      }\n      if ((quotient & 0xfff) == 0) {\n        quotient = 1;\n      }\n    }\n    pointer2 = pointer9;\n    pointer3 = pointer8;\n    pointer1[7] = quotient;\n    *pointer1 = (uint)pointer3 | (uint)pointer2;\n    pointer1[2] = (uint)pointer5 | (uint)pointer4;\n    pointer1[3] = (uint)pointer6 | (uint)pointer7;\n    *pointer1 = *pointer1 | 1;\n    result_pointer = (uint *)0x0;\n    *(undefined *)((int)parameters + 0x35) = 0x20;\n    *(undefined *)((int)parameters + 0x36) = 0;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08001754": "initialize_parameters_08001754",
                "param_1": "parameters",
                "uVar1": "quotient",
                "uVar2": "remainder",
                "puVar3": "pointer1",
                "puVar4": "pointer2",
                "puVar5": "pointer3",
                "uVar6": "value3",
                "uVar7": "result",
                "param_1[1]": "pointer2",
                "param_1[2]": "pointer3",
                "param_1[3]": "pointer4",
                "param_1[4]": "pointer5",
                "param_1[5]": "pointer6",
                "param_1[6]": "pointer7",
                "param_1[7]": "pointer8",
                "param_1[8]": "pointer9",
                "param_1[0xe]": "result_pointer"
            },
            "calling": [
                "FUN_0800458c"
            ],
            "called": [
                "FUN_08002220",
                "FUN_08004d48"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08001754": {
                    "3": "initialize_data_structure",
                    "8": "initialize_parameters",
                    "1": "update_parameters",
                    "6": "initialize_data"
                },
                "param_1": {
                    "1": "input_data",
                    "4": "params",
                    "2": "data_structure",
                    "8": "parameters",
                    "5": "param"
                },
                "uVar1": {
                    "1": "lower32_bits",
                    "2": "var1",
                    "4": "result1",
                    "3": "value1",
                    "6": "quotient"
                },
                "uVar2": {
                    "2": "temp2",
                    "1": "upper32_bits",
                    "6": "remainder",
                    "4": "result2",
                    "3": "value2"
                },
                "puVar3": {
                    "1": "config_ptr",
                    "3": "ptr3",
                    "5": "ptr1",
                    "6": "pointer1"
                },
                "puVar4": {
                    "6": "pointer2",
                    "1": "second_param",
                    "5": "ptr2",
                    "3": "ptr4"
                },
                "puVar5": {
                    "1": "parameter2",
                    "5": "ptr3",
                    "3": "ptr5",
                    "6": "pointer3"
                },
                "uVar6": {
                    "2": "temp3",
                    "1": "u_div"
                },
                "uVar7": {
                    "1": "temp2",
                    "5": "return_value",
                    "3": "function_result",
                    "20": "result"
                },
                "FUN_08002220": {
                    "1": "get_upper_lower_bits",
                    "2": "get_random_number",
                    "6": "get_timestamp",
                    "3": "get_some_value"
                },
                "FUN_08004d48": {
                    "2": "initialize_data",
                    "1": "perform_operation",
                    "3": "do_something"
                },
                "param_1[1]": {
                    "1": "pointer2"
                },
                "param_1[2]": {
                    "1": "pointer3"
                },
                "param_1[3]": {
                    "1": "pointer4"
                },
                "param_1[4]": {
                    "1": "pointer5"
                },
                "param_1[5]": {
                    "1": "pointer6"
                },
                "param_1[6]": {
                    "1": "pointer7"
                },
                "param_1[7]": {
                    "1": "pointer8"
                },
                "param_1[8]": {
                    "1": "pointer9"
                },
                "param_1[0xd]": {
                    "1": "flag"
                },
                "param_1[0xe]": {
                    "1": "result_pointer"
                },
                "0x0": {
                    "1": "null"
                },
                "0x35": {
                    "1": "flag_offset"
                },
                "0x24": {
                    "1": "flag_value"
                },
                "0xfffffffe": {
                    "1": "mask"
                },
                "0x20": {
                    "1": "new_flag_value"
                }
            }
        },
        "FUN_08001828": {
            "entrypoint": "0x08001828",
            "current_name": "process_data_08001828",
            "code": "\nundefined4\nprocess_data_08001828(uint **data,undefined4 param1,undefined4 param2,undefined4 param3,byte *buffer,\n            short buffer_size,undefined4 param4)\n\n{\n  int result;\n  int var2;\n  uint *ptr;\n  uint value;\n  \n  if (*(char *)((int)data + 0x35) == ' ') {\n    if (buffer == (byte *)0x0) {\n      return 1;\n    }\n    if (buffer_size == 0) {\n      return 1;\n    }\n    result = FUN_0800115c();\n    do {\n      ptr = *data;\n      if ((~ptr[6] & 2) != 0) {\n        if (*(char *)(data + 0xd) == '\\x01') {\n          return 2;\n        }\n        value = *ptr;\n        *(undefined *)(data + 0xd) = 1;\n        *ptr = value & 0xfffff7ff;\n        *(undefined *)((int)data + 0x35) = 0x21;\n        *(undefined *)((int)data + 0x36) = 0x40;\n        error_code = (uint *)0x0;\n        result = FUN_08001530(data,param1,param2,param3,param4);\n        if (result != 0) {\n          *(undefined *)(data + 0xd) = 0;\n          if (error_code == (uint *)0x4) {\n            return 1;\n          }\n          return 3;\n        }\n        goto loop;\n      }\n      var2 = FUN_0800115c();\n    } while ((uint)(var2 - result) < 0x2711);\n    *(undefined *)(data + 0xd) = 0;\n    *(undefined *)((int)data + 0x35) = 0x20;\n  }\n  return 2;\n  while (buffer_size != 0) {\nloop:\n    result = FUN_080014e2(data,param4);\n    if (result != 0) goto LAB_080018ee;\n    ptr = *data;\n    ptr[4] = (uint)*buffer;\n    if ((int)(ptr[5] << 0x1d) < 0) {\n      if ((short)(buffer_size + -1) == 0) break;\n      buffer_size = buffer_size + -2;\n      ptr[4] = (uint)buffer[1];\n      buffer = buffer + 2;\n    }\n    else {\n      buffer = buffer + 1;\n      buffer_size = buffer_size + -1;\n    }\n  }\n  result = FUN_080014e2(data,param4);\n  if (result == 0) {\n    **data = **data | 0x200;\n    *(undefined *)(data + 0xd) = 0;\n    *(undefined *)((int)data + 0x35) = 0x20;\n    *(undefined *)((int)data + 0x36) = 0;\n    return 0;\n  }\nLAB_080018ee:\n  if (error_code == (uint *)0x4) {\n    **data = **data | 0x200;\n    return 1;\n  }\n  return 3;\n}\n\n",
            "renaming": {
                "param_1": "data",
                "param_2": "param1",
                "param_3": "param2",
                "param_4": "param3",
                "param_5": "buffer",
                "param_6": "buffer_size",
                "param_7": "param4",
                "iVar1": "result",
                "iVar2": "var2",
                "puVar3": "ptr",
                "uVar4": "value",
                "FUN_08001828": "process_data_08001828",
                "LAB_080018e2": "loop",
                "param_1[0xe]": "error_code"
            },
            "calling": [
                "FUN_0800403c"
            ],
            "called": [
                "FUN_08001530",
                "FUN_0800115c",
                "FUN_080014e2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "param_1": {
                    "2": "input",
                    "11": "data",
                    "1": "input_data",
                    "4": "input_array"
                },
                "param_2": {
                    "7": "param_2",
                    "1": "arg1",
                    "5": "value1",
                    "9": "param1"
                },
                "param_3": {
                    "9": "param2",
                    "7": "param_3",
                    "1": "arg2",
                    "5": "value2"
                },
                "param_4": {
                    "7": "param_4",
                    "9": "param3",
                    "5": "value3",
                    "1": "value_3"
                },
                "param_5": {
                    "2": "data",
                    "1": "input_data",
                    "11": "byte_array",
                    "12": "buffer"
                },
                "param_6": {
                    "4": "array_length",
                    "1": "array_size",
                    "2": "buffer_length",
                    "3": "byte_count",
                    "8": "buffer_size",
                    "7": "length"
                },
                "param_7": {
                    "9": "param4",
                    "1": "arg4",
                    "7": "param7",
                    "5": "value4"
                },
                "iVar1": {
                    "1": "initial",
                    "2": "first_index",
                    "3": "initial_value",
                    "7": "result"
                },
                "iVar2": {
                    "1": "start",
                    "2": "current_value"
                },
                "puVar3": {
                    "1": "ptr_var",
                    "2": "current_data",
                    "21": "ptr"
                },
                "uVar4": {
                    "1": "param_ptr_val_2",
                    "3": "var4",
                    "2": "temp_value",
                    "4": "temp",
                    "15": "value"
                },
                "FUN_08001828": {
                    "1": "process_input_data",
                    "17": "process_data",
                    "3": "validate_input"
                },
                "FUN_0800115c": {
                    "1": "get_first_check_var",
                    "2": "get_initial_value",
                    "7": "get_current_time"
                },
                "FUN_08001530": {
                    "1": "helper_function_1",
                    "5": "process_data",
                    "3": "perform_operation"
                },
                "LAB_080018e2": {
                    "1": "operation_label"
                },
                "FUN_080014e2": {
                    "1": "update_data",
                    "2": "process_data_again"
                },
                "*(char *)((int)param_1 + 0x35)": {
                    "1": "param_condition"
                },
                "*(char *)(param_1 + 0xd)": {
                    "1": "status"
                },
                "*(undefined *)((int)param_1 + 0x35)": {
                    "1": "char1"
                },
                "*(undefined *)((int)param_1 + 0x36)": {
                    "1": "char2"
                },
                "param_1[0xe]": {
                    "1": "error_code"
                }
            }
        },
        "FUN_08001938": {
            "entrypoint": "0x08001938",
            "current_name": "process_data_08001938",
            "code": "\nundefined4\nprocess_data_08001938(uint **data,undefined4 param1,undefined4 param2,undefined4 param3,\n            undefined *buffer,ushort length,uint timeout)\n\n{\n  undefined *ptr1;\n  int start_time;\n  int current_time;\n  uint *ptr2;\n  uint temp;\n  undefined *ptr3;\n  bool flag;\n  \n  if (*(char *)((int)data + 0x35) != ' ') {\n    return 2;\n  }\n  if (buffer == (undefined *)0x0) {\n    return 1;\n  }\n  if (length == 0) {\n    return 1;\n  }\n  start_time = FUN_0800115c();\n  while (ptr2 = *data, (~ptr2[6] & 2) == 0) {\n    current_time = FUN_0800115c();\n    if (10000 < (uint)(current_time - start_time)) {\n      *(undefined *)(data + 0xd) = 0;\n      *(undefined *)((int)data + 0x35) = 0x20;\n      return 2;\n    }\n  }\n  if (*(char *)(data + 0xd) == '\\x01') {\n    return 2;\n  }\n  temp = *ptr2;\n  *(undefined *)(data + 0xd) = 1;\n  *ptr2 = temp & 0xfffff7ff;\n  *(undefined *)((int)data + 0x35) = 0x22;\n  *(undefined *)((int)data + 0x36) = 0x40;\n  data[0xe] = (uint *)0x0;\n  start_time = FUN_080015e8(data,param1,param2,param3,timeout);\n  if (start_time != 0) {\n    *(undefined *)(data + 0xd) = 0;\n    if (data[0xe] == (uint *)0x4) {\n      return 1;\n    }\n    return 3;\n  }\n  ptr2 = *data;\n  temp = *ptr2;\n  if (length == 1) {\n    *ptr2 = temp & 0xfffffbff;\n    disable_interrupts();\n    **data = **data | 0x200;\n    enable_interrupts();\n    start_time = FUN_080016f4(data,timeout);\n    if (start_time == 0) {\n      *buffer = (char)(*data)[4];\nLAB_08001ab8:\n      *(undefined *)((int)data + 0x35) = 0x20;\n      *(undefined *)((int)data + 0x36) = 0;\n      *(undefined *)(data + 0xd) = 0;\n      return 0;\n    }\nLAB_08001a18:\n    if (data[0xe] != (uint *)0x20) {\n      return 1;\n    }\n    return 3;\n  }\n  if (length == 2) {\n    *ptr2 = temp | 0x800;\n    disable_interrupts();\n    **data = **data & 0xfffffbff;\n    enable_interrupts();\n  }\n  else {\n    *ptr2 = temp | 0x400;\n    while (3 < length) {\n      start_time = FUN_080016f4(data,timeout);\n      if (start_time != 0) goto LAB_08001a18;\n      *buffer = (char)(*data)[4];\n      ptr2 = *data;\n      flag = (int)(ptr2[5] << 0x1d) < 0;\n      if (flag) {\n        ptr2 = (uint *)ptr2[4];\n        ptr3 = buffer + 2;\n        length = length - 2;\n      }\n      else {\n        ptr3 = buffer + 1;\n        length = length - 1;\n      }\n      ptr1 = buffer + 1;\n      buffer = ptr3;\n      if (flag) {\n        *ptr1 = (char)ptr2;\n      }\n    }\n    if (length != 2) {\n      start_time = FUN_0800115c();\n      do {\n        ptr2 = *data;\n        do {\n          if ((int)(ptr2[5] << 0x1d) < 0) {\n            *ptr2 = *ptr2 & 0xfffffbff;\n            disable_interrupts();\n            *buffer = (char)(*data)[4];\n            start_time = FUN_0800115c();\n            goto LAB_08001b3a;\n          }\n        } while (timeout == 0xffffffff);\n      } while ((timeout != 0) && (current_time = FUN_0800115c(), (uint)(current_time - start_time) <= timeout));\n      goto LAB_08001afa;\n    }\n  }\n  start_time = FUN_0800115c();\n  do {\n    do {\n      if ((int)((*data)[5] << 0x1d) < 0) {\n        disable_interrupts();\n        ptr2 = *data;\n        *ptr2 = *ptr2 | 0x200;\n        *buffer = (char)ptr2[4];\n        enable_interrupts();\n        buffer[1] = (char)(*data)[4];\n        goto LAB_08001ab8;\n      }\n    } while (timeout == 0xffffffff);\n  } while ((timeout != 0) && (current_time = FUN_0800115c(), (uint)(current_time - start_time) <= timeout));\nLAB_08001afa:\n  *(undefined *)((int)data + 0x35) = 0x20;\n  *(undefined *)(data + 0xd) = 0;\n  return 3;\nLAB_08001b3a:\n  do {\n    ptr2 = *data;\n    do {\n      if ((int)(ptr2[5] << 0x1d) < 0) {\n        *ptr2 = *ptr2 | 0x200;\n        buffer[1] = (char)ptr2[4];\n        enable_interrupts();\n        buffer[2] = (char)(*data)[4];\n        goto LAB_08001ab8;\n      }\n    } while (timeout == 0xffffffff);\n  } while ((timeout != 0) && (current_time = FUN_0800115c(), (uint)(current_time - start_time) <= timeout));\n  goto LAB_08001afa;\n}\n\n",
            "renaming": {
                "FUN_08001938": "process_data_08001938",
                "param_1": "data",
                "param_2": "param1",
                "param_3": "param2",
                "param_4": "param3",
                "param_5": "buffer",
                "param_6": "length",
                "param_7": "timeout",
                "puVar1": "ptr1",
                "iVar2": "start_time",
                "iVar3": "current_time",
                "puVar4": "ptr2",
                "uVar5": "temp",
                "puVar6": "ptr3",
                "bVar7": "flag",
                "disableIRQinterrupts": "disable_interrupts",
                "enableIRQinterrupts": "enable_interrupts"
            },
            "calling": [
                "FUN_0800407c",
                "FUN_080040b8"
            ],
            "called": [
                "FUN_0800115c",
                "FUN_080016f4",
                "FUN_080015e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08001938": {
                    "1": "process_function",
                    "23": "process_data"
                },
                "param_1": {
                    "21": "data",
                    "1": "input_array",
                    "2": "data_ptr"
                },
                "param_2": {
                    "8": "param2",
                    "1": "param_a",
                    "3": "param_2",
                    "5": "value1",
                    "10": "param1"
                },
                "param_3": {
                    "10": "param2",
                    "8": "param3",
                    "1": "val2",
                    "3": "arg2",
                    "5": "value2"
                },
                "param_4": {
                    "8": "param4",
                    "10": "param3",
                    "3": "arg3",
                    "5": "value3",
                    "1": "param_c"
                },
                "param_5": {
                    "1": "p_buffer",
                    "4": "result",
                    "6": "output",
                    "13": "buffer"
                },
                "param_6": {
                    "2": "data_size",
                    "1": "output_length",
                    "4": "count",
                    "8": "size",
                    "12": "length"
                },
                "param_7": {
                    "29": "timeout",
                    "1": "param_f"
                },
                "puVar1": {
                    "1": "ptr_var1",
                    "2": "temp_ptr1",
                    "15": "ptr1",
                    "5": "ptr",
                    "4": "pointer1"
                },
                "iVar2": {
                    "1": "time_start",
                    "13": "start_time",
                    "4": "counter1",
                    "6": "var1"
                },
                "iVar3": {
                    "1": "prev_count",
                    "4": "counter2",
                    "12": "current_time",
                    "6": "var2"
                },
                "puVar4": {
                    "3": "ptr_data",
                    "1": "pointer_var2",
                    "2": "temp_ptr2",
                    "4": "current_data",
                    "12": "ptr2"
                },
                "uVar5": {
                    "6": "temp",
                    "1": "command_value",
                    "2": "temp_var",
                    "5": "value"
                },
                "puVar6": {
                    "2": "temp_ptr3",
                    "1": "pointer_var3",
                    "11": "ptr3",
                    "3": "pointer3"
                },
                "bVar7": {
                    "16": "flag",
                    "6": "is_negative",
                    "1": "bool_var1",
                    "2": "condition",
                    "3": "flag1"
                },
                "10000": {
                    "1": "max_timeout"
                },
                "0x35": {
                    "1": "flag1"
                },
                "0x20": {
                    "1": "space"
                },
                "0x22": {
                    "1": "quotation_mark"
                },
                "0x36": {
                    "1": "value"
                },
                "disableIRQinterrupts": {
                    "1": "disable_interrupts"
                },
                "enableIRQinterrupts": {
                    "1": "enable_interrupts"
                }
            }
        },
        "FUN_08001b58": {
            "entrypoint": "0x08001b58",
            "current_name": "check_conditions_08001b58",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08001eec) */\n/* WARNING: Removing unreachable block (ram,0x08001ee8) */\n\n\nundefined4 check_conditions_08001b58(int *parameters)\n\n{\n  int temp_var1;\n  int temp_var2;\n  \n  if (*parameters << 0x1f < 0) {\n    if (((_DAT_40021004 & 0xc) == 4) ||\n       (((_DAT_40021004 & 0xc) == 8 && ((int)(_DAT_40021004 << 0xf) < 0)))) {\n      if (((int)((_DAT_40021000 >> 0x11) << 0x1f) < 0) && (param_array[1] == 0)) {\n        return 1;\n      }\n    }\n    else {\n      temp_var1 = param_array[1];\n      if (temp_var1 == 0x10000) {\nlabel1:\n        _DAT_40021000 = _DAT_40021000 | 0x10000;\n      }\n      else {\n        if (temp_var1 == 0) {\n          _DAT_40021000 = _DAT_40021000 & 0xfffaffff;\n          temp_var1 = FUN_0800115c();\n          while ((int)((_DAT_40021000 >> 0x11) << 0x1f) < 0) {\n            temp_var2 = FUN_0800115c();\n            if (100 < (uint)(temp_var2 - temp_var1)) {\n              return 3;\n            }\n          }\n          goto label2;\n        }\n        if (temp_var1 == 0x50000) {\n          _DAT_40021000 = _DAT_40021000 | 0x40000;\n          goto label1;\n        }\n        _DAT_40021000 = _DAT_40021000 & 0xfffaffff;\n      }\n      temp_var1 = FUN_0800115c();\n      while (-1 < (int)((_DAT_40021000 >> 0x11) << 0x1f)) {\n        temp_var2 = FUN_0800115c();\n        if (100 < (uint)(temp_var2 - temp_var1)) {\n          return 3;\n        }\n      }\n    }\n  }\nlabel2:\n  if (*parameters << 0x1e < 0) {\n    if (((_DAT_40021004 & 0xc) == 0) ||\n       (((_DAT_40021004 & 0xc) == 8 && (-1 < (int)(_DAT_40021004 << 0xf))))) {\n      if (((int)((_DAT_40021000 >> 1) << 0x1f) < 0) && (parameter_4 != 1)) {\n        return 1;\n      }\n    }\n    else {\n      var_1 = parameter_4;\n      if (var_1 == 0) {\n        temp_var1 = FUN_0800115c();\n        while ((int)((_DAT_40021000 >> 1) << 0x1f) < 0) {\n          temp_var2 = FUN_0800115c();\n          if (2 < (uint)(temp_var2 - temp_var1)) {\n            return 3;\n          }\n        }\n        goto LAB_08001b6c;\n      }\n      var_1 = 1;\n      temp_var1 = FUN_0800115c();\n      while (-1 < (int)((_DAT_40021000 >> 1) << 0x1f)) {\n        temp_var2 = FUN_0800115c();\n        if (2 < (uint)(temp_var2 - temp_var1)) {\n          return 3;\n        }\n      }\n    }\n    _DAT_40021000 = parameter_5 << 3 | _DAT_40021000 & 0xffffff07;\n  }\nLAB_08001b6c:\n  if (*parameters << 0x1c < 0) {\n    var_2 = parameter_6;\n    if (var_2 == 0) {\n      temp_var1 = FUN_0800115c();\n      while ((int)((_DAT_40021024 >> 1) << 0x1f) < 0) {\n        temp_var2 = FUN_0800115c();\n        if (2 < (uint)(temp_var2 - temp_var1)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      var_2 = 1;\n      temp_var1 = FUN_0800115c();\n      while (-1 < (int)((_DAT_40021024 >> 1) << 0x1f)) {\n        temp_var2 = FUN_0800115c();\n        if (2 < (uint)(temp_var2 - temp_var1)) {\n          return 3;\n        }\n      }\n      FUNC_08001168(1);\n    }\n  }\n  if (-1 < *parameters << 0x1d) goto LAB_08001bc2;\n  _DAT_4002101c = _DAT_4002101c | 0x10000000;\n  _DAT_40007000 = _DAT_40007000 | 0x100;\n  temp_var1 = FUN_0800115c();\n  while (-1 < (int)(_DAT_40007000 << 0x17)) {\n    temp_var2 = FUN_0800115c();\n    if (100 < (uint)(temp_var2 - temp_var1)) {\n      return 3;\n    }\n  }\n  temp_var1 = input_params[3];\n  if (temp_var1 == 1) {\nLAB_08001e1a:\n    _DAT_40021020 = _DAT_40021020 | 1;\n  }\n  else {\n    if (temp_var1 == 0) {\n      _DAT_40021020 = _DAT_40021020 & 0xfffffffa;\n      temp_var1 = FUN_0800115c();\n      while ((int)((_DAT_40021020 >> 1) << 0x1f) < 0) {\n        temp_var2 = FUN_0800115c();\n        if (5000 < (uint)(temp_var2 - temp_var1)) {\n          return 3;\n        }\n      }\n      goto LAB_08001bc2;\n    }\n    if (temp_var1 == 5) {\n      _DAT_40021020 = _DAT_40021020 | 4;\n      goto LAB_08001e1a;\n    }\n    _DAT_40021020 = _DAT_40021020 & 0xfffffffa;\n  }\n  temp_var1 = FUN_0800115c();\n  while (-1 < (int)((_DAT_40021020 >> 1) << 0x1f)) {\n    temp_var2 = FUN_0800115c();\n    if (5000 < (uint)(temp_var2 - temp_var1)) {\n      return 3;\n    }\n  }\nLAB_08001bc2:\n  if (input_params[7] == 0) {\n    return 0;\n  }\n  if ((_DAT_40021004 & 0xc) != 8) {\n    if (input_params[7] != 2) {\n      flag = 0;\n      temp_var1 = FUN_0800115c();\n      do {\n        if (-1 < (int)((_DAT_40021000 >> 0x19) << 0x1f)) {\n          return 0;\n        }\n        temp_var2 = FUN_0800115c();\n      } while ((uint)(temp_var2 - temp_var1) < 3);\n      return 3;\n    }\n    flag = 0;\n    temp_var1 = FUN_0800115c();\n    do {\n      if (-1 < (int)((_DAT_40021000 >> 0x19) << 0x1f)) {\n        if (parameter_8 == 0x10000) {\n          _DAT_40021004 = _DAT_40021004 & 0xfffdffff | validation_param2;\n        }\n        _DAT_40021004 = parameter_8 | parameter_9 | _DAT_40021004 & 0xffc2ffff;\n        flag = 1;\n        temp_var1 = FUN_0800115c();\n        do {\n          if ((int)((_DAT_40021000 >> 0x19) << 0x1f) < 0) {\n            return 0;\n          }\n          temp_var2 = FUN_0800115c();\n        } while ((uint)(temp_var2 - temp_var1) < 3);\n        return 3;\n      }\n      temp_var2 = FUN_0800115c();\n    } while ((uint)(temp_var2 - temp_var1) < 3);\n    return 3;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "param_1": "parameters",
                "iVar1": "temp_var1",
                "iVar2": "temp_var2",
                "FUN_08001b58": "check_conditions_08001b58",
                "iRam42420000": "var_1",
                "iRam42420480": "var_2",
                "param_1[3]": "input_params[3]",
                "param_1[7]": "input_params[7]",
                "uRam42420060": "flag",
                "param_1[4]": "parameter_4",
                "param_1[5]": "parameter_5",
                "param_1[6]": "parameter_6",
                "param_1[8]": "parameter_8",
                "param_1[9]": "parameter_9",
                "param_1[2]": "validation_param2",
                "param_1[1]": "param_array[1]",
                "LAB_08001c1e": "label1",
                "LAB_08001b64": "label2"
            },
            "calling": [
                "FUN_08004514"
            ],
            "called": [
                "FUN_0800115c",
                "FUN_08001168"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "param_1": {
                    "2": "flags",
                    "1": "input_list",
                    "4": "input_array",
                    "7": "parameters"
                },
                "iVar1": {
                    "1": "result",
                    "2": "var1",
                    "5": "temp1",
                    "3": "temp_var_1",
                    "8": "temp_var1"
                },
                "iVar2": {
                    "3": "value2",
                    "1": "loop_var2",
                    "2": "var2",
                    "8": "temp_var2",
                    "5": "temp2"
                },
                "FUN_08001b58": {
                    "1": "check_system_settings",
                    "3": "validate_configuration",
                    "4": "check_conditions",
                    "2": "check_flags"
                },
                "_DAT_40021004": {
                    "1": "flag_register",
                    "3": "register_1"
                },
                "_DAT_40021000": {
                    "1": "register2",
                    "3": "register_2"
                },
                "FUN_0800115c": {
                    "2": "get_time",
                    "1": "get_current_time"
                },
                "iRam42420000": {
                    "1": "variable1"
                },
                "iRam42420480": {
                    "1": "flag2"
                },
                "_DAT_40021024": {
                    "1": "status_register",
                    "2": "register_3"
                },
                "_DAT_4002101c": {
                    "1": "register_4"
                },
                "_DAT_40007000": {
                    "1": "register_4"
                },
                "param_1[3]": {
                    "1": "input_params[3]"
                },
                "_DAT_40021020": {
                    "1": "communication_options"
                },
                "param_1[7]": {
                    "1": "param_array[7]"
                },
                "uRam42420060": {
                    "1": "validation_flag2"
                },
                "FUNC_0800115c": {
                    "1": "get_current_time"
                },
                "param_1[4]": {
                    "1": "param_array[4]"
                },
                "param_1[5]": {
                    "1": "param_array[5]"
                },
                "param_1[6]": {
                    "1": "parameter_6"
                },
                "param_1[8]": {
                    "1": "validation_param1"
                },
                "param_1[9]": {
                    "1": "param_array[9]"
                },
                "param_1[2]": {
                    "1": "validation_param2"
                },
                "register_2": {
                    "1": "register_3"
                },
                "register_1": {
                    "1": "register_4"
                },
                "param_1[1]": {
                    "1": "param_array[1]"
                },
                "LAB_08001c1e": {
                    "1": "label1"
                },
                "LAB_08001b64": {
                    "1": "label2"
                }
            }
        },
        "FUN_08002008": {
            "entrypoint": "0x08002008",
            "current_name": "calculate_mpu9250_clock_08002008",
            "code": "\n\n\nint calculate_mpu9250_clock_08002008(void)\n\n{\n  undefined4 value1;\n  int result;\n  undefined4 value2;\n  undefined4 *data_pointer;\n  uint clock_frequency;\n  undefined4 *destination_pointer;\n  byte clock_settings [4];\n  undefined4 file_paths [5];\n  \n  data_pointer = &DAT_080072f0;\n  destination_pointer = file_paths;\n  do {\n    value1 = *data_pointer;\n    value2 = data_pointer[1];\n    data_pointer = data_pointer + 2;\n    *destination_pointer = value1;\n    destination_pointer[1] = value2;\n    destination_pointer = destination_pointer + 2;\n  } while (data_pointer != (undefined4 *)\"../Src/MPU9250.c\");\n  clock_settings[0] = 1;\n  clock_settings[1] = 2;\n  if ((_DAT_40021004 & 0xc) == 8) {\n    if ((int)(_DAT_40021004 << 0xf) < 0) {\n      clock_frequency = 8000000 / clock_settings[(_DAT_40021004 & 0x20000) >> 0x11];\n    }\n    else {\n      clock_frequency = 4000000;\n    }\n    result = clock_frequency * *(byte *)((int)file_paths + ((_DAT_40021004 & 0x3c0000) >> 0x12));\n  }\n  else {\n    result = 8000000;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08002008": "calculate_mpu9250_clock_08002008",
                "local_24": "clock_settings",
                "local_20": "file_paths",
                "uVar1": "value1",
                "uVar3": "value2",
                "puVar4": "data_pointer",
                "puVar6": "destination_pointer",
                "uVar5": "clock_frequency",
                "iVar2": "result"
            },
            "calling": [
                "FUN_0800209c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08002008": {
                    "1": "calculate_sensor_frequency",
                    "5": "calculate_mpu9250_clock",
                    "3": "calculate_mpu9250_clock_speed",
                    "4": "calculate_clock_frequency"
                },
                "local_24": {
                    "1": "array1",
                    "4": "clock_settings",
                    "2": "selected_clocks"
                },
                "local_20": {
                    "2": "file_paths",
                    "1": "clock_config_values"
                },
                "uVar1": {
                    "4": "first_value",
                    "1": "clock_setting1",
                    "3": "register_value1",
                    "8": "value1"
                },
                "uVar3": {
                    "1": "sensor_value2",
                    "4": "second_value",
                    "3": "register_value2",
                    "8": "value2"
                },
                "puVar4": {
                    "3": "source_data",
                    "2": "source_array_ptr",
                    "1": "registers_ptr",
                    "8": "data_pointer"
                },
                "puVar6": {
                    "1": "config_array_pointer",
                    "2": "destination_array_ptr",
                    "3": "destination_data",
                    "4": "destination_pointer"
                },
                "uVar5": {
                    "2": "divider",
                    "3": "clock_rate",
                    "1": "clock_speed",
                    "12": "clock_frequency"
                },
                "iVar2": {
                    "1": "calculated_frequency",
                    "2": "clock_speed",
                    "4": "clock_frequency",
                    "17": "result"
                }
            }
        },
        "FUN_0800209c": {
            "entrypoint": "0x0800209c",
            "current_name": "process_data_0800209c",
            "code": "\n\n\nundefined4 process_data_0800209c(uint *data,uint length)\n\n{\n  char flag1;\n  char flag2;\n  int shifted_value;\n  uint value1;\n  int temp2;\n  uint shifted_value;\n  \n  if ((length <= (_DAT_40022000 & 7)) ||\n     (_DAT_40022000 = _DAT_40022000 & 0xfffffff8 | length, length == (length & 7))) {\n    if ((int)(*data << 0x1e) < 0) {\n      _DAT_40021004 = _DAT_40021004 & 0xffffff0f | data[2];\n    }\n    shifted_value = *data << 0x1f;\n    if (-1 < shifted_value) {\nLAB_080020ba:\n      if ((length < (_DAT_40022000 & 7)) &&\n         (_DAT_40022000 = _DAT_40022000 & 0xfffffff8 | length, length != (length & 7))) {\n        return 1;\n      }\n      if ((*data & 4) != 0) {\n        _DAT_40021004 = _DAT_40021004 & 0xfffff8ff | data[3];\n      }\n      if ((int)(*data << 0x1c) < 0) {\n        _DAT_40021004 = _DAT_40021004 & 0xffffc7ff | data[4] << 3;\n      }\n      value1 = FUN_08002008();\n      DAT_200001bc = value1 >> (&DAT_08007361)[(_DAT_40021004 & 0xf0) >> 4];\n      FUN_08001104(0);\n      return 0;\n    }\n    value1 = data[1];\n    if (value1 == 1) {\n      flag2 = '\\x01';\n      flag1 = '\\0';\n    }\n    else {\n      shifted_value = _DAT_40021000;\n      if (value1 == 2) goto LAB_08002176;\n      flag2 = '\\0';\n      flag1 = '\\x01';\n    }\n    shifted_value = (_DAT_40021000 >>\n            (count_leading_zeros((uint)(byte_value)(flag1 << 6) << 0x18 | (uint)(byte_value)(flag2 << 6) << 8) & 0x1fU)) <<\n            0x1f;\n    if ((int)shifted_value < 0) {\nLAB_08002176:\n      _DAT_40021004 = _DAT_40021004 & 0xfffffffc | value1;\n      shifted_value = FUN_0800115c(shifted_value,shifted_value);\n      if (data[1] == 1) {\n        do {\n          if ((_DAT_40021004 & 0xc) == 4) goto LAB_080020ba;\n          temp2 = FUN_0800115c();\n        } while ((uint)(temp2 - shifted_value) < 0x1389);\n      }\n      else if (data[1] == 2) {\n        do {\n          if ((_DAT_40021004 & 0xc) == 8) goto LAB_080020ba;\n          temp2 = FUN_0800115c();\n        } while ((uint)(temp2 - shifted_value) < 0x1389);\n      }\n      else {\n        do {\n          if ((_DAT_40021004 & 0xc) == 0) goto LAB_080020ba;\n          temp2 = FUN_0800115c();\n        } while ((uint)(temp2 - shifted_value) < 0x1389);\n      }\n      return 3;\n    }\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_0800209c": "process_data_0800209c",
                "param_1": "data",
                "param_2": "length",
                "cVar1": "flag1",
                "cVar2": "flag2",
                "iVar3": "shifted_value",
                "uVar4": "value1",
                "iVar5": "temp2",
                "uVar6": "shifted_value",
                "LZCOUNT": "count_leading_zeros",
                "byte": "byte_value"
            },
            "calling": [
                "FUN_08004514"
            ],
            "called": [
                "FUN_08001104",
                "FUN_0800115c",
                "FUN_08002008"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800209c": {
                    "1": "validate_and_process_input",
                    "7": "process_data",
                    "3": "check_and_process_data",
                    "4": "validate_and_process_data",
                    "2": "validate_and_execute_operation"
                },
                "param_1": {
                    "1": "param",
                    "8": "data",
                    "5": "data_array",
                    "3": "input_data",
                    "2": "input_array"
                },
                "param_2": {
                    "1": "param",
                    "2": "input_size",
                    "3": "data_size",
                    "5": "size",
                    "6": "length"
                },
                "cVar1": {
                    "6": "is_negative",
                    "1": "is_type_1",
                    "2": "flag_a",
                    "12": "flag1"
                },
                "cVar2": {
                    "2": "condition_2",
                    "1": "is_type_2",
                    "6": "is_positive",
                    "12": "flag2"
                },
                "iVar3": {
                    "1": "result",
                    "2": "shift",
                    "5": "shifted_value",
                    "3": "shift_amount"
                },
                "uVar4": {
                    "1": "permission_type",
                    "2": "temp1",
                    "3": "value",
                    "4": "value1"
                },
                "iVar5": {
                    "3": "loop_counter",
                    "1": "current_value",
                    "2": "temp_var2",
                    "4": "result"
                },
                "uVar6": {
                    "2": "value_2",
                    "1": "shifted_permissions",
                    "7": "shifted_value",
                    "4": "value2"
                },
                "FUN_08002008": {
                    "2": "calculate_value",
                    "1": "get_data_value"
                },
                "FUN_08001104": {
                    "1": "initialize_data"
                },
                "FUN_0800115c": {
                    "1": "process_data"
                },
                "DAT_40022000": {
                    "1": "global_variable1"
                },
                "DAT_40021004": {
                    "1": "global_variable2"
                },
                "DAT_40021000": {
                    "1": "constant_value",
                    "2": "constant_data"
                },
                "DAT_200001bc": {
                    "2": "processed_data",
                    "5": "result",
                    "1": "global_data_var"
                },
                "_DAT_40021004": {
                    "1": "control_register"
                },
                "DAT_08007361": {
                    "1": "mapping_table"
                },
                "_DAT_40022000": {
                    "1": "buffer_size"
                },
                "DATA_40021004": {
                    "1": "flags"
                },
                "DATA_40022000": {
                    "1": "global_mask"
                },
                "sub_FUN_08001104": {
                    "1": "apply_function"
                },
                "sub_FUN_0800115c": {
                    "1": "perform_operation"
                },
                "sub_FUN_08002008": {
                    "1": "get_value"
                },
                "LZCOUNT": {
                    "1": "count_leading_zeros"
                },
                "byte": {
                    "1": "byte_value"
                }
            }
        },
        "FUN_08002214": {
            "entrypoint": "0x08002214",
            "current_name": "get_data_08002214",
            "code": "\nundefined4 get_data_08002214(void)\n\n{\n  return DAT_200001bc;\n}\n\n",
            "renaming": {
                "FUN_08002214": "get_data_08002214"
            },
            "calling": [
                "FUN_08001104",
                "FUN_08004514"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08002214": {
                    "1": "get_global_data",
                    "2": "get_global_value",
                    "11": "get_data_value",
                    "15": "get_data"
                },
                "DAT_200001bc": {
                    "13": "data",
                    "1": "data_from_memory",
                    "3": "result"
                }
            }
        },
        "FUN_08002220": {
            "entrypoint": "0x08002220",
            "current_name": "get_shifted_value_08002220",
            "code": "\n\n\nuint get_shifted_value_08002220(void)\n\n{\n  return DAT_200001bc >> (&DAT_08007371)[(_DAT_40021004 & 0x700) >> 8];\n}\n\n",
            "renaming": {
                "FUN_08002220": "get_shifted_value_08002220"
            },
            "calling": [
                "FUN_08001754",
                "FUN_080025e8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08002220": {
                    "2": "shift_value",
                    "1": "extracted_data_shift",
                    "3": "shifted_value",
                    "6": "get_shifted_value"
                },
                "_DAT_40021004": {
                    "3": "input",
                    "2": "data",
                    "1": "bit_mask",
                    "8": "input_value",
                    "7": "input_data"
                },
                "DAT_200001bc": {
                    "10": "data",
                    "1": "input_data",
                    "3": "data_to_shift",
                    "8": "data_value",
                    "2": "shifted_data"
                },
                "&DAT_08007371": {
                    "2": "array",
                    "5": "data_array",
                    "1": "data_offset_table"
                },
                ">> 8": {
                    "1": "shift_amount"
                },
                "DAT_08007371": {
                    "1": "shift_table",
                    "3": "shift_array"
                },
                "_DAT_08007371": {
                    "2": "shift_table",
                    "1": "data_array"
                },
                "shiftedValue": {
                    "1": "get_shifted_value"
                },
                "data": {
                    "2": "data"
                },
                "offsetArray": {
                    "1": "offset_array"
                },
                "input": {
                    "1": "input"
                },
                "PTR_08007371": {
                    "1": "shift_table_pointer"
                },
                "extractDataFromBinary": {
                    "1": "get_extracted_data"
                },
                "binaryDataOffset": {
                    "1": "offset"
                },
                "dataToExtract": {
                    "1": "extracted_data"
                },
                "dataOffsetTable": {
                    "1": "offset_table"
                },
                "get_shifted_value": {
                    "1": "shifted_value"
                },
                "input_data": {
                    "1": "input_data"
                },
                "array": {
                    "1": "array"
                },
                "extractedData": {
                    "1": "extracted_data"
                },
                "inputData": {
                    "1": "input_data_shifted"
                },
                "shiftTable": {
                    "1": "shift_table"
                }
            }
        },
        "FUN_08002250": {
            "entrypoint": "0x08002250",
            "current_name": "FUNC_08002250",
            "code": "\n\n\nuint FUNC_08002250(void)\n\n{\n  return DAT_200001bc >> (&DAT_08007371)[(_DAT_40021004 & 0x3800) >> 0xb];\n}\n\n",
            "renaming": {
                "FUN_08002250": "FUNC_08002250"
            },
            "calling": [
                "FUN_080025e8"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08002280": {
            "entrypoint": "0x08002280",
            "current_name": "update_parameters_08002280",
            "code": "\nvoid update_parameters_08002280(int base_address,uint *param_array)\n\n{\n  uint updated_value1;\n  uint updated_value2;\n  uint updated_value3;\n  \n  *(uint *)(base_address + 0x20) = *(uint *)(base_address + 0x20) & 0xfffffffe;\n  updated_value2 = *(uint *)(base_address + 4);\n  updated_value3 = *param_array;\n  updated_value1 = *(uint *)(base_address + 0x20) & 0xfffffffd | param_array[2];\n  if (base_address == 0x40012c00) {\n    updated_value1 = (updated_value1 & 0xfffffff7 | param_array[3]) & 0xfffffffb;\n    updated_value2 = updated_value2 & 0xfffffcff | param_array[5] | param_array[6];\n  }\n  *(uint *)(base_address + 4) = updated_value2;\n  *(uint *)(base_address + 0x18) = *(uint *)(base_address + 0x18) & 0xffffff8c | updated_value3;\n  *(uint *)(base_address + 0x34) = param_array[1];\n  *(uint *)(base_address + 0x20) = updated_value1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002280": "update_parameters_08002280",
                "param_1": "base_address",
                "param_2": "param_array",
                "uVar1": "updated_value1",
                "uVar2": "updated_value2",
                "uVar3": "updated_value3"
            },
            "calling": [
                "FUN_0800245c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08002280": {
                    "1": "update_flags_and_values",
                    "4": "update_params",
                    "2": "update_parameter",
                    "5": "update_data",
                    "9": "update_parameters"
                },
                "param_1": {
                    "5": "address",
                    "1": "param_base_addr",
                    "2": "config_address",
                    "4": "data_address",
                    "8": "base_address"
                },
                "param_2": {
                    "3": "parameters",
                    "1": "configuration",
                    "2": "new_values",
                    "4": "param_values",
                    "5": "param_array"
                },
                "uVar1": {
                    "1": "updated_flag1",
                    "2": "updated_var1",
                    "3": "updated_param1",
                    "13": "updated_value1"
                },
                "uVar2": {
                    "2": "original_value",
                    "3": "updated_param2",
                    "13": "updated_value2",
                    "1": "updated_flag2"
                },
                "uVar3": {
                    "3": "updated_param3",
                    "1": "updated_state3",
                    "12": "updated_value3",
                    "2": "updated_var3"
                },
                "0x20": {
                    "1": "param1_field"
                },
                "0x18": {
                    "1": "param4_field"
                },
                "0x34": {
                    "1": "register2"
                },
                "0x40012c00": {
                    "1": "special_case_address"
                },
                "uVar4": {
                    "1": "input_value3"
                }
            }
        },
        "FUN_080022d0": {
            "entrypoint": "0x080022d0",
            "current_name": "update_params_080022d0",
            "code": "\nvoid update_params_080022d0(int base_address,uint *values)\n\n{\n  uint updated_value1;\n  uint updated_value2;\n  uint updated_value3;\n  \n  *(uint *)(base_address + 0x20) = *(uint *)(base_address + 0x20) & 0xfffffeff;\n  updated_value2 = *(uint *)(base_address + 4);\n  updated_value3 = *values;\n  updated_value1 = *(uint *)(base_address + 0x20) & 0xfffffdff | param2_value << 8;\n  if (base_address == 0x40012c00) {\n    updated_value1 = (updated_value1 & 0xfffff7ff | param3_value << 8) & 0xfffffbff;\n    updated_value2 = updated_value2 & 0xffffcfff | (param5_value | param6_value) << 4;\n  }\n  *(uint *)(base_address + 4) = updated_value2;\n  *(uint *)(base_address + 0x1c) = *(uint *)(base_address + 0x1c) & 0xffffff8c | updated_value3;\n  *(uint *)(base_address + 0x3c) = values[1];\n  *(uint *)(base_address + 0x20) = updated_value1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080022d0": "update_params_080022d0",
                "param_1": "base_address",
                "param_2": "values",
                "uVar1": "updated_value1",
                "uVar2": "updated_value2",
                "uVar3": "updated_value3",
                "param_2[2]": "param2_value",
                "param_2[3]": "param3_value",
                "param_2[5]": "param5_value",
                "param_2[6]": "param6_value"
            },
            "calling": [
                "FUN_0800245c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080022d0": {
                    "1": "update_registers",
                    "2": "update_flags_and_values",
                    "8": "update_params",
                    "4": "update_data",
                    "6": "update_parameters"
                },
                "param_1": {
                    "8": "address",
                    "1": "parameter_1",
                    "3": "data_address",
                    "10": "base_address",
                    "2": "param_addr"
                },
                "param_2": {
                    "2": "data_array",
                    "1": "input_data",
                    "5": "parameters",
                    "3": "params_array"
                },
                "uVar1": {
                    "1": "updated_val1",
                    "3": "modified_value1",
                    "2": "modified_flags1",
                    "6": "updated_var1",
                    "12": "updated_value1"
                },
                "uVar2": {
                    "3": "modified_value2",
                    "2": "modified_flags2",
                    "1": "current_value",
                    "12": "updated_value2",
                    "6": "updated_var2"
                },
                "uVar3": {
                    "1": "value2",
                    "2": "modified_value3",
                    "11": "updated_value3",
                    "6": "updated_var3"
                },
                "0x40012c00": {
                    "1": "config_address"
                },
                "PTR_0x20": {
                    "1": "config_value1"
                },
                "PTR_0x1c": {
                    "1": "config_value2"
                },
                "PTR_0x3c": {
                    "1": "config_value3"
                },
                "param_1+0x20": {
                    "1": "address1"
                },
                "param_1+4": {
                    "1": "address2"
                },
                "param_1+0x1c": {
                    "1": "address3"
                },
                "param_1+0x3c": {
                    "1": "address4"
                },
                "param_2[2]": {
                    "1": "modified_param1"
                },
                "param_2[3]": {
                    "1": "modified_param2"
                },
                "param_2[5]": {
                    "1": "param5_value"
                },
                "param_2[6]": {
                    "1": "param6_value"
                },
                "0x20": {
                    "1": "flags1_address"
                },
                "0x1c": {
                    "1": "flags2_address"
                },
                "0x3c": {
                    "1": "value_address"
                },
                "*(uint *)(param_1 + 0x20)": {
                    "1": "flags_value"
                },
                "*(uint *)(param_1 + 4)": {
                    "1": "flags2_value"
                },
                "*(uint *)(param_1 + 0x1c)": {
                    "1": "values1"
                },
                "*(uint *)(param_1 + 0x3c)": {
                    "1": "values2"
                },
                "param_2[5] | param_2[6]": {
                    "1": "modified_param3"
                }
            }
        },
        "FUN_08002324": {
            "entrypoint": "0x08002324",
            "current_name": "update_params_08002324",
            "code": "\nvoid update_params_08002324(int base_address,int *parameters)\n\n{\n  uint flags;\n  int value1;\n  int value2;\n  int constant_value;\n  \n  *(uint *)(base_address + 0x20) = *(uint *)(base_address + 0x20) & 0xffffefff;\n  flags = *(uint *)(base_address + 4);\n  value1 = *parameters;\n  value2 = parameter2_index2;\n  constant_value = 0x40012c00;\n  if (base_address == 0x40012c00) {\n    constant_value = parameter2_index5;\n    flags = flags & 0xffffbfff;\n  }\n  if (base_address == 0x40012c00) {\n    flags = flags | constant_value << 6;\n  }\n  *(uint *)(base_address + 4) = flags;\n  *(uint *)(base_address + 0x1c) = *(uint *)(base_address + 0x1c) & 0xffff8cff | value1 << 8;\n  *(int *)(base_address + 0x40) = param2_1;\n  *(uint *)(base_address + 0x20) = *(uint *)(base_address + 0x20) & 0xffffdfff | value2 << 0xc;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002324": "update_params_08002324",
                "param_1": "base_address",
                "param_2": "parameters",
                "uVar1": "flags",
                "iVar2": "value1",
                "iVar3": "value2",
                "iVar4": "constant_value",
                "param_2[2]": "parameter2_index2",
                "param_2[5]": "parameter2_index5",
                "param_2[1]": "param2_1"
            },
            "calling": [
                "FUN_0800245c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08002324": {
                    "2": "update_parameter",
                    "1": "update_flags_and_values",
                    "6": "update_parameters",
                    "3": "update_data"
                },
                "param_1": {
                    "1": "input_param",
                    "2": "parameter_address",
                    "4": "param_address",
                    "7": "base_address"
                },
                "param_2": {
                    "2": "params_array",
                    "1": "input_data",
                    "3": "param_array",
                    "4": "parameters"
                },
                "uVar1": {
                    "3": "flag",
                    "1": "current_value",
                    "2": "value",
                    "6": "flags"
                },
                "iVar2": {
                    "3": "first_value",
                    "1": "param_2_value",
                    "2": "param2_value1",
                    "5": "value2",
                    "6": "value1"
                },
                "iVar3": {
                    "1": "data_offset",
                    "2": "param_value3",
                    "5": "value3",
                    "6": "value2"
                },
                "iVar4": {
                    "1": "default_base_address",
                    "2": "value4",
                    "5": "constant_value"
                },
                "param_1 + 0x20": {
                    "1": "address1"
                },
                "param_1 + 4": {
                    "1": "parameter1_address4"
                },
                "param_2[2]": {
                    "1": "parameter2_index2"
                },
                "param_2[5]": {
                    "1": "parameter2_index5"
                },
                "param_1 + 0x1c": {
                    "1": "value_address"
                },
                "param_1 + 0x40": {
                    "1": "address_field4"
                },
                "param1+0x20": {
                    "1": "param1_flag"
                },
                "param1+4": {
                    "1": "param1_value"
                },
                "param1+0x1c": {
                    "1": "param1_flag2"
                },
                "param1+0x40": {
                    "1": "param1_value2"
                },
                "param_1 + 0x4": {
                    "1": "address2"
                },
                "*(uint *)(param_1 + 0x20)": {
                    "1": "flags_value"
                },
                "*(uint *)(param_1 + 4)": {
                    "1": "updated_flags_value_final"
                },
                "*(uint *)(param_1 + 0x1c)": {
                    "1": "current_value"
                },
                "*(uint *)(param_1 + 0x20) & 0xffffefff": {
                    "1": "updated_flags_value"
                },
                "*(uint *)(param_1 + 4) & 0xffffbfff": {
                    "1": "updated_flags_value_with_default"
                },
                "*(uint *)(param_1 + 4) | iVar4 << 6": {
                    "1": "updated_flags_value_with_default_base_address"
                },
                "*(uint *)(param_1 + 0x1c) & 0xffff8cff | iVar2 << 8": {
                    "1": "updated_value"
                },
                "*(int *)(param_1 + 0x40)": {
                    "1": "final_param_value2"
                },
                "*(uint *)(param_1 + 0x20) & 0xffffdfff | iVar3 << 0xc": {
                    "1": "final_flags_value"
                },
                "PTR_080012c00": {
                    "1": "constant_ptr"
                },
                "PTR_080012c00_5": {
                    "1": "param_2_value_alt"
                },
                "param_2[1]": {
                    "1": "param2_1"
                }
            }
        },
        "FUN_08002368": {
            "entrypoint": "0x08002368",
            "current_name": "update_memory_08002368",
            "code": "\nvoid update_memory_08002368(uint *memory,uint *data)\n\n{\n  uint updated_value;\n  \n  updated_value = *memory;\n  if (((((memory == (uint *)0x40012c00) || (memory == (uint *)0x40000000)) ||\n       (memory == (uint *)0x40000400)) || (memory == (uint *)0x40000800)) &&\n     (((updated_value = updated_value & 0xffffff8f | register2_value_at_index1, memory == (uint *)0x40012c00 ||\n       (memory == (uint *)0x40000000)) ||\n      ((memory == (uint *)0x40000400 || (memory == (uint *)0x40000800)))))) {\n    updated_value = updated_value & 0xfffffcff | register2_value_at_index3;\n  }\n  *memory = updated_value;\n  memory_ptr[11] = register2_value_at_index2;\n  memory_value2 = *data;\n  updated_value = 0x40012c00;\n  if (memory == (uint *)0x40012c00) {\n    updated_value = register2_value_at_index4;\n  }\n  if (memory == (uint *)0x40012c00) {\n    memory_ptr[12] = updated_value;\n  }\n  memory[5] = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002368": "update_memory_08002368",
                "param_1": "memory",
                "param_2": "data",
                "uVar1": "updated_value",
                "param_2[1]": "register2_value_at_index1",
                "param_2[3]": "register2_value_at_index3",
                "param_2[2]": "register2_value_at_index2",
                "param_2[4]": "register2_value_at_index4",
                "param_1[0xb]": "memory_ptr[11]",
                "param_1[0xc]": "memory_ptr[12]",
                "param_1[10]": "memory_value2"
            },
            "calling": [
                "FUN_080023d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08002368": {
                    "1": "update_param_values",
                    "9": "update_memory",
                    "6": "update_registers",
                    "2": "update_memory_values",
                    "3": "update_data",
                    "7": "update_parameters"
                },
                "param_1": {
                    "1": "register_ptr",
                    "3": "memory_address",
                    "2": "memory_block"
                },
                "param_2": {
                    "4": "data",
                    "1": "update_values",
                    "2": "input_data",
                    "3": "register2"
                },
                "uVar1": {
                    "1": "current_value",
                    "22": "updated_value",
                    "2": "modified_value"
                },
                "0x40012c00": {
                    "1": "some_constant_1"
                },
                "0x40000000": {
                    "1": "constant2"
                },
                "0x40000400": {
                    "1": "constant3"
                },
                "0x40000800": {
                    "1": "some_constant_4"
                },
                "param_2[1]": {
                    "1": "register2_value_at_index1"
                },
                "param_2[3]": {
                    "1": "register2_value_at_index3"
                },
                "param_2[2]": {
                    "1": "values[2]"
                },
                "*param_2": {
                    "1": "register2_value_at_index0"
                },
                "param_2[4]": {
                    "1": "register2_value_at_index4"
                },
                "*param_1": {
                    "1": "memory_content"
                },
                "param_1[0xb]": {
                    "1": "memory_ptr[11]"
                },
                "param_1[0xc]": {
                    "1": "memory_value3"
                },
                "param_1[10]": {
                    "1": "memory_value2"
                }
            }
        },
        "FUN_080023d0": {
            "entrypoint": "0x080023d0",
            "current_name": "initialize_data_080023d0",
            "code": "\nundefined4 initialize_data_080023d0(undefined4 *data_pointer)\n\n{\n  if (data_pointer != (undefined4 *)0x0) {\n    if (*(char *)((int)data_pointer + 0x39) == '\\0') {\n      *(undefined *)(data_pointer + 0xe) = 0;\n      FUN_08004d8c();\n    }\n    *(undefined *)((int)data_pointer + 0x39) = 2;\n    FUN_08002368(*data_pointer,data_pointer + 1);\n    *(undefined *)((int)data_pointer + 0x39) = 1;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_080023d0": "initialize_data_080023d0",
                "param_1": "data_pointer"
            },
            "calling": [
                "FUN_0800458c"
            ],
            "called": [
                "FUN_08002368",
                "FUN_08004d8c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080023d0": {
                    "1": "process_function",
                    "5": "process_data",
                    "2": "check_and_process_data",
                    "3": "process_param",
                    "12": "initialize_data"
                },
                "param_1": {
                    "1": "input_data",
                    "5": "param",
                    "3": "data_ptr",
                    "7": "data_pointer",
                    "2": "input_array"
                },
                "*(char *)((int)param_1 + 0x39)": {
                    "1": "data_flag",
                    "2": "flag_value"
                },
                "*(undefined *)(param_1 + 0xe)": {
                    "1": "result",
                    "2": "status",
                    "3": "data_value"
                },
                "FUN_08004d8c": {
                    "1": "cleanup_data",
                    "3": "execute_function",
                    "2": "initialize"
                },
                "*param_1": {
                    "1": "first_param"
                },
                "*(undefined *)((int)param_1 + 0x39)": {
                    "2": "flag",
                    "1": "flag_value",
                    "3": "status"
                },
                "FUN_08002368": {
                    "1": "update_array_contents",
                    "2": "process_param",
                    "9": "process_data",
                    "4": "copy_data"
                },
                "param_2": {
                    "1": "sub_param",
                    "2": "next_param"
                },
                "param_1 + 0xe": {
                    "1": "result"
                },
                "param_1 + 1": {
                    "1": "data_ptr_next"
                },
                "param_1[0]": {
                    "1": "data_array[0]"
                },
                "dataPointer": {
                    "1": "data"
                },
                "param_1 + 0x39": {
                    "1": "data_flag"
                },
                "param_1->e": {
                    "1": "data->initialized"
                },
                "param_1->param_2": {
                    "1": "data->next"
                }
            }
        },
        "FUN_08002404": {
            "entrypoint": "0x08002404",
            "current_name": "update_params_08002404",
            "code": "\nvoid update_params_08002404(int base_address,int *params_array)\n\n{\n  uint updated_value1;\n  uint updated_value2;\n  int param_value;\n  \n  *(uint *)(base_address + 0x20) = *(uint *)(base_address + 0x20) & 0xffffffef;\n  updated_value2 = *(uint *)(base_address + 4);\n  param_value = *params_array;\n  updated_value1 = *(uint *)(base_address + 0x20) & 0xffffffdf | value2 << 4;\n  if (base_address == 0x40012c00) {\n    updated_value1 = (updated_value1 & 0xffffff7f | value3 << 4) & 0xffffffbf;\n    updated_value2 = updated_value2 & 0xfffff3ff | (value5 | value6) << 2;\n  }\n  *(uint *)(base_address + 4) = updated_value2;\n  *(uint *)(base_address + 0x18) = *(uint *)(base_address + 0x18) & 0xffff8cff | param_value << 8;\n  *(int *)(base_address + 0x38) = data_value1;\n  *(uint *)(base_address + 0x20) = updated_value1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002404": "update_params_08002404",
                "param_1": "base_address",
                "param_2": "params_array",
                "uVar1": "updated_value1",
                "uVar2": "updated_value2",
                "iVar3": "param_value",
                "param_2[2]": "value2",
                "param_2[3]": "value3",
                "param_2[5]": "value5",
                "param_2[6]": "value6",
                "param_2[1]": "data_value1"
            },
            "calling": [
                "FUN_0800245c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08002404": {
                    "2": "update_flags_and_values",
                    "1": "modify_parameters",
                    "6": "update_params",
                    "3": "update_configuration",
                    "5": "update_parameters"
                },
                "param_1": {
                    "2": "configuration_address",
                    "1": "param",
                    "3": "config_address",
                    "9": "base_address",
                    "6": "data_address"
                },
                "param_2": {
                    "2": "input_data",
                    "1": "new_data",
                    "3": "values",
                    "4": "parameters"
                },
                "uVar1": {
                    "1": "updated_val1",
                    "3": "modified_value1",
                    "2": "masked_value1",
                    "4": "updated_var1",
                    "11": "updated_value1"
                },
                "uVar2": {
                    "1": "original_value",
                    "3": "modified_value2",
                    "11": "updated_value2",
                    "2": "masked_value2",
                    "4": "updated_var2"
                },
                "iVar3": {
                    "7": "param_value",
                    "2": "updated_var3",
                    "4": "value_to_update",
                    "1": "parameter_value"
                },
                "param_2[2]": {
                    "1": "value2"
                },
                "param_2[3]": {
                    "1": "config_data3"
                },
                "param_2[5]": {
                    "1": "value5"
                },
                "param_2[6]": {
                    "1": "config_value6"
                },
                "0x20": {
                    "1": "config_value_a"
                },
                "4": {
                    "1": "flag_value"
                },
                "0x18": {
                    "1": "config_value_c"
                },
                "0x38": {
                    "1": "config_value_d"
                },
                "0xffffffef": {
                    "1": "flag_mask1"
                },
                "0xffffffdf": {
                    "1": "flag_mask2"
                },
                "0xffffff7f": {
                    "1": "flag_mask3"
                },
                "0xfffff3ff": {
                    "1": "flag_mask4"
                },
                "0xffff8cff": {
                    "1": "flag_mask5"
                },
                "<<maskedValue>>": {
                    "1": "<<new_value>>"
                },
                "<<valueToUpdate>>": {
                    "1": "<<new_value_to_update>>"
                },
                "*(uint *)(param_1 + 0x20)": {
                    "1": "flags"
                },
                "*(uint *)(param_1 + 4)": {
                    "1": "original_val"
                },
                "*(uint *)(param_1 + 0x18)": {
                    "1": "param_pointer[0x18]"
                },
                "*(int *)(param_1 + 0x38)": {
                    "1": "param_pointer[0x38]"
                },
                "param_2[5] | param_2[6]": {
                    "1": "combined_bits"
                },
                "param_1 + 0x20": {
                    "1": "address1"
                },
                "param_1 + 4": {
                    "1": "address2"
                },
                "param_1 == 0x40012c00": {
                    "1": "check_value"
                },
                "param_1 + 0x18": {
                    "1": "address3"
                },
                "param_1 + 0x38": {
                    "1": "address4"
                },
                "(param_1 + 0x20)": {
                    "1": "config_reg_address"
                },
                "0x4": {
                    "1": "config_value_b"
                },
                "*param_2": {
                    "1": "param_array[0]"
                },
                "iVar3 << 8": {
                    "1": "updated_status_value"
                },
                "param_2[1]": {
                    "1": "data_value1"
                },
                "uVar1 & 0xffffff7f | param_2[3] << 4": {
                    "1": "updated_value1new_bits"
                },
                "uVar2 & 0xfffff3ff | (param_2[5] | param_2[6]) << 2": {
                    "1": "updated_value2new_bits"
                }
            }
        },
        "FUN_0800245c": {
            "entrypoint": "0x0800245c",
            "current_name": "update_data_0800245c",
            "code": "\nvoid update_data_0800245c(int *data,undefined4 param_2,undefined4 param_3)\n\n{\n  int temp1;\n  int temp2;\n  int temp3;\n  int temp4;\n  int var1;\n  uint updated_value;\n  int var3;\n  \n  if (*(char *)(data + 0xe) == '\\x01') {\n    return;\n  }\n  *(undefined *)((int)data + 0x39) = 2;\n  *(undefined *)(data + 0xe) = 1;\n  switch(param_3) {\n  case 0:\n    FUN_08002280(*data);\n    var3 = *data;\n    updated_value = *(uint *)(temp1 + 0x10);\n    *(uint *)(var3 + 0x18) = *(uint *)(var3 + 0x18) | 8;\n    *(uint *)(var3 + 0x18) = *(uint *)(var3 + 0x18) & 0xfffffffb;\n    updated_value = *(uint *)(var3 + 0x18) | updated_value;\n    break;\n  default:\n    goto switchD_0800247a_caseD_1;\n  case 4:\n    FUN_08002404(*data);\n    var3 = *data;\n    var1 = *(int *)(temp2 + 0x10);\n    *(uint *)(var3 + 0x18) = *(uint *)(var3 + 0x18) | 0x800;\n    *(uint *)(var3 + 0x18) = *(uint *)(var3 + 0x18) & 0xfffffbff;\n    updated_value = *(uint *)(var3 + 0x18) | var1 << 8;\n    break;\n  case 8:\n    FUN_080022d0(*data);\n    var3 = *data;\n    updated_value = *(uint *)(temp3 + 0x10);\n    *(uint *)(var3 + 0x1c) = *(uint *)(var3 + 0x1c) | 8;\n    *(uint *)(var3 + 0x1c) = *(uint *)(var3 + 0x1c) & 0xfffffffb;\n    updated_value = *(uint *)(var3 + 0x1c) | updated_value;\n    goto LAB_080024fa;\n  case 0xc:\n    FUN_08002324(*data);\n    var3 = *data;\n    var1 = *(int *)(temp4 + 0x10);\n    *(uint *)(var3 + 0x1c) = *(uint *)(var3 + 0x1c) | 0x800;\n    *(uint *)(var3 + 0x1c) = *(uint *)(var3 + 0x1c) & 0xfffffbff;\n    updated_value = *(uint *)(var3 + 0x1c) | var1 << 8;\nLAB_080024fa:\n    *(uint *)(var3 + 0x1c) = updated_value;\n    goto switchD_0800247a_caseD_1;\n  }\n  *(uint *)(var3 + 0x18) = updated_value;\nswitchD_0800247a_caseD_1:\n  *(undefined *)((int)data + 0x39) = 1;\n  *(undefined *)(data + 0xe) = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800245c": "update_data_0800245c",
                "param_1": "data",
                "extraout_r1": "temp1",
                "extraout_r1_00": "temp2",
                "extraout_r1_01": "temp3",
                "extraout_r1_02": "temp4",
                "iVar1": "var1",
                "iVar3": "var3",
                "uVar2": "updated_value"
            },
            "calling": [
                "FUN_0800458c"
            ],
            "called": [
                "FUN_080022d0",
                "FUN_08002324",
                "FUN_08002404",
                "FUN_08002280"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800245c": {
                    "1": "update_parameters",
                    "2": "update_status",
                    "3": "update_permissions"
                },
                "param_1": {
                    "1": "param",
                    "12": "data",
                    "4": "config",
                    "2": "permissions"
                },
                "param_2": {
                    "8": "param2",
                    "1": "val1",
                    "2": "arg1",
                    "3": "value1",
                    "15": "param_2"
                },
                "param_3": {
                    "1": "additional_param2",
                    "4": "action",
                    "8": "param_3",
                    "3": "value2",
                    "2": "arg2"
                },
                "extraout_r1": {
                    "1": "extra_out_1",
                    "2": "extra_output1",
                    "10": "temp1",
                    "3": "extra_out1"
                },
                "extraout_r1_00": {
                    "1": "flag2",
                    "3": "extra_out2",
                    "2": "result2",
                    "10": "temp2"
                },
                "extraout_r1_01": {
                    "1": "out_r1_01",
                    "2": "tmp3",
                    "3": "extra_out3",
                    "10": "temp3"
                },
                "extraout_r1_02": {
                    "1": "tmp_var_4",
                    "2": "extra_output4",
                    "3": "extra_out4",
                    "10": "temp4"
                },
                "iVar1": {
                    "5": "var1",
                    "1": "result_1",
                    "4": "temp_var1",
                    "2": "i_var"
                },
                "iVar3": {
                    "5": "var3",
                    "1": "data_value",
                    "2": "temp3",
                    "3": "var_3"
                },
                "uVar2": {
                    "1": "new_permissions",
                    "7": "updated_value",
                    "2": "temp2",
                    "5": "result",
                    "3": "var2"
                },
                "FUN_08002280": {
                    "1": "apply_changes_option0"
                },
                "FUN_08002404": {
                    "1": "update_param1_param2_func2"
                },
                "FUN_080022d0": {
                    "1": "apply_changes_option8"
                },
                "FUN_08002324": {
                    "1": "update_param1_param2_func"
                }
            }
        },
        "FUN_08002520": {
            "entrypoint": "0x08002520",
            "current_name": "update_bit_08002520",
            "code": "\nvoid update_bit_08002520(int base_address,uint bit_position,int new_value)\n\n{\n  *(uint *)(base_address + 0x20) = *(uint *)(base_address + 0x20) & ~(1 << (bit_position & 0xff));\n  *(uint *)(base_address + 0x20) = new_value << (bit_position & 0xff) | *(uint *)(base_address + 0x20);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002520": "update_bit_08002520",
                "param_1": "base_address",
                "param_2": "bit_position",
                "param_3": "new_value"
            },
            "calling": [
                "FUN_08002538"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08002520": {
                    "3": "clear_bit_and_shift",
                    "7": "update_bit",
                    "1": "clear_bit_and_insert_value",
                    "2": "set_bit_value",
                    "6": "update_bit_value"
                },
                "param_1": {
                    "2": "data_address",
                    "5": "data",
                    "1": "array_address",
                    "18": "base_address"
                },
                "param_2": {
                    "23": "bit_position",
                    "7": "bit_index",
                    "1": "position"
                },
                "param_3": {
                    "19": "new_value",
                    "2": "value",
                    "8": "bit_value",
                    "1": "value_to_insert"
                },
                "*(uint *)(param_1 + 0x20)": {
                    "1": "bit_field"
                },
                "(1 << (param_2 & 0xff))": {
                    "1": "bit_mask"
                },
                "(param_3 << (param_2 & 0xff))": {
                    "1": "shifted_value"
                },
                "param_4": {
                    "1": "bit_mask"
                },
                "param_5": {
                    "1": "shifted_value"
                }
            }
        },
        "FUN_08002538": {
            "entrypoint": "0x08002538",
            "current_name": "initialize_device_08002538",
            "code": "\nundefined4 initialize_device_08002538(uint **pointer,undefined4 value)\n\n{\n  uint new_value;\n  uint *pointer;\n  \n  FUN_08002520(*pointer,value,1);\n  pointer = *pointer;\n  new_value = 0x40012c00;\n  if (pointer == (uint *)0x40012c00) {\n    new_value = status_value | 0x8000;\n  }\n  if (pointer == (uint *)0x40012c00) {\n    pointer[0x11] = new_value;\n  }\n  *pointer = *pointer | 1;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002538": "initialize_device_08002538",
                "param_1": "pointer",
                "param_2": "value",
                "uVar1": "new_value",
                "puVar2": "pointer",
                "uRam40012c44": "status_value"
            },
            "calling": [
                "FUN_08003ff4"
            ],
            "called": [
                "FUN_08002520"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08002538": {
                    "1": "update_memory_flag",
                    "3": "set_flag_and_value",
                    "2": "initialize_flags",
                    "4": "initialize_device"
                },
                "param_1": {
                    "1": "config_ptr",
                    "6": "pointer",
                    "2": "input_pointer"
                },
                "param_2": {
                    "4": "flag",
                    "1": "param_two",
                    "17": "value",
                    "2": "flag_value"
                },
                "uVar1": {
                    "1": "updated_flag",
                    "9": "new_value",
                    "4": "default_value",
                    "2": "default_flag",
                    "5": "flag_value"
                },
                "puVar2": {
                    "1": "temp_pointer",
                    "2": "current_pointer",
                    "5": "pointer",
                    "4": "pointer_value"
                },
                "FUN_08002520": {
                    "1": "set_device_config"
                },
                "param_3": {
                    "1": "param3"
                },
                "*param_1": {
                    "1": "device_value"
                },
                "uRam40012c44": {
                    "1": "status_value"
                }
            }
        },
        "FUN_08002564": {
            "entrypoint": "0x08002564",
            "current_name": "check_and_update_flag_08002564",
            "code": "\nundefined4 check_and_update_flag_08002564(int *param_array,uint *uint_array)\n\n{\n  undefined4 return_value;\n  \n  return_value = 2;\n  if (*(char *)(param_array + 0xe) != '\\x01') {\n    *(undefined *)((int)param_array + 0x39) = 2;\n    *(uint *)(*param_array + 0x44) =\n         *uint_array | uint_array[1] | uint_array[2] | uint_array[3] | uint_array[4] | uint_array[5] | uint_array[6];\n    *(undefined *)((int)param_array + 0x39) = 1;\n    return_value = 0;\n    *(undefined *)(param_array + 0xe) = 0;\n  }\n  return return_value;\n}\n\n",
            "renaming": {
                "FUN_08002564": "check_and_update_flag_08002564",
                "param_1": "param_array",
                "param_2": "uint_array",
                "uVar1": "return_value"
            },
            "calling": [
                "FUN_0800458c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08002564": {
                    "1": "check_flag_and_set",
                    "3": "update_param_and_return_value",
                    "2": "check_and_update_flags"
                },
                "param_1": {
                    "1": "array_param",
                    "4": "array",
                    "7": "param_array",
                    "2": "array_ptr",
                    "3": "input_array"
                },
                "param_2": {
                    "1": "param_values",
                    "5": "uint_array",
                    "3": "values_array",
                    "2": "mask_array"
                },
                "uVar1": {
                    "1": "status",
                    "9": "result",
                    "19": "return_value"
                },
                "*(char *)(param_1 + 0xe)": {
                    "3": "flag_value",
                    "1": "param_array[14]"
                },
                "*(undefined *)((int)param_1 + 0x39)": {
                    "1": "status"
                },
                "*(uint *)(*param_1 + 0x44)": {
                    "1": "result_value"
                },
                "*(undefined *)(param_1 + 0xe)": {
                    "1": "flag_pointer"
                },
                "*(uint *)(*param_1 + 0x44): ": {
                    "1": "flag_sum"
                }
            }
        },
        "FUN_080025a4": {
            "entrypoint": "0x080025a4",
            "current_name": "update_permissions_080025a4",
            "code": "\nundefined4 update_permissions_080025a4(int *permissions,uint *values)\n\n{\n  uint value1;\n  undefined4 result;\n  int ptr;\n  uint value2;\n  \n  result = 2;\n  if (*(char *)(permissions + 0xe) != '\\x01') {\n    *(undefined *)((int)permissions + 0x39) = 2;\n    ptr = *permissions;\n    value2 = *values;\n    value1 = values[1];\n    *(uint *)(ptr + 4) = *(uint *)(ptr + 4) & 0xffffff8f;\n    *(uint *)(ptr + 4) = *(uint *)(ptr + 4) | value2;\n    *(uint *)(ptr + 8) = *(uint *)(ptr + 8) & 0xffffff7f;\n    *(uint *)(ptr + 8) = *(uint *)(ptr + 8) | value1;\n    *(undefined *)((int)permissions + 0x39) = 1;\n    result = 0;\n    *(undefined *)(permissions + 0xe) = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080025a4": "update_permissions_080025a4",
                "param_1": "permissions",
                "param_2": "values",
                "uVar1": "value1",
                "uVar2": "result",
                "iVar3": "ptr",
                "uVar4": "value2"
            },
            "calling": [
                "FUN_0800458c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080025a4": {
                    "1": "update_flags_and_values",
                    "2": "update_memory",
                    "5": "update_configuration",
                    "3": "update_flags",
                    "7": "update_permissions"
                },
                "param_1": {
                    "1": "flag_data",
                    "2": "memory_pointer",
                    "3": "config",
                    "6": "permissions"
                },
                "param_2": {
                    "3": "mask",
                    "1": "new_permissions",
                    "13": "values",
                    "2": "bitmask_array"
                },
                "uVar1": {
                    "2": "value2",
                    "1": "old_value",
                    "9": "value1"
                },
                "uVar2": {
                    "2": "status",
                    "17": "result",
                    "7": "return_value"
                },
                "iVar3": {
                    "1": "ptr1_val",
                    "2": "first_element",
                    "5": "base_address",
                    "7": "ptr"
                },
                "uVar4": {
                    "1": "permission_mask",
                    "2": "value1",
                    "3": "value0",
                    "5": "value2"
                },
                "<original_function_name>": {
                    "1": "reverse_and_update_flags"
                },
                "<param_1>": {
                    "1": "input_data"
                },
                "<param_2>": {
                    "1": "flag_values"
                },
                "<uVar1>": {
                    "1": "new_flag"
                },
                "<uVar2>": {
                    "1": "result"
                },
                "<iVar3>": {
                    "1": "data_ptr"
                },
                "<uVar4>": {
                    "1": "mask1"
                },
                "<new_variable_name>": {
                    "1": "mask2"
                },
                "*(char *)(ptr1 + 0xe)": {
                    "1": "flag"
                },
                "*(undefined *)((int)ptr1 + 0x39)": {
                    "1": "status_flag"
                },
                "*(uint *)(ptr1 + 4)": {
                    "1": "ptr1_val_plus4"
                },
                "*(uint *)(ptr1 + 8)": {
                    "1": "ptr1_val_plus8"
                }
            }
        },
        "FUN_080025e8": {
            "entrypoint": "0x080025e8",
            "current_name": "update_values_080025e8",
            "code": "\nvoid update_values_080025e8(int *input_array)\n\n{\n  int result1;\n  int result2;\n  uint result3;\n  int result4;\n  int result5;\n  int base_address;\n  \n  base_address = *input_array;\n  result3 = input_array[4];\n  *(uint *)(base_address + 0x10) = *(uint *)(base_address + 0x10) & 0xffffcfff | var2;\n  *(uint *)(base_address + 0xc) = var4 | result3 | var5 | *(uint *)(base_address + 0xc) & 0xffffe9f3;\n  *(uint *)(base_address + 0x14) = *(uint *)(base_address + 0x14) & 0xfffffcff | var7;\n  if (base_address == 0x40013800) {\n    result1 = FUNC_08002250();\n    result4 = (int)(((ulonglong)(uint)(result1 * 0x19) / (ulonglong)(uint)(input_array[1] << 2)) / 100);\n    result1 = FUNC_08002250();\n    result5 = input_array[1];\n    result2 = FUNC_08002250();\n    result2 = (uint)(result1 * 0x19) / (uint)(result5 << 2) +\n            (int)(((ulonglong)(uint)(result2 * 0x19) / (ulonglong)(uint)(input_array[1] << 2)) / 100) *\n            -100;\n    result1 = FUNC_08002250();\n    result3 = (uint)(result1 * 0x19) / (uint)(input_array[1] << 2);\n    result1 = FUNC_08002250();\n  }\n  else {\n    result1 = FUN_08002220();\n    result4 = (int)(((ulonglong)(uint)(result1 * 0x19) / (ulonglong)(uint)(input_array[1] << 2)) / 100);\n    result1 = FUN_08002220();\n    result5 = input_array[1];\n    result2 = FUN_08002220();\n    result2 = (uint)(result1 * 0x19) / (uint)(result5 << 2) +\n            (int)(((ulonglong)(uint)(result2 * 0x19) / (ulonglong)(uint)(input_array[1] << 2)) / 100) *\n            -100;\n    result1 = FUN_08002220();\n    result3 = (uint)(result1 * 0x19) / (uint)(input_array[1] << 2);\n    result1 = FUN_08002220();\n  }\n  *(uint *)(base_address + 8) =\n       (((result3 + (int)(((ulonglong)(uint)(result1 * 0x19) / (ulonglong)(uint)(input_array[1] << 2)) / 100\n                       ) * -100) * 0x10 + 0x32) / 100 & 0xf | (result2 * 0x10 + 0x32U) / 100 & 0xf0) +\n       result4 * 0x10;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080025e8": "update_values_080025e8",
                "param_1": "input_array",
                "iVar1": "result1",
                "iVar2": "result2",
                "uVar3": "result3",
                "iVar4": "result4",
                "iVar5": "result5",
                "iVar6": "base_address",
                "param_1[3]": "var2",
                "param_1[2]": "var4",
                "param_1[5]": "var5",
                "param_1[6]": "var7"
            },
            "calling": [
                "FUN_08002724"
            ],
            "called": [
                "FUN_08002220",
                "FUN_08002250"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080025e8": {
                    "2": "update_config",
                    "1": "improve_code",
                    "5": "update_configuration",
                    "12": "update_values",
                    "3": "update_parameters"
                },
                "param_1": {
                    "2": "configuration",
                    "4": "parameters",
                    "1": "input_data",
                    "5": "params",
                    "6": "input_array"
                },
                "iVar1": {
                    "2": "random_value1",
                    "1": "multiplier",
                    "15": "result1",
                    "9": "value1"
                },
                "iVar2": {
                    "1": "new_value2",
                    "2": "result_2",
                    "16": "result2",
                    "9": "value2"
                },
                "uVar3": {
                    "1": "param4_value",
                    "14": "result3",
                    "2": "random_value3",
                    "10": "value3"
                },
                "iVar4": {
                    "2": "calculated_value1",
                    "1": "calculation1",
                    "3": "value4",
                    "4": "result1",
                    "7": "result4"
                },
                "iVar5": {
                    "1": "rounding2",
                    "3": "var2",
                    "6": "result5",
                    "5": "param1_value",
                    "2": "array_size"
                },
                "iVar6": {
                    "2": "ptr",
                    "1": "pointer_value",
                    "9": "base_address"
                },
                "FUN_08002250": {
                    "1": "get_factor2"
                },
                "FUN_08002220": {
                    "1": "get_another_random_number"
                },
                "*(uint *)(iVar6 + 0x10)": {
                    "1": "var1"
                },
                "param_1[3]": {
                    "1": "var2"
                },
                "*(uint *)(iVar6 + 0xc)": {
                    "1": "var3"
                },
                "param_1[2]": {
                    "1": "var4"
                },
                "param_1[5]": {
                    "1": "var5"
                },
                "*(uint *)(iVar6 + 0x14)": {
                    "1": "var6"
                },
                "param_1[6]": {
                    "1": "var7"
                },
                "iVar1 * 0x19": {
                    "1": "calc1"
                },
                "(ulonglong)(uint)(param_1[1] << 2)": {
                    "1": "calc2"
                },
                "iVar2 * 0x19": {
                    "1": "calc3"
                },
                "iVar2 * 0x19) / (uint)(param_1[1] << 2))": {
                    "1": "calc4"
                },
                "iVar1 * 0x19) / (ulonglong)(uint)(param_1[1] << 2))": {
                    "1": "calc5"
                },
                "(int)(((ulonglong)(uint)(iVar2 * 0x19) / (ulonglong)(uint)(param_1[1] << 2)) / 100) * -100": {
                    "1": "calc6"
                },
                "(int)(((ulonglong)(uint)(iVar1 * 0x19) / (ulonglong)(uint)(param_1[1] << 2)) / 100)": {
                    "1": "calc7"
                },
                "(uint)(iVar1 * 0x19) / (uint)(param_1[1] << 2)": {
                    "1": "calc14"
                },
                "(int)(((ulonglong)(uint)(iVar1 * 0x19) / (ulonglong)(uint)(param_1[1] << 2)) / 100) * -100": {
                    "1": "calc9"
                },
                "(uVar3 + (int)(((ulonglong)(uint)(iVar1 * 0x19) / (ulonglong)(uint)(param_1[1] << 2)) / 100) * -100)": {
                    "1": "calc10"
                },
                "iVar2 * 0x10 + 0x32U) / 100 & 0xf0": {
                    "1": "calc11"
                },
                "uVar3 + (int)(((ulonglong)(uint)(iVar1 * 0x19) / (ulonglong)(uint)(param_1[1] << 2)) / 100) * -100) * 0x10 + 0x32) / 100 & 0xf": {
                    "1": "calc12"
                },
                "iVar4 * 0x10": {
                    "1": "calc13"
                },
                "((uVar3 + (int)(((ulonglong)(uint)(iVar1 * 0x19) / (ulonglong)(uint)(param_1[1] << 2)) / 100) * -100) * 0x10 + 0x32) / 100 & 0xf | (iVar2 * 0x10 + 0x32U) / 100 & 0xf0) + iVar4 * 0x10": {
                    "1": "result"
                }
            }
        },
        "FUN_08002724": {
            "entrypoint": "0x08002724",
            "current_name": "initialize_data_08002724",
            "code": "\nundefined4 initialize_data_08002724(int *data)\n\n{\n  int temp_var;\n  \n  if (data != (int *)0x0) {\n    if (*(char *)((int)data + 0x39) == '\\0') {\n      *(undefined *)(data + 0xe) = 0;\n      FUN_08004e7c();\n    }\n    *(undefined *)((int)data + 0x39) = 2;\n    *(uint *)(*data + 0xc) = *(uint *)(*data + 0xc) & 0xffffdfff;\n    FUN_080025e8(data);\n    temp_var = *data;\n    *(uint *)(temp_var + 0x10) = *(uint *)(temp_var + 0x10) & 0xffffb7ff;\n    *(uint *)(temp_var + 0x14) = *(uint *)(temp_var + 0x14) & 0xffffffd5;\n    *(uint *)(temp_var + 0xc) = *(uint *)(temp_var + 0xc) | 0x2000;\n    index_value = 0;\n    *(undefined *)((int)data + 0x39) = 1;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08002724": "initialize_data_08002724",
                "param_1": "data",
                "iVar1": "temp_var",
                "param_1[0xf]": "index_value"
            },
            "calling": [
                "FUN_0800458c"
            ],
            "called": [
                "FUN_08004e7c",
                "FUN_080025e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08002724": {
                    "1": "initialize_parameter",
                    "2": "check_and_update_param",
                    "8": "initialize_data"
                },
                "param_1": {
                    "6": "param",
                    "1": "input_data",
                    "2": "input_param",
                    "4": "parameter"
                },
                "iVar1": {
                    "1": "index",
                    "2": "result",
                    "15": "temp_var",
                    "3": "temp_var1"
                },
                "FUN_08004e7c": {
                    "1": "perform_operation_a",
                    "5": "perform_action",
                    "3": "do_something",
                    "2": "initialize_data"
                },
                "FUN_080025e8": {
                    "4": "process_data",
                    "1": "update_values",
                    "2": "execute_function_b"
                },
                "*(char *)((int)param_1 + 0x39)": {
                    "1": "is_param_initialized"
                },
                "*(undefined *)(param_1 + 0xe)": {
                    "1": "status"
                },
                "*(undefined *)((int)param_1 + 0x39)": {
                    "1": "flag_updated"
                },
                "*(uint *)(*param_1 + 0xc)": {
                    "1": "uint_value_1"
                },
                "*(uint *)(iVar1 + 0x10)": {
                    "1": "uint_value_2"
                },
                "*(uint *)(iVar1 + 0x14)": {
                    "1": "temp_var2"
                },
                "*(uint *)(iVar1 + 0xc)": {
                    "1": "var_4"
                },
                "param_1[0xf]": {
                    "1": "index_value"
                },
                "*param_1": {
                    "1": "ptr_1"
                },
                "0x39": {
                    "1": "status_flag"
                },
                "0xe": {
                    "1": "status_value"
                },
                "0xc": {
                    "1": "data1"
                },
                "0x10": {
                    "1": "data2"
                },
                "0x14": {
                    "1": "data3"
                },
                "0xffffdfff": {
                    "1": "mask1"
                },
                "0xffffb7ff": {
                    "1": "mask2"
                },
                "0xffffffd5": {
                    "1": "mask3"
                },
                "0x2000": {
                    "1": "mask4"
                },
                "0xf": {
                    "1": "value"
                },
                "1": {
                    "1": "new_status_value"
                },
                "return 0": {
                    "1": "return_success"
                },
                "return 1": {
                    "1": "return_failure"
                }
            }
        },
        "FUN_0800290a": {
            "entrypoint": "0x0800290a",
            "current_name": "FUNC_0800290a",
            "code": "\nvoid FUNC_0800290a(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800290a": "FUNC_0800290a"
            },
            "calling": [
                "FUN_0800299a"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800290c": {
            "entrypoint": "0x0800290c",
            "current_name": "FUNC_0800290c",
            "code": "\nundefined4 FUNC_0800290c(int *param_1)\n\n{\n  byte bVar1;\n  int iVar2;\n  uint uVar3;\n  undefined4 uVar4;\n  short sVar5;\n  ushort *puVar6;\n  ushort *puVar7;\n  bool bVar8;\n  \n  if ((*(byte *)((int)param_1 + 0x39) & 0xef) != 0x22) {\n    return 2;\n  }\n  iVar2 = *param_1;\n  puVar6 = (ushort *)param_1[10];\n  if (param_1[2] == 0x1000) {\n    if (param_1[4] == 0) {\n      puVar7 = puVar6 + 1;\n      *puVar6 = (ushort)((uint)(*(int *)(iVar2 + 4) << 0x17) >> 0x17);\n    }\n    else {\n      puVar7 = (ushort *)((int)puVar6 + 1);\n      *puVar6 = (ushort)*(int *)(iVar2 + 4) & 0xff;\n    }\n    param_1[10] = (int)puVar7;\n  }\n  else {\n    if (param_1[4] == 0) {\n      bVar1 = (byte)*(undefined4 *)(iVar2 + 4);\n      param_1[10] = (int)puVar6 + 1;\n    }\n    else {\n      uVar4 = *(undefined4 *)(iVar2 + 4);\n      param_1[10] = (int)puVar6 + 1;\n      bVar1 = (byte)uVar4 & 0x7f;\n    }\n    *(byte *)puVar6 = bVar1;\n  }\n  sVar5 = *(short *)((int)param_1 + 0x2e) + -1;\n  *(short *)((int)param_1 + 0x2e) = sVar5;\n  if (sVar5 == 0) {\n    iVar2 = *param_1;\n    *(uint *)(iVar2 + 0xc) = *(uint *)(iVar2 + 0xc) & 0xffffffdf;\n    bVar8 = *(char *)((int)param_1 + 0x39) != '2';\n    if (bVar8) {\n      uVar3 = *(uint *)(iVar2 + 0xc) & 0xfffffeff;\n    }\n    else {\n      iVar2 = 0x12;\n      uVar3 = 0x32;\n    }\n    if (bVar8) {\n      *(uint *)(iVar2 + 0xc) = uVar3;\n      uVar3 = *(uint *)(iVar2 + 0x14) & 0xfffffffe;\n    }\n    if (bVar8) {\n      *(uint *)(iVar2 + 0x14) = uVar3;\n      iVar2 = 1;\n    }\n    *(char *)((int)param_1 + 0x39) = (char)iVar2;\n    FUN_08004c30();\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800290c": "FUNC_0800290c"
            },
            "calling": [
                "FUN_0800299a"
            ],
            "called": [
                "FUN_08004c30"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08002998": {
            "entrypoint": "0x08002998",
            "current_name": "FUNC_08002998",
            "code": "\nvoid FUNC_08002998(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002998": "FUNC_08002998"
            },
            "calling": [
                "FUN_0800299a"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800299a": {
            "entrypoint": "0x0800299a",
            "current_name": "process_data_0800299a",
            "code": "\nvoid process_data_0800299a(uint **data)\n\n{\n  uint value1;\n  short counter;\n  uint value2;\n  uint *pointer1;\n  undefined flag;\n  uint *ptr;\n  uint flag;\n  bool condition;\n  \n  ptr = *data;\n  value2 = *ptr;\n  value1 = ptr[3];\n  if ((value2 & 0xf) == 0) {\n    if (((int)(value2 << 0x1a) < 0) && ((int)(value1 << 0x1a) < 0)) {\n      FUNC_0800290c();\n      return;\n    }\n  }\n  else {\n    flag = ptr[5] & 1;\n    if ((flag != 0) || ((value1 & 0x120) != 0)) {\n      ptr = (uint *)(value2 << 0x1f);\n      if ((int)ptr < 0) {\n        condition = (int)(value1 << 0x17) < 0;\n        if (condition) {\n          ptr = (uint *)((uint)data[0xf] | 1);\n        }\n        if (condition) {\n          data[0xf] = ptr;\n        }\n      }\n      if (((int)(value2 << 0x1d) < 0) && (flag != 0)) {\n        data[0xf] = (uint *)((uint)data[0xf] | 2);\n      }\n      if (((int)(value2 << 0x1e) < 0) && (flag != 0)) {\n        data[0xf] = (uint *)((uint)data[0xf] | 4);\n      }\n      if (((int)(value2 << 0x1c) < 0) && (flag != 0)) {\n        data[0xf] = (uint *)((uint)data[0xf] | 8);\n      }\n      if (data[0xf] == (uint *)0x0) {\n        return;\n      }\n      if (((int)(value2 << 0x1a) < 0) && ((int)(value1 << 0x1a) < 0)) {\n        FUNC_0800290c(data);\n      }\n      ptr = *data;\n      if ((-1 < (int)data[0xf] << 0x1c) && ((ptr[5] & 0x40) == 0)) {\n        FUNC_08002998(data);\n        data[0xf] = (uint *)0x0;\n        return;\n      }\n      ptr[3] = ptr[3] & 0xfffffedf;\n      ptr[5] = ptr[5] & 0xfffffffe;\n      *(undefined *)((int)data + 0x39) = 1;\n      FUNC_08002998(data);\n      return;\n    }\n  }\n  if (((int)(value2 << 0x18) < 0) && ((int)(value1 << 0x18) < 0)) {\n    if ((*(byte *)((int)data + 0x39) & 0xdf) == 0x12) {\n      pointer1 = data[8];\n      if (data[2] == (uint *)0x1000) {\n        ptr[1] = *(ushort *)pointer1 & 0x1ff;\n        if (data[4] == (uint *)0x0) {\n          pointer1 = (uint *)((int)pointer1 + 2);\n        }\n        else {\n          pointer1 = (uint *)((int)pointer1 + 1);\n        }\n        data[8] = pointer1;\n      }\n      else {\n        data[8] = (uint *)((int)pointer1 + 1);\n        ptr[1] = (uint)*(byte *)pointer1;\n      }\n      counter = *(short *)((int)data + 0x26) + -1;\n      *(short *)((int)data + 0x26) = counter;\n      if (counter == 0) {\n        ptr[3] = ptr[3] & 0xffffff7f;\n        ptr[3] = ptr[3] | 0x40;\n        return;\n      }\n    }\n  }\n  else if (((int)(value2 << 0x19) < 0) && ((int)(value1 << 0x19) < 0)) {\n    ptr[3] = ptr[3] & 0xffffffbf;\n    if (*(char *)((int)data + 0x39) == '2') {\n      flag = 0x22;\n    }\n    else {\n      flag = 1;\n    }\n    *(undefined *)((int)data + 0x39) = flag;\n    FUNC_0800290a(data);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800299a": "process_data_0800299a",
                "param_1": "data",
                "uVar1": "value1",
                "sVar2": "counter",
                "uVar3": "value2",
                "puVar4": "pointer1",
                "uVar5": "flag",
                "puVar6": "ptr",
                "uVar7": "flag",
                "bVar8": "condition"
            },
            "calling": [],
            "called": [
                "FUN_08002998",
                "FUN_0800290a",
                "FUN_0800290c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800299a": {
                    "1": "check_conditions_and_update_flags",
                    "18": "process_data"
                },
                "param_1": {
                    "17": "data",
                    "1": "ptr_array",
                    "2": "input_data"
                },
                "uVar1": {
                    "4": "first_value",
                    "1": "third_value",
                    "3": "var1",
                    "15": "value1",
                    "2": "variable1"
                },
                "sVar2": {
                    "1": "temp2",
                    "9": "count",
                    "3": "var2",
                    "12": "counter",
                    "2": "variable2"
                },
                "uVar3": {
                    "3": "var3",
                    "1": "tmp3",
                    "2": "variable3",
                    "15": "value2"
                },
                "puVar4": {
                    "1": "ptr_var1",
                    "3": "ptr",
                    "2": "variable4",
                    "4": "pointer",
                    "5": "pointer1"
                },
                "uVar5": {
                    "13": "flag",
                    "1": "check",
                    "2": "variable5",
                    "3": "var5"
                },
                "puVar6": {
                    "5": "pointer2",
                    "2": "ptr2",
                    "1": "ptr_data",
                    "8": "ptr"
                },
                "uVar7": {
                    "12": "flag",
                    "2": "variable7",
                    "1": "flag_value",
                    "3": "var7",
                    "8": "flag2"
                },
                "bVar8": {
                    "3": "flag",
                    "1": "check",
                    "9": "condition",
                    "6": "is_flag_set",
                    "2": "variable8"
                },
                "FUNC_08002998": {
                    "1": "update_data",
                    "2": "perform_operation"
                },
                "FUNC_0800290a": {
                    "4": "perform_action",
                    "1": "do_something2"
                },
                "FUN_0800290c": {
                    "1": "do_something3"
                },
                "*param_1": {
                    "1": "params"
                }
            }
        },
        "FUN_08002ad0": {
            "entrypoint": "0x08002ad0",
            "current_name": "initialize_mpu9250_08002ad0",
            "code": "\nvoid initialize_mpu9250_08002ad0(void)\n\n{\n  FUN_0800407c(0xd0,0x75,\"../Src/MPU9250.c\",0x3b);\n  FUN_0800403c(0xd0,0x6b,0x80,1);\n  FUN_0800403c(0xd0,0x6b,1);\n  FUN_0800403c(0xd0,0x6c,0,1);\n  FUN_0800403c(0xd0,0x19,0,1);\n  FUN_0800403c(0xd0,0x1d,3,1);\n  FUN_0800403c(0xd0,0x1a,3,1);\n  FUN_0800403c(0xd0,0x1b,0x10,1);\n  FUN_0800403c(0xd0,0x1c,8,1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ad0": "initialize_mpu9250_08002ad0"
            },
            "calling": [
                "FUN_08002ea0"
            ],
            "called": [
                "FUN_0800407c",
                "FUN_0800403c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08002ad0": {
                    "1": "configure_mpu9250",
                    "28": "initialize_mpu9250"
                },
                "param_1": {
                    "6": "address",
                    "4": "device_address",
                    "1": "param1"
                },
                "param_2": {
                    "1": "log_level",
                    "2": "data",
                    "5": "register_address",
                    "4": "value"
                },
                "param_3": {
                    "2": "filename",
                    "3": "param_3",
                    "1": "bit_mask"
                },
                "param_4": {
                    "2": "length",
                    "1": "arg4",
                    "3": "line"
                },
                "FUN_0800407c": {
                    "1": "display_error_message",
                    "11": "log_message",
                    "6": "log_error"
                },
                "FUN_0800403c": {
                    "1": "send_command",
                    "6": "write_register",
                    "4": "configure_register",
                    "7": "configure_sensor",
                    "2": "write_to_register"
                },
                "DAT_08002ad0": {
                    "1": "file"
                },
                "DAT_0800407c": {
                    "1": "line"
                }
            }
        },
        "FUN_08002b48": {
            "entrypoint": "0x08002b48",
            "current_name": "initialize_mpu9250_08002b48",
            "code": "\nvoid initialize_mpu9250_08002b48(void)\n\n{\n  undefined4 result;\n  uint input_value;\n  int var2;\n  int var2;\n  undefined4 result1;\n  undefined4 result2;\n  \n  result1 = 0;\n  result2 = input_value & 0xffff0000;\n  FUN_080040e8(0xd0,0x3b,&result1,6,\"../Src/MPU9250.c\",0x58);\n  DAT_200002f6 = CONCAT11(result1._2_1_,result1._3_1_);\n  DAT_200002f4 = CONCAT11((undefined)result1,result1._1_1_);\n  DAT_200002f8 = CONCAT11((undefined)result2,result2._1_1_);\n  var2 = (int)DAT_200002f6;\n  var2 = (int)DAT_200002f8;\n  result = FUN_08000c44();\n  result = FUN_08000cec(result,0x40800000);\n  DAT_200002d0 = FUN_08000cec(result,0x38000000);\n  result = FUN_08000c44(var2);\n  result = FUN_08000cec(result,0x40800000);\n  DAT_200002d4 = FUN_08000cec(result,0x38000000);\n  result = FUN_08000c44(var2);\n  result = FUN_08000cec(result,0x40800000);\n  DAT_200002d8 = FUN_08000cec(result,0x38000000);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002b48": "initialize_mpu9250_08002b48",
                "in_r3": "input_value",
                "local_18": "result1",
                "local_14": "result2",
                "iVar3": "var2",
                "iVar2": "var2",
                "uVar1": "result"
            },
            "calling": [
                "FUN_08002f28"
            ],
            "called": [
                "FUN_08000c44",
                "FUN_08000cec",
                "FUN_080040e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08002b48": {
                    "1": "initialize_mpu",
                    "30": "initialize_mpu9250"
                },
                "in_r3": {
                    "2": "input",
                    "14": "input_value",
                    "1": "input_param",
                    "5": "input_data"
                },
                "local_18": {
                    "1": "first_byte",
                    "5": "var1",
                    "9": "result1",
                    "3": "value1"
                },
                "local_14": {
                    "1": "upper_byte",
                    "5": "var2",
                    "9": "result2",
                    "3": "value2"
                },
                "iVar3": {
                    "1": "lower_bytes_value",
                    "2": "var1"
                },
                "iVar2": {
                    "1": "result2_int",
                    "2": "value1",
                    "3": "var2"
                },
                "uVar1": {
                    "3": "return_value",
                    "2": "calculated_value",
                    "1": "modified_value",
                    "11": "result"
                },
                "DAT_200002f6": {
                    "2": "concatenated_value1",
                    "1": "data_var1"
                },
                "DAT_200002f4": {
                    "1": "concatenated_mixed_bytes",
                    "2": "concatenated_value2"
                },
                "DAT_200002f8": {
                    "1": "byte3",
                    "2": "concatenated_value3"
                },
                "DAT_200002d0": {
                    "2": "final_value1",
                    "1": "calculation1",
                    "4": "final_result1"
                },
                "DAT_200002d4": {
                    "1": "converted_temp_var7",
                    "2": "final_value2",
                    "4": "final_result2"
                },
                "DAT_200002d8": {
                    "1": "new_var6",
                    "2": "final_value3",
                    "4": "final_result3"
                },
                "FUN_080040e8": {
                    "2": "log_message",
                    "1": "print_debug_message"
                },
                "FUN_08000c44": {
                    "2": "calculate_value",
                    "1": "calculate_result"
                },
                "FUN_08000cec": {
                    "1": "perform_operation"
                }
            }
        },
        "FUN_08002bf0": {
            "entrypoint": "0x08002bf0",
            "current_name": "initialize_mpu9250_08002bf0",
            "code": "\nvoid initialize_mpu9250_08002bf0(void)\n\n{\n  undefined4 result;\n  int config_byte3_int;\n  int temperature_value;\n  undefined4 config_value;\n  undefined2 result2;\n  \n  config_value = 0;\n  result2 = 0;\n  FUN_080040e8(0xd0,0x43,&config_value,6,\"../Src/MPU9250.c\",0x7b);\n  DAT_200002c0 = CONCAT11(config_value._2_1_,config_value._3_1_);\n  DAT_200002be = CONCAT11((undefined)config_value,config_value._1_1_);\n  DAT_200002c2 = CONCAT11((undefined)result2,result2._1_1_);\n  temperature_value = (int)DAT_200002c0;\n  config_byte3_int = (int)DAT_200002c2;\n  result = FUN_08000c44();\n  result = FUN_08000cec(result,0x447a0000);\n  result = FUN_08000cec(result,0x38000000);\n  DAT_200002c4 = FUN_08000ad8(result,DAT_20000000);\n  result = FUN_08000c44(temperature_value);\n  result = FUN_08000cec(result,0x447a0000);\n  result = FUN_08000cec(result,0x38000000);\n  DAT_200002c8 = FUN_08000ad8(result,DAT_20000004);\n  result = FUN_08000c44(config_byte3_int);\n  result = FUN_08000cec(result,0x447a0000);\n  result = FUN_08000cec(result,0x38000000);\n  DAT_200002cc = FUN_08000ad8(result,DAT_20000008);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002bf0": "initialize_mpu9250_08002bf0",
                "local_20": "config_value",
                "local_1c": "result2",
                "iVar3": "temperature_value",
                "iVar2": "config_byte3_int",
                "uVar1": "result"
            },
            "calling": [
                "FUN_08002f28"
            ],
            "called": [
                "FUN_08000ad8",
                "FUN_08000c44",
                "FUN_08000cec",
                "FUN_080040e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08002bf0": {
                    "28": "initialize_mpu9250",
                    "1": "initialize_mpu9250_data",
                    "2": "init_mpu9250"
                },
                "local_20": {
                    "3": "register_value",
                    "1": "temperature_value",
                    "2": "temperature",
                    "5": "config_value",
                    "4": "result1"
                },
                "local_1c": {
                    "3": "data2",
                    "1": "acceleration_value",
                    "2": "flag_value",
                    "4": "result2"
                },
                "FUN_080040e8": {
                    "1": "send_sensor_data",
                    "3": "print_debug_message",
                    "6": "log_error"
                },
                "DAT_200002c0": {
                    "1": "gyrometer_config"
                },
                "DAT_200002be": {
                    "1": "accel_config1"
                },
                "DAT_200002c2": {
                    "1": "result_byte3"
                },
                "iVar3": {
                    "1": "concatenated_value1_to_int",
                    "2": "temperature_value"
                },
                "iVar2": {
                    "1": "status_int"
                },
                "FUN_08000c44": {
                    "4": "calculate_value",
                    "2": "calculate_value1",
                    "1": "get_accel_config",
                    "3": "get_sensor_data"
                },
                "FUN_08000cec": {
                    "1": "configure_sensor",
                    "2": "calculate_value2"
                },
                "DAT_200002c4": {
                    "1": "gyro_x_param",
                    "3": "result1"
                },
                "DAT_200002c8": {
                    "1": "sensor_data2",
                    "3": "result2"
                },
                "DAT_200002cc": {
                    "1": "gyro_x_param",
                    "3": "result3"
                },
                "UVar1": {
                    "1": "fixed_point_data"
                },
                "uVar1": {
                    "1": "calculated_value",
                    "15": "result",
                    "3": "return_value"
                },
                "FUN_08000ad8": {
                    "3": "perform_operation",
                    "4": "process_data",
                    "1": "calculate_result",
                    "8": "calculate_checksum"
                },
                "DAT_20000000": {
                    "1": "sensor_config1_data",
                    "2": "param1"
                },
                "DAT_20000004": {
                    "2": "param2",
                    "1": "constant2"
                },
                "DAT_20000008": {
                    "2": "param3",
                    "1": "some_parameter3"
                },
                "param_1": {
                    "1": "value1"
                },
                "param_2": {
                    "1": "value2"
                },
                "param_3": {
                    "1": "value3"
                },
                "param_4": {
                    "1": "value4"
                },
                "FUN08000cec": {
                    "1": "multiply_values"
                }
            }
        },
        "FUN_08002cb0": {
            "entrypoint": "0x08002cb0",
            "current_name": "initialize_mpu9250_08002cb0",
            "code": "\nvoid initialize_mpu9250_08002cb0(undefined4 param1,undefined4 param2,undefined4 param3,uint param4)\n\n{\n  undefined4 result;\n  uint temp;\n  \n  temp = param4;\n  FUN_0800403c(0xd0,0x37,0x22,1,param1,param2,param3);\n  FUN_0800403c(0xd0,0x6a,1);\n  FUN_0800407c(0x18,0,\"../Src/MPU9250.c\",0xad);\n  FUN_0800403c(0x18,0xb,1);\n  FUN_0800403c(0x18,10,0,1);\n  FUN_0800403c(0x18,10,0xf,1);\n  FUN_080040e8(0x18,0x10,&temp,3,\"../Src/MPU9250.c\",0xb6);\n  result = FUN_08000c44((temp & 0xff) - 0x80);\n  result = FUN_08000cec(result,0x3b800000);\n  DAT_200002e8 = FUN_08000adc(result,0x3f800000);\n  result = FUN_08000c44((temp >> 8 & 0xff) - 0x80);\n  result = FUN_08000cec(result,0x3b800000);\n  DAT_200002ec = FUN_08000adc(result,0x3f800000);\n  result = FUN_08000c44((temp >> 0x10 & 0xff) - 0x80);\n  result = FUN_08000cec(result,0x3b800000);\n  DAT_200002f0 = FUN_08000adc(result,0x3f800000);\n  FUN_0800403c(0x18,10,0,1);\n  FUN_0800403c(0x18,10,0x16,1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002cb0": "initialize_mpu9250_08002cb0",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "result",
                "local_c": "temp"
            },
            "calling": [
                "FUN_08002ea0"
            ],
            "called": [
                "FUN_0800407c",
                "FUN_0800403c",
                "FUN_08000c44",
                "FUN_08000cec",
                "FUN_080040e8",
                "FUN_08000adc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08002cb0": {
                    "1": "configure_mpu9250",
                    "29": "initialize_mpu9250"
                },
                "param_1": {
                    "1": "accelerometer_config",
                    "3": "var1",
                    "2": "arg1",
                    "18": "param1"
                },
                "param_2": {
                    "18": "param2",
                    "1": "gyroscope_config",
                    "3": "var2",
                    "2": "arg2"
                },
                "param_3": {
                    "3": "var3",
                    "1": "magnetometer_config",
                    "18": "param3",
                    "2": "arg3"
                },
                "param_4": {
                    "3": "data",
                    "17": "param4",
                    "1": "param",
                    "2": "value"
                },
                "uVar1": {
                    "1": "normalized_value",
                    "6": "result"
                },
                "local_c": {
                    "2": "value",
                    "1": "data_value"
                },
                "FUN_0800407c": {
                    "2": "print_message",
                    "1": "set_debug_info",
                    "9": "log_message",
                    "3": "print_error_message"
                },
                "FUN_0800403c": {
                    "1": "send_data_to_device",
                    "6": "send_data",
                    "2": "configure_sensor",
                    "8": "send_command"
                },
                "FUN_08000c44": {
                    "3": "normalize_value",
                    "8": "calculate_offset",
                    "1": "calculate_something",
                    "5": "calculate_value1"
                },
                "FUN_08000cec": {
                    "2": "calculate_value",
                    "1": "convert_value",
                    "3": "normalize_value",
                    "5": "calculate_value2",
                    "4": "scale_value"
                },
                "FUN_080040e8": {
                    "1": "update_data",
                    "8": "process_data",
                    "2": "configure_sensor"
                },
                "FUN_08000adc": {
                    "2": "convert_to_float",
                    "1": "calculate_var3",
                    "3": "adjust_value",
                    "5": "calculate_value3"
                },
                "DAT_200002e8": {
                    "1": "accel_scale"
                },
                "DAT_200002ec": {
                    "1": "scaling_factor2"
                },
                "DAT_200002f0": {
                    "1": "magnetometer_offset"
                },
                "undefined4 param_1": {
                    "1": "param_1"
                },
                "undefined4 param_2": {
                    "1": "param_2"
                },
                "undefined4 param_3": {
                    "1": "param_3"
                },
                "uint param_4": {
                    "1": "sensor_config"
                },
                "undefined4 uVar1": {
                    "1": "result"
                },
                "uint local_c": {
                    "1": "config_value"
                }
            }
        },
        "FUN_08002d88": {
            "entrypoint": "0x08002d88",
            "current_name": "initialize_mpu9250_08002d88",
            "code": "\nvoid initialize_mpu9250_08002d88(undefined4 param1,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  int result;\n  undefined4 temp_var1;\n  undefined4 temp_var2;\n  int temp_var3;\n  undefined2 var1;\n  undefined var2;\n  undefined var3;\n  undefined var4;\n  undefined var5;\n  byte var6;\n  undefined var7;\n  \n  var7 = (undefined)((uint)param4 >> 0x18);\n  var1 = 0;\n  var2 = 0;\n  var3 = 0;\n  var4 = 0;\n  var5 = 0;\n  var6 = 0;\n  result = FUN_0800407c(0x18,2,\"../Src/MPU9250.c\",0xd7,param1,param2);\n  if (result << 0x1f < 0) {\n    FUN_080040e8(0x18,3,&var1,7,\"../Src/MPU9250.c\",0xda);\n    temp_var2 = DAT_2000001c;\n    if ((int)((uint)var6 << 0x1c) < 0) {\n      DAT_200013bb = DAT_200013bb + 1;\n    }\n    else {\n      DAT_200002ba = CONCAT11(var3,var2);\n      DAT_200002bc = CONCAT11(var5,var4);\n      temp_var3 = (int)DAT_200002ba;\n      result = (int)DAT_200002bc;\n      DAT_200002b8 = var1;\n      temp_var1 = FUN_08000c44();\n      temp_var1 = FUN_08000cec(temp_var1,temp_var2);\n      temp_var1 = FUN_08000cec(temp_var1,DAT_200002e8);\n      temp_var1 = FUN_08000ad8(temp_var1,DAT_20000020);\n      DAT_200002dc = FUN_08000cec(temp_var1,DAT_2000002c);\n      temp_var1 = FUN_08000c44(temp_var3);\n      temp_var1 = FUN_08000cec(temp_var1,temp_var2);\n      temp_var1 = FUN_08000cec(temp_var1,DAT_200002ec);\n      temp_var1 = FUN_08000ad8(temp_var1,DAT_20000024);\n      DAT_200002e0 = FUN_08000cec(temp_var1,DAT_20000030);\n      temp_var1 = FUN_08000c44(result);\n      temp_var2 = FUN_08000cec(temp_var1,temp_var2);\n      temp_var2 = FUN_08000cec(temp_var2,DAT_200002f0);\n      temp_var2 = FUN_08000ad8(temp_var2,DAT_20000028);\n      DAT_200002e4 = FUN_08000cec(temp_var2,DAT_20000034);\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002d88": "initialize_mpu9250_08002d88",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "iVar1": "result",
                "uVar2": "temp_var1",
                "uVar3": "temp_var2",
                "iVar4": "temp_var3",
                "local_28": "var1",
                "uStack_26": "var2",
                "uStack_25": "var3",
                "local_24": "var4",
                "local_23": "var5",
                "local_22": "var6",
                "uStack_21": "var7"
            },
            "calling": [
                "FUN_08002f28"
            ],
            "called": [
                "FUN_0800407c",
                "FUN_08000ad8",
                "FUN_08000c44",
                "FUN_08000cec",
                "FUN_080040e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08002d88": {
                    "3": "process_mpu9250_data",
                    "25": "initialize_mpu9250",
                    "1": "initialize_sensor"
                },
                "param_1": {
                    "1": "arg1",
                    "2": "width",
                    "27": "param1"
                },
                "param_2": {
                    "27": "param2",
                    "1": "arg2",
                    "2": "height"
                },
                "param_3": {
                    "27": "param3",
                    "1": "file_path"
                },
                "param_4": {
                    "27": "param4",
                    "1": "param"
                },
                "iVar1": {
                    "6": "status",
                    "1": "func_result1",
                    "2": "result1",
                    "14": "result"
                },
                "uVar2": {
                    "1": "temp_var",
                    "2": "result2",
                    "5": "temp1",
                    "3": "result1",
                    "6": "result",
                    "10": "temp_var1"
                },
                "uVar3": {
                    "1": "func_result3",
                    "2": "var2",
                    "11": "temp_var2",
                    "5": "temp2"
                },
                "iVar4": {
                    "2": "result4",
                    "11": "temp_var3",
                    "1": "tmp_var3",
                    "5": "temp3",
                    "4": "value"
                },
                "local_28": {
                    "3": "flag",
                    "1": "value1",
                    "2": "variable1",
                    "6": "var1",
                    "4": "local_var1"
                },
                "uStack_26": {
                    "1": "undef_stack1",
                    "2": "byte1",
                    "6": "var2"
                },
                "uStack_25": {
                    "6": "var3",
                    "1": "local_var3",
                    "2": "temp_var6"
                },
                "local_24": {
                    "2": "byte3",
                    "1": "byte4",
                    "6": "var4"
                },
                "local_23": {
                    "1": "local_var4",
                    "6": "var5",
                    "2": "local_var3"
                },
                "local_22": {
                    "2": "var8",
                    "5": "var6",
                    "1": "local_var6"
                },
                "uStack_21": {
                    "1": "param4_msb",
                    "2": "var7"
                },
                "FUN_0800407c": {
                    "1": "get_return_value"
                },
                "FUN_080040e8": {
                    "2": "print_error_message",
                    "1": "print_error_msg"
                },
                "DAT_2000001c": {
                    "2": "data1",
                    "1": "msg",
                    "4": "constant1"
                },
                "DAT_200013bb": {
                    "1": "unknown2",
                    "5": "counter"
                },
                "DAT_200002ba": {
                    "1": "variable1"
                },
                "DAT_200002bc": {
                    "1": "variable2"
                },
                "DAT_200002b8": {
                    "1": "unknown5"
                },
                "FUN_08000c44": {
                    "2": "function1",
                    "1": "perform_operation1"
                },
                "FUN_08000cec": {
                    "2": "function2",
                    "1": "call_func4"
                },
                "DAT_200002e8": {
                    "1": "unknown6",
                    "4": "constant2"
                },
                "DAT_20000020": {
                    "1": "var2",
                    "4": "constant3"
                },
                "DAT_200002dc": {
                    "1": "data_variable8"
                },
                "DAT_200002ec": {
                    "1": "constant5",
                    "3": "constant4"
                },
                "DAT_20000024": {
                    "1": "data5",
                    "3": "constant5"
                },
                "DAT_200002e0": {
                    "1": "var2"
                },
                "DAT_200002f0": {
                    "1": "global_var12",
                    "3": "constant6"
                },
                "DAT_20000028": {
                    "1": "data7",
                    "3": "constant7"
                },
                "DAT_200002e4": {
                    "1": "result4"
                },
                "uDStack_21": {
                    "1": "temp_var3"
                },
                "FUN_08000ad8": {
                    "1": "call_func2"
                },
                "DAT_2000002c": {
                    "1": "constant4"
                },
                "DAT_20000030": {
                    "1": "constant7"
                }
            }
        },
        "FUN_08002ea0": {
            "entrypoint": "0x08002ea0",
            "current_name": "initialize_system_08002ea0",
            "code": "\nvoid initialize_system_08002ea0(undefined4 arg1,undefined4 arg2,undefined4 arg3,undefined4 arg4)\n\n{\n  undefined4 result;\n  \n  FUN_08002ad0();\n  FUN_08002cb0();\n  FUN_08003314(0x3f19999a);\n  FUN_08003320(0,result,arg3,arg4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ea0": "initialize_system_08002ea0",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arg3",
                "param_4": "arg4",
                "extraout_r1": "result"
            },
            "calling": [
                "FUN_08004194"
            ],
            "called": [
                "FUN_08002ad0",
                "FUN_08002cb0",
                "FUN_08003320",
                "FUN_08003314"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08002ea0": {
                    "1": "initialize_process",
                    "3": "initialize",
                    "4": "initialize_application",
                    "10": "initialize_system",
                    "7": "initialize_program"
                },
                "param_1": {
                    "1": "config_param",
                    "17": "arg1",
                    "2": "unused_param_1"
                },
                "param_2": {
                    "2": "unused_param_2",
                    "1": "param_2",
                    "17": "arg2"
                },
                "param_3": {
                    "1": "arg_3",
                    "2": "param_3",
                    "17": "arg3"
                },
                "param_4": {
                    "1": "task4",
                    "2": "unused_param_4",
                    "17": "arg4"
                },
                "extraout_r1": {
                    "1": "output_arg",
                    "2": "extra_result",
                    "5": "result"
                },
                "FUN_08002ad0": {
                    "2": "initialize_something",
                    "1": "perform_initial_setup",
                    "3": "perform_initialization",
                    "6": "initialize_subsystem1"
                },
                "FUN_08002cb0": {
                    "1": "perform_initialization",
                    "6": "initialize_subsystem2",
                    "2": "configure_system",
                    "4": "configure_settings",
                    "3": "initialize_module2"
                },
                "FUN_08003314": {
                    "2": "perform_task4",
                    "1": "configure_option1",
                    "3": "set_value",
                    "4": "set_initial_value",
                    "6": "set_constant_value"
                },
                "FUN_08003320": {
                    "4": "execute_operation",
                    "1": "use_value",
                    "3": "perform_operation",
                    "2": "execute_process"
                }
            }
        },
        "FUN_08002ec0": {
            "entrypoint": "0x08002ec0",
            "current_name": "calculate_result_08002ec0",
            "code": "\nvoid calculate_result_08002ec0(void)\n\n{\n  undefined4 result1;\n  undefined4 constant1;\n  undefined4 constant2;\n  \n  constant1 = DAT_2000024c;\n  constant2 = DAT_20000010;\n  result1 = FUN_08000ad8(0x3f800000,DAT_20000010);\n  constant1 = FUN_08000cec(result1,constant1);\n  constant2 = FUN_08000cec(constant2,DAT_2000000c);\n  DAT_2000000c = FUN_08000adc(constant2,constant1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ec0": "calculate_result_08002ec0",
                "uVar1": "result1",
                "uVar2": "constant1",
                "uVar3": "constant2"
            },
            "calling": [
                "FUN_08004a84",
                "FUN_08002f28"
            ],
            "called": [
                "FUN_08000ad8",
                "FUN_08000cec",
                "FUN_08000adc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08002ec0": {
                    "4": "calculate_sum",
                    "1": "calculate_new_data",
                    "2": "calculate_new_value",
                    "18": "calculate_result"
                },
                "param_1": {
                    "1": "first_param",
                    "4": "value1",
                    "2": "input_value1"
                },
                "param_2": {
                    "1": "second_param",
                    "2": "input_value2",
                    "4": "value2"
                },
                "param_3": {
                    "1": "third_param",
                    "2": "value3"
                },
                "param_4": {
                    "2": "value4",
                    "1": "unused2"
                },
                "uVar1": {
                    "2": "result_1",
                    "1": "product1",
                    "17": "result1"
                },
                "uVar2": {
                    "1": "memory1",
                    "2": "initial_value1",
                    "10": "constant1",
                    "6": "result2"
                },
                "uVar3": {
                    "1": "input1",
                    "6": "result3",
                    "2": "initial_value2",
                    "10": "constant2"
                },
                "FUN_08000ad8": {
                    "1": "multiply",
                    "5": "calculate_value1"
                },
                "FUN_08000cec": {
                    "1": "add",
                    "5": "calculate_value2"
                },
                "FUN_08000adc": {
                    "1": "calculate_value3",
                    "2": "calculate_result_value",
                    "3": "store_result",
                    "4": "calculate_result"
                }
            }
        },
        "FUN_08002ed4": {
            "entrypoint": "0x08002ed4",
            "current_name": "calculate_result_08002ed4",
            "code": "\nvoid calculate_result_08002ed4(void)\n\n{\n  undefined4 result1;\n  undefined4 constant1;\n  undefined4 constant2;\n  \n  constant1 = DAT_20000248;\n  constant2 = input1;\n  result1 = FUN_08000ad8(0x3f800000,input1);\n  constant1 = FUN_08000cec(result1,constant1);\n  constant2 = FUN_08000cec(constant2,value2);\n  value2 = FUN_08000adc(constant2,constant1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ed4": "calculate_result_08002ed4",
                "uVar1": "result1",
                "uVar2": "constant1",
                "uVar3": "constant2",
                "uRam20000018": "input1",
                "uRam20000014": "value2"
            },
            "calling": [
                "FUN_08004a84",
                "FUN_08002f28"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08002ed4": {
                    "1": "calculate_and_assign_result",
                    "2": "update_data",
                    "3": "calculate_and_update_value",
                    "4": "calculate_and_store_result",
                    "9": "calculate_result"
                },
                "uVar1": {
                    "1": "input1",
                    "2": "new_value1",
                    "20": "result1",
                    "3": "result"
                },
                "uVar2": {
                    "3": "initial_value1",
                    "1": "source_data1",
                    "10": "constant1",
                    "2": "original_value",
                    "4": "constant"
                },
                "uVar3": {
                    "1": "memory_value1",
                    "3": "initial_value2",
                    "2": "value",
                    "9": "constant2"
                },
                "uRam20000018": {
                    "1": "input_value1",
                    "2": "input1"
                },
                "uRam20000014": {
                    "1": "result",
                    "2": "value2"
                },
                "FUN_08000ad8": {
                    "1": "calculate_value1"
                },
                "FUN_08000cec": {
                    "1": "add"
                },
                "FUN_08000adc": {
                    "1": "add"
                }
            }
        },
        "FUN_08002ee8": {
            "entrypoint": "0x08002ee8",
            "current_name": "process_data_08002ee8",
            "code": "\nvoid process_data_08002ee8(void)\n\n{\n  undefined4 data;\n  int result;\n  \n  data = DAT_20000250;\n  result = FUN_08001050(DAT_20000250,0xc3340000);\n  if ((result != 0) && (result = FUN_08001028(data,0x42b40000), result != 0)) {\n    FUN_08000adc(data,0x42b40000);\n    return;\n  }\n  FUN_08000ad8(data,0x43870000);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ee8": "process_data_08002ee8",
                "iVar2": "result",
                "uVar1": "data"
            },
            "calling": [
                "FUN_08004a84",
                "FUN_08002f28"
            ],
            "called": [
                "FUN_08000ad8",
                "FUN_08001050",
                "FUN_08001028",
                "FUN_08000adc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08002ee8": {
                    "4": "initialize_connection",
                    "1": "perform_operation",
                    "8": "process_data"
                },
                "iVar2": {
                    "1": "error_code",
                    "25": "result"
                },
                "uVar1": {
                    "1": "connection_handle",
                    "7": "data",
                    "2": "input_value",
                    "3": "data_pointer",
                    "4": "data_value"
                },
                "FUN_08001050": {
                    "1": "check_condition_one",
                    "4": "check_condition_a",
                    "11": "check_condition1"
                },
                "FUN_08001028": {
                    "1": "is_data_valid",
                    "4": "check_condition_b",
                    "11": "check_condition2"
                },
                "FUN_08000adc": {
                    "1": "process_data_success",
                    "5": "perform_action1",
                    "2": "process_data_a"
                },
                "FUN_08000ad8": {
                    "1": "execute_operation_b",
                    "2": "process_data_b",
                    "5": "perform_action2"
                },
                "param_1": {
                    "1": "connection_handle",
                    "2": "input_value",
                    "3": "param1"
                },
                "param_2": {
                    "1": "additional_parameter",
                    "3": "param2",
                    "2": "constant_value"
                },
                "0xc3340000": {
                    "1": "constant1"
                },
                "0x42b40000": {
                    "1": "constant2"
                },
                "0x43870000": {
                    "1": "constant3"
                },
                "param_3": {
                    "1": "input_param3",
                    "5": "param3"
                },
                "param_4": {
                    "1": "param_4",
                    "5": "param4"
                },
                "FUn_08000ad8": {
                    "1": "process_success_case"
                },
                "FUn_08000adc": {
                    "1": "process_failure_case"
                }
            }
        },
        "FUN_08002f28": {
            "entrypoint": "0x08002f28",
            "current_name": "initialize_system_08002f28",
            "code": "\n\n\nvoid initialize_system_08002f28(void)\n\n{\n  undefined4 result;\n  \n  FUN_08002b48();\n  FUN_08002bf0();\n  FUN_08002d88();\n  DAT_20000258 = thunk_FUN_0800115c();\n  result = FUN_08000c3c(DAT_20000258 - DAT_20000254);\n  FUN_08000e54(result,0x447a0000);\n  FUN_08003320();\n  DAT_20000254 = DAT_20000258;\n  FUN_08003330(DAT_200002d4 + -0x80000000,DAT_200002d0 + -0x80000000,DAT_200002d8,DAT_200002c8,\n               DAT_200002c4,DAT_200002cc + -0x80000000,DAT_200002dc,DAT_200002e0,DAT_200002e4,\n               &DAT_20000248);\n  _DAT_2000142a = (undefined2)((uint)(int)DAT_200002f4 / 100);\n  _DAT_2000142e = (undefined2)((uint)(int)DAT_200002f8 / 100);\n  DAT_2000142c = (undefined2)((uint)(int)DAT_200002f6 / 100);\n  DAT_20001430 = DAT_200002be;\n  _DAT_20001432 = DAT_200002c0;\n  DAT_20001434 = DAT_200002c2;\n  _DAT_20001436 = DAT_200002b8;\n  DAT_20001438 = DAT_200002ba;\n  DAT_2000143a = DAT_200002bc;\n  result = FUN_08002ed4();\n  FUN_08000cec(result,0x41200000);\n  DAT_20001395._0_2_ = FUN_08001078();\n  result = FUN_08002ec0();\n  FUN_08000cec(result,0x41200000);\n  DAT_20001395._2_2_ = FUN_08001078();\n  FUN_08002ee8();\n  DAT_20001399 = FUN_08001078();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002f28": "initialize_system_08002f28",
                "uVar1": "result"
            },
            "calling": [
                "FUN_0800411c"
            ],
            "called": [
                "FUN_08000e54",
                "FUN_08000c3c",
                "FUN_08002ee8",
                "FUN_08000cec",
                "FUN_08003320",
                "FUN_08002bf0",
                "FUN_08002ed4",
                "FUN_08002b48",
                "thunk_FUN_0800115c",
                "FUN_08002d88",
                "FUN_08003330",
                "FUN_08001078",
                "FUN_08002ec0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08002f28": {
                    "1": "execute_program",
                    "5": "initialize_application",
                    "18": "initialize_system",
                    "2": "initialize_data"
                },
                "FUN_08000e54": {
                    "5": "calculate_value",
                    "1": "update_data",
                    "3": "perform_calculation",
                    "2": "calculate_checksum",
                    "7": "perform_operation"
                },
                "FUN_08000c3c": {
                    "1": "get_offset",
                    "10": "calculate_offset",
                    "17": "calculate_difference"
                },
                "FUN_08002ee8": {
                    "1": "finalize_system",
                    "3": "perform_cleanup"
                },
                "FUN_08000cec": {
                    "3": "calculate_result",
                    "1": "set_default_value",
                    "2": "set_data_value"
                },
                "FUN_08003320": {
                    "1": "initialize_variable1",
                    "2": "do_something"
                },
                "FUN_08002bf0": {
                    "1": "initialize_connections",
                    "2": "configure_settings",
                    "5": "initialize_component_b",
                    "4": "initialize_component2"
                },
                "FUN_08002ed4": {
                    "1": "get_parameters",
                    "2": "initialize_component_e"
                },
                "FUN_08002b48": {
                    "5": "initialize_component_a",
                    "1": "initialize_peripheral_devices",
                    "3": "initialize_components",
                    "2": "initialize_part1",
                    "4": "initialize_component1"
                },
                "thunk_FUN_0800115c": {
                    "1": "initialize_part4",
                    "2": "retrieve_data",
                    "4": "get_initial_value"
                },
                "FUN_08002d88": {
                    "1": "initialize_data4",
                    "2": "initialize_part3",
                    "4": "initialize_component3",
                    "5": "initialize_component_c"
                },
                "FUN_08003330": {
                    "1": "finalize_component_b",
                    "6": "process_data",
                    "2": "configure_settings"
                },
                "FUN_08001078": {
                    "2": "get_data_value",
                    "1": "get_status"
                },
                "FUN_08002ec0": {
                    "1": "retrieve_value2",
                    "2": "initialize_module_g",
                    "3": "get_configuration"
                },
                "uVar1": {
                    "4": "result",
                    "1": "return_value"
                },
                "DAT_20000258": {
                    "1": "initial_value"
                },
                "DAT_20000254": {
                    "1": "data2"
                },
                "DAT_200002d4": {
                    "1": "interrupt_param1"
                },
                "DAT_200002d0": {
                    "1": "data4"
                },
                "DAT_200002c8": {
                    "1": "interrupt_param4"
                },
                "DAT_200002c4": {
                    "1": "data6"
                },
                "DAT_200002cc": {
                    "1": "data7"
                },
                "DAT_200002dc": {
                    "1": "data8"
                },
                "DAT_200002e0": {
                    "1": "data9"
                },
                "DAT_200002e4": {
                    "1": "interrupt_param9"
                },
                "DAT_200002f4": {
                    "1": "data11"
                },
                "DAT_200002f8": {
                    "1": "data12"
                },
                "DAT_200002f6": {
                    "1": "value3"
                },
                "DAT_200002be": {
                    "1": "data14"
                },
                "DAT_200002c0": {
                    "1": "config_value2"
                },
                "DAT_200002c2": {
                    "1": "data16"
                },
                "DAT_200002b8": {
                    "1": "config_value4"
                },
                "DAT_200002ba": {
                    "1": "data18"
                },
                "DAT_200002bc": {
                    "1": "config_value6"
                },
                "_DAT_2000142a": {
                    "1": "normalized_value1"
                },
                "_DAT_2000142e": {
                    "1": "data21"
                },
                "DAT_2000142c": {
                    "1": "data22"
                },
                "DAT_20001430": {
                    "1": "normalized_value4"
                },
                "_DAT_20001432": {
                    "1": "data24"
                },
                "DAT_20001434": {
                    "1": "data25"
                },
                "_DAT_20001436": {
                    "1": "normalized_value7"
                },
                "DAT_20001438": {
                    "1": "normalized_value8"
                },
                "DAT_2000143a": {
                    "1": "normalized_value9"
                },
                "DAT_20001395": {
                    "1": "current_values"
                },
                "DAT_20001399": {
                    "1": "data30"
                },
                "FUN_0800115c": {
                    "1": "get_initial_value"
                },
                "DAT_20001395._0_2_": {
                    "1": "value1"
                },
                "DAT_20001395._2_2_": {
                    "1": "value2"
                },
                "DAT_200002d8": {
                    "1": "interrupt_param3"
                },
                "DAT_20000248": {
                    "1": "interrupt_buffer"
                }
            }
        },
        "FUN_08003034": {
            "entrypoint": "0x08003034",
            "current_name": "convert_local_cto_uint_08003034",
            "code": "\nuint convert_local_cto_uint_08003034(undefined4 value1,undefined4 value2,undefined4 value3,undefined4 value4)\n\n{\n  undefined4 converted_value;\n  \n  converted_value = value4;\n  FUN_080040b8(0xee,0,&converted_value,3,\"../Src/MS5611.c\",0x8c,value3);\n  return (uint)CONCAT12((undefined)converted_value,CONCAT11(converted_value._1_1_,converted_value._2_1_));\n}\n\n",
            "renaming": {
                "FUN_08003034": "convert_local_cto_uint_08003034",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "value3",
                "param_4": "value4",
                "local_c": "converted_value"
            },
            "calling": [
                "FUN_0800411c"
            ],
            "called": [
                "FUN_080040b8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08003034": {
                    "1": "extract_bits_from_local_c",
                    "5": "convert_local_cto_uint",
                    "2": "convert_to_unsigned_int",
                    "4": "extract_data_from_binary"
                },
                "param_1": {
                    "2": "input1",
                    "1": "input_param_1",
                    "4": "arg1",
                    "9": "value1"
                },
                "param_2": {
                    "2": "input_2",
                    "1": "input_param_2",
                    "9": "value2",
                    "4": "arg2"
                },
                "param_3": {
                    "1": "value_3",
                    "2": "conversion_param3",
                    "8": "value3",
                    "4": "arg3"
                },
                "param_4": {
                    "1": "input_param_4",
                    "2": "input4",
                    "4": "arg4",
                    "8": "value4"
                },
                "local_c": {
                    "1": "local_c",
                    "12": "converted_value",
                    "3": "combined_value",
                    "2": "concatenated_value",
                    "6": "result"
                },
                "FUN_080040b8": {
                    "4": "process_data",
                    "1": "perform_operation"
                }
            }
        },
        "FUN_08003068": {
            "entrypoint": "0x08003068",
            "current_name": "get_data_08003068",
            "code": "\nundefined4 get_data_08003068(void)\n\n{\n  return DAT_200002fc;\n}\n\n",
            "renaming": {
                "FUN_08003068": "get_data_08003068"
            },
            "calling": [
                "FUN_08004a30"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08003068": {
                    "1": "get_data_variable",
                    "6": "get_global_variable",
                    "8": "get_data_value",
                    "11": "get_data",
                    "2": "get_dat_value"
                },
                "DAT_200002fc": {
                    "10": "data",
                    "1": "data_size",
                    "6": "global_variable",
                    "2": "result"
                }
            }
        },
        "FUN_08003298": {
            "entrypoint": "0x08003298",
            "current_name": "initialize_sensor_data_08003298",
            "code": "\nvoid initialize_sensor_data_08003298(void)\n\n{\n  int index;\n  undefined temp1;\n  undefined temp2;\n  \n  index = 0;\n  FUN_0800403c(0xee,0x1e,1);\n  thunk_FUNC_08001168(10);\n  DAT_20000038 = 8;\n  do {\n    temp1 = 0;\n    temp2 = 0;\n    FUN_080040e8(0xee,index + 0xa0U & 0xffff,&temp1,2,\"../Src/MS5611.c\",0x7c);\n    *(ushort *)((int)&DAT_2000025c + index) = CONCAT11(temp1,temp2);\n    index = index + 2;\n  } while (index != 0x10);\n  index = 0;\n  do {\n    (&DAT_20000300)[index] = 0;\n    index = index + 1;\n  } while (index != 0x14);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003298": "initialize_sensor_data_08003298",
                "iVar1": "index",
                "local_1c": "temp1",
                "local_1b": "temp2"
            },
            "calling": [
                "FUN_08004194"
            ],
            "called": [
                "FUN_0800403c",
                "thunk_FUN_08001168",
                "FUN_080040e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08003298": {
                    "11": "initialize_ms5611",
                    "13": "initialize_sensor_data",
                    "2": "initialize_sensor",
                    "3": "initialize_sensors"
                },
                "iVar1": {
                    "13": "index",
                    "1": "i",
                    "12": "counter",
                    "2": "iteration_count"
                },
                "local_1c": {
                    "6": "first_byte",
                    "7": "temp1",
                    "1": "data_lb"
                },
                "local_1b": {
                    "1": "byte_value2",
                    "2": "higher_byte",
                    "6": "second_byte",
                    "7": "temp2",
                    "4": "upper_byte"
                },
                "FUN_0800403c": {
                    "2": "initialize_sensor",
                    "1": "set_sensor_parameters",
                    "3": "configure_sensor"
                },
                "thunk_FUNC_08001168": {
                    "1": "set_sensor_threshold"
                },
                "DAT_20000038": {
                    "2": "sensor_config",
                    "1": "sensor_mode"
                },
                "FUN_080040e8": {
                    "8": "read_sensor_data",
                    "1": "read_data_from_sensor"
                },
                "param_1": {
                    "1": "param1"
                },
                "param_2": {
                    "1": "param_b"
                },
                "param_3": {
                    "1": "param3"
                },
                "param_4": {
                    "1": "param4"
                },
                "&DAT_2000025c": {
                    "1": "sensor_data"
                },
                "DAT_2000025c": {
                    "1": "sensor_data_buffer",
                    "3": "sensor_data"
                },
                "DAT_20000300": {
                    "1": "result",
                    "2": "sensor_buffer"
                }
            }
        },
        "FUN_08003314": {
            "entrypoint": "0x08003314",
            "current_name": "set_global_parameter_08003314",
            "code": "\nvoid set_global_parameter_08003314(undefined4 new_value)\n\n{\n  DAT_2000035c = new_value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003314": "set_global_parameter_08003314",
                "param_1": "new_value"
            },
            "calling": [
                "FUN_08002ea0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08003314": {
                    "2": "set_data",
                    "1": "set_param_1",
                    "4": "set_param",
                    "3": "set_global_variable",
                    "6": "set_global_parameter"
                },
                "param_1": {
                    "2": "data",
                    "11": "new_value",
                    "1": "input_param",
                    "10": "value",
                    "5": "new_param"
                },
                "DAT_2000035c": {
                    "1": "parameter",
                    "5": "global_variable",
                    "2": "global_value",
                    "3": "global_parameter"
                },
                "[unchanged_variable]": {
                    "1": "[unchanged_variable]"
                }
            }
        },
        "FUN_08003320": {
            "entrypoint": "0x08003320",
            "current_name": "initialize_data_08003320",
            "code": "\nvoid initialize_data_08003320(undefined4 value)\n\n{\n  DAT_20000360 = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003320": "initialize_data_08003320",
                "param_1": "value"
            },
            "calling": [
                "FUN_08002ea0",
                "FUN_08002f28"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08003320": {
                    "1": "initialize_global_data",
                    "2": "set_data_parameter",
                    "5": "initialize_data",
                    "4": "set_global_parameter"
                },
                "param_1": {
                    "5": "data",
                    "4": "new_value",
                    "1": "new_data",
                    "14": "value",
                    "2": "data_value"
                },
                "DAT_20000360": {
                    "1": "param",
                    "2": "global_parameter"
                },
                "param_n": {
                    "1": "data_n"
                }
            }
        },
        "FUN_08003330": {
            "entrypoint": "0x08003330",
            "current_name": "process_data_08003330",
            "code": "\nvoid process_data_08003330(undefined4 input1,undefined4 input2,undefined4 input3,undefined4 input4,\n                 undefined4 input5,undefined4 input6,undefined4 input7,undefined4 input8,\n                 undefined4 input9,undefined4 *result_array)\n\n{\n  undefined4 result1;\n  undefined4 result2;\n  int result3;\n  undefined4 result4;\n  undefined4 result5;\n  undefined4 result6;\n  undefined4 result7;\n  int result8;\n  undefined4 result9;\n  undefined4 result10;\n  undefined4 result11;\n  undefined4 result12;\n  undefined4 result13;\n  undefined4 result14;\n  undefined4 result15;\n  undefined4 result16;\n  undefined4 result17;\n  undefined4 result18;\n  int result19;\n  undefined4 result20;\n  undefined4 result21;\n  undefined4 result22;\n  undefined4 result23;\n  undefined4 result24;\n  undefined4 result25;\n  int result26;\n  undefined4 result27;\n  undefined4 result28;\n  undefined4 result29;\n  int result30;\n  undefined8 result31;\n  undefined8 result32;\n  \n  result29 = DAT_20000048;\n  result28 = DAT_20000044;\n  result30 = DAT_20000040;\n  result27 = DAT_2000003c;\n  result1 = FUN_08000cec(input1,input1);\n  result2 = FUN_08000cec(input2);\n  result1 = FUN_08000adc(result1,result2);\n  result2 = FUN_08000cec(input3);\n  FUN_08000adc(result1,result2);\n  FUN_08000428();\n  FUN_08005bc8();\n  result1 = FUN_08000a30();\n  result3 = FUN_08001014(result1,0);\n  if (result3 == 0) {\n    result2 = FUN_08000cec(input7);\n    result4 = FUN_08000cec(input8);\n    result2 = FUN_08000adc(result2,result4);\n    result4 = FUN_08000cec(input9);\n    FUN_08000adc(result2,result4);\n    FUN_08000428();\n    FUN_08005bc8();\n    result2 = FUN_08000a30();\n    result3 = FUN_08001014(result2,0);\n    if (result3 == 0) {\n      result31 = FUN_08000428(input4);\n      FUN_080004d0((int)result31,(int)((ulonglong)result31 >> 0x20),0xa2529d39,0x3f91df46);\n      result4 = FUN_08000a30();\n      result31 = FUN_08000428(input5);\n      FUN_080004d0((int)result31,(int)((ulonglong)result31 >> 0x20),0xa2529d39,0x3f91df46);\n      result5 = FUN_08000a30();\n      result31 = FUN_08000428(input6);\n      FUN_080004d0((int)result31,(int)((ulonglong)result31 >> 0x20),0xa2529d39,0x3f91df46);\n      result6 = FUN_08000a30();\n      result3 = FUN_08000adc(result27);\n      result7 = FUN_08000adc(result30);\n      result8 = FUN_08000adc(result28,result28);\n      result9 = FUN_08000adc(result29,result29);\n      result10 = FUN_08000cec(result27);\n      result11 = FUN_08000cec(result27,result30);\n      result12 = FUN_08000cec(result27,result28);\n      result13 = FUN_08000cec(result30);\n      result14 = FUN_08000cec(result30,result29);\n      result15 = FUN_08000cec(result28,result28);\n      result16 = FUN_08000cec(result29,result29);\n      result1 = FUN_08000e54(0x3f800000,result1);\n      result2 = FUN_08000e54(0x3f800000,result2);\n      result17 = FUN_08000cec(input7,result2);\n      result18 = FUN_08000cec(input8,result2);\n      result2 = FUN_08000cec(input9,result2);\n      result19 = FUN_08000cec(result3,result17);\n      result20 = FUN_08000cec(result3,result18);\n      result21 = FUN_08000cec(result3,result2);\n      result22 = FUN_08000cec(result7,result17);\n      result23 = FUN_08000cec(result10,result17);\n      result24 = FUN_08000cec(result29,result20);\n      result23 = FUN_08000ad8(result23,result24);\n      result24 = FUN_08000cec(result28,result21);\n      result23 = FUN_08000adc(result23,result24);\n      result24 = FUN_08000cec(result13,result17);\n      result23 = FUN_08000adc(result23,result24);\n      result24 = FUN_08000cec(result7,result18);\n      result24 = FUN_08000cec(result24,result28);\n      result23 = FUN_08000adc(result23,result24);\n      result24 = FUN_08000cec(result7,result2);\n      result24 = FUN_08000cec(result24,result29);\n      result23 = FUN_08000adc(result23,result24);\n      result24 = FUN_08000cec(result15,result17);\n      result23 = FUN_08000ad8(result23,result24);\n      result24 = FUN_08000cec(result16,result17);\n      result23 = FUN_08000ad8(result23,result24);\n      result24 = FUN_08000cec(result29,result19);\n      result25 = FUN_08000cec(result10,result18);\n      result24 = FUN_08000adc(result24,result25);\n      result21 = FUN_08000cec(result30,result21);\n      result21 = FUN_08000ad8(result24,result21);\n      result24 = FUN_08000cec(result28,result22);\n      result21 = FUN_08000adc(result21,result24);\n      result24 = FUN_08000cec(result13,result18);\n      result21 = FUN_08000ad8(result21,result24);\n      result24 = FUN_08000cec(result15,result18);\n      result21 = FUN_08000adc(result21,result24);\n      result24 = FUN_08000cec(result8,result2);\n      result24 = FUN_08000cec(result24,result29);\n      result21 = FUN_08000adc(result21,result24);\n      result24 = FUN_08000cec(result16,result18);\n      result21 = FUN_08000ad8(result21,result24);\n      result23 = FUN_08000cec(result23,result23);\n      result21 = FUN_08000cec(result21,result21);\n      FUN_08000adc(result23,result21);\n      FUN_08000428();\n      FUN_08005bc8();\n      result26 = FUN_08000a30();\n      result21 = FUN_08000cec(result19 + -0x80000000,result28);\n      result20 = FUN_08000cec(result30,result20);\n      result20 = FUN_08000adc(result21,result20);\n      result10 = FUN_08000cec(result10,result2);\n      result10 = FUN_08000adc(result20,result10);\n      result20 = FUN_08000cec(result29,result22);\n      result10 = FUN_08000adc(result10,result20);\n      result20 = FUN_08000cec(result13,result2);\n      result10 = FUN_08000ad8(result10,result20);\n      result20 = FUN_08000cec(result8,result18);\n      result20 = FUN_08000cec(result20,result29);\n      result10 = FUN_08000adc(result10,result20);\n      result20 = FUN_08000cec(result15,result2);\n      result10 = FUN_08000ad8(result10,result20);\n      result20 = FUN_08000cec(result16,result2);\n      result10 = FUN_08000adc(result10,result20);\n      result20 = FUN_08000adc(result10,result10);\n      result21 = FUN_08000adc(result14);\n      result22 = FUN_08000cec(result28,result3);\n      result21 = FUN_08000ad8(result21,result22);\n      result22 = FUN_08000cec(input1,result1);\n      result21 = FUN_08000ad8(result21,result22);\n      result22 = FUN_08000cec(result29,result8);\n      result23 = FUN_08000adc(result11);\n      result22 = FUN_08000adc(result22,result23);\n      result23 = FUN_08000cec(input2,result1);\n      result22 = FUN_08000ad8(result22,result23);\n      result23 = FUN_08000cec(result28,result10);\n      result24 = FUN_08000ad8(0x3f000000,result15);\n      result16 = FUN_08000ad8(result24,result16);\n      result16 = FUN_08000cec(result16,result26);\n      result24 = FUN_08000ad8(result14,result12);\n      result24 = FUN_08000cec(result24,result10);\n      result16 = FUN_08000adc(result16,result24);\n      result16 = FUN_08000ad8(result16,result17);\n      result17 = FUN_08000cec(result30,result10);\n      result24 = FUN_08000cec(result30,result28);\n      result25 = FUN_08000cec(result27,result29);\n      result24 = FUN_08000ad8(result24,result25);\n      result24 = FUN_08000cec(result24,result26);\n      result25 = FUN_08000cec(result28,result29);\n      result11 = FUN_08000adc(result25,result11);\n      result11 = FUN_08000cec(result11,result10);\n      result11 = FUN_08000adc(result24,result11);\n      result11 = FUN_08000ad8(result11,result18);\n      result18 = FUN_08000cec(result28,result26);\n      result24 = FUN_08000ad8(0x3f000000,result13);\n      result24 = FUN_08000ad8(result24,result15);\n      result24 = FUN_08000cec(result24,result10);\n      result12 = FUN_08000adc(result12,result14);\n      result12 = FUN_08000cec(result12,result26);\n      result12 = FUN_08000adc(result24,result12);\n      result2 = FUN_08000ad8(result12,result2);\n      result12 = FUN_08000cec(result8 + -0x80000000,result21);\n      result14 = FUN_08000cec(result7,result22);\n      result12 = FUN_08000adc(result12,result14);\n      result14 = FUN_08000cec(result23,result16);\n      result12 = FUN_08000ad8(result12,result14);\n      result14 = FUN_08000cec(result29,result26 + -0x80000000);\n      result14 = FUN_08000adc(result14,result17);\n      result14 = FUN_08000cec(result14,result11);\n      result12 = FUN_08000adc(result12,result14);\n      result14 = FUN_08000cec(result18,result2);\n      result12 = FUN_08000adc(result12,result14);\n      result13 = FUN_08000adc(result13);\n      result13 = FUN_08000ad8(0x3f800000,result13);\n      result14 = FUN_08000adc(result15);\n      result13 = FUN_08000ad8(result13,result14);\n      result1 = FUN_08000cec(input3,result1);\n      result1 = FUN_08000ad8(result13,result1);\n      result13 = FUN_08000cec(result29,result10);\n      result10 = FUN_08000cec(result27,result10);\n      result14 = FUN_08000cec(result9,result21);\n      result15 = FUN_08000cec(result3,result22);\n      result14 = FUN_08000adc(result14,result15);\n      result15 = FUN_08000cec(result30,0x40800000);\n      result15 = FUN_08000cec(result15,result1);\n      result14 = FUN_08000ad8(result14,result15);\n      result15 = FUN_08000cec(result16,result13);\n      result14 = FUN_08000adc(result14,result15);\n      result15 = FUN_08000adc(result18,result10);\n      result15 = FUN_08000cec(result15,result11);\n      result14 = FUN_08000adc(result14,result15);\n      result15 = FUN_08000cec(result29,result26);\n      result18 = FUN_08000cec(result30,result20);\n      result15 = FUN_08000ad8(result15,result18);\n      result15 = FUN_08000cec(result15,result2);\n      result14 = FUN_08000adc(result14,result15);\n      result19 = FUN_08000adc(result26,result26);\n      result15 = FUN_08000cec(result30,result26);\n      result18 = FUN_08000cec(result3 + -0x80000000,result21);\n      result9 = FUN_08000cec(result9,result22);\n      result9 = FUN_08000adc(result18,result9);\n      result18 = FUN_08000cec(result28,0x40800000);\n      result1 = FUN_08000cec(result18,result1);\n      result1 = FUN_08000ad8(result9,result1);\n      result9 = FUN_08000cec(result28,result19 + -0x80000000);\n      result9 = FUN_08000ad8(result9,result10);\n      result9 = FUN_08000cec(result9,result16);\n      result1 = FUN_08000adc(result1,result9);\n      result9 = FUN_08000adc(result13,result15);\n      result9 = FUN_08000cec(result9,result11);\n      result1 = FUN_08000adc(result1,result9);\n      result9 = FUN_08000cec(result27,result26);\n      result10 = FUN_08000cec(result28,result20);\n      result9 = FUN_08000ad8(result9,result10);\n      result9 = FUN_08000cec(result9,result2);\n      result9 = FUN_08000adc(result1,result9);\n      result1 = FUN_08000cec(result7,result21);\n      result7 = FUN_08000cec(result8,result22);\n      result1 = FUN_08000adc(result1,result7);\n      result7 = FUN_08000cec(result29,result19 + -0x80000000);\n      result7 = FUN_08000adc(result7,result17);\n      result7 = FUN_08000cec(result7,result16);\n      result1 = FUN_08000adc(result1,result7);\n      result7 = FUN_08000cec(result27,result26 + -0x80000000);\n      result7 = FUN_08000adc(result7,result23);\n      result7 = FUN_08000cec(result7,result11);\n      result1 = FUN_08000adc(result1,result7);\n      result2 = FUN_08000cec(result2,result15);\n      result7 = FUN_08000adc(result1,result2);\n      result1 = FUN_08000cec(result12);\n      result2 = FUN_08000cec(result14);\n      result1 = FUN_08000adc(result1,result2);\n      result2 = FUN_08000cec(result9,result9);\n      result1 = FUN_08000adc(result1,result2);\n      result2 = FUN_08000cec(result7,result7);\n      FUN_08000adc(result1,result2);\n      FUN_08000428();\n      FUN_08005bc8();\n      result1 = FUN_08000a30();\n      result10 = FUN_08000e54(0x3f800000,result1);\n      result1 = DAT_2000035c;\n      result2 = FUN_08000cec(result30 + -0x80000000,result4);\n      result11 = FUN_08000cec(result28,result5);\n      result2 = FUN_08000ad8(result2,result11);\n      result11 = FUN_08000cec(result29,result6);\n      result2 = FUN_08000ad8(result2,result11);\n      result11 = FUN_08000cec(result2,0x3f000000);\n      result12 = FUN_08000cec(result12,result10);\n      result2 = DAT_20000360;\n      result12 = FUN_08000cec(result12,result1);\n      result11 = FUN_08000ad8(result11,result12);\n      result2 = FUN_08000cec(result11,result2);\n      result11 = FUN_08000adc(result2,result27);\n      result12 = FUN_08000cec(result27,result4);\n      result13 = FUN_08000cec(result28,result6);\n      result2 = DAT_20000360;\n      result12 = FUN_08000adc(result12,result13);\n      result13 = FUN_08000cec(result29,result5);\n      result12 = FUN_08000ad8(result12,result13);\n      result12 = FUN_08000cec(result12,0x3f000000);\n      result13 = FUN_08000cec(result14,result10);\n      result13 = FUN_08000cec(result13,result1);\n      result12 = FUN_08000ad8(result12,result13);\n      result2 = FUN_08000cec(result12,result2);\n      result12 = FUN_08000adc(result2,result30);\n      result2 = DAT_20000360;\n      result13 = FUN_08000cec(result27,result5);\n      result14 = FUN_08000cec(result30,result6);\n      result13 = FUN_08000ad8(result13,result14);\n      result14 = FUN_08000cec(result29,result4);\n      result13 = FUN_08000adc(result13,result14);\n      result13 = FUN_08000cec(result13,0x3f000000);\n      result9 = FUN_08000cec(result9,result10);\n      result9 = FUN_08000cec(result9,result1);\n      result9 = FUN_08000ad8(result13,result9);\n      result2 = FUN_08000cec(result9,result2);\n      result2 = FUN_08000adc(result2,result28);\n      result27 = FUN_08000cec(result27,result6);\n      result5 = FUN_08000cec(result30,result5);\n      result27 = FUN_08000adc(result27,result5);\n      result28 = FUN_08000cec(result28,result4);\n      result27 = FUN_08000ad8(result27,result28);\n      result28 = FUN_08000cec(result27,0x3f000000);\n      result27 = FUN_08000cec(result7,result10);\n      result1 = FUN_08000cec(result27,result1);\n      result27 = DAT_20000360;\n      result28 = FUN_08000ad8(result28,result1);\n      result27 = FUN_08000cec(result28,result27);\n      result27 = FUN_08000adc(result27,result29);\n      result28 = FUN_08000cec(result11,result11);\n      result29 = FUN_08000cec(result12,result12);\n      result28 = FUN_08000adc(result28,result29);\n      result29 = FUN_08000cec(result2,result2);\n      result28 = FUN_08000adc(result28,result29);\n      result29 = FUN_08000cec(result27,result27);\n      FUN_08000adc(result28,result29);\n      FUN_08000428();\n      FUN_08005bc8();\n      result28 = FUN_08000a30();\n      result28 = FUN_08000e54(0x3f800000,result28);\n      result29 = FUN_08000cec(result11,result28);\n      DAT_2000003c = result29;\n      result30 = FUN_08000cec(result12,result28);\n      DAT_20000040 = result30;\n      result1 = FUN_08000cec(result2,result28);\n      DAT_20000044 = result1;\n      DAT_20000048 = FUN_08000cec(result27,result28);\n      result27 = FUN_08000cec(result30,DAT_20000048);\n      result28 = FUN_08000cec(result29,result1);\n      result27 = FUN_08000ad8(result27,result28);\n      FUN_08000adc(result27,result27);\n      FUN_08000428();\n      result31 = FUN_08005854();\n      result31 = FUN_080004d0((int)result31,(int)((ulonglong)result31 >> 0x20),0,0x40668000);\n      FUN_08000724((int)result31,(int)((ulonglong)result31 >> 0x20),0x54442d18,0x400921fb);\n      result27 = FUN_08000a30();\n      *result_array = result27;\n      result30 = DAT_20000040;\n      result27 = DAT_2000003c;\n      result28 = FUN_08000cec(DAT_2000003c,DAT_2000003c);\n      result29 = FUN_08000cec(result30,result30);\n      result29 = FUN_08000ad8(result28,result29);\n      result28 = DAT_20000044;\n      result1 = FUN_08000cec(DAT_20000044,DAT_20000044);\n      result1 = FUN_08000ad8(result29,result1);\n      result29 = DAT_20000048;\n      result2 = FUN_08000cec(DAT_20000048,DAT_20000048);\n      FUN_08000adc(result1,result2);\n      result31 = FUN_08000428();\n      result27 = FUN_08000cec(result27,result30);\n      result28 = FUN_08000cec(result28,result29);\n      result27 = FUN_08000adc(result27,result28);\n      FUN_08000adc(result27,result27);\n      result32 = FUN_08000428();\n      result31 = thunk_FUN_08006070((int)result32,(int)((ulonglong)result32 >> 0x20),(int)result31,\n                                  (int)((ulonglong)result31 >> 0x20));\n      result31 = FUN_080004d0((int)result31,(int)((ulonglong)result31 >> 0x20),0,0x40668000);\n      FUN_08000724((int)result31,(int)((ulonglong)result31 >> 0x20),0x54442d18,0x400921fb);\n      result27 = FUN_08000a30();\n      result_array[1] = result27;\n      result30 = DAT_20000040;\n      result27 = DAT_2000003c;\n      result28 = FUN_08000cec(DAT_2000003c,DAT_2000003c);\n      result29 = FUN_08000cec(result30,result30);\n      result29 = FUN_08000adc(result28,result29);\n      result28 = DAT_20000044;\n      result1 = FUN_08000cec(DAT_20000044,DAT_20000044);\n      result1 = FUN_08000ad8(result29,result1);\n      result29 = DAT_20000048;\n      result2 = FUN_08000cec(DAT_20000048,DAT_20000048);\n      FUN_08000ad8(result1,result2);\n      result31 = FUN_08000428();\n      result28 = FUN_08000cec(result30,result28);\n      result27 = FUN_08000cec(result27,result29);\n      result27 = FUN_08000adc(result28,result27);\n      FUN_08000adc(result27,result27);\n      result32 = FUN_08000428();\n      result31 = thunk_FUN_08006070((int)result32,(int)((ulonglong)result32 >> 0x20),(int)result31,\n                                  (int)((ulonglong)result31 >> 0x20));\n      result31 = FUN_080004d0((int)result31,(int)((ulonglong)result31 >> 0x20),0,0x40668000);\n      FUN_08000724((int)result31,(int)((ulonglong)result31 >> 0x20),0x54442d18,0x400921fb);\n      result27 = FUN_08000a30();\n      result_array[2] = result27;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "param_5": "input5",
                "param_6": "input6",
                "param_7": "input7",
                "param_8": "input8",
                "param_9": "input9",
                "param_10": "result_array",
                "uVar1": "result1",
                "uVar2": "result2",
                "iVar3": "result3",
                "uVar4": "result4",
                "uVar5": "result5",
                "uVar6": "result6",
                "uVar7": "result7",
                "iVar8": "result8",
                "uVar9": "result9",
                "uVar10": "result10",
                "uVar11": "result11",
                "uVar12": "result12",
                "uVar13": "result13",
                "uVar14": "result14",
                "uVar15": "result15",
                "uVar16": "result16",
                "uVar17": "result17",
                "uVar18": "result18",
                "iVar19": "result19",
                "uVar20": "result20",
                "uVar21": "result21",
                "uVar22": "result22",
                "uVar23": "result23",
                "uVar24": "result24",
                "uVar25": "result25",
                "iVar26": "result26",
                "uVar27": "result27",
                "uVar28": "result28",
                "uVar29": "result29",
                "iVar30": "result30",
                "uVar31": "result31",
                "uVar32": "result32",
                "FUN_08003330": "process_data_08003330"
            },
            "calling": [
                "FUN_08002f28"
            ],
            "called": [
                "FUN_08000ad8",
                "FUN_080004d0",
                "FUN_08001014",
                "FUN_08000e54",
                "thunk_FUN_08006070",
                "FUN_08000a30",
                "FUN_08005854",
                "FUN_08005bc8",
                "FUN_08000cec",
                "FUN_08000428",
                "FUN_08000724",
                "FUN_08000adc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "param_1": {
                    "2": "param_1",
                    "1": "param",
                    "3": "arg1",
                    "5": "param1",
                    "4": "input_param_1",
                    "9": "input1"
                },
                "param_2": {
                    "5": "param2",
                    "2": "param_2",
                    "9": "input2",
                    "1": "param",
                    "4": "input_param_2",
                    "3": "arg2"
                },
                "param_3": {
                    "1": "param",
                    "2": "param_3",
                    "5": "param3",
                    "4": "input_param_3",
                    "3": "arg3",
                    "9": "input3"
                },
                "param_4": {
                    "5": "param4",
                    "1": "param",
                    "2": "data4",
                    "3": "arg4",
                    "4": "input_param_4",
                    "8": "input4"
                },
                "param_5": {
                    "3": "arg5",
                    "1": "param",
                    "8": "input5",
                    "2": "data5",
                    "4": "input_param_5",
                    "5": "param5"
                },
                "param_6": {
                    "1": "input_6",
                    "5": "param6",
                    "3": "arg6",
                    "2": "param_6",
                    "8": "input6",
                    "4": "input_param_6"
                },
                "param_7": {
                    "3": "arg7",
                    "1": "param",
                    "8": "input7",
                    "4": "input_param_7",
                    "2": "data7",
                    "5": "param7"
                },
                "param_8": {
                    "2": "param_8",
                    "4": "input_param_8",
                    "3": "arg8",
                    "1": "param",
                    "8": "input8",
                    "5": "param8"
                },
                "param_9": {
                    "1": "param",
                    "3": "arg9",
                    "2": "data9",
                    "5": "param9",
                    "4": "input_param_9",
                    "8": "input9"
                },
                "param_10": {
                    "6": "output_params",
                    "1": "output_data",
                    "2": "result",
                    "7": "result_array"
                },
                "uVar1": {
                    "3": "var1",
                    "6": "temp1",
                    "1": "temporary1",
                    "9": "result1",
                    "5": "result_1",
                    "2": "temp_var1"
                },
                "uVar2": {
                    "1": "temporary2",
                    "2": "temp_var2",
                    "9": "result2",
                    "6": "temp2",
                    "5": "result_2",
                    "3": "var2"
                },
                "iVar3": {
                    "3": "var3",
                    "2": "result",
                    "1": "variable1",
                    "5": "result3",
                    "4": "result_3"
                },
                "uVar4": {
                    "1": "temp1",
                    "3": "temp4",
                    "4": "result_4",
                    "2": "temp_var4",
                    "5": "result4"
                },
                "uVar5": {
                    "1": "temp2",
                    "3": "temp4",
                    "2": "temp_var5",
                    "5": "result5",
                    "4": "result_5"
                },
                "uVar6": {
                    "3": "temp6",
                    "5": "result6",
                    "1": "result4",
                    "2": "temp_var6",
                    "4": "result_6"
                },
                "uVar7": {
                    "3": "var7",
                    "5": "result7",
                    "1": "temp_result_11",
                    "4": "result_7",
                    "2": "temp_var7"
                },
                "iVar8": {
                    "1": "variable2",
                    "5": "result8",
                    "3": "temp8",
                    "4": "result_8",
                    "2": "temp_var8"
                },
                "uVar9": {
                    "5": "result9",
                    "1": "temporary7",
                    "3": "temp9",
                    "2": "temp_var9",
                    "4": "result_9"
                },
                "uVar10": {
                    "1": "temp16",
                    "3": "temp10",
                    "4": "result_10",
                    "5": "result10",
                    "2": "temp_var10"
                },
                "uVar11": {
                    "4": "result_11",
                    "1": "temp17",
                    "3": "temp10",
                    "5": "result11",
                    "2": "temp_var11"
                },
                "uVar12": {
                    "1": "temporary10",
                    "3": "var12",
                    "5": "result12",
                    "4": "result_12",
                    "2": "temp_var12"
                },
                "uVar13": {
                    "4": "result_13",
                    "3": "temp13",
                    "1": "temp9",
                    "5": "result13",
                    "2": "temp_var13"
                },
                "uVar14": {
                    "1": "temp10",
                    "5": "result14",
                    "3": "temp13",
                    "2": "temp_var14",
                    "4": "result_14"
                },
                "uVar15": {
                    "1": "result13",
                    "3": "temp14",
                    "2": "temp_var15",
                    "4": "result_15",
                    "5": "result15"
                },
                "uVar16": {
                    "2": "temp_var16",
                    "1": "temp22",
                    "5": "result16",
                    "3": "var16",
                    "4": "result_16"
                },
                "uVar17": {
                    "1": "temp13",
                    "5": "result17",
                    "4": "result_17",
                    "3": "var17",
                    "2": "temp_var17"
                },
                "uVar18": {
                    "1": "temporary16",
                    "3": "temp17",
                    "2": "temp_var18",
                    "5": "result18",
                    "4": "result_18"
                },
                "iVar19": {
                    "1": "temp2",
                    "2": "temp_var19",
                    "3": "var19",
                    "5": "result19",
                    "4": "result_19"
                },
                "uVar20": {
                    "1": "tmp14",
                    "4": "result_20",
                    "3": "var20",
                    "5": "result20",
                    "2": "temp_var20"
                },
                "uVar21": {
                    "4": "result_21",
                    "1": "tmp15",
                    "3": "var21",
                    "2": "temp_var21",
                    "5": "result21"
                },
                "uVar22": {
                    "4": "result_22",
                    "1": "temporary20",
                    "2": "temp_var22",
                    "3": "temp21",
                    "5": "result22"
                },
                "uVar23": {
                    "1": "temporary21",
                    "3": "temp22",
                    "5": "result23",
                    "2": "temp_var23",
                    "4": "result_23"
                },
                "uVar24": {
                    "3": "temp24",
                    "5": "result24",
                    "1": "result21",
                    "2": "temp_var24",
                    "4": "result_24"
                },
                "uVar25": {
                    "3": "var25",
                    "5": "result25",
                    "1": "result22",
                    "2": "temp_var25",
                    "4": "result_25"
                },
                "iVar26": {
                    "3": "temp26",
                    "4": "result_26",
                    "1": "variable3",
                    "2": "temp_var26",
                    "5": "result26"
                },
                "uVar27": {
                    "5": "result27",
                    "3": "temp26",
                    "4": "result_27",
                    "2": "temp_var27",
                    "1": "tmp20"
                },
                "uVar28": {
                    "3": "var28",
                    "4": "result_28",
                    "2": "temp_var28",
                    "1": "constant2",
                    "5": "result28"
                },
                "uVar29": {
                    "3": "var29",
                    "1": "constant4",
                    "4": "result_29",
                    "5": "result29",
                    "2": "temp_var29"
                },
                "iVar30": {
                    "1": "temp10",
                    "4": "result_30",
                    "3": "temp29",
                    "5": "result30",
                    "2": "temp_var30"
                },
                "uVar31": {
                    "1": "temp_result_6",
                    "2": "temp_var31",
                    "3": "var31",
                    "4": "result31"
                },
                "uVar32": {
                    "1": "thunk_result2",
                    "4": "result32",
                    "2": "temp_var32",
                    "3": "var32"
                },
                "FUN_08003330": {
                    "1": "process_function",
                    "3": "process_data"
                },
                "uVar26": {
                    "1": "temp31"
                },
                "uVar30": {
                    "1": "temp30"
                },
                "uVar19": {
                    "1": "temp19"
                }
            }
        },
        "FUN_08003eb0": {
            "entrypoint": "0x08003eb0",
            "current_name": "shift_left_and_concatenate_08003eb0",
            "code": "\nlonglong shift_left_and_concatenate_08003eb0(uint input_value)\n\n{\n  if (DAT_20000280 == 0) {\n    trigger_interrupt(0x3f);\n    result combine_values(input_value,1);\n  }\n  result (unsigned_long_long)input_value << 0x20;\n}\n\n",
            "renaming": {
                "FUN_08003eb0": "shift_left_and_concatenate_08003eb0",
                "param_1": "input_value",
                "software_interrupt": "trigger_interrupt",
                "CONCAT44": "combine_values",
                "ulonglong": "unsigned_long_long",
                "return": "result"
            },
            "calling": [
                "FUN_080041ae"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08003eb0": {
                    "2": "shift_left_by32",
                    "1": "shift_left64_bit"
                },
                "param_1": {
                    "9": "input",
                    "2": "value",
                    "20": "input_value"
                },
                "DAT_20000280": {
                    "1": "condition_flag"
                },
                "software_interrupt": {
                    "5": "trigger_interrupt",
                    "1": "call_software_interrupt",
                    "2": "trigger_software_interrupt"
                },
                "CONCAT44": {
                    "1": "concatenate64",
                    "3": "concatenate",
                    "6": "combine_values",
                    "2": "concatenate_values"
                },
                "ulonglong": {
                    "3": "unsigned_long_long",
                    "1": "shifted_value"
                },
                "<original_function_name>": {
                    "1": "convert_to64_bit"
                },
                "return": {
                    "1": "result"
                }
            }
        },
        "FUN_08003ec8": {
            "entrypoint": "0x08003ec8",
            "current_name": "increment_and_store_08003ec8",
            "code": "\nundefined4 increment_and_store_08003ec8(int base_address,undefined value)\n\n{\n  *(short *)(base_address + 0x804) = *(short *)(base_address + 0x804) + 1;\n  *(undefined *)(base_address + (unsigned_int)*(word *)(base_address + 0x802)) = value;\n  *(word *)(base_address + 0x802) = *(short *)(base_address + 0x802) + 1U & 0x7ff;\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08003ec8": "increment_and_store_08003ec8",
                "param_1": "base_address",
                "param_2": "value",
                "ushort": "word",
                "uint": "unsigned_int"
            },
            "calling": [
                "FUN_08004c30"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08003ec8": {
                    "1": "update_data",
                    "8": "increment_and_store_value",
                    "3": "update_and_store",
                    "13": "increment_and_store"
                },
                "param_1": {
                    "2": "data",
                    "1": "base_addr",
                    "16": "base_address",
                    "3": "data_pointer"
                },
                "param_2": {
                    "6": "data",
                    "16": "value",
                    "7": "new_value",
                    "2": "value_to_store"
                },
                "*(short *)(param_1 + 0x804)": {
                    "2": "value",
                    "3": "current_value",
                    "12": "counter"
                },
                "*(ushort *)(param_1 + 0x802)": {
                    "1": "offset",
                    "2": "ushort_value",
                    "13": "index"
                },
                "*(undefined *)(param_1 + (uint)*(ushort *)(param_1 + 0x802))": {
                    "2": "data",
                    "1": "byte_value",
                    "5": "memory_location"
                },
                "*(short *)(param_1 + 0x802)": {
                    "1": "short_value2"
                },
                "(param_1 + 0x804)": {
                    "1": "address1"
                },
                "(param_1 + 0x802)": {
                    "1": "address2"
                },
                "ushort* PTR_dat_08040000_0802": {
                    "1": "index_pointer"
                },
                "short* PTR_dat_08040000_0804": {
                    "1": "count_pointer"
                },
                "(uint)*(ushort *)(param_1 + 0x802)": {
                    "1": "index_value"
                },
                "ushort": {
                    "1": "word"
                },
                "uint": {
                    "1": "unsigned_int"
                },
                "short": {
                    "1": "signed_short"
                },
                "undefined": {
                    "1": "undefined"
                },
                "PTR_": {
                    "1": "unchanged"
                },
                "DAT_": {
                    "1": "unchanged"
                },
                "param_3": {
                    "1": "length"
                },
                "param_4": {
                    "1": "mask"
                },
                "ushort_value_1": {
                    "1": "current_value"
                },
                "ushort_value_2": {
                    "1": "index"
                },
                "undefined_value_1": {
                    "1": "byte_value"
                },
                "<original_variable_name>": {
                    "1": "<new_variable_name>"
                }
            }
        },
        "FUN_08003f3c": {
            "entrypoint": "0x08003f3c",
            "current_name": "initialize_flags_08003f3c",
            "code": "\nvoid initialize_flags_08003f3c(int flag1,int flag2,int flag3)\n\n{\n  FUN_08001424(0x40011000,0x8000,flag1 == 0);\n  FUN_08001424(0x40011000,0x4000,flag2 == 0);\n  FUN_08001424(0x40011000,0x2000,flag3 == 0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003f3c": "initialize_flags_08003f3c",
                "param_1": "flag1",
                "param_2": "flag2",
                "param_3": "flag3"
            },
            "calling": [
                "FUN_08004a84",
                "FUN_08004028"
            ],
            "called": [
                "FUN_08001424"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08003f3c": {
                    "2": "check_flags",
                    "1": "initialize_function",
                    "20": "initialize_flags"
                },
                "param_1": {
                    "1": "flag_base",
                    "2": "is_param1_zero",
                    "20": "flag1"
                },
                "param_2": {
                    "2": "flag_2",
                    "1": "value2",
                    "20": "flag2"
                },
                "param_3": {
                    "1": "val3",
                    "20": "flag3",
                    "2": "is_param3_zero"
                },
                "FUN_08001424": {
                    "2": "set_flag",
                    "1": "perform_action"
                },
                "0x40011000": {
                    "1": "constant1"
                },
                "0x8000": {
                    "1": "constant2"
                },
                "0x4000": {
                    "1": "constant3"
                },
                "0x2000": {
                    "1": "constant4"
                }
            }
        },
        "FUN_08003fc4": {
            "entrypoint": "0x08003fc4",
            "current_name": "set_param_value_08003fc4",
            "code": "\nvoid set_param_value_08003fc4(undefined4 value)\n\n{\n  *(undefined4 *)(DAT_200014c8 + 0x40) = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003fc4": "set_param_value_08003fc4",
                "param_1": "value"
            },
            "calling": [
                "FUN_0800426c",
                "FUN_080041c4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08003fc4": {
                    "3": "store_parameter_value",
                    "6": "set_param",
                    "1": "store_value_in_global_variable",
                    "8": "set_param_value"
                },
                "param_1": {
                    "1": "param",
                    "6": "new_value",
                    "17": "value"
                },
                "DAT_200014c8": {
                    "1": "data_memory",
                    "4": "data",
                    "2": "data_address"
                },
                "(DAT_200014c8 + 0x40)": {
                    "1": "target_address"
                },
                "*(undefined4 *)(DAT_200014c8 + 0x40)": {
                    "1": "param_value_storage"
                },
                "new_variable_name_1": {
                    "1": "param_value"
                },
                "*(undefined4 *)(data + 0x40)": {
                    "1": "stored_value"
                },
                "[DAT_200014c8 + 0x40]": {
                    "1": "parameter_address"
                },
                "param_2": {
                    "1": "output_value"
                }
            }
        },
        "FUN_08003fd0": {
            "entrypoint": "0x08003fd0",
            "current_name": "set_param_value_08003fd0",
            "code": "\nvoid set_param_value_08003fd0(undefined4 value)\n\n{\n  *(undefined4 *)(DAT_200014c8 + 0x3c) = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003fd0": "set_param_value_08003fd0",
                "param_1": "value"
            },
            "calling": [
                "FUN_0800426c",
                "FUN_080041c4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08003fd0": {
                    "1": "update_parameter",
                    "6": "set_param",
                    "4": "store_parameter_value",
                    "16": "set_param_value"
                },
                "param_1": {
                    "19": "value",
                    "9": "new_value",
                    "1": "new_param",
                    "2": "parameter"
                },
                "DAT_200014c8": {
                    "1": "ptr_data",
                    "2": "data_memory"
                },
                "PTR_200014c8": {
                    "1": "pointer_data"
                },
                "*(undefined4 *)(DAT_200014c8 + 0x3c)": {
                    "1": "memory_address"
                },
                "<original_variable_name>": {
                    "1": "param1_value"
                },
                "ptrData + 0x3c": {
                    "1": "offset"
                },
                "*DAT_200014c8": {
                    "1": "global_variable"
                }
            }
        },
        "FUN_08003fdc": {
            "entrypoint": "0x08003fdc",
            "current_name": "set_param_value_08003fdc",
            "code": "\nvoid set_param_value_08003fdc(undefined4 value)\n\n{\n  *(undefined4 *)(DAT_200015f8 + 0x38) = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003fdc": "set_param_value_08003fdc",
                "param_1": "value"
            },
            "calling": [
                "FUN_0800426c",
                "FUN_080041c4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08003fdc": {
                    "1": "set_global_parameter",
                    "7": "set_param",
                    "3": "store_parameter_in_memory",
                    "11": "set_param_value"
                },
                "param_1": {
                    "7": "new_value",
                    "1": "new_parameter",
                    "17": "value",
                    "2": "new_pointer",
                    "3": "parameter"
                },
                "DAT_200015f8": {
                    "1": "ptr_array",
                    "2": "data_buffer"
                },
                "0x38": {
                    "1": "offset"
                },
                "<original_variable_name_1>": {
                    "1": "memory_address"
                },
                "*(undefined4 *)(DAT_200015f8 + 0x38)": {
                    "1": "global_parameter"
                },
                "newPointer": {
                    "1": "value"
                },
                "IND_200015f8": {
                    "1": "memory_location"
                },
                "<original_variable_name>": {
                    "1": "<new_variable_name>"
                },
                "data + 0x38": {
                    "1": "param_address"
                }
            }
        },
        "FUN_08003fe8": {
            "entrypoint": "0x08003fe8",
            "current_name": "set_param_value_08003fe8",
            "code": "\nvoid set_param_value_08003fe8(undefined4 value)\n\n{\n  *(undefined4 *)(DAT_20001540 + 0x3c) = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003fe8": "set_param_value_08003fe8",
                "param_1": "value"
            },
            "calling": [
                "FUN_0800426c",
                "FUN_080041c4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08003fe8": {
                    "5": "set_param_value",
                    "4": "set_param",
                    "1": "set_param_on_data",
                    "2": "set_param1"
                },
                "param_1": {
                    "1": "param",
                    "9": "new_value",
                    "16": "value"
                },
                "DAT_20001540": {
                    "1": "memory_location",
                    "3": "data_buffer",
                    "2": "memory_address"
                },
                "*(undefined4 *)(DAT_20001540 + 0x3c)": {
                    "1": "data_address"
                },
                "0x3c": {
                    "1": "offset"
                },
                "<original_variable_name_1>": {
                    "1": "<new_variable_name_1>"
                }
            }
        },
        "FUN_08003ff4": {
            "entrypoint": "0x08003ff4",
            "current_name": "initialize_data_08003ff4",
            "code": "\nvoid initialize_data_08003ff4(void)\n\n{\n  FUN_08002538(&DAT_200015f8,4);\n  FUN_08002538(&DAT_20001540,8);\n  FUN_08002538(&DAT_200014c8,8);\n  FUN_08002538(&DAT_200014c8,0xc);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003ff4": "initialize_data_08003ff4"
            },
            "calling": [
                "FUN_08004028"
            ],
            "called": [
                "FUN_08002538"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08003ff4": {
                    "24": "initialize_data",
                    "1": "initialize_memory",
                    "5": "initialize_data_structures"
                },
                "FUN_08002538": {
                    "1": "initialize_data",
                    "5": "process_data",
                    "2": "set_values",
                    "4": "set_data",
                    "3": "update_data"
                },
                "param_1": {
                    "1": "memory_address",
                    "3": "data",
                    "4": "data_array",
                    "5": "data_pointers",
                    "12": "data_pointer",
                    "2": "data_structure"
                },
                "param_2": {
                    "2": "length",
                    "1": "record_size",
                    "16": "size"
                },
                "DAT_200015f8": {
                    "3": "data1",
                    "1": "array1",
                    "2": "data_block1"
                },
                "DAT_20001540": {
                    "1": "data_pointer2",
                    "3": "data2",
                    "2": "data_block2"
                },
                "DAT_200014c8": {
                    "1": "array3",
                    "3": "data3",
                    "2": "data_block3"
                },
                "&DAT_200015f8": {
                    "1": "data_pointer1"
                },
                "&DAT_20001540": {
                    "1": "data_pointer2"
                },
                "&DAT_200014c8": {
                    "1": "data_pointer4"
                }
            }
        },
        "FUN_08004028": {
            "entrypoint": "0x08004028",
            "current_name": "perform_task_08004028",
            "code": "\nvoid perform_task_08004028(void)\n\n{\n  int iteration_count;\n  \n  FUN_0800458c();\n  FUN_08003ff4();\n  iteration_count = 3;\n  do {\n    FUN_08003f3c(1,0);\n    thunk_FUNC_08001168(100);\n    FUN_08003f3c(0,1);\n    thunk_FUNC_08001168(100);\n    FUN_08003f3c(0,0,1);\n    thunk_FUNC_08001168(100);\n    iteration_count = iteration_count + -1;\n  } while (iteration_count != 0);\n  FUN_08003f3c(1,1);\n  return;\n}\n\n",
            "renaming": {
                "iVar1": "iteration_count",
                "FUN_08004028": "perform_task_08004028"
            },
            "calling": [
                "FUN_08004194"
            ],
            "called": [
                "FUN_08003ff4",
                "thunk_FUN_08001168",
                "FUN_08003f3c",
                "FUN_0800458c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "iVar1": {
                    "3": "iteration",
                    "2": "loop_counter",
                    "1": "loop_count",
                    "4": "counter",
                    "13": "iteration_count"
                },
                "FUN_08004028": {
                    "2": "execute_reverse_sequence",
                    "1": "main_function",
                    "5": "perform_task",
                    "4": "perform_operation"
                },
                "FUN_08003ff4": {
                    "2": "initialize_task",
                    "7": "initialize",
                    "1": "initialize_resources"
                },
                "FUN_0800458c": {
                    "1": "perform_initialization",
                    "3": "setup_environment",
                    "2": "initialize_system"
                },
                "FUN_08003f3c": {
                    "1": "execute_sub_task",
                    "3": "perform_action",
                    "4": "set_flags",
                    "2": "perform_operation"
                },
                "thunk_FUNC_08001168": {
                    "5": "delay_execution",
                    "4": "delay",
                    "1": "wait_time",
                    "2": "delay_function"
                }
            }
        },
        "FUN_0800403c": {
            "entrypoint": "0x0800403c",
            "current_name": "initialize_i2_c_0800403c",
            "code": "\nvoid initialize_i2_c_0800403c(undefined4 address,undefined4 register_address,undefined flag,int param4)\n\n{\n  int result;\n  undefined buffer [8];\n  \n  buffer[0] = flag;\n  result = FUN_08001828(&DAT_20001504,address,register_address,1,buffer,1,200);\n  if (result != 0) {\n    FUN_08004490(\"../Src/i2c.c\",0x1b);\n  }\n  if (param4 != 0) {\n    thunk_FUNC_08001168(0x32);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800403c": "initialize_i2_c_0800403c",
                "param_1": "address",
                "param_2": "register_address",
                "param_3": "flag",
                "param_4": "param4",
                "local_14": "buffer",
                "iVar1": "result"
            },
            "calling": [
                "FUN_08002ad0",
                "FUN_0800411c",
                "FUN_08002cb0",
                "FUN_08003298"
            ],
            "called": [
                "FUN_08004490",
                "FUN_08001828",
                "thunk_FUN_08001168"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800403c": {
                    "3": "process_i2_c_data",
                    "1": "process_i2_c_communication",
                    "2": "perform_i2_c_operation",
                    "8": "initialize_i2_c"
                },
                "param_1": {
                    "6": "address",
                    "4": "param1",
                    "1": "input_parameter1",
                    "2": "input1"
                },
                "param_2": {
                    "4": "param2",
                    "1": "config_ptr",
                    "2": "input2"
                },
                "param_3": {
                    "8": "flag",
                    "2": "param",
                    "1": "input_param",
                    "3": "mode"
                },
                "param_4": {
                    "3": "flag",
                    "1": "should_read",
                    "2": "enable_thunk",
                    "4": "param4"
                },
                "local_14": {
                    "1": "flag_array",
                    "4": "local_buffer",
                    "2": "status",
                    "18": "buffer"
                },
                "FUN_08004490": {
                    "2": "handle_error",
                    "8": "log_error",
                    "1": "throw_file_error"
                },
                "FUN_08001828": {
                    "1": "send_i2_c_data",
                    "4": "perform_i2_c_operation"
                },
                "thunk_FUNC_08001168": {
                    "1": "perform_thunk",
                    "4": "execute_thunk",
                    "2": "perform_thunk_operation"
                },
                "iVar1": {
                    "10": "result",
                    "1": "result_code"
                }
            }
        },
        "FUN_0800407c": {
            "entrypoint": "0x0800407c",
            "current_name": "check_and_execute_function_0800407c",
            "code": "\nundefined check_and_execute_function_0800407c(undefined4 input1,undefined4 input2,undefined4 output1,undefined4 output2)\n\n{\n  int return_value;\n  undefined return_value [8];\n  \n  return_value[0] = 0;\n  return_value = FUN_08001938(&DAT_20001504,input1,input2,1,return_value,1,200);\n  if (return_value != 0) {\n    FUN_08004490(output1,output2);\n  }\n  return return_value[0];\n}\n\n",
            "renaming": {
                "FUN_0800407c": "check_and_execute_function_0800407c",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "output1",
                "param_4": "output2",
                "local_14": "return_value",
                "iVar1": "return_value"
            },
            "calling": [
                "FUN_08002ad0",
                "FUN_08002d88",
                "FUN_08002cb0",
                "FUN_080040e8"
            ],
            "called": [
                "FUN_08004490",
                "FUN_08001938"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800407c": {
                    "15": "check_and_execute_function",
                    "1": "check_result_and_execute",
                    "3": "check_and_execute",
                    "4": "check_and_call_function"
                },
                "param_1": {
                    "1": "data_pointer1",
                    "2": "param1",
                    "4": "data_ptr",
                    "5": "input1",
                    "3": "input_param_1"
                },
                "param_2": {
                    "1": "data_pointer2",
                    "2": "value1",
                    "5": "input2",
                    "3": "input_param_2"
                },
                "param_3": {
                    "1": "output_parameter_1",
                    "2": "output_1",
                    "9": "output1",
                    "7": "output_param_1",
                    "3": "param1"
                },
                "param_4": {
                    "3": "param2",
                    "2": "output_2",
                    "1": "param_value3",
                    "9": "output2",
                    "7": "output_param_2"
                },
                "local_14": {
                    "1": "local_result",
                    "13": "return_value",
                    "2": "result_array",
                    "11": "result"
                },
                "iVar1": {
                    "1": "return_value"
                }
            }
        },
        "FUN_080040b8": {
            "entrypoint": "0x080040b8",
            "current_name": "process_data_080040b8",
            "code": "\nvoid process_data_080040b8(undefined4 data_ptr,undefined4 input2,undefined4 input3,undefined4 input4,\n                 undefined4 param5,undefined4 param6)\n\n{\n  int result;\n  \n  result = FUN_08001938(&DAT_20001504,data_ptr,input2,1,input3,input4,200,input4);\n  if (result != 0) {\n    FUN_08004490(param5,param6);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080040b8": "process_data_080040b8",
                "param_1": "data_ptr",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "param_5": "param5",
                "param_6": "param6",
                "iVar1": "result"
            },
            "calling": [
                "FUN_08003034"
            ],
            "called": [
                "FUN_08004490",
                "FUN_08001938"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080040b8": {
                    "1": "check_if_data_is_valid",
                    "4": "check_and_execute_function",
                    "8": "process_data",
                    "3": "check_data_validity",
                    "7": "check_and_call_function"
                },
                "param_1": {
                    "4": "data1",
                    "1": "data_ptr1",
                    "2": "input_data",
                    "7": "data_ptr",
                    "5": "input1"
                },
                "param_2": {
                    "2": "length",
                    "5": "input2",
                    "4": "param1",
                    "1": "input_value1"
                },
                "param_3": {
                    "4": "value2",
                    "2": "input_param3",
                    "1": "data_param3",
                    "5": "input3"
                },
                "param_4": {
                    "4": "value3",
                    "1": "arg2",
                    "2": "input_param4",
                    "5": "input4"
                },
                "param_5": {
                    "3": "param1",
                    "1": "output_data_ptr",
                    "4": "output1",
                    "2": "param_a",
                    "6": "param5"
                },
                "param_6": {
                    "3": "param5",
                    "1": "output_value2",
                    "2": "param_b",
                    "6": "param6",
                    "4": "output2"
                },
                "iVar1": {
                    "4": "return_value",
                    "1": "result_code",
                    "2": "function_result",
                    "18": "result"
                },
                "FUN_08004490": {
                    "2": "process_result",
                    "1": "execute_action"
                },
                "FUN_08001938": {
                    "1": "get_data_status",
                    "2": "process_data"
                }
            }
        },
        "FUN_080040e8": {
            "entrypoint": "0x080040e8",
            "current_name": "copy_data_080040e8",
            "code": "\nvoid copy_data_080040e8(undefined4 param1,int offset,int buffer_size,int length)\n\n{\n  undefined data;\n  int index;\n  undefined *dest_ptr;\n  int line_number;\n  \n  dest_ptr = (undefined *)(buffer_size + -1);\n  line_number = length;\n  for (index = 0; index < length; index = index + 1) {\n    data = FUN_0800407c(param1,offset + index & 0xffff,\"../Src/i2c.c\",0x4c,line_number);\n    dest_ptr = dest_ptr + 1;\n    *dest_ptr = data;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080040e8": "copy_data_080040e8",
                "param_1": "param1",
                "param_2": "offset",
                "param_3": "buffer_size",
                "param_4": "length",
                "uVar1": "data",
                "iVar2": "index",
                "puVar3": "dest_ptr",
                "iVar4": "line_number"
            },
            "calling": [
                "FUN_08002b48",
                "FUN_08002d88",
                "FUN_08002cb0",
                "FUN_08003298",
                "FUN_08002bf0"
            ],
            "called": [
                "FUN_0800407c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080040e8": {
                    "2": "copy_data_to_array",
                    "5": "copy_data_to_buffer",
                    "1": "copy_i2_c_data_to_file",
                    "7": "copy_data"
                },
                "param_1": {
                    "2": "source",
                    "1": "src",
                    "3": "param1"
                },
                "param_2": {
                    "1": "src",
                    "3": "start_index",
                    "2": "source_address",
                    "6": "offset"
                },
                "param_3": {
                    "3": "data_array",
                    "1": "output_data_ptr",
                    "4": "buffer_size",
                    "2": "destination"
                },
                "param_4": {
                    "3": "data_length",
                    "1": "copy_count",
                    "2": "buffer_size",
                    "14": "length"
                },
                "uVar1": {
                    "8": "data",
                    "3": "value",
                    "1": "byte_val",
                    "2": "extracted_data",
                    "4": "copied_byte",
                    "7": "copied_value"
                },
                "iVar2": {
                    "11": "i",
                    "1": "offset",
                    "13": "index",
                    "5": "current_index"
                },
                "puVar3": {
                    "1": "current_buffer_ptr",
                    "2": "destination_pointer",
                    "4": "ptr",
                    "5": "dest_ptr"
                },
                "iVar4": {
                    "1": "index",
                    "3": "file_index",
                    "13": "line_number",
                    "2": "source_offset"
                }
            }
        },
        "FUN_0800411c": {
            "entrypoint": "0x0800411c",
            "current_name": "process_data_0800411c",
            "code": "\nvoid process_data_0800411c(void)\n\n{\n  undefined4 *ptr1;\n  longlong long_value;\n  uint value1;\n  uint value2;\n  uint value3;\n  undefined4 result1;\n  undefined4 result2;\n  int counter;\n  uint result1;\n  uint result2;\n  uint result3;\n  uint calculation_result1;\n  undefined4 *ptr1;\n  undefined4 unaffected_register4;\n  int temp1;\n  int temp2;\n  bool is_negative;\n  undefined8 result3;\n  \n  counter = thunk_FUN_0800115c();\n  if (1 < (uint)(counter - DAT_2000028c)) {\n    DAT_2000028c = thunk_FUN_0800115c();\n    FUN_08002f28();\n  }\n  counter = thunk_FUN_0800115c();\n  if (2 < (uint)(counter - DAT_20000294)) {\n    DAT_20000294 = thunk_FUN_0800115c();\n    FUN_08004a84();\n  }\n  counter = thunk_FUN_0800115c();\n  if (3 < (uint)(counter - DAT_20000290)) {\n    DAT_20000290 = thunk_FUN_0800115c();\n    FUN_08004348();\n    FUN_08004384();\n    FUN_080043f0();\n    FUN_08004410();\n    FUN_08004434();\n    FUN_080043bc();\n    FUNC_08004458();\n  }\n  if ((DAT_20000275 != '\\0') && (DAT_20000274 != '\\0')) {\n    temp2 = DAT_20000270 + (uint)DAT_20000266 * -0x100;\n    result1 = (uint)((longlong)(int)(uint)DAT_20000268 * (longlong)temp2) >> 0x17 |\n            (int)((ulonglong)((longlong)(int)(uint)DAT_20000268 * (longlong)temp2) >> 0x20) << 9;\n    result2 = (uint)((longlong)(int)(uint)DAT_20000264 * (longlong)temp2 >> 7);\n    result3 = result2 + (uint)DAT_20000260 * 0x10000;\n    value2 = (uint)((ulonglong)((longlong)(int)(uint)DAT_20000262 * (longlong)temp2) >> 8);\n    counter = result1 + 2000;\n    value3 = value2 + (uint)DAT_2000025e * 0x8000;\n    is_negative = (int)result1 < 0;\n    if (1999 < counter) {\n      result1 = 0;\n    }\n    value1 = result1;\n    if (is_negative != SBORROW4(counter,2000)) {\n      temp1 = result1 * result1 * 5;\n      result1 = temp1 >> 2;\n      value1 = temp1 >> 1;\n    }\n    calculation_result1 = result3 - value1;\n    long_value = (ulonglong)(value3 - result1) * (ulonglong)DAT_2000026c;\n    temp1 = DAT_2000026c *\n             ((((int)((longlong)(int)(uint)DAT_20000262 * (longlong)temp2 >> 0x28) +\n               (uint)CARRY4(value2,(uint)DAT_2000025e * 0x8000)) - ((int)result1 >> 0x1f)) -\n             (uint)(value3 < result1)) + (int)((ulonglong)long_value >> 0x20);\n    value2 = (uint)long_value >> 0x15 | temp1 * 0x800;\n    result1 = FUN_08000c44(value2 - calculation_result1 >> 0xf |\n                         (((temp1 >> 0x15) -\n                          ((((int)((longlong)(int)(uint)DAT_20000264 * (longlong)temp2 >> 0x27) +\n                            (uint)CARRY4(result2,(uint)DAT_20000260 * 0x10000)) -\n                           ((int)value1 >> 0x1f)) - (uint)(result3 < value1))) - (uint)(value2 < calculation_result1)\n                         ) * 0x20000);\n    result1 = FUN_08000e54(result1,0x42c80000);\n    DAT_20000354 = result1;\n    result2 = FUN_08000c44(counter);\n    DAT_20000358 = FUN_08000e54(result2,0x42c80000);\n    FUN_08000e54(result1,0x447d5000);\n    result3 = FUN_08000428();\n    result3 = FUN_08005900((int)result3,(int)((ulonglong)result3 >> 0x20),0x60000000,0x3fc85b95);\n    result3 = FUN_08000168(0,0x3ff00000,(int)result3,(int)((ulonglong)result3 >> 0x20));\n    FUN_080004d0((int)result3,(int)((ulonglong)result3 >> 0x20),0,0x40e5a540);\n    result1 = FUN_08000a30();\n    result2 = 0;\n    ptr1 = &DAT_20000300;\n    DAT_20000350 = result1;\n    do {\n      ptr1 = ptr1 + 1;\n      *ptr1 = *ptr1;\n      result2 = FUN_08000adc(result2);\n      ptr1 = ptr1;\n    } while (ptr1 != &DAT_2000034c);\n    DAT_2000034c = result1;\n    result1 = FUN_08000adc(result2,result1);\n    DAT_200002fc = FUN_08000e54(result1,0x41a00000);\n    counter = FUN_08001078();\n    DAT_200014ab = counter * 100;\n    DAT_20000275 = '\\0';\n    DAT_20000274 = '\\0';\n    FUN_0800403c(0xee,DAT_20000038 + 0x50,1);\n    DAT_2000027c = thunk_FUN_0800115c();\n  }\n  counter = thunk_FUN_0800115c();\n  if (((10 < (uint)(counter - DAT_2000027c)) && (DAT_20000275 == '\\0')) && (DAT_20000274 == '\\0')) {\n    DAT_20000270 = FUN_08003034();\n    DAT_20000275 = '\\x01';\n    FUN_0800403c(0xee,DAT_20000038 + 0x40,1,0,unaffected_register4);\n    DAT_20000278 = thunk_FUN_0800115c();\n  }\n  counter = thunk_FUN_0800115c();\n  if (((10 < (uint)(counter - DAT_20000278)) && (DAT_20000275 != '\\0')) && (DAT_20000274 == '\\0')) {\n    DAT_2000026c = FUN_08003034();\n    DAT_20000274 = '\\x01';\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800411c": "process_data_0800411c",
                "iVar8": "counter",
                "uVar17": "result3",
                "puVar13": "ptr1",
                "puVar1": "ptr1",
                "uVar9": "result1",
                "uVar10": "result2",
                "uVar11": "result3",
                "uVar4": "value2",
                "iVar14": "temp1",
                "uVar12": "calculation_result1",
                "lVar2": "long_value",
                "uVar6": "result1",
                "uVar7": "result2",
                "iVar15": "temp2",
                "uVar3": "value1",
                "uVar5": "value3",
                "bVar16": "is_negative",
                "uVar13": "ptr2",
                "unaff_r4": "unaffected_register4",
                "uVar1": "result_12"
            },
            "calling": [
                "FUN_080041ae"
            ],
            "called": [
                "thunk_FUN_0800115c",
                "FUN_080004d0",
                "FUN_08000e54",
                "FUN_08003034",
                "FUN_08000a30",
                "FUN_08000c44",
                "FUN_08004410",
                "FUN_08005900",
                "FUN_08004348",
                "FUN_08000168",
                "FUN_08000428",
                "FUN_08002f28",
                "FUN_08004458",
                "FUN_080043bc",
                "FUN_08004384",
                "FUN_0800403c",
                "FUN_08004a84",
                "FUN_080043f0",
                "FUN_08004434",
                "FUN_08001078",
                "FUN_08000adc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800411c": {
                    "1": "calculate_result",
                    "5": "process_data",
                    "3": "initialize_system",
                    "2": "calculate_values_and_store_results"
                },
                "thunk_FUN_0800115c": {
                    "1": "get_settings_value",
                    "2": "get_value",
                    "3": "get_thunk_value"
                },
                "DAT_2000028c": {
                    "2": "previous_value1",
                    "1": "data_1",
                    "3": "threshold1"
                },
                "DAT_20000294": {
                    "1": "var2",
                    "2": "data2",
                    "3": "threshold2"
                },
                "DAT_20000290": {
                    "1": "var_20000290",
                    "2": "previous_value3",
                    "3": "threshold3"
                },
                "DAT_20000275": {
                    "1": "value13",
                    "2": "condition1",
                    "7": "flag1"
                },
                "DAT_20000274": {
                    "1": "bool_var_20000274",
                    "2": "condition2",
                    "6": "flag2"
                },
                "DAT_20000270": {
                    "1": "system_param1",
                    "2": "data4",
                    "3": "value1"
                },
                "DAT_20000266": {
                    "1": "var2",
                    "3": "value2",
                    "2": "data5"
                },
                "DAT_20000268": {
                    "1": "var_20000268",
                    "3": "value3",
                    "2": "data6"
                },
                "DAT_20000260": {
                    "1": "data5",
                    "2": "value5"
                },
                "DAT_20000262": {
                    "1": "value_7",
                    "3": "value7"
                },
                "DAT_2000025e": {
                    "1": "data7",
                    "2": "value6"
                },
                "DAT_20000278": {
                    "1": "data12"
                },
                "DAT_2000027c": {
                    "1": "value23"
                },
                "DAT_2000026c": {
                    "1": "system_param7",
                    "2": "value8"
                },
                "DAT_20000038": {
                    "1": "value9",
                    "2": "constant1"
                },
                "DAT_20000300": {
                    "1": "array1",
                    "2": "data_array"
                },
                "DAT_2000034c": {
                    "1": "var_2000034c",
                    "2": "result4"
                },
                "DAT_20000350": {
                    "1": "data_value1",
                    "3": "result3"
                },
                "DAT_20000354": {
                    "1": "var_20000354",
                    "4": "result1"
                },
                "DAT_20000358": {
                    "1": "value32",
                    "4": "result2"
                },
                "DAT_200014ab": {
                    "4": "result6",
                    "1": "value24"
                },
                "FUN_0800115c": {
                    "1": "get_threshold"
                },
                "FUN_08002f28": {
                    "1": "execute_function1",
                    "2": "do_something1",
                    "3": "update_value1"
                },
                "FUN_08004a84": {
                    "1": "process_second_block",
                    "2": "do_something2",
                    "3": "update_value2"
                },
                "FUN_08004348": {
                    "1": "process_third_block",
                    "3": "update_value3"
                },
                "FUN_08004384": {
                    "1": "operation3_2",
                    "3": "update_value4"
                },
                "FUN_080043f0": {
                    "1": "calculate_value3",
                    "3": "update_value5"
                },
                "FUN_08004410": {
                    "1": "do_something6",
                    "3": "update_value6"
                },
                "FUN_08004434": {
                    "1": "do_something7",
                    "3": "update_value7"
                },
                "FUN_080043bc": {
                    "1": "calculate_value6",
                    "3": "update_value8"
                },
                "FUN_08004458": {
                    "3": "update_value9",
                    "1": "process_ninth_block"
                },
                "FUN_08000c44": {
                    "1": "calculate_result",
                    "2": "calculate_value1"
                },
                "FUN_08000e54": {
                    "1": "modify_value2",
                    "3": "calculate_value2"
                },
                "FUN_08000428": {
                    "1": "calculate_variable_k"
                },
                "FUN_08005900": {
                    "1": "get_modified_value2"
                },
                "FUN_08000168": {
                    "2": "calculate_result3",
                    "1": "calculate_variable_m"
                },
                "FUN_080004d0": {
                    "1": "calculate_variable_n",
                    "2": "calculate_value6"
                },
                "FUN_08000a30": {
                    "1": "calculate_value8"
                },
                "FUN_08000adc": {
                    "1": "calculate_i"
                },
                "FUN_08001078": {
                    "1": "calculate_value8"
                },
                "FUN_0800403c": {
                    "2": "perform_action",
                    "1": "initialize_value"
                },
                "FUN_08003034": {
                    "1": "calculate_variable_q"
                },
                "DAT_20000264": {
                    "1": "var7",
                    "2": "data7"
                },
                "DAT_200002fc": {
                    "1": "result15",
                    "3": "result5"
                },
                "iVar8": {
                    "1": "system_time",
                    "5": "counter",
                    "2": "value"
                },
                "uVar17": {
                    "1": "updated_var3",
                    "3": "result3"
                },
                "puVar13": {
                    "1": "ptr_array",
                    "2": "ptr1"
                },
                "puVar1": {
                    "1": "pointer",
                    "4": "ptr1"
                },
                "uVar9": {
                    "1": "calculation1",
                    "2": "result1"
                },
                "uVar10": {
                    "1": "calc2",
                    "2": "result2"
                },
                "uVar11": {
                    "1": "temp_value_5",
                    "2": "result3"
                },
                "uVar4": {
                    "1": "calculation4",
                    "2": "value2"
                },
                "iVar14": {
                    "1": "value9",
                    "3": "temp1"
                },
                "uVar12": {
                    "1": "unsigned_var12"
                },
                "lVar2": {
                    "1": "calculation_result2",
                    "3": "long_value"
                },
                "uVar6": {
                    "1": "result_var1",
                    "3": "result1"
                },
                "uVar7": {
                    "1": "result13",
                    "3": "result2"
                },
                "iVar15": {
                    "1": "value4",
                    "3": "temp2"
                },
                "uVar3": {
                    "1": "unsigned_var3",
                    "2": "value1"
                },
                "uVar5": {
                    "1": "value4",
                    "2": "value3"
                },
                "bVar16": {
                    "2": "is_negative",
                    "1": "bool_var16"
                },
                "initializeData": {
                    "1": "initialize_data"
                },
                "getThunkValue": {
                    "1": "get_thunk_value"
                },
                "processFirstBlock": {
                    "1": "process_first_block"
                },
                "processSecondBlock": {
                    "1": "process_second_block"
                },
                "processThirdBlock": {
                    "1": "process_third_block"
                },
                "processFourthBlock": {
                    "1": "process_fourth_block"
                },
                "processFifthBlock": {
                    "1": "process_fifth_block"
                },
                "processSixthBlock": {
                    "1": "process_sixth_block"
                },
                "processSeventhBlock": {
                    "1": "process_seventh_block"
                },
                "processEighthBlock": {
                    "1": "process_eighth_block"
                },
                "processNinthBlock": {
                    "1": "process_ninth_block"
                },
                "calculateValue": {
                    "1": "calculate_value"
                },
                "processValue": {
                    "1": "process_value"
                },
                "performOperation": {
                    "1": "perform_operation"
                },
                "calculateResult": {
                    "1": "calculate_result"
                },
                "applyTransformation": {
                    "1": "apply_transformation"
                },
                "doSomething": {
                    "1": "do_something"
                },
                "calculateSomething": {
                    "1": "calculate_something"
                },
                "accumulateValue": {
                    "1": "accumulate_value"
                },
                "initializeValue": {
                    "1": "initialize_value"
                },
                "calculateSomeValue": {
                    "1": "calculate_some_value"
                },
                "D4_VALUE": {
                    "1": "constant1"
                },
                "lVar4": {
                    "1": "calculation7"
                },
                "thunk_FUN_0800115c_1": {
                    "1": "get_updated_sensor_value"
                },
                "uVar13": {
                    "1": "ptr2"
                },
                "unaff_r4": {
                    "1": "unaffected_register4"
                },
                "VAR_200002a4": {
                    "1": "calculation1"
                },
                "VAR_200002a0": {
                    "1": "calculation2"
                },
                "VAR_2000029c": {
                    "1": "calculation3"
                },
                "VAR_20000298": {
                    "1": "calculation4"
                },
                "VAR_20000294": {
                    "1": "calculation5"
                },
                "VAR_20000290": {
                    "1": "calculation6"
                },
                "VAR_20000284": {
                    "1": "calculation7"
                },
                "VAR_20000280": {
                    "1": "calculation8"
                },
                "VAR_20000274": {
                    "1": "calculation9"
                },
                "FUN_080002f28": {
                    "1": "perform_action15"
                },
                "initialize": {
                    "1": "initialize"
                },
                "updateCounter": {
                    "1": "update_counter"
                },
                "performTask1": {
                    "1": "perform_task1"
                },
                "performTask2": {
                    "1": "perform_task2"
                },
                "performTask3": {
                    "1": "perform_task3"
                },
                "performTask4": {
                    "1": "perform_task4"
                },
                "performTask5": {
                    "1": "perform_task5"
                },
                "performTask6": {
                    "1": "perform_task6"
                },
                "performTask7": {
                    "1": "perform_task7"
                },
                "performTask8": {
                    "1": "perform_task8"
                },
                "calculateValue1": {
                    "1": "calculate_value1"
                },
                "calculateValue2": {
                    "1": "calculate_value2"
                },
                "performTask9": {
                    "1": "perform_task9"
                },
                "getCounter": {
                    "1": "get_counter"
                },
                "compute1": {
                    "1": "compute1"
                },
                "compute2": {
                    "1": "compute2"
                },
                "compute3": {
                    "1": "compute3"
                },
                "compute4": {
                    "1": "compute4"
                },
                "compute5": {
                    "1": "compute5"
                },
                "compute6": {
                    "1": "compute6"
                },
                "compute7": {
                    "1": "compute7"
                },
                "FUNC_0800115c": {
                    "1": "thunk_0800115c"
                },
                "DAT_20000168": {
                    "1": "value13"
                },
                "FUN_08000168_1": {
                    "1": "perform_calculation3_1"
                },
                "value_9": {
                    "1": "result"
                },
                "DATA_20000354": {
                    "1": "result_3"
                },
                "result_5": {
                    "1": "result_6"
                },
                "uVar1": {
                    "1": "result_12"
                },
                "value_11": {
                    "1": "result_13"
                },
                "result_16": {
                    "1": "result_14"
                },
                "value_8": {
                    "1": "temp_value_8"
                },
                "value_7": {
                    "1": "temp_value_9"
                },
                "value_12": {
                    "1": "temp_value_10"
                },
                "value_13": {
                    "1": "temp_value_11"
                }
            }
        },
        "FUN_08004194": {
            "entrypoint": "0x08004194",
            "current_name": "initialize_data_08004194",
            "code": "\nvoid initialize_data_08004194(void)\n\n{\n  FUN_08004028();\n  FUN_08004c70();\n  FUN_08002ea0();\n  FUN_08003298();\n  DAT_200000f4 = 1;\n  DAT_20000150 = 1;\n  DAT_200001ac = 0xffffffff;\n  DAT_20000098 = 1;\n  DAT_200000c8 = 0x44bb8000;\n  DAT_20000124 = 0x44b54000;\n  DAT_20000180 = 0x44fa0000;\n  DAT_2000006c = 0;\n  DAT_200000ac = 0x408ccccd;\n  DAT_200000b0 = 0x3ca3d70a;\n  DAT_200000b4 = 0x438c0000;\n  DAT_200000b8 = 0x40900000;\n  DAT_200000bc = 0x3ca3d70a;\n  DAT_200000c0 = 0x43b40000;\n  DAT_20000108 = 0x40733333;\n  DAT_2000010c = 0x3ca3d70a;\n  DAT_20000110 = 0x43820000;\n  DAT_20000114 = 0x40733333;\n  DAT_20000118 = 0x3ca3d70a;\n  DAT_2000011c = 0x43a00000;\n  DAT_20000164 = 0x40400000;\n  DAT_20000168 = 0x3c23d70a;\n  DAT_2000016c = 0x438c0000;\n  DAT_20000170 = 0;\n  DAT_20000174 = 0;\n  DAT_20000178 = 0;\n  DAT_20000050 = 0x41200000;\n  DAT_20000054 = 0;\n  DAT_20000058 = 0;\n  DAT_2000005c = 0;\n  DAT_20000060 = 0;\n  DAT_20000064 = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004194": "initialize_data_08004194"
            },
            "calling": [
                "FUN_080041ae"
            ],
            "called": [
                "FUN_08002ea0",
                "FUN_08004c70",
                "FUN_08004028",
                "FUN_08003298"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08004194": {
                    "1": "initialize_function",
                    "2": "initialize_variables",
                    "10": "initialize_settings",
                    "13": "initialize_data"
                },
                "FUN_08002ea0": {
                    "2": "initialize_parameter",
                    "7": "set_parameters",
                    "1": "configure_settings"
                },
                "FUN_08004c70": {
                    "1": "perform_initialization",
                    "2": "configure_settings",
                    "4": "initialize_data",
                    "3": "initialize_resources"
                },
                "FUN_08004028": {
                    "1": "initialize_sound",
                    "3": "perform_initialization",
                    "2": "perform_first_task"
                },
                "FUN_08003298": {
                    "1": "configure_settings",
                    "2": "initialize_input",
                    "3": "initialize_audio"
                }
            }
        },
        "FUN_080041ae": {
            "entrypoint": "0x080041ae",
            "current_name": "run_infinite_loop_080041ae",
            "code": "\nvoid run_infinite_loop_080041ae(void)\n\n{\n  FUN_08003eb0(0);\n  FUN_08004194();\n  do {\n    FUN_0800114c();\n    FUN_0800411c();\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_080041ae": "run_infinite_loop_080041ae"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_08003eb0",
                "FUN_08004194",
                "FUN_0800411c",
                "FUN_0800114c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080041ae": {
                    "1": "continuous_loop",
                    "2": "run_continuous_loop",
                    "13": "run_infinite_loop"
                },
                "FUN_08003eb0": {
                    "5": "calculate_value",
                    "1": "initialize_parameter",
                    "9": "initialize",
                    "2": "initialize_value",
                    "4": "perform_initialization"
                },
                "FUN_08004194": {
                    "1": "execute_task_1",
                    "2": "perform_task",
                    "4": "initialize",
                    "8": "perform_initialization"
                },
                "FUN_0800411c": {
                    "5": "execute_task",
                    "1": "execute_task2",
                    "7": "perform_action",
                    "2": "perform_operation",
                    "3": "perform_task"
                },
                "FUN_0800114c": {
                    "1": "perform_first_task",
                    "6": "perform_operation",
                    "2": "execute_task"
                },
                "param_1": {
                    "1": "parameter1",
                    "8": "input_value",
                    "3": "value"
                }
            }
        },
        "FUN_080041c4": {
            "entrypoint": "0x080041c4",
            "current_name": "initialize_080041c4",
            "code": "\nvoid initialize_080041c4(undefined4 arg1,undefined4 arg2,undefined4 arg3,undefined4 arg4)\n\n{\n  undefined4 return_value;\n  \n  FUN_08003fc4(0);\n  FUN_08003fd0(0);\n  FUN_08003fdc(0);\n  FUN_08003fe8(0,return_value,arg3,arg4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080041c4": "initialize_080041c4",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arg3",
                "param_4": "arg4",
                "extraout_r1": "return_value"
            },
            "calling": [
                "FUN_08004a84"
            ],
            "called": [
                "FUN_08003fe8",
                "FUN_08003fc4",
                "FUN_08003fdc",
                "FUN_08003fd0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080041c4": {
                    "10": "initialize",
                    "6": "initialize_application",
                    "8": "initialize_system",
                    "2": "initialize_program",
                    "1": "initialize_function",
                    "4": "initialize_components"
                },
                "param_1": {
                    "1": "unused_1",
                    "6": "unused_param_1",
                    "11": "arg1",
                    "3": "param1"
                },
                "param_2": {
                    "6": "unused_param2",
                    "3": "param2",
                    "1": "unused2",
                    "11": "arg2"
                },
                "param_3": {
                    "4": "unused_param3",
                    "1": "init_param3",
                    "3": "param3",
                    "5": "unused_param_3",
                    "11": "arg3"
                },
                "param_4": {
                    "1": "unused_4",
                    "3": "param4",
                    "4": "unused_param4",
                    "5": "unused_param_4",
                    "11": "arg4"
                },
                "extraout_r1": {
                    "2": "unused_variable_1",
                    "1": "extra_output1"
                },
                "FUN_08003fe8": {
                    "1": "initialize_components",
                    "2": "initialize_module"
                },
                "FUN_08003fc4": {
                    "1": "initialize_feature1",
                    "4": "initialize_module1",
                    "2": "initialize_a"
                },
                "FUN_08003fdc": {
                    "1": "initialize_feature2",
                    "4": "initialize_module2"
                },
                "FUN_08003fd0": {
                    "1": "do_something3",
                    "4": "initialize_module3"
                },
                "undefined4 param_1": {
                    "1": "arg1"
                },
                "undefined4 param_2": {
                    "1": "arg2"
                },
                "undefined4 param_3": {
                    "1": "arg3"
                },
                "undefined4 param_4": {
                    "1": "arg4"
                }
            }
        },
        "FUN_0800426c": {
            "entrypoint": "0x0800426c",
            "current_name": "calculate_values_0800426c",
            "code": "\n\n\nvoid calculate_values_0800426c(undefined4 input1,undefined4 input2,undefined4 input3,undefined4 input4)\n\n{\n  undefined4 result1;\n  undefined4 result2;\n  undefined4 result3;\n  uint result4;\n  uint result5;\n  uint result6;\n  uint result7;\n  \n  result1 = FUN_08000ad8();\n  result2 = FUN_08000adc(input1,input2);\n  result3 = FUN_08000ad8(result1,input3);\n  result3 = FUN_08000adc(result3,input4);\n  FUN_08000ad8(result3,0x447a0000);\n  result4 = FUN_08001078();\n  result3 = FUN_08000ad8(result2,input3);\n  result3 = FUN_08000ad8(result3,input4);\n  FUN_08000ad8(result3,0x447a0000);\n  result5 = FUN_08001078();\n  result1 = FUN_08000adc(result1,input3);\n  result1 = FUN_08000ad8(result1,input4);\n  FUN_08000ad8(result1,0x447a0000);\n  result6 = FUN_08001078();\n  result1 = FUN_08000adc(input3,result2);\n  result1 = FUN_08000adc(result1,input4);\n  FUN_08000ad8(result1,0x447a0000);\n  result7 = FUN_08001078();\n  if (999 < (int)result7) {\n    result7 = 1000;\n  }\n  if (999 < (int)result6) {\n    result6 = 1000;\n  }\n  if (999 < (int)result5) {\n    result5 = 1000;\n  }\n  if (999 < (int)result4) {\n    result4 = 1000;\n  }\n  DAT_200002a0 = result5 & ~((int)result5 >> 0x1f);\n  DAT_200002a4 = result4 & ~((int)result4 >> 0x1f);\n  DAT_2000029c = result6 & ~((int)result6 >> 0x1f);\n  DAT_20000298 = result7 & ~((int)result7 >> 0x1f);\n  FUN_08003fc4();\n  FUN_08003fd0(DAT_2000029c);\n  FUN_08003fdc(DAT_200002a0);\n  FUN_08003fe8(DAT_200002a4);\n  _DAT_200013dd = (short)DAT_20000298 + 1000;\n  DAT_200013df = (short)DAT_2000029c + 1000;\n  _DAT_200013e1 = (short)DAT_200002a0 + 1000;\n  DAT_200013e3 = (short)DAT_200002a4 + 1000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800426c": "calculate_values_0800426c",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "result1",
                "uVar2": "result2",
                "uVar3": "result3",
                "uVar4": "result4",
                "uVar5": "result5",
                "uVar6": "result6",
                "uVar7": "result7"
            },
            "calling": [
                "FUN_08004a84"
            ],
            "called": [
                "FUN_08000ad8",
                "FUN_08003fe8",
                "FUN_08003fc4",
                "FUN_08003fdc",
                "FUN_08001078",
                "FUN_08000adc",
                "FUN_08003fd0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800426c": {
                    "1": "optimize_and_calculate_values",
                    "4": "calculate_values",
                    "2": "calculate_and_store_values",
                    "3": "initialize_data"
                },
                "param_1": {
                    "5": "input_1",
                    "2": "val1",
                    "1": "input_param",
                    "3": "param1",
                    "14": "input1"
                },
                "param_2": {
                    "3": "arg2",
                    "14": "input2",
                    "1": "address_param",
                    "2": "val2",
                    "5": "input_2"
                },
                "param_3": {
                    "4": "input_3",
                    "1": "calculation1",
                    "3": "arg3",
                    "2": "param_3",
                    "13": "input3"
                },
                "param_4": {
                    "3": "arg4",
                    "1": "input_param_4",
                    "4": "input_4",
                    "2": "val4",
                    "13": "input4"
                },
                "uVar1": {
                    "5": "result_1",
                    "1": "value_1",
                    "23": "result1",
                    "2": "value1"
                },
                "uVar2": {
                    "1": "value_2",
                    "5": "result_2",
                    "2": "value2",
                    "23": "result2"
                },
                "uVar3": {
                    "5": "result_3",
                    "2": "value3",
                    "1": "value_3",
                    "23": "result3"
                },
                "uVar4": {
                    "1": "value4",
                    "5": "result_4",
                    "22": "result4"
                },
                "uVar5": {
                    "1": "result4",
                    "21": "result5",
                    "5": "result_5"
                },
                "uVar6": {
                    "22": "result6",
                    "1": "threshold3",
                    "5": "result_6"
                },
                "uVar7": {
                    "22": "result7",
                    "5": "result_7",
                    "1": "value7"
                },
                "DAT_200002a0": {
                    "1": "output_var_1"
                },
                "DAT_200002a4": {
                    "1": "output_var_2"
                },
                "DAT_2000029c": {
                    "1": "output_var_3"
                },
                "DAT_20000298": {
                    "1": "output_var_4"
                },
                "uVar8": {
                    "1": "result8"
                }
            }
        },
        "FUN_08004300": {
            "entrypoint": "0x08004300",
            "current_name": "calculate_checksum_08004300",
            "code": "\nvoid calculate_checksum_08004300(uint key,byte *data,uint data_length)\n\n{\n  uint result;\n  byte *current_byte;\n  \n  FUN_08004c8c(&DAT_0800732e);\n  FUN_08004c18(data_length & 0xff);\n  result = data_length & 0xff ^ key;\n  FUN_08004c18(key);\n  for (current_byte = data; (int)current_byte - (int)data < (int)data_length; current_byte = current_byte + 1) {\n    FUN_08004c18(*current_byte);\n    result = result ^ *current_byte;\n  }\n  FUN_08004c18(result);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004300": "calculate_checksum_08004300",
                "param_1": "key",
                "param_2": "data",
                "param_3": "data_length",
                "uVar1": "result",
                "pbVar2": "current_byte"
            },
            "calling": [
                "FUN_08004458",
                "FUN_08004384",
                "FUN_080043bc",
                "FUN_08004410",
                "FUN_08004348",
                "FUN_080043f0",
                "FUN_08004434"
            ],
            "called": [
                "FUN_08004c18",
                "FUN_08004c8c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08004300": {
                    "1": "decrypt_and_checksum",
                    "3": "process_data",
                    "2": "extract_and_xor_bytes",
                    "7": "calculate_checksum"
                },
                "param_1": {
                    "4": "input_param",
                    "1": "checksum",
                    "10": "key"
                },
                "param_2": {
                    "1": "data_array",
                    "19": "data",
                    "2": "input_bytes",
                    "3": "input_data"
                },
                "param_3": {
                    "2": "size",
                    "1": "byte_array_size",
                    "10": "data_length",
                    "9": "length"
                },
                "uVar1": {
                    "1": "xored_param1",
                    "2": "xored_value",
                    "13": "result",
                    "12": "checksum"
                },
                "pbVar2": {
                    "1": "ptr",
                    "27": "current_byte"
                },
                "FUN_08004c8c": {
                    "1": "initialize_data"
                },
                "FUN_08004c18": {
                    "1": "calculate_checksum"
                }
            }
        },
        "FUN_08004348": {
            "entrypoint": "0x08004348",
            "current_name": "initialize_data_08004348",
            "code": "\n\n\nvoid initialize_data_08004348(undefined4 param1,uint param2,undefined4 param3)\n\n{\n  undefined4 data_address;\n  uint masked_param2;\n  undefined4 param3_copy;\n  \n  _DAT_20001423 = 0x40003e9;\n  _DAT_20001427 = 0;\n  DAT_20001429 = 0;\n  data_address = 0x40003e9;\n  masked_param2 = param2 & 0xff000000;\n  param3_copy = param3;\n  FUN_08004300(100,&data_address,7);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004348": "initialize_data_08004348",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "local_c": "masked_param2",
                "uStack_8": "param3_copy",
                "local_10": "data_address"
            },
            "calling": [
                "FUN_0800411c"
            ],
            "called": [
                "FUN_08004300"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08004348": {
                    "1": "initialize_variables",
                    "25": "initialize_data",
                    "2": "initialize_function"
                },
                "param_1": {
                    "1": "undefined_parameter1",
                    "3": "undefined_param",
                    "7": "arg1",
                    "2": "param_1",
                    "14": "param1"
                },
                "param_2": {
                    "13": "param2",
                    "1": "param_2",
                    "5": "data_size",
                    "4": "input_value",
                    "3": "arg2"
                },
                "param_3": {
                    "1": "param",
                    "14": "param3",
                    "2": "arg2",
                    "5": "arg3"
                },
                "local_c": {
                    "12": "masked_param2",
                    "2": "masked_data_size",
                    "1": "modified_input_value",
                    "3": "masked_flags"
                },
                "uStack_8": {
                    "1": "param3_backup",
                    "2": "param3",
                    "7": "param3_copy",
                    "4": "param3_value",
                    "3": "stack_value"
                },
                "local_10": {
                    "1": "data_pointer1",
                    "2": "data_value1",
                    "3": "constant_value",
                    "6": "data_address"
                },
                "FUN_08004300": {
                    "1": "copy_data"
                },
                "_DAT_20001423": {
                    "1": "data1"
                },
                "_DAT_20001427": {
                    "1": "data2"
                },
                "DAT_20001429": {
                    "1": "data3"
                }
            }
        },
        "FUN_08004384": {
            "entrypoint": "0x08004384",
            "current_name": "initialize_function_08004384",
            "code": "\n\n\nvoid initialize_function_08004384(undefined4 arg1,undefined4 arg2,undefined4 arg3,uint arg4)\n\n{\n  undefined4 temp_var1;\n  undefined4 temp_var2;\n  uint masked_param4;\n  \n  _DAT_200013bd = 0x2a0007;\n  temp_var1 = _DAT_200013b9;\n  temp_var2 = 0x2a0007;\n  _DAT_200013c1 = 0;\n  DAT_200013c3 = 0;\n  masked_param4 = arg4 & 0xff000000;\n  FUN_08004300(0x65,&temp_var1,0xb,0,arg1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004384": "initialize_function_08004384",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arg3",
                "param_4": "arg4",
                "local_14": "temp_var1",
                "uStack_10": "temp_var2",
                "local_c": "masked_param4"
            },
            "calling": [
                "FUN_0800411c"
            ],
            "called": [
                "FUN_08004300"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08004384": {
                    "1": "extract_and_process_data",
                    "12": "initialize_data",
                    "15": "initialize_function"
                },
                "param_1": {
                    "5": "input_param1",
                    "9": "arg1",
                    "1": "data_source_1",
                    "8": "param1",
                    "3": "input1"
                },
                "param_2": {
                    "8": "param2",
                    "1": "param_2",
                    "3": "input_param_2",
                    "5": "input_param2",
                    "9": "arg2"
                },
                "param_3": {
                    "5": "input_param3",
                    "1": "argument3",
                    "8": "param3",
                    "3": "input3",
                    "9": "arg3"
                },
                "param_4": {
                    "1": "argument4",
                    "8": "param4",
                    "5": "input_param4",
                    "9": "arg4",
                    "3": "input4"
                },
                "local_14": {
                    "3": "value1",
                    "1": "data_1",
                    "2": "temp_var_1",
                    "6": "temp_var1"
                },
                "uStack_10": {
                    "3": "value2",
                    "2": "var2",
                    "6": "temp_var2",
                    "1": "constant_value"
                },
                "local_c": {
                    "1": "masked_param_4",
                    "3": "local_variable3",
                    "2": "masked_input4",
                    "4": "masked_arg4",
                    "8": "masked_param4",
                    "5": "local_var3"
                },
                "_DAT_200013bd": {
                    "1": "constant1"
                },
                "_DAT_200013b9": {
                    "1": "constant2"
                },
                "_DAT_200013c1": {
                    "1": "constant3"
                },
                "DAT_200013c3": {
                    "1": "constant4"
                }
            }
        },
        "FUN_080043bc": {
            "entrypoint": "0x080043bc",
            "current_name": "copy_and_call_function_080043bc",
            "code": "\nvoid copy_and_call_function_080043bc(void)\n\n{\n  undefined4 value1;\n  undefined4 value2;\n  undefined4 *dest_ptr;\n  undefined4 *source_ptr;\n  undefined4 copied_data [2];\n  undefined2 temp_buffer [6];\n  \n  source_ptr = (undefined4 *)&DAT_2000142a;\n  dest_ptr = copied_data;\n  do {\n    value1 = *source_ptr;\n    value2 = source_ptr[1];\n    source_ptr = source_ptr + 2;\n    *dest_ptr = value1;\n    dest_ptr[1] = value2;\n    dest_ptr = dest_ptr + 2;\n  } while (source_ptr != (undefined4 *)&DAT_2000143a);\n  *(undefined2 *)dest_ptr = DAT_2000143a;\n  FUN_08004300(0x66,copied_data,0x12);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080043bc": "copy_and_call_function_080043bc",
                "puVar4": "source_ptr",
                "puVar3": "dest_ptr",
                "local_24": "copied_data",
                "local_1c": "temp_buffer",
                "uVar1": "value1",
                "uVar2": "value2"
            },
            "calling": [
                "FUN_0800411c"
            ],
            "called": [
                "FUN_08004300"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080043bc": {
                    "2": "copy_data",
                    "1": "extract_and_call_function",
                    "14": "copy_and_call_function",
                    "9": "copy_data_and_call_function"
                },
                "param_1": {
                    "2": "value1",
                    "1": "data_size"
                },
                "param_2": {
                    "2": "data",
                    "1": "byte_array"
                },
                "param_3": {
                    "1": "size",
                    "2": "param3"
                },
                "puVar4": {
                    "2": "source_ptr",
                    "1": "src"
                },
                "puVar3": {
                    "1": "copy_pointer",
                    "2": "dest_ptr"
                },
                "local_24": {
                    "1": "copied_value",
                    "18": "copied_data",
                    "2": "copy_array",
                    "3": "copied_values"
                },
                "local_1c": {
                    "1": "copied_array",
                    "2": "temporary_array",
                    "4": "temp_buffer",
                    "3": "temp_array"
                },
                "FUN_08004300": {
                    "2": "process_data",
                    "1": "perform_function"
                },
                "uVar1": {
                    "1": "temp1",
                    "3": "value1"
                },
                "uVar2": {
                    "1": "second_value",
                    "3": "value2"
                }
            }
        },
        "FUN_080043f0": {
            "entrypoint": "0x080043f0",
            "current_name": "extract_data_080043f0",
            "code": "\n\n\nvoid extract_data_080043f0(undefined4 arg1,undefined4 arg2,undefined4 arg3)\n\n{\n  undefined4 extracted_data_1;\n  undefined4 extracted_data_2;\n  undefined4 data_array [2];\n  \n  extracted_data_1 = _DAT_200013dd;\n  extracted_data_2 = _DAT_200013e1;\n  data_array[0] = arg3;\n  FUN_08004300(0x68,&extracted_data_1,8,data_array);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080043f0": "extract_data_080043f0",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arg3",
                "local_10": "extracted_data_1",
                "uStack_c": "extracted_data_2",
                "auStack_8": "data_array"
            },
            "calling": [
                "FUN_0800411c"
            ],
            "called": [
                "FUN_08004300"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080043f0": {
                    "6": "extract_and_process_data",
                    "10": "extract_data",
                    "1": "extract_data_from_binary",
                    "2": "initialize_data"
                },
                "param_1": {
                    "2": "unknown_param",
                    "1": "unused_param_1",
                    "7": "arg1",
                    "3": "input_param"
                },
                "param_2": {
                    "1": "data_end_address",
                    "2": "unknown_param",
                    "3": "input_param_2",
                    "7": "arg2"
                },
                "param_3": {
                    "2": "third_param",
                    "1": "field_3",
                    "3": "data_param",
                    "7": "arg3"
                },
                "local_10": {
                    "1": "stored_data",
                    "3": "start_address",
                    "2": "extracted_data",
                    "4": "extracted_data_1"
                },
                "uStack_c": {
                    "1": "data_value_2",
                    "5": "extracted_data_2",
                    "3": "end_address"
                },
                "auStack_8": {
                    "1": "auxiliary_data",
                    "5": "data_array",
                    "3": "data_buffer",
                    "2": "arguments"
                },
                "auStack_8 ": {
                    "1": "temporary_buffer"
                }
            }
        },
        "FUN_08004410": {
            "entrypoint": "0x08004410",
            "current_name": "send_data_08004410",
            "code": "\nvoid send_data_08004410(undefined4 arg1,undefined4 arg2,undefined4 arg3)\n\n{\n  undefined4 constant_value;\n  undefined4 combined_value;\n  undefined4 stack_variable;\n  \n  constant_value = DAT_20001395;\n  combined_value = CONCAT22((short)((uint)arg2 >> 0x10),DAT_20001399);\n  stack_variable = arg3;\n  FUN_08004300(0x6c,&constant_value,6);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004410": "send_data_08004410",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arg3",
                "local_10": "constant_value",
                "local_c": "combined_value",
                "uStack_8": "stack_variable"
            },
            "calling": [
                "FUN_0800411c"
            ],
            "called": [
                "FUN_08004300"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08004410": {
                    "1": "handle_data_processing",
                    "8": "send_data",
                    "2": "extract_and_process_data",
                    "7": "initialize_data"
                },
                "param_1": {
                    "1": "input1",
                    "5": "unused",
                    "9": "arg1",
                    "7": "unused_param",
                    "3": "server_address"
                },
                "param_2": {
                    "3": "input_param",
                    "2": "data_value",
                    "1": "data_address",
                    "4": "input_data",
                    "9": "arg2"
                },
                "param_3": {
                    "2": "size",
                    "1": "input3",
                    "3": "stack_value",
                    "9": "arg3"
                },
                "local_10": {
                    "5": "data1",
                    "2": "data_value",
                    "1": "data_ptr",
                    "8": "constant_value",
                    "3": "data_offset"
                },
                "local_c": {
                    "5": "data2",
                    "10": "combined_value",
                    "1": "encoded_data",
                    "2": "formatted_data",
                    "4": "concatenated_value"
                },
                "uStack_8": {
                    "1": "data_payload",
                    "5": "stack_variable",
                    "3": "input_value"
                }
            }
        },
        "FUN_08004434": {
            "entrypoint": "0x08004434",
            "current_name": "initialize_data_08004434",
            "code": "\nvoid initialize_data_08004434(undefined4 arg1,undefined4 arg2,undefined4 arg3)\n\n{\n  undefined4 constant_value;\n  undefined4 concatenated_value;\n  undefined4 stack_data;\n  \n  constant_value = DAT_200014ab;\n  concatenated_value = CONCAT22((short)((uint)arg2 >> 0x10),DAT_200014af);\n  stack_data = arg3;\n  FUN_08004300(0x6d,&constant_value,6);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004434": "initialize_data_08004434",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arg3",
                "local_10": "constant_value",
                "local_c": "concatenated_value",
                "uStack_8": "stack_data"
            },
            "calling": [
                "FUN_0800411c"
            ],
            "called": [
                "FUN_08004300"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08004434": {
                    "1": "extract_and_process_data",
                    "2": "extract_and_send_data",
                    "7": "initialize_data",
                    "3": "send_data_to_server"
                },
                "param_1": {
                    "2": "socket",
                    "4": "input_param1",
                    "1": "input_param_1",
                    "7": "arg1",
                    "3": "param1"
                },
                "param_2": {
                    "4": "input_param2",
                    "3": "param2",
                    "1": "input_param",
                    "2": "data_ptr",
                    "7": "arg2"
                },
                "param_3": {
                    "1": "input_data_value",
                    "3": "length",
                    "4": "input_param3",
                    "7": "arg3"
                },
                "local_10": {
                    "1": "data_value",
                    "2": "data_offset",
                    "5": "constant_value"
                },
                "local_c": {
                    "1": "data_variable2",
                    "3": "combined_data",
                    "5": "concatenated_value",
                    "2": "concatenated_data"
                },
                "uStack_8": {
                    "1": "variable1",
                    "2": "stack_param",
                    "4": "stack_data",
                    "3": "param3_copy"
                },
                "FUN_08004300": {
                    "1": "execute_sub_function"
                }
            }
        },
        "FUN_08004458": {
            "entrypoint": "0x08004458",
            "current_name": "FUNC_08004458",
            "code": "\nvoid FUNC_08004458(void)\n\n{\n  undefined4 *puVar1;\n  undefined4 *puVar2;\n  undefined4 uVar3;\n  undefined4 *puVar4;\n  undefined4 *puVar5;\n  undefined4 local_30 [3];\n  undefined2 local_24 [10];\n  \n  puVar1 = local_30;\n  puVar2 = &DAT_2000139b;\n  do {\n    puVar5 = puVar2;\n    puVar4 = puVar1;\n    uVar3 = puVar5[1];\n    *puVar4 = *puVar5;\n    puVar4[1] = uVar3;\n    puVar1 = puVar4 + 2;\n    puVar2 = puVar5 + 2;\n  } while (puVar5 + 2 != (undefined4 *)0x200013b3);\n  puVar4[2] = uRam200013b3;\n  *(undefined2 *)(puVar4 + 3) = *(undefined2 *)(puVar5 + 3);\n  FUN_08004300(0x70,local_30,0x1e);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004458": "FUNC_08004458"
            },
            "calling": [
                "FUN_0800411c"
            ],
            "called": [
                "FUN_08004300"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004490": {
            "entrypoint": "0x08004490",
            "current_name": "handle_error_08004490",
            "code": "\nvoid handle_error_08004490(undefined4 error_message,undefined4 line_number)\n\n{\n  FUN_08001424(0x40011000,0x4000,1);\n  FUN_08001424(0x40011000,0x8000,0);\n  FUN_08001424(0x40011000,0x2000,0);\n  do {\n    FUN_0800142e(0x40011000,0x4000);\n    FUN_0800142e(0x40011000,0x8000);\n    FUN_0800142e(0x40011000,0x2000);\n    FUN_08004c8c(\"Error with \");\n    FUN_08004c8c(error_message);\n    FUN_08004c8c(\" at line: \");\n    FUN_08004cac(line_number);\n    FUN_08004c18(10);\n    thunk_FUNC_08001168(500);\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08004490": "handle_error_08004490",
                "param_1": "error_message",
                "param_2": "line_number"
            },
            "calling": [
                "FUN_0800407c",
                "FUN_0800403c",
                "FUN_08004514",
                "FUN_080040b8",
                "FUN_0800458c"
            ],
            "called": [
                "FUN_08004cac",
                "FUN_08004c18",
                "FUN_0800142e",
                "thunk_FUN_08001168",
                "FUN_08001424",
                "FUN_08004c8c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08004490": {
                    "2": "error_handling_loop",
                    "1": "continuous_error_handling",
                    "12": "handle_error",
                    "3": "process_error"
                },
                "param_1": {
                    "1": "file",
                    "4": "error_description",
                    "2": "message",
                    "3": "error_string",
                    "8": "error_message",
                    "5": "error_type"
                },
                "param_2": {
                    "2": "size",
                    "24": "line_number",
                    "1": "error_line"
                },
                "FUN_08001424": {
                    "1": "write_data_to_memory",
                    "2": "set_flag",
                    "7": "initialize_memory"
                },
                "FUN_0800142e": {
                    "3": "read_data",
                    "1": "read_data_from_memory",
                    "2": "perform_operation"
                },
                "FUN_08004c8c": {
                    "17": "print_error_message",
                    "1": "print_error",
                    "6": "print_string"
                },
                "FUN_08004cac": {
                    "1": "print_line_num",
                    "3": "print_number",
                    "12": "print_line_number",
                    "2": "print_line"
                },
                "FUN_08004c18": {
                    "1": "print_character",
                    "5": "print_newline",
                    "17": "print_new_line"
                },
                "thunk_FUNC_08001168": {
                    "13": "delay_execution",
                    "2": "wait",
                    "8": "delay"
                },
                "0x40011000": {
                    "4": "memory_address",
                    "1": "base_address"
                },
                "0x4000": {
                    "1": "flag_value1",
                    "2": "size1"
                },
                "0x8000": {
                    "2": "size2",
                    "1": "status2"
                },
                "0x2000": {
                    "1": "status3",
                    "2": "size3"
                },
                "500": {
                    "1": "delay_time"
                },
                "param_3": {
                    "1": "value"
                }
            }
        },
        "FUN_08004514": {
            "entrypoint": "0x08004514",
            "current_name": "initialize_peripherals_08004514",
            "code": "\nvoid initialize_peripherals_08004514(void)\n\n{\n  int result;\n  uint time;\n  undefined4 file_index;\n  int counter;\n  undefined4 buffer_size;\n  int counter1;\n  int counter2;\n  undefined4 buffer_size;\n  int value2;\n  undefined4 parameters [4];\n  undefined4 constant1;\n  undefined4 constant2;\n  undefined4 constant3;\n  undefined4 constant4;\n  undefined4 constant5;\n  \n  constant1 = 1;\n  constant2 = 0x10;\n  counter = 2;\n  constant4 = 0;\n  parameters[0] = 2;\n  constant3 = 2;\n  constant5 = 0x380000;\n  result = FUN_08001b58(parameters);\n  if (result == 0) goto LAB_08004540;\n  file_index = 0x3c;\n  while( true ) {\n    result = FUN_08004490(\"../Src/peripherals.c\",file_index);\nLAB_08004540:\n    buffer_size = 0xf;\n    buffer_size = 0x400;\n    counter1 = counter;\n    counter2 = result;\n    value2 = result;\n    counter = FUN_0800209c(&buffer_size,counter);\n    if (counter == 0) break;\n    file_index = 0x49;\n  }\n  time = FUN_08002214();\n  FUN_08001214(time / 1000);\n  FUN_08001240(4);\n  FUN_08001194(0xffffffff,0,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004514": "initialize_peripherals_08004514",
                "local_44": "buffer_size",
                "local_40": "counter1",
                "local_3c": "counter2",
                "local_38": "buffer_size",
                "local_34": "value2",
                "local_30": "parameters",
                "local_20": "constant1",
                "local_1c": "constant2",
                "local_14": "constant3",
                "local_10": "constant4",
                "local_c": "constant5",
                "iVar4": "counter",
                "iVar1": "result",
                "uVar2": "time",
                "uVar3": "file_index"
            },
            "calling": [
                "FUN_0800458c"
            ],
            "called": [
                "FUN_08002214",
                "FUN_08001b58",
                "FUN_08004490",
                "FUN_0800209c",
                "FUN_08001194",
                "FUN_08001214",
                "FUN_08001240"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08004514": {
                    "7": "initialize_peripheral",
                    "1": "check_peripheral_status",
                    "10": "initialize_peripherals",
                    "2": "process_peripheral_data",
                    "4": "initialize_and_process_data"
                },
                "local_44": {
                    "4": "mask",
                    "1": "size",
                    "6": "buffer_size",
                    "2": "value1"
                },
                "local_40": {
                    "1": "file_index2",
                    "2": "value1",
                    "3": "counter1"
                },
                "local_3c": {
                    "1": "failed",
                    "2": "result",
                    "3": "counter2"
                },
                "local_38": {
                    "1": "task_parameter4",
                    "7": "buffer_size",
                    "2": "value1",
                    "4": "size"
                },
                "local_34": {
                    "1": "file_index",
                    "2": "value2"
                },
                "local_30": {
                    "1": "file_data_array",
                    "6": "parameters",
                    "2": "buffer"
                },
                "local_20": {
                    "2": "start_value",
                    "6": "constant1",
                    "1": "constant2",
                    "4": "value1"
                },
                "local_1c": {
                    "1": "constant3",
                    "6": "constant2",
                    "2": "initial_value2",
                    "4": "flag2"
                },
                "local_14": {
                    "1": "constant2",
                    "5": "constant3",
                    "4": "value3",
                    "2": "initial_value3"
                },
                "local_10": {
                    "1": "flag2",
                    "4": "value4",
                    "2": "initial_value4",
                    "5": "constant4"
                },
                "local_c": {
                    "1": "memory_address",
                    "2": "constant4",
                    "5": "constant5",
                    "3": "constant_value"
                },
                "FUN_08001b58": {
                    "1": "perform_initialization"
                },
                "FUN_08004490": {
                    "1": "perform_operation",
                    "4": "search_file",
                    "2": "read_file"
                },
                "FUN_0800209c": {
                    "1": "run_operation",
                    "7": "process_data"
                },
                "FUN_08002214": {
                    "3": "get_time",
                    "1": "get_data",
                    "2": "get_elapsed_time"
                },
                "FUN_08001214": {
                    "1": "convert_to_milliseconds",
                    "2": "print_value",
                    "6": "print_time"
                },
                "FUN_08001240": {
                    "1": "display_data",
                    "4": "set_mode",
                    "2": "print_message"
                },
                "FUN_08001194": {
                    "1": "update_data"
                },
                "iVar4": {
                    "3": "counter",
                    "1": "result"
                },
                "iVar1": {
                    "5": "return_value",
                    "1": "array_check_result",
                    "3": "result1",
                    "2": "status",
                    "10": "result"
                },
                "uVar2": {
                    "1": "system_time",
                    "10": "time",
                    "2": "result"
                },
                "uVar3": {
                    "1": "constant8",
                    "2": "file_identifier",
                    "5": "file_index"
                }
            }
        },
        "FUN_0800458c": {
            "entrypoint": "0x0800458c",
            "current_name": "initialize_peripherals_0800458c",
            "code": "\n\n\nvoid initialize_peripherals_0800458c(void)\n\n{\n  int result;\n  undefined4 value;\n  int initial_value;\n  int var1;\n  int var2;\n  int var3;\n  int var4;\n  int var5;\n  int var6;\n  int var7;\n  int var8;\n  int var9;\n  int var10;\n  int var11;\n  int var12;\n  int var13;\n  undefined4 var14;\n  int var15;\n  \n  FUN_08001128();\n  FUN_08004514();\n  initial_value = 2;\n  _DAT_40021018 = _DAT_40021018 | 0x1c;\n  FUN_08001424(0x40011000,0xe000,0,_DAT_40021018 & 8);\n  FUN_08001424(0x40010800,0x20,0);\n  var9 = 0xe000;\n  var10 = 1;\n  var12 = 2;\n  FUN_08001264(0x40011000,&var9);\n  var9 = 0x20;\n  var10 = 1;\n  var12 = 2;\n  FUN_08001264(0x40010800,&var9);\n  DAT_20001504 = 0x40005400;\n  DAT_20001508 = 400000;\n  DAT_20001514 = 0x4000;\n  DAT_2000150c = 0;\n  DAT_20001510 = 0;\n  DAT_20001518 = 0;\n  DAT_2000151c = 0;\n  DAT_20001520 = 0;\n  DAT_20001524 = 0;\n  result = FUN_08001754();\n  if (result == 0) goto LAB_0800463a;\n  value = 0x6b;\n  while( true ) {\n    while( true ) {\n      while( true ) {\n        while( true ) {\n          while( true ) {\n            while( true ) {\n              while( true ) {\n                while( true ) {\n                  while( true ) {\n                    while( true ) {\n                      while( true ) {\n                        while( true ) {\n                          while( true ) {\n                            while( true ) {\n                              while( true ) {\n                                while( true ) {\n                                  result = FUN_08004490(\"../Src/peripherals.c\",value);\nLAB_0800463a:\n                                  DAT_2000157c = 0x40013800;\n                                  DAT_20001580 = 0x1c200;\n                                  DAT_20001590 = 0xc;\n                                  DAT_20001584 = result;\n                                  DAT_20001588 = result;\n                                  DAT_2000158c = result;\n                                  DAT_20001594 = result;\n                                  DAT_20001598 = result;\n                                  result = FUN_08002724(&DAT_2000157c);\n                                  if (result == 0) break;\n                                  value = 0x151;\n                                }\n                                DAT_200015bc = 0x40012c00;\n                                DAT_200015c8 = 1000;\n                                DAT_200015c0 = initial_value;\n                                DAT_200015c4 = result;\n                                DAT_200015cc = result;\n                                DAT_200015d0 = result;\n                                result = FUN_080023d0(&DAT_200015bc);\n                                if (result == 0) break;\n                                value = 0x88;\n                              }\n                              var1 = result;\n                              var2 = result;\n                              result = FUN_080025a4(&DAT_200015bc,&var1);\n                              if (result == 0) break;\n                              value = 0x8f;\n                            }\n                            var3 = 0x60;\n                            var4 = result;\n                            var5 = result;\n                            var6 = result;\n                            var7 = result;\n                            var8 = result;\n                            result = FUN_0800245c(&DAT_200015bc,&var3,0xc);\n                            if (result == 0) break;\n                            value = 0x9a;\n                          }\n                          var14 = 0x2000;\n                          var9 = result;\n                          var10 = result;\n                          var11 = result;\n                          var12 = result;\n                          var13 = result;\n                          var15 = result;\n                          result = FUN_08002564(&DAT_200015bc,&var9);\n                          if (result == 0) break;\n                          value = 0xa6;\n                        }\n                        FUN_08004e14(&DAT_200015bc);\n                        DAT_200015f8 = 0x40000000;\n                        DAT_20001604 = 1000;\n                        DAT_200015fc = initial_value;\n                        DAT_20001600 = result;\n                        DAT_20001608 = result;\n                        result = FUN_080023d0(&DAT_200015f8);\n                        if (result == 0) break;\n                        value = 0xc3;\n                      }\n                      var3 = result;\n                      var4 = result;\n                      result = FUN_080025a4(&DAT_200015f8,&var3);\n                      if (result == 0) break;\n                      value = 0xca;\n                    }\n                    var9 = 0x60;\n                    var10 = result;\n                    var11 = result;\n                    var13 = result;\n                    result = FUN_0800245c(&DAT_200015f8,&var9,4);\n                    if (result == 0) break;\n                    value = 0xd3;\n                  }\n                  FUN_08004e14(&DAT_200015f8);\n                  DAT_2000154c = 1000;\n                  DAT_20001540 = 0x40000400;\n                  DAT_20001544 = initial_value;\n                  DAT_20001548 = result;\n                  DAT_20001550 = result;\n                  result = FUN_080023d0();\n                  if (result == 0) break;\n                  value = 0xf0;\n                }\n                var3 = 0;\n                var4 = 0;\n                result = FUN_080025a4(&DAT_20001540,&var3);\n                if (result == 0) break;\n                value = 0xf7;\n              }\n              var9 = 0x60;\n              var10 = result;\n              var11 = result;\n              var13 = result;\n              result = FUN_0800245c(&DAT_20001540,&var9,8);\n              if (result == 0) break;\n              value = 0x100;\n            }\n            initial_value = FUN_0800245c(&DAT_20001540,&var9,0xc);\n            if (initial_value == 0) break;\n            value = 0x105;\n          }\n          FUN_08004e14(&DAT_20001540);\n          DAT_200014c8 = 0x40000800;\n          DAT_200014cc = 2;\n          DAT_200014d4 = 1000;\n          DAT_200014d0 = initial_value;\n          DAT_200014d8 = initial_value;\n          result = FUN_080023d0(&DAT_200014c8);\n          if (result == 0) break;\n          value = 0x122;\n        }\n        var3 = result;\n        var4 = result;\n        result = FUN_080025a4(&DAT_200014c8,&var3);\n        if (result == 0) break;\n        value = 0x129;\n      }\n      var9 = 0x60;\n      var10 = result;\n      var11 = result;\n      var13 = result;\n      result = FUN_0800245c(&DAT_200014c8,&var9,8);\n      if (result == 0) break;\n      value = 0x132;\n    }\n    result = FUN_0800245c(&DAT_200014c8,&var9,0xc);\n    if (result == 0) break;\n    value = 0x137;\n  }\n  FUN_08004e14(&DAT_200014c8);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800458c": "initialize_peripherals_0800458c",
                "iVar1": "result",
                "uVar2": "value",
                "iVar3": "initial_value",
                "local_58": "var1",
                "local_54": "var2",
                "local_50": "var3",
                "local_4c": "var4",
                "local_48": "var5",
                "local_40": "var6",
                "local_3c": "var7",
                "local_38": "var8",
                "local_34": "var9",
                "local_30": "var10",
                "local_2c": "var11",
                "local_28": "var12",
                "local_24": "var13",
                "local_20": "var14",
                "local_1c": "var15"
            },
            "calling": [
                "FUN_08004028"
            ],
            "called": [
                "FUN_08002564",
                "FUN_08001264",
                "FUN_08004e14",
                "FUN_08001754",
                "FUN_08004490",
                "FUN_0800245c",
                "FUN_08004514",
                "FUN_080023d0",
                "FUN_08001128",
                "FUN_08001424",
                "FUN_080025a4",
                "FUN_08002724"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800458c": {
                    "2": "initialize_peripheral_devices",
                    "8": "initialize_peripheral",
                    "1": "initialize_device_components",
                    "15": "initialize_peripherals"
                },
                "FUN_08004514": {
                    "1": "initialize_gpio",
                    "3": "configure_peripherals"
                },
                "FUN_08001128": {
                    "4": "initialize",
                    "1": "initialize_gpio"
                },
                "FUN_08001424": {
                    "1": "write_to_register",
                    "3": "configure_memory"
                },
                "FUN_08001264": {
                    "1": "scan_peripheral",
                    "2": "configure_peripheral"
                },
                "FUN_08001754": {
                    "1": "execute_first_operation",
                    "2": "check_peripheral_status"
                },
                "FUN_08004490": {
                    "1": "reverse_string",
                    "6": "load_file"
                },
                "FUN_080023d0": {
                    "1": "check_file_error"
                },
                "FUN_080025a4": {
                    "3": "read_data",
                    "1": "read_data_from_memory2"
                },
                "FUN_0800245c": {
                    "1": "perform_operation",
                    "3": "write_data"
                },
                "FUN_08002724": {
                    "1": "perform_operation"
                },
                "FUN_08002564": {
                    "1": "get_memory_size"
                },
                "FUN_08004e14": {
                    "1": "release_resources"
                },
                "iVar1": {
                    "4": "status",
                    "12": "result",
                    "5": "return_value",
                    "1": "return_value1"
                },
                "uVar2": {
                    "1": "param",
                    "2": "constant_value",
                    "6": "value"
                },
                "iVar3": {
                    "1": "return_value2",
                    "4": "value",
                    "2": "counter",
                    "6": "initial_value"
                },
                "local_58": {
                    "1": "local_variable_58",
                    "8": "var1",
                    "5": "value1",
                    "2": "variable1"
                },
                "local_54": {
                    "1": "index",
                    "8": "var2",
                    "5": "value2",
                    "2": "variable2"
                },
                "local_50": {
                    "8": "var3",
                    "1": "var_3",
                    "4": "value3",
                    "2": "variable3"
                },
                "local_4c": {
                    "1": "local_variable4",
                    "8": "var4",
                    "2": "variable4",
                    "4": "value4"
                },
                "local_48": {
                    "2": "variable5",
                    "4": "value5",
                    "8": "var5",
                    "1": "var48"
                },
                "local_40": {
                    "1": "result",
                    "8": "var6",
                    "2": "variable6",
                    "4": "value6"
                },
                "local_3c": {
                    "1": "param7",
                    "2": "variable7",
                    "8": "var7",
                    "4": "value7"
                },
                "local_38": {
                    "1": "var38",
                    "8": "var8",
                    "4": "value8",
                    "2": "variable8"
                },
                "local_34": {
                    "2": "variable9",
                    "8": "var9",
                    "1": "local_variable_34",
                    "4": "value9"
                },
                "local_30": {
                    "8": "var10",
                    "1": "var_10",
                    "4": "value10",
                    "2": "variable10"
                },
                "local_2c": {
                    "1": "local_variable11",
                    "4": "value11",
                    "2": "variable11",
                    "8": "var11"
                },
                "local_28": {
                    "1": "local_variable_28",
                    "4": "value12",
                    "2": "variable12",
                    "8": "var12"
                },
                "local_24": {
                    "1": "var_13",
                    "2": "variable13",
                    "4": "value13",
                    "8": "var13"
                },
                "local_20": {
                    "4": "value14",
                    "2": "variable14",
                    "1": "constant",
                    "8": "var14"
                },
                "local_1c": {
                    "1": "local_variable_1c",
                    "4": "value15",
                    "8": "var15",
                    "2": "variable15"
                },
                "_DAT_40021018": {
                    "1": "global_variable1"
                },
                "DAT_20001504": {
                    "1": "peripheral_address"
                },
                "DAT_20001508": {
                    "1": "memory_size"
                },
                "DAT_20001514": {
                    "1": "buffer_size"
                },
                "DAT_2000150c": {
                    "1": "variable1"
                },
                "DAT_20001510": {
                    "1": "variable2"
                },
                "DAT_20001518": {
                    "1": "global_variable7"
                },
                "DAT_2000151c": {
                    "1": "variable4"
                },
                "DAT_20001520": {
                    "1": "global_variable9"
                },
                "DAT_20001524": {
                    "1": "variable6"
                },
                "DAT_2000157c": {
                    "1": "global_variable11"
                },
                "DAT_20001580": {
                    "1": "global_variable12"
                },
                "DAT_20001590": {
                    "1": "global_variable13"
                },
                "DAT_20001584": {
                    "1": "variable8"
                },
                "DAT_20001588": {
                    "1": "global_variable15"
                },
                "DAT_2000158c": {
                    "1": "variable10"
                },
                "DAT_20001594": {
                    "1": "global_variable17"
                },
                "DAT_20001598": {
                    "1": "variable12"
                },
                "DAT_200015bc": {
                    "1": "data_address"
                },
                "DAT_200015c8": {
                    "1": "global_variable20"
                },
                "DAT_200015c0": {
                    "1": "global_variable21"
                },
                "DAT_200015c4": {
                    "1": "global_variable22"
                },
                "DAT_200015cc": {
                    "1": "variable15"
                },
                "DAT_200015d0": {
                    "1": "global_variable24"
                },
                "DAT_200015f8": {
                    "1": "global_variable25"
                },
                "DAT_20001604": {
                    "1": "global_variable26"
                },
                "DAT_200015fc": {
                    "1": "variable17"
                },
                "DAT_20001600": {
                    "1": "variable18"
                },
                "DAT_20001608": {
                    "1": "variable19"
                },
                "DAT_2000154c": {
                    "1": "global_variable30"
                },
                "DAT_20001540": {
                    "1": "global_variable31"
                },
                "DAT_20001544": {
                    "1": "variable20"
                },
                "DAT_20001548": {
                    "1": "variable21"
                },
                "DAT_20001550": {
                    "1": "global_variable34"
                },
                "DAT_200014c8": {
                    "1": "global_variable35"
                },
                "DAT_200014cc": {
                    "1": "variable23"
                },
                "DAT_200014d4": {
                    "1": "global_variable37"
                },
                "DAT_200014d0": {
                    "1": "global_variable38"
                },
                "DAT_200014d8": {
                    "1": "variable26"
                },
                "VALUE_1": {
                    "1": "0x6b"
                },
                "VALUE_2": {
                    "1": "0x151"
                },
                "VALUE_3": {
                    "1": "0x88"
                },
                "VALUE_4": {
                    "1": "0x8f"
                },
                "VALUE_5": {
                    "1": "0x9a"
                },
                "VALUE_6": {
                    "1": "0xa6"
                },
                "VALUE_7": {
                    "1": "0xc3"
                },
                "VALUE_8": {
                    "1": "0xca"
                },
                "VALUE_9": {
                    "1": "0xd3"
                },
                "VALUE_10": {
                    "1": "0xf0"
                },
                "VALUE_11": {
                    "1": "0xf7"
                },
                "VALUE_12": {
                    "1": "0x100"
                },
                "VALUE_13": {
                    "1": "0x105"
                },
                "VALUE_14": {
                    "1": "0x122"
                },
                "VALUE_15": {
                    "1": "0x129"
                },
                "VALUE_16": {
                    "1": "0x132"
                },
                "VALUE_17": {
                    "1": "0x137"
                },
                "DAT_40011000": {
                    "1": "register_address1"
                },
                "DAT_40010800": {
                    "1": "register_address2"
                }
            }
        },
        "FUN_0800483c": {
            "entrypoint": "0x0800483c",
            "current_name": "process_data_0800483c",
            "code": "\nvoid process_data_0800483c(int *data)\n\n{\n  undefined4 result1;\n  undefined4 result2;\n  int value1;\n  int value2;\n  int value3;\n  \n  value2 = value23;\n  result1 = FUN_08000adc(value20,value21);\n  value2 = FUN_08000ad8(result1,value2);\n  data[10] = value2;\n  if (*data == 3) {\n    value2 = FUN_08001064(data[10],0);\n    if (value2 == 0) {\n      value2 = FUN_08001028(data[10],0xc3340000);\n    }\n    else {\n      value2 = FUN_08001064(data[10],0x43340000);\n    }\n    if (value2 != 0) {\n      value3 = data[10];\n      result1 = FUN_08000cec(data[10],0x43b40000);\n      value2 = FUN_08001064(data[10],0);\n      value1 = data[10];\n      if (value2 == 0) {\n        value1 = value1 + -0x80000000;\n      }\n      result1 = FUN_08000e54(result1,value1);\n      value2 = FUN_08000ad8(value3,result1);\n      data[10] = value2;\n    }\n  }\n  value3 = value7;\n  value1 = value8;\n  value2 = FUN_08000cec(value9,data[10]);\n  value13 = value2;\n  value2 = FUN_08000adc(data[10],value14);\n  value14 = value2;\n  value2 = FUN_08001028(value14,0xc3fa0000);\n  if (value2 == 0) {\n    value2 = FUN_08001064(value14,0x43fa0000);\n    if (value2 == 0) {\n      value2 = value14;\n    }\n    else {\n      value2 = 0x43fa0000;\n    }\n  }\n  else {\n    value2 = -0x3c060000;\n  }\n  value14 = value2;\n  value2 = FUN_08000ad8(value23,value12);\n  value15 = value2;\n  value2 = value13;\n  result1 = FUN_08000cec(value3,value14);\n  result1 = FUN_08000adc(result1,value2);\n  result2 = FUN_08000cec(value1,value15);\n  value2 = FUN_08000ad8(result1,result2);\n  value16 = value2;\n  result1 = FUN_08000c44(value17);\n  value2 = FUN_08001028(value16,0xc3fa0000);\n  if (value2 == 0) {\n    value2 = FUN_08001064(value16,0x43fa0000);\n    if (value2 == 0) {\n      value2 = value16;\n    }\n    else {\n      value2 = 0x43fa0000;\n    }\n  }\n  else {\n    value2 = -0x3c060000;\n  }\n  value2 = FUN_08000cec(value2,result1);\n  value16 = value2;\n  value12 = value23;\n  value22 = data[10];\n  value19 = value18;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800483c": "process_data_0800483c",
                "param_1": "data",
                "uVar1": "result1",
                "uVar2": "result2",
                "iVar3": "value1",
                "iVar4": "value2",
                "iVar5": "value3",
                "param_1[2]": "value7",
                "param_1[3]": "value8",
                "param_1[1]": "value9",
                "param_1[0xc]": "value23",
                "param_1[0xd]": "value12",
                "param_1[0xe]": "value13",
                "param_1[0xf]": "value14",
                "param_1[0x10]": "value15",
                "param_1[0x12]": "value16",
                "param_1[0x13]": "value17",
                "param_1[0x14]": "value18",
                "param_1[0x15]": "value19",
                "param_1[7]": "value20",
                "param_1[9]": "value21",
                "param_1[0xb]": "value22"
            },
            "calling": [
                "FUN_08004a84"
            ],
            "called": [
                "FUN_08000ad8",
                "FUN_08000e54",
                "FUN_08001028",
                "FUN_08000c44",
                "FUN_08001064",
                "FUN_08000cec",
                "FUN_08000adc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800483c": {
                    "14": "process_data",
                    "2": "calculate_values",
                    "1": "initialize_data"
                },
                "param_1": {
                    "13": "data",
                    "4": "array",
                    "1": "input_data",
                    "2": "parameters",
                    "6": "input_array"
                },
                "uVar1": {
                    "1": "result_var1",
                    "23": "result1",
                    "3": "result_1"
                },
                "uVar2": {
                    "1": "temp_value3",
                    "21": "result2",
                    "3": "result_2"
                },
                "iVar3": {
                    "5": "var3",
                    "1": "variable1",
                    "4": "value3",
                    "9": "value1",
                    "2": "value2"
                },
                "iVar4": {
                    "1": "temp_var1",
                    "5": "var4",
                    "2": "value1",
                    "3": "value4",
                    "9": "value2"
                },
                "iVar5": {
                    "1": "value_3",
                    "4": "value5",
                    "5": "var5",
                    "11": "value3"
                },
                "FUN_08000adc": {
                    "1": "calculate_function1"
                },
                "FUN_08000ad8": {
                    "1": "calculate_function2"
                },
                "FUN_08001064": {
                    "1": "check_equality"
                },
                "FUN_08001028": {
                    "1": "check_condition2"
                },
                "FUN_08000cec": {
                    "1": "compute_difference"
                },
                "FUN_08000e54": {
                    "1": "compute_division"
                },
                "calculateFunction2": {
                    "1": "calculate_and_assign_value"
                },
                "Fun_08000e54": {
                    "1": "calculate_function4"
                },
                "param_1[2]": {
                    "1": "value7"
                },
                "param_1[3]": {
                    "1": "value8"
                },
                "param_1[1]": {
                    "1": "value9"
                },
                "param_1[0xc]": {
                    "1": "value23"
                },
                "param_1[0xd]": {
                    "1": "value12"
                },
                "param_1[0xe]": {
                    "1": "value13"
                },
                "param_1[0xf]": {
                    "1": "value14"
                },
                "param_1[0x10]": {
                    "1": "value15"
                },
                "param_1[0x12]": {
                    "1": "value16"
                },
                "param_1[0x13]": {
                    "1": "value17"
                },
                "param_1[0x14]": {
                    "1": "value18"
                },
                "param_1[0x15]": {
                    "1": "value19"
                },
                "param_1[7]": {
                    "1": "value20"
                },
                "param_1[9]": {
                    "1": "value21"
                },
                "0x43340000": {
                    "1": "constant1"
                },
                "0x43b40000": {
                    "1": "constant2"
                },
                "0xc3340000": {
                    "1": "constant3"
                },
                "0xc3fa0000": {
                    "1": "constant4"
                },
                "0x43fa0000": {
                    "1": "constant5"
                },
                "-0x3c060000": {
                    "1": "constant6"
                },
                "param_1[0xb]": {
                    "1": "value22"
                }
            }
        },
        "FUN_08004a30": {
            "entrypoint": "0x08004a30",
            "current_name": "initialize_data_08004a30",
            "code": "\nvoid initialize_data_08004a30(void)\n\n{\n  undefined4 random_value;\n  \n  if (DAT_20000285 != '\\0') {\n    if (DAT_200002a8 == '\\0') {\n      random_value = FUN_08003068();\n      DAT_20000068 = FUN_08000cec(random_value,0x42c80000);\n      DAT_200002a8 = '\\x01';\n    }\n    else {\n      random_value = FUN_08003068();\n      DAT_2000007c = FUN_08000cec(random_value,0x42c80000);\n    }\n  }\n  if (DAT_20000285 == '\\0') {\n    if (DAT_200002a8 != '\\0') {\n      DAT_200002a8 = DAT_20000285;\n    }\n    DAT_20000094 = DAT_20000288;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004a30": "initialize_data_08004a30",
                "uVar1": "random_value"
            },
            "calling": [
                "FUN_08004a84"
            ],
            "called": [
                "FUN_08003068",
                "FUN_08000cec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08004a30": {
                    "30": "initialize_data",
                    "1": "parse_data"
                },
                "FUN_08003068": {
                    "1": "get_first_result",
                    "5": "get_random_number",
                    "3": "generate_random_number",
                    "13": "get_random_value"
                },
                "FUN_08000cec": {
                    "17": "calculate_value",
                    "2": "calculate_new_value",
                    "1": "calculate_hash",
                    "3": "convert_to_float",
                    "4": "calculate_result"
                },
                "uVar1": {
                    "9": "random_value",
                    "1": "important_value",
                    "5": "result"
                },
                "DAT_20000285": {
                    "1": "is_flag1_set",
                    "2": "flag1",
                    "3": "flag_a"
                },
                "DAT_200002a8": {
                    "1": "has_data",
                    "3": "flag_b",
                    "2": "flag2"
                },
                "DAT_20000068": {
                    "1": "result_one",
                    "2": "result_a"
                },
                "DAT_2000007c": {
                    "1": "second_data",
                    "2": "result_b"
                },
                "DAT_20000288": {
                    "1": "value_c",
                    "4": "default_value",
                    "2": "default_result"
                },
                "DAT_20000094": {
                    "4": "final_value",
                    "1": "value_d",
                    "2": "final_result",
                    "3": "final_data"
                },
                "param_1": {
                    "1": "input_value1"
                },
                "param_2": {
                    "1": "value2"
                },
                "param_3": {
                    "1": "value3"
                },
                "param_4": {
                    "1": "value4"
                }
            }
        },
        "FUN_08004a84": {
            "entrypoint": "0x08004a84",
            "current_name": "initialize_system_08004a84",
            "code": "\nvoid initialize_system_08004a84(void)\n\n{\n  int result;\n  \n  DAT_200000d8 = FUN_08002ec0();\n  DAT_20000134 = FUN_08002ed4();\n  DAT_20000190 = FUN_08002ee8();\n  FUN_08004a30();\n  result = FUN_08001064(DAT_200000d8,0);\n  if (result == 0) {\n    result = FUN_08001028(DAT_200000d8,0xc2a00000);\n  }\n  else {\n    result = FUN_08001064(DAT_200000d8,0x42a00000);\n  }\n  if (result == 0) {\n    result = FUN_08001064(DAT_20000134,0);\n    if (result == 0) {\n      result = FUN_08001028(DAT_20000134,0xc2a00000);\n    }\n    else {\n      result = FUN_08001064(DAT_20000134,0x42a00000);\n    }\n    if (result == 0) {\n      FUN_08003f3c(1,1);\n      FUN_0800483c(&DAT_200000a8);\n      FUN_0800483c(&DAT_20000104);\n      FUN_0800483c(&DAT_20000160);\n      if (DAT_20000285 != '\\0') {\n        FUN_0800483c(&DAT_2000004c);\n        FUN_08000adc(DAT_20000094,0x44bb8000);\n      }\n      DAT_20000094 = DAT_20000288;\n      if (DAT_20000284 == '\\0') {\n        FUN_080041c4();\n      }\n      else {\n        FUN_0800426c(DAT_20000288,DAT_200000f0,DAT_2000014c,DAT_200001a8);\n      }\n      FUN_08000cec(DAT_200000ac,0x437f0000);\n      DAT_2000139b._3_1_ = FUN_080010c4();\n      FUN_08000cec(DAT_200000b0,0x437f0000);\n      DAT_2000139f._0_1_ = FUN_080010c4();\n      FUN_08000cec(DAT_20000108,0x437f0000);\n      DAT_2000139b._0_1_ = FUN_080010c4();\n      FUN_08000cec(DAT_2000010c,0x437f0000);\n      DAT_2000139b._1_1_ = FUN_080010c4();\n      FUN_08000cec(DAT_20000110,0x437f0000);\n      DAT_2000139b._2_1_ = FUN_080010c4();\n      FUN_08000cec(DAT_20000164,0x437f0000);\n      DAT_2000139f._2_1_ = FUN_080010c4();\n      FUN_08000cec(DAT_20000168,0x437f0000);\n      DAT_2000139f._3_1_ = FUN_080010c4();\n      FUN_08000cec(DAT_2000016c,0x437f0000);\n      DAT_200013a3._0_1_ = FUN_080010c4();\n      FUN_08000cec(DAT_20000050,0x437f0000);\n      DAT_200013a3._1_1_ = FUN_080010c4();\n      FUN_08000cec(DAT_20000054,0x437f0000);\n      DAT_200013a3._2_1_ = FUN_080010c4();\n      FUN_08000cec(DAT_20000058,0x437f0000);\n      DAT_200013a3._3_1_ = FUN_080010c4();\n      return;\n    }\n  }\n  FUN_080041c4();\n  FUN_08003f3c(0,1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004a84": "initialize_system_08004a84",
                "iVar1": "result"
            },
            "calling": [
                "FUN_0800411c"
            ],
            "called": [
                "FUN_08001028",
                "FUN_08002ee8",
                "FUN_080041c4",
                "FUN_0800483c",
                "FUN_08000cec",
                "FUN_08002ed4",
                "FUN_08004a30",
                "FUN_0800426c",
                "FUN_08001064",
                "FUN_080010c4",
                "FUN_08003f3c",
                "FUN_08000adc",
                "FUN_08002ec0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08004a84": {
                    "1": "initialize_function",
                    "6": "initialize_application",
                    "9": "initialize_system",
                    "3": "initialize_program",
                    "4": "initialize_data",
                    "2": "initialize_components"
                },
                "FUN_08001028": {
                    "1": "check_value_in_range",
                    "2": "check_second_condition",
                    "3": "check_condition2"
                },
                "FUN_08002ee8": {
                    "1": "initialize_audio",
                    "4": "get_third_data",
                    "3": "get_initial_value3",
                    "2": "get_third_value"
                },
                "FUN_080041c4": {
                    "1": "handle_case2",
                    "4": "perform_action",
                    "6": "handle_error"
                },
                "FUN_0800483c": {
                    "21": "free_memory",
                    "2": "clear_data",
                    "1": "free_data",
                    "4": "cleanup_data"
                },
                "FUN_08000cec": {
                    "6": "calculate_value",
                    "2": "execute_operation",
                    "1": "update_data",
                    "3": "calculate_checksum"
                },
                "FUN_08002ed4": {
                    "1": "retrieve_data2",
                    "4": "get_second_data",
                    "3": "initialize_data2",
                    "2": "get_second_value"
                },
                "FUN_08004a30": {
                    "2": "perform_initialization",
                    "1": "setup_configuration"
                },
                "FUN_0800426c": {
                    "1": "reverse_action",
                    "4": "process_data",
                    "2": "process_error"
                },
                "FUN_08001064": {
                    "1": "initialize_data4",
                    "8": "check_condition",
                    "2": "check_data2",
                    "3": "check_data1"
                },
                "FUN_080010c4": {
                    "13": "calculate_value",
                    "1": "perform_operation",
                    "2": "compute_value",
                    "3": "calculate_checksum"
                },
                "FUN_08003f3c": {
                    "2": "print_results",
                    "3": "set_flags",
                    "1": "log_information"
                },
                "FUN_08000adc": {
                    "3": "do_something",
                    "1": "perform_some_action",
                    "4": "process_data",
                    "9": "perform_operation"
                },
                "FUN_08002ec0": {
                    "1": "initialize_important_data",
                    "3": "initialize_data1",
                    "2": "get_first_value",
                    "4": "get_first_data"
                },
                "DAT_200000d8": {
                    "1": "initial_value1"
                },
                "DAT_20000134": {
                    "1": "header_value2"
                },
                "DAT_20000190": {
                    "1": "header_value3"
                },
                "DAT_200000a8": {
                    "1": "memory1"
                },
                "DAT_20000104": {
                    "1": "memory2"
                },
                "DAT_20000160": {
                    "1": "data3"
                },
                "DAT_20000285": {
                    "2": "flag",
                    "1": "condition1"
                },
                "DAT_2000004c": {
                    "1": "memory4",
                    "2": "data4"
                },
                "DAT_20000094": {
                    "1": "value1"
                },
                "DAT_20000288": {
                    "1": "value2"
                },
                "DAT_20000284": {
                    "1": "condition2",
                    "2": "flag2"
                },
                "DAT_200000f0": {
                    "1": "value1"
                },
                "DAT_2000014c": {
                    "1": "value2"
                },
                "DAT_200001a8": {
                    "1": "value3"
                },
                "DAT_200000ac": {
                    "1": "data7"
                },
                "DAT_2000139b._3_1_": {
                    "1": "result1"
                },
                "DAT_200000b0": {
                    "1": "value5"
                },
                "DAT_2000139f._0_1_": {
                    "1": "result2"
                },
                "DAT_20000108": {
                    "1": "memory7"
                },
                "DAT_2000139b._0_1_": {
                    "1": "result3"
                },
                "DAT_2000010c": {
                    "1": "value8"
                },
                "DAT_2000139b._1_1_": {
                    "1": "result4"
                },
                "DAT_20000110": {
                    "1": "data11"
                },
                "DAT_2000139b._2_1_": {
                    "1": "result5"
                },
                "DAT_20000164": {
                    "1": "value10"
                },
                "DAT_2000139f._2_1_": {
                    "1": "result6"
                },
                "DAT_20000168": {
                    "1": "value11"
                },
                "DAT_2000139f._3_1_": {
                    "1": "result7"
                },
                "DAT_2000016c": {
                    "1": "memory12"
                },
                "DAT_200013a3._0_1_": {
                    "1": "result8"
                },
                "DAT_20000050": {
                    "1": "memory13"
                },
                "DAT_200013a3._1_1_": {
                    "1": "result9"
                },
                "DAT_20000054": {
                    "1": "memory14"
                },
                "DAT_200013a3._2_1_": {
                    "1": "result10"
                },
                "DAT_20000058": {
                    "1": "memory15"
                },
                "DAT_200013a3._3_1_": {
                    "1": "result11"
                },
                "iVar1": {
                    "3": "result"
                },
                "0xc2a00000": {
                    "1": "constant1"
                },
                "0x42a00000": {
                    "1": "constant2"
                },
                "DAT_2000139b": {
                    "1": "result1"
                },
                "DAT_2000139f": {
                    "1": "result2"
                },
                "getInitialValue1": {
                    "1": "value1"
                },
                "getInitialValue2": {
                    "1": "value2"
                },
                "getInitialValue3": {
                    "1": "value3"
                },
                "checkValue1": {
                    "1": "result1"
                },
                "checkValue2": {
                    "1": "result2"
                },
                "performInitialization": {
                    "1": "init"
                },
                "performOperation": {
                    "1": "operate"
                },
                "performCase3": {
                    "1": "case3"
                },
                "calculateValue": {
                    "1": "calculate_value"
                },
                "handleCase1": {
                    "1": "handle_case1"
                },
                "cleanupData": {
                    "1": "cleanup"
                },
                "init": {
                    "1": "initialize"
                },
                "setValue": {
                    "1": "set_value"
                },
                "value1": {
                    "1": "initial_value1"
                },
                "value2": {
                    "1": "initial_value2"
                },
                "value3": {
                    "1": "initial_value3"
                }
            }
        },
        "FUN_08004c18": {
            "entrypoint": "0x08004c18",
            "current_name": "process_data_08004c18",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0800289e) */\n\nundefined4 process_data_08004c18(undefined input)\n\n{\n  int *ptr;\n  int int_var2;\n  int int_var3;\n  ushort *ptr2;\n  \n  DAT_20001636._0_1_ = input;\n  ptr2 = &DAT_20001636;\n  if (((DAT_200015b5 != '\\x01') && (DAT_200015b5 != '\\\"')) || (DAT_200015b4 == '\\x01')) {\n    return 2;\n  }\n  DAT_200015b4 = 1;\n  DAT_200015b8 = 0;\n  DAT_200015a0 = 1;\n  if (DAT_200015b5 == '\\\"') {\n    DAT_200015b5 = '2';\n  }\n  else {\n    DAT_200015b5 = '\\x12';\n  }\n  DAT_200015a2 = 1;\nLAB_080027c4:\n  do {\n    if (DAT_200015a2 == 0) {\n      int_var2 = FUN_0800115c();\n      do {\n        if (*DAT_2000157c << 0x19 < 0) {\n          if (DAT_200015b5 == '2') {\n            DAT_200015b5 = 0x22;\n          }\n          else {\n            DAT_200015b5 = 1;\n          }\n          DAT_200015b4 = 0;\n          return 0;\n        }\n        int_var3 = FUN_0800115c();\n      } while ((uint)(int_var3 - int_var2) < 6);\nLAB_0800281c:\n      ptr = DAT_2000157c;\n      DAT_2000157c[3] = DAT_2000157c[3] & 0xffffff7f;\n      ptr[3] = ptr[3] & 0xffffffdf;\n      ptr[3] = ptr[3] & 0xfffffeff;\n      ptr[5] = ptr[5] & 0xfffffffe;\n      DAT_200015b5 = 1;\n      DAT_200015b4 = 0;\n      return 3;\n    }\n    DAT_200015a2 = DAT_200015a2 + -1;\n    if (DAT_20001584 == 0x1000) {\n      int_var2 = FUN_0800115c();\n      while (-1 < *DAT_2000157c << 0x18) {\n        int_var3 = FUN_0800115c();\n        if (5 < (uint)(int_var3 - int_var2)) goto LAB_0800281c;\n      }\n      DAT_2000157c[1] = *ptr2 & 0x1ff;\n      if (DAT_2000158c == 0) {\n        ptr2 = ptr2 + 1;\n        goto LAB_080027c4;\n      }\n    }\n    else {\n      int_var2 = FUN_0800115c();\n      while (-1 < *DAT_2000157c << 0x18) {\n        int_var3 = FUN_0800115c();\n        if (5 < (uint)(int_var3 - int_var2)) goto LAB_0800281c;\n      }\n      DAT_2000157c[1] = (uint)*(byte *)ptr2;\n    }\n    ptr2 = (ushort *)((int)ptr2 + 1);\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08004c18": "process_data_08004c18",
                "param_1": "input",
                "piVar1": "ptr",
                "iVar2": "int_var2",
                "iVar3": "int_var3",
                "puVar4": "ptr2"
            },
            "calling": [
                "FUN_08004490",
                "FUN_08004300",
                "FUN_08004c8c"
            ],
            "called": [
                "FUN_0800115c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08004c18": {
                    "2": "decode_data",
                    "1": "process_code",
                    "15": "process_data",
                    "3": "parse_input"
                },
                "param_1": {
                    "16": "input",
                    "1": "parameter",
                    "6": "input_data",
                    "4": "input_param"
                },
                "piVar1": {
                    "1": "pointer_variable",
                    "6": "ptr1",
                    "3": "pointer",
                    "7": "ptr",
                    "4": "pointer1"
                },
                "iVar2": {
                    "1": "current_value",
                    "2": "value1",
                    "7": "int_var2"
                },
                "iVar3": {
                    "1": "end",
                    "2": "next_index",
                    "7": "var2"
                },
                "puVar4": {
                    "5": "pointer2",
                    "1": "ptr_2",
                    "4": "pointer_var4",
                    "7": "data_ptr",
                    "8": "ptr2"
                },
                "DAT_20001636": {
                    "1": "global_data_1"
                },
                "DAT_200015b5": {
                    "1": "data_2"
                },
                "DAT_200015b4": {
                    "1": "global_data_3"
                },
                "DAT_200015b8": {
                    "1": "data_4"
                },
                "DAT_200015a0": {
                    "1": "data_5"
                },
                "DAT_200015a2": {
                    "1": "global_data_6"
                },
                "DAT_2000157c": {
                    "1": "data_7"
                },
                "DAT_20001584": {
                    "1": "global_array_2"
                },
                "DAT_2000158c": {
                    "1": "data_9"
                },
                "DIGIT": {
                    "1": "digit"
                }
            }
        },
        "FUN_08004c30": {
            "entrypoint": "0x08004c30",
            "current_name": "check_param_08004c30",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08002902) */\n\nint * check_param_08004c30(int *param)\n\n{\n  int result;\n  \n  if (*param != 0x40013800) {\n    return param;\n  }\n  FUN_08003ec8(&DAT_20000364,DAT_20001634);\n  result = DAT_2000157c;\n  if (((DAT_200015b5 == '\\x01') || (DAT_200015b5 == '\\x12')) && (DAT_200015b4 != '\\x01')) {\n    DAT_200015b8 = 0;\n    DAT_200015a8 = 1;\n    DAT_200015aa = 1;\n    DAT_200015b4 = 0;\n    if (DAT_200015b5 == '\\x12') {\n      DAT_200015b5 = 0x32;\n    }\n    else {\n      DAT_200015b5 = 0x22;\n    }\n    DAT_200015a4 = &DAT_20001634;\n    *(uint *)(DAT_2000157c + 0xc) = *(uint *)(DAT_2000157c + 0xc) | 0x100;\n    *(uint *)(result + 0x14) = *(uint *)(result + 0x14) | 1;\n    *(uint *)(result + 0xc) = *(uint *)(result + 0xc) | 0x20;\n    return (int *)0x0;\n  }\n  return (int *)0x2;\n}\n\n",
            "renaming": {
                "FUN_08004c30": "check_param_08004c30",
                "param_1": "param",
                "iVar1": "result"
            },
            "calling": [
                "FUN_0800290c"
            ],
            "called": [
                "FUN_08003ec8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08004c30": {
                    "4": "check_parameter_value",
                    "5": "check_param",
                    "1": "validate_ptr",
                    "2": "validate_input",
                    "3": "check_parameter"
                },
                "param_1": {
                    "2": "input_ptr",
                    "1": "input_param",
                    "7": "parameter",
                    "8": "param"
                },
                "iVar1": {
                    "5": "return_value",
                    "1": "data_offset",
                    "2": "var1",
                    "10": "result"
                },
                "DAT_20000364": {
                    "7": "data1",
                    "1": "data_address",
                    "2": "data_1"
                },
                "DAT_20001634": {
                    "6": "data2",
                    "2": "data_2",
                    "1": "data_variable2"
                },
                "DAT_2000157c": {
                    "4": "data3",
                    "1": "setting1",
                    "2": "variable1"
                },
                "DAT_200015b5": {
                    "1": "var2",
                    "3": "data4",
                    "2": "variable2"
                },
                "DAT_200015b4": {
                    "1": "condition_variable2",
                    "3": "data5",
                    "2": "flag2"
                },
                "DAT_200015b8": {
                    "1": "flag_var4",
                    "2": "variable4",
                    "3": "data6"
                },
                "DAT_200015a8": {
                    "2": "flag4",
                    "3": "data7",
                    "1": "flag2"
                },
                "DAT_200015aa": {
                    "2": "variable6",
                    "3": "flag_5",
                    "1": "flag_var6"
                },
                "DAT_200015a4": {
                    "1": "flag_var7",
                    "2": "variable7",
                    "3": "data9"
                },
                "DAT_20001534": {
                    "1": "data2"
                },
                "F_UNREACHABLE_BLOCK": {
                    "1": "unreachable_block"
                },
                "FUN_08003ec8": {
                    "2": "process_data",
                    "1": "update_data",
                    "6": "initialize_data"
                },
                "PTR_DAT_20001634": {
                    "1": "pointer1"
                },
                "*(uint *)(DAT_2000157c + 0xc)": {
                    "1": "value1"
                },
                "*(uint *)(iVar1 + 0x14)": {
                    "1": "value2"
                },
                "*(uint *)(iVar1 + 0xc)": {
                    "1": "value3"
                },
                "param_2": {
                    "2": "parameter2",
                    "1": "action"
                },
                "*param_1": {
                    "1": "ptr"
                },
                "FUNC_08003ec8": {
                    "1": "process_data"
                }
            }
        },
        "FUN_08004c64": {
            "entrypoint": "0x08004c64",
            "current_name": "initialize_data_08004c64",
            "code": "\nvoid initialize_data_08004c64(void)\n\n{\n  int index;\n  \n  index = 0;\n  DAT_20000b64 = 0;\n  DAT_20000b66 = 0;\n  DAT_20000b68 = 0;\n  do {\n    (&DAT_20000364)[index] = 0;\n    index = index + 1;\n  } while (index != 0x800);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004c64": "initialize_data_08004c64",
                "iVar1": "index"
            },
            "calling": [
                "FUN_08004c70"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08004c64": {
                    "28": "initialize_data",
                    "1": "initialize_memory"
                },
                "iVar1": {
                    "1": "count",
                    "8": "counter",
                    "22": "index"
                },
                "DAT_20000b64": {
                    "4": "data1",
                    "1": "data_1",
                    "2": "value1"
                },
                "DAT_20000b66": {
                    "4": "data2",
                    "1": "variable2",
                    "2": "value2"
                },
                "DAT_20000b68": {
                    "4": "data3",
                    "1": "variable3",
                    "2": "value3"
                },
                "DAT_20000364": {
                    "3": "data_array"
                },
                "0x800": {
                    "1": "array_size"
                },
                "0": {
                    "1": "initial_value"
                },
                "&DAT_20000364": {
                    "1": "data_array"
                }
            }
        },
        "FUN_08004c70": {
            "entrypoint": "0x08004c70",
            "current_name": "initialize_data_08004c70",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08002902) */\n\nundefined4 initialize_data_08004c70(void)\n\n{\n  int data_pointer;\n  \n  FUN_08004c64();\n  data_pointer = DAT_2000157c;\n  if (((DAT_200015b5 == '\\x01') || (DAT_200015b5 == '\\x12')) && (DAT_200015b4 != '\\x01')) {\n    DAT_200015b8 = 0;\n    DAT_200015a8 = 1;\n    DAT_200015aa = 1;\n    DAT_200015b4 = 0;\n    if (DAT_200015b5 == '\\x12') {\n      DAT_200015b5 = 0x32;\n    }\n    else {\n      DAT_200015b5 = 0x22;\n    }\n    DAT_200015a4 = &DAT_20001634;\n    *(uint *)(DAT_2000157c + 0xc) = *(uint *)(DAT_2000157c + 0xc) | 0x100;\n    *(uint *)(data_pointer + 0x14) = *(uint *)(data_pointer + 0x14) | 1;\n    *(uint *)(data_pointer + 0xc) = *(uint *)(data_pointer + 0xc) | 0x20;\n    return 0;\n  }\n  return 2;\n}\n\n",
            "renaming": {
                "FUN_08004c70": "initialize_data_08004c70",
                "iVar1": "data_pointer"
            },
            "calling": [
                "FUN_08004194"
            ],
            "called": [
                "FUN_08004c64"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08004c70": {
                    "1": "reset_settings",
                    "3": "initialize_settings",
                    "5": "initialize_system",
                    "2": "initialize_configuration",
                    "10": "initialize_data"
                },
                "iVar1": {
                    "1": "configuration_index",
                    "2": "temp_var",
                    "12": "data_pointer",
                    "5": "data_offset"
                },
                "FUN_08004c64": {
                    "1": "update_values",
                    "2": "perform_preprocessing",
                    "3": "perform_initialization"
                },
                "DAT_2000157c": {
                    "2": "data1",
                    "3": "data_variable1",
                    "1": "variable1"
                },
                "DAT_200015b5": {
                    "1": "connection_type",
                    "3": "flag1"
                },
                "DAT_200015b4": {
                    "1": "check_variable2",
                    "3": "flag2"
                },
                "DAT_200015b8": {
                    "1": "condition3",
                    "3": "flag1",
                    "2": "variable1"
                },
                "DAT_200015a8": {
                    "1": "temp_variable2",
                    "2": "variable2",
                    "3": "flag2"
                },
                "DAT_200015aa": {
                    "1": "flag2",
                    "2": "variable3",
                    "3": "flag3"
                },
                "DAT_200015a4": {
                    "1": "condition6",
                    "2": "pointer"
                },
                "DAT_20001634": {
                    "1": "variable8"
                },
                "initializeState": {
                    "1": "initialize_state"
                },
                "reset": {
                    "1": "reset"
                },
                "FUNG_08004c70": {
                    "1": "initialize_system"
                }
            }
        },
        "FUN_08004c8c": {
            "entrypoint": "0x08004c8c",
            "current_name": "process_data_08004c8c",
            "code": "\nvoid process_data_08004c8c(undefined *data)\n\n{\n  uint result;\n  undefined *current_element;\n  \n  current_element = data;\n  while( true ) {\n    result = FUN_08000150(data);\n    if (result <= (uint)((int)current_element - (int)data)) break;\n    FUN_08004c18(*current_element);\n    current_element = current_element + 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004c8c": "process_data_08004c8c",
                "param_1": "data",
                "uVar1": "result",
                "puVar2": "current_element"
            },
            "calling": [
                "FUN_08004cac",
                "FUN_08004490",
                "FUN_08004300"
            ],
            "called": [
                "FUN_08000150",
                "FUN_08004c18"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08004c8c": {
                    "3": "iterate_and_process",
                    "1": "iteratively_process_data",
                    "18": "process_data"
                },
                "FUN_08000150": {
                    "1": "get_next_value"
                },
                "FUN_08004c18": {
                    "1": "process_value",
                    "2": "process_element"
                },
                "param_1": {
                    "13": "data",
                    "3": "data_array",
                    "2": "input_array",
                    "1": "elements",
                    "4": "input_data"
                },
                "uVar1": {
                    "1": "size_difference",
                    "25": "result"
                },
                "puVar2": {
                    "1": "ptr",
                    "12": "current_element",
                    "9": "current_ptr",
                    "3": "current_data"
                }
            }
        },
        "FUN_08004cac": {
            "entrypoint": "0x08004cac",
            "current_name": "initialize_data_08004cac",
            "code": "\nvoid initialize_data_08004cac(undefined4 data)\n\n{\n  FUN_08004ffc(&DAT_20001636,&DAT_0800735e,data);\n  FUN_08004c8c(&DAT_20001636);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004cac": "initialize_data_08004cac",
                "param_1": "data"
            },
            "calling": [
                "FUN_08004490"
            ],
            "called": [
                "FUN_08004ffc",
                "FUN_08004c8c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08004cac": {
                    "1": "execute_process",
                    "2": "execute_function",
                    "11": "initialize_data"
                },
                "param_1": {
                    "2": "param",
                    "11": "data",
                    "1": "cleanup_param",
                    "5": "input_data"
                },
                "FUN_08004ffc": {
                    "1": "update_data_with_value",
                    "11": "process_data",
                    "7": "copy_data",
                    "2": "initialize_data"
                },
                "param_2": {
                    "3": "source_data",
                    "2": "param2",
                    "1": "encryption_key",
                    "4": "source"
                },
                "param_3": {
                    "1": "offset",
                    "3": "param_3",
                    "2": "param2"
                },
                "param_4": {
                    "4": "param_4",
                    "1": "helper_param3",
                    "2": "offset",
                    "3": "length"
                },
                "FUN_08004c8c": {
                    "1": "cleanup",
                    "5": "clean_up_data",
                    "17": "cleanup_data"
                },
                "F_08004cac": {
                    "1": "reverse_and_finalize"
                }
            }
        },
        "FUN_08004ccc": {
            "entrypoint": "0x08004ccc",
            "current_name": "initialize_flags_08004ccc",
            "code": "\n\n\nvoid initialize_flags_08004ccc(undefined4 arg1,undefined4 arg2,undefined4 arg3)\n\n{\n  _DAT_40021018 = _DAT_40021018 | 1;\n  FUN_08001170(3,arg2,_DAT_40021018,1,arg1,1,arg3);\n  FUN_08001194(0xfffffff4,0);\n  FUN_08001194(0xfffffff5,0);\n  FUN_08001194(0xfffffff6,0);\n  FUN_08001194(0xfffffffb,0);\n  FUN_08001194(0xfffffffc,0);\n  FUN_08001194(0xfffffffe,0);\n  FUN_08001194(0xffffffff,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004ccc": "initialize_flags_08004ccc",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arg3"
            },
            "calling": [
                "FUN_08001128"
            ],
            "called": [
                "FUN_08001170",
                "FUN_08001194"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08004ccc": {
                    "1": "set_flags_and_call_functions",
                    "5": "set_flag_and_call_functions",
                    "7": "initialize_flags",
                    "6": "initialize_data"
                },
                "param_1": {
                    "1": "unknown_param",
                    "5": "flag1",
                    "8": "arg1",
                    "2": "value1",
                    "6": "param1"
                },
                "param_2": {
                    "1": "param_2",
                    "6": "param2",
                    "2": "value2",
                    "8": "arg2",
                    "4": "flag2"
                },
                "param_3": {
                    "1": "flag2",
                    "6": "param3",
                    "4": "flag3",
                    "2": "value3",
                    "8": "arg3"
                },
                "_DAT_40021018": {
                    "1": "flagged_function_mask"
                },
                "FUN_08001170": {
                    "2": "call_function1",
                    "1": "perform_operation",
                    "4": "set_flag",
                    "3": "set_flags"
                },
                "FUN_08001194": {
                    "1": "apply_setting",
                    "2": "perform_operation"
                },
                "0xfffffff4": {
                    "1": "param_1_value_1",
                    "2": "flag1"
                },
                "0xfffffff5": {
                    "1": "param_1_value_2",
                    "2": "flag2"
                },
                "0xfffffff6": {
                    "1": "constant_3",
                    "2": "flag3"
                },
                "0xfffffffb": {
                    "2": "flag4",
                    "1": "constant_4"
                },
                "0xfffffffc": {
                    "1": "constant_5",
                    "2": "flag5"
                },
                "0xfffffffe": {
                    "1": "constant_6",
                    "2": "flag6"
                },
                "0xffffffff": {
                    "1": "param_1_value_7",
                    "2": "flag7"
                }
            }
        },
        "FUN_08004d48": {
            "entrypoint": "0x08004d48",
            "current_name": "check_and_update_data_08004d48",
            "code": "\n\n\nvoid check_and_update_data_08004d48(int *data_pointer,undefined4 param_value)\n\n{\n  undefined4 value1;\n  undefined4 value2;\n  \n  if (*data_pointer == 0x40005400) {\n    value1 = 0xc0;\n    value2 = 0x12;\n    FUN_08001264(0x40010c00,&value1,0x40005400,3,data_pointer,param_value);\n    _DAT_4002101c = _DAT_4002101c | 0x200000;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004d48": "check_and_update_data_08004d48",
                "param_1": "data_pointer",
                "param_2": "param_value",
                "local_18": "value1",
                "local_14": "value2"
            },
            "calling": [
                "FUN_08001754"
            ],
            "called": [
                "FUN_08001264"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08004d48": {
                    "1": "check_and_update_flags",
                    "2": "check_and_update_memory",
                    "4": "check_and_set_flag"
                },
                "param_1": {
                    "1": "input_param",
                    "2": "input_array",
                    "7": "data_pointer",
                    "4": "input_data"
                },
                "param_2": {
                    "3": "flag",
                    "7": "param_value",
                    "6": "param2",
                    "1": "length",
                    "5": "param"
                },
                "local_18": {
                    "1": "local_var1",
                    "2": "buffer_size",
                    "9": "constant1",
                    "12": "value1"
                },
                "local_14": {
                    "1": "var2",
                    "12": "value2",
                    "9": "constant2"
                },
                "FUN_08001264": {
                    "1": "copy_data"
                },
                "*param_1": {
                    "1": "input_ptr"
                },
                "_DAT_4002101c": {
                    "1": "flag"
                }
            }
        },
        "FUN_08004d8c": {
            "entrypoint": "0x08004d8c",
            "current_name": "update_data_flags_08004d8c",
            "code": "\n\n/* WARNING: Restarted to delay deadcode elimination for space: ram */\n\nvoid update_data_flags_08004d8c(int *value)\n\n{\n  int value;\n  \n  value = *value;\n  if (value == 0x40012c00) {\n    _DAT_40021018 = _DAT_40021018 | 0x800;\n  }\n  else if (value == 0x40000000) {\n    _DAT_4002101c = _DAT_4002101c | 1;\n  }\n  else if (value == 0x40000400) {\n    _DAT_4002101c = _DAT_4002101c | 2;\n  }\n  else if (value == 0x40000800) {\n    _DAT_4002101c = _DAT_4002101c | 4;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004d8c": "update_data_flags_08004d8c",
                "param_1": "value",
                "iVar1": "value"
            },
            "calling": [
                "FUN_080023d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08004d8c": {
                    "1": "update_register_values",
                    "2": "update_settings",
                    "4": "update_status",
                    "5": "update_data_flags",
                    "3": "update_flags"
                },
                "param_1": {
                    "1": "status_register",
                    "2": "memory_address",
                    "3": "data_ptr",
                    "4": "value"
                },
                "iVar1": {
                    "1": "status_value",
                    "3": "flag_value",
                    "16": "value",
                    "2": "data_value"
                },
                "_DAT_40021018": {
                    "1": "status_flag1"
                },
                "_DAT_4002101c": {
                    "1": "status_flag2"
                },
                "0x40012c00": {
                    "1": "memory_constant_a"
                },
                "0x40000000": {
                    "1": "memory_constant_b"
                },
                "0x40000400": {
                    "1": "memory_constant_c"
                },
                "0x40000800": {
                    "1": "memory_constant_d"
                }
            }
        },
        "FUN_08004e14": {
            "entrypoint": "0x08004e14",
            "current_name": "process_param_08004e14",
            "code": "\nvoid process_param_08004e14(int *input,undefined4 param2,undefined4 param3)\n\n{\n  undefined4 constant1;\n  int input_value;\n  undefined4 output_value;\n  undefined4 value2;\n  undefined4 stack_value;\n  undefined4 constant2;\n  \n  input_value = *input;\n  if (input_value == 0x40012c00) {\n    output_value = 0x800;\n  }\n  else {\n    if (input_value != 0x40000000) {\n      if (input_value == 0x40000400) {\n        output_value = 3;\n      }\n      else {\n        if (input_value != 0x40000800) {\n          return;\n        }\n        output_value = 0x300;\n      }\n      constant1 = 0x40010c00;\n      goto LAB_08004e2e;\n    }\n    output_value = 2;\n  }\n  constant1 = 0x40010800;\nLAB_08004e2e:\n  constant2 = 2;\n  value2 = 2;\n  stack_value = param3;\n  FUN_08001264(constant1,&output_value);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004e14": "process_param_08004e14",
                "param_1": "input",
                "param_2": "param2",
                "param_3": "param3",
                "uVar1": "constant1",
                "iVar2": "input_value",
                "local_18": "output_value",
                "local_14": "value2",
                "uStack_10": "stack_value",
                "local_c": "constant2"
            },
            "calling": [
                "FUN_0800458c"
            ],
            "called": [
                "FUN_08001264"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08004e14": {
                    "1": "initialize_parameter",
                    "3": "process_input",
                    "5": "process_param",
                    "2": "initialize_parameters"
                },
                "param_1": {
                    "6": "input",
                    "1": "input_array",
                    "2": "parameter",
                    "4": "input_param",
                    "3": "input_pointer"
                },
                "param_2": {
                    "1": "value1",
                    "3": "unused_param",
                    "2": "param_2",
                    "4": "size",
                    "5": "param2"
                },
                "param_3": {
                    "1": "param_ptr2",
                    "2": "value",
                    "3": "constant2",
                    "5": "param3"
                },
                "uVar1": {
                    "1": "address_value",
                    "10": "constant1",
                    "3": "constant3",
                    "5": "constant_value"
                },
                "iVar2": {
                    "1": "current_value",
                    "5": "param_value",
                    "11": "input_value",
                    "8": "value"
                },
                "local_18": {
                    "1": "new_size",
                    "4": "output_value",
                    "2": "value1"
                },
                "local_14": {
                    "1": "unused_value1",
                    "2": "local_var1"
                },
                "uStack_10": {
                    "1": "value_2",
                    "2": "new_value3",
                    "5": "stack_value"
                },
                "local_c": {
                    "1": "unused_size",
                    "2": "constant3",
                    "3": "constant2"
                },
                "FUN_08001264": {
                    "1": "call_sub_function",
                    "2": "process_data"
                }
            }
        },
        "FUN_08004e7c": {
            "entrypoint": "0x08004e7c",
            "current_name": "initialize_system_08004e7c",
            "code": "\n\n\nvoid initialize_system_08004e7c(int *input_data)\n\n{\n  undefined4 size;\n  undefined4 count;\n  undefined4 value3;\n  undefined4 value;\n  \n  if (*input_data == 0x40013800) {\n    _DAT_40021018 = _DAT_40021018 | 0x4000;\n    size = 0x200;\n    count = 2;\n    value = 3;\n    FUN_08001264(0x40010800,&size);\n    size = 0x400;\n    count = 0;\n    value3 = 0;\n    FUN_08001264(0x40010800,&size);\n    FUN_08001194(0x25,0,0);\n    FUN_080011fc(0x25);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004e7c": "initialize_system_08004e7c",
                "param_1": "input_data",
                "local_18": "size",
                "local_14": "count",
                "local_10": "value3",
                "local_c": "value"
            },
            "calling": [
                "FUN_08002724"
            ],
            "called": [
                "FUN_08001264",
                "FUN_08001194",
                "FUN_080011fc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08004e7c": {
                    "1": "update_parameters",
                    "4": "initialize_memory",
                    "6": "initialize_system",
                    "2": "update_configuration"
                },
                "param_1": {
                    "2": "input_param",
                    "1": "input_pointer",
                    "3": "input_data"
                },
                "local_18": {
                    "1": "flag_value",
                    "4": "value1",
                    "11": "size"
                },
                "local_14": {
                    "1": "count_value",
                    "7": "count",
                    "2": "counter",
                    "4": "value2"
                },
                "local_10": {
                    "1": "flag2",
                    "2": "value",
                    "3": "value2"
                },
                "local_c": {
                    "1": "value_2",
                    "4": "value3",
                    "2": "temp",
                    "3": "value4",
                    "6": "value"
                },
                "_DAT_40021018": {
                    "1": "system_flags",
                    "2": "data_register"
                },
                "FUN_08001264": {
                    "1": "set_initial_data",
                    "3": "copy_data"
                },
                "FUN_08001194": {
                    "1": "execute_operation",
                    "3": "perform_operation"
                },
                "FUN_080011fc": {
                    "1": "execute_operation",
                    "3": "finalize_operation"
                },
                "*param_1": {
                    "1": "address"
                },
                "param_2": {
                    "1": "task_param2"
                },
                "param_3": {
                    "1": "task_param3"
                },
                "0x40010800": {
                    "1": "settings_address1"
                },
                "0x25": {
                    "1": "param1"
                }
            }
        },
        "FUN_08004f10": {
            "entrypoint": "0x08004f10",
            "current_name": "initialize_registers_08004f10",
            "code": "\n\n\nvoid initialize_registers_08004f10(void)\n\n{\n  _DAT_40021000 = _DAT_40021000 & 0xfef2ffff | 1;\n  _DAT_40021004 = _DAT_40021004 & 0xf8800000;\n  _DAT_40021008 = 0x9f0000;\n  _DAT_e000ed08 = 0x8000000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004f10": "initialize_registers_08004f10"
            },
            "calling": [
                "entry"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08004f10": {
                    "1": "configure_peripheral",
                    "5": "initialize_registers",
                    "4": "initialize_memory",
                    "2": "initialize_device",
                    "3": "initialize_peripheral_registers"
                },
                "_DAT_40021008": {
                    "1": "control_register3",
                    "2": "timer_register",
                    "4": "register3"
                },
                "_DAT_e000ed08": {
                    "1": "hardware_config4",
                    "5": "interrupt_register",
                    "4": "interrupt_control_register",
                    "2": "peripheral_register4"
                },
                "_DAT_40021000": {
                    "2": "peripheral_register1",
                    "1": "status_register",
                    "4": "register1",
                    "6": "control_register1"
                },
                "_DAT_40021004": {
                    "1": "memory_config_register2",
                    "2": "status_register",
                    "4": "register2",
                    "6": "control_register2"
                }
            }
        },
        "thunk_FUN_0800115c": {
            "entrypoint": "0x08004f60",
            "current_name": "get_data_thunk_0800115c",
            "code": "\nundefined4 get_data_thunk_0800115c(void)\n\n{\n  return DAT_20000244;\n}\n\n",
            "renaming": {
                "thunk_FUN_0800115c": "get_data_thunk_0800115c"
            },
            "calling": [
                "FUN_08002f28"
            ],
            "called": [
                "FUN_0800115c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "thunk_FUN_0800115c": {
                    "1": "get_return_value",
                    "2": "get_global_variable_value",
                    "6": "get_global_variable",
                    "7": "get_data_value",
                    "8": "get_data"
                },
                "FUN_0800115c": {
                    "1": "get_data_value_internal",
                    "6": "retrieve_data"
                },
                "DAT_20000244": {
                    "2": "data",
                    "1": "data_from_memory",
                    "5": "global_variable",
                    "4": "data_value"
                }
            }
        },
        "thunk_FUN_08001168": {
            "entrypoint": "0x08004f64",
            "current_name": "thunk_FUNC_08001168",
            "code": "\nvoid thunk_FUNC_08001168(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "thunk_FUN_08001168": "thunk_FUNC_08001168"
            },
            "calling": [
                "FUN_0800403c",
                "FUN_08004490",
                "FUN_08004028",
                "FUN_08003298"
            ],
            "called": [
                "FUN_08001168"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "entry": {
            "entrypoint": "0x08004f68",
            "current_name": "entry",
            "code": "\nvoid entry(void)\n\n{\n  int iVar1;\n  undefined4 *puVar2;\n  code *UNRECOVERED_JUMPTABLE;\n  \n  for (iVar1 = 0; (undefined4 *)(iVar1 + 0x20000000) < &DAT_20000228; iVar1 = iVar1 + 4) {\n    *(undefined4 *)(iVar1 + 0x20000000) = *(undefined4 *)(iVar1 + 0x8007448);\n  }\n  for (puVar2 = &DAT_20000228; puVar2 < &DAT_200016a0; puVar2 = puVar2 + 1) {\n    *puVar2 = 0;\n  }\n  FUN_08004f10();\n  FUN_08004fb4();\n  UNRECOVERED_JUMPTABLE = (code *)0x8004f9a;\n  FUN_080041ae();\n                    /* WARNING: Could not recover jumptable at 0x08004f9a. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*UNRECOVERED_JUMPTABLE)();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [],
            "called": [
                "FUN_08004f10",
                "FUN_08004fb4",
                "FUN_080041ae"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004fb4": {
            "entrypoint": "0x08004fb4",
            "current_name": "execute_functions_08004fb4",
            "code": "\nvoid execute_functions_08004fb4(void)\n\n{\n  int index;\n  \n  for (index = 0; index != 0; index = index + 1) {\n    (*(function_pointer *)(&DAT_08007440)[index])();\n  }\n  FUNC_080072d4();\n  for (index = 0; index != 1; index = index + 1) {\n    (*(function_pointer *)(&DAT_08007440)[index])();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004fb4": "execute_functions_08004fb4",
                "iVar1": "index",
                "code": "function_pointer"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_08000134",
                "FUN_080072d4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08004fb4": {
                    "5": "execute_sub_functions",
                    "1": "execute_functions_without_args",
                    "18": "execute_functions",
                    "2": "process_functions"
                },
                "iVar1": {
                    "1": "iteration_counter",
                    "8": "counter",
                    "21": "index"
                },
                "code": {
                    "1": "function_pointer"
                },
                "FUNC_080072d4": {
                    "1": "perform_additional_operation",
                    "2": "execute_final_function",
                    "4": "cleanup"
                },
                "param_1": {
                    "1": "arg1"
                },
                "param_2": {
                    "1": "arg2"
                },
                "(*(code *)(&DAT_08007440)[iVar1])": {
                    "1": "call_function"
                },
                "FUN_08000134": {
                    "1": "sub_function_one"
                },
                "(*code **)(&DAT_08007440)[iVar1])": {
                    "1": "function_array[index]"
                },
                "FUN_080072d4": {
                    "1": "execute_final_function"
                },
                "DAT_08007440": {
                    "1": "sub_function_array"
                },
                "(*(code *)(&DAT_08007440)[iVar1])()": {
                    "1": "execute_function_by_index(index)"
                }
            }
        },
        "FUN_08004ffc": {
            "entrypoint": "0x08004ffc",
            "current_name": "clear_memory_08004ffc",
            "code": "\nvoid clear_memory_08004ffc(undefined *data_pointer,undefined4 value1,undefined4 value2,undefined4 value3)\n\n{\n  undefined *local_array [2];\n  undefined4 max_value;\n  undefined2 size;\n  undefined2 local_var3;\n  undefined *current_pointer;\n  undefined4 max_value2;\n  undefined4 local_var6;\n  undefined4 local_var7;\n  undefined4 local_var8;\n  \n  size = 0x208;\n  max_value = 0x7fffffff;\n  max_value2 = 0x7fffffff;\n  local_var3 = 0xffff;\n  local_pointer = data_pointer;\n  current_pointer = data_pointer;\n  local_var6 = value1;\n  local_var7 = value2;\n  local_var8 = value3;\n  FUN_080050fc(DAT_200001c0,local_array,value1);\n  *local_pointer = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004ffc": "clear_memory_08004ffc",
                "param_1": "data_pointer",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3",
                "local_78": "local_array",
                "local_70": "max_value",
                "local_6c": "size",
                "local_6a": "local_var3",
                "local_68": "current_pointer",
                "local_64": "max_value2",
                "uStack_c": "local_var6",
                "uStack_8": "local_var7",
                "uStack_4": "local_var8",
                "local_78[0]": "local_pointer"
            },
            "calling": [
                "FUN_08004cac"
            ],
            "called": [
                "FUN_080050fc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08004ffc": {
                    "1": "initialize_local_data",
                    "15": "clear_memory",
                    "3": "initialize_function"
                },
                "param_1": {
                    "3": "memory_pointer",
                    "1": "input_data",
                    "2": "input_pointer",
                    "5": "data_pointer"
                },
                "param_2": {
                    "11": "param2",
                    "1": "length",
                    "2": "limit",
                    "12": "value1"
                },
                "param_3": {
                    "1": "source_buffer",
                    "11": "param3",
                    "3": "value1",
                    "12": "value2"
                },
                "param_4": {
                    "1": "param_4",
                    "11": "param4",
                    "12": "value3",
                    "3": "value2"
                },
                "local_78": {
                    "1": "memory_ptr",
                    "11": "local_array",
                    "3": "pointers",
                    "2": "local_buffers",
                    "4": "pointer_array"
                },
                "local_70": {
                    "6": "max_value1",
                    "1": "variable1",
                    "13": "max_value",
                    "5": "local_var1",
                    "2": "constant2"
                },
                "local_6c": {
                    "1": "variable2",
                    "5": "local_var2",
                    "2": "length",
                    "3": "size1",
                    "6": "size"
                },
                "local_6a": {
                    "3": "max_value2",
                    "1": "negative_value",
                    "2": "constant4",
                    "4": "local_var3"
                },
                "local_68": {
                    "1": "local_var3",
                    "3": "local_var4",
                    "2": "temp_pointer",
                    "10": "current_pointer"
                },
                "local_64": {
                    "9": "max_value2",
                    "1": "current_max",
                    "3": "max_value3",
                    "2": "constant3"
                },
                "uStack_c": {
                    "2": "local_var6",
                    "1": "stack_variable1"
                },
                "uStack_8": {
                    "2": "stack_value2",
                    "1": "current_max3"
                },
                "uStack_4": {
                    "2": "stack_value3",
                    "1": "stack_param3"
                },
                "FUN_080050fc": {
                    "1": "initialize_memory"
                },
                "local_78[0]": {
                    "1": "temp_array_pointer"
                }
            }
        },
        "FUN_08005044": {
            "entrypoint": "0x08005044",
            "current_name": "process_data_08005044",
            "code": "\nundefined4 process_data_08005044(undefined4 *output_buffer,int *input,undefined4 value,uint index)\n\n{\n  int result;\n  uint new_size;\n  uint original_size;\n  int offset;\n  \n  original_size = input[2];\n  if ((original_size <= index) && ((*(ushort *)(input + 3) & 0x480) != 0)) {\n    offset = *input - input[4];\n    original_size = (uint)(input[5] * 3) / 2;\n    new_size = index + 1 + offset;\n    if (original_size < new_size) {\n      original_size = new_size;\n    }\n    if ((int)((uint)*(ushort *)(input + 3) << 0x15) < 0) {\n      result = FUN_08005714(output_buffer,original_size);\n      if (result == 0) {\nerror:\n        *output_buffer = 0xc;\n        *(ushort *)(input + 3) = *(ushort *)(input + 3) | 0x40;\n        return 0xffffffff;\n      }\n      FUN_08005630(result,input[4],offset);\n      *(ushort *)(input + 3) = *(ushort *)(input + 3) & 0xfb7f | 0x80;\n    }\n    else {\n      result = FUNC_080057d0(output_buffer,input[4],original_size);\n      if (result == 0) {\n        FUN_0800567c(output_buffer,input[4]);\n        goto error;\n      }\n    }\n    input[4] = result;\n    *input = result + offset;\n    input[5] = original_size;\n    input[2] = original_size - offset;\n    original_size = index;\n  }\n  if (index <= original_size) {\n    original_size = index;\n  }\n  FUN_08005646(*input,value,original_size);\n  input[2] = input[2] - original_size;\n  *input = original_size + *input;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08005044": "process_data_08005044",
                "param_1": "output_buffer",
                "param_2": "input",
                "param_3": "value",
                "param_4": "index",
                "uVar3": "original_size",
                "iVar4": "offset",
                "uVar2": "new_size",
                "iVar1": "result",
                "LAB_0800508a": "error"
            },
            "calling": [
                "FUN_080050fc"
            ],
            "called": [
                "FUN_0800567c",
                "FUN_08005714",
                "FUN_080057d0",
                "FUN_08005646",
                "FUN_08005630"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08005044": {
                    "9": "process_data",
                    "1": "reverse_and_update_data",
                    "6": "update_data"
                },
                "param_1": {
                    "4": "output_array",
                    "1": "input_array",
                    "5": "output",
                    "2": "output_data",
                    "6": "output_buffer"
                },
                "param_2": {
                    "6": "input",
                    "3": "data",
                    "4": "input_array",
                    "2": "data_info",
                    "1": "input_param",
                    "5": "input_data"
                },
                "param_3": {
                    "1": "input_param",
                    "5": "input_value",
                    "12": "value",
                    "2": "length"
                },
                "param_4": {
                    "1": "input_param",
                    "3": "count",
                    "4": "length",
                    "7": "index"
                },
                "uVar3": {
                    "1": "temp3",
                    "3": "input_size",
                    "2": "current_size"
                },
                "iVar4": {
                    "1": "temp4",
                    "17": "offset",
                    "6": "difference"
                },
                "uVar2": {
                    "1": "calculation1",
                    "2": "updated_length",
                    "3": "new_length",
                    "4": "updated_size",
                    "5": "new_size"
                },
                "iVar1": {
                    "1": "result_code",
                    "25": "result"
                },
                "FUN_0800567c": {
                    "6": "free_memory",
                    "1": "free_allocated_memory",
                    "2": "do_something"
                },
                "FUN_08005714": {
                    "1": "update_value2",
                    "14": "allocate_memory"
                },
                "FUN_080057d0": {
                    "1": "update_value3",
                    "2": "allocate_and_copy_data",
                    "3": "reallocate_memory"
                },
                "FUN_08005646": {
                    "1": "modify_output_buffer",
                    "4": "process_data",
                    "3": "modify_data",
                    "2": "update_data"
                },
                "FUN_08005630": {
                    "1": "process_data_b",
                    "2": "copy_memory",
                    "10": "copy_data"
                },
                "LAB_0800508a": {
                    "1": "error"
                }
            }
        },
        "FUN_080050fc": {
            "entrypoint": "0x080050fc",
            "current_name": "process_data_080050fc",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08005294) */\n\nint process_data_080050fc(undefined4 *output_buffer,int *input_buffer,byte *format_string,int *output_size)\n\n{\n  int result;\n  int length;\n  int *ptr;\n  bool is_digit;\n  byte *current_byte;\n  byte *next_byte;\n  int unaff_r9;\n  int *param_5;\n  uint flags;\n  int precision;\n  undefined4 width;\n  int width;\n  int total_length;\n  byte specifier;\n  undefined space_flag;\n  undefined plus_flag;\n  undefined sign_char;\n  undefined4 zero_flag;\n  \n  param_5 = output_size;\n  if (((int)((uint)*(ushort *)(input_buffer + 3) << 0x18) < 0) && (input_buffer[4] == 0)) {\n    result = FUN_08005714(output_buffer,0x40);\n    *input_buffer = result;\n    input_buffer[4] = result;\n    if (result == 0) {\n      *output_buffer = 0xc;\n      return -1;\n    }\n    input_buffer[5] = 0x40;\n  }\n  total_length = 0;\n  space_flag = 0x20;\n  plus_flag = 0x30;\n  current_byte = format_string;\nLAB_08005146:\n  next_byte = current_byte;\n  if (*next_byte != 0) goto LAB_080051ca;\n  goto LAB_08005150;\nLAB_080051ca:\n  current_byte = next_byte + 1;\n  if (*next_byte != 0x25) goto LAB_08005146;\nLAB_08005150:\n  result = (int)next_byte - (int)format_string;\n  if (result != 0) {\n    length = FUN_08005044(output_buffer,input_buffer,format_string,result);\n    if (length == -1) {\nLAB_080052ac:\n      if ((int)((uint)*(ushort *)(input_buffer + 3) << 0x19) < 0) {\n        return -1;\n      }\n      return total_length;\n    }\n    total_length = total_length + result;\n  }\n  if (*next_byte == 0) goto LAB_080052ac;\n  flags = 0;\n  width = 0;\n  precision = -1;\n  width = 0;\n  sign_char = 0;\n  zero_flag = 0;\n  current_byte = next_byte + 1;\n  while( true ) {\n    result = FUN_08005614(&DAT_08007379,*current_byte);\n    format_string = current_byte + 1;\n    if (result == 0) break;\n    flags = 1 << (result + 0xf7ff8c87U & 0xff) | flags;\n    current_byte = format_string;\n  }\n  if ((int)(flags << 0x1b) < 0) {\n    sign_char = 0x20;\n  }\n  if ((int)(flags << 0x1c) < 0) {\n    sign_char = 0x2b;\n  }\n  if (*current_byte == 0x2a) {\n    ptr = param_5 + 1;\n    result = *param_5;\n    param_5 = ptr;\n    if (result < 0) {\n      width = -result;\n      flags = flags | 2;\n      goto LAB_080051fc;\n    }\n  }\n  else {\n    is_digit = false;\n    result = width;\n    format_string = current_byte;\n    while( true ) {\n      if (9 < *format_string - 0x30) break;\n      result = result * 10 + (*format_string - 0x30);\n      is_digit = true;\n      format_string = format_string + 1;\n    }\n    if (!is_digit) goto LAB_080051fc;\n  }\n  width = result;\nLAB_080051fc:\n  if (*format_string == 0x2e) {\n    if (format_string[1] == 0x2a) {\n      format_string = format_string + 2;\n      ptr = param_5 + 1;\n      precision = *param_5;\n      param_5 = ptr;\n      if (precision < 0) {\n        precision = -1;\n      }\n    }\n    else {\n      is_digit = false;\n      result = 0;\n      precision = 0;\n      while( true ) {\n        format_string = format_string + 1;\n        if (9 < *format_string - 0x30) break;\n        result = result * 10 + (*format_string - 0x30);\n        is_digit = true;\n      }\n      if (is_digit) {\n        precision = result;\n      }\n    }\n  }\n  result = FUN_08005614(&DAT_0800737f,*format_string,3);\n  if (result != 0) {\n    format_string = format_string + 1;\n    flags = flags | 0x40 << (result + 0xf7ff8c81U & 0xff);\n  }\n  specifier = *format_string;\n  format_string = format_string + 1;\n  result = FUN_08005614(\"efgEFG\",specifier,6);\n  if (result == 0) {\n    unaff_r9 = FUN_080053d4(output_buffer,&flags,input_buffer,0x8005045,&param_5);\n    if (unaff_r9 == -1) goto LAB_080052ac;\n  }\n  else {\n    param_5 = (int *)(((int)param_5 + 7U & 0xfffffff8) + 8);\n  }\n  total_length = total_length + unaff_r9;\n  current_byte = format_string;\n  goto LAB_08005146;\n}\n\n",
            "renaming": {
                "FUN_080050fc": "process_data_080050fc",
                "param_1": "output_buffer",
                "param_2": "input_buffer",
                "param_3": "format_string",
                "param_4": "output_size",
                "iVar1": "result",
                "iVar2": "length",
                "piVar3": "ptr",
                "bVar4": "is_digit",
                "pbVar5": "current_byte",
                "pbVar6": "next_byte",
                "local_8c": "param_5",
                "local_88": "flags",
                "local_84": "precision",
                "local_80": "width",
                "local_7c": "width",
                "local_74": "total_length",
                "local_70": "specifier",
                "local_6f": "space_flag",
                "local_6e": "plus_flag",
                "local_45": "sign_char",
                "local_30": "zero_flag",
                "iVar3": "temp_result"
            },
            "calling": [
                "FUN_08004ffc"
            ],
            "called": [
                "FUN_08005044",
                "FUN_080053d4",
                "FUN_08005714",
                "FUN_08005614"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080050fc": {
                    "4": "extract_data",
                    "7": "process_data",
                    "1": "extract_and_process_data",
                    "3": "decode_and_process_data",
                    "2": "parse_string"
                },
                "param_1": {
                    "2": "result",
                    "1": "dest",
                    "8": "output",
                    "12": "output_buffer"
                },
                "param_2": {
                    "9": "input_buffer",
                    "5": "input",
                    "1": "info_array",
                    "4": "buffer",
                    "2": "input_data"
                },
                "param_3": {
                    "3": "input_data",
                    "2": "format",
                    "1": "pattern",
                    "13": "format_string"
                },
                "param_4": {
                    "1": "output_buffer",
                    "2": "param_4",
                    "4": "output_size"
                },
                "iVar1": {
                    "1": "temp_var1",
                    "5": "length",
                    "19": "result"
                },
                "iVar2": {
                    "2": "result_length",
                    "5": "result",
                    "1": "bytes_processed",
                    "3": "status",
                    "7": "length"
                },
                "piVar3": {
                    "1": "temp_pointer",
                    "3": "pointer",
                    "2": "param_ptr",
                    "7": "ptr"
                },
                "bVar4": {
                    "6": "is_digit",
                    "4": "is_number",
                    "2": "found_number",
                    "1": "has_number",
                    "3": "is_numeric"
                },
                "pbVar5": {
                    "1": "pointer1",
                    "8": "current_char",
                    "2": "ptr1",
                    "10": "current_byte"
                },
                "pbVar6": {
                    "1": "start_byte",
                    "7": "next_byte",
                    "6": "next_char",
                    "2": "ptr2"
                },
                "unaff_r9": {
                    "5": "return_value",
                    "1": "result",
                    "7": "unaff_r9"
                },
                "local_8c": {
                    "1": "dynamic_array",
                    "2": "param_5"
                },
                "local_88": {
                    "2": "flag",
                    "1": "bit_mask",
                    "23": "flags"
                },
                "local_84": {
                    "1": "decimal_part",
                    "3": "width",
                    "13": "precision"
                },
                "local_80": {
                    "2": "temp_var3",
                    "1": "local_variable3",
                    "3": "unused",
                    "4": "width"
                },
                "local_7c": {
                    "1": "integer_part",
                    "8": "width",
                    "2": "field_width"
                },
                "local_74": {
                    "1": "length",
                    "2": "total",
                    "18": "total_length"
                },
                "local_70": {
                    "1": "byte_val",
                    "6": "specifier",
                    "2": "format_char",
                    "4": "conversion_char",
                    "5": "conversion_specifier"
                },
                "local_6f": {
                    "1": "space_char1",
                    "3": "flag1",
                    "6": "space_flag"
                },
                "local_6e": {
                    "5": "plus_flag",
                    "1": "start_char_2",
                    "3": "flag2"
                },
                "local_45": {
                    "2": "precision_flag",
                    "1": "constant3",
                    "3": "sign_char"
                },
                "local_30": {
                    "1": "extra_offset",
                    "3": "zero_flag",
                    "2": "unused"
                },
                "FUN_08005044": {
                    "1": "process_pattern",
                    "2": "copy_data"
                },
                "FUN_080053d4": {
                    "1": "process_variable"
                },
                "FUN_08005714": {
                    "1": "allocate_buffer",
                    "3": "allocate_memory"
                },
                "FUN_08005614": {
                    "1": "is_character_in_string",
                    "2": "find_character"
                },
                "F_08005714": {
                    "1": "allocate_memory"
                },
                "FUNG_080050fc": {
                    "1": "process_data"
                },
                "iVar3": {
                    "1": "temp_result"
                },
                "iVar4": {
                    "1": "temp_result2"
                },
                "unaff_r8": {
                    "1": "temp_result3"
                },
                "ptr_to_DAT_08007379": {
                    "1": "some_data1"
                },
                "ptr_to_DAT_0800737f": {
                    "1": "some_data2"
                },
                "fVar4": {
                    "1": "is_negative"
                },
                "para_3": {
                    "1": "input_buffer"
                },
                "param_5": {
                    "1": "ptr_ptr_buffer_length"
                }
            }
        },
        "FUN_080052e4": {
            "entrypoint": "0x080052e4",
            "current_name": "process_data_080052e4",
            "code": "\nundefined4\nprocess_data_080052e4(undefined4 input,uint *data,uint *output_size,undefined4 param,code *callback)\n\n{\n  int index;\n  int result;\n  uint max_value;\n  uint offset;\n  bool is_condition_met;\n  \n  max_value = data[4];\n  if ((int)data[4] < (int)data[2]) {\n    max_value = data[2];\n  }\n  *output_size = max_value;\n  if (*(char *)((int)data + 0x43) != '\\0') {\n    *output_size = max_value + 1;\n  }\n  if ((int)(*data << 0x1a) < 0) {\n    *output_size = *output_size + 2;\n  }\n  if ((*data & 6) == 0) {\n    for (index = 0; index < (int)(data[3] - *output_size); index = index + 1) {\n      result = (*callback)(input,param,(int)data + 0x19,1);\n      if (result == -1) {\n        return 0xffffffff;\n      }\n    }\n  }\n  max_value = (uint)*(byte *)((int)data + 0x43);\n  if (max_value != 0) {\n    max_value = 1;\n  }\n  offset = max_value;\n  if ((int)(*data << 0x1a) < 0) {\n    *(undefined *)((int)data + max_value + 0x43) = 0x30;\n    offset = max_value + 2;\n    *(undefined *)((int)data + max_value + 0x44) = *(undefined *)((int)data + 0x45);\n  }\n  index = (*callback)(input,param,(int)data + 0x43,offset);\n  if (index != -1) {\n    max_value = data[3];\n    is_condition_met = (*data & 6) != 4;\n    if (is_condition_met) {\n      max_value = 0;\n    }\n    offset = 0;\n    if (!is_condition_met) {\n      max_value = max_value - *output_size;\n    }\n    if (!is_condition_met) {\n      max_value = max_value & ~((int)max_value >> 0x1f);\n    }\n    if ((int)data[4] < (int)data[2]) {\n      max_value = max_value + (data[2] - data[4]);\n    }\n    while( true ) {\n      if (max_value == offset) {\n        return 0;\n      }\n      index = (*callback)(input,param,(int)data + 0x1a,1);\n      if (index == -1) break;\n      offset = offset + 1;\n    }\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_080052e4": "process_data_080052e4",
                "param_1": "input",
                "param_2": "data",
                "param_3": "output_size",
                "param_4": "param",
                "param_5": "callback",
                "iVar1": "index",
                "iVar2": "result",
                "uVar3": "max_value",
                "uVar4": "offset",
                "bVar5": "is_condition_met"
            },
            "calling": [
                "FUN_080053d4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080052e4": {
                    "1": "update_data",
                    "14": "process_data",
                    "2": "decode_data",
                    "3": "parse_data"
                },
                "param_1": {
                    "8": "input",
                    "4": "data",
                    "2": "input_data",
                    "6": "input_value",
                    "1": "input1",
                    "3": "input_param"
                },
                "param_2": {
                    "11": "data",
                    "4": "header",
                    "1": "input_2",
                    "2": "input_array"
                },
                "param_3": {
                    "1": "output_1",
                    "2": "output_param",
                    "7": "output_size",
                    "3": "output_value",
                    "5": "result"
                },
                "param_4": {
                    "1": "input_2",
                    "3": "param4",
                    "2": "additional_param",
                    "7": "param"
                },
                "param_5": {
                    "1": "processor",
                    "17": "callback",
                    "5": "callback_func",
                    "7": "callback_function"
                },
                "iVar1": {
                    "1": "loop_index1",
                    "16": "index",
                    "3": "index1",
                    "5": "i"
                },
                "iVar2": {
                    "1": "loop_counter_2",
                    "3": "index2",
                    "5": "callback_result",
                    "14": "result"
                },
                "uVar3": {
                    "1": "max_output_length",
                    "17": "max_value",
                    "9": "max_size"
                },
                "uVar4": {
                    "2": "temp",
                    "1": "bytes_written",
                    "5": "counter",
                    "15": "offset"
                },
                "bVar5": {
                    "4": "condition",
                    "1": "is_valid",
                    "2": "is_true",
                    "5": "is_condition_met"
                },
                "byteValue": {
                    "1": "char_value"
                },
                "*(char *)((int)data + 0x43)": {
                    "1": "flag"
                },
                "(int)(*data << 0x1a)": {
                    "1": "shifted_value"
                },
                "*(byte *)((int)data + 0x43)": {
                    "1": "byte_value"
                }
            }
        },
        "FUN_080053d4": {
            "entrypoint": "0x080053d4",
            "current_name": "decode_and_process_data_080053d4",
            "code": "\nuint decode_and_process_data_080053d4(undefined4 arg1,uint *data,undefined4 arg3,code *callback_func,uint **arg5)\n\n{\n  byte byte_value;\n  int index;\n  uint *ptr;\n  int int_var2;\n  char *char_ptr;\n  uint base;\n  uint **ptr_ptr1;\n  char **ptr_ptr2;\n  uint value;\n  uint uint_var3;\n  char *char_ptr2;\n  char *char_ptr3;\n  uint local_array [2];\n  \n  byte_value = *(byte *)(data + 6);\n  char_ptr3 = (char *)((int)data + 0x43);\n  if (byte_value != 0x6e) {\n    if (byte_value < 0x6f) {\n      if (byte_value != 99) {\n        if (byte_value < 100) {\n          if (byte_value == 0) goto LAB_0800558e;\n          if (byte_value != 0x58) goto LAB_08005404;\n          *(undefined *)((int)data + 0x45) = 0x58;\n          char_ptr = \"0123456789ABCDEF\";\nLAB_0800551e:\n          base = *data;\n          ptr = *arg5;\n          *arg5 = ptr + 1;\n          if (((base & 0x80) == 0) && ((int)(base << 0x19) < 0)) {\n            value = (uint)*(ushort *)ptr;\n          }\n          else {\n            value = *ptr;\n          }\n          if ((int)(base << 0x1f) < 0) {\n            *data = base | 0x20;\n          }\n          if (value == 0) {\n            *data = *data & 0xffffffdf;\n          }\n          base = 0x10;\nLAB_080054b4:\n          *(undefined *)((int)data + 0x43) = 0;\n        }\n        else {\n          if ((byte_value != 100) && (byte_value != 0x69)) goto LAB_08005404;\n          value = *data;\n          ptr = *arg5;\n          if ((value & 0x80) == 0) {\n            *arg5 = ptr + 1;\n            if ((value & 0x40) == 0) goto LAB_08005424;\n            value = (uint)(short)*(ushort *)ptr;\n          }\n          else {\n            *arg5 = ptr + 1;\nLAB_08005424:\n            value = *ptr;\n          }\n          if ((int)value < 0) {\n            value = -value;\n            *(undefined *)((int)data + 0x43) = 0x2d;\n          }\n          char_ptr = \"0123456789ABCDEF\";\n          base = 10;\n        }\n        uint_var3 = data[1];\n        data[2] = uint_var3;\n        char_ptr2 = char_ptr3;\n        if ((int)uint_var3 < 0) {\n          if (value != 0) goto LAB_08005552;\nLAB_08005600:\n          *(char *)((int)data + 0x42) = *char_ptr;\n          char_ptr2 = (char *)((int)data + 0x42);\n        }\n        else {\n          *data = *data & 0xfffffffb;\n          if (value == 0) {\n            if (uint_var3 != 0) goto LAB_08005600;\n          }\n          else {\nLAB_08005552:\n            do {\n              uint_var3 = value / base;\n              char_ptr2 = char_ptr2 + -1;\n              *char_ptr2 = char_ptr[value - base * uint_var3];\n              value = uint_var3;\n            } while (uint_var3 != 0);\n          }\n        }\n        if (((base == 8) && ((int)(*data << 0x1f) < 0)) && ((int)data[1] <= (int)data[4]))\n        {\n          char_ptr2[-1] = '0';\n          char_ptr2 = char_ptr2 + -1;\n        }\n        data[4] = (int)char_ptr3 - (int)char_ptr2;\n        char_ptr3 = char_ptr2;\n        goto LAB_080054fa;\n      }\n      ptr = *arg5;\n      *arg5 = ptr + 1;\n      *(char *)((int)data + 0x42) = (char)*ptr;\nLAB_08005464:\n      char_ptr3 = (char *)((int)data + 0x42);\n      value = 1;\n    }\n    else {\n      if (byte_value != 0x73) {\n        if (byte_value < 0x74) {\n          if (byte_value == 0x6f) {\nLAB_0800548a:\n            value = *data;\n            ptr = *arg5;\n            if ((value & 0x80) == 0) {\n              *arg5 = ptr + 1;\n              if ((value & 0x40) == 0) goto LAB_08005498;\n              value = (uint)*(ushort *)ptr;\n            }\n            else {\n              *arg5 = ptr + 1;\nLAB_08005498:\n              value = *ptr;\n            }\n            if (byte_value == 0x6f) {\n              base = 8;\n            }\n            else {\n              base = 10;\n            }\n            char_ptr = \"0123456789ABCDEF\";\n            goto LAB_080054b4;\n          }\n          if (byte_value == 0x70) {\n            *data = *data | 0x20;\nLAB_0800544a:\n            char_ptr = \"0123456789abcdef\";\n            *(undefined *)((int)data + 0x45) = 0x78;\n            goto LAB_0800551e;\n          }\n        }\n        else {\n          if (byte_value == 0x75) goto LAB_0800548a;\n          if (byte_value == 0x78) goto LAB_0800544a;\n        }\nLAB_08005404:\n        *(byte *)((int)data + 0x42) = byte_value;\n        goto LAB_08005464;\n      }\n      ptr_ptr2 = (char **)*arg5;\n      *arg5 = (uint *)(ptr_ptr2 + 1);\n      char_ptr3 = *ptr_ptr2;\n      index = FUN_08005614(char_ptr3,0,data[1]);\n      if (index != 0) {\n        data[1] = index - (int)char_ptr3;\n      }\n      value = data[1];\n    }\n    data[4] = value;\n    *(undefined *)((int)data + 0x43) = 0;\n    goto LAB_080054fa;\n  }\n  value = *data;\n  ptr_ptr1 = (uint **)*arg5;\n  base = data[5];\n  if ((value & 0x80) == 0) {\n    *arg5 = (uint *)(ptr_ptr1 + 1);\n    ptr = *ptr_ptr1;\n    if ((value & 0x40) == 0) goto LAB_0800557a;\n    *(short *)ptr = (short)base;\n  }\n  else {\n    *arg5 = (uint *)(ptr_ptr1 + 1);\n    ptr = *ptr_ptr1;\nLAB_0800557a:\n    *ptr = base;\n  }\nLAB_0800558e:\n  data[4] = 0;\nLAB_080054fa:\n  index = FUN_080052e4(arg1,data,local_array,arg3,callback_func);\n  if ((index == -1) || (index = (*callback_func)(arg1,arg3,char_ptr3,data[4]), index == -1)) {\nLAB_0800550e:\n    value = 0xffffffff;\n  }\n  else {\n    if ((int)(*data << 0x1e) < 0) {\n      for (index = 0; index < (int)(data[3] - local_array[0]); index = index + 1) {\n        int_var2 = (*callback_func)(arg1,arg3,(int)data + 0x19,1);\n        if (int_var2 == -1) goto LAB_0800550e;\n      }\n    }\n    value = data[3];\n    if ((int)data[3] < (int)local_array[0]) {\n      value = local_array[0];\n    }\n  }\n  return value;\n}\n\n",
            "renaming": {
                "FUN_080053d4": "decode_and_process_data_080053d4",
                "param_1": "arg1",
                "param_2": "data",
                "param_3": "arg3",
                "param_4": "callback_func",
                "param_5": "arg5",
                "bVar1": "byte_value",
                "iVar2": "index",
                "puVar3": "ptr",
                "iVar4": "int_var2",
                "pcVar5": "char_ptr",
                "uVar6": "base",
                "ppuVar7": "ptr_ptr1",
                "ppcVar8": "ptr_ptr2",
                "uVar9": "value",
                "uVar10": "uint_var3",
                "pcVar11": "char_ptr2",
                "pcVar12": "char_ptr3",
                "local_24": "local_array"
            },
            "calling": [
                "FUN_080050fc"
            ],
            "called": [
                "FUN_080052e4",
                "FUN_08005614"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080053d4": {
                    "1": "convert_and_process_data",
                    "2": "decode_and_process",
                    "5": "decode_and_process_data"
                },
                "param_1": {
                    "1": "input_data",
                    "2": "input1",
                    "7": "arg1",
                    "3": "param_1",
                    "5": "param1",
                    "6": "input_param"
                },
                "param_2": {
                    "10": "data",
                    "4": "param2",
                    "2": "arg2",
                    "1": "input_param",
                    "3": "data_ptr",
                    "5": "input_array"
                },
                "param_3": {
                    "1": "unknown_param",
                    "5": "param3",
                    "6": "param_3",
                    "7": "arg3",
                    "3": "param"
                },
                "param_4": {
                    "1": "input4",
                    "4": "param4",
                    "7": "callback",
                    "2": "arg4",
                    "8": "callback_func"
                },
                "param_5": {
                    "3": "output_array",
                    "1": "ptr_array",
                    "5": "param5",
                    "2": "counter_ptr"
                },
                "bVar1": {
                    "18": "byte_value",
                    "5": "byte_val",
                    "1": "first_byte",
                    "7": "byte_var"
                },
                "iVar2": {
                    "1": "result",
                    "3": "int_var1",
                    "2": "int_value",
                    "12": "index",
                    "4": "int_var"
                },
                "puVar3": {
                    "1": "ptr_var1",
                    "2": "pointer_var",
                    "3": "ptr_var",
                    "9": "ptr"
                },
                "iVar4": {
                    "1": "int_val",
                    "2": "result",
                    "6": "int_var2",
                    "3": "inner_index"
                },
                "pcVar5": {
                    "2": "char_var1",
                    "5": "hex_digits",
                    "3": "hex_chars",
                    "1": "char_pointer1",
                    "12": "char_ptr"
                },
                "uVar6": {
                    "1": "unsigned_var",
                    "2": "uint_val",
                    "3": "uint_var",
                    "7": "base"
                },
                "ppuVar7": {
                    "1": "double_ptr"
                },
                "ppcVar8": {
                    "1": "pointer_to_pointer_to_char"
                },
                "uVar9": {
                    "1": "uint_var_2",
                    "4": "uint_var2",
                    "5": "value",
                    "2": "value_2",
                    "3": "result"
                },
                "uVar10": {
                    "1": "value",
                    "3": "temp_value",
                    "4": "uint_var3",
                    "2": "length"
                },
                "pcVar11": {
                    "2": "output",
                    "1": "ptr",
                    "7": "char_ptr2",
                    "3": "char_var2"
                },
                "pcVar12": {
                    "3": "char_var3",
                    "1": "ptr_to_var",
                    "7": "char_ptr3",
                    "2": "char_pointer3"
                },
                "local_24": {
                    "20": "local_array",
                    "2": "local_values",
                    "1": "local_arr"
                }
            }
        },
        "FUN_08005614": {
            "entrypoint": "0x08005614",
            "current_name": "find_character_08005614",
            "code": "\nchar * find_character_08005614(char *string,char character,int length)\n\n{\n  char *current_char;\n  char *next_char;\n  \n  current_char = string;\n  do {\n    next_char = current_char;\n    if (next_char == string + length) {\n      return (char *)0x0;\n    }\n    current_char = next_char + 1;\n  } while (*next_char != character);\n  return next_char;\n}\n\n",
            "renaming": {
                "FUN_08005614": "find_character_08005614",
                "param_1": "string",
                "param_2": "character",
                "param_3": "length",
                "pcVar1": "current_char",
                "pcVar2": "next_char"
            },
            "calling": [
                "FUN_080053d4",
                "FUN_080050fc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08005614": {
                    "3": "find_char_in_string",
                    "1": "find_first_character",
                    "17": "find_character",
                    "6": "find_first_occurrence"
                },
                "param_1": {
                    "27": "string",
                    "1": "input_string",
                    "3": "str"
                },
                "param_2": {
                    "1": "search_character",
                    "4": "target",
                    "25": "character"
                },
                "param_3": {
                    "1": "string_length",
                    "30": "length"
                },
                "pcVar1": {
                    "5": "current_character",
                    "3": "current_position",
                    "13": "current_char"
                },
                "pcVar2": {
                    "2": "next_ptr",
                    "1": "current_char",
                    "4": "next_character",
                    "12": "next_char",
                    "3": "next_position"
                }
            }
        },
        "FUN_08005630": {
            "entrypoint": "0x08005630",
            "current_name": "copy_data_08005630",
            "code": "\nvoid copy_data_08005630(int buffer_start_address,undefined *source_data,int data_length)\n\n{\n  undefined *dest_ptr;\n  undefined *dest_end;\n  \n  dest_end = (undefined *)(buffer_start_address + -1);\n  dest_ptr = source_data + data_length;\n  for (; source_data != dest_ptr; source_data = source_data + 1) {\n    dest_end = dest_end + 1;\n    *dest_end = *source_data;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005630": "copy_data_08005630",
                "param_1": "buffer_start_address",
                "param_2": "source_data",
                "param_3": "data_length",
                "puVar1": "dest_ptr",
                "puVar2": "dest_end"
            },
            "calling": [
                "FUN_08005044",
                "FUN_080057d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08005630": {
                    "5": "copy_data_to_buffer",
                    "1": "copy_array",
                    "2": "copy_bytes",
                    "18": "copy_data"
                },
                "param_1": {
                    "3": "dest_start",
                    "1": "output_buffer",
                    "2": "target_ptr"
                },
                "param_2": {
                    "3": "source_array",
                    "12": "source_data",
                    "2": "src_address",
                    "4": "source",
                    "1": "src"
                },
                "param_3": {
                    "4": "num_bytes",
                    "2": "array_length",
                    "3": "data_size",
                    "12": "data_length",
                    "1": "num_elements_to_copy",
                    "7": "length"
                },
                "puVar1": {
                    "1": "end_of_range",
                    "5": "dest_end",
                    "3": "source_end"
                },
                "puVar2": {
                    "1": "input_ptr",
                    "2": "dest_index",
                    "3": "dest_end"
                }
            }
        },
        "FUN_08005646": {
            "entrypoint": "0x08005646",
            "current_name": "copy_and_shift_08005646",
            "code": "\nvoid copy_and_shift_08005646(undefined *dest,undefined *src,int length)\n\n{\n  undefined *src_end;\n  \n  src_end = src + length;\n  if ((src < dest) && (dest < src_end)) {\n    dest = dest + length;\n    length = length - (int)src_end;\n    while (src_end + length != (undefined *)0x0) {\n      src_end = src_end + -1;\n      dest = dest + -1;\n      *dest = *src_end;\n    }\n    return;\n  }\n  dest = dest + -1;\n  for (; src != src_end; src = src + 1) {\n    dest = dest + 1;\n    *dest = *src;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005646": "copy_and_shift_08005646",
                "param_1": "dest",
                "param_2": "src",
                "param_3": "length",
                "puVar1": "src_end"
            },
            "calling": [
                "FUN_08005044"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08005646": {
                    "1": "reverse_and_copy_data",
                    "6": "copy_and_shift",
                    "5": "reverse_copy",
                    "3": "copy_and_reverse",
                    "2": "copy_and_shift_memory"
                },
                "param_1": {
                    "2": "dst",
                    "16": "dest",
                    "10": "destination",
                    "3": "dest_ptr"
                },
                "param_2": {
                    "3": "src_ptr",
                    "10": "source",
                    "18": "src"
                },
                "param_3": {
                    "1": "num_bytes",
                    "2": "count",
                    "19": "length",
                    "9": "size"
                },
                "puVar1": {
                    "9": "src_end",
                    "1": "end_address",
                    "7": "end_ptr",
                    "2": "dest_end",
                    "5": "end"
                },
                "*param_1": {
                    "1": "current_dest"
                },
                "*param_2": {
                    "1": "current_src"
                },
                "param_1 + param_3": {
                    "2": "dest_end"
                },
                "puVar1 + param_3": {
                    "1": "source_end"
                },
                "param_1 + -1": {
                    "1": "dest_minus_one"
                },
                "puVar1 + -1": {
                    "1": "src_minus_one"
                }
            }
        },
        "FUN_0800567c": {
            "entrypoint": "0x0800567c",
            "current_name": "process_data_0800567c",
            "code": "\nvoid process_data_0800567c(undefined4 *output,int size,undefined4 param3,undefined4 param4)\n\n{\n  int **extra_result;\n  int **current_node;\n  int **temp_ptr2;\n  int *temp_var;\n  int **temp4;\n  int **new_node;\n  \n  if (size == 0) {\n    return;\n  }\n  new_node = (int **)(size + -4);\n  if (*(int *)(size + -4) < 0) {\n    new_node = (int **)((int)new_node + *(int *)(size + -4));\n  }\n  FUNC_0800583c();\n  temp_ptr2 = (int **)&DAT_200002ac;\n  if (DAT_200002ac == (int **)0x0) {\n    new_node[1] = (int *)0x0;\n    current_node = extra_result;\n    DAT_200002ac = new_node;\n  }\n  else {\n    temp_ptr2 = DAT_200002ac;\n    if (new_node < DAT_200002ac) {\n      current_node = (int **)*new_node;\n      temp_ptr2 = (int **)((int)new_node + (int)current_node);\n      if (DAT_200002ac == temp_ptr2) {\n        temp_var = *DAT_200002ac;\n        DAT_200002ac = (int **)DAT_200002ac[1];\n        temp_ptr2 = (int **)((int)temp_var + (int)current_node);\n        *new_node = (int *)temp_ptr2;\n      }\n      new_node[1] = (int *)DAT_200002ac;\n      DAT_200002ac = new_node;\n    }\n    else {\n      do {\n        temp4 = temp_ptr2;\n        temp_ptr2 = (int **)temp4[1];\n        if (temp_ptr2 == (int **)0x0) break;\n      } while (temp_ptr2 <= new_node);\n      current_node = (int **)*temp4;\n      if ((int **)((int)temp4 + (int)current_node) == new_node) {\n        current_node = (int **)((int)current_node + (int)*new_node);\n        *temp4 = (int *)current_node;\n        if (temp_ptr2 == (int **)((int)temp4 + (int)current_node)) {\n          temp_var = *temp_ptr2;\n          temp_ptr2 = (int **)temp_ptr2[1];\n          current_node = (int **)((int)current_node + (int)temp_var);\n          *temp4 = (int *)current_node;\n          temp4[1] = (int *)temp_ptr2;\n        }\n      }\n      else if (new_node < (int **)((int)temp4 + (int)current_node)) {\n        *output = 0xc;\n      }\n      else {\n        current_node = (int **)((int)new_node + (int)*new_node);\n        if (temp_ptr2 == current_node) {\n          temp_var = *temp_ptr2;\n          temp_ptr2 = (int **)temp_ptr2[1];\n          current_node = (int **)((int)temp_var + (int)*new_node);\n          *new_node = (int *)current_node;\n        }\n        new_node[1] = (int *)temp_ptr2;\n        temp4[1] = (int *)new_node;\n      }\n    }\n  }\n  FUNC_0800583e(output,current_node,temp_ptr2,param4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800567c": "process_data_0800567c",
                "param_1": "output",
                "param_2": "size",
                "param_3": "param3",
                "param_4": "param4",
                "extraout_r1": "extra_result",
                "ppiVar1": "current_node",
                "ppiVar2": "temp_ptr2",
                "piVar3": "temp_var",
                "ppiVar4": "temp4",
                "ppiVar5": "new_node"
            },
            "calling": [
                "FUN_08005044",
                "FUN_080057d0"
            ],
            "called": [
                "FUN_0800583c",
                "FUN_0800583e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800567c": {
                    "1": "rearrange_data",
                    "8": "process_data",
                    "3": "update_linked_list",
                    "4": "update_data"
                },
                "param_1": {
                    "5": "output_array",
                    "1": "output_buffer",
                    "2": "list",
                    "10": "output",
                    "6": "result"
                },
                "param_2": {
                    "2": "array_length",
                    "1": "list_size",
                    "3": "length",
                    "7": "input_size",
                    "11": "size"
                },
                "param_3": {
                    "1": "input_a",
                    "14": "param3",
                    "4": "value1",
                    "6": "param_3"
                },
                "param_4": {
                    "1": "arg4",
                    "14": "param4",
                    "6": "param_4",
                    "4": "value2"
                },
                "extraout_r1": {
                    "1": "extra_output1",
                    "3": "temp_var1",
                    "4": "extra_output",
                    "2": "temp1"
                },
                "ppiVar1": {
                    "1": "new_head",
                    "4": "current_node",
                    "3": "temp_ptr1",
                    "2": "temp_var1"
                },
                "ppiVar2": {
                    "3": "next_node",
                    "1": "curr_node",
                    "2": "temp3"
                },
                "piVar3": {
                    "2": "temp4",
                    "1": "temp_node",
                    "4": "temp_var",
                    "3": "temp_var4"
                },
                "ppiVar4": {
                    "1": "pointer_4",
                    "2": "previous",
                    "3": "temp4"
                },
                "ppiVar5": {
                    "1": "ptr5",
                    "5": "new_node",
                    "3": "temp5",
                    "2": "temp_var6"
                },
                "FUNC_0800583c": {
                    "1": "init_data",
                    "3": "initialize_data"
                },
                "FUNC_0800583e": {
                    "1": "perform_operation"
                },
                "DAT_200002ac": {
                    "1": "global_data"
                }
            }
        },
        "FUN_08005714": {
            "entrypoint": "0x08005714",
            "current_name": "allocate_memory_block_08005714",
            "code": "\nuint allocate_memory_block_08005714(undefined4 *output_pointer,uint size)\n\n{\n  uint *current_block;\n  int difference;\n  uint *previous_block;\n  uint difference;\n  uint *previous_block;\n  uint allocated_size;\n  \n  allocated_size = (size + 3 & 0xfffffffc) + 8;\n  if (allocated_size < 0xc) {\n    allocated_size = 0xc;\n  }\n  if (((int)allocated_size < 0) || (allocated_size < size)) {\n    *output_pointer = 0xc;\n  }\n  else {\n    FUNC_0800583c();\n    current_block = DAT_200002ac;\n    previous_block = DAT_200002ac;\n    while (previous_block = current_block, previous_block != (uint *)0x0) {\n      difference = *previous_block - allocated_size;\n      if (-1 < (int)difference) {\n        if (difference < 0xc) {\n          if (previous_block == previous_block) {\n            current_block = (uint *)previous_block[1];\n            DAT_200002ac = current_block;\n          }\n          else {\n            current_block = (uint *)previous_block[1];\n          }\n          if (previous_block != previous_block) {\n            previous_block[1] = (uint)current_block;\n            previous_block = previous_block;\n          }\n        }\n        else {\n          *previous_block = difference;\n          *(uint *)((int)previous_block + difference) = allocated_size;\n          previous_block = (uint *)((int)previous_block + difference);\n        }\n        goto LAB_08005778;\n      }\n      previous_block = previous_block;\n      current_block = (uint *)previous_block[1];\n    }\n    if (DAT_200002b0 == 0) {\n      DAT_200002b0 = FUN_0800581c(output_pointer);\n    }\n    current_block = (uint *)FUN_0800581c(output_pointer,allocated_size);\n    if ((current_block != (uint *)0xffffffff) &&\n       ((previous_block = (uint *)((int)current_block + 3U & 0xfffffffc), current_block == previous_block ||\n        (difference = FUN_0800581c(output_pointer,(int)previous_block - (int)current_block), difference != -1)))) {\n      *previous_block = allocated_size;\nLAB_08005778:\n      FUNC_0800583e(output_pointer);\n      allocated_size = (int)previous_block + 0xbU & 0xfffffff8;\n      difference = allocated_size - (int)(previous_block + 1);\n      if (difference != 0) {\n        *(int *)((int)previous_block + difference) = -difference;\n        return allocated_size;\n      }\n      return allocated_size;\n    }\n    *output_pointer = 0xc;\n    FUNC_0800583e(output_pointer);\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08005714": "allocate_memory_block_08005714",
                "param_1": "output_pointer",
                "param_2": "size",
                "puVar1": "current_block",
                "iVar2": "difference",
                "puVar3": "previous_block",
                "uVar4": "difference",
                "puVar5": "previous_block",
                "uVar6": "allocated_size"
            },
            "calling": [
                "FUN_08005044",
                "FUN_080050fc",
                "FUN_080057d0"
            ],
            "called": [
                "FUN_0800583c",
                "FUN_0800581c",
                "FUN_0800583e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08005714": {
                    "14": "allocate_memory_block",
                    "11": "allocate_memory",
                    "1": "update_data"
                },
                "param_1": {
                    "6": "output_ptr",
                    "1": "memory_ptr",
                    "2": "result",
                    "9": "output_pointer",
                    "5": "output_buffer"
                },
                "param_2": {
                    "7": "input_size",
                    "1": "bytes_to_allocate",
                    "15": "size",
                    "4": "block_size"
                },
                "puVar1": {
                    "1": "temp_pointer",
                    "24": "current_block",
                    "2": "current_chunk"
                },
                "iVar2": {
                    "1": "chunk_size",
                    "2": "block_size_diff",
                    "4": "remaining_space",
                    "3": "offset",
                    "8": "difference",
                    "5": "block_size"
                },
                "puVar3": {
                    "1": "previous_block_ptr",
                    "13": "previous_block",
                    "10": "next_block",
                    "2": "next_chunk",
                    "3": "current_pointer"
                },
                "uVar4": {
                    "1": "space_difference",
                    "6": "block_difference",
                    "2": "block_size_diff",
                    "10": "difference"
                },
                "puVar5": {
                    "1": "previous_block_ptr_next",
                    "3": "new_block",
                    "10": "previous_block",
                    "2": "temp_block"
                },
                "uVar6": {
                    "3": "new_block_size",
                    "1": "required_size",
                    "14": "allocated_size"
                },
                "DAT_200002ac": {
                    "1": "first_pointer",
                    "2": "memory_list",
                    "5": "first_block"
                },
                "DAT_200002b0": {
                    "2": "memory_initialized",
                    "1": "memory_pool"
                },
                "FUNC_0800583c": {
                    "1": "initialize_memory_manager",
                    "6": "initialize_memory"
                },
                "FUN_0800581c": {
                    "2": "allocate_memory_block",
                    "1": "allocate_new_memory_block"
                },
                "FUNC_0800583e": {
                    "1": "clean_memory",
                    "3": "cleanup_memory"
                },
                "output_param": {
                    "1": "output_param"
                },
                "init_1": {
                    "1": "initialize_memory"
                },
                "find_free_block": {
                    "1": "find_free_block"
                },
                "initialize_memory": {
                    "1": "initialize_memory"
                },
                "puVar10": {
                    "1": "new_block"
                },
                "FUNC_0800581c": {
                    "1": "allocate_memory"
                }
            }
        },
        "FUN_080057d0": {
            "entrypoint": "0x080057d0",
            "current_name": "FUNC_080057d0",
            "code": "\nint FUNC_080057d0(undefined4 param_1,int param_2,uint param_3,undefined4 param_4)\n\n{\n  int iVar1;\n  uint uVar2;\n  \n  if (param_2 != 0) {\n    if (param_3 == 0) {\n      FUN_0800567c();\n      iVar1 = 0;\n    }\n    else {\n      uVar2 = FUN_08005840();\n      iVar1 = param_2;\n      if ((uVar2 < param_3) && (iVar1 = FUN_08005714(param_1,param_3), iVar1 != 0)) {\n        FUN_08005630(iVar1,param_2,param_3);\n        FUN_0800567c(param_1,param_2);\n      }\n    }\n    return iVar1;\n  }\n  iVar1 = FUN_08005714(param_1,param_3,param_3,param_4);\n  return iVar1;\n}\n\n",
            "renaming": {
                "FUN_080057d0": "FUNC_080057d0"
            },
            "calling": [
                "FUN_08005044"
            ],
            "called": [
                "FUN_0800567c",
                "FUN_08005714",
                "FUN_08005840",
                "FUN_08005630"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800581c": {
            "entrypoint": "0x0800581c",
            "current_name": "process_data_0800581c",
            "code": "\nvoid process_data_0800581c(int *result,undefined4 input_value)\n\n{\n  int result;\n  \n  DAT_2000169c = 0;\n  result = FUN_080072b8(input_value);\n  if ((result == -1) && (DAT_2000169c != 0)) {\n    *result = DAT_2000169c;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800581c": "process_data_0800581c",
                "param_1": "result",
                "param_2": "input_value",
                "iVar1": "result"
            },
            "calling": [
                "FUN_08005714"
            ],
            "called": [
                "FUN_080072b8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800581c": {
                    "1": "validate_and_save_result",
                    "3": "check_and_assign_value",
                    "2": "extract_error_code"
                },
                "param_1": {
                    "1": "value_pointer",
                    "2": "result_pointer",
                    "5": "output_value",
                    "3": "output",
                    "10": "result"
                },
                "param_2": {
                    "10": "input",
                    "1": "input_param",
                    "15": "input_value"
                },
                "iVar1": {
                    "1": "error_check_result",
                    "7": "return_value",
                    "2": "status",
                    "11": "result"
                },
                "DAT_2000169c": {
                    "1": "data_value"
                }
            }
        },
        "FUN_0800583c": {
            "entrypoint": "0x0800583c",
            "current_name": "FUNC_0800583c",
            "code": "\nvoid FUNC_0800583c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800583c": "FUNC_0800583c"
            },
            "calling": [
                "FUN_0800567c",
                "FUN_08005714"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800583e": {
            "entrypoint": "0x0800583e",
            "current_name": "FUNC_0800583e",
            "code": "\nvoid FUNC_0800583e(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800583e": "FUNC_0800583e"
            },
            "calling": [
                "FUN_0800567c",
                "FUN_08005714"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005840": {
            "entrypoint": "0x08005840",
            "current_name": "calculate_sum_08005840",
            "code": "\nint calculate_sum_08005840(undefined4 result,int array)\n\n{\n  int sum;\n  \n  sum = *(int *)(array + -4) + -4;\n  if (*(int *)(array + -4) < 0) {\n    sum = sum + *(int *)(array + sum);\n  }\n  return sum;\n}\n\n",
            "renaming": {
                "FUN_08005840": "calculate_sum_08005840",
                "param_1": "result",
                "param_2": "array",
                "iVar1": "sum"
            },
            "calling": [
                "FUN_080057d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08005840": {
                    "16": "calculate_sum",
                    "1": "sum_with_offset",
                    "9": "calculate_result"
                },
                "param_1": {
                    "4": "value",
                    "2": "param1",
                    "1": "fixed_offset",
                    "9": "result"
                },
                "param_2": {
                    "3": "array_index",
                    "2": "arr",
                    "9": "array",
                    "1": "base"
                },
                "iVar1": {
                    "1": "new_index",
                    "4": "updated_value",
                    "13": "sum",
                    "2": "updated_sum",
                    "7": "result"
                },
                "*(int *)(param_2 - 4)": {
                    "1": "array_length"
                },
                "*(int *)(param_2 + index)": {
                    "1": "offset"
                },
                "*(int *)(param_2 + -4)": {
                    "1": "array_size"
                },
                "*(int *)(param_2 + iVar1)": {
                    "1": "sum_array_value"
                }
            }
        },
        "FUN_08005854": {
            "entrypoint": "0x08005854",
            "current_name": "process_data_08005854",
            "code": "\nundefined8 process_data_08005854(undefined4 input_param1,undefined4 input_param2)\n\n{\n  int check_result;\n  undefined4 *ptr;\n  int *int_ptr;\n  undefined8 result;\n  undefined8 func_result;\n  undefined4 flag;\n  undefined *data_ptr;\n  undefined4 param_1_copy;\n  undefined4 param_2_copy;\n  undefined4 param_1_copy2;\n  undefined4 param_2_copy2;\n  undefined8 output;\n  int error_code;\n  \n  result = FUN_08005c70();\n  if (DAT_20000224 == -1) {\n    return result;\n  }\n  error_code = FUN_08000a04(input_param1,input_param2,input_param1,input_param2);\n  if (error_code != 0) {\n    return result;\n  }\n  func_result = FUNC_0800708c(input_param1,input_param2);\n  check_result = FUN_080009f0((int)func_result,(int)((ulonglong)func_result >> 0x20),0,0x3ff00000);\n  if (check_result == 0) {\n    return result;\n  }\n  flag = 1;\n  data_ptr = &DAT_080073ac;\n  param_1_copy = input_param1;\n  param_2_copy = input_param2;\n  param_1_copy2 = input_param1;\n  param_2_copy2 = input_param2;\n  output = FUN_080070a4(&DAT_0800737e);\n  if (DAT_20000224 != '\\x02') {\n    check_result = FUN_0800709e(&flag);\n    if (check_result != 0) goto LAB_080058d0;\n  }\n  ptr = (undefined4 *)FUN_080072ac();\n  *ptr = 0x21;\nLAB_080058d0:\n  if (error_code != 0) {\n    int_ptr = (int *)FUN_080072ac();\n    *int_ptr = error_code;\n  }\n  return output;\n}\n\n",
            "renaming": {
                "param_1": "input_param1",
                "param_2": "input_param2",
                "uVar4": "result",
                "uVar5": "func_result",
                "local_28": "error_code",
                "local_48": "flag",
                "local_44": "data_ptr",
                "local_40": "param_1_copy",
                "uStack_3c": "param_2_copy",
                "local_38": "param_1_copy2",
                "uStack_34": "param_2_copy2",
                "local_30": "output",
                "iVar1": "check_result",
                "puVar2": "ptr",
                "piVar3": "int_ptr",
                "FUN_08005854": "process_data_08005854"
            },
            "calling": [
                "FUN_08003330"
            ],
            "called": [
                "FUN_0800708c",
                "FUN_080072ac",
                "FUN_080070a4",
                "FUN_08005c70",
                "FUN_080009f0",
                "FUN_0800709e",
                "FUN_08000a04"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "param_1": {
                    "6": "input_param_1",
                    "8": "input1",
                    "1": "param1"
                },
                "param_2": {
                    "1": "arg2",
                    "8": "input_param2",
                    "6": "input_2"
                },
                "uVar4": {
                    "1": "return_val4",
                    "8": "return_value",
                    "15": "result"
                },
                "uVar5": {
                    "1": "conversion_result",
                    "2": "result",
                    "3": "processed_data",
                    "5": "func_result"
                },
                "local_28": {
                    "2": "result_code",
                    "1": "execution_result",
                    "16": "error_code",
                    "3": "status"
                },
                "local_48": {
                    "22": "flag",
                    "1": "initialized_flag",
                    "2": "is_valid"
                },
                "local_44": {
                    "1": "ptr_data",
                    "14": "data_ptr",
                    "2": "buffer"
                },
                "local_40": {
                    "1": "local_param1",
                    "6": "param_1_copy",
                    "3": "param1_copy",
                    "2": "param1_2",
                    "5": "param1"
                },
                "uStack_3c": {
                    "5": "param2",
                    "1": "var2",
                    "3": "param2_copy",
                    "6": "param_2_copy",
                    "2": "param2_2"
                },
                "local_38": {
                    "1": "param_1_copy_2",
                    "2": "param1_copy_2",
                    "5": "param_1_copy2",
                    "4": "param3"
                },
                "uStack_34": {
                    "5": "param_2_copy2",
                    "1": "data_4",
                    "2": "input_param_2_copy_2",
                    "4": "param4"
                },
                "local_30": {
                    "1": "operation_result",
                    "2": "output_result",
                    "4": "final_result",
                    "10": "output",
                    "5": "result"
                },
                "iVar1": {
                    "1": "comparison_result",
                    "5": "status",
                    "7": "check_result",
                    "6": "result"
                },
                "puVar2": {
                    "3": "pointer_var",
                    "1": "pointer_variable",
                    "4": "pointer",
                    "2": "result_ptr",
                    "8": "ptr"
                },
                "piVar3": {
                    "1": "pointer_3",
                    "8": "int_ptr",
                    "2": "ptr2"
                },
                "FUN_08005854": {
                    "5": "process_data",
                    "1": "validate_and_execute",
                    "2": "validate_and_execute_function",
                    "4": "validate_and_process_data"
                },
                "FUNC_0800708c": {
                    "1": "execute_operation"
                },
                "FUN_080072ac": {
                    "1": "get_memory_location",
                    "2": "get_memory"
                },
                "FUN_080070a4": {
                    "1": "create_output"
                },
                "FUN_08005c70": {
                    "1": "get_something"
                },
                "FUN_080009f0": {
                    "1": "check_condition"
                },
                "FUN_0800709e": {
                    "1": "execute_operation"
                },
                "FUN_08000a04": {
                    "1": "perform_operation"
                },
                "SIG_08005c70": {
                    "1": "get_value_1"
                },
                "DAT_20000224": {
                    "1": "constant_value"
                },
                "SIG_080070a4": {
                    "1": "get_value_2"
                },
                "local_49": {
                    "1": "constant_2"
                },
                "SIG_0800709e": {
                    "1": "check_flag"
                },
                "SIG_080072ac": {
                    "1": "get_pointer"
                },
                "*puVar2": {
                    "1": "pointer_var"
                },
                "*piVar3": {
                    "1": "pointer_var_2"
                },
                "SIG_080072ac_2": {
                    "1": "get_pointer_2"
                },
                "F_0800708c": {
                    "1": "validate_data"
                },
                "F_080009f0": {
                    "1": "check_data"
                },
                "F_080070a4": {
                    "1": "process_data2"
                },
                "F_080072ac": {
                    "1": "get_variable"
                }
            }
        },
        "thunk_FUN_08006070": {
            "entrypoint": "0x080058fc",
            "current_name": "calculate_result_thunk_08006070",
            "code": "\nundefined8 calculate_result_thunk_08006070(uint input1,uint input2,uint input3,uint input4)\n\n{\n  undefined4 result1;\n  uint result2;\n  uint result3;\n  int difference;\n  uint result5;\n  undefined8 result;\n  undefined8 temp_result;\n  \n  result5 = input4 & 0x7fffffff;\n  if ((0x7ff00000 < (result5 | (-input3 | input3) >> 0x1f)) ||\n     (result3 = input2 & 0x7fffffff, 0x7ff00000 < (result3 | (-input1 | input1) >> 0x1f))) {\n    result = FUN_0800016c(input1,input2,input3,input4,input4);\n    return result;\n  }\n  if ((input4 + 0xc0100000 | input3) == 0) {\n    result = FUN_08006d68();\n    return result;\n  }\n  result2 = (int)input4 >> 0x1e & 2U | input2 >> 0x1f;\n  if ((input1 | result3) == 0) {\n    if (result2 == 2) {\n      return 0x400921fb54442d18;\n    }\n    if (result2 != 3) {\n      return CONCAT44(input2,input1);\n    }\nLAB_0800613e:\n    result = 0xc00921fb54442d18;\n  }\n  else {\n    if ((input3 | result5) != 0) {\n      if (result5 == 0x7ff00000) {\n        if (result3 == 0x7ff00000) {\n          if (result2 == 2) {\n            return 0x4002d97c7f3321d2;\n          }\n          if (result2 == 3) {\n            return 0xc002d97c7f3321d2;\n          }\n          if (result2 != 1) {\n            return 0x3fe921fb54442d18;\n          }\n          return 0xbfe921fb54442d18;\n        }\n        if (result2 == 2) {\n          return 0x400921fb54442d18;\n        }\n        if (result2 != 3) {\n          if (result2 != 1) {\n            return 0;\n          }\n          return 0x8000000000000000;\n        }\n        goto LAB_0800613e;\n      }\n      if (result3 != 0x7ff00000) {\n        difference = (int)(result3 - result5) >> 0x14;\n        if (difference < 0x3d) {\n          if (((int)input4 < 0) && (difference + 0x3c < 0 != SCARRY4(difference,0x3c))) {\n            result = 0;\n          }\n          else {\n            FUN_08000724(input1,input2);\n            FUNC_0800708c();\n            result = FUN_08006d68();\n          }\n        }\n        else {\n          result = 0x3ff921fb54442d18;\n        }\n        difference = (int)((ulonglong)result >> 0x20);\n        result1 = (undefined4)result;\n        if (result2 == 1) {\n          return CONCAT44(difference + -0x80000000,result1);\n        }\n        if (result2 == 2) {\n          temp_result = FUN_08000168(result1,difference,0x33145c07,0x3ca1a626);\n          result = 0x400921fb54442d18;\n        }\n        else {\n          if (result2 == 0) {\n            return result;\n          }\n          result = FUN_08000168(result1,difference,0x33145c07,0x3ca1a626);\n          temp_result = 0x400921fb54442d18;\n        }\n        result = FUN_08000168((int)result,(int)((ulonglong)result >> 0x20),(int)temp_result,\n                             (int)((ulonglong)temp_result >> 0x20));\n        return result;\n      }\n    }\n    if ((int)input2 < 0) {\n      result = 0xbff921fb54442d18;\n    }\n    else {\n      result = 0x3ff921fb54442d18;\n    }\n  }\n  return result;\n}\n\n",
            "renaming": {
                "thunk_FUN_08006070": "calculate_result_thunk_08006070",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "result1",
                "uVar2": "result2",
                "uVar3": "result3",
                "uVar5": "result5",
                "iVar4": "difference",
                "uVar6": "result",
                "uVar7": "temp_result"
            },
            "calling": [
                "FUN_08003330"
            ],
            "called": [
                "FUN_08006070"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "thunk_FUN_08006070": {
                    "3": "calculate_value",
                    "1": "calculate_floating_point",
                    "5": "calculate_floating_point_value",
                    "10": "calculate_result"
                },
                "param_1": {
                    "4": "input_1",
                    "1": "input_a",
                    "3": "input_param_1",
                    "12": "input1"
                },
                "param_2": {
                    "2": "mantissa_bits1",
                    "12": "input2",
                    "1": "value2",
                    "3": "input_param_2",
                    "4": "input_2"
                },
                "param_3": {
                    "4": "input_3",
                    "1": "input_integer_3",
                    "3": "exponent_bits2",
                    "12": "input3"
                },
                "param_4": {
                    "1": "operand4",
                    "4": "input_4",
                    "2": "mantissa_bits2",
                    "3": "input_param_4",
                    "12": "input4"
                },
                "uVar1": {
                    "1": "floating_point_value1",
                    "3": "result_low",
                    "10": "result1",
                    "5": "result_1",
                    "2": "temp_var1"
                },
                "uVar2": {
                    "5": "result2",
                    "1": "temp2",
                    "2": "shifted_bits",
                    "4": "result_2"
                },
                "uVar3": {
                    "2": "temp1",
                    "1": "temp3",
                    "4": "result_3",
                    "5": "result3",
                    "3": "result2"
                },
                "uVar5": {
                    "1": "temp4",
                    "2": "result_5",
                    "5": "result5"
                },
                "iVar4": {
                    "1": "shift_count",
                    "3": "result_4",
                    "2": "temp2",
                    "7": "difference",
                    "5": "result4"
                },
                "uVar6": {
                    "1": "result_2",
                    "2": "output",
                    "9": "final_result",
                    "13": "result"
                },
                "uVar7": {
                    "7": "temp_result",
                    "1": "temp_var7",
                    "2": "output2",
                    "6": "intermediate_result"
                },
                "FUN_0800016c": {
                    "1": "handle_exception_case"
                },
                "FUN_08006d68": {
                    "1": "get_infinity"
                },
                "FUN_08000724": {
                    "1": "calculate_difference"
                },
                "FUNC_0800708c": {
                    "1": "do_something"
                },
                "FUN_08000168": {
                    "1": "calculate_product"
                },
                "uVar4": {
                    "1": "temp_var4"
                }
            }
        },
        "FUN_08005900": {
            "entrypoint": "0x08005900",
            "current_name": "process_data_08005900",
            "code": "\nundefined8 process_data_08005900(undefined4 input1,undefined4 input2,undefined4 input3,undefined4 input4)\n\n{\n  char flag;\n  int result;\n  int *result_ptr;\n  undefined4 *undefined4_ptr;\n  int temp_result;\n  undefined4 high_bits;\n  undefined4 low_bits;\n  undefined8 return_value;\n  undefined8 return_value2;\n  undefined4 status;\n  undefined *char_pointer;\n  undefined4 local_input1;\n  undefined4 local_input2;\n  undefined4 local_input3;\n  undefined4 local_input4;\n  undefined8 output;\n  int temp_value;\n  \n  return_value = FUN_08006228();\n  flag = DAT_20000224;\n  high_bits = (undefined4)((ulonglong)return_value >> 0x20);\n  low_bits = (undefined4)return_value;\n  if (DAT_20000224 == -1) {\n    return return_value;\n  }\n  result = FUN_08000a04(input3,input4,input3,input4);\n  if (result != 0) {\n    return return_value;\n  }\n  result = FUN_08000a04(input1,input2,input1,input2);\n  local_input1 = input1;\n  local_input2 = input2;\n  local_input3 = input3;\n  local_input4 = input4;\n  if (result == 0) {\n    result = FUN_080009a0(input1,input2,0,0);\n    if (result != 0) {\n      result = FUN_080009a0(input3,input4,0,0);\n      if (result != 0) {\n        status = 1;\n        char_pointer = &DAT_080073b1;\n        output = 0;\n        temp_value = 0;\n        if (flag != '\\0') {\n          output = 0x3ff0000000000000;\n          goto LAB_080059d0;\n        }\n        goto LAB_08005978;\n      }\n      result = FUN_08007092(input3,input4);\n      if (result == 0) {\n        return return_value;\n      }\n      result = FUN_080009b4(input3,input4,0,0);\n      if (result == 0) {\n        return return_value;\n      }\n      status = 1;\n      char_pointer = &DAT_080073b1;\n      temp_value = 0;\n      if (DAT_20000224 == '\\0') goto LAB_08005a22;\n      output = 0xfff0000000000000;\n      temp_value = 0;\n      flag = DAT_20000224;\nLAB_08005a32:\n      if (flag != '\\x02') goto LAB_08005978;\n      goto LAB_08005a34;\n    }\n    result = FUN_08007092(low_bits,high_bits);\n    if (((result != 0) || (temp_result = FUN_08007092(input1,input2), temp_result == 0)) ||\n       (temp_result = FUN_08007092(input3,input4), temp_result == 0)) {\n      result = FUN_080009a0(low_bits,high_bits,0,0);\n      if (result == 0) {\n        return return_value;\n      }\n      result = FUN_08007092(input1,input2);\n      if (result == 0) {\n        return return_value;\n      }\n      result = FUN_08007092(input3,input4);\n      if (result == 0) {\n        return return_value;\n      }\n      status = 4;\n      char_pointer = &DAT_080073b1;\n      temp_value = 0;\n      output._0_4_ = 0;\n      output._4_4_ = 0;\n      goto LAB_08005afa;\n    }\n    temp_value = FUN_08000a04(low_bits,high_bits);\n    flag = DAT_20000224;\n    if (temp_value != 0) {\n      char_pointer = &DAT_080073b1;\n      status = 1;\n      temp_value = result;\n      if (DAT_20000224 != '\\0') {\n        output = FUN_08000724(0,0,0,0);\n        goto LAB_08005a32;\n      }\nLAB_08005a22:\n      char_pointer = &DAT_080073b1;\n      status = 1;\n      output = 0;\n      goto LAB_08005978;\n    }\n    char_pointer = &DAT_080073b1;\n    status = 3;\n    if (DAT_20000224 == '\\0') {\n      output._0_4_ = 0xe0000000;\n      output._4_4_ = 0x47efffff;\n      result = FUN_080009b4(input1,input2,0,0);\n      if (result != 0) {\n        return_value = FUN_080004d0(input3,input4,0,0x3fe00000);\n        return_value2 = FUN_080070b0();\n        result = FUN_080009a0((int)return_value,(int)((ulonglong)return_value >> 0x20),(int)return_value2,\n                             (int)((ulonglong)return_value2 >> 0x20));\n        if (result == 0) {\n          output._0_4_ = 0xe0000000;\n          output._4_4_ = 0xc7efffff;\n        }\n        goto LAB_08005afa;\n      }\nLAB_08005b98:\n      result = FUN_0800709e(&status);\n      if (result != 0) goto LAB_080059d0;\n    }\n    else {\n      output._0_4_ = 0;\n      output._4_4_ = 0x7ff00000;\n      result = FUN_080009b4(input1,input2,0,0);\n      if (result != 0) {\n        return_value = FUN_080004d0(input3,input4,0,0x3fe00000);\n        return_value2 = FUN_080070b0();\n        result = FUN_080009a0((int)return_value,(int)((ulonglong)return_value >> 0x20),(int)return_value2,\n                             (int)((ulonglong)return_value2 >> 0x20));\n        if (result == 0) {\n          output._0_4_ = 0;\n          output._4_4_ = 0xfff00000;\n        }\n      }\nLAB_08005afa:\n      if (DAT_20000224 != '\\x02') goto LAB_08005b98;\n    }\n    undefined4_ptr = (undefined4 *)FUN_080072ac();\n    low_bits = 0x22;\n  }\n  else {\n    result = FUN_080009a0(input3,input4,0,0);\n    if (result == 0) {\n      return return_value;\n    }\n    status = 1;\n    char_pointer = &DAT_080073b1;\n    output = 0x3ff0000000000000;\n    temp_value = 0;\n    if (flag == '\\x02') {\n      return 0x3ff0000000000000;\n    }\nLAB_08005978:\n    result = FUN_0800709e(&status);\n    if (result != 0) goto LAB_080059d0;\nLAB_08005a34:\n    undefined4_ptr = (undefined4 *)FUN_080072ac();\n    low_bits = 0x21;\n  }\n  *undefined4_ptr = low_bits;\nLAB_080059d0:\n  if (temp_value != 0) {\n    result_ptr = (int *)FUN_080072ac();\n    *result_ptr = temp_value;\n  }\n  return output;\n}\n\n",
            "renaming": {
                "FUN_08005900": "process_data_08005900",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "cVar1": "flag",
                "iVar2": "result",
                "piVar3": "result_ptr",
                "puVar4": "undefined4_ptr",
                "iVar5": "temp_result",
                "uVar6": "high_bits",
                "uVar7": "low_bits",
                "uVar8": "return_value",
                "uVar9": "return_value2",
                "local_50": "status",
                "local_4c": "char_pointer",
                "local_48": "local_input1",
                "uStack_44": "local_input2",
                "local_40": "local_input3",
                "uStack_3c": "local_input4",
                "local_38": "output",
                "local_30": "temp_value"
            },
            "calling": [
                "FUN_0800411c"
            ],
            "called": [
                "FUN_080004d0",
                "FUN_08007092",
                "FUN_080072ac",
                "FUN_080070b0",
                "FUN_08006228",
                "FUN_080009a0",
                "FUN_08000724",
                "FUN_080009b4",
                "FUN_0800709e",
                "FUN_08000a04"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08005900": {
                    "1": "perform_operation",
                    "2": "process_data"
                },
                "param_1": {
                    "4": "input_1",
                    "1": "operand1",
                    "2": "input_param_1",
                    "20": "input1"
                },
                "param_2": {
                    "20": "input2",
                    "1": "input_value_2",
                    "2": "input_param_2",
                    "4": "input_2"
                },
                "param_3": {
                    "4": "input_3",
                    "2": "input_param_3",
                    "1": "argument_3",
                    "20": "input3"
                },
                "param_4": {
                    "4": "input_4",
                    "2": "input_param_4",
                    "1": "temp2",
                    "20": "input4"
                },
                "cVar1": {
                    "19": "flag",
                    "1": "data_flag",
                    "2": "char_var"
                },
                "iVar2": {
                    "2": "int_var",
                    "1": "result_1",
                    "24": "result"
                },
                "piVar3": {
                    "1": "pointer_1",
                    "3": "pointer",
                    "5": "int_ptr",
                    "4": "ptr_result",
                    "2": "pointer_result",
                    "8": "result_ptr"
                },
                "puVar4": {
                    "1": "ptr_var",
                    "3": "ptr_value",
                    "2": "result_ptr",
                    "4": "undefined4_ptr"
                },
                "iVar5": {
                    "6": "temp_result",
                    "1": "second_result",
                    "2": "result_2",
                    "5": "result2",
                    "3": "comparison_result"
                },
                "uVar6": {
                    "1": "u_var_temp1",
                    "2": "upper_part",
                    "6": "upper_bits",
                    "9": "high_bits"
                },
                "uVar7": {
                    "2": "lower_part",
                    "1": "u_var_temp2",
                    "6": "lower_bits",
                    "9": "low_bits"
                },
                "uVar8": {
                    "18": "return_value",
                    "1": "return_val1",
                    "3": "result"
                },
                "uVar9": {
                    "3": "temp_return_value",
                    "1": "temporary_value",
                    "2": "result2",
                    "5": "return_value2"
                },
                "local_50": {
                    "7": "status",
                    "1": "is_condition_met",
                    "3": "flag1",
                    "2": "flag2"
                },
                "local_4c": {
                    "1": "pointer3",
                    "2": "local_ptr",
                    "3": "message_ptr"
                },
                "local_48": {
                    "1": "local_param1",
                    "5": "local_var1",
                    "2": "var1",
                    "7": "local_input1"
                },
                "uStack_44": {
                    "5": "local_var2",
                    "1": "input_value_2_copy",
                    "4": "input2_copy",
                    "6": "local_input2",
                    "2": "var2"
                },
                "local_40": {
                    "2": "local_var_3",
                    "1": "input3_local",
                    "5": "local_var3",
                    "7": "local_input3"
                },
                "uStack_3c": {
                    "2": "var4",
                    "1": "input_value_4_copy",
                    "6": "local_input4",
                    "4": "input4_copy",
                    "5": "local_var4"
                },
                "local_38": {
                    "1": "result_temp",
                    "4": "output",
                    "2": "final_result"
                },
                "local_30": {
                    "2": "local_var_5",
                    "4": "local_result",
                    "1": "int_val",
                    "3": "local_var5"
                },
                "DAT_20000224": {
                    "1": "constant_flag"
                },
                "DAT_080073b1": {
                    "1": "constant_value_1"
                },
                "0x20": {
                    "1": "bit_shift_value_1"
                },
                "0x3ff0000000000000": {
                    "1": "constant_value_2"
                },
                "'\\0'": {
                    "1": "character_null"
                },
                "'\\x02'": {
                    "1": "character_2"
                },
                "FUN_08006228": {
                    "1": "perform_operation"
                },
                "FUN_08000a04": {
                    "1": "check_operation_result"
                },
                "FUN_080009a0": {
                    "1": "check_conversion_result_1"
                },
                "FUN_08007092": {
                    "1": "check_conversion_result_2"
                },
                "FUN_080009b4": {
                    "1": "check_conversion_result_3"
                },
                "FUN_080004d0": {
                    "1": "perform_calculation_1"
                },
                "FUN_080070b0": {
                    "1": "perform_calculation_2"
                },
                "FUN_08000724": {
                    "1": "perform_calculation_3"
                },
                "FUN_0800709e": {
                    "1": "perform_calculation_4"
                }
            }
        },
        "FUN_08005bc8": {
            "entrypoint": "0x08005bc8",
            "current_name": "process_data_08005bc8",
            "code": "\nundefined8 process_data_08005bc8(undefined4 input_param1,undefined4 input_param2)\n\n{\n  char condition;\n  int return_value;\n  int *pointer_to_result;\n  undefined4 *uint_ptr;\n  undefined8 result;\n  undefined4 flag;\n  undefined *message;\n  undefined4 param1_copy;\n  undefined4 param2_copy;\n  undefined4 param1_copy2;\n  undefined4 param2_copy2;\n  undefined8 result;\n  int error_code;\n  \n  result = FUN_08006c0c();\n  condition = DAT_20000224;\n  if (DAT_20000224 == -1) {\n    return result;\n  }\n  error_code = FUN_08000a04(input_param1,input_param2,input_param1,input_param2);\n  if (error_code != 0) {\n    return result;\n  }\n  return_value = FUN_080009b4(input_param1,input_param2,0,0);\n  if (return_value == 0) {\n    return result;\n  }\n  flag = 1;\n  message = &DAT_080073b5;\n  param1_copy = input_param1;\n  param2_copy = input_param2;\n  param1_copy2 = input_param1;\n  param2_copy2 = input_param2;\n  if (condition == '\\0') {\n    result = 0;\nLAB_08005c26:\n    return_value = FUN_0800709e(&flag);\n    if (return_value != 0) goto LAB_08005c2e;\n  }\n  else {\n    result = FUN_08000724(0,0,0,0);\n    if (condition != '\\x02') goto LAB_08005c26;\n  }\n  uint_ptr = (undefined4 *)FUN_080072ac();\n  *uint_ptr = 0x21;\nLAB_08005c2e:\n  if (error_code != 0) {\n    pointer_to_result = (int *)FUN_080072ac();\n    *pointer_to_result = error_code;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08005bc8": "process_data_08005bc8",
                "param_1": "input_param1",
                "param_2": "input_param2",
                "cVar1": "condition",
                "uVar5": "result",
                "local_50": "flag",
                "local_4c": "message",
                "local_48": "param1_copy",
                "uStack_44": "param2_copy",
                "local_40": "param1_copy2",
                "uStack_3c": "param2_copy2",
                "local_38": "result",
                "local_30": "error_code",
                "iVar2": "return_value",
                "piVar3": "pointer_to_result",
                "puVar4": "uint_ptr"
            },
            "calling": [
                "FUN_08003330"
            ],
            "called": [
                "FUN_080072ac",
                "FUN_08006c0c",
                "FUN_08000724",
                "FUN_080009b4",
                "FUN_0800709e",
                "FUN_08000a04"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08005bc8": {
                    "2": "perform_operation",
                    "1": "validate_and_process_input",
                    "5": "process_data",
                    "4": "check_and_process_data"
                },
                "param_1": {
                    "2": "input_1",
                    "1": "input_value_1",
                    "10": "input_param1",
                    "8": "input_param_1",
                    "9": "input1"
                },
                "param_2": {
                    "9": "input2",
                    "10": "input_param2",
                    "1": "input_parameter2",
                    "8": "input_param_2",
                    "2": "input_2"
                },
                "cVar1": {
                    "3": "flag2",
                    "1": "flag_value",
                    "7": "condition",
                    "2": "condition_variable"
                },
                "uVar5": {
                    "19": "result",
                    "4": "return_value",
                    "1": "return_value2"
                },
                "local_50": {
                    "21": "flag",
                    "1": "value1",
                    "2": "counter"
                },
                "local_4c": {
                    "3": "data_ptr",
                    "1": "char_array",
                    "2": "data_pointer",
                    "12": "message"
                },
                "local_48": {
                    "4": "param_1_copy",
                    "1": "local_param1",
                    "5": "input1_copy",
                    "2": "temp_1",
                    "8": "param1_copy",
                    "3": "param1"
                },
                "uStack_44": {
                    "3": "input2_copy",
                    "1": "input_2",
                    "4": "param_2_copy",
                    "7": "param2_copy",
                    "2": "temp_2"
                },
                "local_40": {
                    "3": "param3",
                    "1": "param_1_copy_2",
                    "2": "temp_param3",
                    "4": "input1_copy2",
                    "6": "param1_copy2"
                },
                "uStack_3c": {
                    "5": "param2_copy2",
                    "3": "param4",
                    "2": "temp_4",
                    "1": "local_param4"
                },
                "local_38": {
                    "3": "return_value",
                    "1": "output_result",
                    "4": "output_value",
                    "2": "final_result",
                    "8": "output",
                    "9": "result"
                },
                "local_30": {
                    "2": "local_result",
                    "4": "return_value",
                    "1": "local_var1",
                    "15": "error_code",
                    "3": "status"
                },
                "FUN_08006c0c": {
                    "1": "get_data_size",
                    "4": "get_initial_value"
                },
                "DAT_20000224": {
                    "1": "version"
                },
                "FUN_08000a04": {
                    "1": "calculate_result"
                },
                "FUN_080009b4": {
                    "1": "is_condition_met",
                    "2": "perform_operation"
                },
                "FUN_0800709e": {
                    "1": "check_flag",
                    "3": "process_data",
                    "2": "perform_operation"
                },
                "FUN_08000724": {
                    "1": "execute_operation",
                    "2": "process_data"
                },
                "FUN_080072ac": {
                    "3": "get_memory_location",
                    "2": "get_pointer",
                    "1": "get_memory_address"
                },
                "iVar2": {
                    "1": "temp_var1",
                    "4": "return_value",
                    "2": "result"
                },
                "piVar3": {
                    "2": "error_code_ptr",
                    "1": "result_pointer"
                },
                "puVar4": {
                    "1": "value_ptr",
                    "2": "uint_ptr"
                },
                "DAT_080073b5": {
                    "1": "constant"
                },
                "local_9c": {
                    "1": "constant_value_1"
                },
                "local_a0": {
                    "1": "constant_value_2"
                },
                "local_a4": {
                    "1": "constant_value_3"
                },
                "local_a8": {
                    "1": "constant_value_4"
                },
                "FUM_080072ac": {
                    "1": "update_value"
                },
                "FUM_08006c0c": {
                    "1": "calculate_checksum"
                },
                "FUM_08000724": {
                    "1": "perform_operation"
                },
                "FUM_080009b4": {
                    "1": "check_validity"
                },
                "FUM_0800709e": {
                    "1": "execute_operation"
                },
                "FUM_08000a04": {
                    "1": "do_something"
                }
            }
        },
        "FUN_08005c70": {
            "entrypoint": "0x08005c70",
            "current_name": "calculate_result_08005c70",
            "code": "\nundefined8 calculate_result_08005c70(uint input1,uint input2)\n\n{\n  int result;\n  undefined4 temp1;\n  undefined4 temp2;\n  undefined4 temp3;\n  undefined4 temp4;\n  undefined4 temp5;\n  undefined4 temp6;\n  uint temp8;\n  undefined8 result;\n  undefined8 temp_result1;\n  undefined8 temp_result2;\n  \n  result = CONCAT44(input2,input1);\n  temp8 = input2 & 0x7fffffff;\n  if (temp8 < 0x3ff00000) {\n    if (temp8 < 0x3fe00000) {\n      if (0x3e3fffff < temp8) {\n        temp_result1 = FUN_080004d0(input1,input2,input1,input2);\n        temp6 = (undefined4)((ulonglong)temp_result1 >> 0x20);\n        temp5 = (undefined4)temp_result1;\n        temp_result1 = FUN_080004d0(temp5,temp6,0xdfdf709,0x3f023de1);\n        temp_result1 = FUN_0800016c((int)temp_result1,(int)((ulonglong)temp_result1 >> 0x20),0x7501b288,0x3f49efe0);\n        temp_result1 = FUN_080004d0((int)temp_result1,(int)((ulonglong)temp_result1 >> 0x20),temp5,temp6);\n        temp_result1 = FUN_08000168((int)temp_result1,(int)((ulonglong)temp_result1 >> 0x20),0xb5688f3b,0x3fa48228);\n        temp_result1 = FUN_080004d0((int)temp_result1,(int)((ulonglong)temp_result1 >> 0x20),temp5,temp6);\n        temp_result1 = FUN_0800016c((int)temp_result1,(int)((ulonglong)temp_result1 >> 0x20),0xe884455,0x3fc9c155);\n        temp_result1 = FUN_080004d0((int)temp_result1,(int)((ulonglong)temp_result1 >> 0x20),temp5,temp6);\n        temp_result1 = FUN_08000168((int)temp_result1,(int)((ulonglong)temp_result1 >> 0x20),0x3eb6f7d,0x3fd4d612);\n        temp_result1 = FUN_080004d0((int)temp_result1,(int)((ulonglong)temp_result1 >> 0x20),temp5,temp6);\n        temp_result1 = FUN_0800016c((int)temp_result1,(int)((ulonglong)temp_result1 >> 0x20),0x55555555,0x3fc55555);\n        temp_result1 = FUN_080004d0((int)temp_result1,(int)((ulonglong)temp_result1 >> 0x20),temp5,temp6);\n        temp_result2 = FUN_080004d0(temp5,temp6,0xb12e9282,0x3fb3b8c5);\n        temp_result2 = FUN_08000168((int)temp_result2,(int)((ulonglong)temp_result2 >> 0x20),0x1b8d0159,0x3fe6066c);\n        temp_result2 = FUN_080004d0((int)temp_result2,(int)((ulonglong)temp_result2 >> 0x20),temp5,temp6);\n        temp_result2 = FUN_0800016c((int)temp_result2,(int)((ulonglong)temp_result2 >> 0x20),0x9c598ac8,0x40002ae5);\n        temp_result2 = FUN_080004d0((int)temp_result2,(int)((ulonglong)temp_result2 >> 0x20),temp5,temp6);\n        temp_result2 = FUN_08000168((int)temp_result2,(int)((ulonglong)temp_result2 >> 0x20),0x1c8a2d4b,0x40033a27);\n        temp_result2 = FUN_080004d0((int)temp_result2,(int)((ulonglong)temp_result2 >> 0x20),temp5,temp6);\n        temp_result2 = FUN_0800016c((int)temp_result2,(int)((ulonglong)temp_result2 >> 0x20),0,0x3ff00000);\n        temp_result1 = FUN_08000724((int)temp_result1,(int)((ulonglong)temp_result1 >> 0x20),(int)temp_result2,\n                              (int)((ulonglong)temp_result2 >> 0x20));\n        temp_result1 = FUN_080004d0((int)temp_result1,(int)((ulonglong)temp_result1 >> 0x20),input1,input2);\n        goto LAB_08005cba;\n      }\n      temp_result1 = FUN_0800016c(input1,input2,0x8800759c,0x7e37e43c);\n      result = FUN_080009f0((int)temp_result1,(int)((ulonglong)temp_result1 >> 0x20),0,0x3ff00000);\n      if (result != 0) {\n        return result;\n      }\n    }\n    result = FUNC_0800708c(input1,input2);\n    result = FUN_08000168(0,0x3ff00000,(int)result,(int)((ulonglong)result >> 0x20));\n    result = FUN_080004d0((int)result,(int)((ulonglong)result >> 0x20),0,0x3fe00000);\n    temp1 = (undefined4)((ulonglong)result >> 0x20);\n    temp5 = (undefined4)result;\n    result = FUN_080004d0(temp5,temp1,0xdfdf709,0x3f023de1);\n    result = FUN_0800016c((int)result,(int)((ulonglong)result >> 0x20),0x7501b288,0x3f49efe0);\n    result = FUN_080004d0((int)result,(int)((ulonglong)result >> 0x20),temp5,temp1);\n    result = FUN_08000168((int)result,(int)((ulonglong)result >> 0x20),0xb5688f3b,0x3fa48228);\n    result = FUN_080004d0((int)result,(int)((ulonglong)result >> 0x20),temp5,temp1);\n    result = FUN_0800016c((int)result,(int)((ulonglong)result >> 0x20),0xe884455,0x3fc9c155);\n    result = FUN_080004d0((int)result,(int)((ulonglong)result >> 0x20),temp5,temp1);\n    result = FUN_08000168((int)result,(int)((ulonglong)result >> 0x20),0x3eb6f7d,0x3fd4d612);\n    result = FUN_080004d0((int)result,(int)((ulonglong)result >> 0x20),temp5,temp1);\n    result = FUN_0800016c((int)result,(int)((ulonglong)result >> 0x20),0x55555555,0x3fc55555);\n    result = FUN_080004d0((int)result,(int)((ulonglong)result >> 0x20),temp5,temp1);\n    temp2 = (undefined4)((ulonglong)result >> 0x20);\n    temp_result1 = FUN_080004d0(temp5,temp1,0xb12e9282,0x3fb3b8c5);\n    temp_result1 = FUN_08000168((int)temp_result1,(int)((ulonglong)temp_result1 >> 0x20),0x1b8d0159,0x3fe6066c);\n    temp_result1 = FUN_080004d0((int)temp_result1,(int)((ulonglong)temp_result1 >> 0x20),temp5,temp1);\n    temp_result1 = FUN_0800016c((int)temp_result1,(int)((ulonglong)temp_result1 >> 0x20),0x9c598ac8,0x40002ae5);\n    temp_result1 = FUN_080004d0((int)temp_result1,(int)((ulonglong)temp_result1 >> 0x20),temp5,temp1);\n    temp_result1 = FUN_08000168((int)temp_result1,(int)((ulonglong)temp_result1 >> 0x20),0x1c8a2d4b,0x40033a27);\n    temp_result1 = FUN_080004d0((int)temp_result1,(int)((ulonglong)temp_result1 >> 0x20),temp5,temp1);\n    temp_result1 = FUN_0800016c((int)temp_result1,(int)((ulonglong)temp_result1 >> 0x20),0,0x3ff00000);\n    temp3 = (undefined4)((ulonglong)temp_result1 >> 0x20);\n    temp_result2 = FUN_08006c0c(temp5,temp1);\n    temp4 = (undefined4)((ulonglong)temp_result2 >> 0x20);\n    temp6 = (undefined4)temp_result2;\n    if (temp8 < 0x3fef3333) {\n      result = FUN_08000724((int)result,temp2,(int)temp_result1,temp3);\n      temp_result1 = FUN_0800016c(temp6,temp4,temp6,temp4);\n      result = FUN_080004d0((int)result,(int)((ulonglong)result >> 0x20),(int)temp_result1,\n                           (int)((ulonglong)temp_result1 >> 0x20));\n      temp_result1 = FUN_080004d0(0,temp4,0,temp4);\n      temp_result1 = FUN_08000168(temp5,temp1,(int)temp_result1,(int)((ulonglong)temp_result1 >> 0x20));\n      temp_result2 = FUN_0800016c(temp6,temp4,0,temp4);\n      temp_result1 = FUN_08000724((int)temp_result1,(int)((ulonglong)temp_result1 >> 0x20),(int)temp_result2,\n                            (int)((ulonglong)temp_result2 >> 0x20));\n      temp5 = (undefined4)((ulonglong)temp_result1 >> 0x20);\n      temp_result1 = FUN_0800016c((int)temp_result1,temp5,(int)temp_result1,temp5);\n      temp_result1 = FUN_08000168(0x33145c07,0x3c91a626,(int)temp_result1,(int)((ulonglong)temp_result1 >> 0x20));\n      result = FUN_08000168((int)result,(int)((ulonglong)result >> 0x20),(int)temp_result1,\n                           (int)((ulonglong)temp_result1 >> 0x20));\n      temp_result1 = FUN_0800016c(0,temp4,0,temp4);\n      temp_result1 = FUN_08000168(0x54442d18,0x3fe921fb,(int)temp_result1,(int)((ulonglong)temp_result1 >> 0x20));\n      result = FUN_08000168((int)result,(int)((ulonglong)result >> 0x20),(int)temp_result1,\n                           (int)((ulonglong)temp_result1 >> 0x20));\n      temp5 = 0x3fe921fb;\n    }\n    else {\n      result = FUN_08000724((int)result,temp2,(int)temp_result1,temp3);\n      result = FUN_080004d0((int)result,(int)((ulonglong)result >> 0x20),temp6,temp4);\n      result = FUN_0800016c((int)result,(int)((ulonglong)result >> 0x20),temp6,temp4);\n      temp5 = (undefined4)((ulonglong)result >> 0x20);\n      result = FUN_0800016c((int)result,temp5,(int)result,temp5);\n      result = FUN_08000168((int)result,(int)((ulonglong)result >> 0x20),0x33145c07,0x3c91a626);\n      temp5 = 0x3ff921fb;\n    }\n    result = FUN_08000168(0x54442d18,temp5,(int)result,(int)((ulonglong)result >> 0x20));\n    if ((int)input2 < 1) {\n      result = CONCAT44((int)((ulonglong)result >> 0x20) + -0x80000000,(int)result);\n    }\n  }\n  else {\n    if ((temp8 + 0xc0100000 | input1) != 0) {\n      result = FUN_08000168(input1,input2,input1,input2);\n      temp5 = (undefined4)((ulonglong)result >> 0x20);\n      result = FUN_08000724((int)result,temp5,(int)result,temp5);\n      return result;\n    }\n    result = FUN_080004d0(input1,input2,0x54442d18,0x3ff921fb);\n    temp_result1 = FUN_080004d0(input1,input2,0x33145c07,0x3c91a626);\nLAB_08005cba:\n    result = FUN_0800016c((int)result,(int)((ulonglong)result >> 0x20),(int)temp_result1,\n                         (int)((ulonglong)temp_result1 >> 0x20));\n  }\n  return result;\n}\n\n",
            "renaming": {
                "param_1": "input1",
                "param_2": "input2",
                "iVar1": "result",
                "uVar2": "temp1",
                "uVar3": "temp2",
                "uVar4": "temp3",
                "uVar5": "temp4",
                "uVar6": "temp5",
                "uVar7": "temp6",
                "uVar8": "temp8",
                "uVar9": "result",
                "uVar10": "temp_result1",
                "uVar11": "temp_result2",
                "FUN_08005c70": "calculate_result_08005c70",
                "uVar1": "temp1"
            },
            "calling": [
                "FUN_08005854"
            ],
            "called": [
                "FUN_080004d0",
                "FUN_0800708c",
                "FUN_08006c0c",
                "FUN_08000168",
                "FUN_080009f0",
                "FUN_08000724",
                "FUN_0800016c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "param_1": {
                    "1": "input_num1",
                    "7": "input_1",
                    "14": "input1",
                    "3": "numerator"
                },
                "param_2": {
                    "14": "input2",
                    "1": "input_value_2",
                    "3": "denominator",
                    "7": "input_2"
                },
                "iVar1": {
                    "1": "comparison",
                    "3": "comparison_result",
                    "14": "result"
                },
                "uVar2": {
                    "2": "temp_var_2",
                    "1": "result_1",
                    "11": "temp1",
                    "4": "temp2",
                    "3": "temp_var1"
                },
                "uVar3": {
                    "1": "value2",
                    "2": "temp_var_3",
                    "3": "temp_var2",
                    "4": "temp3",
                    "11": "temp2"
                },
                "uVar4": {
                    "3": "temp_var3",
                    "4": "temp4",
                    "2": "temp_var_4",
                    "1": "temp_var4",
                    "11": "temp3"
                },
                "uVar5": {
                    "4": "temp_4",
                    "1": "temp_variable4",
                    "2": "temp_var_5",
                    "3": "temp_var4",
                    "11": "temp4"
                },
                "uVar6": {
                    "11": "temp5",
                    "4": "temp_5",
                    "3": "temp_var5",
                    "1": "temp_variable_5",
                    "2": "temp_var_6"
                },
                "uVar7": {
                    "4": "temp7",
                    "1": "temp2",
                    "11": "temp6",
                    "2": "temp_var_7",
                    "3": "temp_var6"
                },
                "uVar8": {
                    "1": "fractional_part_mask",
                    "3": "abs_denominator",
                    "4": "temp8",
                    "2": "absolute_value"
                },
                "uVar9": {
                    "1": "output_var1",
                    "3": "result_1",
                    "5": "final_result",
                    "4": "output",
                    "13": "result"
                },
                "uVar10": {
                    "4": "temp_result_1",
                    "6": "temp_result1",
                    "1": "temp_output1",
                    "3": "result_2",
                    "2": "temp_result2"
                },
                "uVar11": {
                    "4": "temp_result_2",
                    "1": "output_var3",
                    "3": "result_3",
                    "2": "temp_result3",
                    "6": "temp_result2"
                },
                "FUN_08005c70": {
                    "1": "calculate_fn",
                    "2": "calculate_floating_point",
                    "13": "calculate_result"
                },
                "uVar1": {
                    "1": "combined_params",
                    "4": "temp1",
                    "2": "result"
                },
                "FUNC_0800708c": {
                    "1": "perform_function"
                },
                "FUN_080004d0": {
                    "1": "perform_operation"
                },
                "FUN_08006c0c": {
                    "1": "fun_b"
                },
                "FUN_08000168": {
                    "1": "combine_numbers"
                },
                "FUN_08000724": {
                    "1": "perform_calculation"
                },
                "FUN_0800016c": {
                    "1": "merge_values",
                    "2": "perform_operation"
                },
                "FUN_080009f0": {
                    "1": "is_not_zero",
                    "5": "check_condition"
                },
                "FUN_0800708c": {
                    "1": "fun_a"
                },
                "uVar12": {
                    "1": "result4"
                },
                "uVar13": {
                    "1": "temp_high3"
                },
                "uVar14": {
                    "1": "temp_low2"
                },
                "uVar15": {
                    "1": "temp_high4"
                },
                "uVar16": {
                    "1": "temp_low3"
                },
                "uVar17": {
                    "1": "temp_result5"
                },
                "uVar18": {
                    "1": "temp_result6"
                },
                "uVar19": {
                    "1": "temp_high5"
                },
                "uVar20": {
                    "1": "temp_low4"
                },
                "uVar21": {
                    "1": "temp_result7"
                },
                "0x7fffffff": {
                    "1": "mask_31_bits"
                },
                "0x3ff00000": {
                    "1": "const_s"
                },
                "0x3fe00000": {
                    "1": "limit_2"
                },
                "0x3e3fffff": {
                    "1": "limit_3"
                },
                "0x3fef3333": {
                    "1": "limit_4"
                },
                "0x3fff3333": {
                    "1": "limit_5"
                },
                "0xc0100000": {
                    "1": "mask_30_bits"
                },
                "0xdfdf709": {
                    "1": "const_a"
                },
                "0x3f023de1": {
                    "1": "const_b"
                },
                "0x7501b288": {
                    "1": "const_c"
                },
                "0x3f49efe0": {
                    "1": "const_d"
                },
                "0xb5688f3b": {
                    "1": "const_e"
                },
                "0x3fa48228": {
                    "1": "const_f"
                },
                "0xe884455": {
                    "1": "const_g"
                },
                "0x3fc9c155": {
                    "1": "const_h"
                },
                "0x3eb6f7d": {
                    "1": "const_i"
                },
                "0x3fd4d612": {
                    "1": "const_j"
                },
                "0x3fc55555": {
                    "1": "const_k"
                },
                "0xb12e9282": {
                    "1": "const_l"
                },
                "0x3fb3b8c5": {
                    "1": "const_m"
                },
                "0x1b8d0159": {
                    "1": "const_n"
                },
                "0x3fe6066c": {
                    "1": "const_o"
                },
                "0x1c8a2d4b": {
                    "1": "const_p"
                },
                "0x40002ae5": {
                    "1": "const_q"
                },
                "0x40033a27": {
                    "1": "const_r"
                },
                "0x8800759c": {
                    "1": "const_t"
                },
                "0x54442d18": {
                    "1": "const_u"
                },
                "0x3fe921fb": {
                    "1": "const_v"
                },
                "0x33145c07": {
                    "1": "const_w"
                },
                "0x3c91a626": {
                    "1": "const_x"
                },
                "0x7e37e43c": {
                    "1": "const_y"
                },
                "0x3ff921fb": {
                    "1": "const_z"
                }
            }
        },
        "FUN_08006070": {
            "entrypoint": "0x08006070",
            "current_name": "calculate_floating_point_value_08006070",
            "code": "\nundefined8 calculate_floating_point_value_08006070(uint input1,uint input2,uint input3,uint input4)\n\n{\n  undefined4 result1;\n  uint temp2;\n  uint temp3;\n  int difference;\n  uint temp5;\n  undefined8 result;\n  undefined8 temp_result;\n  \n  temp5 = input4 & 0x7fffffff;\n  if ((0x7ff00000 < (temp5 | (-input3 | input3) >> 0x1f)) ||\n     (temp3 = input2 & 0x7fffffff, 0x7ff00000 < (temp3 | (-input1 | input1) >> 0x1f))) {\n    result = FUN_0800016c(input1,input2,input3,input4,input4);\n    return result;\n  }\n  if ((input4 + 0xc0100000 | input3) == 0) {\n    result = FUN_08006d68();\n    return result;\n  }\n  temp2 = (int)input4 >> 0x1e & 2U | input2 >> 0x1f;\n  if ((input1 | temp3) == 0) {\n    if (temp2 == 2) {\n      return 0x400921fb54442d18;\n    }\n    if (temp2 != 3) {\n      return CONCAT44(input2,input1);\n    }\nLAB_0800613e:\n    result = 0xc00921fb54442d18;\n  }\n  else {\n    if ((input3 | temp5) != 0) {\n      if (temp5 == 0x7ff00000) {\n        if (temp3 == 0x7ff00000) {\n          if (temp2 == 2) {\n            return 0x4002d97c7f3321d2;\n          }\n          if (temp2 == 3) {\n            return 0xc002d97c7f3321d2;\n          }\n          if (temp2 != 1) {\n            return 0x3fe921fb54442d18;\n          }\n          return 0xbfe921fb54442d18;\n        }\n        if (temp2 == 2) {\n          return 0x400921fb54442d18;\n        }\n        if (temp2 != 3) {\n          if (temp2 != 1) {\n            return 0;\n          }\n          return 0x8000000000000000;\n        }\n        goto LAB_0800613e;\n      }\n      if (temp3 != 0x7ff00000) {\n        difference = (int)(temp3 - temp5) >> 0x14;\n        if (difference < 0x3d) {\n          if (((int)input4 < 0) && (difference + 0x3c < 0 != SCARRY4(difference,0x3c))) {\n            result = 0;\n          }\n          else {\n            FUN_08000724(input1,input2);\n            FUNC_0800708c();\n            result = FUN_08006d68();\n          }\n        }\n        else {\n          result = 0x3ff921fb54442d18;\n        }\n        difference = (int)((ulonglong)result >> 0x20);\n        result1 = (undefined4)result;\n        if (temp2 == 1) {\n          return CONCAT44(difference + -0x80000000,result1);\n        }\n        if (temp2 == 2) {\n          temp_result = FUN_08000168(result1,difference,0x33145c07,0x3ca1a626);\n          result = 0x400921fb54442d18;\n        }\n        else {\n          if (temp2 == 0) {\n            return result;\n          }\n          result = FUN_08000168(result1,difference,0x33145c07,0x3ca1a626);\n          temp_result = 0x400921fb54442d18;\n        }\n        result = FUN_08000168((int)result,(int)((ulonglong)result >> 0x20),(int)temp_result,\n                             (int)((ulonglong)temp_result >> 0x20));\n        return result;\n      }\n    }\n    if ((int)input2 < 0) {\n      result = 0xbff921fb54442d18;\n    }\n    else {\n      result = 0x3ff921fb54442d18;\n    }\n  }\n  return result;\n}\n\n",
            "renaming": {
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "result1",
                "uVar2": "temp2",
                "uVar3": "temp3",
                "iVar4": "difference",
                "uVar5": "temp5",
                "uVar6": "result",
                "uVar7": "temp_result",
                "FUN_08006070": "calculate_floating_point_value_08006070"
            },
            "calling": [
                "thunk_FUN_08006070"
            ],
            "called": [
                "FUN_0800708c",
                "FUN_08006d68",
                "FUN_08000168",
                "FUN_08000724",
                "FUN_0800016c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "param_1": {
                    "1": "num1",
                    "2": "exponent",
                    "14": "input1"
                },
                "param_2": {
                    "1": "input_2",
                    "14": "input2",
                    "2": "mantissa"
                },
                "param_3": {
                    "1": "num3",
                    "14": "input3"
                },
                "param_4": {
                    "1": "fraction",
                    "14": "input4"
                },
                "uVar1": {
                    "1": "result_lower",
                    "2": "result_var1",
                    "5": "temp1",
                    "7": "result1",
                    "3": "result"
                },
                "uVar2": {
                    "2": "result_2",
                    "1": "shifted_bits",
                    "5": "result2"
                },
                "uVar3": {
                    "1": "temp1",
                    "2": "temp_var2",
                    "5": "temp3"
                },
                "iVar4": {
                    "1": "temp2",
                    "2": "result_4",
                    "5": "temp4",
                    "10": "difference"
                },
                "uVar5": {
                    "1": "temp3",
                    "5": "temp5",
                    "2": "result_5"
                },
                "uVar6": {
                    "2": "final_result1",
                    "1": "output_result",
                    "3": "final_result",
                    "18": "result"
                },
                "uVar7": {
                    "8": "temp_result",
                    "5": "temp6",
                    "1": "result_2",
                    "2": "sub_function_result",
                    "3": "result2"
                },
                "FUN_0800016c": {
                    "1": "sub_function_1"
                },
                "FUN_08006d68": {
                    "1": "calculate_result2"
                },
                "FUN_08000168": {
                    "1": "function_c"
                },
                "FUN_08000724": {
                    "1": "function_d"
                },
                "FUNC_0800708c": {
                    "1": "sub_function_5"
                },
                "FUN_08006070": {
                    "1": "calculate_floating_point",
                    "3": "calculate_result"
                }
            }
        },
        "FUN_08006228": {
            "entrypoint": "0x08006228",
            "current_name": "calculate_floating_point_08006228",
            "code": "\nuint calculate_floating_point_08006228(uint input1,uint input2,uint input3,uint input4)\n\n{\n  undefined4 result1;\n  uint result2;\n  uint temp3;\n  undefined4 result3;\n  undefined4 temp2;\n  undefined4 temp6;\n  undefined4 temp7;\n  uint temp8;\n  undefined4 temp9;\n  int var1;\n  int var2;\n  undefined4 var3;\n  uint temp4;\n  undefined4 temp5;\n  int temp6;\n  uint result;\n  undefined4 temp7;\n  undefined4 temp8;\n  undefined8 temp18;\n  undefined8 temp2;\n  undefined8 temp3;\n  undefined8 temp4;\n  longlong combined_result;\n  ulonglong temp23;\n  undefined8 temp11;\n  uint local_var1;\n  undefined4 local_var2;\n  undefined4 local_var3;\n  int local_var4;\n  \n  temp2 = CONCAT44(input2,input1);\n  result = input4 & 0x7fffffff;\n  if ((result | input3) == 0) {\n    return 0;\n  }\n  temp4 = input2 & 0x7fffffff;\n  if (temp4 < 0x7ff00001) {\n    if (temp4 == 0x7ff00000) {\n      if (input1 == 0) {\n        if (0x7ff00000 < result) goto LAB_08006278;\nLAB_08006262:\n        if ((result != 0x7ff00000) || (input3 == 0)) {\n          if (-1 < (int)input2) goto LAB_0800632a;\n          if (result < 0x43400000) {\n            if (result < 0x3ff00000) {\nLAB_0800632a:\n              local_var1 = 0;\n              goto LAB_080062ba;\n            }\n            var1 = ((int)result >> 0x14) + -0x3ff;\n            if (0x14 < var1) {\n              result2 = input3 >> (0x34U - var1 & 0xff);\n              if (input3 == result2 << (0x34U - var1 & 0xff)) {\n                local_var1 = 2 - (result2 & 1);\n                goto LAB_080062ba;\n              }\n              goto LAB_0800632a;\n            }\n            if (input3 == 0) {\n              result2 = (int)result >> (0x14U - var1 & 0xff);\n              if (result == result2 << (0x14U - var1 & 0xff)) {\n                local_var1 = 2 - (result2 & 1);\n              }\n              else {\n                local_var1 = 0;\n              }\n              goto LAB_0800630c;\n            }\n            local_var1 = 0;\n          }\n          else {\n            local_var1 = 2;\nLAB_080062ba:\n            if (input3 == 0) {\n              if (result == 0x7ff00000) {\n                if ((temp4 + 0xc0100000 | input1) == 0) {\n                  return 0;\n                }\n                if (0x3fefffff < temp4) {\n                  if ((int)input4 < 0) {\n                    return 0;\n                  }\n                  return 0;\n                }\n                if (-1 < (int)input4) {\n                  return 0;\n                }\n                return 0;\n              }\nLAB_0800630c:\n              if (result == 0x3ff00000) {\n                if (-1 < (int)input4) {\n                  return input1;\n                }\n                temp18 = 0x3ff0000000000000;\n                goto LAB_08006320;\n              }\n              if (input4 == 0x40000000) goto LAB_0800634a;\n              if ((input4 == 0x3fe00000) && (-1 < (int)input2)) {\n                result = FUN_08006c0c(input1,input2);\n                return result;\n              }\n            }\n          }\n          temp18 = FUNC_0800708c(input1,input2);\n          temp7 = (undefined4)((ulonglong)temp18 >> 0x20);\n          result1 = (undefined4)temp18;\n          temp23 = CONCAT44(input2,result1) & 0x7fffffffffffffff;\n          if ((input1 == 0) && ((temp4 == 0 || ((input2 & 0x3fffffff) == 0x3ff00000)))) {\n            if ((int)input4 < 0) {\n              temp18 = FUN_08000724(0,0x3ff00000,result1,temp7);\n            }\n            if (-1 < (int)input2) {\n              return (uint)temp18;\n            }\n            if ((local_var1 | temp4 + 0xc0100000) != 0) {\n              return (uint)temp18;\n            }\n          }\n          else {\n            result2 = 0xffffffff - ((int)input2 >> 0x1f);\n            temp18 = temp2;\n            if ((local_var1 | result2) != 0) {\n              if (result < 0x41e00001) {\n                local_var4 = 0;\n                if (temp4 < 0x100000) {\n                  temp23 = FUN_080004d0();\n                  local_var4 = -0x35;\n                }\n                result = (uint)(temp23 >> 0x20);\n                result1 = (undefined4)temp23;\n                local_var4 = ((int)result >> 0x14) + -0x3ff + local_var4;\n                result = result & 0xfffff;\n                temp4 = result | 0x3ff00000;\n                if (result < 0x3988f) {\nLAB_08006628:\n                  var1 = 0;\n                }\n                else {\n                  if (0xbb679 < result) {\n                    temp4 = temp4 - 0x100000;\n                    local_var4 = local_var4 + 1;\n                    goto LAB_08006628;\n                  }\n                  var1 = 1;\n                }\n                var2 = var1 * 8;\n                var3 = (&DAT_080073c0)[var1 * 2];\n                temp5 = (&DAT_080073c4)[var1 * 2];\n                temp2 = FUN_08000168(result1,temp4,var3,temp5);\n                temp8 = (undefined4)((ulonglong)temp2 >> 0x20);\n                temp18 = FUN_0800016c(result1,temp4,var3,temp5);\n                temp18 = FUN_08000724(0,0x3ff00000,(int)temp18,(int)((ulonglong)temp18 >> 0x20));\n                result3 = (undefined4)((ulonglong)temp18 >> 0x20);\n                temp3 = FUN_080004d0((int)temp2,temp8,(int)temp18,result3);\n                temp2 = (undefined4)((ulonglong)temp3 >> 0x20);\n                temp7 = (undefined4)temp3;\n                temp3 = FUN_080004d0(0,temp2);\n                temp2 = FUN_08000168((int)temp2,temp8,(int)temp3,\n                                      (int)((ulonglong)temp3 >> 0x20));\n                temp3 = FUN_08000168(0,((int)temp4 >> 1 | 0x20000000U) + 0x80000 + var1 * 0x40000,\n                                      var3,temp5);\n                temp3 = FUN_08000168(result1,temp4,(int)temp3,(int)((ulonglong)temp3 >> 0x20));\n                temp3 = FUN_080004d0((int)temp3,(int)((ulonglong)temp3 >> 0x20),0,temp2);\n                temp2 = FUN_08000168((int)temp2,(int)((ulonglong)temp2 >> 0x20),(int)temp3,\n                                      (int)((ulonglong)temp3 >> 0x20));\n                temp2 = FUN_080004d0((int)temp2,(int)((ulonglong)temp2 >> 0x20),(int)temp18,result3\n                                     );\n                temp8 = (undefined4)((ulonglong)temp2 >> 0x20);\n                temp18 = FUN_080004d0(temp7,temp2);\n                result3 = (undefined4)((ulonglong)temp18 >> 0x20);\n                result1 = (undefined4)temp18;\n                temp18 = FUN_080004d0(result1,result3,0x4a454eef,0x3fca7e28);\n                temp18 = FUN_0800016c((int)temp18,(int)((ulonglong)temp18 >> 0x20),0x93c9db65,\n                                      0x3fcd864a);\n                temp18 = FUN_080004d0((int)temp18,(int)((ulonglong)temp18 >> 0x20),result1,result3);\n                temp18 = FUN_0800016c((int)temp18,(int)((ulonglong)temp18 >> 0x20),0xa91d4101,\n                                      0x3fd17460);\n                temp18 = FUN_080004d0((int)temp18,(int)((ulonglong)temp18 >> 0x20),result1,result3);\n                temp18 = FUN_0800016c((int)temp18,(int)((ulonglong)temp18 >> 0x20),0x518f264d,\n                                      0x3fd55555);\n                temp18 = FUN_080004d0((int)temp18,(int)((ulonglong)temp18 >> 0x20),result1,result3);\n                temp18 = FUN_0800016c((int)temp18,(int)((ulonglong)temp18 >> 0x20),0xdb6fabff,\n                                      0x3fdb6db6);\n                temp18 = FUN_080004d0((int)temp18,(int)((ulonglong)temp18 >> 0x20),result1,result3);\n                temp18 = FUN_0800016c((int)temp18,(int)((ulonglong)temp18 >> 0x20),0x33333303,\n                                      0x3fe33333);\n                temp3 = FUN_080004d0(result1,result3,result1,result3);\n                temp18 = FUN_080004d0((int)temp18,(int)((ulonglong)temp18 >> 0x20),(int)temp3,\n                                      (int)((ulonglong)temp3 >> 0x20));\n                temp3 = FUN_0800016c(temp7,temp2,0,temp2);\n                temp3 = FUN_080004d0((int)temp3,(int)((ulonglong)temp3 >> 0x20),(int)temp2,\n                                      temp8);\n                temp18 = FUN_0800016c((int)temp3,(int)((ulonglong)temp3 >> 0x20),(int)temp18,\n                                      (int)((ulonglong)temp18 >> 0x20));\n                result1 = (undefined4)((ulonglong)temp18 >> 0x20);\n                temp3 = FUN_080004d0(0,temp2,0,temp2);\n                result3 = (undefined4)((ulonglong)temp3 >> 0x20);\n                temp4 = FUN_0800016c((int)temp3,result3,0,0x40080000);\n                FUN_0800016c((int)temp4,(int)((ulonglong)temp4 >> 0x20),(int)temp18,result1);\n                temp4 = FUN_080004d0(0,temp2,0,temp6);\n                var3 = (undefined4)((ulonglong)temp4 >> 0x20);\n                temp11 = FUN_08000168(0,temp6,0,0x40080000);\n                temp3 = FUN_08000168((int)temp11,(int)((ulonglong)temp11 >> 0x20),(int)temp3,result3\n                                     );\n                temp18 = FUN_08000168((int)temp18,result1,(int)temp3,(int)((ulonglong)temp3 >> 0x20)\n                                     );\n                temp18 = FUN_080004d0((int)temp18,(int)((ulonglong)temp18 >> 0x20),temp7,temp2);\n                temp2 = FUN_080004d0((int)temp2,temp8,0,temp6);\n                temp18 = FUN_0800016c((int)temp18,(int)((ulonglong)temp18 >> 0x20),(int)temp2,\n                                      (int)((ulonglong)temp2 >> 0x20));\n                result1 = (undefined4)((ulonglong)temp18 >> 0x20);\n                FUN_0800016c((int)temp4,var3,(int)temp18,result1);\n                temp2 = FUN_080004d0(0,temp7,0xe0000000,0x3feec709);\n                temp3 = FUN_08000168(0,temp7,(int)temp4,var3);\n                temp18 = FUN_08000168((int)temp18,result1,(int)temp3,(int)((ulonglong)temp3 >> 0x20)\n                                     );\n                temp18 = FUN_080004d0((int)temp18,(int)((ulonglong)temp18 >> 0x20),0xdc3a03fd,\n                                      0x3feec709);\n                temp3 = FUN_080004d0(0,temp7,0x145b01f5,0xbe3e2fe0);\n                temp18 = FUN_0800016c((int)temp18,(int)((ulonglong)temp18 >> 0x20),(int)temp3,\n                                      (int)((ulonglong)temp3 >> 0x20));\n                temp18 = FUN_0800016c((int)temp18,(int)((ulonglong)temp18 >> 0x20),\n                                      *(undefined4 *)(&DAT_080073e0 + var2),\n                                      *(undefined4 *)(&DAT_080073e4 + var2));\n                temp3 = FUN_08000404(local_var4);\n                result1 = (undefined4)((ulonglong)temp3 >> 0x20);\n                temp7 = *(undefined4 *)(&DAT_080073d0 + var2);\n                temp8 = *(undefined4 *)(&DAT_080073d4 + var2);\n                temp4 = FUN_0800016c((int)temp2,(int)((ulonglong)temp2 >> 0x20),(int)temp18,\n                                      (int)((ulonglong)temp18 >> 0x20));\n                temp4 = FUN_0800016c((int)temp4,(int)((ulonglong)temp4 >> 0x20),temp7,temp8);\n                FUN_0800016c((int)temp4,(int)((ulonglong)temp4 >> 0x20),(int)temp3,result1);\n                temp3 = FUN_08000168(0,temp8,(int)temp3,result1);\n                combined_result = FUN_08000168((int)temp3,(int)((ulonglong)temp3 >> 0x20),temp7,temp8);\n                result = temp8;\n              }\n              else {\n                if (0x43f00000 < result) {\n                  if (temp4 < 0x3ff00000) goto LAB_080063fa;\nLAB_08006418:\n                  if ((int)input4 < 1) {\n                    return 0;\n                  }\nLAB_08006400:\n                  input1 = 0x8800759c;\n                  input2 = 0x7e37e43c;\n                  temp2 = 0x7e37e43c8800759c;\n                  goto LAB_0800634a;\n                }\n                if (temp4 < 0x3fefffff) {\nLAB_080063fa:\n                  if (-1 < (int)input4) {\n                    return 0;\n                  }\n                  goto LAB_08006400;\n                }\n                if (0x3ff00000 < temp4) goto LAB_08006418;\n                temp2 = FUN_08000168(result1,temp7,0,0x3ff00000);\n                temp7 = (undefined4)((ulonglong)temp2 >> 0x20);\n                result1 = (undefined4)temp2;\n                temp2 = FUN_080004d0(result1,temp7,0x60000000,0x3ff71547);\n                temp18 = FUN_080004d0(result1,temp7,0xf85ddf44,0x3e54ae0b);\n                temp3 = FUN_080004d0(result1,temp7,0,0x3fd00000);\n                temp3 = FUN_08000168(0x55555555,0x3fd55555,(int)temp3,\n                                      (int)((ulonglong)temp3 >> 0x20));\n                temp3 = FUN_080004d0((int)temp3,(int)((ulonglong)temp3 >> 0x20),result1,temp7);\n                temp3 = FUN_08000168(0,0x3fe00000,(int)temp3,(int)((ulonglong)temp3 >> 0x20));\n                temp4 = FUN_080004d0(result1,temp7,result1,temp7);\n                temp3 = FUN_080004d0((int)temp3,(int)((ulonglong)temp3 >> 0x20),(int)temp4,\n                                      (int)((ulonglong)temp4 >> 0x20));\n                temp3 = FUN_080004d0((int)temp3,(int)((ulonglong)temp3 >> 0x20),0x652b82fe,\n                                      0x3ff71547);\n                temp18 = FUN_08000168((int)temp18,(int)((ulonglong)temp18 >> 0x20),(int)temp3,\n                                      (int)((ulonglong)temp3 >> 0x20));\n                FUN_0800016c((int)temp2,(int)((ulonglong)temp2 >> 0x20),(int)temp18,\n                             (int)((ulonglong)temp18 >> 0x20));\n                combined_result = (ulonglong)temp3 << 0x20;\n                result = temp3;\n              }\n              temp2 = FUN_08000168((int)combined_result,(int)((ulonglong)combined_result >> 0x20),(int)temp2,\n                                    (int)((ulonglong)temp2 >> 0x20));\n              temp2 = FUN_08000168((int)temp18,(int)((ulonglong)temp18 >> 0x20),(int)temp2,\n                                    (int)((ulonglong)temp2 >> 0x20));\n              if ((local_var1 - 1 | result2) == 0) {\n                input2 = 0xbff00000;\n              }\n              else {\n                input2 = 0x3ff00000;\n              }\n              local_var1 = 0;\n              temp18 = FUN_08000168(input3,input4,0,input4);\n              temp18 = FUN_080004d0((int)temp18,(int)((ulonglong)temp18 >> 0x20),0,result);\n              temp2 = FUN_080004d0((int)temp2,(int)((ulonglong)temp2 >> 0x20),input3,input4);\n              temp2 = FUN_0800016c((int)temp18,(int)((ulonglong)temp18 >> 0x20),(int)temp2,\n                                    (int)((ulonglong)temp2 >> 0x20));\n              temp8 = (undefined4)((ulonglong)temp2 >> 0x20);\n              result1 = (undefined4)temp2;\n              temp2 = FUN_080004d0(0,result,0,input4);\n              result3 = (undefined4)((ulonglong)temp2 >> 0x20);\n              temp7 = (undefined4)temp2;\n              combined_result = FUN_0800016c(result1,temp8,temp7,result3);\n              temp4 = (uint)((ulonglong)combined_result >> 0x20);\n              result = (uint)combined_result;\n              if (0x408fffffffffffff < combined_result) {\n                if ((temp4 + 0xbf700000 | result) == 0) {\n                  temp18 = FUN_0800016c(result1,temp8,0x652b82fe,0x3c971547);\n                  temp3 = FUN_08000168(result,temp4,temp7,result3);\n                  var1 = FUN_080009f0((int)temp18,(int)((ulonglong)temp18 >> 0x20),(int)temp3,\n                                       (int)((ulonglong)temp3 >> 0x20));\n                  if (var1 == 0) goto LAB_08006968;\n                }\n                temp2 = FUN_080004d0(0,input2,0x8800759c,0x7e37e43c);\n                input1 = 0x8800759c;\n                input2 = 0x7e37e43c;\n                goto LAB_0800634a;\n              }\n              if ((temp4 & 0x7fffffff) < 0x4090cc00) {\nLAB_08006968:\n                if ((temp4 & 0x7fffffff) < 0x3fe00001) {\n                  var1 = 0;\n                }\n                else {\n                  temp4 = (0x100000 >> (((int)(temp4 & 0x7fffffff) >> 0x14) - 0x3feU & 0xff)) +\n                          temp4;\n                  result = (temp4 * 2 >> 0x15) - 0x3ff;\n                  var1 = (int)(temp4 & 0xfffff | 0x100000) >> (0x14 - result & 0xff);\n                  if (combined_result < 0) {\n                    var1 = -var1;\n                  }\n                  temp2 = FUN_08000168(temp7,result3,0,temp4 & ~(0xfffff >> (result & 0xff)));\n                }\n                local_var3 = (undefined4)((ulonglong)temp2 >> 0x20);\n                local_var2 = (undefined4)temp2;\n                FUN_0800016c(local_var2,local_var3,result1,temp8);\n                temp2 = FUN_080004d0(0,temp9,0,0x3fe62e43);\n                temp7 = (undefined4)((ulonglong)temp2 >> 0x20);\n                temp18 = FUN_08000168(0,temp9,local_var2,local_var3);\n                temp18 = FUN_08000168(result1,temp8,(int)temp18,(int)((ulonglong)temp18 >> 0x20));\n                temp18 = FUN_080004d0((int)temp18,(int)((ulonglong)temp18 >> 0x20),0xfefa39ef,\n                                      0x3fe62e42);\n                temp3 = FUN_080004d0(0,temp9,0xca86c39,0xbe205c61);\n                temp18 = FUN_0800016c((int)temp18,(int)((ulonglong)temp18 >> 0x20),(int)temp3,\n                                      (int)((ulonglong)temp3 >> 0x20));\n                temp8 = (undefined4)((ulonglong)temp18 >> 0x20);\n                temp3 = FUN_0800016c((int)temp2,temp7,(int)temp18,temp8);\n                result3 = (undefined4)((ulonglong)temp3 >> 0x20);\n                result1 = (undefined4)temp3;\n                temp2 = FUN_08000168(result1,result3,(int)temp2,temp7);\n                temp2 = FUN_08000168((int)temp18,temp8,(int)temp2,\n                                      (int)((ulonglong)temp2 >> 0x20));\n                temp8 = (undefined4)((ulonglong)temp2 >> 0x20);\n                temp18 = FUN_080004d0(result1,result3,result1,result3);\n                temp2 = (undefined4)((ulonglong)temp18 >> 0x20);\n                temp7 = (undefined4)temp18;\n                temp18 = FUN_080004d0(temp7,temp2,0x72bea4d0,0x3e663769);\n                temp18 = FUN_08000168((int)temp18,(int)((ulonglong)temp18 >> 0x20),0xc5d26bf1,\n                                      0x3ebbbd41);\n                temp18 = FUN_080004d0((int)temp18,(int)((ulonglong)temp18 >> 0x20),temp7,temp2);\n                temp18 = FUN_0800016c((int)temp18,(int)((ulonglong)temp18 >> 0x20),0xaf25de2c,\n                                      0x3f11566a);\n                temp18 = FUN_080004d0((int)temp18,(int)((ulonglong)temp18 >> 0x20),temp7,temp2);\n                temp18 = FUN_08000168((int)temp18,(int)((ulonglong)temp18 >> 0x20),0x16bebd93,\n                                      0x3f66c16c);\n                temp18 = FUN_080004d0((int)temp18,(int)((ulonglong)temp18 >> 0x20),temp7,temp2);\n                temp18 = FUN_0800016c((int)temp18,(int)((ulonglong)temp18 >> 0x20),0x5555553e,\n                                      0x3fc55555);\n                temp18 = FUN_080004d0((int)temp18,(int)((ulonglong)temp18 >> 0x20),temp7,temp2);\n                temp18 = FUN_08000168(result1,result3,(int)temp18,(int)((ulonglong)temp18 >> 0x20));\n                temp7 = (undefined4)((ulonglong)temp18 >> 0x20);\n                temp3 = FUN_080004d0(result1,result3,(int)temp18,temp7);\n                temp18 = FUN_08000168((int)temp18,temp7,0,0x40000000);\n                temp18 = FUN_08000724((int)temp3,(int)((ulonglong)temp3 >> 0x20),(int)temp18,\n                                      (int)((ulonglong)temp18 >> 0x20));\n                temp3 = FUN_080004d0(result1,result3,(int)temp2,temp8);\n                temp2 = FUN_0800016c((int)temp3,(int)((ulonglong)temp3 >> 0x20),(int)temp2,\n                                      temp8);\n                temp2 = FUN_08000168((int)temp18,(int)((ulonglong)temp18 >> 0x20),(int)temp2,\n                                      (int)((ulonglong)temp2 >> 0x20));\n                temp2 = FUN_08000168((int)temp2,(int)((ulonglong)temp2 >> 0x20),result1,result3);\n                temp18 = FUN_08000168(0,0x3ff00000,(int)temp2,(int)((ulonglong)temp2 >> 0x20));\n                var2 = (int)((ulonglong)temp18 >> 0x20);\n                temp6 = var2 + var1 * 0x100000;\n                temp2 = CONCAT44(temp6,(int)temp18);\n                input1 = local_var1;\n                if (temp6 < 0x100000) {\n                  temp2 = FUN_080071c0((int)temp18,var2,var1);\n                }\n              }\n              else {\n                if ((temp4 + 0x3f6f3400 | result) == 0) {\n                  temp18 = FUN_08000168(result,temp4,temp7,result3);\n                  var1 = FUN_080009c8(result1,temp8,(int)temp18,(int)((ulonglong)temp18 >> 0x20));\n                  if (var1 == 0) goto LAB_08006968;\n                }\n                temp2 = FUN_080004d0(0,input2,0xc2f8f359,0x1a56e1f);\n                input1 = 0xc2f8f359;\n                input2 = 0x1a56e1f;\n              }\nLAB_0800634a:\n              result = FUN_080004d0((int)temp2,(int)((ulonglong)temp2 >> 0x20),input1,input2);\n              return result;\n            }\n          }\n          result1 = (undefined4)((ulonglong)temp18 >> 0x20);\n          temp18 = FUN_08000168((int)temp18,result1,(int)temp18,result1);\n          temp2 = temp18;\nLAB_08006320:\n          result = FUN_08000724((int)temp18,(int)((ulonglong)temp18 >> 0x20),(int)temp2,\n                                (int)((ulonglong)temp2 >> 0x20));\n          return result;\n        }\n      }\n    }\n    else if (result < 0x7ff00001) goto LAB_08006262;\n  }\n  if ((temp4 + 0xc0100000 | input1) == 0) {\n    return 0;\n  }\nLAB_08006278:\n  result = FUN_080070a4(&DAT_0800737e);\n  return result;\n}\n\n",
            "renaming": {
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar2": "result2",
                "extraout_r1": "temp3",
                "uVar3": "result3",
                "uVar4": "temp2",
                "extraout_r1_00": "temp6",
                "extraout_r1_02": "temp8",
                "uVar8": "temp4",
                "uVar9": "temp5",
                "iVar5": "var1",
                "iVar6": "var2",
                "uVar11": "result",
                "uVar12": "temp7",
                "uVar13": "temp8",
                "uVar14": "temp18",
                "uVar15": "temp2",
                "uVar16": "temp3",
                "uVar17": "temp4",
                "lVar18": "combined_result",
                "uVar19": "temp23",
                "uVar20": "temp11",
                "local_70": "local_var1",
                "local_68": "local_var2",
                "local_64": "local_var3",
                "local_54": "local_var4",
                "FUN_08006228": "calculate_floating_point_08006228",
                "uVar1": "result1",
                "uVar7": "var3",
                "iVar10": "temp6",
                "extraout_r1_01": "temp7",
                "extraout_r1_03": "temp9"
            },
            "calling": [
                "FUN_08005900"
            ],
            "called": [
                "FUN_080071c0",
                "FUN_080004d0",
                "FUN_0800708c",
                "FUN_080070a4",
                "FUN_080009c8",
                "FUN_08006c0c",
                "FUN_08000168",
                "FUN_080009f0",
                "FUN_08000724",
                "FUN_0800016c",
                "FUN_08000404"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "param_1": {
                    "1": "first_parameter",
                    "2": "exponent",
                    "4": "sign",
                    "12": "input1"
                },
                "param_2": {
                    "12": "input2",
                    "1": "second_parameter",
                    "2": "input_2",
                    "5": "exponent"
                },
                "param_3": {
                    "2": "mantissa",
                    "1": "num3",
                    "12": "input3"
                },
                "param_4": {
                    "1": "sign_divisor",
                    "2": "input_4",
                    "12": "input4"
                },
                "uVar2": {
                    "1": "var2",
                    "2": "exponent_mask",
                    "8": "result2",
                    "4": "temp2"
                },
                "extraout_r1": {
                    "1": "quotient",
                    "2": "temp2"
                },
                "uVar3": {
                    "1": "fp_mantissa",
                    "4": "temp3",
                    "5": "temp1",
                    "2": "temp4"
                },
                "uVar4": {
                    "1": "result_u_var4",
                    "2": "result5",
                    "5": "result4",
                    "4": "temp4",
                    "6": "temp2"
                },
                "extraout_r1_00": {
                    "2": "temp6",
                    "1": "result_6"
                },
                "extraout_r1_02": {
                    "1": "temp3",
                    "2": "temp7"
                },
                "uVar8": {
                    "1": "array_val2",
                    "2": "var4",
                    "3": "temp4"
                },
                "uVar9": {
                    "1": "temp4",
                    "3": "temp5",
                    "2": "var5"
                },
                "iVar5": {
                    "1": "temp9",
                    "2": "shift",
                    "4": "var1"
                },
                "iVar6": {
                    "1": "temp10",
                    "4": "var2",
                    "3": "index"
                },
                "uVar11": {
                    "1": "normalized_input4",
                    "2": "var7",
                    "10": "result"
                },
                "uVar12": {
                    "1": "var_13",
                    "2": "temp3",
                    "3": "temp7"
                },
                "uVar13": {
                    "1": "var13",
                    "2": "temp17",
                    "3": "temp8"
                },
                "uVar14": {
                    "1": "floating_point_result1",
                    "2": "var10"
                },
                "uVar15": {
                    "1": "result4",
                    "2": "var11"
                },
                "uVar16": {
                    "1": "calculation1",
                    "2": "temp3"
                },
                "uVar17": {
                    "1": "var17",
                    "2": "var13"
                },
                "lVar18": {
                    "1": "long_long_variable",
                    "2": "combined_result"
                },
                "uVar19": {
                    "1": "var19",
                    "2": "temp_var6"
                },
                "uVar20": {
                    "1": "temp_var6",
                    "2": "var16"
                },
                "local_70": {
                    "1": "final_result",
                    "2": "result",
                    "4": "local_var1"
                },
                "local_68": {
                    "1": "local_var_68",
                    "4": "local_var2",
                    "2": "temp9"
                },
                "local_64": {
                    "1": "local_var_3",
                    "4": "local_var3",
                    "2": "temp10"
                },
                "local_54": {
                    "1": "shift_amount",
                    "4": "local_var4",
                    "2": "temp4"
                },
                "FUN_08006228": {
                    "1": "analyze_and_calculate_floating_point",
                    "9": "calculate_floating_point"
                },
                "uVar1": {
                    "1": "result_var1",
                    "4": "temp1",
                    "9": "result1"
                },
                "uVar7": {
                    "4": "var3",
                    "1": "temp1",
                    "2": "temp5",
                    "3": "temp3"
                },
                "iVar10": {
                    "1": "offset",
                    "2": "var5"
                },
                "uVar5": {
                    "1": "counter"
                },
                "uVar6": {
                    "1": "fraction_shifted"
                },
                "uVar10": {
                    "1": "temp10"
                },
                "uVar18": {
                    "1": "temp18"
                },
                "extraout_r1_01": {
                    "2": "temp7",
                    "1": "temp10"
                },
                "extraout_r1_03": {
                    "2": "temp9",
                    "1": "extra_output4"
                },
                "iVar14": {
                    "1": "shifted_exponent"
                },
                "iVar18": {
                    "1": "upper_exponent"
                },
                "FUN_080071c0": {
                    "1": "calculate_square_root"
                },
                "FUN_080004d0": {
                    "1": "perform_arithmetic_operation"
                },
                "FUNC_0800708c": {
                    "1": "helper_function1"
                },
                "FUN_080070a4": {
                    "1": "helper_function2"
                },
                "FUN_080009c8": {
                    "1": "function3"
                },
                "FUN_08006c0c": {
                    "1": "function4"
                },
                "FUN_08000168": {
                    "1": "divide"
                },
                "FUN_080009f0": {
                    "1": "function5"
                },
                "FUN_08000724": {
                    "1": "perform_bitwise_operation"
                },
                "FUN_0800016c": {
                    "1": "function7"
                },
                "FUN_08000404": {
                    "1": "calculate_cubic_root"
                },
                "lVar19": {
                    "1": "temp19"
                },
                "uint param_1": {
                    "1": "input_value1"
                },
                "uint param_2": {
                    "1": "input_value2"
                },
                "uint param_3": {
                    "1": "input_value3"
                },
                "uint param_4": {
                    "1": "input_value4"
                },
                "undefined4 uVar1": {
                    "1": "result1"
                },
                "uint uVar2": {
                    "1": "result2"
                },
                "uint extraout_r1": {
                    "1": "result3"
                },
                "undefined4 uVar3": {
                    "1": "result4"
                },
                "undefined4 uVar4": {
                    "1": "result5"
                },
                "undefined4 extraout_r1_00": {
                    "1": "result6"
                },
                "undefined4 extraout_r1_01": {
                    "1": "result7"
                },
                "uint extraout_r1_02": {
                    "1": "result8"
                },
                "undefined4 extraout_r1_03": {
                    "1": "result9"
                },
                "int iVar5": {
                    "1": "iteration_variable5"
                },
                "int iVar6": {
                    "1": "iteration_variable6"
                },
                "undefined4 uVar7": {
                    "1": "result10"
                },
                "uint uVar8": {
                    "1": "result11"
                },
                "undefined4 uVar9": {
                    "1": "result12"
                },
                "int iVar10": {
                    "1": "iteration_variable10"
                },
                "uint uVar11": {
                    "1": "result13"
                },
                "undefined4 uVar12": {
                    "1": "result14"
                },
                "undefined4 uVar13": {
                    "1": "result15"
                },
                "undefined8 uVar14": {
                    "1": "result16"
                },
                "undefined8 uVar15": {
                    "1": "result17"
                },
                "undefined8 uVar16": {
                    "1": "result18"
                },
                "undefined8 uVar17": {
                    "1": "result19"
                },
                "longlong lVar18": {
                    "1": "result20"
                },
                "ulonglong uVar19": {
                    "1": "result21"
                },
                "undefined8 uVar20": {
                    "1": "result22"
                },
                "uint local_70": {
                    "1": "local_variable70"
                },
                "undefined4 local_68": {
                    "1": "local_variable68"
                },
                "undefined4 local_64": {
                    "1": "local_variable64"
                },
                "int local_54": {
                    "1": "local_variable54"
                }
            }
        },
        "FUN_08006c0c": {
            "entrypoint": "0x08006c0c",
            "current_name": "calculate_float_08006c0c",
            "code": "\nundefined8 calculate_float_08006c0c(uint input1,uint input2)\n\n{\n  undefined4 temp1;\n  uint temp2;\n  int temp2;\n  int temp3;\n  uint temp4;\n  uint temp2;\n  int exponent;\n  uint mantissa;\n  uint mask;\n  int temp9;\n  uint temp3;\n  undefined8 result;\n  \n  if ((~input2 & 0x7ff00000) == 0) {\n    result = FUN_080004d0(input1,input2,input1,input2);\n    result = FUN_0800016c(input1,input2,(int)result,(int)((ulonglong)result >> 0x20));\n    return result;\n  }\n  if ((int)input2 < 1) {\n    if ((input2 & 0x7fffffff | input1) == 0) {\n      return CONCAT44(input2,input1);\n    }\n    if (input2 != 0) {\n      result = FUN_08000168(input1,input2,input1,input2);\n      temp1 = (undefined4)((ulonglong)result >> 0x20);\n      result = FUN_08000724((int)result,temp1,(int)result,temp1);\n      return result;\n    }\n  }\n  temp2 = (int)input2 >> 0x14;\n  if (temp2 == 0) {\n    while (input2 == 0) {\n      temp2 = temp2 + -0x15;\n      input2 = input1 >> 0xb;\n      input1 = input1 << 0x15;\n    }\n    temp2 = 0;\n    for (; -1 < (int)(input2 << 0xb); input2 = input2 << 1) {\n      temp2 = temp2 + 1;\n    }\n    temp2 = temp2 - (temp2 - 1);\n    input2 = input2 | input1 >> (0x20 - temp2 & 0xff);\n    input1 = input1 << (temp2 & 0xff);\n  }\n  exponent = 0;\n  temp2 = input2 & 0xfffff | 0x100000;\n  if ((temp2 + -0x3ff) * -0x80000000 < 0) {\n    temp2 = temp2 * 2 - ((int)input1 >> 0x1f);\n    input1 = input1 << 1;\n  }\n  temp2 = temp2 * 2 - ((int)input1 >> 0x1f);\n  temp3 = 0x16;\n  temp4 = 0;\n  mantissa = 0x200000;\n  input1 = input1 << 1;\n  do {\n    temp9 = temp4 + mantissa;\n    if (temp9 <= (int)temp2) {\n      temp2 = temp2 - temp9;\n      temp4 = temp9 + mantissa;\n      exponent = exponent + mantissa;\n    }\n    temp3 = temp3 + -1;\n    temp2 = temp2 * 2 - ((int)input1 >> 0x1f);\n    mantissa = mantissa >> 1;\n    input1 = input1 << 1;\n  } while (temp3 != 0);\n  temp9 = 0x20;\n  mask = 0x80000000;\n  mantissa = 0;\n  temp3 = 0;\n  do {\n    temp3 = mask + temp3;\n    temp2 = temp4;\n    if (((int)temp4 < (int)temp2) || ((temp2 == temp4 && (temp3 <= input1)))) {\n      temp3 = temp3 + mask;\n      if (((int)temp3 < 0) && (-1 < temp3)) {\n        temp2 = temp4 + 1;\n      }\n      temp2 = temp2 - temp4;\n      if (input1 < temp3) {\n        temp2 = temp2 - 1;\n      }\n      input1 = input1 - temp3;\n      mantissa = mantissa + mask;\n    }\n    temp2 = temp2 * 2 - ((int)input1 >> 0x1f);\n    temp9 = temp9 + -1;\n    input1 = input1 << 1;\n    mask = mask >> 1;\n    temp4 = temp2;\n  } while (temp9 != 0);\n  if ((input1 | temp2) != 0) {\n    if (mantissa == 0xffffffff) {\n      exponent = exponent + 1;\n      mantissa = 0;\n    }\n    else {\n      mantissa = mantissa + 1 & 0xfffffffe;\n    }\n  }\n  mantissa = mantissa >> 1;\n  if (exponent << 0x1f < 0) {\n    mantissa = mantissa | 0x80000000;\n  }\n  return CONCAT44((exponent >> 1) + 0x3fe00000 + (temp2 + -0x3ff >> 1) * 0x100000,mantissa);\n}\n\n",
            "renaming": {
                "param_1": "input1",
                "param_2": "input2",
                "uVar1": "temp1",
                "uVar2": "temp2",
                "iVar3": "temp2",
                "iVar4": "temp3",
                "uVar5": "temp4",
                "uVar6": "temp2",
                "iVar7": "exponent",
                "uVar8": "mantissa",
                "uVar9": "mask",
                "iVar10": "temp9",
                "uVar11": "temp3",
                "uVar12": "result",
                "FUN_08006c0c": "calculate_float_08006c0c"
            },
            "calling": [
                "FUN_08005c70",
                "FUN_08005bc8",
                "FUN_08006228"
            ],
            "called": [
                "FUN_080004d0",
                "FUN_08000168",
                "FUN_08000724",
                "FUN_0800016c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "param_1": {
                    "1": "first_parameter",
                    "5": "input_1",
                    "2": "input_value1",
                    "7": "input1",
                    "3": "numerator"
                },
                "param_2": {
                    "7": "input2",
                    "1": "second_parameter",
                    "2": "input_value2",
                    "3": "denominator",
                    "4": "exponent",
                    "5": "input_2"
                },
                "uVar1": {
                    "1": "temp_1",
                    "7": "temp1",
                    "5": "result1",
                    "3": "result_1",
                    "6": "result",
                    "4": "temp_var1"
                },
                "uVar2": {
                    "2": "result_2",
                    "1": "temp_1",
                    "4": "temp1",
                    "7": "temp2"
                },
                "iVar3": {
                    "1": "shift_amt1",
                    "2": "shift",
                    "3": "exponent",
                    "4": "shift_amount"
                },
                "iVar4": {
                    "3": "temp",
                    "1": "shift_amt2",
                    "2": "shift_count",
                    "6": "temp3"
                },
                "uVar5": {
                    "1": "significand_bits",
                    "2": "temp3",
                    "6": "temp4"
                },
                "uVar6": {
                    "6": "temp2",
                    "1": "exponent_updated",
                    "2": "temp4",
                    "3": "remainder"
                },
                "iVar7": {
                    "1": "result",
                    "4": "exponent",
                    "2": "whole_part",
                    "3": "integer_part"
                },
                "uVar8": {
                    "1": "result",
                    "4": "mantissa",
                    "3": "temp7",
                    "2": "temp6"
                },
                "uVar9": {
                    "6": "mask",
                    "1": "bit",
                    "2": "temp9",
                    "3": "temp8"
                },
                "iVar10": {
                    "1": "temp3",
                    "2": "i",
                    "3": "temp9"
                },
                "uVar11": {
                    "1": "temp_10",
                    "2": "temp9",
                    "5": "temp3",
                    "3": "temp10"
                },
                "uVar12": {
                    "1": "result_2",
                    "8": "final_result",
                    "4": "output",
                    "12": "result"
                },
                "FUN_080004d0": {
                    "2": "sub_function1",
                    "1": "compute_output1"
                },
                "FUN_08000168": {
                    "2": "sub_function2",
                    "1": "modify"
                },
                "FUN_08000724": {
                    "2": "sub_function3",
                    "1": "operate"
                },
                "FUN_0800016c": {
                    "2": "sub_function4",
                    "1": "compute"
                },
                "FUN_08006c0c": {
                    "1": "compute_floating_point",
                    "2": "calculate_float_from_binary",
                    "13": "calculate_float",
                    "3": "calculate_floating_point"
                },
                "FUNK_08006c0c": {
                    "1": "calculate_float"
                }
            }
        },
        "FUN_08006d68": {
            "entrypoint": "0x08006d68",
            "current_name": "calculate_result_08006d68",
            "code": "\nundefined8 calculate_result_08006d68(int input1,uint input2,undefined4 input3,undefined4 input4)\n\n{\n  int result;\n  undefined4 temp1;\n  undefined4 temp2;\n  undefined4 temp3;\n  undefined4 temp4;\n  undefined4 temp5;\n  undefined4 temp6;\n  uint unsigned_input2;\n  undefined8 result;\n  undefined8 temp_result;\n  \n  result = CONCAT44(input2,input1);\n  unsigned_input2 = input2 & 0x7fffffff;\n  if (unsigned_input2 < 0x44100000) {\n    if (unsigned_input2 < 0x3fdc0000) {\n      if (unsigned_input2 < 0x3e200000) {\n        temp_result = FUN_0800016c(input1,input2,0x8800759c,0x7e37e43c,input4);\n        result = FUN_080009f0((int)temp_result,(int)((ulonglong)temp_result >> 0x20),0,0x3ff00000);\n        if (result != 0) {\n          return result;\n        }\n      }\n      result = -1;\n    }\n    else {\n      result = FUNC_0800708c();\n      temp2 = (undefined4)((ulonglong)result >> 0x20);\n      temp1 = (undefined4)result;\n      if (unsigned_input2 < 0x3ff30000) {\n        if (unsigned_input2 < 0x3fe60000) {\n          result = FUN_0800016c(temp1,temp2,temp1,temp2);\n          result = FUN_08000168((int)result,(int)((ulonglong)result >> 0x20),0,0x3ff00000);\n          temp_result = FUN_0800016c(temp1,temp2,0,0x40000000);\n          result = FUN_08000724((int)result,(int)((ulonglong)result >> 0x20),(int)temp_result,\n                               (int)((ulonglong)temp_result >> 0x20));\n          result = 0;\n        }\n        else {\n          result = FUN_08000168(temp1,temp2,0,0x3ff00000);\n          temp_result = FUN_0800016c(temp1,temp2,0,0x3ff00000);\n          result = FUN_08000724((int)result,(int)((ulonglong)result >> 0x20),(int)temp_result,\n                               (int)((ulonglong)temp_result >> 0x20));\n          result = 1;\n        }\n      }\n      else if (unsigned_input2 < 0x40038000) {\n        result = FUN_08000168(temp1,temp2,0,0x3ff80000);\n        temp_result = FUN_080004d0(temp1,temp2,0,0x3ff80000);\n        temp_result = FUN_0800016c((int)temp_result,(int)((ulonglong)temp_result >> 0x20),0,0x3ff00000);\n        result = FUN_08000724((int)result,(int)((ulonglong)result >> 0x20),(int)temp_result,\n                             (int)((ulonglong)temp_result >> 0x20));\n        result = 2;\n      }\n      else {\n        result = FUN_08000724(0,0xbff00000,temp1,temp2);\n        result = 3;\n      }\n    }\n    temp6 = (undefined4)((ulonglong)result >> 0x20);\n    temp5 = (undefined4)result;\n    result = FUN_080004d0(temp5,temp6,temp5,temp6);\n    temp3 = (undefined4)((ulonglong)result >> 0x20);\n    temp1 = (undefined4)result;\n    result = FUN_080004d0(temp1,temp3,temp1,temp3);\n    temp4 = (undefined4)((ulonglong)result >> 0x20);\n    temp2 = (undefined4)result;\n    result = FUN_080004d0(temp2,temp4,0xe322da11,0x3f90ad3a);\n    result = FUN_0800016c((int)result,(int)((ulonglong)result >> 0x20),0x24760deb,0x3fa97b4b);\n    result = FUN_080004d0((int)result,(int)((ulonglong)result >> 0x20),temp2,temp4);\n    result = FUN_0800016c((int)result,(int)((ulonglong)result >> 0x20),0xa0d03d51,0x3fb10d66);\n    result = FUN_080004d0((int)result,(int)((ulonglong)result >> 0x20),temp2,temp4);\n    result = FUN_0800016c((int)result,(int)((ulonglong)result >> 0x20),0xc54c206e,0x3fb745cd);\n    result = FUN_080004d0((int)result,(int)((ulonglong)result >> 0x20),temp2,temp4);\n    result = FUN_0800016c((int)result,(int)((ulonglong)result >> 0x20),0x920083ff,0x3fc24924);\n    result = FUN_080004d0((int)result,(int)((ulonglong)result >> 0x20),temp2,temp4);\n    result = FUN_0800016c((int)result,(int)((ulonglong)result >> 0x20),0x5555550d,0x3fd55555);\n    result = FUN_080004d0((int)result,(int)((ulonglong)result >> 0x20),temp1,temp3);\n    temp1 = (undefined4)((ulonglong)result >> 0x20);\n    temp_result = FUN_080004d0(temp2,temp4,0x2c6a6c2f,0xbfa2b444);\n    temp_result = FUN_08000168((int)temp_result,(int)((ulonglong)temp_result >> 0x20),0x52defd9a,0x3fadde2d);\n    temp_result = FUN_080004d0((int)temp_result,(int)((ulonglong)temp_result >> 0x20),temp2,temp4);\n    temp_result = FUN_08000168((int)temp_result,(int)((ulonglong)temp_result >> 0x20),0xaf749a6d,0x3fb3b0f2);\n    temp_result = FUN_080004d0((int)temp_result,(int)((ulonglong)temp_result >> 0x20),temp2,temp4);\n    temp_result = FUN_08000168((int)temp_result,(int)((ulonglong)temp_result >> 0x20),0xfe231671,0x3fbc71c6);\n    temp_result = FUN_080004d0((int)temp_result,(int)((ulonglong)temp_result >> 0x20),temp2,temp4);\n    temp_result = FUN_08000168((int)temp_result,(int)((ulonglong)temp_result >> 0x20),0x9998ebc4,0x3fc99999);\n    temp_result = FUN_080004d0((int)temp_result,(int)((ulonglong)temp_result >> 0x20),temp2,temp4);\n    temp2 = (undefined4)((ulonglong)temp_result >> 0x20);\n    if (result == -1) {\n      result = FUN_0800016c((int)result,temp1,(int)temp_result,temp2);\n      result = FUN_080004d0((int)result,(int)((ulonglong)result >> 0x20),temp5,temp6);\n      result = FUN_08000168(temp5,temp6,(int)result,(int)((ulonglong)result >> 0x20));\n    }\n    else {\n      result = FUN_0800016c((int)result,temp1,(int)temp_result,temp2);\n      result = FUN_080004d0((int)result,(int)((ulonglong)result >> 0x20),temp5,temp6);\n      result = result * 8;\n      result = FUN_08000168((int)result,(int)((ulonglong)result >> 0x20),\n                           *(undefined4 *)(&UNK_08007410 + result),\n                           *(undefined4 *)(&UNK_08007414 + result));\n      result = FUN_08000168((int)result,(int)((ulonglong)result >> 0x20),temp5,temp6);\n      result = FUN_08000168(*(undefined4 *)(&UNK_080073f0 + result),\n                           *(undefined4 *)(&UNK_080073f4 + result),(int)result,\n                           (int)((ulonglong)result >> 0x20));\n      if ((int)input2 < 0) {\n        result = CONCAT44((int)((ulonglong)result >> 0x20) + -0x80000000,(int)result);\n      }\n    }\n  }\n  else if ((unsigned_input2 < 0x7ff00001) && ((unsigned_input2 != 0x7ff00000 || (input1 == 0)))) {\n    if ((int)input2 < 1) {\n      result = 0xbff921fb54442d18;\n    }\n    else {\n      result = 0x3ff921fb54442d18;\n    }\n  }\n  else {\n    result = FUN_0800016c(input1,input2,input1,input2,input4);\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08006d68": "calculate_result_08006d68",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "iVar1": "result",
                "uVar2": "temp1",
                "uVar3": "temp2",
                "uVar4": "temp3",
                "uVar5": "temp4",
                "uVar6": "temp5",
                "uVar7": "temp6",
                "uVar8": "unsigned_input2",
                "uVar9": "result",
                "uVar10": "temp_result",
                "uVar1": "concatenated_inputs"
            },
            "calling": [
                "FUN_08006070"
            ],
            "called": [
                "FUN_080004d0",
                "FUN_0800708c",
                "FUN_08000168",
                "FUN_080009f0",
                "FUN_08000724",
                "FUN_0800016c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08006d68": {
                    "1": "calculate",
                    "20": "calculate_result"
                },
                "param_1": {
                    "1": "input_param_1",
                    "2": "input_param1",
                    "20": "input1",
                    "3": "input_value1"
                },
                "param_2": {
                    "20": "input2",
                    "3": "input_value2",
                    "2": "input_2",
                    "1": "input_param_2"
                },
                "param_3": {
                    "2": "input_value3",
                    "1": "param1",
                    "18": "input3"
                },
                "param_4": {
                    "1": "input_param_4",
                    "2": "input_value4",
                    "18": "input4"
                },
                "iVar1": {
                    "1": "result_flag",
                    "6": "condition",
                    "3": "status",
                    "2": "index",
                    "15": "result"
                },
                "uVar2": {
                    "1": "temp2",
                    "2": "result1",
                    "4": "var1",
                    "12": "temp1",
                    "3": "temp_var1"
                },
                "uVar3": {
                    "1": "temp3",
                    "2": "result2",
                    "3": "temp_var2",
                    "13": "temp2",
                    "4": "var2"
                },
                "uVar4": {
                    "4": "var3",
                    "3": "temp_var3",
                    "1": "result4",
                    "2": "temp_var4",
                    "13": "temp3"
                },
                "uVar5": {
                    "1": "result5",
                    "2": "result4",
                    "4": "var4",
                    "3": "temp_var4",
                    "13": "temp4"
                },
                "uVar6": {
                    "13": "temp5",
                    "3": "temp_var5",
                    "1": "temp4",
                    "4": "var5",
                    "2": "temp_var6"
                },
                "uVar7": {
                    "1": "func_result6",
                    "4": "var6",
                    "2": "temp_var7",
                    "13": "temp6",
                    "3": "temp_var6"
                },
                "uVar8": {
                    "1": "temp_mask",
                    "3": "temp7",
                    "2": "u_var8"
                },
                "uVar9": {
                    "1": "output_var1",
                    "2": "output",
                    "3": "result1",
                    "6": "final_result",
                    "11": "result"
                },
                "uVar10": {
                    "12": "temp_result",
                    "1": "temp_var1",
                    "5": "temp",
                    "3": "result2",
                    "2": "output2"
                },
                "FUNC_0800708c": {
                    "1": "get_initial_value"
                },
                "FUN_08000168": {
                    "1": "calculate_next_value"
                },
                "FUN_080009f0": {
                    "1": "check_condition"
                },
                "FUN_08000724": {
                    "1": "calculate_value2"
                },
                "FUN_0800016c": {
                    "1": "calculate_first_value"
                },
                "FUN_080004d0": {
                    "1": "calculate_misc_value"
                },
                "FIT_0800708c": {
                    "1": "some_function"
                },
                "uVar11": {
                    "1": "temp7"
                },
                "uVar12": {
                    "1": "temp8"
                },
                "<sub-function-name>": {
                    "1": "<more_descriptive_sub-function_name>"
                },
                "uVar1": {
                    "1": "result1"
                },
                "CONSTANT_VALUE_1": {
                    "1": "0x80000000"
                },
                "CONSTANT_VALUE_2": {
                    "1": "0x7ff00001"
                },
                "CONSTANT_VALUE_3": {
                    "1": "0x7ff00000"
                },
                "FUC_0800708c": {
                    "1": "get_floating_point_value"
                }
            }
        },
        "FUN_0800708c": {
            "entrypoint": "0x0800708c",
            "current_name": "FUNC_0800708c",
            "code": "\nvoid FUNC_0800708c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800708c": "FUNC_0800708c"
            },
            "calling": [
                "FUN_08006d68",
                "FUN_08005c70",
                "FUN_08005854",
                "FUN_08006228",
                "FUN_08006070"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08007092": {
            "entrypoint": "0x08007092",
            "current_name": "extract_bit_08007092",
            "code": "\nuint extract_bit_08007092(undefined4 input_flag,uint input_value)\n\n{\n  return (input_value | 0x80000000) + 0x100000 >> 0x1f;\n}\n\n",
            "renaming": {
                "FUN_08007092": "extract_bit_08007092",
                "param_1": "input_flag",
                "param_2": "input_value"
            },
            "calling": [
                "FUN_08005900"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08007092": {
                    "1": "get_shifted_bit",
                    "2": "get_bit_value",
                    "3": "extract_bit"
                },
                "param_1": {
                    "1": "result",
                    "5": "value",
                    "9": "input_flag",
                    "2": "offset"
                },
                "param_2": {
                    "1": "input_number",
                    "12": "input_value",
                    "2": "value",
                    "4": "bit_mask"
                },
                "param_3": {
                    "1": "new_parameter_name3"
                },
                "param_4": {
                    "1": "shift"
                },
                "param_5": {
                    "1": "mask"
                },
                "result": {
                    "1": "bitwise_result"
                },
                "<unnamed_variable_1>": {
                    "1": "high_bit"
                },
                "newVariableName1": {
                    "1": "modified_value"
                },
                "newVariableName2": {
                    "1": "shifted_value"
                }
            }
        },
        "FUN_0800709e": {
            "entrypoint": "0x0800709e",
            "current_name": "initialize_0800709e",
            "code": "\nvoid initialize_0800709e(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800709e": "initialize_0800709e",
                "undefined4": "void"
            },
            "calling": [
                "FUN_08005900",
                "FUN_08005854",
                "FUN_08005bc8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800709e": {
                    "1": "get_zero",
                    "14": "initialize",
                    "5": "get_default_value",
                    "4": "initialize_application",
                    "3": "initialize_program"
                },
                "undefined4": {
                    "11": "void",
                    "1": "int"
                },
                "<no parameters>": {
                    "1": ""
                },
                "<no variables>": {
                    "1": ""
                },
                "PTR_param": {
                    "1": "param"
                },
                "PTR_result": {
                    "1": "result"
                },
                "result": {
                    "1": "return_value"
                }
            }
        },
        "FUN_080070a4": {
            "entrypoint": "0x080070a4",
            "current_name": "get_infinity_080070a4",
            "code": "\ndouble get_infinity_080070a4(void)\n\n{\n  return 0x7ff8000000000000;\n}\n\n",
            "renaming": {
                "FUN_080070a4": "get_infinity_080070a4",
                "undefined8": "double"
            },
            "calling": [
                "FUN_08005854",
                "FUN_08006228"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080070a4": {
                    "1": "get_nan_value",
                    "2": "get_positive_infinity",
                    "9": "get_infinity_value",
                    "13": "get_infinity"
                },
                "PTR_123456": {
                    "1": "unnamed_parameter"
                },
                "DAT_789012": {
                    "1": "unnamed_variable"
                },
                "undefined8": {
                    "8": "double"
                },
                "0x7ff8000000000000": {
                    "1": "quiet_nan",
                    "5": "infinity"
                },
                "return value": {
                    "1": "infinity"
                },
                "original_function_name": {
                    "1": "more_descriptive_function_name"
                },
                "original_parameter_name_1": {
                    "1": "new_parameter_name1"
                },
                "original_parameter_name_2": {
                    "1": "new_parameter_name2"
                },
                "original_variable_name_1": {
                    "1": "new_variable_name1"
                }
            }
        },
        "FUN_080070b0": {
            "entrypoint": "0x080070b0",
            "current_name": "calculate_result_080070b0",
            "code": "\nundefined8 calculate_result_080070b0(uint input1,uint input2,undefined4 input3)\n\n{\n  int index;\n  undefined4 temp_var2;\n  uint temp_var3;\n  undefined4 temp_var4;\n  uint temp_var5;\n  uint temp_var6;\n  uint temp_var7;\n  undefined8 result;\n  \n  temp_var7 = (input2 << 1) >> 0x15;\n  temp_var6 = temp_var7 - 0x3ff;\n  temp_var3 = input2;\n  if ((int)temp_var6 < 0x14) {\n    if ((int)temp_var6 < 0) {\n      if ((input2 & 0x7fffffff | input1) == 0) {\n        return combine_u_ints(input2,input1);\n      }\n      temp_var3 = input2 & 0xfffff | input1;\n      index = ((int)input2 >> 0x1f) * -8;\n      temp_var2 = *(undefined4 *)(&DAT_08007430 + index);\n      temp_var4 = *(undefined4 *)(&DAT_08007434 + index);\n      result = FUN_0800016c(input1,(-temp_var3 | temp_var3) >> 0xc & 0x80000 | input2 & 0xfffe0000,temp_var2,\n                           temp_var4,input1,input2,input3);\n      result = FUN_08000168((int)result,(int)((ulonglong)result >> 0x20),temp_var2,temp_var4);\n      return combine_u_ints((uint)((ulonglong)result >> 0x20) & 0x7fffffff | input2 & 0x80000000,\n                      (int)result);\n    }\n    temp_var7 = 0xfffff >> (temp_var6 & 0xff);\n    if ((input2 & temp_var7 | input1) == 0) {\n      return combine_u_ints(input2,input1);\n    }\n    temp_var7 = temp_var7 >> 1;\n    temp_var5 = input2 & temp_var7 | input1;\n    if (temp_var5 != 0) {\n      if (temp_var6 == 0x13) {\n        temp_var5 = 0x80000000;\n      }\n      else {\n        temp_var5 = 0;\n      }\n      temp_var3 = 0x40000 >> (temp_var6 & 0xff) | input2 & ~temp_var7;\n    }\n  }\n  else {\n    if (0x33 < (int)temp_var6) {\n      if (temp_var6 != 0x400) {\n        return combine_u_ints(input2,input1);\n      }\n      result = FUN_0800016c();\n      return result;\n    }\n    temp_var7 = temp_var7 - 0x413;\n    temp_var6 = 0xffffffff >> (temp_var7 & 0xff);\n    if ((input1 & temp_var6) == 0) {\n      return combine_u_ints(input2,input1);\n    }\n    temp_var6 = temp_var6 >> 1;\n    temp_var5 = input1;\n    if ((input1 & temp_var6) != 0) {\n      temp_var5 = 0x40000000 >> (temp_var7 & 0xff) | input1 & ~temp_var6;\n    }\n  }\n  index = ((int)input2 >> 0x1f) * -8;\n  temp_var2 = *(undefined4 *)(&DAT_08007430 + index);\n  temp_var4 = *(undefined4 *)(&DAT_08007434 + index);\n  result = FUN_0800016c(temp_var5,temp_var3,temp_var2,temp_var4,input1,input2,input3);\n  result = FUN_08000168((int)result,(int)((ulonglong)result >> 0x20),temp_var2,temp_var4);\n  return result;\n}\n\n",
            "renaming": {
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "iVar1": "index",
                "uVar2": "temp_var2",
                "uVar3": "temp_var3",
                "uVar4": "temp_var4",
                "uVar5": "temp_var5",
                "uVar6": "temp_var6",
                "uVar7": "temp_var7",
                "uVar8": "result",
                "FUN_080070b0": "calculate_result_080070b0",
                "CONCAT44": "combine_u_ints"
            },
            "calling": [
                "FUN_08005900"
            ],
            "called": [
                "FUN_08000168",
                "FUN_0800016c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "param_1": {
                    "4": "input_1",
                    "2": "input_value_1",
                    "3": "input_param1",
                    "1": "input_param",
                    "17": "input1"
                },
                "param_2": {
                    "1": "b",
                    "17": "input2",
                    "3": "input_param2",
                    "2": "input_value_2",
                    "4": "input_2"
                },
                "param_3": {
                    "4": "input_3",
                    "1": "param",
                    "3": "input_param3",
                    "2": "input_value_3",
                    "16": "input3"
                },
                "iVar1": {
                    "1": "multiplier",
                    "2": "shift_amount",
                    "11": "index",
                    "6": "temp_var1"
                },
                "uVar2": {
                    "1": "var2",
                    "8": "temp_var2",
                    "3": "value1"
                },
                "uVar3": {
                    "1": "temp3",
                    "7": "temp_var3",
                    "2": "updated_input2",
                    "6": "var2"
                },
                "uVar4": {
                    "6": "var3",
                    "1": "function_data_2",
                    "2": "var2",
                    "7": "temp_var4"
                },
                "uVar5": {
                    "1": "result",
                    "7": "temp_var5",
                    "5": "var4"
                },
                "uVar6": {
                    "1": "shift",
                    "2": "shifted_difference",
                    "5": "difference",
                    "7": "temp_var6"
                },
                "uVar7": {
                    "2": "shifted_value",
                    "5": "var6",
                    "1": "o",
                    "3": "shifted_input2",
                    "7": "temp_var7"
                },
                "uVar8": {
                    "2": "output",
                    "25": "result",
                    "3": "final_result",
                    "1": "temp8"
                },
                "FUN_080070b0": {
                    "1": "decode_and_process_data",
                    "6": "calculate_result"
                },
                "CONCAT44": {
                    "1": "combine_u_ints"
                },
                "FUN_0800016c": {
                    "1": "calculate_result"
                },
                "FUN_08000168": {
                    "1": "sub_function2"
                }
            }
        },
        "FUN_080071c0": {
            "entrypoint": "0x080071c0",
            "current_name": "calculate_floating_point_080071c0",
            "code": "\nundefined8 calculate_floating_point_080071c0(uint input1,uint input2,int offset,undefined4 constant)\n\n{\n  uint shifted_value;\n  undefined4 result1;\n  int sum;\n  undefined4 value2;\n  uint upper_part;\n  undefined8 result;\n  \n  result = CONCAT44(input2,input1);\n  shifted_value = (input2 << 1) >> 0x15;\n  if (shifted_value == 0) {\n    if ((input2 & 0x7fffffff | input1) == 0) {\n      return result;\n    }\n    result = FUN_080004d0(input1,input2,0,0x43500000);\n    if (-0xc351 < offset) {\n      shifted_value = ((uint)((int)((ulonglong)result >> 0x20) << 1) >> 0x15) - 0x36;\n      goto label_2;\n    }\nlabel_1:\n    result1 = 0xc2f8f359;\n    value2 = 0x1a56e1f;\n  }\n  else {\n    if (shifted_value == 0x7ff) {\n      result = FUN_0800016c(input1,input2,input1,input2,constant);\n      return result;\n    }\nlabel_2:\n    upper_part = (uint)((ulonglong)result >> 0x20);\n    result1 = (undefined4)result;\n    sum = shifted_value + offset;\n    if (sum < 0x7ff) {\n      if (0 < sum) {\n        return CONCAT44(upper_part & 0x800fffff | sum * 0x100000,result1);\n      }\n      if (sum + 0x35 < 0 == SCARRY4(sum,0x35)) {\n        result = CONCAT44(upper_part & 0x800fffff | (sum + 0x36) * 0x100000,result1);\n        result1 = 0;\n        value2 = 0x3c900000;\n        goto label_3;\n      }\n      if (offset < 0xc351) {\n        result = FUNC_0800729c(0xc2f8f359,0x1a56e1f,result1,upper_part);\n        goto label_1;\n      }\n    }\n    result = FUNC_0800729c(0x8800759c,0x7e37e43c,result1,upper_part);\n    result1 = 0x8800759c;\n    value2 = 0x7e37e43c;\n  }\nlabel_3:\n  result = FUN_080004d0((int)result,(int)((ulonglong)result >> 0x20),result1,value2);\n  return result;\n}\n\n",
            "renaming": {
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "offset",
                "param_4": "constant",
                "uVar1": "shifted_value",
                "uVar2": "result1",
                "iVar3": "sum",
                "uVar4": "value2",
                "uVar5": "upper_part",
                "uVar6": "result",
                "FUN_080071c0": "calculate_floating_point_080071c0",
                "LAB_080071ec": "label_1",
                "LAB_08007210": "label_2",
                "LAB_0800722e": "label_3"
            },
            "calling": [
                "FUN_08006228"
            ],
            "called": [
                "FUN_080004d0",
                "FUN_0800016c",
                "FUN_0800729c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "param_1": {
                    "1": "integer_part",
                    "4": "input_param1",
                    "3": "value1",
                    "12": "input1",
                    "2": "input_value1"
                },
                "param_2": {
                    "1": "input_2",
                    "12": "input2",
                    "4": "input_param2",
                    "2": "input_value2",
                    "3": "value2"
                },
                "param_3": {
                    "1": "input_value3",
                    "3": "exponent",
                    "4": "count",
                    "2": "modifier",
                    "5": "offset"
                },
                "param_4": {
                    "7": "flag",
                    "2": "param4",
                    "1": "parameter",
                    "3": "input_param4",
                    "9": "constant"
                },
                "uVar1": {
                    "1": "shifted_input_value2",
                    "12": "shifted_value",
                    "8": "shifted_input2"
                },
                "uVar2": {
                    "1": "result_var1",
                    "2": "temp_var_1",
                    "6": "result1",
                    "5": "value1",
                    "4": "temp_var1"
                },
                "iVar3": {
                    "1": "temp_value2",
                    "3": "temp_var2",
                    "2": "modified_value",
                    "15": "sum"
                },
                "uVar4": {
                    "3": "temp_var3",
                    "1": "temp_value3",
                    "2": "result3",
                    "5": "value2",
                    "4": "result2"
                },
                "uVar5": {
                    "1": "extracted_value1",
                    "2": "high_part",
                    "3": "upper_part"
                },
                "uVar6": {
                    "1": "temp2",
                    "2": "concatenated_value",
                    "19": "result"
                },
                "FUN_080071c0": {
                    "1": "calculate_modified_value",
                    "3": "calculate_float_value",
                    "5": "calculate_floating_point"
                },
                "LAB_080071ec": {
                    "1": "label1"
                },
                "LAB_08007210": {
                    "1": "label_2"
                },
                "LAB_0800722e": {
                    "1": "label3"
                },
                "FUN_080004d0": {
                    "1": "calculate_result"
                },
                "FUN_0800016c": {
                    "1": "calculate_unsigned_int"
                },
                "FUNC_0800729c": {
                    "1": "third_sub_function",
                    "2": "perform_operation"
                }
            }
        },
        "FUN_0800729c": {
            "entrypoint": "0x0800729c",
            "current_name": "FUNC_0800729c",
            "code": "\nvoid FUNC_0800729c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800729c": "FUNC_0800729c"
            },
            "calling": [
                "FUN_080071c0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080072ac": {
            "entrypoint": "0x080072ac",
            "current_name": "get_data_value_080072ac",
            "code": "\nuint32 get_data_value_080072ac(void)\n\n{\n  return_value DAT_200001c0;\n}\n\n",
            "renaming": {
                "FUN_080072ac": "get_data_value_080072ac",
                "undefined4": "uint32",
                "return": "return_value"
            },
            "calling": [
                "FUN_08005900",
                "FUN_08005854",
                "FUN_08005bc8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080072ac": {
                    "8": "get_data",
                    "1": "get_global_constant",
                    "2": "get_data_pointer",
                    "13": "get_data_value"
                },
                "DAT_200001c0": {
                    "7": "data",
                    "1": "data_offset",
                    "2": "data_value"
                },
                "undefined4": {
                    "1": "uint32"
                },
                "return": {
                    "1": "return_value"
                }
            }
        },
        "FUN_080072b8": {
            "entrypoint": "0x080072b8",
            "current_name": "update_data_pointer_080072b8",
            "code": "\nvoid update_data_pointer_080072b8(int offset)\n\n{\n  if (DAT_200002b4 == (undefined *)0x0) {\n    DAT_200002b4 = &DAT_200016a0;\n  }\n  DAT_200002b4 = DAT_200002b4 + offset;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080072b8": "update_data_pointer_080072b8",
                "param_1": "offset"
            },
            "calling": [
                "FUN_0800581c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080072b8": {
                    "1": "increment_pointer_by",
                    "2": "increment_value",
                    "5": "update_data_pointer",
                    "4": "update_data",
                    "3": "increment_pointer"
                },
                "param_1": {
                    "2": "increment",
                    "3": "increment_value",
                    "1": "increment_amount",
                    "6": "value",
                    "13": "offset",
                    "4": "amount"
                },
                "DAT_200002b4": {
                    "1": "current_value",
                    "2": "data_ptr",
                    "3": "pointer",
                    "7": "data_pointer",
                    "6": "current_pointer"
                },
                "DAT_200016a0": {
                    "3": "default_data",
                    "1": "default_data_ptr",
                    "2": "initial_data_address"
                }
            }
        },
        "FUN_080072d4": {
            "entrypoint": "0x080072d4",
            "current_name": "FUNC_080072d4",
            "code": "\nvoid FUNC_080072d4(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080072d4": "FUNC_080072d4"
            },
            "calling": [
                "FUN_08000134",
                "FUN_08004fb4",
                "FUN_08000110"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080072e0": {
            "entrypoint": "0x080072e0",
            "current_name": "FUNC_080072e0",
            "code": "\nvoid FUNC_080072e0(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080072e0": "FUNC_080072e0"
            },
            "calling": [],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        }
    },
    "used_tokens": 732134,
    "layers": [
        [
            "FUN_08000110",
            "FUN_08000134",
            "FUN_08000150",
            "FUN_08000168",
            "FUN_0800016c",
            "FUN_08000404",
            "FUN_08000428",
            "FUN_080004d0",
            "FUN_080006ac",
            "FUN_08000724",
            "FUN_08000892",
            "FUN_08000904",
            "FUN_08000980",
            "FUN_08000990",
            "FUN_080009a0",
            "FUN_080009b4",
            "FUN_080009c8",
            "FUN_080009f0",
            "FUN_08000a04",
            "FUN_08000a30",
            "FUN_08000ad8",
            "FUN_08000adc",
            "FUN_08000c3c",
            "FUN_08000c44",
            "FUN_08000cec",
            "FUN_08000e54",
            "FUN_08000f9c",
            "FUN_08000ffc",
            "FUN_08001004",
            "FUN_08001014",
            "FUN_08001028",
            "FUN_08001050",
            "FUN_08001064",
            "FUN_08001078",
            "FUN_080010c4",
            "FUN_08001104",
            "FUN_08001128",
            "FUN_0800114c",
            "FUN_0800115c",
            "FUN_08001170",
            "FUN_08001194",
            "FUN_080011fc",
            "FUN_08001214",
            "FUN_08001240",
            "FUN_08001264",
            "FUN_08001424",
            "FUN_0800142e",
            "FUN_08001436",
            "FUN_08001460",
            "FUN_080014e2",
            "FUN_08001530",
            "FUN_080015e8",
            "FUN_080016f4",
            "FUN_08001754",
            "FUN_08001828",
            "FUN_08001938",
            "FUN_08001b58",
            "FUN_08002008",
            "FUN_0800209c",
            "FUN_08002214",
            "FUN_08002220",
            "FUN_08002250",
            "FUN_08002280",
            "FUN_080022d0",
            "FUN_08002324",
            "FUN_08002368",
            "FUN_080023d0",
            "FUN_08002404",
            "FUN_0800245c",
            "FUN_08002520",
            "FUN_08002538",
            "FUN_08002564",
            "FUN_080025a4",
            "FUN_080025e8",
            "FUN_08002724",
            "FUN_0800290c",
            "FUN_0800299a",
            "FUN_08002ad0",
            "FUN_08002b48",
            "FUN_08002bf0",
            "FUN_08002cb0",
            "FUN_08002d88",
            "FUN_08002ea0",
            "FUN_08002ec0",
            "FUN_08002ed4",
            "FUN_08002ee8",
            "FUN_08002f28",
            "FUN_08003034",
            "FUN_08003068",
            "FUN_08003298",
            "FUN_08003314",
            "FUN_08003320",
            "FUN_08003330",
            "FUN_08003eb0",
            "FUN_08003ec8",
            "FUN_08003f3c",
            "FUN_08003fc4",
            "FUN_08003fd0",
            "FUN_08003fdc",
            "FUN_08003fe8",
            "FUN_08003ff4",
            "FUN_08004028",
            "FUN_0800403c",
            "FUN_0800407c",
            "FUN_080040b8",
            "FUN_080040e8",
            "FUN_0800411c",
            "FUN_08004194",
            "FUN_080041ae",
            "FUN_080041c4",
            "FUN_0800426c",
            "FUN_08004300",
            "FUN_08004348",
            "FUN_08004384",
            "FUN_080043bc",
            "FUN_080043f0",
            "FUN_08004410",
            "FUN_08004434",
            "FUN_08004458",
            "FUN_08004490",
            "FUN_08004514",
            "FUN_0800458c",
            "FUN_0800483c",
            "FUN_08004a30",
            "FUN_08004a84",
            "FUN_08004c18",
            "FUN_08004c30",
            "FUN_08004c64",
            "FUN_08004c70",
            "FUN_08004c8c",
            "FUN_08004cac",
            "FUN_08004ccc",
            "FUN_08004d48",
            "FUN_08004d8c",
            "FUN_08004e14",
            "FUN_08004e7c",
            "FUN_08004f10",
            "thunk_FUN_0800115c",
            "FUN_08004fb4",
            "FUN_08004ffc",
            "FUN_08005044",
            "FUN_080050fc",
            "FUN_080052e4",
            "FUN_080053d4",
            "FUN_08005614",
            "FUN_08005630",
            "FUN_08005646",
            "FUN_0800567c",
            "FUN_08005714",
            "FUN_080057d0",
            "FUN_0800581c",
            "FUN_08005840",
            "FUN_08005854",
            "thunk_FUN_08006070",
            "FUN_08005900",
            "FUN_08005bc8",
            "FUN_08005c70",
            "FUN_08006070",
            "FUN_08006228",
            "FUN_08006c0c",
            "FUN_08006d68",
            "FUN_08007092",
            "FUN_0800709e",
            "FUN_080070a4",
            "FUN_080070b0",
            "FUN_080071c0",
            "FUN_080072ac",
            "FUN_080072b8"
        ]
    ],
    "locked_functions": []
}