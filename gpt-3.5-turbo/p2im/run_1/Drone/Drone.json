{
    "functions": {
        "FUN_08000110": {
            "entrypoint": "0x08000110",
            "current_name": "initialize_flag_08000110",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0800011c) */\n\nundefined4 initialize_flag_08000110(undefined4 input)\n\n{\n  if ((char)DAT_20000228 == '\\0') {\n    DAT_20000228._0_1_ = '\\x01';\n  }\n  return input;\n}\n\n",
            "renaming": {
                "FUN_08000110": "initialize_flag_08000110",
                "param_1": "input"
            },
            "calling": [],
            "called": [
                "FUN_080072d4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08000110": {
                    "1": "initialize_data",
                    "3": "update_flag",
                    "21": "initialize_flag",
                    "2": "set_flag_if_not_set"
                },
                "param_1": {
                    "15": "input",
                    "8": "input_value",
                    "3": "value",
                    "1": "status",
                    "2": "input_param"
                },
                "DAT_20000228": {
                    "19": "flag",
                    "1": "flag_data",
                    "2": "flag_variable"
                }
            }
        },
        "FUN_08000134": {
            "entrypoint": "0x08000134",
            "current_name": "concatenate_integers_08000134",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0800013a) */\n\nundefined8 concatenate_integers_08000134(undefined4 first_integer,undefined4 second_integer)\n\n{\n  return CONCAT44(second_integer,first_integer);\n}\n\n",
            "renaming": {
                "FUN_08000134": "concatenate_integers_08000134",
                "param_1": "first_integer",
                "param_2": "second_integer"
            },
            "calling": [
                "FUN_08004fb4"
            ],
            "called": [
                "FUN_080072d4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08000134": {
                    "2": "concatenate_parameters",
                    "3": "concatenate_values",
                    "4": "concatenate_64bit_values",
                    "1": "concatenate_ints",
                    "7": "concatenate_integers"
                },
                "param_1": {
                    "2": "value1",
                    "1": "input1",
                    "6": "first_integer",
                    "3": "first_param"
                },
                "param_2": {
                    "1": "second_u_int",
                    "2": "value_2",
                    "3": "second_parameter",
                    "6": "second_integer"
                }
            }
        },
        "FUN_08000150": {
            "entrypoint": "0x08000150",
            "current_name": "find_end_of_string_08000150",
            "code": "\nchar * find_end_of_string_08000150(char *str)\n\n{\n  char current_char;\n  char *next_char;\n  char *current_char;\n  \n  current_char = str;\n  do {\n    next_char = current_char + 1;\n    current_char = *current_char;\n    current_char = next_char;\n  } while (current_char != '\\0');\n  return next_char + (-1 - (int)str);\n}\n\n",
            "renaming": {
                "FUN_08000150": "find_end_of_string_08000150",
                "param_1": "str",
                "pcVar3": "current_char",
                "pcVar2": "next_char",
                "cVar1": "current_char"
            },
            "calling": [
                "FUN_08004c8c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08000150": {
                    "1": "find_null_terminated",
                    "13": "find_end_of_string",
                    "3": "find_last_character_index",
                    "5": "get_string_length"
                },
                "param_1": {
                    "9": "string",
                    "12": "str",
                    "10": "input_string"
                },
                "pcVar3": {
                    "3": "current_char_ptr",
                    "1": "current_character_ptr",
                    "10": "current_char",
                    "5": "current_position"
                },
                "pcVar2": {
                    "8": "next_character",
                    "4": "next_char_ptr",
                    "1": "ptr_next_char",
                    "15": "next_char",
                    "2": "next_character_ptr"
                },
                "cVar1": {
                    "8": "current_character",
                    "1": "char",
                    "18": "current_char",
                    "3": "current_char_value"
                }
            }
        },
        "FUN_08000168": {
            "entrypoint": "0x08000168",
            "current_name": "calculate_result_08000168",
            "code": "\nulonglong calculate_result_08000168(uint input1,uint input2,uint input3,uint input4)\n\n{\n  int shift1;\n  byte carry;\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  uint temp1;\n  uint result2;\n  int shift_amount;\n  uint shifted_input2;\n  uint result2;\n  uint temp3;\n  uint temp4;\n  bool flag1;\n  bool flag2;\n  bool flag3;\n  \n  temp1 = input4 ^ 0x80000000;\n  shifted_input2 = input2 << 1;\n  input4 = input4 << 1;\n  flag1 = ((input2 ^ temp1) & 0x7fffffff) == 0;\n  flag2 = flag1 && input1 == input3;\n  if (!flag1 || input1 != input3) {\n    flag2 = (shifted_input2 | input1) == 0;\n  }\n  if (!flag2) {\n    flag2 = (input4 | input3) == 0;\n  }\n  shift_amount = (int)shifted_input2 >> 0x15;\n  if (!flag2) {\n    flag2 = shift_amount == -1;\n  }\n  shift1 = (int)input4 >> 0x15;\n  if (!flag2) {\n    flag2 = shift1 == -1;\n  }\n  if (flag2) {\n    if (shift_amount == -1 || shift1 == -1) {\n      shifted_input2 = temp1;\n      temp3 = input3;\n      if (shift_amount == -1) {\n        shifted_input2 = input2;\n        temp3 = input1;\n      }\n      if (shift_amount != -1 || shift1 != -1) {\n        input3 = temp3;\n        temp1 = shifted_input2;\n      }\n      flag2 = (temp3 | shifted_input2 << 0xc) == 0;\n      if (flag2) {\n        flag2 = (input3 | temp1 << 0xc) == 0;\n      }\n      if (flag2) {\n        flag2 = shifted_input2 == temp1;\n      }\n      if (!flag2) {\n        shifted_input2 = shifted_input2 | 0x80000;\n      }\n      return CONCAT44(shifted_input2,temp3);\n    }\n    if (((input2 ^ temp1) & 0x7fffffff) != 0 || input1 != input3) {\n      if ((shifted_input2 | input1) == 0) {\n        input1 = input3;\n        input2 = temp1;\n      }\n      return CONCAT44(input2,input1);\n    }\n    if (input2 != temp1) {\n      return 0;\n    }\n    if (shifted_input2 >> 0x15 == 0) {\n      flag2 = (input1 & 0x80000000) != 0;\n      temp1 = input2 * 2 + (uint)flag2;\n      if (CARRY4(input2,input2) || CARRY4(input2 * 2,(uint)flag2)) {\n        temp1 = temp1 | 0x80000000;\n      }\n      return CONCAT44(temp1,input1 << 1);\n    }\n    if (shifted_input2 < 0xffc00000) {\n      return CONCAT44(input2 + 0x100000,input1);\n    }\n    input2 = input2 & 0x80000000;\nLAB_080003ac:\n    return (ulonglong)(input2 | 0x7ff00000) << 0x20;\n  }\n  shifted_input2 = shifted_input2 >> 0x15;\n  input4 = input4 >> 0x15;\n  temp3 = input4 - shifted_input2;\n  flag2 = temp3 != 0;\n  if (input4 < shifted_input2) {\n    temp3 = -temp3;\n  }\n  result2 = input1;\n  result2 = input2;\n  if (flag2 && shifted_input2 <= input4) {\n    shifted_input2 = shifted_input2 + temp3;\n    result2 = input3;\n    result2 = temp1;\n    input3 = input1;\n    temp1 = input2;\n  }\n  if (0x36 < temp3) {\n    return CONCAT44(result2,result2);\n  }\n  temp2 = result2 & 0xfffff | 0x100000;\n  if ((result2 & 0x80000000) != 0) {\n    flag2 = result2 != 0;\n    result2 = -result2;\n    temp2 = -temp2 - (uint)flag2;\n  }\n  result2 = temp1 & 0xfffff | 0x100000;\n  if ((temp1 & 0x80000000) != 0) {\n    flag2 = input3 != 0;\n    input3 = -input3;\n    result2 = -result2 - (uint)flag2;\n  }\n  if (shifted_input2 == temp3) {\n    result2 = result2 ^ 0x100000;\n    if (shifted_input2 == 0) {\n      temp2 = temp2 ^ 0x100000;\n      shifted_input2 = 1;\n    }\n    else {\n      temp3 = temp3 - 1;\n    }\n  }\n  temp1 = -temp3 + 0x20;\n  if ((int)temp3 < 0x21) {\n    temp4 = input3 << (temp1 & 0xff);\n    input3 = input3 >> (temp3 & 0xff);\n    temp1 = result2 + input3;\n    temp3 = result2 << (temp1 & 0xff);\n    temp1 = temp1 + temp3;\n    temp2 = temp2 + CARRY4(result2,input3) + ((int)result2 >> (temp3 & 0xff)) +\n            (uint)CARRY4(temp1,temp3);\n  }\n  else {\n    temp4 = result2 << (-temp3 + 0x40 & 0xff);\n    if (input3 != 0) {\n      temp4 = temp4 | 2;\n    }\n    result2 = (int)result2 >> (temp3 - 0x20 & 0xff);\n    temp1 = result2 + result2;\n    temp2 = temp2 + ((int)result2 >> 0x1f) + (uint)CARRY4(result2,result2);\n  }\n  input2 = temp2 & 0x80000000;\n  temp3 = temp2;\n  if ((int)temp2 < 0) {\n    flag2 = temp4 == 0;\n    temp4 = -temp4;\n    temp3 = -temp1;\n    temp1 = -(uint)!flag2 - temp1;\n    temp3 = -(uint)(flag2 <= temp3) - temp2;\n  }\n  if (0xfffff < temp3) {\n    result2 = shifted_input2 - 1;\n    if (0x1fffff < temp3) {\n      result2 = temp3 & 1;\n      temp3 = temp3 >> 1;\n      carry = (byte)temp1;\n      temp1 = (uint)(result2 != 0) << 0x1f | temp1 >> 1;\n      temp4 = (uint)(carry & 1) << 0x1f | temp4 >> 1;\n      result2 = shifted_input2;\n      if (0xffbfffff < shifted_input2 * 0x200000) goto LAB_080003ac;\n    }\nLAB_08000278:\n    flag2 = 0x7fffffff < temp4;\n    if (temp4 == 0x80000000) {\n      flag2 = (temp1 & 1) != 0;\n    }\n    return CONCAT44(temp3 + result2 * 0x100000 + (uint)CARRY4(temp1,(uint)flag2) | input2,\n                    temp1 + flag2);\n  }\n  flag1 = (temp4 & 0x80000000) != 0;\n  temp4 = temp4 << 1;\n  result2 = temp1 * 2;\n  flag2 = CARRY4(temp1,temp1);\n  temp1 = temp1 * 2 + (uint)flag1;\n  temp3 = temp3 * 2 + (uint)(flag2 || CARRY4(result2,(uint)flag1));\n  result2 = shifted_input2 - 2;\n  if ((temp3 & 0x100000) != 0) goto LAB_08000278;\n  result2 = temp1;\n  shifted_input2 = temp3;\n  if (temp3 == 0) {\n    result2 = 0;\n    shifted_input2 = temp1;\n  }\n  shift_amount = LZCOUNT(shifted_input2);\n  if (temp3 == 0) {\n    shift_amount = shift_amount + 0x20;\n  }\n  temp3 = shift_amount - 0xb;\n  flag3 = SBORROW4(temp3,0x20);\n  temp1 = shift_amount - 0x2b;\n  flag2 = (int)temp1 < 0;\n  flag1 = temp1 == 0;\n  if ((int)temp3 < 0x20) {\n    flag3 = SCARRY4(temp1,0xc);\n    shift_amount = shift_amount + -0x1f;\n    flag2 = shift_amount < 0;\n    flag1 = shift_amount == 0;\n    temp1 = temp3;\n    if (!flag1 && flag2 == flag3) {\n      result2 = shifted_input2 << (temp3 & 0xff);\n      shifted_input2 = shifted_input2 >> (0xcU - shift_amount & 0xff);\n      goto LAB_080002f0;\n    }\n  }\n  if (flag1 || flag2 != flag3) {\n    temp4 = 0x20 - temp1;\n  }\n  shifted_input2 = shifted_input2 << (temp1 & 0xff);\n  if (flag1 || flag2 != flag3) {\n    shifted_input2 = shifted_input2 | result2 >> (temp4 & 0xff);\n  }\n  if (flag1 || flag2 != flag3) {\n    result2 = result2 << (temp1 & 0xff);\n  }\nLAB_080002f0:\n  if ((int)temp3 <= (int)result2) {\n    return CONCAT44(shifted_input2 + (result2 - temp3) * 0x100000 | input2,result2);\n  }\n  temp1 = ~(result2 - temp3);\n  if ((int)temp1 < 0x1f) {\n    shift_amount = temp1 - 0x13;\n    if (shift_amount != 0 && shift_amount < 0 == SCARRY4(temp1 - 0x1f,0xc)) {\n      return CONCAT44(temp2,result2 >> (0x20 - (0xcU - shift_amount) & 0xff) | shifted_input2 << (0xcU - shift_amount & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    temp1 = temp1 + 1;\n    return CONCAT44(input2 | shifted_input2 >> (temp1 & 0xff),\n                    result2 >> (temp1 & 0xff) | shifted_input2 << (0x20 - temp1 & 0xff));\n  }\n  return CONCAT44(temp2,shifted_input2 >> (temp1 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "iVar1": "shift1",
                "bVar2": "carry",
                "uVar3": "temp1",
                "uVar4": "temp2",
                "uVar5": "temp3",
                "uVar6": "temp1",
                "uVar7": "result2",
                "iVar8": "shift_amount",
                "uVar9": "shifted_input2",
                "uVar10": "result2",
                "uVar11": "temp3",
                "uVar12": "temp4",
                "bVar13": "flag1",
                "bVar14": "flag2",
                "bVar15": "flag3",
                "FUN_08000168": "calculate_result_08000168"
            },
            "calling": [
                "FUN_08006070",
                "FUN_08006d68",
                "FUN_0800411c",
                "FUN_08005c70",
                "FUN_08006228",
                "FUN_080070b0",
                "FUN_08006c0c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "param_1": {
                    "10": "input_1",
                    "2": "a",
                    "1": "first_parameter",
                    "14": "input1",
                    "3": "input_a"
                },
                "param_2": {
                    "14": "input2",
                    "3": "input_b",
                    "2": "b",
                    "1": "quotient",
                    "10": "input_2"
                },
                "param_3": {
                    "10": "input_3",
                    "2": "c",
                    "3": "input_c",
                    "1": "third_parameter",
                    "14": "input3"
                },
                "param_4": {
                    "3": "input_d",
                    "1": "remainder",
                    "10": "input_4",
                    "2": "d",
                    "14": "input4"
                },
                "iVar1": {
                    "1": "temp3",
                    "3": "shift1",
                    "2": "temp5"
                },
                "bVar2": {
                    "1": "bool_temp",
                    "5": "carry"
                },
                "uVar3": {
                    "2": "result_1",
                    "1": "temp_var1",
                    "6": "temp1",
                    "5": "carry"
                },
                "uVar4": {
                    "1": "calc_7",
                    "6": "temp2",
                    "2": "result_2"
                },
                "uVar5": {
                    "1": "var_5",
                    "2": "sum1",
                    "6": "temp3"
                },
                "uVar6": {
                    "1": "var_6",
                    "2": "temp_1",
                    "3": "temp1"
                },
                "uVar7": {
                    "1": "temp4",
                    "2": "temp5",
                    "3": "result2"
                },
                "iVar8": {
                    "1": "temp4",
                    "3": "shift_amount",
                    "2": "shift_amount1"
                },
                "uVar9": {
                    "1": "var_3",
                    "3": "shifted_input2",
                    "2": "result1"
                },
                "uVar10": {
                    "1": "result_2",
                    "2": "temp4"
                },
                "uVar11": {
                    "1": "difference",
                    "2": "temp3"
                },
                "uVar12": {
                    "1": "result4",
                    "2": "temp6",
                    "3": "temp4"
                },
                "bVar13": {
                    "1": "var_13",
                    "5": "flag1",
                    "2": "is_zero1"
                },
                "bVar14": {
                    "2": "condition2",
                    "1": "is_condition_2",
                    "5": "flag2"
                },
                "bVar15": {
                    "1": "is_borrow",
                    "5": "flag3",
                    "2": "flag_3"
                },
                "FUN_08000168": {
                    "2": "reverse_binary_operation",
                    "1": "calculate_new_number",
                    "3": "calculate",
                    "4": "reverse_bits",
                    "5": "calculate_result"
                },
                "uVar13": {
                    "1": "result_1"
                },
                "uVar14": {
                    "1": "result_2"
                },
                "uVar15": {
                    "1": "result_3"
                },
                "bVar16": {
                    "1": "check_1"
                },
                "bVar17": {
                    "1": "check_2"
                },
                "uVar18": {
                    "1": "temp_1"
                },
                "uVar19": {
                    "1": "temp_2"
                },
                "uVar20": {
                    "1": "temp_3"
                },
                "uVar21": {
                    "1": "temp_4"
                },
                "bVar22": {
                    "1": "check_3"
                },
                "bVar23": {
                    "1": "check_4"
                }
            }
        },
        "FUN_0800016c": {
            "entrypoint": "0x0800016c",
            "current_name": "calculate_product_0800016c",
            "code": "\nulonglong calculate_product_0800016c(uint input1,uint input2,uint input3,uint input4)\n\n{\n  int shift1;\n  byte carry;\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  int shift2;\n  uint shifted_input2;\n  uint shifted_input4;\n  uint shifted_input4;\n  uint difference;\n  uint temp6;\n  uint temp_var7;\n  bool is_equal;\n  bool is_zero;\n  bool is_negative;\n  \n  shifted_input2 = input2 << 1;\n  shifted_input4 = input4 << 1;\n  is_equal = ((input2 ^ input4) & 0x7fffffff) == 0;\n  is_zero = is_equal && input1 == input3;\n  if (!is_equal || input1 != input3) {\n    is_zero = (shifted_input2 | input1) == 0;\n  }\n  if (!is_zero) {\n    is_zero = (shifted_input4 | input3) == 0;\n  }\n  shift2 = (int)shifted_input2 >> 0x15;\n  if (!is_zero) {\n    is_zero = shift2 == -1;\n  }\n  shift1 = (int)shifted_input4 >> 0x15;\n  if (!is_zero) {\n    is_zero = shift1 == -1;\n  }\n  if (is_zero) {\n    if (shift2 == -1 || shift1 == -1) {\n      shifted_input4 = input4;\n      shifted_input2 = input3;\n      if (shift2 == -1) {\n        shifted_input4 = input2;\n        shifted_input2 = input1;\n      }\n      if (shift2 != -1 || shift1 != -1) {\n        input3 = shifted_input2;\n        input4 = shifted_input4;\n      }\n      is_zero = (shifted_input2 | shifted_input4 << 0xc) == 0;\n      if (is_zero) {\n        is_zero = (input3 | input4 << 0xc) == 0;\n      }\n      if (is_zero) {\n        is_zero = shifted_input4 == input4;\n      }\n      if (!is_zero) {\n        shifted_input4 = shifted_input4 | 0x80000;\n      }\n      return CONCAT44(shifted_input4,shifted_input2);\n    }\n    if (((input2 ^ input4) & 0x7fffffff) != 0 || input1 != input3) {\n      if ((shifted_input2 | input1) == 0) {\n        input1 = input3;\n        input2 = input4;\n      }\n      return CONCAT44(input2,input1);\n    }\n    if (input2 != input4) {\n      return 0;\n    }\n    if (shifted_input2 >> 0x15 == 0) {\n      is_zero = (input1 & 0x80000000) != 0;\n      shifted_input4 = input2 * 2 + (uint)is_zero;\n      if (carry4(input2,input2) || carry4(input2 * 2,(uint)is_zero)) {\n        shifted_input4 = shifted_input4 | 0x80000000;\n      }\n      return CONCAT44(shifted_input4,input1 << 1);\n    }\n    if (shifted_input2 < 0xffc00000) {\n      return CONCAT44(input2 + 0x100000,input1);\n    }\n    input2 = input2 & 0x80000000;\nLAB_080003ac:\n    return (ulonglong)(input2 | 0x7ff00000) << 0x20;\n  }\n  shifted_input2 = shifted_input2 >> 0x15;\n  shifted_input4 = shifted_input4 >> 0x15;\n  difference = shifted_input4 - shifted_input2;\n  is_zero = difference != 0;\n  if (shifted_input4 < shifted_input2) {\n    difference = -difference;\n  }\n  shifted_input4 = input1;\n  temp3 = input2;\n  if (is_zero && shifted_input2 <= shifted_input4) {\n    shifted_input2 = shifted_input2 + difference;\n    shifted_input4 = input3;\n    temp3 = input4;\n    input3 = input1;\n    input4 = input2;\n  }\n  if (0x36 < difference) {\n    return CONCAT44(temp3,shifted_input4);\n  }\n  shifted_input4 = temp3 & 0xfffff | 0x100000;\n  if ((temp3 & 0x80000000) != 0) {\n    is_zero = shifted_input4 != 0;\n    shifted_input4 = -shifted_input4;\n    shifted_input4 = -shifted_input4 - (uint)is_zero;\n  }\n  temp3 = input4 & 0xfffff | 0x100000;\n  if ((input4 & 0x80000000) != 0) {\n    is_zero = input3 != 0;\n    input3 = -input3;\n    temp3 = -temp3 - (uint)is_zero;\n  }\n  if (shifted_input2 == difference) {\n    temp3 = temp3 ^ 0x100000;\n    if (shifted_input2 == 0) {\n      shifted_input4 = shifted_input4 ^ 0x100000;\n      shifted_input2 = 1;\n    }\n    else {\n      difference = difference - 1;\n    }\n  }\n  temp_var7 = -difference + 0x20;\n  if ((int)difference < 0x21) {\n    temp6 = input3 << (temp_var7 & 0xff);\n    input3 = input3 >> (difference & 0xff);\n    temp1 = shifted_input4 + input3;\n    temp2 = temp3 << (temp_var7 & 0xff);\n    temp_var7 = temp1 + temp2;\n    shifted_input4 = shifted_input4 + carry4(shifted_input4,input3) + ((int)temp3 >> (difference & 0xff)) +\n            (uint)carry4(temp1,temp2);\n  }\n  else {\n    temp6 = temp3 << (-difference + 0x40 & 0xff);\n    if (input3 != 0) {\n      temp6 = temp6 | 2;\n    }\n    temp3 = (int)temp3 >> (difference - 0x20 & 0xff);\n    temp_var7 = shifted_input4 + temp3;\n    shifted_input4 = shifted_input4 + ((int)temp3 >> 0x1f) + (uint)carry4(shifted_input4,temp3);\n  }\n  input2 = shifted_input4 & 0x80000000;\n  difference = shifted_input4;\n  if ((int)shifted_input4 < 0) {\n    is_zero = temp6 == 0;\n    temp6 = -temp6;\n    difference = -temp_var7;\n    temp_var7 = -(uint)!is_zero - temp_var7;\n    difference = -(uint)(is_zero <= difference) - shifted_input4;\n  }\n  if (0xfffff < difference) {\n    shifted_input4 = shifted_input2 - 1;\n    if (0x1fffff < difference) {\n      shifted_input4 = difference & 1;\n      difference = difference >> 1;\n      carry = (byte)temp_var7;\n      temp_var7 = (uint)(shifted_input4 != 0) << 0x1f | temp_var7 >> 1;\n      temp6 = (uint)(carry & 1) << 0x1f | temp6 >> 1;\n      shifted_input4 = shifted_input2;\n      if (0xffbfffff < shifted_input2 * 0x200000) goto LAB_080003ac;\n    }\nLAB_08000278:\n    is_zero = 0x7fffffff < temp6;\n    if (temp6 == 0x80000000) {\n      is_zero = (temp_var7 & 1) != 0;\n    }\n    return CONCAT44(difference + shifted_input4 * 0x100000 + (uint)carry4(temp_var7,(uint)is_zero) | input2,\n                    temp_var7 + is_zero);\n  }\n  is_equal = (temp6 & 0x80000000) != 0;\n  temp6 = temp6 << 1;\n  shifted_input4 = temp_var7 * 2;\n  is_zero = carry4(temp_var7,temp_var7);\n  temp_var7 = temp_var7 * 2 + (uint)is_equal;\n  difference = difference * 2 + (uint)(is_zero || carry4(shifted_input4,(uint)is_equal));\n  shifted_input4 = shifted_input2 - 2;\n  if ((difference & 0x100000) != 0) goto LAB_08000278;\n  temp3 = temp_var7;\n  shifted_input2 = difference;\n  if (difference == 0) {\n    temp3 = 0;\n    shifted_input2 = temp_var7;\n  }\n  shift2 = LZCOUNT(shifted_input2);\n  if (difference == 0) {\n    shift2 = shift2 + 0x20;\n  }\n  temp_var7 = shift2 - 0xb;\n  is_negative = SBORROW4(temp_var7,0x20);\n  difference = shift2 - 0x2b;\n  is_zero = (int)difference < 0;\n  is_equal = difference == 0;\n  if ((int)temp_var7 < 0x20) {\n    is_negative = Scarry4(difference,0xc);\n    shift2 = shift2 + -0x1f;\n    is_zero = shift2 < 0;\n    is_equal = shift2 == 0;\n    difference = temp_var7;\n    if (!is_equal && is_zero == is_negative) {\n      temp3 = shifted_input2 << (temp_var7 & 0xff);\n      shifted_input2 = shifted_input2 >> (0xcU - shift2 & 0xff);\n      goto LAB_080002f0;\n    }\n  }\n  if (is_equal || is_zero != is_negative) {\n    temp6 = 0x20 - difference;\n  }\n  shifted_input2 = shifted_input2 << (difference & 0xff);\n  if (is_equal || is_zero != is_negative) {\n    shifted_input2 = shifted_input2 | temp3 >> (temp6 & 0xff);\n  }\n  if (is_equal || is_zero != is_negative) {\n    temp3 = temp3 << (difference & 0xff);\n  }\nLAB_080002f0:\n  if ((int)temp_var7 <= (int)shifted_input4) {\n    return CONCAT44(shifted_input2 + (shifted_input4 - temp_var7) * 0x100000 | input2,temp3);\n  }\n  difference = ~(shifted_input4 - temp_var7);\n  if ((int)difference < 0x1f) {\n    shift2 = difference - 0x13;\n    if (shift2 != 0 && shift2 < 0 == Scarry4(difference - 0x1f,0xc)) {\n      return CONCAT44(shifted_input4,temp3 >> (0x20 - (0xcU - shift2) & 0xff) | shifted_input2 << (0xcU - shift2 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    difference = difference + 1;\n    return CONCAT44(input2 | shifted_input2 >> (difference & 0xff),\n                    temp3 >> (difference & 0xff) | shifted_input2 << (0x20 - difference & 0xff));\n  }\n  return CONCAT44(shifted_input4,shifted_input2 >> (difference - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_0800016c": "calculate_product_0800016c",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "iVar1": "shift1",
                "bVar2": "carry",
                "uVar3": "temp1",
                "uVar4": "temp2",
                "uVar5": "temp3",
                "iVar6": "shift2",
                "uVar7": "shifted_input2",
                "uVar8": "shifted_input4",
                "uVar9": "shifted_input4",
                "uVar10": "difference",
                "uVar11": "temp6",
                "uVar12": "temp_var7",
                "bVar13": "is_equal",
                "bVar14": "is_zero",
                "bVar15": "is_negative",
                "CARRY4": "carry4"
            },
            "calling": [
                "FUN_08006070",
                "FUN_08006d68",
                "FUN_080071c0",
                "FUN_08005c70",
                "FUN_08006228",
                "FUN_080070b0",
                "FUN_08006c0c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800016c": {
                    "2": "calculate_result",
                    "1": "calculate_unsigned_division_result",
                    "3": "calculate_product"
                },
                "param_1": {
                    "1": "first_param",
                    "4": "input_1",
                    "2": "dividend",
                    "3": "num1",
                    "14": "input1"
                },
                "param_2": {
                    "14": "input2",
                    "1": "divisor_value",
                    "2": "b",
                    "3": "num2",
                    "4": "input_2"
                },
                "param_3": {
                    "4": "input_3",
                    "2": "quotient",
                    "1": "value_3",
                    "14": "input3",
                    "3": "num3"
                },
                "param_4": {
                    "1": "operand4",
                    "4": "input_4",
                    "2": "d",
                    "3": "num4",
                    "14": "input4"
                },
                "iVar1": {
                    "1": "shifted_num4_div_0x15",
                    "4": "shift1",
                    "2": "var1"
                },
                "bVar2": {
                    "3": "carry_flag",
                    "1": "temp2",
                    "6": "carry",
                    "2": "var2"
                },
                "uVar3": {
                    "2": "temp_var1",
                    "1": "masked_input1",
                    "7": "temp1"
                },
                "uVar4": {
                    "1": "res2",
                    "2": "temp4",
                    "7": "temp2"
                },
                "uVar5": {
                    "2": "var5",
                    "1": "temp4",
                    "6": "temp3"
                },
                "iVar6": {
                    "1": "shift_count2",
                    "2": "shift_amount1",
                    "4": "shift2"
                },
                "uVar7": {
                    "1": "u_var1_shift",
                    "2": "var7",
                    "7": "shifted_input2"
                },
                "uVar8": {
                    "3": "shifted_input4",
                    "1": "shifted_d_2",
                    "2": "temp3"
                },
                "uVar9": {
                    "1": "result_2",
                    "2": "temp4",
                    "4": "shifted_input4"
                },
                "uVar10": {
                    "1": "result4",
                    "2": "abs_difference",
                    "5": "difference"
                },
                "uVar11": {
                    "1": "result_2",
                    "2": "temp_var6",
                    "3": "temp6"
                },
                "uVar12": {
                    "1": "result",
                    "2": "temp7"
                },
                "bVar13": {
                    "1": "is_same_sign",
                    "5": "is_zero",
                    "2": "condition1"
                },
                "bVar14": {
                    "1": "is_equal_flag",
                    "3": "is_zero",
                    "2": "condition2"
                },
                "bVar15": {
                    "1": "cond3",
                    "5": "is_negative"
                },
                "CARRY4": {
                    "1": "carry4"
                },
                "concat_value": {
                    "1": "final_result"
                },
                "uVar14": {
                    "1": "shifted_input2_modified"
                },
                "uVar15": {
                    "1": "shifted_input4_modified"
                },
                "uVar16": {
                    "1": "shifted_difference"
                }
            }
        },
        "FUN_08000404": {
            "entrypoint": "0x08000404",
            "current_name": "reverse_bits_08000404",
            "code": "\nulonglong reverse_bits_08000404(uint input)\n\n{\n  uint shifted_value;\n  uint abs_input;\n  uint shift_amount;\n  int leading_zeros;\n  uint final_shift;\n  uint sign_bit;\n  uint remaining_bits;\n  bool is_negative;\n  bool is_zero;\n  bool overflow;\n  \n  if (input == 0) {\n    return 0;\n  }\n  sign_bit = input & 0x80000000;\n  abs_input = input;\n  if ((int)sign_bit < 0) {\n    abs_input = -input;\n  }\n  shifted_value = 0;\n  leading_zeros = LZCOUNT(abs_input);\n  final_shift = leading_zeros + 0x15;\n  overflow = SBORROW4(final_shift,0x20);\n  shift_amount = leading_zeros - 0xb;\n  is_negative = (int)shift_amount < 0;\n  is_zero = shift_amount == 0;\n  if (final_shift < 0x20) {\n    overflow = SCARRY4(shift_amount,0xc);\n    is_negative = false;\n    is_zero = leading_zeros + 1 == 0;\n    shift_amount = final_shift;\n    if (!is_zero && overflow == false) {\n      shifted_value = abs_input << final_shift;\n      abs_input = abs_input >> (0xcU - (leading_zeros + 1) & 0xff);\n      goto end_of_function;\n    }\n  }\n  if (is_zero || is_negative != overflow) {\n    remaining_bits = 0x20 - shift_amount;\n  }\n  abs_input = abs_input << (shift_amount & 0xff);\n  if (is_zero || is_negative != overflow) {\n    abs_input = abs_input | 0U >> (remaining_bits & 0xff);\n  }\n  if (is_zero || is_negative != overflow) {\n    shifted_value = 0 << (shift_amount & 0xff);\n  }\nend_of_function:\n  if (final_shift < 0x433) {\n    return CONCAT44(abs_input + (0x432 - final_shift) * 0x100000 | sign_bit,shifted_value);\n  }\n  shift_amount = ~(0x432 - final_shift);\n  if (0x1e < (int)shift_amount) {\n    return CONCAT44(input,abs_input >> (shift_amount - 0x1f & 0xff)) & 0x80000000ffffffff;\n  }\n  leading_zeros = shift_amount - 0x13;\n  if (leading_zeros == 0 || leading_zeros < 0 != SCARRY4(shift_amount - 0x1f,0xc)) {\n    shift_amount = shift_amount + 1;\n    return CONCAT44(sign_bit | abs_input >> (shift_amount & 0xff),\n                    shifted_value >> (shift_amount & 0xff) | abs_input << (0x20 - shift_amount & 0xff));\n  }\n  return CONCAT44(input,shifted_value >> (0x20 - (0xcU - leading_zeros) & 0xff) | abs_input << (0xcU - leading_zeros & 0xff))\n         & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_08000404": "reverse_bits_08000404",
                "param_1": "input",
                "uVar1": "shifted_value",
                "uVar2": "abs_input",
                "uVar3": "shift_amount",
                "iVar4": "leading_zeros",
                "uVar5": "final_shift",
                "uVar6": "sign_bit",
                "in_r12": "remaining_bits",
                "bVar7": "is_negative",
                "bVar8": "is_zero",
                "bVar9": "overflow",
                "LAB_080002f0": "end_of_function"
            },
            "calling": [
                "FUN_08006228"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08000404": {
                    "1": "convert_negative_to_positive",
                    "3": "reverse_and_shift",
                    "2": "reverse_shift",
                    "9": "reverse_bits"
                },
                "param_1": {
                    "23": "input",
                    "1": "num",
                    "3": "input_value",
                    "2": "number"
                },
                "uVar1": {
                    "5": "shift_count",
                    "4": "bit_count",
                    "1": "result",
                    "3": "shift_amount",
                    "2": "zero_bits"
                },
                "uVar2": {
                    "1": "abs_input_number",
                    "2": "absolute_value",
                    "3": "abs_value",
                    "16": "abs_input"
                },
                "uVar3": {
                    "1": "abs_shift_amount",
                    "2": "shift",
                    "19": "shift_amount"
                },
                "iVar4": {
                    "1": "temp_4",
                    "2": "leading_zeroes",
                    "24": "leading_zeros"
                },
                "uVar5": {
                    "2": "shift_amount",
                    "1": "shifted_num",
                    "3": "adjusted_shift_amount",
                    "4": "final_shift"
                },
                "uVar6": {
                    "1": "result",
                    "25": "sign_bit",
                    "2": "is_negative"
                },
                "in_r12": {
                    "4": "mask",
                    "20": "remaining_bits",
                    "1": "remainder",
                    "2": "temp"
                },
                "bVar7": {
                    "1": "is_positive",
                    "18": "is_negative",
                    "2": "is_zero",
                    "3": "is_negative_shift"
                },
                "bVar8": {
                    "1": "equal_to_zero",
                    "20": "is_zero",
                    "4": "is_zero_shift"
                },
                "bVar9": {
                    "1": "is_borrowed",
                    "5": "carry_flag",
                    "2": "carry_bit",
                    "8": "overflow"
                },
                "LAB_080002f0": {
                    "1": "carry_check_label"
                },
                "uVar10": {
                    "1": "shifted_value1"
                },
                "uVar11": {
                    "1": "shifted_value2"
                },
                "uVar12": {
                    "1": "shifted_value3"
                },
                "uVar13": {
                    "1": "shifted_value4"
                }
            }
        },
        "FUN_08000428": {
            "entrypoint": "0x08000428",
            "current_name": "reverse_bits_08000428",
            "code": "\nulonglong reverse_bits_08000428(uint input,undefined4 param2,undefined4 param3,uint mask)\n\n{\n  uint bit31;\n  uint shifted_value;\n  uint result;\n  uint shifted_input;\n  uint shifted_input;\n  int count;\n  uint shift_amount;\n  uint remaining_bits;\n  bool is_zero;\n  bool is_zero;\n  bool is_negative;\n  \n  shifted_input = input << 1;\n  is_zero = shifted_input == 0;\n  bit31 = (uint)((input & 0x80000000) != 0) << 0x1f;\n  shifted_input = (uint)((int)shifted_input >> 3) >> 1;\n  result = bit31 | shifted_input;\n  input = input << 0x1d;\n  if (!is_zero) {\n    mask = shifted_input & 0xff000000;\n    is_zero = mask == 0;\n  }\n  if (!is_zero) {\n    is_zero = mask == 0xff000000;\n  }\n  if (!is_zero) {\n    return CONCAT44(result,input) ^ 0x3800000000000000;\n  }\n  if (shifted_input == 0 || mask == 0xff000000) {\n    return CONCAT44(result,input);\n  }\n  shifted_value = input;\n  shifted_input = shifted_input;\n  if (shifted_input == 0) {\n    shifted_value = 0;\n    shifted_input = input;\n  }\n  count = leading_zeros_count(shifted_input);\n  if (shifted_input == 0) {\n    count = count + 0x20;\n  }\n  shift_amount = count - 0xb;\n  is_negative = SBORROW4(shift_amount,0x20);\n  shifted_input = count - 0x2b;\n  is_zero = (int)shifted_input < 0;\n  is_zero = shifted_input == 0;\n  if ((int)shift_amount < 0x20) {\n    is_negative = SCARRY4(shifted_input,0xc);\n    count = count + -0x1f;\n    is_zero = count < 0;\n    is_zero = count == 0;\n    shifted_input = shift_amount;\n    if (!is_zero && is_zero == is_negative) {\n      shifted_value = shifted_input << (shift_amount & 0xff);\n      shifted_input = shifted_input >> (0xcU - count & 0xff);\n      goto LAB_080002f0;\n    }\n  }\n  if (is_zero || is_zero != is_negative) {\n    remaining_bits = 0x20 - shifted_input;\n  }\n  shifted_input = shifted_input << (shifted_input & 0xff);\n  if (is_zero || is_zero != is_negative) {\n    shifted_input = shifted_input | shifted_value >> (remaining_bits & 0xff);\n  }\n  if (is_zero || is_zero != is_negative) {\n    shifted_value = shifted_value << (shifted_input & 0xff);\n  }\nLAB_080002f0:\n  if ((int)shift_amount < 0x381) {\n    return CONCAT44(shifted_input + (0x380 - shift_amount) * 0x100000 | bit31,shifted_value);\n  }\n  shifted_input = ~(0x380 - shift_amount);\n  if ((int)shifted_input < 0x1f) {\n    count = shifted_input - 0x13;\n    if (count != 0 && count < 0 == SCARRY4(shifted_input - 0x1f,0xc)) {\n      return CONCAT44(result,shifted_value >> (0x20 - (0xcU - count) & 0xff) | shifted_input << (0xcU - count & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    shifted_input = shifted_input + 1;\n    return CONCAT44(bit31 | shifted_input >> (shifted_input & 0xff),\n                    shifted_value >> (shifted_input & 0xff) | shifted_input << (0x20 - shifted_input & 0xff));\n  }\n  return CONCAT44(result,shifted_input >> (shifted_input - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_08000428": "reverse_bits_08000428",
                "param_1": "input",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "mask",
                "uVar1": "bit31",
                "uVar2": "shifted_value",
                "uVar3": "result",
                "uVar4": "shifted_input",
                "uVar5": "shifted_input",
                "iVar6": "count",
                "uVar7": "shift_amount",
                "in_r12": "remaining_bits",
                "bVar8": "is_zero",
                "bVar9": "is_zero",
                "bVar10": "is_negative",
                "LZCOUNT": "leading_zeros_count"
            },
            "calling": [
                "FUN_08003330",
                "FUN_0800411c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08000428": {
                    "1": "perform_bitwise_operations",
                    "20": "reverse_bits"
                },
                "param_1": {
                    "20": "input",
                    "10": "input_value",
                    "1": "input_param"
                },
                "param_2": {
                    "9": "param2",
                    "2": "unknown1",
                    "3": "unused1",
                    "1": "var2"
                },
                "param_3": {
                    "1": "unused_param2",
                    "9": "param3",
                    "2": "unknown2",
                    "3": "unused2"
                },
                "param_4": {
                    "2": "condition_value",
                    "9": "mask",
                    "5": "param4",
                    "3": "unused3",
                    "1": "compare_value"
                },
                "uVar1": {
                    "1": "shifted_bit",
                    "6": "sign_bit",
                    "2": "sign_extension",
                    "7": "bit31"
                },
                "uVar2": {
                    "1": "var2",
                    "3": "temp1",
                    "2": "shifted_input"
                },
                "uVar3": {
                    "1": "result_hi",
                    "2": "result1",
                    "6": "result_high",
                    "11": "result"
                },
                "uVar4": {
                    "1": "shift",
                    "3": "shift_count",
                    "5": "shift_amount",
                    "9": "shifted_input"
                },
                "uVar5": {
                    "1": "shifted_input_times_two",
                    "5": "shifted_input",
                    "3": "shifted_input2",
                    "2": "shifted_input_value",
                    "4": "temp"
                },
                "iVar6": {
                    "1": "leading_zeros_count",
                    "10": "count",
                    "3": "leading_zeros",
                    "6": "bit_count",
                    "2": "num_bits"
                },
                "uVar7": {
                    "1": "adjusted_shift_amount",
                    "3": "shifted_count",
                    "8": "shift_amount"
                },
                "in_r12": {
                    "2": "in_r12",
                    "1": "temp3",
                    "9": "remaining_bits"
                },
                "bVar8": {
                    "1": "bit_condition1",
                    "3": "flag1",
                    "2": "carry",
                    "4": "is_negative"
                },
                "bVar9": {
                    "1": "is_flag_zero",
                    "2": "is_condition_met",
                    "3": "flag2",
                    "8": "is_zero"
                },
                "bVar10": {
                    "1": "cond3",
                    "3": "flag3",
                    "2": "is_carry",
                    "5": "is_negative"
                },
                "uVar8": {
                    "1": "result_low"
                },
                "LZCOUNT": {
                    "1": "leading_zeros_count"
                },
                "F": {
                    "1": "reverse_bits"
                }
            }
        },
        "FUN_080004d0": {
            "entrypoint": "0x080004d0",
            "current_name": "calculate_result_080004d0",
            "code": "\nulonglong calculate_result_080004d0(undefined4 input1,uint input2,uint input3,uint input4)\n\n{\n  ulonglong result1;\n  longlong result2;\n  uint temp1;\n  uint temp2;\n  int temp3;\n  uint temp4;\n  uint temp5;\n  uint temp5;\n  uint temp6;\n  bool flag1;\n  bool flag2;\n  bool flag3;\n  ulonglong combined_input;\n  \n  combined_input = CONCAT44(input2,input1);\n  temp5 = 0x7ff;\n  temp2 = input2 >> 0x14 & 0x7ff;\n  flag1 = temp2 == 0;\n  if (!flag1) {\n    temp5 = input4 >> 0x14 & 0x7ff;\n    flag1 = temp5 == 0;\n  }\n  if (!flag1) {\n    flag1 = temp2 == 0x7ff;\n  }\n  if (!flag1) {\n    flag1 = temp5 == 0x7ff;\n  }\n  if (flag1) {\n    combined_input = reverse_bits_080006ac();\n  }\n  temp1 = (uint)(combined_input >> 0x20);\n  temp3 = temp2 + temp5;\n  temp2 = temp1 ^ input4;\n  temp1 = temp1 & ~(temp5 << 0x15);\n  input4 = input4 & ~(temp5 << 0x15);\n  flag1 = ((uint)combined_input | temp1 << 0xc) == 0;\n  if (!flag1) {\n    flag1 = (input3 | input4 << 0xc) == 0;\n  }\n  temp1 = temp1 | 0x100000;\n  input4 = input4 | 0x100000;\n  if (flag1) {\n    input3 = (uint)combined_input | input3;\n    input4 = (temp2 & 0x80000000 | temp1) ^ input4;\n    temp2 = temp5 >> 1;\n    flag3 = SBORROW4(temp3,temp2);\n    temp4 = temp3 - temp2;\n    flag1 = temp4 == 0;\n    temp1 = temp4;\n    if (!flag1 && (int)temp2 <= temp3) {\n      flag3 = SBORROW4(temp5,temp4);\n      temp1 = temp5 - temp4;\n      flag1 = temp5 == temp4;\n    }\n    if (!flag1 && (int)temp1 < 0 == flag3) {\n      input4 = input4 | temp4 * 0x100000;\n    }\n    if (!flag1 && (int)temp1 < 0 == flag3) {\n      return CONCAT44(input4,input3);\n    }\n    input4 = input4 | 0x100000;\n    temp5 = 0;\n    flag3 = SBORROW4(temp4,1);\n    temp4 = temp4 - 1;\n    flag1 = temp4 == 0;\n    temp2 = temp4;\n  }\n  else {\n    result1 = (combined_input & 0xffffffff) * (ulonglong)input3;\n    combined_input = (combined_input & 0xffffffff) * (ulonglong)input4 +\n             (ulonglong)temp1 * (ulonglong)input3 + (result1 >> 0x20);\n    temp6 = (uint)combined_input;\n    result2 = (ulonglong)temp1 * (ulonglong)input4 + (combined_input >> 0x20);\n    temp5 = (uint)result2;\n    temp1 = (uint)((ulonglong)result2 >> 0x20);\n    if ((int)result1 != 0) {\n      temp6 = temp6 | 1;\n    }\n    temp4 = (temp3 + -0x3ff) - (uint)(temp1 < 0x200);\n    if (temp1 < 0x200) {\n      flag1 = (temp6 & 0x80000000) != 0;\n      temp6 = temp6 << 1;\n      result2 = CONCAT44(temp1 * 2 + (uint)(CARRY4(temp5,temp5) || CARRY4(temp5 * 2,(uint)flag1)),\n                       temp5 * 2 + (uint)flag1);\n    }\n    input4 = temp2 & 0x80000000 | (int)((ulonglong)result2 >> 0x20) << 0xb | (uint)result2 >> 0x15;\n    input3 = (uint)result2 << 0xb | temp6 >> 0x15;\n    temp5 = temp6 * 0x800;\n    flag2 = 0xfc < temp4;\n    flag3 = SBORROW4(temp4,0xfd);\n    temp1 = temp4 - 0xfd;\n    flag1 = temp1 == 0;\n    temp2 = temp1;\n    if (flag2 && !flag1) {\n      flag2 = 0x6ff < temp1;\n      flag3 = SBORROW4(temp1,0x700);\n      temp2 = temp4 - 0x7fd;\n      flag1 = temp1 == 0x700;\n    }\n    if (!flag2 || flag1) {\n      flag1 = 0x7fffffff < temp5;\n      if (temp5 == 0x80000000) {\n        flag1 = (temp6 >> 0x15 & 1) != 0;\n      }\n      return CONCAT44(input4 + temp4 * 0x100000 + (uint)CARRY4(input3,(uint)flag1),input3 + flag1\n                     );\n    }\n  }\n  if (!flag1 && (int)temp2 < 0 == flag3) {\n    return (ulonglong)(input4 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  flag2 = SCARRY4(temp4,0x36);\n  flag1 = (int)(temp4 + 0x36) < 0;\n  flag3 = temp4 == 0xffffffca;\n  if (flag3 || flag1 != flag2) {\n    input3 = 0;\n  }\n  if (flag3 || flag1 != flag2) {\n    input4 = input4 & 0x80000000;\n  }\n  if (flag3 || flag1 != flag2) {\n    return CONCAT44(input4,input3);\n  }\n  temp2 = -temp4;\n  temp1 = temp2 - 0x20;\n  if (0x1f < (int)temp2) {\n    temp4 = input3 >> (temp1 & 0xff) | input4 << (0x20 - temp1 & 0xff);\n    temp2 = (input4 >> (temp1 & 0xff) & ~((input4 & 0x80000000) >> (temp1 & 0xff))) -\n            ((int)temp4 >> 0x1f);\n    if ((temp5 | input3 << (0x20 - temp1 & 0xff) | temp4 << 1) == 0) {\n      temp2 = temp2 & ~(temp4 >> 0x1f);\n    }\n    return CONCAT44(input4,temp2) & 0x80000000ffffffff;\n  }\n  temp3 = temp2 - 0x14;\n  if (temp3 == 0 || temp3 < 0 != SCARRY4(temp1,0xc)) {\n    temp6 = input3 << (temp4 + 0x20 & 0xff);\n    temp1 = input3 >> (temp2 & 0xff) | input4 << (temp4 + 0x20 & 0xff);\n    temp4 = temp1 + -((int)temp6 >> 0x1f);\n    if ((temp5 | temp6 << 1) == 0) {\n      temp4 = temp4 & ~(temp6 >> 0x1f);\n    }\n    return CONCAT44((input4 & 0x80000000) +\n                    ((input4 & 0x7fffffff) >> (temp2 & 0xff)) +\n                    (uint)CARRY4(temp1,-((int)temp6 >> 0x1f)),temp4);\n  }\n  temp2 = 0xc - temp3;\n  temp4 = input3 << (temp2 & 0xff);\n  temp2 = input3 >> (0x20 - temp2 & 0xff) | input4 << (temp2 & 0xff);\n  temp1 = temp2 + -((int)temp4 >> 0x1f);\n  if ((temp5 | temp4 << 1) == 0) {\n    temp1 = temp1 & ~(temp4 >> 0x1f);\n  }\n  return CONCAT44((input4 & 0x80000000) + (uint)CARRY4(temp2,-((int)temp4 >> 0x1f)),temp1);\n}\n\n",
            "renaming": {
                "FUN_080004d0": "calculate_result_080004d0",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "result1",
                "lVar2": "result2",
                "uVar3": "temp1",
                "uVar4": "temp2",
                "iVar5": "temp3",
                "uVar6": "temp4",
                "unaff_r5": "temp5",
                "uVar7": "temp5",
                "uVar8": "temp6",
                "bVar9": "flag1",
                "bVar10": "flag2",
                "bVar11": "flag3",
                "uVar12": "combined_input"
            },
            "calling": [
                "FUN_08003330",
                "FUN_08006d68",
                "FUN_080071c0",
                "FUN_0800411c",
                "FUN_08005c70",
                "FUN_08006228",
                "FUN_08006c0c",
                "FUN_08005900"
            ],
            "called": [
                "FUN_080006ac"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080004d0": {
                    "1": "calculate_floating_point_value",
                    "9": "calculate_product",
                    "6": "calculate",
                    "11": "calculate_result"
                },
                "param_1": {
                    "1": "first_param",
                    "5": "value1",
                    "22": "input1"
                },
                "param_2": {
                    "22": "input2",
                    "1": "exponent",
                    "5": "value2"
                },
                "param_3": {
                    "1": "third_param",
                    "5": "value3",
                    "19": "input3"
                },
                "param_4": {
                    "1": "d",
                    "5": "value4",
                    "19": "input4"
                },
                "uVar1": {
                    "1": "partial_product",
                    "7": "temp1",
                    "8": "result1",
                    "5": "product",
                    "4": "result",
                    "2": "product1"
                },
                "lVar2": {
                    "2": "product2",
                    "1": "partial_result2",
                    "7": "temp2",
                    "8": "result2"
                },
                "uVar3": {
                    "1": "high_bits1",
                    "2": "var1",
                    "16": "temp1",
                    "5": "temp3"
                },
                "uVar4": {
                    "1": "partial_product2",
                    "5": "temp4",
                    "16": "temp2",
                    "2": "var2"
                },
                "iVar5": {
                    "2": "var3",
                    "6": "temp5",
                    "11": "temp3",
                    "1": "i_var_5",
                    "7": "sum"
                },
                "uVar6": {
                    "6": "temp6",
                    "2": "difference",
                    "1": "u_var_6",
                    "4": "temp3",
                    "11": "temp4"
                },
                "unaff_r5": {
                    "6": "temp5",
                    "1": "concatenated_multiplier",
                    "5": "temp7",
                    "4": "temp4"
                },
                "uVar7": {
                    "9": "temp5",
                    "2": "mask",
                    "1": "input4_low",
                    "6": "temp6",
                    "4": "temp8"
                },
                "uVar8": {
                    "1": "left_shifted",
                    "9": "temp6",
                    "6": "temp7",
                    "5": "temp9"
                },
                "bVar9": {
                    "1": "temp_flag1",
                    "6": "is_zero",
                    "2": "check1",
                    "8": "flag1",
                    "4": "is_zero1"
                },
                "bVar10": {
                    "2": "check2",
                    "3": "is_negative1",
                    "6": "condition2",
                    "1": "temp9",
                    "8": "flag2"
                },
                "bVar11": {
                    "1": "temp10",
                    "2": "check3",
                    "3": "is_negative2",
                    "8": "flag3",
                    "6": "condition3"
                },
                "uVar12": {
                    "2": "concatenated",
                    "1": "result",
                    "6": "combined_input",
                    "3": "combined_inputs"
                }
            }
        },
        "FUN_080006ac": {
            "entrypoint": "0x080006ac",
            "current_name": "reverse_bits_080006ac",
            "code": "\nulonglong reverse_bits_080006ac(uint input1,uint input2,uint input3,uint input4)\n\n{\n  uint bit1;\n  uint temp1;\n  uint temp3;\n  uint temp4;\n  uint temp5;\n  bool is_zero;\n  \n  temp3 = temp5 & input4 >> 0x14;\n  if (temp1 != temp5 && temp3 != temp5) {\n    is_zero = (input1 | input2 << 1) == 0;\n    if (!is_zero) {\n      is_zero = (input3 | input4 << 1) == 0;\n    }\n    if (is_zero) {\n      result (ulonglong)((input2 ^ input4) & 0x80000000) << 0x20;\n    }\n    if (temp1 == 0) {\n      temp4 = input2 & 0x80000000;\n      do {\n        bit1 = input1 & 0x80000000;\n        input1 = input1 << 1;\n        input2 = input2 * 2 + (uint)(bit1 != 0);\n      } while ((input2 & 0x100000) == 0);\n      input2 = input2 | temp4;\n      if (temp3 != 0) {\n        result CONCAT44(input2,input1);\n      }\n    }\n    do {\n      temp3 = input3 & 0x80000000;\n      input3 = input3 << 1;\n      input4 = input4 * 2 + (uint)(temp3 != 0);\n    } while ((input4 & 0x100000) == 0);\n    result CONCAT44(input2,input1);\n  }\n  is_zero = (input1 | input2 << 1) == 0;\n  if (is_zero) {\n    input2 = input4;\n    input1 = input3;\n  }\n  if (!is_zero) {\n    is_zero = (input3 | input4 << 1) == 0;\n  }\n  temp4 = input2;\n  if (((!is_zero) && ((temp1 != temp5 || ((input1 | input2 << 0xc) == 0)))) &&\n     ((temp3 != temp5 || (input1 = input3, temp4 = input4, (input3 | input4 << 0xc) == 0)))) {\n    result (ulonglong)((input2 ^ input4) & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  result CONCAT44(temp4,input1) | 0x7ff8000000000000;\n}\n\n",
            "renaming": {
                "FUN_080006ac": "reverse_bits_080006ac",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "bit1",
                "unaff_r4": "temp1",
                "uVar2": "temp3",
                "uVar3": "temp4",
                "in_r12": "temp5",
                "bVar4": "is_zero",
                "return": "result"
            },
            "calling": [
                "FUN_080004d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080006ac": {
                    "1": "extract_bitwise",
                    "4": "calculate_result",
                    "2": "reverse_bits_and_merge",
                    "5": "reverse_bits"
                },
                "param_1": {
                    "11": "input_1",
                    "2": "num1",
                    "16": "input1",
                    "1": "input_a"
                },
                "param_2": {
                    "16": "input2",
                    "1": "input_b",
                    "2": "num2",
                    "11": "input_2"
                },
                "param_3": {
                    "11": "input_3",
                    "1": "input_value3",
                    "16": "input3",
                    "2": "num3"
                },
                "param_4": {
                    "1": "input_value4",
                    "11": "input_4",
                    "2": "num4",
                    "16": "input4"
                },
                "uVar1": {
                    "1": "bit",
                    "4": "bit_1",
                    "5": "temp1",
                    "6": "bit1",
                    "2": "temp2",
                    "3": "temp3"
                },
                "unaff_r4": {
                    "3": "bit2",
                    "1": "bit4",
                    "6": "temp1",
                    "5": "temp2"
                },
                "uVar2": {
                    "1": "temp2",
                    "3": "temp4",
                    "2": "temp_2",
                    "8": "temp3"
                },
                "uVar3": {
                    "3": "bit3",
                    "2": "bit_3",
                    "1": "bit4",
                    "7": "temp4",
                    "4": "result"
                },
                "in_r12": {
                    "6": "temp5",
                    "4": "temp2",
                    "1": "bit_5",
                    "3": "constant"
                },
                "bVar4": {
                    "1": "check",
                    "28": "is_zero"
                },
                "uVar5": {
                    "1": "shifted_val"
                },
                "uVar6": {
                    "1": "result"
                },
                "return": {
                    "2": "result"
                },
                "uVar7": {
                    "1": "flag1"
                },
                "uVar8": {
                    "1": "flag2"
                }
            }
        },
        "FUN_08000724": {
            "entrypoint": "0x08000724",
            "current_name": "calculate_double_08000724",
            "code": "\nulonglong calculate_double_08000724(undefined4 value1,uint value2,uint value3,uint value4)\n\n{\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  uint temp4;\n  uint temp5;\n  uint temp6;\n  uint temp7;\n  int difference;\n  uint temp9;\n  uint temp10;\n  uint temp11;\n  uint temp12;\n  uint temp13;\n  uint temp14;\n  bool is_zero;\n  bool flag2;\n  bool flag3;\n  undefined8 converted_value;\n  \n  converted_value = CONCAT44(value2,value1);\n  temp14 = 0x7ff;\n  temp7 = value2 >> 0x14 & 0x7ff;\n  is_zero = temp7 == 0;\n  if (!is_zero) {\n    temp10 = value4 >> 0x14 & 0x7ff;\n    is_zero = temp10 == 0;\n  }\n  if (!is_zero) {\n    is_zero = temp7 == 0x7ff;\n  }\n  if (!is_zero) {\n    is_zero = temp10 == 0x7ff;\n  }\n  if (is_zero) {\n    converted_value = convert_to_double_08000892();\n  }\n  temp9 = (uint)((ulonglong)converted_value >> 0x20);\n  temp12 = (uint)converted_value;\n  difference = temp7 - temp10;\n  if ((value3 | value4 << 0xc) == 0) {\n    temp7 = (temp9 ^ value4) & 0x80000000 | temp9 & 0xfffff;\n    flag3 = SCARRY4(difference,temp14 >> 1);\n    temp9 = difference + (temp14 >> 1);\n    is_zero = (int)temp9 < 0;\n    flag2 = temp9 == 0;\n    if (!flag2 && is_zero == flag3) {\n      flag3 = SBORROW4(temp14,temp9);\n      is_zero = (int)(temp14 - temp9) < 0;\n      flag2 = temp14 == temp9;\n    }\n    if (!flag2 && is_zero == flag3) {\n      temp7 = temp7 | temp9 * 0x100000;\n    }\n    if (!flag2 && is_zero == flag3) {\n      return CONCAT44(temp7,temp12);\n    }\n    temp7 = temp7 | 0x100000;\n    temp14 = 0;\n    flag2 = SBORROW4(temp9,1);\n    temp9 = temp9 - 1;\n    is_zero = temp9 == 0;\n    temp3 = temp9;\n  }\n  else {\n    temp3 = (value4 << 0xc) >> 4 | 0x10000000 | value3 >> 0x18;\n    temp14 = value3 << 8;\n    temp11 = (temp9 << 0xc) >> 4 | 0x10000000 | temp12 >> 0x18;\n    temp12 = temp12 * 0x100;\n    temp7 = (temp9 ^ value4) & 0x80000000;\n    is_zero = temp3 <= temp11;\n    if (temp11 == temp3) {\n      is_zero = temp14 <= temp12;\n    }\n    difference = difference + (uint)is_zero;\n    temp9 = difference + 0x3fd;\n    if (is_zero == false) {\n      temp3 = temp3 >> 1;\n      temp14 = (uint)((value3 >> 0x18 & 1) != 0) << 0x1f | temp14 >> 1;\n    }\n    temp13 = temp12 - temp14;\n    temp11 = (temp11 - temp3) - (uint)(temp12 < temp14);\n    temp4 = temp3 >> 1;\n    temp1 = (uint)((temp3 & 1) != 0) << 0x1f | temp14 >> 1;\n    temp12 = 0x100000;\n    temp3 = 0x80000;\n    while( true ) {\n      is_zero = temp1 <= temp13;\n      if (temp4 < temp11 || temp11 - temp4 < (uint)is_zero) {\n        temp13 = temp13 - temp1;\n        temp12 = temp12 | temp3;\n        temp11 = (temp11 - temp4) - (uint)!is_zero;\n      }\n      temp5 = temp4 >> 1;\n      temp1 = (uint)((temp4 & 1) != 0) << 0x1f | temp1 >> 1;\n      flag2 = temp1 <= temp13;\n      is_zero = temp11 - temp5 < (uint)flag2;\n      temp14 = temp11;\n      if (temp5 < temp11 || is_zero) {\n        temp13 = temp13 - temp1;\n        temp14 = (temp11 - temp5) - (uint)!flag2;\n      }\n      if (temp5 < temp11 || is_zero) {\n        temp12 = temp12 | temp3 >> 1;\n      }\n      temp11 = temp4 >> 2;\n      temp2 = (uint)((temp5 & 1) != 0) << 0x1f | temp1 >> 1;\n      flag2 = temp2 <= temp13;\n      is_zero = temp14 - temp11 < (uint)flag2;\n      temp5 = temp14;\n      if (temp11 < temp14 || is_zero) {\n        temp13 = temp13 - temp2;\n        temp5 = (temp14 - temp11) - (uint)!flag2;\n      }\n      if (temp11 < temp14 || is_zero) {\n        temp12 = temp12 | temp3 >> 2;\n      }\n      temp6 = temp4 >> 3;\n      temp1 = (uint)((temp11 & 1) != 0) << 0x1f | temp2 >> 1;\n      flag2 = temp1 <= temp13;\n      is_zero = temp5 - temp6 < (uint)flag2;\n      temp11 = temp5;\n      if (temp6 < temp5 || is_zero) {\n        temp13 = temp13 - temp1;\n        temp11 = (temp5 - temp6) - (uint)!flag2;\n      }\n      if (temp6 < temp5 || is_zero) {\n        temp12 = temp12 | temp3 >> 3;\n      }\n      temp14 = temp11 | temp13;\n      if (temp14 == 0) break;\n      temp11 = temp11 << 4 | temp13 >> 0x1c;\n      temp13 = temp13 << 4;\n      temp4 = temp4 & 0xfffffff8 | temp1 >> 0x1d;\n      temp1 = (temp2 >> 1) << 3;\n      temp3 = temp3 >> 4;\n      if (temp3 == 0) {\n        temp6 = temp4;\n        if ((temp7 & 0x100000) != 0) goto LAB_08000842;\n        temp7 = temp7 | temp12;\n        temp12 = 0;\n        temp3 = 0x80000000;\n      }\n    }\n    if ((temp7 & 0x100000) == 0) {\n      temp7 = temp7 | temp12;\n      temp12 = 0;\n    }\nLAB_08000842:\n    flag3 = 0xfc < temp9;\n    flag2 = SBORROW4(temp9,0xfd);\n    temp4 = difference + 0x300;\n    is_zero = temp4 == 0;\n    temp3 = temp4;\n    if (flag3 && !is_zero) {\n      flag3 = 0x6ff < temp4;\n      flag2 = SBORROW4(temp4,0x700);\n      temp3 = difference - 0x400;\n      is_zero = temp4 == 0x700;\n    }\n    if (!flag3 || is_zero) {\n      is_zero = temp6 <= temp11;\n      if (temp11 == temp6) {\n        is_zero = temp1 <= temp13;\n      }\n      if (temp11 == temp6 && temp13 == temp1) {\n        is_zero = (temp12 & 1) != 0;\n      }\n      return CONCAT44(temp7 + temp9 * 0x100000 + (uint)CARRY4(temp12,(uint)is_zero),temp12 + is_zero);\n    }\n  }\n  if (!is_zero && (int)temp3 < 0 == flag2) {\n    return (ulonglong)(temp7 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  flag3 = SCARRY4(temp9,0x36);\n  is_zero = (int)(temp9 + 0x36) < 0;\n  flag2 = temp9 == 0xffffffca;\n  if (flag2 || is_zero != flag3) {\n    temp12 = 0;\n  }\n  if (flag2 || is_zero != flag3) {\n    temp7 = temp7 & 0x80000000;\n  }\n  if (flag2 || is_zero != flag3) {\n    return CONCAT44(temp7,temp12);\n  }\n  temp3 = -temp9;\n  temp11 = temp3 - 0x20;\n  if (0x1f < (int)temp3) {\n    temp3 = temp12 >> (temp11 & 0xff) | temp7 << (0x20 - temp11 & 0xff);\n    temp9 = (temp7 >> (temp11 & 0xff) & ~((temp7 & 0x80000000) >> (temp11 & 0xff))) -\n            ((int)temp3 >> 0x1f);\n    if ((temp14 | temp12 << (0x20 - temp11 & 0xff) | temp3 << 1) == 0) {\n      temp9 = temp9 & ~(temp3 >> 0x1f);\n    }\n    return CONCAT44(temp7,temp9) & 0x80000000ffffffff;\n  }\n  difference = temp3 - 0x14;\n  if (difference != 0 && difference < 0 == SCARRY4(temp11,0xc)) {\n    temp9 = 0xc - difference;\n    temp3 = temp12 << (temp9 & 0xff);\n    temp12 = temp12 >> (0x20 - temp9 & 0xff) | temp7 << (temp9 & 0xff);\n    temp9 = temp12 + -((int)temp3 >> 0x1f);\n    if ((temp14 | temp3 << 1) == 0) {\n      temp9 = temp9 & ~(temp3 >> 0x1f);\n    }\n    return CONCAT44((temp7 & 0x80000000) + (uint)CARRY4(temp12,-((int)temp3 >> 0x1f)),temp9);\n  }\n  temp11 = temp12 << (temp9 + 0x20 & 0xff);\n  temp12 = temp12 >> (temp3 & 0xff) | temp7 << (temp9 + 0x20 & 0xff);\n  temp9 = temp12 + -((int)temp11 >> 0x1f);\n  if ((temp14 | temp11 << 1) == 0) {\n    temp9 = temp9 & ~(temp11 >> 0x1f);\n  }\n  return CONCAT44((temp7 & 0x80000000) +\n                  ((temp7 & 0x7fffffff) >> (temp3 & 0xff)) +\n                  (uint)CARRY4(temp12,-((int)temp11 >> 0x1f)),temp9);\n}\n\n",
            "renaming": {
                "FUN_08000724": "calculate_double_08000724",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "value3",
                "param_4": "value4",
                "uVar1": "temp1",
                "uVar2": "temp2",
                "uVar3": "temp3",
                "uVar4": "temp4",
                "uVar5": "temp5",
                "uVar6": "temp6",
                "uVar7": "temp7",
                "iVar8": "difference",
                "uVar9": "temp9",
                "uVar10": "temp11",
                "uVar11": "temp12",
                "uVar12": "temp13",
                "uVar13": "temp14",
                "bVar14": "is_zero",
                "bVar15": "flag2",
                "bVar16": "flag3",
                "uVar17": "converted_value",
                "unaff_r5": "temp10"
            },
            "calling": [
                "FUN_08003330",
                "FUN_08006070",
                "FUN_08006d68",
                "FUN_08005bc8",
                "FUN_08005c70",
                "FUN_08006228",
                "FUN_08006c0c",
                "FUN_08005900"
            ],
            "called": [
                "FUN_08000892"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08000724": {
                    "2": "calculate_double_value",
                    "4": "convert_to_double",
                    "3": "calculate_floating_point",
                    "1": "compute_floating_point"
                },
                "param_1": {
                    "1": "bits",
                    "2": "sign_bit",
                    "4": "input_param_1",
                    "5": "value1"
                },
                "param_2": {
                    "1": "bitwise_param1",
                    "4": "input_param_2",
                    "2": "value1",
                    "3": "exponent",
                    "5": "value2"
                },
                "param_3": {
                    "1": "mantissa_part1",
                    "4": "input3",
                    "5": "value3",
                    "2": "mantissa_high"
                },
                "param_4": {
                    "1": "fourth_param",
                    "2": "value3",
                    "4": "input4",
                    "5": "value4"
                },
                "uVar1": {
                    "1": "result",
                    "2": "temp_var1",
                    "10": "temp1"
                },
                "uVar2": {
                    "1": "difference",
                    "2": "temp_var2",
                    "10": "temp2"
                },
                "uVar3": {
                    "1": "divisor_bits",
                    "2": "temp_var3",
                    "10": "temp3"
                },
                "uVar4": {
                    "1": "u_var4",
                    "2": "temp_var4",
                    "10": "temp4"
                },
                "uVar5": {
                    "1": "bits_5",
                    "10": "temp5",
                    "2": "u_var5"
                },
                "uVar6": {
                    "1": "temp3",
                    "10": "temp6",
                    "2": "temp_var6"
                },
                "uVar7": {
                    "1": "exponent1",
                    "2": "temp_var7",
                    "9": "temp7"
                },
                "iVar8": {
                    "4": "exponent_difference",
                    "1": "float_difference",
                    "7": "temp8",
                    "8": "difference",
                    "2": "temp_var8"
                },
                "uVar9": {
                    "1": "result",
                    "2": "adjusted_exponent",
                    "6": "temp9"
                },
                "uVar10": {
                    "3": "u_var10",
                    "1": "temp9",
                    "5": "temp11",
                    "2": "temp_var11"
                },
                "uVar11": {
                    "5": "temp12",
                    "1": "other_bits_2",
                    "2": "temp3"
                },
                "uVar12": {
                    "1": "var13",
                    "2": "temp4",
                    "5": "temp13"
                },
                "uVar13": {
                    "1": "max_value",
                    "2": "temp_var14",
                    "4": "u_var13",
                    "5": "temp14"
                },
                "bVar14": {
                    "1": "zero_exponents",
                    "2": "is_zero1",
                    "3": "condition1",
                    "7": "flag1",
                    "10": "is_zero"
                },
                "bVar15": {
                    "1": "equal",
                    "3": "condition2",
                    "2": "is_zero2",
                    "7": "flag2",
                    "4": "is_equal"
                },
                "bVar16": {
                    "1": "flag_var_3",
                    "2": "bool3",
                    "6": "flag3",
                    "3": "condition3"
                },
                "uVar17": {
                    "12": "converted_value",
                    "1": "combined_num",
                    "6": "converted_double",
                    "2": "result",
                    "4": "combined_params"
                },
                "unaff_r5": {
                    "1": "temp_var_10",
                    "2": "unaffected_param",
                    "5": "temp10"
                },
                "uVar8": {
                    "1": "is_carry"
                },
                "bVar17": {
                    "1": "is_carry"
                },
                "bVar18": {
                    "1": "is_rounding_needed"
                }
            }
        },
        "FUN_08000892": {
            "entrypoint": "0x08000892",
            "current_name": "convert_to_double_08000892",
            "code": "\nulonglong convert_to_double_08000892(uint input1,uint input2,uint input3,uint input4)\n\n{\n  uint bit1;\n  uint temp1;\n  uint bit2;\n  uint temp4;\n  uint constant;\n  bool is_zero;\n  \n  bit2 = constant & input4 >> 0x14;\n  temp4 = input2;\n  if (temp1 != constant || bit2 != constant) {\n    if (temp1 == constant) {\n      if (((input1 | input2 << 0xc) == 0) && (input1 = input3, temp4 = input4, bit2 != constant)\n         ) {\nlabel_1:\n        return (ulonglong)((input2 ^ input4) & 0x80000000 | 0x7ff00000) << 0x20;\n      }\n    }\n    else if (bit2 == constant) {\n      input1 = input3;\n      temp4 = input4;\n      if ((input3 | input4 << 0xc) == 0) {\nlabel_2:\n        return (ulonglong)((input2 ^ input4) & 0x80000000) << 0x20;\n      }\n    }\n    else {\n      is_zero = (input1 | input2 << 1) == 0;\n      if (!is_zero) {\n        is_zero = (input3 | input4 << 1) == 0;\n      }\n      if (!is_zero) {\n        if (temp1 == 0) {\n          temp4 = input2 & 0x80000000;\n          do {\n            bit1 = input1 & 0x80000000;\n            input1 = input1 << 1;\n            input2 = input2 * 2 + (uint)(bit1 != 0);\n          } while ((input2 & 0x100000) == 0);\n          input2 = input2 | temp4;\n          if (bit2 != 0) {\n            return CONCAT44(input2,input1);\n          }\n        }\n        do {\n          temp4 = input3 & 0x80000000;\n          input3 = input3 << 1;\n          input4 = input4 * 2 + (uint)(temp4 != 0);\n        } while ((input4 & 0x100000) == 0);\n        return CONCAT44(input2,input1);\n      }\n      if ((input1 | input2 << 1) != 0) goto label_1;\n      if ((input3 | input4 << 1) != 0) goto label_2;\n    }\n  }\n  return CONCAT44(temp4,input1) | 0x7ff8000000000000;\n}\n\n",
            "renaming": {
                "FUN_08000892": "convert_to_double_08000892",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "bit1",
                "unaff_r4": "temp1",
                "uVar2": "bit2",
                "uVar3": "temp4",
                "in_r12": "constant",
                "bVar4": "is_zero",
                "LAB_08000704": "label_1",
                "LAB_080006c8": "label_2"
            },
            "calling": [
                "FUN_08000724"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08000892": {
                    "1": "extract_bits",
                    "6": "convert_to_double",
                    "2": "calculate_floating_point_value",
                    "4": "reverse_bits"
                },
                "param_1": {
                    "1": "param1",
                    "3": "input_1",
                    "2": "num1",
                    "15": "input1"
                },
                "param_2": {
                    "1": "exponent",
                    "15": "input2",
                    "2": "value2",
                    "3": "input_2"
                },
                "param_3": {
                    "3": "input_3",
                    "1": "y1",
                    "2": "num3",
                    "15": "input3"
                },
                "param_4": {
                    "1": "w",
                    "2": "value4",
                    "3": "input_4",
                    "15": "input4"
                },
                "uVar1": {
                    "1": "temp2",
                    "3": "temp1",
                    "14": "bit1",
                    "2": "temp_var1"
                },
                "unaff_r4": {
                    "1": "constant2",
                    "4": "bit2",
                    "2": "temp_var1",
                    "7": "temp1",
                    "3": "temp2"
                },
                "uVar2": {
                    "1": "temp_variable3",
                    "4": "temp3",
                    "2": "temp_var2"
                },
                "uVar3": {
                    "1": "bit_w",
                    "2": "bit4",
                    "4": "bit3",
                    "3": "temp3",
                    "5": "temp4"
                },
                "in_r12": {
                    "1": "temp3",
                    "4": "constant",
                    "2": "bit5",
                    "3": "temp5"
                },
                "bVar4": {
                    "3": "check_flag",
                    "1": "check",
                    "20": "is_zero",
                    "2": "temp_var6"
                },
                "LAB_08000704": {
                    "1": "label_1"
                },
                "LAB_080006c8": {
                    "1": "label_2"
                }
            }
        },
        "FUN_08000904": {
            "entrypoint": "0x08000904",
            "current_name": "check_equality_08000904",
            "code": "\nuint check_equality_08000904(uint value1,uint value2,uint value3,uint value4)\n\n{\n  uint result;\n  bool is_zero;\n  bool is_negative;\n  \n  if (((int)(value2 << 1) >> 0x15 == -1 || (int)(value4 << 1) >> 0x15 == -1) &&\n     ((((int)(value2 << 1) >> 0x15 == -1 && ((value1 | value2 << 0xc) != 0)) ||\n      (((int)(value4 << 1) >> 0x15 == -1 && ((value3 | value4 << 0xc) != 0)))))) {\n    return 1;\n  }\n  is_zero = (value1 | value2 << 1) == 0;\n  if (is_zero) {\n    is_zero = (value3 | value4 << 1) == 0;\n  }\n  if (!is_zero) {\n    is_zero = value2 == value4;\n  }\n  if (is_zero) {\n    is_zero = value1 == value3;\n  }\n  if (!is_zero) {\n    result = value2 ^ value4;\n    is_zero = result == 0;\n    if (-1 < (int)result) {\n      is_zero = value2 == value4;\n    }\n    is_negative = -1 < (int)result && value4 <= value2;\n    if (is_zero) {\n      is_negative = value3 <= value1;\n    }\n    value4 = (int)value4 >> 0x1f;\n    if (!is_negative) {\n      value4 = ~value4;\n    }\n    return value4 | 1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08000904": "check_equality_08000904",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "value3",
                "param_4": "value4",
                "uVar1": "result",
                "bVar2": "is_zero",
                "bVar3": "is_negative"
            },
            "calling": [
                "FUN_08000990"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08000904": {
                    "1": "comparison_result",
                    "8": "check_parameters",
                    "13": "check_equality",
                    "2": "check_params_equality"
                },
                "param_1": {
                    "1": "input_var_1",
                    "5": "value_1",
                    "6": "a",
                    "17": "value1",
                    "2": "input1"
                },
                "param_2": {
                    "2": "input2",
                    "1": "shifted2",
                    "5": "value_2",
                    "6": "b",
                    "16": "value2"
                },
                "param_3": {
                    "1": "input_var_3",
                    "6": "c",
                    "16": "value3",
                    "2": "input3",
                    "5": "value_3"
                },
                "param_4": {
                    "1": "return_flag",
                    "5": "value_4",
                    "6": "d",
                    "14": "value4",
                    "2": "input4"
                },
                "uVar1": {
                    "1": "temp1",
                    "19": "result",
                    "10": "xor_result"
                },
                "bVar2": {
                    "1": "are_values_valid",
                    "18": "is_zero",
                    "3": "is_equal"
                },
                "bVar3": {
                    "1": "is_equal_or_less",
                    "2": "is_greater",
                    "9": "is_negative"
                },
                "return_val": {
                    "1": "result"
                },
                "param_4 >> 0x1f": {
                    "1": "shifted_right_31"
                },
                "param_4 | 1": {
                    "1": "result_with_flag"
                }
            }
        },
        "FUN_08000980": {
            "entrypoint": "0x08000980",
            "current_name": "check_and_return_08000980",
            "code": "\nvoid check_and_return_08000980(undefined4 input_1,undefined4 input_2,undefined4 input_3,undefined4 input_4)\n\n{\n  check_and_return_08000980_08000990(input_3,input_4,input_1,input_2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000980": "check_and_return_08000980",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4"
            },
            "calling": [
                "FUN_080009f0"
            ],
            "called": [
                "FUN_08000990"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08000980": {
                    "1": "perform_checks",
                    "6": "check_and_return_values",
                    "9": "check_and_return",
                    "3": "check_and_return_params"
                },
                "param_1": {
                    "12": "input_1",
                    "1": "first_param",
                    "4": "input_param_1",
                    "2": "input_param1"
                },
                "param_2": {
                    "1": "value2",
                    "2": "input_param2",
                    "4": "value_2",
                    "12": "input_2"
                },
                "param_3": {
                    "6": "input_3",
                    "1": "third_param",
                    "2": "check_param1",
                    "3": "value_3",
                    "4": "param_3"
                },
                "param_4": {
                    "3": "input_param_4",
                    "1": "parameter_4",
                    "6": "input_4",
                    "4": "param_4",
                    "2": "check_param_2"
                },
                "<original_function_name>": {
                    "1": "validate_parameters"
                },
                "<param_1>": {
                    "1": "input_1"
                },
                "<param_2>": {
                    "1": "input_2"
                },
                "<param_3>": {
                    "1": "input_3"
                },
                "<param_4>": {
                    "1": "input_4"
                }
            }
        },
        "FUN_08000990": {
            "entrypoint": "0x08000990",
            "current_name": "check_and_return_08000990",
            "code": "\nundefined4 check_and_return_08000990(undefined4 input_value)\n\n{\n  check_equality();\n  return input_value;\n}\n\n",
            "renaming": {
                "FUN_08000990": "check_and_return_08000990",
                "param_1": "input_value",
                "check_equality_08000904": "check_equality"
            },
            "calling": [
                "FUN_08000980",
                "FUN_080009a0",
                "FUN_080009b4",
                "FUN_080009c8"
            ],
            "called": [
                "FUN_08000904"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08000990": {
                    "1": "check_and_return_parameter",
                    "3": "check_and_return_param",
                    "8": "check_and_return",
                    "4": "check_equality_and_return",
                    "6": "check_equality"
                },
                "param_1": {
                    "4": "input",
                    "1": "input_parameter",
                    "19": "input_value",
                    "7": "input_param"
                },
                "check_equality_08000904": {
                    "3": "check_equality"
                }
            }
        },
        "FUN_080009a0": {
            "entrypoint": "0x080009a0",
            "current_name": "check_and_return_080009a0",
            "code": "\nbool check_and_return_080009a0(void)\n\n{\n  char input_character;\n  \n  check_and_return_080009a0();\n  return input_character != '\\0';\n}\n\n",
            "renaming": {
                "FUN_080009a0": "check_and_return_080009a0",
                "in_ZR": "input_character",
                "check_and_return_08000990": "check_and_return"
            },
            "calling": [
                "FUN_08005900"
            ],
            "called": [
                "FUN_08000990"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080009a0": {
                    "2": "check_and_return_flag",
                    "1": "check_if_condition_is_true",
                    "3": "check_and_return_result",
                    "12": "check_and_return"
                },
                "in_ZR": {
                    "3": "flag",
                    "2": "character",
                    "1": "is_not_zero",
                    "7": "input_char",
                    "8": "input_character",
                    "5": "result"
                },
                "check_and_return_08000990": {
                    "2": "check_and_return"
                }
            }
        },
        "FUN_080009b4": {
            "entrypoint": "0x080009b4",
            "current_name": "is_end_of_string_080009b4",
            "code": "\nbool is_end_of_string_080009b4(void)\n\n{\n  char input_character;\n  \n  check_and_return();\n  return input_character == '\\0';\n}\n\n",
            "renaming": {
                "FUN_080009b4": "is_end_of_string_080009b4",
                "in_CY": "input_character",
                "check_and_return_08000990": "check_and_return"
            },
            "calling": [
                "FUN_08005bc8",
                "FUN_08005900"
            ],
            "called": [
                "FUN_08000990"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080009b4": {
                    "1": "check_if_empty",
                    "2": "is_null_terminator",
                    "4": "is_null_terminated",
                    "3": "check_if_input_is_empty"
                },
                "in_CY": {
                    "1": "input_status",
                    "2": "character",
                    "6": "input_char",
                    "20": "input_character"
                },
                "check_and_return_08000990": {
                    "2": "check_and_return"
                }
            }
        },
        "FUN_080009c8": {
            "entrypoint": "0x080009c8",
            "current_name": "check_and_return_080009c8",
            "code": "\nbool check_and_return_080009c8(void)\n\n{\n  undefined zero_flag;\n  undefined carry_flag;\n  \n  check_and_return_080009c8_08000990();\n  return !(bool)carry_flag || (bool)zero_flag;\n}\n\n",
            "renaming": {
                "FUN_080009c8": "check_and_return_080009c8",
                "in_ZR": "zero_flag",
                "in_CY": "carry_flag"
            },
            "calling": [
                "FUN_08006228"
            ],
            "called": [
                "FUN_08000990"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080009c8": {
                    "1": "check_if_carry_and_zero",
                    "4": "check_and_return_result",
                    "13": "check_and_return",
                    "2": "check_and_return_error"
                },
                "in_ZR": {
                    "1": "is_zero_set",
                    "2": "is_zero_result",
                    "10": "is_zero",
                    "16": "zero_flag"
                },
                "in_CY": {
                    "2": "is_carry_set",
                    "8": "is_carry",
                    "19": "carry_flag"
                }
            }
        },
        "FUN_080009f0": {
            "entrypoint": "0x080009f0",
            "current_name": "is_null_terminated_080009f0",
            "code": "\nbool is_null_terminated_080009f0(void)\n\n{\n  char input_character;\n  \n  check_and_return();\n  return input_character == '\\0';\n}\n\n",
            "renaming": {
                "FUN_080009f0": "is_null_terminated_080009f0",
                "in_CY": "input_character",
                "check_and_return_08000980": "check_and_return"
            },
            "calling": [
                "FUN_08006d68",
                "FUN_08005c70",
                "FUN_08005854",
                "FUN_08006228"
            ],
            "called": [
                "FUN_08000980"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080009f0": {
                    "1": "is_null_terminator",
                    "6": "is_null_terminated",
                    "2": "check_if_string_empty"
                },
                "in_CY": {
                    "1": "char_to_check",
                    "4": "character",
                    "8": "input_char",
                    "15": "input_character"
                },
                "check_and_return_08000980": {
                    "2": "check_and_return"
                }
            }
        },
        "FUN_08000a04": {
            "entrypoint": "0x08000a04",
            "current_name": "check_parameters_08000a04",
            "code": "\nundefined4 check_parameters_08000a04(uint value1,int value2,uint value3,int value4)\n\n{\n  if ((((value2 << 1) >> 0x15 != -1) || ((value1 | value2 << 0xc) == 0)) &&\n     (((value4 << 1) >> 0x15 != -1 || ((value3 | value4 << 0xc) == 0)))) {\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08000a04": "check_parameters_08000a04",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "value3",
                "param_4": "value4"
            },
            "calling": [
                "FUN_08005bc8",
                "FUN_08005854",
                "FUN_08005900"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08000a04": {
                    "13": "check_parameters",
                    "1": "is_valid_parameters",
                    "2": "check_inputs",
                    "8": "check_params"
                },
                "param_1": {
                    "1": "first_param",
                    "3": "input_1",
                    "5": "value_1",
                    "12": "value1",
                    "7": "input1"
                },
                "param_2": {
                    "7": "input2",
                    "1": "second_param",
                    "4": "value_2",
                    "3": "input_2",
                    "12": "value2"
                },
                "param_3": {
                    "3": "input_3",
                    "1": "third_param",
                    "12": "value3",
                    "7": "input3",
                    "4": "value_3"
                },
                "param_4": {
                    "4": "value_4",
                    "3": "input_4",
                    "1": "shift_2",
                    "12": "value4",
                    "7": "input4"
                },
                "param_2 << 1": {
                    "1": "shifted_input2"
                },
                "param_1 | param_2 << 0xc": {
                    "1": "combined_inputs12"
                },
                "param_4 << 1": {
                    "1": "shifted_input4"
                },
                "param_3 | param_4 << 0xc": {
                    "1": "combined_inputs34"
                },
                "return value": {
                    "1": "is_valid"
                }
            }
        },
        "FUN_08000a30": {
            "entrypoint": "0x08000a30",
            "current_name": "calculate_floating_point_08000a30",
            "code": "\nuint calculate_floating_point_08000a30(uint input_value,uint multiplier)\n\n{\n  uint result;\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  bool is_zero;\n  bool is_less_than;\n  \n  temp1 = multiplier * 2;\n  is_less_than = temp1 < 0x70000000;\n  temp2 = temp1 + 0x90000000;\n  result = temp2;\n  if (!is_less_than) {\n    temp3 = temp1 + 0x8fe00000;\n    result = temp3;\n  }\n  is_zero = result == 0;\n  if (!is_less_than && temp2 >= 0x200000) {\n    is_zero = temp3 == 0x1fc00000;\n  }\n  if (((is_less_than || temp2 < 0x200000) || 0x1fc00000 < temp3) || is_zero) {\n    if ((multiplier & 0x40000000) != 0) {\n      if (((int)temp1 >> 0x15 == -1) && ((input_value | multiplier << 0xc) != 0)) {\n        return 0x7fc00000;\n      }\n      return multiplier & 0x80000000 | 0x7f800000;\n    }\n    if ((int)(temp1 + 0x92e00000) < 0 != is_carry_set(temp2,0x2e00000)) {\n      return multiplier & 0x80000000;\n    }\n    temp1 = 0x18 - (temp1 + 0x92e00000 >> 0x15);\n    result = input_value >> (temp1 & 0xff);\n    if (input_value << (0x20 - temp1 & 0xff) != 0) {\n      result = result | 1;\n    }\n    temp2 = multiplier & 0x1fffff | 0x100000;\n    input_value = result | temp2 << (0x20 - temp1 & 0xff);\n    temp2 = (temp2 >> (temp1 & 0xff)) << 1;\n  }\n  result = (multiplier & 0x80000000 | input_value >> 0x1d) + temp2 * 4 + (uint)(0x7fffffff < input_value * 8);\n  if (input_value * 8 == 0x80000000) {\n    result = result & 0xfffffffe;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08000a30": "calculate_floating_point_08000a30",
                "param_1": "input_value",
                "param_2": "multiplier",
                "uVar1": "result",
                "uVar2": "temp1",
                "uVar3": "temp2",
                "in_r12": "temp3",
                "bVar4": "is_zero",
                "bVar5": "is_less_than",
                "SCARRY4": "is_carry_set"
            },
            "calling": [
                "FUN_08003330",
                "FUN_0800411c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08000a30": {
                    "1": "calculate_floating_point_value",
                    "3": "calculate_float_value",
                    "2": "convert_float_to_fixed_point",
                    "5": "calculate_float",
                    "8": "calculate_floating_point"
                },
                "param_1": {
                    "6": "input",
                    "1": "input1",
                    "7": "input_value",
                    "2": "input_value1",
                    "5": "input_float"
                },
                "param_2": {
                    "1": "input_float2",
                    "2": "flags",
                    "3": "input_mask",
                    "4": "multiplier"
                },
                "uVar1": {
                    "1": "output_float",
                    "2": "output_value",
                    "24": "result"
                },
                "uVar2": {
                    "2": "shifted_bits",
                    "1": "input_float_times_two",
                    "4": "temp1"
                },
                "uVar3": {
                    "1": "offset",
                    "2": "sum",
                    "4": "temp2"
                },
                "in_r12": {
                    "2": "condition",
                    "1": "result4",
                    "4": "temp3"
                },
                "bVar4": {
                    "1": "check_zero",
                    "2": "is_special_case",
                    "21": "is_zero"
                },
                "bVar5": {
                    "1": "is_small_value",
                    "2": "flag2",
                    "7": "is_less_than",
                    "5": "is_less_than_threshold"
                },
                "SCARRY4": {
                    "1": "is_unsigned_carry",
                    "2": "is_carry_set"
                }
            }
        },
        "FUN_08000ad8": {
            "entrypoint": "0x08000ad8",
            "current_name": "reverse_bits_08000ad8",
            "code": "\nuint reverse_bits_08000ad8(uint input1,uint input2,undefined4 input3,uint input4)\n\n{\n  int shifted_input1;\n  int shifted_input2;\n  uint temp1;\n  uint temp2;\n  uint result;\n  uint shift_count;\n  uint difference;\n  bool is_equal;\n  \n  temp1 = input2 ^ 0x80000000;\n  result = input1 << 1;\n  is_equal = result == 0;\n  if (!is_equal) {\n    input4 = input2 << 1;\n    is_equal = input4 == 0;\n  }\n  if (!is_equal) {\n    is_equal = result == input4;\n  }\n  shifted_input1 = (int)result >> 0x18;\n  if (!is_equal) {\n    is_equal = shifted_input1 == -1;\n  }\n  if (!is_equal) {\n    is_equal = (int)input4 >> 0x18 == -1;\n  }\n  if (is_equal) {\n    shifted_input2 = (int)(input2 << 1) >> 0x18;\n    if (shifted_input1 == -1 || shifted_input2 == -1) {\n      result = temp1;\n      if (shifted_input1 == -1) {\n        result = input1;\n      }\n      if (shifted_input1 != -1 || shifted_input2 != -1) {\n        temp1 = result;\n      }\n      is_equal = (result & 0x7fffff) == 0;\n      if (is_equal) {\n        is_equal = (temp1 & 0x7fffff) == 0;\n      }\n      if (is_equal) {\n        is_equal = result == temp1;\n      }\n      if (!is_equal) {\n        result = result | 0x400000;\n      }\n      return result;\n    }\n    if (((input1 ^ temp1) & 0x7fffffff) != 0) {\n      if (result == 0) {\n        input1 = temp1;\n      }\n      return input1;\n    }\n    if (input1 != temp1) {\n      return 0;\n    }\n    if ((result & 0xff000000) == 0) {\n      temp1 = input1 << 1;\n      if ((input1 & 0x80000000) != 0) {\n        temp1 = temp1 | 0x80000000;\n      }\n      return temp1;\n    }\n    if (result < 0xfe000000) {\n      return input1 + 0x800000;\n    }\n    input1 = input1 & 0x80000000;\nLAB_08000c12:\n    return input1 | 0x7f800000;\n  }\n  result = result >> 0x18;\n  input4 = input4 >> 0x18;\n  difference = input4 - result;\n  is_equal = difference != 0;\n  shift_count = result;\n  if (is_equal && result <= input4) {\n    shift_count = result + difference;\n  }\n  if (is_equal && result <= input4) {\n    temp1 = temp1 ^ input1;\n  }\n  if (is_equal && result <= input4) {\n    input1 = input1 ^ temp1;\n  }\n  if (is_equal && result <= input4) {\n    temp1 = temp1 ^ input1;\n  }\n  if (input4 < result) {\n    difference = -difference;\n  }\n  if (0x19 < difference) {\n    return input1;\n  }\n  result = input1 & 0xffffff | 0x800000;\n  if ((input1 & 0x80000000) != 0) {\n    result = -result;\n  }\n  temp2 = temp1 & 0xffffff | 0x800000;\n  if ((temp1 & 0x80000000) != 0) {\n    temp2 = -temp2;\n  }\n  if (shift_count == difference) {\n    temp2 = temp2 ^ 0x800000;\n    if (shift_count == 0) {\n      result = result ^ 0x800000;\n      shift_count = 1;\n    }\n    else {\n      difference = difference - 1;\n    }\n  }\n  result = result + ((int)temp2 >> (difference & 0xff));\n  temp2 = temp2 << (0x20 - difference & 0xff);\n  input1 = result & 0x80000000;\n  if ((int)result < 0) {\n    is_equal = temp2 != 0;\n    temp2 = -temp2;\n    result = -result - (uint)is_equal;\n  }\n  if (result < 0x800000) {\n    temp1 = temp2 & 0x80000000;\n    temp2 = temp2 << 1;\n    result = result * 2 + (uint)(temp1 != 0);\n    temp1 = shift_count - 2;\n    if ((result & 0x800000) == 0) {\n      difference = LZCOUNT(result) - 8;\n      result = result << (difference & 0xff);\n      if ((int)temp1 < (int)difference) {\n        result = result >> (-(temp1 - difference) & 0xff);\n      }\n      else {\n        result = result + (temp1 - difference) * 0x800000;\n      }\n      return result | input1;\n    }\n  }\n  else {\n    temp1 = shift_count - 1;\n    if (0xffffff < result) {\n      temp1 = result & 1;\n      result = result >> 1;\n      temp2 = (uint)(temp1 != 0) << 0x1f | temp2 >> 1;\n      temp1 = shift_count;\n      if (0xfd < shift_count) goto LAB_08000c12;\n    }\n  }\n  result = result + temp1 * 0x800000 + (uint)(0x7fffffff < temp2);\n  if (temp2 == 0x80000000) {\n    result = result & 0xfffffffe;\n  }\n  return result | input1;\n}\n\n",
            "renaming": {
                "FUN_08000ad8": "reverse_bits_08000ad8",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "iVar1": "shifted_input1",
                "iVar2": "shifted_input2",
                "uVar3": "temp1",
                "uVar4": "temp2",
                "uVar5": "result",
                "uVar6": "shift_count",
                "uVar7": "difference",
                "bVar8": "is_equal"
            },
            "calling": [
                "FUN_08003330",
                "FUN_0800426c",
                "FUN_08002d88",
                "FUN_08002bf0",
                "FUN_08002ee8",
                "FUN_08002ec0",
                "FUN_0800483c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08000ad8": {
                    "1": "calculate_packed_float",
                    "5": "reverse_bits",
                    "2": "calculate_shifted_value"
                },
                "param_1": {
                    "7": "input1",
                    "1": "first_parameter",
                    "2": "dividend",
                    "3": "input_value1"
                },
                "param_2": {
                    "5": "mask",
                    "7": "input2",
                    "1": "input_val_2",
                    "3": "bit_mask",
                    "2": "divisor"
                },
                "param_3": {
                    "1": "third_parameter",
                    "4": "param_3",
                    "6": "input3",
                    "2": "constant"
                },
                "param_4": {
                    "1": "input_val_4",
                    "4": "result",
                    "2": "shift",
                    "6": "input4"
                },
                "iVar1": {
                    "1": "sign_dividend",
                    "2": "shift_amount",
                    "4": "shifted_input1"
                },
                "iVar2": {
                    "2": "shifted_value2",
                    "1": "shifted_signed_value",
                    "4": "shifted_input2"
                },
                "uVar3": {
                    "1": "modified_mask",
                    "2": "xored_value"
                },
                "uVar4": {
                    "1": "temp_mask",
                    "2": "result_2"
                },
                "uVar5": {
                    "1": "mantissa_shifted_up",
                    "4": "shifted_input",
                    "2": "shifted_input_value",
                    "5": "result"
                },
                "uVar6": {
                    "1": "result",
                    "3": "shift_count",
                    "2": "shifted_result"
                },
                "uVar7": {
                    "1": "temp_var7",
                    "2": "shift_diff",
                    "20": "difference"
                },
                "bVar8": {
                    "1": "is_match",
                    "4": "condition",
                    "2": "is_zero",
                    "3": "is_true",
                    "8": "is_equal"
                },
                "uVar8": {
                    "1": "shift_count"
                },
                "uVar9": {
                    "1": "modified_input2"
                },
                "uVar10": {
                    "1": "shifted_amount"
                },
                "uVar11": {
                    "1": "shifted_result"
                },
                "uVar12": {
                    "1": "shifted_check"
                },
                "uVar13": {
                    "1": "adjusted_result"
                },
                "uVar14": {
                    "1": "adjusted_check"
                },
                "uVar15": {
                    "1": "final_result"
                }
            }
        },
        "FUN_08000adc": {
            "entrypoint": "0x08000adc",
            "current_name": "calculate_float_08000adc",
            "code": "\nuint calculate_float_08000adc(uint input1,uint input2,undefined4 input3,uint input4)\n\n{\n  int shifted_input1;\n  int shifted_input2;\n  uint result1;\n  uint result2;\n  uint temp1;\n  uint difference;\n  bool is_zero;\n  \n  result2 = input1 << 1;\n  is_zero = result2 == 0;\n  if (!is_zero) {\n    input4 = input2 << 1;\n    is_zero = input4 == 0;\n  }\n  if (!is_zero) {\n    is_zero = result2 == input4;\n  }\n  shifted_input1 = (int)result2 >> 0x18;\n  if (!is_zero) {\n    is_zero = shifted_input1 == -1;\n  }\n  if (!is_zero) {\n    is_zero = (int)input4 >> 0x18 == -1;\n  }\n  if (is_zero) {\n    shifted_input2 = (int)(input2 << 1) >> 0x18;\n    if (shifted_input1 == -1 || shifted_input2 == -1) {\n      result2 = input2;\n      if (shifted_input1 == -1) {\n        result2 = input1;\n      }\n      if (shifted_input1 != -1 || shifted_input2 != -1) {\n        input2 = result2;\n      }\n      is_zero = (result2 & 0x7fffff) == 0;\n      if (is_zero) {\n        is_zero = (input2 & 0x7fffff) == 0;\n      }\n      if (is_zero) {\n        is_zero = result2 == input2;\n      }\n      if (!is_zero) {\n        result2 = result2 | 0x400000;\n      }\n      return result2;\n    }\n    if (((input1 ^ input2) & 0x7fffffff) != 0) {\n      if (result2 == 0) {\n        input1 = input2;\n      }\n      return input1;\n    }\n    if (input1 != input2) {\n      return 0;\n    }\n    if ((result2 & 0xff000000) == 0) {\n      result2 = input1 << 1;\n      if ((input1 & 0x80000000) != 0) {\n        result2 = result2 | 0x80000000;\n      }\n      return result2;\n    }\n    if (result2 < 0xfe000000) {\n      return input1 + 0x800000;\n    }\n    input1 = input1 & 0x80000000;\nLAB_08000c12:\n    return input1 | 0x7f800000;\n  }\n  result2 = result2 >> 0x18;\n  input4 = input4 >> 0x18;\n  difference = input4 - result2;\n  is_zero = difference != 0;\n  temp1 = result2;\n  if (is_zero && result2 <= input4) {\n    temp1 = result2 + difference;\n  }\n  if (is_zero && result2 <= input4) {\n    input2 = input2 ^ input1;\n  }\n  if (is_zero && result2 <= input4) {\n    input1 = input1 ^ input2;\n  }\n  if (is_zero && result2 <= input4) {\n    input2 = input2 ^ input1;\n  }\n  if (input4 < result2) {\n    difference = -difference;\n  }\n  if (0x19 < difference) {\n    return input1;\n  }\n  result2 = input1 & 0xffffff | 0x800000;\n  if ((input1 & 0x80000000) != 0) {\n    result2 = -result2;\n  }\n  result1 = input2 & 0xffffff | 0x800000;\n  if ((input2 & 0x80000000) != 0) {\n    result1 = -result1;\n  }\n  if (temp1 == difference) {\n    result1 = result1 ^ 0x800000;\n    if (temp1 == 0) {\n      result2 = result2 ^ 0x800000;\n      temp1 = 1;\n    }\n    else {\n      difference = difference - 1;\n    }\n  }\n  result2 = result2 + ((int)result1 >> (difference & 0xff));\n  result1 = result1 << (0x20 - difference & 0xff);\n  input1 = result2 & 0x80000000;\n  if ((int)result2 < 0) {\n    is_zero = result1 != 0;\n    result1 = -result1;\n    result2 = -result2 - (uint)is_zero;\n  }\n  if (result2 < 0x800000) {\n    difference = result1 & 0x80000000;\n    result1 = result1 << 1;\n    result2 = result2 * 2 + (uint)(difference != 0);\n    difference = temp1 - 2;\n    if ((result2 & 0x800000) == 0) {\n      temp1 = leading_zeros - 8;\n      result2 = result2 << (temp1 & 0xff);\n      if ((int)difference < (int)temp1) {\n        result2 = result2 >> (-(difference - temp1) & 0xff);\n      }\n      else {\n        result2 = result2 + (difference - temp1) * 0x800000;\n      }\n      return result2 | input1;\n    }\n  }\n  else {\n    difference = temp1 - 1;\n    if (0xffffff < result2) {\n      difference = result2 & 1;\n      result2 = result2 >> 1;\n      result1 = (uint)(difference != 0) << 0x1f | result1 >> 1;\n      difference = temp1;\n      if (0xfd < temp1) goto LAB_08000c12;\n    }\n  }\n  result2 = result2 + difference * 0x800000 + (uint)(0x7fffffff < result1);\n  if (result1 == 0x80000000) {\n    result2 = result2 & 0xfffffffe;\n  }\n  return result2 | input1;\n}\n\n",
            "renaming": {
                "FUN_08000adc": "calculate_float_08000adc",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar4": "result2",
                "uVar5": "temp1",
                "uVar6": "difference",
                "bVar7": "is_zero",
                "iVar1": "shifted_input1",
                "iVar2": "shifted_input2",
                "uVar3": "result1",
                "LZCOUNT(uVar4)": "leading_zeros",
                "LZCOUNT": "leading_zeros_count"
            },
            "calling": [
                "FUN_08003330",
                "FUN_0800426c",
                "FUN_08004a84",
                "FUN_0800411c",
                "FUN_08002ee8",
                "FUN_08002cb0",
                "FUN_08002ec0",
                "FUN_0800483c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08000adc": {
                    "1": "calculate_result",
                    "2": "calculate_floating_point",
                    "15": "calculate_float"
                },
                "param_1": {
                    "3": "num1",
                    "1": "input_value1",
                    "2": "number1",
                    "14": "input1"
                },
                "param_2": {
                    "14": "input2",
                    "1": "input_value2",
                    "3": "value2",
                    "2": "input_float2"
                },
                "param_3": {
                    "2": "input_3",
                    "1": "num3",
                    "5": "param3",
                    "3": "unused_param",
                    "7": "input3"
                },
                "param_4": {
                    "1": "number3",
                    "5": "param4",
                    "2": "unused_param2",
                    "7": "input4"
                },
                "uVar4": {
                    "1": "value2_with_fraction",
                    "2": "result",
                    "3": "shifted_input1",
                    "5": "result2"
                },
                "uVar5": {
                    "1": "difference",
                    "2": "shift_amount",
                    "3": "temp1"
                },
                "uVar6": {
                    "1": "float_difference",
                    "5": "diff",
                    "3": "temp2",
                    "14": "difference"
                },
                "bVar7": {
                    "1": "is_condition_met",
                    "19": "is_zero",
                    "9": "is_equal"
                },
                "iVar1": {
                    "1": "shifted_num1",
                    "3": "shifted_input1_msb",
                    "2": "shifted_float1",
                    "6": "shifted_input1"
                },
                "iVar2": {
                    "1": "shift_right_value2",
                    "2": "shifted_float2",
                    "3": "shifted_input2_msb",
                    "6": "shifted_input2"
                },
                "uVar3": {
                    "1": "float_result",
                    "6": "result1",
                    "2": "temp1",
                    "4": "result"
                },
                "LZCOUNT(uVar4)": {
                    "1": "leading_zeros"
                },
                "LZCOUNT": {
                    "1": "leading_zero_count",
                    "2": "leading_zeros_count"
                }
            }
        },
        "FUN_08000c3c": {
            "entrypoint": "0x08000c3c",
            "current_name": "calculate_value_08000c3c",
            "code": "\nuint calculate_value_08000c3c(uint input_value)\n\n{\n  uint leading_zeros;\n  uint shift_amount;\n  int constant;\n  uint mask;\n  \n  if (input_value == 0) {\n    return 0;\n  }\n  leading_zeros = LZCOUNT(input_value);\n  shift_amount = leading_zeros - 8;\n  constant = shift_amount * -0x800000 + 0x4a800000;\n  if (7 < leading_zeros) {\n    mask = 0 << (shift_amount & 0xff);\n    leading_zeros = constant + (input_value << (shift_amount & 0xff)) +\n            (0U >> (0x20 - shift_amount & 0xff)) + (uint)(0x7fffffff < mask);\n    if (mask == 0x80000000) {\n      leading_zeros = leading_zeros & 0xfffffffe;\n    }\n    return leading_zeros;\n  }\n  shift_amount = input_value << leading_zeros + 0x18;\n  leading_zeros = constant + ((input_value >> (0x20 - (leading_zeros + 0x18) & 0xff)) - ((int)shift_amount >> 0x1f));\n  if ((shift_amount & 0x7fffffff) == 0) {\n    leading_zeros = leading_zeros & ~(shift_amount >> 0x1f);\n  }\n  return leading_zeros;\n}\n\n",
            "renaming": {
                "FUN_08000c3c": "calculate_value_08000c3c",
                "param_1": "input_value",
                "uVar1": "leading_zeros",
                "uVar2": "shift_amount",
                "iVar3": "constant",
                "uVar4": "mask"
            },
            "calling": [
                "FUN_08002f28"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08000c3c": {
                    "5": "calculate_value",
                    "1": "count_shifted_bits",
                    "3": "calculate_new_value",
                    "2": "calculate_unsigned_result",
                    "4": "calculate_modified_value"
                },
                "param_1": {
                    "11": "input",
                    "1": "input_number",
                    "18": "input_value"
                },
                "uVar1": {
                    "1": "leading_zeros_count",
                    "4": "leading_zeroes",
                    "15": "leading_zeros",
                    "2": "leading_zero_count",
                    "3": "result"
                },
                "uVar2": {
                    "1": "shift_count",
                    "17": "shift_amount",
                    "4": "shift",
                    "2": "shifted_input"
                },
                "iVar3": {
                    "2": "base_value",
                    "4": "intermediate_value",
                    "1": "calculation_result",
                    "5": "offset",
                    "9": "constant",
                    "3": "constant_value"
                },
                "uVar4": {
                    "1": "conditional_value",
                    "2": "temp",
                    "11": "mask"
                },
                "uVar5": {
                    "1": "result_value",
                    "6": "result"
                },
                "uVar2_1": {
                    "1": "shift_amount2"
                },
                "iVar3_1": {
                    "1": "constant_value2"
                },
                "uVar2_temp": {
                    "1": "temp_shift_amount"
                },
                "uVar1_temp": {
                    "1": "temp_leading_zeros"
                },
                "uVar1_shifted": {
                    "1": "shifted_input_value"
                },
                "uVar2_shifted": {
                    "1": "shifted_temp_value"
                },
                "uVar1_masked": {
                    "1": "masked_input_value"
                },
                "uVar2_masked": {
                    "1": "masked_temp_value"
                },
                "uVar6": {
                    "1": "temp_value"
                },
                "uVar7": {
                    "1": "unsigned_comparison"
                },
                "uVar8": {
                    "1": "is_negative"
                },
                "uVar9": {
                    "1": "shifted_input"
                },
                "uVar10": {
                    "1": "shifted_result"
                },
                "uVar1_exp": {
                    "1": "leading_zeros_minus8"
                },
                "uVar1_shr": {
                    "1": "leading_zeros_shifted"
                },
                "uVar1_and": {
                    "1": "leading_zeros_masked"
                },
                "uVar2_shr": {
                    "1": "shift_amount_shifted"
                },
                "uVar2_or": {
                    "1": "shift_amount_or"
                },
                "uVar4_eq": {
                    "1": "threshold_equals"
                },
                "uVar2_and": {
                    "1": "shift_amount_masked"
                },
                "uVar1_add": {
                    "1": "result1"
                },
                "uVar2_shift": {
                    "1": "result2"
                },
                "uVar1_sub": {
                    "1": "result3"
                },
                "uVar2_and2": {
                    "1": "result4"
                },
                "uVar1_and2": {
                    "1": "result5"
                },
                "uVar2_cmp": {
                    "1": "result6"
                },
                "uVar2_eq": {
                    "1": "result7"
                },
                "uVar2_and3": {
                    "1": "result8"
                },
                "uVar1_and3": {
                    "1": "result9"
                },
                "uVar2_shl": {
                    "1": "result10"
                },
                "uVar2_shr2": {
                    "1": "result11"
                },
                "uVar1_final": {
                    "1": "result"
                },
                "uVar4 == 0x80000000": {
                    "2": "is_negative"
                },
                "uVar1 > 7": {
                    "1": "is_greater_than_seven"
                },
                "uVar2 & 0xff": {
                    "1": "shift_mask"
                },
                "uVar1 & 0xff": {
                    "1": "shift_mask2"
                },
                "uVar1 & 0xfffffffe": {
                    "1": "result_with_cleared_lsb"
                },
                "uVar2 & 0x7fffffff": {
                    "1": "positive_shift_mask"
                },
                "uVar2 >> 0x1f": {
                    "1": "sign_extension"
                },
                "uVar2 & 0x7fffffff) == 0": {
                    "1": "zero_shift_mask"
                },
                "param_1 << uVar1 + 0x18": {
                    "1": "left_shifted_value"
                },
                "uVar1 + 0x18": {
                    "1": "shift_amount_with_offset"
                },
                "(param_1 >> (0x20 - (uVar1 + 0x18) & 0xff)) - ((int)uVar2 >> 0x1f)": {
                    "1": "shifted_value_with_sign"
                },
                "(uVar2 >> 0x1f)": {
                    "1": "sign_extension"
                },
                "uVar2 >> 0x1f)": {
                    "1": "sign_extension"
                },
                "(uVar2 & 0x7fffffff) == 0": {
                    "1": "zero_shift_mask"
                },
                "7 < uVar1": {
                    "1": "has_leading_zeros_greater_than7"
                }
            }
        },
        "FUN_08000c44": {
            "entrypoint": "0x08000c44",
            "current_name": "count_bits_08000c44",
            "code": "\nuint count_bits_08000c44(uint input_value)\n\n{\n  uint leading_zeros;\n  uint shift_amount;\n  uint sign_bit;\n  int result;\n  \n  sign_bit = input_value & 0x80000000;\n  if ((int)sign_bit < 0) {\n    input_value = -input_value;\n  }\n  if (input_value == 0) {\n    return 0;\n  }\n  leading_zeros = leading_zero_count(input_value);\n  shift_amount = leading_zeros - 8;\n  result = ((sign_bit | 0x4b000000) - 0x800000) + shift_amount * -0x800000;\n  if (7 < leading_zeros) {\n    leading_zeros = 0 << (shift_amount & 0xff);\n    sign_bit = result + (input_value << (shift_amount & 0xff)) +\n            (0U >> (0x20 - shift_amount & 0xff)) + (uint)(0x7fffffff < leading_zeros);\n    if (leading_zeros == 0x80000000) {\n      sign_bit = sign_bit & 0xfffffffe;\n    }\n    return sign_bit;\n  }\n  shift_amount = input_value << leading_zeros + 0x18;\n  sign_bit = result + ((input_value >> (0x20 - (leading_zeros + 0x18) & 0xff)) - ((int)shift_amount >> 0x1f));\n  if ((shift_amount & 0x7fffffff) == 0) {\n    sign_bit = sign_bit & ~(shift_amount >> 0x1f);\n  }\n  return sign_bit;\n}\n\n",
            "renaming": {
                "FUN_08000c44": "count_bits_08000c44",
                "param_1": "input_value",
                "uVar1": "leading_zeros",
                "uVar2": "shift_amount",
                "uVar3": "sign_bit",
                "iVar4": "result",
                "LZCOUNT": "leading_zero_count",
                "uVar": "temp"
            },
            "calling": [
                "FUN_08002b48",
                "FUN_08002d88",
                "FUN_08002bf0",
                "FUN_0800411c",
                "FUN_08002cb0",
                "FUN_0800483c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08000c44": {
                    "1": "count_bits_and_shift",
                    "5": "count_bits",
                    "2": "calculate_reverse",
                    "3": "count_set_bits"
                },
                "param_1": {
                    "9": "input",
                    "2": "input_num",
                    "10": "input_value",
                    "3": "input_number",
                    "1": "num",
                    "6": "number"
                },
                "uVar1": {
                    "1": "set_bits_count",
                    "18": "leading_zeros",
                    "5": "bit_count"
                },
                "uVar2": {
                    "1": "temp2",
                    "22": "shift_amount",
                    "3": "shift_count",
                    "4": "shift"
                },
                "uVar3": {
                    "20": "sign_bit",
                    "4": "is_negative",
                    "1": "input_sign",
                    "2": "sign_flag"
                },
                "iVar4": {
                    "1": "negative_value",
                    "4": "intermediate_result",
                    "2": "adjusted_value",
                    "22": "result"
                },
                "uVar4": {
                    "1": "mask"
                },
                "uVar5": {
                    "1": "temp_1"
                },
                "LZCOUNT": {
                    "1": "leading_zero_count"
                },
                "uVar": {
                    "1": "temp"
                },
                "iParam_4": {
                    "1": "negative_shift_amount"
                },
                "uVar1_tmp": {
                    "1": "leading_zeros_shifted"
                },
                "uVar3_tmp": {
                    "1": "sign_bit_cleared"
                },
                "uVar3_shifted": {
                    "1": "sign_bit_shifted"
                },
                "uVar3_cleared": {
                    "1": "sign_bit_cleared"
                },
                "uVar6": {
                    "1": "temp_2"
                }
            }
        },
        "FUN_08000cec": {
            "entrypoint": "0x08000cec",
            "current_name": "calculate_floating_point_08000cec",
            "code": "\nuint calculate_floating_point_08000cec(uint input1,uint input2,undefined4 param3,uint param4)\n\n{\n  longlong product;\n  uint result;\n  uint exponent1;\n  int sum;\n  int difference;\n  uint product;\n  int offset2;\n  uint temp;\n  bool is_zero;\n  bool is_negative;\n  \n  exponent1 = input1 >> 0x17 & 0xff;\n  is_zero = exponent1 == 0;\n  if (!is_zero) {\n    param4 = input2 >> 0x17 & 0xff;\n    is_zero = param4 == 0;\n  }\n  if (!is_zero) {\n    is_zero = exponent1 == 0xff;\n  }\n  if (!is_zero) {\n    is_zero = param4 == 0xff;\n  }\n  if (is_zero) {\n    param4 = input2 >> 0x17 & 0xff;\n    if (exponent1 == 0xff || param4 == 0xff) {\n      is_zero = input1 == 0 || input1 == 0x80000000;\n      result = input2;\n      if (input1 != 0 && input1 != 0x80000000) {\n        is_zero = input2 == 0;\n        result = input1;\n      }\n      if (!is_zero) {\n        is_zero = input2 == 0x80000000;\n      }\n      temp = result;\n      if (((is_zero) || ((exponent1 == 0xff && ((result & 0x7fffff) != 0)))) ||\n         ((param4 == 0xff && (temp = input2, (input2 & 0x7fffff) != 0)))) {\n        return temp | 0x7fc00000;\n      }\n      result = result ^ input2;\n      goto LAB_08000e3c;\n    }\n    is_zero = (input1 & 0x7fffffff) == 0;\n    if (!is_zero) {\n      is_zero = (input2 & 0x7fffffff) == 0;\n    }\n    if (is_zero) {\n      return (input1 ^ input2) & 0x80000000;\n    }\n    is_zero = exponent1 == 0;\n    result = input1 & 0x80000000;\n    while( true ) {\n      if (is_zero) {\n        input1 = input1 << 1;\n        is_zero = (input1 & 0x800000) == 0;\n      }\n      if (!is_zero) break;\n      exponent1 = exponent1 - 1;\n    }\n    input1 = input1 | result;\n    is_zero = param4 == 0;\n    result = input2 & 0x80000000;\n    while( true ) {\n      if (is_zero) {\n        input2 = input2 << 1;\n        is_zero = (input2 & 0x800000) == 0;\n      }\n      if (!is_zero) break;\n      param4 = param4 - 1;\n    }\n    input2 = input2 | result;\n  }\n  sum = exponent1 + param4;\n  temp = input1 ^ input2;\n  exponent1 = input1 << 9;\n  is_zero = exponent1 == 0;\n  if (!is_zero) {\n    input2 = input2 << 9;\n    is_zero = input2 == 0;\n  }\n  if (is_zero) {\n    if (exponent1 == 0) {\n      input2 = input2 << 9;\n    }\n    result = temp & 0x80000000 | input1 & 0x7fffff | input2 >> 9;\n    is_negative = SBORROW4(sum,0x7f);\n    difference = sum + -0x7f;\n    is_zero = difference == 0;\n    offset2 = difference;\n    if (!is_zero && 0x7e < sum) {\n      is_negative = SBORROW4(0xff,difference);\n      offset2 = 0xff - difference;\n      is_zero = difference == 0xff;\n    }\n    if (!is_zero && offset2 < 0 == is_negative) {\n      result = result | difference * 0x800000;\n    }\n    if (!is_zero && offset2 < 0 == is_negative) {\n      return result;\n    }\n    result = result | 0x800000;\n    product = 0;\n    is_negative = SBORROW4(difference,1);\n    temp = sum - 0x80;\n    is_zero = temp == 0;\n    exponent1 = temp;\n  }\n  else {\n    product = (ulonglong)(exponent1 >> 5 | 0x8000000) * (ulonglong)(input2 >> 5 | 0x8000000);\n    product = (uint)product;\n    result = (uint)((ulonglong)product >> 0x20);\n    is_zero = result < 0x800000;\n    if (is_zero) {\n      result = result << 1;\n    }\n    if (is_zero) {\n      result = result | product >> 0x1f;\n      product = product << 1;\n    }\n    result = temp & 0x80000000 | result;\n    temp = (sum + -0x7f) - (uint)is_zero;\n    is_negative = SBORROW4(temp,0xfd);\n    is_zero = temp == 0xfd;\n    exponent1 = temp - 0xfd;\n    if (temp < 0xfe) {\n      result = result + temp * 0x800000 + (uint)(0x7fffffff < product);\n      if (product == 0x80000000) {\n        result = result & 0xfffffffe;\n      }\n      return result;\n    }\n  }\n  if (is_zero || (int)exponent1 < 0 != is_negative) {\n    is_zero = (int)(temp + 0x19) < 0;\n    if (temp == 0xffffffe7 || is_zero != SCARRY4(temp,0x19)) {\n      result = result & 0x80000000;\n    }\n    if (temp != 0xffffffe7 && is_zero == SCARRY4(temp,0x19)) {\n      exponent1 = (result << 1) >> (-temp & 0xff);\n      temp = result << (temp + 0x20 & 0xff);\n      exponent1 = ((uint)((result & 0x80000000) != 0) << 0x1f | exponent1 >> 1) + (uint)((byte)exponent1 & 1);\n      if ((product | temp << 1) == 0) {\n        exponent1 = exponent1 & ~(temp >> 0x1f);\n      }\n      return exponent1;\n    }\n    return result;\n  }\nLAB_08000e3c:\n  return result & 0x80000000 | 0x7f800000;\n}\n\n",
            "renaming": {
                "FUN_08000cec": "calculate_floating_point_08000cec",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar2": "result",
                "uVar3": "exponent1",
                "iVar4": "sum",
                "iVar5": "difference",
                "uVar6": "product",
                "iVar7": "offset2",
                "uVar8": "temp",
                "bVar9": "is_zero",
                "bVar10": "is_negative",
                "lVar1": "product"
            },
            "calling": [
                "FUN_08002b48",
                "FUN_08003330",
                "FUN_08002d88",
                "FUN_08002bf0",
                "FUN_08004a30",
                "FUN_08004a84",
                "FUN_08002cb0",
                "FUN_08002ec0",
                "FUN_0800483c",
                "FUN_08002f28"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08000cec": {
                    "1": "unbiased_float_addition",
                    "2": "calculate_floating_point_value",
                    "7": "calculate_float",
                    "8": "calculate_floating_point"
                },
                "param_1": {
                    "1": "input_value1",
                    "2": "input_a",
                    "4": "float1",
                    "10": "input1"
                },
                "param_2": {
                    "2": "value2",
                    "10": "input2",
                    "1": "input_value_2",
                    "4": "float2"
                },
                "param_3": {
                    "1": "input_flag1",
                    "2": "input_flag",
                    "6": "param3",
                    "4": "input3",
                    "3": "unused_param"
                },
                "param_4": {
                    "1": "result",
                    "5": "param4",
                    "2": "unused_param2",
                    "4": "input4"
                },
                "uVar2": {
                    "1": "quotient",
                    "2": "final_result",
                    "24": "result"
                },
                "uVar3": {
                    "1": "shifted_bits",
                    "3": "input1_shifted",
                    "8": "exponent1"
                },
                "iVar4": {
                    "1": "u_var3_plus_float2",
                    "8": "sum",
                    "2": "sum_of_exponents"
                },
                "iVar5": {
                    "1": "offset",
                    "2": "shift_difference",
                    "3": "diff",
                    "5": "difference"
                },
                "uVar6": {
                    "1": "left_multiplied",
                    "2": "product_lower_bits",
                    "3": "product_lower",
                    "9": "product"
                },
                "iVar7": {
                    "1": "difference"
                },
                "uVar8": {
                    "1": "result",
                    "4": "temp"
                },
                "bVar9": {
                    "1": "is_zero_or_full",
                    "4": "condition",
                    "11": "is_zero",
                    "3": "is_zero1"
                },
                "bVar10": {
                    "1": "is_negative_sum_shifted_counts",
                    "8": "is_negative",
                    "5": "condition2",
                    "2": "borrow",
                    "3": "carry_flag"
                },
                "iVar10": {
                    "1": "temp_var3"
                },
                "lVar1": {
                    "1": "result",
                    "4": "product"
                },
                "iVar8": {
                    "1": "exponent"
                }
            }
        },
        "FUN_08000e54": {
            "entrypoint": "0x08000e54",
            "current_name": "calculate_float_08000e54",
            "code": "\nuint calculate_float_08000e54(uint input1,uint input2,undefined4 param3,uint param4)\n\n{\n  uint temp1;\n  uint temp2;\n  int difference;\n  uint temp4;\n  int sum;\n  uint result;\n  bool condition1;\n  bool condition2;\n  bool condition3;\n  \n  temp2 = input1 >> 0x17 & 0xff;\n  condition1 = temp2 == 0;\n  if (!condition1) {\n    param4 = input2 >> 0x17 & 0xff;\n    condition1 = param4 == 0;\n  }\n  if (!condition1) {\n    condition1 = temp2 == 0xff;\n  }\n  if (!condition1) {\n    condition1 = param4 == 0xff;\n  }\n  if (condition1) {\n    param4 = input2 >> 0x17 & 0xff;\n    result = input1;\n    if (temp2 == 0xff) {\n      if (((input1 & 0x7fffff) != 0) || (result = input2, param4 == 0xff)) {\nLAB_08000e4a:\n        return result | 0x7fc00000;\n      }\n    }\n    else {\n      if (param4 == 0xff) {\n        result = input2;\n        if ((input2 & 0x7fffff) == 0) {\nLAB_08000e00:\n          return (input1 ^ input2) & 0x80000000;\n        }\n        goto LAB_08000e4a;\n      }\n      condition1 = (input1 & 0x7fffffff) == 0;\n      if (!condition1) {\n        condition1 = (input2 & 0x7fffffff) == 0;\n      }\n      if (!condition1) {\n        condition1 = temp2 == 0;\n        result = input1 & 0x80000000;\n        while( true ) {\n          if (condition1) {\n            input1 = input1 << 1;\n            condition1 = (input1 & 0x800000) == 0;\n          }\n          if (!condition1) break;\n          temp2 = temp2 - 1;\n        }\n        input1 = input1 | result;\n        condition1 = param4 == 0;\n        result = input2 & 0x80000000;\n        while( true ) {\n          if (condition1) {\n            input2 = input2 << 1;\n            condition1 = (input2 & 0x800000) == 0;\n          }\n          if (!condition1) break;\n          param4 = param4 - 1;\n        }\n        input2 = input2 | result;\n        goto LAB_08000e6c;\n      }\n      if ((input1 & 0x7fffffff) == 0) {\n        if ((input2 & 0x7fffffff) != 0) goto LAB_08000e00;\n        goto LAB_08000e4a;\n      }\n    }\n    input1 = input1 ^ input2;\n  }\n  else {\nLAB_08000e6c:\n    difference = temp2 - param4;\n    if (input2 << 9 == 0) {\n      input1 = (input1 ^ input2) & 0x80000000 | input1 & 0x7fffff;\n      condition3 = SCARRY4(difference,0x7f);\n      sum = difference + 0x7f;\n      condition1 = sum < 0;\n      condition2 = sum == 0;\n      if (!condition2 && condition1 == condition3) {\n        condition3 = SBORROW4(0xff,sum);\n        condition1 = 0xff - sum < 0;\n        condition2 = sum == 0xff;\n      }\n      if (!condition2 && condition1 == condition3) {\n        input1 = input1 | sum * 0x800000;\n      }\n      if (!condition2 && condition1 == condition3) {\n        return input1;\n      }\n      input1 = input1 | 0x800000;\n      temp2 = 0;\n      condition2 = SBORROW4(sum,1);\n      temp4 = difference + 0x7e;\n      condition1 = temp4 == 0;\n      result = temp4;\n    }\n    else {\n      temp1 = (input2 << 9) >> 4 | 0x10000000;\n      temp2 = (input1 << 9) >> 4 | 0x10000000;\n      input1 = (input1 ^ input2) & 0x80000000;\n      condition1 = temp1 <= temp2;\n      if (!condition1) {\n        temp2 = temp2 << 1;\n      }\n      temp4 = difference + 0x7d + (uint)condition1;\n      result = 0x800000;\n      do {\n        if (temp1 <= temp2) {\n          temp2 = temp2 - temp1;\n          input1 = input1 | result;\n        }\n        condition1 = temp1 >> 1 <= temp2;\n        if (condition1) {\n          temp2 = temp2 - (temp1 >> 1);\n        }\n        if (condition1) {\n          input1 = input1 | result >> 1;\n        }\n        condition1 = temp1 >> 2 <= temp2;\n        if (condition1) {\n          temp2 = temp2 - (temp1 >> 2);\n        }\n        if (condition1) {\n          input1 = input1 | result >> 2;\n        }\n        condition1 = temp1 >> 3 <= temp2;\n        if (condition1) {\n          temp2 = temp2 - (temp1 >> 3);\n        }\n        if (condition1) {\n          input1 = input1 | result >> 3;\n        }\n        temp2 = temp2 * 0x10;\n        condition1 = temp2 == 0;\n        if (!condition1) {\n          result = result >> 4;\n          condition1 = result == 0;\n        }\n      } while (!condition1);\n      condition2 = SBORROW4(temp4,0xfd);\n      condition1 = temp4 == 0xfd;\n      result = temp4 - 0xfd;\n      if (temp4 < 0xfe) {\n        input1 = input1 + temp4 * 0x800000 + (uint)(temp1 <= temp2);\n        if (temp2 - temp1 == 0) {\n          input1 = input1 & 0xfffffffe;\n        }\n        return input1;\n      }\n    }\n    if (condition1 || (int)result < 0 != condition2) {\n      condition1 = (int)(temp4 + 0x19) < 0;\n      if (temp4 == 0xffffffe7 || condition1 != SCARRY4(temp4,0x19)) {\n        input1 = input1 & 0x80000000;\n      }\n      if (temp4 == 0xffffffe7 || condition1 != SCARRY4(temp4,0x19)) {\n        return input1;\n      }\n      result = (input1 << 1) >> (-temp4 & 0xff);\n      temp4 = input1 << (temp4 + 0x20 & 0xff);\n      result = ((uint)((input1 & 0x80000000) != 0) << 0x1f | result >> 1) + (uint)((byte)result & 1);\n      if ((temp2 | temp4 << 1) == 0) {\n        result = result & ~(temp4 >> 0x1f);\n      }\n      return result;\n    }\n  }\n  return input1 & 0x80000000 | 0x7f800000;\n}\n\n",
            "renaming": {
                "FUN_08000e54": "calculate_float_08000e54",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "temp1",
                "uVar2": "temp2",
                "iVar3": "difference",
                "uVar4": "temp4",
                "iVar5": "sum",
                "uVar6": "result",
                "bVar7": "condition1",
                "bVar8": "condition2",
                "bVar9": "condition3"
            },
            "calling": [
                "FUN_08003330",
                "FUN_0800411c",
                "FUN_0800483c",
                "FUN_08002f28"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08000e54": {
                    "1": "calculate_floating_point_value",
                    "2": "reverse_float_bits",
                    "15": "calculate_float",
                    "4": "calculate_floating_point"
                },
                "param_1": {
                    "1": "input_a",
                    "5": "float1",
                    "2": "input_float1",
                    "9": "input1"
                },
                "param_2": {
                    "1": "value2",
                    "9": "input2",
                    "5": "float2",
                    "2": "input_float2"
                },
                "param_3": {
                    "1": "ignored_param",
                    "11": "param3",
                    "2": "undefined",
                    "3": "input3"
                },
                "param_4": {
                    "1": "float_value3",
                    "9": "param4",
                    "2": "float3"
                },
                "uVar1": {
                    "1": "dividend_shifted",
                    "2": "u_var1",
                    "7": "temp1"
                },
                "uVar2": {
                    "1": "shift_amount",
                    "7": "temp2",
                    "3": "exponent1"
                },
                "iVar3": {
                    "2": "exponent_difference",
                    "1": "diff_exponent",
                    "4": "temp3",
                    "9": "difference"
                },
                "uVar4": {
                    "1": "bit31",
                    "2": "temp",
                    "3": "temp3",
                    "4": "temp4"
                },
                "iVar5": {
                    "4": "temp5",
                    "1": "adjusted_exponent",
                    "2": "temp4",
                    "8": "sum"
                },
                "uVar6": {
                    "1": "return_value",
                    "4": "temp6",
                    "3": "result_bits",
                    "22": "result"
                },
                "bVar7": {
                    "1": "is_zero_exponent",
                    "10": "condition1",
                    "2": "condition_1",
                    "9": "is_zero"
                },
                "bVar8": {
                    "1": "idk3",
                    "2": "is_negative",
                    "9": "condition2"
                },
                "bVar9": {
                    "3": "carry_flag",
                    "1": "is_borrow",
                    "9": "condition3",
                    "2": "overflow2"
                }
            }
        },
        "FUN_08000f9c": {
            "entrypoint": "0x08000f9c",
            "current_name": "calculate_result_08000f9c",
            "code": "\nuint calculate_result_08000f9c(uint input_1,uint input_2)\n\n{\n  bool is_negative;\n  uint double_input_1;\n  uint double_input_2;\n  uint combined_inputs;\n  bool is_zero;\n  \n  double_input_1 = input_1 * 2;\n  double_input_2 = input_2 * 2;\n  if (((int)double_input_1 >> 0x18 == -1 || (int)double_input_2 >> 0x18 == -1) &&\n     ((((int)double_input_1 >> 0x18 == -1 && ((input_1 & 0x7fffff) != 0)) ||\n      (((int)double_input_2 >> 0x18 == -1 && ((input_2 & 0x7fffff) != 0)))))) {\n    result 1;\n  }\n  combined_inputs = double_input_1 | input_2 & 0x7fffffff;\n  is_zero = combined_inputs == 0;\n  if (!is_zero) {\n    combined_inputs = input_1 ^ input_2;\n    is_zero = combined_inputs == 0;\n  }\n  is_negative = -1 < (int)combined_inputs;\n  if (is_negative) {\n    input_1 = double_input_1 + input_2 * -2;\n    is_zero = input_1 == 0;\n  }\n  if ((is_negative && double_input_2 <= double_input_1) && !is_zero) {\n    input_1 = (int)input_2 >> 0x1f;\n  }\n  if (!is_negative || double_input_2 > double_input_1) {\n    input_1 = ~((int)input_2 >> 0x1f);\n  }\n  if (!is_zero) {\n    input_1 = input_1 | 1;\n  }\n  result input_1;\n}\n\n",
            "renaming": {
                "FUN_08000f9c": "calculate_result_08000f9c",
                "param_1": "input_1",
                "param_2": "input_2",
                "uVar2": "double_input_1",
                "uVar3": "double_input_2",
                "uVar4": "combined_inputs",
                "bVar1": "is_negative",
                "bVar5": "is_zero",
                "return": "result"
            },
            "calling": [
                "FUN_08001004"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08000f9c": {
                    "1": "calculate_bitwise_result",
                    "2": "multiply_and_compare",
                    "13": "calculate_result",
                    "4": "check_overflow_and_sign"
                },
                "param_1": {
                    "14": "input_1",
                    "1": "first_param",
                    "4": "num1",
                    "7": "input1"
                },
                "param_2": {
                    "1": "output_sign",
                    "7": "input2",
                    "4": "num2",
                    "14": "input_2"
                },
                "uVar2": {
                    "1": "input_1_multiplied",
                    "2": "input_1_times_2",
                    "3": "double_input_1"
                },
                "uVar3": {
                    "1": "result_2",
                    "3": "double_input_2",
                    "2": "input2_doubled"
                },
                "uVar4": {
                    "1": "modified_input",
                    "3": "combined_result",
                    "4": "combined_input",
                    "8": "combined_inputs",
                    "2": "combined"
                },
                "bVar1": {
                    "1": "is_overflow",
                    "20": "is_negative",
                    "4": "is_negative_result",
                    "2": "is_positive"
                },
                "bVar5": {
                    "3": "is_zero_result",
                    "22": "is_zero",
                    "1": "is_combined_vars_zero",
                    "2": "is_combined_zero"
                },
                "return": {
                    "4": "result"
                },
                "param_1_doubled": {
                    "1": "input_1_doubled"
                },
                "param_1_negative_double": {
                    "1": "input_1_negative_double"
                },
                "calculate_result": {
                    "1": "calculate_output"
                },
                "combined_inputs": {
                    "1": "combined_inputs"
                },
                "input_2_is_negative": {
                    "1": "input_2_is_negative"
                },
                "is_negative": {
                    "1": "is_negative"
                },
                "input_2_greater_than_input_1": {
                    "1": "input_2_greater_than_input_1"
                },
                "param_1_or_1": {
                    "1": "output"
                },
                "param_1_or": {
                    "1": "result"
                },
                "param_1 & 0x7fffff": {
                    "1": "first_number_masked"
                },
                "param_2 & 0x7fffff": {
                    "1": "second_number_masked"
                }
            }
        },
        "FUN_08000ffc": {
            "entrypoint": "0x08000ffc",
            "current_name": "concatenate_parameters_08000ffc",
            "code": "\nvoid concatenate_parameters_08000ffc(undefined4 destination,undefined4 source)\n\n{\n  concatenate_parameters_08000ffc_08001004(source,destination);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000ffc": "concatenate_parameters_08000ffc",
                "param_1": "destination",
                "param_2": "source"
            },
            "calling": [
                "FUN_08001050",
                "FUN_08001064"
            ],
            "called": [
                "FUN_08001004"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08000ffc": {
                    "28": "concatenate_parameters",
                    "1": "concatenate_params",
                    "2": "concatenate_and_return"
                },
                "param_1": {
                    "10": "destination",
                    "1": "src_param",
                    "4": "dest",
                    "2": "source_param",
                    "3": "first_parameter"
                },
                "param_2": {
                    "1": "arg2",
                    "2": "destination_parameter",
                    "10": "source",
                    "3": "second_parameter",
                    "5": "src"
                }
            }
        },
        "FUN_08001004": {
            "entrypoint": "0x08001004",
            "current_name": "concatenate_parameters_08001004",
            "code": "\nundefined8 concatenate_parameters_08001004(undefined4 first_parameter,undefined4 second_parameter)\n\n{\n  calculate_result();\n  return CONCAT44(second_parameter,first_parameter);\n}\n\n",
            "renaming": {
                "FUN_08001004": "concatenate_parameters_08001004",
                "param_1": "first_parameter",
                "param_2": "second_parameter",
                "calculate_result_08000f9c": "calculate_result"
            },
            "calling": [
                "FUN_08000ffc",
                "FUN_08001014",
                "FUN_08001028"
            ],
            "called": [
                "FUN_08000f9c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08001004": {
                    "1": "combine_params_and_result",
                    "8": "concatenate_params",
                    "14": "concatenate_parameters",
                    "2": "concatenate_integers"
                },
                "param_1": {
                    "2": "first_integer",
                    "3": "param1",
                    "1": "input1",
                    "13": "first_parameter",
                    "7": "first_param"
                },
                "param_2": {
                    "3": "param2",
                    "1": "input_param_2",
                    "2": "second_integer",
                    "7": "second_param",
                    "13": "second_parameter"
                },
                "calculate_result_08000f9c": {
                    "1": "calculate_result"
                }
            }
        },
        "FUN_08001014": {
            "entrypoint": "0x08001014",
            "current_name": "check_concatenated_parameters_08001014",
            "code": "\nbool check_concatenated_parameters_08001014(void)\n\n{\n  char result;\n  \n  concatenate_parameters();\n  return result != '\\0';\n}\n\n",
            "renaming": {
                "FUN_08001014": "check_concatenated_parameters_08001014",
                "in_ZR": "result",
                "concatenate_parameters_08001004": "concatenate_parameters"
            },
            "calling": [
                "FUN_08003330"
            ],
            "called": [
                "FUN_08001004"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08001014": {
                    "2": "check_if_parameters_concatenated",
                    "4": "check_if_concatenation_successful",
                    "1": "check_if_parameters_are_not_empty",
                    "3": "check_concatenation_result",
                    "6": "check_concatenated_parameters"
                },
                "in_ZR": {
                    "1": "is_concatenated",
                    "2": "is_not_null",
                    "3": "is_not_zero",
                    "9": "result"
                },
                "concatenate_parameters_08001004": {
                    "1": "perform_parameter_concatenation",
                    "3": "concatenate_parameters"
                }
            }
        },
        "FUN_08001028": {
            "entrypoint": "0x08001028",
            "current_name": "check_if_concatenated_parameters_are_empty_08001028",
            "code": "\nbool check_if_concatenated_parameters_are_empty_08001028(void)\n\n{\n  char input_character;\n  \n  concatenate_parameters();\n  return input_character == '\\0';\n}\n\n",
            "renaming": {
                "FUN_08001028": "check_if_concatenated_parameters_are_empty_08001028",
                "in_CY": "input_character",
                "concatenate_parameters_08001004": "concatenate_parameters"
            },
            "calling": [
                "FUN_08004a84",
                "FUN_08002ee8",
                "FUN_0800483c"
            ],
            "called": [
                "FUN_08001004"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08001028": {
                    "1": "is_concatenation_completed",
                    "2": "is_null_terminated",
                    "3": "check_if_concatenated_parameters_are_empty"
                },
                "in_CY": {
                    "1": "result",
                    "2": "current_char",
                    "7": "input_char",
                    "13": "input_character"
                },
                "concatenate_parameters_08001004": {
                    "1": "concatenate_parameters"
                }
            }
        },
        "FUN_08001050": {
            "entrypoint": "0x08001050",
            "current_name": "check_concatenation_result_08001050",
            "code": "\nbool check_concatenation_result_08001050(void)\n\n{\n  undefined is_zero_result;\n  undefined carry_flag;\n  \n  concatenate_parameters();\n  return !(bool)carry_flag || (bool)is_zero_result;\n}\n\n",
            "renaming": {
                "FUN_08001050": "check_concatenation_result_08001050",
                "in_ZR": "is_zero_result",
                "in_CY": "carry_flag",
                "concatenate_parameters_08000ffc": "concatenate_parameters"
            },
            "calling": [
                "FUN_08002ee8"
            ],
            "called": [
                "FUN_08000ffc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08001050": {
                    "4": "concatenate_parameters",
                    "1": "check_for_zero_values",
                    "14": "check_concatenation_result",
                    "3": "check_concatenated_parameters"
                },
                "in_ZR": {
                    "1": "is_zero_flag",
                    "14": "is_zero_result",
                    "4": "is_zero",
                    "7": "zero_flag"
                },
                "in_CY": {
                    "3": "is_carry_flag",
                    "1": "has_carry",
                    "5": "is_carry_result",
                    "8": "carry_flag",
                    "6": "is_carry_set"
                },
                "concatenate_parameters_08000ffc": {
                    "2": "concatenate_parameters"
                }
            }
        },
        "FUN_08001064": {
            "entrypoint": "0x08001064",
            "current_name": "check_if_concatenated_parameters_are_empty_08001064",
            "code": "\nbool check_if_concatenated_parameters_are_empty_08001064(void)\n\n{\n  char input_character;\n  \n  concatenate_parameters();\n  return input_character == '\\0';\n}\n\n",
            "renaming": {
                "FUN_08001064": "check_if_concatenated_parameters_are_empty_08001064",
                "in_CY": "input_character",
                "concatenate_parameters_08000ffc": "concatenate_parameters"
            },
            "calling": [
                "FUN_08004a84",
                "FUN_0800483c"
            ],
            "called": [
                "FUN_08000ffc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08001064": {
                    "3": "is_null_terminated",
                    "1": "check_if_empty",
                    "2": "is_concatenation_empty"
                },
                "in_CY": {
                    "1": "is_concatenation_complete",
                    "3": "input_char",
                    "21": "input_character"
                },
                "in_CY == '\\0'": {
                    "1": "is_concatenation_empty"
                },
                "concatenate_parameters_08000ffc": {
                    "1": "concatenate_parameters"
                }
            }
        },
        "FUN_08001078": {
            "entrypoint": "0x08001078",
            "current_name": "extract_significant_bits_08001078",
            "code": "\nuint extract_significant_bits_08001078(uint input_value)\n\n{\n  uint shifted_value;\n  uint difference;\n  \n  if (input_value << 1 < 0x7f000000) {\n    return 0;\n  }\n  shifted_value = (input_value << 1) >> 0x18;\n  difference = 0x9e - shifted_value;\n  if (shifted_value < 0x9f && difference != 0) {\n    shifted_value = (input_value << 8 | 0x80000000) >> (difference & 0xff);\n    if ((input_value & 0x80000000) != 0) {\n      shifted_value = -shifted_value;\n    }\n    return shifted_value;\n  }\n  if ((difference == 0xffffff9f) && ((input_value & 0x7fffff) != 0)) {\n    return 0;\n  }\n  input_value = input_value & 0x80000000;\n  if (input_value == 0) {\n    input_value = 0x7fffffff;\n  }\n  return input_value;\n}\n\n",
            "renaming": {
                "FUN_08001078": "extract_significant_bits_08001078",
                "param_1": "input_value",
                "uVar1": "shifted_value",
                "uVar2": "difference"
            },
            "calling": [
                "FUN_0800426c",
                "FUN_0800411c",
                "FUN_08002f28"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08001078": {
                    "1": "convert_param_to_integer",
                    "2": "convert_and_shift"
                },
                "param_1": {
                    "10": "input",
                    "11": "input_value",
                    "1": "output_number",
                    "2": "value",
                    "4": "input_number"
                },
                "uVar1": {
                    "1": "result",
                    "12": "shifted_value",
                    "4": "shifted_input"
                },
                "uVar2": {
                    "1": "shifted_negative_result",
                    "2": "shift_difference",
                    "3": "shift_amount",
                    "15": "difference"
                },
                "uVar3": {
                    "1": "shifted_input",
                    "2": "shifted_value2"
                },
                "uVar4": {
                    "2": "result"
                },
                "uVar5": {
                    "1": "non_negative_result"
                },
                "param_2": {
                    "1": "mask"
                },
                "param_3": {
                    "1": "default_value"
                },
                "uVar1_new": {
                    "1": "shifted_value_new"
                },
                "uVar2_new": {
                    "1": "shift_difference_new"
                },
                "uVar1_temp": {
                    "1": "shifted_temp"
                },
                "uVar1_shifted": {
                    "1": "shifted_integer"
                },
                "uVar1_neg": {
                    "1": "neg_shifted_integer"
                },
                "uVar1_2": {
                    "1": "shifted_input"
                },
                "param_1_2": {
                    "1": "signed_input"
                },
                "uVar2 != 0": {
                    "1": "is_difference_non_zero"
                },
                "uVar1 < 0x9f && uVar2 != 0": {
                    "1": "is_in_range"
                },
                "(param_1 << 8 | 0x80000000) >> (uVar2 & 0xff)": {
                    "1": "converted_input"
                },
                "(param_1 & 0x80000000) != 0": {
                    "1": "is_negative"
                },
                "(param_1 & 0x7fffff) != 0": {
                    "1": "is_bit_not_set"
                },
                "param_1 & 0x80000000": {
                    "1": "bit_sign"
                },
                "0x7fffffff": {
                    "1": "positive_max_value"
                }
            }
        },
        "FUN_080010c4": {
            "entrypoint": "0x080010c4",
            "current_name": "reverse_bits_080010c4",
            "code": "\nuint reverse_bits_080010c4(uint input_value)\n\n{\n  uint shift_amount;\n  \n  if (((input_value & 0x80000000) != 0) || (input_value << 1 < 0x7f000000)) {\n    return 0;\n  }\n  shift_amount = 0x9e - ((input_value << 1) >> 0x18);\n  if (-1 < (int)shift_amount) {\n    return (input_value << 8 | 0x80000000) >> (shift_amount & 0xff);\n  }\n  if ((shift_amount == 0xffffff9f) && ((input_value & 0x7fffff) != 0)) {\n    return 0;\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_080010c4": "reverse_bits_080010c4",
                "param_1": "input_value",
                "uVar1": "shift_amount"
            },
            "calling": [
                "FUN_08004a84"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080010c4": {
                    "2": "decode_param",
                    "1": "extract_bits",
                    "3": "calculate_shifted_value",
                    "8": "reverse_bits"
                },
                "param_1": {
                    "12": "input",
                    "13": "input_value",
                    "2": "value",
                    "3": "number",
                    "1": "parameter"
                },
                "uVar1": {
                    "7": "shifted_value",
                    "1": "shift",
                    "17": "shift_amount",
                    "2": "result"
                }
            }
        },
        "FUN_08001104": {
            "entrypoint": "0x08001104",
            "current_name": "initialize_and_update_memory_08001104",
            "code": "\nundefined4 initialize_and_update_memory_08001104(undefined4 input_value)\n\n{\n  uint data_value;\n  \n  data_value = get_data_value();\n  initialize_memory(data_value / 1000);\n  update_memory(0xffffffff,input_value,0);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001104": "initialize_and_update_memory_08001104",
                "param_1": "input_value",
                "uVar1": "data_value",
                "get_data_value_08002214": "get_data_value",
                "initialize_memory_08001214": "initialize_memory",
                "update_memory_08001194": "update_memory"
            },
            "calling": [
                "FUN_08001128",
                "FUN_0800209c"
            ],
            "called": [
                "FUN_08001194",
                "FUN_08002214",
                "FUN_08001214"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08001104": {
                    "1": "initialize_memory",
                    "26": "initialize_and_update_memory"
                },
                "param_1": {
                    "16": "input_value",
                    "1": "input_param",
                    "2": "value",
                    "5": "data_value",
                    "3": "input_data"
                },
                "uVar1": {
                    "1": "divided_value_by_1000",
                    "26": "data_value"
                },
                "get_data_value_08002214": {
                    "1": "get_scaled_data_value",
                    "5": "get_data_value"
                },
                "initialize_memory_08001214": {
                    "6": "initialize_memory"
                },
                "update_memory_08001194": {
                    "6": "update_memory"
                }
            }
        },
        "FUN_08001128": {
            "entrypoint": "0x08001128",
            "current_name": "initialize_memory_08001128",
            "code": "\n\n\nundefined4 initialize_memory_08001128(void)\n\n{\n  _DAT_40022000 = _DAT_40022000 | 0x10;\n  configure_memory_protection(3);\n  initialize_and_update_memory(0);\n  configure_and_update_memory();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001128": "initialize_memory_08001128",
                "configure_memory_protection_08001170": "configure_memory_protection",
                "initialize_and_update_memory_08001104": "initialize_and_update_memory",
                "configure_and_update_memory_08004ccc": "configure_and_update_memory"
            },
            "calling": [
                "FUN_0800458c"
            ],
            "called": [
                "FUN_08001104",
                "FUN_08001170",
                "FUN_08004ccc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08001128": {
                    "1": "initialize_memory_and_configurations",
                    "2": "initialize_and_configure_memory",
                    "3": "initialize_memory_configuration",
                    "17": "initialize_memory"
                },
                "configure_memory_protection_08001170": {
                    "2": "set_memory_protection",
                    "5": "configure_protection",
                    "21": "configure_memory_protection",
                    "1": "configure_protection_level"
                },
                "initialize_and_update_memory_08001104": {
                    "2": "initialize_memory_update",
                    "1": "init_and_update_memory",
                    "24": "initialize_and_update_memory"
                },
                "configure_and_update_memory_08004ccc": {
                    "26": "configure_and_update_memory",
                    "1": "configure_and_update"
                },
                "_DAT_40022000": {
                    "4": "memory_configuration_flags",
                    "1": "system_flags",
                    "2": "memory_configuration_flag",
                    "3": "memory_configuration",
                    "8": "memory_flags"
                }
            }
        },
        "FUN_0800114c": {
            "entrypoint": "0x0800114c",
            "current_name": "increment_counter_0800114c",
            "code": "\nvoid increment_counter_0800114c(void)\n\n{\n  DAT_20000244 = DAT_20000244 + 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800114c": "increment_counter_0800114c"
            },
            "calling": [
                "FUN_080041ae"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800114c": {
                    "2": "increment_data_value",
                    "1": "increment_data_count",
                    "26": "increment_counter"
                },
                "DAT_20000244": {
                    "2": "data_counter",
                    "18": "counter",
                    "1": "data_count"
                },
                "counter": {
                    "1": "counter"
                },
                "": {
                    "1": "counter"
                },
                "X": {
                    "1": "counter"
                },
                "PTR_PARAM_1": {
                    "1": "param1"
                },
                "PTR_PARAM_2": {
                    "1": "param2"
                },
                "PTR_PARAM_n": {
                    "1": "param_n"
                }
            }
        },
        "FUN_0800115c": {
            "entrypoint": "0x0800115c",
            "current_name": "get_data_value_0800115c",
            "code": "\nundefined4 get_data_value_0800115c(void)\n\n{\n  return DAT_20000244;\n}\n\n",
            "renaming": {
                "FUN_0800115c": "get_data_value_0800115c"
            },
            "calling": [
                "FUN_080016f4",
                "thunk_FUN_0800115c",
                "FUN_08001b58",
                "FUN_08001938",
                "FUN_0800209c",
                "FUN_08001460",
                "FUN_080015e8",
                "FUN_08001530",
                "thunk_FUN_0800115c",
                "FUN_08001828",
                "FUN_080014e2",
                "FUN_08004c18"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800115c": {
                    "1": "get_dat_value",
                    "13": "get_data"
                },
                "DAT_20000244": {
                    "11": "data",
                    "1": "memory_value",
                    "7": "data_value"
                }
            }
        },
        "FUN_08001168": {
            "entrypoint": "0x08001168",
            "current_name": "FUNC_08001168",
            "code": "\nvoid FUNC_08001168(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001168": "FUNC_08001168"
            },
            "calling": [
                "FUN_08001b58",
                "thunk_FUN_08001168"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08001170": {
            "entrypoint": "0x08001170",
            "current_name": "configure_memory_protection_08001170",
            "code": "\n\n\nvoid configure_memory_protection_08001170(uint input_value)\n\n{\n  _DAT_e000ed0c = _DAT_e000ed0c & 0xf8ff | 0x5fa0000 | (input_value & 7) << 8;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001170": "configure_memory_protection_08001170",
                "param_1": "input_value"
            },
            "calling": [
                "FUN_08001128",
                "FUN_08004ccc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08001170": {
                    "1": "set_output_data",
                    "2": "configure_hardware",
                    "4": "configure_memory_protection",
                    "3": "set_register_value"
                },
                "param_1": {
                    "1": "bit_mask",
                    "10": "input_value",
                    "2": "permission",
                    "3": "configuration"
                },
                "_DAT_e000ed0c": {
                    "1": "current_config",
                    "3": "memory_config",
                    "6": "register_value",
                    "2": "memory_register"
                },
                "0xf8ff": {
                    "2": "mask1"
                },
                "0x5fa0000": {
                    "2": "mask2"
                },
                "0x7": {
                    "1": "bitmask"
                },
                "8": {
                    "1": "option_shift"
                },
                "param_1 & 7": {
                    "1": "selected_option"
                }
            }
        },
        "FUN_08001194": {
            "entrypoint": "0x08001194",
            "current_name": "update_memory_08001194",
            "code": "\n\n\nvoid update_memory_08001194(uint address,uint data,uint mask)\n\n{\n  undefined result;\n  uint shift_amount;\n  uint shift_amount;\n  uint bit_offset;\n  \n  shift_amount = (uint)(_DAT_e000ed0c << 0x15) >> 0x1d;\n  shift_amount = 7 - shift_amount;\n  bit_offset = shift_amount + 4;\n  if (3 < shift_amount) {\n    shift_amount = 4;\n  }\n  if (bit_offset < 7) {\n    shift_amount = 0;\n  }\n  shift_amount = (1 << (shift_amount & 0xff)) - 1;\n  if (6 < bit_offset) {\n    shift_amount = shift_amount - 3;\n  }\n  result = (undefined)\n          ((mask & (1 << (shift_amount & 0xff)) - 1U | (data & shift_amount) << (shift_amount & 0xff)) << 4);\n  if (-1 < (int)address) {\n    shift_amount = address + 0xe000e100;\n  }\n  else {\n    shift_amount = 0xe000ed14;\n    shift_amount = address & 0xf;\n  }\n  if (-1 < (int)address) {\n    *(undefined *)(shift_amount + 0x300) = result;\n  }\n  else {\n    *(undefined *)(shift_amount + shift_amount) = result;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001194": "update_memory_08001194",
                "param_1": "address",
                "param_2": "data",
                "param_3": "mask",
                "uVar1": "result",
                "uVar2": "shift_amount",
                "uVar3": "shift_amount",
                "uVar4": "bit_offset"
            },
            "calling": [
                "FUN_08001104",
                "FUN_08004e7c",
                "FUN_08004ccc",
                "FUN_08004514"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08001194": {
                    "3": "update_memory_location",
                    "9": "update_memory",
                    "1": "update_register_value",
                    "2": "write_data_to_memory",
                    "5": "update_memory_value"
                },
                "param_1": {
                    "17": "address",
                    "1": "input_value1",
                    "3": "input_value",
                    "2": "input1"
                },
                "param_2": {
                    "3": "mask_value",
                    "11": "data",
                    "2": "data_1",
                    "1": "data_high"
                },
                "param_3": {
                    "11": "mask",
                    "1": "value2",
                    "3": "data2",
                    "2": "input3"
                },
                "uVar1": {
                    "3": "new_value",
                    "1": "new_byte",
                    "2": "masked_value",
                    "6": "updated_value",
                    "5": "shifted_data",
                    "7": "result"
                },
                "uVar2": {
                    "1": "masked_bits",
                    "15": "shift_amount",
                    "5": "shift_count",
                    "2": "num_bits"
                },
                "uVar3": {
                    "1": "shift_mask",
                    "2": "offset",
                    "3": "bit_position",
                    "5": "shift_amount"
                },
                "uVar4": {
                    "1": "new_index",
                    "2": "bit_offset"
                },
                "uVar5": {
                    "1": "shift_limit"
                },
                "_DAT_e000ed0c": {
                    "1": "global_var"
                }
            }
        },
        "FUN_080011fc": {
            "entrypoint": "0x080011fc",
            "current_name": "set_bit_in_array_080011fc",
            "code": "\nvoid set_bit_in_array_080011fc(uint bit_position)\n\n{\n  *(int *)((bit_position >> 5) * 4 + -0x1fff1f00) = 1 << (bit_position & 0x1f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080011fc": "set_bit_in_array_080011fc",
                "param_1": "bit_position"
            },
            "calling": [
                "FUN_08004e7c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080011fc": {
                    "8": "set_bit",
                    "4": "set_bit_value",
                    "5": "set_bit_in_memory",
                    "1": "set_bit_at_offset",
                    "9": "set_bit_in_array"
                },
                "param_1": {
                    "3": "input",
                    "1": "input_value",
                    "8": "bit_position",
                    "4": "bit_index",
                    "5": "position",
                    "2": "num",
                    "6": "index"
                },
                "1 << (index & 0x1f)": {
                    "1": "bit_to_set"
                },
                "*(int *)((position >> 5) * 4 + -0x1fff1f00)": {
                    "1": "bit_array"
                },
                "1 << (position & 0x1f)": {
                    "1": "bit_value"
                },
                "param_2": {
                    "1": "bit"
                },
                "<original_variable_name_1>": {
                    "1": "<new_variable_name_1>"
                },
                "<original_variable_name_2>": {
                    "1": "<new_variable_name_2>"
                },
                "<original_variable_name_n>": {
                    "1": "<new_variable_name_n>"
                },
                "*((param_1 >> 5) * 4 + -0x1fff1f00)": {
                    "1": "bit_array"
                },
                "1 << (param_1 & 0x1f)": {
                    "6": "bit_value",
                    "3": "bit_mask"
                },
                "*(int *)((param_1 >> 5) * 4 + -0x1fff1f00)": {
                    "1": "array",
                    "5": "bit_array"
                },
                "param_1 >> 5": {
                    "1": "bit_index"
                },
                "(param_1 & 0x1f)": {
                    "1": "bit_index"
                },
                "param_1 & 0x1f": {
                    "1": "bit_offset"
                },
                "4": {
                    "1": "bits_per_int"
                },
                "-0x1fff1f00": {
                    "1": "array_offset"
                }
            }
        },
        "FUN_08001214": {
            "entrypoint": "0x08001214",
            "current_name": "initialize_memory_08001214",
            "code": "\n\n\nundefined4 initialize_memory_08001214(int value)\n\n{\n  if (value - 1U < 0x1000000) {\n    _DAT_e000e014 = value - 1U;\n    DAT_e000ed23 = 0xf0;\n    _DAT_e000e018 = 0;\n    _DAT_e000e010 = 7;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08001214": "initialize_memory_08001214",
                "param_1": "value"
            },
            "calling": [
                "FUN_08001104",
                "FUN_08004514"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08001214": {
                    "1": "initialize_memory_layout",
                    "3": "set_parameters",
                    "2": "initialize_data",
                    "11": "initialize_memory"
                },
                "param_1": {
                    "3": "address",
                    "2": "data_size",
                    "4": "size",
                    "1": "input_param",
                    "15": "value"
                },
                "_DAT_e000e014": {
                    "1": "first_address",
                    "2": "updated_value",
                    "4": "memory_address"
                },
                "DAT_e000ed23": {
                    "4": "flag",
                    "1": "memory_protection_flags",
                    "2": "memory_value",
                    "3": "status",
                    "5": "constant_value"
                },
                "_DAT_e000e018": {
                    "1": "setting2",
                    "11": "counter",
                    "2": "offset"
                },
                "_DAT_e000e010": {
                    "6": "flag",
                    "2": "flags",
                    "1": "register_4"
                },
                "<unused_variable>": {
                    "1": "unused_variable"
                }
            }
        },
        "FUN_08001240": {
            "entrypoint": "0x08001240",
            "current_name": "update_flag_08001240",
            "code": "\n\n\nvoid update_flag_08001240(int value)\n\n{\n  if (value == 4) {\n    _DAT_e000e010 = _DAT_e000e010 | 4;\n  }\n  else {\n    _DAT_e000e010 = _DAT_e000e010 & 0xfffffffb;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001240": "update_flag_08001240",
                "param_1": "value"
            },
            "calling": [
                "FUN_08004514"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08001240": {
                    "2": "set_flag_based_on_input",
                    "5": "set_flag",
                    "1": "update_e000e010_register_bit",
                    "4": "update_control_register"
                },
                "param_1": {
                    "3": "status",
                    "1": "new_flag_value",
                    "2": "bit_position",
                    "11": "value",
                    "7": "flag_value"
                },
                "_DAT_e000e010": {
                    "5": "flag",
                    "3": "register_value",
                    "1": "status_register",
                    "8": "flag_register"
                },
                "param_2": {
                    "1": "new_flag"
                },
                "4": {
                    "1": "flag_update_value"
                },
                "0xfffffffb": {
                    "1": "flag_clear_bit_mask"
                }
            }
        },
        "FUN_08001258": {
            "entrypoint": "0x08001258",
            "current_name": "FUNC_08001258",
            "code": "\nvoid FUNC_08001258(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001258": "FUNC_08001258"
            },
            "calling": [],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08001264": {
            "entrypoint": "0x08001264",
            "current_name": "update_flags_08001264",
            "code": "\n\n\nvoid update_flags_08001264(uint *flags,uint *input_flags)\n\n{\n  uint updated_value;\n  uint bit_mask;\n  uint value;\n  int index;\n  uint bit_index;\n  uint mask;\n  uint comparison_value;\n  uint *pointer;\n  int shift;\n  \n  updated_value = 0;\n  bit_index = 0;\n  do {\n    mask = 1 << (bit_index & 0xff);\n    bit_mask = mask & *input_flags;\n    if (mask == bit_mask) {\n      value = input_flags[1];\n      if (value == 0x12) {\n        updated_value = input_flags[3] + 0xc;\n      }\n      else if (value < 0x13) {\n        if (value == 2) {\n          updated_value = input_flags[3] + 8;\n        }\n        else if (value < 3) {\n          if (value == 0) goto LAB_080013be;\n          if (value == 1) {\n            updated_value = input_flags[3];\n          }\n        }\n        else if (value == 3) {\n          updated_value = 0;\n        }\n        else if (value == 0x11) {\n          updated_value = input_flags[3] + 4;\n        }\n      }\n      else {\n        if (value != 0x10210000) {\n          if (value < 0x10210001) {\n            if (value != 0x10110000) {\n              comparison_value = 0x10120000;\nLAB_080013b8:\n              if (value != comparison_value) goto LAB_080012a8;\n            }\n          }\n          else if ((value != 0x10310000) && (value != 0x10320000)) {\n            comparison_value = 0x10220000;\n            goto LAB_080013b8;\n          }\n        }\nLAB_080013be:\n        updated_value = input_flags[2];\n        if (updated_value == 0) {\n          updated_value = 4;\n        }\n        else {\n          if (updated_value == 1) {\n            flags[4] = mask;\n          }\n          if (updated_value != 1) {\n            flags[5] = mask;\n          }\n          updated_value = 8;\n        }\n      }\nLAB_080012a8:\n      if (bit_mask < 0x100) {\n        mask = *flags;\n        value = bit_index << 2;\n        pointer = flags;\n      }\n      else {\n        mask = flags[1];\n        value = (bit_index + 0x3ffffff8) * 4;\n      }\n      if (0xff < bit_mask) {\n        pointer = flags + 1;\n      }\n      *pointer = mask & ~(0xf << (value & 0xff)) | updated_value << (value & 0xff);\n      pointer = (uint *)input_flags[1];\n      if (((uint)pointer & 0x10000000) != 0) {\n        _DAT_40021018 = _DAT_40021018 | 1;\n        shift = (bit_index & 3) << 2;\n        if (flags == (uint *)0x40010800) {\n          index = 0;\n        }\n        else if (flags == (uint *)0x40010c00) {\n          index = 1;\n        }\n        else if (flags == (uint *)0x40011000) {\n          index = 2;\n        }\n        else if (flags == (uint *)0x40011400) {\n          index = 3;\n        }\n        else {\n          index = 4;\n        }\n        *(uint *)((bit_index & 0xfffffffc) + 0x40010008) =\n             index << shift | *(uint *)((bit_index & 0xfffffffc) + 0x40010008) & ~(0xf << shift);\n        if (((uint)pointer & 0x10000) == 0) {\n          _DAT_40010400 = _DAT_40010400 & ~bit_mask;\n        }\n        else {\n          _DAT_40010400 = _DAT_40010400 | bit_mask;\n        }\n        if (((uint)pointer & 0x20000) == 0) {\n          _DAT_40010404 = _DAT_40010404 & ~bit_mask;\n        }\n        else {\n          _DAT_40010404 = _DAT_40010404 | bit_mask;\n        }\n        if (((uint)pointer & 0x100000) == 0) {\n          _DAT_40010408 = _DAT_40010408 & ~bit_mask;\n        }\n        else {\n          _DAT_40010408 = _DAT_40010408 | bit_mask;\n        }\n        if (((uint)pointer & 0x200000) == 0) {\n          _DAT_4001040c = _DAT_4001040c & ~bit_mask;\n        }\n        else {\n          _DAT_4001040c = bit_mask | _DAT_4001040c;\n        }\n      }\n    }\n    bit_index = bit_index + 1;\n    if (bit_index == 0x10) {\n      return;\n    }\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08001264": "update_flags_08001264",
                "param_1": "flags",
                "param_2": "input_flags",
                "uVar1": "updated_value",
                "uVar2": "bit_mask",
                "uVar3": "value",
                "iVar4": "index",
                "uVar5": "bit_index",
                "uVar6": "mask",
                "uVar7": "comparison_value",
                "unaff_r10": "pointer",
                "iVar8": "shift"
            },
            "calling": [
                "FUN_08004e7c",
                "FUN_08004d48",
                "FUN_08004e14",
                "FUN_0800458c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08001264": {
                    "1": "update_bitwise_operations",
                    "4": "update_bits",
                    "3": "update_flags_and_registers",
                    "5": "update_flags",
                    "2": "update_configuration"
                },
                "param_1": {
                    "1": "input_flags",
                    "2": "output_array",
                    "4": "flags",
                    "3": "bits_to_update"
                },
                "param_2": {
                    "1": "input_values",
                    "2": "input_registers",
                    "3": "input_flags"
                },
                "uVar1": {
                    "1": "flag_shift",
                    "4": "output_value",
                    "2": "updated_flag",
                    "5": "updated_value"
                },
                "uVar2": {
                    "1": "flag2",
                    "3": "bit_value",
                    "11": "bit_mask"
                },
                "uVar3": {
                    "1": "temp3",
                    "2": "flag_value",
                    "3": "opcode",
                    "4": "value"
                },
                "iVar4": {
                    "2": "register_index",
                    "1": "temp4",
                    "19": "index"
                },
                "uVar5": {
                    "2": "index2",
                    "4": "i",
                    "6": "bit_position",
                    "8": "bit_index",
                    "5": "counter",
                    "3": "loop_index",
                    "1": "value_index"
                },
                "uVar6": {
                    "6": "bit_mask",
                    "3": "shifted_mask",
                    "1": "bit",
                    "2": "bit_flag"
                },
                "uVar7": {
                    "1": "comparator",
                    "3": "special_value"
                },
                "unaff_r10": {
                    "1": "updated_memory",
                    "2": "register_array",
                    "3": "pointer"
                },
                "iVar8": {
                    "1": "condition_index",
                    "2": "shift_offset",
                    "3": "register_index"
                },
                "_DAT_40021018": {
                    "2": "register1",
                    "1": "status_register"
                },
                "_DAT_40010400": {
                    "1": "peripheral_register1",
                    "2": "register2"
                },
                "_DAT_40010404": {
                    "2": "register3",
                    "1": "peripheral_register2"
                },
                "_DAT_40010408": {
                    "1": "peripheral_register3",
                    "2": "register4"
                },
                "_DAT_4001040c": {
                    "1": "hardware_register5",
                    "2": "register5"
                },
                "_DAT_40010008": {
                    "1": "peripheral_register"
                }
            }
        },
        "FUN_08001424": {
            "entrypoint": "0x08001424",
            "current_name": "set_param_value_08001424",
            "code": "\nvoid set_param_value_08001424(int base_address,int value,int is_shifted)\n\n{\n  if (is_shifted == 0) {\n    value = value << 0x10;\n  }\n  *(int *)(base_address + 0x10) = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001424": "set_param_value_08001424",
                "param_1": "base_address",
                "param_2": "value",
                "param_3": "is_shifted"
            },
            "calling": [
                "FUN_08004490",
                "FUN_08003f3c",
                "FUN_0800458c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08001424": {
                    "2": "set_parameter_value",
                    "3": "set_param",
                    "1": "set_value_in_memory",
                    "4": "set_parameter",
                    "14": "set_param_value"
                },
                "param_1": {
                    "1": "param_addr",
                    "7": "object_address",
                    "15": "base_address",
                    "3": "target_address"
                },
                "param_2": {
                    "2": "param_value",
                    "5": "new_value",
                    "3": "shifted_value",
                    "1": "shifted_data",
                    "19": "value"
                },
                "param_3": {
                    "9": "flag",
                    "3": "shift_flag",
                    "1": "is_shift",
                    "2": "condition",
                    "12": "is_shifted"
                },
                "param_1 + 0x10": {
                    "1": "memory_address",
                    "6": "target_address"
                },
                "param_2 << 0x10": {
                    "1": "shifted_param_value",
                    "7": "shifted_value"
                },
                "param_3 == 0": {
                    "1": "should_shift_value"
                },
                "*(int *)(param_1 + 0x10)": {
                    "1": "address_to_modify"
                },
                "0x10": {
                    "1": "offset"
                }
            }
        },
        "FUN_0800142e": {
            "entrypoint": "0x0800142e",
            "current_name": "xor_param_and_store_0800142e",
            "code": "\nvoid xor_param_and_store_0800142e(int base_address,uint value)\n\n{\n  *(uint *)(base_address + 0xc) = value ^ *(uint *)(base_address + 0xc);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800142e": "xor_param_and_store_0800142e",
                "param_1": "base_address",
                "param_2": "value"
            },
            "calling": [
                "FUN_08004490"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800142e": {
                    "1": "apply_xor_to_variable",
                    "2": "xor_and_assign",
                    "3": "xor_param_and_store"
                },
                "param_1": {
                    "1": "input_pointer",
                    "5": "input_address",
                    "3": "target_address",
                    "2": "input_ptr",
                    "4": "memory_address"
                },
                "param_2": {
                    "1": "data_to_xor",
                    "7": "new_value",
                    "2": "xor_value",
                    "6": "value_to_xor",
                    "10": "value"
                },
                "PTR_x": {
                    "1": "result_pointer"
                },
                "0xc": {
                    "1": "value_offset",
                    "4": "offset"
                },
                "param_1 + 0xc": {
                    "1": "memory_address_with_offset"
                },
                "*(uint *)(param_1 + 0xc)": {
                    "1": "value_at_ptr_plus_c",
                    "4": "current_value"
                },
                "*(uint *)(param_1 + 0xc) = param_2 ^ *(uint *)(param_1 + 0xc)": {
                    "1": "updated_value"
                },
                "PTR_": {
                    "1": "ptr_"
                },
                "DAT_": {
                    "1": "unchanged_variable_2"
                },
                "2": {
                    "1": "output_address"
                },
                "param_3": {
                    "2": "result",
                    "1": "xor_value"
                },
                "param_2 ^ *(uint *)(param_1 + 0xc)": {
                    "1": "updated_value"
                },
                "param_4": {
                    "1": "temp"
                },
                "param_5": {
                    "1": "offset"
                },
                "param_6": {
                    "1": "xor_result"
                }
            }
        },
        "FUN_08001436": {
            "entrypoint": "0x08001436",
            "current_name": "check_flag_status_08001436",
            "code": "\nundefined4 check_flag_status_08001436(int *flag_ptr)\n\n{\n  int flag_value;\n  \n  flag_value = *flag_ptr;\n  if ((*(uint *)(flag_value + 0x14) & 0x400) != 0) {\n    *(uint *)(flag_value + 0x14) = *(uint *)(flag_value + 0x14) & 0xfffffbff;\n    error_code = 4;\n    *(undefined *)((int)flag_ptr + 0x35) = 0x20;\n    *(undefined *)(flag_ptr + 0xd) = 0;\n    return 1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001436": "check_flag_status_08001436",
                "param_1": "flag_ptr",
                "iVar1": "flag_value",
                "param_1[0xe]": "error_code"
            },
            "calling": [
                "FUN_080014e2"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08001436": {
                    "3": "check_and_modify_flag",
                    "2": "clear_flag",
                    "1": "disable_feature",
                    "7": "check_flag_status",
                    "6": "clear_flag_if_set"
                },
                "param_1": {
                    "3": "array",
                    "2": "input_array",
                    "1": "input_pointer",
                    "9": "flag_ptr"
                },
                "iVar1": {
                    "1": "feature_value",
                    "12": "value",
                    "13": "flag_value"
                },
                "*(uint *)(iVar1 + 0x14)": {
                    "9": "flag",
                    "2": "flag_value",
                    "3": "flags"
                },
                "param_1[0xe]": {
                    "1": "flag_result",
                    "12": "error_code",
                    "3": "result"
                },
                "*(undefined *)((int)param_1 + 0x35)": {
                    "1": "information",
                    "2": "flag_character",
                    "4": "status"
                },
                "*(undefined *)(param_1 + 0xd)": {
                    "1": "flag_value",
                    "2": "status",
                    "3": "counter"
                },
                "*param_1": {
                    "1": "flag_status"
                },
                "(uint *)(iVar1 + 0x14)": {
                    "1": "flag_pointer"
                },
                "(int)param_1 + 0x35": {
                    "1": "flag_character"
                },
                "param_1 + 0xd": {
                    "1": "status_pointer"
                },
                "1": {
                    "1": "success"
                },
                "0x400": {
                    "2": "flag_mask"
                },
                "0x14": {
                    "1": "offset"
                },
                "*(uint *)(iVar1 + 0x14) & 0x400": {
                    "1": "is_flag_set"
                }
            }
        },
        "FUN_08001460": {
            "entrypoint": "0x08001460",
            "current_name": "check_data_validity_08001460",
            "code": "\nundefined4 check_data_validity_08001460(uint **data_array,uint flag,uint timeout)\n\n{\n  int data_value;\n  int current_value;\n  uint selected_value;\n  uint *current_data;\n  \n  data_value = get_current_data_value();\n  do {\n    current_data = *data_array;\n    if ((flag << 8) >> 0x18 == 1) {\n      selected_value = current_data[5];\n    }\n    else {\n      selected_value = current_data[6];\n    }\n    if ((flag & 0xffff & ~selected_value) == 0) {\n      return 0;\n    }\n    if ((int)(current_data[5] << 0x15) < 0) {\n      *current_data = *current_data | 0x200;\n      current_data[5] = current_data[5] & 0xfffffbff;\n      data_array[0xe] = (uint *)0x4;\n      *(undefined *)((int)data_array + 0x35) = 0x20;\n      *(undefined *)(data_array + 0xd) = 0;\n      return 1;\n    }\n  } while ((timeout == 0xffffffff) ||\n          ((timeout != 0 && (current_value = get_current_data_value(), (uint)(current_value - data_value) <= timeout))));\n  *(undefined *)((int)data_array + 0x35) = 0x20;\n  *(undefined *)(data_array + 0xd) = 0;\n  return 3;\n}\n\n",
            "renaming": {
                "FUN_08001460": "check_data_validity_08001460",
                "param_1": "data_array",
                "param_2": "flag",
                "param_3": "timeout",
                "iVar1": "data_value",
                "iVar2": "current_value",
                "uVar3": "selected_value",
                "puVar4": "current_data",
                "get_data_value_0800115c": "get_current_data_value"
            },
            "calling": [
                "FUN_080015e8",
                "FUN_08001530"
            ],
            "called": [
                "FUN_0800115c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08001460": {
                    "1": "check_param_validity",
                    "2": "check_data_match",
                    "12": "check_data_validity",
                    "3": "check_data"
                },
                "param_1": {
                    "13": "data_array",
                    "6": "data",
                    "1": "input_data",
                    "2": "parameters",
                    "3": "data_pointer"
                },
                "param_2": {
                    "16": "flag",
                    "1": "pattern",
                    "2": "data_value",
                    "4": "flags"
                },
                "param_3": {
                    "1": "value_2",
                    "3": "max_difference",
                    "13": "timeout",
                    "10": "time_limit",
                    "2": "limit"
                },
                "iVar1": {
                    "4": "data_value_1",
                    "1": "current_value",
                    "8": "data_value",
                    "2": "prev_data_value"
                },
                "iVar2": {
                    "2": "data_value2",
                    "1": "comparison_value",
                    "7": "current_data_value",
                    "4": "data_value_2",
                    "8": "current_value",
                    "6": "new_data_value"
                },
                "uVar3": {
                    "1": "compare_value",
                    "7": "selected_value",
                    "3": "selected_data_value",
                    "4": "value",
                    "6": "data_value",
                    "2": "value_to_compare"
                },
                "puVar4": {
                    "3": "data_array",
                    "1": "current_pointer",
                    "2": "ptr_to_data",
                    "5": "data_ptr",
                    "8": "current_data"
                },
                "*(undefined *)((int)param_1 + 0x35)": {
                    "1": "param1_status"
                },
                "*(undefined *)(param_1 + 0xd)": {
                    "1": "flag2"
                },
                "return 0": {
                    "1": "return_success"
                },
                "return 1": {
                    "1": "return_failure"
                },
                "return 3": {
                    "1": "return_timeout"
                },
                "check_data_value_0800115c": {
                    "1": "get_data_value"
                },
                "get_data_value_0800115c": {
                    "1": "get_current_data_value"
                },
                "param_1[5]": {
                    "1": "data_value_1"
                },
                "param_1[6]": {
                    "1": "data_value_2"
                }
            }
        },
        "FUN_080014e2": {
            "entrypoint": "0x080014e2",
            "current_name": "check_data_validity_080014e2",
            "code": "\nundefined4 check_data_validity_080014e2(int *data_array,uint flag_value)\n\n{\n  int initial_data_value;\n  int flag_status;\n  \n  initial_data_value = get_data_value();\n  while( true ) {\n    if (*(int *)(*data_array + 0x14) << 0x18 < 0) {\n      return 0;\n    }\n    flag_status = check_flag_status(data_array);\n    if (flag_status != 0) break;\n    if ((flag_value != 0xffffffff) &&\n       ((flag_value == 0 || (flag_status = get_data_value(), flag_value < (uint)(flag_status - initial_data_value))))) {\n      data_array_element_14 = data_array_element_14 | 0x20;\n      *(undefined *)((int)data_array + 0x35) = 0x20;\n      *(undefined *)(data_array + 0xd) = 0;\n      return 3;\n    }\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_080014e2": "check_data_validity_080014e2",
                "param_1": "data_array",
                "param_2": "flag_value",
                "iVar1": "initial_data_value",
                "iVar2": "flag_status",
                "get_data_value_0800115c": "get_data_value",
                "check_flag_status_08001436": "check_flag_status",
                "param_1[0xe]": "data_array_element_14"
            },
            "calling": [
                "FUN_080015e8",
                "FUN_08001530",
                "FUN_08001828"
            ],
            "called": [
                "FUN_0800115c",
                "FUN_08001436"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080014e2": {
                    "3": "check_and_update_flag",
                    "1": "check_condition",
                    "2": "check_data",
                    "4": "check_data_and_flag_status",
                    "6": "check_data_validity"
                },
                "param_1": {
                    "15": "data_array",
                    "2": "input_array",
                    "5": "data_ptr",
                    "4": "data_pointer",
                    "1": "flag_data"
                },
                "param_2": {
                    "1": "length",
                    "3": "limit",
                    "4": "data_length",
                    "2": "value_to_compare",
                    "8": "flag_value"
                },
                "iVar1": {
                    "8": "initial_data_value",
                    "1": "prev_data_value",
                    "5": "data_value1",
                    "2": "initial_value",
                    "7": "data_value"
                },
                "iVar2": {
                    "31": "flag_status"
                },
                "*param_1": {
                    "1": "data_ptr"
                },
                "get_data_value_0800115c": {
                    "1": "retrieve_data_value",
                    "2": "get_current_data_value",
                    "3": "get_data_value"
                },
                "check_flag_status_08001436": {
                    "7": "check_flag_status"
                },
                "*(int *)(*param_1 + 0x14)": {
                    "1": "data_array_element"
                },
                "param_1[0xe]": {
                    "1": "data_array_element_14"
                },
                "*(undefined *)((int)param_1 + 0x35)": {
                    "1": "data_array_element_35"
                },
                "*(undefined *)(param_1 + 0xd)": {
                    "1": "data_array_element_d"
                }
            }
        },
        "FUN_08001530": {
            "entrypoint": "0x08001530",
            "current_name": "update_data_validity_08001530",
            "code": "\nundefined4 update_data_validity_08001530(uint **data,uint value1,uint value2,int flag,uint param)\n\n{\n  int data_value;\n  int data_value2;\n  uint *current_data;\n  uint **data_ptr_ptr;\n  uint value1_copy;\n  uint value2_copy;\n  \n  **data = **data | 0x100;\n  data_ptr_ptr = data;\n  value1_copy = value1;\n  value2_copy = value2;\n  data_value = get_data_value_0800115c();\n  do {\n    current_data = *data;\n    do {\n      if ((int)(current_data[5] << 0x1f) < 0) {\n        current_data[4] = value1 & 0xfe;\n        data_value = check_data_validity_08001460(data,0x10002,param,current_data,data_ptr_ptr,value1_copy,value2_copy);\n        if (data_value == 0) {\n          data_value = check_data_validity_080014e2(data,param,(*data)[5],(*data)[6]);\n          if (data_value == 0) {\n            current_data = *data;\n            if (flag == 1) {\nLAB_080015ca:\n              current_data[4] = value2 & 0xff;\n              return 0;\n            }\n            current_data[4] = value2 >> 8;\n            data_value = check_data_validity_080014e2(data,param);\n            if (data_value == 0) {\n              current_data = *data;\n              goto LAB_080015ca;\n            }\n          }\n          if (data[0xe] != (uint *)0x4) {\n            return 3;\n          }\n          **data = **data | 0x200;\n        }\n        else if (data[0xe] != (uint *)0x4) {\n          return 3;\n        }\n        return 1;\n      }\n    } while (param == 0xffffffff);\n    if ((param == 0) || (data_value2 = get_data_value_0800115c(), param < (uint)(data_value2 - data_value))) {\n      *(undefined *)((int)data + 0x35) = 0x20;\n      *(undefined *)(data + 0xd) = 0;\n      return 3;\n    }\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08001530": "update_data_validity_08001530",
                "param_1": "data",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "flag",
                "param_5": "param",
                "iVar1": "data_value",
                "iVar2": "data_value2",
                "puVar3": "current_data",
                "ppuVar4": "data_ptr_ptr",
                "uVar5": "value1_copy",
                "uVar6": "value2_copy"
            },
            "calling": [
                "FUN_08001828"
            ],
            "called": [
                "FUN_0800115c",
                "FUN_08001460",
                "FUN_080014e2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08001530": {
                    "2": "update_and_check_data_validity",
                    "1": "update_data_task",
                    "3": "process_data",
                    "9": "update_data_validity",
                    "4": "update_data"
                },
                "param_1": {
                    "1": "data_value",
                    "12": "data",
                    "8": "data_pointer",
                    "10": "data_ptr"
                },
                "param_2": {
                    "1": "bit_field1",
                    "3": "value_1",
                    "5": "flag1",
                    "13": "value1",
                    "2": "input_value1"
                },
                "param_3": {
                    "1": "bit_field2",
                    "2": "input_value2",
                    "3": "value_2",
                    "13": "value2",
                    "5": "flag2"
                },
                "param_4": {
                    "17": "flag",
                    "1": "param_c",
                    "8": "condition"
                },
                "param_5": {
                    "3": "size",
                    "1": "flag2",
                    "5": "value",
                    "8": "param"
                },
                "iVar1": {
                    "1": "data_value_check",
                    "13": "data_value",
                    "4": "start_value",
                    "9": "data_value1"
                },
                "iVar2": {
                    "1": "value_after",
                    "2": "updated_data_value",
                    "4": "data_difference",
                    "15": "data_value2",
                    "5": "end_value"
                },
                "puVar3": {
                    "1": "temp_pointer",
                    "5": "data_ptr",
                    "2": "data_pointer",
                    "10": "current_data",
                    "3": "data_ptr_value",
                    "4": "ptr"
                },
                "ppuVar4": {
                    "2": "data_pointer",
                    "1": "data_double_ptr",
                    "4": "data_pointer_pointer",
                    "3": "current_data_ptr",
                    "13": "data_ptr_ptr"
                },
                "uVar5": {
                    "11": "value1_copy",
                    "1": "bit_field_value1",
                    "2": "flag1_copy",
                    "3": "value1"
                },
                "uVar6": {
                    "1": "flag2",
                    "2": "flag2_copy",
                    "11": "value2_copy",
                    "3": "value2"
                }
            }
        },
        "FUN_080015e8": {
            "entrypoint": "0x080015e8",
            "current_name": "process_data_080015e8",
            "code": "\nundefined4 process_data_080015e8(uint **data,uint value1,uint value2,int flag,uint limit)\n\n{\n  int data_value1;\n  int data_value2;\n  uint *ptr;\n  uint **ptr_ptr_data;\n  uint temp_value1;\n  uint temp_value2;\n  \n  ptr = *data;\n  *ptr = *ptr | 0x400;\n  *ptr = *ptr | 0x100;\n  ptr_ptr_data = data;\n  temp_value1 = value1;\n  temp_value2 = value2;\n  data_value1 = get_current_value();\nLAB_0800160e:\n  ptr = *data;\n  while (-1 < (int)(ptr[5] << 0x1f)) {\n    if (limit != 0xffffffff) goto code_r0x08001658;\n  }\n  ptr[4] = value1 & 0xfe;\n  data_value1 = check_data_validity_1(data,0x10002,limit,ptr,ptr_ptr_data,temp_value1,temp_value2);\n  if (data_value1 != 0) goto LAB_080016ba;\n  data_value1 = check_data_validity_2(data,limit,(*data)[5],(*data)[6]);\n  if (data_value1 == 0) {\n    ptr = *data;\n    if (flag != 1) {\n      ptr[4] = value2 >> 8;\n      data_value1 = check_data_validity_2(data,limit);\n      if (data_value1 != 0) goto LAB_08001642;\n      ptr = *data;\n    }\n    ptr[4] = value2 & 0xff;\n    data_value1 = check_data_validity_2(data,limit);\n    if (data_value1 == 0) {\n      **data = **data | 0x100;\n      data_value1 = get_current_value();\n      do {\n        do {\n          if ((int)((*data)[5] << 0x1f) < 0) {\n            (*data)[4] = value1 & 0xff | 1;\n            data_value1 = check_data_validity_1(data,0x10002,limit);\n            if (data_value1 == 0) {\n              return 0;\n            }\nLAB_080016ba:\n            if (data[0xe] != (uint *)0x4) {\n              return 3;\n            }\n            return 1;\n          }\n        } while (limit == 0xffffffff);\n      } while ((limit != 0) && (data_value2 = get_current_value(), (uint)(data_value2 - data_value1) <= limit));\nLAB_0800165a:\n      *(undefined *)((int)data + 0x35) = 0x20;\n      *(undefined *)(data + 0xd) = 0;\n      return 3;\n    }\n  }\nLAB_08001642:\n  if (data[0xe] == (uint *)0x4) {\n    **data = **data | 0x200;\n    return 1;\n  }\n  return 3;\ncode_r0x08001658:\n  if ((limit == 0) || (data_value2 = get_current_value(), limit < (uint)(data_value2 - data_value1)))\n  goto LAB_0800165a;\n  goto LAB_0800160e;\n}\n\n",
            "renaming": {
                "param_1": "data",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "flag",
                "param_5": "limit",
                "iVar1": "data_value1",
                "iVar2": "data_value2",
                "puVar3": "ptr",
                "ppuVar4": "ptr_ptr_data",
                "uVar5": "temp_value1",
                "uVar6": "temp_value2",
                "FUN_080015e8": "process_data_080015e8",
                "get_data_value_0800115c": "get_current_value",
                "check_data_validity_08001460": "check_data_validity_1",
                "check_data_validity_080014e2": "check_data_validity_2"
            },
            "calling": [
                "FUN_08001938"
            ],
            "called": [
                "FUN_0800115c",
                "FUN_08001460",
                "FUN_080014e2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "param_1": {
                    "14": "data",
                    "1": "input_data",
                    "6": "data_pointer",
                    "2": "flags"
                },
                "param_2": {
                    "1": "param1",
                    "3": "value_1",
                    "23": "value1"
                },
                "param_3": {
                    "1": "flag2",
                    "3": "value_2",
                    "23": "value2"
                },
                "param_4": {
                    "15": "flag",
                    "1": "is_positive",
                    "12": "condition"
                },
                "param_5": {
                    "6": "threshold",
                    "1": "flag2",
                    "2": "max_value",
                    "16": "limit"
                },
                "iVar1": {
                    "1": "data_validity_result",
                    "4": "data_value_1",
                    "3": "result1",
                    "8": "data_value",
                    "12": "data_value1",
                    "2": "result"
                },
                "iVar2": {
                    "1": "new_data_value",
                    "2": "temp",
                    "3": "result2",
                    "14": "data_value2",
                    "4": "data_value_2"
                },
                "puVar3": {
                    "1": "data_pointer1",
                    "5": "ptr_data",
                    "2": "pointer",
                    "3": "ptr1",
                    "7": "ptr"
                },
                "ppuVar4": {
                    "5": "ptr_ptr_data",
                    "1": "ptr_data",
                    "3": "data_pointer_ptr",
                    "4": "data_ptr_ptr"
                },
                "uVar5": {
                    "1": "variable1",
                    "2": "val1",
                    "5": "temp_value1",
                    "3": "temp1"
                },
                "uVar6": {
                    "1": "value2_backup",
                    "3": "temp2",
                    "5": "temp_value2",
                    "2": "val2"
                },
                "FUN_080015e8": {
                    "2": "update_data_values",
                    "1": "update_permissions",
                    "4": "initialize_flags",
                    "5": "process_data",
                    "3": "update_data"
                },
                "get_data_value_0800115c": {
                    "1": "get_data_value"
                },
                "check_data_validity_08001460": {
                    "1": "check_data_validity_1"
                },
                "check_data_validity_080014e2": {
                    "2": "check_data_validity_2"
                }
            }
        },
        "FUN_080016f4": {
            "entrypoint": "0x080016f4",
            "current_name": "check_data_validity_080016f4",
            "code": "\nundefined4 check_data_validity_080016f4(int *data_array,uint data_length)\n\n{\n  int initial_data_value;\n  int current_data_value;\n  \n  initial_data_value = get_current_data_value();\n  while( true ) {\n    current_data_value = *data_array;\n    if ((*(uint *)(current_data_value + 0x14) & 0x40) != 0) {\n      return 0;\n    }\n    if (*(int *)(current_data_value + 0x14) << 0x1b < 0) break;\n    if ((data_length == 0) || (current_data_value = get_current_data_value(), data_length < (uint)(current_data_value - initial_data_value))) {\n      data_array[0xe] = data_array[0xe] | 0x20;\n      *(undefined *)((int)data_array + 0x35) = 0x20;\n      *(undefined *)(data_array + 0xd) = 0;\n      return 3;\n    }\n  }\n  *(uint *)(current_data_value + 0x14) = *(uint *)(current_data_value + 0x14) & 0xffffffef;\n  data_array[0xe] = 0;\n  *(undefined *)(data_array + 0xd) = 0;\n  *(undefined *)((int)data_array + 0x35) = 0x20;\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_080016f4": "check_data_validity_080016f4",
                "param_1": "data_array",
                "param_2": "data_length",
                "iVar1": "initial_data_value",
                "iVar2": "current_data_value",
                "get_data_value_0800115c": "get_current_data_value"
            },
            "calling": [
                "FUN_08001938"
            ],
            "called": [
                "FUN_0800115c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080016f4": {
                    "1": "check_data_compliance",
                    "5": "process_data",
                    "3": "check_data_value",
                    "18": "check_data_validity"
                },
                "param_1": {
                    "19": "data_array",
                    "6": "data",
                    "1": "data_ptr",
                    "4": "data_pointer"
                },
                "param_2": {
                    "2": "length",
                    "9": "data_size",
                    "13": "data_length",
                    "1": "data_value",
                    "3": "size"
                },
                "iVar1": {
                    "21": "initial_data_value",
                    "1": "data_start_value",
                    "7": "initial_value"
                },
                "iVar2": {
                    "24": "current_data_value",
                    "7": "current_value"
                },
                "get_data_value_0800115c": {
                    "1": "get_current_data_value"
                }
            }
        },
        "FUN_08001754": {
            "entrypoint": "0x08001754",
            "current_name": "initialize_data_08001754",
            "code": "\nundefined4 initialize_data_08001754(uint **data)\n\n{\n  uint shifted_value_low;\n  uint shifted_value_high;\n  uint *pointer1;\n  uint *pointer2;\n  uint *pointer3;\n  uint divided_value;\n  undefined8 shifted_value;\n  \n  if (data != (uint **)0x0) {\n    if (*(char *)((int)data + 0x35) == '\\0') {\n      *(undefined *)(data + 0xd) = 0;\n      update_flags;\n    }\n    *(undefined *)((int)data + 0x35) = 0x24;\n    **data = **data & 0xfffffffe;\n    shifted_value = get_shifted_value;\n    shifted_value_high = (uint)((ulonglong)shifted_value >> 0x20);\n    shifted_value_low = (uint)shifted_value;\n    pointer2 = data[1];\n    divided_value = shifted_value_low / 1000000;\n    if ((uint *)0x186a0 < pointer2) {\n      shifted_value_high = 300;\n    }\n    pointer1 = *data;\n    if ((uint *)0x186a0 < pointer2) {\n      shifted_value_high = divided_value * shifted_value_high;\n    }\n    pointer1[1] = divided_value;\n    if ((uint *)0x186a0 < pointer2) {\n      divided_value = shifted_value_high / 1000;\n    }\n    pointer1[8] = divided_value + 1;\n    if (pointer2 < (uint *)0x186a1) {\n      shifted_value_low = shifted_value_low / (uint)((int)pointer2 << 1);\n      if ((shifted_value_low & 0xfff) < 4) {\n        shifted_value_low = 4;\n      }\n    }\n    else {\n      if (data[2] == (uint *)0x0) {\n        shifted_value_low = shifted_value_low / (uint)((int)pointer2 * 3) | 0x8000;\n      }\n      else {\n        shifted_value_low = shifted_value_low / (uint)((int)pointer2 * 0x19) | 0xc000;\n      }\n      if ((shifted_value_low & 0xfff) == 0) {\n        shifted_value_low = 1;\n      }\n    }\n    pointer2 = data[8];\n    pointer3 = data[7];\n    pointer1[7] = shifted_value_low;\n    *pointer1 = (uint)pointer3 | (uint)pointer2;\n    pointer1[2] = (uint)data[4] | (uint)data[3];\n    pointer1[3] = (uint)data[5] | (uint)data[6];\n    *pointer1 = *pointer1 | 1;\n    data[0xe] = (uint *)0x0;\n    *(undefined *)((int)data + 0x35) = 0x20;\n    *(undefined *)((int)data + 0x36) = 0;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08001754": "initialize_data_08001754",
                "param_1": "data",
                "uVar1": "shifted_value_low",
                "uVar2": "shifted_value_high",
                "puVar3": "pointer1",
                "puVar4": "pointer2",
                "puVar5": "pointer3",
                "uVar6": "divided_value",
                "uVar7": "shifted_value",
                "get_shifted_value_08002220": "get_shifted_value",
                "update_flags_08004d48": "update_flags",
                "get_shifted_value_08002220()": "get_shifted_value",
                "update_flags_08004d48()": "update_flags"
            },
            "calling": [
                "FUN_0800458c"
            ],
            "called": [
                "FUN_08004d48",
                "FUN_08002220"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08001754": {
                    "2": "update_data",
                    "1": "update_flags_and_values",
                    "4": "update_param_values",
                    "9": "initialize_data"
                },
                "param_1": {
                    "1": "input_data",
                    "8": "data",
                    "4": "params",
                    "2": "data_pointer",
                    "3": "parameters",
                    "6": "param"
                },
                "uVar1": {
                    "1": "lower32_bits",
                    "2": "shifted_value_lower",
                    "7": "value1",
                    "3": "shifted_value1",
                    "12": "shifted_value_low"
                },
                "uVar2": {
                    "1": "quotient",
                    "12": "shifted_value_high",
                    "3": "shifted_value2",
                    "7": "value2",
                    "2": "shifted_value_upper"
                },
                "puVar3": {
                    "1": "pointer3",
                    "2": "current_pointer",
                    "3": "ptr1",
                    "4": "pointer1"
                },
                "puVar4": {
                    "4": "pointer2",
                    "1": "param1_ptr",
                    "3": "ptr2",
                    "2": "param_array1"
                },
                "puVar5": {
                    "1": "data_pointer2",
                    "3": "ptr3",
                    "2": "param_array2",
                    "4": "pointer3"
                },
                "uVar6": {
                    "1": "result",
                    "8": "divided_value",
                    "6": "divisor",
                    "2": "div_result",
                    "3": "value3"
                },
                "uVar7": {
                    "1": "shifted_value_combined",
                    "29": "shifted_value"
                },
                "get_shifted_value_08002220": {
                    "11": "get_shifted_value"
                },
                "update_flags_08004d48": {
                    "11": "update_flags"
                },
                "<original_function_name>": {
                    "1": "initialize_params"
                },
                "get_shifted_value_08002220()": {
                    "1": "get_shifted_value"
                },
                "update_flags_08004d48()": {
                    "1": "update_flags"
                }
            }
        },
        "FUN_08001828": {
            "entrypoint": "0x08001828",
            "current_name": "process_data_08001828",
            "code": "\nundefined4\nprocess_data_08001828(uint **data,undefined4 param2,undefined4 param3,undefined4 param4,byte *buffer,\n            short buffer_size,undefined4 param7)\n\n{\n  int initial_value;\n  int current_value;\n  uint *ptr;\n  uint value;\n  \n  if (*(char *)((int)data + 0x35) == ' ') {\n    if (buffer == (byte *)0x0) {\n      return 1;\n    }\n    if (buffer_size == 0) {\n      return 1;\n    }\n    initial_value = get_data_value();\n    do {\n      ptr = *data;\n      if ((~ptr[6] & 2) != 0) {\n        if (*(char *)(data + 0xd) == '\\x01') {\n          return 2;\n        }\n        value = *ptr;\n        *(undefined *)(data + 0xd) = 1;\n        *ptr = value & 0xfffff7ff;\n        *(undefined *)((int)data + 0x35) = 0x21;\n        *(undefined *)((int)data + 0x36) = 0x40;\n        data[0xe] = (uint *)0x0;\n        initial_value = update_data_validity(data,param2,param3,param4,param7);\n        if (initial_value != 0) {\n          *(undefined *)(data + 0xd) = 0;\n          if (data[0xe] == (uint *)0x4) {\n            return 1;\n          }\n          return 3;\n        }\n        goto label_exit_loop;\n      }\n      current_value = get_data_value();\n    } while ((uint)(current_value - initial_value) < 0x2711);\n    *(undefined *)(data + 0xd) = 0;\n    *(undefined *)((int)data + 0x35) = 0x20;\n  }\n  return 2;\n  while (buffer_size != 0) {\nlabel_exit_loop:\n    initial_value = check_data_validity(data,param7);\n    if (initial_value != 0) goto label_invalid_data;\n    ptr = *data;\n    ptr[4] = (uint)*buffer;\n    if ((int)(ptr[5] << 0x1d) < 0) {\n      if ((short)(buffer_size + -1) == 0) break;\n      buffer_size = buffer_size + -2;\n      ptr[4] = (uint)buffer[1];\n      buffer = buffer + 2;\n    }\n    else {\n      buffer = buffer + 1;\n      buffer_size = buffer_size + -1;\n    }\n  }\n  initial_value = check_data_validity(data,param7);\n  if (initial_value == 0) {\n    **data = **data | 0x200;\n    *(undefined *)(data + 0xd) = 0;\n    *(undefined *)((int)data + 0x35) = 0x20;\n    *(undefined *)((int)data + 0x36) = 0;\n    return 0;\n  }\nlabel_invalid_data:\n  if (data[0xe] == (uint *)0x4) {\n    **data = **data | 0x200;\n    return 1;\n  }\n  return 3;\n}\n\n",
            "renaming": {
                "FUN_08001828": "process_data_08001828",
                "param_1": "data",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "buffer",
                "param_6": "buffer_size",
                "param_7": "param7",
                "iVar1": "initial_value",
                "iVar2": "current_value",
                "puVar3": "ptr",
                "uVar4": "value",
                "get_data_value_0800115c": "get_data_value",
                "update_data_validity_08001530": "update_data_validity",
                "check_data_validity_080014e2": "check_data_validity",
                "LAB_080018e2": "label_exit_loop",
                "LAB_080018ee": "label_invalid_data"
            },
            "calling": [
                "FUN_0800403c"
            ],
            "called": [
                "FUN_0800115c",
                "FUN_08001530",
                "FUN_080014e2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08001828": {
                    "5": "validate_and_update_data",
                    "10": "process_data",
                    "1": "validate_input",
                    "9": "validate_data",
                    "2": "check_data_validity"
                },
                "param_1": {
                    "19": "data",
                    "1": "input_data",
                    "8": "data_ptr"
                },
                "param_2": {
                    "13": "param2",
                    "1": "arg2",
                    "3": "value1",
                    "5": "param_2"
                },
                "param_3": {
                    "3": "value2",
                    "13": "param3",
                    "1": "flag2",
                    "5": "param_3"
                },
                "param_4": {
                    "13": "param4",
                    "3": "value3",
                    "5": "param_4",
                    "1": "option3"
                },
                "param_5": {
                    "1": "byte_arr",
                    "3": "byte_data",
                    "5": "byte_array",
                    "12": "buffer",
                    "2": "input_data"
                },
                "param_6": {
                    "1": "length",
                    "2": "data_length",
                    "6": "byte_count",
                    "9": "buffer_size",
                    "3": "buffer_length"
                },
                "param_7": {
                    "1": "option4",
                    "3": "value4",
                    "5": "param_7",
                    "13": "param7"
                },
                "iVar1": {
                    "2": "prev_value",
                    "1": "result",
                    "16": "initial_value",
                    "5": "value1",
                    "3": "data_value1"
                },
                "iVar2": {
                    "5": "value2",
                    "1": "previous_value",
                    "3": "data_value2",
                    "12": "current_value"
                },
                "puVar3": {
                    "1": "data_value_ptr",
                    "4": "data_ptr",
                    "3": "pointer",
                    "15": "ptr",
                    "2": "ptr_data"
                },
                "uVar4": {
                    "1": "temp_var",
                    "2": "value3",
                    "12": "value",
                    "3": "data_value"
                },
                "get_data_value_0800115c": {
                    "9": "get_data_value"
                },
                "update_data_validity_08001530": {
                    "1": "update_data_validity_check",
                    "10": "update_data_validity"
                },
                "check_data_validity_080014e2": {
                    "11": "check_data_validity"
                },
                "char *param_5": {
                    "1": "data_pointer"
                },
                "short param_6": {
                    "1": "data_size"
                },
                "uint **param_1": {
                    "1": "data"
                },
                "uint param_2": {
                    "1": "param2"
                },
                "uint param_3": {
                    "1": "param3"
                },
                "uint param_4": {
                    "1": "param4"
                },
                "uint param_7": {
                    "1": "param7"
                },
                "int iVar1": {
                    "1": "initial_value"
                },
                "int iVar2": {
                    "1": "new_value"
                },
                "uint *puVar3": {
                    "1": "temp_pointer"
                },
                "uint uVar4": {
                    "1": "temp_value"
                },
                "LAB_080018e2": {
                    "1": "label_exit_loop"
                },
                "LAB_080018ee": {
                    "1": "label_invalid_data"
                }
            }
        },
        "FUN_08001938": {
            "entrypoint": "0x08001938",
            "current_name": "process_data_08001938",
            "code": "\nundefined4\nprocess_data_08001938(uint **data,undefined4 param2,undefined4 param3,undefined4 param4,\n            undefined *output,ushort length,uint timeout)\n\n{\n  undefined *ptr1;\n  int start_value;\n  int current_value;\n  uint *ptr2;\n  uint value;\n  undefined *ptr3;\n  bool flag;\n  \n  if (*(char *)((int)data + 0x35) != ' ') {\n    return 2;\n  }\n  if (output == (undefined *)0x0) {\n    return 1;\n  }\n  if (length == 0) {\n    return 1;\n  }\n  start_value = get_data_value();\n  while (ptr2 = *data, (~ptr2[6] & 2) == 0) {\n    current_value = get_data_value();\n    if (10000 < (uint)(current_value - start_value)) {\n      *(undefined *)(data + 0xd) = 0;\n      *(undefined *)((int)data + 0x35) = 0x20;\n      return 2;\n    }\n  }\n  if (*(char *)(data + 0xd) == '\\x01') {\n    return 2;\n  }\n  value = *ptr2;\n  *(undefined *)(data + 0xd) = 1;\n  *ptr2 = value & 0xfffff7ff;\n  *(undefined *)((int)data + 0x35) = 0x22;\n  *(undefined *)((int)data + 0x36) = 0x40;\n  data[0xe] = (uint *)0x0;\n  start_value = process_data_08001938(data,param2,param3,param4,timeout);\n  if (start_value != 0) {\n    *(undefined *)(data + 0xd) = 0;\n    if (data[0xe] == (uint *)0x4) {\n      return 1;\n    }\n    return 3;\n  }\n  ptr2 = *data;\n  value = *ptr2;\n  if (length == 1) {\n    *ptr2 = value & 0xfffffbff;\n    disable_interrupts();\n    **data = **data | 0x200;\n    enable_interrupts();\n    start_value = check_data_validity(data,timeout);\n    if (start_value == 0) {\n      *output = (char)(*data)[4];\nlabel1:\n      *(undefined *)((int)data + 0x35) = 0x20;\n      *(undefined *)((int)data + 0x36) = 0;\n      *(undefined *)(data + 0xd) = 0;\n      return 0;\n    }\nlabel2:\n    if (data[0xe] != (uint *)0x20) {\n      return 1;\n    }\n    return 3;\n  }\n  if (length == 2) {\n    *ptr2 = value | 0x800;\n    disable_interrupts();\n    **data = **data & 0xfffffbff;\n    enable_interrupts();\n  }\n  else {\n    *ptr2 = value | 0x400;\n    while (3 < length) {\n      start_value = check_data_validity(data,timeout);\n      if (start_value != 0) goto label2;\n      *output = (char)(*data)[4];\n      ptr2 = *data;\n      flag = (int)(ptr2[5] << 0x1d) < 0;\n      if (flag) {\n        ptr2 = (uint *)ptr2[4];\n        ptr3 = output + 2;\n        length = length - 2;\n      }\n      else {\n        ptr3 = output + 1;\n        length = length - 1;\n      }\n      ptr1 = output + 1;\n      output = ptr3;\n      if (flag) {\n        *ptr1 = (char)ptr2;\n      }\n    }\n    if (length != 2) {\n      start_value = get_data_value();\n      do {\n        ptr2 = *data;\n        do {\n          if ((int)(ptr2[5] << 0x1d) < 0) {\n            *ptr2 = *ptr2 & 0xfffffbff;\n            disable_interrupts();\n            *output = (char)(*data)[4];\n            start_value = get_data_value();\n            goto label4;\n          }\n        } while (timeout == 0xffffffff);\n      } while ((timeout != 0) && (current_value = get_data_value(), (uint)(current_value - start_value) <= timeout));\n      goto label3;\n    }\n  }\n  start_value = get_data_value();\n  do {\n    do {\n      if ((int)((*data)[5] << 0x1d) < 0) {\n        disable_interrupts();\n        ptr2 = *data;\n        *ptr2 = *ptr2 | 0x200;\n        *output = (char)ptr2[4];\n        enable_interrupts();\n        output[1] = (char)(*data)[4];\n        goto label1;\n      }\n    } while (timeout == 0xffffffff);\n  } while ((timeout != 0) && (current_value = get_data_value(), (uint)(current_value - start_value) <= timeout));\nlabel3:\n  *(undefined *)((int)data + 0x35) = 0x20;\n  *(undefined *)(data + 0xd) = 0;\n  return 3;\nlabel4:\n  do {\n    ptr2 = *data;\n    do {\n      if ((int)(ptr2[5] << 0x1d) < 0) {\n        *ptr2 = *ptr2 | 0x200;\n        output[1] = (char)ptr2[4];\n        enable_interrupts();\n        output[2] = (char)(*data)[4];\n        goto label1;\n      }\n    } while (timeout == 0xffffffff);\n  } while ((timeout != 0) && (current_value = get_data_value(), (uint)(current_value - start_value) <= timeout));\n  goto label3;\n}\n\n",
            "renaming": {
                "FUN_08001938": "process_data_08001938",
                "param_1": "data",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "output",
                "param_6": "length",
                "param_7": "timeout",
                "puVar1": "ptr1",
                "iVar2": "start_value",
                "iVar3": "current_value",
                "puVar4": "ptr2",
                "uVar5": "value",
                "puVar6": "ptr3",
                "bVar7": "flag",
                "check_data_validity_080016f4": "check_data_validity",
                "get_data_value_0800115c": "get_data_value",
                "disableIRQinterrupts": "disable_interrupts",
                "enableIRQinterrupts": "enable_interrupts",
                "process_data_080015e8": "process_data",
                "LAB_08001ab8": "label1",
                "LAB_08001a18": "label2",
                "LAB_08001afa": "label3",
                "LAB_08001b3a": "label4"
            },
            "calling": [
                "FUN_080040b8",
                "FUN_0800407c"
            ],
            "called": [
                "FUN_080016f4",
                "FUN_0800115c",
                "FUN_080015e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08001938": {
                    "3": "process_and_validate_data",
                    "1": "process_data_and_generate_output",
                    "26": "process_data"
                },
                "param_1": {
                    "27": "data",
                    "1": "input_data"
                },
                "param_2": {
                    "22": "param2",
                    "2": "arg1",
                    "3": "value1",
                    "1": "value2"
                },
                "param_3": {
                    "1": "param_3",
                    "22": "param3",
                    "3": "value2",
                    "2": "arg2"
                },
                "param_4": {
                    "22": "param4",
                    "1": "value4",
                    "3": "value3",
                    "2": "arg3"
                },
                "param_5": {
                    "21": "output",
                    "1": "result_ptr",
                    "8": "result"
                },
                "param_6": {
                    "1": "num_elements",
                    "2": "count",
                    "10": "size",
                    "15": "length"
                },
                "param_7": {
                    "4": "time_limit",
                    "1": "max_iterations",
                    "13": "timeout",
                    "2": "max_value",
                    "6": "limit"
                },
                "puVar1": {
                    "1": "pointer",
                    "3": "pointer1",
                    "19": "ptr1",
                    "2": "temp_ptr1"
                },
                "iVar2": {
                    "1": "prev_time",
                    "3": "data_value1",
                    "4": "initial_value",
                    "9": "value1",
                    "10": "start_value"
                },
                "iVar3": {
                    "3": "data_value2",
                    "1": "val2",
                    "9": "value2",
                    "14": "current_value"
                },
                "puVar4": {
                    "1": "ptr",
                    "4": "data_ptr",
                    "3": "data_pointer",
                    "2": "current_data",
                    "17": "ptr2"
                },
                "uVar5": {
                    "2": "var1",
                    "1": "val3",
                    "14": "value",
                    "8": "value3",
                    "3": "data_value"
                },
                "puVar6": {
                    "7": "output_ptr",
                    "3": "result_ptr",
                    "2": "temp_ptr2",
                    "1": "pointer3",
                    "14": "ptr3"
                },
                "bVar7": {
                    "12": "flag",
                    "8": "is_negative",
                    "1": "boolean",
                    "4": "condition"
                },
                "check_data_validity_080016f4": {
                    "3": "check_data_validity"
                },
                "get_data_value_0800115c": {
                    "3": "get_data_value"
                },
                "disableIRQinterrupts": {
                    "3": "disable_interrupts"
                },
                "enableIRQinterrupts": {
                    "3": "enable_interrupts"
                },
                "process_data_080015e8": {
                    "1": "process_data_other",
                    "2": "process_data"
                },
                "LAB_08001ab8": {
                    "1": "label1"
                },
                "LAB_08001a18": {
                    "1": "label_error"
                },
                "LAB_08001afa": {
                    "1": "label3"
                },
                "LAB_08001b3a": {
                    "1": "label4"
                }
            }
        },
        "FUN_08001b58": {
            "entrypoint": "0x08001b58",
            "current_name": "check_conditions_08001b58",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08001eec) */\n/* WARNING: Removing unreachable block (ram,0x08001ee8) */\n\n\nundefined4 check_conditions_08001b58(int *parameters)\n\n{\n  int value1;\n  int value2;\n  \n  if (*parameters << 0x1f < 0) {\n    if (((_DAT_40021004 & 0xc) == 4) ||\n       (((_DAT_40021004 & 0xc) == 8 && ((int)(_DAT_40021004 << 0xf) < 0)))) {\n      if (((int)((_DAT_40021000 >> 0x11) << 0x1f) < 0) && (parameters[1] == 0)) {\n        return 1;\n      }\n    }\n    else {\n      value1 = parameters[1];\n      if (value1 == 0x10000) {\nLAB_08001c1e:\n        _DAT_40021000 = _DAT_40021000 | 0x10000;\n      }\n      else {\n        if (value1 == 0) {\n          _DAT_40021000 = _DAT_40021000 & 0xfffaffff;\n          value1 = get_data_value();\n          while ((int)((_DAT_40021000 >> 0x11) << 0x1f) < 0) {\n            value2 = get_data_value();\n            if (100 < (uint)(value2 - value1)) {\n              return 3;\n            }\n          }\n          goto LAB_08001b64;\n        }\n        if (value1 == 0x50000) {\n          _DAT_40021000 = _DAT_40021000 | 0x40000;\n          goto LAB_08001c1e;\n        }\n        _DAT_40021000 = _DAT_40021000 & 0xfffaffff;\n      }\n      value1 = get_data_value();\n      while (-1 < (int)((_DAT_40021000 >> 0x11) << 0x1f)) {\n        value2 = get_data_value();\n        if (100 < (uint)(value2 - value1)) {\n          return 3;\n        }\n      }\n    }\n  }\nLAB_08001b64:\n  if (*parameters << 0x1e < 0) {\n    if (((_DAT_40021004 & 0xc) == 0) ||\n       (((_DAT_40021004 & 0xc) == 8 && (-1 < (int)(_DAT_40021004 << 0xf))))) {\n      if (((int)((_DAT_40021000 >> 1) << 0x1f) < 0) && (parameters[4] != 1)) {\n        return 1;\n      }\n    }\n    else {\n      variable1 = parameters[4];\n      if (variable1 == 0) {\n        value1 = get_data_value();\n        while ((int)((_DAT_40021000 >> 1) << 0x1f) < 0) {\n          value2 = get_data_value();\n          if (2 < (uint)(value2 - value1)) {\n            return 3;\n          }\n        }\n        goto LAB_08001b6c;\n      }\n      variable1 = 1;\n      value1 = get_data_value();\n      while (-1 < (int)((_DAT_40021000 >> 1) << 0x1f)) {\n        value2 = get_data_value();\n        if (2 < (uint)(value2 - value1)) {\n          return 3;\n        }\n      }\n    }\n    _DAT_40021000 = parameters[5] << 3 | _DAT_40021000 & 0xffffff07;\n  }\nLAB_08001b6c:\n  if (*parameters << 0x1c < 0) {\n    variable2 = parameters[6];\n    if (variable2 == 0) {\n      value1 = get_data_value();\n      while ((int)((_DAT_40021024 >> 1) << 0x1f) < 0) {\n        value2 = get_data_value();\n        if (2 < (uint)(value2 - value1)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      variable2 = 1;\n      value1 = get_data_value();\n      while (-1 < (int)((_DAT_40021024 >> 1) << 0x1f)) {\n        value2 = get_data_value();\n        if (2 < (uint)(value2 - value1)) {\n          return 3;\n        }\n      }\n      FUNC_08001168(1);\n    }\n  }\n  if (-1 < *parameters << 0x1d) goto LAB_08001bc2;\n  _DAT_4002101c = _DAT_4002101c | 0x10000000;\n  _DAT_40007000 = _DAT_40007000 | 0x100;\n  value1 = get_data_value();\n  while (-1 < (int)(_DAT_40007000 << 0x17)) {\n    value2 = get_data_value();\n    if (100 < (uint)(value2 - value1)) {\n      return 3;\n    }\n  }\n  value1 = parameter3;\n  if (value1 == 1) {\nLAB_08001e1a:\n    _DAT_40021020 = _DAT_40021020 | 1;\n  }\n  else {\n    if (value1 == 0) {\n      _DAT_40021020 = _DAT_40021020 & 0xfffffffa;\n      value1 = get_data_value();\n      while ((int)((_DAT_40021020 >> 1) << 0x1f) < 0) {\n        value2 = get_data_value();\n        if (5000 < (uint)(value2 - value1)) {\n          return 3;\n        }\n      }\n      goto LAB_08001bc2;\n    }\n    if (value1 == 5) {\n      _DAT_40021020 = _DAT_40021020 | 4;\n      goto LAB_08001e1a;\n    }\n    _DAT_40021020 = _DAT_40021020 & 0xfffffffa;\n  }\n  value1 = get_data_value();\n  while (-1 < (int)((_DAT_40021020 >> 1) << 0x1f)) {\n    value2 = get_data_value();\n    if (5000 < (uint)(value2 - value1)) {\n      return 3;\n    }\n  }\nLAB_08001bc2:\n  if (parameter7 == 0) {\n    return 0;\n  }\n  if ((_DAT_40021004 & 0xc) != 8) {\n    if (parameter7 != 2) {\n      variable3 = 0;\n      value1 = get_data_value();\n      do {\n        if (-1 < (int)((_DAT_40021000 >> 0x19) << 0x1f)) {\n          return 0;\n        }\n        value2 = get_data_value();\n      } while ((uint)(value2 - value1) < 3);\n      return 3;\n    }\n    variable3 = 0;\n    value1 = get_data_value();\n    do {\n      if (-1 < (int)((_DAT_40021000 >> 0x19) << 0x1f)) {\n        if (parameter8 == 0x10000) {\n          _DAT_40021004 = _DAT_40021004 & 0xfffdffff | value_2;\n        }\n        _DAT_40021004 = parameter8 | parameter9 | _DAT_40021004 & 0xffc2ffff;\n        variable3 = 1;\n        value1 = get_data_value();\n        do {\n          if ((int)((_DAT_40021000 >> 0x19) << 0x1f) < 0) {\n            return 0;\n          }\n          value2 = get_data_value();\n        } while ((uint)(value2 - value1) < 3);\n        return 3;\n      }\n      value2 = get_data_value();\n    } while ((uint)(value2 - value1) < 3);\n    return 3;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08001b58": "check_conditions_08001b58",
                "param_1": "parameters",
                "iVar1": "value1",
                "iVar2": "value2",
                "get_data_value_0800115c": "get_data_value",
                "iRam42420000": "variable1",
                "iRam42420480": "variable2",
                "param_1[3]": "parameter3",
                "param_1[7]": "parameter7",
                "uRam42420060": "variable3",
                "param_1[8]": "parameter8",
                "param_1[9]": "parameter9",
                "param_1[2]": "value_2"
            },
            "calling": [
                "FUN_08004514"
            ],
            "called": [
                "FUN_0800115c",
                "FUN_08001168"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08001b58": {
                    "2": "check_data_values",
                    "1": "check_flags",
                    "17": "check_conditions"
                },
                "param_1": {
                    "1": "flags",
                    "2": "inputs",
                    "5": "input_params",
                    "3": "input_array",
                    "8": "parameters"
                },
                "iVar1": {
                    "5": "value_1",
                    "1": "current_value",
                    "2": "temp_var1",
                    "17": "value1"
                },
                "iVar2": {
                    "1": "variable_2",
                    "2": "var2",
                    "17": "value2",
                    "5": "value_2"
                },
                "_DAT_40021004": {
                    "1": "register_value_1"
                },
                "_DAT_40021000": {
                    "1": "register2"
                },
                "get_data_value_0800115c": {
                    "2": "get_data_value"
                },
                "iRam42420000": {
                    "1": "variable1"
                },
                "iRam42420480": {
                    "1": "variable_2"
                },
                "_DAT_40021024": {
                    "1": "register_value_3"
                },
                "_DAT_40007000": {
                    "1": "register4"
                },
                "param_1[3]": {
                    "1": "condition_value"
                },
                "_DAT_40021020": {
                    "1": "register5"
                },
                "param_1[7]": {
                    "1": "parameter7"
                },
                "uRam42420060": {
                    "1": "variable3"
                },
                "param_1[8]": {
                    "1": "parameter8"
                },
                "param_1[9]": {
                    "1": "value_3"
                },
                "param_1[2]": {
                    "1": "value_2"
                },
                "*param_1": {
                    "1": "condition_array"
                }
            }
        },
        "FUN_08002008": {
            "entrypoint": "0x08002008",
            "current_name": "calculate_mpu9250_clock_frequency_08002008",
            "code": "\n\n\nint calculate_mpu9250_clock_frequency_08002008(void)\n\n{\n  undefined4 value1;\n  int result;\n  undefined4 value2;\n  undefined4 *data_ptr;\n  uint clock_frequency;\n  undefined4 *destination_array;\n  byte clock_settings [4];\n  undefined4 data_array [5];\n  \n  data_ptr = &DAT_080072f0;\n  destination_array = data_array;\n  do {\n    value1 = *data_ptr;\n    value2 = data_ptr[1];\n    data_ptr = data_ptr + 2;\n    *destination_array = value1;\n    destination_array[1] = value2;\n    destination_array = destination_array + 2;\n  } while (data_ptr != (undefined4 *)\"../Src/MPU9250.c\");\n  clock_settings[0] = 1;\n  clock_settings[1] = 2;\n  if ((_DAT_40021004 & 0xc) == 8) {\n    if ((int)(_DAT_40021004 << 0xf) < 0) {\n      clock_frequency = 8000000 / clock_settings[(_DAT_40021004 & 0x20000) >> 0x11];\n    }\n    else {\n      clock_frequency = 4000000;\n    }\n    result = clock_frequency * *(byte *)((int)data_array + ((_DAT_40021004 & 0x3c0000) >> 0x12));\n  }\n  else {\n    result = 8000000;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08002008": "calculate_mpu9250_clock_frequency_08002008",
                "local_24": "clock_settings",
                "local_20": "data_array",
                "puVar4": "data_ptr",
                "puVar6": "destination_array",
                "uVar1": "value1",
                "uVar3": "value2",
                "uVar5": "clock_frequency",
                "iVar2": "result"
            },
            "calling": [
                "FUN_0800209c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08002008": {
                    "1": "calculate_mpu9250_clock_speed",
                    "6": "calculate_mpu9250_clock",
                    "8": "calculate_mpu9250_clock_frequency",
                    "7": "calculate_clock_frequency"
                },
                "local_24": {
                    "3": "local_array",
                    "1": "input_values",
                    "2": "byte_array",
                    "4": "clock_settings"
                },
                "local_20": {
                    "1": "array_data",
                    "6": "data_array"
                },
                "puVar4": {
                    "1": "sensor_info",
                    "2": "data_pointer",
                    "4": "data_ptr",
                    "3": "source_array"
                },
                "puVar6": {
                    "1": "data_pointer2",
                    "3": "destination_array",
                    "2": "destination_pointer"
                },
                "uVar1": {
                    "8": "first_value",
                    "1": "first_byte",
                    "2": "temp1",
                    "9": "value1"
                },
                "uVar3": {
                    "8": "second_value",
                    "1": "next_file",
                    "2": "temp2",
                    "9": "value2"
                },
                "uVar5": {
                    "3": "clock_rate",
                    "1": "temp3",
                    "2": "clock_speed",
                    "9": "clock_frequency"
                },
                "iVar2": {
                    "1": "calculated_frequency",
                    "11": "clock_frequency",
                    "13": "result"
                },
                "_DAT_40021004": {
                    "1": "input_value"
                },
                "*puVar4": {
                    "1": "config_array"
                },
                "*puVar6": {
                    "1": "target_array"
                }
            }
        },
        "FUN_0800209c": {
            "entrypoint": "0x0800209c",
            "current_name": "initialize_mpu9250_0800209c",
            "code": "\n\n\nundefined4 initialize_mpu9250_0800209c(uint *config_data,uint config_length)\n\n{\n  char is_negative;\n  char is_positive;\n  int shifted_value;\n  uint config_value;\n  int data_value;\n  uint shifted_value;\n  \n  if ((config_length <= (_DAT_40022000 & 7)) ||\n     (_DAT_40022000 = _DAT_40022000 & 0xfffffff8 | config_length, config_length == (config_length & 7))) {\n    if ((int)(*config_data << 0x1e) < 0) {\n      _DAT_40021004 = _DAT_40021004 & 0xffffff0f | config_data[2];\n    }\n    shifted_value = *config_data << 0x1f;\n    if (-1 < shifted_value) {\nLAB_080020ba:\n      if ((config_length < (_DAT_40022000 & 7)) &&\n         (_DAT_40022000 = _DAT_40022000 & 0xfffffff8 | config_length, config_length != (config_length & 7))) {\n        return 1;\n      }\n      if ((*config_data & 4) != 0) {\n        _DAT_40021004 = _DAT_40021004 & 0xfffff8ff | config_data[3];\n      }\n      if ((int)(*config_data << 0x1c) < 0) {\n        _DAT_40021004 = _DAT_40021004 & 0xffffc7ff | config_data[4] << 3;\n      }\n      config_value = calculate_clock_frequency();\n      DAT_200001bc = config_value >> (&DAT_08007361)[(_DAT_40021004 & 0xf0) >> 4];\n      initialize_and_update_memory(0);\n      return 0;\n    }\n    config_value = config_data[1];\n    if (config_value == 1) {\n      is_positive = '\\x01';\n      is_negative = '\\0';\n    }\n    else {\n      shifted_value = _DAT_40021000;\n      if (config_value == 2) goto LAB_08002176;\n      is_positive = '\\0';\n      is_negative = '\\x01';\n    }\n    shifted_value = (_DAT_40021000 >>\n            (leading_zero_count((uint)(byte)(is_negative << 6) << 0x18 | (uint)(byte)(is_positive << 6) << 8) & 0x1fU)) <<\n            0x1f;\n    if ((int)shifted_value < 0) {\nLAB_08002176:\n      _DAT_40021004 = _DAT_40021004 & 0xfffffffc | config_value;\n      shifted_value = get_data_value(shifted_value,shifted_value);\n      if (config_data[1] == 1) {\n        do {\n          if ((_DAT_40021004 & 0xc) == 4) goto LAB_080020ba;\n          data_value = get_data_value();\n        } while ((uint)(data_value - shifted_value) < 0x1389);\n      }\n      else if (config_data[1] == 2) {\n        do {\n          if ((_DAT_40021004 & 0xc) == 8) goto LAB_080020ba;\n          data_value = get_data_value();\n        } while ((uint)(data_value - shifted_value) < 0x1389);\n      }\n      else {\n        do {\n          if ((_DAT_40021004 & 0xc) == 0) goto LAB_080020ba;\n          data_value = get_data_value();\n        } while ((uint)(data_value - shifted_value) < 0x1389);\n      }\n      return 3;\n    }\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "param_1": "config_data",
                "param_2": "config_length",
                "cVar1": "is_negative",
                "cVar2": "is_positive",
                "iVar3": "shifted_value",
                "uVar4": "config_value",
                "iVar5": "data_value",
                "uVar6": "shifted_value",
                "FUN_0800209c": "initialize_mpu9250_0800209c",
                "calculate_mpu9250_clock_frequency_08002008": "calculate_clock_frequency",
                "initialize_and_update_memory_08001104": "initialize_and_update_memory",
                "LZCOUNT": "leading_zero_count",
                "get_data_value_0800115c": "get_data_value"
            },
            "calling": [
                "FUN_08004514"
            ],
            "called": [
                "FUN_08001104",
                "FUN_0800115c",
                "FUN_08002008"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "param_1": {
                    "5": "data",
                    "1": "device_configuration",
                    "2": "config_array",
                    "6": "config_data"
                },
                "param_2": {
                    "3": "config_size",
                    "2": "parameter_count",
                    "1": "length",
                    "4": "data_length",
                    "5": "size"
                },
                "cVar1": {
                    "3": "is_negative",
                    "1": "condition_var_1",
                    "2": "condition1"
                },
                "cVar2": {
                    "1": "is_data_value_2",
                    "3": "flag2",
                    "2": "condition2"
                },
                "iVar3": {
                    "1": "config_shifted",
                    "2": "shifted_data",
                    "8": "shifted_value"
                },
                "uVar4": {
                    "7": "config_value",
                    "1": "unsigned_variable_1",
                    "3": "sensor_type",
                    "2": "second_param"
                },
                "iVar5": {
                    "1": "temp3",
                    "13": "data_value",
                    "4": "current_data_value",
                    "3": "current_value"
                },
                "uVar6": {
                    "1": "shifted_data_value",
                    "7": "shifted_value",
                    "2": "shifted_data"
                },
                "FUN_0800209c": {
                    "9": "initialize_mpu9250",
                    "1": "improve_mpu9250_configuration",
                    "2": "initialize_and_update_mpu9250"
                },
                "calculate_mpu9250_clock_frequency_08002008": {
                    "2": "calculate_clock_frequency",
                    "1": "calculate_clock_frequency_for_sensor"
                },
                "DAT_200001bc": {
                    "1": "clock_divider",
                    "8": "clock_frequency"
                },
                "initialize_and_update_memory_08001104": {
                    "3": "initialize_and_update_memory",
                    "1": "initialize_memory_and_update"
                },
                "LZCOUNT": {
                    "1": "leading_zero_count"
                },
                "get_data_value_0800115c": {
                    "1": "get_current_data_value",
                    "3": "get_data_value"
                },
                "DAT_40022000": {
                    "2": "mpu9250_config_register",
                    "1": "device_register_1"
                },
                "DAT_40021004": {
                    "1": "mpu9250_control_register"
                },
                "DAT_40021000": {
                    "1": "value"
                },
                "_DAT_40022000": {
                    "1": "mpu_reg"
                },
                "_DAT_40021004": {
                    "1": "mpu_config_reg"
                },
                "_DAT_40021000": {
                    "1": "data_flags"
                },
                "uVar7": {
                    "1": "clock_frequency"
                },
                "DAT_08007361": {
                    "1": "clock_mapping_table"
                }
            }
        },
        "FUN_08002214": {
            "entrypoint": "0x08002214",
            "current_name": "get_data_value_08002214",
            "code": "\nundefined4 get_data_value_08002214(void)\n\n{\n  return DAT_200001bc;\n}\n\n",
            "renaming": {
                "FUN_08002214": "get_data_value_08002214"
            },
            "calling": [
                "FUN_08001104",
                "FUN_08004514"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08002214": {
                    "4": "get_global_variable",
                    "1": "get_data_pointer",
                    "14": "get_data_value",
                    "9": "get_data",
                    "2": "get_dat_value"
                },
                "DAT_200001bc": {
                    "10": "data",
                    "1": "global_value",
                    "4": "global_variable",
                    "2": "data_value"
                }
            }
        },
        "FUN_08002220": {
            "entrypoint": "0x08002220",
            "current_name": "get_shifted_value_08002220",
            "code": "\n\n\nuint get_shifted_value_08002220(void)\n\n{\n  return DAT_200001bc >> (&DAT_08007371)[(_DAT_40021004 & 0x700) >> 8];\n}\n\n",
            "renaming": {
                "FUN_08002220": "get_shifted_value_08002220"
            },
            "calling": [
                "FUN_080025e8",
                "FUN_08001754"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08002220": {
                    "1": "shifted_data_value",
                    "2": "extract_bits",
                    "9": "get_shifted_value"
                },
                "DAT_200001bc": {
                    "9": "data_value",
                    "1": "input_data",
                    "2": "shifted_value"
                },
                "DAT_08007371": {
                    "3": "lookup_table",
                    "1": "data_shift_offset",
                    "2": "shift_table"
                },
                "_DAT_40021004": {
                    "2": "data_pointer",
                    "3": "mask",
                    "1": "word",
                    "9": "input_value",
                    "4": "input_data"
                },
                "retrieve_data_from_array": {
                    "1": "get_data_from_array"
                },
                "data": {
                    "1": "data_value"
                },
                "array": {
                    "1": "data_array"
                },
                "input": {
                    "1": "input_value"
                },
                "&DAT_08007371": {
                    "2": "bit_mask",
                    "1": "array_of_shifts"
                },
                "_DAT_08007371": {
                    "1": "shift_map"
                },
                "0x700": {
                    "1": "mask_shift_amount"
                },
                "0x8": {
                    "1": "shift_amount"
                }
            }
        },
        "FUN_08002250": {
            "entrypoint": "0x08002250",
            "current_name": "get_shifted_value_08002250",
            "code": "\n\n\nuint get_shifted_value_08002250(void)\n\n{\n  return DAT_200001bc >> (&DAT_08007371)[(_DAT_40021004 & 0x3800) >> 0xb];\n}\n\n",
            "renaming": {
                "FUN_08002250": "get_shifted_value_08002250"
            },
            "calling": [
                "FUN_080025e8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08002250": {
                    "1": "get_bit_from_data",
                    "13": "get_shifted_value",
                    "2": "extract_bit_from_data"
                },
                "DAT_200001bc": {
                    "10": "data",
                    "1": "memory_value",
                    "8": "data_value"
                },
                "DAT_08007371": {
                    "2": "shift_table",
                    "1": "bit_shift_amount",
                    "3": "shift_array"
                },
                "_DAT_40021004": {
                    "2": "shift_mask",
                    "3": "mask",
                    "1": "binary_value",
                    "9": "input_value"
                },
                "&DAT_08007371": {
                    "3": "shift_table",
                    "1": "array_address",
                    "5": "shift_array",
                    "2": "lookup"
                },
                "_DAT_40021004 & 0x3800": {
                    "1": "masked_input"
                },
                "0x3800": {
                    "1": "shift_mask",
                    "2": "bit_shift"
                },
                "0xb": {
                    "1": "shift_amount"
                },
                "data": {
                    "1": "extracted_data"
                },
                "lookup": {
                    "1": "bit_index"
                },
                "new_variable_name": {
                    "1": "shifted_value"
                },
                "": {
                    "1": ""
                },
                "D_08007371": {
                    "1": "data"
                }
            }
        },
        "FUN_08002280": {
            "entrypoint": "0x08002280",
            "current_name": "update_parameters_08002280",
            "code": "\nvoid update_parameters_08002280(int base_address,uint *param_array)\n\n{\n  uint updated_value1;\n  uint updated_value2;\n  uint updated_value3;\n  \n  *(uint *)(base_address + 0x20) = *(uint *)(base_address + 0x20) & 0xfffffffe;\n  updated_value2 = *(uint *)(base_address + 4);\n  updated_value3 = *param_array;\n  updated_value1 = *(uint *)(base_address + 0x20) & 0xfffffffd | param_array[2];\n  if (base_address == 0x40012c00) {\n    updated_value1 = (updated_value1 & 0xfffffff7 | param_array[3]) & 0xfffffffb;\n    updated_value2 = updated_value2 & 0xfffffcff | param_array[5] | param_array[6];\n  }\n  *(uint *)(base_address + 4) = updated_value2;\n  *(uint *)(base_address + 0x18) = *(uint *)(base_address + 0x18) & 0xffffff8c | updated_value3;\n  *(uint *)(base_address + 0x34) = param_array[1];\n  *(uint *)(base_address + 0x20) = updated_value1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002280": "update_parameters_08002280",
                "param_1": "base_address",
                "param_2": "param_array",
                "uVar1": "updated_value1",
                "uVar2": "updated_value2",
                "uVar3": "updated_value3"
            },
            "calling": [
                "FUN_0800245c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08002280": {
                    "2": "update_param_values",
                    "1": "update_registers",
                    "6": "update_parameters",
                    "3": "update_flags_and_values"
                },
                "param_1": {
                    "2": "memory_address",
                    "1": "input_param",
                    "11": "base_address",
                    "4": "data_address"
                },
                "param_2": {
                    "2": "input_data",
                    "1": "new_data",
                    "5": "values",
                    "3": "parameters",
                    "6": "param_array"
                },
                "uVar1": {
                    "3": "modified_value1",
                    "1": "updated_flag1",
                    "9": "updated_var1",
                    "12": "updated_value1"
                },
                "uVar2": {
                    "3": "modified_value2",
                    "12": "updated_value2",
                    "1": "current_value",
                    "9": "updated_var2",
                    "2": "original_value"
                },
                "uVar3": {
                    "1": "original_config2",
                    "5": "new_value",
                    "2": "modified_value3",
                    "11": "updated_value3",
                    "8": "updated_var3"
                },
                "param_1 + 0x20": {
                    "1": "config_address_with_offset"
                },
                "param_1 + 4": {
                    "1": "value_at_offset"
                },
                "param_1 + 0x18": {
                    "1": "another_value_at_offset"
                },
                "param_1 + 0x34": {
                    "1": "additional_value_at_offset"
                }
            }
        },
        "FUN_080022d0": {
            "entrypoint": "0x080022d0",
            "current_name": "update_parameters_080022d0",
            "code": "\nvoid update_parameters_080022d0(int base_address,uint *param_array)\n\n{\n  uint updated_value1;\n  uint updated_value2;\n  uint updated_value3;\n  \n  *(uint *)(base_address + 0x20) = *(uint *)(base_address + 0x20) & 0xfffffeff;\n  updated_value2 = *(uint *)(base_address + 4);\n  updated_value3 = *param_array;\n  updated_value1 = *(uint *)(base_address + 0x20) & 0xfffffdff | param2_value2 << 8;\n  if (base_address == 0x40012c00) {\n    updated_value1 = (updated_value1 & 0xfffff7ff | param2_value3 << 8) & 0xfffffbff;\n    updated_value2 = updated_value2 & 0xffffcfff | (param2_value5 | param2_value6) << 4;\n  }\n  *(uint *)(base_address + 4) = updated_value2;\n  *(uint *)(base_address + 0x1c) = *(uint *)(base_address + 0x1c) & 0xffffff8c | updated_value3;\n  *(uint *)(base_address + 0x3c) = param_array[1];\n  *(uint *)(base_address + 0x20) = updated_value1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080022d0": "update_parameters_080022d0",
                "param_1": "base_address",
                "param_2": "param_array",
                "uVar1": "updated_value1",
                "uVar2": "updated_value2",
                "uVar3": "updated_value3",
                "param_2[2]": "param2_value2",
                "param_2[3]": "param2_value3",
                "param_2[5]": "param2_value5",
                "param_2[6]": "param2_value6"
            },
            "calling": [
                "FUN_0800245c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080022d0": {
                    "1": "update_register_values",
                    "4": "update_params",
                    "2": "update_param_values",
                    "6": "update_data",
                    "8": "update_parameters"
                },
                "param_1": {
                    "1": "param_base_address",
                    "2": "param_address",
                    "11": "base_address",
                    "3": "data_address"
                },
                "param_2": {
                    "3": "parameters",
                    "1": "input_data",
                    "2": "config_values",
                    "4": "param_values",
                    "6": "param_array"
                },
                "uVar1": {
                    "1": "updated_register1",
                    "2": "modified_value1",
                    "4": "updated_var1",
                    "19": "updated_value1"
                },
                "uVar2": {
                    "2": "modified_value2",
                    "18": "updated_value2",
                    "1": "modified_u_var2",
                    "4": "updated_var2"
                },
                "uVar3": {
                    "1": "modified_u_var3",
                    "2": "param_value",
                    "3": "updated_var3",
                    "16": "updated_value3"
                },
                "param_1 + 0x20": {
                    "1": "register1"
                },
                "param_1 + 4": {
                    "1": "register2"
                },
                "param_1 + 0x1c": {
                    "1": "register3"
                },
                "param_1 + 0x3c": {
                    "1": "register4"
                },
                "*(uint *)(param_1 + 0x20)": {
                    "1": "address_value1"
                },
                "*(uint *)(param_1 + 4)": {
                    "1": "address_value2"
                },
                "*(uint *)(param_1 + 0x1c)": {
                    "1": "address_value3"
                },
                "*(uint *)(param_1 + 0x3c)": {
                    "1": "address_value4"
                },
                "param_2[2]": {
                    "1": "param2_value2"
                },
                "param_2[3]": {
                    "1": "param2_value3"
                },
                "param_2[5]": {
                    "1": "param2_value5"
                },
                "param_2[6]": {
                    "1": "param2_value6"
                }
            }
        },
        "FUN_08002324": {
            "entrypoint": "0x08002324",
            "current_name": "update_parameters_08002324",
            "code": "\nvoid update_parameters_08002324(int base_address,int *parameters)\n\n{\n  uint flags;\n  int value2;\n  int value3;\n  int default_address;\n  \n  *(uint *)(base_address + 0x20) = *(uint *)(base_address + 0x20) & 0xffffefff;\n  flags = *(uint *)(base_address + 4);\n  value2 = *parameters;\n  value3 = address3;\n  default_address = 0x40012c00;\n  if (base_address == 0x40012c00) {\n    default_address = constant2;\n    flags = flags & 0xffffbfff;\n  }\n  if (base_address == 0x40012c00) {\n    flags = flags | default_address << 6;\n  }\n  *(uint *)(base_address + 4) = flags;\n  *(uint *)(base_address + 0x1c) = *(uint *)(base_address + 0x1c) & 0xffff8cff | value2 << 8;\n  *(int *)(base_address + 0x40) = parameter;\n  *(uint *)(base_address + 0x20) = *(uint *)(base_address + 0x20) & 0xffffdfff | value3 << 0xc;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002324": "update_parameters_08002324",
                "param_1": "base_address",
                "param_2": "parameters",
                "uVar1": "flags",
                "iVar2": "value2",
                "iVar3": "value3",
                "iVar4": "default_address",
                "param_2[5]": "constant2",
                "param_2[2]": "address3",
                "param_2[1]": "parameter"
            },
            "calling": [
                "FUN_0800245c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08002324": {
                    "2": "update_param_values",
                    "1": "set_flags_and_values",
                    "3": "update_data",
                    "10": "update_parameters"
                },
                "param_1": {
                    "1": "param_addr",
                    "3": "data_address",
                    "9": "base_address",
                    "2": "parameter_address"
                },
                "param_2": {
                    "2": "parameter_values",
                    "1": "registration_data",
                    "4": "param_array",
                    "6": "parameters"
                },
                "uVar1": {
                    "1": "updated_value1",
                    "2": "param1_value",
                    "6": "value1",
                    "7": "flags"
                },
                "iVar2": {
                    "1": "input_value1",
                    "2": "param2_var1",
                    "4": "value1",
                    "5": "param2_value",
                    "6": "value2",
                    "3": "first_param"
                },
                "iVar3": {
                    "1": "param_value3",
                    "2": "param2_var2",
                    "6": "value3",
                    "4": "value2"
                },
                "iVar4": {
                    "7": "default_address",
                    "2": "constant_value",
                    "3": "value4",
                    "1": "integer_var4",
                    "5": "constant"
                },
                "param_2[5]": {
                    "1": "constant2"
                },
                "updateParamInfo": {
                    "1": "update_param_info"
                },
                "paramAddress": {
                    "1": "param_address"
                },
                "paramData": {
                    "1": "param_data"
                },
                "paramValue": {
                    "1": "param_value"
                },
                "firstParam": {
                    "1": "first_param"
                },
                "secondParam": {
                    "1": "second_param"
                },
                "defaultParam": {
                    "1": "default_param"
                },
                "param_1 + 0x20": {
                    "1": "address1"
                },
                "param_1 + 4": {
                    "1": "settings_field2_address"
                },
                "param_2[2]": {
                    "1": "parameters[2]"
                },
                "0x40012c00": {
                    "1": "constant_address",
                    "2": "default_address"
                },
                "param_1 + 0x1c": {
                    "1": "address4"
                },
                "param_2[1]": {
                    "1": "parameter"
                },
                "param_1 + 0x40": {
                    "1": "data_address"
                },
                "param_1 + 0x4": {
                    "1": "device_flags_value"
                },
                "*(uint *)(param_1 + 0x20) = *(uint *)(param_1 + 0x20) & 0xffffefff;": {
                    "1": "clear_device_flags"
                },
                "*(uint *)(param_1 + 4) = uVar1;": {
                    "1": "update_device_flags"
                },
                "*(uint *)(param_1 + 0x1c) = *(uint *)(param_1 + 0x1c) & 0xffff8cff | iVar2 << 8;": {
                    "1": "update_device_config"
                },
                "*(int *)(param_1 + 0x40) = param_2[1];": {
                    "1": "set_device_parameter"
                },
                "*(uint *)(param_1 + 0x20) = *(uint *)(param_1 + 0x20) & 0xffffdfff | iVar3 << 0xc;": {
                    "1": "configure_device_flags"
                },
                "*(uint *)(param_1 + 0x20)": {
                    "1": "base_address_plus20_value"
                },
                "*(uint *)(param_1 + 4)": {
                    "1": "base_address_plus4_value"
                },
                "*(uint *)(param_1 + 0x1c)": {
                    "1": "base_address_plus1_c_value"
                },
                "*(int *)(param_1 + 0x40)": {
                    "1": "base_address_plus40_value"
                },
                "param1 + 0x20": {
                    "1": "param1_addr_plus0x20"
                },
                "param1 + 4": {
                    "1": "param1_addr_plus4"
                },
                "param1 + 0x1c": {
                    "1": "param1_addr_plus0x1c"
                },
                "param1 + 0x40": {
                    "1": "param1_addr_plus0x40"
                }
            }
        },
        "FUN_08002368": {
            "entrypoint": "0x08002368",
            "current_name": "update_memory_08002368",
            "code": "\nvoid update_memory_08002368(uint *register1,uint *register2)\n\n{\n  uint updated_value;\n  \n  updated_value = *register1;\n  if (((((register1 == (uint *)0x40012c00) || (register1 == (uint *)0x40000000)) ||\n       (register1 == (uint *)0x40000400)) || (register1 == (uint *)0x40000800)) &&\n     (((updated_value = updated_value & 0xffffff8f | new_value_flag, register1 == (uint *)0x40012c00 ||\n       (register1 == (uint *)0x40000000)) ||\n      ((register1 == (uint *)0x40000400 || (register1 == (uint *)0x40000800)))))) {\n    updated_value = updated_value & 0xfffffcff | new_value_flag2;\n  }\n  *register1 = updated_value;\n  register1[11] = new_value2;\n  register1[10] = *register2;\n  updated_value = 0x40012c00;\n  if (register1 == (uint *)0x40012c00) {\n    updated_value = new_value_flag3;\n  }\n  if (register1 == (uint *)0x40012c00) {\n    register1[12] = updated_value;\n  }\n  register1[5] = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002368": "update_memory_08002368",
                "param_1": "register1",
                "param_2": "register2",
                "uVar1": "updated_value",
                "param_2[1]": "new_value_flag",
                "param_2[3]": "new_value_flag2",
                "param_2[2]": "new_value2",
                "param_2[4]": "new_value_flag3",
                "param_1[0xb]": "register1[11]",
                "param_1[10]": "register1[10]",
                "param_1[0xc]": "register1[12]"
            },
            "calling": [
                "FUN_080023d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08002368": {
                    "7": "update_parameters",
                    "4": "update_registers",
                    "1": "update_param_with_values",
                    "2": "update_data"
                },
                "param_1": {
                    "1": "base_address",
                    "2": "memory_address",
                    "3": "param_array1",
                    "4": "register1"
                },
                "param_2": {
                    "2": "data",
                    "1": "new_values",
                    "3": "param_array2",
                    "4": "register2"
                },
                "uVar1": {
                    "1": "updated_register",
                    "23": "updated_value"
                },
                "uVar1 & 0xffffff8f": {
                    "1": "updated_data_flag"
                },
                "param_2[1]": {
                    "1": "new_value_flag"
                },
                "uVar1 & 0xfffffcff": {
                    "1": "updated_data_flag2"
                },
                "param_2[3]": {
                    "1": "new_value_flag2"
                },
                "param_2[2]": {
                    "1": "new_value2"
                },
                "param_2[0]": {
                    "1": "new_value"
                },
                "0x40012c00": {
                    "1": "constant_address_1"
                },
                "param_2[4]": {
                    "1": "new_value_flag3"
                },
                "dataPtr[0xb]": {
                    "1": "data_ptr_11"
                },
                "dataPtr[10]": {
                    "1": "data_ptr_10"
                },
                "dataPtr[0xc]": {
                    "1": "data_ptr_12"
                },
                "0x40000000": {
                    "1": "constant_address_2"
                },
                "0x40000400": {
                    "1": "constant_address_3"
                },
                "0x40000800": {
                    "1": "constant_address_4"
                },
                "*param_1": {
                    "2": "register1_value"
                },
                "*param_2": {
                    "1": "register2_value"
                },
                "param_1[0xb]": {
                    "1": "register1[11]"
                },
                "param_1[10]": {
                    "1": "register1[10]"
                },
                "param_1[0xc]": {
                    "1": "register1[12]"
                }
            }
        },
        "FUN_080023d0": {
            "entrypoint": "0x080023d0",
            "current_name": "initialize_data_080023d0",
            "code": "\nstatus_undefined4 initialize_data_080023d0(status_undefined4 *param)\n\n{\n  if (param != (status_undefined4 *)0x0) {\n    if (*(status_char *)((status_int)param + 0x39) == '\\0') {\n      *(status_undefined *)(param + 0xe) = 0;\n      update_flags;\n    }\n    *(status_undefined *)((status_int)param + 0x39) = 2;\n    update_memory(*param,param + 1);\n    *(status_undefined *)((status_int)param + 0x39) = 1;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_080023d0": "initialize_data_080023d0",
                "param_1": "param",
                "update_flags_08004d8c()": "update_flags",
                "update_flags_08004d8c": "update_flags",
                "update_memory_08002368": "update_memory",
                "char": "status_char",
                "int": "status_int",
                "undefined4": "status_undefined4",
                "undefined": "status_undefined"
            },
            "calling": [
                "FUN_0800458c"
            ],
            "called": [
                "FUN_08004d8c",
                "FUN_08002368"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080023d0": {
                    "1": "update_parameter_value",
                    "2": "update_flags_and_memory",
                    "3": "update_memory_flags",
                    "5": "initialize_data"
                },
                "param_1": {
                    "4": "data_ptr",
                    "2": "input_data",
                    "1": "ptr",
                    "7": "param"
                },
                "*(char *)((int)param_1 + 0x39)": {
                    "10": "flag",
                    "1": "flag_char",
                    "2": "flag_value"
                },
                "*(undefined *)(param_1 + 0xe)": {
                    "5": "flag",
                    "1": "flag_value",
                    "2": "update_value",
                    "3": "status"
                },
                "update_flags_08004d8c()": {
                    "5": "update_flags"
                },
                "*(undefined *)((int)param_1 + 0x39)": {
                    "6": "flag",
                    "1": "flag_value"
                },
                "update_memory_08002368(*param_1,param_1 + 1)": {
                    "3": "update_memory"
                },
                "update_flags_08004d8c": {
                    "1": "update_flags_helper",
                    "23": "update_flags"
                },
                "update_memory_08002368": {
                    "24": "update_memory"
                },
                "return 0": {
                    "2": "return_success"
                },
                "return 1": {
                    "2": "return_failure"
                },
                "*param_1": {
                    "1": "data_value"
                },
                "param_1 + 1": {
                    "1": "next_status_ptr"
                },
                "*(char*)((int)param_1 + 0x39)": {
                    "1": "flag"
                },
                "*(undefined*)(param_1 + 0xe)": {
                    "1": "zero"
                },
                "char_ptr": {
                    "1": "status_flag"
                },
                "byte_ptr": {
                    "1": "memory_flag"
                },
                "0x0": {
                    "1": "null"
                },
                "0x39": {
                    "1": "flag_offset"
                },
                "'\\0'": {
                    "1": "null_char"
                },
                "0xe": {
                    "1": "new_value_offset"
                },
                "2": {
                    "1": "flag_value_2"
                },
                "1": {
                    "1": "failure"
                },
                "0": {
                    "1": "success"
                },
                "char": {
                    "1": "status_char"
                },
                "int": {
                    "1": "status_int"
                },
                "undefined4": {
                    "1": "status_undefined4"
                },
                "undefined": {
                    "1": "status_undefined"
                }
            }
        },
        "FUN_08002404": {
            "entrypoint": "0x08002404",
            "current_name": "update_params_08002404",
            "code": "\nvoid update_params_08002404(int base_address,int *parameters)\n\n{\n  uint updated_value1;\n  uint updated_value2;\n  int param_value;\n  \n  *(uint *)(base_address + 0x20) = *(uint *)(base_address + 0x20) & 0xffffffef;\n  updated_value2 = *(uint *)(base_address + 4);\n  param_value = *parameters;\n  updated_value1 = *(uint *)(base_address + 0x20) & 0xffffffdf | param2_value2 << 4;\n  if (base_address == 0x40012c00) {\n    updated_value1 = (updated_value1 & 0xffffff7f | param2_value3 << 4) & 0xffffffbf;\n    updated_value2 = updated_value2 & 0xfffff3ff | (param2_value5 | param2_value6) << 2;\n  }\n  *(uint *)(base_address + 4) = updated_value2;\n  *(uint *)(base_address + 0x18) = *(uint *)(base_address + 0x18) & 0xffff8cff | param_value << 8;\n  *(int *)(base_address + 0x38) = input_array[1];\n  *(uint *)(base_address + 0x20) = updated_value1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002404": "update_params_08002404",
                "param_1": "base_address",
                "param_2": "parameters",
                "uVar1": "updated_value1",
                "uVar2": "updated_value2",
                "iVar3": "param_value",
                "param_2[1]": "input_array[1]",
                "param_2[2]": "param2_value2",
                "param_2[3]": "param2_value3",
                "param_2[5]": "param2_value5",
                "param_2[6]": "param2_value6"
            },
            "calling": [
                "FUN_0800245c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08002404": {
                    "2": "update_data",
                    "11": "update_params",
                    "1": "update_flags_and_values",
                    "3": "update_param_values",
                    "4": "update_parameters"
                },
                "param_1": {
                    "5": "address",
                    "2": "data_address",
                    "4": "param_address",
                    "1": "param_base_address",
                    "11": "base_address"
                },
                "param_2": {
                    "2": "data_values",
                    "1": "config_data",
                    "4": "params_array",
                    "5": "param_array",
                    "7": "parameters"
                },
                "uVar1": {
                    "2": "modified_flags1",
                    "1": "updated_flags1",
                    "3": "updated_var1",
                    "11": "updated_value1"
                },
                "uVar2": {
                    "1": "flag2",
                    "2": "modified_flags2",
                    "11": "updated_value2",
                    "3": "updated_var2"
                },
                "iVar3": {
                    "1": "updated_value3",
                    "8": "param_value",
                    "2": "parameter_value",
                    "3": "updated_var3"
                },
                "*(uint *)(param_1 + 0x20)": {
                    "1": "config_data_address"
                },
                "*(uint *)(param_1 + 0x18)": {
                    "1": "register3"
                },
                "*(int *)(param_1 + 0x38)": {
                    "1": "register4"
                },
                "*(uint *)(param_1 + 4)": {
                    "1": "register2"
                },
                "uVar1 & 0xffffffef": {
                    "1": "mask1_updated"
                },
                "uVar2 & 0xfffff3ff | (parameters[5] | parameters[6]) << 2": {
                    "1": "modified_param2_updated"
                },
                "param_2[1]": {
                    "1": "param2_index1"
                },
                "param_2[2]": {
                    "1": "param_array[2]"
                },
                "param_2[3]": {
                    "1": "param_array[3]"
                },
                "param_2[5]": {
                    "1": "param2_index5"
                },
                "param_2[6]": {
                    "1": "param2_index6"
                },
                "param_1 + 0x20": {
                    "1": "base_address_offset"
                },
                "param_1 + 0x4": {
                    "1": "address_value2"
                },
                "param_1 == 0x40012c00": {
                    "1": "check_condition"
                },
                "param_1 + 0x18": {
                    "1": "address_value4"
                },
                "iVar3 << 8": {
                    "1": "shifted_param_value"
                },
                "param_1 + 0x38": {
                    "1": "value3_address"
                },
                "*(uint *)(param_1 + 0x38)": {
                    "1": "register4"
                },
                "*(uint *)(param_1 + 0x20) & 0xffffffef": {
                    "1": "masked_register1"
                },
                "*(uint *)(param_1 + 0x20) & 0xffffffdf | param_2[2] << 4": {
                    "1": "updated_register1"
                },
                "uVar1 & 0xffffff7f | param_2[3] << 4": {
                    "1": "updated_value1"
                },
                "uVar1 & 0xffffffbf": {
                    "1": "updated_value1"
                },
                "uVar2 & 0xfffff3ff | (param_2[5] | param_2[6]) << 2": {
                    "1": "updated_value2"
                },
                "*(uint *)(param_1 + 0x18) & 0xffff8cff | iVar3 << 8": {
                    "1": "updated_register3"
                },
                "0x20": {
                    "1": "flags_address"
                },
                "0x18": {
                    "1": "value_address"
                },
                "0x38": {
                    "1": "data_address"
                },
                "param_1 + 4": {
                    "1": "value1_address"
                }
            }
        },
        "FUN_0800245c": {
            "entrypoint": "0x0800245c",
            "current_name": "update_parameters_0800245c",
            "code": "\nvoid update_parameters_0800245c(int *parameters,undefined4 param2,undefined4 param3)\n\n{\n  int temp1;\n  int temp2;\n  int temp3;\n  int temp4;\n  int temp_var1;\n  uint updated_value;\n  int var3;\n  \n  if (*(char *)(parameters + 0xe) == '\\x01') {\n    return;\n  }\n  *(undefined *)((int)parameters + 0x39) = 2;\n  *(undefined *)(parameters + 0xe) = 1;\n  switch(param3) {\n  case 0:\n    update_param_config1(*parameters);\n    var3 = *parameters;\n    updated_value = *(uint *)(temp1 + 0x10);\n    *(uint *)(var3 + 0x18) = *(uint *)(var3 + 0x18) | 8;\n    *(uint *)(var3 + 0x18) = *(uint *)(var3 + 0x18) & 0xfffffffb;\n    updated_value = *(uint *)(var3 + 0x18) | updated_value;\n    break;\n  default:\n    goto switchD_0800247a_caseD_1;\n  case 4:\n    update_param_config4(*parameters);\n    var3 = *parameters;\n    temp_var1 = *(int *)(temp2 + 0x10);\n    *(uint *)(var3 + 0x18) = *(uint *)(var3 + 0x18) | 0x800;\n    *(uint *)(var3 + 0x18) = *(uint *)(var3 + 0x18) & 0xfffffbff;\n    updated_value = *(uint *)(var3 + 0x18) | temp_var1 << 8;\n    break;\n  case 8:\n    update_param_config8(*parameters);\n    var3 = *parameters;\n    updated_value = *(uint *)(temp3 + 0x10);\n    *(uint *)(var3 + 0x1c) = *(uint *)(var3 + 0x1c) | 8;\n    *(uint *)(var3 + 0x1c) = *(uint *)(var3 + 0x1c) & 0xfffffffb;\n    updated_value = *(uint *)(var3 + 0x1c) | updated_value;\n    goto LAB_080024fa;\n  case 0xc:\n    update_param_config12(*parameters);\n    var3 = *parameters;\n    temp_var1 = *(int *)(temp4 + 0x10);\n    *(uint *)(var3 + 0x1c) = *(uint *)(var3 + 0x1c) | 0x800;\n    *(uint *)(var3 + 0x1c) = *(uint *)(var3 + 0x1c) & 0xfffffbff;\n    updated_value = *(uint *)(var3 + 0x1c) | temp_var1 << 8;\nLAB_080024fa:\n    *(uint *)(var3 + 0x1c) = updated_value;\n    goto switchD_0800247a_caseD_1;\n  }\n  *(uint *)(var3 + 0x18) = updated_value;\nswitchD_0800247a_caseD_1:\n  *(undefined *)((int)parameters + 0x39) = 1;\n  *(undefined *)(parameters + 0xe) = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800245c": "update_parameters_0800245c",
                "param_1": "parameters",
                "param_2": "param2",
                "param_3": "param3",
                "extraout_r1": "temp1",
                "extraout_r1_00": "temp2",
                "extraout_r1_01": "temp3",
                "extraout_r1_02": "temp4",
                "iVar1": "temp_var1",
                "uVar2": "updated_value",
                "iVar3": "var3",
                "update_parameters_08002280": "update_param_config1",
                "update_params_08002404": "update_param_config4",
                "update_parameters_080022d0": "update_param_config8",
                "update_parameters_08002324": "update_param_config12"
            },
            "calling": [
                "FUN_0800458c"
            ],
            "called": [
                "FUN_080022d0",
                "FUN_08002280",
                "FUN_08002404",
                "FUN_08002324"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800245c": {
                    "1": "update_flags",
                    "5": "update_params",
                    "15": "update_parameters"
                },
                "param_1": {
                    "1": "param_config",
                    "2": "param_array",
                    "4": "params",
                    "13": "parameters"
                },
                "param_2": {
                    "14": "param2",
                    "1": "param",
                    "2": "param1",
                    "8": "param_2"
                },
                "param_3": {
                    "1": "arg2",
                    "2": "update_type",
                    "14": "param3",
                    "8": "param_3"
                },
                "extraout_r1": {
                    "1": "temp_output1",
                    "2": "extra_output1",
                    "5": "extra_out1",
                    "3": "extraout1"
                },
                "extraout_r1_00": {
                    "2": "var2",
                    "1": "extraout_r1_00",
                    "3": "extraout2",
                    "5": "temp2"
                },
                "extraout_r1_01": {
                    "2": "extra_output3",
                    "1": "extra2",
                    "3": "extraout3",
                    "5": "temp3"
                },
                "extraout_r1_02": {
                    "1": "extra_out_r1_02",
                    "2": "extra_output4",
                    "3": "extraout4",
                    "5": "temp4"
                },
                "iVar1": {
                    "2": "temp5",
                    "1": "i_var",
                    "3": "i_var1",
                    "7": "var1",
                    "9": "temp_var1"
                },
                "uVar2": {
                    "1": "variable8",
                    "5": "updated_var",
                    "8": "updated_value",
                    "2": "result",
                    "6": "var2"
                },
                "iVar3": {
                    "7": "var3",
                    "2": "temp_var3",
                    "1": "variable3",
                    "6": "temp_var2",
                    "3": "i_var3"
                },
                "update_parameters_08002280": {
                    "1": "update_param_config1"
                },
                "update_params_08002404": {
                    "1": "update_parameter_set4"
                },
                "update_parameters_080022d0": {
                    "1": "update_params8"
                },
                "update_parameters_08002324": {
                    "1": "update_param_config12"
                }
            }
        },
        "FUN_08002520": {
            "entrypoint": "0x08002520",
            "current_name": "update_bit_08002520",
            "code": "\nvoid update_bit_08002520(int base_address,unsigned_int bit_position,int new_value)\n\n{\n  *(unsigned_int *)(base_address + 0x20) = *(unsigned_int *)(base_address + 0x20) & ~(1 << (bit_position & 0xff));\n  *(unsigned_int *)(base_address + 0x20) = new_value << (bit_position & 0xff) | *(unsigned_int *)(base_address + 0x20);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002520": "update_bit_08002520",
                "param_1": "base_address",
                "param_2": "bit_position",
                "param_3": "new_value",
                "uint": "unsigned_int"
            },
            "calling": [
                "FUN_08002538"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08002520": {
                    "1": "clear_bit_and_shift",
                    "2": "update_bitwise_value",
                    "10": "update_bit",
                    "3": "update_bit_value"
                },
                "param_1": {
                    "4": "address",
                    "1": "base_addr",
                    "2": "object_address",
                    "19": "base_address"
                },
                "param_2": {
                    "25": "bit_position",
                    "5": "bit_index",
                    "1": "bit_offset"
                },
                "param_3": {
                    "13": "new_value",
                    "7": "bit_value",
                    "1": "new_bit_value"
                },
                "uint": {
                    "1": "unsigned_int"
                },
                "*(uint *)(param_1 + 0x20)": {
                    "1": "bit_mask"
                },
                "(param_2 & 0xff)": {
                    "1": "position_modulus"
                },
                "1 << (param_2 & 0xff)": {
                    "1": "mask"
                },
                "~(1 << (param_2 & 0xff))": {
                    "1": "reset_mask"
                },
                "param_3 << (param_2 & 0xff)": {
                    "1": "new_bit_value"
                },
                "param_1 + 0x20": {
                    "1": "memory_address_with_offset"
                },
                "param_2 & 0xff": {
                    "1": "bit_position_mask"
                },
                "(1 << (param_2 & 0xff))": {
                    "1": "bit_mask"
                }
            }
        },
        "FUN_08002538": {
            "entrypoint": "0x08002538",
            "current_name": "update_and_set_bit_08002538",
            "code": "\nundefined4 update_and_set_bit_08002538(uint **bit_array,undefined4 bit_position)\n\n{\n  uint new_value;\n  uint *ptr;\n  \n  update_bit_08002520(*bit_array,bit_position,1);\n  ptr = *bit_array;\n  new_value = 0x40012c00;\n  if (ptr == (uint *)0x40012c00) {\n    new_value = constant_value | 0x8000;\n  }\n  if (ptr == (uint *)0x40012c00) {\n    ptr[0x11] = new_value;\n  }\n  *ptr = *ptr | 1;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002538": "update_and_set_bit_08002538",
                "param_1": "bit_array",
                "param_2": "bit_position",
                "puVar2": "ptr",
                "uVar1": "new_value",
                "uRam40012c44": "constant_value"
            },
            "calling": [
                "FUN_08003ff4"
            ],
            "called": [
                "FUN_08002520"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08002538": {
                    "1": "update_bit_and_flag",
                    "3": "update_flags",
                    "9": "update_and_set_bit",
                    "2": "set_bit_and_check_value",
                    "4": "update_and_set_flag"
                },
                "param_1": {
                    "1": "ptr_array",
                    "14": "bit_array",
                    "4": "bit_array_ptr"
                },
                "param_2": {
                    "2": "new_value",
                    "1": "value_to_update",
                    "10": "bit_position",
                    "4": "flag_value",
                    "5": "bit_value"
                },
                "*param_1": {
                    "1": "current_value"
                },
                "puVar2": {
                    "1": "bit_array_pointer",
                    "2": "bit_array_ptr",
                    "3": "ptr"
                },
                "uVar1": {
                    "14": "new_value",
                    "1": "flag_value",
                    "10": "updated_value"
                },
                "uRam40012c44": {
                    "1": "special_value",
                    "2": "constant_value"
                }
            }
        },
        "FUN_08002564": {
            "entrypoint": "0x08002564",
            "current_name": "check_and_update_value_08002564",
            "code": "\nundefined4 check_and_update_value_08002564(int *array,uint *values)\n\n{\n  undefined4 return_value;\n  \n  return_value = 2;\n  if (*(char *)(array + 0xe) != '\\x01') {\n    *(undefined *)((int)array + 0x39) = 2;\n    *(uint *)(*array + 0x44) =\n         *values | values[1] | values[2] | values[3] | values[4] | values[5] | values[6];\n    *(undefined *)((int)array + 0x39) = 1;\n    return_value = 0;\n    *(undefined *)(array + 0xe) = 0;\n  }\n  return return_value;\n}\n\n",
            "renaming": {
                "FUN_08002564": "check_and_update_value_08002564",
                "param_1": "array",
                "param_2": "values",
                "uVar1": "return_value"
            },
            "calling": [
                "FUN_0800458c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08002564": {
                    "1": "update_param_data",
                    "3": "initialize_data",
                    "2": "check_and_update_status"
                },
                "param_1": {
                    "2": "data_ptr",
                    "4": "array",
                    "1": "variable1",
                    "3": "data_array"
                },
                "param_2": {
                    "1": "bitmask_array",
                    "10": "values",
                    "4": "data_ptr",
                    "3": "bitwise_array"
                },
                "uVar1": {
                    "15": "return_value",
                    "1": "result_code",
                    "3": "status",
                    "9": "result"
                },
                "*(char *)(param_1 + 0xe)": {
                    "2": "flag",
                    "3": "flag_value"
                },
                "(int)param_1 + 0x39": {
                    "1": "flag_address"
                },
                "*(uint *)(*param_1 + 0x44)": {
                    "1": "updated_checksum"
                },
                "*param_1": {
                    "1": "param_pointer"
                },
                "*(undefined *)((int)param_1 + 0x39)": {
                    "1": "temp_value"
                },
                "*(undefined *)(param_1 + 0xe)": {
                    "1": "flag_value"
                },
                "char_0xe": {
                    "1": "flag"
                },
                "undefined_0x39": {
                    "1": "temp"
                },
                "uint_array_at_offset_0x44": {
                    "1": "data_sum"
                }
            }
        },
        "FUN_080025a4": {
            "entrypoint": "0x080025a4",
            "current_name": "update_permissions_080025a4",
            "code": "\nundefined4 update_permissions_080025a4(int *data,uint *values)\n\n{\n  uint value1;\n  undefined4 result;\n  int ptr;\n  uint value2;\n  \n  result = 2;\n  if (*(char *)(data + 0xe) != '\\x01') {\n    *(undefined *)((int)data + 0x39) = 2;\n    ptr = *data;\n    value2 = *values;\n    value1 = values[1];\n    *(uint *)(ptr + 4) = *(uint *)(ptr + 4) & 0xffffff8f;\n    *(uint *)(ptr + 4) = *(uint *)(ptr + 4) | value2;\n    *(uint *)(ptr + 8) = *(uint *)(ptr + 8) & 0xffffff7f;\n    *(uint *)(ptr + 8) = *(uint *)(ptr + 8) | value1;\n    *(undefined *)((int)data + 0x39) = 1;\n    result = 0;\n    *(undefined *)(data + 0xe) = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080025a4": "update_permissions_080025a4",
                "param_1": "data",
                "param_2": "values",
                "uVar1": "value1",
                "uVar2": "result",
                "iVar3": "ptr",
                "uVar4": "value2"
            },
            "calling": [
                "FUN_0800458c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080025a4": {
                    "1": "update_flags_and_values",
                    "2": "update_flags",
                    "3": "update_configuration",
                    "4": "update_permissions"
                },
                "param_1": {
                    "4": "data",
                    "1": "flag_values",
                    "3": "flags",
                    "2": "memory_ptr"
                },
                "param_2": {
                    "1": "flag_values",
                    "5": "values",
                    "3": "data_ptr",
                    "2": "permissions"
                },
                "uVar1": {
                    "1": "bitmask1",
                    "2": "new_value2",
                    "8": "value1"
                },
                "uVar2": {
                    "2": "return_val",
                    "12": "result",
                    "11": "return_value"
                },
                "iVar3": {
                    "1": "memory_address",
                    "3": "config_value",
                    "6": "ptr",
                    "2": "memory_value"
                },
                "uVar4": {
                    "1": "updated_value1",
                    "2": "new_value1",
                    "6": "value2"
                }
            }
        },
        "FUN_080025e8": {
            "entrypoint": "0x080025e8",
            "current_name": "update_values_080025e8",
            "code": "\nvoid update_values_080025e8(int *values)\n\n{\n  int shifted_value1;\n  int shifted_value2;\n  uint shifted_value3;\n  int calculated_value1;\n  int param1_value;\n  int base_address;\n  \n  base_address = *values;\n  shifted_value3 = values[4];\n  *(uint *)(base_address + 0x10) = *(uint *)(base_address + 0x10) & 0xffffcfff | values[3];\n  *(uint *)(base_address + 0xc) = values[2] | shifted_value3 | values[5] | *(uint *)(base_address + 0xc) & 0xffffe9f3;\n  *(uint *)(base_address + 0x14) = *(uint *)(base_address + 0x14) & 0xfffffcff | values[6];\n  if (base_address == 0x40013800) {\n    shifted_value1 = get_shifted_value_a();\n    calculated_value1 = (int)(((ulonglong)(uint)(shifted_value1 * 0x19) / (ulonglong)(uint)(values[1] << 2)) / 100);\n    shifted_value1 = get_shifted_value_a();\n    param1_value = values[1];\n    shifted_value2 = get_shifted_value_a();\n    shifted_value2 = (uint)(shifted_value1 * 0x19) / (uint)(param1_value << 2) +\n            (int)(((ulonglong)(uint)(shifted_value2 * 0x19) / (ulonglong)(uint)(values[1] << 2)) / 100) *\n            -100;\n    shifted_value1 = get_shifted_value_a();\n    shifted_value3 = (uint)(shifted_value1 * 0x19) / (uint)(values[1] << 2);\n    shifted_value1 = get_shifted_value_a();\n  }\n  else {\n    shifted_value1 = get_shifted_value_b();\n    calculated_value1 = (int)(((ulonglong)(uint)(shifted_value1 * 0x19) / (ulonglong)(uint)(values[1] << 2)) / 100);\n    shifted_value1 = get_shifted_value_b();\n    param1_value = values[1];\n    shifted_value2 = get_shifted_value_b();\n    shifted_value2 = (uint)(shifted_value1 * 0x19) / (uint)(param1_value << 2) +\n            (int)(((ulonglong)(uint)(shifted_value2 * 0x19) / (ulonglong)(uint)(values[1] << 2)) / 100) *\n            -100;\n    shifted_value1 = get_shifted_value_b();\n    shifted_value3 = (uint)(shifted_value1 * 0x19) / (uint)(values[1] << 2);\n    shifted_value1 = get_shifted_value_b();\n  }\n  *(uint *)(base_address + 8) =\n       (((shifted_value3 + (int)(((ulonglong)(uint)(shifted_value1 * 0x19) / (ulonglong)(uint)(values[1] << 2)) / 100\n                       ) * -100) * 0x10 + 0x32) / 100 & 0xf | (shifted_value2 * 0x10 + 0x32U) / 100 & 0xf0) +\n       calculated_value1 * 0x10;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080025e8": "update_values_080025e8",
                "param_1": "values",
                "iVar1": "shifted_value1",
                "iVar2": "shifted_value2",
                "uVar3": "shifted_value3",
                "iVar4": "calculated_value1",
                "iVar5": "param1_value",
                "iVar6": "base_address",
                "get_shifted_value_08002250": "get_shifted_value_a",
                "get_shifted_value_08002220": "get_shifted_value_b"
            },
            "calling": [
                "FUN_08002724"
            ],
            "called": [
                "FUN_08002250",
                "FUN_08002220"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080025e8": {
                    "1": "update_data_fields",
                    "5": "update_configuration",
                    "18": "update_values",
                    "2": "update_data",
                    "4": "update_parameters"
                },
                "param_1": {
                    "4": "data",
                    "1": "config",
                    "2": "input_data",
                    "8": "values",
                    "5": "parameters"
                },
                "iVar1": {
                    "23": "shifted_value1",
                    "7": "value1",
                    "1": "shifted_value"
                },
                "iVar2": {
                    "23": "shifted_value2",
                    "1": "computed_value2",
                    "7": "value2"
                },
                "uVar3": {
                    "19": "shifted_value3",
                    "1": "var2",
                    "7": "value3",
                    "2": "param4_value"
                },
                "iVar4": {
                    "3": "calculation1",
                    "13": "calculated_value1",
                    "4": "shifted_value4",
                    "1": "updated_value1",
                    "2": "value1"
                },
                "iVar5": {
                    "1": "param_multiplier",
                    "2": "input_value1",
                    "3": "shifted_value5",
                    "11": "param1_value"
                },
                "iVar6": {
                    "1": "data_ptr",
                    "20": "base_address",
                    "2": "ptr_value"
                },
                "get_shifted_value_08002250": {
                    "1": "get_shifted_value_a"
                },
                "get_shifted_value_08002220": {
                    "1": "get_shifted_value_b"
                }
            }
        },
        "FUN_08002724": {
            "entrypoint": "0x08002724",
            "current_name": "initialize_memory_08002724",
            "code": "\nundefined4 initialize_memory_08002724(int *data)\n\n{\n  int temp_var;\n  \n  if (data != (int *)0x0) {\n    if (*(char *)((int)data + 0x39) == '\\0') {\n      *(undefined *)(data + 0xe) = 0;\n      update_memory_and_flags;\n    }\n    *(undefined *)((int)data + 0x39) = 2;\n    *(uint *)(*data + 0xc) = *(uint *)(*data + 0xc) & 0xffffdfff;\n    update_values;\n    temp_var = *data;\n    *(uint *)(temp_var + 0x10) = *(uint *)(temp_var + 0x10) & 0xffffb7ff;\n    *(uint *)(temp_var + 0x14) = *(uint *)(temp_var + 0x14) & 0xffffffd5;\n    *(uint *)(temp_var + 0xc) = *(uint *)(temp_var + 0xc) | 0x2000;\n    data_ptr[15] = 0;\n    *(undefined *)((int)data + 0x39) = 1;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08002724": "initialize_memory_08002724",
                "param_1": "data",
                "iVar1": "temp_var",
                "update_memory_and_flags_08004e7c": "update_memory_and_flags",
                "update_values_080025e8": "update_values",
                "param_1[0xf]": "data_ptr[15]",
                "update_memory_and_flags_08004e7c()": "update_memory_and_flags",
                "update_values_080025e8(param_1)": "update_values"
            },
            "calling": [
                "FUN_0800458c"
            ],
            "called": [
                "FUN_08004e7c",
                "FUN_080025e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08002724": {
                    "1": "update_flags",
                    "10": "initialize_memory",
                    "6": "initialize_data",
                    "2": "initialize_memory_and_flags",
                    "4": "update_flags_and_values"
                },
                "param_1": {
                    "6": "data",
                    "1": "memory_array",
                    "2": "param",
                    "3": "data_ptr",
                    "5": "memory_ptr"
                },
                "iVar1": {
                    "2": "memory_address",
                    "1": "memory_value",
                    "6": "temp_var",
                    "3": "ptr"
                },
                "update_memory_and_flags_08004e7c": {
                    "15": "update_memory_and_flags"
                },
                "update_values_080025e8": {
                    "15": "update_values"
                },
                "param_1[0xf]": {
                    "1": "data_ptr[15]"
                },
                "param_1 + 0xe": {
                    "1": "data_element"
                },
                "param_1 + 0x39": {
                    "1": "status_flag"
                },
                "*(param_1 + 0xe)": {
                    "1": "data_element"
                },
                "*param_1": {
                    "1": "data_content"
                },
                "*param_1 + 0xc": {
                    "1": "data_value_1"
                },
                "iVar1 + 0x10": {
                    "1": "temp_value_1"
                },
                "iVar1 + 0x14": {
                    "1": "temp_value_2"
                },
                "*(iVar1 + 0xc)": {
                    "1": "data_value_2"
                },
                "*(param_1 + 0x39)": {
                    "1": "status_flag"
                },
                "*(char *)((int)param_1 + 0x39)": {
                    "3": "flag",
                    "1": "param_status"
                },
                "*(undefined *)(param_1 + 0xe)": {
                    "1": "flag_value"
                },
                "*(uint *)(*param_1 + 0xc)": {
                    "1": "memory_value"
                },
                "update_memory_and_flags_08004e7c()": {
                    "4": "update_memory_and_flags"
                },
                "*(undefined *)((int)param_1 + 0x39)": {
                    "2": "flag_status"
                },
                "*(uint *)(iVar1 + 0x10)": {
                    "1": "data_value_2"
                },
                "*(uint *)(iVar1 + 0x14)": {
                    "1": "data_value_3"
                },
                "*(uint *)(iVar1 + 0xc)": {
                    "1": "value4"
                },
                "update_values_080025e8(param_1)": {
                    "2": "update_values"
                },
                "param_1[0xe]": {
                    "1": "flag_value"
                }
            }
        },
        "FUN_0800290a": {
            "entrypoint": "0x0800290a",
            "current_name": "FUNC_0800290a",
            "code": "\nvoid FUNC_0800290a(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800290a": "FUNC_0800290a"
            },
            "calling": [
                "FUN_0800299a"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800290c": {
            "entrypoint": "0x0800290c",
            "current_name": "process_data_0800290c",
            "code": "\nundefined4 process_data_0800290c(int *data)\n\n{\n  byte byte_value;\n  int var1;\n  uint var2;\n  undefined4 var3;\n  short count;\n  ushort *ushort_ptr;\n  ushort *ptr2;\n  bool is_condition_met;\n  \n  if ((*(byte *)((int)data + 0x39) & 0xef) != 0x22) {\n    return 2;\n  }\n  var1 = *data;\n  ushort_ptr = (ushort *)data[10];\n  if (data[2] == 0x1000) {\n    if (data[4] == 0) {\n      ptr2 = ushort_ptr + 1;\n      *ushort_ptr = (ushort)((uint)(*(int *)(var1 + 4) << 0x17) >> 0x17);\n    }\n    else {\n      ptr2 = (ushort *)((int)ushort_ptr + 1);\n      *ushort_ptr = (ushort)*(int *)(var1 + 4) & 0xff;\n    }\n    data[10] = (int)ptr2;\n  }\n  else {\n    if (data[4] == 0) {\n      byte_value = (byte)*(undefined4 *)(var1 + 4);\n      data[10] = (int)ushort_ptr + 1;\n    }\n    else {\n      var3 = *(undefined4 *)(var1 + 4);\n      data[10] = (int)ushort_ptr + 1;\n      byte_value = (byte)var3 & 0x7f;\n    }\n    *(byte *)ushort_ptr = byte_value;\n  }\n  count = *(short *)((int)data + 0x2e) + -1;\n  *(short *)((int)data + 0x2e) = count;\n  if (count == 0) {\n    var1 = *data;\n    *(uint *)(var1 + 0xc) = *(uint *)(var1 + 0xc) & 0xffffffdf;\n    is_condition_met = *(char *)((int)data + 0x39) != '2';\n    if (is_condition_met) {\n      var2 = *(uint *)(var1 + 0xc) & 0xfffffeff;\n    }\n    else {\n      var1 = 0x12;\n      var2 = 0x32;\n    }\n    if (is_condition_met) {\n      *(uint *)(var1 + 0xc) = var2;\n      var2 = *(uint *)(var1 + 0x14) & 0xfffffffe;\n    }\n    if (is_condition_met) {\n      *(uint *)(var1 + 0x14) = var2;\n      var1 = 1;\n    }\n    *(char *)((int)data + 0x39) = (char)var1;\n    execute_task();\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800290c": "process_data_0800290c",
                "param_1": "data",
                "bVar1": "byte_value",
                "iVar2": "var1",
                "uVar3": "var2",
                "uVar4": "var3",
                "sVar5": "count",
                "puVar6": "ushort_ptr",
                "puVar7": "ptr2",
                "bVar8": "is_condition_met",
                "process_data_08004c30": "execute_task"
            },
            "calling": [
                "FUN_0800299a"
            ],
            "called": [
                "FUN_08004c30"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800290c": {
                    "1": "process_input_data",
                    "25": "process_data",
                    "2": "decode_and_process_data"
                },
                "param_1": {
                    "22": "data",
                    "1": "data_array",
                    "3": "input_data",
                    "2": "input_array"
                },
                "bVar1": {
                    "1": "first_byte",
                    "2": "byte_var",
                    "5": "temp_byte",
                    "17": "byte_value",
                    "3": "byte_val"
                },
                "iVar2": {
                    "1": "array_start",
                    "3": "ptr_data",
                    "6": "ptr"
                },
                "uVar3": {
                    "1": "uint_val",
                    "3": "value",
                    "5": "var2",
                    "2": "updated_value",
                    "4": "result"
                },
                "uVar4": {
                    "5": "temp_value",
                    "1": "temp_ushort",
                    "3": "temp_uint2",
                    "4": "value"
                },
                "sVar5": {
                    "6": "temp_short",
                    "2": "remaining_count",
                    "1": "loop_counter",
                    "3": "var4",
                    "11": "count",
                    "5": "counter"
                },
                "puVar6": {
                    "1": "temp_ushort_ptr",
                    "6": "ushort_ptr",
                    "2": "ptr_array",
                    "4": "ushort_ptr_1",
                    "5": "ptr1"
                },
                "puVar7": {
                    "2": "updated_ushort_pointer",
                    "3": "updated_ushort_ptr",
                    "1": "updated_ptr_to_data",
                    "4": "ushort_ptr2",
                    "5": "ptr2"
                },
                "bVar8": {
                    "2": "bool_var",
                    "1": "condition_check",
                    "5": "is_condition_true",
                    "6": "is_condition_met"
                },
                "process_data_08004c30": {
                    "1": "process_data"
                }
            }
        },
        "FUN_08002998": {
            "entrypoint": "0x08002998",
            "current_name": "FUNC_08002998",
            "code": "\nvoid FUNC_08002998(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002998": "FUNC_08002998"
            },
            "calling": [
                "FUN_0800299a"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800299a": {
            "entrypoint": "0x0800299a",
            "current_name": "process_data_0800299a",
            "code": "\nvoid process_data_0800299a(uint **data)\n\n{\n  uint value1;\n  short counter;\n  uint value2;\n  uint *pointer;\n  undefined flag;\n  uint *data_ptr;\n  uint flag;\n  bool condition;\n  \n  data_ptr = *data;\n  value2 = *data_ptr;\n  value1 = ptr_array[3];\n  if ((value2 & 0xf) == 0) {\n    if (((int)(value2 << 0x1a) < 0) && ((int)(value1 << 0x1a) < 0)) {\n      process_data_0800299a_1();\n      return;\n    }\n  }\n  else {\n    flag = ptr_array[5] & 1;\n    if ((flag != 0) || ((value1 & 0x120) != 0)) {\n      data_ptr = (uint *)(value2 << 0x1f);\n      if ((int)data_ptr < 0) {\n        condition = (int)(value1 << 0x17) < 0;\n        if (condition) {\n          data_ptr = (uint *)((uint)input_data[15] | 1);\n        }\n        if (condition) {\n          input_data[15] = data_ptr;\n        }\n      }\n      if (((int)(value2 << 0x1d) < 0) && (flag != 0)) {\n        input_data[15] = (uint *)((uint)input_data[15] | 2);\n      }\n      if (((int)(value2 << 0x1e) < 0) && (flag != 0)) {\n        input_data[15] = (uint *)((uint)input_data[15] | 4);\n      }\n      if (((int)(value2 << 0x1c) < 0) && (flag != 0)) {\n        input_data[15] = (uint *)((uint)input_data[15] | 8);\n      }\n      if (input_data[15] == (uint *)0x0) {\n        return;\n      }\n      if (((int)(value2 << 0x1a) < 0) && ((int)(value1 << 0x1a) < 0)) {\n        process_data_0800299a_1(data);\n      }\n      data_ptr = *data;\n      if ((-1 < (int)input_data[15] << 0x1c) && ((ptr_array[5] & 0x40) == 0)) {\n        FUNC_08002998(data);\n        input_data[15] = (uint *)0x0;\n        return;\n      }\n      ptr_array[3] = ptr_array[3] & 0xfffffedf;\n      ptr_array[5] = ptr_array[5] & 0xfffffffe;\n      *(undefined *)((int)data + 0x39) = 1;\n      FUNC_08002998(data);\n      return;\n    }\n  }\n  if (((int)(value2 << 0x18) < 0) && ((int)(value1 << 0x18) < 0)) {\n    if ((*(byte *)((int)data + 0x39) & 0xdf) == 0x12) {\n      pointer = param_array[8];\n      if (param_array[2] == (uint *)0x1000) {\n        pointer_2_value_1 = *(ushort *)pointer & 0x1ff;\n        if (param_array[4] == (uint *)0x0) {\n          pointer = (uint *)((int)pointer + 2);\n        }\n        else {\n          pointer = (uint *)((int)pointer + 1);\n        }\n        param_array[8] = pointer;\n      }\n      else {\n        param_array[8] = (uint *)((int)pointer + 1);\n        pointer_2_value_1 = (uint)*(byte *)pointer;\n      }\n      counter = *(short *)((int)data + 0x26) + -1;\n      *(short *)((int)data + 0x26) = counter;\n      if (counter == 0) {\n        ptr_array[3] = ptr_array[3] & 0xffffff7f;\n        ptr_array[3] = ptr_array[3] | 0x40;\n        return;\n      }\n    }\n  }\n  else if (((int)(value2 << 0x19) < 0) && ((int)(value1 << 0x19) < 0)) {\n    ptr_array[3] = ptr_array[3] & 0xffffffbf;\n    if (*(char *)((int)data + 0x39) == '2') {\n      flag = 0x22;\n    }\n    else {\n      flag = 1;\n    }\n    *(undefined *)((int)data + 0x39) = flag;\n    FUNC_0800290a(data);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800299a": "process_data_0800299a",
                "param_1": "data",
                "uVar1": "value1",
                "sVar2": "counter",
                "uVar3": "value2",
                "puVar4": "pointer",
                "uVar5": "flag",
                "puVar6": "data_ptr",
                "uVar7": "flag",
                "bVar8": "condition",
                "process_data_0800290c": "process_data_1",
                "puVar6[1]": "pointer_2_value_1",
                "param_1[2]": "param_array[2]",
                "param_1[4]": "param_array[4]",
                "param_1[8]": "param_array[8]",
                "puVar6[3]": "ptr_array[3]",
                "puVar6[5]": "ptr_array[5]",
                "param_1[0xf]": "input_data[15]"
            },
            "calling": [],
            "called": [
                "FUN_0800290c",
                "FUN_0800290a",
                "FUN_08002998"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800299a": {
                    "4": "process_input",
                    "20": "process_data",
                    "1": "process_data_and_check_flags",
                    "2": "process_input_data"
                },
                "param_1": {
                    "1": "input_array",
                    "15": "data",
                    "2": "param",
                    "5": "input_data"
                },
                "uVar1": {
                    "8": "first_value",
                    "1": "temp_var1",
                    "2": "first_element",
                    "5": "var1",
                    "10": "value1"
                },
                "sVar2": {
                    "7": "count",
                    "1": "processed_value",
                    "16": "counter",
                    "5": "var2"
                },
                "uVar3": {
                    "5": "second_value",
                    "1": "data_var1",
                    "2": "value_2",
                    "10": "value2"
                },
                "puVar4": {
                    "1": "temp_pointer",
                    "4": "temp_ptr",
                    "2": "pointer_1",
                    "5": "pointer",
                    "3": "pointer1"
                },
                "uVar5": {
                    "11": "flag",
                    "1": "undefined_var",
                    "3": "new_value",
                    "5": "var5",
                    "2": "status"
                },
                "puVar6": {
                    "2": "input_ptr",
                    "4": "var6",
                    "1": "data_array",
                    "5": "data_ptr"
                },
                "uVar7": {
                    "12": "flag",
                    "1": "value2",
                    "2": "bit_flag",
                    "5": "var7",
                    "7": "flag2"
                },
                "bVar8": {
                    "1": "flag2",
                    "2": "is_set",
                    "5": "var8",
                    "10": "condition",
                    "3": "is_flag_set"
                },
                "process_data_0800290c": {
                    "1": "process_data_1"
                },
                "FUNC_08002998": {
                    "1": "process_function"
                },
                "FUNC_0800290a": {
                    "1": "process_function_2"
                },
                "puVar6[1]": {
                    "1": "pointer_2_value_1"
                },
                "param_1[2]": {
                    "1": "param_array[2]"
                },
                "param_1[4]": {
                    "1": "param_array[4]"
                },
                "param_1[8]": {
                    "1": "param_array[8]"
                },
                "*(byte *)((int)param_1 + 0x39)": {
                    "1": "byte_value"
                },
                "*(short *)((int)param_1 + 0x26)": {
                    "1": "short_value"
                },
                "*(char *)((int)param_1 + 0x39)": {
                    "1": "char_value"
                },
                "*(undefined *)((int)param_1 + 0x39)": {
                    "1": "value3"
                },
                "process_data_0800290a": {
                    "1": "reverse_data"
                },
                "puVar6[3]": {
                    "1": "ptr_array[3]"
                },
                "puVar6[4]": {
                    "1": "ptr_array[4]"
                },
                "puVar6[5]": {
                    "1": "ptr_array[5]"
                },
                "param_1[0xf]": {
                    "1": "input_data[15]"
                }
            }
        },
        "FUN_08002ad0": {
            "entrypoint": "0x08002ad0",
            "current_name": "FUNC_08002ad0",
            "code": "\nvoid FUNC_08002ad0(void)\n\n{\n  process_and_handle_data_0800407c(0xd0,0x75,\"../Src/MPU9250.c\",0x3b);\n  process_i2c_data_0800403c(0xd0,0x6b,0x80,1);\n  process_i2c_data_0800403c(0xd0,0x6b,1);\n  process_i2c_data_0800403c(0xd0,0x6c,0,1);\n  process_i2c_data_0800403c(0xd0,0x19,0,1);\n  process_i2c_data_0800403c(0xd0,0x1d,3,1);\n  process_i2c_data_0800403c(0xd0,0x1a,3,1);\n  process_i2c_data_0800403c(0xd0,0x1b,0x10,1);\n  process_i2c_data_0800403c(0xd0,0x1c,8,1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ad0": "FUNC_08002ad0"
            },
            "calling": [
                "FUN_08002ea0"
            ],
            "called": [
                "FUN_0800407c",
                "FUN_0800403c"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08002b48": {
            "entrypoint": "0x08002b48",
            "current_name": "initialize_mpu9250_08002b48",
            "code": "\nvoid initialize_mpu9250_08002b48(void)\n\n{\n  undefined4 bit_count;\n  uint input_value;\n  int value2;\n  int value1;\n  undefined4 result1;\n  undefined4 result2;\n  \n  result1 = 0;\n  result2 = input_value & 0xffff0000;\n  process_and_store_data(0xd0,0x3b,&result1,6,\"../Src/MPU9250.c\",0x58);\n  DAT_200002f6 = CONCAT11(result1._2_1_,result1._3_1_);\n  DAT_200002f4 = CONCAT11((undefined)result1,result1._1_1_);\n  DAT_200002f8 = CONCAT11((undefined)result2,result2._1_1_);\n  value1 = (int)DAT_200002f6;\n  value2 = (int)DAT_200002f8;\n  bit_count = count_bits();\n  bit_count = calculate_floating_point(bit_count,0x40800000);\n  DAT_200002d0 = calculate_floating_point(bit_count,0x38000000);\n  bit_count = count_bits(value1);\n  bit_count = calculate_floating_point(bit_count,0x40800000);\n  DAT_200002d4 = calculate_floating_point(bit_count,0x38000000);\n  bit_count = count_bits(value2);\n  bit_count = calculate_floating_point(bit_count,0x40800000);\n  DAT_200002d8 = calculate_floating_point(bit_count,0x38000000);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002b48": "initialize_mpu9250_08002b48",
                "in_r3": "input_value",
                "local_18": "result1",
                "local_14": "result2",
                "iVar3": "value1",
                "iVar2": "value2",
                "uVar1": "bit_count",
                "process_and_store_data_080040e8": "process_and_store_data",
                "count_bits_08000c44": "count_bits",
                "calculate_floating_point_08000cec": "calculate_floating_point"
            },
            "calling": [
                "FUN_08002f28"
            ],
            "called": [
                "FUN_08000cec",
                "FUN_08000c44",
                "FUN_080040e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08002b48": {
                    "5": "calculate_sensor_data",
                    "1": "init_mpu9250",
                    "16": "initialize_mpu9250"
                },
                "in_r3": {
                    "1": "initial_value",
                    "15": "input_value",
                    "5": "sensor_data",
                    "9": "input_data"
                },
                "local_18": {
                    "6": "data1",
                    "1": "sensor_data_part1",
                    "2": "value1",
                    "8": "result1"
                },
                "local_14": {
                    "1": "processed_value2",
                    "6": "data2",
                    "8": "result2",
                    "2": "value2"
                },
                "iVar3": {
                    "1": "bit_count1",
                    "2": "value1"
                },
                "iVar2": {
                    "1": "converted_data_two",
                    "2": "result2_int"
                },
                "uVar1": {
                    "2": "result",
                    "20": "bit_count"
                },
                "DAT_200002f6": {
                    "1": "sensor_data1",
                    "2": "concatenated_value1"
                },
                "DAT_200002f4": {
                    "1": "sensor_data2",
                    "2": "concatenated_value2"
                },
                "DAT_200002f8": {
                    "1": "converted_data_five",
                    "2": "concatenated_value3"
                },
                "DAT_200002d0": {
                    "1": "floating_point_value1",
                    "2": "calculated_float1",
                    "3": "floating_point_result1"
                },
                "DAT_200002d4": {
                    "1": "floating_point_value2",
                    "3": "floating_point_result2",
                    "2": "float_data2"
                },
                "DAT_200002d8": {
                    "2": "float_data3",
                    "1": "floating_point_accuracy3",
                    "3": "floating_point_result3"
                },
                "process_and_store_data_080040e8": {
                    "8": "process_and_store_data"
                },
                "count_bits_08000c44": {
                    "11": "count_bits"
                },
                "calculate_floating_point_08000cec": {
                    "1": "calculate_float",
                    "11": "calculate_floating_point"
                }
            }
        },
        "FUN_08002bf0": {
            "entrypoint": "0x08002bf0",
            "current_name": "initialize_mpu9250_08002bf0",
            "code": "\nvoid initialize_mpu9250_08002bf0(void)\n\n{\n  undefined4 bit_count;\n  int byte2_as_integer;\n  int byte1_as_integer;\n  undefined4 data1;\n  undefined2 data2;\n  \n  data1 = 0;\n  data2 = 0;\n  process_and_store_data(0xd0,0x43,&data1,6,\"../Src/MPU9250.c\",0x7b);\n  DAT_200002c0 = CONCAT11(data1._2_1_,data1._3_1_);\n  DAT_200002be = CONCAT11((undefined)data1,data1._1_1_);\n  DAT_200002c2 = CONCAT11((undefined)data2,data2._1_1_);\n  byte1_as_integer = (int)DAT_200002c0;\n  byte2_as_integer = (int)DAT_200002c2;\n  bit_count = count_bits();\n  bit_count = calculate_floating_point(bit_count,0x447a0000);\n  bit_count = calculate_floating_point(bit_count,0x38000000);\n  DAT_200002c4 = reverse_bits(bit_count,DAT_20000000);\n  bit_count = count_bits(byte1_as_integer);\n  bit_count = calculate_floating_point(bit_count,0x447a0000);\n  bit_count = calculate_floating_point(bit_count,0x38000000);\n  DAT_200002c8 = reverse_bits(bit_count,DAT_20000004);\n  bit_count = count_bits(byte2_as_integer);\n  bit_count = calculate_floating_point(bit_count,0x447a0000);\n  bit_count = calculate_floating_point(bit_count,0x38000000);\n  DAT_200002cc = reverse_bits(bit_count,DAT_20000008);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002bf0": "initialize_mpu9250_08002bf0",
                "local_20": "data1",
                "local_1c": "data2",
                "process_and_store_data_080040e8": "process_and_store_data",
                "count_bits_08000c44": "count_bits",
                "calculate_floating_point_08000cec": "calculate_floating_point",
                "reverse_bits_08000ad8": "reverse_bits",
                "iVar3": "byte1_as_integer",
                "iVar2": "byte2_as_integer",
                "uVar1": "bit_count"
            },
            "calling": [
                "FUN_08002f28"
            ],
            "called": [
                "FUN_08000ad8",
                "FUN_08000cec",
                "FUN_08000c44",
                "FUN_080040e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08002bf0": {
                    "4": "process_sensor_data",
                    "5": "process_data",
                    "7": "process_mpu9250_data",
                    "8": "initialize_mpu9250",
                    "3": "process_and_store_data",
                    "1": "initialize_mpu9250_data"
                },
                "local_20": {
                    "8": "data1",
                    "2": "data_byte1",
                    "1": "first_byte",
                    "3": "data_value1"
                },
                "local_1c": {
                    "2": "data_byte2",
                    "1": "sensor_data2",
                    "8": "data2",
                    "3": "data_value2"
                },
                "process_and_store_data_080040e8": {
                    "1": "process_data",
                    "22": "process_and_store_data"
                },
                "count_bits_08000c44": {
                    "28": "count_bits",
                    "1": "get_bit_count"
                },
                "calculate_floating_point_08000cec": {
                    "29": "calculate_floating_point"
                },
                "reverse_bits_08000ad8": {
                    "29": "reverse_bits"
                },
                "iVar3": {
                    "1": "data1_int"
                },
                "iVar2": {
                    "1": "sensor_data2"
                },
                "uVar1": {
                    "1": "bits_count",
                    "2": "num_bits",
                    "12": "bit_count"
                },
                "DAT_200002c0": {
                    "1": "concatenated_result1"
                },
                "DAT_200002be": {
                    "1": "gyro_data_byte"
                },
                "DAT_200002c2": {
                    "1": "value3"
                },
                "DAT_200002c4": {
                    "1": "accel_data_reverse"
                },
                "DAT_200002c8": {
                    "1": "reversed_result2"
                },
                "DAT_200002cc": {
                    "1": "result3"
                },
                "DAT_20000000": {
                    "1": "data0"
                },
                "DAT_20000004": {
                    "1": "constant2"
                },
                "DAT_20000008": {
                    "1": "constant3"
                }
            }
        },
        "FUN_08002cb0": {
            "entrypoint": "0x08002cb0",
            "current_name": "process_sensor_data_08002cb0",
            "code": "\nvoid process_sensor_data_08002cb0(undefined4 device_address,undefined4 register_address,undefined4 data,uint sensor_data)\n\n{\n  undefined4 bit_count;\n  uint processed_data;\n  \n  processed_data = sensor_data;\n  send_i2c_data(0xd0,0x37,0x22,1,device_address,register_address,data);\n  send_i2c_data(0xd0,0x6a,1);\n  process_and_handle_data(0x18,0,\"../Src/MPU9250.c\",0xad);\n  send_i2c_data(0x18,0xb,1);\n  send_i2c_data(0x18,10,0,1);\n  send_i2c_data(0x18,10,0xf,1);\n  process_and_store_data(0x18,0x10,&processed_data,3,\"../Src/MPU9250.c\",0xb6);\n  bit_count = count_bits((processed_data & 0xff) - 0x80);\n  bit_count = calculate_floating_point(bit_count,0x3b800000);\n  DAT_200002e8 = calculate_float(bit_count,0x3f800000);\n  bit_count = count_bits((processed_data >> 8 & 0xff) - 0x80);\n  bit_count = calculate_floating_point(bit_count,0x3b800000);\n  DAT_200002ec = calculate_float(bit_count,0x3f800000);\n  bit_count = count_bits((processed_data >> 0x10 & 0xff) - 0x80);\n  bit_count = calculate_floating_point(bit_count,0x3b800000);\n  DAT_200002f0 = calculate_float(bit_count,0x3f800000);\n  send_i2c_data(0x18,10,0,1);\n  send_i2c_data(0x18,10,0x16,1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002cb0": "process_sensor_data_08002cb0",
                "param_1": "device_address",
                "param_2": "register_address",
                "param_3": "data",
                "param_4": "sensor_data",
                "uVar1": "bit_count",
                "local_c": "processed_data",
                "process_i2c_data_0800403c": "send_i2c_data",
                "process_and_handle_data_0800407c": "process_and_handle_data",
                "process_and_store_data_080040e8": "process_and_store_data",
                "count_bits_08000c44": "count_bits",
                "calculate_floating_point_08000cec": "calculate_floating_point",
                "calculate_float_08000adc": "calculate_float"
            },
            "calling": [
                "FUN_08002ea0"
            ],
            "called": [
                "FUN_08000adc",
                "FUN_08000cec",
                "FUN_08000c44",
                "FUN_0800407c",
                "FUN_080040e8",
                "FUN_0800403c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08002cb0": {
                    "1": "process_data_and_store_results",
                    "8": "process_sensor_data",
                    "2": "process_i2c_data_and_calculate",
                    "3": "initialize_mpu9250",
                    "5": "process_mpu9250_data",
                    "4": "process_i2c_sensor_data"
                },
                "param_1": {
                    "6": "device_address",
                    "1": "sensor_data1",
                    "2": "data_param_1",
                    "3": "sensor_param_1"
                },
                "param_2": {
                    "1": "accel_y",
                    "6": "register_address",
                    "3": "sensor_param_2",
                    "2": "param2"
                },
                "param_3": {
                    "6": "data",
                    "1": "value",
                    "2": "data_param_3",
                    "3": "sensor_param_3"
                },
                "param_4": {
                    "1": "input_param_4",
                    "6": "data",
                    "7": "sensor_data",
                    "5": "data_length",
                    "2": "sensor_param_4"
                },
                "uVar1": {
                    "2": "bits_count",
                    "15": "bit_count",
                    "1": "count_bits_result"
                },
                "local_c": {
                    "1": "updated_value",
                    "2": "data_copy",
                    "4": "i2c_data",
                    "12": "processed_data"
                },
                "process_i2c_data_0800403c": {
                    "1": "process_i2c_sensor_data",
                    "2": "send_i2_c_data",
                    "5": "send_i2c_data",
                    "4": "process_i2c_data"
                },
                "process_and_handle_data_0800407c": {
                    "3": "handle_data",
                    "1": "process_and_handle_sensor_data",
                    "11": "process_and_handle_data"
                },
                "process_and_store_data_080040e8": {
                    "3": "store_data",
                    "10": "process_and_store_data",
                    "1": "process_and_store_sensor_data"
                },
                "count_bits_08000c44": {
                    "12": "count_bits",
                    "1": "get_bit_count"
                },
                "calculate_floating_point_08000cec": {
                    "1": "convert_to_floating_point",
                    "12": "calculate_floating_point"
                },
                "calculate_float_08000adc": {
                    "14": "calculate_float",
                    "1": "convert_to_float"
                }
            }
        },
        "FUN_08002d88": {
            "entrypoint": "0x08002d88",
            "current_name": "process_and_handle_data_08002d88",
            "code": "\nvoid process_and_handle_data_08002d88(undefined4 data_size,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  int result;\n  undefined4 floating_point_result1;\n  undefined4 floating_point_result2;\n  int int_value;\n  undefined2 value_1;\n  undefined value_2;\n  undefined value_3;\n  undefined value_4;\n  undefined value_5;\n  byte byte_var;\n  undefined temp_var5;\n  \n  temp_var5 = (undefined)((uint)param4 >> 0x18);\n  value_1 = 0;\n  value_2 = 0;\n  value_3 = 0;\n  value_4 = 0;\n  value_5 = 0;\n  byte_var = 0;\n  result = process_and_handle_data_08002d88(0x18,2,\"../Src/MPU9250.c\",0xd7,data_size,param2);\n  if (result << 0x1f < 0) {\n    process_and_store_data(0x18,3,&value_1,7,\"../Src/MPU9250.c\",0xda);\n    floating_point_result2 = DAT_2000001c;\n    if ((int)((uint)byte_var << 0x1c) < 0) {\n      DAT_200013bb = DAT_200013bb + 1;\n    }\n    else {\n      DAT_200002ba = CONCAT11(value_3,value_2);\n      DAT_200002bc = CONCAT11(value_5,value_4);\n      int_value = (int)DAT_200002ba;\n      result = (int)DAT_200002bc;\n      DAT_200002b8 = value_1;\n      floating_point_result1 = count_bits();\n      floating_point_result1 = calculate_floating_point(floating_point_result1,floating_point_result2);\n      floating_point_result1 = calculate_floating_point(floating_point_result1,DAT_200002e8);\n      floating_point_result1 = reverse_bits(floating_point_result1,DAT_20000020);\n      DAT_200002dc = calculate_floating_point(floating_point_result1,DAT_2000002c);\n      floating_point_result1 = count_bits(int_value);\n      floating_point_result1 = calculate_floating_point(floating_point_result1,floating_point_result2);\n      floating_point_result1 = calculate_floating_point(floating_point_result1,DAT_200002ec);\n      floating_point_result1 = reverse_bits(floating_point_result1,DAT_20000024);\n      DAT_200002e0 = calculate_floating_point(floating_point_result1,DAT_20000030);\n      floating_point_result1 = count_bits(result);\n      floating_point_result2 = calculate_floating_point(floating_point_result1,floating_point_result2);\n      floating_point_result2 = calculate_floating_point(floating_point_result2,DAT_200002f0);\n      floating_point_result2 = reverse_bits(floating_point_result2,DAT_20000028);\n      DAT_200002e4 = calculate_floating_point(floating_point_result2,DAT_20000034);\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002d88": "process_and_handle_data_08002d88",
                "param_1": "data_size",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "iVar1": "result",
                "uVar2": "floating_point_result1",
                "uVar3": "floating_point_result2",
                "iVar4": "int_value",
                "local_28": "value_1",
                "uStack_26": "value_2",
                "uStack_25": "value_3",
                "local_24": "value_4",
                "local_23": "value_5",
                "local_22": "byte_var",
                "uStack_21": "temp_var5",
                "count_bits_08000c44": "count_bits",
                "calculate_floating_point_08000cec": "calculate_floating_point",
                "reverse_bits_08000ad8": "reverse_bits",
                "process_and_handle_data_0800407c": "process_and_handle_data",
                "process_and_store_data_080040e8": "process_and_store_data"
            },
            "calling": [
                "FUN_08002f28"
            ],
            "called": [
                "FUN_08000cec",
                "FUN_08000ad8",
                "FUN_08000c44",
                "FUN_0800407c",
                "FUN_080040e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08002d88": {
                    "2": "process_data",
                    "6": "process_mpu9250_data",
                    "7": "process_and_handle_data",
                    "1": "handle_sensor_data",
                    "5": "process_mpu_data"
                },
                "param_1": {
                    "3": "sensor_data_1",
                    "1": "data_1",
                    "6": "param1",
                    "2": "arg1"
                },
                "param_2": {
                    "6": "param2",
                    "4": "data_type",
                    "3": "sensor_data_2",
                    "1": "input_2",
                    "2": "arg2"
                },
                "param_3": {
                    "1": "input3",
                    "3": "data_param_3",
                    "6": "param3",
                    "4": "file_path",
                    "2": "file"
                },
                "param_4": {
                    "1": "input4",
                    "6": "param4",
                    "3": "data_param_4",
                    "2": "param"
                },
                "iVar1": {
                    "1": "integer_var2",
                    "2": "result_1",
                    "23": "result"
                },
                "uVar2": {
                    "2": "result_2",
                    "3": "floating_point_value1",
                    "1": "float_result"
                },
                "uVar3": {
                    "1": "temp_variable",
                    "2": "floating_point2",
                    "4": "floating_point_result2",
                    "3": "floating_point_value2"
                },
                "iVar4": {
                    "2": "result_4",
                    "5": "int_value",
                    "1": "result4",
                    "3": "int_var"
                },
                "local_28": {
                    "2": "var1",
                    "1": "result",
                    "3": "value_1"
                },
                "uStack_26": {
                    "2": "value_2",
                    "1": "temp1"
                },
                "uStack_25": {
                    "1": "partial_value_2",
                    "2": "upper_byte"
                },
                "local_24": {
                    "1": "data_var_2",
                    "2": "byte3"
                },
                "local_23": {
                    "1": "temp4",
                    "2": "byte4"
                },
                "local_22": {
                    "1": "temp_var6",
                    "2": "byte5",
                    "3": "byte_value",
                    "7": "byte_var"
                },
                "uStack_21": {
                    "1": "partial_value_5"
                },
                "DAT_2000001c": {
                    "4": "data1",
                    "1": "constant_value_1",
                    "2": "constant1"
                },
                "DAT_200013bb": {
                    "1": "data_value_2",
                    "6": "counter"
                },
                "DAT_200002ba": {
                    "1": "first_byte",
                    "2": "byte1"
                },
                "DAT_200002bc": {
                    "1": "float_value_2",
                    "2": "byte2"
                },
                "DAT_200002b8": {
                    "1": "flag_value"
                },
                "DAT_200002e8": {
                    "3": "data2",
                    "1": "constant_value_3",
                    "2": "constant2"
                },
                "DAT_20000020": {
                    "1": "bit_reverse_value_1",
                    "2": "bit_pattern1"
                },
                "DAT_200002dc": {
                    "1": "global_var5"
                },
                "DAT_2000002c": {
                    "1": "constant4",
                    "2": "data4"
                },
                "DAT_200002ec": {
                    "1": "constant_4"
                },
                "DAT_20000024": {
                    "1": "constant_5",
                    "2": "bit_pattern2"
                },
                "DAT_200002e0": {
                    "1": "float_data3"
                },
                "DAT_20000030": {
                    "1": "data7",
                    "2": "data5"
                },
                "DAT_200002f0": {
                    "1": "constant8"
                },
                "DAT_20000028": {
                    "1": "bit_mask3",
                    "2": "bit_pattern3"
                },
                "DAT_200002e4": {
                    "1": "floating_point_var_5"
                },
                "count_bits_08000c44": {
                    "2": "count_bits"
                },
                "calculate_floating_point_08000cec": {
                    "2": "calculate_floating_point"
                },
                "reverse_bits_08000ad8": {
                    "2": "reverse_bits"
                },
                "process_and_handle_data_0800407c": {
                    "1": "process_and_handle_data"
                },
                "process_and_store_data_080040e8": {
                    "1": "process_and_store_data"
                },
                "DAT_20000034": {
                    "1": "data6"
                }
            }
        },
        "FUN_08002ea0": {
            "entrypoint": "0x08002ea0",
            "current_name": "process_sensor_data_08002ea0",
            "code": "\nvoid process_sensor_data_08002ea0(undefined4 arg1,undefined4 arg2,undefined4 arg3,undefined4 arg4)\n\n{\n  undefined4 return_value;\n  \n  FUNC_08002ad0();\n  process_sensor_data_08002ea0();\n  set_sensor_threshold(0x3f19999a);\n  set_global_variable(0,return_value,arg3,arg4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ea0": "process_sensor_data_08002ea0",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arg3",
                "param_4": "arg4",
                "extraout_r1": "return_value",
                "process_sensor_data_08002cb0": "process_sensor_data",
                "set_global_variable_08003314": "set_sensor_threshold",
                "set_global_variable_08003320": "set_global_variable"
            },
            "calling": [
                "FUN_08004194"
            ],
            "called": [
                "FUN_08003314",
                "FUN_08002cb0",
                "FUN_08003320",
                "FUN_08002ad0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08002ea0": {
                    "1": "initialize_sensors",
                    "11": "process_sensor_data",
                    "9": "process_and_set_sensor_data",
                    "2": "initialize_sensor",
                    "5": "initialize_sensor_data"
                },
                "param_1": {
                    "2": "unused",
                    "11": "arg1",
                    "1": "first_param",
                    "6": "unused_param",
                    "5": "unused_param_1"
                },
                "param_2": {
                    "5": "unused_param",
                    "1": "second_param",
                    "2": "param_2",
                    "11": "arg2"
                },
                "param_3": {
                    "1": "third_param",
                    "5": "unused_param_3",
                    "4": "unused_param",
                    "2": "param_3",
                    "9": "arg3"
                },
                "param_4": {
                    "1": "unknown_param_4",
                    "2": "param_4",
                    "5": "unused_param",
                    "9": "arg4"
                },
                "extraout_r1": {
                    "1": "out_param",
                    "5": "return_value",
                    "2": "temp_var",
                    "3": "result"
                },
                "FUNC_08002ad0": {
                    "7": "initialize_system",
                    "1": "initialize_sensors"
                },
                "process_sensor_data_08002cb0": {
                    "1": "process_sensors",
                    "18": "process_sensor_data"
                },
                "set_global_variable_08003314": {
                    "1": "set_initial_sensor_value",
                    "3": "set_threshold",
                    "8": "set_sensor_threshold"
                },
                "set_global_variable_08003320": {
                    "1": "set_system_variable_2",
                    "2": "configure_sensor",
                    "3": "set_global_variable"
                },
                "0x3f19999a": {
                    "2": "threshold_value"
                }
            }
        },
        "FUN_08002ec0": {
            "entrypoint": "0x08002ec0",
            "current_name": "calculate_float_08002ec0",
            "code": "\nvoid calculate_float_08002ec0(void)\n\n{\n  undefined4 input_value;\n  undefined4 constant1;\n  undefined4 constant2;\n  \n  constant1 = DAT_2000024c;\n  constant2 = DAT_20000010;\n  input_value = reverse_bits(0x3f800000,DAT_20000010);\n  constant1 = calculate_float_08002ec0ing_point(input_value,constant1);\n  constant2 = calculate_float_08002ec0ing_point(constant2,DAT_2000000c);\n  DAT_2000000c = calculate_float_08002ec0(constant2,constant1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ec0": "calculate_float_08002ec0",
                "uVar1": "input_value",
                "uVar2": "constant1",
                "uVar3": "constant2",
                "reverse_bits_08000ad8": "reverse_bits",
                "calculate_floating_point_08000cec": "calculate_floating_point",
                "calculate_float_08000adc": "calculate_float"
            },
            "calling": [
                "FUN_08004a84",
                "FUN_08002f28"
            ],
            "called": [
                "FUN_08000adc",
                "FUN_08000ad8",
                "FUN_08000cec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08002ec0": {
                    "1": "calculate_float_product",
                    "2": "calculate_floats",
                    "4": "calculate_float_value",
                    "14": "calculate_float",
                    "3": "calculate_result"
                },
                "uVar1": {
                    "1": "reversed_float",
                    "9": "input_value",
                    "2": "normalized_value",
                    "3": "input_float",
                    "5": "input1"
                },
                "uVar2": {
                    "1": "original_float",
                    "4": "input2",
                    "5": "constant1",
                    "3": "constant_value",
                    "2": "constant_float"
                },
                "uVar3": {
                    "2": "data_value",
                    "1": "current_value",
                    "3": "initial_value",
                    "4": "input3",
                    "5": "constant2"
                },
                "reverse_bits_08000ad8": {
                    "3": "reverse_bits"
                },
                "calculate_floating_point_08000cec": {
                    "1": "calculate_float_operation",
                    "2": "calculate_floating_point"
                },
                "calculate_float_08000adc": {
                    "1": "calculate_float"
                },
                "DAT_2000024c": {
                    "1": "constant3"
                },
                "DAT_20000010": {
                    "1": "constant4"
                },
                "DAT_2000000c": {
                    "1": "result"
                }
            }
        },
        "FUN_08002ed4": {
            "entrypoint": "0x08002ed4",
            "current_name": "calculate_result_08002ed4",
            "code": "\nvoid calculate_result_08002ed4(void)\n\n{\n  undefined4 result1;\n  undefined4 constant1;\n  undefined4 constant2;\n  \n  constant1 = DAT_20000248;\n  constant2 = value1;\n  result1 = FUN_08000ad8(0x3f800000,value1);\n  constant1 = FUN_08000cec(result1,constant1);\n  constant2 = FUN_08000cec(constant2,input_value2);\n  input_value2 = FUN_08000adc(constant2,constant1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ed4": "calculate_result_08002ed4",
                "uVar1": "result1",
                "uVar2": "constant1",
                "uVar3": "constant2",
                "uRam20000018": "value1",
                "uRam20000014": "input_value2"
            },
            "calling": [
                "FUN_08004a84",
                "FUN_08002f28"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08002ed4": {
                    "1": "calculate_ram_value",
                    "4": "calculate_new_value",
                    "3": "calculate_and_store_result",
                    "10": "calculate_result"
                },
                "uVar1": {
                    "1": "input1",
                    "19": "result1",
                    "5": "result"
                },
                "uVar2": {
                    "1": "input1",
                    "10": "constant1",
                    "5": "initial_value",
                    "6": "constant",
                    "4": "constant_value"
                },
                "uVar3": {
                    "1": "current_value",
                    "2": "original_value",
                    "3": "memory_value",
                    "10": "constant2"
                },
                "FUN_08000ad8": {
                    "3": "calculate_value",
                    "1": "calculate_value1"
                },
                "uRam20000018": {
                    "1": "input1",
                    "3": "value1",
                    "2": "input_value1"
                },
                "FUN_08000cec": {
                    "1": "calculate_value2",
                    "2": "add_values",
                    "3": "perform_operation"
                },
                "uRam20000014": {
                    "1": "result",
                    "2": "value2"
                },
                "FUN_08000adc": {
                    "1": "perform_operation"
                },
                "0x3f800000": {
                    "1": "constant"
                },
                "DAT_20000248": {
                    "1": "constant_value"
                }
            }
        },
        "FUN_08002ee8": {
            "entrypoint": "0x08002ee8",
            "current_name": "process_data_08002ee8",
            "code": "\nvoid process_data_08002ee8(void)\n\n{\n  undefined4 data_value;\n  int concatenation_result;\n  \n  data_value = DAT_20000250;\n  concatenation_result = check_concatenation_result(DAT_20000250,0xc3340000);\n  if ((concatenation_result != 0) && (concatenation_result = check_concatenated_parameters(data_value,0x42b40000), concatenation_result != 0)) {\n    calculate_float(data_value,0x42b40000);\n    return;\n  }\n  reverse_bits(data_value,0x43870000);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ee8": "process_data_08002ee8",
                "uVar1": "data_value",
                "iVar2": "concatenation_result",
                "check_concatenation_result_08001050": "check_concatenation_result",
                "check_if_concatenated_parameters_are_empty_08001028": "check_concatenated_parameters",
                "calculate_float_08000adc": "calculate_float",
                "reverse_bits_08000ad8": "reverse_bits"
            },
            "calling": [
                "FUN_08004a84",
                "FUN_08002f28"
            ],
            "called": [
                "FUN_08000adc",
                "FUN_08001050",
                "FUN_08000ad8",
                "FUN_08001028"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08002ee8": {
                    "3": "concatenation_check",
                    "15": "process_data",
                    "1": "calculate_or_reverse_bits",
                    "5": "process_concatenation"
                },
                "uVar1": {
                    "5": "original_value",
                    "1": "parameter",
                    "2": "value",
                    "7": "data_value"
                },
                "iVar2": {
                    "11": "result",
                    "1": "concat_check_result",
                    "12": "concatenation_result",
                    "2": "concatenation_check_result",
                    "3": "concat_result"
                },
                "check_concatenation_result_08001050": {
                    "1": "concatenation_result_check",
                    "19": "check_concatenation_result",
                    "2": "check_result"
                },
                "check_if_concatenated_parameters_are_empty_08001028": {
                    "2": "check_if_parameters_are_empty",
                    "3": "check_if_parameters_empty",
                    "1": "check_empty_parameters",
                    "5": "check_concatenated_parameters"
                },
                "calculate_float_08000adc": {
                    "1": "float_calculation",
                    "16": "calculate_float",
                    "4": "perform_float_calculation"
                },
                "reverse_bits_08000ad8": {
                    "1": "bit_reversal",
                    "21": "reverse_bits"
                }
            }
        },
        "FUN_08002f28": {
            "entrypoint": "0x08002f28",
            "current_name": "initialize_and_process_data_08002f28",
            "code": "\n\n\nvoid initialize_and_process_data_08002f28(void)\n\n{\n  undefined4 result;\n  \n  initialize_mpu9250();\n  configure_mpu9250();\n  process_and_handle_data();\n  DAT_20000258 = get_data_value();\n  result = calculate_value(DAT_20000258 - DAT_20000254);\n  calculate_float(result,0x447a0000);\n  set_global_variable();\n  DAT_20000254 = DAT_20000258;\n  process_data(DAT_200002d4 + -0x80000000,DAT_200002d0 + -0x80000000,DAT_200002d8,DAT_200002c8,\n               DAT_200002c4,DAT_200002cc + -0x80000000,DAT_200002dc,DAT_200002e0,DAT_200002e4,\n               &DAT_20000248);\n  _DAT_2000142a = (undefined2)((uint)(int)DAT_200002f4 / 100);\n  _DAT_2000142e = (undefined2)((uint)(int)DAT_200002f8 / 100);\n  DAT_2000142c = (undefined2)((uint)(int)DAT_200002f6 / 100);\n  DAT_20001430 = DAT_200002be;\n  _DAT_20001432 = DAT_200002c0;\n  DAT_20001434 = DAT_200002c2;\n  _DAT_20001436 = DAT_200002b8;\n  DAT_20001438 = DAT_200002ba;\n  DAT_2000143a = DAT_200002bc;\n  result = calculate_result();\n  calculate_floating_point(result,0x41200000);\n  DAT_20001395._0_2_ = extract_significant_bits();\n  result = calculate_float();\n  calculate_floating_point(result,0x41200000);\n  DAT_20001395._2_2_ = extract_significant_bits();\n  process_data();\n  DAT_20001399 = extract_significant_bits();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002f28": "initialize_and_process_data_08002f28",
                "initialize_mpu9250_08002b48": "initialize_mpu9250",
                "initialize_mpu9250_08002bf0": "configure_mpu9250",
                "process_and_handle_data_08002d88": "process_and_handle_data",
                "thunk_get_data_value_0800115c": "get_data_value",
                "calculate_value_08000c3c": "calculate_value",
                "calculate_float_08000e54": "calculate_float",
                "set_global_variable_08003320": "set_global_variable",
                "process_data_08003330": "process_data",
                "calculate_result_08002ed4": "calculate_result",
                "calculate_floating_point_08000cec": "calculate_floating_point",
                "extract_significant_bits_08001078": "extract_significant_bits",
                "calculate_float_08002ec0": "calculate_float",
                "process_data_08002ee8": "process_data",
                "uVar1": "result"
            },
            "calling": [
                "FUN_0800411c"
            ],
            "called": [
                "thunk_FUN_0800115c",
                "FUN_08002b48",
                "FUN_08002d88",
                "FUN_08000c3c",
                "FUN_08002bf0",
                "FUN_08001078",
                "FUN_08002ee8",
                "FUN_08000cec",
                "FUN_08003320",
                "FUN_08002ec0",
                "FUN_08003330",
                "FUN_08000e54",
                "FUN_08002ed4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08002f28": {
                    "2": "initialize_and_process_sensor_data",
                    "9": "process_sensor_data",
                    "1": "initialize_sensors",
                    "13": "initialize_and_process_data",
                    "3": "initialize_sensor_data"
                },
                "initialize_mpu9250_08002b48": {
                    "4": "initialize_accelerometer",
                    "1": "initialize_mpu9250_1",
                    "22": "initialize_mpu9250"
                },
                "initialize_mpu9250_08002bf0": {
                    "1": "initialize_mpu9250_interrupts",
                    "3": "initialize_mpu9250_2",
                    "7": "initialize_mpu9250",
                    "10": "configure_mpu9250",
                    "4": "initialize_gyroscope"
                },
                "process_and_handle_data_08002d88": {
                    "5": "process_and_handle_sensor_data",
                    "3": "process_sensor_data",
                    "21": "process_and_handle_data"
                },
                "thunk_get_data_value_0800115c": {
                    "1": "get_sensor_value",
                    "2": "get_previous_data_value",
                    "24": "get_data_value"
                },
                "calculate_value_08000c3c": {
                    "21": "calculate_value",
                    "1": "calculate_value_difference",
                    "2": "calculate_difference",
                    "5": "calculate_offset"
                },
                "calculate_float_08000e54": {
                    "5": "calculate_float_value",
                    "21": "calculate_float",
                    "3": "calculate_result"
                },
                "set_global_variable_08003320": {
                    "1": "set_global_values",
                    "25": "set_global_variable"
                },
                "process_data_08003330": {
                    "1": "process_data2",
                    "2": "process_sensor_data",
                    "27": "process_data"
                },
                "calculate_result_08002ed4": {
                    "29": "calculate_result"
                },
                "calculate_floating_point_08000cec": {
                    "29": "calculate_floating_point"
                },
                "extract_significant_bits_08001078": {
                    "30": "extract_significant_bits"
                },
                "calculate_float_08002ec0": {
                    "7": "calculate_float2",
                    "16": "calculate_float",
                    "2": "calculate_result",
                    "1": "calculate_float_value_2"
                },
                "process_data_08002ee8": {
                    "1": "process_data3",
                    "18": "process_data",
                    "7": "process_data2",
                    "2": "process_final_data"
                },
                "uVar1": {
                    "1": "result_value",
                    "4": "result"
                },
                "_DAT_2000142a": {
                    "1": "converted_data1",
                    "3": "result1"
                },
                "_DAT_2000142e": {
                    "1": "var2",
                    "3": "result2"
                },
                "DAT_2000142c": {
                    "1": "temperature_value",
                    "3": "result3"
                },
                "DAT_20001430": {
                    "2": "data1",
                    "1": "data_value1"
                },
                "_DAT_20001432": {
                    "2": "data2",
                    "1": "value2"
                },
                "DAT_20001434": {
                    "2": "data3",
                    "1": "value3"
                },
                "_DAT_20001436": {
                    "1": "value4",
                    "2": "data4"
                },
                "DAT_20001438": {
                    "1": "variable_5",
                    "2": "data5"
                },
                "DAT_2000143a": {
                    "1": "sensor_value_6",
                    "2": "data6"
                },
                "DAT_20001399": {
                    "1": "significant_bits",
                    "2": "significant_bits3"
                },
                "DAT_20001395._0_2_": {
                    "1": "result4"
                },
                "DAT_20001395._2_2_": {
                    "1": "significant_bits_2"
                },
                "FUN_08002F28": {
                    "1": "initialize_and_process_data"
                },
                "initialize_mpu9250_08002B48": {
                    "1": "initialize_mpu9250"
                },
                "initialize_mpu9250_08002BF0": {
                    "1": "initialize_mpu9250"
                },
                "process_and_handle_data_08002D88": {
                    "1": "process_and_handle_data"
                },
                "thunk_get_data_value_0800115C": {
                    "1": "get_data_value"
                },
                "calculate_value_08000C3C": {
                    "1": "calculate_value"
                },
                "calculate_float_08000E54": {
                    "1": "calculate_float"
                },
                "_DAT_2000142A": {
                    "1": "result_div100_1"
                },
                "_DAT_2000142E": {
                    "1": "result_div100_2"
                },
                "DAT_2000142C": {
                    "1": "result_div100_3"
                },
                "DAT_2000143A": {
                    "1": "unknown_c"
                },
                "calculate_result_08002ED4": {
                    "1": "calculate_result"
                },
                "calculate_floating_point_08000CEC": {
                    "1": "calculate_floating_point"
                },
                "calculate_float_08002EC0": {
                    "1": "calculate_float"
                },
                "process_data_08002EE8": {
                    "1": "process_data"
                },
                "DAT_20000258": {
                    "1": "previous_data_value"
                },
                "DAT_20000254": {
                    "1": "current_data_value"
                },
                "DAT_200002d4": {
                    "1": "param1"
                },
                "DAT_200002d0": {
                    "1": "param2"
                },
                "DAT_200002d8": {
                    "1": "param3"
                },
                "DAT_200002c8": {
                    "1": "param4"
                },
                "DAT_200002c4": {
                    "1": "param5"
                },
                "DAT_200002cc": {
                    "1": "param6"
                },
                "DAT_200002dc": {
                    "1": "param7"
                },
                "DAT_200002e0": {
                    "1": "param8"
                },
                "DAT_200002e4": {
                    "1": "param9"
                },
                "DAT_20000248": {
                    "1": "param10"
                },
                "DAT_200002f4": {
                    "1": "value1"
                },
                "DAT_200002f8": {
                    "1": "value2"
                },
                "DAT_200002f6": {
                    "1": "value3"
                },
                "DAT_200002be": {
                    "1": "value4"
                },
                "DAT_200002c0": {
                    "1": "value5"
                },
                "DAT_200002c2": {
                    "1": "value6"
                },
                "DAT_200002b8": {
                    "1": "value7"
                },
                "DAT_200002ba": {
                    "1": "value8"
                },
                "DAT_200002bc": {
                    "1": "value9"
                },
                "DAT_20001395": {
                    "1": "significant_bits1"
                },
                "DAT_20000228": {
                    "1": "significant_bits2"
                }
            }
        },
        "FUN_08003034": {
            "entrypoint": "0x08003034",
            "current_name": "process_and_convert_data_08003034",
            "code": "\nuint process_and_convert_data_08003034(undefined4 input_param_1,undefined4 input_param_2,undefined4 input_param_3,undefined4 input_param_4)\n\n{\n  undefined4 converted_data;\n  \n  converted_data = input_param_4;\n  process_data(0xee,0,&converted_data,3,\"../Src/MS5611.c\",0x8c,input_param_3);\n  return (uint)CONCAT12((undefined)converted_data,CONCAT11(converted_data._1_1_,converted_data._2_1_));\n}\n\n",
            "renaming": {
                "FUN_08003034": "process_and_convert_data_08003034",
                "param_1": "input_param_1",
                "param_2": "input_param_2",
                "param_3": "input_param_3",
                "param_4": "input_param_4",
                "local_c": "converted_data",
                "process_data_080040b8": "process_data"
            },
            "calling": [
                "FUN_0800411c"
            ],
            "called": [
                "FUN_080040b8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08003034": {
                    "1": "decode_and_combine_values",
                    "2": "process_data",
                    "3": "process_and_concatenate_data",
                    "11": "process_and_convert_data"
                },
                "param_1": {
                    "1": "param1",
                    "2": "input_param",
                    "3": "input_param1",
                    "4": "arg1",
                    "5": "input_param_1"
                },
                "param_2": {
                    "1": "value2",
                    "2": "value_2",
                    "3": "input_param2",
                    "5": "input_param_2",
                    "4": "arg2"
                },
                "param_3": {
                    "1": "var_3",
                    "2": "value_3",
                    "5": "input_param_3",
                    "3": "input_param3",
                    "4": "arg3"
                },
                "param_4": {
                    "1": "input4",
                    "2": "input_parameter4",
                    "3": "input_param4",
                    "4": "arg4",
                    "5": "input_param_4"
                },
                "local_c": {
                    "2": "processed_data",
                    "10": "converted_data",
                    "4": "converted_value",
                    "1": "result",
                    "5": "concatenated_data",
                    "3": "combined_data"
                },
                "process_data_080040b8": {
                    "1": "process_data"
                }
            }
        },
        "FUN_08003068": {
            "entrypoint": "0x08003068",
            "current_name": "get_data_value_08003068",
            "code": "\nundefined4 get_data_value_08003068(void)\n\n{\n  return DAT_200002fc;\n}\n\n",
            "renaming": {
                "FUN_08003068": "get_data_value_08003068"
            },
            "calling": [
                "FUN_08004a30"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08003068": {
                    "2": "get_dat_value",
                    "12": "get_data",
                    "3": "get_global_variable",
                    "14": "get_data_value"
                },
                "DAT_200002fc": {
                    "9": "data",
                    "2": "result",
                    "1": "data_value"
                }
            }
        },
        "FUN_08003298": {
            "entrypoint": "0x08003298",
            "current_name": "initialize_sensor_data_08003298",
            "code": "\nvoid initialize_sensor_data_08003298(void)\n\n{\n  int index;\n  undefined first_byte;\n  undefined second_byte;\n  \n  index = 0;\n  process_i2_c_data(0xee,0x1e,1);\n  thunk_FUNC_08001168(10);\n  DAT_20000038 = 8;\n  do {\n    first_byte = 0;\n    second_byte = 0;\n    process_and_store_data(0xee,index + 0xa0U & 0xffff,&first_byte,2,\"../Src/MS5611.c\",0x7c);\n    *(ushort *)((int)&DAT_2000025c + index) = CONCAT11(first_byte,second_byte);\n    index = index + 2;\n  } while (index != 0x10);\n  index = 0;\n  do {\n    (&DAT_20000300)[index] = 0;\n    index = index + 1;\n  } while (index != 0x14);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003298": "initialize_sensor_data_08003298",
                "iVar1": "index",
                "local_1c": "first_byte",
                "local_1b": "second_byte",
                "process_i2c_data_0800403c": "process_i2_c_data",
                "process_and_store_data_080040e8": "process_and_store_data"
            },
            "calling": [
                "FUN_08004194"
            ],
            "called": [
                "FUN_080040e8",
                "thunk_FUN_08001168",
                "FUN_0800403c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08003298": {
                    "1": "process_and_store_ms5611_data",
                    "14": "initialize_sensor_data",
                    "2": "initialize_ms5611_sensor",
                    "8": "initialize_sensor"
                },
                "iVar1": {
                    "2": "iteration_index",
                    "1": "iteration_counter",
                    "7": "counter",
                    "12": "index"
                },
                "local_1c": {
                    "3": "high_byte",
                    "1": "upper_byte",
                    "4": "byte1",
                    "7": "first_byte",
                    "6": "data_byte1"
                },
                "local_1b": {
                    "6": "data_byte2",
                    "3": "data2",
                    "1": "value2",
                    "4": "byte2",
                    "7": "second_byte"
                },
                "process_i2c_data_0800403c": {
                    "1": "send_start_signal",
                    "4": "process_i2_c_data",
                    "2": "send_i2_c_data"
                },
                "thunk_FUNC_08001168": {
                    "2": "delay_execution",
                    "1": "perform_initialization"
                },
                "process_and_store_data_080040e8": {
                    "1": "store_sensor_data",
                    "5": "process_and_store_data"
                },
                "DAT_20000038": {
                    "1": "sensor_count"
                },
                "DAT_2000025c": {
                    "1": "sensor_data_array"
                },
                "DAT_20000300": {
                    "1": "stored_data"
                },
                "&DAT_2000025c": {
                    "1": "sensor_data"
                },
                "iVar1 + 0xa0U & 0xffff": {
                    "1": "calculated_address"
                },
                "&DAT_20000300": {
                    "1": "result_array"
                }
            }
        },
        "FUN_08003314": {
            "entrypoint": "0x08003314",
            "current_name": "set_global_variable_08003314",
            "code": "\nvoid set_global_variable_08003314(undefined4 value)\n\n{\n  DAT_2000035c = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003314": "set_global_variable_08003314",
                "param_1": "value"
            },
            "calling": [
                "FUN_08002ea0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08003314": {
                    "1": "set_dat_parameter",
                    "6": "set_global_variable",
                    "2": "set_parameter",
                    "4": "set_global_parameter",
                    "3": "set_global_param",
                    "5": "initialize_data"
                },
                "param_1": {
                    "1": "new_data",
                    "4": "new_param",
                    "7": "new_value",
                    "12": "value"
                },
                "DAT_2000035c": {
                    "2": "data",
                    "1": "parameter_value",
                    "5": "global_variable",
                    "3": "global_param"
                }
            }
        },
        "FUN_08003320": {
            "entrypoint": "0x08003320",
            "current_name": "set_global_variable_08003320",
            "code": "\nvoid set_global_variable_08003320(undefined4 value)\n\n{\n  DAT_20000360 = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003320": "set_global_variable_08003320",
                "param_1": "value"
            },
            "calling": [
                "FUN_08002ea0",
                "FUN_08002f28"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08003320": {
                    "4": "initialize_data",
                    "1": "set_dat_variable",
                    "2": "initialize_param",
                    "6": "set_global_variable",
                    "5": "set_global_parameter"
                },
                "param_1": {
                    "1": "input_value",
                    "2": "input_param",
                    "8": "new_value",
                    "11": "value",
                    "3": "new_param"
                },
                "param_2": {
                    "1": "new_value"
                },
                "DAT_20000360": {
                    "1": "global_parameter",
                    "2": "data_pointer",
                    "5": "global_variable",
                    "3": "global_value"
                }
            }
        },
        "FUN_08003330": {
            "entrypoint": "0x08003330",
            "current_name": "process_data_08003330",
            "code": "\nvoid process_data_08003330(undefined4 input_1,undefined4 input_2,undefined4 input_3,undefined4 input_4,\n                 undefined4 input_5,undefined4 input_6,undefined4 input7,undefined4 input8,\n                 undefined4 input9,undefined4 *output)\n\n{\n  undefined4 result_1;\n  undefined4 result_2;\n  int check_result;\n  undefined4 result_3;\n  undefined4 result_4;\n  undefined4 result_5;\n  undefined4 result_6;\n  int result_7;\n  undefined4 result_8;\n  undefined4 result_9;\n  undefined4 result_10;\n  undefined4 result_11;\n  undefined4 result_12;\n  undefined4 result_13;\n  undefined4 result_14;\n  undefined4 result_15;\n  undefined4 result_16;\n  undefined4 result_17;\n  int result_18;\n  undefined4 result_19;\n  undefined4 result_20;\n  undefined4 result_21;\n  undefined4 result_22;\n  undefined4 result_23;\n  undefined4 result_24;\n  int result_25;\n  undefined4 result_26;\n  undefined4 result_27;\n  undefined4 result_28;\n  int result_29;\n  undefined8 result30;\n  undefined8 result31;\n  \n  result_28 = DAT_20000048;\n  result_27 = DAT_20000044;\n  result_29 = DAT_20000040;\n  result_26 = DAT_2000003c;\n  result_1 = calculate_floating_point_08000cec(input_1,input_1);\n  result_2 = calculate_floating_point_08000cec(input_2);\n  result_1 = calculate_float_08000adc(result_1,result_2);\n  result_2 = calculate_floating_point_08000cec(input_3);\n  calculate_float_08000adc(result_1,result_2);\n  reverse_bits_08000428();\n  process_data_08003330_08005bc8();\n  result_1 = calculate_floating_point_08000a30();\n  check_result = check_concatenated_parameters_08001014(result_1,0);\n  if (check_result == 0) {\n    result_2 = calculate_floating_point_08000cec(input7);\n    result_3 = calculate_floating_point_08000cec(input8);\n    result_2 = calculate_float_08000adc(result_2,result_3);\n    result_3 = calculate_floating_point_08000cec(input9);\n    calculate_float_08000adc(result_2,result_3);\n    reverse_bits_08000428();\n    process_data_08003330_08005bc8();\n    result_2 = calculate_floating_point_08000a30();\n    check_result = check_concatenated_parameters_08001014(result_2,0);\n    if (check_result == 0) {\n      result30 = reverse_bits_08000428(input_4);\n      calculate_result_080004d0((int)result30,(int)((ulonglong)result30 >> 0x20),0xa2529d39,0x3f91df46);\n      result_3 = calculate_floating_point_08000a30();\n      result30 = reverse_bits_08000428(input_5);\n      calculate_result_080004d0((int)result30,(int)((ulonglong)result30 >> 0x20),0xa2529d39,0x3f91df46);\n      result_4 = calculate_floating_point_08000a30();\n      result30 = reverse_bits_08000428(input_6);\n      calculate_result_080004d0((int)result30,(int)((ulonglong)result30 >> 0x20),0xa2529d39,0x3f91df46);\n      result_5 = calculate_floating_point_08000a30();\n      check_result = calculate_float_08000adc(result_26);\n      result_6 = calculate_float_08000adc(result_29);\n      result_7 = calculate_float_08000adc(result_27,result_27);\n      result_8 = calculate_float_08000adc(result_28,result_28);\n      result_9 = calculate_floating_point_08000cec(result_26);\n      result_10 = calculate_floating_point_08000cec(result_26,result_29);\n      result_11 = calculate_floating_point_08000cec(result_26,result_27);\n      result_12 = calculate_floating_point_08000cec(result_29);\n      result_13 = calculate_floating_point_08000cec(result_29,result_28);\n      result_14 = calculate_floating_point_08000cec(result_27,result_27);\n      result_15 = calculate_floating_point_08000cec(result_28,result_28);\n      result_1 = calculate_float_08000e54(0x3f800000,result_1);\n      result_2 = calculate_float_08000e54(0x3f800000,result_2);\n      result_16 = calculate_floating_point_08000cec(input7,result_2);\n      result_17 = calculate_floating_point_08000cec(input8,result_2);\n      result_2 = calculate_floating_point_08000cec(input9,result_2);\n      result_18 = calculate_floating_point_08000cec(check_result,result_16);\n      result_19 = calculate_floating_point_08000cec(check_result,result_17);\n      result_20 = calculate_floating_point_08000cec(check_result,result_2);\n      result_21 = calculate_floating_point_08000cec(result_6,result_16);\n      result_22 = calculate_floating_point_08000cec(result_9,result_16);\n      result_23 = calculate_floating_point_08000cec(result_28,result_19);\n      result_22 = reverse_bits_08000ad8(result_22,result_23);\n      result_23 = calculate_floating_point_08000cec(result_27,result_20);\n      result_22 = calculate_float_08000adc(result_22,result_23);\n      result_23 = calculate_floating_point_08000cec(result_12,result_16);\n      result_22 = calculate_float_08000adc(result_22,result_23);\n      result_23 = calculate_floating_point_08000cec(result_6,result_17);\n      result_23 = calculate_floating_point_08000cec(result_23,result_27);\n      result_22 = calculate_float_08000adc(result_22,result_23);\n      result_23 = calculate_floating_point_08000cec(result_6,result_2);\n      result_23 = calculate_floating_point_08000cec(result_23,result_28);\n      result_22 = calculate_float_08000adc(result_22,result_23);\n      result_23 = calculate_floating_point_08000cec(result_14,result_16);\n      result_22 = reverse_bits_08000ad8(result_22,result_23);\n      result_23 = calculate_floating_point_08000cec(result_15,result_16);\n      result_22 = reverse_bits_08000ad8(result_22,result_23);\n      result_23 = calculate_floating_point_08000cec(result_28,result_18);\n      result_24 = calculate_floating_point_08000cec(result_9,result_17);\n      result_23 = calculate_float_08000adc(result_23,result_24);\n      result_20 = calculate_floating_point_08000cec(result_29,result_20);\n      result_20 = reverse_bits_08000ad8(result_23,result_20);\n      result_23 = calculate_floating_point_08000cec(result_27,result_21);\n      result_20 = calculate_float_08000adc(result_20,result_23);\n      result_23 = calculate_floating_point_08000cec(result_12,result_17);\n      result_20 = reverse_bits_08000ad8(result_20,result_23);\n      result_23 = calculate_floating_point_08000cec(result_14,result_17);\n      result_20 = calculate_float_08000adc(result_20,result_23);\n      result_23 = calculate_floating_point_08000cec(result_7,result_2);\n      result_23 = calculate_floating_point_08000cec(result_23,result_28);\n      result_20 = calculate_float_08000adc(result_20,result_23);\n      result_23 = calculate_floating_point_08000cec(result_15,result_17);\n      result_20 = reverse_bits_08000ad8(result_20,result_23);\n      result_22 = calculate_floating_point_08000cec(result_22,result_22);\n      result_20 = calculate_floating_point_08000cec(result_20,result_20);\n      calculate_float_08000adc(result_22,result_20);\n      reverse_bits_08000428();\n      process_data_08003330_08005bc8();\n      result_25 = calculate_floating_point_08000a30();\n      result_20 = calculate_floating_point_08000cec(result_18 + -0x80000000,result_27);\n      result_19 = calculate_floating_point_08000cec(result_29,result_19);\n      result_19 = calculate_float_08000adc(result_20,result_19);\n      result_9 = calculate_floating_point_08000cec(result_9,result_2);\n      result_9 = calculate_float_08000adc(result_19,result_9);\n      result_19 = calculate_floating_point_08000cec(result_28,result_21);\n      result_9 = calculate_float_08000adc(result_9,result_19);\n      result_19 = calculate_floating_point_08000cec(result_12,result_2);\n      result_9 = reverse_bits_08000ad8(result_9,result_19);\n      result_19 = calculate_floating_point_08000cec(result_7,result_17);\n      result_19 = calculate_floating_point_08000cec(result_19,result_28);\n      result_9 = calculate_float_08000adc(result_9,result_19);\n      result_19 = calculate_floating_point_08000cec(result_14,result_2);\n      result_9 = reverse_bits_08000ad8(result_9,result_19);\n      result_19 = calculate_floating_point_08000cec(result_15,result_2);\n      result_9 = calculate_float_08000adc(result_9,result_19);\n      result_19 = calculate_float_08000adc(result_9,result_9);\n      result_20 = calculate_float_08000adc(result_13);\n      result_21 = calculate_floating_point_08000cec(result_27,check_result);\n      result_20 = reverse_bits_08000ad8(result_20,result_21);\n      result_21 = calculate_floating_point_08000cec(input_1,result_1);\n      result_20 = reverse_bits_08000ad8(result_20,result_21);\n      result_21 = calculate_floating_point_08000cec(result_28,result_7);\n      result_22 = calculate_float_08000adc(result_10);\n      result_21 = calculate_float_08000adc(result_21,result_22);\n      result_22 = calculate_floating_point_08000cec(input_2,result_1);\n      result_21 = reverse_bits_08000ad8(result_21,result_22);\n      result_22 = calculate_floating_point_08000cec(result_27,result_9);\n      result_23 = reverse_bits_08000ad8(0x3f000000,result_14);\n      result_15 = reverse_bits_08000ad8(result_23,result_15);\n      result_15 = calculate_floating_point_08000cec(result_15,result_25);\n      result_23 = reverse_bits_08000ad8(result_13,result_11);\n      result_23 = calculate_floating_point_08000cec(result_23,result_9);\n      result_15 = calculate_float_08000adc(result_15,result_23);\n      result_15 = reverse_bits_08000ad8(result_15,result_16);\n      result_16 = calculate_floating_point_08000cec(result_29,result_9);\n      result_23 = calculate_floating_point_08000cec(result_29,result_27);\n      result_24 = calculate_floating_point_08000cec(result_26,result_28);\n      result_23 = reverse_bits_08000ad8(result_23,result_24);\n      result_23 = calculate_floating_point_08000cec(result_23,result_25);\n      result_24 = calculate_floating_point_08000cec(result_27,result_28);\n      result_10 = calculate_float_08000adc(result_24,result_10);\n      result_10 = calculate_floating_point_08000cec(result_10,result_9);\n      result_10 = calculate_float_08000adc(result_23,result_10);\n      result_10 = reverse_bits_08000ad8(result_10,result_17);\n      result_17 = calculate_floating_point_08000cec(result_27,result_25);\n      result_23 = reverse_bits_08000ad8(0x3f000000,result_12);\n      result_23 = reverse_bits_08000ad8(result_23,result_14);\n      result_23 = calculate_floating_point_08000cec(result_23,result_9);\n      result_11 = calculate_float_08000adc(result_11,result_13);\n      result_11 = calculate_floating_point_08000cec(result_11,result_25);\n      result_11 = calculate_float_08000adc(result_23,result_11);\n      result_2 = reverse_bits_08000ad8(result_11,result_2);\n      result_11 = calculate_floating_point_08000cec(result_7 + -0x80000000,result_20);\n      result_13 = calculate_floating_point_08000cec(result_6,result_21);\n      result_11 = calculate_float_08000adc(result_11,result_13);\n      result_13 = calculate_floating_point_08000cec(result_22,result_15);\n      result_11 = reverse_bits_08000ad8(result_11,result_13);\n      result_13 = calculate_floating_point_08000cec(result_28,result_25 + -0x80000000);\n      result_13 = calculate_float_08000adc(result_13,result_16);\n      result_13 = calculate_floating_point_08000cec(result_13,result_10);\n      result_11 = calculate_float_08000adc(result_11,result_13);\n      result_13 = calculate_floating_point_08000cec(result_17,result_2);\n      result_11 = calculate_float_08000adc(result_11,result_13);\n      result_12 = calculate_float_08000adc(result_12);\n      result_12 = reverse_bits_08000ad8(0x3f800000,result_12);\n      result_13 = calculate_float_08000adc(result_14);\n      result_12 = reverse_bits_08000ad8(result_12,result_13);\n      result_1 = calculate_floating_point_08000cec(input_3,result_1);\n      result_1 = reverse_bits_08000ad8(result_12,result_1);\n      result_12 = calculate_floating_point_08000cec(result_28,result_9);\n      result_9 = calculate_floating_point_08000cec(result_26,result_9);\n      result_13 = calculate_floating_point_08000cec(result_8,result_20);\n      result_14 = calculate_floating_point_08000cec(check_result,result_21);\n      result_13 = calculate_float_08000adc(result_13,result_14);\n      result_14 = calculate_floating_point_08000cec(result_29,0x40800000);\n      result_14 = calculate_floating_point_08000cec(result_14,result_1);\n      result_13 = reverse_bits_08000ad8(result_13,result_14);\n      result_14 = calculate_floating_point_08000cec(result_15,result_12);\n      result_13 = calculate_float_08000adc(result_13,result_14);\n      result_14 = calculate_float_08000adc(result_17,result_9);\n      result_14 = calculate_floating_point_08000cec(result_14,result_10);\n      result_13 = calculate_float_08000adc(result_13,result_14);\n      result_14 = calculate_floating_point_08000cec(result_28,result_25);\n      result_17 = calculate_floating_point_08000cec(result_29,result_19);\n      result_14 = reverse_bits_08000ad8(result_14,result_17);\n      result_14 = calculate_floating_point_08000cec(result_14,result_2);\n      result_13 = calculate_float_08000adc(result_13,result_14);\n      result_18 = calculate_float_08000adc(result_25,result_25);\n      result_14 = calculate_floating_point_08000cec(result_29,result_25);\n      result_17 = calculate_floating_point_08000cec(check_result + -0x80000000,result_20);\n      result_8 = calculate_floating_point_08000cec(result_8,result_21);\n      result_8 = calculate_float_08000adc(result_17,result_8);\n      result_17 = calculate_floating_point_08000cec(result_27,0x40800000);\n      result_1 = calculate_floating_point_08000cec(result_17,result_1);\n      result_1 = reverse_bits_08000ad8(result_8,result_1);\n      result_8 = calculate_floating_point_08000cec(result_27,result_18 + -0x80000000);\n      result_8 = reverse_bits_08000ad8(result_8,result_9);\n      result_8 = calculate_floating_point_08000cec(result_8,result_15);\n      result_1 = calculate_float_08000adc(result_1,result_8);\n      result_8 = calculate_float_08000adc(result_12,result_14);\n      result_8 = calculate_floating_point_08000cec(result_8,result_10);\n      result_1 = calculate_float_08000adc(result_1,result_8);\n      result_8 = calculate_floating_point_08000cec(result_26,result_25);\n      result_9 = calculate_floating_point_08000cec(result_27,result_19);\n      result_8 = reverse_bits_08000ad8(result_8,result_9);\n      result_8 = calculate_floating_point_08000cec(result_8,result_2);\n      result_8 = calculate_float_08000adc(result_1,result_8);\n      result_1 = calculate_floating_point_08000cec(result_6,result_20);\n      result_6 = calculate_floating_point_08000cec(result_7,result_21);\n      result_1 = calculate_float_08000adc(result_1,result_6);\n      result_6 = calculate_floating_point_08000cec(result_28,result_18 + -0x80000000);\n      result_6 = calculate_float_08000adc(result_6,result_16);\n      result_6 = calculate_floating_point_08000cec(result_6,result_15);\n      result_1 = calculate_float_08000adc(result_1,result_6);\n      result_6 = calculate_floating_point_08000cec(result_26,result_25 + -0x80000000);\n      result_6 = calculate_float_08000adc(result_6,result_22);\n      result_6 = calculate_floating_point_08000cec(result_6,result_10);\n      result_1 = calculate_float_08000adc(result_1,result_6);\n      result_2 = calculate_floating_point_08000cec(result_2,result_14);\n      result_6 = calculate_float_08000adc(result_1,result_2);\n      result_1 = calculate_floating_point_08000cec(result_11);\n      result_2 = calculate_floating_point_08000cec(result_13);\n      result_1 = calculate_float_08000adc(result_1,result_2);\n      result_2 = calculate_floating_point_08000cec(result_8,result_8);\n      result_1 = calculate_float_08000adc(result_1,result_2);\n      result_2 = calculate_floating_point_08000cec(result_6,result_6);\n      calculate_float_08000adc(result_1,result_2);\n      reverse_bits_08000428();\n      process_data_08003330_08005bc8();\n      result_1 = calculate_floating_point_08000a30();\n      result_9 = calculate_float_08000e54(0x3f800000,result_1);\n      result_1 = DAT_2000035c;\n      result_2 = calculate_floating_point_08000cec(result_29 + -0x80000000,result_3);\n      result_10 = calculate_floating_point_08000cec(result_27,result_4);\n      result_2 = reverse_bits_08000ad8(result_2,result_10);\n      result_10 = calculate_floating_point_08000cec(result_28,result_5);\n      result_2 = reverse_bits_08000ad8(result_2,result_10);\n      result_10 = calculate_floating_point_08000cec(result_2,0x3f000000);\n      result_11 = calculate_floating_point_08000cec(result_11,result_9);\n      result_2 = DAT_20000360;\n      result_11 = calculate_floating_point_08000cec(result_11,result_1);\n      result_10 = reverse_bits_08000ad8(result_10,result_11);\n      result_2 = calculate_floating_point_08000cec(result_10,result_2);\n      result_10 = calculate_float_08000adc(result_2,result_26);\n      result_11 = calculate_floating_point_08000cec(result_26,result_3);\n      result_12 = calculate_floating_point_08000cec(result_27,result_5);\n      result_2 = DAT_20000360;\n      result_11 = calculate_float_08000adc(result_11,result_12);\n      result_12 = calculate_floating_point_08000cec(result_28,result_4);\n      result_11 = reverse_bits_08000ad8(result_11,result_12);\n      result_11 = calculate_floating_point_08000cec(result_11,0x3f000000);\n      result_12 = calculate_floating_point_08000cec(result_13,result_9);\n      result_12 = calculate_floating_point_08000cec(result_12,result_1);\n      result_11 = reverse_bits_08000ad8(result_11,result_12);\n      result_2 = calculate_floating_point_08000cec(result_11,result_2);\n      result_11 = calculate_float_08000adc(result_2,result_29);\n      result_2 = DAT_20000360;\n      result_12 = calculate_floating_point_08000cec(result_26,result_4);\n      result_13 = calculate_floating_point_08000cec(result_29,result_5);\n      result_12 = reverse_bits_08000ad8(result_12,result_13);\n      result_13 = calculate_floating_point_08000cec(result_28,result_3);\n      result_12 = calculate_float_08000adc(result_12,result_13);\n      result_12 = calculate_floating_point_08000cec(result_12,0x3f000000);\n      result_8 = calculate_floating_point_08000cec(result_8,result_9);\n      result_8 = calculate_floating_point_08000cec(result_8,result_1);\n      result_8 = reverse_bits_08000ad8(result_12,result_8);\n      result_2 = calculate_floating_point_08000cec(result_8,result_2);\n      result_2 = calculate_float_08000adc(result_2,result_27);\n      result_26 = calculate_floating_point_08000cec(result_26,result_5);\n      result_4 = calculate_floating_point_08000cec(result_29,result_4);\n      result_26 = calculate_float_08000adc(result_26,result_4);\n      result_27 = calculate_floating_point_08000cec(result_27,result_3);\n      result_26 = reverse_bits_08000ad8(result_26,result_27);\n      result_27 = calculate_floating_point_08000cec(result_26,0x3f000000);\n      result_26 = calculate_floating_point_08000cec(result_6,result_9);\n      result_1 = calculate_floating_point_08000cec(result_26,result_1);\n      result_26 = DAT_20000360;\n      result_27 = reverse_bits_08000ad8(result_27,result_1);\n      result_26 = calculate_floating_point_08000cec(result_27,result_26);\n      result_26 = calculate_float_08000adc(result_26,result_28);\n      result_27 = calculate_floating_point_08000cec(result_10,result_10);\n      result_28 = calculate_floating_point_08000cec(result_11,result_11);\n      result_27 = calculate_float_08000adc(result_27,result_28);\n      result_28 = calculate_floating_point_08000cec(result_2,result_2);\n      result_27 = calculate_float_08000adc(result_27,result_28);\n      result_28 = calculate_floating_point_08000cec(result_26,result_26);\n      calculate_float_08000adc(result_27,result_28);\n      reverse_bits_08000428();\n      process_data_08003330_08005bc8();\n      result_27 = calculate_floating_point_08000a30();\n      result_27 = calculate_float_08000e54(0x3f800000,result_27);\n      result_28 = calculate_floating_point_08000cec(result_10,result_27);\n      DAT_2000003c = result_28;\n      result_29 = calculate_floating_point_08000cec(result_11,result_27);\n      DAT_20000040 = result_29;\n      result_1 = calculate_floating_point_08000cec(result_2,result_27);\n      DAT_20000044 = result_1;\n      DAT_20000048 = calculate_floating_point_08000cec(result_26,result_27);\n      result_26 = calculate_floating_point_08000cec(result_29,DAT_20000048);\n      result_27 = calculate_floating_point_08000cec(result_28,result_1);\n      result_26 = reverse_bits_08000ad8(result_26,result_27);\n      calculate_float_08000adc(result_26,result_26);\n      reverse_bits_08000428();\n      result30 = process_data_08003330_08005854();\n      result30 = calculate_result_080004d0((int)result30,(int)((ulonglong)result30 >> 0x20),0,0x40668000);\n      calculate_double_08000724((int)result30,(int)((ulonglong)result30 >> 0x20),0x54442d18,0x400921fb);\n      result_26 = calculate_floating_point_08000a30();\n      *output = result_26;\n      result_29 = DAT_20000040;\n      result_26 = DAT_2000003c;\n      result_27 = calculate_floating_point_08000cec(DAT_2000003c,DAT_2000003c);\n      result_28 = calculate_floating_point_08000cec(result_29,result_29);\n      result_28 = reverse_bits_08000ad8(result_27,result_28);\n      result_27 = DAT_20000044;\n      result_1 = calculate_floating_point_08000cec(DAT_20000044,DAT_20000044);\n      result_1 = reverse_bits_08000ad8(result_28,result_1);\n      result_28 = DAT_20000048;\n      result_2 = calculate_floating_point_08000cec(DAT_20000048,DAT_20000048);\n      calculate_float_08000adc(result_1,result_2);\n      result30 = reverse_bits_08000428();\n      result_26 = calculate_floating_point_08000cec(result_26,result_29);\n      result_27 = calculate_floating_point_08000cec(result_27,result_28);\n      result_26 = calculate_float_08000adc(result_26,result_27);\n      calculate_float_08000adc(result_26,result_26);\n      result31 = reverse_bits_08000428();\n      result30 = calculate_result_thunk_08006070((int)result31,(int)((ulonglong)result31 >> 0x20),(int)result30,\n                                  (int)((ulonglong)result30 >> 0x20));\n      result30 = calculate_result_080004d0((int)result30,(int)((ulonglong)result30 >> 0x20),0,0x40668000);\n      calculate_double_08000724((int)result30,(int)((ulonglong)result30 >> 0x20),0x54442d18,0x400921fb);\n      result_26 = calculate_floating_point_08000a30();\n      output[1] = result_26;\n      result_29 = DAT_20000040;\n      result_26 = DAT_2000003c;\n      result_27 = calculate_floating_point_08000cec(DAT_2000003c,DAT_2000003c);\n      result_28 = calculate_floating_point_08000cec(result_29,result_29);\n      result_28 = calculate_float_08000adc(result_27,result_28);\n      result_27 = DAT_20000044;\n      result_1 = calculate_floating_point_08000cec(DAT_20000044,DAT_20000044);\n      result_1 = reverse_bits_08000ad8(result_28,result_1);\n      result_28 = DAT_20000048;\n      result_2 = calculate_floating_point_08000cec(DAT_20000048,DAT_20000048);\n      reverse_bits_08000ad8(result_1,result_2);\n      result30 = reverse_bits_08000428();\n      result_27 = calculate_floating_point_08000cec(result_29,result_27);\n      result_26 = calculate_floating_point_08000cec(result_26,result_28);\n      result_26 = calculate_float_08000adc(result_27,result_26);\n      calculate_float_08000adc(result_26,result_26);\n      result31 = reverse_bits_08000428();\n      result30 = calculate_result_thunk_08006070((int)result31,(int)((ulonglong)result31 >> 0x20),(int)result30,\n                                  (int)((ulonglong)result30 >> 0x20));\n      result30 = calculate_result_080004d0((int)result30,(int)((ulonglong)result30 >> 0x20),0,0x40668000);\n      calculate_double_08000724((int)result30,(int)((ulonglong)result30 >> 0x20),0x54442d18,0x400921fb);\n      result_26 = calculate_floating_point_08000a30();\n      output[2] = result_26;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003330": "process_data_08003330",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "param_5": "input_5",
                "param_6": "input_6",
                "param_7": "input7",
                "param_8": "input8",
                "param_9": "input9",
                "param_10": "output",
                "uVar1": "result_1",
                "uVar2": "result_2",
                "iVar3": "check_result",
                "uVar4": "result_3",
                "uVar5": "result_4",
                "uVar6": "result_5",
                "uVar7": "result_6",
                "iVar8": "result_7",
                "uVar9": "result_8",
                "uVar10": "result_9",
                "uVar11": "result_10",
                "uVar12": "result_11",
                "uVar13": "result_12",
                "uVar14": "result_13",
                "uVar15": "result_14",
                "uVar16": "result_15",
                "uVar17": "result_16",
                "uVar18": "result_17",
                "iVar19": "result_18",
                "uVar20": "result_19",
                "uVar21": "result_20",
                "uVar22": "result_21",
                "uVar23": "result_22",
                "uVar24": "result_23",
                "uVar25": "result_24",
                "iVar26": "result_25",
                "uVar27": "result_26",
                "uVar28": "result_27",
                "uVar29": "result_28",
                "iVar30": "result_29",
                "uVar31": "result30",
                "uVar32": "result31"
            },
            "calling": [
                "FUN_08002f28"
            ],
            "called": [
                "FUN_08000428",
                "FUN_08000724",
                "thunk_FUN_08006070",
                "FUN_08000adc",
                "FUN_08005bc8",
                "FUN_08005854",
                "FUN_08000e54",
                "FUN_08000cec",
                "FUN_08000ad8",
                "FUN_08001014",
                "FUN_08000a30",
                "FUN_080004d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08003330": {
                    "11": "process_data",
                    "1": "improved_extract_and_process_data",
                    "2": "process_data_and_calculate_results",
                    "3": "calculate_and_process_data",
                    "6": "calculate_result"
                },
                "param_1": {
                    "9": "input_1",
                    "1": "arg_1",
                    "2": "input_parameter_1",
                    "4": "input_param_1",
                    "7": "input1"
                },
                "param_2": {
                    "1": "height",
                    "7": "input2",
                    "2": "input_param2",
                    "4": "input_param_2",
                    "9": "input_2"
                },
                "param_3": {
                    "9": "input_3",
                    "2": "input_parameter_3",
                    "1": "arg_3",
                    "3": "input_param_3",
                    "7": "input3"
                },
                "param_4": {
                    "2": "input_parameter_4",
                    "1": "input_a",
                    "6": "input_4",
                    "5": "input4",
                    "3": "input_param_4"
                },
                "param_5": {
                    "6": "input_5",
                    "1": "param_5",
                    "5": "input5",
                    "3": "input_param_5",
                    "2": "input_parameter_5"
                },
                "param_6": {
                    "1": "param_6",
                    "2": "input_parameter_6",
                    "6": "input_6",
                    "5": "input6",
                    "3": "input_param_6"
                },
                "param_7": {
                    "1": "float_param_4",
                    "2": "param7",
                    "7": "input7",
                    "3": "input_param_7"
                },
                "param_8": {
                    "1": "arg_8",
                    "3": "input_param_8",
                    "2": "param8",
                    "7": "input8"
                },
                "param_9": {
                    "2": "input_parameter_9",
                    "7": "input9",
                    "1": "float_param_6",
                    "3": "input_param_9"
                },
                "param_10": {
                    "4": "output_array",
                    "5": "output_params",
                    "1": "result",
                    "8": "output",
                    "2": "output_parameters",
                    "6": "result_array"
                },
                "uVar1": {
                    "15": "result_1",
                    "1": "float_var_1",
                    "13": "result1"
                },
                "uVar2": {
                    "1": "float_var_2",
                    "15": "result_2",
                    "13": "result2"
                },
                "iVar3": {
                    "1": "comparison_result",
                    "2": "check_result1",
                    "15": "check_result",
                    "4": "check"
                },
                "uVar4": {
                    "1": "calculation_result_3",
                    "2": "result4",
                    "8": "result3",
                    "10": "result_3"
                },
                "uVar5": {
                    "1": "temp2",
                    "10": "result_4",
                    "2": "result5",
                    "8": "result4"
                },
                "uVar6": {
                    "2": "float_result3",
                    "1": "result_6",
                    "8": "result5",
                    "11": "result_5"
                },
                "uVar7": {
                    "1": "temp4",
                    "2": "float_result4",
                    "8": "result6",
                    "10": "result_6"
                },
                "iVar8": {
                    "1": "result_status",
                    "6": "result7",
                    "8": "result_7",
                    "2": "float_result5"
                },
                "uVar9": {
                    "1": "float_var_1",
                    "2": "result_7",
                    "6": "result8",
                    "7": "result_8"
                },
                "uVar10": {
                    "6": "result9",
                    "1": "temp_calc_3",
                    "2": "float_result7",
                    "8": "result_9"
                },
                "uVar11": {
                    "1": "calculation_result_9",
                    "8": "result_10",
                    "2": "result_9",
                    "6": "result10"
                },
                "uVar12": {
                    "8": "result_11",
                    "1": "temp_calc_5",
                    "2": "float_result9",
                    "6": "result11"
                },
                "uVar13": {
                    "2": "result13",
                    "1": "temp10",
                    "6": "result12",
                    "8": "result_12"
                },
                "uVar14": {
                    "8": "result_13",
                    "1": "result_14",
                    "2": "result_12",
                    "6": "result13"
                },
                "uVar15": {
                    "1": "result13",
                    "2": "result15",
                    "6": "result14",
                    "8": "result_14"
                },
                "uVar16": {
                    "2": "float_result13",
                    "1": "temp13",
                    "8": "result_15",
                    "6": "result15"
                },
                "uVar17": {
                    "1": "result_17",
                    "6": "result16",
                    "7": "result_16",
                    "2": "float_result14"
                },
                "uVar18": {
                    "1": "temp_calc_11",
                    "2": "float_result15",
                    "6": "result17",
                    "7": "result_17"
                },
                "iVar19": {
                    "1": "check4",
                    "2": "float_result16",
                    "5": "result18",
                    "7": "result_18"
                },
                "uVar20": {
                    "2": "result_17",
                    "1": "calc13",
                    "6": "result19",
                    "7": "result_19"
                },
                "uVar21": {
                    "7": "result_20",
                    "1": "result_19",
                    "6": "result20",
                    "2": "result_18"
                },
                "uVar22": {
                    "2": "result22",
                    "1": "float_var_13",
                    "7": "result_21",
                    "6": "result21"
                },
                "uVar23": {
                    "1": "result_23",
                    "2": "float_result20",
                    "7": "result_22",
                    "6": "result22"
                },
                "uVar24": {
                    "1": "result_24",
                    "2": "float_result21",
                    "6": "result23",
                    "7": "result_23"
                },
                "uVar25": {
                    "1": "result22",
                    "2": "float_result22",
                    "6": "result24",
                    "7": "result_24"
                },
                "iVar26": {
                    "1": "result_check_3",
                    "5": "result25",
                    "2": "float_result23",
                    "7": "result_25"
                },
                "uVar27": {
                    "2": "result_24",
                    "1": "result_23",
                    "7": "result_26",
                    "6": "result26"
                },
                "uVar28": {
                    "1": "result_24",
                    "6": "result27",
                    "7": "result_27",
                    "2": "result_25"
                },
                "uVar29": {
                    "1": "result26",
                    "7": "result_28",
                    "2": "result29",
                    "6": "result28"
                },
                "iVar30": {
                    "1": "int_var_5",
                    "7": "result_29",
                    "5": "result29"
                },
                "uVar31": {
                    "1": "temp_int64_1",
                    "3": "result30",
                    "2": "reverse_bits_result1"
                },
                "uVar32": {
                    "1": "result_2",
                    "2": "result_31",
                    "3": "result31"
                },
                "  : param_10: ": {
                    "1": "output_params"
                },
                "  : iVar3: ": {
                    "1": "check_result"
                },
                "  : uVar31: ": {
                    "1": "reverse_result"
                },
                "uVar19": {
                    "1": "result19"
                },
                "uVar26": {
                    "1": "result26"
                },
                "uVar30": {
                    "1": "result29"
                }
            }
        },
        "FUN_08003eb0": {
            "entrypoint": "0x08003eb0",
            "current_name": "convert_to_long_long_08003eb0",
            "code": "\nlonglong convert_to_long_long_08003eb0(uint input_value)\n\n{\n  if (DAT_20000280 == 0) {\n    trigger_interrupt(0x3f);\n    result combine_values(input_value,1);\n  }\n  result (unsigned_long_long)input_value << 0x20;\n}\n\n",
            "renaming": {
                "FUN_08003eb0": "convert_to_long_long_08003eb0",
                "param_1": "input_value",
                "software_interrupt": "trigger_interrupt",
                "CONCAT44": "combine_values",
                "ulonglong": "unsigned_long_long",
                "return": "result"
            },
            "calling": [
                "FUN_080041ae"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08003eb0": {
                    "1": "shift_left_64_bits",
                    "3": "shift_left_by32",
                    "2": "shift_left64_bits"
                },
                "param_1": {
                    "13": "input",
                    "3": "value",
                    "14": "input_value",
                    "1": "input_param"
                },
                "software_interrupt": {
                    "6": "trigger_interrupt",
                    "2": "raise_exception",
                    "1": "call_software_interrupt",
                    "3": "trigger_software_interrupt"
                },
                "CONCAT44": {
                    "3": "concatenate",
                    "1": "concatenate_values",
                    "8": "combine_values",
                    "2": "combine"
                },
                "ulonglong": {
                    "1": "extended_value",
                    "3": "unsigned_long_long"
                },
                "return": {
                    "1": "result"
                },
                "Concat44": {
                    "1": "concatenate_with_one"
                },
                "return_value": {
                    "1": "converted_value"
                }
            }
        },
        "FUN_08003ec8": {
            "entrypoint": "0x08003ec8",
            "current_name": "increment_and_store_08003ec8",
            "code": "\nreturn_value increment_and_store_08003ec8(int base_address,undefined_value value)\n\n{\n  *(signed_short *)(base_address + 0x804) = *(signed_short *)(base_address + 0x804) + 1;\n  *(undefined_value *)(base_address + (unsigned_int)*(unsigned_short *)(base_address + 0x802)) = value;\n  *(unsigned_short *)(base_address + 0x802) = *(signed_short *)(base_address + 0x802) + 1U & 0x7ff;\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08003ec8": "increment_and_store_08003ec8",
                "param_1": "base_address",
                "param_2": "value",
                "ushort": "unsigned_short",
                "short": "signed_short",
                "undefined4": "return_value",
                "uint": "unsigned_int",
                "undefined": "undefined_value"
            },
            "calling": [
                "FUN_08004c30"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08003ec8": {
                    "1": "increment_short_and_store",
                    "9": "increment_and_store_value",
                    "15": "increment_and_store"
                },
                "param_1": {
                    "1": "array_address",
                    "5": "data",
                    "17": "base_address",
                    "2": "data_address"
                },
                "param_2": {
                    "1": "new_value",
                    "23": "value",
                    "5": "value_to_store"
                },
                "*(short *)(param_1 + 0x804)": {
                    "4": "current_value",
                    "1": "short_value_at_offset",
                    "13": "counter"
                },
                "*(undefined *)(param_1 + (uint)*(ushort *)(param_1 + 0x802))": {
                    "1": "target_memory",
                    "3": "memory_location",
                    "2": "memory_address"
                },
                "*(ushort *)(param_1 + 0x802)": {
                    "1": "ushort_value_at_offset",
                    "15": "index"
                },
                "ushort": {
                    "1": "short_integer",
                    "3": "unsigned_short"
                },
                "short": {
                    "1": "signed_short"
                },
                "0x804": {
                    "2": "counter_offset",
                    "1": "current_counter_index"
                },
                "0x802": {
                    "1": "data_address"
                },
                "undefined4": {
                    "1": "return_value"
                },
                "*(short *)(buffer + 0x804)": {
                    "1": "counter"
                },
                "*(ushort *)(buffer + 0x802)": {
                    "1": "index"
                },
                "*(short *)(param_1 + 0x802) + 1U & 0x7ff": {
                    "1": "updated_index"
                },
                "ushort *param_2": {
                    "1": "current_index"
                },
                "ushort *param_1": {
                    "1": "counter_index"
                },
                "return value": {
                    "1": "success"
                },
                "*(short *)(param_1 + 0x802)": {
                    "1": "current_index",
                    "2": "index"
                },
                "param_1 + 0x804": {
                    "1": "short_pointer"
                },
                "param_1 + 0x802": {
                    "1": "ushort_pointer"
                },
                "uint": {
                    "1": "unsigned_int"
                },
                "*(ushort *)(param_1 + 0x802) + 1U & 0x7ff": {
                    "2": "updated_index"
                },
                "undefined": {
                    "1": "undefined_value"
                }
            }
        },
        "FUN_08003f3c": {
            "entrypoint": "0x08003f3c",
            "current_name": "set_param_values_08003f3c",
            "code": "\nvoid set_param_values_08003f3c(int value1,int value2,int value3)\n\n{\n  set_param_value_08001424(0x40011000,0x8000,value1 == 0);\n  set_param_value_08001424(0x40011000,0x4000,value2 == 0);\n  set_param_value_08001424(0x40011000,0x2000,value3 == 0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003f3c": "set_param_values_08003f3c",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "value3"
            },
            "calling": [
                "FUN_08004a84",
                "FUN_08004028"
            ],
            "called": [
                "FUN_08001424"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08003f3c": {
                    "1": "set_param_flags",
                    "30": "set_param_values"
                },
                "param_1": {
                    "2": "condition1",
                    "1": "condition_1",
                    "7": "value_1",
                    "13": "value1",
                    "6": "is_param1_zero"
                },
                "param_2": {
                    "1": "condition_2",
                    "6": "is_param2_zero",
                    "2": "condition2",
                    "7": "value_2",
                    "13": "value2"
                },
                "param_3": {
                    "1": "condition_3",
                    "13": "value3",
                    "2": "condition3",
                    "6": "is_param3_zero",
                    "7": "value_3"
                }
            }
        },
        "FUN_08003fc4": {
            "entrypoint": "0x08003fc4",
            "current_name": "set_param_value_08003fc4",
            "code": "\nvoid set_param_value_08003fc4(undefined4 value)\n\n{\n  *(undefined4 *)(DAT_200014c8 + 0x40) = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003fc4": "set_param_value_08003fc4",
                "param_1": "value"
            },
            "calling": [
                "FUN_0800426c",
                "FUN_080041c4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08003fc4": {
                    "3": "store_parameter_in_memory",
                    "1": "store_value_at_offset",
                    "2": "set_param_to_global_variable",
                    "10": "set_param_value"
                },
                "param_1": {
                    "1": "parameter_value",
                    "3": "new_value",
                    "2": "input_value",
                    "18": "value",
                    "4": "parameter"
                },
                "DAT_200014c8": {
                    "1": "offset_data",
                    "6": "data_block",
                    "3": "data_buffer",
                    "2": "memory_address"
                },
                "*(undefined4 *)(DAT_200014c8 + 0x40)": {
                    "1": "memory_address"
                },
                "PTR_200014c8": {
                    "1": ""
                },
                "globalData": {
                    "1": ""
                },
                "new_variable_name_1": {
                    "1": "value"
                },
                "PTR_": {
                    "1": "unchanged"
                },
                "DAT_": {
                    "1": "unchanged"
                },
                "PTR_08003fc4": {
                    "1": "function_pointer"
                }
            }
        },
        "FUN_08003fd0": {
            "entrypoint": "0x08003fd0",
            "current_name": "set_param_value_08003fd0",
            "code": "\nvoid set_param_value_08003fd0(undefined4 value)\n\n{\n  *(undefined4 *)(DAT_200014c8 + 0x3c) = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003fd0": "set_param_value_08003fd0",
                "param_1": "value"
            },
            "calling": [
                "FUN_0800426c",
                "FUN_080041c4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08003fd0": {
                    "1": "set_param_in_data_structure",
                    "2": "update_parameter",
                    "9": "set_param_value"
                },
                "param_1": {
                    "1": "new_parameter",
                    "7": "new_value",
                    "18": "value",
                    "2": "param"
                },
                "ptr_200014c8": {
                    "1": "parameter_buffer"
                },
                "DAT_200014c8": {
                    "1": "base_addr",
                    "2": "base_address"
                },
                "*(undefined4 *)(DAT_200014c8 + 0x3c)": {
                    "3": "target_address",
                    "2": "param_value",
                    "1": "param_location"
                },
                "PTR_DAT_200014c8": {
                    "1": "data"
                },
                "original_function_name": {
                    "1": "more_descriptive_function_name"
                },
                "original_parameter_name_1": {
                    "1": "new_parameter_name1"
                },
                "original_parameter_name_2": {
                    "1": "new_parameter_name2"
                },
                "original_variable_name_1": {
                    "1": "new_variable_name1"
                },
                "original_variable_name_n": {
                    "1": "new_variable_name_n"
                },
                "0x3c": {
                    "2": "offset"
                },
                "<param_1>": {
                    "1": "<parameter>"
                },
                "<DAT_200014c8>": {
                    "1": "<memory_block>"
                }
            }
        },
        "FUN_08003fdc": {
            "entrypoint": "0x08003fdc",
            "current_name": "set_param_08003fdc",
            "code": "\nvoid set_param_08003fdc(undefined4 value)\n\n{\n  *(undefined4 *)(DAT_200015f8 + 0x38) = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003fdc": "set_param_08003fdc",
                "param_1": "value"
            },
            "calling": [
                "FUN_0800426c",
                "FUN_080041c4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08003fdc": {
                    "4": "set_parameter_value",
                    "2": "set_param_in_memory",
                    "1": "store_parameter_at_address",
                    "8": "set_param_value"
                },
                "param_1": {
                    "1": "param",
                    "6": "new_value",
                    "20": "value",
                    "2": "parameter"
                },
                "*(undefined4 *)(DAT_200015f8 + 0x38)": {
                    "1": "target_address"
                },
                "DAT_200015f8": {
                    "1": "parameter_data",
                    "2": "data_address",
                    "3": "memory_address"
                },
                "0x38": {
                    "1": "offset"
                },
                "<new_variable_name_n>": {
                    "1": "<original_variable_name_n>"
                }
            }
        },
        "FUN_08003fe8": {
            "entrypoint": "0x08003fe8",
            "current_name": "set_param_08003fe8",
            "code": "\nvoid set_param_08003fe8(undefined4 value)\n\n{\n  *(undefined4 *)(DAT_20001540 + 0x3c) = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003fe8": "set_param_08003fe8",
                "param_1": "value"
            },
            "calling": [
                "FUN_0800426c",
                "FUN_080041c4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08003fe8": {
                    "5": "set_param_value",
                    "1": "update_data",
                    "7": "set_param",
                    "2": "set_parameter"
                },
                "param_1": {
                    "8": "new_value",
                    "19": "value",
                    "1": "value_to_store",
                    "2": "param"
                },
                "*(undefined4 *)(DAT_20001540 + 0x3c)": {
                    "1": "parameter_address"
                },
                "DAT_20001540": {
                    "2": "memory_address",
                    "1": "data_store"
                },
                "PTR_2000157c": {
                    "1": "destination_address"
                },
                "<unnamed_variable_1>": {
                    "1": "<unnamed_variable_1>"
                }
            }
        },
        "FUN_08003ff4": {
            "entrypoint": "0x08003ff4",
            "current_name": "set_bits_08003ff4",
            "code": "\nvoid set_bits_08003ff4(void)\n\n{\n  update_and_set_bit(&DAT_200015f8,4);\n  update_and_set_bit(&DAT_20001540,8);\n  update_and_set_bit(&DAT_200014c8,8);\n  update_and_set_bit(&DAT_200014c8,0xc);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003ff4": "set_bits_08003ff4",
                "update_and_set_bit_08002538": "update_and_set_bit"
            },
            "calling": [
                "FUN_08004028"
            ],
            "called": [
                "FUN_08002538"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08003ff4": {
                    "1": "set_bits_for_data",
                    "2": "set_bits_and_update",
                    "5": "set_bits_in_data",
                    "7": "set_bits"
                },
                "update_and_set_bit_08002538": {
                    "6": "set_bit",
                    "18": "update_and_set_bit",
                    "1": "set_bit_flag"
                },
                "DAT_200015f8": {
                    "7": "data1",
                    "1": "flag_a",
                    "2": "bit_mask1"
                },
                "DAT_20001540": {
                    "1": "bits_to_update2",
                    "7": "data2",
                    "2": "bit_mask2"
                },
                "DAT_200014c8": {
                    "7": "data3",
                    "1": "variable3",
                    "2": "bit_mask3"
                },
                "&DAT_200015f8": {
                    "1": "data_pointer1"
                },
                "&DAT_20001540": {
                    "1": "data_bit2"
                },
                "&DAT_200014c8": {
                    "1": "bit_array_3"
                }
            }
        },
        "FUN_08004028": {
            "entrypoint": "0x08004028",
            "current_name": "initialize_and_set_parameters_08004028",
            "code": "\nvoid initialize_and_set_parameters_08004028(void)\n\n{\n  int iteration_count;\n  \n  initialize_system();\n  set_bits();\n  iteration_count = 3;\n  do {\n    set_param_values(1,0);\n    thunk_FUNC_08001168(100);\n    set_param_values(0,1);\n    thunk_FUNC_08001168(100);\n    set_param_values(0,0,1);\n    thunk_FUNC_08001168(100);\n    iteration_count = iteration_count + -1;\n  } while (iteration_count != 0);\n  set_param_values(1,1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004028": "initialize_and_set_parameters_08004028",
                "iVar1": "iteration_count",
                "initialize_system_0800458c": "initialize_system",
                "set_bits_08003ff4": "set_bits",
                "set_param_values_08003f3c": "set_param_values"
            },
            "calling": [
                "FUN_08004194"
            ],
            "called": [
                "FUN_08003f3c",
                "FUN_08003ff4",
                "thunk_FUN_08001168",
                "FUN_0800458c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08004028": {
                    "10": "initialize_and_set_params",
                    "1": "initialize_and_set_parameter_values",
                    "13": "initialize_and_set_parameters",
                    "3": "initialize_and_set_param_values"
                },
                "iVar1": {
                    "8": "loop_counter",
                    "1": "iteration_counter",
                    "2": "count",
                    "16": "iteration_count"
                },
                "initialize_system_0800458c": {
                    "15": "initialize_system"
                },
                "set_bits_08003ff4": {
                    "1": "initialize_bit_flags",
                    "15": "set_bits"
                },
                "set_param_values_08003f3c": {
                    "9": "set_parameter_values"
                },
                "thunk_FUNC_08001168": {
                    "6": "thunk_function",
                    "1": "perform_thunk",
                    "3": "thunk_func",
                    "2": "perform_operation"
                },
                "thunk_FUNC_08001168(100)": {
                    "1": "perform_thunk(100)"
                }
            }
        },
        "FUN_0800403c": {
            "entrypoint": "0x0800403c",
            "current_name": "process_i2c_data_0800403c",
            "code": "\nvoid process_i2c_data_0800403c(undefined4 device_address,undefined4 register_address,undefined data,int error_flag)\n\n{\n  int result;\n  undefined buffer [8];\n  \n  buffer[0] = data;\n  result = process_data_helper(&DAT_20001504,device_address,register_address,1,buffer,1,200);\n  if (result != 0) {\n    handle_error(\"../Src/i2c.c\",0x1b);\n  }\n  if (error_flag != 0) {\n    thunk_FUNC_08001168(0x32);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800403c": "process_i2c_data_0800403c",
                "param_1": "device_address",
                "param_2": "register_address",
                "param_3": "data",
                "param_4": "error_flag",
                "iVar1": "result",
                "local_14": "buffer",
                "process_data_08001828": "process_data_helper",
                "process_error_08004490": "handle_error"
            },
            "calling": [
                "FUN_0800411c",
                "FUN_08002cb0",
                "FUN_08003298",
                "FUN_08002ad0"
            ],
            "called": [
                "FUN_08004490",
                "FUN_08001828",
                "thunk_FUN_08001168"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800403c": {
                    "28": "process_i2c_data",
                    "1": "process_data"
                },
                "param_1": {
                    "3": "data_ptr",
                    "6": "device_address",
                    "2": "data_param1",
                    "1": "data_ptr1",
                    "5": "arg1"
                },
                "param_2": {
                    "4": "data",
                    "2": "data_param2",
                    "1": "input_param_2",
                    "7": "register_address",
                    "5": "arg2"
                },
                "param_3": {
                    "9": "flag",
                    "12": "data",
                    "1": "data_value",
                    "3": "data_flag"
                },
                "param_4": {
                    "6": "flag",
                    "2": "thunk_flag",
                    "1": "should_process_error",
                    "8": "error_flag"
                },
                "iVar1": {
                    "1": "data_result",
                    "18": "result"
                },
                "local_14": {
                    "4": "local_buffer",
                    "1": "output_buffer",
                    "2": "data_buffer",
                    "3": "local_data",
                    "11": "buffer"
                },
                "process_data_08001828": {
                    "1": "process_data_helper"
                },
                "process_error_08004490": {
                    "1": "handle_error"
                },
                "thunk_FUNC_08001168": {
                    "1": "thunk_function"
                }
            }
        },
        "FUN_0800407c": {
            "entrypoint": "0x0800407c",
            "current_name": "process_and_handle_data_0800407c",
            "code": "\nundefined process_and_handle_data_0800407c(undefined4 input_param_1,undefined4 input_param_2,undefined4 error_param_1,undefined4 error_param_2)\n\n{\n  int result;\n  undefined result [8];\n  \n  result = 0;\n  result = process_data_08001938(&DAT_20001504,input_param_1,input_param_2,1,result,1,200);\n  if (result != 0) {\n    process_error_08004490(error_param_1,error_param_2);\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_0800407c": "process_and_handle_data_0800407c",
                "param_1": "input_param_1",
                "param_2": "input_param_2",
                "param_3": "error_param_1",
                "param_4": "error_param_2",
                "local_14": "result",
                "iVar1": "result",
                "local_14[0]": "result"
            },
            "calling": [
                "FUN_08002d88",
                "FUN_08002cb0",
                "FUN_080040e8",
                "FUN_08002ad0"
            ],
            "called": [
                "FUN_08004490",
                "FUN_08001938"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800407c": {
                    "1": "process_and_return_result",
                    "3": "process_and_return_value",
                    "12": "process_and_handle_data",
                    "7": "process_and_return_data",
                    "2": "process_data_and_handle_error",
                    "5": "process_and_check_data"
                },
                "param_1": {
                    "1": "input_data",
                    "4": "input1",
                    "3": "data_param_1",
                    "2": "input_param",
                    "6": "input_param_1"
                },
                "param_2": {
                    "3": "data_param_2",
                    "4": "input_2",
                    "1": "length",
                    "2": "size",
                    "6": "input_param_2"
                },
                "param_3": {
                    "13": "error_param_1",
                    "5": "error_param1",
                    "1": "output_1",
                    "3": "output_param_1"
                },
                "param_4": {
                    "1": "output_parameter_2",
                    "2": "error_code",
                    "13": "error_param_2",
                    "5": "error_param2",
                    "3": "output_param_2"
                },
                "local_14": {
                    "2": "processed_data",
                    "4": "return_value",
                    "1": "result_array",
                    "16": "result"
                },
                "iVar1": {
                    "1": "process_result",
                    "3": "result"
                },
                "local_14[0]": {
                    "1": "result"
                }
            }
        },
        "FUN_080040b8": {
            "entrypoint": "0x080040b8",
            "current_name": "process_data_080040b8",
            "code": "\nvoid process_data_080040b8(undefined4 input1,undefined4 input2,undefined4 input3,undefined4 input4,\n                 undefined4 error_param1,undefined4 error_param2)\n\n{\n  int result;\n  \n  result = process_data_080040b8_08001938(&DAT_20001504,input1,input2,1,input3,input4,200,input4);\n  if (result != 0) {\n    process_error_08004490(error_param1,error_param2);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080040b8": "process_data_080040b8",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "param_5": "error_param1",
                "param_6": "error_param2",
                "iVar1": "result"
            },
            "calling": [
                "FUN_08003034"
            ],
            "called": [
                "FUN_08004490",
                "FUN_08001938"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080040b8": {
                    "1": "process_input_data",
                    "3": "process_data_and_handle_errors",
                    "12": "process_data",
                    "6": "process_data_and_handle_error"
                },
                "param_1": {
                    "5": "data_1",
                    "3": "data_param",
                    "1": "data_ptr1",
                    "7": "input1"
                },
                "param_2": {
                    "3": "input_param2",
                    "1": "size_param",
                    "5": "data_2",
                    "7": "input2",
                    "2": "param_2"
                },
                "param_3": {
                    "2": "data_param_3",
                    "1": "data_param3",
                    "3": "param_3",
                    "4": "data_3",
                    "7": "input3"
                },
                "param_4": {
                    "2": "data4",
                    "1": "param",
                    "3": "param_4",
                    "4": "data_4",
                    "7": "input4"
                },
                "param_5": {
                    "10": "error_param1",
                    "9": "error_param_1",
                    "1": "error_code_1",
                    "5": "error1"
                },
                "param_6": {
                    "1": "error_data_2",
                    "5": "error2",
                    "9": "error_param_2",
                    "10": "error_param2"
                },
                "iVar1": {
                    "1": "processing_result",
                    "22": "result",
                    "3": "data_processing_result"
                }
            }
        },
        "FUN_080040e8": {
            "entrypoint": "0x080040e8",
            "current_name": "process_and_store_data_080040e8",
            "code": "\nvoid process_and_store_data_080040e8(undefined4 data,int offset,int buffer_size,int buffer_size)\n\n{\n  undefined processed_data;\n  int index;\n  undefined *buffer_ptr;\n  int line_number;\n  \n  buffer_ptr = (undefined *)(buffer_size + -1);\n  line_number = buffer_size;\n  for (index = 0; index < buffer_size; index = index + 1) {\n    processed_data = process_and_handle_data_0800407c(data,offset + index & 0xffff,\"../Src/i2c.c\",0x4c,line_number);\n    buffer_ptr = buffer_ptr + 1;\n    *buffer_ptr = processed_data;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080040e8": "process_and_store_data_080040e8",
                "param_1": "data",
                "param_2": "offset",
                "param_3": "buffer_size",
                "param_4": "buffer_size",
                "uVar1": "processed_data",
                "iVar2": "index",
                "puVar3": "buffer_ptr",
                "iVar4": "line_number"
            },
            "calling": [
                "FUN_08002b48",
                "FUN_08002d88",
                "FUN_08002bf0",
                "FUN_08002cb0",
                "FUN_08003298"
            ],
            "called": [
                "FUN_0800407c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080040e8": {
                    "1": "handle_data_and_store",
                    "8": "process_and_handle_data",
                    "2": "process_data",
                    "3": "handle_i2c_data",
                    "4": "handle_data",
                    "9": "process_and_store_data"
                },
                "param_1": {
                    "1": "data_source",
                    "10": "data",
                    "3": "device_handle",
                    "2": "data_buffer",
                    "5": "input_param"
                },
                "param_2": {
                    "1": "input_array",
                    "7": "base_address",
                    "8": "offset",
                    "2": "data_offset"
                },
                "param_3": {
                    "1": "data_buffer_size",
                    "5": "buffer_size",
                    "2": "array_address",
                    "3": "output_buffer"
                },
                "param_4": {
                    "3": "iteration_count",
                    "2": "num_elements",
                    "1": "length",
                    "5": "buffer_size",
                    "4": "count"
                },
                "uVar1": {
                    "28": "processed_data",
                    "2": "result"
                },
                "iVar2": {
                    "2": "iteration",
                    "5": "i",
                    "1": "counter",
                    "15": "index",
                    "8": "current_index"
                },
                "puVar3": {
                    "2": "current_address",
                    "7": "buffer_ptr",
                    "3": "current_element",
                    "1": "end_buffer"
                },
                "iVar4": {
                    "1": "limit",
                    "2": "file_line",
                    "7": "line_number",
                    "3": "constant_value",
                    "6": "file_offset"
                }
            }
        },
        "FUN_0800411c": {
            "entrypoint": "0x0800411c",
            "current_name": "process_data_0800411c",
            "code": "\nvoid process_data_0800411c(void)\n\n{\n  undefined4 *pointer1;\n  longlong result;\n  uint temp_var1;\n  uint temp_var2;\n  uint temp3;\n  undefined4 temp_var4;\n  undefined4 temp_var5;\n  int data_value;\n  uint temp6;\n  uint temp7;\n  uint temp8;\n  uint temp9;\n  undefined4 *pointer2;\n  undefined4 unaff_r4;\n  int temp_var6;\n  int var15;\n  bool is_negative;\n  undefined8 result;\n  \n  data_value = get_data_value();\n  if (1 < (uint)(data_value - DAT_2000028c)) {\n    DAT_2000028c = get_data_value();\n    initialize_and_process_data_0800411c();\n  }\n  data_value = get_data_value();\n  if (2 < (uint)(data_value - DAT_20000294)) {\n    DAT_20000294 = get_data_value();\n    process_data_0800411c();\n  }\n  data_value = get_data_value();\n  if (3 < (uint)(data_value - DAT_20000290)) {\n    DAT_20000290 = get_data_value();\n    initialize_data();\n    process_data_0800411c();\n    process_and_xor_data();\n    process_and_xor_data();\n    process_and_xor_data();\n    copy_and_process_data_0800411c();\n    process_and_xor_data();\n  }\n  if ((DAT_20000275 != '\\0') && (DAT_20000274 != '\\0')) {\n    var15 = DAT_20000270 + (uint)DAT_20000266 * -0x100;\n    temp6 = (uint)((longlong)(int)(uint)DAT_20000268 * (longlong)var15) >> 0x17 |\n            (int)((ulonglong)((longlong)(int)(uint)DAT_20000268 * (longlong)var15) >> 0x20) << 9;\n    temp7 = (uint)((longlong)(int)(uint)DAT_20000264 * (longlong)var15 >> 7);\n    temp8 = temp7 + (uint)DAT_20000260 * 0x10000;\n    temp_var2 = (uint)((ulonglong)((longlong)(int)(uint)DAT_20000262 * (longlong)var15) >> 8);\n    data_value = temp6 + 2000;\n    temp3 = temp_var2 + (uint)DAT_2000025e * 0x8000;\n    is_negative = (int)temp6 < 0;\n    if (1999 < data_value) {\n      temp6 = 0;\n    }\n    temp_var1 = temp6;\n    if (is_negative != SBORROW4(data_value,2000)) {\n      temp_var6 = temp6 * temp6 * 5;\n      temp6 = temp_var6 >> 2;\n      temp_var1 = temp_var6 >> 1;\n    }\n    temp9 = temp8 - temp_var1;\n    result = (ulonglong)(temp3 - temp6) * (ulonglong)DAT_2000026c;\n    temp_var6 = DAT_2000026c *\n             ((((int)((longlong)(int)(uint)DAT_20000262 * (longlong)var15 >> 0x28) +\n               (uint)CARRY4(temp_var2,(uint)DAT_2000025e * 0x8000)) - ((int)temp6 >> 0x1f)) -\n             (uint)(temp3 < temp6)) + (int)((ulonglong)result >> 0x20);\n    temp_var2 = (uint)result >> 0x15 | temp_var6 * 0x800;\n    temp_var4 = count_bits(temp_var2 - temp9 >> 0xf |\n                         (((temp_var6 >> 0x15) -\n                          ((((int)((longlong)(int)(uint)DAT_20000264 * (longlong)var15 >> 0x27) +\n                            (uint)CARRY4(temp7,(uint)DAT_20000260 * 0x10000)) -\n                           ((int)temp_var1 >> 0x1f)) - (uint)(temp8 < temp_var1))) - (uint)(temp_var2 < temp9)\n                         ) * 0x20000);\n    temp_var4 = calculate_float(temp_var4,0x42c80000);\n    DAT_20000354 = temp_var4;\n    temp_var5 = count_bits(data_value);\n    DAT_20000358 = calculate_float(temp_var5,0x42c80000);\n    calculate_float(temp_var4,0x447d5000);\n    result = reverse_bits();\n    result = calculate_result((int)result,(int)((ulonglong)result >> 0x20),0x60000000,0x3fc85b95);\n    result = calculate_result(0,0x3ff00000,(int)result,(int)((ulonglong)result >> 0x20));\n    calculate_result((int)result,(int)((ulonglong)result >> 0x20),0,0x40e5a540);\n    temp_var4 = calculate_floating_point();\n    temp_var5 = 0;\n    pointer2 = &DAT_20000300;\n    DAT_20000350 = temp_var4;\n    do {\n      pointer1 = pointer2 + 1;\n      *pointer2 = *pointer1;\n      temp_var5 = calculate_float(temp_var5);\n      pointer2 = pointer1;\n    } while (pointer1 != &DAT_2000034c);\n    DAT_2000034c = temp_var4;\n    temp_var4 = calculate_float(temp_var5,temp_var4);\n    DAT_200002fc = calculate_float(temp_var4,0x41a00000);\n    data_value = extract_significant_bits();\n    DAT_200014ab = data_value * 100;\n    DAT_20000275 = '\\0';\n    DAT_20000274 = '\\0';\n    process_i2_c_data(0xee,DAT_20000038 + 0x50,1);\n    DAT_2000027c = get_data_value();\n  }\n  data_value = get_data_value();\n  if (((10 < (uint)(data_value - DAT_2000027c)) && (DAT_20000275 == '\\0')) && (DAT_20000274 == '\\0')) {\n    DAT_20000270 = process_and_convert_data();\n    DAT_20000275 = '\\x01';\n    process_i2_c_data(0xee,DAT_20000038 + 0x40,1,0,unaff_r4);\n    DAT_20000278 = get_data_value();\n  }\n  data_value = get_data_value();\n  if (((10 < (uint)(data_value - DAT_20000278)) && (DAT_20000275 != '\\0')) && (DAT_20000274 == '\\0')) {\n    DAT_2000026c = process_and_convert_data();\n    DAT_20000274 = '\\x01';\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800411c": "process_data_0800411c",
                "iVar8": "data_value",
                "initialize_and_process_data_08002f28": "initialize_and_process_data",
                "process_data_08004a84": "process_data",
                "initialize_data_08004348": "initialize_data",
                "process_data_08004384": "process_data",
                "process_and_xor_data_080043f0": "process_and_xor_data",
                "process_and_xor_data_08004410": "process_and_xor_data",
                "process_and_xor_data_08004434": "process_and_xor_data",
                "copy_and_process_data_080043bc": "copy_and_process_data",
                "process_and_xor_data_08004458": "process_and_xor_data",
                "uVar17": "result",
                "count_bits_08000c44": "count_bits",
                "calculate_float_08000e54": "calculate_float",
                "reverse_bits_08000428": "reverse_bits",
                "calculate_result_08005900": "calculate_result",
                "calculate_result_08000168": "calculate_result",
                "calculate_result_080004d0": "calculate_result",
                "calculate_floating_point_08000a30": "calculate_floating_point",
                "extract_significant_bits_08001078": "extract_significant_bits",
                "process_i2c_data_0800403c": "process_i2_c_data",
                "calculate_float_08000adc": "calculate_float",
                "puVar1": "pointer1",
                "lVar2": "result",
                "uVar3": "temp_var1",
                "uVar4": "temp_var2",
                "uVar5": "temp3",
                "uVar6": "temp_var4",
                "uVar7": "temp_var5",
                "uVar9": "temp6",
                "uVar10": "temp7",
                "uVar11": "temp8",
                "uVar12": "temp9",
                "puVar13": "pointer2",
                "iVar14": "temp_var6",
                "iVar15": "var15",
                "bVar16": "is_negative",
                "thunk_get_data_value_0800115c": "get_data_value",
                "process_and_convert_data_08003034": "process_and_convert_data",
                "uVar1": "calculation14",
                "uVar13": "temp_var5"
            },
            "calling": [
                "FUN_080041ae"
            ],
            "called": [
                "FUN_08000428",
                "FUN_08001078",
                "FUN_08004348",
                "FUN_08000c44",
                "FUN_080043f0",
                "FUN_08000168",
                "thunk_FUN_0800115c",
                "FUN_080043bc",
                "FUN_08004434",
                "FUN_08005900",
                "FUN_08002f28",
                "FUN_08000adc",
                "FUN_08004a84",
                "FUN_08003034",
                "FUN_08004410",
                "FUN_08004384",
                "FUN_08000e54",
                "FUN_0800403c",
                "FUN_08004458",
                "FUN_08000a30",
                "FUN_080004d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800411c": {
                    "1": "initialize_and_process_data",
                    "27": "process_data"
                },
                "iVar8": {
                    "2": "value",
                    "1": "index",
                    "17": "data_value",
                    "3": "data_value1"
                },
                "DAT_2000028c": {
                    "1": "prev_data_value",
                    "2": "prev_data_value1"
                },
                "initialize_and_process_data_08002f28": {
                    "1": "initialize_and_process_data_func",
                    "10": "initialize_and_process_data"
                },
                "DAT_20000294": {
                    "1": "previous_data_value2"
                },
                "process_data_08004a84": {
                    "2": "process_data2",
                    "8": "process_data",
                    "1": "process_data_func"
                },
                "DAT_20000290": {
                    "1": "data_value_threshold3"
                },
                "initialize_data_08004348": {
                    "10": "initialize_data",
                    "1": "initialize_data_func"
                },
                "process_data_08004384": {
                    "2": "process_data3",
                    "1": "process_data_func_2",
                    "8": "process_data"
                },
                "process_and_xor_data_080043f0": {
                    "2": "process_and_xor_data1",
                    "1": "process_and_xor_data_func",
                    "8": "process_and_xor_data"
                },
                "process_and_xor_data_08004410": {
                    "1": "process_and_xor_data_func_2",
                    "2": "process_and_xor_data2",
                    "8": "process_and_xor_data"
                },
                "process_and_xor_data_08004434": {
                    "1": "process_and_xor_data_func_3",
                    "2": "process_and_xor_data3",
                    "8": "process_and_xor_data"
                },
                "copy_and_process_data_080043bc": {
                    "10": "copy_and_process_data",
                    "1": "copy_and_process_data_func"
                },
                "process_and_xor_data_08004458": {
                    "1": "process_and_xor_data_func_4",
                    "2": "process_and_xor_data4",
                    "8": "process_and_xor_data"
                },
                "DAT_20000275": {
                    "1": "is_data_processed2",
                    "5": "flag1"
                },
                "DAT_20000274": {
                    "1": "is_data_processed1",
                    "5": "flag2"
                },
                "DAT_20000270": {
                    "1": "converted_data1",
                    "2": "value1"
                },
                "DAT_20000266": {
                    "1": "value2"
                },
                "DAT_20000268": {
                    "1": "constant2"
                },
                "DAT_20000264": {
                    "1": "constant3"
                },
                "DAT_20000260": {
                    "1": "value_multiplier4"
                },
                "DAT_2000025e": {
                    "1": "var_6"
                },
                "DAT_20000262": {
                    "1": "value_multiplier5"
                },
                "DAT_2000026c": {
                    "1": "value2"
                },
                "DAT_20000354": {
                    "1": "float_value_1",
                    "2": "result1"
                },
                "DAT_20000358": {
                    "1": "float_value_2",
                    "2": "result2"
                },
                "uVar17": {
                    "1": "floating_point_result",
                    "5": "result",
                    "2": "var17",
                    "4": "reverse_bits_result"
                },
                "count_bits_08000c44": {
                    "1": "count_bits_func",
                    "9": "count_bits"
                },
                "calculate_float_08000e54": {
                    "1": "calculate_float2",
                    "9": "calculate_float"
                },
                "reverse_bits_08000428": {
                    "10": "reverse_bits",
                    "1": "reverse_bits_func"
                },
                "calculate_result_08005900": {
                    "1": "calculate_result1",
                    "9": "calculate_result"
                },
                "calculate_result_08000168": {
                    "1": "calculate_result_func_2",
                    "8": "calculate_result",
                    "2": "calculate_result2"
                },
                "calculate_result_080004d0": {
                    "2": "calculate_result3",
                    "1": "calculate_result_func_3",
                    "7": "calculate_result"
                },
                "calculate_floating_point_08000a30": {
                    "1": "calculate_floating_point_func",
                    "9": "calculate_floating_point"
                },
                "DAT_20000300": {
                    "1": "array1"
                },
                "DAT_2000034c": {
                    "1": "result4"
                },
                "DAT_200002fc": {
                    "1": "float_value4"
                },
                "extract_significant_bits_08001078": {
                    "1": "extract_bits",
                    "9": "extract_significant_bits"
                },
                "DAT_200014ab": {
                    "1": "significant_bits"
                },
                "process_i2c_data_0800403c": {
                    "3": "process_i2c_data",
                    "7": "process_i2_c_data",
                    "1": "process_i2c_data_func"
                },
                "DAT_20000038": {
                    "1": "address",
                    "2": "i2c_data"
                },
                "VAR_5": {
                    "1": "value_5"
                },
                "VAR_1": {
                    "1": "value_1"
                },
                "calculate_float_08000adc": {
                    "2": "calculate_float",
                    "1": "calculate_float_func_2"
                },
                "DAT_20000278": {
                    "1": "previous_data_value5",
                    "2": "prev_data_value5"
                },
                "puVar1": {
                    "1": "temp_ptr1",
                    "2": "ptr",
                    "6": "pointer1"
                },
                "lVar2": {
                    "2": "result1",
                    "1": "long_var2",
                    "8": "result"
                },
                "uVar3": {
                    "3": "var3",
                    "1": "num1",
                    "5": "temp1",
                    "6": "temp_var1"
                },
                "uVar4": {
                    "1": "var2",
                    "3": "var4",
                    "6": "temp_var2",
                    "5": "temp2"
                },
                "uVar5": {
                    "1": "num3",
                    "5": "temp3",
                    "3": "var5"
                },
                "uVar6": {
                    "3": "float_result1",
                    "1": "result1",
                    "2": "temp4",
                    "4": "temp_var4"
                },
                "uVar7": {
                    "2": "float_var2",
                    "4": "temp_var5",
                    "3": "var7",
                    "1": "result2"
                },
                "uVar9": {
                    "1": "temp4",
                    "3": "temp6",
                    "2": "calculation1"
                },
                "uVar10": {
                    "1": "temp_value2",
                    "2": "temp_var9",
                    "3": "temp7"
                },
                "uVar11": {
                    "1": "temp_value3",
                    "2": "var11",
                    "3": "temp8"
                },
                "uVar12": {
                    "2": "calculation4",
                    "1": "temp_var4",
                    "3": "temp9"
                },
                "puVar13": {
                    "6": "pointer2",
                    "1": "current_pointer",
                    "3": "ptr2"
                },
                "unaff_r4": {
                    "1": "register4",
                    "2": "unaff_r4"
                },
                "iVar14": {
                    "1": "calculation1",
                    "2": "var14",
                    "3": "temp_var6"
                },
                "iVar15": {
                    "1": "temp_var12",
                    "2": "temp11",
                    "3": "var15"
                },
                "bVar16": {
                    "1": "flag16",
                    "13": "is_negative"
                },
                "temp_var11": {
                    "1": "temp_var15"
                },
                "DAT_20000276": {
                    "1": "data_value13"
                },
                "DAT_20000350": {
                    "1": "result3"
                },
                "DAT_2000027c": {
                    "1": "previous_data_value4",
                    "2": "prev_data_value4"
                },
                "thunk_get_data_value_0800115c": {
                    "1": "get_value",
                    "4": "get_data_value"
                },
                "process_and_convert_data_08003034": {
                    "10": "process_and_convert_data"
                },
                "uVar14": {
                    "1": "calculation5"
                },
                "uVar2": {
                    "1": "calculation11"
                },
                "lVar1": {
                    "1": "calculation12"
                },
                "uVar1": {
                    "1": "calculation14"
                },
                "uVar8": {
                    "1": "calculation15"
                },
                "uVar13": {
                    "1": "pointer"
                },
                "DEV_20000294": {
                    "1": "prev_data_value2"
                }
            }
        },
        "FUN_08004194": {
            "entrypoint": "0x08004194",
            "current_name": "initialize_system_08004194",
            "code": "\nvoid initialize_system_08004194(void)\n\n{\n  initialize_parameters();\n  check_system_status();\n  process_sensor_data();\n  initialize_sensor_data();\n  DAT_200000f4 = 1;\n  DAT_20000150 = 1;\n  DAT_200001ac = 0xffffffff;\n  DAT_20000098 = 1;\n  DAT_200000c8 = 0x44bb8000;\n  DAT_20000124 = 0x44b54000;\n  DAT_20000180 = 0x44fa0000;\n  DAT_2000006c = 0;\n  DAT_200000ac = 0x408ccccd;\n  DAT_200000b0 = 0x3ca3d70a;\n  DAT_200000b4 = 0x438c0000;\n  DAT_200000b8 = 0x40900000;\n  DAT_200000bc = 0x3ca3d70a;\n  DAT_200000c0 = 0x43b40000;\n  DAT_20000108 = 0x40733333;\n  DAT_2000010c = 0x3ca3d70a;\n  DAT_20000110 = 0x43820000;\n  DAT_20000114 = 0x40733333;\n  DAT_20000118 = 0x3ca3d70a;\n  DAT_2000011c = 0x43a00000;\n  DAT_20000164 = 0x40400000;\n  DAT_20000168 = 0x3c23d70a;\n  DAT_2000016c = 0x438c0000;\n  DAT_20000170 = 0;\n  DAT_20000174 = 0;\n  DAT_20000178 = 0;\n  DAT_20000050 = 0x41200000;\n  DAT_20000054 = 0;\n  DAT_20000058 = 0;\n  DAT_2000005c = 0;\n  DAT_20000060 = 0;\n  DAT_20000064 = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004194": "initialize_system_08004194",
                "initialize_and_set_parameters_08004028": "initialize_parameters",
                "initialize_and_check_status_08004c70": "check_system_status",
                "process_sensor_data_08002ea0": "process_sensor_data",
                "initialize_sensor_data_08003298": "initialize_sensor_data"
            },
            "calling": [
                "FUN_080041ae"
            ],
            "called": [
                "FUN_08004c70",
                "FUN_08002ea0",
                "FUN_08003298",
                "FUN_08004028"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08004194": {
                    "1": "initialize_sensor",
                    "24": "initialize_system",
                    "2": "initialize_sensor_data"
                },
                "initialize_and_set_parameters_08004028": {
                    "23": "initialize_parameters",
                    "1": "initialize_and_set_system_parameters",
                    "4": "initialize_and_set_parameters"
                },
                "initialize_and_check_status_08004c70": {
                    "1": "initialize_check_status",
                    "9": "check_system_status",
                    "7": "initialize_and_check_status",
                    "4": "initialize_status_check",
                    "8": "check_status"
                },
                "process_sensor_data_08002ea0": {
                    "30": "process_sensor_data",
                    "1": "process_data"
                },
                "initialize_sensor_data_08003298": {
                    "2": "initialize_data",
                    "28": "initialize_sensor_data"
                },
                "initialize_system": {
                    "8": "initialize_system",
                    "1": "new_initialize_system"
                },
                "initialize_parameters": {
                    "1": "new_initialize_parameters",
                    "7": "initialize_parameters"
                },
                "check_initialization_status": {
                    "1": "check_initialization_status"
                },
                "process_sensor_data": {
                    "1": "new_process_sensor_data",
                    "9": "process_sensor_data"
                },
                "initialize_sensor_data": {
                    "1": "new_initialize_sensor_data",
                    "10": "initialize_sensor_data"
                },
                "check_status": {
                    "3": "check_status"
                },
                "initalization_constant_1": {
                    "1": "constant_1"
                },
                "initalization_constant_2": {
                    "1": "constant_2"
                },
                "check_system_status": {
                    "3": "check_system_status"
                },
                "initialize_and_set_system_parameters": {
                    "1": "initialize_and_set_system_parameters"
                },
                "initialize_and_check_status": {
                    "1": "initialize_and_check_status"
                },
                "initialize_status_check": {
                    "2": "initialize_status_check"
                },
                "initialize_system_08004194": {
                    "1": "initialize_system"
                },
                "initialize_parameters_08004028": {
                    "1": "initialize_parameters"
                },
                "initialize_status_check_08004c70": {
                    "1": "initialize_status_check"
                },
                "check_and_initialize_status": {
                    "1": "new_check_and_initialize_status"
                },
                "initialize_data": {
                    "1": "initialize_data"
                },
                "initialize_sensor_system": {
                    "1": "initialize_sensor_system"
                },
                "initialize_system_parameters": {
                    "1": "initialize_system_parameters"
                },
                "dat_2000006c": {
                    "1": "sensor_count"
                },
                "dat_20000098": {
                    "1": "flag_1"
                },
                "dat_200000ac": {
                    "1": "sensor_constant_1"
                },
                "dat_200000b0": {
                    "1": "sensor_constant_2"
                },
                "dat_200000b4": {
                    "1": "sensor_constant_3"
                },
                "dat_200000b8": {
                    "1": "sensor_constant_4"
                },
                "dat_200000bc": {
                    "1": "sensor_constant_5"
                },
                "dat_200000c0": {
                    "1": "sensor_constant_6"
                },
                "dat_200000c8": {
                    "1": "sensor_constant_7"
                },
                "dat_20000108": {
                    "1": "sensor_constant_8"
                },
                "dat_2000010c": {
                    "1": "sensor_constant_9"
                },
                "dat_20000110": {
                    "1": "sensor_constant_10"
                },
                "dat_20000114": {
                    "1": "sensor_constant_11"
                },
                "dat_20000118": {
                    "1": "sensor_constant_12"
                },
                "dat_2000011c": {
                    "1": "sensor_constant_13"
                },
                "dat_20000124": {
                    "1": "sensor_constant_14"
                },
                "dat_20000150": {
                    "1": "flag_4"
                },
                "dat_20000164": {
                    "1": "sensor_constant_19"
                },
                "dat_20000168": {
                    "1": "sensor_constant_20"
                },
                "dat_2000016c": {
                    "1": "sensor_constant_21"
                },
                "dat_20000170": {
                    "1": "counter_4"
                },
                "dat_20000174": {
                    "1": "counter_5"
                },
                "dat_20000178": {
                    "1": "counter_6"
                },
                "dat_20000180": {
                    "1": "sensor_constant_18"
                },
                "dat_200001ac": {
                    "1": "flag_3"
                },
                "dat_20000050": {
                    "1": "sensor_constant_22"
                },
                "dat_20000054": {
                    "1": "counter_7"
                },
                "dat_20000058": {
                    "1": "counter_8"
                },
                "dat_2000005c": {
                    "1": "counter_9"
                },
                "dat_20000060": {
                    "1": "counter_10"
                },
                "dat_20000064": {
                    "1": "counter_11"
                },
                "param1": {
                    "1": "mystery_param"
                },
                "param2": {
                    "1": "another_mystery_param"
                },
                "mystery_variable": {
                    "1": "mystery_value"
                },
                "another_mystery_variable": {
                    "1": "another_mystery_value"
                },
                "mystery_constant": {
                    "1": "0xffffffff"
                },
                "mystery_constant2": {
                    "1": "0x44bb8000"
                },
                "mystery_constant3": {
                    "1": "0x44b54000"
                },
                "mystery_constant4": {
                    "1": "0x44fa0000"
                },
                "mystery_constant5": {
                    "1": "0"
                },
                "mystery_constant6": {
                    "1": "0x408ccccd"
                },
                "mystery_constant7": {
                    "1": "0x3ca3d70a"
                },
                "mystery_constant8": {
                    "1": "0x438c0000"
                },
                "mystery_constant9": {
                    "1": "0x40900000"
                },
                "mystery_constant10": {
                    "1": "0x43b40000"
                },
                "mystery_constant11": {
                    "1": "0x40733333"
                },
                "mystery_constant12": {
                    "1": "0x43820000"
                },
                "mystery_constant13": {
                    "1": "0x43a00000"
                },
                "mystery_constant14": {
                    "1": "0x40400000"
                },
                "mystery_constant15": {
                    "1": "0x3c23d70a"
                },
                "mystery_constant16": {
                    "1": "0x41200000"
                },
                "initializeSystem": {
                    "1": "initialize_system"
                },
                "initializeParameters": {
                    "1": "initialize_parameters"
                },
                "processSensorData": {
                    "1": "process_sensor_data"
                },
                "initializeSensorData": {
                    "1": "initialize_sensor_data"
                },
                "setup_parameters": {
                    "1": "setup_parameters"
                }
            }
        },
        "FUN_080041ae": {
            "entrypoint": "0x080041ae",
            "current_name": "process_data_loop_080041ae",
            "code": "\nvoid process_data_loop_080041ae(void)\n\n{\n  convert_to_long_long(0);\n  initialize_system();\n  do {\n    increment_counter();\n    process_data();\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_080041ae": "process_data_loop_080041ae",
                "convert_to_long_long_08003eb0": "convert_to_long_long",
                "initialize_system_08004194": "initialize_system",
                "increment_counter_0800114c": "increment_counter",
                "process_data_0800411c": "process_data"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_0800114c",
                "FUN_08003eb0",
                "FUN_0800411c",
                "FUN_08004194"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080041ae": {
                    "1": "count_and_process_data",
                    "2": "continuous_data_processing",
                    "7": "continuous_processing",
                    "8": "process_data_loop",
                    "3": "run_infinite_loop"
                },
                "convert_to_long_long_08003eb0": {
                    "30": "convert_to_long_long",
                    "1": "convert_to_64bit_integer"
                },
                "initialize_system_08004194": {
                    "31": "initialize_system"
                },
                "increment_counter_0800114c": {
                    "31": "increment_counter"
                },
                "process_data_0800411c": {
                    "31": "process_data"
                }
            }
        },
        "FUN_080041c4": {
            "entrypoint": "0x080041c4",
            "current_name": "initialize_params_080041c4",
            "code": "\nvoid initialize_params_080041c4(undefined4 param1,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  undefined4 return_value;\n  \n  set_param_value1(0);\n  set_param_value2(0);\n  set_parameter3(0);\n  set_parameter4(0,return_value,param3,param4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080041c4": "initialize_params_080041c4",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "extraout_r1": "return_value",
                "set_param_value_08003fc4": "set_param_value1",
                "set_param_value_08003fd0": "set_param_value2",
                "set_param_08003fdc": "set_parameter3",
                "set_param_08003fe8": "set_parameter4"
            },
            "calling": [
                "FUN_08004a84"
            ],
            "called": [
                "FUN_08003fe8",
                "FUN_08003fd0",
                "FUN_08003fdc",
                "FUN_08003fc4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080041c4": {
                    "13": "initialize_params",
                    "1": "set_default_parameters",
                    "11": "initialize_parameters"
                },
                "param_1": {
                    "1": "unused_param_1",
                    "10": "unused_param1",
                    "4": "value1",
                    "11": "param1"
                },
                "param_2": {
                    "1": "value_2",
                    "11": "param2",
                    "10": "unused_param2",
                    "4": "value2"
                },
                "param_3": {
                    "4": "value3",
                    "1": "dim_value",
                    "11": "param3",
                    "2": "value1"
                },
                "param_4": {
                    "11": "param4",
                    "4": "value4",
                    "1": "data_param",
                    "2": "value2"
                },
                "extraout_r1": {
                    "1": "output_arg",
                    "3": "extra_output"
                },
                "set_param_value_08003fc4": {
                    "2": "set_parameter1",
                    "3": "set_param_value1",
                    "1": "set_param_value_1"
                },
                "set_param_value_08003fd0": {
                    "2": "set_parameter2",
                    "3": "set_param_value2",
                    "1": "set_param2_to_zero"
                },
                "set_param_08003fdc": {
                    "1": "set_third_param_value",
                    "2": "set_parameter3"
                },
                "set_param_08003fe8": {
                    "1": "set_fourth_param",
                    "2": "set_parameter4"
                }
            }
        },
        "FUN_0800426c": {
            "entrypoint": "0x0800426c",
            "current_name": "process_data_0800426c",
            "code": "\n\n\nvoid process_data_0800426c(undefined4 input1,undefined4 input2,undefined4 input3,undefined4 input4)\n\n{\n  undefined4 reversed_bits1;\n  undefined4 calculated_float1;\n  undefined4 reversed_bits2;\n  uint extracted_bits_1;\n  uint extracted_bits_2;\n  uint extracted_bits_3;\n  uint extracted_bits_4;\n  \n  reversed_bits1 = reverse_bits_08000ad8();\n  calculated_float1 = calculate_float_08000adc(input1,input2);\n  reversed_bits2 = reverse_bits_08000ad8(reversed_bits1,input3);\n  reversed_bits2 = calculate_float_08000adc(reversed_bits2,input4);\n  reverse_bits_08000ad8(reversed_bits2,0x447a0000);\n  extracted_bits_1 = extract_significant_bits_08001078();\n  reversed_bits2 = reverse_bits_08000ad8(calculated_float1,input3);\n  reversed_bits2 = reverse_bits_08000ad8(reversed_bits2,input4);\n  reverse_bits_08000ad8(reversed_bits2,0x447a0000);\n  extracted_bits_2 = extract_significant_bits_08001078();\n  reversed_bits1 = calculate_float_08000adc(reversed_bits1,input3);\n  reversed_bits1 = reverse_bits_08000ad8(reversed_bits1,input4);\n  reverse_bits_08000ad8(reversed_bits1,0x447a0000);\n  extracted_bits_3 = extract_significant_bits_08001078();\n  reversed_bits1 = calculate_float_08000adc(input3,calculated_float1);\n  reversed_bits1 = calculate_float_08000adc(reversed_bits1,input4);\n  reverse_bits_08000ad8(reversed_bits1,0x447a0000);\n  extracted_bits_4 = extract_significant_bits_08001078();\n  if (999 < (int)extracted_bits_4) {\n    extracted_bits_4 = 1000;\n  }\n  if (999 < (int)extracted_bits_3) {\n    extracted_bits_3 = 1000;\n  }\n  if (999 < (int)extracted_bits_2) {\n    extracted_bits_2 = 1000;\n  }\n  if (999 < (int)extracted_bits_1) {\n    extracted_bits_1 = 1000;\n  }\n  DAT_200002a0 = extracted_bits_2 & ~((int)extracted_bits_2 >> 0x1f);\n  DAT_200002a4 = extracted_bits_1 & ~((int)extracted_bits_1 >> 0x1f);\n  DAT_2000029c = extracted_bits_3 & ~((int)extracted_bits_3 >> 0x1f);\n  DAT_20000298 = extracted_bits_4 & ~((int)extracted_bits_4 >> 0x1f);\n  set_param_value_08003fc4();\n  set_param_value_08003fd0(DAT_2000029c);\n  set_param_08003fdc(DAT_200002a0);\n  set_param_08003fe8(DAT_200002a4);\n  _DAT_200013dd = (short)DAT_20000298 + 1000;\n  DAT_200013df = (short)DAT_2000029c + 1000;\n  _DAT_200013e1 = (short)DAT_200002a0 + 1000;\n  DAT_200013e3 = (short)DAT_200002a4 + 1000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800426c": "process_data_0800426c",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "reversed_bits1",
                "uVar2": "calculated_float1",
                "uVar3": "reversed_bits2",
                "uVar4": "extracted_bits_1",
                "uVar5": "extracted_bits_2",
                "uVar6": "extracted_bits_3",
                "uVar7": "extracted_bits_4"
            },
            "calling": [
                "FUN_08004a84"
            ],
            "called": [
                "FUN_08000adc",
                "FUN_08003fe8",
                "FUN_08001078",
                "FUN_08003fdc",
                "FUN_08003fd0",
                "FUN_08003fc4",
                "FUN_08000ad8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800426c": {
                    "6": "calculate_and_set_parameters",
                    "12": "process_data",
                    "4": "calculate_and_set_param_values",
                    "2": "calculate_and_set_values",
                    "1": "compute_parameter_values"
                },
                "param_1": {
                    "4": "input_1",
                    "1": "first_parameter",
                    "3": "input_param1",
                    "6": "input_param_1",
                    "14": "input1"
                },
                "param_2": {
                    "14": "input2",
                    "3": "input_param2",
                    "1": "value2",
                    "6": "input_param_2",
                    "4": "input_2"
                },
                "param_3": {
                    "4": "input_3",
                    "3": "input_param3",
                    "1": "third_parameter",
                    "6": "input_param_3",
                    "13": "input3"
                },
                "param_4": {
                    "1": "input_val_4",
                    "4": "input_4",
                    "3": "input_param4",
                    "6": "input_param_4",
                    "13": "input4"
                },
                "uVar1": {
                    "1": "bits1_reversed",
                    "11": "reversed_bits1",
                    "9": "reversed_bits_1"
                },
                "uVar2": {
                    "9": "calculated_float_1",
                    "1": "calculated_float_value_1",
                    "10": "calculated_float1"
                },
                "uVar3": {
                    "1": "reversed_value2",
                    "11": "reversed_bits2",
                    "9": "reversed_bits_2"
                },
                "uVar4": {
                    "1": "sign_bits_1",
                    "10": "extracted_bits_1",
                    "2": "significant_bits_1",
                    "7": "significant_bits1",
                    "8": "extracted_bits1"
                },
                "uVar5": {
                    "7": "significant_bits2",
                    "1": "sign_bits_2",
                    "2": "significant_bits_2",
                    "10": "extracted_bits_2",
                    "8": "extracted_bits2"
                },
                "uVar6": {
                    "10": "extracted_bits_3",
                    "1": "sign_bits_3",
                    "2": "significant_bits_3",
                    "8": "extracted_bits3",
                    "7": "significant_bits3"
                },
                "uVar7": {
                    "1": "bits4_significant",
                    "10": "extracted_bits_4",
                    "8": "extracted_bits4",
                    "2": "significant_bits_4",
                    "7": "significant_bits4"
                }
            }
        },
        "FUN_08004300": {
            "entrypoint": "0x08004300",
            "current_name": "process_and_xor_data_08004300",
            "code": "\nvoid process_and_xor_data_08004300(uint input_value,byte *input_data,uint data_length)\n\n{\n  uint result;\n  byte *current_byte;\n  \n  process_string_08004c8c(&DAT_0800732e);\n  process_data_08004c18(data_length & 0xff);\n  result = data_length & 0xff ^ input_value;\n  process_data_08004c18(input_value);\n  for (current_byte = input_data; (int)current_byte - (int)input_data < (int)data_length; current_byte = current_byte + 1) {\n    process_data_08004c18(*current_byte);\n    result = result ^ *current_byte;\n  }\n  process_data_08004c18(result);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004300": "process_and_xor_data_08004300",
                "param_1": "input_value",
                "param_2": "input_data",
                "param_3": "data_length",
                "uVar1": "result",
                "pbVar2": "current_byte"
            },
            "calling": [
                "FUN_08004348",
                "FUN_08004384",
                "FUN_08004410",
                "FUN_080043f0",
                "FUN_080043bc",
                "FUN_08004434",
                "FUN_08004458"
            ],
            "called": [
                "FUN_08004c8c",
                "FUN_08004c18"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08004300": {
                    "2": "process_data_with_checksum",
                    "5": "process_string_and_data",
                    "7": "process_and_xor_data",
                    "1": "process_data_and_calc_checksum",
                    "3": "process_and_calculate_checksum"
                },
                "param_1": {
                    "1": "param",
                    "12": "input_value",
                    "5": "input_key",
                    "2": "input_param",
                    "8": "key"
                },
                "param_2": {
                    "2": "input_array",
                    "5": "data",
                    "3": "input_string",
                    "1": "string_param",
                    "4": "byte_array",
                    "10": "input_data"
                },
                "param_3": {
                    "1": "length",
                    "5": "array_length",
                    "4": "input_length",
                    "3": "data_size",
                    "10": "data_length"
                },
                "uVar1": {
                    "1": "xored_value",
                    "2": "result_xor",
                    "11": "result",
                    "6": "checksum"
                },
                "pbVar2": {
                    "1": "data_ptr",
                    "24": "current_byte"
                }
            }
        },
        "FUN_08004348": {
            "entrypoint": "0x08004348",
            "current_name": "initialize_data_08004348",
            "code": "\n\n\nvoid initialize_data_08004348(undefined4 param1,uint param2,undefined4 param3)\n\n{\n  undefined4 data_address;\n  uint masked_param2;\n  undefined4 param3_copy;\n  \n  _DAT_20001423 = 0x40003e9;\n  _DAT_20001427 = 0;\n  DAT_20001429 = 0;\n  data_address = 0x40003e9;\n  masked_param2 = param2 & 0xff000000;\n  param3_copy = param3;\n  process_and_xor_data_08004300(100,&data_address,7);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004348": "initialize_data_08004348",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "local_10": "data_address",
                "local_c": "masked_param2",
                "uStack_8": "param3_copy"
            },
            "calling": [
                "FUN_0800411c"
            ],
            "called": [
                "FUN_08004300"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08004348": {
                    "1": "process_xor",
                    "2": "initialize_and_process_data",
                    "19": "initialize_data",
                    "3": "initialize_process"
                },
                "param_1": {
                    "1": "undefined_parameter",
                    "2": "data_address",
                    "5": "arg1",
                    "16": "param1"
                },
                "param_2": {
                    "13": "param2",
                    "2": "arg2",
                    "8": "data_size",
                    "1": "input_data"
                },
                "param_3": {
                    "1": "arg2",
                    "16": "param3",
                    "4": "arg3"
                },
                "local_10": {
                    "2": "address",
                    "1": "data_offset",
                    "3": "initialized_value",
                    "4": "initial_value",
                    "14": "data_address"
                },
                "local_c": {
                    "13": "masked_param2",
                    "4": "masked_data_size",
                    "1": "masked_input",
                    "2": "masked_value",
                    "5": "masked_size"
                },
                "uStack_8": {
                    "2": "param3_stack",
                    "1": "parameter",
                    "13": "param3_copy"
                }
            }
        },
        "FUN_08004384": {
            "entrypoint": "0x08004384",
            "current_name": "process_data_08004384",
            "code": "\n\n\nvoid process_data_08004384(undefined4 input_data,undefined4 unused_param,undefined4 unused_param2,uint flags)\n\n{\n  undefined4 temp_var1;\n  undefined4 temp_var2;\n  uint masked_flags;\n  \n  _DAT_200013bd = 0x2a0007;\n  temp_var1 = _DAT_200013b9;\n  temp_var2 = 0x2a0007;\n  _DAT_200013c1 = 0;\n  DAT_200013c3 = 0;\n  masked_flags = flags & 0xff000000;\n  process_and_xor_data_08004300(0x65,&temp_var1,0xb,0,input_data);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004384": "process_data_08004384",
                "param_1": "input_data",
                "param_4": "flags",
                "local_14": "temp_var1",
                "uStack_10": "temp_var2",
                "local_c": "masked_flags",
                "param_2": "unused_param",
                "param_3": "unused_param2"
            },
            "calling": [
                "FUN_0800411c"
            ],
            "called": [
                "FUN_08004300"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08004384": {
                    "1": "decrypt_and_process_data",
                    "13": "process_data",
                    "2": "process_data_and_xor"
                },
                "param_1": {
                    "2": "data_pointer",
                    "1": "input1",
                    "4": "input_param1",
                    "3": "arg1",
                    "7": "input_data",
                    "6": "input_param"
                },
                "param_4": {
                    "2": "input_param",
                    "4": "input_data",
                    "1": "param",
                    "6": "flags"
                },
                "local_14": {
                    "2": "value",
                    "1": "input_pointer",
                    "4": "temp_var1",
                    "3": "data_ptr"
                },
                "uStack_10": {
                    "1": "result2",
                    "3": "unused_variable",
                    "2": "constant",
                    "4": "temp_var2"
                },
                "local_c": {
                    "1": "local_var3",
                    "2": "masked_param",
                    "6": "masked_flags",
                    "3": "masked_param4"
                },
                "param_2": {
                    "1": "temp_param",
                    "3": "arg2",
                    "2": "unused_parameter",
                    "5": "unused_param",
                    "4": "size"
                },
                "param_3": {
                    "1": "param",
                    "3": "unused_param2",
                    "2": "unused_param"
                },
                "<original_function_name>": {
                    "1": "process_with_xor"
                },
                "<param_1>": {
                    "1": "input_param"
                },
                "<param_2>": {
                    "1": "output_param"
                },
                "<param_3>": {
                    "1": "size_param"
                },
                "<param_4>": {
                    "1": "flags_param"
                },
                "<local_14>": {
                    "1": "temp_var_1"
                },
                "<uStack_10>": {
                    "1": "temp_var_2"
                },
                "<local_c>": {
                    "1": "masked_flags"
                },
                "_DAT_200013bd": {
                    "1": "memory_address1"
                },
                "_DAT_200013b9": {
                    "1": "memory_address2"
                },
                "_DAT_200013c1": {
                    "1": "memory_address3"
                },
                "DAT_200013c3": {
                    "1": "memory_address4"
                }
            }
        },
        "FUN_080043bc": {
            "entrypoint": "0x080043bc",
            "current_name": "copy_and_process_data_080043bc",
            "code": "\nvoid copy_and_process_data_080043bc(void)\n\n{\n  undefined4 value1;\n  undefined4 value2;\n  undefined4 *dest_pointer;\n  undefined4 *src_pointer;\n  undefined4 copied_data [2];\n  undefined2 processed_data [6];\n  \n  src_pointer = (undefined4 *)&DAT_2000142a;\n  dest_pointer = copied_data;\n  do {\n    value1 = *src_pointer;\n    value2 = src_pointer[1];\n    src_pointer = src_pointer + 2;\n    *dest_pointer = value1;\n    dest_pointer[1] = value2;\n    dest_pointer = dest_pointer + 2;\n  } while (src_pointer != (undefined4 *)&DAT_2000143a);\n  *(undefined2 *)dest_pointer = DAT_2000143a;\n  process_and_xor_data_08004300(0x66,copied_data,0x12);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080043bc": "copy_and_process_data_080043bc",
                "puVar4": "src_pointer",
                "puVar3": "dest_pointer",
                "local_24": "copied_data",
                "local_1c": "processed_data",
                "uVar1": "value1",
                "uVar2": "value2"
            },
            "calling": [
                "FUN_0800411c"
            ],
            "called": [
                "FUN_08004300"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080043bc": {
                    "28": "copy_and_process_data",
                    "1": "copy_process_and_xor_data",
                    "2": "process_and_xor_data"
                },
                "puVar4": {
                    "1": "original_data_ptr",
                    "2": "source_pointer"
                },
                "puVar3": {
                    "2": "destination_pointer",
                    "1": "dest_ptr"
                },
                "local_24": {
                    "1": "processed_data",
                    "22": "copied_data",
                    "2": "dest_array"
                },
                "local_1c": {
                    "1": "temporary_buffer",
                    "4": "temp_data",
                    "2": "temporary_array",
                    "3": "xor_keys",
                    "10": "processed_data"
                },
                "uVar1": {
                    "2": "first_value",
                    "1": "temp_var1",
                    "3": "value1"
                },
                "uVar2": {
                    "2": "second_value",
                    "1": "element2",
                    "3": "value2"
                }
            }
        },
        "FUN_080043f0": {
            "entrypoint": "0x080043f0",
            "current_name": "process_and_xor_data_080043f0",
            "code": "\n\n\nvoid process_and_xor_data_080043f0(undefined4 input1,undefined4 input2,undefined4 input3)\n\n{\n  undefined4 data1;\n  undefined4 data2;\n  undefined4 data_array [2];\n  \n  data1 = _DAT_200013dd;\n  data2 = _DAT_200013e1;\n  input_data_ptr = input3;\n  process_and_xor_data_080043f0_08004300(0x68,&data1,8,data_array);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080043f0": "process_and_xor_data_080043f0",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "local_10": "data1",
                "uStack_c": "data2",
                "auStack_8": "data_array",
                "auStack_8[0]": "input_data_ptr"
            },
            "calling": [
                "FUN_0800411c"
            ],
            "called": [
                "FUN_08004300"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080043f0": {
                    "1": "process_data_with_xor",
                    "24": "process_and_xor_data",
                    "3": "process_data_and_xor",
                    "2": "decrypt_and_process_data"
                },
                "param_1": {
                    "2": "unused_param_1",
                    "1": "data_offset",
                    "3": "input_param1",
                    "5": "input1"
                },
                "param_2": {
                    "2": "size",
                    "1": "value2",
                    "5": "arg2",
                    "3": "input_param2"
                },
                "param_3": {
                    "1": "xor_key",
                    "2": "data_size",
                    "3": "input_param3",
                    "5": "input_data"
                },
                "local_10": {
                    "12": "data1",
                    "3": "data",
                    "1": "global_data_ptr",
                    "2": "data_1"
                },
                "uStack_c": {
                    "1": "key",
                    "12": "data2",
                    "2": "xor_key"
                },
                "auStack_8": {
                    "11": "data_array",
                    "2": "data_arr",
                    "1": "additional_params",
                    "3": "stack_data"
                },
                "auStack_8[0]": {
                    "1": "input_data_ptr"
                }
            }
        },
        "FUN_08004410": {
            "entrypoint": "0x08004410",
            "current_name": "process_and_xor_data_08004410",
            "code": "\nvoid process_and_xor_data_08004410(undefined4 unused_param,undefined4 data,undefined4 arg3)\n\n{\n  undefined4 constant_value;\n  undefined4 processed_data;\n  undefined4 data3;\n  \n  constant_value = DAT_20001395;\n  processed_data = CONCAT22((short)((uint)data >> 0x10),DAT_20001399);\n  data3 = arg3;\n  process_and_xor_data_08004410_helper(0x6c,&constant_value,6);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004410": "process_and_xor_data_08004410",
                "param_1": "unused_param",
                "param_2": "data",
                "param_3": "arg3",
                "local_10": "constant_value",
                "local_c": "processed_data",
                "uStack_8": "data3",
                "process_and_xor_data_08004300": "process_and_xor_data_helper"
            },
            "calling": [
                "FUN_0800411c"
            ],
            "called": [
                "FUN_08004300"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08004410": {
                    "3": "process_data",
                    "1": "decrypt_and_process_data",
                    "24": "process_and_xor_data"
                },
                "param_1": {
                    "3": "input1",
                    "5": "unused",
                    "1": "input_param_1",
                    "4": "arg1",
                    "2": "unused_parameter",
                    "8": "unused_param"
                },
                "param_2": {
                    "6": "data",
                    "1": "input_param_2",
                    "3": "input_param2",
                    "2": "input_param",
                    "4": "arg2"
                },
                "param_3": {
                    "2": "length",
                    "1": "input_param",
                    "3": "input3",
                    "4": "arg3"
                },
                "local_10": {
                    "3": "data1",
                    "1": "base_address",
                    "7": "constant_value",
                    "2": "constant"
                },
                "local_c": {
                    "1": "concatenation_value",
                    "3": "data2",
                    "5": "combined_value",
                    "2": "concatenated_data",
                    "8": "processed_data"
                },
                "uStack_8": {
                    "1": "input_pointer",
                    "3": "data3",
                    "2": "unused_variable"
                },
                "process_and_xor_data_08004300": {
                    "1": "process_and_xor_data_helper"
                }
            }
        },
        "FUN_08004434": {
            "entrypoint": "0x08004434",
            "current_name": "process_and_xor_data_08004434",
            "code": "\nvoid process_and_xor_data_08004434(undefined4 input1,undefined4 input2,undefined4 input3)\n\n{\n  undefined4 constant_value;\n  undefined4 data2;\n  undefined4 data3;\n  \n  constant_value = DAT_200014ab;\n  data2 = CONCAT22((short)((uint)input2 >> 0x10),DAT_200014af);\n  data3 = input3;\n  process_and_xor_data_08004434(0x6d,&constant_value,6);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004434": "process_and_xor_data_08004434",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "local_10": "constant_value",
                "local_c": "data2",
                "uStack_8": "data3",
                "process_and_xor_data_08004300": "process_and_xor_data"
            },
            "calling": [
                "FUN_0800411c"
            ],
            "called": [
                "FUN_08004300"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08004434": {
                    "4": "process_data_and_xor",
                    "1": "decrypt_and_process_data",
                    "24": "process_and_xor_data"
                },
                "param_1": {
                    "1": "input_param",
                    "4": "param1",
                    "3": "input_param1",
                    "6": "input1"
                },
                "param_2": {
                    "5": "data",
                    "4": "param2",
                    "6": "input2",
                    "1": "input_param",
                    "3": "input_param2",
                    "2": "input_data"
                },
                "param_3": {
                    "1": "data_param",
                    "3": "input_param3",
                    "4": "param3",
                    "2": "input_data",
                    "6": "input3"
                },
                "local_10": {
                    "6": "data1",
                    "4": "data",
                    "1": "global_var",
                    "2": "data_value",
                    "8": "constant_value"
                },
                "local_c": {
                    "1": "variable2",
                    "7": "data2",
                    "4": "concatenated_data",
                    "2": "processed_data",
                    "3": "combined_data"
                },
                "uStack_8": {
                    "3": "stack_value",
                    "6": "data3",
                    "1": "encryption_key",
                    "5": "input_data"
                },
                "process_and_xor_data_08004300": {
                    "1": "process_and_xor_data"
                },
                "F_UNC_08004434": {
                    "1": "process_and_xor_data"
                },
                "\tlocal_10": {
                    "1": "data1"
                }
            }
        },
        "FUN_08004458": {
            "entrypoint": "0x08004458",
            "current_name": "process_and_xor_data_08004458",
            "code": "\nvoid process_and_xor_data_08004458(void)\n\n{\n  undefined4 *destination;\n  undefined4 *source;\n  undefined4 temp;\n  undefined4 *dest_ptr;\n  undefined4 *src_ptr;\n  undefined4 data_buffer [3];\n  undefined2 temp_array [10];\n  \n  destination = data_buffer;\n  source = &DAT_2000139b;\n  do {\n    src_ptr = source;\n    dest_ptr = destination;\n    temp = src_ptr[1];\n    *dest_ptr = *src_ptr;\n    dest_ptr[1] = temp;\n    destination = dest_ptr + 2;\n    source = src_ptr + 2;\n  } while (src_ptr + 2 != (undefined4 *)0x200013b3);\n  dest_ptr[2] = constant_data;\n  *(undefined2 *)(dest_ptr + 3) = *(undefined2 *)(src_ptr + 3);\n  process_and_xor_data_08004458_08004300(0x70,data_buffer,0x1e);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004458": "process_and_xor_data_08004458",
                "puVar1": "destination",
                "puVar2": "source",
                "uVar3": "temp",
                "puVar4": "dest_ptr",
                "puVar5": "src_ptr",
                "local_30": "data_buffer",
                "local_24": "temp_array",
                "uRam200013b3": "constant_data"
            },
            "calling": [
                "FUN_0800411c"
            ],
            "called": [
                "FUN_08004300"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08004458": {
                    "9": "copy_and_process_data",
                    "2": "reverse_and_process_data",
                    "1": "decrypt_and_process_data",
                    "12": "process_and_xor_data"
                },
                "puVar1": {
                    "7": "destination",
                    "2": "dst_ptr",
                    "1": "src",
                    "4": "dest_ptr"
                },
                "puVar2": {
                    "1": "input_array",
                    "6": "src_ptr",
                    "2": "src",
                    "7": "source"
                },
                "uVar3": {
                    "13": "temp",
                    "1": "temp_var",
                    "11": "temp_value"
                },
                "puVar4": {
                    "1": "dest_ptr_temp",
                    "4": "dest_ptr",
                    "2": "dst_ptr_temp"
                },
                "puVar5": {
                    "6": "src_ptr",
                    "1": "dst_ptr",
                    "2": "src_array_ptr",
                    "3": "src_ptr_temp"
                },
                "local_30": {
                    "5": "data_buffer",
                    "2": "copied_data",
                    "1": "array1",
                    "4": "temp_array"
                },
                "local_24": {
                    "1": "encryption_key",
                    "3": "index_array",
                    "2": "temp_array2",
                    "4": "temp_array"
                },
                "uRam200013b3": {
                    "1": "constant_data"
                }
            }
        },
        "FUN_08004490": {
            "entrypoint": "0x08004490",
            "current_name": "process_error_08004490",
            "code": "\nvoid process_error_08004490(undefined4 error_message,undefined4 line_number)\n\n{\n  set_param_value(0x40011000,0x4000,1);\n  set_param_value(0x40011000,0x8000,0);\n  set_param_value(0x40011000,0x2000,0);\n  do {\n    xor_param_and_store(0x40011000,0x4000);\n    xor_param_and_store(0x40011000,0x8000);\n    xor_param_and_store(0x40011000,0x2000);\n    process_string(\"Error with \");\n    process_string(error_message);\n    process_string(\" at line: \");\n    clear_and_process_data(line_number);\n    process_data(10);\n    thunk_FUNC_08001168(500);\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08004490": "process_error_08004490",
                "param_1": "error_message",
                "param_2": "line_number",
                "set_param_value_08001424": "set_param_value",
                "xor_param_and_store_0800142e": "xor_param_and_store",
                "process_string_08004c8c": "process_string",
                "clear_and_process_data_08004cac": "clear_and_process_data",
                "process_data_08004c18": "process_data"
            },
            "calling": [
                "FUN_080040b8",
                "FUN_0800407c",
                "FUN_08004514",
                "FUN_0800403c",
                "FUN_0800458c"
            ],
            "called": [
                "FUN_08004c8c",
                "FUN_0800142e",
                "FUN_08004cac",
                "FUN_08001424",
                "FUN_08004c18",
                "thunk_FUN_08001168"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08004490": {
                    "1": "process_errors",
                    "8": "process_error_message",
                    "2": "process_error_messages",
                    "15": "process_error"
                },
                "param_1": {
                    "1": "parameter_name",
                    "3": "error_description",
                    "2": "error_string",
                    "24": "error_message"
                },
                "param_2": {
                    "30": "line_number",
                    "1": "error_line"
                },
                "set_param_value_08001424": {
                    "5": "set_param_value",
                    "3": "set_parameter_value"
                },
                "xor_param_and_store_0800142e": {
                    "1": "xor_and_store_param",
                    "2": "xor_parameter_and_store",
                    "4": "xor_param_and_store"
                },
                "process_string_08004c8c": {
                    "3": "process_string",
                    "2": "print_string"
                },
                "clear_and_process_data_08004cac": {
                    "3": "clear_and_print_data",
                    "4": "clear_and_process_data",
                    "1": "print_line_number"
                },
                "process_data_08004c18": {
                    "1": "process_additional_data",
                    "7": "process_data"
                },
                "thunk_FUNC_08001168": {
                    "4": "delay_execution",
                    "1": "delay_function",
                    "2": "delay"
                }
            }
        },
        "FUN_08004514": {
            "entrypoint": "0x08004514",
            "current_name": "initialize_peripherals_08004514",
            "code": "\nvoid initialize_peripherals_08004514(void)\n\n{\n  int condition_result;\n  uint data_value;\n  undefined4 error_code;\n  int mpu_result;\n  undefined4 error_code;\n  int counter;\n  int error_value;\n  undefined4 buffer_size;\n  int temp_error;\n  undefined4 parameters [4];\n  undefined4 constant_1;\n  undefined4 constant_2;\n  undefined4 constant_3;\n  undefined4 constant_4;\n  undefined4 memory_address;\n  \n  constant_1 = 1;\n  constant_2 = 0x10;\n  mpu_result = 2;\n  constant_4 = 0;\n  parameters[0] = 2;\n  constant_3 = 2;\n  memory_address = 0x380000;\n  condition_result = check_conditions(parameters);\n  if (condition_result == 0) goto LAB_08004540;\n  error_code = 0x3c;\n  while( true ) {\n    condition_result = process_error(\"../Src/peripherals.c\",error_code);\nLAB_08004540:\n    error_code = 0xf;\n    buffer_size = 0x400;\n    counter = mpu_result;\n    error_value = condition_result;\n    temp_error = condition_result;\n    mpu_result = initialize_mpu9250(&error_code,mpu_result);\n    if (mpu_result == 0) break;\n    error_code = 0x49;\n  }\n  data_value = get_data_value();\n  initialize_memory(data_value / 1000);\n  update_flag(4);\n  update_memory(0xffffffff,0,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004514": "initialize_peripherals_08004514",
                "local_44": "error_code",
                "local_40": "counter",
                "local_3c": "error_value",
                "local_38": "buffer_size",
                "local_34": "temp_error",
                "local_30": "parameters",
                "local_20": "constant_1",
                "local_1c": "constant_2",
                "local_14": "constant_3",
                "local_10": "constant_4",
                "local_c": "memory_address",
                "iVar1": "condition_result",
                "uVar2": "data_value",
                "uVar3": "error_code",
                "iVar4": "mpu_result",
                "check_conditions_08001b58": "check_conditions",
                "process_error_08004490": "process_error",
                "initialize_mpu9250_0800209c": "initialize_mpu9250",
                "get_data_value_08002214": "get_data_value",
                "initialize_memory_08001214": "initialize_memory",
                "update_flag_08001240": "update_flag",
                "update_memory_08001194": "update_memory"
            },
            "calling": [
                "FUN_0800458c"
            ],
            "called": [
                "FUN_08004490",
                "FUN_08001b58",
                "FUN_08001194",
                "FUN_0800209c",
                "FUN_08002214",
                "FUN_08001240",
                "FUN_08001214"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08004514": {
                    "1": "initialize_peripheral_system",
                    "3": "initialize_system",
                    "25": "initialize_peripherals"
                },
                "local_44": {
                    "1": "error_code2",
                    "2": "error_threshold",
                    "14": "error_code"
                },
                "local_40": {
                    "1": "error_count",
                    "3": "counter",
                    "2": "device_id"
                },
                "local_3c": {
                    "1": "value",
                    "3": "error1",
                    "5": "error_value"
                },
                "local_38": {
                    "1": "memory_value",
                    "11": "buffer_size",
                    "3": "memory_size"
                },
                "local_34": {
                    "1": "memory_address",
                    "2": "temp_error"
                },
                "local_30": {
                    "1": "error_array",
                    "2": "error_codes",
                    "3": "memory_values",
                    "5": "parameters"
                },
                "local_20": {
                    "1": "constant3",
                    "2": "flag_value",
                    "3": "flag_1",
                    "4": "constant_1"
                },
                "local_1c": {
                    "3": "constant2",
                    "4": "flag2",
                    "1": "limit",
                    "2": "value_2"
                },
                "local_14": {
                    "1": "initialize_value",
                    "4": "flag3",
                    "2": "initial_value3",
                    "3": "constant3"
                },
                "local_10": {
                    "1": "memory_value",
                    "4": "flag4",
                    "3": "flag_4",
                    "2": "initial_value4"
                },
                "local_c": {
                    "2": "flag_5",
                    "1": "data_value",
                    "3": "constant5",
                    "6": "memory_address",
                    "4": "constant_5"
                },
                "iVar1": {
                    "1": "condition_check",
                    "5": "result",
                    "2": "check_result",
                    "3": "condition_check_result",
                    "10": "condition_result"
                },
                "uVar2": {
                    "1": "data_value_2",
                    "23": "data_value"
                },
                "uVar3": {
                    "2": "file_code",
                    "1": "constant_6",
                    "9": "error_code"
                },
                "iVar4": {
                    "3": "mpu_value",
                    "2": "mpu9250_status",
                    "1": "device_status"
                },
                "check_conditions_08001b58": {
                    "3": "check_conditions"
                },
                "process_error_08004490": {
                    "3": "process_error"
                },
                "initialize_mpu9250_0800209c": {
                    "3": "initialize_mpu9250"
                },
                "get_data_value_08002214": {
                    "3": "get_data_value"
                },
                "initialize_memory_08001214": {
                    "3": "initialize_memory"
                },
                "update_flag_08001240": {
                    "3": "update_flag"
                },
                "update_memory_08001194": {
                    "3": "update_memory"
                }
            }
        },
        "FUN_0800458c": {
            "entrypoint": "0x0800458c",
            "current_name": "initialize_system_0800458c",
            "code": "\n\n\nvoid initialize_system_0800458c(void)\n\n{\n  int result;\n  undefined4 error_code;\n  int param_value;\n  int var_58;\n  int var_54;\n  int var_50;\n  int var_4c;\n  int var_48;\n  int var_40;\n  int var_3c;\n  int var_38;\n  int var_34;\n  int var_30;\n  int var_2c;\n  int var_28;\n  int var_24;\n  undefined4 value14;\n  int var_1c;\n  \n  initialize_memory();\n  initialize_peripherals();\n  param_value = 2;\n  _DAT_40021018 = _DAT_40021018 | 0x1c;\n  set_parameter_value(0x40011000,0xe000,0,_DAT_40021018 & 8);\n  set_parameter_value(0x40010800,0x20,0);\n  var_34 = 0xe000;\n  var_30 = 1;\n  var_28 = 2;\n  update_flags(0x40011000,&var_34);\n  var_34 = 0x20;\n  var_30 = 1;\n  var_28 = 2;\n  update_flags(0x40010800,&var_34);\n  DAT_20001504 = 0x40005400;\n  DAT_20001508 = 400000;\n  DAT_20001514 = 0x4000;\n  DAT_2000150c = 0;\n  DAT_20001510 = 0;\n  DAT_20001518 = 0;\n  DAT_2000151c = 0;\n  DAT_20001520 = 0;\n  DAT_20001524 = 0;\n  result = initialize_data();\n  if (result == 0) goto LAB_0800463a;\n  error_code = 0x6b;\n  while( true ) {\n    while( true ) {\n      while( true ) {\n        while( true ) {\n          while( true ) {\n            while( true ) {\n              while( true ) {\n                while( true ) {\n                  while( true ) {\n                    while( true ) {\n                      while( true ) {\n                        while( true ) {\n                          while( true ) {\n                            while( true ) {\n                              while( true ) {\n                                while( true ) {\n                                  result = process_error(\"../Src/peripherals.c\",error_code);\nLAB_0800463a:\n                                  DAT_2000157c = 0x40013800;\n                                  DAT_20001580 = 0x1c200;\n                                  DAT_20001590 = 0xc;\n                                  DAT_20001584 = result;\n                                  DAT_20001588 = result;\n                                  DAT_2000158c = result;\n                                  DAT_20001594 = result;\n                                  DAT_20001598 = result;\n                                  result = initialize_memory(&DAT_2000157c);\n                                  if (result == 0) break;\n                                  error_code = 0x151;\n                                }\n                                DAT_200015bc = 0x40012c00;\n                                DAT_200015c8 = 1000;\n                                DAT_200015c0 = param_value;\n                                DAT_200015c4 = result;\n                                DAT_200015cc = result;\n                                DAT_200015d0 = result;\n                                result = initialize_data_2(&DAT_200015bc);\n                                if (result == 0) break;\n                                error_code = 0x88;\n                              }\n                              var_58 = result;\n                              var_54 = result;\n                              result = update_permissions(&DAT_200015bc,&var_58);\n                              if (result == 0) break;\n                              error_code = 0x8f;\n                            }\n                            var_50 = 0x60;\n                            var_4c = result;\n                            var_48 = result;\n                            var_40 = result;\n                            var_3c = result;\n                            var_38 = result;\n                            result = update_parameters(&DAT_200015bc,&var_50,0xc);\n                            if (result == 0) break;\n                            error_code = 0x9a;\n                          }\n                          value14 = 0x2000;\n                          var_34 = result;\n                          var_30 = result;\n                          var_2c = result;\n                          var_28 = result;\n                          var_24 = result;\n                          var_1c = result;\n                          result = check_and_update_value(&DAT_200015bc,&var_34);\n                          if (result == 0) break;\n                          error_code = 0xa6;\n                        }\n                        update_flags(&DAT_200015bc);\n                        DAT_200015f8 = 0x40000000;\n                        DAT_20001604 = 1000;\n                        DAT_200015fc = param_value;\n                        DAT_20001600 = result;\n                        DAT_20001608 = result;\n                        result = initialize_data_2(&DAT_200015f8);\n                        if (result == 0) break;\n                        error_code = 0xc3;\n                      }\n                      var_50 = result;\n                      var_4c = result;\n                      result = update_permissions(&DAT_200015f8,&var_50);\n                      if (result == 0) break;\n                      error_code = 0xca;\n                    }\n                    var_34 = 0x60;\n                    var_30 = result;\n                    var_2c = result;\n                    var_24 = result;\n                    result = update_parameters(&DAT_200015f8,&var_34,4);\n                    if (result == 0) break;\n                    error_code = 0xd3;\n                  }\n                  update_flags(&DAT_200015f8);\n                  DAT_2000154c = 1000;\n                  DAT_20001540 = 0x40000400;\n                  DAT_20001544 = param_value;\n                  DAT_20001548 = result;\n                  DAT_20001550 = result;\n                  result = initialize_data_2();\n                  if (result == 0) break;\n                  error_code = 0xf0;\n                }\n                var_50 = 0;\n                var_4c = 0;\n                result = update_permissions(&DAT_20001540,&var_50);\n                if (result == 0) break;\n                error_code = 0xf7;\n              }\n              var_34 = 0x60;\n              var_30 = result;\n              var_2c = result;\n              var_24 = result;\n              result = update_parameters(&DAT_20001540,&var_34,8);\n              if (result == 0) break;\n              error_code = 0x100;\n            }\n            param_value = update_parameters(&DAT_20001540,&var_34,0xc);\n            if (param_value == 0) break;\n            error_code = 0x105;\n          }\n          update_flags(&DAT_20001540);\n          DAT_200014c8 = 0x40000800;\n          DAT_200014cc = 2;\n          DAT_200014d4 = 1000;\n          DAT_200014d0 = param_value;\n          DAT_200014d8 = param_value;\n          result = initialize_data_2(&DAT_200014c8);\n          if (result == 0) break;\n          error_code = 0x122;\n        }\n        var_50 = result;\n        var_4c = result;\n        result = update_permissions(&DAT_200014c8,&var_50);\n        if (result == 0) break;\n        error_code = 0x129;\n      }\n      var_34 = 0x60;\n      var_30 = result;\n      var_2c = result;\n      var_24 = result;\n      result = update_parameters(&DAT_200014c8,&var_34,8);\n      if (result == 0) break;\n      error_code = 0x132;\n    }\n    result = update_parameters(&DAT_200014c8,&var_34,0xc);\n    if (result == 0) break;\n    error_code = 0x137;\n  }\n  update_flags(&DAT_200014c8);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800458c": "initialize_system_0800458c",
                "uVar2": "error_code",
                "iVar1": "result",
                "iVar3": "param_value",
                "local_58": "var_58",
                "local_54": "var_54",
                "local_50": "var_50",
                "local_4c": "var_4c",
                "local_48": "var_48",
                "local_40": "var_40",
                "local_3c": "var_3c",
                "local_38": "var_38",
                "local_34": "var_34",
                "local_30": "var_30",
                "local_2c": "var_2c",
                "local_28": "var_28",
                "local_24": "var_24",
                "local_20": "value14",
                "local_1c": "var_1c",
                "initialize_memory_08001128": "initialize_memory",
                "initialize_peripherals_08004514": "initialize_peripherals",
                "set_param_value_08001424": "set_parameter_value",
                "update_flags_08001264": "update_flags",
                "initialize_data_08001754": "initialize_data",
                "process_error_08004490": "process_error",
                "initialize_memory_08002724": "initialize_memory",
                "update_permissions_080025a4": "update_permissions",
                "update_parameters_0800245c": "update_parameters",
                "check_and_update_value_08002564": "check_and_update_value",
                "update_flags_08004e14": "update_flags",
                "initialize_data_080023d0": "initialize_data_2"
            },
            "calling": [
                "FUN_08004028"
            ],
            "called": [
                "FUN_08004490",
                "FUN_080023d0",
                "FUN_08002564",
                "FUN_08001264",
                "FUN_08002724",
                "FUN_08001128",
                "FUN_080025a4",
                "FUN_0800245c",
                "FUN_08001424",
                "FUN_08004e14",
                "FUN_08001754",
                "FUN_08004514"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800458c": {
                    "2": "initialize_and_configure",
                    "16": "initialize_system",
                    "4": "initialize_and_update_system",
                    "1": "initialize_program"
                },
                "uVar2": {
                    "3": "counter",
                    "1": "process_error_flag",
                    "11": "error_code",
                    "4": "file_index"
                },
                "iVar1": {
                    "1": "status",
                    "2": "return_value",
                    "7": "error_code",
                    "12": "result"
                },
                "iVar3": {
                    "1": "parameter",
                    "6": "value",
                    "2": "initial_value",
                    "3": "parameter_value"
                },
                "local_58": {
                    "1": "variable1",
                    "5": "var_58",
                    "2": "permission_result",
                    "3": "value1"
                },
                "local_54": {
                    "1": "variable2",
                    "3": "value2",
                    "4": "var_54"
                },
                "local_50": {
                    "1": "param_value_1",
                    "2": "parameter1",
                    "3": "var_50"
                },
                "local_4c": {
                    "1": "parameter_result",
                    "3": "parameter2",
                    "2": "param2"
                },
                "local_48": {
                    "1": "parameter_result",
                    "3": "parameter3",
                    "2": "param3",
                    "4": "var_48"
                },
                "local_40": {
                    "1": "parameter_result",
                    "3": "value6",
                    "2": "param4",
                    "4": "var_40"
                },
                "local_3c": {
                    "1": "param7",
                    "4": "var_3c",
                    "2": "param5",
                    "3": "value7"
                },
                "local_38": {
                    "1": "param8",
                    "3": "value8",
                    "4": "var_38",
                    "2": "param6"
                },
                "local_34": {
                    "1": "parameter_var7",
                    "3": "value9",
                    "4": "var_34",
                    "2": "param7"
                },
                "local_30": {
                    "1": "value_2",
                    "3": "value10",
                    "4": "var_30",
                    "2": "param8"
                },
                "local_2c": {
                    "1": "param_value_9",
                    "4": "var_2c",
                    "2": "param9",
                    "3": "value11"
                },
                "local_28": {
                    "1": "flag_value4",
                    "3": "value12",
                    "2": "param10",
                    "4": "var_28"
                },
                "local_24": {
                    "1": "var13",
                    "3": "value13",
                    "4": "var_24",
                    "2": "param11"
                },
                "local_20": {
                    "2": "memory_size",
                    "1": "data6",
                    "3": "value14"
                },
                "local_1c": {
                    "1": "variable15",
                    "3": "var_1c",
                    "2": "param13"
                },
                "initialize_memory_08001128": {
                    "7": "initialize_memory"
                },
                "initialize_peripherals_08004514": {
                    "7": "initialize_peripherals"
                },
                "_DAT_40021018": {
                    "1": "peripheral_register",
                    "2": "peripheral_data"
                },
                "set_param_value_08001424": {
                    "1": "set_param_value",
                    "6": "set_parameter_value"
                },
                "update_flags_08001264": {
                    "5": "update_flags"
                },
                "DAT_20001504": {
                    "1": "data_address1"
                },
                "DAT_20001508": {
                    "1": "peripheral_2"
                },
                "DAT_20001514": {
                    "1": "data_address3"
                },
                "DAT_2000150c": {
                    "1": "data_value1"
                },
                "DAT_20001510": {
                    "1": "peripheral_5"
                },
                "DAT_20001518": {
                    "1": "peripheral_6"
                },
                "DAT_2000151c": {
                    "1": "data_value4"
                },
                "DAT_20001520": {
                    "1": "data_value5"
                },
                "DAT_20001524": {
                    "1": "data_value6"
                },
                "initialize_data_08001754": {
                    "7": "initialize_data"
                },
                "process_error_08004490": {
                    "6": "process_error"
                },
                "DAT_2000157c": {
                    "1": "data_1"
                },
                "DAT_20001580": {
                    "1": "data_2"
                },
                "DAT_20001590": {
                    "1": "data_value7"
                },
                "DAT_20001584": {
                    "1": "data_4"
                },
                "DAT_20001588": {
                    "1": "data_5"
                },
                "DAT_2000158c": {
                    "1": "data_value10"
                },
                "DAT_20001594": {
                    "1": "data_7"
                },
                "DAT_20001598": {
                    "1": "data_8"
                },
                "initialize_memory_08002724": {
                    "2": "initialize_memory_2",
                    "1": "initialize_memory_data",
                    "3": "initialize_memory"
                },
                "DAT_200015bc": {
                    "1": "data_9"
                },
                "DAT_200015c8": {
                    "1": "data_10"
                },
                "DAT_200015c0": {
                    "1": "loop_count2"
                },
                "DAT_200015c4": {
                    "1": "data_value14"
                },
                "DAT_200015cc": {
                    "1": "data_13"
                },
                "DAT_200015d0": {
                    "1": "data_14"
                },
                "update_permissions_080025a4": {
                    "7": "update_permissions"
                },
                "update_parameters_0800245c": {
                    "7": "update_parameters"
                },
                "check_and_update_value_08002564": {
                    "7": "check_and_update_value"
                },
                "update_flags_08004e14": {
                    "1": "update_flags2",
                    "4": "update_flags"
                },
                "DAT_200015f8": {
                    "1": "data_address7"
                },
                "DAT_20001604": {
                    "1": "data_16"
                },
                "DAT_200015fc": {
                    "1": "data_17"
                },
                "DAT_20001600": {
                    "1": "data_value18"
                },
                "DAT_20001608": {
                    "1": "data_19"
                },
                "DAT_2000154c": {
                    "1": "data_value20"
                },
                "DAT_20001540": {
                    "1": "data_20"
                },
                "DAT_20001544": {
                    "1": "loop_count4"
                },
                "DAT_20001548": {
                    "1": "data_22"
                },
                "DAT_20001550": {
                    "1": "data_23"
                },
                "initialize_data_080023d0": {
                    "2": "initialize_data_2",
                    "1": "initialize_data2"
                },
                "DAT_200014c8": {
                    "1": "data_address9"
                },
                "DAT_200014cc": {
                    "1": "loop_count5"
                },
                "DAT_200014d4": {
                    "1": "data_value23"
                },
                "DAT_200014d0": {
                    "1": "data_value24"
                },
                "DAT_200014d8": {
                    "1": "data_value25"
                }
            }
        },
        "FUN_0800483c": {
            "entrypoint": "0x0800483c",
            "current_name": "calculate_result_0800483c",
            "code": "\nvoid calculate_result_0800483c(int *parameters)\n\n{\n  undefined4 result1;\n  undefined4 result2;\n  int value1;\n  int value2;\n  int value3;\n  \n  value2 = parameters[0xc];\n  result1 = calculate_float1(parameters[7],parameters[9]);\n  value2 = reverse_bits(result1,value2);\n  parameters[10] = value2;\n  if (*parameters == 3) {\n    value2 = check_parameters_empty1(parameters[10],0);\n    if (value2 == 0) {\n      value2 = check_parameters_empty2(parameters[10],0xc3340000);\n    }\n    else {\n      value2 = check_parameters_empty1(parameters[10],0x43340000);\n    }\n    if (value2 != 0) {\n      value3 = parameters[10];\n      result1 = calculate_float2(parameters[10],0x43b40000);\n      value2 = check_parameters_empty1(parameters[10],0);\n      value1 = parameters[10];\n      if (value2 == 0) {\n        value1 = value1 + -0x80000000;\n      }\n      result1 = calculate_float3(result1,value1);\n      value2 = reverse_bits(value3,result1);\n      parameters[10] = value2;\n    }\n  }\n  value3 = parameters[2];\n  value1 = parameters[3];\n  value2 = calculate_float2(parameters[1],parameters[10]);\n  parameters[0xe] = value2;\n  value2 = calculate_float1(parameters[10],parameters[0xf]);\n  parameters[0xf] = value2;\n  value2 = check_parameters_empty2(parameters[0xf],0xc3fa0000);\n  if (value2 == 0) {\n    value2 = check_parameters_empty1(parameters[0xf],0x43fa0000);\n    if (value2 == 0) {\n      value2 = parameters[0xf];\n    }\n    else {\n      value2 = 0x43fa0000;\n    }\n  }\n  else {\n    value2 = -0x3c060000;\n  }\n  parameters[0xf] = value2;\n  value2 = reverse_bits(parameters[0xc],parameters[0xd]);\n  parameters[0x10] = value2;\n  value2 = parameters[0xe];\n  result1 = calculate_float2(value3,parameters[0xf]);\n  result1 = calculate_float1(result1,value2);\n  result2 = calculate_float2(value1,parameters[0x10]);\n  value2 = reverse_bits(result1,result2);\n  parameters[0x12] = value2;\n  result1 = count_bits(parameters[0x13]);\n  value2 = check_parameters_empty2(parameters[0x12],0xc3fa0000);\n  if (value2 == 0) {\n    value2 = check_parameters_empty1(parameters[0x12],0x43fa0000);\n    if (value2 == 0) {\n      value2 = parameters[0x12];\n    }\n    else {\n      value2 = 0x43fa0000;\n    }\n  }\n  else {\n    value2 = -0x3c060000;\n  }\n  value2 = calculate_float2(value2,result1);\n  parameters[0x12] = value2;\n  parameters[0xd] = parameters[0xc];\n  parameters[0xb] = parameters[10];\n  parameters[0x15] = parameters[0x14];\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800483c": "calculate_result_0800483c",
                "param_1": "parameters",
                "uVar1": "result1",
                "uVar2": "result2",
                "iVar3": "value1",
                "iVar4": "value2",
                "iVar5": "value3",
                "calculate_float_08000adc": "calculate_float1",
                "reverse_bits_08000ad8": "reverse_bits",
                "check_if_concatenated_parameters_are_empty_08001064": "check_parameters_empty1",
                "check_if_concatenated_parameters_are_empty_08001028": "check_parameters_empty2",
                "calculate_floating_point_08000cec": "calculate_float2",
                "calculate_float_08000e54": "calculate_float3",
                "count_bits_08000c44": "count_bits"
            },
            "calling": [
                "FUN_08004a84"
            ],
            "called": [
                "FUN_08000adc",
                "FUN_08000e54",
                "FUN_08000ad8",
                "FUN_08000c44",
                "FUN_08000cec",
                "FUN_08001064",
                "FUN_08001028"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800483c": {
                    "1": "calculate_and_store_results",
                    "5": "process_data",
                    "2": "calculate_and_update_values",
                    "3": "calculate_parameters",
                    "8": "calculate_result"
                },
                "param_1": {
                    "3": "input_params",
                    "2": "input_data",
                    "1": "input_array",
                    "16": "parameters"
                },
                "uVar1": {
                    "3": "float1",
                    "1": "calculated_float1",
                    "7": "float_result1",
                    "9": "result1",
                    "2": "float_result"
                },
                "uVar2": {
                    "1": "calculated_value_2",
                    "8": "float_result2",
                    "2": "result_2",
                    "3": "float2",
                    "9": "result2"
                },
                "iVar3": {
                    "1": "variable3",
                    "2": "variable1",
                    "3": "int_var1",
                    "8": "value1"
                },
                "iVar4": {
                    "1": "parameter_4",
                    "2": "variable2",
                    "8": "value2",
                    "3": "int_var2"
                },
                "iVar5": {
                    "2": "value_3",
                    "1": "input1",
                    "3": "int_var3",
                    "8": "value3"
                },
                "calculate_float_08000adc": {
                    "1": "calculate_float"
                },
                "reverse_bits_08000ad8": {
                    "2": "reverse_bits"
                },
                "check_if_concatenated_parameters_are_empty_08001064": {
                    "1": "check_parameters_empty1"
                },
                "check_if_concatenated_parameters_are_empty_08001028": {
                    "1": "check_parameters_empty2"
                },
                "calculate_floating_point_08000cec": {
                    "1": "calculate_floating_point"
                },
                "calculate_float_08000e54": {
                    "1": "calculate_float3"
                },
                "count_bits_08000c44": {
                    "2": "count_bits"
                }
            }
        },
        "FUN_08004a30": {
            "entrypoint": "0x08004a30",
            "current_name": "update_data_values_08004a30",
            "code": "\nvoid update_data_values_08004a30(void)\n\n{\n  undefined4 data_value;\n  \n  if (DAT_20000285 != '\\0') {\n    if (DAT_200002a8 == '\\0') {\n      data_value = get_data_value();\n      DAT_20000068 = calculate_floating_point(data_value,0x42c80000);\n      DAT_200002a8 = '\\x01';\n    }\n    else {\n      data_value = get_data_value();\n      DAT_2000007c = calculate_floating_point(data_value,0x42c80000);\n    }\n  }\n  if (DAT_20000285 == '\\0') {\n    if (DAT_200002a8 != '\\0') {\n      DAT_200002a8 = DAT_20000285;\n    }\n    DAT_20000094 = DAT_20000288;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004a30": "update_data_values_08004a30",
                "uVar1": "data_value",
                "get_data_value_08003068": "get_data_value",
                "calculate_floating_point_08000cec": "calculate_floating_point"
            },
            "calling": [
                "FUN_08004a84"
            ],
            "called": [
                "FUN_08000cec",
                "FUN_08003068"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08004a30": {
                    "1": "calculate_floating_point",
                    "2": "calculate_data",
                    "4": "process_data",
                    "6": "calculate_data_values",
                    "7": "update_data_values"
                },
                "uVar1": {
                    "30": "data_value"
                },
                "get_data_value_08003068": {
                    "1": "retrieve_data_value",
                    "30": "get_data_value"
                },
                "calculate_floating_point_08000cec": {
                    "1": "calculate_float",
                    "30": "calculate_floating_point"
                },
                "DAT_20000285": {
                    "1": "is_first_calculation",
                    "4": "is_data_available",
                    "2": "flag_1",
                    "5": "is_flag_set"
                },
                "DAT_200002a8": {
                    "1": "flag2",
                    "2": "flag_2",
                    "3": "is_value_calculated"
                },
                "DAT_20000068": {
                    "4": "first_value",
                    "2": "first_calculated_value",
                    "1": "result_first_execution",
                    "6": "result1",
                    "3": "result_1"
                },
                "DAT_2000007c": {
                    "1": "float2",
                    "4": "second_value",
                    "2": "second_calculated_value",
                    "6": "result2",
                    "3": "result_2"
                },
                "DAT_20000288": {
                    "3": "default_value",
                    "2": "fallback_value",
                    "1": "data_value_2"
                },
                "DAT_20000094": {
                    "1": "value2",
                    "4": "result",
                    "3": "final_result",
                    "2": "final_data"
                }
            }
        },
        "FUN_08004a84": {
            "entrypoint": "0x08004a84",
            "current_name": "process_data_08004a84",
            "code": "\nvoid process_data_08004a84(void)\n\n{\n  int iVar1;\n  \n  DAT_200000d8 = calculate_float();\n  DAT_20000134 = calculate_result();\n  DAT_20000190 = process_data_08004a84();\n  update_data_values();\n  iVar1 = check_concatenated_parameters_empty(DAT_200000d8,0);\n  if (iVar1 == 0) {\n    iVar1 = check_concatenated_parameters_empty2(DAT_200000d8,0xc2a00000);\n  }\n  else {\n    iVar1 = check_concatenated_parameters_empty(DAT_200000d8,0x42a00000);\n  }\n  if (iVar1 == 0) {\n    iVar1 = check_concatenated_parameters_empty(DAT_20000134,0);\n    if (iVar1 == 0) {\n      iVar1 = check_concatenated_parameters_empty2(DAT_20000134,0xc2a00000);\n    }\n    else {\n      iVar1 = check_concatenated_parameters_empty(DAT_20000134,0x42a00000);\n    }\n    if (iVar1 == 0) {\n      set_param_values(1,1);\n      calculate_result(&DAT_200000a8);\n      calculate_result(&DAT_20000104);\n      calculate_result(&DAT_20000160);\n      if (DAT_20000285 != '\\0') {\n        calculate_result(&DAT_2000004c);\n        calculate_float(DAT_20000094,0x44bb8000);\n      }\n      DAT_20000094 = DAT_20000288;\n      if (DAT_20000284 == '\\0') {\n        initialize_params();\n      }\n      else {\n        process_data_08004a84(DAT_20000288,DAT_200000f0,DAT_2000014c,DAT_200001a8);\n      }\n      calculate_floating_point(DAT_200000ac,0x437f0000);\n      DAT_2000139b._3_1_ = reverse_bits();\n      calculate_floating_point(DAT_200000b0,0x437f0000);\n      DAT_2000139f._0_1_ = reverse_bits();\n      calculate_floating_point(DAT_20000108,0x437f0000);\n      DAT_2000139b._0_1_ = reverse_bits();\n      calculate_floating_point(DAT_2000010c,0x437f0000);\n      DAT_2000139b._1_1_ = reverse_bits();\n      calculate_floating_point(DAT_20000110,0x437f0000);\n      DAT_2000139b._2_1_ = reverse_bits();\n      calculate_floating_point(DAT_20000164,0x437f0000);\n      DAT_2000139f._2_1_ = reverse_bits();\n      calculate_floating_point(DAT_20000168,0x437f0000);\n      DAT_2000139f._3_1_ = reverse_bits();\n      calculate_floating_point(DAT_2000016c,0x437f0000);\n      DAT_200013a3._0_1_ = reverse_bits();\n      calculate_floating_point(DAT_20000050,0x437f0000);\n      DAT_200013a3._1_1_ = reverse_bits();\n      calculate_floating_point(DAT_20000054,0x437f0000);\n      DAT_200013a3._2_1_ = reverse_bits();\n      calculate_floating_point(DAT_20000058,0x437f0000);\n      DAT_200013a3._3_1_ = reverse_bits();\n      return;\n    }\n  }\n  initialize_params();\n  set_param_values(0,1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004a84": "process_data_08004a84",
                "calculate_float_08002ec0": "calculate_float",
                "calculate_result_08002ed4": "calculate_result",
                "process_data_08002ee8": "process_data",
                "update_data_values_08004a30": "update_data_values",
                "check_if_concatenated_parameters_are_empty_08001064": "check_concatenated_parameters_empty",
                "check_if_concatenated_parameters_are_empty_08001028": "check_concatenated_parameters_empty2",
                "set_param_values_08003f3c": "set_param_values",
                "calculate_result_0800483c": "calculate_result",
                "calculate_float_08000adc": "calculate_float",
                "initialize_params_080041c4": "initialize_params",
                "process_data_0800426c": "process_data",
                "calculate_floating_point_08000cec": "calculate_floating_point",
                "reverse_bits_080010c4": "reverse_bits"
            },
            "calling": [
                "FUN_0800411c"
            ],
            "called": [
                "FUN_08004a30",
                "FUN_08002ee8",
                "FUN_08000cec",
                "FUN_08001028",
                "FUN_08002ec0",
                "FUN_0800426c",
                "FUN_08000adc",
                "FUN_08003f3c",
                "FUN_080041c4",
                "FUN_080010c4",
                "FUN_08002ed4",
                "FUN_08001064",
                "FUN_0800483c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08004a84": {
                    "2": "initialize_data",
                    "6": "process_data",
                    "1": "calculate_results",
                    "4": "initialize_and_calculate_results",
                    "3": "initialize_and_process_data",
                    "5": "initialize_and_calculate_values"
                },
                "calculate_float_08002ec0": {
                    "1": "calculate_dat_d8_float",
                    "2": "get_float_value",
                    "10": "calculate_float_value",
                    "13": "calculate_float"
                },
                "calculate_result_08002ed4": {
                    "1": "calculate_dat_2",
                    "5": "calculate_result_value",
                    "2": "get_result_value",
                    "17": "calculate_result"
                },
                "process_data_08002ee8": {
                    "1": "process_dat",
                    "2": "process_data_values",
                    "23": "process_data"
                },
                "update_data_values_08004a30": {
                    "27": "update_data_values",
                    "2": "update_dat_values"
                },
                "check_if_concatenated_parameters_are_empty_08001064": {
                    "1": "check_if_parameters_are_empty",
                    "5": "check_concatenated_params_empty",
                    "2": "check_if_concat_params_empty",
                    "7": "check_concatenated_parameters_empty",
                    "3": "check_parameters_empty"
                },
                "check_if_concatenated_parameters_are_empty_08001028": {
                    "1": "check_if_parameters_empty_2",
                    "2": "check_if_concat_params_empty2"
                },
                "set_param_values_08003f3c": {
                    "1": "set_parameters_values",
                    "20": "set_param_values",
                    "9": "set_parameter_values"
                },
                "calculate_result_0800483c": {
                    "1": "calculate_result_2",
                    "5": "calculate_result2",
                    "21": "calculate_result"
                },
                "calculate_float_08000adc": {
                    "1": "calculate_data94",
                    "4": "calculate_float_value_2",
                    "16": "calculate_float"
                },
                "initialize_params_080041c4": {
                    "20": "initialize_params",
                    "10": "initialize_parameters"
                },
                "process_data_0800426c": {
                    "14": "process_data",
                    "1": "process_data_1",
                    "2": "process_data_alt",
                    "4": "process_data2"
                },
                "calculate_floating_point_08000cec": {
                    "1": "calc_floating_point",
                    "28": "calculate_floating_point"
                },
                "reverse_bits_080010c4": {
                    "30": "reverse_bits"
                },
                "VAR_200000d8": {
                    "1": "float_value"
                },
                "VAR_20000134": {
                    "1": "result_value"
                },
                "VAR_20000190": {
                    "1": "processed_data_value"
                },
                "VAR_20000285": {
                    "1": "is_nonzero"
                },
                "VAR_20000284": {
                    "1": "is_zero"
                },
                "VAR_200000a8": {
                    "1": "data_value_1"
                },
                "VAR_20000104": {
                    "1": "data_value_2"
                },
                "VAR_20000160": {
                    "1": "data_value_3"
                },
                "VAR_2000004c": {
                    "1": "data_value_4"
                },
                "VAR_20000094": {
                    "1": "variable_value"
                },
                "VAR_20000288": {
                    "1": "variable_value_2"
                },
                "VAR_200000f0": {
                    "1": "parameter_1"
                },
                "VAR_2000014c": {
                    "1": "parameter_2"
                },
                "VAR_200001a8": {
                    "1": "parameter_3"
                },
                "VAR_200000ac": {
                    "1": "float_value_1"
                },
                "VAR_200000b0": {
                    "1": "float_value_2"
                },
                "VAR_20000108": {
                    "1": "float_value_3"
                },
                "VAR_2000010c": {
                    "1": "float_value_4"
                },
                "VAR_20000110": {
                    "1": "float_value_5"
                },
                "VAR_20000164": {
                    "1": "float_value_6"
                },
                "VAR_20000168": {
                    "1": "float_value_7"
                },
                "VAR_2000016c": {
                    "1": "float_value_8"
                },
                "VAR_20000050": {
                    "1": "float_value_9"
                },
                "VAR_20000054": {
                    "1": "float_value_10"
                },
                "VAR_20000058": {
                    "1": "float_value_11"
                }
            }
        },
        "FUN_08004c18": {
            "entrypoint": "0x08004c18",
            "current_name": "process_data_08004c18",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0800289e) */\n\nundefined4 process_data_08004c18(undefined input_data)\n\n{\n  int *ptr1;\n  int value1;\n  int value2;\n  ushort *ptr2;\n  \n  DAT_20001636._0_1_ = input_data;\n  ptr2 = &DAT_20001636;\n  if (((DAT_200015b5 != '\\x01') && (DAT_200015b5 != '\\\"')) || (DAT_200015b4 == '\\x01')) {\n    return 2;\n  }\n  DAT_200015b4 = 1;\n  DAT_200015b8 = 0;\n  DAT_200015a0 = 1;\n  if (DAT_200015b5 == '\\\"') {\n    DAT_200015b5 = '2';\n  }\n  else {\n    DAT_200015b5 = '\\x12';\n  }\n  DAT_200015a2 = 1;\nLAB_080027c4:\n  do {\n    if (DAT_200015a2 == 0) {\n      value1 = get_data_value();\n      do {\n        if (*DAT_2000157c << 0x19 < 0) {\n          if (DAT_200015b5 == '2') {\n            DAT_200015b5 = 0x22;\n          }\n          else {\n            DAT_200015b5 = 1;\n          }\n          DAT_200015b4 = 0;\n          return 0;\n        }\n        value2 = get_data_value();\n      } while ((uint)(value2 - value1) < 6);\nLAB_0800281c:\n      ptr1 = DAT_2000157c;\n      DAT_2000157c[3] = DAT_2000157c[3] & 0xffffff7f;\n      ptr1[3] = ptr1[3] & 0xffffffdf;\n      ptr1[3] = ptr1[3] & 0xfffffeff;\n      ptr1[5] = ptr1[5] & 0xfffffffe;\n      DAT_200015b5 = 1;\n      DAT_200015b4 = 0;\n      return 3;\n    }\n    DAT_200015a2 = DAT_200015a2 + -1;\n    if (DAT_20001584 == 0x1000) {\n      value1 = get_data_value();\n      while (-1 < *DAT_2000157c << 0x18) {\n        value2 = get_data_value();\n        if (5 < (uint)(value2 - value1)) goto LAB_0800281c;\n      }\n      DAT_2000157c[1] = *ptr2 & 0x1ff;\n      if (DAT_2000158c == 0) {\n        ptr2 = ptr2 + 1;\n        goto LAB_080027c4;\n      }\n    }\n    else {\n      value1 = get_data_value();\n      while (-1 < *DAT_2000157c << 0x18) {\n        value2 = get_data_value();\n        if (5 < (uint)(value2 - value1)) goto LAB_0800281c;\n      }\n      DAT_2000157c[1] = (uint)*(byte *)ptr2;\n    }\n    ptr2 = (ushort *)((int)ptr2 + 1);\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08004c18": "process_data_08004c18",
                "param_1": "input_data",
                "piVar1": "ptr1",
                "iVar2": "value1",
                "iVar3": "value2",
                "puVar4": "ptr2",
                "get_data_value_0800115c": "get_data_value"
            },
            "calling": [
                "FUN_08004490",
                "FUN_08004300",
                "FUN_08004c8c"
            ],
            "called": [
                "FUN_0800115c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08004c18": {
                    "1": "decode_and_validate_data",
                    "2": "process_binary_data",
                    "16": "process_data",
                    "5": "parse_data"
                },
                "param_1": {
                    "10": "input",
                    "3": "input_param",
                    "1": "data_value",
                    "11": "input_data"
                },
                "piVar1": {
                    "1": "ptr_var1",
                    "2": "ptr_array",
                    "4": "pointer",
                    "7": "ptr1",
                    "3": "pointer1"
                },
                "iVar2": {
                    "1": "current_value",
                    "4": "value_1",
                    "15": "value1",
                    "5": "data_value1",
                    "2": "var2"
                },
                "iVar3": {
                    "2": "var3",
                    "1": "current_value",
                    "5": "data_value2",
                    "4": "value_2",
                    "15": "value2"
                },
                "puVar4": {
                    "4": "pointer2",
                    "1": "ptr_data",
                    "2": "pointer_2",
                    "7": "data_ptr",
                    "8": "ptr2"
                },
                "get_data_value_0800115c": {
                    "8": "get_data_value"
                },
                "DAT_20001636": {
                    "1": "data_1",
                    "2": "data_buffer"
                },
                "DAT_200015b5": {
                    "1": "flag1",
                    "2": "char_1"
                },
                "DAT_200015b4": {
                    "1": "flag2",
                    "2": "char_2"
                },
                "DAT_200015b8": {
                    "1": "condition3",
                    "2": "char_3"
                },
                "DAT_200015a0": {
                    "1": "condition4",
                    "2": "char_4"
                },
                "DAT_200015a2": {
                    "1": "data_6",
                    "2": "loop_count"
                },
                "DAT_2000157c": {
                    "1": "pointer_2",
                    "5": "data_array"
                },
                "DAT_20001584": {
                    "1": "max_iterations",
                    "2": "constant"
                },
                "DAT_2000158c": {
                    "1": "constant2",
                    "2": "condition"
                },
                "counter2": {
                    "1": "counter2"
                }
            }
        },
        "FUN_08004c30": {
            "entrypoint": "0x08004c30",
            "current_name": "process_data_08004c30",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08002902) */\n\nint * process_data_08004c30(int *data)\n\n{\n  int temp_var;\n  \n  if (*data != 0x40013800) {\n    return data;\n  }\n  increment_and_store(&DAT_20000364,DAT_20001634);\n  temp_var = DAT_2000157c;\n  if (((DAT_200015b5 == '\\x01') || (DAT_200015b5 == '\\x12')) && (DAT_200015b4 != '\\x01')) {\n    DAT_200015b8 = 0;\n    DAT_200015a8 = 1;\n    DAT_200015aa = 1;\n    DAT_200015b4 = 0;\n    if (DAT_200015b5 == '\\x12') {\n      DAT_200015b5 = 0x32;\n    }\n    else {\n      DAT_200015b5 = 0x22;\n    }\n    DAT_200015a4 = &DAT_20001634;\n    *(unsigned_integer *)(DAT_2000157c + 0xc) = *(unsigned_integer *)(DAT_2000157c + 0xc) | 0x100;\n    *(unsigned_integer *)(temp_var + 0x14) = *(unsigned_integer *)(temp_var + 0x14) | 1;\n    *(unsigned_integer *)(temp_var + 0xc) = *(unsigned_integer *)(temp_var + 0xc) | 0x20;\n    return (int *)0x0;\n  }\n  return (int *)0x2;\n}\n\n",
            "renaming": {
                "FUN_08004c30": "process_data_08004c30",
                "param_1": "data",
                "increment_and_store_08003ec8": "increment_and_store",
                "iVar1": "temp_var",
                "uint": "unsigned_integer"
            },
            "calling": [
                "FUN_0800290c"
            ],
            "called": [
                "FUN_08003ec8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08004c30": {
                    "2": "check_and_increment_flag",
                    "1": "check_and_increment_value",
                    "7": "process_data",
                    "6": "check_and_increment"
                },
                "param_1": {
                    "3": "input_data",
                    "6": "data",
                    "1": "input_param",
                    "2": "param",
                    "5": "input_array"
                },
                "increment_and_store_08003ec8": {
                    "3": "increment_and_store",
                    "1": "perform_operation"
                },
                "iVar1": {
                    "1": "local_var1",
                    "2": "temp_var1",
                    "10": "temp_var",
                    "8": "result"
                },
                "DAT_2000157c": {
                    "2": "config",
                    "1": "control_var",
                    "3": "var1"
                },
                "DAT_200015b5": {
                    "1": "flag2",
                    "3": "flag_1",
                    "6": "flag1",
                    "2": "var2"
                },
                "DAT_200015b4": {
                    "2": "condition_2",
                    "1": "fifth_data",
                    "3": "flag_2",
                    "6": "flag2"
                },
                "DAT_200015b8": {
                    "1": "global_var4",
                    "2": "var1",
                    "4": "flag3",
                    "3": "flag_3"
                },
                "DAT_200015a8": {
                    "1": "data_7",
                    "4": "flag4",
                    "2": "flag2",
                    "3": "flag_4"
                },
                "DAT_200015aa": {
                    "2": "flag3",
                    "1": "temp_var4",
                    "4": "flag5",
                    "3": "flag_5"
                },
                "DAT_200015a4": {
                    "1": "temp_pointer",
                    "2": "var7"
                },
                "DAT_20000364": {
                    "3": "data1",
                    "1": "counter_ptr",
                    "2": "data_ptr"
                },
                "DAT_20001634": {
                    "2": "increment_value",
                    "1": "second_data"
                },
                "PTR_2000157c": {
                    "1": "ptr_data_3"
                },
                "PTR_200015a4": {
                    "1": "ptr_data_9"
                },
                "*(uint *)(flagVar + 0xc)": {
                    "1": "flag_var_value"
                },
                "*(uint *)(tempVar + 0x14)": {
                    "1": "temp_var_value"
                },
                "*(uint *)(tempVar + 0xc)": {
                    "1": "temp_var_value2"
                },
                "uint": {
                    "1": "unsigned_integer"
                },
                "0x40013800": {
                    "1": "magic_number_1"
                },
                "'\\x01'": {
                    "1": "character_1"
                },
                "'\\x12'": {
                    "1": "character_2"
                },
                "'\\x32'": {
                    "1": "character_3"
                },
                "'\\x22'": {
                    "1": "character_4"
                },
                "| 0x100": {
                    "1": "bitwise_or_value_1"
                },
                "| 1": {
                    "1": "bitwise_or_value_2"
                },
                "| 0x20": {
                    "1": "bitwise_or_value_3"
                },
                "0x0": {
                    "1": "null_pointer"
                },
                "0x2": {
                    "1": "error_code"
                },
                "*(uint *)(DAT_2000157c + 0xc)": {
                    "1": "config_value"
                },
                "*(uint *)(iVar1 + 0x14)": {
                    "1": "var1"
                },
                "*(uint *)(iVar1 + 0xc)": {
                    "1": "value_4"
                },
                "DAT_20001534": {
                    "1": "data2"
                }
            }
        },
        "FUN_08004c64": {
            "entrypoint": "0x08004c64",
            "current_name": "initialize_data_08004c64",
            "code": "\nvoid initialize_data_08004c64(void)\n\n{\n  int index;\n  \n  index = 0;\n  DAT_20000b64 = 0;\n  DAT_20000b66 = 0;\n  DAT_20000b68 = 0;\n  do {\n    (&DAT_20000364)[index] = 0;\n    index = index + 1;\n  } while (index != 0x800);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004c64": "initialize_data_08004c64",
                "iVar1": "index"
            },
            "calling": [
                "FUN_08004c70"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08004c64": {
                    "27": "initialize_data",
                    "1": "initialize_array",
                    "2": "initialize_memory"
                },
                "iVar1": {
                    "1": "loop_counter",
                    "12": "counter",
                    "17": "index"
                },
                "0": {
                    "1": "init_value"
                },
                "DAT_20000b64": {
                    "2": "data1",
                    "1": "var1"
                },
                "DAT_20000b66": {
                    "1": "value2",
                    "2": "data2"
                },
                "DAT_20000b68": {
                    "1": "variable3",
                    "2": "data3"
                },
                "DAT_20000364": {
                    "1": "dat_arr"
                },
                "&DAT_20000364[iVar1]": {
                    "1": "data[index]"
                }
            }
        },
        "FUN_08004c70": {
            "entrypoint": "0x08004c70",
            "current_name": "initialize_and_check_status_08004c70",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08002902) */\n\nundefined4 initialize_and_check_status_08004c70(void)\n\n{\n  int status;\n  \n  initialize_data();\n  status = DAT_2000157c;\n  if (((DAT_200015b5 == '\\x01') || (DAT_200015b5 == '\\x12')) && (DAT_200015b4 != '\\x01')) {\n    DAT_200015b8 = 0;\n    DAT_200015a8 = 1;\n    DAT_200015aa = 1;\n    DAT_200015b4 = 0;\n    if (DAT_200015b5 == '\\x12') {\n      DAT_200015b5 = 0x32;\n    }\n    else {\n      DAT_200015b5 = 0x22;\n    }\n    DAT_200015a4 = &DAT_20001634;\n    *(uint *)(DAT_2000157c + 0xc) = *(uint *)(DAT_2000157c + 0xc) | 0x100;\n    *(uint *)(status + 0x14) = *(uint *)(status + 0x14) | 1;\n    *(uint *)(status + 0xc) = *(uint *)(status + 0xc) | 0x20;\n    result 0;\n  }\n  result 2;\n}\n\n",
            "renaming": {
                "FUN_08004c70": "initialize_and_check_status_08004c70",
                "iVar1": "status",
                "initialize_data_08004c64": "initialize_data",
                "return": "result"
            },
            "calling": [
                "FUN_08004194"
            ],
            "called": [
                "FUN_08004c64"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08004c70": {
                    "5": "initialize_and_check_flags",
                    "4": "initialize_and_check",
                    "1": "initialize_and_update_settings",
                    "7": "initialize_and_check_status",
                    "2": "initialize_and_configure",
                    "3": "initialize_and_check_data"
                },
                "iVar1": {
                    "4": "data_pointer",
                    "2": "data_var",
                    "1": "status_value",
                    "5": "status"
                },
                "initialize_data_08004c64": {
                    "18": "initialize_data"
                },
                "return": {
                    "2": "result"
                },
                "DAT_2000157c": {
                    "4": "data_1",
                    "1": "data_entry_1",
                    "2": "data_address",
                    "3": "data_ptr"
                },
                "DAT_200015b5": {
                    "1": "condition_variable",
                    "2": "condition_1",
                    "6": "flag1"
                },
                "DAT_200015b4": {
                    "1": "condition_variable2",
                    "2": "condition_2",
                    "6": "flag2"
                },
                "DAT_200015b8": {
                    "1": "config_flag_1",
                    "2": "var1",
                    "5": "flag3",
                    "6": "flag_3"
                },
                "DAT_200015a8": {
                    "1": "flag2",
                    "5": "flag4",
                    "6": "flag_4",
                    "2": "flag_variable_2"
                },
                "DAT_200015aa": {
                    "2": "flag_variable_3",
                    "1": "flag2",
                    "5": "flag5",
                    "6": "flag_5"
                },
                "DAT_200015a4": {
                    "2": "data_pointer2",
                    "1": "pointer_1",
                    "3": "data_ptr"
                },
                "DAT_20001634": {
                    "4": "data",
                    "1": "data_variable8",
                    "3": "data_value"
                },
                "*(uint *)(DAT_2000157c + 0xc)": {
                    "1": "status_value"
                },
                "*(uint *)(iVar1 + 0x14)": {
                    "1": "status_flag1"
                },
                "*(uint *)(iVar1 + 0xc)": {
                    "1": "status_flag2"
                },
                "return 0": {
                    "2": "return_success"
                },
                "return 2": {
                    "1": "return_failure"
                },
                "PTR_CONFIG_DATA_08004c64": {
                    "1": "initialize_data"
                },
                "0x08002902": {
                    "1": "unreachable_block"
                },
                "0x12": {
                    "1": "constant_1"
                },
                "0x32": {
                    "1": "constant_2"
                },
                "0x22": {
                    "1": "constant_3"
                },
                "PTR_08002902": {
                    "1": "unreachable_block"
                },
                "FUN_08004c70+0xc": {
                    "1": "data_variable_1_offset_c"
                },
                "FUN_08004c70+0x14": {
                    "1": "data_variable_1_offset_14"
                }
            }
        },
        "FUN_08004c8c": {
            "entrypoint": "0x08004c8c",
            "current_name": "process_string_08004c8c",
            "code": "\nvoid process_string_08004c8c(undefined *string_data)\n\n{\n  uint end_of_string_index;\n  undefined *current_char;\n  \n  current_char = string_data;\n  while( true ) {\n    end_of_string_index = find_end_of_string(string_data);\n    if (end_of_string_index <= (uint)((int)current_char - (int)string_data)) break;\n    process_single_data(*current_char);\n    current_char = current_char + 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004c8c": "process_string_08004c8c",
                "param_1": "string_data",
                "uVar1": "end_of_string_index",
                "puVar2": "current_char",
                "find_end_of_string_08000150": "find_end_of_string",
                "process_data_08004c18": "process_single_data"
            },
            "calling": [
                "FUN_08004490",
                "FUN_08004300",
                "FUN_08004cac"
            ],
            "called": [
                "FUN_08000150",
                "FUN_08004c18"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08004c8c": {
                    "17": "process_string",
                    "11": "process_string_data",
                    "3": "process_strings"
                },
                "param_1": {
                    "3": "string_array",
                    "4": "string",
                    "9": "string_data",
                    "1": "start_address",
                    "8": "string_ptr"
                },
                "uVar1": {
                    "4": "string_length",
                    "1": "end_pos",
                    "2": "string_end_index",
                    "3": "end_index",
                    "10": "end_of_string_index"
                },
                "puVar2": {
                    "5": "current_character",
                    "2": "current_string",
                    "3": "current_ptr",
                    "1": "current_address",
                    "10": "current_char",
                    "7": "current_char_ptr"
                },
                "find_end_of_string_08000150": {
                    "1": "find_end_of_string"
                },
                "process_data_08004c18": {
                    "1": "process_single_data"
                }
            }
        },
        "FUN_08004cac": {
            "entrypoint": "0x08004cac",
            "current_name": "clear_and_process_data_08004cac",
            "code": "\nvoid clear_and_process_data_08004cac(undefined4 input_param)\n\n{\n  clear_data(&DAT_20001636,&DAT_0800735e,input_param);\n  process_string(&DAT_20001636);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004cac": "clear_and_process_data_08004cac",
                "param_1": "input_param",
                "clear_data_08004ffc": "clear_data",
                "process_string_08004c8c": "process_string"
            },
            "calling": [
                "FUN_08004490"
            ],
            "called": [
                "FUN_08004c8c",
                "FUN_08004ffc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08004cac": {
                    "1": "initialize_data_and_process",
                    "3": "clear_and_process_string",
                    "2": "clear_data_and_process_string",
                    "9": "clear_and_process_data",
                    "4": "initialize_data",
                    "8": "process_and_clear_data"
                },
                "param_1": {
                    "5": "input_parameter",
                    "3": "param",
                    "2": "data_pointer",
                    "1": "status_code",
                    "6": "input_param"
                },
                "clear_data_08004ffc": {
                    "24": "clear_data",
                    "1": "clear_data_function"
                },
                "DAT_20001636": {
                    "3": "data1",
                    "1": "data_buffer"
                },
                "DAT_0800735e": {
                    "1": "clear_value",
                    "3": "data2"
                },
                "process_string_08004c8c": {
                    "1": "process_data",
                    "24": "process_string"
                },
                "FUNC_08004cac_1": {
                    "1": "clear_data"
                },
                "FUNC_08004cac_2": {
                    "1": "process_string"
                },
                "&DAT_20001636": {
                    "1": "data_buffer"
                },
                "&DAT_0800735e": {
                    "1": "additional_data"
                }
            }
        },
        "FUN_08004ccc": {
            "entrypoint": "0x08004ccc",
            "current_name": "configure_and_update_memory_08004ccc",
            "code": "\n\n\nvoid configure_and_update_memory_08004ccc(undefined4 arg1,undefined4 arg2,undefined4 arg3)\n\n{\n  _DAT_40021018 = _DAT_40021018 | 1;\n  configure_memory_protection(3,arg2,_DAT_40021018,1,arg1,1,arg3);\n  update_memory(0xfffffff4,0);\n  update_memory(0xfffffff5,0);\n  update_memory(0xfffffff6,0);\n  update_memory(0xfffffffb,0);\n  update_memory(0xfffffffc,0);\n  update_memory(0xfffffffe,0);\n  update_memory(0xffffffff,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004ccc": "configure_and_update_memory_08004ccc",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arg3",
                "configure_memory_protection_08001170": "configure_memory_protection",
                "update_memory_08001194": "update_memory"
            },
            "calling": [
                "FUN_08001128"
            ],
            "called": [
                "FUN_08001194",
                "FUN_08001170"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08004ccc": {
                    "2": "enable_memory_protection",
                    "1": "initialize_memory_configuration",
                    "19": "configure_and_update_memory",
                    "3": "initialize_memory_protection"
                },
                "param_1": {
                    "1": "first_param",
                    "10": "arg1",
                    "3": "value1",
                    "4": "config_param"
                },
                "param_2": {
                    "1": "limit",
                    "3": "value2",
                    "10": "arg2",
                    "2": "memory_param"
                },
                "param_3": {
                    "1": "third_param",
                    "3": "value3",
                    "10": "arg3"
                },
                "_DAT_40021018": {
                    "1": "memory_protection_register"
                },
                "configure_memory_protection_08001170": {
                    "2": "configure_memory_protection"
                },
                "update_memory_08001194": {
                    "2": "update_memory"
                }
            }
        },
        "FUN_08004d48": {
            "entrypoint": "0x08004d48",
            "current_name": "update_flags_08004d48",
            "code": "\n\n\nvoid update_flags_08004d48(int *flag_ptr,undefined4 value)\n\n{\n  undefined4 flag_value;\n  undefined4 flag_offset;\n  \n  if (*flag_ptr == 0x40005400) {\n    flag_value = 0xc0;\n    flag_offset = 0x12;\n    update_flags_08004d48_08001264(0x40010c00,&flag_value,0x40005400,3,flag_ptr,value);\n    _DAT_4002101c = _DAT_4002101c | 0x200000;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004d48": "update_flags_08004d48",
                "param_1": "flag_ptr",
                "param_2": "value",
                "local_18": "flag_value",
                "local_14": "flag_offset"
            },
            "calling": [
                "FUN_08001754"
            ],
            "called": [
                "FUN_08001264"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08004d48": {
                    "1": "update_process_status",
                    "2": "update_flags_if_param1_matches",
                    "14": "update_flags"
                },
                "param_1": {
                    "3": "flag_address",
                    "1": "flag_data",
                    "6": "flag_ptr",
                    "2": "memory_address"
                },
                "param_2": {
                    "1": "input_param",
                    "11": "value",
                    "4": "param_2",
                    "7": "param"
                },
                "local_18": {
                    "1": "variable1",
                    "2": "offset",
                    "7": "flag_value"
                },
                "local_14": {
                    "1": "variable2",
                    "2": "flag_value_2",
                    "3": "count",
                    "4": "flag_offset"
                },
                "_DAT_4002101c": {
                    "1": "flag_register"
                }
            }
        },
        "FUN_08004d8c": {
            "entrypoint": "0x08004d8c",
            "current_name": "update_flags_08004d8c",
            "code": "\n\n/* WARNING: Restarted to delay deadcode elimination for space: ram */\n\nvoid update_flags_08004d8c(int *value)\n\n{\n  int value;\n  \n  value = *value;\n  if (value == 0x40012c00) {\n    _DAT_40021018 = _DAT_40021018 | 0x800;\n  }\n  else if (value == 0x40000000) {\n    _DAT_4002101c = _DAT_4002101c | 1;\n  }\n  else if (value == 0x40000400) {\n    _DAT_4002101c = _DAT_4002101c | 2;\n  }\n  else if (value == 0x40000800) {\n    _DAT_4002101c = _DAT_4002101c | 4;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004d8c": "update_flags_08004d8c",
                "param_1": "value",
                "iVar1": "value"
            },
            "calling": [
                "FUN_080023d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08004d8c": {
                    "1": "update_control_register",
                    "4": "update_settings",
                    "5": "update_flags",
                    "2": "update_registers",
                    "3": "update_flags_based_on_value"
                },
                "param_1": {
                    "1": "status_flags",
                    "3": "data",
                    "4": "settings",
                    "5": "value",
                    "2": "register_value"
                },
                "iVar1": {
                    "1": "status_value",
                    "17": "value",
                    "3": "data_value",
                    "4": "current_value",
                    "2": "flag_value"
                },
                "_DAT_40021018": {
                    "1": "control_reg"
                },
                "_DAT_4002101c": {
                    "1": "register2"
                }
            }
        },
        "FUN_08004e14": {
            "entrypoint": "0x08004e14",
            "current_name": "update_flags_08004e14",
            "code": "\nvoid update_flags_08004e14(int *input_ptr,undefined4 value_1,undefined4 value_2)\n\n{\n  undefined4 constant_value;\n  int input_value;\n  undefined4 flag_value;\n  undefined4 unused_value;\n  undefined4 stack_value;\n  undefined4 constant_value;\n  \n  input_value = *input_ptr;\n  if (input_value == 0x40012c00) {\n    flag_value = 0x800;\n  }\n  else {\n    if (input_value != 0x40000000) {\n      if (input_value == 0x40000400) {\n        flag_value = 3;\n      }\n      else {\n        if (input_value != 0x40000800) {\n          return;\n        }\n        flag_value = 0x300;\n      }\n      constant_value = 0x40010c00;\n      goto LAB_08004e2e;\n    }\n    flag_value = 2;\n  }\n  constant_value = 0x40010800;\nLAB_08004e2e:\n  constant_value = 2;\n  unused_value = 2;\n  stack_value = value_2;\n  update_flags_08004e14_08001264(constant_value,&flag_value);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004e14": "update_flags_08004e14",
                "param_1": "input_ptr",
                "param_2": "value_1",
                "param_3": "value_2",
                "local_18": "flag_value",
                "local_14": "unused_value",
                "uStack_10": "stack_value",
                "local_c": "constant_value",
                "iVar2": "input_value",
                "uVar1": "constant_value"
            },
            "calling": [
                "FUN_0800458c"
            ],
            "called": [
                "FUN_08001264"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08004e14": {
                    "1": "update_flags_from_param",
                    "3": "update_flag_values",
                    "24": "update_flags"
                },
                "param_1": {
                    "5": "input",
                    "2": "input_array",
                    "1": "input_param",
                    "3": "input_data",
                    "6": "input_ptr"
                },
                "param_2": {
                    "1": "flag_value1",
                    "8": "value_1",
                    "2": "param_2",
                    "4": "unused_param",
                    "5": "value1"
                },
                "param_3": {
                    "1": "constant2",
                    "2": "arg2",
                    "8": "value_2",
                    "5": "value2"
                },
                "local_18": {
                    "1": "flag_constant",
                    "2": "result",
                    "4": "updated_value",
                    "11": "flag_value"
                },
                "local_14": {
                    "2": "updated_value_2",
                    "1": "constant3"
                },
                "uStack_10": {
                    "2": "updated_value_3",
                    "1": "flag_value4",
                    "4": "stack_value"
                },
                "local_c": {
                    "2": "unused_variable_3",
                    "1": "temp_value3",
                    "6": "constant_value",
                    "3": "constant"
                },
                "iVar2": {
                    "1": "pointer_value",
                    "15": "input_value",
                    "5": "value",
                    "2": "data_value"
                },
                "uVar1": {
                    "1": "flag_value",
                    "2": "constant1",
                    "8": "constant_value",
                    "4": "flag_constant"
                }
            }
        },
        "FUN_08004e7c": {
            "entrypoint": "0x08004e7c",
            "current_name": "update_memory_and_flags_08004e7c",
            "code": "\n\n\nvoid update_memory_and_flags_08004e7c(int *param)\n\n{\n  undefined4 flag1;\n  undefined4 flag2;\n  undefined4 flag4;\n  undefined4 flag3;\n  \n  if (*param == 0x40013800) {\n    _DAT_40021018 = _DAT_40021018 | 0x4000;\n    flag1 = 0x200;\n    flag2 = 2;\n    flag3 = 3;\n    update_flags(0x40010800,&flag1);\n    flag1 = 0x400;\n    flag2 = 0;\n    flag4 = 0;\n    update_flags(0x40010800,&flag1);\n    update_memory(0x25,0,0);\n    set_bit_in_array(0x25);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004e7c": "update_memory_and_flags_08004e7c",
                "param_1": "param",
                "local_18": "flag1",
                "local_14": "flag2",
                "local_c": "flag3",
                "local_10": "flag4",
                "update_flags_08001264": "update_flags",
                "update_memory_08001194": "update_memory",
                "set_bit_in_array_080011fc": "set_bit_in_array"
            },
            "calling": [
                "FUN_08002724"
            ],
            "called": [
                "FUN_08001264",
                "FUN_080011fc",
                "FUN_08001194"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08004e7c": {
                    "2": "update_flag_and_memory",
                    "1": "update_data_and_memory",
                    "17": "update_memory_and_flags"
                },
                "param_1": {
                    "2": "input_pointer",
                    "4": "data",
                    "1": "input_param",
                    "3": "input_ptr",
                    "5": "param"
                },
                "local_18": {
                    "1": "value1",
                    "12": "flag1",
                    "3": "size",
                    "7": "flag_value1",
                    "2": "flag_value"
                },
                "local_14": {
                    "1": "value2",
                    "2": "value",
                    "7": "flag_value2",
                    "11": "flag2"
                },
                "local_c": {
                    "1": "update_value3",
                    "4": "flag_value3",
                    "8": "flag3",
                    "3": "flag_value4"
                },
                "local_10": {
                    "1": "value2",
                    "4": "flag3",
                    "3": "flag_value4"
                },
                "*param_1": {
                    "1": "param"
                },
                "update_flags_08001264": {
                    "1": "update_flags"
                },
                "update_memory_08001194": {
                    "1": "update_memory"
                },
                "set_bit_in_array_080011fc": {
                    "1": "set_bit_in_array"
                }
            }
        },
        "FUN_08004f10": {
            "entrypoint": "0x08004f10",
            "current_name": "initialize_registers_08004f10",
            "code": "\n\n\nvoid initialize_registers_08004f10(void)\n\n{\n  _DAT_40021000 = _DAT_40021000 & 0xfef2ffff | 1;\n  _DAT_40021004 = _DAT_40021004 & 0xf8800000;\n  _DAT_40021008 = 0x9f0000;\n  _DAT_e000ed08 = 0x8000000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004f10": "initialize_registers_08004f10"
            },
            "calling": [
                "entry"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08004f10": {
                    "1": "configure_peripheral",
                    "5": "initialize_hardware",
                    "8": "initialize_registers",
                    "6": "initialize_memory"
                },
                "_DAT_40021000": {
                    "1": "status_register1",
                    "7": "register1",
                    "6": "control_register1"
                },
                "_DAT_40021004": {
                    "1": "hardware_register2",
                    "4": "status_register",
                    "6": "control_register2",
                    "7": "register2"
                },
                "_DAT_40021008": {
                    "1": "peripheral_data_reg",
                    "7": "register3",
                    "4": "data_register"
                },
                "_DAT_e000ed08": {
                    "4": "interrupt_register",
                    "1": "status_register",
                    "3": "system_control_register",
                    "2": "interrupt_control",
                    "7": "register4"
                },
                "0xfef2ffff": {
                    "1": "mask_cr1"
                },
                "1": {
                    "1": "flag_cr1"
                },
                "0xf8800000": {
                    "1": "mask_cr2"
                },
                "0x9f0000": {
                    "1": "value_cr3"
                },
                "0x8000000": {
                    "1": "value_shpr"
                }
            }
        },
        "thunk_FUN_0800115c": {
            "entrypoint": "0x08004f60",
            "current_name": "get_data_thunk_0800115c",
            "code": "\nuint32_t get_data_thunk_0800115c(void)\n\n{\n  return DAT_20000244;\n}\n\n",
            "renaming": {
                "thunk_FUN_0800115c": "get_data_thunk_0800115c",
                "undefined4": "uint32_t"
            },
            "calling": [
                "FUN_08002f28"
            ],
            "called": [
                "FUN_0800115c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "thunk_FUN_0800115c": {
                    "5": "get_global_variable",
                    "1": "get_saved_value",
                    "6": "get_data_value",
                    "12": "get_data",
                    "3": "get_dat_value"
                },
                "DAT_20000244": {
                    "8": "data",
                    "4": "global_variable",
                    "1": "saved_value"
                },
                "_DAT_20000244": {
                    "1": "global_value"
                },
                "undefined4": {
                    "1": "uint32_t"
                }
            }
        },
        "thunk_FUN_08001168": {
            "entrypoint": "0x08004f64",
            "current_name": "thunk_FUNC_08001168",
            "code": "\nvoid thunk_FUNC_08001168(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "thunk_FUN_08001168": "thunk_FUNC_08001168"
            },
            "calling": [
                "FUN_08004490",
                "FUN_08003298",
                "FUN_08004028",
                "FUN_0800403c"
            ],
            "called": [
                "FUN_08001168"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "entry": {
            "entrypoint": "0x08004f68",
            "current_name": "entry",
            "code": "\nvoid entry(void)\n\n{\n  int iVar1;\n  undefined4 *puVar2;\n  code *UNRECOVERED_JUMPTABLE;\n  \n  for (iVar1 = 0; (undefined4 *)(iVar1 + 0x20000000) < &DAT_20000228; iVar1 = iVar1 + 4) {\n    *(undefined4 *)(iVar1 + 0x20000000) = *(undefined4 *)(iVar1 + 0x8007448);\n  }\n  for (puVar2 = &DAT_20000228; puVar2 < &DAT_200016a0; puVar2 = puVar2 + 1) {\n    *puVar2 = 0;\n  }\n  initialize_registers_08004f10();\n  execute_functions_08004fb4();\n  UNRECOVERED_JUMPTABLE = (code *)0x8004f9a;\n  process_data_loop_080041ae();\n                    /* WARNING: Could not recover jumptable at 0x08004f9a. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*UNRECOVERED_JUMPTABLE)();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [],
            "called": [
                "FUN_08004fb4",
                "FUN_080041ae",
                "FUN_08004f10"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004fb4": {
            "entrypoint": "0x08004fb4",
            "current_name": "execute_functions_08004fb4",
            "code": "\nvoid execute_functions_08004fb4(void)\n\n{\n  int index;\n  \n  for (index = 0; index != 0; index = index + 1) {\n    (*(function_pointer *)(&DAT_08007440)[index])();\n  }\n  FUNC_080072d4();\n  for (index = 0; index != 1; index = index + 1) {\n    (*(function_pointer *)(&DAT_08007440)[index])();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004fb4": "execute_functions_08004fb4",
                "iVar1": "index",
                "code": "function_pointer"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_080072d4",
                "FUN_08000134"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08004fb4": {
                    "1": "process_functions",
                    "2": "execute_function_sequence",
                    "15": "execute_functions",
                    "4": "execute_all_functions"
                },
                "iVar1": {
                    "1": "callback_index",
                    "6": "counter",
                    "23": "index"
                },
                "FUNC_080072d4": {
                    "1": "execute_startup_functions",
                    "3": "finalize_execution"
                },
                "code": {
                    "1": "function_pointer"
                },
                "(code *)(&DAT_08007440)[iVar1]": {
                    "1": "function_array[index]"
                },
                "(*(code *)(&DAT_08007440)[iVar1])": {
                    "1": "execute_function_at_index"
                }
            }
        },
        "FUN_08004ffc": {
            "entrypoint": "0x08004ffc",
            "current_name": "clear_data_08004ffc",
            "code": "\nvoid clear_data_08004ffc(undefined *data_pointer,undefined4 value1,undefined4 value2,undefined4 value3)\n\n{\n  undefined *local_data [2];\n  undefined4 max_value;\n  undefined2 buffer_size;\n  undefined2 constant2;\n  undefined *current_data;\n  undefined4 max_value_copy;\n  undefined4 temp1;\n  undefined4 temp2;\n  undefined4 temp3;\n  \n  buffer_size = 0x208;\n  max_value = 0x7fffffff;\n  max_value_copy = 0x7fffffff;\n  constant2 = 0xffff;\n  local_data[0] = data_pointer;\n  current_data = data_pointer;\n  temp1 = value1;\n  temp2 = value2;\n  temp3 = value3;\n  process_data_080050fc(DAT_200001c0,local_data,value1);\n  *local_data[0] = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004ffc": "clear_data_08004ffc",
                "param_1": "data_pointer",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3",
                "local_78": "local_data",
                "local_70": "max_value",
                "local_6c": "buffer_size",
                "local_6a": "constant2",
                "local_68": "current_data",
                "local_64": "max_value_copy",
                "uStack_c": "temp1",
                "uStack_8": "temp2",
                "uStack_4": "temp3"
            },
            "calling": [
                "FUN_08004cac"
            ],
            "called": [
                "FUN_080050fc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08004ffc": {
                    "7": "initialize_data",
                    "1": "clear_buffer",
                    "3": "clear_data_and_return",
                    "2": "process_and_clear_data"
                },
                "param_1": {
                    "8": "data",
                    "2": "data_buffer",
                    "1": "input_array",
                    "6": "data_ptr",
                    "10": "data_pointer",
                    "3": "input_data"
                },
                "param_2": {
                    "6": "param2",
                    "1": "length",
                    "2": "param_a",
                    "17": "value1"
                },
                "param_3": {
                    "8": "param3",
                    "2": "value_2",
                    "17": "value2"
                },
                "param_4": {
                    "8": "param4",
                    "2": "value_3",
                    "17": "value3"
                },
                "local_78": {
                    "2": "data_ptr",
                    "7": "local_array",
                    "1": "buffer",
                    "8": "local_data"
                },
                "local_70": {
                    "4": "max_value1",
                    "1": "max_size",
                    "21": "max_value"
                },
                "local_6c": {
                    "1": "local_var1",
                    "10": "buffer_size",
                    "6": "size",
                    "2": "array_size"
                },
                "local_6a": {
                    "2": "mask",
                    "1": "unknown_value",
                    "3": "default_value",
                    "4": "limit",
                    "6": "constant2"
                },
                "local_68": {
                    "1": "local_var3",
                    "3": "current_pointer",
                    "2": "current_data_ptr",
                    "9": "current_data"
                },
                "local_64": {
                    "2": "max_value3",
                    "8": "max_value_copy",
                    "1": "local_var4"
                },
                "uStack_c": {
                    "1": "local_stack_c"
                },
                "uStack_8": {
                    "1": "temp_value2"
                },
                "uStack_4": {
                    "1": "temp_value3"
                }
            }
        },
        "FUN_08005044": {
            "entrypoint": "0x08005044",
            "current_name": "copy_and_reverse_data_08005044",
            "code": "\nundefined4 copy_and_reverse_data_08005044(undefined4 *output_buffer,int *source_buffer,undefined4 data_size,uint length)\n\n{\n  int result;\n  uint new_length;\n  uint source_length;\n  int offset;\n  \n  source_length = source_buffer[2];\n  if ((source_length <= length) && ((*(ushort *)(source_buffer + 3) & 0x480) != 0)) {\n    offset = *source_buffer - source_buffer[4];\n    source_length = (uint)(source_buffer[5] * 3) / 2;\n    new_length = length + 1 + offset;\n    if (source_length < new_length) {\n      source_length = new_length;\n    }\n    if ((int)((uint)*(ushort *)(source_buffer + 3) << 0x15) < 0) {\n      result = allocate_memory(output_buffer,source_length);\n      if (result == 0) {\nLAB_0800508a:\n        *output_buffer = 0xc;\n        *(ushort *)(source_buffer + 3) = *(ushort *)(source_buffer + 3) | 0x40;\n        return 0xffffffff;\n      }\n      copy_data(result,source_buffer[4],offset);\n      *(ushort *)(source_buffer + 3) = *(ushort *)(source_buffer + 3) & 0xfb7f | 0x80;\n    }\n    else {\n      result = process_data(output_buffer,source_buffer[4],source_length);\n      if (result == 0) {\n        reset_data(output_buffer,source_buffer[4]);\n        goto LAB_0800508a;\n      }\n    }\n    source_buffer[4] = result;\n    *source_buffer = result + offset;\n    source_buffer[5] = source_length;\n    source_buffer[2] = source_length - offset;\n    source_length = length;\n  }\n  if (length <= source_length) {\n    source_length = length;\n  }\n  reverse_copy(*source_buffer,data_size,source_length);\n  source_buffer[2] = source_buffer[2] - source_length;\n  *source_buffer = source_length + *source_buffer;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08005044": "copy_and_reverse_data_08005044",
                "param_1": "output_buffer",
                "param_2": "source_buffer",
                "param_3": "data_size",
                "param_4": "length",
                "uVar2": "new_length",
                "uVar3": "source_length",
                "iVar1": "result",
                "iVar4": "offset",
                "allocate_memory_08005714": "allocate_memory",
                "copy_data_08005630": "copy_data",
                "process_data_080057d0": "process_data",
                "process_data_0800567c": "reset_data",
                "reverse_copy_08005646": "reverse_copy"
            },
            "calling": [
                "FUN_080050fc"
            ],
            "called": [
                "FUN_08005646",
                "FUN_080057d0",
                "FUN_08005714",
                "FUN_0800567c",
                "FUN_08005630"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08005044": {
                    "3": "copy_and_reverse",
                    "19": "copy_and_reverse_data",
                    "1": "process_and_reverse"
                },
                "param_1": {
                    "4": "destination_buffer",
                    "1": "result_pointer",
                    "2": "output",
                    "3": "dest",
                    "6": "output_buffer"
                },
                "param_2": {
                    "2": "input",
                    "1": "input_pointer",
                    "4": "source",
                    "7": "source_buffer",
                    "5": "input_data",
                    "3": "src"
                },
                "param_3": {
                    "3": "data",
                    "8": "data_size",
                    "1": "input_data",
                    "7": "data_length",
                    "2": "length"
                },
                "param_4": {
                    "1": "limit",
                    "2": "max_size",
                    "3": "copy_size",
                    "5": "length"
                },
                "uVar2": {
                    "1": "dest_size",
                    "7": "new_size"
                },
                "uVar3": {
                    "1": "src_length",
                    "2": "current_size",
                    "6": "source_length"
                },
                "iVar1": {
                    "2": "memory_address",
                    "1": "allocation_result",
                    "3": "new_address",
                    "12": "result"
                },
                "iVar4": {
                    "1": "source_offset",
                    "15": "offset",
                    "3": "buffer_offset",
                    "2": "difference",
                    "7": "data_offset"
                },
                "allocate_memory_08005714": {
                    "6": "allocate_memory"
                },
                "copy_data_08005630": {
                    "6": "copy_data"
                },
                "process_data_080057d0": {
                    "6": "process_data"
                },
                "process_data_0800567c": {
                    "1": "failed_process_data"
                },
                "reverse_copy_08005646": {
                    "6": "reverse_copy"
                }
            }
        },
        "FUN_080050fc": {
            "entrypoint": "0x080050fc",
            "current_name": "process_data_080050fc",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08005294) */\n\nint process_data_080050fc(undefined4 *output,int *input,byte *format_string,int *memory_buffer)\n\n{\n  int result;\n  int copy_result;\n  int *ptr;\n  bool is_numeric;\n  byte *current_char;\n  byte *next_char;\n  int process_result;\n  int *ptr_array;\n  uint flags;\n  int precision;\n  undefined4 padding;\n  int width;\n  int total_length;\n  byte character;\n  undefined constant1;\n  undefined constant2;\n  undefined flags;\n  undefined4 unused;\n  \n  ptr_array = memory_buffer;\n  if (((int)((uint)*(ushort *)(input + 3) << 0x18) < 0) && (input[4] == 0)) {\n    result = allocate_memory_08005714(output,0x40);\n    *input = result;\n    input[4] = result;\n    if (result == 0) {\n      *output = 0xc;\n      return -1;\n    }\n    input[5] = 0x40;\n  }\n  total_length = 0;\n  constant1 = 0x20;\n  constant2 = 0x30;\n  current_char = format_string;\nLAB_08005146:\n  next_char = current_char;\n  if (*next_char != 0) goto LAB_080051ca;\n  goto LAB_08005150;\nLAB_080051ca:\n  current_char = next_char + 1;\n  if (*next_char != 0x25) goto LAB_08005146;\nLAB_08005150:\n  result = (int)next_char - (int)format_string;\n  if (result != 0) {\n    copy_result = copy_and_reverse_data_08005044(output,input,format_string,result);\n    if (copy_result == -1) {\nLAB_080052ac:\n      if ((int)((uint)*(ushort *)(input + 3) << 0x19) < 0) {\n        return -1;\n      }\n      return total_length;\n    }\n    total_length = total_length + result;\n  }\n  if (*next_char == 0) goto LAB_080052ac;\n  flags = 0;\n  width = 0;\n  precision = -1;\n  padding = 0;\n  flags = 0;\n  unused = 0;\n  current_char = next_char + 1;\n  while( true ) {\n    result = find_character_08005614(&DAT_08007379,*current_char);\n    format_string = current_char + 1;\n    if (result == 0) break;\n    flags = 1 << (result + 0xf7ff8c87U & 0xff) | flags;\n    current_char = format_string;\n  }\n  if ((int)(flags << 0x1b) < 0) {\n    flags = 0x20;\n  }\n  if ((int)(flags << 0x1c) < 0) {\n    flags = 0x2b;\n  }\n  if (*current_char == 0x2a) {\n    ptr = ptr_array + 1;\n    result = *ptr_array;\n    ptr_array = ptr;\n    if (result < 0) {\n      width = -result;\n      flags = flags | 2;\n      goto LAB_080051fc;\n    }\n  }\n  else {\n    is_numeric = false;\n    result = width;\n    format_string = current_char;\n    while( true ) {\n      if (9 < *format_string - 0x30) break;\n      result = result * 10 + (*format_string - 0x30);\n      is_numeric = true;\n      format_string = format_string + 1;\n    }\n    if (!is_numeric) goto LAB_080051fc;\n  }\n  width = result;\nLAB_080051fc:\n  if (*format_string == 0x2e) {\n    if (format_string[1] == 0x2a) {\n      format_string = format_string + 2;\n      ptr = ptr_array + 1;\n      precision = *ptr_array;\n      ptr_array = ptr;\n      if (precision < 0) {\n        precision = -1;\n      }\n    }\n    else {\n      is_numeric = false;\n      result = 0;\n      precision = 0;\n      while( true ) {\n        format_string = format_string + 1;\n        if (9 < *format_string - 0x30) break;\n        result = result * 10 + (*format_string - 0x30);\n        is_numeric = true;\n      }\n      if (is_numeric) {\n        precision = result;\n      }\n    }\n  }\n  result = find_character_08005614(&DAT_0800737f,*format_string,3);\n  if (result != 0) {\n    format_string = format_string + 1;\n    flags = flags | 0x40 << (result + 0xf7ff8c81U & 0xff);\n  }\n  character = *format_string;\n  format_string = format_string + 1;\n  result = find_character_08005614(\"efgEFG\",character,6);\n  if (result == 0) {\n    process_result = process_data_080050fc_080053d4(output,&flags,input,0x8005045,&ptr_array);\n    if (process_result == -1) goto LAB_080052ac;\n  }\n  else {\n    ptr_array = (int *)(((int)ptr_array + 7U & 0xfffffff8) + 8);\n  }\n  total_length = total_length + process_result;\n  current_char = format_string;\n  goto LAB_08005146;\n}\n\n",
            "renaming": {
                "FUN_080050fc": "process_data_080050fc",
                "param_1": "output",
                "param_2": "input",
                "param_3": "format_string",
                "param_4": "memory_buffer",
                "iVar1": "result",
                "iVar2": "copy_result",
                "piVar3": "ptr",
                "bVar4": "is_numeric",
                "pbVar5": "current_char",
                "pbVar6": "next_char",
                "unaff_r9": "process_result",
                "local_8c": "ptr_array",
                "local_88": "flags",
                "local_84": "precision",
                "local_80": "padding",
                "local_7c": "width",
                "local_74": "total_length",
                "local_70": "character",
                "local_6f": "constant1",
                "local_6e": "constant2",
                "local_45": "flags",
                "local_30": "unused",
                "local_8": "temp_char3"
            },
            "calling": [
                "FUN_08004ffc"
            ],
            "called": [
                "FUN_08005614",
                "FUN_08005714",
                "FUN_080053d4",
                "FUN_08005044"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080050fc": {
                    "2": "parse_and_process_data",
                    "23": "process_data",
                    "1": "extract_and_process_data"
                },
                "param_1": {
                    "1": "result_code",
                    "3": "result",
                    "4": "error_code",
                    "7": "output",
                    "5": "output_buffer"
                },
                "param_2": {
                    "7": "input",
                    "4": "input_buffer",
                    "1": "output_buffer",
                    "2": "input_data"
                },
                "param_3": {
                    "1": "ptr_data",
                    "3": "pattern",
                    "2": "input_data",
                    "8": "format_string"
                },
                "param_4": {
                    "1": "output_buffer",
                    "2": "buffer",
                    "3": "memory_ptr",
                    "4": "memory"
                },
                "iVar1": {
                    "6": "index1",
                    "1": "current_index",
                    "4": "index",
                    "10": "result"
                },
                "iVar2": {
                    "6": "index2",
                    "1": "temp2",
                    "14": "copy_result",
                    "8": "result"
                },
                "piVar3": {
                    "1": "ptr_array",
                    "2": "pointer",
                    "10": "ptr",
                    "3": "local_ptr"
                },
                "bVar4": {
                    "5": "is_number",
                    "2": "found_digit",
                    "6": "is_numeric",
                    "3": "has_digit",
                    "1": "is_valid"
                },
                "pbVar5": {
                    "1": "ptr_pb_var5",
                    "13": "current_char",
                    "2": "byte_ptr1",
                    "6": "current_byte"
                },
                "pbVar6": {
                    "1": "byte_pointer2",
                    "6": "next_byte",
                    "3": "byte_ptr2",
                    "11": "next_char",
                    "2": "ptr_start"
                },
                "unaff_r9": {
                    "4": "processing_result",
                    "1": "temp_var",
                    "2": "data_length",
                    "3": "result"
                },
                "local_8c": {
                    "1": "alloc_pointer",
                    "2": "ptr_list",
                    "3": "ptr_array"
                },
                "local_88": {
                    "5": "flag",
                    "2": "character_mask",
                    "1": "modifiers",
                    "19": "flags"
                },
                "local_84": {
                    "1": "number_1",
                    "10": "precision",
                    "2": "value1"
                },
                "local_80": {
                    "1": "offset",
                    "2": "value2",
                    "3": "unused"
                },
                "local_7c": {
                    "1": "integer_part",
                    "2": "value",
                    "8": "width"
                },
                "local_74": {
                    "1": "result",
                    "10": "total_size",
                    "2": "total_processed",
                    "11": "total_length",
                    "3": "total"
                },
                "local_70": {
                    "1": "command",
                    "6": "character",
                    "3": "format_char",
                    "2": "conversion"
                },
                "local_6f": {
                    "1": "local_character1",
                    "3": "constant1",
                    "2": "constant_0x20"
                },
                "local_6e": {
                    "3": "constant2",
                    "1": "local_character2",
                    "2": "constant_0x30"
                },
                "local_45": {
                    "1": "alignment_flag",
                    "2": "constant3",
                    "3": "flags"
                },
                "local_30": {
                    "1": "zero2",
                    "2": "unused"
                },
                "local_3c": {
                    "1": "temp_value2"
                },
                "local_38": {
                    "1": "temp_value3"
                },
                "local_34": {
                    "1": "temp_flag2"
                },
                "local_28": {
                    "1": "temp_flag3"
                },
                "local_20": {
                    "1": "temp_flag4"
                },
                "local_1c": {
                    "1": "temp_flag5"
                },
                "local_18": {
                    "1": "temp_flag6"
                },
                "local_14": {
                    "1": "temp_flag7"
                },
                "local_10": {
                    "1": "temp_value7"
                },
                "local_c": {
                    "1": "temp_char2"
                },
                "local_8": {
                    "1": "temp_char3"
                },
                "DAT_08007379": {
                    "2": "character_set1",
                    "1": "valid_characters1"
                },
                "DAT_0800737f": {
                    "2": "character_set2",
                    "1": "valid_characters2"
                }
            }
        },
        "FUN_080052e4": {
            "entrypoint": "0x080052e4",
            "current_name": "process_data_080052e4",
            "code": "\nundefined4\nprocess_data_080052e4(undefined4 input,uint *data,uint *output,undefined4 param4,code *callback)\n\n{\n  int index;\n  int result;\n  uint max_value;\n  uint offset;\n  bool is_condition_met;\n  \n  max_value = data[4];\n  if ((int)data[4] < (int)data[2]) {\n    max_value = data[2];\n  }\n  *output = max_value;\n  if (*(char *)((int)data + 0x43) != '\\0') {\n    *output = max_value + 1;\n  }\n  if ((int)(*data << 0x1a) < 0) {\n    *output = *output + 2;\n  }\n  if ((*data & 6) == 0) {\n    for (index = 0; index < (int)(data[3] - *output); index = index + 1) {\n      result = (*callback)(input,param4,(int)data + 0x19,1);\n      if (result == -1) {\n        return 0xffffffff;\n      }\n    }\n  }\n  max_value = (uint)*(byte *)((int)data + 0x43);\n  if (max_value != 0) {\n    max_value = 1;\n  }\n  offset = max_value;\n  if ((int)(*data << 0x1a) < 0) {\n    *(undefined *)((int)data + max_value + 0x43) = 0x30;\n    offset = max_value + 2;\n    *(undefined *)((int)data + max_value + 0x44) = *(undefined *)((int)data + 0x45);\n  }\n  index = (*callback)(input,param4,(int)data + 0x43,offset);\n  if (index != -1) {\n    max_value = data[3];\n    is_condition_met = (*data & 6) != 4;\n    if (is_condition_met) {\n      max_value = 0;\n    }\n    offset = 0;\n    if (!is_condition_met) {\n      max_value = max_value - *output;\n    }\n    if (!is_condition_met) {\n      max_value = max_value & ~((int)max_value >> 0x1f);\n    }\n    if ((int)data[4] < (int)data[2]) {\n      max_value = max_value + (data[2] - data[4]);\n    }\n    while( true ) {\n      if (max_value == offset) {\n        return 0;\n      }\n      index = (*callback)(input,param4,(int)data + 0x1a,1);\n      if (index == -1) break;\n      offset = offset + 1;\n    }\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_080052e4": "process_data_080052e4",
                "param_1": "input",
                "param_2": "data",
                "param_3": "output",
                "param_4": "param4",
                "param_5": "callback",
                "iVar1": "index",
                "iVar2": "result",
                "uVar3": "max_value",
                "uVar4": "offset",
                "bVar5": "is_condition_met"
            },
            "calling": [
                "FUN_080053d4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080052e4": {
                    "1": "reverse_and_count",
                    "14": "process_data",
                    "2": "decode_and_process_data"
                },
                "param_1": {
                    "13": "input",
                    "5": "data",
                    "1": "input_param",
                    "2": "input_data"
                },
                "param_2": {
                    "1": "input_2",
                    "11": "data",
                    "5": "data_array",
                    "4": "input_array",
                    "2": "info"
                },
                "param_3": {
                    "1": "output_array_length",
                    "8": "output",
                    "3": "result"
                },
                "param_4": {
                    "1": "arg4",
                    "7": "param_4",
                    "2": "extra_param",
                    "6": "param"
                },
                "param_5": {
                    "18": "callback",
                    "4": "callback_func",
                    "7": "callback_function",
                    "1": "data_processing_func"
                },
                "iVar1": {
                    "1": "loop_index_1",
                    "2": "count",
                    "17": "index"
                },
                "iVar2": {
                    "1": "counter_2",
                    "2": "j",
                    "3": "callback_result",
                    "17": "result"
                },
                "uVar3": {
                    "1": "min_size",
                    "11": "max_size",
                    "3": "max_output_size"
                },
                "uVar4": {
                    "1": "bytes_written",
                    "2": "increment",
                    "11": "offset"
                },
                "bVar5": {
                    "4": "flag",
                    "2": "has_flag",
                    "1": "is_true",
                    "6": "condition",
                    "7": "is_condition_met"
                }
            }
        },
        "FUN_080053d4": {
            "entrypoint": "0x080053d4",
            "current_name": "process_data_080053d4",
            "code": "\nuint process_data_080053d4(undefined4 input_value,uint *data_array,undefined4 param_3,code *callback_function,uint **output_array)\n\n{\n  byte byte_value;\n  int index;\n  uint *ptr;\n  int result;\n  char *char_ptr;\n  uint base;\n  uint **pp_buffer_ptr;\n  char **char_ptr_ptr;\n  uint value;\n  uint length;\n  char *output;\n  char *char_ptr_3;\n  uint local_array [2];\n  \n  byte_value = *(byte *)(data_array + 6);\n  char_ptr_3 = (char *)((int)data_array + 0x43);\n  if (byte_value != 0x6e) {\n    if (byte_value < 0x6f) {\n      if (byte_value != 99) {\n        if (byte_value < 100) {\n          if (byte_value == 0) goto LAB_0800558e;\n          if (byte_value != 0x58) goto LAB_08005404;\n          *(undefined *)((int)data_array + 0x45) = 0x58;\n          char_ptr = \"0123456789ABCDEF\";\nLAB_0800551e:\n          base = *data_array;\n          ptr = *output_array;\n          *output_array = ptr + 1;\n          if (((base & 0x80) == 0) && ((int)(base << 0x19) < 0)) {\n            value = (uint)*(ushort *)ptr;\n          }\n          else {\n            value = *ptr;\n          }\n          if ((int)(base << 0x1f) < 0) {\n            *data_array = base | 0x20;\n          }\n          if (value == 0) {\n            *data_array = *data_array & 0xffffffdf;\n          }\n          base = 0x10;\nLAB_080054b4:\n          *(undefined *)((int)data_array + 0x43) = 0;\n        }\n        else {\n          if ((byte_value != 100) && (byte_value != 0x69)) goto LAB_08005404;\n          value = *data_array;\n          ptr = *output_array;\n          if ((value & 0x80) == 0) {\n            *output_array = ptr + 1;\n            if ((value & 0x40) == 0) goto LAB_08005424;\n            value = (uint)(short)*(ushort *)ptr;\n          }\n          else {\n            *output_array = ptr + 1;\nLAB_08005424:\n            value = *ptr;\n          }\n          if ((int)value < 0) {\n            value = -value;\n            *(undefined *)((int)data_array + 0x43) = 0x2d;\n          }\n          char_ptr = \"0123456789ABCDEF\";\n          base = 10;\n        }\n        length = data_array[1];\n        data_array[2] = length;\n        output = char_ptr_3;\n        if ((int)length < 0) {\n          if (value != 0) goto LAB_08005552;\nLAB_08005600:\n          *(char *)((int)data_array + 0x42) = *char_ptr;\n          output = (char *)((int)data_array + 0x42);\n        }\n        else {\n          *data_array = *data_array & 0xfffffffb;\n          if (value == 0) {\n            if (length != 0) goto LAB_08005600;\n          }\n          else {\nLAB_08005552:\n            do {\n              length = value / base;\n              output = output + -1;\n              *output = char_ptr[value - base * length];\n              value = length;\n            } while (length != 0);\n          }\n        }\n        if (((base == 8) && ((int)(*data_array << 0x1f) < 0)) && ((int)data_array[1] <= (int)data_array[4]))\n        {\n          output[-1] = '0';\n          output = output + -1;\n        }\n        data_array[4] = (int)char_ptr_3 - (int)output;\n        char_ptr_3 = output;\n        goto LAB_080054fa;\n      }\n      ptr = *output_array;\n      *output_array = ptr + 1;\n      *(char *)((int)data_array + 0x42) = (char)*ptr;\nLAB_08005464:\n      char_ptr_3 = (char *)((int)data_array + 0x42);\n      value = 1;\n    }\n    else {\n      if (byte_value != 0x73) {\n        if (byte_value < 0x74) {\n          if (byte_value == 0x6f) {\nLAB_0800548a:\n            value = *data_array;\n            ptr = *output_array;\n            if ((value & 0x80) == 0) {\n              *output_array = ptr + 1;\n              if ((value & 0x40) == 0) goto LAB_08005498;\n              value = (uint)*(ushort *)ptr;\n            }\n            else {\n              *output_array = ptr + 1;\nLAB_08005498:\n              value = *ptr;\n            }\n            if (byte_value == 0x6f) {\n              base = 8;\n            }\n            else {\n              base = 10;\n            }\n            char_ptr = \"0123456789ABCDEF\";\n            goto LAB_080054b4;\n          }\n          if (byte_value == 0x70) {\n            *data_array = *data_array | 0x20;\nLAB_0800544a:\n            char_ptr = \"0123456789abcdef\";\n            *(undefined *)((int)data_array + 0x45) = 0x78;\n            goto LAB_0800551e;\n          }\n        }\n        else {\n          if (byte_value == 0x75) goto LAB_0800548a;\n          if (byte_value == 0x78) goto LAB_0800544a;\n        }\nLAB_08005404:\n        *(byte *)((int)data_array + 0x42) = byte_value;\n        goto LAB_08005464;\n      }\n      char_ptr_ptr = (char **)*output_array;\n      *output_array = (uint *)(char_ptr_ptr + 1);\n      char_ptr_3 = *char_ptr_ptr;\n      index = find_character_08005614(char_ptr_3,0,data_array[1]);\n      if (index != 0) {\n        data_array[1] = index - (int)char_ptr_3;\n      }\n      value = data_array[1];\n    }\n    data_array[4] = value;\n    *(undefined *)((int)data_array + 0x43) = 0;\n    goto LAB_080054fa;\n  }\n  value = *data_array;\n  pp_buffer_ptr = (uint **)*output_array;\n  base = data_array[5];\n  if ((value & 0x80) == 0) {\n    *output_array = (uint *)(pp_buffer_ptr + 1);\n    ptr = *pp_buffer_ptr;\n    if ((value & 0x40) == 0) goto LAB_0800557a;\n    *(short *)ptr = (short)base;\n  }\n  else {\n    *output_array = (uint *)(pp_buffer_ptr + 1);\n    ptr = *pp_buffer_ptr;\nLAB_0800557a:\n    *ptr = base;\n  }\nLAB_0800558e:\n  data_array[4] = 0;\nLAB_080054fa:\n  index = process_data_080053d4_080052e4(input_value,data_array,local_array,param_3,callback_function);\n  if ((index == -1) || (index = (*callback_function)(input_value,param_3,char_ptr_3,data_array[4]), index == -1)) {\nLAB_0800550e:\n    value = 0xffffffff;\n  }\n  else {\n    if ((int)(*data_array << 0x1e) < 0) {\n      for (index = 0; index < (int)(data_array[3] - local_array[0]); index = index + 1) {\n        result = (*callback_function)(input_value,param_3,(int)data_array + 0x19,1);\n        if (result == -1) goto LAB_0800550e;\n      }\n    }\n    value = data_array[3];\n    if ((int)data_array[3] < (int)local_array[0]) {\n      value = local_array[0];\n    }\n  }\n  return value;\n}\n\n",
            "renaming": {
                "FUN_080053d4": "process_data_080053d4",
                "param_1": "input_value",
                "param_2": "data_array",
                "param_4": "callback_function",
                "param_5": "output_array",
                "bVar1": "byte_value",
                "iVar2": "index",
                "puVar3": "ptr",
                "iVar4": "result",
                "pcVar5": "char_ptr",
                "uVar6": "base",
                "uVar9": "value",
                "uVar10": "length",
                "pcVar11": "output",
                "pcVar12": "char_ptr_3",
                "local_24": "local_array",
                "ppuVar7": "pp_buffer_ptr",
                "ppcVar8": "char_ptr_ptr"
            },
            "calling": [
                "FUN_080050fc"
            ],
            "called": [
                "FUN_08005614",
                "FUN_080052e4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080053d4": {
                    "1": "reverse_and_process",
                    "6": "process_data",
                    "3": "process_and_validate_data",
                    "2": "decode_and_process_data",
                    "4": "convert_and_process_data"
                },
                "param_1": {
                    "4": "param1",
                    "1": "input1",
                    "3": "input_param",
                    "5": "input_value"
                },
                "param_2": {
                    "1": "arg2",
                    "6": "data_array",
                    "5": "data",
                    "2": "input_2",
                    "3": "input_array"
                },
                "param_3": {
                    "3": "arg3",
                    "1": "length",
                    "4": "param3",
                    "6": "param_3",
                    "2": "param"
                },
                "param_4": {
                    "1": "input4",
                    "9": "callback_function",
                    "3": "callback_func"
                },
                "param_5": {
                    "1": "arg_5",
                    "2": "output_array"
                },
                "bVar1": {
                    "2": "first_byte",
                    "1": "data_byte",
                    "19": "byte_value",
                    "6": "byte_val"
                },
                "iVar2": {
                    "1": "int_var1",
                    "2": "index_var",
                    "20": "index",
                    "3": "result"
                },
                "puVar3": {
                    "1": "ptr_value",
                    "2": "ptr_var",
                    "5": "pointer",
                    "11": "ptr"
                },
                "iVar4": {
                    "1": "data_processing_result",
                    "3": "inner_index",
                    "2": "temp_var",
                    "8": "result"
                },
                "pcVar5": {
                    "1": "char_pointer_var",
                    "7": "char_ptr",
                    "5": "hex_chars",
                    "2": "char_pointer"
                },
                "uVar6": {
                    "2": "value",
                    "1": "uint_val",
                    "5": "temp_value",
                    "13": "base"
                },
                "uVar9": {
                    "1": "var_9",
                    "2": "uint_var2",
                    "8": "value",
                    "7": "result"
                },
                "uVar10": {
                    "2": "temp",
                    "1": "unsigned_var3",
                    "3": "temp_value2",
                    "7": "length"
                },
                "pcVar11": {
                    "1": "formatted_data",
                    "2": "char_ptr2",
                    "4": "char_ptr_2",
                    "7": "output"
                },
                "pcVar12": {
                    "1": "input_pointer",
                    "2": "input_string",
                    "3": "char_ptr_3"
                },
                "local_24": {
                    "2": "output_length",
                    "10": "local_array",
                    "1": "output_metrics",
                    "3": "temp_array"
                },
                "ppuVar7": {
                    "1": "ptr_ptr_var1"
                },
                "ppcVar8": {
                    "1": "string_ptr",
                    "2": "char_ptr_ptr"
                }
            }
        },
        "FUN_08005614": {
            "entrypoint": "0x08005614",
            "current_name": "find_character_08005614",
            "code": "\nchar * find_character_08005614(char *string,char character,int length)\n\n{\n  char *current_char;\n  char *next_char;\n  \n  current_char = string;\n  do {\n    next_char = current_char;\n    if (next_char == string + length) {\n      return (char *)0x0;\n    }\n    current_char = next_char + 1;\n  } while (*next_char != character);\n  return next_char;\n}\n\n",
            "renaming": {
                "FUN_08005614": "find_character_08005614",
                "param_1": "string",
                "param_2": "character",
                "param_3": "length",
                "pcVar1": "current_char",
                "pcVar2": "next_char"
            },
            "calling": [
                "FUN_080053d4",
                "FUN_080050fc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08005614": {
                    "3": "find_char_in_string",
                    "2": "find_character_position",
                    "17": "find_character",
                    "7": "find_first_occurrence"
                },
                "param_1": {
                    "23": "string",
                    "1": "input_string",
                    "6": "str"
                },
                "param_2": {
                    "4": "target_char",
                    "22": "character",
                    "1": "target_character",
                    "2": "target"
                },
                "param_3": {
                    "4": "string_length",
                    "27": "length"
                },
                "pcVar1": {
                    "4": "current_character",
                    "1": "current_char_ptr",
                    "2": "current_position",
                    "14": "current_char"
                },
                "pcVar2": {
                    "2": "next_position",
                    "1": "found_char_ptr",
                    "3": "next_character",
                    "14": "next_char"
                }
            }
        },
        "FUN_08005630": {
            "entrypoint": "0x08005630",
            "current_name": "copy_data_08005630",
            "code": "\nvoid copy_data_08005630(int buffer_start,undefined *source_data,int data_length)\n\n{\n  undefined *source_end;\n  undefined *buffer_end;\n  \n  buffer_end = (undefined *)(buffer_start + -1);\n  source_end = source_data + data_length;\n  for (; source_data != source_end; source_data = source_data + 1) {\n    buffer_end = buffer_end + 1;\n    *buffer_end = *source_data;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005630": "copy_data_08005630",
                "param_1": "buffer_start",
                "param_2": "source_data",
                "param_3": "data_length",
                "puVar1": "source_end",
                "puVar2": "buffer_end"
            },
            "calling": [
                "FUN_080057d0",
                "FUN_08005044"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08005630": {
                    "1": "copy_array",
                    "4": "copy_data_to_buffer",
                    "2": "copy_bytes",
                    "14": "copy_data",
                    "3": "copy_data_to_destination"
                },
                "param_1": {
                    "3": "src_offset",
                    "1": "input_address",
                    "2": "destination_index"
                },
                "param_2": {
                    "1": "src",
                    "12": "source_data",
                    "4": "source",
                    "2": "source_array"
                },
                "param_3": {
                    "1": "src_length",
                    "12": "data_length",
                    "2": "count",
                    "4": "size",
                    "5": "length"
                },
                "puVar1": {
                    "5": "source_end",
                    "1": "end_index",
                    "2": "dst_data_end",
                    "4": "destination_end"
                },
                "puVar2": {
                    "2": "dest_index",
                    "1": "current_address",
                    "3": "dest_end"
                }
            }
        },
        "FUN_08005646": {
            "entrypoint": "0x08005646",
            "current_name": "reverse_copy_08005646",
            "code": "\nvoid reverse_copy_08005646(undefined *dest,undefined *src,int length)\n\n{\n  undefined *src_end;\n  \n  src_end = src + length;\n  if ((src < dest) && (dest < src_end)) {\n    dest = dest + length;\n    length = length - (int)src_end;\n    while (src_end + length != (undefined *)0x0) {\n      src_end = src_end + -1;\n      dest = dest + -1;\n      *dest = *src_end;\n    }\n    return;\n  }\n  dest = dest + -1;\n  for (; src != src_end; src = src + 1) {\n    dest = dest + 1;\n    *dest = *src;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005646": "reverse_copy_08005646",
                "param_1": "dest",
                "param_2": "src",
                "param_3": "length",
                "puVar1": "src_end"
            },
            "calling": [
                "FUN_08005044"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08005646": {
                    "2": "copy_data",
                    "1": "copy_and_paste",
                    "5": "copy_memory",
                    "6": "copy_and_reverse",
                    "7": "reverse_copy"
                },
                "param_1": {
                    "10": "destination",
                    "15": "dest",
                    "4": "source",
                    "1": "src"
                },
                "param_2": {
                    "1": "dest",
                    "4": "destination",
                    "10": "source",
                    "15": "src"
                },
                "param_3": {
                    "1": "n",
                    "19": "length",
                    "10": "size"
                },
                "puVar1": {
                    "9": "src_end",
                    "3": "end",
                    "1": "end_pointer",
                    "5": "end_ptr",
                    "4": "dest_end"
                },
                "param_1 + param_3": {
                    "1": "dest_addr",
                    "2": "dest_end"
                },
                "param_3 - (int)puVar1": {
                    "1": "len_remaining"
                },
                "param_2 + param_3": {
                    "1": "end_addr"
                },
                "PTR_08005646": {
                    "1": "data_segment_pointer"
                }
            }
        },
        "FUN_0800567c": {
            "entrypoint": "0x0800567c",
            "current_name": "process_data_0800567c",
            "code": "\nvoid process_data_0800567c(undefined4 *output,int size,undefined4 param3,undefined4 param4)\n\n{\n  int **temp;\n  int **temp_ptr1;\n  int **temp_ptr2;\n  int *temp_var;\n  int **temp_ptr3;\n  int **temp_ptr5;\n  \n  if (size == 0) {\n    return;\n  }\n  temp_ptr5 = (int **)(size + -4);\n  if (*(int *)(size + -4) < 0) {\n    temp_ptr5 = (int **)((int)temp_ptr5 + *(int *)(size + -4));\n  }\n  FUNC_0800583c();\n  temp_ptr2 = (int **)&DAT_200002ac;\n  if (DAT_200002ac == (int **)0x0) {\n    temp_ptr5[1] = (int *)0x0;\n    temp_ptr1 = temp;\n    DAT_200002ac = temp_ptr5;\n  }\n  else {\n    temp_ptr2 = DAT_200002ac;\n    if (temp_ptr5 < DAT_200002ac) {\n      temp_ptr1 = (int **)*temp_ptr5;\n      temp_ptr2 = (int **)((int)temp_ptr5 + (int)temp_ptr1);\n      if (DAT_200002ac == temp_ptr2) {\n        temp_var = *DAT_200002ac;\n        DAT_200002ac = (int **)DAT_200002ac[1];\n        temp_ptr2 = (int **)((int)temp_var + (int)temp_ptr1);\n        *temp_ptr5 = (int *)temp_ptr2;\n      }\n      temp_ptr5[1] = (int *)DAT_200002ac;\n      DAT_200002ac = temp_ptr5;\n    }\n    else {\n      do {\n        temp_ptr3 = temp_ptr2;\n        temp_ptr2 = (int **)temp_ptr3[1];\n        if (temp_ptr2 == (int **)0x0) break;\n      } while (temp_ptr2 <= temp_ptr5);\n      temp_ptr1 = (int **)*temp_ptr3;\n      if ((int **)((int)temp_ptr3 + (int)temp_ptr1) == temp_ptr5) {\n        temp_ptr1 = (int **)((int)temp_ptr1 + (int)*temp_ptr5);\n        *temp_ptr3 = (int *)temp_ptr1;\n        if (temp_ptr2 == (int **)((int)temp_ptr3 + (int)temp_ptr1)) {\n          temp_var = *temp_ptr2;\n          temp_ptr2 = (int **)temp_ptr2[1];\n          temp_ptr1 = (int **)((int)temp_ptr1 + (int)temp_var);\n          *temp_ptr3 = (int *)temp_ptr1;\n          temp_ptr3[1] = (int *)temp_ptr2;\n        }\n      }\n      else if (temp_ptr5 < (int **)((int)temp_ptr3 + (int)temp_ptr1)) {\n        *output = 0xc;\n      }\n      else {\n        temp_ptr1 = (int **)((int)temp_ptr5 + (int)*temp_ptr5);\n        if (temp_ptr2 == temp_ptr1) {\n          temp_var = *temp_ptr2;\n          temp_ptr2 = (int **)temp_ptr2[1];\n          temp_ptr1 = (int **)((int)temp_var + (int)*temp_ptr5);\n          *temp_ptr5 = (int *)temp_ptr1;\n        }\n        temp_ptr5[1] = (int *)temp_ptr2;\n        temp_ptr3[1] = (int *)temp_ptr5;\n      }\n    }\n  }\n  FUNC_0800583e(output,temp_ptr1,temp_ptr2,param4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800567c": "process_data_0800567c",
                "param_1": "output",
                "param_2": "size",
                "param_3": "param3",
                "param_4": "param4",
                "ppiVar1": "temp_ptr1",
                "ppiVar2": "temp_ptr2",
                "piVar3": "temp_var",
                "ppiVar4": "temp_ptr3",
                "ppiVar5": "temp_ptr5",
                "extraout_r1": "temp"
            },
            "calling": [
                "FUN_080057d0",
                "FUN_08005044"
            ],
            "called": [
                "FUN_0800583e",
                "FUN_0800583c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800567c": {
                    "2": "rearrange_data",
                    "11": "process_data",
                    "1": "update_data",
                    "3": "update_data_structure"
                },
                "param_1": {
                    "2": "result_ptr",
                    "1": "output_list",
                    "11": "result"
                },
                "param_2": {
                    "1": "list_size",
                    "2": "array_size",
                    "3": "data_size",
                    "13": "size",
                    "4": "length"
                },
                "param_3": {
                    "1": "param",
                    "12": "param3",
                    "2": "arg3",
                    "5": "param_3"
                },
                "param_4": {
                    "1": "var2",
                    "2": "arg2",
                    "12": "param4",
                    "5": "param_4"
                },
                "ppiVar1": {
                    "1": "temp_var1",
                    "2": "temp2",
                    "3": "ptr1",
                    "8": "temp_ptr1"
                },
                "ppiVar2": {
                    "1": "temp2",
                    "2": "temp_ptr_2",
                    "8": "temp_ptr2",
                    "3": "ptr2"
                },
                "piVar3": {
                    "3": "temp_var1",
                    "2": "temp_node",
                    "1": "temp_pointer",
                    "6": "temp_var"
                },
                "ppiVar4": {
                    "2": "temp_ptr_3",
                    "1": "iter_node",
                    "4": "temp_ptr4",
                    "5": "temp_ptr3",
                    "3": "ptr4"
                },
                "ppiVar5": {
                    "3": "new_node",
                    "1": "data_1",
                    "2": "temp_ptr_4",
                    "4": "temp_ptr5"
                },
                "extraout_r1": {
                    "1": "result_1",
                    "4": "temp",
                    "2": "extra_output1",
                    "3": "extra_output"
                },
                "FUNC_0800583c": {
                    "1": "initialize_list"
                },
                "DAT_200002ac": {
                    "1": "list_head"
                },
                "FUNC_0800583e": {
                    "1": "finalize_list"
                }
            }
        },
        "FUN_08005714": {
            "entrypoint": "0x08005714",
            "current_name": "allocate_memory_08005714",
            "code": "\nuint allocate_memory_08005714(undefined4 *buffer,uint size)\n\n{\n  uint *current_block;\n  int difference;\n  uint *previous_block;\n  uint block_difference;\n  uint *previous_block;\n  uint allocated_size;\n  \n  allocated_size = (size + 3 & 0xfffffffc) + 8;\n  if (allocated_size < 0xc) {\n    allocated_size = 0xc;\n  }\n  if (((int)allocated_size < 0) || (allocated_size < size)) {\n    *buffer = 0xc;\n  }\n  else {\n    FUNC_0800583c();\n    current_block = DAT_200002ac;\n    previous_block = DAT_200002ac;\n    while (previous_block = current_block, previous_block != (uint *)0x0) {\n      block_difference = *previous_block - allocated_size;\n      if (-1 < (int)block_difference) {\n        if (block_difference < 0xc) {\n          if (previous_block == previous_block) {\n            current_block = (uint *)previous_block[1];\n            DAT_200002ac = current_block;\n          }\n          else {\n            current_block = (uint *)previous_block[1];\n          }\n          if (previous_block != previous_block) {\n            previous_block[1] = (uint)current_block;\n            previous_block = previous_block;\n          }\n        }\n        else {\n          *previous_block = block_difference;\n          *(uint *)((int)previous_block + block_difference) = allocated_size;\n          previous_block = (uint *)((int)previous_block + block_difference);\n        }\n        goto LAB_08005778;\n      }\n      previous_block = previous_block;\n      current_block = (uint *)previous_block[1];\n    }\n    if (DAT_200002b0 == 0) {\n      DAT_200002b0 = get_available_memory_block(buffer);\n    }\n    current_block = (uint *)get_available_memory_block(buffer,allocated_size);\n    if ((current_block != (uint *)0xffffffff) &&\n       ((previous_block = (uint *)((int)current_block + 3U & 0xfffffffc), current_block == previous_block ||\n        (difference = get_available_memory_block(buffer,(int)previous_block - (int)current_block), difference != -1)))) {\n      *previous_block = allocated_size;\nLAB_08005778:\n      FUNC_0800583e(buffer);\n      allocated_size = (int)previous_block + 0xbU & 0xfffffff8;\n      difference = allocated_size - (int)(previous_block + 1);\n      if (difference != 0) {\n        *(int *)((int)previous_block + difference) = -difference;\n        return allocated_size;\n      }\n      return allocated_size;\n    }\n    *buffer = 0xc;\n    FUNC_0800583e(buffer);\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08005714": "allocate_memory_08005714",
                "param_1": "buffer",
                "param_2": "size",
                "puVar1": "current_block",
                "iVar2": "difference",
                "puVar3": "previous_block",
                "uVar4": "block_difference",
                "puVar5": "previous_block",
                "uVar6": "allocated_size",
                "update_data_0800581c": "get_available_memory_block"
            },
            "calling": [
                "FUN_080057d0",
                "FUN_080050fc",
                "FUN_08005044"
            ],
            "called": [
                "FUN_0800581c",
                "FUN_0800583e",
                "FUN_0800583c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08005714": {
                    "1": "resize_memory_block",
                    "3": "allocate_memory_block",
                    "4": "allocate_and_initialize_memory",
                    "16": "allocate_memory",
                    "2": "allocate_and_update_memory"
                },
                "param_1": {
                    "3": "output_pointer",
                    "1": "block_ptr",
                    "2": "memory_block_ptr",
                    "5": "buffer",
                    "4": "output_buffer"
                },
                "param_2": {
                    "2": "new_size",
                    "3": "requested_size",
                    "17": "size",
                    "1": "block_size"
                },
                "puVar1": {
                    "1": "current_pointer",
                    "3": "current_entry",
                    "16": "current_block",
                    "4": "current_chunk"
                },
                "iVar2": {
                    "1": "current_block_size",
                    "6": "remaining_space",
                    "4": "offset",
                    "10": "difference"
                },
                "puVar3": {
                    "1": "previous_pointer",
                    "2": "next_entry",
                    "8": "previous_block",
                    "6": "next_block",
                    "4": "next_chunk"
                },
                "uVar4": {
                    "1": "space_difference",
                    "2": "block_size_difference",
                    "8": "block_difference",
                    "7": "size_difference",
                    "4": "difference"
                },
                "puVar5": {
                    "1": "temp_ptr",
                    "3": "last_block",
                    "7": "previous_block",
                    "2": "previous_block_ptr",
                    "4": "previous_chunk"
                },
                "uVar6": {
                    "2": "allocated_memory_size",
                    "3": "new_block_size",
                    "19": "allocated_size",
                    "1": "new_size"
                },
                "DAT_200002ac": {
                    "3": "first_block",
                    "1": "data_structure_head"
                },
                "DAT_200002b0": {
                    "1": "initialized_flag"
                },
                "update_data_0800581c": {
                    "1": "update_data"
                },
                "FUNC_0800583c": {
                    "1": "initialize_memory"
                },
                "FUNC_0800583e": {
                    "1": "cleanup_memory"
                }
            }
        },
        "FUN_080057d0": {
            "entrypoint": "0x080057d0",
            "current_name": "process_data_080057d0",
            "code": "\nint process_data_080057d0(undefined4 arg1,int size,uint target_size,undefined4 extra_param)\n\n{\n  int result;\n  uint sum;\n  \n  if (size != 0) {\n    if (target_size == 0) {\n      process_data_080057d0();\n      result = 0;\n    }\n    else {\n      sum = calculate_sum();\n      result = size;\n      if ((sum < target_size) && (result = allocate_memory(arg1,target_size), result != 0)) {\n        copy_data(result,size,target_size);\n        process_data_080057d0(arg1,size);\n      }\n    }\n    return result;\n  }\n  result = allocate_memory(arg1,target_size,target_size,extra_param);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080057d0": "process_data_080057d0",
                "param_1": "arg1",
                "param_2": "size",
                "param_3": "target_size",
                "param_4": "extra_param",
                "iVar1": "result",
                "uVar2": "sum",
                "process_data_0800567c": "process_data",
                "calculate_sum_08005840": "calculate_sum",
                "allocate_memory_08005714": "allocate_memory",
                "copy_data_08005630": "copy_data"
            },
            "calling": [
                "FUN_08005044"
            ],
            "called": [
                "FUN_08005714",
                "FUN_0800567c",
                "FUN_08005630",
                "FUN_08005840"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080057d0": {
                    "1": "process_and_allocate_data",
                    "7": "allocate_and_process_data",
                    "10": "process_data",
                    "8": "process_and_allocate_memory"
                },
                "param_1": {
                    "1": "param_1",
                    "7": "arg1",
                    "2": "input1",
                    "3": "input_param",
                    "4": "input_data"
                },
                "param_2": {
                    "1": "size_of_data",
                    "5": "data_size",
                    "2": "count",
                    "6": "size",
                    "4": "arg2"
                },
                "param_3": {
                    "5": "target_size",
                    "3": "required_size",
                    "1": "total",
                    "2": "size",
                    "4": "arg3"
                },
                "param_4": {
                    "3": "param4",
                    "9": "extra_param",
                    "4": "param_4",
                    "2": "input4",
                    "7": "arg4",
                    "1": "additional_parameter"
                },
                "iVar1": {
                    "30": "result"
                },
                "uVar2": {
                    "1": "total_sum",
                    "3": "calculated_sum",
                    "24": "sum"
                },
                "process_data_0800567c": {
                    "1": "process_data_step1",
                    "4": "process_data"
                },
                "calculate_sum_08005840": {
                    "7": "calculate_sum"
                },
                "allocate_memory_08005714": {
                    "7": "allocate_memory"
                },
                "copy_data_08005630": {
                    "7": "copy_data"
                }
            }
        },
        "FUN_0800581c": {
            "entrypoint": "0x0800581c",
            "current_name": "update_data_0800581c",
            "code": "\nvoid update_data_0800581c(int *result,undefined4 input_data)\n\n{\n  int update_result;\n  \n  DAT_2000169c = 0;\n  update_result = update_data_0800581c_080072b8(input_data);\n  if ((update_result == -1) && (DAT_2000169c != 0)) {\n    *result = DAT_2000169c;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800581c": "update_data_0800581c",
                "param_1": "result",
                "param_2": "input_data",
                "iVar1": "update_result"
            },
            "calling": [
                "FUN_08005714"
            ],
            "called": [
                "FUN_080072b8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800581c": {
                    "1": "calculate_and_update_data",
                    "2": "update_result",
                    "8": "update_and_check_data",
                    "12": "update_data"
                },
                "param_1": {
                    "1": "result_pointer",
                    "3": "output",
                    "2": "result_ptr",
                    "17": "result"
                },
                "param_2": {
                    "9": "input",
                    "3": "input_value",
                    "1": "input_val",
                    "10": "input_data",
                    "2": "input_param"
                },
                "iVar1": {
                    "1": "data_update_result",
                    "4": "update_status",
                    "2": "status",
                    "17": "update_result",
                    "5": "result"
                },
                "*param_1": {
                    "1": "result"
                },
                "DAT_2000169c": {
                    "1": "data_updated"
                }
            }
        },
        "FUN_0800583c": {
            "entrypoint": "0x0800583c",
            "current_name": "FUNC_0800583c",
            "code": "\nvoid FUNC_0800583c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800583c": "FUNC_0800583c"
            },
            "calling": [
                "FUN_08005714",
                "FUN_0800567c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800583e": {
            "entrypoint": "0x0800583e",
            "current_name": "FUNC_0800583e",
            "code": "\nvoid FUNC_0800583e(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800583e": "FUNC_0800583e"
            },
            "calling": [
                "FUN_08005714",
                "FUN_0800567c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005840": {
            "entrypoint": "0x08005840",
            "current_name": "calculate_sum_08005840",
            "code": "\nint calculate_sum_08005840(undefined4 result,int input)\n\n{\n  int result;\n  \n  result = *(int *)(input + -4) + -4;\n  if (*(int *)(input + -4) < 0) {\n    result = result + *(int *)(input + result);\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08005840": "calculate_sum_08005840",
                "param_1": "result",
                "param_2": "input",
                "iVar1": "result"
            },
            "calling": [
                "FUN_080057d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08005840": {
                    "14": "calculate_sum",
                    "1": "calculate_modified_value",
                    "11": "calculate_result"
                },
                "param_1": {
                    "1": "input_param",
                    "3": "param",
                    "2": "value",
                    "9": "result",
                    "4": "input1"
                },
                "param_2": {
                    "7": "input",
                    "1": "input_data",
                    "5": "array",
                    "4": "input2",
                    "2": "input_value",
                    "3": "array_index"
                },
                "iVar1": {
                    "1": "current_value",
                    "10": "sum",
                    "13": "result"
                },
                "*(int *)(param_2 + -4)": {
                    "1": "array_length"
                },
                "*(int *)(param_2 + iVar1)": {
                    "1": "current_value"
                },
                "F": {
                    "1": "calculate_sum"
                },
                "F0BB8A617": {
                    "1": "calculate_result"
                },
                "*PTR_*(param_2 + -4)": {
                    "1": "array_length"
                },
                "*(PTR_*(param_2 + -4))": {
                    "1": "element_value"
                },
                "F_UNDESCRIBED": {
                    "1": "calculate_sum"
                }
            }
        },
        "FUN_08005854": {
            "entrypoint": "0x08005854",
            "current_name": "process_data_08005854",
            "code": "\nundefined8 process_data_08005854(undefined4 input_1,undefined4 input_2)\n\n{\n  int result;\n  undefined4 *data_value_ptr;\n  int *data_value_int_ptr;\n  undefined8 result;\n  undefined8 processed_input;\n  undefined4 flag;\n  undefined *data_ptr;\n  undefined4 param_1_copy;\n  undefined4 param_2_copy;\n  undefined4 param_1_copy2;\n  undefined4 param_2_copy2;\n  undefined8 infinity_value;\n  int parameter_check_result;\n  \n  result = calculate_result_helper();\n  if (DAT_20000224 == -1) {\n    return result;\n  }\n  parameter_check_result = check_parameters(input_1,input_2,input_1,input_2);\n  if (parameter_check_result != 0) {\n    return result;\n  }\n  processed_input = FUNC_0800708c(input_1,input_2);\n  result = is_string_terminated((int)processed_input,(int)((ulonglong)processed_input >> 0x20),0,0x3ff00000);\n  if (result == 0) {\n    return result;\n  }\n  flag = 1;\n  data_ptr = &DAT_080073ac;\n  param_1_copy = input_1;\n  param_2_copy = input_2;\n  param_1_copy2 = input_1;\n  param_2_copy2 = input_2;\n  infinity_value = get_infinity(&DAT_0800737e);\n  if (DAT_20000224 != '\\x02') {\n    result = initialize(&flag);\n    if (result != 0) goto LAB_080058d0;\n  }\n  data_value_ptr = (undefined4 *)get_data_value();\n  *data_value_ptr = 0x21;\nLAB_080058d0:\n  if (parameter_check_result != 0) {\n    data_value_int_ptr = (int *)get_data_value();\n    *data_value_int_ptr = parameter_check_result;\n  }\n  return infinity_value;\n}\n\n",
            "renaming": {
                "FUN_08005854": "process_data_08005854",
                "param_1": "input_1",
                "param_2": "input_2",
                "local_48": "flag",
                "local_44": "data_ptr",
                "local_40": "param_1_copy",
                "uStack_3c": "param_2_copy",
                "local_38": "param_1_copy2",
                "uStack_34": "param_2_copy2",
                "local_30": "infinity_value",
                "local_28": "parameter_check_result",
                "calculate_result_08005c70": "calculate_result_helper",
                "check_parameters_08000a04": "check_parameters",
                "is_null_terminated_080009f0": "is_string_terminated",
                "get_infinity_080070a4": "get_infinity",
                "initialize_0800709e": "initialize",
                "get_data_value_080072ac": "get_data_value",
                "uVar4": "result",
                "uVar5": "processed_input",
                "iVar1": "result",
                "puVar2": "data_value_ptr",
                "piVar3": "data_value_int_ptr"
            },
            "calling": [
                "FUN_08003330"
            ],
            "called": [
                "FUN_0800708c",
                "FUN_0800709e",
                "FUN_080072ac",
                "FUN_08005c70",
                "FUN_080070a4",
                "FUN_08000a04",
                "FUN_080009f0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08005854": {
                    "1": "validate_input_and_retrieve_result",
                    "9": "process_data"
                },
                "param_1": {
                    "10": "input_1",
                    "4": "input_param1",
                    "3": "input1",
                    "8": "input_param_1",
                    "1": "input_param"
                },
                "param_2": {
                    "3": "input_parameter_2",
                    "4": "input_param2",
                    "1": "output_param",
                    "8": "input_param_2",
                    "10": "input_2"
                },
                "local_48": {
                    "25": "flag",
                    "1": "is_recursive"
                },
                "local_44": {
                    "4": "data",
                    "1": "message_ptr",
                    "6": "message",
                    "3": "string_ptr"
                },
                "local_40": {
                    "1": "input_value1",
                    "4": "input_1_copy",
                    "3": "input1_copy",
                    "2": "local_param_1",
                    "5": "param_1_copy"
                },
                "uStack_3c": {
                    "1": "input_arg2",
                    "5": "param_2_copy",
                    "2": "input_copy_2",
                    "3": "input_2_copy"
                },
                "local_38": {
                    "1": "param_1_copy_2",
                    "2": "param_1_copy2"
                },
                "uStack_34": {
                    "2": "input_copy_4",
                    "1": "data_param_4"
                },
                "local_30": {
                    "1": "output_result",
                    "8": "infinity",
                    "9": "infinity_value",
                    "3": "output",
                    "2": "infinity_val"
                },
                "local_28": {
                    "1": "input_check_result",
                    "17": "parameter_check_result",
                    "6": "parameter_check",
                    "2": "check_result",
                    "4": "param_check_result"
                },
                "calculate_result_08005c70": {
                    "1": "calculate_result_helper"
                },
                "DAT_20000224": {
                    "1": "global_constant"
                },
                "check_parameters_08000a04": {
                    "1": "check_parameters"
                },
                "FUNC_0800708c": {
                    "1": "perform_operation"
                },
                "is_null_terminated_080009f0": {
                    "1": "is_string_terminated"
                },
                "DAT_080073ac": {
                    "1": "default_error_message"
                },
                "get_infinity_080070a4": {
                    "1": "get_infinity"
                },
                "DAT_0800737e": {
                    "1": "infinity_data"
                },
                "initialize_0800709e": {
                    "1": "initialize"
                },
                "get_data_value_080072ac": {
                    "1": "get_data_value"
                },
                "uVar4": {
                    "3": "calc_result",
                    "19": "result",
                    "2": "calculation_result",
                    "6": "calculated_result"
                },
                "uVar5": {
                    "2": "processed_result",
                    "6": "func_result",
                    "4": "function_result",
                    "9": "processed_data"
                },
                "iVar1": {
                    "1": "string_check_result",
                    "2": "is_terminated",
                    "3": "is_null_terminated",
                    "8": "result"
                },
                "puVar2": {
                    "3": "data_value_pointer",
                    "4": "data_ptr",
                    "1": "ptr_data",
                    "2": "data_pointer",
                    "11": "data_value_ptr"
                },
                "piVar3": {
                    "5": "data_value_int_ptr",
                    "2": "parameter_ptr",
                    "1": "output_data_value_ptr",
                    "3": "data_value_ptr"
                },
                "undefined4 param_1": {
                    "1": "input_value_1"
                },
                "undefined4 param_2": {
                    "1": "input_value_2"
                }
            }
        },
        "thunk_FUN_08006070": {
            "entrypoint": "0x080058fc",
            "current_name": "calculate_result_thunk_08006070",
            "code": "\nundefined8 calculate_result_thunk_08006070(uint input1,uint input2,uint input3,uint input4)\n\n{\n  undefined4 result1;\n  uint flag;\n  uint result_3;\n  int difference;\n  uint result_5;\n  undefined8 result;\n  undefined8 result2;\n  \n  result_5 = input4 & 0x7fffffff;\n  if ((0x7ff00000 < (result_5 | (-input3 | input3) >> 0x1f)) ||\n     (result_3 = input2 & 0x7fffffff, 0x7ff00000 < (result_3 | (-input1 | input1) >> 0x1f))) {\n    result = calculate_product_0800016c(input1,input2,input3,input4,input4);\n    return result;\n  }\n  if ((input4 + 0xc0100000 | input3) == 0) {\n    result = calculate_result_thunk_08006070_08006d68();\n    return result;\n  }\n  flag = (int)input4 >> 0x1e & 2U | input2 >> 0x1f;\n  if ((input1 | result_3) == 0) {\n    if (flag == 2) {\n      return 0x400921fb54442d18;\n    }\n    if (flag != 3) {\n      return CONCAT44(input2,input1);\n    }\nLAB_0800613e:\n    result = 0xc00921fb54442d18;\n  }\n  else {\n    if ((input3 | result_5) != 0) {\n      if (result_5 == 0x7ff00000) {\n        if (result_3 == 0x7ff00000) {\n          if (flag == 2) {\n            return 0x4002d97c7f3321d2;\n          }\n          if (flag == 3) {\n            return 0xc002d97c7f3321d2;\n          }\n          if (flag != 1) {\n            return 0x3fe921fb54442d18;\n          }\n          return 0xbfe921fb54442d18;\n        }\n        if (flag == 2) {\n          return 0x400921fb54442d18;\n        }\n        if (flag != 3) {\n          if (flag != 1) {\n            return 0;\n          }\n          return 0x8000000000000000;\n        }\n        goto LAB_0800613e;\n      }\n      if (result_3 != 0x7ff00000) {\n        difference = (int)(result_3 - result_5) >> 0x14;\n        if (difference < 0x3d) {\n          if (((int)input4 < 0) && (difference + 0x3c < 0 != SCARRY4(difference,0x3c))) {\n            result = 0;\n          }\n          else {\n            calculate_double_08000724(input1,input2);\n            FUNC_0800708c();\n            result = calculate_result_thunk_08006070_08006d68();\n          }\n        }\n        else {\n          result = 0x3ff921fb54442d18;\n        }\n        difference = (int)((ulonglong)result >> 0x20);\n        result1 = (undefined4)result;\n        if (flag == 1) {\n          return CONCAT44(difference + -0x80000000,result1);\n        }\n        if (flag == 2) {\n          result2 = calculate_result_thunk_08006070_08000168(result1,difference,0x33145c07,0x3ca1a626);\n          result = 0x400921fb54442d18;\n        }\n        else {\n          if (flag == 0) {\n            return result;\n          }\n          result = calculate_result_thunk_08006070_08000168(result1,difference,0x33145c07,0x3ca1a626);\n          result2 = 0x400921fb54442d18;\n        }\n        result = calculate_result_thunk_08006070_08000168((int)result,(int)((ulonglong)result >> 0x20),(int)result2,\n                             (int)((ulonglong)result2 >> 0x20));\n        return result;\n      }\n    }\n    if ((int)input2 < 0) {\n      result = 0xbff921fb54442d18;\n    }\n    else {\n      result = 0x3ff921fb54442d18;\n    }\n  }\n  return result;\n}\n\n",
            "renaming": {
                "thunk_FUN_08006070": "calculate_result_thunk_08006070",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar5": "result_5",
                "uVar2": "flag",
                "uVar6": "result",
                "uVar7": "result2",
                "uVar3": "result_3",
                "uVar1": "result1",
                "iVar4": "difference"
            },
            "calling": [
                "FUN_08003330"
            ],
            "called": [
                "FUN_08006070"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "thunk_FUN_08006070": {
                    "4": "calculate_value",
                    "1": "calculate_improved_result",
                    "6": "calculate",
                    "16": "calculate_result"
                },
                "param_1": {
                    "1": "first_param",
                    "9": "input_1",
                    "2": "input_param1",
                    "3": "num1",
                    "12": "input1"
                },
                "param_2": {
                    "12": "input2",
                    "2": "input_param2",
                    "1": "second_param",
                    "3": "num2",
                    "9": "input_2"
                },
                "param_3": {
                    "9": "input_3",
                    "1": "third_param",
                    "2": "input_param3",
                    "12": "input3",
                    "3": "num3"
                },
                "param_4": {
                    "1": "operand4",
                    "9": "input_4",
                    "2": "input_param4",
                    "3": "num4",
                    "12": "input4"
                },
                "uVar5": {
                    "1": "positive_param4",
                    "3": "abs_num4",
                    "2": "u_var5",
                    "5": "result_5",
                    "4": "abs_input4"
                },
                "uVar2": {
                    "5": "result_2",
                    "1": "shifted_bits",
                    "3": "result2"
                },
                "uVar6": {
                    "1": "result_high1",
                    "11": "result",
                    "4": "output"
                },
                "uVar7": {
                    "3": "result3",
                    "1": "intermediate_output",
                    "5": "result2",
                    "4": "intermediate_result",
                    "2": "result_high2"
                },
                "uVar3": {
                    "1": "var2",
                    "2": "result2",
                    "3": "abs_num2",
                    "5": "result_3",
                    "4": "abs_input2"
                },
                "uVar1": {
                    "6": "result_low",
                    "1": "result_var1",
                    "7": "result1",
                    "5": "result_1",
                    "2": "result"
                },
                "iVar4": {
                    "1": "result_part_4",
                    "2": "shift",
                    "5": "result_4",
                    "3": "result4",
                    "9": "difference"
                }
            }
        },
        "FUN_08005900": {
            "entrypoint": "0x08005900",
            "current_name": "calculate_result_08005900",
            "code": "\nundefined8 calculate_result_08005900(undefined4 input1,undefined4 input2,undefined4 input3,undefined4 input4)\n\n{\n  char flag;\n  int result;\n  int *result_ptr;\n  undefined4 *data_value_ptr;\n  int bitwise_result;\n  undefined4 upper_bits;\n  undefined4 data_value;\n  undefined8 result;\n  undefined8 result2;\n  undefined4 flag;\n  undefined *message;\n  undefined4 input1_copy;\n  undefined4 input2_copy;\n  undefined4 input3_copy;\n  undefined4 input4_copy;\n  undefined8 final_result;\n  int check_result;\n  \n  result = calculate_float_08006228();\n  flag = DAT_20000224;\n  upper_bits = (undefined4)((ulonglong)result >> 0x20);\n  data_value = (undefined4)result;\n  if (DAT_20000224 == -1) {\n    return result;\n  }\n  result = check_parameters_08000a04(input3,input4,input3,input4);\n  if (result != 0) {\n    return result;\n  }\n  result = check_parameters_08000a04(input1,input2,input1,input2);\n  input1_copy = input1;\n  input2_copy = input2;\n  input3_copy = input3;\n  input4_copy = input4;\n  if (result == 0) {\n    result = check_and_return_080009a0(input1,input2,0,0);\n    if (result != 0) {\n      result = check_and_return_080009a0(input3,input4,0,0);\n      if (result != 0) {\n        flag = 1;\n        message = &DAT_080073b1;\n        final_result = 0;\n        check_result = 0;\n        if (flag != '\\0') {\n          final_result = 0x3ff0000000000000;\n          goto LAB_080059d0;\n        }\n        goto LAB_08005978;\n      }\n      result = get_bitwise_result_08007092(input3,input4);\n      if (result == 0) {\n        return result;\n      }\n      result = is_end_of_string_080009b4(input3,input4,0,0);\n      if (result == 0) {\n        return result;\n      }\n      flag = 1;\n      message = &DAT_080073b1;\n      check_result = 0;\n      if (DAT_20000224 == '\\0') goto LAB_08005a22;\n      final_result = 0xfff0000000000000;\n      check_result = 0;\n      flag = DAT_20000224;\nLAB_08005a32:\n      if (flag != '\\x02') goto LAB_08005978;\n      goto LAB_08005a34;\n    }\n    result = get_bitwise_result_08007092(data_value,upper_bits);\n    if (((result != 0) || (bitwise_result = get_bitwise_result_08007092(input1,input2), bitwise_result == 0)) ||\n       (bitwise_result = get_bitwise_result_08007092(input3,input4), bitwise_result == 0)) {\n      result = check_and_return_080009a0(data_value,upper_bits,0,0);\n      if (result == 0) {\n        return result;\n      }\n      result = get_bitwise_result_08007092(input1,input2);\n      if (result == 0) {\n        return result;\n      }\n      result = get_bitwise_result_08007092(input3,input4);\n      if (result == 0) {\n        return result;\n      }\n      flag = 4;\n      message = &DAT_080073b1;\n      check_result = 0;\n      final_result._0_4_ = 0;\n      final_result._4_4_ = 0;\n      goto LAB_08005afa;\n    }\n    check_result = check_parameters_08000a04(data_value,upper_bits);\n    flag = DAT_20000224;\n    if (check_result != 0) {\n      message = &DAT_080073b1;\n      flag = 1;\n      check_result = result;\n      if (DAT_20000224 != '\\0') {\n        final_result = calculate_double_08000724(0,0,0,0);\n        goto LAB_08005a32;\n      }\nLAB_08005a22:\n      message = &DAT_080073b1;\n      flag = 1;\n      final_result = 0;\n      goto LAB_08005978;\n    }\n    message = &DAT_080073b1;\n    flag = 3;\n    if (DAT_20000224 == '\\0') {\n      final_result._0_4_ = 0xe0000000;\n      final_result._4_4_ = 0x47efffff;\n      result = is_end_of_string_080009b4(input1,input2,0,0);\n      if (result != 0) {\n        result = calculate_result_08005900_080004d0(input3,input4,0,0x3fe00000);\n        result2 = calculate_result_08005900_080070b0();\n        result = check_and_return_080009a0((int)result,(int)((ulonglong)result >> 0x20),(int)result2,\n                             (int)((ulonglong)result2 >> 0x20));\n        if (result == 0) {\n          final_result._0_4_ = 0xe0000000;\n          final_result._4_4_ = 0xc7efffff;\n        }\n        goto LAB_08005afa;\n      }\nLAB_08005b98:\n      result = initialize_0800709e(&flag);\n      if (result != 0) goto LAB_080059d0;\n    }\n    else {\n      final_result._0_4_ = 0;\n      final_result._4_4_ = 0x7ff00000;\n      result = is_end_of_string_080009b4(input1,input2,0,0);\n      if (result != 0) {\n        result = calculate_result_08005900_080004d0(input3,input4,0,0x3fe00000);\n        result2 = calculate_result_08005900_080070b0();\n        result = check_and_return_080009a0((int)result,(int)((ulonglong)result >> 0x20),(int)result2,\n                             (int)((ulonglong)result2 >> 0x20));\n        if (result == 0) {\n          final_result._0_4_ = 0;\n          final_result._4_4_ = 0xfff00000;\n        }\n      }\nLAB_08005afa:\n      if (DAT_20000224 != '\\x02') goto LAB_08005b98;\n    }\n    data_value_ptr = (undefined4 *)get_data_value_080072ac();\n    data_value = 0x22;\n  }\n  else {\n    result = check_and_return_080009a0(input3,input4,0,0);\n    if (result == 0) {\n      return result;\n    }\n    flag = 1;\n    message = &DAT_080073b1;\n    final_result = 0x3ff0000000000000;\n    check_result = 0;\n    if (flag == '\\x02') {\n      return 0x3ff0000000000000;\n    }\nLAB_08005978:\n    result = initialize_0800709e(&flag);\n    if (result != 0) goto LAB_080059d0;\nLAB_08005a34:\n    data_value_ptr = (undefined4 *)get_data_value_080072ac();\n    data_value = 0x21;\n  }\n  *data_value_ptr = data_value;\nLAB_080059d0:\n  if (check_result != 0) {\n    result_ptr = (int *)get_data_value_080072ac();\n    *result_ptr = check_result;\n  }\n  return final_result;\n}\n\n",
            "renaming": {
                "FUN_08005900": "calculate_result_08005900",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "cVar1": "flag",
                "iVar2": "result",
                "piVar3": "result_ptr",
                "puVar4": "data_value_ptr",
                "iVar5": "bitwise_result",
                "uVar6": "upper_bits",
                "uVar7": "data_value",
                "uVar8": "result",
                "uVar9": "result2",
                "local_50": "flag",
                "local_4c": "message",
                "local_48": "input1_copy",
                "uStack_44": "input2_copy",
                "local_40": "input3_copy",
                "uStack_3c": "input4_copy",
                "local_38": "final_result",
                "local_30": "check_result"
            },
            "calling": [
                "FUN_0800411c"
            ],
            "called": [
                "FUN_0800709e",
                "FUN_08000724",
                "FUN_080072ac",
                "FUN_080009a0",
                "FUN_080009b4",
                "FUN_08006228",
                "FUN_08000a04",
                "FUN_080070b0",
                "FUN_08007092",
                "FUN_080004d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08005900": {
                    "1": "calculate_result_with_checks",
                    "19": "calculate_result"
                },
                "param_1": {
                    "9": "input_1",
                    "1": "first_param",
                    "4": "input_param_1",
                    "13": "input1"
                },
                "param_2": {
                    "13": "input2",
                    "1": "arg2",
                    "4": "input_param_2",
                    "9": "input_2"
                },
                "param_3": {
                    "9": "input_3",
                    "1": "third_param",
                    "4": "input_param_3",
                    "2": "param1",
                    "11": "input3"
                },
                "param_4": {
                    "2": "param2",
                    "1": "fourth_param",
                    "9": "input_4",
                    "4": "input_param_4",
                    "11": "input4"
                },
                "cVar1": {
                    "18": "flag",
                    "1": "data_flag",
                    "2": "condition"
                },
                "iVar2": {
                    "1": "status",
                    "2": "check_result",
                    "24": "result"
                },
                "piVar3": {
                    "3": "pointer",
                    "5": "data_ptr",
                    "2": "data_value_ptr",
                    "7": "result_ptr",
                    "4": "data_value",
                    "1": "result_pointer"
                },
                "puVar4": {
                    "2": "pointer2",
                    "1": "data_pointer",
                    "3": "value_ptr",
                    "11": "data_value_ptr"
                },
                "iVar5": {
                    "2": "temp_result",
                    "1": "integer_2",
                    "24": "bitwise_result"
                },
                "uVar6": {
                    "1": "undefined4_1",
                    "2": "upper_result",
                    "3": "high_bits",
                    "9": "upper_bits"
                },
                "uVar7": {
                    "2": "lower_result",
                    "1": "lower32_bits",
                    "4": "lower_bits",
                    "6": "data_value",
                    "3": "low_bits"
                },
                "uVar8": {
                    "1": "calc_result_1",
                    "2": "result_1",
                    "3": "float_result",
                    "5": "result"
                },
                "uVar9": {
                    "1": "result_float2",
                    "7": "result2",
                    "2": "calculation_result2",
                    "3": "calculate_result"
                },
                "local_50": {
                    "8": "flag",
                    "2": "flag_value",
                    "1": "operation_type",
                    "4": "status"
                },
                "local_4c": {
                    "2": "message_ptr",
                    "1": "pointer3",
                    "3": "data_ptr",
                    "4": "message"
                },
                "local_48": {
                    "1": "first_param",
                    "9": "input1_copy",
                    "2": "local_input_1",
                    "5": "input_1_copy"
                },
                "uStack_44": {
                    "5": "input_2_copy",
                    "1": "input4",
                    "2": "local_input2",
                    "9": "input2_copy"
                },
                "local_40": {
                    "1": "original_third_parameter",
                    "8": "input3_copy",
                    "5": "input_3_copy",
                    "2": "local_input3"
                },
                "uStack_3c": {
                    "1": "input4_ptr",
                    "2": "local_input4",
                    "5": "input_4_copy",
                    "8": "input4_copy"
                },
                "local_38": {
                    "3": "output",
                    "1": "calculate_result_variable",
                    "2": "result_1",
                    "7": "final_result",
                    "5": "result_value"
                },
                "local_30": {
                    "1": "local_result_value",
                    "2": "check_value",
                    "10": "check_result"
                },
                "DAT_20000224": {
                    "1": "end_string_flag"
                },
                "local_20": {
                    "1": "check_parameters_result"
                }
            }
        },
        "FUN_08005bc8": {
            "entrypoint": "0x08005bc8",
            "current_name": "process_data_08005bc8",
            "code": "\nundefined8 process_data_08005bc8(undefined4 input1,undefined4 input2)\n\n{\n  char data_flag;\n  int string_check_result;\n  int *data_value_ptr;\n  undefined4 *data_value_ptr2;\n  undefined8 result;\n  undefined4 flag;\n  undefined *message;\n  undefined4 input1_copy;\n  undefined4 input2_copy;\n  undefined4 param1_copy;\n  undefined4 param2_copy;\n  undefined8 result;\n  int parameter_check;\n  \n  result = calculate_float();\n  data_flag = DAT_20000224;\n  if (DAT_20000224 == -1) {\n    return result;\n  }\n  parameter_check = validate_parameters(input1,input2,input1,input2);\n  if (parameter_check != 0) {\n    return result;\n  }\n  string_check_result = is_end_of_string(input1,input2,0,0);\n  if (string_check_result == 0) {\n    return result;\n  }\n  flag = 1;\n  message = &DAT_080073b5;\n  input1_copy = input1;\n  input2_copy = input2;\n  param1_copy = input1;\n  param2_copy = input2;\n  if (data_flag == '\\0') {\n    result = 0;\nLAB_08005c26:\n    string_check_result = initialize_flag(&flag);\n    if (string_check_result != 0) goto LAB_08005c2e;\n  }\n  else {\n    result = calculate_double(0,0,0,0);\n    if (data_flag != '\\x02') goto LAB_08005c26;\n  }\n  data_value_ptr2 = (undefined4 *)get_data_value();\n  *data_value_ptr2 = 0x21;\nLAB_08005c2e:\n  if (parameter_check != 0) {\n    data_value_ptr = (int *)get_data_value();\n    *data_value_ptr = parameter_check;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08005bc8": "process_data_08005bc8",
                "param_1": "input1",
                "param_2": "input2",
                "uVar5": "result",
                "local_50": "flag",
                "local_4c": "message",
                "local_48": "input1_copy",
                "uStack_44": "input2_copy",
                "local_40": "param1_copy",
                "uStack_3c": "param2_copy",
                "local_38": "result",
                "local_30": "parameter_check",
                "cVar1": "data_flag",
                "iVar2": "string_check_result",
                "piVar3": "data_value_ptr",
                "puVar4": "data_value_ptr2",
                "calculate_float_08006c0c": "calculate_float",
                "check_parameters_08000a04": "validate_parameters",
                "is_end_of_string_080009b4": "is_end_of_string",
                "initialize_0800709e": "initialize_flag",
                "calculate_double_08000724": "calculate_double",
                "get_data_value_080072ac": "get_data_value"
            },
            "calling": [
                "FUN_08003330"
            ],
            "called": [
                "FUN_08000724",
                "FUN_0800709e",
                "FUN_080072ac",
                "FUN_080009b4",
                "FUN_08000a04",
                "FUN_08006c0c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08005bc8": {
                    "1": "calculate_result",
                    "17": "process_data",
                    "2": "check_and_initialize"
                },
                "param_1": {
                    "4": "input_param1",
                    "1": "first_param",
                    "3": "input_param_1",
                    "13": "input1"
                },
                "param_2": {
                    "13": "input2",
                    "4": "input_2",
                    "1": "arg2",
                    "3": "input_param_2"
                },
                "uVar5": {
                    "1": "calculated_float",
                    "18": "result",
                    "6": "float_result"
                },
                "local_50": {
                    "27": "flag",
                    "1": "initialized_flag"
                },
                "local_4c": {
                    "1": "validation_message",
                    "4": "string_ptr",
                    "14": "message"
                },
                "local_48": {
                    "1": "local_param1",
                    "7": "input1_copy",
                    "2": "temp_param_1",
                    "5": "param1"
                },
                "uStack_44": {
                    "2": "temp_param2",
                    "5": "param2",
                    "1": "input_param2_2",
                    "7": "input2_copy"
                },
                "local_40": {
                    "1": "param_1_copy_2",
                    "5": "input1_copy2",
                    "2": "param1"
                },
                "uStack_3c": {
                    "1": "temp4",
                    "5": "param2_copy",
                    "2": "param2"
                },
                "local_38": {
                    "3": "return_value",
                    "1": "local_variable7",
                    "2": "initial_value",
                    "6": "output",
                    "12": "result"
                },
                "local_30": {
                    "1": "local_variable8",
                    "5": "error_code",
                    "4": "parameter_check_result",
                    "6": "param_check_result",
                    "2": "check_result"
                },
                "cVar1": {
                    "3": "condition",
                    "1": "char_var1",
                    "2": "char_var",
                    "4": "data_flag"
                },
                "iVar2": {
                    "2": "end_of_string_check_result",
                    "1": "flag2",
                    "4": "string_check_result"
                },
                "piVar3": {
                    "1": "output_integer_ptr",
                    "2": "data_value",
                    "9": "data_value_ptr"
                },
                "puVar4": {
                    "1": "output_data_value_ptr",
                    "7": "data_value_ptr2",
                    "6": "data_value_ptr"
                },
                "<original_function_name>": {
                    "1": "process_data"
                },
                "<param_1>": {
                    "1": "input_param1"
                },
                "<param_2>": {
                    "1": "input_param2"
                },
                "DAT_20000224": {
                    "1": "constant_value"
                },
                "DAT_080073b5": {
                    "1": "constant_data"
                },
                "calculate_float_08006c0c": {
                    "1": "calculate_float"
                },
                "check_parameters_08000a04": {
                    "1": "validate_parameters"
                },
                "is_end_of_string_080009b4": {
                    "1": "is_end_of_string"
                },
                "initialize_0800709e": {
                    "1": "initialize_flag"
                },
                "calculate_double_08000724": {
                    "1": "calculate_double"
                },
                "get_data_value_080072ac": {
                    "1": "get_data_value"
                }
            }
        },
        "FUN_08005c70": {
            "entrypoint": "0x08005c70",
            "current_name": "calculate_result_08005c70",
            "code": "\nundefined8 calculate_result_08005c70(uint input1,uint input2)\n\n{\n  int is_terminated;\n  undefined4 temp1;\n  undefined4 temp2;\n  undefined4 temp3;\n  undefined4 temp4;\n  undefined4 temp1;\n  undefined4 temp2;\n  uint abs_input2;\n  undefined8 final_result;\n  undefined8 temp_result_1;\n  undefined8 temp_result_2;\n  \n  final_result = CONCAT44(input2,input1);\n  abs_input2 = input2 & 0x7fffffff;\n  if (abs_input2 < 0x3ff00000) {\n    if (abs_input2 < 0x3fe00000) {\n      if (0x3e3fffff < abs_input2) {\n        temp_result_1 = calculate_result_08005c70(input1,input2,input1,input2);\n        temp2 = (undefined4)((ulonglong)temp_result_1 >> 0x20);\n        temp1 = (undefined4)temp_result_1;\n        temp_result_1 = calculate_result_08005c70(temp1,temp2,0xdfdf709,0x3f023de1);\n        temp_result_1 = calculate_product((int)temp_result_1,(int)((ulonglong)temp_result_1 >> 0x20),0x7501b288,0x3f49efe0);\n        temp_result_1 = calculate_result_08005c70((int)temp_result_1,(int)((ulonglong)temp_result_1 >> 0x20),temp1,temp2);\n        temp_result_1 = calculate_result_08005c70_2((int)temp_result_1,(int)((ulonglong)temp_result_1 >> 0x20),0xb5688f3b,0x3fa48228);\n        temp_result_1 = calculate_result_08005c70((int)temp_result_1,(int)((ulonglong)temp_result_1 >> 0x20),temp1,temp2);\n        temp_result_1 = calculate_product((int)temp_result_1,(int)((ulonglong)temp_result_1 >> 0x20),0xe884455,0x3fc9c155);\n        temp_result_1 = calculate_result_08005c70((int)temp_result_1,(int)((ulonglong)temp_result_1 >> 0x20),temp1,temp2);\n        temp_result_1 = calculate_result_08005c70_2((int)temp_result_1,(int)((ulonglong)temp_result_1 >> 0x20),0x3eb6f7d,0x3fd4d612);\n        temp_result_1 = calculate_result_08005c70((int)temp_result_1,(int)((ulonglong)temp_result_1 >> 0x20),temp1,temp2);\n        temp_result_1 = calculate_product((int)temp_result_1,(int)((ulonglong)temp_result_1 >> 0x20),0x55555555,0x3fc55555);\n        temp_result_1 = calculate_result_08005c70((int)temp_result_1,(int)((ulonglong)temp_result_1 >> 0x20),temp1,temp2);\n        temp_result_2 = calculate_result_08005c70(temp1,temp2,0xb12e9282,0x3fb3b8c5);\n        temp_result_2 = calculate_result_08005c70_2((int)temp_result_2,(int)((ulonglong)temp_result_2 >> 0x20),0x1b8d0159,0x3fe6066c);\n        temp_result_2 = calculate_result_08005c70((int)temp_result_2,(int)((ulonglong)temp_result_2 >> 0x20),temp1,temp2);\n        temp_result_2 = calculate_product((int)temp_result_2,(int)((ulonglong)temp_result_2 >> 0x20),0x9c598ac8,0x40002ae5);\n        temp_result_2 = calculate_result_08005c70((int)temp_result_2,(int)((ulonglong)temp_result_2 >> 0x20),temp1,temp2);\n        temp_result_2 = calculate_result_08005c70_2((int)temp_result_2,(int)((ulonglong)temp_result_2 >> 0x20),0x1c8a2d4b,0x40033a27);\n        temp_result_2 = calculate_result_08005c70((int)temp_result_2,(int)((ulonglong)temp_result_2 >> 0x20),temp1,temp2);\n        temp_result_2 = calculate_product((int)temp_result_2,(int)((ulonglong)temp_result_2 >> 0x20),0,0x3ff00000);\n        temp_result_1 = calculate_double((int)temp_result_1,(int)((ulonglong)temp_result_1 >> 0x20),(int)temp_result_2,\n                              (int)((ulonglong)temp_result_2 >> 0x20));\n        temp_result_1 = calculate_result_08005c70((int)temp_result_1,(int)((ulonglong)temp_result_1 >> 0x20),input1,input2);\n        goto LAB_08005cba;\n      }\n      temp_result_1 = calculate_product(input1,input2,0x8800759c,0x7e37e43c);\n      is_terminated = check_if_null_terminated((int)temp_result_1,(int)((ulonglong)temp_result_1 >> 0x20),0,0x3ff00000);\n      if (is_terminated != 0) {\n        return final_result;\n      }\n    }\n    final_result = FUNC_0800708c(input1,input2);\n    final_result = calculate_result_08005c70_2(0,0x3ff00000,(int)final_result,(int)((ulonglong)final_result >> 0x20));\n    final_result = calculate_result_08005c70((int)final_result,(int)((ulonglong)final_result >> 0x20),0,0x3fe00000);\n    temp1 = (undefined4)((ulonglong)final_result >> 0x20);\n    temp1 = (undefined4)final_result;\n    final_result = calculate_result_08005c70(temp1,temp1,0xdfdf709,0x3f023de1);\n    final_result = calculate_product((int)final_result,(int)((ulonglong)final_result >> 0x20),0x7501b288,0x3f49efe0);\n    final_result = calculate_result_08005c70((int)final_result,(int)((ulonglong)final_result >> 0x20),temp1,temp1);\n    final_result = calculate_result_08005c70_2((int)final_result,(int)((ulonglong)final_result >> 0x20),0xb5688f3b,0x3fa48228);\n    final_result = calculate_result_08005c70((int)final_result,(int)((ulonglong)final_result >> 0x20),temp1,temp1);\n    final_result = calculate_product((int)final_result,(int)((ulonglong)final_result >> 0x20),0xe884455,0x3fc9c155);\n    final_result = calculate_result_08005c70((int)final_result,(int)((ulonglong)final_result >> 0x20),temp1,temp1);\n    final_result = calculate_result_08005c70_2((int)final_result,(int)((ulonglong)final_result >> 0x20),0x3eb6f7d,0x3fd4d612);\n    final_result = calculate_result_08005c70((int)final_result,(int)((ulonglong)final_result >> 0x20),temp1,temp1);\n    final_result = calculate_product((int)final_result,(int)((ulonglong)final_result >> 0x20),0x55555555,0x3fc55555);\n    final_result = calculate_result_08005c70((int)final_result,(int)((ulonglong)final_result >> 0x20),temp1,temp1);\n    temp2 = (undefined4)((ulonglong)final_result >> 0x20);\n    temp_result_1 = calculate_result_08005c70(temp1,temp1,0xb12e9282,0x3fb3b8c5);\n    temp_result_1 = calculate_result_08005c70_2((int)temp_result_1,(int)((ulonglong)temp_result_1 >> 0x20),0x1b8d0159,0x3fe6066c);\n    temp_result_1 = calculate_result_08005c70((int)temp_result_1,(int)((ulonglong)temp_result_1 >> 0x20),temp1,temp1);\n    temp_result_1 = calculate_product((int)temp_result_1,(int)((ulonglong)temp_result_1 >> 0x20),0x9c598ac8,0x40002ae5);\n    temp_result_1 = calculate_result_08005c70((int)temp_result_1,(int)((ulonglong)temp_result_1 >> 0x20),temp1,temp1);\n    temp_result_1 = calculate_result_08005c70_2((int)temp_result_1,(int)((ulonglong)temp_result_1 >> 0x20),0x1c8a2d4b,0x40033a27);\n    temp_result_1 = calculate_result_08005c70((int)temp_result_1,(int)((ulonglong)temp_result_1 >> 0x20),temp1,temp1);\n    temp_result_1 = calculate_product((int)temp_result_1,(int)((ulonglong)temp_result_1 >> 0x20),0,0x3ff00000);\n    temp3 = (undefined4)((ulonglong)temp_result_1 >> 0x20);\n    temp_result_2 = calculate_float(temp1,temp1);\n    temp4 = (undefined4)((ulonglong)temp_result_2 >> 0x20);\n    temp2 = (undefined4)temp_result_2;\n    if (abs_input2 < 0x3fef3333) {\n      final_result = calculate_double((int)final_result,temp2,(int)temp_result_1,temp3);\n      temp_result_1 = calculate_product(temp2,temp4,temp2,temp4);\n      final_result = calculate_result_08005c70((int)final_result,(int)((ulonglong)final_result >> 0x20),(int)temp_result_1,\n                           (int)((ulonglong)temp_result_1 >> 0x20));\n      temp_result_1 = calculate_result_08005c70(0,temp4,0,temp4);\n      temp_result_1 = calculate_result_08005c70_2(temp1,temp1,(int)temp_result_1,(int)((ulonglong)temp_result_1 >> 0x20));\n      temp_result_2 = calculate_product(temp2,temp4,0,temp4);\n      temp_result_1 = calculate_double((int)temp_result_1,(int)((ulonglong)temp_result_1 >> 0x20),(int)temp_result_2,\n                            (int)((ulonglong)temp_result_2 >> 0x20));\n      temp1 = (undefined4)((ulonglong)temp_result_1 >> 0x20);\n      temp_result_1 = calculate_product((int)temp_result_1,temp1,(int)temp_result_1,temp1);\n      temp_result_1 = calculate_result_08005c70_2(0x33145c07,0x3c91a626,(int)temp_result_1,(int)((ulonglong)temp_result_1 >> 0x20));\n      final_result = calculate_result_08005c70_2((int)final_result,(int)((ulonglong)final_result >> 0x20),(int)temp_result_1,\n                           (int)((ulonglong)temp_result_1 >> 0x20));\n      temp_result_1 = calculate_product(0,temp4,0,temp4);\n      temp_result_1 = calculate_result_08005c70_2(0x54442d18,0x3fe921fb,(int)temp_result_1,(int)((ulonglong)temp_result_1 >> 0x20));\n      final_result = calculate_result_08005c70_2((int)final_result,(int)((ulonglong)final_result >> 0x20),(int)temp_result_1,\n                           (int)((ulonglong)temp_result_1 >> 0x20));\n      temp1 = 0x3fe921fb;\n    }\n    else {\n      final_result = calculate_double((int)final_result,temp2,(int)temp_result_1,temp3);\n      final_result = calculate_result_08005c70((int)final_result,(int)((ulonglong)final_result >> 0x20),temp2,temp4);\n      final_result = calculate_product((int)final_result,(int)((ulonglong)final_result >> 0x20),temp2,temp4);\n      temp1 = (undefined4)((ulonglong)final_result >> 0x20);\n      final_result = calculate_product((int)final_result,temp1,(int)final_result,temp1);\n      final_result = calculate_result_08005c70_2((int)final_result,(int)((ulonglong)final_result >> 0x20),0x33145c07,0x3c91a626);\n      temp1 = 0x3ff921fb;\n    }\n    final_result = calculate_result_08005c70_2(0x54442d18,temp1,(int)final_result,(int)((ulonglong)final_result >> 0x20));\n    if ((int)input2 < 1) {\n      final_result = CONCAT44((int)((ulonglong)final_result >> 0x20) + -0x80000000,(int)final_result);\n    }\n  }\n  else {\n    if ((abs_input2 + 0xc0100000 | input1) != 0) {\n      final_result = calculate_result_08005c70_2(input1,input2,input1,input2);\n      temp1 = (undefined4)((ulonglong)final_result >> 0x20);\n      final_result = calculate_double((int)final_result,temp1,(int)final_result,temp1);\n      return final_result;\n    }\n    final_result = calculate_result_08005c70(input1,input2,0x54442d18,0x3ff921fb);\n    temp_result_1 = calculate_result_08005c70(input1,input2,0x33145c07,0x3c91a626);\nLAB_08005cba:\n    final_result = calculate_product((int)final_result,(int)((ulonglong)final_result >> 0x20),(int)temp_result_1,\n                         (int)((ulonglong)temp_result_1 >> 0x20));\n  }\n  return final_result;\n}\n\n",
            "renaming": {
                "FUN_08005c70": "calculate_result_08005c70",
                "param_1": "input1",
                "param_2": "input2",
                "iVar1": "is_terminated",
                "uVar2": "temp1",
                "uVar3": "temp2",
                "uVar4": "temp3",
                "uVar5": "temp4",
                "uVar6": "temp1",
                "uVar7": "temp2",
                "uVar8": "abs_input2",
                "uVar9": "final_result",
                "uVar10": "temp_result_1",
                "uVar11": "temp_result_2",
                "uVar1": "combined_input",
                "is_null_terminated_080009f0": "check_if_null_terminated",
                "calculate_product_0800016c": "calculate_product",
                "calculate_result_080004d0": "calculate_result",
                "calculate_result_08000168": "calculate_result_2",
                "calculate_float_08006c0c": "calculate_float",
                "calculate_double_08000724": "calculate_double"
            },
            "calling": [
                "FUN_08005854"
            ],
            "called": [
                "FUN_08000724",
                "FUN_0800708c",
                "FUN_0800016c",
                "FUN_08006c0c",
                "FUN_08000168",
                "FUN_080004d0",
                "FUN_080009f0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08005c70": {
                    "4": "calculate",
                    "1": "calculate_improved_result",
                    "19": "calculate_result"
                },
                "param_1": {
                    "3": "input_param_1",
                    "10": "input_1",
                    "17": "input1",
                    "1": "value1"
                },
                "param_2": {
                    "10": "input_2",
                    "17": "input2",
                    "1": "value2",
                    "3": "input_param_2"
                },
                "iVar1": {
                    "1": "is_result_null",
                    "12": "is_terminated",
                    "5": "is_null_terminated",
                    "2": "is_null",
                    "6": "result"
                },
                "uVar2": {
                    "1": "result_2",
                    "4": "temp1",
                    "3": "result1",
                    "2": "result_high"
                },
                "uVar3": {
                    "1": "result2_high",
                    "2": "result3",
                    "4": "temp_2",
                    "3": "result2"
                },
                "uVar4": {
                    "1": "result3_high",
                    "4": "temp3",
                    "3": "result3",
                    "2": "result4"
                },
                "uVar5": {
                    "1": "result_2_low",
                    "2": "result_high4",
                    "4": "temp4",
                    "3": "result4"
                },
                "uVar6": {
                    "2": "result1",
                    "1": "temp_high",
                    "4": "temp_5",
                    "3": "temp5",
                    "6": "temp1"
                },
                "uVar7": {
                    "1": "result_high",
                    "4": "temp_6",
                    "6": "temp2",
                    "3": "temp6",
                    "2": "result2"
                },
                "uVar8": {
                    "1": "temp3",
                    "2": "u_var8",
                    "4": "abs_input2"
                },
                "uVar9": {
                    "3": "final_result1",
                    "1": "temp2",
                    "10": "final_result",
                    "2": "final_result_high",
                    "9": "result"
                },
                "uVar10": {
                    "2": "temp3",
                    "5": "temp_result_1",
                    "1": "temp9",
                    "3": "final_result2",
                    "4": "temp_result1"
                },
                "uVar11": {
                    "6": "temp_result_2",
                    "1": "result_5_1",
                    "3": "final_result3",
                    "5": "temp_result2",
                    "2": "intermediate_result2"
                },
                "uVar1": {
                    "1": "result64_1",
                    "2": "combined_input"
                },
                "FUNC_0800708c": {
                    "1": "calculate_func"
                },
                "is_null_terminated_080009f0": {
                    "1": "is_not_null_terminated"
                },
                "calculate_product_0800016c": {
                    "2": "calculate_product"
                },
                "calculate_result_080004d0": {
                    "2": "calculate_result"
                },
                "calculate_result_08000168": {
                    "1": "calculate_result_2"
                },
                "calculate_float_08006c0c": {
                    "2": "calculate_float"
                },
                "calculate_double_08000724": {
                    "1": "calculate_double"
                }
            }
        },
        "FUN_08006070": {
            "entrypoint": "0x08006070",
            "current_name": "calculate_result_08006070",
            "code": "\nundefined8 calculate_result_08006070(uint input_1,uint input_2,uint input_3,uint input_4)\n\n{\n  undefined4 result_1;\n  uint result_2;\n  uint result_3;\n  int result_4;\n  uint result_5;\n  undefined8 final_result;\n  undefined8 temp_result;\n  \n  result_5 = input_4 & 0x7fffffff;\n  if ((0x7ff00000 < (result_5 | (-input_3 | input_3) >> 0x1f)) ||\n     (result_3 = input_2 & 0x7fffffff, 0x7ff00000 < (result_3 | (-input_1 | input_1) >> 0x1f))) {\n    final_result = calculate_product(input_1,input_2,input_3,input_4,input_4);\n    return final_result;\n  }\n  if ((input_4 + 0xc0100000 | input_3) == 0) {\n    final_result = get_result();\n    return final_result;\n  }\n  result_2 = (int)input_4 >> 0x1e & 2U | input_2 >> 0x1f;\n  if ((input_1 | result_3) == 0) {\n    if (result_2 == 2) {\n      return 0x400921fb54442d18;\n    }\n    if (result_2 != 3) {\n      return CONCAT44(input_2,input_1);\n    }\nLAB_0800613e:\n    final_result = 0xc00921fb54442d18;\n  }\n  else {\n    if ((input_3 | result_5) != 0) {\n      if (result_5 == 0x7ff00000) {\n        if (result_3 == 0x7ff00000) {\n          if (result_2 == 2) {\n            return 0x4002d97c7f3321d2;\n          }\n          if (result_2 == 3) {\n            return 0xc002d97c7f3321d2;\n          }\n          if (result_2 != 1) {\n            return 0x3fe921fb54442d18;\n          }\n          return 0xbfe921fb54442d18;\n        }\n        if (result_2 == 2) {\n          return 0x400921fb54442d18;\n        }\n        if (result_2 != 3) {\n          if (result_2 != 1) {\n            return 0;\n          }\n          return 0x8000000000000000;\n        }\n        goto LAB_0800613e;\n      }\n      if (result_3 != 0x7ff00000) {\n        result_4 = (int)(result_3 - result_5) >> 0x14;\n        if (result_4 < 0x3d) {\n          if (((int)input_4 < 0) && (result_4 + 0x3c < 0 != SCARRY4(result_4,0x3c))) {\n            final_result = 0;\n          }\n          else {\n            calculate_double(input_1,input_2);\n            FUNC_0800708c();\n            final_result = get_result();\n          }\n        }\n        else {\n          final_result = 0x3ff921fb54442d18;\n        }\n        result_4 = (int)((ulonglong)final_result >> 0x20);\n        result_1 = (undefined4)final_result;\n        if (result_2 == 1) {\n          return CONCAT44(result_4 + -0x80000000,result_1);\n        }\n        if (result_2 == 2) {\n          temp_result = perform_calculation(result_1,result_4,0x33145c07,0x3ca1a626);\n          final_result = 0x400921fb54442d18;\n        }\n        else {\n          if (result_2 == 0) {\n            return final_result;\n          }\n          final_result = perform_calculation(result_1,result_4,0x33145c07,0x3ca1a626);\n          temp_result = 0x400921fb54442d18;\n        }\n        final_result = perform_calculation((int)final_result,(int)((ulonglong)final_result >> 0x20),(int)temp_result,\n                             (int)((ulonglong)temp_result >> 0x20));\n        return final_result;\n      }\n    }\n    if ((int)input_2 < 0) {\n      final_result = 0xbff921fb54442d18;\n    }\n    else {\n      final_result = 0x3ff921fb54442d18;\n    }\n  }\n  return final_result;\n}\n\n",
            "renaming": {
                "FUN_08006070": "calculate_result_08006070",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "uVar2": "result_2",
                "uVar3": "result_3",
                "uVar5": "result_5",
                "uVar6": "final_result",
                "uVar7": "temp_result",
                "uVar1": "result_1",
                "iVar4": "result_4",
                "calculate_product_0800016c": "calculate_product",
                "calculate_result_08006d68": "get_result",
                "calculate_result_08000168": "perform_calculation",
                "calculate_double_08000724": "calculate_double"
            },
            "calling": [
                "thunk_FUN_08006070"
            ],
            "called": [
                "FUN_0800708c",
                "FUN_08000724",
                "FUN_08006d68",
                "FUN_0800016c",
                "FUN_08000168"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08006070": {
                    "4": "calculate_value",
                    "1": "calculate_improved_result",
                    "2": "calculate",
                    "16": "calculate_result"
                },
                "param_1": {
                    "14": "input_1",
                    "1": "num1",
                    "2": "value1",
                    "13": "input1"
                },
                "param_2": {
                    "13": "input2",
                    "1": "num2",
                    "14": "input_2",
                    "2": "value2"
                },
                "param_3": {
                    "14": "input_3",
                    "1": "num3",
                    "2": "value3",
                    "13": "input3"
                },
                "param_4": {
                    "14": "input_4",
                    "1": "operand4",
                    "2": "value4",
                    "13": "input4"
                },
                "uVar2": {
                    "3": "flag",
                    "1": "var2",
                    "8": "result2",
                    "11": "result_2"
                },
                "uVar3": {
                    "1": "flag2",
                    "8": "result3",
                    "11": "result_3"
                },
                "uVar5": {
                    "1": "abs_param_4",
                    "2": "modified_input4",
                    "8": "result5",
                    "10": "result_5"
                },
                "uVar6": {
                    "2": "final_result1",
                    "1": "output_result",
                    "12": "final_result",
                    "3": "output",
                    "10": "result"
                },
                "uVar7": {
                    "9": "temp_result",
                    "1": "var7",
                    "2": "final_result2",
                    "6": "result2",
                    "4": "intermediate_result"
                },
                "uVar1": {
                    "3": "result_low",
                    "1": "temp_var1",
                    "9": "result1",
                    "11": "result_1"
                },
                "iVar4": {
                    "1": "shift_amount",
                    "2": "temp_var2",
                    "10": "result_4",
                    "8": "result4",
                    "4": "difference"
                },
                "calculate_product_0800016c": {
                    "1": "calculate_product"
                },
                "calculate_result_08006d68": {
                    "1": "get_result"
                },
                "calculate_result_08000168": {
                    "1": "perform_calculation"
                },
                "calculate_double_08000724": {
                    "1": "calculate_double"
                },
                "FUNC_0800708c": {
                    "1": "perform_function"
                }
            }
        },
        "FUN_08006228": {
            "entrypoint": "0x08006228",
            "current_name": "calculate_float_08006228",
            "code": "\nuint calculate_float_08006228(uint input1,uint input2,uint input3,uint input4)\n\n{\n  undefined4 result1;\n  uint result2;\n  uint result3;\n  undefined4 result3;\n  undefined4 result4;\n  undefined4 result6;\n  undefined4 result7;\n  uint result8;\n  undefined4 result9;\n  int temp_1;\n  int temp_2;\n  undefined4 temp3;\n  uint temp4;\n  undefined4 temp5;\n  int temp_6;\n  uint temp7;\n  undefined4 temp8;\n  undefined4 temp9;\n  undefined8 temp10;\n  undefined8 temp11;\n  undefined8 temp12;\n  undefined8 temp13;\n  longlong temp14;\n  ulonglong temp15;\n  undefined8 temp16;\n  uint result;\n  undefined4 local_var2;\n  undefined4 local_var3;\n  int shift;\n  \n  temp11 = CONCAT44(input2,input1);\n  temp7 = input4 & 0x7fffffff;\n  if ((temp7 | input3) == 0) {\n    return 0;\n  }\n  temp4 = input2 & 0x7fffffff;\n  if (temp4 < 0x7ff00001) {\n    if (temp4 == 0x7ff00000) {\n      if (input1 == 0) {\n        if (0x7ff00000 < temp7) goto LAB_08006278;\nLAB_08006262:\n        if ((temp7 != 0x7ff00000) || (input3 == 0)) {\n          if (-1 < (int)input2) goto LAB_0800632a;\n          if (temp7 < 0x43400000) {\n            if (temp7 < 0x3ff00000) {\nLAB_0800632a:\n              result = 0;\n              goto LAB_080062ba;\n            }\n            temp_1 = ((int)temp7 >> 0x14) + -0x3ff;\n            if (0x14 < temp_1) {\n              result2 = input3 >> (0x34U - temp_1 & 0xff);\n              if (input3 == result2 << (0x34U - temp_1 & 0xff)) {\n                result = 2 - (result2 & 1);\n                goto LAB_080062ba;\n              }\n              goto LAB_0800632a;\n            }\n            if (input3 == 0) {\n              result2 = (int)temp7 >> (0x14U - temp_1 & 0xff);\n              if (temp7 == result2 << (0x14U - temp_1 & 0xff)) {\n                result = 2 - (result2 & 1);\n              }\n              else {\n                result = 0;\n              }\n              goto LAB_0800630c;\n            }\n            result = 0;\n          }\n          else {\n            result = 2;\nLAB_080062ba:\n            if (input3 == 0) {\n              if (temp7 == 0x7ff00000) {\n                if ((temp4 + 0xc0100000 | input1) == 0) {\n                  return 0;\n                }\n                if (0x3fefffff < temp4) {\n                  if ((int)input4 < 0) {\n                    return 0;\n                  }\n                  return 0;\n                }\n                if (-1 < (int)input4) {\n                  return 0;\n                }\n                return 0;\n              }\nLAB_0800630c:\n              if (temp7 == 0x3ff00000) {\n                if (-1 < (int)input4) {\n                  return input1;\n                }\n                temp10 = 0x3ff0000000000000;\n                goto LAB_08006320;\n              }\n              if (input4 == 0x40000000) goto LAB_0800634a;\n              if ((input4 == 0x3fe00000) && (-1 < (int)input2)) {\n                temp7 = calculate_float_08006228_08006c0c(input1,input2);\n                return temp7;\n              }\n            }\n          }\n          temp10 = FUNC_0800708c(input1,input2);\n          temp8 = (undefined4)((ulonglong)temp10 >> 0x20);\n          result1 = (undefined4)temp10;\n          temp15 = CONCAT44(input2,result1) & 0x7fffffffffffffff;\n          if ((input1 == 0) && ((temp4 == 0 || ((input2 & 0x3fffffff) == 0x3ff00000)))) {\n            if ((int)input4 < 0) {\n              temp10 = calculate_double_08000724(0,0x3ff00000,result1,temp8);\n            }\n            if (-1 < (int)input2) {\n              return (uint)temp10;\n            }\n            if ((result | temp4 + 0xc0100000) != 0) {\n              return (uint)temp10;\n            }\n          }\n          else {\n            result2 = 0xffffffff - ((int)input2 >> 0x1f);\n            temp10 = temp11;\n            if ((result | result2) != 0) {\n              if (temp7 < 0x41e00001) {\n                shift = 0;\n                if (temp4 < 0x100000) {\n                  temp15 = calculate_result_080004d0();\n                  shift = -0x35;\n                }\n                temp7 = (uint)(temp15 >> 0x20);\n                result1 = (undefined4)temp15;\n                shift = ((int)temp7 >> 0x14) + -0x3ff + shift;\n                temp7 = temp7 & 0xfffff;\n                temp4 = temp7 | 0x3ff00000;\n                if (temp7 < 0x3988f) {\nLAB_08006628:\n                  temp_1 = 0;\n                }\n                else {\n                  if (0xbb679 < temp7) {\n                    temp4 = temp4 - 0x100000;\n                    shift = shift + 1;\n                    goto LAB_08006628;\n                  }\n                  temp_1 = 1;\n                }\n                temp_2 = temp_1 * 8;\n                temp3 = (&DAT_080073c0)[temp_1 * 2];\n                temp5 = (&DAT_080073c4)[temp_1 * 2];\n                temp11 = calculate_result_08000168(result1,temp4,temp3,temp5);\n                temp9 = (undefined4)((ulonglong)temp11 >> 0x20);\n                temp10 = calculate_product_0800016c(result1,temp4,temp3,temp5);\n                temp10 = calculate_double_08000724(0,0x3ff00000,(int)temp10,(int)((ulonglong)temp10 >> 0x20));\n                result3 = (undefined4)((ulonglong)temp10 >> 0x20);\n                temp12 = calculate_result_080004d0((int)temp11,temp9,(int)temp10,result3);\n                result4 = (undefined4)((ulonglong)temp12 >> 0x20);\n                temp8 = (undefined4)temp12;\n                temp12 = calculate_result_080004d0(0,result4);\n                temp11 = calculate_result_08000168((int)temp11,temp9,(int)temp12,\n                                      (int)((ulonglong)temp12 >> 0x20));\n                temp12 = calculate_result_08000168(0,((int)temp4 >> 1 | 0x20000000U) + 0x80000 + temp_1 * 0x40000,\n                                      temp3,temp5);\n                temp12 = calculate_result_08000168(result1,temp4,(int)temp12,(int)((ulonglong)temp12 >> 0x20));\n                temp12 = calculate_result_080004d0((int)temp12,(int)((ulonglong)temp12 >> 0x20),0,result4);\n                temp11 = calculate_result_08000168((int)temp11,(int)((ulonglong)temp11 >> 0x20),(int)temp12,\n                                      (int)((ulonglong)temp12 >> 0x20));\n                temp11 = calculate_result_080004d0((int)temp11,(int)((ulonglong)temp11 >> 0x20),(int)temp10,result3\n                                     );\n                temp9 = (undefined4)((ulonglong)temp11 >> 0x20);\n                temp10 = calculate_result_080004d0(temp8,result4);\n                result3 = (undefined4)((ulonglong)temp10 >> 0x20);\n                result1 = (undefined4)temp10;\n                temp10 = calculate_result_080004d0(result1,result3,0x4a454eef,0x3fca7e28);\n                temp10 = calculate_product_0800016c((int)temp10,(int)((ulonglong)temp10 >> 0x20),0x93c9db65,\n                                      0x3fcd864a);\n                temp10 = calculate_result_080004d0((int)temp10,(int)((ulonglong)temp10 >> 0x20),result1,result3);\n                temp10 = calculate_product_0800016c((int)temp10,(int)((ulonglong)temp10 >> 0x20),0xa91d4101,\n                                      0x3fd17460);\n                temp10 = calculate_result_080004d0((int)temp10,(int)((ulonglong)temp10 >> 0x20),result1,result3);\n                temp10 = calculate_product_0800016c((int)temp10,(int)((ulonglong)temp10 >> 0x20),0x518f264d,\n                                      0x3fd55555);\n                temp10 = calculate_result_080004d0((int)temp10,(int)((ulonglong)temp10 >> 0x20),result1,result3);\n                temp10 = calculate_product_0800016c((int)temp10,(int)((ulonglong)temp10 >> 0x20),0xdb6fabff,\n                                      0x3fdb6db6);\n                temp10 = calculate_result_080004d0((int)temp10,(int)((ulonglong)temp10 >> 0x20),result1,result3);\n                temp10 = calculate_product_0800016c((int)temp10,(int)((ulonglong)temp10 >> 0x20),0x33333303,\n                                      0x3fe33333);\n                temp12 = calculate_result_080004d0(result1,result3,result1,result3);\n                temp10 = calculate_result_080004d0((int)temp10,(int)((ulonglong)temp10 >> 0x20),(int)temp12,\n                                      (int)((ulonglong)temp12 >> 0x20));\n                temp12 = calculate_product_0800016c(temp8,result4,0,result4);\n                temp12 = calculate_result_080004d0((int)temp12,(int)((ulonglong)temp12 >> 0x20),(int)temp11,\n                                      temp9);\n                temp10 = calculate_product_0800016c((int)temp12,(int)((ulonglong)temp12 >> 0x20),(int)temp10,\n                                      (int)((ulonglong)temp10 >> 0x20));\n                result1 = (undefined4)((ulonglong)temp10 >> 0x20);\n                temp12 = calculate_result_080004d0(0,result4,0,result4);\n                result3 = (undefined4)((ulonglong)temp12 >> 0x20);\n                temp13 = calculate_product_0800016c((int)temp12,result3,0,0x40080000);\n                calculate_product_0800016c((int)temp13,(int)((ulonglong)temp13 >> 0x20),(int)temp10,result1);\n                temp13 = calculate_result_080004d0(0,result4,0,result6);\n                temp3 = (undefined4)((ulonglong)temp13 >> 0x20);\n                temp16 = calculate_result_08000168(0,result6,0,0x40080000);\n                temp12 = calculate_result_08000168((int)temp16,(int)((ulonglong)temp16 >> 0x20),(int)temp12,result3\n                                     );\n                temp10 = calculate_result_08000168((int)temp10,result1,(int)temp12,(int)((ulonglong)temp12 >> 0x20)\n                                     );\n                temp10 = calculate_result_080004d0((int)temp10,(int)((ulonglong)temp10 >> 0x20),temp8,result4);\n                temp11 = calculate_result_080004d0((int)temp11,temp9,0,result6);\n                temp10 = calculate_product_0800016c((int)temp10,(int)((ulonglong)temp10 >> 0x20),(int)temp11,\n                                      (int)((ulonglong)temp11 >> 0x20));\n                result1 = (undefined4)((ulonglong)temp10 >> 0x20);\n                calculate_product_0800016c((int)temp13,temp3,(int)temp10,result1);\n                temp11 = calculate_result_080004d0(0,result7,0xe0000000,0x3feec709);\n                temp12 = calculate_result_08000168(0,result7,(int)temp13,temp3);\n                temp10 = calculate_result_08000168((int)temp10,result1,(int)temp12,(int)((ulonglong)temp12 >> 0x20)\n                                     );\n                temp10 = calculate_result_080004d0((int)temp10,(int)((ulonglong)temp10 >> 0x20),0xdc3a03fd,\n                                      0x3feec709);\n                temp12 = calculate_result_080004d0(0,result7,0x145b01f5,0xbe3e2fe0);\n                temp10 = calculate_product_0800016c((int)temp10,(int)((ulonglong)temp10 >> 0x20),(int)temp12,\n                                      (int)((ulonglong)temp12 >> 0x20));\n                temp10 = calculate_product_0800016c((int)temp10,(int)((ulonglong)temp10 >> 0x20),\n                                      *(undefined4 *)(&DAT_080073e0 + temp_2),\n                                      *(undefined4 *)(&DAT_080073e4 + temp_2));\n                temp12 = reverse_bits_08000404(shift);\n                result1 = (undefined4)((ulonglong)temp12 >> 0x20);\n                temp8 = *(undefined4 *)(&DAT_080073d0 + temp_2);\n                temp9 = *(undefined4 *)(&DAT_080073d4 + temp_2);\n                temp13 = calculate_product_0800016c((int)temp11,(int)((ulonglong)temp11 >> 0x20),(int)temp10,\n                                      (int)((ulonglong)temp10 >> 0x20));\n                temp13 = calculate_product_0800016c((int)temp13,(int)((ulonglong)temp13 >> 0x20),temp8,temp9);\n                calculate_product_0800016c((int)temp13,(int)((ulonglong)temp13 >> 0x20),(int)temp12,result1);\n                temp12 = calculate_result_08000168(0,result8,(int)temp12,result1);\n                temp14 = calculate_result_08000168((int)temp12,(int)((ulonglong)temp12 >> 0x20),temp8,temp9);\n                temp7 = result8;\n              }\n              else {\n                if (0x43f00000 < temp7) {\n                  if (temp4 < 0x3ff00000) goto LAB_080063fa;\nLAB_08006418:\n                  if ((int)input4 < 1) {\n                    return 0;\n                  }\nLAB_08006400:\n                  input1 = 0x8800759c;\n                  input2 = 0x7e37e43c;\n                  temp11 = 0x7e37e43c8800759c;\n                  goto LAB_0800634a;\n                }\n                if (temp4 < 0x3fefffff) {\nLAB_080063fa:\n                  if (-1 < (int)input4) {\n                    return 0;\n                  }\n                  goto LAB_08006400;\n                }\n                if (0x3ff00000 < temp4) goto LAB_08006418;\n                temp11 = calculate_result_08000168(result1,temp8,0,0x3ff00000);\n                temp8 = (undefined4)((ulonglong)temp11 >> 0x20);\n                result1 = (undefined4)temp11;\n                temp11 = calculate_result_080004d0(result1,temp8,0x60000000,0x3ff71547);\n                temp10 = calculate_result_080004d0(result1,temp8,0xf85ddf44,0x3e54ae0b);\n                temp12 = calculate_result_080004d0(result1,temp8,0,0x3fd00000);\n                temp12 = calculate_result_08000168(0x55555555,0x3fd55555,(int)temp12,\n                                      (int)((ulonglong)temp12 >> 0x20));\n                temp12 = calculate_result_080004d0((int)temp12,(int)((ulonglong)temp12 >> 0x20),result1,temp8);\n                temp12 = calculate_result_08000168(0,0x3fe00000,(int)temp12,(int)((ulonglong)temp12 >> 0x20));\n                temp13 = calculate_result_080004d0(result1,temp8,result1,temp8);\n                temp12 = calculate_result_080004d0((int)temp12,(int)((ulonglong)temp12 >> 0x20),(int)temp13,\n                                      (int)((ulonglong)temp13 >> 0x20));\n                temp12 = calculate_result_080004d0((int)temp12,(int)((ulonglong)temp12 >> 0x20),0x652b82fe,\n                                      0x3ff71547);\n                temp10 = calculate_result_08000168((int)temp10,(int)((ulonglong)temp10 >> 0x20),(int)temp12,\n                                      (int)((ulonglong)temp12 >> 0x20));\n                calculate_product_0800016c((int)temp11,(int)((ulonglong)temp11 >> 0x20),(int)temp10,\n                             (int)((ulonglong)temp10 >> 0x20));\n                temp14 = (ulonglong)result3 << 0x20;\n                temp7 = result3;\n              }\n              temp11 = calculate_result_08000168((int)temp14,(int)((ulonglong)temp14 >> 0x20),(int)temp11,\n                                    (int)((ulonglong)temp11 >> 0x20));\n              temp11 = calculate_result_08000168((int)temp10,(int)((ulonglong)temp10 >> 0x20),(int)temp11,\n                                    (int)((ulonglong)temp11 >> 0x20));\n              if ((result - 1 | result2) == 0) {\n                input2 = 0xbff00000;\n              }\n              else {\n                input2 = 0x3ff00000;\n              }\n              result = 0;\n              temp10 = calculate_result_08000168(input3,input4,0,input4);\n              temp10 = calculate_result_080004d0((int)temp10,(int)((ulonglong)temp10 >> 0x20),0,temp7);\n              temp11 = calculate_result_080004d0((int)temp11,(int)((ulonglong)temp11 >> 0x20),input3,input4);\n              temp11 = calculate_product_0800016c((int)temp10,(int)((ulonglong)temp10 >> 0x20),(int)temp11,\n                                    (int)((ulonglong)temp11 >> 0x20));\n              temp9 = (undefined4)((ulonglong)temp11 >> 0x20);\n              result1 = (undefined4)temp11;\n              temp11 = calculate_result_080004d0(0,temp7,0,input4);\n              result3 = (undefined4)((ulonglong)temp11 >> 0x20);\n              temp8 = (undefined4)temp11;\n              temp14 = calculate_product_0800016c(result1,temp9,temp8,result3);\n              temp4 = (uint)((ulonglong)temp14 >> 0x20);\n              temp7 = (uint)temp14;\n              if (0x408fffffffffffff < temp14) {\n                if ((temp4 + 0xbf700000 | temp7) == 0) {\n                  temp10 = calculate_product_0800016c(result1,temp9,0x652b82fe,0x3c971547);\n                  temp12 = calculate_result_08000168(temp7,temp4,temp8,result3);\n                  temp_1 = is_null_terminated_080009f0((int)temp10,(int)((ulonglong)temp10 >> 0x20),(int)temp12,\n                                       (int)((ulonglong)temp12 >> 0x20));\n                  if (temp_1 == 0) goto LAB_08006968;\n                }\n                temp11 = calculate_result_080004d0(0,input2,0x8800759c,0x7e37e43c);\n                input1 = 0x8800759c;\n                input2 = 0x7e37e43c;\n                goto LAB_0800634a;\n              }\n              if ((temp4 & 0x7fffffff) < 0x4090cc00) {\nLAB_08006968:\n                if ((temp4 & 0x7fffffff) < 0x3fe00001) {\n                  temp_1 = 0;\n                }\n                else {\n                  temp4 = (0x100000 >> (((int)(temp4 & 0x7fffffff) >> 0x14) - 0x3feU & 0xff)) +\n                          temp4;\n                  temp7 = (temp4 * 2 >> 0x15) - 0x3ff;\n                  temp_1 = (int)(temp4 & 0xfffff | 0x100000) >> (0x14 - temp7 & 0xff);\n                  if (temp14 < 0) {\n                    temp_1 = -temp_1;\n                  }\n                  temp11 = calculate_result_08000168(temp8,result3,0,temp4 & ~(0xfffff >> (temp7 & 0xff)));\n                }\n                local_var3 = (undefined4)((ulonglong)temp11 >> 0x20);\n                local_var2 = (undefined4)temp11;\n                calculate_product_0800016c(local_var2,local_var3,result1,temp9);\n                temp11 = calculate_result_080004d0(0,result9,0,0x3fe62e43);\n                temp8 = (undefined4)((ulonglong)temp11 >> 0x20);\n                temp10 = calculate_result_08000168(0,result9,local_var2,local_var3);\n                temp10 = calculate_result_08000168(result1,temp9,(int)temp10,(int)((ulonglong)temp10 >> 0x20));\n                temp10 = calculate_result_080004d0((int)temp10,(int)((ulonglong)temp10 >> 0x20),0xfefa39ef,\n                                      0x3fe62e42);\n                temp12 = calculate_result_080004d0(0,result9,0xca86c39,0xbe205c61);\n                temp10 = calculate_product_0800016c((int)temp10,(int)((ulonglong)temp10 >> 0x20),(int)temp12,\n                                      (int)((ulonglong)temp12 >> 0x20));\n                temp9 = (undefined4)((ulonglong)temp10 >> 0x20);\n                temp12 = calculate_product_0800016c((int)temp11,temp8,(int)temp10,temp9);\n                result3 = (undefined4)((ulonglong)temp12 >> 0x20);\n                result1 = (undefined4)temp12;\n                temp11 = calculate_result_08000168(result1,result3,(int)temp11,temp8);\n                temp11 = calculate_result_08000168((int)temp10,temp9,(int)temp11,\n                                      (int)((ulonglong)temp11 >> 0x20));\n                temp9 = (undefined4)((ulonglong)temp11 >> 0x20);\n                temp10 = calculate_result_080004d0(result1,result3,result1,result3);\n                result4 = (undefined4)((ulonglong)temp10 >> 0x20);\n                temp8 = (undefined4)temp10;\n                temp10 = calculate_result_080004d0(temp8,result4,0x72bea4d0,0x3e663769);\n                temp10 = calculate_result_08000168((int)temp10,(int)((ulonglong)temp10 >> 0x20),0xc5d26bf1,\n                                      0x3ebbbd41);\n                temp10 = calculate_result_080004d0((int)temp10,(int)((ulonglong)temp10 >> 0x20),temp8,result4);\n                temp10 = calculate_product_0800016c((int)temp10,(int)((ulonglong)temp10 >> 0x20),0xaf25de2c,\n                                      0x3f11566a);\n                temp10 = calculate_result_080004d0((int)temp10,(int)((ulonglong)temp10 >> 0x20),temp8,result4);\n                temp10 = calculate_result_08000168((int)temp10,(int)((ulonglong)temp10 >> 0x20),0x16bebd93,\n                                      0x3f66c16c);\n                temp10 = calculate_result_080004d0((int)temp10,(int)((ulonglong)temp10 >> 0x20),temp8,result4);\n                temp10 = calculate_product_0800016c((int)temp10,(int)((ulonglong)temp10 >> 0x20),0x5555553e,\n                                      0x3fc55555);\n                temp10 = calculate_result_080004d0((int)temp10,(int)((ulonglong)temp10 >> 0x20),temp8,result4);\n                temp10 = calculate_result_08000168(result1,result3,(int)temp10,(int)((ulonglong)temp10 >> 0x20));\n                temp8 = (undefined4)((ulonglong)temp10 >> 0x20);\n                temp12 = calculate_result_080004d0(result1,result3,(int)temp10,temp8);\n                temp10 = calculate_result_08000168((int)temp10,temp8,0,0x40000000);\n                temp10 = calculate_double_08000724((int)temp12,(int)((ulonglong)temp12 >> 0x20),(int)temp10,\n                                      (int)((ulonglong)temp10 >> 0x20));\n                temp12 = calculate_result_080004d0(result1,result3,(int)temp11,temp9);\n                temp11 = calculate_product_0800016c((int)temp12,(int)((ulonglong)temp12 >> 0x20),(int)temp11,\n                                      temp9);\n                temp11 = calculate_result_08000168((int)temp10,(int)((ulonglong)temp10 >> 0x20),(int)temp11,\n                                      (int)((ulonglong)temp11 >> 0x20));\n                temp11 = calculate_result_08000168((int)temp11,(int)((ulonglong)temp11 >> 0x20),result1,result3);\n                temp10 = calculate_result_08000168(0,0x3ff00000,(int)temp11,(int)((ulonglong)temp11 >> 0x20));\n                temp_2 = (int)((ulonglong)temp10 >> 0x20);\n                temp_6 = temp_2 + temp_1 * 0x100000;\n                temp11 = CONCAT44(temp_6,(int)temp10);\n                input1 = result;\n                if (temp_6 < 0x100000) {\n                  temp11 = calculate_result_080071c0((int)temp10,temp_2,temp_1);\n                }\n              }\n              else {\n                if ((temp4 + 0x3f6f3400 | temp7) == 0) {\n                  temp10 = calculate_result_08000168(temp7,temp4,temp8,result3);\n                  temp_1 = check_and_return_080009c8(result1,temp9,(int)temp10,(int)((ulonglong)temp10 >> 0x20));\n                  if (temp_1 == 0) goto LAB_08006968;\n                }\n                temp11 = calculate_result_080004d0(0,input2,0xc2f8f359,0x1a56e1f);\n                input1 = 0xc2f8f359;\n                input2 = 0x1a56e1f;\n              }\nLAB_0800634a:\n              temp7 = calculate_result_080004d0((int)temp11,(int)((ulonglong)temp11 >> 0x20),input1,input2);\n              return temp7;\n            }\n          }\n          result1 = (undefined4)((ulonglong)temp10 >> 0x20);\n          temp10 = calculate_result_08000168((int)temp10,result1,(int)temp10,result1);\n          temp11 = temp10;\nLAB_08006320:\n          temp7 = calculate_double_08000724((int)temp10,(int)((ulonglong)temp10 >> 0x20),(int)temp11,\n                                (int)((ulonglong)temp11 >> 0x20));\n          return temp7;\n        }\n      }\n    }\n    else if (temp7 < 0x7ff00001) goto LAB_08006262;\n  }\n  if ((temp4 + 0xc0100000 | input1) == 0) {\n    return 0;\n  }\nLAB_08006278:\n  temp7 = get_infinity_080070a4(&DAT_0800737e);\n  return temp7;\n}\n\n",
            "renaming": {
                "FUN_08006228": "calculate_float_08006228",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "result1",
                "uVar2": "result2",
                "uVar3": "result3",
                "uVar4": "result4",
                "uVar7": "temp3",
                "uVar8": "temp4",
                "uVar9": "temp5",
                "uVar12": "temp8",
                "uVar13": "temp9",
                "uVar14": "temp10",
                "uVar15": "temp11",
                "uVar16": "temp12",
                "uVar17": "temp13",
                "lVar18": "temp14",
                "uVar19": "temp15",
                "uVar20": "temp16",
                "local_70": "result",
                "local_68": "local_var2",
                "local_64": "local_var3",
                "local_54": "shift",
                "uVar11": "temp7",
                "iVar5": "temp_1",
                "iVar6": "temp_2",
                "iVar10": "temp_6",
                "extraout_r1": "result3",
                "extraout_r1_00": "result6",
                "extraout_r1_01": "result7",
                "extraout_r1_02": "result8",
                "extraout_r1_03": "result9"
            },
            "calling": [
                "FUN_08005900"
            ],
            "called": [
                "FUN_08000404",
                "FUN_08000724",
                "FUN_0800708c",
                "FUN_080071c0",
                "FUN_0800016c",
                "FUN_080070a4",
                "FUN_080009c8",
                "FUN_08006c0c",
                "FUN_08000168",
                "FUN_080004d0",
                "FUN_080009f0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08006228": {
                    "4": "calculate_double",
                    "1": "float_calculation",
                    "17": "calculate_float",
                    "2": "calculate_result"
                },
                "param_1": {
                    "2": "exponent",
                    "1": "value1",
                    "6": "input_1",
                    "3": "num1",
                    "8": "input1"
                },
                "param_2": {
                    "1": "value2",
                    "8": "input2",
                    "2": "y",
                    "3": "num2",
                    "6": "input_2"
                },
                "param_3": {
                    "6": "input_3",
                    "2": "z",
                    "1": "number3",
                    "8": "input3",
                    "3": "num3"
                },
                "param_4": {
                    "1": "input_param_4",
                    "6": "input_4",
                    "2": "w",
                    "3": "num4",
                    "8": "input4"
                },
                "uVar1": {
                    "1": "result_var1",
                    "13": "result1",
                    "7": "result_1",
                    "2": "result"
                },
                "uVar2": {
                    "1": "upper_word2",
                    "3": "temp_var1",
                    "10": "result2",
                    "7": "result_2"
                },
                "uVar3": {
                    "1": "exponent_b",
                    "2": "temp2",
                    "6": "result3",
                    "3": "temp_var2",
                    "5": "result_3",
                    "4": "result4"
                },
                "uVar4": {
                    "2": "temp3",
                    "1": "mantissa_b",
                    "5": "result_4",
                    "4": "result5",
                    "6": "result4"
                },
                "uVar7": {
                    "1": "significand_bits",
                    "3": "temp3",
                    "2": "temp_var4"
                },
                "uVar8": {
                    "1": "abs_x2",
                    "3": "temp4"
                },
                "uVar9": {
                    "1": "result",
                    "3": "temp5"
                },
                "uVar12": {
                    "1": "result4",
                    "3": "temp_8",
                    "2": "result12"
                },
                "uVar13": {
                    "1": "var13",
                    "2": "result13",
                    "3": "temp_9"
                },
                "uVar14": {
                    "1": "temp_var_10",
                    "3": "temp10",
                    "2": "result15"
                },
                "uVar15": {
                    "1": "temp_18",
                    "2": "result16",
                    "3": "temp_11"
                },
                "uVar16": {
                    "1": "temp3",
                    "3": "temp12",
                    "2": "result17"
                },
                "uVar17": {
                    "1": "var17",
                    "3": "temp13",
                    "2": "result18"
                },
                "lVar18": {
                    "1": "var8",
                    "2": "result_5",
                    "3": "temp14"
                },
                "uVar19": {
                    "1": "var19",
                    "2": "result_6",
                    "3": "temp_15"
                },
                "uVar20": {
                    "1": "temp7",
                    "3": "temp_16",
                    "2": "result21"
                },
                "local_70": {
                    "2": "local_var1",
                    "1": "classification",
                    "3": "result"
                },
                "local_68": {
                    "1": "local_var_3",
                    "2": "local_var2"
                },
                "local_64": {
                    "1": "local_var_3",
                    "2": "local_var3"
                },
                "local_54": {
                    "1": "temp9",
                    "2": "local_var_4"
                },
                "uVar11": {
                    "1": "exponent_normalized",
                    "3": "temp7",
                    "2": "result"
                },
                "iVar5": {
                    "1": "temp4",
                    "3": "temp_1",
                    "2": "temp1"
                },
                "iVar6": {
                    "1": "multiplier",
                    "2": "temp2",
                    "3": "temp_2"
                },
                "iVar10": {
                    "1": "factor",
                    "3": "temp_6",
                    "2": "shift_count"
                },
                "extraout_r1": {
                    "1": "extra_output",
                    "4": "result3",
                    "2": "result_3"
                },
                "extraout_r1_00": {
                    "4": "result6",
                    "1": "extra_result1_0",
                    "2": "result_6"
                },
                "extraout_r1_01": {
                    "4": "result7",
                    "1": "extra_result_3",
                    "2": "result_7"
                },
                "extraout_r1_02": {
                    "1": "fraction",
                    "4": "result8",
                    "2": "result_8"
                },
                "extraout_r1_03": {
                    "4": "result9",
                    "1": "temp_var8",
                    "2": "result_9"
                },
                "uVar5": {
                    "1": "temp1"
                },
                "uVar6": {
                    "1": "var6"
                },
                "uVar10": {
                    "1": "var10"
                },
                "iVar11": {
                    "1": "exp_diff"
                },
                "uVar18": {
                    "1": "var18"
                }
            }
        },
        "FUN_08006c0c": {
            "entrypoint": "0x08006c0c",
            "current_name": "calculate_float_08006c0c",
            "code": "\nundefined8 calculate_float_08006c0c(uint input_1,uint input_2)\n\n{\n  undefined4 result1;\n  uint result2;\n  int shift_count;\n  int counter;\n  uint temp1;\n  uint temp2;\n  int exponent;\n  uint temp_7;\n  uint mask;\n  int temp_9;\n  uint temp3;\n  undefined8 final_result;\n  \n  if ((~input_2 & 0x7ff00000) == 0) {\n    final_result = calculate_result(input_1,input_2,input_1,input_2);\n    final_result = calculate_product(input_1,input_2,(int)final_result,(int)((ulonglong)final_result >> 0x20));\n    return final_result;\n  }\n  if ((int)input_2 < 1) {\n    if ((input_2 & 0x7fffffff | input_1) == 0) {\n      return concatenate_numbers(input_2,input_1);\n    }\n    if (input_2 != 0) {\n      final_result = calculate_result_2(input_1,input_2,input_1,input_2);\n      result1 = (undefined4)((ulonglong)final_result >> 0x20);\n      final_result = calculate_double((int)final_result,result1,(int)final_result,result1);\n      return final_result;\n    }\n  }\n  shift_count = (int)input_2 >> 0x14;\n  if (shift_count == 0) {\n    while (input_2 == 0) {\n      shift_count = shift_count + -0x15;\n      input_2 = input_1 >> 0xb;\n      input_1 = input_1 << 0x15;\n    }\n    result2 = 0;\n    for (; -1 < (int)(input_2 << 0xb); input_2 = input_2 << 1) {\n      result2 = result2 + 1;\n    }\n    shift_count = shift_count - (result2 - 1);\n    input_2 = input_2 | input_1 >> (0x20 - result2 & 0xff);\n    input_1 = input_1 << (result2 & 0xff);\n  }\n  exponent = 0;\n  result2 = input_2 & 0xfffff | 0x100000;\n  if ((shift_count + -0x3ff) * -0x80000000 < 0) {\n    result2 = result2 * 2 - ((int)input_1 >> 0x1f);\n    input_1 = input_1 << 1;\n  }\n  result2 = result2 * 2 - ((int)input_1 >> 0x1f);\n  counter = 0x16;\n  temp1 = 0;\n  temp_7 = 0x200000;\n  input_1 = input_1 << 1;\n  do {\n    temp_9 = temp1 + temp_7;\n    if (temp_9 <= (int)result2) {\n      result2 = result2 - temp_9;\n      temp1 = temp_9 + temp_7;\n      exponent = exponent + temp_7;\n    }\n    counter = counter + -1;\n    result2 = result2 * 2 - ((int)input_1 >> 0x1f);\n    temp_7 = temp_7 >> 1;\n    input_1 = input_1 << 1;\n  } while (counter != 0);\n  temp_9 = 0x20;\n  mask = 0x80000000;\n  temp_7 = 0;\n  counter = 0;\n  do {\n    temp3 = mask + counter;\n    temp2 = temp1;\n    if (((int)temp1 < (int)result2) || ((result2 == temp1 && (temp3 <= input_1)))) {\n      counter = temp3 + mask;\n      if (((int)temp3 < 0) && (-1 < counter)) {\n        temp2 = temp1 + 1;\n      }\n      result2 = result2 - temp1;\n      if (input_1 < temp3) {\n        result2 = result2 - 1;\n      }\n      input_1 = input_1 - temp3;\n      temp_7 = temp_7 + mask;\n    }\n    result2 = result2 * 2 - ((int)input_1 >> 0x1f);\n    temp_9 = temp_9 + -1;\n    input_1 = input_1 << 1;\n    mask = mask >> 1;\n    temp1 = temp2;\n  } while (temp_9 != 0);\n  if ((input_1 | result2) != 0) {\n    if (temp_7 == 0xffffffff) {\n      exponent = exponent + 1;\n      temp_7 = 0;\n    }\n    else {\n      temp_7 = temp_7 + 1 & 0xfffffffe;\n    }\n  }\n  temp_7 = temp_7 >> 1;\n  if (exponent << 0x1f < 0) {\n    temp_7 = temp_7 | 0x80000000;\n  }\n  return concatenate_numbers((exponent >> 1) + 0x3fe00000 + (shift_count + -0x3ff >> 1) * 0x100000,temp_7);\n}\n\n",
            "renaming": {
                "FUN_08006c0c": "calculate_float_08006c0c",
                "param_1": "input_1",
                "param_2": "input_2",
                "uVar1": "result1",
                "uVar2": "result2",
                "iVar3": "shift_count",
                "iVar4": "counter",
                "uVar5": "temp1",
                "uVar6": "temp2",
                "iVar7": "exponent",
                "uVar8": "temp_7",
                "uVar9": "mask",
                "iVar10": "temp_9",
                "uVar11": "temp3",
                "uVar12": "final_result",
                "calculate_result_080004d0": "calculate_result",
                "calculate_product_0800016c": "calculate_product",
                "CONCAT44": "concatenate_numbers",
                "calculate_result_08000168": "calculate_result_2",
                "calculate_double_08000724": "calculate_double"
            },
            "calling": [
                "FUN_08005bc8",
                "FUN_08005c70",
                "FUN_08006228"
            ],
            "called": [
                "FUN_08000724",
                "FUN_0800016c",
                "FUN_08000168",
                "FUN_080004d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08006c0c": {
                    "1": "calculate_float_product",
                    "2": "calculate_result",
                    "4": "calculate_float_value",
                    "12": "calculate_float",
                    "6": "calculate_floating_point"
                },
                "param_1": {
                    "1": "input_value1",
                    "13": "input_1",
                    "2": "numerator",
                    "7": "input1"
                },
                "param_2": {
                    "7": "input2",
                    "1": "input_uint2",
                    "2": "denominator",
                    "13": "input_2"
                },
                "uVar1": {
                    "1": "result_var1",
                    "3": "temp1",
                    "2": "result",
                    "11": "result1",
                    "6": "result_1"
                },
                "uVar2": {
                    "1": "significand",
                    "3": "temp2",
                    "5": "result2",
                    "4": "temp_1",
                    "2": "result_2"
                },
                "iVar3": {
                    "1": "temp_var1",
                    "2": "shift",
                    "3": "exponent",
                    "4": "temp_2",
                    "7": "shift_count"
                },
                "iVar4": {
                    "1": "shift",
                    "4": "temp_3",
                    "5": "counter",
                    "2": "loop_count1"
                },
                "uVar5": {
                    "1": "temp4",
                    "2": "remainder",
                    "4": "temp_4",
                    "7": "temp1"
                },
                "uVar6": {
                    "1": "temp4",
                    "4": "temp_5",
                    "3": "temp",
                    "2": "temp3",
                    "9": "temp2"
                },
                "iVar7": {
                    "2": "integer_part",
                    "1": "loop_count2",
                    "5": "exponent",
                    "4": "temp_6",
                    "3": "sum1"
                },
                "uVar8": {
                    "2": "result",
                    "3": "sum2",
                    "1": "integer_part",
                    "4": "temp_7"
                },
                "uVar9": {
                    "1": "loop_sum3",
                    "10": "mask",
                    "2": "bit_mask",
                    "4": "temp_8"
                },
                "iVar10": {
                    "2": "counter",
                    "1": "loop_var_3",
                    "4": "temp_9"
                },
                "uVar11": {
                    "1": "temp_var6",
                    "4": "temp_10",
                    "6": "temp3"
                },
                "uVar12": {
                    "1": "product",
                    "15": "final_result",
                    "2": "result_2",
                    "5": "output",
                    "4": "result"
                },
                "calculate_result_080004d0": {
                    "1": "calculate_result_1",
                    "2": "calculate_result"
                },
                "calculate_product_0800016c": {
                    "3": "calculate_product"
                },
                "CONCAT44": {
                    "1": "concatenate_numbers"
                },
                "calculate_result_08000168": {
                    "1": "calculate_result_alt"
                },
                "calculate_double_08000724": {
                    "3": "calculate_double"
                },
                "uVar13": {
                    "1": "counter_2"
                },
                "iVar14": {
                    "1": "shift_4"
                },
                "uVar15": {
                    "1": "overflow_2"
                }
            }
        },
        "FUN_08006d68": {
            "entrypoint": "0x08006d68",
            "current_name": "calculate_result_08006d68",
            "code": "\nundefined8 calculate_result_08006d68(int input1,uint input2,undefined4 input_3,undefined4 input_4)\n\n{\n  int result;\n  undefined4 temp1;\n  undefined4 temp2;\n  undefined4 temp3;\n  undefined4 temp4;\n  undefined4 temp5;\n  undefined4 temp6;\n  uint abs_input_2;\n  undefined8 final_result;\n  undefined8 temp_result;\n  \n  final_result = concatenate_64bit(input2,input1);\n  abs_input_2 = input2 & 0x7fffffff;\n  if (abs_input_2 < 0x44100000) {\n    if (abs_input_2 < 0x3fdc0000) {\n      if (abs_input_2 < 0x3e200000) {\n        temp_result = calculate_product(input1,input2,0x8800759c,0x7e37e43c,input_4);\n        result = is_null_terminated((int)temp_result,(int)((ulonglong)temp_result >> 0x20),0,0x3ff00000);\n        if (result != 0) {\n          return final_result;\n        }\n      }\n      result = -1;\n    }\n    else {\n      final_result = FUNC_0800708c();\n      temp2 = (undefined4)((ulonglong)final_result >> 0x20);\n      temp1 = (undefined4)final_result;\n      if (abs_input_2 < 0x3ff30000) {\n        if (abs_input_2 < 0x3fe60000) {\n          final_result = calculate_product(temp1,temp2,temp1,temp2);\n          final_result = calculate_result_08006d68((int)final_result,(int)((ulonglong)final_result >> 0x20),0,0x3ff00000);\n          temp_result = calculate_product(temp1,temp2,0,0x40000000);\n          final_result = calculate_double((int)final_result,(int)((ulonglong)final_result >> 0x20),(int)temp_result,\n                               (int)((ulonglong)temp_result >> 0x20));\n          result = 0;\n        }\n        else {\n          final_result = calculate_result_08006d68(temp1,temp2,0,0x3ff00000);\n          temp_result = calculate_product(temp1,temp2,0,0x3ff00000);\n          final_result = calculate_double((int)final_result,(int)((ulonglong)final_result >> 0x20),(int)temp_result,\n                               (int)((ulonglong)temp_result >> 0x20));\n          result = 1;\n        }\n      }\n      else if (abs_input_2 < 0x40038000) {\n        final_result = calculate_result_08006d68(temp1,temp2,0,0x3ff80000);\n        temp_result = calculate_result_08006d68(temp1,temp2,0,0x3ff80000);\n        temp_result = calculate_product((int)temp_result,(int)((ulonglong)temp_result >> 0x20),0,0x3ff00000);\n        final_result = calculate_double((int)final_result,(int)((ulonglong)final_result >> 0x20),(int)temp_result,\n                             (int)((ulonglong)temp_result >> 0x20));\n        result = 2;\n      }\n      else {\n        final_result = calculate_double(0,0xbff00000,temp1,temp2);\n        result = 3;\n      }\n    }\n    temp6 = (undefined4)((ulonglong)final_result >> 0x20);\n    temp5 = (undefined4)final_result;\n    final_result = calculate_result_08006d68(temp5,temp6,temp5,temp6);\n    temp3 = (undefined4)((ulonglong)final_result >> 0x20);\n    temp1 = (undefined4)final_result;\n    final_result = calculate_result_08006d68(temp1,temp3,temp1,temp3);\n    temp4 = (undefined4)((ulonglong)final_result >> 0x20);\n    temp2 = (undefined4)final_result;\n    final_result = calculate_result_08006d68(temp2,temp4,0xe322da11,0x3f90ad3a);\n    final_result = calculate_product((int)final_result,(int)((ulonglong)final_result >> 0x20),0x24760deb,0x3fa97b4b);\n    final_result = calculate_result_08006d68((int)final_result,(int)((ulonglong)final_result >> 0x20),temp2,temp4);\n    final_result = calculate_product((int)final_result,(int)((ulonglong)final_result >> 0x20),0xa0d03d51,0x3fb10d66);\n    final_result = calculate_result_08006d68((int)final_result,(int)((ulonglong)final_result >> 0x20),temp2,temp4);\n    final_result = calculate_product((int)final_result,(int)((ulonglong)final_result >> 0x20),0xc54c206e,0x3fb745cd);\n    final_result = calculate_result_08006d68((int)final_result,(int)((ulonglong)final_result >> 0x20),temp2,temp4);\n    final_result = calculate_product((int)final_result,(int)((ulonglong)final_result >> 0x20),0x920083ff,0x3fc24924);\n    final_result = calculate_result_08006d68((int)final_result,(int)((ulonglong)final_result >> 0x20),temp2,temp4);\n    final_result = calculate_product((int)final_result,(int)((ulonglong)final_result >> 0x20),0x5555550d,0x3fd55555);\n    final_result = calculate_result_08006d68((int)final_result,(int)((ulonglong)final_result >> 0x20),temp1,temp3);\n    temp1 = (undefined4)((ulonglong)final_result >> 0x20);\n    temp_result = calculate_result_08006d68(temp2,temp4,0x2c6a6c2f,0xbfa2b444);\n    temp_result = calculate_result_08006d68((int)temp_result,(int)((ulonglong)temp_result >> 0x20),0x52defd9a,0x3fadde2d);\n    temp_result = calculate_result_08006d68((int)temp_result,(int)((ulonglong)temp_result >> 0x20),temp2,temp4);\n    temp_result = calculate_result_08006d68((int)temp_result,(int)((ulonglong)temp_result >> 0x20),0xaf749a6d,0x3fb3b0f2);\n    temp_result = calculate_result_08006d68((int)temp_result,(int)((ulonglong)temp_result >> 0x20),temp2,temp4);\n    temp_result = calculate_result_08006d68((int)temp_result,(int)((ulonglong)temp_result >> 0x20),0xfe231671,0x3fbc71c6);\n    temp_result = calculate_result_08006d68((int)temp_result,(int)((ulonglong)temp_result >> 0x20),temp2,temp4);\n    temp_result = calculate_result_08006d68((int)temp_result,(int)((ulonglong)temp_result >> 0x20),0x9998ebc4,0x3fc99999);\n    temp_result = calculate_result_08006d68((int)temp_result,(int)((ulonglong)temp_result >> 0x20),temp2,temp4);\n    temp2 = (undefined4)((ulonglong)temp_result >> 0x20);\n    if (result == -1) {\n      final_result = calculate_product((int)final_result,temp1,(int)temp_result,temp2);\n      final_result = calculate_result_08006d68((int)final_result,(int)((ulonglong)final_result >> 0x20),temp5,temp6);\n      final_result = calculate_result_08006d68(temp5,temp6,(int)final_result,(int)((ulonglong)final_result >> 0x20));\n    }\n    else {\n      final_result = calculate_product((int)final_result,temp1,(int)temp_result,temp2);\n      final_result = calculate_result_08006d68((int)final_result,(int)((ulonglong)final_result >> 0x20),temp5,temp6);\n      result = result * 8;\n      final_result = calculate_result_08006d68((int)final_result,(int)((ulonglong)final_result >> 0x20),\n                           *(undefined4 *)(&UNK_08007410 + result),\n                           *(undefined4 *)(&UNK_08007414 + result));\n      final_result = calculate_result_08006d68((int)final_result,(int)((ulonglong)final_result >> 0x20),temp5,temp6);\n      final_result = calculate_result_08006d68(*(undefined4 *)(&UNK_080073f0 + result),\n                           *(undefined4 *)(&UNK_080073f4 + result),(int)final_result,\n                           (int)((ulonglong)final_result >> 0x20));\n      if ((int)input2 < 0) {\n        final_result = concatenate_64bit((int)((ulonglong)final_result >> 0x20) + -0x80000000,(int)final_result);\n      }\n    }\n  }\n  else if ((abs_input_2 < 0x7ff00001) && ((abs_input_2 != 0x7ff00000 || (input1 == 0)))) {\n    if ((int)input2 < 1) {\n      final_result = 0xbff921fb54442d18;\n    }\n    else {\n      final_result = 0x3ff921fb54442d18;\n    }\n  }\n  else {\n    final_result = calculate_product(input1,input2,input1,input2,input_4);\n  }\n  return final_result;\n}\n\n",
            "renaming": {
                "FUN_08006d68": "calculate_result_08006d68",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input_3",
                "param_4": "input_4",
                "iVar1": "result",
                "uVar2": "temp1",
                "uVar3": "temp2",
                "uVar4": "temp3",
                "uVar5": "temp4",
                "uVar6": "temp5",
                "uVar7": "temp6",
                "uVar8": "abs_input_2",
                "uVar9": "final_result",
                "uVar10": "temp_result",
                "uVar1": "result_1",
                "CONCAT44": "concatenate_64bit",
                "calculate_product_0800016c": "calculate_product",
                "is_null_terminated_080009f0": "is_null_terminated",
                "calculate_result_08000168": "calculate_result",
                "calculate_double_08000724": "calculate_double",
                "calculate_result_080004d0": "calculate_result"
            },
            "calling": [
                "FUN_08006070"
            ],
            "called": [
                "FUN_08000724",
                "FUN_0800708c",
                "FUN_0800016c",
                "FUN_08000168",
                "FUN_080004d0",
                "FUN_080009f0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08006d68": {
                    "8": "calculate_value",
                    "1": "calculate_final_value",
                    "5": "calculate",
                    "16": "calculate_result"
                },
                "param_1": {
                    "1": "input_param_1",
                    "11": "input_1",
                    "13": "input1",
                    "3": "input_param"
                },
                "param_2": {
                    "1": "value2",
                    "13": "input2",
                    "11": "input_2"
                },
                "param_3": {
                    "6": "input_3",
                    "1": "input_param_3",
                    "2": "unused_param_1",
                    "3": "constant1",
                    "4": "param_3",
                    "5": "input3"
                },
                "param_4": {
                    "2": "param4",
                    "1": "unused2",
                    "6": "input_4",
                    "5": "input4",
                    "3": "constant2"
                },
                "iVar1": {
                    "1": "result_code",
                    "2": "condition",
                    "3": "result_type",
                    "20": "result"
                },
                "uVar2": {
                    "2": "value1",
                    "1": "result_2",
                    "3": "temp_1",
                    "6": "temp1",
                    "4": "result1"
                },
                "uVar3": {
                    "1": "result_high1",
                    "4": "result2",
                    "2": "value2",
                    "3": "var2",
                    "6": "temp2"
                },
                "uVar4": {
                    "3": "temp_3",
                    "1": "result4",
                    "4": "result3",
                    "2": "value3",
                    "6": "temp3"
                },
                "uVar5": {
                    "1": "result_hi_2",
                    "3": "temp_4",
                    "6": "temp4",
                    "2": "value4",
                    "4": "result4"
                },
                "uVar6": {
                    "6": "temp5",
                    "1": "part3_lo",
                    "3": "var5",
                    "2": "value5",
                    "4": "result5"
                },
                "uVar7": {
                    "3": "var6",
                    "1": "result_6",
                    "4": "result6",
                    "6": "temp6",
                    "2": "value6"
                },
                "uVar8": {
                    "1": "param2_unsigned",
                    "5": "abs_input_2",
                    "3": "abs_input2",
                    "2": "var7"
                },
                "uVar9": {
                    "3": "output",
                    "1": "result_lo",
                    "11": "final_result",
                    "4": "result",
                    "2": "output_1"
                },
                "uVar10": {
                    "9": "temp_result",
                    "1": "result_hi",
                    "3": "temp",
                    "2": "intermediate_result"
                },
                "uVar1": {
                    "1": "result"
                },
                "uVar11": {
                    "1": "temp_result2"
                },
                "iVar2": {
                    "1": "iteration"
                },
                "iVar3": {
                    "1": "shift"
                },
                "iVar4": {
                    "1": "index"
                },
                "CONCAT44": {
                    "1": "concatenate_64bit"
                },
                "calculate_product_0800016c": {
                    "2": "calculate_product"
                },
                "is_null_terminated_080009f0": {
                    "2": "is_null_terminated"
                },
                "FUNC_0800708c": {
                    "1": "get_some_value"
                },
                "calculate_result_08000168": {
                    "1": "calculate_result2"
                },
                "calculate_double_08000724": {
                    "2": "calculate_double"
                },
                "calculate_result_080004d0": {
                    "1": "calculate_result"
                },
                "uVar12": {
                    "1": "output_4"
                },
                "uVar13": {
                    "1": "output_5"
                },
                "uVar14": {
                    "1": "output_6"
                }
            }
        },
        "FUN_0800708c": {
            "entrypoint": "0x0800708c",
            "current_name": "FUNC_0800708c",
            "code": "\nvoid FUNC_0800708c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800708c": "FUNC_0800708c"
            },
            "calling": [
                "FUN_08006070",
                "FUN_08006d68",
                "FUN_08005c70",
                "FUN_08005854",
                "FUN_08006228"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08007092": {
            "entrypoint": "0x08007092",
            "current_name": "get_bitwise_result_08007092",
            "code": "\nuint get_bitwise_result_08007092(undefined4 input_value,uint input_value)\n\n{\n  return (input_value | 0x80000000) + 0x100000 >> 0x1f;\n}\n\n",
            "renaming": {
                "FUN_08007092": "get_bitwise_result_08007092",
                "param_1": "input_value",
                "param_2": "input_value"
            },
            "calling": [
                "FUN_08005900"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08007092": {
                    "1": "set_bit_and_shift",
                    "2": "get_bitwise_result"
                },
                "param_1": {
                    "4": "input",
                    "1": "param",
                    "8": "input_value",
                    "3": "input_flag",
                    "5": "value"
                },
                "param_2": {
                    "2": "flag_value",
                    "1": "value2",
                    "9": "input_value",
                    "4": "value"
                },
                "param_3": {
                    "1": "output",
                    "2": "result"
                },
                "result": {
                    "1": "shifted_value"
                },
                "param_4": {
                    "1": "unused"
                },
                "param_5": {
                    "1": "constant"
                },
                "param_n": {
                    "1": "new_parameter_name"
                }
            }
        },
        "FUN_0800709e": {
            "entrypoint": "0x0800709e",
            "current_name": "initialize_0800709e",
            "code": "\nvoid initialize_0800709e(void)\n\n{\n  result 0;\n}\n\n",
            "renaming": {
                "FUN_0800709e": "initialize_0800709e",
                "undefined4": "void",
                "return": "result"
            },
            "calling": [
                "FUN_08005bc8",
                "FUN_08005854",
                "FUN_08005900"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800709e": {
                    "1": "get_zero",
                    "12": "initialize",
                    "2": "calculate_result",
                    "5": "initialize_application"
                },
                "undefined4": {
                    "11": "void",
                    "1": "int"
                },
                "return": {
                    "1": "success"
                },
                "PTR_fun": {
                    "1": "function_ptr"
                },
                "RET": {
                    "1": "result"
                }
            }
        },
        "FUN_080070a4": {
            "entrypoint": "0x080070a4",
            "current_name": "get_infinity_080070a4",
            "code": "\ndouble get_infinity_080070a4(void)\n\n{\n  return 0x7ff8000000000000;\n}\n\n",
            "renaming": {
                "FUN_080070a4": "get_infinity_080070a4",
                "undefined8": "double"
            },
            "calling": [
                "FUN_08005854",
                "FUN_08006228"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080070a4": {
                    "1": "get_na_n",
                    "2": "get_floating_point_infinity",
                    "5": "get_infinity_value",
                    "17": "get_infinity"
                },
                "undefined8": {
                    "13": "double"
                },
                "0x7ff8000000000000": {
                    "1": "largest_positive_double",
                    "2": "positive_infinity",
                    "5": "infinity"
                },
                "<original_variable_name>": {
                    "1": "infinity_value"
                },
                "r1": {
                    "1": "infinity"
                },
                "return value": {
                    "1": "infinity"
                },
                "original_name_1": {
                    "1": "new_name_1"
                },
                "original_name_2": {
                    "1": "new_name_2"
                }
            }
        },
        "FUN_080070b0": {
            "entrypoint": "0x080070b0",
            "current_name": "calculate_result_080070b0",
            "code": "\nundefined8 calculate_result_080070b0(uint input1,uint input2,undefined4 input3)\n\n{\n  int index;\n  undefined4 var1;\n  uint var2;\n  undefined4 var3;\n  uint var4;\n  uint difference;\n  uint var6;\n  undefined8 result;\n  \n  var6 = (input2 << 1) >> 0x15;\n  difference = var6 - 0x3ff;\n  var2 = input2;\n  if ((int)difference < 0x14) {\n    if ((int)difference < 0) {\n      if ((input2 & 0x7fffffff | input1) == 0) {\n        return CONCAT44(input2,input1);\n      }\n      var2 = input2 & 0xfffff | input1;\n      index = ((int)input2 >> 0x1f) * -8;\n      var1 = *(undefined4 *)(&DAT_08007430 + index);\n      var3 = *(undefined4 *)(&DAT_08007434 + index);\n      result = calculate_product(input1,(-var2 | var2) >> 0xc & 0x80000 | input2 & 0xfffe0000,var1,\n                           var3,input1,input2,input3);\n      result = calculate_result_080070b0((int)result,(int)((ulonglong)result >> 0x20),var1,var3);\n      return CONCAT44((uint)((ulonglong)result >> 0x20) & 0x7fffffff | input2 & 0x80000000,\n                      (int)result);\n    }\n    var6 = 0xfffff >> (difference & 0xff);\n    if ((input2 & var6 | input1) == 0) {\n      return CONCAT44(input2,input1);\n    }\n    var6 = var6 >> 1;\n    var4 = input2 & var6 | input1;\n    if (var4 != 0) {\n      if (difference == 0x13) {\n        var4 = 0x80000000;\n      }\n      else {\n        var4 = 0;\n      }\n      var2 = 0x40000 >> (difference & 0xff) | input2 & ~var6;\n    }\n  }\n  else {\n    if (0x33 < (int)difference) {\n      if (difference != 0x400) {\n        return CONCAT44(input2,input1);\n      }\n      result = calculate_product();\n      return result;\n    }\n    var6 = var6 - 0x413;\n    difference = 0xffffffff >> (var6 & 0xff);\n    if ((input1 & difference) == 0) {\n      return CONCAT44(input2,input1);\n    }\n    difference = difference >> 1;\n    var4 = input1;\n    if ((input1 & difference) != 0) {\n      var4 = 0x40000000 >> (var6 & 0xff) | input1 & ~difference;\n    }\n  }\n  index = ((int)input2 >> 0x1f) * -8;\n  var1 = *(undefined4 *)(&DAT_08007430 + index);\n  var3 = *(undefined4 *)(&DAT_08007434 + index);\n  result = calculate_product(var4,var2,var1,var3,input1,input2,input3);\n  result = calculate_result_080070b0((int)result,(int)((ulonglong)result >> 0x20),var1,var3);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080070b0": "calculate_result_080070b0",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "uVar2": "var1",
                "uVar3": "var2",
                "uVar4": "var3",
                "uVar5": "var4",
                "uVar6": "difference",
                "uVar7": "var6",
                "uVar8": "result",
                "iVar1": "index",
                "calculate_product_0800016c": "calculate_product",
                "calculate_result_08000168": "calculate_result"
            },
            "calling": [
                "FUN_08005900"
            ],
            "called": [
                "FUN_0800016c",
                "FUN_08000168"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080070b0": {
                    "1": "calculate_important_result",
                    "2": "calculate_and_update_result",
                    "17": "calculate_result"
                },
                "param_1": {
                    "8": "input_1",
                    "2": "input_param",
                    "1": "input_parameter_1",
                    "6": "input_param_1",
                    "10": "input1"
                },
                "param_2": {
                    "10": "input2",
                    "1": "shift_value",
                    "2": "input_value_2",
                    "6": "input_param_2",
                    "8": "input_2"
                },
                "param_3": {
                    "7": "input_3",
                    "2": "input_value_3",
                    "1": "other_param",
                    "6": "input_param_3",
                    "10": "input3"
                },
                "uVar2": {
                    "1": "var_1",
                    "2": "value1",
                    "7": "var1"
                },
                "uVar3": {
                    "1": "var_3",
                    "2": "updated_param_2",
                    "5": "var2",
                    "3": "modified_input_2"
                },
                "uVar4": {
                    "5": "var3",
                    "1": "temp4",
                    "2": "data_2"
                },
                "uVar5": {
                    "1": "var_5",
                    "2": "processed_input",
                    "4": "var4"
                },
                "uVar6": {
                    "1": "temp_value_5",
                    "6": "difference",
                    "4": "var5"
                },
                "uVar7": {
                    "4": "var6",
                    "3": "shifted_bits",
                    "1": "temp3",
                    "2": "shifted_input2"
                },
                "uVar8": {
                    "25": "result",
                    "5": "final_result",
                    "1": "result_var"
                },
                "iVar1": {
                    "2": "shift_count",
                    "11": "index",
                    "1": "temp_var1",
                    "3": "offset"
                },
                "uVar1": {
                    "1": "var_1"
                },
                "calculate_product_0800016c": {
                    "1": "calculate_product"
                },
                "calculate_result_08000168": {
                    "1": "calculate_result"
                }
            }
        },
        "FUN_080071c0": {
            "entrypoint": "0x080071c0",
            "current_name": "calculate_result_080071c0",
            "code": "\nundefined8 calculate_result_080071c0(uint input_1,uint input_2,int offset,undefined4 constant)\n\n{\n  uint shifted_value;\n  undefined4 result_low;\n  int sum;\n  undefined4 result_high;\n  uint result_high;\n  undefined8 result;\n  \n  result = CONCAT44(input_2,input_1);\n  shifted_value = (input_2 << 1) >> 0x15;\n  if (shifted_value == 0) {\n    if ((input_2 & 0x7fffffff | input_1) == 0) {\n      return result;\n    }\n    result = calculate_result_080071c0(input_1,input_2,0,0x43500000);\n    if (-0xc351 < offset) {\n      shifted_value = ((uint)((int)((ulonglong)result >> 0x20) << 1) >> 0x15) - 0x36;\n      goto label_1;\n    }\nlabel_2:\n    result_low = 0xc2f8f359;\n    result_high = 0x1a56e1f;\n  }\n  else {\n    if (shifted_value == 0x7ff) {\n      result = calculate_product(input_1,input_2,input_1,input_2,constant);\n      return result;\n    }\nlabel_1:\n    result_high = (uint)((ulonglong)result >> 0x20);\n    result_low = (undefined4)result;\n    sum = shifted_value + offset;\n    if (sum < 0x7ff) {\n      if (0 < sum) {\n        return CONCAT44(result_high & 0x800fffff | sum * 0x100000,result_low);\n      }\n      if (sum + 0x35 < 0 == check_overflow(sum,0x35)) {\n        result = CONCAT44(result_high & 0x800fffff | (sum + 0x36) * 0x100000,result_low);\n        result_low = 0;\n        result_high = 0x3c900000;\n        goto label_3;\n      }\n      if (offset < 0xc351) {\n        result = FUNC_0800729c(0xc2f8f359,0x1a56e1f,result_low,result_high);\n        goto label_2;\n      }\n    }\n    result = FUNC_0800729c(0x8800759c,0x7e37e43c,result_low,result_high);\n    result_low = 0x8800759c;\n    result_high = 0x7e37e43c;\n  }\nlabel_3:\n  result = calculate_result_080071c0((int)result,(int)((ulonglong)result >> 0x20),result_low,result_high);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080071c0": "calculate_result_080071c0",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "offset",
                "param_4": "constant",
                "uVar1": "shifted_value",
                "uVar2": "result_low",
                "uVar4": "result_high",
                "uVar5": "result_high",
                "uVar6": "result",
                "iVar3": "sum",
                "calculate_result_080004d0": "calculate_result",
                "calculate_product_0800016c": "calculate_product",
                "SCARRY4": "check_overflow",
                "LAB_08007210": "label_1",
                "LAB_080071ec": "label_2",
                "LAB_0800722e": "label_3"
            },
            "calling": [
                "FUN_08006228"
            ],
            "called": [
                "FUN_0800016c",
                "FUN_0800729c",
                "FUN_080004d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080071c0": {
                    "2": "calculate_result_with_parameters",
                    "1": "calculate_decimal",
                    "16": "calculate_result"
                },
                "param_1": {
                    "11": "input_1",
                    "4": "input_param1",
                    "1": "number1",
                    "3": "input_param_1",
                    "9": "input1",
                    "2": "input_value1"
                },
                "param_2": {
                    "9": "input2",
                    "1": "number2",
                    "4": "input_param2",
                    "2": "input_value2",
                    "3": "input_param_2",
                    "11": "input_2"
                },
                "param_3": {
                    "4": "input_param3",
                    "1": "shift",
                    "2": "count",
                    "6": "modifier",
                    "3": "shift_amount",
                    "8": "offset"
                },
                "param_4": {
                    "2": "extra_param",
                    "1": "input4",
                    "4": "input_param4",
                    "15": "constant",
                    "3": "input_param_4"
                },
                "uVar1": {
                    "9": "shifted_value",
                    "1": "shifted_1",
                    "3": "shifted_input2",
                    "4": "shifted_input_2",
                    "5": "shifted_input"
                },
                "uVar2": {
                    "1": "output_1",
                    "9": "result_low",
                    "5": "result1",
                    "4": "result_1"
                },
                "uVar4": {
                    "2": "constant_2",
                    "1": "value_2",
                    "3": "result_2",
                    "6": "result_high"
                },
                "uVar5": {
                    "1": "temp4",
                    "3": "result_high",
                    "2": "upper_bits"
                },
                "uVar6": {
                    "1": "extended_result",
                    "3": "combined_input",
                    "5": "final_result",
                    "17": "result",
                    "2": "combined_input_params"
                },
                "iVar3": {
                    "1": "result_2",
                    "2": "total",
                    "11": "sum",
                    "3": "modified_value"
                },
                "calculate_result_080004d0": {
                    "1": "calculate_result1",
                    "5": "calculate_result"
                },
                "calculate_product_0800016c": {
                    "1": "calculate_product_b",
                    "6": "calculate_product"
                },
                "FUNC_0800729c": {
                    "1": "perform_operation"
                },
                "SCARRY4": {
                    "1": "signed_carry_4",
                    "2": "check_overflow"
                },
                "0xc351": {
                    "1": "constant_1"
                },
                "0x36": {
                    "1": "constant_2"
                },
                "0x35": {
                    "1": "constant_3"
                },
                "0xc2f8f359": {
                    "1": "constant_4"
                },
                "0x1a56e1f": {
                    "1": "constant_5"
                },
                "0x3c900000": {
                    "1": "constant_6"
                },
                "0x8800759c": {
                    "1": "constant_7"
                },
                "0x7e37e43c": {
                    "1": "constant_8"
                },
                "LAB_08007210": {
                    "1": "label_1"
                },
                "LAB_080071ec": {
                    "1": "label_2"
                },
                "LAB_0800722e": {
                    "1": "label_3"
                }
            }
        },
        "FUN_0800729c": {
            "entrypoint": "0x0800729c",
            "current_name": "FUNC_0800729c",
            "code": "\nvoid FUNC_0800729c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800729c": "FUNC_0800729c"
            },
            "calling": [
                "FUN_080071c0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080072ac": {
            "entrypoint": "0x080072ac",
            "current_name": "get_data_value_080072ac",
            "code": "\nundefined4 get_data_value_080072ac(void)\n\n{\n  return DAT_200001c0;\n}\n\n",
            "renaming": {
                "FUN_080072ac": "get_data_value_080072ac"
            },
            "calling": [
                "FUN_08005bc8",
                "FUN_08005854",
                "FUN_08005900"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080072ac": {
                    "3": "get_global_variable",
                    "1": "get_dat_value",
                    "16": "get_data_value",
                    "5": "get_data"
                },
                "DAT_200001c0": {
                    "5": "data",
                    "3": "global_variable",
                    "1": "global_variable_value",
                    "4": "data_value"
                }
            }
        },
        "FUN_080072b8": {
            "entrypoint": "0x080072b8",
            "current_name": "update_data_080072b8",
            "code": "\nvoid update_data_080072b8(int offset)\n\n{\n  if (DAT_200002b4 == (undefined *)0x0) {\n    DAT_200002b4 = &DAT_200016a0;\n  }\n  DAT_200002b4 = DAT_200002b4 + offset;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080072b8": "update_data_080072b8",
                "param_1": "offset"
            },
            "calling": [
                "FUN_0800581c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080072b8": {
                    "1": "increment_pointer_by_value",
                    "2": "update_data_offset",
                    "4": "increment_pointer",
                    "3": "add_offset_to_pointer",
                    "5": "update_data"
                },
                "param_1": {
                    "1": "offset_increment",
                    "3": "amount_to_add",
                    "5": "value",
                    "10": "offset",
                    "8": "amount"
                },
                "DAT_200002b4": {
                    "1": "current_value",
                    "2": "pointer",
                    "11": "data_pointer",
                    "4": "current_pointer"
                },
                "&DAT_200016a0": {
                    "1": "default_pointer"
                },
                "DAT_200016a0": {
                    "2": "default_pointer",
                    "1": "default_data_address",
                    "4": "default_data"
                }
            }
        },
        "FUN_080072d4": {
            "entrypoint": "0x080072d4",
            "current_name": "FUNC_080072d4",
            "code": "\nvoid FUNC_080072d4(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080072d4": "FUNC_080072d4"
            },
            "calling": [
                "FUN_08004fb4",
                "FUN_08000110",
                "FUN_08000134"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080072e0": {
            "entrypoint": "0x080072e0",
            "current_name": "FUNC_080072e0",
            "code": "\nvoid FUNC_080072e0(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080072e0": "FUNC_080072e0"
            },
            "calling": [],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        }
    },
    "used_tokens": 743378,
    "layers": [
        [
            "FUN_08000110",
            "FUN_08000134",
            "FUN_08000150",
            "FUN_08000168",
            "FUN_0800016c",
            "FUN_08000404",
            "FUN_08000428",
            "FUN_080006ac",
            "FUN_08000892",
            "FUN_08000904",
            "FUN_08000a04",
            "FUN_08000a30",
            "FUN_08000ad8",
            "FUN_08000adc",
            "FUN_08000c3c",
            "FUN_08000c44",
            "FUN_08000cec",
            "FUN_08000e54",
            "FUN_08000f9c",
            "FUN_08001078",
            "FUN_080010c4",
            "FUN_0800114c",
            "FUN_0800115c",
            "FUN_08001170",
            "FUN_08001194",
            "FUN_080011fc",
            "FUN_08001214",
            "FUN_08001240",
            "FUN_08001264",
            "FUN_08001424",
            "FUN_0800142e",
            "FUN_08001436",
            "FUN_08002008",
            "FUN_08002214",
            "FUN_08002220",
            "FUN_08002250",
            "FUN_08002280",
            "FUN_080022d0",
            "FUN_08002324",
            "FUN_08002368",
            "FUN_08002404",
            "FUN_08002520",
            "FUN_08002564",
            "FUN_080025a4",
            "FUN_08002ed4",
            "FUN_08003068",
            "FUN_08003314",
            "FUN_08003320",
            "FUN_08003eb0",
            "FUN_08003ec8",
            "FUN_08003fc4",
            "FUN_08003fd0",
            "FUN_08003fdc",
            "FUN_08003fe8",
            "FUN_08004c64",
            "FUN_08004d8c",
            "FUN_08004f10",
            "thunk_FUN_0800115c",
            "FUN_08004fb4",
            "FUN_080052e4",
            "FUN_08005614",
            "FUN_08005630",
            "FUN_08005646",
            "FUN_0800567c",
            "FUN_08005840",
            "FUN_08007092",
            "FUN_0800709e",
            "FUN_080070a4",
            "FUN_080072ac",
            "FUN_080072b8"
        ],
        [
            "FUN_080004d0",
            "FUN_08000724",
            "FUN_08000990",
            "FUN_08001004",
            "FUN_08001104",
            "FUN_08001460",
            "FUN_080014e2",
            "FUN_080016f4",
            "FUN_08001b58",
            "FUN_080023d0",
            "FUN_0800245c",
            "FUN_08002538",
            "FUN_080025e8",
            "FUN_08002ec0",
            "FUN_08003f3c",
            "FUN_080041c4",
            "FUN_0800426c",
            "FUN_08004a30",
            "FUN_08004c18",
            "FUN_08004c30",
            "FUN_08004c70",
            "FUN_08004ccc",
            "FUN_08004d48",
            "FUN_08004e14",
            "FUN_08004e7c",
            "FUN_080053d4",
            "FUN_0800581c",
            "FUN_080070b0"
        ],
        [
            "FUN_08000980",
            "FUN_080009a0",
            "FUN_080009b4",
            "FUN_080009c8",
            "FUN_08000ffc",
            "FUN_08001014",
            "FUN_08001028",
            "FUN_08001128",
            "FUN_08001530",
            "FUN_080015e8",
            "FUN_08001754",
            "FUN_0800209c",
            "FUN_08002724",
            "FUN_0800290c",
            "FUN_08003ff4",
            "FUN_08004c8c",
            "FUN_08005714",
            "FUN_08006c0c",
            "FUN_080071c0"
        ],
        [
            "FUN_080009f0",
            "FUN_08001050",
            "FUN_08001064",
            "FUN_08001828",
            "FUN_08001938",
            "FUN_0800299a",
            "FUN_08004300",
            "FUN_080057d0",
            "FUN_08005bc8"
        ],
        [
            "FUN_08002ee8",
            "FUN_08004348",
            "FUN_08004384",
            "FUN_080043bc",
            "FUN_080043f0",
            "FUN_08004410",
            "FUN_08004434",
            "FUN_08004458",
            "FUN_0800483c",
            "FUN_08005044",
            "FUN_08005c70",
            "FUN_08006228",
            "FUN_08006d68"
        ],
        [
            "FUN_08004a84",
            "FUN_080050fc",
            "FUN_08005854",
            "thunk_FUN_08006070",
            "FUN_08005900",
            "FUN_08006070"
        ],
        [
            "FUN_08003330",
            "FUN_08004ffc"
        ],
        [
            "FUN_08004cac"
        ],
        [
            "FUN_08004490"
        ],
        [
            "FUN_0800403c",
            "FUN_0800407c",
            "FUN_080040b8",
            "FUN_08004514"
        ],
        [
            "FUN_08002ad0",
            "FUN_08003034",
            "FUN_080040e8",
            "FUN_0800458c"
        ],
        [
            "FUN_08002b48",
            "FUN_08002bf0",
            "FUN_08002cb0",
            "FUN_08002d88",
            "FUN_08003298",
            "FUN_08004028"
        ],
        [
            "FUN_08002ea0",
            "FUN_08002f28"
        ],
        [
            "FUN_0800411c",
            "FUN_08004194"
        ],
        [
            "FUN_080041ae"
        ]
    ],
    "locked_functions": []
}