{
    "functions": {
        "FUN_08000110": {
            "entrypoint": "0x08000110",
            "current_name": "initialize_flag_08000110",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0800011c) */\n\nundefined4 initializeFlag_08000110(undefined4 inputValue)\n\n{\n  if ((char)DAT_20000228 == '\\0') {\n    DAT_20000228._0_1_ = '\\x01';\n  }\n  return inputValue;\n}\n\n",
            "renaming": {
                "FUN_08000110": "initialize_flag_08000110",
                "param_1": "inputValue"
            },
            "calling": [],
            "called": [
                "FUN_080072d4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000134": {
            "entrypoint": "0x08000134",
            "current_name": "concatenate_integers_08000134",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0800013a) */\n\nundefined8 concatenate_integers_08000134(undefined4 first_integer,undefined4 second_integer)\n\n{\n  return CONCAT44(second_integer,first_integer);\n}\n\n",
            "renaming": {
                "FUN_08000134": "concatenate_integers_08000134",
                "param_1": "first_integer",
                "param_2": "second_integer"
            },
            "calling": [
                "FUN_08004fb4"
            ],
            "called": [
                "FUN_080072d4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000150": {
            "entrypoint": "0x08000150",
            "current_name": "find_end_of_string_08000150",
            "code": "\nchar * find_end_of_string_08000150(char *string)\n\n{\n  char current_char;\n  char *next_character;\n  char *current_character;\n  \n  current_character = string;\n  do {\n    next_character = current_character + 1;\n    current_char = *current_character;\n    current_character = next_character;\n  } while (current_char != '\\0');\n  return next_character + (-1 - (int)string);\n}\n\n",
            "renaming": {
                "FUN_08000150": "find_end_of_string_08000150",
                "param_1": "string",
                "pcVar3": "current_character",
                "pcVar2": "next_character",
                "cVar1": "current_char"
            },
            "calling": [
                "FUN_08004c8c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000168": {
            "entrypoint": "0x08000168",
            "current_name": "optimized_function_08000168",
            "code": "\nulonglong optimizedFunction_08000168(uint input1,uint input2,uint input3,uint input4)\n\n{\n  int shiftedInput1;\n  byte carryFlag;\n  uint shiftedInput3;\n  uint num1;\n  uint shiftedInput2;\n  uint result1;\n  uint result2;\n  int shiftAmount;\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  uint temp4;\n  bool condition1;\n  bool condition2;\n  bool condition3;\n  \n  result1 = input4 ^ 0x80000000;\n  temp1 = input2 << 1;\n  input4 = input4 << 1;\n  condition1 = ((input2 ^ result1) & 0x7fffffff) == 0;\n  condition2 = condition1 && input1 == input3;\n  if (!condition1 || input1 != input3) {\n    condition2 = (temp1 | input1) == 0;\n  }\n  if (!condition2) {\n    condition2 = (input4 | input3) == 0;\n  }\n  shiftAmount = (int)temp1 >> 0x15;\n  if (!condition2) {\n    condition2 = shiftAmount == -1;\n  }\n  shiftedInput1 = (int)input4 >> 0x15;\n  if (!condition2) {\n    condition2 = shiftedInput1 == -1;\n  }\n  if (condition2) {\n    if (shiftAmount == -1 || shiftedInput1 == -1) {\n      temp1 = result1;\n      temp3 = input3;\n      if (shiftAmount == -1) {\n        temp1 = input2;\n        temp3 = input1;\n      }\n      if (shiftAmount != -1 || shiftedInput1 != -1) {\n        input3 = temp3;\n        result1 = temp1;\n      }\n      condition2 = (temp3 | temp1 << 0xc) == 0;\n      if (condition2) {\n        condition2 = (input3 | result1 << 0xc) == 0;\n      }\n      if (condition2) {\n        condition2 = temp1 == result1;\n      }\n      if (!condition2) {\n        temp1 = temp1 | 0x80000;\n      }\n      return CONCAT44(temp1,temp3);\n    }\n    if (((input2 ^ result1) & 0x7fffffff) != 0 || input1 != input3) {\n      if ((temp1 | input1) == 0) {\n        input1 = input3;\n        input2 = result1;\n      }\n      return CONCAT44(input2,input1);\n    }\n    if (input2 != result1) {\n      return 0;\n    }\n    if (temp1 >> 0x15 == 0) {\n      condition2 = (input1 & 0x80000000) != 0;\n      result1 = input2 * 2 + (uint)condition2;\n      if (CARRY4(input2,input2) || CARRY4(input2 * 2,(uint)condition2)) {\n        result1 = result1 | 0x80000000;\n      }\n      return CONCAT44(result1,input1 << 1);\n    }\n    if (temp1 < 0xffc00000) {\n      return CONCAT44(input2 + 0x100000,input1);\n    }\n    input2 = input2 & 0x80000000;\nLAB_080003ac:\n    return (ulonglong)(input2 | 0x7ff00000) << 0x20;\n  }\n  temp1 = temp1 >> 0x15;\n  input4 = input4 >> 0x15;\n  temp3 = input4 - temp1;\n  condition2 = temp3 != 0;\n  if (input4 < temp1) {\n    temp3 = -temp3;\n  }\n  temp2 = input1;\n  result2 = input2;\n  if (condition2 && temp1 <= input4) {\n    temp1 = temp1 + temp3;\n    temp2 = input3;\n    result2 = result1;\n    input3 = input1;\n    result1 = input2;\n  }\n  if (0x36 < temp3) {\n    return CONCAT44(result2,temp2);\n  }\n  num1 = result2 & 0xfffff | 0x100000;\n  if ((result2 & 0x80000000) != 0) {\n    condition2 = temp2 != 0;\n    temp2 = -temp2;\n    num1 = -num1 - (uint)condition2;\n  }\n  result2 = result1 & 0xfffff | 0x100000;\n  if ((result1 & 0x80000000) != 0) {\n    condition2 = input3 != 0;\n    input3 = -input3;\n    result2 = -result2 - (uint)condition2;\n  }\n  if (temp1 == temp3) {\n    result2 = result2 ^ 0x100000;\n    if (temp1 == 0) {\n      num1 = num1 ^ 0x100000;\n      temp1 = 1;\n    }\n    else {\n      temp3 = temp3 - 1;\n    }\n  }\n  result1 = -temp3 + 0x20;\n  if ((int)temp3 < 0x21) {\n    temp4 = input3 << (result1 & 0xff);\n    input3 = input3 >> (temp3 & 0xff);\n    shiftedInput3 = temp2 + input3;\n    shiftedInput2 = result2 << (result1 & 0xff);\n    result1 = shiftedInput3 + shiftedInput2;\n    num1 = num1 + CARRY4(temp2,input3) + ((int)result2 >> (temp3 & 0xff)) +\n            (uint)CARRY4(shiftedInput3,shiftedInput2);\n  }\n  else {\n    temp4 = result2 << (-temp3 + 0x40 & 0xff);\n    if (input3 != 0) {\n      temp4 = temp4 | 2;\n    }\n    result2 = (int)result2 >> (temp3 - 0x20 & 0xff);\n    result1 = temp2 + result2;\n    num1 = num1 + ((int)result2 >> 0x1f) + (uint)CARRY4(temp2,result2);\n  }\n  input2 = num1 & 0x80000000;\n  temp3 = num1;\n  if ((int)num1 < 0) {\n    condition2 = temp4 == 0;\n    temp4 = -temp4;\n    temp3 = -result1;\n    result1 = -(uint)!condition2 - result1;\n    temp3 = -(uint)(condition2 <= temp3) - num1;\n  }\n  if (0xfffff < temp3) {\n    temp2 = temp1 - 1;\n    if (0x1fffff < temp3) {\n      temp2 = temp3 & 1;\n      temp3 = temp3 >> 1;\n      carryFlag = (byte)result1;\n      result1 = (uint)(temp2 != 0) << 0x1f | result1 >> 1;\n      temp4 = (uint)(carryFlag & 1) << 0x1f | temp4 >> 1;\n      temp2 = temp1;\n      if (0xffbfffff < temp1 * 0x200000) goto LAB_080003ac;\n    }\nLAB_08000278:\n    condition2 = 0x7fffffff < temp4;\n    if (temp4 == 0x80000000) {\n      condition2 = (result1 & 1) != 0;\n    }\n    return CONCAT44(temp3 + temp2 * 0x100000 + (uint)CARRY4(result1,(uint)condition2) | input2,\n                    result1 + condition2);\n  }\n  condition1 = (temp4 & 0x80000000) != 0;\n  temp4 = temp4 << 1;\n  temp2 = result1 * 2;\n  condition2 = CARRY4(result1,result1);\n  result1 = result1 * 2 + (uint)condition1;\n  temp3 = temp3 * 2 + (uint)(condition2 || CARRY4(temp2,(uint)condition1));\n  temp2 = temp1 - 2;\n  if ((temp3 & 0x100000) != 0) goto LAB_08000278;\n  result2 = result1;\n  temp1 = temp3;\n  if (temp3 == 0) {\n    result2 = 0;\n    temp1 = result1;\n  }\n  shiftAmount = LZCOUNT(temp1);\n  if (temp3 == 0) {\n    shiftAmount = shiftAmount + 0x20;\n  }\n  temp3 = shiftAmount - 0xb;\n  condition3 = SBORROW4(temp3,0x20);\n  result1 = shiftAmount - 0x2b;\n  condition2 = (int)result1 < 0;\n  condition1 = result1 == 0;\n  if ((int)temp3 < 0x20) {\n    condition3 = SCARRY4(result1,0xc);\n    shiftAmount = shiftAmount + -0x1f;\n    condition2 = shiftAmount < 0;\n    condition1 = shiftAmount == 0;\n    result1 = temp3;\n    if (!condition1 && condition2 == condition3) {\n      result2 = temp1 << (temp3 & 0xff);\n      temp1 = temp1 >> (0xcU - shiftAmount & 0xff);\n      goto LAB_080002f0;\n    }\n  }\n  if (condition1 || condition2 != condition3) {\n    temp4 = 0x20 - result1;\n  }\n  temp1 = temp1 << (result1 & 0xff);\n  if (condition1 || condition2 != condition3) {\n    temp1 = temp1 | result2 >> (temp4 & 0xff);\n  }\n  if (condition1 || condition2 != condition3) {\n    result2 = result2 << (result1 & 0xff);\n  }\nLAB_080002f0:\n  if ((int)temp3 <= (int)temp2) {\n    return CONCAT44(temp1 + (temp2 - temp3) * 0x100000 | input2,result2);\n  }\n  result1 = ~(temp2 - temp3);\n  if ((int)result1 < 0x1f) {\n    shiftAmount = result1 - 0x13;\n    if (shiftAmount != 0 && shiftAmount < 0 == SCARRY4(result1 - 0x1f,0xc)) {\n      return CONCAT44(num1,result2 >> (0x20 - (0xcU - shiftAmount) & 0xff) | temp1 << (0xcU - shiftAmount & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    result1 = result1 + 1;\n    return CONCAT44(input2 | temp1 >> (result1 & 0xff),\n                    result2 >> (result1 & 0xff) | temp1 << (0x20 - result1 & 0xff));\n  }\n  return CONCAT44(num1,temp1 >> (result1 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_08000168": "optimized_function_08000168",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "iVar1": "shiftedInput1",
                "bVar2": "carryFlag",
                "uVar3": "shiftedInput3",
                "uVar4": "num1",
                "uVar5": "shiftedInput2",
                "uVar6": "result1",
                "uVar7": "result2",
                "iVar8": "shiftAmount",
                "uVar9": "temp1",
                "uVar10": "temp2",
                "uVar11": "temp3",
                "uVar12": "temp4",
                "bVar13": "condition1",
                "bVar14": "condition2",
                "bVar15": "condition3"
            },
            "calling": [
                "FUN_08006070",
                "FUN_08006d68",
                "FUN_0800411c",
                "FUN_08005c70",
                "FUN_08006228",
                "FUN_080070b0",
                "FUN_08006c0c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800016c": {
            "entrypoint": "0x0800016c",
            "current_name": "calculate_concated_result_0800016c",
            "code": "\nulonglong calculate_concated_result_0800016c(uint input_1,uint input_2,uint input_3,uint input_4)\n\n{\n  int temp_1;\n  byte temp_2;\n  uint temp_3;\n  uint temp_4;\n  uint temp_5;\n  int temp_6;\n  uint temp_7;\n  uint temp_8;\n  uint temp_9;\n  uint temp_10;\n  uint temp_11;\n  uint temp_12;\n  bool temp_13;\n  bool temp_14;\n  bool temp_15;\n  \n  temp_7 = input_2 << 1;\n  temp_9 = input_4 << 1;\n  temp_13 = ((input_2 ^ input_4) & 0x7fffffff) == 0;\n  temp_14 = temp_13 && input_1 == input_3;\n  if (!temp_13 || input_1 != input_3) {\n    temp_14 = (temp_7 | input_1) == 0;\n  }\n  if (!temp_14) {\n    temp_14 = (temp_9 | input_3) == 0;\n  }\n  temp_6 = (int)temp_7 >> 0x15;\n  if (!temp_14) {\n    temp_14 = temp_6 == -1;\n  }\n  temp_1 = (int)temp_9 >> 0x15;\n  if (!temp_14) {\n    temp_14 = temp_1 == -1;\n  }\n  if (temp_14) {\n    if (temp_6 == -1 || temp_1 == -1) {\n      temp_9 = input_4;\n      temp_7 = input_3;\n      if (temp_6 == -1) {\n        temp_9 = input_2;\n        temp_7 = input_1;\n      }\n      if (temp_6 != -1 || temp_1 != -1) {\n        input_3 = temp_7;\n        input_4 = temp_9;\n      }\n      temp_14 = (temp_7 | temp_9 << 0xc) == 0;\n      if (temp_14) {\n        temp_14 = (input_3 | input_4 << 0xc) == 0;\n      }\n      if (temp_14) {\n        temp_14 = temp_9 == input_4;\n      }\n      if (!temp_14) {\n        temp_9 = temp_9 | 0x80000;\n      }\n      return CONCAT44(temp_9,temp_7);\n    }\n    if (((input_2 ^ input_4) & 0x7fffffff) != 0 || input_1 != input_3) {\n      if ((temp_7 | input_1) == 0) {\n        input_1 = input_3;\n        input_2 = input_4;\n      }\n      return CONCAT44(input_2,input_1);\n    }\n    if (input_2 != input_4) {\n      return 0;\n    }\n    if (temp_7 >> 0x15 == 0) {\n      temp_14 = (input_1 & 0x80000000) != 0;\n      temp_9 = input_2 * 2 + (uint)temp_14;\n      if (CARRY4(input_2,input_2) || CARRY4(input_2 * 2,(uint)temp_14)) {\n        temp_9 = temp_9 | 0x80000000;\n      }\n      return CONCAT44(temp_9,input_1 << 1);\n    }\n    if (temp_7 < 0xffc00000) {\n      return CONCAT44(input_2 + 0x100000,input_1);\n    }\n    input_2 = input_2 & 0x80000000;\nLAB_080003ac:\n    return (ulonglong)(input_2 | 0x7ff00000) << 0x20;\n  }\n  temp_7 = temp_7 >> 0x15;\n  temp_9 = temp_9 >> 0x15;\n  temp_10 = temp_9 - temp_7;\n  temp_14 = temp_10 != 0;\n  if (temp_9 < temp_7) {\n    temp_10 = -temp_10;\n  }\n  temp_8 = input_1;\n  temp_5 = input_2;\n  if (temp_14 && temp_7 <= temp_9) {\n    temp_7 = temp_7 + temp_10;\n    temp_8 = input_3;\n    temp_5 = input_4;\n    input_3 = input_1;\n    input_4 = input_2;\n  }\n  if (0x36 < temp_10) {\n    return CONCAT44(temp_5,temp_8);\n  }\n  temp_9 = temp_5 & 0xfffff | 0x100000;\n  if ((temp_5 & 0x80000000) != 0) {\n    temp_14 = temp_8 != 0;\n    temp_8 = -temp_8;\n    temp_9 = -temp_9 - (uint)temp_14;\n  }\n  temp_5 = input_4 & 0xfffff | 0x100000;\n  if ((input_4 & 0x80000000) != 0) {\n    temp_14 = input_3 != 0;\n    input_3 = -input_3;\n    temp_5 = -temp_5 - (uint)temp_14;\n  }\n  if (temp_7 == temp_10) {\n    temp_5 = temp_5 ^ 0x100000;\n    if (temp_7 == 0) {\n      temp_9 = temp_9 ^ 0x100000;\n      temp_7 = 1;\n    }\n    else {\n      temp_10 = temp_10 - 1;\n    }\n  }\n  temp_12 = -temp_10 + 0x20;\n  if ((int)temp_10 < 0x21) {\n    temp_11 = input_3 << (temp_12 & 0xff);\n    input_3 = input_3 >> (temp_10 & 0xff);\n    temp_3 = temp_8 + input_3;\n    temp_4 = temp_5 << (temp_12 & 0xff);\n    temp_12 = temp_3 + temp_4;\n    temp_9 = temp_9 + CARRY4(temp_8,input_3) + ((int)temp_5 >> (temp_10 & 0xff)) +\n            (uint)CARRY4(temp_3,temp_4);\n  }\n  else {\n    temp_11 = temp_5 << (-temp_10 + 0x40 & 0xff);\n    if (input_3 != 0) {\n      temp_11 = temp_11 | 2;\n    }\n    temp_5 = (int)temp_5 >> (temp_10 - 0x20 & 0xff);\n    temp_12 = temp_8 + temp_5;\n    temp_9 = temp_9 + ((int)temp_5 >> 0x1f) + (uint)CARRY4(temp_8,temp_5);\n  }\n  input_2 = temp_9 & 0x80000000;\n  temp_10 = temp_9;\n  if ((int)temp_9 < 0) {\n    temp_14 = temp_11 == 0;\n    temp_11 = -temp_11;\n    temp_10 = -temp_12;\n    temp_12 = -(uint)!temp_14 - temp_12;\n    temp_10 = -(uint)(temp_14 <= temp_10) - temp_9;\n  }\n  if (0xfffff < temp_10) {\n    temp_8 = temp_7 - 1;\n    if (0x1fffff < temp_10) {\n      temp_9 = temp_10 & 1;\n      temp_10 = temp_10 >> 1;\n      temp_2 = (byte)temp_12;\n      temp_12 = (uint)(temp_9 != 0) << 0x1f | temp_12 >> 1;\n      temp_11 = (uint)(temp_2 & 1) << 0x1f | temp_11 >> 1;\n      temp_8 = temp_7;\n      if (0xffbfffff < temp_7 * 0x200000) goto LAB_080003ac;\n    }\nLAB_08000278:\n    temp_14 = 0x7fffffff < temp_11;\n    if (temp_11 == 0x80000000) {\n      temp_14 = (temp_12 & 1) != 0;\n    }\n    return CONCAT44(temp_10 + temp_8 * 0x100000 + (uint)CARRY4(temp_12,(uint)temp_14) | input_2,\n                    temp_12 + temp_14);\n  }\n  temp_13 = (temp_11 & 0x80000000) != 0;\n  temp_11 = temp_11 << 1;\n  temp_8 = temp_12 * 2;\n  temp_14 = CARRY4(temp_12,temp_12);\n  temp_12 = temp_12 * 2 + (uint)temp_13;\n  temp_10 = temp_10 * 2 + (uint)(temp_14 || CARRY4(temp_8,(uint)temp_13));\n  temp_8 = temp_7 - 2;\n  if ((temp_10 & 0x100000) != 0) goto LAB_08000278;\n  temp_5 = temp_12;\n  temp_7 = temp_10;\n  if (temp_10 == 0) {\n    temp_5 = 0;\n    temp_7 = temp_12;\n  }\n  temp_6 = LZCOUNT(temp_7);\n  if (temp_10 == 0) {\n    temp_6 = temp_6 + 0x20;\n  }\n  temp_12 = temp_6 - 0xb;\n  temp_15 = SBORROW4(temp_12,0x20);\n  temp_10 = temp_6 - 0x2b;\n  temp_14 = (int)temp_10 < 0;\n  temp_13 = temp_10 == 0;\n  if ((int)temp_12 < 0x20) {\n    temp_15 = SCARRY4(temp_10,0xc);\n    temp_6 = temp_6 + -0x1f;\n    temp_14 = temp_6 < 0;\n    temp_13 = temp_6 == 0;\n    temp_10 = temp_12;\n    if (!temp_13 && temp_14 == temp_15) {\n      temp_5 = temp_7 << (temp_12 & 0xff);\n      temp_7 = temp_7 >> (0xcU - temp_6 & 0xff);\n      goto LAB_080002f0;\n    }\n  }\n  if (temp_13 || temp_14 != temp_15) {\n    temp_11 = 0x20 - temp_10;\n  }\n  temp_7 = temp_7 << (temp_10 & 0xff);\n  if (temp_13 || temp_14 != temp_15) {\n    temp_7 = temp_7 | temp_5 >> (temp_11 & 0xff);\n  }\n  if (temp_13 || temp_14 != temp_15) {\n    temp_5 = temp_5 << (temp_10 & 0xff);\n  }\nLAB_080002f0:\n  if ((int)temp_12 <= (int)temp_8) {\n    return CONCAT44(temp_7 + (temp_8 - temp_12) * 0x100000 | input_2,temp_5);\n  }\n  temp_10 = ~(temp_8 - temp_12);\n  if ((int)temp_10 < 0x1f) {\n    temp_6 = temp_10 - 0x13;\n    if (temp_6 != 0 && temp_6 < 0 == SCARRY4(temp_10 - 0x1f,0xc)) {\n      return CONCAT44(temp_9,temp_5 >> (0x20 - (0xcU - temp_6) & 0xff) | temp_7 << (0xcU - temp_6 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    temp_10 = temp_10 + 1;\n    return CONCAT44(input_2 | temp_7 >> (temp_10 & 0xff),\n                    temp_5 >> (temp_10 & 0xff) | temp_7 << (0x20 - temp_10 & 0xff));\n  }\n  return CONCAT44(temp_9,temp_7 >> (temp_10 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_0800016c": "calculate_concated_result_0800016c",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "iVar1": "temp_1",
                "bVar2": "temp_2",
                "uVar3": "temp_3",
                "uVar4": "temp_4",
                "uVar5": "temp_5",
                "iVar6": "temp_6",
                "uVar7": "temp_7",
                "uVar8": "temp_8",
                "uVar9": "temp_9",
                "uVar10": "temp_10",
                "uVar11": "temp_11",
                "uVar12": "temp_12",
                "bVar13": "temp_13",
                "bVar14": "temp_14",
                "bVar15": "temp_15"
            },
            "calling": [
                "FUN_08006070",
                "FUN_08006d68",
                "FUN_080071c0",
                "FUN_08005c70",
                "FUN_08006228",
                "FUN_080070b0",
                "FUN_08006c0c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000404": {
            "entrypoint": "0x08000404",
            "current_name": "extract_bits_08000404",
            "code": "\nulonglong extractBits_08000404(uint input)\n\n{\n  uint bitCount;\n  uint absInput;\n  uint shiftCount;\n  int leadingZeros;\n  uint totalShift;\n  uint signBit;\n  uint remainingBits;\n  bool isNegative;\n  bool isZero;\n  bool isOverflow;\n  \n  if (input == 0) {\n    return 0;\n  }\n  signBit = input & 0x80000000;\n  absInput = input;\n  if ((int)signBit < 0) {\n    absInput = -input;\n  }\n  bitCount = 0;\n  leadingZeros = LZCOUNT(absInput);\n  totalShift = leadingZeros + 0x15;\n  isOverflow = SBORROW4(totalShift,0x20);\n  shiftCount = leadingZeros - 0xb;\n  isNegative = (int)shiftCount < 0;\n  isZero = shiftCount == 0;\n  if (totalShift < 0x20) {\n    isOverflow = SCARRY4(shiftCount,0xc);\n    isNegative = false;\n    isZero = leadingZeros + 1 == 0;\n    shiftCount = totalShift;\n    if (!isZero && isOverflow == false) {\n      bitCount = absInput << totalShift;\n      absInput = absInput >> (0xcU - (leadingZeros + 1) & 0xff);\n      goto LAB_080002f0;\n    }\n  }\n  if (isZero || isNegative != isOverflow) {\n    remainingBits = 0x20 - shiftCount;\n  }\n  absInput = absInput << (shiftCount & 0xff);\n  if (isZero || isNegative != isOverflow) {\n    absInput = absInput | 0U >> (remainingBits & 0xff);\n  }\n  if (isZero || isNegative != isOverflow) {\n    bitCount = 0 << (shiftCount & 0xff);\n  }\nLAB_080002f0:\n  if (totalShift < 0x433) {\n    return CONCAT44(absInput + (0x432 - totalShift) * 0x100000 | signBit,bitCount);\n  }\n  shiftCount = ~(0x432 - totalShift);\n  if (0x1e < (int)shiftCount) {\n    return CONCAT44(input,absInput >> (shiftCount - 0x1f & 0xff)) & 0x80000000ffffffff;\n  }\n  leadingZeros = shiftCount - 0x13;\n  if (leadingZeros == 0 || leadingZeros < 0 != SCARRY4(shiftCount - 0x1f,0xc)) {\n    shiftCount = shiftCount + 1;\n    return CONCAT44(signBit | absInput >> (shiftCount & 0xff),\n                    bitCount >> (shiftCount & 0xff) | absInput << (0x20 - shiftCount & 0xff));\n  }\n  return CONCAT44(input,bitCount >> (0x20 - (0xcU - leadingZeros) & 0xff) | absInput << (0xcU - leadingZeros & 0xff))\n         & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_08000404": "extract_bits_08000404",
                "param_1": "input",
                "uVar1": "bitCount",
                "uVar2": "absInput",
                "uVar3": "shiftCount",
                "iVar4": "leadingZeros",
                "uVar5": "totalShift",
                "uVar6": "signBit",
                "in_r12": "remainingBits",
                "bVar7": "isNegative",
                "bVar8": "isZero",
                "bVar9": "isOverflow"
            },
            "calling": [
                "FUN_08006228"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000428": {
            "entrypoint": "0x08000428",
            "current_name": "bitwise_shift_and_mask_08000428",
            "code": "\nulonglong bitwiseShiftAndMask_08000428(uint input,undefined4 mask1,undefined4 mask2,uint mask3)\n\n{\n  uint shiftedFlag;\n  uint var1;\n  uint result1;\n  uint result2;\n  uint var2;\n  int shiftAmount;\n  uint var3;\n  uint var4;\n  bool condition1;\n  bool condition2;\n  bool condition3;\n  \n  var2 = input << 1;\n  condition2 = var2 == 0;\n  shiftedFlag = (uint)((input & 0x80000000) != 0) << 0x1f;\n  result2 = (uint)((int)var2 >> 3) >> 1;\n  result1 = shiftedFlag | result2;\n  input = input << 0x1d;\n  if (!condition2) {\n    mask3 = var2 & 0xff000000;\n    condition2 = mask3 == 0;\n  }\n  if (!condition2) {\n    condition2 = mask3 == 0xff000000;\n  }\n  if (!condition2) {\n    return CONCAT44(result1,input) ^ 0x3800000000000000;\n  }\n  if (var2 == 0 || mask3 == 0xff000000) {\n    return CONCAT44(result1,input);\n  }\n  var1 = input;\n  var2 = result2;\n  if (result2 == 0) {\n    var1 = 0;\n    var2 = input;\n  }\n  shiftAmount = LZCOUNT(var2);\n  if (result2 == 0) {\n    shiftAmount = shiftAmount + 0x20;\n  }\n  var3 = shiftAmount - 0xb;\n  condition3 = SBORROW4(var3,0x20);\n  result2 = shiftAmount - 0x2b;\n  condition2 = (int)result2 < 0;\n  condition1 = result2 == 0;\n  if ((int)var3 < 0x20) {\n    condition3 = SCARRY4(result2,0xc);\n    shiftAmount = shiftAmount + -0x1f;\n    condition2 = shiftAmount < 0;\n    condition1 = shiftAmount == 0;\n    result2 = var3;\n    if (!condition1 && condition2 == condition3) {\n      var1 = var2 << (var3 & 0xff);\n      var2 = var2 >> (0xcU - shiftAmount & 0xff);\n      goto LAB_080002f0;\n    }\n  }\n  if (condition1 || condition2 != condition3) {\n    var4 = 0x20 - result2;\n  }\n  var2 = var2 << (result2 & 0xff);\n  if (condition1 || condition2 != condition3) {\n    var2 = var2 | var1 >> (var4 & 0xff);\n  }\n  if (condition1 || condition2 != condition3) {\n    var1 = var1 << (result2 & 0xff);\n  }\nLAB_080002f0:\n  if ((int)var3 < 0x381) {\n    return CONCAT44(var2 + (0x380 - var3) * 0x100000 | shiftedFlag,var1);\n  }\n  result2 = ~(0x380 - var3);\n  if ((int)result2 < 0x1f) {\n    shiftAmount = result2 - 0x13;\n    if (shiftAmount != 0 && shiftAmount < 0 == SCARRY4(result2 - 0x1f,0xc)) {\n      return CONCAT44(result1,var1 >> (0x20 - (0xcU - shiftAmount) & 0xff) | var2 << (0xcU - shiftAmount & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    result2 = result2 + 1;\n    return CONCAT44(shiftedFlag | var2 >> (result2 & 0xff),\n                    var1 >> (result2 & 0xff) | var2 << (0x20 - result2 & 0xff));\n  }\n  return CONCAT44(result1,var2 >> (result2 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_08000428": "bitwise_shift_and_mask_08000428",
                "param_1": "input",
                "param_2": "mask1",
                "param_3": "mask2",
                "param_4": "mask3",
                "uVar1": "shiftedFlag",
                "uVar2": "var1",
                "uVar3": "result1",
                "uVar4": "result2",
                "uVar5": "var2",
                "iVar6": "shiftAmount",
                "uVar7": "var3",
                "in_r12": "var4",
                "bVar8": "condition1",
                "bVar9": "condition2",
                "bVar10": "condition3"
            },
            "calling": [
                "FUN_08003330",
                "FUN_0800411c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080004d0": {
            "entrypoint": "0x080004d0",
            "current_name": "calculate_unsigned_product_080004d0",
            "code": "\nulonglong calculate_unsigned_product_080004d0(undefined4 input1,uint input2,uint input3,uint input4)\n\n{\n  ulonglong result;\n  longlong temp;\n  uint input2_high;\n  uint input2_low;\n  int sum;\n  uint carry;\n  uint input4_high;\n  uint input4_low;\n  uint result_low;\n  bool condition1;\n  bool condition2;\n  bool condition3;\n  ulonglong concatenated_inputs;\n  \n  concatenated_inputs = CONCAT44(input2,input1);\n  input4_low = 0x7ff;\n  input2_low = input2 >> 0x14 & 0x7ff;\n  condition1 = input2_low == 0;\n  if (!condition1) {\n    input4_high = input4 >> 0x14 & 0x7ff;\n    condition1 = input4_high == 0;\n  }\n  if (!condition1) {\n    condition1 = input2_low == 0x7ff;\n  }\n  if (!condition1) {\n    condition1 = input4_high == 0x7ff;\n  }\n  if (condition1) {\n    concatenated_inputs = calculate_bitwise_xor_080006ac();\n  }\n  input2_high = (uint)(concatenated_inputs >> 0x20);\n  sum = input2_low + input4_high;\n  input2_low = input2_high ^ input4;\n  input2_high = input2_high & ~(input4_low << 0x15);\n  input4 = input4 & ~(input4_low << 0x15);\n  condition1 = ((uint)concatenated_inputs | input2_high << 0xc) == 0;\n  if (!condition1) {\n    condition1 = (input3 | input4 << 0xc) == 0;\n  }\n  input2_high = input2_high | 0x100000;\n  input4 = input4 | 0x100000;\n  if (condition1) {\n    input3 = (uint)concatenated_inputs | input3;\n    input4 = (input2_low & 0x80000000 | input2_high) ^ input4;\n    input2_low = input4_low >> 1;\n    condition3 = SBORROW4(sum,input2_low);\n    carry = sum - input2_low;\n    condition1 = carry == 0;\n    input2_high = carry;\n    if (!condition1 && (int)input2_low <= sum) {\n      condition3 = SBORROW4(input4_low,carry);\n      input2_high = input4_low - carry;\n      condition1 = input4_low == carry;\n    }\n    if (!condition1 && (int)input2_high < 0 == condition3) {\n      input4 = input4 | carry * 0x100000;\n    }\n    if (!condition1 && (int)input2_high < 0 == condition3) {\n      return CONCAT44(input4,input3);\n    }\n    input4 = input4 | 0x100000;\n    input4_low = 0;\n    condition3 = SBORROW4(carry,1);\n    carry = carry - 1;\n    condition1 = carry == 0;\n    input2_low = carry;\n  }\n  else {\n    result = (concatenated_inputs & 0xffffffff) * (ulonglong)input3;\n    concatenated_inputs = (concatenated_inputs & 0xffffffff) * (ulonglong)input4 +\n             (ulonglong)input2_high * (ulonglong)input3 + (result >> 0x20);\n    result_low = (uint)concatenated_inputs;\n    temp = (ulonglong)input2_high * (ulonglong)input4 + (concatenated_inputs >> 0x20);\n    input4_low = (uint)temp;\n    input2_high = (uint)((ulonglong)temp >> 0x20);\n    if ((int)result != 0) {\n      result_low = result_low | 1;\n    }\n    carry = (sum + -0x3ff) - (uint)(input2_high < 0x200);\n    if (input2_high < 0x200) {\n      condition1 = (result_low & 0x80000000) != 0;\n      result_low = result_low << 1;\n      temp = CONCAT44(input2_high * 2 + (uint)(CARRY4(input4_low,input4_low) || CARRY4(input4_low * 2,(uint)condition1)),\n                       input4_low * 2 + (uint)condition1);\n    }\n    input4 = input2_low & 0x80000000 | (int)((ulonglong)temp >> 0x20) << 0xb | (uint)temp >> 0x15;\n    input3 = (uint)temp << 0xb | result_low >> 0x15;\n    input4_low = result_low * 0x800;\n    condition2 = 0xfc < carry;\n    condition3 = SBORROW4(carry,0xfd);\n    input2_high = carry - 0xfd;\n    condition1 = input2_high == 0;\n    input2_low = input2_high;\n    if (condition2 && !condition1) {\n      condition2 = 0x6ff < input2_high;\n      condition3 = SBORROW4(input2_high,0x700);\n      input2_low = carry - 0x7fd;\n      condition1 = input2_high == 0x700;\n    }\n    if (!condition2 || condition1) {\n      condition1 = 0x7fffffff < input4_low;\n      if (input4_low == 0x80000000) {\n        condition1 = (result_low >> 0x15 & 1) != 0;\n      }\n      return CONCAT44(input4 + carry * 0x100000 + (uint)CARRY4(input3,(uint)condition1),input3 + condition1\n                     );\n    }\n  }\n  if (!condition1 && (int)input2_low < 0 == condition3) {\n    return (ulonglong)(input4 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  condition2 = SCARRY4(carry,0x36);\n  condition1 = (int)(carry + 0x36) < 0;\n  condition3 = carry == 0xffffffca;\n  if (condition3 || condition1 != condition2) {\n    input3 = 0;\n  }\n  if (condition3 || condition1 != condition2) {\n    input4 = input4 & 0x80000000;\n  }\n  if (condition3 || condition1 != condition2) {\n    return CONCAT44(input4,input3);\n  }\n  input2_low = -carry;\n  input2_high = input2_low - 0x20;\n  if (0x1f < (int)input2_low) {\n    carry = input3 >> (input2_high & 0xff) | input4 << (0x20 - input2_high & 0xff);\n    input2_low = (input4 >> (input2_high & 0xff) & ~((input4 & 0x80000000) >> (input2_high & 0xff))) -\n            ((int)carry >> 0x1f);\n    if ((input4_low | input3 << (0x20 - input2_high & 0xff) | carry << 1) == 0) {\n      input2_low = input2_low & ~(carry >> 0x1f);\n    }\n    return CONCAT44(input4,input2_low) & 0x80000000ffffffff;\n  }\n  sum = input2_low - 0x14;\n  if (sum == 0 || sum < 0 != SCARRY4(input2_high,0xc)) {\n    result_low = input3 << (carry + 0x20 & 0xff);\n    input2_high = input3 >> (input2_low & 0xff) | input4 << (carry + 0x20 & 0xff);\n    carry = input2_high + -((int)result_low >> 0x1f);\n    if ((input4_low | result_low << 1) == 0) {\n      carry = carry & ~(result_low >> 0x1f);\n    }\n    return CONCAT44((input4 & 0x80000000) +\n                    ((input4 & 0x7fffffff) >> (input2_low & 0xff)) +\n                    (uint)CARRY4(input2_high,-((int)result_low >> 0x1f)),carry);\n  }\n  input2_low = 0xc - sum;\n  carry = input3 << (input2_low & 0xff);\n  input2_low = input3 >> (0x20 - input2_low & 0xff) | input4 << (input2_low & 0xff);\n  input2_high = input2_low + -((int)carry >> 0x1f);\n  if ((input4_low | carry << 1) == 0) {\n    input2_high = input2_high & ~(carry >> 0x1f);\n  }\n  return CONCAT44((input4 & 0x80000000) + (uint)CARRY4(input2_low,-((int)carry >> 0x1f)),input2_high);\n}\n\n",
            "renaming": {
                "FUN_080004d0": "calculate_unsigned_product_080004d0",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "result",
                "lVar2": "temp",
                "uVar3": "input2_high",
                "uVar4": "input2_low",
                "iVar5": "sum",
                "uVar6": "carry",
                "unaff_r5": "input4_high",
                "uVar7": "input4_low",
                "uVar8": "result_low",
                "bVar9": "condition1",
                "bVar10": "condition2",
                "bVar11": "condition3",
                "uVar12": "concatenated_inputs"
            },
            "calling": [
                "FUN_08003330",
                "FUN_08006d68",
                "FUN_080071c0",
                "FUN_0800411c",
                "FUN_08005c70",
                "FUN_08006228",
                "FUN_08006c0c",
                "FUN_08005900"
            ],
            "called": [
                "FUN_080006ac"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080006ac": {
            "entrypoint": "0x080006ac",
            "current_name": "calculate_bitwise_xor_080006ac",
            "code": "\nulonglong calculate_bitwise_xor_080006ac(uint input_1,uint input_2,uint input_3,uint input_4)\n\n{\n  uint output_1;\n  uint output_2;\n  uint temp_1;\n  uint temp_2;\n  uint temp_3;\n  bool is_zero;\n  \n  temp_1 = temp_3 & input_4 >> 0x14;\n  if (output_2 != temp_3 && temp_1 != temp_3) {\n    is_zero = (input_1 | input_2 << 1) == 0;\n    if (!is_zero) {\n      is_zero = (input_3 | input_4 << 1) == 0;\n    }\n    if (is_zero) {\n      return (ulonglong)((input_2 ^ input_4) & 0x80000000) << 0x20;\n    }\n    if (output_2 == 0) {\n      temp_2 = input_2 & 0x80000000;\n      do {\n        output_1 = input_1 & 0x80000000;\n        input_1 = input_1 << 1;\n        input_2 = input_2 * 2 + (uint)(output_1 != 0);\n      } while ((input_2 & 0x100000) == 0);\n      input_2 = input_2 | temp_2;\n      if (temp_1 != 0) {\n        return CONCAT44(input_2,input_1);\n      }\n    }\n    do {\n      temp_1 = input_3 & 0x80000000;\n      input_3 = input_3 << 1;\n      input_4 = input_4 * 2 + (uint)(temp_1 != 0);\n    } while ((input_4 & 0x100000) == 0);\n    return CONCAT44(input_2,input_1);\n  }\n  is_zero = (input_1 | input_2 << 1) == 0;\n  if (is_zero) {\n    input_2 = input_4;\n    input_1 = input_3;\n  }\n  if (!is_zero) {\n    is_zero = (input_3 | input_4 << 1) == 0;\n  }\n  temp_2 = input_2;\n  if (((!is_zero) && ((output_2 != temp_3 || ((input_1 | input_2 << 0xc) == 0)))) &&\n     ((temp_1 != temp_3 || (input_1 = input_3, temp_2 = input_4, (input_3 | input_4 << 0xc) == 0)))) {\n    return (ulonglong)((input_2 ^ input_4) & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  return CONCAT44(temp_2,input_1) | 0x7ff8000000000000;\n}\n\n",
            "renaming": {
                "FUN_080006ac": "calculate_bitwise_xor_080006ac",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "uVar1": "output_1",
                "unaff_r4": "output_2",
                "uVar2": "temp_1",
                "uVar3": "temp_2",
                "in_r12": "temp_3",
                "bVar4": "is_zero"
            },
            "calling": [
                "FUN_080004d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000724": {
            "entrypoint": "0x08000724",
            "current_name": "calculate_floating_point_08000724",
            "code": "\nulonglong calculateFloatingPoint_08000724(undefined4 num1,uint num2,uint num3,uint num4)\n\n{\n  uint bits1;\n  uint bits2;\n  uint bits3;\n  uint bits4;\n  uint bits5;\n  uint bits6;\n  uint bits7;\n  int difference;\n  uint bits9;\n  uint bits10;\n  uint bits11;\n  uint bits12;\n  uint bits13;\n  uint bits14;\n  bool isZero1;\n  bool isZero2;\n  bool carryFlag;\n  undefined8 extractedBits;\n  \n  extractedBits = CONCAT44(num2,num1);\n  bits14 = 0x7ff;\n  bits7 = num2 >> 0x14 & 0x7ff;\n  isZero1 = bits7 == 0;\n  if (!isZero1) {\n    bits10 = num4 >> 0x14 & 0x7ff;\n    isZero1 = bits10 == 0;\n  }\n  if (!isZero1) {\n    isZero1 = bits7 == 0x7ff;\n  }\n  if (!isZero1) {\n    isZero1 = bits10 == 0x7ff;\n  }\n  if (isZero1) {\n    extractedBits = extract_bits_08000892();\n  }\n  bits9 = (uint)((ulonglong)extractedBits >> 0x20);\n  bits12 = (uint)extractedBits;\n  difference = bits7 - bits10;\n  if ((num3 | num4 << 0xc) == 0) {\n    bits7 = (bits9 ^ num4) & 0x80000000 | bits9 & 0xfffff;\n    carryFlag = SCARRY4(difference,bits14 >> 1);\n    bits9 = difference + (bits14 >> 1);\n    isZero1 = (int)bits9 < 0;\n    isZero2 = bits9 == 0;\n    if (!isZero2 && isZero1 == carryFlag) {\n      carryFlag = SBORROW4(bits14,bits9);\n      isZero1 = (int)(bits14 - bits9) < 0;\n      isZero2 = bits14 == bits9;\n    }\n    if (!isZero2 && isZero1 == carryFlag) {\n      bits7 = bits7 | bits9 * 0x100000;\n    }\n    if (!isZero2 && isZero1 == carryFlag) {\n      return CONCAT44(bits7,bits12);\n    }\n    bits7 = bits7 | 0x100000;\n    bits14 = 0;\n    isZero2 = SBORROW4(bits9,1);\n    bits9 = bits9 - 1;\n    isZero1 = bits9 == 0;\n    bits3 = bits9;\n  }\n  else {\n    bits3 = (num4 << 0xc) >> 4 | 0x10000000 | num3 >> 0x18;\n    bits14 = num3 << 8;\n    bits11 = (bits9 << 0xc) >> 4 | 0x10000000 | bits12 >> 0x18;\n    bits12 = bits12 * 0x100;\n    bits7 = (bits9 ^ num4) & 0x80000000;\n    isZero1 = bits3 <= bits11;\n    if (bits11 == bits3) {\n      isZero1 = bits14 <= bits12;\n    }\n    difference = difference + (uint)isZero1;\n    bits9 = difference + 0x3fd;\n    if (isZero1 == false) {\n      bits3 = bits3 >> 1;\n      bits14 = (uint)((num3 >> 0x18 & 1) != 0) << 0x1f | bits14 >> 1;\n    }\n    bits13 = bits12 - bits14;\n    bits11 = (bits11 - bits3) - (uint)(bits12 < bits14);\n    bits4 = bits3 >> 1;\n    bits1 = (uint)((bits3 & 1) != 0) << 0x1f | bits14 >> 1;\n    bits12 = 0x100000;\n    bits3 = 0x80000;\n    while( true ) {\n      isZero1 = bits1 <= bits13;\n      if (bits4 < bits11 || bits11 - bits4 < (uint)isZero1) {\n        bits13 = bits13 - bits1;\n        bits12 = bits12 | bits3;\n        bits11 = (bits11 - bits4) - (uint)!isZero1;\n      }\n      bits5 = bits4 >> 1;\n      bits1 = (uint)((bits4 & 1) != 0) << 0x1f | bits1 >> 1;\n      isZero2 = bits1 <= bits13;\n      isZero1 = bits11 - bits5 < (uint)isZero2;\n      bits14 = bits11;\n      if (bits5 < bits11 || isZero1) {\n        bits13 = bits13 - bits1;\n        bits14 = (bits11 - bits5) - (uint)!isZero2;\n      }\n      if (bits5 < bits11 || isZero1) {\n        bits12 = bits12 | bits3 >> 1;\n      }\n      bits11 = bits4 >> 2;\n      bits2 = (uint)((bits5 & 1) != 0) << 0x1f | bits1 >> 1;\n      isZero2 = bits2 <= bits13;\n      isZero1 = bits14 - bits11 < (uint)isZero2;\n      bits5 = bits14;\n      if (bits11 < bits14 || isZero1) {\n        bits13 = bits13 - bits2;\n        bits5 = (bits14 - bits11) - (uint)!isZero2;\n      }\n      if (bits11 < bits14 || isZero1) {\n        bits12 = bits12 | bits3 >> 2;\n      }\n      bits6 = bits4 >> 3;\n      bits1 = (uint)((bits11 & 1) != 0) << 0x1f | bits2 >> 1;\n      isZero2 = bits1 <= bits13;\n      isZero1 = bits5 - bits6 < (uint)isZero2;\n      bits11 = bits5;\n      if (bits6 < bits5 || isZero1) {\n        bits13 = bits13 - bits1;\n        bits11 = (bits5 - bits6) - (uint)!isZero2;\n      }\n      if (bits6 < bits5 || isZero1) {\n        bits12 = bits12 | bits3 >> 3;\n      }\n      bits14 = bits11 | bits13;\n      if (bits14 == 0) break;\n      bits11 = bits11 << 4 | bits13 >> 0x1c;\n      bits13 = bits13 << 4;\n      bits4 = bits4 & 0xfffffff8 | bits1 >> 0x1d;\n      bits1 = (bits2 >> 1) << 3;\n      bits3 = bits3 >> 4;\n      if (bits3 == 0) {\n        bits6 = bits4;\n        if ((bits7 & 0x100000) != 0) goto LAB_08000842;\n        bits7 = bits7 | bits12;\n        bits12 = 0;\n        bits3 = 0x80000000;\n      }\n    }\n    if ((bits7 & 0x100000) == 0) {\n      bits7 = bits7 | bits12;\n      bits12 = 0;\n    }\nLAB_08000842:\n    carryFlag = 0xfc < bits9;\n    isZero2 = SBORROW4(bits9,0xfd);\n    bits4 = difference + 0x300;\n    isZero1 = bits4 == 0;\n    bits3 = bits4;\n    if (carryFlag && !isZero1) {\n      carryFlag = 0x6ff < bits4;\n      isZero2 = SBORROW4(bits4,0x700);\n      bits3 = difference - 0x400;\n      isZero1 = bits4 == 0x700;\n    }\n    if (!carryFlag || isZero1) {\n      isZero1 = bits6 <= bits11;\n      if (bits11 == bits6) {\n        isZero1 = bits1 <= bits13;\n      }\n      if (bits11 == bits6 && bits13 == bits1) {\n        isZero1 = (bits12 & 1) != 0;\n      }\n      return CONCAT44(bits7 + bits9 * 0x100000 + (uint)CARRY4(bits12,(uint)isZero1),bits12 + isZero1);\n    }\n  }\n  if (!isZero1 && (int)bits3 < 0 == isZero2) {\n    return (ulonglong)(bits7 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  carryFlag = SCARRY4(bits9,0x36);\n  isZero1 = (int)(bits9 + 0x36) < 0;\n  isZero2 = bits9 == 0xffffffca;\n  if (isZero2 || isZero1 != carryFlag) {\n    bits12 = 0;\n  }\n  if (isZero2 || isZero1 != carryFlag) {\n    bits7 = bits7 & 0x80000000;\n  }\n  if (isZero2 || isZero1 != carryFlag) {\n    return CONCAT44(bits7,bits12);\n  }\n  bits3 = -bits9;\n  bits11 = bits3 - 0x20;\n  if (0x1f < (int)bits3) {\n    bits3 = bits12 >> (bits11 & 0xff) | bits7 << (0x20 - bits11 & 0xff);\n    bits9 = (bits7 >> (bits11 & 0xff) & ~((bits7 & 0x80000000) >> (bits11 & 0xff))) -\n            ((int)bits3 >> 0x1f);\n    if ((bits14 | bits12 << (0x20 - bits11 & 0xff) | bits3 << 1) == 0) {\n      bits9 = bits9 & ~(bits3 >> 0x1f);\n    }\n    return CONCAT44(bits7,bits9) & 0x80000000ffffffff;\n  }\n  difference = bits3 - 0x14;\n  if (difference != 0 && difference < 0 == SCARRY4(bits11,0xc)) {\n    bits9 = 0xc - difference;\n    bits3 = bits12 << (bits9 & 0xff);\n    bits12 = bits12 >> (0x20 - bits9 & 0xff) | bits7 << (bits9 & 0xff);\n    bits9 = bits12 + -((int)bits3 >> 0x1f);\n    if ((bits14 | bits3 << 1) == 0) {\n      bits9 = bits9 & ~(bits3 >> 0x1f);\n    }\n    return CONCAT44((bits7 & 0x80000000) + (uint)CARRY4(bits12,-((int)bits3 >> 0x1f)),bits9);\n  }\n  bits11 = bits12 << (bits9 + 0x20 & 0xff);\n  bits12 = bits12 >> (bits3 & 0xff) | bits7 << (bits9 + 0x20 & 0xff);\n  bits9 = bits12 + -((int)bits11 >> 0x1f);\n  if ((bits14 | bits11 << 1) == 0) {\n    bits9 = bits9 & ~(bits11 >> 0x1f);\n  }\n  return CONCAT44((bits7 & 0x80000000) +\n                  ((bits7 & 0x7fffffff) >> (bits3 & 0xff)) +\n                  (uint)CARRY4(bits12,-((int)bits11 >> 0x1f)),bits9);\n}\n\n",
            "renaming": {
                "FUN_08000724": "calculate_floating_point_08000724",
                "param_1": "num1",
                "param_2": "num2",
                "param_3": "num3",
                "param_4": "num4",
                "uVar1": "bits1",
                "uVar2": "bits2",
                "uVar3": "bits3",
                "uVar4": "bits4",
                "uVar5": "bits5",
                "uVar6": "bits6",
                "uVar7": "bits7",
                "iVar8": "difference",
                "uVar9": "bits9",
                "unaff_r5": "bits10",
                "uVar10": "bits11",
                "uVar11": "bits12",
                "uVar12": "bits13",
                "uVar13": "bits14",
                "bVar14": "isZero1",
                "bVar15": "isZero2",
                "bVar16": "carryFlag",
                "uVar17": "extractedBits"
            },
            "calling": [
                "FUN_08003330",
                "FUN_08006070",
                "FUN_08006d68",
                "FUN_08005bc8",
                "FUN_08005c70",
                "FUN_08006228",
                "FUN_08006c0c",
                "FUN_08005900"
            ],
            "called": [
                "FUN_08000892"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000892": {
            "entrypoint": "0x08000892",
            "current_name": "extract_bits_08000892",
            "code": "\nulonglong extractBits_08000892(uint input1,uint input2,uint input3,uint input4)\n\n{\n  uint bit1;\n  uint bit2;\n  uint bit3;\n  uint bit4;\n  uint mask;\n  bool isZero;\n  \n  bit3 = mask & input4 >> 0x14;\n  bit4 = input2;\n  if (bit2 != mask || bit3 != mask) {\n    if (bit2 == mask) {\n      if (((input1 | input2 << 0xc) == 0) && (input1 = input3, bit4 = input4, bit3 != mask)\n         ) {\nLAB_08000704:\n        return (ulonglong)((input2 ^ input4) & 0x80000000 | 0x7ff00000) << 0x20;\n      }\n    }\n    else if (bit3 == mask) {\n      input1 = input3;\n      bit4 = input4;\n      if ((input3 | input4 << 0xc) == 0) {\nLAB_080006c8:\n        return (ulonglong)((input2 ^ input4) & 0x80000000) << 0x20;\n      }\n    }\n    else {\n      isZero = (input1 | input2 << 1) == 0;\n      if (!isZero) {\n        isZero = (input3 | input4 << 1) == 0;\n      }\n      if (!isZero) {\n        if (bit2 == 0) {\n          bit4 = input2 & 0x80000000;\n          do {\n            bit1 = input1 & 0x80000000;\n            input1 = input1 << 1;\n            input2 = input2 * 2 + (uint)(bit1 != 0);\n          } while ((input2 & 0x100000) == 0);\n          input2 = input2 | bit4;\n          if (bit3 != 0) {\n            return CONCAT44(input2,input1);\n          }\n        }\n        do {\n          bit4 = input3 & 0x80000000;\n          input3 = input3 << 1;\n          input4 = input4 * 2 + (uint)(bit4 != 0);\n        } while ((input4 & 0x100000) == 0);\n        return CONCAT44(input2,input1);\n      }\n      if ((input1 | input2 << 1) != 0) goto LAB_08000704;\n      if ((input3 | input4 << 1) != 0) goto LAB_080006c8;\n    }\n  }\n  return CONCAT44(bit4,input1) | 0x7ff8000000000000;\n}\n\n",
            "renaming": {
                "FUN_08000892": "extract_bits_08000892",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "bit1",
                "unaff_r4": "bit2",
                "uVar2": "bit3",
                "uVar3": "bit4",
                "in_r12": "mask",
                "bVar4": "isZero"
            },
            "calling": [
                "FUN_08000724"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000904": {
            "entrypoint": "0x08000904",
            "current_name": "check_equality_08000904",
            "code": "\nuint checkEquality_08000904(uint param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  uint xorResult;\n  bool isZero;\n  bool isComparisonTrue;\n  \n  if (((int)(param_2 << 1) >> 0x15 == -1 || (int)(param_4 << 1) >> 0x15 == -1) &&\n     ((((int)(param_2 << 1) >> 0x15 == -1 && ((param_1 | param_2 << 0xc) != 0)) ||\n      (((int)(param_4 << 1) >> 0x15 == -1 && ((param_3 | param_4 << 0xc) != 0)))))) {\n    return 1;\n  }\n  isZero = (param_1 | param_2 << 1) == 0;\n  if (isZero) {\n    isZero = (param_3 | param_4 << 1) == 0;\n  }\n  if (!isZero) {\n    isZero = param_2 == param_4;\n  }\n  if (isZero) {\n    isZero = param_1 == param_3;\n  }\n  if (!isZero) {\n    xorResult = param_2 ^ param_4;\n    isZero = xorResult == 0;\n    if (-1 < (int)xorResult) {\n      isZero = param_2 == param_4;\n    }\n    isComparisonTrue = -1 < (int)xorResult && param_4 <= param_2;\n    if (isZero) {\n      isComparisonTrue = param_3 <= param_1;\n    }\n    param_4 = (int)param_4 >> 0x1f;\n    if (!isComparisonTrue) {\n      param_4 = ~param_4;\n    }\n    return param_4 | 1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08000904": "check_equality_08000904",
                "uVar1": "xorResult",
                "bVar2": "isZero",
                "bVar3": "isComparisonTrue"
            },
            "calling": [
                "FUN_08000990"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000980": {
            "entrypoint": "0x08000980",
            "current_name": "validate_input_08000980",
            "code": "\nvoid validate_input_08000980(undefined4 input_1,undefined4 input_2,undefined4 ptr_data,undefined4 ptr_info)\n\n{\n  check_and_return_value_08000990(ptr_data,ptr_info,input_1,input_2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000980": "validate_input_08000980",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "ptr_data",
                "param_4": "ptr_info"
            },
            "calling": [
                "FUN_080009f0"
            ],
            "called": [
                "FUN_08000990"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000990": {
            "entrypoint": "0x08000990",
            "current_name": "check_and_return_value_08000990",
            "code": "\nundefined4 check_and_return_value_08000990(undefined4 input_value)\n\n{\n  check_equality_08000904();\n  return input_value;\n}\n\n",
            "renaming": {
                "FUN_08000990": "check_and_return_value_08000990",
                "param_1": "input_value"
            },
            "calling": [
                "FUN_08000980",
                "FUN_080009a0",
                "FUN_080009b4",
                "FUN_080009c8"
            ],
            "called": [
                "FUN_08000904"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080009a0": {
            "entrypoint": "0x080009a0",
            "current_name": "check_and_return_value_080009a0",
            "code": "\nbool check_and_return_value_080009a0(void)\n\n{\n  char result;\n  \n  check_and_return_value_080009a0_08000990();\n  return result != '\\0';\n}\n\n",
            "renaming": {
                "FUN_080009a0": "check_and_return_value_080009a0",
                "in_ZR": "result"
            },
            "calling": [
                "FUN_08005900"
            ],
            "called": [
                "FUN_08000990"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080009b4": {
            "entrypoint": "0x080009b4",
            "current_name": "is_end_of_string_080009b4",
            "code": "\nbool is_end_of_string_080009b4(void)\n\n{\n  char current_char;\n  \n  check_and_return_value_08000990();\n  return current_char == '\\0';\n}\n\n",
            "renaming": {
                "FUN_080009b4": "is_end_of_string_080009b4",
                "in_CY": "current_char"
            },
            "calling": [
                "FUN_08005bc8",
                "FUN_08005900"
            ],
            "called": [
                "FUN_08000990"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080009c8": {
            "entrypoint": "0x080009c8",
            "current_name": "check_and_return_result_080009c8",
            "code": "\nbool check_and_return_result_080009c8(void)\n\n{\n  undefined check_zero;\n  undefined check_carry;\n  \n  check_and_return_value_08000990();\n  return !(bool)check_carry || (bool)check_zero;\n}\n\n",
            "renaming": {
                "FUN_080009c8": "check_and_return_result_080009c8",
                "in_ZR": "check_zero",
                "in_CY": "check_carry"
            },
            "calling": [
                "FUN_08006228"
            ],
            "called": [
                "FUN_08000990"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080009f0": {
            "entrypoint": "0x080009f0",
            "current_name": "check_input_validity_080009f0",
            "code": "\nbool check_input_validity_080009f0(void)\n\n{\n  char input_character;\n  \n  validate_input_08000980();\n  return input_character == '\\0';\n}\n\n",
            "renaming": {
                "FUN_080009f0": "check_input_validity_080009f0",
                "in_CY": "input_character"
            },
            "calling": [
                "FUN_08006d68",
                "FUN_08005c70",
                "FUN_08005854",
                "FUN_08006228"
            ],
            "called": [
                "FUN_08000980"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000a04": {
            "entrypoint": "0x08000a04",
            "current_name": "check_inputs_08000a04",
            "code": "\nundefined4 check_inputs_08000a04(uint input_1,int input_2,uint input_3,int input_4)\n\n{\n  if ((((input_2 << 1) >> 0x15 != -1) || ((input_1 | input_2 << 0xc) == 0)) &&\n     (((input_4 << 1) >> 0x15 != -1 || ((input_3 | input_4 << 0xc) == 0)))) {\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08000a04": "check_inputs_08000a04",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4"
            },
            "calling": [
                "FUN_08005bc8",
                "FUN_08005854",
                "FUN_08005900"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000a30": {
            "entrypoint": "0x08000a30",
            "current_name": "convert_to_float_08000a30",
            "code": "\nuint convertToFloat_08000a30(uint inputInt,uint inputFloat)\n\n{\n  uint result;\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  bool isZero;\n  bool isLessThanThreshold;\n  \n  temp1 = inputFloat * 2;\n  isLessThanThreshold = temp1 < 0x70000000;\n  temp2 = temp1 + 0x90000000;\n  result = temp2;\n  if (!isLessThanThreshold) {\n    temp3 = temp1 + 0x8fe00000;\n    result = temp3;\n  }\n  isZero = result == 0;\n  if (!isLessThanThreshold && temp2 >= 0x200000) {\n    isZero = temp3 == 0x1fc00000;\n  }\n  if (((isLessThanThreshold || temp2 < 0x200000) || 0x1fc00000 < temp3) || isZero) {\n    if ((inputFloat & 0x40000000) != 0) {\n      if (((int)temp1 >> 0x15 == -1) && ((inputInt | inputFloat << 0xc) != 0)) {\n        return 0x7fc00000;\n      }\n      return inputFloat & 0x80000000 | 0x7f800000;\n    }\n    if ((int)(temp1 + 0x92e00000) < 0 != SCARRY4(temp2,0x2e00000)) {\n      return inputFloat & 0x80000000;\n    }\n    temp1 = 0x18 - (temp1 + 0x92e00000 >> 0x15);\n    result = inputInt >> (temp1 & 0xff);\n    if (inputInt << (0x20 - temp1 & 0xff) != 0) {\n      result = result | 1;\n    }\n    temp2 = inputFloat & 0x1fffff | 0x100000;\n    inputInt = result | temp2 << (0x20 - temp1 & 0xff);\n    temp2 = (temp2 >> (temp1 & 0xff)) << 1;\n  }\n  result = (inputFloat & 0x80000000 | inputInt >> 0x1d) + temp2 * 4 + (uint)(0x7fffffff < inputInt * 8);\n  if (inputInt * 8 == 0x80000000) {\n    result = result & 0xfffffffe;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08000a30": "convert_to_float_08000a30",
                "param_1": "inputInt",
                "param_2": "inputFloat",
                "uVar1": "result",
                "uVar2": "temp1",
                "uVar3": "temp2",
                "in_r12": "temp3",
                "bVar4": "isZero",
                "bVar5": "isLessThanThreshold"
            },
            "calling": [
                "FUN_08003330",
                "FUN_0800411c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000ad8": {
            "entrypoint": "0x08000ad8",
            "current_name": "calculate_floating_point_08000ad8",
            "code": "\nuint calculateFloatingPoint_08000ad8(uint input,uint sign_bit,undefined4 unused,uint exponent)\n\n{\n  int shifted_input;\n  int shifted_sign_bit;\n  uint sign_masked_input;\n  uint sign_masked_shifted_input;\n  uint output;\n  uint original_exponent;\n  uint difference;\n  bool is_zero;\n  \n  sign_masked_input = sign_bit ^ 0x80000000;\n  output = input << 1;\n  is_zero = output == 0;\n  if (!is_zero) {\n    exponent = sign_bit << 1;\n    is_zero = exponent == 0;\n  }\n  if (!is_zero) {\n    is_zero = output == exponent;\n  }\n  shifted_input = (int)output >> 0x18;\n  if (!is_zero) {\n    is_zero = shifted_input == -1;\n  }\n  if (!is_zero) {\n    is_zero = (int)exponent >> 0x18 == -1;\n  }\n  if (is_zero) {\n    shifted_sign_bit = (int)(sign_bit << 1) >> 0x18;\n    if (shifted_input == -1 || shifted_sign_bit == -1) {\n      output = sign_masked_input;\n      if (shifted_input == -1) {\n        output = input;\n      }\n      if (shifted_input != -1 || shifted_sign_bit != -1) {\n        sign_masked_input = output;\n      }\n      is_zero = (output & 0x7fffff) == 0;\n      if (is_zero) {\n        is_zero = (sign_masked_input & 0x7fffff) == 0;\n      }\n      if (is_zero) {\n        is_zero = output == sign_masked_input;\n      }\n      if (!is_zero) {\n        output = output | 0x400000;\n      }\n      return output;\n    }\n    if (((input ^ sign_masked_input) & 0x7fffffff) != 0) {\n      if (output == 0) {\n        input = sign_masked_input;\n      }\n      return input;\n    }\n    if (input != sign_masked_input) {\n      return 0;\n    }\n    if ((output & 0xff000000) == 0) {\n      sign_masked_input = input << 1;\n      if ((input & 0x80000000) != 0) {\n        sign_masked_input = sign_masked_input | 0x80000000;\n      }\n      return sign_masked_input;\n    }\n    if (output < 0xfe000000) {\n      return input + 0x800000;\n    }\n    input = input & 0x80000000;\nLAB_08000c12:\n    return input | 0x7f800000;\n  }\n  output = output >> 0x18;\n  exponent = exponent >> 0x18;\n  difference = exponent - output;\n  is_zero = difference != 0;\n  original_exponent = output;\n  if (is_zero && output <= exponent) {\n    original_exponent = output + difference;\n  }\n  if (is_zero && output <= exponent) {\n    sign_masked_input = sign_masked_input ^ input;\n  }\n  if (is_zero && output <= exponent) {\n    input = input ^ sign_masked_input;\n  }\n  if (is_zero && output <= exponent) {\n    sign_masked_input = sign_masked_input ^ input;\n  }\n  if (exponent < output) {\n    difference = -difference;\n  }\n  if (0x19 < difference) {\n    return input;\n  }\n  output = input & 0xffffff | 0x800000;\n  if ((input & 0x80000000) != 0) {\n    output = -output;\n  }\n  sign_masked_shifted_input = sign_masked_input & 0xffffff | 0x800000;\n  if ((sign_masked_input & 0x80000000) != 0) {\n    sign_masked_shifted_input = -sign_masked_shifted_input;\n  }\n  if (original_exponent == difference) {\n    sign_masked_shifted_input = sign_masked_shifted_input ^ 0x800000;\n    if (original_exponent == 0) {\n      output = output ^ 0x800000;\n      original_exponent = 1;\n    }\n    else {\n      difference = difference - 1;\n    }\n  }\n  output = output + ((int)sign_masked_shifted_input >> (difference & 0xff));\n  sign_masked_shifted_input = sign_masked_shifted_input << (0x20 - difference & 0xff);\n  input = output & 0x80000000;\n  if ((int)output < 0) {\n    is_zero = sign_masked_shifted_input != 0;\n    sign_masked_shifted_input = -sign_masked_shifted_input;\n    output = -output - (uint)is_zero;\n  }\n  if (output < 0x800000) {\n    sign_masked_input = sign_masked_shifted_input & 0x80000000;\n    sign_masked_shifted_input = sign_masked_shifted_input << 1;\n    output = output * 2 + (uint)(sign_masked_input != 0);\n    sign_masked_input = original_exponent - 2;\n    if ((output & 0x800000) == 0) {\n      difference = LZCOUNT(output) - 8;\n      output = output << (difference & 0xff);\n      if ((int)sign_masked_input < (int)difference) {\n        output = output >> (-(sign_masked_input - difference) & 0xff);\n      }\n      else {\n        output = output + (sign_masked_input - difference) * 0x800000;\n      }\n      return output | input;\n    }\n  }\n  else {\n    sign_masked_input = original_exponent - 1;\n    if (0xffffff < output) {\n      sign_masked_input = output & 1;\n      output = output >> 1;\n      sign_masked_shifted_input = (uint)(sign_masked_input != 0) << 0x1f | sign_masked_shifted_input >> 1;\n      sign_masked_input = original_exponent;\n      if (0xfd < original_exponent) goto LAB_08000c12;\n    }\n  }\n  output = output + sign_masked_input * 0x800000 + (uint)(0x7fffffff < sign_masked_shifted_input);\n  if (sign_masked_shifted_input == 0x80000000) {\n    output = output & 0xfffffffe;\n  }\n  return output | input;\n}\n\n",
            "renaming": {
                "FUN_08000ad8": "calculate_floating_point_08000ad8",
                "param_1": "input",
                "param_2": "sign_bit",
                "param_3": "unused",
                "param_4": "exponent",
                "iVar1": "shifted_input",
                "iVar2": "shifted_sign_bit",
                "uVar3": "sign_masked_input",
                "uVar4": "sign_masked_shifted_input",
                "uVar5": "output",
                "uVar6": "original_exponent",
                "uVar7": "difference",
                "bVar8": "is_zero"
            },
            "calling": [
                "FUN_08003330",
                "FUN_0800426c",
                "FUN_08002d88",
                "FUN_08002bf0",
                "FUN_08002ee8",
                "FUN_08002ec0",
                "FUN_0800483c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000adc": {
            "entrypoint": "0x08000adc",
            "current_name": "calculate_float_addition_08000adc",
            "code": "\nuint calculateFloatAddition_08000adc(uint inputNumber1,uint inputNumber2,undefined4 inputModifier,uint inputMask)\n\n{\n  int shiftedNumber1;\n  int shiftedNumber2;\n  uint result1;\n  uint result2;\n  uint flag;\n  uint difference;\n  bool isZero;\n  \n  result2 = inputNumber1 << 1;\n  isZero = result2 == 0;\n  if (!isZero) {\n    inputMask = inputNumber2 << 1;\n    isZero = inputMask == 0;\n  }\n  if (!isZero) {\n    isZero = result2 == inputMask;\n  }\n  shiftedNumber1 = (int)result2 >> 0x18;\n  if (!isZero) {\n    isZero = shiftedNumber1 == -1;\n  }\n  if (!isZero) {\n    isZero = (int)inputMask >> 0x18 == -1;\n  }\n  if (isZero) {\n    shiftedNumber2 = (int)(inputNumber2 << 1) >> 0x18;\n    if (shiftedNumber1 == -1 || shiftedNumber2 == -1) {\n      result2 = inputNumber2;\n      if (shiftedNumber1 == -1) {\n        result2 = inputNumber1;\n      }\n      if (shiftedNumber1 != -1 || shiftedNumber2 != -1) {\n        inputNumber2 = result2;\n      }\n      isZero = (result2 & 0x7fffff) == 0;\n      if (isZero) {\n        isZero = (inputNumber2 & 0x7fffff) == 0;\n      }\n      if (isZero) {\n        isZero = result2 == inputNumber2;\n      }\n      if (!isZero) {\n        result2 = result2 | 0x400000;\n      }\n      return result2;\n    }\n    if (((inputNumber1 ^ inputNumber2) & 0x7fffffff) != 0) {\n      if (result2 == 0) {\n        inputNumber1 = inputNumber2;\n      }\n      return inputNumber1;\n    }\n    if (inputNumber1 != inputNumber2) {\n      return 0;\n    }\n    if ((result2 & 0xff000000) == 0) {\n      result2 = inputNumber1 << 1;\n      if ((inputNumber1 & 0x80000000) != 0) {\n        result2 = result2 | 0x80000000;\n      }\n      return result2;\n    }\n    if (result2 < 0xfe000000) {\n      return inputNumber1 + 0x800000;\n    }\n    inputNumber1 = inputNumber1 & 0x80000000;\nLAB_08000c12:\n    return inputNumber1 | 0x7f800000;\n  }\n  result2 = result2 >> 0x18;\n  inputMask = inputMask >> 0x18;\n  difference = inputMask - result2;\n  isZero = difference != 0;\n  flag = result2;\n  if (isZero && result2 <= inputMask) {\n    flag = result2 + difference;\n  }\n  if (isZero && result2 <= inputMask) {\n    inputNumber2 = inputNumber2 ^ inputNumber1;\n  }\n  if (isZero && result2 <= inputMask) {\n    inputNumber1 = inputNumber1 ^ inputNumber2;\n  }\n  if (isZero && result2 <= inputMask) {\n    inputNumber2 = inputNumber2 ^ inputNumber1;\n  }\n  if (inputMask < result2) {\n    difference = -difference;\n  }\n  if (0x19 < difference) {\n    return inputNumber1;\n  }\n  result2 = inputNumber1 & 0xffffff | 0x800000;\n  if ((inputNumber1 & 0x80000000) != 0) {\n    result2 = -result2;\n  }\n  result1 = inputNumber2 & 0xffffff | 0x800000;\n  if ((inputNumber2 & 0x80000000) != 0) {\n    result1 = -result1;\n  }\n  if (flag == difference) {\n    result1 = result1 ^ 0x800000;\n    if (flag == 0) {\n      result2 = result2 ^ 0x800000;\n      flag = 1;\n    }\n    else {\n      difference = difference - 1;\n    }\n  }\n  result2 = result2 + ((int)result1 >> (difference & 0xff));\n  result1 = result1 << (0x20 - difference & 0xff);\n  inputNumber1 = result2 & 0x80000000;\n  if ((int)result2 < 0) {\n    isZero = result1 != 0;\n    result1 = -result1;\n    result2 = -result2 - (uint)isZero;\n  }\n  if (result2 < 0x800000) {\n    difference = result1 & 0x80000000;\n    result1 = result1 << 1;\n    result2 = result2 * 2 + (uint)(difference != 0);\n    difference = flag - 2;\n    if ((result2 & 0x800000) == 0) {\n      flag = leadingZerosCount(result2) - 8;\n      result2 = result2 << (flag & 0xff);\n      if ((int)difference < (int)flag) {\n        result2 = result2 >> (-(difference - flag) & 0xff);\n      }\n      else {\n        result2 = result2 + (difference - flag) * 0x800000;\n      }\n      return result2 | inputNumber1;\n    }\n  }\n  else {\n    difference = flag - 1;\n    if (0xffffff < result2) {\n      difference = result2 & 1;\n      result2 = result2 >> 1;\n      result1 = (uint)(difference != 0) << 0x1f | result1 >> 1;\n      difference = flag;\n      if (0xfd < flag) goto LAB_08000c12;\n    }\n  }\n  result2 = result2 + difference * 0x800000 + (uint)(0x7fffffff < result1);\n  if (result1 == 0x80000000) {\n    result2 = result2 & 0xfffffffe;\n  }\n  return result2 | inputNumber1;\n}\n\n",
            "renaming": {
                "FUN_08000adc": "calculate_float_addition_08000adc",
                "param_1": "inputNumber1",
                "param_2": "inputNumber2",
                "param_3": "inputModifier",
                "param_4": "inputMask",
                "iVar1": "shiftedNumber1",
                "iVar2": "shiftedNumber2",
                "uVar3": "result1",
                "uVar4": "result2",
                "uVar5": "flag",
                "uVar6": "difference",
                "bVar7": "isZero",
                "LZCOUNT": "leadingZerosCount"
            },
            "calling": [
                "FUN_08003330",
                "FUN_0800426c",
                "FUN_08004a84",
                "FUN_0800411c",
                "FUN_08002ee8",
                "FUN_08002cb0",
                "FUN_08002ec0",
                "FUN_0800483c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000c3c": {
            "entrypoint": "0x08000c3c",
            "current_name": "calculate_value_08000c3c",
            "code": "\nuint calculateValue_08000c3c(uint input)\n\n{\n  uint output;\n  uint updatedInput;\n  int baseValue;\n  uint carry;\n  \n  if (input == 0) {\n    return 0;\n  }\n  output = LZCOUNT(input);\n  updatedInput = output - 8;\n  baseValue = updatedInput * -0x800000 + 0x4a800000;\n  if (7 < output) {\n    carry = 0 << (updatedInput & 0xff);\n    output = baseValue + (input << (updatedInput & 0xff)) +\n            (0U >> (0x20 - updatedInput & 0xff)) + (uint)(0x7fffffff < carry);\n    if (carry == 0x80000000) {\n      output = output & 0xfffffffe;\n    }\n    return output;\n  }\n  updatedInput = input << output + 0x18;\n  output = baseValue + ((input >> (0x20 - (output + 0x18) & 0xff)) - ((int)updatedInput >> 0x1f));\n  if ((updatedInput & 0x7fffffff) == 0) {\n    output = output & ~(updatedInput >> 0x1f);\n  }\n  return output;\n}\n\n",
            "renaming": {
                "FUN_08000c3c": "calculate_value_08000c3c",
                "param_1": "input",
                "uVar1": "output",
                "uVar2": "updatedInput",
                "iVar3": "baseValue",
                "uVar4": "carry"
            },
            "calling": [
                "FUN_08002f28"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000c44": {
            "entrypoint": "0x08000c44",
            "current_name": "calculate_bitwise_shift_08000c44",
            "code": "\nuint calculate_bitwise_shift_08000c44(uint input_value)\n\n{\n  uint leading_zeros;\n  uint shifted_value;\n  uint sign_bit;\n  int result;\n  \n  sign_bit = input_value & 0x80000000;\n  if ((int)sign_bit < 0) {\n    input_value = -input_value;\n  }\n  if (input_value == 0) {\n    return 0;\n  }\n  leading_zeros = count_leading_zeros(input_value);\n  shifted_value = leading_zeros - 8;\n  result = ((sign_bit | 0x4b000000) - 0x800000) + shifted_value * -0x800000;\n  if (7 < leading_zeros) {\n    leading_zeros = 0 << (shifted_value & 0xff);\n    sign_bit = result + (input_value << (shifted_value & 0xff)) +\n            (0U >> (0x20 - shifted_value & 0xff)) + (uint)(0x7fffffff < leading_zeros);\n    if (leading_zeros == 0x80000000) {\n      sign_bit = sign_bit & 0xfffffffe;\n    }\n    return sign_bit;\n  }\n  shifted_value = input_value << leading_zeros + 0x18;\n  sign_bit = result + ((input_value >> (0x20 - (leading_zeros + 0x18) & 0xff)) - ((int)shifted_value >> 0x1f));\n  if ((shifted_value & 0x7fffffff) == 0) {\n    sign_bit = sign_bit & ~(shifted_value >> 0x1f);\n  }\n  return sign_bit;\n}\n\n",
            "renaming": {
                "FUN_08000c44": "calculate_bitwise_shift_08000c44",
                "param_1": "input_value",
                "uVar1": "leading_zeros",
                "uVar2": "shifted_value",
                "uVar3": "sign_bit",
                "iVar4": "result",
                "LZCOUNT": "count_leading_zeros"
            },
            "calling": [
                "FUN_08002b48",
                "FUN_08002d88",
                "FUN_08002bf0",
                "FUN_0800411c",
                "FUN_08002cb0",
                "FUN_0800483c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000cec": {
            "entrypoint": "0x08000cec",
            "current_name": "calculate_floating_point_08000cec",
            "code": "\nuint calculateFloatingPoint_08000cec(uint input1,uint input2,undefined4 input3,uint input4)\n\n{\n  longlong product;\n  uint result;\n  uint shiftValue1;\n  int sum;\n  int shiftValue2;\n  uint lowerBits;\n  int exponent;\n  uint finalResult;\n  bool condition1;\n  bool condition2;\n  \n  shiftValue1 = input1 >> 0x17 & 0xff;\n  condition1 = shiftValue1 == 0;\n  if (!condition1) {\n    input4 = input2 >> 0x17 & 0xff;\n    condition1 = input4 == 0;\n  }\n  if (!condition1) {\n    condition1 = shiftValue1 == 0xff;\n  }\n  if (!condition1) {\n    condition1 = input4 == 0xff;\n  }\n  if (condition1) {\n    input4 = input2 >> 0x17 & 0xff;\n    if (shiftValue1 == 0xff || input4 == 0xff) {\n      condition1 = input1 == 0 || input1 == 0x80000000;\n      result = input2;\n      if (input1 != 0 && input1 != 0x80000000) {\n        condition1 = input2 == 0;\n        result = input1;\n      }\n      if (!condition1) {\n        condition1 = input2 == 0x80000000;\n      }\n      finalResult = result;\n      if (((condition1) || ((shiftValue1 == 0xff && ((result & 0x7fffff) != 0)))) ||\n         ((input4 == 0xff && (finalResult = input2, (input2 & 0x7fffff) != 0)))) {\n        return finalResult | 0x7fc00000;\n      }\n      result = result ^ input2;\n      goto LAB_08000e3c;\n    }\n    condition1 = (input1 & 0x7fffffff) == 0;\n    if (!condition1) {\n      condition1 = (input2 & 0x7fffffff) == 0;\n    }\n    if (condition1) {\n      return (input1 ^ input2) & 0x80000000;\n    }\n    condition1 = shiftValue1 == 0;\n    result = input1 & 0x80000000;\n    while( true ) {\n      if (condition1) {\n        input1 = input1 << 1;\n        condition1 = (input1 & 0x800000) == 0;\n      }\n      if (!condition1) break;\n      shiftValue1 = shiftValue1 - 1;\n    }\n    input1 = input1 | result;\n    condition1 = input4 == 0;\n    result = input2 & 0x80000000;\n    while( true ) {\n      if (condition1) {\n        input2 = input2 << 1;\n        condition1 = (input2 & 0x800000) == 0;\n      }\n      if (!condition1) break;\n      input4 = input4 - 1;\n    }\n    input2 = input2 | result;\n  }\n  sum = shiftValue1 + input4;\n  finalResult = input1 ^ input2;\n  shiftValue1 = input1 << 9;\n  condition1 = shiftValue1 == 0;\n  if (!condition1) {\n    input2 = input2 << 9;\n    condition1 = input2 == 0;\n  }\n  if (condition1) {\n    if (shiftValue1 == 0) {\n      input2 = input2 << 9;\n    }\n    result = finalResult & 0x80000000 | input1 & 0x7fffff | input2 >> 9;\n    condition2 = SBORROW4(sum,0x7f);\n    shiftValue2 = sum + -0x7f;\n    condition1 = shiftValue2 == 0;\n    exponent = shiftValue2;\n    if (!condition1 && 0x7e < sum) {\n      condition2 = SBORROW4(0xff,shiftValue2);\n      exponent = 0xff - shiftValue2;\n      condition1 = shiftValue2 == 0xff;\n    }\n    if (!condition1 && exponent < 0 == condition2) {\n      result = result | shiftValue2 * 0x800000;\n    }\n    if (!condition1 && exponent < 0 == condition2) {\n      return result;\n    }\n    result = result | 0x800000;\n    lowerBits = 0;\n    condition2 = SBORROW4(shiftValue2,1);\n    finalResult = sum - 0x80;\n    condition1 = finalResult == 0;\n    shiftValue1 = finalResult;\n  }\n  else {\n    product = (ulonglong)(shiftValue1 >> 5 | 0x8000000) * (ulonglong)(input2 >> 5 | 0x8000000);\n    lowerBits = (uint)product;\n    result = (uint)((ulonglong)product >> 0x20);\n    condition1 = result < 0x800000;\n    if (condition1) {\n      result = result << 1;\n    }\n    if (condition1) {\n      result = result | lowerBits >> 0x1f;\n      lowerBits = lowerBits << 1;\n    }\n    result = finalResult & 0x80000000 | result;\n    finalResult = (sum + -0x7f) - (uint)condition1;\n    condition2 = SBORROW4(finalResult,0xfd);\n    condition1 = finalResult == 0xfd;\n    shiftValue1 = finalResult - 0xfd;\n    if (finalResult < 0xfe) {\n      result = result + finalResult * 0x800000 + (uint)(0x7fffffff < lowerBits);\n      if (lowerBits == 0x80000000) {\n        result = result & 0xfffffffe;\n      }\n      return result;\n    }\n  }\n  if (condition1 || (int)shiftValue1 < 0 != condition2) {\n    condition1 = (int)(finalResult + 0x19) < 0;\n    if (finalResult == 0xffffffe7 || condition1 != SCARRY4(finalResult,0x19)) {\n      result = result & 0x80000000;\n    }\n    if (finalResult != 0xffffffe7 && condition1 == SCARRY4(finalResult,0x19)) {\n      shiftValue1 = (result << 1) >> (-finalResult & 0xff);\n      finalResult = result << (finalResult + 0x20 & 0xff);\n      shiftValue1 = ((uint)((result & 0x80000000) != 0) << 0x1f | shiftValue1 >> 1) + (uint)((byte)shiftValue1 & 1);\n      if ((lowerBits | finalResult << 1) == 0) {\n        shiftValue1 = shiftValue1 & ~(finalResult >> 0x1f);\n      }\n      return shiftValue1;\n    }\n    return result;\n  }\nLAB_08000e3c:\n  return result & 0x80000000 | 0x7f800000;\n}\n\n",
            "renaming": {
                "FUN_08000cec": "calculate_floating_point_08000cec",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "lVar1": "product",
                "uVar2": "result",
                "uVar3": "shiftValue1",
                "iVar4": "sum",
                "iVar5": "shiftValue2",
                "uVar6": "lowerBits",
                "iVar7": "exponent",
                "uVar8": "finalResult",
                "bVar9": "condition1",
                "bVar10": "condition2"
            },
            "calling": [
                "FUN_08002b48",
                "FUN_08003330",
                "FUN_08002d88",
                "FUN_08002bf0",
                "FUN_08004a30",
                "FUN_08004a84",
                "FUN_08002cb0",
                "FUN_08002ec0",
                "FUN_0800483c",
                "FUN_08002f28"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000e54": {
            "entrypoint": "0x08000e54",
            "current_name": "calculate_floating_point_value_08000e54",
            "code": "\nuint calculateFloatingPointValue_08000e54(uint input1,uint input2,undefined4 input3,uint input4)\n\n{\n  uint normalizedInput2;\n  uint normalizedInput1;\n  int difference;\n  uint exponent;\n  int sum;\n  uint result;\n  bool isZero;\n  bool isOverflow;\n  bool isCarry;\n  \n  normalizedInput1 = input1 >> 0x17 & 0xff;\n  isZero = normalizedInput1 == 0;\n  if (!isZero) {\n    input4 = input2 >> 0x17 & 0xff;\n    isZero = input4 == 0;\n  }\n  if (!isZero) {\n    isZero = normalizedInput1 == 0xff;\n  }\n  if (!isZero) {\n    isZero = input4 == 0xff;\n  }\n  if (isZero) {\n    input4 = input2 >> 0x17 & 0xff;\n    result = input1;\n    if (normalizedInput1 == 0xff) {\n      if (((input1 & 0x7fffff) != 0) || (result = input2, input4 == 0xff)) {\nLAB_08000e4a:\n        return result | 0x7fc00000;\n      }\n    }\n    else {\n      if (input4 == 0xff) {\n        result = input2;\n        if ((input2 & 0x7fffff) == 0) {\nLAB_08000e00:\n          return (input1 ^ input2) & 0x80000000;\n        }\n        goto LAB_08000e4a;\n      }\n      isZero = (input1 & 0x7fffffff) == 0;\n      if (!isZero) {\n        isZero = (input2 & 0x7fffffff) == 0;\n      }\n      if (!isZero) {\n        isZero = normalizedInput1 == 0;\n        result = input1 & 0x80000000;\n        while( true ) {\n          if (isZero) {\n            input1 = input1 << 1;\n            isZero = (input1 & 0x800000) == 0;\n          }\n          if (!isZero) break;\n          normalizedInput1 = normalizedInput1 - 1;\n        }\n        input1 = input1 | result;\n        isZero = input4 == 0;\n        result = input2 & 0x80000000;\n        while( true ) {\n          if (isZero) {\n            input2 = input2 << 1;\n            isZero = (input2 & 0x800000) == 0;\n          }\n          if (!isZero) break;\n          input4 = input4 - 1;\n        }\n        input2 = input2 | result;\n        goto LAB_08000e6c;\n      }\n      if ((input1 & 0x7fffffff) == 0) {\n        if ((input2 & 0x7fffffff) != 0) goto LAB_08000e00;\n        goto LAB_08000e4a;\n      }\n    }\n    input1 = input1 ^ input2;\n  }\n  else {\nLAB_08000e6c:\n    difference = normalizedInput1 - input4;\n    if (input2 << 9 == 0) {\n      input1 = (input1 ^ input2) & 0x80000000 | input1 & 0x7fffff;\n      isCarry = SCARRY4(difference,0x7f);\n      sum = difference + 0x7f;\n      isZero = sum < 0;\n      isOverflow = sum == 0;\n      if (!isOverflow && isZero == isCarry) {\n        isCarry = SBORROW4(0xff,sum);\n        isZero = 0xff - sum < 0;\n        isOverflow = sum == 0xff;\n      }\n      if (!isOverflow && isZero == isCarry) {\n        input1 = input1 | sum * 0x800000;\n      }\n      if (!isOverflow && isZero == isCarry) {\n        return input1;\n      }\n      input1 = input1 | 0x800000;\n      normalizedInput1 = 0;\n      isOverflow = SBORROW4(sum,1);\n      exponent = difference + 0x7e;\n      isZero = exponent == 0;\n      result = exponent;\n    }\n    else {\n      normalizedInput2 = (input2 << 9) >> 4 | 0x10000000;\n      normalizedInput1 = (input1 << 9) >> 4 | 0x10000000;\n      input1 = (input1 ^ input2) & 0x80000000;\n      isZero = normalizedInput2 <= normalizedInput1;\n      if (!isZero) {\n        normalizedInput1 = normalizedInput1 << 1;\n      }\n      exponent = difference + 0x7d + (uint)isZero;\n      result = 0x800000;\n      do {\n        if (normalizedInput2 <= normalizedInput1) {\n          normalizedInput1 = normalizedInput1 - normalizedInput2;\n          input1 = input1 | result;\n        }\n        isZero = normalizedInput2 >> 1 <= normalizedInput1;\n        if (isZero) {\n          normalizedInput1 = normalizedInput1 - (normalizedInput2 >> 1);\n        }\n        if (isZero) {\n          input1 = input1 | result >> 1;\n        }\n        isZero = normalizedInput2 >> 2 <= normalizedInput1;\n        if (isZero) {\n          normalizedInput1 = normalizedInput1 - (normalizedInput2 >> 2);\n        }\n        if (isZero) {\n          input1 = input1 | result >> 2;\n        }\n        isZero = normalizedInput2 >> 3 <= normalizedInput1;\n        if (isZero) {\n          normalizedInput1 = normalizedInput1 - (normalizedInput2 >> 3);\n        }\n        if (isZero) {\n          input1 = input1 | result >> 3;\n        }\n        normalizedInput1 = normalizedInput1 * 0x10;\n        isZero = normalizedInput1 == 0;\n        if (!isZero) {\n          result = result >> 4;\n          isZero = result == 0;\n        }\n      } while (!isZero);\n      isOverflow = SBORROW4(exponent,0xfd);\n      isZero = exponent == 0xfd;\n      result = exponent - 0xfd;\n      if (exponent < 0xfe) {\n        input1 = input1 + exponent * 0x800000 + (uint)(normalizedInput2 <= normalizedInput1);\n        if (normalizedInput1 - normalizedInput2 == 0) {\n          input1 = input1 & 0xfffffffe;\n        }\n        return input1;\n      }\n    }\n    if (isZero || (int)result < 0 != isOverflow) {\n      isZero = (int)(exponent + 0x19) < 0;\n      if (exponent == 0xffffffe7 || isZero != SCARRY4(exponent,0x19)) {\n        input1 = input1 & 0x80000000;\n      }\n      if (exponent == 0xffffffe7 || isZero != SCARRY4(exponent,0x19)) {\n        return input1;\n      }\n      result = (input1 << 1) >> (-exponent & 0xff);\n      exponent = input1 << (exponent + 0x20 & 0xff);\n      result = ((uint)((input1 & 0x80000000) != 0) << 0x1f | result >> 1) + (uint)((byte)result & 1);\n      if ((normalizedInput1 | exponent << 1) == 0) {\n        result = result & ~(exponent >> 0x1f);\n      }\n      return result;\n    }\n  }\n  return input1 & 0x80000000 | 0x7f800000;\n}\n\n",
            "renaming": {
                "FUN_08000e54": "calculate_floating_point_value_08000e54",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "normalizedInput2",
                "uVar2": "normalizedInput1",
                "iVar3": "difference",
                "uVar4": "exponent",
                "iVar5": "sum",
                "uVar6": "result",
                "bVar7": "isZero",
                "bVar8": "isOverflow",
                "bVar9": "isCarry"
            },
            "calling": [
                "FUN_08003330",
                "FUN_0800411c",
                "FUN_0800483c",
                "FUN_08002f28"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000f9c": {
            "entrypoint": "0x08000f9c",
            "current_name": "calculate_integer_result_08000f9c",
            "code": "\nuint calculate_integer_result_08000f9c(uint input_1,uint input_2)\n\n{\n  bool is_negative_result;\n  uint input_1_doubled;\n  uint input_2_doubled;\n  uint combined_input_with_sign;\n  bool is_result_zero;\n  \n  input_1_doubled = input_1 * 2;\n  input_2_doubled = input_2 * 2;\n  if (((int)input_1_doubled >> 0x18 == -1 || (int)input_2_doubled >> 0x18 == -1) &&\n     ((((int)input_1_doubled >> 0x18 == -1 && ((input_1 & 0x7fffff) != 0)) ||\n      (((int)input_2_doubled >> 0x18 == -1 && ((input_2 & 0x7fffff) != 0)))))) {\n    return 1;\n  }\n  combined_input_with_sign = input_1_doubled | input_2 & 0x7fffffff;\n  is_result_zero = combined_input_with_sign == 0;\n  if (!is_result_zero) {\n    combined_input_with_sign = input_1 ^ input_2;\n    is_result_zero = combined_input_with_sign == 0;\n  }\n  is_negative_result = -1 < (int)combined_input_with_sign;\n  if (is_negative_result) {\n    input_1 = input_1_doubled + input_2 * -2;\n    is_result_zero = input_1 == 0;\n  }\n  if ((is_negative_result && input_2_doubled <= input_1_doubled) && !is_result_zero) {\n    input_1 = (int)input_2 >> 0x1f;\n  }\n  if (!is_negative_result || input_2_doubled > input_1_doubled) {\n    input_1 = ~((int)input_2 >> 0x1f);\n  }\n  if (!is_result_zero) {\n    input_1 = input_1 | 1;\n  }\n  return input_1;\n}\n\n",
            "renaming": {
                "FUN_08000f9c": "calculate_integer_result_08000f9c",
                "param_1": "input_1",
                "param_2": "input_2",
                "bVar1": "is_negative_result",
                "uVar2": "input_1_doubled",
                "uVar3": "input_2_doubled",
                "uVar4": "combined_input_with_sign",
                "bVar5": "is_result_zero"
            },
            "calling": [
                "FUN_08001004"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000ffc": {
            "entrypoint": "0x08000ffc",
            "current_name": "concatenate_param_values_08000ffc",
            "code": "\nvoid concatenateParamValues_08000ffc(undefined4 destination,undefined4 source)\n\n{\n  concatenate_param_values_08001004(source,destination);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000ffc": "concatenate_param_values_08000ffc",
                "param_1": "destination",
                "param_2": "source"
            },
            "calling": [
                "FUN_08001050",
                "FUN_08001064"
            ],
            "called": [
                "FUN_08001004"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001004": {
            "entrypoint": "0x08001004",
            "current_name": "concatenate_param_values_08001004",
            "code": "\nundefined8 concatenateParamValues_08001004(undefined4 value1,undefined4 value2)\n\n{\n  calculate_integer_result_08000f9c();\n  return CONCAT44(value2,value1);\n}\n\n",
            "renaming": {
                "FUN_08001004": "concatenate_param_values_08001004",
                "param_1": "value1",
                "param_2": "value2"
            },
            "calling": [
                "FUN_08000ffc",
                "FUN_08001014",
                "FUN_08001028"
            ],
            "called": [
                "FUN_08000f9c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001014": {
            "entrypoint": "0x08001014",
            "current_name": "check_concatenated_param_values_08001014",
            "code": "\nbool checkConcatenatedParamValues_08001014(void)\n\n{\n  char isConcatenationNotEmpty;\n  \n  concatenate_param_values_08001004();\n  return isConcatenationNotEmpty != '\\0';\n}\n\n",
            "renaming": {
                "FUN_08001014": "check_concatenated_param_values_08001014",
                "in_ZR": "isConcatenationNotEmpty"
            },
            "calling": [
                "FUN_08003330"
            ],
            "called": [
                "FUN_08001004"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001028": {
            "entrypoint": "0x08001028",
            "current_name": "is_string_empty_08001028",
            "code": "\nbool isStringEmpty_08001028(void)\n\n{\n  char inputChar;\n  \n  concatenate_param_values_08001004();\n  return inputChar == '\\0';\n}\n\n",
            "renaming": {
                "FUN_08001028": "is_string_empty_08001028",
                "in_CY": "inputChar"
            },
            "calling": [
                "FUN_08004a84",
                "FUN_08002ee8",
                "FUN_0800483c"
            ],
            "called": [
                "FUN_08001004"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001050": {
            "entrypoint": "0x08001050",
            "current_name": "check_concatenation_result_08001050",
            "code": "\nbool check_concatenation_result_08001050(void)\n\n{\n  undefined is_zero_result;\n  undefined is_carry_set;\n  \n  concatenate_param_values_08000ffc();\n  return !(bool)is_carry_set || (bool)is_zero_result;\n}\n\n",
            "renaming": {
                "FUN_08001050": "check_concatenation_result_08001050",
                "in_ZR": "is_zero_result",
                "in_CY": "is_carry_set"
            },
            "calling": [
                "FUN_08002ee8"
            ],
            "called": [
                "FUN_08000ffc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001064": {
            "entrypoint": "0x08001064",
            "current_name": "check_if_concatenated_params_are_empty_08001064",
            "code": "\nbool checkIfConcatenatedParamsAreEmpty_08001064(void)\n\n{\n  char inputChar;\n  \n  concatenate_param_values_08000ffc();\n  return inputChar == '\\0';\n}\n\n",
            "renaming": {
                "FUN_08001064": "check_if_concatenated_params_are_empty_08001064",
                "in_CY": "inputChar"
            },
            "calling": [
                "FUN_08004a84",
                "FUN_0800483c"
            ],
            "called": [
                "FUN_08000ffc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001078": {
            "entrypoint": "0x08001078",
            "current_name": "extract_integer_bits_08001078",
            "code": "\nuint extract_integer_bits_08001078(uint input_number)\n\n{\n  uint shifted_number;\n  uint difference;\n  \n  if (input_number << 1 < 0x7f000000) {\n    return 0;\n  }\n  shifted_number = (input_number << 1) >> 0x18;\n  difference = 0x9e - shifted_number;\n  if (shifted_number < 0x9f && difference != 0) {\n    shifted_number = (input_number << 8 | 0x80000000) >> (difference & 0xff);\n    if ((input_number & 0x80000000) != 0) {\n      shifted_number = -shifted_number;\n    }\n    return shifted_number;\n  }\n  if ((difference == 0xffffff9f) && ((input_number & 0x7fffff) != 0)) {\n    return 0;\n  }\n  input_number = input_number & 0x80000000;\n  if (input_number == 0) {\n    input_number = 0x7fffffff;\n  }\n  return input_number;\n}\n\n",
            "renaming": {
                "FUN_08001078": "extract_integer_bits_08001078",
                "param_1": "input_number",
                "uVar1": "shifted_number",
                "uVar2": "difference"
            },
            "calling": [
                "FUN_0800426c",
                "FUN_0800411c",
                "FUN_08002f28"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080010c4": {
            "entrypoint": "0x080010c4",
            "current_name": "check_number_080010c4",
            "code": "\nuint checkNumber_080010c4(uint inputNumber)\n\n{\n  uint shiftAmount;\n  \n  if (((inputNumber & 0x80000000) != 0) || (inputNumber << 1 < 0x7f000000)) {\n    return 0;\n  }\n  shiftAmount = 0x9e - ((inputNumber << 1) >> 0x18);\n  if (-1 < (int)shiftAmount) {\n    return (inputNumber << 8 | 0x80000000) >> (shiftAmount & 0xff);\n  }\n  if ((shiftAmount == 0xffffff9f) && ((inputNumber & 0x7fffff) != 0)) {\n    return 0;\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_080010c4": "check_number_080010c4",
                "param_1": "inputNumber",
                "uVar1": "shiftAmount"
            },
            "calling": [
                "FUN_08004a84"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001104": {
            "entrypoint": "0x08001104",
            "current_name": "initialize_data_08001104",
            "code": "\nundefined4 initializeData_08001104(undefined4 data)\n\n{\n  uint dataValue;\n  \n  dataValue = get_data_08002214();\n  validate_param_and_initialize_08001214(dataValue / 1000);\n  update_and_store_data_08001194(0xffffffff,data,0);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001104": "initialize_data_08001104",
                "param_1": "data",
                "uVar1": "dataValue"
            },
            "calling": [
                "FUN_08001128",
                "FUN_0800209c"
            ],
            "called": [
                "FUN_08001194",
                "FUN_08002214",
                "FUN_08001214"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001128": {
            "entrypoint": "0x08001128",
            "current_name": "initialize_system_08001128",
            "code": "\n\n\nundefined4 initialize_system_08001128(void)\n\n{\n  _DAT_40022000 = _DAT_40022000 | 0x10;\n  configure_memory(3);\n  initialize_data(0);\n  initialize_memory();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001128": "initialize_system_08001128",
                "configure_memory_08001170": "configure_memory",
                "initialize_data_08001104": "initialize_data",
                "initialize_memory_08004ccc": "initialize_memory"
            },
            "calling": [
                "FUN_0800458c"
            ],
            "called": [
                "FUN_08001104",
                "FUN_08001170",
                "FUN_08004ccc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800114c": {
            "entrypoint": "0x0800114c",
            "current_name": "increment_data_counter_0800114c",
            "code": "\nvoid incrementDataCounter_0800114c(void)\n\n{\n  DAT_20000244 = DAT_20000244 + 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800114c": "increment_data_counter_0800114c"
            },
            "calling": [
                "FUN_080041ae"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800115c": {
            "entrypoint": "0x0800115c",
            "current_name": "get_data_value_0800115c",
            "code": "\nundefined4 get_data_value_0800115c(void)\n\n{\n  return DAT_20000244;\n}\n\n",
            "renaming": {
                "FUN_0800115c": "get_data_value_0800115c"
            },
            "calling": [
                "FUN_080016f4",
                "thunk_FUN_0800115c",
                "FUN_08001b58",
                "FUN_08001938",
                "FUN_0800209c",
                "FUN_08001460",
                "FUN_080015e8",
                "FUN_08001530",
                "thunk_FUN_0800115c",
                "FUN_08001828",
                "FUN_080014e2",
                "FUN_08004c18"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001168": {
            "entrypoint": "0x08001168",
            "current_name": "FUNC_08001168",
            "code": "\nvoid FUNC_08001168(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001168": "FUNC_08001168"
            },
            "calling": [
                "FUN_08001b58",
                "thunk_FUN_08001168"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08001170": {
            "entrypoint": "0x08001170",
            "current_name": "configure_memory_08001170",
            "code": "\n\n\nvoid configureMemory_08001170(uint value)\n\n{\n  _DAT_e000ed0c = _DAT_e000ed0c & 0xf8ff | 0x5fa0000 | (value & 7) << 8;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001170": "configure_memory_08001170",
                "param_1": "value"
            },
            "calling": [
                "FUN_08001128",
                "FUN_08004ccc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001194": {
            "entrypoint": "0x08001194",
            "current_name": "update_and_store_data_08001194",
            "code": "\n\n\nvoid updateAndStoreData_08001194(uint input1,uint input2,uint input3)\n\n{\n  undefined shiftedData;\n  uint shiftAmount;\n  uint shiftedAmount;\n  uint adjustedAmount;\n  \n  shiftedAmount = (uint)(_DAT_e000ed0c << 0x15) >> 0x1d;\n  shiftAmount = 7 - shiftedAmount;\n  adjustedAmount = shiftedAmount + 4;\n  if (3 < shiftAmount) {\n    shiftAmount = 4;\n  }\n  if (adjustedAmount < 7) {\n    shiftedAmount = 0;\n  }\n  shiftAmount = (1 << (shiftAmount & 0xff)) - 1;\n  if (6 < adjustedAmount) {\n    shiftedAmount = shiftedAmount - 3;\n  }\n  shiftedData = (undefined)\n          ((input3 & (1 << (shiftedAmount & 0xff)) - 1U | (input2 & shiftAmount) << (shiftedAmount & 0xff)) << 4);\n  if (-1 < (int)input1) {\n    shiftedAmount = input1 + 0xe000e100;\n  }\n  else {\n    shiftAmount = 0xe000ed14;\n    shiftedAmount = input1 & 0xf;\n  }\n  if (-1 < (int)input1) {\n    *(undefined *)(shiftedAmount + 0x300) = shiftedData;\n  }\n  else {\n    *(undefined *)(shiftAmount + shiftedAmount) = shiftedData;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001194": "update_and_store_data_08001194",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "uVar1": "shiftedData",
                "uVar2": "shiftAmount",
                "uVar3": "shiftedAmount",
                "uVar4": "adjustedAmount"
            },
            "calling": [
                "FUN_08001104",
                "FUN_08004e7c",
                "FUN_08004ccc",
                "FUN_08004514"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080011fc": {
            "entrypoint": "0x080011fc",
            "current_name": "set_bit_in_array_080011fc",
            "code": "\nvoid setBitInArray_080011fc(uint bitIndex)\n\n{\n  *(int *)((bitIndex >> 5) * 4 + -0x1fff1f00) = 1 << (bitIndex & 0x1f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080011fc": "set_bit_in_array_080011fc",
                "param_1": "bitIndex"
            },
            "calling": [
                "FUN_08004e7c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001214": {
            "entrypoint": "0x08001214",
            "current_name": "validate_param_and_initialize_08001214",
            "code": "\n\n\nundefined4 validate_param_and_initialize_08001214(int input_value)\n\n{\n  if (input_value - 1U < 0x1000000) {\n    _DAT_e000e014 = input_value - 1U;\n    DAT_e000ed23 = 0xf0;\n    _DAT_e000e018 = 0;\n    _DAT_e000e010 = 7;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08001214": "validate_param_and_initialize_08001214",
                "param_1": "input_value"
            },
            "calling": [
                "FUN_08001104",
                "FUN_08004514"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001240": {
            "entrypoint": "0x08001240",
            "current_name": "set_bit_value_08001240",
            "code": "\n\n\nvoid setBitValue_08001240(int bitPosition)\n\n{\n  if (bitPosition == 4) {\n    _DAT_e000e010 = _DAT_e000e010 | 4;\n  }\n  else {\n    _DAT_e000e010 = _DAT_e000e010 & 0xfffffffb;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001240": "set_bit_value_08001240",
                "param_1": "bitPosition"
            },
            "calling": [
                "FUN_08004514"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001258": {
            "entrypoint": "0x08001258",
            "current_name": "FUNC_08001258",
            "code": "\nvoid FUNC_08001258(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001258": "FUNC_08001258"
            },
            "calling": [],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08001264": {
            "entrypoint": "0x08001264",
            "current_name": "update_flags_08001264",
            "code": "\n\n\nvoid updateFlags_08001264(uint *flags,uint *data)\n\n{\n  uint flagMask;\n  uint dataMask;\n  uint dataType;\n  int index;\n  uint bitIndex;\n  uint bitMask;\n  uint typeCheck;\n  uint *ptr;\n  int typeIndex;\n  \n  flagMask = 0;\n  bitIndex = 0;\n  do {\n    bitMask = 1 << (bitIndex & 0xff);\n    dataMask = bitMask & *data;\n    if (bitMask == dataMask) {\n      dataType = data[1];\n      if (dataType == 0x12) {\n        flagMask = data[3] + 0xc;\n      }\n      else if (dataType < 0x13) {\n        if (dataType == 2) {\n          flagMask = data[3] + 8;\n        }\n        else if (dataType < 3) {\n          if (dataType == 0) goto LAB_080013be;\n          if (dataType == 1) {\n            flagMask = data[3];\n          }\n        }\n        else if (dataType == 3) {\n          flagMask = 0;\n        }\n        else if (dataType == 0x11) {\n          flagMask = data[3] + 4;\n        }\n      }\n      else {\n        if (dataType != 0x10210000) {\n          if (dataType < 0x10210001) {\n            if (dataType != 0x10110000) {\n              typeCheck = 0x10120000;\nLAB_080013b8:\n              if (dataType != typeCheck) goto LAB_080012a8;\n            }\n          }\n          else if ((dataType != 0x10310000) && (dataType != 0x10320000)) {\n            typeCheck = 0x10220000;\n            goto LAB_080013b8;\n          }\n        }\nLAB_080013be:\n        flagMask = data[2];\n        if (flagMask == 0) {\n          flagMask = 4;\n        }\n        else {\n          if (flagMask == 1) {\n            flags[4] = bitMask;\n          }\n          if (flagMask != 1) {\n            flags[5] = bitMask;\n          }\n          flagMask = 8;\n        }\n      }\nLAB_080012a8:\n      if (dataMask < 0x100) {\n        bitMask = *flags;\n        dataType = bitIndex << 2;\n        ptr = flags;\n      }\n      else {\n        bitMask = flags[1];\n        dataType = (bitIndex + 0x3ffffff8) * 4;\n      }\n      if (0xff < dataMask) {\n        ptr = flags + 1;\n      }\n      *ptr = bitMask & ~(0xf << (dataType & 0xff)) | flagMask << (dataType & 0xff);\n      ptr = (uint *)data[1];\n      if (((uint)ptr & 0x10000000) != 0) {\n        _DAT_40021018 = _DAT_40021018 | 1;\n        typeIndex = (bitIndex & 3) << 2;\n        if (flags == (uint *)0x40010800) {\n          index = 0;\n        }\n        else if (flags == (uint *)0x40010c00) {\n          index = 1;\n        }\n        else if (flags == (uint *)0x40011000) {\n          index = 2;\n        }\n        else if (flags == (uint *)0x40011400) {\n          index = 3;\n        }\n        else {\n          index = 4;\n        }\n        *(uint *)((bitIndex & 0xfffffffc) + 0x40010008) =\n             index << typeIndex | *(uint *)((bitIndex & 0xfffffffc) + 0x40010008) & ~(0xf << typeIndex);\n        if (((uint)ptr & 0x10000) == 0) {\n          _DAT_40010400 = _DAT_40010400 & ~dataMask;\n        }\n        else {\n          _DAT_40010400 = _DAT_40010400 | dataMask;\n        }\n        if (((uint)ptr & 0x20000) == 0) {\n          _DAT_40010404 = _DAT_40010404 & ~dataMask;\n        }\n        else {\n          _DAT_40010404 = _DAT_40010404 | dataMask;\n        }\n        if (((uint)ptr & 0x100000) == 0) {\n          _DAT_40010408 = _DAT_40010408 & ~dataMask;\n        }\n        else {\n          _DAT_40010408 = _DAT_40010408 | dataMask;\n        }\n        if (((uint)ptr & 0x200000) == 0) {\n          _DAT_4001040c = _DAT_4001040c & ~dataMask;\n        }\n        else {\n          _DAT_4001040c = dataMask | _DAT_4001040c;\n        }\n      }\n    }\n    bitIndex = bitIndex + 1;\n    if (bitIndex == 0x10) {\n      return;\n    }\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08001264": "update_flags_08001264",
                "param_1": "flags",
                "param_2": "data",
                "uVar1": "flagMask",
                "uVar2": "dataMask",
                "uVar3": "dataType",
                "iVar4": "index",
                "uVar5": "bitIndex",
                "uVar6": "bitMask",
                "uVar7": "typeCheck",
                "unaff_r10": "ptr",
                "iVar8": "typeIndex"
            },
            "calling": [
                "FUN_08004e7c",
                "FUN_08004d48",
                "FUN_08004e14",
                "FUN_0800458c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001424": {
            "entrypoint": "0x08001424",
            "current_name": "set_param2_08001424",
            "code": "\nvoid setParam2_08001424(int target,int value,int flag)\n\n{\n  if (flag == 0) {\n    value = value << 0x10;\n  }\n  *(int *)(target + 0x10) = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001424": "set_param2_08001424",
                "param_1": "target",
                "param_2": "value",
                "param_3": "flag"
            },
            "calling": [
                "FUN_08004490",
                "FUN_08003f3c",
                "FUN_0800458c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800142e": {
            "entrypoint": "0x0800142e",
            "current_name": "xor_and_update_0800142e",
            "code": "\nvoid xorAndUpdate_0800142e(int inputPointer,uint value)\n\n{\n  *(uint *)(inputPointer + 0xc) = value ^ *(uint *)(inputPointer + 0xc);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800142e": "xor_and_update_0800142e",
                "param_1": "inputPointer",
                "param_2": "value"
            },
            "calling": [
                "FUN_08004490"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001436": {
            "entrypoint": "0x08001436",
            "current_name": "check_flag_status_08001436",
            "code": "\nundefined4 checkFlagStatus_08001436(int *flagPtr)\n\n{\n  int flagValue;\n  \n  flagValue = *flagPtr;\n  if ((*(uint *)(flagValue + 0x14) & 0x400) != 0) {\n    *(uint *)(flagValue + 0x14) = *(uint *)(flagValue + 0x14) & 0xfffffbff;\n    statusVar = 4;\n    *(undefined *)((int)flagPtr + 0x35) = 0x20;\n    *(undefined *)(flagPtr + 0xd) = 0;\n    return 1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001436": "check_flag_status_08001436",
                "param_1": "flagPtr",
                "iVar1": "flagValue",
                "param_1[0xe]": "statusVar"
            },
            "calling": [
                "FUN_080014e2"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001460": {
            "entrypoint": "0x08001460",
            "current_name": "validate_input_08001460",
            "code": "\nundefined4 validate_input_08001460(uint **input_data,uint flag,uint timeout)\n\n{\n  int data_value_1;\n  int data_value_2;\n  uint data_value_3;\n  uint *ptr_data;\n  \n  data_value_1 = get_data_value_0800115c();\n  do {\n    ptr_data = *input_data;\n    if ((flag << 8) >> 0x18 == 1) {\n      data_value_3 = ptr_data[5];\n    }\n    else {\n      data_value_3 = ptr_data[6];\n    }\n    if ((flag & 0xffff & ~data_value_3) == 0) {\n      return 0;\n    }\n    if ((int)(ptr_data[5] << 0x15) < 0) {\n      *ptr_data = *ptr_data | 0x200;\n      ptr_data[5] = ptr_data[5] & 0xfffffbff;\n      output_ptr = (uint *)0x4;\n      *(undefined *)((int)input_data + 0x35) = 0x20;\n      *(undefined *)(input_data + 0xd) = 0;\n      return 1;\n    }\n  } while ((timeout == 0xffffffff) ||\n          ((timeout != 0 && (data_value_2 = get_data_value_0800115c(), (uint)(data_value_2 - data_value_1) <= timeout))));\n  *(undefined *)((int)input_data + 0x35) = 0x20;\n  *(undefined *)(input_data + 0xd) = 0;\n  return 3;\n}\n\n",
            "renaming": {
                "FUN_08001460": "validate_input_08001460",
                "param_1": "input_data",
                "param_2": "flag",
                "param_3": "timeout",
                "iVar1": "data_value_1",
                "iVar2": "data_value_2",
                "uVar3": "data_value_3",
                "puVar4": "ptr_data",
                "param_1[0xe]": "output_ptr"
            },
            "calling": [
                "FUN_080015e8",
                "FUN_08001530"
            ],
            "called": [
                "FUN_0800115c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080014e2": {
            "entrypoint": "0x080014e2",
            "current_name": "check_data_and_update_status_080014e2",
            "code": "\nundefined4 check_data_and_update_status_080014e2(int *data_ptr,uint flag_value)\n\n{\n  int initial_data_value;\n  int flag_status;\n  \n  initial_data_value = get_data_value_0800115c();\n  while( true ) {\n    if (*(int *)(*data_ptr + 0x14) << 0x18 < 0) {\n      return 0;\n    }\n    flag_status = check_flag_status_08001436(data_ptr);\n    if (flag_status != 0) break;\n    if ((flag_value != 0xffffffff) &&\n       ((flag_value == 0 || (flag_status = get_data_value_0800115c(), flag_value < (uint)(flag_status - initial_data_value))))) {\n      data_ptr[0xe] = data_ptr[0xe] | 0x20;\n      *(undefined *)((int)data_ptr + 0x35) = 0x20;\n      *(undefined *)(data_ptr + 0xd) = 0;\n      return 3;\n    }\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_080014e2": "check_data_and_update_status_080014e2",
                "param_1": "data_ptr",
                "param_2": "flag_value",
                "iVar1": "initial_data_value",
                "iVar2": "flag_status"
            },
            "calling": [
                "FUN_080015e8",
                "FUN_08001530",
                "FUN_08001828"
            ],
            "called": [
                "FUN_0800115c",
                "FUN_08001436"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001530": {
            "entrypoint": "0x08001530",
            "current_name": "update_status_and_validate_input_08001530",
            "code": "\nundefined4 updateStatusAndValidateInput_08001530(uint **dataPtr,uint value1,uint value2,int flag,uint status)\n\n{\n  int dataValue1;\n  int dataValue2;\n  uint *ptr;\n  uint **ptrPtr;\n  uint value1Copy;\n  uint value2Copy;\n  \n  **dataPtr = **dataPtr | 0x100;\n  ptrPtr = dataPtr;\n  value1Copy = value1;\n  value2Copy = value2;\n  dataValue1 = get_data_value_0800115c();\n  do {\n    ptr = *dataPtr;\n    do {\n      if ((int)(ptr[5] << 0x1f) < 0) {\n        ptr[4] = value1 & 0xfe;\n        dataValue1 = validate_input_08001460(dataPtr,0x10002,status,ptr,ptrPtr,value1Copy,value2Copy);\n        if (dataValue1 == 0) {\n          dataValue1 = check_data_and_update_status_080014e2(dataPtr,status,(*dataPtr)[5],(*dataPtr)[6]);\n          if (dataValue1 == 0) {\n            ptr = *dataPtr;\n            if (flag == 1) {\nLAB_080015ca:\n              ptr[4] = value2 & 0xff;\n              return 0;\n            }\n            ptr[4] = value2 >> 8;\n            dataValue1 = check_data_and_update_status_080014e2(dataPtr,status);\n            if (dataValue1 == 0) {\n              ptr = *dataPtr;\n              goto LAB_080015ca;\n            }\n          }\n          if (dataPtr[0xe] != (uint *)0x4) {\n            return 3;\n          }\n          **dataPtr = **dataPtr | 0x200;\n        }\n        else if (dataPtr[0xe] != (uint *)0x4) {\n          return 3;\n        }\n        return 1;\n      }\n    } while (status == 0xffffffff);\n    if ((status == 0) || (dataValue2 = get_data_value_0800115c(), status < (uint)(dataValue2 - dataValue1))) {\n      *(undefined *)((int)dataPtr + 0x35) = 0x20;\n      *(undefined *)(dataPtr + 0xd) = 0;\n      return 3;\n    }\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08001530": "update_status_and_validate_input_08001530",
                "param_1": "dataPtr",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "flag",
                "param_5": "status",
                "iVar1": "dataValue1",
                "iVar2": "dataValue2",
                "puVar3": "ptr",
                "ppuVar4": "ptrPtr",
                "uVar5": "value1Copy",
                "uVar6": "value2Copy"
            },
            "calling": [
                "FUN_08001828"
            ],
            "called": [
                "FUN_0800115c",
                "FUN_08001460",
                "FUN_080014e2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080015e8": {
            "entrypoint": "0x080015e8",
            "current_name": "update_status_080015e8",
            "code": "\nundefined4 updateStatus_080015e8(uint **data_ptr,uint value_1,uint value_2,int flag,uint limit)\n\n{\n  int data_value;\n  int updated_data_value;\n  uint *current_data_ptr;\n  uint **data_ptr_ptr;\n  uint temp_value_1;\n  uint temp_value_2;\n  \n  current_data_ptr = *data_ptr;\n  *current_data_ptr = *current_data_ptr | 0x400;\n  *current_data_ptr = *current_data_ptr | 0x100;\n  data_ptr_ptr = data_ptr;\n  temp_value_1 = value_1;\n  temp_value_2 = value_2;\n  data_value = get_data_value_0800115c();\nLAB_0800160e:\n  current_data_ptr = *data_ptr;\n  while (-1 < (int)(current_data_ptr[5] << 0x1f)) {\n    if (limit != 0xffffffff) goto code_r0x08001658;\n  }\n  current_data_ptr[4] = value_1 & 0xfe;\n  data_value = validate_input_08001460(data_ptr,0x10002,limit,current_data_ptr,data_ptr_ptr,temp_value_1,temp_value_2);\n  if (data_value != 0) goto LAB_080016ba;\n  data_value = check_data_and_update_status_080014e2(data_ptr,limit,(*data_ptr)[5],(*data_ptr)[6]);\n  if (data_value == 0) {\n    current_data_ptr = *data_ptr;\n    if (flag != 1) {\n      current_data_ptr[4] = value_2 >> 8;\n      data_value = check_data_and_update_status_080014e2(data_ptr,limit);\n      if (data_value != 0) goto LAB_08001642;\n      current_data_ptr = *data_ptr;\n    }\n    current_data_ptr[4] = value_2 & 0xff;\n    data_value = check_data_and_update_status_080014e2(data_ptr,limit);\n    if (data_value == 0) {\n      **data_ptr = **data_ptr | 0x100;\n      data_value = get_data_value_0800115c();\n      do {\n        do {\n          if ((int)((*data_ptr)[5] << 0x1f) < 0) {\n            (*data_ptr)[4] = value_1 & 0xff | 1;\n            data_value = validate_input_08001460(data_ptr,0x10002,limit);\n            if (data_value == 0) {\n              return 0;\n            }\nLAB_080016ba:\n            if (data_ptr[0xe] != (uint *)0x4) {\n              return 3;\n            }\n            return 1;\n          }\n        } while (limit == 0xffffffff);\n      } while ((limit != 0) && (updated_data_value = get_data_value_0800115c(), (uint)(updated_data_value - data_value) <= limit));\nLAB_0800165a:\n      *(undefined *)((int)data_ptr + 0x35) = 0x20;\n      *(undefined *)(data_ptr + 0xd) = 0;\n      return 3;\n    }\n  }\nLAB_08001642:\n  if (data_ptr[0xe] == (uint *)0x4) {\n    **data_ptr = **data_ptr | 0x200;\n    return 1;\n  }\n  return 3;\ncode_r0x08001658:\n  if ((limit == 0) || (updated_data_value = get_data_value_0800115c(), limit < (uint)(updated_data_value - data_value)))\n  goto LAB_0800165a;\n  goto LAB_0800160e;\n}\n\n",
            "renaming": {
                "FUN_080015e8": "update_status_080015e8",
                "param_1": "data_ptr",
                "param_2": "value_1",
                "param_3": "value_2",
                "param_4": "flag",
                "param_5": "limit",
                "iVar1": "data_value",
                "iVar2": "updated_data_value",
                "puVar3": "current_data_ptr",
                "ppuVar4": "data_ptr_ptr",
                "uVar5": "temp_value_1",
                "uVar6": "temp_value_2"
            },
            "calling": [
                "FUN_08001938"
            ],
            "called": [
                "FUN_0800115c",
                "FUN_08001460",
                "FUN_080014e2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080016f4": {
            "entrypoint": "0x080016f4",
            "current_name": "process_data_080016f4",
            "code": "\nundefined4 processData_080016f4(int *dataArray,uint dataSize)\n\n{\n  int initialValue;\n  int currentValue;\n  \n  initialValue = get_data_value_0800115c();\n  while( true ) {\n    currentValue = *dataArray;\n    if ((*(uint *)(currentValue + 0x14) & 0x40) != 0) {\n      return 0;\n    }\n    if (*(int *)(currentValue + 0x14) << 0x1b < 0) break;\n    if ((dataSize == 0) || (currentValue = get_data_value_0800115c(), dataSize < (uint)(currentValue - initialValue))) {\n      dataArray[0xe] = dataArray[0xe] | 0x20;\n      *(undefined *)((int)dataArray + 0x35) = 0x20;\n      *(undefined *)(dataArray + 0xd) = 0;\n      return 3;\n    }\n  }\n  *(uint *)(currentValue + 0x14) = *(uint *)(currentValue + 0x14) & 0xffffffef;\n  dataArray[0xe] = 0;\n  *(undefined *)(dataArray + 0xd) = 0;\n  *(undefined *)((int)dataArray + 0x35) = 0x20;\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_080016f4": "process_data_080016f4",
                "param_1": "dataArray",
                "param_2": "dataSize",
                "iVar1": "initialValue",
                "iVar2": "currentValue"
            },
            "calling": [
                "FUN_08001938"
            ],
            "called": [
                "FUN_0800115c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001754": {
            "entrypoint": "0x08001754",
            "current_name": "update_memory_and_flags_08001754",
            "code": "\nundefined4 updateMemoryAndFlags_08001754(uint **ptrToPtr)\n\n{\n  uint var1;\n  uint var2;\n  uint *ptr3;\n  uint *ptr4;\n  uint *ptr5;\n  uint var6;\n  undefined8 var7;\n  \n  if (ptrToPtr != (uint **)0x0) {\n    if (*(char *)((int)ptrToPtr + 0x35) == '\\0') {\n      *(undefined *)(ptrToPtr + 0xd) = 0;\n      update_memory_and_flags_08004d48();\n    }\n    *(undefined *)((int)ptrToPtr + 0x35) = 0x24;\n    **ptrToPtr = **ptrToPtr & 0xfffffffe;\n    var7 = get_shifted_value_08002220();\n    var2 = (uint)((ulonglong)var7 >> 0x20);\n    var1 = (uint)var7;\n    ptr4 = ptrToPtr[1];\n    var6 = var1 / 1000000;\n    if ((uint *)0x186a0 < ptr4) {\n      var2 = 300;\n    }\n    ptr3 = *ptrToPtr;\n    if ((uint *)0x186a0 < ptr4) {\n      var2 = var6 * var2;\n    }\n    ptr3[1] = var6;\n    if ((uint *)0x186a0 < ptr4) {\n      var6 = var2 / 1000;\n    }\n    ptr3[8] = var6 + 1;\n    if (ptr4 < (uint *)0x186a1) {\n      var1 = var1 / (uint)((int)ptr4 << 1);\n      if ((var1 & 0xfff) < 4) {\n        var1 = 4;\n      }\n    }\n    else {\n      if (ptrToPtr[2] == (uint *)0x0) {\n        var1 = var1 / (uint)((int)ptr4 * 3) | 0x8000;\n      }\n      else {\n        var1 = var1 / (uint)((int)ptr4 * 0x19) | 0xc000;\n      }\n      if ((var1 & 0xfff) == 0) {\n        var1 = 1;\n      }\n    }\n    ptr4 = ptrToPtr[8];\n    ptr5 = ptrToPtr[7];\n    ptr3[7] = var1;\n    *ptr3 = (uint)ptr5 | (uint)ptr4;\n    ptr3[2] = (uint)ptrToPtr[4] | (uint)ptrToPtr[3];\n    ptr3[3] = (uint)ptrToPtr[5] | (uint)ptrToPtr[6];\n    *ptr3 = *ptr3 | 1;\n    ptrToPtr[0xe] = (uint *)0x0;\n    *(undefined *)((int)ptrToPtr + 0x35) = 0x20;\n    *(undefined *)((int)ptrToPtr + 0x36) = 0;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08001754": "update_memory_and_flags_08001754",
                "param_1": "ptrToPtr",
                "uVar1": "var1",
                "uVar2": "var2",
                "puVar3": "ptr3",
                "puVar4": "ptr4",
                "puVar5": "ptr5",
                "uVar6": "var6",
                "uVar7": "var7"
            },
            "calling": [
                "FUN_0800458c"
            ],
            "called": [
                "FUN_08004d48",
                "FUN_08002220"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001828": {
            "entrypoint": "0x08001828",
            "current_name": "validate_input_08001828",
            "code": "\nundefined4\nvalidate_input_08001828(uint **data_ptr,undefined4 param_2,undefined4 param_3,undefined4 param_4,byte *input_data,\n            short input_data_length,undefined4 param_7)\n\n{\n  int data_value_1;\n  int data_value_2;\n  uint *data_ptr_value;\n  uint temp_value;\n  \n  if (*(char *)((int)data_ptr + 0x35) == ' ') {\n    if (input_data == (byte *)0x0) {\n      return 1;\n    }\n    if (input_data_length == 0) {\n      return 1;\n    }\n    data_value_1 = get_data_value_0800115c();\n    do {\n      data_ptr_value = *data_ptr;\n      if ((~data_ptr_value[6] & 2) != 0) {\n        if (*(char *)(data_ptr + 0xd) == '\\x01') {\n          return 2;\n        }\n        temp_value = *data_ptr_value;\n        *(undefined *)(data_ptr + 0xd) = 1;\n        *data_ptr_value = temp_value & 0xfffff7ff;\n        *(undefined *)((int)data_ptr + 0x35) = 0x21;\n        *(undefined *)((int)data_ptr + 0x36) = 0x40;\n        data_ptr[0xe] = (uint *)0x0;\n        data_value_1 = update_status_and_validate_input_08001828_08001530(data_ptr,param_2,param_3,param_4,param_7);\n        if (data_value_1 != 0) {\n          *(undefined *)(data_ptr + 0xd) = 0;\n          if (data_ptr[0xe] == (uint *)0x4) {\n            return 1;\n          }\n          return 3;\n        }\n        goto LAB_080018e2;\n      }\n      data_value_2 = get_data_value_0800115c();\n    } while ((uint)(data_value_2 - data_value_1) < 0x2711);\n    *(undefined *)(data_ptr + 0xd) = 0;\n    *(undefined *)((int)data_ptr + 0x35) = 0x20;\n  }\n  return 2;\n  while (input_data_length != 0) {\nLAB_080018e2:\n    data_value_1 = check_data_and_update_status_080014e2(data_ptr,param_7);\n    if (data_value_1 != 0) goto LAB_080018ee;\n    data_ptr_value = *data_ptr;\n    data_ptr_value[4] = (uint)*input_data;\n    if ((int)(data_ptr_value[5] << 0x1d) < 0) {\n      if ((short)(input_data_length + -1) == 0) break;\n      input_data_length = input_data_length + -2;\n      data_ptr_value[4] = (uint)input_data[1];\n      input_data = input_data + 2;\n    }\n    else {\n      input_data = input_data + 1;\n      input_data_length = input_data_length + -1;\n    }\n  }\n  data_value_1 = check_data_and_update_status_080014e2(data_ptr,param_7);\n  if (data_value_1 == 0) {\n    **data_ptr = **data_ptr | 0x200;\n    *(undefined *)(data_ptr + 0xd) = 0;\n    *(undefined *)((int)data_ptr + 0x35) = 0x20;\n    *(undefined *)((int)data_ptr + 0x36) = 0;\n    return 0;\n  }\nLAB_080018ee:\n  if (data_ptr[0xe] == (uint *)0x4) {\n    **data_ptr = **data_ptr | 0x200;\n    return 1;\n  }\n  return 3;\n}\n\n",
            "renaming": {
                "FUN_08001828": "validate_input_08001828",
                "param_1": "data_ptr",
                "param_5": "input_data",
                "param_6": "input_data_length",
                "iVar1": "data_value_1",
                "iVar2": "data_value_2",
                "puVar3": "data_ptr_value",
                "uVar4": "temp_value"
            },
            "calling": [
                "FUN_0800403c"
            ],
            "called": [
                "FUN_0800115c",
                "FUN_08001530",
                "FUN_080014e2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001938": {
            "entrypoint": "0x08001938",
            "current_name": "process_data_08001938",
            "code": "\nundefined4\nprocessData_08001938(uint **data,undefined4 param2,undefined4 param3,undefined4 param4,\n            undefined *output,ushort size,uint timeout)\n\n{\n  undefined *ptr1;\n  int value1;\n  int value2;\n  uint *ptr2;\n  uint value3;\n  undefined *ptr3;\n  bool check;\n  \n  if (*(char *)((int)data + 0x35) != ' ') {\n    return 2;\n  }\n  if (output == (undefined *)0x0) {\n    return 1;\n  }\n  if (size == 0) {\n    return 1;\n  }\n  value1 = getDataValue();\n  while (ptr2 = *data, (~ptr2[6] & 2) == 0) {\n    value2 = getDataValue();\n    if (10000 < (uint)(value2 - value1)) {\n      *(undefined *)(data + 0xd) = 0;\n      *(undefined *)((int)data + 0x35) = 0x20;\n      return 2;\n    }\n  }\n  if (*(char *)(data + 0xd) == '\\x01') {\n    return 2;\n  }\n  value3 = *ptr2;\n  *(undefined *)(data + 0xd) = 1;\n  *ptr2 = value3 & 0xfffff7ff;\n  *(undefined *)((int)data + 0x35) = 0x22;\n  *(undefined *)((int)data + 0x36) = 0x40;\n  data[0xe] = (uint *)0x0;\n  value1 = updateStatus(data,param2,param3,param4,timeout);\n  if (value1 != 0) {\n    *(undefined *)(data + 0xd) = 0;\n    if (data[0xe] == (uint *)0x4) {\n      return 1;\n    }\n    return 3;\n  }\n  ptr2 = *data;\n  value3 = *ptr2;\n  if (size == 1) {\n    *ptr2 = value3 & 0xfffffbff;\n    disableIRQ();\n    **data = **data | 0x200;\n    enableIRQ();\n    value1 = processData_080019382(data,timeout);\n    if (value1 == 0) {\n      *output = (char)(*data)[4];\nLAB_08001ab8:\n      *(undefined *)((int)data + 0x35) = 0x20;\n      *(undefined *)((int)data + 0x36) = 0;\n      *(undefined *)(data + 0xd) = 0;\n      return 0;\n    }\nLAB_08001a18:\n    if (data[0xe] != (uint *)0x20) {\n      return 1;\n    }\n    return 3;\n  }\n  if (size == 2) {\n    *ptr2 = value3 | 0x800;\n    disableIRQ();\n    **data = **data & 0xfffffbff;\n    enableIRQ();\n  }\n  else {\n    *ptr2 = value3 | 0x400;\n    while (3 < size) {\n      value1 = processData_080019382(data,timeout);\n      if (value1 != 0) goto LAB_08001a18;\n      *output = (char)(*data)[4];\n      ptr2 = *data;\n      check = (int)(ptr2[5] << 0x1d) < 0;\n      if (check) {\n        ptr2 = (uint *)ptr2[4];\n        ptr3 = output + 2;\n        size = size - 2;\n      }\n      else {\n        ptr3 = output + 1;\n        size = size - 1;\n      }\n      ptr1 = output + 1;\n      output = ptr3;\n      if (check) {\n        *ptr1 = (char)ptr2;\n      }\n    }\n    if (size != 2) {\n      value1 = getDataValue();\n      do {\n        ptr2 = *data;\n        do {\n          if ((int)(ptr2[5] << 0x1d) < 0) {\n            *ptr2 = *ptr2 & 0xfffffbff;\n            disableIRQ();\n            *output = (char)(*data)[4];\n            value1 = getDataValue();\n            goto LAB_08001b3a;\n          }\n        } while (timeout == 0xffffffff);\n      } while ((timeout != 0) && (value2 = getDataValue(), (uint)(value2 - value1) <= timeout));\n      goto LAB_08001afa;\n    }\n  }\n  value1 = getDataValue();\n  do {\n    do {\n      if ((int)((*data)[5] << 0x1d) < 0) {\n        disableIRQ();\n        ptr2 = *data;\n        *ptr2 = *ptr2 | 0x200;\n        *output = (char)ptr2[4];\n        enableIRQ();\n        output[1] = (char)(*data)[4];\n        goto LAB_08001ab8;\n      }\n    } while (timeout == 0xffffffff);\n  } while ((timeout != 0) && (value2 = getDataValue(), (uint)(value2 - value1) <= timeout));\nLAB_08001afa:\n  *(undefined *)((int)data + 0x35) = 0x20;\n  *(undefined *)(data + 0xd) = 0;\n  return 3;\nLAB_08001b3a:\n  do {\n    ptr2 = *data;\n    do {\n      if ((int)(ptr2[5] << 0x1d) < 0) {\n        *ptr2 = *ptr2 | 0x200;\n        output[1] = (char)ptr2[4];\n        enableIRQ();\n        output[2] = (char)(*data)[4];\n        goto LAB_08001ab8;\n      }\n    } while (timeout == 0xffffffff);\n  } while ((timeout != 0) && (value2 = getDataValue(), (uint)(value2 - value1) <= timeout));\n  goto LAB_08001afa;\n}\n\n",
            "renaming": {
                "FUN_08001938": "process_data_08001938",
                "param_1": "data",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "output",
                "param_6": "size",
                "param_7": "timeout",
                "puVar1": "ptr1",
                "iVar2": "value1",
                "iVar3": "value2",
                "puVar4": "ptr2",
                "uVar5": "value3",
                "puVar6": "ptr3",
                "bVar7": "check",
                "update_status_080015e8": "updateStatus",
                "process_data_080016f4": "processData2",
                "get_data_value_0800115c": "getDataValue",
                "disableIRQinterrupts": "disableIRQ",
                "enableIRQinterrupts": "enableIRQ"
            },
            "calling": [
                "FUN_080040b8",
                "FUN_0800407c"
            ],
            "called": [
                "FUN_080016f4",
                "FUN_0800115c",
                "FUN_080015e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001b58": {
            "entrypoint": "0x08001b58",
            "current_name": "check_status_08001b58",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08001eec) */\n/* WARNING: Removing unreachable block (ram,0x08001ee8) */\n\n\nundefined4 checkStatus_08001b58(int *statusArray)\n\n{\n  int value1;\n  int value2;\n  \n  if (*statusArray << 0x1f < 0) {\n    if (((_DAT_40021004 & 0xc) == 4) ||\n       (((_DAT_40021004 & 0xc) == 8 && ((int)(_DAT_40021004 << 0xf) < 0)))) {\n      if (((int)((_DAT_40021000 >> 0x11) << 0x1f) < 0) && (statusArray[1] == 0)) {\n        return 1;\n      }\n    }\n    else {\n      value1 = statusArray[1];\n      if (value1 == 0x10000) {\nLAB_08001c1e:\n        _DAT_40021000 = _DAT_40021000 | 0x10000;\n      }\n      else {\n        if (value1 == 0) {\n          _DAT_40021000 = _DAT_40021000 & 0xfffaffff;\n          value1 = get_data_value_0800115c();\n          while ((int)((_DAT_40021000 >> 0x11) << 0x1f) < 0) {\n            value2 = get_data_value_0800115c();\n            if (100 < (uint)(value2 - value1)) {\n              return 3;\n            }\n          }\n          goto LAB_08001b64;\n        }\n        if (value1 == 0x50000) {\n          _DAT_40021000 = _DAT_40021000 | 0x40000;\n          goto LAB_08001c1e;\n        }\n        _DAT_40021000 = _DAT_40021000 & 0xfffaffff;\n      }\n      value1 = get_data_value_0800115c();\n      while (-1 < (int)((_DAT_40021000 >> 0x11) << 0x1f)) {\n        value2 = get_data_value_0800115c();\n        if (100 < (uint)(value2 - value1)) {\n          return 3;\n        }\n      }\n    }\n  }\nLAB_08001b64:\n  if (*statusArray << 0x1e < 0) {\n    if (((_DAT_40021004 & 0xc) == 0) ||\n       (((_DAT_40021004 & 0xc) == 8 && (-1 < (int)(_DAT_40021004 << 0xf))))) {\n      if (((int)((_DAT_40021000 >> 1) << 0x1f) < 0) && (statusArray[4] != 1)) {\n        return 1;\n      }\n    }\n    else {\n      iRam42420000 = statusArray[4];\n      if (iRam42420000 == 0) {\n        value1 = get_data_value_0800115c();\n        while ((int)((_DAT_40021000 >> 1) << 0x1f) < 0) {\n          value2 = get_data_value_0800115c();\n          if (2 < (uint)(value2 - value1)) {\n            return 3;\n          }\n        }\n        goto LAB_08001b6c;\n      }\n      iRam42420000 = 1;\n      value1 = get_data_value_0800115c();\n      while (-1 < (int)((_DAT_40021000 >> 1) << 0x1f)) {\n        value2 = get_data_value_0800115c();\n        if (2 < (uint)(value2 - value1)) {\n          return 3;\n        }\n      }\n    }\n    _DAT_40021000 = statusArray[5] << 3 | _DAT_40021000 & 0xffffff07;\n  }\nLAB_08001b6c:\n  if (*statusArray << 0x1c < 0) {\n    iRam42420480 = statusArray[6];\n    if (iRam42420480 == 0) {\n      value1 = get_data_value_0800115c();\n      while ((int)((_DAT_40021024 >> 1) << 0x1f) < 0) {\n        value2 = get_data_value_0800115c();\n        if (2 < (uint)(value2 - value1)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      iRam42420480 = 1;\n      value1 = get_data_value_0800115c();\n      while (-1 < (int)((_DAT_40021024 >> 1) << 0x1f)) {\n        value2 = get_data_value_0800115c();\n        if (2 < (uint)(value2 - value1)) {\n          return 3;\n        }\n      }\n      FUNC_08001168(1);\n    }\n  }\n  if (-1 < *statusArray << 0x1d) goto LAB_08001bc2;\n  _DAT_4002101c = _DAT_4002101c | 0x10000000;\n  _DAT_40007000 = _DAT_40007000 | 0x100;\n  value1 = get_data_value_0800115c();\n  while (-1 < (int)(_DAT_40007000 << 0x17)) {\n    value2 = get_data_value_0800115c();\n    if (100 < (uint)(value2 - value1)) {\n      return 3;\n    }\n  }\n  value1 = statusArray[3];\n  if (value1 == 1) {\nLAB_08001e1a:\n    _DAT_40021020 = _DAT_40021020 | 1;\n  }\n  else {\n    if (value1 == 0) {\n      _DAT_40021020 = _DAT_40021020 & 0xfffffffa;\n      value1 = get_data_value_0800115c();\n      while ((int)((_DAT_40021020 >> 1) << 0x1f) < 0) {\n        value2 = get_data_value_0800115c();\n        if (5000 < (uint)(value2 - value1)) {\n          return 3;\n        }\n      }\n      goto LAB_08001bc2;\n    }\n    if (value1 == 5) {\n      _DAT_40021020 = _DAT_40021020 | 4;\n      goto LAB_08001e1a;\n    }\n    _DAT_40021020 = _DAT_40021020 & 0xfffffffa;\n  }\n  value1 = get_data_value_0800115c();\n  while (-1 < (int)((_DAT_40021020 >> 1) << 0x1f)) {\n    value2 = get_data_value_0800115c();\n    if (5000 < (uint)(value2 - value1)) {\n      return 3;\n    }\n  }\nLAB_08001bc2:\n  if (statusArray[7] == 0) {\n    return 0;\n  }\n  if ((_DAT_40021004 & 0xc) != 8) {\n    if (statusArray[7] != 2) {\n      uRam42420060 = 0;\n      value1 = get_data_value_0800115c();\n      do {\n        if (-1 < (int)((_DAT_40021000 >> 0x19) << 0x1f)) {\n          return 0;\n        }\n        value2 = get_data_value_0800115c();\n      } while ((uint)(value2 - value1) < 3);\n      return 3;\n    }\n    uRam42420060 = 0;\n    value1 = get_data_value_0800115c();\n    do {\n      if (-1 < (int)((_DAT_40021000 >> 0x19) << 0x1f)) {\n        if (statusArray[8] == 0x10000) {\n          _DAT_40021004 = _DAT_40021004 & 0xfffdffff | statusArray[2];\n        }\n        _DAT_40021004 = statusArray[8] | statusArray[9] | _DAT_40021004 & 0xffc2ffff;\n        uRam42420060 = 1;\n        value1 = get_data_value_0800115c();\n        do {\n          if ((int)((_DAT_40021000 >> 0x19) << 0x1f) < 0) {\n            return 0;\n          }\n          value2 = get_data_value_0800115c();\n        } while ((uint)(value2 - value1) < 3);\n        return 3;\n      }\n      value2 = get_data_value_0800115c();\n    } while ((uint)(value2 - value1) < 3);\n    return 3;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08001b58": "check_status_08001b58",
                "param_1": "statusArray",
                "iVar1": "value1",
                "iVar2": "value2"
            },
            "calling": [
                "FUN_08004514"
            ],
            "called": [
                "FUN_0800115c",
                "FUN_08001168"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002008": {
            "entrypoint": "0x08002008",
            "current_name": "calculate_mpu9250_clock_speed_08002008",
            "code": "\n\n\nint calculateMPU9250ClockSpeed_08002008(void)\n\n{\n  undefined4 currentValue;\n  int clockSpeed;\n  undefined4 nextValue;\n  undefined4 *dataPointer;\n  uint divider;\n  undefined4 *newDataPointer;\n  byte inputValues [4];\n  undefined4 copiedData [5];\n  \n  dataPointer = &DAT_080072f0;\n  newDataPointer = copiedData;\n  do {\n    currentValue = *dataPointer;\n    nextValue = dataPointer[1];\n    dataPointer = dataPointer + 2;\n    *newDataPointer = currentValue;\n    newDataPointer[1] = nextValue;\n    newDataPointer = newDataPointer + 2;\n  } while (dataPointer != (undefined4 *)\"../Src/MPU9250.c\");\n  inputValues[0] = 1;\n  inputValues[1] = 2;\n  if ((_DAT_40021004 & 0xc) == 8) {\n    if ((int)(_DAT_40021004 << 0xf) < 0) {\n      divider = 8000000 / inputValues[(_DAT_40021004 & 0x20000) >> 0x11];\n    }\n    else {\n      divider = 4000000;\n    }\n    clockSpeed = divider * *(byte *)((int)copiedData + ((_DAT_40021004 & 0x3c0000) >> 0x12));\n  }\n  else {\n    clockSpeed = 8000000;\n  }\n  return clockSpeed;\n}\n\n",
            "renaming": {
                "FUN_08002008": "calculate_mpu9250_clock_speed_08002008",
                "uVar1": "currentValue",
                "iVar2": "clockSpeed",
                "uVar3": "nextValue",
                "puVar4": "dataPointer",
                "uVar5": "divider",
                "puVar6": "newDataPointer",
                "local_24": "inputValues",
                "local_20": "copiedData"
            },
            "calling": [
                "FUN_0800209c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800209c": {
            "entrypoint": "0x0800209c",
            "current_name": "check_and_initialize_mpu9250_0800209c",
            "code": "\n\n\nundefined4 check_and_initialize_mpu9250_0800209c(uint *data_info,uint data_value)\n\n{\n  char condition1;\n  char condition2;\n  int shift_value;\n  uint data_flag;\n  int comparison_value;\n  uint shifted_value;\n  \n  if ((data_value <= (_DAT_40022000 & 7)) ||\n     (_DAT_40022000 = _DAT_40022000 & 0xfffffff8 | data_value, data_value == (data_value & 7))) {\n    if ((int)(*data_info << 0x1e) < 0) {\n      _DAT_40021004 = _DAT_40021004 & 0xffffff0f | data_info[2];\n    }\n    shift_value = *data_info << 0x1f;\n    if (-1 < shift_value) {\nLAB_080020ba:\n      if ((data_value < (_DAT_40022000 & 7)) &&\n         (_DAT_40022000 = _DAT_40022000 & 0xfffffff8 | data_value, data_value != (data_value & 7))) {\n        return 1;\n      }\n      if ((*data_info & 4) != 0) {\n        _DAT_40021004 = _DAT_40021004 & 0xfffff8ff | data_info[3];\n      }\n      if ((int)(*data_info << 0x1c) < 0) {\n        _DAT_40021004 = _DAT_40021004 & 0xffffc7ff | data_info[4] << 3;\n      }\n      data_flag = calculate_mpu9250_clock_speed_08002008();\n      DAT_200001bc = data_flag >> (&DAT_08007361)[(_DAT_40021004 & 0xf0) >> 4];\n      initialize_data_08001104(0);\n      return 0;\n    }\n    data_flag = data_info[1];\n    if (data_flag == 1) {\n      condition2 = '\\x01';\n      condition1 = '\\0';\n    }\n    else {\n      shifted_value = _DAT_40021000;\n      if (data_flag == 2) goto LAB_08002176;\n      condition2 = '\\0';\n      condition1 = '\\x01';\n    }\n    shifted_value = (_DAT_40021000 >>\n            (LZCOUNT((uint)(byte)(condition1 << 6) << 0x18 | (uint)(byte)(condition2 << 6) << 8) & 0x1fU)) <<\n            0x1f;\n    if ((int)shifted_value < 0) {\nLAB_08002176:\n      _DAT_40021004 = _DAT_40021004 & 0xfffffffc | data_flag;\n      shift_value = get_data_value_0800115c(shift_value,shifted_value);\n      if (data_info[1] == 1) {\n        do {\n          if ((_DAT_40021004 & 0xc) == 4) goto LAB_080020ba;\n          comparison_value = get_data_value_0800115c();\n        } while ((uint)(comparison_value - shift_value) < 0x1389);\n      }\n      else if (data_info[1] == 2) {\n        do {\n          if ((_DAT_40021004 & 0xc) == 8) goto LAB_080020ba;\n          comparison_value = get_data_value_0800115c();\n        } while ((uint)(comparison_value - shift_value) < 0x1389);\n      }\n      else {\n        do {\n          if ((_DAT_40021004 & 0xc) == 0) goto LAB_080020ba;\n          comparison_value = get_data_value_0800115c();\n        } while ((uint)(comparison_value - shift_value) < 0x1389);\n      }\n      return 3;\n    }\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_0800209c": "check_and_initialize_mpu9250_0800209c",
                "param_1": "data_info",
                "param_2": "data_value",
                "cVar1": "condition1",
                "cVar2": "condition2",
                "iVar3": "shift_value",
                "uVar4": "data_flag",
                "iVar5": "comparison_value",
                "uVar6": "shifted_value"
            },
            "calling": [
                "FUN_08004514"
            ],
            "called": [
                "FUN_08001104",
                "FUN_0800115c",
                "FUN_08002008"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002214": {
            "entrypoint": "0x08002214",
            "current_name": "get_data_08002214",
            "code": "\nundefined4 get_data_08002214(void)\n\n{\n  return DAT_200001bc;\n}\n\n",
            "renaming": {
                "FUN_08002214": "get_data_08002214"
            },
            "calling": [
                "FUN_08001104",
                "FUN_08004514"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002220": {
            "entrypoint": "0x08002220",
            "current_name": "get_shifted_value_08002220",
            "code": "\n\n\nuint get_shifted_value_08002220(void)\n\n{\n  return DAT_200001bc >> (&DAT_08007371)[(_DAT_40021004 & 0x700) >> 8];\n}\n\n",
            "renaming": {
                "FUN_08002220": "get_shifted_value_08002220"
            },
            "calling": [
                "FUN_080025e8",
                "FUN_08001754"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002250": {
            "entrypoint": "0x08002250",
            "current_name": "get_shifted_value_08002250",
            "code": "\n\n\nuint get_shifted_value_08002250(void)\n\n{\n  return DAT_200001bc >> (&DAT_08007371)[(_DAT_40021004 & 0x3800) >> 0xb];\n}\n\n",
            "renaming": {
                "FUN_08002250": "get_shifted_value_08002250"
            },
            "calling": [
                "FUN_080025e8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002280": {
            "entrypoint": "0x08002280",
            "current_name": "update_parameters_08002280",
            "code": "\nvoid updateParameters_08002280(int paramAddr,uint *paramValues)\n\n{\n  uint updatedValue1;\n  uint updatedValue2;\n  uint updatedValue3;\n  \n  *(uint *)(paramAddr + 0x20) = *(uint *)(paramAddr + 0x20) & 0xfffffffe;\n  updatedValue2 = *(uint *)(paramAddr + 4);\n  updatedValue3 = *paramValues;\n  updatedValue1 = *(uint *)(paramAddr + 0x20) & 0xfffffffd | paramValues[2];\n  if (paramAddr == 0x40012c00) {\n    updatedValue1 = (updatedValue1 & 0xfffffff7 | paramValues[3]) & 0xfffffffb;\n    updatedValue2 = updatedValue2 & 0xfffffcff | paramValues[5] | paramValues[6];\n  }\n  *(uint *)(paramAddr + 4) = updatedValue2;\n  *(uint *)(paramAddr + 0x18) = *(uint *)(paramAddr + 0x18) & 0xffffff8c | updatedValue3;\n  *(uint *)(paramAddr + 0x34) = paramValues[1];\n  *(uint *)(paramAddr + 0x20) = updatedValue1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002280": "update_parameters_08002280",
                "param_1": "paramAddr",
                "param_2": "paramValues",
                "uVar1": "updatedValue1",
                "uVar2": "updatedValue2",
                "uVar3": "updatedValue3"
            },
            "calling": [
                "FUN_0800245c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080022d0": {
            "entrypoint": "0x080022d0",
            "current_name": "update_param_values_080022d0",
            "code": "\nvoid updateParamValues_080022d0(int paramAddress,uint *paramValues)\n\n{\n  uint updatedValue1;\n  uint updatedValue2;\n  uint updatedValue3;\n  \n  *(uint *)(paramAddress + 0x20) = *(uint *)(paramAddress + 0x20) & 0xfffffeff;\n  updatedValue2 = *(uint *)(paramAddress + 4);\n  updatedValue3 = *paramValues;\n  updatedValue1 = *(uint *)(paramAddress + 0x20) & 0xfffffdff | paramValues[2] << 8;\n  if (paramAddress == 0x40012c00) {\n    updatedValue1 = (updatedValue1 & 0xfffff7ff | paramValues[3] << 8) & 0xfffffbff;\n    updatedValue2 = updatedValue2 & 0xffffcfff | (paramValues[5] | paramValues[6]) << 4;\n  }\n  *(uint *)(paramAddress + 4) = updatedValue2;\n  *(uint *)(paramAddress + 0x1c) = *(uint *)(paramAddress + 0x1c) & 0xffffff8c | updatedValue3;\n  *(uint *)(paramAddress + 0x3c) = paramValues[1];\n  *(uint *)(paramAddress + 0x20) = updatedValue1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080022d0": "update_param_values_080022d0",
                "param_1": "paramAddress",
                "param_2": "paramValues",
                "uVar1": "updatedValue1",
                "uVar2": "updatedValue2",
                "uVar3": "updatedValue3"
            },
            "calling": [
                "FUN_0800245c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002324": {
            "entrypoint": "0x08002324",
            "current_name": "update_data_08002324",
            "code": "\nvoid updateData_08002324(int dataAddress,int *paramArray)\n\n{\n  uint value;\n  int param1Value;\n  int param2Value;\n  int defaultParam;\n  \n  *(uint *)(dataAddress + 0x20) = *(uint *)(dataAddress + 0x20) & 0xffffefff;\n  value = *(uint *)(dataAddress + 4);\n  param1Value = *paramArray;\n  param2Value = paramArray[2];\n  defaultParam = 0x40012c00;\n  if (dataAddress == 0x40012c00) {\n    defaultParam = paramArray[5];\n    value = value & 0xffffbfff;\n  }\n  if (dataAddress == 0x40012c00) {\n    value = value | defaultParam << 6;\n  }\n  *(uint *)(dataAddress + 4) = value;\n  *(uint *)(dataAddress + 0x1c) = *(uint *)(dataAddress + 0x1c) & 0xffff8cff | param1Value << 8;\n  *(int *)(dataAddress + 0x40) = paramArray[1];\n  *(uint *)(dataAddress + 0x20) = *(uint *)(dataAddress + 0x20) & 0xffffdfff | param2Value << 0xc;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002324": "update_data_08002324",
                "param_1": "dataAddress",
                "param_2": "paramArray",
                "uVar1": "value",
                "iVar2": "param1Value",
                "iVar3": "param2Value",
                "iVar4": "defaultParam"
            },
            "calling": [
                "FUN_0800245c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002368": {
            "entrypoint": "0x08002368",
            "current_name": "update_memory_08002368",
            "code": "\nvoid updateMemory_08002368(uint *memoryPtr,uint *dataPtr)\n\n{\n  uint updatedValue;\n  \n  updatedValue = *memoryPtr;\n  if (((((memoryPtr == (uint *)0x40012c00) || (memoryPtr == (uint *)0x40000000)) ||\n       (memoryPtr == (uint *)0x40000400)) || (memoryPtr == (uint *)0x40000800)) &&\n     (((updatedValue = updatedValue & 0xffffff8f | dataPtr[1], memoryPtr == (uint *)0x40012c00 ||\n       (memoryPtr == (uint *)0x40000000)) ||\n      ((memoryPtr == (uint *)0x40000400 || (memoryPtr == (uint *)0x40000800)))))) {\n    updatedValue = updatedValue & 0xfffffcff | dataPtr[3];\n  }\n  *memoryPtr = updatedValue;\n  memoryPtr[0xb] = dataPtr[2];\n  memoryPtr[10] = *dataPtr;\n  updatedValue = 0x40012c00;\n  if (memoryPtr == (uint *)0x40012c00) {\n    updatedValue = dataPtr[4];\n  }\n  if (memoryPtr == (uint *)0x40012c00) {\n    memoryPtr[0xc] = updatedValue;\n  }\n  memoryPtr[5] = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002368": "update_memory_08002368",
                "param_1": "memoryPtr",
                "param_2": "dataPtr",
                "uVar1": "updatedValue"
            },
            "calling": [
                "FUN_080023d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080023d0": {
            "entrypoint": "0x080023d0",
            "current_name": "process_settings_080023d0",
            "code": "\nundefined4 processSettings_080023d0(undefined4 *settingsPtr)\n\n{\n  if (settingsPtr != (undefined4 *)0x0) {\n    if (*(char *)((int)settingsPtr + 0x39) == '\\0') {\n      *(undefined *)(settingsPtr + 0xe) = 0;\n      updateSettings;\n    }\n    *(undefined *)((int)settingsPtr + 0x39) = 2;\n    update_memory_08002368(*settingsPtr,settingsPtr + 1);\n    *(undefined *)((int)settingsPtr + 0x39) = 1;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_080023d0": "process_settings_080023d0",
                "param_1": "settingsPtr",
                "update_settings_08004d8c()": "updateSettings"
            },
            "calling": [
                "FUN_0800458c"
            ],
            "called": [
                "FUN_08004d8c",
                "FUN_08002368"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002404": {
            "entrypoint": "0x08002404",
            "current_name": "update_data_08002404",
            "code": "\nvoid updateData_08002404(int dataAddress,int *paramArray)\n\n{\n  uint mask1;\n  uint mask2;\n  int value;\n  \n  *(uint *)(dataAddress + 0x20) = *(uint *)(dataAddress + 0x20) & 0xffffffef;\n  mask2 = *(uint *)(dataAddress + 4);\n  value = *paramArray;\n  mask1 = *(uint *)(dataAddress + 0x20) & 0xffffffdf | paramArray[2] << 4;\n  if (dataAddress == 0x40012c00) {\n    mask1 = (mask1 & 0xffffff7f | paramArray[3] << 4) & 0xffffffbf;\n    mask2 = mask2 & 0xfffff3ff | (paramArray[5] | paramArray[6]) << 2;\n  }\n  *(uint *)(dataAddress + 4) = mask2;\n  *(uint *)(dataAddress + 0x18) = *(uint *)(dataAddress + 0x18) & 0xffff8cff | value << 8;\n  *(int *)(dataAddress + 0x38) = paramArray[1];\n  *(uint *)(dataAddress + 0x20) = mask1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002404": "update_data_08002404",
                "param_1": "dataAddress",
                "param_2": "paramArray",
                "uVar1": "mask1",
                "uVar2": "mask2",
                "iVar3": "value"
            },
            "calling": [
                "FUN_0800245c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800245c": {
            "entrypoint": "0x0800245c",
            "current_name": "update_flags_0800245c",
            "code": "\nvoid updateFlags_0800245c(int *flagSet,undefined4 param2,undefined4 param3)\n\n{\n  int tmp1;\n  int tmp2;\n  int tmp3;\n  int tmp4;\n  int tmpI1;\n  uint updatedValue;\n  int tmpI2;\n  \n  if (*(char *)(flagSet + 0xe) == '\\x01') {\n    return;\n  }\n  *(undefined *)((int)flagSet + 0x39) = 2;\n  *(undefined *)(flagSet + 0xe) = 1;\n  switch(param3) {\n  case 0:\n    update_parameters_08002280(*flagSet);\n    tmpI2 = *flagSet;\n    updatedValue = *(uint *)(tmp1 + 0x10);\n    *(uint *)(tmpI2 + 0x18) = *(uint *)(tmpI2 + 0x18) | 8;\n    *(uint *)(tmpI2 + 0x18) = *(uint *)(tmpI2 + 0x18) & 0xfffffffb;\n    updatedValue = *(uint *)(tmpI2 + 0x18) | updatedValue;\n    break;\n  default:\n    goto switchD_0800247a_caseD_1;\n  case 4:\n    update_data_08002404(*flagSet);\n    tmpI2 = *flagSet;\n    tmpI1 = *(int *)(tmp2 + 0x10);\n    *(uint *)(tmpI2 + 0x18) = *(uint *)(tmpI2 + 0x18) | 0x800;\n    *(uint *)(tmpI2 + 0x18) = *(uint *)(tmpI2 + 0x18) & 0xfffffbff;\n    updatedValue = *(uint *)(tmpI2 + 0x18) | tmpI1 << 8;\n    break;\n  case 8:\n    update_param_values_080022d0(*flagSet);\n    tmpI2 = *flagSet;\n    updatedValue = *(uint *)(tmp3 + 0x10);\n    *(uint *)(tmpI2 + 0x1c) = *(uint *)(tmpI2 + 0x1c) | 8;\n    *(uint *)(tmpI2 + 0x1c) = *(uint *)(tmpI2 + 0x1c) & 0xfffffffb;\n    updatedValue = *(uint *)(tmpI2 + 0x1c) | updatedValue;\n    goto LAB_080024fa;\n  case 0xc:\n    update_data_08002324(*flagSet);\n    tmpI2 = *flagSet;\n    tmpI1 = *(int *)(tmp4 + 0x10);\n    *(uint *)(tmpI2 + 0x1c) = *(uint *)(tmpI2 + 0x1c) | 0x800;\n    *(uint *)(tmpI2 + 0x1c) = *(uint *)(tmpI2 + 0x1c) & 0xfffffbff;\n    updatedValue = *(uint *)(tmpI2 + 0x1c) | tmpI1 << 8;\nLAB_080024fa:\n    *(uint *)(tmpI2 + 0x1c) = updatedValue;\n    goto switchD_0800247a_caseD_1;\n  }\n  *(uint *)(tmpI2 + 0x18) = updatedValue;\nswitchD_0800247a_caseD_1:\n  *(undefined *)((int)flagSet + 0x39) = 1;\n  *(undefined *)(flagSet + 0xe) = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800245c": "update_flags_0800245c",
                "param_1": "flagSet",
                "param_2": "param2",
                "param_3": "param3",
                "extraout_r1": "tmp1",
                "extraout_r1_00": "tmp2",
                "extraout_r1_01": "tmp3",
                "extraout_r1_02": "tmp4",
                "iVar1": "tmpI1",
                "uVar2": "updatedValue",
                "iVar3": "tmpI2"
            },
            "calling": [
                "FUN_0800458c"
            ],
            "called": [
                "FUN_080022d0",
                "FUN_08002280",
                "FUN_08002404",
                "FUN_08002324"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002520": {
            "entrypoint": "0x08002520",
            "current_name": "update_bitwise_operation_08002520",
            "code": "\nvoid updateBitwiseOperation_08002520(int baseAddress,uint bitIndex,int newValue)\n\n{\n  *(uint *)(baseAddress + 0x20) = *(uint *)(baseAddress + 0x20) & ~(1 << (bitIndex & 0xff));\n  *(uint *)(baseAddress + 0x20) = newValue << (bitIndex & 0xff) | *(uint *)(baseAddress + 0x20);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002520": "update_bitwise_operation_08002520",
                "param_1": "baseAddress",
                "param_2": "bitIndex",
                "param_3": "newValue"
            },
            "calling": [
                "FUN_08002538"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002538": {
            "entrypoint": "0x08002538",
            "current_name": "update_and_set_flag_08002538",
            "code": "\nundefined4 update_and_set_flag_08002538(uint **ptr_to_ptr,undefined4 data)\n\n{\n  uint flag_value;\n  uint *ptr;\n  \n  update_bitwise_operation(*ptr_to_ptr,data,1);\n  ptr = *ptr_to_ptr;\n  flag_value = 0x40012c00;\n  if (ptr == (uint *)0x40012c00) {\n    flag_value = uRam40012c44 | 0x8000;\n  }\n  if (ptr == (uint *)0x40012c00) {\n    ptr[0x11] = flag_value;\n  }\n  *ptr = *ptr | 1;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002538": "update_and_set_flag_08002538",
                "param_1": "ptr_to_ptr",
                "param_2": "data",
                "uVar1": "flag_value",
                "puVar2": "ptr",
                "update_bitwise_operation_08002520": "update_bitwise_operation"
            },
            "calling": [
                "FUN_08003ff4"
            ],
            "called": [
                "FUN_08002520"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002564": {
            "entrypoint": "0x08002564",
            "current_name": "check_and_update_flag_08002564",
            "code": "\nundefined4 checkAndUpdateFlag_08002564(int *paramArray,uint *uintArray)\n\n{\n  undefined4 returnValue;\n  \n  returnValue = 2;\n  if (*(char *)(paramArray + 0xe) != '\\x01') {\n    *(undefined *)((int)paramArray + 0x39) = 2;\n    *(uint *)(*paramArray + 0x44) =\n         *uintArray | uintArray[1] | uintArray[2] | uintArray[3] | uintArray[4] | uintArray[5] | uintArray[6];\n    *(undefined *)((int)paramArray + 0x39) = 1;\n    returnValue = 0;\n    *(undefined *)(paramArray + 0xe) = 0;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_08002564": "check_and_update_flag_08002564",
                "param_1": "paramArray",
                "param_2": "uintArray",
                "uVar1": "returnValue"
            },
            "calling": [
                "FUN_0800458c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080025a4": {
            "entrypoint": "0x080025a4",
            "current_name": "update_flags_and_reset_080025a4",
            "code": "\nundefined4 updateFlagsAndReset_080025a4(int *ptr,uint *data)\n\n{\n  uint temp1;\n  undefined4 result;\n  int temp2;\n  uint mask1;\n  \n  result = 2;\n  if (*(char *)(ptr + 0xe) != '\\x01') {\n    *(undefined *)((int)ptr + 0x39) = 2;\n    temp2 = *ptr;\n    mask1 = *data;\n    temp1 = data[1];\n    *(uint *)(temp2 + 4) = *(uint *)(temp2 + 4) & 0xffffff8f;\n    *(uint *)(temp2 + 4) = *(uint *)(temp2 + 4) | mask1;\n    *(uint *)(temp2 + 8) = *(uint *)(temp2 + 8) & 0xffffff7f;\n    *(uint *)(temp2 + 8) = *(uint *)(temp2 + 8) | temp1;\n    *(undefined *)((int)ptr + 0x39) = 1;\n    result = 0;\n    *(undefined *)(ptr + 0xe) = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080025a4": "update_flags_and_reset_080025a4",
                "param_1": "ptr",
                "param_2": "data",
                "uVar1": "temp1",
                "uVar2": "result",
                "iVar3": "temp2",
                "uVar4": "mask1"
            },
            "calling": [
                "FUN_0800458c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080025e8": {
            "entrypoint": "0x080025e8",
            "current_name": "update_configuration_080025e8",
            "code": "\nvoid updateConfiguration_080025e8(int *config)\n\n{\n  int shiftValue1;\n  int shiftValue2;\n  uint shiftValue3;\n  int calculation1;\n  int calculation2;\n  int baseAddress;\n  \n  baseAddress = *config;\n  shiftValue3 = config[4];\n  *(uint *)(baseAddress + 0x10) = *(uint *)(baseAddress + 0x10) & 0xffffcfff | config[3];\n  *(uint *)(baseAddress + 0xc) = config[2] | shiftValue3 | config[5] | *(uint *)(baseAddress + 0xc) & 0xffffe9f3;\n  *(uint *)(baseAddress + 0x14) = *(uint *)(baseAddress + 0x14) & 0xfffffcff | config[6];\n  if (baseAddress == 0x40013800) {\n    shiftValue1 = get_shifted_value_08002250();\n    calculation1 = (int)(((ulonglong)(uint)(shiftValue1 * 0x19) / (ulonglong)(uint)(config[1] << 2)) / 100);\n    shiftValue1 = get_shifted_value_08002250();\n    calculation2 = config[1];\n    shiftValue2 = get_shifted_value_08002250();\n    shiftValue2 = (uint)(shiftValue1 * 0x19) / (uint)(calculation2 << 2) +\n            (int)(((ulonglong)(uint)(shiftValue2 * 0x19) / (ulonglong)(uint)(config[1] << 2)) / 100) *\n            -100;\n    shiftValue1 = get_shifted_value_08002250();\n    shiftValue3 = (uint)(shiftValue1 * 0x19) / (uint)(config[1] << 2);\n    shiftValue1 = get_shifted_value_08002250();\n  }\n  else {\n    shiftValue1 = get_shifted_value_08002220();\n    calculation1 = (int)(((ulonglong)(uint)(shiftValue1 * 0x19) / (ulonglong)(uint)(config[1] << 2)) / 100);\n    shiftValue1 = get_shifted_value_08002220();\n    calculation2 = config[1];\n    shiftValue2 = get_shifted_value_08002220();\n    shiftValue2 = (uint)(shiftValue1 * 0x19) / (uint)(calculation2 << 2) +\n            (int)(((ulonglong)(uint)(shiftValue2 * 0x19) / (ulonglong)(uint)(config[1] << 2)) / 100) *\n            -100;\n    shiftValue1 = get_shifted_value_08002220();\n    shiftValue3 = (uint)(shiftValue1 * 0x19) / (uint)(config[1] << 2);\n    shiftValue1 = get_shifted_value_08002220();\n  }\n  *(uint *)(baseAddress + 8) =\n       (((shiftValue3 + (int)(((ulonglong)(uint)(shiftValue1 * 0x19) / (ulonglong)(uint)(config[1] << 2)) / 100\n                       ) * -100) * 0x10 + 0x32) / 100 & 0xf | (shiftValue2 * 0x10 + 0x32U) / 100 & 0xf0) +\n       calculation1 * 0x10;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080025e8": "update_configuration_080025e8",
                "param_1": "config",
                "iVar1": "shiftValue1",
                "iVar2": "shiftValue2",
                "uVar3": "shiftValue3",
                "iVar4": "calculation1",
                "iVar5": "calculation2",
                "iVar6": "baseAddress"
            },
            "calling": [
                "FUN_08002724"
            ],
            "called": [
                "FUN_08002250",
                "FUN_08002220"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002724": {
            "entrypoint": "0x08002724",
            "current_name": "initialize_configuration_08002724",
            "code": "\nundefined4 initializeConfiguration_08002724(int *configPtr)\n\n{\n  int configPtrVal;\n  \n  if (configPtr != (int *)0x0) {\n    if (*(char *)((int)configPtr + 0x39) == '\\0') {\n      *(undefined *)(configPtr + 0xe) = 0;\n      updateDataAndFlags();\n    }\n    *(undefined *)((int)configPtr + 0x39) = 2;\n    *(uint *)(*configPtr + 0xc) = *(uint *)(*configPtr + 0xc) & 0xffffdfff;\n    updateConfiguration(configPtr);\n    configPtrVal = *configPtr;\n    *(uint *)(configPtrVal + 0x10) = *(uint *)(configPtrVal + 0x10) & 0xffffb7ff;\n    *(uint *)(configPtrVal + 0x14) = *(uint *)(configPtrVal + 0x14) & 0xffffffd5;\n    *(uint *)(configPtrVal + 0xc) = *(uint *)(configPtrVal + 0xc) | 0x2000;\n    configPtr[0xf] = 0;\n    *(undefined *)((int)configPtr + 0x39) = 1;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08002724": "initialize_configuration_08002724",
                "param_1": "configPtr",
                "iVar1": "configPtrVal",
                "update_data_and_flags_08004e7c": "updateDataAndFlags",
                "update_configuration_080025e8": "updateConfiguration"
            },
            "calling": [
                "FUN_0800458c"
            ],
            "called": [
                "FUN_08004e7c",
                "FUN_080025e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800290a": {
            "entrypoint": "0x0800290a",
            "current_name": "FUNC_0800290a",
            "code": "\nvoid FUNC_0800290a(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800290a": "FUNC_0800290a"
            },
            "calling": [
                "FUN_0800299a"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800290c": {
            "entrypoint": "0x0800290c",
            "current_name": "update_param_0800290c",
            "code": "\nundefined4 updateParam_0800290c(int *paramArray)\n\n{\n  byte byteVar;\n  int intVar;\n  uint uintVar;\n  undefined4 undefined4Var;\n  short shortVar;\n  ushort *ushortPtrVar1;\n  ushort *ushortPtrVar2;\n  bool boolVar;\n  \n  if ((*(byte *)((int)paramArray + 0x39) & 0xef) != 0x22) {\n    return 2;\n  }\n  intVar = *paramArray;\n  ushortPtrVar1 = (ushort *)paramArray[10];\n  if (paramArray[2] == 0x1000) {\n    if (paramArray[4] == 0) {\n      ushortPtrVar2 = ushortPtrVar1 + 1;\n      *ushortPtrVar1 = (ushort)((uint)(*(int *)(intVar + 4) << 0x17) >> 0x17);\n    }\n    else {\n      ushortPtrVar2 = (ushort *)((int)ushortPtrVar1 + 1);\n      *ushortPtrVar1 = (ushort)*(int *)(intVar + 4) & 0xff;\n    }\n    paramArray[10] = (int)ushortPtrVar2;\n  }\n  else {\n    if (paramArray[4] == 0) {\n      byteVar = (byte)*(undefined4 *)(intVar + 4);\n      paramArray[10] = (int)ushortPtrVar1 + 1;\n    }\n    else {\n      undefined4Var = *(undefined4 *)(intVar + 4);\n      paramArray[10] = (int)ushortPtrVar1 + 1;\n      byteVar = (byte)undefined4Var & 0x7f;\n    }\n    *(byte *)ushortPtrVar1 = byteVar;\n  }\n  shortVar = *(short *)((int)paramArray + 0x2e) + -1;\n  *(short *)((int)paramArray + 0x2e) = shortVar;\n  if (shortVar == 0) {\n    intVar = *paramArray;\n    *(uint *)(intVar + 0xc) = *(uint *)(intVar + 0xc) & 0xffffffdf;\n    boolVar = *(char *)((int)paramArray + 0x39) != '2';\n    if (boolVar) {\n      uintVar = *(uint *)(intVar + 0xc) & 0xfffffeff;\n    }\n    else {\n      intVar = 0x12;\n      uintVar = 0x32;\n    }\n    if (boolVar) {\n      *(uint *)(intVar + 0xc) = uintVar;\n      uintVar = *(uint *)(intVar + 0x14) & 0xfffffffe;\n    }\n    if (boolVar) {\n      *(uint *)(intVar + 0x14) = uintVar;\n      intVar = 1;\n    }\n    *(char *)((int)paramArray + 0x39) = (char)intVar;\n    validate_param_08004c30();\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800290c": "update_param_0800290c",
                "param_1": "paramArray",
                "bVar1": "byteVar",
                "iVar2": "intVar",
                "uVar3": "uintVar",
                "uVar4": "undefined4Var",
                "sVar5": "shortVar",
                "puVar6": "ushortPtrVar1",
                "puVar7": "ushortPtrVar2",
                "bVar8": "boolVar"
            },
            "calling": [
                "FUN_0800299a"
            ],
            "called": [
                "FUN_08004c30"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002998": {
            "entrypoint": "0x08002998",
            "current_name": "FUNC_08002998",
            "code": "\nvoid FUNC_08002998(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002998": "FUNC_08002998"
            },
            "calling": [
                "FUN_0800299a"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800299a": {
            "entrypoint": "0x0800299a",
            "current_name": "process_param_0800299a",
            "code": "\nvoid process_param_0800299a(uint **param_array)\n\n{\n  uint value1;\n  short count;\n  uint value2;\n  uint *pointer;\n  undefined flag;\n  uint *ptr_to_param_array;\n  uint flag2;\n  bool is_true;\n  \n  ptr_to_param_array = *param_array;\n  value2 = *ptr_to_param_array;\n  value1 = ptr_to_param_array[3];\n  if ((value2 & 0xf) == 0) {\n    if (((int)(value2 << 0x1a) < 0) && ((int)(value1 << 0x1a) < 0)) {\n      update_param_0800290c();\n      return;\n    }\n  }\n  else {\n    flag2 = ptr_to_param_array[5] & 1;\n    if ((flag2 != 0) || ((value1 & 0x120) != 0)) {\n      ptr_to_param_array = (uint *)(value2 << 0x1f);\n      if ((int)ptr_to_param_array < 0) {\n        is_true = (int)(value1 << 0x17) < 0;\n        if (is_true) {\n          ptr_to_param_array = (uint *)((uint)param_array[0xf] | 1);\n        }\n        if (is_true) {\n          param_array[0xf] = ptr_to_param_array;\n        }\n      }\n      if (((int)(value2 << 0x1d) < 0) && (flag2 != 0)) {\n        param_array[0xf] = (uint *)((uint)param_array[0xf] | 2);\n      }\n      if (((int)(value2 << 0x1e) < 0) && (flag2 != 0)) {\n        param_array[0xf] = (uint *)((uint)param_array[0xf] | 4);\n      }\n      if (((int)(value2 << 0x1c) < 0) && (flag2 != 0)) {\n        param_array[0xf] = (uint *)((uint)param_array[0xf] | 8);\n      }\n      if (param_array[0xf] == (uint *)0x0) {\n        return;\n      }\n      if (((int)(value2 << 0x1a) < 0) && ((int)(value1 << 0x1a) < 0)) {\n        update_param_0800290c(param_array);\n      }\n      ptr_to_param_array = *param_array;\n      if ((-1 < (int)param_array[0xf] << 0x1c) && ((ptr_to_param_array[5] & 0x40) == 0)) {\n        FUNC_08002998(param_array);\n        param_array[0xf] = (uint *)0x0;\n        return;\n      }\n      ptr_to_param_array[3] = ptr_to_param_array[3] & 0xfffffedf;\n      ptr_to_param_array[5] = ptr_to_param_array[5] & 0xfffffffe;\n      *(undefined *)((int)param_array + 0x39) = 1;\n      FUNC_08002998(param_array);\n      return;\n    }\n  }\n  if (((int)(value2 << 0x18) < 0) && ((int)(value1 << 0x18) < 0)) {\n    if ((*(byte *)((int)param_array + 0x39) & 0xdf) == 0x12) {\n      pointer = param_array[8];\n      if (param_array[2] == (uint *)0x1000) {\n        ptr_to_param_array[1] = *(ushort *)pointer & 0x1ff;\n        if (param_array[4] == (uint *)0x0) {\n          pointer = (uint *)((int)pointer + 2);\n        }\n        else {\n          pointer = (uint *)((int)pointer + 1);\n        }\n        param_array[8] = pointer;\n      }\n      else {\n        param_array[8] = (uint *)((int)pointer + 1);\n        ptr_to_param_array[1] = (uint)*(byte *)pointer;\n      }\n      count = *(short *)((int)param_array + 0x26) + -1;\n      *(short *)((int)param_array + 0x26) = count;\n      if (count == 0) {\n        ptr_to_param_array[3] = ptr_to_param_array[3] & 0xffffff7f;\n        ptr_to_param_array[3] = ptr_to_param_array[3] | 0x40;\n        return;\n      }\n    }\n  }\n  else if (((int)(value2 << 0x19) < 0) && ((int)(value1 << 0x19) < 0)) {\n    ptr_to_param_array[3] = ptr_to_param_array[3] & 0xffffffbf;\n    if (*(char *)((int)param_array + 0x39) == '2') {\n      flag = 0x22;\n    }\n    else {\n      flag = 1;\n    }\n    *(undefined *)((int)param_array + 0x39) = flag;\n    FUNC_0800290a(param_array);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800299a": "process_param_0800299a",
                "param_1": "param_array",
                "uVar1": "value1",
                "sVar2": "count",
                "uVar3": "value2",
                "puVar4": "pointer",
                "uVar5": "flag",
                "puVar6": "ptr_to_param_array",
                "uVar7": "flag2",
                "bVar8": "is_true"
            },
            "calling": [],
            "called": [
                "FUN_0800290c",
                "FUN_0800290a",
                "FUN_08002998"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ad0": {
            "entrypoint": "0x08002ad0",
            "current_name": "initialize_sensor_08002ad0",
            "code": "\nvoid initializeSensor_08002ad0(void)\n\n{\n  processAndHandleData(0xd0,0x75,\"../Src/MPU9250.c\",0x3b);\n  validateAndProcessInput(0xd0,0x6b,0x80,1);\n  validateAndProcessInput(0xd0,0x6b,1);\n  validateAndProcessInput(0xd0,0x6c,0,1);\n  validateAndProcessInput(0xd0,0x19,0,1);\n  validateAndProcessInput(0xd0,0x1d,3,1);\n  validateAndProcessInput(0xd0,0x1a,3,1);\n  validateAndProcessInput(0xd0,0x1b,0x10,1);\n  validateAndProcessInput(0xd0,0x1c,8,1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ad0": "initialize_sensor_08002ad0",
                "process_and_handle_data_0800407c": "processAndHandleData",
                "validate_and_process_input_0800403c": "validateAndProcessInput"
            },
            "calling": [
                "FUN_08002ea0"
            ],
            "called": [
                "FUN_0800407c",
                "FUN_0800403c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002b48": {
            "entrypoint": "0x08002b48",
            "current_name": "initialize_mpu9250_08002b48",
            "code": "\nvoid initializeMPU9250_08002b48(void)\n\n{\n  undefined4 uVar1;\n  uint inputData;\n  int dataOffset1;\n  int dataOffset2;\n  undefined4 shiftedData1;\n  undefined4 shiftedData2;\n  \n  shiftedData1 = 0;\n  shiftedData2 = inputData & 0xffff0000;\n  handle_and_store_data_080040e8(0xd0,0x3b,&shiftedData1,6,\"../Src/MPU9250.c\",0x58);\n  DAT_200002f6 = CONCAT11(shiftedData1._2_1_,shiftedData1._3_1_);\n  DAT_200002f4 = CONCAT11((undefined)shiftedData1,shiftedData1._1_1_);\n  DAT_200002f8 = CONCAT11((undefined)shiftedData2,shiftedData2._1_1_);\n  dataOffset2 = (int)DAT_200002f6;\n  dataOffset1 = (int)DAT_200002f8;\n  uVar1 = calculate_bitwise_shift_08000c44();\n  uVar1 = calculate_floating_point_08000cec(uVar1,0x40800000);\n  DAT_200002d0 = calculate_floating_point_08000cec(uVar1,0x38000000);\n  uVar1 = calculate_bitwise_shift_08000c44(dataOffset2);\n  uVar1 = calculate_floating_point_08000cec(uVar1,0x40800000);\n  DAT_200002d4 = calculate_floating_point_08000cec(uVar1,0x38000000);\n  uVar1 = calculate_bitwise_shift_08000c44(dataOffset1);\n  uVar1 = calculate_floating_point_08000cec(uVar1,0x40800000);\n  DAT_200002d8 = calculate_floating_point_08000cec(uVar1,0x38000000);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002b48": "initialize_mpu9250_08002b48",
                "in_r3": "inputData",
                "iVar2": "dataOffset1",
                "iVar3": "dataOffset2",
                "local_18": "shiftedData1",
                "local_14": "shiftedData2"
            },
            "calling": [
                "FUN_08002f28"
            ],
            "called": [
                "FUN_08000cec",
                "FUN_08000c44",
                "FUN_080040e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002bf0": {
            "entrypoint": "0x08002bf0",
            "current_name": "initialize_mpu9250_08002bf0",
            "code": "\nvoid initializeMPU9250_08002bf0(void)\n\n{\n  undefined4 uVar1;\n  int iVar2;\n  int iVar3;\n  undefined4 data_register;\n  undefined2 status_register;\n  \n  data_register = 0;\n  status_register = 0;\n  handleAndStoreData(0xd0,0x43,&data_register,6,\"../Src/MPU9250.c\",0x7b);\n  DAT_200002c0 = CONCAT11(data_register._2_1_,data_register._3_1_);\n  DAT_200002be = CONCAT11((undefined)data_register,data_register._1_1_);\n  DAT_200002c2 = CONCAT11((undefined)status_register,status_register._1_1_);\n  iVar3 = (int)DAT_200002c0;\n  iVar2 = (int)DAT_200002c2;\n  uVar1 = calculateBitwiseShift();\n  uVar1 = calculateFloatingPoint(uVar1,0x447a0000);\n  uVar1 = calculateFloatingPoint(uVar1,0x38000000);\n  DAT_200002c4 = calculateFloatingPoint2(uVar1,DAT_20000000);\n  uVar1 = calculateBitwiseShift(iVar3);\n  uVar1 = calculateFloatingPoint(uVar1,0x447a0000);\n  uVar1 = calculateFloatingPoint(uVar1,0x38000000);\n  DAT_200002c8 = calculateFloatingPoint2(uVar1,DAT_20000004);\n  uVar1 = calculateBitwiseShift(iVar2);\n  uVar1 = calculateFloatingPoint(uVar1,0x447a0000);\n  uVar1 = calculateFloatingPoint(uVar1,0x38000000);\n  DAT_200002cc = calculateFloatingPoint2(uVar1,DAT_20000008);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002bf0": "initialize_mpu9250_08002bf0",
                "local_20": "data_register",
                "local_1c": "status_register",
                "handle_and_store_data_080040e8": "handleAndStoreData",
                "calculate_bitwise_shift_08000c44": "calculateBitwiseShift",
                "calculate_floating_point_08000cec": "calculateFloatingPoint",
                "calculate_floating_point_08000ad8": "calculateFloatingPoint2"
            },
            "calling": [
                "FUN_08002f28"
            ],
            "called": [
                "FUN_08000ad8",
                "FUN_08000cec",
                "FUN_08000c44",
                "FUN_080040e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002cb0": {
            "entrypoint": "0x08002cb0",
            "current_name": "process_sensor_data_08002cb0",
            "code": "\nvoid processSensorData_08002cb0(undefined4 param1,undefined4 param2,undefined4 param3,uint sensorData)\n\n{\n  undefined4 result;\n  uint processedData;\n  \n  processedData = sensorData;\n  validate_and_process_input_0800403c(0xd0,0x37,0x22,1,param1,param2,param3);\n  validate_and_process_input_0800403c(0xd0,0x6a,1);\n  process_and_handle_data_0800407c(0x18,0,\"../Src/MPU9250.c\",0xad);\n  validate_and_process_input_0800403c(0x18,0xb,1);\n  validate_and_process_input_0800403c(0x18,10,0,1);\n  validate_and_process_input_0800403c(0x18,10,0xf,1);\n  handle_and_store_data_080040e8(0x18,0x10,&processedData,3,\"../Src/MPU9250.c\",0xb6);\n  result = calculate_bitwise_shift_08000c44((processedData & 0xff) - 0x80);\n  result = calculate_floating_point_08000cec(result,0x3b800000);\n  DAT_200002e8 = calculate_float_addition_08000adc(result,0x3f800000);\n  result = calculate_bitwise_shift_08000c44((processedData >> 8 & 0xff) - 0x80);\n  result = calculate_floating_point_08000cec(result,0x3b800000);\n  DAT_200002ec = calculate_float_addition_08000adc(result,0x3f800000);\n  result = calculate_bitwise_shift_08000c44((processedData >> 0x10 & 0xff) - 0x80);\n  result = calculate_floating_point_08000cec(result,0x3b800000);\n  DAT_200002f0 = calculate_float_addition_08000adc(result,0x3f800000);\n  validate_and_process_input_0800403c(0x18,10,0,1);\n  validate_and_process_input_0800403c(0x18,10,0x16,1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002cb0": "process_sensor_data_08002cb0",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "sensorData",
                "uVar1": "result",
                "local_c": "processedData"
            },
            "calling": [
                "FUN_08002ea0"
            ],
            "called": [
                "FUN_08000adc",
                "FUN_08000cec",
                "FUN_08000c44",
                "FUN_0800407c",
                "FUN_080040e8",
                "FUN_0800403c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002d88": {
            "entrypoint": "0x08002d88",
            "current_name": "process_and_handle_data_08002d88",
            "code": "\nvoid processAndHandleData_08002d88(undefined4 param1,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  int result;\n  undefined4 tempVar;\n  undefined4 tempVar2;\n  int tempVar3;\n  undefined2 data1;\n  undefined data2;\n  undefined data3;\n  undefined data4;\n  undefined data5;\n  byte data6;\n  undefined uStack_21;\n  \n  uStack_21 = (undefined)((uint)param4 >> 0x18);\n  data1 = 0;\n  data2 = 0;\n  data3 = 0;\n  data4 = 0;\n  data5 = 0;\n  data6 = 0;\n  result = process_and_handle_data_0800407c(0x18,2,\"../Src/MPU9250.c\",0xd7,param1,param2);\n  if (result << 0x1f < 0) {\n    handle_and_store_data_080040e8(0x18,3,&data1,7,\"../Src/MPU9250.c\",0xda);\n    tempVar2 = DAT_2000001c;\n    if ((int)((uint)data6 << 0x1c) < 0) {\n      DAT_200013bb = DAT_200013bb + 1;\n    }\n    else {\n      DAT_200002ba = CONCAT11(data3,data2);\n      DAT_200002bc = CONCAT11(data5,data4);\n      tempVar3 = (int)DAT_200002ba;\n      result = (int)DAT_200002bc;\n      DAT_200002b8 = data1;\n      tempVar = calculate_bitwise_shift_08000c44();\n      tempVar = calculate_floating_point_08000cec(tempVar,tempVar2);\n      tempVar = calculate_floating_point_08000cec(tempVar,DAT_200002e8);\n      tempVar = calculate_floating_point_08000ad8(tempVar,DAT_20000020);\n      DAT_200002dc = calculate_floating_point_08000cec(tempVar,DAT_2000002c);\n      tempVar = calculate_bitwise_shift_08000c44(tempVar3);\n      tempVar = calculate_floating_point_08000cec(tempVar,tempVar2);\n      tempVar = calculate_floating_point_08000cec(tempVar,DAT_200002ec);\n      tempVar = calculate_floating_point_08000ad8(tempVar,DAT_20000024);\n      DAT_200002e0 = calculate_floating_point_08000cec(tempVar,DAT_20000030);\n      tempVar = calculate_bitwise_shift_08000c44(result);\n      tempVar2 = calculate_floating_point_08000cec(tempVar,tempVar2);\n      tempVar2 = calculate_floating_point_08000cec(tempVar2,DAT_200002f0);\n      tempVar2 = calculate_floating_point_08000ad8(tempVar2,DAT_20000028);\n      DAT_200002e4 = calculate_floating_point_08000cec(tempVar2,DAT_20000034);\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002d88": "process_and_handle_data_08002d88",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "iVar1": "result",
                "uVar2": "tempVar",
                "uVar3": "tempVar2",
                "iVar4": "tempVar3",
                "local_28": "data1",
                "uStack_26": "data2",
                "uStack_25": "data3",
                "local_24": "data4",
                "local_23": "data5",
                "local_22": "data6"
            },
            "calling": [
                "FUN_08002f28"
            ],
            "called": [
                "FUN_08000cec",
                "FUN_08000ad8",
                "FUN_08000c44",
                "FUN_0800407c",
                "FUN_080040e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ea0": {
            "entrypoint": "0x08002ea0",
            "current_name": "initialize_and_process_sensor_data_08002ea0",
            "code": "\nvoid initialize_and_process_sensor_data_08002ea0(undefined4 sensor_param_1,undefined4 sensor_param_2,undefined4 sensor_param_3,undefined4 sensor_param_4)\n\n{\n  undefined4 extra_output_param;\n  \n  initialize_sensor();\n  process_sensor_data();\n  set_global_variable(0x3f19999a);\n  set_parameter_value(0,extra_output_param,sensor_param_3,sensor_param_4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ea0": "initialize_and_process_sensor_data_08002ea0",
                "param_1": "sensor_param_1",
                "param_2": "sensor_param_2",
                "param_3": "sensor_param_3",
                "param_4": "sensor_param_4",
                "extraout_r1": "extra_output_param",
                "initialize_sensor_08002ad0": "initialize_sensor",
                "process_sensor_data_08002cb0": "process_sensor_data",
                "set_global_variable_08003314": "set_global_variable",
                "set_param_value_08003320": "set_parameter_value"
            },
            "calling": [
                "FUN_08004194"
            ],
            "called": [
                "FUN_08003314",
                "FUN_08002cb0",
                "FUN_08003320",
                "FUN_08002ad0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ec0": {
            "entrypoint": "0x08002ec0",
            "current_name": "calculate_float_sum_08002ec0",
            "code": "\nvoid calculateFloatSum_08002ec0(void)\n\n{\n  undefined4 result1;\n  undefined4 initialValue;\n  undefined4 valueToCalculate;\n  \n  initialValue = DAT_2000024c;\n  valueToCalculate = DAT_20000010;\n  result1 = calculateFloatProduct(0x3f800000,DAT_20000010);\n  initialValue = calculateFloatDivision(result1,initialValue);\n  valueToCalculate = calculateFloatDivision(valueToCalculate,DAT_2000000c);\n  DAT_2000000c = calculateFloatAddition(valueToCalculate,initialValue);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ec0": "calculate_float_sum_08002ec0",
                "uVar1": "result1",
                "uVar2": "initialValue",
                "uVar3": "valueToCalculate",
                "calculate_floating_point_08000ad8": "calculateFloatProduct",
                "calculate_floating_point_08000cec": "calculateFloatDivision",
                "calculate_float_addition_08000adc": "calculateFloatAddition"
            },
            "calling": [
                "FUN_08004a84",
                "FUN_08002f28"
            ],
            "called": [
                "FUN_08000adc",
                "FUN_08000ad8",
                "FUN_08000cec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ed4": {
            "entrypoint": "0x08002ed4",
            "current_name": "calculate_and_update_ram_value_08002ed4",
            "code": "\nvoid calculateAndUpdateRAMValue_08002ed4(void)\n\n{\n  undefined4 result1;\n  undefined4 originalRAMValue;\n  undefined4 newRAMValue;\n  \n  originalRAMValue = DAT_20000248;\n  newRAMValue = ramValue1;\n  result1 = FUN_08000ad8(0x3f800000,ramValue1);\n  originalRAMValue = FUN_08000cec(result1,originalRAMValue);\n  newRAMValue = FUN_08000cec(newRAMValue,ramValue2);\n  ramValue2 = FUN_08000adc(newRAMValue,originalRAMValue);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ed4": "calculate_and_update_ram_value_08002ed4",
                "uVar1": "result1",
                "uVar2": "originalRAMValue",
                "uVar3": "newRAMValue",
                "uRam20000018": "ramValue1",
                "uRam20000014": "ramValue2"
            },
            "calling": [
                "FUN_08004a84",
                "FUN_08002f28"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ee8": {
            "entrypoint": "0x08002ee8",
            "current_name": "process_data_08002ee8",
            "code": "\nvoid processData_08002ee8(void)\n\n{\n  undefined4 data;\n  int concatenationResult;\n  \n  data = DAT_20000250;\n  concatenationResult = checkConcatenationResult(DAT_20000250,0xc3340000);\n  if ((concatenationResult != 0) && (concatenationResult = isStringEmpty(data,0x42b40000), concatenationResult != 0)) {\n    calculateFloatAddition(data,0x42b40000);\n    return;\n  }\n  calculateFloatingPoint(data,0x43870000);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ee8": "process_data_08002ee8",
                "uVar1": "data",
                "iVar2": "concatenationResult",
                "check_concatenation_result_08001050": "checkConcatenationResult",
                "is_string_empty_08001028": "isStringEmpty",
                "calculate_float_addition_08000adc": "calculateFloatAddition",
                "calculate_floating_point_08000ad8": "calculateFloatingPoint"
            },
            "calling": [
                "FUN_08004a84",
                "FUN_08002f28"
            ],
            "called": [
                "FUN_08000adc",
                "FUN_08001050",
                "FUN_08000ad8",
                "FUN_08001028"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002f28": {
            "entrypoint": "0x08002f28",
            "current_name": "process_data_and_calculate_results_08002f28",
            "code": "\n\n\nvoid process_data_and_calculate_results_08002f28(void)\n\n{\n  undefined4 uVar1;\n  \n  initialize_mpu9250_08002b48();\n  initialize_mpu9250_08002bf0();\n  process_and_handle_data_08002d88();\n  DAT_20000258 = thunk_get_data_value_0800115c();\n  uVar1 = calculate_value_08000c3c(DAT_20000258 - DAT_20000254);\n  calculate_floating_point_value_08000e54(uVar1,0x447a0000);\n  set_param_value_08003320();\n  DAT_20000254 = DAT_20000258;\n  calculate_final_result_08003330(DAT_200002d4 + -0x80000000,DAT_200002d0 + -0x80000000,DAT_200002d8,DAT_200002c8,\n               DAT_200002c4,DAT_200002cc + -0x80000000,DAT_200002dc,DAT_200002e0,DAT_200002e4,\n               &DAT_20000248);\n  _DAT_2000142a = (undefined2)((uint)(int)DAT_200002f4 / 100);\n  _DAT_2000142e = (undefined2)((uint)(int)DAT_200002f8 / 100);\n  DAT_2000142c = (undefined2)((uint)(int)DAT_200002f6 / 100);\n  DAT_20001430 = DAT_200002be;\n  _DAT_20001432 = DAT_200002c0;\n  DAT_20001434 = DAT_200002c2;\n  _DAT_20001436 = DAT_200002b8;\n  DAT_20001438 = DAT_200002ba;\n  DAT_2000143a = DAT_200002bc;\n  uVar1 = calculate_and_update_ram_value_08002ed4();\n  calculate_floating_point_08000cec(uVar1,0x41200000);\n  DAT_20001395._0_2_ = extract_integer_bits_08001078();\n  uVar1 = calculate_float_sum_08002ec0();\n  calculate_floating_point_08000cec(uVar1,0x41200000);\n  DAT_20001395._2_2_ = extract_integer_bits_08001078();\n  process_data_08002ee8();\n  DAT_20001399 = extract_integer_bits_08001078();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002f28": "process_data_and_calculate_results_08002f28"
            },
            "calling": [
                "FUN_0800411c"
            ],
            "called": [
                "thunk_FUN_0800115c",
                "FUN_08002b48",
                "FUN_08002d88",
                "FUN_08000c3c",
                "FUN_08002bf0",
                "FUN_08001078",
                "FUN_08002ee8",
                "FUN_08000cec",
                "FUN_08003320",
                "FUN_08002ec0",
                "FUN_08003330",
                "FUN_08000e54",
                "FUN_08002ed4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003034": {
            "entrypoint": "0x08003034",
            "current_name": "convert_data_to_uint_08003034",
            "code": "\nuint convert_data_to_uint_08003034(undefined4 input_param_1,undefined4 input_param_2,undefined4 input_param_3,undefined4 input_param_4)\n\n{\n  undefined4 converted_data;\n  \n  converted_data = input_param_4;\n  process_data_080040b8(0xee,0,&converted_data,3,\"../Src/MS5611.c\",0x8c,input_param_3);\n  return (uint)CONCAT12((undefined)converted_data,CONCAT11(converted_data._1_1_,converted_data._2_1_));\n}\n\n",
            "renaming": {
                "FUN_08003034": "convert_data_to_uint_08003034",
                "param_1": "input_param_1",
                "param_2": "input_param_2",
                "param_3": "input_param_3",
                "param_4": "input_param_4",
                "local_c": "converted_data"
            },
            "calling": [
                "FUN_0800411c"
            ],
            "called": [
                "FUN_080040b8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003068": {
            "entrypoint": "0x08003068",
            "current_name": "get_data_value_08003068",
            "code": "\nundefined4 get_data_value_08003068(void)\n\n{\n  return DAT_200002fc;\n}\n\n",
            "renaming": {
                "FUN_08003068": "get_data_value_08003068"
            },
            "calling": [
                "FUN_08004a30"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003298": {
            "entrypoint": "0x08003298",
            "current_name": "initialize_and_store_data_08003298",
            "code": "\nvoid initializeAndStoreData_08003298(void)\n\n{\n  int counter;\n  undefined byte1;\n  undefined byte2;\n  \n  counter = 0;\n  validateAndProcessInput(0xee,0x1e,1);\n  thunk_FUNC_08001168(10);\n  DAT_20000038 = 8;\n  do {\n    byte1 = 0;\n    byte2 = 0;\n    handleAndStoreData(0xee,counter + 0xa0U & 0xffff,&byte1,2,\"../Src/MS5611.c\",0x7c);\n    *(ushort *)((int)&DAT_2000025c + counter) = CONCAT11(byte1,byte2);\n    counter = counter + 2;\n  } while (counter != 0x10);\n  counter = 0;\n  do {\n    (&DAT_20000300)[counter] = 0;\n    counter = counter + 1;\n  } while (counter != 0x14);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003298": "initialize_and_store_data_08003298",
                "local_1c": "byte1",
                "local_1b": "byte2",
                "iVar1": "counter",
                "validate_and_process_input_0800403c": "validateAndProcessInput",
                "handle_and_store_data_080040e8": "handleAndStoreData"
            },
            "calling": [
                "FUN_08004194"
            ],
            "called": [
                "FUN_080040e8",
                "thunk_FUN_08001168",
                "FUN_0800403c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003314": {
            "entrypoint": "0x08003314",
            "current_name": "set_global_variable_08003314",
            "code": "\nvoid setGlobalVariable_08003314(undefined4 value)\n\n{\n  DAT_2000035c = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003314": "set_global_variable_08003314",
                "param_1": "value"
            },
            "calling": [
                "FUN_08002ea0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003320": {
            "entrypoint": "0x08003320",
            "current_name": "set_param_value_08003320",
            "code": "\nvoid set_param_value_08003320(undefined4 new_value)\n\n{\n  DAT_20000360 = new_value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003320": "set_param_value_08003320",
                "param_1": "new_value"
            },
            "calling": [
                "FUN_08002ea0",
                "FUN_08002f28"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003330": {
            "entrypoint": "0x08003330",
            "current_name": "calculate_final_result_08003330",
            "code": "\nvoid calculate_final_result_08003330(undefined4 value_1,undefined4 value_2,undefined4 value_3,undefined4 value_4,\n                 undefined4 value_5,undefined4 value_6,undefined4 value_7,undefined4 value_8,\n                 undefined4 value_9,undefined4 *result_array)\n\n{\n  undefined4 temp_1;\n  undefined4 temp_2;\n  int result;\n  undefined4 temp_4;\n  undefined4 temp_5;\n  undefined4 temp_6;\n  undefined4 temp_7;\n  int temp_8;\n  undefined4 temp_9;\n  undefined4 temp_10;\n  undefined4 temp_11;\n  undefined4 temp_12;\n  undefined4 temp_13;\n  undefined4 temp_14;\n  undefined4 temp_15;\n  undefined4 temp_16;\n  undefined4 temp_17;\n  undefined4 temp_18;\n  int temp_19;\n  undefined4 temp_20;\n  undefined4 temp_21;\n  undefined4 temp_22;\n  undefined4 temp_23;\n  undefined4 temp_24;\n  undefined4 temp_25;\n  int temp_26;\n  undefined4 temp_27;\n  undefined4 temp_28;\n  undefined4 temp_29;\n  int temp_30;\n  undefined8 temp_31;\n  undefined8 temp_32;\n  \n  temp_29 = DAT_20000048;\n  temp_28 = DAT_20000044;\n  temp_30 = DAT_20000040;\n  temp_27 = DAT_2000003c;\n  temp_1 = calculate_floating_point_08000cec(value_1,value_1);\n  temp_2 = calculate_floating_point_08000cec(value_2);\n  temp_1 = calculate_float_addition_08000adc(temp_1,temp_2);\n  temp_2 = calculate_floating_point_08000cec(value_3);\n  calculate_float_addition_08000adc(temp_1,temp_2);\n  bitwise_shift_and_mask_08000428();\n  calculate_result_08005bc8();\n  temp_1 = convert_to_float_08000a30();\n  result = check_concatenated_param_values_08001014(temp_1,0);\n  if (result == 0) {\n    temp_2 = calculate_floating_point_08000cec(value_7);\n    temp_4 = calculate_floating_point_08000cec(value_8);\n    temp_2 = calculate_float_addition_08000adc(temp_2,temp_4);\n    temp_4 = calculate_floating_point_08000cec(value_9);\n    calculate_float_addition_08000adc(temp_2,temp_4);\n    bitwise_shift_and_mask_08000428();\n    calculate_result_08005bc8();\n    temp_2 = convert_to_float_08000a30();\n    result = check_concatenated_param_values_08001014(temp_2,0);\n    if (result == 0) {\n      temp_31 = bitwise_shift_and_mask_08000428(value_4);\n      calculate_unsigned_product_080004d0((int)temp_31,(int)((ulonglong)temp_31 >> 0x20),0xa2529d39,0x3f91df46);\n      temp_4 = convert_to_float_08000a30();\n      temp_31 = bitwise_shift_and_mask_08000428(value_5);\n      calculate_unsigned_product_080004d0((int)temp_31,(int)((ulonglong)temp_31 >> 0x20),0xa2529d39,0x3f91df46);\n      temp_5 = convert_to_float_08000a30();\n      temp_31 = bitwise_shift_and_mask_08000428(value_6);\n      calculate_unsigned_product_080004d0((int)temp_31,(int)((ulonglong)temp_31 >> 0x20),0xa2529d39,0x3f91df46);\n      temp_6 = convert_to_float_08000a30();\n      result = calculate_float_addition_08000adc(temp_27);\n      temp_7 = calculate_float_addition_08000adc(temp_30);\n      temp_8 = calculate_float_addition_08000adc(temp_28,temp_28);\n      temp_9 = calculate_float_addition_08000adc(temp_29,temp_29);\n      temp_10 = calculate_floating_point_08000cec(temp_27);\n      temp_11 = calculate_floating_point_08000cec(temp_27,temp_30);\n      temp_12 = calculate_floating_point_08000cec(temp_27,temp_28);\n      temp_13 = calculate_floating_point_08000cec(temp_30);\n      temp_14 = calculate_floating_point_08000cec(temp_30,temp_29);\n      temp_15 = calculate_floating_point_08000cec(temp_28,temp_28);\n      temp_16 = calculate_floating_point_08000cec(temp_29,temp_29);\n      temp_1 = calculate_floating_point_value_08000e54(0x3f800000,temp_1);\n      temp_2 = calculate_floating_point_value_08000e54(0x3f800000,temp_2);\n      temp_17 = calculate_floating_point_08000cec(value_7,temp_2);\n      temp_18 = calculate_floating_point_08000cec(value_8,temp_2);\n      temp_2 = calculate_floating_point_08000cec(value_9,temp_2);\n      temp_19 = calculate_floating_point_08000cec(result,temp_17);\n      temp_20 = calculate_floating_point_08000cec(result,temp_18);\n      temp_21 = calculate_floating_point_08000cec(result,temp_2);\n      temp_22 = calculate_floating_point_08000cec(temp_7,temp_17);\n      temp_23 = calculate_floating_point_08000cec(temp_10,temp_17);\n      temp_24 = calculate_floating_point_08000cec(temp_29,temp_20);\n      temp_23 = calculate_floating_point_08000ad8(temp_23,temp_24);\n      temp_24 = calculate_floating_point_08000cec(temp_28,temp_21);\n      temp_23 = calculate_float_addition_08000adc(temp_23,temp_24);\n      temp_24 = calculate_floating_point_08000cec(temp_13,temp_17);\n      temp_23 = calculate_float_addition_08000adc(temp_23,temp_24);\n      temp_24 = calculate_floating_point_08000cec(temp_7,temp_18);\n      temp_24 = calculate_floating_point_08000cec(temp_24,temp_28);\n      temp_23 = calculate_float_addition_08000adc(temp_23,temp_24);\n      temp_24 = calculate_floating_point_08000cec(temp_7,temp_2);\n      temp_24 = calculate_floating_point_08000cec(temp_24,temp_29);\n      temp_23 = calculate_float_addition_08000adc(temp_23,temp_24);\n      temp_24 = calculate_floating_point_08000cec(temp_15,temp_17);\n      temp_23 = calculate_floating_point_08000ad8(temp_23,temp_24);\n      temp_24 = calculate_floating_point_08000cec(temp_16,temp_17);\n      temp_23 = calculate_floating_point_08000ad8(temp_23,temp_24);\n      temp_24 = calculate_floating_point_08000cec(temp_29,temp_19);\n      temp_25 = calculate_floating_point_08000cec(temp_10,temp_18);\n      temp_24 = calculate_float_addition_08000adc(temp_24,temp_25);\n      temp_21 = calculate_floating_point_08000cec(temp_30,temp_21);\n      temp_21 = calculate_floating_point_08000ad8(temp_24,temp_21);\n      temp_24 = calculate_floating_point_08000cec(temp_28,temp_22);\n      temp_21 = calculate_float_addition_08000adc(temp_21,temp_24);\n      temp_24 = calculate_floating_point_08000cec(temp_13,temp_18);\n      temp_21 = calculate_floating_point_08000ad8(temp_21,temp_24);\n      temp_24 = calculate_floating_point_08000cec(temp_15,temp_18);\n      temp_21 = calculate_float_addition_08000adc(temp_21,temp_24);\n      temp_24 = calculate_floating_point_08000cec(temp_8,temp_2);\n      temp_24 = calculate_floating_point_08000cec(temp_24,temp_29);\n      temp_21 = calculate_float_addition_08000adc(temp_21,temp_24);\n      temp_24 = calculate_floating_point_08000cec(temp_16,temp_18);\n      temp_21 = calculate_floating_point_08000ad8(temp_21,temp_24);\n      temp_23 = calculate_floating_point_08000cec(temp_23,temp_23);\n      temp_21 = calculate_floating_point_08000cec(temp_21,temp_21);\n      calculate_float_addition_08000adc(temp_23,temp_21);\n      bitwise_shift_and_mask_08000428();\n      calculate_result_08005bc8();\n      temp_26 = convert_to_float_08000a30();\n      temp_21 = calculate_floating_point_08000cec(temp_19 + -0x80000000,temp_28);\n      temp_20 = calculate_floating_point_08000cec(temp_30,temp_20);\n      temp_20 = calculate_float_addition_08000adc(temp_21,temp_20);\n      temp_10 = calculate_floating_point_08000cec(temp_10,temp_2);\n      temp_10 = calculate_float_addition_08000adc(temp_20,temp_10);\n      temp_20 = calculate_floating_point_08000cec(temp_29,temp_22);\n      temp_10 = calculate_float_addition_08000adc(temp_10,temp_20);\n      temp_20 = calculate_floating_point_08000cec(temp_13,temp_2);\n      temp_10 = calculate_floating_point_08000ad8(temp_10,temp_20);\n      temp_20 = calculate_floating_point_08000cec(temp_8,temp_18);\n      temp_20 = calculate_floating_point_08000cec(temp_20,temp_29);\n      temp_10 = calculate_float_addition_08000adc(temp_10,temp_20);\n      temp_20 = calculate_floating_point_08000cec(temp_15,temp_2);\n      temp_10 = calculate_floating_point_08000ad8(temp_10,temp_20);\n      temp_20 = calculate_floating_point_08000cec(temp_16,temp_2);\n      temp_10 = calculate_float_addition_08000adc(temp_10,temp_20);\n      temp_20 = calculate_float_addition_08000adc(temp_10,temp_10);\n      temp_21 = calculate_float_addition_08000adc(temp_14);\n      temp_22 = calculate_floating_point_08000cec(temp_28,result);\n      temp_21 = calculate_floating_point_08000ad8(temp_21,temp_22);\n      temp_22 = calculate_floating_point_08000cec(value_1,temp_1);\n      temp_21 = calculate_floating_point_08000ad8(temp_21,temp_22);\n      temp_22 = calculate_floating_point_08000cec(temp_29,temp_8);\n      temp_23 = calculate_float_addition_08000adc(temp_11);\n      temp_22 = calculate_float_addition_08000adc(temp_22,temp_23);\n      temp_23 = calculate_floating_point_08000cec(value_2,temp_1);\n      temp_22 = calculate_floating_point_08000ad8(temp_22,temp_23);\n      temp_23 = calculate_floating_point_08000cec(temp_28,temp_10);\n      temp_24 = calculate_floating_point_08000ad8(0x3f000000,temp_15);\n      temp_16 = calculate_floating_point_08000ad8(temp_24,temp_16);\n      temp_16 = calculate_floating_point_08000cec(temp_16,temp_26);\n      temp_24 = calculate_floating_point_08000ad8(temp_14,temp_12);\n      temp_24 = calculate_floating_point_08000cec(temp_24,temp_10);\n      temp_16 = calculate_float_addition_08000adc(temp_16,temp_24);\n      temp_16 = calculate_floating_point_08000ad8(temp_16,temp_17);\n      temp_17 = calculate_floating_point_08000cec(temp_30,temp_10);\n      temp_24 = calculate_floating_point_08000cec(temp_30,temp_28);\n      temp_25 = calculate_floating_point_08000cec(temp_27,temp_29);\n      temp_24 = calculate_floating_point_08000ad8(temp_24,temp_25);\n      temp_24 = calculate_floating_point_08000cec(temp_24,temp_26);\n      temp_25 = calculate_floating_point_08000cec(temp_28,temp_29);\n      temp_11 = calculate_float_addition_08000adc(temp_25,temp_11);\n      temp_11 = calculate_floating_point_08000cec(temp_11,temp_10);\n      temp_11 = calculate_float_addition_08000adc(temp_24,temp_11);\n      temp_11 = calculate_floating_point_08000ad8(temp_11,temp_18);\n      temp_18 = calculate_floating_point_08000cec(temp_28,temp_26);\n      temp_24 = calculate_floating_point_08000ad8(0x3f000000,temp_13);\n      temp_24 = calculate_floating_point_08000ad8(temp_24,temp_15);\n      temp_24 = calculate_floating_point_08000cec(temp_24,temp_10);\n      temp_12 = calculate_float_addition_08000adc(temp_12,temp_14);\n      temp_12 = calculate_floating_point_08000cec(temp_12,temp_26);\n      temp_12 = calculate_float_addition_08000adc(temp_24,temp_12);\n      temp_2 = calculate_floating_point_08000ad8(temp_12,temp_2);\n      temp_12 = calculate_floating_point_08000cec(temp_8 + -0x80000000,temp_21);\n      temp_14 = calculate_floating_point_08000cec(temp_7,temp_22);\n      temp_12 = calculate_float_addition_08000adc(temp_12,temp_14);\n      temp_14 = calculate_floating_point_08000cec(temp_23,temp_16);\n      temp_12 = calculate_floating_point_08000ad8(temp_12,temp_14);\n      temp_14 = calculate_floating_point_08000cec(temp_29,temp_26 + -0x80000000);\n      temp_14 = calculate_float_addition_08000adc(temp_14,temp_17);\n      temp_14 = calculate_floating_point_08000cec(temp_14,temp_11);\n      temp_12 = calculate_float_addition_08000adc(temp_12,temp_14);\n      temp_14 = calculate_floating_point_08000cec(temp_18,temp_2);\n      temp_12 = calculate_float_addition_08000adc(temp_12,temp_14);\n      temp_13 = calculate_float_addition_08000adc(temp_13);\n      temp_13 = calculate_floating_point_08000ad8(0x3f800000,temp_13);\n      temp_14 = calculate_float_addition_08000adc(temp_15);\n      temp_13 = calculate_floating_point_08000ad8(temp_13,temp_14);\n      temp_1 = calculate_floating_point_08000cec(value_3,temp_1);\n      temp_1 = calculate_floating_point_08000ad8(temp_13,temp_1);\n      temp_13 = calculate_floating_point_08000cec(temp_29,temp_10);\n      temp_10 = calculate_floating_point_08000cec(temp_27,temp_10);\n      temp_14 = calculate_floating_point_08000cec(temp_9,temp_21);\n      temp_15 = calculate_floating_point_08000cec(result,temp_22);\n      temp_14 = calculate_float_addition_08000adc(temp_14,temp_15);\n      temp_15 = calculate_floating_point_08000cec(temp_30,0x40800000);\n      temp_15 = calculate_floating_point_08000cec(temp_15,temp_1);\n      temp_14 = calculate_floating_point_08000ad8(temp_14,temp_15);\n      temp_15 = calculate_floating_point_08000cec(temp_16,temp_13);\n      temp_14 = calculate_float_addition_08000adc(temp_14,temp_15);\n      temp_15 = calculate_float_addition_08000adc(temp_18,temp_10);\n      temp_15 = calculate_floating_point_08000cec(temp_15,temp_11);\n      temp_14 = calculate_float_addition_08000adc(temp_14,temp_15);\n      temp_15 = calculate_floating_point_08000cec(temp_29,temp_26);\n      temp_18 = calculate_floating_point_08000cec(temp_30,temp_20);\n      temp_15 = calculate_floating_point_08000ad8(temp_15,temp_18);\n      temp_15 = calculate_floating_point_08000cec(temp_15,temp_2);\n      temp_14 = calculate_float_addition_08000adc(temp_14,temp_15);\n      temp_19 = calculate_float_addition_08000adc(temp_26,temp_26);\n      temp_15 = calculate_floating_point_08000cec(temp_30,temp_26);\n      temp_18 = calculate_floating_point_08000cec(result + -0x80000000,temp_21);\n      temp_9 = calculate_floating_point_08000cec(temp_9,temp_22);\n      temp_9 = calculate_float_addition_08000adc(temp_18,temp_9);\n      temp_18 = calculate_floating_point_08000cec(temp_28,0x40800000);\n      temp_1 = calculate_floating_point_08000cec(temp_18,temp_1);\n      temp_1 = calculate_floating_point_08000ad8(temp_9,temp_1);\n      temp_9 = calculate_floating_point_08000cec(temp_28,temp_19 + -0x80000000);\n      temp_9 = calculate_floating_point_08000ad8(temp_9,temp_10);\n      temp_9 = calculate_floating_point_08000cec(temp_9,temp_16);\n      temp_1 = calculate_float_addition_08000adc(temp_1,temp_9);\n      temp_9 = calculate_float_addition_08000adc(temp_13,temp_15);\n      temp_9 = calculate_floating_point_08000cec(temp_9,temp_11);\n      temp_1 = calculate_float_addition_08000adc(temp_1,temp_9);\n      temp_9 = calculate_floating_point_08000cec(temp_27,temp_26);\n      temp_10 = calculate_floating_point_08000cec(temp_28,temp_20);\n      temp_9 = calculate_floating_point_08000ad8(temp_9,temp_10);\n      temp_9 = calculate_floating_point_08000cec(temp_9,temp_2);\n      temp_9 = calculate_float_addition_08000adc(temp_1,temp_9);\n      temp_1 = calculate_floating_point_08000cec(temp_7,temp_21);\n      temp_7 = calculate_floating_point_08000cec(temp_8,temp_22);\n      temp_1 = calculate_float_addition_08000adc(temp_1,temp_7);\n      temp_7 = calculate_floating_point_08000cec(temp_29,temp_19 + -0x80000000);\n      temp_7 = calculate_float_addition_08000adc(temp_7,temp_17);\n      temp_7 = calculate_floating_point_08000cec(temp_7,temp_16);\n      temp_1 = calculate_float_addition_08000adc(temp_1,temp_7);\n      temp_7 = calculate_floating_point_08000cec(temp_27,temp_26 + -0x80000000);\n      temp_7 = calculate_float_addition_08000adc(temp_7,temp_23);\n      temp_7 = calculate_floating_point_08000cec(temp_7,temp_11);\n      temp_1 = calculate_float_addition_08000adc(temp_1,temp_7);\n      temp_2 = calculate_floating_point_08000cec(temp_2,temp_15);\n      temp_7 = calculate_float_addition_08000adc(temp_1,temp_2);\n      temp_1 = calculate_floating_point_08000cec(temp_12);\n      temp_2 = calculate_floating_point_08000cec(temp_14);\n      temp_1 = calculate_float_addition_08000adc(temp_1,temp_2);\n      temp_2 = calculate_floating_point_08000cec(temp_9,temp_9);\n      temp_1 = calculate_float_addition_08000adc(temp_1,temp_2);\n      temp_2 = calculate_floating_point_08000cec(temp_7,temp_7);\n      calculate_float_addition_08000adc(temp_1,temp_2);\n      bitwise_shift_and_mask_08000428();\n      calculate_result_08005bc8();\n      temp_1 = convert_to_float_08000a30();\n      temp_10 = calculate_floating_point_value_08000e54(0x3f800000,temp_1);\n      temp_1 = DAT_2000035c;\n      temp_2 = calculate_floating_point_08000cec(temp_30 + -0x80000000,temp_4);\n      temp_11 = calculate_floating_point_08000cec(temp_28,temp_5);\n      temp_2 = calculate_floating_point_08000ad8(temp_2,temp_11);\n      temp_11 = calculate_floating_point_08000cec(temp_29,temp_6);\n      temp_2 = calculate_floating_point_08000ad8(temp_2,temp_11);\n      temp_11 = calculate_floating_point_08000cec(temp_2,0x3f000000);\n      temp_12 = calculate_floating_point_08000cec(temp_12,temp_10);\n      temp_2 = DAT_20000360;\n      temp_12 = calculate_floating_point_08000cec(temp_12,temp_1);\n      temp_11 = calculate_floating_point_08000ad8(temp_11,temp_12);\n      temp_2 = calculate_floating_point_08000cec(temp_11,temp_2);\n      temp_11 = calculate_float_addition_08000adc(temp_2,temp_27);\n      temp_12 = calculate_floating_point_08000cec(temp_27,temp_4);\n      temp_13 = calculate_floating_point_08000cec(temp_28,temp_6);\n      temp_2 = DAT_20000360;\n      temp_12 = calculate_float_addition_08000adc(temp_12,temp_13);\n      temp_13 = calculate_floating_point_08000cec(temp_29,temp_5);\n      temp_12 = calculate_floating_point_08000ad8(temp_12,temp_13);\n      temp_12 = calculate_floating_point_08000cec(temp_12,0x3f000000);\n      temp_13 = calculate_floating_point_08000cec(temp_14,temp_10);\n      temp_13 = calculate_floating_point_08000cec(temp_13,temp_1);\n      temp_12 = calculate_floating_point_08000ad8(temp_12,temp_13);\n      temp_2 = calculate_floating_point_08000cec(temp_12,temp_2);\n      temp_12 = calculate_float_addition_08000adc(temp_2,temp_30);\n      temp_2 = DAT_20000360;\n      temp_13 = calculate_floating_point_08000cec(temp_27,temp_5);\n      temp_14 = calculate_floating_point_08000cec(temp_30,temp_6);\n      temp_13 = calculate_floating_point_08000ad8(temp_13,temp_14);\n      temp_14 = calculate_floating_point_08000cec(temp_29,temp_4);\n      temp_13 = calculate_float_addition_08000adc(temp_13,temp_14);\n      temp_13 = calculate_floating_point_08000cec(temp_13,0x3f000000);\n      temp_9 = calculate_floating_point_08000cec(temp_9,temp_10);\n      temp_9 = calculate_floating_point_08000cec(temp_9,temp_1);\n      temp_9 = calculate_floating_point_08000ad8(temp_13,temp_9);\n      temp_2 = calculate_floating_point_08000cec(temp_9,temp_2);\n      temp_2 = calculate_float_addition_08000adc(temp_2,temp_28);\n      temp_27 = calculate_floating_point_08000cec(temp_27,temp_6);\n      temp_5 = calculate_floating_point_08000cec(temp_30,temp_5);\n      temp_27 = calculate_float_addition_08000adc(temp_27,temp_5);\n      temp_28 = calculate_floating_point_08000cec(temp_28,temp_4);\n      temp_27 = calculate_floating_point_08000ad8(temp_27,temp_28);\n      temp_28 = calculate_floating_point_08000cec(temp_27,0x3f000000);\n      temp_27 = calculate_floating_point_08000cec(temp_7,temp_10);\n      temp_1 = calculate_floating_point_08000cec(temp_27,temp_1);\n      temp_27 = DAT_20000360;\n      temp_28 = calculate_floating_point_08000ad8(temp_28,temp_1);\n      temp_27 = calculate_floating_point_08000cec(temp_28,temp_27);\n      temp_27 = calculate_float_addition_08000adc(temp_27,temp_29);\n      temp_28 = calculate_floating_point_08000cec(temp_11,temp_11);\n      temp_29 = calculate_floating_point_08000cec(temp_12,temp_12);\n      temp_28 = calculate_float_addition_08000adc(temp_28,temp_29);\n      temp_29 = calculate_floating_point_08000cec(temp_2,temp_2);\n      temp_28 = calculate_float_addition_08000adc(temp_28,temp_29);\n      temp_29 = calculate_floating_point_08000cec(temp_27,temp_27);\n      calculate_float_addition_08000adc(temp_28,temp_29);\n      bitwise_shift_and_mask_08000428();\n      calculate_result_08005bc8();\n      temp_28 = convert_to_float_08000a30();\n      temp_28 = calculate_floating_point_value_08000e54(0x3f800000,temp_28);\n      temp_29 = calculate_floating_point_08000cec(temp_11,temp_28);\n      DAT_2000003c = temp_29;\n      temp_30 = calculate_floating_point_08000cec(temp_12,temp_28);\n      DAT_20000040 = temp_30;\n      temp_1 = calculate_floating_point_08000cec(temp_2,temp_28);\n      DAT_20000044 = temp_1;\n      DAT_20000048 = calculate_floating_point_08000cec(temp_27,temp_28);\n      temp_27 = calculate_floating_point_08000cec(temp_30,DAT_20000048);\n      temp_28 = calculate_floating_point_08000cec(temp_29,temp_1);\n      temp_27 = calculate_floating_point_08000ad8(temp_27,temp_28);\n      calculate_float_addition_08000adc(temp_27,temp_27);\n      bitwise_shift_and_mask_08000428();\n      temp_31 = process_inputs_and_return_result_08005854();\n      temp_31 = calculate_unsigned_product_080004d0((int)temp_31,(int)((ulonglong)temp_31 >> 0x20),0,0x40668000);\n      calculate_floating_point_08000724((int)temp_31,(int)((ulonglong)temp_31 >> 0x20),0x54442d18,0x400921fb);\n      temp_27 = convert_to_float_08000a30();\n      *result_array = temp_27;\n      temp_30 = DAT_20000040;\n      temp_27 = DAT_2000003c;\n      temp_28 = calculate_floating_point_08000cec(DAT_2000003c,DAT_2000003c);\n      temp_29 = calculate_floating_point_08000cec(temp_30,temp_30);\n      temp_29 = calculate_floating_point_08000ad8(temp_28,temp_29);\n      temp_28 = DAT_20000044;\n      temp_1 = calculate_floating_point_08000cec(DAT_20000044,DAT_20000044);\n      temp_1 = calculate_floating_point_08000ad8(temp_29,temp_1);\n      temp_29 = DAT_20000048;\n      temp_2 = calculate_floating_point_08000cec(DAT_20000048,DAT_20000048);\n      calculate_float_addition_08000adc(temp_1,temp_2);\n      temp_31 = bitwise_shift_and_mask_08000428();\n      temp_27 = calculate_floating_point_08000cec(temp_27,temp_30);\n      temp_28 = calculate_floating_point_08000cec(temp_28,temp_29);\n      temp_27 = calculate_float_addition_08000adc(temp_27,temp_28);\n      calculate_float_addition_08000adc(temp_27,temp_27);\n      temp_32 = bitwise_shift_and_mask_08000428();\n      temp_31 = calculate_value_thunk_08006070((int)temp_32,(int)((ulonglong)temp_32 >> 0x20),(int)temp_31,\n                                  (int)((ulonglong)temp_31 >> 0x20));\n      temp_31 = calculate_unsigned_product_080004d0((int)temp_31,(int)((ulonglong)temp_31 >> 0x20),0,0x40668000);\n      calculate_floating_point_08000724((int)temp_31,(int)((ulonglong)temp_31 >> 0x20),0x54442d18,0x400921fb);\n      temp_27 = convert_to_float_08000a30();\n      result_array[1] = temp_27;\n      temp_30 = DAT_20000040;\n      temp_27 = DAT_2000003c;\n      temp_28 = calculate_floating_point_08000cec(DAT_2000003c,DAT_2000003c);\n      temp_29 = calculate_floating_point_08000cec(temp_30,temp_30);\n      temp_29 = calculate_float_addition_08000adc(temp_28,temp_29);\n      temp_28 = DAT_20000044;\n      temp_1 = calculate_floating_point_08000cec(DAT_20000044,DAT_20000044);\n      temp_1 = calculate_floating_point_08000ad8(temp_29,temp_1);\n      temp_29 = DAT_20000048;\n      temp_2 = calculate_floating_point_08000cec(DAT_20000048,DAT_20000048);\n      calculate_floating_point_08000ad8(temp_1,temp_2);\n      temp_31 = bitwise_shift_and_mask_08000428();\n      temp_28 = calculate_floating_point_08000cec(temp_30,temp_28);\n      temp_27 = calculate_floating_point_08000cec(temp_27,temp_29);\n      temp_27 = calculate_float_addition_08000adc(temp_28,temp_27);\n      calculate_float_addition_08000adc(temp_27,temp_27);\n      temp_32 = bitwise_shift_and_mask_08000428();\n      temp_31 = calculate_value_thunk_08006070((int)temp_32,(int)((ulonglong)temp_32 >> 0x20),(int)temp_31,\n                                  (int)((ulonglong)temp_31 >> 0x20));\n      temp_31 = calculate_unsigned_product_080004d0((int)temp_31,(int)((ulonglong)temp_31 >> 0x20),0,0x40668000);\n      calculate_floating_point_08000724((int)temp_31,(int)((ulonglong)temp_31 >> 0x20),0x54442d18,0x400921fb);\n      temp_27 = convert_to_float_08000a30();\n      result_array[2] = temp_27;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003330": "calculate_final_result_08003330",
                "param_1": "value_1",
                "param_2": "value_2",
                "param_3": "value_3",
                "param_4": "value_4",
                "param_5": "value_5",
                "param_6": "value_6",
                "param_7": "value_7",
                "param_8": "value_8",
                "param_9": "value_9",
                "param_10": "result_array",
                "uVar1": "temp_1",
                "uVar2": "temp_2",
                "iVar3": "result",
                "uVar4": "temp_4",
                "uVar5": "temp_5",
                "uVar6": "temp_6",
                "uVar7": "temp_7",
                "iVar8": "temp_8",
                "uVar9": "temp_9",
                "uVar10": "temp_10",
                "uVar11": "temp_11",
                "uVar12": "temp_12",
                "uVar13": "temp_13",
                "uVar14": "temp_14",
                "uVar15": "temp_15",
                "uVar16": "temp_16",
                "uVar17": "temp_17",
                "uVar18": "temp_18",
                "iVar19": "temp_19",
                "uVar20": "temp_20",
                "uVar21": "temp_21",
                "uVar22": "temp_22",
                "uVar23": "temp_23",
                "uVar24": "temp_24",
                "uVar25": "temp_25",
                "iVar26": "temp_26",
                "uVar27": "temp_27",
                "uVar28": "temp_28",
                "uVar29": "temp_29",
                "iVar30": "temp_30",
                "uVar31": "temp_31",
                "uVar32": "temp_32"
            },
            "calling": [
                "FUN_08002f28"
            ],
            "called": [
                "FUN_08000428",
                "FUN_08000724",
                "thunk_FUN_08006070",
                "FUN_08000adc",
                "FUN_08005bc8",
                "FUN_08005854",
                "FUN_08000e54",
                "FUN_08000cec",
                "FUN_08000ad8",
                "FUN_08001014",
                "FUN_08000a30",
                "FUN_080004d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003eb0": {
            "entrypoint": "0x08003eb0",
            "current_name": "extend_param_1_08003eb0",
            "code": "\nlonglong extend_param_1_08003eb0(uint initial_value)\n\n{\n  if (DAT_20000280 == 0) {\n    trigger_interrupt(0x3f);\n    return combine_values(initial_value,1);\n  }\n  return (ulonglong)initial_value << 0x20;\n}\n\n",
            "renaming": {
                "FUN_08003eb0": "extend_param_1_08003eb0",
                "param_1": "initial_value",
                "software_interrupt": "trigger_interrupt",
                "CONCAT44": "combine_values"
            },
            "calling": [
                "FUN_080041ae"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003ec8": {
            "entrypoint": "0x08003ec8",
            "current_name": "increment_and_store_08003ec8",
            "code": "\nundefined4 incrementAndStore_08003ec8(int ptr,undefined data)\n\n{\n  *(short *)(ptr + 0x804) = *(short *)(ptr + 0x804) + 1;\n  *(undefined *)(ptr + (uint)*(ushort *)(ptr + 0x802)) = data;\n  *(ushort *)(ptr + 0x802) = *(short *)(ptr + 0x802) + 1U & 0x7ff;\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08003ec8": "increment_and_store_08003ec8",
                "param_1": "ptr",
                "param_2": "data"
            },
            "calling": [
                "FUN_08004c30"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003f3c": {
            "entrypoint": "0x08003f3c",
            "current_name": "set_param_flags_08003f3c",
            "code": "\nvoid setParamFlags_08003f3c(int flag1,int flag2,int flag3)\n\n{\n  set_param2_08001424(0x40011000,0x8000,flag1 == 0);\n  set_param2_08001424(0x40011000,0x4000,flag2 == 0);\n  set_param2_08001424(0x40011000,0x2000,flag3 == 0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003f3c": "set_param_flags_08003f3c",
                "param_1": "flag1",
                "param_2": "flag2",
                "param_3": "flag3"
            },
            "calling": [
                "FUN_08004a84",
                "FUN_08004028"
            ],
            "called": [
                "FUN_08001424"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003fc4": {
            "entrypoint": "0x08003fc4",
            "current_name": "set_ptr_at_offset_08003fc4",
            "code": "\nvoid setPtrAtOffset_08003fc4(ptrType value)\n\n{\n  *(ptrType *)(DAT_200014c8 + 0x40) = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003fc4": "set_ptr_at_offset_08003fc4",
                "param_1": "value",
                "undefined4": "ptrType"
            },
            "calling": [
                "FUN_0800426c",
                "FUN_080041c4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003fd0": {
            "entrypoint": "0x08003fd0",
            "current_name": "set_pointer_to_value_08003fd0",
            "code": "\nvoid setPointerToValue_08003fd0(undefined4 newValue)\n\n{\n  *(undefined4 *)(DAT_200014c8 + 0x3c) = newValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003fd0": "set_pointer_to_value_08003fd0",
                "param_1": "newValue"
            },
            "calling": [
                "FUN_0800426c",
                "FUN_080041c4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003fdc": {
            "entrypoint": "0x08003fdc",
            "current_name": "store_parameter_in_memory_08003fdc",
            "code": "\nvoid storeParameterInMemory_08003fdc(undefined4 inputParameter)\n\n{\n  *(undefined4 *)(DAT_200015f8 + 0x38) = inputParameter;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003fdc": "store_parameter_in_memory_08003fdc",
                "param_1": "inputParameter"
            },
            "calling": [
                "FUN_0800426c",
                "FUN_080041c4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003fe8": {
            "entrypoint": "0x08003fe8",
            "current_name": "set_param_08003fe8",
            "code": "\nvoid setParam_08003fe8(undefined4 value)\n\n{\n  *(undefined4 *)(DAT_20001540 + 0x3c) = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003fe8": "set_param_08003fe8",
                "param_1": "value"
            },
            "calling": [
                "FUN_0800426c",
                "FUN_080041c4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003ff4": {
            "entrypoint": "0x08003ff4",
            "current_name": "initialize_flags_08003ff4",
            "code": "\nvoid initializeFlags_08003ff4(void)\n\n{\n  update_and_set_flag_08002538(&DAT_200015f8,4);\n  update_and_set_flag_08002538(&DAT_20001540,8);\n  update_and_set_flag_08002538(&DAT_200014c8,8);\n  update_and_set_flag_08002538(&DAT_200014c8,0xc);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003ff4": "initialize_flags_08003ff4"
            },
            "calling": [
                "FUN_08004028"
            ],
            "called": [
                "FUN_08002538"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004028": {
            "entrypoint": "0x08004028",
            "current_name": "initialize_system_08004028",
            "code": "\nvoid initialize_system_08004028(void)\n\n{\n  int loop_counter;\n  \n  initialize_and_configure_system();\n  initialize_flags();\n  loop_counter = 3;\n  do {\n    set_parameter_flags(1,0);\n    thunk_FUNC_08001168(100);\n    set_parameter_flags(0,1);\n    thunk_FUNC_08001168(100);\n    set_parameter_flags(0,0,1);\n    thunk_FUNC_08001168(100);\n    loop_counter = loop_counter + -1;\n  } while (loop_counter != 0);\n  set_parameter_flags(1,1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004028": "initialize_system_08004028",
                "iVar1": "loop_counter",
                "initialize_and_configure_system_0800458c": "initialize_and_configure_system",
                "initialize_flags_08003ff4": "initialize_flags",
                "set_param_flags_08003f3c": "set_parameter_flags"
            },
            "calling": [
                "FUN_08004194"
            ],
            "called": [
                "FUN_08003f3c",
                "FUN_08003ff4",
                "thunk_FUN_08001168",
                "FUN_0800458c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800403c": {
            "entrypoint": "0x0800403c",
            "current_name": "validate_and_process_input_0800403c",
            "code": "\nvoid validateAndProcessInput_0800403c(undefined4 arg1,undefined4 arg2,undefined flag,int thunkFlag)\n\n{\n  int validationResult;\n  undefined buffer [8];\n  \n  buffer[0] = flag;\n  validationResult = validate_input_08001828(&DAT_20001504,arg1,arg2,1,buffer,1,200);\n  if (validationResult != 0) {\n    process_error_08004490(\"../Src/i2c.c\",0x1b);\n  }\n  if (thunkFlag != 0) {\n    thunk_FUNC_08001168(0x32);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800403c": "validate_and_process_input_0800403c",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "flag",
                "param_4": "thunkFlag",
                "iVar1": "validationResult",
                "local_14": "buffer"
            },
            "calling": [
                "FUN_0800411c",
                "FUN_08002cb0",
                "FUN_08003298",
                "FUN_08002ad0"
            ],
            "called": [
                "FUN_08004490",
                "FUN_08001828",
                "thunk_FUN_08001168"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800407c": {
            "entrypoint": "0x0800407c",
            "current_name": "process_and_handle_data_0800407c",
            "code": "\nundefined process_and_handle_data_0800407c(undefined4 input_param_1,undefined4 input_param_2,undefined4 error_param_1,undefined4 error_param_2)\n\n{\n  int result;\n  undefined output_value [8];\n  \n  output_value[0] = 0;\n  result = process_data_08001938(&DAT_20001504,input_param_1,input_param_2,1,output_value,1,200);\n  if (result != 0) {\n    process_error_08004490(error_param_1,error_param_2);\n  }\n  return output_value[0];\n}\n\n",
            "renaming": {
                "FUN_0800407c": "process_and_handle_data_0800407c",
                "param_1": "input_param_1",
                "param_2": "input_param_2",
                "param_3": "error_param_1",
                "param_4": "error_param_2",
                "local_14": "output_value",
                "iVar1": "result"
            },
            "calling": [
                "FUN_08002d88",
                "FUN_08002cb0",
                "FUN_080040e8",
                "FUN_08002ad0"
            ],
            "called": [
                "FUN_08004490",
                "FUN_08001938"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080040b8": {
            "entrypoint": "0x080040b8",
            "current_name": "process_data_080040b8",
            "code": "\nvoid processData_080040b8(undefined4 inputParam1,undefined4 inputParam2,undefined4 inputParam3,undefined4 inputParam4,\n                 undefined4 errorParam1,undefined4 errorParam2)\n\n{\n  int result;\n  \n  result = process_data_08001938(&DAT_20001504,inputParam1,inputParam2,1,inputParam3,inputParam4,200,inputParam4);\n  if (result != 0) {\n    process_error_08004490(errorParam1,errorParam2);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080040b8": "process_data_080040b8",
                "param_1": "inputParam1",
                "param_2": "inputParam2",
                "param_3": "inputParam3",
                "param_4": "inputParam4",
                "param_5": "errorParam1",
                "param_6": "errorParam2",
                "iVar1": "result"
            },
            "calling": [
                "FUN_08003034"
            ],
            "called": [
                "FUN_08004490",
                "FUN_08001938"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080040e8": {
            "entrypoint": "0x080040e8",
            "current_name": "handle_and_store_data_080040e8",
            "code": "\nvoid handle_and_store_data_080040e8(undefined4 input_param1,int input_param2,int output_param_ptr,int length)\n\n{\n  undefined processed_data;\n  int index;\n  undefined *output_param;\n  int constant;\n  \n  output_param = (undefined *)(output_param_ptr + -1);\n  constant = length;\n  for (index = 0; index < length; index = index + 1) {\n    processed_data = process_and_handle_data_0800407c(input_param1,input_param2 + index & 0xffff,\"../Src/i2c.c\",0x4c,constant);\n    output_param = output_param + 1;\n    *output_param = processed_data;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080040e8": "handle_and_store_data_080040e8",
                "param_1": "input_param1",
                "param_2": "input_param2",
                "param_3": "output_param_ptr",
                "param_4": "length",
                "uVar1": "processed_data",
                "iVar2": "index",
                "puVar3": "output_param",
                "iVar4": "constant"
            },
            "calling": [
                "FUN_08002b48",
                "FUN_08002d88",
                "FUN_08002bf0",
                "FUN_08002cb0",
                "FUN_08003298"
            ],
            "called": [
                "FUN_0800407c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800411c": {
            "entrypoint": "0x0800411c",
            "current_name": "process_data_0800411c",
            "code": "\nvoid processData_0800411c(void)\n\n{\n  undefined4 *ptrVar1;\n  longlong longVar2;\n  uint var3;\n  uint var4;\n  uint var5;\n  undefined4 var6;\n  undefined4 var7;\n  int var8;\n  uint var9;\n  uint var10;\n  uint var11;\n  uint var12;\n  undefined4 *ptrVar13;\n  undefined4 unaffVar4;\n  int var14;\n  int var15;\n  bool flag16;\n  undefined8 var17;\n  \n  var8 = thunk_get_data_value_0800115c();\n  if (1 < (uint)(var8 - DAT_2000028c)) {\n    DAT_2000028c = thunk_get_data_value_0800115c();\n    process_data_and_calculate_results_08002f28();\n  }\n  var8 = thunk_get_data_value_0800115c();\n  if (2 < (uint)(var8 - DAT_20000294)) {\n    DAT_20000294 = thunk_get_data_value_0800115c();\n    process_data_08004a84();\n  }\n  var8 = thunk_get_data_value_0800115c();\n  if (3 < (uint)(var8 - DAT_20000290)) {\n    DAT_20000290 = thunk_get_data_value_0800115c();\n    initialize_data_processor_08004348();\n    initialize_data_processing_08004384();\n    extract_data_080043f0();\n    extract_and_process_data_08004410();\n    initialize_data_08004434();\n    process_and_extract_data_080043bc();\n    rearrange_and_process_data_08004458();\n  }\n  if ((DAT_20000275 != '\\0') && (DAT_20000274 != '\\0')) {\n    var15 = DAT_20000270 + (uint)DAT_20000266 * -0x100;\n    var9 = (uint)((longlong)(int)(uint)DAT_20000268 * (longlong)var15) >> 0x17 |\n            (int)((ulonglong)((longlong)(int)(uint)DAT_20000268 * (longlong)var15) >> 0x20) << 9;\n    var10 = (uint)((longlong)(int)(uint)DAT_20000264 * (longlong)var15 >> 7);\n    var11 = var10 + (uint)DAT_20000260 * 0x10000;\n    var4 = (uint)((ulonglong)((longlong)(int)(uint)DAT_20000262 * (longlong)var15) >> 8);\n    var8 = var9 + 2000;\n    var5 = var4 + (uint)DAT_2000025e * 0x8000;\n    flag16 = (int)var9 < 0;\n    if (1999 < var8) {\n      var9 = 0;\n    }\n    var3 = var9;\n    if (flag16 != SBORROW4(var8,2000)) {\n      var14 = var9 * var9 * 5;\n      var9 = var14 >> 2;\n      var3 = var14 >> 1;\n    }\n    var12 = var11 - var3;\n    longVar2 = (ulonglong)(var5 - var9) * (ulonglong)DAT_2000026c;\n    var14 = DAT_2000026c *\n             ((((int)((longlong)(int)(uint)DAT_20000262 * (longlong)var15 >> 0x28) +\n               (uint)CARRY4(var4,(uint)DAT_2000025e * 0x8000)) - ((int)var9 >> 0x1f)) -\n             (uint)(var5 < var9)) + (int)((ulonglong)longVar2 >> 0x20);\n    var4 = (uint)longVar2 >> 0x15 | var14 * 0x800;\n    var6 = calculate_bitwise_shift_08000c44(var4 - var12 >> 0xf |\n                         (((var14 >> 0x15) -\n                          ((((int)((longlong)(int)(uint)DAT_20000264 * (longlong)var15 >> 0x27) +\n                            (uint)CARRY4(var10,(uint)DAT_20000260 * 0x10000)) -\n                           ((int)var3 >> 0x1f)) - (uint)(var11 < var3))) - (uint)(var4 < var12)\n                         ) * 0x20000);\n    var6 = calculate_floating_point_value_08000e54(var6,0x42c80000);\n    DAT_20000354 = var6;\n    var7 = calculate_bitwise_shift_08000c44(var8);\n    DAT_20000358 = calculate_floating_point_value_08000e54(var7,0x42c80000);\n    calculate_floating_point_value_08000e54(var6,0x447d5000);\n    var17 = bitwise_shift_and_mask_08000428();\n    var17 = calculate_result_08005900((int)var17,(int)((ulonglong)var17 >> 0x20),0x60000000,0x3fc85b95);\n    var17 = optimized_function_08000168(0,0x3ff00000,(int)var17,(int)((ulonglong)var17 >> 0x20));\n    calculate_unsigned_product_080004d0((int)var17,(int)((ulonglong)var17 >> 0x20),0,0x40e5a540);\n    var6 = convert_to_float_08000a30();\n    var7 = 0;\n    ptrVar13 = &DAT_20000300;\n    DAT_20000350 = var6;\n    do {\n      ptrVar1 = ptrVar13 + 1;\n      *ptrVar13 = *ptrVar1;\n      var7 = calculate_float_addition_08000adc(var7);\n      ptrVar13 = ptrVar1;\n    } while (ptrVar1 != &DAT_2000034c);\n    DAT_2000034c = var6;\n    var6 = calculate_float_addition_08000adc(var7,var6);\n    DAT_200002fc = calculate_floating_point_value_08000e54(var6,0x41a00000);\n    var8 = extract_integer_bits_08001078();\n    DAT_200014ab = var8 * 100;\n    DAT_20000275 = '\\0';\n    DAT_20000274 = '\\0';\n    validate_and_process_input_0800403c(0xee,DAT_20000038 + 0x50,1);\n    DAT_2000027c = thunk_get_data_value_0800115c();\n  }\n  var8 = thunk_get_data_value_0800115c();\n  if (((10 < (uint)(var8 - DAT_2000027c)) && (DAT_20000275 == '\\0')) && (DAT_20000274 == '\\0')) {\n    DAT_20000270 = convert_data_to_uint_08003034();\n    DAT_20000275 = '\\x01';\n    validate_and_process_input_0800403c(0xee,DAT_20000038 + 0x40,1,0,unaffVar4);\n    DAT_20000278 = thunk_get_data_value_0800115c();\n  }\n  var8 = thunk_get_data_value_0800115c();\n  if (((10 < (uint)(var8 - DAT_20000278)) && (DAT_20000275 != '\\0')) && (DAT_20000274 == '\\0')) {\n    DAT_2000026c = convert_data_to_uint_08003034();\n    DAT_20000274 = '\\x01';\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800411c": "process_data_0800411c",
                "puVar1": "ptrVar1",
                "lVar2": "longVar2",
                "uVar3": "var3",
                "uVar4": "var4",
                "uVar5": "var5",
                "uVar6": "var6",
                "uVar7": "var7",
                "iVar8": "var8",
                "uVar9": "var9",
                "uVar10": "var10",
                "uVar11": "var11",
                "uVar12": "var12",
                "puVar13": "ptrVar13",
                "unaff_r4": "unaffVar4",
                "iVar14": "var14",
                "iVar15": "var15",
                "bVar16": "flag16",
                "uVar17": "var17"
            },
            "calling": [
                "FUN_080041ae"
            ],
            "called": [
                "FUN_08000428",
                "FUN_08001078",
                "FUN_08004348",
                "FUN_08000c44",
                "FUN_080043f0",
                "FUN_08000168",
                "thunk_FUN_0800115c",
                "FUN_080043bc",
                "FUN_08004434",
                "FUN_08005900",
                "FUN_08002f28",
                "FUN_08000adc",
                "FUN_08004a84",
                "FUN_08003034",
                "FUN_08004410",
                "FUN_08004384",
                "FUN_08000e54",
                "FUN_0800403c",
                "FUN_08004458",
                "FUN_08000a30",
                "FUN_080004d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004194": {
            "entrypoint": "0x08004194",
            "current_name": "initialize_system_08004194",
            "code": "\nvoid initialize_system_08004194(void)\n\n{\n  initialize_system_08004194_08004028();\n  initialize_data_and_check_status();\n  initialize_and_process_sensor_data();\n  initialize_and_store_data();\n  DAT_200000f4 = 1;\n  DAT_20000150 = 1;\n  DAT_200001ac = 0xffffffff;\n  DAT_20000098 = 1;\n  DAT_200000c8 = 0x44bb8000;\n  DAT_20000124 = 0x44b54000;\n  DAT_20000180 = 0x44fa0000;\n  DAT_2000006c = 0;\n  DAT_200000ac = 0x408ccccd;\n  DAT_200000b0 = 0x3ca3d70a;\n  DAT_200000b4 = 0x438c0000;\n  DAT_200000b8 = 0x40900000;\n  DAT_200000bc = 0x3ca3d70a;\n  DAT_200000c0 = 0x43b40000;\n  DAT_20000108 = 0x40733333;\n  DAT_2000010c = 0x3ca3d70a;\n  DAT_20000110 = 0x43820000;\n  DAT_20000114 = 0x40733333;\n  DAT_20000118 = 0x3ca3d70a;\n  DAT_2000011c = 0x43a00000;\n  DAT_20000164 = 0x40400000;\n  DAT_20000168 = 0x3c23d70a;\n  DAT_2000016c = 0x438c0000;\n  DAT_20000170 = 0;\n  DAT_20000174 = 0;\n  DAT_20000178 = 0;\n  DAT_20000050 = 0x41200000;\n  DAT_20000054 = 0;\n  DAT_20000058 = 0;\n  DAT_2000005c = 0;\n  DAT_20000060 = 0;\n  DAT_20000064 = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004194": "initialize_system_08004194",
                "initialize_data_and_check_status_08004c70": "initialize_data_and_check_status",
                "initialize_and_process_sensor_data_08002ea0": "initialize_and_process_sensor_data",
                "initialize_and_store_data_08003298": "initialize_and_store_data"
            },
            "calling": [
                "FUN_080041ae"
            ],
            "called": [
                "FUN_08004c70",
                "FUN_08002ea0",
                "FUN_08003298",
                "FUN_08004028"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080041ae": {
            "entrypoint": "0x080041ae",
            "current_name": "continuous_processing_080041ae",
            "code": "\nvoid continuousProcessing_080041ae(void)\n\n{\n  setParam1(0);\n  initializeSystem();\n  do {\n    incrementDataCounter();\n    processData();\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_080041ae": "continuous_processing_080041ae",
                "extend_param_1_08003eb0": "setParam1",
                "initialize_system_08004194": "initializeSystem",
                "increment_data_counter_0800114c": "incrementDataCounter",
                "process_data_0800411c": "processData"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_0800114c",
                "FUN_08003eb0",
                "FUN_0800411c",
                "FUN_08004194"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080041c4": {
            "entrypoint": "0x080041c4",
            "current_name": "initialize_function_080041c4",
            "code": "\nvoid initializeFunction_080041c4(undefined4 param1,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  undefined4 extraResult;\n  \n  setOffsetPointer(0);\n  setPointerToValue(0);\n  storeParameterInMemory(0);\n  setParam(0,extraResult,param3,param4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080041c4": "initialize_function_080041c4",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "extraout_r1": "extraResult",
                "set_ptr_at_offset_08003fc4": "setOffsetPointer",
                "set_pointer_to_value_08003fd0": "setPointerToValue",
                "store_parameter_in_memory_08003fdc": "storeParameterInMemory",
                "set_param_08003fe8": "setParam"
            },
            "calling": [
                "FUN_08004a84"
            ],
            "called": [
                "FUN_08003fe8",
                "FUN_08003fd0",
                "FUN_08003fdc",
                "FUN_08003fc4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800426c": {
            "entrypoint": "0x0800426c",
            "current_name": "calculate_and_update_values_0800426c",
            "code": "\n\n\nvoid calculateAndUpdateValues_0800426c(undefined4 param1,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  undefined4 floatingPointResult1;\n  undefined4 floatAddResult1;\n  undefined4 floatingPointResult2;\n  uint integerBits1;\n  uint integerBits2;\n  uint integerBits3;\n  uint integerBits4;\n  \n  floatingPointResult1 = calculate_floating_point_08000ad8();\n  floatAddResult1 = calculate_float_addition_08000adc(param1,param2);\n  floatingPointResult2 = calculate_floating_point_08000ad8(floatingPointResult1,param3);\n  floatingPointResult2 = calculate_float_addition_08000adc(floatingPointResult2,param4);\n  calculate_floating_point_08000ad8(floatingPointResult2,0x447a0000);\n  integerBits1 = extract_integer_bits_08001078();\n  floatingPointResult2 = calculate_floating_point_08000ad8(floatAddResult1,param3);\n  floatingPointResult2 = calculate_floating_point_08000ad8(floatingPointResult2,param4);\n  calculate_floating_point_08000ad8(floatingPointResult2,0x447a0000);\n  integerBits2 = extract_integer_bits_08001078();\n  floatingPointResult1 = calculate_float_addition_08000adc(floatingPointResult1,param3);\n  floatingPointResult1 = calculate_floating_point_08000ad8(floatingPointResult1,param4);\n  calculate_floating_point_08000ad8(floatingPointResult1,0x447a0000);\n  integerBits3 = extract_integer_bits_08001078();\n  floatingPointResult1 = calculate_float_addition_08000adc(param3,floatAddResult1);\n  floatingPointResult1 = calculate_float_addition_08000adc(floatingPointResult1,param4);\n  calculate_floating_point_08000ad8(floatingPointResult1,0x447a0000);\n  integerBits4 = extract_integer_bits_08001078();\n  if (999 < (int)integerBits4) {\n    integerBits4 = 1000;\n  }\n  if (999 < (int)integerBits3) {\n    integerBits3 = 1000;\n  }\n  if (999 < (int)integerBits2) {\n    integerBits2 = 1000;\n  }\n  if (999 < (int)integerBits1) {\n    integerBits1 = 1000;\n  }\n  DAT_200002a0 = integerBits2 & ~((int)integerBits2 >> 0x1f);\n  DAT_200002a4 = integerBits1 & ~((int)integerBits1 >> 0x1f);\n  DAT_2000029c = integerBits3 & ~((int)integerBits3 >> 0x1f);\n  DAT_20000298 = integerBits4 & ~((int)integerBits4 >> 0x1f);\n  set_ptr_at_offset_08003fc4();\n  set_pointer_to_value_08003fd0(DAT_2000029c);\n  store_parameter_in_memory_08003fdc(DAT_200002a0);\n  set_param_08003fe8(DAT_200002a4);\n  _DAT_200013dd = (short)DAT_20000298 + 1000;\n  DAT_200013df = (short)DAT_2000029c + 1000;\n  _DAT_200013e1 = (short)DAT_200002a0 + 1000;\n  DAT_200013e3 = (short)DAT_200002a4 + 1000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800426c": "calculate_and_update_values_0800426c",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "floatingPointResult1",
                "uVar2": "floatAddResult1",
                "uVar3": "floatingPointResult2",
                "uVar4": "integerBits1",
                "uVar5": "integerBits2",
                "uVar6": "integerBits3",
                "uVar7": "integerBits4"
            },
            "calling": [
                "FUN_08004a84"
            ],
            "called": [
                "FUN_08000adc",
                "FUN_08003fe8",
                "FUN_08001078",
                "FUN_08003fdc",
                "FUN_08003fd0",
                "FUN_08003fc4",
                "FUN_08000ad8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004300": {
            "entrypoint": "0x08004300",
            "current_name": "process_and_extract_data_08004300",
            "code": "\nvoid processAndExtractData_08004300(uint input,byte *data,uint length)\n\n{\n  uint result;\n  byte *currentByte;\n  \n  extract_and_process_strings_08004c8c(&DAT_0800732e);\n  extract_data_08004c18(length & 0xff);\n  result = length & 0xff ^ input;\n  extract_data_08004c18(input);\n  for (currentByte = data; (int)currentByte - (int)data < (int)length; currentByte = currentByte + 1) {\n    extract_data_08004c18(*currentByte);\n    result = result ^ *currentByte;\n  }\n  extract_data_08004c18(result);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004300": "process_and_extract_data_08004300",
                "param_1": "input",
                "param_2": "data",
                "param_3": "length",
                "uVar1": "result",
                "pbVar2": "currentByte"
            },
            "calling": [
                "FUN_08004348",
                "FUN_08004384",
                "FUN_08004410",
                "FUN_080043f0",
                "FUN_080043bc",
                "FUN_08004434",
                "FUN_08004458"
            ],
            "called": [
                "FUN_08004c8c",
                "FUN_08004c18"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004348": {
            "entrypoint": "0x08004348",
            "current_name": "initialize_data_processor_08004348",
            "code": "\n\n\nvoid initializeDataProcessor_08004348(undefined4 param1,uint param2,undefined4 param3)\n\n{\n  undefined4 initValue;\n  uint maskedParam2;\n  undefined4 param3Copy;\n  \n  _DAT_20001423 = 0x40003e9;\n  _DAT_20001427 = 0;\n  DAT_20001429 = 0;\n  initValue = 0x40003e9;\n  maskedParam2 = param2 & 0xff000000;\n  param3Copy = param3;\n  process_and_extract_data_08004300(100,&initValue,7);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004348": "initialize_data_processor_08004348",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "local_10": "initValue",
                "local_c": "maskedParam2",
                "uStack_8": "param3Copy"
            },
            "calling": [
                "FUN_0800411c"
            ],
            "called": [
                "FUN_08004300"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004384": {
            "entrypoint": "0x08004384",
            "current_name": "initialize_data_processing_08004384",
            "code": "\n\n\nvoid initializeDataProcessing_08004384(undefined4 input1,undefined4 input2,undefined4 input3,uint input4)\n\n{\n  undefined4 dataValue;\n  undefined4 stackValue;\n  uint maskedInput4;\n  \n  _DAT_200013bd = 0x2a0007;\n  dataValue = _DAT_200013b9;\n  stackValue = 0x2a0007;\n  _DAT_200013c1 = 0;\n  DAT_200013c3 = 0;\n  maskedInput4 = input4 & 0xff000000;\n  process_and_extract_data_08004300(0x65,&dataValue,0xb,0,input1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004384": "initialize_data_processing_08004384",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "local_14": "dataValue",
                "uStack_10": "stackValue",
                "local_c": "maskedInput4"
            },
            "calling": [
                "FUN_0800411c"
            ],
            "called": [
                "FUN_08004300"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080043bc": {
            "entrypoint": "0x080043bc",
            "current_name": "process_and_extract_data_080043bc",
            "code": "\nvoid processAndExtractData_080043bc(void)\n\n{\n  undefined4 value1;\n  undefined4 value2;\n  undefined4 *localArray1;\n  undefined4 *sourceArray;\n  undefined4 destinationArray [2];\n  undefined2 temporaryArray [6];\n  \n  sourceArray = (undefined4 *)&DAT_2000142a;\n  localArray1 = destinationArray;\n  do {\n    value1 = *sourceArray;\n    value2 = sourceArray[1];\n    sourceArray = sourceArray + 2;\n    *localArray1 = value1;\n    localArray1[1] = value2;\n    localArray1 = localArray1 + 2;\n  } while (sourceArray != (undefined4 *)&DAT_2000143a);\n  *(undefined2 *)localArray1 = DAT_2000143a;\n  process_and_extract_data_08004300(0x66,destinationArray,0x12);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080043bc": "process_and_extract_data_080043bc",
                "uVar1": "value1",
                "uVar2": "value2",
                "puVar3": "localArray1",
                "puVar4": "sourceArray",
                "local_24": "destinationArray",
                "local_1c": "temporaryArray"
            },
            "calling": [
                "FUN_0800411c"
            ],
            "called": [
                "FUN_08004300"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080043f0": {
            "entrypoint": "0x080043f0",
            "current_name": "extract_data_080043f0",
            "code": "\n\n\nvoid extractData_080043f0(undefined4 address1,undefined4 address2,undefined4 data)\n\n{\n  undefined4 savedAddress1;\n  undefined4 savedAddress2;\n  undefined4 dataArray [2];\n  \n  savedAddress1 = _DAT_200013dd;\n  savedAddress2 = _DAT_200013e1;\n  dataArray[0] = data;\n  process_and_extract_data_08004300(0x68,&savedAddress1,8,dataArray);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080043f0": "extract_data_080043f0",
                "param_1": "address1",
                "param_2": "address2",
                "param_3": "data",
                "local_10": "savedAddress1",
                "uStack_c": "savedAddress2",
                "auStack_8": "dataArray"
            },
            "calling": [
                "FUN_0800411c"
            ],
            "called": [
                "FUN_08004300"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004410": {
            "entrypoint": "0x08004410",
            "current_name": "extract_and_process_data_08004410",
            "code": "\nvoid extractAndProcessData_08004410(undefined4 inputParameter1,undefined4 inputParameter2,undefined4 inputParameter3)\n\n{\n  undefined4 dataAddress;\n  undefined4 processedData;\n  undefined4 inputData;\n  \n  dataAddress = DAT_20001395;\n  processedData = CONCAT22((short)((uint)inputParameter2 >> 0x10),DAT_20001399);\n  inputData = inputParameter3;\n  processDataFunction(0x6c,&dataAddress,6);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004410": "extract_and_process_data_08004410",
                "param_1": "inputParameter1",
                "param_2": "inputParameter2",
                "param_3": "inputParameter3",
                "local_10": "dataAddress",
                "local_c": "processedData",
                "uStack_8": "inputData",
                "process_and_extract_data_08004300": "processDataFunction"
            },
            "calling": [
                "FUN_0800411c"
            ],
            "called": [
                "FUN_08004300"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004434": {
            "entrypoint": "0x08004434",
            "current_name": "initialize_data_08004434",
            "code": "\nvoid initializeData_08004434(undefined4 data1,undefined4 data2,undefined4 data3)\n\n{\n  undefined4 constant1;\n  undefined4 combinedData;\n  undefined4 dataToProcess;\n  \n  constant1 = DAT_200014ab;\n  combinedData = CONCAT22((short)((uint)data2 >> 0x10),DAT_200014af);\n  dataToProcess = data3;\n  process_and_extract_data_08004300(0x6d,&constant1,6);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004434": "initialize_data_08004434",
                "param_1": "data1",
                "param_2": "data2",
                "param_3": "data3",
                "local_10": "constant1",
                "local_c": "combinedData",
                "uStack_8": "dataToProcess"
            },
            "calling": [
                "FUN_0800411c"
            ],
            "called": [
                "FUN_08004300"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004458": {
            "entrypoint": "0x08004458",
            "current_name": "rearrange_and_process_data_08004458",
            "code": "\nvoid rearrangeAndProcessData_08004458(void)\n\n{\n  undefined4 *destinationArray;\n  undefined4 *sourceArray;\n  undefined4 tempValue;\n  undefined4 *currentDest;\n  undefined4 *currentSource;\n  undefined4 dataArray [3];\n  undefined2 indexArray [10];\n  \n  destinationArray = dataArray;\n  sourceArray = &DAT_2000139b;\n  do {\n    currentSource = sourceArray;\n    currentDest = destinationArray;\n    tempValue = currentSource[1];\n    *currentDest = *currentSource;\n    currentDest[1] = tempValue;\n    destinationArray = currentDest + 2;\n    sourceArray = currentSource + 2;\n  } while (currentSource + 2 != (undefined4 *)0x200013b3);\n  currentDest[2] = uRam200013b3;\n  *(undefined2 *)(currentDest + 3) = *(undefined2 *)(currentSource + 3);\n  process_and_extract_data_08004300(0x70,dataArray,0x1e);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004458": "rearrange_and_process_data_08004458",
                "puVar1": "destinationArray",
                "puVar2": "sourceArray",
                "uVar3": "tempValue",
                "puVar4": "currentDest",
                "puVar5": "currentSource",
                "local_30": "dataArray",
                "local_24": "indexArray"
            },
            "calling": [
                "FUN_0800411c"
            ],
            "called": [
                "FUN_08004300"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004490": {
            "entrypoint": "0x08004490",
            "current_name": "process_error_08004490",
            "code": "\nvoid processError_08004490(undefined4 errorMessage,undefined4 lineNumber)\n\n{\n  setParam2(0x40011000,0x4000,1);\n  setParam2(0x40011000,0x8000,0);\n  setParam2(0x40011000,0x2000,0);\n  do {\n    xorAndUpdate(0x40011000,0x4000);\n    xorAndUpdate(0x40011000,0x8000);\n    xorAndUpdate(0x40011000,0x2000);\n    processString(\"Error with \");\n    processString(errorMessage);\n    processString(\" at line: \");\n    parseAndProcessData(lineNumber);\n    extractData(10);\n    thunk_FUNC_08001168(500);\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08004490": "process_error_08004490",
                "param_1": "errorMessage",
                "param_2": "lineNumber",
                "set_param2_08001424": "setParam2",
                "xor_and_update_0800142e": "xorAndUpdate",
                "extract_and_process_strings_08004c8c": "processString",
                "parse_and_process_data_08004cac": "parseAndProcessData",
                "extract_data_08004c18": "extractData"
            },
            "calling": [
                "FUN_080040b8",
                "FUN_0800407c",
                "FUN_08004514",
                "FUN_0800403c",
                "FUN_0800458c"
            ],
            "called": [
                "FUN_08004c8c",
                "FUN_0800142e",
                "FUN_08004cac",
                "FUN_08001424",
                "FUN_08004c18",
                "thunk_FUN_08001168"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004514": {
            "entrypoint": "0x08004514",
            "current_name": "initialize_peripheral_08004514",
            "code": "\nvoid initializePeripheral_08004514(void)\n\n{\n  int status;\n  uint data;\n  undefined4 errorCode;\n  int mpuStatus;\n  undefined4 param1;\n  int param2;\n  int param3;\n  undefined4 param4;\n  int param5;\n  undefined4 param6 [4];\n  undefined4 constant1;\n  undefined4 constant2;\n  undefined4 constant3;\n  undefined4 constant4;\n  undefined4 constant5;\n  \n  constant1 = 1;\n  constant2 = 0x10;\n  mpuStatus = 2;\n  constant4 = 0;\n  param6[0] = 2;\n  constant3 = 2;\n  constant5 = 0x380000;\n  status = check_status_08001b58(param6);\n  if (status == 0) goto LAB_08004540;\n  errorCode = 0x3c;\n  while( true ) {\n    status = process_error_08004490(\"../Src/peripherals.c\",errorCode);\nLAB_08004540:\n    param1 = 0xf;\n    param4 = 0x400;\n    param2 = mpuStatus;\n    param3 = status;\n    param5 = status;\n    mpuStatus = check_and_initialize_mpu9250_0800209c(&param1,mpuStatus);\n    if (mpuStatus == 0) break;\n    errorCode = 0x49;\n  }\n  data = get_data_08002214();\n  validate_param_and_initialize_08001214(data / 1000);\n  set_bit_value_08001240(4);\n  update_and_store_data_08001194(0xffffffff,0,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004514": "initialize_peripheral_08004514",
                "iVar1": "status",
                "uVar2": "data",
                "uVar3": "errorCode",
                "iVar4": "mpuStatus",
                "local_44": "param1",
                "local_40": "param2",
                "local_3c": "param3",
                "local_38": "param4",
                "local_34": "param5",
                "local_30": "param6",
                "local_20": "constant1",
                "local_1c": "constant2",
                "local_14": "constant3",
                "local_10": "constant4",
                "local_c": "constant5"
            },
            "calling": [
                "FUN_0800458c"
            ],
            "called": [
                "FUN_08004490",
                "FUN_08001b58",
                "FUN_08001194",
                "FUN_0800209c",
                "FUN_08002214",
                "FUN_08001240",
                "FUN_08001214"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800458c": {
            "entrypoint": "0x0800458c",
            "current_name": "initialize_and_configure_system_0800458c",
            "code": "\n\n\nvoid initialize_and_configure_system_0800458c(void)\n\n{\n  int error_code;\n  undefined4 process_error_code;\n  int num_of_attempts;\n  int flag_local_0;\n  int flag_local_1;\n  int flag_local_2;\n  int flag_local_3;\n  int flag_local_4;\n  int flag_local_5;\n  int flag_local_6;\n  int flag_local_7;\n  int flag_local_8;\n  int flag_local_9;\n  int flag_local_10;\n  int flag_local_11;\n  int flag_local_12;\n  undefined4 flag_local_13;\n  int flag_local_14;\n  \n  initialize_system();\n  initialize_peripheral();\n  num_of_attempts = 2;\n  _DAT_40021018 = _DAT_40021018 | 0x1c;\n  set_parameter2(0x40011000,0xe000,0,_DAT_40021018 & 8);\n  set_parameter2(0x40010800,0x20,0);\n  flag_local_8 = 0xe000;\n  flag_local_9 = 1;\n  flag_local_11 = 2;\n  update_flags(0x40011000,&flag_local_8);\n  flag_local_8 = 0x20;\n  flag_local_9 = 1;\n  flag_local_11 = 2;\n  update_flags(0x40010800,&flag_local_8);\n  DAT_20001504 = 0x40005400;\n  DAT_20001508 = 400000;\n  DAT_20001514 = 0x4000;\n  DAT_2000150c = 0;\n  DAT_20001510 = 0;\n  DAT_20001518 = 0;\n  DAT_2000151c = 0;\n  DAT_20001520 = 0;\n  DAT_20001524 = 0;\n  error_code = update_memory_and_flags();\n  if (error_code == 0) goto LAB_0800463a;\n  process_error_code = 0x6b;\n  while( true ) {\n    while( true ) {\n      while( true ) {\n        while( true ) {\n          while( true ) {\n            while( true ) {\n              while( true ) {\n                while( true ) {\n                  while( true ) {\n                    while( true ) {\n                      while( true ) {\n                        while( true ) {\n                          while( true ) {\n                            while( true ) {\n                              while( true ) {\n                                while( true ) {\n                                  error_code = process_error_08004490(\"../Src/peripherals.c\",process_error_code);\nLAB_0800463a:\n                                  DAT_2000157c = 0x40013800;\n                                  DAT_20001580 = 0x1c200;\n                                  DAT_20001590 = 0xc;\n                                  DAT_20001584 = error_code;\n                                  DAT_20001588 = error_code;\n                                  DAT_2000158c = error_code;\n                                  DAT_20001594 = error_code;\n                                  DAT_20001598 = error_code;\n                                  error_code = initialize_configuration(&DAT_2000157c);\n                                  if (error_code == 0) break;\n                                  process_error_code = 0x151;\n                                }\n                                DAT_200015bc = 0x40012c00;\n                                DAT_200015c8 = 1000;\n                                DAT_200015c0 = num_of_attempts;\n                                DAT_200015c4 = error_code;\n                                DAT_200015cc = error_code;\n                                DAT_200015d0 = error_code;\n                                error_code = process_settings_080023d0(&DAT_200015bc);\n                                if (error_code == 0) break;\n                                process_error_code = 0x88;\n                              }\n                              flag_local_0 = error_code;\n                              flag_local_1 = error_code;\n                              error_code = update_flags_and_reset_080025a4(&DAT_200015bc,&flag_local_0);\n                              if (error_code == 0) break;\n                              process_error_code = 0x8f;\n                            }\n                            flag_local_2 = 0x60;\n                            flag_local_3 = error_code;\n                            flag_local_4 = error_code;\n                            flag_local_5 = error_code;\n                            flag_local_6 = error_code;\n                            flag_local_7 = error_code;\n                            error_code = update_flags_0800245c(&DAT_200015bc,&flag_local_2,0xc);\n                            if (error_code == 0) break;\n                            process_error_code = 0x9a;\n                          }\n                          flag_local_13 = 0x2000;\n                          flag_local_8 = error_code;\n                          flag_local_9 = error_code;\n                          flag_local_10 = error_code;\n                          flag_local_11 = error_code;\n                          flag_local_12 = error_code;\n                          flag_local_14 = error_code;\n                          error_code = check_and_update_flag_08002564(&DAT_200015bc,&flag_local_8);\n                          if (error_code == 0) break;\n                          process_error_code = 0xa6;\n                        }\n                        update_flags_08004e14(&DAT_200015bc);\n                        DAT_200015f8 = 0x40000000;\n                        DAT_20001604 = 1000;\n                        DAT_200015fc = num_of_attempts;\n                        DAT_20001600 = error_code;\n                        DAT_20001608 = error_code;\n                        error_code = process_settings_080023d0(&DAT_200015f8);\n                        if (error_code == 0) break;\n                        process_error_code = 0xc3;\n                      }\n                      flag_local_2 = error_code;\n                      flag_local_3 = error_code;\n                      error_code = update_flags_and_reset_080025a4(&DAT_200015f8,&flag_local_2);\n                      if (error_code == 0) break;\n                      process_error_code = 0xca;\n                    }\n                    flag_local_8 = 0x60;\n                    flag_local_9 = error_code;\n                    flag_local_10 = error_code;\n                    flag_local_12 = error_code;\n                    error_code = update_flags_0800245c(&DAT_200015f8,&flag_local_8,4);\n                    if (error_code == 0) break;\n                    process_error_code = 0xd3;\n                  }\n                  update_flags_08004e14(&DAT_200015f8);\n                  DAT_2000154c = 1000;\n                  DAT_20001540 = 0x40000400;\n                  DAT_20001544 = num_of_attempts;\n                  DAT_20001548 = error_code;\n                  DAT_20001550 = error_code;\n                  error_code = process_settings_080023d0();\n                  if (error_code == 0) break;\n                  process_error_code = 0xf0;\n                }\n                flag_local_2 = 0;\n                flag_local_3 = 0;\n                error_code = update_flags_and_reset_080025a4(&DAT_20001540,&flag_local_2);\n                if (error_code == 0) break;\n                process_error_code = 0xf7;\n              }\n              flag_local_8 = 0x60;\n              flag_local_9 = error_code;\n              flag_local_10 = error_code;\n              flag_local_12 = error_code;\n              error_code = update_flags_0800245c(&DAT_20001540,&flag_local_8,8);\n              if (error_code == 0) break;\n              process_error_code = 0x100;\n            }\n            num_of_attempts = update_flags_0800245c(&DAT_20001540,&flag_local_8,0xc);\n            if (num_of_attempts == 0) break;\n            process_error_code = 0x105;\n          }\n          update_flags_08004e14(&DAT_20001540);\n          DAT_200014c8 = 0x40000800;\n          DAT_200014cc = 2;\n          DAT_200014d4 = 1000;\n          DAT_200014d0 = num_of_attempts;\n          DAT_200014d8 = num_of_attempts;\n          error_code = process_settings_080023d0(&DAT_200014c8);\n          if (error_code == 0) break;\n          process_error_code = 0x122;\n        }\n        flag_local_2 = error_code;\n        flag_local_3 = error_code;\n        error_code = update_flags_and_reset_080025a4(&DAT_200014c8,&flag_local_2);\n        if (error_code == 0) break;\n        process_error_code = 0x129;\n      }\n      flag_local_8 = 0x60;\n      flag_local_9 = error_code;\n      flag_local_10 = error_code;\n      flag_local_12 = error_code;\n      error_code = update_flags_0800245c(&DAT_200014c8,&flag_local_8,8);\n      if (error_code == 0) break;\n      process_error_code = 0x132;\n    }\n    error_code = update_flags_0800245c(&DAT_200014c8,&flag_local_8,0xc);\n    if (error_code == 0) break;\n    process_error_code = 0x137;\n  }\n  update_flags_08004e14(&DAT_200014c8);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800458c": "initialize_and_configure_system_0800458c",
                "iVar1": "error_code",
                "uVar2": "process_error_code",
                "iVar3": "num_of_attempts",
                "local_58": "flag_local_0",
                "local_54": "flag_local_1",
                "local_50": "flag_local_2",
                "local_4c": "flag_local_3",
                "local_48": "flag_local_4",
                "local_40": "flag_local_5",
                "local_3c": "flag_local_6",
                "local_38": "flag_local_7",
                "local_34": "flag_local_8",
                "local_30": "flag_local_9",
                "local_2c": "flag_local_10",
                "local_28": "flag_local_11",
                "local_24": "flag_local_12",
                "local_20": "flag_local_13",
                "local_1c": "flag_local_14",
                "initialize_system_08001128": "initialize_system",
                "initialize_peripheral_08004514": "initialize_peripheral",
                "set_param2_08001424": "set_parameter2",
                "update_flags_08001264": "update_flags",
                "update_memory_and_flags_08001754": "update_memory_and_flags",
                "initialize_configuration_08002724": "initialize_configuration"
            },
            "calling": [
                "FUN_08004028"
            ],
            "called": [
                "FUN_08004490",
                "FUN_080023d0",
                "FUN_08002564",
                "FUN_08001264",
                "FUN_08002724",
                "FUN_08001128",
                "FUN_080025a4",
                "FUN_0800245c",
                "FUN_08001424",
                "FUN_08004e14",
                "FUN_08001754",
                "FUN_08004514"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800483c": {
            "entrypoint": "0x0800483c",
            "current_name": "calculate_result_0800483c",
            "code": "\nvoid calculate_result_0800483c(int *parameters)\n\n{\n  undefined4 floatAdditionResult;\n  undefined4 floatPointResult;\n  int integerVariable3;\n  int integerVariable4;\n  int integerVariable5;\n  \n  integerVariable4 = parameters[0xc];\n  floatAdditionResult = calculate_float_addition_08000adc(parameters[7],parameters[9]);\n  integerVariable4 = calculate_floating_point_08000ad8(floatAdditionResult,integerVariable4);\n  parameters[10] = integerVariable4;\n  if (*parameters == 3) {\n    integerVariable4 = check_if_concatenated_params_are_empty_08001064(parameters[10],0);\n    if (integerVariable4 == 0) {\n      integerVariable4 = is_string_empty_08001028(parameters[10],0xc3340000);\n    }\n    else {\n      integerVariable4 = check_if_concatenated_params_are_empty_08001064(parameters[10],0x43340000);\n    }\n    if (integerVariable4 != 0) {\n      integerVariable5 = parameters[10];\n      floatAdditionResult = calculate_floating_point_08000cec(parameters[10],0x43b40000);\n      integerVariable4 = check_if_concatenated_params_are_empty_08001064(parameters[10],0);\n      integerVariable3 = parameters[10];\n      if (integerVariable4 == 0) {\n        integerVariable3 = integerVariable3 + -0x80000000;\n      }\n      floatAdditionResult = calculate_floating_point_value_08000e54(floatAdditionResult,integerVariable3);\n      integerVariable4 = calculate_floating_point_08000ad8(integerVariable5,floatAdditionResult);\n      parameters[10] = integerVariable4;\n    }\n  }\n  integerVariable5 = parameters[2];\n  integerVariable3 = parameters[3];\n  integerVariable4 = calculate_floating_point_08000cec(parameters[1],parameters[10]);\n  parameters[0xe] = integerVariable4;\n  integerVariable4 = calculate_float_addition_08000adc(parameters[10],parameters[0xf]);\n  parameters[0xf] = integerVariable4;\n  integerVariable4 = is_string_empty_08001028(parameters[0xf],0xc3fa0000);\n  if (integerVariable4 == 0) {\n    integerVariable4 = check_if_concatenated_params_are_empty_08001064(parameters[0xf],0x43fa0000);\n    if (integerVariable4 == 0) {\n      integerVariable4 = parameters[0xf];\n    }\n    else {\n      integerVariable4 = 0x43fa0000;\n    }\n  }\n  else {\n    integerVariable4 = -0x3c060000;\n  }\n  parameters[0xf] = integerVariable4;\n  integerVariable4 = calculate_floating_point_08000ad8(parameters[0xc],parameters[0xd]);\n  parameters[0x10] = integerVariable4;\n  integerVariable4 = parameters[0xe];\n  floatAdditionResult = calculate_floating_point_08000cec(integerVariable5,parameters[0xf]);\n  floatAdditionResult = calculate_float_addition_08000adc(floatAdditionResult,integerVariable4);\n  floatPointResult = calculate_floating_point_08000cec(integerVariable3,parameters[0x10]);\n  integerVariable4 = calculate_floating_point_08000ad8(floatAdditionResult,floatPointResult);\n  parameters[0x12] = integerVariable4;\n  floatAdditionResult = calculate_bitwise_shift_08000c44(parameters[0x13]);\n  integerVariable4 = is_string_empty_08001028(parameters[0x12],0xc3fa0000);\n  if (integerVariable4 == 0) {\n    integerVariable4 = check_if_concatenated_params_are_empty_08001064(parameters[0x12],0x43fa0000);\n    if (integerVariable4 == 0) {\n      integerVariable4 = parameters[0x12];\n    }\n    else {\n      integerVariable4 = 0x43fa0000;\n    }\n  }\n  else {\n    integerVariable4 = -0x3c060000;\n  }\n  integerVariable4 = calculate_floating_point_08000cec(integerVariable4,floatAdditionResult);\n  parameters[0x12] = integerVariable4;\n  parameters[0xd] = parameters[0xc];\n  parameters[0xb] = parameters[10];\n  parameters[0x15] = parameters[0x14];\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800483c": "calculate_result_0800483c",
                "param_1": "parameters",
                "uVar1": "floatAdditionResult",
                "uVar2": "floatPointResult",
                "iVar3": "integerVariable3",
                "iVar4": "integerVariable4",
                "iVar5": "integerVariable5"
            },
            "calling": [
                "FUN_08004a84"
            ],
            "called": [
                "FUN_08000adc",
                "FUN_08000e54",
                "FUN_08000ad8",
                "FUN_08000c44",
                "FUN_08000cec",
                "FUN_08001064",
                "FUN_08001028"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004a30": {
            "entrypoint": "0x08004a30",
            "current_name": "update_data_values_08004a30",
            "code": "\nvoid updateDataValues_08004a30(void)\n\n{\n  undefined4 dataValue;\n  \n  if (DAT_20000285 != '\\0') {\n    if (DAT_200002a8 == '\\0') {\n      dataValue = get_data_value_08003068();\n      DAT_20000068 = calculate_floating_point_08000cec(dataValue,0x42c80000);\n      DAT_200002a8 = '\\x01';\n    }\n    else {\n      dataValue = get_data_value_08003068();\n      DAT_2000007c = calculate_floating_point_08000cec(dataValue,0x42c80000);\n    }\n  }\n  if (DAT_20000285 == '\\0') {\n    if (DAT_200002a8 != '\\0') {\n      DAT_200002a8 = DAT_20000285;\n    }\n    DAT_20000094 = DAT_20000288;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004a30": "update_data_values_08004a30",
                "uVar1": "dataValue"
            },
            "calling": [
                "FUN_08004a84"
            ],
            "called": [
                "FUN_08000cec",
                "FUN_08003068"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004a84": {
            "entrypoint": "0x08004a84",
            "current_name": "process_data_08004a84",
            "code": "\nvoid processData_08004a84(void)\n\n{\n  int iVar1;\n  \n  DAT_200000d8 = calculateFloatSum();\n  DAT_20000134 = calculateAndUpdateRamValue();\n  DAT_20000190 = processData_08004a84();\n  updateDataValues();\n  iVar1 = checkIfConcatenatedParamsAreEmpty(DAT_200000d8,0);\n  if (iVar1 == 0) {\n    iVar1 = isStringEmpty(DAT_200000d8,0xc2a00000);\n  }\n  else {\n    iVar1 = checkIfConcatenatedParamsAreEmpty(DAT_200000d8,0x42a00000);\n  }\n  if (iVar1 == 0) {\n    iVar1 = checkIfConcatenatedParamsAreEmpty(DAT_20000134,0);\n    if (iVar1 == 0) {\n      iVar1 = isStringEmpty(DAT_20000134,0xc2a00000);\n    }\n    else {\n      iVar1 = checkIfConcatenatedParamsAreEmpty(DAT_20000134,0x42a00000);\n    }\n    if (iVar1 == 0) {\n      setParamFlags(1,1);\n      calculateResult(&DAT_200000a8);\n      calculateResult(&DAT_20000104);\n      calculateResult(&DAT_20000160);\n      if (DAT_20000285 != '\\0') {\n        calculateResult(&DAT_2000004c);\n        calculateFloatAddition(DAT_20000094,0x44bb8000);\n      }\n      DAT_20000094 = DAT_20000288;\n      if (DAT_20000284 == '\\0') {\n        initializeFunction();\n      }\n      else {\n        calculate_and_update_values_0800426c(DAT_20000288,DAT_200000f0,DAT_2000014c,DAT_200001a8);\n      }\n      calculateFloatingPoint(DAT_200000ac,0x437f0000);\n      DAT_2000139b._3_1_ = checkNumber();\n      calculateFloatingPoint(DAT_200000b0,0x437f0000);\n      DAT_2000139f._0_1_ = checkNumber();\n      calculateFloatingPoint(DAT_20000108,0x437f0000);\n      DAT_2000139b._0_1_ = checkNumber();\n      calculateFloatingPoint(DAT_2000010c,0x437f0000);\n      DAT_2000139b._1_1_ = checkNumber();\n      calculateFloatingPoint(DAT_20000110,0x437f0000);\n      DAT_2000139b._2_1_ = checkNumber();\n      calculateFloatingPoint(DAT_20000164,0x437f0000);\n      DAT_2000139f._2_1_ = checkNumber();\n      calculateFloatingPoint(DAT_20000168,0x437f0000);\n      DAT_2000139f._3_1_ = checkNumber();\n      calculateFloatingPoint(DAT_2000016c,0x437f0000);\n      DAT_200013a3._0_1_ = checkNumber();\n      calculateFloatingPoint(DAT_20000050,0x437f0000);\n      DAT_200013a3._1_1_ = checkNumber();\n      calculateFloatingPoint(DAT_20000054,0x437f0000);\n      DAT_200013a3._2_1_ = checkNumber();\n      calculateFloatingPoint(DAT_20000058,0x437f0000);\n      DAT_200013a3._3_1_ = checkNumber();\n      return;\n    }\n  }\n  initializeFunction();\n  setParamFlags(0,1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004a84": "process_data_08004a84",
                "initialize_function_080041c4": "initializeFunction",
                "set_param_flags_08003f3c": "setParamFlags",
                "calculate_result_0800483c": "calculateResult",
                "calculate_float_addition_08000adc": "calculateFloatAddition",
                "calculate_floating_point_08000cec": "calculateFloatingPoint",
                "check_number_080010c4": "checkNumber",
                "calculate_float_sum_08002ec0": "calculateFloatSum",
                "calculate_and_update_ram_value_08002ed4": "calculateAndUpdateRamValue",
                "process_data_08002ee8": "processData",
                "update_data_values_08004a30": "updateDataValues",
                "check_if_concatenated_params_are_empty_08001064": "checkIfConcatenatedParamsAreEmpty",
                "is_string_empty_08001028": "isStringEmpty"
            },
            "calling": [
                "FUN_0800411c"
            ],
            "called": [
                "FUN_08004a30",
                "FUN_08002ee8",
                "FUN_08000cec",
                "FUN_08001028",
                "FUN_08002ec0",
                "FUN_0800426c",
                "FUN_08000adc",
                "FUN_08003f3c",
                "FUN_080041c4",
                "FUN_080010c4",
                "FUN_08002ed4",
                "FUN_08001064",
                "FUN_0800483c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004c18": {
            "entrypoint": "0x08004c18",
            "current_name": "extract_data_08004c18",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0800289e) */\n\nundefined4 extractData_08004c18(undefined data)\n\n{\n  int *ptrValue;\n  int value1;\n  int value2;\n  ushort *ptrData;\n  \n  DAT_20001636._0_1_ = data;\n  ptrData = &DAT_20001636;\n  if (((DAT_200015b5 != '\\x01') && (DAT_200015b5 != '\\\"')) || (DAT_200015b4 == '\\x01')) {\n    return 2;\n  }\n  DAT_200015b4 = 1;\n  DAT_200015b8 = 0;\n  DAT_200015a0 = 1;\n  if (DAT_200015b5 == '\\\"') {\n    DAT_200015b5 = '2';\n  }\n  else {\n    DAT_200015b5 = '\\x12';\n  }\n  DAT_200015a2 = 1;\nloopLabel:\n  do {\n    if (DAT_200015a2 == 0) {\n      value1 = getDataValue();\n      do {\n        if (*DAT_2000157c << 0x19 < 0) {\n          if (DAT_200015b5 == '2') {\n            DAT_200015b5 = 0x22;\n          }\n          else {\n            DAT_200015b5 = 1;\n          }\n          DAT_200015b4 = 0;\n          return 0;\n        }\n        value2 = getDataValue();\n      } while ((uint)(value2 - value1) < 6);\nLAB_0800281c:\n      ptrValue = DAT_2000157c;\n      DAT_2000157c[3] = DAT_2000157c[3] & 0xffffff7f;\n      ptrValue[3] = ptrValue[3] & 0xffffffdf;\n      ptrValue[3] = ptrValue[3] & 0xfffffeff;\n      ptrValue[5] = ptrValue[5] & 0xfffffffe;\n      DAT_200015b5 = 1;\n      DAT_200015b4 = 0;\n      return 3;\n    }\n    DAT_200015a2 = DAT_200015a2 + -1;\n    if (DAT_20001584 == 0x1000) {\n      value1 = getDataValue();\n      while (-1 < *DAT_2000157c << 0x18) {\n        value2 = getDataValue();\n        if (5 < (uint)(value2 - value1)) goto LAB_0800281c;\n      }\n      DAT_2000157c[1] = *ptrData & 0x1ff;\n      if (DAT_2000158c == 0) {\n        ptrData = ptrData + 1;\n        goto loopLabel;\n      }\n    }\n    else {\n      value1 = getDataValue();\n      while (-1 < *DAT_2000157c << 0x18) {\n        value2 = getDataValue();\n        if (5 < (uint)(value2 - value1)) goto LAB_0800281c;\n      }\n      DAT_2000157c[1] = (uint)*(byte *)ptrData;\n    }\n    ptrData = (ushort *)((int)ptrData + 1);\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08004c18": "extract_data_08004c18",
                "param_1": "data",
                "piVar1": "ptrValue",
                "iVar2": "value1",
                "iVar3": "value2",
                "puVar4": "ptrData",
                "LAB_080027c4": "loopLabel",
                "get_data_value_0800115c": "getDataValue"
            },
            "calling": [
                "FUN_08004490",
                "FUN_08004300",
                "FUN_08004c8c"
            ],
            "called": [
                "FUN_0800115c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004c30": {
            "entrypoint": "0x08004c30",
            "current_name": "validate_param_08004c30",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08002902) */\n\nint * validate_param_08004c30(int *input_param)\n\n{\n  int data_index;\n  \n  if (*input_param != 0x40013800) {\n    return input_param;\n  }\n  increment_and_store_08003ec8(&DAT_20000364,DAT_20001634);\n  data_index = DAT_2000157c;\n  if (((DAT_200015b5 == '\\x01') || (DAT_200015b5 == '\\x12')) && (DAT_200015b4 != '\\x01')) {\n    DAT_200015b8 = 0;\n    DAT_200015a8 = 1;\n    DAT_200015aa = 1;\n    DAT_200015b4 = 0;\n    if (DAT_200015b5 == '\\x12') {\n      DAT_200015b5 = 0x32;\n    }\n    else {\n      DAT_200015b5 = 0x22;\n    }\n    DAT_200015a4 = &DAT_20001634;\n    *(uint *)(DAT_2000157c + 0xc) = *(uint *)(DAT_2000157c + 0xc) | 0x100;\n    *(uint *)(data_index + 0x14) = *(uint *)(data_index + 0x14) | 1;\n    *(uint *)(data_index + 0xc) = *(uint *)(data_index + 0xc) | 0x20;\n    return (int *)0x0;\n  }\n  return (int *)0x2;\n}\n\n",
            "renaming": {
                "FUN_08004c30": "validate_param_08004c30",
                "param_1": "input_param",
                "iVar1": "data_index"
            },
            "calling": [
                "FUN_0800290c"
            ],
            "called": [
                "FUN_08003ec8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004c64": {
            "entrypoint": "0x08004c64",
            "current_name": "initialize_data_08004c64",
            "code": "\nvoid initializeData_08004c64(void)\n\n{\n  int index;\n  \n  index = 0;\n  DAT_20000b64 = 0;\n  DAT_20000b66 = 0;\n  DAT_20000b68 = 0;\n  do {\n    (&DAT_20000364)[index] = 0;\n    index = index + 1;\n  } while (index != 0x800);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004c64": "initialize_data_08004c64",
                "iVar1": "index"
            },
            "calling": [
                "FUN_08004c70"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004c70": {
            "entrypoint": "0x08004c70",
            "current_name": "initialize_data_and_check_status_08004c70",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08002902) */\n\nundefined4 initialize_data_and_check_status_08004c70(void)\n\n{\n  int status;\n  \n  initialize_data_08004c64();\n  status = DAT_2000157c;\n  if (((DAT_200015b5 == '\\x01') || (DAT_200015b5 == '\\x12')) && (DAT_200015b4 != '\\x01')) {\n    DAT_200015b8 = 0;\n    DAT_200015a8 = 1;\n    DAT_200015aa = 1;\n    DAT_200015b4 = 0;\n    if (DAT_200015b5 == '\\x12') {\n      DAT_200015b5 = 0x32;\n    }\n    else {\n      DAT_200015b5 = 0x22;\n    }\n    DAT_200015a4 = &DAT_20001634;\n    *(uint *)(DAT_2000157c + 0xc) = *(uint *)(DAT_2000157c + 0xc) | 0x100;\n    *(uint *)(status + 0x14) = *(uint *)(status + 0x14) | 1;\n    *(uint *)(status + 0xc) = *(uint *)(status + 0xc) | 0x20;\n    return 0;\n  }\n  return 2;\n}\n\n",
            "renaming": {
                "FUN_08004c70": "initialize_data_and_check_status_08004c70",
                "iVar1": "status"
            },
            "calling": [
                "FUN_08004194"
            ],
            "called": [
                "FUN_08004c64"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004c8c": {
            "entrypoint": "0x08004c8c",
            "current_name": "extract_and_process_strings_08004c8c",
            "code": "\nvoid extract_and_process_strings_08004c8c(undefined *strings)\n\n{\n  uint end_index;\n  undefined *current_string;\n  \n  current_string = strings;\n  while( true ) {\n    end_index = find_end_of_string_08000150(strings);\n    if (end_index <= (uint)((int)current_string - (int)strings)) break;\n    extract_data_08004c18(*current_string);\n    current_string = current_string + 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004c8c": "extract_and_process_strings_08004c8c",
                "param_1": "strings",
                "uVar1": "end_index",
                "puVar2": "current_string"
            },
            "calling": [
                "FUN_08004490",
                "FUN_08004300",
                "FUN_08004cac"
            ],
            "called": [
                "FUN_08000150",
                "FUN_08004c18"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004cac": {
            "entrypoint": "0x08004cac",
            "current_name": "parse_and_process_data_08004cac",
            "code": "\nvoid parseAndProcessData_08004cac(undefined4 data)\n\n{\n  clearParseData(&DAT_20001636,&DAT_0800735e,data);\n  extractAndProcessStrings(&DAT_20001636);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004cac": "parse_and_process_data_08004cac",
                "param_1": "data",
                "clear_parse_data_08004ffc": "clearParseData",
                "extract_and_process_strings_08004c8c": "extractAndProcessStrings"
            },
            "calling": [
                "FUN_08004490"
            ],
            "called": [
                "FUN_08004c8c",
                "FUN_08004ffc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004ccc": {
            "entrypoint": "0x08004ccc",
            "current_name": "initialize_memory_08004ccc",
            "code": "\n\n\nvoid initializeMemory_08004ccc(undefined4 param1,undefined4 param2,undefined4 param3)\n\n{\n  _DAT_40021018 = _DAT_40021018 | 1;\n  configureMemory(3,param2,_DAT_40021018,1,param1,1,param3);\n  updateAndStoreData(0xfffffff4,0);\n  updateAndStoreData(0xfffffff5,0);\n  updateAndStoreData(0xfffffff6,0);\n  updateAndStoreData(0xfffffffb,0);\n  updateAndStoreData(0xfffffffc,0);\n  updateAndStoreData(0xfffffffe,0);\n  updateAndStoreData(0xffffffff,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004ccc": "initialize_memory_08004ccc",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "configure_memory_08001170": "configureMemory",
                "update_and_store_data_08001194": "updateAndStoreData"
            },
            "calling": [
                "FUN_08001128"
            ],
            "called": [
                "FUN_08001194",
                "FUN_08001170"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004d48": {
            "entrypoint": "0x08004d48",
            "current_name": "update_memory_and_flags_08004d48",
            "code": "\n\n\nvoid updateMemoryAndFlags_08004d48(int *memoryAddress,undefined4 param)\n\n{\n  undefined4 size;\n  undefined4 value;\n  \n  if (*memoryAddress == 0x40005400) {\n    size = 0xc0;\n    value = 0x12;\n    update_flags_08001264(0x40010c00,&size,0x40005400,3,memoryAddress,param);\n    _DAT_4002101c = _DAT_4002101c | 0x200000;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004d48": "update_memory_and_flags_08004d48",
                "param_1": "memoryAddress",
                "param_2": "param",
                "local_18": "size",
                "local_14": "value"
            },
            "calling": [
                "FUN_08001754"
            ],
            "called": [
                "FUN_08001264"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004d8c": {
            "entrypoint": "0x08004d8c",
            "current_name": "update_settings_08004d8c",
            "code": "\n\n/* WARNING: Restarted to delay deadcode elimination for space: ram */\n\nvoid updateSettings_08004d8c(int *settingsPtr)\n\n{\n  int value;\n  \n  value = *settingsPtr;\n  if (value == 0x40012c00) {\n    _DAT_40021018 = _DAT_40021018 | 0x800;\n  }\n  else if (value == 0x40000000) {\n    _DAT_4002101c = _DAT_4002101c | 1;\n  }\n  else if (value == 0x40000400) {\n    _DAT_4002101c = _DAT_4002101c | 2;\n  }\n  else if (value == 0x40000800) {\n    _DAT_4002101c = _DAT_4002101c | 4;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004d8c": "update_settings_08004d8c",
                "param_1": "settingsPtr",
                "iVar1": "value"
            },
            "calling": [
                "FUN_080023d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004e14": {
            "entrypoint": "0x08004e14",
            "current_name": "update_flags_08004e14",
            "code": "\nvoid update_flags_08004e14(int *input_ptr,undefined4 value_1,undefined4 value_2)\n\n{\n  undefined4 constant_1;\n  int input_value;\n  undefined4 result_value_1;\n  undefined4 result_value_2;\n  undefined4 result_value_3;\n  undefined4 constant_2;\n  \n  input_value = *input_ptr;\n  if (input_value == 0x40012c00) {\n    result_value_1 = 0x800;\n  }\n  else {\n    if (input_value != 0x40000000) {\n      if (input_value == 0x40000400) {\n        result_value_1 = 3;\n      }\n      else {\n        if (input_value != 0x40000800) {\n          return;\n        }\n        result_value_1 = 0x300;\n      }\n      constant_1 = 0x40010c00;\n      goto LAB_08004e2e;\n    }\n    result_value_1 = 2;\n  }\n  constant_1 = 0x40010800;\nLAB_08004e2e:\n  constant_2 = 2;\n  result_value_2 = 2;\n  result_value_3 = value_2;\n  update_flags_08004e14_08001264(constant_1,&result_value_1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004e14": "update_flags_08004e14",
                "param_1": "input_ptr",
                "param_2": "value_1",
                "param_3": "value_2",
                "uVar1": "constant_1",
                "iVar2": "input_value",
                "local_18": "result_value_1",
                "local_14": "result_value_2",
                "uStack_10": "result_value_3",
                "local_c": "constant_2"
            },
            "calling": [
                "FUN_0800458c"
            ],
            "called": [
                "FUN_08001264"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004e7c": {
            "entrypoint": "0x08004e7c",
            "current_name": "update_data_and_flags_08004e7c",
            "code": "\n\n\nvoid updateDataAndFlags_08004e7c(int *dataPointer)\n\n{\n  undefined4 flagValue1;\n  undefined4 flagValue2;\n  undefined4 flagValue3;\n  undefined4 flagValue4;\n  \n  if (*dataPointer == 0x40013800) {\n    _DAT_40021018 = _DAT_40021018 | 0x4000;\n    flagValue1 = 0x200;\n    flagValue2 = 2;\n    flagValue4 = 3;\n    update_flags_08001264(0x40010800,&flagValue1);\n    flagValue1 = 0x400;\n    flagValue2 = 0;\n    flagValue3 = 0;\n    update_flags_08001264(0x40010800,&flagValue1);\n    update_and_store_data_08001194(0x25,0,0);\n    set_bit_in_array_080011fc(0x25);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004e7c": "update_data_and_flags_08004e7c",
                "param_1": "dataPointer",
                "local_18": "flagValue1",
                "local_14": "flagValue2",
                "local_10": "flagValue3",
                "local_c": "flagValue4"
            },
            "calling": [
                "FUN_08002724"
            ],
            "called": [
                "FUN_08001264",
                "FUN_080011fc",
                "FUN_08001194"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004f10": {
            "entrypoint": "0x08004f10",
            "current_name": "initialize_hardware_08004f10",
            "code": "\n\n\nvoid initializeHardware_08004f10(void)\n\n{\n  _DAT_40021000 = _DAT_40021000 & 0xfef2ffff | 1;\n  _DAT_40021004 = _DAT_40021004 & 0xf8800000;\n  _DAT_40021008 = 0x9f0000;\n  _DAT_e000ed08 = 0x8000000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004f10": "initialize_hardware_08004f10"
            },
            "calling": [
                "entry"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "thunk_FUN_0800115c": {
            "entrypoint": "0x08004f60",
            "current_name": "get_data_from_memory_thunk_0800115c",
            "code": "\nundefined4 get_data_from_memory_thunk_0800115c(void)\n\n{\n  return DAT_20000244;\n}\n\n",
            "renaming": {
                "thunk_FUN_0800115c": "get_data_from_memory_thunk_0800115c"
            },
            "calling": [
                "FUN_08002f28"
            ],
            "called": [
                "FUN_0800115c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "thunk_FUN_08001168": {
            "entrypoint": "0x08004f64",
            "current_name": "thunk_FUNC_08001168",
            "code": "\nvoid thunk_FUNC_08001168(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "thunk_FUN_08001168": "thunk_FUNC_08001168"
            },
            "calling": [
                "FUN_08004490",
                "FUN_08003298",
                "FUN_08004028",
                "FUN_0800403c"
            ],
            "called": [
                "FUN_08001168"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "entry": {
            "entrypoint": "0x08004f68",
            "current_name": "entry",
            "code": "\nvoid entry(void)\n\n{\n  int iVar1;\n  undefined4 *puVar2;\n  code *UNRECOVERED_JUMPTABLE;\n  \n  for (iVar1 = 0; (undefined4 *)(iVar1 + 0x20000000) < &DAT_20000228; iVar1 = iVar1 + 4) {\n    *(undefined4 *)(iVar1 + 0x20000000) = *(undefined4 *)(iVar1 + 0x8007448);\n  }\n  for (puVar2 = &DAT_20000228; puVar2 < &DAT_200016a0; puVar2 = puVar2 + 1) {\n    *puVar2 = 0;\n  }\n  initialize_hardware_08004f10();\n  execute_function_array_08004fb4();\n  UNRECOVERED_JUMPTABLE = (code *)0x8004f9a;\n  continuous_processing_080041ae();\n                    /* WARNING: Could not recover jumptable at 0x08004f9a. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*UNRECOVERED_JUMPTABLE)();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [],
            "called": [
                "FUN_08004fb4",
                "FUN_080041ae",
                "FUN_08004f10"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004fb4": {
            "entrypoint": "0x08004fb4",
            "current_name": "execute_function_array_08004fb4",
            "code": "\nvoid executeFunctionArray_08004fb4(void)\n\n{\n  int index;\n  \n  for (index = 0; index != 0; index = index + 1) {\n    (*(code *)(&DAT_08007440)[index])();\n  }\n  FUNC_080072d4();\n  for (index = 0; index != 1; index = index + 1) {\n    (*(code *)(&DAT_08007440)[index])();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004fb4": "execute_function_array_08004fb4",
                "iVar1": "index"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_080072d4",
                "FUN_08000134"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004ffc": {
            "entrypoint": "0x08004ffc",
            "current_name": "clear_parse_data_08004ffc",
            "code": "\nvoid clearParseData_08004ffc(undefined *data,undefined4 value1,undefined4 value2,undefined4 value3)\n\n{\n  undefined *dataArray [2];\n  undefined4 maxValue;\n  undefined2 constant1;\n  undefined2 constant2;\n  undefined *currentData;\n  undefined4 tempMaxValue;\n  undefined4 stackValue1;\n  undefined4 stackValue2;\n  undefined4 stackValue3;\n  \n  constant1 = 0x208;\n  maxValue = 0x7fffffff;\n  tempMaxValue = 0x7fffffff;\n  constant2 = 0xffff;\n  dataArray[0] = data;\n  currentData = data;\n  stackValue1 = value1;\n  stackValue2 = value2;\n  stackValue3 = value3;\n  parse_and_modify_data_080050fc(DAT_200001c0,dataArray,value1);\n  *dataArray[0] = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004ffc": "clear_parse_data_08004ffc",
                "param_1": "data",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3",
                "local_78": "dataArray",
                "local_70": "maxValue",
                "local_6c": "constant1",
                "local_6a": "constant2",
                "local_68": "currentData",
                "local_64": "tempMaxValue",
                "uStack_c": "stackValue1",
                "uStack_8": "stackValue2",
                "uStack_4": "stackValue3"
            },
            "calling": [
                "FUN_08004cac"
            ],
            "called": [
                "FUN_080050fc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005044": {
            "entrypoint": "0x08005044",
            "current_name": "modify_data_08005044",
            "code": "\nundefined4 modifyData_08005044(undefined4 *result,int *dataArray,undefined4 newValue,uint upperLimit)\n\n{\n  int allocationResult;\n  uint newLimit;\n  uint currentLimit;\n  int offset;\n  \n  currentLimit = dataArray[2];\n  if ((currentLimit <= upperLimit) && ((*(ushort *)(dataArray + 3) & 0x480) != 0)) {\n    offset = *dataArray - dataArray[4];\n    currentLimit = (uint)(dataArray[5] * 3) / 2;\n    newLimit = upperLimit + 1 + offset;\n    if (currentLimit < newLimit) {\n      currentLimit = newLimit;\n    }\n    if ((int)((uint)*(ushort *)(dataArray + 3) << 0x15) < 0) {\n      allocationResult = allocateAndSetPointer(result,currentLimit);\n      if (allocationResult == 0) {\nLAB_0800508a:\n        *result = 0xc;\n        *(ushort *)(dataArray + 3) = *(ushort *)(dataArray + 3) | 0x40;\n        return 0xffffffff;\n      }\n      copyBytes(allocationResult,dataArray[4],offset);\n      *(ushort *)(dataArray + 3) = *(ushort *)(dataArray + 3) & 0xfb7f | 0x80;\n    }\n    else {\n      allocationResult = allocateAndCopyData(result,dataArray[4],currentLimit);\n      if (allocationResult == 0) {\n        updateDataStructure(result,dataArray[4]);\n        goto LAB_0800508a;\n      }\n    }\n    dataArray[4] = allocationResult;\n    *dataArray = allocationResult + offset;\n    dataArray[5] = currentLimit;\n    dataArray[2] = currentLimit - offset;\n    currentLimit = upperLimit;\n  }\n  if (upperLimit <= currentLimit) {\n    currentLimit = upperLimit;\n  }\n  copyRange(*dataArray,newValue,currentLimit);\n  dataArray[2] = dataArray[2] - currentLimit;\n  *dataArray = currentLimit + *dataArray;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08005044": "modify_data_08005044",
                "param_1": "result",
                "param_2": "dataArray",
                "param_3": "newValue",
                "param_4": "upperLimit",
                "iVar1": "allocationResult",
                "iVar4": "offset",
                "uVar2": "newLimit",
                "uVar3": "currentLimit",
                "allocate_and_set_pointer_08005714": "allocateAndSetPointer",
                "copy_bytes_08005630": "copyBytes",
                "allocate_and_copy_data_080057d0": "allocateAndCopyData",
                "update_data_structure_0800567c": "updateDataStructure",
                "copy_range_08005646": "copyRange"
            },
            "calling": [
                "FUN_080050fc"
            ],
            "called": [
                "FUN_08005646",
                "FUN_080057d0",
                "FUN_08005714",
                "FUN_0800567c",
                "FUN_08005630"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080050fc": {
            "entrypoint": "0x080050fc",
            "current_name": "parse_and_modify_data_080050fc",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08005294) */\n\nint parseAndModifyData_080050fc(undefined4 *result,int *data,byte *pattern,int *pointer)\n\n{\n  int index1;\n  int index2;\n  int *pointer2;\n  bool flag;\n  byte *ptr1;\n  byte *ptr2;\n  int result2;\n  int *localPointer;\n  uint flags;\n  int length;\n  undefined4 value;\n  int number;\n  int totalLength;\n  byte character;\n  undefined value1;\n  undefined value2;\n  undefined value3;\n  undefined4 value4;\n  \n  localPointer = pointer;\n  if (((int)((uint)*(ushort *)(data + 3) << 0x18) < 0) && (data[4] == 0)) {\n    index1 = allocate_and_set_pointer_08005714(result,0x40);\n    *data = index1;\n    data[4] = index1;\n    if (index1 == 0) {\n      *result = 0xc;\n      return -1;\n    }\n    data[5] = 0x40;\n  }\n  totalLength = 0;\n  value1 = 0x20;\n  value2 = 0x30;\n  ptr1 = pattern;\nLAB_08005146:\n  ptr2 = ptr1;\n  if (*ptr2 != 0) goto LAB_080051ca;\n  goto LAB_08005150;\nLAB_080051ca:\n  ptr1 = ptr2 + 1;\n  if (*ptr2 != 0x25) goto LAB_08005146;\nLAB_08005150:\n  index1 = (int)ptr2 - (int)pattern;\n  if (index1 != 0) {\n    index2 = modify_data_08005044(result,data,pattern,index1);\n    if (index2 == -1) {\nLAB_080052ac:\n      if ((int)((uint)*(ushort *)(data + 3) << 0x19) < 0) {\n        return -1;\n      }\n      return totalLength;\n    }\n    totalLength = totalLength + index1;\n  }\n  if (*ptr2 == 0) goto LAB_080052ac;\n  flags = 0;\n  number = 0;\n  length = -1;\n  value = 0;\n  value3 = 0;\n  value4 = 0;\n  ptr1 = ptr2 + 1;\n  while( true ) {\n    index1 = find_character_08005614(&DAT_08007379,*ptr1);\n    pattern = ptr1 + 1;\n    if (index1 == 0) break;\n    flags = 1 << (index1 + 0xf7ff8c87U & 0xff) | flags;\n    ptr1 = pattern;\n  }\n  if ((int)(flags << 0x1b) < 0) {\n    value3 = 0x20;\n  }\n  if ((int)(flags << 0x1c) < 0) {\n    value3 = 0x2b;\n  }\n  if (*ptr1 == 0x2a) {\n    pointer2 = localPointer + 1;\n    index1 = *localPointer;\n    localPointer = pointer2;\n    if (index1 < 0) {\n      number = -index1;\n      flags = flags | 2;\n      goto LAB_080051fc;\n    }\n  }\n  else {\n    flag = false;\n    index1 = number;\n    pattern = ptr1;\n    while( true ) {\n      if (9 < *pattern - 0x30) break;\n      index1 = index1 * 10 + (*pattern - 0x30);\n      flag = true;\n      pattern = pattern + 1;\n    }\n    if (!flag) goto LAB_080051fc;\n  }\n  number = index1;\nLAB_080051fc:\n  if (*pattern == 0x2e) {\n    if (pattern[1] == 0x2a) {\n      pattern = pattern + 2;\n      pointer2 = localPointer + 1;\n      length = *localPointer;\n      localPointer = pointer2;\n      if (length < 0) {\n        length = -1;\n      }\n    }\n    else {\n      flag = false;\n      index1 = 0;\n      length = 0;\n      while( true ) {\n        pattern = pattern + 1;\n        if (9 < *pattern - 0x30) break;\n        index1 = index1 * 10 + (*pattern - 0x30);\n        flag = true;\n      }\n      if (flag) {\n        length = index1;\n      }\n    }\n  }\n  index1 = find_character_08005614(&DAT_0800737f,*pattern,3);\n  if (index1 != 0) {\n    pattern = pattern + 1;\n    flags = flags | 0x40 << (index1 + 0xf7ff8c81U & 0xff);\n  }\n  character = *pattern;\n  pattern = pattern + 1;\n  index1 = find_character_08005614(\"efgEFG\",character,6);\n  if (index1 == 0) {\n    result2 = parse_data_080053d4(result,&flags,data,0x8005045,&localPointer);\n    if (result2 == -1) goto LAB_080052ac;\n  }\n  else {\n    localPointer = (int *)(((int)localPointer + 7U & 0xfffffff8) + 8);\n  }\n  totalLength = totalLength + result2;\n  ptr1 = pattern;\n  goto LAB_08005146;\n}\n\n",
            "renaming": {
                "FUN_080050fc": "parse_and_modify_data_080050fc",
                "param_1": "result",
                "param_2": "data",
                "param_3": "pattern",
                "param_4": "pointer",
                "iVar1": "index1",
                "iVar2": "index2",
                "piVar3": "pointer2",
                "bVar4": "flag",
                "pbVar5": "ptr1",
                "pbVar6": "ptr2",
                "unaff_r9": "result2",
                "local_8c": "localPointer",
                "local_88": "flags",
                "local_84": "length",
                "local_80": "value",
                "local_7c": "number",
                "local_74": "totalLength",
                "local_70": "character",
                "local_6f": "value1",
                "local_6e": "value2",
                "local_45": "value3",
                "local_30": "value4"
            },
            "calling": [
                "FUN_08004ffc"
            ],
            "called": [
                "FUN_08005614",
                "FUN_08005714",
                "FUN_080053d4",
                "FUN_08005044"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080052e4": {
            "entrypoint": "0x080052e4",
            "current_name": "process_data_080052e4",
            "code": "\nundefined4\nprocessData_080052e4(undefined4 input,uint *data,uint *output_size,undefined4 param,code *callback)\n\n{\n  int i;\n  int result;\n  uint max_size;\n  uint offset;\n  bool flag;\n  \n  max_size = data[4];\n  if ((int)data[4] < (int)data[2]) {\n    max_size = data[2];\n  }\n  *output_size = max_size;\n  if (*(char *)((int)data + 0x43) != '\\0') {\n    *output_size = max_size + 1;\n  }\n  if ((int)(*data << 0x1a) < 0) {\n    *output_size = *output_size + 2;\n  }\n  if ((*data & 6) == 0) {\n    for (i = 0; i < (int)(data[3] - *output_size); i = i + 1) {\n      result = (*callback)(input,param,(int)data + 0x19,1);\n      if (result == -1) {\n        return 0xffffffff;\n      }\n    }\n  }\n  max_size = (uint)*(byte *)((int)data + 0x43);\n  if (max_size != 0) {\n    max_size = 1;\n  }\n  offset = max_size;\n  if ((int)(*data << 0x1a) < 0) {\n    *(undefined *)((int)data + max_size + 0x43) = 0x30;\n    offset = max_size + 2;\n    *(undefined *)((int)data + max_size + 0x44) = *(undefined *)((int)data + 0x45);\n  }\n  i = (*callback)(input,param,(int)data + 0x43,offset);\n  if (i != -1) {\n    max_size = data[3];\n    flag = (*data & 6) != 4;\n    if (flag) {\n      max_size = 0;\n    }\n    offset = 0;\n    if (!flag) {\n      max_size = max_size - *output_size;\n    }\n    if (!flag) {\n      max_size = max_size & ~((int)max_size >> 0x1f);\n    }\n    if ((int)data[4] < (int)data[2]) {\n      max_size = max_size + (data[2] - data[4]);\n    }\n    while( true ) {\n      if (max_size == offset) {\n        return 0;\n      }\n      i = (*callback)(input,param,(int)data + 0x1a,1);\n      if (i == -1) break;\n      offset = offset + 1;\n    }\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_080052e4": "process_data_080052e4",
                "param_1": "input",
                "param_2": "data",
                "param_3": "output_size",
                "param_4": "param",
                "param_5": "callback",
                "iVar1": "i",
                "iVar2": "result",
                "uVar3": "max_size",
                "uVar4": "offset",
                "bVar5": "flag"
            },
            "calling": [
                "FUN_080053d4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080053d4": {
            "entrypoint": "0x080053d4",
            "current_name": "parse_data_080053d4",
            "code": "\nuint parseData_080053d4(undefined4 param1,uint *data,undefined4 param3,code *callback,uint **counter)\n\n{\n  byte byteVal;\n  int index;\n  uint *ptr;\n  int result;\n  char *hexChars;\n  uint base;\n  uint **ppuVar7;\n  char **ppcVar8;\n  uint value;\n  uint length;\n  char *output;\n  char *input;\n  uint counters [2];\n  \n  byteVal = *(byte *)(data + 6);\n  input = (char *)((int)data + 0x43);\n  if (byteVal != 0x6e) {\n    if (byteVal < 0x6f) {\n      if (byteVal != 99) {\n        if (byteVal < 100) {\n          if (byteVal == 0) goto LAB_0800558e;\n          if (byteVal != 0x58) goto LAB_08005404;\n          *(undefined *)((int)data + 0x45) = 0x58;\n          hexChars = \"0123456789ABCDEF\";\nLAB_0800551e:\n          base = *data;\n          ptr = *counter;\n          *counter = ptr + 1;\n          if (((base & 0x80) == 0) && ((int)(base << 0x19) < 0)) {\n            value = (uint)*(ushort *)ptr;\n          }\n          else {\n            value = *ptr;\n          }\n          if ((int)(base << 0x1f) < 0) {\n            *data = base | 0x20;\n          }\n          if (value == 0) {\n            *data = *data & 0xffffffdf;\n          }\n          base = 0x10;\nLAB_080054b4:\n          *(undefined *)((int)data + 0x43) = 0;\n        }\n        else {\n          if ((byteVal != 100) && (byteVal != 0x69)) goto LAB_08005404;\n          value = *data;\n          ptr = *counter;\n          if ((value & 0x80) == 0) {\n            *counter = ptr + 1;\n            if ((value & 0x40) == 0) goto LAB_08005424;\n            value = (uint)(short)*(ushort *)ptr;\n          }\n          else {\n            *counter = ptr + 1;\nLAB_08005424:\n            value = *ptr;\n          }\n          if ((int)value < 0) {\n            value = -value;\n            *(undefined *)((int)data + 0x43) = 0x2d;\n          }\n          hexChars = \"0123456789ABCDEF\";\n          base = 10;\n        }\n        length = data[1];\n        data[2] = length;\n        output = input;\n        if ((int)length < 0) {\n          if (value != 0) goto LAB_08005552;\nLAB_08005600:\n          *(char *)((int)data + 0x42) = *hexChars;\n          output = (char *)((int)data + 0x42);\n        }\n        else {\n          *data = *data & 0xfffffffb;\n          if (value == 0) {\n            if (length != 0) goto LAB_08005600;\n          }\n          else {\nLAB_08005552:\n            do {\n              length = value / base;\n              output = output + -1;\n              *output = hexChars[value - base * length];\n              value = length;\n            } while (length != 0);\n          }\n        }\n        if (((base == 8) && ((int)(*data << 0x1f) < 0)) && ((int)data[1] <= (int)data[4]))\n        {\n          output[-1] = '0';\n          output = output + -1;\n        }\n        data[4] = (int)input - (int)output;\n        input = output;\n        goto LAB_080054fa;\n      }\n      ptr = *counter;\n      *counter = ptr + 1;\n      *(char *)((int)data + 0x42) = (char)*ptr;\nLAB_08005464:\n      input = (char *)((int)data + 0x42);\n      value = 1;\n    }\n    else {\n      if (byteVal != 0x73) {\n        if (byteVal < 0x74) {\n          if (byteVal == 0x6f) {\nLAB_0800548a:\n            value = *data;\n            ptr = *counter;\n            if ((value & 0x80) == 0) {\n              *counter = ptr + 1;\n              if ((value & 0x40) == 0) goto LAB_08005498;\n              value = (uint)*(ushort *)ptr;\n            }\n            else {\n              *counter = ptr + 1;\nLAB_08005498:\n              value = *ptr;\n            }\n            if (byteVal == 0x6f) {\n              base = 8;\n            }\n            else {\n              base = 10;\n            }\n            hexChars = \"0123456789ABCDEF\";\n            goto LAB_080054b4;\n          }\n          if (byteVal == 0x70) {\n            *data = *data | 0x20;\nLAB_0800544a:\n            hexChars = \"0123456789abcdef\";\n            *(undefined *)((int)data + 0x45) = 0x78;\n            goto LAB_0800551e;\n          }\n        }\n        else {\n          if (byteVal == 0x75) goto LAB_0800548a;\n          if (byteVal == 0x78) goto LAB_0800544a;\n        }\nLAB_08005404:\n        *(byte *)((int)data + 0x42) = byteVal;\n        goto LAB_08005464;\n      }\n      ppcVar8 = (char **)*counter;\n      *counter = (uint *)(ppcVar8 + 1);\n      input = *ppcVar8;\n      index = find_character_08005614(input,0,data[1]);\n      if (index != 0) {\n        data[1] = index - (int)input;\n      }\n      value = data[1];\n    }\n    data[4] = value;\n    *(undefined *)((int)data + 0x43) = 0;\n    goto LAB_080054fa;\n  }\n  value = *data;\n  ppuVar7 = (uint **)*counter;\n  base = data[5];\n  if ((value & 0x80) == 0) {\n    *counter = (uint *)(ppuVar7 + 1);\n    ptr = *ppuVar7;\n    if ((value & 0x40) == 0) goto LAB_0800557a;\n    *(short *)ptr = (short)base;\n  }\n  else {\n    *counter = (uint *)(ppuVar7 + 1);\n    ptr = *ppuVar7;\nLAB_0800557a:\n    *ptr = base;\n  }\nLAB_0800558e:\n  data[4] = 0;\nLAB_080054fa:\n  index = process_data_080052e4(param1,data,counters,param3,callback);\n  if ((index == -1) || (index = (*callback)(param1,param3,input,data[4]), index == -1)) {\nLAB_0800550e:\n    value = 0xffffffff;\n  }\n  else {\n    if ((int)(*data << 0x1e) < 0) {\n      for (index = 0; index < (int)(data[3] - counters[0]); index = index + 1) {\n        result = (*callback)(param1,param3,(int)data + 0x19,1);\n        if (result == -1) goto LAB_0800550e;\n      }\n    }\n    value = data[3];\n    if ((int)data[3] < (int)counters[0]) {\n      value = counters[0];\n    }\n  }\n  return value;\n}\n\n",
            "renaming": {
                "FUN_080053d4": "parse_data_080053d4",
                "param_1": "param1",
                "param_2": "data",
                "param_3": "param3",
                "param_4": "callback",
                "param_5": "counter",
                "bVar1": "byteVal",
                "iVar2": "index",
                "puVar3": "ptr",
                "iVar4": "result",
                "pcVar5": "hexChars",
                "uVar6": "base",
                "uVar9": "value",
                "uVar10": "length",
                "pcVar11": "output",
                "pcVar12": "input",
                "local_24": "counters"
            },
            "calling": [
                "FUN_080050fc"
            ],
            "called": [
                "FUN_08005614",
                "FUN_080052e4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005614": {
            "entrypoint": "0x08005614",
            "current_name": "find_character_08005614",
            "code": "\nchar * find_character_08005614(char *string,char character,int length)\n\n{\n  char *current_position;\n  char *next_position;\n  \n  current_position = string;\n  do {\n    next_position = current_position;\n    if (next_position == string + length) {\n      return (char *)0x0;\n    }\n    current_position = next_position + 1;\n  } while (*next_position != character);\n  return next_position;\n}\n\n",
            "renaming": {
                "FUN_08005614": "find_character_08005614",
                "param_1": "string",
                "param_2": "character",
                "param_3": "length",
                "pcVar1": "current_position",
                "pcVar2": "next_position"
            },
            "calling": [
                "FUN_080053d4",
                "FUN_080050fc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005630": {
            "entrypoint": "0x08005630",
            "current_name": "copy_bytes_08005630",
            "code": "\nvoid copyBytes_08005630(int srcOffset,undefined *source,int numBytes)\n\n{\n  undefined *destEnd;\n  undefined *dest;\n  \n  dest = (undefined *)(srcOffset + -1);\n  destEnd = source + numBytes;\n  for (; source != destEnd; source = source + 1) {\n    dest = dest + 1;\n    *dest = *source;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005630": "copy_bytes_08005630",
                "param_1": "srcOffset",
                "param_2": "source",
                "param_3": "numBytes",
                "puVar1": "destEnd",
                "puVar2": "dest"
            },
            "calling": [
                "FUN_080057d0",
                "FUN_08005044"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005646": {
            "entrypoint": "0x08005646",
            "current_name": "copy_range_08005646",
            "code": "\nvoid copyRange_08005646(undefined *destination,undefined *source,int length)\n\n{\n  undefined *end;\n  \n  end = source + length;\n  if ((source < destination) && (destination < end)) {\n    destination = destination + length;\n    length = length - (int)end;\n    while (end + length != (undefined *)0x0) {\n      end = end + -1;\n      destination = destination + -1;\n      *destination = *end;\n    }\n    return;\n  }\n  destination = destination + -1;\n  for (; source != end; source = source + 1) {\n    destination = destination + 1;\n    *destination = *source;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005646": "copy_range_08005646",
                "param_1": "destination",
                "param_2": "source",
                "param_3": "length",
                "puVar1": "end"
            },
            "calling": [
                "FUN_08005044"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800567c": {
            "entrypoint": "0x0800567c",
            "current_name": "update_data_structure_0800567c",
            "code": "\nvoid updateDataStructure_0800567c(undefined4 *output,int size,undefined4 value1,undefined4 value2)\n\n{\n  int **temp1;\n  int **temp2;\n  int **temp3;\n  int *temp4;\n  int **temp5;\n  int **temp6;\n  \n  if (size == 0) {\n    return;\n  }\n  temp6 = (int **)(size + -4);\n  if (*(int *)(size + -4) < 0) {\n    temp6 = (int **)((int)temp6 + *(int *)(size + -4));\n  }\n  FUNC_0800583c();\n  temp3 = (int **)&DAT_200002ac;\n  if (DAT_200002ac == (int **)0x0) {\n    temp6[1] = (int *)0x0;\n    temp2 = temp1;\n    DAT_200002ac = temp6;\n  }\n  else {\n    temp3 = DAT_200002ac;\n    if (temp6 < DAT_200002ac) {\n      temp2 = (int **)*temp6;\n      temp3 = (int **)((int)temp6 + (int)temp2);\n      if (DAT_200002ac == temp3) {\n        temp4 = *DAT_200002ac;\n        DAT_200002ac = (int **)DAT_200002ac[1];\n        temp3 = (int **)((int)temp4 + (int)temp2);\n        *temp6 = (int *)temp3;\n      }\n      temp6[1] = (int *)DAT_200002ac;\n      DAT_200002ac = temp6;\n    }\n    else {\n      do {\n        temp5 = temp3;\n        temp3 = (int **)temp5[1];\n        if (temp3 == (int **)0x0) break;\n      } while (temp3 <= temp6);\n      temp2 = (int **)*temp5;\n      if ((int **)((int)temp5 + (int)temp2) == temp6) {\n        temp2 = (int **)((int)temp2 + (int)*temp6);\n        *temp5 = (int *)temp2;\n        if (temp3 == (int **)((int)temp5 + (int)temp2)) {\n          temp4 = *temp3;\n          temp3 = (int **)temp3[1];\n          temp2 = (int **)((int)temp2 + (int)temp4);\n          *temp5 = (int *)temp2;\n          temp5[1] = (int *)temp3;\n        }\n      }\n      else if (temp6 < (int **)((int)temp5 + (int)temp2)) {\n        *output = 0xc;\n      }\n      else {\n        temp2 = (int **)((int)temp6 + (int)*temp6);\n        if (temp3 == temp2) {\n          temp4 = *temp3;\n          temp3 = (int **)temp3[1];\n          temp2 = (int **)((int)temp4 + (int)*temp6);\n          *temp6 = (int *)temp2;\n        }\n        temp6[1] = (int *)temp3;\n        temp5[1] = (int *)temp6;\n      }\n    }\n  }\n  FUNC_0800583e(output,temp2,temp3,value2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800567c": "update_data_structure_0800567c",
                "param_1": "output",
                "param_2": "size",
                "param_3": "value1",
                "param_4": "value2",
                "extraout_r1": "temp1",
                "ppiVar1": "temp2",
                "ppiVar2": "temp3",
                "piVar3": "temp4",
                "ppiVar4": "temp5",
                "ppiVar5": "temp6"
            },
            "calling": [
                "FUN_080057d0",
                "FUN_08005044"
            ],
            "called": [
                "FUN_0800583e",
                "FUN_0800583c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005714": {
            "entrypoint": "0x08005714",
            "current_name": "allocate_and_set_pointer_08005714",
            "code": "\nuint allocate_and_set_pointer_08005714(undefined4 *output_buffer,uint input_size)\n\n{\n  uint *list_pointer;\n  int temp_var;\n  uint *current_pointer;\n  uint difference;\n  uint *previous_pointer;\n  uint new_buffer_size;\n  \n  new_buffer_size = (input_size + 3 & 0xfffffffc) + 8;\n  if (new_buffer_size < 0xc) {\n    new_buffer_size = 0xc;\n  }\n  if (((int)new_buffer_size < 0) || (new_buffer_size < input_size)) {\n    *output_buffer = 0xc;\n  }\n  else {\n    FUNC_0800583c();\n    list_pointer = DAT_200002ac;\n    previous_pointer = DAT_200002ac;\n    while (current_pointer = list_pointer, current_pointer != (uint *)0x0) {\n      difference = *current_pointer - new_buffer_size;\n      if (-1 < (int)difference) {\n        if (difference < 0xc) {\n          if (previous_pointer == current_pointer) {\n            list_pointer = (uint *)previous_pointer[1];\n            DAT_200002ac = list_pointer;\n          }\n          else {\n            list_pointer = (uint *)current_pointer[1];\n          }\n          if (previous_pointer != current_pointer) {\n            previous_pointer[1] = (uint)list_pointer;\n            previous_pointer = current_pointer;\n          }\n        }\n        else {\n          *current_pointer = difference;\n          *(uint *)((int)current_pointer + difference) = new_buffer_size;\n          previous_pointer = (uint *)((int)current_pointer + difference);\n        }\n        goto LAB_08005778;\n      }\n      previous_pointer = current_pointer;\n      list_pointer = (uint *)current_pointer[1];\n    }\n    if (DAT_200002b0 == 0) {\n      DAT_200002b0 = update_and_check_pointer(output_buffer);\n    }\n    list_pointer = (uint *)update_and_check_pointer(output_buffer,new_buffer_size);\n    if ((list_pointer != (uint *)0xffffffff) &&\n       ((previous_pointer = (uint *)((int)list_pointer + 3U & 0xfffffffc), list_pointer == previous_pointer ||\n        (temp_var = update_and_check_pointer(output_buffer,(int)previous_pointer - (int)list_pointer), temp_var != -1)))) {\n      *previous_pointer = new_buffer_size;\nLAB_08005778:\n      FUNC_0800583e(output_buffer);\n      new_buffer_size = (int)previous_pointer + 0xbU & 0xfffffff8;\n      temp_var = new_buffer_size - (int)(previous_pointer + 1);\n      if (temp_var != 0) {\n        *(int *)((int)previous_pointer + temp_var) = -temp_var;\n        return new_buffer_size;\n      }\n      return new_buffer_size;\n    }\n    *output_buffer = 0xc;\n    FUNC_0800583e(output_buffer);\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08005714": "allocate_and_set_pointer_08005714",
                "param_1": "output_buffer",
                "param_2": "input_size",
                "puVar1": "list_pointer",
                "iVar2": "temp_var",
                "puVar3": "current_pointer",
                "uVar4": "difference",
                "puVar5": "previous_pointer",
                "uVar6": "new_buffer_size",
                "update_and_check_pointer_0800581c": "update_and_check_pointer"
            },
            "calling": [
                "FUN_080057d0",
                "FUN_080050fc",
                "FUN_08005044"
            ],
            "called": [
                "FUN_0800581c",
                "FUN_0800583e",
                "FUN_0800583c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080057d0": {
            "entrypoint": "0x080057d0",
            "current_name": "allocate_and_copy_data_080057d0",
            "code": "\nint allocateAndCopyData_080057d0(undefined4 dataPtr,int size,uint requiredSize,undefined4 additionalParam)\n\n{\n  int result;\n  uint sum;\n  \n  if (size != 0) {\n    if (requiredSize == 0) {\n      update_data_structure_0800567c();\n      result = 0;\n    }\n    else {\n      sum = calculate_sum_08005840();\n      result = size;\n      if ((sum < requiredSize) && (result = allocate_and_set_pointer_08005714(dataPtr,requiredSize), result != 0)) {\n        copy_bytes_08005630(result,size,requiredSize);\n        update_data_structure_0800567c(dataPtr,size);\n      }\n    }\n    return result;\n  }\n  result = allocate_and_set_pointer_08005714(dataPtr,requiredSize,requiredSize,additionalParam);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080057d0": "allocate_and_copy_data_080057d0",
                "param_1": "dataPtr",
                "param_2": "size",
                "param_3": "requiredSize",
                "param_4": "additionalParam",
                "iVar1": "result",
                "uVar2": "sum"
            },
            "calling": [
                "FUN_08005044"
            ],
            "called": [
                "FUN_08005714",
                "FUN_0800567c",
                "FUN_08005630",
                "FUN_08005840"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800581c": {
            "entrypoint": "0x0800581c",
            "current_name": "update_and_check_pointer_0800581c",
            "code": "\nvoid updateAndCheckPointer_0800581c(int *result,undefined4 input)\n\n{\n  int updateResult;\n  \n  DAT_2000169c = 0;\n  updateResult = update_pointer_080072b8(input);\n  if ((updateResult == -1) && (DAT_2000169c != 0)) {\n    *result = DAT_2000169c;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800581c": "update_and_check_pointer_0800581c",
                "param_1": "result",
                "param_2": "input",
                "iVar1": "updateResult"
            },
            "calling": [
                "FUN_08005714"
            ],
            "called": [
                "FUN_080072b8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800583c": {
            "entrypoint": "0x0800583c",
            "current_name": "FUNC_0800583c",
            "code": "\nvoid FUNC_0800583c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800583c": "FUNC_0800583c"
            },
            "calling": [
                "FUN_08005714",
                "FUN_0800567c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800583e": {
            "entrypoint": "0x0800583e",
            "current_name": "FUNC_0800583e",
            "code": "\nvoid FUNC_0800583e(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800583e": "FUNC_0800583e"
            },
            "calling": [
                "FUN_08005714",
                "FUN_0800567c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005840": {
            "entrypoint": "0x08005840",
            "current_name": "calculate_sum_08005840",
            "code": "\nint calculateSum_08005840(undefined4 result,int inputValue)\n\n{\n  int sum;\n  \n  sum = *(int *)(inputValue + -4) + -4;\n  if (*(int *)(inputValue + -4) < 0) {\n    sum = sum + *(int *)(inputValue + sum);\n  }\n  return sum;\n}\n\n",
            "renaming": {
                "FUN_08005840": "calculate_sum_08005840",
                "param_1": "result",
                "param_2": "inputValue",
                "iVar1": "sum"
            },
            "calling": [
                "FUN_080057d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005854": {
            "entrypoint": "0x08005854",
            "current_name": "process_inputs_and_return_result_08005854",
            "code": "\nundefined8 processInputsAndReturnResult_08005854(undefined4 input1,undefined4 input2)\n\n{\n  int inputValidity;\n  undefined4 *dataPtr;\n  int *dataPtrInt;\n  undefined8 result;\n  undefined8 processedInputs;\n  undefined4 flag;\n  undefined *data;\n  undefined4 input1_copy;\n  undefined4 input2_copy;\n  undefined4 input1_copy2;\n  undefined4 input2_copy2;\n  undefined8 infinity;\n  int inputCheckResult;\n  \n  result = calculate_improved_floating_point_08005c70();\n  if (DAT_20000224 == -1) {\n    return result;\n  }\n  inputCheckResult = check_inputs_08000a04(input1,input2,input1,input2);\n  if (inputCheckResult != 0) {\n    return result;\n  }\n  processedInputs = FUNC_0800708c(input1,input2);\n  inputValidity = check_input_validity_080009f0((int)processedInputs,(int)((ulonglong)processedInputs >> 0x20),0,0x3ff00000);\n  if (inputValidity == 0) {\n    return result;\n  }\n  flag = 1;\n  data = &DAT_080073ac;\n  input1_copy = input1;\n  input2_copy = input2;\n  input1_copy2 = input1;\n  input2_copy2 = input2;\n  infinity = get_infinity_080070a4(&DAT_0800737e);\n  if (DAT_20000224 != '\\x02') {\n    inputValidity = initialize_program_0800709e(&flag);\n    if (inputValidity != 0) goto LAB_080058d0;\n  }\n  dataPtr = (undefined4 *)get_data_080072ac();\n  *dataPtr = 0x21;\nLAB_080058d0:\n  if (inputCheckResult != 0) {\n    dataPtrInt = (int *)get_data_080072ac();\n    *dataPtrInt = inputCheckResult;\n  }\n  return infinity;\n}\n\n",
            "renaming": {
                "FUN_08005854": "process_inputs_and_return_result_08005854",
                "param_1": "input1",
                "param_2": "input2",
                "iVar1": "inputValidity",
                "puVar2": "dataPtr",
                "piVar3": "dataPtrInt",
                "uVar4": "result",
                "uVar5": "processedInputs",
                "local_48": "flag",
                "local_44": "data",
                "local_40": "input1_copy",
                "uStack_3c": "input2_copy",
                "local_38": "input1_copy2",
                "uStack_34": "input2_copy2",
                "local_30": "infinity",
                "local_28": "inputCheckResult"
            },
            "calling": [
                "FUN_08003330"
            ],
            "called": [
                "FUN_0800708c",
                "FUN_0800709e",
                "FUN_080072ac",
                "FUN_08005c70",
                "FUN_080070a4",
                "FUN_08000a04",
                "FUN_080009f0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "thunk_FUN_08006070": {
            "entrypoint": "0x080058fc",
            "current_name": "calculate_value_thunk_08006070",
            "code": "\nundefined8 calculate_value_thunk_08006070(uint input_1,uint input_2,uint input_3,uint input_4)\n\n{\n  undefined4 result_1;\n  uint result_2;\n  uint result_3;\n  int result_4;\n  uint result_5;\n  undefined8 final_result;\n  undefined8 optimized_result;\n  \n  result_5 = input_4 & 0x7fffffff;\n  if ((0x7ff00000 < (result_5 | (-input_3 | input_3) >> 0x1f)) ||\n     (result_3 = input_2 & 0x7fffffff, 0x7ff00000 < (result_3 | (-input_1 | input_1) >> 0x1f))) {\n    final_result = calculate_concated_result_0800016c(input_1,input_2,input_3,input_4,input_4);\n    return final_result;\n  }\n  if ((input_4 + 0xc0100000 | input_3) == 0) {\n    final_result = calculate_result_08006d68();\n    return final_result;\n  }\n  result_2 = (int)input_4 >> 0x1e & 2U | input_2 >> 0x1f;\n  if ((input_1 | result_3) == 0) {\n    if (result_2 == 2) {\n      return 0x400921fb54442d18;\n    }\n    if (result_2 != 3) {\n      return CONCAT44(input_2,input_1);\n    }\nLAB_0800613e:\n    final_result = 0xc00921fb54442d18;\n  }\n  else {\n    if ((input_3 | result_5) != 0) {\n      if (result_5 == 0x7ff00000) {\n        if (result_3 == 0x7ff00000) {\n          if (result_2 == 2) {\n            return 0x4002d97c7f3321d2;\n          }\n          if (result_2 == 3) {\n            return 0xc002d97c7f3321d2;\n          }\n          if (result_2 != 1) {\n            return 0x3fe921fb54442d18;\n          }\n          return 0xbfe921fb54442d18;\n        }\n        if (result_2 == 2) {\n          return 0x400921fb54442d18;\n        }\n        if (result_2 != 3) {\n          if (result_2 != 1) {\n            return 0;\n          }\n          return 0x8000000000000000;\n        }\n        goto LAB_0800613e;\n      }\n      if (result_3 != 0x7ff00000) {\n        result_4 = (int)(result_3 - result_5) >> 0x14;\n        if (result_4 < 0x3d) {\n          if (((int)input_4 < 0) && (result_4 + 0x3c < 0 != SCARRY4(result_4,0x3c))) {\n            final_result = 0;\n          }\n          else {\n            calculate_floating_point_08000724(input_1,input_2);\n            FUNC_0800708c();\n            final_result = calculate_result_08006d68();\n          }\n        }\n        else {\n          final_result = 0x3ff921fb54442d18;\n        }\n        result_4 = (int)((ulonglong)final_result >> 0x20);\n        result_1 = (undefined4)final_result;\n        if (result_2 == 1) {\n          return CONCAT44(result_4 + -0x80000000,result_1);\n        }\n        if (result_2 == 2) {\n          optimized_result = optimized_function_08000168(result_1,result_4,0x33145c07,0x3ca1a626);\n          final_result = 0x400921fb54442d18;\n        }\n        else {\n          if (result_2 == 0) {\n            return final_result;\n          }\n          final_result = optimized_function_08000168(result_1,result_4,0x33145c07,0x3ca1a626);\n          optimized_result = 0x400921fb54442d18;\n        }\n        final_result = optimized_function_08000168((int)final_result,(int)((ulonglong)final_result >> 0x20),(int)optimized_result,\n                             (int)((ulonglong)optimized_result >> 0x20));\n        return final_result;\n      }\n    }\n    if ((int)input_2 < 0) {\n      final_result = 0xbff921fb54442d18;\n    }\n    else {\n      final_result = 0x3ff921fb54442d18;\n    }\n  }\n  return final_result;\n}\n\n",
            "renaming": {
                "thunk_FUN_08006070": "calculate_value_thunk_08006070",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "uVar1": "result_1",
                "uVar2": "result_2",
                "uVar3": "result_3",
                "iVar4": "result_4",
                "uVar5": "result_5",
                "uVar6": "final_result",
                "uVar7": "optimized_result"
            },
            "calling": [
                "FUN_08003330"
            ],
            "called": [
                "FUN_08006070"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005900": {
            "entrypoint": "0x08005900",
            "current_name": "calculate_result_08005900",
            "code": "\nundefined8 calculate_result_08005900(undefined4 input1,undefined4 input2,undefined4 input3,undefined4 input4)\n\n{\n  char character;\n  int result;\n  int *pointer;\n  undefined4 *pointer2;\n  int value;\n  undefined4 upper_bits;\n  undefined4 lower_bits;\n  undefined8 result_float;\n  undefined8 concated_result;\n  undefined4 condition_flag;\n  undefined *data_pointer;\n  undefined4 local_input1;\n  undefined4 local_input2;\n  undefined4 local_input3;\n  undefined4 local_input4;\n  undefined8 result_float2;\n  int program_result;\n  \n  result_float = calculate_floating_point_08006228();\n  character = DAT_20000224;\n  upper_bits = (undefined4)((ulonglong)result_float >> 0x20);\n  lower_bits = (undefined4)result_float;\n  if (DAT_20000224 == -1) {\n    return result_float;\n  }\n  result = check_inputs_08000a04(input3,input4,input3,input4);\n  if (result != 0) {\n    return result_float;\n  }\n  result = check_inputs_08000a04(input1,input2,input1,input2);\n  local_input1 = input1;\n  local_input2 = input2;\n  local_input3 = input3;\n  local_input4 = input4;\n  if (result == 0) {\n    result = check_and_return_value_080009a0(input1,input2,0,0);\n    if (result != 0) {\n      result = check_and_return_value_080009a0(input3,input4,0,0);\n      if (result != 0) {\n        condition_flag = 1;\n        data_pointer = &DAT_080073b1;\n        result_float2 = 0;\n        program_result = 0;\n        if (character != '\\0') {\n          result_float2 = 0x3ff0000000000000;\n          goto LAB_080059d0;\n        }\n        goto LAB_08005978;\n      }\n      result = calculate_shifted_value_08007092(input3,input4);\n      if (result == 0) {\n        return result_float;\n      }\n      result = is_end_of_string_080009b4(input3,input4,0,0);\n      if (result == 0) {\n        return result_float;\n      }\n      condition_flag = 1;\n      data_pointer = &DAT_080073b1;\n      program_result = 0;\n      if (DAT_20000224 == '\\0') goto LAB_08005a22;\n      result_float2 = 0xfff0000000000000;\n      program_result = 0;\n      character = DAT_20000224;\nLAB_08005a32:\n      if (character != '\\x02') goto LAB_08005978;\n      goto LAB_08005a34;\n    }\n    result = calculate_shifted_value_08007092(lower_bits,upper_bits);\n    if (((result != 0) || (value = calculate_shifted_value_08007092(input1,input2), value == 0)) ||\n       (value = calculate_shifted_value_08007092(input3,input4), value == 0)) {\n      result = check_and_return_value_080009a0(lower_bits,upper_bits,0,0);\n      if (result == 0) {\n        return result_float;\n      }\n      result = calculate_shifted_value_08007092(input1,input2);\n      if (result == 0) {\n        return result_float;\n      }\n      result = calculate_shifted_value_08007092(input3,input4);\n      if (result == 0) {\n        return result_float;\n      }\n      condition_flag = 4;\n      data_pointer = &DAT_080073b1;\n      program_result = 0;\n      result_float2._0_4_ = 0;\n      result_float2._4_4_ = 0;\n      goto LAB_08005afa;\n    }\n    program_result = check_inputs_08000a04(lower_bits,upper_bits);\n    character = DAT_20000224;\n    if (program_result != 0) {\n      data_pointer = &DAT_080073b1;\n      condition_flag = 1;\n      program_result = result;\n      if (DAT_20000224 != '\\0') {\n        result_float2 = calculate_floating_point_08000724(0,0,0,0);\n        goto LAB_08005a32;\n      }\nLAB_08005a22:\n      data_pointer = &DAT_080073b1;\n      condition_flag = 1;\n      result_float2 = 0;\n      goto LAB_08005978;\n    }\n    data_pointer = &DAT_080073b1;\n    condition_flag = 3;\n    if (DAT_20000224 == '\\0') {\n      result_float2._0_4_ = 0xe0000000;\n      result_float2._4_4_ = 0x47efffff;\n      result = is_end_of_string_080009b4(input1,input2,0,0);\n      if (result != 0) {\n        result_float = calculate_unsigned_product_080004d0(input3,input4,0,0x3fe00000);\n        concated_result = calculate_concated_result_080070b0();\n        result = check_and_return_value_080009a0((int)result_float,(int)((ulonglong)result_float >> 0x20),(int)concated_result,\n                             (int)((ulonglong)concated_result >> 0x20));\n        if (result == 0) {\n          result_float2._0_4_ = 0xe0000000;\n          result_float2._4_4_ = 0xc7efffff;\n        }\n        goto LAB_08005afa;\n      }\nLAB_08005b98:\n      result = initialize_program_0800709e(&condition_flag);\n      if (result != 0) goto LAB_080059d0;\n    }\n    else {\n      result_float2._0_4_ = 0;\n      result_float2._4_4_ = 0x7ff00000;\n      result = is_end_of_string_080009b4(input1,input2,0,0);\n      if (result != 0) {\n        result_float = calculate_unsigned_product_080004d0(input3,input4,0,0x3fe00000);\n        concated_result = calculate_concated_result_080070b0();\n        result = check_and_return_value_080009a0((int)result_float,(int)((ulonglong)result_float >> 0x20),(int)concated_result,\n                             (int)((ulonglong)concated_result >> 0x20));\n        if (result == 0) {\n          result_float2._0_4_ = 0;\n          result_float2._4_4_ = 0xfff00000;\n        }\n      }\nLAB_08005afa:\n      if (DAT_20000224 != '\\x02') goto LAB_08005b98;\n    }\n    pointer2 = (undefined4 *)get_data_080072ac();\n    lower_bits = 0x22;\n  }\n  else {\n    result = check_and_return_value_080009a0(input3,input4,0,0);\n    if (result == 0) {\n      return result_float;\n    }\n    condition_flag = 1;\n    data_pointer = &DAT_080073b1;\n    result_float2 = 0x3ff0000000000000;\n    program_result = 0;\n    if (character == '\\x02') {\n      return 0x3ff0000000000000;\n    }\nLAB_08005978:\n    result = initialize_program_0800709e(&condition_flag);\n    if (result != 0) goto LAB_080059d0;\nLAB_08005a34:\n    pointer2 = (undefined4 *)get_data_080072ac();\n    lower_bits = 0x21;\n  }\n  *pointer2 = lower_bits;\nLAB_080059d0:\n  if (program_result != 0) {\n    pointer = (int *)get_data_080072ac();\n    *pointer = program_result;\n  }\n  return result_float2;\n}\n\n",
            "renaming": {
                "FUN_08005900": "calculate_result_08005900",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "cVar1": "character",
                "iVar2": "result",
                "piVar3": "pointer",
                "puVar4": "pointer2",
                "iVar5": "value",
                "uVar6": "upper_bits",
                "uVar7": "lower_bits",
                "uVar8": "result_float",
                "uVar9": "concated_result",
                "local_50": "condition_flag",
                "local_4c": "data_pointer",
                "local_48": "local_input1",
                "uStack_44": "local_input2",
                "local_40": "local_input3",
                "uStack_3c": "local_input4",
                "local_38": "result_float2",
                "local_30": "program_result"
            },
            "calling": [
                "FUN_0800411c"
            ],
            "called": [
                "FUN_0800709e",
                "FUN_08000724",
                "FUN_080072ac",
                "FUN_080009a0",
                "FUN_080009b4",
                "FUN_08006228",
                "FUN_08000a04",
                "FUN_080070b0",
                "FUN_08007092",
                "FUN_080004d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005bc8": {
            "entrypoint": "0x08005bc8",
            "current_name": "calculate_result_08005bc8",
            "code": "\nundefined8 calculateResult_08005bc8(undefined4 input_1,undefined4 input_2)\n\n{\n  char flag;\n  int result;\n  int *dataPtr;\n  undefined4 *ptr;\n  undefined8 floatingPointResult;\n  undefined4 flag1;\n  undefined *stringPtr;\n  undefined4 param_1_copy;\n  undefined4 param_2_copy;\n  undefined4 param_1_copy_2;\n  undefined4 param_2_copy_2;\n  undefined8 programInitialized;\n  int inputCheckResult;\n  \n  floatingPointResult = calculate_floating_point_08006c0c();\n  flag = DAT_20000224;\n  if (DAT_20000224 == -1) {\n    return floatingPointResult;\n  }\n  inputCheckResult = check_inputs_08000a04(input_1,input_2,input_1,input_2);\n  if (inputCheckResult != 0) {\n    return floatingPointResult;\n  }\n  result = is_end_of_string_080009b4(input_1,input_2,0,0);\n  if (result == 0) {\n    return floatingPointResult;\n  }\n  flag1 = 1;\n  stringPtr = &DAT_080073b5;\n  param_1_copy = input_1;\n  param_2_copy = input_2;\n  param_1_copy_2 = input_1;\n  param_2_copy_2 = input_2;\n  if (flag == '\\0') {\n    programInitialized = 0;\nLAB_08005c26:\n    result = initialize_program_0800709e(&flag1);\n    if (result != 0) goto LAB_08005c2e;\n  }\n  else {\n    programInitialized = calculate_floating_point_08000724(0,0,0,0);\n    if (flag != '\\x02') goto LAB_08005c26;\n  }\n  ptr = (undefined4 *)get_data_080072ac();\n  *ptr = 0x21;\nLAB_08005c2e:\n  if (inputCheckResult != 0) {\n    dataPtr = (int *)get_data_080072ac();\n    *dataPtr = inputCheckResult;\n  }\n  return programInitialized;\n}\n\n",
            "renaming": {
                "FUN_08005bc8": "calculate_result_08005bc8",
                "param_1": "input_1",
                "param_2": "input_2",
                "cVar1": "flag",
                "iVar2": "result",
                "piVar3": "dataPtr",
                "puVar4": "ptr",
                "uVar5": "floatingPointResult",
                "local_50": "flag1",
                "local_4c": "stringPtr",
                "local_48": "param_1_copy",
                "uStack_44": "param_2_copy",
                "local_40": "param_1_copy_2",
                "uStack_3c": "param_2_copy_2",
                "local_38": "programInitialized",
                "local_30": "inputCheckResult"
            },
            "calling": [
                "FUN_08003330"
            ],
            "called": [
                "FUN_08000724",
                "FUN_0800709e",
                "FUN_080072ac",
                "FUN_080009b4",
                "FUN_08000a04",
                "FUN_08006c0c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005c70": {
            "entrypoint": "0x08005c70",
            "current_name": "calculate_improved_floating_point_08005c70",
            "code": "\nundefined8 calculateImprovedFloatingPoint_08005c70(uint input1,uint input2)\n\n{\n  int isValid;\n  undefined4 resultHigh;\n  undefined4 resultHigh2;\n  undefined4 resultHigh3;\n  undefined4 tempHigh;\n  undefined4 resultLow;\n  undefined4 resultLow2;\n  uint tempInput2;\n  undefined8 result;\n  undefined8 tempResult;\n  undefined8 tempResult2;\n  \n  result = CONCAT44(input2,input1);\n  tempInput2 = input2 & 0x7fffffff;\n  if (tempInput2 < 0x3ff00000) {\n    if (tempInput2 < 0x3fe00000) {\n      if (0x3e3fffff < tempInput2) {\n        tempResult = calculate_unsigned_product_080004d0(input1,input2,input1,input2);\n        resultLow2 = (undefined4)((ulonglong)tempResult >> 0x20);\n        resultLow = (undefined4)tempResult;\n        tempResult = calculate_unsigned_product_080004d0(resultLow,resultLow2,0xdfdf709,0x3f023de1);\n        tempResult = calculate_concated_result_0800016c((int)tempResult,(int)((ulonglong)tempResult >> 0x20),0x7501b288,0x3f49efe0);\n        tempResult = calculate_unsigned_product_080004d0((int)tempResult,(int)((ulonglong)tempResult >> 0x20),resultLow,resultLow2);\n        tempResult = optimized_function_08000168((int)tempResult,(int)((ulonglong)tempResult >> 0x20),0xb5688f3b,0x3fa48228);\n        tempResult = calculate_unsigned_product_080004d0((int)tempResult,(int)((ulonglong)tempResult >> 0x20),resultLow,resultLow2);\n        tempResult = calculate_concated_result_0800016c((int)tempResult,(int)((ulonglong)tempResult >> 0x20),0xe884455,0x3fc9c155);\n        tempResult = calculate_unsigned_product_080004d0((int)tempResult,(int)((ulonglong)tempResult >> 0x20),resultLow,resultLow2);\n        tempResult = optimized_function_08000168((int)tempResult,(int)((ulonglong)tempResult >> 0x20),0x3eb6f7d,0x3fd4d612);\n        tempResult = calculate_unsigned_product_080004d0((int)tempResult,(int)((ulonglong)tempResult >> 0x20),resultLow,resultLow2);\n        tempResult = calculate_concated_result_0800016c((int)tempResult,(int)((ulonglong)tempResult >> 0x20),0x55555555,0x3fc55555);\n        tempResult = calculate_unsigned_product_080004d0((int)tempResult,(int)((ulonglong)tempResult >> 0x20),resultLow,resultLow2);\n        tempResult2 = calculate_unsigned_product_080004d0(resultLow,resultLow2,0xb12e9282,0x3fb3b8c5);\n        tempResult2 = optimized_function_08000168((int)tempResult2,(int)((ulonglong)tempResult2 >> 0x20),0x1b8d0159,0x3fe6066c);\n        tempResult2 = calculate_unsigned_product_080004d0((int)tempResult2,(int)((ulonglong)tempResult2 >> 0x20),resultLow,resultLow2);\n        tempResult2 = calculate_concated_result_0800016c((int)tempResult2,(int)((ulonglong)tempResult2 >> 0x20),0x9c598ac8,0x40002ae5);\n        tempResult2 = calculate_unsigned_product_080004d0((int)tempResult2,(int)((ulonglong)tempResult2 >> 0x20),resultLow,resultLow2);\n        tempResult2 = optimized_function_08000168((int)tempResult2,(int)((ulonglong)tempResult2 >> 0x20),0x1c8a2d4b,0x40033a27);\n        tempResult2 = calculate_unsigned_product_080004d0((int)tempResult2,(int)((ulonglong)tempResult2 >> 0x20),resultLow,resultLow2);\n        tempResult2 = calculate_concated_result_0800016c((int)tempResult2,(int)((ulonglong)tempResult2 >> 0x20),0,0x3ff00000);\n        tempResult = calculate_floating_point_08000724((int)tempResult,(int)((ulonglong)tempResult >> 0x20),(int)tempResult2,\n                              (int)((ulonglong)tempResult2 >> 0x20));\n        tempResult = calculate_unsigned_product_080004d0((int)tempResult,(int)((ulonglong)tempResult >> 0x20),input1,input2);\n        goto LAB_08005cba;\n      }\n      tempResult = calculate_concated_result_0800016c(input1,input2,0x8800759c,0x7e37e43c);\n      isValid = check_input_validity_080009f0((int)tempResult,(int)((ulonglong)tempResult >> 0x20),0,0x3ff00000);\n      if (isValid != 0) {\n        return result;\n      }\n    }\n    result = FUNC_0800708c(input1,input2);\n    result = optimized_function_08000168(0,0x3ff00000,(int)result,(int)((ulonglong)result >> 0x20));\n    result = calculate_unsigned_product_080004d0((int)result,(int)((ulonglong)result >> 0x20),0,0x3fe00000);\n    resultHigh = (undefined4)((ulonglong)result >> 0x20);\n    resultLow = (undefined4)result;\n    result = calculate_unsigned_product_080004d0(resultLow,resultHigh,0xdfdf709,0x3f023de1);\n    result = calculate_concated_result_0800016c((int)result,(int)((ulonglong)result >> 0x20),0x7501b288,0x3f49efe0);\n    result = calculate_unsigned_product_080004d0((int)result,(int)((ulonglong)result >> 0x20),resultLow,resultHigh);\n    result = optimized_function_08000168((int)result,(int)((ulonglong)result >> 0x20),0xb5688f3b,0x3fa48228);\n    result = calculate_unsigned_product_080004d0((int)result,(int)((ulonglong)result >> 0x20),resultLow,resultHigh);\n    result = calculate_concated_result_0800016c((int)result,(int)((ulonglong)result >> 0x20),0xe884455,0x3fc9c155);\n    result = calculate_unsigned_product_080004d0((int)result,(int)((ulonglong)result >> 0x20),resultLow,resultHigh);\n    result = optimized_function_08000168((int)result,(int)((ulonglong)result >> 0x20),0x3eb6f7d,0x3fd4d612);\n    result = calculate_unsigned_product_080004d0((int)result,(int)((ulonglong)result >> 0x20),resultLow,resultHigh);\n    result = calculate_concated_result_0800016c((int)result,(int)((ulonglong)result >> 0x20),0x55555555,0x3fc55555);\n    result = calculate_unsigned_product_080004d0((int)result,(int)((ulonglong)result >> 0x20),resultLow,resultHigh);\n    resultHigh2 = (undefined4)((ulonglong)result >> 0x20);\n    tempResult = calculate_unsigned_product_080004d0(resultLow,resultHigh,0xb12e9282,0x3fb3b8c5);\n    tempResult = optimized_function_08000168((int)tempResult,(int)((ulonglong)tempResult >> 0x20),0x1b8d0159,0x3fe6066c);\n    tempResult = calculate_unsigned_product_080004d0((int)tempResult,(int)((ulonglong)tempResult >> 0x20),resultLow,resultHigh);\n    tempResult = calculate_concated_result_0800016c((int)tempResult,(int)((ulonglong)tempResult >> 0x20),0x9c598ac8,0x40002ae5);\n    tempResult = calculate_unsigned_product_080004d0((int)tempResult,(int)((ulonglong)tempResult >> 0x20),resultLow,resultHigh);\n    tempResult = optimized_function_08000168((int)tempResult,(int)((ulonglong)tempResult >> 0x20),0x1c8a2d4b,0x40033a27);\n    tempResult = calculate_unsigned_product_080004d0((int)tempResult,(int)((ulonglong)tempResult >> 0x20),resultLow,resultHigh);\n    tempResult = calculate_concated_result_0800016c((int)tempResult,(int)((ulonglong)tempResult >> 0x20),0,0x3ff00000);\n    resultHigh3 = (undefined4)((ulonglong)tempResult >> 0x20);\n    tempResult2 = calculate_floating_point_08006c0c(resultLow,resultHigh);\n    tempHigh = (undefined4)((ulonglong)tempResult2 >> 0x20);\n    resultLow2 = (undefined4)tempResult2;\n    if (tempInput2 < 0x3fef3333) {\n      result = calculate_floating_point_08000724((int)result,resultHigh2,(int)tempResult,resultHigh3);\n      tempResult = calculate_concated_result_0800016c(resultLow2,tempHigh,resultLow2,tempHigh);\n      result = calculate_unsigned_product_080004d0((int)result,(int)((ulonglong)result >> 0x20),(int)tempResult,\n                           (int)((ulonglong)tempResult >> 0x20));\n      tempResult = calculate_unsigned_product_080004d0(0,tempHigh,0,tempHigh);\n      tempResult = optimized_function_08000168(resultLow,resultHigh,(int)tempResult,(int)((ulonglong)tempResult >> 0x20));\n      tempResult2 = calculate_concated_result_0800016c(resultLow2,tempHigh,0,tempHigh);\n      tempResult = calculate_floating_point_08000724((int)tempResult,(int)((ulonglong)tempResult >> 0x20),(int)tempResult2,\n                            (int)((ulonglong)tempResult2 >> 0x20));\n      resultLow = (undefined4)((ulonglong)tempResult >> 0x20);\n      tempResult = calculate_concated_result_0800016c((int)tempResult,resultLow,(int)tempResult,resultLow);\n      tempResult = optimized_function_08000168(0x33145c07,0x3c91a626,(int)tempResult,(int)((ulonglong)tempResult >> 0x20));\n      result = optimized_function_08000168((int)result,(int)((ulonglong)result >> 0x20),(int)tempResult,\n                           (int)((ulonglong)tempResult >> 0x20));\n      tempResult = calculate_concated_result_0800016c(0,tempHigh,0,tempHigh);\n      tempResult = optimized_function_08000168(0x54442d18,0x3fe921fb,(int)tempResult,(int)((ulonglong)tempResult >> 0x20));\n      result = optimized_function_08000168((int)result,(int)((ulonglong)result >> 0x20),(int)tempResult,\n                           (int)((ulonglong)tempResult >> 0x20));\n      resultLow = 0x3fe921fb;\n    }\n    else {\n      result = calculate_floating_point_08000724((int)result,resultHigh2,(int)tempResult,resultHigh3);\n      result = calculate_unsigned_product_080004d0((int)result,(int)((ulonglong)result >> 0x20),resultLow2,tempHigh);\n      result = calculate_concated_result_0800016c((int)result,(int)((ulonglong)result >> 0x20),resultLow2,tempHigh);\n      resultLow = (undefined4)((ulonglong)result >> 0x20);\n      result = calculate_concated_result_0800016c((int)result,resultLow,(int)result,resultLow);\n      result = optimized_function_08000168((int)result,(int)((ulonglong)result >> 0x20),0x33145c07,0x3c91a626);\n      resultLow = 0x3ff921fb;\n    }\n    result = optimized_function_08000168(0x54442d18,resultLow,(int)result,(int)((ulonglong)result >> 0x20));\n    if ((int)input2 < 1) {\n      result = CONCAT44((int)((ulonglong)result >> 0x20) + -0x80000000,(int)result);\n    }\n  }\n  else {\n    if ((tempInput2 + 0xc0100000 | input1) != 0) {\n      result = optimized_function_08000168(input1,input2,input1,input2);\n      resultLow = (undefined4)((ulonglong)result >> 0x20);\n      result = calculate_floating_point_08000724((int)result,resultLow,(int)result,resultLow);\n      return result;\n    }\n    result = calculate_unsigned_product_080004d0(input1,input2,0x54442d18,0x3ff921fb);\n    tempResult = calculate_unsigned_product_080004d0(input1,input2,0x33145c07,0x3c91a626);\nLAB_08005cba:\n    result = calculate_concated_result_0800016c((int)result,(int)((ulonglong)result >> 0x20),(int)tempResult,\n                         (int)((ulonglong)tempResult >> 0x20));\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08005c70": "calculate_improved_floating_point_08005c70",
                "param_1": "input1",
                "param_2": "input2",
                "iVar1": "isValid",
                "uVar2": "resultHigh",
                "uVar3": "resultHigh2",
                "uVar4": "resultHigh3",
                "uVar5": "tempHigh",
                "uVar6": "resultLow",
                "uVar7": "resultLow2",
                "uVar8": "tempInput2",
                "uVar9": "result",
                "uVar10": "tempResult",
                "uVar11": "tempResult2"
            },
            "calling": [
                "FUN_08005854"
            ],
            "called": [
                "FUN_08000724",
                "FUN_0800708c",
                "FUN_0800016c",
                "FUN_08006c0c",
                "FUN_08000168",
                "FUN_080004d0",
                "FUN_080009f0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006070": {
            "entrypoint": "0x08006070",
            "current_name": "calculate_floating_point_result_08006070",
            "code": "\nundefined8 calculateFloatingPointResult_08006070(uint input1,uint input2,uint input3,uint input4)\n\n{\n  undefined4 result1;\n  uint result2;\n  uint result3;\n  int result4;\n  uint result5;\n  undefined8 finalResult1;\n  undefined8 finalResult2;\n  \n  result5 = input4 & 0x7fffffff;\n  if ((0x7ff00000 < (result5 | (-input3 | input3) >> 0x1f)) ||\n     (result3 = input2 & 0x7fffffff, 0x7ff00000 < (result3 | (-input1 | input1) >> 0x1f))) {\n    finalResult1 = calculate_concated_result_0800016c(input1,input2,input3,input4,input4);\n    return finalResult1;\n  }\n  if ((input4 + 0xc0100000 | input3) == 0) {\n    finalResult1 = calculate_result_08006d68();\n    return finalResult1;\n  }\n  result2 = (int)input4 >> 0x1e & 2U | input2 >> 0x1f;\n  if ((input1 | result3) == 0) {\n    if (result2 == 2) {\n      return 0x400921fb54442d18;\n    }\n    if (result2 != 3) {\n      return CONCAT44(input2,input1);\n    }\nLAB_0800613e:\n    finalResult1 = 0xc00921fb54442d18;\n  }\n  else {\n    if ((input3 | result5) != 0) {\n      if (result5 == 0x7ff00000) {\n        if (result3 == 0x7ff00000) {\n          if (result2 == 2) {\n            return 0x4002d97c7f3321d2;\n          }\n          if (result2 == 3) {\n            return 0xc002d97c7f3321d2;\n          }\n          if (result2 != 1) {\n            return 0x3fe921fb54442d18;\n          }\n          return 0xbfe921fb54442d18;\n        }\n        if (result2 == 2) {\n          return 0x400921fb54442d18;\n        }\n        if (result2 != 3) {\n          if (result2 != 1) {\n            return 0;\n          }\n          return 0x8000000000000000;\n        }\n        goto LAB_0800613e;\n      }\n      if (result3 != 0x7ff00000) {\n        result4 = (int)(result3 - result5) >> 0x14;\n        if (result4 < 0x3d) {\n          if (((int)input4 < 0) && (result4 + 0x3c < 0 != SCARRY4(result4,0x3c))) {\n            finalResult1 = 0;\n          }\n          else {\n            calculate_floating_point_08000724(input1,input2);\n            FUNC_0800708c();\n            finalResult1 = calculate_result_08006d68();\n          }\n        }\n        else {\n          finalResult1 = 0x3ff921fb54442d18;\n        }\n        result4 = (int)((ulonglong)finalResult1 >> 0x20);\n        result1 = (undefined4)finalResult1;\n        if (result2 == 1) {\n          return CONCAT44(result4 + -0x80000000,result1);\n        }\n        if (result2 == 2) {\n          finalResult2 = optimized_function_08000168(result1,result4,0x33145c07,0x3ca1a626);\n          finalResult1 = 0x400921fb54442d18;\n        }\n        else {\n          if (result2 == 0) {\n            return finalResult1;\n          }\n          finalResult1 = optimized_function_08000168(result1,result4,0x33145c07,0x3ca1a626);\n          finalResult2 = 0x400921fb54442d18;\n        }\n        finalResult1 = optimized_function_08000168((int)finalResult1,(int)((ulonglong)finalResult1 >> 0x20),(int)finalResult2,\n                             (int)((ulonglong)finalResult2 >> 0x20));\n        return finalResult1;\n      }\n    }\n    if ((int)input2 < 0) {\n      finalResult1 = 0xbff921fb54442d18;\n    }\n    else {\n      finalResult1 = 0x3ff921fb54442d18;\n    }\n  }\n  return finalResult1;\n}\n\n",
            "renaming": {
                "FUN_08006070": "calculate_floating_point_result_08006070",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "result1",
                "uVar2": "result2",
                "uVar3": "result3",
                "iVar4": "result4",
                "uVar5": "result5",
                "uVar6": "finalResult1",
                "uVar7": "finalResult2"
            },
            "calling": [
                "thunk_FUN_08006070"
            ],
            "called": [
                "FUN_0800708c",
                "FUN_08000724",
                "FUN_08006d68",
                "FUN_0800016c",
                "FUN_08000168"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006228": {
            "entrypoint": "0x08006228",
            "current_name": "calculate_floating_point_08006228",
            "code": "\nuint calculate_floating_point_08006228(uint exponent,uint mantissa,uint mask_1,uint mask_2)\n\n{\n  undefined4 result_1;\n  uint result_2;\n  uint result_3;\n  undefined4 result_4;\n  undefined4 result_5;\n  undefined4 result_6;\n  undefined4 result_7;\n  uint result_8;\n  undefined4 result_9;\n  int int_variable_1;\n  int int_variable_2;\n  undefined4 result_10;\n  uint abs_mantissa;\n  undefined4 result_11;\n  int int_variable_3;\n  uint final_result;\n  undefined4 result_12;\n  undefined4 result_13;\n  undefined8 result_14;\n  undefined8 result_15;\n  undefined8 result_16;\n  undefined8 result_17;\n  longlong long_variable;\n  ulonglong result_18;\n  undefined8 result_19;\n  uint local_variable_1;\n  undefined4 local_variable_2;\n  undefined4 local_variable_3;\n  int local_variable_4;\n  \n  result_15 = CONCAT44(mantissa,exponent);\n  final_result = mask_2 & 0x7fffffff;\n  if ((final_result | mask_1) == 0) {\n    return 0;\n  }\n  abs_mantissa = mantissa & 0x7fffffff;\n  if (abs_mantissa < 0x7ff00001) {\n    if (abs_mantissa == 0x7ff00000) {\n      if (exponent == 0) {\n        if (0x7ff00000 < final_result) goto LAB_08006278;\nLAB_08006262:\n        if ((final_result != 0x7ff00000) || (mask_1 == 0)) {\n          if (-1 < (int)mantissa) goto LAB_0800632a;\n          if (final_result < 0x43400000) {\n            if (final_result < 0x3ff00000) {\nLAB_0800632a:\n              local_variable_1 = 0;\n              goto LAB_080062ba;\n            }\n            int_variable_1 = ((int)final_result >> 0x14) + -0x3ff;\n            if (0x14 < int_variable_1) {\n              result_2 = mask_1 >> (0x34U - int_variable_1 & 0xff);\n              if (mask_1 == result_2 << (0x34U - int_variable_1 & 0xff)) {\n                local_variable_1 = 2 - (result_2 & 1);\n                goto LAB_080062ba;\n              }\n              goto LAB_0800632a;\n            }\n            if (mask_1 == 0) {\n              result_2 = (int)final_result >> (0x14U - int_variable_1 & 0xff);\n              if (final_result == result_2 << (0x14U - int_variable_1 & 0xff)) {\n                local_variable_1 = 2 - (result_2 & 1);\n              }\n              else {\n                local_variable_1 = 0;\n              }\n              goto LAB_0800630c;\n            }\n            local_variable_1 = 0;\n          }\n          else {\n            local_variable_1 = 2;\nLAB_080062ba:\n            if (mask_1 == 0) {\n              if (final_result == 0x7ff00000) {\n                if ((abs_mantissa + 0xc0100000 | exponent) == 0) {\n                  return 0;\n                }\n                if (0x3fefffff < abs_mantissa) {\n                  if ((int)mask_2 < 0) {\n                    return 0;\n                  }\n                  return 0;\n                }\n                if (-1 < (int)mask_2) {\n                  return 0;\n                }\n                return 0;\n              }\nLAB_0800630c:\n              if (final_result == 0x3ff00000) {\n                if (-1 < (int)mask_2) {\n                  return exponent;\n                }\n                result_14 = 0x3ff0000000000000;\n                goto LAB_08006320;\n              }\n              if (mask_2 == 0x40000000) goto LAB_0800634a;\n              if ((mask_2 == 0x3fe00000) && (-1 < (int)mantissa)) {\n                final_result = calculate_floating_point_08006228_08006c0c(exponent,mantissa);\n                return final_result;\n              }\n            }\n          }\n          result_14 = FUNC_0800708c(exponent,mantissa);\n          result_12 = (undefined4)((ulonglong)result_14 >> 0x20);\n          result_1 = (undefined4)result_14;\n          result_18 = CONCAT44(mantissa,result_1) & 0x7fffffffffffffff;\n          if ((exponent == 0) && ((abs_mantissa == 0 || ((mantissa & 0x3fffffff) == 0x3ff00000)))) {\n            if ((int)mask_2 < 0) {\n              result_14 = calculate_floating_point_08006228_08000724(0,0x3ff00000,result_1,result_12);\n            }\n            if (-1 < (int)mantissa) {\n              return (uint)result_14;\n            }\n            if ((local_variable_1 | abs_mantissa + 0xc0100000) != 0) {\n              return (uint)result_14;\n            }\n          }\n          else {\n            result_2 = 0xffffffff - ((int)mantissa >> 0x1f);\n            result_14 = result_15;\n            if ((local_variable_1 | result_2) != 0) {\n              if (final_result < 0x41e00001) {\n                local_variable_4 = 0;\n                if (abs_mantissa < 0x100000) {\n                  result_18 = calculate_unsigned_product_080004d0();\n                  local_variable_4 = -0x35;\n                }\n                final_result = (uint)(result_18 >> 0x20);\n                result_1 = (undefined4)result_18;\n                local_variable_4 = ((int)final_result >> 0x14) + -0x3ff + local_variable_4;\n                final_result = final_result & 0xfffff;\n                abs_mantissa = final_result | 0x3ff00000;\n                if (final_result < 0x3988f) {\nLAB_08006628:\n                  int_variable_1 = 0;\n                }\n                else {\n                  if (0xbb679 < final_result) {\n                    abs_mantissa = abs_mantissa - 0x100000;\n                    local_variable_4 = local_variable_4 + 1;\n                    goto LAB_08006628;\n                  }\n                  int_variable_1 = 1;\n                }\n                int_variable_2 = int_variable_1 * 8;\n                result_10 = (&DAT_080073c0)[int_variable_1 * 2];\n                result_11 = (&DAT_080073c4)[int_variable_1 * 2];\n                result_15 = optimized_function_08000168(result_1,abs_mantissa,result_10,result_11);\n                result_13 = (undefined4)((ulonglong)result_15 >> 0x20);\n                result_14 = calculate_concated_result_0800016c(result_1,abs_mantissa,result_10,result_11);\n                result_14 = calculate_floating_point_08006228_08000724(0,0x3ff00000,(int)result_14,(int)((ulonglong)result_14 >> 0x20));\n                result_4 = (undefined4)((ulonglong)result_14 >> 0x20);\n                result_16 = calculate_unsigned_product_080004d0((int)result_15,result_13,(int)result_14,result_4);\n                result_5 = (undefined4)((ulonglong)result_16 >> 0x20);\n                result_12 = (undefined4)result_16;\n                result_16 = calculate_unsigned_product_080004d0(0,result_5);\n                result_15 = optimized_function_08000168((int)result_15,result_13,(int)result_16,\n                                      (int)((ulonglong)result_16 >> 0x20));\n                result_16 = optimized_function_08000168(0,((int)abs_mantissa >> 1 | 0x20000000U) + 0x80000 + int_variable_1 * 0x40000,\n                                      result_10,result_11);\n                result_16 = optimized_function_08000168(result_1,abs_mantissa,(int)result_16,(int)((ulonglong)result_16 >> 0x20));\n                result_16 = calculate_unsigned_product_080004d0((int)result_16,(int)((ulonglong)result_16 >> 0x20),0,result_5);\n                result_15 = optimized_function_08000168((int)result_15,(int)((ulonglong)result_15 >> 0x20),(int)result_16,\n                                      (int)((ulonglong)result_16 >> 0x20));\n                result_15 = calculate_unsigned_product_080004d0((int)result_15,(int)((ulonglong)result_15 >> 0x20),(int)result_14,result_4\n                                     );\n                result_13 = (undefined4)((ulonglong)result_15 >> 0x20);\n                result_14 = calculate_unsigned_product_080004d0(result_12,result_5);\n                result_4 = (undefined4)((ulonglong)result_14 >> 0x20);\n                result_1 = (undefined4)result_14;\n                result_14 = calculate_unsigned_product_080004d0(result_1,result_4,0x4a454eef,0x3fca7e28);\n                result_14 = calculate_concated_result_0800016c((int)result_14,(int)((ulonglong)result_14 >> 0x20),0x93c9db65,\n                                      0x3fcd864a);\n                result_14 = calculate_unsigned_product_080004d0((int)result_14,(int)((ulonglong)result_14 >> 0x20),result_1,result_4);\n                result_14 = calculate_concated_result_0800016c((int)result_14,(int)((ulonglong)result_14 >> 0x20),0xa91d4101,\n                                      0x3fd17460);\n                result_14 = calculate_unsigned_product_080004d0((int)result_14,(int)((ulonglong)result_14 >> 0x20),result_1,result_4);\n                result_14 = calculate_concated_result_0800016c((int)result_14,(int)((ulonglong)result_14 >> 0x20),0x518f264d,\n                                      0x3fd55555);\n                result_14 = calculate_unsigned_product_080004d0((int)result_14,(int)((ulonglong)result_14 >> 0x20),result_1,result_4);\n                result_14 = calculate_concated_result_0800016c((int)result_14,(int)((ulonglong)result_14 >> 0x20),0xdb6fabff,\n                                      0x3fdb6db6);\n                result_14 = calculate_unsigned_product_080004d0((int)result_14,(int)((ulonglong)result_14 >> 0x20),result_1,result_4);\n                result_14 = calculate_concated_result_0800016c((int)result_14,(int)((ulonglong)result_14 >> 0x20),0x33333303,\n                                      0x3fe33333);\n                result_16 = calculate_unsigned_product_080004d0(result_1,result_4,result_1,result_4);\n                result_14 = calculate_unsigned_product_080004d0((int)result_14,(int)((ulonglong)result_14 >> 0x20),(int)result_16,\n                                      (int)((ulonglong)result_16 >> 0x20));\n                result_16 = calculate_concated_result_0800016c(result_12,result_5,0,result_5);\n                result_16 = calculate_unsigned_product_080004d0((int)result_16,(int)((ulonglong)result_16 >> 0x20),(int)result_15,\n                                      result_13);\n                result_14 = calculate_concated_result_0800016c((int)result_16,(int)((ulonglong)result_16 >> 0x20),(int)result_14,\n                                      (int)((ulonglong)result_14 >> 0x20));\n                result_1 = (undefined4)((ulonglong)result_14 >> 0x20);\n                result_16 = calculate_unsigned_product_080004d0(0,result_5,0,result_5);\n                result_4 = (undefined4)((ulonglong)result_16 >> 0x20);\n                result_17 = calculate_concated_result_0800016c((int)result_16,result_4,0,0x40080000);\n                calculate_concated_result_0800016c((int)result_17,(int)((ulonglong)result_17 >> 0x20),(int)result_14,result_1);\n                result_17 = calculate_unsigned_product_080004d0(0,result_5,0,result_6);\n                result_10 = (undefined4)((ulonglong)result_17 >> 0x20);\n                result_19 = optimized_function_08000168(0,result_6,0,0x40080000);\n                result_16 = optimized_function_08000168((int)result_19,(int)((ulonglong)result_19 >> 0x20),(int)result_16,result_4\n                                     );\n                result_14 = optimized_function_08000168((int)result_14,result_1,(int)result_16,(int)((ulonglong)result_16 >> 0x20)\n                                     );\n                result_14 = calculate_unsigned_product_080004d0((int)result_14,(int)((ulonglong)result_14 >> 0x20),result_12,result_5);\n                result_15 = calculate_unsigned_product_080004d0((int)result_15,result_13,0,result_6);\n                result_14 = calculate_concated_result_0800016c((int)result_14,(int)((ulonglong)result_14 >> 0x20),(int)result_15,\n                                      (int)((ulonglong)result_15 >> 0x20));\n                result_1 = (undefined4)((ulonglong)result_14 >> 0x20);\n                calculate_concated_result_0800016c((int)result_17,result_10,(int)result_14,result_1);\n                result_15 = calculate_unsigned_product_080004d0(0,result_7,0xe0000000,0x3feec709);\n                result_16 = optimized_function_08000168(0,result_7,(int)result_17,result_10);\n                result_14 = optimized_function_08000168((int)result_14,result_1,(int)result_16,(int)((ulonglong)result_16 >> 0x20)\n                                     );\n                result_14 = calculate_unsigned_product_080004d0((int)result_14,(int)((ulonglong)result_14 >> 0x20),0xdc3a03fd,\n                                      0x3feec709);\n                result_16 = calculate_unsigned_product_080004d0(0,result_7,0x145b01f5,0xbe3e2fe0);\n                result_14 = calculate_concated_result_0800016c((int)result_14,(int)((ulonglong)result_14 >> 0x20),(int)result_16,\n                                      (int)((ulonglong)result_16 >> 0x20));\n                result_14 = calculate_concated_result_0800016c((int)result_14,(int)((ulonglong)result_14 >> 0x20),\n                                      *(undefined4 *)(&DAT_080073e0 + int_variable_2),\n                                      *(undefined4 *)(&DAT_080073e4 + int_variable_2));\n                result_16 = extract_bits_08000404(local_variable_4);\n                result_1 = (undefined4)((ulonglong)result_16 >> 0x20);\n                result_12 = *(undefined4 *)(&DAT_080073d0 + int_variable_2);\n                result_13 = *(undefined4 *)(&DAT_080073d4 + int_variable_2);\n                result_17 = calculate_concated_result_0800016c((int)result_15,(int)((ulonglong)result_15 >> 0x20),(int)result_14,\n                                      (int)((ulonglong)result_14 >> 0x20));\n                result_17 = calculate_concated_result_0800016c((int)result_17,(int)((ulonglong)result_17 >> 0x20),result_12,result_13);\n                calculate_concated_result_0800016c((int)result_17,(int)((ulonglong)result_17 >> 0x20),(int)result_16,result_1);\n                result_16 = optimized_function_08000168(0,result_8,(int)result_16,result_1);\n                long_variable = optimized_function_08000168((int)result_16,(int)((ulonglong)result_16 >> 0x20),result_12,result_13);\n                final_result = result_8;\n              }\n              else {\n                if (0x43f00000 < final_result) {\n                  if (abs_mantissa < 0x3ff00000) goto LAB_080063fa;\nLAB_08006418:\n                  if ((int)mask_2 < 1) {\n                    return 0;\n                  }\nLAB_08006400:\n                  exponent = 0x8800759c;\n                  mantissa = 0x7e37e43c;\n                  result_15 = 0x7e37e43c8800759c;\n                  goto LAB_0800634a;\n                }\n                if (abs_mantissa < 0x3fefffff) {\nLAB_080063fa:\n                  if (-1 < (int)mask_2) {\n                    return 0;\n                  }\n                  goto LAB_08006400;\n                }\n                if (0x3ff00000 < abs_mantissa) goto LAB_08006418;\n                result_15 = optimized_function_08000168(result_1,result_12,0,0x3ff00000);\n                result_12 = (undefined4)((ulonglong)result_15 >> 0x20);\n                result_1 = (undefined4)result_15;\n                result_15 = calculate_unsigned_product_080004d0(result_1,result_12,0x60000000,0x3ff71547);\n                result_14 = calculate_unsigned_product_080004d0(result_1,result_12,0xf85ddf44,0x3e54ae0b);\n                result_16 = calculate_unsigned_product_080004d0(result_1,result_12,0,0x3fd00000);\n                result_16 = optimized_function_08000168(0x55555555,0x3fd55555,(int)result_16,\n                                      (int)((ulonglong)result_16 >> 0x20));\n                result_16 = calculate_unsigned_product_080004d0((int)result_16,(int)((ulonglong)result_16 >> 0x20),result_1,result_12);\n                result_16 = optimized_function_08000168(0,0x3fe00000,(int)result_16,(int)((ulonglong)result_16 >> 0x20));\n                result_17 = calculate_unsigned_product_080004d0(result_1,result_12,result_1,result_12);\n                result_16 = calculate_unsigned_product_080004d0((int)result_16,(int)((ulonglong)result_16 >> 0x20),(int)result_17,\n                                      (int)((ulonglong)result_17 >> 0x20));\n                result_16 = calculate_unsigned_product_080004d0((int)result_16,(int)((ulonglong)result_16 >> 0x20),0x652b82fe,\n                                      0x3ff71547);\n                result_14 = optimized_function_08000168((int)result_14,(int)((ulonglong)result_14 >> 0x20),(int)result_16,\n                                      (int)((ulonglong)result_16 >> 0x20));\n                calculate_concated_result_0800016c((int)result_15,(int)((ulonglong)result_15 >> 0x20),(int)result_14,\n                             (int)((ulonglong)result_14 >> 0x20));\n                long_variable = (ulonglong)result_3 << 0x20;\n                final_result = result_3;\n              }\n              result_15 = optimized_function_08000168((int)long_variable,(int)((ulonglong)long_variable >> 0x20),(int)result_15,\n                                    (int)((ulonglong)result_15 >> 0x20));\n              result_15 = optimized_function_08000168((int)result_14,(int)((ulonglong)result_14 >> 0x20),(int)result_15,\n                                    (int)((ulonglong)result_15 >> 0x20));\n              if ((local_variable_1 - 1 | result_2) == 0) {\n                mantissa = 0xbff00000;\n              }\n              else {\n                mantissa = 0x3ff00000;\n              }\n              local_variable_1 = 0;\n              result_14 = optimized_function_08000168(mask_1,mask_2,0,mask_2);\n              result_14 = calculate_unsigned_product_080004d0((int)result_14,(int)((ulonglong)result_14 >> 0x20),0,final_result);\n              result_15 = calculate_unsigned_product_080004d0((int)result_15,(int)((ulonglong)result_15 >> 0x20),mask_1,mask_2);\n              result_15 = calculate_concated_result_0800016c((int)result_14,(int)((ulonglong)result_14 >> 0x20),(int)result_15,\n                                    (int)((ulonglong)result_15 >> 0x20));\n              result_13 = (undefined4)((ulonglong)result_15 >> 0x20);\n              result_1 = (undefined4)result_15;\n              result_15 = calculate_unsigned_product_080004d0(0,final_result,0,mask_2);\n              result_4 = (undefined4)((ulonglong)result_15 >> 0x20);\n              result_12 = (undefined4)result_15;\n              long_variable = calculate_concated_result_0800016c(result_1,result_13,result_12,result_4);\n              abs_mantissa = (uint)((ulonglong)long_variable >> 0x20);\n              final_result = (uint)long_variable;\n              if (0x408fffffffffffff < long_variable) {\n                if ((abs_mantissa + 0xbf700000 | final_result) == 0) {\n                  result_14 = calculate_concated_result_0800016c(result_1,result_13,0x652b82fe,0x3c971547);\n                  result_16 = optimized_function_08000168(final_result,abs_mantissa,result_12,result_4);\n                  int_variable_1 = check_input_validity_080009f0((int)result_14,(int)((ulonglong)result_14 >> 0x20),(int)result_16,\n                                       (int)((ulonglong)result_16 >> 0x20));\n                  if (int_variable_1 == 0) goto LAB_08006968;\n                }\n                result_15 = calculate_unsigned_product_080004d0(0,mantissa,0x8800759c,0x7e37e43c);\n                exponent = 0x8800759c;\n                mantissa = 0x7e37e43c;\n                goto LAB_0800634a;\n              }\n              if ((abs_mantissa & 0x7fffffff) < 0x4090cc00) {\nLAB_08006968:\n                if ((abs_mantissa & 0x7fffffff) < 0x3fe00001) {\n                  int_variable_1 = 0;\n                }\n                else {\n                  abs_mantissa = (0x100000 >> (((int)(abs_mantissa & 0x7fffffff) >> 0x14) - 0x3feU & 0xff)) +\n                          abs_mantissa;\n                  final_result = (abs_mantissa * 2 >> 0x15) - 0x3ff;\n                  int_variable_1 = (int)(abs_mantissa & 0xfffff | 0x100000) >> (0x14 - final_result & 0xff);\n                  if (long_variable < 0) {\n                    int_variable_1 = -int_variable_1;\n                  }\n                  result_15 = optimized_function_08000168(result_12,result_4,0,abs_mantissa & ~(0xfffff >> (final_result & 0xff)));\n                }\n                local_variable_3 = (undefined4)((ulonglong)result_15 >> 0x20);\n                local_variable_2 = (undefined4)result_15;\n                calculate_concated_result_0800016c(local_variable_2,local_variable_3,result_1,result_13);\n                result_15 = calculate_unsigned_product_080004d0(0,result_9,0,0x3fe62e43);\n                result_12 = (undefined4)((ulonglong)result_15 >> 0x20);\n                result_14 = optimized_function_08000168(0,result_9,local_variable_2,local_variable_3);\n                result_14 = optimized_function_08000168(result_1,result_13,(int)result_14,(int)((ulonglong)result_14 >> 0x20));\n                result_14 = calculate_unsigned_product_080004d0((int)result_14,(int)((ulonglong)result_14 >> 0x20),0xfefa39ef,\n                                      0x3fe62e42);\n                result_16 = calculate_unsigned_product_080004d0(0,result_9,0xca86c39,0xbe205c61);\n                result_14 = calculate_concated_result_0800016c((int)result_14,(int)((ulonglong)result_14 >> 0x20),(int)result_16,\n                                      (int)((ulonglong)result_16 >> 0x20));\n                result_13 = (undefined4)((ulonglong)result_14 >> 0x20);\n                result_16 = calculate_concated_result_0800016c((int)result_15,result_12,(int)result_14,result_13);\n                result_4 = (undefined4)((ulonglong)result_16 >> 0x20);\n                result_1 = (undefined4)result_16;\n                result_15 = optimized_function_08000168(result_1,result_4,(int)result_15,result_12);\n                result_15 = optimized_function_08000168((int)result_14,result_13,(int)result_15,\n                                      (int)((ulonglong)result_15 >> 0x20));\n                result_13 = (undefined4)((ulonglong)result_15 >> 0x20);\n                result_14 = calculate_unsigned_product_080004d0(result_1,result_4,result_1,result_4);\n                result_5 = (undefined4)((ulonglong)result_14 >> 0x20);\n                result_12 = (undefined4)result_14;\n                result_14 = calculate_unsigned_product_080004d0(result_12,result_5,0x72bea4d0,0x3e663769);\n                result_14 = optimized_function_08000168((int)result_14,(int)((ulonglong)result_14 >> 0x20),0xc5d26bf1,\n                                      0x3ebbbd41);\n                result_14 = calculate_unsigned_product_080004d0((int)result_14,(int)((ulonglong)result_14 >> 0x20),result_12,result_5);\n                result_14 = calculate_concated_result_0800016c((int)result_14,(int)((ulonglong)result_14 >> 0x20),0xaf25de2c,\n                                      0x3f11566a);\n                result_14 = calculate_unsigned_product_080004d0((int)result_14,(int)((ulonglong)result_14 >> 0x20),result_12,result_5);\n                result_14 = optimized_function_08000168((int)result_14,(int)((ulonglong)result_14 >> 0x20),0x16bebd93,\n                                      0x3f66c16c);\n                result_14 = calculate_unsigned_product_080004d0((int)result_14,(int)((ulonglong)result_14 >> 0x20),result_12,result_5);\n                result_14 = calculate_concated_result_0800016c((int)result_14,(int)((ulonglong)result_14 >> 0x20),0x5555553e,\n                                      0x3fc55555);\n                result_14 = calculate_unsigned_product_080004d0((int)result_14,(int)((ulonglong)result_14 >> 0x20),result_12,result_5);\n                result_14 = optimized_function_08000168(result_1,result_4,(int)result_14,(int)((ulonglong)result_14 >> 0x20));\n                result_12 = (undefined4)((ulonglong)result_14 >> 0x20);\n                result_16 = calculate_unsigned_product_080004d0(result_1,result_4,(int)result_14,result_12);\n                result_14 = optimized_function_08000168((int)result_14,result_12,0,0x40000000);\n                result_14 = calculate_floating_point_08006228_08000724((int)result_16,(int)((ulonglong)result_16 >> 0x20),(int)result_14,\n                                      (int)((ulonglong)result_14 >> 0x20));\n                result_16 = calculate_unsigned_product_080004d0(result_1,result_4,(int)result_15,result_13);\n                result_15 = calculate_concated_result_0800016c((int)result_16,(int)((ulonglong)result_16 >> 0x20),(int)result_15,\n                                      result_13);\n                result_15 = optimized_function_08000168((int)result_14,(int)((ulonglong)result_14 >> 0x20),(int)result_15,\n                                      (int)((ulonglong)result_15 >> 0x20));\n                result_15 = optimized_function_08000168((int)result_15,(int)((ulonglong)result_15 >> 0x20),result_1,result_4);\n                result_14 = optimized_function_08000168(0,0x3ff00000,(int)result_15,(int)((ulonglong)result_15 >> 0x20));\n                int_variable_2 = (int)((ulonglong)result_14 >> 0x20);\n                int_variable_3 = int_variable_2 + int_variable_1 * 0x100000;\n                result_15 = CONCAT44(int_variable_3,(int)result_14);\n                exponent = local_variable_1;\n                if (int_variable_3 < 0x100000) {\n                  result_15 = calculate_result_080071c0((int)result_14,int_variable_2,int_variable_1);\n                }\n              }\n              else {\n                if ((abs_mantissa + 0x3f6f3400 | final_result) == 0) {\n                  result_14 = optimized_function_08000168(final_result,abs_mantissa,result_12,result_4);\n                  int_variable_1 = check_and_return_result_080009c8(result_1,result_13,(int)result_14,(int)((ulonglong)result_14 >> 0x20));\n                  if (int_variable_1 == 0) goto LAB_08006968;\n                }\n                result_15 = calculate_unsigned_product_080004d0(0,mantissa,0xc2f8f359,0x1a56e1f);\n                exponent = 0xc2f8f359;\n                mantissa = 0x1a56e1f;\n              }\nLAB_0800634a:\n              final_result = calculate_unsigned_product_080004d0((int)result_15,(int)((ulonglong)result_15 >> 0x20),exponent,mantissa);\n              return final_result;\n            }\n          }\n          result_1 = (undefined4)((ulonglong)result_14 >> 0x20);\n          result_14 = optimized_function_08000168((int)result_14,result_1,(int)result_14,result_1);\n          result_15 = result_14;\nLAB_08006320:\n          final_result = calculate_floating_point_08006228_08000724((int)result_14,(int)((ulonglong)result_14 >> 0x20),(int)result_15,\n                                (int)((ulonglong)result_15 >> 0x20));\n          return final_result;\n        }\n      }\n    }\n    else if (final_result < 0x7ff00001) goto LAB_08006262;\n  }\n  if ((abs_mantissa + 0xc0100000 | exponent) == 0) {\n    return 0;\n  }\nLAB_08006278:\n  final_result = get_infinity_080070a4(&DAT_0800737e);\n  return final_result;\n}\n\n",
            "renaming": {
                "FUN_08006228": "calculate_floating_point_08006228",
                "param_1": "exponent",
                "param_2": "mantissa",
                "param_3": "mask_1",
                "param_4": "mask_2",
                "uVar1": "result_1",
                "uVar2": "result_2",
                "extraout_r1": "result_3",
                "uVar3": "result_4",
                "uVar4": "result_5",
                "extraout_r1_00": "result_6",
                "extraout_r1_01": "result_7",
                "extraout_r1_02": "result_8",
                "extraout_r1_03": "result_9",
                "iVar5": "int_variable_1",
                "iVar6": "int_variable_2",
                "uVar7": "result_10",
                "uVar8": "abs_mantissa",
                "uVar9": "result_11",
                "iVar10": "int_variable_3",
                "uVar11": "final_result",
                "uVar12": "result_12",
                "uVar13": "result_13",
                "uVar14": "result_14",
                "uVar15": "result_15",
                "uVar16": "result_16",
                "uVar17": "result_17",
                "lVar18": "long_variable",
                "uVar19": "result_18",
                "uVar20": "result_19",
                "local_70": "local_variable_1",
                "local_68": "local_variable_2",
                "local_64": "local_variable_3",
                "local_54": "local_variable_4"
            },
            "calling": [
                "FUN_08005900"
            ],
            "called": [
                "FUN_08000404",
                "FUN_08000724",
                "FUN_0800708c",
                "FUN_080071c0",
                "FUN_0800016c",
                "FUN_080070a4",
                "FUN_080009c8",
                "FUN_08006c0c",
                "FUN_08000168",
                "FUN_080004d0",
                "FUN_080009f0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006c0c": {
            "entrypoint": "0x08006c0c",
            "current_name": "calculate_floating_point_08006c0c",
            "code": "\nundefined8 calculateFloatingPoint_08006c0c(uint input1,uint input2)\n\n{\n  undefined4 temp1;\n  uint temp2;\n  int shift1;\n  int shift2;\n  uint mask1;\n  uint mask2;\n  int result1;\n  uint result2;\n  uint bitMask;\n  int loop1;\n  uint loopMask;\n  undefined8 finalResult;\n  \n  if ((~input2 & 0x7ff00000) == 0) {\n    finalResult = calculate_unsigned_product_080004d0(input1,input2,input1,input2);\n    finalResult = calculate_concated_result_0800016c(input1,input2,(int)finalResult,(int)((ulonglong)finalResult >> 0x20));\n    return finalResult;\n  }\n  if ((int)input2 < 1) {\n    if ((input2 & 0x7fffffff | input1) == 0) {\n      return CONCAT44(input2,input1);\n    }\n    if (input2 != 0) {\n      finalResult = optimized_function_08000168(input1,input2,input1,input2);\n      temp1 = (undefined4)((ulonglong)finalResult >> 0x20);\n      finalResult = calculate_floating_point_08000724((int)finalResult,temp1,(int)finalResult,temp1);\n      return finalResult;\n    }\n  }\n  shift1 = (int)input2 >> 0x14;\n  if (shift1 == 0) {\n    while (input2 == 0) {\n      shift1 = shift1 + -0x15;\n      input2 = input1 >> 0xb;\n      input1 = input1 << 0x15;\n    }\n    temp2 = 0;\n    for (; -1 < (int)(input2 << 0xb); input2 = input2 << 1) {\n      temp2 = temp2 + 1;\n    }\n    shift1 = shift1 - (temp2 - 1);\n    input2 = input2 | input1 >> (0x20 - temp2 & 0xff);\n    input1 = input1 << (temp2 & 0xff);\n  }\n  result1 = 0;\n  temp2 = input2 & 0xfffff | 0x100000;\n  if ((shift1 + -0x3ff) * -0x80000000 < 0) {\n    temp2 = temp2 * 2 - ((int)input1 >> 0x1f);\n    input1 = input1 << 1;\n  }\n  temp2 = temp2 * 2 - ((int)input1 >> 0x1f);\n  shift2 = 0x16;\n  mask1 = 0;\n  result2 = 0x200000;\n  input1 = input1 << 1;\n  do {\n    loop1 = mask1 + result2;\n    if (loop1 <= (int)temp2) {\n      temp2 = temp2 - loop1;\n      mask1 = loop1 + result2;\n      result1 = result1 + result2;\n    }\n    shift2 = shift2 + -1;\n    temp2 = temp2 * 2 - ((int)input1 >> 0x1f);\n    result2 = result2 >> 1;\n    input1 = input1 << 1;\n  } while (shift2 != 0);\n  loop1 = 0x20;\n  bitMask = 0x80000000;\n  result2 = 0;\n  shift2 = 0;\n  do {\n    loopMask = bitMask + shift2;\n    mask2 = mask1;\n    if (((int)mask1 < (int)temp2) || ((temp2 == mask1 && (loopMask <= input1)))) {\n      shift2 = loopMask + bitMask;\n      if (((int)loopMask < 0) && (-1 < shift2)) {\n        mask2 = mask1 + 1;\n      }\n      temp2 = temp2 - mask1;\n      if (input1 < loopMask) {\n        temp2 = temp2 - 1;\n      }\n      input1 = input1 - loopMask;\n      result2 = result2 + bitMask;\n    }\n    temp2 = temp2 * 2 - ((int)input1 >> 0x1f);\n    loop1 = loop1 + -1;\n    input1 = input1 << 1;\n    bitMask = bitMask >> 1;\n    mask1 = mask2;\n  } while (loop1 != 0);\n  if ((input1 | temp2) != 0) {\n    if (result2 == 0xffffffff) {\n      result1 = result1 + 1;\n      result2 = 0;\n    }\n    else {\n      result2 = result2 + 1 & 0xfffffffe;\n    }\n  }\n  result2 = result2 >> 1;\n  if (result1 << 0x1f < 0) {\n    result2 = result2 | 0x80000000;\n  }\n  return CONCAT44((result1 >> 1) + 0x3fe00000 + (shift1 + -0x3ff >> 1) * 0x100000,result2);\n}\n\n",
            "renaming": {
                "FUN_08006c0c": "calculate_floating_point_08006c0c",
                "param_1": "input1",
                "param_2": "input2",
                "uVar1": "temp1",
                "uVar2": "temp2",
                "iVar3": "shift1",
                "iVar4": "shift2",
                "uVar5": "mask1",
                "uVar6": "mask2",
                "iVar7": "result1",
                "uVar8": "result2",
                "uVar9": "bitMask",
                "iVar10": "loop1",
                "uVar11": "loopMask",
                "uVar12": "finalResult"
            },
            "calling": [
                "FUN_08005bc8",
                "FUN_08005c70",
                "FUN_08006228"
            ],
            "called": [
                "FUN_08000724",
                "FUN_0800016c",
                "FUN_08000168",
                "FUN_080004d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006d68": {
            "entrypoint": "0x08006d68",
            "current_name": "calculate_result_08006d68",
            "code": "\nundefined8 calculate_result_08006d68(int input_param,uint input_value,undefined4 param_3,undefined4 param_4)\n\n{\n  int result;\n  undefined4 result_low;\n  undefined4 result_high;\n  undefined4 temp_low;\n  undefined4 temp_high;\n  undefined4 temp_2_low;\n  undefined4 temp_2_high;\n  uint abs_value;\n  undefined8 final_result;\n  undefined8 temp_result;\n  \n  final_result = CONCAT44(input_value,input_param);\n  abs_value = input_value & 0x7fffffff;\n  if (abs_value < 0x44100000) {\n    if (abs_value < 0x3fdc0000) {\n      if (abs_value < 0x3e200000) {\n        temp_result = calculate_concated_result_0800016c(input_param,input_value,0x8800759c,0x7e37e43c,param_4);\n        result = check_input_validity_080009f0((int)temp_result,(int)((ulonglong)temp_result >> 0x20),0,0x3ff00000);\n        if (result != 0) {\n          return final_result;\n        }\n      }\n      result = -1;\n    }\n    else {\n      final_result = FUNC_0800708c();\n      result_high = (undefined4)((ulonglong)final_result >> 0x20);\n      result_low = (undefined4)final_result;\n      if (abs_value < 0x3ff30000) {\n        if (abs_value < 0x3fe60000) {\n          final_result = calculate_concated_result_0800016c(result_low,result_high,result_low,result_high);\n          final_result = optimized_function_08000168((int)final_result,(int)((ulonglong)final_result >> 0x20),0,0x3ff00000);\n          temp_result = calculate_concated_result_0800016c(result_low,result_high,0,0x40000000);\n          final_result = calculate_floating_point_08000724((int)final_result,(int)((ulonglong)final_result >> 0x20),(int)temp_result,\n                               (int)((ulonglong)temp_result >> 0x20));\n          result = 0;\n        }\n        else {\n          final_result = optimized_function_08000168(result_low,result_high,0,0x3ff00000);\n          temp_result = calculate_concated_result_0800016c(result_low,result_high,0,0x3ff00000);\n          final_result = calculate_floating_point_08000724((int)final_result,(int)((ulonglong)final_result >> 0x20),(int)temp_result,\n                               (int)((ulonglong)temp_result >> 0x20));\n          result = 1;\n        }\n      }\n      else if (abs_value < 0x40038000) {\n        final_result = optimized_function_08000168(result_low,result_high,0,0x3ff80000);\n        temp_result = calculate_unsigned_product_080004d0(result_low,result_high,0,0x3ff80000);\n        temp_result = calculate_concated_result_0800016c((int)temp_result,(int)((ulonglong)temp_result >> 0x20),0,0x3ff00000);\n        final_result = calculate_floating_point_08000724((int)final_result,(int)((ulonglong)final_result >> 0x20),(int)temp_result,\n                             (int)((ulonglong)temp_result >> 0x20));\n        result = 2;\n      }\n      else {\n        final_result = calculate_floating_point_08000724(0,0xbff00000,result_low,result_high);\n        result = 3;\n      }\n    }\n    temp_2_high = (undefined4)((ulonglong)final_result >> 0x20);\n    temp_2_low = (undefined4)final_result;\n    final_result = calculate_unsigned_product_080004d0(temp_2_low,temp_2_high,temp_2_low,temp_2_high);\n    temp_low = (undefined4)((ulonglong)final_result >> 0x20);\n    result_low = (undefined4)final_result;\n    final_result = calculate_unsigned_product_080004d0(result_low,temp_low,result_low,temp_low);\n    temp_high = (undefined4)((ulonglong)final_result >> 0x20);\n    result_high = (undefined4)final_result;\n    final_result = calculate_unsigned_product_080004d0(result_high,temp_high,0xe322da11,0x3f90ad3a);\n    final_result = calculate_concated_result_0800016c((int)final_result,(int)((ulonglong)final_result >> 0x20),0x24760deb,0x3fa97b4b);\n    final_result = calculate_unsigned_product_080004d0((int)final_result,(int)((ulonglong)final_result >> 0x20),result_high,temp_high);\n    final_result = calculate_concated_result_0800016c((int)final_result,(int)((ulonglong)final_result >> 0x20),0xa0d03d51,0x3fb10d66);\n    final_result = calculate_unsigned_product_080004d0((int)final_result,(int)((ulonglong)final_result >> 0x20),result_high,temp_high);\n    final_result = calculate_concated_result_0800016c((int)final_result,(int)((ulonglong)final_result >> 0x20),0xc54c206e,0x3fb745cd);\n    final_result = calculate_unsigned_product_080004d0((int)final_result,(int)((ulonglong)final_result >> 0x20),result_high,temp_high);\n    final_result = calculate_concated_result_0800016c((int)final_result,(int)((ulonglong)final_result >> 0x20),0x920083ff,0x3fc24924);\n    final_result = calculate_unsigned_product_080004d0((int)final_result,(int)((ulonglong)final_result >> 0x20),result_high,temp_high);\n    final_result = calculate_concated_result_0800016c((int)final_result,(int)((ulonglong)final_result >> 0x20),0x5555550d,0x3fd55555);\n    final_result = calculate_unsigned_product_080004d0((int)final_result,(int)((ulonglong)final_result >> 0x20),result_low,temp_low);\n    result_low = (undefined4)((ulonglong)final_result >> 0x20);\n    temp_result = calculate_unsigned_product_080004d0(result_high,temp_high,0x2c6a6c2f,0xbfa2b444);\n    temp_result = optimized_function_08000168((int)temp_result,(int)((ulonglong)temp_result >> 0x20),0x52defd9a,0x3fadde2d);\n    temp_result = calculate_unsigned_product_080004d0((int)temp_result,(int)((ulonglong)temp_result >> 0x20),result_high,temp_high);\n    temp_result = optimized_function_08000168((int)temp_result,(int)((ulonglong)temp_result >> 0x20),0xaf749a6d,0x3fb3b0f2);\n    temp_result = calculate_unsigned_product_080004d0((int)temp_result,(int)((ulonglong)temp_result >> 0x20),result_high,temp_high);\n    temp_result = optimized_function_08000168((int)temp_result,(int)((ulonglong)temp_result >> 0x20),0xfe231671,0x3fbc71c6);\n    temp_result = calculate_unsigned_product_080004d0((int)temp_result,(int)((ulonglong)temp_result >> 0x20),result_high,temp_high);\n    temp_result = optimized_function_08000168((int)temp_result,(int)((ulonglong)temp_result >> 0x20),0x9998ebc4,0x3fc99999);\n    temp_result = calculate_unsigned_product_080004d0((int)temp_result,(int)((ulonglong)temp_result >> 0x20),result_high,temp_high);\n    result_high = (undefined4)((ulonglong)temp_result >> 0x20);\n    if (result == -1) {\n      final_result = calculate_concated_result_0800016c((int)final_result,result_low,(int)temp_result,result_high);\n      final_result = calculate_unsigned_product_080004d0((int)final_result,(int)((ulonglong)final_result >> 0x20),temp_2_low,temp_2_high);\n      final_result = optimized_function_08000168(temp_2_low,temp_2_high,(int)final_result,(int)((ulonglong)final_result >> 0x20));\n    }\n    else {\n      final_result = calculate_concated_result_0800016c((int)final_result,result_low,(int)temp_result,result_high);\n      final_result = calculate_unsigned_product_080004d0((int)final_result,(int)((ulonglong)final_result >> 0x20),temp_2_low,temp_2_high);\n      result = result * 8;\n      final_result = optimized_function_08000168((int)final_result,(int)((ulonglong)final_result >> 0x20),\n                           *(undefined4 *)(&UNK_08007410 + result),\n                           *(undefined4 *)(&UNK_08007414 + result));\n      final_result = optimized_function_08000168((int)final_result,(int)((ulonglong)final_result >> 0x20),temp_2_low,temp_2_high);\n      final_result = optimized_function_08000168(*(undefined4 *)(&UNK_080073f0 + result),\n                           *(undefined4 *)(&UNK_080073f4 + result),(int)final_result,\n                           (int)((ulonglong)final_result >> 0x20));\n      if ((int)input_value < 0) {\n        final_result = CONCAT44((int)((ulonglong)final_result >> 0x20) + -0x80000000,(int)final_result);\n      }\n    }\n  }\n  else if ((abs_value < 0x7ff00001) && ((abs_value != 0x7ff00000 || (input_param == 0)))) {\n    if ((int)input_value < 1) {\n      final_result = 0xbff921fb54442d18;\n    }\n    else {\n      final_result = 0x3ff921fb54442d18;\n    }\n  }\n  else {\n    final_result = calculate_concated_result_0800016c(input_param,input_value,input_param,input_value,param_4);\n  }\n  return final_result;\n}\n\n",
            "renaming": {
                "FUN_08006d68": "calculate_result_08006d68",
                "param_1": "input_param",
                "param_2": "input_value",
                "iVar1": "result",
                "uVar2": "result_low",
                "uVar3": "result_high",
                "uVar4": "temp_low",
                "uVar5": "temp_high",
                "uVar6": "temp_2_low",
                "uVar7": "temp_2_high",
                "uVar8": "abs_value",
                "uVar9": "final_result",
                "uVar10": "temp_result"
            },
            "calling": [
                "FUN_08006070"
            ],
            "called": [
                "FUN_08000724",
                "FUN_0800708c",
                "FUN_0800016c",
                "FUN_08000168",
                "FUN_080004d0",
                "FUN_080009f0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800708c": {
            "entrypoint": "0x0800708c",
            "current_name": "FUNC_0800708c",
            "code": "\nvoid FUNC_0800708c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800708c": "FUNC_0800708c"
            },
            "calling": [
                "FUN_08006070",
                "FUN_08006d68",
                "FUN_08005c70",
                "FUN_08005854",
                "FUN_08006228"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08007092": {
            "entrypoint": "0x08007092",
            "current_name": "calculate_shifted_value_08007092",
            "code": "\nuint calculateShiftedValue_08007092(undefined4 inputFlag,uint inputValue)\n\n{\n  return (inputValue | 0x80000000) + 0x100000 >> 0x1f;\n}\n\n",
            "renaming": {
                "FUN_08007092": "calculate_shifted_value_08007092",
                "param_1": "inputFlag",
                "param_2": "inputValue"
            },
            "calling": [
                "FUN_08005900"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800709e": {
            "entrypoint": "0x0800709e",
            "current_name": "initialize_program_0800709e",
            "code": "\nvoid initializeProgram_0800709e(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800709e": "initialize_program_0800709e",
                "undefined4": "void"
            },
            "calling": [
                "FUN_08005bc8",
                "FUN_08005854",
                "FUN_08005900"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080070a4": {
            "entrypoint": "0x080070a4",
            "current_name": "get_infinity_080070a4",
            "code": "\ndouble getInfinity_080070a4(void)\n\n{\n  return 0x7ff8000000000000;\n}\n\n",
            "renaming": {
                "FUN_080070a4": "get_infinity_080070a4",
                "undefined8": "double"
            },
            "calling": [
                "FUN_08005854",
                "FUN_08006228"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080070b0": {
            "entrypoint": "0x080070b0",
            "current_name": "calculate_concated_result_080070b0",
            "code": "\nundefined8 calculate_concated_result_080070b0(uint input_param_1,uint input_param_2,undefined4 input_param_3)\n\n{\n  int shift_counter;\n  undefined4 ptr_1;\n  uint masked_param_2;\n  undefined4 ptr_2;\n  uint modified_masked_param_2;\n  uint shifted_value_difference;\n  uint shifted_value;\n  undefined8 result;\n  \n  shifted_value = (input_param_2 << 1) >> 0x15;\n  shifted_value_difference = shifted_value - 0x3ff;\n  masked_param_2 = input_param_2;\n  if ((int)shifted_value_difference < 0x14) {\n    if ((int)shifted_value_difference < 0) {\n      if ((input_param_2 & 0x7fffffff | input_param_1) == 0) {\n        return CONCAT44(input_param_2,input_param_1);\n      }\n      masked_param_2 = input_param_2 & 0xfffff | input_param_1;\n      shift_counter = ((int)input_param_2 >> 0x1f) * -8;\n      ptr_1 = *(undefined4 *)(&DAT_08007430 + shift_counter);\n      ptr_2 = *(undefined4 *)(&DAT_08007434 + shift_counter);\n      result = calculate_concated_result_080070b0_0800016c(input_param_1,(-masked_param_2 | masked_param_2) >> 0xc & 0x80000 | input_param_2 & 0xfffe0000,ptr_1,\n                           ptr_2,input_param_1,input_param_2,input_param_3);\n      result = optimized_function_08000168((int)result,(int)((ulonglong)result >> 0x20),ptr_1,ptr_2);\n      return CONCAT44((uint)((ulonglong)result >> 0x20) & 0x7fffffff | input_param_2 & 0x80000000,\n                      (int)result);\n    }\n    shifted_value = 0xfffff >> (shifted_value_difference & 0xff);\n    if ((input_param_2 & shifted_value | input_param_1) == 0) {\n      return CONCAT44(input_param_2,input_param_1);\n    }\n    shifted_value = shifted_value >> 1;\n    modified_masked_param_2 = input_param_2 & shifted_value | input_param_1;\n    if (modified_masked_param_2 != 0) {\n      if (shifted_value_difference == 0x13) {\n        modified_masked_param_2 = 0x80000000;\n      }\n      else {\n        modified_masked_param_2 = 0;\n      }\n      masked_param_2 = 0x40000 >> (shifted_value_difference & 0xff) | input_param_2 & ~shifted_value;\n    }\n  }\n  else {\n    if (0x33 < (int)shifted_value_difference) {\n      if (shifted_value_difference != 0x400) {\n        return CONCAT44(input_param_2,input_param_1);\n      }\n      result = calculate_concated_result_080070b0_0800016c();\n      return result;\n    }\n    shifted_value = shifted_value - 0x413;\n    shifted_value_difference = 0xffffffff >> (shifted_value & 0xff);\n    if ((input_param_1 & shifted_value_difference) == 0) {\n      return CONCAT44(input_param_2,input_param_1);\n    }\n    shifted_value_difference = shifted_value_difference >> 1;\n    modified_masked_param_2 = input_param_1;\n    if ((input_param_1 & shifted_value_difference) != 0) {\n      modified_masked_param_2 = 0x40000000 >> (shifted_value & 0xff) | input_param_1 & ~shifted_value_difference;\n    }\n  }\n  shift_counter = ((int)input_param_2 >> 0x1f) * -8;\n  ptr_1 = *(undefined4 *)(&DAT_08007430 + shift_counter);\n  ptr_2 = *(undefined4 *)(&DAT_08007434 + shift_counter);\n  result = calculate_concated_result_080070b0_0800016c(modified_masked_param_2,masked_param_2,ptr_1,ptr_2,input_param_1,input_param_2,input_param_3);\n  result = optimized_function_08000168((int)result,(int)((ulonglong)result >> 0x20),ptr_1,ptr_2);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080070b0": "calculate_concated_result_080070b0",
                "param_1": "input_param_1",
                "param_2": "input_param_2",
                "param_3": "input_param_3",
                "uVar7": "shifted_value",
                "uVar6": "shifted_value_difference",
                "uVar3": "masked_param_2",
                "uVar2": "ptr_1",
                "uVar4": "ptr_2",
                "uVar8": "result",
                "uVar5": "modified_masked_param_2",
                "iVar1": "shift_counter"
            },
            "calling": [
                "FUN_08005900"
            ],
            "called": [
                "FUN_0800016c",
                "FUN_08000168"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080071c0": {
            "entrypoint": "0x080071c0",
            "current_name": "calculate_result_080071c0",
            "code": "\nundefined8 calculateResult_080071c0(uint inputValue1,uint inputValue2,int offset,undefined4 param4)\n\n{\n  uint shiftedValue;\n  undefined4 result1;\n  int sum;\n  undefined4 result2;\n  uint highPart;\n  undefined8 concatenatedValue;\n  \n  concatenatedValue = CONCAT44(inputValue2,inputValue1);\n  shiftedValue = (inputValue2 << 1) >> 0x15;\n  if (shiftedValue == 0) {\n    if ((inputValue2 & 0x7fffffff | inputValue1) == 0) {\n      return concatenatedValue;\n    }\n    concatenatedValue = calculate_unsigned_product_080004d0(inputValue1,inputValue2,0,0x43500000);\n    if (-0xc351 < offset) {\n      shiftedValue = ((uint)((int)((ulonglong)concatenatedValue >> 0x20) << 1) >> 0x15) - 0x36;\n      goto LAB_08007210;\n    }\nLAB_080071ec:\n    result1 = 0xc2f8f359;\n    result2 = 0x1a56e1f;\n  }\n  else {\n    if (shiftedValue == 0x7ff) {\n      concatenatedValue = calculate_concated_result_0800016c(inputValue1,inputValue2,inputValue1,inputValue2,param4);\n      return concatenatedValue;\n    }\nLAB_08007210:\n    highPart = (uint)((ulonglong)concatenatedValue >> 0x20);\n    result1 = (undefined4)concatenatedValue;\n    sum = shiftedValue + offset;\n    if (sum < 0x7ff) {\n      if (0 < sum) {\n        return CONCAT44(highPart & 0x800fffff | sum * 0x100000,result1);\n      }\n      if (sum + 0x35 < 0 == SCARRY4(sum,0x35)) {\n        concatenatedValue = CONCAT44(highPart & 0x800fffff | (sum + 0x36) * 0x100000,result1);\n        result1 = 0;\n        result2 = 0x3c900000;\n        goto LAB_0800722e;\n      }\n      if (offset < 0xc351) {\n        concatenatedValue = FUNC_0800729c(0xc2f8f359,0x1a56e1f,result1,highPart);\n        goto LAB_080071ec;\n      }\n    }\n    concatenatedValue = FUNC_0800729c(0x8800759c,0x7e37e43c,result1,highPart);\n    result1 = 0x8800759c;\n    result2 = 0x7e37e43c;\n  }\nLAB_0800722e:\n  concatenatedValue = calculate_unsigned_product_080004d0((int)concatenatedValue,(int)((ulonglong)concatenatedValue >> 0x20),result1,result2);\n  return concatenatedValue;\n}\n\n",
            "renaming": {
                "FUN_080071c0": "calculate_result_080071c0",
                "param_1": "inputValue1",
                "param_2": "inputValue2",
                "param_3": "offset",
                "param_4": "param4",
                "uVar1": "shiftedValue",
                "uVar2": "result1",
                "iVar3": "sum",
                "uVar4": "result2",
                "uVar5": "highPart",
                "uVar6": "concatenatedValue"
            },
            "calling": [
                "FUN_08006228"
            ],
            "called": [
                "FUN_0800016c",
                "FUN_0800729c",
                "FUN_080004d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800729c": {
            "entrypoint": "0x0800729c",
            "current_name": "FUNC_0800729c",
            "code": "\nvoid FUNC_0800729c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800729c": "FUNC_0800729c"
            },
            "calling": [
                "FUN_080071c0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080072ac": {
            "entrypoint": "0x080072ac",
            "current_name": "get_data_080072ac",
            "code": "\nundefined4 get_data_080072ac(void)\n\n{\n  return DAT_200001c0;\n}\n\n",
            "renaming": {
                "FUN_080072ac": "get_data_080072ac"
            },
            "calling": [
                "FUN_08005bc8",
                "FUN_08005854",
                "FUN_08005900"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080072b8": {
            "entrypoint": "0x080072b8",
            "current_name": "update_pointer_080072b8",
            "code": "\nvoid updatePointer_080072b8(int valueToAdd)\n\n{\n  if (DAT_200002b4 == (undefined *)0x0) {\n    DAT_200002b4 = &DAT_200016a0;\n  }\n  DAT_200002b4 = DAT_200002b4 + valueToAdd;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080072b8": "update_pointer_080072b8",
                "param_1": "valueToAdd"
            },
            "calling": [
                "FUN_0800581c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080072d4": {
            "entrypoint": "0x080072d4",
            "current_name": "FUNC_080072d4",
            "code": "\nvoid FUNC_080072d4(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080072d4": "FUNC_080072d4"
            },
            "calling": [
                "FUN_08004fb4",
                "FUN_08000110",
                "FUN_08000134"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080072e0": {
            "entrypoint": "0x080072e0",
            "current_name": "FUNC_080072e0",
            "code": "\nvoid FUNC_080072e0(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080072e0": "FUNC_080072e0"
            },
            "calling": [],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        }
    },
    "used_tokens": 156581,
    "layers": [
        [
            "FUN_08000110",
            "FUN_08000134",
            "FUN_08000150",
            "FUN_08000168",
            "FUN_0800016c",
            "FUN_08000404",
            "FUN_08000428",
            "FUN_080006ac",
            "FUN_08000892",
            "FUN_08000904",
            "FUN_08000a04",
            "FUN_08000a30",
            "FUN_08000ad8",
            "FUN_08000adc",
            "FUN_08000c3c",
            "FUN_08000c44",
            "FUN_08000cec",
            "FUN_08000e54",
            "FUN_08000f9c",
            "FUN_08001078",
            "FUN_080010c4",
            "FUN_0800114c",
            "FUN_0800115c",
            "FUN_08001170",
            "FUN_08001194",
            "FUN_080011fc",
            "FUN_08001214",
            "FUN_08001240",
            "FUN_08001264",
            "FUN_08001424",
            "FUN_0800142e",
            "FUN_08001436",
            "FUN_08002008",
            "FUN_08002214",
            "FUN_08002220",
            "FUN_08002250",
            "FUN_08002280",
            "FUN_080022d0",
            "FUN_08002324",
            "FUN_08002368",
            "FUN_08002404",
            "FUN_08002520",
            "FUN_08002564",
            "FUN_080025a4",
            "FUN_08002ed4",
            "FUN_08003068",
            "FUN_08003314",
            "FUN_08003320",
            "FUN_08003eb0",
            "FUN_08003ec8",
            "FUN_08003fc4",
            "FUN_08003fd0",
            "FUN_08003fdc",
            "FUN_08003fe8",
            "FUN_08004c64",
            "FUN_08004d8c",
            "FUN_08004f10",
            "thunk_FUN_0800115c",
            "FUN_08004fb4",
            "FUN_080052e4",
            "FUN_08005614",
            "FUN_08005630",
            "FUN_08005646",
            "FUN_0800567c",
            "FUN_08005840",
            "FUN_08007092",
            "FUN_0800709e",
            "FUN_080070a4",
            "FUN_080072ac",
            "FUN_080072b8"
        ],
        [
            "FUN_080004d0",
            "FUN_08000724",
            "FUN_08000990",
            "FUN_08001004",
            "FUN_08001104",
            "FUN_08001460",
            "FUN_080014e2",
            "FUN_080016f4",
            "FUN_08001b58",
            "FUN_080023d0",
            "FUN_0800245c",
            "FUN_08002538",
            "FUN_080025e8",
            "FUN_08002ec0",
            "FUN_08003f3c",
            "FUN_080041c4",
            "FUN_0800426c",
            "FUN_08004a30",
            "FUN_08004c18",
            "FUN_08004c30",
            "FUN_08004c70",
            "FUN_08004ccc",
            "FUN_08004d48",
            "FUN_08004e14",
            "FUN_08004e7c",
            "FUN_080053d4",
            "FUN_0800581c",
            "FUN_080070b0"
        ],
        [
            "FUN_08000980",
            "FUN_080009a0",
            "FUN_080009b4",
            "FUN_080009c8",
            "FUN_08000ffc",
            "FUN_08001014",
            "FUN_08001028",
            "FUN_08001128",
            "FUN_08001530",
            "FUN_080015e8",
            "FUN_08001754",
            "FUN_0800209c",
            "FUN_08002724",
            "FUN_0800290c",
            "FUN_08003ff4",
            "FUN_08004c8c",
            "FUN_08005714",
            "FUN_08006c0c",
            "FUN_080071c0"
        ],
        [
            "FUN_080009f0",
            "FUN_08001050",
            "FUN_08001064",
            "FUN_08001828",
            "FUN_08001938",
            "FUN_0800299a",
            "FUN_08004300",
            "FUN_080057d0",
            "FUN_08005bc8"
        ],
        [
            "FUN_08002ee8",
            "FUN_08004348",
            "FUN_08004384",
            "FUN_080043bc",
            "FUN_080043f0",
            "FUN_08004410",
            "FUN_08004434",
            "FUN_08004458",
            "FUN_0800483c",
            "FUN_08005044",
            "FUN_08005c70",
            "FUN_08006228",
            "FUN_08006d68"
        ],
        [
            "FUN_08004a84",
            "FUN_080050fc",
            "FUN_08005854",
            "thunk_FUN_08006070",
            "FUN_08005900",
            "FUN_08006070"
        ],
        [
            "FUN_08003330",
            "FUN_08004ffc"
        ],
        [
            "FUN_08004cac"
        ],
        [
            "FUN_08004490"
        ],
        [
            "FUN_0800403c",
            "FUN_0800407c",
            "FUN_080040b8",
            "FUN_08004514"
        ],
        [
            "FUN_08002ad0",
            "FUN_08003034",
            "FUN_080040e8",
            "FUN_0800458c"
        ],
        [
            "FUN_08002b48",
            "FUN_08002bf0",
            "FUN_08002cb0",
            "FUN_08002d88",
            "FUN_08003298",
            "FUN_08004028"
        ],
        [
            "FUN_08002ea0",
            "FUN_08002f28"
        ],
        [
            "FUN_0800411c",
            "FUN_08004194"
        ],
        [
            "FUN_080041ae"
        ]
    ],
    "locked_functions": []
}