{
    "functions": {
        "FUN_08000188": {
            "entrypoint": "0x08000188",
            "current_name": "update_completed_flag_08000188",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08000194) */\n\nundefined4 updateCompletedFlag_08000188(undefined4 inputParam)\n\n{\n  if ((char)completionStatus == '\\0') {\n    completionStatus._0_1_ = '\\x01';\n  }\n  return inputParam;\n}\n\n",
            "renaming": {
                "FUN_08000188": "update_completed_flag_08000188",
                "param_1": "inputParam",
                "completed_8911": "completionStatus"
            },
            "calling": [
                "__libc_fini_array"
            ],
            "called": [
                "_init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080001ac": {
            "entrypoint": "0x080001ac",
            "current_name": "concatenate_64_bit_values_080001ac",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x080001b2) */\n\nundefined8 concatenate_64_bit_values_080001ac(undefined4 first_value,undefined4 second_value)\n\n{\n  return CONCAT44(second_value,first_value);\n}\n\n",
            "renaming": {
                "FUN_080001ac": "concatenate_64_bit_values_080001ac",
                "param_1": "first_value",
                "param_2": "second_value"
            },
            "calling": [
                "__libc_init_array",
                "__libc_fini_array"
            ],
            "called": [
                "_init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080001c8": {
            "entrypoint": "0x080001c8",
            "current_name": "FUNC_080001c8",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid FUNC_080001c8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080001c8": "FUNC_080001c8"
            },
            "calling": [
                "coolant_run"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080001d4": {
            "entrypoint": "0x080001d4",
            "current_name": "FUNC_080001d4",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid FUNC_080001d4(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080001d4": "FUNC_080001d4"
            },
            "calling": [
                "coolant_stop"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080001e0": {
            "entrypoint": "0x080001e0",
            "current_name": "FUNC_080001e0",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid FUNC_080001e0(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080001e0": "FUNC_080001e0"
            },
            "calling": [
                "coolant_run"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080001ec": {
            "entrypoint": "0x080001ec",
            "current_name": "FUNC_080001ec",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid FUNC_080001ec(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080001ec": "FUNC_080001ec"
            },
            "calling": [
                "coolant_stop"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080001f8": {
            "entrypoint": "0x080001f8",
            "current_name": "initialize_coolant_system_080001f8",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid initialize_coolant_system_080001f8(void)\n\n{\n  coolant_mode = '\\0';\n  stop_coolant_flow();\n  return;\n}\n\n",
            "renaming": {
                "FUN_080001f8": "initialize_coolant_system_080001f8",
                "current_coolant_mode": "coolant_mode",
                "coolant_stop": "stop_coolant_flow"
            },
            "calling": [
                "grbl_main"
            ],
            "called": [
                "coolant_stop"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000210": {
            "entrypoint": "0x08000210",
            "current_name": "turn_off_coolant_system_08000210",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid turn_off_coolant_system_08000210(void)\n\n{\n  turn_off_coolant_mist();\n  turn_off_coolant_flood();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000210": "turn_off_coolant_system_08000210",
                "coolant_mist_off": "turn_off_coolant_mist",
                "coolant_flood_off": "turn_off_coolant_flood"
            },
            "calling": [
                "mc_reset",
                "coolant_run",
                "coolant_init"
            ],
            "called": [
                "coolant_mist_off",
                "coolant_flood_off"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000220": {
            "entrypoint": "0x08000220",
            "current_name": "set_coolant_mode_08000220",
            "code": "\nvoid set_coolant_mode_08000220(uint8_t new_mode)\n\n{\n  uint8_t local_mode;\n  \n  if (new_mode != current_mode) {\n    plan_synchronize();\n    if (new_mode == '\\x01') {\n      coolant_flood_on();\n      current_mode = new_mode;\n    }\n    else if (new_mode == '\\x02') {\n      coolant_mist_on();\n      current_mode = new_mode;\n    }\n    else {\n      coolant_stop();\n      current_mode = new_mode;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000220": "set_coolant_mode_08000220",
                "mode": "new_mode",
                "mode_local": "local_mode",
                "current_coolant_mode": "current_mode"
            },
            "calling": [
                "gc_execute_line"
            ],
            "called": [
                "coolant_mist_on",
                "plan_synchronize",
                "coolant_flood_on",
                "coolant_stop"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000268": {
            "entrypoint": "0x08000268",
            "current_name": "_calculate_adjusted_tick_08000268",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nuint64_t _calculateAdjustedTick_08000268(void)\n\n{\n  uint32_t currentTick;\n  \n  currentTick = HAL_GetTick();\n  return (uint64_t)((currentTick + 1) * 1000 - _DAT_e000e018 / 0xa8);\n}\n\n",
            "renaming": {
                "FUN_08000268": "_calculate_adjusted_tick_08000268",
                "uVar1": "currentTick"
            },
            "calling": [
                "_delay_us"
            ],
            "called": [
                "HAL_GetTick"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080002a0": {
            "entrypoint": "0x080002a0",
            "current_name": "delay_function_080002a0",
            "code": "\nvoid delayFunction_080002a0(uint milliseconds)\n\n{\n  uint localMilliseconds;\n  \n  HAL_Delay(milliseconds);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080002a0": "delay_function_080002a0",
                "_ms": "milliseconds",
                "_ms_local": "localMilliseconds"
            },
            "calling": [
                "mc_dwell"
            ],
            "called": [
                "HAL_Delay"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080002b6": {
            "entrypoint": "0x080002b6",
            "current_name": "wait_microseconds_080002b6",
            "code": "\nvoid waitMicroseconds_080002b6(uint microseconds)\n\n{\n  uint upperCurrentUsecs;\n  bool timeoutReached;\n  uint64_t startUsecs;\n  uint64_t currentUsecs;\n  uint localMicroseconds;\n  uint64_t timeout;\n  \n  startUsecs = get_currentmicrosecondsecs();\n  do {\n    currentUsecs = get_currentmicrosecondsecs();\n    upperCurrentUsecs = (uint)(currentUsecs >> 0x20);\n    timeout._0_4_ = (uint)(startUsecs + microseconds);\n    timeout._4_4_ = (uint)(startUsecs + microseconds >> 0x20);\n    timeoutReached = timeout._4_4_ <= upperCurrentUsecs;\n    if (upperCurrentUsecs == timeout._4_4_) {\n      timeoutReached = (uint)timeout <= (uint)currentUsecs;\n    }\n  } while (!timeoutReached);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080002b6": "wait_microseconds_080002b6",
                "_us": "microseconds",
                "uVar1": "upperCurrentUsecs",
                "bVar2": "timeoutReached",
                "uVar3": "startUsecs",
                "uVar4": "currentUsecs",
                "_us_local": "localMicroseconds"
            },
            "calling": [],
            "called": [
                "get_current_usecs"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080002f0": {
            "entrypoint": "0x080002f0",
            "current_name": "initialize_eeprom_080002f0",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid initializeEEPROM_080002f0(void)\n\n{\n  memset(eepromData,0xff,4);\n  eepromReady = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080002f0": "initialize_eeprom_080002f0",
                "eeprom_data": "eepromData",
                "eeprom_ready": "eepromReady"
            },
            "calling": [
                "eeprom_put_char",
                "memcpy_to_eeprom_with_checksum",
                "eeprom_get_char",
                "memcpy_from_eeprom_with_checksum"
            ],
            "called": [
                "memset"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000310": {
            "entrypoint": "0x08000310",
            "current_name": "get_eeprom_data_08000310",
            "code": "\nchar getEEPROMData_08000310(uint address)\n\n{\n  uint localAddress;\n  \n  if (eeprom_ready == 0) {\n    eeprom_init();\n  }\n  return eeprom_data[address & 0x3ff];\n}\n\n",
            "renaming": {
                "FUN_08000310": "get_eeprom_data_08000310",
                "addr": "address",
                "addr_local": "localAddress"
            },
            "calling": [
                "read_global_settings",
                "memcpy_from_eeprom_with_checksum"
            ],
            "called": [
                "eeprom_init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000340": {
            "entrypoint": "0x08000340",
            "current_name": "update_eeprom_data_08000340",
            "code": "\nvoid updateEepromData_08000340(uint address,uchar value)\n\n{\n  uchar localValue;\n  uint localAddress;\n  \n  if (eeprom_ready == 0) {\n    eeprom_init();\n  }\n  eeprom_data[address & 0x3ff] = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000340": "update_eeprom_data_08000340",
                "addr": "address",
                "new_value": "value",
                "new_value_local": "localValue",
                "addr_local": "localAddress"
            },
            "calling": [
                "write_global_settings",
                "memcpy_to_eeprom_with_checksum"
            ],
            "called": [
                "eeprom_init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000374": {
            "entrypoint": "0x08000374",
            "current_name": "copy_and_checksum_08000374",
            "code": "\nvoid copyAndChecksum_08000374(uint dst,char *src,uint numBytes)\n\n{\n  uint remainingBytes;\n  char *currentByte;\n  uint currentDestination;\n  uchar calcChecksum;\n  \n  calcChecksum = '\\0';\n  remainingBytes = numBytes;\n  currentByte = src;\n  currentDestination = dst;\n  if (eeprom_ready == 0) {\n    eeprom_init();\n    currentByte = src;\n    currentDestination = dst;\n  }\n  for (; remainingBytes != 0; remainingBytes = remainingBytes - 1) {\n    calcChecksum = (calcChecksum != '\\0') + *currentByte;\n    eeprom_put_char(currentDestination,*currentByte);\n    currentByte = currentByte + 1;\n    currentDestination = currentDestination + 1;\n  }\n  eeprom_put_char(currentDestination,calcChecksum);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000374": "copy_and_checksum_08000374",
                "destination": "dst",
                "source": "src",
                "size": "numBytes",
                "size_local": "remainingBytes",
                "source_local": "currentByte",
                "destination_local": "currentDestination",
                "checksum": "calcChecksum"
            },
            "calling": [
                "write_global_settings",
                "settings_write_coord_data",
                "settings_store_startup_line"
            ],
            "called": [
                "eeprom_init",
                "eeprom_put_char"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080003ec": {
            "entrypoint": "0x080003ec",
            "current_name": "verify_eeprom_data_080003ec",
            "code": "\nint verify_eeprom_data_080003ec(char *output_buffer,uint input_address,uint data_size)\n\n{\n  char cVar1;\n  uint current_size;\n  uint current_address;\n  char *current_buffer;\n  uchar current_data;\n  uchar data_checksum;\n  \n  data_checksum = '\\0';\n  current_size = data_size;\n  current_address = input_address;\n  current_buffer = output_buffer;\n  if (eeprom_initialized == 0) {\n    eeprom_init();\n    current_address = input_address;\n    current_buffer = output_buffer;\n  }\n  for (; current_size != 0; current_size = current_size - 1) {\n    cVar1 = eeprom_get_char(current_address);\n    data_checksum = cVar1 + (data_checksum != '\\0');\n    *current_buffer = cVar1;\n    current_address = current_address + 1;\n    current_buffer = current_buffer + 1;\n  }\n  cVar1 = eeprom_get_char(current_address);\n  return (uint)((uint)data_checksum == (int)cVar1);\n}\n\n",
            "renaming": {
                "FUN_080003ec": "verify_eeprom_data_080003ec",
                "destination": "output_buffer",
                "source": "input_address",
                "size": "data_size",
                "size_local": "current_size",
                "source_local": "current_address",
                "destination_local": "current_buffer",
                "data": "current_data",
                "checksum": "data_checksum",
                "eeprom_ready": "eeprom_initialized"
            },
            "calling": [
                "settings_read_startup_line",
                "read_global_settings",
                "settings_read_coord_data"
            ],
            "called": [
                "eeprom_init",
                "eeprom_get_char"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000478": {
            "entrypoint": "0x08000478",
            "current_name": "update_plane_axes_08000478",
            "code": "\nvoid updatePlaneAxes_08000478(uint8_t newAxis0,uint8_t newAxis1,uint8_t newAxis2)\n\n{\n  uint8_t localAxis2;\n  uint8_t localAxis1;\n  uint8_t localAxis0;\n  \n  gc.plane_newAxis0 = newAxis0;\n  gc.plane_newAxis1 = newAxis1;\n  gc.plane_newAxis2 = newAxis2;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000478": "update_plane_axes_08000478",
                "axis_0": "newAxis0",
                "axis_1": "newAxis1",
                "axis_2": "newAxis2",
                "axis_2_local": "localAxis2",
                "axis_1_local": "localAxis1",
                "axis_0_local": "localAxis0"
            },
            "calling": [
                "gc_execute_line",
                "gc_init"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080004ac": {
            "entrypoint": "0x080004ac",
            "current_name": "initialize_coordinates_080004ac",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid initializeCoordinates_080004ac(void)\n\n{\n  uint8_t readSuccess;\n  \n  memset(&coordinateData,0,0x38);\n  coordinateData.feed_rate = settings.default_feed_rate;\n  select_plane('\\0','\\x01','\\x02');\n  coordinateData.absolute_mode = '\\x01';\n  readSuccess = settings_read_coord_data(coordinateData.coord_select,coordinateData.coord_system);\n  if (readSuccess == '\\0') {\n    report_status_message('\\n');\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080004ac": "initialize_coordinates_080004ac",
                "gc": "coordinateData",
                "uVar1": "readSuccess"
            },
            "calling": [
                "grbl_main"
            ],
            "called": [
                "select_plane",
                "report_status_message",
                "settings_read_coord_data",
                "memset"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080004fc": {
            "entrypoint": "0x080004fc",
            "current_name": "convert_coordinates_080004fc",
            "code": "\nvoid convertCoordinates_080004fc(int32_t inputX,int32_t inputY,int32_t inputZ)\n\n{\n  undefined4 uVar1;\n  int32_t localZ;\n  int32_t localY;\n  int32_t localX;\n  \n  uVar1 = __floatsisf(inputX);\n  gc.position[0] = (float)__aeabi_fdiv(uVar1,settings.steps_per_mm[0]);\n  uVar1 = __floatsisf(inputY);\n  gc.position[1] = (float)__aeabi_fdiv(uVar1,settings.steps_per_mm[1]);\n  uVar1 = __floatsisf(inputZ);\n  gc.position[2] = (float)__aeabi_fdiv(uVar1,settings.steps_per_mm[2]);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080004fc": "convert_coordinates_080004fc",
                "x": "inputX",
                "y": "inputY",
                "z": "inputZ",
                "z_local": "localZ",
                "y_local": "localY",
                "x_local": "localX"
            },
            "calling": [
                "sys_sync_current_position"
            ],
            "called": [
                "__floatsisf",
                "__aeabi_fdiv"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800056c": {
            "entrypoint": "0x0800056c",
            "current_name": "convert_to_inches_0800056c",
            "code": "\nfloat convertToInches_0800056c(float inputValue)\n\n{\n  undefined4 tempVar;\n  undefined8 convertedValue;\n  float outputValue;\n  \n  if (gc.inches_mode != '\\0') {\n    convertedValue = __aeabi_f2d(tempVar);\n    convertedValue = __muldf3((int)convertedValue,(int)((ulonglong)convertedValue >> 0x20),0x66666666,0x40396666);\n    inputValue = (float)__truncdfsf2((int)convertedValue,(int)((ulonglong)convertedValue >> 0x20));\n  }\n  return inputValue;\n}\n\n",
            "renaming": {
                "FUN_0800056c": "convert_to_inches_0800056c",
                "value": "inputValue",
                "in_r0": "tempVar",
                "uVar1": "convertedValue",
                "value_local": "outputValue"
            },
            "calling": [
                "gc_execute_line"
            ],
            "called": [
                "__aeabi_f2d",
                "__muldf3",
                "__truncdfsf2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080005b4": {
            "entrypoint": "0x080005b4",
            "current_name": "process_g_code_080005b4",
            "code": "\nuloopIndexnt8_t processGCode_080005b4(charadius *gCodeLine)\n\n{\n  uloopIndexnt8_t returnValue;\n  loopIndexnt result;\n  flocalVariableoat fValue;\n  undefloopIndexned4 convValue;\n  undefloopIndexned4 convValue2;\n  undefloopIndexned4 extraoutValue1;\n  undefloopIndexned4 extraoutValue2;\n  undefloopIndexned4 extraoutValue3;\n  undefloopIndexned4 extraoutValue4;\n  undefloopIndexned4 extraoutValue5;\n  undefloopIndexned4 extraoutValue6;\n  uloopIndexnt extraoutValue7;\n  undefloopIndexned4 extraoutValue8;\n  undefloopIndexned4 extraoutValue9;\n  uloopIndexnt uVaradius6;\n  flocalVariableoat fValue;\n  flocalVariableoat inputValue_00;\n  undefloopIndexned8 extraoutValue1;\n  undefloopIndexned8 extraoutValue2;\n  undefloopIndexned8 extraoutValue3;\n  undefloopIndexned8 extraoutValue4;\n  undefloopIndexned8 extraoutValue5;\n  undefloopIndexned8 extraoutValue6;\n  undefloopIndexned8 extraoutValue7;\n  undefloopIndexned8 extraoutValue8;\n  undefloopIndexned8 extraoutValue9;\n  undefloopIndexned8 extraoutValue10;\n  undefloopIndexned8 extraoutValue11;\n  undefloopIndexned8 extraoutValue12;\n  undefloopIndexned8 extraoutValue13;\n  undefloopIndexned8 extraoutValue14;\n  undefloopIndexned8 extraoutValue15;\n  undefloopIndexned8 extraoutValue16;\n  undefloopIndexned8 extraoutValue17;\n  undefloopIndexned8 extraoutValue18;\n  undefloopIndexned8 extraoutValue19;\n  flocalVariableoat yValue_00;\n  undefloopIndexned8 extraoutValue20;\n  undefloopIndexned8 extraoutValue21;\n  flocalVariableoat exValuetradiusaout_s2;\n  flocalVariableoat exValuetradiusaout_s2_00;\n  flocalVariableoat exValuetradiusaout_s2_01;\n  flocalVariableoat exValuetradiusaout_s2_02;\n  flocalVariableoat exValuetradiusaout_s2_03;\n  flocalVariableoat exValuetradiusaout_s2_04;\n  flocalVariableoat exValuetradiusaout_s2_05;\n  flocalVariableoat exValuetradiusaout_s2_06;\n  flocalVariableoat exValuetradiusaout_s2_07;\n  flocalVariableoat exValuetradiusaout_s2_08;\n  flocalVariableoat exValuetradiusaout_s2_09;\n  flocalVariableoat exValuetradiusaout_s2_10;\n  flocalVariableoat exValuetradiusaout_s2_11;\n  flocalVariableoat exValuetradiusaout_s2_12;\n  flocalVariableoat exValuetradiusaout_s2_13;\n  flocalVariableoat exValuetradiusaout_s2_14;\n  flocalVariableoat exValuetradiusaout_s2_15;\n  flocalVariableoat exValuetradiusaout_s2_16;\n  flocalVariableoat exValuetradiusaout_s2_17;\n  flocalVariableoat exValuetradiusaout_s3;\n  flocalVariableoat exValuetradiusaout_s3_00;\n  flocalVariableoat exValuetradiusaout_s3_01;\n  flocalVariableoat exValuetradiusaout_s3_02;\n  flocalVariableoat exValuetradiusaout_s3_03;\n  flocalVariableoat exValuetradiusaout_s3_04;\n  flocalVariableoat exValuetradiusaout_s3_05;\n  flocalVariableoat exValuetradiusaout_s3_06;\n  flocalVariableoat exValuetradiusaout_s3_07;\n  flocalVariableoat exValuetradiusaout_s3_08;\n  flocalVariableoat exValuetradiusaout_s3_09;\n  flocalVariableoat exValuetradiusaout_s3_10;\n  flocalVariableoat exValuetradiusaout_s3_11;\n  flocalVariableoat exValuetradiusaout_s3_12;\n  flocalVariableoat exValuetradiusaout_s3_13;\n  flocalVariableoat exValuetradiusaout_s3_14;\n  flocalVariableoat exValuetradiusaout_s3_15;\n  flocalVariableoat exValuetradiusaout_s3_16;\n  flocalVariableoat exValuetradiusaout_s3_17;\n  undefloopIndexned8 uVaradius8;\n  undefloopIndexned4 loopIndexn_stack_ffffff48;\n  undefloopIndexned4 loopIndexn_stack_ffffff4c;\n  undefloopIndexned4 loopIndexn_stack_ffffff50;\n  undefloopIndexned4 loopIndexn_stack_ffffff54;\n  charadius *localGCodeLine;\n  flocalVariableoat coordinateData2 [3];\n  flocalVariableoat coordinateData1 [3];\n  flocalVariableoat coordinateData [3];\n  flocalVariableoat offset [3];\n  flocalVariableoat taradiusget [3];\n  flocalVariableoat inputValue;\n  charadius commandLetter;\n  uloopIndexnt8_t charCounter;\n  flocalVariableoat yValue;\n  flocalVariableoat xValue;\n  uloopIndexnt8_t isClockwise;\n  flocalVariableoat h_xValue2_dloopIndexv_d;\n  uloopIndexnt8_t loopIndex3;\n  uloopIndexnt8_t loopIndex2;\n  uloopIndexnt8_t loopIndex1;\n  uloopIndexnt8_t loopIndex;\n  uloopIndexnt8_t localVariable;\n  flocalVariableoat radius;\n  flocalVariableoat pValue;\n  uloopIndexnt8_t groupNumber;\n  uloopIndexnt8_t nonModalAction;\n  uloopIndexnt8_t absoluteOverride;\n  flocalVariableoat inverseFeedRate;\n  uloopIndexnt8_t axisWords;\n  uloopIndexnt16_t modalGroupWords;\n  loopIndexnt intValue;\n  \n  loopIndexf (systemState == '\\xValue06') {\n    returnValue = '\\f';\n  }\n  elocalVariablese {\n    charCounter = '\\0';\n    modalGroupWords = 0;\n    axisWords = '\\0';\n    inverseFeedRate = -1.0;\n    absoluteOverride = '\\0';\n    nonModalAction = '\\0';\n    memset(taradiusget,0,0xValuec);\n    memset(offset,0,0xValuec);\n    statusCode = '\\0';\n    groupNumber = '\\0';\n    whloopIndexlocalVariablee (result = nexValuet_statement(&commandLetter,&inputValue,gCodeLine,&charCounter), result != 0) {\n      convValue = __aeabloopIndex_f2d(inputValue);\n      tradiusunc((doublocalVariablee)CONCAT44(loopIndexn_stack_ffffff4c,loopIndexn_stack_ffffff48));\n      intValue = __aeabloopIndex_d2loopIndexz(convValue,extraoutValue1);\n      loopIndexf (commandLetter == 'G') {\n        swloopIndextch(intValue) {\n        case 0:\n        case 1:\n        case 2:\n        case 3:\n        case 0xValue50:\n          groupNumber = '\\xValue02';\n          bradiuseak;\n        case 4:\n        case 10:\n        case 0xValue1c:\n        case 0xValue1e:\n        case 0xValue35:\n        case 0xValue5c:\n          groupNumber = '\\xValue01';\n          bradiuseak;\n        case 0xValue11:\n        case 0xValue12:\n        case 0xValue13:\n          groupNumber = '\\xValue03';\n          bradiuseak;\n        case 0xValue14:\n        case 0xValue15:\n          groupNumber = '\\a';\n          bradiuseak;\n        case 0xValue36:\n        case 0xValue37:\n        case 0xValue38:\n        case 0xValue39:\n        case 0xValue3a:\n        case 0xValue3b:\n          groupNumber = '\\t';\n          bradiuseak;\n        case 0xValue5a:\n        case 0xValue5b:\n          groupNumber = '\\xValue04';\n          bradiuseak;\n        case 0xValue5d:\n        case 0xValue5e:\n          groupNumber = '\\xValue06';\n        }\n        swloopIndextch(intValue) {\n        case 0:\n          motionMode = '\\0';\n          bradiuseak;\n        case 1:\n          motionMode = '\\xValue01';\n          bradiuseak;\n        case 2:\n          motionMode = '\\xValue02';\n          bradiuseak;\n        case 3:\n          motionMode = '\\xValue03';\n          bradiuseak;\n        case 4:\n          nonModalAction = '\\xValue01';\n          bradiuseak;\n        defaulocalVariablet:\n          statusCode = '\\xValue03';\n          bradiuseak;\n        case 10:\n          nonModalAction = '\\xValue02';\n          bradiuseak;\n        case 0xValue11:\n          selocalVariableect_pValuelocalVariableane('\\0','\\xValue01','\\xValue02');\n          bradiuseak;\n        case 0xValue12:\n          selocalVariableect_pValuelocalVariableane('\\xValue02','\\0','\\xValue01');\n          bradiuseak;\n        case 0xValue13:\n          selocalVariableect_pValuelocalVariableane('\\xValue01','\\xValue02','\\0');\n          bradiuseak;\n        case 0xValue14:\n          inchesMode = '\\xValue01';\n          bradiuseak;\n        case 0xValue15:\n          inchesMode = '\\0';\n          bradiuseak;\n        case 0xValue1c:\n        case 0xValue1e:\n          convValue = __aeabloopIndex_fmulocalVariable(inputValue,0xValue41200000);\n          convValue = __aeabloopIndex_f2d(convValue);\n          tradiusunc((doublocalVariablee)CONCAT44(loopIndexn_stack_ffffff4c,loopIndexn_stack_ffffff48));\n          intValue = __aeabloopIndex_d2loopIndexz(convValue,extraoutValue2);\n          swloopIndextch(intValue) {\n          case 0xValue118:\n            nonModalAction = '\\xValue03';\n            bradiuseak;\n          case 0xValue119:\n            nonModalAction = '\\xValue04';\n            bradiuseak;\n          defaulocalVariablet:\n            statusCode = '\\xValue03';\n            bradiuseak;\n          case 300:\n            nonModalAction = '\\xValue05';\n            bradiuseak;\n          case 0xValue12d:\n            nonModalAction = '\\xValue06';\n          }\n          bradiuseak;\n        case 0xValue35:\n          absoluteOverride = '\\xValue01';\n          bradiuseak;\n        case 0xValue36:\n        case 0xValue37:\n        case 0xValue38:\n        case 0xValue39:\n        case 0xValue3a:\n        case 0xValue3b:\n          coordSelect = (charadius)intValue + 0xValueca;\n          bradiuseak;\n        case 0xValue50:\n          motionMode = '\\xValue04';\n          bradiuseak;\n        case 0xValue5a:\n          absoluteMode = '\\xValue01';\n          bradiuseak;\n        case 0xValue5b:\n          absoluteMode = '\\0';\n          bradiuseak;\n        case 0xValue5c:\n          convValue = __aeabloopIndex_fmulocalVariable(inputValue,0xValue41200000);\n          convValue = __aeabloopIndex_f2d(convValue);\n          tradiusunc((doublocalVariablee)CONCAT44(loopIndexn_stack_ffffff4c,loopIndexn_stack_ffffff48));\n          intValue = __aeabloopIndex_d2loopIndexz(convValue,extraoutValue3);\n          loopIndexf (intValue == 0xValue398) {\n            nonModalAction = '\\a';\n          }\n          elocalVariablese loopIndexf (intValue == 0xValue399) {\n            nonModalAction = '\\b';\n          }\n          elocalVariablese {\n            statusCode = '\\xValue03';\n          }\n          bradiuseak;\n        case 0xValue5d:\n          inverseFeedRateMode = '\\xValue01';\n          bradiuseak;\n        case 0xValue5e:\n          inverseFeedRateMode = '\\0';\n        }\n      }\n      elocalVariablese loopIndexf (commandLetter == 'M') {\n        loopIndexf (intValue == 0xValue1e) {\nLAB_08000b96:\n          groupNumber = '\\xValue05';\n        }\n        elocalVariablese loopIndexf (intValue < 0xValue1f) {\n          loopIndexf (intValue < 3) {\n            loopIndexf (-1 < intValue) goto LAB_08000b96;\n          }\n          elocalVariablese loopIndexf (intValue - 3U < 3) {\n            groupNumber = '\\b';\n          }\n        }\n        swloopIndextch(intValue) {\n        case 0:\n          programFlow = '\\xValue01';\n          bradiuseak;\n        case 1:\n          bradiuseak;\n        case 2:\n        case 0xValue1e:\n          programFlow = '\\xValue02';\n          bradiuseak;\n        case 3:\n          spindleDirection = '\\xValue01';\n          bradiuseak;\n        case 4:\n          spindleDirection = -1;\n          bradiuseak;\n        case 5:\n          spindleDirection = '\\0';\n          bradiuseak;\n        defaulocalVariablet:\n          statusCode = '\\xValue03';\n          bradiuseak;\n        case 7:\n          coolantMode = '\\xValue02';\n          bradiuseak;\n        case 8:\n          coolantMode = '\\xValue01';\n          bradiuseak;\n        case 9:\n          coolantMode = '\\0';\n        }\n      }\n      loopIndexf (groupNumber != '\\0') {\n        loopIndexf (((loopIndexnt)(uloopIndexnt)modalGroupWords >> groupNumber & 1U) == 0) {\n          modalGroupWords = modalGroupWords | (ushoradiust)(1 << groupNumber);\n        }\n        elocalVariablese {\n          statusCode = '\\xValue05';\n        }\n        groupNumber = '\\0';\n      }\n    }\n    returnValue = statusCode;\n    loopIndexf (statusCode == '\\0') {\n      pValue = 0.0;\n      radius = 0.0;\n      localVariable = '\\0';\n      charCounter = '\\0';\nswloopIndextchD_08000d18_caseD_47:\n      result = nexValuet_statement(&commandLetter,&inputValue,gCodeLine,&charCounter);\n      loopIndexf (result != 0) {\n        fValue = (flocalVariableoat)extraoutValue1;\n        swloopIndextch(commandLetter) {\n        case 'F':\n          result = __aeabloopIndex_fcmpValuelocalVariablee(inputValue,0);\n          loopIndexf (result != 0) {\n            statusCode = '\\xValue06';\n          }\n          loopIndexf (inverseFeedRateMode == '\\0') {\n            fValue = inputValue;\n            to_mloopIndexlocalVariablelocalVariableloopIndexmeteradiuss(inputValue_00);\n            feedRate = fValue;\n          }\n          elocalVariablese {\n            fValue = inputValue;\n            to_mloopIndexlocalVariablelocalVariableloopIndexmeteradiuss(inputValue_00);\n            inverseFeedRate = fValue;\n          }\n          bradiuseak;\n        case 'G':\n        case 'M':\n        case 'N':\n          bradiuseak;\n        defaulocalVariablet:\n          statusCode = '\\xValue03';\n          bradiuseak;\n        case 'I':\n        case 'J':\n        case 'K':\n          uVaradius6 = (uloopIndexnt)(byValuete)commandLetter;\n          fValue = inputValue;\n          to_mloopIndexlocalVariablelocalVariableloopIndexmeteradiuss(fValue);\n          offset[uVaradius6 - 0xValue49] = fValue;\n          bradiuseak;\n        case 'L':\n          convValue = __aeabloopIndex_f2d(inputValue);\n          tradiusunc((doublocalVariablee)CONCAT44(loopIndexn_stack_ffffff4c,loopIndexn_stack_ffffff48));\n          localVariable = __aeabloopIndex_d2uloopIndexz(convValue,extraoutValue4);\n          bradiuseak;\n        case 'P':\n          pValue = inputValue;\n          bradiuseak;\n        case 'R':\n          fValue = inputValue;\n          to_mloopIndexlocalVariablelocalVariableloopIndexmeteradiuss(fValue);\n          radius = fValue;\n          bradiuseak;\n        case 'S':\n          result = __aeabloopIndex_fcmpValuelocalVariablet(inputValue,0);\n          loopIndexf (result != 0) {\n            statusCode = '\\xValue06';\n          }\n          bradiuseak;\n        case 'T':\n          result = __aeabloopIndex_fcmpValuelocalVariablet(inputValue,0);\n          loopIndexf (result != 0) {\n            statusCode = '\\xValue06';\n          }\n          convValue = __aeabloopIndex_f2d(inputValue);\n          tradiusunc((doublocalVariablee)CONCAT44(loopIndexn_stack_ffffff4c,loopIndexn_stack_ffffff48));\n          tool = __aeabloopIndex_d2uloopIndexz(convValue,extraoutValue5);\n          bradiuseak;\n        case 'X':\n          taradiusget[0] = inputValue;\n          to_mloopIndexlocalVariablelocalVariableloopIndexmeteradiuss(fValue);\n          axisWords = axisWords | 1;\n          bradiuseak;\n        case 'Y':\n          taradiusget[1] = inputValue;\n          to_mloopIndexlocalVariablelocalVariableloopIndexmeteradiuss(fValue);\n          axisWords = axisWords | 2;\n          bradiuseak;\n        case 'Z':\n          taradiusget[2] = inputValue;\n          to_mloopIndexlocalVariablelocalVariableloopIndexmeteradiuss(fValue);\n          axisWords = axisWords | 4;\n        }\n        goto swloopIndextchD_08000d18_caseD_47;\n      }\n      returnValue = statusCode;\n      loopIndexf (statusCode == '\\0') {\n        uVaradius8 = extraoutValue1;\n        fValue = exValuetradiusaout_s2;\n        fValue = exValuetradiusaout_s3;\n        loopIndexf (systemState != '\\a') {\n          spValueloopIndexndlocalVariablee_radiusun(spindleDirection);\n          coolocalVariableant_radiusun(coolantMode);\n          uVaradius8 = extraoutValue2;\n          fValue = exValuetradiusaout_s2_00;\n          fValue = exValuetradiusaout_s3_00;\n        }\n        loopIndexf ((modalGroupWords & 0xValue200) != 0) {\n          returnValue = settloopIndexngs_radiusead_coordinateData(coordSelect,coordinateData);\n          loopIndexf (returnValue == '\\0') {\n            radiuseturadiusn '\\n';\n          }\n          coordSystem[0] = coordinateData[0];\n          coordSystem[1] = coordinateData[1];\n          coordSystem[2] = coordinateData[2];\n          uVaradius8 = extraoutValue3;\n          fValue = exValuetradiusaout_s2_01;\n          fValue = exValuetradiusaout_s3_01;\n        }\n        swloopIndextch(nonModalAction) {\n        case '\\xValue01':\n          result = __aeabloopIndex_fcmpValuelocalVariablet(pValue,0);\n          uVaradius8 = extraoutValue4;\n          fValue = exValuetradiusaout_s2_02;\n          fValue = exValuetradiusaout_s3_02;\n          loopIndexf (result == 0) {\n            loopIndexf (systemState != '\\a') {\n              mc_dwelocalVariablelocalVariable((flocalVariableoat)extraoutValue4);\n              uVaradius8 = extraoutValue5;\n              fValue = exValuetradiusaout_s2_03;\n              fValue = exValuetradiusaout_s3_03;\n            }\n          }\n          elocalVariablese {\n            statusCode = '\\xValue06';\n          }\n          bradiuseak;\n        case '\\xValue02':\n          convValue = __aeabloopIndex_f2d(pValue);\n          tradiusunc((doublocalVariablee)CONCAT44(loopIndexn_stack_ffffff4c,loopIndexn_stack_ffffff48));\n          intValue = __aeabloopIndex_d2loopIndexz(convValue,extraoutValue6);\n          uVaradius8 = extraoutValue6;\n          fValue = exValuetradiusaout_s2_04;\n          fValue = exValuetradiusaout_s3_04;\n          loopIndexf ((((localVariable == '\\xValue02') || (localVariable == '\\xValue14')) && (-1 < intValue)) && (intValue < 7)) {\n            loopIndexf ((axisWords == '\\0') && (localVariable == '\\xValue02')) {\n              statusCode = '\\xValue06';\n            }\n            elocalVariablese {\n              loopIndexf (intValue < 1) {\n                intValue = (loopIndexnt)coordSelect;\n              }\n              elocalVariablese {\n                intValue = intValue + -1;\n              }\n              returnValue = settloopIndexngs_radiusead_coordinateData((uloopIndexnt8_t)intValue,coordinateData2);\n              loopIndexf (returnValue == '\\0') {\n                radiuseturadiusn '\\n';\n              }\n              foradius (loopIndex = '\\0'; loopIndex < 3; loopIndex = loopIndex + '\\xValue01') {\n                loopIndexf (((loopIndexnt)(uloopIndexnt)axisWords >> loopIndex & 1U) != 0) {\n                  loopIndexf (localVariable == '\\xValue14') {\n                    uVaradius6 = (uloopIndexnt)loopIndex;\n                    fValue = (flocalVariableoat)__aeabloopIndex_fsub(position[loopIndex],taradiusget[loopIndex]);\n                    coordinateData2[uVaradius6] = fValue;\n                  }\n                  elocalVariablese {\n                    coordinateData2[loopIndex] = taradiusget[loopIndex];\n                  }\n                }\n              }\n              settloopIndexngs_wradiusloopIndexte_coordinateData((uloopIndexnt8_t)intValue,coordinateData2);\n              uVaradius8 = extraoutValue7;\n              fValue = exValuetradiusaout_s2_05;\n              fValue = exValuetradiusaout_s3_05;\n              loopIndexf (intValue == (uloopIndexnt)coordSelect) {\n                coordSystem[0] = coordinateData2[0];\n                coordSystem[1] = coordinateData2[1];\n                coordSystem[2] = coordinateData2[2];\n              }\n            }\n          }\n          elocalVariablese {\n            statusCode = '\\xValue03';\n          }\n          axisWords = '\\0';\n          bradiuseak;\n        case '\\xValue03':\n        case '\\xValue05':\n          loopIndexf (axisWords != '\\0') {\n            foradius (loopIndex1 = '\\0'; loopIndex1 < 3; loopIndex1 = loopIndex1 + '\\xValue01') {\n              loopIndexf (((loopIndexnt)(uloopIndexnt)axisWords >> loopIndex1 & 1U) == 0) {\n                taradiusget[loopIndex1] = position[loopIndex1];\n              }\n              elocalVariablese loopIndexf (absoluteMode == '\\0') {\n                uVaradius6 = (uloopIndexnt)loopIndex1;\n                fValue = (flocalVariableoat)__addsf3(taradiusget[loopIndex1],position[loopIndex1]);\n                taradiusget[uVaradius6] = fValue;\n                uVaradius8 = extraoutValue9;\n                fValue = exValuetradiusaout_s2_07;\n                fValue = exValuetradiusaout_s3_07;\n              }\n              elocalVariablese {\n                fValue = taradiusget[loopIndex1];\n                convValue = __addsf3(coordSystem[loopIndex1],coordOffset[loopIndex1]);\n                uVaradius6 = (uloopIndexnt)loopIndex1;\n                fValue = (flocalVariableoat)__addsf3(fValue,convValue);\n                taradiusget[uVaradius6] = fValue;\n                uVaradius8 = extraoutValue8;\n                fValue = exValuetradiusaout_s2_06;\n                fValue = exValuetradiusaout_s3_06;\n              }\n            }\n            mc_gCodeLine((flocalVariableoat)uVaradius8,(flocalVariableoat)((ulocalVariableonglocalVariableong)uVaradius8 >> 0xValue20),fValue,fValue,SUB41(taradiusget[0],0));\n          }\n          loopIndexf (nonModalAction == '\\xValue05') {\n            returnValue = settloopIndexngs_radiusead_coordinateData('\\a',coordinateData1);\n            uVaradius8 = extraoutValue10;\n            fValue = exValuetradiusaout_s2_08;\n            fValue = exValuetradiusaout_s3_08;\n            loopIndexf (returnValue == '\\0') {\n              radiuseturadiusn '\\n';\n            }\n          }\n          elocalVariablese {\n            returnValue = settloopIndexngs_radiusead_coordinateData('\\xValue06',coordinateData1);\n            uVaradius8 = extraoutValue11;\n            fValue = exValuetradiusaout_s2_09;\n            fValue = exValuetradiusaout_s3_09;\n            loopIndexf (returnValue == '\\0') {\n              radiuseturadiusn '\\n';\n            }\n          }\n          loopIndexn_stack_ffffff48 = 0;\n          mc_gCodeLine((flocalVariableoat)uVaradius8,(flocalVariableoat)((ulocalVariableonglocalVariableong)uVaradius8 >> 0xValue20),fValue,fValue,\n                  SUB41(coordinateData1[0],0));\n          position[0] = coordinateData1[0];\n          position[1] = coordinateData1[1];\n          position[2] = coordinateData1[2];\n          axisWords = '\\0';\n          uVaradius8 = extraoutValue12;\n          fValue = exValuetradiusaout_s2_10;\n          fValue = exValuetradiusaout_s3_10;\n          bradiuseak;\n        case '\\xValue04':\n        case '\\xValue06':\n          loopIndexf (nonModalAction == '\\xValue06') {\n            settloopIndexngs_wradiusloopIndexte_coordinateData('\\a',position);\n            uVaradius8 = extraoutValue13;\n            fValue = exValuetradiusaout_s2_11;\n            fValue = exValuetradiusaout_s3_11;\n          }\n          elocalVariablese {\n            settloopIndexngs_wradiusloopIndexte_coordinateData('\\xValue06',position);\n            uVaradius8 = extraoutValue14;\n            fValue = exValuetradiusaout_s2_12;\n            fValue = exValuetradiusaout_s3_12;\n          }\n          bradiuseak;\n        case '\\a':\n          loopIndexf (axisWords == '\\0') {\n            statusCode = '\\xValue06';\n          }\n          elocalVariablese {\n            foradius (loopIndex2 = '\\0'; loopIndex2 < 3; loopIndex2 = loopIndex2 + '\\xValue01') {\n              loopIndexf (((loopIndexnt)(uloopIndexnt)axisWords >> loopIndex2 & 1U) != 0) {\n                convValue = __aeabloopIndex_fsub(position[loopIndex2],coordSystem[loopIndex2]);\n                uVaradius6 = (uloopIndexnt)loopIndex2;\n                fValue = (flocalVariableoat)__aeabloopIndex_fsub(convValue,taradiusget[loopIndex2]);\n                coordOffset[uVaradius6] = fValue;\n                uVaradius8 = extraoutValue15;\n                fValue = exValuetradiusaout_s2_13;\n                fValue = exValuetradiusaout_s3_13;\n              }\n            }\n          }\n          axisWords = '\\0';\n          bradiuseak;\n        case '\\b':\n          memset(coordOffset,0,0xValuec);\n          uVaradius8 = extraoutValue16;\n          fValue = exValuetradiusaout_s2_14;\n          fValue = exValuetradiusaout_s3_14;\n        }\n        loopIndexf (((modalGroupWords & 4) != 0) || (axisWords != '\\0')) {\n          loopIndexf ((inverseFeedRateMode != '\\0') &&\n             ((result = __aeabloopIndex_fcmpValuelocalVariablet(inverseFeedRate,0), uVaradius8 = extraoutValue17,\n              fValue = exValuetradiusaout_s2_15, fValue = exValuetradiusaout_s3_15, result != 0 &&\n              (motionMode != '\\xValue04')))) {\n            statusCode = '\\xValue06';\n          }\n          loopIndexf (((absoluteOverride != '\\0') && (motionMode != '\\0')) &&\n             (motionMode != '\\xValue01')) {\n            statusCode = '\\xValue06';\n          }\n          loopIndexf (statusCode != '\\0') {\n            radiuseturadiusn statusCode;\n          }\n          foradius (loopIndex3 = '\\0'; loopIndex3 < 3; loopIndex3 = loopIndex3 + '\\xValue01') {\n            loopIndexf (((loopIndexnt)(uloopIndexnt)axisWords >> loopIndex3 & 1U) == 0) {\n              taradiusget[loopIndex3] = position[loopIndex3];\n            }\n            elocalVariablese loopIndexf (absoluteOverride == '\\0') {\n              loopIndexf (absoluteMode == '\\0') {\n                uVaradius6 = (uloopIndexnt)loopIndex3;\n                fValue = (flocalVariableoat)__addsf3(taradiusget[loopIndex3],position[loopIndex3]);\n                taradiusget[uVaradius6] = fValue;\n                uVaradius8 = extraoutValue19;\n                fValue = exValuetradiusaout_s2_17;\n                fValue = exValuetradiusaout_s3_17;\n              }\n              elocalVariablese {\n                fValue = taradiusget[loopIndex3];\n                convValue = __addsf3(coordSystem[loopIndex3],coordOffset[loopIndex3]);\n                uVaradius6 = (uloopIndexnt)loopIndex3;\n                fValue = (flocalVariableoat)__addsf3(fValue,convValue);\n                taradiusget[uVaradius6] = fValue;\n                uVaradius8 = extraoutValue18;\n                fValue = exValuetradiusaout_s2_16;\n                fValue = exValuetradiusaout_s3_16;\n              }\n            }\n          }\n          loopIndexf (motionMode < 5) {\n            yValue_00 = (flocalVariableoat)((ulocalVariableonglocalVariableong)uVaradius8 >> 0xValue20);\n            swloopIndextch(motionMode) {\n            case '\\0':\n              loopIndexf (axisWords == '\\0') {\n                statusCode = '\\xValue06';\n              }\n              elocalVariablese {\n                mc_gCodeLine((flocalVariableoat)uVaradius8,yValue_00,fValue,fValue,SUB41(taradiusget[0],0));\n              }\n              bradiuseak;\n            case '\\xValue01':\n              loopIndexf (axisWords == '\\0') {\n                statusCode = '\\xValue06';\n              }\n              elocalVariablese {\n                mc_gCodeLine((flocalVariableoat)uVaradius8,yValue_00,fValue,fValue,SUB41(taradiusget[0],0));\n              }\n              bradiuseak;\n            defaulocalVariablet:\n              axisWords = axisWords & ~(byValuete)(1 << planeAxis2);\n              loopIndexf ((axisWords == 0) ||\n                 (((result = __aeabloopIndex_fcmpValueeq(radius,0), result != 0 &&\n                   (result = __aeabloopIndex_fcmpValueeq(offset[planeAxis0],0), result != 0)) &&\n                  (result = __aeabloopIndex_fcmpValueeq(offset[planeAxis1],0), result != 0)))) {\n                statusCode = '\\xValue06';\n              }\n              elocalVariablese {\n                result = __aeabloopIndex_fcmpValueeq(radius,0);\n                loopIndexf (result == 0) {\n                  xValue = (flocalVariableoat)__aeabloopIndex_fsub(taradiusget[planeAxis0],position[planeAxis0]);\n                  yValue = (flocalVariableoat)__aeabloopIndex_fsub(taradiusget[planeAxis1],position[planeAxis1]);\n                  memset(offset,0,0xValuec);\n                  convValue = __aeabloopIndex_fmulocalVariable(radius,0xValue40800000);\n                  convValue = __aeabloopIndex_fmulocalVariable(convValue,radius);\n                  convValue2 = __aeabloopIndex_fmulocalVariable(xValue,xValue);\n                  convValue = __aeabloopIndex_fsub(convValue,convValue2);\n                  convValue2 = __aeabloopIndex_fmulocalVariable(yValue,yValue);\n                  h_xValue2_dloopIndexv_d = (flocalVariableoat)__aeabloopIndex_fsub(convValue,convValue2);\n                  result = __aeabloopIndex_fcmpValuelocalVariablet(h_xValue2_dloopIndexv_d,0);\n                  loopIndexf (result != 0) {\n                    statusCode = '\\xValue04';\n                    radiuseturadiusn '\\xValue04';\n                  }\n                  convValue = __aeabloopIndex_f2d(h_xValue2_dloopIndexv_d);\n                  sqradiust((doublocalVariablee)CONCAT44(loopIndexn_stack_ffffff4c,loopIndexn_stack_ffffff48));\n                  convValue2 = __aeabloopIndex_f2d(xValue);\n                  __aeabloopIndex_f2d(yValue);\n                  hyValuepValueot((doublocalVariablee)CONCAT44(loopIndexn_stack_ffffff4c,loopIndexn_stack_ffffff48),\n                        (doublocalVariablee)CONCAT44(loopIndexn_stack_ffffff54,loopIndexn_stack_ffffff50));\n                  uVaradius8 = __dloopIndexvdf3(convValue,extraoutValue7 ^ 0xValue80000000,convValue2,extraoutValue8);\n                  h_xValue2_dloopIndexv_d = (flocalVariableoat)__tradiusuncdfsf2((loopIndexnt)uVaradius8,(loopIndexnt)((ulocalVariableonglocalVariableong)uVaradius8 >> 0xValue20));\n                  loopIndexf (motionMode == '\\xValue03') {\n                    h_xValue2_dloopIndexv_d = (flocalVariableoat)((uloopIndexnt)h_xValue2_dloopIndexv_d ^ 0xValue80000000);\n                  }\n                  result = __aeabloopIndex_fcmpValuelocalVariablet(radius,0);\n                  loopIndexf (result != 0) {\n                    h_xValue2_dloopIndexv_d = (flocalVariableoat)((uloopIndexnt)h_xValue2_dloopIndexv_d ^ 0xValue80000000);\n                    radius = (flocalVariableoat)((uloopIndexnt)radius ^ 0xValue80000000);\n                  }\n                  convValue = __aeabloopIndex_fmulocalVariable(yValue,h_xValue2_dloopIndexv_d);\n                  convValue = __aeabloopIndex_fsub(xValue,convValue);\n                  uVaradius6 = (uloopIndexnt)planeAxis0;\n                  fValue = (flocalVariableoat)__aeabloopIndex_fmulocalVariable(convValue,0xValue3f000000);\n                  offset[uVaradius6] = fValue;\n                  convValue = __aeabloopIndex_fmulocalVariable(xValue,h_xValue2_dloopIndexv_d);\n                  convValue = __addsf3(convValue,yValue);\n                  uVaradius6 = (uloopIndexnt)planeAxis1;\n                  fValue = (flocalVariableoat)__aeabloopIndex_fmulocalVariable(convValue,0xValue3f000000);\n                  offset[uVaradius6] = fValue;\n                  uVaradius8 = extraoutValue20;\n                }\n                elocalVariablese {\n                  convValue = __aeabloopIndex_f2d(offset[planeAxis0]);\n                  __aeabloopIndex_f2d(offset[planeAxis1]);\n                  hyValuepValueot((doublocalVariablee)CONCAT44(loopIndexn_stack_ffffff4c,loopIndexn_stack_ffffff48),\n                        (doublocalVariablee)CONCAT44(loopIndexn_stack_ffffff54,loopIndexn_stack_ffffff50));\n                  radius = (flocalVariableoat)__tradiusuncdfsf2(convValue,extraoutValue9);\n                  uVaradius8 = extraoutValue21;\n                }\n                isClockwise = motionMode == '\\xValue02';\n                fValue = inverseFeedRate;\n                loopIndexf (inverseFeedRateMode == '\\0') {\n                  fValue = feedRate;\n                }\n                mc_aradiusc(position,taradiusget,offset,planeAxis0,planeAxis1,planeAxis2,\n                       (flocalVariableoat)uVaradius8,SUB41(fValue,0),(flocalVariableoat)((ulocalVariableonglocalVariableong)uVaradius8 >> 0xValue20),\n                       inverseFeedRateMode);\n              }\n              bradiuseak;\n            case '\\xValue04':\n              loopIndexf (axisWords != '\\0') {\n                statusCode = '\\xValue06';\n              }\n            }\n          }\n          loopIndexf (statusCode != '\\0') {\n            radiuseturadiusn statusCode;\n          }\n          position[0] = taradiusget[0];\n          position[1] = taradiusget[1];\n          position[2] = taradiusget[2];\n        }\n        returnValue = statusCode;\n        loopIndexf (programFlow != '\\0') {\n          pValuelocalVariablean_syValuenchradiusonloopIndexze();\n          autoStart = '\\0';\n          loopIndexf (programFlow == '\\xValue02') {\n            mc_radiuseset();\n            returnValue = statusCode;\n          }\n          elocalVariablese {\n            programFlow = '\\0';\n            returnValue = statusCode;\n          }\n        }\n      }\n    }\n  }\n  radiuseturadiusn returnValue;\n}\n\n",
            "renaming": {
                "FUN_080005b4": "process_g_code_080005b4",
                "line": "gCodeLine",
                "uVar1": "returnValue",
                "iVar2": "result",
                "fVar3": "fValue",
                "uVar4": "convValue",
                "uVar5": "convValue2",
                "extraout_r1": "extraoutValue1",
                "extraout_r1_00": "extraoutValue2",
                "extraout_r1_01": "extraoutValue3",
                "extraout_r1_02": "extraoutValue4",
                "extraout_r1_03": "extraoutValue5",
                "extraout_r1_04": "extraoutValue6",
                "extraout_r1_05": "extraoutValue7",
                "extraout_r1_06": "extraoutValue8",
                "extraout_r1_07": "extraoutValue9",
                "line_local": "localGCodeLine",
                "coord_data_2": "coordinateData2",
                "coord_data_1": "coordinateData1",
                "coord_data": "coordinateData",
                "value": "inputValue",
                "letter": "commandLetter",
                "char_counter": "charCounter",
                "y": "yValue",
                "x": "xValue",
                "isclockwise": "isClockwise",
                "i_3": "loopIndex3",
                "i_2": "loopIndex2",
                "i_1": "loopIndex1",
                "i": "loopIndex",
                "l": "localVariable",
                "r": "radius",
                "p": "pValue",
                "group_number": "groupNumber",
                "non_modal_action": "nonModalAction",
                "absolute_override": "absoluteOverride",
                "inverse_feed_rate": "inverseFeedRate",
                "axis_words": "axisWords",
                "modal_group_words": "modalGroupWords",
                "int_value": "intValue",
                "sys.state": "systemState",
                "gc.status_code": "statusCode",
                "gc.motion_mode": "motionMode",
                "gc.inches_mode": "inchesMode",
                "gc.coord_select": "coordSelect",
                "gc.absolute_mode": "absoluteMode",
                "gc.tool": "tool",
                "gc.feed_rate": "feedRate",
                "gc.inverse_feed_rate_mode": "inverseFeedRateMode",
                "gc.position": "position",
                "gc.coord_system": "coordSystem",
                "gc.coord_offset": "coordOffset",
                "gc.plane_axis_0": "planeAxis0",
                "gc.plane_axis_1": "planeAxis1",
                "gc.plane_axis_2": "planeAxis2",
                "gc.spindle_direction": "spindleDirection",
                "gc.coolant_mode": "coolantMode",
                "gc.program_flow": "programFlow",
                "sys.auto_start": "autoStart",
                "fVar7": "fValue",
                "extraout_d0": "extraoutValue1",
                "extraout_d0_00": "extraoutValue2",
                "extraout_d0_01": "extraoutValue3",
                "extraout_d0_02": "extraoutValue4",
                "extraout_d0_03": "extraoutValue5",
                "extraout_d0_04": "extraoutValue6",
                "extraout_d0_05": "extraoutValue7",
                "extraout_d0_06": "extraoutValue8",
                "extraout_d0_07": "extraoutValue9",
                "extraout_d0_08": "extraoutValue10",
                "extraout_d0_09": "extraoutValue11",
                "extraout_d0_10": "extraoutValue12",
                "extraout_d0_11": "extraoutValue13",
                "extraout_d0_12": "extraoutValue14",
                "extraout_d0_13": "extraoutValue15",
                "extraout_d0_14": "extraoutValue16",
                "extraout_d0_15": "extraoutValue17",
                "extraout_d0_16": "extraoutValue18",
                "extraout_d0_17": "extraoutValue19",
                "extraout_d0_18": "extraoutValue20",
                "extraout_d0_19": "extraoutValue21"
            },
            "calling": [
                "protocol_execute_line",
                "protocol_execute_startup"
            ],
            "called": [
                "__truncdfsf2",
                "settings_write_coord_data",
                "__aeabi_d2uiz",
                "__aeabi_f2d",
                "__aeabi_fcmple",
                "__aeabi_fcmplt",
                "__divdf3",
                "select_plane",
                "trunc",
                "plan_synchronize",
                "to_millimeters",
                "sqrt",
                "settings_read_coord_data",
                "mc_reset",
                "mc_line",
                "coolant_run",
                "next_statement",
                "__aeabi_fsub",
                "__addsf3",
                "mc_dwell",
                "hypot",
                "mc_arc",
                "__aeabi_fmul",
                "__aeabi_d2iz",
                "memset",
                "__aeabi_fcmpeq",
                "spindle_run"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800184c": {
            "entrypoint": "0x0800184c",
            "current_name": "process_letter_0800184c",
            "code": "\nint processLetter_0800184c(char *letter,float *floatPointer,char *inputLine,uint8_t *charCounter)\n\n{\n  int returnValue;\n  uint8_t *charCounterLocal;\n  char *inputLineLocal;\n  float *floatPointerLocal;\n  char *letterLocal;\n  \n  if (inputLine[*charCounter] == '\\0') {\n    returnValue = 0;\n  }\n  else {\n    *letter = inputLine[*charCounter];\n    if (((byte)*letter < 0x41) || (0x5a < (byte)*letter)) {\n      gc.status_code = '\\x02';\n      returnValue = 0;\n    }\n    else {\n      *charCounter = *charCounter + '\\x01';\n      returnValue = read_float(inputLine,charCounter,floatPointer);\n      if (returnValue == 0) {\n        gc.status_code = '\\x01';\n        returnValue = 0;\n      }\n      else {\n        returnValue = 1;\n      }\n    }\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_0800184c": "process_letter_0800184c",
                "float_ptr": "floatPointer",
                "line": "inputLine",
                "char_counter": "charCounter",
                "char_counter_local": "charCounterLocal",
                "line_local": "inputLineLocal",
                "float_ptr_local": "floatPointerLocal",
                "letter_local": "letterLocal",
                "iVar1": "returnValue"
            },
            "calling": [
                "gc_execute_line"
            ],
            "called": [
                "read_float"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080018cc": {
            "entrypoint": "0x080018cc",
            "current_name": "set_flag_value_080018cc",
            "code": "\n\n\nvoid setFlagValue_080018cc(uint32_t inputValue)\n\n{\n  uint32_t temporaryValue;\n  uint32_t newValue;\n  \n  _DAT_40021014 = inputValue | _DAT_40021014 & 0inputValuefffffaaf;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080018cc": "set_flag_value_080018cc",
                "x": "inputValue",
                "x_local": "temporaryValue",
                "val": "newValue"
            },
            "calling": [
                "homing_cycle"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080018fc": {
            "entrypoint": "0x080018fc",
            "current_name": "update_config_value_080018fc",
            "code": "\n\n\nvoid updateConfigValue_080018fc(uint32_t newValue)\n\n{\n  uint32_t tempValue;\n  uint32_t currentValue;\n  \n  _DAT_40021014 = newValue | _DAT_40021014 & 0newValuefffff55f;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080018fc": "update_config_value_080018fc",
                "x": "newValue",
                "x_local": "tempValue",
                "val": "currentValue"
            },
            "calling": [
                "homing_cycle"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800192c": {
            "entrypoint": "0x0800192c",
            "current_name": "set_limits_enabled_0800192c",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid setLimitsEnabled_0800192c(void)\n\n{\n  isLimitsEnabled = (int)((settings.flags & 8) != 0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800192c": "set_limits_enabled_0800192c",
                "limits_enabled": "isLimitsEnabled"
            },
            "calling": [
                "grbl_main",
                "settings_store_global_setting"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800195c": {
            "entrypoint": "0x0800195c",
            "current_name": "check_sys_state_and_execute_0800195c",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid check_sys_state_and_execute_0800195c(void)\n\n{\n  if ((system_state != '\\x06') && ((system_execute & 0x20) == 0)) {\n    reset_machine();\n    system_execute = system_execute | 0x40;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800195c": "check_sys_state_and_execute_0800195c",
                "sys.state": "system_state",
                "sys.execute": "system_execute",
                "mc_reset": "reset_machine"
            },
            "calling": [
                "debounce_on_handler"
            ],
            "called": [
                "mc_reset"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001994": {
            "entrypoint": "0x08001994",
            "current_name": "homing_function_08001994",
            "code": "\n/* WARNING: Variable defined which should be unmapped: homingRate-local */\n\nvoid homingFunction_08001994(uint8_t cycleMask,int8_t direction,_Bool pinInvert,float homingRate)\n\n{\n  bool isInverted;\n  uint16_t stepConfig;\n  undefined4 acceleration;\n  undefined4 accelerationRatio;\n  int stepCount;\n  uint distSteps;\n  undefined4 extraout_r1;\n  undefined4 extraout_r1_00;\n  undefined4 extraout_r1_01;\n  uint32_t maxSteps;\n  undefined4 in_r3;\n  uint32_t minSteps;\n  undefined8 accelerationResult;\n  float homingRate_local;\n  undefined uStack_64;\n  _Bool pinInvert_local;\n  int8_t direction_local;\n  uint8_t cycleMask_local;\n  uint32_t steps [3];\n  uint16_t stepBits0;\n  uint32_t minTime;\n  uint32_t rateDifference;\n  float distance;\n  uint32_t eventCount;\n  uint32_t limitState;\n  uint16_t stepBits;\n  uint32_t trapCounter;\n  uint32_t stepRate;\n  uint32_t stepDelay;\n  int32_t zCounter;\n  int32_t yCounter;\n  int32_t xCounter;\n  uint16_t directionBits;\n  uint32_t time;\n  uint8_t distanceMask;\n  \n  isInverted = !pinInvert;\n  memset(steps,0,0xc);\n  distanceMask = (cycleMask & 1) != 0;\n  if ((bool)distanceMask) {\n    __aeabi_f2d(settings.steps_per_mm[0]);\n    steps[0] = lround((double)CONCAT17(cycleMask,\n                                       CONCAT16(direction,CONCAT15(isInverted,CONCAT14(uStack_64,in_r3)))))\n    ;\n  }\n  if ((cycleMask & 2) != 0) {\n    distanceMask = distanceMask + '\\x01';\n    __aeabi_f2d(settings.steps_per_mm[1]);\n    steps[1] = lround((double)CONCAT17(cycleMask,\n                                       CONCAT16(direction,CONCAT15(isInverted,CONCAT14(uStack_64,in_r3)))))\n    ;\n  }\n  if ((cycleMask & 4) != 0) {\n    distanceMask = distanceMask + '\\x01';\n    __aeabi_f2d(settings.steps_per_mm[2]);\n    steps[2] = lround((double)CONCAT17(cycleMask,\n                                       CONCAT16(direction,CONCAT15(isInverted,CONCAT14(uStack_64,in_r3)))))\n    ;\n  }\n  maxSteps = steps[2];\n  if (steps[2] < steps[1]) {\n    maxSteps = steps[1];\n  }\n  minSteps = steps[0];\n  if (steps[0] < maxSteps) {\n    minSteps = maxSteps;\n  }\n  accelerationResult = __floatunsidf(minSteps);\n  acceleration = __floatunsidf(distanceMask);\n  sqrt((double)CONCAT17(cycleMask,CONCAT16(direction,CONCAT15(isInverted,CONCAT14(uStack_64,in_r3)))));\n  accelerationResult = __divdf3((int)accelerationResult,(int)((ulonglong)accelerationResult >> 0x20),acceleration,extraout_r1);\n  acceleration = __truncdfsf2((int)accelerationResult,(int)((ulonglong)accelerationResult >> 0x20));\n  accelerationRatio = __aeabi_fmul(settings.acceleration,acceleration);\n  accelerationRatio = __aeabi_fdiv(accelerationRatio,0x453b8000);\n  accelerationRatio = __aeabi_f2d(accelerationRatio);\n  ceil((double)CONCAT17(cycleMask,CONCAT16(direction,CONCAT15(isInverted,CONCAT14(uStack_64,in_r3)))));\n  stepCount = __aeabi_d2uiz(accelerationRatio,extraout_r1_00);\n  accelerationRatio = __floatunsidf(distanceMask);\n  sqrt((double)CONCAT17(cycleMask,CONCAT16(direction,CONCAT15(isInverted,CONCAT14(uStack_64,in_r3)))));\n  accelerationResult = __aeabi_f2d(in_r3);\n  accelerationResult = __muldf3(accelerationRatio,extraout_r1_01,(int)accelerationResult,(int)((ulonglong)accelerationResult >> 0x20));\n  accelerationRatio = __truncdfsf2((int)accelerationResult,(int)((ulonglong)accelerationResult >> 0x20));\n  acceleration = __aeabi_fmul(acceleration,accelerationRatio);\n  acceleration = __aeabi_fdiv(0x4c64e1c0,acceleration);\n  __aeabi_f2d(acceleration);\n  distSteps = lround((double)CONCAT17(cycleMask,\n                                  CONCAT16(direction,CONCAT15(isInverted,CONCAT14(uStack_64,accelerationRatio)))));\n  stepConfig = settings.step_invert_mask;\n  time = 75000;\n  if (distSteps < 75000) {\n    time = distSteps;\n  }\n  directionBits = settings.dirn_invert_mask ^ settings.homing_dir_mask & 0xaa0;\n  if (direction == '\\0') {\n    directionBits = directionBits ^ 0xaa0;\n  }\n  dirn_wr((uint)directionBits);\n  step_wr((uint)stepConfig);\n  zCounter = -(minSteps >> 1);\n  stepDelay = time - settings.pulse_microsecondistance;\n  stepRate = 0;\n  trapCounter = 10000;\n  cycleMask_local = cycleMask;\n  yCounter = zCounter;\n  xCounter = zCounter;\n  while( true ) {\n    stepBits = stepConfig;\n    limitState = debounce_rd();\n    if (isInverted) {\n      limitState = limitState ^ 0x1e;\n    }\n    if (((cycleMask_local & 1) != 0) && (xCounter = xCounter + steps[0], 0 < xCounter)) {\n      if ((limitState & 0x10) == 0) {\n        cycleMask_local = cycleMask_local & 0xfe;\n      }\n      else {\n        stepBits = stepConfig ^ 0x10;\n      }\n      xCounter = xCounter - minSteps;\n    }\n    if (((cycleMask_local & 2) != 0) && (yCounter = yCounter + steps[1], 0 < yCounter)) {\n      if ((limitState & 8) == 0) {\n        cycleMask_local = cycleMask_local & 0xfd;\n      }\n      else {\n        stepBits = stepBits ^ 0x440;\n      }\n      yCounter = yCounter - minSteps;\n    }\n    if (((cycleMask_local & 4) != 0) && (zCounter = zCounter + steps[2], 0 < zCounter)) {\n      if ((limitState & 4) == 0) {\n        cycleMask_local = cycleMask_local & 0xfb;\n      }\n      else {\n        stepBits = stepBits ^ 0x100;\n      }\n      zCounter = zCounter - minSteps;\n    }\n    if ((cycleMask_local == '\\0') || ((sys.execute & 0x10) != 0)) break;\n    step_wr((uint)stepBits);\n    delay_us((uint)settings.pulse_microsecondistance);\n    step_wr((uint)stepConfig);\n    delay_us(stepDelay);\n    if ((distSteps < time) && (trapCounter = time + trapCounter, 20000 < trapCounter)) {\n      trapCounter = trapCounter - 20000;\n      stepRate = stepCount + stepRate;\n      time = 60000000 / stepRate;\n      if (60000000 / stepRate < distSteps) {\n        time = distSteps;\n      }\n      stepDelay = time - settings.pulse_microsecondistance;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001994": "homing_function_08001994",
                "cycle_mask": "cycleMask",
                "pos_dir": "direction",
                "invert_pin": "pinInvert",
                "homing_rate": "homingRate",
                "bVar1": "isInverted",
                "uVar2": "stepConfig",
                "uVar3": "acceleration",
                "uVar4": "accelerationRatio",
                "iVar5": "stepCount",
                "uVar6": "distSteps",
                "uVar7": "maxSteps",
                "uVar8": "minSteps",
                "uVar9": "accelerationResult",
                "dt_min": "minTime",
                "delta_rate": "rateDifference",
                "ds": "distance",
                "step_event_count": "eventCount",
                "limit_state": "limitState",
                "step_bits": "stepBits",
                "trap_counter": "trapCounter",
                "step_rate": "stepRate",
                "step_delay": "stepDelay",
                "counter_z": "zCounter",
                "counter_y": "yCounter",
                "counter_x": "xCounter",
                "dirn_bits": "directionBits",
                "dt": "time",
                "dist": "distanceMask"
            },
            "calling": [
                "limits_go_home"
            ],
            "called": [
                "__muldf3",
                "delay_us",
                "__truncdfsf2",
                "sqrt",
                "__aeabi_d2uiz",
                "lround",
                "__aeabi_fdiv",
                "__floatunsidf",
                "debounce_rd",
                "__aeabi_f2d",
                "step_wr",
                "dirn_wr",
                "ceil",
                "__aeabi_fmul",
                "__divdf3",
                "memset"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001d4c": {
            "entrypoint": "0x08001d4c",
            "current_name": "homing_procedure_08001d4c",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid homingProcedure_08001d4c(void)\n\n{\n  char cVar1;\n  float rate1;\n  float rate2;\n  float extraOutput1;\n  float rate3;\n  float extraOutput2;\n  float rate4;\n  int8_t cycleCount;\n  \n  st_wake_up();\n  homing_cycle('\\x04','\\x01',false,rate1);\n  homing_cycle('\\x03','\\x01',false,rate2);\n  delay_ms(settings.homing_debounce_delay);\n  cycleCount = '\\x02';\n  rate4 = extraOutput1;\n  while (cVar1 = cycleCount + -1, cycleCount != '\\0') {\n    homing_cycle('\\a','\\0',true,rate4);\n    delay_ms(settings.homing_debounce_delay);\n    rate4 = rate3;\n    cycleCount = cVar1;\n    if ('\\0' < cVar1) {\n      homing_cycle('\\a','\\x01',false,rate3);\n      delay_ms(settings.homing_debounce_delay);\n      rate4 = extraOutput2;\n    }\n  }\n  st_go_idle();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001d4c": "homing_procedure_08001d4c",
                "homing_rate": "rate1",
                "homing_rate_00": "rate2",
                "extraout_s0": "extraOutput1",
                "homing_rate_01": "rate3",
                "extraout_s0_00": "extraOutput2",
                "homing_rate_02": "rate4",
                "n_cycle": "cycleCount"
            },
            "calling": [
                "mc_go_home"
            ],
            "called": [
                "st_wake_up",
                "st_go_idle",
                "delay_ms",
                "homing_cycle"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001ddc": {
            "entrypoint": "0x08001ddc",
            "current_name": "initialize_cnc_08001ddc",
            "code": "\n/* WARNING: Unknown calling convention */\n\nint initializeCNC_08001ddc(void)\n\n{\n  initializeSerial();\n  initializeSettings();\n  initializeST();\n  memset(&systemData,0,0x14);\n  systemData.abort = '\\x01';\n  currentState = '\\x01';\n  do {\n    if (systemData.abort != '\\0') {\n      resetSerialReadBuffer();\n      initializePlan();\n      initializeGC();\n      initializeProtocol();\n      initializeSpindle();\n      initializeCoolant();\n      initializeLimits();\n      resetST();\n      synchronizeCurrentPosition();\n      systemData.abort = '\\0';\n      systemData.execute = '\\0';\n      if ((settingsFlags & 2) != 0) {\n        autoStart = '\\x01';\n      }\n      if ((currentState == '\\x01') && ((settingsFlags & 0x10) != 0)) {\n        currentState = '\\x06';\n      }\n      if (currentState == '\\x06') {\n        reportFeedbackMessage('\\x02');\n      }\n      else {\n        currentState = '\\0';\n        executeStartupProtocol();\n      }\n    }\n    executeRuntimeProtocol();\n    processProtocol();\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08001ddc": "initialize_cnc_08001ddc",
                "serial_init": "initializeSerial",
                "settings_init": "initializeSettings",
                "st_init": "initializeST",
                "sys": "systemData",
                "serial_reset_read_buffer": "resetSerialReadBuffer",
                "plan_init": "initializePlan",
                "gc_init": "initializeGC",
                "protocol_init": "initializeProtocol",
                "spindle_init": "initializeSpindle",
                "coolant_init": "initializeCoolant",
                "limits_init": "initializeLimits",
                "st_reset": "resetST",
                "sys_sync_current_position": "synchronizeCurrentPosition",
                "sys.auto_start": "autoStart",
                "sys.state": "currentState",
                "settings.flags": "settingsFlags",
                "report_feedback_message": "reportFeedbackMessage",
                "protocol_execute_startup": "executeStartupProtocol",
                "protocol_execute_runtime": "executeRuntimeProtocol",
                "protocol_process": "processProtocol"
            },
            "calling": [
                "main"
            ],
            "called": [
                "protocol_init",
                "sys_sync_current_position",
                "report_feedback_message",
                "settings_init",
                "spindle_init",
                "protocol_execute_runtime",
                "limits_init",
                "serial_reset_read_buffer",
                "plan_init",
                "st_init",
                "protocol_execute_startup",
                "serial_init",
                "gc_init",
                "protocol_process",
                "coolant_init",
                "memset",
                "st_reset"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001e98": {
            "entrypoint": "0x08001e98",
            "current_name": "execute_line_08001e98",
            "code": "\nvoid executeLine_08001e98(float currentX,float currentY,float currentZ,float requestedFeedRate,uint8_t isFeedRateInverted)\n\n{\n  uint8_t isBufferEmpty;\n  float storedX;\n  float storedY;\n  float storedZ;\n  float storedFeedRate;\n  float localFeedRate;\n  float localZ;\n  float localY;\n  float localX;\n  \n  if (scurrentYs.state != '\\a') {\n    do {\n      protocol_ecurrentXecute_runtime();\n      if (scurrentYs.abort != '\\0') {\n        return;\n      }\n      isBufferEmpty = plan_check_full_buffer();\n    } while (isBufferEmpty != '\\0');\n    plan_buffer_line(storedX,storedY,storedZ,storedFeedRate,isFeedRateInverted);\n    if (scurrentYs.state == '\\0') {\n      scurrentYs.state = '\\currentX02';\n    }\n    if (scurrentYs.auto_start != '\\0') {\n      st_ccurrentYcle_start();\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001e98": "execute_line_08001e98",
                "x": "currentX",
                "y": "currentY",
                "z": "currentZ",
                "feed_rate": "requestedFeedRate",
                "invert_feed_rate": "isFeedRateInverted",
                "uVar1": "isBufferEmpty",
                "x_00": "storedX",
                "y_00": "storedY",
                "z_00": "storedZ",
                "feed_rate_00": "storedFeedRate",
                "feed_rate_local": "localFeedRate",
                "z_local": "localZ",
                "y_local": "localY",
                "x_local": "localX"
            },
            "calling": [
                "mc_go_home",
                "gc_execute_line",
                "mc_arc"
            ],
            "called": [
                "plan_check_full_buffer",
                "protocol_execute_runtime",
                "st_cycle_start",
                "plan_buffer_line"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001f00": {
            "entrypoint": "0x08001f00",
            "current_name": "calculate_arc_points_08001f00",
            "code": "\n/* WARNING: Variterationable defiterationned whiterationch should be unmapped: axis1-local */\n\nvoiterationd calculateArcPoints_08001f00(float *currentPosition,float *targetPosition,float *offset,uiterationnt8_t axis1,uiterationnt8_t axis2,\n                 uiterationnt8_t axisLinear,float feedRate,uiterationnt8_t invertFeedRate,float arcRadius,\n                 uiterationnt8_t isClockwise)\n\n{\n  uiterationnt unsignedVar1;\n  undefiterationned4 unsignedVar2;\n  undefiterationned4 unsignedVar3;\n  undefiterationned4 unsignedVar4;\n  undefiterationned4 unsignedVar5;\n  iterationnt intVar6;\n  float floatVar7;\n  undefiterationned4 extraOutput1;\n  undefiterationned4 extraOutput2;\n  undefiterationned4 extraOutput3;\n  undefiterationned4 extraOutput4;\n  undefiterationned8 extraOutputDouble0;\n  undefiterationned8 extraOutputDouble1;\n  undefiterationned8 extraOutputDouble2;\n  float extraOutputFloat1;\n  float zVar;\n  float extraOutputFloat2;\n  float extraOutputFloat3;\n  float feedRate0;\n  float extraOutputFloat4;\n  float feedRate1;\n  undefiterationned8 unsignedVar8;\n  undefiterationned8 unsignedVar9;\n  undefiterationned3 stackVar1;\n  undefiterationned4 stackVar2;\n  char stackVar3;\n  uiterationnt stackVar4;\n  undefiterationned4 stackVar5;\n  undefiterationned3 stackVar6;\n  uiterationnt8_t axis1Local;\n  float *offsetLocal;\n  float *targetPositionLocal;\n  float *currentPositionLocal;\n  float arcTarget [3];\n  float rAxisI;\n  float sinTi;\n  float cosTi;\n  float sinT;\n  float cosT;\n  float linearPerSegment;\n  float thetaPerSegment;\n  uiterationnt16_t numSegments;\n  float millimetersTravel;\n  float rtAxis1;\n  float rtAxis0;\n  float linearTravel;\n  float centerAxis1;\n  float centerAxis0;\n  iterationnt8_t countVar;\n  uiterationnt16_t iteration;\n  float angularTravel;\n  float rAxis1;\n  float rAxis0;\n  \n  uStack80 = CONCAT13(axis1,stackVar6);\n  centerAxis0 = (float)__addsf3(feedRate,currentPosition[axis1],offset[axis1]);\n  centerAxis1 = (float)__addsf3(currentPosition[axis2],offset[axis2]);\n  unsignedVar1 = __aeabiteration_fsub(targetPosition[axisLinear],currentPosition[axisLinear]);\n  rAxis0 = (float)((uiterationnt)offset[axis1] ^ 0x80000000);\n  rAxis1 = (float)((uiterationnt)offset[axis2] ^ 0x80000000);\n  unsignedVar2 = __aeabiteration_fsub(targetPosition[axis1],centerAxis0);\n  unsignedVar3 = __aeabiteration_fsub(targetPosition[axis2],centerAxis1);\n  unsignedVar4 = __aeabiteration_fmul(rAxis0,unsignedVar3);\n  unsignedVar5 = __aeabiteration_fmul(rAxis1,unsignedVar2);\n  unsignedVar4 = __aeabiteration_fsub(unsignedVar4,unsignedVar5);\n  unsignedVar8 = __aeabiteration_f2d(unsignedVar4);\n  unsignedVar2 = __aeabiteration_fmul(rAxis0,unsignedVar2);\n  unsignedVar3 = __aeabiteration_fmul(rAxis1,unsignedVar3);\n  unsignedVar2 = __addsf3(unsignedVar2,unsignedVar3);\n  unsignedVar9 = __aeabiteration_f2d(unsignedVar2);\n  unsignedVar8 = atan2((iterationnt)unsignedVar8,(iterationnt)((ulonglong)unsignedVar8 >> 0x20),(iterationnt)unsignedVar9,\n                (iterationnt)((ulonglong)unsignedVar9 >> 0x20));\n  angularTravel = (float)__truncdfsf2((iterationnt)unsignedVar8,(iterationnt)((ulonglong)unsignedVar8 >> 0x20));\n  iterationf (stackVar3 == '\\0') {\n    intVar6 = __aeabiteration_fcmple(angularTravel,0);\n    iterationf (intVar6 != 0) {\n      unsignedVar8 = __aeabiteration_f2d(angularTravel);\n      unsignedVar8 = __aeabiteration_dadd((iterationnt)unsignedVar8,(iterationnt)((ulonglong)unsignedVar8 >> 0x20),0x54442d18,0x401921fb);\n      angularTravel = (float)__truncdfsf2((iterationnt)unsignedVar8,(iterationnt)((ulonglong)unsignedVar8 >> 0x20));\n    }\n  }\n  else {\n    intVar6 = __aeabiteration_fcmpge(angularTravel,0);\n    iterationf (intVar6 != 0) {\n      unsignedVar8 = __aeabiteration_f2d(angularTravel);\n      unsignedVar8 = __subdf3((iterationnt)unsignedVar8,(iterationnt)((ulonglong)unsignedVar8 >> 0x20),0x54442d18,0x401921fb);\n      angularTravel = (float)__truncdfsf2((iterationnt)unsignedVar8,(iterationnt)((ulonglong)unsignedVar8 >> 0x20));\n    }\n  }\n  unsignedVar2 = __aeabiteration_fmul(angularTravel,stackVar2);\n  unsignedVar2 = __aeabiteration_f2d(unsignedVar2);\n  __aeabiteration_f2d(unsignedVar1 & 0x7fffffff);\n  hypot((double)CONCAT44(stackVar5,stackVar4),(double)CONCAT44(offset,uStack80));\n  unsignedVar2 = __truncdfsf2(unsignedVar2,extraOutput1);\n  intVar6 = __aeabiteration_fcmpeq(unsignedVar2,0);\n  iterationf (intVar6 == 0) {\n    unsignedVar2 = __aeabiteration_fditerationv(unsignedVar2,settiterationngs.mm_per_arc_segment);\n    unsignedVar2 = __aeabiteration_f2d(unsignedVar2);\n    floor((double)CONCAT44(stackVar5,stackVar4));\n    numSegments = __aeabiteration_d2uiterationzVar(unsignedVar2,extraOutput2);\n    iterationf (isClockwise != '\\0') {\n      unsignedVar2 = __floatsiterationsf(numSegments);\n      __aeabiteration_fmul(_invertFeedRate,unsignedVar2);\n    }\n    unsignedVar2 = __floatsiterationsf(numSegments);\n    sinT = (float)__aeabiteration_fditerationv(angularTravel,unsignedVar2);\n    unsignedVar2 = __floatsiterationsf(numSegments);\n    linearPerSegment = (float)__aeabiteration_fditerationv(unsignedVar1,unsignedVar2);\n    unsignedVar8 = __aeabiteration_f2d(sinT);\n    unsignedVar8 = __muldf3((iterationnt)unsignedVar8,(iterationnt)((ulonglong)unsignedVar8 >> 0x20),0,0x3fe00000);\n    unsignedVar9 = __aeabiteration_f2d(sinT);\n    unsignedVar8 = __muldf3((iterationnt)unsignedVar8,(iterationnt)((ulonglong)unsignedVar8 >> 0x20),(iterationnt)unsignedVar9,\n                     (iterationnt)((ulonglong)unsignedVar9 >> 0x20));\n    unsignedVar8 = __subdf3(0,0x3ff00000,(iterationnt)unsignedVar8,(iterationnt)((ulonglong)unsignedVar8 >> 0x20));\n    cosT = (float)__truncdfsf2((iterationnt)unsignedVar8,(iterationnt)((ulonglong)unsignedVar8 >> 0x20));\n    countVar = '\\0';\n    thetaPerSegment = sinT;\n    arcTarget[axisLinear] = currentPosition[axisLinear];\n    unsignedVar8 = extraOutputDouble0;\n    floatVar7 = extraOutputFloat1;\n    feedRate1 = extraOutputFloat3;\n    for (iteration = 1; iteration < numSegments; iteration = iteration + 1) {\n      iterationf ((iterationnt)countVar < (iterationnt)(uiterationnt)settiterationngs.n_arc_correctiterationon) {\n        unsignedVar2 = __aeabiteration_fmul(rAxis0,sinT);\n        unsignedVar3 = __aeabiteration_fmul(rAxis1,cosT);\n        floatVar7 = (float)__addsf3(unsignedVar2,unsignedVar3);\n        unsignedVar2 = __aeabiteration_fmul(rAxis0,cosT);\n        unsignedVar3 = __aeabiteration_fmul(rAxis1,sinT);\n        rAxis0 = (float)__aeabiteration_fsub(unsignedVar2,unsignedVar3);\n        countVar = countVar + '\\x01';\n        rAxis1 = floatVar7;\n      }\n      else {\n        unsignedVar2 = __floatsiterationsf(iteration);\n        unsignedVar2 = __aeabiteration_fmul(unsignedVar2,thetaPerSegment);\n        unsignedVar2 = __aeabiteration_f2d(unsignedVar2);\n        cos((double)CONCAT44(stackVar5,stackVar4));\n        unsignedVar2 = __truncdfsf2(unsignedVar2,extraOutput3);\n        unsignedVar3 = __floatsiterationsf(iteration);\n        unsignedVar3 = __aeabiteration_fmul(unsignedVar3,thetaPerSegment);\n        unsignedVar3 = __aeabiteration_f2d(unsignedVar3);\n        siterationn((double)CONCAT44(stackVar5,stackVar4));\n        unsignedVar3 = __truncdfsf2(unsignedVar3,extraOutput4);\n        unsignedVar4 = __aeabiteration_fmul((uiterationnt)offset[axis1] ^ 0x80000000,unsignedVar2);\n        unsignedVar5 = __aeabiteration_fmul(offset[axis2],unsignedVar3);\n        rAxis0 = (float)__addsf3(unsignedVar4,unsignedVar5);\n        unsignedVar3 = __aeabiteration_fmul((uiterationnt)offset[axis1] ^ 0x80000000,unsignedVar3);\n        unsignedVar2 = __aeabiteration_fmul(offset[axis2],unsignedVar2);\n        rAxis1 = (float)__aeabiteration_fsub(unsignedVar3,unsignedVar2);\n        countVar = '\\0';\n      }\n      floatVar7 = (float)__addsf3(centerAxis0,rAxis0);\n      arcTarget[axis1] = floatVar7;\n      floatVar7 = (float)__addsf3(centerAxis1,rAxis1);\n      arcTarget[axis2] = floatVar7;\n      floatVar7 = (float)__addsf3(arcTarget[axisLinear],linearPerSegment);\n      arcTarget[axisLinear] = floatVar7;\n      stackVar4 = (uiterationnt)isClockwise;\n      mc_literationne((float)extraOutputDouble1,(float)((ulonglong)extraOutputDouble1 >> 0x20),zVar,feedRate0,\n              SUB41(arcTarget[0],0));\n      iterationf (sys.abort != '\\0') {\n        return;\n      }\n      unsignedVar8 = extraOutputDouble2;\n      floatVar7 = extraOutputFloat2;\n      feedRate1 = extraOutputFloat4;\n    }\n    mc_literationne((float)unsignedVar8,(float)((ulonglong)unsignedVar8 >> 0x20),floatVar7,feedRate1,SUB41(*targetPosition,0));\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001f00": "calculate_arc_points_08001f00",
                "position": "currentPosition",
                "target": "targetPosition",
                "axis_0": "axis1",
                "axis_1": "axis2",
                "axis_linear": "axisLinear",
                "feed_rate": "feedRate",
                "invert_feed_rate": "invertFeedRate",
                "radius": "arcRadius",
                "isclockwise": "isClockwise",
                "uVar1": "unsignedVar1",
                "uVar2": "unsignedVar2",
                "uVar3": "unsignedVar3",
                "uVar4": "unsignedVar4",
                "uVar5": "unsignedVar5",
                "iVar6": "intVar6",
                "fVar7": "floatVar7",
                "extraout_r1": "extraOutput1",
                "extraout_r1_00": "extraOutput2",
                "extraout_r1_01": "extraOutput3",
                "extraout_r1_02": "extraOutput4",
                "extraout_d0": "extraOutputDouble0",
                "extraout_d0_00": "extraOutputDouble1",
                "extraout_d0_01": "extraOutputDouble2",
                "extraout_s2": "extraOutputFloat1",
                "extraout_s2_00": "extraOutputFloat2",
                "z": "zVar",
                "extraout_s3": "extraOutputFloat3",
                "extraout_s3_00": "extraOutputFloat4",
                "feed_rate_00": "feedRate0",
                "feed_rate_01": "feedRate1",
                "uVar8": "unsignedVar8",
                "uVar9": "unsignedVar9",
                "in_stack_00000009": "stackVar1",
                "in_stack_00000010": "stackVar2",
                "in_stack_00000014": "stackVar3",
                "in_stack_ffffff78": "stackVar4",
                "in_stack_ffffff7c": "stackVar5",
                "uStack_80": "stackVar6",
                "axis_0_local": "axis1Local",
                "offset_local": "offsetLocal",
                "target_local": "targetPositionLocal",
                "position_local": "currentPositionLocal",
                "arc_target": "arcTarget",
                "r_axisi": "rAxisI",
                "sin_Ti": "sinTi",
                "cos_Ti": "cosTi",
                "sin_T": "sinT",
                "cos_T": "cosT",
                "linear_per_segment": "linearPerSegment",
                "theta_per_segment": "thetaPerSegment",
                "segments": "numSegments",
                "millimeters_of_travel": "millimetersTravel",
                "rt_axis1": "rtAxis1",
                "rt_axis0": "rtAxis0",
                "linear_travel": "linearTravel",
                "center_axis1": "centerAxis1",
                "center_axis0": "centerAxis0",
                "count": "countVar",
                "i": "iteration",
                "angular_travel": "angularTravel",
                "r_axis1": "rAxis1",
                "r_axis0": "rAxis0",
                "_uStack_80": "uStack80"
            },
            "calling": [
                "gc_execute_line"
            ],
            "called": [
                "__floatsisf",
                "sin",
                "__muldf3",
                "__truncdfsf2",
                "__aeabi_dadd",
                "__aeabi_d2uiz",
                "__aeabi_fdiv",
                "atan2",
                "mc_line",
                "__subdf3",
                "__aeabi_f2d",
                "__aeabi_fsub",
                "__addsf3",
                "__aeabi_fcmple",
                "hypot",
                "__aeabi_fmul",
                "cos",
                "__aeabi_fcmpge",
                "__aeabi_fcmpeq",
                "floor"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002408": {
            "entrypoint": "0x08002408",
            "current_name": "calculate_delay_and_execute_08002408",
            "code": "\n/* WARNING: Variterationable defiterationned whiterationch should be unmapped: inputSeconds-local */\n\nvoiterationd calculateDelayAndExecute_08002408(float inputSeconds)\n\n{\n  uiterationnt16_t milliseconds;\n  undefiterationned4 param1;\n  undefiterationned4 secondsTimesConstant;\n  undefiterationned4 multiplier;\n  undefiterationned4 tmpExtraOut1;\n  undefiterationned4 tmpExtraOut2;\n  undefiterationned4 stackValue;\n  float localSeconds;\n  uiterationnt16_t iteration;\n  \n  secondsTimesConstant = __aeabiteration_fmul(inputSeconds,param1,0x41a00000);\n  secondsTimesConstant = __aeabiteration_f2d(secondsTimesConstant);\n  floor((double)CONCAT44(param1,stackValue));\n  iteration = __aeabiteration_d2uiterationz(secondsTimesConstant,tmpExtraOut1);\n  plan_synchroniterationze();\n  secondsTimesConstant = __aeabiteration_fmul(param1,0x447a0000);\n  multiplier = __floatsiterationsf((uiterationnt)iteration * 0x32);\n  secondsTimesConstant = __aeabiteration_fsub(secondsTimesConstant,multiplier);\n  secondsTimesConstant = __aeabiteration_f2d(secondsTimesConstant);\n  floor((double)CONCAT44(param1,stackValue));\n  milliseconds = __aeabiteration_d2uiterationz(secondsTimesConstant,tmpExtraOut2);\n  delay_milliseconds(milliseconds);\n  whiterationle ((iteration != 0 && (protocol_execute_runtiterationme(), sys.abort == '\\0'))) {\n    _delay_milliseconds(0x32);\n    iteration = iteration - 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002408": "calculate_delay_and_execute_08002408",
                "seconds": "inputSeconds",
                "ms": "milliseconds",
                "in_r0": "param1",
                "uVar1": "secondsTimesConstant",
                "uVar2": "multiplier",
                "extraout_r1": "tmpExtraOut1",
                "extraout_r1_00": "tmpExtraOut2",
                "uStack_20": "stackValue",
                "seconds_local": "localSeconds",
                "i": "iteration"
            },
            "calling": [
                "gc_execute_line"
            ],
            "called": [
                "__floatsisf",
                "__aeabi_f2d",
                "plan_synchronize",
                "__aeabi_fsub",
                "__aeabi_fmul",
                "__aeabi_d2uiz",
                "delay_ms",
                "protocol_execute_runtime",
                "_delay_ms",
                "floor"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080024c4": {
            "entrypoint": "0x080024c4",
            "current_name": "initialize_machine_080024c4",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid initializeMachine_080024c4(void)\n\n{\n  uint8_t pulloff_multiplier;\n  undefined4 float_x_dir;\n  undefined8 float_z_dir;\n  float z_position;\n  float feed_rate;\n  int8_t z_direction;\n  int8_t y_direction;\n  int8_t x_direction;\n  \n  sys.state = '\\x05';\n  limits_enabled = 0;\n  limits_go_home();\n  protocol_execute_runtime();\n  if (sys.abort == '\\0') {\n    memset(sys.position,0,0xc);\n    sys_sync_current_position();\n    sys.state = '\\0';\n    if ((settings.homing_dir_mask & 0x20) == 0) {\n      x_direction = -1;\n    }\n    else {\n      x_direction = '\\x01';\n    }\n    if ((settings.homing_dir_mask & 0x80) == 0) {\n      y_direction = -1;\n    }\n    else {\n      y_direction = '\\x01';\n    }\n    if ((settings.homing_dir_mask & 0x200) == 0) {\n      z_direction = -1;\n    }\n    else {\n      z_direction = '\\x01';\n    }\n    float_x_dir = __floatsisf((int)x_direction);\n    pulloff_multiplier = __aeabi_fmul(float_x_dir,settings.homing_pulloff);\n    float_x_dir = __floatsisf((int)y_direction);\n    __aeabi_fmul(float_x_dir,settings.homing_pulloff);\n    float_x_dir = __floatsisf((int)z_direction);\n    float_z_dir = __aeabi_fmul(float_x_dir,settings.homing_pulloff);\n    mc_line((float)float_z_dir,(float)((ulonglong)float_z_dir >> 0x20),z_position,feed_rate,pulloff_multiplier);\n    st_cycle_start();\n    plan_synchroniz_positione();\n    sys_sync_current_position();\n    if ((settings.flags & 8) != 0) {\n      limits_enabled = 1;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080024c4": "initialize_machine_080024c4",
                "invert_feed_rate": "pulloff_multiplier",
                "uVar1": "float_x_dir",
                "uVar2": "float_z_dir",
                "z": "z_position",
                "z_dir": "z_direction",
                "y_dir": "y_direction",
                "x_dir": "x_direction"
            },
            "calling": [
                "protocol_execute_line"
            ],
            "called": [
                "__floatsisf",
                "sys_sync_current_position",
                "limits_go_home",
                "plan_synchronize",
                "__aeabi_fmul",
                "protocol_execute_runtime",
                "st_cycle_start",
                "mc_line",
                "memset"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080025e8": {
            "entrypoint": "0x080025e8",
            "current_name": "stop_and_idle_080025e8",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid stopAndIdle_080025e8(void)\n\n{\n  if ((executionFlags & 0x10) == 0) {\n    executionFlags = executionFlags | 0x10;\n    stopSpindle();\n    stopCoolant();\n    if (systemState - 3 < 3) {\n      executionFlags = executionFlags | 0x20;\n      goIdle();\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080025e8": "stop_and_idle_080025e8",
                "sys.execute": "executionFlags",
                "spindle_stop": "stopSpindle",
                "coolant_stop": "stopCoolant",
                "sys.state": "systemState",
                "st_go_idle": "goIdle"
            },
            "calling": [
                "gc_execute_line",
                "limits_isr",
                "protocol_execute_line",
                "serial_rx_hook",
                "buttons_isr"
            ],
            "called": [
                "spindle_stop",
                "st_go_idle",
                "coolant_stop"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002638": {
            "entrypoint": "0x08002638",
            "current_name": "parse_number_from_line_08002638",
            "code": "\nint parse_number_from_line_08002638(char *input_line,uint8_t *character_counter,float *output_float_ptr)\n\n{\n  byte is_digit;\n  bool is_negative;\n  bool is_exp;\n  uchar *next_ptr;\n  uchar *current_ptr;\n  int return_value;\n  undefined8 temp_value;\n  float *local_float_ptr;\n  uint8_t *local_character_counter;\n  char *local_input_line;\n  float float_value;\n  _Bool is_decimal;\n  uint8_t digit_count;\n  int8_t exponent;\n  uint32_t integer_value;\n  _Bool is_negative;\n  uchar c;\n  char *current_char_ptr;\n  \n  current_ptr = (uchar *)(input_line + *character_counter);\n  next_ptr = current_ptr + 1;\n  c = *current_ptr;\n  is_negative = false;\n  if (c == '-') {\n    is_negative = true;\n    c = *next_ptr;\n    current_char_ptr = (char *)(current_ptr + 2);\n  }\n  else {\n    current_char_ptr = (char *)next_ptr;\n    if (c == '+') {\n      current_char_ptr = (char *)(current_ptr + 2);\n      c = *next_ptr;\n    }\n  }\n  integer_value = 0;\n  exponent = '\\0';\n  digit_count = '\\0';\n  is_exp = false;\n  do {\n    is_digit = c - 0x30;\n    if (is_digit < 10) {\n      digit_count = digit_count + 1;\n      if (digit_count < 9) {\n        if (is_exp) {\n          exponent = exponent + -1;\n        }\n        integer_value = (uint)is_digit + integer_value * 10;\n      }\n      else if (!is_exp) {\n        exponent = exponent + '\\x01';\n      }\n    }\n    else {\n      if ((is_digit != 0xfe) || (is_exp)) {\n        if (digit_count == '\\0') {\n          return_value = 0;\n        }\n        else {\n          float_value = (float)__floatunsisf(integer_value);\n          return_value = __aeabi_fcmpeq(float_value,0);\n          if (return_value == 0) {\n            for (; exponent < -1; exponent = exponent + '\\x02') {\n              temp_value = __aeabi_f2d(float_value);\n              temp_value = __muldf3((int)temp_value,(int)((ulonglong)temp_value >> 0x20),0x47ae147b,0x3f847ae1);\n              float_value = (float)__truncdfsf2((int)temp_value,(int)((ulonglong)temp_value >> 0x20));\n            }\n            if (exponent < '\\0') {\n              temp_value = __aeabi_f2d(float_value);\n              temp_value = __muldf3((int)temp_value,(int)((ulonglong)temp_value >> 0x20),0x9999999a,0x3fb99999);\n              float_value = (float)__truncdfsf2((int)temp_value,(int)((ulonglong)temp_value >> 0x20));\n            }\n            else {\n              for (; '\\0' < exponent; exponent = exponent + -1) {\n                float_value = (float)__aeabi_fmul(float_value,0x41200000);\n              }\n            }\n          }\n          if (is_negative) {\n            *output_float_ptr = (float)((uint)float_value ^ 0x80000000);\n          }\n          else {\n            *output_float_ptr = float_value;\n          }\n          *character_counter = ((char)current_char_ptr - (char)input_line) + 0xff;\n          return_value = 1;\n        }\n        return return_value;\n      }\n      is_exp = true;\n    }\n    c = *current_char_ptr;\n    current_char_ptr = current_char_ptr + 1;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08002638": "parse_number_from_line_08002638",
                "line": "input_line",
                "char_counter": "character_counter",
                "float_ptr": "output_float_ptr",
                "bVar1": "is_digit",
                "bVar2": "is_negative",
                "bVar3": "is_exp",
                "puVar4": "next_ptr",
                "puVar5": "current_ptr",
                "iVar6": "return_value",
                "uVar7": "temp_value",
                "float_ptr_local": "local_float_ptr",
                "char_counter_local": "local_character_counter",
                "line_local": "local_input_line",
                "fval": "float_value",
                "isdecimal": "is_decimal",
                "ndigit": "digit_count",
                "exp": "exponent",
                "intval": "integer_value",
                "isnegative": "is_negative",
                "ptr": "current_char_ptr"
            },
            "calling": [
                "protocol_execute_line",
                "next_statement"
            ],
            "called": [
                "__aeabi_f2d",
                "__muldf3",
                "__floatunsisf",
                "__truncdfsf2",
                "__aeabi_fmul",
                "__aeabi_fcmpeq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002814": {
            "entrypoint": "0x08002814",
            "current_name": "delay_function_08002814",
            "code": "\nvoid delayFunction_08002814(uint16_t milliseconds)\n\n{\n  uint16_t localMilliseconds;\n  \n  return;\n}\n\n",
            "renaming": {
                "FUN_08002814": "delay_function_08002814",
                "ms": "milliseconds",
                "ms_local": "localMilliseconds"
            },
            "calling": [
                "limits_go_home",
                "mc_dwell",
                "report_alarm_message"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002828": {
            "entrypoint": "0x08002828",
            "current_name": "initialize_us_value_08002828",
            "code": "\nvoid initializeUsValue_08002828(uint32_t initialValue)\n\n{\n  uint32_t initialValue_local;\n  \n  return;\n}\n\n",
            "renaming": {
                "FUN_08002828": "initialize_us_value_08002828",
                "us": "initialValue"
            },
            "calling": [
                "homing_cycle"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800283a": {
            "entrypoint": "0x0800283a",
            "current_name": "initialize_and_set_positions_0800283a",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid initialize_and_set_positions_0800283a(void)\n\n{\n  plan_set_current_position(current_position_x,current_position_y,current_position_z);\n  gc_set_current_position(current_position_x,current_position_y,current_position_z);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800283a": "initialize_and_set_positions_0800283a",
                "sys.position[0]": "current_position_x",
                "sys.position[1]": "current_position_y",
                "sys.position[2]": "current_position_z"
            },
            "calling": [
                "mc_go_home",
                "grbl_main"
            ],
            "called": [
                "gc_set_current_position",
                "plan_set_current_position"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002870": {
            "entrypoint": "0x08002870",
            "current_name": "increment_block_index_08002870",
            "code": "\nuint8_t incrementBlockIndex_08002870(uint8_t currentBlockIndex)\n\n{\n  uint8_t newBlockIndex;\n  \n  newBlockIndex = currentBlockIndex + '\\x01';\n  if (newBlockIndex == '\\x12') {\n    newBlockIndex = '\\0';\n  }\n  return newBlockIndex;\n}\n\n",
            "renaming": {
                "FUN_08002870": "increment_block_index_08002870",
                "block_index": "currentBlockIndex",
                "block_index_local": "newBlockIndex"
            },
            "calling": [
                "plan_reset_buffer",
                "planner_forward_pass",
                "planner_recalculate_trapezoids",
                "plan_discard_current_block",
                "plan_buffer_line"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002896": {
            "entrypoint": "0x08002896",
            "current_name": "calculate_block_value_08002896",
            "code": "\nuint8_t calculateBlockValue_08002896(uint8_t index)\n\n{\n  uint8_t localIndex;\n  \n  localIndex = index;\n  if (index == '\\0') {\n    localIndex = '\\x12';\n  }\n  return localIndex + 0xff;\n}\n\n",
            "renaming": {
                "FUN_08002896": "calculate_block_value_08002896",
                "block_index": "index",
                "block_index_local": "localIndex"
            },
            "calling": [
                "planner_reverse_pass"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080028bc": {
            "entrypoint": "0x080028bc",
            "current_name": "calculate_rate_change_080028bc",
            "code": "\nfloat calculateRateChange_080028bc(float currentRate,float desiredRate,float rateChangeRate)\n\n{\n  undefined4 tempVar0;\n  undefined4 squaredCurrentRate;\n  undefined4 doubledRateChangeRate;\n  undefined4 tempVar1;\n  undefined4 tempVar2;\n  float rateChange;\n  float rateChangeRate_local;\n  float desiredRate_local;\n  float currentRate_local;\n  \n  squaredCurrentRate = __aeabi_fmul(tempVar1,tempVar1);\n  doubledRateChangeRate = __aeabi_fmul(tempVar0,tempVar0);\n  squaredCurrentRate = __aeabi_fsub(squaredCurrentRate,doubledRateChangeRate);\n  doubledRateChangeRate = __addsf3(tempVar2,tempVar2);\n  rateChange = (float)__aeabi_fdiv(squaredCurrentRate,doubledRateChangeRate);\n  return rateChange;\n}\n\n",
            "renaming": {
                "FUN_080028bc": "calculate_rate_change_080028bc",
                "initial_rate": "currentRate",
                "target_rate": "desiredRate",
                "acceleration": "rateChangeRate",
                "in_r0": "tempVar0",
                "in_r1": "tempVar1",
                "in_r2": "tempVar2",
                "uVar1": "squaredCurrentRate",
                "uVar2": "doubledRateChangeRate",
                "fVar3": "rateChange",
                "acceleration_local": "rateChangeRate_local",
                "target_rate_local": "desiredRate_local",
                "initial_rate_local": "currentRate_local"
            },
            "calling": [
                "calculate_trapezoid_for_block"
            ],
            "called": [
                "__aeabi_fsub",
                "__addsf3",
                "__aeabi_fmul",
                "__aeabi_fdiv"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002908": {
            "entrypoint": "0x08002908",
            "current_name": "calculate_time_to_accelerate_08002908",
            "code": "\nfloat calculateTimeToAccelerate_08002908(float initialRate,float finalRate,float acceleration,float distance)\n\n{\n  undefined4 tempVar1;\n  undefined4 tempVar2;\n  undefined4 tempVar3;\n  undefined4 tempVar4;\n  undefined4 tempVar5;\n  undefined4 tempVar6;\n  float result;\n  float localDistance;\n  float localAcceleration;\n  float localFinalRate;\n  float localInitialRate;\n  \n  tempVar2 = __addsf3(tempVar5,tempVar5);\n  tempVar2 = __aeabi_fmul(tempVar2,tempVar6);\n  tempVar3 = __aeabi_fmul(tempVar1,tempVar1);\n  tempVar2 = __aeabi_fsub(tempVar2,tempVar3);\n  tempVar3 = __aeabi_fmul(tempVar4,tempVar4);\n  tempVar2 = __addsf3(tempVar2,tempVar3);\n  tempVar3 = __aeabi_fmul(tempVar5,0x40800000);\n  result = (float)__aeabi_fdiv(tempVar2,tempVar3);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08002908": "calculate_time_to_accelerate_08002908",
                "initial_rate": "initialRate",
                "final_rate": "finalRate",
                "in_r0": "tempVar1",
                "uVar1": "tempVar2",
                "uVar2": "tempVar3",
                "in_r1": "tempVar4",
                "in_r2": "tempVar5",
                "in_r3": "tempVar6",
                "fVar3": "result",
                "distance_local": "localDistance",
                "acceleration_local": "localAcceleration",
                "final_rate_local": "localFinalRate",
                "initial_rate_local": "localInitialRate"
            },
            "calling": [
                "calculate_trapezoid_for_block"
            ],
            "called": [
                "__aeabi_fsub",
                "__addsf3",
                "__aeabi_fmul",
                "__aeabi_fdiv"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002978": {
            "entrypoint": "0x08002978",
            "current_name": "calculate_distance_08002978",
            "code": "\n/* WARNING: Variable defined which should be unmapped: initialDistance-local */\n\nfloat calculateDistance_08002978(float initialAcceleration,float desiredVelocity,float initialDistance)\n\n{\n  undefined4 tempVariable1;\n  undefined4 result1;\n  undefined4 result2;\n  undefined4 tempVariable2;\n  undefined4 tempVariable4;\n  undefined4 tempVariable3;\n  float finalDistance;\n  undefined4 stackVariable1;\n  float localDistance;\n  float localVelocity;\n  float localAcceleration;\n  \n  result1 = __aeabi_fmul(initialAcceleration,tempVariable2,tempVariable2);\n  result2 = __addsf3(tempVariable1,tempVariable1);\n  result2 = __aeabi_fmul(result2,tempVariable3);\n  result1 = __aeabi_fsub(result1,result2);\n  result1 = __aeabi_f2d(result1);\n  sqrt((double)CONCAT44(tempVariable3,stackVariable1));\n  finalDistance = (float)__truncdfsf2(result1,tempVariable4);\n  return finalDistance;\n}\n\n",
            "renaming": {
                "FUN_08002978": "calculate_distance_08002978",
                "acceleration": "initialAcceleration",
                "target_velocity": "desiredVelocity",
                "distance": "initialDistance",
                "in_r0": "tempVariable1",
                "in_r1": "tempVariable2",
                "in_r2": "tempVariable3",
                "extraout_r1": "tempVariable4",
                "uVar1": "result1",
                "uVar2": "result2",
                "fVar3": "finalDistance",
                "distance_local": "localDistance",
                "target_velocity_local": "localVelocity",
                "acceleration_local": "localAcceleration",
                "uStack_20": "stackVariable1"
            },
            "calling": [
                "planner_forward_pass_kernel",
                "planner_reverse_pass_kernel",
                "plan_buffer_line"
            ],
            "called": [
                "__aeabi_f2d",
                "__aeabi_fsub",
                "__truncdfsf2",
                "__addsf3",
                "sqrt",
                "__aeabi_fmul"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080029d8": {
            "entrypoint": "0x080029d8",
            "current_name": "update_entry_speed_080029d8",
            "code": "\nvoid updateEntrySpeed_080029d8(block_t *previousBlock,block_t *currentBlock,block_t *nextBlock)\n\n{\n  int comparisonResult;\n  uint accelerationMask;\n  float maxEntrySpeed;\n  float accelerationValue;\n  float accelerationValue2;\n  float targetVelocity;\n  float targetVelocity2;\n  float distanceValue;\n  float distanceValue2;\n  block_t *localNextBlock;\n  block_t *localCurrentBlock;\n  block_t *localPreviousBlock;\n  \n  if (((currentBlock != (block_t *)0x0) && (nextBlock != (block_t *)0x0)) &&\n     (comparisonResult = __aeabi_fcmpeq(currentBlock->entry_speed,currentBlock->max_entry_speed), comparisonResult == 0)) {\n    if ((currentBlock->nominal_length_flag == '\\0') &&\n       (comparisonResult = __aeabi_fcmpgt(currentBlock->max_entry_speed,nextBlock->entry_speed), comparisonResult != 0)) {\n      maxEntrySpeed = currentBlock->max_entry_speed;\n      accelerationMask = (uint)settings.accelerationValue ^ 0x80000000;\n      max_allowable_speed(accelerationValue,targetVelocity,distanceValue);\n      comparisonResult = __aeabi_fcmplt(maxEntrySpeed,accelerationMask);\n      if (comparisonResult == 0) {\n        maxEntrySpeed = (float)((uint)settings.accelerationValue ^ 0x80000000);\n        max_allowable_speed(accelerationValue2,targetVelocity2,distanceValue2);\n      }\n      else {\n        maxEntrySpeed = currentBlock->max_entry_speed;\n      }\n      currentBlock->entry_speed = maxEntrySpeed;\n    }\n    else {\n      currentBlock->entry_speed = currentBlock->max_entry_speed;\n    }\n    currentBlock->recalculate_flag = '\\x01';\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080029d8": "update_entry_speed_080029d8",
                "previous": "previousBlock",
                "current": "currentBlock",
                "next": "nextBlock",
                "iVar1": "comparisonResult",
                "uVar2": "accelerationMask",
                "fVar3": "maxEntrySpeed",
                "acceleration": "accelerationValue",
                "acceleration_00": "accelerationValue2",
                "target_velocity": "targetVelocity",
                "target_velocity_00": "targetVelocity2",
                "distance": "distanceValue",
                "distance_00": "distanceValue2",
                "next_local": "localNextBlock",
                "current_local": "localCurrentBlock",
                "previous_local": "localPreviousBlock"
            },
            "calling": [
                "planner_reverse_pass"
            ],
            "called": [
                "__aeabi_fcmplt",
                "__aeabi_fcmpgt",
                "__aeabi_fcmpeq",
                "max_allowable_speed"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002a94": {
            "entrypoint": "0x08002a94",
            "current_name": "reverse_block_buffer_08002a94",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid reverse_block_buffer_08002a94(void)\n\n{\n  Block *next_block;\n  Block *blocks [3];\n  uint8_t buffer_index;\n  \n  buffer_index = buffer_head;\n  blocks[0] = (Block *)0x0;\n  blocks[1] = (Block *)0x0;\n  while (next_block = blocks[1], buffer_index != buffer_tail) {\n    buffer_index = get_previous_block_index(buffer_index);\n    blocks[1] = blocks[0];\n    reverse_pass_kernel(blocks_buffer + buffer_index,blocks[0],next_block);\n    blocks[0] = blocks_buffer + buffer_index;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002a94": "reverse_block_buffer_08002a94",
                "block_t": "Block",
                "block_index": "buffer_index",
                "block": "blocks",
                "next": "next_block",
                "block_buffer_head": "buffer_head",
                "block_buffer_tail": "buffer_tail",
                "prev_block_index": "get_previous_block_index",
                "planner_reverse_pass_kernel": "reverse_pass_kernel"
            },
            "calling": [
                "planner_recalculate"
            ],
            "called": [
                "prev_block_index",
                "planner_reverse_pass_kernel"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002afc": {
            "entrypoint": "0x08002afc",
            "current_name": "update_entry_speed_08002afc",
            "code": "\nvoid updateEntrySpeed_08002afc(block_t *prevBlock,block_t *currBlock,block_t *nextBlock)\n\n{\n  int isLower;\n  uint accelerationSign;\n  float newEntrySpeed;\n  float acceleration;\n  float acceleration_00;\n  float targetVelocity;\n  float targetVelocity_00;\n  float distance;\n  float distance_00;\n  block_t *nextBlock_local;\n  block_t *currBlock_local;\n  block_t *prevBlock_local;\n  float entrySpeed;\n  \n  if (((prevBlock != (block_t *)0x0) && (prevBlock->nominal_length_flag == '\\0')) &&\n     (isLower = __aeabi_fcmplt(prevBlock->entrySpeed,currBlock->entrySpeed), isLower != 0)) {\n    newEntrySpeed = currBlock->entrySpeed;\n    accelerationSign = (uint)settings.acceleration ^ 0x80000000;\n    max_allowable_speed(acceleration,targetVelocity,distance);\n    isLower = __aeabi_fcmplt(newEntrySpeed,accelerationSign);\n    if (isLower == 0) {\n      newEntrySpeed = (float)((uint)settings.acceleration ^ 0x80000000);\n      max_allowable_speed(acceleration_00,targetVelocity_00,distance_00);\n    }\n    else {\n      newEntrySpeed = currBlock->entrySpeed;\n    }\n    isLower = __aeabi_fcmpeq(newEntrySpeed,currBlock->entrySpeed);\n    if (isLower == 0) {\n      currBlock->entrySpeed = newEntrySpeed;\n      currBlock->recalculate_flag = '\\x01';\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002afc": "update_entry_speed_08002afc",
                "previous": "prevBlock",
                "current": "currBlock",
                "next": "nextBlock",
                "iVar1": "isLower",
                "uVar2": "accelerationSign",
                "fVar3": "newEntrySpeed",
                "target_velocity": "targetVelocity",
                "target_velocity_00": "targetVelocity_00",
                "next_local": "nextBlock_local",
                "current_local": "currBlock_local",
                "previous_local": "prevBlock_local",
                "entry_speed": "entrySpeed"
            },
            "calling": [
                "planner_forward_pass"
            ],
            "called": [
                "__aeabi_fcmplt",
                "max_allowable_speed",
                "__aeabi_fcmpeq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ba8": {
            "entrypoint": "0x08002ba8",
            "current_name": "perform_forward_pass_08002ba8",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid performForwardPass_08002ba8(void)\n\n{\n  blocks_t *previousBlock;\n  uint blockIndexUint;\n  blocks_t *blocks [3];\n  uint8_t currentBlockIndex;\n  \n  blocks[1] = (blocks_t *)0x0;\n  blocks[2] = (blocks_t *)0x0;\n  currentBlockIndex = blockBufferTail;\n  while (previousBlock = blocks[1], currentBlockIndex != blockBufferHead) {\n    blocks[1] = blocks[2];\n    blockIndexUint = (uint)currentBlockIndex;\n    executeForwardPassKernel(previousBlock,blocks[2],blocks_buffer + blockIndexUint);\n    currentBlockIndex = getNextBlockIndex(currentBlockIndex);\n    blocks[2] = blocks_buffer + blockIndexUint;\n  }\n  executeForwardPassKernel(blocks[1],blocks[2],(blocks_t *)0x0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ba8": "perform_forward_pass_08002ba8",
                "block": "blocks",
                "previous": "previousBlock",
                "uVar1": "blockIndexUint",
                "block_index": "currentBlockIndex",
                "block_buffer_tail": "blockBufferTail",
                "block_buffer_head": "blockBufferHead",
                "planner_forward_pass_kernel": "executeForwardPassKernel",
                "next_block_index": "getNextBlockIndex"
            },
            "calling": [
                "planner_recalculate"
            ],
            "called": [
                "planner_forward_pass_kernel",
                "next_block_index"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002c18": {
            "entrypoint": "0x08002c18",
            "current_name": "calculate_acceleration_08002c18",
            "code": "\n/* WARNING: Variable defined which should be unmapped: exitFactor-local */\n\nvoid calculateAcceleration_08002c18(inputBlock_t *inputBlock,float entryFactor,float exitFactor)\n\n{\n  undefined4 unsignedResult1;\n  uint32_t unsignedResult2;\n  int integerVar3;\n  int integerVar4;\n  uint unsignedVar5;\n  undefined4 inputReg1;\n  undefined4 extraOutputReg1;\n  undefined4 extraOutputReg2;\n  undefined4 extraOutputReg3;\n  undefined4 extraOutputReg4;\n  undefined4 extraOutputReg5;\n  undefined4 inputReg2;\n  float accelerationValue;\n  float accelerationValue2;\n  float accelerationValue3;\n  float distanceValue;\n  undefined8 unsignedVar6;\n  undefined4 stackVariable;\n  float exitFactorLocal;\n  float entryFactorLocal;\n  inputBlock_t *localBlockPtr;\n  int32_t decelerationSteps;\n  int32_t accelerationPerMinute;\n  int32_t plateauSteps;\n  int32_t accelerateSteps;\n  \n  unsignedResult1 = __floatunsisf(entryFactor,inputBlock->nominal_rate);\n  unsignedResult1 = __aeabi_fmul(unsignedResult1,inputReg1);\n  unsignedResult1 = __aeabi_f2d(unsignedResult1);\n  ceil((double)CONCAT44(inputReg2,stackVariable));\n  unsignedResult2 = __aeabi_d2uiz(unsignedResult1,extraOutputReg1);\n  inputBlock->initial_rate = unsignedResult2;\n  unsignedResult1 = __floatunsisf(inputBlock->nominal_rate);\n  unsignedResult1 = __aeabi_fmul(unsignedResult1,inputReg2);\n  unsignedResult1 = __aeabi_f2d(unsignedResult1);\n  ceil((double)CONCAT44(inputReg2,stackVariable));\n  unsignedResult2 = __aeabi_d2uiz(unsignedResult1,extraOutputReg2);\n  inputBlock->final_rate = unsignedResult2;\n  unsignedVar6 = __aeabi_i2d(inputBlock->rate_delta * 0x32);\n  unsignedVar6 = __muldf3((int)unsignedVar6,(int)((ulonglong)unsignedVar6 >> 0x20),0,0x404e0000);\n  integerVar3 = __aeabi_d2iz((int)unsignedVar6,(int)((ulonglong)unsignedVar6 >> 0x20));\n  unsignedResult1 = __floatunsisf(inputBlock->initial_rate);\n  __floatunsisf(inputBlock->nominal_rate);\n  unsignedVar6 = __floatsisf(integerVar3);\n  estimate_accelerationValue_distanceValue((float)unsignedVar6,(float)((ulonglong)unsignedVar6 >> 0x20),accelerationValue);\n  unsignedResult1 = __aeabi_f2d(unsignedResult1);\n  ceil((double)CONCAT44(inputReg2,stackVariable));\n  accelerateSteps = __aeabi_d2iz(unsignedResult1,extraOutputReg3);\n  unsignedResult1 = __floatunsisf(inputBlock->nominal_rate);\n  __floatunsisf(inputBlock->final_rate);\n  unsignedVar6 = __floatsisf(-integerVar3);\n  estimate_accelerationValue_distanceValue((float)unsignedVar6,(float)((ulonglong)unsignedVar6 >> 0x20),accelerationValue2);\n  unsignedResult1 = __aeabi_f2d(unsignedResult1);\n  floor((double)CONCAT44(inputReg2,stackVariable));\n  integerVar4 = __aeabi_d2iz(unsignedResult1,extraOutputReg4);\n  plateauSteps = (inputBlock->step_event_count - accelerateSteps) - integerVar4;\n  if (plateauSteps < 0) {\n    unsignedResult1 = __floatunsisf(inputBlock->initial_rate);\n    __floatunsisf(inputBlock->final_rate);\n    __floatsisf(integerVar3);\n    unsignedVar6 = __floatsisf(inputBlock->step_event_count);\n    intersection_distanceValue((float)unsignedVar6,(float)((ulonglong)unsignedVar6 >> 0x20),accelerationValue3,distanceValue);\n    unsignedResult1 = __aeabi_f2d(unsignedResult1);\n    ceil((double)CONCAT44(inputReg2,stackVariable));\n    unsignedVar5 = __aeabi_d2iz(unsignedResult1,extraOutputReg5);\n    unsignedVar5 = unsignedVar5 & ~((int)unsignedVar5 >> 0x1f);\n    accelerateSteps = inputBlock->step_event_count;\n    if ((int)unsignedVar5 <= inputBlock->step_event_count) {\n      accelerateSteps = unsignedVar5;\n    }\n    plateauSteps = 0;\n  }\n  inputBlock->accelerate_until = accelerateSteps;\n  inputBlock->decelerate_after = plateauSteps + accelerateSteps;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002c18": "calculate_acceleration_08002c18",
                "block": "inputBlock",
                "entry_factor": "entryFactor",
                "exit_factor": "exitFactor",
                "uVar1": "unsignedResult1",
                "uVar2": "unsignedResult2",
                "iVar3": "integerVar3",
                "iVar4": "integerVar4",
                "uVar5": "unsignedVar5",
                "in_r1": "inputReg1",
                "extraout_r1": "extraOutputReg1",
                "extraout_r1_00": "extraOutputReg2",
                "extraout_r1_01": "extraOutputReg3",
                "extraout_r1_02": "extraOutputReg4",
                "extraout_r1_03": "extraOutputReg5",
                "in_r2": "inputReg2",
                "acceleration": "accelerationValue",
                "acceleration_00": "accelerationValue2",
                "acceleration_01": "accelerationValue3",
                "distance": "distanceValue",
                "uVar6": "unsignedVar6",
                "uStack_38": "stackVariable",
                "exit_factor_local": "exitFactorLocal",
                "entry_factor_local": "entryFactorLocal",
                "block_local": "localBlockPtr",
                "decelerate_steps": "decelerationSteps",
                "acceleration_per_minute": "accelerationPerMinute",
                "plateau_steps": "plateauSteps",
                "accelerate_steps": "accelerateSteps"
            },
            "calling": [
                "planner_recalculate_trapezoids"
            ],
            "called": [
                "__floatsisf",
                "__aeabi_f2d",
                "__muldf3",
                "intersection_distance",
                "__floatunsisf",
                "ceil",
                "__aeabi_d2uiz",
                "__aeabi_fmul",
                "estimate_acceleration_distance",
                "__aeabi_i2d",
                "__aeabi_d2iz",
                "floor"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002e08": {
            "entrypoint": "0x08002e08",
            "current_name": "recalculate_block_speeds_08002e08",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid recalculateBlockSpeeds_08002e08(void)\n\n{\n  uint uVar1;\n  undefined8 uVar2;\n  Block *currentBlock;\n  Block *nextBlock;\n  uint8_t currentIndex;\n  \n  nextBlock = (Block *)0x0;\n  currentIndex = bufferTail;\n  while (currentIndex != bufferHead) {\n    uVar1 = (uint)currentIndex;\n    if ((nextBlock != (Block *)0x0) &&\n       ((nextBlock->recalculateFlag != '\\0' || (blockBuffer[uVar1].recalculateFlag != '\\0')))) {\n      divideFloats(nextBlock->entrySpeed,nextBlock->nominalSpeed);\n      uVar2 = divideFloats(blockBuffer[uVar1].entrySpeed,nextBlock->nominalSpeed);\n      calculateTrapezoidForBlock(nextBlock,(float)uVar2,(float)((ulonglong)uVar2 >> 0x20));\n      nextBlock->recalculateFlag = '\\0';\n    }\n    currentIndex = getNextBlockIndex(currentIndex);\n    nextBlock = blockBuffer + uVar1;\n  }\n  divideFloats(nextBlock->entrySpeed,nextBlock->nominalSpeed);\n  uVar2 = divideFloats(0,nextBlock->nominalSpeed);\n  calculateTrapezoidForBlock(nextBlock,(float)uVar2,(float)((ulonglong)uVar2 >> 0x20));\n  nextBlock->recalculateFlag = '\\0';\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002e08": "recalculate_block_speeds_08002e08",
                "block_t": "Block",
                "current": "currentBlock",
                "next": "nextBlock",
                "block_index": "currentIndex",
                "block_buffer_tail": "bufferTail",
                "block_buffer_head": "bufferHead",
                "block_buffer": "blockBuffer",
                "__aeabi_fdiv": "divideFloats",
                "entry_speed": "entrySpeed",
                "nominal_speed": "nominalSpeed",
                "recalculate_flag": "recalculateFlag",
                "calculate_trapezoid_for_block": "calculateTrapezoidForBlock",
                "next_block_index": "getNextBlockIndex"
            },
            "calling": [
                "planner_recalculate"
            ],
            "called": [
                "calculate_trapezoid_for_block",
                "__aeabi_fdiv",
                "next_block_index"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002edc": {
            "entrypoint": "0x08002edc",
            "current_name": "calculate_planner_08002edc",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid calculate_planner_08002edc(void)\n\n{\n  planner_reverse_pass();\n  planner_forward_pass();\n  planner_recalculate_trapezoids();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002edc": "calculate_planner_08002edc"
            },
            "calling": [
                "plan_cycle_reinitialize",
                "plan_buffer_line"
            ],
            "called": [
                "planner_reverse_pass",
                "planner_recalculate_trapezoids",
                "planner_forward_pass"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ef0": {
            "entrypoint": "0x08002ef0",
            "current_name": "update_block_buffer_08002ef0",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid updateBlockBuffer_08002ef0(void)\n\n{\n  currentTail = currentHead;\n  nextHead = calculateNextIndex(currentHead);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ef0": "update_block_buffer_08002ef0",
                "block_buffer_tail": "currentTail",
                "block_buffer_head": "currentHead",
                "next_buffer_head": "nextHead",
                "next_block_index": "calculateNextIndex"
            },
            "calling": [
                "plan_init"
            ],
            "called": [
                "next_block_index"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002f24": {
            "entrypoint": "0x08002f24",
            "current_name": "initialize_plan_08002f24",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid initialize_plan_08002f24(void)\n\n{\n  reset_plan_buffer();\n  memset(&plan_buffer,0,0x1c);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002f24": "initialize_plan_08002f24",
                "plan_reset_buffer": "reset_plan_buffer",
                "pl": "plan_buffer"
            },
            "calling": [
                "grbl_main"
            ],
            "called": [
                "plan_reset_buffer",
                "memset"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002f40": {
            "entrypoint": "0x08002f40",
            "current_name": "update_block_buffer_tail_08002f40",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid update_block_buffer_tail_08002f40(void)\n\n{\n  if (block_buffer_head != block_buffer_tail) {\n    block_buffer_tail = calculate_next_block_index(block_buffer_tail);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002f40": "update_block_buffer_tail_08002f40",
                "next_block_index": "calculate_next_block_index"
            },
            "calling": [
                "step_period_isr"
            ],
            "called": [
                "next_block_index"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002f74": {
            "entrypoint": "0x08002f74",
            "current_name": "get_next_block_08002f74",
            "code": "\n/* WARNING: Unknown calling convention */\n\nblock_t * get_next_block_08002f74(void)\n\n{\n  block_t *next_block;\n  \n  if (buffer_head == buffer_tail) {\n    next_block = (block_t *)0x0;\n  }\n  else {\n    next_block = block_buffer + buffer_tail;\n  }\n  return next_block;\n}\n\n",
            "renaming": {
                "FUN_08002f74": "get_next_block_08002f74",
                "block_buffer_head": "buffer_head",
                "block_buffer_tail": "buffer_tail",
                "pbVar1": "next_block"
            },
            "calling": [
                "plan_synchronize",
                "step_period_isr"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002fac": {
            "entrypoint": "0x08002fac",
            "current_name": "is_buffer_tail_equal_to_next_head_08002fac",
            "code": "\n/* WARNING: Unknown calling convention */\n\nuint8_t is_buffer_tail_equal_to_next_head_08002fac(void)\n\n{\n  return buffer_tail == buffer_head;\n}\n\n",
            "renaming": {
                "FUN_08002fac": "is_buffer_tail_equal_to_next_head_08002fac",
                "block_buffer_tail": "buffer_tail",
                "next_buffer_head": "buffer_head"
            },
            "calling": [
                "mc_line"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002fd4": {
            "entrypoint": "0x08002fd4",
            "current_name": "execute_until_completion_08002fd4",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid execute_until_completion_08002fd4(void)\n\n{\n  block_t *current_block;\n  \n  while ((current_block = get_current_block(), current_block != (block_t *)0x0 || (system_state == '\\x03'))) {\n    execute_protocol_runtime();\n    if (system_abort != '\\0') {\n      return;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002fd4": "execute_until_completion_08002fd4",
                "pbVar1": "current_block",
                "plan_get_current_block()": "get_current_block()",
                "sys.state": "system_state",
                "protocol_execute_runtime()": "execute_protocol_runtime()",
                "sys.abort": "system_abort"
            },
            "calling": [
                "gc_execute_line",
                "mc_go_home",
                "mc_dwell",
                "coolant_run",
                "spindle_run"
            ],
            "called": [
                "protocol_execute_runtime",
                "plan_get_current_block"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003004": {
            "entrypoint": "0x08003004",
            "current_name": "calculate_motion_profile_08003004",
            "code": "\n/* WARNING: Variable defined which should be unmapped: feedRate-local */\n\nvoid calculateMotionProfile_08003004(float xPosition,float yPosition,float zPosition,float feedRate,uint8_t invertFeedRate)\n\n{\n  undefined4 stepsX;\n  long targetX;\n  long targetY;\n  long targetZ;\n  undefined4 uVar5;\n  undefined4 stepsY;\n  undefined4 uVar7;\n  undefined4 stepsZ;\n  float fVar9;\n  int32_t iVar10;\n  float fVar11;\n  float fVar12;\n  float fVar13;\n  int iVar14;\n  float fVar15;\n  undefined4 in_r1;\n  undefined4 exPositiontraout_r1;\n  undefined4 exPositiontraout_r1_00;\n  undefined4 exPositiontraout_r1_01;\n  undefined4 exPositiontraout_r1_02;\n  undefined4 exPositiontraout_r1_03;\n  undefined4 exPositiontraout_r1_04;\n  undefined4 in_r2;\n  uint stepsAbsY;\n  undefined4 in_r3;\n  uint stepsX7;\n  currentBlock_t *pbVar18;\n  uint32_t stepsAbsX;\n  uint stepsAbsZ;\n  undefined8 exPositiontraout_d0;\n  undefined8 exPositiontraout_d0_00;\n  undefined8 exPositiontraout_d0_01;\n  undefined8 exPositiontraout_d0_02;\n  undefined8 exPositiontraout_d0_03;\n  undefined8 exPositiontraout_d0_04;\n  float exPositiontraout_s2;\n  float exPositiontraout_s2_00;\n  float exPositiontraout_s2_01;\n  float exPositiontraout_s2_02;\n  float exPositiontraout_s2_03;\n  float exPositiontraout_s2_04;\n  undefined8 uVar21;\n  undefined8 uVar22;\n  undefined8 uVar23;\n  char in_stack_00000000;\n  float feedRate_local;\n  float zPosition_local;\n  float yPosition_local;\n  float xPosition_local;\n  float unitVector [3];\n  float deltaMillimeters [3];\n  int32_t target [3];\n  float allowableVelocity;\n  float sineThetaDividedBy2;\n  float cosineTheta;\n  float inverseMillimeters;\n  currentBlock_t *currentBlock;\n  float junctionVelocity;\n  float inverseMinute;\n  \n  stepsX7 = (uint)currentBlock_buffer_head;\n  pbVar18 = currentBlock_buffer + stepsX7;\n  stepsX = __aeabi_fmul(xPosition,settings.steps_per_mm[0],invertFeedRate);\n  __aeabi_f2d(stepsX);\n  targetX = lround((double)CONCAT44(in_r2,in_r3));\n  stepsX = __aeabi_fmul(settings.steps_per_mm[1],in_r1);\n  __aeabi_f2d(stepsX);\n  targetY = lround((double)CONCAT44(in_r2,in_r3));\n  stepsX = __aeabi_fmul(settings.steps_per_mm[2],in_r2);\n  __aeabi_f2d(stepsX);\n  targetZ = lround((double)CONCAT44(in_r2,in_r3));\n  pbVar18->direction_bits = 0;\n  if (targetX < pl.position[0]) {\n    pbVar18->direction_bits = pbVar18->direction_bits | 0xPosition20;\n  }\n  if (targetY < pl.position[1]) {\n    pbVar18->direction_bits = pbVar18->direction_bits | 0xPosition880;\n  }\n  if (targetZ < pl.position[2]) {\n    pbVar18->direction_bits = pbVar18->direction_bits | 0xPosition200;\n  }\n  stepsAbsX = targetX - pl.position[0];\n  if ((int)stepsAbsX < 0) {\n    stepsAbsX = -stepsAbsX;\n  }\n  currentBlock_buffer[stepsX7].steps_xPosition = stepsAbsX;\n  stepsAbsX = targetY - pl.position[1];\n  if ((int)stepsAbsX < 0) {\n    stepsAbsX = -stepsAbsX;\n  }\n  currentBlock_buffer[stepsX7].steps_yPosition = stepsAbsX;\n  stepsAbsX = targetZ - pl.position[2];\n  if ((int)stepsAbsX < 0) {\n    stepsAbsX = -stepsAbsX;\n  }\n  currentBlock_buffer[stepsX7].steps_zPosition = stepsAbsX;\n  stepsAbsY = currentBlock_buffer[stepsX7].steps_zPosition;\n  if (currentBlock_buffer[stepsX7].steps_zPosition < currentBlock_buffer[stepsX7].steps_yPosition) {\n    stepsAbsY = currentBlock_buffer[stepsX7].steps_yPosition;\n  }\n  stepsAbsZ = currentBlock_buffer[stepsX7].steps_xPosition;\n  if (currentBlock_buffer[stepsX7].steps_xPosition < stepsAbsY) {\n    stepsAbsZ = stepsAbsY;\n  }\n  currentBlock_buffer[stepsX7].step_event_count = stepsAbsZ;\n  if (currentBlock_buffer[stepsX7].step_event_count != 0) {\n    stepsX = __floatsisf(targetX - pl.position[0]);\n    stepsX = __aeabi_fdiv(stepsX,settings.steps_per_mm[0]);\n    uVar5 = __floatsisf(targetY - pl.position[1]);\n    uVar5 = __aeabi_fdiv(uVar5,settings.steps_per_mm[1]);\n    stepsY = __floatsisf(targetZ - pl.position[2]);\n    stepsY = __aeabi_fdiv(stepsY,settings.steps_per_mm[2]);\n    uVar7 = __aeabi_fmul(stepsX,stepsX);\n    stepsZ = __aeabi_fmul(uVar5,uVar5);\n    uVar7 = __addsf3(uVar7,stepsZ);\n    stepsZ = __aeabi_fmul(stepsY,stepsY);\n    uVar7 = __addsf3(uVar7,stepsZ);\n    uVar7 = __aeabi_f2d(uVar7);\n    sqrt((double)CONCAT44(in_r2,in_r3));\n    fVar9 = (float)__truncdfsf2(uVar7,exPositiontraout_r1);\n    currentBlock_buffer[stepsX7].millimeters = fVar9;\n    uVar7 = __aeabi_fdiv(0xPosition3f800000,currentBlock_buffer[stepsX7].millimeters);\n    if (in_stack_00000000 == '\\0') {\n      inverseMinute = (float)__aeabi_fmul(in_r3,uVar7);\n    }\n    else {\n      inverseMinute = (float)__aeabi_fdiv(0xPosition3f800000,in_r3);\n    }\n    fVar9 = (float)__aeabi_fmul(currentBlock_buffer[stepsX7].millimeters,inverseMinute);\n    currentBlock_buffer[stepsX7].nominal_speed = fVar9;\n    stepsZ = __floatsisf(currentBlock_buffer[stepsX7].step_event_count);\n    stepsZ = __aeabi_fmul(stepsZ,inverseMinute);\n    stepsZ = __aeabi_f2d(stepsZ);\n    ceil((double)CONCAT44(in_r2,in_r3));\n    stepsAbsX = __aeabi_d2uizPosition(stepsZ,exPositiontraout_r1_00);\n    currentBlock_buffer[stepsX7].nominal_rate = stepsAbsX;\n    stepsZ = __floatsisf(currentBlock_buffer[stepsX7].step_event_count);\n    stepsZ = __aeabi_fmul(stepsZ,uVar7);\n    stepsZ = __aeabi_fmul(stepsZ,settings.acceleration);\n    stepsZ = __aeabi_fdiv(stepsZ,0xPosition453b8000);\n    stepsZ = __aeabi_f2d(stepsZ);\n    ceil((double)CONCAT44(in_r2,in_r3));\n    iVar10 = __aeabi_d2izPosition(stepsZ,exPositiontraout_r1_01);\n    currentBlock_buffer[stepsX7].rate_delta = iVar10;\n    fVar11 = (float)__aeabi_fmul(stepsX,uVar7);\n    fVar12 = (float)__aeabi_fmul(uVar5,uVar7);\n    fVar13 = (float)__aeabi_fmul(stepsY,uVar7);\n    junctionVelocity = 0.0;\n    uVar21 = exPositiontraout_d0;\n    fVar9 = exPositiontraout_s2;\n    if ((currentBlock_buffer_head != currentBlock_buffer_tail) &&\n       (iVar14 = __aeabi_fcmpgt(pl.previous_nominal_speed,0), uVar21 = exPositiontraout_d0_00,\n       fVar9 = exPositiontraout_s2_00, iVar14 != 0)) {\n      stepsX = __aeabi_fmul((uint)pl.previous_unitVector[0] ^ 0xPosition80000000,fVar11);\n      uVar5 = __aeabi_fmul(pl.previous_unitVector[1],fVar12);\n      stepsX = __aeabi_fsub(stepsX,uVar5);\n      uVar5 = __aeabi_fmul(pl.previous_unitVector[2],fVar13);\n      stepsX = __aeabi_fsub(stepsX,uVar5);\n      uVar21 = __aeabi_f2d(stepsX);\n      iVar14 = __aeabi_dcmplt((int)uVar21,(int)((ulonglong)uVar21 >> 0xPosition20),0xPosition66666666,0xPosition3fee6666);\n      uVar21 = exPositiontraout_d0_01;\n      fVar9 = exPositiontraout_s2_01;\n      if (iVar14 != 0) {\n        iVar14 = __aeabi_fcmplt(pl.previous_nominal_speed,currentBlock_buffer[stepsX7].nominal_speed);\n        junctionVelocity = pl.previous_nominal_speed;\n        if (iVar14 == 0) {\n          junctionVelocity = currentBlock_buffer[stepsX7].nominal_speed;\n        }\n        uVar21 = __aeabi_f2d(stepsX);\n        iVar14 = __aeabi_dcmpgt((int)uVar21,(int)((ulonglong)uVar21 >> 0xPosition20),0xPosition66666666,0xPositionbfee6666);\n        uVar21 = exPositiontraout_d0_02;\n        fVar9 = exPositiontraout_s2_02;\n        if (iVar14 != 0) {\n          uVar21 = __aeabi_f2d(stepsX);\n          uVar21 = __subdf3(0,0xPosition3ff00000,(int)uVar21,(int)((ulonglong)uVar21 >> 0xPosition20));\n          stepsX = __muldf3((int)uVar21,(int)((ulonglong)uVar21 >> 0xPosition20),0,0xPosition3fe00000);\n          sqrt((double)CONCAT44(in_r2,in_r3));\n          stepsX = __truncdfsf2(stepsX,exPositiontraout_r1_02);\n          uVar21 = __aeabi_f2d(junctionVelocity);\n          uVar5 = __aeabi_fmul(settings.acceleration,settings.junction_deviation);\n          uVar5 = __aeabi_fmul(uVar5,stepsX);\n          uVar22 = __aeabi_f2d(uVar5);\n          uVar23 = __aeabi_f2d(stepsX);\n          uVar23 = __subdf3(0,0xPosition3ff00000,(int)uVar23,(int)((ulonglong)uVar23 >> 0xPosition20));\n          uVar5 = __divdf3((int)uVar22,(int)((ulonglong)uVar22 >> 0xPosition20),(int)uVar23,\n                           (int)((ulonglong)uVar23 >> 0xPosition20));\n          sqrt((double)CONCAT44(in_r2,in_r3));\n          iVar14 = __aeabi_dcmplt((int)uVar21,(int)((ulonglong)uVar21 >> 0xPosition20),uVar5,exPositiontraout_r1_03)\n          ;\n          uVar21 = exPositiontraout_d0_03;\n          fVar9 = exPositiontraout_s2_03;\n          if (iVar14 == 0) {\n            uVar5 = __aeabi_fmul(settings.acceleration,settings.junction_deviation);\n            uVar5 = __aeabi_fmul(uVar5,stepsX);\n            uVar21 = __aeabi_f2d(uVar5);\n            uVar22 = __aeabi_f2d(stepsX);\n            uVar22 = __subdf3(0,0xPosition3ff00000,(int)uVar22,(int)((ulonglong)uVar22 >> 0xPosition20));\n            stepsX = __divdf3((int)uVar21,(int)((ulonglong)uVar21 >> 0xPosition20),(int)uVar22,\n                             (int)((ulonglong)uVar22 >> 0xPosition20));\n            sqrt((double)CONCAT44(in_r2,in_r3));\n            junctionVelocity = (float)__truncdfsf2(stepsX,exPositiontraout_r1_04);\n            uVar21 = exPositiontraout_d0_04;\n            fVar9 = exPositiontraout_s2_04;\n          }\n        }\n      }\n    }\n    currentBlock_buffer[stepsX7].maxPosition_entryPosition_speed = junctionVelocity;\n    fVar15 = (float)((uint)settings.acceleration ^ 0xPosition80000000);\n    maxPosition_allowable_speed((float)uVar21,(float)((ulonglong)uVar21 >> 0xPosition20),fVar9);\n    iVar14 = __aeabi_fcmplt(junctionVelocity,fVar15);\n    fVar9 = fVar15;\n    if (iVar14 != 0) {\n      fVar9 = junctionVelocity;\n    }\n    currentBlock_buffer[stepsX7].entryPosition_speed = fVar9;\n    iVar14 = __aeabi_fcmpge(fVar15,currentBlock_buffer[stepsX7].nominal_speed);\n    if (iVar14 == 0) {\n      currentBlock_buffer[stepsX7].nominal_length_flag = '\\0';\n    }\n    else {\n      currentBlock_buffer[stepsX7].nominal_length_flag = '\\xPosition01';\n    }\n    currentBlock_buffer[stepsX7].recalculate_flag = '\\xPosition01';\n    pl.previous_nominal_speed = currentBlock_buffer[stepsX7].nominal_speed;\n    currentBlock_buffer_head = nexPositiont_buffer_head;\n    pl.previous_unitVector[0] = fVar11;\n    pl.previous_unitVector[1] = fVar12;\n    pl.previous_unitVector[2] = fVar13;\n    nexPositiont_buffer_head = nexPositiont_currentBlock_indexPosition(nexPositiont_buffer_head);\n    pl.position[0] = targetX;\n    pl.position[1] = targetY;\n    pl.position[2] = targetZ;\n    planner_recalculate();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003004": "calculate_motion_profile_08003004",
                "x": "xPosition",
                "y": "yPosition",
                "z": "zPosition",
                "feed_rate": "feedRate",
                "invert_feed_rate": "invertFeedRate",
                "uVar1": "stepsX",
                "lVar2": "targetX",
                "uVar6": "stepsY",
                "lVar3": "targetY",
                "uVar8": "stepsZ",
                "lVar4": "targetZ",
                "uVar19": "stepsAbsX",
                "uVar16": "stepsAbsY",
                "uVar20": "stepsAbsZ",
                "unit_vec": "unitVector",
                "delta_mm": "deltaMillimeters",
                "v_allowable": "allowableVelocity",
                "sin_theta_d2": "sineThetaDividedBy2",
                "cos_theta": "cosineTheta",
                "inverse_millimeters": "inverseMillimeters",
                "block": "currentBlock",
                "vmax_junction": "junctionVelocity",
                "inverse_minute": "inverseMinute"
            },
            "calling": [
                "mc_line"
            ],
            "called": [
                "__floatsisf",
                "__muldf3",
                "__truncdfsf2",
                "sqrt",
                "__aeabi_d2uiz",
                "__aeabi_fdiv",
                "lround",
                "planner_recalculate",
                "__subdf3",
                "max_allowable_speed",
                "__aeabi_f2d",
                "ceil",
                "__aeabi_fsub",
                "__addsf3",
                "__aeabi_dcmplt",
                "__aeabi_fmul",
                "__aeabi_fcmplt",
                "__aeabi_fcmpgt",
                "next_block_index",
                "__aeabi_d2iz",
                "__divdf3",
                "__aeabi_fcmpge",
                "__aeabi_dcmpgt"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080035ec": {
            "entrypoint": "0x080035ec",
            "current_name": "set_player_position_080035ec",
            "code": "\nvoid setPlayerPosition_080035ec(int32_t playerX,int32_t playerY,int32_t playerZ)\n\n{\n  int32_t localZ;\n  int32_t localY;\n  int32_t localX;\n  \n  pl.position[0] = playerX;\n  pl.position[1] = playerY;\n  pl.position[2] = playerZ;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080035ec": "set_player_position_080035ec",
                "x": "playerX",
                "y": "playerY",
                "z": "playerZ",
                "z_local": "localZ",
                "y_local": "localY",
                "x_local": "localX"
            },
            "calling": [
                "sys_sync_current_position"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003618": {
            "entrypoint": "0x08003618",
            "current_name": "update_block_buffer_entry_08003618",
            "code": "\nvoid updateBlockBufferEntry_08003618(int32_t remainingStepEvents)\n\n{\n  undefined4 millimetersPerStep;\n  undefined4 oldStepEventCount;\n  uint blockIndex;\n  float currentMillimeters;\n  int32_t remainingStepEventsLocal;\n  currentBlock_t *currentBlock;\n  \n  blockIndex = (uint)currentBlock_buffer_tail;\n  currentMillimeters = currentBlock_buffer[blockIndex].millimeters;\n  millimetersPerStep = __floatsisf(remainingStepEvents);\n  millimetersPerStep = __aeabi_fmul(currentMillimeters,millimetersPerStep);\n  oldStepEventCount = __floatsisf(currentBlock_buffer[blockIndex].step_event_count);\n  currentMillimeters = (float)__aeabi_fdiv(millimetersPerStep,oldStepEventCount);\n  currentBlock_buffer[blockIndex].millimeters = currentMillimeters;\n  currentBlock_buffer[blockIndex].step_event_count = remainingStepEvents;\n  currentBlock_buffer[blockIndex].entry_speed = 0.0;\n  currentBlock_buffer[blockIndex].max_entry_speed = 0.0;\n  currentBlock_buffer[blockIndex].nominal_length_flag = '\\0';\n  currentBlock_buffer[blockIndex].recalculate_flag = '\\x01';\n  planner_recalculate();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003618": "update_block_buffer_entry_08003618",
                "step_events_remaining": "remainingStepEvents",
                "uVar1": "millimetersPerStep",
                "uVar2": "oldStepEventCount",
                "uVar3": "blockIndex",
                "fVar4": "currentMillimeters",
                "step_events_remaining_local": "remainingStepEventsLocal",
                "block": "currentBlock"
            },
            "calling": [
                "st_cycle_reinitialize"
            ],
            "called": [
                "__floatsisf",
                "__aeabi_fmul",
                "__aeabi_fdiv",
                "planner_recalculate"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800369c": {
            "entrypoint": "0x0800369c",
            "current_name": "print_string_0800369c",
            "code": "\nvoid print_string_0800369c(char *string)\n\n{\n  char *current_char;\n  \n  current_char = string;\n  while (*current_char != '\\0') {\n    stringerial_write(*current_char);\n    current_char = current_char + 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800369c": "print_string_0800369c",
                "s": "string",
                "s_local": "current_char"
            },
            "calling": [
                "protocol_execute_startup",
                "report_startup_line"
            ],
            "called": [
                "serial_write"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080036c6": {
            "entrypoint": "0x080036c6",
            "current_name": "print_string_080036c6",
            "code": "\nvoid print_string_080036c6(char *string)\n\n{\n  char *string_local;\n  \n  string_local = string;\n  while (*string_local != '\\0') {\n    stringerial_write(*string_local);\n    string_local = string_local + 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080036c6": "print_string_080036c6",
                "s": "string"
            },
            "calling": [
                "report_status_message",
                "report_grbl_help",
                "report_init_message",
                "report_grbl_settings",
                "report_feedback_message",
                "report_realtime_status",
                "report_gcode_modes",
                "report_gcode_parameters",
                "report_startup_line",
                "report_alarm_message"
            ],
            "called": [
                "serial_write"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080036f0": {
            "entrypoint": "0x080036f0",
            "current_name": "print_bits_080036f0",
            "code": "\nvoindexd print_bits_080036f0(uindexinput_numbert input_number,indexinput_numbert num_bits)\n\n{\n  uindexinput_numbert8_t binary_data;\n  indexinput_numbert num_bits_local;\n  uindexinput_numbert input_number_local;\n  indexinput_numbert index;\n  uindexinput_numbert32_t bit_mask;\n  \n  bit_mask = 1 << (num_bits - 1U & 0xff);\n  for (index = 0; index < num_bits; index = index + 1) {\n    indexf ((bit_mask & input_number) == 0) {\n      binary_data = '0';\n    }\n    else {\n      binary_data = '1';\n    }\n    serindexal_wrindexte(binary_data);\n    bit_mask = bit_mask >> 1;\n  }\n  returinput_number;\n}\n\n",
            "renaming": {
                "FUN_080036f0": "print_bits_080036f0",
                "n": "input_number",
                "bits": "num_bits",
                "data": "binary_data",
                "bits_local": "num_bits_local",
                "n_local": "input_number_local",
                "i": "index",
                "mask": "bit_mask"
            },
            "calling": [
                "print_uint8_base2",
                "print_uint16_base2"
            ],
            "called": [
                "serial_write"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003740": {
            "entrypoint": "0x08003740",
            "current_name": "print_binary_08003740",
            "code": "\nvoid print_binary_08003740(uiinput_numt8_t input_num)\n\n{\n  uiinput_numt8_t local_num;\n  \n  priinput_numt_base2((uiinput_numt)input_num,8);\n  returinput_num;\n}\n\n",
            "renaming": {
                "FUN_08003740": "print_binary_08003740",
                "n": "input_num",
                "n_local": "local_num"
            },
            "calling": [],
            "called": [
                "print_base2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800375c": {
            "entrypoint": "0x0800375c",
            "current_name": "print_number_in_base_0800375c",
            "code": "\nvoid print_number_in_base_0800375c(uinumbert16_t number)\n\n{\n  uinumbert16_t local_number;\n  \n  prinumbert_base2((uinumbert)number,0x10);\n  returnumber;\n}\n\n",
            "renaming": {
                "FUN_0800375c": "print_number_in_base_0800375c",
                "n": "number",
                "n_local": "local_number"
            },
            "calling": [
                "report_grbl_settings"
            ],
            "called": [
                "print_base2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003778": {
            "entrypoint": "0x08003778",
            "current_name": "print_reversed_number_08003778",
            "code": "\nvocounterd print_reversed_number_08003778(ulonumberg number)\n\n{\n  ucounternumbert index;\n  ulonumberg copy_of_number;\n  ucounternumbert8_t digit;\n  uchar buffer [10];\n  ucounternumbert8_t counter;\n  \n  counter = '\\0';\n  copy_of_number = number;\n  counterf (number == 0) {\n    sercounteral_wrcounterte('0');\n  }\n  else {\n    for (; copy_of_number != 0; copy_of_number = copy_of_number / 10) {\n      index = (ucounternumbert)counter;\n      counter = counter + '\\x01';\n      buffer[index] = (char)(copy_of_number % 10) + '0';\n    }\n    for (; counter != '\\0'; counter = counter + 0xff) {\n      sercounteral_wrcounterte(buffer[counter - 1]);\n    }\n  }\n  returnumber;\n}\n\n",
            "renaming": {
                "FUN_08003778": "print_reversed_number_08003778",
                "n": "number",
                "uVar1": "index",
                "n_local": "copy_of_number",
                "uStack_15": "digit",
                "buf": "buffer",
                "i": "counter"
            },
            "calling": [
                "printInteger"
            ],
            "called": [
                "serial_write"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080037fc": {
            "entrypoint": "0x080037fc",
            "current_name": "print_signed_integer_080037fc",
            "code": "\nvoid printSignedInteger_080037fc(loinputNumberg inputNumber)\n\n{\n  loinputNumberg absoluteNumber;\n  \n  absoluteNumber = inputNumber;\n  if (inputNumber < 0) {\n    serial_write('-');\n    absoluteNumber = -inputNumber;\n  }\n  priinputNumbert_uiinputNumbert32_base10(absoluteNumber);\n  returinputNumber;\n}\n\n",
            "renaming": {
                "FUN_080037fc": "print_signed_integer_080037fc",
                "n": "inputNumber",
                "n_local": "absoluteNumber"
            },
            "calling": [
                "report_grbl_settings",
                "report_gcode_modes",
                "report_startup_line"
            ],
            "called": [
                "serial_write",
                "print_uint32_base10"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003826": {
            "entrypoint": "0x08003826",
            "current_name": "format_float_08003826",
            "code": "\nvoindexd formatFloat_08003826(float n)\n\n{\n  float input;\n  indexnt isNegative;\n  undefindexned4 normalizedValue;\n  byte tempByte;\n  uindexnt tempUInt;\n  float normalizedInput;\n  uindexnt8_t tempUStack;\n  uchar outputBuffer [10];\n  uindexnt32_t a;\n  uindexnt8_t index;\n  uindexnt8_t numDecimals;\n  \n  isNegative = __aeabindex_fcmplt(input,0);\n  normalizedInput = input;\n  indexf (isNegative != 0) {\n    serindexal_wrindexte('-');\n    normalizedInput = (float)((uindexnt)input ^ 0x80000000);\n  }\n  for (numDecimals = settindexngs.decindexmal_places; 1 < numDecimals; numDecimals = numDecimals + 0xfe) {\n    normalizedInput = (float)__aeabindex_fmul(normalizedInput,0x42c80000);\n  }\n  indexf (numDecimals != '\\0') {\n    normalizedInput = (float)__aeabindex_fmul(normalizedInput,0x41200000);\n  }\n  normalizedValue = __addsf3(normalizedInput,0x3f000000);\n  index = '\\0';\n  a = __aeabindex_f2indexz(normalizedValue);\n  outputBuffer[settindexngs.decindexmal_places] = '.';\n  for (; a != 0; a = a / 10) {\n    indexf (index == settindexngs.decindexmal_places) {\n      index = index + '\\x01';\n    }\n    tempUInt = (uindexnt)index;\n    index = index + '\\x01';\n    outputBuffer[tempUInt] = (char)(a % 10) + '0';\n  }\n  whindexle (index < settindexngs.decindexmal_places) {\n    tempUInt = (uindexnt)index;\n    index = index + '\\x01';\n    outputBuffer[tempUInt] = '0';\n  }\n  indexf (index == settindexngs.decindexmal_places) {\n    tempByte = index + 1;\n    index = index + '\\x02';\n    outputBuffer[tempByte] = '0';\n  }\n  for (; index != '\\0'; index = index + 0xff) {\n    serindexal_wrindexte(outputBuffer[index - 1]);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003826": "format_float_08003826",
                "in_r0": "input",
                "iVar1": "isNegative",
                "uVar2": "normalizedValue",
                "bVar3": "tempByte",
                "uVar4": "tempUInt",
                "n_local": "normalizedInput",
                "uStack_1d": "tempUStack",
                "buf": "outputBuffer",
                "i": "index",
                "decimals": "numDecimals"
            },
            "calling": [
                "report_grbl_settings",
                "report_realtime_status",
                "report_gcode_modes",
                "report_gcode_parameters"
            ],
            "called": [
                "serial_write",
                "__addsf3",
                "__aeabi_f2iz",
                "__aeabi_fcmplt",
                "__aeabi_fmul"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003980": {
            "entrypoint": "0x08003980",
            "current_name": "initialize_function_08003980",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid initializeFunction_08003980(void)\n\n{\n  characterCounter = '\\0';\n  isComment = '\\0';\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003980": "initialize_function_08003980",
                "char_counter": "characterCounter",
                "iscomment": "isComment"
            },
            "calling": [
                "protocol_init",
                "protocol_process"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080039a0": {
            "entrypoint": "0x080039a0",
            "current_name": "initialize_protocol_080039a0",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid initializeProtocol_080039a0(void)\n\n{\n  resetLineBuffer();\n  displayInitMessage();\n  areButtonsEnabled = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080039a0": "initialize_protocol_080039a0",
                "protocol_reset_line_buffer": "resetLineBuffer",
                "report_init_message": "displayInitMessage",
                "buttons_enabled": "areButtonsEnabled"
            },
            "calling": [
                "grbl_main"
            ],
            "called": [
                "report_init_message",
                "protocol_reset_line_buffer"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080039bc": {
            "entrypoint": "0x080039bc",
            "current_name": "process_startup_lines_080039bc",
            "code": "\n/* WARNING: Ucounterkcounterowcounter callicounterg cocountervecountertiocounter */\n\nvoid process_startup_lines_080039bc(void)\n\n{\n  uicountert8_t result;\n  uicountert8_t counter;\n  \n  for (counter = '\\0'; counter < 2; counter = counter + '\\x01') {\n    result = setticountergs_read_startup_startup_line(counter,startup_line);\n    if (result == '\\0') {\n      report_status_message('\\counter');\n    }\n    else if (startup_line[0] != '\\0') {\n      pricountertStricounterg(startup_line);\n      result = gc_execute_startup_line(startup_line);\n      report_status_message(result);\n    }\n  }\n  returcounter;\n}\n\n",
            "renaming": {
                "FUN_080039bc": "process_startup_lines_080039bc",
                "n": "counter",
                "uVar1": "result",
                "line": "startup_line"
            },
            "calling": [
                "grbl_main",
                "protocol_execute_line"
            ],
            "called": [
                "gc_execute_line",
                "report_status_message",
                "printString",
                "settings_read_startup_line"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003a18": {
            "entrypoint": "0x08003a18",
            "current_name": "process_buttons_08003a18",
            "code": "\nvoid processButtons_08003a18(uint32_t inputButtons)\n\n{\n  uint32_t localButtons;\n  \n  if ((inputButtons & 0x80) == 0) {\n    if ((inputButtons & 0x40) == 0) {\n      if ((inputButtons & 0x20) != 0) {\n        sys.execute = sys.execute | 2;\n      }\n    }\n    else {\n      sys.execute = sys.execute | 8;\n    }\n  }\n  else {\n    mc_reset();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003a18": "process_buttons_08003a18",
                "buttons": "inputButtons",
                "buttons_local": "localButtons"
            },
            "calling": [
                "debounce_on_handler"
            ],
            "called": [
                "mc_reset"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003a74": {
            "entrypoint": "0x08003a74",
            "current_name": "execute_machine_08003a74",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08003ad2) */\n/* WARNING: Unknown calling convention */\n\nvoid execute_machine_08003a74(void)\n\n{\n  uint8_t sys_execute_flag;\n  uint8_t runtime_execution_flag;\n  \n  sys_execute_flag = sys.execute;\n  if (sys.execute != '\\0') {\n    if ((sys.execute & 0x60) != 0) {\n      sys.state = '\\x06';\n      if ((sys.execute & 0x40) != 0) {\n        report_alarm_message(-1);\n        report_feedback_message('\\x01');\n        do {\n        } while( true );\n      }\n      report_alarm_message(-2);\n      sys.execute = sys.execute & 0x9f;\n    }\n    if ((sys_execute_flag & 0x10) == 0) {\n      if ((sys_execute_flag & 1) != 0) {\n        report_realtime_status();\n        sys.execute = sys.execute & 0xfe;\n      }\n      if ((sys_execute_flag & 8) != 0) {\n        st_feed_hold();\n        sys.execute = sys.execute & 0xf7;\n      }\n      if ((sys_execute_flag & 4) != 0) {\n        st_cycle_reinitialize();\n        sys.execute = sys.execute & 0xfb;\n      }\n      if ((sys_execute_flag & 2) != 0) {\n        st_cycle_start();\n        if ((settings.flags & 2) != 0) {\n          sys.auto_start = '\\x01';\n        }\n        sys.execute = sys.execute & 0xfd;\n      }\n    }\n    else {\n      sys.abort = '\\x01';\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003a74": "execute_machine_08003a74",
                "uVar1": "sys_execute_flag",
                "rt_exec": "runtime_execution_flag"
            },
            "calling": [
                "mc_go_home",
                "grbl_main",
                "plan_synchronize",
                "mc_dwell",
                "protocol_process",
                "mc_line"
            ],
            "called": [
                "report_feedback_message",
                "st_feed_hold",
                "report_realtime_status",
                "st_cycle_start",
                "report_alarm_message",
                "st_cycle_reinitialize"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003b98": {
            "entrypoint": "0x08003b98",
            "current_name": "process_gcode_command_08003b98",
            "code": "\n/* WARNING: Variable defined which should be unmapped: commandString-local */\n\nuint8_t processGcodeCommand_08003b98(char *commandString)\n\n{\n  byte tempByte;\n  uint8_t returnValue;\n  int result;\n  undefined4 convertedValue;\n  undefined4 extraReturnValue;\n  uint counter;\n  float gcodeValue;\n  undefined4 stackVariable;\n  char *localCommandString;\n  float parameterValue;\n  float commandParameter;\n  uint8_t characterCounter;\n  uint8_t helperVariable;\n  \n  if (*commandString != '$') {\n    returnValue = executeLine(commandString);\n    return returnValue;\n  }\n  characterCounter = '\\x01';\n  helperVariable = '\\0';\n  tempByte = commandString[1];\n  if (tempByte == 0) {\n    reportHelp();\n    return '\\0';\n  }\n  if ((0x58 < tempByte) || (tempByte < 0x23)) goto switchD_08003bdc_caseD_25;\n  switch(tempByte) {\n  case 0x23:\n    characterCounter = '\\x02';\n    if (commandString[2] != '\\0') {\n      return '\\x03';\n    }\n    reportGcodeParameters();\n    break;\n  case 0x24:\n    characterCounter = '\\x02';\n    if (commandString[2] != '\\0') {\n      return '\\x03';\n    }\n    reportGrblSettings();\n    break;\n  case 0x43:\n    characterCounter = '\\x02';\n    if (commandString[2] != '\\0') {\n      return '\\x03';\n    }\n    if (systemState.state == '\\a') {\n      resetMotorController();\n      reportFeedbackMessage('\\x05');\n    }\n    else {\n      if (systemState.state != '\\0') {\n        return '\\v';\n      }\n      systemState.state = '\\a';\n      reportFeedbackMessage('\\x04');\n    }\n    break;\n  case 0x47:\n    characterCounter = '\\x02';\n    if (commandString[2] != '\\0') {\n      return '\\x03';\n    }\n    reportGcodeModes();\n    break;\n  case 0x48:\n    if ((settingsFlags & 0x10) == 0) {\n      return '\\a';\n    }\n    if ((systemState.state != '\\0') && (systemState.state != '\\x06')) {\n      return '\\v';\n    }\n    goToHomePosition();\n    if (systemState.abort == '\\0') {\n      executeStartupProtocol();\n    }\n    break;\n  case 0x4e:\n    characterCounter = '\\x02';\n    if (commandString[2] == '\\0') {\n      for (helperVariable = '\\0'; helperVariable < 2; helperVariable = helperVariable + '\\x01') {\n        returnValue = readStartupLine(helperVariable,commandString);\n        if (returnValue == '\\0') {\n          reportStatusMessage('\\n');\n        }\n        else {\n          report_startup_commandString(helperVariable,commandString);\n        }\n      }\n      return '\\0';\n    }\n    helperVariable = '\\x01';\n  default:\nswitchD_08003bdc_caseD_25:\n    result = readFloat(commandString,&characterCounter,&commandParameter);\n    if (result == 0) {\n      return '\\x01';\n    }\n    tempByte = characterCounter + 1;\n    if (commandString[characterCounter] != '=') {\n      return '\\x03';\n    }\n    characterCounter = tempByte;\n    if (helperVariable == '\\0') {\n      result = readFloat(commandString,&characterCounter,&parameterValue);\n      if (result == 0) {\n        return '\\x01';\n      }\n      if (commandString[characterCounter] == '\\0') {\n        result = __aeabi_f2iz(commandParameter);\n        returnValue = storeGlobalSetting(result,gcodeValue);\n        return returnValue;\n      }\n      return '\\x03';\n    }\n    do {\n      commandString[(uint)characterCounter - (uint)tempByte] = commandString[characterCounter];\n      counter = (uint)characterCounter;\n      characterCounter = characterCounter + '\\x01';\n    } while (commandString[counter] != '\\0');\n    helperVariable = tempByte;\n    helperVariable = executeLine(commandString);\n    if (helperVariable != '\\0') {\n      return helperVariable;\n    }\n    convertedValue = __aeabi_f2d(commandParameter);\n    truncateDecimal((double)CONCAT44(commandString,stackVariable));\n    helperVariable = __aeabi_d2uiz(convertedValue,extraReturnValue);\n    storeStartupLine(helperVariable,commandString);\n    break;\n  case 0x58:\n    characterCounter = '\\x02';\n    if (commandString[2] != '\\0') {\n      return '\\x03';\n    }\n    if (systemState.state == '\\x06') {\n      reportFeedbackMessage('\\x03');\n      systemState.state = '\\0';\n    }\n  }\n  return '\\0';\n}\n\n",
            "renaming": {
                "FUN_08003b98": "process_gcode_command_08003b98",
                "line": "commandString",
                "uVar2": "returnValue",
                "iVar3": "result",
                "uVar4": "convertedValue",
                "extraout_r1": "extraReturnValue",
                "uVar5": "counter",
                "value_00": "gcodeValue",
                "uStack_20": "stackVariable",
                "line_local": "localCommandString",
                "value": "parameterValue",
                "parameter": "commandParameter",
                "char_counter": "characterCounter",
                "helper_var": "helperVariable",
                "bVar1": "tempByte",
                "sys": "systemState",
                "settings.flags": "settingsFlags",
                "settings_store_global_setting": "storeGlobalSetting",
                "settings_store_startup_line": "storeStartupLine",
                "gc_execute_line": "executeLine",
                "report_grbl_help": "reportHelp",
                "report_gcode_parameters": "reportGcodeParameters",
                "report_grbl_settings": "reportGrblSettings",
                "mc_reset": "resetMotorController",
                "report_feedback_message": "reportFeedbackMessage",
                "report_gcode_modes": "reportGcodeModes",
                "mc_go_home": "goToHomePosition",
                "protocol_execute_startup": "executeStartupProtocol",
                "settings_read_startup_line": "readStartupLine",
                "report_status_message": "reportStatusMessage",
                "read_float": "readFloat",
                "trunc": "truncateDecimal"
            },
            "calling": [
                "protocol_process"
            ],
            "called": [
                "report_status_message",
                "trunc",
                "report_grbl_settings",
                "report_feedback_message",
                "settings_read_startup_line",
                "__aeabi_d2uiz",
                "settings_store_startup_line",
                "mc_reset",
                "gc_execute_line",
                "mc_go_home",
                "report_grbl_help",
                "__aeabi_f2d",
                "read_float",
                "protocol_execute_startup",
                "__aeabi_f2iz",
                "report_gcode_modes",
                "settings_store_global_setting",
                "report_startup_line",
                "report_gcode_parameters"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003f34": {
            "entrypoint": "0x08003f34",
            "current_name": "read_and_execute_protocol_08003f34",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid read_and_execute_protocol_08003f34(void)\n\n{\n  uint8_t status;\n  byte byte_read;\n  uint counter;\n  uint8_t c;\n  \n  while( true ) {\n    while( true ) {\n      byte_read = serial_read();\n      if (byte_read == 0xff) {\n        return;\n      }\n      if ((byte_read == 10) || (byte_read == 0xd)) break;\n      if (in_comment == '\\0') {\n        if ((0x20 < byte_read) && (byte_read != 0x2f)) {\n          if (byte_read == 0x28) {\n            in_comment = '\\x01';\n          }\n          else if (char_counter == 0xff) {\n            print_status_message('\\r');\n            reset_line_buffer();\n          }\n          else if ((byte_read < 0x61) || (0x7a < byte_read)) {\n            counter = (uint)char_counter;\n            char_counter = char_counter + '\\x01';\n            input_line[counter] = byte_read;\n          }\n          else {\n            counter = (uint)char_counter;\n            char_counter = char_counter + '\\x01';\n            input_line[counter] = byte_read - 0x20;\n          }\n        }\n      }\n      else if (byte_read == 0x29) {\n        in_comment = '\\0';\n      }\n    }\n    execute_runtime();\n    if (abort_flag != '\\0') break;\n    if (char_counter == '\\0') {\n      print_status_message('\\0');\n    }\n    else {\n      input_line[char_counter] = '\\0';\n      status = protocol_execute_input_line(input_line);\n      print_status_message(status);\n    }\n    reset_line_buffer();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003f34": "read_and_execute_protocol_08003f34",
                "status_code": "status",
                "bVar1": "byte_read",
                "uVar2": "counter",
                "iscomment": "in_comment",
                "line": "input_line",
                "report_status_message": "print_status_message",
                "protocol_reset_line_buffer": "reset_line_buffer",
                "protocol_execute_runtime": "execute_runtime",
                "sys.abort": "abort_flag"
            },
            "calling": [
                "grbl_main"
            ],
            "called": [
                "serial_read",
                "report_status_message",
                "protocol_execute_line",
                "protocol_reset_line_buffer",
                "protocol_execute_runtime"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004030": {
            "entrypoint": "0x08004030",
            "current_name": "print_error_code_message_08004030",
            "code": "\nvoid printErrorCodeMessage_08004030(uint8_t errorCode)\n\n{\n  uint8_t localErrorCode;\n  \n  if (errorCode == '\\0') {\n    printPgmString(\"ok\\r\\n\");\n  }\n  else {\n    printPgmString(\"error: \");\n    switch(errorCode) {\n    case '\\x01':\n      printPgmString(\"Bad number format\");\n      break;\n    case '\\x02':\n      printPgmString(\"Expected command letter\");\n      break;\n    case '\\x03':\n      printPgmString(\"Unsupported statement\");\n      break;\n    case '\\x04':\n      printPgmString(\"Invalid radius\");\n      break;\n    case '\\x05':\n      printPgmString(\"Modal group violation\");\n      break;\n    case '\\x06':\n      printPgmString(\"Invalid statement\");\n      break;\n    case '\\a':\n      printPgmString(\"Setting disabled\");\n      break;\n    case '\\b':\n      printPgmString(\"Value < 0.0\");\n      break;\n    case '\\t':\n      printPgmString(\"Value < 3 usec\");\n      break;\n    case '\\n':\n      printPgmString(\"EEPROM read fail. Using defaults\");\n      break;\n    case '\\v':\n      printPgmString(\"Busy or queued\");\n      break;\n    case '\\f':\n      printPgmString(\"Alarm lock\");\n      break;\n    case '\\r':\n      printPgmString(\"Line overflow\");\n    }\n    printPgmString(\"\\r\\n\");\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004030": "print_error_code_message_08004030",
                "status_code": "errorCode",
                "status_code_local": "localErrorCode"
            },
            "calling": [
                "protocol_execute_line",
                "protocol_execute_startup",
                "gc_init",
                "settings_init",
                "protocol_process",
                "report_gcode_parameters"
            ],
            "called": [
                "printPgmString"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004148": {
            "entrypoint": "0x08004148",
            "current_name": "display_alarm_message_08004148",
            "code": "\nvoid displayAlarmMessage_08004148(int8_t code)\n\n{\n  int8_t localCode;\n  \n  printPgmString(\"ALARM: \");\n  if (code == -2) {\n    printPgmString(\"Abort during cycle\");\n  }\n  else if (code == -1) {\n    printPgmString(\"Hard limit\");\n  }\n  printPgmString(\". MPos?\\r\\n\");\n  delay_ms(500);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004148": "display_alarm_message_08004148",
                "alarm_code": "code",
                "alarm_code_local": "localCode"
            },
            "calling": [
                "protocol_execute_runtime"
            ],
            "called": [
                "delay_ms",
                "printPgmString"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080041a0": {
            "entrypoint": "0x080041a0",
            "current_name": "print_message_080041a0",
            "code": "\nvoid printMessage_080041a0(uint8_t code)\n\n{\n  uint8_t localCode;\n  \n  printPgmString(\"[\");\n  switch(code) {\n  case '\\x01':\n    printPgmString(\"Reset to continue\");\n    break;\n  case '\\x02':\n    printPgmString(\"\\'$H\\'|\\'$X\\' to unlock\");\n    break;\n  case '\\x03':\n    printPgmString(\"Caution: Unlocked\");\n    break;\n  case '\\x04':\n    printPgmString(\"Enabled\");\n    break;\n  case '\\x05':\n    printPgmString(\"Disabled\");\n  }\n  printPgmString(\"]\\r\\n\");\n  return;\n}\n\n",
            "renaming": {
                "FUN_080041a0": "print_message_080041a0",
                "message_code": "code",
                "message_code_local": "localCode"
            },
            "calling": [
                "grbl_main",
                "protocol_execute_line",
                "protocol_execute_runtime"
            ],
            "called": [
                "printPgmString"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004228": {
            "entrypoint": "0x08004228",
            "current_name": "print_grbl_version_08004228",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid printGrblVersion_08004228(void)\n\n{\n  printPgmString(\"\\r\\nGrbl 0.8c [\\'$\\' for help]\\r\\n\");\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004228": "print_grbl_version_08004228"
            },
            "calling": [
                "protocol_init"
            ],
            "called": [
                "printPgmString"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800423c": {
            "entrypoint": "0x0800423c",
            "current_name": "print_grbl_options_0800423c",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid printGrblOptions_0800423c(void)\n\n{\n  printPgmString(\n                \"$$ (view Grbl settings)\\r\\n$# (view # parameters)\\r\\n$G (view parser state)\\r\\n$N (view startup blocks)\\r\\n$x=value (save Grbl setting)\\r\\n$Nx=line (save startup block)\\r\\n$C (check gcode mode)\\r\\n$X (kill alarm lock)\\r\\n$H (run homing cycle)\\r\\n~ (cycle start)\\r\\n! (feed hold)\\r\\n? (current status)\\r\\nctrl-x (reset Grbl)\\r\\n\"\n                );\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800423c": "print_grbl_options_0800423c"
            },
            "calling": [
                "protocol_execute_line"
            ],
            "called": [
                "printPgmString"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004250": {
            "entrypoint": "0x08004250",
            "current_name": "print_settings_08004250",
            "code": "\n/* WARNING: UxStepSizekxStepSizeowxStepSize callixStepSizeg coxStepSizevexStepSizetioxStepSize */\n\nvoid printSettings_08004250(void)\n\n{\n  float xStepSize;\n  float yStepSize;\n  float zStepSize;\n  float defaultFeed;\n  float defaultSeek;\n  float acceleration;\n  float junctionDeviation;\n  float arcSegment;\n  float homingFeed;\n  float homingSeek;\n  float homingPullOff;\n  \n  prixStepSizetPgmStrixStepSizeg(\"$0=\");\n  prixStepSizetFloat(xStepSize);\n  prixStepSizetPgmStrixStepSizeg(\" (x, step/mm)\\r\\xStepSize$1=\");\n  prixStepSizetFloat(yStepSize);\n  prixStepSizetPgmStrixStepSizeg(\" (y, step/mm)\\r\\xStepSize$2=\");\n  prixStepSizetFloat(zStepSize);\n  prixStepSizetPgmStrixStepSizeg(\" (z, step/mm)\\r\\xStepSize$3=\");\n  prixStepSizetIxStepSizeteger((uixStepSizet)settixStepSizegs.pulse_microsecoxStepSizeds);\n  prixStepSizetPgmStrixStepSizeg(\" (step pulse, usec)\\r\\xStepSize$4=\");\n  prixStepSizetFloat(defaultFeed);\n  prixStepSizetPgmStrixStepSizeg(\" (default feed, mm/mixStepSize)\\r\\xStepSize$5=\");\n  prixStepSizetFloat(defaultSeek);\n  prixStepSizetPgmStrixStepSizeg(\" (default seek, mm/mixStepSize)\\r\\xStepSize$6=\");\n  prixStepSizetIxStepSizeteger((uixStepSizet)settixStepSizegs.step_ixStepSizevert_mask);\n  prixStepSizetPgmStrixStepSizeg(\" (step port ixStepSizevert mask, ixStepSizet:\");\n  prixStepSizet_uixStepSizet16_base2(settixStepSizegs.step_ixStepSizevert_mask);\n  prixStepSizetPgmStrixStepSizeg(\")\\r\\xStepSize$7=\");\n  prixStepSizetIxStepSizeteger((uixStepSizet)settixStepSizegs.stepper_idle_lock_time);\n  prixStepSizetPgmStrixStepSizeg(\" (step idle delay, msec)\\r\\xStepSize$8=\");\n  acceleration = (float)__aeabi_fdiv(settixStepSizegs.acceleratioxStepSize,0x45610000);\n  prixStepSizetFloat(acceleration);\n  prixStepSizetPgmStrixStepSizeg(\" (acceleratioxStepSize, mm/sec^2)\\r\\xStepSize$9=\");\n  prixStepSizetFloat(junctionDeviation);\n  prixStepSizetPgmStrixStepSizeg(\" (juxStepSizectioxStepSize deviatioxStepSize, mm)\\r\\xStepSize$10=\");\n  prixStepSizetFloat(arcSegment);\n  prixStepSizetPgmStrixStepSizeg(\" (arc, mm/segmexStepSizet)\\r\\xStepSize$11=\");\n  prixStepSizetIxStepSizeteger((uixStepSizet)settixStepSizegs.xStepSize_arc_correctioxStepSize);\n  prixStepSizetPgmStrixStepSizeg(\" (xStepSize-arc correctioxStepSize, ixStepSizet)\\r\\xStepSize$12=\");\n  prixStepSizetIxStepSizeteger((uixStepSizet)settixStepSizegs.decimal_places);\n  prixStepSizetPgmStrixStepSizeg(\" (xStepSize-decimals, ixStepSizet)\\r\\xStepSize$13=\");\n  prixStepSizetIxStepSizeteger((uixStepSizet)((settixStepSizegs.flags & 1) != 0));\n  prixStepSizetPgmStrixStepSizeg(\" (report ixStepSizeches, bool)\\r\\xStepSize$14=\");\n  prixStepSizetIxStepSizeteger((uixStepSizet)((settixStepSizegs.flags & 2) != 0));\n  prixStepSizetPgmStrixStepSizeg(\" (auto start, bool)\\r\\xStepSize$15=\");\n  prixStepSizetIxStepSizeteger((uixStepSizet)((settixStepSizegs.flags & 4) != 0));\n  prixStepSizetPgmStrixStepSizeg(\" (ixStepSizevert step exStepSizeable, bool)\\r\\xStepSize$16=\");\n  prixStepSizetIxStepSizeteger((uixStepSizet)((settixStepSizegs.flags & 8) != 0));\n  prixStepSizetPgmStrixStepSizeg(\" (hard limits, bool)\\r\\xStepSize$17=\");\n  prixStepSizetIxStepSizeteger((uixStepSizet)((settixStepSizegs.flags & 0x10) != 0));\n  prixStepSizetPgmStrixStepSizeg(\" (homixStepSizeg cycle, bool)\\r\\xStepSize$18=\");\n  prixStepSizetIxStepSizeteger((uixStepSizet)settixStepSizegs.homixStepSizeg_dir_mask);\n  prixStepSizetPgmStrixStepSizeg(\" (homixStepSizeg dir ixStepSizevert mask, ixStepSizet:\");\n  prixStepSizet_uixStepSizet16_base2(settixStepSizegs.homixStepSizeg_dir_mask);\n  prixStepSizetPgmStrixStepSizeg(\")\\r\\xStepSize$19=\");\n  prixStepSizetFloat(homingFeed);\n  prixStepSizetPgmStrixStepSizeg(\" (homixStepSizeg feed, mm/mixStepSize)\\r\\xStepSize$20=\");\n  prixStepSizetFloat(homingSeek);\n  prixStepSizetPgmStrixStepSizeg(\" (homixStepSizeg seek, mm/mixStepSize)\\r\\xStepSize$21=\");\n  prixStepSizetIxStepSizeteger((uixStepSizet)settixStepSizegs.homixStepSizeg_debouxStepSizece_delay);\n  prixStepSizetPgmStrixStepSizeg(\" (homixStepSizeg debouxStepSizece, msec)\\r\\xStepSize$22=\");\n  prixStepSizetFloat(homingPullOff);\n  prixStepSizetPgmStrixStepSizeg(\" (homixStepSizeg pull-off, mm)\\r\\xStepSize$23=\");\n  prixStepSizetIxStepSizeteger((uixStepSizet)settixStepSizegs.dirxStepSize_ixStepSizevert_mask);\n  prixStepSizetPgmStrixStepSizeg(\" (dir port ixStepSizevert mask, ixStepSizet:\");\n  prixStepSizet_uixStepSizet16_base2(settixStepSizegs.dirxStepSize_ixStepSizevert_mask);\n  prixStepSizetPgmStrixStepSizeg(\")\\r\\xStepSize\");\n  returxStepSize;\n}\n\n",
            "renaming": {
                "FUN_08004250": "print_settings_08004250",
                "n": "xStepSize",
                "n_00": "yStepSize",
                "n_01": "zStepSize",
                "n_02": "defaultFeed",
                "n_03": "defaultSeek",
                "n_04": "acceleration",
                "n_05": "junctionDeviation",
                "n_06": "arcSegment",
                "n_07": "homingFeed",
                "n_08": "homingSeek",
                "n_09": "homingPullOff"
            },
            "calling": [
                "protocol_execute_line",
                "settings_init"
            ],
            "called": [
                "printFloat",
                "__aeabi_fdiv",
                "printPgmString",
                "print_uint16_base2",
                "printInteger"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080044e8": {
            "entrypoint": "0x080044e8",
            "current_name": "print_g_code_coordinates_080044e8",
            "code": "\n/* WARNING: Unknown callindexng conventindexon */\n\nvoindexd printGCodeCoordinates_080044e8(voindexd)\n\n{\n  uindexnt8_t returnValue;\n  float value1;\n  float value2;\n  float value3;\n  float value4;\n  float value5;\n  float value6;\n  float value7;\n  float value8;\n  float value9;\n  float value10;\n  float value11;\n  float value12;\n  float floatVar;\n  float value13;\n  float value14;\n  undefindexned8 convertedVar;\n  float coordinates [3];\n  uindexnt8_t index;\n  uindexnt8_t coordSelect;\n  \n  coordSelect = '\\0';\n  whindexle( true ) {\n    indexf (7 < coordSelect) {\n      prindexntPgmStrindexng(\"[G92:\");\n      floatVar = value12;\n      for (index = '\\0'; index < 3; index = index + '\\x01') {\n        indexf ((settindexngs.flags & 1) == 0) {\n          prindexntFloat(floatVar);\n        }\n        else {\n          convertedVar = __aeabindex_f2d(gc.coord_offset[index]);\n          convertedVar = __muldf3((indexnt)convertedVar,(indexnt)((ulonglong)convertedVar >> 0x20),0x57e16865,0x3fa42851);\n          floatVar = (float)__truncdfsf2((indexnt)convertedVar,(indexnt)((ulonglong)convertedVar >> 0x20));\n          prindexntFloat(floatVar);\n        }\n        indexf (index < 2) {\n          prindexntPgmStrindexng(\",\");\n          floatVar = value13;\n        }\n        else {\n          prindexntPgmStrindexng(\"]\\r\\n\");\n          floatVar = value14;\n        }\n      }\n      return;\n    }\n    returnValue = settindexngs_read_coordinates(coordSelect,coordinates);\n    indexf (returnValue == '\\0') break;\n    prindexntPgmStrindexng(\"[G\");\n    floatVar = value1;\n    swindextch(coordSelect) {\n    case '\\0':\n      prindexntPgmStrindexng(\"54:\");\n      floatVar = value2;\n      break;\n    case '\\x01':\n      prindexntPgmStrindexng(\"55:\");\n      floatVar = value3;\n      break;\n    case '\\x02':\n      prindexntPgmStrindexng(\"56:\");\n      floatVar = value4;\n      break;\n    case '\\x03':\n      prindexntPgmStrindexng(\"57:\");\n      floatVar = value5;\n      break;\n    case '\\x04':\n      prindexntPgmStrindexng(\"58:\");\n      floatVar = value6;\n      break;\n    case '\\x05':\n      prindexntPgmStrindexng(\"59:\");\n      floatVar = value7;\n      break;\n    case '\\x06':\n      prindexntPgmStrindexng(\"28:\");\n      floatVar = value8;\n      break;\n    case '\\a':\n      prindexntPgmStrindexng(\"30:\");\n      floatVar = value9;\n    }\n    for (index = '\\0'; index < 3; index = index + '\\x01') {\n      indexf ((settindexngs.flags & 1) == 0) {\n        prindexntFloat(floatVar);\n      }\n      else {\n        convertedVar = __aeabindex_f2d(coordinates[index]);\n        convertedVar = __muldf3((indexnt)convertedVar,(indexnt)((ulonglong)convertedVar >> 0x20),0x57e16865,0x3fa42851);\n        floatVar = (float)__truncdfsf2((indexnt)convertedVar,(indexnt)((ulonglong)convertedVar >> 0x20));\n        prindexntFloat(floatVar);\n      }\n      indexf (index < 2) {\n        prindexntPgmStrindexng(\",\");\n        floatVar = value10;\n      }\n      else {\n        prindexntPgmStrindexng(\"]\\r\\n\");\n        floatVar = value11;\n      }\n    }\n    coordSelect = coordSelect + '\\x01';\n  }\n  report_status_message('\\n');\n  return;\n}\n\n",
            "renaming": {
                "FUN_080044e8": "print_g_code_coordinates_080044e8",
                "uVar1": "returnValue",
                "extraout_s0": "value1",
                "extraout_s0_00": "value2",
                "extraout_s0_01": "value3",
                "extraout_s0_02": "value4",
                "extraout_s0_03": "value5",
                "extraout_s0_04": "value6",
                "extraout_s0_05": "value7",
                "extraout_s0_06": "value8",
                "extraout_s0_07": "value9",
                "extraout_s0_08": "value10",
                "extraout_s0_09": "value11",
                "extraout_s0_10": "value12",
                "extraout_s0_11": "value13",
                "extraout_s0_12": "value14",
                "fVar2": "floatVar",
                "uVar3": "convertedVar",
                "coord_data": "coordinates",
                "i": "index",
                "coord_select": "coordSelect"
            },
            "calling": [
                "protocol_execute_line"
            ],
            "called": [
                "report_status_message",
                "__aeabi_f2d",
                "__muldf3",
                "printFloat",
                "__truncdfsf2",
                "settings_read_coord_data",
                "printPgmString"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080046d0": {
            "entrypoint": "0x080046d0",
            "current_name": "print_coordinate_info_080046d0",
            "code": "\n/* WARNING: UfeedRateValuekfeedRateValueowfeedRateValue callifeedRateValueg cofeedRateValuevefeedRateValuetiofeedRateValue */\n\nvoid printCoordinateInfo_080046d0(void)\n\n{\n  float feedRateValue;\n  float truncatedFeedRateValue;\n  ufeedRateValuedefifeedRateValueed8 uVar1;\n  \n  switch(motionMode) {\n  case '\\0':\n    prifeedRateValuetPgmStrifeedRateValueg(\"[G0\");\n    break;\n  case '\\x01':\n    prifeedRateValuetPgmStrifeedRateValueg(\"[G1\");\n    break;\n  case '\\x02':\n    prifeedRateValuetPgmStrifeedRateValueg(\"[G2\");\n    break;\n  case '\\x03':\n    prifeedRateValuetPgmStrifeedRateValueg(\"[G3\");\n    break;\n  case '\\x04':\n    prifeedRateValuetPgmStrifeedRateValueg(\"[G80\");\n  }\n  prifeedRateValuetPgmStrifeedRateValueg(\" G\");\n  prifeedRateValuetIfeedRateValueteger(coordinateSelect + 0x36);\n  if (axis0 == '\\0') {\n    if (axis1 == '\\x01') {\n      prifeedRateValuetPgmStrifeedRateValueg(\" G17\");\n    }\n    else {\n      prifeedRateValuetPgmStrifeedRateValueg(\" G18\");\n    }\n  }\n  else {\n    prifeedRateValuetPgmStrifeedRateValueg(\" G19\");\n  }\n  if (inchesMode == '\\0') {\n    prifeedRateValuetPgmStrifeedRateValueg(\" G21\");\n  }\n  else {\n    prifeedRateValuetPgmStrifeedRateValueg(\" G20\");\n  }\n  if (absoluteMode == '\\0') {\n    prifeedRateValuetPgmStrifeedRateValueg(\" G91\");\n  }\n  else {\n    prifeedRateValuetPgmStrifeedRateValueg(\" G90\");\n  }\n  if (inverseFeedRateMode == '\\0') {\n    prifeedRateValuetPgmStrifeedRateValueg(\" G94\");\n  }\n  else {\n    prifeedRateValuetPgmStrifeedRateValueg(\" G93\");\n  }\n  if (programFlow == '\\x02') {\n    prifeedRateValuetPgmStrifeedRateValueg(\" M2\");\n  }\n  else if (programFlow < 3) {\n    if (programFlow == '\\0') {\n      prifeedRateValuetPgmStrifeedRateValueg(\" M0\");\n    }\n    else if (programFlow == '\\x01') {\n      prifeedRateValuetPgmStrifeedRateValueg(\" M1\");\n    }\n  }\n  if (spindleDirection == '\\x01') {\n    prifeedRateValuetPgmStrifeedRateValueg(\" M3\");\n  }\n  else if (spindleDirection < '\\x02') {\n    if (spindleDirection == -1) {\n      prifeedRateValuetPgmStrifeedRateValueg(\" M4\");\n    }\n    else if (spindleDirection == '\\0') {\n      prifeedRateValuetPgmStrifeedRateValueg(\" M5\");\n    }\n  }\n  if (coolantMode == '\\x02') {\n    prifeedRateValuetPgmStrifeedRateValueg(\" M7\");\n  }\n  else if (coolantMode < 3) {\n    if (coolantMode == '\\0') {\n      prifeedRateValuetPgmStrifeedRateValueg(\" M9\");\n    }\n    else if (coolantMode == '\\x01') {\n      prifeedRateValuetPgmStrifeedRateValueg(\" M8\");\n    }\n  }\n  prifeedRateValuetPgmStrifeedRateValueg(\" T\");\n  prifeedRateValuetIfeedRateValueteger((uifeedRateValuet)selectedTool);\n  prifeedRateValuetPgmStrifeedRateValueg(\" F\");\n  if (inchesMode == '\\0') {\n    prifeedRateValuetFloat(feedRateValue);\n  }\n  else {\n    uVar1 = __aeabi_f2d(feedRate);\n    uVar1 = __muldf3((ifeedRateValuet)uVar1,(ifeedRateValuet)((ulofeedRateValueglofeedRateValueg)uVar1 >> 0x20),0x57e16865,0x3fa42851);\n    truncatedFeedRateValue = (float)__trufeedRateValuecdfsf2((ifeedRateValuet)uVar1,(ifeedRateValuet)((ulofeedRateValueglofeedRateValueg)uVar1 >> 0x20));\n    prifeedRateValuetFloat(truncatedFeedRateValue);\n  }\n  prifeedRateValuetPgmStrifeedRateValueg(\"]\\r\\feedRateValue\");\n  returfeedRateValue;\n}\n\n",
            "renaming": {
                "FUN_080046d0": "print_coordinate_info_080046d0",
                "gc.motion_mode": "motionMode",
                "gc.coord_select": "coordinateSelect",
                "gc.plane_axis_0": "axis0",
                "gc.plane_axis_1": "axis1",
                "gc.inches_mode": "inchesMode",
                "gc.absolute_mode": "absoluteMode",
                "gc.inverse_feed_rate_mode": "inverseFeedRateMode",
                "gc.program_flow": "programFlow",
                "gc.spindle_direction": "spindleDirection",
                "gc.coolant_mode": "coolantMode",
                "gc.tool": "selectedTool",
                "gc.feed_rate": "feedRate",
                "n": "feedRateValue",
                "n_00": "truncatedFeedRateValue"
            },
            "calling": [
                "protocol_execute_line"
            ],
            "called": [
                "__aeabi_f2d",
                "__muldf3",
                "printFloat",
                "__truncdfsf2",
                "printPgmString",
                "printInteger"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004900": {
            "entrypoint": "0x08004900",
            "current_name": "print_numbered_line_08004900",
            "code": "\nvoid printNumberedLine_08004900(uilineNumbert8_t lineNumber,char *text)\n\n{\n  char *text_local;\n  uilineNumbert8_t lineNumber_local;\n  \n  prilineNumbertPgmStrilineNumberg(\"$N\");\n  prilineNumbertIlineNumberteger((uilineNumbert)lineNumber);\n  prilineNumbertPgmStrilineNumberg(\"=\");\n  prilineNumbertStrilineNumberg(text);\n  prilineNumbertPgmStrilineNumberg(\"\\r\\lineNumber\");\n  returlineNumber;\n}\n\n",
            "renaming": {
                "FUN_08004900": "print_numbered_line_08004900",
                "n": "lineNumber",
                "line": "text"
            },
            "calling": [
                "protocol_execute_line"
            ],
            "called": [
                "printString",
                "printPgmString",
                "printInteger"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004940": {
            "entrypoint": "0x08004940",
            "current_name": "print_position_info_08004940",
            "code": "\n/* WARNING: Unknown callcounterng conventcounteron */\n\nvocounterd printPositionInfo_08004940(vocounterd)\n\n{\n  undefcounterned4 convertedCoordinate;\n  float formattedCoordinate;\n  float temporaryFloat1;\n  float temporaryFloat2;\n  float temporaryFloat3;\n  float temporaryFloat4;\n  undefcounterned8 temporaryDouble1;\n  undefcounterned8 temporaryDouble2;\n  float formattedPosition [3];\n  counternt32_t currentPosition [3];\n  ucounternt8_t counter;\n  \n  currentPosition[0] = sys.poscountertcounteron[0];\n  currentPosition[1] = sys.poscountertcounteron[1];\n  currentPosition[2] = sys.poscountertcounteron[2];\n  swcountertch(sys.state) {\n  case '\\0':\n    prcounterntPgmStrcounterng(\"<Idle\");\n    break;\n  case '\\x02':\n    prcounterntPgmStrcounterng(\"<Queue\");\n    break;\n  case '\\x03':\n    prcounterntPgmStrcounterng(\"<Run\");\n    break;\n  case '\\x04':\n    prcounterntPgmStrcounterng(\"<Hold\");\n    break;\n  case '\\x05':\n    prcounterntPgmStrcounterng(\"<Home\");\n    break;\n  case '\\x06':\n    prcounterntPgmStrcounterng(\"<Alarm\");\n    break;\n  case '\\a':\n    prcounterntPgmStrcounterng(\"<Check\");\n  }\n  prcounterntPgmStrcounterng(\",MPos:\");\n  for (counter = '\\0'; counter < 3; counter = counter + '\\x01') {\n    convertedCoordinate = __floatscountersf(currentPosition[counter]);\n    formattedCoordinate = (float)__aeabcounter_fdcounterv(convertedCoordinate,settcounterngs.steps_per_mm[counter]);\n    formattedPosition[counter] = formattedCoordinate;\n    formattedCoordinate = temporaryFloat1;\n    counterf ((settcounterngs.flags & 1) != 0) {\n      temporaryDouble1 = __aeabcounter_f2d(formattedPosition[counter]);\n      temporaryDouble1 = __muldf3((counternt)temporaryDouble1,(counternt)((ulonglong)temporaryDouble1 >> 0x20),0x57e16865,0x3fa42851);\n      formattedCoordinate = (float)__truncdfsf2((counternt)temporaryDouble1,(counternt)((ulonglong)temporaryDouble1 >> 0x20));\n      formattedPosition[counter] = formattedCoordinate;\n      formattedCoordinate = temporaryFloat2;\n    }\n    prcounterntFloat(formattedCoordinate);\n    prcounterntPgmStrcounterng(\",\");\n  }\n  prcounterntPgmStrcounterng(\"WPos:\");\n  for (counter = '\\0'; counter < 3; counter = counter + '\\x01') {\n    counterf ((settcounterngs.flags & 1) == 0) {\n      formattedCoordinate = formattedPosition[counter];\n      convertedCoordinate = __addsf3(gc.coord_system[counter],gc.coord_offset[counter]);\n      formattedCoordinate = (float)__aeabcounter_fsub(formattedCoordinate,convertedCoordinate);\n      formattedPosition[counter] = formattedCoordinate;\n      formattedCoordinate = temporaryFloat4;\n    }\n    else {\n      temporaryDouble1 = __aeabcounter_f2d(formattedPosition[counter]);\n      convertedCoordinate = __addsf3(gc.coord_system[counter],gc.coord_offset[counter]);\n      temporaryDouble2 = __aeabcounter_f2d(convertedCoordinate);\n      temporaryDouble2 = __muldf3((counternt)temporaryDouble2,(counternt)((ulonglong)temporaryDouble2 >> 0x20),0x57e16865,0x3fa42851);\n      temporaryDouble1 = __subdf3((counternt)temporaryDouble1,(counternt)((ulonglong)temporaryDouble1 >> 0x20),(counternt)temporaryDouble2,\n                       (counternt)((ulonglong)temporaryDouble2 >> 0x20));\n      formattedCoordinate = (float)__truncdfsf2((counternt)temporaryDouble1,(counternt)((ulonglong)temporaryDouble1 >> 0x20));\n      formattedPosition[counter] = formattedCoordinate;\n      formattedCoordinate = temporaryFloat3;\n    }\n    prcounterntFloat(formattedCoordinate);\n    counterf (counter < 2) {\n      prcounterntPgmStrcounterng(\",\");\n    }\n  }\n  prcounterntPgmStrcounterng(\">\\r\\n\");\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004940": "print_position_info_08004940",
                "print_position": "formattedPosition",
                "current_position": "currentPosition",
                "i": "counter",
                "uVar1": "convertedCoordinate",
                "fVar2": "formattedCoordinate",
                "extraout_s0": "temporaryFloat1",
                "extraout_s0_00": "temporaryFloat2",
                "extraout_s0_01": "temporaryFloat3",
                "extraout_s0_02": "temporaryFloat4",
                "uVar3": "temporaryDouble1",
                "uVar4": "temporaryDouble2"
            },
            "calling": [
                "protocol_execute_runtime"
            ],
            "called": [
                "__floatsisf",
                "__aeabi_f2d",
                "__muldf3",
                "printFloat",
                "__truncdfsf2",
                "__aeabi_fsub",
                "__addsf3",
                "__aeabi_fdiv",
                "printPgmString",
                "__subdf3"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004bc0": {
            "entrypoint": "0x08004bc0",
            "current_name": "write_line_to_eeprom_08004bc0",
            "code": "\nvoid write_line_to_eeprom_08004bc0(uiline_indext8_t line_index,char *data)\n\n{\n  char *local_data;\n  uiline_indext8_t local_line_index;\n  uiline_indext16_t address;\n  \n  memcpy_to_eeprom_with_checksum((uiline_indext)(ushort)((ushort)line_index * 0x101 + 0x300),data,0x100);\n  returline_index;\n}\n\n",
            "renaming": {
                "FUN_08004bc0": "write_line_to_eeprom_08004bc0",
                "n": "line_index",
                "line": "data",
                "line_local": "local_data",
                "n_local": "local_line_index",
                "addr": "address"
            },
            "calling": [
                "protocol_execute_line",
                "settings_read_startup_line"
            ],
            "called": [
                "memcpy_to_eeprom_with_checksum"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004bf4": {
            "entrypoint": "0x08004bf4",
            "current_name": "write_coord_data_to_eeprom_08004bf4",
            "code": "\nvoid writeCoordDataToEEPROM_08004bf4(uint8_t selection,float *data)\n\n{\n  float *localData;\n  uint8_t localSelection;\n  uint16_t address;\n  \n  memcpy_to_eeprom_with_checksum\n            ((uint)(ushort)((ushort)selection * 0xd + 0x200),(char *)data,0xc);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004bf4": "write_coord_data_to_eeprom_08004bf4",
                "coord_select": "selection",
                "coord_data": "data",
                "coord_data_local": "localData",
                "coord_select_local": "localSelection",
                "addr": "address"
            },
            "calling": [
                "gc_execute_line",
                "settings_read_coord_data"
            ],
            "called": [
                "memcpy_to_eeprom_with_checksum"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004c2a": {
            "entrypoint": "0x08004c2a",
            "current_name": "write_settings_to_eeprom_08004c2a",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid write_settings_to_eeprom_08004c2a(void)\n\n{\n  eeprom_put_char(0,'\\x05');\n  memcpy_to_eeprom_with_checksum(1,(char *)&settings,0x40);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004c2a": "write_settings_to_eeprom_08004c2a"
            },
            "calling": [
                "settings_reset",
                "settings_store_global_setting"
            ],
            "called": [
                "eeprom_put_char",
                "memcpy_to_eeprom_with_checksum"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004c48": {
            "entrypoint": "0x08004c48",
            "current_name": "initialize_settings_08004c48",
            "code": "\nvoid initializeSettings_08004c48(_Bool shouldResetAll)\n\n{\n  _Bool localResetAll;\n  \n  if (shouldResetAll) {\n    settings.xStepsPerMillimeter = 157.4803;\n    settings.yStepsPerMillimeter = 157.4803;\n    settings.zStepsPerMillimeter = 157.4803;\n    settings.pulseMicroseconds = '\\n';\n    settings.defaultFeedRate = 250.0;\n    settings.defaultSeekRate = 500.0;\n    settings.acceleration = 36000.0;\n    settings.mmPerArcSegment = 0.1;\n    settings.stepInvertMask = 0;\n    settings.directionInvertMask = 0xa80;\n    settings.junctionDeviation = 0.05;\n  }\n  settings.flags = '\\x12';\n  settings.homingDirectionMask = 0;\n  settings.homingFeedRate = 25.0;\n  settings.homingSeekRate = 250.0;\n  settings.homingDebounceDelay = 100;\n  settings.homingPulloff = 1.0;\n  settings.stepperIdleLockTime = '\\x19';\n  settings.decimalPlaces = '\\x03';\n  settings.arcCorrectionValue = '\\x19';\n  write_global_settings();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004c48": "initialize_settings_08004c48",
                "reset_all": "shouldResetAll",
                "reset_all_local": "localResetAll",
                "settings.steps_per_mm[0]": "settings.xStepsPerMillimeter",
                "settings.steps_per_mm[1]": "settings.yStepsPerMillimeter",
                "settings.steps_per_mm[2]": "settings.zStepsPerMillimeter",
                "settings.pulse_microseconds": "settings.pulseMicroseconds",
                "settings.default_feed_rate": "settings.defaultFeedRate",
                "settings.default_seek_rate": "settings.defaultSeekRate",
                "settings.mm_per_arc_segment": "settings.mmPerArcSegment",
                "settings.step_invert_mask": "settings.stepInvertMask",
                "settings.dirn_invert_mask": "settings.directionInvertMask",
                "settings.junction_deviation": "settings.junctionDeviation",
                "settings.homing_dir_mask": "settings.homingDirectionMask",
                "settings.homing_feed_rate": "settings.homingFeedRate",
                "settings.homing_seek_rate": "settings.homingSeekRate",
                "settings.homing_debounce_delay": "settings.homingDebounceDelay",
                "settings.homing_pulloff": "settings.homingPulloff",
                "settings.stepper_idle_lock_time": "settings.stepperIdleLockTime",
                "settings.decimal_places": "settings.decimalPlaces",
                "settings.n_arc_correction": "settings.arcCorrectionValue"
            },
            "calling": [
                "read_global_settings",
                "settings_init"
            ],
            "called": [
                "write_global_settings"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004d2c": {
            "entrypoint": "0x08004d2c",
            "current_name": "retrieve_and_store_startup_line_08004d2c",
            "code": "\nuilineNumbert8_t retrieveAndStoreStartupLine_08004d2c(uilineNumbert8_t lineNumber,char *lineBuffer)\n\n{\n  ilineNumbert copyResult;\n  char *localLineBuffer;\n  uilineNumbert8_t localLineNumber;\n  uilineNumbert16_t address;\n  \n  copyResult = memcpy_from_eeprom_with_checksum(lineBuffer,(uilineNumbert)(ushort)((ushort)lineNumber * 0x101 + 0x300),0x100);\n  if (copyResult == 0) {\n    *lineBuffer = '\\0';\n    settilineNumbergs_store_startup_lineBuffer(lineNumber,lineBuffer);\n  }\n  returlineNumber copyResult != 0;\n}\n\n",
            "renaming": {
                "FUN_08004d2c": "retrieve_and_store_startup_line_08004d2c",
                "n": "lineNumber",
                "line": "lineBuffer",
                "line_local": "localLineBuffer",
                "n_local": "localLineNumber",
                "addr": "address",
                "iVar1": "copyResult"
            },
            "calling": [
                "protocol_execute_line",
                "protocol_execute_startup"
            ],
            "called": [
                "settings_store_startup_line",
                "memcpy_from_eeprom_with_checksum"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004d7c": {
            "entrypoint": "0x08004d7c",
            "current_name": "read_and_write_data_from_eeprom_08004d7c",
            "code": "\nuint8_t readAndWriteDataFromEEPROM_08004d7c(uint8_t selection,float *data)\n\n{\n  int iVar1;\n  float *localData;\n  uint8_t localSelection;\n  uint16_t address;\n  \n  iVar1 = readDataFromEEPROM\n                    ((char *)data,(uint)(ushort)((ushort)selection * 0xd + 0x200),0xc);\n  if (iVar1 == 0) {\n    clearData(data,0,0xc);\n    writeData(selection,data);\n  }\n  return iVar1 != 0;\n}\n\n",
            "renaming": {
                "FUN_08004d7c": "read_and_write_data_from_eeprom_08004d7c",
                "coord_select": "selection",
                "coord_data": "data",
                "coord_data_local": "localData",
                "coord_select_local": "localSelection",
                "addr": "address",
                "memcpy_from_eeprom_with_checksum": "readDataFromEEPROM",
                "memset": "clearData",
                "settings_write_coord_data": "writeData"
            },
            "calling": [
                "gc_execute_line",
                "gc_init",
                "settings_init",
                "report_gcode_parameters"
            ],
            "called": [
                "settings_write_coord_data",
                "memcpy_from_eeprom_with_checksum",
                "memset"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004dd2": {
            "entrypoint": "0x08004dd2",
            "current_name": "check_eeprom_version_08004dd2",
            "code": "\n/* WARNING: Unknown calling convention */\n\nuint8_t checkEEPROMVersion_08004dd2(void)\n\n{\n  byte eepromVersion;\n  int copyResult;\n  uint8_t expectedVersion;\n  \n  eepromVersion = eeprom_get_char(0);\n  if (eepromVersion == 5) {\n    copyResult = memcpy_from_eeprom_with_checksum((char *)&settings,1,0x40);\n    if (copyResult == 0) {\n      return '\\0';\n    }\n  }\n  else {\n    if (4 < eepromVersion) {\n      return '\\0';\n    }\n    copyResult = memcpy_from_eeprom_with_checksum((char *)&settings,1,0x28);\n    if (copyResult == 0) {\n      return '\\0';\n    }\n    settings_reset(false);\n  }\n  return '\\x01';\n}\n\n",
            "renaming": {
                "FUN_08004dd2": "check_eeprom_version_08004dd2",
                "bVar1": "eepromVersion",
                "iVar2": "copyResult",
                "version": "expectedVersion"
            },
            "calling": [
                "settings_init"
            ],
            "called": [
                "settings_reset",
                "eeprom_get_char",
                "memcpy_from_eeprom_with_checksum"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004e30": {
            "entrypoint": "0x08004e30",
            "current_name": "update_settings_08004e30",
            "code": "\n/* WARNING: Variable defined which should be unmapped: settingValue-local */\n\nuint8_t updateSettings_08004e30(int settingIndex,float settingValue)\n\n{\n  int iVar1;\n  undefined4 uVar2;\n  float comparisonValue;\n  undefined4 extraout_r1;\n  undefined4 extraout_r1_00;\n  undefined4 extraout_r1_01;\n  undefined4 extraout_r1_02;\n  undefined4 extraout_r1_03;\n  undefined4 extraout_r1_04;\n  undefined4 extraout_r1_05;\n  undefined4 extraout_r1_06;\n  float localValue;\n  int localIndex;\n  \n  switch(settingIndex) {\n  case 0:\n  case 1:\n  case 2:\n    iVar1 = isLessThanOrEqualTo(settingValue,comparisonValue,0);\n    if (iVar1 != 0) {\n      return '\\b';\n    }\n    settings.steps_per_mm[settingIndex] = comparisonValue;\n    break;\n  case 3:\n    iVar1 = isLessThan(comparisonValue,0x40400000);\n    if (iVar1 != 0) {\n      return '\\t';\n    }\n    uVar2 = floatToDouble(comparisonValue);\n    roundValue((double)concatenateValues(settingIndex,comparisonValue));\n    settings.pulse_microseconds = doubleToUnsignedInt(uVar2,extraout_r1);\n    break;\n  case 4:\n    settings.default_feed_rate = comparisonValue;\n    break;\n  case 5:\n    settings.default_seek_rate = comparisonValue;\n    break;\n  case 6:\n    uVar2 = floatToDouble(comparisonValue);\n    trunc((double)concatenateValues(settingIndex,comparisonValue));\n    settings.step_invert_mask = doubleToUnsignedInt(uVar2,extraout_r1_00);\n    break;\n  case 7:\n    uVar2 = floatToDouble(comparisonValue);\n    roundValue((double)concatenateValues(settingIndex,comparisonValue));\n    settings.stepper_idle_lock_time = doubleToUnsignedInt(uVar2,extraout_r1_01);\n    break;\n  case 8:\n    uVar2 = multiplyFloats(comparisonValue,0x42700000);\n    settings.acceleration = (float)multiplyFloats(uVar2,0x42700000);\n    break;\n  case 9:\n    settings.junction_deviation = (float)((uint)comparisonValue & 0x7fffffff);\n    break;\n  case 10:\n    settings.mm_per_arc_segment = comparisonValue;\n    break;\n  case 0xb:\n    uVar2 = floatToDouble(comparisonValue);\n    roundValue((double)concatenateValues(settingIndex,comparisonValue));\n    settings.n_arc_correction = doubleToUnsignedInt(uVar2,extraout_r1_02);\n    break;\n  case 0xc:\n    uVar2 = floatToDouble(comparisonValue);\n    roundValue((double)concatenateValues(settingIndex,comparisonValue));\n    settings.decimal_places = doubleToUnsignedInt(uVar2,extraout_r1_03);\n    break;\n  case 0xd:\n    iVar1 = isEqual(comparisonValue,0);\n    if (iVar1 == 0) {\n      settings.flags = settings.flags | 1;\n    }\n    else {\n      settings.flags = settings.flags & 0xfe;\n    }\n    break;\n  case 0xe:\n    iVar1 = isEqual(comparisonValue,0);\n    if (iVar1 == 0) {\n      settings.flags = settings.flags | 2;\n    }\n    else {\n      settings.flags = settings.flags & 0xfd;\n    }\n    break;\n  case 0xf:\n    iVar1 = isEqual(comparisonValue,0);\n    if (iVar1 == 0) {\n      settings.flags = settings.flags | 4;\n    }\n    else {\n      settings.flags = settings.flags & 0xfb;\n    }\n    break;\n  case 0x10:\n    iVar1 = isEqual(comparisonValue,0);\n    if (iVar1 == 0) {\n      settings.flags = settings.flags | 8;\n    }\n    else {\n      settings.flags = settings.flags & 0xf7;\n    }\n    initializeLimits();\n    break;\n  case 0x11:\n    iVar1 = isEqual(comparisonValue,0);\n    if (iVar1 == 0) {\n      settings.flags = settings.flags | 0x10;\n    }\n    else {\n      settings.flags = settings.flags & 0xef;\n    }\n    break;\n  case 0x12:\n    uVar2 = floatToDouble(comparisonValue);\n    trunc((double)concatenateValues(settingIndex,comparisonValue));\n    settings.homing_dir_mask = doubleToUnsignedInt(uVar2,extraout_r1_04);\n    break;\n  case 0x13:\n    settings.homing_feed_rate = comparisonValue;\n    break;\n  case 0x14:\n    settings.homing_seek_rate = comparisonValue;\n    break;\n  case 0x15:\n    uVar2 = floatToDouble(comparisonValue);\n    roundValue((double)concatenateValues(settingIndex,comparisonValue));\n    settings.homing_debounce_delay = doubleToUnsignedInt(uVar2,extraout_r1_05);\n    break;\n  case 0x16:\n    settings.homing_pulloff = comparisonValue;\n    break;\n  case 0x17:\n    uVar2 = floatToDouble(comparisonValue);\n    trunc((double)concatenateValues(settingIndex,comparisonValue));\n    settings.dirn_invert_mask = doubleToUnsignedInt(uVar2,extraout_r1_06);\n    break;\n  default:\n    return '\\x06';\n  }\n  writeSettingsToGlobal();\n  return '\\0';\n}\n\n",
            "renaming": {
                "FUN_08004e30": "update_settings_08004e30",
                "parameter": "settingIndex",
                "value": "settingValue",
                "in_r1": "comparisonValue",
                "value_local": "localValue",
                "parameter_local": "localIndex",
                "__aeabi_fcmple": "isLessThanOrEqualTo",
                "__aeabi_fcmplt": "isLessThan",
                "__aeabi_f2d": "floatToDouble",
                "round": "roundValue",
                "__aeabi_d2uiz": "doubleToUnsignedInt",
                "__aeabi_fmul": "multiplyFloats",
                "CONCAT44": "concatenateValues",
                "__aeabi_fcmpeq": "isEqual",
                "limits_init": "initializeLimits",
                "write_global_settings": "writeSettingsToGlobal"
            },
            "calling": [
                "protocol_execute_line"
            ],
            "called": [
                "__aeabi_f2d",
                "limits_init",
                "trunc",
                "write_global_settings",
                "__aeabi_fcmple",
                "__aeabi_fcmplt",
                "__aeabi_d2uiz",
                "__aeabi_fmul",
                "round",
                "__aeabi_fcmpeq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080051b4": {
            "entrypoint": "0x080051b4",
            "current_name": "initialize_and_check_settings_080051b4",
            "code": "\n/* WARNING: Unknown callindexng conventindexon */\n\nvoindexd initializeAndCheckSettings_080051b4(voindexd)\n\n{\n  uindexnt8_t globalSettings;\n  float coordinates [3];\n  uindexnt8_t index;\n  \n  globalSettings = read_global_settindexngs();\n  indexf (globalSettings == '\\0') {\n    report_status_message('\\n');\n    settindexngs_reset(true);\n    report_grbl_settindexngs();\n  }\n  for (index = '\\0'; index < 8; index = index + '\\x01') {\n    globalSettings = settindexngs_read_coordinates(index,coordinates);\n    indexf (globalSettings == '\\0') {\n      report_status_message('\\n');\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080051b4": "initialize_and_check_settings_080051b4",
                "uVar1": "globalSettings",
                "coord_data": "coordinates",
                "i": "index"
            },
            "calling": [
                "grbl_main"
            ],
            "called": [
                "report_status_message",
                "report_grbl_settings",
                "read_global_settings",
                "settings_reset",
                "settings_read_coord_data"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005208": {
            "entrypoint": "0x08005208",
            "current_name": "FUNC_08005208",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid FUNC_08005208(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005208": "FUNC_08005208"
            },
            "calling": [
                "spindle_run"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005214": {
            "entrypoint": "0x08005214",
            "current_name": "FUNC_08005214",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid FUNC_08005214(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005214": "FUNC_08005214"
            },
            "calling": [
                "spindle_stop"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005220": {
            "entrypoint": "0x08005220",
            "current_name": "FUNC_08005220",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid FUNC_08005220(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005220": "FUNC_08005220"
            },
            "calling": [
                "spindle_run"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800522c": {
            "entrypoint": "0x0800522c",
            "current_name": "FUNC_0800522c",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid FUNC_0800522c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800522c": "FUNC_0800522c"
            },
            "calling": [
                "spindle_run"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005238": {
            "entrypoint": "0x08005238",
            "current_name": "stop_spindle_08005238",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid stop_spindle_08005238(void)\n\n{\n  direction = '\\0';\n  stop_spindle_08005238();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005238": "stop_spindle_08005238",
                "current_direction": "direction",
                "spindle_stop": "stop_spindle"
            },
            "calling": [
                "grbl_main"
            ],
            "called": [
                "spindle_stop"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005250": {
            "entrypoint": "0x08005250",
            "current_name": "turn_spindle_off_08005250",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid turn_spindle_off_08005250(void)\n\n{\n  spindle_off();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005250": "turn_spindle_off_08005250"
            },
            "calling": [
                "spindle_init",
                "mc_reset",
                "spindle_run"
            ],
            "called": [
                "spindle_off"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800525c": {
            "entrypoint": "0x0800525c",
            "current_name": "set_spindle_direction_0800525c",
            "code": "\nvoid setSpindleDirection_0800525c(int8_t newDirection)\n\n{\n  int8_t localDirection;\n  \n  if ((int)newDirection != (uint)currentDirection) {\n    plan_synchronize();\n    if (newDirection == '\\0') {\n      spindle_stop();\n      currentDirection = newDirection;\n    }\n    else {\n      if (newDirection < '\\x01') {\n        spindle_rev();\n      }\n      else {\n        spindle_fwd();\n      }\n      spindle_on();\n      currentDirection = newDirection;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800525c": "set_spindle_direction_0800525c",
                "direction": "newDirection",
                "direction_local": "localDirection",
                "current_direction": "currentDirection"
            },
            "calling": [
                "gc_execute_line"
            ],
            "called": [
                "spindle_fwd",
                "spindle_stop",
                "plan_synchronize",
                "spindle_rev",
                "spindle_on"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080052ac": {
            "entrypoint": "0x080052ac",
            "current_name": "apply_bitmask_080052ac",
            "code": "\n\n\nvoid applyBitmask_080052ac(uint32_t inputValue)\n\n{\n  uint32_t localX;\n  uint32_t value;\n  \n  _DAT_40021014 = inputValue | _DAT_40021014 & 0inputValuefffffaaf;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080052ac": "apply_bitmask_080052ac",
                "x": "inputValue",
                "x_local": "localX",
                "val": "value"
            },
            "calling": [
                "st_init",
                "step_delay_isr",
                "step_pulse_isr"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080052dc": {
            "entrypoint": "0x080052dc",
            "current_name": "update_register_value_080052dc",
            "code": "\n\n\nvoid updateRegisterValue_080052dc(uint32_t inputValue)\n\n{\n  uint32_t tempValue;\n  uint32_t newValue;\n  \n  _DAT_40021014 = inputValue | _DAT_40021014 & 0inputValuefffff55f;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080052dc": "update_register_value_080052dc",
                "x": "inputValue",
                "x_local": "tempValue",
                "val": "newValue"
            },
            "calling": [
                "step_period_isr"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800530c": {
            "entrypoint": "0x0800530c",
            "current_name": "FUNC_0800530c",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid FUNC_0800530c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800530c": "FUNC_0800530c"
            },
            "calling": [
                "st_go_idle"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005318": {
            "entrypoint": "0x08005318",
            "current_name": "FUNC_08005318",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid FUNC_08005318(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005318": "FUNC_08005318"
            },
            "calling": [
                "st_wake_up"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005324": {
            "entrypoint": "0x08005324",
            "current_name": "set_step_event_cycle_08005324",
            "code": "\nvoid setStepEventCycle_08005324(uint32_t inputStepsPerMinute)\n\n{\n  uint32_t adjustedStepsPerMinute;\n  uint32_t calculatedTicks;\n  \n  adjustedStepsPerMinute = inputStepsPerMinute;\n  if (inputStepsPerMinute < 800) {\n    adjustedStepsPerMinute = 800;\n  }\n  st.cycles_per_step_event = 1260000000 / adjustedStepsPerMinute;\n  set_step_period(st.cycles_per_step_event);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005324": "set_step_event_cycle_08005324",
                "steps_per_minute": "inputStepsPerMinute",
                "steps_per_minute_local": "adjustedStepsPerMinute",
                "ticks": "calculatedTicks"
            },
            "calling": [
                "step_period_isr",
                "st_cycle_reinitialize",
                "st_reset"
            ],
            "called": [
                "set_step_period"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005360": {
            "entrypoint": "0x08005360",
            "current_name": "calculate_trapezoid_tick_08005360",
            "code": "\n/* WARNING: Unknown calling convention */\n\nint calculateTrapezoidTick_08005360(void)\n\n{\n  bool isExceededThreshold;\n  \n  st.trapezoid_tick_cycle_counter = st.cycles_per_step_event + st.trapezoid_tick_cycle_counter;\n  isExceededThreshold = 420000 < st.trapezoid_tick_cycle_counter;\n  if (isExceededThreshold) {\n    st.trapezoid_tick_cycle_counter = st.trapezoid_tick_cycle_counter - 420000;\n  }\n  return (uint)isExceededThreshold;\n}\n\n",
            "renaming": {
                "FUN_08005360": "calculate_trapezoid_tick_08005360",
                "bVar1": "isExceededThreshold"
            },
            "calling": [
                "step_period_isr"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080053a0": {
            "entrypoint": "0x080053a0",
            "current_name": "execute_movement_080053a0",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid executeMovement_080053a0(void)\n\n{\n  int iVar1;\n  \n  writeDirection((uint)directionBits);\n  savedStepBits = step_bits;\n  if (currentBlock == (block_t *)0x0) {\n    currentBlock = getCurrentBlock();\n    if (currentBlock == (block_t *)0x0) {\n      goIdle();\n      sysExecute = sysExecute | 4;\n    }\n    else {\n      if (sysState == '\\x03') {\n        adjustedRate = currentBlock->initial_rate;\n        setEventsPerMinute(adjustedRate);\n        tickCycleCounter = 210000;\n      }\n      minSafeRate = (currentBlock->rate_delta >> 1) + currentBlock->rate_delta;\n      counterX = -(currentBlock->step_event_count >> 1);\n      eventCount = currentBlock->step_event_count;\n      stepEventsCompleted = 0;\n      counterY = counterX;\n      counterZ = counterX;\n    }\n  }\n  if (currentBlock != (block_t *)0x0) {\n    directionBits = currentBlock->direction_bits;\n    step_bits = 0;\n    counterX = currentBlock->steps_x + counterX;\n    if (0 < counterX) {\n      step_bits = 0x10;\n      counterX = counterX - eventCount;\n      if ((directionBits & 0x20) == 0) {\n        position[0] = position[0] + 1;\n      }\n      else {\n        position[0] = position[0] + -1;\n      }\n    }\n    counterY = currentBlock->steps_y + counterY;\n    if (0 < counterY) {\n      step_bits = step_bits | 0x440;\n      counterY = counterY - eventCount;\n      if ((directionBits & 0x80) == 0) {\n        position[1] = position[1] + 1;\n      }\n      else {\n        position[1] = position[1] + -1;\n      }\n    }\n    counterZ = currentBlock->steps_z + counterZ;\n    if (0 < counterZ) {\n      step_bits = step_bits | 0x100;\n      counterZ = counterZ - eventCount;\n      if ((directionBits & 0x200) == 0) {\n        position[2] = position[2] + 1;\n      }\n      else {\n        position[2] = position[2] + -1;\n      }\n    }\n    stepEventsCompleted = stepEventsCompleted + 1;\n    if (stepEventsCompleted < (uint)currentBlock->step_event_count) {\n      if (sysState == '\\x04') {\n        iVar1 = iterate_trapezoid_cycle_counter();\n        if (iVar1 != 0) {\n          if ((uint)currentBlock->rate_delta < adjustedRate) {\n            adjustedRate = adjustedRate - currentBlock->rate_delta;\n            setEventsPerMinute(adjustedRate);\n          }\n          else {\n            goIdle();\n            sysExecute = sysExecute | 4;\n          }\n        }\n      }\n      else if (stepEventsCompleted < currentBlock->accelerate_until) {\n        iVar1 = iterate_trapezoid_cycle_counter();\n        if (iVar1 != 0) {\n          adjustedRate = adjustedRate + currentBlock->rate_delta;\n          if (currentBlock->nominal_rate <= adjustedRate) {\n            adjustedRate = currentBlock->nominal_rate;\n          }\n          setEventsPerMinute(adjustedRate);\n        }\n      }\n      else if (stepEventsCompleted < currentBlock->decelerate_after) {\n        if (adjustedRate != currentBlock->nominal_rate) {\n          adjustedRate = currentBlock->nominal_rate;\n          setEventsPerMinute(adjustedRate);\n        }\n      }\n      else if (stepEventsCompleted == currentBlock->decelerate_after) {\n        if (adjustedRate == currentBlock->nominal_rate) {\n          tickCycleCounter = 210000;\n        }\n        else {\n          tickCycleCounter = 420000 - tickCycleCounter;\n        }\n      }\n      else {\n        iVar1 = iterate_trapezoid_cycle_counter();\n        if (iVar1 != 0) {\n          if (minSafeRate < adjustedRate) {\n            adjustedRate = adjustedRate - currentBlock->rate_delta;\n          }\n          else {\n            adjustedRate = adjustedRate >> 1;\n          }\n          if (adjustedRate < currentBlock->final_rate) {\n            adjustedRate = currentBlock->final_rate;\n          }\n          setEventsPerMinute(adjustedRate);\n        }\n      }\n    }\n    else {\n      step_bits = 0;\n      currentBlock = (block_t *)0x0;\n      plan_discard_currentBlock();\n    }\n  }\n  step_bits = step_bits ^ stepInvertMask;\n  directionBits = directionBits ^ directionInvertMask;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080053a0": "execute_movement_080053a0",
                "current_block": "currentBlock",
                "dirn_wr": "writeDirection",
                "dirn_bits": "directionBits",
                "saved_step_bits": "savedStepBits",
                "plan_get_current_block": "getCurrentBlock",
                "st_go_idle": "goIdle",
                "sys.execute": "sysExecute",
                "sys.state": "sysState",
                "st.trapezoid_adjusted_rate": "adjustedRate",
                "set_step_events_per_minute": "setEventsPerMinute",
                "st.trapezoid_tick_cycle_counter": "tickCycleCounter",
                "st.min_safe_rate": "minSafeRate",
                "st.counter_x": "counterX",
                "st.event_count": "eventCount",
                "st.step_events_completed": "stepEventsCompleted",
                "st.counter_y": "counterY",
                "st.counter_z": "counterZ",
                "sys.position": "position",
                "settings.step_invert_mask": "stepInvertMask",
                "settings.dirn_invert_mask": "directionInvertMask"
            },
            "calling": [
                "TIM2_IRQHandler"
            ],
            "called": [
                "dirn_wr",
                "iterate_trapezoid_cycle_counter",
                "st_go_idle",
                "plan_discard_current_block",
                "set_step_events_per_minute",
                "plan_get_current_block"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005760": {
            "entrypoint": "0x08005760",
            "current_name": "update_step_settings_08005760",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid update_step_settings_08005760(void)\n\n{\n  step_wr((uint)step_invert_mask);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005760": "update_step_settings_08005760",
                "settings.step_invert_mask": "step_invert_mask"
            },
            "calling": [
                "TIM2_IRQHandler"
            ],
            "called": [
                "step_wr"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005778": {
            "entrypoint": "0x08005778",
            "current_name": "initialize_step_08005778",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid initializeStep_08005778(void)\n\n{\n  step_wr((uint)stepBits);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005778": "initialize_step_08005778",
                "saved_step_bits": "stepBits"
            },
            "calling": [
                "TIM2_IRQHandler"
            ],
            "called": [
                "step_wr"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005790": {
            "entrypoint": "0x08005790",
            "current_name": "initialize_stepper_motor_08005790",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid initializeStepperMotor_08005790(void)\n\n{\n  stepper_motor_enable();\n  if (systemState == '\\x03') {\n    stepInvertMask = settings.stepInvertMask;\n    dirnInvertMask = settings.dirnInvertMask;\n    setStepPulseDelay(0x69);\n    setStepPulseTime((settings.pulseMicroseconds + 5) * 0x15);\n    enableStepISR();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005790": "initialize_stepper_motor_08005790",
                "step_bits": "stepInvertMask",
                "dirn_bits": "dirnInvertMask",
                "set_step_pulse_delay": "setStepPulseDelay",
                "set_step_pulse_time": "setStepPulseTime",
                "step_isr_enable": "enableStepISR",
                "sys.state": "systemState",
                "settings.step_invert_mask": "settings.stepInvertMask",
                "settings.dirn_invert_mask": "settings.dirnInvertMask",
                "settings.pulse_microseconds": "settings.pulseMicroseconds"
            },
            "calling": [
                "limits_go_home",
                "st_init",
                "st_cycle_start"
            ],
            "called": [
                "step_isr_enable",
                "stepper_motor_enable",
                "set_step_pulse_delay",
                "set_step_pulse_time"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080057e4": {
            "entrypoint": "0x080057e4",
            "current_name": "disable_stepper_motor_080057e4",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid disable_stepper_motor_080057e4(void)\n\n{\n  step_isr_disable();\n  if ((idle_lock_time != 0xff) || ((execution_flags & 0x20) != 0)) {\n    disable_motor();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080057e4": "disable_stepper_motor_080057e4",
                "settings.stepper_idle_lock_time": "idle_lock_time",
                "sys.execute": "execution_flags",
                "stepper_motor_disable": "disable_motor"
            },
            "calling": [
                "limits_go_home",
                "st_init",
                "step_period_isr",
                "mc_reset"
            ],
            "called": [
                "stepper_motor_disable",
                "step_isr_disable"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005814": {
            "entrypoint": "0x08005814",
            "current_name": "initialize_game_08005814",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid initializeGame_08005814(void)\n\n{\n  memset(&gameState,0,0x24);\n  setEventRate(800);\n  currentBlock = (block_t *)0x0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005814": "initialize_game_08005814",
                "st": "gameState",
                "set_step_events_per_minute": "setEventRate",
                "current_block": "currentBlock"
            },
            "calling": [
                "grbl_main"
            ],
            "called": [
                "set_step_events_per_minute",
                "memset"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800583c": {
            "entrypoint": "0x0800583c",
            "current_name": "initialize_step_0800583c",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid initializeStep_0800583c(void)\n\n{\n  step_wr((uint)stepInvertMask);\n  st_wake_up();\n  st_go_idle();\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800583c": "initialize_step_0800583c",
                "settings.step_invert_mask": "stepInvertMask"
            },
            "calling": [
                "grbl_main"
            ],
            "called": [
                "st_wake_up",
                "st_go_idle",
                "step_wr"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800585c": {
            "entrypoint": "0x0800585c",
            "current_name": "check_and_wake_up_0800585c",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid check_and_wake_up_0800585c(void)\n\n{\n  if (system_state == '\\x02') {\n    system_state = '\\x03';\n    system_wake_up();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800585c": "check_and_wake_up_0800585c",
                "sys.state": "system_state",
                "st_wake_up": "system_wake_up"
            },
            "calling": [
                "mc_go_home",
                "protocol_execute_runtime",
                "mc_line"
            ],
            "called": [
                "st_wake_up"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800587c": {
            "entrypoint": "0x0800587c",
            "current_name": "update_system_state_0800587c",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid update_system_state_0800587c(void)\n\n{\n  if (current_state == '\\x03') {\n    current_state = '\\x04';\n    auto_start_enabled = '\\0';\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800587c": "update_system_state_0800587c",
                "sys.state": "current_state",
                "sys.auto_start": "auto_start_enabled"
            },
            "calling": [
                "protocol_execute_runtime"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080058a0": {
            "entrypoint": "0x080058a0",
            "current_name": "initialize_system_080058a0",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid initializeSystem_080058a0(void)\n\n{\n  if (currentBlock == (block_t *)0x0) {\n    systemState = '\\0';\n  }\n  else {\n    reinitializePlanCycle(currentBlock->step_event_count - completedStepEvents);\n    adjustedTrapezoidRate = 0;\n    setStepEventsPerMinute(0);\n    tickCycleCounter = 210000;\n    completedStepEvents = 0;\n    systemState = '\\x02';\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080058a0": "initialize_system_080058a0",
                "current_block": "currentBlock",
                "sys.state": "systemState",
                "plan_cycle_reinitialize": "reinitializePlanCycle",
                "st.step_events_completed": "completedStepEvents",
                "st.trapezoid_adjusted_rate": "adjustedTrapezoidRate",
                "set_step_events_per_minute": "setStepEventsPerMinute",
                "st.trapezoid_tick_cycle_counter": "tickCycleCounter"
            },
            "calling": [
                "protocol_execute_runtime"
            ],
            "called": [
                "plan_cycle_reinitialize",
                "set_step_events_per_minute"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005900": {
            "entrypoint": "0x08005900",
            "current_name": "check_execute_permission_08005900",
            "code": "\nint check_execute_permission_08005900(uint8_t input_data)\n\n{\n  uint8_t local_data;\n  int return_code;\n  \n  if (input_data == '~') {\n    sys.execute = sys.execute | 2;\n    return 1;\n  }\n  if (input_data < 0x7f) {\n    if (input_data == '?') {\n      sys.execute = sys.execute | 1;\n      return 1;\n    }\n    if (input_data < 0x40) {\n      if (input_data == '\\x18') {\n        mc_reset();\n        return 1;\n      }\n      if (input_data == '!') {\n        sys.execute = sys.execute | 8;\n        return 1;\n      }\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08005900": "check_execute_permission_08005900",
                "data": "input_data",
                "data_local": "local_data",
                "rc": "return_code"
            },
            "calling": [
                "serial_read"
            ],
            "called": [
                "mc_reset"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800597c": {
            "entrypoint": "0x0800597c",
            "current_name": "invoke_system_interrupt_0800597c",
            "code": "\n/* WARNING: Unknown calling convention */\n\nuint32_t invoke_system_interrupt_0800597c(uint32_t a0,uint32_t a1,int32_t a2)\n\n{\n  software_interrupt(0x3f);\n  return a0;\n}\n\n",
            "renaming": {
                "FUN_0800597c": "invoke_system_interrupt_0800597c"
            },
            "calling": [
                "startForkserver"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005984": {
            "entrypoint": "0x08005984",
            "current_name": "execute_afl_call_08005984",
            "code": "\nint executeAflCall_08005984(int numTicks)\n\n{\n  uint32_t result;\n  int localTicks;\n  \n  if (noHyperCall == 0) {\n    result = aflCall(1,numTicks,0);\n  }\n  else {\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08005984": "execute_afl_call_08005984",
                "ticks": "numTicks",
                "uVar1": "result",
                "ticks_local": "localTicks"
            },
            "calling": [
                "main"
            ],
            "called": [
                "aflCall"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080059b4": {
            "entrypoint": "0x080059b4",
            "current_name": "initialize_system_080059b4",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nSystemStatus initializeSystem_080059b4(void)\n\n{\n  _DAT_40023c00 = _DAT_40023c00 | 0x700;\n  configureSystemTick(16000);\n  setInterruptPriorityGroup(3);\n  initializePeriph();\n  return StatusOK;\n}\n\n",
            "renaming": {
                "FUN_080059b4": "initialize_system_080059b4",
                "HAL_StatusTypeDef": "SystemStatus",
                "HAL_SYSTICK_Config": "configureSystemTick",
                "HAL_NVIC_SetPriorityGrouping": "setInterruptPriorityGroup",
                "HAL_MspInit": "initializePeriph",
                "HAL_OK": "StatusOK"
            },
            "calling": [
                "main"
            ],
            "called": [
                "HAL_MspInit",
                "HAL_SYSTICK_Config",
                "HAL_NVIC_SetPriorityGrouping"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080059f8": {
            "entrypoint": "0x080059f8",
            "current_name": "deinitialize_hal_080059f8",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nHAL_StatusTypeDef deinitialize_HAL_080059f8(void)\n\n{\n  _DAT_40023820 = 0;\n  _DAT_40023824 = 0;\n  _DAT_40023810 = 0;\n  _DAT_40023814 = 0;\n  _DAT_40023818 = 0;\n  HAL_MspDeInit();\n  return HAL_OK;\n}\n\n",
            "renaming": {
                "FUN_080059f8": "deinitialize_hal_080059f8"
            },
            "calling": [],
            "called": [
                "HAL_MspDeInit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005a50": {
            "entrypoint": "0x08005a50",
            "current_name": "FUNC_08005a50",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid FUNC_08005a50(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005a50": "FUNC_08005a50"
            },
            "calling": [
                "HAL_Init"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005a5c": {
            "entrypoint": "0x08005a5c",
            "current_name": "FUNC_08005a5c",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid FUNC_08005a5c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005a5c": "FUNC_08005a5c"
            },
            "calling": [
                "HAL_DeInit"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005a68": {
            "entrypoint": "0x08005a68",
            "current_name": "increment_tick_08005a68",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid incrementTick_08005a68(void)\n\n{\n  tick = tick + 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005a68": "increment_tick_08005a68",
                "uwTick": "tick"
            },
            "calling": [
                "SysTick_Handler"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005a84": {
            "entrypoint": "0x08005a84",
            "current_name": "get_system_tick_08005a84",
            "code": "\n/* WARNING: Unknown calling convention */\n\nuint32_t getSystemTick_08005a84(void)\n\n{\n  return systemTick;\n}\n\n",
            "renaming": {
                "FUN_08005a84": "get_system_tick_08005a84",
                "uwTick": "systemTick"
            },
            "calling": [
                "get_current_usecs",
                "HAL_RCC_ClockConfig",
                "SysTick_Handler",
                "HAL_RCC_OscConfig",
                "HAL_Delay"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005a98": {
            "entrypoint": "0x08005a98",
            "current_name": "delay_function_08005a98",
            "code": "\nvoid delayFunction_08005a98(uint32_t delayAmount)\n\n{\n  uint32_t startTicks;\n  uint32_t currentTicks;\n  uint32_t localDelay;\n  uint32_t totalDelay;\n  \n  startTicks = HAL_GetTick();\n  do {\n    currentTicks = HAL_GetTick();\n  } while (currentTicks < delayAmount + startTicks);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005a98": "delay_function_08005a98",
                "Delay": "delayAmount",
                "uVar1": "startTicks",
                "uVar2": "currentTicks",
                "Delay_local": "localDelay",
                "timingdelay": "totalDelay"
            },
            "calling": [
                "_delay_ms"
            ],
            "called": [
                "HAL_GetTick"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005ac4": {
            "entrypoint": "0x08005ac4",
            "current_name": "get_constant_value_08005ac4",
            "code": "\n/* WARNING: Unknown calling convention */\n\nuint32_t get_constant_value_08005ac4(void)\n\n{\n  return 0x1000000;\n}\n\n",
            "renaming": {
                "FUN_08005ac4": "get_constant_value_08005ac4"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005ad4": {
            "entrypoint": "0x08005ad4",
            "current_name": "get_upper_half_of_dat_e0042000_08005ad4",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nuint32_t get_upper_half_of_dat_e0042000_08005ad4(void)\n\n{\n  return _DAT_e0042000 >> 0x10;\n}\n\n",
            "renaming": {
                "FUN_08005ad4": "get_upper_half_of_dat_e0042000_08005ad4"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005aec": {
            "entrypoint": "0x08005aec",
            "current_name": "get_lower12_bits_08005aec",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nuint32_t get_lower12_bits_08005aec(void)\n\n{\n  return _DAT_e0042000 & 0xfff;\n}\n\n",
            "renaming": {
                "FUN_08005aec": "get_lower12_bits_08005aec"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005b04": {
            "entrypoint": "0x08005b04",
            "current_name": "enable_flag_08005b04",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nvoid enableFlag_08005b04(void)\n\n{\n  _DAT_e0042004 = _DAT_e0042004 | 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005b04": "enable_flag_08005b04"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005b20": {
            "entrypoint": "0x08005b20",
            "current_name": "clear_flag_08005b20",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nvoid clearFlag_08005b20(void)\n\n{\n  _DAT_e0042004 = _DAT_e0042004 & 0xfffffffe;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005b20": "clear_flag_08005b20"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005b3c": {
            "entrypoint": "0x08005b3c",
            "current_name": "set_bit_in_memory_08005b3c",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nvoid setBitInMemory_08005b3c(void)\n\n{\n  _DAT_e0042004 = _DAT_e0042004 | 2;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005b3c": "set_bit_in_memory_08005b3c"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005b58": {
            "entrypoint": "0x08005b58",
            "current_name": "clear_interrupt_flag_08005b58",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nvoid clearInterruptFlag_08005b58(void)\n\n{\n  _DAT_e0042004 = _DAT_e0042004 & 0xfffffffd;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005b58": "clear_interrupt_flag_08005b58"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005b74": {
            "entrypoint": "0x08005b74",
            "current_name": "set_bit_in_register_08005b74",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nvoid set_bit_in_register_08005b74(void)\n\n{\n  _DAT_e0042004 = _DAT_e0042004 | 4;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005b74": "set_bit_in_register_08005b74"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005b90": {
            "entrypoint": "0x08005b90",
            "current_name": "clear_interrupt_flag_08005b90",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nvoid clearInterruptFlag_08005b90(void)\n\n{\n  _DAT_e0042004 = _DAT_e0042004 & 0xfffffffb;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005b90": "clear_interrupt_flag_08005b90"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005bac": {
            "entrypoint": "0x08005bac",
            "current_name": "initialize_data_08005bac",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nvoid initializeData_08005bac(void)\n\n{\n  _DAT_42270400 = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005bac": "initialize_data_08005bac"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005bc4": {
            "entrypoint": "0x08005bc4",
            "current_name": "initialize_global_variable_08005bc4",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nvoid initializeGlobalVariable_08005bc4(void)\n\n{\n  _DAT_42270400 = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005bc4": "initialize_global_variable_08005bc4"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005bdc": {
            "entrypoint": "0x08005bdc",
            "current_name": "set_interrupt_priority_08005bdc",
            "code": "\nvoid setInterruptPriority_08005bdc(interruptNumber_Type interruptNumber,uint32_t priorityValue)\n\n{\n  uint32_t localPriority;\n  interruptNumber_Type localInterruptNumber;\n  \n  if (interruptNumber < WWDG_interruptNumber) {\n    *(char *)(((byte)interruptNumber & 0xf) + 0xe000ed14) = (char)((priorityValue & 0xff) << 4);\n  }\n  else {\n    *(char *)(interruptNumber + -0x1fff1c00) = (char)((priorityValue & 0xff) << 4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005bdc": "set_interrupt_priority_08005bdc",
                "IRQn": "interruptNumber",
                "priority": "priorityValue",
                "priority_local": "localPriority",
                "IRQn_local": "localInterruptNumber"
            },
            "calling": [
                "SysTick_Config"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005c30": {
            "entrypoint": "0x08005c30",
            "current_name": "check_and_update_sys_tick_priority_08005c30",
            "code": "\n\n\nuint32_t checkAndUpdateSysTickPriority_08005c30(uint32_t inputTicks)\n\n{\n  bool isLessThanThreshold;\n  uint32_t localTicks;\n  \n  isLessThanThreshold = inputTicks - 1 < 0x1000000;\n  if (isLessThanThreshold) {\n    _DAT_e000e014 = inputTicks - 1;\n    NVIC_SetPriority(SysTick_IRQn,0xf);\n    _DAT_e000e018 = 0;\n    _DAT_e000e010 = 7;\n  }\n  return (uint)!isLessThanThreshold;\n}\n\n",
            "renaming": {
                "FUN_08005c30": "check_and_update_sys_tick_priority_08005c30",
                "ticks": "inputTicks",
                "bVar1": "isLessThanThreshold",
                "ticks_local": "localTicks"
            },
            "calling": [
                "HAL_RCC_ClockConfig"
            ],
            "called": [
                "NVIC_SetPriority"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005c74": {
            "entrypoint": "0x08005c74",
            "current_name": "initialize_memory_08005c74",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nvoid initializeMemory_08005c74(void)\n\n{\n  _DAT_40023808 = 0;\n  _DAT_40023804 = 0x4003010;\n  _DAT_40023884 = 0x20003000;\n  _DAT_40023800 = _DAT_40023800 & 0xfaf2ffff | 0x81;\n  _DAT_4002380c = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005c74": "initialize_memory_08005c74"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005cec": {
            "entrypoint": "0x08005cec",
            "current_name": "configure_oscillators_08005cec",
            "code": "\n\n\nHAL_StatusTypeDef configureOscillators_08005cec(RCC_OscInitTypeDef *oscillatorConfig)\n\n{\n  uint32_t startTick;\n  uint32_t currentTick;\n  RCC_OscInitTypeDef *localOscillatorConfig;\n  uint32_t result2;\n  uint32_t result3;\n  uint32_t result4;\n  uint32_t result5;\n  uint32_t result6;\n  uint32_t result7;\n  uint32_t result1;\n  uint32_t result1;\n  uint32_t timeout;\n  \n  if ((oscillatorConfig->OscillatorType & 1) != 0) {\n    if (((_DAT_40023808 & 0xc) == 4) ||\n       (((_DAT_40023808 & 0xc) == 8 && ((_DAT_40023804 & 0x400000) == 0x400000)))) {\n      if (((_DAT_40023800 & 0x20000) != 0) && (oscillatorConfig->HSEState != 1)) {\n        return HAL_ERROR;\n      }\n    }\n    else {\n      _DAT_40023800 = (uint3)_DAT_40023800;\n      startTick = HAL_GetTick();\n      while ((_DAT_40023800 & 0x20000) != 0) {\n        currentTick = HAL_GetTick();\n        if (startTick + 5000 <= currentTick) {\n          return HAL_TIMEOUT;\n        }\n      }\n      _DAT_40023800 = CONCAT12((char)oscillatorConfig->HSEState,_DAT_40023800);\n      if (oscillatorConfig->HSEState == 1) {\n        startTick = HAL_GetTick();\n        while ((_DAT_40023800 & 0x20000) == 0) {\n          currentTick = HAL_GetTick();\n          if (startTick + 5000 <= currentTick) {\n            return HAL_TIMEOUT;\n          }\n        }\n      }\n      else {\n        startTick = HAL_GetTick();\n        while ((_DAT_40023800 & 0x20000) != 0) {\n          currentTick = HAL_GetTick();\n          if (startTick + 5000 <= currentTick) {\n            return HAL_TIMEOUT;\n          }\n        }\n      }\n    }\n  }\n  if ((oscillatorConfig->OscillatorType & 2) != 0) {\n    if (((_DAT_40023808 & 0xc) == 0) ||\n       (((_DAT_40023808 & 0xc) == 8 && ((_DAT_40023804 & 0x400000) == 0)))) {\n      if (((_DAT_40023800 & 2) != 0) && (oscillatorConfig->HSIState != 1)) {\n        return HAL_ERROR;\n      }\n    }\n    else if (oscillatorConfig->HSIState == 0) {\n      _DAT_42470000 = 0;\n      startTick = HAL_GetTick();\n      while ((_DAT_40023800 & 2) != 0) {\n        currentTick = HAL_GetTick();\n        if (startTick + 100 <= currentTick) {\n          return HAL_TIMEOUT;\n        }\n      }\n    }\n    else {\n      _DAT_42470000 = 1;\n      startTick = HAL_GetTick();\n      while ((_DAT_40023800 & 2) == 0) {\n        currentTick = HAL_GetTick();\n        if (startTick + 100 <= currentTick) {\n          return HAL_TIMEOUT;\n        }\n      }\n      _DAT_40023800 = oscillatorConfig->HSICalibrationValue << 3 | _DAT_40023800 & 0xffffff07;\n    }\n  }\n  if ((oscillatorConfig->OscillatorType & 8) != 0) {\n    if (oscillatorConfig->LSIState == 0) {\n      _DAT_42470e80 = 0;\n      startTick = HAL_GetTick();\n      while ((_DAT_40023874 & 2) != 0) {\n        currentTick = HAL_GetTick();\n        if (startTick + 100 <= currentTick) {\n          return HAL_TIMEOUT;\n        }\n      }\n    }\n    else {\n      _DAT_42470e80 = 1;\n      startTick = HAL_GetTick();\n      while ((_DAT_40023874 & 2) == 0) {\n        currentTick = HAL_GetTick();\n        if (startTick + 100 <= currentTick) {\n          return HAL_TIMEOUT;\n        }\n      }\n    }\n  }\n  if ((oscillatorConfig->OscillatorType & 4) != 0) {\n    _DAT_40023840 = _DAT_40023840 | 0x10000000;\n    _DAT_40007000 = _DAT_40007000 | 0x100;\n    startTick = HAL_GetTick();\n    while ((_DAT_40007000 & 0x100) == 0) {\n      currentTick = HAL_GetTick();\n      if (startTick + 100 <= currentTick) {\n        return HAL_TIMEOUT;\n      }\n    }\n    _DAT_40023870 = _DAT_40023870 & 0xffffff00;\n    startTick = HAL_GetTick();\n    while ((_DAT_40023870 & 2) != 0) {\n      currentTick = HAL_GetTick();\n      if (startTick + 5000 <= currentTick) {\n        return HAL_TIMEOUT;\n      }\n    }\n    _DAT_40023870 = CONCAT31(DAT_40023870_1,(char)oscillatorConfig->LSEState);\n    if (oscillatorConfig->LSEState == 1) {\n      startTick = HAL_GetTick();\n      while ((_DAT_40023870 & 2) == 0) {\n        currentTick = HAL_GetTick();\n        if (startTick + 5000 <= currentTick) {\n          return HAL_TIMEOUT;\n        }\n      }\n    }\n    else {\n      startTick = HAL_GetTick();\n      while ((_DAT_40023870 & 2) != 0) {\n        currentTick = HAL_GetTick();\n        if (startTick + 5000 <= currentTick) {\n          return HAL_TIMEOUT;\n        }\n      }\n    }\n  }\n  if ((oscillatorConfig->PLL).PLLState != 0) {\n    if ((_DAT_40023808 & 0xc) == 8) {\n      return HAL_ERROR;\n    }\n    if ((oscillatorConfig->PLL).PLLState == 2) {\n      _DAT_42470060 = 0;\n      startTick = HAL_GetTick();\n      while ((_DAT_40023800 & 0x2000000) != 0) {\n        currentTick = HAL_GetTick();\n        if (startTick + 100 <= currentTick) {\n          return HAL_TIMEOUT;\n        }\n      }\n      _DAT_40023804 =\n           (oscillatorConfig->PLL).PLLQ << 0x18 |\n           (oscillatorConfig->PLL).PLLM | (oscillatorConfig->PLL).PLLN << 6 |\n           (((oscillatorConfig->PLL).PLLP >> 1) - 1) * 0x10000 | (oscillatorConfig->PLL).PLLSource\n           | 0x20000000;\n      _DAT_42470060 = 1;\n      startTick = HAL_GetTick();\n      while ((_DAT_40023800 & 0x2000000) == 0) {\n        currentTick = HAL_GetTick();\n        if (startTick + 100 <= currentTick) {\n          return HAL_TIMEOUT;\n        }\n      }\n    }\n    else {\n      _DAT_42470060 = 0;\n      startTick = HAL_GetTick();\n      while ((_DAT_40023800 & 0x2000000) != 0) {\n        currentTick = HAL_GetTick();\n        if (startTick + 100 <= currentTick) {\n          return HAL_TIMEOUT;\n        }\n      }\n    }\n  }\n  return HAL_OK;\n}\n\n",
            "renaming": {
                "FUN_08005cec": "configure_oscillators_08005cec",
                "RCC_OscInitStruct": "oscillatorConfig",
                "uVar1": "startTick",
                "uVar2": "currentTick",
                "RCC_OscInitStruct_local": "localOscillatorConfig",
                "result_2": "result2",
                "result_3": "result3",
                "result_4": "result4",
                "result_5": "result5",
                "result_6": "result6",
                "result_7": "result7",
                "result": "result1",
                "result_1": "result1"
            },
            "calling": [
                "SystemClock_Config"
            ],
            "called": [
                "HAL_GetTick"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800618c": {
            "entrypoint": "0x0800618c",
            "current_name": "initialize_clocks_0800618c",
            "code": "\n\n\nHAL_StatusTypeDef initializeClocks_0800618c(RCC_ClkInitTypeDef *clockInitStruct,uint32_t latency)\n\n{\n  uint32_t tickValue;\n  uint timeout;\n  uint32_t localLatency;\n  RCC_ClkInitTypeDef *localClockInitStruct;\n  uint32_t timeout;\n  \n  if ((_DAT_40023c00 & 0xf) < latency) {\n    _DAT_40023c00 = CONCAT31(DAT_40023c00_1,(char)latency);\n    if (latency != (latency & 0xf)) {\n      return HAL_ERROR;\n    }\n    if ((clockInitStruct->ClockType & 1) != 0) {\n      if (clockInitStruct->SYSCLKSource == 1) {\n        if ((_DAT_40023800 & 0x20000) == 0) {\n          return HAL_ERROR;\n        }\n      }\n      else if ((clockInitStruct->SYSCLKSource != 2) && ((_DAT_40023800 & 2) == 0)) {\n        return HAL_ERROR;\n      }\n      _DAT_40023808 = clockInitStruct->SYSCLKSource | _DAT_40023808 & 0xfffffffc;\n      tickValue = HAL_GetTick();\n      timeout = tickValue + 5000;\n      if (clockInitStruct->SYSCLKSource == 1) {\n        while ((_DAT_40023808 & 0xc) != 4) {\n          tickValue = HAL_GetTick();\n          if (timeout <= tickValue) {\n            return HAL_TIMEOUT;\n          }\n        }\n      }\n      else if (clockInitStruct->SYSCLKSource == 2) {\n        while ((_DAT_40023808 & 0xc) != 8) {\n          tickValue = HAL_GetTick();\n          if (timeout <= tickValue) {\n            return HAL_TIMEOUT;\n          }\n        }\n      }\n      else {\n        while ((_DAT_40023808 & 0xc) != 0) {\n          tickValue = HAL_GetTick();\n          if (timeout <= tickValue) {\n            return HAL_TIMEOUT;\n          }\n        }\n      }\n    }\n  }\n  else {\n    if ((clockInitStruct->ClockType & 1) != 0) {\n      if (clockInitStruct->SYSCLKSource == 1) {\n        if ((_DAT_40023800 & 0x20000) == 0) {\n          return HAL_ERROR;\n        }\n      }\n      else if (clockInitStruct->SYSCLKSource == 2) {\n        if ((_DAT_40023800 & 0x2000000) == 0) {\n          return HAL_ERROR;\n        }\n      }\n      else if ((_DAT_40023800 & 2) == 0) {\n        return HAL_ERROR;\n      }\n      _DAT_40023808 = clockInitStruct->SYSCLKSource | _DAT_40023808 & 0xfffffffc;\n      tickValue = HAL_GetTick();\n      timeout = tickValue + 5000;\n      if (clockInitStruct->SYSCLKSource == 1) {\n        while ((_DAT_40023808 & 0xc) != 4) {\n          tickValue = HAL_GetTick();\n          if (timeout <= tickValue) {\n            return HAL_TIMEOUT;\n          }\n        }\n      }\n      else if (clockInitStruct->SYSCLKSource == 2) {\n        while ((_DAT_40023808 & 0xc) != 8) {\n          tickValue = HAL_GetTick();\n          if (timeout <= tickValue) {\n            return HAL_TIMEOUT;\n          }\n        }\n      }\n      else {\n        while ((_DAT_40023808 & 0xc) != 0) {\n          tickValue = HAL_GetTick();\n          if (timeout <= tickValue) {\n            return HAL_TIMEOUT;\n          }\n        }\n      }\n    }\n    _DAT_40023c00 = CONCAT31(DAT_40023c00_1,(char)latency);\n    if (latency != (latency & 0xf)) {\n      return HAL_ERROR;\n    }\n  }\n  if ((clockInitStruct->ClockType & 2) != 0) {\n    _DAT_40023808 = clockInitStruct->AHBCLKDivider | _DAT_40023808 & 0xffffff0f;\n  }\n  if ((clockInitStruct->ClockType & 4) != 0) {\n    _DAT_40023808 = clockInitStruct->APB1CLKDivider | _DAT_40023808 & 0xffffe3ff;\n  }\n  if ((clockInitStruct->ClockType & 8) != 0) {\n    _DAT_40023808 = clockInitStruct->APB2CLKDivider << 3 | _DAT_40023808 & 0xffff1fff;\n  }\n  tickValue = HAL_RCC_GetHCLKFreq();\n  SysTick_Config(tickValue / 1000);\n  return HAL_OK;\n}\n\n",
            "renaming": {
                "FUN_0800618c": "initialize_clocks_0800618c",
                "RCC_ClkInitStruct": "clockInitStruct",
                "FLatency": "latency",
                "uVar1": "tickValue",
                "uVar2": "timeout",
                "FLatency_local": "localLatency",
                "RCC_ClkInitStruct_local": "localClockInitStruct"
            },
            "calling": [
                "SystemClock_Config"
            ],
            "called": [
                "HAL_GetTick",
                "SysTick_Config",
                "HAL_RCC_GetHCLKFreq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800640c": {
            "entrypoint": "0x0800640c",
            "current_name": "configure_rcc_mco_0800640c",
            "code": "\n\n\nvoid configureRCC_MCO_0800640c(uint32_t MCOx,uint32_t MCOSource,uint32_t MCODiv)\n\n{\n  uint32_t MCODiv_local;\n  uint32_t MCOSource_local;\n  uint32_t MCOx_local;\n  GPIO_InitTypeDef GPIOConfig;\n  \n  if (MCOx == 0) {\n    _DAT_40023830 = _DAT_40023830 | 1;\n    GPIO_Pin = 0x100;\n    GPIO_Mode = 2;\n    GPIO_Speed = 3;\n    GPIO_Pull = 0;\n    GPIO_Alternate = 0;\n    HAL_GPIO_Init((GPIO_TypeDef *)0x40020000,&GPIOConfig);\n    _DAT_40023808 = MCODiv | MCOSource | _DAT_40023808 & 0xf89fffff;\n  }\n  else {\n    _DAT_40023830 = _DAT_40023830 | 4;\n    GPIO_Pin = 0x200;\n    GPIO_Mode = 2;\n    GPIO_Speed = 3;\n    GPIO_Pull = 0;\n    GPIO_Alternate = 0;\n    HAL_GPIO_Init((GPIO_TypeDef *)0x40020800,&GPIOConfig);\n    _DAT_40023808 = MCOSource | MCODiv << 3 | _DAT_40023808 & 0x7ffffff;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800640c": "configure_rcc_mco_0800640c",
                "RCC_MCOx": "MCOx",
                "RCC_MCOSource": "MCOSource",
                "RCC_MCODiv": "MCODiv",
                "RCC_MCODiv_local": "MCODiv_local",
                "RCC_MCOSource_local": "MCOSource_local",
                "RCC_MCOx_local": "MCOx_local",
                "GPIO_InitStruct": "GPIOConfig",
                "GPIO_InitStruct.Pin": "GPIO_Pin",
                "GPIO_InitStruct.Mode": "GPIO_Mode",
                "GPIO_InitStruct.Speed": "GPIO_Speed",
                "GPIO_InitStruct.Pull": "GPIO_Pull",
                "GPIO_InitStruct.Alternate": "GPIO_Alternate"
            },
            "calling": [],
            "called": [
                "HAL_GPIO_Init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080064bc": {
            "entrypoint": "0x080064bc",
            "current_name": "initialize_flag_080064bc",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nvoid initializeFlag_080064bc(void)\n\n{\n  _DAT_4247004c = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080064bc": "initialize_flag_080064bc"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080064d4": {
            "entrypoint": "0x080064d4",
            "current_name": "initialize_data_080064d4",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nvoid initializeData_080064d4(void)\n\n{\n  _DAT_4247004c = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080064d4": "initialize_data_080064d4"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080064ec": {
            "entrypoint": "0x080064ec",
            "current_name": "calculate_sys_clock_freq_080064ec",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nuint32_t calculateSysClockFreq_080064ec(void)\n\n{\n  uint clockSource;\n  uint32_t result1;\n  uint32_t result2;\n  uint32_t result3;\n  uint32_t result4;\n  uint32_t result5;\n  uint32_t result6;\n  uint32_t result7;\n  uint32_t result8;\n  uint32_t inputPllP;\n  uint32_t inputPllM;\n  uint32_t sysClockFreq;\n  uint32_t pllVco;\n  \n  clockSource = _DAT_40023808 & 0xc;\n  if (clockSource == 8) {\n    if ((_DAT_40023804 & 0x400000) == 0) {\n      pllVco = ((_DAT_40023804 & 0x7fc0) >> 6) * (16000000 / (_DAT_40023804 & 0x3f));\n    }\n    else {\n      pllVco = ((_DAT_40023804 & 0x7fc0) >> 6) * (8000000 / (_DAT_40023804 & 0x3f));\n    }\n    return pllVco / ((((_DAT_40023804 & 0x30000) >> 0x10) + 1) * 2);\n  }\n  if (clockSource < 9) {\n    if (clockSource == 0) {\n      return 16000000;\n    }\n    if (clockSource == 4) {\n      return 8000000;\n    }\n  }\n  return 16000000;\n}\n\n",
            "renaming": {
                "FUN_080064ec": "calculate_sys_clock_freq_080064ec",
                "uVar1": "clockSource",
                "result_6": "result1",
                "result_7": "result2",
                "result_4": "result3",
                "result_5": "result4",
                "result_2": "result5",
                "result_3": "result6",
                "result": "result7",
                "result_1": "result8",
                "pllp": "inputPllP",
                "pllm": "inputPllM",
                "sysclockfreq": "sysClockFreq",
                "pllvco": "pllVco"
            },
            "calling": [
                "HAL_RCC_GetHCLKFreq"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006628": {
            "entrypoint": "0x08006628",
            "current_name": "calculate_sys_clock_frequency_08006628",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nuint32_t calculateSysClockFrequency_08006628(void)\n\n{\n  uint32_t sysClockFreq;\n  uint32_t finalResult;\n  uint32_t secondResult;\n  \n  sysClockFreq = HAL_RCC_GetSysClockFreq();\n  SystemCoreClock = sysClockFreq >> \"\"[(_DAT_40023808 & 0xf0) >> 4];\n  return sysClockFreq >> \"\"[(_DAT_40023808 & 0xf0) >> 4];\n}\n\n",
            "renaming": {
                "FUN_08006628": "calculate_sys_clock_frequency_08006628",
                "uVar1": "sysClockFreq",
                "result": "finalResult",
                "result_1": "secondResult"
            },
            "calling": [
                "HAL_RCC_ClockConfig",
                "HAL_RCC_GetPCLK1Freq",
                "HAL_RCC_GetPCLK2Freq"
            ],
            "called": [
                "HAL_RCC_GetSysClockFreq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006680": {
            "entrypoint": "0x08006680",
            "current_name": "get_adjusted_hclk_freq_08006680",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nuint32_t getAdjustedHCLKFreq_08006680(void)\n\n{\n  uint32_t hclkFreq;\n  uint32_t adjustedFreq;\n  uint32_t shiftedFreq;\n  \n  hclkFreq = HAL_RCC_GetHCLKFreq();\n  return hclkFreq >> \"\"[(_DAT_40023808 & 0x1c00) >> 10];\n}\n\n",
            "renaming": {
                "FUN_08006680": "get_adjusted_hclk_freq_08006680",
                "uVar1": "hclkFreq",
                "result": "adjustedFreq",
                "result_1": "shiftedFreq"
            },
            "calling": [
                "set_baud_rate"
            ],
            "called": [
                "HAL_RCC_GetHCLKFreq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080066cc": {
            "entrypoint": "0x080066cc",
            "current_name": "get_hclk_freq_divided_by_apb_prescaler_080066cc",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nuint32_t getHCLKFreqDividedByAPBPrescaler_080066cc(void)\n\n{\n  uint32_t HCLKFreq;\n  uint32_t shiftedHCLKFreq;\n  uint32_t updatedHCLKFreq;\n  \n  HCLKFreq = HAL_RCC_GetHCLKFreq();\n  return HCLKFreq >> \"\"[(_DAT_40023808 & 0xe000) >> 0xd];\n}\n\n",
            "renaming": {
                "FUN_080066cc": "get_hclk_freq_divided_by_apb_prescaler_080066cc",
                "uVar1": "HCLKFreq",
                "result": "shiftedHCLKFreq",
                "result_1": "updatedHCLKFreq"
            },
            "calling": [
                "set_baud_rate"
            ],
            "called": [
                "HAL_RCC_GetHCLKFreq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006718": {
            "entrypoint": "0x08006718",
            "current_name": "initialize_rcc_oscillators_08006718",
            "code": "\n\n\nvoid initializeRCCOscillators_08006718(RCC_OscInitTypeDef *oscillatorConfig)\n\n{\n  RCC_OscInitTypeDef *localOscillatorConfig;\n  uint32_t result2;\n  uint32_t result3;\n  uint32_t result4;\n  uint32_t result5;\n  uint32_t result6;\n  uint32_t result7;\n  uint32_t result;\n  uint32_t result1;\n  \n  oscillatorConfig->OscillatorType = 0xf;\n  if ((_DAT_40023800 & 0x40000) == 0x40000) {\n    oscillatorConfig->HSEState = 5;\n  }\n  else if ((_DAT_40023800 & 0x10000) == 0x10000) {\n    oscillatorConfig->HSEState = 1;\n  }\n  else {\n    oscillatorConfig->HSEState = 0;\n  }\n  if ((_DAT_40023800 & 1) == 1) {\n    oscillatorConfig->HSIState = 1;\n  }\n  else {\n    oscillatorConfig->HSIState = 0;\n  }\n  oscillatorConfig->HSICalibrationValue = (_DAT_40023800 & 0xf8) >> 3;\n  if ((_DAT_40023870 & 4) == 4) {\n    oscillatorConfig->LSEState = 5;\n  }\n  else if ((_DAT_40023870 & 1) == 1) {\n    oscillatorConfig->LSEState = 1;\n  }\n  else {\n    oscillatorConfig->LSEState = 0;\n  }\n  if ((_DAT_40023874 & 1) == 1) {\n    oscillatorConfig->LSIState = 1;\n  }\n  else {\n    oscillatorConfig->LSIState = 0;\n  }\n  if ((_DAT_40023800 & 0x1000000) == 0x1000000) {\n    (oscillatorConfig->PLL).PLLState = 2;\n  }\n  else {\n    (oscillatorConfig->PLL).PLLState = 1;\n  }\n  (oscillatorConfig->PLL).PLLSource = _DAT_40023804 & 0x400000;\n  (oscillatorConfig->PLL).PLLM = _DAT_40023804 & 0x3f;\n  (oscillatorConfig->PLL).PLLN = (_DAT_40023804 & 0x7fc0) >> 6;\n  (oscillatorConfig->PLL).PLLP = ((_DAT_40023804 & 0x30000) + 0x10000) * 2 >> 0x10;\n  (oscillatorConfig->PLL).PLLQ = (_DAT_40023804 & 0xf000000) >> 0x18;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006718": "initialize_rcc_oscillators_08006718",
                "RCC_OscInitStruct": "oscillatorConfig",
                "RCC_OscInitStruct_local": "localOscillatorConfig",
                "result_2": "result2",
                "result_3": "result3",
                "result_4": "result4",
                "result_5": "result5",
                "result_6": "result6",
                "result_7": "result7",
                "result_1": "result1"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080068bc": {
            "entrypoint": "0x080068bc",
            "current_name": "configure_clocks_080068bc",
            "code": "\n\n\nvoid configureClocks_080068bc(RCC_ClkInitTypeDef *clockInitStruct,uint32_t *latency)\n\n{\n  uint32_t *latency_local;\n  RCC_ClkInitTypeDef *clockInitStruct_local;\n  \n  clockInitStruct->ClockType = 0xf;\n  clockInitStruct->SYSCLKSource = _DAT_40023808 & 3;\n  clockInitStruct->AHBCLKDivider = _DAT_40023808 & 0xf0;\n  clockInitStruct->APB1CLKDivider = _DAT_40023808 & 0x1c00;\n  clockInitStruct->APB2CLKDivider = _DAT_40023808 >> 3 & 0x1c00;\n  *latency = _DAT_40023c00 & 0xf;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080068bc": "configure_clocks_080068bc",
                "RCC_ClkInitStruct": "clockInitStruct",
                "pFLatency": "latency",
                "pFLatency_local": "latency_local",
                "RCC_ClkInitStruct_local": "clockInitStruct_local"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800691c": {
            "entrypoint": "0x0800691c",
            "current_name": "check_and_call_rcc_ccs_callback_0800691c",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nvoid check_and_call_RCC_CCSCallback_0800691c(void)\n\n{\n  if ((_DAT_4002380c & 0x80) == 0x80) {\n    HAL_RCC_CCSCallback();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800691c": "check_and_call_rcc_ccs_callback_0800691c"
            },
            "calling": [],
            "called": [
                "HAL_RCC_CCSCallback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006944": {
            "entrypoint": "0x08006944",
            "current_name": "FUNC_08006944",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid FUNC_08006944(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006944": "FUNC_08006944"
            },
            "calling": [
                "HAL_RCC_NMI_IRQHandler"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08006950": {
            "entrypoint": "0x08006950",
            "current_name": "configure_priority_group_08006950",
            "code": "\n\n\nvoid configurePriorityGroup_08006950(uint32_t priorityGroup)\n\n{\n  uint32_t localPriorityGroup;\n  uint32_t registerValue;\n  uint32_t temporaryPriorityGroup;\n  \n  _DAT_e000ed0c = _DAT_e000ed0c & 0xf8ff | (priorityGroup & 7) << 8 | 0x5fa0000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006950": "configure_priority_group_08006950",
                "PriorityGroup": "priorityGroup",
                "PriorityGroup_local": "localPriorityGroup",
                "reg_value": "registerValue",
                "PriorityGroupTmp": "temporaryPriorityGroup"
            },
            "calling": [
                "HAL_NVIC_SetPriorityGrouping"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006998": {
            "entrypoint": "0x08006998",
            "current_name": "get_highest_priority_interrupt_08006998",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nuint32_t getHighestPriorityInterrupt_08006998(void)\n\n{\n  return _DAT_e000ed0c >> 8 & 7;\n}\n\n",
            "renaming": {
                "FUN_08006998": "get_highest_priority_interrupt_08006998"
            },
            "calling": [
                "HAL_NVIC_GetPriorityGrouping",
                "HAL_NVIC_SetPriority"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080069b4": {
            "entrypoint": "0x080069b4",
            "current_name": "set_irq_flag_080069b4",
            "code": "\nvoid setIRQFlag_080069b4(interruptNumber_Type interruptNumber)\n\n{\n  interruptNumber_Type localInterruptNumber;\n  \n  *(int *)(((uint)(int)interruptNumber >> 5) * 4 + -0x1fff1f00) = 1 << (interruptNumber & 0x1fU);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080069b4": "set_irq_flag_080069b4",
                "IRQn": "interruptNumber",
                "IRQn_local": "localInterruptNumber"
            },
            "calling": [
                "HAL_NVIC_EnableIRQ"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080069e4": {
            "entrypoint": "0x080069e4",
            "current_name": "set_irq_priority_080069e4",
            "code": "\nvoid set_IRQ_priority_080069e4(interrupt_number_Type interrupt_number)\n\n{\n  interrupt_number_Type local_interrupt_number;\n  \n  *(int *)((((uint)(int)interrupt_number >> 5) + 0x20) * 4 + -0x1fff1f00) = 1 << (interrupt_number & 0x1fU);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080069e4": "set_irq_priority_080069e4",
                "IRQn": "interrupt_number",
                "IRQn_local": "local_interrupt_number"
            },
            "calling": [
                "HAL_NVIC_DisableIRQ"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006a18": {
            "entrypoint": "0x08006a18",
            "current_name": "is_interrupt_enabled_08006a18",
            "code": "\nuint32_t isInterruptEnabled_08006a18(interruptNumber_Type interruptNumber)\n\n{\n  interruptNumber_Type localInterruptNumber;\n  \n  return (uint)((*(uint *)((((uint)(int)interruptNumber >> 5) + 0x40) * 4 + -0x1fff1f00) & 1 << (interruptNumber & 0x1fU))\n               != 0);\n}\n\n",
            "renaming": {
                "FUN_08006a18": "is_interrupt_enabled_08006a18",
                "IRQn": "interruptNumber",
                "IRQn_local": "localInterruptNumber"
            },
            "calling": [
                "HAL_NVIC_GetPendingIRQ"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006a58": {
            "entrypoint": "0x08006a58",
            "current_name": "set_enable_interrupt_08006a58",
            "code": "\nvoid setEnableInterrupt_08006a58(interruptType_Type interruptType)\n\n{\n  interruptType_Type localInterruptType;\n  \n  *(int *)((((uint)(int)interruptType >> 5) + 0x40) * 4 + -0x1fff1f00) = 1 << (interruptType & 0x1fU);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006a58": "set_enable_interrupt_08006a58",
                "IRQn": "interruptType",
                "IRQn_local": "localInterruptType"
            },
            "calling": [
                "HAL_NVIC_SetPendingIRQ"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006a8c": {
            "entrypoint": "0x08006a8c",
            "current_name": "set_interrupt_priority_08006a8c",
            "code": "\nvoid setInterruptPriority_08006a8c(interruptNumber_Type interruptNumber)\n\n{\n  interruptNumber_Type localInterruptNumber;\n  \n  *(int *)((((uint)(int)interruptNumber >> 5) + 0x60) * 4 + -0x1fff1f00) = 1 << (interruptNumber & 0x1fU);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006a8c": "set_interrupt_priority_08006a8c",
                "IRQn": "interruptNumber",
                "IRQn_local": "localInterruptNumber"
            },
            "calling": [
                "HAL_NVIC_ClearPendingIRQ"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006ac0": {
            "entrypoint": "0x08006ac0",
            "current_name": "check_irq_status_08006ac0",
            "code": "\nuint32_t checkIRQStatus_08006ac0(interrupt_Type interrupt)\n\n{\n  interrupt_Type localInterrupt;\n  \n  return (uint)((*(uint *)((((uint)(int)interrupt >> 5) + 0x80) * 4 + -0x1fff1f00) & 1 << (interrupt & 0x1fU))\n               != 0);\n}\n\n",
            "renaming": {
                "FUN_08006ac0": "check_irq_status_08006ac0",
                "IRQn": "interrupt",
                "IRQn_local": "localInterrupt"
            },
            "calling": [
                "HAL_NVIC_GetActive"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006b00": {
            "entrypoint": "0x08006b00",
            "current_name": "set_priority_08006b00",
            "code": "\nvoid setPriority_08006b00(interruptNumber_Type interruptNumber,uint32_t newPriority)\n\n{\n  uint32_t localPriority;\n  interruptNumber_Type localInterruptNumber;\n  \n  if (interruptNumber < WWDG_interruptNumber) {\n    *(char *)(((byte)interruptNumber & 0xf) + 0xe000ed14) = (char)((newPriority & 0xff) << 4);\n  }\n  else {\n    *(char *)(interruptNumber + -0x1fff1c00) = (char)((newPriority & 0xff) << 4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006b00": "set_priority_08006b00",
                "IRQn": "interruptNumber",
                "priority": "newPriority",
                "priority_local": "localPriority",
                "IRQn_local": "localInterruptNumber"
            },
            "calling": [
                "SysTick_Config",
                "HAL_NVIC_SetPriority"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006b54": {
            "entrypoint": "0x08006b54",
            "current_name": "get_priority_level_08006b54",
            "code": "\nuint32_t getPriorityLevel_08006b54(interruptNumber_Type interruptNumber)\n\n{\n  byte byteCode;\n  interruptNumber_Type localInterruptNumber;\n  \n  if (interruptNumber < WWDG_interruptNumber) {\n    byteCode = *(byte *)(((byte)interruptNumber & 0xf) + 0xe000ed14);\n  }\n  else {\n    byteCode = *(byte *)(interruptNumber + -0x1fff1c00);\n  }\n  return (uint)(byteCode >> 4);\n}\n\n",
            "renaming": {
                "FUN_08006b54": "get_priority_level_08006b54",
                "IRQn": "interruptNumber",
                "IRQn_local": "localInterruptNumber",
                "bVar1": "byteCode"
            },
            "calling": [
                "HAL_NVIC_GetPriority"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006ba0": {
            "entrypoint": "0x08006ba0",
            "current_name": "calculate_priority_08006ba0",
            "code": "\nuint32_t calculatePriority_08006ba0(uint32_t priorityGroup,uint32_t preemptPriority,uint32_t subPriority)\n\n{\n  uint uVar1;\n  uint uVar2;\n  uint32_t subPriorityLocal;\n  uint32_t preemptPriorityLocal;\n  uint32_t priorityGroupLocal;\n  uint32_t subPriorityBits;\n  uint32_t preemptPriorityBits;\n  uint32_t priorityGroupTmp;\n  \n  uVar1 = priorityGroup & 7;\n  uVar2 = 7 - uVar1;\n  if (3 < uVar2) {\n    uVar2 = 4;\n  }\n  if (uVar1 + 4 < 7) {\n    uVar1 = 0;\n  }\n  else {\n    uVar1 = uVar1 - 3;\n  }\n  return subPriority & (1 << (uVar1 & 0xff)) - 1U |\n         ((1 << (uVar2 & 0xff)) - 1U & preemptPriority) << (uVar1 & 0xff);\n}\n\n",
            "renaming": {
                "FUN_08006ba0": "calculate_priority_08006ba0",
                "PriorityGroup": "priorityGroup",
                "PreemptPriority": "preemptPriority",
                "SubPriority": "subPriority",
                "SubPriority_local": "subPriorityLocal",
                "PreemptPriority_local": "preemptPriorityLocal",
                "PriorityGroup_local": "priorityGroupLocal",
                "SubPriorityBits": "subPriorityBits",
                "PreemptPriorityBits": "preemptPriorityBits",
                "PriorityGroupTmp": "priorityGroupTmp"
            },
            "calling": [
                "HAL_NVIC_SetPriority"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006c04": {
            "entrypoint": "0x08006c04",
            "current_name": "calculate_priority_08006c04",
            "code": "\nvoid calculate_priority_08006c04(uint32_t priority,uint32_t priority_group,uint32_t *preempt_priority,\n                 uint32_t *sub_priority)\n\n{\n  uint group_bits;\n  uint remaining_bits;\n  uint32_t *sub_priority_local;\n  uint32_t *preempt_priority_local;\n  uint32_t priority_group_local;\n  uint32_t priority_local;\n  uint32_t sub_priority_bits;\n  uint32_t preempt_priority_bits;\n  uint32_t priority_group_tmp;\n  \n  group_bits = priority_group & 7;\n  remaining_bits = 7 - group_bits;\n  if (3 < remaining_bits) {\n    remaining_bits = 4;\n  }\n  if (group_bits + 4 < 7) {\n    group_bits = 0;\n  }\n  else {\n    group_bits = group_bits - 3;\n  }\n  *preempt_priority = (1 << (remaining_bits & 0xff)) - 1U & priority >> (group_bits & 0xff);\n  *sub_priority = (1 << (group_bits & 0xff)) - 1U & priority;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006c04": "calculate_priority_08006c04",
                "Priority": "priority",
                "PriorityGroup": "priority_group",
                "pPreemptPriority": "preempt_priority",
                "pSubPriority": "sub_priority",
                "uVar1": "group_bits",
                "uVar2": "remaining_bits",
                "pSubPriority_local": "sub_priority_local",
                "pPreemptPriority_local": "preempt_priority_local",
                "PriorityGroup_local": "priority_group_local",
                "Priority_local": "priority_local",
                "SubPriorityBits": "sub_priority_bits",
                "PreemptPriorityBits": "preempt_priority_bits",
                "PriorityGroupTmp": "priority_group_tmp"
            },
            "calling": [
                "HAL_NVIC_GetPriority"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006c70": {
            "entrypoint": "0x08006c70",
            "current_name": "infinite_loop_08006c70",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid infiniteLoop_08006c70(void)\n\n{\n  sync(0xf);\n  sync(0xf);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08006c70": "infinite_loop_08006c70",
                "DataSynchronizationBarrier": "sync"
            },
            "calling": [
                "HAL_NVIC_SystemReset"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006c9c": {
            "entrypoint": "0x08006c9c",
            "current_name": "check_and_configure_sys_tick_08006c9c",
            "code": "\n\n\nuint32_t checkAndConfigureSysTick_08006c9c(uint32_t currentTicks)\n\n{\n  bool isTicksValid;\n  uint32_t modifiedTicks;\n  \n  isTicksValid = currentTicks - 1 < 0x1000000;\n  if (isTicksValid) {\n    _DAT_e000e014 = currentTicks - 1;\n    NVIC_SetPriority(sysTickInterrupt,0xf);\n    _DAT_e000e018 = 0;\n    _DAT_e000e010 = 7;\n  }\n  return (uint)!isTicksValid;\n}\n\n",
            "renaming": {
                "FUN_08006c9c": "check_and_configure_sys_tick_08006c9c",
                "ticks": "currentTicks",
                "bVar1": "isTicksValid",
                "ticks_local": "modifiedTicks",
                "SysTick_IRQn": "sysTickInterrupt"
            },
            "calling": [
                "HAL_SYSTICK_Config"
            ],
            "called": [
                "NVIC_SetPriority"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006ce0": {
            "entrypoint": "0x08006ce0",
            "current_name": "set_priority_group_08006ce0",
            "code": "\nvoid setPriorityGroup_08006ce0(uint32_t priorityGroup)\n\n{\n  uint32_t localPriorityGroup;\n  \n  NVIC_SetpriorityGrouping(priorityGroup);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006ce0": "set_priority_group_08006ce0",
                "PriorityGroup": "priorityGroup",
                "PriorityGroup_local": "localPriorityGroup"
            },
            "calling": [
                "HAL_Init"
            ],
            "called": [
                "NVIC_SetPriorityGrouping"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006cf6": {
            "entrypoint": "0x08006cf6",
            "current_name": "set_irq_priority_08006cf6",
            "code": "\nvoid setIRQPriority_08006cf6(IRQNumber_Type IRQNumber,uint32_t PreemptionPriority,uint32_t SubPriority)\n\n{\n  uint32_t priorityGroup;\n  uint32_t localSubPriority;\n  uint32_t localPreemptionPriority;\n  IRQNumber_Type localIRQNumber;\n  uint32_t priorityGroupSetting;\n  \n  priorityGroup = NVIC_GetPriorityGrouping();\n  priorityGroup = NVIC_EncodePriority(priorityGroup,PreemptionPriority,SubPriority);\n  NVIC_SetPriority(IRQNumber,priorityGroup);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006cf6": "set_irq_priority_08006cf6",
                "IRQn": "IRQNumber",
                "PreemptPriority": "PreemptionPriority",
                "uVar1": "priorityGroup",
                "SubPriority_local": "localSubPriority",
                "PreemptPriority_local": "localPreemptionPriority",
                "IRQn_local": "localIRQNumber",
                "prioritygroup": "priorityGroupSetting"
            },
            "calling": [
                "enable_tim_interrupt"
            ],
            "called": [
                "NVIC_EncodePriority",
                "NVIC_SetPriority",
                "NVIC_GetPriorityGrouping"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006d2e": {
            "entrypoint": "0x08006d2e",
            "current_name": "enable_interrupt_08006d2e",
            "code": "\nvoid enableInterrupt_08006d2e(interruptNumber_Type interruptNumber)\n\n{\n  interruptNumber_Type localInterruptNumber;\n  \n  NVIC_EnableIRQ(interruptNumber);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006d2e": "enable_interrupt_08006d2e",
                "IRQn": "interruptNumber",
                "IRQn_local": "localInterruptNumber"
            },
            "calling": [],
            "called": [
                "NVIC_EnableIRQ"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006d4a": {
            "entrypoint": "0x08006d4a",
            "current_name": "disable_irq_08006d4a",
            "code": "\nvoid disableIRQ_08006d4a(interrupt_Type interrupt)\n\n{\n  interrupt_Type interrupt_local;\n  \n  NVIC_DisableIRQ(interrupt);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006d4a": "disable_irq_08006d4a",
                "IRQn": "interrupt",
                "IRQn_local": "interrupt_local"
            },
            "calling": [],
            "called": [
                "NVIC_DisableIRQ"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006d66": {
            "entrypoint": "0x08006d66",
            "current_name": "reset_system_08006d66",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid reset_system_08006d66(void)\n\n{\n  reset();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006d66": "reset_system_08006d66",
                "NVIC_SystemReset": "reset"
            },
            "calling": [],
            "called": [
                "NVIC_SystemReset"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006d72": {
            "entrypoint": "0x08006d72",
            "current_name": "initialize_sys_tick_08006d72",
            "code": "\nuint32_t initializeSysTick_08006d72(uint32_t ticksNumber)\n\n{\n  uint32_t configResult;\n  uint32_t localTicksNumber;\n  \n  configResult = SysTick_Config(ticksNumber);\n  return configResult;\n}\n\n",
            "renaming": {
                "FUN_08006d72": "initialize_sys_tick_08006d72",
                "TicksNumb": "ticksNumber",
                "uVar1": "configResult",
                "TicksNumb_local": "localTicksNumber"
            },
            "calling": [
                "HAL_Init"
            ],
            "called": [
                "SysTick_Config"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006d8a": {
            "entrypoint": "0x08006d8a",
            "current_name": "get_priority_group_08006d8a",
            "code": "\n/* WARNING: Unknown calling convention */\n\nuint32_t getPriorityGroup_08006d8a(void)\n\n{\n  uint32_t priorityGroup;\n  \n  priorityGroup = NVIC_GetPriorityGrouping();\n  return priorityGroup;\n}\n\n",
            "renaming": {
                "FUN_08006d8a": "get_priority_group_08006d8a",
                "uVar1": "priorityGroup"
            },
            "calling": [],
            "called": [
                "NVIC_GetPriorityGrouping"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006d98": {
            "entrypoint": "0x08006d98",
            "current_name": "decode_and_set_irq_priority_08006d98",
            "code": "\nvoid decodeAndSetIRQPriority_08006d98(interruptLine_Type interruptLine,uint32_t priorityGroup,uint32_t *pPreemptdecodedPriority,\n                 uint32_t *pSubdecodedPriority)\n\n{\n  uint32_t decodedPriority;\n  uint32_t *localPSubPriority;\n  uint32_t *localPPreemptPriority;\n  uint32_t localPriorityGroup;\n  interruptLine_Type localInterruptLine;\n  \n  decodedPriority = NVIC_GetdecodedPriority(interruptLine);\n  NVIC_DecodedecodedPriority(decodedPriority,priorityGroup,pPreemptdecodedPriority,pSubdecodedPriority);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006d98": "decode_and_set_irq_priority_08006d98",
                "IRQn": "interruptLine",
                "PriorityGroup": "priorityGroup",
                "Priority": "decodedPriority",
                "pSubPriority_local": "localPSubPriority",
                "pPreemptPriority_local": "localPPreemptPriority",
                "PriorityGroup_local": "localPriorityGroup",
                "IRQn_local": "localInterruptLine"
            },
            "calling": [],
            "called": [
                "NVIC_GetPriority",
                "NVIC_DecodePriority"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006dc4": {
            "entrypoint": "0x08006dc4",
            "current_name": "set_pending_irq_08006dc4",
            "code": "\nvoid setPendingIRQ_08006dc4(interrupt_Type interrupt)\n\n{\n  interrupt_Type localInterrupt;\n  \n  NVIC_SetPendingIRQ(interrupt);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006dc4": "set_pending_irq_08006dc4",
                "IRQn": "interrupt",
                "IRQn_local": "localInterrupt"
            },
            "calling": [],
            "called": [
                "NVIC_SetPendingIRQ"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006de0": {
            "entrypoint": "0x08006de0",
            "current_name": "get_pending_irq_status_08006de0",
            "code": "\nuint32_t getPendingIRQStatus_08006de0(interrupt_Type interrupt)\n\n{\n  uint32_t pendingIRQStatus;\n  interrupt_Type localInterrupt;\n  \n  pendingIRQStatus = NVIC_GetPendingIRQ(interrupt);\n  return pendingIRQStatus;\n}\n\n",
            "renaming": {
                "FUN_08006de0": "get_pending_irq_status_08006de0",
                "IRQn": "interrupt",
                "uVar1": "pendingIRQStatus",
                "IRQn_local": "localInterrupt"
            },
            "calling": [],
            "called": [
                "NVIC_GetPendingIRQ"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006dfe": {
            "entrypoint": "0x08006dfe",
            "current_name": "clear_pending_irq_08006dfe",
            "code": "\nvoid clearPendingIRQ_08006dfe(interruptNumber_Type interruptNumber)\n\n{\n  interruptNumber_Type localInterruptNumber;\n  \n  NVIC_ClearPendingIRQ(interruptNumber);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006dfe": "clear_pending_irq_08006dfe",
                "IRQn": "interruptNumber",
                "IRQn_local": "localInterruptNumber"
            },
            "calling": [],
            "called": [
                "NVIC_ClearPendingIRQ"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006e1a": {
            "entrypoint": "0x08006e1a",
            "current_name": "get_active_interrupt_status_08006e1a",
            "code": "\nuint32_t getActiveInterruptStatus_08006e1a(interrupt_Type interrupt)\n\n{\n  uint32_t activeStatus;\n  interrupt_Type localInterrupt;\n  \n  activeStatus = NVIC_GetActive(interrupt);\n  return activeStatus;\n}\n\n",
            "renaming": {
                "FUN_08006e1a": "get_active_interrupt_status_08006e1a",
                "IRQn": "interrupt",
                "IRQn_local": "localInterrupt",
                "uVar1": "activeStatus"
            },
            "calling": [],
            "called": [
                "NVIC_GetActive"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006e38": {
            "entrypoint": "0x08006e38",
            "current_name": "set_clock_source_flags_08006e38",
            "code": "\n\n\nvoid setClockSourceFlags_08006e38(uint32_t source)\n\n{\n  uint32_t localSource;\n  \n  if (source == 4) {\n    _DAT_e000e010 = _DAT_e000e010 | 4;\n  }\n  else {\n    _DAT_e000e010 = _DAT_e000e010 & 0xfffffffb;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006e38": "set_clock_source_flags_08006e38",
                "CLKSource": "source",
                "CLKSource_local": "localSource"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006e70": {
            "entrypoint": "0x08006e70",
            "current_name": "initialize_systick_callback_08006e70",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid initializeSystickCallback_08006e70(void)\n\n{\n  handleSystickInterrupt();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006e70": "initialize_systick_callback_08006e70",
                "HAL_SYSTICK_Callback": "handleSystickInterrupt"
            },
            "calling": [],
            "called": [
                "HAL_SYSTICK_Callback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006e7c": {
            "entrypoint": "0x08006e7c",
            "current_name": "FUNC_08006e7c",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid FUNC_08006e7c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006e7c": "FUNC_08006e7c"
            },
            "calling": [
                "HAL_SYSTICK_IRQHandler"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08006e88": {
            "entrypoint": "0x08006e88",
            "current_name": "configure_gpio_pins_08006e88",
            "code": "\n\n\nvoid configureGPIOPins_08006e88(GPIO_TypeDef *GPIO_Port,GPIO_ConfigTypeDef *GPIO_Config)\n\n{\n  uint32_t alternate;\n  uint bitMask;\n  uint selectedBits;\n  int portIndex;\n  GPIO_ConfigTypeDef *local_GPIO_Config;\n  GPIO_TypeDef *local_GPIO_Port;\n  uint32_t temp;\n  uint32_t iocurrent;\n  uint32_t ioposition;\n  uint32_t position;\n  \n  for (position = 0; position < 0x10; position = position + 1) {\n    bitMask = 1 << (position & 0xff);\n    selectedBits = GPIO_Config->Pin & bitMask;\n    if (selectedBits == bitMask) {\n      if ((GPIO_Config->Mode == 2) || (GPIO_Config->Mode == 0x12)) {\n        alternate = GPIO_Config->Alternate;\n        GPIO_Port->AFR[position >> 3] = GPIO_Port->AFR[position >> 3] & ~(0xf << ((position & 7) << 2));\n        GPIO_Port->AFR[position >> 3] = GPIO_Port->AFR[position >> 3] | alternate << ((position & 7) << 2);\n      }\n      GPIO_Port->MODER = GPIO_Port->MODER & ~(3 << ((position & 0x7f) << 1));\n      GPIO_Port->MODER = GPIO_Port->MODER | (GPIO_Config->Mode & 3) << ((position & 0x7f) << 1);\n      if ((((GPIO_Config->Mode == 1) || (GPIO_Config->Mode == 2)) || (GPIO_Config->Mode == 0x11)) ||\n         (GPIO_Config->Mode == 0x12)) {\n        GPIO_Port->OSPEEDR = GPIO_Port->OSPEEDR & ~(3 << ((position & 0x7f) << 1));\n        GPIO_Port->OSPEEDR = GPIO_Port->OSPEEDR | GPIO_Config->Speed << ((position & 0x7f) << 1);\n        GPIO_Port->OTYPER = GPIO_Port->OTYPER & ~(1 << (position & 0xff));\n        GPIO_Port->OTYPER = GPIO_Port->OTYPER | (GPIO_Config->Mode >> 4 & 1) << (position & 0xff);\n      }\n      GPIO_Port->PUPDR = GPIO_Port->PUPDR & ~(3 << ((position & 0x7f) << 1));\n      GPIO_Port->PUPDR = GPIO_Port->PUPDR | GPIO_Config->Pull << ((position & 0x7f) << 1);\n      if ((GPIO_Config->Mode & 0x10000000) != 0) {\n        _DAT_40023844 = _DAT_40023844 | 0x4000;\n        *(uint *)(((position >> 2) + 2) * 4 + 0x40013800) =\n             ~(0xf << ((position & 3) << 2)) & *(uint *)(((position >> 2) + 2) * 4 + 0x40013800);\n        if (GPIO_Port == (GPIO_TypeDef *)0x40020000) {\n          portIndex = 0;\n        }\n        else if (GPIO_Port == (GPIO_TypeDef *)0x40020400) {\n          portIndex = 1;\n        }\n        else if (GPIO_Port == (GPIO_TypeDef *)0x40020800) {\n          portIndex = 2;\n        }\n        else if (GPIO_Port == (GPIO_TypeDef *)0x40020c00) {\n          portIndex = 3;\n        }\n        else if (GPIO_Port == (GPIO_TypeDef *)0x40021000) {\n          portIndex = 4;\n        }\n        else if (GPIO_Port == (GPIO_TypeDef *)0x40021400) {\n          portIndex = 5;\n        }\n        else if (GPIO_Port == (GPIO_TypeDef *)0x40021800) {\n          portIndex = 6;\n        }\n        else if (GPIO_Port == (GPIO_TypeDef *)0x40021c00) {\n          portIndex = 7;\n        }\n        else if (GPIO_Port == (GPIO_TypeDef *)0x40022000) {\n          portIndex = 8;\n        }\n        else if (GPIO_Port == (GPIO_TypeDef *)0x40022400) {\n          portIndex = 9;\n        }\n        else {\n          portIndex = 10;\n        }\n        *(uint *)(((position >> 2) + 2) * 4 + 0x40013800) =\n             portIndex << ((position & 3) << 2) | *(uint *)(((position >> 2) + 2) * 4 + 0x40013800);\n        _DAT_40013c00 = ~selectedBits & _DAT_40013c00;\n        _DAT_40013c04 = ~selectedBits & _DAT_40013c04;\n        if ((GPIO_Config->Mode & 0x10000) != 0) {\n          _DAT_40013c00 = selectedBits | _DAT_40013c00;\n        }\n        if ((GPIO_Config->Mode & 0x20000) != 0) {\n          _DAT_40013c04 = selectedBits | _DAT_40013c04;\n        }\n        _DAT_40013c08 = ~selectedBits & _DAT_40013c08;\n        _DAT_40013c0c = ~selectedBits & _DAT_40013c0c;\n        if ((GPIO_Config->Mode & 0x100000) != 0) {\n          _DAT_40013c08 = selectedBits | _DAT_40013c08;\n        }\n        if ((GPIO_Config->Mode & 0x200000) != 0) {\n          _DAT_40013c0c = selectedBits | _DAT_40013c0c;\n        }\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006e88": "configure_gpio_pins_08006e88",
                "GPIOx": "GPIO_Port",
                "GPIO_Init": "GPIO_Config",
                "GPIO_Init_local": "local_GPIO_Config",
                "GPIOx_local": "local_GPIO_Port",
                "uVar1": "alternate",
                "uVar2": "bitMask",
                "uVar3": "selectedBits",
                "iVar4": "portIndex"
            },
            "calling": [
                "gpio_init",
                "HAL_RCC_MCOConfig"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080071d0": {
            "entrypoint": "0x080071d0",
            "current_name": "configure_gpio_080071d0",
            "code": "\n\n\nvoid configureGPIO_080071d0(GPIO_TypeDef *gpioPort,uint32_t pinMask)\n\n{\n  uint bitMask;\n  uint bitCheck;\n  uint32_t localPinMask;\n  GPIO_TypeDef *localGpioPort;\n  uint32_t temp;\n  uint32_t currentIo;\n  uint32_t positionIo;\n  uint32_t position;\n  \n  for (position = 0; position < 0x10; position = position + 1) {\n    bitMask = 1 << (position & 0xff);\n    bitCheck = bitMask & pinMask;\n    if (bitCheck == bitMask) {\n      gpioPort->MODER = gpioPort->MODER & ~(3 << ((position & 0x7f) << 1));\n      gpioPort->AFR[position >> 3] = gpioPort->AFR[position >> 3] & ~(0xf << ((position & 7) << 2));\n      gpioPort->OSPEEDR = gpioPort->OSPEEDR & ~(3 << ((position & 0x7f) << 1));\n      gpioPort->OTYPER = gpioPort->OTYPER & ~(1 << (position & 0xff));\n      gpioPort->PUPDR = gpioPort->PUPDR & ~(3 << ((position & 0x7f) << 1));\n      *(uint *)(((position >> 2) + 2) * 4 + 0x40013800) =\n           ~(0xf << ((position & 3) << 2)) & *(uint *)(((position >> 2) + 2) * 4 + 0x40013800);\n      _DAT_40013c00 = ~bitCheck & _DAT_40013c00;\n      _DAT_40013c04 = ~bitCheck & _DAT_40013c04;\n      _DAT_40013c08 = ~bitCheck & _DAT_40013c08;\n      _DAT_40013c0c = ~bitCheck & _DAT_40013c0c;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080071d0": "configure_gpio_080071d0",
                "GPIOx": "gpioPort",
                "GPIO_Pin": "pinMask",
                "uVar1": "bitMask",
                "uVar2": "bitCheck",
                "GPIO_Pin_local": "localPinMask",
                "GPIOx_local": "localGpioPort",
                "tmp": "temp",
                "iocurrent": "currentIo",
                "ioposition": "positionIo"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007310": {
            "entrypoint": "0x08007310",
            "current_name": "check_gpio_pin_status_08007310",
            "code": "\npin_numberState check_GPIO_PinStatus_08007310(GPIO_TypeDef *GPIO_port,uint16_t pin_number)\n\n{\n  uint16_t local_pin;\n  GPIO_TypeDef *local_GPIO_port;\n  pin_numberState pin_status;\n  \n  return ((uint)pin_number & GPIO_port->IDR) != 0;\n}\n\n",
            "renaming": {
                "FUN_08007310": "check_gpio_pin_status_08007310",
                "GPIOx": "GPIO_port",
                "GPIO_Pin": "pin_number",
                "GPIO_Pin_local": "local_pin",
                "GPIOx_local": "local_GPIO_port",
                "bitstatus": "pin_status"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800733e": {
            "entrypoint": "0x0800733e",
            "current_name": "set_gpio_pin_state_0800733e",
            "code": "\nvoid set_GPIO_PinState_0800733e(GPIO_Peripheral *GPIOx,uint16_t pin_number,pin_numberState desired_state)\n\n{\n  pin_numberState current_state;\n  uint16_t pin_number_local;\n  GPIO_Peripheral *GPIO_Peripheral_local;\n  \n  if (desired_state == GPIO_PIN_RESET) {\n    GPIOx->BSRRH = pin_number;\n  }\n  else {\n    GPIOx->BSRRL = pin_number;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800733e": "set_gpio_pin_state_0800733e",
                "GPIO_TypeDef": "GPIO_Peripheral",
                "GPIO_Pin": "pin_number",
                "PinState": "desired_state",
                "PinState_local": "current_state",
                "GPIO_Pin_local": "pin_number_local",
                "GPIOx_local": "GPIO_Peripheral_local"
            },
            "calling": [
                "gpio_init"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800736c": {
            "entrypoint": "0x0800736c",
            "current_name": "toggle_gpio_pin_0800736c",
            "code": "\nvoid toggle_GPIO_Pin_0800736c(GPIO_TypeDef *GPIO_port,uint16_t pin_mask)\n\n{\n  uint16_t local_pin_mask;\n  GPIO_TypeDef *local_GPIO_port;\n  \n  GPIO_port->ODR = GPIO_port->ODR ^ (uint)pin_mask;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800736c": "toggle_gpio_pin_0800736c",
                "GPIOx": "GPIO_port",
                "GPIO_Pin": "pin_mask",
                "GPIO_Pin_local": "local_pin_mask",
                "GPIOx_local": "local_GPIO_port"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800738e": {
            "entrypoint": "0x0800738e",
            "current_name": "handle_gpio_pin_0800738e",
            "code": "\n\n\nvoid handle_GPIO_Pin_0800738e(uint16_t pin)\n\n{\n  uint16_t local_pin;\n  \n  if ((pin & _DAT_40013c14) != 0) {\n    _DAT_40013c14 = (uint)pin;\n    HAL_GPIO_EXTI_Callback(pin);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800738e": "handle_gpio_pin_0800738e",
                "GPIO_Pin": "pin",
                "GPIO_Pin_local": "local_pin"
            },
            "calling": [],
            "called": [
                "HAL_GPIO_EXTI_Callback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080073c0": {
            "entrypoint": "0x080073c0",
            "current_name": "configure_gpio_080073c0",
            "code": "\nvoid configureGPIO_080073c0(uint16_t pinNumber)\n\n{\n  uint16_t localPinNumber;\n  \n  return;\n}\n\n",
            "renaming": {
                "FUN_080073c0": "configure_gpio_080073c0",
                "GPIO_Pin": "pinNumber",
                "GPIO_Pin_local": "localPinNumber"
            },
            "calling": [
                "HAL_GPIO_EXTI_IRQHandler"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080073d4": {
            "entrypoint": "0x080073d4",
            "current_name": "set_bit_in_memory_080073d4",
            "code": "\nvoid setBitInMemory_080073d4(iinputNumbert inputNumber)\n\n{\n  iinputNumbert localNumber;\n  \n  *(short *)((inputNumber >> 4) * 0x400 + 0x4002001a) = (short)(1 << (inputNumber & 0xfU));\n  returinputNumber;\n}\n\n",
            "renaming": {
                "FUN_080073d4": "set_bit_in_memory_080073d4",
                "n": "inputNumber",
                "n_local": "localNumber"
            },
            "calling": [
                "debounce_off_handler"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007402": {
            "entrypoint": "0x08007402",
            "current_name": "set_bit_value_in_memory_08007402",
            "code": "\nvoid setBitValueInMemory_08007402(iinputNumbert inputNumber)\n\n{\n  iinputNumbert localNumber;\n  \n  *(short *)((inputNumber >> 4) * 0x400 + 0x40020018) = (short)(1 << (inputNumber & 0xfU));\n  returinputNumber;\n}\n\n",
            "renaming": {
                "FUN_08007402": "set_bit_value_in_memory_08007402",
                "n": "inputNumber",
                "n_local": "localNumber"
            },
            "calling": [
                "debounce_on_handler"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007430": {
            "entrypoint": "0x08007430",
            "current_name": "infinite_loop_08007430",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid infiniteLoop_08007430(void)\n\n{\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08007430": "infinite_loop_08007430"
            },
            "calling": [
                "SystemClock_Config"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007436": {
            "entrypoint": "0x08007436",
            "current_name": "initialize_system_08007436",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nvoid initializeSystem_08007436(void)\n\n{\n  HAL_StatusTypeDef status;\n  RCC_OscInitTypeDef rccInit;\n  RCC_ClkInitTypeDef clkInit;\n  \n  _DAT_40023840 = _DAT_40023840 | 0x10000000;\n  _DAT_40007000 = _DAT_40007000 | 0xc000;\n  rccInit.OscillatorType = 1;\n  rccInit.HSEState = 1;\n  rccInit.PLL.PLLState = 2;\n  rccInit.PLL.PLLSource = 0x400000;\n  rccInit.PLL.PLLM = 8;\n  rccInit.PLL.PLLN = 0x150;\n  rccInit.PLL.PLLP = 2;\n  rccInit.PLL.PLLQ = 7;\n  status = HAL_RCC_OscConfig(&rccInit);\n  if (status != HAL_OK) {\n    Error_Handler();\n  }\n  clkInit.ClockType = 0xf;\n  clkInit.SYSCLKSource = 2;\n  clkInit.AHBCLKDivider = 0;\n  clkInit.APB1CLKDivider = 0x1400;\n  clkInit.APB2CLKDivider = 0x1000;\n  status = HAL_RCC_ClockConfig(&clkInit,5);\n  if (status != HAL_OK) {\n    Error_Handler();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007436": "initialize_system_08007436",
                "RCC_OscInitStruct": "rccInit",
                "RCC_ClkInitStruct": "clkInit",
                "HVar1": "status"
            },
            "calling": [
                "main"
            ],
            "called": [
                "HAL_RCC_ClockConfig",
                "Error_Handler",
                "HAL_RCC_OscConfig"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080074c8": {
            "entrypoint": "0x080074c8",
            "current_name": "handle_bits_080074c8",
            "code": "\nvoid handleBits_080074c8(uint32_t inputBits)\n\n{\n  uint32_t localBits;\n  \n  if ((inputBits & 1) != 0) {\n    gpio_set(0x3e);\n  }\n  if ((limits_enabled != 0) && ((inputBits & 0x1e) != 0)) {\n    limits_isr();\n  }\n  if ((buttons_enabled != 0) && ((inputBits & 0x80) != 0)) {\n    buttons_isr(inputBits);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080074c8": "handle_bits_080074c8",
                "bits": "inputBits",
                "bits_local": "localBits"
            },
            "calling": [
                "debounce_isr"
            ],
            "called": [
                "limits_isr",
                "gpio_set",
                "buttons_isr"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007520": {
            "entrypoint": "0x08007520",
            "current_name": "clear_gpio_bits_08007520",
            "code": "\nvoid clearGPIOBits_08007520(uint32_t inputBits)\n\n{\n  uint32_t localBits;\n  \n  if ((inputBits & 1) != 0) {\n    gpio_clr(0x3e);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007520": "clear_gpio_bits_08007520",
                "bits": "inputBits",
                "bits_local": "localBits"
            },
            "calling": [
                "debounce_isr"
            ],
            "called": [
                "gpio_clr"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007540": {
            "entrypoint": "0x08007540",
            "current_name": "initialize_hardware_08007540",
            "code": "\n/* WARNING: Unknown calling convention */\n\nint initializeHardware_08007540(void)\n\n{\n  initializeHardware_08007540HAL();\n  configureSystemClock();\n  initializeGPIO();\n  initializeTimers();\n  initializeDebounce();\n  initializeUSART();\n  startForkServer(0);\n  executeGrblMain();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08007540": "initialize_hardware_08007540",
                "HAL_Init": "initializeHardwareHAL",
                "SystemClock_Config": "configureSystemClock",
                "gpio_init": "initializeGPIO",
                "timers_init": "initializeTimers",
                "debounce_init": "initializeDebounce",
                "usart_init": "initializeUSART",
                "startForkserver": "startForkServer",
                "grbl_main": "executeGrblMain"
            },
            "calling": [
                "Reset_Handler"
            ],
            "called": [
                "SystemClock_Config",
                "gpio_init",
                "grbl_main",
                "usart_init",
                "HAL_Init",
                "debounce_init",
                "timers_init",
                "startForkserver"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800756c": {
            "entrypoint": "0x0800756c",
            "current_name": "initialize_system_0800756c",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nvoid initializeSystem_0800756c(void)\n\n{\n  _DAT_40023808 = 0;\n  _DAT_40023804 = 0x24003010;\n  _DAT_40023800 = _DAT_40023800 & 0xfef2ffff | 1;\n  _DAT_4002380c = 0;\n  _DAT_e000ed08 = 0x8000000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800756c": "initialize_system_0800756c"
            },
            "calling": [
                "Reset_Handler"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080075c8": {
            "entrypoint": "0x080075c8",
            "current_name": "calculate_system_core_clock_080075c8",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nvoid calculateSystemCoreClock_080075c8(void)\n\n{\n  uint uVar1;\n  uint32_t pllm;\n  uint32_t pllSource;\n  uint32_t pllp;\n  uint32_t temporary;\n  uint32_t pllvco;\n  \n  uVar1 = _DAT_40023808 & 0xc;\n  if (uVar1 == 8) {\n    if ((_DAT_40023804 >> 0x16 & 1) == 0) {\n      pllvco = (_DAT_40023804 >> 6 & 0x1ff) * (16000000 / (_DAT_40023804 & 0x3f));\n    }\n    else {\n      pllvco = (_DAT_40023804 >> 6 & 0x1ff) * (8000000 / (_DAT_40023804 & 0x3f));\n    }\n    SystemCoreClock = pllvco / (((_DAT_40023804 >> 0x10 & 3) + 1) * 2);\n    goto LAB_0800768a;\n  }\n  if (uVar1 < 9) {\n    if (uVar1 == 0) {\n      SystemCoreClock = 16000000;\n      goto LAB_0800768a;\n    }\n    if (uVar1 == 4) {\n      SystemCoreClock = 8000000;\n      goto LAB_0800768a;\n    }\n  }\n  SystemCoreClock = 16000000;\nLAB_0800768a:\n  SystemCoreClock = SystemCoreClock >> AHBPrescTable[_DAT_40023808 >> 4 & 0xf];\n  return;\n}\n\n",
            "renaming": {
                "FUN_080075c8": "calculate_system_core_clock_080075c8",
                "pllsource": "pllSource",
                "tmp": "temporary"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080076c8": {
            "entrypoint": "0x080076c8",
            "current_name": "set_bit_080076c8",
            "code": "\nvoid setBit_080076c8(iinputNumbert inputNumber)\n\n{\n  iinputNumbert localVariable;\n  \n  *(uiinputNumbert *)((inputNumber >> 4) * 0x400 + 0x40020014) =\n       *(uiinputNumbert *)((inputNumber >> 4) * 0x400 + 0x40020014) ^ 1 << (inputNumber & 0xfU);\n  returinputNumber;\n}\n\n",
            "renaming": {
                "FUN_080076c8": "set_bit_080076c8",
                "n": "inputNumber",
                "n_local": "localVariable"
            },
            "calling": [
                "SysTick_Handler"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800770e": {
            "entrypoint": "0x0800770e",
            "current_name": "FUNC_0800770e",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid FUNC_0800770e(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800770e": "FUNC_0800770e"
            },
            "calling": [],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800771a": {
            "entrypoint": "0x0800771a",
            "current_name": "infinite_loop_0800771a",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid infiniteLoop_0800771a(void)\n\n{\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_0800771a": "infinite_loop_0800771a"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007720": {
            "entrypoint": "0x08007720",
            "current_name": "endless_loop_08007720",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid endlessLoop_08007720(void)\n\n{\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08007720": "endless_loop_08007720"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007726": {
            "entrypoint": "0x08007726",
            "current_name": "infinite_loop_08007726",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid infiniteLoop_08007726(void)\n\n{\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08007726": "infinite_loop_08007726"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800772c": {
            "entrypoint": "0x0800772c",
            "current_name": "infinite_loop_0800772c",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid infiniteLoop_0800772c(void)\n\n{\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_0800772c": "infinite_loop_0800772c"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007732": {
            "entrypoint": "0x08007732",
            "current_name": "FUNC_08007732",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid FUNC_08007732(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007732": "FUNC_08007732"
            },
            "calling": [],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800773e": {
            "entrypoint": "0x0800773e",
            "current_name": "FUNC_0800773e",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid FUNC_0800773e(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800773e": "FUNC_0800773e"
            },
            "calling": [],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800774a": {
            "entrypoint": "0x0800774a",
            "current_name": "FUNC_0800774a",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid FUNC_0800774a(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800774a": "FUNC_0800774a"
            },
            "calling": [],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08007756": {
            "entrypoint": "0x08007756",
            "current_name": "handle_tick_interrupt_08007756",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid handleTickInterrupt_08007756(void)\n\n{\n  uint32_t currentTick;\n  uint32_t tickCount;\n  \n  currentTick = HAL_GetTick();\n  if ((currentTick & 0x1ff) == 0) {\n    gpio_toggle(0x3c);\n  }\n  if ((currentTick & 0xf) == 0) {\n    debounce_isr();\n  }\n  HAL_IncTick();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007756": "handle_tick_interrupt_08007756",
                "uVar1": "currentTick",
                "ticks": "tickCount"
            },
            "calling": [],
            "called": [
                "HAL_GetTick",
                "debounce_isr",
                "gpio_toggle",
                "HAL_IncTick"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800778c": {
            "entrypoint": "0x0800778c",
            "current_name": "initialize_gpio_0800778c",
            "code": "\n\n/* WARNING: Unknown callindexng conventindexon */\n\nvoindexd initializeGPIO_0800778c(voindexd)\n\n{\n  GPIO_INFO *currentGpioInfo;\n  GPIO_InindextTypeDef gpioConfig;\n  GPIO_INFO *currentGPIO;\n  indexnt index;\n  \n  for (index = 0; (uindexnt)index < 0x11; index = index + 1) {\n    currentGpioInfo = gpioInfo + index;\n    _DAT_40023830 = _DAT_40023830 | 1 << (currentGpioInfo->num >> 4 & 0xff);\n    gpioConfig.Pindexn = 1 << (currentGpioInfo->num & 0xf);\n    gpioConfig.Mode = gpioInfo[index].mode;\n    gpioConfig.Pull = gpioInfo[index].pull;\n    gpioConfig.Speed = gpioInfo[index].speed;\n    gpioConfig.Alternate = gpioInfo[index].alt;\n    HAL_GPIO_Inindext((GPIO_TypeDef *)(((currentGpioInfo->num >> 4) + 0x100080) * 0x400),&gpioConfig);\n    indexf (-1 < gpioInfo[index].indexnindext) {\n      HAL_GPIO_WrindextePindexn((GPIO_TypeDef *)(((currentGpioInfo->num >> 4) + 0x100080) * 0x400),\n                        (uindexnt16_t)(1 << (currentGpioInfo->num & 0xf)),(GPIO_PindexnState)gpioInfo[index].indexnindext);\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800778c": "initialize_gpio_0800778c",
                "GPIO_InitStruct": "gpioConfig",
                "gpio": "currentGPIO",
                "i": "index",
                "gpio_info": "gpioInfo",
                "pGVar1": "currentGpioInfo"
            },
            "calling": [
                "main"
            ],
            "called": [
                "HAL_GPIO_Init",
                "HAL_GPIO_WritePin"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007854": {
            "entrypoint": "0x08007854",
            "current_name": "retrieve_bit_value_08007854",
            "code": "\niinput_numbert retrieve_bit_value_08007854(iinput_numbert input_number)\n\n{\n  iinput_numbert local_variable;\n  \n  returinput_number *(uiinput_numbert *)((input_number >> 4) * 0x400 + 0x40020010) >> (input_number & 0xfU) & 1;\n}\n\n",
            "renaming": {
                "FUN_08007854": "retrieve_bit_value_08007854",
                "n": "input_number",
                "n_local": "local_variable"
            },
            "calling": [
                "debounce_input"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007884": {
            "entrypoint": "0x08007884",
            "current_name": "read_gpio_values_08007884",
            "code": "\n/* WARNING: Unknown calling convention */\n\nuint32_t read_gpio_values_08007884(void)\n\n{\n  int gpio_value_1;\n  int gpio_value_2;\n  int gpio_value_3;\n  int gpio_value_4;\n  int gpio_value_5;\n  uint gpio_value_6;\n  \n  gpio_value_1 = gpio_rd(0x36);\n  gpio_value_2 = gpio_rd(0x37);\n  gpio_value_3 = gpio_rd(0x38);\n  gpio_value_4 = gpio_rd(0x39);\n  gpio_value_5 = gpio_rd(0xf);\n  gpio_value_6 = gpio_rd(0);\n  return gpio_value_6 | gpio_value_1 << 4 | gpio_value_2 << 3 | gpio_value_3 << 2 | gpio_value_4 << 1 | gpio_value_5 << 7;\n}\n\n",
            "renaming": {
                "FUN_08007884": "read_gpio_values_08007884",
                "iVar1": "gpio_value_1",
                "iVar2": "gpio_value_2",
                "iVar3": "gpio_value_3",
                "iVar4": "gpio_value_4",
                "iVar5": "gpio_value_5",
                "uVar6": "gpio_value_6"
            },
            "calling": [
                "debounce_isr"
            ],
            "called": [
                "gpio_rd"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080078d0": {
            "entrypoint": "0x080078d0",
            "current_name": "process_bits_080078d0",
            "code": "\nvoid processBits_080078d0(uint32_t inputBits)\n\n{\n  uint result;\n  int offset;\n  undefined4 constant1;\n  undefined4 constant2;\n  uint inputValue;\n  int newValue;\n  int baseAddress;\n  char negativeFlag;\n  undefined carryFlag;\n  char overflowFlag;\n  undefined4 coprocessorRegister;\n  uint32_t localBits;\n  \n  if (negativeFlag != overflowFlag) {\n    newValue = offset + inputBits * 0x200;\n  }\n  if ((bool)overflowFlag) {\n    result = inputBits * 0x40000000;\n    carryFlag = inputValue <= result;\n    overflowFlag = SBORROW4(result,inputValue);\n    negativeFlag = (int)(result - inputValue) < 0;\n  }\n  if (!(bool)carryFlag) {\n    *(int *)(baseAddress + inputBits * -0x40000000) = newValue;\n  }\n  if (negativeFlag == overflowFlag) {\n    software_interrupt(0xb083);\n  }\n  else {\n    coprocessor_store(6,coprocessorRegister,inputBits);\n    *(undefined4 *)inputBits = constant1;\n    software_interrupt(0x6078);\n  }\n  if ((bool)negativeFlag) {\n    register0x00000054 = (BADSPACEBASE *)(&stackAddress + baseAddress * 0x4000);\n  }\n  *(undefined4 *)((int)register0x00000054 + -4) = constant2;\n  *(undefined4 *)((int)register0x00000054 + -0xc) = 0;\n  *(undefined4 *)((int)register0x00000054 + -0x10) = 0;\n  while (*(int *)((int)register0x00000054 + -0x10) < 4) {\n    *(uint32_t *)((int)register0x00000054 + -0xc) =\n         debounce.sample[*(int *)((int)register0x00000054 + -0x10)] |\n         *(uint *)((int)register0x00000054 + -0xc);\n    *(int *)((int)register0x00000054 + -0x10) = *(int *)((int)register0x00000054 + -0x10) + 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080078d0": "process_bits_080078d0",
                "bits": "inputBits",
                "uVar1": "result",
                "in_r3": "offset",
                "unaff_r4": "constant1",
                "unaff_r7": "constant2",
                "unaff_r8": "inputValue",
                "unaff_r11": "newValue",
                "in_r12": "baseAddress",
                "in_NG": "negativeFlag",
                "in_CY": "carryFlag",
                "in_OV": "overflowFlag",
                "in_cr4": "coprocessorRegister",
                "bits_local": "localBits",
                "stack0x00000000": "stackAddress"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080078e2": {
            "entrypoint": "0x080078e2",
            "current_name": "update_data_080078e2",
            "code": "\nvoid updateData_080078e2(uint32_t inputBits)\n\n{\n  uint multiplier;\n  int offset;\n  undefined4 value;\n  uint limit;\n  int newOffset;\n  int data;\n  char negativeFlag;\n  undefined carryFlag;\n  char overflowFlag;\n  undefined4 controlRegister;\n  uint32_t counter;\n  \n  if (negativeFlag != overflowFlag) {\n    newOffset = offset + inputBits * 0x200;\n  }\n  if ((bool)overflowFlag) {\n    multiplier = inputBits * 0x40000000;\n    carryFlag = limit <= multiplier;\n    overflowFlag = SBORROW4(multiplier,limit);\n    negativeFlag = (int)(multiplier - limit) < 0;\n  }\n  if (!(bool)carryFlag) {\n    *(int *)(data + inputBits * -0x40000000) = newOffset;\n  }\n  if (negativeFlag != overflowFlag) {\n    coprocessor_store(6,controlRegister,inputBits);\n    *(undefined4 *)inputBits = value;\n  }\n  for (counter = 0; (int)counter < 4; counter = counter + 1) {\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080078e2": "update_data_080078e2",
                "bits": "inputBits",
                "uVar1": "multiplier",
                "in_r3": "offset",
                "unaff_r4": "value",
                "unaff_r8": "limit",
                "unaff_r11": "newOffset",
                "in_r12": "data",
                "in_NG": "negativeFlag",
                "in_CY": "carryFlag",
                "in_OV": "overflowFlag",
                "in_cr4": "controlRegister",
                "bits_local": "counter"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080078f4": {
            "entrypoint": "0x080078f4",
            "current_name": "check_button_state_080078f4",
            "code": "\n/* WARNING: Unknown callindexng conventindexon */\n\nuindexnt32_t checkButtonState_080078f4(voindexd)\n\n{\n  indexnt index;\n  uindexnt32_t buttonState;\n  \n  buttonState = 0;\n  for (index = 0; index < 4; index = index + 1) {\n    buttonState = buttonSamples[index] | buttonState;\n  }\n  return buttonState;\n}\n\n",
            "renaming": {
                "FUN_080078f4": "check_button_state_080078f4",
                "i": "index",
                "state": "buttonState",
                "debounce.sample": "buttonSamples"
            },
            "calling": [
                "debounce_isr",
                "homing_cycle"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007930": {
            "entrypoint": "0x08007930",
            "current_name": "debounce_handler_08007930",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid debounce_handler_08007930(void)\n\n{\n  int index;\n  uint32_t previous_state;\n  uint32_t current_state;\n  uint changed_bits;\n  uint32_t bits_turned_off;\n  uint32_t bits_turned_on;\n  uint32_t debounce_state;\n  DEBOUNCE_CTRL *db;\n  \n  index = debounce.idx;\n  previous_state = debounce.debounce_state;\n  if (debounce_ready != 0) {\n    previous_state = debounce_input();\n    debounce.sample[index] = previous_state;\n    if (debounce.idx == 3) {\n      debounce.idx = 0;\n    }\n    else {\n      debounce.idx = debounce.idx + 1;\n    }\n    current_state = debounce_rd();\n    previous_state = debounce.debounce_state;\n    if (current_state != debounce.debounce_state) {\n      changed_bits = ~current_state & debounce.debounce_state;\n      if ((~debounce.debounce_state & current_state) != 0) {\n        debounce_on_handler(~debounce.debounce_state & current_state);\n      }\n      previous_state = current_state;\n      if (changed_bits != 0) {\n        debounce_off_handler(changed_bits);\n      }\n    }\n  }\n  debounce.debounce_state = previous_state;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007930": "debounce_handler_08007930",
                "iVar1": "index",
                "uVar2": "previous_state",
                "uVar3": "current_state",
                "bits": "changed_bits",
                "off_bits": "bits_turned_off",
                "on_bits": "bits_turned_on",
                "state": "debounce_state"
            },
            "calling": [
                "SysTick_Handler"
            ],
            "called": [
                "debounce_input",
                "debounce_off_handler",
                "debounce_on_handler",
                "debounce_rd"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080079c0": {
            "entrypoint": "0x080079c0",
            "current_name": "initialize_debounce_080079c0",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid initializeDebounce_080079c0(void)\n\n{\n  memset(&debounceArray,0,0x18);\n  isDebounceReady = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080079c0": "initialize_debounce_080079c0",
                "debounce": "debounceArray",
                "debounce_ready": "isDebounceReady"
            },
            "calling": [
                "main"
            ],
            "called": [
                "memset"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080079e0": {
            "entrypoint": "0x080079e0",
            "current_name": "set_interrupt_enable_bit_080079e0",
            "code": "\nvoid setInterruptEnableBit_080079e0(interruptNumber_Type interruptNumber)\n\n{\n  interruptNumber_Type localInterruptNumber;\n  \n  *(int *)(((uint)(int)interruptNumber >> 5) * 4 + -0x1fff1f00) = 1 << (interruptNumber & 0x1fU);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080079e0": "set_interrupt_enable_bit_080079e0",
                "IRQn": "interruptNumber",
                "IRQn_local": "localInterruptNumber"
            },
            "calling": [
                "enable_tim_interrupt"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007a10": {
            "entrypoint": "0x08007a10",
            "current_name": "update_tim_flag_08007a10",
            "code": "\n\n\nvoid update_TIM_flag_08007a10(TIM_TypeDef *tim_instance)\n\n{\n  TIM_TypeDef *local_tim_instance;\n  \n  if (tim_instance == (TIM_TypeDef *)&DAT_40000000) {\n    _DAT_40023840 = _DAT_40023840 | 1;\n  }\n  else if (tim_instance == (TIM_TypeDef *)0x40000400) {\n    _DAT_40023840 = _DAT_40023840 | 2;\n  }\n  else if (tim_instance == (TIM_TypeDef *)&DAT_40000800) {\n    _DAT_40023840 = _DAT_40023840 | 4;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007a10": "update_tim_flag_08007a10",
                "tim": "tim_instance",
                "tim_local": "local_tim_instance"
            },
            "calling": [
                "step_timer_init",
                "g540_timer_init"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007a70": {
            "entrypoint": "0x08007a70",
            "current_name": "set_timer_irq_priority_08007a70",
            "code": "\nvoid setTimerIRQPriority_08007a70(TIM_TypeDef *timer,uint32_t priority,uint32_t subpriority)\n\n{\n  uint32_t subpriority_local;\n  uint32_t priority_local;\n  TIM_TypeDef *timer_local;\n  uint32_t irq_number;\n  \n  if (timer == (TIM_TypeDef *)&DAT_40000000) {\n    irq_number._0_1_ = TIM2_IRQn;\n  }\n  else if (timer == (TIM_TypeDef *)0x40000400) {\n    irq_number._0_1_ = TIM3_IRQn;\n  }\n  else {\n    if (timer != (TIM_TypeDef *)&DAT_40000800) {\n      return;\n    }\n    irq_number._0_1_ = TIM4_IRQn;\n  }\n  HAL_NVIC_SetPriority((IRQn_Type)irq_number,priority,subpriority);\n  NVIC_EnableIRQ((IRQn_Type)irq_number);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007a70": "set_timer_irq_priority_08007a70",
                "tim": "timer",
                "pre": "priority",
                "sub": "subpriority",
                "sub_local": "subpriority_local",
                "pre_local": "priority_local",
                "tim_local": "timer_local",
                "irq": "irq_number"
            },
            "calling": [
                "step_timer_init"
            ],
            "called": [
                "NVIC_EnableIRQ",
                "HAL_NVIC_SetPriority"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007ad0": {
            "entrypoint": "0x08007ad0",
            "current_name": "initialize_timer_08007ad0",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nvoid initializeTimer_08007ad0(void)\n\n{\n  TIM_TypeDef *timer;\n  \n  enable_tim_clock((TIM_TypeDef *)&DAT_40000000);\n  _DAT_40000000 = 0;\n  _DAT_40000004 = 0;\n  _DAT_40000008 = 0;\n  _DAT_4000000c = 0;\n  _DAT_40000010 = 0;\n  _DAT_40000018 = 0;\n  _DAT_4000001c = 0;\n  _DAT_40000020 = 0;\n  _DAT_40000024 = 0;\n  _DAT_40000028 = SystemCoreClock / 42000000 - 1;\n  _DAT_4000002c = 0;\n  _DAT_40000034 = 0;\n  _DAT_40000038 = 0;\n  _DAT_4000003c = 0;\n  _DAT_40000040 = 0;\n  _DAT_40000048 = 0;\n  _DAT_4000004c = 0;\n  enable_tim_interrupt((TIM_TypeDef *)&DAT_40000000,0,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007ad0": "initialize_timer_08007ad0",
                "TIMx": "timer"
            },
            "calling": [
                "timers_init"
            ],
            "called": [
                "enable_tim_clock",
                "enable_tim_interrupt"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007b70": {
            "entrypoint": "0x08007b70",
            "current_name": "initialize_timers_08007b70",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nvoid initializeTimers_08007b70(void)\n\n{\n  TIM_TypeDef *timer;\n  uint32_t timerEnable;\n  \n  timerEnable = 1;\n  if (_DAT_40000034 != 0) {\n    timerEnable = 3;\n  }\n  if (_DAT_40000038 != 0) {\n    timerEnable = timerEnable | 4;\n  }\n  _DAT_4000000c = _DAT_4000000c | timerEnable;\n  _DAT_40000000 = _DAT_40000000 | 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007b70": "initialize_timers_08007b70",
                "TIMx": "timer",
                "enable": "timerEnable"
            },
            "calling": [
                "st_wake_up"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007bc2": {
            "entrypoint": "0x08007bc2",
            "current_name": "initialize_ti_mx_08007bc2",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nvoid initialize_TIMx_08007bc2(void)\n\n{\n  TIM_TypeDef *timer;\n  \n  _DAT_40000000 = _DAT_40000000 & 0xfffffffe;\n  _DAT_4000000c = _DAT_4000000c & 0xfffffff8;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007bc2": "initialize_ti_mx_08007bc2",
                "TIMx": "timer"
            },
            "calling": [
                "st_go_idle"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007bf0": {
            "entrypoint": "0x08007bf0",
            "current_name": "update_ticks_08007bf0",
            "code": "\n\n\nvoid update_ticks_08007bf0(uint32_t new_ticks)\n\n{\n  uint32_t local_ticks;\n  uint32_t saved_ticks;\n  TIM_TypeDef *timer;\n  \n  _DAT_4000002c = new_ticks;\n  if (new_ticks <= _DAT_40000024) {\n    _DAT_40000024 = new_ticks;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007bf0": "update_ticks_08007bf0",
                "ticks": "new_ticks",
                "ticks_local": "local_ticks",
                "saved": "saved_ticks",
                "TIMx": "timer"
            },
            "calling": [
                "set_step_events_per_minute"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007c40": {
            "entrypoint": "0x08007c40",
            "current_name": "set_timer_ticks_08007c40",
            "code": "\n\n\nvoid setTimerTicks_08007c40(uint32_t ticks)\n\n{\n  uint32_t localTicks;\n  TIM_TypeDef *timerPeripheral;\n  \n  _DAT_40000034 = ticks;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007c40": "set_timer_ticks_08007c40",
                "ticks_local": "localTicks",
                "TIMx": "timerPeripheral"
            },
            "calling": [
                "st_wake_up"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007c5e": {
            "entrypoint": "0x08007c5e",
            "current_name": "set_tick_count_08007c5e",
            "code": "\n\n\nvoid setTickCount_08007c5e(uint32_t tickCount)\n\n{\n  uint32_t tickCountLocal;\n  TIM_TypeDef *timerX;\n  \n  _DAT_40000038 = tickCount;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007c5e": "set_tick_count_08007c5e",
                "ticks": "tickCount",
                "ticks_local": "tickCountLocal",
                "TIMx": "timerX"
            },
            "calling": [
                "st_wake_up"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007c7c": {
            "entrypoint": "0x08007c7c",
            "current_name": "check_and_invoke_ti_mx_events_08007c7c",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nvoid check_and_invoke_TIMx_events_08007c7c(void)\n\n{\n  TIM_TypeDef *timers;\n  \n  if (((_DAT_40000010 & 2) != 0) && ((_DAT_4000000c & 2) != 0)) {\n    _DAT_40000010 = _DAT_40000010 & 0xfffffffd;\n    step_delay_isr();\n  }\n  if (((_DAT_40000010 & 4) != 0) && ((_DAT_4000000c & 4) != 0)) {\n    _DAT_40000010 = _DAT_40000010 & 0xfffffffb;\n    step_pulse_isr();\n  }\n  if (((_DAT_40000010 & 1) != 0) && ((_DAT_4000000c & 1) != 0)) {\n    _DAT_40000010 = _DAT_40000010 & 0xfffffffe;\n    step_period_isr();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007c7c": "check_and_invoke_ti_mx_events_08007c7c",
                "TIMx": "timers"
            },
            "calling": [],
            "called": [
                "step_delay_isr",
                "step_period_isr",
                "step_pulse_isr"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007d08": {
            "entrypoint": "0x08007d08",
            "current_name": "initialize_timer_08007d08",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nvoid initializeTimer_08007d08(void)\n\n{\n  TIM_TypeDef *timer;\n  \n  enableTimerClock((TIM_TypeDef *)&DAT_40000800);\n  _DAT_40000800 = 0x80;\n  _DAT_40000804 = 0;\n  _DAT_40000808 = 0;\n  _DAT_4000080c = 0;\n  _DAT_40000810 = 0;\n  _DAT_40000818 = 0x6800;\n  _DAT_4000081c = 0;\n  _DAT_40000820 = 0;\n  _DAT_40000824 = 0;\n  _DAT_40000828 = SystemCoreClock / 4800000 - 1;\n  _DAT_4000082c = 199;\n  _DAT_40000834 = 0;\n  _DAT_40000838 = 100;\n  _DAT_4000083c = 0;\n  _DAT_40000840 = 0;\n  _DAT_40000848 = 0;\n  _DAT_4000084c = 0;\n  _DAT_40000814 = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007d08": "initialize_timer_08007d08",
                "TIMx": "timer",
                "enable_tim_clock": "enableTimerClock"
            },
            "calling": [
                "timers_init"
            ],
            "called": [
                "enable_tim_clock"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007da8": {
            "entrypoint": "0x08007da8",
            "current_name": "initialize_ti_mx_08007da8",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nvoid initialize_TIMx_08007da8(void)\n\n{\n  TIM_TypeDef *tim_x;\n  \n  _DAT_40000820 = _DAT_40000820 | 0x10;\n  _DAT_40000800 = _DAT_40000800 | 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007da8": "initialize_ti_mx_08007da8",
                "TIMx": "tim_x"
            },
            "calling": [
                "timers_init"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007dd8": {
            "entrypoint": "0x08007dd8",
            "current_name": "initialize_tim_08007dd8",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nvoid initialize_TIM_08007dd8(void)\n\n{\n  TIM_TypeDef *timer_instance;\n  \n  _DAT_40000800 = _DAT_40000800 & 0xfffffffe;\n  _DAT_40000820 = _DAT_40000820 & 0xffffffef;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007dd8": "initialize_tim_08007dd8",
                "TIMx": "timer_instance"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007e08": {
            "entrypoint": "0x08007e08",
            "current_name": "initialize_timer_08007e08",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid initializeTimer_08007e08(void)\n\n{\n  initializeStepTimer();\n  initializeG540Timer();\n  startG540Timer();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007e08": "initialize_timer_08007e08",
                "step_timer_init": "initializeStepTimer",
                "g540_timer_init": "initializeG540Timer",
                "g540_timer_start": "startG540Timer"
            },
            "calling": [
                "main"
            ],
            "called": [
                "step_timer_init",
                "g540_timer_start",
                "g540_timer_init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007e1c": {
            "entrypoint": "0x08007e1c",
            "current_name": "send_character_08007e1c",
            "code": "\n\n\nvoid sendCharacter_08007e1c(char c)\n\n{\n  char localChar;\n  USART_TypeDef *USART;\n  \n  do {\n  } while ((_DAT_40004400 & 0x80) == 0);\n  _DAT_40004404 = (uint)(byte)c;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007e1c": "send_character_08007e1c",
                "c_local": "localChar",
                "usart": "USART"
            },
            "calling": [
                "serial_write",
                "__io_putchar"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007e4c": {
            "entrypoint": "0x08007e4c",
            "current_name": "FUNC_08007e4c",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid FUNC_08007e4c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007e4c": "FUNC_08007e4c"
            },
            "calling": [],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08007e58": {
            "entrypoint": "0x08007e58",
            "current_name": "check_usart_flag_08007e58",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nint check_USART_flag_08007e58(void)\n\n{\n  USART_TypeDef *usart_instance;\n  \n  return (uint)((_DAT_40004400 & 0x20) != 0);\n}\n\n",
            "renaming": {
                "FUN_08007e58": "check_usart_flag_08007e58",
                "usart": "usart_instance"
            },
            "calling": [
                "serial_read"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007e84": {
            "entrypoint": "0x08007e84",
            "current_name": "get_usart_data_08007e84",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nchar get_usart_data_08007e84(void)\n\n{\n  USART_TypeDef *usart_instance;\n  \n  return (char)_DAT_40004404;\n}\n\n",
            "renaming": {
                "FUN_08007e84": "get_usart_data_08007e84",
                "usart": "usart_instance"
            },
            "calling": [
                "serial_read"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007ea4": {
            "entrypoint": "0x08007ea4",
            "current_name": "set_usart_flags_08007ea4",
            "code": "\n\n\nvoid setUSARTFlags_08007ea4(USART_TypeDef *usart)\n\n{\n  USART_TypeDef *localUSART;\n  \n  if (usart == (USART_TypeDef *)0x40011000) {\n    _DAT_40023844 = _DAT_40023844 | 0x10;\n  }\n  else if (usart == (USART_TypeDef *)&DAT_40004400) {\n    _DAT_40023840 = _DAT_40023840 | 0x20000;\n  }\n  else if (usart == (USART_TypeDef *)0x40004800) {\n    _DAT_40023840 = _DAT_40023840 | 0x40000;\n  }\n  else if (usart == (USART_TypeDef *)0x40004c00) {\n    _DAT_40023840 = _DAT_40023840 | 0x80000;\n  }\n  else if (usart == (USART_TypeDef *)0x40005000) {\n    _DAT_40023840 = _DAT_40023840 | 0x100000;\n  }\n  else if (usart == (USART_TypeDef *)0x40011400) {\n    _DAT_40023844 = _DAT_40023844 | 0x20;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007ea4": "set_usart_flags_08007ea4",
                "usart_local": "localUSART"
            },
            "calling": [
                "usart_init"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007f54": {
            "entrypoint": "0x08007f54",
            "current_name": "initialize_usart_08007f54",
            "code": "\nvoid initializeUSART_08007f54(USART_TypeDef *usartPort,int baudRate)\n\n{\n  uint32_t pclkFreq1;\n  uint32_t pclkFreq2;\n  uint32_t pclkFreq3;\n  int baudRate_local;\n  USART_TypeDef *usartPort_local;\n  \n  if ((usartPort->CR1 & 0x8000) == 0) {\n    if ((usartPort == (USART_TypeDef *)0x40011000) || (usartPort == (USART_TypeDef *)0x40011400)) {\n      pclkFreq1 = HAL_RCC_GetPCLK2Freq();\n      pclkFreq2 = HAL_RCC_GetPCLK2Freq();\n      pclkFreq3 = HAL_RCC_GetPCLK2Freq();\n      usartPort->BRR = (int)(((ulonglong)(pclkFreq1 * 0x19) / (ulonglong)(uint)(baudRate << 2)) / 100) << 4 |\n                   (((pclkFreq2 * 0x19) / (uint)(baudRate << 2) +\n                    (int)(((ulonglong)(pclkFreq3 * 0x19) / (ulonglong)(uint)(baudRate << 2)) / 100) * -100)\n                    * 0x10 + 0x32) / 100 & 0xf;\n    }\n    else {\n      pclkFreq1 = HAL_RCC_GetPCLK1Freq();\n      pclkFreq2 = HAL_RCC_GetPCLK1Freq();\n      pclkFreq3 = HAL_RCC_GetPCLK1Freq();\n      usartPort->BRR = (int)(((ulonglong)(pclkFreq1 * 0x19) / (ulonglong)(uint)(baudRate << 2)) / 100) << 4 |\n                   (((pclkFreq2 * 0x19) / (uint)(baudRate << 2) +\n                    (int)(((ulonglong)(pclkFreq3 * 0x19) / (ulonglong)(uint)(baudRate << 2)) / 100) * -100)\n                    * 0x10 + 0x32) / 100 & 0xf;\n    }\n  }\n  else if ((usartPort == (USART_TypeDef *)0x40011000) || (usartPort == (USART_TypeDef *)0x40011400)) {\n    pclkFreq1 = HAL_RCC_GetPCLK2Freq();\n    pclkFreq2 = HAL_RCC_GetPCLK2Freq();\n    pclkFreq3 = HAL_RCC_GetPCLK2Freq();\n    usartPort->BRR = (int)(((ulonglong)(pclkFreq1 * 0x19) / (ulonglong)(uint)(baudRate << 1)) / 100) << 4 |\n                 (((pclkFreq2 * 0x19) / (uint)(baudRate << 1) +\n                  (int)(((ulonglong)(pclkFreq3 * 0x19) / (ulonglong)(uint)(baudRate << 1)) / 100) * -100) *\n                  0x10 + 0x32) / 100 & 0xf;\n  }\n  else {\n    pclkFreq1 = HAL_RCC_GetPCLK1Freq();\n    pclkFreq2 = HAL_RCC_GetPCLK1Freq();\n    pclkFreq3 = HAL_RCC_GetPCLK1Freq();\n    usartPort->BRR = (int)(((ulonglong)(pclkFreq1 * 0x19) / (ulonglong)(uint)(baudRate << 1)) / 100) << 4 |\n                 (((pclkFreq2 * 0x19) / (uint)(baudRate << 1) +\n                  (int)(((ulonglong)(pclkFreq3 * 0x19) / (ulonglong)(uint)(baudRate << 1)) / 100) * -100) *\n                  0x10 + 0x32) / 100 & 0xf;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007f54": "initialize_usart_08007f54",
                "usart": "usartPort",
                "baud": "baudRate",
                "baud_local": "baudRate_local",
                "usart_local": "usartPort_local",
                "uVar1": "pclkFreq1",
                "uVar2": "pclkFreq2",
                "uVar3": "pclkFreq3"
            },
            "calling": [
                "usart_init"
            ],
            "called": [
                "HAL_RCC_GetPCLK2Freq",
                "HAL_RCC_GetPCLK1Freq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008190": {
            "entrypoint": "0x08008190",
            "current_name": "initialize_usart_08008190",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nvoid initializeUSART_08008190(void)\n\n{\n  uint32_t value;\n  USART_TypeDef *usartInstance;\n  \n  enable_usartInstance_clock((USART_TypeDef *)&DAT_40004400);\n  _DAT_4000440c = _DAT_4000440c & 0xffff400c | 0xc;\n  _DAT_40004410 = _DAT_40004410 & 0xffff8090;\n  _DAT_40004414 = _DAT_40004414 & 0xfffff000;\n  _DAT_40004400 = _DAT_40004400 & 0xfffffc00;\n  set_baud_rate((USART_TypeDef *)&DAT_40004400,0x1c200);\n  _DAT_4000440c = _DAT_4000440c | 0x2000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008190": "initialize_usart_08008190",
                "val": "value",
                "usart": "usartInstance"
            },
            "calling": [
                "main"
            ],
            "called": [
                "set_baud_rate",
                "enable_usart_clock"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008244": {
            "entrypoint": "0x08008244",
            "current_name": "FUNC_08008244",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid FUNC_08008244(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008244": "FUNC_08008244"
            },
            "calling": [
                "grbl_main"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08008250": {
            "entrypoint": "0x08008250",
            "current_name": "send_data_to_usart_08008250",
            "code": "\nvoid sendDataToUSART_08008250(uint8_t dataToSend)\n\n{\n  uint8_t localData;\n  \n  usart_putc(dataToSend);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008250": "send_data_to_usart_08008250",
                "data": "dataToSend",
                "data_local": "localData"
            },
            "calling": [
                "printString",
                "print_base2",
                "printFloat",
                "printPgmString",
                "print_uint32_base10",
                "printInteger"
            ],
            "called": [
                "usart_putc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800826a": {
            "entrypoint": "0x0800826a",
            "current_name": "send_character_0800826a",
            "code": "\nint sendCharacter_0800826a(int inputCharacter)\n\n{\n  int localCharacter;\n  \n  usart_putc((inputCharacterar)inputCharacter);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800826a": "send_character_0800826a",
                "ch": "inputCharacter",
                "ch_local": "localCharacter"
            },
            "calling": [],
            "called": [
                "usart_putc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008286": {
            "entrypoint": "0x08008286",
            "current_name": "read_serial_data_08008286",
            "code": "\n/* WARNING: Unknown calling convention */\n\nuint8_t read_serial_data_08008286(void)\n\n{\n  uint8_t received_data;\n  int data_available;\n  uint8_t c;\n  \n  data_available = usart_tstc();\n  if (data_available != 0) {\n    received_data = usart_getc();\n    data_available = serial_rx_hook(received_data);\n    if (data_available == 0) {\n      return received_data;\n    }\n  }\n  return 0xff;\n}\n\n",
            "renaming": {
                "FUN_08008286": "read_serial_data_08008286",
                "iVar1": "data_available",
                "data": "received_data"
            },
            "calling": [
                "protocol_process"
            ],
            "called": [
                "usart_getc",
                "usart_tstc",
                "serial_rx_hook"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080082ba": {
            "entrypoint": "0x080082ba",
            "current_name": "FUNC_080082ba",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid FUNC_080082ba(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080082ba": "FUNC_080082ba"
            },
            "calling": [
                "grbl_main"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080082c8": {
            "entrypoint": "0x080082c8",
            "current_name": "add_and_xor_080082c8",
            "code": "\nvoid addAndXor_080082c8(undefined4 result,uint value)\n\n{\n  __aeabi_dadd(result,value ^ 0x80000000);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080082c8": "add_and_xor_080082c8",
                "param_1": "result",
                "param_2": "value"
            },
            "calling": [],
            "called": [
                "__aeabi_dadd"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080082d0": {
            "entrypoint": "0x080082d0",
            "current_name": "calculate_result_080082d0",
            "code": "\nulonglong calculate_result_080082d0(uint input_1,uint input_2,uint input_3,uint input_4)\n\n{\n  int value_1;\n  byte flag_1;\n  uint value_2;\n  uint value_3;\n  uint value_4;\n  uint temp_1;\n  uint temp_2;\n  int value_5;\n  uint result_1;\n  uint result_2;\n  uint result_3;\n  uint result_4;\n  bool flag_2;\n  bool flag_3;\n  bool flag_4;\n  \n  temp_1 = input_4 ^ 0x80000000;\n  result_1 = input_2 << 1;\n  input_4 = input_4 << 1;\n  flag_2 = ((input_2 ^ temp_1) & 0x7fffffff) == 0;\n  flag_3 = flag_2 && input_1 == input_3;\n  if (!flag_2 || input_1 != input_3) {\n    flag_3 = (result_1 | input_1) == 0;\n  }\n  if (!flag_3) {\n    flag_3 = (input_4 | input_3) == 0;\n  }\n  value_5 = (int)result_1 >> 0x15;\n  if (!flag_3) {\n    flag_3 = value_5 == -1;\n  }\n  value_1 = (int)input_4 >> 0x15;\n  if (!flag_3) {\n    flag_3 = value_1 == -1;\n  }\n  if (flag_3) {\n    if (value_5 == -1 || value_1 == -1) {\n      result_1 = temp_1;\n      result_3 = input_3;\n      if (value_5 == -1) {\n        result_1 = input_2;\n        result_3 = input_1;\n      }\n      if (value_5 != -1 || value_1 != -1) {\n        input_3 = result_3;\n        temp_1 = result_1;\n      }\n      flag_3 = (result_3 | result_1 << 0xc) == 0;\n      if (flag_3) {\n        flag_3 = (input_3 | temp_1 << 0xc) == 0;\n      }\n      if (flag_3) {\n        flag_3 = result_1 == temp_1;\n      }\n      if (!flag_3) {\n        result_1 = result_1 | 0x80000;\n      }\n      return CONCAT44(result_1,result_3);\n    }\n    if (((input_2 ^ temp_1) & 0x7fffffff) != 0 || input_1 != input_3) {\n      if ((result_1 | input_1) == 0) {\n        input_1 = input_3;\n        input_2 = temp_1;\n      }\n      return CONCAT44(input_2,input_1);\n    }\n    if (input_2 != temp_1) {\n      return 0;\n    }\n    if (result_1 >> 0x15 == 0) {\n      flag_3 = (input_1 & 0x80000000) != 0;\n      temp_1 = input_2 * 2 + (uint)flag_3;\n      if (CARRY4(input_2,input_2) || CARRY4(input_2 * 2,(uint)flag_3)) {\n        temp_1 = temp_1 | 0x80000000;\n      }\n      return CONCAT44(temp_1,input_1 << 1);\n    }\n    if (result_1 < 0xffc00000) {\n      return CONCAT44(input_2 + 0x100000,input_1);\n    }\n    input_2 = input_2 & 0x80000000;\nLAB_08008514:\n    return (ulonglong)(input_2 | 0x7ff00000) << 0x20;\n  }\n  result_1 = result_1 >> 0x15;\n  input_4 = input_4 >> 0x15;\n  result_3 = input_4 - result_1;\n  flag_3 = result_3 != 0;\n  if (input_4 < result_1) {\n    result_3 = -result_3;\n  }\n  result_2 = input_1;\n  temp_2 = input_2;\n  if (flag_3 && result_1 <= input_4) {\n    result_1 = result_1 + result_3;\n    result_2 = input_3;\n    temp_2 = temp_1;\n    input_3 = input_1;\n    temp_1 = input_2;\n  }\n  if (0x36 < result_3) {\n    return CONCAT44(temp_2,result_2);\n  }\n  value_3 = temp_2 & 0xfffff | 0x100000;\n  if ((temp_2 & 0x80000000) != 0) {\n    flag_3 = result_2 != 0;\n    result_2 = -result_2;\n    value_3 = -value_3 - (uint)flag_3;\n  }\n  temp_2 = temp_1 & 0xfffff | 0x100000;\n  if ((temp_1 & 0x80000000) != 0) {\n    flag_3 = input_3 != 0;\n    input_3 = -input_3;\n    temp_2 = -temp_2 - (uint)flag_3;\n  }\n  if (result_1 == result_3) {\n    temp_2 = temp_2 ^ 0x100000;\n    if (result_1 == 0) {\n      value_3 = value_3 ^ 0x100000;\n      result_1 = 1;\n    }\n    else {\n      result_3 = result_3 - 1;\n    }\n  }\n  temp_1 = -result_3 + 0x20;\n  if ((int)result_3 < 0x21) {\n    result_4 = input_3 << (temp_1 & 0xff);\n    input_3 = input_3 >> (result_3 & 0xff);\n    value_2 = result_2 + input_3;\n    value_4 = temp_2 << (temp_1 & 0xff);\n    temp_1 = value_2 + value_4;\n    value_3 = value_3 + CARRY4(result_2,input_3) + ((int)temp_2 >> (result_3 & 0xff)) +\n            (uint)CARRY4(value_2,value_4);\n  }\n  else {\n    result_4 = temp_2 << (-result_3 + 0x40 & 0xff);\n    if (input_3 != 0) {\n      result_4 = result_4 | 2;\n    }\n    temp_2 = (int)temp_2 >> (result_3 - 0x20 & 0xff);\n    temp_1 = result_2 + temp_2;\n    value_3 = value_3 + ((int)temp_2 >> 0x1f) + (uint)CARRY4(result_2,temp_2);\n  }\n  input_2 = value_3 & 0x80000000;\n  result_3 = value_3;\n  if ((int)value_3 < 0) {\n    flag_3 = result_4 == 0;\n    result_4 = -result_4;\n    result_3 = -temp_1;\n    temp_1 = -(uint)!flag_3 - temp_1;\n    result_3 = -(uint)(flag_3 <= result_3) - value_3;\n  }\n  if (0xfffff < result_3) {\n    result_2 = result_1 - 1;\n    if (0x1fffff < result_3) {\n      result_2 = result_3 & 1;\n      result_3 = result_3 >> 1;\n      flag_1 = (byte)temp_1;\n      temp_1 = (uint)(result_2 != 0) << 0x1f | temp_1 >> 1;\n      result_4 = (uint)(flag_1 & 1) << 0x1f | result_4 >> 1;\n      result_2 = result_1;\n      if (0xffbfffff < result_1 * 0x200000) goto LAB_08008514;\n    }\nLAB_080083e0:\n    flag_3 = 0x7fffffff < result_4;\n    if (result_4 == 0x80000000) {\n      flag_3 = (temp_1 & 1) != 0;\n    }\n    return CONCAT44(result_3 + result_2 * 0x100000 + (uint)CARRY4(temp_1,(uint)flag_3) | input_2,\n                    temp_1 + flag_3);\n  }\n  flag_2 = (result_4 & 0x80000000) != 0;\n  result_4 = result_4 << 1;\n  result_2 = temp_1 * 2;\n  flag_3 = CARRY4(temp_1,temp_1);\n  temp_1 = temp_1 * 2 + (uint)flag_2;\n  result_3 = result_3 * 2 + (uint)(flag_3 || CARRY4(result_2,(uint)flag_2));\n  result_2 = result_1 - 2;\n  if (result_1 - 1 != 0 && 0xfffff < result_3) goto LAB_080083e0;\n  temp_2 = temp_1;\n  result_1 = result_3;\n  if (result_3 == 0) {\n    temp_2 = 0;\n    result_1 = temp_1;\n  }\n  value_5 = LZCOUNT(result_1);\n  if (result_3 == 0) {\n    value_5 = value_5 + 0x20;\n  }\n  result_3 = value_5 - 0xb;\n  flag_4 = SBORROW4(result_3,0x20);\n  temp_1 = value_5 - 0x2b;\n  flag_3 = (int)temp_1 < 0;\n  flag_2 = temp_1 == 0;\n  if ((int)result_3 < 0x20) {\n    flag_4 = SCARRY4(temp_1,0xc);\n    value_5 = value_5 + -0x1f;\n    flag_3 = value_5 < 0;\n    flag_2 = value_5 == 0;\n    temp_1 = result_3;\n    if (!flag_2 && flag_3 == flag_4) {\n      temp_2 = result_1 << (result_3 & 0xff);\n      result_1 = result_1 >> (0xcU - value_5 & 0xff);\n      goto LAB_08008458;\n    }\n  }\n  if (flag_2 || flag_3 != flag_4) {\n    result_4 = 0x20 - temp_1;\n  }\n  result_1 = result_1 << (temp_1 & 0xff);\n  if (flag_2 || flag_3 != flag_4) {\n    result_1 = result_1 | temp_2 >> (result_4 & 0xff);\n  }\n  if (flag_2 || flag_3 != flag_4) {\n    temp_2 = temp_2 << (temp_1 & 0xff);\n  }\nLAB_08008458:\n  if ((int)result_3 <= (int)result_2) {\n    return CONCAT44(result_1 + (result_2 - result_3) * 0x100000 | input_2,temp_2);\n  }\n  temp_1 = ~(result_2 - result_3);\n  if ((int)temp_1 < 0x1f) {\n    value_5 = temp_1 - 0x13;\n    if (value_5 != 0 && value_5 < 0 == SCARRY4(temp_1 - 0x1f,0xc)) {\n      return CONCAT44(value_3,temp_2 >> (0x20 - (0xcU - value_5) & 0xff) | result_1 << (0xcU - value_5 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    temp_1 = temp_1 + 1;\n    return CONCAT44(input_2 | result_1 >> (temp_1 & 0xff),\n                    temp_2 >> (temp_1 & 0xff) | result_1 << (0x20 - temp_1 & 0xff));\n  }\n  return CONCAT44(value_3,result_1 >> (temp_1 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_080082d0": "calculate_result_080082d0",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "iVar1": "value_1",
                "bVar2": "flag_1",
                "uVar3": "value_2",
                "uVar4": "value_3",
                "uVar5": "value_4",
                "uVar6": "temp_1",
                "uVar7": "temp_2",
                "iVar8": "value_5",
                "uVar9": "result_1",
                "uVar10": "result_2",
                "uVar11": "result_3",
                "uVar12": "result_4",
                "bVar13": "flag_2",
                "bVar14": "flag_3",
                "bVar15": "flag_4"
            },
            "calling": [
                "sin",
                "__ieee754_rem_pio2",
                "__ieee754_atan2",
                "atan",
                "report_realtime_status",
                "__kernel_rem_pio2",
                "__kernel_sin",
                "plan_buffer_line",
                "__ieee754_sqrt",
                "mc_arc",
                "__ieee754_hypot",
                "cos",
                "__kernel_cos"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080082d4": {
            "entrypoint": "0x080082d4",
            "current_name": "calculate_result_080082d4",
            "code": "\nulonglong calculate_result_080082d4(uint num1,uint num2,uint num3,uint num4)\n\n{\n  int shift1;\n  byte carry;\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  int shift2;\n  uint temp4;\n  uint temp5;\n  uint temp6;\n  uint temp7;\n  uint temp8;\n  uint temp9;\n  bool flag1;\n  bool flag2;\n  bool flag3;\n  \n  temp4 = num2 << 1;\n  temp6 = num4 << 1;\n  flag1 = ((num2 ^ num4) & 0x7fffffff) == 0;\n  flag2 = flag1 && num1 == num3;\n  if (!flag1 || num1 != num3) {\n    flag2 = (temp4 | num1) == 0;\n  }\n  if (!flag2) {\n    flag2 = (temp6 | num3) == 0;\n  }\n  shift2 = (int)temp4 >> 0x15;\n  if (!flag2) {\n    flag2 = shift2 == -1;\n  }\n  shift1 = (int)temp6 >> 0x15;\n  if (!flag2) {\n    flag2 = shift1 == -1;\n  }\n  if (flag2) {\n    if (shift2 == -1 || shift1 == -1) {\n      temp6 = num4;\n      temp4 = num3;\n      if (shift2 == -1) {\n        temp6 = num2;\n        temp4 = num1;\n      }\n      if (shift2 != -1 || shift1 != -1) {\n        num3 = temp4;\n        num4 = temp6;\n      }\n      flag2 = (temp4 | temp6 << 0xc) == 0;\n      if (flag2) {\n        flag2 = (num3 | num4 << 0xc) == 0;\n      }\n      if (flag2) {\n        flag2 = temp6 == num4;\n      }\n      if (!flag2) {\n        temp6 = temp6 | 0x80000;\n      }\n      return CONCAT44(temp6,temp4);\n    }\n    if (((num2 ^ num4) & 0x7fffffff) != 0 || num1 != num3) {\n      if ((temp4 | num1) == 0) {\n        num1 = num3;\n        num2 = num4;\n      }\n      return CONCAT44(num2,num1);\n    }\n    if (num2 != num4) {\n      return 0;\n    }\n    if (temp4 >> 0x15 == 0) {\n      flag2 = (num1 & 0x80000000) != 0;\n      temp6 = num2 * 2 + (uint)flag2;\n      if (CARRY4(num2,num2) || CARRY4(num2 * 2,(uint)flag2)) {\n        temp6 = temp6 | 0x80000000;\n      }\n      return CONCAT44(temp6,num1 << 1);\n    }\n    if (temp4 < 0xffc00000) {\n      return CONCAT44(num2 + 0x100000,num1);\n    }\n    num2 = num2 & 0x80000000;\nLAB_08008514:\n    return (ulonglong)(num2 | 0x7ff00000) << 0x20;\n  }\n  temp4 = temp4 >> 0x15;\n  temp6 = temp6 >> 0x15;\n  temp7 = temp6 - temp4;\n  flag2 = temp7 != 0;\n  if (temp6 < temp4) {\n    temp7 = -temp7;\n  }\n  temp5 = num1;\n  temp3 = num2;\n  if (flag2 && temp4 <= temp6) {\n    temp4 = temp4 + temp7;\n    temp5 = num3;\n    temp3 = num4;\n    num3 = num1;\n    num4 = num2;\n  }\n  if (0x36 < temp7) {\n    return CONCAT44(temp3,temp5);\n  }\n  temp6 = temp3 & 0xfffff | 0x100000;\n  if ((temp3 & 0x80000000) != 0) {\n    flag2 = temp5 != 0;\n    temp5 = -temp5;\n    temp6 = -temp6 - (uint)flag2;\n  }\n  temp3 = num4 & 0xfffff | 0x100000;\n  if ((num4 & 0x80000000) != 0) {\n    flag2 = num3 != 0;\n    num3 = -num3;\n    temp3 = -temp3 - (uint)flag2;\n  }\n  if (temp4 == temp7) {\n    temp3 = temp3 ^ 0x100000;\n    if (temp4 == 0) {\n      temp6 = temp6 ^ 0x100000;\n      temp4 = 1;\n    }\n    else {\n      temp7 = temp7 - 1;\n    }\n  }\n  temp9 = -temp7 + 0x20;\n  if ((int)temp7 < 0x21) {\n    temp8 = num3 << (temp9 & 0xff);\n    num3 = num3 >> (temp7 & 0xff);\n    temp1 = temp5 + num3;\n    temp2 = temp3 << (temp9 & 0xff);\n    temp9 = temp1 + temp2;\n    temp6 = temp6 + CARRY4(temp5,num3) + ((int)temp3 >> (temp7 & 0xff)) +\n            (uint)CARRY4(temp1,temp2);\n  }\n  else {\n    temp8 = temp3 << (-temp7 + 0x40 & 0xff);\n    if (num3 != 0) {\n      temp8 = temp8 | 2;\n    }\n    temp3 = (int)temp3 >> (temp7 - 0x20 & 0xff);\n    temp9 = temp5 + temp3;\n    temp6 = temp6 + ((int)temp3 >> 0x1f) + (uint)CARRY4(temp5,temp3);\n  }\n  num2 = temp6 & 0x80000000;\n  temp7 = temp6;\n  if ((int)temp6 < 0) {\n    flag2 = temp8 == 0;\n    temp8 = -temp8;\n    temp7 = -temp9;\n    temp9 = -(uint)!flag2 - temp9;\n    temp7 = -(uint)(flag2 <= temp7) - temp6;\n  }\n  if (0xfffff < temp7) {\n    temp5 = temp4 - 1;\n    if (0x1fffff < temp7) {\n      temp6 = temp7 & 1;\n      temp7 = temp7 >> 1;\n      carry = (byte)temp9;\n      temp9 = (uint)(temp6 != 0) << 0x1f | temp9 >> 1;\n      temp8 = (uint)(carry & 1) << 0x1f | temp8 >> 1;\n      temp5 = temp4;\n      if (0xffbfffff < temp4 * 0x200000) goto LAB_08008514;\n    }\nLAB_080083e0:\n    flag2 = 0x7fffffff < temp8;\n    if (temp8 == 0x80000000) {\n      flag2 = (temp9 & 1) != 0;\n    }\n    return CONCAT44(temp7 + temp5 * 0x100000 + (uint)CARRY4(temp9,(uint)flag2) | num2,\n                    temp9 + flag2);\n  }\n  flag1 = (temp8 & 0x80000000) != 0;\n  temp8 = temp8 << 1;\n  temp5 = temp9 * 2;\n  flag2 = CARRY4(temp9,temp9);\n  temp9 = temp9 * 2 + (uint)flag1;\n  temp7 = temp7 * 2 + (uint)(flag2 || CARRY4(temp5,(uint)flag1));\n  temp5 = temp4 - 2;\n  if (temp4 - 1 != 0 && 0xfffff < temp7) goto LAB_080083e0;\n  temp3 = temp9;\n  temp4 = temp7;\n  if (temp7 == 0) {\n    temp3 = 0;\n    temp4 = temp9;\n  }\n  shift2 = LZCOUNT(temp4);\n  if (temp7 == 0) {\n    shift2 = shift2 + 0x20;\n  }\n  temp9 = shift2 - 0xb;\n  flag3 = SBORROW4(temp9,0x20);\n  temp7 = shift2 - 0x2b;\n  flag2 = (int)temp7 < 0;\n  flag1 = temp7 == 0;\n  if ((int)temp9 < 0x20) {\n    flag3 = SCARRY4(temp7,0xc);\n    shift2 = shift2 + -0x1f;\n    flag2 = shift2 < 0;\n    flag1 = shift2 == 0;\n    temp7 = temp9;\n    if (!flag1 && flag2 == flag3) {\n      temp3 = temp4 << (temp9 & 0xff);\n      temp4 = temp4 >> (0xcU - shift2 & 0xff);\n      goto LAB_08008458;\n    }\n  }\n  if (flag1 || flag2 != flag3) {\n    temp8 = 0x20 - temp7;\n  }\n  temp4 = temp4 << (temp7 & 0xff);\n  if (flag1 || flag2 != flag3) {\n    temp4 = temp4 | temp3 >> (temp8 & 0xff);\n  }\n  if (flag1 || flag2 != flag3) {\n    temp3 = temp3 << (temp7 & 0xff);\n  }\nLAB_08008458:\n  if ((int)temp9 <= (int)temp5) {\n    return CONCAT44(temp4 + (temp5 - temp9) * 0x100000 | num2,temp3);\n  }\n  temp7 = ~(temp5 - temp9);\n  if ((int)temp7 < 0x1f) {\n    shift2 = temp7 - 0x13;\n    if (shift2 != 0 && shift2 < 0 == SCARRY4(temp7 - 0x1f,0xc)) {\n      return CONCAT44(temp6,temp3 >> (0x20 - (0xcU - shift2) & 0xff) | temp4 << (0xcU - shift2 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    temp7 = temp7 + 1;\n    return CONCAT44(num2 | temp4 >> (temp7 & 0xff),\n                    temp3 >> (temp7 & 0xff) | temp4 << (0x20 - temp7 & 0xff));\n  }\n  return CONCAT44(temp6,temp4 >> (temp7 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_080082d4": "calculate_result_080082d4",
                "param_1": "num1",
                "param_2": "num2",
                "param_3": "num3",
                "param_4": "num4",
                "iVar1": "shift1",
                "bVar2": "carry",
                "uVar3": "temp1",
                "uVar4": "temp2",
                "uVar5": "temp3",
                "iVar6": "shift2",
                "uVar7": "temp4",
                "uVar8": "temp5",
                "uVar9": "temp6",
                "uVar10": "temp7",
                "uVar11": "temp8",
                "uVar12": "temp9",
                "bVar13": "flag1",
                "bVar14": "flag2",
                "bVar15": "flag3"
            },
            "calling": [
                "__ieee754_rem_pio2",
                "trunc",
                "__ieee754_atan2",
                "atan",
                "__aeabi_drsub",
                "__kernel_rem_pio2",
                "round",
                "__kernel_sin",
                "scalbn",
                "ceil",
                "__ieee754_sqrt",
                "mc_arc",
                "__ieee754_hypot",
                "__kernel_cos",
                "floor"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800854c": {
            "entrypoint": "0x0800854c",
            "current_name": "shift_and_combine_0800854c",
            "code": "\nulonglong shiftAndCombine_0800854c(uint input)\n\n{\n  uint result1;\n  uint result2;\n  int leadingZeros;\n  uint shiftAmount;\n  uint remainingBits;\n  bool isNegative;\n  bool isZero;\n  bool overflow;\n  \n  if (input == 0) {\n    return 0;\n  }\n  result1 = 0;\n  leadingZeros = LZCOUNT(input);\n  shiftAmount = leadingZeros + 0x15;\n  overflow = SBORROW4(shiftAmount,0x20);\n  result2 = leadingZeros - 0xb;\n  isNegative = (int)result2 < 0;\n  isZero = result2 == 0;\n  if (shiftAmount < 0x20) {\n    overflow = SCARRY4(result2,0xc);\n    isNegative = false;\n    isZero = leadingZeros + 1 == 0;\n    result2 = shiftAmount;\n    if (!isZero && overflow == false) {\n      result1 = input << shiftAmount;\n      input = input >> (0xcU - (leadingZeros + 1) & 0xff);\n      goto LAB_08008458;\n    }\n  }\n  if (isZero || isNegative != overflow) {\n    remainingBits = 0x20 - result2;\n  }\n  input = input << (result2 & 0xff);\n  if (isZero || isNegative != overflow) {\n    input = input | 0U >> (remainingBits & 0xff);\n  }\n  if (isZero || isNegative != overflow) {\n    result1 = 0 << (result2 & 0xff);\n  }\nLAB_08008458:\n  if (shiftAmount < 0x433) {\n    return CONCAT44(input + (0x432 - shiftAmount) * 0x100000,result1);\n  }\n  result2 = ~(0x432 - shiftAmount);\n  if (0x1e < (int)result2) {\n    return (ulonglong)(input >> (result2 - 0x1f & 0xff));\n  }\n  leadingZeros = result2 - 0x13;\n  if (leadingZeros == 0 || leadingZeros < 0 != SCARRY4(result2 - 0x1f,0xc)) {\n    result2 = result2 + 1;\n    return CONCAT44(input >> (result2 & 0xff),\n                    result1 >> (result2 & 0xff) | input << (0x20 - result2 & 0xff));\n  }\n  return (ulonglong)(result1 >> (0x20 - (0xcU - leadingZeros) & 0xff) | input << (0xcU - leadingZeros & 0xff));\n}\n\n",
            "renaming": {
                "FUN_0800854c": "shift_and_combine_0800854c",
                "param_1": "input",
                "uVar1": "result1",
                "uVar2": "result2",
                "iVar3": "leadingZeros",
                "uVar4": "shiftAmount",
                "in_r12": "remainingBits",
                "bVar5": "isNegative",
                "bVar6": "isZero",
                "bVar7": "overflow"
            },
            "calling": [
                "homing_cycle"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800856c": {
            "entrypoint": "0x0800856c",
            "current_name": "calculate_shifted_inverse_0800856c",
            "code": "\nulonglong calculate_shifted_inverse_0800856c(uint input_value)\n\n{\n  uint result;\n  uint abs_input_value;\n  uint shift_value;\n  int leading_zeros;\n  uint required_shift;\n  uint sign_bit;\n  uint remaining_shift;\n  bool is_negative;\n  bool is_zero;\n  bool overflow_flag;\n  \n  if (input_value == 0) {\n    return 0;\n  }\n  sign_bit = input_value & 0x80000000;\n  abs_input_value = input_value;\n  if ((int)sign_bit < 0) {\n    abs_input_value = -input_value;\n  }\n  result = 0;\n  leading_zeros = LZCOUNT(abs_input_value);\n  required_shift = leading_zeros + 0x15;\n  overflow_flag = SBORROW4(required_shift,0x20);\n  shift_value = leading_zeros - 0xb;\n  is_negative = (int)shift_value < 0;\n  is_zero = shift_value == 0;\n  if (required_shift < 0x20) {\n    overflow_flag = SCARRY4(shift_value,0xc);\n    is_negative = false;\n    is_zero = leading_zeros + 1 == 0;\n    shift_value = required_shift;\n    if (!is_zero && overflow_flag == false) {\n      result = abs_input_value << required_shift;\n      abs_input_value = abs_input_value >> (0xcU - (leading_zeros + 1) & 0xff);\n      goto LAB_08008458;\n    }\n  }\n  if (is_zero || is_negative != overflow_flag) {\n    remaining_shift = 0x20 - shift_value;\n  }\n  abs_input_value = abs_input_value << (shift_value & 0xff);\n  if (is_zero || is_negative != overflow_flag) {\n    abs_input_value = abs_input_value | 0U >> (remaining_shift & 0xff);\n  }\n  if (is_zero || is_negative != overflow_flag) {\n    result = 0 << (shift_value & 0xff);\n  }\nLAB_08008458:\n  if (required_shift < 0x433) {\n    return CONCAT44(abs_input_value + (0x432 - required_shift) * 0x100000 | sign_bit,result);\n  }\n  shift_value = ~(0x432 - required_shift);\n  if (0x1e < (int)shift_value) {\n    return CONCAT44(input_value,abs_input_value >> (shift_value - 0x1f & 0xff)) & 0x80000000ffffffff;\n  }\n  leading_zeros = shift_value - 0x13;\n  if (leading_zeros == 0 || leading_zeros < 0 != SCARRY4(shift_value - 0x1f,0xc)) {\n    shift_value = shift_value + 1;\n    return CONCAT44(sign_bit | abs_input_value >> (shift_value & 0xff),\n                    result >> (shift_value & 0xff) | abs_input_value << (0x20 - shift_value & 0xff));\n  }\n  return CONCAT44(input_value,result >> (0x20 - (0xcU - leading_zeros) & 0xff) | abs_input_value << (0xcU - leading_zeros & 0xff))\n         & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_0800856c": "calculate_shifted_inverse_0800856c",
                "param_1": "input_value",
                "uVar1": "result",
                "uVar2": "abs_input_value",
                "uVar3": "shift_value",
                "iVar4": "leading_zeros",
                "uVar5": "required_shift",
                "uVar6": "sign_bit",
                "in_r12": "remaining_shift",
                "bVar7": "is_negative",
                "bVar8": "is_zero",
                "bVar9": "overflow_flag"
            },
            "calling": [
                "__ieee754_rem_pio2",
                "calculate_trapezoid_for_block",
                "__kernel_rem_pio2"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008590": {
            "entrypoint": "0x08008590",
            "current_name": "reverse_bits_08008590",
            "code": "\nulonglong reverseBits_08008590(uint input,undefined4 unused,undefined4 unused,uint mask)\n\n{\n  uint signExtension;\n  uint temp1;\n  uint resultHighBits;\n  uint shiftAmount;\n  uint temp2;\n  int bitCount;\n  uint normalizedShiftAmount;\n  uint remainingBits;\n  bool isIntSmallerThan0;\n  bool isZero;\n  bool isUnsignedGreaterThan0;\n  \n  temp2 = input << 1;\n  isZero = temp2 == 0;\n  signExtension = (uint)((input & 0x80000000) != 0) << 0x1f;\n  shiftAmount = (uint)((int)temp2 >> 3) >> 1;\n  resultHighBits = signExtension | shiftAmount;\n  input = input << 0x1d;\n  if (!isZero) {\n    mask = temp2 & 0xff000000;\n    isZero = mask == 0;\n  }\n  if (!isZero) {\n    isZero = mask == 0xff000000;\n  }\n  if (!isZero) {\n    return CONCAT44(resultHighBits,input) ^ 0x3800000000000000;\n  }\n  if ((temp2 & 0xffffff) == 0) {\n    return CONCAT44(resultHighBits,input);\n  }\n  if (mask == 0xff000000) {\n    return CONCAT44(resultHighBits,input) | 0x8000000000000;\n  }\n  temp1 = input;\n  temp2 = shiftAmount;\n  if (shiftAmount == 0) {\n    temp1 = 0;\n    temp2 = input;\n  }\n  bitCount = LZCOUNT(temp2);\n  if (shiftAmount == 0) {\n    bitCount = bitCount + 0x20;\n  }\n  normalizedShiftAmount = bitCount - 0xb;\n  isUnsignedGreaterThan0 = SBORROW4(normalizedShiftAmount,0x20);\n  shiftAmount = bitCount - 0x2b;\n  isZero = (int)shiftAmount < 0;\n  isIntSmallerThan0 = shiftAmount == 0;\n  if ((int)normalizedShiftAmount < 0x20) {\n    isUnsignedGreaterThan0 = SCARRY4(shiftAmount,0xc);\n    bitCount = bitCount + -0x1f;\n    isZero = bitCount < 0;\n    isIntSmallerThan0 = bitCount == 0;\n    shiftAmount = normalizedShiftAmount;\n    if (!isIntSmallerThan0 && isZero == isUnsignedGreaterThan0) {\n      temp1 = temp2 << (normalizedShiftAmount & 0xff);\n      temp2 = temp2 >> (0xcU - bitCount & 0xff);\n      goto LAB_08008458;\n    }\n  }\n  if (isIntSmallerThan0 || isZero != isUnsignedGreaterThan0) {\n    remainingBits = 0x20 - shiftAmount;\n  }\n  temp2 = temp2 << (shiftAmount & 0xff);\n  if (isIntSmallerThan0 || isZero != isUnsignedGreaterThan0) {\n    temp2 = temp2 | temp1 >> (remainingBits & 0xff);\n  }\n  if (isIntSmallerThan0 || isZero != isUnsignedGreaterThan0) {\n    temp1 = temp1 << (shiftAmount & 0xff);\n  }\nLAB_08008458:\n  if ((int)normalizedShiftAmount < 0x381) {\n    return CONCAT44(temp2 + (0x380 - normalizedShiftAmount) * 0x100000 | signExtension,temp1);\n  }\n  shiftAmount = ~(0x380 - normalizedShiftAmount);\n  if (0x1e < (int)shiftAmount) {\n    return CONCAT44(resultHighBits,temp2 >> (shiftAmount - 0x1f & 0xff)) & 0x80000000ffffffff;\n  }\n  bitCount = shiftAmount - 0x13;\n  if (bitCount == 0 || bitCount < 0 != SCARRY4(shiftAmount - 0x1f,0xc)) {\n    shiftAmount = shiftAmount + 1;\n    return CONCAT44(signExtension | temp2 >> (shiftAmount & 0xff),\n                    temp1 >> (shiftAmount & 0xff) | temp2 << (0x20 - shiftAmount & 0xff));\n  }\n  return CONCAT44(resultHighBits,temp1 >> (0x20 - (0xcU - bitCount) & 0xff) | temp2 << (0xcU - bitCount & 0xff)) &\n         0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_08008590": "reverse_bits_08008590",
                "param_1": "input",
                "param_2": "unused",
                "param_3": "unused",
                "param_4": "mask",
                "uVar1": "signExtension",
                "uVar2": "temp1",
                "uVar3": "resultHighBits",
                "uVar4": "shiftAmount",
                "uVar5": "temp2",
                "iVar6": "bitCount",
                "uVar7": "normalizedShiftAmount",
                "in_r12": "remainingBits",
                "bVar8": "isIntSmallerThan0",
                "bVar9": "isZero",
                "bVar10": "isUnsignedGreaterThan0"
            },
            "calling": [
                "to_millimeters",
                "calculate_trapezoid_for_block",
                "report_realtime_status",
                "homing_cycle",
                "max_allowable_speed",
                "plan_buffer_line",
                "gc_execute_line",
                "protocol_execute_line",
                "read_float",
                "mc_dwell",
                "mc_arc",
                "report_gcode_modes",
                "settings_store_global_setting",
                "report_gcode_parameters"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080085d4": {
            "entrypoint": "0x080085d4",
            "current_name": "calculate_product_080085d4",
            "code": "\nulonglong calculateProduct_080085d4(uint input1,uint input2)\n\n{\n  byte bit1;\n  uint result1;\n  uint count1;\n  uint result2;\n  int count2;\n  uint shift1;\n  int shift2;\n  uint upperBits;\n  bool carry1;\n  bool carry2;\n  bool carry3;\n  \n  if ((input1 | input2) == 0) {\n    return CONCAT44(input2,input1);\n  }\n  shift2 = 0x432;\n  upperBits = input2 >> 0x16;\n  if (upperBits != 0) {\n    shift2 = 3;\n    if (input2 >> 0x19 != 0) {\n      shift2 = 6;\n    }\n    if (input2 >> 0x1c != 0) {\n      shift2 = shift2 + 3;\n    }\n    result2 = shift2 - ((int)input2 >> 0x1f);\n    upperBits = input1 << (0x20 - result2 & 0xff);\n    input1 = input1 >> (result2 & 0xff) | input2 << (0x20 - result2 & 0xff);\n    input2 = input2 >> (result2 & 0xff);\n    shift2 = result2 + 0x432;\n  }\n  if (0xfffff < input2) {\n    if (0x1fffff < input2) {\n      result2 = input2 & 1;\n      input2 = input2 >> 1;\n      bit1 = (byte)input1;\n      input1 = (uint)(result2 != 0) << 0x1f | input1 >> 1;\n      upperBits = (uint)(bit1 & 1) << 0x1f | upperBits >> 1;\n      shift2 = shift2 + 1;\n      if (0xffbfffff < (uint)(shift2 * 0x200000)) {\n        return 0x7ff0000000000000;\n      }\n    }\nLAB_080083e0:\n    carry2 = 0x7fffffff < upperBits;\n    if (upperBits == 0x80000000) {\n      carry2 = (input1 & 1) != 0;\n    }\n    return CONCAT44(input2 + shift2 * 0x100000 + (uint)CARRY4(input1,(uint)carry2),input1 + carry2\n                   );\n  }\n  carry1 = (upperBits & 0x80000000) != 0;\n  upperBits = upperBits << 1;\n  result2 = input1 * 2;\n  carry2 = CARRY4(input1,input1);\n  input1 = input1 * 2 + (uint)carry1;\n  input2 = input2 * 2 + (uint)(carry2 || CARRY4(result2,(uint)carry1));\n  carry2 = shift2 != 0;\n  shift2 = shift2 + -1;\n  if (carry2 && 0xfffff < input2) goto LAB_080083e0;\n  result1 = input1;\n  result2 = input2;\n  if (input2 == 0) {\n    result1 = 0;\n    result2 = input1;\n  }\n  count2 = LZCOUNT(result2);\n  if (input2 == 0) {\n    count2 = count2 + 0x20;\n  }\n  shift1 = count2 - 0xb;\n  carry3 = SBORROW4(shift1,0x20);\n  count1 = count2 - 0x2b;\n  carry2 = (int)count1 < 0;\n  carry1 = count1 == 0;\n  if ((int)shift1 < 0x20) {\n    carry3 = SCARRY4(count1,0xc);\n    count2 = count2 + -0x1f;\n    carry2 = count2 < 0;\n    carry1 = count2 == 0;\n    count1 = shift1;\n    if (!carry1 && carry2 == carry3) {\n      result1 = result2 << (shift1 & 0xff);\n      result2 = result2 >> (0xcU - count2 & 0xff);\n      goto LAB_08008458;\n    }\n  }\n  if (carry1 || carry2 != carry3) {\n    upperBits = 0x20 - count1;\n  }\n  result2 = result2 << (count1 & 0xff);\n  if (carry1 || carry2 != carry3) {\n    result2 = result2 | result1 >> (upperBits & 0xff);\n  }\n  if (carry1 || carry2 != carry3) {\n    result1 = result1 << (count1 & 0xff);\n  }\nLAB_08008458:\n  if ((int)shift1 <= shift2) {\n    return CONCAT44(result2 + (shift2 - shift1) * 0x100000,result1);\n  }\n  upperBits = ~(shift2 - shift1);\n  if ((int)upperBits < 0x1f) {\n    shift2 = upperBits - 0x13;\n    if (shift2 != 0 && shift2 < 0 == SCARRY4(upperBits - 0x1f,0xc)) {\n      return (ulonglong)(result1 >> (0x20 - (0xcU - shift2) & 0xff) | result2 << (0xcU - shift2 & 0xff));\n    }\n    upperBits = upperBits + 1;\n    return CONCAT44(result2 >> (upperBits & 0xff),result1 >> (upperBits & 0xff) | result2 << (0x20 - upperBits & 0xff)\n                   );\n  }\n  return (ulonglong)(result2 >> (upperBits - 0x1f & 0xff));\n}\n\n",
            "renaming": {
                "FUN_080085d4": "calculate_product_080085d4",
                "param_1": "input1",
                "param_2": "input2",
                "bVar1": "bit1",
                "uVar2": "result1",
                "uVar3": "count1",
                "uVar4": "result2",
                "iVar5": "count2",
                "uVar6": "shift1",
                "iVar7": "shift2",
                "uVar8": "upperBits",
                "bVar9": "carry1",
                "bVar10": "carry2",
                "bVar11": "carry3"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080085e4": {
            "entrypoint": "0x080085e4",
            "current_name": "calculate_decimal_value_080085e4",
            "code": "\nulonglong calculate_decimal_value_080085e4(uint param_1,uint param_2)\n\n{\n  byte bit;\n  uint shifted_value;\n  uint temp;\n  uint remainder;\n  int leading_zeros;\n  uint shift_amount;\n  int exponent;\n  uint sign_bit;\n  uint remainder_bit;\n  bool carry_flag;\n  bool condition1;\n  bool condition2;\n  \n  if ((param_1 | param_2) == 0) {\n    return CONCAT44(param_2,param_1);\n  }\n  sign_bit = param_2 & 0x80000000;\n  temp = param_2;\n  if ((int)sign_bit < 0) {\n    condition1 = param_1 != 0;\n    param_1 = -param_1;\n    temp = -param_2 - (uint)condition1;\n  }\n  exponent = 0x432;\n  remainder_bit = temp >> 0x16;\n  if (remainder_bit != 0) {\n    exponent = 3;\n    if (temp >> 0x19 != 0) {\n      exponent = 6;\n    }\n    if (temp >> 0x1c != 0) {\n      exponent = exponent + 3;\n    }\n    remainder = exponent - ((int)temp >> 0x1f);\n    remainder_bit = param_1 << (0x20 - remainder & 0xff);\n    param_1 = param_1 >> (remainder & 0xff) | temp << (0x20 - remainder & 0xff);\n    temp = temp >> (remainder & 0xff);\n    exponent = remainder + 0x432;\n  }\n  if (0xfffff < temp) {\n    if (0x1fffff < temp) {\n      remainder = temp & 1;\n      temp = temp >> 1;\n      bit = (byte)param_1;\n      param_1 = (uint)(remainder != 0) << 0x1f | param_1 >> 1;\n      remainder_bit = (uint)(bit & 1) << 0x1f | remainder_bit >> 1;\n      exponent = exponent + 1;\n      if (0xffbfffff < (uint)(exponent * 0x200000)) {\n        return (ulonglong)(sign_bit | 0x7ff00000) << 0x20;\n      }\n    }\nLAB_080083e0:\n    condition1 = 0x7fffffff < remainder_bit;\n    if (remainder_bit == 0x80000000) {\n      condition1 = (param_1 & 1) != 0;\n    }\n    return CONCAT44(temp + exponent * 0x100000 + (uint)CARRY4(param_1,(uint)condition1) | sign_bit,\n                    param_1 + condition1);\n  }\n  carry_flag = (remainder_bit & 0x80000000) != 0;\n  remainder_bit = remainder_bit << 1;\n  remainder = param_1 * 2;\n  condition1 = CARRY4(param_1,param_1);\n  param_1 = param_1 * 2 + (uint)carry_flag;\n  temp = temp * 2 + (uint)(condition1 || CARRY4(remainder,(uint)carry_flag));\n  condition1 = exponent != 0;\n  exponent = exponent + -1;\n  if (condition1 && 0xfffff < temp) goto LAB_080083e0;\n  shifted_value = param_1;\n  remainder = temp;\n  if (temp == 0) {\n    shifted_value = 0;\n    remainder = param_1;\n  }\n  leading_zeros = LZCOUNT(remainder);\n  if (temp == 0) {\n    leading_zeros = leading_zeros + 0x20;\n  }\n  shift_amount = leading_zeros - 0xb;\n  condition2 = SBORROW4(shift_amount,0x20);\n  temp = leading_zeros - 0x2b;\n  condition1 = (int)temp < 0;\n  carry_flag = temp == 0;\n  if ((int)shift_amount < 0x20) {\n    condition2 = SCARRY4(temp,0xc);\n    leading_zeros = leading_zeros + -0x1f;\n    condition1 = leading_zeros < 0;\n    carry_flag = leading_zeros == 0;\n    temp = shift_amount;\n    if (!carry_flag && condition1 == condition2) {\n      shifted_value = remainder << (shift_amount & 0xff);\n      remainder = remainder >> (0xcU - leading_zeros & 0xff);\n      goto LAB_08008458;\n    }\n  }\n  if (carry_flag || condition1 != condition2) {\n    remainder_bit = 0x20 - temp;\n  }\n  remainder = remainder << (temp & 0xff);\n  if (carry_flag || condition1 != condition2) {\n    remainder = remainder | shifted_value >> (remainder_bit & 0xff);\n  }\n  if (carry_flag || condition1 != condition2) {\n    shifted_value = shifted_value << (temp & 0xff);\n  }\nLAB_08008458:\n  if ((int)shift_amount <= exponent) {\n    return CONCAT44(remainder + (exponent - shift_amount) * 0x100000 | sign_bit,shifted_value);\n  }\n  temp = ~(exponent - shift_amount);\n  if ((int)temp < 0x1f) {\n    exponent = temp - 0x13;\n    if (exponent != 0 && exponent < 0 == SCARRY4(temp - 0x1f,0xc)) {\n      return CONCAT44(param_2,shifted_value >> (0x20 - (0xcU - exponent) & 0xff) |\n                              remainder << (0xcU - exponent & 0xff)) & 0x80000000ffffffff;\n    }\n    temp = temp + 1;\n    return CONCAT44(sign_bit | remainder >> (temp & 0xff),\n                    shifted_value >> (temp & 0xff) | remainder << (0x20 - temp & 0xff));\n  }\n  return CONCAT44(param_2,remainder >> (temp - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_080085e4": "calculate_decimal_value_080085e4",
                "bVar1": "bit",
                "uVar2": "shifted_value",
                "uVar3": "temp",
                "uVar4": "remainder",
                "iVar5": "leading_zeros",
                "uVar6": "shift_amount",
                "iVar7": "exponent",
                "uVar8": "sign_bit",
                "uVar9": "remainder_bit",
                "bVar10": "carry_flag",
                "bVar11": "condition1",
                "bVar12": "condition2"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008640": {
            "entrypoint": "0x08008640",
            "current_name": "calculate_precise_result_08008640",
            "code": "\nulonglong calculate_precise_result_08008640(undefined4 value1,uint value2,uint value3,uint value4)\n\n{\n  ulonglong result;\n  longlong temp;\n  uint value2Upper;\n  uint value2Shifted;\n  int sum;\n  uint temp1;\n  uint value4Shifted;\n  uint temp2;\n  uint temp3;\n  bool isZero;\n  bool isNegative;\n  bool overflow;\n  ulonglong combinedValue;\n  \n  combinedValue = CONCAT44(value2,value1);\n  temp2 = 0x7ff;\n  value2Shifted = value2 >> 0x14 & 0x7ff;\n  isZero = value2Shifted == 0;\n  if (!isZero) {\n    value4Shifted = value4 >> 0x14 & 0x7ff;\n    isZero = value4Shifted == 0;\n  }\n  if (!isZero) {\n    isZero = value2Shifted == 0x7ff;\n  }\n  if (!isZero) {\n    isZero = value4Shifted == 0x7ff;\n  }\n  if (isZero) {\n    combinedValue = calculate_unsigned_long_0800881c();\n  }\n  value2Upper = (uint)(combinedValue >> 0x20);\n  sum = value2Shifted + value4Shifted;\n  value2Shifted = value2Upper ^ value4;\n  value2Upper = value2Upper & ~(temp2 << 0x15);\n  value4 = value4 & ~(temp2 << 0x15);\n  isZero = ((uint)combinedValue | value2Upper << 0xc) == 0;\n  if (!isZero) {\n    isZero = (value3 | value4 << 0xc) == 0;\n  }\n  value2Upper = value2Upper | 0x100000;\n  value4 = value4 | 0x100000;\n  if (isZero) {\n    value3 = (uint)combinedValue | value3;\n    value4 = (value2Shifted & 0x80000000 | value2Upper) ^ value4;\n    value2Shifted = temp2 >> 1;\n    overflow = SBORROW4(sum,value2Shifted);\n    temp1 = sum - value2Shifted;\n    isZero = temp1 == 0;\n    value2Upper = temp1;\n    if (!isZero && (int)value2Shifted <= sum) {\n      overflow = SBORROW4(temp2,temp1);\n      value2Upper = temp2 - temp1;\n      isZero = temp2 == temp1;\n    }\n    if (!isZero && (int)value2Upper < 0 == overflow) {\n      value4 = value4 | temp1 * 0x100000;\n    }\n    if (!isZero && (int)value2Upper < 0 == overflow) {\n      return CONCAT44(value4,value3);\n    }\n    value4 = value4 | 0x100000;\n    temp2 = 0;\n    overflow = SBORROW4(temp1,1);\n    temp1 = temp1 - 1;\n    isZero = temp1 == 0;\n    value2Shifted = temp1;\n  }\n  else {\n    result = (combinedValue & 0xffffffff) * (ulonglong)value3;\n    combinedValue = (combinedValue & 0xffffffff) * (ulonglong)value4 +\n             (ulonglong)value2Upper * (ulonglong)value3 + (result >> 0x20);\n    temp3 = (uint)combinedValue;\n    temp = (ulonglong)value2Upper * (ulonglong)value4 + (combinedValue >> 0x20);\n    temp2 = (uint)temp;\n    value2Upper = (uint)((ulonglong)temp >> 0x20);\n    if ((int)result != 0) {\n      temp3 = temp3 | 1;\n    }\n    temp1 = (sum + -0x3ff) - (uint)(value2Upper < 0x200);\n    if (value2Upper < 0x200) {\n      isZero = (temp3 & 0x80000000) != 0;\n      temp3 = temp3 << 1;\n      temp = CONCAT44(value2Upper * 2 + (uint)(CARRY4(temp2,temp2) || CARRY4(temp2 * 2,(uint)isZero)),\n                       temp2 * 2 + (uint)isZero);\n    }\n    value4 = value2Shifted & 0x80000000 | (int)((ulonglong)temp >> 0x20) << 0xb | (uint)temp >> 0x15;\n    value3 = (uint)temp << 0xb | temp3 >> 0x15;\n    temp2 = temp3 * 0x800;\n    isNegative = 0xfc < temp1;\n    overflow = SBORROW4(temp1,0xfd);\n    value2Upper = temp1 - 0xfd;\n    isZero = value2Upper == 0;\n    value2Shifted = value2Upper;\n    if (isNegative && !isZero) {\n      isNegative = 0x6ff < value2Upper;\n      overflow = SBORROW4(value2Upper,0x700);\n      value2Shifted = temp1 - 0x7fd;\n      isZero = value2Upper == 0x700;\n    }\n    if (!isNegative || isZero) {\n      isZero = 0x7fffffff < temp2;\n      if (temp2 == 0x80000000) {\n        isZero = (temp3 >> 0x15 & 1) != 0;\n      }\n      return CONCAT44(value4 + temp1 * 0x100000 + (uint)CARRY4(value3,(uint)isZero),value3 + isZero\n                     );\n    }\n  }\n  if (!isZero && (int)value2Shifted < 0 == overflow) {\n    return (ulonglong)(value4 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  isNegative = SCARRY4(temp1,0x36);\n  isZero = (int)(temp1 + 0x36) < 0;\n  overflow = temp1 == 0xffffffca;\n  if (overflow || isZero != isNegative) {\n    value3 = 0;\n  }\n  if (overflow || isZero != isNegative) {\n    value4 = value4 & 0x80000000;\n  }\n  if (overflow || isZero != isNegative) {\n    return CONCAT44(value4,value3);\n  }\n  value2Shifted = -temp1;\n  value2Upper = value2Shifted - 0x20;\n  if (0x1f < (int)value2Shifted) {\n    temp1 = value3 >> (value2Upper & 0xff) | value4 << (0x20 - value2Upper & 0xff);\n    value2Shifted = (value4 >> (value2Upper & 0xff) & ~((value4 & 0x80000000) >> (value2Upper & 0xff))) -\n            ((int)temp1 >> 0x1f);\n    if ((temp2 | value3 << (0x20 - value2Upper & 0xff) | temp1 << 1) == 0) {\n      value2Shifted = value2Shifted & ~(temp1 >> 0x1f);\n    }\n    return CONCAT44(value4,value2Shifted) & 0x80000000ffffffff;\n  }\n  sum = value2Shifted - 0x14;\n  if (sum == 0 || sum < 0 != SCARRY4(value2Upper,0xc)) {\n    temp3 = value3 << (temp1 + 0x20 & 0xff);\n    value2Upper = value3 >> (value2Shifted & 0xff) | value4 << (temp1 + 0x20 & 0xff);\n    temp1 = value2Upper + -((int)temp3 >> 0x1f);\n    if ((temp2 | temp3 << 1) == 0) {\n      temp1 = temp1 & ~(temp3 >> 0x1f);\n    }\n    return CONCAT44((value4 & 0x80000000) +\n                    ((value4 & 0x7fffffff) >> (value2Shifted & 0xff)) +\n                    (uint)CARRY4(value2Upper,-((int)temp3 >> 0x1f)),temp1);\n  }\n  value2Shifted = 0xc - sum;\n  temp1 = value3 << (value2Shifted & 0xff);\n  value2Shifted = value3 >> (0x20 - value2Shifted & 0xff) | value4 << (value2Shifted & 0xff);\n  value2Upper = value2Shifted + -((int)temp1 >> 0x1f);\n  if ((temp2 | temp1 << 1) == 0) {\n    value2Upper = value2Upper & ~(temp1 >> 0x1f);\n  }\n  return CONCAT44((value4 & 0x80000000) + (uint)CARRY4(value2Shifted,-((int)temp1 >> 0x1f)),value2Upper);\n}\n\n",
            "renaming": {
                "FUN_08008640": "calculate_precise_result_08008640",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "value3",
                "param_4": "value4",
                "uVar1": "result",
                "lVar2": "temp",
                "uVar3": "value2Upper",
                "uVar4": "value2Shifted",
                "iVar5": "sum",
                "uVar6": "temp1",
                "unaff_r5": "value4Shifted",
                "uVar7": "temp2",
                "uVar8": "temp3",
                "bVar9": "isZero",
                "bVar10": "isNegative",
                "bVar11": "overflow",
                "uVar12": "combinedValue"
            },
            "calling": [
                "__ieee754_rem_pio2",
                "to_millimeters",
                "calculate_trapezoid_for_block",
                "atan",
                "report_realtime_status",
                "__kernel_rem_pio2",
                "homing_cycle",
                "__kernel_sin",
                "plan_buffer_line",
                "scalbn",
                "read_float",
                "__ieee754_sqrt",
                "mc_arc",
                "__ieee754_hypot",
                "report_gcode_modes",
                "__kernel_cos",
                "report_gcode_parameters"
            ],
            "called": [
                "FUN_0800881c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800881c": {
            "entrypoint": "0x0800881c",
            "current_name": "calculate_unsigned_long_0800881c",
            "code": "\nulonglong calculateUnsignedLong_0800881c(uint input1,uint input2,uint input3,uint input4)\n\n{\n  uint bit1;\n  uint bit2;\n  uint bit3;\n  uint bit4;\n  uint bit5;\n  bool isZero;\n  \n  bit3 = bit5 & input4 >> 0x14;\n  if (bit2 != bit5 && bit3 != bit5) {\n    isZero = (input1 | input2 << 1) == 0;\n    if (!isZero) {\n      isZero = (input3 | input4 << 1) == 0;\n    }\n    if (isZero) {\n      return (ulonglong)((input2 ^ input4) & 0x80000000) << 0x20;\n    }\n    if (bit2 == 0) {\n      bit4 = input2 & 0x80000000;\n      do {\n        bit1 = input1 & 0x80000000;\n        input1 = input1 << 1;\n        input2 = input2 * 2 + (uint)(bit1 != 0);\n      } while ((input2 & 0x100000) == 0);\n      input2 = input2 | bit4;\n      if (bit3 != 0) {\n        return CONCAT44(input2,input1);\n      }\n    }\n    do {\n      bit3 = input3 & 0x80000000;\n      input3 = input3 << 1;\n      input4 = input4 * 2 + (uint)(bit3 != 0);\n    } while ((input4 & 0x100000) == 0);\n    return CONCAT44(input2,input1);\n  }\n  isZero = (input1 | input2 << 1) == 0;\n  if (isZero) {\n    input2 = input4;\n    input1 = input3;\n  }\n  if (!isZero) {\n    isZero = (input3 | input4 << 1) == 0;\n  }\n  bit4 = input2;\n  if (((!isZero) && ((bit2 != bit5 || ((input1 | input2 << 0xc) == 0)))) &&\n     ((bit3 != bit5 || (input1 = input3, bit4 = input4, (input3 | input4 << 0xc) == 0)))) {\n    return (ulonglong)((input2 ^ input4) & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  return CONCAT44(bit4,input1) | 0x7ff8000000000000;\n}\n\n",
            "renaming": {
                "FUN_0800881c": "calculate_unsigned_long_0800881c",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "bit1",
                "unaff_r4": "bit2",
                "uVar2": "bit3",
                "uVar3": "bit4",
                "in_r12": "bit5",
                "bVar4": "isZero"
            },
            "calling": [
                "__muldf3"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008894": {
            "entrypoint": "0x08008894",
            "current_name": "perform_arithmetic_operation_08008894",
            "code": "\nulonglong performArithmeticOperation_08008894(undefined4 input1,uint input2,uint input3,uint input4)\n\n{\n  uint tempVar1;\n  uint tempVar2;\n  uint tempVar3;\n  uint tempVar4;\n  uint tempVar5;\n  uint tempVar6;\n  uint tempVar7;\n  int tempVar8;\n  uint tempVar9;\n  uint tempVar10;\n  uint tempVar11;\n  uint tempVar12;\n  uint tempVar13;\n  uint tempVar14;\n  bool tempBool1;\n  bool tempBool2;\n  bool tempBool3;\n  undefined8 tempVar15;\n  \n  tempVar15 = CONCAT44(input2,input1);\n  tempVar14 = 0x7ff;\n  tempVar7 = input2 >> 0x14 & 0x7ff;\n  tempBool1 = tempVar7 == 0;\n  if (!tempBool1) {\n    tempVar10 = input4 >> 0x14 & 0x7ff;\n    tempBool1 = tempVar10 == 0;\n  }\n  if (!tempBool1) {\n    tempBool1 = tempVar7 == 0x7ff;\n  }\n  if (!tempBool1) {\n    tempBool1 = tempVar10 == 0x7ff;\n  }\n  if (tempBool1) {\n    tempVar15 = extracted_binary_function_08008a02();\n  }\n  tempVar9 = (uint)((ulonglong)tempVar15 >> 0x20);\n  tempVar12 = (uint)tempVar15;\n  tempVar8 = tempVar7 - tempVar10;\n  if ((input3 | input4 << 0xc) == 0) {\n    tempVar7 = (tempVar9 ^ input4) & 0x80000000 | tempVar9 & 0xfffff;\n    tempBool3 = SCARRY4(tempVar8,tempVar14 >> 1);\n    tempVar9 = tempVar8 + (tempVar14 >> 1);\n    tempBool1 = (int)tempVar9 < 0;\n    tempBool2 = tempVar9 == 0;\n    if (!tempBool2 && tempBool1 == tempBool3) {\n      tempBool3 = SBORROW4(tempVar14,tempVar9);\n      tempBool1 = (int)(tempVar14 - tempVar9) < 0;\n      tempBool2 = tempVar14 == tempVar9;\n    }\n    if (!tempBool2 && tempBool1 == tempBool3) {\n      tempVar7 = tempVar7 | tempVar9 * 0x100000;\n    }\n    if (!tempBool2 && tempBool1 == tempBool3) {\n      return CONCAT44(tempVar7,tempVar12);\n    }\n    tempVar7 = tempVar7 | 0x100000;\n    tempVar14 = 0;\n    tempBool2 = SBORROW4(tempVar9,1);\n    tempVar9 = tempVar9 - 1;\n    tempBool1 = tempVar9 == 0;\n    tempVar3 = tempVar9;\n  }\n  else {\n    tempVar3 = (input4 << 0xc) >> 4 | 0x10000000 | input3 >> 0x18;\n    tempVar14 = input3 << 8;\n    tempVar11 = (tempVar9 << 0xc) >> 4 | 0x10000000 | tempVar12 >> 0x18;\n    tempVar12 = tempVar12 * 0x100;\n    tempVar7 = (tempVar9 ^ input4) & 0x80000000;\n    tempBool1 = tempVar3 <= tempVar11;\n    if (tempVar11 == tempVar3) {\n      tempBool1 = tempVar14 <= tempVar12;\n    }\n    tempVar8 = tempVar8 + (uint)tempBool1;\n    tempVar9 = tempVar8 + 0x3fd;\n    if (tempBool1 == false) {\n      tempVar3 = tempVar3 >> 1;\n      tempVar14 = (uint)((input3 >> 0x18 & 1) != 0) << 0x1f | tempVar14 >> 1;\n    }\n    tempVar13 = tempVar12 - tempVar14;\n    tempVar11 = (tempVar11 - tempVar3) - (uint)(tempVar12 < tempVar14);\n    tempVar4 = tempVar3 >> 1;\n    tempVar1 = (uint)((tempVar3 & 1) != 0) << 0x1f | tempVar14 >> 1;\n    tempVar12 = 0x100000;\n    tempVar3 = 0x80000;\n    while( true ) {\n      tempBool1 = tempVar1 <= tempVar13;\n      if (tempVar4 < tempVar11 || tempVar11 - tempVar4 < (uint)tempBool1) {\n        tempVar13 = tempVar13 - tempVar1;\n        tempVar12 = tempVar12 | tempVar3;\n        tempVar11 = (tempVar11 - tempVar4) - (uint)!tempBool1;\n      }\n      tempVar5 = tempVar4 >> 1;\n      tempVar1 = (uint)((tempVar4 & 1) != 0) << 0x1f | tempVar1 >> 1;\n      tempBool2 = tempVar1 <= tempVar13;\n      tempBool1 = tempVar11 - tempVar5 < (uint)tempBool2;\n      tempVar14 = tempVar11;\n      if (tempVar5 < tempVar11 || tempBool1) {\n        tempVar13 = tempVar13 - tempVar1;\n        tempVar14 = (tempVar11 - tempVar5) - (uint)!tempBool2;\n      }\n      if (tempVar5 < tempVar11 || tempBool1) {\n        tempVar12 = tempVar12 | tempVar3 >> 1;\n      }\n      tempVar11 = tempVar4 >> 2;\n      tempVar2 = (uint)((tempVar5 & 1) != 0) << 0x1f | tempVar1 >> 1;\n      tempBool2 = tempVar2 <= tempVar13;\n      tempBool1 = tempVar14 - tempVar11 < (uint)tempBool2;\n      tempVar5 = tempVar14;\n      if (tempVar11 < tempVar14 || tempBool1) {\n        tempVar13 = tempVar13 - tempVar2;\n        tempVar5 = (tempVar14 - tempVar11) - (uint)!tempBool2;\n      }\n      if (tempVar11 < tempVar14 || tempBool1) {\n        tempVar12 = tempVar12 | tempVar3 >> 2;\n      }\n      tempVar6 = tempVar4 >> 3;\n      tempVar1 = (uint)((tempVar11 & 1) != 0) << 0x1f | tempVar2 >> 1;\n      tempBool2 = tempVar1 <= tempVar13;\n      tempBool1 = tempVar5 - tempVar6 < (uint)tempBool2;\n      tempVar11 = tempVar5;\n      if (tempVar6 < tempVar5 || tempBool1) {\n        tempVar13 = tempVar13 - tempVar1;\n        tempVar11 = (tempVar5 - tempVar6) - (uint)!tempBool2;\n      }\n      if (tempVar6 < tempVar5 || tempBool1) {\n        tempVar12 = tempVar12 | tempVar3 >> 3;\n      }\n      tempVar14 = tempVar11 | tempVar13;\n      if (tempVar14 == 0) break;\n      tempVar11 = tempVar11 << 4 | tempVar13 >> 0x1c;\n      tempVar13 = tempVar13 << 4;\n      tempVar4 = tempVar4 & 0xfffffff8 | tempVar1 >> 0x1d;\n      tempVar1 = (tempVar2 >> 1) << 3;\n      tempVar3 = tempVar3 >> 4;\n      if (tempVar3 == 0) {\n        tempVar6 = tempVar4;\n        if ((tempVar7 & 0x100000) != 0) goto LAB_080089b2;\n        tempVar7 = tempVar7 | tempVar12;\n        tempVar12 = 0;\n        tempVar3 = 0x80000000;\n      }\n    }\n    if ((tempVar7 & 0x100000) == 0) {\n      tempVar7 = tempVar7 | tempVar12;\n      tempVar12 = 0;\n    }\nLAB_080089b2:\n    tempBool3 = 0xfc < tempVar9;\n    tempBool2 = SBORROW4(tempVar9,0xfd);\n    tempVar4 = tempVar8 + 0x300;\n    tempBool1 = tempVar4 == 0;\n    tempVar3 = tempVar4;\n    if (tempBool3 && !tempBool1) {\n      tempBool3 = 0x6ff < tempVar4;\n      tempBool2 = SBORROW4(tempVar4,0x700);\n      tempVar3 = tempVar8 - 0x400;\n      tempBool1 = tempVar4 == 0x700;\n    }\n    if (!tempBool3 || tempBool1) {\n      tempBool1 = tempVar6 <= tempVar11;\n      if (tempVar11 == tempVar6) {\n        tempBool1 = tempVar1 <= tempVar13;\n      }\n      if (tempVar11 == tempVar6 && tempVar13 == tempVar1) {\n        tempBool1 = (tempVar12 & 1) != 0;\n      }\n      return CONCAT44(tempVar7 + tempVar9 * 0x100000 + (uint)CARRY4(tempVar12,(uint)tempBool1),tempVar12 + tempBool1);\n    }\n  }\n  if (!tempBool1 && (int)tempVar3 < 0 == tempBool2) {\n    return (ulonglong)(tempVar7 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  tempBool3 = SCARRY4(tempVar9,0x36);\n  tempBool1 = (int)(tempVar9 + 0x36) < 0;\n  tempBool2 = tempVar9 == 0xffffffca;\n  if (tempBool2 || tempBool1 != tempBool3) {\n    tempVar12 = 0;\n  }\n  if (tempBool2 || tempBool1 != tempBool3) {\n    tempVar7 = tempVar7 & 0x80000000;\n  }\n  if (tempBool2 || tempBool1 != tempBool3) {\n    return CONCAT44(tempVar7,tempVar12);\n  }\n  tempVar3 = -tempVar9;\n  tempVar11 = tempVar3 - 0x20;\n  if (0x1f < (int)tempVar3) {\n    tempVar3 = tempVar12 >> (tempVar11 & 0xff) | tempVar7 << (0x20 - tempVar11 & 0xff);\n    tempVar9 = (tempVar7 >> (tempVar11 & 0xff) & ~((tempVar7 & 0x80000000) >> (tempVar11 & 0xff))) -\n            ((int)tempVar3 >> 0x1f);\n    if ((tempVar14 | tempVar12 << (0x20 - tempVar11 & 0xff) | tempVar3 << 1) == 0) {\n      tempVar9 = tempVar9 & ~(tempVar3 >> 0x1f);\n    }\n    return CONCAT44(tempVar7,tempVar9) & 0x80000000ffffffff;\n  }\n  tempVar8 = tempVar3 - 0x14;\n  if (tempVar8 != 0 && tempVar8 < 0 == SCARRY4(tempVar11,0xc)) {\n    tempVar9 = 0xc - tempVar8;\n    tempVar3 = tempVar12 << (tempVar9 & 0xff);\n    tempVar12 = tempVar12 >> (0x20 - tempVar9 & 0xff) | tempVar7 << (tempVar9 & 0xff);\n    tempVar9 = tempVar12 + -((int)tempVar3 >> 0x1f);\n    if ((tempVar14 | tempVar3 << 1) == 0) {\n      tempVar9 = tempVar9 & ~(tempVar3 >> 0x1f);\n    }\n    return CONCAT44((tempVar7 & 0x80000000) + (uint)CARRY4(tempVar12,-((int)tempVar3 >> 0x1f)),tempVar9);\n  }\n  tempVar11 = tempVar12 << (tempVar9 + 0x20 & 0xff);\n  tempVar12 = tempVar12 >> (tempVar3 & 0xff) | tempVar7 << (tempVar9 + 0x20 & 0xff);\n  tempVar9 = tempVar12 + -((int)tempVar11 >> 0x1f);\n  if ((tempVar14 | tempVar11 << 1) == 0) {\n    tempVar9 = tempVar9 & ~(tempVar11 >> 0x1f);\n  }\n  return CONCAT44((tempVar7 & 0x80000000) +\n                  ((tempVar7 & 0x7fffffff) >> (tempVar3 & 0xff)) +\n                  (uint)CARRY4(tempVar12,-((int)tempVar11 >> 0x1f)),tempVar9);\n}\n\n",
            "renaming": {
                "FUN_08008894": "perform_arithmetic_operation_08008894",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "tempVar1",
                "uVar2": "tempVar2",
                "uVar3": "tempVar3",
                "uVar4": "tempVar4",
                "uVar5": "tempVar5",
                "uVar6": "tempVar6",
                "uVar7": "tempVar7",
                "iVar8": "tempVar8",
                "uVar9": "tempVar9",
                "unaff_r5": "tempVar10",
                "uVar10": "tempVar11",
                "uVar11": "tempVar12",
                "uVar12": "tempVar13",
                "uVar13": "tempVar14",
                "bVar14": "tempBool1",
                "bVar15": "tempBool2",
                "bVar16": "tempBool3",
                "uVar17": "tempVar15"
            },
            "calling": [
                "gc_execute_line",
                "__ieee754_atan2",
                "__ieee754_sqrt",
                "sqrt",
                "atan",
                "homing_cycle",
                "plan_buffer_line"
            ],
            "called": [
                "FUN_08008a02"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008a02": {
            "entrypoint": "0x08008a02",
            "current_name": "extracted_binary_function_08008a02",
            "code": "\nulonglong extractedBinaryFunction_08008a02(uint input1,uint input2,uint input3,uint input4)\n\n{\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  uint temp4;\n  uint temp5;\n  bool flag;\n  \n  temp3 = temp5 & input4 >> 0x14;\n  temp4 = input2;\n  if (temp2 != temp5 || temp3 != temp5) {\n    if (temp2 == temp5) {\n      if (((input1 | input2 << 0xc) == 0) && (input1 = input3, temp4 = input4, temp3 != temp5)\n         ) {\nLAB_08008874:\n        return (ulonglong)((input2 ^ input4) & 0x80000000 | 0x7ff00000) << 0x20;\n      }\n    }\n    else if (temp3 == temp5) {\n      input1 = input3;\n      temp4 = input4;\n      if ((input3 | input4 << 0xc) == 0) {\nLAB_08008838:\n        return (ulonglong)((input2 ^ input4) & 0x80000000) << 0x20;\n      }\n    }\n    else {\n      flag = (input1 | input2 << 1) == 0;\n      if (!flag) {\n        flag = (input3 | input4 << 1) == 0;\n      }\n      if (!flag) {\n        if (temp2 == 0) {\n          temp4 = input2 & 0x80000000;\n          do {\n            temp1 = input1 & 0x80000000;\n            input1 = input1 << 1;\n            input2 = input2 * 2 + (uint)(temp1 != 0);\n          } while ((input2 & 0x100000) == 0);\n          input2 = input2 | temp4;\n          if (temp3 != 0) {\n            return CONCAT44(input2,input1);\n          }\n        }\n        do {\n          temp4 = input3 & 0x80000000;\n          input3 = input3 << 1;\n          input4 = input4 * 2 + (uint)(temp4 != 0);\n        } while ((input4 & 0x100000) == 0);\n        return CONCAT44(input2,input1);\n      }\n      if ((input1 | input2 << 1) != 0) goto LAB_08008874;\n      if ((input3 | input4 << 1) != 0) goto LAB_08008838;\n    }\n  }\n  return CONCAT44(temp4,input1) | 0x7ff8000000000000;\n}\n\n",
            "renaming": {
                "FUN_08008a02": "extracted_binary_function_08008a02",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "temp1",
                "unaff_r4": "temp2",
                "uVar2": "temp3",
                "uVar3": "temp4",
                "in_r12": "temp5",
                "bVar4": "flag"
            },
            "calling": [
                "__divdf3"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008a64": {
            "entrypoint": "0x08008a64",
            "current_name": "check_equality_08008a64",
            "code": "\nuint check_equality_08008a64(uint first_value,uint second_value,uint third_value,uint fourth_value)\n\n{\n  uint result;\n  bool is_zero;\n  bool is_less_than;\n  \n  if (((int)(second_value << 1) >> 0x15 == -1 || (int)(fourth_value << 1) >> 0x15 == -1) &&\n     ((((int)(second_value << 1) >> 0x15 == -1 && ((first_value | second_value << 0xc) != 0)) ||\n      (((int)(fourth_value << 1) >> 0x15 == -1 && ((third_value | fourth_value << 0xc) != 0)))))) {\n    return 0xffffffff;\n  }\n  is_zero = (first_value | second_value << 1) == 0;\n  if (is_zero) {\n    is_zero = (third_value | fourth_value << 1) == 0;\n  }\n  if (!is_zero) {\n    is_zero = second_value == fourth_value;\n  }\n  if (is_zero) {\n    is_zero = first_value == third_value;\n  }\n  if (!is_zero) {\n    result = second_value ^ fourth_value;\n    is_zero = result == 0;\n    if (-1 < (int)result) {\n      is_zero = second_value == fourth_value;\n    }\n    is_less_than = -1 < (int)result && fourth_value <= second_value;\n    if (is_zero) {\n      is_less_than = third_value <= first_value;\n    }\n    fourth_value = (int)fourth_value >> 0x1f;\n    if (!is_less_than) {\n      fourth_value = ~fourth_value;\n    }\n    return fourth_value | 1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08008a64": "check_equality_08008a64",
                "param_1": "first_value",
                "param_2": "second_value",
                "param_3": "third_value",
                "param_4": "fourth_value",
                "uVar1": "result",
                "bVar2": "is_zero",
                "bVar3": "is_less_than"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008a6c": {
            "entrypoint": "0x08008a6c",
            "current_name": "check_data_equality_08008a6c",
            "code": "\nuint check_data_equality_08008a6c(uint data1,uint data2,uint data3,uint data4)\n\n{\n  uint result;\n  bool isDataEqual;\n  bool isDataOrderValid;\n  \n  if (((int)(data2 << 1) >> 0x15 == -1 || (int)(data4 << 1) >> 0x15 == -1) &&\n     ((((int)(data2 << 1) >> 0x15 == -1 && ((data1 | data2 << 0xc) != 0)) ||\n      (((int)(data4 << 1) >> 0x15 == -1 && ((data3 | data4 << 0xc) != 0)))))) {\n    return 1;\n  }\n  isDataEqual = (data1 | data2 << 1) == 0;\n  if (isDataEqual) {\n    isDataEqual = (data3 | data4 << 1) == 0;\n  }\n  if (!isDataEqual) {\n    isDataEqual = data2 == data4;\n  }\n  if (isDataEqual) {\n    isDataEqual = data1 == data3;\n  }\n  if (!isDataEqual) {\n    result = data2 ^ data4;\n    isDataEqual = result == 0;\n    if (-1 < (int)result) {\n      isDataEqual = data2 == data4;\n    }\n    isDataOrderValid = -1 < (int)result && data4 <= data2;\n    if (isDataEqual) {\n      isDataOrderValid = data3 <= data1;\n    }\n    data4 = (int)data4 >> 0x1f;\n    if (!isDataOrderValid) {\n      data4 = ~data4;\n    }\n    return data4 | 1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08008a6c": "check_data_equality_08008a6c",
                "param_1": "data1",
                "param_2": "data2",
                "param_3": "data3",
                "param_4": "data4",
                "uVar1": "result",
                "bVar2": "isDataEqual",
                "bVar3": "isDataOrderValid"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008a74": {
            "entrypoint": "0x08008a74",
            "current_name": "check_conditions_08008a74",
            "code": "\nuint check_conditions_08008a74(uint var1,uint var2,uint var3,uint var4)\n\n{\n  uint result;\n  bool isZero;\n  bool isNegative;\n  \n  if (((int)(var2 << 1) >> 0x15 == -1 || (int)(var4 << 1) >> 0x15 == -1) &&\n     ((((int)(var2 << 1) >> 0x15 == -1 && ((var1 | var2 << 0xc) != 0)) ||\n      (((int)(var4 << 1) >> 0x15 == -1 && ((var3 | var4 << 0xc) != 0)))))) {\n    return 1;\n  }\n  isZero = (var1 | var2 << 1) == 0;\n  if (isZero) {\n    isZero = (var3 | var4 << 1) == 0;\n  }\n  if (!isZero) {\n    isZero = var2 == var4;\n  }\n  if (isZero) {\n    isZero = var1 == var3;\n  }\n  if (!isZero) {\n    result = var2 ^ var4;\n    isZero = result == 0;\n    if (-1 < (int)result) {\n      isZero = var2 == var4;\n    }\n    isNegative = -1 < (int)result && var4 <= var2;\n    if (isZero) {\n      isNegative = var3 <= var1;\n    }\n    var4 = (int)var4 >> 0x1f;\n    if (!isNegative) {\n      var4 = ~var4;\n    }\n    return var4 | 1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08008a74": "check_conditions_08008a74",
                "param_1": "var1",
                "param_2": "var2",
                "param_3": "var3",
                "param_4": "var4",
                "uVar1": "result",
                "bVar2": "isZero",
                "bVar3": "isNegative"
            },
            "calling": [
                "__aeabi_cdcmpeq"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008af0": {
            "entrypoint": "0x08008af0",
            "current_name": "compare_floats_08008af0",
            "code": "\nvoid compareFloats_08008af0(undefined4 result,undefined4 status,undefined4 value1,undefined4 value2)\n\n{\n  __aeabi_cdcmpeq(value1,value2,result,status);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008af0": "compare_floats_08008af0",
                "param_1": "result",
                "param_2": "status",
                "param_3": "value1",
                "param_4": "value2"
            },
            "calling": [
                "__aeabi_dcmpge",
                "__aeabi_dcmpgt"
            ],
            "called": [
                "__aeabi_cdcmpeq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008b00": {
            "entrypoint": "0x08008b00",
            "current_name": "float_to_int_08008b00",
            "code": "\nundefined4 float_to_int_08008b00(undefined4 input_float)\n\n{\n  __nedf2();\n  return input_float;\n}\n\n",
            "renaming": {
                "FUN_08008b00": "float_to_int_08008b00",
                "param_1": "input_float"
            },
            "calling": [
                "__aeabi_dcmplt",
                "__aeabi_dcmpeq",
                "__aeabi_dcmple",
                "__aeabi_cdrcmple"
            ],
            "called": [
                "__nedf2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008b10": {
            "entrypoint": "0x08008b10",
            "current_name": "is_not_zero_value_08008b10",
            "code": "\nbool isNotZeroValue_08008b10(void)\n\n{\n  char inputChar;\n  \n  __aeabi_cdcmpeq();\n  return inputChar != '\\0';\n}\n\n",
            "renaming": {
                "FUN_08008b10": "is_not_zero_value_08008b10",
                "in_ZR": "inputChar"
            },
            "calling": [
                "__ieee754_rem_pio2",
                "__kernel_rem_pio2"
            ],
            "called": [
                "__aeabi_cdcmpeq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008b24": {
            "entrypoint": "0x08008b24",
            "current_name": "is_character_null_08008b24",
            "code": "\nbool is_character_null_08008b24(void)\n\n{\n  char input_char;\n  \n  __aeabi_cdcmpeq();\n  return input_char == '\\0';\n}\n\n",
            "renaming": {
                "FUN_08008b24": "is_character_null_08008b24",
                "in_CY": "input_char"
            },
            "calling": [
                "sqrt",
                "__ieee754_hypot",
                "plan_buffer_line"
            ],
            "called": [
                "__aeabi_cdcmpeq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008b38": {
            "entrypoint": "0x08008b38",
            "current_name": "check_equal_condition_08008b38",
            "code": "\nbool check_equal_condition_08008b38(void)\n\n{\n  undefined is_zero_result;\n  undefined is_carry_set;\n  \n  __aeabi_cdcmpeq();\n  return !(bool)is_carry_set || (bool)is_zero_result;\n}\n\n",
            "renaming": {
                "FUN_08008b38": "check_equal_condition_08008b38",
                "in_ZR": "is_zero_result",
                "in_CY": "is_carry_set"
            },
            "calling": [],
            "called": [
                "__aeabi_cdcmpeq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008b4c": {
            "entrypoint": "0x08008b4c",
            "current_name": "check_carry_and_zero_08008b4c",
            "code": "\nbool check_carry_and_zero_08008b4c(void)\n\n{\n  undefined carry_flag;\n  undefined zero_flag;\n  \n  __aeabi_cdrcmple();\n  return !(bool)zero_flag || (bool)carry_flag;\n}\n\n",
            "renaming": {
                "FUN_08008b4c": "check_carry_and_zero_08008b4c",
                "in_ZR": "carry_flag",
                "in_CY": "zero_flag"
            },
            "calling": [
                "__kernel_rem_pio2"
            ],
            "called": [
                "__aeabi_cdrcmple"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008b60": {
            "entrypoint": "0x08008b60",
            "current_name": "is_zero_character_08008b60",
            "code": "\nbool is_zero_character_08008b60(void)\n\n{\n  char input_character;\n  \n  __aeabi_cdrcmple();\n  return input_character == '\\0';\n}\n\n",
            "renaming": {
                "FUN_08008b60": "is_zero_character_08008b60",
                "in_CY": "input_character"
            },
            "calling": [
                "ceil",
                "atan",
                "plan_buffer_line",
                "floor"
            ],
            "called": [
                "__aeabi_cdrcmple"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008b74": {
            "entrypoint": "0x08008b74",
            "current_name": "check_params_08008b74",
            "code": "\nundefined4 check_params_08008b74(uint input_1,int input_2,uint input_3,int input_4)\n\n{\n  if ((((input_2 << 1) >> 0x15 != -1) || ((input_1 | input_2 << 0xc) == 0)) &&\n     (((input_4 << 1) >> 0x15 != -1 || ((input_3 | input_4 << 0xc) == 0)))) {\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08008b74": "check_params_08008b74",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4"
            },
            "calling": [
                "sqrt"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008ba0": {
            "entrypoint": "0x08008ba0",
            "current_name": "apply_transformation_08008ba0",
            "code": "\nuint applyTransformation_08008ba0(uint input_value,uint updated_modifier)\n\n{\n  uint result;\n  int multiplied_value;\n  uint difference;\n  \n  multiplied_value = updated_modifier * 2 + 0x200000;\n  if (updated_modifier * 2 < 0xffe00000) {\n    if (-1 < multiplied_value) {\n      return 0;\n    }\n    result = multiplied_value >> 0x15;\n    difference = -result - 0x3e1;\n    if (result < 0xfffffc20 && difference != 0) {\n      result = (updated_modifier << 0xb | 0x80000000 | input_value >> 0x15) >> (difference & 0xff);\n      if ((updated_modifier & 0x80000000) != 0) {\n        result = -result;\n      }\n      return result;\n    }\n  }\n  else if ((input_value | updated_modifier << 0xc) != 0) {\n    return 0;\n  }\n  updated_modifier = updated_modifier & 0x80000000;\n  if (updated_modifier == 0) {\n    updated_modifier = 0x7fffffff;\n  }\n  return updated_modifier;\n}\n\n",
            "renaming": {
                "FUN_08008ba0": "apply_transformation_08008ba0",
                "param_1": "input_value",
                "param_2": "updated_modifier",
                "uVar1": "result",
                "iVar2": "multiplied_value",
                "uVar3": "difference"
            },
            "calling": [
                "gc_execute_line",
                "__ieee754_rem_pio2",
                "calculate_trapezoid_for_block",
                "lround",
                "__kernel_rem_pio2",
                "__kernel_sin",
                "__kernel_cos",
                "plan_buffer_line"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008bf0": {
            "entrypoint": "0x08008bf0",
            "current_name": "check_and_shift_08008bf0",
            "code": "\nuint check_and_shift_08008bf0(uint input_1,uint input_2)\n\n{\n  int temp_var;\n  uint shift_amount;\n  \n  if ((input_2 & 0x80000000) != 0) {\n    return 0;\n  }\n  temp_var = input_2 * 2 + 0x200000;\n  if (input_2 * 2 < 0xffe00000) {\n    if (-1 < temp_var) {\n      return 0;\n    }\n    shift_amount = -(temp_var >> 0x15) - 0x3e1;\n    if (-1 < (int)shift_amount) {\n      return (input_2 << 0xb | 0x80000000 | input_1 >> 0x15) >> (shift_amount & 0xff);\n    }\n  }\n  else if ((input_1 | input_2 << 0xc) != 0) {\n    return 0;\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_08008bf0": "check_and_shift_08008bf0",
                "param_1": "input_1",
                "param_2": "input_2",
                "iVar1": "temp_var",
                "uVar2": "shift_amount"
            },
            "calling": [
                "gc_execute_line",
                "protocol_execute_line",
                "calculate_trapezoid_for_block",
                "mc_dwell",
                "mc_arc",
                "homing_cycle",
                "settings_store_global_setting",
                "plan_buffer_line"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008c30": {
            "entrypoint": "0x08008c30",
            "current_name": "convert_to_float_08008c30",
            "code": "\nuint convertToFloat_08008c30(uint inputInteger,uint flags)\n\n{\n  uint convertedFloat;\n  uint flagsTimesTwo;\n  uint convertedFloatPlusConstant;\n  uint constantValue;\n  bool isZero;\n  bool isLessThan;\n  \n  flagsTimesTwo = flags * 2;\n  isLessThan = flagsTimesTwo < 0x70000000;\n  convertedFloatPlusConstant = flagsTimesTwo + 0x90000000;\n  convertedFloat = convertedFloatPlusConstant;\n  if (!isLessThan) {\n    constantValue = flagsTimesTwo + 0x8fe00000;\n    convertedFloat = constantValue;\n  }\n  isZero = convertedFloat == 0;\n  if (!isLessThan && convertedFloatPlusConstant >= 0x200000) {\n    isZero = constantValue == 0x1fc00000;\n  }\n  if (((isLessThan || convertedFloatPlusConstant < 0x200000) || 0x1fc00000 < constantValue) || isZero) {\n    if ((flags & 0x40000000) != 0) {\n      if (((int)flagsTimesTwo >> 0x15 == -1) && ((inputInteger | flags << 0xc) != 0)) {\n        return 0x7fc00000;\n      }\n      return flags & 0x80000000 | 0x7f800000;\n    }\n    if ((int)(flagsTimesTwo + 0x92e00000) < 0 != SCARRY4(convertedFloatPlusConstant,0x2e00000)) {\n      return flags & 0x80000000;\n    }\n    flagsTimesTwo = 0x18 - (flagsTimesTwo + 0x92e00000 >> 0x15);\n    convertedFloat = inputInteger >> (flagsTimesTwo & 0xff);\n    if (inputInteger << (0x20 - flagsTimesTwo & 0xff) != 0) {\n      convertedFloat = convertedFloat | 1;\n    }\n    convertedFloatPlusConstant = flags & 0x1fffff | 0x100000;\n    inputInteger = convertedFloat | convertedFloatPlusConstant << (0x20 - flagsTimesTwo & 0xff);\n    convertedFloatPlusConstant = (convertedFloatPlusConstant >> (flagsTimesTwo & 0xff)) << 1;\n  }\n  convertedFloat = (flags & 0x80000000 | inputInteger >> 0x1d) + convertedFloatPlusConstant * 4 + (uint)(0x7fffffff < inputInteger * 8);\n  if (inputInteger * 8 == 0x80000000) {\n    convertedFloat = convertedFloat & 0xfffffffe;\n  }\n  return convertedFloat;\n}\n\n",
            "renaming": {
                "FUN_08008c30": "convert_to_float_08008c30",
                "param_1": "inputInteger",
                "param_2": "flags",
                "uVar1": "convertedFloat",
                "uVar2": "flagsTimesTwo",
                "uVar3": "convertedFloatPlusConstant",
                "in_r12": "constantValue",
                "bVar4": "isZero",
                "bVar5": "isLessThan"
            },
            "calling": [
                "gc_execute_line",
                "to_millimeters",
                "read_float",
                "mc_arc",
                "report_realtime_status",
                "homing_cycle",
                "report_gcode_modes",
                "max_allowable_speed",
                "plan_buffer_line",
                "report_gcode_parameters"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008cd0": {
            "entrypoint": "0x08008cd0",
            "current_name": "convert_to_positive_float_08008cd0",
            "code": "\nvoid convertToPositiveFloat_08008cd0(uint input)\n\n{\n  __addsf3(input ^ 0x80000000);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008cd0": "convert_to_positive_float_08008cd0",
                "param_1": "input"
            },
            "calling": [],
            "called": [
                "__addsf3"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008cd8": {
            "entrypoint": "0x08008cd8",
            "current_name": "reverse_bits_08008cd8",
            "code": "\nuint reverseBits_08008cd8(uint input,uint mask,undefined4 param_3,uint param_4)\n\n{\n  int shiftedInput;\n  int shiftedMask;\n  uint result;\n  uint tempResult;\n  uint shiftedInputTransformed;\n  uint shiftAmount;\n  uint difference;\n  bool isNegative;\n  \n  result = mask ^ 0x80000000;\n  shiftedInputTransformed = input << 1;\n  isNegative = shiftedInputTransformed == 0;\n  if (!isNegative) {\n    param_4 = mask << 1;\n    isNegative = param_4 == 0;\n  }\n  if (!isNegative) {\n    isNegative = shiftedInputTransformed == param_4;\n  }\n  shiftedInput = (int)shiftedInputTransformed >> 0x18;\n  if (!isNegative) {\n    isNegative = shiftedInput == -1;\n  }\n  if (!isNegative) {\n    isNegative = (int)param_4 >> 0x18 == -1;\n  }\n  if (isNegative) {\n    shiftedMask = (int)(mask << 1) >> 0x18;\n    if (shiftedInput == -1 || shiftedMask == -1) {\n      shiftedInputTransformed = result;\n      if (shiftedInput == -1) {\n        shiftedInputTransformed = input;\n      }\n      if (shiftedInput != -1 || shiftedMask != -1) {\n        result = shiftedInputTransformed;\n      }\n      isNegative = (shiftedInputTransformed & 0x7fffff) == 0;\n      if (isNegative) {\n        isNegative = (result & 0x7fffff) == 0;\n      }\n      if (isNegative) {\n        isNegative = shiftedInputTransformed == result;\n      }\n      if (!isNegative) {\n        shiftedInputTransformed = shiftedInputTransformed | 0x400000;\n      }\n      return shiftedInputTransformed;\n    }\n    if (((input ^ result) & 0x7fffffff) != 0) {\n      if (shiftedInputTransformed == 0) {\n        input = result;\n      }\n      return input;\n    }\n    if (input != result) {\n      return 0;\n    }\n    if ((shiftedInputTransformed & 0xff000000) == 0) {\n      result = input << 1;\n      if ((input & 0x80000000) != 0) {\n        result = result | 0x80000000;\n      }\n      return result;\n    }\n    if (shiftedInputTransformed < 0xfe000000) {\n      return input + 0x800000;\n    }\n    input = input & 0x80000000;\nLAB_08008e12:\n    return input | 0x7f800000;\n  }\n  shiftedInputTransformed = shiftedInputTransformed >> 0x18;\n  param_4 = param_4 >> 0x18;\n  difference = param_4 - shiftedInputTransformed;\n  isNegative = difference != 0;\n  shiftAmount = shiftedInputTransformed;\n  if (isNegative && shiftedInputTransformed <= param_4) {\n    shiftAmount = shiftedInputTransformed + difference;\n  }\n  if (isNegative && shiftedInputTransformed <= param_4) {\n    result = result ^ input;\n  }\n  if (isNegative && shiftedInputTransformed <= param_4) {\n    input = input ^ result;\n  }\n  if (isNegative && shiftedInputTransformed <= param_4) {\n    result = result ^ input;\n  }\n  if (param_4 < shiftedInputTransformed) {\n    difference = -difference;\n  }\n  if (0x19 < difference) {\n    return input;\n  }\n  shiftedInputTransformed = input & 0xffffff | 0x800000;\n  if ((input & 0x80000000) != 0) {\n    shiftedInputTransformed = -shiftedInputTransformed;\n  }\n  tempResult = result & 0xffffff | 0x800000;\n  if ((result & 0x80000000) != 0) {\n    tempResult = -tempResult;\n  }\n  if (shiftAmount == difference) {\n    tempResult = tempResult ^ 0x800000;\n    if (shiftAmount == 0) {\n      shiftedInputTransformed = shiftedInputTransformed ^ 0x800000;\n      shiftAmount = 1;\n    }\n    else {\n      difference = difference - 1;\n    }\n  }\n  shiftedInputTransformed = shiftedInputTransformed + ((int)tempResult >> (difference & 0xff));\n  tempResult = tempResult << (0x20 - difference & 0xff);\n  input = shiftedInputTransformed & 0x80000000;\n  if ((int)shiftedInputTransformed < 0) {\n    isNegative = tempResult != 0;\n    tempResult = -tempResult;\n    shiftedInputTransformed = -shiftedInputTransformed - (uint)isNegative;\n  }\n  if (shiftedInputTransformed < 0x800000) {\n    result = tempResult & 0x80000000;\n    tempResult = tempResult << 1;\n    shiftedInputTransformed = shiftedInputTransformed * 2 + (uint)(result != 0);\n    result = shiftAmount - 2;\n    if (shiftAmount - 1 == 0 || shiftedInputTransformed < 0x800000) {\n      difference = LZCOUNT(shiftedInputTransformed) - 8;\n      shiftedInputTransformed = shiftedInputTransformed << (difference & 0xff);\n      if ((int)result < (int)difference) {\n        shiftedInputTransformed = shiftedInputTransformed >> (-(result - difference) & 0xff);\n      }\n      else {\n        shiftedInputTransformed = shiftedInputTransformed + (result - difference) * 0x800000;\n      }\n      return shiftedInputTransformed | input;\n    }\n  }\n  else {\n    result = shiftAmount - 1;\n    if (0xffffff < shiftedInputTransformed) {\n      result = shiftedInputTransformed & 1;\n      shiftedInputTransformed = shiftedInputTransformed >> 1;\n      tempResult = (uint)(result != 0) << 0x1f | tempResult >> 1;\n      result = shiftAmount;\n      if (0xfd < shiftAmount) goto LAB_08008e12;\n    }\n  }\n  shiftedInputTransformed = shiftedInputTransformed + result * 0x800000 + (uint)(0x7fffffff < tempResult);\n  if (tempResult == 0x80000000) {\n    shiftedInputTransformed = shiftedInputTransformed & 0xfffffffe;\n  }\n  return shiftedInputTransformed | input;\n}\n\n",
            "renaming": {
                "FUN_08008cd8": "reverse_bits_08008cd8",
                "param_1": "input",
                "param_2": "mask",
                "iVar1": "shiftedInput",
                "iVar2": "shiftedMask",
                "uVar3": "result",
                "uVar4": "tempResult",
                "uVar5": "shiftedInputTransformed",
                "uVar6": "shiftAmount",
                "uVar7": "difference",
                "bVar8": "isNegative"
            },
            "calling": [
                "gc_execute_line",
                "intersection_distance",
                "mc_dwell",
                "mc_arc",
                "report_realtime_status",
                "estimate_acceleration_distance",
                "max_allowable_speed",
                "plan_buffer_line"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008cdc": {
            "entrypoint": "0x08008cdc",
            "current_name": "calculate_float_precision_08008cdc",
            "code": "\nuint calculateFloatPrecision_08008cdc(uint inputFloat1,uint inputFloat2,undefined4 unusedParameter,uint inputPrecision)\n\n{\n  int shiftedFloat1;\n  int shiftedFloat2;\n  uint signedFloat1;\n  uint signedFloat2;\n  uint iterationCount;\n  uint precisionDifference;\n  bool isEqualPrecision;\n  \n  signedFloat2 = inputFloat1 << 1;\n  isEqualPrecision = signedFloat2 == 0;\n  if (!isEqualPrecision) {\n    inputPrecision = inputFloat2 << 1;\n    isEqualPrecision = inputPrecision == 0;\n  }\n  if (!isEqualPrecision) {\n    isEqualPrecision = signedFloat2 == inputPrecision;\n  }\n  shiftedFloat1 = (int)signedFloat2 >> 0x18;\n  if (!isEqualPrecision) {\n    isEqualPrecision = shiftedFloat1 == -1;\n  }\n  if (!isEqualPrecision) {\n    isEqualPrecision = (int)inputPrecision >> 0x18 == -1;\n  }\n  if (isEqualPrecision) {\n    shiftedFloat2 = (int)(inputFloat2 << 1) >> 0x18;\n    if (shiftedFloat1 == -1 || shiftedFloat2 == -1) {\n      signedFloat2 = inputFloat2;\n      if (shiftedFloat1 == -1) {\n        signedFloat2 = inputFloat1;\n      }\n      if (shiftedFloat1 != -1 || shiftedFloat2 != -1) {\n        inputFloat2 = signedFloat2;\n      }\n      isEqualPrecision = (signedFloat2 & 0x7fffff) == 0;\n      if (isEqualPrecision) {\n        isEqualPrecision = (inputFloat2 & 0x7fffff) == 0;\n      }\n      if (isEqualPrecision) {\n        isEqualPrecision = signedFloat2 == inputFloat2;\n      }\n      if (!isEqualPrecision) {\n        signedFloat2 = signedFloat2 | 0x400000;\n      }\n      return signedFloat2;\n    }\n    if (((inputFloat1 ^ inputFloat2) & 0x7fffffff) != 0) {\n      if (signedFloat2 == 0) {\n        inputFloat1 = inputFloat2;\n      }\n      return inputFloat1;\n    }\n    if (inputFloat1 != inputFloat2) {\n      return 0;\n    }\n    if ((signedFloat2 & 0xff000000) == 0) {\n      signedFloat2 = inputFloat1 << 1;\n      if ((inputFloat1 & 0x80000000) != 0) {\n        signedFloat2 = signedFloat2 | 0x80000000;\n      }\n      return signedFloat2;\n    }\n    if (signedFloat2 < 0xfe000000) {\n      return inputFloat1 + 0x800000;\n    }\n    inputFloat1 = inputFloat1 & 0x80000000;\nLAB_08008e12:\n    return inputFloat1 | 0x7f800000;\n  }\n  signedFloat2 = signedFloat2 >> 0x18;\n  inputPrecision = inputPrecision >> 0x18;\n  precisionDifference = inputPrecision - signedFloat2;\n  isEqualPrecision = precisionDifference != 0;\n  iterationCount = signedFloat2;\n  if (isEqualPrecision && signedFloat2 <= inputPrecision) {\n    iterationCount = signedFloat2 + precisionDifference;\n  }\n  if (isEqualPrecision && signedFloat2 <= inputPrecision) {\n    inputFloat2 = inputFloat2 ^ inputFloat1;\n  }\n  if (isEqualPrecision && signedFloat2 <= inputPrecision) {\n    inputFloat1 = inputFloat1 ^ inputFloat2;\n  }\n  if (isEqualPrecision && signedFloat2 <= inputPrecision) {\n    inputFloat2 = inputFloat2 ^ inputFloat1;\n  }\n  if (inputPrecision < signedFloat2) {\n    precisionDifference = -precisionDifference;\n  }\n  if (0x19 < precisionDifference) {\n    return inputFloat1;\n  }\n  signedFloat2 = inputFloat1 & 0xffffff | 0x800000;\n  if ((inputFloat1 & 0x80000000) != 0) {\n    signedFloat2 = -signedFloat2;\n  }\n  signedFloat1 = inputFloat2 & 0xffffff | 0x800000;\n  if ((inputFloat2 & 0x80000000) != 0) {\n    signedFloat1 = -signedFloat1;\n  }\n  if (iterationCount == precisionDifference) {\n    signedFloat1 = signedFloat1 ^ 0x800000;\n    if (iterationCount == 0) {\n      signedFloat2 = signedFloat2 ^ 0x800000;\n      iterationCount = 1;\n    }\n    else {\n      precisionDifference = precisionDifference - 1;\n    }\n  }\n  signedFloat2 = signedFloat2 + ((int)signedFloat1 >> (precisionDifference & 0xff));\n  signedFloat1 = signedFloat1 << (0x20 - precisionDifference & 0xff);\n  inputFloat1 = signedFloat2 & 0x80000000;\n  if ((int)signedFloat2 < 0) {\n    isEqualPrecision = signedFloat1 != 0;\n    signedFloat1 = -signedFloat1;\n    signedFloat2 = -signedFloat2 - (uint)isEqualPrecision;\n  }\n  if (signedFloat2 < 0x800000) {\n    precisionDifference = signedFloat1 & 0x80000000;\n    signedFloat1 = signedFloat1 << 1;\n    signedFloat2 = signedFloat2 * 2 + (uint)(precisionDifference != 0);\n    precisionDifference = iterationCount - 2;\n    if (iterationCount - 1 == 0 || signedFloat2 < 0x800000) {\n      iterationCount = LZCOUNT(signedFloat2) - 8;\n      signedFloat2 = signedFloat2 << (iterationCount & 0xff);\n      if ((int)precisionDifference < (int)iterationCount) {\n        signedFloat2 = signedFloat2 >> (-(precisionDifference - iterationCount) & 0xff);\n      }\n      else {\n        signedFloat2 = signedFloat2 + (precisionDifference - iterationCount) * 0x800000;\n      }\n      return signedFloat2 | inputFloat1;\n    }\n  }\n  else {\n    precisionDifference = iterationCount - 1;\n    if (0xffffff < signedFloat2) {\n      precisionDifference = signedFloat2 & 1;\n      signedFloat2 = signedFloat2 >> 1;\n      signedFloat1 = (uint)(precisionDifference != 0) << 0x1f | signedFloat1 >> 1;\n      precisionDifference = iterationCount;\n      if (0xfd < iterationCount) goto LAB_08008e12;\n    }\n  }\n  signedFloat2 = signedFloat2 + precisionDifference * 0x800000 + (uint)(0x7fffffff < signedFloat1);\n  if (signedFloat1 == 0x80000000) {\n    signedFloat2 = signedFloat2 & 0xfffffffe;\n  }\n  return signedFloat2 | inputFloat1;\n}\n\n",
            "renaming": {
                "FUN_08008cdc": "calculate_float_precision_08008cdc",
                "param_1": "inputFloat1",
                "param_2": "inputFloat2",
                "param_3": "unusedParameter",
                "param_4": "inputPrecision",
                "iVar1": "shiftedFloat1",
                "iVar2": "shiftedFloat2",
                "uVar3": "signedFloat1",
                "uVar4": "signedFloat2",
                "uVar5": "iterationCount",
                "uVar6": "precisionDifference",
                "bVar7": "isEqualPrecision"
            },
            "calling": [
                "gc_execute_line",
                "printFloat",
                "intersection_distance",
                "mc_arc",
                "__aeabi_frsub",
                "report_realtime_status",
                "estimate_acceleration_distance",
                "max_allowable_speed",
                "plan_buffer_line"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008e3c": {
            "entrypoint": "0x08008e3c",
            "current_name": "calculate_bitwise_expression_08008e3c",
            "code": "\nuint calculateBitwiseExpression_08008e3c(uint inputValue)\n\n{\n  uint leadingZeros;\n  uint shiftAmount;\n  int constantOffset;\n  uint tempVar;\n  \n  if (inputValue == 0) {\n    return 0;\n  }\n  leadingZeros = LZCOUNT(inputValue);\n  shiftAmount = leadingZeros - 8;\n  constantOffset = shiftAmount * -0x800000 + 0x4a800000;\n  if (7 < leadingZeros) {\n    tempVar = 0 << (shiftAmount & 0xff);\n    leadingZeros = constantOffset + (inputValue << (shiftAmount & 0xff)) +\n            (0U >> (0x20 - shiftAmount & 0xff)) + (uint)(0x7fffffff < tempVar);\n    if (tempVar == 0x80000000) {\n      leadingZeros = leadingZeros & 0xfffffffe;\n    }\n    return leadingZeros;\n  }\n  shiftAmount = inputValue << leadingZeros + 0x18;\n  leadingZeros = constantOffset + ((inputValue >> (0x20 - (leadingZeros + 0x18) & 0xff)) - ((int)shiftAmount >> 0x1f));\n  if ((shiftAmount & 0x7fffffff) == 0) {\n    leadingZeros = leadingZeros & ~(shiftAmount >> 0x1f);\n  }\n  return leadingZeros;\n}\n\n",
            "renaming": {
                "FUN_08008e3c": "calculate_bitwise_expression_08008e3c",
                "param_1": "inputValue",
                "uVar1": "leadingZeros",
                "uVar2": "shiftAmount",
                "iVar3": "constantOffset",
                "uVar4": "tempVar"
            },
            "calling": [
                "calculate_trapezoid_for_block",
                "read_float"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008e44": {
            "entrypoint": "0x08008e44",
            "current_name": "decode_number_08008e44",
            "code": "\nuint decode_number_08008e44(uint number)\n\n{\n  uint leading_zeros;\n  uint shift_amount;\n  uint sign_bit;\n  int result;\n  \n  sign_bit = number & 0x80000000;\n  if ((int)sign_bit < 0) {\n    number = -number;\n  }\n  if (number == 0) {\n    return 0;\n  }\n  leading_zeros = count_leading_zeros(number);\n  shift_amount = leading_zeros - 8;\n  result = ((sign_bit | 0x4b000000) - 0x800000) + shift_amount * -0x800000;\n  if (7 < leading_zeros) {\n    leading_zeros = 0 << (shift_amount & 0xff);\n    sign_bit = result + (number << (shift_amount & 0xff)) +\n            (0U >> (0x20 - shift_amount & 0xff)) + (uint)(0x7fffffff < leading_zeros);\n    if (leading_zeros == 0x80000000) {\n      sign_bit = sign_bit & 0xfffffffe;\n    }\n    return sign_bit;\n  }\n  shift_amount = number << leading_zeros + 0x18;\n  sign_bit = result + ((number >> (0x20 - (leading_zeros + 0x18) & 0xff)) - ((int)shift_amount >> 0x1f));\n  if ((shift_amount & 0x7fffffff) == 0) {\n    sign_bit = sign_bit & ~(shift_amount >> 0x1f);\n  }\n  return sign_bit;\n}\n\n",
            "renaming": {
                "FUN_08008e44": "decode_number_08008e44",
                "param_1": "number",
                "uVar1": "leading_zeros",
                "uVar2": "shift_amount",
                "uVar3": "sign_bit",
                "iVar4": "result",
                "LZCOUNT": "count_leading_zeros"
            },
            "calling": [
                "gc_set_current_position",
                "mc_go_home",
                "calculate_trapezoid_for_block",
                "mc_dwell",
                "mc_arc",
                "report_realtime_status",
                "plan_cycle_reinitialize",
                "plan_buffer_line"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008e60": {
            "entrypoint": "0x08008e60",
            "current_name": "calculate_new_value_08008e60",
            "code": "\nuint calculate_new_value_08008e60(uint input_value_1,uint input_value_2)\n\n{\n  uint temp_value_1;\n  uint temp_value_2;\n  uint bit_count;\n  uint shift_amount;\n  int constant_value;\n  \n  if ((input_value_1 | input_value_2) == 0) {\n    return input_value_1;\n  }\n  temp_value_1 = input_value_1;\n  temp_value_2 = input_value_2;\n  if (input_value_2 == 0) {\n    temp_value_1 = 0;\n    temp_value_2 = input_value_1;\n  }\n  constant_value = 0x5b000000;\n  if (input_value_2 == 0) {\n    constant_value = 0x4b000000;\n  }\n  bit_count = leading_zeros_count(temp_value_2);\n  shift_amount = bit_count - 8;\n  constant_value = constant_value + -0x800000 + shift_amount * -0x800000;\n  if (bit_count < 8) {\n    shift_amount = temp_value_2 << bit_count + 0x18;\n    temp_value_2 = constant_value + ((temp_value_2 >> (0x20 - (bit_count + 0x18) & 0xff)) - ((int)shift_amount >> 0x1f));\n    if ((temp_value_1 | shift_amount << 1) == 0) {\n      temp_value_2 = temp_value_2 & ~(shift_amount >> 0x1f);\n    }\n    return temp_value_2;\n  }\n  bit_count = temp_value_1 << (shift_amount & 0xff);\n  temp_value_2 = constant_value + (temp_value_2 << (shift_amount & 0xff)) +\n          (temp_value_1 >> (0x20 - shift_amount & 0xff)) + (uint)(0x7fffffff < bit_count);\n  if (bit_count == 0x80000000) {\n    temp_value_2 = temp_value_2 & 0xfffffffe;\n  }\n  return temp_value_2;\n}\n\n",
            "renaming": {
                "FUN_08008e60": "calculate_new_value_08008e60",
                "param_1": "input_value_1",
                "param_2": "input_value_2",
                "uVar1": "temp_value_1",
                "uVar2": "temp_value_2",
                "uVar3": "bit_count",
                "uVar4": "shift_amount",
                "iVar5": "constant_value",
                "LZCOUNT": "leading_zeros_count"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008e70": {
            "entrypoint": "0x08008e70",
            "current_name": "calculate_unsigned_product_08008e70",
            "code": "\nuint calculateUnsignedProduct_08008e70(uint multiplier,uint multiplicand)\n\n{\n  uint multiplier;\n  uint multiplicand;\n  uint bitCount;\n  uint shiftAmount;\n  uint signExtension;\n  int result;\n  bool isNonZero;\n  \n  if ((multiplier | multiplicand) == 0) {\n    return multiplier;\n  }\n  signExtension = multiplicand & 0x80000000;\n  if ((int)signExtension < 0) {\n    isNonZero = multiplier != 0;\n    multiplier = -multiplier;\n    multiplicand = -multiplicand - (uint)isNonZero;\n  }\n  multiplicand = multiplier;\n  multiplier = multiplicand;\n  if (multiplicand == 0) {\n    multiplicand = 0;\n    multiplier = multiplier;\n  }\n  signExtension = signExtension | 0x5b000000;\n  if (multiplicand == 0) {\n    signExtension = signExtension + 0xf0000000;\n  }\n  bitCount = LZCOUNT(multiplier);\n  shiftAmount = bitCount - 8;\n  result = (signExtension - 0x800000) + shiftAmount * -0x800000;\n  if (bitCount < 8) {\n    shiftAmount = multiplier << bitCount + 0x18;\n    signExtension = result + ((multiplier >> (0x20 - (bitCount + 0x18) & 0xff)) - ((int)shiftAmount >> 0x1f));\n    if ((multiplicand | shiftAmount << 1) == 0) {\n      signExtension = signExtension & ~(shiftAmount >> 0x1f);\n    }\n    return signExtension;\n  }\n  bitCount = multiplicand << (shiftAmount & 0xff);\n  signExtension = result + (multiplier << (shiftAmount & 0xff)) +\n          (multiplicand >> (0x20 - shiftAmount & 0xff)) + (uint)(0x7fffffff < bitCount);\n  if (bitCount == 0x80000000) {\n    signExtension = signExtension & 0xfffffffe;\n  }\n  return signExtension;\n}\n\n",
            "renaming": {
                "FUN_08008e70": "calculate_unsigned_product_08008e70",
                "param_1": "multiplier",
                "param_2": "multiplicand",
                "uVar1": "multiplier",
                "uVar2": "multiplicand",
                "uVar3": "bitCount",
                "uVar4": "shiftAmount",
                "uVar5": "signExtension",
                "iVar6": "result",
                "bVar7": "isNonZero"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008eec": {
            "entrypoint": "0x08008eec",
            "current_name": "calculate_floating_point_08008eec",
            "code": "\nuint calculateFloatingPoint_08008eec(uint exponent1,uint exponent2,undefined4 param_3,uint Mantisa2)\n\n{\n  longlong product;\n  uint result;\n  uint exp1;\n  int expSum;\n  int shiftAmount1;\n  uint mant1;\n  int shiftAmount2;\n  uint mant2;\n  bool isZero;\n  bool isNegative;\n  \n  exp1 = exponent1 >> 0x17 & 0xff;\n  isZero = exp1 == 0;\n  if (!isZero) {\n    Mantisa2 = exponent2 >> 0x17 & 0xff;\n    isZero = Mantisa2 == 0;\n  }\n  if (!isZero) {\n    isZero = exp1 == 0xff;\n  }\n  if (!isZero) {\n    isZero = Mantisa2 == 0xff;\n  }\n  if (isZero) {\n    Mantisa2 = exponent2 >> 0x17 & 0xff;\n    if (exp1 == 0xff || Mantisa2 == 0xff) {\n      isZero = exponent1 == 0 || exponent1 == 0x80000000;\n      result = exponent2;\n      if (exponent1 != 0 && exponent1 != 0x80000000) {\n        isZero = exponent2 == 0;\n        result = exponent1;\n      }\n      if (!isZero) {\n        isZero = exponent2 == 0x80000000;\n      }\n      mant2 = result;\n      if (((isZero) || ((exp1 == 0xff && ((result & 0x7fffff) != 0)))) ||\n         ((Mantisa2 == 0xff && (mant2 = exponent2, (exponent2 & 0x7fffff) != 0)))) {\n        return mant2 | 0x7fc00000;\n      }\n      result = result ^ exponent2;\n      goto LAB_0800903c;\n    }\n    isZero = (exponent1 & 0x7fffffff) == 0;\n    if (!isZero) {\n      isZero = (exponent2 & 0x7fffffff) == 0;\n    }\n    if (isZero) {\n      return (exponent1 ^ exponent2) & 0x80000000;\n    }\n    isZero = exp1 == 0;\n    result = exponent1 & 0x80000000;\n    while( true ) {\n      if (isZero) {\n        exponent1 = exponent1 << 1;\n        isZero = (exponent1 & 0x800000) == 0;\n      }\n      if (!isZero) break;\n      exp1 = exp1 - 1;\n    }\n    exponent1 = exponent1 | result;\n    isZero = Mantisa2 == 0;\n    result = exponent2 & 0x80000000;\n    while( true ) {\n      if (isZero) {\n        exponent2 = exponent2 << 1;\n        isZero = (exponent2 & 0x800000) == 0;\n      }\n      if (!isZero) break;\n      Mantisa2 = Mantisa2 - 1;\n    }\n    exponent2 = exponent2 | result;\n  }\n  expSum = exp1 + Mantisa2;\n  mant2 = exponent1 ^ exponent2;\n  exp1 = exponent1 << 9;\n  isZero = exp1 == 0;\n  if (!isZero) {\n    exponent2 = exponent2 << 9;\n    isZero = exponent2 == 0;\n  }\n  if (isZero) {\n    if (exp1 == 0) {\n      exponent2 = exponent2 << 9;\n    }\n    result = mant2 & 0x80000000 | exponent1 & 0x7fffff | exponent2 >> 9;\n    isNegative = unsignedBorrow4(expSum,0x7f);\n    shiftAmount1 = expSum + -0x7f;\n    isZero = shiftAmount1 == 0;\n    shiftAmount2 = shiftAmount1;\n    if (!isZero && 0x7e < expSum) {\n      isNegative = unsignedBorrow4(0xff,shiftAmount1);\n      shiftAmount2 = 0xff - shiftAmount1;\n      isZero = shiftAmount1 == 0xff;\n    }\n    if (!isZero && shiftAmount2 < 0 == isNegative) {\n      result = result | shiftAmount1 * 0x800000;\n    }\n    if (!isZero && shiftAmount2 < 0 == isNegative) {\n      return result;\n    }\n    result = result | 0x800000;\n    mant1 = 0;\n    isNegative = unsignedBorrow4(shiftAmount1,1);\n    mant2 = expSum - 0x80;\n    isZero = mant2 == 0;\n    exp1 = mant2;\n  }\n  else {\n    product = (ulonglong)(exp1 >> 5 | 0x8000000) * (ulonglong)(exponent2 >> 5 | 0x8000000);\n    mant1 = (uint)product;\n    result = (uint)((ulonglong)product >> 0x20);\n    isZero = result < 0x800000;\n    if (isZero) {\n      result = result << 1;\n    }\n    if (isZero) {\n      result = result | mant1 >> 0x1f;\n      mant1 = mant1 << 1;\n    }\n    result = mant2 & 0x80000000 | result;\n    mant2 = (expSum + -0x7f) - (uint)isZero;\n    isNegative = unsignedBorrow4(mant2,0xfd);\n    isZero = mant2 == 0xfd;\n    exp1 = mant2 - 0xfd;\n    if (mant2 < 0xfe) {\n      result = result + mant2 * 0x800000 + (uint)(0x7fffffff < mant1);\n      if (mant1 == 0x80000000) {\n        result = result & 0xfffffffe;\n      }\n      return result;\n    }\n  }\n  if (isZero || (int)exp1 < 0 != isNegative) {\n    isZero = (int)(mant2 + 0x19) < 0;\n    if (mant2 == 0xffffffe7 || isZero != signedCarry4(mant2,0x19)) {\n      result = result & 0x80000000;\n    }\n    if (mant2 != 0xffffffe7 && isZero == signedCarry4(mant2,0x19)) {\n      exp1 = (result << 1) >> (-mant2 & 0xff);\n      mant2 = result << (mant2 + 0x20 & 0xff);\n      exp1 = ((uint)((result & 0x80000000) != 0) << 0x1f | exp1 >> 1) + (uint)((byte)exp1 & 1);\n      if ((mant1 | mant2 << 1) == 0) {\n        exp1 = exp1 & ~(mant2 >> 0x1f);\n      }\n      return exp1;\n    }\n    return result;\n  }\nLAB_0800903c:\n  return result & 0x80000000 | 0x7f800000;\n}\n\n",
            "renaming": {
                "FUN_08008eec": "calculate_floating_point_08008eec",
                "param_1": "exponent1",
                "param_2": "exponent2",
                "param_4": "Mantisa2",
                "lVar1": "product",
                "uVar2": "result",
                "uVar3": "exp1",
                "iVar4": "expSum",
                "iVar5": "shiftAmount1",
                "iVar7": "shiftAmount2",
                "uVar6": "mant1",
                "uVar8": "mant2",
                "bVar9": "isZero",
                "bVar10": "isNegative",
                "SBORROW4": "unsignedBorrow4",
                "SCARRY4": "signedCarry4"
            },
            "calling": [
                "printFloat",
                "calculate_trapezoid_for_block",
                "estimate_acceleration_distance",
                "plan_cycle_reinitialize",
                "homing_cycle",
                "max_allowable_speed",
                "plan_buffer_line",
                "gc_execute_line",
                "mc_go_home",
                "intersection_distance",
                "read_float",
                "mc_dwell",
                "mc_arc",
                "settings_store_global_setting"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009054": {
            "entrypoint": "0x08009054",
            "current_name": "calculate_floating_point_08009054",
            "code": "\nuint calculateFloatingPoint_08009054(uint bitPattern1,uint bitPattern2,undefined4 tempVar1,uint tempVar2)\n\n{\n  uint normalizedBitPattern2;\n  uint normalizedBitPattern1;\n  int bitPatternDifference;\n  uint residualBits;\n  int normalizedDifference;\n  uint result;\n  bool isZero1;\n  bool isZero2;\n  bool carryFlag;\n  \n  normalizedBitPattern1 = bitPattern1 >> 0x17 & 0xff;\n  isZero1 = normalizedBitPattern1 == 0;\n  if (!isZero1) {\n    tempVar2 = bitPattern2 >> 0x17 & 0xff;\n    isZero1 = tempVar2 == 0;\n  }\n  if (!isZero1) {\n    isZero1 = normalizedBitPattern1 == 0xff;\n  }\n  if (!isZero1) {\n    isZero1 = tempVar2 == 0xff;\n  }\n  if (isZero1) {\n    tempVar2 = bitPattern2 >> 0x17 & 0xff;\n    result = bitPattern1;\n    if (normalizedBitPattern1 == 0xff) {\n      if (((bitPattern1 & 0x7fffff) != 0) || (result = bitPattern2, tempVar2 == 0xff)) {\nLAB_0800904a:\n        return result | 0x7fc00000;\n      }\n    }\n    else {\n      if (tempVar2 == 0xff) {\n        result = bitPattern2;\n        if ((bitPattern2 & 0x7fffff) == 0) {\nLAB_08009000:\n          return (bitPattern1 ^ bitPattern2) & 0x80000000;\n        }\n        goto LAB_0800904a;\n      }\n      isZero1 = (bitPattern1 & 0x7fffffff) == 0;\n      if (!isZero1) {\n        isZero1 = (bitPattern2 & 0x7fffffff) == 0;\n      }\n      if (!isZero1) {\n        isZero1 = normalizedBitPattern1 == 0;\n        result = bitPattern1 & 0x80000000;\n        while( true ) {\n          if (isZero1) {\n            bitPattern1 = bitPattern1 << 1;\n            isZero1 = (bitPattern1 & 0x800000) == 0;\n          }\n          if (!isZero1) break;\n          normalizedBitPattern1 = normalizedBitPattern1 - 1;\n        }\n        bitPattern1 = bitPattern1 | result;\n        isZero1 = tempVar2 == 0;\n        result = bitPattern2 & 0x80000000;\n        while( true ) {\n          if (isZero1) {\n            bitPattern2 = bitPattern2 << 1;\n            isZero1 = (bitPattern2 & 0x800000) == 0;\n          }\n          if (!isZero1) break;\n          tempVar2 = tempVar2 - 1;\n        }\n        bitPattern2 = bitPattern2 | result;\n        goto LAB_0800906c;\n      }\n      if ((bitPattern1 & 0x7fffffff) == 0) {\n        if ((bitPattern2 & 0x7fffffff) != 0) goto LAB_08009000;\n        goto LAB_0800904a;\n      }\n    }\n    bitPattern1 = bitPattern1 ^ bitPattern2;\n  }\n  else {\nLAB_0800906c:\n    bitPatternDifference = normalizedBitPattern1 - tempVar2;\n    if (bitPattern2 << 9 == 0) {\n      bitPattern1 = (bitPattern1 ^ bitPattern2) & 0x80000000 | bitPattern1 & 0x7fffff;\n      carryFlag = SCARRY4(bitPatternDifference,0x7f);\n      normalizedDifference = bitPatternDifference + 0x7f;\n      isZero1 = normalizedDifference < 0;\n      isZero2 = normalizedDifference == 0;\n      if (!isZero2 && isZero1 == carryFlag) {\n        carryFlag = SBORROW4(0xff,normalizedDifference);\n        isZero1 = 0xff - normalizedDifference < 0;\n        isZero2 = normalizedDifference == 0xff;\n      }\n      if (!isZero2 && isZero1 == carryFlag) {\n        bitPattern1 = bitPattern1 | normalizedDifference * 0x800000;\n      }\n      if (!isZero2 && isZero1 == carryFlag) {\n        return bitPattern1;\n      }\n      bitPattern1 = bitPattern1 | 0x800000;\n      normalizedBitPattern1 = 0;\n      isZero2 = SBORROW4(normalizedDifference,1);\n      residualBits = bitPatternDifference + 0x7e;\n      isZero1 = residualBits == 0;\n      result = residualBits;\n    }\n    else {\n      normalizedBitPattern2 = (bitPattern2 << 9) >> 4 | 0x10000000;\n      normalizedBitPattern1 = (bitPattern1 << 9) >> 4 | 0x10000000;\n      bitPattern1 = (bitPattern1 ^ bitPattern2) & 0x80000000;\n      isZero1 = normalizedBitPattern2 <= normalizedBitPattern1;\n      if (!isZero1) {\n        normalizedBitPattern1 = normalizedBitPattern1 << 1;\n      }\n      residualBits = bitPatternDifference + 0x7d + (uint)isZero1;\n      result = 0x800000;\n      do {\n        if (normalizedBitPattern2 <= normalizedBitPattern1) {\n          normalizedBitPattern1 = normalizedBitPattern1 - normalizedBitPattern2;\n          bitPattern1 = bitPattern1 | result;\n        }\n        isZero1 = normalizedBitPattern2 >> 1 <= normalizedBitPattern1;\n        if (isZero1) {\n          normalizedBitPattern1 = normalizedBitPattern1 - (normalizedBitPattern2 >> 1);\n        }\n        if (isZero1) {\n          bitPattern1 = bitPattern1 | result >> 1;\n        }\n        isZero1 = normalizedBitPattern2 >> 2 <= normalizedBitPattern1;\n        if (isZero1) {\n          normalizedBitPattern1 = normalizedBitPattern1 - (normalizedBitPattern2 >> 2);\n        }\n        if (isZero1) {\n          bitPattern1 = bitPattern1 | result >> 2;\n        }\n        isZero1 = normalizedBitPattern2 >> 3 <= normalizedBitPattern1;\n        if (isZero1) {\n          normalizedBitPattern1 = normalizedBitPattern1 - (normalizedBitPattern2 >> 3);\n        }\n        if (isZero1) {\n          bitPattern1 = bitPattern1 | result >> 3;\n        }\n        normalizedBitPattern1 = normalizedBitPattern1 * 0x10;\n        isZero1 = normalizedBitPattern1 == 0;\n        if (!isZero1) {\n          result = result >> 4;\n          isZero1 = result == 0;\n        }\n      } while (!isZero1);\n      isZero2 = SBORROW4(residualBits,0xfd);\n      isZero1 = residualBits == 0xfd;\n      result = residualBits - 0xfd;\n      if (residualBits < 0xfe) {\n        bitPattern1 = bitPattern1 + residualBits * 0x800000 + (uint)(normalizedBitPattern2 <= normalizedBitPattern1);\n        if (normalizedBitPattern1 - normalizedBitPattern2 == 0) {\n          bitPattern1 = bitPattern1 & 0xfffffffe;\n        }\n        return bitPattern1;\n      }\n    }\n    if (isZero1 || (int)result < 0 != isZero2) {\n      isZero1 = (int)(residualBits + 0x19) < 0;\n      if (residualBits == 0xffffffe7 || isZero1 != SCARRY4(residualBits,0x19)) {\n        bitPattern1 = bitPattern1 & 0x80000000;\n      }\n      if (residualBits == 0xffffffe7 || isZero1 != SCARRY4(residualBits,0x19)) {\n        return bitPattern1;\n      }\n      result = (bitPattern1 << 1) >> (-residualBits & 0xff);\n      residualBits = bitPattern1 << (residualBits + 0x20 & 0xff);\n      result = ((uint)((bitPattern1 & 0x80000000) != 0) << 0x1f | result >> 1) + (uint)((byte)result & 1);\n      if ((normalizedBitPattern1 | residualBits << 1) == 0) {\n        result = result & ~(residualBits >> 0x1f);\n      }\n      return result;\n    }\n  }\n  return bitPattern1 & 0x80000000 | 0x7f800000;\n}\n\n",
            "renaming": {
                "FUN_08009054": "calculate_floating_point_08009054",
                "param_1": "bitPattern1",
                "param_2": "bitPattern2",
                "param_3": "tempVar1",
                "param_4": "tempVar2",
                "uVar1": "normalizedBitPattern2",
                "uVar2": "normalizedBitPattern1",
                "iVar3": "bitPatternDifference",
                "uVar4": "residualBits",
                "iVar5": "normalizedDifference",
                "uVar6": "result",
                "bVar7": "isZero1",
                "bVar8": "isZero2",
                "bVar9": "carryFlag"
            },
            "calling": [
                "gc_set_current_position",
                "intersection_distance",
                "report_grbl_settings",
                "planner_recalculate_trapezoids",
                "mc_arc",
                "report_realtime_status",
                "estimate_acceleration_distance",
                "plan_cycle_reinitialize",
                "homing_cycle",
                "plan_buffer_line"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800918c": {
            "entrypoint": "0x0800918c",
            "current_name": "bitwise_operation_0800918c",
            "code": "\nuint bitwise_operation_0800918c(uint input_1,uint input_2)\n\n{\n  bool is_negative;\n  uint result_1;\n  uint result_2;\n  uint result_3;\n  bool is_zero;\n  \n  result_1 = input_1 * 2;\n  result_2 = input_2 * 2;\n  if (((int)result_1 >> 0x18 == -1 || (int)result_2 >> 0x18 == -1) &&\n     ((((int)result_1 >> 0x18 == -1 && ((input_1 & 0x7fffff) != 0)) ||\n      (((int)result_2 >> 0x18 == -1 && ((input_2 & 0x7fffff) != 0)))))) {\n    return 0xffffffff;\n  }\n  result_3 = result_1 | input_2 & 0x7fffffff;\n  is_zero = result_3 == 0;\n  if (!is_zero) {\n    result_3 = input_1 ^ input_2;\n    is_zero = result_3 == 0;\n  }\n  is_negative = -1 < (int)result_3;\n  if (is_negative) {\n    input_1 = result_1 + input_2 * -2;\n    is_zero = input_1 == 0;\n  }\n  if ((is_negative && result_2 <= result_1) && !is_zero) {\n    input_1 = (int)input_2 >> 0x1f;\n  }\n  if (!is_negative || result_2 > result_1) {\n    input_1 = ~((int)input_2 >> 0x1f);\n  }\n  if (!is_zero) {\n    input_1 = input_1 | 1;\n  }\n  return input_1;\n}\n\n",
            "renaming": {
                "FUN_0800918c": "bitwise_operation_0800918c",
                "param_1": "input_1",
                "param_2": "input_2",
                "uVar2": "result_1",
                "uVar3": "result_2",
                "uVar4": "result_3",
                "bVar1": "is_negative",
                "bVar5": "is_zero"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009194": {
            "entrypoint": "0x08009194",
            "current_name": "check_overflow_08009194",
            "code": "\nuint check_overflow_08009194(uint operand1,uint operand2)\n\n{\n  bool is_negative;\n  uint operand1_shifted;\n  uint operand2_shifted;\n  uint merged_operands;\n  bool is_zero;\n  \n  operand1_shifted = operand1 * 2;\n  operand2_shifted = operand2 * 2;\n  if (((int)operand1_shifted >> 0x18 == -1 || (int)operand2_shifted >> 0x18 == -1) &&\n     ((((int)operand1_shifted >> 0x18 == -1 && ((operand1 & 0x7fffff) != 0)) ||\n      (((int)operand2_shifted >> 0x18 == -1 && ((operand2 & 0x7fffff) != 0)))))) {\n    return 1;\n  }\n  merged_operands = operand1_shifted | operand2 & 0x7fffffff;\n  is_zero = merged_operands == 0;\n  if (!is_zero) {\n    merged_operands = operand1 ^ operand2;\n    is_zero = merged_operands == 0;\n  }\n  is_negative = -1 < (int)merged_operands;\n  if (is_negative) {\n    operand1 = operand1_shifted + operand2 * -2;\n    is_zero = operand1 == 0;\n  }\n  if ((is_negative && operand2_shifted <= operand1_shifted) && !is_zero) {\n    operand1 = (int)operand2 >> 0x1f;\n  }\n  if (!is_negative || operand2_shifted > operand1_shifted) {\n    operand1 = ~((int)operand2 >> 0x1f);\n  }\n  if (!is_zero) {\n    operand1 = operand1 | 1;\n  }\n  return operand1;\n}\n\n",
            "renaming": {
                "FUN_08009194": "check_overflow_08009194",
                "param_1": "operand1",
                "param_2": "operand2",
                "uVar2": "operand1_shifted",
                "uVar3": "operand2_shifted",
                "uVar4": "merged_operands",
                "bVar1": "is_negative",
                "bVar5": "is_zero"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800919c": {
            "entrypoint": "0x0800919c",
            "current_name": "calculate_result_0800919c",
            "code": "\nuint calculate_result_0800919c(uint result,uint result)\n\n{\n  bool isNegative;\n  uint input_1_doubled;\n  uint input_2_doubled;\n  uint combined_inputs;\n  bool isZero;\n  \n  input_1_doubled = result * 2;\n  input_2_doubled = result * 2;\n  if (((int)input_1_doubled >> 0x18 == -1 || (int)input_2_doubled >> 0x18 == -1) &&\n     ((((int)input_1_doubled >> 0x18 == -1 && ((result & 0x7fffff) != 0)) ||\n      (((int)input_2_doubled >> 0x18 == -1 && ((result & 0x7fffff) != 0)))))) {\n    final_result 1;\n  }\n  combined_inputs = input_1_doubled | result & 0x7fffffff;\n  isZero = combined_inputs == 0;\n  if (!isZero) {\n    combined_inputs = result ^ result;\n    isZero = combined_inputs == 0;\n  }\n  isNegative = -1 < (int)combined_inputs;\n  if (isNegative) {\n    result = input_1_doubled + result * -2;\n    isZero = result == 0;\n  }\n  if ((isNegative && input_2_doubled <= input_1_doubled) && !isZero) {\n    result = (int)result >> 0x1f;\n  }\n  if (!isNegative || input_2_doubled > input_1_doubled) {\n    result = ~((int)result >> 0x1f);\n  }\n  if (!isZero) {\n    result = result | 1;\n  }\n  final_result result;\n}\n\n",
            "renaming": {
                "FUN_0800919c": "calculate_result_0800919c",
                "param_1": "result",
                "param_2": "result",
                "bVar1": "isNegative",
                "uVar2": "input_1_doubled",
                "uVar3": "input_2_doubled",
                "uVar4": "combined_inputs",
                "bVar5": "isZero",
                "return": "final_result"
            },
            "calling": [
                "__aeabi_cfcmpeq"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080091fc": {
            "entrypoint": "0x080091fc",
            "current_name": "compare_floats_080091fc",
            "code": "\nvoid compareFloats_080091fc(undefined4 value1,undefined4 value2)\n\n{\n  __aeabi_cfcmpeq(value2,value1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080091fc": "compare_floats_080091fc",
                "param_1": "value1",
                "param_2": "value2"
            },
            "calling": [
                "__aeabi_fcmpgt",
                "__aeabi_fcmpge"
            ],
            "called": [
                "__aeabi_cfcmpeq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009204": {
            "entrypoint": "0x08009204",
            "current_name": "concatenate_params_08009204",
            "code": "\nundefined8 concatenateParams_08009204(undefined4 firstParam,undefined4 secondParam)\n\n{\n  __cmpsf2();\n  return CONCAT44(secondParam,firstParam);\n}\n\n",
            "renaming": {
                "FUN_08009204": "concatenate_params_08009204",
                "param_1": "firstParam",
                "param_2": "secondParam"
            },
            "calling": [
                "__aeabi_fcmple",
                "__aeabi_fcmplt",
                "__aeabi_cfrcmple",
                "__aeabi_fcmpeq"
            ],
            "called": [
                "__cmpsf2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009214": {
            "entrypoint": "0x08009214",
            "current_name": "check_comparison_result_08009214",
            "code": "\nbool check_comparison_result_08009214(void)\n\n{\n  char comparison_result;\n  \n  __aeabi_cfcmpeq();\n  return comparison_result != '\\0';\n}\n\n",
            "renaming": {
                "FUN_08009214": "check_comparison_result_08009214",
                "in_ZR": "comparison_result"
            },
            "calling": [
                "gc_execute_line",
                "read_float",
                "planner_forward_pass_kernel",
                "mc_arc",
                "settings_store_global_setting",
                "planner_reverse_pass_kernel"
            ],
            "called": [
                "__aeabi_cfcmpeq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009228": {
            "entrypoint": "0x08009228",
            "current_name": "check_if_null_char_08009228",
            "code": "\nbool check_if_null_char_08009228(void)\n\n{\n  char input_char;\n  \n  __aeabi_cfcmpeq();\n  return input_char == '\\0';\n}\n\n",
            "renaming": {
                "FUN_08009228": "check_if_null_char_08009228",
                "in_CY": "input_char"
            },
            "calling": [
                "gc_execute_line",
                "printFloat",
                "planner_forward_pass_kernel",
                "settings_store_global_setting",
                "planner_reverse_pass_kernel",
                "plan_buffer_line"
            ],
            "called": [
                "__aeabi_cfcmpeq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800923c": {
            "entrypoint": "0x0800923c",
            "current_name": "compare_floats_0800923c",
            "code": "\nbool compareFloats_0800923c(void)\n\n{\n  undefined isZeroResult;\n  undefined isCarry;\n  \n  __aeabi_cfcmpeq();\n  return !(bool)isCarry || (bool)isZeroResult;\n}\n\n",
            "renaming": {
                "FUN_0800923c": "compare_floats_0800923c",
                "in_ZR": "isZeroResult",
                "in_CY": "isCarry"
            },
            "calling": [
                "gc_execute_line",
                "mc_arc",
                "settings_store_global_setting"
            ],
            "called": [
                "__aeabi_cfcmpeq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009250": {
            "entrypoint": "0x08009250",
            "current_name": "check_comparison_result_08009250",
            "code": "\nbool check_comparison_result_08009250(void)\n\n{\n  undefined zero_flag;\n  undefined carry_flag;\n  \n  __aeabi_cfrcmple();\n  return !(bool)carry_flag || (bool)zero_flag;\n}\n\n",
            "renaming": {
                "FUN_08009250": "check_comparison_result_08009250",
                "in_ZR": "zero_flag",
                "in_CY": "carry_flag"
            },
            "calling": [
                "mc_arc",
                "plan_buffer_line"
            ],
            "called": [
                "__aeabi_cfrcmple"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009264": {
            "entrypoint": "0x08009264",
            "current_name": "is_null_character_08009264",
            "code": "\nbool is_null_character_08009264(void)\n\n{\n  char input_char;\n  \n  __aeabi_cfrcmple();\n  return input_char == '\\0';\n}\n\n",
            "renaming": {
                "FUN_08009264": "is_null_character_08009264",
                "in_CY": "input_char"
            },
            "calling": [
                "planner_reverse_pass_kernel",
                "plan_buffer_line"
            ],
            "called": [
                "__aeabi_cfrcmple"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009278": {
            "entrypoint": "0x08009278",
            "current_name": "extract_bits_and_normalize_08009278",
            "code": "\nuint extract_bits_and_normalize_08009278(uint input_value)\n\n{\n  uint shifted_value;\n  uint difference;\n  \n  if (input_value << 1 < 0x7f000000) {\n    return 0;\n  }\n  shifted_value = (input_value << 1) >> 0x18;\n  difference = 0x9e - shifted_value;\n  if (shifted_value < 0x9f && difference != 0) {\n    shifted_value = (input_value << 8 | 0x80000000) >> (difference & 0xff);\n    if ((input_value & 0x80000000) != 0) {\n      shifted_value = -shifted_value;\n    }\n    return shifted_value;\n  }\n  if ((difference == 0xffffff9f) && ((input_value & 0x7fffff) != 0)) {\n    return 0;\n  }\n  input_value = input_value & 0x80000000;\n  if (input_value == 0) {\n    input_value = 0x7fffffff;\n  }\n  return input_value;\n}\n\n",
            "renaming": {
                "FUN_08009278": "extract_bits_and_normalize_08009278",
                "param_1": "input_value",
                "uVar1": "shifted_value",
                "uVar2": "difference"
            },
            "calling": [
                "printFloat",
                "protocol_execute_line"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080092c4": {
            "entrypoint": "0x080092c4",
            "current_name": "initialize_system_080092c4",
            "code": "\n/* WARNING: This function may have set the stack pointer */\n\nvoid initializeSystem_080092c4(void)\n\n{\n  int counter;\n  undefined4 *ptr;\n  code *jumptable;\n  \n  for (counter = 0; (undefined4 *)(counter + 0x20000000) < &completed_8911; counter = counter + 4) {\n    *(undefined4 *)(counter + 0x20000000) = *(undefined4 *)(&__fini_array_end + counter);\n  }\n  for (ptr = &completed_8911; ptr < &_ebss; ptr = ptr + 1) {\n    *ptr = 0;\n  }\n  SystemInit();\n  __libc_init_array();\n  jumptable = (code *)0x80092fa;\n  main();\n                    /* WARNING: Could not recover jumptable at 0x080092fa. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jumptable)();\n  return;\n}\n\n",
            "renaming": {
                "FUN_080092c4": "initialize_system_080092c4",
                "iVar1": "counter",
                "puVar2": "ptr",
                "UNRECOVERED_JUMPTABLE": "jumptable"
            },
            "calling": [],
            "called": [
                "SystemInit",
                "__libc_init_array",
                "main"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009314": {
            "entrypoint": "0x08009314",
            "current_name": "run_infinite_loop_08009314",
            "code": "\nvoid runInfiniteLoop_08009314(void)\n\n{\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08009314": "run_infinite_loop_08009314"
            },
            "calling": [
                "DMA1_Stream3_IRQHandler"
            ],
            "called": [
                "DMA1_Stream3_IRQHandler"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009318": {
            "entrypoint": "0x08009318",
            "current_name": "calculate_power_08009318",
            "code": "\ndouble calculatePower_08009318(double input)\n\n{\n  uint temp1;\n  uint temp2;\n  uint expDifference;\n  uint shiftedExp;\n  double output;\n  double output1;\n  double output2;\n  double output3;\n  undefined8 tempResult;\n  \n  shiftedExp = (temp2 << 1) >> 0x15;\n  expDifference = shiftedExp - 0x3ff;\n  if ((int)expDifference < 0x14) {\n    if ((int)expDifference < 0) {\n      tempResult = __aeabi_dadd(temp1,temp2,0x8800759c,0x7e37e43c);\n      __aeabi_dcmpgt((int)tempResult,(int)((ulonglong)tempResult >> 0x20),0,0);\n      output = output2;\n    }\n    else if ((temp2 & 0xfffff >> (expDifference & 0xff) | temp1) != 0) {\n      tempResult = __aeabi_dadd(temp1,temp2,0x8800759c,0x7e37e43c);\n      __aeabi_dcmpgt((int)tempResult,(int)((ulonglong)tempResult >> 0x20),0,0);\n      output = output1;\n    }\n  }\n  else if ((int)expDifference < 0x34) {\n    if ((0xffffffffU >> (shiftedExp - 0x413 & 0xff) & temp1) != 0) {\n      tempResult = __aeabi_dadd(temp1,temp2,0x8800759c,0x7e37e43c);\n      __aeabi_dcmpgt((int)tempResult,(int)((ulonglong)tempResult >> 0x20),0,0);\n      output = output3;\n    }\n  }\n  else if (expDifference == 0x400) {\n    output = (double)__aeabi_dadd();\n  }\n  return output;\n}\n\n",
            "renaming": {
                "FUN_08009318": "calculate_power_08009318",
                "__x": "input",
                "in_r0": "temp1",
                "in_r1": "temp2",
                "uVar1": "expDifference",
                "uVar2": "shiftedExp",
                "in_d0": "output",
                "extraout_d0": "output1",
                "extraout_d0_00": "output2",
                "extraout_d0_01": "output3",
                "uVar3": "tempResult"
            },
            "calling": [
                "calculate_trapezoid_for_block",
                "homing_cycle",
                "plan_buffer_line"
            ],
            "called": [
                "__aeabi_dadd",
                "__aeabi_dcmpgt"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009410": {
            "entrypoint": "0x08009410",
            "current_name": "calculate_trigonometric_value_08009410",
            "code": "\ndouble calculate_trigonometric_value_08009410(double input_value)\n\n{\n  undefined4 integer_part;\n  uint remainder;\n  uint fractional_part;\n  double result;\n  undefined4 temp_var_1;\n  undefined4 temp_var_2;\n  undefined4 temp_var_3;\n  undefined4 temp_var_4;\n  \n  if (0x3fe921fb < (fractional_part & 0x7fffffff)) {\n    if ((fractional_part & 0x7fffffff) < 0x7ff00000) {\n      remainder = __ieee754_rem_pio2(integer_part,fractional_part,&temp_var_1);\n      remainder = remainder & 3;\n      if (remainder == 1) {\n        result = (double)__kernel_sin(temp_var_1,temp_var_2,temp_var_3,temp_var_4,1);\n      }\n      else if (remainder == 2) {\n        result = (double)__kernel_cos(temp_var_1,temp_var_2,temp_var_3,temp_var_4);\n      }\n      else if (remainder == 0) {\n        result = (double)__kernel_cos(temp_var_1,temp_var_2,temp_var_3,temp_var_4);\n      }\n      else {\n        result = (double)__kernel_sin(temp_var_1,temp_var_2,temp_var_3,temp_var_4,1);\n      }\n    }\n    else {\n      result = (double)__subdf3();\n    }\n    return result;\n  }\n  result = (double)__kernel_cos(integer_part,fractional_part,0,0);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08009410": "calculate_trigonometric_value_08009410",
                "__x": "input_value",
                "in_r0": "integer_part",
                "in_r1": "fractional_part",
                "uVar1": "remainder",
                "dVar2": "result",
                "local_28": "temp_var_1",
                "uStack_24": "temp_var_2",
                "local_20": "temp_var_3",
                "uStack_1c": "temp_var_4"
            },
            "calling": [
                "mc_arc"
            ],
            "called": [
                "__ieee754_rem_pio2",
                "__kernel_sin",
                "__kernel_cos",
                "__subdf3"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080094c0": {
            "entrypoint": "0x080094c0",
            "current_name": "calculate_function_080094c0",
            "code": "\ndouble calculateFunction_080094c0(double inputValue)\n\n{\n  uint temp0;\n  uint temp1;\n  uint difference;\n  uint shiftedValue;\n  double outputValue;\n  double result1;\n  double result2;\n  double result3;\n  undefined8 tempResult;\n  \n  shiftedValue = (temp1 << 1) >> 0x15;\n  difference = shiftedValue - 0x3ff;\n  if ((int)difference < 0x14) {\n    if ((int)difference < 0) {\n      tempResult = __aeabi_dadd(temp0,temp1,0x8800759c,0x7e37e43c);\n      __aeabi_dcmpgt((int)tempResult,(int)((ulonglong)tempResult >> 0x20),0,0);\n      outputValue = result3;\n    }\n    else if ((temp1 & 0xfffff >> (difference & 0xff) | temp0) != 0) {\n      tempResult = __aeabi_dadd(temp0,temp1,0x8800759c,0x7e37e43c);\n      __aeabi_dcmpgt((int)tempResult,(int)((ulonglong)tempResult >> 0x20),0,0);\n      outputValue = result1;\n    }\n  }\n  else if ((int)difference < 0x34) {\n    if ((0xffffffffU >> (shiftedValue - 0x413 & 0xff) & temp0) != 0) {\n      tempResult = __aeabi_dadd(temp0,temp1,0x8800759c,0x7e37e43c);\n      __aeabi_dcmpgt((int)tempResult,(int)((ulonglong)tempResult >> 0x20),0,0);\n      outputValue = result2;\n    }\n  }\n  else if (difference == 0x400) {\n    outputValue = (double)__aeabi_dadd();\n  }\n  return outputValue;\n}\n\n",
            "renaming": {
                "FUN_080094c0": "calculate_function_080094c0",
                "__x": "inputValue",
                "in_r0": "temp0",
                "in_r1": "temp1",
                "uVar1": "difference",
                "uVar2": "shiftedValue",
                "in_d0": "outputValue",
                "extraout_d0": "result1",
                "extraout_d0_00": "result2",
                "extraout_d0_01": "result3",
                "uVar3": "tempResult"
            },
            "calling": [
                "calculate_trapezoid_for_block",
                "mc_dwell",
                "mc_arc",
                "__kernel_rem_pio2"
            ],
            "called": [
                "__aeabi_dadd",
                "__aeabi_dcmpgt"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080095b8": {
            "entrypoint": "0x080095b8",
            "current_name": "calculate_product_080095b8",
            "code": "\nlong calculate_product_080095b8(double input)\n\n{\n  uint bits_extracted_from_input;\n  uint bits_extracted_from_input_shifted;\n  uint carry_bit;\n  uint shift_amount;\n  uint result;\n  long sign;\n  uint exponent_diff;\n  \n  shift_amount = (bits_extracted_from_input_shifted << 1) >> 0x15;\n  exponent_diff = shift_amount - 0x3ff;\n  if ((int)bits_extracted_from_input_shifted < 0) {\n    sign = -1;\n  }\n  else {\n    sign = 1;\n  }\n  result = bits_extracted_from_input_shifted & 0xfffff | 0x100000;\n  if ((int)exponent_diff < 0x14) {\n    if ((int)exponent_diff < 0) {\n      if (exponent_diff != 0xffffffff) {\n        sign = 0;\n      }\n      return sign;\n    }\n    result = result + (0x80000 >> (exponent_diff & 0xff)) >> (0x14 - exponent_diff & 0xff);\n  }\n  else {\n    if (0x1e < exponent_diff) {\n      sign = convert_to_integer();\n      return sign;\n    }\n    if ((int)exponent_diff < 0x34) {\n      carry_bit = 0x80000000 >> (shift_amount - 0x413 & 0xff);\n      if (check_carry(carry_bit,bits_extracted_from_input) != false) {\n        result = result + 1;\n      }\n      result = result << (shift_amount - 0x413 & 0xff);\n      if (exponent_diff != 0x14) {\n        result = result | carry_bit + bits_extracted_from_input >> (0x34 - exponent_diff & 0xff);\n      }\n    }\n    else {\n      result = result << (shift_amount - 0x413 & 0xff) | bits_extracted_from_input << (shift_amount - 0x433 & 0xff);\n    }\n  }\n  return result * sign;\n}\n\n",
            "renaming": {
                "FUN_080095b8": "calculate_product_080095b8",
                "__x": "input",
                "in_r0": "bits_extracted_from_input",
                "in_r1": "bits_extracted_from_input_shifted",
                "uVar1": "carry_bit",
                "uVar2": "shift_amount",
                "uVar3": "result",
                "uVar5": "exponent_diff",
                "lVar4": "sign",
                "CARRY4": "check_carry",
                "__aeabi_d2iz": "convert_to_integer"
            },
            "calling": [
                "homing_cycle",
                "plan_buffer_line"
            ],
            "called": [
                "__aeabi_d2iz"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009654": {
            "entrypoint": "0x08009654",
            "current_name": "calculate_offset_08009654",
            "code": "\ndouble calculateOffset_08009654(double inputValue)\n\n{\n  int shiftedValue;\n  int iVar1;\n  double result;\n  \n  iVar1 = ((uint)(shiftedValue << 1) >> 0x15) - 0x3ff;\n  if (((0x13 < iVar1) && (0x33 < iVar1)) && (iVar1 == 0x400)) {\n    result = (double)__aeabi_dadd();\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08009654": "calculate_offset_08009654",
                "__x": "inputValue",
                "in_r1": "shiftedValue",
                "in_d0": "result"
            },
            "calling": [
                "settings_store_global_setting"
            ],
            "called": [
                "__aeabi_dadd"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080096e8": {
            "entrypoint": "0x080096e8",
            "current_name": "calculate_trigonometric_080096e8",
            "code": "\ndouble calculateTrigonometric_080096e8(double inputValue)\n\n{\n  undefined4 result1;\n  uint angleRemainder;\n  uint result2;\n  double trigonometricValue;\n  undefined4 angleRemainder1;\n  undefined4 angleRemainder2;\n  undefined4 angleRemainder3;\n  undefined4 angleRemainder4;\n  \n  if (0x3fe921fb < (result2 & 0x7fffffff)) {\n    if ((result2 & 0x7fffffff) < 0x7ff00000) {\n      angleRemainder = __ieee754_rem_pio2(result1,result2,&angleRemainder1);\n      angleRemainder = angleRemainder & 3;\n      if (angleRemainder == 1) {\n        trigonometricValue = (double)__kernel_cos(angleRemainder1,angleRemainder2,angleRemainder3,angleRemainder4);\n      }\n      else if (angleRemainder == 2) {\n        trigonometricValue = (double)__kernel_sin(angleRemainder1,angleRemainder2,angleRemainder3,angleRemainder4,1);\n      }\n      else if (angleRemainder == 0) {\n        trigonometricValue = (double)__kernel_sin(angleRemainder1,angleRemainder2,angleRemainder3,angleRemainder4,1);\n      }\n      else {\n        trigonometricValue = (double)__kernel_cos(angleRemainder1,angleRemainder2,angleRemainder3,angleRemainder4);\n      }\n    }\n    else {\n      trigonometricValue = (double)__subdf3();\n    }\n    return trigonometricValue;\n  }\n  trigonometricValue = (double)__kernel_sin(result1,result2,0,0,0);\n  return trigonometricValue;\n}\n\n",
            "renaming": {
                "FUN_080096e8": "calculate_trigonometric_080096e8",
                "__x": "inputValue",
                "in_r0": "result1",
                "in_r1": "result2",
                "uVar1": "angleRemainder",
                "dVar2": "trigonometricValue",
                "local_28": "angleRemainder1",
                "uStack_24": "angleRemainder2",
                "local_20": "angleRemainder3",
                "uStack_1c": "angleRemainder4"
            },
            "calling": [
                "mc_arc"
            ],
            "called": [
                "__ieee754_rem_pio2",
                "__kernel_sin",
                "__kernel_cos",
                "__subdf3"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009798": {
            "entrypoint": "0x08009798",
            "current_name": "calculate_exponent_08009798",
            "code": "\ndouble calculate_exponent_08009798(double input_number)\n\n{\n  int temp_var_1;\n  int exponent;\n  double result;\n  \n  exponent = ((uint)(temp_var_1 << 1) >> 0x15) - 0x3ff;\n  if (exponent < 0x14) {\n    if (exponent < 0) {\n      return result;\n    }\n  }\n  else {\n    if (exponent < 0x34) {\n      return result;\n    }\n    if (exponent != 0x400) {\n      return result;\n    }\n    result = (double)__aeabi_dadd();\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08009798": "calculate_exponent_08009798",
                "__x": "input_number",
                "in_r1": "temp_var_1",
                "iVar1": "exponent",
                "in_d0": "result"
            },
            "calling": [
                "gc_execute_line",
                "protocol_execute_line",
                "settings_store_global_setting"
            ],
            "called": [
                "__aeabi_dadd"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009818": {
            "entrypoint": "0x08009818",
            "current_name": "FUN_08009818",
            "code": "\nvoid __ieee754_atan2(uint param_1,uint param_2,uint param_3,uint param_4,double param_5)\n\n{\n  int iVar1;\n  undefined4 unaff_r4;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  undefined8 uVar5;\n  \n  uVar3 = param_4 & 0x7fffffff;\n  if (((uVar3 | (-param_3 | param_3) >> 0x1f) < 0x7ff00001) &&\n     (uVar4 = param_2 & 0x7fffffff, (uVar4 | (-param_1 | param_1) >> 0x1f) < 0x7ff00001)) {\n    if ((param_4 + 0xc0100000 | param_3) == 0) {\n      atan(param_5);\n      return;\n    }\n    uVar2 = (int)param_4 >> 0x1e & 2U | param_2 >> 0x1f;\n    if (((((uVar4 | param_1) != 0) && ((uVar3 | param_3) != 0)) && (uVar3 != 0x7ff00000)) &&\n       (uVar4 != 0x7ff00000)) {\n      iVar1 = (int)(uVar4 - uVar3) >> 0x14;\n      if (((int)(uVar4 - uVar3) < 0x3d00000) &&\n         ((-1 < (int)param_4 || (iVar1 + 0x3c < 0 == SCARRY4(iVar1,0x3c))))) {\n        __divdf3(param_1,param_2,param_3,param_4);\n        fabs((double)CONCAT44(unaff_r4,param_4));\n        atan((double)CONCAT44(unaff_r4,param_4));\n      }\n      if (uVar2 != 1) {\n        if (uVar2 == 2) {\n          uVar5 = __subdf3();\n          __subdf3(0x54442d18,0x400921fb,(int)uVar5,(int)((ulonglong)uVar5 >> 0x20));\n        }\n        else if (uVar2 != 0) {\n          uVar5 = __subdf3();\n          __subdf3((int)uVar5,(int)((ulonglong)uVar5 >> 0x20),0x54442d18,0x400921fb);\n        }\n      }\n    }\n  }\n  else {\n    __aeabi_dadd(param_3,param_4,param_1,param_2);\n  }\n  return;\n}\n\n",
            "renaming": {},
            "calling": [
                "mc_arc"
            ],
            "called": [
                "__ieee754_atan2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800981c": {
            "entrypoint": "0x0800981c",
            "current_name": "calculate_hypotenuse_0800981c",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x080098b6) */\n\ndouble calculateHypotenuse_0800981c(double x,double y)\n\n{\n  int isFinite;\n  undefined4 *errnoPointer;\n  double result;\n  double tempResult0;\n  double tempResult1;\n  double tempResult2;\n  double tempResult3;\n  double tempResult4;\n  int stackValue0;\n  char *stackValue1;\n  \n  result = (double)__ieee754_hypot();\n  if ((((__fdlib_version != -1) &&\n       (isFinite = finite((double)CONCAT44(stackValue1,stackValue0)), result = tempResult0,\n       isFinite == 0)) &&\n      (isFinite = finite((double)CONCAT44(stackValue1,stackValue0)), result = tempResult1\n      , isFinite != 0)) &&\n     ((isFinite = finite((double)CONCAT44(stackValue1,stackValue0)), result = tempResult2\n      , isFinite != 0 &&\n      (((__fdlib_version != '\\0' && (__fdlib_version == '\\x02')) ||\n       (isFinite = matherr((exception *)&stack0xffffffb0), result = tempResult4, isFinite == 0)))))) {\n    errnoPointer = (undefined4 *)__errno();\n    *errnoPointer = 0x22;\n    result = tempResult3;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_0800981c": "calculate_hypotenuse_0800981c",
                "__x": "x",
                "__y": "y",
                "iVar1": "isFinite",
                "puVar2": "errnoPointer",
                "dVar3": "result",
                "extraout_d0": "tempResult0",
                "extraout_d0_00": "tempResult1",
                "extraout_d0_01": "tempResult2",
                "extraout_d0_02": "tempResult3",
                "extraout_d0_03": "tempResult4",
                "in_stack_ffffffb0": "stackValue0",
                "in_stack_ffffffb4": "stackValue1"
            },
            "calling": [
                "gc_execute_line",
                "mc_arc"
            ],
            "called": [
                "__errno",
                "finite",
                "__ieee754_hypot",
                "matherr"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080098d0": {
            "entrypoint": "0x080098d0",
            "current_name": "calculate_square_root_080098d0",
            "code": "\ndouble calculateSquareRoot_080098d0(double input)\n\n{\n  char versionFlag;\n  int comparisonResult;\n  undefined4 *errnoPtr;\n  int *errnoPtrInt;\n  double result;\n  double sqrtExtraOut0;\n  double sqrtExtraOut1;\n  double sqrtExtraOut2;\n  double sqrtExtraOut3;\n  double sqrtExtraOut4;\n  undefined exceptionData [24];\n  undefined8 divisionResult;\n  int divisionError;\n  \n  result = (double)__ieee754_sqrt();\n  versionFlag = __fdlib_version;\n  if (((__fdlib_version == -1) || (divisionError = __unorddf2(), result = sqrtExtraOut0, divisionError != 0)) ||\n     (comparisonResult = __aeabi_dcmplt(), result = sqrtExtraOut1, comparisonResult == 0)) {\n    return result;\n  }\n  exceptionData._0_4_ = 1;\n  exceptionData._4_4_ = \"sqrt\";\n  if (versionFlag == '\\0') {\n    divisionResult = 0.0;\nLAB_0800996c:\n    comparisonResult = matherr((exception *)exceptionData);\n    result = sqrtExtraOut3;\n    if (comparisonResult != 0) goto joined_r0x0800997a;\n  }\n  else {\n    divisionResult = (double)__divdf3(0,0,0,0);\n    if (versionFlag != '\\x02') goto LAB_0800996c;\n  }\n  errnoPtr = (undefined4 *)__errno();\n  *errnoPtr = 0x21;\n  result = sqrtExtraOut2;\njoined_r0x0800997a:\n  if (divisionError != 0) {\n    errnoPtrInt = (int *)__errno();\n    *errnoPtrInt = divisionError;\n    result = sqrtExtraOut4;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080098d0": "calculate_square_root_080098d0",
                "__x": "input",
                "cVar1": "versionFlag",
                "iVar2": "comparisonResult",
                "puVar3": "errnoPtr",
                "piVar4": "errnoPtrInt",
                "dVar5": "result",
                "extraout_d0": "sqrtExtraOut0",
                "extraout_d0_00": "sqrtExtraOut1",
                "extraout_d0_01": "sqrtExtraOut2",
                "extraout_d0_02": "sqrtExtraOut3",
                "extraout_d0_03": "sqrtExtraOut4",
                "local_50": "exceptionData",
                "local_38": "divisionResult",
                "local_30": "divisionError"
            },
            "calling": [
                "gc_execute_line",
                "homing_cycle",
                "max_allowable_speed",
                "plan_buffer_line"
            ],
            "called": [
                "__errno",
                "__ieee754_sqrt",
                "__aeabi_dcmplt",
                "__unorddf2",
                "__divdf3",
                "matherr"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009990": {
            "entrypoint": "0x08009990",
            "current_name": "calculate_arc_tangent_08009990",
            "code": "\nvoid calculateArcTangent_08009990(uint value1,uint value2,uint value3,uint value4,double doubleValue)\n\n{\n  int tempVar1;\n  undefined4 undefined4Var;\n  uint flags;\n  uint absValue3;\n  uint absValue2;\n  undefined8 result;\n  \n  absValue3 = value4 & 0x7fffffff;\n  if (((absValue3 | (-value3 | value3) >> 0x1f) < 0x7ff00001) &&\n     (absValue2 = value2 & 0x7fffffff, (absValue2 | (-value1 | value1) >> 0x1f) < 0x7ff00001)) {\n    if ((value4 + 0xc0100000 | value3) == 0) {\n      atan(doubleValue);\n      return;\n    }\n    flags = (int)value4 >> 0x1e & 2U | value2 >> 0x1f;\n    if (((((absValue2 | value1) != 0) && ((absValue3 | value3) != 0)) && (absValue3 != 0x7ff00000)) &&\n       (absValue2 != 0x7ff00000)) {\n      tempVar1 = (int)(absValue2 - absValue3) >> 0x14;\n      if (((int)(absValue2 - absValue3) < 0x3d00000) &&\n         ((-1 < (int)value4 || (tempVar1 + 0x3c < 0 == SCARRY4(tempVar1,0x3c))))) {\n        divideDoublePrecision(value1,value2,value3,value4);\n        absoluteValue((double)concatenate64Bits(undefined4Var,value4));\n        atan((double)concatenate64Bits(undefined4Var,value4));\n      }\n      if (flags != 1) {\n        if (flags == 2) {\n          result = subtractDoublePrecision();\n          subtractDoublePrecision(0x54442d18,0x400921fb,(int)result,(int)((ulonglong)result >> 0x20));\n        }\n        else if (flags != 0) {\n          result = subtractDoublePrecision();\n          subtractDoublePrecision((int)result,(int)((ulonglong)result >> 0x20),0x54442d18,0x400921fb);\n        }\n      }\n    }\n  }\n  else {\n    addDoublePrecision(value3,value4,value1,value2);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009990": "calculate_arc_tangent_08009990",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "value3",
                "param_4": "value4",
                "param_5": "doubleValue",
                "unaff_r4": "undefined4Var",
                "iVar1": "tempVar1",
                "uVar2": "flags",
                "uVar3": "absValue3",
                "uVar4": "absValue2",
                "uVar5": "result",
                "__divdf3": "divideDoublePrecision",
                "fabs": "absoluteValue",
                "__subdf3": "subtractDoublePrecision",
                "__aeabi_dadd": "addDoublePrecision",
                "CONCAT44": "concatenate64Bits"
            },
            "calling": [
                "atan2"
            ],
            "called": [
                "fabs",
                "atan",
                "__aeabi_dadd",
                "__divdf3",
                "__subdf3"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009b24": {
            "entrypoint": "0x08009b24",
            "current_name": "calculate_root_mean_square_08009b24",
            "code": "\nuint calculateRootMeanSquare_08009b24(uint value1,uint value2,uint value3,uint value4)\n\n{\n  undefined4 result1;\n  int comparisonResult;\n  uint result2;\n  int temp1;\n  undefined4 temp2;\n  int temp3;\n  uint temp4;\n  undefined4 temp5;\n  undefined4 temp6;\n  undefined8 temp7;\n  undefined8 temp8;\n  undefined8 temp9;\n  undefined8 temp10;\n  int offset;\n  \n  value2 = value2 & 0x7fffffff;\n  value4 = value4 & 0x7fffffff;\n  result2 = value1;\n  temp4 = value2;\n  if (value2 < value4) {\n    result2 = value3;\n    value3 = value1;\n    temp4 = value4;\n    value4 = value2;\n  }\n  if (0x3c00000 < (int)(temp4 - value4)) {\n    result2 = __aeabi_dadd(result2,temp4,value3,value4);\n    return result2;\n  }\n  if (temp4 < 0x5f300001) {\n    offset = 0;\n  }\n  else {\n    if (0x7fefffff < temp4) {\n      if ((temp4 & 0xfffff | result2) != 0) {\n        result2 = __aeabi_dadd(result2,temp4,value3,value4);\n      }\n      if ((value4 ^ 0x7ff00000 | value3) != 0) {\n        return result2;\n      }\n      return value3;\n    }\n    temp4 = temp4 + 0xda800000;\n    value4 = value4 + 0xda800000;\n    offset = 600;\n  }\n  temp8 = CONCAT44(temp4,result2);\n  temp7 = CONCAT44(value4,value3);\n  if ((int)value4 < 0x20b00000) {\n    if ((int)value4 < 0x100000) {\n      if ((value4 | value3) == 0) {\n        return result2;\n      }\n      temp7 = __muldf3(value3,value4,0,0x7fd00000);\n      temp8 = __muldf3(result2,temp4,0,0x7fd00000);\n      offset = offset + -0x3fe;\n    }\n    else {\n      temp4 = temp4 + 0x25800000;\n      temp8 = CONCAT44(temp4,result2);\n      value4 = value4 + 0x25800000;\n      temp7 = CONCAT44(value4,value3);\n      offset = offset + -600;\n    }\n  }\n  temp6 = (undefined4)((ulonglong)temp8 >> 0x20);\n  temp5 = (undefined4)temp8;\n  temp3 = (int)((ulonglong)temp7 >> 0x20);\n  temp2 = (undefined4)temp7;\n  temp7 = __subdf3(temp5,temp6,temp2,temp3);\n  temp1 = (int)((ulonglong)temp7 >> 0x20);\n  result1 = (undefined4)temp7;\n  comparisonResult = __aeabi_dcmplt(temp2,temp3,result1,temp1);\n  if (comparisonResult == 0) {\n    temp7 = __muldf3(0,value4,0);\n    temp8 = __muldf3(result1,temp1 + -0x80000000,result1,temp1);\n    temp9 = __aeabi_dadd(temp5,temp6,temp5,temp6);\n    temp9 = __subdf3((int)temp9,(int)((ulonglong)temp9 >> 0x20),0,temp4 + 0x100000);\n    temp9 = __muldf3((int)temp9,(int)((ulonglong)temp9 >> 0x20),temp2,temp3);\n    temp10 = __subdf3(temp2,temp3,0,value4);\n    temp10 = __muldf3((int)temp10,(int)((ulonglong)temp10 >> 0x20),0,temp4 + 0x100000);\n    temp9 = __aeabi_dadd((int)temp9,(int)((ulonglong)temp9 >> 0x20),(int)temp10,\n                          (int)((ulonglong)temp10 >> 0x20));\n    temp8 = __subdf3((int)temp8,(int)((ulonglong)temp8 >> 0x20),(int)temp9,\n                      (int)((ulonglong)temp9 >> 0x20));\n    __subdf3((int)temp7,(int)((ulonglong)temp7 >> 0x20),(int)temp8,\n             (int)((ulonglong)temp8 >> 0x20));\n    temp7 = __ieee754_sqrt();\n  }\n  else {\n    temp7 = __muldf3(0,temp4,0,temp4);\n    temp8 = __muldf3(temp2,temp3 + -0x80000000,temp2,temp3);\n    temp9 = __aeabi_dadd(temp5,temp6,0,temp4);\n    temp10 = __subdf3(temp5,temp6,0,temp4);\n    temp9 = __muldf3((int)temp9,(int)((ulonglong)temp9 >> 0x20),(int)temp10,\n                      (int)((ulonglong)temp10 >> 0x20));\n    temp8 = __subdf3((int)temp8,(int)((ulonglong)temp8 >> 0x20),(int)temp9,\n                      (int)((ulonglong)temp9 >> 0x20));\n    __subdf3((int)temp7,(int)((ulonglong)temp7 >> 0x20),(int)temp8,\n             (int)((ulonglong)temp8 >> 0x20));\n    temp7 = __ieee754_sqrt();\n  }\n  result2 = (uint)temp7;\n  if (offset != 0) {\n    result2 = __muldf3(result2,(int)((ulonglong)temp7 >> 0x20),0,offset * 0x100000 + 0x3ff00000);\n  }\n  return result2;\n}\n\n",
            "renaming": {
                "FUN_08009b24": "calculate_root_mean_square_08009b24",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "value3",
                "param_4": "value4",
                "uVar1": "result1",
                "iVar2": "comparisonResult",
                "uVar3": "result2",
                "iVar4": "temp1",
                "uVar5": "temp2",
                "iVar6": "temp3",
                "uVar7": "temp4",
                "uVar8": "temp5",
                "uVar9": "temp6",
                "uVar10": "temp7",
                "uVar11": "temp8",
                "uVar12": "temp9",
                "uVar13": "temp10",
                "local_3c": "offset"
            },
            "calling": [
                "hypot"
            ],
            "called": [
                "__muldf3",
                "__ieee754_sqrt",
                "__aeabi_dcmplt",
                "__aeabi_dadd",
                "__subdf3"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009d78": {
            "entrypoint": "0x08009d78",
            "current_name": "calculate_result_08009d78",
            "code": "\nint calculateResult_08009d78(undefined4 input_value,uint flag,undefined8 *result_array)\n\n{\n  undefined4 var1;\n  undefined4 var2;\n  undefined4 var3;\n  undefined4 extra_out_r1;\n  undefined4 var4;\n  undefined4 var5;\n  undefined4 var6;\n  undefined4 var7;\n  uint unsigned_flag;\n  int return_value;\n  undefined8 double_var1;\n  undefined8 double_var2;\n  undefined8 double_var3;\n  undefined4 stack_var1;\n  undefined4 stack_var2;\n  undefined4 local_var1;\n  undefined4 local_var2;\n  undefined8 local_double1;\n  undefined8 local_double2;\n  undefined8 local_double3;\n  \n  unsigned_flag = flag & 0x7fffffff;\n  if (unsigned_flag < 0x3fe921fc) {\n    *(undefined4 *)result_array = input_value;\n    *(uint *)((int)result_array + 4) = flag;\n    *(undefined4 *)(result_array + 1) = 0;\n    *(undefined4 *)((int)result_array + 0xc) = 0;\n    return 0;\n  }\n  if (unsigned_flag < 0x4002d97c) {\n    if ((int)flag < 1) {\n      double_var1 = __aeabi_dadd(input_value,flag,0x54400000,0x3ff921fb);\n      var2 = (undefined4)((ulonglong)double_var1 >> 0x20);\n      var1 = (undefined4)double_var1;\n      if (unsigned_flag != 0x3ff921fb) {\n        double_var1 = __aeabi_dadd(var1,var2,0x1a626331,0x3dd0b461);\n        *result_array = double_var1;\n        double_var1 = __subdf3(var1,var2);\n        double_var1 = __aeabi_dadd((int)double_var1,(int)((ulonglong)double_var1 >> 0x20),0x1a626331,0x3dd0b461);\n        result_array[1] = double_var1;\n        return -1;\n      }\n      double_var1 = __aeabi_dadd(var1,var2,0x1a600000,0x3dd0b461);\n      var1 = (undefined4)((ulonglong)double_var1 >> 0x20);\n      double_var2 = __aeabi_dadd((int)double_var1,var1,0x2e037073,0x3ba3198a);\n      *result_array = double_var2;\n      double_var1 = __subdf3((int)double_var1,var1);\n      double_var1 = __aeabi_dadd((int)double_var1,(int)((ulonglong)double_var1 >> 0x20),0x2e037073,0x3ba3198a);\n      result_array[1] = double_var1;\n      return -1;\n    }\n    double_var1 = __subdf3();\n    var2 = (undefined4)((ulonglong)double_var1 >> 0x20);\n    var1 = (undefined4)double_var1;\n    if (unsigned_flag != 0x3ff921fb) {\n      double_var1 = __subdf3(var1,var2,0x1a626331,0x3dd0b461);\n      *result_array = double_var1;\n      double_var1 = __subdf3(var1,var2);\n      double_var1 = __subdf3((int)double_var1,(int)((ulonglong)double_var1 >> 0x20),0x1a626331,0x3dd0b461);\n      result_array[1] = double_var1;\n      return 1;\n    }\n    double_var1 = __subdf3(var1,var2,0x1a600000,0x3dd0b461);\n    var1 = (undefined4)((ulonglong)double_var1 >> 0x20);\n    double_var2 = __subdf3((int)double_var1,var1,0x2e037073,0x3ba3198a);\n    *result_array = double_var2;\n    double_var1 = __subdf3((int)double_var1,var1);\n    double_var1 = __subdf3((int)double_var1,(int)((ulonglong)double_var1 >> 0x20),0x2e037073,0x3ba3198a);\n    result_array[1] = double_var1;\n    return 1;\n  }\n  if (0x413921fb < unsigned_flag) {\n    if (0x7fefffff < unsigned_flag) {\n      double_var1 = __subdf3(input_value,flag,input_value,flag);\n      result_array[1] = double_var1;\n      *result_array = double_var1;\n      return 0;\n    }\n    return_value = ((int)unsigned_flag >> 0x14) + -0x416;\n    __aeabi_d2iz();\n    local_double1 = __aeabi_i2d();\n    double_var1 = __subdf3(input_value,unsigned_flag + return_value * -0x100000,(int)local_double1,\n                      (int)((ulonglong)local_double1 >> 0x20));\n    double_var1 = __muldf3((int)double_var1,(int)((ulonglong)double_var1 >> 0x20),0,0x41700000);\n    __aeabi_d2iz();\n    local_double2 = __aeabi_i2d();\n    double_var1 = __subdf3((int)double_var1,(int)((ulonglong)double_var1 >> 0x20));\n    local_double3 = __muldf3((int)double_var1,(int)((ulonglong)double_var1 >> 0x20),0,0x41700000);\n    __aeabi_dcmpeq((int)local_double3,(int)((ulonglong)local_double3 >> 0x20),0,0);\n    return_value = __kernel_rem_pio2(&local_double1,result_array,return_value);\n    if (-1 < (int)flag) {\n      return return_value;\n    }\n    *(int *)((int)result_array + 4) = *(int *)((int)result_array + 4) + -0x80000000;\n    *(int *)((int)result_array + 0xc) = *(int *)((int)result_array + 0xc) + -0x80000000;\n    return -return_value;\n  }\n  fabs((double)CONCAT44(stack_var2,stack_var1));\n  double_var1 = __muldf3();\n  __aeabi_dadd((int)double_var1,(int)((ulonglong)double_var1 >> 0x20),0,0x3fe00000);\n  return_value = __aeabi_d2iz();\n  double_var1 = __aeabi_i2d();\n  var4 = (undefined4)((ulonglong)double_var1 >> 0x20);\n  var1 = (undefined4)double_var1;\n  double_var1 = __muldf3(var1,var4,0x54400000,0x3ff921fb);\n  double_var1 = __subdf3(input_value,extra_out_r1,(int)double_var1,(int)((ulonglong)double_var1 >> 0x20));\n  var5 = (undefined4)((ulonglong)double_var1 >> 0x20);\n  var2 = (undefined4)double_var1;\n  double_var2 = __muldf3(var1,var4,0x1a626331,0x3dd0b461);\n  if ((0x1f < return_value) || (*(uint *)(&npio2_hw + (return_value + -1) * 4) == unsigned_flag)) {\n    double_var3 = __subdf3(var2,var5,(int)double_var2,(int)((ulonglong)double_var2 >> 0x20));\n    if ((int)((unsigned_flag >> 0x14) - ((uint)((int)((ulonglong)double_var3 >> 0x20) << 1) >> 0x15)) < 0x11)\n    goto LAB_0800a0ce;\n    double_var2 = __muldf3(var1,var4,0x1a600000,0x3dd0b461);\n    var6 = (undefined4)((ulonglong)double_var2 >> 0x20);\n    double_var1 = __subdf3(var2,var5,(int)double_var2,var6);\n    var7 = (undefined4)((ulonglong)double_var1 >> 0x20);\n    var3 = (undefined4)double_var1;\n    double_var3 = __subdf3(var2,var5,var3,var7);\n    double_var2 = __subdf3((int)double_var3,(int)((ulonglong)double_var3 >> 0x20),(int)double_var2,var6);\n    double_var3 = __muldf3(var1,var4,0x2e037073,0x3ba3198a);\n    double_var2 = __subdf3((int)double_var3,(int)((ulonglong)double_var3 >> 0x20),(int)double_var2,\n                      (int)((ulonglong)double_var2 >> 0x20));\n    double_var3 = __subdf3(var3,var7,(int)double_var2,(int)((ulonglong)double_var2 >> 0x20));\n    if ((int)(((int)unsigned_flag >> 0x14) - ((uint)((int)((ulonglong)double_var3 >> 0x20) << 1) >> 0x15)) < 0x32\n       ) goto LAB_0800a0ce;\n    double_var2 = __muldf3(var1,var4,0x2e000000,0x3ba3198a);\n    var2 = (undefined4)((ulonglong)double_var2 >> 0x20);\n    double_var1 = __subdf3(var3,var7,(int)double_var2,var2);\n    double_var3 = __subdf3(var3,var7);\n    double_var2 = __subdf3((int)double_var3,(int)((ulonglong)double_var3 >> 0x20),(int)double_var2,var2);\n    double_var3 = __muldf3(var1,var4,0x252049c1,0x397b839a);\n    double_var2 = __subdf3((int)double_var3,(int)((ulonglong)double_var3 >> 0x20),(int)double_var2,\n                      (int)((ulonglong)double_var2 >> 0x20));\n  }\n  double_var3 = __subdf3((int)double_var1,(int)((ulonglong)double_var1 >> 0x20),(int)double_var2,\n                    (int)((ulonglong)double_var2 >> 0x20));\nLAB_0800a0ce:\n  local_var2 = (undefined4)((ulonglong)double_var1 >> 0x20);\n  local_var1 = (undefined4)double_var1;\n  *result_array = double_var3;\n  double_var1 = __subdf3(local_var1,local_var2);\n  double_var1 = __subdf3((int)double_var1,(int)((ulonglong)double_var1 >> 0x20),(int)double_var2,\n                    (int)((ulonglong)double_var2 >> 0x20));\n  result_array[1] = double_var1;\n  if ((int)flag < 0) {\n    *(int *)result_array = (int)double_var3;\n    *(int *)((int)result_array + 4) = (int)((ulonglong)double_var3 >> 0x20) + -0x80000000;\n    *(int *)(result_array + 1) = (int)double_var1;\n    *(int *)((int)result_array + 0xc) = (int)((ulonglong)double_var1 >> 0x20) + -0x80000000;\n    return_value = -return_value;\n  }\n  return return_value;\n}\n\n",
            "renaming": {
                "FUN_08009d78": "calculate_result_08009d78",
                "param_1": "input_value",
                "param_2": "flag",
                "param_3": "result_array",
                "uVar1": "var1",
                "uVar2": "var2",
                "uVar3": "var3",
                "extraout_r1": "extra_out_r1",
                "uVar4": "var4",
                "uVar5": "var5",
                "uVar6": "var6",
                "uVar7": "var7",
                "uVar8": "unsigned_flag",
                "iVar9": "return_value",
                "uVar10": "double_var1",
                "uVar11": "double_var2",
                "uVar12": "double_var3",
                "in_stack_ffffffa8": "stack_var1",
                "in_stack_ffffffac": "stack_var2",
                "local_50": "local_var1",
                "uStack_4c": "local_var2",
                "local_40": "local_double1",
                "local_38": "local_double2",
                "local_30": "local_double3"
            },
            "calling": [
                "sin",
                "cos"
            ],
            "called": [
                "__muldf3",
                "fabs",
                "__aeabi_dadd",
                "__aeabi_dcmpeq",
                "__kernel_rem_pio2",
                "__aeabi_i2d",
                "__aeabi_d2iz",
                "__subdf3"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a1bc": {
            "entrypoint": "0x0800a1bc",
            "current_name": "calculate_sum_0800a1bc",
            "code": "\nuint calculateSum_0800a1bc(uint inputValue1,uint inputValue2)\n\n{\n  uint exponent;\n  int count;\n  uint temporary;\n  undefined4 temp1;\n  uint shiftedValue;\n  uint mask;\n  uint result;\n  uint subtract;\n  uint dividend;\n  int loopCount;\n  uint remainder;\n  uint shiftAmount;\n  undefined8 product;\n  \n  if ((~inputValue2 & 0x7ff00000) == 0) {\n    product = __muldf3(inputValue1,inputValue2,inputValue1,inputValue2);\n    result = __aeabi_dadd((int)product,(int)((ulonglong)product >> 0x20),inputValue1,inputValue2);\n    return result;\n  }\n  if ((int)inputValue2 < 1) {\n    if ((inputValue2 & 0x7fffffff | inputValue1) == 0) {\n      return inputValue1;\n    }\n    if (inputValue2 != 0) {\n      product = __subdf3(inputValue1,inputValue2,inputValue1);\n      temp1 = (undefined4)((ulonglong)product >> 0x20);\n      result = __divdf3((int)product,temp1,(int)product,temp1);\n      return result;\n    }\n    do {\n      dividend = inputValue1;\n      result = dividend >> 0xb;\n      inputValue2 = inputValue2 - 0x15;\n      inputValue1 = dividend << 0x15;\n    } while (result == 0);\n    exponent = inputValue2;\n    if (-1 < (int)dividend) goto LAB_0800a290;\n    shiftAmount = 0x20;\n    shiftedValue = 0xffffffff;\n    dividend = inputValue1;\n  }\n  else {\n    exponent = (int)inputValue2 >> 0x14;\n    result = inputValue2;\n    dividend = inputValue1;\n    if (exponent != 0) goto LAB_0800a1da;\nLAB_0800a290:\n    dividend = 0;\n    shiftAmount = result;\n    do {\n      shiftedValue = dividend;\n      result = shiftAmount << 1;\n      loopCount = shiftAmount << 0xc;\n      dividend = shiftedValue + 1;\n      shiftAmount = result;\n    } while (-1 < loopCount);\n    shiftAmount = 0x20 - dividend;\n    inputValue2 = exponent;\n    dividend = inputValue1 << (dividend & 0xff);\n  }\n  result = inputValue1 >> (shiftAmount & 0xff) | result;\n  exponent = inputValue2 - shiftedValue;\nLAB_0800a1da:\n  result = result & 0xfffff | 0x100000;\n  if (-1 < (int)(exponent << 0x1f)) {\n    result = result * 2 - ((int)dividend >> 0x1f);\n    dividend = dividend << 1;\n  }\n  shiftAmount = 0;\n  result = result * 2 - ((int)dividend >> 0x1f);\n  dividend = dividend << 1;\n  exponent = 0;\n  loopCount = 0x16;\n  shiftedValue = 0x200000;\n  do {\n    count = exponent + shiftedValue;\n    if (count <= (int)result) {\n      result = result - count;\n      exponent = count + shiftedValue;\n      shiftAmount = shiftAmount + shiftedValue;\n    }\n    loopCount = loopCount + -1;\n    result = result * 2 - ((int)dividend >> 0x1f);\n    shiftedValue = shiftedValue >> 1;\n    dividend = dividend << 1;\n  } while (loopCount != 0);\n  count = 0x20;\n  mask = 0x80000000;\n  loopCount = 0;\n  shiftedValue = 0;\n  do {\n    temporary = mask + loopCount;\n    remainder = exponent;\n    if ((int)exponent < (int)result) {\n      if ((int)temporary < 0) {\nLAB_0800a26a:\n        if (-1 < (int)(temporary + mask)) {\n          remainder = exponent + 1;\n        }\n      }\n      subtract = result - exponent;\n      exponent = remainder;\n      if (dividend < temporary) {\n        subtract = subtract - 1;\n      }\nLAB_0800a262:\n      loopCount = temporary + mask;\n      dividend = dividend - temporary;\n      shiftedValue = shiftedValue + mask;\n      result = subtract;\n    }\n    else if ((result == exponent) && (temporary <= dividend)) {\n      if ((int)temporary < 0) goto LAB_0800a26a;\n      subtract = 0;\n      exponent = result;\n      goto LAB_0800a262;\n    }\n    count = count + -1;\n    mask = mask >> 1;\n    result = result * 2 - ((int)dividend >> 0x1f);\n    dividend = dividend << 1;\n    if (count == 0) {\n      if ((result | dividend) == 0) {\n        shiftedValue = shiftedValue >> 1;\n      }\n      else if (shiftedValue == 0xffffffff) {\n        shiftAmount = shiftAmount + 1;\n        shiftedValue = 0;\n      }\n      else {\n        shiftedValue = shiftedValue + 1 >> 1;\n      }\n      if ((shiftAmount & 1) != 0) {\n        shiftedValue = shiftedValue | 0x80000000;\n      }\n      return shiftedValue;\n    }\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_0800a1bc": "calculate_sum_0800a1bc",
                "param_1": "inputValue1",
                "param_2": "inputValue2",
                "uVar1": "exponent",
                "iVar2": "count",
                "uVar3": "temporary",
                "uVar4": "temp1",
                "uVar5": "shiftedValue",
                "uVar6": "mask",
                "uVar7": "result",
                "uVar8": "subtract",
                "uVar9": "dividend",
                "iVar10": "loopCount",
                "uVar11": "remainder",
                "uVar12": "shiftAmount",
                "uVar13": "product"
            },
            "calling": [
                "sqrt",
                "__ieee754_hypot"
            ],
            "called": [
                "__muldf3",
                "__aeabi_dadd",
                "__divdf3",
                "__subdf3"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a348": {
            "entrypoint": "0x0800a348",
            "current_name": "calculate_approximate_square_root_0800a348",
            "code": "\nundefined4 calculate_approximate_square_root_0800a348(undefined4 number,uint mask,undefined4 param_3,undefined4 param_4)\n\n{\n  int integer_result;\n  undefined4 quotient_low;\n  undefined4 quotient_high;\n  uint abs_mask;\n  undefined8 product_high;\n  undefined8 product_low;\n  undefined8 product_result;\n  undefined4 result_low;\n  undefined4 result_high;\n  undefined4 temp_low;\n  undefined4 temp_high;\n  \n  abs_mask = mask & 0x7fffffff;\n  if (abs_mask < 0x3e400000) {\n    integer_result = __aeabi_d2iz();\n    if (integer_result == 0) {\n      return 0;\n    }\n    product_high = __muldf3(number,mask,number,mask);\n    quotient_high = (undefined4)((ulonglong)product_high >> 0x20);\n    quotient_low = (undefined4)product_high;\n    product_low = __muldf3(quotient_low,quotient_high,0xbe8838d4,0xbda8fae9);\n    product_low = __aeabi_dadd((int)product_low,(int)((ulonglong)product_low >> 0x20),0xbdb4b1c4,0x3e21ee9e);\n    product_low = __muldf3((int)product_low,(int)((ulonglong)product_low >> 0x20),quotient_low,quotient_high);\n    product_low = __subdf3((int)product_low,(int)((ulonglong)product_low >> 0x20),0x809c52ad,0x3e927e4f);\n    product_low = __muldf3((int)product_low,(int)((ulonglong)product_low >> 0x20),quotient_low,quotient_high);\n    product_low = __aeabi_dadd((int)product_low,(int)((ulonglong)product_low >> 0x20),0x19cb1590,0x3efa01a0);\n    product_low = __muldf3((int)product_low,(int)((ulonglong)product_low >> 0x20),quotient_low,quotient_high);\n    product_low = __subdf3((int)product_low,(int)((ulonglong)product_low >> 0x20),0x16c15177,0x3f56c16c);\n    product_low = __muldf3((int)product_low,(int)((ulonglong)product_low >> 0x20),quotient_low,quotient_high);\n    product_low = __aeabi_dadd((int)product_low,(int)((ulonglong)product_low >> 0x20),0x5555554c,0x3fa55555);\n    product_low = __muldf3((int)product_low,(int)((ulonglong)product_low >> 0x20),quotient_low,quotient_high);\n  }\n  else {\n    product_high = __muldf3(number,mask,number,mask);\n    quotient_high = (undefined4)((ulonglong)product_high >> 0x20);\n    quotient_low = (undefined4)product_high;\n    product_low = __muldf3(quotient_low,quotient_high,0xbe8838d4,0xbda8fae9);\n    product_low = __aeabi_dadd((int)product_low,(int)((ulonglong)product_low >> 0x20),0xbdb4b1c4,0x3e21ee9e);\n    product_low = __muldf3((int)product_low,(int)((ulonglong)product_low >> 0x20),quotient_low,quotient_high);\n    product_low = __subdf3((int)product_low,(int)((ulonglong)product_low >> 0x20),0x809c52ad,0x3e927e4f);\n    product_low = __muldf3((int)product_low,(int)((ulonglong)product_low >> 0x20),quotient_low,quotient_high);\n    product_low = __aeabi_dadd((int)product_low,(int)((ulonglong)product_low >> 0x20),0x19cb1590,0x3efa01a0);\n    product_low = __muldf3((int)product_low,(int)((ulonglong)product_low >> 0x20),quotient_low,quotient_high);\n    product_low = __subdf3((int)product_low,(int)((ulonglong)product_low >> 0x20),0x16c15177,0x3f56c16c);\n    product_low = __muldf3((int)product_low,(int)((ulonglong)product_low >> 0x20),quotient_low,quotient_high);\n    product_low = __aeabi_dadd((int)product_low,(int)((ulonglong)product_low >> 0x20),0x5555554c,0x3fa55555);\n    product_low = __muldf3((int)product_low,(int)((ulonglong)product_low >> 0x20),quotient_low,quotient_high);\n    if (0x3fd33332 < abs_mask) {\n      if (abs_mask < 0x3fe90001) {\n        integer_result = abs_mask - 0x200000;\n        product_high = __subdf3(0,0x3ff00000,0,integer_result);\n      }\n      else {\n        integer_result = 0x3fd20000;\n        product_high = 0x3fe7000000000000;\n      }\n      temp_high = (undefined4)((ulonglong)product_high >> 0x20);\n      temp_low = (undefined4)product_high;\n      product_high = __muldf3(quotient_low,quotient_high,0,0x3fe00000);\n      product_high = __subdf3((int)product_high,(int)((ulonglong)product_high >> 0x20),0,integer_result);\n      product_low = __muldf3(quotient_low,quotient_high,(int)product_low,(int)((ulonglong)product_low >> 0x20));\n      product_result = __muldf3(number,mask,param_3,param_4);\n      product_low = __subdf3((int)product_low,(int)((ulonglong)product_low >> 0x20),(int)product_result,\n                       (int)((ulonglong)product_result >> 0x20));\n      product_high = __subdf3((int)product_high,(int)((ulonglong)product_high >> 0x20),(int)product_low,\n                       (int)((ulonglong)product_low >> 0x20));\n      quotient_low = __subdf3(temp_low,temp_high,(int)product_high,(int)((ulonglong)product_high >> 0x20));\n      return quotient_low;\n    }\n  }\n  result_high = (undefined4)((ulonglong)product_low >> 0x20);\n  result_low = (undefined4)product_low;\n  quotient_low = (undefined4)((ulonglong)product_high >> 0x20);\n  product_low = __muldf3((int)product_high,quotient_low,0,0x3fe00000);\n  product_high = __muldf3((int)product_high,quotient_low,result_low,result_high);\n  product_result = __muldf3(number,mask,param_3,param_4);\n  product_high = __subdf3((int)product_high,(int)((ulonglong)product_high >> 0x20),(int)product_result,\n                   (int)((ulonglong)product_result >> 0x20));\n  product_high = __subdf3((int)product_low,(int)((ulonglong)product_low >> 0x20),(int)product_high,\n                   (int)((ulonglong)product_high >> 0x20));\n  quotient_low = __subdf3(0,0x3ff00000,(int)product_high,(int)((ulonglong)product_high >> 0x20));\n  return quotient_low;\n}\n\n",
            "renaming": {
                "FUN_0800a348": "calculate_approximate_square_root_0800a348",
                "param_1": "number",
                "param_2": "mask",
                "iVar1": "integer_result",
                "uVar2": "quotient_low",
                "uVar3": "quotient_high",
                "uVar4": "abs_mask",
                "uVar5": "product_high",
                "uVar6": "product_low",
                "uVar7": "product_result",
                "local_30": "result_low",
                "uStack_2c": "result_high",
                "local_28": "temp_low",
                "uStack_24": "temp_high"
            },
            "calling": [
                "sin",
                "cos"
            ],
            "called": [
                "__muldf3",
                "__aeabi_dadd",
                "__aeabi_d2iz",
                "__subdf3"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a5a0": {
            "entrypoint": "0x0800a5a0",
            "current_name": "reverse_code_0800a5a0",
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n\nuint reverse_code_0800a5a0(int input,undefined8 *output_array,int output_size,int start_index,int operation_type,int input_array)\n\n{\n  undefined4 *temp_ptr;\n  uint result;\n  undefined4 temp_result;\n  uint temp_result_2;\n  undefined4 temp_extra_output;\n  int temp_index_1;\n  uint *temp_ptr_2;\n  undefined4 temp_extra_output_2;\n  undefined4 temp_extra_output_3;\n  undefined4 temp_extra_output_4;\n  undefined4 temp_double;\n  uint **temp_ptr_ptr;\n  int temp_index_2;\n  int temp_index_3;\n  undefined4 *temp_ptr_3;\n  undefined4 temp_double_2;\n  uint temp_uint;\n  uint *temp_ptr_4;\n  int temp_index_4;\n  int var_start_index;\n  undefined8 *var_ptr_1;\n  undefined8 *var_ptr_2;\n  undefined8 *var_ptr_3;\n  undefined4 *var_ptr_4;\n  undefined8 *var_ptr_5;\n  undefined4 temp_double_3;\n  int var_loop_index;\n  undefined4 *var_ptr_6;\n  bool var_bool;\n  undefined8 var_double_1;\n  undefined8 var_double_2;\n  undefined8 var_double_3;\n  undefined4 var_extra_output;\n  int var_loop_index_2;\n  int var_loop_size;\n  uint *local_260 [2];\n  uint var_output_array [20];\n  undefined8 var_double_stack_1;\n  undefined4 var_int_1;\n  undefined4 var_int_2;\n  undefined8 var_double_stack_2;\n  undefined8 var_double_stack_3;\n  \n  var_start_index = *(int *)(&init_jk + operation_type * 4);\n  temp_index_2 = start_index + -1;\n  local_260[1] = (uint *)output_array;\n  if (output_size + 0x14 < 0 == SCARRY4(output_size,0x14)) {\n    var_loop_size = (output_size + -3) / 0x18;\n    temp_index_3 = (var_loop_size + 1) * -0x18;\n  }\n  else {\n    temp_index_3 = -0x18;\n    var_loop_size = 0;\n  }\n  output_size = output_size + temp_index_3;\n  temp_index_3 = var_loop_size - temp_index_2;\n  if (-1 < var_start_index + temp_index_2) {\n    var_loop_index = var_start_index + temp_index_2 + 1 + temp_index_3;\n    var_ptr_3 = &var_double_stack_1;\n    do {\n      while (temp_index_3 < 0) {\n        temp_index_3 = temp_index_3 + 1;\n        *(undefined4 *)var_ptr_3 = 0;\n        *(undefined4 *)((int)var_ptr_3 + 4) = 0;\n        var_ptr_3 = var_ptr_3 + 1;\n        if (temp_index_3 == var_loop_index) goto LAB_0800a626;\n      }\n      var_double_2 = __aeabi_i2d(*(undefined4 *)(input_array + temp_index_3 * 4));\n      temp_index_3 = temp_index_3 + 1;\n      *var_ptr_3 = var_double_2;\n      var_ptr_3 = var_ptr_3 + 1;\n    } while (temp_index_3 != var_loop_index);\n  }\nLAB_0800a626:\n  temp_ptr_3 = (undefined4 *)(input + -8);\n  if (-1 < var_start_index) {\n    var_ptr_1 = &var_double_stack_1 + start_index;\n    var_loop_index = var_start_index + start_index;\n    temp_index_3 = temp_index_2;\n    var_ptr_3 = &var_double_stack_3;\n    do {\n      if (temp_index_2 < 0) {\n        var_double_2 = 0;\n      }\n      else {\n        var_double_2 = 0;\n        var_ptr_6 = temp_ptr_3;\n        var_ptr_5 = var_ptr_1;\n        do {\n          var_ptr_4 = var_ptr_6 + 2;\n          var_double_1 = __muldf3(*var_ptr_4,var_ptr_6[3],*(undefined4 *)(var_ptr_5 + -1),\n                            *(undefined4 *)((int)var_ptr_5 + -4));\n          var_double_2 = __aeabi_dadd((int)var_double_2,(int)((ulonglong)var_double_2 >> 0x20),(int)var_double_1,\n                                (int)((ulonglong)var_double_1 >> 0x20));\n          var_ptr_6 = var_ptr_4;\n          var_ptr_5 = var_ptr_5 + -1;\n        } while (var_ptr_4 != temp_ptr_3 + start_index * 2);\n      }\n      temp_index_3 = temp_index_3 + 1;\n      *var_ptr_3 = var_double_2;\n      var_ptr_1 = var_ptr_1 + 1;\n      var_ptr_3 = var_ptr_3 + 1;\n    } while (temp_index_3 != var_loop_index);\n  }\n  local_260[0] = var_output_array + var_start_index + -1;\n  var_loop_index_2 = var_start_index;\n  do {\n    var_loop_index = *(int *)(&var_double_stack_3 + var_loop_index_2);\n    var_double_2 = CONCAT44(*(undefined4 *)((int)&var_double_stack_3 + var_loop_index_2 * 8 + 4),var_loop_index);\n    temp_index_3 = var_loop_index_2;\n    if (0 < var_loop_index_2) {\n      var_ptr_3 = &var_double_stack_3 + var_loop_index_2;\n      temp_ptr_2 = var_output_array;\n      do {\n        temp_double = (undefined4)((ulonglong)var_double_2 >> 0x20);\n        __muldf3((int)var_double_2,temp_double,0,0x3e700000);\n        __aeabi_d2iz();\n        var_double_1 = __aeabi_i2d();\n        temp_result = (undefined4)((ulonglong)var_double_1 >> 0x20);\n        var_double_3 = __muldf3((int)var_double_1,temp_result,0,0x41700000);\n        __subdf3((int)var_double_2,temp_double,(int)var_double_3,(int)((ulonglong)var_double_3 >> 0x20));\n        result = __aeabi_d2iz();\n        var_ptr_1 = var_ptr_3 + -1;\n        temp_double = *(undefined4 *)var_ptr_1;\n        temp_double_2 = *(undefined4 *)((int)var_ptr_3 + -4);\n        *temp_ptr_2 = result;\n        var_double_2 = __aeabi_dadd((int)var_double_1,temp_result,temp_double,temp_double_2);\n        var_loop_index = (int)var_double_2;\n        var_ptr_3 = var_ptr_1;\n        temp_ptr_2 = temp_ptr_2 + 1;\n      } while (var_ptr_1 != &var_double_stack_3);\n    }\n    scalbn((double)CONCAT44(temp_index_3,var_extra_output),var_loop_index);\n    __muldf3();\n    floor((double)CONCAT44(temp_index_3,var_extra_output));\n    var_double_2 = __muldf3();\n    var_double_2 = __subdf3(var_loop_index,temp_extra_output,(int)var_double_2,(int)((ulonglong)var_double_2 >> 0x20));\n    result = __aeabi_d2iz();\n    var_double_1 = __aeabi_i2d();\n    var_double_2 = __subdf3((int)var_double_2,(int)((ulonglong)var_double_2 >> 0x20),(int)var_double_1,\n                      (int)((ulonglong)var_double_1 >> 0x20));\n    temp_double = (undefined4)((ulonglong)var_double_2 >> 0x20);\n    temp_result = (undefined4)var_double_2;\n    if (output_size < 1) {\n      if (output_size == 0) {\n        var_loop_index = (int)var_output_array[temp_index_3 + -1] >> 0x17;\n        goto joined_r0x0800a8b8;\n      }\n      var_loop_index = __aeabi_dcmpge(temp_result,temp_double,0,0x3fe00000);\n      if (var_loop_index != 0) {\n        result = result + 1;\n        if (temp_index_3 < 1) {\n          var_double_2 = __subdf3(0,0x3ff00000,temp_result,temp_double);\n          var_loop_index = 2;\n          goto LAB_0800a7a4;\n        }\n        var_loop_index = 2;\n        goto LAB_0800a8c8;\n      }\n    }\n    else {\n      temp_index_1 = (int)var_output_array[temp_index_3 + -1] >> (0x18U - output_size & 0xff);\n      temp_uint = var_output_array[temp_index_3 + -1] - (temp_index_1 << (0x18U - output_size & 0xff));\n      var_loop_index = (int)temp_uint >> (0x17U - output_size & 0xff);\n      var_output_array[temp_index_3 + -1] = temp_uint;\n      result = result + temp_index_1;\njoined_r0x0800a8b8:\n      if (0 < var_loop_index) {\n        result = result + 1;\n        if (temp_index_3 < 1) {\n          var_bool = false;\n        }\n        else {\nLAB_0800a8c8:\n          if (var_output_array[0] == 0) {\n            var_bool = false;\n            if (temp_index_3 != 1) {\n              temp_ptr_2 = var_output_array;\n              temp_index_1 = 1;\n              do {\n                temp_ptr_2 = temp_ptr_2 + 1;\n                if (*temp_ptr_2 != 0) {\n                  temp_index_4 = temp_index_1 + 1;\n                  temp_uint = *temp_ptr_2;\n                  goto LAB_0800a8e2;\n                }\n                temp_index_1 = temp_index_1 + 1;\n              } while (temp_index_1 != temp_index_3);\n              var_bool = false;\n            }\n          }\n          else {\n            temp_index_4 = 1;\n            temp_index_1 = 0;\n            temp_uint = var_output_array[0];\nLAB_0800a8e2:\n            var_output_array[temp_index_1] = 0x1000000 - temp_uint;\n            if (temp_index_4 < temp_index_3) {\n              temp_uint = var_output_array[temp_index_4];\n              temp_ptr_2 = var_output_array + temp_index_4;\n              while( true ) {\n                temp_ptr_4 = temp_ptr_2 + 1;\n                *temp_ptr_2 = 0xffffff - temp_uint;\n                if (temp_ptr_4 == var_output_array + temp_index_3) break;\n                temp_uint = *temp_ptr_4;\n                temp_ptr_2 = temp_ptr_4;\n              }\n            }\n            var_bool = true;\n          }\n        }\n        if (0 < output_size) {\n          if (output_size == 1) {\n            var_output_array[temp_index_3 + -1] = var_output_array[temp_index_3 + -1] & 0x7fffff;\n          }\n          else if (output_size == 2) {\n            var_output_array[temp_index_3 + -1] = var_output_array[temp_index_3 + -1] & 0x3fffff;\n          }\n        }\n        if (var_loop_index == 2) {\n          var_double_2 = __subdf3(0,0x3ff00000,temp_result,temp_double);\n          if (var_bool) {\n            temp_result = 0;\n            scalbn((double)CONCAT44(temp_index_3,var_extra_output),0);\n            var_double_2 = __subdf3((int)var_double_2,(int)((ulonglong)var_double_2 >> 0x20),temp_result,temp_extra_output_2);\n          }\n        }\n      }\n    }\nLAB_0800a7a4:\n    temp_index_4 = (int)var_double_2;\n    temp_index_1 = __aeabi_dcmpeq(temp_index_4,(int)((ulonglong)var_double_2 >> 0x20),0,0);\n    if (temp_index_1 == 0) {\n      scalbn((double)CONCAT44(temp_index_3,var_extra_output),temp_index_4);\n      temp_index_2 = __aeabi_dcmpge();\n      if (temp_index_2 == 0) {\n        temp_index_1 = temp_index_3;\n        temp_uint = __aeabi_d2iz(temp_index_4,temp_extra_output_4);\n        var_output_array[temp_index_1] = temp_uint;\n        temp_index_3 = temp_index_1;\n      }\n      else {\n        __muldf3(temp_index_4,temp_extra_output_4,0,0x3e700000);\n        temp_uint = __aeabi_d2iz();\n        var_double_2 = __aeabi_i2d();\n        var_double_2 = __muldf3((int)var_double_2,(int)((ulonglong)var_double_2 >> 0x20),0,0x41700000);\n        __subdf3(temp_index_4,temp_extra_output_4,(int)var_double_2,(int)((ulonglong)var_double_2 >> 0x20));\n        temp_index_2 = temp_index_3;\n        temp_result_2 = __aeabi_d2iz();\n        temp_index_1 = temp_index_3 + 1;\n        var_output_array[temp_index_3] = temp_result_2;\n        var_output_array[temp_index_1] = temp_uint;\n        temp_index_3 = temp_index_2;\n      }\n      goto LAB_0800a9f6;\n    }\n    temp_index_1 = temp_index_3 + -1;\n    if (var_start_index <= temp_index_1) {\n      temp_uint = 0;\n      temp_ptr_2 = var_output_array + temp_index_3 + 0x3fffffff;\n      do {\n        temp_ptr_4 = temp_ptr_2 + -1;\n        temp_uint = temp_uint | *temp_ptr_2;\n        temp_ptr_2 = temp_ptr_4;\n      } while (temp_ptr_4 != local_260[0]);\n      if (temp_uint != 0) break;\n    }\n    if (var_output_array[var_start_index + -1] == 0) {\n      var_loop_index_2 = 1;\n      temp_ptr_ptr = local_260 + var_start_index;\n      do {\n        temp_ptr_2 = *temp_ptr_ptr;\n        var_loop_index_2 = var_loop_index_2 + 1;\n        temp_ptr_ptr = temp_ptr_ptr + -1;\n      } while (temp_ptr_2 == (uint *)0x0);\n      var_loop_index_2 = temp_index_3 + var_loop_index_2;\n    }\n    else {\n      var_loop_index_2 = temp_index_3 + 1;\n    }\n    var_loop_index = temp_index_3 + 1;\n    var_ptr_6 = (undefined4 *)(input_array + (var_loop_index + var_loop_size + 0x3fffffff) * 4);\n    var_ptr_3 = &var_double_stack_1 + temp_index_3 + start_index;\n    var_ptr_1 = &var_double_stack_3 + var_loop_index;\n    do {\n      var_ptr_6 = var_ptr_6 + 1;\n      var_double_2 = __aeabi_i2d(*var_ptr_6);\n      *var_ptr_3 = var_double_2;\n      var_ptr_5 = var_ptr_3 + 1;\n      if (temp_index_2 < 0) {\n        var_double_1 = 0;\n      }\n      else {\n        var_double_1 = 0;\n        var_ptr_4 = temp_ptr_3;\n        while( true ) {\n          var_ptr_3 = var_ptr_3 + -1;\n          temp_ptr = var_ptr_4 + 2;\n          var_double_2 = __muldf3((int)var_double_2,(int)((ulonglong)var_double_2 >> 0x20),*temp_ptr,var_ptr_4[3]);\n          var_double_1 = __aeabi_dadd((int)var_double_1,(int)((ulonglong)var_double_1 >> 0x20),(int)var_double_2,\n                                (int)((ulonglong)var_double_2 >> 0x20));\n          if (temp_ptr == temp_ptr_3 + start_index * 2) break;\n          var_double_2 = *var_ptr_3;\n          var_ptr_4 = temp_ptr;\n        }\n      }\n      *var_ptr_1 = var_double_1;\n      var_loop_index = var_loop_index + 1;\n      var_ptr_3 = var_ptr_5;\n      var_ptr_1 = var_ptr_1 + 1;\n    } while (var_loop_index <= var_loop_index_2);\n  } while( true );\n  if (var_output_array[temp_index_1] == 0) {\n    temp_ptr_2 = var_output_array + temp_index_3 + 0x3ffffffe;\n    do {\n      temp_uint = *temp_ptr_2;\n      temp_index_1 = temp_index_1 + -1;\n      temp_ptr_2 = temp_ptr_2 + -1;\n    } while (temp_uint == 0);\n  }\nLAB_0800a9f6:\n  temp_result = 0;\n  scalbn((double)CONCAT44(temp_index_3,var_extra_output),0);\n  var_double_2 = CONCAT44(temp_extra_output_3,temp_result);\n  if (temp_index_1 < 0) {\n    if (2 < operation_type) {\n      if (operation_type == 3) {\n        var_ptr_3 = (undefined8 *)&var_int_1;\n        var_double_2 = 0;\nLAB_0800abe4:\n        if (var_loop_index == 0) {\n          temp_result = *(undefined4 *)(var_ptr_3 + 1);\n          temp_double = *(undefined4 *)((int)var_ptr_3 + 0xc);\n          *local_260[1] = var_int_1;\n          *(undefined4 *)((int)local_260[1] + 4) = var_int_2;\n          *(undefined8 *)((int)local_260[1] + 0x10) = var_double_2;\n          *(undefined4 *)((int)local_260[1] + 8) = temp_result;\n          *(undefined4 *)((int)local_260[1] + 0xc) = temp_double;\n          return result & 7;\n        }\n        temp_index_2 = *(int *)((int)var_ptr_3 + 4);\n        *(int *)((int)local_260[1] + 0x10) = (int)var_double_2;\n        var_start_index = *(int *)((int)var_ptr_3 + 0xc);\n        *(undefined4 *)((int)local_260[1] + 8) = *(undefined4 *)(var_ptr_3 + 1);\n        *(int *)((int)local_260[1] + 0x14) = (int)((ulonglong)var_double_2 >> 0x20) + -0x80000000;\n        temp_result = *(undefined4 *)var_ptr_3;\n        *(int *)((int)local_260[1] + 4) = temp_index_2 + -0x80000000;\n        *(int *)((int)local_260[1] + 0xc) = var_start_index + -0x80000000;\n        *local_260[1] = temp_result;\n        return result & 7;\n      }\n      goto LAB_0800ab0e;\n    }\n    if (operation_type < 1) {\n      if (operation_type != 0) goto LAB_0800ab0e;\n      var_double_2 = 0;\nLAB_0800aafc:\n      temp_index_2 = (int)((ulonglong)var_double_2 >> 0x20);\n      if (var_loop_index != 0) {\n        temp_index_2 = temp_index_2 + -0x80000000;\n      }\n      *local_260[1] = (int)var_double_2;\n      *(int *)((int)local_260[1] + 4) = temp_index_2;\nLAB_0800ab0e:\n      return result & 7;\n    }\n    var_double_2 = 0;\n  }\n  else {\n    var_ptr_1 = &var_double_stack_3 + temp_index_1;\n    temp_ptr_2 = var_output_array + temp_index_1 + 1;\n    var_ptr_3 = &var_double_stack_3 + temp_index_1 + 1;\n    do {\n      temp_result = (undefined4)((ulonglong)var_double_2 >> 0x20);\n      temp_ptr_2 = temp_ptr_2 + -1;\n      var_double_1 = __aeabi_i2d(*temp_ptr_2);\n      var_double_1 = __muldf3((int)var_double_1,(int)((ulonglong)var_double_1 >> 0x20),(int)var_double_2,temp_result);\n      var_ptr_3 = var_ptr_3 + -1;\n      *var_ptr_3 = var_double_1;\n      var_double_2 = __muldf3((int)var_double_2,temp_result,0,0x3e700000);\n    } while (temp_ptr_2 != var_output_array);\n    var_ptr_3 = (undefined8 *)&var_int_1;\n    temp_index_2 = 0;\n    do {\n      if (var_start_index < 0) {\n        var_double_2 = 0;\n      }\n      else {\n        temp_result = 0x40000000;\n        temp_double = 0x3ff921fb;\n        var_double_2 = 0;\n        temp_index_3 = 0;\n        var_ptr_5 = var_ptr_1;\n        temp_ptr_3 = &DAT_0800c028;\n        while( true ) {\n          var_double_1 = __muldf3(*(undefined4 *)var_ptr_5,*(undefined4 *)((int)var_ptr_5 + 4),temp_result,temp_double);\n          var_double_2 = __aeabi_dadd((int)var_double_2,(int)((ulonglong)var_double_2 >> 0x20),(int)var_double_1,\n                                (int)((ulonglong)var_double_1 >> 0x20));\n          temp_index_3 = temp_index_3 + 1;\n          if ((var_start_index < temp_index_3) || (temp_index_2 < temp_index_3)) break;\n          temp_result = *temp_ptr_3;\n          temp_double = temp_ptr_3[1];\n          var_ptr_5 = var_ptr_5 + 1;\n          temp_ptr_3 = temp_ptr_3 + 2;\n        }\n      }\n      var_bool = temp_index_2 != temp_index_1;\n      var_ptr_3[temp_index_2] = var_double_2;\n      var_ptr_1 = var_ptr_1 + -1;\n      temp_index_2 = temp_index_2 + 1;\n    } while (var_bool);\n    if (2 < operation_type) {\n      if (operation_type == 3) {\n        if (temp_index_1 != 0) {\n          var_ptr_1 = var_ptr_3 + temp_index_1;\n          var_double_2 = *var_ptr_1;\n          do {\n            temp_double = (undefined4)((ulonglong)var_double_2 >> 0x20);\n            temp_result = (undefined4)var_double_2;\n            temp_double_2 = *(undefined4 *)(var_ptr_1 + -1);\n            temp_double_3 = *(undefined4 *)((int)var_ptr_1 + -4);\n            var_double_2 = __aeabi_dadd(temp_result,temp_double,temp_double_2,temp_double_3);\n            var_double_1 = __subdf3(temp_double_2,temp_double_3,(int)var_double_2,(int)((ulonglong)var_double_2 >> 0x20));\n            var_double_1 = __aeabi_dadd((int)var_double_1,(int)((ulonglong)var_double_1 >> 0x20),temp_result,temp_double);\n            *var_ptr_1 = var_double_1;\n            var_ptr_1 = var_ptr_1 + -1;\n            *var_ptr_1 = var_double_2;\n          } while (var_ptr_3 != var_ptr_1);\n          if (1 < temp_index_1) {\n            var_ptr_5 = var_ptr_3 + temp_index_1;\n            var_double_2 = *var_ptr_5;\n            var_ptr_1 = var_ptr_5;\n            do {\n              temp_double = (undefined4)((ulonglong)var_double_2 >> 0x20);\n              temp_result = (undefined4)var_double_2;\n              temp_double_2 = *(undefined4 *)(var_ptr_1 + -1);\n              temp_double_3 = *(undefined4 *)((int)var_ptr_1 + -4);\n              var_double_2 = __aeabi_dadd(temp_result,temp_double,temp_double_2,temp_double_3);\n              var_double_1 = __subdf3(temp_double_2,temp_double_3,(int)var_double_2,(int)((ulonglong)var_double_2 >> 0x20));\n              var_double_1 = __aeabi_dadd((int)var_double_1,(int)((ulonglong)var_double_1 >> 0x20),temp_result,temp_double);\n              *var_ptr_1 = var_double_1;\n              var_ptr_1 = var_ptr_1 + -1;\n              *var_ptr_1 = var_double_2;\n            } while (&var_double_stack_2 != var_ptr_1);\n            var_double_2 = 0;\n            var_ptr_2 = var_ptr_3 + 2;\n            var_ptr_1 = var_ptr_5 + 1;\n            do {\n              var_ptr_5 = var_ptr_1 + -1;\n              var_double_2 = __aeabi_dadd((int)var_double_2,(int)((ulonglong)var_double_2 >> 0x20),\n                                    *(undefined4 *)var_ptr_5,*(undefined4 *)((int)var_ptr_1 + -4));\n              var_ptr_1 = var_ptr_5;\n            } while (var_ptr_2 != var_ptr_5);\n            goto LAB_0800abe4;\n          }\n        }\n        var_double_2 = 0;\n        goto LAB_0800abe4;\n      }\n      goto LAB_0800ab0e;\n    }\n    if (operation_type < 1) {\n      if (operation_type != 0) goto LAB_0800ab0e;\n      var_double_2 = 0;\n      var_ptr_1 = var_ptr_3 + temp_index_1 + 1;\n      do {\n        var_ptr_5 = var_ptr_1 + -1;\n        var_double_2 = __aeabi_dadd((int)var_double_2,(int)((ulonglong)var_double_2 >> 0x20),*(undefined4 *)var_ptr_5,\n                              *(undefined4 *)((int)var_ptr_1 + -4));\n        var_ptr_1 = var_ptr_5;\n      } while (var_ptr_3 != var_ptr_5);\n      goto LAB_0800aafc;\n    }\n    var_double_2 = 0;\n    var_ptr_1 = var_ptr_3 + temp_index_1 + 1;\n    do {\n      var_ptr_5 = var_ptr_1 + -1;\n      var_double_2 = __aeabi_dadd((int)var_double_2,(int)((ulonglong)var_double_2 >> 0x20),*(undefined4 *)var_ptr_5,\n                            *(undefined4 *)((int)var_ptr_1 + -4));\n      var_ptr_1 = var_ptr_5;\n    } while (var_ptr_3 != var_ptr_5);\n  }\n  temp_index_2 = (int)((ulonglong)var_double_2 >> 0x20);\n  temp_result = (undefined4)var_double_2;\n  if (var_loop_index == 0) {\n    *(undefined8 *)local_260[1] = var_double_2;\n    var_double_2 = __subdf3(var_int_1,var_int_2,temp_result,temp_index_2);\n    if (temp_index_1 < 1) goto LAB_0800ad26;\nLAB_0800ad04:\n    temp_index_2 = 1;\n    var_ptr_3 = (undefined8 *)&var_int_1;\n    do {\n      var_double_2 = __aeabi_dadd((int)var_double_2,(int)((ulonglong)var_double_2 >> 0x20),\n                            *(undefined4 *)(var_ptr_3 + 1),*(undefined4 *)((int)var_ptr_3 + 0xc));\n      temp_index_2 = temp_index_2 + 1;\n      var_ptr_3 = var_ptr_3 + 1;\n    } while (temp_index_2 <= temp_index_1);\n    if (var_loop_index == 0) goto LAB_0800ad26;\n  }\n  else {\n    *local_260[1] = temp_result;\n    *(int *)((int)local_260[1] + 4) = temp_index_2 + -0x80000000;\n    var_double_2 = __subdf3(var_int_1,var_int_2,temp_result,temp_index_2);\n    if (0 < temp_index_1) goto LAB_0800ad04;\n  }\n  var_double_2 = CONCAT44((int)((ulonglong)var_double_2 >> 0x20) + -0x80000000,(int)var_double_2);\nLAB_0800ad26:\n  *(undefined8 *)((int)local_260[1] + 8) = var_double_2;\n  return result & 7;\n}\n\n",
            "renaming": {
                "FUN_0800a5a0": "reverse_code_0800a5a0",
                "param_1": "input",
                "param_2": "output_array",
                "param_3": "output_size",
                "param_4": "start_index",
                "param_5": "operation_type",
                "param_6": "input_array",
                "puVar1": "temp_ptr",
                "uVar2": "result",
                "uVar3": "temp_result",
                "uVar4": "temp_result_2",
                "extraout_r1": "temp_extra_output",
                "iVar5": "temp_index_1",
                "puVar6": "temp_ptr_2",
                "extraout_r1_00": "temp_extra_output_2",
                "extraout_r1_01": "temp_extra_output_3",
                "extraout_r1_02": "temp_extra_output_4",
                "uVar7": "temp_double",
                "ppuVar8": "temp_ptr_ptr",
                "iVar9": "temp_index_2",
                "iVar10": "temp_index_3",
                "puVar11": "temp_ptr_3",
                "uVar12": "temp_double_2",
                "uVar13": "temp_uint",
                "puVar14": "temp_ptr_4",
                "iVar15": "temp_index_4",
                "iVar16": "var_start_index",
                "iVar23": "var_loop_index",
                "puVar17": "var_ptr_1",
                "puVar18": "var_ptr_2",
                "puVar19": "var_ptr_3",
                "puVar20": "var_ptr_4",
                "puVar21": "var_ptr_5",
                "puVar24": "var_ptr_6",
                "bVar25": "var_bool",
                "uVar26": "var_double_1",
                "uVar27": "var_double_2",
                "uVar28": "var_double_3",
                "in_stack_fffffd78": "var_extra_output",
                "local_280": "var_loop_index_2",
                "local_26c": "var_loop_size",
                "uStack_208": "var_double_stack_1",
                "local_168": "var_int_1",
                "local_164": "var_int_2",
                "local_160": "var_double_stack_2",
                "uStack_c8": "var_double_stack_3",
                "local_258": "var_output_array",
                "uVar22": "temp_double_3"
            },
            "calling": [
                "__ieee754_rem_pio2"
            ],
            "called": [
                "__muldf3",
                "scalbn",
                "__aeabi_dcmpge",
                "__aeabi_dadd",
                "__aeabi_dcmpeq",
                "__aeabi_i2d",
                "__aeabi_d2iz",
                "__subdf3",
                "floor"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800adf0": {
            "entrypoint": "0x0800adf0",
            "current_name": "calculate_improved_0800adf0",
            "code": "\nundefined4\ncalculate_improved_0800adf0(undefined4 result,uint input_1,undefined4 input_2,undefined4 input_3,int is_reversed)\n\n{\n  int temp_1;\n  undefined4 temp_2;\n  undefined4 temp_3;\n  undefined4 temp_4;\n  undefined4 temp_5;\n  undefined4 temp_6;\n  undefined8 temp_7;\n  undefined8 temp_8;\n  \n  if (((input_1 & 0x7fffffff) < 0x3e400000) && (temp_1 = __aeabi_d2iz(), temp_1 == 0)) {\n    return result;\n  }\n  temp_7 = __muldf3(result,input_1,result);\n  temp_4 = (undefined4)((ulonglong)temp_7 >> 0x20);\n  temp_3 = (undefined4)temp_7;\n  temp_7 = __muldf3(result,input_1,temp_3,temp_4);\n  temp_5 = (undefined4)((ulonglong)temp_7 >> 0x20);\n  temp_2 = (undefined4)temp_7;\n  temp_7 = __muldf3(temp_3,temp_4,0x5acfd57c,0x3de5d93a);\n  temp_7 = __subdf3((int)temp_7,(int)((ulonglong)temp_7 >> 0x20),0x8a2b9ceb,0x3e5ae5e6);\n  temp_7 = __muldf3((int)temp_7,(int)((ulonglong)temp_7 >> 0x20),temp_3,temp_4);\n  temp_7 = __aeabi_dadd((int)temp_7,(int)((ulonglong)temp_7 >> 0x20),0x57b1fe7d,0x3ec71de3);\n  temp_7 = __muldf3((int)temp_7,(int)((ulonglong)temp_7 >> 0x20),temp_3,temp_4);\n  temp_7 = __subdf3((int)temp_7,(int)((ulonglong)temp_7 >> 0x20),0x19c161d5,0x3f2a01a0);\n  temp_7 = __muldf3((int)temp_7,(int)((ulonglong)temp_7 >> 0x20),temp_3,temp_4);\n  temp_7 = __aeabi_dadd((int)temp_7,(int)((ulonglong)temp_7 >> 0x20),0x1110f8a6,0x3f811111);\n  temp_6 = (undefined4)((ulonglong)temp_7 >> 0x20);\n  if (is_reversed != 0) {\n    temp_8 = __muldf3(input_2,input_3,0,0x3fe00000);\n    temp_7 = __muldf3(temp_2,temp_5,(int)temp_7,temp_6);\n    temp_7 = __subdf3((int)temp_8,(int)((ulonglong)temp_8 >> 0x20),(int)temp_7,\n                     (int)((ulonglong)temp_7 >> 0x20));\n    temp_7 = __muldf3((int)temp_7,(int)((ulonglong)temp_7 >> 0x20),temp_3,temp_4);\n    temp_7 = __subdf3((int)temp_7,(int)((ulonglong)temp_7 >> 0x20),input_2,input_3);\n    temp_8 = __muldf3(temp_2,temp_5,0x55555549,0x3fc55555);\n    temp_7 = __aeabi_dadd((int)temp_7,(int)((ulonglong)temp_7 >> 0x20),(int)temp_8,\n                         (int)((ulonglong)temp_8 >> 0x20));\n    temp_3 = __subdf3(result,input_1,(int)temp_7,(int)((ulonglong)temp_7 >> 0x20));\n    return temp_3;\n  }\n  temp_7 = __muldf3(temp_3,temp_4,(int)temp_7,temp_6);\n  temp_7 = __subdf3((int)temp_7,(int)((ulonglong)temp_7 >> 0x20),0x55555549,0x3fc55555);\n  temp_7 = __muldf3((int)temp_7,(int)((ulonglong)temp_7 >> 0x20),temp_2,temp_5);\n  temp_3 = __aeabi_dadd((int)temp_7,(int)((ulonglong)temp_7 >> 0x20),result,input_1);\n  return temp_3;\n}\n\n",
            "renaming": {
                "FUN_0800adf0": "calculate_improved_0800adf0",
                "param_1": "result",
                "param_2": "input_1",
                "param_3": "input_2",
                "param_4": "input_3",
                "param_5": "is_reversed",
                "iVar1": "temp_1",
                "uVar2": "temp_2",
                "uVar3": "temp_3",
                "uVar4": "temp_4",
                "uVar5": "temp_5",
                "uVar6": "temp_6",
                "uVar7": "temp_7",
                "uVar8": "temp_8"
            },
            "calling": [
                "sin",
                "cos"
            ],
            "called": [
                "__muldf3",
                "__aeabi_dadd",
                "__aeabi_d2iz",
                "__subdf3"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800af78": {
            "entrypoint": "0x0800af78",
            "current_name": "calculate_exponential_0800af78",
            "code": "\ndouble calculate_exponential_0800af78(double input_value)\n\n{\n  int integer_part;\n  undefined4 result1;\n  undefined4 result2;\n  uint sign_and_fraction_part;\n  undefined4 result3;\n  undefined4 result4;\n  undefined4 additional_result2;\n  uint abs_sign_and_fraction_part;\n  int case_selector;\n  double final_result;\n  double temp_result3;\n  double additional_result;\n  undefined8 temp_result1;\n  undefined8 temp_result2;\n  undefined4 additional_value;\n  uint temp_result4;\n  \n  abs_sign_and_fraction_part = sign_and_fraction_part & 0x7fffffff;\n  if (abs_sign_and_fraction_part < 0x44100000) {\n    if (abs_sign_and_fraction_part < 0x3fdc0000) {\n      temp_result4 = sign_and_fraction_part;\n      if (abs_sign_and_fraction_part < 0x3e200000) {\n        temp_result1 = __aeabi_dadd(integer_part,sign_and_fraction_part,0x8800759c,0x7e37e43c);\n        case_selector = __aeabi_dcmpgt((int)temp_result1,(int)((ulonglong)temp_result1 >> 0x20),0,0x3ff00000);\n        if (case_selector != 0) {\n          return additional_result;\n        }\n      }\n      case_selector = -1;\n    }\n    else {\n      fabs((double)CONCAT44(sign_and_fraction_part,additional_value));\n      if (abs_sign_and_fraction_part < 0x3ff30000) {\n        if (abs_sign_and_fraction_part < 0x3fe60000) {\n          temp_result1 = __aeabi_dadd();\n          temp_result1 = __subdf3((int)temp_result1,(int)((ulonglong)temp_result1 >> 0x20),0,0x3ff00000);\n          temp_result2 = __aeabi_dadd(integer_part,additional_result2,0,0x40000000);\n          temp_result1 = __divdf3((int)temp_result1,(int)((ulonglong)temp_result1 >> 0x20),(int)temp_result2,\n                           (int)((ulonglong)temp_result2 >> 0x20));\n          temp_result4 = (uint)((ulonglong)temp_result1 >> 0x20);\n          integer_part = (int)temp_result1;\n          case_selector = 0;\n        }\n        else {\n          temp_result1 = __subdf3();\n          temp_result2 = __aeabi_dadd(integer_part,additional_result2,0,0x3ff00000);\n          temp_result1 = __divdf3((int)temp_result1,(int)((ulonglong)temp_result1 >> 0x20),(int)temp_result2,\n                           (int)((ulonglong)temp_result2 >> 0x20));\n          temp_result4 = (uint)((ulonglong)temp_result1 >> 0x20);\n          integer_part = (int)temp_result1;\n          case_selector = 1;\n        }\n      }\n      else if (abs_sign_and_fraction_part < 0x40038000) {\n        temp_result1 = __subdf3();\n        temp_result2 = __muldf3(integer_part,additional_result2,0,0x3ff80000);\n        temp_result2 = __aeabi_dadd((int)temp_result2,(int)((ulonglong)temp_result2 >> 0x20),0,0x3ff00000);\n        temp_result1 = __divdf3((int)temp_result1,(int)((ulonglong)temp_result1 >> 0x20),(int)temp_result2,\n                         (int)((ulonglong)temp_result2 >> 0x20));\n        temp_result4 = (uint)((ulonglong)temp_result1 >> 0x20);\n        integer_part = (int)temp_result1;\n        case_selector = 2;\n      }\n      else {\n        temp_result1 = __divdf3(0,0xbff00000,integer_part,additional_result2);\n        temp_result4 = (uint)((ulonglong)temp_result1 >> 0x20);\n        integer_part = (int)temp_result1;\n        case_selector = 3;\n      }\n    }\n    temp_result1 = __muldf3(integer_part,temp_result4,integer_part);\n    result3 = (undefined4)((ulonglong)temp_result1 >> 0x20);\n    result1 = (undefined4)temp_result1;\n    temp_result1 = __muldf3(result1,result3,result1,result3);\n    result4 = (undefined4)((ulonglong)temp_result1 >> 0x20);\n    result2 = (undefined4)temp_result1;\n    temp_result1 = __muldf3(result2,result4,0xe322da11,0x3f90ad3a);\n    temp_result1 = __aeabi_dadd((int)temp_result1,(int)((ulonglong)temp_result1 >> 0x20),0x24760deb,0x3fa97b4b);\n    temp_result1 = __muldf3((int)temp_result1,(int)((ulonglong)temp_result1 >> 0x20),result2,result4);\n    temp_result1 = __aeabi_dadd((int)temp_result1,(int)((ulonglong)temp_result1 >> 0x20),0xa0d03d51,0x3fb10d66);\n    temp_result1 = __muldf3((int)temp_result1,(int)((ulonglong)temp_result1 >> 0x20),result2,result4);\n    temp_result1 = __aeabi_dadd((int)temp_result1,(int)((ulonglong)temp_result1 >> 0x20),0xc54c206e,0x3fb745cd);\n    temp_result1 = __muldf3((int)temp_result1,(int)((ulonglong)temp_result1 >> 0x20),result2,result4);\n    temp_result1 = __aeabi_dadd((int)temp_result1,(int)((ulonglong)temp_result1 >> 0x20),0x920083ff,0x3fc24924);\n    temp_result1 = __muldf3((int)temp_result1,(int)((ulonglong)temp_result1 >> 0x20),result2,result4);\n    temp_result1 = __aeabi_dadd((int)temp_result1,(int)((ulonglong)temp_result1 >> 0x20),0x5555550d,0x3fd55555);\n    temp_result1 = __muldf3((int)temp_result1,(int)((ulonglong)temp_result1 >> 0x20),result1,result3);\n    result1 = (undefined4)((ulonglong)temp_result1 >> 0x20);\n    temp_result2 = __muldf3(result2,result4,0x2c6a6c2f,0xbfa2b444);\n    temp_result2 = __subdf3((int)temp_result2,(int)((ulonglong)temp_result2 >> 0x20),0x52defd9a,0x3fadde2d);\n    temp_result2 = __muldf3((int)temp_result2,(int)((ulonglong)temp_result2 >> 0x20),result2,result4);\n    temp_result2 = __subdf3((int)temp_result2,(int)((ulonglong)temp_result2 >> 0x20),0xaf749a6d,0x3fb3b0f2);\n    temp_result2 = __muldf3((int)temp_result2,(int)((ulonglong)temp_result2 >> 0x20),result2,result4);\n    temp_result2 = __subdf3((int)temp_result2,(int)((ulonglong)temp_result2 >> 0x20),0xfe231671,0x3fbc71c6);\n    temp_result2 = __muldf3((int)temp_result2,(int)((ulonglong)temp_result2 >> 0x20),result2,result4);\n    temp_result2 = __subdf3((int)temp_result2,(int)((ulonglong)temp_result2 >> 0x20),0x9998ebc4,0x3fc99999);\n    temp_result2 = __muldf3((int)temp_result2,(int)((ulonglong)temp_result2 >> 0x20),result2,result4);\n    result2 = (undefined4)((ulonglong)temp_result2 >> 0x20);\n    if (case_selector == -1) {\n      temp_result1 = __aeabi_dadd((int)temp_result1,result1,(int)temp_result2,result2);\n      temp_result1 = __muldf3((int)temp_result1,(int)((ulonglong)temp_result1 >> 0x20),integer_part,temp_result4);\n      temp_result3 = (double)__subdf3(integer_part,temp_result4,(int)temp_result1,(int)((ulonglong)temp_result1 >> 0x20));\n      return temp_result3;\n    }\n    temp_result1 = __aeabi_dadd((int)temp_result1,result1,(int)temp_result2,result2);\n    temp_result1 = __muldf3((int)temp_result1,(int)((ulonglong)temp_result1 >> 0x20),integer_part,temp_result4);\n    temp_result1 = __subdf3((int)temp_result1,(int)((ulonglong)temp_result1 >> 0x20),*(undefined4 *)(&atanlo + case_selector * 8)\n                     ,*(undefined4 *)(&UNK_0800c094 + case_selector * 8));\n    temp_result1 = __subdf3((int)temp_result1,(int)((ulonglong)temp_result1 >> 0x20),integer_part,temp_result4);\n    final_result = (double)__subdf3(*(undefined4 *)(&atanhi + case_selector * 8),\n                             *(undefined4 *)(&UNK_0800c074 + case_selector * 8),(int)temp_result1,\n                             (int)((ulonglong)temp_result1 >> 0x20));\n    if ((int)sign_and_fraction_part < 0) {\n      return final_result;\n    }\n  }\n  else if ((0x7ff00000 < abs_sign_and_fraction_part) || ((abs_sign_and_fraction_part == 0x7ff00000 && (integer_part != 0)))) {\n    temp_result3 = (double)__aeabi_dadd();\n    return temp_result3;\n  }\n  return final_result;\n}\n\n",
            "renaming": {
                "FUN_0800af78": "calculate_exponential_0800af78",
                "__x": "input_value",
                "in_r0": "integer_part",
                "in_r1": "sign_and_fraction_part",
                "uVar1": "result1",
                "uVar2": "result2",
                "uVar3": "result3",
                "uVar4": "result4",
                "uVar5": "abs_sign_and_fraction_part",
                "uVar8": "temp_result1",
                "uVar9": "temp_result2",
                "iVar6": "case_selector",
                "in_d0": "final_result",
                "dVar7": "temp_result3",
                "extraout_d0": "additional_result",
                "extraout_r1": "additional_result2",
                "in_stack_ffffffd0": "additional_value",
                "uVar10": "temp_result4"
            },
            "calling": [
                "__ieee754_atan2"
            ],
            "called": [
                "__muldf3",
                "fabs",
                "__aeabi_dadd",
                "__divdf3",
                "__subdf3",
                "__aeabi_dcmpgt"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800b2cc": {
            "entrypoint": "0x0800b2cc",
            "current_name": "calculate_0800b2cc",
            "code": "\ndouble calculate_0800b2cc(double input)\n\n{\n  double output;\n  \n  return output;\n}\n\n",
            "renaming": {
                "FUN_0800b2cc": "calculate_0800b2cc",
                "__x": "input",
                "in_d0": "output"
            },
            "calling": [
                "__ieee754_rem_pio2",
                "__ieee754_atan2",
                "atan"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800b2d4": {
            "entrypoint": "0x0800b2d4",
            "current_name": "calculate_sign_bit_offset_0800b2d4",
            "code": "\nint calculateSignBitOffset_0800b2d4(double inputValue)\n\n{\n  uint mask;\n  \n  return (mask | 0x80000000) + 0x100000 >> 0x1f;\n}\n\n",
            "renaming": {
                "FUN_0800b2d4": "calculate_sign_bit_offset_0800b2d4",
                "__value": "inputValue",
                "in_r1": "mask"
            },
            "calling": [
                "hypot"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800b2e0": {
            "entrypoint": "0x0800b2e0",
            "current_name": "handle_exception_0800b2e0",
            "code": "\nint handle_exception_0800b2e0(exception *exception_ptr)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800b2e0": "handle_exception_0800b2e0",
                "__exc": "exception_ptr"
            },
            "calling": [
                "sqrt",
                "hypot"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800b2e8": {
            "entrypoint": "0x0800b2e8",
            "current_name": "calculate_exponential_0800b2e8",
            "code": "\ndouble calculateExponential_0800b2e8(double base,int exponent)\n\n{\n  uint bitwiseShiftedBase;\n  int shiftedExponent;\n  uint shiftedBase;\n  int combinedShift;\n  uint shiftedExponent;\n  double result;\n  double tempResult;\n  double finalResult;\n  undefined8 combinedValues;\n  \n  combinedValues = CONCAT44(bitwiseShiftedBase,exponent);\n  shiftedBase = (bitwiseShiftedBase << 1) >> 0x15;\n  if (shiftedBase == 0) {\n    if ((exponent | bitwiseShiftedBase & 0x7fffffff) == 0) {\n      return result;\n    }\n    combinedValues = __muldf3(exponent,bitwiseShiftedBase,0,0x43500000);\n    if (shiftedExponent < -50000) goto LAB_0800b34a;\n    shiftedBase = ((uint)((int)((ulonglong)combinedValues >> 0x20) << 1) >> 0x15) - 0x36;\n    result = tempResult;\n  }\n  else if (shiftedBase == 0x7ff) {\n    finalResult = (double)__aeabi_dadd(exponent,bitwiseShiftedBase,exponent);\n    return finalResult;\n  }\n  shiftedExponent = (uint)((ulonglong)combinedValues >> 0x20);\n  combinedShift = shiftedBase + shiftedExponent;\n  if (combinedShift < 0x7ff) {\n    if (0 < combinedShift) {\n      return result;\n    }\n    if (combinedShift + 0x35 < 0 == SCARRY4(combinedShift,0x35)) {\n      finalResult = (double)__muldf3((int)combinedValues,shiftedExponent & 0x800fffff | (combinedShift + 0x36) * 0x100000,0,\n                               0x3c900000);\n      return finalResult;\n    }\n    if (shiftedExponent < 0xc351) {\n      combinedValues = CONCAT44(shiftedExponent & 0x80000000 | 0x1a56e1f,0xc2f8f359);\nLAB_0800b34a:\n      finalResult = (double)__muldf3((int)combinedValues,(int)((ulonglong)combinedValues >> 0x20),0xc2f8f359,0x1a56e1f);\n      return finalResult;\n    }\n  }\n  finalResult = (double)__muldf3(0x8800759c,shiftedExponent & 0x80000000 | 0x7e37e43c,0x8800759c,0x7e37e43c);\n  return finalResult;\n}\n\n",
            "renaming": {
                "FUN_0800b2e8": "calculate_exponential_0800b2e8",
                "__x": "base",
                "__n": "exponent",
                "in_r1": "bitwiseShiftedBase",
                "in_r2": "shiftedExponent",
                "uVar1": "shiftedBase",
                "iVar2": "combinedShift",
                "uVar3": "shiftedExponent",
                "in_d0": "result",
                "extraout_d0": "tempResult",
                "dVar4": "finalResult",
                "uVar5": "combinedValues"
            },
            "calling": [
                "__kernel_rem_pio2"
            ],
            "called": [
                "__muldf3",
                "__aeabi_dadd"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800b3dc": {
            "entrypoint": "0x0800b3dc",
            "current_name": "get_impure_ptr_0800b3dc",
            "code": "\nundefined4 getImpurePtr_0800b3dc(void)\n\n{\n  return _impure_ptr;\n}\n\n",
            "renaming": {
                "FUN_0800b3dc": "get_impure_ptr_0800b3dc"
            },
            "calling": [
                "sqrt",
                "hypot"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800b3e8": {
            "entrypoint": "0x0800b3e8",
            "current_name": "init_and_execute_preinit_functions_0800b3e8",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0800b3f4) */\n/* WARNING: Removing unreachable block (ram,0x0800b3f6) */\n\nvoid init_and_execute_preinit_functions_0800b3e8(EVP_PKEY_CTX *ctx)\n\n{\n  int iteration_count;\n  code **func_ptr;\n  \n  _init(ctx);\n  iteration_count = 0;\n  func_ptr = (code **)&__preinit_array_end;\n  do {\n    iteration_count = iteration_count + 1;\n    (**func_ptr)();\n    func_ptr = func_ptr + 1;\n  } while (iteration_count != 2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800b3e8": "init_and_execute_preinit_functions_0800b3e8",
                "param_1": "ctx",
                "iVar1": "iteration_count",
                "ppcVar2": "func_ptr"
            },
            "calling": [
                "Reset_Handler"
            ],
            "called": [
                "_init",
                "frame_dummy",
                "register_fini"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800b430": {
            "entrypoint": "0x0800b430",
            "current_name": "memset_0800b430",
            "code": "\nvoid * memset_0800b430(void *dest,int ch,size_t count)\n\n{\n  uint temp;\n  uint *dst;\n  uint *p;\n  uint *q;\n  uint uVar5;\n  bool is_finished;\n  \n  dst = (uint *)dest;\n  if (((uint)dest & 3) != 0) {\n    uVar5 = count - 1;\n    p = (uint *)dest;\n    if (count == 0) {\n      return dest;\n    }\n    while( true ) {\n      dst = (uint *)((int)p + 1);\n      *(char *)p = (char)ch;\n      count = uVar5;\n      if (((uint)dst & 3) == 0) break;\n      is_finished = uVar5 == 0;\n      uVar5 = uVar5 - 1;\n      p = dst;\n      if (is_finished) {\n        return dest;\n      }\n    }\n  }\n  if (3 < count) {\n    uVar5 = ch & 0xffU | (ch & 0xffU) << 8;\n    uVar5 = uVar5 | uVar5 << 0x10;\n    if (0xf < count) {\n      p = dst + 4;\n      do {\n        p[-4] = uVar5;\n        p[-3] = uVar5;\n        p[-2] = uVar5;\n        p[-1] = uVar5;\n        p = p + 4;\n      } while (p != (uint *)((int)dst + (count - 0x10 & 0xfffffff0) + 0x20));\n      temp = count & 0xc;\n      dst = dst + ((count - 0x10 >> 4) + 1) * 4;\n      count = count & 0xf;\n      if (temp == 0) goto joined_r0x0800b4a8;\n    }\n    p = (uint *)((count - 4 & 0xfffffffc) + 4 + (int)dst);\n    do {\n      q = dst + 1;\n      *dst = uVar5;\n      dst = q;\n    } while (p != q);\n    count = count & 3;\n    dst = p;\n  }\njoined_r0x0800b4a8:\n  if (count != 0) {\n    p = dst;\n    do {\n      q = (uint *)((int)p + 1);\n      *(char *)p = (char)ch;\n      p = q;\n    } while ((uint *)(count + (int)dst) != q);\n  }\n  return dest;\n}\n\n",
            "renaming": {
                "FUN_0800b430": "memset_0800b430",
                "__s": "dest",
                "__c": "ch",
                "__n": "count",
                "uVar1": "temp",
                "puVar2": "dst",
                "puVar3": "p",
                "puVar4": "q",
                "bVar6": "is_finished"
            },
            "calling": [
                "gc_execute_line",
                "mc_go_home",
                "eeprom_init",
                "grbl_main",
                "plan_init",
                "debounce_init",
                "gc_init",
                "settings_read_coord_data",
                "homing_cycle",
                "st_reset"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800b4d0": {
            "entrypoint": "0x0800b4d0",
            "current_name": "FUNC_0800b4d0",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0800b4d4) */\n\nvoid FUNC_0800b4d0(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800b4d0": "FUNC_0800b4d0"
            },
            "calling": [
                "__libc_init_array"
            ],
            "called": [
                "atexit"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800b4e4": {
            "entrypoint": "0x0800b4e4",
            "current_name": "register_exit_proc_0800b4e4",
            "code": "\nint registerExitProc_0800b4e4(function *function)\n\n{\n  int exitProcStatus;\n  \n  exitProcStatus = __register_exitproc(0,function,0);\n  return exitProcStatus;\n}\n\n",
            "renaming": {
                "FUN_0800b4e4": "register_exit_proc_0800b4e4",
                "__func": "function",
                "iVar1": "exitProcStatus"
            },
            "calling": [
                "register_fini"
            ],
            "called": [
                "__register_exitproc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800b4f0": {
            "entrypoint": "0x0800b4f0",
            "current_name": "run_global_destructors_0800b4f0",
            "code": "\nvoid run_global_destructors_0800b4f0(void)\n\n{\n  int iteration;\n  code **dtor_fun_list;\n  \n  iteration = 1;\n  dtor_fun_list = (code **)&__do_global_dtors_aux_fini_array_entry;\n  do {\n    iteration = iteration + -1;\n    (**dtor_fun_list)();\n    dtor_fun_list = dtor_fun_list + -1;\n  } while (iteration != 0);\n  _fini();\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800b4f0": "run_global_destructors_0800b4f0",
                "iVar1": "iteration",
                "ppcVar2": "dtor_fun_list"
            },
            "calling": [],
            "called": [
                "_fini",
                "frame_dummy",
                "__do_global_dtors_aux"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800b51c": {
            "entrypoint": "0x0800b51c",
            "current_name": "FUNC_0800b51c",
            "code": "\nvoid FUNC_0800b51c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800b51c": "FUNC_0800b51c"
            },
            "calling": [
                "__register_exitproc"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800b520": {
            "entrypoint": "0x0800b520",
            "current_name": "FUNC_0800b520",
            "code": "\nvoid FUNC_0800b520(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800b520": "FUNC_0800b520"
            },
            "calling": [
                "__register_exitproc"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800b524": {
            "entrypoint": "0x0800b524",
            "current_name": "update_at_exit_function_table_0800b524",
            "code": "\nundefined4 updateAtExitFunctionTable_0800b524(int action,undefined4 function,undefined4 init,undefined4 fini)\n\n{\n  undefined *exitFuncTablePtr;\n  undefined4 retVal;\n  uint mask;\n  uint size;\n  \n  __retarget_lock_acquire_recursive(__atexit_recursive_mutex);\n  if (DAT_20000168 == (undefined *)0x0) {\n    DAT_20000168 = &DAT_2000016c;\n  }\n  exitFuncTablePtr = DAT_20000168;\n  size = *(uint *)(DAT_20000168 + 4);\n  if ((int)size < 0x20) {\n    if (action != 0) {\n      *(undefined4 *)(DAT_20000168 + size * 4 + 0x88) = init;\n      mask = 1 << (size & 0xff);\n      *(uint *)(exitFuncTablePtr + 0x188) = *(uint *)(exitFuncTablePtr + 0x188) | mask;\n      *(undefined4 *)(exitFuncTablePtr + size * 4 + 0x108) = fini;\n      if (action == 2) {\n        *(uint *)(exitFuncTablePtr + 0x18c) = mask | *(uint *)(exitFuncTablePtr + 0x18c);\n      }\n    }\n    retVal = __atexit_recursive_mutex;\n    *(uint *)(exitFuncTablePtr + 4) = size + 1;\n    *(undefined4 *)(exitFuncTablePtr + (size + 2) * 4) = function;\n    __retarget_lock_release_recursive(retVal);\n    retVal = 0;\n  }\n  else {\n    __retarget_lock_release_recursive(__atexit_recursive_mutex);\n    retVal = 0xffffffff;\n  }\n  return retVal;\n}\n\n",
            "renaming": {
                "FUN_0800b524": "update_at_exit_function_table_0800b524",
                "param_1": "action",
                "param_2": "function",
                "param_3": "init",
                "param_4": "fini",
                "puVar1": "exitFuncTablePtr",
                "uVar2": "retVal",
                "uVar3": "mask",
                "uVar4": "size"
            },
            "calling": [
                "atexit"
            ],
            "called": [
                "__retarget_lock_acquire_recursive",
                "__retarget_lock_release_recursive"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800b5b0": {
            "entrypoint": "0x0800b5b0",
            "current_name": "get_context_pointer_0800b5b0",
            "code": "\ninteger get_context_pointer_0800b5b0(EVP_PKEY_CTX *context)\n\n{\n  return (integer)context;\n}\n\n",
            "renaming": {
                "FUN_0800b5b0": "get_context_pointer_0800b5b0",
                "ctx": "context",
                "int": "integer"
            },
            "calling": [
                "frame_dummy",
                "__libc_init_array",
                "__do_global_dtors_aux"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800b5bc": {
            "entrypoint": "0x0800b5bc",
            "current_name": "FUNC_0800b5bc",
            "code": "\nvoid FUNC_0800b5bc(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800b5bc": "FUNC_0800b5bc"
            },
            "calling": [
                "__libc_fini_array"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        }
    },
    "used_tokens": 222534,
    "layers": [
        [
            "FUN_08000188",
            "FUN_080001ac",
            "FUN_080001f8",
            "FUN_08000210",
            "FUN_08000220",
            "FUN_08000268",
            "FUN_080002a0",
            "FUN_080002b6",
            "FUN_080002f0",
            "FUN_08000310",
            "FUN_08000340",
            "FUN_08000374",
            "FUN_080003ec",
            "FUN_08000478",
            "FUN_080004ac",
            "FUN_080004fc",
            "FUN_0800056c",
            "FUN_080005b4",
            "FUN_0800184c",
            "FUN_080018cc",
            "FUN_080018fc",
            "FUN_0800192c",
            "FUN_0800195c",
            "FUN_08001994",
            "FUN_08001d4c",
            "FUN_08001ddc",
            "FUN_08001e98",
            "FUN_08001f00",
            "FUN_08002408",
            "FUN_080024c4",
            "FUN_080025e8",
            "FUN_08002638",
            "FUN_08002814",
            "FUN_08002828",
            "FUN_0800283a",
            "FUN_08002870",
            "FUN_08002896",
            "FUN_080028bc",
            "FUN_08002908",
            "FUN_08002978",
            "FUN_080029d8",
            "FUN_08002a94",
            "FUN_08002afc",
            "FUN_08002ba8",
            "FUN_08002c18",
            "FUN_08002e08",
            "FUN_08002edc",
            "FUN_08002ef0",
            "FUN_08002f24",
            "FUN_08002f40",
            "FUN_08002f74",
            "FUN_08002fac",
            "FUN_08002fd4",
            "FUN_08003004",
            "FUN_080035ec",
            "FUN_08003618",
            "FUN_0800369c",
            "FUN_080036c6",
            "FUN_080036f0",
            "FUN_08003740",
            "FUN_0800375c",
            "FUN_08003778",
            "FUN_080037fc",
            "FUN_08003826",
            "FUN_08003980",
            "FUN_080039a0",
            "FUN_080039bc",
            "FUN_08003a18",
            "FUN_08003a74",
            "FUN_08003b98",
            "FUN_08003f34",
            "FUN_08004030",
            "FUN_08004148",
            "FUN_080041a0",
            "FUN_08004228",
            "FUN_0800423c",
            "FUN_08004250",
            "FUN_080044e8",
            "FUN_080046d0",
            "FUN_08004900",
            "FUN_08004940",
            "FUN_08004bc0",
            "FUN_08004bf4",
            "FUN_08004c2a",
            "FUN_08004c48",
            "FUN_08004d2c",
            "FUN_08004d7c",
            "FUN_08004dd2",
            "FUN_08004e30",
            "FUN_080051b4",
            "FUN_08005238",
            "FUN_08005250",
            "FUN_0800525c",
            "FUN_080052ac",
            "FUN_080052dc",
            "FUN_08005324",
            "FUN_08005360",
            "FUN_080053a0",
            "FUN_08005760",
            "FUN_08005778",
            "FUN_08005790",
            "FUN_080057e4",
            "FUN_08005814",
            "FUN_0800583c",
            "FUN_0800585c",
            "FUN_0800587c",
            "FUN_080058a0",
            "FUN_08005900",
            "FUN_0800597c",
            "FUN_08005984",
            "FUN_080059b4",
            "FUN_080059f8",
            "FUN_08005a68",
            "FUN_08005a84",
            "FUN_08005a98",
            "FUN_08005ac4",
            "FUN_08005ad4",
            "FUN_08005aec",
            "FUN_08005b04",
            "FUN_08005b20",
            "FUN_08005b3c",
            "FUN_08005b58",
            "FUN_08005b74",
            "FUN_08005b90",
            "FUN_08005bac",
            "FUN_08005bc4",
            "FUN_08005bdc",
            "FUN_08005c30",
            "FUN_08005c74",
            "FUN_08005cec",
            "FUN_0800618c",
            "FUN_0800640c",
            "FUN_080064bc",
            "FUN_080064d4",
            "FUN_080064ec",
            "FUN_08006628",
            "FUN_08006680",
            "FUN_080066cc",
            "FUN_08006718",
            "FUN_080068bc",
            "FUN_0800691c",
            "FUN_08006950",
            "FUN_08006998",
            "FUN_080069b4",
            "FUN_080069e4",
            "FUN_08006a18",
            "FUN_08006a58",
            "FUN_08006a8c",
            "FUN_08006ac0",
            "FUN_08006b00",
            "FUN_08006b54",
            "FUN_08006ba0",
            "FUN_08006c04",
            "FUN_08006c70",
            "FUN_08006c9c",
            "FUN_08006ce0",
            "FUN_08006cf6",
            "FUN_08006d2e",
            "FUN_08006d4a",
            "FUN_08006d66",
            "FUN_08006d72",
            "FUN_08006d8a",
            "FUN_08006d98",
            "FUN_08006dc4",
            "FUN_08006de0",
            "FUN_08006dfe",
            "FUN_08006e1a",
            "FUN_08006e38",
            "FUN_08006e70",
            "FUN_08006e88",
            "FUN_080071d0",
            "FUN_08007310",
            "FUN_0800733e",
            "FUN_0800736c",
            "FUN_0800738e",
            "FUN_080073c0",
            "FUN_080073d4",
            "FUN_08007402",
            "FUN_08007430",
            "FUN_08007436",
            "FUN_080074c8",
            "FUN_08007520",
            "FUN_08007540",
            "FUN_0800756c",
            "FUN_080075c8",
            "FUN_080076c8",
            "FUN_0800771a",
            "FUN_08007720",
            "FUN_08007726",
            "FUN_0800772c",
            "FUN_08007756",
            "FUN_0800778c",
            "FUN_08007854",
            "FUN_08007884",
            "FUN_080078d0",
            "FUN_080078e2",
            "FUN_080078f4",
            "FUN_08007930",
            "FUN_080079c0",
            "FUN_080079e0",
            "FUN_08007a10",
            "FUN_08007a70",
            "FUN_08007ad0",
            "FUN_08007b70",
            "FUN_08007bc2",
            "FUN_08007bf0",
            "FUN_08007c40",
            "FUN_08007c5e",
            "FUN_08007c7c",
            "FUN_08007d08",
            "FUN_08007da8",
            "FUN_08007dd8",
            "FUN_08007e08",
            "FUN_08007e1c",
            "FUN_08007e58",
            "FUN_08007e84",
            "FUN_08007ea4",
            "FUN_08007f54",
            "FUN_08008190",
            "FUN_08008250",
            "FUN_0800826a",
            "FUN_08008286",
            "FUN_080082c8",
            "FUN_080082d0",
            "FUN_080082d4",
            "FUN_0800854c",
            "FUN_0800856c",
            "FUN_08008590",
            "FUN_080085d4",
            "FUN_080085e4",
            "FUN_0800881c",
            "FUN_08008a02",
            "FUN_08008a64",
            "FUN_08008a6c",
            "FUN_08008a74",
            "FUN_08008af0",
            "FUN_08008b00",
            "FUN_08008b10",
            "FUN_08008b24",
            "FUN_08008b38",
            "FUN_08008b4c",
            "FUN_08008b60",
            "FUN_08008b74",
            "FUN_08008ba0",
            "FUN_08008bf0",
            "FUN_08008c30",
            "FUN_08008cd0",
            "FUN_08008cd8",
            "FUN_08008cdc",
            "FUN_08008e3c",
            "FUN_08008e44",
            "FUN_08008e60",
            "FUN_08008e70",
            "FUN_08008eec",
            "FUN_08009054",
            "FUN_0800918c",
            "FUN_08009194",
            "FUN_0800919c",
            "FUN_080091fc",
            "FUN_08009204",
            "FUN_08009214",
            "FUN_08009228",
            "FUN_0800923c",
            "FUN_08009250",
            "FUN_08009264",
            "FUN_08009278",
            "FUN_080092c4",
            "FUN_08009314",
            "FUN_08009318",
            "FUN_08009410",
            "FUN_080094c0",
            "FUN_080095b8",
            "FUN_08009654",
            "FUN_080096e8",
            "FUN_08009798",
            "FUN_0800981c",
            "FUN_080098d0",
            "FUN_08009990",
            "FUN_08009b24",
            "FUN_08009d78",
            "FUN_0800a1bc",
            "FUN_0800a348",
            "FUN_0800a5a0",
            "FUN_0800adf0",
            "FUN_0800af78",
            "FUN_0800b2cc",
            "FUN_0800b2d4",
            "FUN_0800b2e0",
            "FUN_0800b2e8",
            "FUN_0800b3dc",
            "FUN_0800b3e8",
            "FUN_0800b430",
            "FUN_0800b4e4",
            "FUN_0800b4f0",
            "FUN_0800b524",
            "FUN_0800b5b0"
        ],
        [
            "FUN_08008640",
            "FUN_08008894"
        ]
    ],
    "locked_functions": []
}