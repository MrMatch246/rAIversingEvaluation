{
    "functions": {
        "FUN_08000188": {
            "entrypoint": "0x08000188",
            "current_name": "initialize_flag_08000188",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08000194) */\n\nundefined4 initialize_flag_08000188(undefined4 input_value)\n\n{\n  if ((char)DAT_2000044c == '\\0') {\n    DAT_2000044c._0_1_ = '\\x01';\n  }\n  return input_value;\n}\n\n",
            "renaming": {
                "FUN_08000188": "initialize_flag_08000188",
                "param_1": "input_value"
            },
            "calling": [],
            "called": [
                "FUN_0800b5b0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08000188": {
                    "25": "initialize_flag",
                    "1": "update_data"
                },
                "param_1": {
                    "13": "input",
                    "1": "input_param",
                    "14": "input_value"
                },
                "DAT_2000044c": {
                    "18": "flag",
                    "1": "flag_variable"
                },
                "FUNC_0800b5b0": {
                    "1": "do_something"
                }
            }
        },
        "FUN_080001ac": {
            "entrypoint": "0x080001ac",
            "current_name": "concatenate_values_080001ac",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x080001b2) */\n\nundefined8 concatenate_values_080001ac(undefined4 first_param,undefined4 second_param)\n\n{\n  return CONCAT44(second_param,first_param);\n}\n\n",
            "renaming": {
                "FUN_080001ac": "concatenate_values_080001ac",
                "param_1": "first_param",
                "param_2": "second_param"
            },
            "calling": [
                "FUN_0800b3e8"
            ],
            "called": [
                "FUN_0800b5b0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080001ac": {
                    "3": "concatenate_numbers",
                    "6": "concatenate_params",
                    "1": "concatenate_integers",
                    "4": "concatenate_parameters",
                    "8": "concatenate_values"
                },
                "param_1": {
                    "1": "input_value1",
                    "3": "input1",
                    "2": "number1",
                    "5": "value1",
                    "8": "first_param"
                },
                "param_2": {
                    "1": "input_2",
                    "3": "parameter2",
                    "2": "number2",
                    "8": "second_param",
                    "5": "value2"
                }
            }
        },
        "FUN_080001c8": {
            "entrypoint": "0x080001c8",
            "current_name": "FUNC_080001c8",
            "code": "\nvoid FUNC_080001c8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080001c8": "FUNC_080001c8"
            },
            "calling": [
                "FUN_08000220"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080001d4": {
            "entrypoint": "0x080001d4",
            "current_name": "FUNC_080001d4",
            "code": "\nvoid FUNC_080001d4(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080001d4": "FUNC_080001d4"
            },
            "calling": [
                "FUN_08000210"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080001e0": {
            "entrypoint": "0x080001e0",
            "current_name": "FUNC_080001e0",
            "code": "\nvoid FUNC_080001e0(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080001e0": "FUNC_080001e0"
            },
            "calling": [
                "FUN_08000220"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080001ec": {
            "entrypoint": "0x080001ec",
            "current_name": "FUNC_080001ec",
            "code": "\nvoid FUNC_080001ec(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080001ec": "FUNC_080001ec"
            },
            "calling": [
                "FUN_08000210"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080001f8": {
            "entrypoint": "0x080001f8",
            "current_name": "initialize_coolant_system_080001f8",
            "code": "\nvoid initialize_coolant_system_080001f8(void)\n\n{\n  DAT_20000468 = 0;\n  stop_coolant();\n  return;\n}\n\n",
            "renaming": {
                "FUN_080001f8": "initialize_coolant_system_080001f8",
                "coolant_stop": "stop_coolant"
            },
            "calling": [
                "FUN_08001ddc"
            ],
            "called": [
                "FUN_08000210"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080001f8": {
                    "1": "turn_off_coolant_system",
                    "2": "reset_coolant_system",
                    "6": "stop_coolant",
                    "5": "stop_coolant_flow",
                    "3": "stop_coolant_system",
                    "9": "initialize_coolant_system"
                },
                "coolant_stop": {
                    "11": "stop_coolant",
                    "1": "stop_coolant_system",
                    "8": "stop_coolant_flow"
                },
                "FUN_08000210": {
                    "1": "clear_error_flags",
                    "2": "perform_additional_tasks"
                },
                "DAT_20000468": {
                    "1": "coolant_flow_status"
                },
                "<original_variable_name>": {
                    "1": "coolant_status"
                }
            }
        },
        "FUN_08000210": {
            "entrypoint": "0x08000210",
            "current_name": "turn_off_coolant_08000210",
            "code": "\nvoid turn_off_coolant_08000210(void)\n\n{\n  coolant_mist_off();\n  coolant_flood_off();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000210": "turn_off_coolant_08000210"
            },
            "calling": [
                "FUN_080025e8",
                "FUN_08000220",
                "FUN_080001f8"
            ],
            "called": [
                "FUN_080001d4",
                "FUN_080001ec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08000210": {
                    "1": "turn_off_coolant_mist_and_flood",
                    "9": "turn_off_coolant_systems",
                    "11": "turn_off_coolant",
                    "2": "turn_off_cooling_system",
                    "8": "turn_off_coolant_system"
                },
                "FUNC_080001d4": {
                    "1": "coolant_mist",
                    "28": "coolant_mist_off",
                    "2": "turn_off_coolant_mist"
                },
                "FUNC_080001ec": {
                    "1": "coolant_flood",
                    "2": "turn_off_coolant_flood",
                    "28": "coolant_flood_off"
                }
            }
        },
        "FUN_08000220": {
            "entrypoint": "0x08000220",
            "current_name": "control_coolant_system_08000220",
            "code": "\nvoid control_coolant_system_08000220(char command)\n\n{\n  if (command != DAT_20000468) {\n    synchronize_plan();\n    if (command == '\\x01') {\n      turn_on_coolant_flood();\n      DAT_20000468 = command;\n    }\n    else if (command == '\\x02') {\n      turn_on_coolant_mist();\n      DAT_20000468 = command;\n    }\n    else {\n      stop_coolant();\n      DAT_20000468 = command;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000220": "control_coolant_system_08000220",
                "param_1": "command",
                "plan_synchronize": "synchronize_plan",
                "coolant_flood_on": "turn_on_coolant_flood",
                "coolant_mist_on": "turn_on_coolant_mist",
                "coolant_stop": "stop_coolant"
            },
            "calling": [
                "FUN_080005b4"
            ],
            "called": [
                "FUN_08002fd4",
                "FUN_080001e0",
                "FUN_080001c8",
                "FUN_08000210"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08000220": {
                    "2": "update_coolant_status",
                    "19": "control_coolant_system",
                    "6": "control_coolant",
                    "1": "control_coolant_flow"
                },
                "param_1": {
                    "1": "coolant_option",
                    "2": "coolant_command",
                    "13": "command",
                    "3": "mode",
                    "4": "coolant_status"
                },
                "plan_synchronize": {
                    "15": "synchronize_plan",
                    "1": "synchronize_coolant_plan",
                    "7": "synchronize_plans",
                    "3": "synchronize_coolant_system"
                },
                "coolant_flood_on": {
                    "10": "turn_on_flood_coolant",
                    "1": "turn_on_flood",
                    "3": "activate_coolant_flood",
                    "14": "turn_on_coolant_flood",
                    "2": "activate_flood_coolant"
                },
                "coolant_mist_on": {
                    "2": "activate_mist_coolant",
                    "14": "turn_on_coolant_mist",
                    "1": "turn_on_mist",
                    "10": "turn_on_mist_coolant",
                    "3": "activate_coolant_mist"
                },
                "coolant_stop": {
                    "25": "stop_coolant",
                    "5": "stop_coolant_flow"
                },
                "DAT_20000468": {
                    "1": "last_coolant_command",
                    "2": "current_coolant_state",
                    "4": "current_command"
                }
            }
        },
        "FUN_08000268": {
            "entrypoint": "0x08000268",
            "current_name": "calculate_elapsed_time_08000268",
            "code": "\n\n\nint calculate_elapsed_time_08000268(void)\n\n{\n  int current_tick;\n  \n  current_tick = get_current_tick();\n  return (current_tick + 1) * 1000 - _DAT_e000e018 / 0xa8;\n}\n\n",
            "renaming": {
                "FUN_08000268": "calculate_elapsed_time_08000268",
                "iVar1": "current_tick",
                "HAL_GetTick": "get_current_tick"
            },
            "calling": [
                "FUN_080002b6"
            ],
            "called": [
                "FUN_08005a84"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08000268": {
                    "1": "calculate_updated_time",
                    "2": "calculate_delay",
                    "11": "calculate_elapsed_time",
                    "5": "calculate_adjusted_time",
                    "7": "calculate_time_difference"
                },
                "iVar1": {
                    "1": "tick_count",
                    "21": "current_tick",
                    "3": "tick"
                },
                "_DAT_e000e018": {
                    "1": "timer_register",
                    "2": "system_timer",
                    "3": "some_value"
                },
                "HAL_GetTick": {
                    "1": "get_time_ticks",
                    "16": "get_current_tick",
                    "2": "get_tick"
                },
                "FUN_08005a84": {
                    "1": "calculate_factor"
                }
            }
        },
        "FUN_080002a0": {
            "entrypoint": "0x080002a0",
            "current_name": "delay_function_080002a0",
            "code": "\nvoid delay_function_080002a0(undefined4 delay_time)\n\n{\n  delay(delay_time);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080002a0": "delay_function_080002a0",
                "param_1": "delay_time",
                "HAL_Delay": "delay"
            },
            "calling": [
                "FUN_08002408"
            ],
            "called": [
                "FUN_08005a98"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080002a0": {
                    "6": "delay_execution",
                    "1": "delay_operation",
                    "24": "delay_function"
                },
                "param_1": {
                    "1": "input_data",
                    "24": "delay_time"
                },
                "FUN_08005a98": {
                    "1": "some_function",
                    "2": "process_function"
                },
                "HAL_Delay": {
                    "1": "delay"
                }
            }
        },
        "FUN_080002b6": {
            "entrypoint": "0x080002b6",
            "current_name": "wait_until_time_080002b6",
            "code": "\nvoid wait_until_time_080002b6(uint milliseconds)\n\n{\n  uint current_usecs_upper;\n  uint target_milliseconds;\n  bool is_time_reached;\n  longlong current_time;\n  undefined8 current_time;\n  \n  current_time = get_current_microseconds();\n  target_milliseconds = (uint)(current_time + (ulonglong)milliseconds >> 0x20);\n  do {\n    current_time = get_current_microseconds();\n    current_usecs_upper = (uint)((ulonglong)current_time >> 0x20);\n    is_time_reached = target_milliseconds <= current_usecs_upper;\n    if (current_usecs_upper == target_milliseconds) {\n      is_time_reached = (uint)(current_time + (ulonglong)milliseconds) <= (uint)current_time;\n    }\n  } while (!is_time_reached);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080002b6": "wait_until_time_080002b6",
                "param_1": "milliseconds",
                "uVar1": "current_usecs_upper",
                "uVar2": "target_milliseconds",
                "bVar3": "is_time_reached",
                "lVar4": "current_time",
                "uVar5": "current_time",
                "get_current_usecs": "get_current_microseconds"
            },
            "calling": [],
            "called": [
                "FUN_08000268"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080002b6": {
                    "2": "wait_until_time_reached",
                    "1": "wait_for_timestamp",
                    "5": "delay_function",
                    "9": "wait_until_time"
                },
                "param_1": {
                    "1": "wait_time",
                    "3": "time_to_wait",
                    "5": "delay_time",
                    "15": "milliseconds"
                },
                "uVar1": {
                    "3": "current_seconds",
                    "4": "current_milliseconds",
                    "1": "current_high_bits",
                    "2": "current_time_upper",
                    "5": "current_usecs_upper"
                },
                "uVar2": {
                    "1": "current_usecs_upper_param",
                    "2": "target_time_upper",
                    "4": "target_milliseconds",
                    "3": "target_seconds"
                },
                "bVar3": {
                    "1": "is_delayed",
                    "5": "is_time_reached",
                    "4": "is_delay_complete",
                    "3": "is_target_reached",
                    "2": "time_reached"
                },
                "lVar4": {
                    "1": "current_time_low",
                    "2": "start_time",
                    "8": "current_usecs"
                },
                "uVar5": {
                    "1": "current_microseconds_extra",
                    "6": "current_time",
                    "2": "current_usecs",
                    "3": "new_usecs"
                },
                "get_current_usecs": {
                    "1": "get_current_microseconds"
                }
            }
        },
        "FUN_080002f0": {
            "entrypoint": "0x080002f0",
            "current_name": "initialize_data_080002f0",
            "code": "\nvoid initialize_data_080002f0(void)\n\n{\n  memset(&DAT_20000470,0xff,4);\n  DAT_2000046c = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080002f0": "initialize_data_080002f0"
            },
            "calling": [
                "FUN_080003ec",
                "FUN_08000340",
                "FUN_08000374",
                "FUN_08000310"
            ],
            "called": [
                "FUN_0800b430"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080002f0": {
                    "28": "initialize_data",
                    "1": "clear_memory",
                    "2": "initialize_memory"
                },
                "param_1": {
                    "4": "buffer",
                    "1": "output_buffer",
                    "2": "pointer",
                    "12": "data_pointer"
                },
                "param_2": {
                    "21": "flag",
                    "5": "value",
                    "1": "byte_value"
                },
                "param_3": {
                    "1": "number_of_bytes",
                    "23": "size",
                    "2": "length"
                },
                "FUN_0800b430": {
                    "1": "some_function",
                    "5": "process_data"
                },
                "DAT_20000470": {
                    "4": "data",
                    "7": "data_buffer",
                    "1": "memory_array"
                },
                "DAT_2000046c": {
                    "1": "count_value",
                    "2": "counter",
                    "5": "status",
                    "3": "flag_value"
                }
            }
        },
        "FUN_08000310": {
            "entrypoint": "0x08000310",
            "current_name": "get_eeprom_data_08000310",
            "code": "\nundefined get_eeprom_data_08000310(uint index)\n\n{\n  if (DAT_2000046c == 0) {\n    initialize_eeprom();\n  }\n  return (&DAT_20000470)[index & 0x3ff];\n}\n\n",
            "renaming": {
                "FUN_08000310": "get_eeprom_data_08000310",
                "param_1": "index",
                "eeprom_init": "initialize_eeprom"
            },
            "calling": [
                "FUN_080003ec",
                "FUN_08004dd2"
            ],
            "called": [
                "FUN_080002f0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08000310": {
                    "1": "lookup_value",
                    "9": "get_eeprom_value",
                    "3": "get_data_from_eeprom",
                    "13": "get_eeprom_data"
                },
                "param_1": {
                    "1": "element_index",
                    "4": "data_index",
                    "17": "index",
                    "3": "value_index"
                },
                "DAT_2000046c": {
                    "1": "is_eeprom_initialized",
                    "20": "eeprom_initialized"
                },
                "eeprom_init": {
                    "24": "initialize_eeprom"
                },
                "&DAT_20000470": {
                    "1": "data_array",
                    "15": "eeprom_data",
                    "4": "eeprom_data_array"
                },
                "FUN_080002f0": {
                    "2": "initialize_data",
                    "3": "initialize_eeprom",
                    "1": "eeprom_init"
                },
                "&DAT_2000046c": {
                    "1": "eeprom_initialized"
                },
                "0x3ff": {
                    "2": "index_mask",
                    "1": "element_index_mask"
                },
                "DAT_20000470": {
                    "7": "eeprom_data"
                }
            }
        },
        "FUN_08000340": {
            "entrypoint": "0x08000340",
            "current_name": "write_to_eeprom_08000340",
            "code": "\nvoid write_to_eeprom_08000340(uint index,undefined value)\n\n{\n  if (DAT_2000046c == 0) {\n    initialize_eeprom();\n  }\n  (&DAT_20000470)[index & 0x3ff] = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000340": "write_to_eeprom_08000340",
                "param_1": "index",
                "param_2": "value",
                "eeprom_init": "initialize_eeprom"
            },
            "calling": [
                "FUN_08000374",
                "FUN_08004c2a"
            ],
            "called": [
                "FUN_080002f0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08000340": {
                    "2": "store_value_in_eeprom",
                    "1": "update_eeprom_value",
                    "3": "store_data",
                    "19": "write_to_eeprom"
                },
                "param_1": {
                    "7": "address",
                    "1": "eeprom_index",
                    "23": "index"
                },
                "param_2": {
                    "1": "new_value",
                    "18": "value",
                    "12": "data"
                },
                "eeprom_init": {
                    "11": "initialize_eeprom"
                },
                "DAT_2000046c": {
                    "1": "eeprom_initialized_flag",
                    "4": "eeprom_initialized"
                },
                "DAT_20000470": {
                    "3": "eeprom_data"
                },
                "&DAT_20000470": {
                    "1": "eeprom_data_array"
                }
            }
        },
        "FUN_08000374": {
            "entrypoint": "0x08000374",
            "current_name": "process_data_08000374",
            "code": "\nvoid process_data_08000374(int data_length,char *data,int data_length)\n\n{\n  int remaining_length;\n  char *current_data;\n  int current_address;\n  char checksum;\n  \n  checksum = '\\0';\n  remaining_length = data_length;\n  current_data = data;\n  current_address = data_length;\n  if (DAT_2000046c == 0) {\n    eeprom_init();\n    current_data = data;\n    current_address = data_length;\n  }\n  for (; remaining_length != 0; remaining_length = remaining_length + -1) {\n    checksum = (checksum != '\\0') + *current_data;\n    eeprom_put_char(current_address,*current_data);\n    current_data = current_data + 1;\n    current_address = current_address + 1;\n  }\n  eeprom_put_char(current_address,checksum);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000374": "process_data_08000374",
                "param_1": "data_length",
                "param_2": "data",
                "param_3": "data_length",
                "local_1c": "remaining_length",
                "local_18": "current_data",
                "local_14": "current_address",
                "local_9": "checksum"
            },
            "calling": [
                "FUN_08004c2a",
                "FUN_08004bf4",
                "FUN_08004bc0"
            ],
            "called": [
                "FUN_08000340",
                "FUN_080002f0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08000374": {
                    "1": "eeprom_store_data",
                    "6": "process_data",
                    "2": "eeprom_write_data",
                    "4": "write_data_to_eeprom",
                    "5": "calculate_checksum"
                },
                "param_1": {
                    "1": "data_address",
                    "4": "data_size",
                    "2": "input_length",
                    "8": "data_length",
                    "3": "data_offset"
                },
                "param_2": {
                    "21": "data",
                    "1": "data_ptr",
                    "5": "data_buffer",
                    "2": "input_data"
                },
                "param_3": {
                    "2": "eeprom_address",
                    "4": "data_size",
                    "13": "data_length",
                    "1": "index",
                    "5": "length"
                },
                "local_1c": {
                    "1": "size",
                    "4": "remaining_size",
                    "18": "remaining_length"
                },
                "local_18": {
                    "7": "current_char",
                    "2": "data_ptr",
                    "3": "current_data_ptr",
                    "1": "current_char_ptr",
                    "8": "current_data",
                    "6": "current_byte"
                },
                "local_14": {
                    "2": "eeprom_index",
                    "1": "eeprom_address_current",
                    "3": "current_offset",
                    "10": "current_address",
                    "4": "current_index"
                },
                "local_9": {
                    "31": "checksum"
                }
            }
        },
        "FUN_080003ec": {
            "entrypoint": "0x080003ec",
            "current_name": "verify_eeprom_data_080003ec",
            "code": "\nbool verify_eeprom_data_080003ec(char *data_buffer,int start_index,int length)\n\n{\n  char current_char;\n  uint expected_checksum;\n  int remaining_length;\n  int current_index;\n  char *current_ptr;\n  byte checksum;\n  \n  checksum = 0;\n  remaining_length = length;\n  current_index = start_index;\n  current_ptr = data_buffer;\n  if (DAT_2000046c == 0) {\n    initialize_eeprom();\n    current_index = start_index;\n    current_ptr = data_buffer;\n  }\n  for (; remaining_length != 0; remaining_length = remaining_length + -1) {\n    current_char = read_eeprom_byte(current_index);\n    checksum = current_char + (checksum != 0);\n    *current_ptr = current_char;\n    current_index = current_index + 1;\n    current_ptr = current_ptr + 1;\n  }\n  expected_checksum = read_eeprom_byte(current_index);\n  return checksum == expected_checksum;\n}\n\n",
            "renaming": {
                "FUN_080003ec": "verify_eeprom_data_080003ec",
                "param_1": "data_buffer",
                "param_2": "start_index",
                "param_3": "length",
                "local_1c": "remaining_length",
                "local_18": "current_index",
                "local_14": "current_ptr",
                "local_9": "checksum",
                "eeprom_init": "initialize_eeprom",
                "eeprom_get_char": "read_eeprom_byte",
                "uVar2": "expected_checksum",
                "cVar1": "current_char"
            },
            "calling": [
                "FUN_08004dd2",
                "FUN_08004d2c",
                "FUN_08004d7c"
            ],
            "called": [
                "FUN_08000310",
                "FUN_080002f0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080003ec": {
                    "3": "verify_data",
                    "9": "check_eeprom_data",
                    "1": "verify_eeprom",
                    "15": "verify_eeprom_data"
                },
                "param_1": {
                    "6": "data",
                    "3": "data_array",
                    "17": "data_buffer",
                    "1": "data_ptr",
                    "4": "buffer"
                },
                "param_2": {
                    "1": "start_offset",
                    "22": "start_index",
                    "6": "start_address"
                },
                "param_3": {
                    "3": "data_length",
                    "26": "length",
                    "1": "size"
                },
                "local_1c": {
                    "2": "remaining_size",
                    "1": "remaining_data_length",
                    "28": "remaining_length"
                },
                "local_18": {
                    "7": "current_address",
                    "23": "current_index",
                    "1": "current_offset"
                },
                "local_14": {
                    "1": "current_location",
                    "7": "current_ptr",
                    "6": "current_buffer",
                    "3": "current_address",
                    "2": "current_char_ptr"
                },
                "local_9": {
                    "5": "sum",
                    "1": "sum_of_chars",
                    "17": "checksum"
                },
                "DAT_2000046c": {
                    "2": "eeprom_initialized"
                },
                "eeprom_init": {
                    "9": "initialize_eeprom"
                },
                "eeprom_get_char": {
                    "3": "read_eeprom_byte",
                    "2": "read_eeprom_character",
                    "1": "get_next_eeprom_char"
                },
                "uVar2": {
                    "1": "checksum",
                    "4": "expected_checksum",
                    "3": "expected_sum"
                },
                "FUN_08000310": {
                    "1": "calculate_expected_checksum"
                },
                "FUN_080002f0": {
                    "1": "initialize_system"
                },
                "cVar1": {
                    "1": "current_character",
                    "6": "current_char"
                }
            }
        },
        "FUN_08000478": {
            "entrypoint": "0x08000478",
            "current_name": "initialize_parameters_08000478",
            "code": "\nvoid initialize_parameters_08000478(undefined param1,undefined param2,undefined param3)\n\n{\n  DAT_20000e89 = param1;\n  DAT_20000e8a = param2;\n  DAT_20000e8b = param3;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000478": "initialize_parameters_08000478",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3"
            },
            "calling": [
                "FUN_080004ac",
                "FUN_080005b4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08000478": {
                    "6": "initialize_params",
                    "2": "set_params",
                    "1": "store_parameters",
                    "14": "initialize_parameters",
                    "4": "initialize_variables",
                    "3": "initialize_data"
                },
                "param_1": {
                    "3": "input_param1",
                    "1": "first_param",
                    "2": "input1",
                    "5": "param1"
                },
                "param_2": {
                    "5": "param2",
                    "3": "input_param2",
                    "2": "value2",
                    "1": "parameter_2"
                },
                "param_3": {
                    "1": "third_param",
                    "3": "parameter3",
                    "2": "input3",
                    "5": "param3"
                },
                "param_1_variable": {
                    "1": "data"
                },
                "param_2_variable": {
                    "1": "param"
                },
                "param_3_variable": {
                    "1": "other"
                }
            }
        },
        "FUN_080004ac": {
            "entrypoint": "0x080004ac",
            "current_name": "initialize_data_080004ac",
            "code": "\nvoid initialize_data_080004ac(void)\n\n{\n  int result;\n  \n  clear_memory(&DAT_20000e70,0,0x38);\n  DAT_20000e78 = DAT_20000ecc;\n  select_plane(0,1,2);\n  DAT_20000e74 = 1;\n  result = read_coordinate_data(DAT_20000e8c,&DAT_20000e90);\n  if (result == 0) {\n    display_status_message(10);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080004ac": "initialize_data_080004ac",
                "settings_read_coord_data": "read_coordinate_data",
                "iVar1": "result",
                "memset": "clear_memory",
                "report_status_message": "display_status_message"
            },
            "calling": [
                "FUN_08001ddc"
            ],
            "called": [
                "FUN_08000478",
                "FUN_08004030",
                "FUN_0800b430",
                "FUN_08004d7c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080004ac": {
                    "3": "initialize",
                    "10": "initialize_game_data",
                    "1": "initialize_plane",
                    "13": "initialize_data"
                },
                "FUN_08000478": {
                    "15": "select_plane"
                },
                "FUN_08004030": {
                    "14": "report_status_message",
                    "1": "set_status_message"
                },
                "FUN_0800b430": {
                    "2": "read_coord_data",
                    "1": "read_coordinate_data",
                    "10": "settings_read_coord_data"
                },
                "FUN_08004d7c": {
                    "1": "check_param_validity",
                    "7": "check_data_validity",
                    "2": "check_condition"
                },
                "settings_read_coord_data": {
                    "9": "read_coordinate_data",
                    "1": "read_coordinate_settings",
                    "5": "read_coord_data"
                },
                "iVar1": {
                    "1": "status",
                    "3": "error_code",
                    "5": "result"
                },
                "memset": {
                    "2": "clear_memory",
                    "1": "initialize_memory"
                },
                "DAT_20000e70": {
                    "1": "data_struct",
                    "2": "data_buffer"
                },
                "DAT_20000e78": {
                    "1": "config_data"
                },
                "select_plane": {
                    "8": "select_plane",
                    "1": "set_plane_selection",
                    "2": "set_plane"
                },
                "DAT_20000e74": {
                    "3": "flag",
                    "1": "game_data_flag"
                },
                "DAT_20000e8c": {
                    "1": "coordinate_data_buffer",
                    "2": "input_data"
                },
                "DAT_20000e90": {
                    "1": "coord_data",
                    "2": "output_data"
                },
                "report_status_message": {
                    "3": "report_status_message",
                    "10": "display_status_message",
                    "1": "report_message"
                },
                "param_1": {
                    "1": "undefined1"
                },
                "param_2": {
                    "1": "undefined2"
                },
                "param_3": {
                    "1": "undefined3"
                },
                "DAT_20000ecc": {
                    "1": "default_config"
                },
                "pos": {
                    "1": "position"
                }
            }
        },
        "FUN_080004fc": {
            "entrypoint": "0x080004fc",
            "current_name": "calculate_float_divisions_080004fc",
            "code": "\nvoid calculate_float_divisions_080004fc(undefined4 value1,undefined4 value2,undefined4 value3)\n\n{\n  undefined4 converted_value;\n  \n  converted_value = convert_to_float(value1);\n  DAT_20000e7c = divide_floats(converted_value,DAT_20000ebc);\n  converted_value = convert_to_float(value2);\n  DAT_20000e80 = divide_floats(converted_value,DAT_20000ec0);\n  converted_value = convert_to_float(value3);\n  DAT_20000e84 = divide_floats(converted_value,DAT_20000ec4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080004fc": "calculate_float_divisions_080004fc",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "value3",
                "uVar1": "converted_value",
                "__floatsisf": "convert_to_float",
                "__aeabi_fdiv": "divide_floats"
            },
            "calling": [
                "FUN_0800283a"
            ],
            "called": [
                "FUN_08009054",
                "FUN_08008e44"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080004fc": {
                    "1": "convert_params_to_float",
                    "2": "divide_parameters",
                    "3": "divide_floats",
                    "4": "divide_params"
                },
                "param_1": {
                    "1": "integer_param1",
                    "3": "value_1",
                    "8": "value1",
                    "2": "int_param1",
                    "4": "num1",
                    "7": "input1"
                },
                "param_2": {
                    "7": "input2",
                    "1": "integer_param2",
                    "4": "num2",
                    "2": "int_param2",
                    "3": "value_2",
                    "8": "value2"
                },
                "param_3": {
                    "1": "integer_value3",
                    "8": "value3",
                    "7": "input3",
                    "2": "int_param3",
                    "3": "value_3",
                    "4": "num3"
                },
                "uVar1": {
                    "3": "float_value",
                    "1": "converted_input",
                    "7": "converted_value"
                },
                "__floatsisf": {
                    "1": "convert_int_to_float",
                    "6": "convert_to_float"
                },
                "__aeabi_fdiv": {
                    "2": "divide_floats",
                    "1": "perform_division"
                },
                "DAT_20000ebc": {
                    "1": "divisor_1",
                    "4": "divisor1"
                },
                "DAT_20000ec0": {
                    "4": "divisor2",
                    "1": "divisor_float2"
                },
                "DAT_20000ec4": {
                    "1": "divisor_float3",
                    "4": "divisor3"
                },
                "FUN_08009054": {
                    "1": "perform_arithmetic_operation"
                },
                "FUN_08008e44": {
                    "1": "perform_single_unsigned_operation"
                },
                "DAT_20000e7c": {
                    "4": "result1",
                    "1": "result_float1"
                },
                "DAT_20000e80": {
                    "1": "result_float2",
                    "4": "result2"
                },
                "DAT_20000e84": {
                    "1": "result_float3",
                    "4": "result3"
                },
                "<original_function_name>": {
                    "1": "improved_divide_params"
                },
                "param_4": {
                    "1": "arithmetic_param"
                }
            }
        },
        "FUN_0800056c": {
            "entrypoint": "0x0800056c",
            "current_name": "convert_to_float_0800056c",
            "code": "\nundefined4 convert_to_float_0800056c(undefined4 input_value)\n\n{\n  undefined8 converted_value;\n  \n  if (DAT_20000e73 != '\\0') {\n    converted_value = convert_to_double(input_value);\n    converted_value = multiply_double((int)converted_value,(int)((ulonglong)converted_value >> 0x20),0x66666666,0x40396666);\n    input_value = truncate_to_float((int)converted_value,(int)((ulonglong)converted_value >> 0x20));\n  }\n  return input_value;\n}\n\n",
            "renaming": {
                "FUN_0800056c": "convert_to_float_0800056c",
                "param_1": "input_value",
                "uVar1": "converted_value",
                "__aeabi_f2d": "convert_to_double",
                "__muldf3": "multiply_double",
                "__truncdfsf2": "truncate_to_float"
            },
            "calling": [
                "FUN_080005b4"
            ],
            "called": [
                "FUN_08008640",
                "FUN_08008590",
                "FUN_08008c30"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800056c": {
                    "1": "multiply_and_truncate",
                    "9": "convert_to_float",
                    "2": "calculate_square_root",
                    "6": "convert_and_truncate"
                },
                "param_1": {
                    "8": "input",
                    "11": "input_value",
                    "1": "celsius",
                    "2": "value",
                    "3": "input_number",
                    "5": "input_float"
                },
                "uVar1": {
                    "12": "converted_value",
                    "1": "celsius_as_double",
                    "4": "converted_double",
                    "2": "converted_input",
                    "7": "double_value"
                },
                "DAT_20000e73": {
                    "3": "flag",
                    "1": "should_convert_float"
                },
                "__aeabi_f2d": {
                    "3": "convert_to_double",
                    "1": "float_to_double"
                },
                "__muldf3": {
                    "2": "multiply_values",
                    "3": "multiply_double"
                },
                "__truncdfsf2": {
                    "1": "truncate_double",
                    "2": "truncate_to_float"
                },
                "(int)((ulonglong)uVar1 >> 0x20)": {
                    "1": "upper_bits"
                },
                "0x66666666": {
                    "1": "constant1"
                },
                "0x40396666": {
                    "1": "constant2"
                },
                "FUN_08008640": {
                    "1": "perform_conversion"
                },
                "FUN_08008590": {
                    "1": "multiply_32bit_numbers"
                },
                "FUN_08008c30": {
                    "1": "truncate_float"
                },
                "param_2": {
                    "1": "multiplier_1"
                },
                "param_3": {
                    "1": "param3"
                },
                "param_4": {
                    "1": "multiplier_3"
                }
            }
        },
        "FUN_080005b4": {
            "entrypoint": "0x080005b4",
            "current_name": "process_function_080005b4",
            "code": "\nchar process_function_080005b4(undefined4 input)\n\n{\n  int result;\n  undefined4 temp_var1;\n  char result;\n  uint temp_var2;\n  undefined4 temp_var3;\n  undefined8 temp_var4;\n  undefined8 temp_var5;\n  undefined8 temp_var6;\n  undefined4 array1 [4];\n  undefined4 var1;\n  undefined4 var2;\n  undefined4 var3;\n  undefined4 variable4;\n  undefined4 variable5;\n  undefined4 array2 [6];\n  undefined4 value;\n  byte statement_type;\n  undefined flag;\n  undefined4 var9;\n  undefined4 var10;\n  undefined var11;\n  uint var12;\n  byte var13;\n  byte var14;\n  byte var15;\n  byte var16;\n  char var17;\n  uint var18;\n  undefined4 var19;\n  sbyte var20;\n  char var21;\n  char var22;\n  undefined4 var23;\n  byte flag4;\n  ushort var25;\n  uint var26;\n  \n  if (DAT_20000ea9 == '\\x06') {\n    result = '\\f';\n  }\n  else {\n    flag = 0;\n    var25 = 0;\n    flag4 = 0;\n    var23 = 0xbf800000;\n    var22 = '\\0';\n    var21 = '\\0';\n    initialize_array(array2 + 3,0,0xc);\n    initialize_array(array2,0,0xc);\n    DAT_20000e70 = '\\0';\n    var20 = 0;\n    while (result = get_next_statement(&statement_type,array2 + 6,input,&flag), result != 0) {\n      temp_var4 = convert_float_to_double(value);\n      temp_var4 = trunc((int)temp_var4,(int)((ulonglong)temp_var4 >> 0x20));\n      var26 = convert_double_to_int((int)temp_var4,(int)((ulonglong)temp_var4 >> 0x20));\n      if (statement_type == 0x47) {\n        switch(var26) {\n        case 0:\n        case 1:\n        case 2:\n        case 3:\n        case 0x50:\n          var20 = 2;\n          break;\n        case 4:\n        case 10:\n        case 0x1c:\n        case 0x1e:\n        case 0x35:\n        case 0x5c:\n          var20 = 1;\n          break;\n        case 0x11:\n        case 0x12:\n        case 0x13:\n          var20 = 3;\n          break;\n        case 0x14:\n        case 0x15:\n          var20 = 7;\n          break;\n        case 0x36:\n        case 0x37:\n        case 0x38:\n        case 0x39:\n        case 0x3a:\n        case 0x3b:\n          var20 = 9;\n          break;\n        case 0x5a:\n        case 0x5b:\n          var20 = 4;\n          break;\n        case 0x5d:\n        case 0x5e:\n          var20 = 6;\n        }\n        switch(var26) {\n        case 0:\n          DAT_20000e71 = '\\0';\n          break;\n        case 1:\n          DAT_20000e71 = '\\x01';\n          break;\n        case 2:\n          DAT_20000e71 = '\\x02';\n          break;\n        case 3:\n          DAT_20000e71 = '\\x03';\n          break;\n        case 4:\n          var21 = '\\x01';\n          break;\n        default:\n          DAT_20000e70 = '\\x03';\n          break;\n        case 10:\n          var21 = '\\x02';\n          break;\n        case 0x11:\n          choose_plane(0,1,2);\n          break;\n        case 0x12:\n          choose_plane(2,0,1);\n          break;\n        case 0x13:\n          choose_plane(1,2,0);\n          break;\n        case 0x14:\n          DAT_20000e73 = 1;\n          break;\n        case 0x15:\n          DAT_20000e73 = 0;\n          break;\n        case 0x1c:\n        case 0x1e:\n          temp_var1 = multiply_floats(value,0x41200000);\n          temp_var4 = convert_float_to_double(temp_var1);\n          temp_var4 = trunc((int)temp_var4,(int)((ulonglong)temp_var4 >> 0x20));\n          var26 = convert_double_to_int((int)temp_var4,(int)((ulonglong)temp_var4 >> 0x20));\n          switch(var26) {\n          case 0x118:\n            var21 = '\\x03';\n            break;\n          case 0x119:\n            var21 = '\\x04';\n            break;\n          default:\n            DAT_20000e70 = '\\x03';\n            break;\n          case 300:\n            var21 = '\\x05';\n            break;\n          case 0x12d:\n            var21 = '\\x06';\n          }\n          break;\n        case 0x35:\n          var22 = '\\x01';\n          break;\n        case 0x36:\n        case 0x37:\n        case 0x38:\n        case 0x39:\n        case 0x3a:\n        case 0x3b:\n          DAT_20000e8c = (char)var26 - 0x36;\n          break;\n        case 0x50:\n          DAT_20000e71 = '\\x04';\n          break;\n        case 0x5a:\n          DAT_20000e74 = '\\x01';\n          break;\n        case 0x5b:\n          DAT_20000e74 = '\\0';\n          break;\n        case 0x5c:\n          temp_var1 = multiply_floats(value,0x41200000);\n          temp_var4 = convert_float_to_double(temp_var1);\n          temp_var4 = trunc((int)temp_var4,(int)((ulonglong)temp_var4 >> 0x20));\n          var26 = convert_double_to_int((int)temp_var4,(int)((ulonglong)temp_var4 >> 0x20));\n          if (var26 == 0x398) {\n            var21 = '\\a';\n          }\n          else if (var26 == 0x399) {\n            var21 = '\\b';\n          }\n          else {\n            DAT_20000e70 = '\\x03';\n          }\n          break;\n        case 0x5d:\n          DAT_20000e72 = '\\x01';\n          break;\n        case 0x5e:\n          DAT_20000e72 = '\\0';\n        }\n      }\n      else if (statement_type == 0x4d) {\n        if (var26 == 0x1e) {\nLAB_08000b96:\n          var20 = 5;\n        }\n        else if ((int)var26 < 0x1f) {\n          if ((int)var26 < 3) {\n            if (-1 < (int)var26) goto LAB_08000b96;\n          }\n          else if (var26 - 3 < 3) {\n            var20 = 8;\n          }\n        }\n        switch(var26) {\n        case 0:\n          DAT_20000e75 = '\\x01';\n          break;\n        case 1:\n          break;\n        case 2:\n        case 0x1e:\n          DAT_20000e75 = '\\x02';\n          break;\n        case 3:\n          DAT_20000e76 = '\\x01';\n          break;\n        case 4:\n          DAT_20000e76 = -1;\n          break;\n        case 5:\n          DAT_20000e76 = '\\0';\n          break;\n        default:\n          DAT_20000e70 = '\\x03';\n          break;\n        case 7:\n          DAT_20000e77 = 2;\n          break;\n        case 8:\n          DAT_20000e77 = 1;\n          break;\n        case 9:\n          DAT_20000e77 = 0;\n        }\n      }\n      if (var20 != 0) {\n        if (((int)(uint)var25 >> var20 & 1U) == 0) {\n          var25 = var25 | (ushort)(1 << var20);\n        }\n        else {\n          DAT_20000e70 = '\\x05';\n        }\n        var20 = 0;\n      }\n    }\n    result = DAT_20000e70;\n    if (DAT_20000e70 == '\\0') {\n      var19 = 0;\n      var18 = 0;\n      var17 = '\\0';\n      flag = 0;\nswitchD_08000d18_caseD_47:\n      result = get_next_statement(&statement_type,array2 + 6,input,&flag);\n      if (result != 0) {\n        switch(statement_type) {\n        case 0x46:\n          result = compare_floats_less_equal(value,0);\n          if (result != 0) {\n            DAT_20000e70 = '\\x06';\n          }\n          if (DAT_20000e72 == '\\0') {\n            DAT_20000e78 = convert_to_millimeters(value);\n          }\n          else {\n            var23 = convert_to_millimeters(value);\n          }\n          break;\n        case 0x47:\n        case 0x4d:\n        case 0x4e:\n          break;\n        default:\n          DAT_20000e70 = '\\x03';\n          break;\n        case 0x49:\n        case 0x4a:\n        case 0x4b:\n          temp_var2 = (uint)statement_type;\n          temp_var1 = convert_to_millimeters(value);\n          array2[temp_var2 - 0x49] = temp_var1;\n          break;\n        case 0x4c:\n          temp_var4 = convert_float_to_double(value);\n          temp_var4 = trunc((int)temp_var4,(int)((ulonglong)temp_var4 >> 0x20));\n          var17 = __aeabi_d2uiz((int)temp_var4,(int)((ulonglong)temp_var4 >> 0x20));\n          break;\n        case 0x50:\n          var19 = value;\n          break;\n        case 0x52:\n          var18 = convert_to_millimeters(value);\n          break;\n        case 0x53:\n          result = compare_floats_less(value,0);\n          if (result != 0) {\n            DAT_20000e70 = '\\x06';\n          }\n          break;\n        case 0x54:\n          result = compare_floats_less(value,0);\n          if (result != 0) {\n            DAT_20000e70 = '\\x06';\n          }\n          temp_var4 = convert_float_to_double(value);\n          temp_var4 = trunc((int)temp_var4,(int)((ulonglong)temp_var4 >> 0x20));\n          DAT_20000e88 = __aeabi_d2uiz((int)temp_var4,(int)((ulonglong)temp_var4 >> 0x20));\n          break;\n        case 0x58:\n          array2[3] = convert_to_millimeters(value);\n          flag4 = flag4 | 1;\n          break;\n        case 0x59:\n          array2[4] = convert_to_millimeters(value);\n          flag4 = flag4 | 2;\n          break;\n        case 0x5a:\n          array2[5] = convert_to_millimeters(value);\n          flag4 = flag4 | 4;\n        }\n        goto switchD_08000d18_caseD_47;\n      }\n      result = DAT_20000e70;\n      if (DAT_20000e70 == '\\0') {\n        if (DAT_20000ea9 != '\\a') {\n          run_spindle((int)DAT_20000e76);\n          run_coolant(DAT_20000e77);\n        }\n        if ((var25 & 0x200) != 0) {\n          result = read_coordinate_data(DAT_20000e8c,&var3);\n          if (result == 0) {\n            return '\\n';\n          }\n          DAT_20000e90 = var3;\n          DAT_20000e94 = variable4;\n          DAT_20000e98 = variable5;\n        }\n        switch(var21) {\n        case '\\x01':\n          result = compare_floats_less(var19,0);\n          if (result == 0) {\n            if (DAT_20000ea9 != '\\a') {\n              machine_dwell(var19);\n            }\n          }\n          else {\n            DAT_20000e70 = '\\x06';\n          }\n          break;\n        case '\\x02':\n          temp_var4 = convert_float_to_double(var19);\n          temp_var4 = trunc((int)temp_var4,(int)((ulonglong)temp_var4 >> 0x20));\n          var26 = convert_double_to_int((int)temp_var4,(int)((ulonglong)temp_var4 >> 0x20));\n          if ((((var17 == '\\x02') || (var17 == '\\x14')) && (-1 < (int)var26)) &&\n             ((int)var26 < 7)) {\n            if ((flag4 == 0) && (var17 == '\\x02')) {\n              DAT_20000e70 = '\\x06';\n            }\n            else {\n              if ((int)var26 < 1) {\n                var26 = (uint)DAT_20000e8c;\n              }\n              else {\n                var26 = var26 - 1;\n              }\n              result = read_coordinate_data(var26 & 0xff,array1);\n              if (result == 0) {\n                return '\\n';\n              }\n              for (var16 = 0; var16 < 3; var16 = var16 + 1) {\n                if (((int)(uint)flag4 >> var16 & 1U) != 0) {\n                  if (var17 == '\\x14') {\n                    temp_var2 = (uint)var16;\n                    temp_var1 = subtract_floats(*(undefined4 *)(&DAT_20000e74 + (var16 + 2) * 4),\n                                         array2[var16 + 3]);\n                    array1[temp_var2] = temp_var1;\n                  }\n                  else {\n                    array1[var16] = array2[var16 + 3];\n                  }\n                }\n              }\n              write_coordinate_data(var26 & 0xff,array1);\n              if (var26 == DAT_20000e8c) {\n                DAT_20000e90 = array1[0];\n                DAT_20000e94 = array1[1];\n                DAT_20000e98 = array1[2];\n              }\n            }\n          }\n          else {\n            DAT_20000e70 = '\\x03';\n          }\n          flag4 = 0;\n          break;\n        case '\\x03':\n        case '\\x05':\n          if (flag4 != 0) {\n            for (var15 = 0; var15 < 3; var15 = var15 + 1) {\n              if (((int)(uint)flag4 >> var15 & 1U) == 0) {\n                array2[var15 + 3] = *(undefined4 *)(&DAT_20000e74 + (var15 + 2) * 4);\n              }\n              else if (DAT_20000e74 == '\\0') {\n                temp_var2 = (uint)var15;\n                temp_var1 = add_floats(array2[var15 + 3],\n                                 *(undefined4 *)(&DAT_20000e74 + (var15 + 2) * 4));\n                array2[temp_var2 + 3] = temp_var1;\n              }\n              else {\n                temp_var3 = array2[var15 + 3];\n                temp_var1 = add_floats(*(undefined4 *)(&DAT_20000e70 + (var15 + 8) * 4),\n                                 *(undefined4 *)(&DAT_20000e74 + (var15 + 10) * 4));\n                temp_var2 = (uint)var15;\n                temp_var1 = add_floats(temp_var3,temp_var1);\n                array2[temp_var2 + 3] = temp_var1;\n              }\n            }\n            machine_line(array2[3],array2[4],array2[5],DAT_20000ed0,0);\n          }\n          if (var21 == '\\x05') {\n            result = read_coordinate_data(7,array1 + 3);\n            if (result == 0) {\n              return '\\n';\n            }\n          }\n          else {\n            result = read_coordinate_data(6,array1 + 3);\n            if (result == 0) {\n              return '\\n';\n            }\n          }\n          machine_line(array1[3],var1,var2,DAT_20000ed0,0);\n          DAT_20000e7c = array1[3];\n          DAT_20000e80 = var1;\n          DAT_20000e84 = var2;\n          flag4 = 0;\n          break;\n        case '\\x04':\n        case '\\x06':\n          if (var21 == '\\x06') {\n            write_coordinate_data(7,&DAT_20000e7c);\n          }\n          else {\n            write_coordinate_data(6,&DAT_20000e7c);\n          }\n          break;\n        case '\\a':\n          if (flag4 == 0) {\n            DAT_20000e70 = '\\x06';\n          }\n          else {\n            for (var14 = 0; var14 < 3; var14 = var14 + 1) {\n              if (((int)(uint)flag4 >> var14 & 1U) != 0) {\n                temp_var1 = subtract_floats(*(undefined4 *)(&DAT_20000e74 + (var14 + 2) * 4),\n                                     *(undefined4 *)(&DAT_20000e70 + (var14 + 8) * 4));\n                temp_var2 = (uint)var14;\n                temp_var1 = subtract_floats(temp_var1,array2[var14 + 3]);\n                *(undefined4 *)(&DAT_20000e74 + (temp_var2 + 10) * 4) = temp_var1;\n              }\n            }\n          }\n          flag4 = 0;\n          break;\n        case '\\b':\n          initialize_array(&DAT_20000e9c,0,0xc);\n        }\n        if (((var25 & 4) != 0) || (flag4 != 0)) {\n          if ((DAT_20000e72 != '\\0') &&\n             ((result = compare_floats_less(var23,0), result != 0 && (DAT_20000e71 != '\\x04')))) {\n            DAT_20000e70 = '\\x06';\n          }\n          if (((var22 != '\\0') && (DAT_20000e71 != '\\0')) && (DAT_20000e71 != '\\x01')) {\n            DAT_20000e70 = '\\x06';\n          }\n          if (DAT_20000e70 != '\\0') {\n            return DAT_20000e70;\n          }\n          for (var13 = 0; var13 < 3; var13 = var13 + 1) {\n            if (((int)(uint)flag4 >> var13 & 1U) == 0) {\n              array2[var13 + 3] = *(undefined4 *)(&DAT_20000e74 + (var13 + 2) * 4);\n            }\n            else if (var22 == '\\0') {\n              if (DAT_20000e74 == '\\0') {\n                temp_var2 = (uint)var13;\n                temp_var1 = add_floats(array2[var13 + 3],\n                                 *(undefined4 *)(&DAT_20000e74 + (var13 + 2) * 4));\n                array2[temp_var2 + 3] = temp_var1;\n              }\n              else {\n                temp_var3 = array2[var13 + 3];\n                temp_var1 = add_floats(*(undefined4 *)(&DAT_20000e70 + (var13 + 8) * 4),\n                                 *(undefined4 *)(&DAT_20000e74 + (var13 + 10) * 4));\n                temp_var2 = (uint)var13;\n                temp_var1 = add_floats(temp_var3,temp_var1);\n                array2[temp_var2 + 3] = temp_var1;\n              }\n            }\n          }\n          switch(DAT_20000e71) {\n          case '\\0':\n            if (flag4 == 0) {\n              DAT_20000e70 = '\\x06';\n            }\n            else {\n              machine_line(array2[3],array2[4],array2[5],DAT_20000ed0,0);\n            }\n            break;\n          case '\\x01':\n            if (flag4 == 0) {\n              DAT_20000e70 = '\\x06';\n            }\n            else {\n              temp_var1 = var23;\n              if (DAT_20000e72 == '\\0') {\n                temp_var1 = DAT_20000e78;\n              }\n              machine_line(array2[3],array2[4],array2[5],temp_var1,DAT_20000e72);\n            }\n            break;\n          case '\\x02':\n          case '\\x03':\n            flag4 = flag4 & ~(byte)(1 << DAT_20000e8b);\n            if ((flag4 == 0) ||\n               (((result = compare_floats_equal(var18,0), result != 0 &&\n                 (result = compare_floats_equal(array2[DAT_20000e89],0), result != 0)) &&\n                (result = compare_floats_equal(array2[DAT_20000e8a],0), result != 0)))) {\n              DAT_20000e70 = '\\x06';\n            }\n            else {\n              result = compare_floats_equal(var18,0);\n              if (result == 0) {\n                var10 = subtract_floats(array2[DAT_20000e89 + 3],\n                                        *(undefined4 *)(&DAT_20000e74 + (DAT_20000e89 + 2) * 4));\n                var9 = subtract_floats(array2[DAT_20000e8a + 3],\n                                        *(undefined4 *)(&DAT_20000e74 + (DAT_20000e8a + 2) * 4));\n                initialize_array(array2,0,0xc);\n                temp_var1 = multiply_floats(var18,0x40800000);\n                temp_var1 = multiply_floats(temp_var1,var18);\n                temp_var3 = multiply_floats(var10,var10);\n                temp_var1 = subtract_floats(temp_var1,temp_var3);\n                temp_var3 = multiply_floats(var9,var9);\n                var12 = subtract_floats(temp_var1,temp_var3);\n                result = compare_floats_less(var12,0);\n                if (result != 0) {\n                  DAT_20000e70 = 4;\n                  return '\\x04';\n                }\n                temp_var4 = convert_float_to_double(var12);\n                temp_var4 = square_root((int)temp_var4,(int)((ulonglong)temp_var4 >> 0x20));\n                temp_var5 = convert_float_to_double(var10);\n                temp_var6 = convert_float_to_double(var9);\n                temp_var5 = hypotenuse((int)temp_var5,(int)((ulonglong)temp_var5 >> 0x20),(int)temp_var6,\n                              (int)((ulonglong)temp_var6 >> 0x20));\n                temp_var4 = divide_double((int)temp_var4,(uint)((ulonglong)temp_var4 >> 0x20) ^ 0x80000000,(int)temp_var5\n                                 ,(int)((ulonglong)temp_var5 >> 0x20));\n                var12 = convert_double_to_float((int)temp_var4,(int)((ulonglong)temp_var4 >> 0x20));\n                if (DAT_20000e71 == '\\x03') {\n                  var12 = var12 ^ 0x80000000;\n                }\n                result = compare_floats_less(var18,0);\n                if (result != 0) {\n                  var12 = var12 ^ 0x80000000;\n                  var18 = var18 ^ 0x80000000;\n                }\n                temp_var1 = multiply_floats(var9,var12);\n                temp_var1 = subtract_floats(var10,temp_var1);\n                temp_var2 = (uint)DAT_20000e89;\n                temp_var1 = multiply_floats(temp_var1,0x3f000000);\n                array2[temp_var2] = temp_var1;\n                temp_var1 = multiply_floats(var10,var12);\n                temp_var1 = add_floats(temp_var1,var9);\n                temp_var2 = (uint)DAT_20000e8a;\n                temp_var1 = multiply_floats(temp_var1,0x3f000000);\n                array2[temp_var2] = temp_var1;\n              }\n              else {\n                temp_var4 = convert_float_to_double(array2[DAT_20000e89]);\n                temp_var5 = convert_float_to_double(array2[DAT_20000e8a]);\n                temp_var4 = hypotenuse((int)temp_var4,(int)((ulonglong)temp_var4 >> 0x20),(int)temp_var5,\n                              (int)((ulonglong)temp_var5 >> 0x20));\n                var18 = convert_double_to_float((int)temp_var4,(int)((ulonglong)temp_var4 >> 0x20));\n              }\n              var11 = DAT_20000e71 == '\\x02';\n              temp_var1 = var23;\n              if (DAT_20000e72 == '\\0') {\n                temp_var1 = DAT_20000e78;\n              }\n              machine_arc(&DAT_20000e7c,array2 + 3,array2,DAT_20000e89,DAT_20000e8a,DAT_20000e8b,\n                     temp_var1,DAT_20000e72,var18,var11);\n            }\n            break;\n          case '\\x04':\n            if (flag4 != 0) {\n              DAT_20000e70 = '\\x06';\n            }\n          }\n          if (DAT_20000e70 != '\\0') {\n            return DAT_20000e70;\n          }\n          DAT_20000e7c = array2[3];\n          DAT_20000e80 = array2[4];\n          DAT_20000e84 = array2[5];\n        }\n        result = DAT_20000e70;\n        if (DAT_20000e75 != '\\0') {\n          synchronize_plans();\n          DAT_20000eb8 = 0;\n          if (DAT_20000e75 == '\\x02') {\n            reset_machine();\n            result = DAT_20000e70;\n          }\n          else {\n            DAT_20000e75 = '\\0';\n            result = DAT_20000e70;\n          }\n        }\n      }\n    }\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080005b4": "process_function_080005b4",
                "param_1": "input",
                "iVar1": "result",
                "uVar2": "temp_var1",
                "cVar3": "result",
                "uVar4": "temp_var2",
                "uVar5": "temp_var3",
                "uVar6": "temp_var4",
                "uVar7": "temp_var5",
                "uVar8": "temp_var6",
                "local_94": "array1",
                "local_84": "var1",
                "local_80": "var2",
                "local_7c": "var3",
                "uStack_78": "variable4",
                "uStack_74": "variable5",
                "auStack_70": "array2",
                "local_58": "value",
                "local_52": "statement_type",
                "local_51": "flag",
                "local_50": "var9",
                "local_4c": "var10",
                "local_45": "var11",
                "local_44": "var12",
                "local_3d": "var13",
                "local_3c": "var14",
                "local_3b": "var15",
                "local_3a": "var16",
                "local_39": "var17",
                "local_38": "var18",
                "local_34": "var19",
                "local_2f": "var20",
                "local_2e": "var21",
                "local_2d": "var22",
                "local_2c": "var23",
                "local_27": "flag4",
                "local_26": "var25",
                "local_24": "var26",
                "next_statement": "get_next_statement",
                "memset": "initialize_array",
                "__aeabi_f2d": "convert_float_to_double",
                "__aeabi_fmul": "multiply_floats",
                "__aeabi_d2iz": "convert_double_to_int",
                "__addsf3": "add_floats",
                "__truncdfsf2": "convert_double_to_float",
                "__divdf3": "divide_double",
                "__aeabi_fcmple": "compare_floats_less_equal",
                "__aeabi_fsub": "subtract_floats",
                "__aeabi_fcmplt": "compare_floats_less",
                "__aeabi_fcmpeq": "compare_floats_equal",
                "sqrt": "square_root",
                "hypot": "hypotenuse",
                "mc_dwell": "machine_dwell",
                "select_plane": "choose_plane",
                "spindle_run": "run_spindle",
                "coolant_run": "run_coolant",
                "settings_read_coord_data": "read_coordinate_data",
                "settings_write_coord_data": "write_coordinate_data",
                "mc_line": "machine_line",
                "mc_reset": "reset_machine",
                "mc_arc": "machine_arc",
                "plan_synchronize": "synchronize_plans",
                "to_millimeters": "convert_to_millimeters"
            },
            "calling": [
                "FUN_080039bc",
                "FUN_08003b98"
            ],
            "called": [
                "FUN_08009228",
                "FUN_08000478",
                "FUN_080025e8",
                "FUN_08008ba0",
                "FUN_0800525c",
                "FUN_08001e98",
                "FUN_08008eec",
                "FUN_08002408",
                "FUN_08008cd8",
                "FUN_08009214",
                "FUN_0800184c",
                "FUN_08008cdc",
                "FUN_0800923c",
                "FUN_0800b430",
                "FUN_08001f00",
                "FUN_0800056c",
                "FUN_08002fd4",
                "FUN_08008894",
                "FUN_08009798",
                "FUN_08004d7c",
                "FUN_08008bf0",
                "FUN_08008c30",
                "FUN_080098d0",
                "FUN_08004bf4",
                "FUN_08000220",
                "FUN_0800981c",
                "FUN_08008590"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080005b4": {
                    "2": "process_command",
                    "1": "process_code"
                },
                "param_1": {
                    "10": "input",
                    "2": "param",
                    "1": "input_variable",
                    "3": "command",
                    "4": "input_data",
                    "8": "input_param"
                },
                "iVar1": {
                    "4": "index",
                    "2": "return_value",
                    "1": "temp_var_1",
                    "14": "result",
                    "3": "temp_var1"
                },
                "uVar2": {
                    "1": "temp_variable_2",
                    "2": "temp",
                    "3": "temp_var_1",
                    "6": "temp_var1"
                },
                "cVar3": {
                    "6": "return_value",
                    "5": "error_code",
                    "1": "result_flag",
                    "3": "status",
                    "12": "result"
                },
                "uVar4": {
                    "4": "temp_var_2",
                    "1": "temp_variable4",
                    "8": "temp_var2",
                    "3": "temp_var4",
                    "6": "temp2",
                    "2": "temp_value2"
                },
                "uVar5": {
                    "8": "temp_var3",
                    "1": "temp_variable_4",
                    "3": "temp_var5",
                    "4": "temp_var_3",
                    "6": "temp3",
                    "2": "temp_value3"
                },
                "uVar6": {
                    "4": "temp_var_4",
                    "2": "temp3",
                    "1": "temp_variable_5",
                    "3": "temp_var6",
                    "8": "temp_var4",
                    "6": "temp4"
                },
                "uVar7": {
                    "6": "temp5",
                    "1": "temp_variable6",
                    "8": "temp_var5",
                    "4": "temp_var_5",
                    "3": "temp_var7",
                    "2": "temp4"
                },
                "uVar8": {
                    "2": "temp_value6",
                    "1": "temp_variable8",
                    "6": "temp6",
                    "4": "temp_var_6",
                    "8": "temp_var6",
                    "3": "temp_var8"
                },
                "local_94": {
                    "1": "buffer",
                    "2": "temp_array1",
                    "5": "coord_data",
                    "3": "local_array1",
                    "8": "array1"
                },
                "local_84": {
                    "1": "x_value",
                    "2": "value1",
                    "4": "var1",
                    "3": "variable1"
                },
                "local_80": {
                    "1": "array3",
                    "2": "value2",
                    "4": "var2",
                    "3": "variable2"
                },
                "local_7c": {
                    "4": "var3",
                    "1": "local_variable7c",
                    "3": "variable3",
                    "2": "local_var_3"
                },
                "uStack_78": {
                    "1": "temp_var_10",
                    "2": "local_var_4",
                    "3": "var4"
                },
                "uStack_74": {
                    "1": "temp_stack_variable2",
                    "2": "local_var_5",
                    "3": "var5"
                },
                "auStack_70": {
                    "1": "coord_data_array",
                    "7": "array2",
                    "2": "temp_array"
                },
                "local_58": {
                    "1": "input1",
                    "3": "var6",
                    "2": "value1",
                    "5": "value"
                },
                "local_52": {
                    "1": "local_variable52",
                    "2": "value2",
                    "3": "var7",
                    "4": "statement_type"
                },
                "local_51": {
                    "3": "var8",
                    "1": "variable8",
                    "2": "local_var_8"
                },
                "local_50": {
                    "3": "var9",
                    "1": "millimeters_temp_1",
                    "2": "local_var_9"
                },
                "local_4c": {
                    "1": "variable_10",
                    "2": "temp_var15",
                    "3": "var10"
                },
                "local_45": {
                    "1": "variable1",
                    "2": "flag2",
                    "3": "var11"
                },
                "local_44": {
                    "1": "variable2",
                    "3": "var12"
                },
                "local_3d": {
                    "1": "loop_counter1",
                    "2": "var13"
                },
                "local_3c": {
                    "1": "temp_var19",
                    "2": "var14"
                },
                "local_3b": {
                    "1": "variable15",
                    "2": "var15"
                },
                "local_3a": {
                    "1": "value6",
                    "2": "var16"
                },
                "local_39": {
                    "1": "var13",
                    "2": "var17"
                },
                "local_38": {
                    "1": "temp_var25",
                    "2": "var18"
                },
                "local_34": {
                    "1": "temp_var24",
                    "2": "var19"
                },
                "local_2f": {
                    "1": "sbyte_1",
                    "2": "var20"
                },
                "local_2e": {
                    "1": "variable15",
                    "2": "var21"
                },
                "local_2d": {
                    "1": "local_variable2d",
                    "2": "var22"
                },
                "local_2c": {
                    "1": "var19",
                    "2": "var23"
                },
                "local_27": {
                    "1": "flag_11",
                    "2": "flag4"
                },
                "local_26": {
                    "1": "value7",
                    "2": "var25"
                },
                "local_24": {
                    "1": "variable_26",
                    "2": "var26"
                },
                "DAT_20000ea9": {
                    "1": "coordinate_mode",
                    "3": "constant1"
                },
                "DAT_20000e70": {
                    "1": "error_code_1",
                    "3": "error_code",
                    "2": "error_flag"
                },
                "DAT_20000e71": {
                    "1": "flag2"
                },
                "DAT_20000e72": {
                    "1": "coord_change_exclude_plane"
                },
                "DAT_20000e73": {
                    "1": "char_value7"
                },
                "DAT_20000e74": {
                    "1": "setting_value_4"
                },
                "DAT_20000e75": {
                    "1": "char_value9"
                },
                "DAT_20000e76": {
                    "1": "constant_data8"
                },
                "DAT_20000e77": {
                    "1": "flag_8"
                },
                "DAT_20000e78": {
                    "1": "parameter_1"
                },
                "DAT_20000e7c": {
                    "1": "var31"
                },
                "DAT_20000e80": {
                    "1": "value_24"
                },
                "DAT_20000e84": {
                    "1": "parameter_4"
                },
                "DAT_20000e88": {
                    "1": "value18"
                },
                "DAT_20000e8a": {
                    "1": "arc_index_axis_2"
                },
                "DAT_20000e8b": {
                    "1": "constant_data16"
                },
                "DAT_20000e8c": {
                    "1": "var35"
                },
                "DAT_20000e90": {
                    "1": "data_1"
                },
                "DAT_20000e94": {
                    "1": "var38"
                },
                "DAT_20000e98": {
                    "1": "value9"
                },
                "DAT_20000e9c": {
                    "1": "constant_data22"
                },
                "DAT_20000eb8": {
                    "1": "value23"
                },
                "DAT_20000ed0": {
                    "1": "var42"
                },
                "DAT_20000e89": {
                    "1": "axis_select_value_2"
                },
                "DAT_20000ed4": {
                    "1": "byte_value8"
                },
                "DAT_20000ed5": {
                    "1": "byte_value9"
                },
                "DAT_20000ed8": {
                    "1": "temp_data1"
                },
                "DAT_20000ed9": {
                    "1": "byte_value11"
                },
                "FUN_08009228": {
                    "1": "function1"
                },
                "FUN_08000478": {
                    "1": "function2"
                },
                "FUN_080025e8": {
                    "1": "function3"
                },
                "FUN_08008ba0": {
                    "1": "function4"
                },
                "FUN_0800525c": {
                    "1": "function5"
                },
                "FUN_08001e98": {
                    "1": "function6"
                },
                "FUN_08008eec": {
                    "1": "function7"
                },
                "FUN_08002408": {
                    "1": "function8"
                },
                "FUN_08008cd8": {
                    "1": "function9"
                },
                "FUN_08009214": {
                    "1": "function10"
                },
                "FUN_0800184c": {
                    "1": "function11"
                },
                "FUN_08008cdc": {
                    "1": "function12"
                },
                "FUN_0800923c": {
                    "1": "function13"
                },
                "FUN_0800b430": {
                    "1": "function14"
                },
                "FUN_08001f00": {
                    "1": "function15"
                },
                "FUN_0800056c": {
                    "1": "function16"
                },
                "FUN_08002fd4": {
                    "1": "function17"
                },
                "FUN_08008894": {
                    "1": "function18"
                },
                "FUN_08009798": {
                    "1": "function19"
                },
                "FUN_08004d7c": {
                    "1": "function20"
                },
                "FUN_08008bf0": {
                    "1": "function21"
                },
                "FUN_08008c30": {
                    "1": "function22"
                },
                "FUN_080098d0": {
                    "1": "function23"
                },
                "FUN_08004bf4": {
                    "1": "function24"
                },
                "FUN_08000220": {
                    "1": "function25"
                },
                "FUN_0800981c": {
                    "1": "function26"
                },
                "FUN_08008590": {
                    "1": "function27"
                },
                "DAT_20000e8d": {
                    "1": "index4"
                },
                "DAT_20000ec8": {
                    "1": "temp_data2"
                },
                "DAT_20000ea0": {
                    "1": "temp_data4"
                },
                "DAT_20000eb0": {
                    "1": "temp_data5"
                },
                "uVar3": {
                    "1": "temp_variable2"
                },
                "DAT_20000eaf": {
                    "1": "end_x"
                },
                "DAT_20000eb3": {
                    "1": "end_y"
                },
                "DAT_20000eb7": {
                    "1": "end_z"
                },
                "DAT_20000eba": {
                    "1": "coordinate_flag1"
                },
                "DAT_20000f73": {
                    "1": "coordinate_flag2"
                },
                "DAT_20000ed2": {
                    "1": "temp_flag2"
                },
                "DAT_20000f00": {
                    "1": "constant_value3"
                },
                "DAT_20000f60": {
                    "1": "constant_value4"
                },
                "next_statement": {
                    "1": "get_next_statement"
                },
                "memset": {
                    "1": "initialize_array"
                },
                "__aeabi_f2d": {
                    "1": "convert_float_to_double"
                },
                "__aeabi_fmul": {
                    "1": "multiply_floats"
                },
                "__aeabi_d2iz": {
                    "1": "convert_double_to_int"
                },
                "__addsf3": {
                    "1": "add_floats"
                },
                "__truncdfsf2": {
                    "1": "convert_double_to_float"
                },
                "__divdf3": {
                    "1": "divide_double"
                },
                "__aeabi_fcmple": {
                    "1": "compare_floats_less_equal"
                },
                "__aeabi_fsub": {
                    "1": "subtract_floats"
                },
                "__aeabi_fcmplt": {
                    "1": "compare_floats_less"
                },
                "__aeabi_fcmpeq": {
                    "1": "compare_floats_equal"
                },
                "sqrt": {
                    "1": "square_root"
                },
                "hypot": {
                    "1": "hypotenuse"
                },
                "mc_dwell": {
                    "1": "machine_dwell"
                },
                "select_plane": {
                    "1": "choose_plane"
                },
                "spindle_run": {
                    "1": "run_spindle"
                },
                "coolant_run": {
                    "1": "run_coolant"
                },
                "settings_read_coord_data": {
                    "1": "read_coordinate_data"
                },
                "settings_write_coord_data": {
                    "1": "write_coordinate_data"
                },
                "mc_line": {
                    "1": "machine_line"
                },
                "mc_reset": {
                    "1": "reset_machine"
                },
                "mc_arc": {
                    "1": "machine_arc"
                },
                "plan_synchronize": {
                    "1": "synchronize_plans"
                },
                "to_millimeters": {
                    "1": "convert_to_millimeters"
                }
            }
        },
        "FUN_0800184c": {
            "entrypoint": "0x0800184c",
            "current_name": "process_data_0800184c",
            "code": "\nundefined4 process_data_0800184c(byte *output_buffer,undefined4 input_parameter,int base_address,byte *current_index)\n\n{\n  int read_result;\n  undefined4 return_value;\n  \n  if (*(char *)(base_address + (uint)*current_index) == '\\0') {\n    return_value = 0;\n  }\n  else {\n    *output_buffer = *(byte *)(base_address + (uint)*current_index);\n    if ((*output_buffer < 0x41) || (0x5a < *output_buffer)) {\n      DAT_20000e70 = 2;\n      return_value = 0;\n    }\n    else {\n      *current_index = *current_index + 1;\n      read_result = read_float(base_address,current_index,input_parameter);\n      if (read_result == 0) {\n        DAT_20000e70 = 1;\n        return_value = 0;\n      }\n      else {\n        return_value = 1;\n      }\n    }\n  }\n  return return_value;\n}\n\n",
            "renaming": {
                "FUN_0800184c": "process_data_0800184c",
                "param_1": "output_buffer",
                "param_2": "input_parameter",
                "param_3": "base_address",
                "param_4": "current_index",
                "iVar1": "read_result",
                "uVar2": "return_value"
            },
            "calling": [
                "FUN_080005b4"
            ],
            "called": [
                "FUN_08002638"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800184c": {
                    "1": "extract_and_validate_char",
                    "2": "decode_character",
                    "4": "decode_and_read_float"
                },
                "param_1": {
                    "1": "output_data",
                    "5": "output_byte",
                    "3": "output",
                    "17": "output_buffer"
                },
                "param_2": {
                    "1": "context",
                    "2": "param2",
                    "3": "input_parameter"
                },
                "param_3": {
                    "1": "input_start",
                    "2": "data_offset",
                    "3": "data_start_address",
                    "6": "base_address",
                    "4": "data_pointer"
                },
                "param_4": {
                    "3": "index",
                    "1": "position_pointer",
                    "2": "input_byte",
                    "5": "current_index"
                },
                "iVar1": {
                    "6": "read_float_result",
                    "1": "float_read_result",
                    "18": "read_result",
                    "3": "result"
                },
                "uVar2": {
                    "8": "return_value",
                    "2": "is_valid",
                    "6": "success",
                    "1": "status",
                    "4": "result"
                },
                "read_float": {
                    "1": "decode_float"
                },
                "*param_1": {
                    "1": "decoded_byte"
                }
            }
        },
        "FUN_080018cc": {
            "entrypoint": "0x080018cc",
            "current_name": "update_data_080018cc",
            "code": "\n\n\nvoid update_data_080018cc(uint new_value)\n\n{\n  _DAT_40021014 = new_value | _DAT_40021014 & 0xfffffaaf;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080018cc": "update_data_080018cc",
                "param_1": "new_value"
            },
            "calling": [
                "FUN_08001994"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080018cc": {
                    "1": "update_config_flags",
                    "7": "update_data",
                    "2": "update_settings",
                    "4": "update_register_value"
                },
                "param_1": {
                    "2": "status_value",
                    "1": "flag_value",
                    "9": "new_value",
                    "4": "input_value",
                    "5": "value"
                },
                "_DAT_40021014": {
                    "1": "current_value",
                    "2": "data_register",
                    "3": "register_value"
                },
                "_DAT_40021014 & 0xfffffaaf": {
                    "1": "masked_status"
                },
                "0xfffffaaf": {
                    "2": "bit_mask"
                },
                "DAT_40021014": {
                    "1": "memory_value"
                }
            }
        },
        "FUN_080018fc": {
            "entrypoint": "0x080018fc",
            "current_name": "update_register_value_080018fc",
            "code": "\n\n\nvoid update_register_value_080018fc(uint new_value)\n\n{\n  _DAT_40021014 = new_value | _DAT_40021014 & 0xfffff55f;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080018fc": "update_register_value_080018fc",
                "param_1": "new_value"
            },
            "calling": [
                "FUN_08001994"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080018fc": {
                    "1": "apply_mask_and_update",
                    "2": "update_config_flags",
                    "4": "update_register_value"
                },
                "param_1": {
                    "1": "input_param",
                    "2": "config_flags",
                    "7": "new_value",
                    "5": "value"
                },
                "_DAT_40021014": {
                    "1": "flag_value",
                    "2": "flags",
                    "4": "existing_value",
                    "3": "existing_data",
                    "6": "register_value"
                },
                "_DAT_40021014 & 0xfffff55f": {
                    "3": "masked_data"
                },
                "0xfffff55f": {
                    "1": "filter_value"
                }
            }
        },
        "FUN_0800192c": {
            "entrypoint": "0x0800192c",
            "current_name": "extract_flag_from_data_0800192c",
            "code": "\nvoid extract_flag_from_data_0800192c(void)\n\n{\n  DAT_20000e4c = (uint)((DAT_20000ee4 & 8) != 0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800192c": "extract_flag_from_data_0800192c"
            },
            "calling": [
                "FUN_08001ddc",
                "FUN_08004e30"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800192c": {
                    "3": "extract_flag_from_binary",
                    "1": "update_dat_flag",
                    "2": "update_flag_based_on_condition",
                    "4": "extract_flag_from_data"
                },
                "DAT_20000e4c": {
                    "8": "flag",
                    "1": "flag_result",
                    "2": "updated_flag",
                    "3": "is_bit_set"
                },
                "DAT_20000ee4": {
                    "3": "input_flag",
                    "4": "input_value",
                    "1": "original_value",
                    "2": "input_data"
                }
            }
        },
        "FUN_0800195c": {
            "entrypoint": "0x0800195c",
            "current_name": "reset_and_set_flag_0800195c",
            "code": "\nvoid reset_and_set_flag_0800195c(void)\n\n{\n  if ((DAT_20000ea9 != '\\x06') && ((DAT_20000eaa & 0x20) == 0)) {\n    reset_memory_controller();\n    DAT_20000eaa = DAT_20000eaa | 0x40;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800195c": "reset_and_set_flag_0800195c",
                "mc_reset": "reset_memory_controller"
            },
            "calling": [
                "FUN_080074c8"
            ],
            "called": [
                "FUN_080025e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800195c": {
                    "1": "reset_if_not_reversed",
                    "9": "reset_and_set_flag",
                    "3": "reset_if_condition_met",
                    "2": "update_data"
                },
                "mc_reset": {
                    "1": "reset_internal_state",
                    "2": "reset",
                    "4": "reset_memory_controller"
                },
                "FUN_080025e8": {
                    "1": "perform_additional_cleanup",
                    "4": "perform_additional_operations",
                    "5": "perform_reset"
                },
                "DAT_20000ea9": {
                    "1": "current_state"
                },
                "DAT_20000eaa": {
                    "1": "machine_state_var",
                    "2": "control_flags"
                }
            }
        },
        "FUN_08001994": {
            "entrypoint": "0x08001994",
            "current_name": "calculate_control_signal_08001994",
            "code": "\nvoid calculate_control_signal_08001994(byte input_flags,char param2,char param3,undefined4 param4)\n\n{\n  undefined4 result1;\n  uint result2;\n  undefined8 result3;\n  undefined8 result4;\n  byte temp_byte;\n  uint value1;\n  uint value2;\n  uint value3;\n  ushort data1;\n  uint local_var5;\n  int local_var6;\n  undefined4 local_var7;\n  uint max_value;\n  uint debounced_value;\n  ushort data2;\n  uint delay_time;\n  uint sum;\n  int local_var13;\n  int local_var14;\n  int local_var15;\n  int local_var16;\n  ushort data3;\n  uint min_value;\n  char counter;\n  \n  counter = '\\0';\n  memset(&value1,0,0xc);\n  if ((input_flags & 1) != 0) {\n    counter = counter + '\\x01';\n    result3 = __aeabi_f2d(DAT_20000ebc);\n    value1 = lround((int)result3,(int)((ulonglong)result3 >> 0x20));\n  }\n  if ((input_flags & 2) != 0) {\n    counter = counter + '\\x01';\n    result3 = __aeabi_f2d(DAT_20000ec0);\n    value2 = lround((int)result3,(int)((ulonglong)result3 >> 0x20));\n  }\n  if ((input_flags & 4) != 0) {\n    counter = counter + '\\x01';\n    result3 = __aeabi_f2d(DAT_20000ec4);\n    value3 = lround((int)result3,(int)((ulonglong)result3 >> 0x20));\n  }\n  result2 = value3;\n  if (value3 < value2) {\n    result2 = value2;\n  }\n  max_value = value1;\n  if (value1 < result2) {\n    max_value = result2;\n  }\n  result3 = __floatunsidf(max_value);\n  result4 = __floatunsidf(counter);\n  result4 = sqrt((int)result4,(int)((ulonglong)result4 >> 0x20));\n  result3 = __divdf3((int)result3,(int)((ulonglong)result3 >> 0x20),(int)result4,\n                   (int)((ulonglong)result4 >> 0x20));\n  local_var7 = __truncdfsf2((int)result3,(int)((ulonglong)result3 >> 0x20));\n  result1 = __aeabi_fmul(DAT_20000edc,local_var7);\n  result1 = __aeabi_fdiv(result1,0x453b8000);\n  result3 = __aeabi_f2d(result1);\n  result3 = ceil((int)result3,(int)((ulonglong)result3 >> 0x20));\n  local_var6 = __aeabi_d2uiz((int)result3,(int)((ulonglong)result3 >> 0x20));\n  result3 = __floatunsidf(counter);\n  result3 = sqrt((int)result3,(int)((ulonglong)result3 >> 0x20));\n  result4 = __aeabi_f2d(param4);\n  result3 = __muldf3((int)result3,(int)((ulonglong)result3 >> 0x20),(int)result4,\n                   (int)((ulonglong)result4 >> 0x20));\n  result1 = __truncdfsf2((int)result3,(int)((ulonglong)result3 >> 0x20));\n  result1 = __aeabi_fmul(local_var7,result1);\n  result1 = __aeabi_fdiv(0x4c64e1c0,result1);\n  result3 = __aeabi_f2d(result1);\n  local_var5 = lround((int)result3,(int)((ulonglong)result3 >> 0x20));\n  min_value = 75000;\n  if (local_var5 < 75000) {\n    min_value = local_var5;\n  }\n  data1 = DAT_20000ed4;\n  data3 = DAT_20000ed6 ^ DAT_20000ee6 & 0xaa0;\n  if (param2 == '\\0') {\n    data3 = data3 ^ 0xaa0;\n  }\n  update_register_value(data3);\n  update_data(data1);\n  local_var14 = -(max_value >> 1);\n  local_var13 = min_value - DAT_20000ec9;\n  sum = 0;\n  delay_time = 10000;\n  temp_byte = input_flags;\n  local_var15 = local_var14;\n  local_var16 = local_var14;\n  while( true ) {\n    data2 = data1;\n    debounced_value = read_debounce();\n    if (param3 == '\\0') {\n      debounced_value = debounced_value ^ 0x1e;\n    }\n    if (((temp_byte & 1) != 0) && (local_var16 = local_var16 + value1, 0 < local_var16)) {\n      if ((debounced_value & 0x10) == 0) {\n        temp_byte = temp_byte & 0xfe;\n      }\n      else {\n        data2 = data2 ^ 0x10;\n      }\n      local_var16 = local_var16 - max_value;\n    }\n    if (((temp_byte & 2) != 0) && (local_var15 = local_var15 + value2, 0 < local_var15)) {\n      if ((debounced_value & 8) == 0) {\n        temp_byte = temp_byte & 0xfd;\n      }\n      else {\n        data2 = data2 ^ 0x440;\n      }\n      local_var15 = local_var15 - max_value;\n    }\n    if (((temp_byte & 4) != 0) && (local_var14 = local_var14 + value3, 0 < local_var14)) {\n      if ((debounced_value & 4) == 0) {\n        temp_byte = temp_byte & 0xfb;\n      }\n      else {\n        data2 = data2 ^ 0x100;\n      }\n      local_var14 = local_var14 - max_value;\n    }\n    if ((temp_byte == 0) || ((DAT_20000eaa & 0x10) != 0)) break;\n    update_data(data2);\n    delay_microseconds(DAT_20000ec9);\n    update_data(data1);\n    delay_microseconds(local_var13);\n    if ((local_var5 < min_value) && (delay_time = min_value + delay_time, 20000 < delay_time)) {\n      delay_time = delay_time - 20000;\n      sum = local_var6 + sum;\n      min_value = 60000000 / sum;\n      if (min_value < local_var5) {\n        min_value = local_var5;\n      }\n      local_var13 = min_value - DAT_20000ec9;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001994": "calculate_control_signal_08001994",
                "param_1": "input_flags",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "local_11": "counter",
                "local_5c": "value1",
                "local_58": "value2",
                "local_54": "value3",
                "local_4e": "data1",
                "local_4c": "local_var5",
                "local_48": "local_var6",
                "local_44": "local_var7",
                "local_40": "max_value",
                "local_3c": "debounced_value",
                "local_36": "data2",
                "local_34": "delay_time",
                "local_30": "sum",
                "local_2c": "local_var13",
                "local_28": "local_var14",
                "local_24": "local_var15",
                "local_20": "local_var16",
                "local_1a": "data3",
                "local_18": "min_value",
                "local_61": "temp_byte",
                "uVar1": "result1",
                "uVar2": "result2",
                "uVar3": "result3",
                "uVar4": "result4",
                "update_register_value_080018fc": "update_register_value",
                "update_data_080018cc": "update_data",
                "debounce_rd": "read_debounce",
                "delay_us": "delay_microseconds"
            },
            "calling": [
                "FUN_08001d4c"
            ],
            "called": [
                "FUN_08008894",
                "FUN_080078f4",
                "FUN_08009054",
                "FUN_080018cc",
                "FUN_08002828",
                "FUN_08008bf0",
                "FUN_08008eec",
                "FUN_08008c30",
                "FUN_080018fc",
                "FUN_0800854c",
                "FUN_080095b8",
                "FUN_080098d0",
                "FUN_08009318",
                "FUN_08008640",
                "FUN_0800b430",
                "FUN_08008590"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08001994": {
                    "1": "calculate_threshold",
                    "3": "calculate_square_root",
                    "2": "calculate",
                    "4": "calculate_control_signal"
                },
                "param_1": {
                    "1": "bit_flags",
                    "2": "sensor_flags",
                    "11": "input_flags",
                    "10": "flags"
                },
                "param_2": {
                    "1": "char_flag1",
                    "2": "is_param2_true",
                    "4": "param2",
                    "3": "invert_flag"
                },
                "param_3": {
                    "2": "is_param3_zero",
                    "1": "use_alternate_value",
                    "4": "flag2"
                },
                "param_4": {
                    "1": "input_param",
                    "11": "param4",
                    "4": "input_value",
                    "2": "param",
                    "7": "multiplier"
                },
                "local_11": {
                    "1": "updated_flag",
                    "3": "local_var19",
                    "2": "temp_char",
                    "8": "counter"
                },
                "local_5c": {
                    "5": "max_value1",
                    "2": "local_value1",
                    "1": "value_1_rounded",
                    "10": "value1",
                    "3": "local_var1"
                },
                "local_58": {
                    "1": "flag2",
                    "3": "local_var2",
                    "5": "max_value2",
                    "2": "temp_u_int2",
                    "10": "value2"
                },
                "local_54": {
                    "1": "speed3",
                    "2": "temp_u_int3",
                    "10": "value3",
                    "5": "max_value3",
                    "3": "local_var3"
                },
                "local_4e": {
                    "10": "data1",
                    "1": "data_1",
                    "3": "local_var4",
                    "2": "value4"
                },
                "local_4c": {
                    "2": "temp_u_int4",
                    "1": "rounded_value",
                    "3": "value4"
                },
                "local_48": {
                    "1": "rounded_value",
                    "2": "temp_int1",
                    "3": "local_var6"
                },
                "local_44": {
                    "1": "rounded_value",
                    "3": "local_var7",
                    "2": "truncated_float"
                },
                "local_40": {
                    "3": "max_value",
                    "1": "max_value_float",
                    "2": "current_value"
                },
                "local_3c": {
                    "2": "value9",
                    "1": "input_status",
                    "3": "local_var9",
                    "4": "debounce_value",
                    "7": "debounced_value"
                },
                "local_36": {
                    "1": "data_value_3",
                    "3": "local_var10",
                    "2": "updated_value",
                    "6": "data2"
                },
                "local_34": {
                    "1": "value6",
                    "3": "local_var11",
                    "7": "delay_time",
                    "2": "value11"
                },
                "local_30": {
                    "1": "running_sum",
                    "3": "local_var12",
                    "2": "value12",
                    "4": "sum"
                },
                "local_2c": {
                    "1": "time_diff",
                    "2": "difference",
                    "3": "local_var13"
                },
                "local_28": {
                    "3": "local_var14",
                    "1": "int_value4",
                    "2": "value14"
                },
                "local_24": {
                    "2": "value15",
                    "1": "variable15",
                    "3": "local_var15"
                },
                "local_20": {
                    "1": "temp3",
                    "2": "temp_int5",
                    "3": "local_var16"
                },
                "local_1a": {
                    "3": "local_var17",
                    "1": "var17",
                    "2": "temp_u_short3"
                },
                "local_18": {
                    "3": "local_var18",
                    "1": "limit",
                    "4": "min_value",
                    "2": "value18"
                },
                "local_61": {
                    "3": "local_flag",
                    "1": "result_byte",
                    "2": "temp_flag",
                    "5": "temp_byte"
                },
                "uVar1": {
                    "1": "multiplier",
                    "3": "temp_var1",
                    "8": "result1"
                },
                "uVar2": {
                    "1": "maximum",
                    "2": "temp_var2",
                    "5": "max_value",
                    "6": "result2",
                    "3": "temp2"
                },
                "uVar3": {
                    "2": "temp1",
                    "1": "sensor_value",
                    "4": "result3",
                    "3": "temp3"
                },
                "uVar4": {
                    "1": "sqrt_multiplier",
                    "4": "result4",
                    "2": "temp2",
                    "3": "temp4"
                },
                "FUNC_08002828": {
                    "1": "update_data"
                },
                "update_register_value_080018fc": {
                    "1": "update_register",
                    "5": "update_register_value"
                },
                "update_data_080018cc": {
                    "1": "update_data_value",
                    "5": "update_data"
                },
                "debounce_rd": {
                    "2": "read_debounce",
                    "1": "debounce_read"
                },
                "calculate_float_08009054": {
                    "1": "calculate_float_value",
                    "4": "calculate_float"
                },
                "calculate_product_080095b8": {
                    "6": "calculate_product"
                },
                "calculate_square_root_080098d0": {
                    "1": "calculate_square_root1",
                    "5": "calculate_square_root"
                },
                "calculate_floating_point_08009318": {
                    "1": "calculate_floating_point2",
                    "5": "calculate_floating_point"
                },
                "calculate_bitwise_or_080078f4": {
                    "1": "bitwise_or",
                    "5": "calculate_bitwise_or"
                },
                "calculate_shifted_value_08008bf0": {
                    "6": "calculate_shifted_value"
                },
                "convert_to_float_08008c30": {
                    "6": "convert_to_float"
                },
                "fill_memory_0800b430": {
                    "6": "fill_memory"
                },
                "reverse_bits_0800854c": {
                    "6": "reverse_bits"
                },
                "reverse_bits_08008590": {
                    "1": "reverse_bits",
                    "3": "reverse_bits_with_mask"
                },
                "calculate_float_08008eec": {
                    "1": "calculate_updated_float",
                    "2": "calculate_float"
                },
                "delay_us": {
                    "2": "delay_microseconds"
                },
                "FUN_08008640": {
                    "1": "reverse_bits_and_multiply"
                }
            }
        },
        "FUN_08001d4c": {
            "entrypoint": "0x08001d4c",
            "current_name": "perform_homing_cycle_08001d4c",
            "code": "\nvoid perform_homing_cycle_08001d4c(void)\n\n{\n  char updated_counter;\n  char counter;\n  \n  turn_on_device();\n  run_cycle(4,1,0,DAT_20000eec);\n  run_cycle(3,1,0,DAT_20000eec);\n  delay_milliseconds(DAT_20000ef0);\n  counter = '\\x02';\n  while( true ) {\n    updated_counter = counter + -1;\n    if (counter == '\\0') break;\n    run_cycle(7,0,1,DAT_20000ee8);\n    delay_milliseconds(DAT_20000ef0);\n    counter = updated_counter;\n    if ('\\0' < updated_counter) {\n      run_cycle(7,1,0,DAT_20000ee8);\n      delay_milliseconds(DAT_20000ef0);\n    }\n  }\n  turn_off_device();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001d4c": "perform_homing_cycle_08001d4c",
                "cVar1": "updated_counter",
                "local_9": "counter",
                "st_wake_up": "turn_on_device",
                "homing_cycle": "run_cycle",
                "delay_ms": "delay_milliseconds",
                "st_go_idle": "turn_off_device"
            },
            "calling": [
                "FUN_080024c4"
            ],
            "called": [
                "FUN_08001994",
                "FUN_08005790",
                "FUN_080057e4",
                "FUN_08002814"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08001d4c": {
                    "5": "perform_homing",
                    "23": "perform_homing_cycle",
                    "1": "perform_homing_sequence"
                },
                "param_1": {
                    "1": "motor_id",
                    "10": "axis",
                    "2": "cycle_type"
                },
                "param_2": {
                    "1": "homing_direction",
                    "3": "param2",
                    "2": "is_forward",
                    "4": "forward",
                    "6": "direction"
                },
                "param_3": {
                    "1": "flag2",
                    "3": "param3",
                    "8": "reverse"
                },
                "param_4": {
                    "1": "cycle_delay",
                    "3": "data",
                    "7": "delay"
                },
                "cVar1": {
                    "1": "previous_value",
                    "3": "updated_counter",
                    "2": "updated_loop_counter"
                },
                "local_9": {
                    "10": "loop_counter",
                    "3": "loop_count",
                    "5": "count",
                    "11": "counter",
                    "1": "remaining_cycles"
                },
                "st_wake_up": {
                    "1": "turn_on_device"
                },
                "homing_cycle": {
                    "1": "run_cycle"
                },
                "delay_ms": {
                    "2": "delay_milliseconds"
                },
                "DAT_20000eec": {
                    "1": "param1"
                },
                "DAT_20000ef0": {
                    "1": "delay_time"
                },
                "DAT_20000ee8": {
                    "1": "delay_value3"
                },
                "st_go_idle": {
                    "1": "perform_go_idle"
                },
                "FUN_08001994": {
                    "1": "",
                    "3": "homing_cycle"
                },
                "FUN_08005790": {
                    "1": "st_wake_up",
                    "3": "wake_up"
                },
                "FUN_080057e4": {
                    "1": "delay"
                },
                "FUNC_08002814": {
                    "1": "delay_milliseconds",
                    "2": "go_idle"
                }
            }
        },
        "FUN_08001ddc": {
            "entrypoint": "0x08001ddc",
            "current_name": "initialize_system_08001ddc",
            "code": "\nvoid initialize_system_08001ddc(void)\n\n{\n  initialize_serial();\n  initialize_settings();\n  initialize_st();\n  initialize_memory(&DAT_20000ea8,0,0x14);\n  DAT_20000ea8 = '\\x01';\n  DAT_20000ea9 = '\\x01';\n  do {\n    if (DAT_20000ea8 != '\\0') {\n      reset_serial_read_buffer();\n      initialize_plan();\n      initialize_gc();\n      initialize_protocol();\n      initialize_spindle();\n      initialize_coolant();\n      initialize_limits();\n      reset_st();\n      synchronize_current_position();\n      DAT_20000ea8 = '\\0';\n      DAT_20000eaa = 0;\n      if ((DAT_20000ee4 & 2) != 0) {\n        DAT_20000eb8 = 1;\n      }\n      if ((DAT_20000ea9 == '\\x01') && ((DAT_20000ee4 & 0x10) != 0)) {\n        DAT_20000ea9 = '\\x06';\n      }\n      if (DAT_20000ea9 == '\\x06') {\n        report_feedback(2);\n      }\n      else {\n        DAT_20000ea9 = '\\0';\n        execute_startup_protocol();\n      }\n    }\n    execute_runtime_protocol();\n    process_protocol();\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08001ddc": "initialize_system_08001ddc",
                "serial_init": "initialize_serial",
                "settings_init": "initialize_settings",
                "st_init": "initialize_st",
                "plan_init": "initialize_plan",
                "gc_init": "initialize_gc",
                "protocol_init": "initialize_protocol",
                "spindle_init": "initialize_spindle",
                "coolant_init": "initialize_coolant",
                "limits_init": "initialize_limits",
                "st_reset": "reset_st",
                "sys_sync_current_position": "synchronize_current_position",
                "report_feedback_message": "report_feedback",
                "protocol_execute_startup": "execute_startup_protocol",
                "protocol_execute_runtime": "execute_runtime_protocol",
                "protocol_process": "process_protocol",
                "serial_reset_read_buffer": "reset_serial_read_buffer",
                "memset": "initialize_memory"
            },
            "calling": [
                "FUN_08007540"
            ],
            "called": [
                "FUN_08008244",
                "FUN_08002f24",
                "FUN_0800192c",
                "FUN_080041a0",
                "FUN_080004ac",
                "FUN_080051b4",
                "FUN_0800283a",
                "FUN_080001f8",
                "FUN_080039a0",
                "FUN_08003a74",
                "FUN_08005238",
                "FUN_080039bc",
                "FUN_080082ba",
                "FUN_08005814",
                "FUN_0800b430",
                "FUN_0800583c",
                "FUN_08003f34"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08001ddc": {
                    "1": "initialize_controller",
                    "22": "initialize_system",
                    "2": "initialize",
                    "6": "initialize_machine"
                },
                "FUN_08008244": {
                    "3": "initialize_serial",
                    "20": "serial_init"
                },
                "FUN_08002f24": {
                    "3": "initialize_settings",
                    "21": "settings_init",
                    "1": "function_name_2"
                },
                "FUN_0800192c": {
                    "1": "function_name_3",
                    "3": "initialize_st",
                    "20": "st_init"
                },
                "FUN_080041a0": {
                    "2": "reset_serial_read_buffer",
                    "17": "serial_reset_read_buffer",
                    "4": "plan_init",
                    "1": "reset_read_buffer"
                },
                "FUN_080004ac": {
                    "1": "initialize_planning",
                    "4": "gc_init",
                    "17": "plan_init"
                },
                "FUN_080051b4": {
                    "1": "initialize_spindle",
                    "17": "gc_init",
                    "4": "protocol_init",
                    "2": "initialize_gc"
                },
                "FUN_0800283a": {
                    "1": "initialize_coolant",
                    "2": "initialize_protocol",
                    "4": "spindle_init",
                    "17": "protocol_init"
                },
                "FUN_080001f8": {
                    "2": "initialize_spindle",
                    "1": "function_name_8",
                    "17": "spindle_init",
                    "4": "coolant_init"
                },
                "FUN_080039a0": {
                    "1": "reset_st",
                    "2": "initialize_coolant",
                    "17": "coolant_init",
                    "4": "limits_init"
                },
                "FUN_08003a74": {
                    "1": "function_name_10",
                    "2": "initialize_limits",
                    "4": "st_reset",
                    "17": "limits_init"
                },
                "FUN_08005238": {
                    "1": "function_name_11",
                    "3": "sys_sync_current_position",
                    "14": "st_reset",
                    "2": "reset_st"
                },
                "FUN_080039bc": {
                    "2": "sync_current_position",
                    "1": "function_name_12",
                    "13": "sys_sync_current_position",
                    "3": "report_feedback_message"
                },
                "FUN_08005814": {
                    "1": "execute_runtime_protocol",
                    "3": "execute_runtime",
                    "2": "sys_sync_current_position",
                    "14": "report_feedback_message"
                },
                "FUN_0800b430": {
                    "2": "report_feedback_message",
                    "4": "protocol_execute_runtime",
                    "1": "execute_startup",
                    "12": "protocol_execute_startup"
                },
                "FUN_0800583c": {
                    "4": "protocol_process",
                    "12": "protocol_execute_runtime",
                    "1": "function_name_16",
                    "3": "protocol_execute_startup"
                },
                "FUN_08003f34": {
                    "1": "memset",
                    "13": "protocol_process",
                    "3": "report_feedback_message",
                    "2": "serial_reset_read_buffer"
                },
                "FUNC_080082ba": {
                    "1": "report_feedback_message",
                    "2": "execute_startup"
                },
                "serial_init": {
                    "7": "initialize_serial"
                },
                "settings_init": {
                    "7": "initialize_settings"
                },
                "st_init": {
                    "6": "initialize_st",
                    "1": "initialize_stepper"
                },
                "plan_init": {
                    "1": "initialize_motion_plan",
                    "5": "initialize_plan"
                },
                "gc_init": {
                    "7": "initialize_gc"
                },
                "protocol_init": {
                    "7": "initialize_protocol"
                },
                "spindle_init": {
                    "7": "initialize_spindle"
                },
                "coolant_init": {
                    "7": "initialize_coolant"
                },
                "limits_init": {
                    "7": "initialize_limits"
                },
                "st_reset": {
                    "1": "reset_stepper",
                    "6": "reset_st"
                },
                "sys_sync_current_position": {
                    "6": "synchronize_current_position",
                    "1": "synchronize_position"
                },
                "report_feedback_message": {
                    "2": "send_feedback_message",
                    "1": "display_feedback_message"
                },
                "protocol_execute_startup": {
                    "3": "execute_protocol_startup",
                    "4": "execute_startup_protocol"
                },
                "protocol_execute_runtime": {
                    "4": "execute_runtime_protocol",
                    "3": "execute_protocol_runtime"
                },
                "protocol_process": {
                    "8": "process_protocol",
                    "1": "protocol_process"
                },
                "FUNC_08008244": {
                    "1": "function_name_1"
                },
                "serial_reset_read_buffer": {
                    "5": "reset_serial_read_buffer"
                },
                "DAT_20000ea8": {
                    "1": "startup_flag"
                },
                "DAT_20000ea9": {
                    "1": "state_flag"
                },
                "DAT_20000eaa": {
                    "1": "temp_variable"
                },
                "DAT_20000ee4": {
                    "1": "status_flags"
                },
                "DAT_20000eb8": {
                    "1": "temp_variable2"
                },
                "memset": {
                    "1": "initialize_memory"
                }
            }
        },
        "FUN_08001e98": {
            "entrypoint": "0x08001e98",
            "current_name": "execute_protocol_08001e98",
            "code": "\nvoid execute_protocol_08001e98(undefined4 buffer1,undefined4 buffer2,undefined4 buffer3,undefined4 buffer4,\n                 undefined flag)\n\n{\n  int check_result;\n  \n  if (DAT_20000ea9 != '\\a') {\n    do {\n      execute_protocol_08001e98_runtime();\n      if (DAT_20000ea8 != '\\0') {\n        return;\n      }\n      check_result = check_full_buffer();\n    } while (check_result != 0);\n    buffer_line(buffer1,buffer2,buffer3,buffer4,flag);\n    if (DAT_20000ea9 == '\\0') {\n      DAT_20000ea9 = '\\x02';\n    }\n    if (DAT_20000eb8 != '\\0') {\n      start_cycle();\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001e98": "execute_protocol_08001e98",
                "param_1": "buffer1",
                "param_2": "buffer2",
                "param_3": "buffer3",
                "param_4": "buffer4",
                "param_5": "flag",
                "iVar1": "check_result",
                "protocol_execute_runtime": "execute_protocol_runtime",
                "plan_check_full_buffer": "check_full_buffer",
                "plan_buffer_line": "buffer_line",
                "st_cycle_start": "start_cycle"
            },
            "calling": [
                "FUN_080005b4",
                "FUN_080024c4",
                "FUN_08001f00"
            ],
            "called": [
                "FUN_08003a74",
                "FUN_0800585c",
                "FUN_08002fac",
                "FUN_08003004"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08001e98": {
                    "1": "execute_buffered_protocol",
                    "23": "execute_protocol",
                    "2": "execute_buffer_plan"
                },
                "param_1": {
                    "1": "first_param",
                    "2": "line_param_1",
                    "4": "arg1",
                    "8": "buffer1",
                    "3": "param1"
                },
                "param_2": {
                    "3": "param2",
                    "8": "buffer2",
                    "1": "line_2",
                    "2": "buffer_2",
                    "4": "buffer_param_2"
                },
                "param_3": {
                    "2": "buffer_3",
                    "1": "third_param",
                    "3": "param3",
                    "8": "buffer3",
                    "4": "arg3"
                },
                "param_4": {
                    "3": "param4",
                    "1": "buffer_height",
                    "2": "line_param_4",
                    "4": "buffer_param_4",
                    "8": "buffer4"
                },
                "param_5": {
                    "9": "flag",
                    "1": "byte_value",
                    "4": "buffer_param_5",
                    "2": "line_param_5",
                    "3": "param5"
                },
                "iVar1": {
                    "11": "buffer_check_result",
                    "14": "check_result",
                    "1": "result"
                },
                "protocol_execute_runtime": {
                    "7": "execute_protocol_runtime",
                    "1": "execute_protocol"
                },
                "plan_check_full_buffer": {
                    "3": "check_full_buffer_plan",
                    "5": "check_full_buffer"
                },
                "plan_buffer_line": {
                    "5": "buffer_line",
                    "3": "buffer_line_plan"
                },
                "st_cycle_start": {
                    "1": "start_st_cycle",
                    "7": "start_cycle"
                },
                "DAT_20000ea9": {
                    "1": "protocol_flag"
                },
                "DAT_20000ea8": {
                    "2": "exit_flag",
                    "1": "buffer_data_2"
                },
                "DAT_20000eb8": {
                    "1": "buffer_data_3",
                    "2": "cycle_flag"
                }
            }
        },
        "FUN_08001f00": {
            "entrypoint": "0x08001f00",
            "current_name": "calculate_angle_08001f00",
            "code": "\nvoid calculate_angle_08001f00(int point1,undefined4 *array2,int point2,byte index1,byte index2,byte index3\n                 ,undefined4 param7,char flag,undefined4 param9,char param10)\n\n{\n  undefined4 result1;\n  undefined4 result2;\n  int comparison;\n  uint result3;\n  undefined8 temp5;\n  undefined8 temp6;\n  uint result_array [4];\n  undefined4 temp1;\n  undefined4 temp2;\n  undefined4 temp3;\n  undefined4 temp4;\n  undefined4 temp5;\n  undefined4 temp6;\n  ushort loop_counter;\n  undefined4 distance;\n  undefined4 temp9;\n  undefined4 temp10;\n  uint temp11;\n  undefined4 temp12;\n  undefined4 temp13;\n  char temp14;\n  ushort loop_index;\n  undefined4 angle;\n  uint temp17;\n  uint temp18;\n  \n  temp13 = __addsf3(*(undefined4 *)((uint)index1 * 4 + point1),\n                      *(undefined4 *)((uint)index1 * 4 + point2));\n  temp12 = __addsf3(*(undefined4 *)((uint)index2 * 4 + point1),\n                      *(undefined4 *)((uint)index2 * 4 + point2));\n  temp11 = __aeabi_fsub(array2[index3],*(undefined4 *)((uint)index3 * 4 + point1));\n  temp18 = *(uint *)((uint)index1 * 4 + point2) ^ 0x80000000;\n  temp17 = *(uint *)((uint)index2 * 4 + point2) ^ 0x80000000;\n  temp10 = __aeabi_fsub(array2[index1],temp13);\n  temp9 = __aeabi_fsub(array2[index2],temp12);\n  result1 = __aeabi_fmul(temp18,temp9);\n  result2 = __aeabi_fmul(temp17,temp10);\n  result1 = __aeabi_fsub(result1,result2);\n  temp5 = __aeabi_f2d(result1);\n  result1 = __aeabi_fmul(temp18,temp10);\n  result2 = __aeabi_fmul(temp17,temp9);\n  result1 = __addsf3(result1,result2);\n  temp6 = __aeabi_f2d(result1);\n  temp5 = arctan2((int)temp5,(int)((ulonglong)temp5 >> 0x20),(int)temp6,\n                (int)((ulonglong)temp6 >> 0x20));\n  angle = __truncdfsf2((int)temp5,(int)((ulonglong)temp5 >> 0x20));\n  if (param10 == '\\0') {\n    comparison = __aeabi_fcmple(angle,0);\n    if (comparison != 0) {\n      temp5 = __aeabi_f2d(angle);\n      temp5 = __aeabi_dadd((int)temp5,(int)((ulonglong)temp5 >> 0x20),0x54442d18,0x401921fb);\n      angle = __truncdfsf2((int)temp5,(int)((ulonglong)temp5 >> 0x20));\n    }\n  }\n  else {\n    comparison = __aeabi_fcmpge(angle,0);\n    if (comparison != 0) {\n      temp5 = __aeabi_f2d(angle);\n      temp5 = __subdf3((int)temp5,(int)((ulonglong)temp5 >> 0x20),0x54442d18,0x401921fb);\n      angle = __truncdfsf2((int)temp5,(int)((ulonglong)temp5 >> 0x20));\n    }\n  }\n  result1 = __aeabi_fmul(angle,param9);\n  temp5 = __aeabi_f2d(result1);\n  temp6 = __aeabi_f2d(temp11 & 0x7fffffff);\n  temp5 = calculate_hypotenuse((int)temp5,(int)((ulonglong)temp5 >> 0x20),(int)temp6,\n                (int)((ulonglong)temp6 >> 0x20));\n  distance = __truncdfsf2((int)temp5,(int)((ulonglong)temp5 >> 0x20));\n  comparison = __aeabi_fcmpeq(distance,0);\n  if (comparison == 0) {\n    result1 = __aeabi_fdiv(distance,DAT_20000ed8);\n    temp5 = __aeabi_f2d(result1);\n    temp5 = round_floor((int)temp5,(int)((ulonglong)temp5 >> 0x20));\n    loop_counter = __aeabi_d2uiz((int)temp5,(int)((ulonglong)temp5 >> 0x20));\n    if (flag != '\\0') {\n      result1 = __floatsisf(loop_counter);\n      param7 = __aeabi_fmul(param7,result1);\n    }\n    result1 = __floatsisf(loop_counter);\n    temp6 = __aeabi_fdiv(angle,result1);\n    result1 = __floatsisf(loop_counter);\n    temp5 = __aeabi_fdiv(temp11,result1);\n    temp5 = __aeabi_f2d(temp6);\n    temp5 = __muldf3((int)temp5,(int)((ulonglong)temp5 >> 0x20),0,0x3fe00000);\n    temp6 = __aeabi_f2d(temp6);\n    temp5 = __muldf3((int)temp5,(int)((ulonglong)temp5 >> 0x20),(int)temp6,\n                     (int)((ulonglong)temp6 >> 0x20));\n    temp5 = __subdf3(0,0x3ff00000,(int)temp5,(int)((ulonglong)temp5 >> 0x20));\n    temp4 = __truncdfsf2((int)temp5,(int)((ulonglong)temp5 >> 0x20));\n    temp3 = temp6;\n    temp14 = '\\0';\n    result_array[index3] = *(uint *)(point1 + (uint)index3 * 4);\n    for (loop_index = 1; loop_index < loop_counter; loop_index = loop_index + 1) {\n      if ((int)temp14 < (int)(uint)DAT_20000efa) {\n        result1 = __aeabi_fmul(temp18,temp3);\n        result2 = __aeabi_fmul(temp17,temp4);\n        result_array[3] = __addsf3(result1,result2);\n        result1 = __aeabi_fmul(temp18,temp4);\n        result2 = __aeabi_fmul(temp17,temp3);\n        temp18 = __aeabi_fsub(result1,result2);\n        temp17 = result_array[3];\n        temp14 = temp14 + '\\x01';\n      }\n      else {\n        result1 = __floatsisf(loop_index);\n        result1 = __aeabi_fmul(result1,temp6);\n        temp5 = __aeabi_f2d(result1);\n        temp5 = cos((int)temp5,(int)((ulonglong)temp5 >> 0x20));\n        temp2 = __truncdfsf2((int)temp5,(int)((ulonglong)temp5 >> 0x20));\n        result1 = __floatsisf(loop_index);\n        result1 = __aeabi_fmul(result1,temp6);\n        temp5 = __aeabi_f2d(result1);\n        temp5 = sin((int)temp5,(int)((ulonglong)temp5 >> 0x20));\n        temp1 = __truncdfsf2((int)temp5,(int)((ulonglong)temp5 >> 0x20));\n        result1 = __aeabi_fmul(*(uint *)((uint)index1 * 4 + point2) ^ 0x80000000,temp2);\n        result2 = __aeabi_fmul(*(undefined4 *)((uint)index2 * 4 + point2),temp1);\n        temp18 = __addsf3(result1,result2);\n        result1 = __aeabi_fmul(*(uint *)((uint)index1 * 4 + point2) ^ 0x80000000,temp1);\n        result2 = __aeabi_fmul(*(undefined4 *)((uint)index2 * 4 + point2),temp2);\n        temp17 = __aeabi_fsub(result1,result2);\n        temp14 = '\\0';\n      }\n      result3 = __addsf3(temp13,temp18);\n      result_array[index1] = result3;\n      result3 = __addsf3(temp12,temp17);\n      result_array[index2] = result3;\n      result3 = __addsf3(result_array[index3],temp5);\n      result_array[index3] = result3;\n      draw_line(result_array[0],result_array[1],result_array[2],param7,flag);\n      if (DAT_20000ea8 != '\\0') {\n        return;\n      }\n    }\n    draw_line(*array2,array2[1],array2[2],param7,flag);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001f00": "calculate_angle_08001f00",
                "param_1": "point1",
                "param_2": "array2",
                "param_3": "point2",
                "param_4": "index1",
                "param_5": "index2",
                "param_6": "index3",
                "param_7": "param7",
                "param_8": "flag",
                "param_9": "param9",
                "param_10": "param10",
                "uVar1": "result1",
                "uVar2": "result2",
                "iVar3": "comparison",
                "uVar4": "result3",
                "uVar5": "temp5",
                "uVar6": "temp6",
                "local_6c": "result_array",
                "local_5c": "temp1",
                "local_58": "temp2",
                "local_54": "temp3",
                "local_50": "temp4",
                "local_4c": "temp5",
                "local_48": "temp6",
                "local_42": "loop_counter",
                "local_40": "distance",
                "local_3c": "temp9",
                "local_38": "temp10",
                "local_34": "temp11",
                "local_30": "temp12",
                "local_2c": "temp13",
                "local_27": "temp14",
                "local_26": "loop_index",
                "local_24": "angle",
                "local_20": "temp17",
                "local_1c": "temp18",
                "mc_line": "draw_line",
                "atan2": "arctan2",
                "floor": "round_floor",
                "hypot": "calculate_hypotenuse"
            },
            "calling": [
                "FUN_080005b4"
            ],
            "called": [
                "FUN_08009250",
                "FUN_08009818",
                "FUN_08009054",
                "FUN_080096e8",
                "FUN_08008bf0",
                "FUN_08008eec",
                "FUN_08001e98",
                "FUN_08008c30",
                "FUN_080082d4",
                "FUN_080082d0",
                "FUN_08008cd8",
                "FUN_08009410",
                "FUN_08009214",
                "FUN_08008cdc",
                "FUN_080094c0",
                "FUN_08008e44",
                "FUN_0800923c",
                "FUN_08008640",
                "FUN_0800981c",
                "FUN_08008590"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08001f00": {
                    "9": "calculate_angles",
                    "1": "calculate_coordinates",
                    "15": "calculate_angle"
                },
                "param_1": {
                    "1": "start",
                    "6": "point1",
                    "2": "array1",
                    "3": "base_address"
                },
                "param_2": {
                    "1": "point_coordinates",
                    "2": "point2"
                },
                "param_3": {
                    "1": "other_address",
                    "2": "point3",
                    "4": "point2"
                },
                "param_4": {
                    "2": "angle1",
                    "7": "index1",
                    "1": "input4",
                    "5": "byte1"
                },
                "param_5": {
                    "1": "z1",
                    "5": "byte2",
                    "2": "param5",
                    "7": "index2"
                },
                "param_6": {
                    "1": "source_param_6",
                    "7": "index3",
                    "2": "param6",
                    "4": "index",
                    "5": "byte3"
                },
                "param_7": {
                    "2": "scale1",
                    "4": "constant1",
                    "1": "color",
                    "6": "param7"
                },
                "param_8": {
                    "4": "flag1",
                    "2": "param2",
                    "1": "char_value_1",
                    "3": "param8"
                },
                "param_9": {
                    "1": "scale3",
                    "2": "param3",
                    "4": "constant2",
                    "6": "param9"
                },
                "param_10": {
                    "1": "char_value_2",
                    "5": "param10",
                    "4": "condition2",
                    "2": "param4"
                },
                "uVar1": {
                    "1": "temp_var1",
                    "7": "temp1",
                    "19": "result1"
                },
                "uVar2": {
                    "1": "result_2",
                    "19": "result2",
                    "7": "temp2"
                },
                "iVar3": {
                    "1": "comparison1",
                    "7": "temp3",
                    "2": "compare_result",
                    "8": "comparison",
                    "6": "comparison_result"
                },
                "uVar4": {
                    "1": "u_var4",
                    "2": "temp_var",
                    "7": "temp4",
                    "6": "temp1"
                },
                "uVar5": {
                    "1": "temp_double_1",
                    "7": "temp5",
                    "2": "temp_var1",
                    "6": "temp2"
                },
                "uVar6": {
                    "1": "result4",
                    "2": "temp_var2",
                    "7": "temp6",
                    "6": "temp3"
                },
                "local_6c": {
                    "2": "coordinates",
                    "1": "array1",
                    "5": "temp_array",
                    "7": "result_array"
                },
                "local_5c": {
                    "1": "temp3",
                    "5": "temp1",
                    "2": "temp4"
                },
                "local_58": {
                    "1": "temp4",
                    "5": "temp2",
                    "2": "temp5"
                },
                "local_54": {
                    "1": "result4",
                    "2": "temp9",
                    "5": "temp3"
                },
                "local_50": {
                    "1": "local_variable_4",
                    "5": "temp4",
                    "2": "temp7"
                },
                "local_4c": {
                    "1": "local_variable_e",
                    "2": "temp8",
                    "5": "temp5"
                },
                "local_48": {
                    "1": "temp9",
                    "2": "temp12",
                    "5": "local_var6"
                },
                "local_42": {
                    "4": "angle",
                    "3": "temp7",
                    "2": "iteration_count",
                    "1": "temp10"
                },
                "local_40": {
                    "3": "hypotenuse",
                    "1": "scale3",
                    "4": "distance",
                    "2": "temp13"
                },
                "local_3c": {
                    "1": "temp_value7",
                    "3": "temp9",
                    "2": "temp14"
                },
                "local_38": {
                    "1": "temp9",
                    "2": "temp8",
                    "3": "temp10"
                },
                "local_34": {
                    "1": "temp_value3",
                    "3": "temp11",
                    "2": "temp9"
                },
                "local_30": {
                    "1": "unknown_var11",
                    "3": "local_var12",
                    "2": "temp10"
                },
                "local_2c": {
                    "1": "temp9",
                    "2": "temp18",
                    "3": "temp13"
                },
                "local_27": {
                    "3": "temp14",
                    "1": "temp_flag"
                },
                "local_26": {
                    "1": "local_variable16",
                    "4": "counter",
                    "3": "local_var15",
                    "5": "loop_index"
                },
                "local_24": {
                    "1": "temp13",
                    "3": "local_var16",
                    "9": "angle"
                },
                "local_20": {
                    "1": "temp9",
                    "2": "distance",
                    "3": "temp20"
                },
                "local_1c": {
                    "1": "value1",
                    "3": "local_var18"
                },
                "local_46": {
                    "1": "temp_float_var1"
                },
                "local_4a": {
                    "1": "temp_float_var2"
                },
                "FancyFunction": {
                    "1": "calculate_angle"
                },
                "local_27_": {
                    "1": "flag"
                },
                "FUN_08009250": {
                    "1": "check_function1"
                },
                "FUN_08009054": {
                    "1": "function2"
                },
                "FUN_080096e8": {
                    "1": "function3"
                },
                "FUN_08008bf0": {
                    "1": "function4"
                },
                "FUN_08008eec": {
                    "1": "function5"
                },
                "FUN_08001e98": {
                    "1": "function6"
                },
                "FUN_08008c30": {
                    "1": "function7"
                },
                "FUN_080082d4": {
                    "1": "function8"
                },
                "FUN_080082d0": {
                    "1": "function9"
                },
                "FUN_08008cd8": {
                    "1": "function10"
                },
                "FUN_08009410": {
                    "1": "function11"
                },
                "FUN_08009214": {
                    "1": "check_function2"
                },
                "FUN_08008cdc": {
                    "1": "function12"
                },
                "FUN_080094c0": {
                    "1": "function13"
                },
                "FUN_08008e44": {
                    "1": "function14"
                },
                "FUN_0800923c": {
                    "1": "check_function3"
                },
                "FUN_08008640": {
                    "1": "function15"
                },
                "FUN_0800981c": {
                    "1": "function16"
                },
                "FUN_08008590": {
                    "1": "function17"
                },
                "DAT_20000ed8": {
                    "1": "constant3"
                },
                "DAT_20000efa": {
                    "1": "constant4"
                },
                "DAT_20000ea8": {
                    "1": "flag3"
                },
                "mc_line": {
                    "1": "draw_line"
                },
                "atan2": {
                    "1": "arctan2"
                },
                "floor": {
                    "1": "round_floor"
                },
                "hypot": {
                    "1": "calculate_hypotenuse"
                },
                "round_floor": {
                    "1": "round_down"
                }
            }
        },
        "FUN_08002408": {
            "entrypoint": "0x08002408",
            "current_name": "calculate_delay_and_execute_protocol_08002408",
            "code": "\nvoid calculate_delay_and_execute_protocol_08002408(undefined4 input_value)\n\n{\n  undefined2 result_1;\n  undefined4 multiplied_value;\n  undefined4 subtracted_value;\n  undefined8 converted_value;\n  ushort iteration_count;\n  \n  multiplied_value = __aeabi_fmul(input_value,0x41a00000);\n  converted_value = __aeabi_f2d(multiplied_value);\n  converted_value = floor((int)converted_value,(int)((ulonglong)converted_value >> 0x20));\n  iteration_count = __aeabi_d2uiz((int)converted_value,(int)((ulonglong)converted_value >> 0x20));\n  plan_synchronize();\n  multiplied_value = __aeabi_fmul(input_value,0x447a0000);\n  subtracted_value = __floatsisf((uint)iteration_count * 0x32);\n  multiplied_value = __aeabi_fsub(multiplied_value,subtracted_value);\n  converted_value = __aeabi_f2d(multiplied_value);\n  converted_value = floor((int)converted_value,(int)((ulonglong)converted_value >> 0x20));\n  result_1 = __aeabi_d2uiz((int)converted_value,(int)((ulonglong)converted_value >> 0x20));\n  delay_ms(result_1);\n  while ((iteration_count != 0 && (protocol_execute_runtime(), DAT_20000ea8 == '\\0'))) {\n    delay_ms(0x32);\n    iteration_count = iteration_count - 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002408": "calculate_delay_and_execute_protocol_08002408",
                "param_1": "input_value",
                "uVar1": "result_1",
                "uVar2": "multiplied_value",
                "uVar3": "subtracted_value",
                "uVar4": "converted_value",
                "local_12": "iteration_count",
                "_delay_ms": "delay_ms"
            },
            "calling": [
                "FUN_080005b4"
            ],
            "called": [
                "FUN_08008cd8",
                "FUN_08003a74",
                "FUN_08002fd4",
                "FUN_080094c0",
                "FUN_08008e44",
                "FUN_08002814",
                "FUN_080002a0",
                "FUN_08008bf0",
                "FUN_08008eec",
                "FUN_08008590"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08002408": {
                    "1": "calculate_delay_and_execute",
                    "10": "calculate_delay_and_execute_protocol",
                    "9": "calculate_delay",
                    "2": "synchronize_and_delay"
                },
                "param_1": {
                    "1": "input_param",
                    "26": "input_value"
                },
                "uVar1": {
                    "2": "delay_duration",
                    "1": "result",
                    "6": "result_1",
                    "4": "converted_delay"
                },
                "uVar2": {
                    "1": "multiplier",
                    "12": "multiplied_value",
                    "2": "calculated_value_2",
                    "5": "result_2"
                },
                "uVar3": {
                    "1": "mul_result_2",
                    "5": "result_3",
                    "6": "subtracted_value",
                    "2": "calculated_value_3"
                },
                "uVar4": {
                    "1": "converted_delay_floor",
                    "7": "converted_value",
                    "5": "result_4",
                    "3": "converted_double",
                    "2": "calculated_value_4"
                },
                "local_12": {
                    "6": "remaining_iterations",
                    "1": "count_value",
                    "4": "loop_count",
                    "3": "delay_count",
                    "8": "iteration_count"
                },
                "FUN_08008cd8": {
                    "1": "perform_synchronization"
                },
                "FUN_08003a74": {
                    "1": "delay_ms"
                },
                "FUN_08002fd4": {
                    "1": "protocol_execute_runtime"
                },
                "FUN_080094c0": {
                    "1": "floor"
                },
                "FUN_08008e44": {
                    "1": "perform_additional_calculation"
                },
                "FUNC_08002814": {
                    "1": "delay_ms"
                },
                "FUN_080002a0": {
                    "1": "protocol_execute_runtime"
                },
                "FUN_08008bf0": {
                    "1": "delay_ms"
                },
                "FUN_08008eec": {
                    "1": "perform_extra_calculation"
                },
                "FUN_08008590": {
                    "1": "calculate"
                },
                "_delay_ms": {
                    "1": "delay_ms"
                }
            }
        },
        "FUN_080024c4": {
            "entrypoint": "0x080024c4",
            "current_name": "initialize_system_080024c4",
            "code": "\nvoid initialize_system_080024c4(void)\n\n{\n  undefined4 result1;\n  undefined4 result2;\n  undefined4 result3;\n  char is_condition3;\n  char is_enabled2;\n  char is_condition1;\n  \n  DAT_20000ea9 = 5;\n  DAT_20000e4c = 0;\n  move_to_home();\n  execute_runtime_protocol();\n  if (DAT_20000ea8 == '\\0') {\n    clear_memory(&DAT_20000eac,0,0xc);\n    sync_current_position();\n    DAT_20000ea9 = 0;\n    if ((DAT_20000ee6 & 0x20) == 0) {\n      is_condition1 = -1;\n    }\n    else {\n      is_condition1 = '\\x01';\n    }\n    if ((DAT_20000ee6 & 0x80) == 0) {\n      is_enabled2 = -1;\n    }\n    else {\n      is_enabled2 = '\\x01';\n    }\n    if ((DAT_20000ee6 & 0x200) == 0) {\n      is_condition3 = -1;\n    }\n    else {\n      is_condition3 = '\\x01';\n    }\n    result1 = convert_int_to_float((int)is_condition1);\n    result1 = multiply_float(result1,DAT_20000ef4);\n    result2 = convert_int_to_float((int)is_enabled2);\n    result2 = multiply_float(result2,DAT_20000ef4);\n    result3 = convert_int_to_float((int)is_condition3);\n    result3 = multiply_float(result3,DAT_20000ef4);\n    draw_line(result1,result2,result3,DAT_20000eec,0);\n    start_cycle();\n    synchronize_plan();\n    sync_current_position();\n    if ((DAT_20000ee4 & 8) != 0) {\n      DAT_20000e4c = 1;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080024c4": "initialize_system_080024c4",
                "local_13": "is_condition3",
                "local_12": "is_enabled2",
                "local_11": "is_condition1",
                "uVar1": "result1",
                "uVar2": "result2",
                "uVar3": "result3",
                "__floatsisf": "convert_int_to_float",
                "__aeabi_fmul": "multiply_float",
                "mc_line": "draw_line",
                "st_cycle_start": "start_cycle",
                "plan_synchronize": "synchronize_plan",
                "limits_go_home": "move_to_home",
                "protocol_execute_runtime": "execute_runtime_protocol",
                "memset": "clear_memory",
                "sys_sync_current_position": "sync_current_position"
            },
            "calling": [
                "FUN_08003b98"
            ],
            "called": [
                "FUN_0800585c",
                "FUN_08003a74",
                "FUN_08002fd4",
                "FUN_08001d4c",
                "FUN_08008e44",
                "FUN_0800283a",
                "FUN_0800b430",
                "FUN_08008eec",
                "FUN_08001e98"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080024c4": {
                    "4": "initialize_and_execute",
                    "2": "initialize",
                    "1": "initialize_and_sync",
                    "17": "initialize_system"
                },
                "local_13": {
                    "2": "is_limit3_enabled",
                    "1": "is_limit_switch_negative"
                },
                "local_12": {
                    "1": "is_home_enabled",
                    "2": "is_condition2"
                },
                "local_11": {
                    "1": "is_condition_1_true",
                    "2": "limit1"
                },
                "uVar1": {
                    "1": "condition1_result",
                    "2": "result1"
                },
                "uVar2": {
                    "1": "y_velocity",
                    "2": "result2"
                },
                "uVar3": {
                    "1": "scaled_motor",
                    "2": "result3"
                },
                "FUN_0800585c": {
                    "1": "reverse_something",
                    "10": "limits_go_home"
                },
                "FUN_08003a74": {
                    "1": "check_flag",
                    "10": "protocol_execute_runtime"
                },
                "DAT_20000ea8": {
                    "1": "is_initialized"
                },
                "DAT_20000eac": {
                    "1": "system_data"
                },
                "FUN_08002fd4": {
                    "1": "memset_current_position",
                    "6": "sys_sync_current_position"
                },
                "DAT_20000ee6": {
                    "1": "flags"
                },
                "__floatsisf": {
                    "1": "convert_integer_to_float",
                    "2": "integer_to_float"
                },
                "__aeabi_fmul": {
                    "1": "float_multiply",
                    "2": "multiply_floats",
                    "4": "multiply_float"
                },
                "DAT_20000ef4": {
                    "1": "float_var",
                    "2": "scaling_factor"
                },
                "mc_line": {
                    "1": "draw_mc_line",
                    "6": "draw_line"
                },
                "DAT_20000eec": {
                    "1": "arg1"
                },
                "st_cycle_start": {
                    "8": "start_cycle",
                    "1": "st_cycle_start"
                },
                "plan_synchronize": {
                    "7": "synchronize_plan",
                    "1": "plan_synchronize"
                },
                "DAT_20000ee4": {
                    "1": "options",
                    "2": "data_flag"
                },
                "FUN_0800283a": {
                    "1": "function_e",
                    "3": "mc_line"
                },
                "FUN_0800b430": {
                    "1": "sys_sync_current_position2",
                    "2": "st_cycle_start"
                },
                "FUN_08008eec": {
                    "1": "reverse_something3",
                    "3": "plan_synchronize"
                },
                "FUN_08001e98": {
                    "1": "do_something6"
                },
                "limits_go_home": {
                    "1": "set_limits"
                },
                "protocol_execute_runtime": {
                    "3": "execute_runtime_protocol",
                    "1": "execute_protocol"
                },
                "memset": {
                    "3": "clear_memory",
                    "1": "reset_data"
                },
                "sys_sync_current_position": {
                    "2": "synchronize_current_position",
                    "4": "sync_current_position"
                },
                "FUN_08001d4c": {
                    "1": "do_something3",
                    "3": "mc_line"
                },
                "FUN_08008e44": {
                    "1": "mc_line",
                    "3": "st_cycle_start"
                },
                "DAT_20000ea9": {
                    "1": "error_code"
                },
                "DAT_20000e4c": {
                    "1": "is_cycle_start"
                },
                "DAT_20000eea": {
                    "1": "cycle_start_value"
                }
            }
        },
        "FUN_080025e8": {
            "entrypoint": "0x080025e8",
            "current_name": "stop_and_idle_080025e8",
            "code": "\nvoid stop_and_idle_080025e8(void)\n\n{\n  if ((DAT_20000eaa & 0x10) == 0) {\n    DAT_20000eaa = DAT_20000eaa | 0x10;\n    stop_spindle();\n    stop_coolant();\n    if (DAT_20000ea9 - 3 < 3) {\n      DAT_20000eaa = DAT_20000eaa | 0x20;\n      go_idle();\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080025e8": "stop_and_idle_080025e8",
                "spindle_stop": "stop_spindle",
                "coolant_stop": "stop_coolant",
                "st_go_idle": "go_idle"
            },
            "calling": [
                "FUN_08003a18",
                "FUN_08005900",
                "FUN_080005b4",
                "FUN_0800195c",
                "FUN_08003b98"
            ],
            "called": [
                "FUN_080057e4",
                "FUN_08005250",
                "FUN_08000210"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080025e8": {
                    "1": "update_system_state",
                    "2": "stop_spindle_and_coolant",
                    "6": "check_and_stop_spindle",
                    "9": "stop_and_idle"
                },
                "FUN_080057e4": {
                    "1": "reverse_something",
                    "18": "spindle_stop",
                    "5": "stop_spindle"
                },
                "FUN_08005250": {
                    "19": "coolant_stop",
                    "1": "check_idle_status",
                    "6": "stop_coolant"
                },
                "FUN_08000210": {
                    "1": "calculate_threshold",
                    "2": "idle_state",
                    "14": "st_go_idle",
                    "9": "go_idle"
                },
                "DAT_20000eaa": {
                    "1": "flags",
                    "3": "status_flags"
                },
                "DAT_20000ea9": {
                    "1": "data_value",
                    "2": "some_value",
                    "3": "counter"
                },
                "main": {
                    "1": "main"
                },
                "original_function_name": {
                    "1": "new_function_name"
                },
                "original_parameter_name_1": {
                    "1": "new_parameter_name_1"
                },
                "original_parameter_name_2": {
                    "1": "new_parameter_name_2"
                },
                "original_variable_name_1": {
                    "1": "new_variable_name_1"
                },
                "original_variable_name_2": {
                    "1": "new_variable_name_2"
                },
                "spindle_stop": {
                    "3": "stop_spindle"
                },
                "coolant_stop": {
                    "3": "stop_coolant"
                },
                "st_go_idle": {
                    "2": "go_idle"
                }
            }
        },
        "FUN_08002638": {
            "entrypoint": "0x08002638",
            "current_name": "parse_integer_08002638",
            "code": "\nundefined4 parse_integer_08002638(int base_address,byte *input_string,uint *result)\n\n{\n  byte digit;\n  bool is_negative;\n  bool is_decimal;\n  int comparison_result;\n  char *current_char;\n  char *next_char;\n  undefined4 return_value;\n  undefined8 temp_value;\n  uint float_value;\n  byte digit_count;\n  char exponent;\n  int integer_part;\n  char current_digit;\n  char *current_position;\n  \n  next_char = (char *)(base_address + (uint)*input_string);\n  current_char = next_char + 1;\n  current_digit = *next_char;\n  is_negative = false;\n  if (current_digit == '-') {\n    is_negative = true;\n    current_digit = *current_char;\n    current_position = next_char + 2;\n  }\n  else {\n    current_position = current_char;\n    if (current_digit == '+') {\n      current_position = next_char + 2;\n      current_digit = *current_char;\n    }\n  }\n  integer_part = 0;\n  exponent = '\\0';\n  digit_count = 0;\n  is_decimal = false;\n  do {\n    digit = current_digit - 0x30;\n    if (digit < 10) {\n      digit_count = digit_count + 1;\n      if (digit_count < 9) {\n        if (is_decimal) {\n          exponent = exponent + -1;\n        }\n        integer_part = (uint)digit + integer_part * 10;\n      }\n      else if (!is_decimal) {\n        exponent = exponent + '\\x01';\n      }\n    }\n    else {\n      if ((digit != 0xfe) || (is_decimal)) {\n        if (digit_count == 0) {\n          return_value = 0;\n        }\n        else {\n          float_value = __floatunsisf(integer_part);\n          comparison_result = __aeabi_fcmpeq(float_value,0);\n          if (comparison_result == 0) {\n            for (; exponent < -1; exponent = exponent + '\\x02') {\n              temp_value = __aeabi_f2d(float_value);\n              temp_value = __muldf3((int)temp_value,(int)((ulonglong)temp_value >> 0x20),0x47ae147b,0x3f847ae1);\n              float_value = __truncdfsf2((int)temp_value,(int)((ulonglong)temp_value >> 0x20));\n            }\n            if (exponent < '\\0') {\n              temp_value = __aeabi_f2d(float_value);\n              temp_value = __muldf3((int)temp_value,(int)((ulonglong)temp_value >> 0x20),0x9999999a,0x3fb99999);\n              float_value = __truncdfsf2((int)temp_value,(int)((ulonglong)temp_value >> 0x20));\n            }\n            else {\n              for (; '\\0' < exponent; exponent = exponent + -1) {\n                float_value = __aeabi_fmul(float_value,0x41200000);\n              }\n            }\n          }\n          if (is_negative) {\n            *result = float_value ^ 0x80000000;\n          }\n          else {\n            *result = float_value;\n          }\n          *input_string = ((char)current_position - (char)base_address) - 1;\n          return_value = 1;\n        }\n        return return_value;\n      }\n      is_decimal = true;\n    }\n    current_digit = *current_position;\n    current_position = current_position + 1;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08002638": "parse_integer_08002638",
                "param_1": "base_address",
                "param_2": "input_string",
                "param_3": "result",
                "bVar1": "digit",
                "bVar2": "is_negative",
                "bVar3": "is_decimal",
                "iVar4": "comparison_result",
                "pcVar5": "current_char",
                "pcVar6": "next_char",
                "uVar7": "return_value",
                "uVar8": "temp_value",
                "local_1c": "float_value",
                "local_16": "digit_count",
                "local_15": "exponent",
                "local_14": "integer_part",
                "local_d": "current_digit",
                "local_c": "current_position"
            },
            "calling": [
                "FUN_0800184c",
                "FUN_08003b98"
            ],
            "called": [
                "FUN_08009214",
                "FUN_08008e3c",
                "FUN_08008640",
                "FUN_08008eec",
                "FUN_08008590",
                "FUN_08008c30"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08002638": {
                    "19": "parse_integer",
                    "1": "extract_and_convert_number",
                    "4": "parse_number",
                    "3": "parse_integer_from_string",
                    "2": "convert_string_to_int"
                },
                "param_1": {
                    "3": "base",
                    "1": "base_addr",
                    "4": "start_index",
                    "2": "start",
                    "7": "base_address"
                },
                "param_2": {
                    "2": "str",
                    "1": "bytes",
                    "11": "input_string",
                    "4": "string",
                    "5": "byte_array"
                },
                "param_3": {
                    "1": "converted_number",
                    "8": "output_value",
                    "3": "output",
                    "14": "result",
                    "2": "result_pointer"
                },
                "bVar1": {
                    "2": "digit_value",
                    "25": "digit"
                },
                "bVar2": {
                    "9": "negative",
                    "21": "is_negative"
                },
                "bVar3": {
                    "1": "exponent_flag",
                    "3": "is_exponential",
                    "2": "is_floating_point",
                    "4": "is_decimal"
                },
                "iVar4": {
                    "1": "comparison_var",
                    "2": "comparison",
                    "3": "compare_result",
                    "14": "comparison_result"
                },
                "pcVar5": {
                    "2": "next_char_ptr",
                    "1": "curr_char",
                    "19": "current_char"
                },
                "pcVar6": {
                    "1": "ptr_input",
                    "20": "next_char",
                    "2": "current_char_ptr"
                },
                "uVar7": {
                    "2": "return_val",
                    "20": "return_value",
                    "1": "success"
                },
                "uVar8": {
                    "2": "temp_double",
                    "9": "temp_value",
                    "5": "temp",
                    "1": "conversion_result",
                    "3": "temporary_value"
                },
                "local_1c": {
                    "4": "temp_float",
                    "5": "converted_float",
                    "11": "float_value",
                    "1": "unsigned_value",
                    "2": "float_result"
                },
                "local_16": {
                    "31": "digit_count"
                },
                "local_15": {
                    "1": "decimal_position",
                    "2": "decimal_point_pos",
                    "4": "decimal_places",
                    "7": "decimal_count",
                    "11": "exponent"
                },
                "local_14": {
                    "1": "temp_value",
                    "4": "integer_value",
                    "10": "integer_part",
                    "2": "integer_result"
                },
                "local_d": {
                    "1": "current_symbol",
                    "10": "current_digit",
                    "3": "current_byte",
                    "5": "current_char"
                },
                "local_c": {
                    "1": "current_addr",
                    "3": "next_digit",
                    "2": "next_position",
                    "4": "current_position"
                },
                "local_10": {
                    "1": "exponent"
                },
                "local_8": {
                    "1": "float_result"
                }
            }
        },
        "FUN_08002814": {
            "entrypoint": "0x08002814",
            "current_name": "FUNC_08002814",
            "code": "\nvoid FUNC_08002814(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002814": "FUNC_08002814"
            },
            "calling": [
                "FUN_08004148",
                "FUN_08001d4c",
                "FUN_08002408"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08002828": {
            "entrypoint": "0x08002828",
            "current_name": "FUNC_08002828",
            "code": "\nvoid FUNC_08002828(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002828": "FUNC_08002828"
            },
            "calling": [
                "FUN_08001994"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800283a": {
            "entrypoint": "0x0800283a",
            "current_name": "set_current_position_0800283a",
            "code": "\nvoid set_current_position_0800283a(void)\n\n{\n  plan_set_current_position_0800283a(DAT_20000eac,DAT_20000eb0,DAT_20000eb4);\n  gc_set_current_position_0800283a(DAT_20000eac,DAT_20000eb0,DAT_20000eb4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800283a": "set_current_position_0800283a"
            },
            "calling": [
                "FUN_080024c4",
                "FUN_08001ddc"
            ],
            "called": [
                "FUN_080004fc",
                "FUN_080035ec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800283a": {
                    "1": "initialize_plan_gc",
                    "2": "update_current_and_gc_positions",
                    "3": "initialize_positions",
                    "5": "update_positions",
                    "8": "set_current_position"
                },
                "param_1": {
                    "2": "position1",
                    "17": "position_1",
                    "3": "position_param_1",
                    "4": "arg1",
                    "1": "current_position_param_1"
                },
                "param_2": {
                    "1": "param_2",
                    "2": "position2",
                    "3": "position_param_2",
                    "17": "position_2",
                    "4": "arg2"
                },
                "param_3": {
                    "3": "position_param_3",
                    "17": "position_3",
                    "1": "position_variable_3",
                    "4": "arg3",
                    "2": "position3"
                },
                "FUN_080004fc": {
                    "1": "fun1",
                    "2": "set_current_position",
                    "3": "set_plan_position"
                },
                "FUN_080035ec": {
                    "1": "set_current_position_gc",
                    "2": "set_gc_current_position",
                    "4": "set_gc_position",
                    "3": "gc_set_current_position"
                }
            }
        },
        "FUN_08002870": {
            "entrypoint": "0x08002870",
            "current_name": "increment_and_check_limit_08002870",
            "code": "\nchar increment_and_check_limit_08002870(char input)\n\n{\n  char result;\n  \n  result = input + '\\x01';\n  if (result == '\\x12') {\n    result = '\\0';\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08002870": "increment_and_check_limit_08002870",
                "param_1": "input",
                "local_9": "result"
            },
            "calling": [
                "FUN_08002ba8",
                "FUN_08002ef0",
                "FUN_08003004",
                "FUN_08002f40",
                "FUN_08002e08"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08002870": {
                    "7": "increment_and_check_limit",
                    "2": "increment_and_check_boundary",
                    "1": "increment_and_reset_if_equal_to18",
                    "6": "increment_and_limit"
                },
                "param_1": {
                    "15": "input",
                    "5": "value",
                    "4": "input_char",
                    "7": "input_value"
                },
                "local_9": {
                    "1": "modified_char",
                    "25": "result"
                }
            }
        },
        "FUN_08002896": {
            "entrypoint": "0x08002896",
            "current_name": "decrement_and_default_08002896",
            "code": "\nchar decrement_and_default_08002896(char input_char)\n\n{\n  char result;\n  \n  result = input_char;\n  if (input_char == '\\0') {\n    result = '\\x12';\n  }\n  return result + -1;\n}\n\n",
            "renaming": {
                "FUN_08002896": "decrement_and_default_08002896",
                "param_1": "input_char",
                "local_9": "result"
            },
            "calling": [
                "FUN_08002a94"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08002896": {
                    "1": "set_default_value",
                    "2": "decrement_and_default_value",
                    "5": "decrement_and_default",
                    "3": "decrement_and_set_default"
                },
                "param_1": {
                    "5": "input_value",
                    "2": "input_character",
                    "14": "input_char",
                    "1": "current_value"
                },
                "local_9": {
                    "1": "output",
                    "2": "updated_value",
                    "5": "result_char",
                    "4": "modified_char",
                    "7": "result",
                    "3": "updated_char"
                }
            }
        },
        "FUN_080028bc": {
            "entrypoint": "0x080028bc",
            "current_name": "calculate_division_ratio_080028bc",
            "code": "\nundefined4 calculate_division_ratio_080028bc(undefined4 input_1,undefined4 input_2,undefined4 input_3)\n\n{\n  undefined4 squared_input_2;\n  undefined4 squared_input_1;\n  \n  squared_input_2 = multiply_floats(input_2,input_2);\n  squared_input_1 = multiply_floats(input_1,input_1);\n  squared_input_2 = subtract_floats(squared_input_2,squared_input_1);\n  squared_input_1 = add_floats(input_3,input_3);\n  squared_input_2 = divide_floats(squared_input_2,squared_input_1);\n  return squared_input_2;\n}\n\n",
            "renaming": {
                "FUN_080028bc": "calculate_division_ratio_080028bc",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "uVar1": "squared_input_2",
                "uVar2": "squared_input_1",
                "__aeabi_fmul": "multiply_floats",
                "__aeabi_fsub": "subtract_floats",
                "__addsf3": "add_floats",
                "__aeabi_fdiv": "divide_floats"
            },
            "calling": [
                "FUN_08002c18"
            ],
            "called": [
                "FUN_08008cd8",
                "FUN_08009054",
                "FUN_08008cdc",
                "FUN_08008eec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080028bc": {
                    "3": "calculate_division",
                    "7": "calculate_division_result",
                    "1": "calculate_result",
                    "2": "calculate_dividend",
                    "17": "calculate_division_ratio"
                },
                "param_1": {
                    "8": "input_1",
                    "5": "side_length_1",
                    "2": "dividend",
                    "1": "input_value1",
                    "3": "input1"
                },
                "param_2": {
                    "3": "input2",
                    "1": "multiplier",
                    "2": "operand_2",
                    "5": "side_length_2",
                    "8": "input_2"
                },
                "param_3": {
                    "8": "input_3",
                    "1": "num3",
                    "2": "height",
                    "3": "input3"
                },
                "uVar1": {
                    "1": "multiplier_1_squared",
                    "2": "width_squared",
                    "7": "squared_input_2",
                    "3": "squared_input2"
                },
                "uVar2": {
                    "1": "squared_initial_value",
                    "6": "squared_input_1",
                    "3": "squared_side_length_1",
                    "2": "squared_input1"
                },
                "__aeabi_fmul": {
                    "1": "multiply_floats"
                },
                "__aeabi_fsub": {
                    "1": "subtract_floats"
                },
                "__addsf3": {
                    "1": "add_floats"
                },
                "__aeabi_fdiv": {
                    "1": "divide_floats"
                }
            }
        },
        "FUN_08002908": {
            "entrypoint": "0x08002908",
            "current_name": "calculate_result_08002908",
            "code": "\nundefined4 calculate_result_08002908(undefined4 input_1,undefined4 input_2,undefined4 input_3,undefined4 input_4)\n\n{\n  undefined4 temp_1;\n  undefined4 temp_2;\n  \n  temp_1 = sum_of_floats(input_3,input_3);\n  temp_1 = multiply_float(temp_1,input_4);\n  temp_2 = multiply_float(input_1,input_1);\n  temp_1 = subtract_float(temp_1,temp_2);\n  temp_2 = multiply_float(input_2,input_2);\n  temp_1 = sum_of_floats(temp_1,temp_2);\n  temp_2 = multiply_float(input_3,0x40800000);\n  temp_1 = divide_float(temp_1,temp_2);\n  return temp_1;\n}\n\n",
            "renaming": {
                "FUN_08002908": "calculate_result_08002908",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "uVar1": "temp_1",
                "uVar2": "temp_2",
                "__addsf3": "sum_of_floats",
                "__aeabi_fmul": "multiply_float",
                "__aeabi_fsub": "subtract_float",
                "__aeabi_fdiv": "divide_float"
            },
            "calling": [
                "FUN_08002c18"
            ],
            "called": [
                "FUN_08008cd8",
                "FUN_08008cdc",
                "FUN_08009054",
                "FUN_08008eec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08002908": {
                    "5": "calculate_division_ratio",
                    "6": "calculate_division_result",
                    "3": "calculate_dividend",
                    "1": "calculate_error",
                    "9": "calculate_result"
                },
                "param_1": {
                    "1": "number_1",
                    "10": "input_1",
                    "4": "value_1",
                    "2": "num1",
                    "3": "input1"
                },
                "param_2": {
                    "3": "input2",
                    "1": "height",
                    "2": "value2",
                    "4": "value_2",
                    "10": "input_2"
                },
                "param_3": {
                    "9": "input_3",
                    "1": "number_3",
                    "2": "multiplier",
                    "3": "input3",
                    "4": "value_3"
                },
                "param_4": {
                    "4": "value_4",
                    "9": "input_4",
                    "1": "multiplier",
                    "2": "value4",
                    "3": "input4"
                },
                "uVar1": {
                    "1": "doubled_radius_squared",
                    "4": "temp_1",
                    "2": "intermediate_result_1",
                    "3": "temp1"
                },
                "uVar2": {
                    "1": "squared_input1",
                    "2": "result2",
                    "3": "result_2",
                    "4": "temp_2"
                },
                "__addsf3": {
                    "1": "sum_of_floats"
                },
                "__aeabi_fmul": {
                    "1": "multiply_floats",
                    "2": "multiply_float"
                },
                "__aeabi_fsub": {
                    "1": "subtract_floats",
                    "2": "subtract_float"
                },
                "__aeabi_fdiv": {
                    "1": "divide_floats",
                    "2": "divide_float"
                },
                "0x40800000": {
                    "1": "constant_value"
                }
            }
        },
        "FUN_08002978": {
            "entrypoint": "0x08002978",
            "current_name": "calculate_distance_08002978",
            "code": "\nundefined4 calculate_distance_08002978(undefined4 x,undefined4 y,undefined4 z)\n\n{\n  undefined4 squared_y;\n  undefined4 double_x;\n  undefined8 distance;\n  \n  squared_y = multiply_float(y,y);\n  double_x = add_float(x,x);\n  double_x = multiply_float(double_x,z);\n  squared_y = subtract_float(squared_y,double_x);\n  distance = convert_float_to_double(squared_y);\n  distance = calculate_square_root((int)distance,(int)((ulonglong)distance >> 0x20));\n  squared_y = convert_double_to_float((int)distance,(int)((ulonglong)distance >> 0x20));\n  return squared_y;\n}\n\n",
            "renaming": {
                "FUN_08002978": "calculate_distance_08002978",
                "param_1": "x",
                "param_2": "y",
                "param_3": "z",
                "uVar1": "squared_y",
                "uVar2": "double_x",
                "uVar3": "distance",
                "__aeabi_fmul": "multiply_float",
                "__addsf3": "add_float",
                "__aeabi_fsub": "subtract_float",
                "__aeabi_f2d": "convert_float_to_double",
                "sqrt": "calculate_square_root",
                "__truncdfsf2": "convert_double_to_float"
            },
            "calling": [
                "FUN_08002afc",
                "FUN_08003004",
                "FUN_080029d8"
            ],
            "called": [
                "FUN_08008cd8",
                "FUN_080098d0",
                "FUN_08008cdc",
                "FUN_08008eec",
                "FUN_08008590",
                "FUN_08008c30"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08002978": {
                    "26": "calculate_distance",
                    "1": "calculate_result"
                },
                "param_1": {
                    "14": "x",
                    "3": "input_1",
                    "1": "point_1",
                    "2": "value1"
                },
                "param_2": {
                    "2": "multiplier",
                    "14": "y",
                    "1": "point_2",
                    "3": "input_2"
                },
                "param_3": {
                    "3": "input_3",
                    "14": "z",
                    "1": "multiplier",
                    "2": "scaling_factor"
                },
                "uVar1": {
                    "1": "squared_input_value_2",
                    "12": "squared_y",
                    "2": "squared_param_2"
                },
                "uVar2": {
                    "9": "double_x",
                    "1": "result_2",
                    "2": "twice_x"
                },
                "uVar3": {
                    "1": "squared_distance",
                    "3": "converted_result",
                    "10": "distance",
                    "2": "distance_squared",
                    "6": "result"
                },
                "FUN_08008cd8": {
                    "2": "multiply_uints",
                    "1": "square"
                },
                "FUN_080098d0": {
                    "1": "add",
                    "3": "multiply_float"
                },
                "FUN_08008cdc": {
                    "1": "multiply_and_subtract",
                    "2": "subtract_uint"
                },
                "FUN_08008eec": {
                    "1": "multiply_and_subtract"
                },
                "FUN_08008590": {
                    "1": "calculate_square_root",
                    "4": "convert_to_double"
                },
                "FUN_08008c30": {
                    "1": "square",
                    "2": "subtract"
                },
                "__aeabi_fmul": {
                    "3": "multiply_float"
                },
                "__addsf3": {
                    "3": "add_float"
                },
                "__aeabi_fsub": {
                    "3": "subtract_float"
                },
                "__aeabi_f2d": {
                    "1": "float_to_double",
                    "2": "convert_float_to_double"
                },
                "sqrt": {
                    "3": "calculate_square_root"
                },
                "__truncdfsf2": {
                    "2": "convert_double_to_float",
                    "1": "double_to_float"
                }
            }
        },
        "FUN_080029d8": {
            "entrypoint": "0x080029d8",
            "current_name": "update_speed_080029d8",
            "code": "\nvoid update_speed_080029d8(undefined4 param1,int current_speed,int max_speed)\n\n{\n  int comparison_result;\n  undefined4 new_speed;\n  undefined4 current_speed;\n  \n  if (((current_speed != 0) && (max_speed != 0)) &&\n     (comparison_result = __aeabi_fcmpeq(*(undefined4 *)(current_speed + 0x18),*(undefined4 *)(current_speed + 0x1c)),\n     comparison_result == 0)) {\n    if ((*(char *)(current_speed + 0x25) == '\\0') &&\n       (comparison_result = __aeabi_fcmpgt(*(undefined4 *)(current_speed + 0x1c),*(undefined4 *)(max_speed + 0x18)),\n       comparison_result != 0)) {\n      current_speed = *(undefined4 *)(current_speed + 0x1c);\n      new_speed = max_allowable_speed(DAT_20000edc ^ 0x80000000,*(undefined4 *)(max_speed + 0x18),\n                                  *(undefined4 *)(current_speed + 0x20));\n      comparison_result = __aeabi_fcmplt(current_speed,new_speed);\n      if (comparison_result == 0) {\n        new_speed = max_allowable_speed(DAT_20000edc ^ 0x80000000,*(undefined4 *)(max_speed + 0x18),\n                                    *(undefined4 *)(current_speed + 0x20));\n      }\n      else {\n        new_speed = *(undefined4 *)(current_speed + 0x1c);\n      }\n      *(undefined4 *)(current_speed + 0x18) = new_speed;\n    }\n    else {\n      *(undefined4 *)(current_speed + 0x18) = *(undefined4 *)(current_speed + 0x1c);\n    }\n    *(undefined *)(current_speed + 0x24) = 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080029d8": "update_speed_080029d8",
                "param_1": "param1",
                "param_2": "current_speed",
                "param_3": "max_speed",
                "iVar1": "comparison_result",
                "uVar2": "new_speed",
                "uVar3": "current_speed"
            },
            "calling": [
                "FUN_08002a94"
            ],
            "called": [
                "FUN_08009228",
                "FUN_08009214",
                "FUN_08009264",
                "FUN_08002978"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080029d8": {
                    "1": "update_speed_parameter",
                    "4": "update_speed_limit",
                    "20": "update_speed",
                    "2": "update_speed_if_valid"
                },
                "param_1": {
                    "1": "input1",
                    "2": "undefined1",
                    "8": "param_1",
                    "13": "param1"
                },
                "param_2": {
                    "2": "speed_param",
                    "1": "speed1",
                    "4": "current_speed",
                    "3": "car_data"
                },
                "param_3": {
                    "1": "signal_data",
                    "2": "other_data",
                    "5": "max_speed"
                },
                "iVar1": {
                    "1": "result",
                    "3": "compare_result",
                    "14": "comparison_result",
                    "11": "is_equal"
                },
                "uVar2": {
                    "2": "updated_speed",
                    "1": "speed1",
                    "22": "new_speed"
                },
                "uVar3": {
                    "17": "current_speed",
                    "1": "speed2",
                    "4": "old_speed",
                    "3": "temp_speed",
                    "2": "current_speed_copy"
                },
                "DAT_20000edc": {
                    "1": "random_number"
                },
                "FUN_08009228": {
                    "1": "check_condition_1"
                },
                "FUN_08009214": {
                    "1": "check_condition_2"
                },
                "FUN_08009264": {
                    "1": "check_condition_3"
                },
                "FUN_08002978": {
                    "1": "max_allowable_speed"
                }
            }
        },
        "FUN_08002a94": {
            "entrypoint": "0x08002a94",
            "current_name": "reverse_pass_08002a94",
            "code": "\nvoid reverse_pass_08002a94(void)\n\n{\n  undefined *temp_ptr;\n  undefined *previous_block;\n  undefined *previous_block;\n  byte current_block_index;\n  \n  current_block_index = DAT_20000cf0;\n  previous_block = (undefined *)0x0;\n  previous_block = (undefined *)0x0;\n  while (temp_ptr = previous_block, current_block_index != DAT_20000cf1) {\n    current_block_index = get_previous_block_index(current_block_index);\n    previous_block = previous_block;\n    execute_reverse_pass_08002a94_kernel(&DAT_20000870 + (uint)current_block_index * 0x40,previous_block,temp_ptr);\n    previous_block = &DAT_20000870 + (uint)current_block_index * 0x40;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002a94": "reverse_pass_08002a94",
                "local_9": "current_block_index",
                "local_18": "previous_block",
                "local_14": "previous_block",
                "prev_block_index": "get_previous_block_index",
                "planner_reverse_pass_kernel": "execute_reverse_pass_kernel",
                "puVar1": "temp_ptr"
            },
            "calling": [
                "FUN_08002edc"
            ],
            "called": [
                "FUN_080029d8",
                "FUN_08002896"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08002a94": {
                    "12": "reverse_pass",
                    "1": "reverse_pass_kernel_wrapper",
                    "2": "reverse_blocks",
                    "9": "process_blocks"
                },
                "local_9": {
                    "10": "block_index",
                    "1": "byte_value",
                    "13": "current_block_index",
                    "5": "current_index"
                },
                "local_18": {
                    "1": "prev_block_data",
                    "5": "prev_block",
                    "2": "previous_block_ptr",
                    "7": "previous_block"
                },
                "local_14": {
                    "4": "prev_block_ptr",
                    "3": "prev_block",
                    "1": "prev_data",
                    "2": "current_block",
                    "5": "previous_block"
                },
                "prev_block_index": {
                    "1": "find_previous_block_index",
                    "7": "get_previous_block_index"
                },
                "planner_reverse_pass_kernel": {
                    "1": "run_reverse_pass_kernel",
                    "3": "execute_reverse_pass_kernel"
                },
                "param_1": {
                    "1": "param",
                    "2": "block_index"
                },
                "param_2": {
                    "2": "size",
                    "1": "kernel_param_2"
                },
                "puVar1": {
                    "2": "prev_block",
                    "1": "prev_block_data",
                    "4": "temp_ptr"
                },
                "FUN_080029d8": {
                    "1": "process_data"
                },
                "FUN_08002896": {
                    "2": "reverse_block"
                },
                "param_3": {
                    "1": "arg3",
                    "2": "param3"
                },
                "DAT_20000cf0": {
                    "1": "initial_block",
                    "2": "initial_block_index"
                },
                "DAT_20000cf1": {
                    "1": "final_block_index"
                },
                "DAT_20000870": {
                    "1": "block_data"
                },
                "FUn_08002a94": {
                    "1": "perform_reverse_pass"
                }
            }
        },
        "FUN_08002afc": {
            "entrypoint": "0x08002afc",
            "current_name": "update_speed_08002afc",
            "code": "\nvoid update_speed_08002afc(int vehicle_data,int object2)\n\n{\n  int is_speed_lower;\n  undefined4 new_speed;\n  undefined4 max_speed;\n  \n  if (((vehicle_data != 0) && (*(char *)(vehicle_data + 0x25) == '\\0')) &&\n     (is_speed_lower = __aeabi_fcmplt(*(undefined4 *)(vehicle_data + 0x18),*(undefined4 *)(object2 + 0x18)),\n     is_speed_lower != 0)) {\n    max_speed = *(undefined4 *)(object2 + 0x18);\n    new_speed = get_max_allowable_speed(DAT_20000edc ^ 0x80000000,*(undefined4 *)(vehicle_data + 0x18),\n                                *(undefined4 *)(vehicle_data + 0x20));\n    is_speed_lower = __aeabi_fcmplt(max_speed,new_speed);\n    if (is_speed_lower == 0) {\n      new_speed = get_max_allowable_speed(DAT_20000edc ^ 0x80000000,*(undefined4 *)(vehicle_data + 0x18),\n                                  *(undefined4 *)(vehicle_data + 0x20));\n    }\n    else {\n      new_speed = *(undefined4 *)(object2 + 0x18);\n    }\n    is_speed_lower = __aeabi_fcmpeq(new_speed,*(undefined4 *)(object2 + 0x18));\n    if (is_speed_lower == 0) {\n      *(undefined4 *)(object2 + 0x18) = new_speed;\n      *(undefined *)(object2 + 0x24) = 1;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002afc": "update_speed_08002afc",
                "param_1": "vehicle_data",
                "param_2": "object2",
                "iVar1": "is_speed_lower",
                "uVar2": "new_speed",
                "uVar3": "max_speed",
                "max_allowable_speed": "get_max_allowable_speed"
            },
            "calling": [
                "FUN_08002ba8"
            ],
            "called": [
                "FUN_08009228",
                "FUN_08009214",
                "FUN_08002978"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08002afc": {
                    "2": "update_speed_if_needed",
                    "1": "update_speed_if_lower",
                    "9": "update_max_allowable_speed"
                },
                "param_1": {
                    "1": "input1",
                    "2": "speed_data",
                    "3": "object1",
                    "9": "vehicle_data"
                },
                "param_2": {
                    "1": "config_ptr",
                    "3": "max_speed_data",
                    "2": "speed_info"
                },
                "iVar1": {
                    "1": "is_current_speed_less",
                    "3": "is_lower",
                    "4": "is_speed_lower",
                    "2": "comparison_result"
                },
                "uVar2": {
                    "1": "calculated_speed1",
                    "2": "max_speed",
                    "7": "new_max_speed",
                    "18": "new_speed"
                },
                "uVar3": {
                    "8": "max_speed",
                    "1": "other_max_speed",
                    "2": "old_speed",
                    "3": "current_speed",
                    "4": "current_max_speed"
                },
                "max_allowable_speed": {
                    "2": "get_max_allowable_speed"
                },
                "DAT_20000edc": {
                    "2": "secret_key",
                    "3": "some_data",
                    "1": "encryption_key"
                },
                "FUN_08009228": {
                    "1": "is_speed_restricted"
                },
                "FUN_08009214": {
                    "1": "is_data2_valid"
                },
                "FUN_08002978": {
                    "1": "calculate_speed",
                    "3": "max_allowable_speed"
                }
            }
        },
        "FUN_08002ba8": {
            "entrypoint": "0x08002ba8",
            "current_name": "planner_forward_pass_08002ba8",
            "code": "\nvoid planner_forward_pass_08002ba8(void)\n\n{\n  uint current_block_index_uint;\n  undefined *previous_block;\n  undefined *current_block;\n  undefined *previous_block;\n  undefined *current_block;\n  byte current_block_index;\n  \n  previous_block = (undefined *)0x0;\n  current_block = (undefined *)0x0;\n  current_block_index = DAT_20000cf1;\n  current_block = (undefined *)0x0;\n  while (previous_block = previous_block, current_block_index != DAT_20000cf0) {\n    previous_block = current_block;\n    current_block_index_uint = (uint)current_block_index;\n    execute_planner_forward_pass_08002ba8_kernel(previous_block,current_block,&DAT_20000870 + current_block_index_uint * 0x40);\n    current_block_index = get_next_block_index(current_block_index);\n    current_block = previous_block;\n    current_block = &DAT_20000870 + current_block_index_uint * 0x40;\n  }\n  execute_planner_forward_pass_08002ba8_kernel(previous_block,current_block,0,previous_block,current_block);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ba8": "planner_forward_pass_08002ba8",
                "local_9": "current_block_index",
                "local_14": "previous_block",
                "local_10": "current_block",
                "puVar2": "previous_block",
                "puVar3": "current_block",
                "uVar1": "current_block_index_uint",
                "planner_forward_pass_kernel": "execute_planner_forward_pass_kernel",
                "next_block_index": "get_next_block_index"
            },
            "calling": [
                "FUN_08002edc"
            ],
            "called": [
                "FUN_08002afc",
                "FUN_08002870"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08002ba8": {
                    "1": "run_planner",
                    "3": "perform_planner_forward_pass",
                    "17": "planner_forward_pass",
                    "2": "process_blocks"
                },
                "FUN_08002afc": {
                    "4": "planner_forward_pass_kernel",
                    "1": "process_kernel"
                },
                "FUN_08002870": {
                    "1": "get_next_block_index",
                    "5": "next_block_index"
                },
                "param_1": {
                    "1": "block_index",
                    "2": "input_param"
                },
                "param_2": {
                    "2": "end_index",
                    "1": "block_index"
                },
                "local_9": {
                    "1": "byte_val",
                    "9": "block_index",
                    "13": "current_block_index",
                    "4": "current_index"
                },
                "local_14": {
                    "1": "prev_block_ptr",
                    "3": "previous_block_ptr",
                    "2": "previous_pointer",
                    "8": "previous_block"
                },
                "local_10": {
                    "1": "current_block_pointer",
                    "4": "next_block",
                    "2": "current_pointer",
                    "8": "current_block",
                    "3": "next_block_ptr"
                },
                "puVar2": {
                    "1": "prev_data_ptr",
                    "2": "prev_ptr",
                    "5": "previous_block",
                    "3": "previous_block_ptr"
                },
                "puVar3": {
                    "2": "previous_block_ptr",
                    "1": "last_previous_block",
                    "3": "current_block"
                },
                "uVar1": {
                    "1": "current_block_index",
                    "2": "block_index",
                    "5": "current_block_index_uint"
                },
                "planner_forward_pass_kernel": {
                    "1": "execute_planner_forward_pass_kernel"
                },
                "next_block_index": {
                    "1": "get_next_block_index"
                }
            }
        },
        "FUN_08002c18": {
            "entrypoint": "0x08002c18",
            "current_name": "calculate_acceleration_distance_08002c18",
            "code": "\nvoid calculate_acceleration_distance_08002c18(int input,undefined4 acceleration_factor1,undefined4 acceleration_factor2)\n\n{\n  undefined4 float_value1;\n  int acceleration_distance;\n  undefined4 float_value2;\n  undefined4 float_value3;\n  undefined4 float_value4;\n  uint intersection_distance;\n  undefined8 temp_double;\n  int distance1;\n  uint distance2;\n  \n  float_value1 = __floatunsisf(*(undefined4 *)(input + 0x3c));\n  float_value1 = __aeabi_fmul(float_value1,acceleration_factor1);\n  temp_double = __aeabi_f2d(float_value1);\n  temp_double = ceil((int)temp_double,(int)((ulonglong)temp_double >> 0x20));\n  float_value1 = __aeabi_d2uiz((int)temp_double,(int)((ulonglong)temp_double >> 0x20));\n  *(undefined4 *)(input + 0x28) = float_value1;\n  float_value1 = __floatunsisf(*(undefined4 *)(input + 0x3c));\n  float_value1 = __aeabi_fmul(float_value1,acceleration_factor2);\n  temp_double = __aeabi_f2d(float_value1);\n  temp_double = ceil((int)temp_double,(int)((ulonglong)temp_double >> 0x20));\n  float_value1 = __aeabi_d2uiz((int)temp_double,(int)((ulonglong)temp_double >> 0x20));\n  *(undefined4 *)(input + 0x2c) = float_value1;\n  temp_double = __aeabi_i2d(*(int *)(input + 0x30) * 0x32);\n  temp_double = __muldf3((int)temp_double,(int)((ulonglong)temp_double >> 0x20),0,0x404e0000);\n  acceleration_distance = __aeabi_d2iz((int)temp_double,(int)((ulonglong)temp_double >> 0x20));\n  float_value1 = __floatunsisf(*(undefined4 *)(input + 0x28));\n  float_value2 = __floatunsisf(*(undefined4 *)(input + 0x3c));\n  float_value3 = __floatsisf(acceleration_distance);\n  float_value1 = estimate_acceleration_distance(float_value1,float_value2,float_value3);\n  temp_double = __aeabi_f2d(float_value1);\n  temp_double = ceil((int)temp_double,(int)((ulonglong)temp_double >> 0x20));\n  distance2 = __aeabi_d2iz((int)temp_double,(int)((ulonglong)temp_double >> 0x20));\n  float_value1 = __floatunsisf(*(undefined4 *)(input + 0x3c));\n  float_value2 = __floatunsisf(*(undefined4 *)(input + 0x2c));\n  float_value3 = __floatsisf(-acceleration_distance);\n  float_value1 = estimate_acceleration_distance(float_value1,float_value2,float_value3);\n  temp_double = __aeabi_f2d(float_value1);\n  temp_double = floor((int)temp_double,(int)((ulonglong)temp_double >> 0x20));\n  distance1 = __aeabi_d2iz((int)temp_double,(int)((ulonglong)temp_double >> 0x20));\n  distance1 = (*(int *)(input + 0x10) - distance2) - distance1;\n  if (distance1 < 0) {\n    float_value1 = __floatunsisf(*(undefined4 *)(input + 0x28));\n    float_value2 = __floatunsisf(*(undefined4 *)(input + 0x2c));\n    float_value3 = __floatsisf(acceleration_distance);\n    float_value4 = __floatsisf(*(undefined4 *)(input + 0x10));\n    float_value1 = intersection_distance(float_value1,float_value2,float_value3,float_value4);\n    temp_double = __aeabi_f2d(float_value1);\n    temp_double = ceil((int)temp_double,(int)((ulonglong)temp_double >> 0x20));\n    intersection_distance = __aeabi_d2iz((int)temp_double,(int)((ulonglong)temp_double >> 0x20));\n    intersection_distance = intersection_distance & ~((int)intersection_distance >> 0x1f);\n    distance2 = *(uint *)(input + 0x10);\n    if ((int)intersection_distance <= (int)*(uint *)(input + 0x10)) {\n      distance2 = intersection_distance;\n    }\n    distance1 = 0;\n  }\n  *(uint *)(input + 0x34) = distance2;\n  *(uint *)(input + 0x38) = distance1 + distance2;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002c18": "calculate_acceleration_distance_08002c18",
                "param_1": "input",
                "param_2": "acceleration_factor1",
                "param_3": "acceleration_factor2",
                "uVar1": "float_value1",
                "iVar2": "acceleration_distance",
                "uVar3": "float_value2",
                "uVar4": "float_value3",
                "uVar5": "float_value4",
                "uVar6": "intersection_distance",
                "uVar7": "temp_double",
                "local_20": "distance1",
                "local_1c": "distance2"
            },
            "calling": [
                "FUN_08002e08"
            ],
            "called": [
                "FUN_0800856c",
                "FUN_08002908",
                "FUN_08008ba0",
                "FUN_08009318",
                "FUN_080094c0",
                "FUN_08008e44",
                "FUN_080028bc",
                "FUN_08008e3c",
                "FUN_08008640",
                "FUN_08008bf0",
                "FUN_08008eec",
                "FUN_08008590"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08002c18": {
                    "2": "calculate_acceleration_parameters",
                    "5": "calculate_distance",
                    "10": "calculate_acceleration_distance",
                    "1": "calculate_acceleration_distances"
                },
                "param_1": {
                    "8": "acceleration_data",
                    "1": "input_param",
                    "2": "param",
                    "6": "input_data"
                },
                "param_2": {
                    "1": "acceleration_multiplier1",
                    "6": "multiplier1",
                    "5": "factor1",
                    "2": "acceleration_factor_1",
                    "3": "multiplier_1"
                },
                "param_3": {
                    "1": "acceleration2",
                    "6": "acceleration_factor2",
                    "3": "multiplier_2",
                    "5": "factor2",
                    "2": "acceleration_factor_2"
                },
                "uVar1": {
                    "1": "float_conversion_1",
                    "2": "temp1",
                    "3": "float_value1"
                },
                "iVar2": {
                    "1": "approximation_value",
                    "5": "acceleration_distance",
                    "3": "int_value",
                    "2": "result2"
                },
                "uVar3": {
                    "1": "acceleration_distance1",
                    "2": "temp3",
                    "3": "float_value2"
                },
                "uVar4": {
                    "1": "converted_val_4",
                    "2": "temp4",
                    "3": "float_value3"
                },
                "uVar5": {
                    "1": "converted_val_5",
                    "2": "temp5",
                    "3": "float_value4"
                },
                "uVar6": {
                    "2": "temp_uint",
                    "1": "temp1",
                    "4": "intersection_distance",
                    "3": "uint_value1"
                },
                "uVar7": {
                    "1": "float_distance_2",
                    "3": "double_value1",
                    "4": "temp_double",
                    "2": "temp7"
                },
                "local_20": {
                    "2": "local_variable1",
                    "1": "temp_variable_a",
                    "3": "local_var1",
                    "5": "distance1"
                },
                "local_1c": {
                    "1": "accel_distance_2",
                    "3": "result2",
                    "5": "distance2",
                    "2": "local_variable2"
                }
            }
        },
        "FUN_08002e08": {
            "entrypoint": "0x08002e08",
            "current_name": "calculate_trapezoids_08002e08",
            "code": "\nvoid calculate_trapezoids_08002e08(void)\n\n{\n  undefined4 dividend;\n  undefined4 divisor;\n  int block_offset;\n  undefined *current_block;\n  byte block_index;\n  \n  current_block = (undefined *)0x0;\n  block_index = DAT_20000cf1;\n  while (block_index != DAT_20000cf0) {\n    block_offset = (uint)block_index * 0x40;\n    if ((current_block != (undefined *)0x0) &&\n       ((current_block[0x24] != '\\0' || ((&DAT_20000894)[block_offset] != '\\0')))) {\n      dividend = __aeabi_fdiv(*(undefined4 *)(current_block + 0x18),*(undefined4 *)(current_block + 0x14));\n      divisor = __aeabi_fdiv(*(undefined4 *)(&DAT_20000888 + block_offset),*(undefined4 *)(current_block + 0x14));\n      calculate_trapezoid_for_block(current_block,dividend,divisor);\n      current_block[0x24] = 0;\n    }\n    block_index = next_block_index(block_index);\n    current_block = &DAT_20000870 + block_offset;\n  }\n  dividend = __aeabi_fdiv(*(undefined4 *)(current_block + 0x18),*(undefined4 *)(current_block + 0x14));\n  divisor = __aeabi_fdiv(0,*(undefined4 *)(current_block + 0x14));\n  calculate_trapezoid_for_block(current_block,dividend,divisor);\n  current_block[0x24] = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002e08": "calculate_trapezoids_08002e08",
                "local_18": "current_block",
                "local_11": "block_index",
                "iVar3": "block_offset",
                "uVar1": "dividend",
                "uVar2": "divisor"
            },
            "calling": [
                "FUN_08002edc"
            ],
            "called": [
                "FUN_08002870",
                "FUN_08002c18",
                "FUN_08009054"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08002e08": {
                    "1": "trapezoid_calculator",
                    "29": "calculate_trapezoids"
                },
                "local_18": {
                    "1": "current_block_data",
                    "2": "block",
                    "18": "current_block",
                    "6": "block_data",
                    "3": "block_ptr"
                },
                "local_11": {
                    "1": "initial_block",
                    "7": "current_index",
                    "5": "current_block_index",
                    "16": "block_index"
                },
                "iVar3": {
                    "21": "block_offset",
                    "1": "block_index"
                },
                "uVar1": {
                    "2": "height_ratio",
                    "1": "width_ratio",
                    "5": "dividend",
                    "3": "division_result_1"
                },
                "uVar2": {
                    "2": "division_result2",
                    "1": "height_ratio",
                    "3": "division_result_2",
                    "5": "divisor"
                },
                "param_1": {
                    "1": "index",
                    "4": "block_index"
                },
                "var1": {
                    "1": "quotient1"
                },
                "var2": {
                    "1": "quotient2"
                }
            }
        },
        "FUN_08002edc": {
            "entrypoint": "0x08002edc",
            "current_name": "planner_execution_08002edc",
            "code": "\nvoid planner_execution_08002edc(void)\n\n{\n  planner_reverse_pass();\n  planner_forward_pass();\n  planner_recalculate_trapezoids();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002edc": "planner_execution_08002edc"
            },
            "calling": [
                "FUN_08003618",
                "FUN_08003004"
            ],
            "called": [
                "FUN_08002ba8",
                "FUN_08002e08",
                "FUN_08002a94"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08002edc": {
                    "1": "planner_passes",
                    "3": "calculate_planner",
                    "2": "planner_update",
                    "4": "planner_execution"
                },
                "FUN_08002ba8": {
                    "15": "reverse_pass",
                    "6": "planner_reverse_pass",
                    "5": "perform_reverse_pass",
                    "2": "reverse_planner_pass"
                },
                "FUN_08002e08": {
                    "2": "execute_forward_pass",
                    "5": "perform_forward_pass",
                    "6": "planner_forward_pass",
                    "15": "forward_pass",
                    "1": "forward_pass_function"
                },
                "FUN_08002a94": {
                    "1": "calculate_planner",
                    "22": "recalculate_trapezoids",
                    "6": "planner_recalculate_trapezoids"
                }
            }
        },
        "FUN_08002ef0": {
            "entrypoint": "0x08002ef0",
            "current_name": "update_block_data_08002ef0",
            "code": "\nvoid update_block_data_08002ef0(void)\n\n{\n  DAT_20000cf1 = DAT_20000cf0;\n  DAT_20000cf2 = get_next_block_index(DAT_20000cf0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ef0": "update_block_data_08002ef0",
                "next_block_index": "get_next_block_index"
            },
            "calling": [
                "FUN_08002f24"
            ],
            "called": [
                "FUN_08002870"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08002ef0": {
                    "2": "initialize_block_data",
                    "1": "update_data_and_index",
                    "4": "update_block_information",
                    "3": "update_block_info",
                    "5": "update_block_data"
                },
                "FUN_08002870": {
                    "1": "check_block_condition",
                    "15": "get_next_block_index",
                    "2": "next_block_index"
                },
                "param_1": {
                    "1": "block_size",
                    "3": "character",
                    "10": "input_char",
                    "8": "input_character",
                    "2": "input_data"
                },
                "DAT_20000cf1": {
                    "2": "current_block",
                    "1": "current_block_index"
                },
                "DAT_20000cf2": {
                    "1": "next_data",
                    "2": "next_block"
                },
                "DAT_20000cf0": {
                    "1": "current_block_index"
                },
                "next_block_index": {
                    "5": "get_next_block_index"
                },
                "<original_function_name>": {
                    "1": "update_block_info"
                },
                "<original_variable_name_1>": {
                    "1": "current_block"
                },
                "<original_variable_name_2>": {
                    "1": "next_block"
                }
            }
        },
        "FUN_08002f24": {
            "entrypoint": "0x08002f24",
            "current_name": "initialize_buffer_08002f24",
            "code": "\nvoid initialize_buffer_08002f24(void)\n\n{\n  plan_reset_buffer();\n  memset(&DAT_20000cf4,0,0x1c);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002f24": "initialize_buffer_08002f24"
            },
            "calling": [
                "FUN_08001ddc"
            ],
            "called": [
                "FUN_08002ef0",
                "FUN_0800b430"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08002f24": {
                    "1": "reset_data_buffer",
                    "12": "initialize_buffer",
                    "9": "reset_buffer",
                    "4": "initialize_data"
                },
                "FUN_08002ef0": {
                    "3": "reset_data",
                    "1": "perform_initialization",
                    "2": "initialize_parameters",
                    "5": "reset_parameters"
                },
                "param_1": {
                    "1": "task_param_1",
                    "5": "buffer_ptr",
                    "2": "param_1",
                    "3": "buffer"
                },
                "param_2": {
                    "8": "flag",
                    "2": "param",
                    "1": "arg2",
                    "6": "value",
                    "3": "param_2"
                },
                "param_3": {
                    "1": "param_uint",
                    "3": "count",
                    "2": "length",
                    "10": "size"
                },
                "FUN_0800b430": {
                    "1": "populate_data"
                },
                "DAT_20000cf4": {
                    "1": "buffer"
                }
            }
        },
        "FUN_08002f40": {
            "entrypoint": "0x08002f40",
            "current_name": "update_block_index_08002f40",
            "code": "\nvoid update_block_index_08002f40(void)\n\n{\n  if (DAT_20000cf0 != DAT_20000cf1) {\n    DAT_20000cf1 = get_next_block_index(DAT_20000cf1);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002f40": "update_block_index_08002f40",
                "next_block_index": "get_next_block_index"
            },
            "calling": [
                "FUN_080053a0"
            ],
            "called": [
                "FUN_08002870"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08002f40": {
                    "1": "check_and_update_block_index",
                    "23": "update_block_index"
                },
                "FUN_08002870": {
                    "6": "get_next_block_index",
                    "2": "process_block",
                    "1": "check_block_condition",
                    "4": "process_character",
                    "3": "check_character",
                    "7": "check_condition"
                },
                "param_1": {
                    "1": "input_block_index",
                    "4": "input_value",
                    "13": "input_char",
                    "2": "input_param"
                },
                "DAT_20000cf0": {
                    "1": "block_index1",
                    "4": "current_block_index"
                },
                "DAT_20000cf1": {
                    "1": "block_index2",
                    "3": "next_block_index"
                },
                "<original_variable_name>": {
                    "1": "<new_variable_name>"
                },
                "next_block_index": {
                    "2": "get_next_block_index"
                }
            }
        },
        "FUN_08002f74": {
            "entrypoint": "0x08002f74",
            "current_name": "get_next_data_block_08002f74",
            "code": "\nundefined * get_next_data_block_08002f74(void)\n\n{\n  undefined *next_data_block;\n  \n  if (DAT_20000cf0 == DAT_20000cf1) {\n    next_data_block = (undefined *)0x0;\n  }\n  else {\n    next_data_block = &DAT_20000870 + (uint)DAT_20000cf1 * 0x40;\n  }\n  return next_data_block;\n}\n\n",
            "renaming": {
                "FUN_08002f74": "get_next_data_block_08002f74",
                "puVar1": "next_data_block"
            },
            "calling": [
                "FUN_08002fd4",
                "FUN_080053a0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08002f74": {
                    "1": "get_next_entry",
                    "2": "get_next_data_chunk",
                    "3": "get_next_data_block"
                },
                "puVar1": {
                    "1": "next_data_block_ptr",
                    "2": "result",
                    "3": "next_data_block"
                },
                "DAT_20000cf0": {
                    "1": "current_address",
                    "2": "current_index"
                },
                "DAT_20000cf1": {
                    "1": "last_index"
                },
                "&DAT_20000870": {
                    "1": "data_array_start",
                    "2": "base_address"
                },
                "DAT_20000870": {
                    "1": "data_array"
                },
                "0x40": {
                    "1": "data_element_size"
                }
            }
        },
        "FUN_08002fac": {
            "entrypoint": "0x08002fac",
            "current_name": "are_data_equal_08002fac",
            "code": "\nbool are_data_equal_08002fac(void)\n\n{\n  return DAT_20000cf1 == DAT_20000cf2;\n}\n\n",
            "renaming": {
                "FUN_08002fac": "are_data_equal_08002fac"
            },
            "calling": [
                "FUN_08001e98"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08002fac": {
                    "2": "compare_data",
                    "1": "are_data_segments_equal",
                    "8": "are_data_equal",
                    "7": "check_equality"
                },
                "DAT_20000cf1": {
                    "14": "data1",
                    "1": "pointer1",
                    "3": "value1",
                    "2": "data_value1"
                },
                "DAT_20000cf2": {
                    "1": "second_variable",
                    "14": "data2",
                    "2": "data_value2",
                    "3": "second_data"
                }
            }
        },
        "FUN_08002fd4": {
            "entrypoint": "0x08002fd4",
            "current_name": "execute_protocol_08002fd4",
            "code": "\nvoid execute_protocol_08002fd4(void)\n\n{\n  int current_block;\n  \n  while ((current_block = get_current_block(), current_block != 0 || (DAT_20000ea9 == '\\x03'))) {\n    execute_protocol_08002fd4_runtime();\n    if (DAT_20000ea8 != '\\0') {\n      return;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002fd4": "execute_protocol_08002fd4",
                "iVar1": "current_block",
                "protocol_execute_runtime": "execute_protocol_runtime",
                "plan_get_current_block": "get_current_block",
                "plan_get_current_block()": "get_current_block()",
                "protocol_execute_runtime()": "execute_protocol_runtime()"
            },
            "calling": [
                "FUN_080005b4",
                "FUN_08000220",
                "FUN_080024c4",
                "FUN_0800525c",
                "FUN_08002408"
            ],
            "called": [
                "FUN_08003a74",
                "FUN_08002f74"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08002fd4": {
                    "1": "execute_protocol_until_completed",
                    "11": "execute_protocol",
                    "2": "execute_until_block_end"
                },
                "iVar1": {
                    "24": "current_block",
                    "1": "current_block_status"
                },
                "DAT_20000ea9": {
                    "1": "data_flag",
                    "2": "exit_condition"
                },
                "protocol_execute_runtime": {
                    "6": "execute_runtime",
                    "11": "execute_protocol_runtime",
                    "1": "execute_protocol"
                },
                "plan_get_current_block": {
                    "6": "get_current_block"
                },
                "DAT_20000ea8": {
                    "1": "return_flag",
                    "2": "termination_flag",
                    "4": "exit_flag"
                },
                "FUN_08003a74": {
                    "2": "get_current_block",
                    "1": "perform_special_action"
                },
                "FUN_08002f74": {
                    "1": "plan_get_current_block",
                    "2": "get_protocol_data",
                    "3": "get_current_block"
                },
                "plan_get_current_block()": {
                    "1": "get_current_block()"
                },
                "protocol_execute_runtime()": {
                    "1": "execute_protocol_runtime()"
                }
            }
        },
        "FUN_08003004": {
            "entrypoint": "0x08003004",
            "current_name": "calculate_speed_08003004",
            "code": "\nvoid calculate_speed_08003004(undefined4 acceleration,undefined4 velocity,undefined4 distance,undefined4 time,\n                 char flag)\n\n{\n  undefined4 result1;\n  int acceleration_rounded;\n  int result3;\n  int result4;\n  undefined4 result2;\n  undefined4 result3;\n  undefined4 result4;\n  undefined4 result5;\n  uint result9;\n  int index;\n  ushort *pointer;\n  int difference;\n  uint max_difference;\n  undefined8 temp_double1;\n  undefined8 temp_double2;\n  undefined8 temp_double3;\n  undefined4 max_speed;\n  undefined4 local_var2;\n  \n  index = (uint)DAT_20000cf0 * 0x40;\n  pointer = (ushort *)(&DAT_20000870 + index);\n  result1 = __aeabi_fmul(DAT_20000ebc,acceleration);\n  temp_double1 = __aeabi_f2d(result1);\n  acceleration_rounded = lround((int)temp_double1,(int)((ulonglong)temp_double1 >> 0x20));\n  result1 = __aeabi_fmul(DAT_20000ec0,velocity);\n  temp_double1 = __aeabi_f2d(result1);\n  result3 = lround((int)temp_double1,(int)((ulonglong)temp_double1 >> 0x20));\n  result1 = __aeabi_fmul(DAT_20000ec4,distance);\n  temp_double1 = __aeabi_f2d(result1);\n  result4 = lround((int)temp_double1,(int)((ulonglong)temp_double1 >> 0x20));\n  *pointer = 0;\n  if (acceleration_rounded < DAT_20000cf4) {\n    *pointer = *pointer | 0x20;\n  }\n  if (result3 < DAT_20000cf8) {\n    *pointer = *pointer | 0x880;\n  }\n  if (result4 < DAT_20000cfc) {\n    *pointer = *pointer | 0x200;\n  }\n  difference = acceleration_rounded - DAT_20000cf4;\n  if (difference < 0) {\n    difference = -difference;\n  }\n  *(int *)(&DAT_20000874 + index) = difference;\n  difference = result3 - DAT_20000cf8;\n  if (difference < 0) {\n    difference = -difference;\n  }\n  *(int *)(&DAT_20000878 + index) = difference;\n  difference = result4 - DAT_20000cfc;\n  if (difference < 0) {\n    difference = -difference;\n  }\n  *(int *)(&DAT_2000087c + index) = difference;\n  result9 = *(uint *)(&DAT_2000087c + index);\n  if (*(uint *)(&DAT_2000087c + index) < *(uint *)(&DAT_20000878 + index)) {\n    result9 = *(uint *)(&DAT_20000878 + index);\n  }\n  max_difference = *(uint *)(&DAT_20000874 + index);\n  if (*(uint *)(&DAT_20000874 + index) < result9) {\n    max_difference = result9;\n  }\n  *(uint *)(&DAT_20000880 + index) = max_difference;\n  if (*(int *)(&DAT_20000880 + index) != 0) {\n    result1 = __floatsisf(acceleration_rounded - DAT_20000cf4);\n    result1 = __aeabi_fdiv(result1,DAT_20000ebc);\n    result2 = __floatsisf(result3 - DAT_20000cf8);\n    result2 = __aeabi_fdiv(result2,DAT_20000ec0);\n    result3 = __floatsisf(result4 - DAT_20000cfc);\n    result3 = __aeabi_fdiv(result3,DAT_20000ec4);\n    result4 = __aeabi_fmul(result1,result1);\n    result5 = __aeabi_fmul(result2,result2);\n    result4 = __addsf3(result4,result5);\n    result5 = __aeabi_fmul(result3,result3);\n    result4 = __addsf3(result4,result5);\n    temp_double1 = __aeabi_f2d(result4);\n    temp_double1 = sqrt((int)temp_double1,(int)((ulonglong)temp_double1 >> 0x20));\n    result4 = __truncdfsf2((int)temp_double1,(int)((ulonglong)temp_double1 >> 0x20));\n    *(undefined4 *)(&DAT_20000890 + index) = result4;\n    result4 = __aeabi_fdiv(0x3f800000,*(undefined4 *)(&DAT_20000890 + index));\n    if (flag == '\\0') {\n      local_var2 = __aeabi_fmul(time,result4);\n    }\n    else {\n      local_var2 = __aeabi_fdiv(0x3f800000,time);\n    }\n    result5 = __aeabi_fmul(*(undefined4 *)(&DAT_20000890 + index),local_var2);\n    *(undefined4 *)(&DAT_20000884 + index) = result5;\n    result5 = __floatsisf(*(undefined4 *)(&DAT_20000880 + index));\n    result5 = __aeabi_fmul(result5,local_var2);\n    temp_double1 = __aeabi_f2d(result5);\n    temp_double1 = ceil((int)temp_double1,(int)((ulonglong)temp_double1 >> 0x20));\n    result5 = __aeabi_d2uiz((int)temp_double1,(int)((ulonglong)temp_double1 >> 0x20));\n    *(undefined4 *)(&DAT_200008ac + index) = result5;\n    result5 = __floatsisf(*(undefined4 *)(&DAT_20000880 + index));\n    result5 = __aeabi_fmul(result5,result4);\n    result5 = __aeabi_fmul(result5,DAT_20000edc);\n    result5 = __aeabi_fdiv(result5,0x453b8000);\n    temp_double1 = __aeabi_f2d(result5);\n    temp_double1 = ceil((int)temp_double1,(int)((ulonglong)temp_double1 >> 0x20));\n    result5 = __aeabi_d2iz((int)temp_double1,(int)((ulonglong)temp_double1 >> 0x20));\n    *(undefined4 *)(&DAT_200008a0 + index) = result5;\n    result9 = __aeabi_fmul(result1,result4);\n    result1 = __aeabi_fmul(result2,result4);\n    result2 = __aeabi_fmul(result3,result4);\n    max_speed = 0;\n    if ((DAT_20000cf0 != DAT_20000cf1) && (difference = __aeabi_fcmpgt(DAT_20000d0c,0), difference != 0)) {\n      result3 = __aeabi_fmul(DAT_20000d00 ^ 0x80000000,result9);\n      result4 = __aeabi_fmul(DAT_20000d04,result1);\n      result3 = __aeabi_fsub(result3,result4);\n      result4 = __aeabi_fmul(DAT_20000d08,result2);\n      result3 = __aeabi_fsub(result3,result4);\n      temp_double1 = __aeabi_f2d(result3);\n      difference = __aeabi_dcmplt((int)temp_double1,(int)((ulonglong)temp_double1 >> 0x20),0x66666666,0x3fee6666);\n      if (difference != 0) {\n        difference = __aeabi_fcmplt(DAT_20000d0c,*(undefined4 *)(&DAT_20000884 + index));\n        max_speed = DAT_20000d0c;\n        if (difference == 0) {\n          max_speed = *(undefined4 *)(&DAT_20000884 + index);\n        }\n        temp_double1 = __aeabi_f2d(result3);\n        difference = __aeabi_dcmpgt((int)temp_double1,(int)((ulonglong)temp_double1 >> 0x20),0x66666666,0xbfee6666);\n        if (difference != 0) {\n          temp_double1 = __aeabi_f2d(result3);\n          temp_double1 = __subdf3(0,0x3ff00000,(int)temp_double1,(int)((ulonglong)temp_double1 >> 0x20));\n          temp_double1 = __muldf3((int)temp_double1,(int)((ulonglong)temp_double1 >> 0x20),0,0x3fe00000);\n          temp_double1 = sqrt((int)temp_double1,(int)((ulonglong)temp_double1 >> 0x20));\n          result3 = __truncdfsf2((int)temp_double1,(int)((ulonglong)temp_double1 >> 0x20));\n          temp_double1 = __aeabi_f2d(max_speed);\n          result4 = __aeabi_fmul(DAT_20000edc,DAT_20000ee0);\n          result4 = __aeabi_fmul(result4,result3);\n          temp_double2 = __aeabi_f2d(result4);\n          temp_double3 = __aeabi_f2d(result3);\n          temp_double3 = __subdf3(0,0x3ff00000,(int)temp_double3,(int)((ulonglong)temp_double3 >> 0x20));\n          temp_double2 = __divdf3((int)temp_double2,(int)((ulonglong)temp_double2 >> 0x20),(int)temp_double3,\n                            (int)((ulonglong)temp_double3 >> 0x20));\n          temp_double2 = sqrt((int)temp_double2,(int)((ulonglong)temp_double2 >> 0x20));\n          difference = __aeabi_dcmplt((int)temp_double1,(int)((ulonglong)temp_double1 >> 0x20),(int)temp_double2,\n                                  (int)((ulonglong)temp_double2 >> 0x20));\n          if (difference == 0) {\n            result4 = __aeabi_fmul(DAT_20000edc,DAT_20000ee0);\n            result4 = __aeabi_fmul(result4,result3);\n            temp_double1 = __aeabi_f2d(result4);\n            temp_double2 = __aeabi_f2d(result3);\n            temp_double2 = __subdf3(0,0x3ff00000,(int)temp_double2,(int)((ulonglong)temp_double2 >> 0x20));\n            temp_double1 = __divdf3((int)temp_double1,(int)((ulonglong)temp_double1 >> 0x20),(int)temp_double2,\n                              (int)((ulonglong)temp_double2 >> 0x20));\n            temp_double1 = sqrt((int)temp_double1,(int)((ulonglong)temp_double1 >> 0x20));\n            max_speed = __truncdfsf2((int)temp_double1,(int)((ulonglong)temp_double1 >> 0x20));\n          }\n        }\n      }\n    }\n    *(undefined4 *)(&DAT_2000088c + index) = max_speed;\n    result4 = calculate_max_allowable_speed(DAT_20000edc ^ 0x80000000,0,*(undefined4 *)(&DAT_20000890 + index))\n    ;\n    difference = __aeabi_fcmplt(max_speed,result4);\n    result3 = result4;\n    if (difference != 0) {\n      result3 = max_speed;\n    }\n    *(undefined4 *)(&DAT_20000888 + index) = result3;\n    difference = __aeabi_fcmpge(result4,*(undefined4 *)(&DAT_20000884 + index));\n    if (difference == 0) {\n      (&DAT_20000895)[index] = 0;\n    }\n    else {\n      (&DAT_20000895)[index] = 1;\n    }\n    (&DAT_20000894)[index] = 1;\n    DAT_20000d0c = *(undefined4 *)(&DAT_20000884 + index);\n    DAT_20000cf0 = DAT_20000cf2;\n    DAT_20000d00 = result9;\n    DAT_20000d04 = result1;\n    DAT_20000d08 = result2;\n    DAT_20000cf2 = get_next_block_index(DAT_20000cf2);\n    DAT_20000cf4 = acceleration_rounded;\n    DAT_20000cf8 = result3;\n    DAT_20000cfc = result4;\n    recalculate_planner();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003004": "calculate_speed_08003004",
                "param_1": "acceleration",
                "param_2": "velocity",
                "param_3": "distance",
                "param_4": "time",
                "param_5": "flag",
                "uVar1": "result1",
                "iVar2": "acceleration_rounded",
                "iVar3": "result3",
                "iVar4": "result4",
                "uVar5": "result2",
                "uVar6": "result3",
                "uVar7": "result4",
                "uVar8": "result5",
                "uVar9": "result9",
                "iVar10": "index",
                "puVar11": "pointer",
                "iVar12": "difference",
                "uVar13": "max_difference",
                "uVar14": "temp_double1",
                "uVar15": "temp_double2",
                "uVar16": "temp_double3",
                "local_20": "max_speed",
                "local_1c": "local_var2",
                "max_allowable_speed": "calculate_max_allowable_speed",
                "next_block_index": "get_next_block_index",
                "planner_recalculate": "recalculate_planner"
            },
            "calling": [
                "FUN_08001e98"
            ],
            "called": [
                "FUN_08009228",
                "FUN_08008b60",
                "FUN_08008894",
                "FUN_08008ba0",
                "FUN_08009250",
                "FUN_08009054",
                "FUN_08009264",
                "FUN_08008bf0",
                "FUN_08008eec",
                "FUN_08008c30",
                "FUN_080082d0",
                "FUN_08008cd8",
                "FUN_08002870",
                "FUN_080098d0",
                "FUN_080095b8",
                "FUN_08009318",
                "FUN_08008cdc",
                "FUN_08008e44",
                "FUN_08008640",
                "FUN_08002978",
                "FUN_08002edc",
                "FUN_08008b24",
                "FUN_08008590"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08003004": {
                    "3": "calculate_speed_and_distance",
                    "1": "calculate_block_speed",
                    "2": "calculate_block_distance",
                    "8": "calculate_speed"
                },
                "param_1": {
                    "1": "speed_param1",
                    "2": "value1",
                    "4": "param1",
                    "13": "acceleration"
                },
                "param_2": {
                    "4": "param2",
                    "2": "value2",
                    "1": "second_parameter",
                    "10": "velocity"
                },
                "param_3": {
                    "1": "deceleration_factor",
                    "2": "value3",
                    "4": "time",
                    "6": "distance"
                },
                "param_4": {
                    "5": "param4",
                    "2": "value4",
                    "1": "input4",
                    "6": "time",
                    "3": "distance"
                },
                "param_5": {
                    "6": "flag",
                    "1": "calculation_mode",
                    "4": "is_negative",
                    "3": "param5",
                    "2": "direction"
                },
                "uVar1": {
                    "1": "acceleration_conv",
                    "2": "temp1",
                    "13": "result1"
                },
                "iVar2": {
                    "1": "rounded_distance1",
                    "2": "rounded1",
                    "5": "result2",
                    "6": "acceleration_rounded"
                },
                "iVar3": {
                    "1": "speed_y_rounded",
                    "2": "rounded_result2",
                    "5": "velocity_rounded"
                },
                "iVar4": {
                    "1": "rounded_deceleration",
                    "2": "rounded_time",
                    "5": "result4",
                    "3": "distance_rounded"
                },
                "uVar5": {
                    "1": "multiplied_value2",
                    "4": "result5",
                    "2": "velocity_float",
                    "7": "result2"
                },
                "uVar6": {
                    "4": "result6",
                    "1": "distance_scaled",
                    "7": "result3",
                    "2": "temp2"
                },
                "uVar7": {
                    "1": "squared_acc_jerk",
                    "4": "result7",
                    "2": "temp4",
                    "6": "result4"
                },
                "uVar8": {
                    "1": "velocity_squared",
                    "2": "temp4",
                    "4": "result8",
                    "6": "result5"
                },
                "uVar9": {
                    "1": "result",
                    "2": "temp5",
                    "4": "result9",
                    "3": "max_value"
                },
                "iVar10": {
                    "1": "block_size_index",
                    "3": "result10",
                    "2": "offset",
                    "9": "block_index"
                },
                "puVar11": {
                    "1": "block_info",
                    "4": "pointer",
                    "2": "speed_ptr",
                    "3": "block"
                },
                "iVar12": {
                    "1": "i_var12",
                    "2": "result12",
                    "3": "abs_diff",
                    "11": "difference"
                },
                "uVar13": {
                    "1": "speed_temp",
                    "4": "max_diff",
                    "2": "min_value"
                },
                "uVar14": {
                    "4": "temp_double1",
                    "1": "temp9",
                    "2": "temp1"
                },
                "uVar15": {
                    "5": "temp_double2",
                    "1": "temp4",
                    "2": "temp7"
                },
                "uVar16": {
                    "1": "ceiled_speed",
                    "2": "temp3",
                    "5": "temp_double3"
                },
                "local_20": {
                    "1": "result",
                    "2": "result1",
                    "4": "local_var1"
                },
                "local_1c": {
                    "4": "local_var2",
                    "1": "reverse_converted_speed",
                    "2": "result2"
                },
                "max_allowable_speed": {
                    "1": "calculate_max_allowable_speed"
                },
                "next_block_index": {
                    "1": "get_next_block_index"
                },
                "planner_recalculate": {
                    "1": "recalculate_planner"
                }
            }
        },
        "FUN_080035ec": {
            "entrypoint": "0x080035ec",
            "current_name": "initialize_parameters_080035ec",
            "code": "\nvoid initialize_parameters_080035ec(undefined4 parameter1,undefined4 parameter2,undefined4 parameter3)\n\n{\n  DAT_20000cf4 = parameter1;\n  DAT_20000cf8 = parameter2;\n  DAT_20000cfc = parameter3;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080035ec": "initialize_parameters_080035ec",
                "param_1": "parameter1",
                "param_2": "parameter2",
                "param_3": "parameter3"
            },
            "calling": [
                "FUN_0800283a"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080035ec": {
                    "5": "initialize_data",
                    "3": "initialize_variables",
                    "12": "initialize_parameters",
                    "1": "assign_parameters",
                    "2": "initialize_function"
                },
                "param_1": {
                    "4": "value1",
                    "1": "param1",
                    "9": "parameter1",
                    "3": "first_parameter",
                    "2": "first_param"
                },
                "param_2": {
                    "1": "arg2",
                    "4": "value2",
                    "3": "second_parameter",
                    "9": "parameter2",
                    "2": "second_param"
                },
                "param_3": {
                    "4": "value3",
                    "1": "end_index",
                    "9": "parameter3",
                    "3": "input3",
                    "2": "third_param"
                }
            }
        },
        "FUN_08003618": {
            "entrypoint": "0x08003618",
            "current_name": "update_planner_08003618",
            "code": "\nvoid update_planner_08003618(undefined4 new_value)\n\n{\n  undefined4 converted_value;\n  int index;\n  undefined4 divisor;\n  \n  index = (uint)DAT_20000cf1 * 0x40;\n  divisor = *(undefined4 *)(&DAT_20000890 + index);\n  converted_value = __floatsisf(new_value);\n  converted_value = __aeabi_fmul(divisor,converted_value);\n  divisor = __floatsisf(*(undefined4 *)(&DAT_20000880 + index));\n  converted_value = __aeabi_fdiv(converted_value,divisor);\n  *(undefined4 *)(&DAT_20000890 + index) = converted_value;\n  *(undefined4 *)(&DAT_20000880 + index) = new_value;\n  *(undefined4 *)(&DAT_20000888 + index) = 0;\n  *(undefined4 *)(&DAT_2000088c + index) = 0;\n  (&DAT_20000895)[index] = 0;\n  (&DAT_20000894)[index] = 1;\n  recalculate_planner();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003618": "update_planner_08003618",
                "param_1": "new_value",
                "uVar1": "converted_value",
                "iVar2": "index",
                "uVar3": "divisor",
                "planner_recalculate": "recalculate_planner"
            },
            "calling": [
                "FUN_080058a0"
            ],
            "called": [
                "FUN_08009054",
                "FUN_08008e44",
                "FUN_08002edc",
                "FUN_08008eec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08003618": {
                    "4": "update_planner_data",
                    "2": "update_planner_values",
                    "3": "update_value",
                    "12": "update_planner",
                    "1": "update_data"
                },
                "param_1": {
                    "3": "input",
                    "13": "new_value",
                    "7": "value",
                    "1": "new_input_value"
                },
                "uVar1": {
                    "1": "scaled_value",
                    "16": "converted_value",
                    "7": "float_value",
                    "2": "float_input",
                    "3": "converted_input"
                },
                "iVar2": {
                    "1": "data_index",
                    "4": "offset",
                    "2": "array_index",
                    "24": "index"
                },
                "uVar3": {
                    "1": "current_value",
                    "6": "divisor",
                    "3": "value_1",
                    "2": "entry_value"
                },
                "FUN_08009054": {
                    "2": "calculate_new_value",
                    "1": "calculate_index",
                    "6": "calculate_product"
                },
                "param_2": {
                    "1": "multiplier",
                    "2": "param2"
                },
                "param_3": {
                    "1": "third_param",
                    "2": "param3"
                },
                "param_4": {
                    "1": "input_value4",
                    "2": "param4"
                },
                "FUN_08008e44": {
                    "1": "perform_some_action",
                    "2": "calculate_result"
                },
                "FUN_08002edc": {
                    "1": "reset_values",
                    "10": "planner_recalculate",
                    "3": "reset_planner"
                },
                "FUN_08008eec": {
                    "1": "perform_division",
                    "5": "calculate_division",
                    "3": "divide_values"
                },
                "(&DAT_20000890 + iVar2)": {
                    "1": "previous_value"
                },
                "&DAT_20000cf1": {
                    "1": "data_offset"
                },
                "(__floatsisf)": {
                    "1": "convert_to_int"
                },
                "(__aeabi_fmul)": {
                    "1": "multiply_floats"
                },
                "(__aeabi_fdiv)": {
                    "1": "divide_floats"
                },
                "(&DAT_20000880 + iVar2)": {
                    "1": "initial_value"
                },
                "(&DAT_20000888 + iVar2)": {
                    "1": "var_a"
                },
                "(&DAT_2000088c + iVar2)": {
                    "1": "var_b"
                },
                "(&DAT_20000895)[iVar2]": {
                    "1": "var_c"
                },
                "(&DAT_20000894)[iVar2]": {
                    "1": "var_d"
                },
                "planner_recalculate": {
                    "2": "recalculate_planner"
                }
            }
        },
        "FUN_0800369c": {
            "entrypoint": "0x0800369c",
            "current_name": "print_string_0800369c",
            "code": "\nvoid print_string_0800369c(char *string)\n\n{\n  char *current_char;\n  \n  current_char = string;\n  while (*current_char != '\\0') {\n    serial_write(*current_char);\n    current_char = current_char + 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800369c": "print_string_0800369c",
                "param_1": "string",
                "local_c": "current_char"
            },
            "calling": [
                "FUN_08004900",
                "FUN_080039bc"
            ],
            "called": [
                "FUN_08008250"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800369c": {
                    "25": "print_string",
                    "1": "write_string_to_serial",
                    "2": "write_string"
                },
                "param_1": {
                    "5": "input_string",
                    "22": "string",
                    "2": "str",
                    "1": "string_to_send"
                },
                "local_c": {
                    "2": "current_character",
                    "29": "current_char"
                }
            }
        },
        "FUN_080036c6": {
            "entrypoint": "0x080036c6",
            "current_name": "print_string_080036c6",
            "code": "\nvoid print_string_080036c6(char *string)\n\n{\n  char *current_char;\n  \n  current_char = string;\n  while (*current_char != '\\0') {\n    serial_write(*current_char);\n    current_char = current_char + 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080036c6": "print_string_080036c6",
                "param_1": "string",
                "local_c": "current_char"
            },
            "calling": [
                "FUN_080041a0",
                "FUN_08004148",
                "FUN_08004250",
                "FUN_08004030",
                "FUN_08004940",
                "FUN_08004900",
                "FUN_08004228",
                "FUN_0800423c",
                "FUN_080046d0",
                "FUN_080044e8"
            ],
            "called": [
                "FUN_08008250"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080036c6": {
                    "24": "print_string",
                    "3": "write_string_to_serial",
                    "1": "serial_write_string"
                },
                "param_1": {
                    "23": "string",
                    "4": "string_to_print"
                },
                "local_c": {
                    "4": "current_character",
                    "27": "current_char"
                }
            }
        },
        "FUN_080036f0": {
            "entrypoint": "0x080036f0",
            "current_name": "print_binary_080036f0",
            "code": "\nvoid print_binary_080036f0(uint number,int bit_count)\n\n{\n  undefined4 bit_value;\n  int bit_index;\n  uint bit_mask;\n  \n  bit_mask = 1 << (bit_count - 1U & 0xff);\n  for (bit_index = 0; bit_index < bit_count; bit_index = bit_index + 1) {\n    if ((bit_mask & number) == 0) {\n      bit_value = 0x30;\n    }\n    else {\n      bit_value = 0x31;\n    }\n    serial_write(bit_value);\n    bit_mask = bit_mask >> 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080036f0": "print_binary_080036f0",
                "param_1": "number",
                "param_2": "bit_count",
                "local_10": "bit_index",
                "local_c": "bit_mask",
                "uVar1": "bit_value"
            },
            "calling": [
                "FUN_08003740",
                "FUN_0800375c"
            ],
            "called": [
                "FUN_08008250"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080036f0": {
                    "2": "print_binary_digits",
                    "3": "print_bits",
                    "1": "print_binary_numbers",
                    "5": "print_binary_number",
                    "14": "print_binary"
                },
                "param_1": {
                    "6": "input_number",
                    "2": "input_num",
                    "22": "number",
                    "1": "input_value"
                },
                "param_2": {
                    "1": "bits_count",
                    "2": "num_digits",
                    "3": "bit_length",
                    "12": "num_bits"
                },
                "local_10": {
                    "1": "digit_index",
                    "4": "bit_position",
                    "19": "bit_index",
                    "2": "bit_count",
                    "3": "current_bit"
                },
                "local_c": {
                    "9": "mask",
                    "22": "bit_mask"
                },
                "uVar1": {
                    "4": "binary_digit",
                    "1": "output",
                    "11": "bit_value",
                    "2": "output_character"
                }
            }
        },
        "FUN_08003740": {
            "entrypoint": "0x08003740",
            "current_name": "print_in_base2_08003740",
            "code": "\nvoid print_in_base2_08003740(undefined input_value)\n\n{\n  print_in_base2_08003740(input_value,8);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003740": "print_in_base2_08003740",
                "param_1": "input_value",
                "print_base2": "print_in_base2"
            },
            "calling": [],
            "called": [
                "FUN_080036f0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08003740": {
                    "1": "print_binary_in_base2",
                    "3": "print_in_binary",
                    "2": "print_binary_representation",
                    "7": "print_binary"
                },
                "param_1": {
                    "2": "input",
                    "1": "param",
                    "3": "number",
                    "8": "input_value",
                    "7": "value",
                    "6": "input_number"
                },
                "FUN_080036f0": {
                    "1": "convert_to_base",
                    "11": "print_base2"
                },
                "param_2": {
                    "1": "length",
                    "8": "num_bits",
                    "2": "base"
                },
                "print_base2": {
                    "1": "print_in_base2"
                },
                "8": {
                    "1": "binary_base"
                }
            }
        },
        "FUN_0800375c": {
            "entrypoint": "0x0800375c",
            "current_name": "print_in_base2_0800375c",
            "code": "\nvoid print_in_base2_0800375c(undefined2 value)\n\n{\n  print_in_binary(value,0x10);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800375c": "print_in_base2_0800375c",
                "param_1": "value",
                "print_base2": "print_in_binary"
            },
            "calling": [
                "FUN_08004250"
            ],
            "called": [
                "FUN_080036f0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800375c": {
                    "1": "print_number_in_binary",
                    "7": "print_base2_wrapper",
                    "2": "print_number_in_base2",
                    "8": "print_in_base2",
                    "4": "print_in_base_2",
                    "3": "print_binary"
                },
                "param_1": {
                    "2": "input_num",
                    "6": "input_value",
                    "10": "value",
                    "1": "number_to_convert",
                    "8": "number"
                },
                "FUN_080036f0": {
                    "1": "print_base2_helper",
                    "21": "print_base2"
                },
                "print_base2": {
                    "1": "print_base2"
                },
                "param_2": {
                    "2": "width",
                    "1": "length",
                    "6": "num_bits",
                    "4": "base"
                }
            }
        },
        "FUN_08003778": {
            "entrypoint": "0x08003778",
            "current_name": "print_number_08003778",
            "code": "\nvoid print_number_08003778(uint number)\n\n{\n  uint index;\n  uint dividend;\n  char digits [12];\n  byte digit_count;\n  \n  digit_count = 0;\n  dividend = number;\n  if (number == 0) {\n    write_to_serial(0x30);\n  }\n  else {\n    for (; dividend != 0; dividend = dividend / 10) {\n      index = (uint)digit_count;\n      digit_count = digit_count + 1;\n      digits[index + 1] = (char)(dividend % 10) + '0';\n    }\n    for (; digit_count != 0; digit_count = digit_count - 1) {\n      write_to_serial(digits[digit_count]);\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003778": "print_number_08003778",
                "param_1": "number",
                "uVar1": "index",
                "local_1c": "dividend",
                "acStack_15": "digits",
                "local_9": "digit_count",
                "serial_write": "write_to_serial"
            },
            "calling": [
                "FUN_080037fc"
            ],
            "called": [
                "FUN_08008250"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08003778": {
                    "2": "write_number_to_serial",
                    "1": "write_number",
                    "28": "print_number"
                },
                "param_1": {
                    "31": "number"
                },
                "uVar1": {
                    "6": "temp",
                    "4": "temp_var",
                    "5": "counter",
                    "1": "previous_digit",
                    "8": "index"
                },
                "local_1c": {
                    "4": "remaining_number",
                    "1": "temp_num",
                    "11": "dividend",
                    "7": "remainder",
                    "3": "current_number"
                },
                "acStack_15": {
                    "1": "number_string",
                    "3": "digit_buffer",
                    "9": "digit_stack",
                    "14": "digits"
                },
                "local_9": {
                    "1": "count",
                    "10": "num_digits",
                    "13": "digit_count",
                    "2": "digit_index",
                    "5": "digit"
                },
                "serial_write": {
                    "1": "send_to_serial",
                    "3": "write_to_serial"
                }
            }
        },
        "FUN_080037fc": {
            "entrypoint": "0x080037fc",
            "current_name": "print_absolute_value_080037fc",
            "code": "\nvoid print_absolute_value_080037fc(int value)\n\n{\n  int absolute_value;\n  \n  absolute_value = value;\n  if (value < 0) {\n    write_negative_sign(0x2d);\n    absolute_value = -value;\n  }\n  print_decimal_number(absolute_value);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080037fc": "print_absolute_value_080037fc",
                "param_1": "value",
                "local_c": "absolute_value",
                "serial_write": "write_negative_sign",
                "print_uint32_base10": "print_decimal_number"
            },
            "calling": [
                "FUN_08004250",
                "FUN_08004900",
                "FUN_080046d0"
            ],
            "called": [
                "FUN_08003778",
                "FUN_08008250"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080037fc": {
                    "1": "convert_and_print_positive_integer",
                    "3": "print_abs_value",
                    "24": "print_absolute_value",
                    "2": "print_signed_integer"
                },
                "param_1": {
                    "1": "input",
                    "2": "input_value",
                    "12": "value",
                    "8": "input_number",
                    "3": "num",
                    "5": "number"
                },
                "local_c": {
                    "2": "absolute_number",
                    "22": "absolute_value",
                    "7": "abs_value"
                },
                "serial_write": {
                    "1": "write_negative_sign"
                },
                "print_uint32_base10": {
                    "1": "print_decimal_number"
                }
            }
        },
        "FUN_08003826": {
            "entrypoint": "0x08003826",
            "current_name": "convert_float_to_decimal_08003826",
            "code": "\nvoid convert_float_to_decimal_08003826(uint input_float)\n\n{\n  int is_negative;\n  undefined4 converted_float;\n  byte temp_byte;\n  uint index;\n  uint float_value;\n  char decimal_string [13];\n  uint integer_part;\n  byte index;\n  byte loop_counter;\n  \n  is_negative = __aeabi_fcmplt(input_float,0);\n  float_value = input_float;\n  if (is_negative != 0) {\n    serial_write(0x2d);\n    float_value = input_float ^ 0x80000000;\n  }\n  for (loop_counter = DAT_20000ef9; 1 < loop_counter; loop_counter = loop_counter - 2) {\n    float_value = __aeabi_fmul(float_value,0x42c80000);\n  }\n  if (loop_counter != 0) {\n    float_value = __aeabi_fmul(float_value,0x41200000);\n  }\n  converted_float = __addsf3(float_value,0x3f000000);\n  index = 0;\n  integer_part = __aeabi_f2iz(converted_float);\n  decimal_string[DAT_20000ef9 + 1] = '.';\n  for (; integer_part != 0; integer_part = integer_part / 10) {\n    if (index == DAT_20000ef9) {\n      index = index + 1;\n    }\n    index = (uint)index;\n    index = index + 1;\n    decimal_string[index + 1] = (char)(integer_part % 10) + '0';\n  }\n  while (index < DAT_20000ef9) {\n    index = (uint)index;\n    index = index + 1;\n    decimal_string[index + 1] = '0';\n  }\n  if (index == DAT_20000ef9) {\n    temp_byte = index + 1;\n    index = index + 2;\n    decimal_string[temp_byte + 1] = '0';\n  }\n  for (; index != 0; index = index - 1) {\n    serial_write(decimal_string[index]);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003826": "convert_float_to_decimal_08003826",
                "param_1": "input_float",
                "iVar1": "is_negative",
                "uVar2": "converted_float",
                "bVar3": "temp_byte",
                "uVar4": "index",
                "local_24": "float_value",
                "acStack_1d": "decimal_string",
                "local_10": "integer_part",
                "local_a": "index",
                "local_9": "loop_counter"
            },
            "calling": [
                "FUN_08004250",
                "FUN_08004940",
                "FUN_080046d0",
                "FUN_080044e8"
            ],
            "called": [
                "FUN_08009228",
                "FUN_08008cdc",
                "FUN_08008250",
                "FUN_08009278",
                "FUN_08008eec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08003826": {
                    "1": "convert_float_to_char",
                    "3": "convert_float_to_ascii",
                    "11": "convert_float_to_decimal",
                    "9": "convert_float_to_string"
                },
                "param_1": {
                    "8": "input",
                    "2": "value",
                    "4": "input_number",
                    "1": "float_input",
                    "3": "number",
                    "9": "input_float"
                },
                "iVar1": {
                    "31": "is_negative"
                },
                "uVar2": {
                    "6": "converted_float",
                    "2": "modified_number",
                    "1": "rounded_value",
                    "3": "normalized_float"
                },
                "bVar3": {
                    "1": "num_digits",
                    "2": "decimal_digit",
                    "12": "temp_byte",
                    "9": "digit",
                    "3": "extra_digit"
                },
                "uVar4": {
                    "1": "temp_u_int",
                    "11": "index",
                    "2": "temp2"
                },
                "local_24": {
                    "1": "temp_number",
                    "2": "abs_value",
                    "7": "float_value",
                    "3": "abs_float",
                    "4": "value"
                },
                "acStack_1d": {
                    "1": "output_str",
                    "12": "decimal_string",
                    "3": "output_string",
                    "6": "result_string"
                },
                "local_10": {
                    "2": "digit",
                    "1": "quotient",
                    "3": "int_value",
                    "8": "integer_part"
                },
                "local_a": {
                    "2": "current_index",
                    "1": "decimal_index",
                    "9": "digit_index",
                    "12": "index"
                },
                "local_9": {
                    "9": "loop_counter",
                    "1": "constant",
                    "2": "loop_count",
                    "3": "digit_count"
                },
                "uint param_1": {
                    "1": "input_float"
                }
            }
        },
        "FUN_08003980": {
            "entrypoint": "0x08003980",
            "current_name": "initialize_data_08003980",
            "code": "\nvoid initialize_data_08003980(void)\n\n{\n  DAT_20000e10 = 0;\n  DAT_20000e11 = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003980": "initialize_data_08003980"
            },
            "calling": [
                "FUN_080039a0",
                "FUN_08003f34"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08003980": {
                    "29": "initialize_data",
                    "2": "reset_data"
                },
                "DAT_20000e10": {
                    "5": "data_flag1",
                    "3": "data_count",
                    "2": "data_variable1",
                    "4": "counter",
                    "1": "data_flag",
                    "6": "data_counter"
                },
                "DAT_20000e11": {
                    "5": "data_flag2",
                    "2": "counter_two",
                    "1": "total",
                    "7": "data_flag"
                }
            }
        },
        "FUN_080039a0": {
            "entrypoint": "0x080039a0",
            "current_name": "initialize_protocol_080039a0",
            "code": "\nvoid initialize_protocol_080039a0(void)\n\n{\n  reset_line_buffer();\n  display_init_message();\n  DAT_20000e50 = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080039a0": "initialize_protocol_080039a0",
                "protocol_reset_line_buffer": "reset_line_buffer",
                "report_init_message": "display_init_message"
            },
            "calling": [
                "FUN_08001ddc"
            ],
            "called": [
                "FUN_08003980",
                "FUN_08004228"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080039a0": {
                    "1": "initialize",
                    "28": "initialize_protocol"
                },
                "FUN_08003980": {
                    "3": "reset_protocol",
                    "17": "reset_line_buffer",
                    "1": "reset_buffers"
                },
                "FUN_08004228": {
                    "1": "init_report_message",
                    "2": "init_message",
                    "8": "initialize_report",
                    "7": "initialize_report_message",
                    "3": "init_report",
                    "4": "report_init_message"
                },
                "protocol_reset_line_buffer": {
                    "10": "reset_line_buffer"
                },
                "report_init_message": {
                    "4": "display_init_message",
                    "1": "show_initialization_message"
                },
                "<variable_name>": {
                    "1": "<new_variable_name>"
                }
            }
        },
        "FUN_080039bc": {
            "entrypoint": "0x080039bc",
            "current_name": "process_startup_lines_080039bc",
            "code": "\nvoid process_startup_lines_080039bc(void)\n\n{\n  int result;\n  undefined4 execution_result;\n  byte line_index;\n  \n  for (line_index = 0; line_index < 2; line_index = line_index + 1) {\n    result = read_startup_line(line_index,&DAT_20000d10);\n    if (result == 0) {\n      report_message(10);\n    }\n    else if (DAT_20000d10 != '\\0') {\n      print_line(&DAT_20000d10);\n      execution_result = execute_line(&DAT_20000d10);\n      report_message(execution_result);\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080039bc": "process_startup_lines_080039bc",
                "local_9": "line_index",
                "iVar1": "result",
                "uVar2": "execution_result",
                "settings_read_startup_line": "read_startup_line",
                "report_status_message": "report_message",
                "printString": "print_line",
                "gc_execute_line": "execute_line"
            },
            "calling": [
                "FUN_08001ddc",
                "FUN_08003b98"
            ],
            "called": [
                "FUN_08004030",
                "FUN_0800369c",
                "FUN_08004d2c",
                "FUN_080005b4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080039bc": {
                    "1": "parse_startup_lines",
                    "3": "read_and_execute_startup_lines",
                    "19": "process_startup_lines",
                    "2": "execute_startup"
                },
                "local_9": {
                    "2": "index",
                    "1": "current_line_index",
                    "8": "line_index",
                    "3": "counter",
                    "5": "iteration_count",
                    "4": "line_counter"
                },
                "iVar1": {
                    "12": "read_result",
                    "16": "result",
                    "1": "read_startup_status"
                },
                "uVar2": {
                    "1": "execute_result",
                    "4": "status",
                    "2": "execution_status",
                    "6": "status_code",
                    "11": "execution_result"
                },
                "settings_read_startup_line": {
                    "6": "read_startup_line"
                },
                "&DAT_20000d10": {
                    "1": "startup_line"
                },
                "report_status_message": {
                    "1": "display_status_message",
                    "4": "report_message"
                },
                "printString": {
                    "1": "print_string",
                    "4": "print_line"
                },
                "gc_execute_line": {
                    "5": "execute_line"
                },
                "DAT_20000d10": {
                    "2": "startup_line"
                },
                "param_1": {
                    "1": "start_line"
                },
                "FUN_08004030": {
                    "1": "process_status_message"
                },
                "FUN_0800369c": {
                    "1": "print_string"
                },
                "FUN_08004d2c": {
                    "1": "execute_gc_line"
                },
                "FUN_080005b4": {
                    "1": "report_line_status"
                }
            }
        },
        "FUN_08003a18": {
            "entrypoint": "0x08003a18",
            "current_name": "process_param_08003a18",
            "code": "\nvoid process_param_08003a18(uint flags)\n\n{\n  if ((flags & 0x80) == 0) {\n    if ((flags & 0x40) == 0) {\n      if ((flags & 0x20) != 0) {\n        DAT_20000eaa = DAT_20000eaa | 2;\n      }\n    }\n    else {\n      DAT_20000eaa = DAT_20000eaa | 8;\n    }\n  }\n  else {\n    reset_microcontroller();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003a18": "process_param_08003a18",
                "param_1": "flags",
                "mc_reset": "reset_microcontroller"
            },
            "calling": [
                "FUN_080074c8"
            ],
            "called": [
                "FUN_080025e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08003a18": {
                    "1": "update_data",
                    "3": "handle_param",
                    "7": "process_param",
                    "6": "update_status",
                    "2": "process_flags"
                },
                "param_1": {
                    "5": "status",
                    "1": "data_flag",
                    "3": "param",
                    "2": "input_param",
                    "6": "flags"
                },
                "DAT_20000eaa": {
                    "1": "data_flag",
                    "3": "status_flags",
                    "2": "status_register"
                },
                "mc_reset": {
                    "4": "reset_microcontroller",
                    "1": "reset_mc",
                    "2": "reset_function"
                },
                "FUN_080025e8": {
                    "1": "reset_mc",
                    "2": "reset_function"
                }
            }
        },
        "FUN_08003a74": {
            "entrypoint": "0x08003a74",
            "current_name": "process_data_08003a74",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08003ad2) */\n\nvoid process_data_08003a74(void)\n\n{\n  byte data_byte;\n  \n  data_byte = DAT_20000eaa;\n  if (DAT_20000eaa != 0) {\n    if ((DAT_20000eaa & 0x60) != 0) {\n      DAT_20000ea9 = 6;\n      if ((DAT_20000eaa & 0x40) != 0) {\n        report_alarm_message(0xffffffff);\n        report_feedback_message(1);\n        do {\n        } while( true );\n      }\n      report_alarm_message(0xfffffffe);\n      DAT_20000eaa = DAT_20000eaa & 0x9f;\n    }\n    if ((data_byte & 0x10) == 0) {\n      if ((data_byte & 1) != 0) {\n        report_realtime_status();\n        DAT_20000eaa = DAT_20000eaa & 0xfe;\n      }\n      if ((data_byte & 8) != 0) {\n        set_feed_hold();\n        DAT_20000eaa = DAT_20000eaa & 0xf7;\n      }\n      if ((data_byte & 4) != 0) {\n        cycle_reinitialize();\n        DAT_20000eaa = DAT_20000eaa & 0xfb;\n      }\n      if ((data_byte & 2) != 0) {\n        cycle_start();\n        if ((DAT_20000ee4 & 2) != 0) {\n          DAT_20000eb8 = 1;\n        }\n        DAT_20000eaa = DAT_20000eaa & 0xfd;\n      }\n    }\n    else {\n      DAT_20000ea8 = 1;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003a74": "process_data_08003a74",
                "bVar1": "data_byte",
                "st_feed_hold": "set_feed_hold",
                "st_cycle_reinitialize": "cycle_reinitialize",
                "st_cycle_start": "cycle_start"
            },
            "calling": [
                "FUN_08002fd4",
                "FUN_080024c4",
                "FUN_08001ddc",
                "FUN_08001e98",
                "FUN_08002408",
                "FUN_08003f34"
            ],
            "called": [
                "FUN_080041a0",
                "FUN_0800585c",
                "FUN_08004148",
                "FUN_0800587c",
                "FUN_08004940",
                "FUN_080058a0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08003a74": {
                    "4": "process_input",
                    "1": "handle_device_commands",
                    "5": "process_data",
                    "2": "process_control_signals"
                },
                "bVar1": {
                    "1": "current_command",
                    "3": "byte_value",
                    "2": "current_byte",
                    "4": "data_byte"
                },
                "report_alarm_message": {
                    "10": "report_alarm_message",
                    "5": "send_alarm_message",
                    "1": "report_alarm"
                },
                "report_feedback_message": {
                    "1": "report_feedback",
                    "5": "send_feedback_message",
                    "10": "report_feedback_message"
                },
                "report_realtime_status": {
                    "1": "report_real_time_status",
                    "5": "send_realtime_status",
                    "9": "report_realtime_status"
                },
                "st_feed_hold": {
                    "6": "set_feed_hold",
                    "1": "stop_feed_hold"
                },
                "st_cycle_reinitialize": {
                    "1": "reinitialize_cycle",
                    "12": "cycle_reinitialize"
                },
                "st_cycle_start": {
                    "1": "st_cycle_start",
                    "2": "start_cycle",
                    "11": "cycle_start"
                },
                "DAT_20000eaa": {
                    "1": "byte_data",
                    "2": "alarm_flag"
                },
                "DAT_20000ea9": {
                    "1": "error_code",
                    "5": "alarm_type"
                },
                "DAT_20000ee4": {
                    "1": "misc_flag",
                    "2": "cycle_status"
                },
                "DAT_20000eb8": {
                    "2": "flag",
                    "1": "cycle_flag"
                },
                "DAT_20000ea8": {
                    "1": "is_cycle_updated",
                    "2": "status_flag"
                },
                "FUN_080041a0": {
                    "1": "initialize_function"
                },
                "FUN_0800585c": {
                    "1": "cleanup_function"
                },
                "FUN_08004148": {
                    "1": "unknown_function_3"
                },
                "FUN_0800587c": {
                    "1": "unknown_function_4"
                },
                "FUN_08004940": {
                    "1": "initialize_variable"
                },
                "FUN_080058a0": {
                    "1": "cleanup_variable"
                },
                "DAT_20000ec0": {
                    "1": "status_flag"
                }
            }
        },
        "FUN_08003b98": {
            "entrypoint": "0x08003b98",
            "current_name": "execute_command_08003b98",
            "code": "\nuint execute_command_08003b98(char *command)\n\n{\n  byte first_char;\n  int result;\n  undefined4 converted_value;\n  uint result;\n  undefined8 truncated_value;\n  undefined4 setting_value;\n  undefined4 float_value;\n  byte index;\n  byte flag;\n  \n  if (*command != '$') {\n    result = execute_line(command);\n    return result;\n  }\n  index = 1;\n  flag = '\\0';\n  first_char = command[1];\n  if (first_char == 0) {\n    report_grbl_help();\n    return 0;\n  }\n  if ((0x58 < first_char) || (first_char < 0x23)) goto default_case;\n  switch(first_char) {\n  case 0x23:\n    index = 2;\n    if (command[2] != '\\0') {\n      return 3;\n    }\n    report_gcode_parameters();\n    break;\n  case 0x24:\n    index = 2;\n    if (command[2] != '\\0') {\n      return 3;\n    }\n    report_grbl_settings();\n    break;\n  case 0x43:\n    index = 2;\n    if (command[2] != '\\0') {\n      return 3;\n    }\n    if (DAT_20000ea9 == '\\a') {\n      reset_machine();\n      report_feedback_message(5);\n    }\n    else {\n      if (DAT_20000ea9 != '\\0') {\n        return 0xb;\n      }\n      DAT_20000ea9 = '\\a';\n      report_feedback_message(4);\n    }\n    break;\n  case 0x47:\n    index = 2;\n    if (command[2] != '\\0') {\n      return 3;\n    }\n    report_gcode_modes();\n    break;\n  case 0x48:\n    if ((DAT_20000ee4 & 0x10) == 0) {\n      return 7;\n    }\n    if ((DAT_20000ea9 != '\\0') && (DAT_20000ea9 != '\\x06')) {\n      return 0xb;\n    }\n    go_home();\n    if (DAT_20000ea8 == '\\0') {\n      execute_startup_protocol();\n    }\n    break;\n  case 0x4e:\n    index = 2;\n    if (command[2] == '\\0') {\n      for (flag = 0; flag < 2; flag = flag + 1) {\n        result = read_startup_line_settings(flag,command);\n        if (result == 0) {\n          report_status_message(10);\n        }\n        else {\n          report_startup_line(flag,command);\n        }\n      }\n      return 0;\n    }\n    flag = '\\x01';\n  default:\ndefault_case:\n    result = read_float(command,&index,&float_value);\n    if (result == 0) {\n      return 1;\n    }\n    first_char = index + 1;\n    if (command[index] != '=') {\n      return 3;\n    }\n    index = first_char;\n    if (flag == '\\0') {\n      result = read_float(command,&index,&setting_value);\n      if (result == 0) {\n        return 1;\n      }\n      if (command[index] == '\\0') {\n        converted_value = float_to_int(float_value);\n        result = store_global_setting(converted_value,setting_value);\n        return result;\n      }\n      return 3;\n    }\n    do {\n      command[(uint)index - (uint)first_char] = command[index];\n      result = (uint)index;\n      index = index + 1;\n    } while (command[result] != '\\0');\n    flag = first_char;\n    flag = execute_line(command);\n    if (flag != 0) {\n      return (uint)flag;\n    }\n    truncated_value = float_to_double(float_value);\n    truncated_value = truncate_double((int)truncated_value,(int)((ulonglong)truncated_value >> 0x20));\n    flag = double_to_unsigned_integer((int)truncated_value,(int)((ulonglong)truncated_value >> 0x20));\n    store_startup_line(flag,command);\n    break;\n  case 0x58:\n    index = 2;\n    if (command[2] != '\\0') {\n      return 3;\n    }\n    if (DAT_20000ea9 == '\\x06') {\n      report_feedback_message(3);\n      DAT_20000ea9 = '\\0';\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08003b98": "execute_command_08003b98",
                "param_1": "command",
                "bVar1": "first_char",
                "iVar2": "result",
                "uVar3": "converted_value",
                "uVar4": "result",
                "uVar5": "truncated_value",
                "local_14": "setting_value",
                "local_10": "float_value",
                "local_a": "index",
                "local_9": "flag",
                "gc_execute_line": "execute_line",
                "mc_reset": "reset_machine",
                "mc_go_home": "go_home",
                "protocol_execute_startup": "execute_startup_protocol",
                "settings_read_startup_line": "read_startup_line_settings",
                "settings_store_global_setting": "store_global_setting",
                "settings_store_startup_line": "store_startup_line",
                "__aeabi_f2iz": "float_to_int",
                "__aeabi_f2d": "float_to_double",
                "__aeabi_d2uiz": "double_to_unsigned_integer",
                "trunc": "truncate_double",
                "switchD_08003bdc_caseD_25": "default_case"
            },
            "calling": [
                "FUN_08003f34"
            ],
            "called": [
                "FUN_080041a0",
                "FUN_08004250",
                "FUN_08004030",
                "FUN_080025e8",
                "FUN_08009798",
                "FUN_080005b4",
                "FUN_08009278",
                "FUN_08008bf0",
                "FUN_08002638",
                "FUN_08004bc0",
                "FUN_08004d2c",
                "FUN_08004900",
                "FUN_0800423c",
                "FUN_080039bc",
                "FUN_080024c4",
                "FUN_080046d0",
                "FUN_080044e8",
                "FUN_08004e30",
                "FUN_08008590"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08003b98": {
                    "1": "process_gcode_command",
                    "2": "process_g_code_command",
                    "11": "execute_command",
                    "4": "execute_gcode_command",
                    "3": "execute_g_code_command",
                    "7": "process_command"
                },
                "param_1": {
                    "1": "gcode_string",
                    "27": "command",
                    "2": "gcode_command"
                },
                "bVar1": {
                    "1": "first_character",
                    "2": "byte_val",
                    "11": "first_char",
                    "6": "command_char"
                },
                "iVar2": {
                    "1": "error",
                    "7": "return_value"
                },
                "uVar3": {
                    "5": "converted_value",
                    "1": "parameter_value",
                    "2": "converted_float",
                    "3": "converted_value1"
                },
                "uVar4": {
                    "10": "return_value",
                    "1": "return_val",
                    "2": "error_code",
                    "3": "return_code",
                    "11": "result"
                },
                "uVar5": {
                    "1": "converted_value_double",
                    "2": "truncated_float",
                    "7": "truncated_value"
                },
                "local_14": {
                    "2": "second_value",
                    "1": "first_param",
                    "8": "setting_value",
                    "4": "value1",
                    "3": "second_float"
                },
                "local_10": {
                    "1": "arg2",
                    "6": "float_value",
                    "2": "global_setting",
                    "4": "value2"
                },
                "local_a": {
                    "1": "current_index",
                    "5": "index1",
                    "2": "position",
                    "14": "index"
                },
                "local_9": {
                    "13": "flag",
                    "1": "index_b",
                    "5": "index2",
                    "2": "is_startup_line"
                },
                "gc_execute_line": {
                    "1": "execute_line_again",
                    "4": "execute_g_code_line",
                    "3": "execute_gc_line"
                },
                "report_grbl_help": {
                    "3": "report_help",
                    "13": "report_grbl_help"
                },
                "report_gcode_parameters": {
                    "13": "report_gcode_parameters",
                    "3": "report_g_code_parameters"
                },
                "report_grbl_settings": {
                    "16": "report_grbl_settings"
                },
                "mc_reset": {
                    "1": "reset_microcontroller",
                    "8": "reset_machine",
                    "3": "reset_motion_controller",
                    "2": "reset_mc"
                },
                "report_feedback_message": {
                    "16": "report_feedback_message"
                },
                "mc_go_home": {
                    "1": "go_home_position",
                    "2": "go_home_mc",
                    "7": "go_home"
                },
                "protocol_execute_startup": {
                    "1": "execute_startup",
                    "15": "execute_startup_protocol"
                },
                "settings_read_startup_line": {
                    "1": "read_startup_script_line",
                    "3": "read_startup_line_setting",
                    "6": "read_startup_line_settings",
                    "4": "read_startup_line"
                },
                "report_status_message": {
                    "15": "report_status_message"
                },
                "settings_store_global_setting": {
                    "16": "store_global_setting"
                },
                "settings_store_startup_line": {
                    "7": "store_startup_line",
                    "4": "store_startup_line_settings",
                    "2": "store_startup_script_line",
                    "3": "store_startup_line_setting"
                },
                "report_startup_line": {
                    "7": "report_startup_line"
                },
                "read_float": {
                    "14": "read_float",
                    "1": "read_float_value"
                },
                "__aeabi_f2iz": {
                    "3": "convert_float_to_int",
                    "4": "float_to_int",
                    "1": "float_to_integer_conversion",
                    "2": "convert_float_to_integer"
                },
                "__aeabi_f2d": {
                    "2": "float_to_double_conversion",
                    "8": "float_to_double",
                    "4": "convert_float_to_double"
                },
                "__aeabi_d2uiz": {
                    "2": "double_to_unsigned_integer_conversion",
                    "1": "double_to_uint",
                    "3": "convert_double_to_unsigned_int"
                },
                "FUN_080041a0": {
                    "1": "report_grbl_help",
                    "2": "initialize_function"
                },
                "FUN_08004250": {
                    "2": "function_b",
                    "1": "other_function"
                },
                "FUN_08004030": {
                    "2": "function_c",
                    "1": "report_g_code_settings"
                },
                "FUN_080025e8": {
                    "1": "function4",
                    "2": "function_d"
                },
                "FUN_08009798": {
                    "1": "unknown_function2",
                    "2": "function_e"
                },
                "FUN_080005b4": {
                    "1": "func6",
                    "2": "function_f"
                },
                "FUN_08009278": {
                    "1": "unknown_function4",
                    "2": "function_g"
                },
                "FUN_08008bf0": {
                    "1": "more_functions",
                    "2": "function_h"
                },
                "FUN_08002638": {
                    "1": "read_float",
                    "2": "function_i"
                },
                "FUN_08004bc0": {
                    "1": "unknown_function7",
                    "2": "function_j"
                },
                "FUN_08004d2c": {
                    "1": "report_startup_line",
                    "2": "function_k"
                },
                "FUN_08004900": {
                    "1": "unknown_function9",
                    "2": "function_l"
                },
                "FUN_0800423c": {
                    "1": "report_grbl_settings",
                    "2": "function_m"
                },
                "FUN_080039bc": {
                    "1": "unknown_function11",
                    "2": "function_n"
                },
                "FUN_080024c4": {
                    "2": "function_o",
                    "1": "mc_go_home"
                },
                "FUN_080046d0": {
                    "2": "function_p",
                    "1": "report_feedback_message"
                },
                "FUN_080044e8": {
                    "2": "function_q",
                    "1": "func17"
                },
                "FUN_08004e30": {
                    "1": "unknown_function15",
                    "2": "function_r"
                },
                "FUN_08008590": {
                    "2": "function_s",
                    "1": "unknown_function16"
                },
                "report_gcode_modes": {
                    "9": "report_gcode_modes",
                    "3": "report_g_code_modes"
                },
                "trunc": {
                    "1": "trunc_function",
                    "2": "truncate_double"
                },
                "DAT_20000ea9": {
                    "1": "data_variable1"
                },
                "DAT_20000ea8": {
                    "1": "global_variable_b"
                },
                "FUM_080041a0": {
                    "1": "function1"
                },
                "FUM_08004250": {
                    "1": "function2"
                },
                "FUM_08004030": {
                    "1": "function3"
                },
                "FUM_080025e8": {
                    "1": "function4"
                },
                "FUM_08009798": {
                    "1": "function5"
                },
                "FUM_080005b4": {
                    "1": "function6"
                },
                "FUM_08009278": {
                    "1": "function7"
                },
                "FUM_08008bf0": {
                    "1": "function8"
                },
                "FUM_08002638": {
                    "1": "function9"
                },
                "FUM_08004bc0": {
                    "1": "function10"
                },
                "FUM_08004d2c": {
                    "1": "function11"
                },
                "FUM_08004900": {
                    "1": "function12"
                },
                "FUM_0800423c": {
                    "1": "function13"
                },
                "FUM_080039bc": {
                    "1": "function14"
                },
                "FUM_080024c4": {
                    "1": "function15"
                },
                "FUM_080046d0": {
                    "1": "function16"
                },
                "FUM_080044e8": {
                    "1": "function17"
                },
                "FUM_08004e30": {
                    "1": "function18"
                },
                "FUM_08008590": {
                    "1": "function19"
                },
                "case 0x58": {
                    "1": "case_x"
                },
                "G": {
                    "1": "is_startup_line"
                },
                "switchD_08003bdc_caseD_25": {
                    "1": "default_case"
                }
            }
        },
        "FUN_08003f34": {
            "entrypoint": "0x08003f34",
            "current_name": "process_serial_input_08003f34",
            "code": "\nvoid process_serial_input_08003f34(void)\n\n{\n  byte input_byte;\n  undefined4 status;\n  uint index;\n  \n  while( true ) {\n    while( true ) {\n      input_byte = read_byte();\n      if (input_byte == 0xff) {\n        return;\n      }\n      if ((input_byte == 10) || (input_byte == 0xd)) break;\n      if (DAT_20000e11 == '\\0') {\n        if ((0x20 < input_byte) && (input_byte != 0x2f)) {\n          if (input_byte == 0x28) {\n            DAT_20000e11 = '\\x01';\n          }\n          else if (DAT_20000e10 == 0xff) {\n            print_message(0xd);\n            reset_line_buffer();\n          }\n          else if ((input_byte < 0x61) || (0x7a < input_byte)) {\n            index = (uint)DAT_20000e10;\n            DAT_20000e10 = DAT_20000e10 + 1;\n            (&DAT_20000d10)[index] = input_byte;\n          }\n          else {\n            index = (uint)DAT_20000e10;\n            DAT_20000e10 = DAT_20000e10 + 1;\n            (&DAT_20000d10)[index] = input_byte - 0x20;\n          }\n        }\n      }\n      else if (input_byte == 0x29) {\n        DAT_20000e11 = '\\0';\n      }\n    }\n    execute_runtime();\n    if (DAT_20000ea8 != '\\0') break;\n    if (DAT_20000e10 == 0) {\n      print_message(0);\n    }\n    else {\n      (&DAT_20000d10)[DAT_20000e10] = 0;\n      status = execute_line(&DAT_20000d10);\n      print_message(status);\n    }\n    reset_line_buffer();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003f34": "process_serial_input_08003f34",
                "bVar1": "input_byte",
                "uVar2": "status",
                "uVar3": "index",
                "serial_read": "read_byte",
                "report_status_message": "print_message",
                "protocol_reset_line_buffer": "reset_line_buffer",
                "protocol_execute_runtime": "execute_runtime",
                "protocol_execute_line": "execute_line"
            },
            "calling": [
                "FUN_08001ddc"
            ],
            "called": [
                "FUN_08003a74",
                "FUN_08004030",
                "FUN_08003980",
                "FUN_08008286",
                "FUN_08003b98"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08003f34": {
                    "5": "read_and_process_input",
                    "9": "process_input",
                    "1": "parse_serial_input",
                    "11": "process_serial_input",
                    "3": "process_serial_data"
                },
                "FUN_08003a74": {
                    "1": "perform_initialization",
                    "5": "initialize",
                    "3": "protocol_execute_runtime",
                    "2": "execute_runtime"
                },
                "FUN_08004030": {
                    "2": "protocol_reset_line_buffer",
                    "7": "handle_special_character",
                    "1": "handle_special_char",
                    "4": "process_character"
                },
                "FUN_08003980": {
                    "6": "report_status_message",
                    "2": "reset_buffer",
                    "1": "execute_runtime",
                    "3": "reset_line_buffer"
                },
                "FUN_08008286": {
                    "1": "execute_line",
                    "4": "protocol_execute_line",
                    "2": "protocol_execute_runtime",
                    "6": "execute_runtime"
                },
                "FUN_08003b98": {
                    "1": "parse_string",
                    "4": "protocol_execute_line",
                    "9": "execute_line"
                },
                "bVar1": {
                    "3": "byte_read",
                    "17": "input_byte",
                    "1": "byte_value"
                },
                "uVar2": {
                    "1": "result",
                    "11": "status",
                    "7": "status_code",
                    "2": "execution_result"
                },
                "uVar3": {
                    "1": "array_index",
                    "22": "index"
                },
                "serial_read": {
                    "2": "read_serial_byte",
                    "1": "read_input_byte",
                    "3": "read_byte"
                },
                "DAT_20000e11": {
                    "1": "is_inside_parentheses",
                    "5": "inside_parentheses"
                },
                "DAT_20000e10": {
                    "1": "byte_index",
                    "2": "data_index",
                    "5": "buffer_index"
                },
                "report_status_message": {
                    "1": "report_message",
                    "2": "display_message",
                    "3": "print_message"
                },
                "protocol_reset_line_buffer": {
                    "1": "clear_line_buffer",
                    "11": "reset_line_buffer"
                },
                "DAT_20000d10": {
                    "2": "input_buffer",
                    "1": "line_buffer"
                },
                "protocol_execute_runtime": {
                    "11": "execute_runtime",
                    "2": "execute_runtime_protocol"
                },
                "DAT_20000ea8": {
                    "1": "end_of_execution",
                    "2": "runtime_finished",
                    "3": "runtime_flag"
                },
                "protocol_execute_line": {
                    "2": "execute_line_protocol",
                    "10": "execute_line"
                },
                "param_1": {
                    "1": "character"
                },
                "&DAT_20000d10": {
                    "1": "buffer_data"
                }
            }
        },
        "FUN_08004030": {
            "entrypoint": "0x08004030",
            "current_name": "print_error_message_08004030",
            "code": "\nvoid print_error_message_08004030(error_code error_code)\n\n{\n  if (error_code == '\\0') {\n    print_program_string(&DAT_0800b5c8);\n  }\n  else {\n    print_program_string(\"error: \");\n    switch(error_code) {\n    case '\\x01':\n      print_program_string(\"Bad number format\");\n      break;\n    case '\\x02':\n      print_program_string(\"Expected command letter\");\n      break;\n    case '\\x03':\n      print_program_string(\"Unsupported statement\");\n      break;\n    case '\\x04':\n      print_program_string(\"Invalid radius\");\n      break;\n    case '\\x05':\n      print_program_string(\"Modal group violation\");\n      break;\n    case '\\x06':\n      print_program_string(\"Invalid statement\");\n      break;\n    case '\\a':\n      print_program_string(\"Setting disabled\");\n      break;\n    case '\\b':\n      print_program_string(\"Value < 0.0\");\n      break;\n    case '\\t':\n      print_program_string(\"Value < 3 usec\");\n      break;\n    case '\\n':\n      print_program_string(\"EEPROM read fail. Using defaults\");\n      break;\n    case '\\v':\n      print_program_string(\"Busy or queued\");\n      break;\n    case '\\f':\n      print_program_string(\"Alarm lock\");\n      break;\n    case '\\r':\n      print_program_string(\"Line overflow\");\n    }\n    print_program_string(&DAT_0800b6d8);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004030": "print_error_message_08004030",
                "param_1": "error_code",
                "printPgmString": "print_program_string",
                "char": "error_code"
            },
            "calling": [
                "FUN_080004ac",
                "FUN_080051b4",
                "FUN_080039bc",
                "FUN_080044e8",
                "FUN_08003b98",
                "FUN_08003f34"
            ],
            "called": [
                "FUN_080036c6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08004030": {
                    "28": "print_error_message",
                    "1": "print_error"
                },
                "param_1": {
                    "1": "error_type",
                    "29": "error_code"
                },
                "printPgmString": {
                    "1": "print_error_message",
                    "13": "print_program_string"
                },
                "FUN_080036c6": {
                    "2": "print_pgm_string"
                },
                "'\\x01'": {
                    "1": "invalid_number_format"
                },
                "'\\x02'": {
                    "1": "command_letter_error"
                },
                "'\\x03'": {
                    "2": "unsupported_statement"
                },
                "'\\x04'": {
                    "2": "invalid_radius"
                },
                "'\\x05'": {
                    "2": "modal_group_violation"
                },
                "'\\x06'": {
                    "2": "invalid_statement"
                },
                "'\\a'": {
                    "2": "setting_disabled"
                },
                "'\\b'": {
                    "2": "value_less_than_zero"
                },
                "'\\t'": {
                    "2": "value_less_than_three_microseconds"
                },
                "'\\n'": {
                    "2": "eeprom_read_fail"
                },
                "'\\v'": {
                    "2": "busy_or_queued"
                },
                "'\\f'": {
                    "2": "alarm_lock"
                },
                "'\\r'": {
                    "2": "line_overflow"
                },
                "DAT_0800b5c8": {
                    "1": "error_message_1",
                    "2": "null_error_message"
                },
                "DAT_0800b6d8": {
                    "1": "line_break_error_message",
                    "2": "error_message2"
                },
                "char": {
                    "1": "error_code"
                }
            }
        },
        "FUN_08004148": {
            "entrypoint": "0x08004148",
            "current_name": "display_alarm_message_08004148",
            "code": "\nvoid display_alarm_message_08004148(char error_code)\n\n{\n  print_program_string(\"ALARM: \");\n  if (error_code == -2) {\n    print_program_string(\"Abort during cycle\");\n  }\n  else if (error_code == -1) {\n    print_program_string(\"Hard limit\");\n  }\n  print_program_string(\". MPos?\\r\\n\");\n  delay_milliseconds(500);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004148": "display_alarm_message_08004148",
                "param_1": "error_code",
                "printPgmString": "print_program_string",
                "delay_ms": "delay_milliseconds",
                "delay_ms(500)": "delay_milliseconds(500)"
            },
            "calling": [
                "FUN_08003a74"
            ],
            "called": [
                "FUN_080036c6",
                "FUN_08002814"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08004148": {
                    "1": "print_error_message",
                    "15": "print_alarm_message"
                },
                "param_1": {
                    "1": "alarm_type",
                    "25": "error_code",
                    "3": "error_message"
                },
                "printPgmString": {
                    "9": "print_program_string",
                    "1": "print_message_from_program_memory"
                },
                "FUN_080036c6": {
                    "1": "parse_error_message",
                    "2": "display_error_message"
                },
                "FUNC_08002814": {
                    "1": "perform_system_check",
                    "6": "delay_ms"
                },
                "delay_ms": {
                    "3": "delay_milliseconds"
                },
                "-2": {
                    "1": "abort_cycle_error"
                },
                "-1": {
                    "1": "hard_limit_error"
                },
                "delay_ms(500)": {
                    "1": "delay_milliseconds(500)"
                },
                "param_1 (FUN_080036c6)": {
                    "1": "error_message"
                }
            }
        },
        "FUN_080041a0": {
            "entrypoint": "0x080041a0",
            "current_name": "print_status_message_080041a0",
            "code": "\nvoid print_status_message_080041a0(undefined status)\n\n{\n  print_program_string(&DAT_0800b710);\n  switch(status) {\n  case 1:\n    print_program_string(\"Reset to continue\");\n    break;\n  case 2:\n    print_program_string(\"\\'$H\\'|\\'$X\\' to unlock\");\n    break;\n  case 3:\n    print_program_string(\"Caution: Unlocked\");\n    break;\n  case 4:\n    print_program_string(\"Enabled\");\n    break;\n  case 5:\n    print_program_string(\"Disabled\");\n  }\n  print_program_string(&DAT_0800b764);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080041a0": "print_status_message_080041a0",
                "param_1": "status",
                "printPgmString": "print_program_string"
            },
            "calling": [
                "FUN_08003a74",
                "FUN_08001ddc",
                "FUN_08003b98"
            ],
            "called": [
                "FUN_080036c6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080041a0": {
                    "1": "print_message",
                    "2": "print_status",
                    "15": "print_status_message",
                    "4": "display_status_message",
                    "7": "display_message"
                },
                "param_1": {
                    "1": "menu_option",
                    "7": "message_type",
                    "16": "status",
                    "4": "status_code"
                },
                "printPgmString": {
                    "19": "print_program_string",
                    "2": "print_message"
                },
                "DAT_0800b710": {
                    "1": "reset_message"
                },
                "DAT_0800b764": {
                    "1": "footer_message"
                },
                "&DAT_0800b710": {
                    "1": "menu_title",
                    "3": "status_message1"
                },
                "1": {
                    "1": "reset"
                },
                "2": {
                    "1": "unlock"
                },
                "3": {
                    "1": "caution"
                },
                "4": {
                    "1": "enabled"
                },
                "5": {
                    "1": "disabled"
                },
                "&DAT_0800b764": {
                    "1": "menu_footer",
                    "3": "status_message2"
                }
            }
        },
        "FUN_08004228": {
            "entrypoint": "0x08004228",
            "current_name": "print_grbl_version_08004228",
            "code": "\nvoid print_grbl_version_08004228(void)\n\n{\n  print_program_string(\"\\r\\nGrbl 0.8c [\\'$\\' for help]\\r\\n\");\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004228": "print_grbl_version_08004228",
                "printPgmString": "print_program_string"
            },
            "calling": [
                "FUN_080039a0"
            ],
            "called": [
                "FUN_080036c6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08004228": {
                    "6": "initialize_grbl",
                    "1": "display_grbl_version",
                    "24": "print_grbl_version"
                },
                "printPgmString": {
                    "1": "print_grbl_version"
                },
                "param_1": {
                    "3": "input_string",
                    "4": "string",
                    "1": "string_to_print",
                    "11": "message"
                },
                "FUN_080036c6": {
                    "2": "process_input_string",
                    "19": "print_pgm_string",
                    "1": "process_command",
                    "4": "print_message"
                }
            }
        },
        "FUN_0800423c": {
            "entrypoint": "0x0800423c",
            "current_name": "print_menu_0800423c",
            "code": "\nvoid print_menu_0800423c(void)\n\n{\n  print_program_string(\n                \"$$ (view Grbl settings)\\r\\n$# (view # parameters)\\r\\n$G (view parser state)\\r\\n$N (view startup blocks)\\r\\n$x=value (save Grbl setting)\\r\\n$Nx=line (save startup block)\\r\\n$C (check gcode mode)\\r\\n$X (kill alarm lock)\\r\\n$H (run homing cycle)\\r\\n~ (cycle start)\\r\\n! (feed hold)\\r\\n? (current status)\\r\\nctrl-x (reset Grbl)\\r\\n\"\n                );\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800423c": "print_menu_0800423c",
                "printPgmString": "print_program_string"
            },
            "calling": [
                "FUN_08003b98"
            ],
            "called": [
                "FUN_080036c6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800423c": {
                    "3": "display_grbl_commands",
                    "5": "print_grbl_menu",
                    "2": "print_grbl_commands",
                    "1": "print_grbl_settings",
                    "9": "print_menu"
                },
                "FUN_080036c6": {
                    "1": "process_input_string",
                    "24": "print_pgm_string",
                    "2": "print_message"
                },
                "param_1": {
                    "1": "string_value",
                    "2": "message",
                    "3": "string_to_print"
                },
                "printPgmString": {
                    "3": "print_program_string"
                }
            }
        },
        "FUN_08004250": {
            "entrypoint": "0x08004250",
            "current_name": "print_configuration_08004250",
            "code": "\nvoid print_configuration_08004250(void)\n\n{\n  undefined4 acceleration;\n  \n  print_program_string(&DAT_0800b8b8);\n  print_floating_point(DAT_20000ebc);\n  print_program_string(\" (x, step/mm)\\r\\n$1=\");\n  print_floating_point(DAT_20000ec0);\n  print_program_string(\" (y, step/mm)\\r\\n$2=\");\n  print_floating_point(DAT_20000ec4);\n  print_program_string(\" (z, step/mm)\\r\\n$3=\");\n  print_integer(DAT_20000ec9);\n  print_program_string(\" (step pulse, usec)\\r\\n$4=\");\n  print_floating_point(DAT_20000ecc);\n  print_program_string(\" (default feed, mm/min)\\r\\n$5=\");\n  print_floating_point(DAT_20000ed0);\n  print_program_string(\" (default seek, mm/min)\\r\\n$6=\");\n  print_integer(DAT_20000ed4);\n  print_program_string(\" (step port invert mask, int:\");\n  print_base2_u_int16_value(DAT_20000ed4);\n  print_program_string(\")\\r\\n$7=\");\n  print_integer(DAT_20000ef8);\n  print_program_string(\" (step idle delay, msec)\\r\\n$8=\");\n  acceleration = divide_floats(DAT_20000edc,0x45610000);\n  print_floating_point(acceleration);\n  print_program_string(\" (acceleration, mm/sec^2)\\r\\n$9=\");\n  print_floating_point(DAT_20000ee0);\n  print_program_string(\" (junction deviation, mm)\\r\\n$10=\");\n  print_floating_point(DAT_20000ed8);\n  print_program_string(\" (arc, mm/segment)\\r\\n$11=\");\n  print_integer(DAT_20000efa);\n  print_program_string(\" (n-arc correction, int)\\r\\n$12=\");\n  print_integer(DAT_20000ef9);\n  print_program_string(\" (n-decimals, int)\\r\\n$13=\");\n  print_integer((DAT_20000ee4 & 1) != 0);\n  print_program_string(\" (report inches, bool)\\r\\n$14=\");\n  print_integer((DAT_20000ee4 & 2) != 0);\n  print_program_string(\" (auto start, bool)\\r\\n$15=\");\n  print_integer((DAT_20000ee4 & 4) != 0);\n  print_program_string(\" (invert step enable, bool)\\r\\n$16=\");\n  print_integer((DAT_20000ee4 & 8) != 0);\n  print_program_string(\" (hard limits, bool)\\r\\n$17=\");\n  print_integer((DAT_20000ee4 & 0x10) != 0);\n  print_program_string(\" (homing cycle, bool)\\r\\n$18=\");\n  print_integer(DAT_20000ee6);\n  print_program_string(\" (homing dir invert mask, int:\");\n  print_base2_u_int16_value(DAT_20000ee6);\n  print_program_string(\")\\r\\n$19=\");\n  print_floating_point(DAT_20000ee8);\n  print_program_string(\" (homing feed, mm/min)\\r\\n$20=\");\n  print_floating_point(DAT_20000eec);\n  print_program_string(\" (homing seek, mm/min)\\r\\n$21=\");\n  print_integer(DAT_20000ef0);\n  print_program_string(\" (homing debounce, msec)\\r\\n$22=\");\n  print_floating_point(DAT_20000ef4);\n  print_program_string(\" (homing pull-off, mm)\\r\\n$23=\");\n  print_integer(DAT_20000ed6);\n  print_program_string(\" (dir port invert mask, int:\");\n  print_base2_u_int16_value(DAT_20000ed6);\n  print_program_string(&DAT_0800bb94);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004250": "print_configuration_08004250",
                "printPgmString": "print_program_string",
                "printFloat": "print_floating_point",
                "printInteger": "print_integer",
                "print_uint16_base2": "print_base2_u_int16_value",
                "__aeabi_fdiv": "divide_floats",
                "uVar1": "acceleration"
            },
            "calling": [
                "FUN_080051b4",
                "FUN_08003b98"
            ],
            "called": [
                "FUN_08003826",
                "FUN_080037fc",
                "FUN_08009054",
                "FUN_080036c6",
                "FUN_0800375c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08004250": {
                    "1": "print_configuration_details",
                    "17": "print_configuration",
                    "4": "print_configuration_settings",
                    "6": "print_settings"
                },
                "printPgmString": {
                    "21": "print_program_string"
                },
                "printFloat": {
                    "1": "print_float",
                    "4": "print_float_value",
                    "2": "print_floating_point_value",
                    "14": "print_floating_point"
                },
                "printInteger": {
                    "7": "print_integer_value",
                    "14": "print_integer"
                },
                "print_uint16_base2": {
                    "1": "print_unsigned_int16_as_base2",
                    "2": "print_unsigned_int16_binary"
                },
                "__aeabi_fdiv": {
                    "2": "divide_float",
                    "1": "divide_floating_point_numbers",
                    "7": "divide_floats"
                },
                "DAT_20000ebc": {
                    "4": "x_step_per_mm",
                    "2": "x_step_per_millimeter",
                    "1": "x_step_value"
                },
                "DAT_20000ec0": {
                    "2": "y_step_per_millimeter",
                    "1": "y_step_value",
                    "4": "y_step_per_mm"
                },
                "DAT_20000ec4": {
                    "4": "z_step_per_mm",
                    "2": "z_step_per_millimeter",
                    "1": "z_step_value"
                },
                "DAT_20000ec9": {
                    "2": "step_pulse_microseconds",
                    "3": "step_pulse_usec",
                    "1": "step_pulse"
                },
                "DAT_20000ecc": {
                    "2": "default_feed",
                    "1": "default_feed_mm_min"
                },
                "DAT_20000ed0": {
                    "1": "default_seek_mm_min",
                    "2": "float5"
                },
                "DAT_20000ed4": {
                    "1": "step_port_invert_mask_int",
                    "6": "step_port_invert_mask",
                    "2": "integer2"
                },
                "DAT_20000ef8": {
                    "2": "step_idle_delay_milliseconds",
                    "1": "integer3"
                },
                "DAT_20000edc": {
                    "2": "float6",
                    "6": "acceleration",
                    "1": "acceleration_value"
                },
                "DAT_20000ee0": {
                    "2": "float7",
                    "5": "junction_deviation"
                },
                "DAT_20000ed8": {
                    "2": "float8",
                    "1": "arc_mm_per_segment"
                },
                "DAT_20000efa": {
                    "1": "integer4",
                    "6": "n_arc_correction"
                },
                "DAT_20000ef9": {
                    "6": "n_decimals",
                    "1": "n_decimals_int"
                },
                "DAT_20000ee4": {
                    "2": "report_inches_bool",
                    "1": "settings_flag"
                },
                "DAT_20000ee6": {
                    "6": "homing_dir_invert_mask",
                    "1": "integer7"
                },
                "DAT_20000ee8": {
                    "1": "homing_feed_value",
                    "2": "homing_feed"
                },
                "DAT_20000eec": {
                    "2": "homing_seek",
                    "1": "homing_seek_mm_per_min"
                },
                "DAT_20000ef0": {
                    "2": "homing_debounce_msec",
                    "1": "integer7",
                    "3": "homing_debounce"
                },
                "DAT_20000ef4": {
                    "2": "float11",
                    "5": "homing_pull_off"
                },
                "DAT_20000ed6": {
                    "1": "integer8",
                    "6": "dir_port_invert_mask"
                },
                "DAT_0800b8b8": {
                    "3": "program_string1",
                    "1": "x_label"
                },
                "DAT_0800bb94": {
                    "1": "homing_dir_invert_mask_msg_end",
                    "4": "program_string2"
                },
                "uVar1": {
                    "1": "acceleration_mm_per_sec2",
                    "5": "acceleration",
                    "2": "result"
                },
                "&DAT_0800b8b8": {
                    "1": "program_string_1"
                },
                "&DAT_0800bb94": {
                    "1": "program_string_2"
                },
                "FUN_08003826": {
                    "1": "print_pgm_string_uint",
                    "9": "print_pgm_string"
                },
                "FUN_080037fc": {
                    "9": "print_float",
                    "1": "print_pgm_string_int"
                },
                "FUN_08009054": {
                    "1": "calculate_value",
                    "5": "print_integer",
                    "3": "print_uint16_base2",
                    "2": "calculate_acceleration"
                },
                "FUN_080036c6": {
                    "1": "print_string_value",
                    "3": "print_integer",
                    "6": "print_uint16_base2"
                },
                "FUN_0800375c": {
                    "2": "print_integer",
                    "7": "print_uint16_base2",
                    "1": "print_uint16_base10"
                },
                "print_uint16_binary": {
                    "1": "print_unsigned_int16_binary"
                },
                "print_uint16_binary_anyWidth": {
                    "1": "print_unsigned_int16_binary"
                },
                "print_uint16_base2_anyWidth": {
                    "1": "print_unsigned_int16_binary"
                },
                "printConfigData": {
                    "1": "print_configuration_data"
                },
                "printConfiguration": {
                    "1": "print_configuration"
                },
                "printProgramString": {
                    "1": "print_program_string"
                },
                "printFloatingPoint": {
                    "1": "print_floating_point"
                },
                "divideFloat": {
                    "1": "divide_float"
                },
                "printUnsignedInt16Base2": {
                    "1": "print_unsigned_int16_base2"
                },
                "param_1": {
                    "1": "value1"
                },
                "param_2": {
                    "1": "ignore_param2"
                },
                "param_3": {
                    "1": "ignore_param3"
                },
                "param_4": {
                    "1": "value4"
                },
                "void FUN_08003826": {
                    "1": "print_unsigned_integer"
                },
                "void FUN_080037fc": {
                    "1": "print_signed_integer"
                },
                "uint FUN_08009054": {
                    "1": "calculate_value"
                },
                "void FUN_080036c6": {
                    "1": "print_string"
                },
                "void FUN_0800375c": {
                    "1": "print_unsigned_short"
                },
                "print_uint16_base2(DAT_20000ef9)": {
                    "1": "print_u_int16_binary(dat_20000ef9)"
                },
                "char *param_1": {
                    "1": "string_value"
                },
                "\" (x, step/mm)\\r\\n$1=\"": {
                    "1": "x_step_msg"
                },
                "\" (y, step/mm)\\r\\n$2=\"": {
                    "1": "y_step_msg"
                },
                "\" (z, step/mm)\\r\\n$3=\"": {
                    "1": "z_step_msg"
                },
                "\" (step pulse, usec)\\r\\n$4=\"": {
                    "1": "step_pulse_msg"
                },
                "\" (default feed, mm/min)\\r\\n$5=\"": {
                    "1": "default_feed_msg"
                },
                "\" (default seek, mm/min)\\r\\n$6=\"": {
                    "1": "default_seek_msg"
                },
                "\" (step port invert mask, int:": {
                    "1": "step_port_invert_mask_msg"
                },
                "\"\\r\\n$7=\"": {
                    "1": "step_idle_delay_msg"
                },
                "\" (junction deviation, mm)\\r\\n$10=\"": {
                    "1": "junction_deviation_msg"
                },
                "\" (arc, mm/segment)\\r\\n$11=\"": {
                    "1": "arc_msg"
                },
                "\" (n-arc correction, int)\\r\\n$12=\"": {
                    "1": "n_arc_correction_msg"
                },
                "\" (n-decimals, int)\\r\\n$13=\"": {
                    "1": "n_decimals_msg"
                },
                "\" (report inches, bool)\\r\\n$14=\"": {
                    "1": "report_inches_msg"
                },
                "\" (auto start, bool)\\r\\n$15=\"": {
                    "1": "auto_start_msg"
                },
                "\" (invert step enable, bool)\\r\\n$16=\"": {
                    "1": "invert_step_enable_msg"
                },
                "\" (hard limits, bool)\\r\\n$17=\"": {
                    "1": "hard_limits_msg"
                },
                "\" (homing dir invert mask, int:": {
                    "1": "homing_dir_invert_mask_msg"
                },
                "\" (homing feed, mm/min)\\r\\n$20=\"": {
                    "1": "homing_feed_msg"
                },
                "\" (homing seek, mm/min)\\r\\n$21=\"": {
                    "1": "homing_seek_msg"
                },
                "\" (homing debounce, msec)\\r\\n$22=\"": {
                    "1": "homing_debounce_msg"
                },
                "\" (homing pull-off, mm)\\r\\n$23=\"": {
                    "1": "homing_pull_off_msg"
                }
            }
        },
        "FUN_080044e8": {
            "entrypoint": "0x080044e8",
            "current_name": "print_coordinates_080044e8",
            "code": "\nvoid print_coordinates_080044e8(void)\n\n{\n  int result;\n  undefined4 truncated_float;\n  undefined8 converted_float;\n  undefined4 coord_data [3];\n  byte index;\n  byte coordinate_index;\n  \n  coordinate_index = 0;\n  while( true ) {\n    if (7 < coordinate_index) {\n      print_program_string(\"[G92:\");\n      for (index = 0; index < 3; index = index + 1) {\n        if ((DAT_20000ee4 & 1) == 0) {\n          print_float_value(*(undefined4 *)(&DAT_20000e74 + (index + 10) * 4));\n        }\n        else {\n          converted_float = convert_float_to_double(*(undefined4 *)(&DAT_20000e74 + (index + 10) * 4));\n          converted_float = multiply_double((int)converted_float,(int)((ulonglong)converted_float >> 0x20),0x57e16865,0x3fa42851);\n          truncated_float = truncate_double_to_float((int)converted_float,(int)((ulonglong)converted_float >> 0x20));\n          print_float_value(truncated_float);\n        }\n        if (index < 2) {\n          print_program_string(&DAT_0800bbbc);\n        }\n        else {\n          print_program_string(&DAT_0800b764);\n        }\n      }\n      return;\n    }\n    result = read_coordinate_data(coordinate_index,coord_data);\n    if (result == 0) break;\n    print_program_string(&DAT_0800bb98);\n    switch(coordinate_index) {\n    case 0:\n      print_program_string(&DAT_0800bb9c);\n      break;\n    case 1:\n      print_program_string(&DAT_0800bba0);\n      break;\n    case 2:\n      print_program_string(&DAT_0800bba4);\n      break;\n    case 3:\n      print_program_string(&DAT_0800bba8);\n      break;\n    case 4:\n      print_program_string(&DAT_0800bbac);\n      break;\n    case 5:\n      print_program_string(&DAT_0800bbb0);\n      break;\n    case 6:\n      print_program_string(&DAT_0800bbb4);\n      break;\n    case 7:\n      print_program_string(&DAT_0800bbb8);\n    }\n    for (index = 0; index < 3; index = index + 1) {\n      if ((DAT_20000ee4 & 1) == 0) {\n        print_float_value(coord_data[index]);\n      }\n      else {\n        converted_float = convert_float_to_double(coord_data[index]);\n        converted_float = multiply_double((int)converted_float,(int)((ulonglong)converted_float >> 0x20),0x57e16865,0x3fa42851);\n        truncated_float = truncate_double_to_float((int)converted_float,(int)((ulonglong)converted_float >> 0x20));\n        print_float_value(truncated_float);\n      }\n      if (index < 2) {\n        print_program_string(&DAT_0800bbbc);\n      }\n      else {\n        print_program_string(&DAT_0800b764);\n      }\n    }\n    coordinate_index = coordinate_index + 1;\n  }\n  report_status_message(10);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080044e8": "print_coordinates_080044e8",
                "auStack_18": "coord_data",
                "local_a": "index",
                "local_9": "coordinate_index",
                "iVar1": "result",
                "uVar2": "truncated_float",
                "uVar3": "converted_float",
                "printPgmString": "print_program_string",
                "settings_read_coord_data": "read_coordinate_data",
                "printFloat": "print_float_value",
                "__aeabi_f2d": "convert_float_to_double",
                "__muldf3": "multiply_double",
                "__truncdfsf2": "truncate_double_to_float"
            },
            "calling": [
                "FUN_08003b98"
            ],
            "called": [
                "FUN_08003826",
                "FUN_08004030",
                "FUN_080036c6",
                "FUN_08008640",
                "FUN_08004d7c",
                "FUN_08008590",
                "FUN_08008c30"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080044e8": {
                    "1": "print_g92_coords",
                    "14": "print_g92_coordinates",
                    "15": "print_coordinates"
                },
                "auStack_18": {
                    "2": "coordinate_data_array",
                    "8": "coordinates",
                    "5": "coordinate_data",
                    "10": "coord_data",
                    "1": "coordinate_stack",
                    "3": "coord_data_array"
                },
                "local_a": {
                    "2": "coord_index",
                    "1": "component_index",
                    "8": "axis_index",
                    "12": "index"
                },
                "local_9": {
                    "21": "coordinate_index",
                    "1": "coord_counter",
                    "2": "index",
                    "5": "coord_index"
                },
                "iVar1": {
                    "1": "coord_result",
                    "3": "read_result",
                    "4": "coord_data_status",
                    "5": "coord_data_result",
                    "7": "result"
                },
                "uVar2": {
                    "9": "truncated_value",
                    "1": "float_value1",
                    "2": "truncated_data",
                    "13": "truncated_float"
                },
                "uVar3": {
                    "2": "converted_data",
                    "3": "converted_value",
                    "1": "float_value2",
                    "7": "converted_float",
                    "6": "double_value",
                    "4": "double_float"
                },
                "printPgmString": {
                    "1": "print_string",
                    "12": "print_program_string"
                },
                "settings_read_coord_data": {
                    "8": "read_coordinate_data",
                    "3": "read_coordinate_data_from_settings"
                },
                "printFloat": {
                    "4": "print_float_value",
                    "1": "print_floating_point",
                    "2": "print_floating_point_number"
                },
                "__aeabi_f2d": {
                    "1": "convert_to_double",
                    "2": "convert_float_to_double"
                },
                "__muldf3": {
                    "2": "multiply_double",
                    "1": "multiply_double_float"
                },
                "__truncdfsf2": {
                    "1": "truncate_to_float"
                },
                "report_status_message": {
                    "12": "report_status_message",
                    "1": "print_status_message"
                },
                "DAT_20000ee4": {
                    "2": "flag",
                    "1": "data_flag"
                },
                "DAT_20000e74": {
                    "1": "coord_data"
                },
                "DAT_0800bbbc": {
                    "1": "separator1",
                    "2": "string1"
                },
                "DAT_0800b764": {
                    "1": "delimiter_string2",
                    "2": "string2"
                },
                "DAT_0800bb98": {
                    "1": "invalid_data_string"
                },
                "DAT_0800bb9c": {
                    "1": "string0"
                },
                "DAT_0800bba0": {
                    "1": "y_axis_string"
                },
                "DAT_0800bba4": {
                    "1": "string2"
                },
                "DAT_0800bba8": {
                    "1": "message5"
                },
                "DAT_0800bbac": {
                    "1": "error_msg6"
                },
                "DAT_0800bbb0": {
                    "1": "message7"
                },
                "DAT_0800bbb4": {
                    "1": "message8"
                },
                "DAT_0800bbb8": {
                    "1": "e_axis_string"
                },
                "FUN_08003826": {
                    "1": "settings_read_coord_data"
                },
                "FUN_08004030": {
                    "1": "print_pgm_string"
                },
                "FUN_080036c6": {
                    "1": "print_float"
                },
                "FUN_08008640": {
                    "1": "float_conversion"
                },
                "FUN_08004d7c": {
                    "1": "perform_operation"
                },
                "FUN_08008590": {
                    "1": "float_multiplication"
                },
                "FUN_08008c30": {
                    "1": "float_truncation"
                }
            }
        },
        "FUN_080046d0": {
            "entrypoint": "0x080046d0",
            "current_name": "print_configuration_080046d0",
            "code": "\nvoid print_configuration_080046d0(void)\n\n{\n  undefined4 truncated_float;\n  undefined8 float_value;\n  \n  switch(DAT_20000e71) {\n  case 0:\n    print_program_string(&DAT_0800bbc8);\n    break;\n  case 1:\n    print_program_string(&DAT_0800bbcc);\n    break;\n  case 2:\n    print_program_string(&DAT_0800bbd0);\n    break;\n  case 3:\n    print_program_string(&DAT_0800bbd4);\n    break;\n  case 4:\n    print_program_string(&DAT_0800bbd8);\n  }\n  print_program_string(&DAT_0800bbe0);\n  print_integer(DAT_20000e8c + 0x36);\n  if (DAT_20000e89 == '\\0') {\n    if (DAT_20000e8a == '\\x01') {\n      print_program_string(&DAT_0800bbe4);\n    }\n    else {\n      print_program_string(&DAT_0800bbec);\n    }\n  }\n  else {\n    print_program_string(&DAT_0800bbf4);\n  }\n  if (DAT_20000e73 == '\\0') {\n    print_program_string(&DAT_0800bc04);\n  }\n  else {\n    print_program_string(&DAT_0800bbfc);\n  }\n  if (DAT_20000e74 == '\\0') {\n    print_program_string(&DAT_0800bc14);\n  }\n  else {\n    print_program_string(&DAT_0800bc0c);\n  }\n  if (DAT_20000e72 == '\\0') {\n    print_program_string(&DAT_0800bc24);\n  }\n  else {\n    print_program_string(&DAT_0800bc1c);\n  }\n  if (DAT_20000e75 == 2) {\n    print_program_string(&DAT_0800bc34);\n  }\n  else if (DAT_20000e75 < 3) {\n    if (DAT_20000e75 == 0) {\n      print_program_string(&DAT_0800bc2c);\n    }\n    else if (DAT_20000e75 == 1) {\n      print_program_string(&DAT_0800bc30);\n    }\n  }\n  if (DAT_20000e76 == '\\x01') {\n    print_program_string(&DAT_0800bc38);\n  }\n  else if (DAT_20000e76 < '\\x02') {\n    if (DAT_20000e76 == -1) {\n      print_program_string(&DAT_0800bc3c);\n    }\n    else if (DAT_20000e76 == '\\0') {\n      print_program_string(&DAT_0800bc40);\n    }\n  }\n  if (DAT_20000e77 == 2) {\n    print_program_string(&DAT_0800bc4c);\n  }\n  else if (DAT_20000e77 < 3) {\n    if (DAT_20000e77 == 0) {\n      print_program_string(&DAT_0800bc44);\n    }\n    else if (DAT_20000e77 == 1) {\n      print_program_string(&DAT_0800bc48);\n    }\n  }\n  print_program_string(&DAT_0800bc50);\n  print_integer(DAT_20000e88);\n  print_program_string(&DAT_0800bc54);\n  if (DAT_20000e73 == '\\0') {\n    print_float(DAT_20000e78);\n  }\n  else {\n    float_value = convert_float_to_double(DAT_20000e78);\n    float_value = multiply_double((int)float_value,(int)((ulonglong)float_value >> 0x20),0x57e16865,0x3fa42851);\n    truncated_float = truncate_double((int)float_value,(int)((ulonglong)float_value >> 0x20));\n    print_float(truncated_float);\n  }\n  print_program_string(&DAT_0800b764);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080046d0": "print_configuration_080046d0",
                "printPgmString": "print_program_string",
                "printInteger": "print_integer",
                "printFloat": "print_float",
                "uVar1": "truncated_float",
                "uVar2": "float_value",
                "__aeabi_f2d": "convert_float_to_double",
                "__muldf3": "multiply_double",
                "__truncdfsf2": "truncate_double"
            },
            "calling": [
                "FUN_08003b98"
            ],
            "called": [
                "FUN_08003826",
                "FUN_080037fc",
                "FUN_080036c6",
                "FUN_08008640",
                "FUN_08008590",
                "FUN_08008c30"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080046d0": {
                    "5": "print_configuration",
                    "4": "print_settings",
                    "1": "print_application_settings",
                    "2": "print_info"
                },
                "printPgmString": {
                    "2": "print_string",
                    "20": "print_program_string",
                    "1": "display_program_string"
                },
                "printInteger": {
                    "2": "print_integer_value",
                    "19": "print_integer",
                    "1": "print_int"
                },
                "DAT_20000e71": {
                    "1": "config_option",
                    "2": "selection"
                },
                "DAT_0800bbc8": {
                    "1": "option_string0",
                    "2": "program_string1"
                },
                "DAT_0800bbcc": {
                    "1": "option_string1",
                    "2": "program_string2"
                },
                "DAT_0800bbd0": {
                    "2": "program_string3",
                    "1": "option2"
                },
                "DAT_0800bbd4": {
                    "1": "string4",
                    "2": "program_string4"
                },
                "DAT_0800bbd8": {
                    "1": "option_string4",
                    "2": "program_string5"
                },
                "DAT_0800bbe0": {
                    "1": "string6",
                    "2": "program_string6"
                },
                "DAT_20000e8c": {
                    "1": "device_id",
                    "4": "integer_value"
                },
                "DAT_20000e89": {
                    "1": "is_option_enabled",
                    "7": "flag1"
                },
                "DAT_20000e8a": {
                    "1": "is_option_one",
                    "7": "flag2"
                },
                "DAT_0800bbe4": {
                    "1": "option_enabled_string",
                    "2": "program_string7"
                },
                "DAT_0800bbec": {
                    "1": "string8",
                    "2": "program_string8"
                },
                "DAT_0800bbf4": {
                    "1": "text3",
                    "2": "program_string9"
                },
                "DAT_20000e73": {
                    "1": "data4",
                    "7": "flag3"
                },
                "DAT_0800bc04": {
                    "1": "program_mode_disabled_string",
                    "2": "program_string10"
                },
                "DAT_0800bbfc": {
                    "1": "string11",
                    "2": "program_string11"
                },
                "DAT_20000e74": {
                    "7": "flag4",
                    "1": "flag2"
                },
                "DAT_0800bc14": {
                    "2": "program_string12",
                    "1": "string12"
                },
                "DAT_0800bc0c": {
                    "1": "text7",
                    "2": "program_string13"
                },
                "DAT_20000e72": {
                    "7": "flag5",
                    "1": "data6"
                },
                "DAT_0800bc24": {
                    "1": "text8",
                    "2": "program_string14"
                },
                "DAT_0800bc1c": {
                    "1": "setting_enabled_string",
                    "2": "program_string15"
                },
                "DAT_20000e75": {
                    "3": "flag6",
                    "1": "data7",
                    "2": "value1"
                },
                "DAT_0800bc34": {
                    "2": "program_string16",
                    "1": "text10"
                },
                "DAT_0800bc2c": {
                    "2": "program_string17",
                    "1": "string17"
                },
                "DAT_0800bc30": {
                    "2": "program_string18",
                    "1": "string18"
                },
                "DAT_20000e76": {
                    "1": "numeric_value2",
                    "3": "flag7",
                    "2": "value2"
                },
                "DAT_0800bc38": {
                    "1": "text13",
                    "2": "program_string19"
                },
                "DAT_0800bc3c": {
                    "2": "program_string20",
                    "1": "text14"
                },
                "DAT_0800bc40": {
                    "1": "string21",
                    "2": "program_string21"
                },
                "DAT_20000e77": {
                    "3": "flag8",
                    "1": "option3",
                    "2": "value3"
                },
                "DAT_0800bc4c": {
                    "2": "program_string22",
                    "1": "feature_value_two_string"
                },
                "DAT_0800bc44": {
                    "1": "string23",
                    "2": "program_string23"
                },
                "DAT_0800bc48": {
                    "1": "string24",
                    "2": "program_string24"
                },
                "DAT_20000e88": {
                    "1": "value2",
                    "3": "float_value"
                },
                "DAT_0800bc50": {
                    "1": "newline2",
                    "2": "program_string25"
                },
                "DAT_0800bc54": {
                    "1": "config_float_label",
                    "2": "program_string26"
                },
                "DAT_20000e78": {
                    "2": "float_value2",
                    "1": "value2"
                },
                "DAT_0800b764": {
                    "2": "program_string27",
                    "1": "float_format_string"
                },
                "printFloat": {
                    "19": "print_float",
                    "1": "print_floating_value"
                },
                "FUN_08003826": {
                    "1": "print_device_option",
                    "3": "print_pgm_string",
                    "2": "calculate_checksum"
                },
                "FUN_080037fc": {
                    "1": "print_signed_integer",
                    "2": "print_hex_value",
                    "3": "print_integer"
                },
                "FUN_080036c6": {
                    "5": "print_string",
                    "1": "print_string_value",
                    "3": "print_float"
                },
                "FUN_08008640": {
                    "1": "multiply_floats",
                    "3": "multiply_and_truncate"
                },
                "FUN_08008590": {
                    "2": "calculate_value",
                    "1": "multiply_and_truncate"
                },
                "FUN_08008c30": {
                    "1": "calculate_checksum"
                },
                "param_1": {
                    "1": "config"
                },
                "uVar1": {
                    "1": "result",
                    "2": "truncated_float"
                },
                "uVar2": {
                    "1": "floating_result"
                },
                "__aeabi_f2d": {
                    "1": "float_to_double",
                    "4": "convert_float_to_double"
                },
                "__muldf3": {
                    "1": "multiply_doubles",
                    "5": "multiply_double"
                },
                "__truncdfsf2": {
                    "1": "truncate_to_float",
                    "3": "truncate_double"
                },
                "&DAT_0800bbc8": {
                    "1": "message1"
                },
                "&DAT_0800bbcc": {
                    "1": "message2"
                },
                "&DAT_0800bbd0": {
                    "1": "message3"
                },
                "&DAT_0800bbd4": {
                    "1": "message4"
                },
                "&DAT_0800bbd8": {
                    "1": "message5"
                },
                "&DAT_0800bbe0": {
                    "1": "message6"
                },
                "&DAT_0800bbe4": {
                    "1": "message7"
                },
                "&DAT_0800bbec": {
                    "1": "message8"
                },
                "&DAT_0800bbf4": {
                    "1": "message9"
                },
                "&DAT_0800bbfc": {
                    "1": "message10"
                },
                "&DAT_0800bc04": {
                    "1": "message11"
                },
                "&DAT_0800bc14": {
                    "1": "message12"
                },
                "&DAT_0800bc0c": {
                    "1": "message13"
                },
                "&DAT_0800bc24": {
                    "1": "message14"
                },
                "&DAT_0800bc1c": {
                    "1": "message15"
                },
                "&DAT_0800bc34": {
                    "1": "message16"
                },
                "&DAT_0800bc2c": {
                    "1": "message17"
                },
                "&DAT_0800bc30": {
                    "1": "message18"
                },
                "&DAT_0800bc38": {
                    "1": "message19"
                },
                "&DAT_0800bc3c": {
                    "1": "message20"
                },
                "&DAT_0800bc40": {
                    "1": "message21"
                },
                "&DAT_0800bc4c": {
                    "1": "message22"
                },
                "&DAT_0800bc44": {
                    "1": "message23"
                },
                "&DAT_0800bc48": {
                    "1": "message24"
                },
                "&DAT_0800bc50": {
                    "1": "message25"
                },
                "&DAT_0800bc54": {
                    "1": "message26"
                },
                "&DAT_0800b764": {
                    "1": "message27"
                }
            }
        },
        "FUN_08004900": {
            "entrypoint": "0x08004900",
            "current_name": "print_data_08004900",
            "code": "\nvoid print_data_08004900(undefined data1,undefined4 data2)\n\n{\n  print_program_string(&DAT_0800bc58);\n  print_integer_number(data1);\n  print_program_string(&DAT_0800bc5c);\n  print_string_message(data2);\n  print_program_string(&DAT_0800b6d8);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004900": "print_data_08004900",
                "param_1": "data1",
                "param_2": "data2",
                "printPgmString": "print_program_string",
                "printInteger": "print_integer_number",
                "printString": "print_string_message"
            },
            "calling": [
                "FUN_08003b98"
            ],
            "called": [
                "FUN_080037fc",
                "FUN_0800369c",
                "FUN_080036c6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08004900": {
                    "1": "print_instruction_details",
                    "2": "print_message",
                    "3": "print_information",
                    "21": "print_data"
                },
                "param_1": {
                    "9": "data1",
                    "6": "data",
                    "1": "input1",
                    "2": "integer",
                    "3": "data_value"
                },
                "param_2": {
                    "2": "param2",
                    "1": "value2",
                    "9": "data2",
                    "4": "string",
                    "7": "message",
                    "3": "string_value"
                },
                "printPgmString": {
                    "1": "print_program_string"
                },
                "printInteger": {
                    "1": "print_integer_number"
                },
                "printString": {
                    "1": "print_string_message"
                },
                "FUN_080037fc": {
                    "3": "print_integer"
                },
                "FUN_0800369c": {
                    "3": "print_pgm_string"
                },
                "FUN_080036c6": {
                    "3": "print_string"
                }
            }
        },
        "FUN_08004940": {
            "entrypoint": "0x08004940",
            "current_name": "print_status_08004940",
            "code": "\nvoid print_status_08004940(void)\n\n{\n  unknown float_value;\n  uint index;\n  unknown temp_value;\n  undefined8 double_value;\n  undefined8 double_value2;\n  unknown values [6];\n  byte index;\n  \n  values[3] = DAT_20000eac;\n  values[4] = DAT_20000eb0;\n  values[5] = DAT_20000eb4;\n  switch(DAT_20000ea9) {\n  case 0:\n    print_program_string(\"<Idle\");\n    break;\n  case 2:\n    print_program_string(\"<Queue\");\n    break;\n  case 3:\n    print_program_string(&DAT_0800bc70);\n    break;\n  case 4:\n    print_program_string(\"<Hold\");\n    break;\n  case 5:\n    print_program_string(\"<Home\");\n    break;\n  case 6:\n    print_program_string(\"<Alarm\");\n    break;\n  case 7:\n    print_program_string(\"<Check\");\n  }\n  print_program_string(\",MPos:\");\n  for (index = 0; index < 3; index = index + 1) {\n    float_value = convert_int_to_float(values[index + 3]);\n    index = (uint)index;\n    float_value = divide_float(float_value,(&DAT_20000ebc)[index]);\n    values[index] = float_value;\n    if ((DAT_20000ee4 & 1) != 0) {\n      double_value = convert_float_to_double(values[index]);\n      double_value = multiply_double((int)double_value,(int)((ulonglong)double_value >> 0x20),0x57e16865,0x3fa42851);\n      index = (uint)index;\n      float_value = truncate_double_to_int((int)double_value,(int)((ulonglong)double_value >> 0x20));\n      values[index] = float_value;\n    }\n    print_float_value(values[index]);\n    print_program_string(&DAT_0800bbbc);\n  }\n  print_program_string(\"WPos:\");\n  for (index = 0; index < 3; index = index + 1) {\n    if ((DAT_20000ee4 & 1) == 0) {\n      temp_value = values[index];\n      float_value = add_floats(*(unknown *)(&DAT_20000e70 + (index + 8) * 4),\n                       *(unknown *)(&DAT_20000e74 + (index + 10) * 4));\n      index = (uint)index;\n      float_value = subtract_floats(temp_value,float_value);\n      values[index] = float_value;\n    }\n    else {\n      double_value = convert_float_to_double(values[index]);\n      float_value = add_floats(*(unknown *)(&DAT_20000e70 + (index + 8) * 4),\n                       *(unknown *)(&DAT_20000e74 + (index + 10) * 4));\n      double_value2 = convert_float_to_double(float_value);\n      double_value2 = multiply_double((int)double_value2,(int)((ulonglong)double_value2 >> 0x20),0x57e16865,0x3fa42851);\n      double_value = subtract_doubles((int)double_value,(int)((ulonglong)double_value >> 0x20),(int)double_value2,\n                       (int)((ulonglong)double_value2 >> 0x20));\n      index = (uint)index;\n      float_value = truncate_double_to_int((int)double_value,(int)((ulonglong)double_value >> 0x20));\n      values[index] = float_value;\n    }\n    print_float_value(values[index]);\n    if (index < 2) {\n      print_program_string(&DAT_0800bbbc);\n    }\n  }\n  print_program_string(&DAT_0800bca8);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004940": "print_status_08004940",
                "auStack_2c": "values",
                "uVar1": "float_value",
                "uVar2": "index",
                "uVar3": "temp_value",
                "uVar4": "double_value",
                "uVar5": "double_value2",
                "local_11": "index",
                "printPgmString": "print_program_string",
                "printFloat": "print_float_value",
                "__floatsisf": "convert_int_to_float",
                "__aeabi_fdiv": "divide_float",
                "__aeabi_f2d": "convert_float_to_double",
                "__muldf3": "multiply_double",
                "__truncdfsf2": "truncate_double_to_int",
                "__addsf3": "add_floats",
                "__aeabi_fsub": "subtract_floats",
                "__subdf3": "subtract_doubles",
                "undefined4": "unknown"
            },
            "calling": [
                "FUN_08003a74"
            ],
            "called": [
                "FUN_080082d0",
                "FUN_08008cd8",
                "FUN_08003826",
                "FUN_08008cdc",
                "FUN_08009054",
                "FUN_080036c6",
                "FUN_08008e44",
                "FUN_08008640",
                "FUN_08008590",
                "FUN_08008c30"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08004940": {
                    "25": "print_status",
                    "1": "print_machine_state",
                    "2": "print_position_status"
                },
                "auStack_2c": {
                    "1": "state_data",
                    "6": "values",
                    "2": "position_values",
                    "5": "status_values",
                    "3": "float_array"
                },
                "uVar1": {
                    "1": "float_result",
                    "6": "converted_value",
                    "2": "normalized_value",
                    "12": "float_value"
                },
                "uVar2": {
                    "1": "float_index",
                    "2": "current_index",
                    "4": "temp",
                    "3": "loop_index",
                    "10": "index"
                },
                "uVar3": {
                    "1": "added_float",
                    "8": "temp_value",
                    "2": "float_result"
                },
                "uVar4": {
                    "2": "temp1",
                    "1": "temp_value2",
                    "6": "double_value1",
                    "8": "double_value"
                },
                "uVar5": {
                    "3": "temp_double2",
                    "4": "temp_double",
                    "1": "temp_value3",
                    "2": "temp2",
                    "9": "double_value2"
                },
                "local_11": {
                    "4": "i",
                    "2": "loop_index",
                    "20": "index"
                },
                "printPgmString": {
                    "3": "print_program_string"
                },
                "printFloat": {
                    "1": "print_float_number"
                },
                "__floatsisf": {
                    "2": "convert_int_to_float",
                    "1": "float_to_single"
                },
                "__aeabi_fdiv": {
                    "1": "divide_floats",
                    "2": "divide_float"
                },
                "__aeabi_f2d": {
                    "1": "single_to_double",
                    "2": "convert_float_to_double"
                },
                "__muldf3": {
                    "1": "multiply_doubles",
                    "2": "multiply_double"
                },
                "__truncdfsf2": {
                    "1": "double_to_single"
                },
                "__addsf3": {
                    "2": "add_floats",
                    "1": "add_float"
                },
                "__aeabi_fsub": {
                    "2": "subtract_floats",
                    "1": "subtract_float"
                },
                "__subdf3": {
                    "2": "subtract_doubles",
                    "1": "subtract_double"
                },
                "DAT_20000eac": {
                    "1": "status_idle"
                },
                "DAT_20000eb0": {
                    "1": "constant2"
                },
                "DAT_20000eb4": {
                    "1": "status_hold"
                },
                "DAT_20000ea9": {
                    "2": "status"
                },
                "DAT_20000ee4": {
                    "2": "flag"
                },
                "&DAT_0800bc70": {
                    "1": "string1"
                },
                "&DAT_0800bbbc": {
                    "1": "string2"
                },
                "&DAT_0800bca8": {
                    "1": "string3"
                },
                "DAT_20000e70": {
                    "1": "constant4"
                },
                "DAT_20000e74": {
                    "1": "constant5"
                },
                "undefined4": {
                    "1": "unknown"
                },
                "param_1": {
                    "1": "status"
                },
                "DAT_20000ebc": {
                    "1": "divider_1"
                },
                "DAT_0800bc70": {
                    "1": "str_queue"
                },
                "DAT_0800bbbc": {
                    "1": "str_comma"
                },
                "DAT_0800bca8": {
                    "1": "str_newline"
                }
            }
        },
        "FUN_08004bc0": {
            "entrypoint": "0x08004bc0",
            "current_name": "copy_data_to_eeprom_08004bc0",
            "code": "\nvoid copy_data_to_eeprom_08004bc0(byte data_offset,undefined4 data)\n\n{\n  copy_data_to_eeprom_08004bc0_with_checksum((word)data_offset * 0x101 + 0x300,data,0x100);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004bc0": "copy_data_to_eeprom_08004bc0",
                "param_1": "data_offset",
                "param_2": "data",
                "memcpy_to_eeprom_with_checksum": "copy_data_to_eeprom_with_checksum",
                "ushort": "word"
            },
            "calling": [
                "FUN_08004d2c",
                "FUN_08003b98"
            ],
            "called": [
                "FUN_08000374"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08004bc0": {
                    "1": "store_data_to_eeprom",
                    "3": "copy_to_eeprom",
                    "13": "copy_data_to_eeprom",
                    "5": "write_to_eeprom",
                    "8": "write_data_to_eeprom"
                },
                "param_1": {
                    "3": "data",
                    "2": "byte_value",
                    "1": "param_byte",
                    "5": "data_offset"
                },
                "param_2": {
                    "14": "data",
                    "1": "input_data",
                    "8": "source_data",
                    "2": "param_2"
                },
                "memcpy_to_eeprom_with_checksum": {
                    "2": "copy_with_checksum",
                    "1": "write_data_to_eeprom_with_checksum",
                    "4": "copy_to_eeprom_with_checksum",
                    "3": "write_data_with_checksum",
                    "5": "copy_data_to_eeprom_with_checksum"
                },
                "param_3": {
                    "6": "data_size",
                    "1": "buffer_size",
                    "3": "data_length",
                    "4": "size",
                    "2": "param_3"
                },
                "FUN_08000374": {
                    "1": "memcpy_to_eeprom_with_checksum"
                },
                "ushort": {
                    "1": "word"
                },
                "(ushort)param_1 * 0x101 + 0x300": {
                    "1": "eeprom_address"
                },
                "FUNCHUNK3": {
                    "1": "chunk_size"
                }
            }
        },
        "FUN_08004bf4": {
            "entrypoint": "0x08004bf4",
            "current_name": "write_data_to_eeprom_08004bf4",
            "code": "\nvoid write_data_to_eeprom_08004bf4(byte data_index,undefined4 data)\n\n{\n  write_data_with_checksum((param_offset)data_index * 0xd + 0x200,data,0xc);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004bf4": "write_data_to_eeprom_08004bf4",
                "param_1": "data_index",
                "param_2": "data",
                "memcpy_to_eeprom_with_checksum": "write_data_with_checksum",
                "ushort": "param_offset"
            },
            "calling": [
                "FUN_080005b4",
                "FUN_08004d7c"
            ],
            "called": [
                "FUN_08000374"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08004bf4": {
                    "1": "save_data_to_eeprom",
                    "2": "copy_to_eeprom",
                    "9": "write_to_eeprom",
                    "15": "write_data_to_eeprom"
                },
                "param_1": {
                    "1": "param_byte",
                    "2": "start_address",
                    "5": "data_index",
                    "3": "index",
                    "4": "data_offset"
                },
                "param_2": {
                    "16": "data",
                    "1": "data_to_copy",
                    "2": "data_to_write",
                    "4": "source"
                },
                "memcpy_to_eeprom_with_checksum": {
                    "1": "write_data_with_checksum_to_eeprom",
                    "3": "copy_data_to_eeprom_with_checksum",
                    "8": "write_data_with_checksum",
                    "5": "write_data_to_eeprom_with_checksum",
                    "2": "copy_with_checksum"
                },
                "ushort": {
                    "1": "param_offset"
                },
                "param_3": {
                    "3": "data_length",
                    "1": "param_length",
                    "4": "size",
                    "2": "length"
                },
                "FUN_08000374": {
                    "1": "calculate_checksum",
                    "2": "copy_data"
                },
                "(ushort)param_1 * 0xd + 0x200": {
                    "1": "address",
                    "2": "eeprom_address"
                }
            }
        },
        "FUN_08004c2a": {
            "entrypoint": "0x08004c2a",
            "current_name": "write_data_to_eeprom_08004c2a",
            "code": "\nvoid write_data_to_eeprom_08004c2a(void)\n\n{\n  write_char_to_eeprom(0,5);\n  write_data_to_eeprom_08004c2a_with_checksum(1,&DAT_20000ebc,0x40);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004c2a": "write_data_to_eeprom_08004c2a",
                "eeprom_put_char": "write_char_to_eeprom",
                "memcpy_to_eeprom_with_checksum": "write_data_to_eeprom_with_checksum"
            },
            "calling": [
                "FUN_08004c48",
                "FUN_08004e30"
            ],
            "called": [
                "FUN_08000340",
                "FUN_08000374"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08004c2a": {
                    "4": "store_data_in_eeprom",
                    "2": "write_to_eeprom",
                    "1": "initialize_eeprom",
                    "5": "save_data_to_eeprom",
                    "13": "write_data_to_eeprom"
                },
                "param_1": {
                    "14": "address",
                    "1": "start_address",
                    "2": "eeprom_address",
                    "4": "index"
                },
                "param_2": {
                    "17": "data",
                    "3": "source_data",
                    "4": "data_buffer",
                    "1": "data_address"
                },
                "param_3": {
                    "3": "data_size",
                    "1": "buffer_size",
                    "5": "data_length",
                    "10": "size",
                    "8": "length"
                },
                "eeprom_put_char": {
                    "2": "write_byte_to_eeprom",
                    "8": "write_char_to_eeprom"
                },
                "memcpy_to_eeprom_with_checksum": {
                    "1": "write_data_with_checksum_to_eeprom",
                    "9": "write_data_to_eeprom_with_checksum"
                },
                "DAT_20000ebc": {
                    "1": "eeprom_data"
                },
                "FUN_08000340": {
                    "1": "initialize_data",
                    "3": "initialize_eeprom"
                },
                "FUN_08000374": {
                    "4": "copy_data_to_eeprom",
                    "1": "copy_data",
                    "3": "copy_data_to_eeprom_with_checksum"
                }
            }
        },
        "FUN_08004c48": {
            "entrypoint": "0x08004c48",
            "current_name": "initialize_settings_08004c48",
            "code": "\nvoid initialize_settings_08004c48(char flag)\n\n{\n  if (flag != '\\0') {\n    DAT_20000ebc = 0x431d7af6;\n    DAT_20000ec0 = 0x431d7af6;\n    DAT_20000ec4 = 0x431d7af6;\n    DAT_20000ec9 = 10;\n    DAT_20000ecc = 0x437a0000;\n    DAT_20000ed0 = 0x43fa0000;\n    DAT_20000edc = 0x470ca000;\n    DAT_20000ed8 = 0x3dcccccd;\n    DAT_20000ed4 = 0;\n    DAT_20000ed6 = 0xa80;\n    DAT_20000ee0 = 0x3d4ccccd;\n  }\n  DAT_20000ee4 = 0x12;\n  DAT_20000ee6 = 0;\n  DAT_20000ee8 = 0x41c80000;\n  DAT_20000eec = 0x437a0000;\n  DAT_20000ef0 = 100;\n  DAT_20000ef4 = 0x3f800000;\n  DAT_20000ef8 = 0x19;\n  DAT_20000ef9 = 3;\n  DAT_20000efa = 0x19;\n  save_settings();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004c48": "initialize_settings_08004c48",
                "param_1": "flag",
                "write_global_settings": "save_settings"
            },
            "calling": [
                "FUN_08004dd2",
                "FUN_080051b4"
            ],
            "called": [
                "FUN_08004c2a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08004c48": {
                    "2": "initialize_data",
                    "20": "initialize_settings",
                    "9": "initialize_global_settings"
                },
                "param_1": {
                    "16": "flag",
                    "1": "input_param",
                    "8": "input_flag"
                },
                "write_global_settings": {
                    "15": "save_settings",
                    "11": "save_global_settings",
                    "1": "update_settings"
                },
                "DAT_20000ebc": {
                    "1": "variable1",
                    "2": "var1",
                    "3": "setting1"
                },
                "DAT_20000ec0": {
                    "1": "constant2",
                    "3": "setting2",
                    "2": "var2"
                },
                "DAT_20000ec4": {
                    "2": "var3",
                    "3": "value3",
                    "1": "default_setting3"
                },
                "DAT_20000ec9": {
                    "1": "default_setting4",
                    "2": "value4",
                    "3": "setting4"
                },
                "DAT_20000ecc": {
                    "1": "global_setting5",
                    "2": "var5",
                    "3": "setting5"
                },
                "DAT_20000ed0": {
                    "2": "var6",
                    "1": "value6",
                    "3": "setting6"
                },
                "DAT_20000edc": {
                    "1": "value7",
                    "3": "setting7",
                    "2": "var7"
                },
                "DAT_20000ed8": {
                    "3": "setting8",
                    "1": "variable8",
                    "2": "var8"
                },
                "DAT_20000ed4": {
                    "1": "value9",
                    "2": "setting9"
                },
                "DAT_20000ed6": {
                    "1": "constant2",
                    "2": "setting10"
                },
                "DAT_20000ee0": {
                    "2": "setting11",
                    "1": "var11"
                },
                "DAT_20000ee4": {
                    "1": "length",
                    "3": "constant1"
                },
                "DAT_20000ee6": {
                    "1": "setting9",
                    "3": "constant2"
                },
                "DAT_20000ee8": {
                    "1": "var11",
                    "3": "constant3"
                },
                "DAT_20000eec": {
                    "1": "variable15",
                    "3": "constant4"
                },
                "DAT_20000ef0": {
                    "1": "var16",
                    "3": "constant5"
                },
                "DAT_20000ef4": {
                    "1": "float8",
                    "3": "constant6"
                },
                "DAT_20000ef8": {
                    "1": "eighteenth_value",
                    "3": "constant7"
                },
                "DAT_20000ef9": {
                    "1": "var19",
                    "3": "constant8"
                },
                "DAT_20000efa": {
                    "1": "var17",
                    "3": "constant9"
                },
                "FUN_08004c2a": {
                    "1": "decompress_data"
                }
            }
        },
        "FUN_08004d2c": {
            "entrypoint": "0x08004d2c",
            "current_name": "load_data_from_eeprom_08004d2c",
            "code": "\nbool load_data_from_eeprom_08004d2c(byte device_id,unknown_type *data_buffer)\n\n{\n  int result;\n  \n  result = read_settings_from_eeprom(data_buffer,(ushort_value)device_id * 0x101 + 0x300,0x100);\n  if (result == 0) {\n    *data_buffer = 0;\n    store_startup_line(device_id,data_buffer);\n  }\n  return result != 0;\n}\n\n",
            "renaming": {
                "FUN_08004d2c": "load_data_from_eeprom_08004d2c",
                "param_1": "device_id",
                "param_2": "data_buffer",
                "iVar1": "result",
                "memcpy_from_eeprom_with_checksum": "read_settings_from_eeprom",
                "ushort": "ushort_value",
                "settings_store_startup_line": "store_startup_line",
                "undefined": "unknown_type"
            },
            "calling": [
                "FUN_080039bc",
                "FUN_08003b98"
            ],
            "called": [
                "FUN_080003ec",
                "FUN_08004bc0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08004d2c": {
                    "1": "read_data_from_eeprom",
                    "3": "read_settings_from_eeprom",
                    "8": "load_data_from_eeprom",
                    "2": "load_startup_settings"
                },
                "param_1": {
                    "1": "block_index",
                    "3": "input_byte",
                    "5": "device_id",
                    "2": "index",
                    "4": "byte_value"
                },
                "param_2": {
                    "2": "data",
                    "1": "output_data",
                    "10": "data_buffer",
                    "8": "buffer",
                    "3": "settings_buffer",
                    "6": "output_buffer"
                },
                "iVar1": {
                    "1": "status",
                    "5": "copy_result",
                    "21": "result"
                },
                "memcpy_from_eeprom_with_checksum": {
                    "1": "copy_settings_from_eeprom"
                },
                "ushort": {
                    "1": "ushort_value"
                },
                "settings_store_startup_line": {
                    "1": "save_startup_line",
                    "4": "store_startup_line"
                },
                "*param_2": {
                    "1": "status"
                },
                "(ushort)param_1 * 0x101 + 0x300": {
                    "1": "eeprom_address"
                },
                "0x100": {
                    "1": "buffer_size"
                },
                "bool": {
                    "1": "bool"
                },
                "undefined": {
                    "1": "unknown_type"
                },
                "0x101": {
                    "1": "block_size"
                },
                "0x300": {
                    "1": "base_address"
                }
            }
        },
        "FUN_08004d7c": {
            "entrypoint": "0x08004d7c",
            "current_name": "retrieve_and_write_settings_08004d7c",
            "code": "\nbool retrieve_and_write_settings_08004d7c(byte byte_value,undefined4 data_buffer)\n\n{\n  int result;\n  \n  result = read_data_from_eeprom(data_buffer,(ushort)byte_value * 0xd + 0x200,0xc);\n  if (result == 0) {\n    clear_memory(data_buffer,0,0xc);\n    write_coord_data(byte_value,data_buffer);\n  }\n  return result != 0;\n}\n\n",
            "renaming": {
                "FUN_08004d7c": "retrieve_and_write_settings_08004d7c",
                "param_1": "byte_value",
                "param_2": "data_buffer",
                "iVar1": "result",
                "memcpy_from_eeprom_with_checksum": "read_data_from_eeprom",
                "memset": "clear_memory",
                "settings_write_coord_data": "write_coord_data"
            },
            "calling": [
                "FUN_080004ac",
                "FUN_080051b4",
                "FUN_080005b4",
                "FUN_080044e8"
            ],
            "called": [
                "FUN_080003ec",
                "FUN_08004bf4",
                "FUN_0800b430"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08004d7c": {
                    "2": "load_data_from_eeprom",
                    "1": "read_and_write_eeprom",
                    "3": "retrieve_and_write_settings"
                },
                "param_1": {
                    "3": "address",
                    "4": "input_byte",
                    "1": "byte_val",
                    "2": "index",
                    "9": "byte_value"
                },
                "param_2": {
                    "2": "settings_data",
                    "1": "settings_buffer",
                    "7": "data_buffer",
                    "3": "output_buffer",
                    "6": "buffer"
                },
                "iVar1": {
                    "3": "error_code",
                    "1": "result_code",
                    "4": "copy_result",
                    "19": "result"
                },
                "memcpy_from_eeprom_with_checksum": {
                    "1": "read_from_eeprom_with_checksum",
                    "2": "read_eeprom_data_with_checksum",
                    "4": "read_data_from_eeprom"
                },
                "memset": {
                    "5": "clear_memory",
                    "1": "clear_buffer",
                    "3": "initialize_memory"
                },
                "settings_write_coord_data": {
                    "1": "write_settings",
                    "2": "write_data_to_settings",
                    "3": "write_coord_data"
                },
                "FUM_080003ec": {
                    "1": "memcpy_with_checksum"
                },
                "FUN_08004bf4": {
                    "1": "write_coord_data"
                },
                "FUN_0800b430": {
                    "1": "write_coord_data"
                },
                "(ushort)param_1 * 0xd + 0x200": {
                    "1": "address_offset"
                },
                "FUN_080003ec": {
                    "1": "copy_data_with_checksum"
                },
                "FUND_08004d7c": {
                    "1": "load_data_from_eeprom"
                }
            }
        },
        "FUN_08004dd2": {
            "entrypoint": "0x08004dd2",
            "current_name": "initialize_settings_08004dd2",
            "code": "\nundefined4 initialize_settings_08004dd2(void)\n\n{\n  byte eeprom_value;\n  int result;\n  \n  eeprom_value = read_eeprom_byte(0);\n  if (eeprom_value == 5) {\n    result = copy_data_from_eeprom(&DAT_20000ebc,1,0x40);\n    if (result == 0) {\n      return 0;\n    }\n  }\n  else {\n    if (4 < eeprom_value) {\n      return 0;\n    }\n    result = copy_data_from_eeprom(&DAT_20000ebc,1,0x28);\n    if (result == 0) {\n      return 0;\n    }\n    reset_settings(0);\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08004dd2": "initialize_settings_08004dd2",
                "bVar1": "eeprom_value",
                "iVar2": "result",
                "eeprom_get_char": "read_eeprom_byte",
                "memcpy_from_eeprom_with_checksum": "copy_data_from_eeprom",
                "settings_reset": "reset_settings"
            },
            "calling": [
                "FUN_080051b4"
            ],
            "called": [
                "FUN_080003ec",
                "FUN_08000310",
                "FUN_08004c48"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08004dd2": {
                    "1": "initialize_data",
                    "4": "load_settings_from_eeprom",
                    "2": "load_settings",
                    "19": "initialize_settings"
                },
                "bVar1": {
                    "2": "eeprom_byte",
                    "22": "eeprom_value",
                    "1": "eeprom_data"
                },
                "iVar2": {
                    "9": "copy_result",
                    "4": "memcpy_result",
                    "11": "result",
                    "1": "error_code"
                },
                "eeprom_get_char": {
                    "1": "get_eeprom_data"
                },
                "memcpy_from_eeprom_with_checksum": {
                    "2": "copy_data_from_eeprom",
                    "1": "copy_from_eeprom"
                },
                "&DAT_20000ebc": {
                    "1": "eeprom_data"
                },
                "settings_reset": {
                    "5": "reset_settings"
                },
                "param_1": {
                    "1": "buffer",
                    "4": "eeprom_data"
                },
                "param_2": {
                    "2": "size",
                    "1": "start_offset"
                },
                "param_3": {
                    "2": "checksum",
                    "1": "eeprom_checksum"
                },
                "DAT_20000ebc": {
                    "2": "eeprom_data",
                    "1": "settings_data"
                },
                "FUN_080003ec": {
                    "2": "memcpy_from_eeprom_with_checksum",
                    "1": "copy_data_with_checksum"
                },
                "FUN_08000310": {
                    "2": "eeprom_get_char",
                    "1": "reset_settings"
                },
                "FUN_08004c48": {
                    "1": "update_settings",
                    "3": "settings_reset"
                }
            }
        },
        "FUN_08004e30": {
            "entrypoint": "0x08004e30",
            "current_name": "update_settings_08004e30",
            "code": "\nundefined4 update_settings_08004e30(int setting_type,uint setting_value)\n\n{\n  undefined4 result;\n  int comparison_result;\n  undefined8 converted_value;\n  \n  switch(setting_type) {\n  case 0:\n  case 1:\n  case 2:\n    comparison_result = compare_with_zero(setting_value,0);\n    if (comparison_result != 0) {\n      return 8;\n    }\n    (&DAT_20000ebc)[setting_type] = setting_value;\n    break;\n  case 3:\n    comparison_result = compare_with_value(setting_value,0x40400000);\n    if (comparison_result != 0) {\n      return 9;\n    }\n    converted_value = float_to_double_conversion(setting_value);\n    converted_value = round_to_integer((int)converted_value,(int)((ulonglong)converted_value >> 0x20));\n    DAT_20000ec9 = __aeabi_d2uiz((int)converted_value,(int)((ulonglong)converted_value >> 0x20));\n    break;\n  case 4:\n    DAT_20000ecc = setting_value;\n    break;\n  case 5:\n    DAT_20000ed0 = setting_value;\n    break;\n  case 6:\n    converted_value = float_to_double_conversion(setting_value);\n    converted_value = truncate_to_integer((int)converted_value,(int)((ulonglong)converted_value >> 0x20));\n    DAT_20000ed4 = __aeabi_d2uiz((int)converted_value,(int)((ulonglong)converted_value >> 0x20));\n    break;\n  case 7:\n    converted_value = float_to_double_conversion(setting_value);\n    converted_value = round_to_integer((int)converted_value,(int)((ulonglong)converted_value >> 0x20));\n    DAT_20000ef8 = __aeabi_d2uiz((int)converted_value,(int)((ulonglong)converted_value >> 0x20));\n    break;\n  case 8:\n    result = multiply_values(setting_value,0x42700000);\n    DAT_20000edc = multiply_values(result,0x42700000);\n    break;\n  case 9:\n    DAT_20000ee0 = setting_value & 0x7fffffff;\n    break;\n  case 10:\n    DAT_20000ed8 = setting_value;\n    break;\n  case 0xb:\n    converted_value = float_to_double_conversion(setting_value);\n    converted_value = round_to_integer((int)converted_value,(int)((ulonglong)converted_value >> 0x20));\n    DAT_20000efa = __aeabi_d2uiz((int)converted_value,(int)((ulonglong)converted_value >> 0x20));\n    break;\n  case 0xc:\n    converted_value = float_to_double_conversion(setting_value);\n    converted_value = round_to_integer((int)converted_value,(int)((ulonglong)converted_value >> 0x20));\n    DAT_20000ef9 = __aeabi_d2uiz((int)converted_value,(int)((ulonglong)converted_value >> 0x20));\n    break;\n  case 0xd:\n    comparison_result = __aeabi_fcmpeq(setting_value,0);\n    if (comparison_result == 0) {\n      DAT_20000ee4 = DAT_20000ee4 | 1;\n    }\n    else {\n      DAT_20000ee4 = DAT_20000ee4 & 0xfe;\n    }\n    break;\n  case 0xe:\n    comparison_result = __aeabi_fcmpeq(setting_value,0);\n    if (comparison_result == 0) {\n      DAT_20000ee4 = DAT_20000ee4 | 2;\n    }\n    else {\n      DAT_20000ee4 = DAT_20000ee4 & 0xfd;\n    }\n    break;\n  case 0xf:\n    comparison_result = __aeabi_fcmpeq(setting_value,0);\n    if (comparison_result == 0) {\n      DAT_20000ee4 = DAT_20000ee4 | 4;\n    }\n    else {\n      DAT_20000ee4 = DAT_20000ee4 & 0xfb;\n    }\n    break;\n  case 0x10:\n    comparison_result = __aeabi_fcmpeq(setting_value,0);\n    if (comparison_result == 0) {\n      DAT_20000ee4 = DAT_20000ee4 | 8;\n    }\n    else {\n      DAT_20000ee4 = DAT_20000ee4 & 0xf7;\n    }\n    initialize_limits();\n    break;\n  case 0x11:\n    comparison_result = __aeabi_fcmpeq(setting_value,0);\n    if (comparison_result == 0) {\n      DAT_20000ee4 = DAT_20000ee4 | 0x10;\n    }\n    else {\n      DAT_20000ee4 = DAT_20000ee4 & 0xef;\n    }\n    break;\n  case 0x12:\n    converted_value = float_to_double_conversion(setting_value);\n    converted_value = truncate_to_integer((int)converted_value,(int)((ulonglong)converted_value >> 0x20));\n    DAT_20000ee6 = __aeabi_d2uiz((int)converted_value,(int)((ulonglong)converted_value >> 0x20));\n    break;\n  case 0x13:\n    DAT_20000ee8 = setting_value;\n    break;\n  case 0x14:\n    DAT_20000eec = setting_value;\n    break;\n  case 0x15:\n    converted_value = float_to_double_conversion(setting_value);\n    converted_value = round_to_integer((int)converted_value,(int)((ulonglong)converted_value >> 0x20));\n    DAT_20000ef0 = __aeabi_d2uiz((int)converted_value,(int)((ulonglong)converted_value >> 0x20));\n    break;\n  case 0x16:\n    DAT_20000ef4 = setting_value;\n    break;\n  case 0x17:\n    converted_value = float_to_double_conversion(setting_value);\n    converted_value = truncate_to_integer((int)converted_value,(int)((ulonglong)converted_value >> 0x20));\n    DAT_20000ed6 = __aeabi_d2uiz((int)converted_value,(int)((ulonglong)converted_value >> 0x20));\n    break;\n  default:\n    return 6;\n  }\n  save_settings_to_file();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08004e30": "update_settings_08004e30",
                "param_1": "setting_type",
                "param_2": "setting_value",
                "iVar2": "comparison_result",
                "uVar1": "result",
                "uVar3": "converted_value",
                "__aeabi_fcmple": "compare_with_zero",
                "__aeabi_fcmplt": "compare_with_value",
                "__aeabi_f2d": "float_to_double_conversion",
                "round": "round_to_integer",
                "trunc": "truncate_to_integer",
                "__aeabi_fmul": "multiply_values",
                "write_global_settings": "save_settings_to_file",
                "limits_init": "initialize_limits"
            },
            "calling": [
                "FUN_08003b98"
            ],
            "called": [
                "FUN_08009228",
                "FUN_0800192c",
                "FUN_08009214",
                "FUN_08009654",
                "FUN_08004c2a",
                "FUN_0800923c",
                "FUN_08009798",
                "FUN_08008bf0",
                "FUN_08008eec",
                "FUN_08008590"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08004e30": {
                    "11": "update_global_settings",
                    "1": "set_global_settings",
                    "2": "update_setting",
                    "15": "update_settings"
                },
                "param_1": {
                    "5": "setting_index",
                    "1": "param_type",
                    "3": "setting",
                    "2": "setting_id",
                    "16": "setting_type"
                },
                "param_2": {
                    "1": "param_value",
                    "10": "value",
                    "20": "setting_value"
                },
                "iVar2": {
                    "2": "comparison",
                    "27": "comparison_result"
                },
                "uVar1": {
                    "1": "float_result",
                    "3": "return_value",
                    "20": "result"
                },
                "uVar3": {
                    "1": "temp_value",
                    "26": "converted_value"
                },
                "__aeabi_fcmple": {
                    "1": "compare_with_zero"
                },
                "DAT_20000ebc": {
                    "1": "setting_array"
                },
                "__aeabi_fcmplt": {
                    "1": "compare_with_value"
                },
                "0x40400000": {
                    "1": "threshold_value"
                },
                "__aeabi_f2d": {
                    "1": "float_to_double_conversion"
                },
                "round": {
                    "1": "round_to_integer"
                },
                "lower_32_bits(uVar3)": {
                    "1": "lower32_bits_conversion"
                },
                "upper_32_bits(uVar3)": {
                    "1": "upper32_bits_conversion"
                },
                "DAT_20000ec9": {
                    "1": "converted_setting"
                },
                "DAT_20000ecc": {
                    "1": "other_setting1"
                },
                "DAT_20000ed0": {
                    "1": "other_setting2"
                },
                "trunc": {
                    "1": "truncate_to_integer"
                },
                "DAT_20000ed4": {
                    "1": "other_setting3"
                },
                "DAT_20000ef8": {
                    "1": "other_setting4"
                },
                "0x42700000": {
                    "1": "multiplication_value"
                },
                "DAT_20000edc": {
                    "1": "multiplied_value1"
                },
                "__aeabi_fmul": {
                    "1": "multiply_values"
                },
                "DAT_20000ee0": {
                    "1": "unsigned_setting"
                },
                "0x7fffffff": {
                    "1": "bitwise_and_value"
                },
                "DAT_20000ee4": {
                    "1": "bitwise_setting"
                },
                "DAT_20000ee6": {
                    "1": "other_setting5"
                },
                "DAT_20000ee8": {
                    "1": "other_setting6"
                },
                "DAT_20000eec": {
                    "1": "other_setting7"
                },
                "DAT_20000ef0": {
                    "1": "other_setting8"
                },
                "DAT_20000ef4": {
                    "1": "other_setting9"
                },
                "DAT_20000ed6": {
                    "1": "other_setting10"
                },
                "write_global_settings": {
                    "1": "save_settings_to_file"
                },
                "limits_init": {
                    "1": "initialize_limits"
                }
            }
        },
        "FUN_080051b4": {
            "entrypoint": "0x080051b4",
            "current_name": "check_and_reset_settings_080051b4",
            "code": "\nvoid check_and_reset_settings_080051b4(void)\n\n{\n  int result;\n  undefined coord_data [15];\n  byte index;\n  \n  result = get_global_settings();\n  if (result == 0) {\n    display_status_message(10);\n    reset_settings(1);\n    display_grbl_settings();\n  }\n  for (index = 0; index < 8; index = index + 1) {\n    result = read_coord_data(index,coord_data);\n    if (result == 0) {\n      display_status_message(10);\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080051b4": "check_and_reset_settings_080051b4",
                "local_9": "index",
                "iVar1": "result",
                "auStack_18": "coord_data",
                "read_global_settings": "get_global_settings",
                "report_status_message": "display_status_message",
                "settings_reset": "reset_settings",
                "report_grbl_settings": "display_grbl_settings",
                "settings_read_coord_data": "read_coord_data"
            },
            "calling": [
                "FUN_08001ddc"
            ],
            "called": [
                "FUN_08004dd2",
                "FUN_08004250",
                "FUN_08004030",
                "FUN_08004c48",
                "FUN_08004d7c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "fun_08004dd2": {
                    "1": "read_global_settings"
                },
                "FUN_08004250": {
                    "1": "report_status_message"
                },
                "FUN_08004030": {
                    "1": "settings_reset"
                },
                "FUN_08004c48": {
                    "1": "report_grbl_settings"
                },
                "FUN_08004d7c": {
                    "1": "settings_read_coord_data"
                },
                "FUN_080051b4": {
                    "1": "check_global_settings_and_read_coord_data",
                    "18": "check_and_reset_settings",
                    "7": "check_global_settings",
                    "2": "initialize_settings"
                },
                "local_9": {
                    "1": "i",
                    "4": "coordinate_index",
                    "3": "counter",
                    "14": "index",
                    "7": "coord_index"
                },
                "iVar1": {
                    "2": "return_value",
                    "11": "result"
                },
                "auStack_18": {
                    "23": "coord_data",
                    "2": "coordinate_data",
                    "5": "coord_data_buffer"
                },
                "read_global_settings": {
                    "2": "get_global_settings"
                },
                "report_status_message": {
                    "2": "display_status_message"
                },
                "settings_reset": {
                    "2": "reset_settings"
                },
                "report_grbl_settings": {
                    "2": "display_grbl_settings"
                },
                "settings_read_coord_data": {
                    "2": "read_coord_data"
                }
            }
        },
        "FUN_08005208": {
            "entrypoint": "0x08005208",
            "current_name": "FUNC_08005208",
            "code": "\nvoid FUNC_08005208(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005208": "FUNC_08005208"
            },
            "calling": [
                "FUN_0800525c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005214": {
            "entrypoint": "0x08005214",
            "current_name": "FUNC_08005214",
            "code": "\nvoid FUNC_08005214(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005214": "FUNC_08005214"
            },
            "calling": [
                "FUN_08005250"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005220": {
            "entrypoint": "0x08005220",
            "current_name": "FUNC_08005220",
            "code": "\nvoid FUNC_08005220(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005220": "FUNC_08005220"
            },
            "calling": [
                "FUN_0800525c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800522c": {
            "entrypoint": "0x0800522c",
            "current_name": "FUNC_0800522c",
            "code": "\nvoid FUNC_0800522c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800522c": "FUNC_0800522c"
            },
            "calling": [
                "FUN_0800525c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005238": {
            "entrypoint": "0x08005238",
            "current_name": "stop_spindle_08005238",
            "code": "\nvoid stop_spindle_08005238(void)\n\n{\n  DAT_20000e12 = 0;\n  stop_spindle_08005238();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005238": "stop_spindle_08005238",
                "spindle_stop": "stop_spindle"
            },
            "calling": [
                "FUN_08001ddc"
            ],
            "called": [
                "FUN_08005250"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08005238": {
                    "1": "stop_spindle_function",
                    "2": "initialize_spindle",
                    "26": "stop_spindle"
                },
                "FUN_08005250": {
                    "1": "spindle_controller",
                    "3": "initialize",
                    "2": "reset_counter"
                },
                "DAT_20000e12": {
                    "1": "spindle_status"
                },
                "spindle_stop": {
                    "1": "stop_spindle"
                }
            }
        },
        "FUN_08005250": {
            "entrypoint": "0x08005250",
            "current_name": "turn_off_spindle_08005250",
            "code": "\nvoid turn_off_spindle_08005250(void)\n\n{\n  turn_off_spindle_08005250();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005250": "turn_off_spindle_08005250",
                "spindle_off": "turn_off_spindle"
            },
            "calling": [
                "FUN_080025e8",
                "FUN_08005238",
                "FUN_0800525c"
            ],
            "called": [
                "FUN_08005214"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08005250": {
                    "4": "turn_spindle_off",
                    "26": "turn_off_spindle"
                },
                "FUNC_08005214": {
                    "1": "reverse_spindle",
                    "3": "disable_spindle",
                    "2": "disable_motor",
                    "5": "stop_spindle"
                },
                "<original_function_name>": {
                    "1": "turn_off_spindle"
                },
                "<original_variable_name_1>": {
                    "1": "spindle_status"
                },
                "spindle_off": {
                    "1": "turn_off_spindle"
                }
            }
        },
        "FUN_0800525c": {
            "entrypoint": "0x0800525c",
            "current_name": "control_spindle_0800525c",
            "code": "\nvoid control_spindle_0800525c(byte status)\n\n{\n  if ((int)(char)status != (uint)DAT_20000e12) {\n    synchronize_plan();\n    if (status == 0) {\n      stop_spindle();\n      DAT_20000e12 = status;\n    }\n    else {\n      if ((char)status < '\\x01') {\n        reverse_spindle();\n      }\n      else {\n        forward_spindle();\n      }\n      turn_on_spindle();\n      DAT_20000e12 = status;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800525c": "control_spindle_0800525c",
                "param_1": "status",
                "plan_synchronize": "synchronize_plan",
                "spindle_stop": "stop_spindle",
                "spindle_rev": "reverse_spindle",
                "spindle_fwd": "forward_spindle",
                "spindle_on": "turn_on_spindle"
            },
            "calling": [
                "FUN_080005b4"
            ],
            "called": [
                "FUN_08002fd4",
                "FUN_08005220",
                "FUN_08005208",
                "FUN_0800522c",
                "FUN_08005250"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800525c": {
                    "24": "control_spindle",
                    "1": "control_spindle_direction",
                    "3": "update_spindle_direction"
                },
                "param_1": {
                    "3": "state",
                    "1": "input_data",
                    "2": "input_value",
                    "5": "spindle_direction",
                    "6": "status",
                    "4": "direction"
                },
                "FUN_08002fd4": {
                    "2": "plan_synchronize"
                },
                "FUNC_08005220": {
                    "2": "spindle_stop"
                },
                "FUNC_08005208": {
                    "2": "spindle_rev"
                },
                "FUNC_0800522c": {
                    "2": "spindle_fwd"
                },
                "FUN_08005250": {
                    "2": "spindle_on"
                },
                "plan_synchronize": {
                    "1": "synchronize_with_plan",
                    "17": "synchronize_plan",
                    "5": "synchronize_plans"
                },
                "spindle_stop": {
                    "26": "stop_spindle"
                },
                "spindle_rev": {
                    "1": "reverse_spindle_direction",
                    "25": "reverse_spindle"
                },
                "spindle_fwd": {
                    "25": "forward_spindle",
                    "1": "forward_spindle_direction"
                },
                "spindle_on": {
                    "1": "activate_spindle",
                    "24": "turn_on_spindle"
                },
                "DAT_20000e12": {
                    "1": "current_direction"
                }
            }
        },
        "FUN_080052ac": {
            "entrypoint": "0x080052ac",
            "current_name": "update_data_with_mask_080052ac",
            "code": "\n\n\nvoid update_data_with_mask_080052ac(uint new_value)\n\n{\n  _DAT_40021014 = new_value | _DAT_40021014 & 0xfffffaaf;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080052ac": "update_data_with_mask_080052ac",
                "param_1": "new_value"
            },
            "calling": [
                "FUN_08005778",
                "FUN_08005760",
                "FUN_0800583c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080052ac": {
                    "2": "update_data_in_memory",
                    "7": "update_data_with_mask",
                    "1": "set_bitwise_flag",
                    "6": "update_data"
                },
                "param_1": {
                    "2": "value",
                    "11": "new_value",
                    "3": "input_value",
                    "1": "flag_value",
                    "10": "new_data"
                },
                "_DAT_40021014": {
                    "1": "memory_value_to_update",
                    "5": "existing_value",
                    "9": "existing_data",
                    "2": "current_value"
                },
                "0xfffffaaf": {
                    "1": "bitmask",
                    "3": "mask"
                }
            }
        },
        "FUN_080052dc": {
            "entrypoint": "0x080052dc",
            "current_name": "update_data_080052dc",
            "code": "\n\n\nvoid update_data_080052dc(uint new_value)\n\n{\n  _DAT_40021014 = new_value | _DAT_40021014 & 0xfffff55f;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080052dc": "update_data_080052dc",
                "param_1": "new_value"
            },
            "calling": [
                "FUN_080053a0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080052dc": {
                    "1": "set_flag_and_update_memory",
                    "9": "update_data",
                    "2": "update_flags",
                    "4": "update_register_value"
                },
                "param_1": {
                    "1": "new_data",
                    "12": "new_value",
                    "11": "input_value"
                },
                "_DAT_40021014": {
                    "3": "data_register",
                    "1": "flag_value",
                    "2": "existing_value",
                    "6": "register_value"
                },
                "0xfffff55f": {
                    "2": "mask"
                }
            }
        },
        "FUN_0800530c": {
            "entrypoint": "0x0800530c",
            "current_name": "FUNC_0800530c",
            "code": "\nvoid FUNC_0800530c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800530c": "FUNC_0800530c"
            },
            "calling": [
                "FUN_080057e4"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005318": {
            "entrypoint": "0x08005318",
            "current_name": "FUNC_08005318",
            "code": "\nvoid FUNC_08005318(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005318": "FUNC_08005318"
            },
            "calling": [
                "FUN_08005790"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005324": {
            "entrypoint": "0x08005324",
            "current_name": "calculate_step_period_08005324",
            "code": "\nvoid calculate_step_period_08005324(uint input_value)\n\n{\n  uint adjusted_value;\n  \n  adjusted_value = input_value;\n  if (input_value < 800) {\n    adjusted_value = 800;\n  }\n  DAT_20000e28 = 1260000000 / adjusted_value;\n  set_step_period(DAT_20000e28);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005324": "calculate_step_period_08005324",
                "param_1": "input_value",
                "local_14": "adjusted_value"
            },
            "calling": [
                "FUN_080053a0",
                "FUN_080058a0",
                "FUN_08005814"
            ],
            "called": [
                "FUN_08007bf0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08005324": {
                    "2": "set_step_period_based_on_param",
                    "29": "calculate_step_period"
                },
                "param_1": {
                    "2": "step_size",
                    "1": "input",
                    "25": "input_value",
                    "3": "input_param"
                },
                "local_14": {
                    "1": "step_value",
                    "2": "adjusted_step_size",
                    "17": "adjusted_value",
                    "3": "clamped_value"
                }
            }
        },
        "FUN_08005360": {
            "entrypoint": "0x08005360",
            "current_name": "check_threshold_exceeded_08005360",
            "code": "\nbool check_threshold_exceeded_08005360(void)\n\n{\n  bool is_threshold_exceeded;\n  \n  DAT_20000e2c = DAT_20000e28 + DAT_20000e2c;\n  is_threshold_exceeded = 420000 < DAT_20000e2c;\n  if (is_threshold_exceeded) {\n    DAT_20000e2c = DAT_20000e2c - 420000;\n  }\n  return is_threshold_exceeded;\n}\n\n",
            "renaming": {
                "FUN_08005360": "check_threshold_exceeded_08005360",
                "bVar1": "is_threshold_exceeded"
            },
            "calling": [
                "FUN_080053a0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08005360": {
                    "1": "check_if_value_exceeds_limit",
                    "2": "calculate_threshold_exceeded",
                    "3": "calculate_excess",
                    "5": "check_threshold_exceeded"
                },
                "bVar1": {
                    "1": "excess",
                    "2": "exceeds_threshold",
                    "3": "is_exceeding_limit",
                    "13": "is_threshold_exceeded",
                    "4": "is_overflow"
                },
                "DAT_20000e2c": {
                    "1": "accumulator",
                    "2": "total",
                    "10": "current_value"
                },
                "DAT_20000e28": {
                    "1": "base",
                    "3": "increment",
                    "10": "initial_value"
                },
                "isOverflow": {
                    "1": "is_overflow"
                },
                "420000": {
                    "1": "threshold"
                }
            }
        },
        "FUN_080053a0": {
            "entrypoint": "0x080053a0",
            "current_name": "update_step_events_080053a0",
            "code": "\nvoid update_step_events_080053a0(void)\n\n{\n  int iteration_result;\n  \n  write_direction(DAT_20000e3e);\n  DAT_20000e40 = DAT_20000e3c;\n  if (DAT_20000e38 == (ushort *)0x0) {\n    DAT_20000e38 = (ushort *)get_current_block();\n    if (DAT_20000e38 == (ushort *)0x0) {\n      go_idle();\n      DAT_20000eaa = DAT_20000eaa | 4;\n    }\n    else {\n      if (DAT_20000ea9 == '\\x03') {\n        DAT_20000e30 = *(uint *)(DAT_20000e38 + 0x14);\n        set_step_events_per_minute(DAT_20000e30);\n        DAT_20000e2c = 210000;\n      }\n      DAT_20000e34 = (*(int *)(DAT_20000e38 + 0x18) >> 1) + *(int *)(DAT_20000e38 + 0x18);\n      DAT_20000e14 = -(*(int *)(DAT_20000e38 + 8) >> 1);\n      DAT_20000e20 = *(int *)(DAT_20000e38 + 8);\n      DAT_20000e24 = 0;\n      DAT_20000e18 = DAT_20000e14;\n      DAT_20000e1c = DAT_20000e14;\n    }\n  }\n  if (DAT_20000e38 != (ushort *)0x0) {\n    DAT_20000e3e = *DAT_20000e38;\n    DAT_20000e3c = 0;\n    DAT_20000e14 = *(int *)(DAT_20000e38 + 2) + DAT_20000e14;\n    if (0 < DAT_20000e14) {\n      DAT_20000e3c = 0x10;\n      DAT_20000e14 = DAT_20000e14 - DAT_20000e20;\n      if ((DAT_20000e3e & 0x20) == 0) {\n        DAT_20000eac = DAT_20000eac + 1;\n      }\n      else {\n        DAT_20000eac = DAT_20000eac + -1;\n      }\n    }\n    DAT_20000e18 = *(int *)(DAT_20000e38 + 4) + DAT_20000e18;\n    if (0 < DAT_20000e18) {\n      DAT_20000e3c = DAT_20000e3c | 0x440;\n      DAT_20000e18 = DAT_20000e18 - DAT_20000e20;\n      if ((DAT_20000e3e & 0x80) == 0) {\n        DAT_20000eb0 = DAT_20000eb0 + 1;\n      }\n      else {\n        DAT_20000eb0 = DAT_20000eb0 + -1;\n      }\n    }\n    DAT_20000e1c = *(int *)(DAT_20000e38 + 6) + DAT_20000e1c;\n    if (0 < DAT_20000e1c) {\n      DAT_20000e3c = DAT_20000e3c | 0x100;\n      DAT_20000e1c = DAT_20000e1c - DAT_20000e20;\n      if ((DAT_20000e3e & 0x200) == 0) {\n        DAT_20000eb4 = DAT_20000eb4 + 1;\n      }\n      else {\n        DAT_20000eb4 = DAT_20000eb4 + -1;\n      }\n    }\n    DAT_20000e24 = DAT_20000e24 + 1;\n    if (DAT_20000e24 < *(uint *)(DAT_20000e38 + 8)) {\n      if (DAT_20000ea9 == '\\x04') {\n        iteration_result = iterate_trapezoid_cycle_counter();\n        if (iteration_result != 0) {\n          if (*(uint *)(DAT_20000e38 + 0x18) < DAT_20000e30) {\n            DAT_20000e30 = DAT_20000e30 - *(int *)(DAT_20000e38 + 0x18);\n            set_step_events_per_minute(DAT_20000e30);\n          }\n          else {\n            go_idle();\n            DAT_20000eaa = DAT_20000eaa | 4;\n          }\n        }\n      }\n      else if (DAT_20000e24 < *(uint *)(DAT_20000e38 + 0x1a)) {\n        iteration_result = iterate_trapezoid_cycle_counter();\n        if (iteration_result != 0) {\n          DAT_20000e30 = DAT_20000e30 + *(int *)(DAT_20000e38 + 0x18);\n          if (*(uint *)(DAT_20000e38 + 0x1e) <= DAT_20000e30) {\n            DAT_20000e30 = *(uint *)(DAT_20000e38 + 0x1e);\n          }\n          set_step_events_per_minute(DAT_20000e30);\n        }\n      }\n      else if (DAT_20000e24 < *(uint *)(DAT_20000e38 + 0x1c)) {\n        if (DAT_20000e30 != *(uint *)(DAT_20000e38 + 0x1e)) {\n          DAT_20000e30 = *(uint *)(DAT_20000e38 + 0x1e);\n          set_step_events_per_minute(DAT_20000e30);\n        }\n      }\n      else if (DAT_20000e24 == *(uint *)(DAT_20000e38 + 0x1c)) {\n        if (DAT_20000e30 == *(uint *)(DAT_20000e38 + 0x1e)) {\n          DAT_20000e2c = 210000;\n        }\n        else {\n          DAT_20000e2c = 420000 - DAT_20000e2c;\n        }\n      }\n      else {\n        iteration_result = iterate_trapezoid_cycle_counter();\n        if (iteration_result != 0) {\n          if (DAT_20000e34 < DAT_20000e30) {\n            DAT_20000e30 = DAT_20000e30 - *(int *)(DAT_20000e38 + 0x18);\n          }\n          else {\n            DAT_20000e30 = DAT_20000e30 >> 1;\n          }\n          if (DAT_20000e30 < *(uint *)(DAT_20000e38 + 0x16)) {\n            DAT_20000e30 = *(uint *)(DAT_20000e38 + 0x16);\n          }\n          set_step_events_per_minute(DAT_20000e30);\n        }\n      }\n    }\n    else {\n      DAT_20000e3c = 0;\n      DAT_20000e38 = (ushort *)0x0;\n      discard_current_block();\n    }\n  }\n  DAT_20000e3c = DAT_20000e3c ^ DAT_20000ed4;\n  DAT_20000e3e = DAT_20000e3e ^ DAT_20000ed6;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080053a0": "update_step_events_080053a0",
                "iVar1": "iteration_result",
                "plan_get_current_block": "get_current_block",
                "st_go_idle": "go_idle",
                "plan_discard_current_block": "discard_current_block",
                "dirn_wr": "write_direction"
            },
            "calling": [
                "FUN_08007c7c"
            ],
            "called": [
                "FUN_08005360",
                "FUN_08005324",
                "FUN_080057e4",
                "FUN_08002f74",
                "FUN_080052dc",
                "FUN_08002f40"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080053a0": {
                    "1": "update_data_and_control",
                    "3": "process_data",
                    "7": "update_step_events",
                    "2": "update_block_data",
                    "4": "update_state"
                },
                "iVar1": {
                    "9": "iteration_result",
                    "2": "counter",
                    "1": "iterator",
                    "8": "result"
                },
                "FUN_08005360": {
                    "1": "check_block_state",
                    "3": "check_current_block",
                    "2": "check_block"
                },
                "FUN_08005324": {
                    "1": "process_trapezoid_cycle",
                    "8": "set_step_events_per_minute",
                    "2": "update_step_events_per_minute"
                },
                "FUN_080057e4": {
                    "14": "go_idle",
                    "1": "set_idle_state"
                },
                "FUN_08002f74": {
                    "11": "get_current_block",
                    "1": "allocate_memory"
                },
                "FUN_080052dc": {
                    "1": "iterate_cycle_counter",
                    "3": "set_step_events_per_minute",
                    "9": "iterate_trapezoid_cycle_counter"
                },
                "FUN_08002f40": {
                    "13": "discard_current_block",
                    "1": "plan_discard_current_block"
                },
                "plan_get_current_block": {
                    "13": "get_current_block",
                    "1": "get_current_block_plan"
                },
                "st_go_idle": {
                    "12": "go_idle",
                    "1": "idle_state"
                },
                "set_step_events_per_minute": {
                    "11": "set_step_events_per_minute",
                    "3": "set_events_per_minute"
                },
                "iterate_trapezoid_cycle_counter": {
                    "7": "iterate_trapezoid_cycle_counter",
                    "5": "iterate_cycle_counter",
                    "2": "iterate_counter"
                },
                "plan_discard_current_block": {
                    "12": "discard_current_block",
                    "1": "discard_current_block_plan"
                },
                "dirn_wr": {
                    "1": "write_dirn",
                    "9": "write_direction"
                },
                "DAT_20000e3c": {
                    "1": "num_steps_offset"
                },
                "DAT_20000e38": {
                    "1": "current_plan"
                },
                "DAT_20000e3e": {
                    "1": "current_direction"
                },
                "DAT_20000e40": {
                    "2": "previous_block"
                },
                "DAT_20000e30": {
                    "2": "step_events_per_minute"
                },
                "DAT_20000e2c": {
                    "1": "default_step_events_per_minute"
                },
                "DAT_20000e14": {
                    "1": "offset1"
                },
                "DAT_20000e20": {
                    "1": "initial_position"
                },
                "DAT_20000e24": {
                    "1": "counter"
                },
                "DAT_20000e18": {
                    "1": "offset2"
                },
                "DAT_20000e1c": {
                    "1": "offset3"
                },
                "DAT_20000ea9": {
                    "1": "current_mode"
                },
                "DAT_20000eaa": {
                    "1": "flags"
                },
                "DAT_20000eac": {
                    "1": "counter1"
                },
                "DAT_20000eb0": {
                    "1": "counter2"
                },
                "DAT_20000eb4": {
                    "1": "count3"
                },
                "DAT_20000ed4": {
                    "1": "encryption_key1"
                },
                "DAT_20000ed6": {
                    "1": "encryption_key2"
                },
                "DIRN_WR_FUN": {
                    "1": "write_direction"
                },
                "DIRN_WR_PARAM": {
                    "1": "dat_20000e3e"
                },
                "SFN": {
                    "1": "set_function_name"
                },
                "DAT_20000e34": {
                    "1": "block_size"
                },
                "0x0": {
                    "1": "null"
                },
                "0x10": {
                    "1": "flag1"
                },
                "0x20": {
                    "1": "flag2"
                },
                "0x440": {
                    "1": "flag3"
                },
                "0x80": {
                    "1": "flag4"
                },
                "0x100": {
                    "1": "flag5"
                },
                "0x200": {
                    "1": "flag6"
                },
                "DAT_20000e16": {
                    "1": "step_event_increment"
                },
                "DAT_20000e1e": {
                    "1": "max_step_events"
                },
                "210000": {
                    "1": "default_max_step_events"
                },
                "0x4": {
                    "1": "idle_flag"
                },
                "0x1a": {
                    "1": "block_size2"
                },
                "0x1c": {
                    "1": "block_size3"
                },
                "0x1e": {
                    "1": "max_step_events2"
                },
                "420000": {
                    "1": "max_step_events3"
                },
                "DAT_20000e2e": {
                    "1": "step_event_decrement"
                },
                "0x16": {
                    "1": "min_step_events"
                },
                "DIRN_WR": {
                    "1": "write_directory"
                }
            }
        },
        "FUN_08005760": {
            "entrypoint": "0x08005760",
            "current_name": "initialize_step_08005760",
            "code": "\nvoid initialize_step_08005760(void)\n\n{\n  step_wr(DAT_20000ed4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005760": "initialize_step_08005760"
            },
            "calling": [
                "FUN_08007c7c"
            ],
            "called": [
                "FUN_080052ac"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08005760": {
                    "2": "perform_initialization",
                    "1": "execute_init_function",
                    "4": "execute_step",
                    "3": "execute_step_wr",
                    "8": "initialize_step"
                },
                "param_1": {
                    "4": "input_parameter",
                    "1": "operation_code",
                    "2": "parameter",
                    "3": "input_data",
                    "9": "input_param"
                },
                "FUN_080052ac": {
                    "4": "perform_operation",
                    "6": "perform_action",
                    "1": "perform_sub_operation",
                    "3": "process_data"
                }
            }
        },
        "FUN_08005778": {
            "entrypoint": "0x08005778",
            "current_name": "initialize_step_08005778",
            "code": "\nvoid initialize_step_08005778(void)\n\n{\n  step_wr(DAT_20000e40);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005778": "initialize_step_08005778"
            },
            "calling": [
                "FUN_08007c7c"
            ],
            "called": [
                "FUN_080052ac"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08005778": {
                    "2": "execute_step_wr",
                    "1": "perform_initialization",
                    "3": "initialize_data",
                    "10": "initialize_step"
                },
                "param_1": {
                    "1": "input_data",
                    "3": "param",
                    "2": "input_param"
                },
                "FUN_080052ac": {
                    "2": "perform_operation",
                    "6": "perform_action",
                    "1": "execute_fun_080052ac_function",
                    "5": "process_data"
                }
            }
        },
        "FUN_08005790": {
            "entrypoint": "0x08005790",
            "current_name": "initialize_stepper_motor_08005790",
            "code": "\nvoid initialize_stepper_motor_08005790(void)\n\n{\n  stepper_motor_enable();\n  if (DAT_20000ea9 == '\\x03') {\n    DAT_20000e3c = DAT_20000ed4;\n    DAT_20000e3e = DAT_20000ed6;\n    set_pulse_delay(0x69);\n    set_pulse_time((DAT_20000ec9 + 5) * 0x15);\n    enable_step_isr();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005790": "initialize_stepper_motor_08005790",
                "set_step_pulse_delay": "set_pulse_delay",
                "set_step_pulse_time": "set_pulse_time",
                "step_isr_enable": "enable_step_isr"
            },
            "calling": [
                "FUN_0800585c",
                "FUN_08001d4c",
                "FUN_0800583c"
            ],
            "called": [
                "FUN_08005318",
                "FUN_08007c5e",
                "FUN_08007c40",
                "FUN_08007b70"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08005790": {
                    "1": "initialize_stepper",
                    "8": "enable_stepper_motor",
                    "20": "initialize_stepper_motor"
                },
                "DAT_20000ea9": {
                    "1": "step_mode"
                },
                "DAT_20000e3c": {
                    "1": "step_delay"
                },
                "DAT_20000ed4": {
                    "1": "default_step_delay"
                },
                "DAT_20000e3e": {
                    "1": "new_value2"
                },
                "DAT_20000ed6": {
                    "1": "value2"
                },
                "set_step_pulse_delay": {
                    "1": "set_initial_step_delay"
                },
                "set_step_pulse_time": {
                    "1": "set_pulse_time"
                },
                "DAT_20000ec9": {
                    "1": "value3"
                },
                "step_isr_enable": {
                    "1": "enable_interrupt_service_routine",
                    "3": "enable_step_isr"
                },
                "FUNC_08005318": {
                    "1": "_func_08005318",
                    "4": "initialize",
                    "2": "initialize_stepper_motor",
                    "9": "disable_stepper_motor"
                },
                "FUN_08007c5e": {
                    "1": "set_stepper_motor_pulse_delay",
                    "5": "set_pulse_delay",
                    "14": "set_step_pulse_delay"
                },
                "FUN_08007c40": {
                    "1": "update_step_pulse_time",
                    "14": "set_step_pulse_time",
                    "5": "set_pulse_time"
                },
                "FUN_08007b70": {
                    "1": "perform_action_c",
                    "2": "step_isr_enable",
                    "22": "enable_step_isr"
                },
                "FUN_08005318": {
                    "1": "initialize_stepper_motor",
                    "2": "disable_stepper_motor"
                },
                "param_1": {
                    "1": "input_param"
                },
                "0x69": {
                    "1": "delay_value"
                },
                "(DAT_20000ec9 + 5) * 0x15": {
                    "1": "pulse_time"
                }
            }
        },
        "FUN_080057e4": {
            "entrypoint": "0x080057e4",
            "current_name": "disable_stepper_motor_if_needed_080057e4",
            "code": "\nvoid disable_stepper_motor_if_needed_080057e4(void)\n\n{\n  step_isr_disable();\n  if ((DAT_20000ef8 != -1) || ((DAT_20000eaa & 0x20) != 0)) {\n    stepper_motor_disable();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080057e4": "disable_stepper_motor_if_needed_080057e4"
            },
            "calling": [
                "FUN_080025e8",
                "FUN_08001d4c",
                "FUN_080053a0",
                "FUN_0800583c"
            ],
            "called": [
                "FUN_0800530c",
                "FUN_08007bc2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080057e4": {
                    "2": "disable_stepper_motor_when_not_needed",
                    "1": "disable_stepper_motor_if_required",
                    "13": "disable_stepper_motor_if_needed",
                    "8": "disable_stepper_motor"
                },
                "FUNC_0800530c": {
                    "3": "",
                    "1": "disable_interrupt",
                    "4": "disable_step_isr",
                    "22": "step_isr_disable"
                },
                "FUN_08007bc2": {
                    "3": "",
                    "1": "unused_function",
                    "22": "stepper_motor_disable",
                    "2": "disable_stepper_motor"
                },
                "step_isr_disable": {
                    "2": "",
                    "1": "disable_step_isr"
                },
                "stepper_motor_disable": {
                    "2": "",
                    "1": "disable_stepper_motor"
                },
                "DAT_20000ef8": {
                    "1": "variable_condition_1"
                },
                "DAT_20000eaa": {
                    "1": "variable_condition_2"
                }
            }
        },
        "FUN_08005814": {
            "entrypoint": "0x08005814",
            "current_name": "initialize_game_data_08005814",
            "code": "\nvoid initialize_game_data_08005814(void)\n\n{\n  clear_memory(&DAT_20000e14,0,0x24);\n  set_step_events_per_minute(800);\n  DAT_20000e38 = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005814": "initialize_game_data_08005814",
                "memset": "clear_memory"
            },
            "calling": [
                "FUN_08001ddc"
            ],
            "called": [
                "FUN_08005324",
                "FUN_0800b430"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08005814": {
                    "6": "initialize_step_events",
                    "1": "initialize_settings",
                    "11": "initialize_game_data",
                    "2": "initialize_game",
                    "9": "initialize_data"
                },
                "set_step_events_per_minute": {
                    "1": "set_event_rate",
                    "4": "set_step_events_per_minute"
                },
                "FUN_08005324": {
                    "1": "initialize_memory",
                    "2": "set_step_events",
                    "5": "process_event",
                    "9": "set_step_events_per_minute"
                },
                "FUN_0800b430": {
                    "1": "process_event_data",
                    "7": "process_data",
                    "6": "update_data"
                },
                "param_1": {
                    "2": "event_count",
                    "1": "step_rate",
                    "4": "value"
                },
                "param_2": {
                    "5": "flag",
                    "2": "param2",
                    "1": "param_2"
                },
                "param_3": {
                    "1": "events_per_minute",
                    "3": "count",
                    "2": "event_value"
                },
                "DAT_20000e14": {
                    "1": "player_data"
                },
                "DAT_20000e38": {
                    "1": "step_event_flag"
                },
                "memset": {
                    "2": "clear_memory"
                }
            }
        },
        "FUN_0800583c": {
            "entrypoint": "0x0800583c",
            "current_name": "initialize_system_0800583c",
            "code": "\nvoid initialize_system_0800583c(void)\n\n{\n  write_device_step(DAT_20000ed4);\n  wake_device();\n  idle_device();\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800583c": "initialize_system_0800583c",
                "step_wr": "write_device_step",
                "st_wake_up": "wake_device",
                "st_go_idle": "idle_device"
            },
            "calling": [
                "FUN_08001ddc"
            ],
            "called": [
                "FUN_08005790",
                "FUN_080057e4",
                "FUN_080052ac"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800583c": {
                    "1": "perform_sequence",
                    "3": "process_data",
                    "8": "initialize_system",
                    "4": "perform_initialization"
                },
                "FUN_08005790": {
                    "1": "initialize_device",
                    "2": "perform_initialization",
                    "5": "initialize_step"
                },
                "FUN_080057e4": {
                    "14": "wake_up_system",
                    "3": "wake_up",
                    "1": "st_wake_up"
                },
                "FUN_080052ac": {
                    "1": "execute_specific_function",
                    "2": "set_parameter_value",
                    "3": "perform_go_idle"
                },
                "param_1": {
                    "1": "param",
                    "2": "input_param"
                },
                "DAT_20000ed4": {
                    "2": "data",
                    "1": "data_param"
                },
                "step_wr": {
                    "1": "write_device_step"
                },
                "st_wake_up": {
                    "1": "wake_device"
                },
                "st_go_idle": {
                    "1": "idle_device"
                }
            }
        },
        "FUN_0800585c": {
            "entrypoint": "0x0800585c",
            "current_name": "update_status_and_wake_up_0800585c",
            "code": "\nvoid update_status_and_wake_up_0800585c(void)\n\n{\n  if (DAT_20000ea9 == '\\x02') {\n    DAT_20000ea9 = '\\x03';\n    wake_up();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800585c": "update_status_and_wake_up_0800585c",
                "st_wake_up": "wake_up"
            },
            "calling": [
                "FUN_08003a74",
                "FUN_080024c4",
                "FUN_08001e98"
            ],
            "called": [
                "FUN_08005790"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800585c": {
                    "1": "wake_up_and_set_status",
                    "7": "update_status_and_wake_up",
                    "3": "check_and_wake_up",
                    "2": "update_status_and_wake",
                    "4": "check_and_wake"
                },
                "FUN_08005790": {
                    "1": "perform_some_operation",
                    "2": "perform_initialization",
                    "3": "perform_wake_up"
                },
                "DAT_20000ea9": {
                    "1": "state",
                    "7": "status"
                },
                "st_wake_up": {
                    "1": "notify_wake_up",
                    "5": "wake_up"
                }
            }
        },
        "FUN_0800587c": {
            "entrypoint": "0x0800587c",
            "current_name": "update_status_0800587c",
            "code": "\nvoid update_status_0800587c(void)\n\n{\n  if (DAT_20000ea9 == '\\x03') {\n    DAT_20000ea9 = '\\x04';\n    DAT_20000eb8 = 0;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800587c": "update_status_0800587c"
            },
            "calling": [
                "FUN_08003a74"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800587c": {
                    "1": "update_dat_variable",
                    "4": "update_data_status",
                    "17": "update_status",
                    "2": "update_data"
                },
                "": {
                    "4": ""
                },
                "DAT_20000ea9": {
                    "3": "status_flag",
                    "1": "current_value",
                    "6": "current_status",
                    "11": "status"
                },
                "DAT_20000eb8": {
                    "1": "error_counter",
                    "20": "counter"
                },
                "statusVariable": {
                    "1": "current_status"
                },
                "<original_function_name>": {
                    "1": "update_status"
                }
            }
        },
        "FUN_080058a0": {
            "entrypoint": "0x080058a0",
            "current_name": "initialize_plan_cycle_080058a0",
            "code": "\nvoid initialize_plan_cycle_080058a0(void)\n\n{\n  if (DAT_20000e38 == 0) {\n    DAT_20000ea9 = 0;\n  }\n  else {\n    reinitialize_plan_cycle_080058a0(*(int *)(DAT_20000e38 + 0x10) - DAT_20000e24);\n    DAT_20000e30 = 0;\n    set_step_events(0);\n    DAT_20000e2c = 210000;\n    DAT_20000e24 = 0;\n    DAT_20000ea9 = 2;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080058a0": "initialize_plan_cycle_080058a0",
                "plan_cycle_reinitialize": "reinitialize_plan_cycle",
                "set_step_events_per_minute": "set_step_events"
            },
            "calling": [
                "FUN_08003a74"
            ],
            "called": [
                "FUN_08003618",
                "FUN_08005324"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080058a0": {
                    "24": "initialize_plan_cycle",
                    "5": "initialize_cycle",
                    "2": "initialize_cycle_plan"
                },
                "FUN_08003618": {
                    "1": "initialize_step",
                    "4": "plan_cycle_reinitialize",
                    "3": "reinitialize_cycle_plan",
                    "8": "reinitialize_plan_cycle"
                },
                "FUN_08005324": {
                    "23": "set_step_events_per_minute",
                    "1": "function_abc",
                    "2": "set_events_per_minute"
                },
                "param_1": {
                    "1": "unknown_param",
                    "2": "param_1",
                    "3": "unused_param",
                    "5": "param"
                },
                "DAT_20000e38": {
                    "1": "plan_cycle_data_ptr",
                    "2": "cycle_data",
                    "7": "data_ptr"
                },
                "DAT_20000ea9": {
                    "5": "status",
                    "1": "data_variable2",
                    "2": "status_flag"
                },
                "DAT_20000e30": {
                    "1": "cycle_flag",
                    "2": "counter",
                    "3": "step_events"
                },
                "DAT_20000e2c": {
                    "1": "step_events",
                    "2": "step_duration"
                },
                "DAT_20000e24": {
                    "4": "initial_offset",
                    "1": "offset_value",
                    "2": "offset"
                },
                "plan_cycle_reinitialize": {
                    "1": "reinitialize_plan_cycle"
                },
                "set_step_events_per_minute": {
                    "1": "set_events_per_minute"
                },
                "210000": {
                    "1": "default_step_events_per_minute"
                },
                "PTR_cycle_data + 0x10": {
                    "1": "cycle_offset"
                },
                "DATABLOCK_20000e30": {
                    "1": "step_events"
                },
                "DATABLOCK_20000e2c": {
                    "1": "max_step_events"
                },
                "PTR__param_1": {
                    "1": "param_1"
                },
                "PTR__param_2": {
                    "1": "param_2"
                },
                "fun_08005324": {
                    "1": "set_step_events_per_minute"
                }
            }
        },
        "FUN_08005900": {
            "entrypoint": "0x08005900",
            "current_name": "process_byte_08005900",
            "code": "\nundefined4 process_byte_08005900(byte byte_value)\n\n{\n  if (byte_value == 0x7e) {\n    DAT_20000eaa = DAT_20000eaa | 2;\n    return 1;\n  }\n  if (byte_value < 0x7f) {\n    if (byte_value == 0x3f) {\n      DAT_20000eaa = DAT_20000eaa | 1;\n      return 1;\n    }\n    if (byte_value < 0x40) {\n      if (byte_value == 0x18) {\n        reset_machine();\n        return 1;\n      }\n      if (byte_value == 0x21) {\n        DAT_20000eaa = DAT_20000eaa | 8;\n        return 1;\n      }\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08005900": "process_byte_08005900",
                "param_1": "byte_value",
                "mc_reset": "reset_machine"
            },
            "calling": [
                "FUN_08008286"
            ],
            "called": [
                "FUN_080025e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08005900": {
                    "1": "handle_byte",
                    "23": "process_byte"
                },
                "param_1": {
                    "1": "input_value",
                    "6": "input_byte",
                    "22": "byte_value"
                },
                "mc_reset": {
                    "2": "reset_mc",
                    "3": "reset_machine"
                },
                "FUN_080025e8": {
                    "1": "mc_reset"
                },
                "DAT_20000eaa": {
                    "2": "flags"
                },
                "0x7e": {
                    "1": "mask_flag_1"
                },
                "0x3f": {
                    "1": "mask_flag_2"
                },
                "0x40": {
                    "1": "mask_flag_3"
                },
                "0x18": {
                    "1": "reset_value"
                },
                "0x21": {
                    "1": "mask_flag_4"
                }
            }
        },
        "FUN_0800597c": {
            "entrypoint": "0x0800597c",
            "current_name": "execute_software_interrupt_0800597c",
            "code": "\nvoid execute_software_interrupt_0800597c(void)\n\n{\n  trigger_interrupt(0x3f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800597c": "execute_software_interrupt_0800597c",
                "software_interrupt": "trigger_interrupt"
            },
            "calling": [
                "FUN_08005984"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800597c": {
                    "5": "execute_system_call",
                    "8": "execute_software_interrupt",
                    "2": "send_software_interrupt",
                    "1": "perform_interrupt",
                    "4": "invoke_system_interrupt"
                },
                "arg1": {
                    "1": "interrupt_code"
                },
                "software_interrupt": {
                    "5": "trigger_interrupt",
                    "1": "interrupt_handler",
                    "3": "invoke_system_call",
                    "4": "invoke_interrupt"
                },
                "original_variable_name_1": {
                    "1": "var1"
                },
                "PTR_0800597c_param_1": {
                    "1": "param1"
                },
                "DAT_0800597c_param_2": {
                    "1": "param2"
                },
                "PTR_undefined": {
                    "1": "ptr_undefined"
                }
            }
        },
        "FUN_08005984": {
            "entrypoint": "0x08005984",
            "current_name": "execute_afl_call_08005984",
            "code": "\nundefined4 execute_afl_call_08005984(undefined4 input)\n\n{\n  undefined4 result;\n  \n  if (DAT_20000e44 == 0) {\n    result = afl_function(1,input,0);\n  }\n  else {\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08005984": "execute_afl_call_08005984",
                "param_1": "input",
                "uVar1": "result",
                "aflCall": "afl_function"
            },
            "calling": [
                "FUN_08007540"
            ],
            "called": [
                "FUN_0800597c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08005984": {
                    "2": "afl_call_wrapper",
                    "1": "execute_or_zero_result",
                    "3": "execute_function",
                    "9": "execute_afl_call"
                },
                "param_1": {
                    "12": "input",
                    "2": "input_data",
                    "1": "param",
                    "3": "input_value",
                    "7": "input_param"
                },
                "uVar1": {
                    "24": "result",
                    "7": "return_value"
                },
                "DAT_20000e44": {
                    "1": "flag"
                },
                "FUN_0800597c": {
                    "1": "initialize"
                },
                "aflCall": {
                    "1": "afl_function"
                }
            }
        },
        "FUN_080059b4": {
            "entrypoint": "0x080059b4",
            "current_name": "initialize_system_080059b4",
            "code": "\n\n\nundefined4 initialize_system_080059b4(void)\n\n{\n  _DAT_40023c00 = _DAT_40023c00 | 0x700;\n  configure_sys_tick(16000);\n  set_priority_grouping(3);\n  initialize_msp();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080059b4": "initialize_system_080059b4",
                "HAL_SYSTICK_Config": "configure_sys_tick",
                "HAL_NVIC_SetPriorityGrouping": "set_priority_grouping",
                "HAL_MspInit": "initialize_msp"
            },
            "calling": [
                "FUN_08007540"
            ],
            "called": [
                "FUN_08006ce0",
                "FUN_08006d72",
                "FUN_08005a50"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080059b4": {
                    "30": "initialize_system",
                    "1": "initialize"
                },
                "param_1": {
                    "1": "arg",
                    "3": "unused_parameter",
                    "2": "parameter",
                    "5": "param"
                },
                "FUN_08006ce0": {
                    "1": "process_func1",
                    "2": "configure_system",
                    "3": "initialize_subsystem"
                },
                "FUN_08006d72": {
                    "2": "initialize_function2",
                    "1": "subfunction_parameter",
                    "3": "configure_interrupt"
                },
                "FUNC_08005a50": {
                    "1": "perform_operation",
                    "3": "initialize_peripherals",
                    "4": "initialize_peripheral",
                    "2": "perform_additional_setup"
                },
                "HAL_SYSTICK_Config": {
                    "1": "configure_system_tick",
                    "10": "configure_sys_tick",
                    "3": "configure_systick"
                },
                "HAL_NVIC_SetPriorityGrouping": {
                    "13": "set_priority_grouping",
                    "1": "set_priority_group"
                },
                "HAL_MspInit": {
                    "13": "initialize_msp",
                    "1": "initialize_peripheral"
                },
                "param_1(FUN_08006ce0)": {
                    "1": "parameter1"
                },
                "param_1(FUN_08006d72)": {
                    "1": "parameter1"
                },
                "_DAT_40023c00": {
                    "1": "system_configuration",
                    "2": "system_config"
                },
                "DAT_40023c00": {
                    "1": "system_configuration"
                }
            }
        },
        "FUN_080059f8": {
            "entrypoint": "0x080059f8",
            "current_name": "reset_hardware_080059f8",
            "code": "\n\n\nundefined4 reset_hardware_080059f8(void)\n\n{\n  _DAT_40023820 = 0;\n  _DAT_40023824 = 0;\n  _DAT_40023810 = 0;\n  _DAT_40023814 = 0;\n  _DAT_40023818 = 0;\n  deinitialize_hal();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080059f8": "reset_hardware_080059f8",
                "HAL_MspDeInit": "deinitialize_hal"
            },
            "calling": [],
            "called": [
                "FUN_08005a5c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080059f8": {
                    "1": "reset_hal_state",
                    "2": "deinitialize_peripherals",
                    "7": "reset_hardware",
                    "4": "deinitialize_hal"
                },
                "HAL_MspDeInit": {
                    "1": "hardware_specific_de_init",
                    "12": "deinitialize_hal",
                    "2": "deinitialize_hal_subfunction",
                    "4": "deinitialize_hardware"
                },
                "_DAT_40023820": {
                    "4": "counter1",
                    "1": "device_config_param1",
                    "3": "var1",
                    "2": "data_1"
                },
                "_DAT_40023824": {
                    "4": "counter2",
                    "1": "register2",
                    "3": "var2",
                    "2": "variable2"
                },
                "_DAT_40023810": {
                    "3": "var3",
                    "1": "variable1",
                    "2": "variable3"
                },
                "_DAT_40023814": {
                    "1": "flag2",
                    "3": "var4",
                    "2": "variable4"
                },
                "_DAT_40023818": {
                    "1": "variable3",
                    "2": "data_5",
                    "3": "var5"
                },
                "FUNC_08005a5c": {
                    "1": "reset_subsystem_state"
                }
            }
        },
        "FUN_08005a50": {
            "entrypoint": "0x08005a50",
            "current_name": "FUNC_08005a50",
            "code": "\nvoid FUNC_08005a50(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005a50": "FUNC_08005a50"
            },
            "calling": [
                "FUN_080059b4"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005a5c": {
            "entrypoint": "0x08005a5c",
            "current_name": "FUNC_08005a5c",
            "code": "\nvoid FUNC_08005a5c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005a5c": "FUNC_08005a5c"
            },
            "calling": [
                "FUN_080059f8"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005a68": {
            "entrypoint": "0x08005a68",
            "current_name": "increment_counter_08005a68",
            "code": "\nvoid increment_counter_08005a68(void)\n\n{\n  DAT_20000e48 = DAT_20000e48 + 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005a68": "increment_counter_08005a68"
            },
            "calling": [
                "FUN_08007756"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08005a68": {
                    "1": "increment_dat_20000e48",
                    "22": "increment_counter",
                    "5": "increment_data_counter"
                },
                "DAT_20000e48": {
                    "6": "data_counter",
                    "23": "counter",
                    "1": "data_count"
                }
            }
        },
        "FUN_08005a84": {
            "entrypoint": "0x08005a84",
            "current_name": "get_data_08005a84",
            "code": "\nundefined4 get_data_08005a84(void)\n\n{\n  return DAT_20000e48;\n}\n\n",
            "renaming": {
                "FUN_08005a84": "get_data_08005a84"
            },
            "calling": [
                "FUN_08005a98",
                "FUN_0800618c",
                "FUN_08000268",
                "FUN_08007756",
                "FUN_08005cec"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08005a84": {
                    "2": "get_dat_value",
                    "1": "get_config_value",
                    "4": "get_global_variable",
                    "6": "get_data_value",
                    "13": "get_data"
                },
                "DAT_20000e48": {
                    "11": "data",
                    "2": "data_from_memory",
                    "1": "global_variable_value"
                }
            }
        },
        "FUN_08005a98": {
            "entrypoint": "0x08005a98",
            "current_name": "delay_function_08005a98",
            "code": "\nvoid delay_function_08005a98(int milliseconds)\n\n{\n  int start_time;\n  uint current_time;\n  \n  start_time = HAL_GetTick();\n  do {\n    current_time = HAL_GetTick();\n  } while (current_time < (uint)(milliseconds + start_time));\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005a98": "delay_function_08005a98",
                "param_1": "milliseconds",
                "iVar1": "start_time",
                "uVar2": "current_time"
            },
            "calling": [
                "FUN_080002a0"
            ],
            "called": [
                "FUN_08005a84"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08005a98": {
                    "1": "delay_for_duration",
                    "3": "wait_until_time",
                    "12": "delay_function",
                    "9": "delay_milliseconds"
                },
                "param_1": {
                    "1": "elapsed_time",
                    "10": "delay_time",
                    "11": "milliseconds",
                    "3": "delay_duration",
                    "2": "target_time"
                },
                "iVar1": {
                    "3": "initial_tick",
                    "19": "start_time",
                    "1": "current_tick_count",
                    "2": "start_ticks"
                },
                "uVar2": {
                    "2": "current_ticks",
                    "6": "current_tick",
                    "1": "current_timestamp",
                    "19": "current_time"
                }
            }
        },
        "FUN_08005bdc": {
            "entrypoint": "0x08005bdc",
            "current_name": "write_byte_to_memory_08005bdc",
            "code": "\nvoid write_byte_to_memory_08005bdc(byte address,uint data)\n\n{\n  if (converted_byte_value < '\\0') {\n    *(char *)((address & 0xf) + 0xe000ed14) = (char)((data & 0xff) << 4);\n  }\n  else {\n    *(char *)(converted_byte_value + -0x1fff1c00) = (char)((data & 0xff) << 4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005bdc": "write_byte_to_memory_08005bdc",
                "param_1": "address",
                "param_2": "data",
                "(char)param_1": "converted_byte_value"
            },
            "calling": [
                "FUN_08005c30"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08005bdc": {
                    "1": "store_byte_in_memory",
                    "2": "store_byte",
                    "3": "store_data",
                    "6": "write_byte_to_memory"
                },
                "param_1": {
                    "10": "address",
                    "1": "input_param",
                    "2": "index",
                    "7": "input_byte",
                    "4": "byte_value"
                },
                "param_2": {
                    "11": "data",
                    "1": "data_value",
                    "9": "value",
                    "4": "value_to_store"
                },
                "*(char *)...": {
                    "1": "memory_location"
                },
                "(char)param_1": {
                    "1": "signed_input"
                },
                "(char)param_1 + -0x1fff1c00": {
                    "1": "negative_memory_location"
                },
                "(param_2 & 0xff) << 4": {
                    "1": "shifted_value"
                },
                "(param_1 & 0xf) + 0xe000ed14": {
                    "1": "address2"
                },
                "param_1 & 0xf": {
                    "1": "memory_offset"
                },
                "(char)param_1 < '\\0'": {
                    "1": "is_negative"
                },
                "param_2 & 0xff": {
                    "2": "masked_data",
                    "1": "masked_value"
                },
                "0xe000ed14": {
                    "1": "base_address"
                },
                "(char)((param_2 & 0xff) << 4)": {
                    "1": "shifted_value"
                },
                "(char *)((param_1 & 0xf) + 0xe000ed14)": {
                    "1": "address_with_mask"
                },
                "param_3": {
                    "1": "new_parameter_name3"
                },
                "param_4": {
                    "1": "new_parameter_name_4"
                },
                "param_n": {
                    "1": "new_parameter_name_n"
                },
                "var_1": {
                    "1": "address1"
                },
                "var_2": {
                    "1": "offset1"
                },
                "var_n": {
                    "1": "variable_name_n"
                },
                "0x1fff1c00": {
                    "1": "memory_address2"
                },
                "*(char *)((param_1 & 0xf) + 0xe000ed14)": {
                    "1": "store_value_at_location"
                },
                "*(char *)((char)param_1 + -0x1fff1c00)": {
                    "1": "store_value_at_offset"
                },
                "param_5": {
                    "1": "new_parameter_name_5"
                },
                "param_6": {
                    "1": "new_parameter_name_6"
                },
                "param_7": {
                    "1": "new_parameter_name_7"
                },
                "param_8": {
                    "1": "new_parameter_name_8"
                },
                "param_9": {
                    "1": "new_parameter_name_9"
                },
                "param_10": {
                    "1": "new_parameter_name_10"
                },
                "param_11": {
                    "1": "new_parameter_name_11"
                },
                "param_12": {
                    "1": "new_parameter_name_12"
                },
                "param_13": {
                    "1": "new_parameter_name_13"
                },
                "param_14": {
                    "1": "new_parameter_name_14"
                },
                "param_15": {
                    "1": "new_parameter_name_15"
                },
                "param_16": {
                    "1": "new_parameter_name_16"
                },
                "param_17": {
                    "1": "new_parameter_name_17"
                },
                "param_18": {
                    "1": "new_parameter_name_18"
                },
                "param_19": {
                    "1": "new_parameter_name_19"
                },
                "param_20": {
                    "1": "new_parameter_name_20"
                },
                "param_21": {
                    "1": "new_parameter_name_21"
                },
                "param_22": {
                    "1": "new_parameter_name_22"
                },
                "param_23": {
                    "1": "new_parameter_name_23"
                },
                "param_24": {
                    "1": "new_parameter_name_24"
                },
                "param_25": {
                    "1": "new_parameter_name_25"
                },
                "param_26": {
                    "1": "new_parameter_name_26"
                },
                "param_27": {
                    "1": "new_parameter_name_27"
                },
                "param_28": {
                    "1": "new_parameter_name_28"
                },
                "param_29": {
                    "1": "new_parameter_name_29"
                },
                "param_30": {
                    "1": "new_parameter_name_30"
                },
                "param_31": {
                    "1": "new_parameter_name_31"
                },
                "param_32": {
                    "1": "new_parameter_name_32"
                },
                "param_33": {
                    "1": "new_parameter_name_33"
                },
                "param_34": {
                    "1": "new_parameter_name_34"
                },
                "param_35": {
                    "1": "new_parameter_name_35"
                },
                "param_36": {
                    "1": "new_parameter_name_36"
                },
                "param_37": {
                    "1": "new_parameter_name_37"
                },
                "param_38": {
                    "1": "new_parameter_name_38"
                },
                "param_39": {
                    "1": "new_parameter_name_39"
                },
                "param_40": {
                    "1": "new_parameter_name_40"
                },
                "param_41": {
                    "1": "new_parameter_name_41"
                },
                "param_42": {
                    "1": "new_parameter_name_42"
                },
                "param_43": {
                    "1": "new_parameter_name_43"
                },
                "param_44": {
                    "1": "new_parameter_name_44"
                },
                "param_45": {
                    "1": "new_parameter_name_45"
                },
                "param_46": {
                    "1": "new_parameter_name_46"
                },
                "param_47": {
                    "1": "new_parameter_name_47"
                },
                "param_48": {
                    "1": "new_parameter_name_48"
                },
                "param_49": {
                    "1": "new_parameter_name_49"
                },
                "param_50": {
                    "1": "new_parameter_name_50"
                },
                "param_51": {
                    "1": "new_parameter_name_51"
                },
                "param_52": {
                    "1": "new_parameter_name_52"
                },
                "param_53": {
                    "1": "new_parameter_name_53"
                },
                "param_54": {
                    "1": "new_parameter_name_54"
                },
                "param_55": {
                    "1": "new_parameter_name_55"
                },
                "param_56": {
                    "1": "new_parameter_name_56"
                },
                "param_57": {
                    "1": "new_parameter_name_57"
                },
                "param_58": {
                    "1": "new_parameter_name_58"
                },
                "param_59": {
                    "1": "new_parameter_name_59"
                },
                "param_60": {
                    "1": "new_parameter_name_60"
                },
                "param_61": {
                    "1": "new_parameter_name_61"
                },
                "param_62": {
                    "1": "new_parameter_name_62"
                },
                "param_63": {
                    "1": "new_parameter_name_63"
                },
                "param_64": {
                    "1": "new_parameter_name_64"
                },
                "param_65": {
                    "1": "new_parameter_name_65"
                },
                "param_66": {
                    "1": "new_parameter_name_66"
                },
                "param_67": {
                    "1": "new_parameter_name_67"
                },
                "param_68": {
                    "1": "new_parameter_name_68"
                },
                "param_69": {
                    "1": "new_parameter_name_69"
                },
                "param_70": {
                    "1": "new_parameter_name_70"
                },
                "param_71": {
                    "1": "new_parameter_name_71"
                },
                "param_72": {
                    "1": "new_parameter_name_72"
                },
                "param_73": {
                    "1": "new_parameter_name_73"
                },
                "param_74": {
                    "1": "new_parameter_name_74"
                },
                "param_75": {
                    "1": "new_parameter_name_75"
                },
                "param_76": {
                    "1": "new_parameter_name_76"
                },
                "param_77": {
                    "1": "new_parameter_name_77"
                },
                "param_78": {
                    "1": "new_parameter_name_78"
                },
                "param_79": {
                    "1": "new_parameter_name_79"
                },
                "param_80": {
                    "1": "new_parameter_name_80"
                },
                "param_81": {
                    "1": "new_parameter_name_81"
                },
                "param_82": {
                    "1": "new_parameter_name_82"
                },
                "param_83": {
                    "1": "new_parameter_name_83"
                },
                "param_84": {
                    "1": "new_parameter_name_84"
                },
                "param_85": {
                    "1": "new_parameter_name_85"
                },
                "param_86": {
                    "1": "new_parameter_name_86"
                },
                "param_87": {
                    "1": "new_parameter_name_87"
                },
                "param_88": {
                    "1": "new_parameter_name_88"
                },
                "param_89": {
                    "1": "new_parameter_name_89"
                },
                "param_90": {
                    "1": "new_parameter_name_90"
                },
                "param_91": {
                    "1": "new_parameter_name_91"
                },
                "param_92": {
                    "1": "new_parameter_name_92"
                },
                "param_93": {
                    "1": "new_parameter_name_93"
                },
                "param_94": {
                    "1": "new_parameter_name_94"
                },
                "param_95": {
                    "1": "new_parameter_name_95"
                },
                "param_96": {
                    "1": "new_parameter_name_96"
                },
                "param_97": {
                    "1": "new_parameter_name_97"
                },
                "param_98": {
                    "1": "new_parameter_name_98"
                },
                "param_99": {
                    "1": "new_parameter_name_99"
                },
                "param_100": {
                    "1": "new_parameter_name_100"
                },
                "param_101": {
                    "1": "new_parameter_name_101"
                },
                "param_102": {
                    "1": "new_parameter_name_102"
                },
                "param_103": {
                    "1": "new_parameter_name_103"
                },
                "param_104": {
                    "1": "new_parameter_name_104"
                },
                "param_105": {
                    "1": "new_parameter_name_105"
                },
                "param_106": {
                    "1": "new_parameter_name_106"
                },
                "param_107": {
                    "1": "new_parameter_name_107"
                },
                "param_108": {
                    "1": "new_parameter_name_108"
                },
                "param_109": {
                    "1": "new_parameter_name_109"
                },
                "param_110": {
                    "1": "new_parameter_name_110"
                },
                "param_111": {
                    "1": "new_parameter_name_111"
                },
                "param_112": {
                    "1": "new_parameter_name_112"
                },
                "param_113": {
                    "1": "new_parameter_name_113"
                },
                "param_114": {
                    "1": "new_parameter_name_114"
                },
                "param_115": {
                    "1": "new_parameter_name_115"
                },
                "param_116": {
                    "1": "new_parameter_name_116"
                },
                "param_117": {
                    "1": "new_parameter_name_117"
                },
                "param_118": {
                    "1": "new_parameter_name_118"
                },
                "param_119": {
                    "1": "new_parameter_name_119"
                },
                "param_120": {
                    "1": "new_parameter_name_120"
                },
                "param_121": {
                    "1": "new_parameter_name_121"
                },
                "param_122": {
                    "1": "new_parameter_name_122"
                },
                "param_123": {
                    "1": "new_parameter_name_123"
                },
                "param_124": {
                    "1": "new_parameter_name_124"
                },
                "param_125": {
                    "1": "new_parameter_name_125"
                },
                "param_126": {
                    "1": "new_parameter_name_126"
                },
                "param_127": {
                    "1": "new_parameter_name_127"
                },
                "param_128": {
                    "1": "new_parameter_name_128"
                },
                "param_129": {
                    "1": "new_parameter_name_129"
                },
                "param_130": {
                    "1": "new_parameter_name_130"
                },
                "param_131": {
                    "1": "new_parameter_name_131"
                },
                "param_132": {
                    "1": "new_parameter_name_132"
                },
                "param_133": {
                    "1": "new_parameter_name_133"
                },
                "param_134": {
                    "1": "new_parameter_name_134"
                },
                "param_135": {
                    "1": "new_parameter_name_135"
                },
                "param_136": {
                    "1": "new_parameter_name_136"
                },
                "param_137": {
                    "1": "new_parameter_name_137"
                },
                "param_138": {
                    "1": "new_parameter_name_138"
                },
                "param_139": {
                    "1": "new_parameter_name_139"
                },
                "param_140": {
                    "1": "new_parameter_name_140"
                },
                "param_141": {
                    "1": "new_parameter_name_141"
                },
                "param_142": {
                    "1": "new_parameter_name_142"
                },
                "param_143": {
                    "1": "new_parameter_name_143"
                },
                "param_144": {
                    "1": "new_parameter_name_144"
                },
                "param_145": {
                    "1": "new_parameter_name_145"
                },
                "param_146": {
                    "1": "new_parameter_name_146"
                },
                "param_147": {
                    "1": "new_parameter_name_147"
                },
                "param_148": {
                    "1": "new_parameter_name_148"
                },
                "param_149": {
                    "1": "new_parameter_name_149"
                },
                "param_150": {
                    "1": "new_parameter_name_150"
                },
                "param_151": {
                    "1": "new_parameter_name_151"
                },
                "param_152": {
                    "1": "new_parameter_name_152"
                },
                "param_153": {
                    "1": "new_parameter_name_153"
                },
                "param_154": {
                    "1": "new_parameter_name_154"
                },
                "param_155": {
                    "1": "new_parameter_name_155"
                },
                "param_156": {
                    "1": "new_parameter_name_156"
                },
                "param_157": {
                    "1": "new_parameter_name_157"
                },
                "param_158": {
                    "1": "new_parameter_name_158"
                },
                "param_159": {
                    "1": "new_parameter_name_159"
                },
                "param_160": {
                    "1": "new_parameter_name_160"
                },
                "param_161": {
                    "1": "new_parameter_name_161"
                },
                "param_162": {
                    "1": "new_parameter_name_162"
                },
                "param_163": {
                    "1": "new_parameter_name_163"
                },
                "param_164": {
                    "1": "new_parameter_name_164"
                },
                "param_165": {
                    "1": "new_parameter_name_165"
                },
                "param_166": {
                    "1": "new_parameter_name_166"
                },
                "param_167": {
                    "1": "new_parameter_name_167"
                },
                "param_168": {
                    "1": "new_parameter_name_168"
                },
                "param_169": {
                    "1": "new_parameter_name_169"
                },
                "param_170": {
                    "1": "new_parameter_name_170"
                },
                "param_171": {
                    "1": "new_parameter_name_171"
                },
                "param_172": {
                    "1": "new_parameter_name_172"
                },
                "param_173": {
                    "1": "new_parameter_name_173"
                },
                "param_174": {
                    "1": "new_parameter_name_174"
                },
                "param_175": {
                    "1": "new_parameter_name_175"
                },
                "param_176": {
                    "1": "new_parameter_name_176"
                },
                "param_177": {
                    "1": "new_parameter_name_177"
                },
                "param_178": {
                    "1": "new_parameter_name_178"
                },
                "param_179": {
                    "1": "new_parameter_name_179"
                },
                "param_180": {
                    "1": "new_parameter_name_180"
                },
                "param_181": {
                    "1": "new_parameter_name_181"
                },
                "param_182": {
                    "1": "new_parameter_name_182"
                },
                "param_183": {
                    "1": "new_parameter_name_183"
                },
                "param_184": {
                    "1": "new_parameter_name_184"
                },
                "param_185": {
                    "1": "new_parameter_name_185"
                },
                "param_186": {
                    "1": "new_parameter_name_186"
                },
                "param_187": {
                    "1": "new_parameter_name_187"
                },
                "param_188": {
                    "1": "new_parameter_name_188"
                },
                "param_189": {
                    "1": "new_parameter_name_189"
                },
                "param_190": {
                    "1": "new_parameter_name_190"
                },
                "param_191": {
                    "1": "new_parameter_name_191"
                },
                "param_192": {
                    "1": "new_parameter_name_192"
                },
                "param_193": {
                    "1": "new_parameter_name_193"
                },
                "param_194": {
                    "1": "new_parameter_name_194"
                },
                "param_195": {
                    "1": "new_parameter_name_195"
                },
                "param_196": {
                    "1": "new_parameter_name_196"
                },
                "param_197": {
                    "1": "new_parameter_name_197"
                },
                "param_198": {
                    "1": "new_parameter_name_198"
                },
                "param_199": {
                    "1": "new_parameter_name_199"
                },
                "param_200": {
                    "1": "new_parameter_name_200"
                },
                "param_201": {
                    "1": "new_parameter_name_201"
                },
                "param_202": {
                    "1": "new_parameter_name_202"
                },
                "param_203": {
                    "1": "new_parameter_name_203"
                },
                "param_204": {
                    "1": "new_parameter_name_204"
                },
                "param_205": {
                    "1": "new_parameter_name_205"
                },
                "param_206": {
                    "1": "new_parameter_name_206"
                },
                "param_207": {
                    "1": "new_parameter_name_207"
                },
                "param_208": {
                    "1": "new_parameter_name_208"
                },
                "param_209": {
                    "1": "new_parameter_name_209"
                },
                "param_210": {
                    "1": "new_parameter_name_210"
                },
                "param_211": {
                    "1": "new_parameter_name_211"
                },
                "param_212": {
                    "1": "new_parameter_name_212"
                },
                "param_213": {
                    "1": "new_parameter_name_213"
                },
                "param_214": {
                    "1": "new_parameter_name_214"
                },
                "param_215": {
                    "1": "new_parameter_name_215"
                },
                "param_216": {
                    "1": "new_parameter_name_216"
                },
                "param_217": {
                    "1": "new_parameter_name_217"
                },
                "param_218": {
                    "1": "new_parameter_name_218"
                },
                "param_219": {
                    "1": "new_parameter_name_219"
                },
                "param_220": {
                    "1": "new_parameter_name_220"
                },
                "param_221": {
                    "1": "new_parameter_name_221"
                },
                "param_222": {
                    "1": "new_parameter_name_222"
                },
                "param_223": {
                    "1": "new_parameter_name_223"
                },
                "param_224": {
                    "1": "new_parameter_name_224"
                },
                "param_225": {
                    "1": "new_parameter_name_225"
                },
                "param_226": {
                    "1": "new_parameter_name_226"
                },
                "param_227": {
                    "1": "new_parameter_name_227"
                },
                "param_228": {
                    "1": "new_parameter_name_228"
                },
                "param_229": {
                    "1": "new_parameter_name_229"
                },
                "param_230": {
                    "1": "new_parameter_name_230"
                },
                "param_231": {
                    "1": "new_parameter_name_231"
                },
                "param_232": {
                    "1": "new_parameter_name_232"
                },
                "param_233": {
                    "1": "new_parameter_name_233"
                },
                "param_234": {
                    "1": "new_parameter_name_234"
                },
                "param_235": {
                    "1": "new_parameter_name_235"
                },
                "param_236": {
                    "1": "new_parameter_name_236"
                },
                "param_237": {
                    "1": "new_parameter_name_237"
                },
                "param_238": {
                    "1": "new_parameter_name_238"
                },
                "param_239": {
                    "1": "new_parameter_name_239"
                },
                "param_240": {
                    "1": "new_parameter_name_240"
                },
                "param_241": {
                    "1": "new_parameter_name_241"
                },
                "param_242": {
                    "1": "new_parameter_name_242"
                },
                "param_243": {
                    "1": "new_parameter_name_243"
                },
                "param_244": {
                    "1": "new_parameter_name_244"
                },
                "param_245": {
                    "1": "new_parameter_name_245"
                },
                "param_246": {
                    "1": "new_parameter_name_246"
                },
                "param_247": {
                    "1": "new_parameter_name_247"
                },
                "param_248": {
                    "1": "new_parameter_name_248"
                },
                "param_249": {
                    "1": "new_parameter_name_249"
                },
                "param_250": {
                    "1": "new_parameter_name_250"
                },
                "param_251": {
                    "1": "new_parameter_name_251"
                },
                "param_252": {
                    "1": "new_parameter_name_252"
                },
                "param_253": {
                    "1": "new_parameter_name_253"
                },
                "param_254": {
                    "1": "new_parameter_name_254"
                },
                "param_255": {
                    "1": "new_parameter_name_255"
                },
                "param_256": {
                    "1": "new_parameter_name_256"
                }
            }
        },
        "FUN_08005c30": {
            "entrypoint": "0x08005c30",
            "current_name": "check_and_initialize_memory_08005c30",
            "code": "\n\n\nbool check_and_initialize_memory_08005c30(int value)\n\n{\n  bool is_value_valid;\n  \n  is_value_valid = value - 1U < 0x1000000;\n  if (is_value_valid) {\n    _DAT_e000e014 = value + -1;\n    write_byte_to_memory(0xffffffff,0xf);\n    _DAT_e000e018 = 0;\n    _DAT_e000e010 = 7;\n  }\n  return !is_value_valid;\n}\n\n",
            "renaming": {
                "FUN_08005c30": "check_and_initialize_memory_08005c30",
                "param_1": "value",
                "bVar1": "is_value_valid",
                "write_byte_to_memory_08005bdc": "write_byte_to_memory"
            },
            "calling": [
                "FUN_0800618c"
            ],
            "called": [
                "FUN_08005bdc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08005c30": {
                    "1": "update_memory_and_flag",
                    "2": "check_and_initialize",
                    "3": "check_and_set_memory",
                    "6": "check_and_initialize_memory"
                },
                "param_1": {
                    "2": "input_param",
                    "1": "param",
                    "9": "input_value",
                    "14": "value"
                },
                "bVar1": {
                    "4": "is_input_valid",
                    "1": "is_value_in_range",
                    "3": "is_in_range",
                    "5": "is_valid",
                    "2": "is_param_valid",
                    "7": "is_value_valid"
                },
                "_DAT_e000e014": {
                    "2": "previous_value",
                    "1": "updated_param"
                },
                "_DAT_e000e018": {
                    "1": "current_value",
                    "2": "data"
                },
                "_DAT_e000e010": {
                    "2": "flag",
                    "1": "constant_value"
                },
                "write_byte_to_memory_08005bdc": {
                    "1": "write_data_to_memory",
                    "10": "write_byte_to_memory"
                },
                "address": {
                    "4": "memory_address",
                    "2": "mem_address"
                },
                "data": {
                    "2": "mem_data",
                    "1": "memory_data",
                    "3": "byte_data"
                }
            }
        },
        "FUN_08005cec": {
            "entrypoint": "0x08005cec",
            "current_name": "check_status_08005cec",
            "code": "\n\n\nundefined4 check_status_08005cec(uint *flags)\n\n{\n  int tick_start;\n  uint current_tick;\n  \n  if ((*flags & 1) != 0) {\n    if (((_DAT_40023808 & 0xc) == 4) ||\n       (((_DAT_40023808 & 0xc) == 8 && ((_DAT_40023804 & 0x400000) == 0x400000)))) {\n      if (((_DAT_40023800 & 0x20000) != 0) && (input_data_1 != 1)) {\n        return 1;\n      }\n    }\n    else {\n      _DAT_40023800 = (uint3)_DAT_40023800;\n      tick_start = get_current_tick();\n      while ((_DAT_40023800 & 0x20000) != 0) {\n        current_tick = get_current_tick();\n        if (tick_start + 5000U <= current_tick) {\n          return 3;\n        }\n      }\n      _DAT_40023800 = concat13(DAT_40023800_3,concat12((char)input_data_1,_DAT_40023800));\n      if (input_data_1 == 1) {\n        tick_start = get_current_tick();\n        while ((_DAT_40023800 & 0x20000) == 0) {\n          current_tick = get_current_tick();\n          if (tick_start + 5000U <= current_tick) {\n            return 3;\n          }\n        }\n      }\n      else {\n        tick_start = get_current_tick();\n        while ((_DAT_40023800 & 0x20000) != 0) {\n          current_tick = get_current_tick();\n          if (tick_start + 5000U <= current_tick) {\n            return 3;\n          }\n        }\n      }\n    }\n  }\n  if ((*flags & 2) != 0) {\n    if (((_DAT_40023808 & 0xc) == 0) ||\n       (((_DAT_40023808 & 0xc) == 8 && ((_DAT_40023804 & 0x400000) == 0)))) {\n      if (((_DAT_40023800 & 2) != 0) && (input_data_3 != 1)) {\n        return 1;\n      }\n    }\n    else if (input_data_3 == 0) {\n      _DAT_42470000 = 0;\n      tick_start = get_current_tick();\n      while ((_DAT_40023800 & 2) != 0) {\n        current_tick = get_current_tick();\n        if (tick_start + 100U <= current_tick) {\n          return 3;\n        }\n      }\n    }\n    else {\n      _DAT_42470000 = 1;\n      tick_start = get_current_tick();\n      while ((_DAT_40023800 & 2) == 0) {\n        current_tick = get_current_tick();\n        if (tick_start + 100U <= current_tick) {\n          return 3;\n        }\n      }\n      _DAT_40023800 = input_data_4 << 3 | _DAT_40023800 & 0xffffff07;\n    }\n  }\n  if ((*flags & 8) != 0) {\n    if (flag4 == 0) {\n      _DAT_42470e80 = 0;\n      tick_start = get_current_tick();\n      while ((_DAT_40023874 & 2) != 0) {\n        current_tick = get_current_tick();\n        if (tick_start + 100U <= current_tick) {\n          return 3;\n        }\n      }\n    }\n    else {\n      _DAT_42470e80 = 1;\n      tick_start = get_current_tick();\n      while ((_DAT_40023874 & 2) == 0) {\n        current_tick = get_current_tick();\n        if (tick_start + 100U <= current_tick) {\n          return 3;\n        }\n      }\n    }\n  }\n  if ((*flags & 4) != 0) {\n    _DAT_40023840 = _DAT_40023840 | 0x10000000;\n    _DAT_40007000 = _DAT_40007000 | 0x100;\n    tick_start = get_current_tick();\n    while ((_DAT_40007000 & 0x100) == 0) {\n      current_tick = get_current_tick();\n      if (tick_start + 100U <= current_tick) {\n        return 3;\n      }\n    }\n    _DAT_40023870 = _DAT_40023870 & 0xffffff00;\n    tick_start = get_current_tick();\n    while ((_DAT_40023870 & 2) != 0) {\n      current_tick = get_current_tick();\n      if (tick_start + 5000U <= current_tick) {\n        return 3;\n      }\n    }\n    _DAT_40023870 = concat31(DAT_40023870_1,(char)input_data_2);\n    if (input_data_2 == 1) {\n      tick_start = get_current_tick();\n      while ((_DAT_40023870 & 2) == 0) {\n        current_tick = get_current_tick();\n        if (tick_start + 5000U <= current_tick) {\n          return 3;\n        }\n      }\n    }\n    else {\n      tick_start = get_current_tick();\n      while ((_DAT_40023870 & 2) != 0) {\n        current_tick = get_current_tick();\n        if (tick_start + 5000U <= current_tick) {\n          return 3;\n        }\n      }\n    }\n  }\n  if (input_data_6 != 0) {\n    if ((_DAT_40023808 & 0xc) == 8) {\n      return 1;\n    }\n    if (input_data_6 == 2) {\n      _DAT_42470060 = 0;\n      tick_start = get_current_tick();\n      while ((_DAT_40023800 & 0x2000000) != 0) {\n        current_tick = get_current_tick();\n        if (tick_start + 100U <= current_tick) {\n          return 3;\n        }\n      }\n      _DAT_40023804 =\n           input_data_11 << 0x18 |\n           input_data_8 | input_data_9 << 6 | ((input_data_10 >> 1) - 1) * 0x10000 | input_data_7 |\n           0x20000000;\n      _DAT_42470060 = 1;\n      tick_start = get_current_tick();\n      while ((_DAT_40023800 & 0x2000000) == 0) {\n        current_tick = get_current_tick();\n        if (tick_start + 100U <= current_tick) {\n          return 3;\n        }\n      }\n    }\n    else {\n      _DAT_42470060 = 0;\n      tick_start = get_current_tick();\n      while ((_DAT_40023800 & 0x2000000) != 0) {\n        current_tick = get_current_tick();\n        if (tick_start + 100U <= current_tick) {\n          return 3;\n        }\n      }\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "param_1": "flags",
                "iVar1": "tick_start",
                "uVar2": "current_tick",
                "param_1[1]": "input_data_1",
                "param_1[4]": "input_data_4",
                "param_1[3]": "input_data_3",
                "param_1[2]": "input_data_2",
                "param_1[6]": "input_data_6",
                "param_1[0xb]": "input_data_11",
                "param_1[8]": "input_data_8",
                "param_1[9]": "input_data_9",
                "param_1[10]": "input_data_10",
                "param_1[7]": "input_data_7",
                "FUN_08005cec": "check_status_08005cec",
                "HAL_GetTick()": "get_current_tick()",
                "param_1[5]": "flag4",
                "HAL_GetTick": "get_current_time",
                "CONCAT13": "concat13",
                "CONCAT12": "concat12",
                "CONCAT31": "concat31"
            },
            "calling": [
                "FUN_08007436"
            ],
            "called": [
                "FUN_08005a84"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "param_1": {
                    "1": "parameters",
                    "2": "input_data",
                    "4": "input_params",
                    "8": "flags",
                    "5": "status_flags"
                },
                "iVar1": {
                    "1": "timestamp",
                    "4": "current_time",
                    "3": "tick_counter",
                    "7": "tick_start"
                },
                "uVar2": {
                    "3": "tick_current",
                    "11": "current_tick",
                    "1": "time_diff",
                    "8": "current_time"
                },
                "_DAT_40023808": {
                    "2": "register_1",
                    "4": "register1",
                    "1": "register_a"
                },
                "_DAT_40023804": {
                    "1": "some_other_flag",
                    "2": "register_value2",
                    "4": "register2"
                },
                "_DAT_40023800": {
                    "1": "system_control",
                    "2": "status_register"
                },
                "DAT_40023800_3": {
                    "1": "lower_byte_register_3"
                },
                "DAT_40023800_2": {
                    "1": "lowest_byte_register_3"
                },
                "DAT_40023800_1": {
                    "1": "mask3"
                },
                "param_1[1]": {
                    "1": "param1_bit1"
                },
                "param_1[4]": {
                    "1": "flag3"
                },
                "param_1[3]": {
                    "1": "flag2"
                },
                "param_1[2]": {
                    "1": "param1_bit2"
                },
                "_DAT_42470000": {
                    "1": "register_4",
                    "3": "flag1"
                },
                "_DAT_40023874": {
                    "1": "register_value5",
                    "2": "register6"
                },
                "_DAT_42470e80": {
                    "1": "some_variable2",
                    "3": "flag2"
                },
                "_DAT_40023840": {
                    "1": "register_4",
                    "2": "register4"
                },
                "_DAT_40007000": {
                    "1": "register_5",
                    "2": "register5"
                },
                "_DAT_40023870": {
                    "1": "some_other_flags"
                },
                "register_9": {
                    "1": "register_9_temp"
                },
                "param_1[6]": {
                    "1": "input_data_6"
                },
                "_DAT_42470060": {
                    "1": "flag_register3",
                    "2": "flag3"
                },
                "param_1[0xb]": {
                    "1": "value1"
                },
                "param_1[8]": {
                    "1": "value2"
                },
                "param_1[9]": {
                    "1": "value_3"
                },
                "param_1[10]": {
                    "1": "param1_bit10"
                },
                "param_1[7]": {
                    "1": "param_7"
                },
                "FUN_08005cec": {
                    "1": "check_flags",
                    "2": "perform_operation",
                    "7": "check_status"
                },
                "HAL_GetTick()": {
                    "1": "current_tick"
                },
                "param_1[5]": {
                    "1": "param1_bit5"
                },
                "DAT_40023870_1": {
                    "1": "flag_bit_1",
                    "2": "bitmask2"
                },
                "HAL_GetTick": {
                    "1": "get_elapsed_time",
                    "2": "get_tick_count",
                    "3": "get_current_time"
                },
                "CONCAT13": {
                    "1": "concatenate_13",
                    "2": "concat13"
                },
                "CONCAT12": {
                    "1": "concatenate12",
                    "2": "concat12"
                },
                "PARAM_1_1": {
                    "1": "status_flag1"
                },
                "PARAM_1_2": {
                    "1": "status_flag2"
                },
                "PARAM_1_3": {
                    "1": "status_flag3"
                },
                "PARAM_1_4": {
                    "1": "status_flag4"
                },
                "PARAM_1_5": {
                    "1": "status_flag5"
                },
                "PARAM_1_6": {
                    "1": "status_flag6"
                },
                "PARAM_1_7": {
                    "1": "status_flag7"
                },
                "PARAM_1_8": {
                    "1": "status_flag8"
                },
                "PARAM_1_9": {
                    "1": "status_flag9"
                },
                "PARAM_1_10": {
                    "1": "status_flag10"
                },
                "PARAM_1_11": {
                    "1": "status_flag11"
                },
                "DAT_40023870_3": {
                    "1": "value2"
                },
                "CONCAT31": {
                    "2": "concat31"
                },
                "*param_1": {
                    "1": "status_flags"
                },
                "_DAT_40023800 & 0x20000": {
                    "1": "bit_17_of_control_register_1"
                },
                "_DAT_40023800 & 2": {
                    "1": "bit_1_of_control_register_1"
                },
                "_DAT_40023800 & 0x400": {
                    "1": "bit_10_of_control_register_1"
                },
                "_DAT_40023870 & 0x2": {
                    "1": "bit_1_of_register_6"
                },
                "_DAT_40023800 & 0x2000000": {
                    "1": "bit_25_of_control_register_1"
                },
                "3": {
                    "1": "wait_timeout"
                },
                "1": {
                    "1": "error"
                },
                "4": {
                    "1": "success"
                },
                "8": {
                    "1": "register_status"
                },
                "2": {
                    "1": "start_process"
                },
                "0x10000000": {
                    "1": "status_mask"
                },
                "0x100": {
                    "1": "process_started"
                },
                "0x2000000": {
                    "1": "process_completed"
                },
                "0x20000000": {
                    "1": "process_ongoing"
                },
                "0xc": {
                    "1": "mask1"
                },
                "0x400000": {
                    "1": "mask2"
                },
                "dword_FUN_08005a84": {
                    "1": "sub_function"
                }
            }
        },
        "FUN_0800618c": {
            "entrypoint": "0x0800618c",
            "current_name": "initialize_and_check_memory_0800618c",
            "code": "\n\n\nundefined4 initialize_and_check_memory_0800618c(uint *flags,uint size)\n\n{\n  int tick;\n  uint current_tick;\n  uint timeout;\n  undefined8 system_clock_freq;\n  \n  if ((_DAT_40023c00 & 0xf) < size) {\n    _DAT_40023c00 = CONCAT31(DAT_40023c00_1,(char)size);\n    if (size != (size & 0xf)) {\n      return 1;\n    }\n    if ((*flags & 1) != 0) {\n      if (flags[1] == 1) {\n        if ((_DAT_40023800 & 0x20000) == 0) {\n          return 1;\n        }\n      }\n      else if ((flags[1] != 2) && ((_DAT_40023800 & 2) == 0)) {\n        return 1;\n      }\n      _DAT_40023808 = flags[1] | _DAT_40023808 & 0xfffffffc;\n      tick = get_current_tick();\n      timeout = tick + 5000;\n      if (flags[1] == 1) {\n        while ((_DAT_40023808 & 0xc) != 4) {\n          current_tick = get_current_tick();\n          if (timeout <= current_tick) {\n            return 3;\n          }\n        }\n      }\n      else if (flags[1] == 2) {\n        while ((_DAT_40023808 & 0xc) != 8) {\n          current_tick = get_current_tick();\n          if (timeout <= current_tick) {\n            return 3;\n          }\n        }\n      }\n      else {\n        while ((_DAT_40023808 & 0xc) != 0) {\n          current_tick = get_current_tick();\n          if (timeout <= current_tick) {\n            return 3;\n          }\n        }\n      }\n    }\n  }\n  else {\n    if ((*flags & 1) != 0) {\n      if (flags[1] == 1) {\n        if ((_DAT_40023800 & 0x20000) == 0) {\n          return 1;\n        }\n      }\n      else if (flags[1] == 2) {\n        if ((_DAT_40023800 & 0x2000000) == 0) {\n          return 1;\n        }\n      }\n      else if ((_DAT_40023800 & 2) == 0) {\n        return 1;\n      }\n      _DAT_40023808 = flags[1] | _DAT_40023808 & 0xfffffffc;\n      tick = get_current_tick();\n      timeout = tick + 5000;\n      if (flags[1] == 1) {\n        while ((_DAT_40023808 & 0xc) != 4) {\n          current_tick = get_current_tick();\n          if (timeout <= current_tick) {\n            return 3;\n          }\n        }\n      }\n      else if (flags[1] == 2) {\n        while ((_DAT_40023808 & 0xc) != 8) {\n          current_tick = get_current_tick();\n          if (timeout <= current_tick) {\n            return 3;\n          }\n        }\n      }\n      else {\n        while ((_DAT_40023808 & 0xc) != 0) {\n          current_tick = get_current_tick();\n          if (timeout <= current_tick) {\n            return 3;\n          }\n        }\n      }\n    }\n    _DAT_40023c00 = CONCAT31(DAT_40023c00_1,(char)size);\n    if (size != (size & 0xf)) {\n      return 1;\n    }\n  }\n  if ((*flags & 2) != 0) {\n    _DAT_40023808 = flags[2] | _DAT_40023808 & 0xffffff0f;\n  }\n  if ((*flags & 4) != 0) {\n    _DAT_40023808 = flags[3] | _DAT_40023808 & 0xffffe3ff;\n  }\n  if ((*flags & 8) != 0) {\n    _DAT_40023808 = flags[4] << 3 | _DAT_40023808 & 0xffff1fff;\n  }\n  system_clock_freq = get_hclk_frequency();\n  check_and_initialize_memory((uint)system_clock_freq / 1000,(int)((ulonglong)system_clock_freq >> 0x20),(uint)system_clock_freq * 0x10624dd3);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800618c": "initialize_and_check_memory_0800618c",
                "param_1": "flags",
                "param_2": "size",
                "uVar2": "current_tick",
                "uVar3": "timeout",
                "uVar4": "system_clock_freq",
                "iVar1": "tick",
                "check_and_initialize_memory_08005c30": "check_and_initialize_memory",
                "HAL_GetTick": "get_current_tick",
                "HAL_RCC_GetHCLKFreq": "get_hclk_frequency"
            },
            "calling": [
                "FUN_08007436"
            ],
            "called": [
                "FUN_08006628",
                "FUN_08005a84",
                "FUN_08005c30"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800618c": {
                    "1": "check_and_wait_for_param",
                    "2": "check_and_initialize",
                    "6": "initialize_and_check_memory",
                    "4": "check_and_initialize_system",
                    "3": "initialize_and_check_system"
                },
                "param_1": {
                    "1": "param1",
                    "3": "config_params",
                    "2": "parameters",
                    "7": "flags",
                    "4": "config_data"
                },
                "param_2": {
                    "2": "value",
                    "1": "device_count",
                    "5": "config_size",
                    "3": "config_length",
                    "7": "size"
                },
                "uVar2": {
                    "1": "timestamp",
                    "18": "current_tick",
                    "2": "current_tick2",
                    "4": "elapsed_time"
                },
                "uVar3": {
                    "1": "expiry_tick",
                    "6": "end_tick",
                    "3": "target_tick",
                    "8": "timeout",
                    "2": "timeout_tick",
                    "4": "end_time"
                },
                "uVar4": {
                    "2": "hclk_frequency",
                    "16": "system_clock_freq",
                    "1": "system_clock",
                    "9": "system_clock_frequency"
                },
                "iVar1": {
                    "1": "current_tick_count",
                    "2": "start_tick",
                    "8": "current_time",
                    "3": "start_time",
                    "9": "tick"
                },
                "get_system_clock_frequency_08006628": {
                    "11": "get_system_clock_frequency"
                },
                "get_data_08005a84": {
                    "11": "get_data"
                },
                "check_and_initialize_memory_08005c30": {
                    "2": "initialize_and_check_memory",
                    "1": "initialize_and_check_memory_in_subroutine",
                    "9": "check_and_initialize_memory"
                },
                "_DAT_40023c00": {
                    "1": "config_value_1"
                },
                "DAT_40023c00_1": {
                    "1": "data_register_2"
                },
                "_DAT_40023800": {
                    "1": "data_register_3"
                },
                "_DAT_40023808": {
                    "1": "data_register_4"
                },
                "HAL_GetTick": {
                    "1": "get_current_tick"
                },
                "HAL_RCC_GetHCLKFreq": {
                    "1": "get_hclk_frequency"
                }
            }
        },
        "FUN_0800640c": {
            "entrypoint": "0x0800640c",
            "current_name": "initialize_gpio_0800640c",
            "code": "\n\n\nvoid initialize_gpio_0800640c(int flag,uint value1,uint value2)\n\n{\n  undefined4 gpio_config;\n  undefined4 gpio_config2;\n  undefined4 gpio_config4;\n  undefined4 gpio_config3;\n  undefined4 gpio_config5;\n  \n  if (flag == 0) {\n    _DAT_40023830 = _DAT_40023830 | 1;\n    gpio_config = 0x100;\n    gpio_config2 = 2;\n    gpio_config3 = 3;\n    gpio_config4 = 0;\n    gpio_config5 = 0;\n    initialize_gpio_0800640c(0x40020000,&gpio_config);\n    _DAT_40023808 = value2 | value1 | _DAT_40023808 & 0xf89fffff;\n  }\n  else {\n    _DAT_40023830 = _DAT_40023830 | 4;\n    gpio_config = 0x200;\n    gpio_config2 = 2;\n    gpio_config3 = 3;\n    gpio_config4 = 0;\n    gpio_config5 = 0;\n    initialize_gpio_0800640c(0x40020800,&gpio_config);\n    _DAT_40023808 = value1 | value2 << 3 | _DAT_40023808 & 0x7ffffff;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800640c": "initialize_gpio_0800640c",
                "param_1": "flag",
                "param_2": "value1",
                "param_3": "value2",
                "local_1c": "gpio_config",
                "local_18": "gpio_config2",
                "local_10": "gpio_config3",
                "local_14": "gpio_config4",
                "local_c": "gpio_config5",
                "HAL_GPIO_Init": "initialize_gpio"
            },
            "calling": [],
            "called": [
                "FUN_08006e88"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800640c": {
                    "1": "configure_gpio",
                    "30": "initialize_gpio"
                },
                "param_1": {
                    "14": "flag",
                    "1": "is_first_initialization",
                    "2": "condition",
                    "10": "mode"
                },
                "param_2": {
                    "1": "param_2",
                    "2": "param2",
                    "12": "value1",
                    "3": "param_a"
                },
                "param_3": {
                    "1": "value_2",
                    "2": "param3",
                    "3": "param_b",
                    "12": "value2"
                },
                "local_1c": {
                    "1": "gpio_config_1",
                    "10": "gpio_config",
                    "3": "gpio_config1",
                    "2": "pin_mode"
                },
                "local_18": {
                    "1": "output_type",
                    "2": "pin_mode1",
                    "4": "gpio_config2"
                },
                "local_10": {
                    "1": "gpio_pin3",
                    "3": "gpio_config3",
                    "2": "gpio_config_speed"
                },
                "local_14": {
                    "1": "gpio_config5",
                    "3": "gpio_config4",
                    "2": "unused1"
                },
                "local_c": {
                    "1": "variable2",
                    "2": "param4",
                    "3": "gpio_config5"
                },
                "_DAT_40023830": {
                    "1": "gpio_pupdr",
                    "2": "gpio_register"
                },
                "_DAT_40023808": {
                    "1": "gpio_configuration"
                },
                "HAL_GPIO_Init": {
                    "1": "initialize_gpio"
                }
            }
        },
        "FUN_080064ec": {
            "entrypoint": "0x080064ec",
            "current_name": "calculate_clock_frequency_080064ec",
            "code": "\n\n\nuint calculate_clock_frequency_080064ec(void)\n\n{\n  uint clock_config;\n  uint clock_frequency;\n  \n  clock_config = _DAT_40023808 & 0xc;\n  if (clock_config == 8) {\n    if ((_DAT_40023804 & 0x400000) == 0) {\n      clock_frequency = ((_DAT_40023804 & 0x7fc0) >> 6) * (16000000 / (_DAT_40023804 & 0x3f));\n    }\n    else {\n      clock_frequency = ((_DAT_40023804 & 0x7fc0) >> 6) * (8000000 / (_DAT_40023804 & 0x3f));\n    }\n    return clock_frequency / ((((_DAT_40023804 & 0x30000) >> 0x10) + 1) * 2);\n  }\n  if (clock_config < 9) {\n    if (clock_config == 0) {\n      return 16000000;\n    }\n    if (clock_config == 4) {\n      return 8000000;\n    }\n  }\n  return 16000000;\n}\n\n",
            "renaming": {
                "FUN_080064ec": "calculate_clock_frequency_080064ec",
                "uVar1": "clock_config",
                "local_c": "clock_frequency"
            },
            "calling": [
                "FUN_08006628"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080064ec": {
                    "16": "calculate_clock_frequency",
                    "3": "calculate_frequency",
                    "11": "calculate_clock_speed",
                    "1": "calculate_clock_period"
                },
                "uVar1": {
                    "2": "mode",
                    "13": "clock_config",
                    "1": "clock_setting",
                    "3": "clock_source"
                },
                "local_c": {
                    "1": "result",
                    "6": "frequency",
                    "3": "calculated_frequency",
                    "9": "clock_frequency",
                    "7": "clock_speed"
                },
                "_DAT_40023808": {
                    "1": "clock_setting",
                    "2": "config_register"
                },
                "_DAT_40023804": {
                    "1": "clock_value"
                },
                "<original_function_name>": {
                    "1": "<more_descriptive_function_name>"
                }
            }
        },
        "FUN_08006628": {
            "entrypoint": "0x08006628",
            "current_name": "get_system_clock_frequency_08006628",
            "code": "\n\n\nuint get_system_clock_frequency_08006628(void)\n\n{\n  uint sys_clock_freq;\n  \n  sys_clock_freq = get_sys_clock_freq();\n  DAT_20000000 = sys_clock_freq >> (&DAT_0800bcac)[(_DAT_40023808 & 0xf0) >> 4];\n  return sys_clock_freq >> (&DAT_0800bcac)[(_DAT_40023808 & 0xf0) >> 4];\n}\n\n",
            "renaming": {
                "FUN_08006628": "get_system_clock_frequency_08006628",
                "uVar1": "sys_clock_freq",
                "HAL_RCC_GetSysClockFreq": "get_sys_clock_freq"
            },
            "calling": [
                "FUN_080066cc",
                "FUN_0800618c",
                "FUN_08006680"
            ],
            "called": [
                "FUN_080064ec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08006628": {
                    "1": "get_sys_clock_divisor",
                    "2": "get_sys_clock_frequency",
                    "5": "get_system_clock_frequency",
                    "3": "get_sysclock_frequency",
                    "4": "get_adjusted_sys_clock_freq"
                },
                "uVar1": {
                    "1": "sysclock_frequency",
                    "2": "system_clock_freq",
                    "19": "sys_clock_freq",
                    "3": "sysclock_freq"
                },
                "_DAT_40023808": {
                    "1": "data_value",
                    "2": "config_register",
                    "4": "register_value"
                },
                "DAT_20000000": {
                    "1": "calculated_frequency",
                    "2": "result",
                    "4": "adjusted_sys_clock_freq"
                },
                "HAL_RCC_GetSysClockFreq": {
                    "1": "retrieve_sys_clock_freq",
                    "3": "get_sys_clock_frequency",
                    "2": "get_system_clock_frequency",
                    "7": "get_sys_clock_freq"
                },
                "(&DAT_0800bcac)": {
                    "1": "freq_adjustment_table"
                },
                "&DAT_0800bcac": {
                    "2": "data_array",
                    "1": "sys_clock_freq_offset_table"
                },
                "FUN_080064ec": {
                    "1": "get_analog_input"
                },
                "_DAT_0800bcac": {
                    "1": "shift_values"
                },
                "DAT_0800bcac": {
                    "1": "data2"
                },
                "(&DAT_0800bcac)[(_DAT_40023808 & 0xf0) >> 4]": {
                    "1": "shift_amount"
                }
            }
        },
        "FUN_08006680": {
            "entrypoint": "0x08006680",
            "current_name": "get_hclk_frequency_08006680",
            "code": "\n\n\nuint get_hclk_frequency_08006680(void)\n\n{\n  uint hclk_freq;\n  \n  hclk_freq = get_hclk_freq;\n  return hclk_freq >> (&DAT_0800bcac)[(_DAT_40023808 & 0x1c00) >> 10];\n}\n\n",
            "renaming": {
                "FUN_08006680": "get_hclk_frequency_08006680",
                "uVar1": "hclk_freq",
                "HAL_RCC_GetHCLKFreq": "get_hclk_freq",
                "HAL_RCC_GetHCLKFreq()": "get_hclk_freq"
            },
            "calling": [
                "FUN_08007f54"
            ],
            "called": [
                "FUN_08006628"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08006680": {
                    "2": "get_adjusted_hclk_frequency",
                    "1": "calculate_adjusted_clock_frequency",
                    "7": "get_adjusted_hclk_freq",
                    "12": "get_hclk_frequency"
                },
                "uVar1": {
                    "11": "hclk_frequency",
                    "1": "h_clk_frequency",
                    "2": "clock_frequency",
                    "12": "hclk_freq"
                },
                "FUN_08006628": {
                    "1": "get_frequency_value"
                },
                "DAT_0800bcac": {
                    "1": "freq_shift_table",
                    "2": "frequency_table"
                },
                "_DAT_40023808": {
                    "1": "flag_value",
                    "5": "input_value",
                    "2": "config_register",
                    "10": "register_value"
                },
                "HAL_RCC_GetHCLKFreq": {
                    "1": "get_rcc_hclk_frequency",
                    "13": "get_hclk_freq",
                    "5": "get_hclk_frequency"
                },
                "&DAT_0800bcac": {
                    "2": "shift_values",
                    "1": "data_offset",
                    "3": "shift_array"
                },
                "DAT_40023808": {
                    "1": "some_constant"
                },
                "uVar1 >> (&DAT_0800bcac)[(_DAT_40023808 & 0x1c00) >> 10]": {
                    "1": "adjusted_hclk_freq"
                },
                "_DAT_40023808 & 0x1c00": {
                    "1": "masked_constant"
                },
                "(&DAT_0800bcac)[(masked_constant) >> 10]": {
                    "1": "shifted_value"
                },
                "uVar2": {
                    "1": "sysclk_shift"
                },
                "HAL_RCC_GetHCLKFreq()": {
                    "1": "get_hclk_freq"
                }
            }
        },
        "FUN_080066cc": {
            "entrypoint": "0x080066cc",
            "current_name": "get_hclk_frequency_080066cc",
            "code": "\n\n\nuint get_hclk_frequency_080066cc(void)\n\n{\n  uint hclk_frequency;\n  \n  hclk_frequency = get_hclk_frequency_080066cc();\n  return hclk_frequency >> (&DAT_0800bcac)[(_DAT_40023808 & 0xe000) >> 0xd];\n}\n\n",
            "renaming": {
                "FUN_080066cc": "get_hclk_frequency_080066cc",
                "uVar1": "hclk_frequency",
                "HAL_RCC_GetHCLKFreq": "get_hclk_frequency"
            },
            "calling": [
                "FUN_08007f54"
            ],
            "called": [
                "FUN_08006628"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080066cc": {
                    "2": "get_hclk_frequency_divided",
                    "1": "calculate_shifted_hclk_freq",
                    "11": "get_hclk_frequency"
                },
                "uVar1": {
                    "12": "hclk_frequency",
                    "1": "system_clock_frequency",
                    "11": "hclk_freq"
                },
                "HAL_RCC_GetHCLKFreq": {
                    "1": "get_hclk_frequency_value",
                    "7": "get_hclk_freq",
                    "11": "get_hclk_frequency",
                    "2": "get_current_hclk_frequency"
                },
                "DAT_0800bcac": {
                    "2": "shift_values",
                    "1": "shift_lookup_table"
                },
                "_DAT_40023808": {
                    "1": "mcu_dev_reg",
                    "2": "system_control_register",
                    "11": "register_value"
                },
                "&DAT_0800bcac": {
                    "1": "shifted_value_array",
                    "2": "shift_array"
                },
                "uVar1 >> (&DAT_0800bcac)[(_DAT_40023808 & 0xe000) >> 0xd]": {
                    "1": "shifted_frequency"
                },
                "FUN_08006628": {
                    "1": "get_hclk_freq"
                },
                "(&DAT_0800bcac)[(_DAT_40023808 & 0xe000) >> 0xd]": {
                    "1": "hclk_divisor"
                },
                "_DAT_0800bcac": {
                    "1": "lookup_table"
                }
            }
        },
        "FUN_08006950": {
            "entrypoint": "0x08006950",
            "current_name": "set_memory_configuration_08006950",
            "code": "\n\n\nvoid set_memory_configuration_08006950(uint bit_value)\n\n{\n  _DAT_e000ed0c = _DAT_e000ed0c & 0xf8ff | (bit_value & 7) << 8 | 0x5fa0000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006950": "set_memory_configuration_08006950",
                "param_1": "bit_value"
            },
            "calling": [
                "FUN_08006ce0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08006950": {
                    "1": "set_control_register_bits",
                    "2": "set_register_bits",
                    "4": "set_memory_configuration"
                },
                "param_1": {
                    "3": "bit_value",
                    "1": "prescaler_value",
                    "2": "configuration_value"
                },
                "_DAT_e000ed0c": {
                    "1": "flags",
                    "3": "configuration_register",
                    "2": "config_register",
                    "4": "control_register",
                    "9": "register_value"
                },
                "0xf8ff": {
                    "1": "mask"
                },
                "0x5fa0000": {
                    "1": "data_bits"
                },
                "8": {
                    "1": "shift_amount"
                }
            }
        },
        "FUN_08006998": {
            "entrypoint": "0x08006998",
            "current_name": "get_shifted_bits_08006998",
            "code": "\n\n\nuint get_shifted_bits_08006998(void)\n\n{\n  shifted_bits _DAT_e000ed0c >> 8 & 7;\n}\n\n",
            "renaming": {
                "FUN_08006998": "get_shifted_bits_08006998",
                "return": "shifted_bits"
            },
            "calling": [
                "FUN_08006cf6",
                "FUN_08006d8a"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08006998": {
                    "1": "get_shifted_data",
                    "6": "get_bits_from_register",
                    "4": "get_shifted_value",
                    "8": "get_shifted_bits"
                },
                "_DAT_e000ed0c": {
                    "3": "input_data",
                    "4": "data_register",
                    "1": "memory_value",
                    "2": "data_value",
                    "7": "register_value"
                },
                "return": {
                    "1": "shifted_bits"
                },
                "8": {
                    "1": "shift_amount"
                },
                "7": {
                    "2": "mask",
                    "1": "bit_mask"
                }
            }
        },
        "FUN_080069b4": {
            "entrypoint": "0x080069b4",
            "current_name": "set_bit_in_memory_080069b4",
            "code": "\nvoid set_bit_in_memory_080069b4(byte input_byte)\n\n{\n  *(integer *)(((unsigned_integer)(integer)(char)input_byte >> 5) * 4 + -0x1fff1f00) = 1 << (input_byte & 0x1f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080069b4": "set_bit_in_memory_080069b4",
                "param_1": "input_byte",
                "int": "integer",
                "uint": "unsigned_integer"
            },
            "calling": [
                "FUN_08006d2e"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080069b4": {
                    "1": "set_bit_in_integer",
                    "3": "set_bit",
                    "19": "set_bit_in_memory",
                    "2": "set_bit_in_array"
                },
                "param_1": {
                    "2": "bit_index",
                    "1": "shift",
                    "17": "input_byte",
                    "7": "byte_value"
                },
                "int": {
                    "1": "pointer"
                },
                "byte": {
                    "2": "byte"
                },
                "uint": {
                    "1": "unsigned_integer"
                },
                "*(int *)(((uint)(int)(char)param_1 >> 5) * 4 + -0x1fff1f00)": {
                    "1": "array_index",
                    "5": "memory_address"
                },
                "1 << (param_1 & 0x1f)": {
                    "1": "bit_shifted_value",
                    "5": "bit_mask",
                    "2": "bitmask"
                },
                "*((uint)(int)(char)param_1 >> 5) * 4 + -0x1fff1f00": {
                    "1": "address"
                },
                "param_1 & 0x1f": {
                    "1": "bit_offset"
                },
                "param_1 >> 5": {
                    "1": "shifted_input_byte"
                }
            }
        },
        "FUN_080069e4": {
            "entrypoint": "0x080069e4",
            "current_name": "set_bit_in_memory_080069e4",
            "code": "\nvoid set_bit_in_memory_080069e4(byte input_byte)\n\n{\n  *(int *)((((unsigned_int)(int)(character)input_byte >> 5) + 0x20) * 4 + -0x1fff1f00) = 1 << (input_byte & 0x1f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080069e4": "set_bit_in_memory_080069e4",
                "param_1": "input_byte",
                "uint": "unsigned_int",
                "char": "character"
            },
            "calling": [
                "FUN_08006d4a"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080069e4": {
                    "4": "set_bit_at_index",
                    "1": "set_bit_in_buffer",
                    "15": "set_bit_in_memory",
                    "3": "set_bit_in_array"
                },
                "param_1": {
                    "1": "byte_to_set_bit",
                    "15": "input_byte",
                    "2": "byte_to_set",
                    "10": "byte_value"
                },
                "*(int *)((((uint)(int)(char)param_1 >> 5) + 0x20) * 4 + -0x1fff1f00)": {
                    "1": "memory_ptr",
                    "2": "memory_address"
                },
                "1 << (param_1 & 0x1f)": {
                    "4": "bit_to_set",
                    "2": "bit_value",
                    "3": "bit_mask",
                    "1": "bitmask"
                },
                "PTR_0x20": {
                    "1": "array_start"
                },
                "arrayStart": {
                    "1": "array_start"
                },
                "PTR_0x1fff1f00": {
                    "1": "array_offset"
                },
                "arrayOffset": {
                    "1": "array_offset"
                },
                "*((((uint)(int)(char)param_1 >> 5) + 0x20) * 4 + -0x1fff1f00)": {
                    "1": "array_index"
                },
                "uint": {
                    "1": "unsigned_int"
                },
                "char": {
                    "1": "character"
                },
                "param_1 >> 5": {
                    "1": "shifted_byte"
                },
                "0x20": {
                    "1": "constant_1"
                },
                "4": {
                    "1": "constant_2"
                },
                "-0x1fff1f00": {
                    "1": "base_address"
                },
                "1": {
                    "1": "bit_mask"
                },
                "param_1 & 0x1f": {
                    "1": "bit_position"
                },
                "param_2": {
                    "1": "output_buffer"
                },
                "PTR_memAddr": {
                    "1": "memory_address"
                },
                "*((uint *)(+0x20) * 4 + -0x1fff1f00)": {
                    "1": "address"
                },
                "1 << (byteValue & 0x1f)": {
                    "1": "bit_value"
                },
                "param_3": {
                    "1": "buffer_size"
                },
                "local_1": {
                    "1": "shift_amount"
                },
                "local_2": {
                    "1": "byte_offset"
                },
                "local_3": {
                    "1": "bit_offset"
                }
            }
        },
        "FUN_08006a18": {
            "entrypoint": "0x08006a18",
            "current_name": "check_bit_08006a18",
            "code": "\nbool check_bit_08006a18(byte byte_value)\n\n{\n  return (*(unsigned_int *)(((shifted_input_byte >> 5) + 0x40) * 4 + subtract0x1fff1f00) bitwise_and\n         1 << (byte_value bitwise_and 0x1f)) not_equal 0;\n}\n\n",
            "renaming": {
                "FUN_08006a18": "check_bit_08006a18",
                "param_1": "byte_value",
                "int": "int_value",
                "char": "char_value",
                "uint": "unsigned_int",
                "-": "subtract",
                "&": "bitwise_and",
                "!=": "not_equal",
                "(uint)(int)(char)param_1": "shifted_input_byte"
            },
            "calling": [
                "FUN_08006de0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08006a18": {
                    "8": "check_bit_set",
                    "13": "check_bit",
                    "1": "is_nth_bit_set",
                    "4": "is_bit_set"
                },
                "param_1": {
                    "4": "byte_to_check",
                    "10": "input_byte",
                    "16": "byte_value",
                    "1": "bit_position"
                },
                "int": {
                    "1": "signed_int",
                    "2": "int_value"
                },
                "char": {
                    "1": "single_char"
                },
                "*(uint *)((((uint)(int)(char)param_1 >> 5) + 0x40) * 4 + -0x1fff1f00)": {
                    "1": "target_bit",
                    "5": "bit_array"
                },
                "param_1 & 0x1f": {
                    "7": "bit_position",
                    "1": "array_index"
                },
                "(param_1 & 0x1f)": {
                    "4": "bit_position"
                },
                "*(uint *)((((uint)(int)(char)byteValue >> 5) + 0x40) * 4 + -0x1fff1f00)": {
                    "1": "bit_vector"
                },
                "(*(uint *)((((uint)(int)(char)param_1 >> 5) + 0x40) * 4 + -0x1fff1f00)": {
                    "1": "bit_array"
                },
                "uint": {
                    "1": "unsigned_integer",
                    "2": "unsigned_int"
                },
                "PTR_": {
                    "1": "unchanged"
                },
                "DAT_": {
                    "1": "unchanged"
                },
                "((uint)(int)(char)param_1 >> 5)": {
                    "1": "shifted"
                },
                "((((uint)(int)(char)param_1 >> 5) + 0x40) * 4 + -0x1fff1f00)": {
                    "1": "array_index"
                },
                "param_1 >> 5": {
                    "1": "shifted"
                },
                "4": {
                    "1": "bit_offset"
                },
                "-0x1fff1f00": {
                    "1": "base_address"
                },
                ">>": {
                    "1": "right_shift"
                },
                "+": {
                    "1": "add"
                },
                "*": {
                    "1": "multiply"
                },
                "-": {
                    "1": "subtract"
                },
                "&": {
                    "1": "bitwise_and"
                },
                "!=": {
                    "1": "not_equal"
                },
                "0x1f": {
                    "1": "bit_mask"
                },
                "1 <<": {
                    "1": "left_shift"
                },
                "true": {
                    "1": "bit_set"
                },
                "false": {
                    "1": "bit_not_set"
                },
                "1 << (param_1 & 0x1f)": {
                    "1": "bit_mask"
                },
                "(uint)(int)(char)param_1": {
                    "1": "shifted_input_byte"
                },
                "(((uint)(int)(char)param_1 >> 5) + 0x40)": {
                    "1": "shifted_byte_with_offset"
                },
                "(shiftedByteWithOffset * 4 + -0x1fff1f00)": {
                    "1": "address"
                }
            }
        },
        "FUN_08006a58": {
            "entrypoint": "0x08006a58",
            "current_name": "set_bit_in_memory_08006a58",
            "code": "\nvoid set_bit_in_memory_08006a58(byte input_byte)\n\n{\n  *(integer *)((((unsigned_int)signed_char_to_intinput_byte >> 5) + 0x40) * 4 + -0x1fff1f00) = 1 << (input_byte & 0x1f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006a58": "set_bit_in_memory_08006a58",
                "param_1": "input_byte",
                "uint": "unsigned_int",
                "int": "integer",
                "char": "character",
                "(int)(char)": "signed_char_to_int"
            },
            "calling": [
                "FUN_08006dc4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08006a58": {
                    "1": "set_bit_in_int",
                    "16": "set_bit_in_memory",
                    "2": "set_bit_at_offset",
                    "3": "set_bit_value",
                    "8": "set_bit_in_array"
                },
                "param_1": {
                    "1": "param_1",
                    "15": "input_byte",
                    "5": "byte_to_set",
                    "7": "byte_value"
                },
                "param_1 & 0x1f": {
                    "1": "lower5_bits"
                },
                "(uint)(int)(char)param_1 >> 5": {
                    "1": "upper3_bits"
                },
                "((upper3Bits) + 0x40) * 4 + -0x1fff1f00": {
                    "1": "array_index"
                },
                "1 << (lower5Bits)": {
                    "1": "bit_mask"
                },
                "*((uint *)(-0x1fff1f00 + ((static_cast<uint>(static_cast<int>(static_cast<char>(byteValue))) >> 5) + 0x40) * 4))": {
                    "1": "array_address"
                },
                "1 << (byteValue & 0x1f)": {
                    "1": "bit_mask"
                },
                "*(int *)((((uint)(int)(char)param_1 >> 5) + 0x40) * 4 + -0x1fff1f00)": {
                    "1": "bit_pointer",
                    "3": "target_address",
                    "2": "bit_array",
                    "5": "memory_address"
                },
                "1 << (param_1 & 0x1f)": {
                    "1": "bit_shifted_value",
                    "6": "bit_to_set",
                    "2": "bit_value",
                    "3": "bit_mask"
                },
                "-0x1fff1f00": {
                    "1": "array_base_address"
                },
                "*(int *)": {
                    "1": "array_index"
                },
                "uint": {
                    "2": "unsigned_int"
                },
                "int": {
                    "1": "integer"
                },
                "char": {
                    "1": "character"
                },
                "0x40": {
                    "1": "array_offset"
                },
                "4": {
                    "1": "array_element_size"
                },
                "1": {
                    "1": "bit_mask"
                },
                "0x1f": {
                    "1": "bit_position"
                },
                "param_1 >> 5": {
                    "1": "shifted_value"
                },
                "0x1fff1f00": {
                    "1": "constant2"
                },
                "(int)(char)": {
                    "1": "signed_char_to_int"
                },
                ">> 5": {
                    "1": "shift_right_by_five"
                },
                "+ 0x40": {
                    "1": "addition_offset"
                },
                "* 4": {
                    "1": "multiply_by_four"
                }
            }
        },
        "FUN_08006a8c": {
            "entrypoint": "0x08006a8c",
            "current_name": "set_bit_in_memory_08006a8c",
            "code": "\nvoid set_bit_in_memory_08006a8c(byte input_byte)\n\n{\n  *(integer *)((((unsigned_integer)(integer)(byte_value)input_byte >> 5) + 0x60) * 4 + -0x1fff1f00) = 1 << (input_byte & 0x1f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006a8c": "set_bit_in_memory_08006a8c",
                "param_1": "input_byte",
                "char": "byte_value",
                "int": "integer",
                "uint": "unsigned_integer"
            },
            "calling": [
                "FUN_08006dfe"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08006a8c": {
                    "1": "set_bit_value_in_memory",
                    "8": "set_bit",
                    "10": "set_bit_in_memory",
                    "2": "set_bit_at_index",
                    "5": "set_bit_in_array"
                },
                "param_1": {
                    "1": "value",
                    "2": "bit_index",
                    "17": "input_byte",
                    "5": "byte_value"
                },
                "*(int *)((((uint)(int)(char)param_1 >> 5) + 0x60) * 4 + -0x1fff1f00)": {
                    "2": "address",
                    "3": "memory_address",
                    "1": "bit_mask"
                },
                "1 << (param_1 & 0x1f)": {
                    "2": "bit_to_set",
                    "4": "bit_value",
                    "7": "bit_mask"
                },
                "1 << (byteValue & 0x1f)": {
                    "1": "bit_value"
                },
                "char": {
                    "2": "byte_value"
                },
                "(((uint)(int)(char)param_1 >> 5) + 0x60) * 4 + -0x1fff1f00": {
                    "1": "array_index"
                },
                "*((((uint)(int)(char)param_1 >> 5) + 0x60) * 4 + -0x1fff1f00)": {
                    "1": "array_address"
                },
                "int": {
                    "2": "integer"
                },
                "uint": {
                    "2": "unsigned_integer"
                },
                "param_1 >> 5": {
                    "1": "shifted_value"
                },
                "param_1 & 0x1f": {
                    "1": "bit_offset"
                },
                "int *)((((uint)(int)(char)param_1 >> 5) + 0x60) * 4 + -0x1fff1f00)": {
                    "1": "memory_address"
                }
            }
        },
        "FUN_08006ac0": {
            "entrypoint": "0x08006ac0",
            "current_name": "check_bit_08006ac0",
            "code": "\nbool check_bit_08006ac0(byte input_byte)\n\n{\n  return (*(uint *)((((uint)(int)(char)input_byte >> 5) + 0x80) * 4 + -0x1fff1f00) &\n         1 << (input_byte & 0x1f)) != 0;\n}\n\n",
            "renaming": {
                "FUN_08006ac0": "check_bit_08006ac0",
                "param_1": "input_byte"
            },
            "calling": [
                "FUN_08006e1a"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08006ac0": {
                    "1": "check_bit_of_uint",
                    "2": "check_bit_is_set",
                    "18": "check_bit",
                    "6": "is_bit_set"
                },
                "param_1": {
                    "3": "input",
                    "1": "num",
                    "2": "byte_to_check",
                    "14": "input_byte",
                    "10": "byte_value"
                },
                "*(uint *)((((uint)(int)(char)param_1 >> 5) + 0x80) * 4 + -0x1fff1f00)": {
                    "1": "memory_location",
                    "2": "bit_mask",
                    "5": "bit_array"
                },
                "param_1 & 0x1f": {
                    "7": "bit_position",
                    "4": "bit_index",
                    "1": "bit_offset"
                },
                "(*(uint *)((((uint)(int)(char)param_1 >> 5) + 0x80) * 4 + -0x1fff1f00)": {
                    "1": "array",
                    "4": "bit_array"
                },
                "*(uint *)((((uint)(int)(char)bitPosition >> 5) + 0x80) * 4 + -0x1fff1f00)": {
                    "1": "bit_array"
                },
                "bitArray & (1 << bitOffset)": {
                    "1": "is_set"
                },
                "(param_1 & 0x1f)": {
                    "2": "bit_position",
                    "1": "bit_offset"
                },
                "1 << (param_1 & 0x1f)": {
                    "1": "bit_mask"
                },
                "(*(uint *)((((uint)(int)(char)param_1 >> 5) + 0x80) * 4 + -0x1fff1f00) & 1 << (param_1 & 0x1f))": {
                    "1": "bit_mask_result"
                },
                "*(uint*)((((uint)(int)(char)param_1 >> 5) + 0x80) * 4 + -0x1fff1f00)": {
                    "1": "bit_array"
                }
            }
        },
        "FUN_08006b00": {
            "entrypoint": "0x08006b00",
            "current_name": "store_data_08006b00",
            "code": "\nvoid store_data_08006b00(byte byte_value,uint value)\n\n{\n  if ((signed_char)byte_value < '\\0') {\n    *(signed_char *)((byte_value & 0xf) + 0xe000ed14) = (signed_char)((value & 0xff) << 4);\n  }\n  else {\n    *(signed_char *)((signed_char)byte_value + -0x1fff1c00) = (signed_char)((value & 0xff) << 4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006b00": "store_data_08006b00",
                "param_1": "byte_value",
                "param_2": "value",
                "char": "signed_char"
            },
            "calling": [
                "FUN_08006cf6",
                "FUN_08006c9c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08006b00": {
                    "1": "store_byte",
                    "6": "update_memory",
                    "4": "write_to_memory",
                    "7": "store_data",
                    "3": "write_byte_to_memory"
                },
                "param_1": {
                    "6": "address",
                    "1": "source_value",
                    "2": "byte_to_write",
                    "7": "byte_value"
                },
                "param_2": {
                    "8": "value",
                    "2": "data_value",
                    "3": "input_value",
                    "1": "target_byte"
                },
                "PTR_": {
                    "1": "address_pointer"
                },
                "DAT_": {
                    "1": "data"
                },
                "param_3": {
                    "1": "offset"
                },
                "param_4": {
                    "1": "offset"
                },
                "var_1": {
                    "1": "target_address"
                },
                "var_2": {
                    "1": "shifted_value"
                },
                "0xe000ed14": {
                    "1": "destination1",
                    "2": "memory_address1"
                },
                "0x1fff1c00": {
                    "2": "memory_address2",
                    "1": "destination2"
                },
                "*(char *)((param_1 & 0xf) + 0xe000ed14)": {
                    "1": "memory_address1"
                },
                "*(char *)((char)param_1 + -0x1fff1c00)": {
                    "1": "storage2"
                },
                "DAT_08006b00": {
                    "1": "offset"
                },
                "PTR_08006b00": {
                    "1": "ptr"
                },
                "<char_casted_param_1>": {
                    "1": "modified_byte"
                },
                "<char_casted_param_1_2>": {
                    "1": "modified_byte_alt"
                },
                "<char_casted_param_1_3>": {
                    "1": "modified_byte_other"
                },
                "<char_casted_param_1_4>": {
                    "1": "modified_byte_another"
                },
                "<resulting_address_1>": {
                    "1": "address_1"
                },
                "<resulting_address_2>": {
                    "1": "address_2"
                },
                "<resulting_address_3>": {
                    "1": "address_3"
                },
                "<resulting_address_4>": {
                    "1": "address_4"
                },
                "<char_casted_param_1_alt>": {
                    "1": "modified_byte_alt_other"
                },
                "char": {
                    "1": "signed_char"
                },
                "e000ed14": {
                    "1": "character_array_a"
                },
                "local_1": {
                    "1": "address"
                }
            }
        },
        "FUN_08006b54": {
            "entrypoint": "0x08006b54",
            "current_name": "extracted_byte_08006b54",
            "code": "\nbyte extracted_byte_08006b54(byte input_byte)\n\n{\n  byte result;\n  \n  if ((char)input_byte < '\\0') {\n    result = *(byte *)((input_byte & 0xf) + 0xe000ed14);\n  }\n  else {\n    result = *(byte *)((char)input_byte + -0x1fff1c00);\n  }\n  return result >> 4;\n}\n\n",
            "renaming": {
                "FUN_08006b54": "extracted_byte_08006b54",
                "param_1": "input_byte",
                "bVar1": "result"
            },
            "calling": [
                "FUN_08006d98"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08006b54": {
                    "4": "extract_byte_from_binary",
                    "3": "extract_nibble",
                    "7": "extracted_byte",
                    "1": "decode_byte",
                    "2": "get_nibble_from_byte",
                    "6": "extract_byte"
                },
                "param_1": {
                    "1": "input",
                    "30": "input_byte"
                },
                "bVar1": {
                    "1": "nibble_value",
                    "3": "output_byte",
                    "8": "result_byte"
                },
                "0xe000ed14": {
                    "1": "memory_address_1"
                },
                "0x1fff1c00": {
                    "1": "lookup_table_pos"
                },
                "0xf": {
                    "1": "mask"
                },
                "-0x1fff1c00": {
                    "1": "negative_offset"
                }
            }
        },
        "FUN_08006ba0": {
            "entrypoint": "0x08006ba0",
            "current_name": "bitwise_operation_08006ba0",
            "code": "\nuint bitwise_operation_08006ba0(uint input_value,uint bit_mask,uint result)\n\n{\n  uint remaining_bits;\n  \n  input_value = input_value & 7;\n  remaining_bits = 7 - input_value;\n  if (3 < remaining_bits) {\n    remaining_bits = 4;\n  }\n  if (input_value + 4 < 7) {\n    input_value = 0;\n  }\n  else {\n    input_value = input_value - 3;\n  }\n  result result & (1 << (input_value & 0xff)) - 1U |\n         ((1 << (remaining_bits & 0xff)) - 1U & bit_mask) << (input_value & 0xff);\n}\n\n",
            "renaming": {
                "FUN_08006ba0": "bitwise_operation_08006ba0",
                "param_1": "input_value",
                "param_2": "bit_mask",
                "param_3": "result",
                "uVar1": "remaining_bits",
                "return": "result"
            },
            "calling": [
                "FUN_08006cf6"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08006ba0": {
                    "1": "extract_bitwise_values",
                    "3": "apply_bitmask",
                    "8": "bitwise_operation",
                    "5": "extract_bits"
                },
                "param_1": {
                    "7": "input_value",
                    "1": "input_a",
                    "2": "shift_amount",
                    "3": "bit_offset"
                },
                "param_2": {
                    "1": "original_data",
                    "3": "bitmask",
                    "7": "bit_mask",
                    "2": "source_value"
                },
                "param_3": {
                    "3": "result",
                    "1": "value_2",
                    "2": "value"
                },
                "uVar1": {
                    "2": "bit_count",
                    "1": "shift",
                    "10": "remaining_bits",
                    "9": "shift_amount"
                },
                "param_1_or_value": {
                    "1": "new_bit_position"
                },
                "param_1 & 0xff": {
                    "1": "bits_shifted"
                },
                "param_1 - 3": {
                    "1": "updated_bits_to_keep"
                },
                "1 << (param_1 & 0xff)": {
                    "1": "shifted_one_by_input_value1"
                },
                "1 << (uVar1 & 0xff)": {
                    "1": "shifted_one_by_temp_value"
                },
                "return": {
                    "2": "result"
                },
                "param_1 (within if statement)": {
                    "1": "updated_input_bit"
                },
                "param_1 (within else statement)": {
                    "1": "updated_input_bit"
                },
                "uVar1 (within if statement)": {
                    "1": "bit_mask"
                },
                "uVar1 (within else statement)": {
                    "1": "bit_mask"
                },
                "func_result": {
                    "1": "result"
                },
                "param_1_check": {
                    "1": "is_less_than_three"
                },
                "param_1_temp": {
                    "1": "adjusted_input_value"
                },
                "param_1_shifted": {
                    "1": "shifted_input_value"
                },
                "uVar1_shifted": {
                    "1": "shifted_bit_count"
                },
                "param_1 & 7": {
                    "1": "input_value1_bitwise_and7"
                },
                "3": {
                    "1": "constant_three"
                },
                "4": {
                    "1": "constant_four"
                },
                "7": {
                    "1": "constant_seven"
                },
                "param_1 + 4": {
                    "1": "input_value1_plus_four"
                },
                "0": {
                    "1": "constant_zero"
                },
                "(1 << (param_1 & 0xff)) - 1U": {
                    "1": "bitmask2"
                },
                "uVar1 & 0xff": {
                    "1": "shift2"
                }
            }
        },
        "FUN_08006c04": {
            "entrypoint": "0x08006c04",
            "current_name": "extract_bits_08006c04",
            "code": "\nvoid extract_bits_08006c04(uint input_value,uint bit_offset,uint *output_value_1,uint *output_value_2)\n\n{\n  uint shift_amount;\n  \n  bit_offset = bit_offset & 7;\n  shift_amount = 7 - bit_offset;\n  if (3 < shift_amount) {\n    shift_amount = 4;\n  }\n  if (bit_offset + 4 < 7) {\n    bit_offset = 0;\n  }\n  else {\n    bit_offset = bit_offset - 3;\n  }\n  *output_value_1 = (1 << (shift_amount & 0xff)) - 1U & input_value >> (bit_offset & 0xff);\n  *output_value_2 = (1 << (bit_offset & 0xff)) - 1U & input_value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006c04": "extract_bits_08006c04",
                "param_1": "input_value",
                "param_2": "bit_offset",
                "param_3": "output_value_1",
                "param_4": "output_value_2",
                "uVar1": "shift_amount"
            },
            "calling": [
                "FUN_08006d98"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08006c04": {
                    "1": "extract_sub_bits",
                    "2": "bitwise_shift_and_mask",
                    "24": "extract_bits"
                },
                "param_1": {
                    "7": "input",
                    "17": "input_value",
                    "2": "input_data",
                    "1": "input_modified"
                },
                "param_2": {
                    "1": "num_bits_modified",
                    "7": "bit_position",
                    "2": "shift_amount",
                    "3": "num_bits"
                },
                "param_3": {
                    "7": "output_value_1",
                    "1": "output_number1",
                    "4": "result1",
                    "2": "result_1"
                },
                "param_4": {
                    "1": "bits_extracted",
                    "4": "output2",
                    "7": "output_value2",
                    "2": "result_2"
                },
                "uVar1": {
                    "8": "remaining_bits",
                    "1": "bit_difference",
                    "12": "shift_amount",
                    "2": "bit_count",
                    "3": "num_bits"
                },
                "*param_3": {
                    "1": "extracted_value1"
                },
                "*param_4": {
                    "1": "output_value2"
                },
                "PTR_": {
                    "1": ""
                },
                "DAT_": {
                    "1": ""
                },
                "1 << (uVar1 & 0xff)": {
                    "1": "mask_1"
                },
                "1 << (param_2 & 0xff)": {
                    "1": "mask_2"
                },
                "param_2Var1": {
                    "1": "offset"
                },
                "param_2Var2": {
                    "1": "extracted_bits_offset"
                },
                "param_2 & 0xff": {
                    "1": "shift_amount"
                },
                "param_1 >> (param_2 & 0xff)": {
                    "1": "value_to_shift"
                },
                "param_2 + 4": {
                    "1": "shift_threshold"
                },
                "count": {
                    "1": "num_bits"
                }
            }
        },
        "FUN_08006c70": {
            "entrypoint": "0x08006c70",
            "current_name": "infinite_loop_08006c70",
            "code": "\nvoid infinite_loop_08006c70(void)\n\n{\n  sync_barrier(0xf);\n  sync_barrier(0xf);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08006c70": "infinite_loop_08006c70",
                "DataSynchronizationBarrier": "sync_barrier"
            },
            "calling": [
                "FUN_08006d66"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08006c70": {
                    "1": "infinite_loop_barrier",
                    "12": "infinite_loop",
                    "5": "continuous_loop",
                    "7": "run_infinite_loop"
                },
                "DataSynchronizationBarrier": {
                    "17": "sync_barrier",
                    "5": "synchronize_data",
                    "1": "sync"
                },
                "0xf": {
                    "1": "sync_flag",
                    "2": "barrier_value"
                },
                "warning_block": {
                    "1": "infinite_loop_block"
                }
            }
        },
        "FUN_08006c9c": {
            "entrypoint": "0x08006c9c",
            "current_name": "check_and_set_priority_08006c9c",
            "code": "\n\n\nbool check_and_set_priority_08006c9c(int input_value)\n\n{\n  bool is_valid;\n  \n  is_valid = input_value - 1U < 0x1000000;\n  if (is_valid) {\n    _DAT_e000e014 = input_value + -1;\n    set_interrupt_priority(0xffffffff,0xf);\n    _DAT_e000e018 = 0;\n    _DAT_e000e010 = 7;\n  }\n  return !is_valid;\n}\n\n",
            "renaming": {
                "FUN_08006c9c": "check_and_set_priority_08006c9c",
                "param_1": "input_value",
                "bVar1": "is_valid",
                "NVIC_SetPriority": "set_interrupt_priority"
            },
            "calling": [
                "FUN_08006d72"
            ],
            "called": [
                "FUN_08006b00"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08006c9c": {
                    "1": "reverse_and_initialize",
                    "2": "check_and_configure_priority",
                    "5": "check_and_set_priority"
                },
                "param_1": {
                    "1": "original_value",
                    "2": "byte_value",
                    "18": "input_value",
                    "5": "value"
                },
                "bVar1": {
                    "2": "is_less_than_threshold",
                    "4": "is_in_range",
                    "1": "is_valid_address",
                    "6": "is_valid",
                    "3": "is_value_valid"
                },
                "_DAT_e000e014": {
                    "1": "memory_offset",
                    "3": "updated_value"
                },
                "_DAT_e000e018": {
                    "1": "variable2",
                    "3": "interrupt_flag"
                },
                "_DAT_e000e010": {
                    "1": "value2",
                    "2": "priority_level"
                },
                "FUN_08006b00": {
                    "2": "do_something",
                    "1": "update"
                },
                "param_2": {
                    "2": "uint_value"
                },
                "NVIC_SetPriority": {
                    "2": "set_interrupt_priority",
                    "1": "set_priority"
                }
            }
        },
        "FUN_08006ce0": {
            "entrypoint": "0x08006ce0",
            "current_name": "set_priority_grouping_08006ce0",
            "code": "\nvoid set_priority_grouping_08006ce0(undefined4 priority_group)\n\n{\n  NVIC_SetPriorityGrouping(priority_group);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006ce0": "set_priority_grouping_08006ce0",
                "param_1": "priority_group"
            },
            "calling": [
                "FUN_080059b4"
            ],
            "called": [
                "FUN_08006950"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08006ce0": {
                    "19": "set_priority_grouping",
                    "1": "set_nvic_priority_group",
                    "2": "set_interrupt_priority_grouping",
                    "4": "set_nvic_priority_grouping"
                },
                "param_1": {
                    "1": "interrupt",
                    "2": "param",
                    "3": "priority",
                    "15": "priority_group"
                },
                "FUN_08006950": {
                    "5": "set_priority",
                    "2": "update_priority",
                    "1": "perform_operation",
                    "4": "do_something"
                }
            }
        },
        "FUN_08006cf6": {
            "entrypoint": "0x08006cf6",
            "current_name": "set_interrupt_priority_08006cf6",
            "code": "\nvoid set_interrupt_priority_08006cf6(char priority_group,undefined4 priority_group,undefined4 sub_priority)\n\n{\n  undefined4 priority_grouping;\n  \n  priority_grouping = get_priority_grouping();\n  priority_grouping = encode_priority(priority_grouping,priority_group,sub_priority);\n  set_priority_level((int)priority_group,priority_grouping);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006cf6": "set_interrupt_priority_08006cf6",
                "param_1": "priority_group",
                "param_2": "priority_group",
                "param_3": "sub_priority",
                "uVar1": "priority_grouping",
                "NVIC_GetPriorityGrouping": "get_priority_grouping",
                "NVIC_EncodePriority": "encode_priority",
                "NVIC_SetPriority": "set_priority_level"
            },
            "calling": [
                "FUN_08007a70"
            ],
            "called": [
                "FUN_08006b00",
                "FUN_08006ba0",
                "FUN_08006998"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08006cf6": {
                    "13": "set_interrupt_priority",
                    "1": "set_priority_level",
                    "9": "set_priority"
                },
                "param_1": {
                    "3": "peripheral",
                    "7": "priority_group",
                    "1": "interrupt_id",
                    "6": "interrupt_number"
                },
                "param_2": {
                    "1": "preemption_priority",
                    "2": "sub_priority",
                    "4": "priority",
                    "3": "subpriority",
                    "8": "priority_group",
                    "7": "preempt_priority"
                },
                "param_3": {
                    "1": "priority_group",
                    "6": "priority",
                    "3": "subpriority",
                    "12": "sub_priority",
                    "2": "preempt_priority"
                },
                "uVar1": {
                    "1": "grouping",
                    "12": "priority_grouping",
                    "3": "priority_encoding",
                    "6": "priority_group"
                },
                "FUN_08006b00": {
                    "2": "set_interrupt_priority",
                    "1": "set_irq_priority",
                    "5": "configure_interrupt"
                },
                "FUN_08006ba0": {
                    "1": "get_priority",
                    "14": "encode_priority",
                    "2": "encode_interrupt_priority"
                },
                "FUN_08006998": {
                    "19": "get_priority_grouping"
                },
                "NVIC_GetPriorityGrouping": {
                    "2": "get_priority_grouping"
                },
                "NVIC_EncodePriority": {
                    "2": "encode_priority"
                },
                "NVIC_SetPriority": {
                    "1": "set_priority"
                }
            }
        },
        "FUN_08006d2e": {
            "entrypoint": "0x08006d2e",
            "current_name": "set_bit_in_memory_08006d2e",
            "code": "\nvoid set_bit_in_memory_08006d2e(char input_byte)\n\n{\n  set_bit_in_memory_08006d2e((int)input_byte);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006d2e": "set_bit_in_memory_08006d2e",
                "param_1": "input_byte",
                "set_bit_in_memory_080069b4": "set_bit_in_memory"
            },
            "calling": [],
            "called": [
                "FUN_080069b4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08006d2e": {
                    "1": "set_bit_in_memory_function",
                    "28": "set_bit_in_memory"
                },
                "param_1": {
                    "30": "input_byte",
                    "1": "byte_to_set"
                },
                "set_bit_in_memory_080069b4": {
                    "2": "set_bit_in_memory"
                }
            }
        },
        "FUN_08006d4a": {
            "entrypoint": "0x08006d4a",
            "current_name": "disable_irq_08006d4a",
            "code": "\nvoid disable_irq_08006d4a(char irq_number)\n\n{\n  NVIC_DisableIRQ((int)irq_number);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006d4a": "disable_irq_08006d4a",
                "param_1": "irq_number"
            },
            "calling": [],
            "called": [
                "FUN_080069e4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08006d4a": {
                    "7": "disable_interrupt",
                    "24": "disable_irq"
                },
                "param_1": {
                    "2": "byte_value",
                    "1": "irq_data",
                    "6": "interrupt_number",
                    "16": "irq_number"
                },
                "FUN_080069e4": {
                    "2": "disable_irq",
                    "1": "handle_byte"
                }
            }
        },
        "FUN_08006d66": {
            "entrypoint": "0x08006d66",
            "current_name": "reset_system_08006d66",
            "code": "\nvoid reset_system_08006d66(void)\n\n{\n  NVIC_SystemReset();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006d66": "reset_system_08006d66"
            },
            "calling": [],
            "called": [
                "FUN_08006c70"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08006d66": {
                    "31": "reset_system"
                },
                "FUN_08006c70": {
                    "2": "initialize",
                    "9": "perform_cleanup",
                    "1": "perform_initial_setup",
                    "12": "perform_reset",
                    "4": "perform_initialization"
                }
            }
        },
        "FUN_08006d72": {
            "entrypoint": "0x08006d72",
            "current_name": "configure_sys_tick_08006d72",
            "code": "\nundefined4 configure_sys_tick_08006d72(undefined4 config_value)\n\n{\n  undefined4 config_result;\n  \n  config_result = SysTick_Config(config_value);\n  return config_result;\n}\n\n",
            "renaming": {
                "FUN_08006d72": "configure_sys_tick_08006d72",
                "param_1": "config_value",
                "uVar1": "config_result"
            },
            "calling": [
                "FUN_080059b4"
            ],
            "called": [
                "FUN_08006c9c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08006d72": {
                    "15": "initialize_sys_tick",
                    "16": "configure_sys_tick"
                },
                "param_1": {
                    "1": "config_param",
                    "24": "config_value",
                    "2": "tick_interval"
                },
                "uVar1": {
                    "7": "config_result",
                    "1": "return_value",
                    "3": "systick_config_result",
                    "5": "result",
                    "4": "config_status"
                },
                "FUN_08006c9c": {
                    "1": "is_param_greater"
                }
            }
        },
        "FUN_08006d8a": {
            "entrypoint": "0x08006d8a",
            "current_name": "get_priority_grouping_08006d8a",
            "code": "\nundefined4 get_priority_grouping_08006d8a(void)\n\n{\n  undefined4 priority_grouping;\n  \n  priority_grouping = get_grouping_value();\n  return priority_grouping;\n}\n\n",
            "renaming": {
                "FUN_08006d8a": "get_priority_grouping_08006d8a",
                "uVar1": "priority_grouping",
                "NVIC_GetPriorityGrouping": "get_grouping_value"
            },
            "calling": [],
            "called": [
                "FUN_08006998"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08006d8a": {
                    "1": "get_priority_group",
                    "21": "get_priority_grouping",
                    "7": "get_nvic_priority_grouping"
                },
                "uVar1": {
                    "8": "priority_group",
                    "22": "priority_grouping"
                },
                "NVIC_GetPriorityGrouping": {
                    "1": "get_grouping_value"
                },
                "FUN_08006998": {
                    "5": "get_priority",
                    "1": "get_priority_level"
                },
                "<original_function_name>": {
                    "1": "get_priority_grouping"
                },
                "<original_variable_name_1>": {
                    "1": "priority_grouping"
                },
                "<original_variable_name_2>": {
                    "1": "result"
                }
            }
        },
        "FUN_08006d98": {
            "entrypoint": "0x08006d98",
            "current_name": "decode_and_set_priority_08006d98",
            "code": "\nvoid decode_and_set_priority_08006d98(char input_byte,undefined4 output_param_1,undefined4 output_param_2,undefined4 output_param_3)\n\n{\n  undefined4 priority;\n  \n  priority = NVIC_GetPriority((int)input_byte);\n  NVIC_DecodePriority(priority,output_param_1,output_param_2,output_param_3);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006d98": "decode_and_set_priority_08006d98",
                "param_1": "input_byte",
                "param_2": "output_param_1",
                "param_3": "output_param_2",
                "param_4": "output_param_3",
                "uVar1": "priority"
            },
            "calling": [],
            "called": [
                "FUN_08006b54",
                "FUN_08006c04"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08006d98": {
                    "1": "decode_priority_wrapper",
                    "25": "decode_and_set_priority",
                    "2": "decode_priority"
                },
                "param_1": {
                    "1": "byte_value",
                    "3": "device_id",
                    "2": "input_param",
                    "4": "input_char",
                    "7": "input_byte"
                },
                "param_2": {
                    "1": "decoded_priority_1",
                    "7": "output_param_1",
                    "5": "priority_1",
                    "2": "priority_group"
                },
                "param_3": {
                    "1": "decoded_priority_1",
                    "5": "priority_2",
                    "7": "output_param_2"
                },
                "param_4": {
                    "5": "priority_3",
                    "1": "output_param_2",
                    "7": "output_param_3"
                },
                "uVar1": {
                    "15": "priority",
                    "12": "priority_value",
                    "2": "priority_level"
                },
                "FUN_08006b54": {
                    "1": "decode_byte_priority",
                    "7": "decode_byte",
                    "4": "decode_priority"
                },
                "FUN_08006c04": {
                    "4": "decode_and_set_priority_values",
                    "3": "decode_and_set_priority",
                    "1": "decode_and_set_priority_with_params"
                }
            }
        },
        "FUN_08006dc4": {
            "entrypoint": "0x08006dc4",
            "current_name": "set_pending_irq_08006dc4",
            "code": "\nvoid set_pending_irq_08006dc4(char irq_number)\n\n{\n  set_pending_interrupt((int)irq_number);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006dc4": "set_pending_irq_08006dc4",
                "param_1": "irq_number",
                "NVIC_SetPendingIRQ": "set_pending_interrupt"
            },
            "calling": [],
            "called": [
                "FUN_08006a58"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08006dc4": {
                    "2": "trigger_irq",
                    "4": "set_pending_interrupt",
                    "6": "set_irq_pending",
                    "14": "set_pending_irq",
                    "1": "set_interrupt_pending"
                },
                "param_1": {
                    "1": "irq_data",
                    "2": "irq",
                    "3": "interrupt_number",
                    "14": "irq_number",
                    "4": "interrupt_data"
                },
                "FUN_08006a58": {
                    "2": "handle_interrupt",
                    "1": "process_interrupt",
                    "3": "process_byte",
                    "4": "handle_irq"
                },
                "NVIC_SetPendingIRQ": {
                    "1": "set_pending_interrupt"
                }
            }
        },
        "FUN_08006de0": {
            "entrypoint": "0x08006de0",
            "current_name": "get_pending_irq_status_08006de0",
            "code": "\nundefined4 get_pending_irq_status_08006de0(char irq_number)\n\n{\n  undefined4 pending_irq;\n  \n  pending_irq = check_irq_status((int)irq_number);\n  return pending_irq;\n}\n\n",
            "renaming": {
                "FUN_08006de0": "get_pending_irq_status_08006de0",
                "param_1": "irq_number",
                "uVar1": "pending_irq",
                "NVIC_GetPendingIRQ": "check_irq_status"
            },
            "calling": [],
            "called": [
                "FUN_08006a18"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08006de0": {
                    "2": "get_irq_status",
                    "1": "get_pending_interrupt",
                    "14": "get_pending_irq_status"
                },
                "param_1": {
                    "1": "irq_id",
                    "28": "irq_number"
                },
                "uVar1": {
                    "2": "status",
                    "7": "pending_irq",
                    "1": "pending_irq_status"
                },
                "NVIC_GetPendingIRQ": {
                    "1": "check_irq_status"
                },
                "FUN_08006a18": {
                    "1": "is_interrupt_pending"
                }
            }
        },
        "FUN_08006dfe": {
            "entrypoint": "0x08006dfe",
            "current_name": "clear_pending_irq_08006dfe",
            "code": "\nvoid clear_pending_irq_08006dfe(char irq_number)\n\n{\n  NVIC_ClearPendingIRQ((int)irq_number);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006dfe": "clear_pending_irq_08006dfe",
                "param_1": "irq_number"
            },
            "calling": [],
            "called": [
                "FUN_08006a8c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08006dfe": {
                    "28": "clear_pending_irq",
                    "3": "clear_pending_interrupt"
                },
                "param_1": {
                    "2": "param",
                    "1": "irq_data",
                    "6": "interrupt_number",
                    "14": "irq_number"
                },
                "FUN_08006a8c": {
                    "2": "handle_irq",
                    "5": "clear_irq",
                    "1": "clear_pending_irq_inner"
                }
            }
        },
        "FUN_08006e1a": {
            "entrypoint": "0x08006e1a",
            "current_name": "get_active_interrupt_08006e1a",
            "code": "\nundefined4 get_active_interrupt_08006e1a(char interrupt_number)\n\n{\n  undefined4 active_status;\n  \n  active_status = NVIC_GetActive((int)interrupt_number);\n  return active_status;\n}\n\n",
            "renaming": {
                "FUN_08006e1a": "get_active_interrupt_08006e1a",
                "param_1": "interrupt_number",
                "uVar1": "active_status"
            },
            "calling": [],
            "called": [
                "FUN_08006ac0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08006e1a": {
                    "24": "get_active_interrupt",
                    "5": "get_active_irq",
                    "1": "get_active_interrupts"
                },
                "param_1": {
                    "1": "interrupt_handler",
                    "19": "interrupt_number",
                    "3": "interrupt",
                    "4": "irq_number"
                },
                "uVar1": {
                    "9": "active_interrupt",
                    "2": "active_irq",
                    "11": "active_status"
                }
            }
        },
        "FUN_08006e88": {
            "entrypoint": "0x08006e88",
            "current_name": "update_parameters_08006e88",
            "code": "\n\n\nvoid update_parameters_08006e88(uint *output_params,uint *input_params)\n\n{\n  uint bit_mask;\n  uint bit_value;\n  int index;\n  uint counter;\n  \n  for (counter = 0; counter < 0x10; counter = counter + 1) {\n    bit_mask = 1 << (counter & 0xff);\n    bit_value = *input_params & bit_mask;\n    if (bit_value == bit_mask) {\n      if ((input_params[1] == 2) || (input_params[1] == 0x12)) {\n        bit_mask = input_params[4];\n        output_params[(counter >> 3) + 8] = output_params[(counter >> 3) + 8] & ~(0xf << ((counter & 7) << 2));\n        output_params[(counter >> 3) + 8] = output_params[(counter >> 3) + 8] | bit_mask << ((counter & 7) << 2);\n      }\n      *output_params = *output_params & ~(3 << ((counter & 0x7f) << 1));\n      *output_params = *output_params | (input_params[1] & 3) << ((counter & 0x7f) << 1);\n      if ((((input_params[1] == 1) || (input_params[1] == 2)) || (input_params[1] == 0x11)) || (input_params[1] == 0x12)\n         ) {\n        output_params[2] = output_params[2] & ~(3 << ((counter & 0x7f) << 1));\n        output_params[2] = output_params[2] | input_params[3] << ((counter & 0x7f) << 1);\n        output_params[1] = output_params[1] & ~(1 << (counter & 0xff));\n        output_params[1] = output_params[1] | (input_params[1] >> 4 & 1) << (counter & 0xff);\n      }\n      output_params[3] = output_params[3] & ~(3 << ((counter & 0x7f) << 1));\n      output_params[3] = output_params[3] | input_params[2] << ((counter & 0x7f) << 1);\n      if ((input_params[1] & 0x10000000) != 0) {\n        _DAT_40023844 = _DAT_40023844 | 0x4000;\n        *(uint *)(((counter >> 2) + 2) * 4 + 0x40013800) =\n             ~(0xf << ((counter & 3) << 2)) & *(uint *)(((counter >> 2) + 2) * 4 + 0x40013800);\n        if (output_params == (uint *)0x40020000) {\n          index = 0;\n        }\n        else if (output_params == (uint *)0x40020400) {\n          index = 1;\n        }\n        else if (output_params == (uint *)0x40020800) {\n          index = 2;\n        }\n        else if (output_params == (uint *)0x40020c00) {\n          index = 3;\n        }\n        else if (output_params == (uint *)0x40021000) {\n          index = 4;\n        }\n        else if (output_params == (uint *)0x40021400) {\n          index = 5;\n        }\n        else if (output_params == (uint *)0x40021800) {\n          index = 6;\n        }\n        else if (output_params == (uint *)0x40021c00) {\n          index = 7;\n        }\n        else if (output_params == (uint *)0x40022000) {\n          index = 8;\n        }\n        else if (output_params == (uint *)0x40022400) {\n          index = 9;\n        }\n        else {\n          index = 10;\n        }\n        *(uint *)(((counter >> 2) + 2) * 4 + 0x40013800) =\n             index << ((counter & 3) << 2) | *(uint *)(((counter >> 2) + 2) * 4 + 0x40013800);\n        _DAT_40013c00 = ~bit_value & _DAT_40013c00;\n        _DAT_40013c04 = ~bit_value & _DAT_40013c04;\n        if ((input_params[1] & 0x10000) != 0) {\n          _DAT_40013c00 = bit_value | _DAT_40013c00;\n        }\n        if ((input_params[1] & 0x20000) != 0) {\n          _DAT_40013c04 = bit_value | _DAT_40013c04;\n        }\n        _DAT_40013c08 = ~bit_value & _DAT_40013c08;\n        _DAT_40013c0c = ~bit_value & _DAT_40013c0c;\n        if ((input_params[1] & 0x100000) != 0) {\n          _DAT_40013c08 = bit_value | _DAT_40013c08;\n        }\n        if ((input_params[1] & 0x200000) != 0) {\n          _DAT_40013c0c = bit_value | _DAT_40013c0c;\n        }\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006e88": "update_parameters_08006e88",
                "param_1": "output_params",
                "param_2": "input_params",
                "local_c": "counter",
                "uVar1": "bit_mask",
                "uVar2": "bit_value",
                "iVar3": "index"
            },
            "calling": [
                "FUN_0800640c",
                "FUN_0800778c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08006e88": {
                    "1": "update_register_values",
                    "3": "update_settings",
                    "2": "update_param_values",
                    "10": "update_parameters"
                },
                "param_1": {
                    "2": "config",
                    "1": "old_parameters",
                    "3": "settings",
                    "5": "output_params"
                },
                "param_2": {
                    "4": "input",
                    "2": "source",
                    "1": "bit_values",
                    "6": "input_params",
                    "3": "input_array"
                },
                "local_c": {
                    "3": "index",
                    "1": "bit_position",
                    "8": "bit_index",
                    "12": "counter",
                    "2": "loop_index"
                },
                "uVar1": {
                    "5": "mask",
                    "23": "bit_mask",
                    "1": "bit"
                },
                "uVar2": {
                    "1": "data_bit",
                    "5": "bit_result",
                    "6": "bit_check",
                    "11": "bit_value",
                    "2": "result"
                },
                "iVar3": {
                    "1": "array_index",
                    "21": "index",
                    "3": "register_index"
                },
                "_DAT_40023844": {
                    "1": "global_flag"
                },
                "_DAT_40013800": {
                    "1": "global_memory"
                },
                "_DAT_40013c00": {
                    "1": "register_value_1"
                },
                "_DAT_40013c04": {
                    "1": "register_value_2"
                },
                "_DAT_40013c08": {
                    "1": "register_value_3"
                },
                "_DAT_40013c0c": {
                    "1": "global_flag4"
                }
            }
        },
        "FUN_0800733e": {
            "entrypoint": "0x0800733e",
            "current_name": "update_parameter_0800733e",
            "code": "\nvoid update_parameter_0800733e(int base_address,undefined2 value,char flag)\n\n{\n  if (flag == '\\0') {\n    *(undefined2 *)(base_address + 0x1a) = value;\n  }\n  else {\n    *(undefined2 *)(base_address + 0x18) = value;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800733e": "update_parameter_0800733e",
                "param_1": "base_address",
                "param_2": "value",
                "param_3": "flag"
            },
            "calling": [
                "FUN_0800778c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800733e": {
                    "3": "update_param_value",
                    "1": "set_flag_based_on_condition",
                    "2": "set_parameter",
                    "9": "update_parameter",
                    "6": "update_param",
                    "5": "set_param_value"
                },
                "param_1": {
                    "1": "p",
                    "2": "obj_address",
                    "6": "object_address",
                    "11": "base_address"
                },
                "param_2": {
                    "9": "new_value",
                    "1": "parameter_value",
                    "3": "new_parameter",
                    "13": "value"
                },
                "param_3": {
                    "10": "flag",
                    "1": "is_default",
                    "2": "is_secondary",
                    "5": "condition",
                    "3": "is_null"
                },
                "*(undefined2 *)(param_1 + 0x1a)": {
                    "1": "object.second_value"
                },
                "*(undefined2 *)(param_1 + 0x18)": {
                    "1": "p->second_param_value"
                },
                "param_1 + 0x1a": {
                    "1": "object_ptr->value_1",
                    "2": "address1"
                },
                "param_1 + 0x18": {
                    "1": "offset_2",
                    "2": "address2"
                },
                "0x1a": {
                    "1": "first_value_offset"
                },
                "0x18": {
                    "1": "address_offset2"
                },
                "(*(undefined2 *)(param_1 + 0x1a))": {
                    "1": "previous_parameter2"
                },
                "(*(undefined2 *)(param_1 + 0x18))": {
                    "1": "previous_parameter1"
                }
            }
        },
        "FUN_0800738e": {
            "entrypoint": "0x0800738e",
            "current_name": "handle_gpio_interrupt_0800738e",
            "code": "\n\n\nvoid handle_gpio_interrupt_0800738e(ushort interrupt_flag)\n\n{\n  if ((interrupt_flag & _DAT_40013c14) != 0) {\n    _DAT_40013c14 = (uint)interrupt_flag;\n    handle_gpio_interrupt_0800738e(interrupt_flag);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800738e": "handle_gpio_interrupt_0800738e",
                "param_1": "interrupt_flag",
                "HAL_GPIO_EXTI_Callback": "handle_gpio_interrupt"
            },
            "calling": [],
            "called": [
                "FUN_080073c0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800738e": {
                    "1": "process_callback",
                    "4": "handle_interrupt",
                    "5": "handle_gpio_interrupt",
                    "2": "handle_gpio_exti_interrupt"
                },
                "param_1": {
                    "1": "input_data",
                    "3": "input_value",
                    "6": "interrupt_pin",
                    "7": "interrupt_flag",
                    "2": "gpio_pin"
                },
                "_DAT_40013c14": {
                    "2": "interrupt_status",
                    "1": "gpio_exti_registers",
                    "3": "gpio_state"
                },
                "HAL_GPIO_EXTI_Callback": {
                    "1": "invoke_external_interrupt_handler",
                    "2": "handle_external_interrupt",
                    "3": "handle_gpio_interrupt"
                },
                "FUNC_080073c0": {
                    "1": "perform_task"
                }
            }
        },
        "FUN_080073c0": {
            "entrypoint": "0x080073c0",
            "current_name": "FUNC_080073c0",
            "code": "\nvoid FUNC_080073c0(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080073c0": "FUNC_080073c0"
            },
            "calling": [
                "FUN_0800738e"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080073d4": {
            "entrypoint": "0x080073d4",
            "current_name": "set_bit_in_memory_080073d4",
            "code": "\nvoid set_bit_in_memory_080073d4(ubase_address input)\n\n{\n  *(bit_value *)(((base_address)input >> 4) * 0x400 + 0x4002001a) = (bit_value)(1 << (input & 0xf));\n  return;\n}\n\n",
            "renaming": {
                "FUN_080073d4": "set_bit_in_memory_080073d4",
                "param_1": "input",
                "int": "base_address",
                "short": "bit_value"
            },
            "calling": [
                "FUN_08007520"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080073d4": {
                    "2": "set_bit",
                    "3": "set_bit_at_offset",
                    "1": "set_bit_shift_value",
                    "8": "set_bit_in_memory",
                    "4": "set_bit_value"
                },
                "param_1": {
                    "7": "input",
                    "4": "input_value",
                    "1": "bits_to_set",
                    "2": "offset",
                    "3": "index"
                },
                "*((int)param_1 >> 4) * 0x400 + 0x4002001a": {
                    "1": "memory_address"
                },
                "(short)(1 << (param_1 & 0xf))": {
                    "1": "new_value",
                    "9": "bit_value"
                },
                "int": {
                    "1": "base_address"
                },
                "short": {
                    "1": "short_array",
                    "2": "bit_value"
                },
                "*(short *)(((int)param_1 >> 4) * 0x400 + 0x4002001a)": {
                    "2": "memory_location",
                    "1": "bit_field_address",
                    "4": "memory_address"
                },
                "param_2": {
                    "1": "address"
                },
                "(short *)(((int)param_1 >> 4) * 0x400 + 0x4002001a)": {
                    "1": "target_address"
                },
                "1 << (param_1 & 0xf)": {
                    "2": "bit_mask"
                },
                "<param_1> >> 4": {
                    "1": "array_index"
                },
                "<param_1> & 0xf": {
                    "1": "bit_position"
                },
                "<(int)param_1 >> 4) * 0x400 + 0x4002001a": {
                    "1": "array_offset"
                },
                "short *": {
                    "1": "short_pointer"
                },
                "0x4002001a": {
                    "1": "bitfield_address"
                },
                "0xf": {
                    "1": "lower_bits_mask"
                }
            }
        },
        "FUN_08007402": {
            "entrypoint": "0x08007402",
            "current_name": "set_bit_in_memory_08007402",
            "code": "\nvoid set_bit_in_memory_08007402(uaddress input)\n\n{\n  *(short *)(((address)input >> 4) * 0x400 + 0x40020018) = (short)(1 << (input & 0xf));\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007402": "set_bit_in_memory_08007402",
                "param_1": "input",
                "int": "address"
            },
            "calling": [
                "FUN_080074c8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08007402": {
                    "1": "map_to_memory",
                    "2": "set_bit_in_array",
                    "9": "set_bit_in_memory",
                    "3": "write_bit_to_memory"
                },
                "param_1": {
                    "8": "input",
                    "1": "index",
                    "6": "input_value",
                    "7": "bit_position",
                    "5": "value"
                },
                "short": {
                    "1": "word",
                    "2": "short"
                },
                "(int)param_1 >> 4": {
                    "1": "offset"
                },
                "0x40020018": {
                    "1": "base_address"
                },
                "1 << (param_1 & 0xf)": {
                    "1": "bitmask"
                },
                "*(short *)(((int)param_1 >> 4) * 0x400 + 0x40020018)": {
                    "1": "memory_location",
                    "6": "memory_address"
                },
                "(short)(1 << (param_1 & 0xf))": {
                    "1": "bits_to_write",
                    "7": "bit_value"
                },
                "FUB_08007402": {
                    "1": "set_bit_in_memory"
                },
                "PTR_0x40020018": {
                    "1": "memory_location"
                },
                "*(((int)param_1 >> 4) * 0x400 + 0x40020018)": {
                    "1": "bit_pointer"
                },
                "int": {
                    "1": "int"
                },
                "1": {
                    "1": "one"
                },
                "0xf": {
                    "2": "bit_mask"
                },
                "((int)param_1 >> 4)": {
                    "1": "base_address"
                },
                "*(((int)value >> 4) * 0x400 + 0x40020018)": {
                    "1": "memory_address"
                },
                "(short)(1 << (value & 0xf))": {
                    "2": "bitmask"
                },
                "*(short*)((int)value >> 4) * 0x400 + 0x40020018": {
                    "1": "address"
                }
            }
        },
        "FUN_08007430": {
            "entrypoint": "0x08007430",
            "current_name": "infinite_loop_08007430",
            "code": "\nvoid infinite_loop_08007430(void)\n\n{\n  loop {\n                    /* WARNING: Do nothing block with infinite loop */\n  } condition( true );\n}\n\n",
            "renaming": {
                "FUN_08007430": "infinite_loop_08007430",
                "do": "loop",
                "while": "condition"
            },
            "calling": [
                "FUN_08007436"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08007430": {
                    "31": "infinite_loop"
                },
                "<no change>": {
                    "1": ""
                },
                "DAT_XXXXXXXX": {
                    "1": "unimportant_data"
                },
                "do": {
                    "1": "while",
                    "2": "loop"
                },
                "while": {
                    "1": "condition"
                },
                "original_variable_name_1": {
                    "1": "counter"
                },
                "<no_changes>": {
                    "1": "<no_changes>"
                },
                "original_variable_name_2": {
                    "1": "result"
                },
                "original_variable_name_3": {
                    "1": "temp_var"
                },
                "true": {
                    "1": "condition",
                    "3": "true"
                },
                "<original_variable_name_1>": {
                    "1": "<new_variable_name_1>"
                },
                "<original_variable_name_2>": {
                    "1": "<new_variable_name_2>"
                },
                "<original_variable_name_n>": {
                    "1": "<new_variable_name_n>"
                },
                "PTR_": {
                    "1": "ptr"
                },
                "DAT_": {
                    "1": "dat"
                }
            }
        },
        "FUN_08007436": {
            "entrypoint": "0x08007436",
            "current_name": "initialize_system_08007436",
            "code": "\n\n\nvoid initialize_system_08007436(void)\n\n{\n  int result;\n  undefined4 oscillator_config;\n  undefined4 config_param2;\n  undefined4 config_param3;\n  undefined4 config_param4;\n  undefined4 config_param5;\n  undefined4 config_param6;\n  undefined4 config_param7;\n  undefined4 config_param8;\n  undefined4 clock_config1;\n  undefined4 clock_config2;\n  undefined4 clock_config3;\n  undefined4 clock_config4;\n  undefined4 clock_config5;\n  \n  _DAT_40023840 = _DAT_40023840 | 0x10000000;\n  _DAT_40007000 = _DAT_40007000 | 0xc000;\n  oscillator_config = 1;\n  config_param2 = 1;\n  config_param3 = 2;\n  config_param4 = 0x400000;\n  config_param5 = 8;\n  config_param6 = 0x150;\n  config_param7 = 2;\n  config_param8 = 7;\n  result = configure_oscillator(&oscillator_config);\n  if (result != 0) {\n    handle_error();\n  }\n  clock_config1 = 0xf;\n  clock_config2 = 2;\n  clock_config3 = 0;\n  clock_config4 = 0x1400;\n  clock_config5 = 0x1000;\n  result = configure_clock(&clock_config1,5);\n  if (result != 0) {\n    handle_error();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007436": "initialize_system_08007436",
                "local_4c": "oscillator_config",
                "local_48": "config_param2",
                "local_34": "config_param3",
                "local_30": "config_param4",
                "local_2c": "config_param5",
                "local_28": "config_param6",
                "local_24": "config_param7",
                "local_20": "config_param8",
                "local_1c": "clock_config1",
                "local_18": "clock_config2",
                "local_14": "clock_config3",
                "local_10": "clock_config4",
                "local_c": "clock_config5",
                "iVar1": "result",
                "HAL_RCC_OscConfig": "configure_oscillator",
                "HAL_RCC_ClockConfig": "configure_clock",
                "Error_Handler": "handle_error"
            },
            "calling": [
                "FUN_08007540"
            ],
            "called": [
                "FUN_08007430",
                "FUN_0800618c",
                "FUN_08005cec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08007436": {
                    "4": "configure_system",
                    "1": "initialize_clock",
                    "8": "initialize_system",
                    "2": "configure_system_clock"
                },
                "local_4c": {
                    "1": "config_flag1",
                    "3": "oscillator_config1",
                    "2": "param1",
                    "5": "config_param1",
                    "14": "oscillator_config"
                },
                "local_48": {
                    "1": "oscillator_config_2",
                    "2": "param2",
                    "5": "oscillator_config2"
                },
                "local_34": {
                    "1": "config_flag3",
                    "2": "unused2",
                    "3": "clock_config",
                    "4": "oscillator_config3",
                    "5": "config_param3"
                },
                "local_30": {
                    "2": "osc_config_param4",
                    "1": "config_flag4",
                    "5": "config_param4",
                    "4": "oscillator_config4"
                },
                "local_2c": {
                    "1": "config5",
                    "5": "config_param5",
                    "4": "oscillator_config5",
                    "2": "unused4"
                },
                "local_28": {
                    "1": "ahb_frequency",
                    "5": "config_param6",
                    "2": "param6",
                    "4": "oscillator_config6"
                },
                "local_24": {
                    "4": "oscillator_config7",
                    "1": "osc_config7",
                    "5": "config_param7",
                    "2": "param7"
                },
                "local_20": {
                    "1": "osc_config7",
                    "4": "oscillator_config8",
                    "2": "param8",
                    "5": "config_param8"
                },
                "local_1c": {
                    "1": "clock_param1",
                    "6": "clock_config_param1",
                    "8": "clock_config1",
                    "5": "clock_config"
                },
                "local_18": {
                    "6": "clock_config_param2",
                    "9": "clock_config2",
                    "1": "sys_clk_divider",
                    "2": "unused8"
                },
                "local_14": {
                    "1": "sys_config_msi_range",
                    "9": "clock_config3",
                    "6": "clock_config_param3",
                    "2": "unused9"
                },
                "local_10": {
                    "2": "unused10",
                    "1": "param8",
                    "9": "clock_config4",
                    "6": "clock_config_param4"
                },
                "local_c": {
                    "9": "clock_config5",
                    "1": "pllpcfg",
                    "2": "unused11",
                    "6": "clock_config_param5"
                },
                "iVar1": {
                    "1": "config_status",
                    "3": "return_value",
                    "8": "result"
                },
                "HAL_RCC_OscConfig": {
                    "1": "configure_oscillators",
                    "3": "configure_oscillator"
                },
                "HAL_RCC_ClockConfig": {
                    "4": "configure_clock"
                },
                "_DAT_40023840": {
                    "1": "peripheral_config"
                },
                "_DAT_40007000": {
                    "1": "clock_config"
                },
                "FUN_08007430": {
                    "1": "configure_osc",
                    "2": "configure_oscillator"
                },
                "FUN_0800618c": {
                    "1": "perform_oscillation_config"
                },
                "FUN_08005cec": {
                    "1": "perform_operation"
                },
                "param_1": {
                    "1": "input_array"
                },
                "param_2": {
                    "1": "input_value"
                },
                "Error_Handler": {
                    "2": "handle_error"
                }
            }
        },
        "FUN_080074c8": {
            "entrypoint": "0x080074c8",
            "current_name": "handle_interrupts_080074c8",
            "code": "\nvoid handle_interrupts_080074c8(uint interrupt_flags)\n\n{\n  if ((interrupt_flags & 1) != 0) {\n    set_gpio(0x3e);\n  }\n  if ((DAT_20000e4c != 0) && ((interrupt_flags & 0x1e) != 0)) {\n    handle_limits_interrupt();\n  }\n  if ((DAT_20000e50 != 0) && ((interrupt_flags & 0x80) != 0)) {\n    handle_buttons_interrupt(interrupt_flags);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080074c8": "handle_interrupts_080074c8",
                "param_1": "interrupt_flags",
                "gpio_set": "set_gpio",
                "limits_isr": "handle_limits_interrupt",
                "buttons_isr": "handle_buttons_interrupt"
            },
            "calling": [
                "FUN_08007930"
            ],
            "called": [
                "FUN_08007402",
                "FUN_08003a18",
                "FUN_0800195c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080074c8": {
                    "7": "handle_interrupts",
                    "1": "handle_button_events",
                    "6": "handle_interrupt",
                    "2": "process_interrupts",
                    "3": "handle_gpio_interrupt"
                },
                "param_1": {
                    "1": "config_flags",
                    "2": "event_flags",
                    "17": "interrupt_flags",
                    "3": "param"
                },
                "gpio_set": {
                    "1": "set_button_gpio_state",
                    "15": "set_gpio",
                    "3": "set_gpio_pin"
                },
                "DAT_20000e4c": {
                    "7": "limits_enabled",
                    "1": "data_1",
                    "2": "check_limits"
                },
                "limits_isr": {
                    "4": "handle_limits",
                    "1": "handle_limits_event",
                    "2": "check_limits",
                    "9": "handle_limits_interrupt"
                },
                "DAT_20000e50": {
                    "1": "is_buttons_enabled",
                    "2": "check_buttons",
                    "8": "buttons_enabled"
                },
                "buttons_isr": {
                    "6": "handle_buttons",
                    "1": "button_interrupt",
                    "2": "handle_buttons_isr",
                    "9": "handle_buttons_interrupt"
                },
                "0x1e": {
                    "1": "limits_mask"
                },
                "0x80": {
                    "1": "bit_mask2"
                },
                "param_1 & 0x1e": {
                    "1": "limit_interrupt_flags"
                },
                "param_1 & 0x80": {
                    "1": "button_interrupt_flag"
                }
            }
        },
        "FUN_08007520": {
            "entrypoint": "0x08007520",
            "current_name": "clear_gpio_08007520",
            "code": "\nvoid clear_gpio_08007520(uint input_value)\n\n{\n  if ((input_value & 1) != 0) {\n    clear_gpio_08007520(0x3e);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007520": "clear_gpio_08007520",
                "param_1": "input_value",
                "gpio_clr": "clear_gpio"
            },
            "calling": [
                "FUN_08007930"
            ],
            "called": [
                "FUN_080073d4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08007520": {
                    "10": "clear_gpio",
                    "1": "clear_gpio_if_param_bit_is_set",
                    "4": "clear_gpio_if_odd",
                    "2": "clear_gpio_bit_if_odd",
                    "3": "clear_gpio_bit"
                },
                "param_1": {
                    "3": "value",
                    "1": "param",
                    "17": "input_value"
                },
                "gpio_clr": {
                    "2": "clear_pin",
                    "7": "clear_gpio",
                    "1": "clear_gpio_bit"
                },
                "FUN_080073d4": {
                    "1": "set_gpio_bit",
                    "2": "clear_bit"
                }
            }
        },
        "FUN_08007540": {
            "entrypoint": "0x08007540",
            "current_name": "initialize_system_08007540",
            "code": "\nundefined4 initialize_system_08007540(undefined4)\n\n{\n  initialize_hal();\n  configure_system_clock();\n  initialize_gpio();\n  initialize_timers();\n  initialize_debounce();\n  initialize_usart();\n  start_fork_server(0);\n  execute_grbl_main();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08007540": "initialize_system_08007540",
                "HAL_Init": "initialize_hal",
                "SystemClock_Config": "configure_system_clock",
                "gpio_init": "initialize_gpio",
                "timers_init": "initialize_timers",
                "debounce_init": "initialize_debounce",
                "usart_init": "initialize_usart",
                "startForkserver": "start_fork_server",
                "grbl_main": "execute_grbl_main",
                "void": "undefined4"
            },
            "calling": [
                "FUN_080092c4"
            ],
            "called": [
                "FUN_080079c0",
                "FUN_0800778c",
                "FUN_08005984",
                "FUN_08007436",
                "FUN_08007e08",
                "FUN_080059b4",
                "FUN_08001ddc",
                "FUN_08008190"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08007540": {
                    "2": "initialize",
                    "1": "initialize_and_start",
                    "19": "initialize_system",
                    "3": "initialize_and_start_grbl"
                },
                "HAL_Init": {
                    "1": "initialize_hardware_layer",
                    "4": "initialize_hardware_abstraction_layer",
                    "5": "initialize_hardware",
                    "16": "initialize_hal"
                },
                "SystemClock_Config": {
                    "1": "",
                    "26": "configure_system_clock"
                },
                "gpio_init": {
                    "1": "",
                    "26": "initialize_gpio"
                },
                "timers_init": {
                    "1": "",
                    "26": "initialize_timers"
                },
                "debounce_init": {
                    "1": "initialize_debouncing",
                    "24": "initialize_debounce"
                },
                "usart_init": {
                    "26": "initialize_usart",
                    "1": ""
                },
                "startForkserver": {
                    "1": "",
                    "9": "start_forkserver",
                    "17": "start_fork_server"
                },
                "grbl_main": {
                    "1": "main_loop",
                    "2": "run_grbl",
                    "6": "run_grbl_main",
                    "10": "execute_grbl_main",
                    "4": "execute_grbl"
                },
                "FUN_080079c0": {
                    "1": "configure_io_pins",
                    "2": "initialize_hal",
                    "3": "initialize_hardware_abstraction_layer"
                },
                "FUN_0800778c": {
                    "3": "configure",
                    "1": "execute_function_b",
                    "4": "configure_system_clock"
                },
                "FUN_08005984": {
                    "1": "function_with_param_1",
                    "2": "perform_task",
                    "5": "initialize_gpio"
                },
                "FUN_08007436": {
                    "1": "execute_08007436",
                    "2": "initialize_variables",
                    "5": "initialize_timers"
                },
                "FUN_08007e08": {
                    "1": "initialize_function_4",
                    "5": "initialize_debounce",
                    "3": "initialize_usart"
                },
                "FUN_080059b4": {
                    "1": "get_status",
                    "5": "initialize_usart"
                },
                "FUN_08001ddc": {
                    "1": "perform_initialization",
                    "2": "start_fork_server",
                    "3": "start_forkserver"
                },
                "FUN_08008190": {
                    "1": "execute_08008190",
                    "3": "execute_grbl_main"
                },
                " HAL_Init": {
                    "1": ""
                },
                "void": {
                    "1": "undefined4"
                },
                "param_1": {
                    "1": "param"
                },
                "0": {
                    "1": "default_param"
                }
            }
        },
        "FUN_0800756c": {
            "entrypoint": "0x0800756c",
            "current_name": "initialize_system_0800756c",
            "code": "\n\n\nvoid initialize_system_0800756c(void)\n\n{\n  _DAT_40023808 = 0;\n  _DAT_40023804 = 0x24003010;\n  _DAT_40023800 = _DAT_40023800 & 0xfef2ffff | 1;\n  _DAT_4002380c = 0;\n  _DAT_e000ed08 = 0x8000000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800756c": "initialize_system_0800756c"
            },
            "calling": [
                "FUN_080092c4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800756c": {
                    "1": "initialize_data",
                    "6": "initialize_hardware",
                    "7": "initialize_registers",
                    "2": "initialize_peripherals",
                    "8": "initialize_system",
                    "3": "initialize_memory"
                },
                "_DAT_40023804": {
                    "1": "system_clock",
                    "8": "base_address",
                    "3": "control_register"
                },
                "_DAT_40023800": {
                    "1": "clear_bit_mask",
                    "2": "config_register",
                    "13": "control_register"
                },
                "_DAT_e000ed08": {
                    "4": "interrupt_enable_register",
                    "1": "stack_pointer",
                    "3": "system_control"
                },
                "_DAT_40023808": {
                    "1": "flag_register",
                    "3": "status_register"
                },
                "_DAT_4002380c": {
                    "1": "system_error",
                    "3": "status_register"
                },
                "initializeHardware": {
                    "1": "initialize_hardware"
                },
                "controlRegister": {
                    "1": "control_register"
                },
                "configRegister": {
                    "1": "config_register"
                },
                "systemControl": {
                    "1": "system_control"
                },
                "": {
                    "1": ""
                }
            }
        },
        "FUN_080076c8": {
            "entrypoint": "0x080076c8",
            "current_name": "update_bit_080076c8",
            "code": "\nvoid update_bit_080076c8(uint input)\n\n{\n  *(uint *)(((int)input >> 4) * 0x400 + 0x40020014) =\n       *(uint *)(((int)input >> 4) * 0x400 + 0x40020014) ^ 1 << (input & 0xf);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080076c8": "update_bit_080076c8",
                "param_1": "input"
            },
            "calling": [
                "FUN_08007756"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080076c8": {
                    "4": "toggle_bit_in_memory",
                    "1": "bitwise_toggle",
                    "2": "update_bit_in_memory",
                    "7": "update_bit",
                    "3": "update_bit_in_array"
                },
                "param_1": {
                    "12": "input",
                    "9": "input_value",
                    "3": "bit_position",
                    "5": "bit_index",
                    "1": "input_val"
                },
                "*(((int)param_1 >> 4) * 0x400 + 0x40020014)": {
                    "1": "memory_address"
                },
                "*(uint *)(((int)param_1 >> 4) * 0x400 + 0x40020014)": {
                    "2": "memory_location",
                    "1": "memory_address",
                    "3": "bit_array"
                },
                "(param_1 & 0xf)": {
                    "2": "bit_position",
                    "1": "bit_value"
                },
                "param_1 & 0xf": {
                    "5": "bit_position",
                    "2": "bit_offset"
                },
                "param_1 >> 4": {
                    "1": "shifted_value",
                    "2": "shifted_input"
                },
                "PTR_fun_output": {
                    "1": "output"
                },
                "param_2": {
                    "1": "uint_array"
                },
                "PTR_int": {
                    "1": "array_base_address"
                },
                "new_val": {
                    "1": "new_value"
                },
                "*(uint *)": {
                    "1": "memory_address"
                },
                "0x400": {
                    "1": "block_size"
                },
                "0x40020014": {
                    "1": "base_address"
                },
                "1 << (param_1 & 0xf)": {
                    "1": "bit_mask"
                },
                "*(uint *)(((int)param_1 >> 4) * 0x400 + 0x40020014) ^ 1 << (param_1 & 0xf)": {
                    "1": "new_value"
                },
                "PTR_fun_080076c8": {
                    "1": "data_ptr"
                },
                "^(1 << (param_1 & 0xf))": {
                    "1": "bit_to_toggle"
                }
            }
        },
        "FUN_08007756": {
            "entrypoint": "0x08007756",
            "current_name": "toggle_led_and_debounce_08007756",
            "code": "\nvoid toggle_led_and_debounce_08007756(void)\n\n{\n  uint current_tick;\n  \n  current_tick = get_current_tick();\n  if ((current_tick & 0x1ff) == 0) {\n    toggle_gpio(0x3c);\n  }\n  if ((current_tick & 0xf) == 0) {\n    handle_debounce();\n  }\n  increment_tick();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007756": "toggle_led_and_debounce_08007756",
                "HAL_GetTick": "get_current_tick",
                "gpio_toggle": "toggle_gpio",
                "debounce_isr": "handle_debounce",
                "HAL_IncTick": "increment_tick",
                "uVar1": "current_tick"
            },
            "calling": [],
            "called": [
                "FUN_080076c8",
                "FUN_08007930",
                "FUN_08005a84",
                "FUN_08005a68"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08007756": {
                    "1": "update_gpio_and_debounce",
                    "2": "update_gpio_and_tick",
                    "5": "update_gpi_oand_debounce"
                },
                "uint uVar1": {
                    "1": "current_tick"
                },
                "HAL_GetTick": {
                    "1": "get_tick_value",
                    "4": "get_system_tick",
                    "10": "get_current_tick",
                    "3": "get_tick_count",
                    "2": "get_tick"
                },
                "gpio_toggle": {
                    "1": "toggle_gpio_pin",
                    "2": "toggle_led",
                    "23": "toggle_gpio"
                },
                "debounce_isr": {
                    "3": "handle_debounce_interrupt",
                    "1": "execute_debounce_isr",
                    "4": "debounce_interrupt",
                    "7": "handle_debounce",
                    "5": "perform_debounce"
                },
                "HAL_IncTick": {
                    "2": "increment_tick_count",
                    "1": "increase_system_tick",
                    "23": "increment_tick"
                },
                "uVar1": {
                    "1": "system_tick",
                    "19": "current_tick",
                    "3": "tick_value",
                    "2": "tick"
                },
                "0x3c": {
                    "1": "gpio_pin"
                },
                "param_1": {
                    "1": "parameter"
                },
                "PARAM_1": {
                    "1": "param1"
                },
                "FUN_080076c8": {
                    "1": "update_param1"
                },
                "FUN_08007930": {
                    "1": "perform_action"
                },
                "FUN_08005a84": {
                    "1": "get_something"
                },
                "FUN_08005a68": {
                    "1": "do_something"
                }
            }
        },
        "FUN_0800778c": {
            "entrypoint": "0x0800778c",
            "current_name": "initialize_gpio_0800778c",
            "code": "\n\n\nvoid initialize_gpio_0800778c(void)\n\n{\n  int offset;\n  int pin_config;\n  undefined4 pin_mode1;\n  undefined4 pin_mode2;\n  undefined4 pin_mode3;\n  undefined4 pin_mode4;\n  uint *gpio_pin;\n  uint counter;\n  \n  for (counter = 0; counter < 0x11; counter = counter + 1) {\n    offset = counter * 0x18;\n    gpio_pin = (uint *)(&DAT_0800bcbc + offset);\n    _DAT_40023830 = _DAT_40023830 | 1 << (*gpio_pin >> 4 & 0xff);\n    pin_config = 1 << (*gpio_pin & 0xf);\n    pin_mode1 = *(undefined4 *)(&DAT_0800bcc0 + offset);\n    pin_mode2 = *(undefined4 *)(&DAT_0800bcc4 + offset);\n    pin_mode3 = *(undefined4 *)(&DAT_0800bcc8 + offset);\n    pin_mode4 = *(undefined4 *)(&DAT_0800bccc + offset);\n    initialize_gpio_0800778c_pin(((*gpio_pin >> 4) + 0x100080) * 0x400,&pin_config);\n    if (-1 < (int)gpio_pin[5]) {\n      write_gpio_pin(((*gpio_pin >> 4) + 0x100080) * 0x400,1 << (*gpio_pin & 0xf) & 0xffff,\n                        gpio_pin[5] & 0xff);\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800778c": "initialize_gpio_0800778c",
                "local_24": "pin_config",
                "local_20": "pin_mode1",
                "local_1c": "pin_mode2",
                "local_18": "pin_mode3",
                "local_14": "pin_mode4",
                "local_10": "gpio_pin",
                "local_c": "counter",
                "iVar1": "offset",
                "HAL_GPIO_Init": "initialize_gpio_pin",
                "HAL_GPIO_WritePin": "write_gpio_pin"
            },
            "calling": [
                "FUN_08007540"
            ],
            "called": [
                "FUN_08006e88",
                "FUN_0800733e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800778c": {
                    "1": "configure_gpio_pins",
                    "12": "initialize_gpio_pins",
                    "16": "initialize_gpio"
                },
                "param_1": {
                    "1": "gpio_data"
                },
                "param_2": {
                    "1": "pin_value_array"
                },
                "local_24": {
                    "1": "pin_direction",
                    "2": "pin_state",
                    "8": "pin_config",
                    "6": "pin_mode"
                },
                "local_20": {
                    "1": "gpio_init_1",
                    "2": "gpio_config1",
                    "3": "pin_mode1"
                },
                "local_1c": {
                    "1": "pin_mode1",
                    "3": "pin_mode2",
                    "2": "gpio_config2"
                },
                "local_18": {
                    "1": "pin_mode_speed",
                    "2": "gpio_init3",
                    "3": "pin_mode3"
                },
                "local_14": {
                    "2": "gpio_config4",
                    "1": "register_4",
                    "3": "pin_mode4"
                },
                "local_10": {
                    "2": "gpio_pins",
                    "1": "gpio_base",
                    "4": "pin_config",
                    "6": "gpio_pin",
                    "5": "pin_address"
                },
                "local_c": {
                    "6": "index",
                    "2": "pin_index",
                    "5": "i",
                    "10": "counter",
                    "1": "loop_index"
                },
                "iVar1": {
                    "16": "offset",
                    "8": "index"
                },
                "_DAT_40023830": {
                    "1": "gpio_port1_register"
                },
                "DAT_0800bcbc": {
                    "1": "gpio_port1_bit_positions"
                },
                "DAT_0800bcc0": {
                    "1": "gpio_init_param1_array"
                },
                "DAT_0800bcc4": {
                    "1": "gpio_init_param2_array"
                },
                "DAT_0800bcc8": {
                    "1": "gpio_init_param3_array"
                },
                "DAT_0800bccc": {
                    "1": "gpio_init_param4_array"
                },
                "HAL_GPIO_Init": {
                    "1": "initialize_gpio_pin"
                },
                "HAL_GPIO_WritePin": {
                    "1": "write_gpio_pin"
                },
                "FUN_08006e88": {
                    "1": "get_gpio_config"
                },
                "FUN_0800733e": {
                    "1": "write_gpio_pin"
                }
            }
        },
        "FUN_08007854": {
            "entrypoint": "0x08007854",
            "current_name": "check_bit_08007854",
            "code": "\nunsigned_integer check_bit_08007854(unsigned_integer input_value)\n\n{\n  bit *(unsigned_integer *)(((integer)input_value >> 4) * 0x400 + 0x40020010) >> (input_value & 0xf) & 1;\n}\n\n",
            "renaming": {
                "FUN_08007854": "check_bit_08007854",
                "param_1": "input_value",
                "return": "bit",
                "uint": "unsigned_integer",
                "int": "integer"
            },
            "calling": [
                "FUN_08007884"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08007854": {
                    "1": "get_bit_from_uint",
                    "8": "check_bit",
                    "7": "get_bit_value",
                    "3": "check_bit_value",
                    "2": "extract_bit_from_uint"
                },
                "param_1": {
                    "9": "input",
                    "1": "input_uint",
                    "14": "input_value"
                },
                "*(uint *)(((int)param_1 >> 4) * 0x400 + 0x40020010)": {
                    "2": "memory_address",
                    "1": "bit_array"
                },
                "param_1 & 0xf": {
                    "6": "bit_offset",
                    "1": "bit_index"
                },
                "0x400": {
                    "1": "block_size"
                },
                "0x40020010": {
                    "2": "base_address"
                },
                "*(uint *)(((int)param_1 >> 4) * 0x400 + 0x40020010) >> (param_1 & 0xf) & 1": {
                    "1": "result"
                },
                "input_value": {
                    "1": "input_value"
                },
                "(param_1 & 0xf)": {
                    "2": "bit_position",
                    "1": "bit_offset"
                },
                "param_2": {
                    "1": "n/a"
                },
                "param_1 >> 4": {
                    "1": "block_index"
                },
                "return": {
                    "1": "bit"
                },
                "original_variable_name_1": {
                    "1": "multiplier"
                },
                "original_variable_name_2": {
                    "1": "bit_offset"
                },
                "uint": {
                    "1": "unsigned_integer"
                },
                "int": {
                    "1": "integer"
                },
                "PTR_40020010": {
                    "1": "base_address"
                },
                "*(((int)param_1 >> 4) * 0x400 + 0x40020010)": {
                    "1": "bit_address"
                }
            }
        },
        "FUN_08007884": {
            "entrypoint": "0x08007884",
            "current_name": "read_gpio_values_08007884",
            "code": "\nuint read_gpio_values_08007884(void)\n\n{\n  int gpio_value_0x36;\n  int gpio_value_0x37;\n  int gpio_value_0x38;\n  int gpio_value_0x39;\n  int gpio_value_5;\n  uint gpio_value_0;\n  \n  gpio_value_0x36 = read_gpio(0x36);\n  gpio_value_0x37 = read_gpio(0x37);\n  gpio_value_0x38 = read_gpio(0x38);\n  gpio_value_0x39 = read_gpio(0x39);\n  gpio_value_5 = read_gpio(0xf);\n  gpio_value_0 = read_gpio(0);\n  return gpio_value_0 | gpio_value_0x36 << 4 | gpio_value_0x37 << 3 | gpio_value_0x38 << 2 | gpio_value_0x39 << 1 | gpio_value_5 << 7;\n}\n\n",
            "renaming": {
                "FUN_08007884": "read_gpio_values_08007884",
                "iVar1": "gpio_value_0x36",
                "iVar2": "gpio_value_0x37",
                "iVar3": "gpio_value_0x38",
                "iVar4": "gpio_value_0x39",
                "iVar5": "gpio_value_5",
                "uVar6": "gpio_value_0",
                "gpio_rd": "read_gpio"
            },
            "calling": [
                "FUN_08007930"
            ],
            "called": [
                "FUN_08007854"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08007884": {
                    "1": "get_gpio_state",
                    "2": "get_combined_gpio_values",
                    "5": "get_gpio_values",
                    "13": "read_gpio_values"
                },
                "param_1": {
                    "1": "gpio_mask",
                    "2": "gpio_register",
                    "3": "gpio_value"
                },
                "iVar1": {
                    "1": "value0x36",
                    "6": "gpio_value_1",
                    "3": "gpio_0x36_value",
                    "2": "gpio_0x36"
                },
                "iVar2": {
                    "6": "gpio_value_2",
                    "3": "gpio_0x37_value",
                    "2": "value_0x37",
                    "1": "gpio_data2"
                },
                "iVar3": {
                    "1": "gpio_result_3",
                    "6": "gpio_value_3",
                    "2": "gpio_0x38",
                    "3": "gpio_0x38_value"
                },
                "iVar4": {
                    "1": "value4",
                    "6": "gpio_value_4",
                    "2": "gpio_0x39",
                    "3": "gpio_0x39_value"
                },
                "iVar5": {
                    "3": "gpio_0xf_value",
                    "1": "value0xf",
                    "6": "gpio_value_5",
                    "5": "gpio_value_0xf"
                },
                "uVar6": {
                    "1": "gpio_result_6",
                    "7": "gpio_value_0",
                    "2": "pin_0_value",
                    "3": "gpio_0_value"
                },
                "gpio_rd": {
                    "2": "read_gpio_value",
                    "1": "read_gpio_register",
                    "3": "read_gpio"
                }
            }
        },
        "FUN_080078f4": {
            "entrypoint": "0x080078f4",
            "current_name": "calculate_bitwise_or_080078f4",
            "code": "\nuint calculate_bitwise_or_080078f4(void)\n\n{\n  int index;\n  uint result;\n  \n  result = 0;\n  for (index = 0; index < 4; index = index + 1) {\n    result = *(uint *)(&DAT_20000e54 + index * 4) | result;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080078f4": "calculate_bitwise_or_080078f4",
                "local_10": "index",
                "local_c": "result"
            },
            "calling": [
                "FUN_08001994",
                "FUN_08007930"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080078f4": {
                    "1": "combine_four_values",
                    "2": "calculate_combined_value",
                    "8": "combine_values",
                    "11": "calculate_bitwise_or"
                },
                "local_10": {
                    "2": "iteration",
                    "19": "index",
                    "5": "iterator",
                    "3": "counter",
                    "1": "iteration_count"
                },
                "local_c": {
                    "1": "combined_result",
                    "9": "combined_value",
                    "17": "result"
                },
                "time": {
                    "1": "i"
                },
                "result": {
                    "1": "bitwise_or_result"
                }
            }
        },
        "FUN_08007930": {
            "entrypoint": "0x08007930",
            "current_name": "update_input_state_08007930",
            "code": "\nvoid update_input_state_08007930(void)\n\n{\n  int current_index;\n  uint previous_gpio_values;\n  undefined4 debounced_input;\n  uint current_gpio_values;\n  uint changed_gpio_values;\n  \n  current_index = DAT_20000e68;\n  previous_gpio_values = DAT_20000e64;\n  if (DAT_20000e6c != 0) {\n    debounced_input = get_debounced_input;\n    *(undefined4 *)(&DAT_20000e54 + current_index * 4) = debounced_input;\n    if (DAT_20000e68 == 3) {\n      DAT_20000e68 = 0;\n    }\n    else {\n      DAT_20000e68 = DAT_20000e68 + 1;\n    }\n    current_gpio_values = get_debounced_rd;\n    previous_gpio_values = DAT_20000e64;\n    if (current_gpio_values != DAT_20000e64) {\n      changed_gpio_values = ~current_gpio_values & DAT_20000e64;\n      if ((~DAT_20000e64 & current_gpio_values) != 0) {\n        handle_interrupts(~DAT_20000e64 & current_gpio_values);\n      }\n      previous_gpio_values = current_gpio_values;\n      if (changed_gpio_values != 0) {\n        clear_gpio(changed_gpio_values);\n      }\n    }\n  }\n  DAT_20000e64 = previous_gpio_values;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007930": "update_input_state_08007930",
                "debounce_rd": "debounce_read",
                "handle_interrupts_080074c8": "handle_interrupts",
                "clear_gpio_08007520": "clear_gpio",
                "iVar1": "current_index",
                "uVar2": "previous_gpio_values",
                "uVar3": "debounced_input",
                "uVar4": "current_gpio_values",
                "uVar5": "changed_gpio_values",
                "debounce_input()": "get_debounced_input",
                "debounce_rd()": "get_debounced_rd"
            },
            "calling": [
                "FUN_08007756"
            ],
            "called": [
                "FUN_08007884",
                "FUN_080078f4",
                "FUN_080074c8",
                "FUN_08007520"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08007930": {
                    "3": "update_input_values",
                    "1": "update_input_and_clear_flags",
                    "5": "update_input_state",
                    "4": "handle_input",
                    "2": "update_button_state"
                },
                "debounce_input": {
                    "1": "get_debounced_input",
                    "2": "debounce_input"
                },
                "debounce_rd": {
                    "1": "check_rd_debounce",
                    "3": "debounce_read"
                },
                "handle_interrupts_080074c8": {
                    "1": "handle_button_interrupts",
                    "12": "handle_interrupts"
                },
                "clear_gpio_08007520": {
                    "12": "clear_gpio",
                    "1": "clear_gpio_pins"
                },
                "iVar1": {
                    "1": "gpio_index",
                    "4": "input_index",
                    "3": "index",
                    "8": "current_index"
                },
                "uVar2": {
                    "1": "previous_button_state",
                    "7": "previous_gpio_values",
                    "6": "previous_input_value",
                    "3": "previous_value",
                    "2": "previous_gpio_state"
                },
                "uVar3": {
                    "4": "current_input_value",
                    "1": "new_button_state",
                    "2": "debounced_input_value",
                    "12": "debounced_input",
                    "3": "debounced_value"
                },
                "uVar4": {
                    "4": "current_input_value",
                    "1": "read_input",
                    "2": "current_input",
                    "8": "current_gpio_values",
                    "3": "current_value"
                },
                "uVar5": {
                    "6": "changed_bits",
                    "1": "changed_gpio_pins",
                    "2": "changed_inputs",
                    "4": "changed_input_bits",
                    "7": "changed_gpio_values"
                },
                "read_gpio_values_08007884": {
                    "10": "read_gpio_values"
                },
                "calculate_bitwise_or_080078f4": {
                    "1": "calculate_gpio_bitwise_or",
                    "9": "calculate_bitwise_or"
                },
                "uVar1": {
                    "1": "current_index"
                },
                "DAT_20000e68": {
                    "1": "current_index"
                },
                "DAT_20000e64": {
                    "1": "previous_gpio_values"
                },
                "debounce_input()": {
                    "1": "get_debounced_input"
                },
                "debounce_rd()": {
                    "1": "get_debounced_rd"
                },
                "handle_interrupts_080074c8(uint interrupt_flags)": {
                    "1": "handle_interrupts"
                },
                "clear_gpio_08007520(uint input_value)": {
                    "1": "clear_gpio"
                }
            }
        },
        "FUN_080079c0": {
            "entrypoint": "0x080079c0",
            "current_name": "initialize_data_080079c0",
            "code": "\nvoid initialize_data_080079c0(void)\n\n{\n  memset(&DAT_20000e54,0,0x18);\n  DAT_20000e6c = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080079c0": "initialize_data_080079c0"
            },
            "calling": [
                "FUN_08007540"
            ],
            "called": [
                "FUN_0800b430"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080079c0": {
                    "26": "initialize_data",
                    "1": "initialize_data_structure",
                    "2": "initialize_data_structures"
                },
                "FUN_0800b430": {
                    "8": "process_data"
                },
                "param_1": {
                    "2": "data_ptr",
                    "1": "output_buffer",
                    "6": "pointer",
                    "3": "data_pointer"
                },
                "param_2": {
                    "17": "flag",
                    "2": "input_value",
                    "5": "value",
                    "1": "param"
                },
                "param_3": {
                    "2": "length",
                    "1": "size_of_data",
                    "20": "size"
                },
                "DAT_20000e54": {
                    "3": "data_array",
                    "1": "memory_block",
                    "2": "data_structure",
                    "4": "data_buffer"
                },
                "DAT_20000e6c": {
                    "2": "is_initialized",
                    "1": "initialized_flag",
                    "4": "status"
                },
                "undefined4 *param_1": {
                    "1": "array_pointer"
                },
                "undefined param_2": {
                    "1": "value"
                },
                "uint param_3": {
                    "1": "length"
                }
            }
        },
        "FUN_080079e0": {
            "entrypoint": "0x080079e0",
            "current_name": "set_bit_in_memory_080079e0",
            "code": "\nvoid set_bit_in_memory_080079e0(byte input_byte)\n\n{\n  *(integer *)(((uinteger)(integer)(byte_value)input_byte >> 5) * 4 + -0x1fff1f00) = 1 << (input_byte & 0x1f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080079e0": "set_bit_in_memory_080079e0",
                "param_1": "input_byte",
                "char": "byte_value",
                "int": "integer"
            },
            "calling": [
                "FUN_08007a70"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080079e0": {
                    "5": "set_bit_in_array",
                    "2": "set_bit_at_index",
                    "14": "set_bit_in_memory",
                    "1": "set_bit_in_integer"
                },
                "param_1": {
                    "1": "word_ptr",
                    "2": "index",
                    "11": "input_byte",
                    "6": "byte_to_set",
                    "4": "byte_value"
                },
                "*(int *)(((uint)(int)(char)param_1 >> 5) * 4 + -0x1fff1f00)": {
                    "1": "array_address",
                    "2": "bit_array",
                    "5": "memory_address"
                },
                "1 << (param_1 & 0x1f)": {
                    "3": "bit_to_set",
                    "4": "bit_mask",
                    "1": "bit_pattern"
                },
                "*(((uint)(int)(char)byte_input >> 5) * 4 + -0x1fff1f00)": {
                    "1": "array_address"
                },
                "(byte_input & 0x1f)": {
                    "1": "bit_position"
                },
                "char": {
                    "1": "byte_value"
                },
                "((uint)(int)(char)param_1 >> 5) * 4 + -0x1fff1f00": {
                    "1": "array_index"
                },
                "int": {
                    "1": "integer"
                },
                "PTR_": {
                    "1": ""
                },
                "DAT_": {
                    "1": ""
                },
                "(param_1 & 0x1f)": {
                    "1": "bit_offset"
                }
            }
        },
        "FUN_08007a10": {
            "entrypoint": "0x08007a10",
            "current_name": "update_flag_08007a10",
            "code": "\n\n\nvoid update_flag_08007a10(unspecified *input)\n\n{\n  if (input == (unspecified *)0x40000000) {\n    _DAT_40023840 = _DAT_40023840 | 1;\n  }\n  else if (input == (unspecified *)0x40000400) {\n    _DAT_40023840 = _DAT_40023840 | 2;\n  }\n  else if (input == &DAT_40000800) {\n    _DAT_40023840 = _DAT_40023840 | 4;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007a10": "update_flag_08007a10",
                "param_1": "input",
                "undefined": "unspecified"
            },
            "calling": [
                "FUN_08007ad0",
                "FUN_08007d08"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08007a10": {
                    "1": "set_memory_flag",
                    "10": "update_flag",
                    "7": "update_data_flag",
                    "3": "set_flag",
                    "2": "set_flag_based_on_address"
                },
                "param_1": {
                    "8": "input",
                    "6": "address",
                    "1": "input_data",
                    "4": "data_pointer",
                    "3": "input_ptr",
                    "2": "input_param"
                },
                "_DAT_40023840": {
                    "12": "flag",
                    "1": "flags",
                    "3": "flag_register",
                    "4": "data_flag"
                },
                "&DAT_40000800": {
                    "1": "flag_3"
                },
                "undefined": {
                    "1": "type"
                }
            }
        },
        "FUN_08007a70": {
            "entrypoint": "0x08007a70",
            "current_name": "set_priority_and_enable_irq_08007a70",
            "code": "\nvoid set_priority_and_enable_irq_08007a70(undefined *address,undefined4 priority,undefined4 sub_priority)\n\n{\n  undefined interrupt_number;\n  \n  if (address == (undefined *)0x40000000) {\n    interrupt_number = 0x1c;\n  }\n  else if (address == (undefined *)0x40000400) {\n    interrupt_number = 0x1d;\n  }\n  else {\n    if (address != &DAT_40000800) {\n      return;\n    }\n    interrupt_number = 0x1e;\n  }\n  set_priority(interrupt_number,priority,sub_priority);\n  enable_irq(interrupt_number);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007a70": "set_priority_and_enable_irq_08007a70",
                "param_1": "address",
                "param_2": "priority",
                "param_3": "sub_priority",
                "local_c": "interrupt_number",
                "HAL_NVIC_SetPriority": "set_priority",
                "NVIC_EnableIRQ": "enable_irq"
            },
            "calling": [
                "FUN_08007ad0"
            ],
            "called": [
                "FUN_08006cf6",
                "FUN_080079e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08007a70": {
                    "6": "set_and_enable_irq",
                    "4": "set_and_enable_priority",
                    "14": "set_priority_and_enable_irq",
                    "1": "initialize_interrupts"
                },
                "param_1": {
                    "18": "address",
                    "1": "pointer",
                    "6": "base_address",
                    "5": "memory_address"
                },
                "param_2": {
                    "1": "priority_value_1",
                    "12": "priority_group",
                    "5": "priority_level"
                },
                "param_3": {
                    "1": "priority_value_2",
                    "6": "subpriority",
                    "15": "sub_priority",
                    "2": "sub_priority_level"
                },
                "local_c": {
                    "1": "interrupt_line",
                    "9": "interrupt_number",
                    "6": "irq_number",
                    "2": "irq_value",
                    "4": "interrupt_id",
                    "3": "irq_priority"
                },
                "HAL_NVIC_SetPriority": {
                    "2": "set_priority"
                },
                "NVIC_EnableIRQ": {
                    "2": "enable_irq"
                },
                "FUN_08006cf6": {
                    "1": "reverse_some_data"
                },
                "FUN_080079e0": {
                    "1": "process_byte"
                }
            }
        },
        "FUN_08007ad0": {
            "entrypoint": "0x08007ad0",
            "current_name": "initialize_timer_08007ad0",
            "code": "\n\n\nvoid initialize_timer_08007ad0(void)\n\n{\n  enable_timer_clock(0x40000000);\n  _DAT_40000000 = 0;\n  _DAT_40000004 = 0;\n  _DAT_40000008 = 0;\n  _DAT_4000000c = 0;\n  _DAT_40000010 = 0;\n  _DAT_40000018 = 0;\n  _DAT_4000001c = 0;\n  _DAT_40000020 = 0;\n  _DAT_40000024 = 0;\n  _DAT_40000028 = DAT_20000000 / 42000000 - 1;\n  _DAT_4000002c = 0;\n  _DAT_40000034 = 0;\n  _DAT_40000038 = 0;\n  _DAT_4000003c = 0;\n  _DAT_40000040 = 0;\n  _DAT_40000048 = 0;\n  _DAT_4000004c = 0;\n  enable_timer_interrupt(0x40000000,0,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007ad0": "initialize_timer_08007ad0",
                "enable_tim_clock": "enable_timer_clock",
                "enable_tim_interrupt": "enable_timer_interrupt"
            },
            "calling": [
                "FUN_08007e08"
            ],
            "called": [
                "FUN_08007a70",
                "FUN_08007a10"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08007ad0": {
                    "1": "initialize_tim_clock",
                    "22": "initialize_timer",
                    "7": "initialize_timers"
                },
                "FUN_08007a70": {
                    "1": "set_timer_registers",
                    "2": "set_timer_interrupt",
                    "4": "enable_timer_clock"
                },
                "FUN_08007a10": {
                    "1": "enable_timer_clock",
                    "4": "enable_tim_interrupt",
                    "5": "enable_timer_interrupt"
                },
                "enable_tim_clock": {
                    "10": "enable_timer_clock",
                    "1": "set_timer_clock"
                },
                "_DAT_40000000": {
                    "1": "timer_control_register",
                    "2": "timer_register_1"
                },
                "_DAT_40000004": {
                    "1": "timer_counter_register"
                },
                "_DAT_40000008": {
                    "1": "timer_prescaler_register"
                },
                "_DAT_4000000c": {
                    "1": "timer_register_4"
                },
                "_DAT_40000010": {
                    "1": "timer_register_5"
                },
                "_DAT_40000018": {
                    "1": "timer_status_register"
                },
                "_DAT_4000001c": {
                    "1": "timer_event_register"
                },
                "_DAT_40000020": {
                    "1": "timer_capture_compare_register"
                },
                "_DAT_40000024": {
                    "1": "timer_capture_compare_register"
                },
                "_DAT_40000028": {
                    "1": "prescaler_value"
                },
                "_DAT_4000002c": {
                    "1": "timer_prescaler_value_register"
                },
                "_DAT_40000034": {
                    "1": "timer_register_8"
                },
                "_DAT_40000038": {
                    "1": "timer_compare_register"
                },
                "_DAT_4000003c": {
                    "1": "timer_register_10"
                },
                "_DAT_40000040": {
                    "1": "timer_compare_register"
                },
                "_DAT_40000048": {
                    "1": "timer_register_12"
                },
                "_DAT_4000004c": {
                    "1": "timer_register_13"
                },
                "enable_tim_interrupt": {
                    "10": "enable_timer_interrupt"
                },
                "param_1": {
                    "2": "data",
                    "1": "timer_registers",
                    "3": "timer_address"
                },
                "param_2": {
                    "1": "unused_param2",
                    "4": "param2",
                    "2": "value1"
                },
                "param_3": {
                    "1": "value_2",
                    "4": "param3",
                    "2": "value2"
                },
                "initialize_timer": {
                    "1": "initialize_timer"
                },
                "unused_variable_1": {
                    "1": "zero_value"
                },
                "unused_variable_2": {
                    "1": "zero_value"
                },
                "DAT_20000000": {
                    "1": "timer_divisor"
                }
            }
        },
        "FUN_08007b70": {
            "entrypoint": "0x08007b70",
            "current_name": "set_flags_08007b70",
            "code": "\n\n\nvoid set_flags_08007b70(void)\n\n{\n  uint flags;\n  \n  flags = 1;\n  if (_DAT_40000034 != 0) {\n    flags = 3;\n  }\n  if (_DAT_40000038 != 0) {\n    flags = flags | 4;\n  }\n  _DAT_4000000c = _DAT_4000000c | flags;\n  _DAT_40000000 = _DAT_40000000 | 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007b70": "set_flags_08007b70",
                "local_c": "flags"
            },
            "calling": [
                "FUN_08005790"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08007b70": {
                    "1": "set_flag_bits",
                    "3": "set_flags_based_on_conditions",
                    "6": "set_flags",
                    "2": "update_flags",
                    "4": "set_flags_and_values"
                },
                "local_c": {
                    "2": "config_flags",
                    "1": "configuration_flag",
                    "17": "flags",
                    "3": "flag_value"
                },
                "_DAT_40000034": {
                    "7": "condition1",
                    "3": "flag1",
                    "1": "input_a",
                    "2": "condition_1"
                },
                "_DAT_40000038": {
                    "7": "condition2",
                    "1": "input_flag2",
                    "2": "condition_2",
                    "3": "flag2"
                },
                "_DAT_4000000c": {
                    "1": "result"
                },
                "_DAT_40000000": {
                    "1": "global_value"
                }
            }
        },
        "FUN_08007bc2": {
            "entrypoint": "0x08007bc2",
            "current_name": "clear_flags_08007bc2",
            "code": "\n\n\nvoid clear_flags_08007bc2(void)\n\n{\n  tempDATtemp40000000 = tempDATtemp40000000 & 0xfffffffe;\n  tempDATtemp4000000c = tempDATtemp4000000c & 0xfffffff8;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007bc2": "clear_flags_08007bc2",
                "_": "temp"
            },
            "calling": [
                "FUN_080057e4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08007bc2": {
                    "1": "clear_bitwise_flags",
                    "2": "clear_bits",
                    "24": "clear_flags"
                },
                "_DAT_40000000": {
                    "2": "status_flag",
                    "1": "memory_value1",
                    "3": "flags_register",
                    "10": "flag1"
                },
                "_DAT_4000000c": {
                    "1": "another_variable",
                    "2": "control_flag",
                    "3": "control_register",
                    "10": "flag2"
                },
                "": {
                    "2": ""
                },
                "_": {
                    "1": "temp"
                }
            }
        },
        "FUN_08007bf0": {
            "entrypoint": "0x08007bf0",
            "current_name": "update_min_value_08007bf0",
            "code": "\n\n\nvoid update_min_value_08007bf0(uint new_value)\n\n{\n  _DAT_4000002c = new_value;\n  if (new_value <= _DAT_40000024) {\n    _DAT_40000024 = new_value;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007bf0": "update_min_value_08007bf0",
                "param_1": "new_value"
            },
            "calling": [
                "FUN_08005324"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08007bf0": {
                    "1": "update_param_1",
                    "3": "update_minimum_value",
                    "7": "update_min_value",
                    "5": "update_data",
                    "2": "set_minimum_value"
                },
                "param_1": {
                    "1": "new_data",
                    "24": "new_value",
                    "3": "value"
                },
                "_DAT_4000002c": {
                    "1": "maximum",
                    "2": "current_data",
                    "6": "current_min_value",
                    "8": "current_value"
                },
                "_DAT_40000024": {
                    "1": "current_min_value",
                    "2": "min_data",
                    "9": "min_value",
                    "7": "minimum_value"
                }
            }
        },
        "FUN_08007c40": {
            "entrypoint": "0x08007c40",
            "current_name": "set_global_variable_08007c40",
            "code": "\n\n\nvoid set_global_variable_08007c40(undefined4 value)\n\n{\n  _DAT_40000034 = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007c40": "set_global_variable_08007c40",
                "param_1": "value"
            },
            "calling": [
                "FUN_08005790"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08007c40": {
                    "1": "set_data_value",
                    "13": "set_global_variable",
                    "3": "set_data",
                    "2": "set_global_parameter"
                },
                "param_1": {
                    "4": "data",
                    "5": "new_value",
                    "18": "value",
                    "1": "parameter"
                },
                "_DAT_40000034": {
                    "3": "param_value",
                    "1": "global_parameter",
                    "9": "global_variable",
                    "2": "data_pointer"
                },
                "param_2": {
                    "1": "new_param2"
                },
                "undefined4 param_1": {
                    "1": "value"
                },
                "DAT_40000034": {
                    "1": "global_variable"
                }
            }
        },
        "FUN_08007c5e": {
            "entrypoint": "0x08007c5e",
            "current_name": "set_global_variable_08007c5e",
            "code": "\n\n\nvoid set_global_variable_08007c5e(undefined4 value)\n\n{\n  _DAT_40000038 = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007c5e": "set_global_variable_08007c5e",
                "param_1": "value"
            },
            "calling": [
                "FUN_08005790"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08007c5e": {
                    "1": "store_param_in_global_variable",
                    "12": "set_global_variable",
                    "7": "set_data"
                },
                "param_1": {
                    "9": "data",
                    "1": "new_data",
                    "18": "value"
                },
                "_DAT_40000038": {
                    "1": "data_storage",
                    "15": "global_variable",
                    "5": "data_ptr"
                }
            }
        },
        "FUN_08007c7c": {
            "entrypoint": "0x08007c7c",
            "current_name": "handle_interrupts_08007c7c",
            "code": "\n\n\nvoid handle_interrupts_08007c7c(void)\n\n{\n  if (((_DAT_40000010 & 2) != 0) && ((_DAT_4000000c & 2) != 0)) {\n    _DAT_40000010 = _DAT_40000010 & 0xfffffffd;\n    handle_delay_interrupt();\n  }\n  if (((_DAT_40000010 & 4) != 0) && ((_DAT_4000000c & 4) != 0)) {\n    _DAT_40000010 = _DAT_40000010 & 0xfffffffb;\n    handle_pulse_interrupt();\n  }\n  if (((_DAT_40000010 & 1) != 0) && ((_DAT_4000000c & 1) != 0)) {\n    _DAT_40000010 = _DAT_40000010 & 0xfffffffe;\n    handle_period_interrupt();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007c7c": "handle_interrupts_08007c7c",
                "step_delay_isr": "handle_delay_interrupt",
                "step_pulse_isr": "handle_pulse_interrupt",
                "step_period_isr": "handle_period_interrupt"
            },
            "calling": [],
            "called": [
                "FUN_08005778",
                "FUN_080053a0",
                "FUN_08005760"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08007c7c": {
                    "8": "handle_interrupts",
                    "2": "check_and_handle_interrupts",
                    "1": "check_interrupts",
                    "6": "process_interrupts"
                },
                "FUN_08005778": {
                    "4": "step_delay_isr"
                },
                "FUN_080053a0": {
                    "4": "step_pulse_isr"
                },
                "FUN_08005760": {
                    "4": "step_period_isr"
                },
                "_DAT_40000010": {
                    "3": "interrupt_flags",
                    "1": "interrupt_enable_register",
                    "2": "status_register"
                },
                "_DAT_4000000c": {
                    "1": "register_b",
                    "2": "register2",
                    "4": "interrupt_status_register"
                },
                "step_delay_isr": {
                    "1": "execute_delay",
                    "2": "perform_delay_interrupt",
                    "3": "handle_delay_isr",
                    "5": "handle_delay_interrupt"
                },
                "step_pulse_isr": {
                    "1": "perform_pulse_isr",
                    "5": "handle_pulse_interrupt",
                    "2": "perform_pulse_interrupt",
                    "3": "handle_pulse_isr"
                },
                "step_period_isr": {
                    "1": "execute_period_isr",
                    "2": "perform_period_interrupt",
                    "5": "handle_period_interrupt",
                    "3": "handle_period_isr"
                }
            }
        },
        "FUN_08007d08": {
            "entrypoint": "0x08007d08",
            "current_name": "initialize_timers_08007d08",
            "code": "\n\n\nvoid initialize_timers_08007d08(void)\n\n{\n  enable_timer_clock(&DAT_40000800);\n  _DAT_40000800 = 0x80;\n  _DAT_40000804 = 0;\n  _DAT_40000808 = 0;\n  _DAT_4000080c = 0;\n  _DAT_40000810 = 0;\n  _DAT_40000818 = 0x6800;\n  _DAT_4000081c = 0;\n  _DAT_40000820 = 0;\n  _DAT_40000824 = 0;\n  _DAT_40000828 = DAT_20000000 / 4800000 - 1;\n  _DAT_4000082c = 199;\n  _DAT_40000834 = 0;\n  _DAT_40000838 = 100;\n  _DAT_4000083c = 0;\n  _DAT_40000840 = 0;\n  _DAT_40000848 = 0;\n  _DAT_4000084c = 0;\n  _DAT_40000814 = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007d08": "initialize_timers_08007d08",
                "enable_tim_clock": "enable_timer_clock"
            },
            "calling": [
                "FUN_08007e08"
            ],
            "called": [
                "FUN_08007a10"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08007d08": {
                    "3": "initialize_tim_clock",
                    "7": "initialize_timer",
                    "19": "initialize_timers",
                    "1": "init_tim_configuration"
                },
                "param_1": {
                    "3": "timer_config",
                    "1": "undefined_ptr",
                    "2": "param"
                },
                "enable_tim_clock": {
                    "16": "enable_timer_clock",
                    "2": "enable_tim_clock"
                },
                "DAT_40000800": {
                    "1": "timer_register_0"
                },
                "_DAT_40000800": {
                    "1": "timer_config_bit_1",
                    "15": "timer_control_register",
                    "2": "timer_control"
                },
                "_DAT_40000808": {
                    "1": "timer_prescaler_register",
                    "2": "timer_compare_register"
                },
                "_DAT_40000810": {
                    "1": "timer_prescaler_register"
                },
                "_DAT_40000818": {
                    "1": "timer_load_value",
                    "2": "timer_prescaler_register"
                },
                "_DAT_40000828": {
                    "1": "timer_preload_4",
                    "4": "timer_prescaler",
                    "5": "timer_prescaler_value",
                    "2": "timer_prescaler_register"
                },
                "_DAT_4000082c": {
                    "1": "timer_interrupt",
                    "2": "timer_reload",
                    "5": "timer_reload_value"
                },
                "_DAT_40000838": {
                    "1": "timer_capture_compare_register",
                    "2": "timer_counter"
                },
                "_DAT_40000814": {
                    "1": "timer_start",
                    "6": "timer_enable_bit",
                    "5": "timer_enable",
                    "2": "timer_enable_register"
                },
                "DAT_20000000": {
                    "1": "sys_clk_freq"
                },
                "_DAT_40000804": {
                    "1": "timer_register2"
                },
                "_DAT_4000080c": {
                    "1": "timer0_timer0_reload_value"
                },
                "_DAT_4000081c": {
                    "1": "timer_autoreload_register"
                },
                "_DAT_40000820": {
                    "1": "timer_preload_2"
                },
                "_DAT_40000824": {
                    "1": "timer_register_9"
                },
                "_DAT_40000834": {
                    "1": "timer_compare_register2"
                },
                "_DAT_4000083c": {
                    "1": "timer_capture_compare_register"
                },
                "_DAT_40000840": {
                    "1": "timer_status"
                },
                "_DAT_40000848": {
                    "1": "timer_interrupt_enable"
                },
                "_DAT_4000084c": {
                    "1": "timer1_interrupt_status"
                },
                " _DAT_40000808": {
                    "1": "capture_compare_1_register"
                },
                "FUN_08007a10": {
                    "1": "initialize_timer",
                    "7": "enable_tim_clock"
                },
                "*param_1": {
                    "1": "clock_address"
                },
                "_DAT_40000830": {
                    "1": "timer_compare1"
                },
                "enabled_tim_clock": {
                    "1": "enable_timer"
                },
                "set_zero": {
                    "1": "set_to_zero"
                }
            }
        },
        "FUN_08007da8": {
            "entrypoint": "0x08007da8",
            "current_name": "set_flags_08007da8",
            "code": "\n\n\nvoid set_flags_08007da8(void)\n\n{\n  _DAT_40000820 = _DAT_40000820 | 0x10;\n  _DAT_40000800 = _DAT_40000800 | 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007da8": "set_flags_08007da8"
            },
            "calling": [
                "FUN_08007e08"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08007da8": {
                    "1": "set_status_flags",
                    "2": "set_flags_and_status",
                    "3": "set_flags_and_permissions",
                    "6": "set_flags_and_enable",
                    "11": "set_flags"
                },
                "_DAT_40000820": {
                    "5": "flags_register",
                    "1": "register_a",
                    "2": "flag_register1",
                    "10": "flags",
                    "4": "status_register"
                },
                "_DAT_40000800": {
                    "1": "register2",
                    "2": "status_register",
                    "7": "control_register"
                },
                "DAT_40000820": {
                    "1": "flags_register"
                },
                "DAT_40000800": {
                    "1": "control_register"
                },
                "_": {
                    "1": "_"
                },
                "": {
                    "1": ""
                }
            }
        },
        "FUN_08007e08": {
            "entrypoint": "0x08007e08",
            "current_name": "initialize_timers_08007e08",
            "code": "\nvoid initialize_timers_08007e08(void)\n\n{\n  initialize_step_timer();\n  initialize_g540_timer();\n  start_g540_timer();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007e08": "initialize_timers_08007e08",
                "step_timer_init": "initialize_step_timer",
                "g540_timer_init": "initialize_g540_timer",
                "g540_timer_start": "start_g540_timer"
            },
            "calling": [
                "FUN_08007540"
            ],
            "called": [
                "FUN_08007ad0",
                "FUN_08007da8",
                "FUN_08007d08"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08007e08": {
                    "2": "initialize_step_timer",
                    "1": "initialize_machine",
                    "6": "initialize_and_start_timers",
                    "3": "initialize_timer",
                    "14": "initialize_timers"
                },
                "FUN_08007ad0": {
                    "1": "initialize_step",
                    "16": "step_timer_init",
                    "3": "initialize_step_timer"
                },
                "FUN_08007da8": {
                    "1": "initialize_subfunction_2",
                    "2": "initialize_g540",
                    "16": "g540_timer_init"
                },
                "FUN_08007d08": {
                    "3": "start_g540_timer",
                    "1": "function3",
                    "16": "g540_timer_start"
                },
                "step_timer_init": {
                    "11": "initialize_step_timer"
                },
                "g540_timer_init": {
                    "11": "initialize_g540_timer"
                },
                "g540_timer_start": {
                    "11": "start_g540_timer"
                }
            }
        },
        "FUN_08007e1c": {
            "entrypoint": "0x08007e1c",
            "current_name": "write_byte_to_memory_08007e1c",
            "code": "\n\n\nvoid write_byte_to_memory_08007e1c(byte byte_to_send)\n\n{\n  do {\n  } while ((_DAT_40004400 & 0x80) == 0);\n  _DAT_40004404 = (uint)byte_to_send;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007e1c": "write_byte_to_memory_08007e1c",
                "param_1": "byte_to_send"
            },
            "calling": [
                "FUN_0800826a",
                "FUN_08008250"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08007e1c": {
                    "1": "set_byte_to_constant_wait",
                    "3": "send_byte",
                    "4": "write_byte_to_memory",
                    "2": "send_byte_and_wait_for_confirmation"
                },
                "param_1": {
                    "3": "byte_to_set",
                    "2": "byte_value",
                    "11": "byte_to_send",
                    "1": "byte_param",
                    "4": "byte_to_write"
                },
                "_DAT_40004400": {
                    "1": "memory_flag",
                    "2": "memory_status",
                    "4": "status_flag",
                    "9": "status_register"
                },
                "_DAT_40004404": {
                    "1": "register2",
                    "8": "data_register",
                    "4": "memory_address"
                }
            }
        },
        "FUN_08007e58": {
            "entrypoint": "0x08007e58",
            "current_name": "check_flag_set_08007e58",
            "code": "\n\n\nbool check_flag_set_08007e58(void)\n\n{\n  return (_DAT_40004400 & 0x20) != 0;\n}\n\n",
            "renaming": {
                "FUN_08007e58": "check_flag_set_08007e58"
            },
            "calling": [
                "FUN_08008286"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08007e58": {
                    "3": "is_bit_set",
                    "1": "check_flag_value",
                    "4": "check_bit_is_set",
                    "8": "check_flag_set",
                    "2": "check_bit_status"
                },
                "_DAT_40004400": {
                    "4": "flag",
                    "2": "flag_value",
                    "1": "register_value",
                    "3": "bit_flag"
                },
                "0x20": {
                    "2": "bit_mask"
                },
                "PTR_40004400": {
                    "1": "flag_pointer"
                },
                "DAT_40004400": {
                    "1": "bit_field"
                },
                "_DATA_40004400": {
                    "1": "status_register"
                }
            }
        },
        "FUN_08007e84": {
            "entrypoint": "0x08007e84",
            "current_name": "get_lowest_byte_08007e84",
            "code": "\n\n\nuint get_lowest_byte_08007e84(void)\n\n{\n  return _DAT_40004404 & 0xff;\n}\n\n",
            "renaming": {
                "FUN_08007e84": "get_lowest_byte_08007e84"
            },
            "calling": [
                "FUN_08008286"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08007e84": {
                    "2": "get_last_byte",
                    "1": "get_least_significant_byte",
                    "23": "get_lowest_byte"
                },
                "_DAT_40004404": {
                    "8": "data",
                    "3": "data_value",
                    "1": "input_number",
                    "2": "input_value",
                    "4": "input_data"
                },
                "0xff": {
                    "1": "mask"
                },
                "return value": {
                    "1": "lowest_byte"
                }
            }
        },
        "FUN_08007ea4": {
            "entrypoint": "0x08007ea4",
            "current_name": "update_memory_flags_08007ea4",
            "code": "\n\n\nvoid update_memory_flags_08007ea4(undefined *memory_address)\n\n{\n  if (memory_address == (undefined *)0x40011000) {\n    _DAT_40023844 = _DAT_40023844 | 0x10;\n  }\n  else if (memory_address == &DAT_40004400) {\n    _DAT_40023840 = _DAT_40023840 | 0x20000;\n  }\n  else if (memory_address == (undefined *)0x40004800) {\n    _DAT_40023840 = _DAT_40023840 | 0x40000;\n  }\n  else if (memory_address == (undefined *)0x40004c00) {\n    _DAT_40023840 = _DAT_40023840 | 0x80000;\n  }\n  else if (memory_address == (undefined *)0x40005000) {\n    _DAT_40023840 = _DAT_40023840 | 0x100000;\n  }\n  else if (memory_address == (undefined *)0x40011400) {\n    _DAT_40023844 = _DAT_40023844 | 0x20;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007ea4": "update_memory_flags_08007ea4",
                "param_1": "memory_address"
            },
            "calling": [
                "FUN_08008190"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08007ea4": {
                    "1": "process_memory",
                    "20": "update_memory_flags",
                    "5": "update_flags"
                },
                "param_1": {
                    "7": "address",
                    "22": "memory_address",
                    "1": "input_ptr"
                },
                "_DAT_40023844": {
                    "1": "register_a",
                    "7": "memory_flag1",
                    "4": "flag_register1",
                    "2": "flags1",
                    "5": "memory_flags1"
                },
                "_DAT_40023840": {
                    "1": "flags_b",
                    "7": "memory_flag2",
                    "5": "memory_flags2",
                    "4": "flag_register2",
                    "2": "flags2"
                },
                "&DAT_40004400": {
                    "1": "memory_flag_2"
                },
                "0x40004800": {
                    "1": "data_address2"
                },
                "0x40004c00": {
                    "1": "address_d"
                },
                "0x40005000": {
                    "1": "address_e"
                },
                "0x40011400": {
                    "1": "memory_flag_6"
                },
                "0x40011000": {
                    "1": "address_constant_a"
                },
                "DAT_40023844": {
                    "1": "memory_flag1"
                },
                "DAT_40023840": {
                    "1": "memory_flag2"
                },
                "(undefined *)0x40004800": {
                    "1": "ptr2"
                },
                "(undefined *)0x40004c00": {
                    "1": "ptr3"
                },
                "(undefined *)0x40005000": {
                    "1": "ptr4"
                },
                "(undefined *)0x40011000": {
                    "1": "ptr5"
                },
                "(undefined *)0x40011400": {
                    "1": "ptr6"
                },
                "DAT_40004400": {
                    "1": "memory_block_a"
                }
            }
        },
        "FUN_08007f54": {
            "entrypoint": "0x08007f54",
            "current_name": "calculate_clock_divider_08007f54",
            "code": "\nvoid calculate_clock_divider_08007f54(int base_address,int factor)\n\n{\n  ulonglong pclk1_freq;\n  int temp1;\n  int temp2;\n  undefined8 pclk_freq;\n  \n  if ((*(uint *)(base_address + 0xc) & 0x8000) == 0) {\n    if ((base_address != 0x40011000) && (base_address != 0x40011400)) {\n      pclk_freq = get_pclk1_frequency();\n      pclk1_freq = (ulonglong)(uint)((int)pclk_freq * 0x19) / (ulonglong)(uint)(factor << 2);\n      temp1 = get_pclk1_frequency\n                        ((int)pclk_freq,(int)((ulonglong)pclk_freq >> 0x20),(int)(pclk1_freq * 0x51eb851f));\n      temp2 = get_pclk1_frequency();\n      *(uint *)(base_address + 8) =\n           (int)(pclk1_freq / 100) << 4 |\n           (((uint)(temp1 * 0x19) / (uint)(factor << 2) +\n            (int)(((ulonglong)(uint)(temp2 * 0x19) / (ulonglong)(uint)(factor << 2)) / 100) * -100)\n            * 0x10 + 0x32) / 100 & 0xf;\n      return;\n    }\n    pclk_freq = get_pclk2_frequency();\n    pclk1_freq = (ulonglong)(uint)((int)pclk_freq * 0x19) / (ulonglong)(uint)(factor << 2);\n    temp1 = get_pclk2_frequency\n                      ((int)pclk_freq,(int)((ulonglong)pclk_freq >> 0x20),(int)(pclk1_freq * 0x51eb851f));\n    temp2 = get_pclk2_frequency();\n    *(uint *)(base_address + 8) =\n         (int)(pclk1_freq / 100) << 4 |\n         (((uint)(temp1 * 0x19) / (uint)(factor << 2) +\n          (int)(((ulonglong)(uint)(temp2 * 0x19) / (ulonglong)(uint)(factor << 2)) / 100) * -100) *\n          0x10 + 0x32) / 100 & 0xf;\n  }\n  else {\n    if ((base_address != 0x40011000) && (base_address != 0x40011400)) {\n      pclk_freq = get_pclk1_frequency();\n      pclk1_freq = (ulonglong)(uint)((int)pclk_freq * 0x19) / (ulonglong)(uint)(factor << 1);\n      temp1 = get_pclk1_frequency\n                        ((int)pclk_freq,(int)((ulonglong)pclk_freq >> 0x20),(int)(pclk1_freq * 0x51eb851f));\n      temp2 = get_pclk1_frequency();\n      *(uint *)(base_address + 8) =\n           (int)(pclk1_freq / 100) << 4 |\n           (((uint)(temp1 * 0x19) / (uint)(factor << 1) +\n            (int)(((ulonglong)(uint)(temp2 * 0x19) / (ulonglong)(uint)(factor << 1)) / 100) * -100)\n            * 0x10 + 0x32) / 100 & 0xf;\n      return;\n    }\n    pclk_freq = get_pclk2_frequency();\n    pclk1_freq = (ulonglong)(uint)((int)pclk_freq * 0x19) / (ulonglong)(uint)(factor << 1);\n    temp1 = get_pclk2_frequency\n                      ((int)pclk_freq,(int)((ulonglong)pclk_freq >> 0x20),(int)(pclk1_freq * 0x51eb851f));\n    temp2 = get_pclk2_frequency();\n    *(uint *)(base_address + 8) =\n         (int)(pclk1_freq / 100) << 4 |\n         (((uint)(temp1 * 0x19) / (uint)(factor << 1) +\n          (int)(((ulonglong)(uint)(temp2 * 0x19) / (ulonglong)(uint)(factor << 1)) / 100) * -100) *\n          0x10 + 0x32) / 100 & 0xf;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007f54": "calculate_clock_divider_08007f54",
                "param_1": "base_address",
                "param_2": "factor",
                "uVar1": "pclk1_freq",
                "iVar2": "temp1",
                "iVar3": "temp2",
                "uVar4": "pclk_freq",
                "HAL_RCC_GetPCLK1Freq": "get_pclk1_frequency",
                "HAL_RCC_GetPCLK2Freq": "get_pclk2_frequency"
            },
            "calling": [
                "FUN_08008190"
            ],
            "called": [
                "FUN_080066cc",
                "FUN_08006680"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08007f54": {
                    "2": "calculate_pclk",
                    "3": "calculate_and_set_param",
                    "1": "calculate_config_value",
                    "6": "calculate_clock_divider",
                    "4": "calculate_clock_config",
                    "5": "calculate_clock_frequency"
                },
                "param_1": {
                    "7": "address",
                    "4": "device_address",
                    "2": "config_address",
                    "1": "clock_source_address",
                    "14": "base_address"
                },
                "param_2": {
                    "4": "prescaler",
                    "1": "clock_divider",
                    "2": "divider_value",
                    "5": "multiplier",
                    "6": "factor"
                },
                "uVar1": {
                    "1": "pclk1_freq_times_multiplier_divided_by4",
                    "2": "pclk_divider",
                    "4": "pclk1_freq"
                },
                "iVar2": {
                    "1": "calculation1",
                    "2": "calculated_value2",
                    "3": "temp1"
                },
                "iVar3": {
                    "1": "calculated_clock2",
                    "2": "frequency2",
                    "3": "temp2"
                },
                "uVar4": {
                    "1": "pclk_frequency2",
                    "3": "pclk2_freq",
                    "17": "pclk_freq",
                    "6": "pclk_frequency"
                },
                "HAL_RCC_GetPCLK1Freq": {
                    "1": "get_frequency_pclk1",
                    "4": "get_apb1_clock_frequency",
                    "16": "get_pclk1_frequency"
                },
                "HAL_RCC_GetPCLK2Freq": {
                    "1": "get_pclk2_freq",
                    "16": "get_pclk2_frequency",
                    "4": "get_apb2_clock_frequency"
                }
            }
        },
        "FUN_08008190": {
            "entrypoint": "0x08008190",
            "current_name": "initialize_usart_08008190",
            "code": "\n\n\nvoid initialize_usart_08008190(void)\n\n{\n  enable_clock(&DAT_40004400);\n  _DAT_4000440c = _DAT_4000440c & 0xffff400c | 0xc;\n  _DAT_40004410 = _DAT_40004410 & 0xffff8090;\n  _DAT_40004414 = _DAT_40004414 & 0xfffff000;\n  _DAT_40004400 = _DAT_40004400 & 0xfffffc00;\n  configure_baud_rate(&DAT_40004400,0x1c200);\n  _DAT_4000440c = _DAT_4000440c | 0x2000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008190": "initialize_usart_08008190",
                "enable_usart_clock": "enable_clock",
                "set_baud_rate": "configure_baud_rate"
            },
            "calling": [
                "FUN_08007540"
            ],
            "called": [
                "FUN_08007f54",
                "FUN_08007ea4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08008190": {
                    "1": "initialize_usart_interface",
                    "20": "initialize_usart",
                    "2": "initialize_uart",
                    "7": "configure_usart"
                },
                "enable_usart_clock": {
                    "10": "enable_clock",
                    "1": "activate_usart_clock"
                },
                "set_baud_rate": {
                    "1": "set_baud_rate",
                    "4": "configure_baud_rate",
                    "3": "set_usart_baud_rate"
                },
                "param_1": {
                    "1": "config_param",
                    "2": "usart_config",
                    "5": "clock_address",
                    "3": "param1"
                },
                "param_2": {
                    "3": "param2",
                    "1": "baud_rate_value",
                    "20": "baud_rate",
                    "2": "param_2"
                },
                "FUN_08007f54": {
                    "15": "enable_usart_clock",
                    "1": "set_baud_rate",
                    "2": "configure_usart"
                },
                "FUN_08007ea4": {
                    "1": "configure_usart_interface",
                    "18": "set_baud_rate"
                },
                "_DAT_40004400": {
                    "1": "usart_config_4",
                    "3": "baud_rate_register"
                },
                "_DAT_4000440c": {
                    "1": "usart_register_value",
                    "3": "control_register"
                },
                "_DAT_40004410": {
                    "1": "interrupt_enable_register",
                    "3": "status_register"
                },
                "_DAT_40004414": {
                    "1": "buffer_limit_register",
                    "3": "data_register"
                },
                "param_3": {
                    "1": "baudrate"
                },
                "0x1c200": {
                    "1": "baud_rate_value"
                },
                "undefined *param_1": {
                    "1": "unused"
                }
            }
        },
        "FUN_08008244": {
            "entrypoint": "0x08008244",
            "current_name": "FUNC_08008244",
            "code": "\nvoid FUNC_08008244(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008244": "FUNC_08008244"
            },
            "calling": [
                "FUN_08001ddc"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08008250": {
            "entrypoint": "0x08008250",
            "current_name": "print_character_08008250",
            "code": "\nvoid print_character_08008250(undefined character)\n\n{\n  print_character_08008250(character);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008250": "print_character_08008250",
                "param_1": "character",
                "usart_putc": "print_character"
            },
            "calling": [
                "FUN_08003826",
                "FUN_0800369c",
                "FUN_080037fc",
                "FUN_08003778",
                "FUN_080036c6",
                "FUN_080036f0"
            ],
            "called": [
                "FUN_08007e1c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08008250": {
                    "2": "transmit_data",
                    "1": "send_data_via_usart",
                    "4": "send_data",
                    "10": "print_character",
                    "3": "send_character_to_usart"
                },
                "param_1": {
                    "9": "data",
                    "1": "input_data",
                    "16": "character",
                    "3": "byte_to_send"
                },
                "FUN_08007e1c": {
                    "2": "send_character",
                    "1": "send_byte_via_usart",
                    "8": "send_byte",
                    "4": "send_byte_to_usart",
                    "3": "usart_putc"
                },
                "usart_putc": {
                    "1": "send_serial_byte"
                }
            }
        },
        "FUN_0800826a": {
            "entrypoint": "0x0800826a",
            "current_name": "print_character_0800826a",
            "code": "\nundefined4 print_character_0800826a(undefined character)\n\n{\n  send_character(character);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800826a": "print_character_0800826a",
                "param_1": "character",
                "usart_putc": "send_character"
            },
            "calling": [],
            "called": [
                "FUN_08007e1c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800826a": {
                    "1": "send_byte_to_usart",
                    "3": "send_data",
                    "22": "print_character",
                    "2": "transmit_data"
                },
                "param_1": {
                    "5": "data",
                    "1": "byte",
                    "23": "character",
                    "2": "byte_to_send"
                },
                "FUN_08007e1c": {
                    "3": "send_character",
                    "8": "send_byte",
                    "2": "usart_putc",
                    "1": "send_uart_byte"
                },
                "usart_putc": {
                    "1": "transmit_character",
                    "2": "send_character"
                }
            }
        },
        "FUN_08008286": {
            "entrypoint": "0x08008286",
            "current_name": "process_serial_input_08008286",
            "code": "\nundefined process_serial_input_08008286(void)\n\n{\n  undefined received_byte;\n  int data_available;\n  \n  data_available = check_data_available();\n  if (data_available != 0) {\n    received_byte = get_received_byte();\n    data_available = process_received_byte(received_byte);\n    if (data_available == 0) {\n      return received_byte;\n    }\n  }\n  return 0xff;\n}\n\n",
            "renaming": {
                "FUN_08008286": "process_serial_input_08008286",
                "uVar1": "received_byte",
                "iVar2": "data_available",
                "usart_tstc": "check_data_available",
                "usart_getc": "get_received_byte",
                "serial_rx_hook": "process_received_byte"
            },
            "calling": [
                "FUN_08003f34"
            ],
            "called": [
                "FUN_08005900",
                "FUN_08007e84",
                "FUN_08007e58"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08008286": {
                    "1": "receive_and_process_serial_data",
                    "3": "receive_data",
                    "2": "process_serial_data",
                    "8": "process_serial_input",
                    "5": "read_serial_data",
                    "4": "receive_serial_data"
                },
                "uVar1": {
                    "2": "received_data",
                    "19": "received_byte",
                    "4": "received_character",
                    "3": "received_char",
                    "1": "input_data"
                },
                "iVar2": {
                    "10": "data_available",
                    "1": "is_character_available",
                    "3": "has_input",
                    "4": "has_data"
                },
                "usart_tstc": {
                    "3": "check_data_available",
                    "1": "is_input_available",
                    "2": "check_serial_data"
                },
                "usart_getc": {
                    "1": "get_data_from_buffer",
                    "3": "get_received_byte",
                    "2": "get_serial_byte"
                },
                "serial_rx_hook": {
                    "5": "process_received_byte",
                    "1": "process_serial_byte",
                    "2": "process_serial_data",
                    "4": "process_received_data"
                },
                "FUN_08005900": {
                    "1": "process_received_byte"
                },
                "FUN_08007e84": {
                    "1": "get_serial_status"
                },
                "FUN_08007e58": {
                    "1": "check_serial_interrupt"
                }
            }
        },
        "FUN_080082ba": {
            "entrypoint": "0x080082ba",
            "current_name": "FUNC_080082ba",
            "code": "\nvoid FUNC_080082ba(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080082ba": "FUNC_080082ba"
            },
            "calling": [
                "FUN_08001ddc"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080082d0": {
            "entrypoint": "0x080082d0",
            "current_name": "reverse_binary_operation_080082d0",
            "code": "\nulonglong reverse_binary_operation_080082d0(uint input1,uint input2,uint input3,uint input4)\n\n{\n  int shift1;\n  byte carry;\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  uint temp4;\n  uint temp5;\n  int shift2;\n  uint result1;\n  uint result2;\n  uint result3;\n  uint result4;\n  bool flag1;\n  bool flag2;\n  bool flag3;\n  \n  temp4 = input4 ^ 0x80000000;\n  result1 = input2 << 1;\n  input4 = input4 << 1;\n  flag1 = ((input2 ^ temp4) & 0x7fffffff) == 0;\n  flag2 = flag1 && input1 == input3;\n  if (!flag1 || input1 != input3) {\n    flag2 = (result1 | input1) == 0;\n  }\n  if (!flag2) {\n    flag2 = (input4 | input3) == 0;\n  }\n  shift2 = (int)result1 >> 0x15;\n  if (!flag2) {\n    flag2 = shift2 == -1;\n  }\n  shift1 = (int)input4 >> 0x15;\n  if (!flag2) {\n    flag2 = shift1 == -1;\n  }\n  if (flag2) {\n    if (shift2 == -1 || shift1 == -1) {\n      result1 = temp4;\n      result3 = input3;\n      if (shift2 == -1) {\n        result1 = input2;\n        result3 = input1;\n      }\n      if (shift2 != -1 || shift1 != -1) {\n        input3 = result3;\n        temp4 = result1;\n      }\n      flag2 = (result3 | result1 << 0xc) == 0;\n      if (flag2) {\n        flag2 = (input3 | temp4 << 0xc) == 0;\n      }\n      if (flag2) {\n        flag2 = result1 == temp4;\n      }\n      if (!flag2) {\n        result1 = result1 | 0x80000;\n      }\n      return CONCAT44(result1,result3);\n    }\n    if (((input2 ^ temp4) & 0x7fffffff) != 0 || input1 != input3) {\n      if ((result1 | input1) == 0) {\n        input1 = input3;\n        input2 = temp4;\n      }\n      return CONCAT44(input2,input1);\n    }\n    if (input2 != temp4) {\n      return 0;\n    }\n    if (result1 >> 0x15 == 0) {\n      flag2 = (input1 & 0x80000000) != 0;\n      temp4 = input2 * 2 + (uint)flag2;\n      if (CARRY4(input2,input2) || CARRY4(input2 * 2,(uint)flag2)) {\n        temp4 = temp4 | 0x80000000;\n      }\n      return CONCAT44(temp4,input1 << 1);\n    }\n    if (result1 < 0xffc00000) {\n      return CONCAT44(input2 + 0x100000,input1);\n    }\n    input2 = input2 & 0x80000000;\nLAB_08008514:\n    return (ulonglong)(input2 | 0x7ff00000) << 0x20;\n  }\n  result1 = result1 >> 0x15;\n  input4 = input4 >> 0x15;\n  result3 = input4 - result1;\n  flag2 = result3 != 0;\n  if (input4 < result1) {\n    result3 = -result3;\n  }\n  result2 = input1;\n  temp5 = input2;\n  if (flag2 && result1 <= input4) {\n    result1 = result1 + result3;\n    result2 = input3;\n    temp5 = temp4;\n    input3 = input1;\n    temp4 = input2;\n  }\n  if (0x36 < result3) {\n    return CONCAT44(temp5,result2);\n  }\n  temp2 = temp5 & 0xfffff | 0x100000;\n  if ((temp5 & 0x80000000) != 0) {\n    flag2 = result2 != 0;\n    result2 = -result2;\n    temp2 = -temp2 - (uint)flag2;\n  }\n  temp5 = temp4 & 0xfffff | 0x100000;\n  if ((temp4 & 0x80000000) != 0) {\n    flag2 = input3 != 0;\n    input3 = -input3;\n    temp5 = -temp5 - (uint)flag2;\n  }\n  if (result1 == result3) {\n    temp5 = temp5 ^ 0x100000;\n    if (result1 == 0) {\n      temp2 = temp2 ^ 0x100000;\n      result1 = 1;\n    }\n    else {\n      result3 = result3 - 1;\n    }\n  }\n  temp4 = -result3 + 0x20;\n  if ((int)result3 < 0x21) {\n    result4 = input3 << (temp4 & 0xff);\n    input3 = input3 >> (result3 & 0xff);\n    temp1 = result2 + input3;\n    temp3 = temp5 << (temp4 & 0xff);\n    temp4 = temp1 + temp3;\n    temp2 = temp2 + CARRY4(result2,input3) + ((int)temp5 >> (result3 & 0xff)) +\n            (uint)CARRY4(temp1,temp3);\n  }\n  else {\n    result4 = temp5 << (-result3 + 0x40 & 0xff);\n    if (input3 != 0) {\n      result4 = result4 | 2;\n    }\n    temp5 = (int)temp5 >> (result3 - 0x20 & 0xff);\n    temp4 = result2 + temp5;\n    temp2 = temp2 + ((int)temp5 >> 0x1f) + (uint)CARRY4(result2,temp5);\n  }\n  input2 = temp2 & 0x80000000;\n  result3 = temp2;\n  if ((int)temp2 < 0) {\n    flag2 = result4 == 0;\n    result4 = -result4;\n    result3 = -temp4;\n    temp4 = -(uint)!flag2 - temp4;\n    result3 = -(uint)(flag2 <= result3) - temp2;\n  }\n  if (0xfffff < result3) {\n    result2 = result1 - 1;\n    if (0x1fffff < result3) {\n      result2 = result3 & 1;\n      result3 = result3 >> 1;\n      carry = (byte)temp4;\n      temp4 = (uint)(result2 != 0) << 0x1f | temp4 >> 1;\n      result4 = (uint)(carry & 1) << 0x1f | result4 >> 1;\n      result2 = result1;\n      if (0xffbfffff < result1 * 0x200000) goto LAB_08008514;\n    }\nLAB_080083e0:\n    flag2 = 0x7fffffff < result4;\n    if (result4 == 0x80000000) {\n      flag2 = (temp4 & 1) != 0;\n    }\n    return CONCAT44(result3 + result2 * 0x100000 + (uint)CARRY4(temp4,(uint)flag2) | input2,\n                    temp4 + flag2);\n  }\n  flag1 = (result4 & 0x80000000) != 0;\n  result4 = result4 << 1;\n  result2 = temp4 * 2;\n  flag2 = CARRY4(temp4,temp4);\n  temp4 = temp4 * 2 + (uint)flag1;\n  result3 = result3 * 2 + (uint)(flag2 || CARRY4(result2,(uint)flag1));\n  result2 = result1 - 2;\n  if (result1 - 1 != 0 && 0xfffff < result3) goto LAB_080083e0;\n  temp5 = temp4;\n  result1 = result3;\n  if (result3 == 0) {\n    temp5 = 0;\n    result1 = temp4;\n  }\n  shift2 = LZCOUNT(result1);\n  if (result3 == 0) {\n    shift2 = shift2 + 0x20;\n  }\n  result3 = shift2 - 0xb;\n  flag3 = SBORROW4(result3,0x20);\n  temp4 = shift2 - 0x2b;\n  flag2 = (int)temp4 < 0;\n  flag1 = temp4 == 0;\n  if ((int)result3 < 0x20) {\n    flag3 = SCARRY4(temp4,0xc);\n    shift2 = shift2 + -0x1f;\n    flag2 = shift2 < 0;\n    flag1 = shift2 == 0;\n    temp4 = result3;\n    if (!flag1 && flag2 == flag3) {\n      temp5 = result1 << (result3 & 0xff);\n      result1 = result1 >> (0xcU - shift2 & 0xff);\n      goto LAB_08008458;\n    }\n  }\n  if (flag1 || flag2 != flag3) {\n    result4 = 0x20 - temp4;\n  }\n  result1 = result1 << (temp4 & 0xff);\n  if (flag1 || flag2 != flag3) {\n    result1 = result1 | temp5 >> (result4 & 0xff);\n  }\n  if (flag1 || flag2 != flag3) {\n    temp5 = temp5 << (temp4 & 0xff);\n  }\nLAB_08008458:\n  if ((int)result3 <= (int)result2) {\n    return CONCAT44(result1 + (result2 - result3) * 0x100000 | input2,temp5);\n  }\n  temp4 = ~(result2 - result3);\n  if ((int)temp4 < 0x1f) {\n    shift2 = temp4 - 0x13;\n    if (shift2 != 0 && shift2 < 0 == SCARRY4(temp4 - 0x1f,0xc)) {\n      return CONCAT44(temp2,temp5 >> (0x20 - (0xcU - shift2) & 0xff) | result1 << (0xcU - shift2 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    temp4 = temp4 + 1;\n    return CONCAT44(input2 | result1 >> (temp4 & 0xff),\n                    temp5 >> (temp4 & 0xff) | result1 << (0x20 - temp4 & 0xff));\n  }\n  return CONCAT44(temp2,result1 >> (temp4 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_080082d0": "reverse_binary_operation_080082d0",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar3": "temp1",
                "uVar4": "temp2",
                "uVar5": "temp3",
                "uVar6": "temp4",
                "uVar7": "temp5",
                "iVar8": "shift2",
                "uVar9": "result1",
                "uVar10": "result2",
                "uVar11": "result3",
                "uVar12": "result4",
                "bVar13": "flag1",
                "bVar14": "flag2",
                "bVar15": "flag3",
                "iVar1": "shift1",
                "bVar2": "carry"
            },
            "calling": [
                "FUN_08009b24",
                "FUN_0800a1bc",
                "FUN_08003004",
                "FUN_08004940",
                "FUN_08009d78",
                "FUN_080096e8",
                "FUN_0800af78",
                "FUN_08009410",
                "FUN_0800a348",
                "FUN_0800a5a0",
                "FUN_08001f00",
                "FUN_08009990",
                "FUN_0800adf0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080082d0": {
                    "5": "reverse_binary_operation",
                    "1": "calculate_sum_with_carry",
                    "2": "reverse_arithmetic_operation",
                    "3": "reverse_bits",
                    "4": "calculate_result"
                },
                "param_1": {
                    "5": "input_1",
                    "1": "num1",
                    "2": "operand1",
                    "18": "input1"
                },
                "param_2": {
                    "18": "input2",
                    "1": "value_2",
                    "2": "operand2",
                    "5": "input_2"
                },
                "param_3": {
                    "5": "input_3",
                    "1": "num3",
                    "2": "operand3",
                    "18": "input3"
                },
                "param_4": {
                    "1": "input_bit4",
                    "5": "input_4",
                    "2": "operand4",
                    "18": "input4"
                },
                "uVar3": {
                    "1": "temp_var8",
                    "7": "temp1",
                    "3": "temp3",
                    "2": "result1",
                    "4": "result"
                },
                "uVar4": {
                    "1": "sum_bits",
                    "7": "temp2",
                    "2": "temp1",
                    "3": "temp4"
                },
                "uVar5": {
                    "1": "result_2",
                    "2": "shifted_sum",
                    "3": "temp5",
                    "7": "temp3"
                },
                "uVar6": {
                    "1": "result",
                    "2": "temp3",
                    "3": "temp1",
                    "4": "temp4"
                },
                "uVar7": {
                    "1": "result_2",
                    "2": "var2",
                    "3": "temp4",
                    "4": "temp5"
                },
                "iVar8": {
                    "2": "shift_amount2",
                    "1": "shift_amount",
                    "5": "shift2",
                    "3": "temp8"
                },
                "uVar9": {
                    "1": "result4",
                    "4": "result1",
                    "3": "temp9"
                },
                "uVar10": {
                    "1": "result_2",
                    "2": "temp5",
                    "3": "temp10",
                    "4": "result2"
                },
                "uVar11": {
                    "1": "temp9",
                    "3": "temp11",
                    "5": "result3"
                },
                "uVar12": {
                    "1": "temp7",
                    "3": "temp3",
                    "2": "temp5",
                    "5": "result4"
                },
                "bVar13": {
                    "1": "var13",
                    "6": "flag1",
                    "5": "is_zero",
                    "2": "condition1"
                },
                "bVar14": {
                    "1": "overflow2",
                    "6": "flag2",
                    "3": "is_zero",
                    "2": "condition2"
                },
                "bVar15": {
                    "1": "is_borrow",
                    "6": "flag3",
                    "2": "is_subtraction",
                    "3": "is_negative"
                },
                "iVar1": {
                    "2": "shift_amount1",
                    "1": "shifted_operand4",
                    "3": "temp1",
                    "5": "shift1"
                },
                "bVar2": {
                    "1": "var2",
                    "6": "carry",
                    "2": "carry_bit",
                    "4": "carry_flag",
                    "3": "temp2"
                },
                "uVar13": {
                    "1": "condition_met"
                },
                "uVar14": {
                    "1": "result"
                },
                "uVar15": {
                    "1": "overflow"
                }
            }
        },
        "FUN_080082d4": {
            "entrypoint": "0x080082d4",
            "current_name": "calculate_result_080082d4",
            "code": "\nulonglong calculate_result_080082d4(uint input1,uint input2,uint input3,uint input4)\n\n{\n  int shift1;\n  byte carry;\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  int shift2;\n  uint shifted_input2;\n  uint temp3;\n  uint shifted_operand4;\n  uint difference;\n  uint shifted_result;\n  uint result;\n  bool is_equal;\n  bool flag2;\n  bool is_negative;\n  \n  shifted_input2 = input2 << 1;\n  shifted_operand4 = input4 << 1;\n  is_equal = ((input2 ^ input4) & 0x7fffffff) == 0;\n  flag2 = is_equal && input1 == input3;\n  if (!is_equal || input1 != input3) {\n    flag2 = (shifted_input2 | input1) == 0;\n  }\n  if (!flag2) {\n    flag2 = (shifted_operand4 | input3) == 0;\n  }\n  shift2 = (int)shifted_input2 >> 0x15;\n  if (!flag2) {\n    flag2 = shift2 == -1;\n  }\n  shift1 = (int)shifted_operand4 >> 0x15;\n  if (!flag2) {\n    flag2 = shift1 == -1;\n  }\n  if (flag2) {\n    if (shift2 == -1 || shift1 == -1) {\n      shifted_operand4 = input4;\n      shifted_input2 = input3;\n      if (shift2 == -1) {\n        shifted_operand4 = input2;\n        shifted_input2 = input1;\n      }\n      if (shift2 != -1 || shift1 != -1) {\n        input3 = shifted_input2;\n        input4 = shifted_operand4;\n      }\n      flag2 = (shifted_input2 | shifted_operand4 << 0xc) == 0;\n      if (flag2) {\n        flag2 = (input3 | input4 << 0xc) == 0;\n      }\n      if (flag2) {\n        flag2 = shifted_operand4 == input4;\n      }\n      if (!flag2) {\n        shifted_operand4 = shifted_operand4 | 0x80000;\n      }\n      return CONCAT44(shifted_operand4,shifted_input2);\n    }\n    if (((input2 ^ input4) & 0x7fffffff) != 0 || input1 != input3) {\n      if ((shifted_input2 | input1) == 0) {\n        input1 = input3;\n        input2 = input4;\n      }\n      return CONCAT44(input2,input1);\n    }\n    if (input2 != input4) {\n      return 0;\n    }\n    if (shifted_input2 >> 0x15 == 0) {\n      flag2 = (input1 & 0x80000000) != 0;\n      shifted_operand4 = input2 * 2 + (uint)flag2;\n      if (CARRY4(input2,input2) || CARRY4(input2 * 2,(uint)flag2)) {\n        shifted_operand4 = shifted_operand4 | 0x80000000;\n      }\n      return CONCAT44(shifted_operand4,input1 << 1);\n    }\n    if (shifted_input2 < 0xffc00000) {\n      return CONCAT44(input2 + 0x100000,input1);\n    }\n    input2 = input2 & 0x80000000;\nLAB_08008514:\n    return (ulonglong)(input2 | 0x7ff00000) << 0x20;\n  }\n  shifted_input2 = shifted_input2 >> 0x15;\n  shifted_operand4 = shifted_operand4 >> 0x15;\n  difference = shifted_operand4 - shifted_input2;\n  flag2 = difference != 0;\n  if (shifted_operand4 < shifted_input2) {\n    difference = -difference;\n  }\n  temp3 = input1;\n  temp3 = input2;\n  if (flag2 && shifted_input2 <= shifted_operand4) {\n    shifted_input2 = shifted_input2 + difference;\n    temp3 = input3;\n    temp3 = input4;\n    input3 = input1;\n    input4 = input2;\n  }\n  if (0x36 < difference) {\n    return CONCAT44(temp3,temp3);\n  }\n  shifted_operand4 = temp3 & 0xfffff | 0x100000;\n  if ((temp3 & 0x80000000) != 0) {\n    flag2 = temp3 != 0;\n    temp3 = -temp3;\n    shifted_operand4 = -shifted_operand4 - (uint)flag2;\n  }\n  temp3 = input4 & 0xfffff | 0x100000;\n  if ((input4 & 0x80000000) != 0) {\n    flag2 = input3 != 0;\n    input3 = -input3;\n    temp3 = -temp3 - (uint)flag2;\n  }\n  if (shifted_input2 == difference) {\n    temp3 = temp3 ^ 0x100000;\n    if (shifted_input2 == 0) {\n      shifted_operand4 = shifted_operand4 ^ 0x100000;\n      shifted_input2 = 1;\n    }\n    else {\n      difference = difference - 1;\n    }\n  }\n  result = -difference + 0x20;\n  if ((int)difference < 0x21) {\n    shifted_result = input3 << (result & 0xff);\n    input3 = input3 >> (difference & 0xff);\n    temp1 = temp3 + input3;\n    temp2 = temp3 << (result & 0xff);\n    result = temp1 + temp2;\n    shifted_operand4 = shifted_operand4 + CARRY4(temp3,input3) + ((int)temp3 >> (difference & 0xff)) +\n            (uint)CARRY4(temp1,temp2);\n  }\n  else {\n    shifted_result = temp3 << (-difference + 0x40 & 0xff);\n    if (input3 != 0) {\n      shifted_result = shifted_result | 2;\n    }\n    temp3 = (int)temp3 >> (difference - 0x20 & 0xff);\n    result = temp3 + temp3;\n    shifted_operand4 = shifted_operand4 + ((int)temp3 >> 0x1f) + (uint)CARRY4(temp3,temp3);\n  }\n  input2 = shifted_operand4 & 0x80000000;\n  difference = shifted_operand4;\n  if ((int)shifted_operand4 < 0) {\n    flag2 = shifted_result == 0;\n    shifted_result = -shifted_result;\n    difference = -result;\n    result = -(uint)!flag2 - result;\n    difference = -(uint)(flag2 <= difference) - shifted_operand4;\n  }\n  if (0xfffff < difference) {\n    temp3 = shifted_input2 - 1;\n    if (0x1fffff < difference) {\n      shifted_operand4 = difference & 1;\n      difference = difference >> 1;\n      carry = (byte)result;\n      result = (uint)(shifted_operand4 != 0) << 0x1f | result >> 1;\n      shifted_result = (uint)(carry & 1) << 0x1f | shifted_result >> 1;\n      temp3 = shifted_input2;\n      if (0xffbfffff < shifted_input2 * 0x200000) goto LAB_08008514;\n    }\nLAB_080083e0:\n    flag2 = 0x7fffffff < shifted_result;\n    if (shifted_result == 0x80000000) {\n      flag2 = (result & 1) != 0;\n    }\n    return CONCAT44(difference + temp3 * 0x100000 + (uint)CARRY4(result,(uint)flag2) | input2,\n                    result + flag2);\n  }\n  is_equal = (shifted_result & 0x80000000) != 0;\n  shifted_result = shifted_result << 1;\n  temp3 = result * 2;\n  flag2 = CARRY4(result,result);\n  result = result * 2 + (uint)is_equal;\n  difference = difference * 2 + (uint)(flag2 || CARRY4(temp3,(uint)is_equal));\n  temp3 = shifted_input2 - 2;\n  if (shifted_input2 - 1 != 0 && 0xfffff < difference) goto LAB_080083e0;\n  temp3 = result;\n  shifted_input2 = difference;\n  if (difference == 0) {\n    temp3 = 0;\n    shifted_input2 = result;\n  }\n  shift2 = LZCOUNT(shifted_input2);\n  if (difference == 0) {\n    shift2 = shift2 + 0x20;\n  }\n  result = shift2 - 0xb;\n  is_negative = SBORROW4(result,0x20);\n  difference = shift2 - 0x2b;\n  flag2 = (int)difference < 0;\n  is_equal = difference == 0;\n  if ((int)result < 0x20) {\n    is_negative = SCARRY4(difference,0xc);\n    shift2 = shift2 + -0x1f;\n    flag2 = shift2 < 0;\n    is_equal = shift2 == 0;\n    difference = result;\n    if (!is_equal && flag2 == is_negative) {\n      temp3 = shifted_input2 << (result & 0xff);\n      shifted_input2 = shifted_input2 >> (0xcU - shift2 & 0xff);\n      goto LAB_08008458;\n    }\n  }\n  if (is_equal || flag2 != is_negative) {\n    shifted_result = 0x20 - difference;\n  }\n  shifted_input2 = shifted_input2 << (difference & 0xff);\n  if (is_equal || flag2 != is_negative) {\n    shifted_input2 = shifted_input2 | temp3 >> (shifted_result & 0xff);\n  }\n  if (is_equal || flag2 != is_negative) {\n    temp3 = temp3 << (difference & 0xff);\n  }\nLAB_08008458:\n  if ((int)result <= (int)temp3) {\n    return CONCAT44(shifted_input2 + (temp3 - result) * 0x100000 | input2,temp3);\n  }\n  difference = ~(temp3 - result);\n  if ((int)difference < 0x1f) {\n    shift2 = difference - 0x13;\n    if (shift2 != 0 && shift2 < 0 == SCARRY4(difference - 0x1f,0xc)) {\n      return CONCAT44(shifted_operand4,temp3 >> (0x20 - (0xcU - shift2) & 0xff) | shifted_input2 << (0xcU - shift2 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    difference = difference + 1;\n    return CONCAT44(input2 | shifted_input2 >> (difference & 0xff),\n                    temp3 >> (difference & 0xff) | shifted_input2 << (0x20 - difference & 0xff));\n  }\n  return CONCAT44(shifted_operand4,shifted_input2 >> (difference - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_080082d4": "calculate_result_080082d4",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar7": "shifted_input2",
                "uVar9": "shifted_operand4",
                "bVar13": "is_equal",
                "bVar14": "flag2",
                "bVar15": "is_negative",
                "iVar1": "shift1",
                "iVar6": "shift2",
                "uVar3": "temp1",
                "uVar4": "temp2",
                "uVar5": "temp3",
                "uVar8": "temp3",
                "uVar10": "difference",
                "uVar11": "shifted_result",
                "uVar12": "result",
                "bVar2": "carry"
            },
            "calling": [
                "FUN_08009b24",
                "FUN_0800a1bc",
                "FUN_08009654",
                "FUN_08009798",
                "FUN_08009d78",
                "FUN_0800af78",
                "FUN_0800b2e8",
                "FUN_0800a348",
                "FUN_0800a5a0",
                "FUN_08009318",
                "FUN_080094c0",
                "FUN_08001f00",
                "FUN_08009990",
                "FUN_0800adf0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080082d4": {
                    "3": "reverse_binary_operation",
                    "1": "calculate_concatenation",
                    "2": "reverse_bits",
                    "4": "calculate_result"
                },
                "param_1": {
                    "5": "num1",
                    "1": "input_a",
                    "2": "operand1",
                    "13": "input1"
                },
                "param_2": {
                    "13": "input2",
                    "1": "second_param",
                    "2": "b",
                    "5": "input_2"
                },
                "param_3": {
                    "5": "num3",
                    "2": "operand3",
                    "1": "third_param",
                    "13": "input3"
                },
                "param_4": {
                    "1": "fourth_param",
                    "5": "num4",
                    "2": "operand4",
                    "13": "input4"
                },
                "uVar7": {
                    "1": "temp4",
                    "2": "shifted_operand2",
                    "4": "shifted_input2"
                },
                "uVar9": {
                    "1": "temp9",
                    "2": "shifted_operand4"
                },
                "bVar13": {
                    "1": "is_aligned",
                    "4": "flag1",
                    "5": "is_equal",
                    "2": "condition1"
                },
                "bVar14": {
                    "1": "var13",
                    "2": "condition2",
                    "4": "flag2",
                    "3": "is_zero"
                },
                "bVar15": {
                    "1": "is_shift_borrow",
                    "6": "is_negative",
                    "2": "condition3",
                    "3": "carry_flag"
                },
                "iVar1": {
                    "1": "shifted_ivar1",
                    "4": "shift1"
                },
                "iVar6": {
                    "1": "temp4",
                    "3": "shift2"
                },
                "uVar3": {
                    "1": "addition_result1",
                    "7": "temp1",
                    "3": "temp_var1",
                    "5": "result1"
                },
                "uVar4": {
                    "1": "var2",
                    "3": "temp_var2",
                    "2": "carry2",
                    "5": "result2",
                    "7": "temp2"
                },
                "uVar5": {
                    "1": "new_divisor",
                    "3": "temp_var3",
                    "2": "temp1",
                    "6": "temp3"
                },
                "uVar8": {
                    "1": "result4",
                    "2": "temp3"
                },
                "uVar10": {
                    "1": "temp7",
                    "2": "temp4",
                    "6": "difference"
                },
                "uVar11": {
                    "1": "difference2",
                    "2": "temp_var6"
                },
                "uVar12": {
                    "1": "temp9",
                    "2": "result"
                },
                "uVar13": {
                    "1": "carry"
                },
                "uVar14": {
                    "1": "sign"
                },
                "uVar15": {
                    "1": "result"
                },
                "uVar16": {
                    "1": "multiplier"
                },
                "bVar2": {
                    "1": "var2",
                    "2": "bit_check",
                    "6": "carry",
                    "3": "carry_bit"
                },
                "uVar17": {
                    "1": "addend"
                },
                "uVar18": {
                    "1": "temp7"
                },
                "uVar19": {
                    "1": "temp8"
                },
                "uVar20": {
                    "1": "lz_count"
                },
                "uVar21": {
                    "1": "temp10"
                },
                "uVar22": {
                    "1": "shift_amt"
                }
            }
        },
        "FUN_0800854c": {
            "entrypoint": "0x0800854c",
            "current_name": "reverse_bits_0800854c",
            "code": "\nulonglong reverse_bits_0800854c(uint input)\n\n{\n  uint result;\n  uint shift_amount;\n  int count;\n  uint shift_amount;\n  uint remaining_bits;\n  bool is_negative;\n  bool is_zero;\n  bool is_carry;\n  \n  if (input == 0) {\n    return 0;\n  }\n  result = 0;\n  count = leading_zero_count(input);\n  shift_amount = count + 0x15;\n  is_carry = signed_borrow(shift_amount,0x20);\n  shift_amount = count - 0xb;\n  is_negative = (int)shift_amount < 0;\n  is_zero = shift_amount == 0;\n  if (shift_amount < 0x20) {\n    is_carry = signed_carry(shift_amount,0xc);\n    is_negative = false;\n    is_zero = count + 1 == 0;\n    shift_amount = shift_amount;\n    if (!is_zero && is_carry == false) {\n      result = input << shift_amount;\n      input = input >> (0xcU - (count + 1) & 0xff);\n      goto shift_operation;\n    }\n  }\n  if (is_zero || is_negative != is_carry) {\n    remaining_bits = 0x20 - shift_amount;\n  }\n  input = input << (shift_amount & 0xff);\n  if (is_zero || is_negative != is_carry) {\n    input = input | 0U >> (remaining_bits & 0xff);\n  }\n  if (is_zero || is_negative != is_carry) {\n    result = 0 << (shift_amount & 0xff);\n  }\nshift_operation:\n  if (shift_amount < 0x433) {\n    return combine_shifted_values(input + (0x432 - shift_amount) * 0x100000,result);\n  }\n  shift_amount = ~(0x432 - shift_amount);\n  if (0x1e < (int)shift_amount) {\n    return (ulonglong)(input >> (shift_amount - 0x1f & 0xff));\n  }\n  count = shift_amount - 0x13;\n  if (count == 0 || count < 0 != signed_carry(shift_amount - 0x1f,0xc)) {\n    shift_amount = shift_amount + 1;\n    return combine_shifted_values(input >> (shift_amount & 0xff),\n                    result >> (shift_amount & 0xff) | input << (0x20 - shift_amount & 0xff));\n  }\n  return (ulonglong)(result >> (0x20 - (0xcU - count) & 0xff) | input << (0xcU - count & 0xff));\n}\n\n",
            "renaming": {
                "FUN_0800854c": "reverse_bits_0800854c",
                "param_1": "input",
                "uVar1": "result",
                "uVar2": "shift_amount",
                "iVar3": "count",
                "uVar4": "shift_amount",
                "in_r12": "remaining_bits",
                "bVar5": "is_negative",
                "bVar6": "is_zero",
                "bVar7": "is_carry",
                "LAB_08008458": "shift_operation",
                "CONCAT44": "combine_shifted_values",
                "SCARRY4": "signed_carry",
                "SBORROW4": "signed_borrow",
                "LZCOUNT": "leading_zero_count"
            },
            "calling": [
                "FUN_08001994"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800854c": {
                    "1": "process_number",
                    "3": "shift_and_concatenate",
                    "4": "shift_and_concat",
                    "10": "reverse_bits"
                },
                "param_1": {
                    "27": "input",
                    "1": "input_number",
                    "2": "input_value"
                },
                "uVar1": {
                    "1": "concatenated",
                    "2": "result1",
                    "4": "concatenated_value",
                    "8": "result"
                },
                "uVar2": {
                    "1": "output2",
                    "2": "shift_count",
                    "17": "shift_amount",
                    "4": "shift"
                },
                "iVar3": {
                    "1": "shift_amount",
                    "11": "count",
                    "9": "leading_zeros",
                    "6": "bit_count",
                    "2": "leading_zeros_count"
                },
                "uVar4": {
                    "1": "adjusted_shift_amount",
                    "3": "offset",
                    "2": "adjusted_count",
                    "8": "shift_amount"
                },
                "in_r12": {
                    "2": "remainder",
                    "1": "difference",
                    "18": "remaining_bits"
                },
                "bVar5": {
                    "3": "is_negative_shift",
                    "20": "is_negative",
                    "1": "is_negative_count",
                    "2": "is_less_than_zero"
                },
                "bVar6": {
                    "1": "is_equal0",
                    "21": "is_zero",
                    "3": "is_zero_shift"
                },
                "bVar7": {
                    "1": "is_offset_negative",
                    "6": "is_carry",
                    "4": "is_overflow",
                    "2": "carry_flag",
                    "3": "is_borrow"
                },
                "LAB_08008458": {
                    "1": "calculate_result",
                    "2": "shift_operation"
                },
                "uVar2 & 0xff": {
                    "1": "shift_amount_masked"
                },
                "in_r12 & 0xff": {
                    "1": "shift_masked"
                },
                "0x433": {
                    "1": "threshold"
                },
                "CONCAT44": {
                    "1": "concat"
                },
                "SCARRY4": {
                    "2": "signed_carry"
                },
                "SBORROW4": {
                    "1": "signed_borrow"
                },
                "LZCOUNT": {
                    "1": "leading_zero_count"
                }
            }
        },
        "FUN_0800856c": {
            "entrypoint": "0x0800856c",
            "current_name": "reverse_bits_0800856c",
            "code": "\nulonglong reverse_bits_0800856c(uint input)\n\n{\n  uint shifted_value;\n  uint abs_input;\n  uint shift_amount;\n  int leading_zeros;\n  uint total_bits;\n  uint sign_bit;\n  uint remaining_bits;\n  bool is_negative;\n  bool is_zero;\n  bool is_carry;\n  \n  if (input == 0) {\n    return 0;\n  }\n  sign_bit = input & 0x80000000;\n  abs_input = input;\n  if ((int)sign_bit < 0) {\n    abs_input = -input;\n  }\n  shifted_value = 0;\n  leading_zeros = count_leading_zeroes(abs_input);\n  total_bits = leading_zeros + 0x15;\n  is_carry = SBORROW4(total_bits,0x20);\n  shift_amount = leading_zeros - 0xb;\n  is_negative = (int)shift_amount < 0;\n  is_zero = shift_amount == 0;\n  if (total_bits < 0x20) {\n    is_carry = SCARRY4(shift_amount,0xc);\n    is_negative = false;\n    is_zero = leading_zeros + 1 == 0;\n    shift_amount = total_bits;\n    if (!is_zero && is_carry == false) {\n      shifted_value = abs_input << total_bits;\n      abs_input = abs_input >> (shift_amount - (leading_zeros + 1) & 0xff);\n      goto merge_bits_label;\n    }\n  }\n  if (is_zero || is_negative != is_carry) {\n    remaining_bits = 0x20 - shift_amount;\n  }\n  abs_input = abs_input << (shift_amount & 0xff);\n  if (is_zero || is_negative != is_carry) {\n    abs_input = abs_input | 0U >> (remaining_bits & 0xff);\n  }\n  if (is_zero || is_negative != is_carry) {\n    shifted_value = 0 << (shift_amount & 0xff);\n  }\nmerge_bits_label:\n  if (total_bits < 0x433) {\n    return CONCAT44(abs_input + (0x432 - total_bits) * 0x100000 | sign_bit,shifted_value);\n  }\n  shift_amount = ~(0x432 - total_bits);\n  if (0x1e < (int)shift_amount) {\n    return CONCAT44(input,abs_input >> (shift_amount - 0x1f & 0xff)) & 0x80000000ffffffff;\n  }\n  leading_zeros = shift_amount - 0x13;\n  if (leading_zeros == 0 || leading_zeros < 0 != SCARRY4(shift_amount - 0x1f,0xc)) {\n    shift_amount = shift_amount + 1;\n    return CONCAT44(sign_bit | abs_input >> (shift_amount & 0xff),\n                    shifted_value >> (shift_amount & 0xff) | abs_input << (0x20 - shift_amount & 0xff));\n  }\n  return CONCAT44(input,shifted_value >> (0x20 - (shift_amount - leading_zeros) & 0xff) | abs_input << (shift_amount - leading_zeros & 0xff))\n         & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_0800856c": "reverse_bits_0800856c",
                "param_1": "input",
                "uVar1": "shifted_value",
                "uVar2": "abs_input",
                "uVar3": "shift_amount",
                "iVar4": "leading_zeros",
                "uVar5": "total_bits",
                "uVar6": "sign_bit",
                "in_r12": "remaining_bits",
                "bVar7": "is_negative",
                "bVar8": "is_zero",
                "bVar9": "is_carry",
                "LZCOUNT": "count_leading_zeroes",
                "LAB_08008458": "merge_bits_label",
                "0xcU": "shift_amount"
            },
            "calling": [
                "FUN_0800a5a0",
                "FUN_08002c18",
                "FUN_08009d78"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800856c": {
                    "2": "bitwise_shift_function",
                    "3": "reverse_and_shift_bits",
                    "1": "perform_shift_operation",
                    "8": "reverse_bits"
                },
                "param_1": {
                    "23": "input",
                    "2": "value",
                    "6": "input_value"
                },
                "uVar1": {
                    "8": "shifted_value",
                    "1": "output",
                    "3": "shift_count",
                    "5": "bit_count",
                    "4": "result",
                    "2": "shifted_input"
                },
                "uVar2": {
                    "1": "shifted_input",
                    "2": "absolute_value",
                    "7": "abs_value",
                    "16": "abs_input"
                },
                "uVar3": {
                    "1": "shift",
                    "18": "shift_amount",
                    "2": "shift_count"
                },
                "iVar4": {
                    "1": "leading_zeros_diff",
                    "2": "leading_zero_count",
                    "23": "leading_zeros"
                },
                "uVar5": {
                    "2": "final_shift_amount",
                    "1": "adjusted_shift_amount",
                    "4": "shift_amount",
                    "3": "total_shift"
                },
                "uVar6": {
                    "1": "is_negative",
                    "2": "input_sign",
                    "26": "sign_bit"
                },
                "in_r12": {
                    "18": "remaining_bits",
                    "4": "remaining_shift",
                    "2": "temp",
                    "1": "constant",
                    "3": "bit_mask"
                },
                "bVar7": {
                    "1": "should_shift1",
                    "14": "is_negative",
                    "3": "negative_shift",
                    "2": "is_positive"
                },
                "bVar8": {
                    "1": "leading_zeros_equal",
                    "3": "is_zero_shift",
                    "16": "is_zero"
                },
                "bVar9": {
                    "7": "carry_flag",
                    "1": "has_carry",
                    "2": "carry_bit",
                    "3": "overflow"
                },
                "LZCOUNT": {
                    "1": "count_leading_zeroes"
                },
                "LAB_08008458": {
                    "1": "calculate_result"
                },
                "0x80000000": {
                    "1": "int32_min"
                },
                "0x20": {
                    "1": "bit_size"
                },
                "0xcU": {
                    "1": "shift_amount"
                },
                "0x433": {
                    "1": "max_bits"
                },
                "uVar0": {
                    "1": "result"
                },
                "FUNC_LZCOUNT": {
                    "1": "count_leading_zeros"
                }
            }
        },
        "FUN_08008590": {
            "entrypoint": "0x08008590",
            "current_name": "reverse_bits_08008590",
            "code": "\nulonglong reverse_bits_08008590(uint input,undefined4 param2,undefined4 param3,uint mask)\n\n{\n  uint bit31;\n  uint temp1;\n  uint result;\n  uint shifted_input;\n  uint temp2;\n  int count;\n  uint shift_amount;\n  uint temp;\n  bool is_negative;\n  bool is_zero;\n  bool carry_flag;\n  \n  temp2 = input << 1;\n  is_zero = temp2 == 0;\n  bit31 = (uint)((input & 0x80000000) != 0) << 0x1f;\n  shifted_input = (uint)((int)temp2 >> 3) >> 1;\n  result = bit31 | shifted_input;\n  input = input << 0x1d;\n  if (!is_zero) {\n    mask = temp2 & 0xff000000;\n    is_zero = mask == 0;\n  }\n  if (!is_zero) {\n    is_zero = mask == 0xff000000;\n  }\n  if (!is_zero) {\n    return CONCAT44(result,input) ^ 0x3800000000000000;\n  }\n  if ((temp2 & 0xffffff) == 0) {\n    return CONCAT44(result,input);\n  }\n  if (mask == 0xff000000) {\n    return CONCAT44(result,input) | 0x8000000000000;\n  }\n  temp1 = input;\n  temp2 = shifted_input;\n  if (shifted_input == 0) {\n    temp1 = 0;\n    temp2 = input;\n  }\n  count = leading_zeros(temp2);\n  if (shifted_input == 0) {\n    count = count + 0x20;\n  }\n  shift_amount = count - 0xb;\n  carry_flag = SBORROW4(shift_amount,0x20);\n  shifted_input = count - 0x2b;\n  is_zero = (int)shifted_input < 0;\n  is_negative = shifted_input == 0;\n  if ((int)shift_amount < 0x20) {\n    carry_flag = SCARRY4(shifted_input,0xc);\n    count = count + -0x1f;\n    is_zero = count < 0;\n    is_negative = count == 0;\n    shifted_input = shift_amount;\n    if (!is_negative && is_zero == carry_flag) {\n      temp1 = temp2 << (shift_amount & 0xff);\n      temp2 = temp2 >> (0xcU - count & 0xff);\n      goto LAB_08008458;\n    }\n  }\n  if (is_negative || is_zero != carry_flag) {\n    temp = 0x20 - shifted_input;\n  }\n  temp2 = temp2 << (shifted_input & 0xff);\n  if (is_negative || is_zero != carry_flag) {\n    temp2 = temp2 | temp1 >> (temp & 0xff);\n  }\n  if (is_negative || is_zero != carry_flag) {\n    temp1 = temp1 << (shifted_input & 0xff);\n  }\nLAB_08008458:\n  if ((int)shift_amount < 0x381) {\n    return CONCAT44(temp2 + (0x380 - shift_amount) * 0x100000 | bit31,temp1);\n  }\n  shifted_input = ~(0x380 - shift_amount);\n  if (0x1e < (int)shifted_input) {\n    return CONCAT44(result,temp2 >> (shifted_input - 0x1f & 0xff)) & 0x80000000ffffffff;\n  }\n  count = shifted_input - 0x13;\n  if (count == 0 || count < 0 != SCARRY4(shifted_input - 0x1f,0xc)) {\n    shifted_input = shifted_input + 1;\n    return CONCAT44(bit31 | temp2 >> (shifted_input & 0xff),\n                    temp1 >> (shifted_input & 0xff) | temp2 << (0x20 - shifted_input & 0xff));\n  }\n  return CONCAT44(result,temp1 >> (0x20 - (0xcU - count) & 0xff) | temp2 << (0xcU - count & 0xff)) &\n         0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_08008590": "reverse_bits_08008590",
                "param_1": "input",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "mask",
                "uVar1": "bit31",
                "uVar2": "temp1",
                "uVar3": "result",
                "uVar4": "shifted_input",
                "uVar5": "temp2",
                "iVar6": "count",
                "uVar7": "shift_amount",
                "in_r12": "temp",
                "bVar8": "is_negative",
                "bVar9": "is_zero",
                "bVar10": "carry_flag",
                "LZCOUNT": "leading_zeros"
            },
            "calling": [
                "FUN_08001994",
                "FUN_0800056c",
                "FUN_08003004",
                "FUN_08004940",
                "FUN_080005b4",
                "FUN_08003b98",
                "FUN_08002408",
                "FUN_08002638",
                "FUN_08002c18",
                "FUN_080046d0",
                "FUN_08002978",
                "FUN_080044e8",
                "FUN_08004e30",
                "FUN_08001f00"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08008590": {
                    "1": "decode_and_modify_value",
                    "2": "bitwise_operations",
                    "13": "reverse_bits"
                },
                "param_1": {
                    "19": "input",
                    "8": "input_value",
                    "1": "input_value1"
                },
                "param_2": {
                    "1": "arg2",
                    "5": "param2",
                    "2": "unused",
                    "3": "unused_param1"
                },
                "param_3": {
                    "1": "constant2",
                    "5": "param3",
                    "2": "unused2",
                    "3": "unused_param2"
                },
                "param_4": {
                    "3": "unused_param3",
                    "9": "mask",
                    "5": "param4",
                    "1": "input4"
                },
                "uVar1": {
                    "1": "msb_shift",
                    "2": "highest_bit",
                    "3": "sign_extension",
                    "7": "bit31"
                },
                "uVar2": {
                    "1": "input_copy",
                    "2": "shifted_input",
                    "7": "temp1",
                    "5": "result"
                },
                "uVar3": {
                    "1": "bit31_and_bit27",
                    "4": "result_high",
                    "2": "high_bits",
                    "8": "result",
                    "3": "combined"
                },
                "uVar4": {
                    "2": "temp2",
                    "3": "shifted_value",
                    "1": "shifted_result",
                    "5": "shifted_input"
                },
                "uVar5": {
                    "1": "shifted_input_times_two",
                    "2": "shifted_input_copy",
                    "3": "temp",
                    "5": "temp2",
                    "4": "shifted_input"
                },
                "iVar6": {
                    "1": "number_of_leading_zeros",
                    "10": "count",
                    "2": "shift_amount",
                    "9": "bit_count"
                },
                "uVar7": {
                    "1": "temp_var1",
                    "2": "temp2",
                    "3": "shifted_count",
                    "11": "shift_amount"
                },
                "in_r12": {
                    "1": "constant3",
                    "2": "in_r12",
                    "4": "temp"
                },
                "bVar8": {
                    "1": "carry_flag1",
                    "13": "is_negative",
                    "2": "check1"
                },
                "bVar9": {
                    "1": "is_equal",
                    "2": "check2",
                    "14": "is_zero"
                },
                "bVar10": {
                    "1": "cond3",
                    "2": "is_overflow",
                    "3": "is_negative",
                    "6": "carry_flag"
                },
                "uVar8": {
                    "1": "temp_value2"
                },
                "uVar9": {
                    "1": "temp_value3"
                },
                "reverseEngineer": {
                    "1": "optimized_function"
                },
                "uVar6": {
                    "1": "count"
                },
                "uVar11": {
                    "1": "mask"
                },
                "uVar12": {
                    "1": "result"
                },
                "newParameter_name": {
                    "1": "new_parameter_name_updated"
                },
                "newVariable_name": {
                    "1": "new_variable_name_updated"
                },
                "LZCOUNT": {
                    "1": "leading_zeros"
                }
            }
        },
        "FUN_08008640": {
            "entrypoint": "0x08008640",
            "current_name": "calculate_result_08008640",
            "code": "\nulonglong calculate_result_08008640(undefined4 input1,uint input2,uint input3,uint input4)\n\n{\n  ulonglong result1;\n  longlong result2;\n  uint temp1;\n  uint temp2;\n  int temp3;\n  uint temp4;\n  uint temp5;\n  uint temp6;\n  uint temp7;\n  bool flag1;\n  bool flag2;\n  bool flag3;\n  ulonglong combined_input;\n  \n  combined_input = CONCAT44(input2,input1);\n  temp6 = 0x7ff;\n  temp2 = input2 >> 0x14 & 0x7ff;\n  flag1 = temp2 == 0;\n  if (!flag1) {\n    temp5 = input4 >> 0x14 & 0x7ff;\n    flag1 = temp5 == 0;\n  }\n  if (!flag1) {\n    flag1 = temp2 == 0x7ff;\n  }\n  if (!flag1) {\n    flag1 = temp5 == 0x7ff;\n  }\n  if (flag1) {\n    combined_input = reverse_bits();\n  }\n  temp1 = (uint)(combined_input >> 0x20);\n  temp3 = temp2 + temp5;\n  temp2 = temp1 ^ input4;\n  temp1 = temp1 & ~(temp6 << 0x15);\n  input4 = input4 & ~(temp6 << 0x15);\n  flag1 = ((uint)combined_input | temp1 << 0xc) == 0;\n  if (!flag1) {\n    flag1 = (input3 | input4 << 0xc) == 0;\n  }\n  temp1 = temp1 | 0x100000;\n  input4 = input4 | 0x100000;\n  if (flag1) {\n    input3 = (uint)combined_input | input3;\n    input4 = (temp2 & 0x80000000 | temp1) ^ input4;\n    temp2 = temp6 >> 1;\n    flag3 = SBORROW4(temp3,temp2);\n    temp4 = temp3 - temp2;\n    flag1 = temp4 == 0;\n    temp1 = temp4;\n    if (!flag1 && (int)temp2 <= temp3) {\n      flag3 = SBORROW4(temp6,temp4);\n      temp1 = temp6 - temp4;\n      flag1 = temp6 == temp4;\n    }\n    if (!flag1 && (int)temp1 < 0 == flag3) {\n      input4 = input4 | temp4 * 0x100000;\n    }\n    if (!flag1 && (int)temp1 < 0 == flag3) {\n      return CONCAT44(input4,input3);\n    }\n    input4 = input4 | 0x100000;\n    temp6 = 0;\n    flag3 = SBORROW4(temp4,1);\n    temp4 = temp4 - 1;\n    flag1 = temp4 == 0;\n    temp2 = temp4;\n  }\n  else {\n    result1 = (combined_input & 0xffffffff) * (ulonglong)input3;\n    combined_input = (combined_input & 0xffffffff) * (ulonglong)input4 +\n             (ulonglong)temp1 * (ulonglong)input3 + (result1 >> 0x20);\n    temp7 = (uint)combined_input;\n    result2 = (ulonglong)temp1 * (ulonglong)input4 + (combined_input >> 0x20);\n    temp6 = (uint)result2;\n    temp1 = (uint)((ulonglong)result2 >> 0x20);\n    if ((int)result1 != 0) {\n      temp7 = temp7 | 1;\n    }\n    temp4 = (temp3 + -0x3ff) - (uint)(temp1 < 0x200);\n    if (temp1 < 0x200) {\n      flag1 = (temp7 & 0x80000000) != 0;\n      temp7 = temp7 << 1;\n      result2 = CONCAT44(temp1 * 2 + (uint)(CARRY4(temp6,temp6) || CARRY4(temp6 * 2,(uint)flag1)),\n                       temp6 * 2 + (uint)flag1);\n    }\n    input4 = temp2 & 0x80000000 | (int)((ulonglong)result2 >> 0x20) << 0xb | (uint)result2 >> 0x15;\n    input3 = (uint)result2 << 0xb | temp7 >> 0x15;\n    temp6 = temp7 * 0x800;\n    flag2 = 0xfc < temp4;\n    flag3 = SBORROW4(temp4,0xfd);\n    temp1 = temp4 - 0xfd;\n    flag1 = temp1 == 0;\n    temp2 = temp1;\n    if (flag2 && !flag1) {\n      flag2 = 0x6ff < temp1;\n      flag3 = SBORROW4(temp1,0x700);\n      temp2 = temp4 - 0x7fd;\n      flag1 = temp1 == 0x700;\n    }\n    if (!flag2 || flag1) {\n      flag1 = 0x7fffffff < temp6;\n      if (temp6 == 0x80000000) {\n        flag1 = (temp7 >> 0x15 & 1) != 0;\n      }\n      return CONCAT44(input4 + temp4 * 0x100000 + (uint)CARRY4(input3,(uint)flag1),input3 + flag1\n                     );\n    }\n  }\n  if (!flag1 && (int)temp2 < 0 == flag3) {\n    return (ulonglong)(input4 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  flag2 = SCARRY4(temp4,0x36);\n  flag1 = (int)(temp4 + 0x36) < 0;\n  flag3 = temp4 == 0xffffffca;\n  if (flag3 || flag1 != flag2) {\n    input3 = 0;\n  }\n  if (flag3 || flag1 != flag2) {\n    input4 = input4 & 0x80000000;\n  }\n  if (flag3 || flag1 != flag2) {\n    return CONCAT44(input4,input3);\n  }\n  temp2 = -temp4;\n  temp1 = temp2 - 0x20;\n  if (0x1f < (int)temp2) {\n    temp4 = input3 >> (temp1 & 0xff) | input4 << (0x20 - temp1 & 0xff);\n    temp2 = (input4 >> (temp1 & 0xff) & ~((input4 & 0x80000000) >> (temp1 & 0xff))) -\n            ((int)temp4 >> 0x1f);\n    if ((temp6 | input3 << (0x20 - temp1 & 0xff) | temp4 << 1) == 0) {\n      temp2 = temp2 & ~(temp4 >> 0x1f);\n    }\n    return CONCAT44(input4,temp2) & 0x80000000ffffffff;\n  }\n  temp3 = temp2 - 0x14;\n  if (temp3 == 0 || temp3 < 0 != SCARRY4(temp1,0xc)) {\n    temp7 = input3 << (temp4 + 0x20 & 0xff);\n    temp1 = input3 >> (temp2 & 0xff) | input4 << (temp4 + 0x20 & 0xff);\n    temp4 = temp1 + -((int)temp7 >> 0x1f);\n    if ((temp6 | temp7 << 1) == 0) {\n      temp4 = temp4 & ~(temp7 >> 0x1f);\n    }\n    return CONCAT44((input4 & 0x80000000) +\n                    ((input4 & 0x7fffffff) >> (temp2 & 0xff)) +\n                    (uint)CARRY4(temp1,-((int)temp7 >> 0x1f)),temp4);\n  }\n  temp2 = 0xc - temp3;\n  temp4 = input3 << (temp2 & 0xff);\n  temp2 = input3 >> (0x20 - temp2 & 0xff) | input4 << (temp2 & 0xff);\n  temp1 = temp2 + -((int)temp4 >> 0x1f);\n  if ((temp6 | temp4 << 1) == 0) {\n    temp1 = temp1 & ~(temp4 >> 0x1f);\n  }\n  return CONCAT44((input4 & 0x80000000) + (uint)CARRY4(temp2,-((int)temp4 >> 0x1f)),temp1);\n}\n\n",
            "renaming": {
                "FUN_08008640": "calculate_result_08008640",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "result1",
                "lVar2": "result2",
                "uVar3": "temp1",
                "uVar4": "temp2",
                "iVar5": "temp3",
                "uVar6": "temp4",
                "unaff_r5": "temp5",
                "uVar7": "temp6",
                "uVar8": "temp7",
                "bVar9": "flag1",
                "bVar10": "flag2",
                "bVar11": "flag3",
                "uVar12": "combined_input",
                "reverse_bits_0800881c": "reverse_bits"
            },
            "calling": [
                "FUN_08001994",
                "FUN_0800056c",
                "FUN_08009b24",
                "FUN_0800a1bc",
                "FUN_08003004",
                "FUN_08004940",
                "FUN_08009d78",
                "FUN_0800af78",
                "FUN_08002638",
                "FUN_0800b2e8",
                "FUN_0800a348",
                "FUN_0800a5a0",
                "FUN_08002c18",
                "FUN_080046d0",
                "FUN_080044e8",
                "FUN_08001f00",
                "FUN_0800adf0"
            ],
            "called": [
                "FUN_0800881c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08008640": {
                    "3": "calculate_value",
                    "2": "calculate_product",
                    "4": "calculate",
                    "1": "calculate_floating_point",
                    "18": "calculate_result"
                },
                "param_1": {
                    "3": "input_1",
                    "1": "input_value1",
                    "24": "input1"
                },
                "param_2": {
                    "24": "input2",
                    "1": "value2",
                    "3": "input_2"
                },
                "param_3": {
                    "3": "input_3",
                    "1": "num3",
                    "24": "input3"
                },
                "param_4": {
                    "3": "input_4",
                    "1": "var_d",
                    "24": "input4"
                },
                "uVar1": {
                    "1": "product1",
                    "2": "product",
                    "5": "temp1",
                    "11": "result1",
                    "6": "result"
                },
                "lVar2": {
                    "2": "temp_result",
                    "1": "result_2",
                    "5": "temp2",
                    "11": "result2"
                },
                "uVar3": {
                    "1": "bit_mask1",
                    "2": "u_var3",
                    "3": "var1",
                    "13": "temp1",
                    "5": "temp3"
                },
                "uVar4": {
                    "1": "bit_sum",
                    "13": "temp2",
                    "2": "u_var4",
                    "5": "temp4",
                    "3": "var2"
                },
                "iVar5": {
                    "3": "var3",
                    "5": "temp5",
                    "1": "i_var5",
                    "13": "temp3",
                    "2": "sum"
                },
                "uVar6": {
                    "1": "difference",
                    "5": "temp6",
                    "3": "u_var6",
                    "2": "temp",
                    "13": "temp4"
                },
                "unaff_r5": {
                    "9": "temp5",
                    "1": "temp2",
                    "2": "unaff_r5",
                    "5": "temp7"
                },
                "uVar7": {
                    "4": "temp5",
                    "2": "var6",
                    "7": "temp6",
                    "1": "tmp_5",
                    "5": "temp8",
                    "3": "u_var7"
                },
                "uVar8": {
                    "1": "tmp_6",
                    "4": "temp6",
                    "9": "temp7",
                    "2": "var7",
                    "5": "temp9"
                },
                "bVar9": {
                    "1": "temp10",
                    "3": "is_zero",
                    "17": "flag1"
                },
                "bVar10": {
                    "1": "is_neg",
                    "3": "condition2",
                    "17": "flag2"
                },
                "bVar11": {
                    "1": "is_borrowed",
                    "17": "flag3",
                    "3": "condition3"
                },
                "uVar12": {
                    "1": "concatenated",
                    "3": "concatenated_input",
                    "8": "combined_input",
                    "2": "combined_params",
                    "4": "result"
                },
                "reverse_bits_0800881c": {
                    "3": "reverse_bits"
                }
            }
        },
        "FUN_0800881c": {
            "entrypoint": "0x0800881c",
            "current_name": "reverse_bits_0800881c",
            "code": "\nulonglong reverse_bits_0800881c(uint input1,uint input2,uint input3,uint input4)\n\n{\n  uint bit1;\n  uint temp1;\n  uint bit2;\n  uint bit3;\n  uint temp2;\n  bool is_zero;\n  \n  bit2 = temp2 & input4 >> 0x14;\n  if (temp1 != temp2 && bit2 != temp2) {\n    is_zero = (input1 | input2 << 1) == 0;\n    if (!is_zero) {\n      is_zero = (input3 | input4 << 1) == 0;\n    }\n    if (is_zero) {\n      return (ulonglong)((input2 ^ input4) & 0x80000000) << 0x20;\n    }\n    if (temp1 == 0) {\n      bit3 = input2 & 0x80000000;\n      do {\n        bit1 = input1 & 0x80000000;\n        input1 = input1 << 1;\n        input2 = input2 * 2 + (uint)(bit1 != 0);\n      } while ((input2 & 0x100000) == 0);\n      input2 = input2 | bit3;\n      if (bit2 != 0) {\n        return CONCAT44(input2,input1);\n      }\n    }\n    do {\n      bit2 = input3 & 0x80000000;\n      input3 = input3 << 1;\n      input4 = input4 * 2 + (uint)(bit2 != 0);\n    } while ((input4 & 0x100000) == 0);\n    return CONCAT44(input2,input1);\n  }\n  is_zero = (input1 | input2 << 1) == 0;\n  if (is_zero) {\n    input2 = input4;\n    input1 = input3;\n  }\n  if (!is_zero) {\n    is_zero = (input3 | input4 << 1) == 0;\n  }\n  bit3 = input2;\n  if (((!is_zero) && ((temp1 != temp2 || ((input1 | input2 << 0xc) == 0)))) &&\n     ((bit2 != temp2 || (input1 = input3, bit3 = input4, (input3 | input4 << 0xc) == 0)))) {\n    return (ulonglong)((input2 ^ input4) & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  return CONCAT44(bit3,input1) | 0x7ff8000000000000;\n}\n\n",
            "renaming": {
                "FUN_0800881c": "reverse_bits_0800881c",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "unaff_r4": "temp1",
                "uVar2": "bit2",
                "uVar3": "bit3",
                "in_r12": "temp2",
                "uVar1": "bit1",
                "bVar4": "is_zero"
            },
            "calling": [
                "FUN_08008640"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800881c": {
                    "2": "calculate_bitwise_result",
                    "1": "reverse_and_update",
                    "6": "reverse_bits"
                },
                "param_1": {
                    "11": "input_1",
                    "1": "input_param_1",
                    "17": "input1"
                },
                "param_2": {
                    "17": "input2",
                    "1": "input_param_2",
                    "11": "input_2"
                },
                "param_3": {
                    "11": "input_3",
                    "1": "result_c",
                    "17": "input3"
                },
                "param_4": {
                    "11": "input_4",
                    "1": "input_param_4",
                    "17": "input4"
                },
                "unaff_r4": {
                    "1": "value",
                    "2": "temp2",
                    "5": "temp_1",
                    "6": "temp1"
                },
                "uVar2": {
                    "3": "temp3",
                    "2": "temp4",
                    "1": "temp1",
                    "4": "bit2"
                },
                "uVar3": {
                    "2": "result",
                    "1": "bit4",
                    "4": "bit3",
                    "3": "temp_4"
                },
                "in_r12": {
                    "3": "temp5",
                    "1": "shift_amount",
                    "4": "mask",
                    "5": "temp2"
                },
                "uVar1": {
                    "1": "bit",
                    "2": "temp_var1",
                    "5": "bit1",
                    "3": "temp3"
                },
                "bVar4": {
                    "3": "flag",
                    "19": "is_zero",
                    "1": "is_zero_flag",
                    "2": "check"
                },
                "uVar5": {
                    "1": "temp3"
                },
                "uVar4": {
                    "1": "flag"
                },
                "uVar6": {
                    "1": "shifted_input4"
                }
            }
        },
        "FUN_08008894": {
            "entrypoint": "0x08008894",
            "current_name": "calculate_floating_point_08008894",
            "code": "\nulonglong calculate_floating_point_08008894(undefined4 input1,uint input2,uint input3,uint input4)\n\n{\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  uint temp4;\n  uint temp5;\n  uint temp6;\n  uint temp7;\n  int temp8;\n  uint temp9;\n  uint temp10;\n  uint temp11;\n  uint temp12;\n  uint temp13;\n  uint temp14;\n  bool flag1;\n  bool flag2;\n  bool flag3;\n  undefined8 result;\n  \n  result = CONCAT44(input2,input1);\n  temp14 = 0x7ff;\n  temp7 = input2 >> 0x14 & 0x7ff;\n  flag1 = temp7 == 0;\n  if (!flag1) {\n    temp10 = input4 >> 0x14 & 0x7ff;\n    flag1 = temp10 == 0;\n  }\n  if (!flag1) {\n    flag1 = temp7 == 0x7ff;\n  }\n  if (!flag1) {\n    flag1 = temp10 == 0x7ff;\n  }\n  if (flag1) {\n    result = calculate_floating_point_08008894_decompiled();\n  }\n  temp9 = (uint)((ulonglong)result >> 0x20);\n  temp12 = (uint)result;\n  temp8 = temp7 - temp10;\n  if ((input3 | input4 << 0xc) == 0) {\n    temp7 = (temp9 ^ input4) & 0x80000000 | temp9 & 0xfffff;\n    flag3 = SCARRY4(temp8,temp14 >> 1);\n    temp9 = temp8 + (temp14 >> 1);\n    flag1 = (int)temp9 < 0;\n    flag2 = temp9 == 0;\n    if (!flag2 && flag1 == flag3) {\n      flag3 = SBORROW4(temp14,temp9);\n      flag1 = (int)(temp14 - temp9) < 0;\n      flag2 = temp14 == temp9;\n    }\n    if (!flag2 && flag1 == flag3) {\n      temp7 = temp7 | temp9 * 0x100000;\n    }\n    if (!flag2 && flag1 == flag3) {\n      return CONCAT44(temp7,temp12);\n    }\n    temp7 = temp7 | 0x100000;\n    temp14 = 0;\n    flag2 = SBORROW4(temp9,1);\n    temp9 = temp9 - 1;\n    flag1 = temp9 == 0;\n    temp3 = temp9;\n  }\n  else {\n    temp3 = (input4 << 0xc) >> 4 | 0x10000000 | input3 >> 0x18;\n    temp14 = input3 << 8;\n    temp11 = (temp9 << 0xc) >> 4 | 0x10000000 | temp12 >> 0x18;\n    temp12 = temp12 * 0x100;\n    temp7 = (temp9 ^ input4) & 0x80000000;\n    flag1 = temp3 <= temp11;\n    if (temp11 == temp3) {\n      flag1 = temp14 <= temp12;\n    }\n    temp8 = temp8 + (uint)flag1;\n    temp9 = temp8 + 0x3fd;\n    if (flag1 == false) {\n      temp3 = temp3 >> 1;\n      temp14 = (uint)((input3 >> 0x18 & 1) != 0) << 0x1f | temp14 >> 1;\n    }\n    temp13 = temp12 - temp14;\n    temp11 = (temp11 - temp3) - (uint)(temp12 < temp14);\n    temp4 = temp3 >> 1;\n    temp1 = (uint)((temp3 & 1) != 0) << 0x1f | temp14 >> 1;\n    temp12 = 0x100000;\n    temp3 = 0x80000;\n    while( true ) {\n      flag1 = temp1 <= temp13;\n      if (temp4 < temp11 || temp11 - temp4 < (uint)flag1) {\n        temp13 = temp13 - temp1;\n        temp12 = temp12 | temp3;\n        temp11 = (temp11 - temp4) - (uint)!flag1;\n      }\n      temp5 = temp4 >> 1;\n      temp1 = (uint)((temp4 & 1) != 0) << 0x1f | temp1 >> 1;\n      flag2 = temp1 <= temp13;\n      flag1 = temp11 - temp5 < (uint)flag2;\n      temp14 = temp11;\n      if (temp5 < temp11 || flag1) {\n        temp13 = temp13 - temp1;\n        temp14 = (temp11 - temp5) - (uint)!flag2;\n      }\n      if (temp5 < temp11 || flag1) {\n        temp12 = temp12 | temp3 >> 1;\n      }\n      temp11 = temp4 >> 2;\n      temp2 = (uint)((temp5 & 1) != 0) << 0x1f | temp1 >> 1;\n      flag2 = temp2 <= temp13;\n      flag1 = temp14 - temp11 < (uint)flag2;\n      temp5 = temp14;\n      if (temp11 < temp14 || flag1) {\n        temp13 = temp13 - temp2;\n        temp5 = (temp14 - temp11) - (uint)!flag2;\n      }\n      if (temp11 < temp14 || flag1) {\n        temp12 = temp12 | temp3 >> 2;\n      }\n      temp6 = temp4 >> 3;\n      temp1 = (uint)((temp11 & 1) != 0) << 0x1f | temp2 >> 1;\n      flag2 = temp1 <= temp13;\n      flag1 = temp5 - temp6 < (uint)flag2;\n      temp11 = temp5;\n      if (temp6 < temp5 || flag1) {\n        temp13 = temp13 - temp1;\n        temp11 = (temp5 - temp6) - (uint)!flag2;\n      }\n      if (temp6 < temp5 || flag1) {\n        temp12 = temp12 | temp3 >> 3;\n      }\n      temp14 = temp11 | temp13;\n      if (temp14 == 0) break;\n      temp11 = temp11 << 4 | temp13 >> 0x1c;\n      temp13 = temp13 << 4;\n      temp4 = temp4 & 0xfffffff8 | temp1 >> 0x1d;\n      temp1 = (temp2 >> 1) << 3;\n      temp3 = temp3 >> 4;\n      if (temp3 == 0) {\n        temp6 = temp4;\n        if ((temp7 & 0x100000) != 0) goto LAB_080089b2;\n        temp7 = temp7 | temp12;\n        temp12 = 0;\n        temp3 = 0x80000000;\n      }\n    }\n    if ((temp7 & 0x100000) == 0) {\n      temp7 = temp7 | temp12;\n      temp12 = 0;\n    }\nLAB_080089b2:\n    flag3 = 0xfc < temp9;\n    flag2 = SBORROW4(temp9,0xfd);\n    temp4 = temp8 + 0x300;\n    flag1 = temp4 == 0;\n    temp3 = temp4;\n    if (flag3 && !flag1) {\n      flag3 = 0x6ff < temp4;\n      flag2 = SBORROW4(temp4,0x700);\n      temp3 = temp8 - 0x400;\n      flag1 = temp4 == 0x700;\n    }\n    if (!flag3 || flag1) {\n      flag1 = temp6 <= temp11;\n      if (temp11 == temp6) {\n        flag1 = temp1 <= temp13;\n      }\n      if (temp11 == temp6 && temp13 == temp1) {\n        flag1 = (temp12 & 1) != 0;\n      }\n      return CONCAT44(temp7 + temp9 * 0x100000 + (uint)CARRY4(temp12,(uint)flag1),temp12 + flag1);\n    }\n  }\n  if (!flag1 && (int)temp3 < 0 == flag2) {\n    return (ulonglong)(temp7 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  flag3 = SCARRY4(temp9,0x36);\n  flag1 = (int)(temp9 + 0x36) < 0;\n  flag2 = temp9 == 0xffffffca;\n  if (flag2 || flag1 != flag3) {\n    temp12 = 0;\n  }\n  if (flag2 || flag1 != flag3) {\n    temp7 = temp7 & 0x80000000;\n  }\n  if (flag2 || flag1 != flag3) {\n    return CONCAT44(temp7,temp12);\n  }\n  temp3 = -temp9;\n  temp11 = temp3 - 0x20;\n  if (0x1f < (int)temp3) {\n    temp3 = temp12 >> (temp11 & 0xff) | temp7 << (0x20 - temp11 & 0xff);\n    temp9 = (temp7 >> (temp11 & 0xff) & ~((temp7 & 0x80000000) >> (temp11 & 0xff))) -\n            ((int)temp3 >> 0x1f);\n    if ((temp14 | temp12 << (0x20 - temp11 & 0xff) | temp3 << 1) == 0) {\n      temp9 = temp9 & ~(temp3 >> 0x1f);\n    }\n    return CONCAT44(temp7,temp9) & 0x80000000ffffffff;\n  }\n  temp8 = temp3 - 0x14;\n  if (temp8 != 0 && temp8 < 0 == SCARRY4(temp11,0xc)) {\n    temp9 = 0xc - temp8;\n    temp3 = temp12 << (temp9 & 0xff);\n    temp12 = temp12 >> (0x20 - temp9 & 0xff) | temp7 << (temp9 & 0xff);\n    temp9 = temp12 + -((int)temp3 >> 0x1f);\n    if ((temp14 | temp3 << 1) == 0) {\n      temp9 = temp9 & ~(temp3 >> 0x1f);\n    }\n    return CONCAT44((temp7 & 0x80000000) + (uint)CARRY4(temp12,-((int)temp3 >> 0x1f)),temp9);\n  }\n  temp11 = temp12 << (temp9 + 0x20 & 0xff);\n  temp12 = temp12 >> (temp3 & 0xff) | temp7 << (temp9 + 0x20 & 0xff);\n  temp9 = temp12 + -((int)temp11 >> 0x1f);\n  if ((temp14 | temp11 << 1) == 0) {\n    temp9 = temp9 & ~(temp11 >> 0x1f);\n  }\n  return CONCAT44((temp7 & 0x80000000) +\n                  ((temp7 & 0x7fffffff) >> (temp3 & 0xff)) +\n                  (uint)CARRY4(temp12,-((int)temp11 >> 0x1f)),temp9);\n}\n\n",
            "renaming": {
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "temp1",
                "uVar2": "temp2",
                "uVar3": "temp3",
                "uVar4": "temp4",
                "uVar5": "temp5",
                "uVar6": "temp6",
                "uVar7": "temp7",
                "iVar8": "temp8",
                "uVar9": "temp9",
                "unaff_r5": "temp10",
                "uVar10": "temp11",
                "uVar11": "temp12",
                "uVar12": "temp13",
                "uVar13": "temp14",
                "bVar14": "flag1",
                "bVar15": "flag2",
                "bVar16": "flag3",
                "uVar17": "result",
                "FUN_08008894": "calculate_floating_point_08008894",
                "calculate_floating_point_08008a02": "calculate_floating_point_decompiled"
            },
            "calling": [
                "FUN_08001994",
                "FUN_0800a1bc",
                "FUN_080098d0",
                "FUN_08003004",
                "FUN_080005b4",
                "FUN_0800af78",
                "FUN_08009990"
            ],
            "called": [
                "FUN_08008a02"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "param_1": {
                    "1": "input_param1",
                    "3": "input_1",
                    "26": "input1"
                },
                "param_2": {
                    "1": "input_param_2",
                    "3": "input_2",
                    "26": "input2"
                },
                "param_3": {
                    "26": "input3",
                    "1": "input_param3",
                    "3": "input_3"
                },
                "param_4": {
                    "3": "input_4",
                    "1": "input_param_4",
                    "26": "input4"
                },
                "uVar1": {
                    "1": "temp_var1",
                    "25": "temp1"
                },
                "uVar2": {
                    "1": "var2",
                    "25": "temp2"
                },
                "uVar3": {
                    "1": "result_3",
                    "24": "temp3"
                },
                "uVar4": {
                    "1": "result4",
                    "25": "temp4"
                },
                "uVar5": {
                    "25": "temp5",
                    "1": "result_5"
                },
                "uVar6": {
                    "1": "operand4",
                    "25": "temp6"
                },
                "uVar7": {
                    "1": "var7",
                    "24": "temp7"
                },
                "iVar8": {
                    "1": "temp_8",
                    "24": "temp8",
                    "2": "difference"
                },
                "uVar9": {
                    "1": "result_9",
                    "2": "result1",
                    "21": "temp9"
                },
                "unaff_r5": {
                    "1": "temp_var10",
                    "16": "temp10"
                },
                "uVar10": {
                    "1": "var11",
                    "16": "temp11",
                    "6": "temp10"
                },
                "uVar11": {
                    "1": "result4",
                    "5": "temp11",
                    "16": "temp12"
                },
                "uVar12": {
                    "1": "result4",
                    "6": "temp12",
                    "16": "temp13"
                },
                "uVar13": {
                    "1": "result_14",
                    "16": "temp14",
                    "6": "temp13"
                },
                "bVar14": {
                    "1": "is_zero1",
                    "2": "bool1",
                    "21": "flag1"
                },
                "bVar15": {
                    "1": "condition_2",
                    "2": "bool2",
                    "21": "flag2"
                },
                "bVar16": {
                    "1": "bool_var3",
                    "20": "flag3",
                    "2": "bool3"
                },
                "uVar17": {
                    "3": "temp15",
                    "2": "floating_point_result",
                    "1": "float_result",
                    "20": "result"
                },
                "FUN_08008894": {
                    "3": "calculate_improved_floating_point",
                    "5": "improved_floating_point_calculation",
                    "16": "calculate_floating_point",
                    "1": "decode_floating_point",
                    "2": "calculate_result"
                },
                "calculate_floating_point_08008a02": {
                    "1": "calculate_floating_point_decompiled"
                },
                "bVar17": {
                    "3": "flag4",
                    "1": "bool4"
                },
                "uVar18": {
                    "1": "result"
                },
                "uVar19": {
                    "1": "result2"
                },
                "bVar26": {
                    "1": "is_positive1"
                },
                "bVar27": {
                    "1": "is_zero1"
                },
                "bVar28": {
                    "1": "is_positive2"
                },
                "bVar29": {
                    "1": "is_zero2"
                },
                "bVar30": {
                    "1": "is_positive3"
                },
                "bVar31": {
                    "1": "is_zero3"
                },
                "bVar32": {
                    "1": "is_positive4"
                },
                "bVar33": {
                    "1": "is_zero4"
                },
                "bVar34": {
                    "1": "is_positive5"
                },
                "bVar35": {
                    "1": "is_zero5"
                },
                "bVar36": {
                    "1": "is_positive6"
                },
                "bVar37": {
                    "1": "is_zero6"
                },
                "bVar38": {
                    "1": "is_positive7"
                },
                "bVar39": {
                    "1": "is_zero7"
                },
                "bVar40": {
                    "1": "is_positive8"
                },
                "bVar41": {
                    "1": "is_zero8"
                },
                "bVar18": {
                    "1": "bool_var5"
                },
                "bVar19": {
                    "1": "bool_var6"
                },
                "bVar20": {
                    "1": "bool_var7"
                },
                "uVar20": {
                    "1": "masked_param2"
                },
                "uVar21": {
                    "1": "shifted_param2"
                },
                "uVar22": {
                    "1": "masked_result"
                },
                "uVar23": {
                    "1": "shifted_result"
                },
                "uVar24": {
                    "1": "dividend"
                },
                "uVar25": {
                    "1": "divisor"
                },
                "uVar26": {
                    "1": "quotient"
                },
                "uVar27": {
                    "1": "remainder"
                },
                "uVar28": {
                    "1": "shifted_masked_param"
                },
                "uVar29": {
                    "1": "shifted_masked_result"
                },
                "uVar30": {
                    "1": "temp_mask"
                },
                "uVar31": {
                    "1": "temp_divisor"
                },
                "uVar32": {
                    "1": "temp_quotient"
                },
                "uVar33": {
                    "1": "temp_remainder"
                }
            }
        },
        "FUN_08008a02": {
            "entrypoint": "0x08008a02",
            "current_name": "calculate_floating_point_08008a02",
            "code": "\nulonglong calculate_floating_point_08008a02(uint input1,uint input2,uint input3,uint input4)\n\n{\n  uint bit1;\n  uint temp1;\n  uint bit2;\n  uint temp3;\n  uint constant;\n  bool is_zero;\n  \n  bit2 = constant & input4 >> 0x14;\n  temp3 = input2;\n  if (temp1 != constant || bit2 != constant) {\n    if (temp1 == constant) {\n      if (((input1 | input2 << 0xc) == 0) && (input1 = input3, temp3 = input4, bit2 != constant)\n         ) {\nhandle_special_case:\n        return (ulonglong)((input2 ^ input4) & 0x80000000 | 0x7ff00000) << 0x20;\n      }\n    }\n    else if (bit2 == constant) {\n      input1 = input3;\n      temp3 = input4;\n      if ((input3 | input4 << 0xc) == 0) {\nhandle_zero_case:\n        return (ulonglong)((input2 ^ input4) & 0x80000000) << 0x20;\n      }\n    }\n    else {\n      is_zero = (input1 | input2 << 1) == 0;\n      if (!is_zero) {\n        is_zero = (input3 | input4 << 1) == 0;\n      }\n      if (!is_zero) {\n        if (temp1 == 0) {\n          temp3 = input2 & 0x80000000;\n          do {\n            bit1 = input1 & 0x80000000;\n            input1 = input1 << 1;\n            input2 = input2 * 2 + (uint)(bit1 != 0);\n          } while ((input2 & 0x100000) == 0);\n          input2 = input2 | temp3;\n          if (bit2 != 0) {\n            return CONCAT44(input2,input1);\n          }\n        }\n        do {\n          temp3 = input3 & 0x80000000;\n          input3 = input3 << 1;\n          input4 = input4 * 2 + (uint)(temp3 != 0);\n        } while ((input4 & 0x100000) == 0);\n        return CONCAT44(input2,input1);\n      }\n      if ((input1 | input2 << 1) != 0) goto handle_special_case;\n      if ((input3 | input4 << 1) != 0) goto handle_zero_case;\n    }\n  }\n  return CONCAT44(temp3,input1) | 0x7ff8000000000000;\n}\n\n",
            "renaming": {
                "FUN_08008a02": "calculate_floating_point_08008a02",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "bit1",
                "unaff_r4": "temp1",
                "uVar2": "bit2",
                "uVar3": "temp3",
                "in_r12": "constant",
                "bVar4": "is_zero",
                "LAB_08008874": "handle_special_case",
                "LAB_08008838": "handle_zero_case"
            },
            "calling": [
                "FUN_08008894"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08008a02": {
                    "1": "decode_float",
                    "4": "calculate_floating_point",
                    "2": "calculate_double_value"
                },
                "param_1": {
                    "1": "integer_part",
                    "2": "input_1",
                    "22": "input1"
                },
                "param_2": {
                    "1": "exponent_bits",
                    "22": "input2",
                    "2": "input_2"
                },
                "param_3": {
                    "2": "input_3",
                    "1": "value2",
                    "22": "input3"
                },
                "param_4": {
                    "1": "payload_bits",
                    "2": "input_4",
                    "22": "input4"
                },
                "uVar1": {
                    "1": "flag2",
                    "3": "temp1",
                    "12": "bit1",
                    "2": "bit"
                },
                "unaff_r4": {
                    "1": "exponent_2_copy",
                    "2": "temp_var2",
                    "3": "temp2",
                    "6": "temp1"
                },
                "uVar2": {
                    "2": "bit3",
                    "7": "bit2",
                    "1": "result1",
                    "4": "temp2"
                },
                "uVar3": {
                    "1": "temp2",
                    "5": "temp3",
                    "2": "bit4",
                    "4": "result"
                },
                "in_r12": {
                    "1": "flag2",
                    "4": "mask",
                    "3": "temp4",
                    "2": "bit5",
                    "7": "constant"
                },
                "bVar4": {
                    "4": "flag",
                    "1": "check",
                    "19": "is_zero",
                    "3": "condition"
                },
                "uVar5": {
                    "1": "temp4"
                },
                "uVar6": {
                    "1": "exponent_1_copy"
                },
                "LAB_08008874": {
                    "1": "handle_special_case"
                },
                "LAB_08008838": {
                    "1": "handle_zero_case"
                },
                "uVar2 != in_r12": {
                    "1": "temp_2_not_equal_constant"
                },
                "(param_2 ^ param_4) & 0x80000000 | 0x7ff00000": {
                    "1": "result_1"
                },
                "(param_2 ^ param_4) & 0x80000000": {
                    "1": "result_2"
                },
                "(param_2 ^ param_4) & 0x80000000 | 0x7ff00000) << 0x20": {
                    "1": "final_result_1"
                },
                "(param_2 ^ param_4) & 0x80000000) << 0x20": {
                    "1": "final_result_2"
                }
            }
        },
        "FUN_08008a74": {
            "entrypoint": "0x08008a74",
            "current_name": "check_equality_08008a74",
            "code": "\nuint check_equality_08008a74(uint value1,uint value2,uint value3,uint value4)\n\n{\n  uint result;\n  bool is_zero;\n  bool is_negative;\n  \n  if (((int)(value2 << 1) >> 0x15 == -1 || (int)(value4 << 1) >> 0x15 == -1) &&\n     ((((int)(value2 << 1) >> 0x15 == -1 && ((value1 | value2 << 0xc) != 0)) ||\n      (((int)(value4 << 1) >> 0x15 == -1 && ((value3 | value4 << 0xc) != 0)))))) {\n    result 1;\n  }\n  is_zero = (value1 | value2 << 1) == 0;\n  if (is_zero) {\n    is_zero = (value3 | value4 << 1) == 0;\n  }\n  if (!is_zero) {\n    is_zero = value2 == value4;\n  }\n  if (is_zero) {\n    is_zero = value1 == value3;\n  }\n  if (!is_zero) {\n    result = value2 ^ value4;\n    is_zero = result == 0;\n    if (-1 < (int)result) {\n      is_zero = value2 == value4;\n    }\n    is_negative = -1 < (int)result && value4 <= value2;\n    if (is_zero) {\n      is_negative = value3 <= value1;\n    }\n    value4 = (int)value4 >> 0x1f;\n    if (!is_negative) {\n      value4 = ~value4;\n    }\n    result value4 | 1;\n  }\n  result 0;\n}\n\n",
            "renaming": {
                "FUN_08008a74": "check_equality_08008a74",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "value3",
                "param_4": "value4",
                "uVar1": "result",
                "bVar2": "is_zero",
                "bVar3": "is_negative",
                "return": "result"
            },
            "calling": [
                "FUN_08008b00"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08008a74": {
                    "1": "check_parameters_and_compare",
                    "6": "check_equality",
                    "2": "check_params_equality",
                    "3": "compare_parameters"
                },
                "param_1": {
                    "1": "first_parameter",
                    "4": "value_1",
                    "7": "a",
                    "10": "value1",
                    "2": "input1",
                    "3": "first_param"
                },
                "param_2": {
                    "1": "input_2",
                    "2": "input2",
                    "4": "value_2",
                    "7": "b",
                    "3": "second_param",
                    "10": "value2"
                },
                "param_3": {
                    "1": "third_parameter",
                    "7": "c",
                    "10": "value3",
                    "2": "num3",
                    "4": "value_3",
                    "3": "third_param"
                },
                "param_4": {
                    "4": "value_4",
                    "1": "num4",
                    "3": "fourth_param",
                    "7": "d",
                    "9": "value4",
                    "2": "input4"
                },
                "uVar1": {
                    "1": "input_xor",
                    "16": "result",
                    "13": "xor_result"
                },
                "bVar2": {
                    "1": "is_equal",
                    "17": "is_zero",
                    "2": "is_zero1"
                },
                "bVar3": {
                    "1": "are_inputs_valid",
                    "3": "is_less_than_zero",
                    "2": "is_greater",
                    "5": "is_negative"
                },
                "param_4_1": {
                    "1": "shifted_value4"
                },
                "param_1_1": {
                    "1": "shifted_value1"
                },
                "return": {
                    "2": "result",
                    "1": "return_value"
                },
                "param_4 >> 0x1f": {
                    "1": "param4_shifted"
                },
                "param_4 | 1": {
                    "1": "result"
                }
            }
        },
        "FUN_08008af0": {
            "entrypoint": "0x08008af0",
            "current_name": "compare_floats_08008af0",
            "code": "\nvoid compare_floats_08008af0(undefined4 result,undefined4 arg2,undefined4 float1,undefined4 float2)\n\n{\n  __aeabi_cdcmpeq(float1,float2,result,arg2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008af0": "compare_floats_08008af0",
                "param_1": "result",
                "param_2": "arg2",
                "param_3": "float1",
                "param_4": "float2"
            },
            "calling": [
                "FUN_08008b4c",
                "FUN_08008b60"
            ],
            "called": [
                "FUN_08008b00"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08008af0": {
                    "12": "compare_floats",
                    "6": "compare_floating_point_numbers",
                    "2": "perform_comparison",
                    "1": "perform_cdcmpeq",
                    "3": "compare_and_return"
                },
                "param_1": {
                    "1": "result_1",
                    "3": "arg1",
                    "4": "comparison_result",
                    "12": "result"
                },
                "param_2": {
                    "1": "cdparam_2",
                    "3": "arg2",
                    "2": "unused_param"
                },
                "param_3": {
                    "1": "src1",
                    "8": "float1",
                    "2": "number1",
                    "4": "value1",
                    "3": "float_1"
                },
                "param_4": {
                    "3": "float_2",
                    "1": "cdparam_4",
                    "8": "float2",
                    "2": "number2",
                    "4": "value2"
                },
                "FUN_08008b00": {
                    "1": "perform_operation"
                }
            }
        },
        "FUN_08008b00": {
            "entrypoint": "0x08008b00",
            "current_name": "calculate_result_08008b00",
            "code": "\nundefined4 calculate_result_08008b00(undefined4 value1)\n\n{\n  perform_calculations();\n  return value1;\n}\n\n",
            "renaming": {
                "FUN_08008b00": "calculate_result_08008b00",
                "param_1": "value1",
                "__nedf2": "perform_calculations"
            },
            "calling": [
                "FUN_08008b10",
                "FUN_08008af0",
                "FUN_08008b24"
            ],
            "called": [
                "FUN_08008a74"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08008b00": {
                    "1": "perform_ne_func",
                    "2": "convert_to_undefined4",
                    "3": "calculate",
                    "4": "convert_to_float",
                    "5": "calculate_result"
                },
                "param_1": {
                    "5": "input",
                    "1": "param1",
                    "8": "value1",
                    "2": "input_data"
                },
                "FUN_08008a74": {
                    "3": "calculate_sum",
                    "1": "modify_values",
                    "13": "perform_calculation",
                    "2": "compute_result",
                    "4": "calculate_result"
                },
                "param_2": {
                    "1": "parameter_2",
                    "2": "b",
                    "8": "value2"
                },
                "param_3": {
                    "1": "b",
                    "2": "operand2",
                    "8": "value2"
                },
                "param_4": {
                    "1": "parameter_4",
                    "2": "d",
                    "8": "value4"
                },
                "__nedf2": {
                    "1": "perform_calculations"
                }
            }
        },
        "FUN_08008b10": {
            "entrypoint": "0x08008b10",
            "current_name": "check_if_not_zero_08008b10",
            "code": "\nbool check_if_not_zero_08008b10(void)\n\n{\n  char result;\n  \n  __aeabi_cdcmpeq();\n  return result != '\\0';\n}\n\n",
            "renaming": {
                "FUN_08008b10": "check_if_not_zero_08008b10",
                "in_ZR": "result"
            },
            "calling": [
                "FUN_0800a5a0",
                "FUN_08009d78"
            ],
            "called": [
                "FUN_08008b00"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08008b10": {
                    "1": "check_nonzero_result",
                    "2": "is_not_zero",
                    "5": "check_if_not_zero"
                },
                "in_ZR": {
                    "1": "is_equal",
                    "18": "result",
                    "7": "is_not_zero"
                }
            }
        },
        "FUN_08008b24": {
            "entrypoint": "0x08008b24",
            "current_name": "check_if_cy_is_zero_08008b24",
            "code": "\nbool check_if_cy_is_zero_08008b24(void)\n\n{\n  char input_char;\n  \n  compare_floats();\n  return input_char == '\\0';\n}\n\n",
            "renaming": {
                "FUN_08008b24": "check_if_cy_is_zero_08008b24",
                "in_CY": "input_char",
                "__aeabi_cdcmpeq": "compare_floats"
            },
            "calling": [
                "FUN_08009b24",
                "FUN_080098d0",
                "FUN_08003004"
            ],
            "called": [
                "FUN_08008b00"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08008b24": {
                    "1": "check_if_cy_zero",
                    "4": "check_if_cy_is_zero",
                    "2": "check_if_null_char",
                    "3": "is_cy_null"
                },
                "in_CY": {
                    "1": "char_in_cy",
                    "13": "input_char",
                    "5": "carry_flag",
                    "4": "input_character",
                    "3": "cy_value"
                },
                "FUN_08008b00": {
                    "1": "compare_param_with_zero"
                },
                "__aeabi_cdcmpeq": {
                    "1": "compare_values",
                    "4": "compare_floats"
                },
                "param_1": {
                    "2": "input_param"
                },
                "<unnamed_parameter_1>": {
                    "1": "unnamed_parameter_1"
                }
            }
        },
        "FUN_08008b4c": {
            "entrypoint": "0x08008b4c",
            "current_name": "check_conditions_08008b4c",
            "code": "\nbool check_conditions_08008b4c(void)\n\n{\n  undefined is_zero;\n  undefined is_carry;\n  \n  __aeabi_cdrcmple();\n  return !(bool)is_carry || (bool)is_zero;\n}\n\n",
            "renaming": {
                "FUN_08008b4c": "check_conditions_08008b4c",
                "in_CY": "is_carry",
                "in_ZR": "is_zero"
            },
            "calling": [
                "FUN_0800a5a0"
            ],
            "called": [
                "FUN_08008af0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08008b4c": {
                    "1": "check_cduce",
                    "6": "check_conditions",
                    "3": "check_condition",
                    "2": "check_condition_and_return",
                    "4": "check_comparison_result"
                },
                "in_CY": {
                    "10": "is_carry",
                    "1": "is_not_carry",
                    "8": "carry_flag",
                    "4": "is_carry_set"
                },
                "in_ZR": {
                    "1": "not_zero_result",
                    "6": "is_zero_result",
                    "2": "zero_result",
                    "11": "is_zero",
                    "5": "zero_flag"
                },
                "param_1": {
                    "2": "param_1",
                    "1": "unused_param_1"
                },
                "param_2": {
                    "1": "unknown_param2",
                    "2": "param_2"
                },
                "param_3": {
                    "2": "param_3",
                    "1": "arg_3"
                },
                "param_4": {
                    "1": "d",
                    "2": "param_4"
                },
                "FUN_08008af0": {
                    "1": "perform_calculation"
                }
            }
        },
        "FUN_08008b60": {
            "entrypoint": "0x08008b60",
            "current_name": "is_zero_character_08008b60",
            "code": "\nbool is_zero_character_08008b60(void)\n\n{\n  char input_char;\n  \n  compare_absolute_values();\n  return input_char == '\\0';\n}\n\n",
            "renaming": {
                "FUN_08008b60": "is_zero_character_08008b60",
                "in_CY": "input_char",
                "__aeabi_cdrcmple": "compare_absolute_values"
            },
            "calling": [
                "FUN_08009318",
                "FUN_08003004",
                "FUN_080094c0",
                "FUN_0800af78"
            ],
            "called": [
                "FUN_08008af0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08008b60": {
                    "1": "check_if_char_is_null",
                    "2": "is_null_char",
                    "3": "is_null_terminated"
                },
                "in_CY": {
                    "1": "is_null",
                    "5": "character",
                    "13": "input_char",
                    "9": "input_character"
                },
                "__aeabi_cdrcmple": {
                    "2": "compare_absolute_values",
                    "1": "compare_floating_point_numbers"
                },
                "FUN_08008af0": {
                    "1": "execute_function"
                },
                "param_1": {
                    "1": "param1"
                },
                "param_2": {
                    "1": "undefined2"
                },
                "param_3": {
                    "1": "undefined3"
                },
                "param_4": {
                    "1": "undefined4"
                }
            }
        },
        "FUN_08008b74": {
            "entrypoint": "0x08008b74",
            "current_name": "check_parameters_08008b74",
            "code": "\nundefined4 check_parameters_08008b74(uint input_1,int input_2,uint input_3,int input_4)\n\n{\n  if ((((input_2 << 1) >> 0x15 != -1) || ((input_1 | input_2 << 0xc) == 0)) &&\n     (((input_4 << 1) >> 0x15 != -1 || ((input_3 | input_4 << 0xc) == 0)))) {\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08008b74": "check_parameters_08008b74",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4"
            },
            "calling": [
                "FUN_080098d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08008b74": {
                    "12": "check_parameters",
                    "1": "is_param_valid",
                    "2": "check_conditions",
                    "3": "check_parameters_validity",
                    "4": "check_params"
                },
                "param_1": {
                    "14": "input_1",
                    "1": "first_param",
                    "5": "value1",
                    "6": "input1"
                },
                "param_2": {
                    "1": "arg2",
                    "6": "value2",
                    "12": "input_2"
                },
                "param_3": {
                    "13": "input_3",
                    "1": "third_param",
                    "6": "input3"
                },
                "param_4": {
                    "1": "shift_2",
                    "12": "input_4",
                    "6": "input4"
                }
            }
        },
        "FUN_08008ba0": {
            "entrypoint": "0x08008ba0",
            "current_name": "calculate_result_08008ba0",
            "code": "\nuint calculate_result_08008ba0(uint input_value,uint input2)\n\n{\n  uint shifted_value;\n  int offset;\n  uint shift_amount;\n  \n  offset = input2 * 2 + 0x200000;\n  if (input2 * 2 < 0xffe00000) {\n    if (-1 < offset) {\n      return 0;\n    }\n    shifted_value = offset >> 0x15;\n    shift_amount = -shifted_value - 0x3e1;\n    if (shifted_value < 0xfffffc20 && shift_amount != 0) {\n      shifted_value = (input2 << 0xb | 0x80000000 | input_value >> 0x15) >> (shift_amount & 0xff);\n      if ((input2 & 0x80000000) != 0) {\n        shifted_value = -shifted_value;\n      }\n      return shifted_value;\n    }\n  }\n  else if ((input_value | input2 << 0xc) != 0) {\n    return 0;\n  }\n  input2 = input2 & 0x80000000;\n  if (input2 == 0) {\n    input2 = 0x7fffffff;\n  }\n  return input2;\n}\n\n",
            "renaming": {
                "FUN_08008ba0": "calculate_result_08008ba0",
                "param_1": "input_value",
                "param_2": "input2",
                "uVar1": "shifted_value",
                "iVar2": "offset",
                "uVar3": "shift_amount"
            },
            "calling": [
                "FUN_0800a348",
                "FUN_0800a5a0",
                "FUN_08002c18",
                "FUN_08003004",
                "FUN_080095b8",
                "FUN_080005b4",
                "FUN_08009d78",
                "FUN_0800adf0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08008ba0": {
                    "1": "convert_to_twos_complement",
                    "2": "reverse_bits",
                    "4": "calculate_result",
                    "3": "calculate_shifted_value"
                },
                "param_1": {
                    "1": "input_value1",
                    "2": "input_value_1",
                    "12": "input_value",
                    "6": "input1"
                },
                "param_2": {
                    "1": "shift_amount",
                    "5": "input2",
                    "2": "input_value_2",
                    "4": "shift_value"
                },
                "uVar1": {
                    "1": "calculation1",
                    "2": "quotient",
                    "6": "result"
                },
                "iVar2": {
                    "1": "shifted_flag_value",
                    "2": "temp1",
                    "4": "offset"
                },
                "uVar3": {
                    "1": "adjusted_shift_amount",
                    "3": "shift_amount"
                },
                "uVar4": {
                    "2": "result",
                    "1": "calculation4"
                },
                "DAT_08009000": {
                    "1": "constant"
                },
                "DAT_0800a000": {
                    "1": "constant_mask"
                },
                "uVar1_final": {
                    "1": "final_result"
                },
                "result": {
                    "1": "final_result"
                },
                "PTR_": {
                    "1": "unchanged_ptr_variable"
                },
                "DAT_": {
                    "1": "unchanged_dat_variable"
                }
            }
        },
        "FUN_08008bf0": {
            "entrypoint": "0x08008bf0",
            "current_name": "calculate_shifted_value_08008bf0",
            "code": "\nuint calculate_shifted_value_08008bf0(uint input_value,uint shift_amount)\n\n{\n  int shifted_value;\n  uint shift_amount;\n  \n  if ((shift_amount & 0x80000000) != 0) {\n    return 0;\n  }\n  shifted_value = shift_amount * 2 + 0x200000;\n  if (shift_amount * 2 < 0xffe00000) {\n    if (-1 < shifted_value) {\n      return 0;\n    }\n    shift_amount = -(shifted_value >> 0x15) - 0x3e1;\n    if (-1 < (int)shift_amount) {\n      return (shift_amount << 0xb | 0x80000000 | input_value >> 0x15) >> (shift_amount & 0xff);\n    }\n  }\n  else if ((input_value | shift_amount << 0xc) != 0) {\n    return 0;\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_08008bf0": "calculate_shifted_value_08008bf0",
                "param_1": "input_value",
                "param_2": "shift_amount",
                "iVar1": "shifted_value",
                "uVar2": "shift_amount"
            },
            "calling": [
                "FUN_08001994",
                "FUN_08002c18",
                "FUN_08003004",
                "FUN_080005b4",
                "FUN_08003b98",
                "FUN_08002408",
                "FUN_08004e30",
                "FUN_08001f00"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08008bf0": {
                    "1": "reverse_bits",
                    "2": "calculate_shift",
                    "16": "calculate_shifted_value"
                },
                "param_1": {
                    "1": "input_param",
                    "13": "input_value",
                    "3": "value_1",
                    "2": "input_param_1",
                    "5": "input1"
                },
                "param_2": {
                    "1": "value2",
                    "5": "input2",
                    "9": "shift_amount",
                    "2": "input_param_2",
                    "3": "value_2",
                    "4": "multiplier"
                },
                "iVar1": {
                    "1": "temp_var1",
                    "15": "shifted_value",
                    "2": "temp_var",
                    "3": "shifted_result"
                },
                "uVar2": {
                    "1": "result",
                    "14": "shift_amount",
                    "4": "shift_count",
                    "2": "shifted_result"
                },
                "0x80000000": {
                    "1": "sign_bit"
                },
                "0x200000": {
                    "1": "const1"
                },
                "0xffe00000": {
                    "1": "max_val"
                },
                "-1": {
                    "1": "negative_one"
                },
                "0x15": {
                    "1": "shift_amount1"
                },
                "0x3e1": {
                    "1": "const2"
                },
                "0xb": {
                    "1": "shift_amount2"
                },
                "0xffffffff": {
                    "1": "error_code"
                }
            }
        },
        "FUN_08008c30": {
            "entrypoint": "0x08008c30",
            "current_name": "convert_to_float_08008c30",
            "code": "\nuint convert_to_float_08008c30(uint input_value,uint multiplier)\n\n{\n  uint result;\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  bool is_zero;\n  bool is_less_than;\n  \n  temp1 = multiplier * 2;\n  is_less_than = temp1 < 0x70000000;\n  temp2 = temp1 + 0x90000000;\n  result = temp2;\n  if (!is_less_than) {\n    temp3 = temp1 + 0x8fe00000;\n    result = temp3;\n  }\n  is_zero = result == 0;\n  if (!is_less_than && temp2 >= 0x200000) {\n    is_zero = temp3 == 0x1fc00000;\n  }\n  if (((is_less_than || temp2 < 0x200000) || 0x1fc00000 < temp3) || is_zero) {\n    if ((multiplier & 0x40000000) != 0) {\n      if (((int)temp1 >> 0x15 == -1) && ((input_value | multiplier << 0xc) != 0)) {\n        return 0x7fc00000;\n      }\n      return multiplier & 0x80000000 | 0x7f800000;\n    }\n    if ((int)(temp1 + 0x92e00000) < 0 != signed_carry(temp2,0x2e00000)) {\n      return multiplier & 0x80000000;\n    }\n    temp1 = 0x18 - (temp1 + 0x92e00000 >> 0x15);\n    result = input_value >> (temp1 & 0xff);\n    if (input_value << (0x20 - temp1 & 0xff) != 0) {\n      result = result | 1;\n    }\n    temp2 = multiplier & 0x1fffff | 0x100000;\n    input_value = result | temp2 << (0x20 - temp1 & 0xff);\n    temp2 = (temp2 >> (temp1 & 0xff)) << 1;\n  }\n  result = (multiplier & 0x80000000 | input_value >> 0x1d) + temp2 * 4 + (uint)(0x7fffffff < input_value * 8);\n  if (input_value * 8 == 0x80000000) {\n    result = result & 0xfffffffe;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08008c30": "convert_to_float_08008c30",
                "param_1": "input_value",
                "param_2": "multiplier",
                "uVar1": "result",
                "uVar2": "temp1",
                "uVar3": "temp2",
                "bVar4": "is_zero",
                "bVar5": "is_less_than",
                "in_r12": "temp3",
                "SCARRY4": "signed_carry"
            },
            "calling": [
                "FUN_08001994",
                "FUN_0800056c",
                "FUN_08003004",
                "FUN_08004940",
                "FUN_080005b4",
                "FUN_080046d0",
                "FUN_08002978",
                "FUN_080044e8",
                "FUN_08002638",
                "FUN_08001f00"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08008c30": {
                    "1": "unsigned_float_manipulation",
                    "2": "calculate_floating_point_value",
                    "7": "convert_to_float",
                    "5": "calculate_floating_point"
                },
                "param_1": {
                    "3": "input",
                    "1": "number",
                    "11": "input_value",
                    "2": "input1",
                    "5": "input_float"
                },
                "param_2": {
                    "1": "input_float_as_int",
                    "4": "multiplier",
                    "2": "input_multiplier"
                },
                "uVar1": {
                    "30": "result",
                    "1": "output_value"
                },
                "uVar2": {
                    "1": "doubled_shift_amount",
                    "4": "shifted_value",
                    "2": "temp",
                    "3": "multiplied_value",
                    "7": "temp1"
                },
                "uVar3": {
                    "1": "offset",
                    "4": "shifted_value",
                    "7": "temp2"
                },
                "bVar4": {
                    "1": "check_condition",
                    "25": "is_zero"
                },
                "bVar5": {
                    "2": "is_less_than_limit",
                    "1": "check_flag2",
                    "4": "is_in_range",
                    "7": "is_less_than",
                    "5": "is_less_than_threshold"
                },
                "in_r12": {
                    "2": "threshold",
                    "1": "limit",
                    "4": "comparison_value",
                    "6": "temp3"
                },
                "SCARRY4": {
                    "1": "is_carrier_set",
                    "2": "signed_carry"
                },
                "uVar2_1": {
                    "1": "shifted_bit_count"
                },
                "uVar1_1": {
                    "1": "shifted_floating_point_value"
                },
                "uVar3_1": {
                    "1": "shifted_floating_point_operation"
                },
                "0x80000000": {
                    "1": "0x80000000"
                }
            }
        },
        "FUN_08008cd8": {
            "entrypoint": "0x08008cd8",
            "current_name": "calculate_float_08008cd8",
            "code": "\nuint calculate_float_08008cd8(uint input1,uint input2,undefined4 input3,uint input4)\n\n{\n  int shifted_input1;\n  int shifted_input2;\n  uint temp1;\n  uint temp2;\n  uint shifted_input1;\n  uint result2;\n  uint difference;\n  bool is_equal;\n  \n  temp1 = input2 ^ 0x80000000;\n  shifted_input1 = input1 << 1;\n  is_equal = shifted_input1 == 0;\n  if (!is_equal) {\n    input4 = input2 << 1;\n    is_equal = input4 == 0;\n  }\n  if (!is_equal) {\n    is_equal = shifted_input1 == input4;\n  }\n  shifted_input1 = (int)shifted_input1 >> 0x18;\n  if (!is_equal) {\n    is_equal = shifted_input1 == -1;\n  }\n  if (!is_equal) {\n    is_equal = (int)input4 >> 0x18 == -1;\n  }\n  if (is_equal) {\n    shifted_input2 = (int)(input2 << 1) >> 0x18;\n    if (shifted_input1 == -1 || shifted_input2 == -1) {\n      shifted_input1 = temp1;\n      if (shifted_input1 == -1) {\n        shifted_input1 = input1;\n      }\n      if (shifted_input1 != -1 || shifted_input2 != -1) {\n        temp1 = shifted_input1;\n      }\n      is_equal = (shifted_input1 & 0x7fffff) == 0;\n      if (is_equal) {\n        is_equal = (temp1 & 0x7fffff) == 0;\n      }\n      if (is_equal) {\n        is_equal = shifted_input1 == temp1;\n      }\n      if (!is_equal) {\n        shifted_input1 = shifted_input1 | 0x400000;\n      }\n      return shifted_input1;\n    }\n    if (((input1 ^ temp1) & 0x7fffffff) != 0) {\n      if (shifted_input1 == 0) {\n        input1 = temp1;\n      }\n      return input1;\n    }\n    if (input1 != temp1) {\n      return 0;\n    }\n    if ((shifted_input1 & 0xff000000) == 0) {\n      temp1 = input1 << 1;\n      if ((input1 & 0x80000000) != 0) {\n        temp1 = temp1 | 0x80000000;\n      }\n      return temp1;\n    }\n    if (shifted_input1 < 0xfe000000) {\n      return input1 + 0x800000;\n    }\n    input1 = input1 & 0x80000000;\nLAB_08008e12:\n    return input1 | 0x7f800000;\n  }\n  shifted_input1 = shifted_input1 >> 0x18;\n  input4 = input4 >> 0x18;\n  difference = input4 - shifted_input1;\n  is_equal = difference != 0;\n  result2 = shifted_input1;\n  if (is_equal && shifted_input1 <= input4) {\n    result2 = shifted_input1 + difference;\n  }\n  if (is_equal && shifted_input1 <= input4) {\n    temp1 = temp1 ^ input1;\n  }\n  if (is_equal && shifted_input1 <= input4) {\n    input1 = input1 ^ temp1;\n  }\n  if (is_equal && shifted_input1 <= input4) {\n    temp1 = temp1 ^ input1;\n  }\n  if (input4 < shifted_input1) {\n    difference = -difference;\n  }\n  if (0x19 < difference) {\n    return input1;\n  }\n  shifted_input1 = input1 & 0xffffff | 0x800000;\n  if ((input1 & 0x80000000) != 0) {\n    shifted_input1 = -shifted_input1;\n  }\n  temp2 = temp1 & 0xffffff | 0x800000;\n  if ((temp1 & 0x80000000) != 0) {\n    temp2 = -temp2;\n  }\n  if (result2 == difference) {\n    temp2 = temp2 ^ 0x800000;\n    if (result2 == 0) {\n      shifted_input1 = shifted_input1 ^ 0x800000;\n      result2 = 1;\n    }\n    else {\n      difference = difference - 1;\n    }\n  }\n  shifted_input1 = shifted_input1 + ((int)temp2 >> (difference & 0xff));\n  temp2 = temp2 << (0x20 - difference & 0xff);\n  input1 = shifted_input1 & 0x80000000;\n  if ((int)shifted_input1 < 0) {\n    is_equal = temp2 != 0;\n    temp2 = -temp2;\n    shifted_input1 = -shifted_input1 - (uint)is_equal;\n  }\n  if (shifted_input1 < 0x800000) {\n    temp1 = temp2 & 0x80000000;\n    temp2 = temp2 << 1;\n    shifted_input1 = shifted_input1 * 2 + (uint)(temp1 != 0);\n    temp1 = result2 - 2;\n    if (result2 - 1 == 0 || shifted_input1 < 0x800000) {\n      difference = leading_zero_count(shifted_input1) - 8;\n      shifted_input1 = shifted_input1 << (difference & 0xff);\n      if ((int)temp1 < (int)difference) {\n        shifted_input1 = shifted_input1 >> (-(temp1 - difference) & 0xff);\n      }\n      else {\n        shifted_input1 = shifted_input1 + (temp1 - difference) * 0x800000;\n      }\n      return shifted_input1 | input1;\n    }\n  }\n  else {\n    temp1 = result2 - 1;\n    if (0xffffff < shifted_input1) {\n      temp1 = shifted_input1 & 1;\n      shifted_input1 = shifted_input1 >> 1;\n      temp2 = (uint)(temp1 != 0) << 0x1f | temp2 >> 1;\n      temp1 = result2;\n      if (0xfd < result2) goto LAB_08008e12;\n    }\n  }\n  shifted_input1 = shifted_input1 + temp1 * 0x800000 + (uint)(0x7fffffff < temp2);\n  if (temp2 == 0x80000000) {\n    shifted_input1 = shifted_input1 & 0xfffffffe;\n  }\n  return shifted_input1 | input1;\n}\n\n",
            "renaming": {
                "FUN_08008cd8": "calculate_float_08008cd8",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar3": "temp1",
                "uVar4": "temp2",
                "uVar5": "shifted_input1",
                "uVar6": "result2",
                "uVar7": "difference",
                "bVar8": "is_equal",
                "iVar1": "shifted_input1",
                "iVar2": "shifted_input2",
                "LZCOUNT": "leading_zero_count"
            },
            "calling": [
                "FUN_08002908",
                "FUN_08003004",
                "FUN_08004940",
                "FUN_080028bc",
                "FUN_080005b4",
                "FUN_08002978",
                "FUN_08002408",
                "FUN_08001f00"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08008cd8": {
                    "1": "calculate_modified_floating_point",
                    "2": "calculate_modified_value",
                    "9": "calculate_float",
                    "3": "calculate_floating_point"
                },
                "param_1": {
                    "4": "input_value",
                    "1": "input_value1",
                    "2": "input_a",
                    "11": "input1"
                },
                "param_2": {
                    "1": "fraction",
                    "11": "input2",
                    "2": "num2",
                    "4": "input_2"
                },
                "param_3": {
                    "3": "input_3",
                    "1": "unknown_param",
                    "2": "unused_param",
                    "10": "input3"
                },
                "param_4": {
                    "1": "input_value3",
                    "3": "input_4",
                    "10": "input4",
                    "2": "input_d"
                },
                "uVar3": {
                    "1": "input_2_complement",
                    "2": "modified_value1",
                    "3": "temp1"
                },
                "uVar4": {
                    "2": "temp1",
                    "1": "result_2",
                    "3": "result2"
                },
                "uVar5": {
                    "2": "temp1",
                    "1": "shifted_input_a",
                    "3": "result"
                },
                "uVar6": {
                    "1": "temp4",
                    "2": "result2"
                },
                "uVar7": {
                    "1": "temp4",
                    "2": "shift_difference",
                    "19": "difference"
                },
                "bVar8": {
                    "3": "is_condition_true",
                    "1": "condition_1",
                    "2": "is_match",
                    "4": "is_condition_met",
                    "7": "is_equal"
                },
                "iVar1": {
                    "1": "original_exponent_shifted",
                    "2": "shifted_value_1",
                    "3": "shift_amount",
                    "5": "shifted_input1"
                },
                "iVar2": {
                    "1": "high_bits2",
                    "4": "shift2",
                    "5": "shifted_input2",
                    "2": "shifted_value2"
                },
                "LZCOUNT": {
                    "2": "leading_zero_count"
                },
                "uVar8": {
                    "1": "result"
                },
                "LZCOUNT()": {
                    "1": "leading_zero_count"
                },
                "uVar9": {
                    "1": "final_result"
                }
            }
        },
        "FUN_08008cdc": {
            "entrypoint": "0x08008cdc",
            "current_name": "calculate_float_08008cdc",
            "code": "\nuint calculate_float_08008cdc(uint input1,uint input2,undefined4 param3,uint param4)\n\n{\n  int shifted_input1;\n  int shifted_input2;\n  uint result1;\n  uint abs_input2;\n  uint temp1;\n  uint difference;\n  bool is_equal;\n  \n  abs_input2 = input1 << 1;\n  is_equal = abs_input2 == 0;\n  if (!is_equal) {\n    param4 = input2 << 1;\n    is_equal = param4 == 0;\n  }\n  if (!is_equal) {\n    is_equal = abs_input2 == param4;\n  }\n  shifted_input1 = (int)abs_input2 >> 0x18;\n  if (!is_equal) {\n    is_equal = shifted_input1 == -1;\n  }\n  if (!is_equal) {\n    is_equal = (int)param4 >> 0x18 == -1;\n  }\n  if (is_equal) {\n    shifted_input2 = (int)(input2 << 1) >> 0x18;\n    if (shifted_input1 == -1 || shifted_input2 == -1) {\n      abs_input2 = input2;\n      if (shifted_input1 == -1) {\n        abs_input2 = input1;\n      }\n      if (shifted_input1 != -1 || shifted_input2 != -1) {\n        input2 = abs_input2;\n      }\n      is_equal = (abs_input2 & 0x7fffff) == 0;\n      if (is_equal) {\n        is_equal = (input2 & 0x7fffff) == 0;\n      }\n      if (is_equal) {\n        is_equal = abs_input2 == input2;\n      }\n      if (!is_equal) {\n        abs_input2 = abs_input2 | 0x400000;\n      }\n      return abs_input2;\n    }\n    if (((input1 ^ input2) & 0x7fffffff) != 0) {\n      if (abs_input2 == 0) {\n        input1 = input2;\n      }\n      return input1;\n    }\n    if (input1 != input2) {\n      return 0;\n    }\n    if ((abs_input2 & 0xff000000) == 0) {\n      abs_input2 = input1 << 1;\n      if ((input1 & 0x80000000) != 0) {\n        abs_input2 = abs_input2 | 0x80000000;\n      }\n      return abs_input2;\n    }\n    if (abs_input2 < 0xfe000000) {\n      return input1 + 0x800000;\n    }\n    input1 = input1 & 0x80000000;\nLAB_08008e12:\n    return input1 | 0x7f800000;\n  }\n  abs_input2 = abs_input2 >> 0x18;\n  param4 = param4 >> 0x18;\n  difference = param4 - abs_input2;\n  is_equal = difference != 0;\n  temp1 = abs_input2;\n  if (is_equal && abs_input2 <= param4) {\n    temp1 = abs_input2 + difference;\n  }\n  if (is_equal && abs_input2 <= param4) {\n    input2 = input2 ^ input1;\n  }\n  if (is_equal && abs_input2 <= param4) {\n    input1 = input1 ^ input2;\n  }\n  if (is_equal && abs_input2 <= param4) {\n    input2 = input2 ^ input1;\n  }\n  if (param4 < abs_input2) {\n    difference = -difference;\n  }\n  if (0x19 < difference) {\n    return input1;\n  }\n  abs_input2 = input1 & 0xffffff | 0x800000;\n  if ((input1 & 0x80000000) != 0) {\n    abs_input2 = -abs_input2;\n  }\n  result1 = input2 & 0xffffff | 0x800000;\n  if ((input2 & 0x80000000) != 0) {\n    result1 = -result1;\n  }\n  if (temp1 == difference) {\n    result1 = result1 ^ 0x800000;\n    if (temp1 == 0) {\n      abs_input2 = abs_input2 ^ 0x800000;\n      temp1 = 1;\n    }\n    else {\n      difference = difference - 1;\n    }\n  }\n  abs_input2 = abs_input2 + ((int)result1 >> (difference & 0xff));\n  result1 = result1 << (0x20 - difference & 0xff);\n  input1 = abs_input2 & 0x80000000;\n  if ((int)abs_input2 < 0) {\n    is_equal = result1 != 0;\n    result1 = -result1;\n    abs_input2 = -abs_input2 - (uint)is_equal;\n  }\n  if (abs_input2 < 0x800000) {\n    difference = result1 & 0x80000000;\n    result1 = result1 << 1;\n    abs_input2 = abs_input2 * 2 + (uint)(difference != 0);\n    difference = temp1 - 2;\n    if (temp1 - 1 == 0 || abs_input2 < 0x800000) {\n      temp1 = leading_zero_count(abs_input2) - 8;\n      abs_input2 = abs_input2 << (temp1 & 0xff);\n      if ((int)difference < (int)temp1) {\n        abs_input2 = abs_input2 >> (-(difference - temp1) & 0xff);\n      }\n      else {\n        abs_input2 = abs_input2 + (difference - temp1) * 0x800000;\n      }\n      return abs_input2 | input1;\n    }\n  }\n  else {\n    difference = temp1 - 1;\n    if (0xffffff < abs_input2) {\n      difference = abs_input2 & 1;\n      abs_input2 = abs_input2 >> 1;\n      result1 = (uint)(difference != 0) << 0x1f | result1 >> 1;\n      difference = temp1;\n      if (0xfd < temp1) goto LAB_08008e12;\n    }\n  }\n  abs_input2 = abs_input2 + difference * 0x800000 + (uint)(0x7fffffff < result1);\n  if (result1 == 0x80000000) {\n    abs_input2 = abs_input2 & 0xfffffffe;\n  }\n  return abs_input2 | input1;\n}\n\n",
            "renaming": {
                "FUN_08008cdc": "calculate_float_08008cdc",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "param3",
                "param_4": "param4",
                "iVar1": "shifted_input1",
                "iVar2": "shifted_input2",
                "uVar3": "result1",
                "uVar4": "abs_input2",
                "uVar5": "temp1",
                "uVar6": "difference",
                "bVar7": "is_equal",
                "LZCOUNT": "leading_zero_count"
            },
            "calling": [
                "FUN_08002908",
                "FUN_08003826",
                "FUN_08003004",
                "FUN_08004940",
                "FUN_080028bc",
                "FUN_080005b4",
                "FUN_08002978",
                "FUN_08001f00"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08008cdc": {
                    "1": "reverse_float",
                    "16": "calculate_float",
                    "5": "calculate_floating_point"
                },
                "param_1": {
                    "2": "input_value1",
                    "1": "input_a",
                    "5": "num1",
                    "14": "input1"
                },
                "param_2": {
                    "14": "input2",
                    "2": "value2",
                    "1": "input_float2",
                    "5": "num2"
                },
                "param_3": {
                    "2": "value3",
                    "1": "value1",
                    "5": "input3"
                },
                "param_4": {
                    "2": "value4",
                    "5": "input4",
                    "1": "value2"
                },
                "iVar1": {
                    "1": "shifted_input_a",
                    "3": "shifted_value1",
                    "2": "exponent1",
                    "6": "shifted_input1",
                    "4": "shifted_num1"
                },
                "iVar2": {
                    "2": "bit_shift2",
                    "1": "shift_count2",
                    "4": "shifted_num2",
                    "6": "shifted_input2",
                    "3": "shifted_value2"
                },
                "uVar3": {
                    "1": "shifted_input2_adjusted",
                    "4": "result1",
                    "3": "result",
                    "2": "fraction1"
                },
                "uVar4": {
                    "1": "abs_shifted_y",
                    "2": "result2",
                    "3": "abs_input2"
                },
                "uVar5": {
                    "1": "abs_difference",
                    "3": "temp1",
                    "2": "u_var5"
                },
                "uVar6": {
                    "1": "delta",
                    "2": "u_var6",
                    "3": "temp2",
                    "13": "difference"
                },
                "bVar7": {
                    "1": "input_equal",
                    "11": "is_zero",
                    "15": "is_equal"
                },
                "LZCOUNT": {
                    "1": "leading_zeros_count"
                },
                "uVar8": {
                    "1": "temp1"
                },
                "uVar9": {
                    "1": "exponent_sum"
                },
                "uVar10": {
                    "1": "norm_input1"
                },
                "uVar11": {
                    "1": "norm_input2"
                },
                "uVar12": {
                    "1": "temp_result"
                },
                "uVar13": {
                    "1": "shifted_input2"
                },
                "uVar14": {
                    "1": "shifted_input1"
                },
                "uVar15": {
                    "1": "dividend"
                },
                "uVar16": {
                    "1": "divisor"
                },
                "uVar17": {
                    "1": "quotient"
                },
                "uVar18": {
                    "1": "fraction"
                },
                "uVar19": {
                    "1": "sign_bit"
                },
                "uVar20": {
                    "1": "temp"
                },
                "uVar21": {
                    "1": "negative_divisor"
                },
                "uVar22": {
                    "1": "is_dividend_negative"
                },
                "uVar23": {
                    "1": "is_divisor_negative"
                },
                "uVar24": {
                    "1": "is_shifted_input1_negative"
                },
                "uVar25": {
                    "1": "is_shifted_input2_negative"
                },
                "uVar26": {
                    "1": "rounding_bit"
                },
                "uVar27": {
                    "1": "denormalized_result"
                },
                "uVar28": {
                    "1": "is_rounded_to_even"
                },
                "uVar29": {
                    "1": "denormalized_result_bypass"
                },
                "uVar30": {
                    "1": "fractional_part"
                },
                "uVar31": {
                    "1": "shift_bits"
                },
                "uVar32": {
                    "1": "shift_count"
                },
                "uVar33": {
                    "1": "normalization_shift"
                },
                "uVar34": {
                    "1": "denormal_exponent"
                },
                "uVar35": {
                    "1": "normalized_result"
                },
                "uVar36": {
                    "1": "rounding_mask"
                },
                "uVar37": {
                    "1": "round_off_bit"
                }
            }
        },
        "FUN_08008e3c": {
            "entrypoint": "0x08008e3c",
            "current_name": "reverse_bits_08008e3c",
            "code": "\nuint reverse_bits_08008e3c(uint input_value)\n\n{\n  uint leading_zeros;\n  uint shift_amount;\n  int constant;\n  uint mask;\n  \n  if (input_value == 0) {\n    return 0;\n  }\n  leading_zeros = LZCOUNT(input_value);\n  shift_amount = leading_zeros - 8;\n  constant = shift_amount * -0x800000 + 0x4a800000;\n  if (7 < leading_zeros) {\n    mask = 0 << (shift_amount & 0xff);\n    leading_zeros = constant + (input_value << (shift_amount & 0xff)) +\n            (0U >> (0x20 - shift_amount & 0xff)) + (uint)(0x7fffffff < mask);\n    if (mask == 0x80000000) {\n      leading_zeros = leading_zeros & 0xfffffffe;\n    }\n    return leading_zeros;\n  }\n  shift_amount = input_value << leading_zeros + 0x18;\n  leading_zeros = constant + ((input_value >> (0x20 - (leading_zeros + 0x18) & 0xff)) - ((int)shift_amount >> 0x1f));\n  if ((shift_amount & 0x7fffffff) == 0) {\n    leading_zeros = leading_zeros & ~(shift_amount >> 0x1f);\n  }\n  return leading_zeros;\n}\n\n",
            "renaming": {
                "param_1": "input_value",
                "uVar1": "leading_zeros",
                "uVar2": "shift_amount",
                "iVar3": "constant",
                "uVar4": "mask",
                "FUN_08008e3c": "reverse_bits_08008e3c"
            },
            "calling": [
                "FUN_08002c18",
                "FUN_08002638"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "param_1": {
                    "11": "input",
                    "1": "number",
                    "18": "input_value"
                },
                "uVar1": {
                    "1": "output",
                    "4": "leading_zeroes",
                    "10": "leading_zeros",
                    "3": "leading_zeros_count",
                    "8": "result"
                },
                "uVar2": {
                    "3": "shifted_value",
                    "1": "shift_amt2",
                    "2": "shift",
                    "16": "shift_amount",
                    "5": "shifted_input"
                },
                "iVar3": {
                    "1": "offset_value",
                    "2": "intermediate_result",
                    "5": "offset",
                    "12": "constant",
                    "4": "constant_value"
                },
                "uVar4": {
                    "12": "mask",
                    "2": "temp_result",
                    "5": "temp_value",
                    "3": "shifted_value",
                    "1": "result"
                },
                "uVar1_": {
                    "1": "leading_zeros"
                },
                "uVar2_": {
                    "1": "shifted_value"
                },
                "iVar3_": {
                    "1": "calculated_value"
                },
                "uVar4_": {
                    "1": "mask"
                },
                "FUN_08008e3c": {
                    "2": "calculate_new_value",
                    "1": "calculate_modified_value",
                    "9": "reverse_bits",
                    "3": "calculate_hash",
                    "5": "calculate_result"
                },
                "uVar5": {
                    "1": "temp_value",
                    "2": "shifted_value"
                },
                "uVar6": {
                    "1": "sign_check"
                },
                "uVar7": {
                    "1": "result"
                },
                "uVar8": {
                    "1": "final_result"
                },
                "uVar4 == 0x80000000": {
                    "1": "is_temp_value_negative"
                },
                "uVarFinal": {
                    "1": "result"
                }
            }
        },
        "FUN_08008e44": {
            "entrypoint": "0x08008e44",
            "current_name": "reverse_bits_08008e44",
            "code": "\nuint reverse_bits_08008e44(uint input)\n\n{\n  uint leading_zeros;\n  uint shift_amount;\n  uint sign_bit;\n  int result;\n  \n  sign_bit = input & 0x80000000;\n  if ((int)sign_bit < 0) {\n    input = -input;\n  }\n  if (input == 0) {\n    return 0;\n  }\n  leading_zeros = count_leading_zeros(input);\n  shift_amount = leading_zeros - 8;\n  result = ((sign_bit | 0x4b000000) - 0x800000) + shift_amount * -0x800000;\n  if (7 < leading_zeros) {\n    leading_zeros = 0 << (shift_amount & 0xff);\n    sign_bit = result + (input << (shift_amount & 0xff)) +\n            (0U >> (0x20 - shift_amount & 0xff)) + (uint)(0x7fffffff < leading_zeros);\n    if (leading_zeros == 0x80000000) {\n      sign_bit = sign_bit & 0xfffffffe;\n    }\n    return sign_bit;\n  }\n  shift_amount = input << leading_zeros + 0x18;\n  sign_bit = result + ((input >> (0x20 - (leading_zeros + 0x18) & 0xff)) - ((int)shift_amount >> 0x1f));\n  if ((shift_amount & 0x7fffffff) == 0) {\n    sign_bit = sign_bit & ~(shift_amount >> 0x1f);\n  }\n  return sign_bit;\n}\n\n",
            "renaming": {
                "FUN_08008e44": "reverse_bits_08008e44",
                "param_1": "input",
                "uVar1": "leading_zeros",
                "uVar2": "shift_amount",
                "uVar3": "sign_bit",
                "iVar4": "result",
                "LZCOUNT": "count_leading_zeros"
            },
            "calling": [
                "FUN_080004fc",
                "FUN_08003618",
                "FUN_08002c18",
                "FUN_08003004",
                "FUN_08004940",
                "FUN_080024c4",
                "FUN_08002408",
                "FUN_08001f00"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08008e44": {
                    "2": "decode_integer",
                    "1": "decode_unsigned",
                    "3": "count_leading_zeros",
                    "5": "reverse_bits"
                },
                "param_1": {
                    "15": "input",
                    "1": "input_number",
                    "9": "input_value",
                    "4": "number"
                },
                "uVar1": {
                    "1": "leading_zeros_count",
                    "26": "leading_zeros"
                },
                "uVar2": {
                    "2": "shift",
                    "1": "shift_count",
                    "24": "shift_amount"
                },
                "uVar3": {
                    "16": "sign_bit",
                    "11": "is_negative",
                    "1": "result",
                    "2": "sign"
                },
                "iVar4": {
                    "3": "intermediate_value",
                    "1": "multiplier",
                    "2": "modified_value",
                    "19": "result"
                },
                "uVar_1": {
                    "1": "temp_variable1"
                },
                "uVar_2": {
                    "1": "temp_variable2"
                },
                "LZCOUNT": {
                    "2": "count_leading_zeros"
                },
                "uVar1_2": {
                    "1": "leading_zeros2"
                },
                "uVar2_2": {
                    "1": "shift_amount2"
                },
                "uVar3_2": {
                    "1": "is_negative2"
                },
                "uVar2_3": {
                    "1": "shift_amount3"
                },
                "uVar3_3": {
                    "1": "is_negative3"
                }
            }
        },
        "FUN_08008eec": {
            "entrypoint": "0x08008eec",
            "current_name": "calculate_float_08008eec",
            "code": "\nuint calculate_float_08008eec(uint input1,uint input2,undefined4 input3,uint input4)\n\n{\n  longlong product;\n  uint result;\n  uint input1_shifted;\n  int sum;\n  int diff;\n  uint product;\n  int temp2;\n  uint temp_result;\n  bool is_zero;\n  bool is_negative;\n  \n  input1_shifted = input1 >> 0x17 & 0xff;\n  is_zero = input1_shifted == 0;\n  if (!is_zero) {\n    input4 = input2 >> 0x17 & 0xff;\n    is_zero = input4 == 0;\n  }\n  if (!is_zero) {\n    is_zero = input1_shifted == 0xff;\n  }\n  if (!is_zero) {\n    is_zero = input4 == 0xff;\n  }\n  if (is_zero) {\n    input4 = input2 >> 0x17 & 0xff;\n    if (input1_shifted == 0xff || input4 == 0xff) {\n      is_zero = input1 == 0 || input1 == 0x80000000;\n      result = input2;\n      if (input1 != 0 && input1 != 0x80000000) {\n        is_zero = input2 == 0;\n        result = input1;\n      }\n      if (!is_zero) {\n        is_zero = input2 == 0x80000000;\n      }\n      temp_result = result;\n      if (((is_zero) || ((input1_shifted == 0xff && ((result & 0x7fffff) != 0)))) ||\n         ((input4 == 0xff && (temp_result = input2, (input2 & 0x7fffff) != 0)))) {\n        return temp_result | 0x7fc00000;\n      }\n      result = result ^ input2;\n      goto LAB_0800903c;\n    }\n    is_zero = (input1 & 0x7fffffff) == 0;\n    if (!is_zero) {\n      is_zero = (input2 & 0x7fffffff) == 0;\n    }\n    if (is_zero) {\n      return (input1 ^ input2) & 0x80000000;\n    }\n    is_zero = input1_shifted == 0;\n    result = input1 & 0x80000000;\n    while( true ) {\n      if (is_zero) {\n        input1 = input1 << 1;\n        is_zero = (input1 & 0x800000) == 0;\n      }\n      if (!is_zero) break;\n      input1_shifted = input1_shifted - 1;\n    }\n    input1 = input1 | result;\n    is_zero = input4 == 0;\n    result = input2 & 0x80000000;\n    while( true ) {\n      if (is_zero) {\n        input2 = input2 << 1;\n        is_zero = (input2 & 0x800000) == 0;\n      }\n      if (!is_zero) break;\n      input4 = input4 - 1;\n    }\n    input2 = input2 | result;\n  }\n  sum = input1_shifted + input4;\n  temp_result = input1 ^ input2;\n  input1_shifted = input1 << 9;\n  is_zero = input1_shifted == 0;\n  if (!is_zero) {\n    input2 = input2 << 9;\n    is_zero = input2 == 0;\n  }\n  if (is_zero) {\n    if (input1_shifted == 0) {\n      input2 = input2 << 9;\n    }\n    result = temp_result & 0x80000000 | input1 & 0x7fffff | input2 >> 9;\n    is_negative = SBORROW4(sum,0x7f);\n    diff = sum + -0x7f;\n    is_zero = diff == 0;\n    temp2 = diff;\n    if (!is_zero && 0x7e < sum) {\n      is_negative = SBORROW4(0xff,diff);\n      temp2 = 0xff - diff;\n      is_zero = diff == 0xff;\n    }\n    if (!is_zero && temp2 < 0 == is_negative) {\n      result = result | diff * 0x800000;\n    }\n    if (!is_zero && temp2 < 0 == is_negative) {\n      return result;\n    }\n    result = result | 0x800000;\n    product = 0;\n    is_negative = SBORROW4(diff,1);\n    temp_result = sum - 0x80;\n    is_zero = temp_result == 0;\n    input1_shifted = temp_result;\n  }\n  else {\n    product = (ulonglong)(input1_shifted >> 5 | 0x8000000) * (ulonglong)(input2 >> 5 | 0x8000000);\n    product = (uint)product;\n    result = (uint)((ulonglong)product >> 0x20);\n    is_zero = result < 0x800000;\n    if (is_zero) {\n      result = result << 1;\n    }\n    if (is_zero) {\n      result = result | product >> 0x1f;\n      product = product << 1;\n    }\n    result = temp_result & 0x80000000 | result;\n    temp_result = (sum + -0x7f) - (uint)is_zero;\n    is_negative = SBORROW4(temp_result,0xfd);\n    is_zero = temp_result == 0xfd;\n    input1_shifted = temp_result - 0xfd;\n    if (temp_result < 0xfe) {\n      result = result + temp_result * 0x800000 + (uint)(0x7fffffff < product);\n      if (product == 0x80000000) {\n        result = result & 0xfffffffe;\n      }\n      return result;\n    }\n  }\n  if (is_zero || (int)input1_shifted < 0 != is_negative) {\n    is_zero = (int)(temp_result + 0x19) < 0;\n    if (temp_result == 0xffffffe7 || is_zero != SCARRY4(temp_result,0x19)) {\n      result = result & 0x80000000;\n    }\n    if (temp_result != 0xffffffe7 && is_zero == SCARRY4(temp_result,0x19)) {\n      input1_shifted = (result << 1) >> (-temp_result & 0xff);\n      temp_result = result << (temp_result + 0x20 & 0xff);\n      input1_shifted = ((uint)((result & 0x80000000) != 0) << 0x1f | input1_shifted >> 1) + (uint)((byte)input1_shifted & 1);\n      if ((product | temp_result << 1) == 0) {\n        input1_shifted = input1_shifted & ~(temp_result >> 0x1f);\n      }\n      return input1_shifted;\n    }\n    return result;\n  }\nLAB_0800903c:\n  return result & 0x80000000 | 0x7f800000;\n}\n\n",
            "renaming": {
                "FUN_08008eec": "calculate_float_08008eec",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar2": "result",
                "uVar3": "input1_shifted",
                "uVar6": "product",
                "uVar8": "temp_result",
                "bVar9": "is_zero",
                "bVar10": "is_negative",
                "iVar4": "sum",
                "iVar5": "diff",
                "iVar7": "temp2",
                "lVar1": "product"
            },
            "calling": [
                "FUN_08001994",
                "FUN_08003004",
                "FUN_080028bc",
                "FUN_080005b4",
                "FUN_08002408",
                "FUN_08002638",
                "FUN_08002908",
                "FUN_08003826",
                "FUN_08003618",
                "FUN_08002c18",
                "FUN_080024c4",
                "FUN_08002978",
                "FUN_08004e30",
                "FUN_08001f00"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08008eec": {
                    "1": "calculate_floating_point_value",
                    "2": "floating_point_addition",
                    "10": "calculate_float",
                    "6": "calculate_floating_point"
                },
                "param_1": {
                    "1": "input_value1",
                    "2": "operand1",
                    "3": "value1",
                    "15": "input1"
                },
                "param_2": {
                    "1": "second_operand",
                    "15": "input2",
                    "2": "input_2",
                    "3": "value2"
                },
                "param_3": {
                    "2": "modifier",
                    "1": "input1",
                    "4": "param3",
                    "10": "input3"
                },
                "param_4": {
                    "1": "input2_shifted",
                    "3": "param4",
                    "8": "input4"
                },
                "uVar2": {
                    "1": "adjusted_result",
                    "2": "result2",
                    "23": "result"
                },
                "uVar3": {
                    "1": "bit_count1",
                    "3": "input1_shifted",
                    "2": "temp1"
                },
                "uVar6": {
                    "1": "mantissa1",
                    "3": "multiplication_result",
                    "2": "product_low",
                    "4": "product"
                },
                "uVar8": {
                    "4": "temp_result",
                    "1": "shifted_or_result",
                    "3": "result"
                },
                "bVar9": {
                    "1": "check",
                    "2": "condition1",
                    "17": "is_zero",
                    "3": "is_zero1"
                },
                "bVar10": {
                    "1": "is_negative_shift_sum",
                    "15": "is_negative",
                    "2": "condition2",
                    "4": "is_overflow"
                },
                "iVar4": {
                    "1": "bit_count1",
                    "2": "sum_exponents",
                    "18": "sum"
                },
                "iVar5": {
                    "1": "adjusted_exponent",
                    "3": "shifted_sum",
                    "7": "diff",
                    "2": "temp",
                    "5": "difference"
                },
                "iVar7": {
                    "1": "difference_abs",
                    "3": "diff2",
                    "2": "difference"
                },
                "lVar1": {
                    "1": "result1",
                    "2": "long_result",
                    "8": "product"
                },
                "\tiVar4": {
                    "1": "bit_count_sum"
                },
                "iuVar3": {
                    "1": "temp1"
                },
                "iuVar8": {
                    "1": "temp2"
                }
            }
        },
        "FUN_08009054": {
            "entrypoint": "0x08009054",
            "current_name": "calculate_float_08009054",
            "code": "\nuint calculate_float_08009054(uint input1,uint input2,undefined4 input3,uint input4)\n\n{\n  uint temp1;\n  uint temp2;\n  int difference;\n  uint temp4;\n  int temp5;\n  uint result;\n  bool condition1;\n  bool condition2;\n  bool flag3;\n  \n  temp2 = input1 >> 0x17 & 0xff;\n  condition1 = temp2 == 0;\n  if (!condition1) {\n    input4 = input2 >> 0x17 & 0xff;\n    condition1 = input4 == 0;\n  }\n  if (!condition1) {\n    condition1 = temp2 == 0xff;\n  }\n  if (!condition1) {\n    condition1 = input4 == 0xff;\n  }\n  if (condition1) {\n    input4 = input2 >> 0x17 & 0xff;\n    result = input1;\n    if (temp2 == 0xff) {\n      if (((input1 & 0x7fffff) != 0) || (result = input2, input4 == 0xff)) {\nLAB_0800904a:\n        return result | 0x7fc00000;\n      }\n    }\n    else {\n      if (input4 == 0xff) {\n        result = input2;\n        if ((input2 & 0x7fffff) == 0) {\nLAB_08009000:\n          return (input1 ^ input2) & 0x80000000;\n        }\n        goto LAB_0800904a;\n      }\n      condition1 = (input1 & 0x7fffffff) == 0;\n      if (!condition1) {\n        condition1 = (input2 & 0x7fffffff) == 0;\n      }\n      if (!condition1) {\n        condition1 = temp2 == 0;\n        result = input1 & 0x80000000;\n        while( true ) {\n          if (condition1) {\n            input1 = input1 << 1;\n            condition1 = (input1 & 0x800000) == 0;\n          }\n          if (!condition1) break;\n          temp2 = temp2 - 1;\n        }\n        input1 = input1 | result;\n        condition1 = input4 == 0;\n        result = input2 & 0x80000000;\n        while( true ) {\n          if (condition1) {\n            input2 = input2 << 1;\n            condition1 = (input2 & 0x800000) == 0;\n          }\n          if (!condition1) break;\n          input4 = input4 - 1;\n        }\n        input2 = input2 | result;\n        goto LAB_0800906c;\n      }\n      if ((input1 & 0x7fffffff) == 0) {\n        if ((input2 & 0x7fffffff) != 0) goto LAB_08009000;\n        goto LAB_0800904a;\n      }\n    }\n    input1 = input1 ^ input2;\n  }\n  else {\nLAB_0800906c:\n    difference = temp2 - input4;\n    if (input2 << 9 == 0) {\n      input1 = (input1 ^ input2) & 0x80000000 | input1 & 0x7fffff;\n      flag3 = signed_carry(difference,0x7f);\n      temp5 = difference + 0x7f;\n      condition1 = temp5 < 0;\n      condition2 = temp5 == 0;\n      if (!condition2 && condition1 == flag3) {\n        flag3 = signed_borrow(0xff,temp5);\n        condition1 = 0xff - temp5 < 0;\n        condition2 = temp5 == 0xff;\n      }\n      if (!condition2 && condition1 == flag3) {\n        input1 = input1 | temp5 * 0x800000;\n      }\n      if (!condition2 && condition1 == flag3) {\n        return input1;\n      }\n      input1 = input1 | 0x800000;\n      temp2 = 0;\n      condition2 = signed_borrow(temp5,1);\n      temp4 = difference + 0x7e;\n      condition1 = temp4 == 0;\n      result = temp4;\n    }\n    else {\n      temp1 = (input2 << 9) >> 4 | 0x10000000;\n      temp2 = (input1 << 9) >> 4 | 0x10000000;\n      input1 = (input1 ^ input2) & 0x80000000;\n      condition1 = temp1 <= temp2;\n      if (!condition1) {\n        temp2 = temp2 << 1;\n      }\n      temp4 = difference + 0x7d + (uint)condition1;\n      result = 0x800000;\n      do {\n        if (temp1 <= temp2) {\n          temp2 = temp2 - temp1;\n          input1 = input1 | result;\n        }\n        condition1 = temp1 >> 1 <= temp2;\n        if (condition1) {\n          temp2 = temp2 - (temp1 >> 1);\n        }\n        if (condition1) {\n          input1 = input1 | result >> 1;\n        }\n        condition1 = temp1 >> 2 <= temp2;\n        if (condition1) {\n          temp2 = temp2 - (temp1 >> 2);\n        }\n        if (condition1) {\n          input1 = input1 | result >> 2;\n        }\n        condition1 = temp1 >> 3 <= temp2;\n        if (condition1) {\n          temp2 = temp2 - (temp1 >> 3);\n        }\n        if (condition1) {\n          input1 = input1 | result >> 3;\n        }\n        temp2 = temp2 * 0x10;\n        condition1 = temp2 == 0;\n        if (!condition1) {\n          result = result >> 4;\n          condition1 = result == 0;\n        }\n      } while (!condition1);\n      condition2 = signed_borrow(temp4,0xfd);\n      condition1 = temp4 == 0xfd;\n      result = temp4 - 0xfd;\n      if (temp4 < 0xfe) {\n        input1 = input1 + temp4 * 0x800000 + (uint)(temp1 <= temp2);\n        if (temp2 - temp1 == 0) {\n          input1 = input1 & 0xfffffffe;\n        }\n        return input1;\n      }\n    }\n    if (condition1 || (int)result < 0 != condition2) {\n      condition1 = (int)(temp4 + 0x19) < 0;\n      if (temp4 == 0xffffffe7 || condition1 != signed_carry(temp4,0x19)) {\n        input1 = input1 & 0x80000000;\n      }\n      if (temp4 == 0xffffffe7 || condition1 != signed_carry(temp4,0x19)) {\n        return input1;\n      }\n      result = (input1 << 1) >> (-temp4 & 0xff);\n      temp4 = input1 << (temp4 + 0x20 & 0xff);\n      result = ((uint)((input1 & 0x80000000) != 0) << 0x1f | result >> 1) + (uint)((byte)result & 1);\n      if ((temp2 | temp4 << 1) == 0) {\n        result = result & ~(temp4 >> 0x1f);\n      }\n      return result;\n    }\n  }\n  return input1 & 0x80000000 | 0x7f800000;\n}\n\n",
            "renaming": {
                "FUN_08009054": "calculate_float_08009054",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "temp1",
                "uVar2": "temp2",
                "iVar3": "difference",
                "uVar4": "temp4",
                "iVar5": "temp5",
                "uVar6": "result",
                "bVar7": "condition1",
                "bVar8": "condition2",
                "bVar9": "flag3",
                "SCARRY4": "signed_carry",
                "SBORROW4": "signed_borrow"
            },
            "calling": [
                "FUN_080004fc",
                "FUN_08001994",
                "FUN_08002908",
                "FUN_08004250",
                "FUN_08003618",
                "FUN_08003004",
                "FUN_08004940",
                "FUN_080028bc",
                "FUN_08002e08",
                "FUN_08001f00"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08009054": {
                    "1": "float_to_u_int",
                    "11": "calculate_float",
                    "7": "calculate_floating_point",
                    "2": "compute_floating_point"
                },
                "param_1": {
                    "4": "value1",
                    "1": "operand1",
                    "2": "input_a",
                    "14": "input1"
                },
                "param_2": {
                    "14": "input2",
                    "2": "num2",
                    "4": "value2",
                    "1": "operand2"
                },
                "param_3": {
                    "1": "num3",
                    "6": "param3",
                    "2": "input_c",
                    "3": "value3",
                    "7": "input3"
                },
                "param_4": {
                    "1": "temp2",
                    "4": "param4",
                    "2": "float3",
                    "3": "value4",
                    "7": "input4"
                },
                "uVar1": {
                    "1": "result",
                    "3": "temp_var1",
                    "2": "normalized_input2",
                    "10": "temp1"
                },
                "uVar2": {
                    "1": "shift_amount",
                    "2": "normalized_input1",
                    "10": "temp2",
                    "3": "temp_var2"
                },
                "iVar3": {
                    "1": "diff_exponent",
                    "3": "temp_var3",
                    "4": "diff",
                    "9": "difference"
                },
                "uVar4": {
                    "1": "result",
                    "2": "temp1",
                    "3": "temp_var4",
                    "9": "temp4"
                },
                "iVar5": {
                    "9": "temp5",
                    "1": "var2",
                    "2": "shifted_difference",
                    "3": "temp2",
                    "4": "sum"
                },
                "uVar6": {
                    "8": "temp6",
                    "1": "output",
                    "3": "temp_var6",
                    "18": "result"
                },
                "bVar7": {
                    "1": "temp_bool1",
                    "8": "is_zero"
                },
                "bVar8": {
                    "1": "is_zero2",
                    "8": "flag2",
                    "2": "is_overflow"
                },
                "bVar9": {
                    "1": "overflow2",
                    "8": "flag3",
                    "2": "carry_flag",
                    "7": "condition3"
                },
                "SCARRY4": {
                    "1": "signed_carry"
                },
                "SBORROW4": {
                    "1": "signed_borrow"
                },
                "bBar8": {
                    "1": "is_zero2"
                },
                "bBar9": {
                    "1": "is_shifted_diff_negative"
                }
            }
        },
        "FUN_0800919c": {
            "entrypoint": "0x0800919c",
            "current_name": "calculate_result_0800919c",
            "code": "\nuint calculate_result_0800919c(uint input_1,uint input_2)\n\n{\n  bool is_negative;\n  uint input_1_doubled;\n  uint input_2_doubled;\n  uint combined_input;\n  bool is_zero;\n  \n  input_1_doubled = input_1 * 2;\n  input_2_doubled = input_2 * 2;\n  if (((int)input_1_doubled >> 0x18 == -1 || (int)input_2_doubled >> 0x18 == -1) &&\n     ((((int)input_1_doubled >> 0x18 == -1 && ((input_1 & 0x7fffff) != 0)) ||\n      (((int)input_2_doubled >> 0x18 == -1 && ((input_2 & 0x7fffff) != 0)))))) {\n    result 1;\n  }\n  combined_input = input_1_doubled | input_2 & 0x7fffffff;\n  is_zero = combined_input == 0;\n  if (!is_zero) {\n    combined_input = input_1 ^ input_2;\n    is_zero = combined_input == 0;\n  }\n  is_negative = -1 < (int)combined_input;\n  if (is_negative) {\n    input_1 = input_1_doubled + input_2 * -2;\n    is_zero = input_1 == 0;\n  }\n  if ((is_negative && input_2_doubled <= input_1_doubled) && !is_zero) {\n    input_1 = (int)input_2 >> 0x1f;\n  }\n  if (!is_negative || input_2_doubled > input_1_doubled) {\n    input_1 = ~((int)input_2 >> 0x1f);\n  }\n  if (!is_zero) {\n    input_1 = input_1 | 1;\n  }\n  result input_1;\n}\n\n",
            "renaming": {
                "FUN_0800919c": "calculate_result_0800919c",
                "param_1": "input_1",
                "param_2": "input_2",
                "uVar2": "input_1_doubled",
                "uVar3": "input_2_doubled",
                "uVar4": "combined_input",
                "bVar1": "is_negative",
                "bVar5": "is_zero",
                "return": "result"
            },
            "calling": [
                "FUN_08009204"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800919c": {
                    "1": "determine_relationship",
                    "4": "check_overflow",
                    "2": "multiply_and_compare",
                    "9": "calculate_result",
                    "3": "check_overflow_and_sign"
                },
                "param_1": {
                    "15": "input_1",
                    "2": "number1",
                    "1": "first_parameter",
                    "6": "input1"
                },
                "param_2": {
                    "1": "value2",
                    "6": "input2",
                    "2": "input_value_2",
                    "15": "input_2"
                },
                "uVar2": {
                    "1": "param_1_times_2",
                    "2": "double_input1",
                    "3": "double_input_1",
                    "5": "input_1_doubled"
                },
                "uVar3": {
                    "1": "doubled_input_value_2",
                    "2": "double_input2",
                    "3": "double_input_2",
                    "5": "input_2_doubled"
                },
                "uVar4": {
                    "1": "combined_params",
                    "2": "combined",
                    "7": "combined_inputs",
                    "3": "result"
                },
                "bVar1": {
                    "23": "is_negative",
                    "1": "is_modified_input_negative",
                    "3": "is_positive"
                },
                "bVar5": {
                    "25": "is_zero",
                    "1": "is_modified_input_zero",
                    "4": "is_combined_zero"
                },
                "return": {
                    "3": "result"
                },
                "param_1 ^ param_2": {
                    "1": "xor_result"
                },
                "param_1 | 1": {
                    "1": "bitwise_or_result"
                },
                "return value": {
                    "1": "result"
                }
            }
        },
        "FUN_080091fc": {
            "entrypoint": "0x080091fc",
            "current_name": "compare_floats_080091fc",
            "code": "\nvoid compare_floats_080091fc(undefined4 float1,undefined4 float2)\n\n{\n  __aeabi_cfcmpeq(float2,float1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080091fc": "compare_floats_080091fc",
                "param_1": "float1",
                "param_2": "float2"
            },
            "calling": [
                "FUN_08009250",
                "FUN_08009264"
            ],
            "called": [
                "FUN_08009204"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080091fc": {
                    "25": "compare_floats",
                    "2": "compare_floating_point_values",
                    "1": "compare_arguments"
                },
                "param_1": {
                    "13": "float1",
                    "1": "float_a",
                    "10": "value1"
                },
                "param_2": {
                    "1": "second_float",
                    "13": "float2",
                    "10": "value2"
                },
                "FUN_08009204": {
                    "1": "check_equality",
                    "2": "compare_floats_helper",
                    "4": "perform_comparison"
                }
            }
        },
        "FUN_08009204": {
            "entrypoint": "0x08009204",
            "current_name": "concatenate_params_08009204",
            "code": "\nundefined8 concatenate_params_08009204(undefined4 first_param,undefined4 second_param)\n\n{\n  compare_floats();\n  return concatenate_values(second_param,first_param);\n}\n\n",
            "renaming": {
                "FUN_08009204": "concatenate_params_08009204",
                "param_1": "first_param",
                "param_2": "second_param",
                "__cmpsf2": "compare_floats",
                "CONCAT44": "concatenate_values"
            },
            "calling": [
                "FUN_08009228",
                "FUN_08009214",
                "FUN_080091fc",
                "FUN_0800923c"
            ],
            "called": [
                "FUN_0800919c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08009204": {
                    "12": "concatenate_params",
                    "1": "concat_parameters",
                    "7": "concatenate_parameters",
                    "3": "combine_parameters",
                    "2": "concatenate_and_compare"
                },
                "param_1": {
                    "1": "prefix",
                    "5": "value1",
                    "7": "first_parameter",
                    "8": "first_param"
                },
                "param_2": {
                    "7": "second_parameter",
                    "1": "parameter_2",
                    "8": "second_param",
                    "5": "value2"
                },
                "FUN_0800919c": {
                    "1": "perform_operation",
                    "5": "perform_comparison"
                },
                "__cmpsf2": {
                    "1": "perform_float_comparison",
                    "7": "compare_floats"
                },
                "CONCAT44": {
                    "1": "concatenate_integers",
                    "2": "concatenate_values"
                }
            }
        },
        "FUN_08009214": {
            "entrypoint": "0x08009214",
            "current_name": "check_if_not_zero_08009214",
            "code": "\nbool check_if_not_zero_08009214(void)\n\n{\n  char result;\n  \n  compare_floats();\n  return result != '\\0';\n}\n\n",
            "renaming": {
                "FUN_08009214": "check_if_not_zero_08009214",
                "in_ZR": "result",
                "__aeabi_cfcmpeq": "compare_floats"
            },
            "calling": [
                "FUN_08002afc",
                "FUN_080029d8",
                "FUN_080005b4",
                "FUN_08002638",
                "FUN_08004e30",
                "FUN_08001f00"
            ],
            "called": [
                "FUN_08009204"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08009214": {
                    "1": "check_equality",
                    "8": "check_if_not_zero",
                    "3": "check_nonzero_result",
                    "5": "check_condition"
                },
                "in_ZR": {
                    "13": "result",
                    "1": "is_equal",
                    "7": "input_character",
                    "2": "condition_result",
                    "4": "is_not_zero"
                },
                "param_1": {
                    "1": "arg1"
                },
                "param_2": {
                    "1": "arg2"
                },
                "FUN_08009204": {
                    "1": "compare_values"
                },
                "__aeabi_cfcmpeq": {
                    "1": "compare_floats"
                }
            }
        },
        "FUN_08009228": {
            "entrypoint": "0x08009228",
            "current_name": "check_if_null_08009228",
            "code": "\nbool check_if_null_08009228(void)\n\n{\n  char input_char;\n  \n  compare_floats();\n  return input_char == '\\0';\n}\n\n",
            "renaming": {
                "FUN_08009228": "check_if_null_08009228",
                "in_CY": "input_char",
                "__aeabi_cfcmpeq": "compare_floats"
            },
            "calling": [
                "FUN_08002afc",
                "FUN_08003826",
                "FUN_08003004",
                "FUN_080029d8",
                "FUN_080005b4",
                "FUN_08004e30"
            ],
            "called": [
                "FUN_08009204"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08009228": {
                    "1": "check_null_termination",
                    "3": "is_cy_null",
                    "4": "check_if_cy_is_null",
                    "7": "check_if_null",
                    "2": "check_if_null_character"
                },
                "in_CY": {
                    "1": "cy_value",
                    "14": "input_char",
                    "4": "cy",
                    "6": "input_character",
                    "2": "input_cy"
                },
                "__aeabi_cfcmpeq": {
                    "1": "perform_cfcmpeq_check",
                    "6": "compare_floats"
                },
                "param_1": {
                    "1": "arg1"
                },
                "param_2": {
                    "1": "arg2"
                }
            }
        },
        "FUN_0800923c": {
            "entrypoint": "0x0800923c",
            "current_name": "check_equality_0800923c",
            "code": "\nbool check_equality_0800923c(void)\n\n{\n  undefined zero_flag;\n  undefined carry_flag;\n  \n  compare_floating_point_equals();\n  return !(bool)carry_flag || (bool)zero_flag;\n}\n\n",
            "renaming": {
                "FUN_0800923c": "check_equality_0800923c",
                "in_CY": "carry_flag",
                "in_ZR": "zero_flag",
                "__aeabi_cfcmpeq": "compare_floating_point_equals"
            },
            "calling": [
                "FUN_080005b4",
                "FUN_08004e30",
                "FUN_08001f00"
            ],
            "called": [
                "FUN_08009204"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800923c": {
                    "1": "is_zero_or_carry_set",
                    "2": "check_equality_or_zero",
                    "8": "check_equality"
                },
                "param_1": {
                    "1": "input1"
                },
                "param_2": {
                    "1": "value2"
                },
                "in_CY": {
                    "4": "is_carry",
                    "1": "is_carry_flag",
                    "2": "carry",
                    "12": "carry_flag",
                    "5": "is_carry_set"
                },
                "in_ZR": {
                    "1": "is_zero_return",
                    "7": "is_zero_result",
                    "3": "zero_result",
                    "5": "is_zero",
                    "12": "zero_flag"
                },
                "__aeabi_cfcmpeq": {
                    "1": "compare_floats"
                },
                "FUN_08009204": {
                    "1": "compare_values"
                }
            }
        },
        "FUN_08009250": {
            "entrypoint": "0x08009250",
            "current_name": "check_conditions_08009250",
            "code": "\nbool check_conditions_08009250(void)\n\n{\n  undefined is_zero;\n  undefined carry_flag;\n  \n  __aeabi_cfrcmple();\n  return !(bool)carry_flag || (bool)is_zero;\n}\n\n",
            "renaming": {
                "FUN_08009250": "check_conditions_08009250",
                "in_ZR": "is_zero",
                "in_CY": "carry_flag"
            },
            "calling": [
                "FUN_08003004",
                "FUN_08001f00"
            ],
            "called": [
                "FUN_080091fc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08009250": {
                    "1": "check_cfr_and_return",
                    "2": "check_cfrcmple_result",
                    "4": "check_comparison_result",
                    "6": "check_conditions",
                    "5": "check_condition"
                },
                "in_ZR": {
                    "1": "condition2",
                    "2": "is_zero_return",
                    "6": "is_zero_result",
                    "3": "zero_flag",
                    "11": "is_zero"
                },
                "in_CY": {
                    "6": "is_carry",
                    "2": "is_carry_result",
                    "1": "carry_bit",
                    "7": "carry_flag",
                    "5": "is_carry_set"
                },
                "FUN_080091fc": {
                    "1": "print_values",
                    "4": "perform_operation"
                },
                "param_1": {
                    "1": "operand1"
                },
                "param_2": {
                    "1": "value2"
                }
            }
        },
        "FUN_08009264": {
            "entrypoint": "0x08009264",
            "current_name": "is_null_character_08009264",
            "code": "\nbool is_null_character_08009264(void)\n\n{\n  char input_character;\n  \n  compare_float();\n  return input_character == '\\0';\n}\n\n",
            "renaming": {
                "FUN_08009264": "is_null_character_08009264",
                "in_CY": "input_character",
                "__aeabi_cfrcmple": "compare_float"
            },
            "calling": [
                "FUN_08003004",
                "FUN_080029d8"
            ],
            "called": [
                "FUN_080091fc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08009264": {
                    "1": "check_if_empty",
                    "2": "is_char_null",
                    "3": "is_null_terminated",
                    "4": "is_null_character"
                },
                "in_CY": {
                    "2": "character",
                    "10": "input_char",
                    "1": "cy_value",
                    "15": "input_character"
                },
                "FUN_080091fc": {
                    "1": "perform_operation"
                },
                "__aeabi_cfrcmple": {
                    "1": "compare_float"
                },
                "param_1": {
                    "1": "parameter_1"
                },
                "param_2": {
                    "1": "parameter_2"
                }
            }
        },
        "FUN_08009278": {
            "entrypoint": "0x08009278",
            "current_name": "convert_to_signed_integer_08009278",
            "code": "\nuint convert_to_signed_integer_08009278(uint input_value)\n\n{\n  uint shifted_value;\n  uint difference;\n  \n  if (input_value << 1 < 0x7f000000) {\n    return 0;\n  }\n  shifted_value = (input_value << 1) >> 0x18;\n  difference = 0x9e - shifted_value;\n  if (shifted_value < 0x9f && difference != 0) {\n    shifted_value = (input_value << 8 | 0x80000000) >> (difference & 0xff);\n    if ((input_value & 0x80000000) != 0) {\n      shifted_value = -shifted_value;\n    }\n    return shifted_value;\n  }\n  if ((difference == 0xffffff9f) && ((input_value & 0x7fffff) != 0)) {\n    return 0;\n  }\n  input_value = input_value & 0x80000000;\n  if (input_value == 0) {\n    input_value = 0x7fffffff;\n  }\n  return input_value;\n}\n\n",
            "renaming": {
                "FUN_08009278": "convert_to_signed_integer_08009278",
                "param_1": "input_value",
                "uVar1": "shifted_value",
                "uVar2": "difference"
            },
            "calling": [
                "FUN_08003826",
                "FUN_08003b98"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08009278": {
                    "1": "reverse_conversion",
                    "3": "extract_integer",
                    "2": "convert_to_integer"
                },
                "param_1": {
                    "7": "input",
                    "13": "input_value",
                    "1": "unsigned_int",
                    "5": "input_number"
                },
                "uVar1": {
                    "1": "result_value",
                    "2": "converted_value",
                    "11": "shifted_value",
                    "6": "shifted_bits",
                    "4": "shifted_input"
                },
                "uVar2": {
                    "1": "compare_value",
                    "3": "offset",
                    "14": "difference"
                },
                "uVar3": {
                    "2": "shift_amount",
                    "3": "converted_value",
                    "1": "bitwise_shifted_input"
                },
                "uVar4": {
                    "1": "negated_number",
                    "3": "result"
                },
                "uVar5": {
                    "1": "is_negative"
                },
                "uVar6": {
                    "1": "result"
                },
                "uVar7": {
                    "1": "condition1"
                },
                "uVar8": {
                    "1": "condition2"
                },
                "uVar1_temp": {
                    "1": "temp_value"
                },
                "uVar1_shifted": {
                    "1": "shifted_temp_value"
                },
                "param_1_sign": {
                    "1": "input_value_sign"
                },
                "param_1_temp": {
                    "1": "output_value"
                },
                "a": {
                    "1": "temporary_value"
                },
                "b": {
                    "1": "sign_bit_shift"
                },
                "result": {
                    "1": "output_number"
                },
                "<original_function_name>": {
                    "1": "decode_signed_integer"
                }
            }
        },
        "FUN_080092c4": {
            "entrypoint": "0x080092c4",
            "current_name": "initialize_system_080092c4",
            "code": "\n/* WARNING: This function may have set the stack pointer */\n\nvoid initialize_system_080092c4(void)\n\n{\n  int index;\n  undefined4 *ptr;\n  code *jump_table;\n  \n  for (index = 0; (undefined4 *)(index + 0x20000000) < &DAT_2000044c; index = index + 4) {\n    *(undefined4 *)(index + 0x20000000) = *(undefined4 *)(index + 0x800c0c0);\n  }\n  for (ptr = &DAT_2000044c; ptr < &DAT_20000f20; ptr = ptr + 1) {\n    *ptr = 0;\n  }\n  initialize_system_080092c4_internals();\n  initialize_c_standard_library();\n  jump_table = (code *)0x80092fa;\n  execute_main_function();\n                    /* WARNING: Could not recover jumptable at 0x080092fa. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jump_table)();\n  return;\n}\n\n",
            "renaming": {
                "FUN_080092c4": "initialize_system_080092c4",
                "iVar1": "index",
                "puVar2": "ptr",
                "UNRECOVERED_JUMPTABLE": "jump_table",
                "SystemInit": "initialize_system_internals",
                "__libc_init_array": "initialize_c_standard_library",
                "main": "execute_main_function"
            },
            "calling": [],
            "called": [
                "FUN_0800b3e8",
                "FUN_08007540",
                "FUN_0800756c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080092c4": {
                    "1": "initialize_application",
                    "22": "initialize_system",
                    "6": "initialize_program"
                },
                "iVar1": {
                    "1": "counter",
                    "3": "offset",
                    "22": "index"
                },
                "puVar2": {
                    "5": "data_pointer",
                    "2": "pointer",
                    "1": "ptr_data",
                    "13": "ptr"
                },
                "UNRECOVERED_JUMPTABLE": {
                    "1": "jumptable",
                    "25": "jump_table"
                },
                "FUN_0800b3e8": {
                    "1": "copy_data_from_address",
                    "2": "copy_data_to_memory"
                },
                "FUN_08007540": {
                    "1": "get_system_init_status"
                },
                "FUN_0800756c": {
                    "1": "initialize_variable2"
                },
                "SystemInit": {
                    "1": "initialize_system_internals"
                },
                "__libc_init_array": {
                    "1": "initialize_c_standard_library"
                },
                "main": {
                    "1": "execute_main_function"
                },
                "*UNRECOVERED_JUMPTABLE": {
                    "1": "unrecovered_jump_table"
                },
                "*puVar2": {
                    "1": "ptr"
                },
                "&DAT_2000044c": {
                    "1": "dest_data1"
                },
                "&DAT_20000f20": {
                    "1": "dest_data2"
                }
            }
        },
        "FUN_08009318": {
            "entrypoint": "0x08009318",
            "current_name": "calculate_floating_point_08009318",
            "code": "\nlonglong calculate_floating_point_08009318(uint input1,uint input2,undefined4 param3,undefined4 param4)\n\n{\n  int comparison_result;\n  uint exponent_diff;\n  uint mask;\n  bool carry_flag;\n  undefined8 result;\n  longlong result;\n  \n  mask = (input2 << 1) >> 0x15;\n  exponent_diff = mask - 0x3ff;\n  if ((int)exponent_diff < 0x14) {\n    if ((int)exponent_diff < 0) {\n      result = __aeabi_dadd(input1,input2,0x8800759c,0x7e37e43c,param4);\n      comparison_result = __aeabi_dcmpgt((int)result,(int)((ulonglong)result >> 0x20),0,0);\n      result = CONCAT44(input2,input1);\n      if (comparison_result != 0) {\n        if ((int)input2 < 0) {\n          result = -0x8000000000000000;\n        }\n        else if ((input1 | input2) == 0) {\n          result = 0;\n        }\n        else {\n          result = 0x3ff0000000000000;\n        }\n      }\n    }\n    else {\n      mask = 0xfffff >> (exponent_diff & 0xff);\n      result = CONCAT44(input2,input1);\n      if ((input2 & mask | input1) != 0) {\n        result = __aeabi_dadd(input1,input2,0x8800759c,0x7e37e43c,param4);\n        comparison_result = __aeabi_dcmpgt((int)result,(int)((ulonglong)result >> 0x20),0,0);\n        result = CONCAT44(input2,input1);\n        if (comparison_result != 0) {\n          if (0 < (int)input2) {\n            input2 = input2 + (0x100000 >> (exponent_diff & 0xff));\n          }\n          result = (ulonglong)(input2 & ~mask) << 0x20;\n        }\n      }\n    }\n  }\n  else if ((int)exponent_diff < 0x34) {\n    mask = 0xffffffff >> (mask - 0x413 & 0xff);\n    result = CONCAT44(input2,input1);\n    if ((mask & input1) != 0) {\n      result = __aeabi_dadd(input1,input2,0x8800759c,0x7e37e43c,param4);\n      comparison_result = __aeabi_dcmpgt((int)result,(int)((ulonglong)result >> 0x20),0,0);\n      result = CONCAT44(input2,input1);\n      if (comparison_result != 0) {\n        if (0 < (int)input2) {\n          if (exponent_diff == 0x14) {\n            input2 = input2 + 1;\n          }\n          else {\n            exponent_diff = 1 << (0x34 - exponent_diff & 0xff);\n            carry_flag = CARRY4(exponent_diff,input1);\n            input1 = exponent_diff + input1;\n            if (carry_flag != false) {\n              input2 = input2 + 1;\n            }\n          }\n        }\n        result = CONCAT44(input2,input1 & ~mask);\n      }\n    }\n  }\n  else {\n    result = CONCAT44(input2,input1);\n    if (exponent_diff == 0x400) {\n      result = __aeabi_dadd();\n    }\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08009318": "calculate_floating_point_08009318",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "param3",
                "param_4": "param4",
                "iVar1": "comparison_result",
                "uVar2": "exponent_diff",
                "uVar3": "mask",
                "bVar4": "carry_flag",
                "uVar5": "result",
                "lVar6": "result"
            },
            "calling": [
                "FUN_08001994",
                "FUN_08002c18",
                "FUN_08003004"
            ],
            "called": [
                "FUN_08008b60",
                "FUN_080082d4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08009318": {
                    "3": "calculate_double",
                    "1": "calculate_double_value",
                    "4": "convert_to_double",
                    "6": "calculate_floating_point_value",
                    "11": "calculate_floating_point"
                },
                "param_1": {
                    "1": "input_a",
                    "5": "mantissa",
                    "15": "input1"
                },
                "param_2": {
                    "15": "input2",
                    "1": "fraction_part",
                    "6": "exponent"
                },
                "param_3": {
                    "1": "arg_3",
                    "12": "param3",
                    "4": "unused_param1",
                    "9": "param_3"
                },
                "param_4": {
                    "1": "unused2",
                    "12": "param4",
                    "9": "param_4",
                    "4": "unused_param2"
                },
                "iVar1": {
                    "3": "comparison",
                    "23": "comparison_result",
                    "1": "cmp_result"
                },
                "uVar2": {
                    "7": "exponent_diff",
                    "1": "shifted_input",
                    "5": "exponent_difference",
                    "4": "shift_amount",
                    "2": "exponent"
                },
                "uVar3": {
                    "17": "mask",
                    "1": "shift_bits",
                    "3": "bit_mask",
                    "2": "shift_amount"
                },
                "bVar4": {
                    "5": "carry",
                    "1": "carry_bit",
                    "25": "carry_flag"
                },
                "uVar5": {
                    "4": "sum_result",
                    "1": "floating_point_sum",
                    "8": "sum",
                    "2": "added_value",
                    "11": "result"
                },
                "lVar6": {
                    "1": "final_result",
                    "5": "final_value",
                    "7": "output",
                    "14": "result"
                },
                "uint param_1": {
                    "1": "input_value1"
                },
                "uint param_2": {
                    "1": "input_value2"
                },
                "undefined4 param_3": {
                    "1": "unused_parameter1"
                },
                "undefined4 param_4": {
                    "1": "unused_parameter2"
                }
            }
        },
        "FUN_08009410": {
            "entrypoint": "0x08009410",
            "current_name": "calculate_trigonometric_value_08009410",
            "code": "\nundefined4 calculate_trigonometric_value_08009410(undefined4 input_angle,uint flags)\n\n{\n  undefined4 result;\n  uint remainder;\n  undefined4 remainder;\n  undefined4 temp_var1;\n  undefined4 temp_var2;\n  undefined4 temp_var3;\n  \n  if (0x3fe921fb < (flags & 0x7fffffff)) {\n    if ((flags & 0x7fffffff) < 0x7ff00000) {\n      remainder = calculate_remainder(input_angle,flags,&remainder);\n      remainder = remainder & 3;\n      if (remainder == 1) {\n        result = calculate_sin(remainder,temp_var1,temp_var2,temp_var3,1);\n      }\n      else if (remainder == 2) {\n        result = calculate_cos(remainder,temp_var1,temp_var2,temp_var3);\n      }\n      else if (remainder == 0) {\n        result = calculate_cos(remainder,temp_var1,temp_var2,temp_var3);\n      }\n      else {\n        result = calculate_sin(remainder,temp_var1,temp_var2,temp_var3,1);\n      }\n    }\n    else {\n      result = subtract_double(input_angle,flags,input_angle,flags);\n    }\n    return result;\n  }\n  result = calculate_cos(input_angle,flags,0,0);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08009410": "calculate_trigonometric_value_08009410",
                "param_1": "input_angle",
                "param_2": "flags",
                "uVar1": "result",
                "uVar2": "remainder",
                "local_28": "remainder",
                "uStack_24": "temp_var1",
                "local_20": "temp_var2",
                "uStack_1c": "temp_var3",
                "__ieee754_rem_pio2": "calculate_remainder",
                "__kernel_sin": "calculate_sin",
                "__kernel_cos": "calculate_cos",
                "__subdf3": "subtract_double"
            },
            "calling": [
                "FUN_08001f00"
            ],
            "called": [
                "FUN_080082d0",
                "FUN_0800a348",
                "FUN_08009d78",
                "FUN_0800adf0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08009410": {
                    "2": "calculate_trigonometric_function",
                    "1": "calculate_trig_function",
                    "23": "calculate_trigonometric_value"
                },
                "param_1": {
                    "1": "input_param",
                    "7": "input_angle",
                    "6": "angle",
                    "4": "value"
                },
                "param_2": {
                    "1": "arg2",
                    "3": "input_flag",
                    "4": "input_flags",
                    "10": "flags"
                },
                "uVar1": {
                    "1": "output_val",
                    "30": "result"
                },
                "uVar2": {
                    "1": "temp_val",
                    "2": "angle_quadrant",
                    "4": "temp",
                    "12": "remainder",
                    "3": "rem_pio2_result"
                },
                "local_28": {
                    "1": "integer_part",
                    "4": "remainder",
                    "3": "angle",
                    "2": "trig_value"
                },
                "uStack_24": {
                    "1": "sqrt_val",
                    "3": "temp_var1",
                    "2": "temp1"
                },
                "local_20": {
                    "1": "stack_var_2",
                    "3": "temp_var2",
                    "2": "temp_2"
                },
                "uStack_1c": {
                    "3": "temp_var3",
                    "1": "local_variable_4"
                },
                "__ieee754_rem_pio2": {
                    "1": "get_remainder_with_pio2",
                    "2": "calculate_remainder"
                },
                "__kernel_sin": {
                    "3": "calculate_sin",
                    "1": "calculate_sine"
                },
                "__kernel_cos": {
                    "1": "calculate_cos_remainder",
                    "2": "calculate_cos"
                },
                "__subdf3": {
                    "1": "subtract_decimal",
                    "3": "subtract_double"
                },
                "FUN_080082d0": {
                    "1": "calculate_multiple"
                },
                "FUN_0800a348": {
                    "1": "calculate_inverse"
                },
                "FUN_08009d78": {
                    "1": "store_value"
                },
                "FUN_0800adf0": {
                    "1": "perform_operation"
                },
                "param_3": {
                    "1": "second_input"
                },
                "param_4": {
                    "1": "third_input"
                },
                "param_5": {
                    "1": "fourth_input"
                },
                "uVar2 & 3": {
                    "1": "remainder_modulo_3"
                },
                "uVar2 == 1": {
                    "1": "remainder_modulo_3_equals_1"
                },
                "uVar2 == 2": {
                    "1": "remainder_modulo_3_equals_2"
                },
                "uVar2 == 0": {
                    "1": "remainder_modulo_3_equals_0"
                }
            }
        },
        "FUN_080094c0": {
            "entrypoint": "0x080094c0",
            "current_name": "calculate_floating_point_080094c0",
            "code": "\nlonglong calculate_floating_point_080094c0(uint input1,uint exponent,undefined4 param_3,undefined4 param_4)\n\n{\n  int comparison_result;\n  uint exponent_difference;\n  uint mask;\n  bool carry_flag;\n  undefined8 result;\n  longlong result;\n  \n  mask = (exponent << 1) >> 0x15;\n  exponent_difference = mask - 0x3ff;\n  if ((int)exponent_difference < 0x14) {\n    if ((int)exponent_difference < 0) {\n      result = __aeabi_dadd(input1,exponent,0x8800759c,0x7e37e43c,param_4);\n      comparison_result = __aeabi_dcmpgt((int)result,(int)((ulonglong)result >> 0x20),0,0);\n      result = CONCAT44(exponent,input1);\n      if (comparison_result != 0) {\n        if ((int)exponent < 0) {\n          if ((input1 | exponent & 0x7fffffff) != 0) {\n            exponent = 0xbff00000;\n          }\n          result = (ulonglong)exponent << 0x20;\n        }\n        else {\n          result = 0;\n        }\n      }\n    }\n    else {\n      mask = 0xfffff >> (exponent_difference & 0xff);\n      result = CONCAT44(exponent,input1);\n      if ((exponent & mask | input1) != 0) {\n        result = __aeabi_dadd(input1,exponent,0x8800759c,0x7e37e43c,param_4);\n        comparison_result = __aeabi_dcmpgt((int)result,(int)((ulonglong)result >> 0x20),0,0);\n        result = CONCAT44(exponent,input1);\n        if (comparison_result != 0) {\n          if ((int)exponent < 0) {\n            exponent = exponent + (0x100000 >> (exponent_difference & 0xff));\n          }\n          result = (ulonglong)(exponent & ~mask) << 0x20;\n        }\n      }\n    }\n  }\n  else if ((int)exponent_difference < 0x34) {\n    mask = 0xffffffff >> (mask - 0x413 & 0xff);\n    result = CONCAT44(exponent,input1);\n    if ((mask & input1) != 0) {\n      result = __aeabi_dadd(input1,exponent,0x8800759c,0x7e37e43c,param_4);\n      comparison_result = __aeabi_dcmpgt((int)result,(int)((ulonglong)result >> 0x20),0,0);\n      result = CONCAT44(exponent,input1);\n      if (comparison_result != 0) {\n        if ((int)exponent < 0) {\n          if (exponent_difference == 0x14) {\n            exponent = exponent + 1;\n          }\n          else {\n            exponent_difference = 1 << (0x34 - exponent_difference & 0xff);\n            carry_flag = CARRY4(exponent_difference,input1);\n            input1 = exponent_difference + input1;\n            if (carry_flag != false) {\n              exponent = exponent + 1;\n            }\n          }\n        }\n        result = CONCAT44(exponent,input1 & ~mask);\n      }\n    }\n  }\n  else {\n    result = CONCAT44(exponent,input1);\n    if (exponent_difference == 0x400) {\n      result = __aeabi_dadd();\n    }\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080094c0": "calculate_floating_point_080094c0",
                "param_1": "input1",
                "param_2": "exponent",
                "iVar1": "comparison_result",
                "uVar2": "exponent_difference",
                "uVar3": "mask",
                "bVar4": "carry_flag",
                "uVar5": "result",
                "lVar6": "result",
                "iVar": "comparison_result"
            },
            "calling": [
                "FUN_0800a5a0",
                "FUN_08002c18",
                "FUN_08002408",
                "FUN_08001f00"
            ],
            "called": [
                "FUN_08008b60",
                "FUN_080082d4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080094c0": {
                    "3": "calculate_result",
                    "1": "calculate_floating_point_product",
                    "4": "calculate_floating_point"
                },
                "param_1": {
                    "1": "integer_part",
                    "3": "input_1",
                    "6": "mantissa",
                    "10": "input1",
                    "4": "base"
                },
                "param_2": {
                    "1": "second_operand",
                    "10": "exponent",
                    "3": "input_2"
                },
                "param_3": {
                    "1": "temp_var1",
                    "6": "param3",
                    "2": "input3",
                    "11": "param_3"
                },
                "param_4": {
                    "1": "ignored_param2",
                    "6": "param4",
                    "11": "param_4",
                    "2": "input4"
                },
                "iVar1": {
                    "2": "comparison",
                    "24": "comparison_result"
                },
                "uVar2": {
                    "4": "exponent_diff",
                    "1": "normalized_exponent",
                    "3": "shifted_value",
                    "8": "exponent_difference",
                    "2": "shift_count"
                },
                "uVar3": {
                    "13": "mask",
                    "1": "shift_count",
                    "2": "shifted_value",
                    "3": "shifted_exponent",
                    "4": "bit_mask"
                },
                "bVar4": {
                    "8": "carry",
                    "23": "carry_flag"
                },
                "uVar5": {
                    "5": "sum",
                    "1": "addition_result",
                    "2": "add_result",
                    "14": "result"
                },
                "lVar6": {
                    "1": "product",
                    "2": "final_value",
                    "4": "final_result",
                    "8": "output",
                    "10": "result"
                },
                "<original_function_name>": {
                    "1": "calculate_floating_point_value"
                },
                "iVar": {
                    "1": "comparison_result"
                }
            }
        },
        "FUN_080095b8": {
            "entrypoint": "0x080095b8",
            "current_name": "calculate_product_080095b8",
            "code": "\nint calculate_product_080095b8(uint input1,uint input2)\n\n{\n  uint carry;\n  uint shift_amount;\n  uint result;\n  int sign;\n  uint difference;\n  \n  shift_amount = (input2 << 1) >> 0x15;\n  difference = shift_amount - 0x3ff;\n  if ((int)input2 < 0) {\n    sign = -1;\n  }\n  else {\n    sign = 1;\n  }\n  result = input2 & 0xfffff | 0x100000;\n  if ((int)difference < 0x14) {\n    if ((int)difference < 0) {\n      if (difference != 0xffffffff) {\n        sign = 0;\n      }\n      return sign;\n    }\n    result = result + (0x80000 >> (difference & 0xff)) >> (0x14 - difference & 0xff);\n  }\n  else {\n    if (0x1e < difference) {\n      sign = convert_to_integer();\n      return sign;\n    }\n    if ((int)difference < 0x34) {\n      carry = 0x80000000 >> (shift_amount - 0x413 & 0xff);\n      if (check_carry(carry,input1) != false) {\n        result = result + 1;\n      }\n      result = result << (shift_amount - 0x413 & 0xff);\n      if (difference != 0x14) {\n        result = result | carry + input1 >> (0x34 - difference & 0xff);\n      }\n    }\n    else {\n      result = result << (shift_amount - 0x413 & 0xff) | input1 << (shift_amount - 0x433 & 0xff);\n    }\n  }\n  return result * sign;\n}\n\n",
            "renaming": {
                "FUN_080095b8": "calculate_product_080095b8",
                "param_1": "input1",
                "param_2": "input2",
                "uVar1": "carry",
                "uVar2": "shift_amount",
                "uVar3": "result",
                "iVar4": "sign",
                "uVar5": "difference",
                "CARRY4": "check_carry",
                "__aeabi_d2iz": "convert_to_integer"
            },
            "calling": [
                "FUN_08001994",
                "FUN_08003004"
            ],
            "called": [
                "FUN_08008ba0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080095b8": {
                    "24": "calculate_product",
                    "1": "perform_arithmetic_operation",
                    "2": "calculate_result"
                },
                "param_1": {
                    "1": "input_a",
                    "3": "num1",
                    "4": "dividend",
                    "2": "operand1",
                    "12": "input1"
                },
                "param_2": {
                    "12": "input2",
                    "1": "second_operand",
                    "2": "operand2",
                    "4": "divisor",
                    "3": "value2"
                },
                "uVar1": {
                    "1": "bitmask1",
                    "3": "shifted_bit",
                    "2": "temp1",
                    "7": "carry"
                },
                "uVar2": {
                    "1": "shifted_param_2",
                    "2": "shift",
                    "3": "shift_count",
                    "6": "shift_amount"
                },
                "uVar3": {
                    "1": "shifted_input",
                    "25": "result"
                },
                "iVar4": {
                    "2": "result_sign",
                    "27": "sign",
                    "1": "sign_multiplier"
                },
                "uVar5": {
                    "1": "bit_diff",
                    "2": "shift_amount",
                    "5": "diff",
                    "8": "exponent",
                    "10": "difference"
                },
                "FMI_08008ba0": {
                    "1": "calculate_value"
                },
                "CARRY4": {
                    "1": "check_carry"
                },
                "__aeabi_d2iz": {
                    "1": "convert_to_integer"
                },
                "uVar6": {
                    "1": "temp_2"
                },
                "FUNC_08008ba0": {
                    "1": "process_bitwise_operations"
                }
            }
        },
        "FUN_08009654": {
            "entrypoint": "0x08009654",
            "current_name": "convert_to_double_08009654",
            "code": "\nlonglong convert_to_double_08009654(uint integer_part,uint fractional_part)\n\n{\n  uint exponent;\n  uint shifted_exponent;\n  longlong result;\n  \n  result = CONCAT44(fractional_part,integer_part);\n  shifted_exponent = (fractional_part << 1) >> 0x15;\n  exponent = shifted_exponent - 0x3ff;\n  if ((int)exponent < 0x14) {\n    if ((int)exponent < 0) {\n      fractional_part = fractional_part & 0x80000000;\n      if (exponent == 0xffffffff) {\n        fractional_part = fractional_part | 0x3ff00000;\n      }\n      result = (ulonglong)fractional_part << 0x20;\n    }\n    else {\n      shifted_exponent = 0xfffff >> (exponent & 0xff);\n      result = CONCAT44(fractional_part,integer_part);\n      if ((fractional_part & shifted_exponent | integer_part) != 0) {\n        result = (ulonglong)(fractional_part + (0x80000 >> (exponent & 0xff)) & ~shifted_exponent) << 0x20;\n      }\n    }\n  }\n  else if ((int)exponent < 0x34) {\n    shifted_exponent = 0xffffffff >> (shifted_exponent - 0x413 & 0xff);\n    if ((integer_part & shifted_exponent) != 0) {\n      exponent = 1 << (0x33 - exponent & 0xff);\n      if (CARRY4(integer_part,exponent) != false) {\n        fractional_part = fractional_part + 1;\n      }\n      result = CONCAT44(fractional_part,integer_part + exponent & ~shifted_exponent);\n    }\n  }\n  else {\n    result = CONCAT44(fractional_part,integer_part);\n    if (exponent == 0x400) {\n      result = __aeabi_dadd();\n    }\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08009654": "convert_to_double_08009654",
                "param_1": "integer_part",
                "param_2": "fractional_part",
                "uVar1": "exponent",
                "uVar2": "shifted_exponent",
                "lVar3": "result"
            },
            "calling": [
                "FUN_08004e30"
            ],
            "called": [
                "FUN_080082d4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08009654": {
                    "1": "decode_float",
                    "2": "calculate_double_precision",
                    "9": "convert_to_double",
                    "4": "convert_float_to_double",
                    "5": "calculate_floating_point"
                },
                "param_1": {
                    "1": "num1",
                    "4": "mantissa",
                    "5": "input1",
                    "2": "value1",
                    "8": "integer_part"
                },
                "param_2": {
                    "5": "int_part",
                    "1": "fraction_part",
                    "7": "fractional_part",
                    "4": "exponent",
                    "2": "value2"
                },
                "uVar1": {
                    "3": "shift_amount",
                    "1": "shifted_input2",
                    "4": "exponent_difference",
                    "11": "exponent",
                    "2": "difference"
                },
                "uVar2": {
                    "3": "shifted",
                    "1": "shifted_val",
                    "15": "shifted_exponent",
                    "4": "shift_amount"
                },
                "lVar3": {
                    "1": "combined_float",
                    "21": "result"
                },
                "uVar3": {
                    "2": "mask",
                    "1": "shifted_mask"
                },
                "uVar4": {
                    "1": "u_var4"
                },
                "uVar5": {
                    "1": "exponent_shift"
                },
                "uVar6": {
                    "1": "add_result"
                },
                "uVar7": {
                    "1": "bit_to_shift"
                },
                "uVar8": {
                    "1": "u_var8"
                },
                "FUN_080082d4": {
                    "1": "combine_floats"
                },
                "param_3": {
                    "1": "float_part2"
                },
                "param_4": {
                    "1": "temp2"
                }
            }
        },
        "FUN_080096e8": {
            "entrypoint": "0x080096e8",
            "current_name": "calculate_trigonometric_value_080096e8",
            "code": "\nundefined4 calculate_trigonometric_value_080096e8(undefined4 input_value,uint flags)\n\n{\n  undefined4 result;\n  uint remainder;\n  undefined4 quotient;\n  undefined4 local_variable2;\n  undefined4 local_variable3;\n  undefined4 local_variable4;\n  \n  if (0x3fe921fb < (flags & 0x7fffffff)) {\n    if ((flags & 0x7fffffff) < 0x7ff00000) {\n      remainder = calculate_remainder(input_value,flags,&quotient);\n      remainder = remainder & 3;\n      if (remainder == 1) {\n        result = calculate_cosine(quotient,local_variable2,local_variable3,local_variable4);\n      }\n      else if (remainder == 2) {\n        result = calculate_sine(quotient,local_variable2,local_variable3,local_variable4,1);\n      }\n      else if (remainder == 0) {\n        result = calculate_sine(quotient,local_variable2,local_variable3,local_variable4,1);\n      }\n      else {\n        result = calculate_cosine(quotient,local_variable2,local_variable3,local_variable4);\n      }\n    }\n    else {\n      result = subtract_double(input_value,flags,input_value,flags);\n    }\n    return result;\n  }\n  result = calculate_sine(input_value,flags,0,0,0);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080096e8": "calculate_trigonometric_value_080096e8",
                "param_1": "input_value",
                "param_2": "flags",
                "uVar1": "result",
                "uVar2": "remainder",
                "local_28": "quotient",
                "uStack_24": "local_variable2",
                "local_20": "local_variable3",
                "uStack_1c": "local_variable4",
                "__ieee754_rem_pio2": "calculate_remainder",
                "__kernel_cos": "calculate_cosine",
                "__kernel_sin": "calculate_sine",
                "__subdf3": "subtract_double"
            },
            "calling": [
                "FUN_08001f00"
            ],
            "called": [
                "FUN_080082d0",
                "FUN_0800a348",
                "FUN_08009d78",
                "FUN_0800adf0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080096e8": {
                    "1": "calculate_trig_func",
                    "2": "calculate_trig_function",
                    "20": "calculate_trigonometric_value",
                    "3": "calculate_trigonometric_function"
                },
                "param_1": {
                    "1": "value_type",
                    "13": "input_value",
                    "5": "input_angle",
                    "9": "angle"
                },
                "param_2": {
                    "2": "input_bits",
                    "1": "flag_value",
                    "4": "input_flags",
                    "12": "flags"
                },
                "uVar1": {
                    "30": "result",
                    "1": "return_value"
                },
                "uVar2": {
                    "1": "mod_result",
                    "3": "temp",
                    "15": "remainder",
                    "4": "rem_pio2_result"
                },
                "local_28": {
                    "1": "part_1",
                    "2": "integer_part",
                    "3": "local_variable1",
                    "5": "quotient"
                },
                "uStack_24": {
                    "1": "part_2",
                    "2": "stack_variable",
                    "3": "temp1"
                },
                "local_20": {
                    "1": "sin_input",
                    "2": "temp_variable",
                    "3": "local_variable3"
                },
                "uStack_1c": {
                    "1": "local_var_3",
                    "3": "temp3",
                    "2": "temp_var_3"
                },
                "__ieee754_rem_pio2": {
                    "3": "calculate_remainder",
                    "1": "calculate_remainder_pio2"
                },
                "__kernel_cos": {
                    "4": "calculate_cosine"
                },
                "__kernel_sin": {
                    "1": "calculate_sine2",
                    "2": "calculate_sine"
                },
                "__subdf3": {
                    "1": "subtract_double_precision",
                    "3": "subtract_double"
                },
                "FUN_080082d0": {
                    "1": "calculate_trigonometric_formula"
                },
                "FUN_0800a348": {
                    "1": "calculate_division"
                },
                "FUN_08009d78": {
                    "1": "perform_operation"
                },
                "FUN_0800adf0": {
                    "1": "calculate_trigonometric"
                },
                "param_3": {
                    "1": "operand_1"
                },
                "param_4": {
                    "1": "operand_2"
                },
                "param_5": {
                    "1": "operation_type"
                },
                "uVar2 == 1": {
                    "1": "is_remainder_one"
                },
                "uVar2 == 2": {
                    "1": "is_remainder_two"
                },
                "uVar2 == 0": {
                    "1": "is_remainder_zero"
                }
            }
        },
        "FUN_08009798": {
            "entrypoint": "0x08009798",
            "current_name": "extract_bits_08009798",
            "code": "\nlonglong extract_bits_08009798(uint input1,uint input2,undefined4 param3,undefined4 unused_param2)\n\n{\n  uint shifted_bits;\n  uint shifted_bits;\n  longlong result;\n  \n  shifted_bits = (input2 << 1) >> 0x15;\n  shifted_bits = shifted_bits - 0x3ff;\n  if ((int)shifted_bits < 0x14) {\n    if ((int)shifted_bits < 0) {\n      return ((ulonglong)input2 & 0x80000000) << 0x20;\n    }\n    result = (ulonglong)(input2 & ~(0xfffff >> (shifted_bits & 0xff))) << 0x20;\n  }\n  else {\n    if ((int)shifted_bits < 0x34) {\n      return concat_values(input2,input1 & ~(0xffffffffU >> (shifted_bits - 0x413 & 0xff)));\n    }\n    if (shifted_bits != 0x400) {\n      return concat_values(input2,input1);\n    }\n    result = add_double(input1,input2,input1,input2,unused_param2);\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08009798": "extract_bits_08009798",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "param3",
                "param_4": "unused_param2",
                "uVar1": "shifted_bits",
                "uVar2": "shifted_bits",
                "lVar3": "result",
                "__aeabi_dadd": "add_double",
                "CONCAT44": "concat_values"
            },
            "calling": [
                "FUN_080005b4",
                "FUN_08003b98",
                "FUN_08004e30"
            ],
            "called": [
                "FUN_080082d4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08009798": {
                    "1": "calculate_shifted_and_masked_value",
                    "3": "calculate_shifted_value",
                    "11": "extract_bits"
                },
                "param_1": {
                    "1": "input_value1",
                    "7": "input_1",
                    "2": "value",
                    "13": "input1"
                },
                "param_2": {
                    "1": "shift",
                    "13": "input2",
                    "2": "input_value_2",
                    "7": "input_2"
                },
                "param_3": {
                    "3": "unused_param",
                    "2": "unused_parameter_1",
                    "6": "unused_param1",
                    "1": "unknown_param",
                    "5": "unused_param_1"
                },
                "param_4": {
                    "5": "param4",
                    "1": "unused_param",
                    "2": "unused_parameter_2",
                    "8": "unused_param2",
                    "3": "unused2"
                },
                "uVar1": {
                    "1": "shifted_bits_minus1023",
                    "4": "bit_difference",
                    "2": "shift_amount",
                    "7": "shifted_bits",
                    "3": "difference"
                },
                "uVar2": {
                    "1": "shifted_twice_bits",
                    "2": "shifted_param2",
                    "5": "shifted_value",
                    "7": "shifted_bits",
                    "3": "shift_amount"
                },
                "lVar3": {
                    "28": "result",
                    "1": "return_value"
                },
                "__aeabi_dadd": {
                    "1": "add_double_numbers"
                },
                "CONCAT44": {
                    "1": "concat_values"
                }
            }
        },
        "FUN_08009818": {
            "entrypoint": "0x08009818",
            "current_name": "FUN_08009818",
            "code": "\nuint __ieee754_atan2(uint param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  int iVar1;\n  undefined4 uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  undefined8 uVar6;\n  \n  uVar4 = param_4 & 0x7fffffff;\n  if (((uVar4 | (-param_3 | param_3) >> 0x1f) < 0x7ff00001) &&\n     (uVar5 = param_2 & 0x7fffffff, (uVar5 | (-param_1 | param_1) >> 0x1f) < 0x7ff00001)) {\n    if ((param_4 + 0xc0100000 | param_3) == 0) {\n      uVar4 = atan();\n      return uVar4;\n    }\n    uVar3 = (int)param_4 >> 0x1e & 2U | param_2 >> 0x1f;\n    if ((uVar5 | param_1) == 0) {\n      if (uVar3 == 2) {\n        param_1 = 0x54442d18;\n      }\n      else if (uVar3 == 3) {\n        param_1 = 0x54442d18;\n      }\n    }\n    else {\n      if ((uVar4 | param_3) != 0) {\n        if (uVar4 == 0x7ff00000) {\n          uVar3 = uVar3 - 1;\n          if (uVar5 == 0x7ff00000) {\n            if (uVar3 < 3) {\n              return *(uint *)(&DAT_0800be68 + uVar3 * 8);\n            }\n            return 0x54442d18;\n          }\n          if (uVar3 < 3) {\n            return *(uint *)(&DAT_0800be80 + uVar3 * 8);\n          }\n          return 0;\n        }\n        if (uVar5 != 0x7ff00000) {\n          iVar1 = (int)(uVar5 - uVar4) >> 0x14;\n          if ((int)(uVar5 - uVar4) < 0x3d00000) {\n            if (((int)param_4 < 0) && (iVar1 + 0x3c < 0 != SCARRY4(iVar1,0x3c))) {\n              uVar6 = 0;\n            }\n            else {\n              __divdf3(param_1,param_2,param_3,param_4,param_4);\n              fabs();\n              uVar6 = atan();\n            }\n          }\n          else {\n            uVar6 = 0x3ff921fb54442d18;\n          }\n          uVar2 = (undefined4)((ulonglong)uVar6 >> 0x20);\n          uVar4 = (uint)uVar6;\n          if (uVar3 == 1) {\n            return uVar4;\n          }\n          if (uVar3 == 2) {\n            uVar6 = __subdf3(uVar4,uVar2,0x33145c07,0x3ca1a626);\n            uVar4 = __subdf3(0x54442d18,0x400921fb,(int)uVar6,(int)((ulonglong)uVar6 >> 0x20));\n            return uVar4;\n          }\n          if (uVar3 == 0) {\n            return uVar4;\n          }\n          uVar6 = __subdf3(uVar4,uVar2,0x33145c07,0x3ca1a626);\n          uVar4 = __subdf3((int)uVar6,(int)((ulonglong)uVar6 >> 0x20),0x54442d18,0x400921fb);\n          return uVar4;\n        }\n      }\n      if ((int)param_2 < 0) {\n        param_1 = 0x54442d18;\n      }\n      else {\n        param_1 = 0x54442d18;\n      }\n    }\n  }\n  else {\n    param_1 = __aeabi_dadd(param_3,param_4,param_1,param_2);\n  }\n  return param_1;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_08001f00"
            ],
            "called": [
                "FUN_08009990"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800981c": {
            "entrypoint": "0x0800981c",
            "current_name": "calculate_hypotenuse_0800981c",
            "code": "\nundefined8 calculate_hypotenuse_0800981c(undefined4 side_a,undefined4 side_b,undefined4 side_c,undefined4 side_d)\n\n{\n  int is_finite;\n  undefined4 *errno_ptr;\n  int *errno_ptr2;\n  undefined8 result;\n  undefined4 error_code;\n  char *function_name;\n  undefined4 side_a_copy;\n  undefined4 side_b_copy;\n  undefined4 param_3_copy;\n  undefined4 param_4_copy;\n  undefined4 lower_bound;\n  undefined4 upper_bound;\n  int is_finite;\n  \n  result = calculate_hypot;\n  if (DAT_20000014 == -1) {\n    return result;\n  }\n  is_finite = check_finite;\n  if (is_finite != 0) {\n    return result;\n  }\n  is_finite = finite(side_a,side_b);\n  if (is_finite == 0) {\n    return result;\n  }\n  is_finite = finite(side_c,side_d);\n  if (is_finite == 0) {\n    return result;\n  }\n  error_code = 3;\n  function_name = \"hypot\";\n  side_a_copy = side_a;\n  side_b_copy = side_b;\n  param_3_copy = side_c;\n  param_4_copy = side_d;\n  if (DAT_20000014 == '\\0') {\n    lower_bound = 0xe0000000;\n    upper_bound = 0x47efffff;\nLAB_080098aa:\n    is_finite = matherr(&error_code);\n    if (is_finite != 0) goto LAB_08009896;\n  }\n  else {\n    lower_bound = 0;\n    upper_bound = 0x7ff00000;\n    if (DAT_20000014 != '\\x02') goto LAB_080098aa;\n  }\n  errno_ptr = (undefined4 *)get_errno;\n  *errno_ptr = 0x22;\nLAB_08009896:\n  result = CONCAT44(upper_bound,lower_bound);\n  if (is_finite != 0) {\n    errno_ptr2 = (int *)get_errno;\n    result = CONCAT44(upper_bound,lower_bound);\n    *errno_ptr2 = is_finite;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_0800981c": "calculate_hypotenuse_0800981c",
                "param_1": "side_a",
                "param_2": "side_b",
                "param_3": "side_c",
                "param_4": "side_d",
                "local_30": "is_finite",
                "uVar4": "result",
                "local_50": "error_code",
                "pcStack_4c": "function_name",
                "local_48": "side_a_copy",
                "uStack_44": "side_b_copy",
                "local_40": "param_3_copy",
                "uStack_3c": "param_4_copy",
                "local_38": "lower_bound",
                "uStack_34": "upper_bound",
                "iVar1": "is_finite",
                "puVar2": "errno_ptr",
                "piVar3": "errno_ptr2",
                "__ieee754_hypot()": "calculate_hypot",
                "finite()": "check_finite",
                "__errno()": "get_errno"
            },
            "calling": [
                "FUN_080005b4",
                "FUN_08001f00"
            ],
            "called": [
                "FUN_0800b2d4",
                "FUN_08009b24",
                "FUN_0800b2e0",
                "FUN_0800b3dc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800981c": {
                    "31": "calculate_hypotenuse"
                },
                "param_1": {
                    "1": "side_1_x",
                    "8": "side1",
                    "11": "side_a",
                    "5": "side1_length"
                },
                "param_2": {
                    "1": "side_2_length",
                    "5": "side2_length",
                    "8": "side2",
                    "11": "side_b"
                },
                "param_3": {
                    "1": "side_2_x",
                    "11": "side_c",
                    "8": "side3",
                    "4": "side3_length"
                },
                "param_4": {
                    "1": "side_length_4",
                    "11": "side_d",
                    "8": "side4",
                    "4": "side4_length"
                },
                "local_30": {
                    "1": "is_finite_result",
                    "6": "is_finite",
                    "3": "error_code",
                    "2": "finite_value"
                },
                "uVar4": {
                    "15": "result",
                    "13": "hypotenuse"
                },
                "local_50": {
                    "1": "math_err_arg1",
                    "3": "math_error",
                    "4": "matherr_type",
                    "7": "error_code",
                    "2": "matherr_arg1"
                },
                "pcStack_4c": {
                    "1": "math_err_info_name",
                    "2": "matherr_arg2",
                    "7": "function_name",
                    "5": "error_message"
                },
                "local_48": {
                    "1": "arg_side_a",
                    "2": "side_1",
                    "4": "side_a_copy",
                    "3": "side1_copy"
                },
                "uStack_44": {
                    "4": "side_b_copy",
                    "1": "side_b",
                    "2": "side_2",
                    "3": "side2_copy"
                },
                "local_40": {
                    "4": "side_c_copy",
                    "1": "param_c",
                    "3": "side3_copy",
                    "2": "param3_copy",
                    "5": "param_3_copy"
                },
                "uStack_3c": {
                    "2": "param4_copy",
                    "1": "side2_y_value",
                    "5": "param_4_copy",
                    "4": "side_d_copy",
                    "3": "side4_copy"
                },
                "local_38": {
                    "1": "lower_limit",
                    "2": "lower_bound"
                },
                "uStack_34": {
                    "1": "range_max",
                    "2": "upper_bound"
                },
                "iVar1": {
                    "1": "check",
                    "2": "result",
                    "12": "is_finite"
                },
                "puVar2": {
                    "1": "error_pointer",
                    "21": "errno_ptr"
                },
                "piVar3": {
                    "5": "errno_val",
                    "1": "local_err_ptr",
                    "3": "errno_ptr",
                    "2": "errno_int_ptr",
                    "6": "errno_ptr2"
                },
                "DAT_20000014": {
                    "2": "math_mode",
                    "1": "condition"
                },
                "__ieee754_hypot()": {
                    "1": "calculate_hypot"
                },
                "finite()": {
                    "1": "check_finite"
                },
                "matherr()": {
                    "1": "handle_math_error"
                },
                "__errno()": {
                    "1": "get_errno"
                }
            }
        },
        "FUN_080098d0": {
            "entrypoint": "0x080098d0",
            "current_name": "calculate_square_root_080098d0",
            "code": "\nundefined4 calculate_square_root_080098d0(undefined4 input_1,undefined4 input_2)\n\n{\n  char flag;\n  undefined4 result;\n  int comparison_result;\n  undefined4 *errno_ptr;\n  int *errno_ptr_int;\n  undefined4 flag;\n  undefined *pointer;\n  undefined4 input_1_copy;\n  undefined4 input_2_copy;\n  undefined4 number1_copy2;\n  undefined4 number2_copy2;\n  undefined8 result;\n  int error;\n  \n  result = compute_square_root();\n  flag = DAT_20000014;\n  if (((DAT_20000014 == -1) ||\n      (error = compare_inputs(input_1,input_2,input_1,input_2), error != 0)) ||\n     (comparison_result = compare_var1_var2(input_1,input_2,0,0), comparison_result == 0)) {\n    return result;\n  }\n  flag = 1;\n  pointer = &DAT_0800be5c;\n  input_1_copy = input_1;\n  input_2_copy = input_2;\n  number1_copy2 = input_1;\n  number2_copy2 = input_2;\n  if (flag == '\\0') {\n    result = 0;\nLAB_0800996c:\n    comparison_result = handle_error(&flag);\n    if (comparison_result != 0) goto perform_additional_operations;\n  }\n  else {\n    result = perform_division(0,0,0,0);\n    if (flag != '\\x02') goto LAB_0800996c;\n  }\n  errno_ptr = (undefined4 *)get_errno();\n  *errno_ptr = 0x21;\nperform_additional_operations:\n  if (error != 0) {\n    errno_ptr_int = (int *)get_errno();\n    *errno_ptr_int = error;\n  }\n  return (undefined4)result;\n}\n\n",
            "renaming": {
                "FUN_080098d0": "calculate_square_root_080098d0",
                "param_1": "input_1",
                "param_2": "input_2",
                "local_50": "flag",
                "local_4c": "pointer",
                "local_48": "input_1_copy",
                "uStack_44": "input_2_copy",
                "local_40": "number1_copy2",
                "uStack_3c": "number2_copy2",
                "local_38": "result",
                "local_30": "error",
                "__ieee754_sqrt": "compute_square_root",
                "__unorddf2": "compare_inputs",
                "__aeabi_dcmplt": "compare_var1_var2",
                "matherr": "handle_error",
                "__divdf3": "perform_division",
                "__errno": "get_errno",
                "cVar1": "flag",
                "uVar2": "result",
                "iVar3": "comparison_result",
                "puVar4": "errno_ptr",
                "piVar5": "errno_ptr_int",
                "joined_r0x0800997a": "perform_additional_operations"
            },
            "calling": [
                "FUN_08001994",
                "FUN_08003004",
                "FUN_080005b4",
                "FUN_08002978"
            ],
            "called": [
                "FUN_0800b2e0",
                "FUN_0800a1bc",
                "FUN_08008894",
                "FUN_0800b3dc",
                "FUN_08008b74",
                "FUN_08008b24"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080098d0": {
                    "1": "calculate_root",
                    "25": "calculate_square_root",
                    "3": "calculate_sqrt"
                },
                "param_1": {
                    "6": "input1",
                    "4": "value1",
                    "1": "input_num1",
                    "3": "number1",
                    "5": "num1"
                },
                "param_2": {
                    "6": "input_2",
                    "1": "value_2",
                    "3": "number2",
                    "5": "num2",
                    "4": "value2"
                },
                "local_50": {
                    "7": "flag",
                    "1": "value1",
                    "2": "matherr_arg1",
                    "3": "result"
                },
                "local_4c": {
                    "2": "matherr_arg2",
                    "1": "ptr",
                    "5": "pointer",
                    "3": "message"
                },
                "local_48": {
                    "2": "temp_input1",
                    "1": "result_2",
                    "4": "input_1_copy",
                    "3": "number1_copy"
                },
                "uStack_44": {
                    "2": "value2_copy",
                    "1": "temp_input_2",
                    "3": "number2_copy",
                    "4": "input_2_copy"
                },
                "local_40": {
                    "1": "temp_value3",
                    "3": "input_1_copy_2",
                    "2": "local_var5"
                },
                "uStack_3c": {
                    "2": "local_var6",
                    "1": "div_value_4",
                    "3": "number2_copy2"
                },
                "local_38": {
                    "1": "value",
                    "3": "return_value",
                    "2": "div_result",
                    "6": "result"
                },
                "local_30": {
                    "1": "division_error",
                    "4": "error",
                    "2": "error_value",
                    "3": "comparison_error"
                },
                "__ieee754_sqrt": {
                    "1": "calculate_square_root_helper"
                },
                "DAT_20000014": {
                    "1": "constant"
                },
                "__unorddf2": {
                    "1": "compare_inputs"
                },
                "__aeabi_dcmplt": {
                    "1": "compare_var1_var2"
                },
                "matherr": {
                    "1": "handle_error"
                },
                "__divdf3": {
                    "1": "perform_division"
                },
                "__errno": {
                    "1": "get_errno"
                },
                "cVar1": {
                    "11": "flag",
                    "1": "condition_var",
                    "2": "constant"
                },
                "uVar2": {
                    "2": "sqrt_result",
                    "1": "sqrt_value",
                    "11": "square_root",
                    "13": "result"
                },
                "iVar3": {
                    "2": "comparison",
                    "25": "comparison_result",
                    "1": "compare_result"
                },
                "puVar4": {
                    "1": "error_pointer",
                    "3": "err_ptr",
                    "4": "errno_pointer",
                    "17": "errno_ptr"
                },
                "piVar5": {
                    "1": "error_number_ptr",
                    "4": "errno_ptr2",
                    "5": "errno_ptr_int",
                    "2": "errno_ptr_2",
                    "3": "errno_int_ptr"
                },
                "joined_r0x0800997a": {
                    "1": "perform_additional_operations"
                },
                "FUNKY_FUNCTION": {
                    "1": "calculate_sqrt"
                },
                "Cvar1": {
                    "1": "flag"
                }
            }
        },
        "FUN_08009990": {
            "entrypoint": "0x08009990",
            "current_name": "calculate_atan_08009990",
            "code": "\nuint calculate_atan_08009990(uint x,uint y,uint z,uint w)\n\n{\n  int difference;\n  undefined4 result1;\n  uint temp_var3;\n  uint temp_var4;\n  uint y_abs;\n  undefined8 result;\n  \n  temp_var4 = w & 0x7fffffff;\n  if (((temp_var4 | (-z | z) >> 0x1f) < 0x7ff00001) &&\n     (y_abs = y & 0x7fffffff, (y_abs | (-x | x) >> 0x1f) < 0x7ff00001)) {\n    if ((w + 0xc0100000 | z) == 0) {\n      temp_var4 = calculate_arctan();\n      return temp_var4;\n    }\n    temp_var3 = (int)w >> 0x1e & 2U | y >> 0x1f;\n    if ((y_abs | x) == 0) {\n      if (temp_var3 == 2) {\n        x = 0x54442d18;\n      }\n      else if (temp_var3 == 3) {\n        x = 0x54442d18;\n      }\n    }\n    else {\n      if ((temp_var4 | z) != 0) {\n        if (temp_var4 == 0x7ff00000) {\n          temp_var3 = temp_var3 - 1;\n          if (y_abs == 0x7ff00000) {\n            if (temp_var3 < 3) {\n              return *(uint *)(&DAT_0800be68 + temp_var3 * 8);\n            }\n            return 0x54442d18;\n          }\n          if (temp_var3 < 3) {\n            return *(uint *)(&DAT_0800be80 + temp_var3 * 8);\n          }\n          return 0;\n        }\n        if (y_abs != 0x7ff00000) {\n          difference = (int)(y_abs - temp_var4) >> 0x14;\n          if ((int)(y_abs - temp_var4) < 0x3d00000) {\n            if (((int)w < 0) && (difference + 0x3c < 0 != check_overflow(difference,0x3c))) {\n              result = 0;\n            }\n            else {\n              divide_double(x,y,z,w,w);\n              absolute_value();\n              result = calculate_arctan();\n            }\n          }\n          else {\n            result = 0x3ff921fb54442d18;\n          }\n          result1 = (undefined4)((ulonglong)result >> 0x20);\n          temp_var4 = (uint)result;\n          if (temp_var3 == 1) {\n            return temp_var4;\n          }\n          if (temp_var3 == 2) {\n            result = subtract_double(temp_var4,result1,0x33145c07,0x3ca1a626);\n            temp_var4 = subtract_double(0x54442d18,0x400921fb,(int)result,(int)((ulonglong)result >> 0x20));\n            return temp_var4;\n          }\n          if (temp_var3 == 0) {\n            return temp_var4;\n          }\n          result = subtract_double(temp_var4,result1,0x33145c07,0x3ca1a626);\n          temp_var4 = subtract_double((int)result,(int)((ulonglong)result >> 0x20),0x54442d18,0x400921fb);\n          return temp_var4;\n        }\n      }\n      if ((int)y < 0) {\n        x = 0x54442d18;\n      }\n      else {\n        x = 0x54442d18;\n      }\n    }\n  }\n  else {\n    x = add_double(z,w,x,y);\n  }\n  return x;\n}\n\n",
            "renaming": {
                "FUN_08009990": "calculate_atan_08009990",
                "param_1": "x",
                "param_2": "y",
                "param_3": "z",
                "param_4": "w",
                "iVar1": "difference",
                "uVar2": "result1",
                "uVar3": "temp_var3",
                "uVar4": "temp_var4",
                "uVar5": "y_abs",
                "uVar6": "result",
                "__aeabi_dadd": "add_double",
                "atan": "calculate_arctan",
                "SCARRY4": "check_overflow",
                "fabs": "absolute_value",
                "__divdf3": "divide_double",
                "__subdf3": "subtract_double"
            },
            "calling": [
                "FUN_08009818"
            ],
            "called": [
                "FUN_080082d0",
                "FUN_08008894",
                "FUN_0800b2cc",
                "FUN_0800af78",
                "FUN_080082d4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08009990": {
                    "3": "calculate_arctangent",
                    "1": "calculate_result",
                    "19": "calculate_atan",
                    "4": "calculate_arctan"
                },
                "param_1": {
                    "10": "x",
                    "9": "input_1",
                    "1": "numerator",
                    "2": "input_param1",
                    "3": "input1"
                },
                "param_2": {
                    "1": "b",
                    "3": "input2",
                    "2": "input_param2",
                    "10": "y",
                    "9": "input_2"
                },
                "param_3": {
                    "9": "input_3",
                    "10": "z",
                    "2": "input_param3",
                    "1": "num3",
                    "3": "input3"
                },
                "param_4": {
                    "1": "input_w",
                    "9": "w",
                    "2": "input_param4",
                    "3": "input4"
                },
                "iVar1": {
                    "3": "temp_var1",
                    "2": "temp1",
                    "1": "temp_var_1",
                    "18": "difference"
                },
                "uVar2": {
                    "1": "result_high_bits",
                    "2": "temp2",
                    "3": "result_upper",
                    "4": "result"
                },
                "uVar3": {
                    "2": "result",
                    "3": "temp_var3",
                    "1": "quotient_low"
                },
                "uVar4": {
                    "1": "positive_param4",
                    "2": "temp4",
                    "3": "temp_var4"
                },
                "uVar5": {
                    "1": "y_filtered",
                    "2": "param_2_abs",
                    "3": "temp_var5",
                    "4": "y_abs"
                },
                "uVar6": {
                    "4": "temp_result",
                    "1": "result_double",
                    "2": "result2",
                    "3": "atan_result",
                    "9": "result"
                },
                "__aeabi_dadd": {
                    "4": "add_double"
                },
                "FUN_080082d0": {
                    "2": "calculate_difference",
                    "1": "calculate_arctan_helper"
                },
                "FUN_08008894": {
                    "2": "calculate_absolute_value",
                    "1": "fabs"
                },
                "FUNC_0800b2cc": {
                    "1": "undefined_function"
                },
                "FUN_0800af78": {
                    "1": "calculate_something"
                },
                "FUN_080082d4": {
                    "1": "calculate_difference_with_filter"
                },
                "uVar7": {
                    "1": "factor"
                },
                "atan": {
                    "1": "arctan"
                },
                "SCARRY4": {
                    "1": "check_overflow"
                },
                "fabs": {
                    "3": "absolute_value"
                },
                "__divdf3": {
                    "3": "divide_double"
                },
                "__subdf3": {
                    "3": "subtract_double"
                },
                "F_080082d0": {
                    "1": "divide_floats"
                },
                "F_08008894": {
                    "1": "subtract_floats"
                },
                "F_0800af78": {
                    "1": "perform_operation"
                },
                "F_080082d4": {
                    "1": "subtract_multiply"
                }
            }
        },
        "FUN_08009b24": {
            "entrypoint": "0x08009b24",
            "current_name": "calculate_square_root_08009b24",
            "code": "\nuint calculate_square_root_08009b24(uint input1,uint input2,uint input3,uint input4)\n\n{\n  undefined4 result1;\n  int comparison_result;\n  uint result2;\n  int temp2;\n  undefined4 temp3;\n  int temp4;\n  uint temp5;\n  undefined4 temp6;\n  undefined4 temp7;\n  undefined8 temp8;\n  undefined8 temp9;\n  undefined8 temp10;\n  undefined8 temp11;\n  int local_variable;\n  \n  input2 = input2 & 0x7fffffff;\n  input4 = input4 & 0x7fffffff;\n  result2 = input1;\n  temp5 = input2;\n  if (input2 < input4) {\n    result2 = input3;\n    input3 = input1;\n    temp5 = input4;\n    input4 = input2;\n  }\n  if (0x3c00000 < (int)(temp5 - input4)) {\n    result2 = __aeabi_dadd(result2,temp5,input3,input4);\n    return result2;\n  }\n  if (temp5 < 0x5f300001) {\n    local_variable = 0;\n  }\n  else {\n    if (0x7fefffff < temp5) {\n      if ((temp5 & 0xfffff | result2) != 0) {\n        result2 = __aeabi_dadd(result2,temp5,input3,input4);\n      }\n      if ((input4 ^ 0x7ff00000 | input3) != 0) {\n        return result2;\n      }\n      return input3;\n    }\n    temp5 = temp5 + 0xda800000;\n    input4 = input4 + 0xda800000;\n    local_variable = 600;\n  }\n  temp9 = CONCAT44(temp5,result2);\n  temp8 = CONCAT44(input4,input3);\n  if ((int)input4 < 0x20b00000) {\n    if ((int)input4 < 0x100000) {\n      if ((input4 | input3) == 0) {\n        return result2;\n      }\n      temp8 = __muldf3(input3,input4,0,0x7fd00000);\n      temp9 = __muldf3(result2,temp5,0,0x7fd00000);\n      local_variable = local_variable + -0x3fe;\n    }\n    else {\n      temp5 = temp5 + 0x25800000;\n      temp9 = CONCAT44(temp5,result2);\n      input4 = input4 + 0x25800000;\n      temp8 = CONCAT44(input4,input3);\n      local_variable = local_variable + -600;\n    }\n  }\n  temp7 = (undefined4)((ulonglong)temp9 >> 0x20);\n  temp6 = (undefined4)temp9;\n  temp4 = (int)((ulonglong)temp8 >> 0x20);\n  temp3 = (undefined4)temp8;\n  temp8 = __subdf3(temp6,temp7,temp3,temp4);\n  temp2 = (int)((ulonglong)temp8 >> 0x20);\n  result1 = (undefined4)temp8;\n  comparison_result = __aeabi_dcmplt(temp3,temp4,result1,temp2);\n  if (comparison_result == 0) {\n    temp8 = __muldf3(0,input4,0);\n    temp9 = __muldf3(result1,temp2 + -0x80000000,result1,temp2);\n    temp10 = __aeabi_dadd(temp6,temp7,temp6,temp7);\n    temp10 = __subdf3((int)temp10,(int)((ulonglong)temp10 >> 0x20),0,temp5 + 0x100000);\n    temp10 = __muldf3((int)temp10,(int)((ulonglong)temp10 >> 0x20),temp3,temp4);\n    temp11 = __subdf3(temp3,temp4,0,input4);\n    temp11 = __muldf3((int)temp11,(int)((ulonglong)temp11 >> 0x20),0,temp5 + 0x100000);\n    temp10 = __aeabi_dadd((int)temp10,(int)((ulonglong)temp10 >> 0x20),(int)temp11,\n                          (int)((ulonglong)temp11 >> 0x20));\n    temp9 = __subdf3((int)temp9,(int)((ulonglong)temp9 >> 0x20),(int)temp10,\n                      (int)((ulonglong)temp10 >> 0x20));\n    __subdf3((int)temp8,(int)((ulonglong)temp8 >> 0x20),(int)temp9,\n             (int)((ulonglong)temp9 >> 0x20));\n    temp8 = __ieee754_sqrt();\n  }\n  else {\n    temp8 = __muldf3(0,temp5,0,temp5);\n    temp9 = __muldf3(temp3,temp4 + -0x80000000,temp3,temp4);\n    temp10 = __aeabi_dadd(temp6,temp7,0,temp5);\n    temp11 = __subdf3(temp6,temp7,0,temp5);\n    temp10 = __muldf3((int)temp10,(int)((ulonglong)temp10 >> 0x20),(int)temp11,\n                      (int)((ulonglong)temp11 >> 0x20));\n    temp9 = __subdf3((int)temp9,(int)((ulonglong)temp9 >> 0x20),(int)temp10,\n                      (int)((ulonglong)temp10 >> 0x20));\n    __subdf3((int)temp8,(int)((ulonglong)temp8 >> 0x20),(int)temp9,\n             (int)((ulonglong)temp9 >> 0x20));\n    temp8 = __ieee754_sqrt();\n  }\n  result2 = (uint)temp8;\n  if (local_variable != 0) {\n    result2 = __muldf3(result2,(int)((ulonglong)temp8 >> 0x20),0,local_variable * 0x100000 + 0x3ff00000);\n  }\n  return result2;\n}\n\n",
            "renaming": {
                "FUN_08009b24": "calculate_square_root_08009b24",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "result1",
                "iVar2": "comparison_result",
                "uVar3": "result2",
                "iVar4": "temp2",
                "uVar5": "temp3",
                "iVar6": "temp4",
                "uVar7": "temp5",
                "uVar8": "temp6",
                "uVar9": "temp7",
                "uVar10": "temp8",
                "uVar11": "temp9",
                "uVar12": "temp10",
                "uVar13": "temp11",
                "local_3c": "local_variable"
            },
            "calling": [
                "FUN_0800981c"
            ],
            "called": [
                "FUN_080082d0",
                "FUN_0800a1bc",
                "FUN_08008640",
                "FUN_08008b24",
                "FUN_080082d4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08009b24": {
                    "6": "calculate_distance",
                    "1": "calculate_result",
                    "2": "calculate_sqrt",
                    "20": "calculate_square_root"
                },
                "param_1": {
                    "1": "input_value1",
                    "6": "num1",
                    "4": "x1",
                    "8": "input1"
                },
                "param_2": {
                    "8": "input2",
                    "1": "value2",
                    "6": "b",
                    "4": "y1"
                },
                "param_3": {
                    "1": "height",
                    "6": "num3",
                    "4": "x2",
                    "8": "input3"
                },
                "param_4": {
                    "4": "y2",
                    "1": "num3",
                    "6": "num4",
                    "8": "input4"
                },
                "uVar1": {
                    "1": "upper_half1",
                    "19": "result1",
                    "9": "result"
                },
                "iVar2": {
                    "1": "result_2",
                    "2": "compare_result",
                    "7": "comparison",
                    "11": "comparison_result"
                },
                "uVar3": {
                    "1": "output",
                    "7": "temp1",
                    "9": "result2",
                    "5": "result"
                },
                "iVar4": {
                    "1": "int_value1",
                    "4": "comparison2",
                    "2": "result4",
                    "7": "temp2"
                },
                "uVar5": {
                    "1": "temp2",
                    "6": "temp3",
                    "2": "result4",
                    "5": "result3",
                    "4": "result2"
                },
                "iVar6": {
                    "1": "result_6",
                    "2": "temp2",
                    "3": "comparison3",
                    "6": "temp4"
                },
                "uVar7": {
                    "2": "result4",
                    "1": "tmp_result2",
                    "3": "temp1"
                },
                "uVar8": {
                    "1": "low_bits1",
                    "3": "u_var8",
                    "2": "temp1_high",
                    "4": "temp6"
                },
                "uVar9": {
                    "1": "low_bits1",
                    "2": "temp3",
                    "3": "u_var9",
                    "4": "temp7"
                },
                "uVar10": {
                    "2": "temp4",
                    "1": "num2_high",
                    "3": "mul_result1",
                    "4": "temp8"
                },
                "uVar11": {
                    "1": "temp2_low",
                    "3": "mul_result2",
                    "2": "result10",
                    "4": "temp9"
                },
                "uVar12": {
                    "1": "result4",
                    "2": "temp3",
                    "4": "temp10"
                },
                "uVar13": {
                    "1": "temp4",
                    "4": "temp11",
                    "2": "u_var13"
                },
                "local_3c": {
                    "2": "local_var1",
                    "1": "temp10",
                    "7": "local_variable",
                    "4": "local_var"
                },
                "FUN_080082d0": {
                    "1": "multiply"
                },
                "FUN_0800a1bc": {
                    "1": "multiply2"
                },
                "FUN_08008640": {
                    "1": "subtract"
                },
                "FUN_08008b24": {
                    "1": "check_condition"
                },
                "FUN_080082d4": {
                    "1": "multiply3"
                }
            }
        },
        "FUN_08009d78": {
            "entrypoint": "0x08009d78",
            "current_name": "calculate_result_08009d78",
            "code": "\nint calculate_result_08009d78(undefined4 input_value,uint input2,undefined8 *result)\n\n{\n  undefined4 temp1;\n  undefined4 temp2;\n  undefined4 temp3;\n  undefined4 temp4;\n  undefined4 temp5;\n  undefined4 temp6;\n  undefined4 temp7;\n  uint temp8;\n  int result;\n  undefined8 temp_var10;\n  undefined8 temp_var11;\n  undefined8 temp_var12;\n  undefined4 local_var1;\n  undefined4 local_var2;\n  undefined8 local_var3;\n  undefined8 local_var4;\n  undefined8 local_var5;\n  \n  temp8 = input2 & 0x7fffffff;\n  if (temp8 < 0x3fe921fc) {\n    *(undefined4 *)result = input_value;\n    *(uint *)((int)result + 4) = input2;\n    *(undefined4 *)(result + 1) = 0;\n    *(undefined4 *)((int)result + 0xc) = 0;\n    return 0;\n  }\n  if (temp8 < 0x4002d97c) {\n    if ((int)input2 < 1) {\n      temp_var10 = add_double(input_value,input2,0x54400000,0x3ff921fb);\n      temp3 = (undefined4)((ulonglong)temp_var10 >> 0x20);\n      temp1 = (undefined4)temp_var10;\n      if (temp8 != 0x3ff921fb) {\n        temp_var10 = add_double(temp1,temp3,0x1a626331,0x3dd0b461);\n        *result = temp_var10;\n        temp_var10 = subtract_double(temp1,temp3);\n        temp_var10 = add_double((int)temp_var10,(int)((ulonglong)temp_var10 >> 0x20),0x1a626331,0x3dd0b461);\n        result[1] = temp_var10;\n        return -1;\n      }\n      temp_var10 = add_double(temp1,temp3,0x1a600000,0x3dd0b461);\n      temp1 = (undefined4)((ulonglong)temp_var10 >> 0x20);\n      temp_var11 = add_double((int)temp_var10,temp1,0x2e037073,0x3ba3198a);\n      *result = temp_var11;\n      temp_var10 = subtract_double((int)temp_var10,temp1);\n      temp_var10 = add_double((int)temp_var10,(int)((ulonglong)temp_var10 >> 0x20),0x2e037073,0x3ba3198a);\n      result[1] = temp_var10;\n      return -1;\n    }\n    temp_var10 = subtract_double();\n    temp3 = (undefined4)((ulonglong)temp_var10 >> 0x20);\n    temp1 = (undefined4)temp_var10;\n    if (temp8 != 0x3ff921fb) {\n      temp_var10 = subtract_double(temp1,temp3,0x1a626331,0x3dd0b461);\n      *result = temp_var10;\n      temp_var10 = subtract_double(temp1,temp3);\n      temp_var10 = subtract_double((int)temp_var10,(int)((ulonglong)temp_var10 >> 0x20),0x1a626331,0x3dd0b461);\n      result[1] = temp_var10;\n      return 1;\n    }\n    temp_var10 = subtract_double(temp1,temp3,0x1a600000,0x3dd0b461);\n    temp1 = (undefined4)((ulonglong)temp_var10 >> 0x20);\n    temp_var11 = subtract_double((int)temp_var10,temp1,0x2e037073,0x3ba3198a);\n    *result = temp_var11;\n    temp_var10 = subtract_double((int)temp_var10,temp1);\n    temp_var10 = subtract_double((int)temp_var10,(int)((ulonglong)temp_var10 >> 0x20),0x2e037073,0x3ba3198a);\n    result[1] = temp_var10;\n    return 1;\n  }\n  if (0x413921fb < temp8) {\n    if (0x7fefffff < temp8) {\n      temp_var10 = subtract_double(input_value,input2,input_value,input2);\n      result[1] = temp_var10;\n      *result = temp_var10;\n      return 0;\n    }\n    result = ((int)temp8 >> 0x14) + -0x416;\n    double_to_int();\n    local_var3 = int_to_double();\n    temp_var10 = subtract_double(input_value,temp8 + result * -0x100000,(int)local_var3,\n                      (int)((ulonglong)local_var3 >> 0x20));\n    temp_var10 = multiply_double((int)temp_var10,(int)((ulonglong)temp_var10 >> 0x20),0,0x41700000);\n    double_to_int();\n    local_var4 = int_to_double();\n    temp_var10 = subtract_double((int)temp_var10,(int)((ulonglong)temp_var10 >> 0x20));\n    local_var5 = multiply_double((int)temp_var10,(int)((ulonglong)temp_var10 >> 0x20),0,0x41700000);\n    double_equals((int)local_var5,(int)((ulonglong)local_var5 >> 0x20),0,0);\n    result = remainder_pio2(&local_var3,result,result);\n    if (-1 < (int)input2) {\n      return result;\n    }\n    *(int *)((int)result + 4) = *(int *)((int)result + 4) + -0x80000000;\n    *(int *)((int)result + 0xc) = *(int *)((int)result + 0xc) + -0x80000000;\n    return -result;\n  }\n  temp_var10 = absolute_value();\n  temp3 = (undefined4)((ulonglong)temp_var10 >> 0x20);\n  temp_var11 = multiply_double((int)temp_var10,temp3,0x6dc9c883,0x3fe45f30);\n  add_double((int)temp_var11,(int)((ulonglong)temp_var11 >> 0x20),0,0x3fe00000);\n  result = double_to_int();\n  temp_var11 = int_to_double();\n  temp4 = (undefined4)((ulonglong)temp_var11 >> 0x20);\n  temp1 = (undefined4)temp_var11;\n  temp_var11 = multiply_double(temp1,temp4,0x54400000,0x3ff921fb);\n  temp_var10 = subtract_double((int)temp_var10,temp3,(int)temp_var11,(int)((ulonglong)temp_var11 >> 0x20));\n  temp5 = (undefined4)((ulonglong)temp_var10 >> 0x20);\n  temp3 = (undefined4)temp_var10;\n  temp_var11 = multiply_double(temp1,temp4,0x1a626331,0x3dd0b461);\n  if ((0x1f < result) || (*(uint *)(&DAT_0800be98 + (result + -1) * 4) == temp8)) {\n    temp_var12 = subtract_double(temp3,temp5,(int)temp_var11,(int)((ulonglong)temp_var11 >> 0x20));\n    if ((int)((temp8 >> 0x14) - ((uint)((int)((ulonglong)temp_var12 >> 0x20) << 1) >> 0x15)) < 0x11)\n    goto LAB_0800a0ce;\n    temp_var11 = multiply_double(temp1,temp4,0x1a600000,0x3dd0b461);\n    temp6 = (undefined4)((ulonglong)temp_var11 >> 0x20);\n    temp_var10 = subtract_double(temp3,temp5,(int)temp_var11,temp6);\n    temp7 = (undefined4)((ulonglong)temp_var10 >> 0x20);\n    temp2 = (undefined4)temp_var10;\n    temp_var12 = subtract_double(temp3,temp5,temp2,temp7);\n    temp_var11 = subtract_double((int)temp_var12,(int)((ulonglong)temp_var12 >> 0x20),(int)temp_var11,temp6);\n    temp_var12 = multiply_double(temp1,temp4,0x2e037073,0x3ba3198a);\n    temp_var11 = subtract_double((int)temp_var12,(int)((ulonglong)temp_var12 >> 0x20),(int)temp_var11,\n                      (int)((ulonglong)temp_var11 >> 0x20));\n    temp_var12 = subtract_double(temp2,temp7,(int)temp_var11,(int)((ulonglong)temp_var11 >> 0x20));\n    if ((int)(((int)temp8 >> 0x14) - ((uint)((int)((ulonglong)temp_var12 >> 0x20) << 1) >> 0x15)) < 0x32\n       ) goto LAB_0800a0ce;\n    temp_var11 = multiply_double(temp1,temp4,0x2e000000,0x3ba3198a);\n    temp3 = (undefined4)((ulonglong)temp_var11 >> 0x20);\n    temp_var10 = subtract_double(temp2,temp7,(int)temp_var11,temp3);\n    temp_var12 = subtract_double(temp2,temp7);\n    temp_var11 = subtract_double((int)temp_var12,(int)((ulonglong)temp_var12 >> 0x20),(int)temp_var11,temp3);\n    temp_var12 = multiply_double(temp1,temp4,0x252049c1,0x397b839a);\n    temp_var11 = subtract_double((int)temp_var12,(int)((ulonglong)temp_var12 >> 0x20),(int)temp_var11,\n                      (int)((ulonglong)temp_var11 >> 0x20));\n  }\n  temp_var12 = subtract_double((int)temp_var10,(int)((ulonglong)temp_var10 >> 0x20),(int)temp_var11,\n                    (int)((ulonglong)temp_var11 >> 0x20));\nLAB_0800a0ce:\n  local_var2 = (undefined4)((ulonglong)temp_var10 >> 0x20);\n  local_var1 = (undefined4)temp_var10;\n  *result = temp_var12;\n  temp_var10 = subtract_double(local_var1,local_var2);\n  temp_var10 = subtract_double((int)temp_var10,(int)((ulonglong)temp_var10 >> 0x20),(int)temp_var11,\n                    (int)((ulonglong)temp_var11 >> 0x20));\n  result[1] = temp_var10;\n  if ((int)input2 < 0) {\n    *(int *)result = (int)temp_var12;\n    *(int *)((int)result + 4) = (int)((ulonglong)temp_var12 >> 0x20) + -0x80000000;\n    *(int *)(result + 1) = (int)temp_var10;\n    *(int *)((int)result + 0xc) = (int)((ulonglong)temp_var10 >> 0x20) + -0x80000000;\n    result = -result;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08009d78": "calculate_result_08009d78",
                "param_1": "input_value",
                "param_2": "input2",
                "param_3": "result",
                "uVar1": "temp1",
                "uVar2": "temp2",
                "uVar3": "temp3",
                "uVar4": "temp4",
                "uVar5": "temp5",
                "uVar6": "temp6",
                "uVar7": "temp7",
                "uVar8": "temp8",
                "iVar9": "result",
                "uVar10": "temp_var10",
                "uVar11": "temp_var11",
                "uVar12": "temp_var12",
                "local_50": "local_var1",
                "local_40": "local_var3",
                "local_38": "local_var4",
                "local_30": "local_var5",
                "uStack_4c": "local_var2",
                "__aeabi_dadd": "add_double",
                "__subdf3": "subtract_double",
                "fabs": "absolute_value",
                "__muldf3": "multiply_double",
                "__aeabi_d2iz": "double_to_int",
                "__aeabi_i2d": "int_to_double",
                "__aeabi_dcmpeq": "double_equals",
                "__kernel_rem_pio2": "remainder_pio2"
            },
            "calling": [
                "FUN_08009410",
                "FUN_080096e8"
            ],
            "called": [
                "FUN_080082d0",
                "FUN_0800856c",
                "FUN_08008ba0",
                "FUN_08008b10",
                "FUN_0800a5a0",
                "FUN_0800b2cc",
                "FUN_08008640",
                "FUN_080082d4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08009d78": {
                    "2": "calculate_exponential",
                    "1": "calculate_square_root",
                    "13": "calculate_result"
                },
                "param_1": {
                    "1": "num1",
                    "2": "input_param",
                    "7": "input_value",
                    "6": "input1",
                    "3": "input_value1"
                },
                "param_2": {
                    "1": "exponent",
                    "6": "input2",
                    "2": "input_2",
                    "3": "input_value2",
                    "4": "input_flag"
                },
                "param_3": {
                    "3": "result_array",
                    "2": "output_param",
                    "1": "result_ptr",
                    "8": "output",
                    "10": "result"
                },
                "uVar1": {
                    "1": "float_part",
                    "14": "temp1",
                    "2": "temp_var_1",
                    "3": "result1",
                    "6": "temp_var1"
                },
                "uVar2": {
                    "2": "temp_2",
                    "1": "var2",
                    "6": "temp_var2",
                    "3": "result2",
                    "14": "temp2"
                },
                "uVar3": {
                    "1": "temp_value3",
                    "6": "temp_var3",
                    "2": "temp_var_3",
                    "3": "result3",
                    "14": "temp3"
                },
                "uVar4": {
                    "2": "temp_4",
                    "1": "temp2",
                    "6": "temp_var4",
                    "14": "temp4",
                    "3": "result4"
                },
                "uVar5": {
                    "14": "temp5",
                    "6": "temp_var5",
                    "2": "temp_var_5",
                    "1": "temp_value5",
                    "3": "result5"
                },
                "uVar6": {
                    "2": "temp_var_6",
                    "1": "temp4",
                    "3": "result6",
                    "14": "temp6",
                    "6": "temp_var6"
                },
                "uVar7": {
                    "1": "temp_value7",
                    "3": "result7",
                    "2": "temp_var_7",
                    "14": "temp7",
                    "6": "temp_var7"
                },
                "uVar8": {
                    "1": "abs_param_2",
                    "4": "masked_value",
                    "6": "temp8",
                    "2": "temp1"
                },
                "iVar9": {
                    "1": "temp9",
                    "3": "index",
                    "2": "result_code",
                    "4": "result"
                },
                "uVar10": {
                    "1": "temp_10",
                    "2": "temp9",
                    "4": "temp8",
                    "6": "temp_var10",
                    "3": "temp10"
                },
                "uVar11": {
                    "1": "value2",
                    "3": "temp11",
                    "6": "temp_var11",
                    "2": "temp10",
                    "4": "temp9"
                },
                "uVar12": {
                    "2": "temp11",
                    "1": "temp_var_10",
                    "3": "final_result",
                    "5": "temp_var12",
                    "4": "temp10"
                },
                "local_50": {
                    "1": "local_temp1",
                    "2": "temp_var1",
                    "12": "local_var1"
                },
                "local_4c": {
                    "1": "var2"
                },
                "local_40": {
                    "1": "local_var_3",
                    "2": "local_var2",
                    "3": "local_var1",
                    "9": "local_var3"
                },
                "local_38": {
                    "1": "temp4",
                    "3": "local_var2",
                    "9": "local_var4",
                    "2": "local_var3"
                },
                "local_30": {
                    "1": "local_variable3",
                    "2": "local_var4",
                    "9": "local_var5",
                    "3": "local_var3"
                },
                "uStack_4c": {
                    "1": "temp9",
                    "10": "local_var2"
                },
                "__aeabi_dadd": {
                    "4": "add_double",
                    "1": "double_add"
                },
                "__subdf3": {
                    "1": "double_subtract",
                    "4": "subtract_double"
                },
                "fabs": {
                    "4": "absolute_value",
                    "1": "absolute_double"
                },
                "__muldf3": {
                    "1": "double_multiply",
                    "4": "multiply_double"
                },
                "__aeabi_d2iz": {
                    "1": "convert_double_to_int",
                    "2": "double_to_int"
                },
                "__aeabi_i2d": {
                    "3": "int_to_double",
                    "1": "integer_to_double"
                },
                "__aeabi_dcmpeq": {
                    "1": "double_compare_equal",
                    "2": "double_equals"
                },
                "__kernel_rem_pio2": {
                    "2": "remainder_pio2",
                    "1": "calculate_remainder_pio2"
                },
                "FUN_080082d0": {
                    "1": "calculate_sum"
                },
                "FUN_0800856c": {
                    "1": "fabs"
                },
                "FUN_08008ba0": {
                    "1": "calculate_product"
                },
                "FUN_08008b10": {
                    "1": "check_condition"
                },
                "FUN_0800a5a0": {
                    "1": "sub_function5"
                },
                "FUNC_0800b2cc": {
                    "1": "sub_function6"
                },
                "FUN_08008640": {
                    "1": "sub_function7"
                },
                "FUN_080082d4": {
                    "1": "calculate_division"
                },
                "DAT_0800be98": {
                    "1": "lohi"
                },
                "DAT_080082d0": {
                    "1": "sub_function1"
                }
            }
        },
        "FUN_0800a1bc": {
            "entrypoint": "0x0800a1bc",
            "current_name": "calculate_sum_0800a1bc",
            "code": "\nuint calculate_sum_0800a1bc(uint input1,uint input2)\n\n{\n  uint temp1;\n  int temp2;\n  uint temp3;\n  undefined4 temp1;\n  uint temp2;\n  uint temp3;\n  uint sum;\n  uint temp5;\n  uint temp9;\n  int counter;\n  uint temp11;\n  uint shift_amount;\n  undefined8 product;\n  \n  if ((~input2 & 0x7ff00000) == 0) {\n    product = multiply(input1,input2,input1,input2);\n    sum = add_int((int)product,(int)((ulonglong)product >> 0x20),input1,input2);\n    return sum;\n  }\n  if ((int)input2 < 1) {\n    if ((input2 & 0x7fffffff | input1) == 0) {\n      return input1;\n    }\n    if (input2 != 0) {\n      product = subtract(input1,input2,input1);\n      temp1 = (undefined4)((ulonglong)product >> 0x20);\n      sum = divide((int)product,temp1,(int)product,temp1);\n      return sum;\n    }\n    do {\n      temp9 = input1;\n      sum = temp9 >> 0xb;\n      input2 = input2 - 0x15;\n      input1 = temp9 << 0x15;\n    } while (sum == 0);\n    temp1 = input2;\n    if (-1 < (int)temp9) goto LAB_0800a290;\n    shift_amount = 0x20;\n    temp2 = 0xffffffff;\n    temp9 = input1;\n  }\n  else {\n    temp1 = (int)input2 >> 0x14;\n    sum = input2;\n    temp9 = input1;\n    if (temp1 != 0) goto LAB_0800a1da;\nLAB_0800a290:\n    temp9 = 0;\n    shift_amount = sum;\n    do {\n      temp2 = temp9;\n      sum = shift_amount << 1;\n      counter = shift_amount << 0xc;\n      temp9 = temp2 + 1;\n      shift_amount = sum;\n    } while (-1 < counter);\n    shift_amount = 0x20 - temp9;\n    input2 = temp1;\n    temp9 = input1 << (temp9 & 0xff);\n  }\n  sum = input1 >> (shift_amount & 0xff) | sum;\n  temp1 = input2 - temp2;\nLAB_0800a1da:\n  sum = sum & 0xfffff | 0x100000;\n  if (-1 < (int)(temp1 << 0x1f)) {\n    sum = sum * 2 - ((int)temp9 >> 0x1f);\n    temp9 = temp9 << 1;\n  }\n  shift_amount = 0;\n  sum = sum * 2 - ((int)temp9 >> 0x1f);\n  temp9 = temp9 << 1;\n  temp1 = 0;\n  counter = 0x16;\n  temp2 = 0x200000;\n  do {\n    temp2 = temp1 + temp2;\n    if (temp2 <= (int)sum) {\n      sum = sum - temp2;\n      temp1 = temp2 + temp2;\n      shift_amount = shift_amount + temp2;\n    }\n    counter = counter + -1;\n    sum = sum * 2 - ((int)temp9 >> 0x1f);\n    temp2 = temp2 >> 1;\n    temp9 = temp9 << 1;\n  } while (counter != 0);\n  temp2 = 0x20;\n  temp3 = 0x80000000;\n  counter = 0;\n  temp2 = 0;\n  do {\n    temp3 = temp3 + counter;\n    temp11 = temp1;\n    if ((int)temp1 < (int)sum) {\n      if ((int)temp3 < 0) {\nLAB_0800a26a:\n        if (-1 < (int)(temp3 + temp3)) {\n          temp11 = temp1 + 1;\n        }\n      }\n      temp5 = sum - temp1;\n      temp1 = temp11;\n      if (temp9 < temp3) {\n        temp5 = temp5 - 1;\n      }\nLAB_0800a262:\n      counter = temp3 + temp3;\n      temp9 = temp9 - temp3;\n      temp2 = temp2 + temp3;\n      sum = temp5;\n    }\n    else if ((sum == temp1) && (temp3 <= temp9)) {\n      if ((int)temp3 < 0) goto LAB_0800a26a;\n      temp5 = 0;\n      temp1 = sum;\n      goto LAB_0800a262;\n    }\n    temp2 = temp2 + -1;\n    temp3 = temp3 >> 1;\n    sum = sum * 2 - ((int)temp9 >> 0x1f);\n    temp9 = temp9 << 1;\n    if (temp2 == 0) {\n      if ((sum | temp9) == 0) {\n        temp2 = temp2 >> 1;\n      }\n      else if (temp2 == 0xffffffff) {\n        shift_amount = shift_amount + 1;\n        temp2 = 0;\n      }\n      else {\n        temp2 = temp2 + 1 >> 1;\n      }\n      if ((shift_amount & 1) != 0) {\n        temp2 = temp2 | 0x80000000;\n      }\n      return temp2;\n    }\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_0800a1bc": "calculate_sum_0800a1bc",
                "param_1": "input1",
                "param_2": "input2",
                "uVar1": "temp1",
                "iVar2": "temp2",
                "uVar3": "temp3",
                "uVar4": "temp1",
                "uVar5": "temp2",
                "uVar6": "temp3",
                "uVar7": "sum",
                "uVar8": "temp5",
                "uVar9": "temp9",
                "iVar10": "counter",
                "uVar11": "temp11",
                "uVar12": "shift_amount",
                "uVar13": "product",
                "__muldf3": "multiply",
                "__aeabi_dadd": "add_int",
                "__subdf3": "subtract",
                "__divdf3": "divide"
            },
            "calling": [
                "FUN_08009b24",
                "FUN_080098d0"
            ],
            "called": [
                "FUN_080082d0",
                "FUN_08008894",
                "FUN_08008640",
                "FUN_080082d4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800a1bc": {
                    "25": "calculate_sum",
                    "1": "calculate_number"
                },
                "param_1": {
                    "3": "input_1",
                    "1": "number1",
                    "2": "input_value1",
                    "8": "num1",
                    "14": "input1"
                },
                "param_2": {
                    "14": "input2",
                    "2": "value2",
                    "1": "number2",
                    "8": "num2",
                    "3": "input_2"
                },
                "uVar1": {
                    "1": "quotient",
                    "2": "result1",
                    "8": "temp1",
                    "5": "result"
                },
                "iVar2": {
                    "1": "temp_var1",
                    "2": "shift_count",
                    "3": "counter1",
                    "4": "temp2"
                },
                "uVar3": {
                    "3": "remainder",
                    "2": "temp1",
                    "1": "result",
                    "4": "temp2"
                },
                "uVar4": {
                    "1": "quotient",
                    "2": "temp",
                    "5": "temp1",
                    "4": "temp2"
                },
                "uVar5": {
                    "3": "shift_count",
                    "1": "shifted_input",
                    "2": "temp_5",
                    "4": "temp4",
                    "5": "temp2"
                },
                "uVar6": {
                    "4": "temp6",
                    "3": "mask",
                    "2": "shift_count",
                    "1": "limit",
                    "5": "temp3"
                },
                "uVar7": {
                    "3": "temp7",
                    "2": "temp_7",
                    "1": "temp_var7",
                    "6": "sum",
                    "5": "result"
                },
                "uVar8": {
                    "5": "temp5",
                    "1": "temp_var8",
                    "2": "temp_8",
                    "4": "temp8",
                    "3": "temp7"
                },
                "uVar9": {
                    "2": "temp_9",
                    "1": "shifted_input",
                    "4": "temp9",
                    "3": "remainder"
                },
                "iVar10": {
                    "1": "count2",
                    "3": "counter2",
                    "4": "temp10",
                    "8": "counter",
                    "2": "temp_10"
                },
                "uVar11": {
                    "1": "num_bits",
                    "3": "temp7",
                    "2": "temp9"
                },
                "uVar12": {
                    "1": "temp10",
                    "2": "temp_12",
                    "3": "temp12",
                    "5": "shift_amount",
                    "4": "shift"
                },
                "uVar13": {
                    "1": "result",
                    "2": "temp_13",
                    "4": "temp13",
                    "11": "product"
                },
                "iVar14": {
                    "1": "temp_loop_count"
                },
                "uVar15": {
                    "1": "subtraction_result"
                },
                "uVar16": {
                    "1": "additional_bit_check"
                },
                "uVar14": {
                    "1": "product"
                },
                "uVar17": {
                    "1": "temp2"
                },
                "uVar18": {
                    "1": "temp"
                },
                "uVar19": {
                    "1": "temp2"
                },
                "uVar20": {
                    "1": "temp"
                },
                "uVar21": {
                    "1": "temp2"
                },
                "__muldf3": {
                    "2": "multiply"
                },
                "__aeabi_dadd": {
                    "1": "add_int"
                },
                "__subdf3": {
                    "2": "subtract"
                },
                "__divdf3": {
                    "2": "divide"
                }
            }
        },
        "FUN_0800a348": {
            "entrypoint": "0x0800a348",
            "current_name": "calculate_result_0800a348",
            "code": "\nundefined4 calculate_result_0800a348(undefined4 input1,uint input2,undefined4 input3,undefined4 input4)\n\n{\n  int conversion_result;\n  undefined4 result_low;\n  undefined4 result_high;\n  uint u_var4;\n  undefined8 mul_result;\n  undefined8 temp_result;\n  undefined8 mul_result_3;\n  undefined4 temp1;\n  undefined4 temp2;\n  undefined4 temp3;\n  undefined4 temp4;\n  \n  u_var4 = input2 & 0x7fffffff;\n  if (u_var4 < 0x3e400000) {\n    conversion_result = __aeabi_d2iz();\n    if (conversion_result == 0) {\n      return 0;\n    }\n    mul_result = __muldf3(input1,input2,input1,input2);\n    result_high = (undefined4)((ulonglong)mul_result >> 0x20);\n    result_low = (undefined4)mul_result;\n    temp_result = __muldf3(result_low,result_high,0xbe8838d4,0xbda8fae9);\n    temp_result = __aeabi_dadd((int)temp_result,(int)((ulonglong)temp_result >> 0x20),0xbdb4b1c4,0x3e21ee9e);\n    temp_result = __muldf3((int)temp_result,(int)((ulonglong)temp_result >> 0x20),result_low,result_high);\n    temp_result = __subdf3((int)temp_result,(int)((ulonglong)temp_result >> 0x20),0x809c52ad,0x3e927e4f);\n    temp_result = __muldf3((int)temp_result,(int)((ulonglong)temp_result >> 0x20),result_low,result_high);\n    temp_result = __aeabi_dadd((int)temp_result,(int)((ulonglong)temp_result >> 0x20),0x19cb1590,0x3efa01a0);\n    temp_result = __muldf3((int)temp_result,(int)((ulonglong)temp_result >> 0x20),result_low,result_high);\n    temp_result = __subdf3((int)temp_result,(int)((ulonglong)temp_result >> 0x20),0x16c15177,0x3f56c16c);\n    temp_result = __muldf3((int)temp_result,(int)((ulonglong)temp_result >> 0x20),result_low,result_high);\n    temp_result = __aeabi_dadd((int)temp_result,(int)((ulonglong)temp_result >> 0x20),0x5555554c,0x3fa55555);\n    temp_result = __muldf3((int)temp_result,(int)((ulonglong)temp_result >> 0x20),result_low,result_high);\n  }\n  else {\n    mul_result = __muldf3(input1,input2,input1,input2);\n    result_high = (undefined4)((ulonglong)mul_result >> 0x20);\n    result_low = (undefined4)mul_result;\n    temp_result = __muldf3(result_low,result_high,0xbe8838d4,0xbda8fae9);\n    temp_result = __aeabi_dadd((int)temp_result,(int)((ulonglong)temp_result >> 0x20),0xbdb4b1c4,0x3e21ee9e);\n    temp_result = __muldf3((int)temp_result,(int)((ulonglong)temp_result >> 0x20),result_low,result_high);\n    temp_result = __subdf3((int)temp_result,(int)((ulonglong)temp_result >> 0x20),0x809c52ad,0x3e927e4f);\n    temp_result = __muldf3((int)temp_result,(int)((ulonglong)temp_result >> 0x20),result_low,result_high);\n    temp_result = __aeabi_dadd((int)temp_result,(int)((ulonglong)temp_result >> 0x20),0x19cb1590,0x3efa01a0);\n    temp_result = __muldf3((int)temp_result,(int)((ulonglong)temp_result >> 0x20),result_low,result_high);\n    temp_result = __subdf3((int)temp_result,(int)((ulonglong)temp_result >> 0x20),0x16c15177,0x3f56c16c);\n    temp_result = __muldf3((int)temp_result,(int)((ulonglong)temp_result >> 0x20),result_low,result_high);\n    temp_result = __aeabi_dadd((int)temp_result,(int)((ulonglong)temp_result >> 0x20),0x5555554c,0x3fa55555);\n    temp_result = __muldf3((int)temp_result,(int)((ulonglong)temp_result >> 0x20),result_low,result_high);\n    if (0x3fd33332 < u_var4) {\n      if (u_var4 < 0x3fe90001) {\n        conversion_result = u_var4 - 0x200000;\n        mul_result = __subdf3(0,0x3ff00000,0,conversion_result);\n      }\n      else {\n        conversion_result = 0x3fd20000;\n        mul_result = 0x3fe7000000000000;\n      }\n      temp4 = (undefined4)((ulonglong)mul_result >> 0x20);\n      temp3 = (undefined4)mul_result;\n      mul_result = __muldf3(result_low,result_high,0,0x3fe00000);\n      mul_result = __subdf3((int)mul_result,(int)((ulonglong)mul_result >> 0x20),0,conversion_result);\n      temp_result = __muldf3(result_low,result_high,(int)temp_result,(int)((ulonglong)temp_result >> 0x20));\n      mul_result_3 = __muldf3(input1,input2,input3,input4);\n      temp_result = __subdf3((int)temp_result,(int)((ulonglong)temp_result >> 0x20),(int)mul_result_3,\n                       (int)((ulonglong)mul_result_3 >> 0x20));\n      mul_result = __subdf3((int)mul_result,(int)((ulonglong)mul_result >> 0x20),(int)temp_result,\n                       (int)((ulonglong)temp_result >> 0x20));\n      result_low = __subdf3(temp3,temp4,(int)mul_result,(int)((ulonglong)mul_result >> 0x20));\n      return result_low;\n    }\n  }\n  temp2 = (undefined4)((ulonglong)temp_result >> 0x20);\n  temp1 = (undefined4)temp_result;\n  result_low = (undefined4)((ulonglong)mul_result >> 0x20);\n  temp_result = __muldf3((int)mul_result,result_low,0,0x3fe00000);\n  mul_result = __muldf3((int)mul_result,result_low,temp1,temp2);\n  mul_result_3 = __muldf3(input1,input2,input3,input4);\n  mul_result = __subdf3((int)mul_result,(int)((ulonglong)mul_result >> 0x20),(int)mul_result_3,\n                   (int)((ulonglong)mul_result_3 >> 0x20));\n  mul_result = __subdf3((int)temp_result,(int)((ulonglong)temp_result >> 0x20),(int)mul_result,\n                   (int)((ulonglong)mul_result >> 0x20));\n  result_low = __subdf3(0,0x3ff00000,(int)mul_result,(int)((ulonglong)mul_result >> 0x20));\n  return result_low;\n}\n\n",
            "renaming": {
                "FUN_0800a348": "calculate_result_0800a348",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "iVar1": "conversion_result",
                "uVar2": "result_low",
                "uVar3": "result_high",
                "uVar4": "u_var4",
                "uVar5": "mul_result",
                "uVar6": "temp_result",
                "uVar7": "mul_result_3",
                "local_30": "temp1",
                "uStack_2c": "temp2",
                "local_28": "temp3",
                "uStack_24": "temp4"
            },
            "calling": [
                "FUN_08009410",
                "FUN_080096e8"
            ],
            "called": [
                "FUN_080082d0",
                "FUN_08008ba0",
                "FUN_08008640",
                "FUN_080082d4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800a348": {
                    "3": "calculate_square_root",
                    "2": "calculate_polynomial",
                    "1": "calculate_polynomial_approximation",
                    "14": "calculate_result"
                },
                "param_1": {
                    "3": "input_value",
                    "1": "input_param",
                    "5": "input_1",
                    "2": "number",
                    "11": "input1"
                },
                "param_2": {
                    "1": "value2",
                    "11": "input2",
                    "2": "flags",
                    "5": "input_2"
                },
                "param_3": {
                    "5": "param_3",
                    "1": "input_value_2",
                    "2": "param3",
                    "11": "input3"
                },
                "param_4": {
                    "2": "factor2",
                    "5": "param_4",
                    "1": "value4",
                    "11": "input4"
                },
                "iVar1": {
                    "1": "result_1",
                    "2": "temp_var1",
                    "7": "conversion_result",
                    "4": "result"
                },
                "uVar2": {
                    "7": "result_low",
                    "1": "result_2",
                    "4": "result1",
                    "2": "result2"
                },
                "uVar3": {
                    "2": "upper_bits",
                    "1": "result_hi",
                    "3": "result2",
                    "7": "result_high"
                },
                "uVar4": {
                    "1": "abs_input_param2",
                    "3": "abs_input_2",
                    "4": "abs_input2",
                    "2": "temp_var4",
                    "5": "u_var4"
                },
                "uVar5": {
                    "1": "temp_result1_low",
                    "2": "temp_value1",
                    "3": "mul_result_1",
                    "7": "mul_result"
                },
                "uVar6": {
                    "4": "mul_result_2",
                    "2": "temp_value2",
                    "1": "temp2"
                },
                "uVar7": {
                    "2": "temp_value3",
                    "1": "result4",
                    "4": "mul_result_3",
                    "3": "mul_result"
                },
                "local_30": {
                    "1": "result",
                    "2": "local_value1",
                    "3": "local_var1",
                    "4": "temp1"
                },
                "uStack_2c": {
                    "2": "result2",
                    "1": "result_2",
                    "4": "temp2"
                },
                "local_28": {
                    "2": "local_var3",
                    "1": "local_var_3",
                    "4": "temp3"
                },
                "uStack_24": {
                    "1": "temp_result2_high",
                    "2": "result4",
                    "4": "temp4"
                },
                "uStack_20": {
                    "1": "mul5_high"
                },
                "uStack_1c": {
                    "1": "mul5_low"
                },
                "uStack_18": {
                    "1": "sub1_high"
                },
                "uStack_14": {
                    "1": "sub1_low"
                },
                "uStack_10": {
                    "1": "sub2_high"
                },
                "uStack_c": {
                    "1": "sub2_low"
                },
                "uStack_8": {
                    "1": "sub3_high"
                },
                "uStack_4": {
                    "1": "sub3_low"
                },
                "iVar8": {
                    "1": "is_large"
                },
                "uVar8": {
                    "1": "temp_var8"
                },
                "uVar9": {
                    "1": "temp_var9"
                },
                "local_24": {
                    "1": "temp2"
                },
                "local_18": {
                    "1": "temp_result4_low"
                }
            }
        },
        "FUN_0800a5a0": {
            "entrypoint": "0x0800a5a0",
            "current_name": "calculate_result_0800a5a0",
            "code": "\n/* WARNING: Restarted to delay deadcode elimination for space: stack */\n\nunsigned calculate_result_0800a5a0(int input1,long_long *input2,int input3,int input4,int input5,int input6)\n\n{\n  undefined4 *pointer1;\n  unsigned result;\n  unsigned temp_result;\n  int index;\n  unsigned *pointer2;\n  undefined4 temp1;\n  unsigned **pointer_array;\n  undefined4 temp2;\n  int counter2;\n  undefined4 *pointer_var3;\n  undefined4 temp3;\n  unsigned temp4;\n  unsigned *pointer_var4;\n  int counter3;\n  int var1;\n  long_long *pointer_var5;\n  int counter4;\n  undefined4 *pointer5;\n  long_long *ptr_8;\n  undefined4 temp_var5;\n  int i_var21;\n  long_long *pointer_6;\n  undefined4 *pointer_7;\n  bool bool_var;\n  long_long temp5;\n  long_long temp6;\n  long_long temp7;\n  long_long *local_array1;\n  int local_var_1;\n  int local_var_2;\n  int local_var_3;\n  unsigned *local_array2 [2];\n  unsigned result_array [20];\n  long_long stack_var1;\n  long_long local_var_4;\n  int local_array4 [38];\n  long_long stack_var2;\n  \n  var1 = *(int *)(&DAT_0800c060 + input5 * 4);\n  counter2 = input4 + -1;\n  local_array2[1] = (unsigned *)input2;\n  if (input3 + 0x14 < 0 == SCARRY4(input3,0x14)) {\n    local_var_3 = (input3 + -3) / 0x18;\n    local_var_2 = (local_var_3 + 1) * -0x18;\n  }\n  else {\n    local_var_2 = -0x18;\n    local_var_3 = 0;\n  }\n  local_var_2 = input3 + local_var_2;\n  counter4 = local_var_3 - counter2;\n  if (-1 < var1 + counter2) {\n    i_var21 = var1 + counter2 + 1 + counter4;\n    pointer_var5 = &stack_var1;\n    do {\n      while (counter4 < 0) {\n        counter4 = counter4 + 1;\n        *(undefined4 *)pointer_var5 = 0;\n        *(undefined4 *)((int)pointer_var5 + 4) = 0;\n        pointer_var5 = pointer_var5 + 1;\n        if (counter4 == i_var21) goto LAB_0800a626;\n      }\n      temp6 = __aeabi_i2d(*(undefined4 *)(input6 + counter4 * 4));\n      counter4 = counter4 + 1;\n      *pointer_var5 = temp6;\n      pointer_var5 = pointer_var5 + 1;\n    } while (counter4 != i_var21);\n  }\nLAB_0800a626:\n  pointer_var3 = (undefined4 *)(input1 + -8);\n  if (-1 < var1) {\n    pointer_6 = &stack_var1 + input4;\n    counter4 = counter2;\n    pointer_var5 = &stack_var2;\n    do {\n      if (counter2 < 0) {\n        temp6 = 0;\n      }\n      else {\n        temp6 = 0;\n        pointer_7 = pointer_var3;\n        ptr_8 = pointer_6;\n        do {\n          pointer5 = pointer_7 + 2;\n          temp5 = __muldf3(*pointer5,pointer_7[3],*(undefined4 *)(ptr_8 + -1),\n                            *(undefined4 *)((int)ptr_8 + -4));\n          temp6 = __aeabi_dadd((int)temp6,(int)((ulonglong)temp6 >> 0x20),(int)temp5,\n                                (int)((ulonglong)temp5 >> 0x20));\n          pointer_7 = pointer5;\n          ptr_8 = ptr_8 + -1;\n        } while (pointer5 != pointer_var3 + input4 * 2);\n      }\n      counter4 = counter4 + 1;\n      *pointer_var5 = temp6;\n      pointer_6 = pointer_6 + 1;\n      pointer_var5 = pointer_var5 + 1;\n    } while (counter4 != var1 + input4);\n  }\n  local_array2[0] = result_array + var1 + -1;\n  counter4 = var1;\n  do {\n    temp6 = CONCAT44(*(undefined4 *)((int)&stack_var2 + counter4 * 8 + 4),\n                      *(undefined4 *)(&stack_var2 + counter4));\n    if (0 < counter4) {\n      pointer_var5 = &stack_var2 + counter4;\n      pointer2 = result_array;\n      do {\n        temp1 = (undefined4)((ulonglong)temp6 >> 0x20);\n        __muldf3((int)temp6,temp1,0,0x3e700000);\n        __aeabi_d2iz();\n        temp5 = __aeabi_i2d();\n        temp2 = (undefined4)((ulonglong)temp5 >> 0x20);\n        temp7 = __muldf3((int)temp5,temp2,0,0x41700000);\n        __subdf3((int)temp6,temp1,(int)temp7,(int)((ulonglong)temp7 >> 0x20));\n        result = __aeabi_d2iz();\n        pointer_6 = pointer_var5 + -1;\n        temp1 = *(undefined4 *)pointer_6;\n        temp3 = *(undefined4 *)((int)pointer_var5 + -4);\n        *pointer2 = result;\n        temp6 = __aeabi_dadd((int)temp5,temp2,temp1,temp3);\n        pointer_var5 = pointer_6;\n        pointer2 = pointer2 + 1;\n      } while (pointer_6 != &stack_var2);\n    }\n    temp6 = scalbn((int)temp6,(int)((ulonglong)temp6 >> 0x20),local_var_2);\n    temp2 = (undefined4)((ulonglong)temp6 >> 0x20);\n    __muldf3((int)temp6,temp2,0,0x3fc00000);\n    temp5 = floor();\n    temp5 = __muldf3((int)temp5,(int)((ulonglong)temp5 >> 0x20),0,0x40200000);\n    temp6 = __subdf3((int)temp6,temp2,(int)temp5,(int)((ulonglong)temp5 >> 0x20));\n    result = __aeabi_d2iz();\n    temp5 = __aeabi_i2d();\n    temp6 = __subdf3((int)temp6,(int)((ulonglong)temp6 >> 0x20),(int)temp5,\n                      (int)((ulonglong)temp5 >> 0x20));\n    temp1 = (undefined4)((ulonglong)temp6 >> 0x20);\n    temp2 = (undefined4)temp6;\n    if (local_var_2 < 1) {\n      if (local_var_2 == 0) {\n        i_var21 = (int)result_array[counter4 + -1] >> 0x17;\n        goto joined_r0x0800a8b8;\n      }\n      i_var21 = __aeabi_dcmpge(temp2,temp1,0,0x3fe00000);\n      if (i_var21 != 0) {\n        result = result + 1;\n        if (counter4 < 1) {\n          temp6 = __subdf3(0,0x3ff00000,temp2,temp1);\n          i_var21 = 2;\n          goto LAB_0800a7a4;\n        }\n        i_var21 = 2;\n        goto LAB_0800a8c8;\n      }\n    }\n    else {\n      index = (int)result_array[counter4 + -1] >> (0x18U - local_var_2 & 0xff);\n      temp4 = result_array[counter4 + -1] - (index << (0x18U - local_var_2 & 0xff));\n      i_var21 = (int)temp4 >> (0x17U - local_var_2 & 0xff);\n      result_array[counter4 + -1] = temp4;\n      result = result + index;\njoined_r0x0800a8b8:\n      if (0 < i_var21) {\n        result = result + 1;\n        if (counter4 < 1) {\n          bool_var = false;\n        }\n        else {\nLAB_0800a8c8:\n          if (result_array[0] == 0) {\n            bool_var = false;\n            if (counter4 != 1) {\n              pointer2 = result_array;\n              index = 1;\n              do {\n                pointer2 = pointer2 + 1;\n                if (*pointer2 != 0) {\n                  counter3 = index + 1;\n                  temp4 = *pointer2;\n                  goto LAB_0800a8e2;\n                }\n                index = index + 1;\n              } while (index != counter4);\n              bool_var = false;\n            }\n          }\n          else {\n            counter3 = 1;\n            index = 0;\n            temp4 = result_array[0];\nLAB_0800a8e2:\n            result_array[index] = 0x1000000 - temp4;\n            if (counter3 < counter4) {\n              temp4 = result_array[counter3];\n              pointer2 = result_array + counter3;\n              while( true ) {\n                pointer_var4 = pointer2 + 1;\n                *pointer2 = 0xffffff - temp4;\n                if (pointer_var4 == result_array + counter4) break;\n                temp4 = *pointer_var4;\n                pointer2 = pointer_var4;\n              }\n            }\n            bool_var = true;\n          }\n        }\n        if (0 < local_var_2) {\n          if (local_var_2 == 1) {\n            result_array[counter4 + -1] = result_array[counter4 + -1] & 0x7fffff;\n          }\n          else if (local_var_2 == 2) {\n            result_array[counter4 + -1] = result_array[counter4 + -1] & 0x3fffff;\n          }\n        }\n        if (i_var21 == 2) {\n          temp6 = __subdf3(0,0x3ff00000,temp2,temp1);\n          if (bool_var) {\n            temp5 = scalbn(0,0x3ff00000,local_var_2);\n            temp6 = __subdf3((int)temp6,(int)((ulonglong)temp6 >> 0x20),(int)temp5,\n                              (int)((ulonglong)temp5 >> 0x20));\n          }\n        }\n      }\n    }\nLAB_0800a7a4:\n    temp2 = (undefined4)((ulonglong)temp6 >> 0x20);\n    index = __aeabi_dcmpeq((int)temp6,temp2,0,0);\n    if (index == 0) {\n      temp6 = scalbn((int)temp6,temp2,-local_var_2);\n      temp1 = (undefined4)((ulonglong)temp6 >> 0x20);\n      temp2 = (undefined4)temp6;\n      counter2 = __aeabi_dcmpge(temp2,temp1,0,0x41700000);\n      if (counter2 == 0) {\n        temp4 = __aeabi_d2iz(temp2,temp1);\n        result_array[counter4] = temp4;\n        index = counter4;\n      }\n      else {\n        __muldf3(temp2,temp1,0,0x3e700000);\n        temp4 = __aeabi_d2iz();\n        temp6 = __aeabi_i2d();\n        temp6 = __muldf3((int)temp6,(int)((ulonglong)temp6 >> 0x20),0,0x41700000);\n        __subdf3(temp2,temp1,(int)temp6,(int)((ulonglong)temp6 >> 0x20));\n        temp_result = __aeabi_d2iz();\n        local_var_2 = local_var_2 + 0x18;\n        result_array[counter4] = temp_result;\n        result_array[counter4 + 1] = temp4;\n        index = counter4 + 1;\n      }\n      goto LAB_0800a9f6;\n    }\n    index = counter4 + -1;\n    if (var1 <= index) {\n      temp4 = 0;\n      pointer2 = result_array + counter4 + 0x3fffffff;\n      do {\n        pointer_var4 = pointer2 + -1;\n        temp4 = temp4 | *pointer2;\n        pointer2 = pointer_var4;\n      } while (pointer_var4 != local_array2[0]);\n      if (temp4 != 0) break;\n    }\n    if (result_array[var1 + -1] == 0) {\n      local_var_1 = 1;\n      pointer_array = local_array2 + var1;\n      do {\n        pointer2 = *pointer_array;\n        local_var_1 = local_var_1 + 1;\n        pointer_array = pointer_array + -1;\n      } while (pointer2 == (unsigned *)0x0);\n      local_var_1 = counter4 + local_var_1;\n    }\n    else {\n      local_var_1 = counter4 + 1;\n    }\n    i_var21 = counter4 + 1;\n    pointer_7 = (undefined4 *)(input6 + (i_var21 + local_var_3 + 0x3fffffff) * 4);\n    pointer_var5 = &stack_var1 + counter4 + input4;\n    local_array1 = &stack_var2 + i_var21;\n    do {\n      pointer_7 = pointer_7 + 1;\n      temp6 = __aeabi_i2d(*pointer_7);\n      *pointer_var5 = temp6;\n      pointer_6 = pointer_var5 + 1;\n      if (counter2 < 0) {\n        temp5 = 0;\n      }\n      else {\n        temp5 = 0;\n        pointer5 = pointer_var3;\n        while( true ) {\n          pointer_var5 = pointer_var5 + -1;\n          pointer1 = pointer5 + 2;\n          temp6 = __muldf3((int)temp6,(int)((ulonglong)temp6 >> 0x20),*pointer1,pointer5[3]);\n          temp5 = __aeabi_dadd((int)temp5,(int)((ulonglong)temp5 >> 0x20),(int)temp6,\n                                (int)((ulonglong)temp6 >> 0x20));\n          if (pointer1 == pointer_var3 + input4 * 2) break;\n          temp6 = *pointer_var5;\n          pointer5 = pointer1;\n        }\n      }\n      *local_array1 = temp5;\n      i_var21 = i_var21 + 1;\n      counter4 = local_var_1;\n      pointer_var5 = pointer_6;\n      local_array1 = local_array1 + 1;\n    } while (i_var21 <= local_var_1);\n  } while( true );\n  local_var_2 = local_var_2 + -0x18;\n  if (result_array[index] == 0) {\n    pointer2 = result_array + counter4 + 0x3ffffffe;\n    do {\n      temp4 = *pointer2;\n      index = index + -1;\n      local_var_2 = local_var_2 + -0x18;\n      pointer2 = pointer2 + -1;\n    } while (temp4 == 0);\n  }\nLAB_0800a9f6:\n  temp6 = scalbn(0,0x3ff00000,local_var_2);\n  if (index < 0) {\n    if (2 < input5) {\n      if (input5 == 3) {\n        temp6 = 0;\nLAB_0800abe4:\n        if (i_var21 == 0) {\n          *local_array2[1] = (undefined4)local_var_4;\n          *(int *)((int)local_array2[1] + 4) = local_var_4._4_4_;\n          *(long_long *)((int)local_array2[1] + 0x10) = temp6;\n          *(int *)((int)local_array2[1] + 8) = local_array4[0];\n          *(int *)((int)local_array2[1] + 0xc) = local_array4[1];\n          return result & 7;\n        }\n        *(int *)((int)local_array2[1] + 0x10) = (int)temp6;\n        *(int *)((int)local_array2[1] + 8) = local_array4[0];\n        *(int *)((int)local_array2[1] + 0x14) = (int)((ulonglong)temp6 >> 0x20) + -0x80000000;\n        *(int *)((int)local_array2[1] + 4) = local_var_4._4_4_ + -0x80000000;\n        *(int *)((int)local_array2[1] + 0xc) = local_array4[1] + -0x80000000;\n        *local_array2[1] = (undefined4)local_var_4;\n        return result & 7;\n      }\n      goto LAB_0800ab0e;\n    }\n    if (input5 < 1) {\n      if (input5 != 0) goto LAB_0800ab0e;\n      temp6 = 0;\nLAB_0800aafc:\n      counter2 = (int)((ulonglong)temp6 >> 0x20);\n      if (i_var21 != 0) {\n        counter2 = counter2 + -0x80000000;\n      }\n      *local_array2[1] = (int)temp6;\n      *(int *)((int)local_array2[1] + 4) = counter2;\nLAB_0800ab0e:\n      return result & 7;\n    }\n    temp6 = 0;\n  }\n  else {\n    pointer_6 = &stack_var2 + index;\n    pointer2 = result_array + index + 1;\n    pointer_var5 = &stack_var2 + index + 1;\n    do {\n      temp2 = (undefined4)((ulonglong)temp6 >> 0x20);\n      pointer2 = pointer2 + -1;\n      temp5 = __aeabi_i2d(*pointer2);\n      temp5 = __muldf3((int)temp5,(int)((ulonglong)temp5 >> 0x20),(int)temp6,temp2);\n      pointer_var5 = pointer_var5 + -1;\n      *pointer_var5 = temp5;\n      temp6 = __muldf3((int)temp6,temp2,0,0x3e700000);\n    } while (pointer2 != result_array);\n    counter2 = 0;\n    do {\n      if (var1 < 0) {\n        temp6 = 0;\n      }\n      else {\n        temp2 = 0x40000000;\n        temp1 = 0x3ff921fb;\n        temp6 = 0;\n        counter4 = 0;\n        pointer_var5 = pointer_6;\n        pointer_var3 = &DAT_0800c028;\n        while( true ) {\n          temp5 = __muldf3(*(undefined4 *)pointer_var5,*(undefined4 *)((int)pointer_var5 + 4),temp2,temp1);\n          temp6 = __aeabi_dadd((int)temp6,(int)((ulonglong)temp6 >> 0x20),(int)temp5,\n                                (int)((ulonglong)temp5 >> 0x20));\n          counter4 = counter4 + 1;\n          if ((var1 < counter4) || (counter2 < counter4)) break;\n          temp2 = *pointer_var3;\n          temp1 = pointer_var3[1];\n          pointer_var5 = pointer_var5 + 1;\n          pointer_var3 = pointer_var3 + 2;\n        }\n      }\n      bool_var = counter2 != index;\n      *(int *)(&local_var_4 + counter2) = (int)temp6;\n      *(int *)((int)&local_var_4 + (counter2 * 2 + 1) * 4) = (int)((ulonglong)temp6 >> 0x20);\n      pointer_6 = pointer_6 + -1;\n      counter2 = counter2 + 1;\n    } while (bool_var);\n    if (2 < input5) {\n      if (input5 == 3) {\n        if (index != 0) {\n          pointer_var5 = &local_var_4 + index;\n          temp6 = CONCAT44(*(undefined4 *)((int)&local_var_4 + (index * 2 + 1) * 4),\n                            *(undefined4 *)pointer_var5);\n          do {\n            temp1 = (undefined4)((ulonglong)temp6 >> 0x20);\n            temp2 = (undefined4)temp6;\n            temp3 = *(undefined4 *)(pointer_var5 + -1);\n            temp_var5 = *(undefined4 *)((int)pointer_var5 + -4);\n            temp6 = __aeabi_dadd(temp2,temp1,temp3,temp_var5);\n            temp5 = __subdf3(temp3,temp_var5,(int)temp6,(int)((ulonglong)temp6 >> 0x20));\n            temp5 = __aeabi_dadd((int)temp5,(int)((ulonglong)temp5 >> 0x20),temp2,temp1);\n            *pointer_var5 = temp5;\n            pointer_var5 = pointer_var5 + -1;\n            *pointer_var5 = temp6;\n          } while (&local_var_4 != pointer_var5);\n          if (1 < index) {\n            pointer_var5 = &local_var_4 + index;\n            temp6 = CONCAT44(*(undefined4 *)((int)&local_var_4 + (index * 2 + 1) * 4),\n                              *(undefined4 *)pointer_var5);\n            do {\n              temp1 = (undefined4)((ulonglong)temp6 >> 0x20);\n              temp2 = (undefined4)temp6;\n              temp3 = *(undefined4 *)(pointer_var5 + -1);\n              temp_var5 = *(undefined4 *)((int)pointer_var5 + -4);\n              temp6 = __aeabi_dadd(temp2,temp1,temp3,temp_var5);\n              temp5 = __subdf3(temp3,temp_var5,(int)temp6,(int)((ulonglong)temp6 >> 0x20));\n              temp5 = __aeabi_dadd((int)temp5,(int)((ulonglong)temp5 >> 0x20),temp2,temp1);\n              *pointer_var5 = temp5;\n              pointer_var5 = pointer_var5 + -1;\n              *pointer_var5 = temp6;\n            } while (&local_var_4 + 1 != pointer_var5);\n            temp6 = 0;\n            pointer_var5 = &local_var_4 + index + 1;\n            do {\n              pointer_6 = pointer_var5 + -1;\n              temp6 = __aeabi_dadd((int)temp6,(int)((ulonglong)temp6 >> 0x20),\n                                    *(undefined4 *)pointer_6,*(undefined4 *)((int)pointer_var5 + -4));\n              pointer_var5 = pointer_6;\n            } while (&local_var_4 + 2 != pointer_6);\n            goto LAB_0800abe4;\n          }\n        }\n        temp6 = 0;\n        goto LAB_0800abe4;\n      }\n      goto LAB_0800ab0e;\n    }\n    if (input5 < 1) {\n      if (input5 != 0) goto LAB_0800ab0e;\n      temp6 = 0;\n      pointer_var5 = &local_var_4 + index + 1;\n      do {\n        pointer_6 = pointer_var5 + -1;\n        temp6 = __aeabi_dadd((int)temp6,(int)((ulonglong)temp6 >> 0x20),*(undefined4 *)pointer_6,\n                              *(undefined4 *)((int)pointer_var5 + -4));\n        pointer_var5 = pointer_6;\n      } while (&local_var_4 != pointer_6);\n      goto LAB_0800aafc;\n    }\n    temp6 = 0;\n    pointer_var5 = &local_var_4 + index + 1;\n    do {\n      pointer_6 = pointer_var5 + -1;\n      temp6 = __aeabi_dadd((int)temp6,(int)((ulonglong)temp6 >> 0x20),*(undefined4 *)pointer_6,\n                            *(undefined4 *)((int)pointer_var5 + -4));\n      pointer_var5 = pointer_6;\n    } while (&local_var_4 != pointer_6);\n  }\n  counter2 = (int)((ulonglong)temp6 >> 0x20);\n  temp2 = (undefined4)temp6;\n  if (i_var21 == 0) {\n    *(long_long *)local_array2[1] = temp6;\n    temp6 = __subdf3((undefined4)local_var_4,local_var_4._4_4_,temp2,counter2);\n    if (index < 1) goto LAB_0800ad26;\nLAB_0800ad04:\n    counter2 = 1;\n    pointer_var5 = &local_var_4;\n    do {\n      temp6 = __aeabi_dadd((int)temp6,(int)((ulonglong)temp6 >> 0x20),\n                            *(undefined4 *)(pointer_var5 + 1),*(undefined4 *)((int)pointer_var5 + 0xc));\n      counter2 = counter2 + 1;\n      pointer_var5 = pointer_var5 + 1;\n    } while (counter2 <= index);\n    if (i_var21 == 0) goto LAB_0800ad26;\n  }\n  else {\n    *local_array2[1] = temp2;\n    *(int *)((int)local_array2[1] + 4) = counter2 + -0x80000000;\n    temp6 = __subdf3((undefined4)local_var_4,local_var_4._4_4_,temp2,counter2);\n    if (0 < index) goto LAB_0800ad04;\n  }\n  temp6 = CONCAT44((int)((ulonglong)temp6 >> 0x20) + -0x80000000,(int)temp6);\nLAB_0800ad26:\n  *(long_long *)((int)local_array2[1] + 8) = temp6;\n  return result & 7;\n}\n\n",
            "renaming": {
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "param_5": "input5",
                "param_6": "input6",
                "puVar1": "pointer1",
                "uVar2": "result",
                "uVar3": "temp_result",
                "iVar4": "index",
                "puVar5": "pointer2",
                "uVar6": "temp1",
                "ppuVar7": "pointer_array",
                "uVar8": "temp2",
                "iVar9": "counter2",
                "puVar10": "pointer_var3",
                "uVar11": "temp3",
                "uVar12": "temp4",
                "puVar13": "pointer_var4",
                "iVar14": "counter3",
                "iVar15": "var1",
                "iVar17": "counter4",
                "uVar20": "temp_var5",
                "puVar23": "pointer_7",
                "bVar24": "bool_var",
                "uVar25": "temp5",
                "uVar26": "temp6",
                "uVar27": "temp7",
                "local_284": "local_array1",
                "local_280": "local_var_1",
                "local_270": "local_var_2",
                "local_26c": "local_var_3",
                "local_258": "result_array",
                "uStack_208": "stack_var1",
                "local_168": "local_var_4",
                "local_160": "local_array4",
                "uStack_c8": "stack_var2",
                "puVar18": "pointer5",
                "iVar21": "i_var21",
                "local_260": "local_array2",
                "puVar22": "pointer_6",
                "FUN_0800a5a0": "calculate_result_0800a5a0",
                "puVar16": "pointer_var5",
                "puVar19": "ptr_8",
                "uVar19": "u_var19",
                "uVar22": "u_var22",
                "uVar23": "u_var23",
                "uint": "unsigned",
                "undefined8": "long_long",
                "puVar7": "temp_array_ptr"
            },
            "calling": [
                "FUN_08009d78"
            ],
            "called": [
                "FUN_080082d0",
                "FUN_0800856c",
                "FUN_08008b4c",
                "FUN_08008ba0",
                "FUN_08008b10",
                "FUN_080094c0",
                "FUN_08008640",
                "FUN_080082d4",
                "FUN_0800b2e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "param_1": {
                    "3": "input_value1",
                    "4": "input_param",
                    "1": "input_param_1",
                    "2": "input_param1",
                    "7": "input1"
                },
                "param_2": {
                    "1": "input_data",
                    "6": "input2",
                    "3": "input_array",
                    "2": "output",
                    "4": "input_2"
                },
                "param_3": {
                    "4": "input_3",
                    "1": "start",
                    "2": "size",
                    "6": "input3",
                    "3": "input_value3"
                },
                "param_4": {
                    "2": "input_param4",
                    "1": "length",
                    "4": "param_4",
                    "3": "input_value4",
                    "6": "input4"
                },
                "param_5": {
                    "1": "value2",
                    "2": "param5",
                    "3": "input_value5",
                    "4": "param_5",
                    "6": "input5"
                },
                "param_6": {
                    "1": "multiplier",
                    "2": "param6",
                    "3": "input_value6",
                    "4": "input_6",
                    "6": "input6"
                },
                "puVar1": {
                    "1": "temp_pointer",
                    "5": "pointer_var1",
                    "6": "pointer1",
                    "3": "pointer_1",
                    "2": "ptr_var1"
                },
                "uVar2": {
                    "1": "sum",
                    "2": "result1",
                    "21": "result"
                },
                "uVar3": {
                    "12": "temp_result",
                    "1": "temp_var1",
                    "4": "temp",
                    "2": "value",
                    "3": "result2"
                },
                "iVar4": {
                    "1": "counter_var",
                    "3": "index1",
                    "7": "counter",
                    "2": "index_var",
                    "8": "index"
                },
                "puVar5": {
                    "6": "pointer2",
                    "1": "temp_pointer2",
                    "3": "pointer_2",
                    "2": "ptr_var2",
                    "5": "pointer_var2"
                },
                "uVar6": {
                    "1": "temp10",
                    "2": "temp_var2",
                    "7": "temp1",
                    "4": "temp_var1"
                },
                "ppuVar7": {
                    "1": "pointer_to_pointer_1",
                    "3": "pointer_array",
                    "2": "ptr_array"
                },
                "uVar8": {
                    "1": "temp_result3",
                    "2": "temp_var3",
                    "5": "temp_var2",
                    "9": "temp2"
                },
                "iVar9": {
                    "1": "index_2",
                    "2": "counter",
                    "6": "counter2",
                    "3": "index2"
                },
                "puVar10": {
                    "2": "coefficients_ptr",
                    "1": "pointer1",
                    "3": "pointer_3",
                    "4": "pointer3",
                    "5": "pointer_var3"
                },
                "uVar11": {
                    "4": "temp_var3",
                    "1": "tmp3",
                    "8": "temp3",
                    "2": "temp_var4"
                },
                "uVar12": {
                    "1": "value2",
                    "2": "temp_var5",
                    "4": "temp_var4",
                    "7": "temp4"
                },
                "puVar13": {
                    "4": "ptr4",
                    "1": "shifted_value_ptr",
                    "2": "pointer5",
                    "5": "pointer_var4",
                    "3": "pointer_4"
                },
                "iVar14": {
                    "1": "counter",
                    "3": "index3",
                    "6": "counter3",
                    "2": "loop_counter_3"
                },
                "iVar15": {
                    "1": "variable1",
                    "2": "var_15",
                    "4": "var1"
                },
                "iVar17": {
                    "2": "temp_counter3",
                    "1": "var17"
                },
                "iVar18": {
                    "1": "i_var18"
                },
                "uVar20": {
                    "1": "temp4",
                    "2": "temp_var7"
                },
                "uVar21": {
                    "1": "temp_var6"
                },
                "iVar22": {
                    "1": "counter6"
                },
                "puVar23": {
                    "1": "ptr_var6",
                    "2": "pointer_var7"
                },
                "bVar24": {
                    "4": "flag",
                    "1": "is_condition_true",
                    "5": "bool_var"
                },
                "uVar25": {
                    "3": "temp_value",
                    "1": "tmp9",
                    "2": "temp_var6",
                    "6": "temp5"
                },
                "uVar26": {
                    "1": "temp9",
                    "2": "temp_result1",
                    "5": "temp6"
                },
                "uVar27": {
                    "1": "temp_var_10",
                    "2": "temp_var8",
                    "5": "temp7"
                },
                "local_284": {
                    "1": "array1",
                    "4": "local_array1",
                    "2": "result_array",
                    "3": "temp_array"
                },
                "local_280": {
                    "1": "temp_counter5",
                    "3": "local_var_1",
                    "2": "temp_count"
                },
                "local_270": {
                    "1": "offset",
                    "2": "local_value2",
                    "3": "local_var_2"
                },
                "local_26c": {
                    "1": "temp_value3",
                    "2": "local_value3",
                    "3": "local_var_3"
                },
                "local_258": {
                    "1": "array_var2",
                    "4": "local_array3",
                    "5": "local_array2",
                    "2": "array2",
                    "6": "result_array"
                },
                "uStack_208": {
                    "2": "temp_stack1",
                    "1": "variable2",
                    "3": "stack_var1"
                },
                "local_168": {
                    "1": "var13",
                    "2": "result2"
                },
                "local_160": {
                    "1": "array_var3",
                    "2": "array3",
                    "4": "local_array4",
                    "3": "local_array3"
                },
                "uStack_c8": {
                    "1": "stack_var_2",
                    "2": "temp_value2",
                    "3": "stack_var2"
                },
                "puVar18": {
                    "1": "ptr_7",
                    "2": "pointer_var5"
                },
                "iVar21": {
                    "2": "temp_counter4",
                    "1": "var_3"
                },
                "local_260": {
                    "1": "local_var_array1",
                    "3": "local_array",
                    "4": "local_array2",
                    "2": "array1"
                },
                "puVar22": {
                    "1": "pointer_var3",
                    "2": "pointer_var6"
                },
                "FUN_0800a5a0": {
                    "1": "calculate_function",
                    "3": "calculate_result"
                },
                "puVar16": {
                    "1": "ptr_6",
                    "2": "pointer_var5"
                },
                "puVar19": {
                    "1": "pointer_var2"
                },
                "uVar19": {
                    "1": "u_var19"
                },
                "iVar20": {
                    "1": "i_var20"
                },
                "uVar22": {
                    "1": "u_var22"
                },
                "uVar23": {
                    "1": "u_var23"
                },
                "uint": {
                    "1": "unsigned"
                },
                "undefined8": {
                    "1": "long_long"
                },
                "puVar17": {
                    "1": "data_ptr"
                },
                "puVar7": {
                    "1": "temp_array_ptr"
                },
                "local_268": {
                    "1": "var1"
                },
                "local_264": {
                    "1": "var2"
                },
                "local_184": {
                    "1": "converting_var1"
                },
                "local_180": {
                    "1": "converting_var2"
                },
                "local_176": {
                    "1": "floored_var"
                },
                "local_116": {
                    "1": "sczb_param"
                },
                "local_c8": {
                    "1": "temp_stack_var1"
                },
                "local_b8": {
                    "1": "temp_stack_var2"
                },
                "local_ac": {
                    "1": "temp_stack_var3"
                },
                "local_108": {
                    "1": "scaling_var"
                },
                "local_104": {
                    "1": "power_var"
                },
                "local_100": {
                    "1": "converting_var3"
                },
                "local_9c": {
                    "1": "converting_var4"
                },
                "local_98": {
                    "1": "converting_var5"
                },
                "local_94": {
                    "1": "converting_var6"
                },
                "local_10": {
                    "1": "temp_stack_var4"
                },
                "local_80": {
                    "1": "temp_stack_var5"
                },
                "local_20": {
                    "1": "temp_stack_var6"
                },
                "iVar99": {
                    "1": "counter4"
                },
                "puVar100": {
                    "1": "pointer_var7"
                },
                "uVar101": {
                    "1": "temp_var9"
                },
                "uVar102": {
                    "1": "temp_var10"
                },
                "uvar8": {
                    "1": "temp7"
                }
            }
        },
        "FUN_0800adf0": {
            "entrypoint": "0x0800adf0",
            "current_name": "calculate_result_0800adf0",
            "code": "\nundefined4\ncalculate_result_0800adf0(undefined4 input_value,uint multiplier,undefined4 operand1,undefined4 operand2,int flag)\n\n{\n  int conversion_result;\n  undefined4 result_low;\n  undefined4 result_high;\n  undefined4 temp_low;\n  undefined4 temp_high;\n  undefined4 temp;\n  undefined8 temp_result_low;\n  undefined8 temp_result2;\n  \n  if (((multiplier & 0x7fffffff) < 0x3e400000) && (conversion_result = convert_double_to_int(), conversion_result == 0)) {\n    return input_value;\n  }\n  temp_result_low = multiply_double(input_value,multiplier,input_value);\n  temp_low = (undefined4)((ulonglong)temp_result_low >> 0x20);\n  result_high = (undefined4)temp_result_low;\n  temp_result_low = multiply_double(input_value,multiplier,result_high,temp_low);\n  temp_high = (undefined4)((ulonglong)temp_result_low >> 0x20);\n  result_low = (undefined4)temp_result_low;\n  temp_result_low = multiply_double(u_var3,u_var4,0x5acfd57c,0x3de5d93a);\n  temp_result_low = subtract_double((int)temp_result_low,(int)((ulonglong)temp_result_low >> 0x20),0x8a2b9ceb,0x3e5ae5e6);\n  temp_result_low = multiply_double((int)temp_result_low,(int)((ulonglong)temp_result_low >> 0x20),result_high,temp_low);\n  temp_result_low = add_double((int)temp_result_low,(int)((ulonglong)temp_result_low >> 0x20),0x57b1fe7d,0x3ec71de3);\n  temp_result_low = multiply_double((int)temp_result_low,(int)((ulonglong)temp_result_low >> 0x20),result_high,temp_low);\n  temp_result_low = subtract_double((int)temp_result_low,(int)((ulonglong)temp_result_low >> 0x20),0x19c161d5,0x3f2a01a0);\n  temp_result_low = multiply_double((int)temp_result_low,(int)((ulonglong)temp_result_low >> 0x20),result_high,temp_low);\n  temp_result_low = add_double((int)temp_result_low,(int)((ulonglong)temp_result_low >> 0x20),0x1110f8a6,0x3f811111);\n  temp = (undefined4)((ulonglong)temp_result_low >> 0x20);\n  if (flag != 0) {\n    temp_result2 = multiply_double(param_3,param_4,0,0x3fe00000);\n    temp_result_low = multiply_double(u_var2,u_var5,(int)u_var7,u_var6);\n    temp_result_low = subtract_double((int)temp_result2,(int)((ulonglong)temp_result2 >> 0x20),(int)temp_result_low,\n                     (int)((ulonglong)temp_result_low >> 0x20));\n    temp_result_low = multiply_double((int)temp_result_low,(int)((ulonglong)temp_result_low >> 0x20),result_high,temp_low);\n    temp_result_low = subtract_double((int)temp_result_low,(int)((ulonglong)temp_result_low >> 0x20),operand1,operand2);\n    temp_result2 = multiply_double(result_low,temp_high,0x55555549,0x3fc55555);\n    temp_result_low = add_double((int)temp_result_low,(int)((ulonglong)temp_result_low >> 0x20),(int)temp_result2,\n                         (int)((ulonglong)temp_result2 >> 0x20));\n    result_high = subtract_double(input_value,multiplier,(int)temp_result_low,(int)((ulonglong)temp_result_low >> 0x20));\n    return result_high;\n  }\n  temp_result_low = multiply_double(result_high,temp_low,(int)temp_result_low,temp);\n  temp_result_low = subtract_double((int)temp_result_low,(int)((ulonglong)temp_result_low >> 0x20),0x55555549,0x3fc55555);\n  temp_result_low = multiply_double((int)temp_result_low,(int)((ulonglong)temp_result_low >> 0x20),result_low,temp_high);\n  result_high = add_double((int)temp_result_low,(int)((ulonglong)temp_result_low >> 0x20),input_value,multiplier);\n  return result_high;\n}\n\n",
            "renaming": {
                "FUN_0800adf0": "calculate_result_0800adf0",
                "param_1": "input_value",
                "param_2": "multiplier",
                "param_3": "operand1",
                "param_4": "operand2",
                "param_5": "flag",
                "iVar1": "conversion_result",
                "uVar2": "result_low",
                "uVar3": "result_high",
                "uVar4": "temp_low",
                "uVar5": "temp_high",
                "uVar6": "temp",
                "uVar7": "temp_result_low",
                "uVar8": "temp_result2",
                "__muldf3": "multiply_double",
                "__subdf3": "subtract_double",
                "__aeabi_dadd": "add_double",
                "__aeabi_d2iz": "convert_double_to_int",
                "__muldf3(uVar3,uVar4,0x5acfd57c,0x3de5d93a)": "multiply_double(u_var3,u_var4,0x5acfd57c,0x3de5d93a)",
                "__muldf3(param_3,param_4,0,0x3fe00000)": "multiply_double(param_3,param_4,0,0x3fe00000)",
                "__muldf3(uVar2,uVar5,(int)uVar7,uVar6)": "multiply_double(u_var2,u_var5,(int)u_var7,u_var6)"
            },
            "calling": [
                "FUN_08009410",
                "FUN_080096e8"
            ],
            "called": [
                "FUN_080082d0",
                "FUN_08008ba0",
                "FUN_08008640",
                "FUN_080082d4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800adf0": {
                    "1": "calculate_something",
                    "2": "calculate_square_root",
                    "23": "calculate_result"
                },
                "param_1": {
                    "8": "input",
                    "1": "input_param",
                    "2": "input_num",
                    "13": "input_value"
                },
                "param_2": {
                    "1": "input_modifier",
                    "2": "input_param",
                    "4": "value",
                    "12": "multiplier"
                },
                "param_3": {
                    "1": "extra_param_1",
                    "3": "param_3",
                    "2": "param_x",
                    "4": "operand1"
                },
                "param_4": {
                    "2": "param_y",
                    "3": "constant2",
                    "1": "subs_param_2",
                    "4": "operand2"
                },
                "param_5": {
                    "8": "flag",
                    "1": "is_extra_calculation",
                    "3": "is_negative",
                    "2": "is_condition_true",
                    "4": "is_reversed"
                },
                "iVar1": {
                    "1": "converted_input",
                    "3": "result",
                    "2": "integer_value",
                    "10": "conversion_result"
                },
                "uVar2": {
                    "12": "result_low",
                    "1": "mul_result1_lower",
                    "2": "result_lo"
                },
                "uVar3": {
                    "1": "result_upper",
                    "2": "result_hi",
                    "12": "result_high"
                },
                "uVar4": {
                    "1": "result_upper_2",
                    "2": "temp3",
                    "9": "temp_low"
                },
                "uVar5": {
                    "1": "result_2",
                    "2": "temp4",
                    "9": "temp_high"
                },
                "uVar6": {
                    "1": "result3_high",
                    "2": "temp_low2",
                    "5": "temp"
                },
                "uVar7": {
                    "3": "temp_result",
                    "1": "add_result_high",
                    "4": "temp_result_low",
                    "2": "temp_high"
                },
                "uVar8": {
                    "1": "temp2_low",
                    "4": "temp_result2",
                    "3": "temp_result_high"
                },
                "uVar9": {
                    "1": "temp_result3"
                },
                "FUN_080082d0": {
                    "1": "mul_unsigned"
                },
                "FUN_08008ba0": {
                    "1": "subtract_32bit",
                    "2": "sub_unsigned"
                },
                "FUN_08008640": {
                    "1": "multiply_64bit_with_half_ulp"
                },
                "FUN_080082d4": {
                    "1": "sub_unsigned_with_params"
                },
                "__muldf3": {
                    "3": "multiply_double"
                },
                "__subdf3": {
                    "3": "subtract_double"
                },
                "__aeabi_dadd": {
                    "3": "add_double"
                },
                "__aeabi_d2iz": {
                    "1": "convert_double_to_integer",
                    "2": "convert_double_to_int"
                },
                "__subdf3(param_1,param_2)": {
                    "1": "subtract_double"
                },
                "__muldf3(uVar3,uVar4,0x5acfd57c,0x3de5d93a)": {
                    "1": "multiply_double(u_var3,u_var4,0x5acfd57c,0x3de5d93a)"
                },
                "__muldf3(param_3,param_4,0,0x3fe00000)": {
                    "1": "multiply_double(param_3,param_4,0,0x3fe00000)"
                },
                "__muldf3(uVar2,uVar5,(int)uVar7,uVar6)": {
                    "1": "multiply_double(u_var2,u_var5,(int)u_var7,u_var6)"
                },
                "temp_var1": {
                    "1": "temp_var_low"
                },
                "temp_var2": {
                    "1": "temp_var_high"
                },
                "uVar10": {
                    "1": "tmp5"
                }
            }
        },
        "FUN_0800af78": {
            "entrypoint": "0x0800af78",
            "current_name": "calculate_result_0800af78",
            "code": "\nint calculate_result_0800af78(int input1,uint input2)\n\n{\n  undefined4 result1;\n  undefined4 result2;\n  undefined4 result3;\n  undefined4 result4;\n  int result;\n  undefined4 temp1;\n  uint temp2;\n  undefined8 temp3;\n  undefined8 temp4;\n  undefined4 local_var;\n  \n  temp3 = CONCAT44(input2,input1);\n  temp2 = input2 & 0x7fffffff;\n  if (temp2 < 0x44100000) {\n    if (temp2 < 0x3fdc0000) {\n      if (temp2 < 0x3e200000) {\n        temp4 = add_double(input1,input2,0x8800759c,0x7e37e43c);\n        result = compare_double((int)temp4,(int)((ulonglong)temp4 >> 0x20),0,0x3ff00000);\n        if (result != 0) {\n          return input1;\n        }\n      }\n      result = -1;\n    }\n    else {\n      temp3 = absolute_value();\n      result4 = (undefined4)((ulonglong)temp3 >> 0x20);\n      result1 = (undefined4)temp3;\n      if (temp2 < 0x3ff30000) {\n        if (temp2 < 0x3fe60000) {\n          temp3 = add_double(result1,result4,result1,result4);\n          temp3 = subtract_double((int)temp3,(int)((ulonglong)temp3 >> 0x20),0,0x3ff00000);\n          temp4 = add_double(result1,result4,0,0x40000000);\n          temp3 = divide_double((int)temp3,(int)((ulonglong)temp3 >> 0x20),(int)temp4,\n                           (int)((ulonglong)temp4 >> 0x20));\n          result = 0;\n        }\n        else {\n          temp3 = subtract_double(result1,result4,0,0x3ff00000);\n          temp4 = add_double(result1,result4,0,0x3ff00000);\n          temp3 = divide_double((int)temp3,(int)((ulonglong)temp3 >> 0x20),(int)temp4,\n                           (int)((ulonglong)temp4 >> 0x20));\n          result = 1;\n        }\n      }\n      else if (temp2 < 0x40038000) {\n        temp3 = subtract_double(result1,result4,0,0x3ff80000);\n        temp4 = multiply_double(result1,result4,0,0x3ff80000);\n        temp4 = add_double((int)temp4,(int)((ulonglong)temp4 >> 0x20),0,0x3ff00000);\n        temp3 = divide_double((int)temp3,(int)((ulonglong)temp3 >> 0x20),(int)temp4,\n                         (int)((ulonglong)temp4 >> 0x20));\n        result = 2;\n      }\n      else {\n        temp3 = divide_double(0,0xbff00000,result1,result4);\n        result = 3;\n      }\n    }\n    local_var = (undefined4)((ulonglong)temp3 >> 0x20);\n    temp1 = (undefined4)temp3;\n    temp3 = multiply_double(temp1,local_var,temp1);\n    result2 = (undefined4)((ulonglong)temp3 >> 0x20);\n    result1 = (undefined4)temp3;\n    temp3 = multiply_double(result1,result2,result1,result2);\n    result3 = (undefined4)((ulonglong)temp3 >> 0x20);\n    result4 = (undefined4)temp3;\n    temp3 = multiply_double(result4,result3,0xe322da11,0x3f90ad3a);\n    temp3 = add_double((int)temp3,(int)((ulonglong)temp3 >> 0x20),0x24760deb,0x3fa97b4b);\n    temp3 = multiply_double((int)temp3,(int)((ulonglong)temp3 >> 0x20),result4,result3);\n    temp3 = add_double((int)temp3,(int)((ulonglong)temp3 >> 0x20),0xa0d03d51,0x3fb10d66);\n    temp3 = multiply_double((int)temp3,(int)((ulonglong)temp3 >> 0x20),result4,result3);\n    temp3 = add_double((int)temp3,(int)((ulonglong)temp3 >> 0x20),0xc54c206e,0x3fb745cd);\n    temp3 = multiply_double((int)temp3,(int)((ulonglong)temp3 >> 0x20),result4,result3);\n    temp3 = add_double((int)temp3,(int)((ulonglong)temp3 >> 0x20),0x920083ff,0x3fc24924);\n    temp3 = multiply_double((int)temp3,(int)((ulonglong)temp3 >> 0x20),result4,result3);\n    temp3 = add_double((int)temp3,(int)((ulonglong)temp3 >> 0x20),0x5555550d,0x3fd55555);\n    temp3 = multiply_double((int)temp3,(int)((ulonglong)temp3 >> 0x20),result1,result2);\n    result1 = (undefined4)((ulonglong)temp3 >> 0x20);\n    temp4 = multiply_double(result4,result3,0x2c6a6c2f,0xbfa2b444);\n    temp4 = subtract_double((int)temp4,(int)((ulonglong)temp4 >> 0x20),0x52defd9a,0x3fadde2d);\n    temp4 = multiply_double((int)temp4,(int)((ulonglong)temp4 >> 0x20),result4,result3);\n    temp4 = subtract_double((int)temp4,(int)((ulonglong)temp4 >> 0x20),0xaf749a6d,0x3fb3b0f2);\n    temp4 = multiply_double((int)temp4,(int)((ulonglong)temp4 >> 0x20),result4,result3);\n    temp4 = subtract_double((int)temp4,(int)((ulonglong)temp4 >> 0x20),0xfe231671,0x3fbc71c6);\n    temp4 = multiply_double((int)temp4,(int)((ulonglong)temp4 >> 0x20),result4,result3);\n    temp4 = subtract_double((int)temp4,(int)((ulonglong)temp4 >> 0x20),0x9998ebc4,0x3fc99999);\n    temp4 = multiply_double((int)temp4,(int)((ulonglong)temp4 >> 0x20),result4,result3);\n    result4 = (undefined4)((ulonglong)temp4 >> 0x20);\n    if (result == -1) {\n      temp3 = add_double((int)temp3,result1,(int)temp4,result4);\n      temp3 = multiply_double((int)temp3,(int)((ulonglong)temp3 >> 0x20),temp1,local_var);\n      result = subtract_double(temp1,local_var,(int)temp3,(int)((ulonglong)temp3 >> 0x20));\n      return result;\n    }\n    temp3 = add_double((int)temp3,result1,(int)temp4,result4);\n    temp3 = multiply_double((int)temp3,(int)((ulonglong)temp3 >> 0x20),temp1,local_var);\n    temp3 = subtract_double((int)temp3,(int)((ulonglong)temp3 >> 0x20),\n                     *(undefined4 *)(&UNK_0800c090 + result * 8),\n                     *(undefined4 *)(&UNK_0800c094 + result * 8));\n    temp3 = subtract_double((int)temp3,(int)((ulonglong)temp3 >> 0x20),temp1,local_var);\n    result = subtract_double(*(undefined4 *)(&UNK_0800c070 + result * 8),\n                     *(undefined4 *)(&UNK_0800c074 + result * 8),(int)temp3,\n                     (int)((ulonglong)temp3 >> 0x20));\n    if ((int)input2 < 0) {\n      return result;\n    }\n  }\n  else {\n    if ((0x7ff00000 < temp2) || ((temp2 == 0x7ff00000 && (input1 != 0)))) {\n      result = add_double(input1,input2,input1);\n      return result;\n    }\n    result = 0x54442d18;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_0800af78": "calculate_result_0800af78",
                "param_1": "input1",
                "param_2": "input2",
                "uVar1": "result1",
                "uVar2": "result2",
                "uVar3": "result3",
                "uVar4": "result4",
                "iVar5": "result",
                "uVar6": "temp1",
                "uVar7": "temp2",
                "uVar8": "temp3",
                "uVar9": "temp4",
                "local_2c": "local_var",
                "__aeabi_dadd": "add_double",
                "__aeabi_dcmpgt": "compare_double",
                "fabs": "absolute_value",
                "__subdf3": "subtract_double",
                "__divdf3": "divide_double",
                "__muldf3": "multiply_double"
            },
            "calling": [
                "FUN_08009990"
            ],
            "called": [
                "FUN_080082d0",
                "FUN_08008b60",
                "FUN_08008894",
                "FUN_0800b2cc",
                "FUN_08008640",
                "FUN_080082d4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800af78": {
                    "4": "calculate_square_root",
                    "1": "calculate_modified_value",
                    "2": "calculate_function",
                    "3": "calculate_new_value",
                    "10": "calculate_result"
                },
                "param_1": {
                    "1": "input_param",
                    "20": "input1",
                    "6": "input_value1"
                },
                "param_2": {
                    "20": "input2",
                    "6": "input_value2",
                    "1": "value2",
                    "2": "flags"
                },
                "uVar1": {
                    "1": "result_var1",
                    "5": "temp1",
                    "15": "result1",
                    "2": "temp_var1"
                },
                "uVar2": {
                    "1": "var2",
                    "2": "temp_var2",
                    "15": "result2",
                    "5": "temp2"
                },
                "uVar3": {
                    "1": "temp_8",
                    "2": "temp_var3",
                    "15": "result3",
                    "5": "temp3"
                },
                "uVar4": {
                    "1": "value4",
                    "15": "result4",
                    "2": "temp_var4",
                    "5": "temp4"
                },
                "iVar5": {
                    "3": "output",
                    "1": "index",
                    "8": "comparison_result",
                    "12": "result"
                },
                "uVar6": {
                    "5": "temp5",
                    "1": "intermediate1",
                    "2": "temp_var6",
                    "10": "temp1"
                },
                "uVar7": {
                    "1": "temp2_low",
                    "4": "temp6",
                    "2": "abs_input2",
                    "10": "temp2"
                },
                "uVar8": {
                    "1": "result_var1",
                    "4": "temp1",
                    "9": "temp3"
                },
                "uVar9": {
                    "1": "intermediate2",
                    "4": "temp2",
                    "2": "temp_result2",
                    "9": "temp4"
                },
                "local_2c": {
                    "1": "temp_var_local2c",
                    "5": "local_variable",
                    "13": "local_var",
                    "4": "temp9"
                },
                "__aeabi_dadd": {
                    "1": "add_double"
                },
                "__aeabi_dcmpgt": {
                    "1": "compare_double"
                },
                "fabs": {
                    "1": "absolute_value"
                },
                "__subdf3": {
                    "1": "subtract_double"
                },
                "__divdf3": {
                    "1": "divide_double"
                },
                "__muldf3": {
                    "1": "multiply_double"
                },
                "__aeabi_dsub": {
                    "1": "subtract_double2"
                },
                "__aeabi_dmul": {
                    "1": "multiply_double2"
                },
                "__aeabi_ui2f": {
                    "1": "convert_u_int_to_float"
                },
                "__aeabi_fadd": {
                    "1": "add_float"
                },
                "__aeabi_fcmpgt": {
                    "1": "compare_float"
                },
                "__aeabi_fsub": {
                    "1": "subtract_float"
                },
                "__aeabi_fmul": {
                    "1": "multiply_float"
                }
            }
        },
        "FUN_0800b2cc": {
            "entrypoint": "0x0800b2cc",
            "current_name": "FUNC_0800b2cc",
            "code": "\nvoid FUNC_0800b2cc(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800b2cc": "FUNC_0800b2cc"
            },
            "calling": [
                "FUN_08009d78",
                "FUN_0800af78",
                "FUN_08009990"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800b2d4": {
            "entrypoint": "0x0800b2d4",
            "current_name": "get_most_significant_bit_0800b2d4",
            "code": "\nuint get_most_significant_bit_0800b2d4(undefined4 input_value,uint input_value)\n\n{\n  return (input_value | 0x80000000) + 0x100000 >> 0x1f;\n}\n\n",
            "renaming": {
                "FUN_0800b2d4": "get_most_significant_bit_0800b2d4",
                "param_1": "input_value",
                "param_2": "input_value"
            },
            "calling": [
                "FUN_0800981c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800b2d4": {
                    "1": "set_bit_and_shift",
                    "2": "calculate_offset"
                },
                "param_1": {
                    "2": "unused_param",
                    "1": "bit_mask",
                    "6": "input_value",
                    "3": "input_flag",
                    "4": "value"
                },
                "param_2": {
                    "2": "bit_mask",
                    "1": "flag_value",
                    "9": "input_value",
                    "4": "value",
                    "3": "number"
                },
                "param_3": {
                    "1": "shifted_bit"
                },
                "param_4": {
                    "1": "bitwise_or_result"
                },
                "param_5": {
                    "1": "addition_result"
                },
                "param_6": {
                    "1": "result"
                },
                "var_1": {
                    "1": "fixed_bit"
                },
                "var_2": {
                    "1": "shifted"
                },
                "var_3": {
                    "1": "result"
                },
                "PTR_": {
                    "1": "ptr_"
                },
                "DAT_": {
                    "1": "dat_"
                }
            }
        },
        "FUN_0800b2e0": {
            "entrypoint": "0x0800b2e0",
            "current_name": "initialize_0800b2e0",
            "code": "\nvoid initialize_0800b2e0(void)\n\n{\n  success 0;\n}\n\n",
            "renaming": {
                "FUN_0800b2e0": "initialize_0800b2e0",
                "return": "success",
                "undefined4": "void"
            },
            "calling": [
                "FUN_080098d0",
                "FUN_0800981c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800b2e0": {
                    "1": "get_description",
                    "17": "initialize",
                    "5": "initialize_application",
                    "2": "initialize_program"
                },
                "return": {
                    "1": "success"
                },
                "undefined4": {
                    "15": "void",
                    "1": "int"
                },
                "return_value": {
                    "1": "result"
                },
                "<original_variable_name_1>": {
                    "1": "<new_variable_name_1>"
                },
                "<original_variable_name_2>": {
                    "1": "<new_variable_name_2>"
                },
                "<original_variable_name_n>": {
                    "1": "<new_variable_name_n>"
                },
                "<original_function_name>": {
                    "1": "initialize_application"
                },
                "result": {
                    "1": "return_value"
                },
                "return value": {
                    "1": "status"
                },
                "original_variable_name_1": {
                    "2": "counter"
                },
                "original_variable_name_2": {
                    "2": "result"
                },
                "original_variable_name_n": {
                    "1": "temp"
                }
            }
        },
        "FUN_0800b2e8": {
            "entrypoint": "0x0800b2e8",
            "current_name": "calculate_result_0800b2e8",
            "code": "\nuint calculate_result_0800b2e8(uint input1,uint input2,int shift_amount,undefined4 constant)\n\n{\n  uint shifted_value;\n  int sum;\n  uint upper_bits;\n  undefined8 concatenated_inputs;\n  \n  concatenated_inputs = concatenate(input2,input1);\n  shifted_value = (input2 << 1) >> 0x15;\n  if (shifted_value == 0) {\n    if ((input1 | input2 & 0x7fffffff) == 0) {\n      return input1;\n    }\n    concatenated_inputs = multiply(input1,input2,0,0x43500000);\n    if (shift_amount < -50000) goto LAB_0800b34a;\n    shifted_value = ((uint)((int)((ulonglong)concatenated_inputs >> 0x20) << 1) >> 0x15) - 0x36;\n  }\n  else if (shifted_value == 0x7ff) {\n    shifted_value = __aeabi_dadd(input1,input2,input1,input2,constant);\n    return shifted_value;\n  }\n  upper_bits = (uint)((ulonglong)concatenated_inputs >> 0x20);\n  sum = shifted_value + shift_amount;\n  if (sum < 0x7ff) {\n    if (0 < sum) {\n      return (uint)concatenated_inputs;\n    }\n    if (sum + 0x35 < 0 == signed_overflow_check(sum,0x35)) {\n      shifted_value = multiply((uint)concatenated_inputs,upper_bits & 0x800fffff | (sum + 0x36) * 0x100000,0,0x3c900000);\n      return shifted_value;\n    }\n    if (shift_amount < 0xc351) {\n      concatenated_inputs = concatenate(upper_bits & 0x80000000 | 0x1a56e1f,0xc2f8f359);\nLAB_0800b34a:\n      shifted_value = multiply((int)concatenated_inputs,(int)((ulonglong)concatenated_inputs >> 0x20),0xc2f8f359,0x1a56e1f);\n      return shifted_value;\n    }\n  }\n  shifted_value = multiply(0x8800759c,upper_bits & 0x80000000 | 0x7e37e43c,0x8800759c,0x7e37e43c);\n  return shifted_value;\n}\n\n",
            "renaming": {
                "FUN_0800b2e8": "calculate_result_0800b2e8",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "shift_amount",
                "param_4": "constant",
                "uVar1": "shifted_value",
                "iVar2": "sum",
                "uVar3": "upper_bits",
                "uVar4": "concatenated_inputs",
                "__muldf3": "multiply",
                "SCARRY4": "signed_overflow_check",
                "CONCAT44": "concatenate"
            },
            "calling": [
                "FUN_0800a5a0"
            ],
            "called": [
                "FUN_08008640",
                "FUN_080082d4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800b2e8": {
                    "2": "calculate_value",
                    "1": "calculate_floating_point",
                    "23": "calculate_result"
                },
                "param_1": {
                    "6": "input_1",
                    "2": "input_value1",
                    "3": "input_param1",
                    "1": "input_a",
                    "9": "input1"
                },
                "param_2": {
                    "9": "input2",
                    "3": "input_param2",
                    "2": "value_2",
                    "1": "input_param_2",
                    "6": "input_2"
                },
                "param_3": {
                    "2": "input_param3",
                    "1": "param",
                    "4": "exponent",
                    "11": "shift_amount",
                    "3": "offset"
                },
                "param_4": {
                    "2": "input_param4",
                    "1": "unknown_param",
                    "3": "unused_param",
                    "9": "constant"
                },
                "uVar1": {
                    "1": "shifted_parameter",
                    "9": "shifted_value",
                    "7": "shifted_input2",
                    "2": "shifted_input_2",
                    "3": "shifted_input"
                },
                "iVar2": {
                    "1": "modified_shift",
                    "16": "sum",
                    "4": "result"
                },
                "uVar3": {
                    "1": "concatenated",
                    "5": "high_bits",
                    "8": "upper_bits",
                    "2": "upper_part"
                },
                "uVar4": {
                    "1": "combined_params",
                    "7": "concatenated_inputs",
                    "2": "concatenated_value",
                    "3": "combined_inputs",
                    "4": "concatenated_values"
                },
                "__muldf3": {
                    "3": "multiply",
                    "1": "multiply_double_floats"
                },
                "__aeabi_dadd": {
                    "1": "add_double_floats",
                    "3": "add"
                },
                "SCARRY4": {
                    "1": "check_signed_overflow"
                },
                "CONCAT44": {
                    "1": "concatenate"
                },
                "FUN_08008640": {
                    "1": "multiply_uints_func"
                },
                "FUN_080082d4": {
                    "1": "perform_operation2"
                },
                "0x7fffffff": {
                    "1": "0x7fffffff"
                },
                "0x43500000": {
                    "1": "0x43500000"
                },
                "0x7ff": {
                    "1": "0x7ff"
                },
                "0x80000000": {
                    "1": "0x80000000"
                },
                "0x800fffff": {
                    "1": "0x800fffff"
                },
                "0x36": {
                    "1": "0x36"
                },
                "0x100000": {
                    "1": "0x100000"
                },
                "0x35": {
                    "1": "0x35"
                },
                "0xc351": {
                    "1": "0xc351"
                },
                "0x1a56e1f": {
                    "1": "0x1a56e1f"
                },
                "0xc2f8f359": {
                    "1": "0xc2f8f359"
                },
                "0x8800759c": {
                    "1": "0x8800759c"
                },
                "0x7e37e43c": {
                    "1": "0x7e37e43c"
                }
            }
        },
        "FUN_0800b3dc": {
            "entrypoint": "0x0800b3dc",
            "current_name": "get_data_value_0800b3dc",
            "code": "\nundefined4 get_data_value_0800b3dc(void)\n\n{\n  return DAT_20000018;\n}\n\n",
            "renaming": {
                "FUN_0800b3dc": "get_data_value_0800b3dc"
            },
            "calling": [
                "FUN_080098d0",
                "FUN_0800981c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800b3dc": {
                    "1": "get_dat_value",
                    "3": "get_global_variable",
                    "2": "get_global_data",
                    "5": "get_global_value",
                    "7": "get_data_value",
                    "4": "get_data"
                },
                "DAT_20000018": {
                    "3": "global_variable",
                    "2": "data_offset",
                    "5": "global_value",
                    "1": "data_from_memory"
                },
                "return_value": {
                    "1": "data"
                }
            }
        },
        "FUN_0800b3e8": {
            "entrypoint": "0x0800b3e8",
            "current_name": "initialize_and_execute_functions_0800b3e8",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0800b3f4) */\n/* WARNING: Removing unreachable block (ram,0x0800b3f6) */\n\nvoid initialize_and_execute_functions_0800b3e8(void)\n\n{\n  int iteration_count;\n  code **function_pointers;\n  \n  _init();\n  iteration_count = 0;\n  function_pointers = (code **)&DAT_0800c0b4;\n  do {\n    iteration_count = iteration_count + 1;\n    (**function_pointers)();\n    function_pointers = function_pointers + 1;\n  } while (iteration_count != 2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800b3e8": "initialize_and_execute_functions_0800b3e8",
                "iVar1": "iteration_count",
                "ppcVar2": "function_pointers"
            },
            "calling": [
                "FUN_080092c4"
            ],
            "called": [
                "FUN_0800b4d0",
                "FUN_080001ac",
                "FUN_0800b5b0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800b3e8": {
                    "4": "initialize_and_call_functions",
                    "1": "execute_init",
                    "3": "initialize_and_call_subfunctions",
                    "7": "initialize_and_execute_functions"
                },
                "iVar1": {
                    "2": "iteration",
                    "1": "iteration_counter",
                    "3": "count",
                    "8": "counter",
                    "14": "iteration_count"
                },
                "ppcVar2": {
                    "11": "function_pointers",
                    "7": "function_pointer",
                    "1": "function_list_iterator",
                    "2": "function_pointer_array",
                    "5": "function_array"
                },
                "FUNC_0800b4d0": {
                    "1": "perform_task_1"
                },
                "FUN_080001ac": {
                    "1": "perform_action2"
                },
                "FUNC_0800b5b0": {
                    "1": "perform_task_3"
                }
            }
        },
        "FUN_0800b430": {
            "entrypoint": "0x0800b430",
            "current_name": "fill_memory_0800b430",
            "code": "\nvoid fill_memory_0800b430(undefined4 *destination,undefined value,uint size)\n\n{\n  undefined4 *dest_ptr;\n  undefined4 *temp_ptr;\n  uint remaining_size;\n  undefined4 value32;\n  bool is_size_zero;\n  \n  if (((uint)destination & 3) != 0) {\n    remaining_size = size - 1;\n    dest_ptr = destination;\n    if (size == 0) {\n      return;\n    }\n    while( true ) {\n      destination = (undefined4 *)((int)dest_ptr + 1);\n      *(undefined *)dest_ptr = value;\n      size = remaining_size;\n      if (((uint)destination & 3) == 0) break;\n      is_size_zero = remaining_size == 0;\n      remaining_size = remaining_size - 1;\n      dest_ptr = destination;\n      if (is_size_zero) {\n        return;\n      }\n    }\n  }\n  if (3 < size) {\n    value32 = CONCAT22(CONCAT11(value,value),CONCAT11(value,value));\n    if (0xf < size) {\n      dest_ptr = destination + 4;\n      do {\n        dest_ptr[-4] = value32;\n        dest_ptr[-3] = value32;\n        dest_ptr[-2] = value32;\n        dest_ptr[-1] = value32;\n        dest_ptr = dest_ptr + 4;\n      } while (dest_ptr != (undefined4 *)((int)destination + (size - 0x10 & 0xfffffff0) + 0x20));\n      remaining_size = size & 0xc;\n      destination = destination + ((size - 0x10 >> 4) + 1) * 4;\n      size = size & 0xf;\n      if (remaining_size == 0) goto end_condition;\n    }\n    dest_ptr = (undefined4 *)((size - 4 & 0xfffffffc) + 4 + (int)destination);\n    do {\n      temp_ptr = destination + 1;\n      *destination = value32;\n      destination = temp_ptr;\n    } while (dest_ptr != temp_ptr);\n    size = size & 3;\n    destination = dest_ptr;\n  }\nend_condition:\n  if (size != 0) {\n    dest_ptr = destination;\n    do {\n      temp_ptr = (undefined4 *)((int)dest_ptr + 1);\n      *(undefined *)dest_ptr = value;\n      dest_ptr = temp_ptr;\n    } while ((undefined4 *)(size + (int)destination) != temp_ptr);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800b430": "fill_memory_0800b430",
                "param_1": "destination",
                "param_2": "value",
                "param_3": "size",
                "puVar1": "dest_ptr",
                "puVar2": "temp_ptr",
                "uVar3": "remaining_size",
                "uVar4": "value32",
                "bVar5": "is_size_zero",
                "joined_r0x0800b4a8": "end_condition"
            },
            "calling": [
                "FUN_08002f24",
                "FUN_08001994",
                "FUN_080079c0",
                "FUN_080004ac",
                "FUN_080002f0",
                "FUN_080005b4",
                "FUN_08005814",
                "FUN_080024c4",
                "FUN_08004d7c",
                "FUN_08001ddc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800b430": {
                    "1": "zero_fill_buffer",
                    "3": "fill_memory_with_byte",
                    "10": "fill_memory",
                    "7": "memset"
                },
                "param_1": {
                    "11": "destination",
                    "1": "dest_ptr",
                    "2": "memory",
                    "9": "dest",
                    "5": "buffer"
                },
                "param_2": {
                    "1": "byte_pattern",
                    "2": "fill_byte",
                    "25": "value"
                },
                "param_3": {
                    "1": "num_bytes",
                    "4": "count",
                    "2": "length",
                    "23": "size"
                },
                "puVar1": {
                    "1": "dest_byte",
                    "2": "dst_ptr",
                    "3": "ptr",
                    "16": "dest_ptr"
                },
                "puVar2": {
                    "1": "ptr",
                    "2": "dest_ptr2",
                    "5": "next_ptr",
                    "11": "temp_ptr",
                    "3": "ptr2"
                },
                "uVar3": {
                    "2": "remaining_count",
                    "3": "remaining",
                    "1": "size_temp",
                    "19": "remaining_size"
                },
                "uVar4": {
                    "1": "four_copied_bytes",
                    "3": "pattern",
                    "4": "value32",
                    "2": "value_concatenated"
                },
                "bVar5": {
                    "1": "is_zero_length",
                    "3": "is_remaining_size_zero",
                    "5": "is_zero_size",
                    "9": "is_size_zero",
                    "7": "is_zero",
                    "2": "is_done"
                },
                "joined_r0x0800b4a8": {
                    "1": "end_of_loop"
                },
                "undefined4 *param_1": {
                    "1": "buffer"
                },
                "undefined param_2": {
                    "1": "byte"
                },
                "uint param_3": {
                    "1": "size"
                }
            }
        },
        "FUN_0800b4d0": {
            "entrypoint": "0x0800b4d0",
            "current_name": "FUNC_0800b4d0",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0800b4d4) */\n\nvoid FUNC_0800b4d0(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800b4d0": "FUNC_0800b4d0"
            },
            "calling": [
                "FUN_0800b3e8"
            ],
            "called": [
                "FUN_0800b524"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800b51c": {
            "entrypoint": "0x0800b51c",
            "current_name": "FUNC_0800b51c",
            "code": "\nvoid FUNC_0800b51c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800b51c": "FUNC_0800b51c"
            },
            "calling": [
                "FUN_0800b524"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800b520": {
            "entrypoint": "0x0800b520",
            "current_name": "FUNC_0800b520",
            "code": "\nvoid FUNC_0800b520(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800b520": "FUNC_0800b520"
            },
            "calling": [
                "FUN_0800b524"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800b524": {
            "entrypoint": "0x0800b524",
            "current_name": "update_data_0800b524",
            "code": "\nundefined4 update_data_0800b524(int type,undefined4 data,undefined4 value1,undefined4 value2)\n\n{\n  undefined *data_ptr;\n  undefined4 return_value;\n  uint bit_mask;\n  uint count;\n  \n  acquire_lock_recursive(DAT_20000448);\n  if (DAT_20000168 == (undefined *)0x0) {\n    DAT_20000168 = &DAT_2000016c;\n  }\n  data_ptr = DAT_20000168;\n  count = *(uint *)(DAT_20000168 + 4);\n  if ((int)count < 0x20) {\n    if (type != 0) {\n      *(undefined4 *)(DAT_20000168 + count * 4 + 0x88) = value1;\n      bit_mask = 1 << (count & 0xff);\n      *(uint *)(data_ptr + 0x188) = *(uint *)(data_ptr + 0x188) | bit_mask;\n      *(undefined4 *)(data_ptr + count * 4 + 0x108) = value2;\n      if (type == 2) {\n        *(uint *)(data_ptr + 0x18c) = bit_mask | *(uint *)(data_ptr + 0x18c);\n      }\n    }\n    return_value = DAT_20000448;\n    *(uint *)(data_ptr + 4) = count + 1;\n    *(undefined4 *)(data_ptr + (count + 2) * 4) = data;\n    release_lock_recursive(return_value);\n    return_value = 0;\n  }\n  else {\n    release_lock_recursive(DAT_20000448);\n    return_value = 0xffffffff;\n  }\n  return return_value;\n}\n\n",
            "renaming": {
                "FUN_0800b524": "update_data_0800b524",
                "param_1": "type",
                "param_2": "data",
                "param_3": "value1",
                "param_4": "value2",
                "puVar1": "data_ptr",
                "uVar2": "return_value",
                "uVar3": "bit_mask",
                "uVar4": "count",
                "__retarget_lock_acquire_recursive": "acquire_lock_recursive",
                "__retarget_lock_release_recursive": "release_lock_recursive"
            },
            "calling": [
                "FUN_0800b4d0"
            ],
            "called": [
                "FUN_0800b51c",
                "FUN_0800b520"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800b524": {
                    "1": "insert_data_into_cache",
                    "2": "store_data",
                    "3": "manage_resource",
                    "10": "update_data"
                },
                "param_1": {
                    "2": "operation_type",
                    "1": "value",
                    "10": "type",
                    "4": "data_flag"
                },
                "param_2": {
                    "1": "data_1",
                    "11": "data",
                    "3": "value1",
                    "5": "value",
                    "2": "resource_id"
                },
                "param_3": {
                    "1": "resource_id",
                    "2": "data1",
                    "3": "value",
                    "6": "value1"
                },
                "param_4": {
                    "2": "data2",
                    "1": "param_c",
                    "3": "value3",
                    "6": "value2"
                },
                "puVar1": {
                    "5": "data_ptr",
                    "1": "entry",
                    "3": "ptr"
                },
                "uVar2": {
                    "1": "return_val",
                    "14": "result",
                    "15": "return_value"
                },
                "uVar3": {
                    "2": "mask",
                    "1": "bitwise_shift",
                    "5": "bitmask",
                    "20": "bit_mask"
                },
                "uVar4": {
                    "2": "resource_count",
                    "1": "elements",
                    "8": "count",
                    "3": "counter"
                },
                "__retarget_lock_acquire_recursive": {
                    "1": "acquire_lock"
                },
                "DAT_20000448": {
                    "1": "lock"
                },
                "DAT_20000168": {
                    "1": "data_buffer"
                },
                "&DAT_2000016c": {
                    "1": "default_data_buffer"
                },
                "DAT_20000168 + 4": {
                    "1": "data_buffer_offset"
                },
                "*(uint *)(DAT_20000168 + 4)": {
                    "1": "data_buffer_count"
                },
                "*(undefined4 *)(DAT_20000168 + uVar4 * 4 + 0x88)": {
                    "1": "data_value1"
                },
                "*(uint *)(puVar1 + 0x188)": {
                    "1": "bit_map1"
                },
                "*(undefined4 *)(puVar1 + uVar4 * 4 + 0x108)": {
                    "1": "data_value2"
                },
                "*(uint *)(puVar1 + 0x18c)": {
                    "1": "bit_map2"
                },
                "*(uint *)(puVar1 + 4)": {
                    "1": "updated_count"
                },
                "*(undefined4 *)(puVar1 + (uVar4 + 2) * 4)": {
                    "1": "data_value3"
                },
                "__retarget_lock_release_recursive": {
                    "1": "release_lock_recursive"
                },
                "DAT_2000016c": {
                    "1": "default_array"
                },
                "FUNC_0800b51c": {
                    "1": "function1"
                },
                "FUNC_0800b520": {
                    "1": "function2"
                }
            }
        },
        "FUN_0800b5b0": {
            "entrypoint": "0x0800b5b0",
            "current_name": "FUNC_0800b5b0",
            "code": "\nvoid FUNC_0800b5b0(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800b5b0": "FUNC_0800b5b0"
            },
            "calling": [
                "FUN_0800b3e8",
                "FUN_080001ac",
                "FUN_08000188"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800b5bc": {
            "entrypoint": "0x0800b5bc",
            "current_name": "FUNC_0800b5bc",
            "code": "\nvoid FUNC_0800b5bc(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800b5bc": "FUNC_0800b5bc"
            },
            "calling": [],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        }
    },
    "used_tokens": 960010,
    "layers": [
        [
            "FUN_08000188",
            "FUN_080001ac",
            "FUN_080001f8",
            "FUN_08000210",
            "FUN_08000220",
            "FUN_08000268",
            "FUN_080002a0",
            "FUN_080002b6",
            "FUN_080002f0",
            "FUN_08000310",
            "FUN_08000340",
            "FUN_08000374",
            "FUN_080003ec",
            "FUN_08000478",
            "FUN_080004ac",
            "FUN_080004fc",
            "FUN_0800056c",
            "FUN_080005b4",
            "FUN_0800184c",
            "FUN_080018cc",
            "FUN_080018fc",
            "FUN_0800192c",
            "FUN_0800195c",
            "FUN_08001d4c",
            "FUN_08001ddc",
            "FUN_08001e98",
            "FUN_08001f00",
            "FUN_08002408",
            "FUN_080024c4",
            "FUN_080025e8",
            "FUN_08002638",
            "FUN_0800283a",
            "FUN_08002870",
            "FUN_08002896",
            "FUN_080028bc",
            "FUN_08002908",
            "FUN_08002978",
            "FUN_080029d8",
            "FUN_08002a94",
            "FUN_08002afc",
            "FUN_08002ba8",
            "FUN_08002c18",
            "FUN_08002e08",
            "FUN_08002edc",
            "FUN_08002ef0",
            "FUN_08002f24",
            "FUN_08002f40",
            "FUN_08002f74",
            "FUN_08002fac",
            "FUN_08002fd4",
            "FUN_08003004",
            "FUN_080035ec",
            "FUN_08003618",
            "FUN_0800369c",
            "FUN_080036c6",
            "FUN_080036f0",
            "FUN_08003740",
            "FUN_0800375c",
            "FUN_08003778",
            "FUN_080037fc",
            "FUN_08003826",
            "FUN_08003980",
            "FUN_080039a0",
            "FUN_080039bc",
            "FUN_08003a18",
            "FUN_08003a74",
            "FUN_08003b98",
            "FUN_08003f34",
            "FUN_08004030",
            "FUN_08004148",
            "FUN_080041a0",
            "FUN_08004228",
            "FUN_0800423c",
            "FUN_08004250",
            "FUN_080044e8",
            "FUN_080046d0",
            "FUN_08004900",
            "FUN_08004940",
            "FUN_08004bc0",
            "FUN_08004bf4",
            "FUN_08004c2a",
            "FUN_08004c48",
            "FUN_08004d2c",
            "FUN_08004d7c",
            "FUN_08004dd2",
            "FUN_08004e30",
            "FUN_080051b4",
            "FUN_08005238",
            "FUN_08005250",
            "FUN_0800525c",
            "FUN_080052ac",
            "FUN_080052dc",
            "FUN_08005324",
            "FUN_08005360",
            "FUN_080053a0",
            "FUN_08005760",
            "FUN_08005778",
            "FUN_08005790",
            "FUN_080057e4",
            "FUN_08005814",
            "FUN_0800583c",
            "FUN_0800585c",
            "FUN_0800587c",
            "FUN_080058a0",
            "FUN_08005900",
            "FUN_0800597c",
            "FUN_08005984",
            "FUN_080059b4",
            "FUN_080059f8",
            "FUN_08005a68",
            "FUN_08005a84",
            "FUN_08005a98",
            "FUN_08005bdc",
            "FUN_08005cec",
            "FUN_0800640c",
            "FUN_080064ec",
            "FUN_08006628",
            "FUN_08006680",
            "FUN_080066cc",
            "FUN_08006950",
            "FUN_08006998",
            "FUN_080069b4",
            "FUN_080069e4",
            "FUN_08006a18",
            "FUN_08006a58",
            "FUN_08006a8c",
            "FUN_08006ac0",
            "FUN_08006b00",
            "FUN_08006b54",
            "FUN_08006ba0",
            "FUN_08006c04",
            "FUN_08006c70",
            "FUN_08006c9c",
            "FUN_08006ce0",
            "FUN_08006cf6",
            "FUN_08006d4a",
            "FUN_08006d66",
            "FUN_08006d72",
            "FUN_08006d8a",
            "FUN_08006d98",
            "FUN_08006dc4",
            "FUN_08006de0",
            "FUN_08006dfe",
            "FUN_08006e1a",
            "FUN_08006e88",
            "FUN_0800733e",
            "FUN_0800738e",
            "FUN_080073d4",
            "FUN_08007402",
            "FUN_08007430",
            "FUN_08007436",
            "FUN_080074c8",
            "FUN_08007520",
            "FUN_08007540",
            "FUN_0800756c",
            "FUN_080076c8",
            "FUN_08007756",
            "FUN_0800778c",
            "FUN_08007854",
            "FUN_08007884",
            "FUN_080078f4",
            "FUN_080079c0",
            "FUN_080079e0",
            "FUN_08007a10",
            "FUN_08007a70",
            "FUN_08007ad0",
            "FUN_08007b70",
            "FUN_08007bc2",
            "FUN_08007bf0",
            "FUN_08007c40",
            "FUN_08007c5e",
            "FUN_08007c7c",
            "FUN_08007d08",
            "FUN_08007da8",
            "FUN_08007e08",
            "FUN_08007e1c",
            "FUN_08007e58",
            "FUN_08007e84",
            "FUN_08007ea4",
            "FUN_08007f54",
            "FUN_08008190",
            "FUN_08008250",
            "FUN_0800826a",
            "FUN_08008286",
            "FUN_080082d0",
            "FUN_080082d4",
            "FUN_0800854c",
            "FUN_0800856c",
            "FUN_08008590",
            "FUN_0800881c",
            "FUN_08008a02",
            "FUN_08008a74",
            "FUN_08008af0",
            "FUN_08008b00",
            "FUN_08008b10",
            "FUN_08008b24",
            "FUN_08008b4c",
            "FUN_08008b60",
            "FUN_08008b74",
            "FUN_08008ba0",
            "FUN_08008bf0",
            "FUN_08008c30",
            "FUN_08008cd8",
            "FUN_08008cdc",
            "FUN_08008e3c",
            "FUN_08008e44",
            "FUN_08008eec",
            "FUN_08009054",
            "FUN_0800919c",
            "FUN_080091fc",
            "FUN_08009204",
            "FUN_08009214",
            "FUN_08009228",
            "FUN_0800923c",
            "FUN_08009250",
            "FUN_08009264",
            "FUN_08009278",
            "FUN_080092c4",
            "FUN_08009318",
            "FUN_08009410",
            "FUN_080094c0",
            "FUN_080095b8",
            "FUN_08009654",
            "FUN_080096e8",
            "FUN_08009798",
            "FUN_0800981c",
            "FUN_080098d0",
            "FUN_08009990",
            "FUN_08009b24",
            "FUN_08009d78",
            "FUN_0800a1bc",
            "FUN_0800a348",
            "FUN_0800a5a0",
            "FUN_0800adf0",
            "FUN_0800af78",
            "FUN_0800b2d4",
            "FUN_0800b2e0",
            "FUN_0800b2e8",
            "FUN_0800b3dc",
            "FUN_0800b3e8",
            "FUN_0800b430",
            "FUN_0800b524"
        ],
        [
            "FUN_08001994",
            "FUN_08005c30",
            "FUN_08006d2e",
            "FUN_08007930",
            "FUN_08008640",
            "FUN_08008894"
        ],
        [
            "FUN_0800618c"
        ]
    ],
    "locked_functions": []
}