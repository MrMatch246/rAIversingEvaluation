{
    "functions": {
        "FUN_08000188": {
            "entrypoint": "0x08000188",
            "current_name": "set_first_run_flag_08000188",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08000194) */\n\nundefined4 setFirstRunFlag_08000188(undefined4 inputValue)\n\n{\n  if ((char)DAT_2000044c == '\\0') {\n    DAT_2000044c._0_1_ = '\\x01';\n  }\n  return inputValue;\n}\n\n",
            "renaming": {
                "FUN_08000188": "set_first_run_flag_08000188",
                "param_1": "inputValue"
            },
            "calling": [],
            "called": [
                "FUN_0800b5b0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080001ac": {
            "entrypoint": "0x080001ac",
            "current_name": "concatenate_param_080001ac",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x080001b2) */\n\nundefined8 concatenate_param_080001ac(undefined4 first_parameter,undefined4 second_parameter)\n\n{\n  return CONCAT44(second_parameter,first_parameter);\n}\n\n",
            "renaming": {
                "FUN_080001ac": "concatenate_param_080001ac",
                "param_1": "first_parameter",
                "param_2": "second_parameter"
            },
            "calling": [
                "FUN_0800b3e8"
            ],
            "called": [
                "FUN_0800b5b0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080001c8": {
            "entrypoint": "0x080001c8",
            "current_name": "FUNC_080001c8",
            "code": "\nvoid FUNC_080001c8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080001c8": "FUNC_080001c8"
            },
            "calling": [
                "FUN_08000220"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080001d4": {
            "entrypoint": "0x080001d4",
            "current_name": "FUNC_080001d4",
            "code": "\nvoid FUNC_080001d4(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080001d4": "FUNC_080001d4"
            },
            "calling": [
                "FUN_08000210"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080001e0": {
            "entrypoint": "0x080001e0",
            "current_name": "FUNC_080001e0",
            "code": "\nvoid FUNC_080001e0(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080001e0": "FUNC_080001e0"
            },
            "calling": [
                "FUN_08000220"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080001ec": {
            "entrypoint": "0x080001ec",
            "current_name": "FUNC_080001ec",
            "code": "\nvoid FUNC_080001ec(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080001ec": "FUNC_080001ec"
            },
            "calling": [
                "FUN_08000210"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080001f8": {
            "entrypoint": "0x080001f8",
            "current_name": "initialize_and_reset_080001f8",
            "code": "\nvoid initialize_and_reset_080001f8(void)\n\n{\n  DAT_20000468 = 0;\n  initialize_08000210();\n  return;\n}\n\n",
            "renaming": {
                "FUN_080001f8": "initialize_and_reset_080001f8"
            },
            "calling": [
                "FUN_08001ddc"
            ],
            "called": [
                "FUN_08000210"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000210": {
            "entrypoint": "0x08000210",
            "current_name": "initialize_08000210",
            "code": "\nvoid initialize_08000210(void)\n\n{\n  FUNC_080001ec();\n  FUNC_080001d4();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000210": "initialize_08000210"
            },
            "calling": [
                "FUN_080001f8",
                "FUN_080025e8",
                "FUN_08000220"
            ],
            "called": [
                "FUN_080001d4",
                "FUN_080001ec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000220": {
            "entrypoint": "0x08000220",
            "current_name": "process_and_initialize_param_1_08000220",
            "code": "\nvoid process_and_initialize_param_1_08000220(char input_value)\n\n{\n  if (input_value != DAT_20000468) {\n    process_active_user_data();\n    if (input_value == '\\x01') {\n      FUNC_080001c8();\n      DAT_20000468 = input_value;\n    }\n    else if (input_value == '\\x02') {\n      FUNC_080001e0();\n      DAT_20000468 = input_value;\n    }\n    else {\n      initialize_saved_param_1();\n      DAT_20000468 = input_value;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000220": "process_and_initialize_param_1_08000220",
                "param_1": "input_value",
                "process_active_user_data_08002fd4": "process_active_user_data",
                "initialize_08000210": "initialize_saved_param_1"
            },
            "calling": [
                "FUN_080005b4"
            ],
            "called": [
                "FUN_080001e0",
                "FUN_08002fd4",
                "FUN_08000210",
                "FUN_080001c8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000268": {
            "entrypoint": "0x08000268",
            "current_name": "calculate_result_08000268",
            "code": "\n\n\nint calculate_result_08000268(void)\n\n{\n  int data_value;\n  \n  data_value = get_data_value();\n  return (data_value + 1) * 1000 - _DAT_e000e018 / 0xa8;\n}\n\n",
            "renaming": {
                "FUN_08000268": "calculate_result_08000268",
                "iVar1": "data_value",
                "get_data_value_08005a84": "get_data_value"
            },
            "calling": [
                "FUN_080002b6"
            ],
            "called": [
                "FUN_08005a84"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080002a0": {
            "entrypoint": "0x080002a0",
            "current_name": "check_param_value_and_return_080002a0",
            "code": "\nvoid check_param_value_and_return_080002a0(undefined4 input_value)\n\n{\n  validate_input_value_in_range(input_value);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080002a0": "check_param_value_and_return_080002a0",
                "param_1": "input_value",
                "check_param_value_in_range_08005a98": "validate_input_value_in_range"
            },
            "calling": [
                "FUN_08002408"
            ],
            "called": [
                "FUN_08005a98"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080002b6": {
            "entrypoint": "0x080002b6",
            "current_name": "check_if_sum_is_greater_080002b6",
            "code": "\nvoid checkIfSumIsGreater_080002b6(uint input)\n\n{\n  uint result1;\n  uint result2;\n  bool isGreater;\n  longlong result;\n  undefined8 tempResult;\n  \n  result = calculate_result_08000268();\n  result2 = (uint)(result + (ulonglong)input >> 0x20);\n  do {\n    tempResult = calculate_result_08000268();\n    result1 = (uint)((ulonglong)tempResult >> 0x20);\n    isGreater = result2 <= result1;\n    if (result1 == result2) {\n      isGreater = (uint)(result + (ulonglong)input) <= (uint)tempResult;\n    }\n  } while (!isGreater);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080002b6": "check_if_sum_is_greater_080002b6",
                "param_1": "input",
                "uVar1": "result1",
                "uVar2": "result2",
                "bVar3": "isGreater",
                "lVar4": "result",
                "uVar5": "tempResult"
            },
            "calling": [],
            "called": [
                "FUN_08000268"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080002f0": {
            "entrypoint": "0x080002f0",
            "current_name": "initialize_memory_080002f0",
            "code": "\nvoid initializeMemory_080002f0(void)\n\n{\n  fill_memory_with_byte_0800b430(&DAT_20000470,0xff,4);\n  DAT_2000046c = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080002f0": "initialize_memory_080002f0"
            },
            "calling": [
                "FUN_080003ec",
                "FUN_08000374",
                "FUN_08000310",
                "FUN_08000340"
            ],
            "called": [
                "FUN_0800b430"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000310": {
            "entrypoint": "0x08000310",
            "current_name": "get_memory_value_08000310",
            "code": "\nundefined getMemoryValue_08000310(uint index)\n\n{\n  if (DAT_2000046c == 0) {\n    initializeMemory();\n  }\n  return (&DAT_20000470)[index & 0x3ff];\n}\n\n",
            "renaming": {
                "FUN_08000310": "get_memory_value_08000310",
                "param_1": "index",
                "initialize_memory_080002f0": "initializeMemory"
            },
            "calling": [
                "FUN_080003ec",
                "FUN_08004dd2"
            ],
            "called": [
                "FUN_080002f0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000340": {
            "entrypoint": "0x08000340",
            "current_name": "store_data_08000340",
            "code": "\nvoid storeData_08000340(uint index,undefined data)\n\n{\n  if (DAT_2000046c == 0) {\n    initializeMemory();\n  }\n  (&DAT_20000470)[index & 0x3ff] = data;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000340": "store_data_08000340",
                "param_1": "index",
                "param_2": "data",
                "initialize_memory_080002f0": "initializeMemory"
            },
            "calling": [
                "FUN_08000374",
                "FUN_08004c2a"
            ],
            "called": [
                "FUN_080002f0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000374": {
            "entrypoint": "0x08000374",
            "current_name": "process_data_08000374",
            "code": "\nvoid processData_08000374(int dataSize,char *data,int length)\n\n{\n  int remainingLength;\n  char *currentData;\n  int currentIndex;\n  char checksum;\n  \n  checksum = '\\0';\n  remainingLength = length;\n  currentData = data;\n  currentIndex = dataSize;\n  if (DAT_2000046c == 0) {\n    initialize_memory_080002f0();\n    currentData = data;\n    currentIndex = dataSize;\n  }\n  for (; remainingLength != 0; remainingLength = remainingLength + -1) {\n    checksum = (checksum != '\\0') + *currentData;\n    store_data_08000340(currentIndex,*currentData);\n    currentData = currentData + 1;\n    currentIndex = currentIndex + 1;\n  }\n  store_data_08000340(currentIndex,checksum);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000374": "process_data_08000374",
                "param_1": "dataSize",
                "param_2": "data",
                "param_3": "length",
                "local_1c": "remainingLength",
                "local_18": "currentData",
                "local_14": "currentIndex",
                "local_9": "checksum"
            },
            "calling": [
                "FUN_08004c2a",
                "FUN_08004bc0",
                "FUN_08004bf4"
            ],
            "called": [
                "FUN_080002f0",
                "FUN_08000340"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080003ec": {
            "entrypoint": "0x080003ec",
            "current_name": "compare_memory_values_080003ec",
            "code": "\nbool compare_memory_values_080003ec(char *input_string,int start_index,int length)\n\n{\n  char cVar1;\n  uint uVar2;\n  int remaining_length;\n  int current_index;\n  char *output_string;\n  byte sum_of_values;\n  \n  sum_of_values = 0;\n  remaining_length = length;\n  current_index = start_index;\n  output_string = input_string;\n  if (DAT_2000046c == 0) {\n    initialize_memory_080002f0();\n    current_index = start_index;\n    output_string = input_string;\n  }\n  for (; remaining_length != 0; remaining_length = remaining_length + -1) {\n    cVar1 = get_memory_value_08000310(current_index);\n    sum_of_values = cVar1 + (sum_of_values != 0);\n    *output_string = cVar1;\n    current_index = current_index + 1;\n    output_string = output_string + 1;\n  }\n  uVar2 = get_memory_value_08000310(current_index);\n  return sum_of_values == uVar2;\n}\n\n",
            "renaming": {
                "FUN_080003ec": "compare_memory_values_080003ec",
                "param_1": "input_string",
                "param_2": "start_index",
                "param_3": "length",
                "local_1c": "remaining_length",
                "local_18": "current_index",
                "local_14": "output_string",
                "local_9": "sum_of_values"
            },
            "calling": [
                "FUN_08004dd2",
                "FUN_08004d2c",
                "FUN_08004d7c"
            ],
            "called": [
                "FUN_080002f0",
                "FUN_08000310"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000478": {
            "entrypoint": "0x08000478",
            "current_name": "initialize_data_08000478",
            "code": "\nvoid initializeData_08000478(undefined data1,undefined data2,undefined data3)\n\n{\n  DAT_20000e89 = data1;\n  DAT_20000e8a = data2;\n  DAT_20000e8b = data3;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000478": "initialize_data_08000478",
                "param_1": "data1",
                "param_2": "data2",
                "param_3": "data3"
            },
            "calling": [
                "FUN_080004ac",
                "FUN_080005b4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080004ac": {
            "entrypoint": "0x080004ac",
            "current_name": "initialize_memory_080004ac",
            "code": "\nvoid initializeMemory_080004ac(void)\n\n{\n  int iVar1;\n  \n  fill_memory_with_byte_0800b430(&DAT_20000e70,0,0x38);\n  DAT_20000e78 = DAT_20000ecc;\n  initializeData(0,1,2);\n  DAT_20000e74 = 1;\n  iVar1 = verifyMemoryValues(DAT_20000e8c,&DAT_20000e90);\n  if (iVar1 == 0) {\n    FUNC_08004030(10);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080004ac": "initialize_memory_080004ac",
                "initialize_data_08000478": "initializeData",
                "verify_memory_values_08004d7c": "verifyMemoryValues"
            },
            "calling": [
                "FUN_08001ddc"
            ],
            "called": [
                "FUN_08004030",
                "FUN_0800b430",
                "FUN_08000478",
                "FUN_08004d7c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080004fc": {
            "entrypoint": "0x080004fc",
            "current_name": "calculate_and_store_float_values_080004fc",
            "code": "\nvoid calculateAndStoreFloatValues_080004fc(undefined4 input1,undefined4 input2,undefined4 input3)\n\n{\n  undefined4 signedMagnitude1;\n  \n  signedMagnitude1 = calculateSignedMagnitude(input1);\n  DAT_20000e7c = calculateFloat(signedMagnitude1,DAT_20000ebc);\n  signedMagnitude1 = calculateSignedMagnitude(input2);\n  DAT_20000e80 = calculateFloat(signedMagnitude1,DAT_20000ec0);\n  signedMagnitude1 = calculateSignedMagnitude(input3);\n  DAT_20000e84 = calculateFloat(signedMagnitude1,DAT_20000ec4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080004fc": "calculate_and_store_float_values_080004fc",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "uVar1": "signedMagnitude1",
                "calculate_signed_magnitude_08008e44": "calculateSignedMagnitude",
                "calculate_float_08009054": "calculateFloat"
            },
            "calling": [
                "FUN_0800283a"
            ],
            "called": [
                "FUN_08008e44",
                "FUN_08009054"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800056c": {
            "entrypoint": "0x0800056c",
            "current_name": "decode_and_convert_to_float_0800056c",
            "code": "\nundefined4 decode_and_convert_to_float_0800056c(undefined4 input_value)\n\n{\n  undefined8 decoded_value;\n  \n  if (DAT_20000e73 != '\\0') {\n    decoded_value = decode_value_with_improvement(input_value);\n    decoded_value = calculate_modified_result((int)decoded_value,(int)((ulonglong)decoded_value >> 0x20),0x66666666,0x40396666);\n    input_value = convert_to_float((int)decoded_value,(int)((ulonglong)decoded_value >> 0x20));\n  }\n  return input_value;\n}\n\n",
            "renaming": {
                "FUN_0800056c": "decode_and_convert_to_float_0800056c",
                "param_1": "input_value",
                "uVar1": "decoded_value",
                "decode_and_improve_08008590": "decode_value_with_improvement",
                "calculate_result_08008640": "calculate_modified_result",
                "convert_to_float_08008c30": "convert_to_float"
            },
            "calling": [
                "FUN_080005b4"
            ],
            "called": [
                "FUN_08008590",
                "FUN_08008640",
                "FUN_08008c30"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080005b4": {
            "entrypoint": "0x080005b4",
            "current_name": "process_input_080005b4",
            "code": "\nchar processInput_080005b4(undefined4 input)\n\n{\n  int result;\n  undefined4 tempValue;\n  char errorCode;\n  uint tempValue2;\n  undefined4 tempValue3;\n  undefined8 decodedValue1;\n  undefined8 decodedValue2;\n  undefined8 decodedValue3;\n  undefined4 values1 [4];\n  undefined4 value1;\n  undefined4 value2;\n  undefined4 value3;\n  undefined4 value4;\n  undefined4 value5;\n  undefined4 values2 [6];\n  undefined4 parameter;\n  byte character;\n  undefined local_51;\n  undefined4 local_50;\n  undefined4 local_4c;\n  undefined local_45;\n  uint local_44;\n  byte counter1;\n  byte counter2;\n  byte counter3;\n  byte counter4;\n  char shiftedValue2;\n  uint floatValue5;\n  undefined4 tempValue7;\n  sbyte counter8;\n  char counter9;\n  char counter10;\n  undefined4 floatValue6;\n  byte counter11;\n  ushort counter12;\n  uint counter13;\n  \n  if (DAT_20000ea9 == '\\x06') {\n    errorCode = '\\f';\n  }\n  else {\n    local_51 = 0;\n    counter12 = 0;\n    counter11 = 0;\n    floatValue6 = 0xbf800000;\n    counter10 = '\\0';\n    counter9 = '\\0';\n    fill_memory_with_byte_0800b430(values2 + 3,0,0xc);\n    fill_memory_with_byte_0800b430(values2,0,0xc);\n    DAT_20000e70 = '\\0';\n    counter8 = 0;\n    while (result = validate_and_extract_0800184c(&character,values2 + 6,input,&local_51), result != 0) {\n      decodedValue1 = decode_and_improve_08008590(parameter);\n      decodedValue1 = extract_bits_08009798((int)decodedValue1,(int)((ulonglong)decodedValue1 >> 0x20));\n      counter13 = calculate_value_08008ba0((int)decodedValue1,(int)((ulonglong)decodedValue1 >> 0x20));\n      if (character == 0x47) {\n        switch(counter13) {\n        case 0:\n        case 1:\n        case 2:\n        case 3:\n        case 0x50:\n          counter8 = 2;\n          break;\n        case 4:\n        case 10:\n        case 0x1c:\n        case 0x1e:\n        case 0x35:\n        case 0x5c:\n          counter8 = 1;\n          break;\n        case 0x11:\n        case 0x12:\n        case 0x13:\n          counter8 = 3;\n          break;\n        case 0x14:\n        case 0x15:\n          counter8 = 7;\n          break;\n        case 0x36:\n        case 0x37:\n        case 0x38:\n        case 0x39:\n        case 0x3a:\n        case 0x3b:\n          counter8 = 9;\n          break;\n        case 0x5a:\n        case 0x5b:\n          counter8 = 4;\n          break;\n        case 0x5d:\n        case 0x5e:\n          counter8 = 6;\n        }\n        switch(counter13) {\n        case 0:\n          DAT_20000e71 = '\\0';\n          break;\n        case 1:\n          DAT_20000e71 = '\\x01';\n          break;\n        case 2:\n          DAT_20000e71 = '\\x02';\n          break;\n        case 3:\n          DAT_20000e71 = '\\x03';\n          break;\n        case 4:\n          counter9 = '\\x01';\n          break;\n        default:\n          DAT_20000e70 = '\\x03';\n          break;\n        case 10:\n          counter9 = '\\x02';\n          break;\n        case 0x11:\n          initialize_data_08000478(0,1,2);\n          break;\n        case 0x12:\n          initialize_data_08000478(2,0,1);\n          break;\n        case 0x13:\n          initialize_data_08000478(1,2,0);\n          break;\n        case 0x14:\n          DAT_20000e73 = 1;\n          break;\n        case 0x15:\n          DAT_20000e73 = 0;\n          break;\n        case 0x1c:\n        case 0x1e:\n          tempValue = calculate_floating_point_08008eec(parameter,0x41200000);\n          decodedValue1 = decode_and_improve_08008590(tempValue);\n          decodedValue1 = extract_bits_08009798((int)decodedValue1,(int)((ulonglong)decodedValue1 >> 0x20));\n          counter13 = calculate_value_08008ba0((int)decodedValue1,(int)((ulonglong)decodedValue1 >> 0x20));\n          switch(counter13) {\n          case 0x118:\n            counter9 = '\\x03';\n            break;\n          case 0x119:\n            counter9 = '\\x04';\n            break;\n          default:\n            DAT_20000e70 = '\\x03';\n            break;\n          case 300:\n            counter9 = '\\x05';\n            break;\n          case 0x12d:\n            counter9 = '\\x06';\n          }\n          break;\n        case 0x35:\n          counter10 = '\\x01';\n          break;\n        case 0x36:\n        case 0x37:\n        case 0x38:\n        case 0x39:\n        case 0x3a:\n        case 0x3b:\n          DAT_20000e8c = (char)counter13 - 0x36;\n          break;\n        case 0x50:\n          DAT_20000e71 = '\\x04';\n          break;\n        case 0x5a:\n          DAT_20000e74 = '\\x01';\n          break;\n        case 0x5b:\n          DAT_20000e74 = '\\0';\n          break;\n        case 0x5c:\n          tempValue = calculate_floating_point_08008eec(parameter,0x41200000);\n          decodedValue1 = decode_and_improve_08008590(tempValue);\n          decodedValue1 = extract_bits_08009798((int)decodedValue1,(int)((ulonglong)decodedValue1 >> 0x20));\n          counter13 = calculate_value_08008ba0((int)decodedValue1,(int)((ulonglong)decodedValue1 >> 0x20));\n          if (counter13 == 0x398) {\n            counter9 = '\\a';\n          }\n          else if (counter13 == 0x399) {\n            counter9 = '\\b';\n          }\n          else {\n            DAT_20000e70 = '\\x03';\n          }\n          break;\n        case 0x5d:\n          DAT_20000e72 = '\\x01';\n          break;\n        case 0x5e:\n          DAT_20000e72 = '\\0';\n        }\n      }\n      else if (character == 0x4d) {\n        if (counter13 == 0x1e) {\nLAB_08000b96:\n          counter8 = 5;\n        }\n        else if ((int)counter13 < 0x1f) {\n          if ((int)counter13 < 3) {\n            if (-1 < (int)counter13) goto LAB_08000b96;\n          }\n          else if (counter13 - 3 < 3) {\n            counter8 = 8;\n          }\n        }\n        switch(counter13) {\n        case 0:\n          DAT_20000e75 = '\\x01';\n          break;\n        case 1:\n          break;\n        case 2:\n        case 0x1e:\n          DAT_20000e75 = '\\x02';\n          break;\n        case 3:\n          DAT_20000e76 = '\\x01';\n          break;\n        case 4:\n          DAT_20000e76 = -1;\n          break;\n        case 5:\n          DAT_20000e76 = '\\0';\n          break;\n        default:\n          DAT_20000e70 = '\\x03';\n          break;\n        case 7:\n          DAT_20000e77 = 2;\n          break;\n        case 8:\n          DAT_20000e77 = 1;\n          break;\n        case 9:\n          DAT_20000e77 = 0;\n        }\n      }\n      if (counter8 != 0) {\n        if (((int)(uint)counter12 >> counter8 & 1U) == 0) {\n          counter12 = counter12 | (ushort)(1 << counter8);\n        }\n        else {\n          DAT_20000e70 = '\\x05';\n        }\n        counter8 = 0;\n      }\n    }\n    errorCode = DAT_20000e70;\n    if (DAT_20000e70 == '\\0') {\n      tempValue7 = 0;\n      floatValue5 = 0;\n      shiftedValue2 = '\\0';\n      local_51 = 0;\nswitchD_08000d18_caseD_47:\n      result = validate_and_extract_0800184c(&character,values2 + 6,input,&local_51);\n      if (result != 0) {\n        switch(character) {\n        case 0x46:\n          result = concatenate_and_return_or_0800923c(parameter,0);\n          if (result != 0) {\n            DAT_20000e70 = '\\x06';\n          }\n          if (DAT_20000e72 == '\\0') {\n            DAT_20000e78 = decode_and_convert_to_float_0800056c(parameter);\n          }\n          else {\n            floatValue6 = decode_and_convert_to_float_0800056c(parameter);\n          }\n          break;\n        case 0x47:\n        case 0x4d:\n        case 0x4e:\n          break;\n        default:\n          DAT_20000e70 = '\\x03';\n          break;\n        case 0x49:\n        case 0x4a:\n        case 0x4b:\n          tempValue2 = (uint)character;\n          tempValue = decode_and_convert_to_float_0800056c(parameter);\n          values2[tempValue2 - 0x49] = tempValue;\n          break;\n        case 0x4c:\n          decodedValue1 = decode_and_improve_08008590(parameter);\n          decodedValue1 = extract_bits_08009798((int)decodedValue1,(int)((ulonglong)decodedValue1 >> 0x20));\n          shiftedValue2 = calculate_shifted_value_08008bf0((int)decodedValue1,(int)((ulonglong)decodedValue1 >> 0x20));\n          break;\n        case 0x50:\n          tempValue7 = parameter;\n          break;\n        case 0x52:\n          floatValue5 = decode_and_convert_to_float_0800056c(parameter);\n          break;\n        case 0x53:\n          result = check_null_termination_08009228(parameter,0);\n          if (result != 0) {\n            DAT_20000e70 = '\\x06';\n          }\n          break;\n        case 0x54:\n          result = check_null_termination_08009228(parameter,0);\n          if (result != 0) {\n            DAT_20000e70 = '\\x06';\n          }\n          decodedValue1 = decode_and_improve_08008590(parameter);\n          decodedValue1 = extract_bits_08009798((int)decodedValue1,(int)((ulonglong)decodedValue1 >> 0x20));\n          DAT_20000e88 = calculate_shifted_value_08008bf0((int)decodedValue1,(int)((ulonglong)decodedValue1 >> 0x20));\n          break;\n        case 0x58:\n          values2[3] = decode_and_convert_to_float_0800056c(parameter);\n          counter11 = counter11 | 1;\n          break;\n        case 0x59:\n          values2[4] = decode_and_convert_to_float_0800056c(parameter);\n          counter11 = counter11 | 2;\n          break;\n        case 0x5a:\n          values2[5] = decode_and_convert_to_float_0800056c(parameter);\n          counter11 = counter11 | 4;\n        }\n        goto switchD_08000d18_caseD_47;\n      }\n      errorCode = DAT_20000e70;\n      if (DAT_20000e70 == '\\0') {\n        if (DAT_20000ea9 != '\\a') {\n          process_user_input_0800525c((int)DAT_20000e76);\n          process_and_initialize_input_08000220(DAT_20000e77);\n        }\n        if ((counter12 & 0x200) != 0) {\n          result = verify_memory_values_08004d7c(DAT_20000e8c,&value3);\n          if (result == 0) {\n            return '\\n';\n          }\n          DAT_20000e90 = value3;\n          DAT_20000e94 = value4;\n          DAT_20000e98 = value5;\n        }\n        switch(counter9) {\n        case '\\x01':\n          result = check_null_termination_08009228(tempValue7,0);\n          if (result == 0) {\n            if (DAT_20000ea9 != '\\a') {\n              process_data_08002408(tempValue7);\n            }\n          }\n          else {\n            DAT_20000e70 = '\\x06';\n          }\n          break;\n        case '\\x02':\n          decodedValue1 = decode_and_improve_08008590(tempValue7);\n          decodedValue1 = extract_bits_08009798((int)decodedValue1,(int)((ulonglong)decodedValue1 >> 0x20));\n          counter13 = calculate_value_08008ba0((int)decodedValue1,(int)((ulonglong)decodedValue1 >> 0x20));\n          if ((((shiftedValue2 == '\\x02') || (shiftedValue2 == '\\x14')) && (-1 < (int)counter13)) &&\n             ((int)counter13 < 7)) {\n            if ((counter11 == 0) && (shiftedValue2 == '\\x02')) {\n              DAT_20000e70 = '\\x06';\n            }\n            else {\n              if ((int)counter13 < 1) {\n                counter13 = (uint)DAT_20000e8c;\n              }\n              else {\n                counter13 = counter13 - 1;\n              }\n              result = verify_memory_values_08004d7c(counter13 & 0xff,values1);\n              if (result == 0) {\n                return '\\n';\n              }\n              for (counter4 = 0; counter4 < 3; counter4 = counter4 + 1) {\n                if (((int)(uint)counter11 >> counter4 & 1U) != 0) {\n                  if (shiftedValue2 == '\\x14') {\n                    tempValue2 = (uint)counter4;\n                    tempValue = calculate_floating_point_08008cd8(*(undefined4 *)(&DAT_20000e74 + (counter4 + 2) * 4),\n                                         values2[counter4 + 3]);\n                    values1[tempValue2] = tempValue;\n                  }\n                  else {\n                    values1[counter4] = values2[counter4 + 3];\n                  }\n                }\n              }\n              process_data_08004bf4(counter13 & 0xff,values1);\n              if (counter13 == DAT_20000e8c) {\n                DAT_20000e90 = values1[0];\n                DAT_20000e94 = values1[1];\n                DAT_20000e98 = values1[2];\n              }\n            }\n          }\n          else {\n            DAT_20000e70 = '\\x03';\n          }\n          counter11 = 0;\n          break;\n        case '\\x03':\n        case '\\x05':\n          if (counter11 != 0) {\n            for (counter3 = 0; counter3 < 3; counter3 = counter3 + 1) {\n              if (((int)(uint)counter11 >> counter3 & 1U) == 0) {\n                values2[counter3 + 3] = *(undefined4 *)(&DAT_20000e74 + (counter3 + 2) * 4);\n              }\n              else if (DAT_20000e74 == '\\0') {\n                tempValue2 = (uint)counter3;\n                tempValue = calculate_floating_point_08008cdc(values2[counter3 + 3],\n                                     *(undefined4 *)(&DAT_20000e74 + (counter3 + 2) * 4));\n                values2[tempValue2 + 3] = tempValue;\n              }\n              else {\n                tempValue3 = values2[counter3 + 3];\n                tempValue = calculate_floating_point_08008cdc(*(undefined4 *)(&DAT_20000e70 + (counter3 + 8) * 4),\n                                     *(undefined4 *)(&DAT_20000e74 + (counter3 + 10) * 4));\n                tempValue2 = (uint)counter3;\n                tempValue = calculate_floating_point_08008cdc(tempValue3,tempValue);\n                values2[tempValue2 + 3] = tempValue;\n              }\n            }\n            process_data_08001e98(values2[3],values2[4],values2[5],DAT_20000ed0,0);\n          }\n          if (counter9 == '\\x05') {\n            result = verify_memory_values_08004d7c(7,values1 + 3);\n            if (result == 0) {\n              return '\\n';\n            }\n          }\n          else {\n            result = verify_memory_values_08004d7c(6,values1 + 3);\n            if (result == 0) {\n              return '\\n';\n            }\n          }\n          process_data_08001e98(values1[3],value1,value2,DAT_20000ed0,0);\n          DAT_20000e7c = values1[3];\n          DAT_20000e80 = value1;\n          DAT_20000e84 = value2;\n          counter11 = 0;\n          break;\n        case '\\x04':\n        case '\\x06':\n          if (counter9 == '\\x06') {\n            process_data_08004bf4(7,&DAT_20000e7c);\n          }\n          else {\n            process_data_08004bf4(6,&DAT_20000e7c);\n          }\n          break;\n        case '\\a':\n          if (counter11 == 0) {\n            DAT_20000e70 = '\\x06';\n          }\n          else {\n            for (counter2 = 0; counter2 < 3; counter2 = counter2 + 1) {\n              if (((int)(uint)counter11 >> counter2 & 1U) != 0) {\n                tempValue = calculate_floating_point_08008cd8(*(undefined4 *)(&DAT_20000e74 + (counter2 + 2) * 4),\n                                     *(undefined4 *)(&DAT_20000e70 + (counter2 + 8) * 4));\n                tempValue2 = (uint)counter2;\n                tempValue = calculate_floating_point_08008cd8(tempValue,values2[counter2 + 3]);\n                *(undefined4 *)(&DAT_20000e74 + (tempValue2 + 10) * 4) = tempValue;\n              }\n            }\n          }\n          counter11 = 0;\n          break;\n        case '\\b':\n          fill_memory_with_byte_0800b430(&DAT_20000e9c,0,0xc);\n        }\n        if (((counter12 & 4) != 0) || (counter11 != 0)) {\n          if ((DAT_20000e72 != '\\0') &&\n             ((result = check_null_termination_08009228(floatValue6,0), result != 0 && (DAT_20000e71 != '\\x04')))) {\n            DAT_20000e70 = '\\x06';\n          }\n          if (((counter10 != '\\0') && (DAT_20000e71 != '\\0')) && (DAT_20000e71 != '\\x01')) {\n            DAT_20000e70 = '\\x06';\n          }\n          if (DAT_20000e70 != '\\0') {\n            return DAT_20000e70;\n          }\n          for (counter1 = 0; counter1 < 3; counter1 = counter1 + 1) {\n            if (((int)(uint)counter11 >> counter1 & 1U) == 0) {\n              values2[counter1 + 3] = *(undefined4 *)(&DAT_20000e74 + (counter1 + 2) * 4);\n            }\n            else if (counter10 == '\\0') {\n              if (DAT_20000e74 == '\\0') {\n                tempValue2 = (uint)counter1;\n                tempValue = calculate_floating_point_08008cdc(values2[counter1 + 3],\n                                     *(undefined4 *)(&DAT_20000e74 + (counter1 + 2) * 4));\n                values2[tempValue2 + 3] = tempValue;\n              }\n              else {\n                tempValue3 = values2[counter1 + 3];\n                tempValue = calculate_floating_point_08008cdc(*(undefined4 *)(&DAT_20000e70 + (counter1 + 8) * 4),\n                                     *(undefined4 *)(&DAT_20000e74 + (counter1 + 10) * 4));\n                tempValue2 = (uint)counter1;\n                tempValue = calculate_floating_point_08008cdc(tempValue3,tempValue);\n                values2[tempValue2 + 3] = tempValue;\n              }\n            }\n          }\n          switch(DAT_20000e71) {\n          case '\\0':\n            if (counter11 == 0) {\n              DAT_20000e70 = '\\x06';\n            }\n            else {\n              process_data_08001e98(values2[3],values2[4],values2[5],DAT_20000ed0,0);\n            }\n            break;\n          case '\\x01':\n            if (counter11 == 0) {\n              DAT_20000e70 = '\\x06';\n            }\n            else {\n              tempValue = floatValue6;\n              if (DAT_20000e72 == '\\0') {\n                tempValue = DAT_20000e78;\n              }\n              process_data_08001e98(values2[3],values2[4],values2[5],tempValue,DAT_20000e72);\n            }\n            break;\n          case '\\x02':\n          case '\\x03':\n            counter11 = counter11 & ~(byte)(1 << DAT_20000e8b);\n            if ((counter11 == 0) ||\n               (((result = is_string_concatenated_08009214(floatValue5,0), result != 0 &&\n                 (result = is_string_concatenated_08009214(values2[DAT_20000e89],0), result != 0)) &&\n                (result = is_string_concatenated_08009214(values2[DAT_20000e8a],0), result != 0)))) {\n              DAT_20000e70 = '\\x06';\n            }\n            else {\n              result = is_string_concatenated_08009214(floatValue5,0);\n              if (result == 0) {\n                local_4c = calculate_floating_point_08008cd8(values2[DAT_20000e89 + 3],\n                                        *(undefined4 *)(&DAT_20000e74 + (DAT_20000e89 + 2) * 4));\n                local_50 = calculate_floating_point_08008cd8(values2[DAT_20000e8a + 3],\n                                        *(undefined4 *)(&DAT_20000e74 + (DAT_20000e8a + 2) * 4));\n                fill_memory_with_byte_0800b430(values2,0,0xc);\n                tempValue = calculate_floating_point_08008eec(floatValue5,0x40800000);\n                tempValue = calculate_floating_point_08008eec(tempValue,floatValue5);\n                tempValue3 = calculate_floating_point_08008eec(local_4c,local_4c);\n                tempValue = calculate_floating_point_08008cd8(tempValue,tempValue3);\n                tempValue3 = calculate_floating_point_08008eec(local_50,local_50);\n                local_44 = calculate_floating_point_08008cd8(tempValue,tempValue3);\n                result = check_null_termination_08009228(local_44,0);\n                if (result != 0) {\n                  DAT_20000e70 = 4;\n                  return '\\x04';\n                }\n                decodedValue1 = decode_and_improve_08008590(local_44);\n                decodedValue1 = process_data_080098d0((int)decodedValue1,(int)((ulonglong)decodedValue1 >> 0x20));\n                decodedValue2 = decode_and_improve_08008590(local_4c);\n                decodedValue3 = decode_and_improve_08008590(local_50);\n                decodedValue2 = calculate_hypotenuse_0800981c((int)decodedValue2,(int)((ulonglong)decodedValue2 >> 0x20),(int)decodedValue3,\n                                     (int)((ulonglong)decodedValue3 >> 0x20));\n                decodedValue1 = decode_float_08008894((int)decodedValue1,(uint)((ulonglong)decodedValue1 >> 0x20) ^ 0x80000000,\n                                     (int)decodedValue2,(int)((ulonglong)decodedValue2 >> 0x20));\n                local_44 = convert_to_float_08008c30((int)decodedValue1,(int)((ulonglong)decodedValue1 >> 0x20));\n                if (DAT_20000e71 == '\\x03') {\n                  local_44 = local_44 ^ 0x80000000;\n                }\n                result = check_null_termination_08009228(floatValue5,0);\n                if (result != 0) {\n                  local_44 = local_44 ^ 0x80000000;\n                  floatValue5 = floatValue5 ^ 0x80000000;\n                }\n                tempValue = calculate_floating_point_08008eec(local_50,local_44);\n                tempValue = calculate_floating_point_08008cd8(local_4c,tempValue);\n                tempValue2 = (uint)DAT_20000e89;\n                tempValue = calculate_floating_point_08008eec(tempValue,0x3f000000);\n                values2[tempValue2] = tempValue;\n                tempValue = calculate_floating_point_08008eec(local_4c,local_44);\n                tempValue = calculate_floating_point_08008cdc(tempValue,local_50);\n                tempValue2 = (uint)DAT_20000e8a;\n                tempValue = calculate_floating_point_08008eec(tempValue,0x3f000000);\n                values2[tempValue2] = tempValue;\n              }\n              else {\n                decodedValue1 = decode_and_improve_08008590(values2[DAT_20000e89]);\n                decodedValue2 = decode_and_improve_08008590(values2[DAT_20000e8a]);\n                decodedValue1 = calculate_hypotenuse_0800981c((int)decodedValue1,(int)((ulonglong)decodedValue1 >> 0x20),(int)decodedValue2,\n                                     (int)((ulonglong)decodedValue2 >> 0x20));\n                floatValue5 = convert_to_float_08008c30((int)decodedValue1,(int)((ulonglong)decodedValue1 >> 0x20));\n              }\n              local_45 = DAT_20000e71 == '\\x02';\n              tempValue = floatValue6;\n              if (DAT_20000e72 == '\\0') {\n                tempValue = DAT_20000e78;\n              }\n              calculate_processed_data_08001f00(&DAT_20000e7c,values2 + 3,values2,DAT_20000e89,DAT_20000e8a,\n                           DAT_20000e8b,tempValue,DAT_20000e72,floatValue5,local_45);\n            }\n            break;\n          case '\\x04':\n            if (counter11 != 0) {\n              DAT_20000e70 = '\\x06';\n            }\n          }\n          if (DAT_20000e70 != '\\0') {\n            return DAT_20000e70;\n          }\n          DAT_20000e7c = values2[3];\n          DAT_20000e80 = values2[4];\n          DAT_20000e84 = values2[5];\n        }\n        errorCode = DAT_20000e70;\n        if (DAT_20000e75 != '\\0') {\n          process_active_user_data_08002fd4();\n          DAT_20000eb8 = 0;\n          if (DAT_20000e75 == '\\x02') {\n            initialize_and_check_flags_080025e8();\n            errorCode = DAT_20000e70;\n          }\n          else {\n            DAT_20000e75 = '\\0';\n            errorCode = DAT_20000e70;\n          }\n        }\n      }\n    }\n  }\n  return errorCode;\n}\n\n",
            "renaming": {
                "FUN_080005b4": "process_input_080005b4",
                "param_1": "input",
                "iVar1": "result",
                "uVar2": "tempValue",
                "cVar3": "errorCode",
                "uVar4": "tempValue2",
                "uVar5": "tempValue3",
                "uVar6": "decodedValue1",
                "uVar7": "decodedValue2",
                "uVar8": "decodedValue3",
                "local_94": "values1",
                "local_84": "value1",
                "local_80": "value2",
                "local_7c": "value3",
                "uStack_78": "value4",
                "uStack_74": "value5",
                "auStack_70": "values2",
                "local_58": "parameter",
                "local_52": "character",
                "local_26": "counter12",
                "local_27": "counter11",
                "local_2d": "counter10",
                "local_2e": "counter9",
                "local_2f": "counter8",
                "local_24": "counter13",
                "local_39": "shiftedValue2",
                "local_38": "floatValue5",
                "local_34": "tempValue7",
                "local_3d": "counter1",
                "local_3c": "counter2",
                "local_3b": "counter3",
                "local_3a": "counter4",
                "local_2c": "floatValue6"
            },
            "calling": [
                "FUN_08003b98",
                "FUN_080039bc"
            ],
            "called": [
                "FUN_08008cdc",
                "FUN_08008bf0",
                "FUN_08009798",
                "FUN_08000478",
                "FUN_0800184c",
                "FUN_08008eec",
                "FUN_08009228",
                "FUN_08008c30",
                "FUN_0800b430",
                "FUN_0800923c",
                "FUN_0800056c",
                "FUN_08004d7c",
                "FUN_08001f00",
                "FUN_08008cd8",
                "FUN_080025e8",
                "FUN_08004bf4",
                "FUN_08001e98",
                "FUN_08002408",
                "FUN_08008590",
                "FUN_0800525c",
                "FUN_08002fd4",
                "FUN_08009214",
                "FUN_0800981c",
                "FUN_080098d0",
                "FUN_08008894",
                "FUN_08008ba0",
                "FUN_08000220"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800184c": {
            "entrypoint": "0x0800184c",
            "current_name": "validate_and_extract_0800184c",
            "code": "\nundefined4 validate_and_extract_0800184c(byte *output_byte,undefined4 input_value,int base_address,byte *index_ptr)\n\n{\n  int result;\n  undefined4 success_flag;\n  \n  if (*(char *)(base_address + (uint)*index_ptr) == '\\0') {\n    success_flag = 0;\n  }\n  else {\n    *output_byte = *(byte *)(base_address + (uint)*index_ptr);\n    if ((*output_byte < 0x41) || (0x5a < *output_byte)) {\n      DAT_20000e70 = 2;\n      success_flag = 0;\n    }\n    else {\n      *index_ptr = *index_ptr + 1;\n      result = extract_number_from_string_08002638(base_address,index_ptr,input_value);\n      if (result == 0) {\n        DAT_20000e70 = 1;\n        success_flag = 0;\n      }\n      else {\n        success_flag = 1;\n      }\n    }\n  }\n  return success_flag;\n}\n\n",
            "renaming": {
                "FUN_0800184c": "validate_and_extract_0800184c",
                "param_1": "output_byte",
                "param_2": "input_value",
                "param_3": "base_address",
                "param_4": "index_ptr",
                "iVar1": "result",
                "uVar2": "success_flag"
            },
            "calling": [
                "FUN_080005b4"
            ],
            "called": [
                "FUN_08002638"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080018cc": {
            "entrypoint": "0x080018cc",
            "current_name": "update_data_register_080018cc",
            "code": "\n\n\nvoid updateDataRegister_080018cc(uint new_value)\n\n{\n  _DAT_40021014 = new_value | _DAT_40021014 & 0xfffffaaf;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080018cc": "update_data_register_080018cc",
                "param_1": "new_value"
            },
            "calling": [
                "FUN_08001994"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080018fc": {
            "entrypoint": "0x080018fc",
            "current_name": "set_bits_in_register_080018fc",
            "code": "\n\n\nvoid setBitsInRegister_080018fc(uint newBits)\n\n{\n  _DAT_40021014 = newBits | _DAT_40021014 & 0xfffff55f;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080018fc": "set_bits_in_register_080018fc",
                "param_1": "newBits"
            },
            "calling": [
                "FUN_08001994"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800192c": {
            "entrypoint": "0x0800192c",
            "current_name": "check_flag_status_0800192c",
            "code": "\nvoid checkFlagStatus_0800192c(void)\n\n{\n  DAT_20000e4c = (uint)((DAT_20000ee4 & 8) != 0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800192c": "check_flag_status_0800192c"
            },
            "calling": [
                "FUN_08001ddc",
                "FUN_08004e30"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800195c": {
            "entrypoint": "0x0800195c",
            "current_name": "initialize_and_check_flags_0800195c",
            "code": "\nvoid initialize_and_check_flags_0800195c(void)\n\n{\n  if ((DAT_20000ea9 != '\\x06') && ((DAT_20000eaa & 0x20) == 0)) {\n    initialize_and_check_flags_0800195c_080025e8();\n    DAT_20000eaa = DAT_20000eaa | 0x40;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800195c": "initialize_and_check_flags_0800195c"
            },
            "calling": [
                "FUN_080074c8"
            ],
            "called": [
                "FUN_080025e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001994": {
            "entrypoint": "0x08001994",
            "current_name": "process_data_08001994",
            "code": "\nvoid processData_08001994(byte flags,char flag1,char flag2,undefined4 param)\n\n{\n  undefined4 result1;\n  uint result2;\n  undefined8 result3;\n  undefined8 result4;\n  byte temp1;\n  uint value1;\n  uint value2;\n  uint value3;\n  ushort data1;\n  uint result5;\n  int shiftedValue;\n  undefined4 value4;\n  uint maxValue;\n  uint sumValue;\n  ushort temp2;\n  uint incrementValue;\n  uint counterValue;\n  int diffValue;\n  int offset1;\n  int offset2;\n  int offset3;\n  ushort mask;\n  uint threshold;\n  char temp3;\n  \n  temp3 = '\\0';\n  fill_memory_with_byte_0800b430(&value1,0,0xc);\n  if ((flags & 1) != 0) {\n    temp3 = temp3 + '\\x01';\n    result3 = decode_and_improve_08008590(DAT_20000ebc);\n    value1 = calculate_result_080095b8((int)result3,(int)((ulonglong)result3 >> 0x20));\n  }\n  if ((flags & 2) != 0) {\n    temp3 = temp3 + '\\x01';\n    result3 = decode_and_improve_08008590(DAT_20000ec0);\n    value2 = calculate_result_080095b8((int)result3,(int)((ulonglong)result3 >> 0x20));\n  }\n  if ((flags & 4) != 0) {\n    temp3 = temp3 + '\\x01';\n    result3 = decode_and_improve_08008590(DAT_20000ec4);\n    value3 = calculate_result_080095b8((int)result3,(int)((ulonglong)result3 >> 0x20));\n  }\n  result2 = value3;\n  if (value3 < value2) {\n    result2 = value2;\n  }\n  maxValue = value1;\n  if (value1 < result2) {\n    maxValue = result2;\n  }\n  result3 = shift_and_concat_0800854c(maxValue);\n  result4 = shift_and_concat_0800854c(temp3);\n  result4 = process_data_080098d0((int)result4,(int)((ulonglong)result4 >> 0x20));\n  result3 = decode_float_08008894((int)result3,(int)((ulonglong)result3 >> 0x20),(int)result4,\n                       (int)((ulonglong)result4 >> 0x20));\n  value4 = convert_to_float_08008c30((int)result3,(int)((ulonglong)result3 >> 0x20));\n  result1 = calculate_floating_point_08008eec(DAT_20000edc,value4);\n  result1 = calculate_float_08009054(result1,0x453b8000);\n  result3 = decode_and_improve_08008590(result1);\n  result3 = calculate_value_08009318((int)result3,(int)((ulonglong)result3 >> 0x20));\n  shiftedValue = calculate_shifted_value_08008bf0((int)result3,(int)((ulonglong)result3 >> 0x20));\n  result3 = shift_and_concat_0800854c(temp3);\n  result3 = process_data_080098d0((int)result3,(int)((ulonglong)result3 >> 0x20));\n  result4 = decode_and_improve_08008590(param);\n  result3 = calculate_result_08008640((int)result3,(int)((ulonglong)result3 >> 0x20),(int)result4,\n                       (int)((ulonglong)result4 >> 0x20));\n  result1 = convert_to_float_08008c30((int)result3,(int)((ulonglong)result3 >> 0x20));\n  result1 = calculate_floating_point_08008eec(value4,result1);\n  result1 = calculate_float_08009054(0x4c64e1c0,result1);\n  result3 = decode_and_improve_08008590(result1);\n  result5 = calculate_result_080095b8((int)result3,(int)((ulonglong)result3 >> 0x20));\n  threshold = 75000;\n  if (result5 < 75000) {\n    threshold = result5;\n  }\n  data1 = DAT_20000ed4;\n  mask = DAT_20000ed6 ^ DAT_20000ee6 & 0xaa0;\n  if (flag1 == '\\0') {\n    mask = mask ^ 0xaa0;\n  }\n  set_bits_in_register_080018fc(mask);\n  update_data_register_080018cc(data1);\n  offset1 = -(maxValue >> 1);\n  diffValue = threshold - DAT_20000ec9;\n  counterValue = 0;\n  incrementValue = 10000;\n  temp1 = flags;\n  offset2 = offset1;\n  offset3 = offset1;\n  while( true ) {\n    temp2 = data1;\n    sumValue = calculate_sum_080078f4();\n    if (flag2 == '\\0') {\n      sumValue = sumValue ^ 0x1e;\n    }\n    if (((temp1 & 1) != 0) && (offset3 = offset3 + value1, 0 < offset3)) {\n      if ((sumValue & 0x10) == 0) {\n        temp1 = temp1 & 0xfe;\n      }\n      else {\n        temp2 = temp2 ^ 0x10;\n      }\n      offset3 = offset3 - maxValue;\n    }\n    if (((temp1 & 2) != 0) && (offset2 = offset2 + value2, 0 < offset2)) {\n      if ((sumValue & 8) == 0) {\n        temp1 = temp1 & 0xfd;\n      }\n      else {\n        temp2 = temp2 ^ 0x440;\n      }\n      offset2 = offset2 - maxValue;\n    }\n    if (((temp1 & 4) != 0) && (offset1 = offset1 + value3, 0 < offset1)) {\n      if ((sumValue & 4) == 0) {\n        temp1 = temp1 & 0xfb;\n      }\n      else {\n        temp2 = temp2 ^ 0x100;\n      }\n      offset1 = offset1 - maxValue;\n    }\n    if ((temp1 == 0) || ((DAT_20000eaa & 0x10) != 0)) break;\n    update_data_register_080018cc(temp2);\n    FUNC_08002828(DAT_20000ec9);\n    update_data_register_080018cc(data1);\n    FUNC_08002828(diffValue);\n    if ((result5 < threshold) && (incrementValue = threshold + incrementValue, 20000 < incrementValue)) {\n      incrementValue = incrementValue - 20000;\n      counterValue = shiftedValue + counterValue;\n      threshold = 60000000 / counterValue;\n      if (threshold < result5) {\n        threshold = result5;\n      }\n      diffValue = threshold - DAT_20000ec9;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001994": "process_data_08001994",
                "param_1": "flags",
                "param_2": "flag1",
                "param_3": "flag2",
                "param_4": "param",
                "uVar1": "result1",
                "uVar2": "result2",
                "uVar3": "result3",
                "uVar4": "result4",
                "local_61": "temp1",
                "local_5c": "value1",
                "local_58": "value2",
                "local_54": "value3",
                "local_4e": "data1",
                "local_4c": "result5",
                "local_48": "shiftedValue",
                "local_44": "value4",
                "local_40": "maxValue",
                "local_3c": "sumValue",
                "local_36": "temp2",
                "local_34": "incrementValue",
                "local_30": "counterValue",
                "local_2c": "diffValue",
                "local_28": "offset1",
                "local_24": "offset2",
                "local_20": "offset3",
                "local_1a": "mask",
                "local_18": "threshold",
                "local_11": "temp3"
            },
            "calling": [
                "FUN_08001d4c"
            ],
            "called": [
                "FUN_080095b8",
                "FUN_08008bf0",
                "FUN_0800854c",
                "FUN_08009054",
                "FUN_08009318",
                "FUN_080078f4",
                "FUN_08008eec",
                "FUN_080018cc",
                "FUN_08002828",
                "FUN_08008590",
                "FUN_08008640",
                "FUN_08008c30",
                "FUN_080098d0",
                "FUN_080018fc",
                "FUN_0800b430",
                "FUN_08008894"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001d4c": {
            "entrypoint": "0x08001d4c",
            "current_name": "initialize_and_process_data_08001d4c",
            "code": "\nvoid initialize_and_process_data_08001d4c(void)\n\n{\n  char updated_counter;\n  char loop_counter;\n  \n  initialize_data_08005790();\n  process_data_08001994(4,1,0,DAT_20000eec);\n  process_data_08001994(3,1,0,DAT_20000eec);\n  FUNC_08002814(DAT_20000ef0);\n  loop_counter = '\\x02';\n  while( true ) {\n    updated_counter = loop_counter + -1;\n    if (loop_counter == '\\0') break;\n    process_data_08001994(7,0,1,DAT_20000ee8);\n    FUNC_08002814(DAT_20000ef0);\n    loop_counter = updated_counter;\n    if ('\\0' < updated_counter) {\n      process_data_08001994(7,1,0,DAT_20000ee8);\n      FUNC_08002814(DAT_20000ef0);\n    }\n  }\n  initialize_flags_080057e4();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001d4c": "initialize_and_process_data_08001d4c",
                "local_9": "loop_counter",
                "cVar1": "updated_counter"
            },
            "calling": [
                "FUN_080024c4"
            ],
            "called": [
                "FUN_08005790",
                "FUN_080057e4",
                "FUN_08001994",
                "FUN_08002814"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001ddc": {
            "entrypoint": "0x08001ddc",
            "current_name": "main_loop_08001ddc",
            "code": "\nvoid main_loop_08001ddc(void)\n\n{\n  FUNC_08008244();\n  improve_code();\n  initialize_and_update_data();\n  fill_memory_with_byte(&DAT_20000ea8,0,0x14);\n  DAT_20000ea8 = '\\x01';\n  DAT_20000ea9 = '\\x01';\n  do {\n    if (DAT_20000ea8 != '\\0') {\n      FUNC_080082ba();\n      initialize_memory();\n      initialize_other_memory();\n      initialize_grbl_and_data();\n      initialize_application();\n      initialize_and_reset();\n      check_flag_status();\n      initialize_memory_again();\n      initialize_and_calculate_float_values();\n      DAT_20000ea8 = '\\0';\n      DAT_20000eaa = 0;\n      if ((DAT_20000ee4 & 2) != 0) {\n        DAT_20000eb8 = 1;\n      }\n      if ((DAT_20000ea9 == '\\x01') && ((DAT_20000ee4 & 0x10) != 0)) {\n        DAT_20000ea9 = '\\x06';\n      }\n      if (DAT_20000ea9 == '\\x06') {\n        display_status_message(2);\n      }\n      else {\n        DAT_20000ea9 = '\\0';\n        process_data();\n      }\n    }\n    process_and_update_data();\n    process_user_input();\n  } while( true );\n}\n\n",
            "renaming": {
                "improve_code_080051b4": "improve_code",
                "initialize_and_update_data_0800583c": "initialize_and_update_data",
                "fill_memory_with_byte_0800b430": "fill_memory_with_byte",
                "FUN_08001ddc": "main_loop_08001ddc",
                "initialize_memory_08002f24": "initialize_memory",
                "initialize_memory_080004ac": "initialize_other_memory",
                "initialize_grbl_and_data_080039a0": "initialize_grbl_and_data",
                "initialize_application_08005238": "initialize_application",
                "initialize_and_reset_080001f8": "initialize_and_reset",
                "check_flag_status_0800192c": "check_flag_status",
                "initialize_memory_08005814": "initialize_memory_again",
                "initialize_and_calculate_float_values_0800283a": "initialize_and_calculate_float_values",
                "process_data_080039bc": "process_data",
                "display_status_message_080041a0": "display_status_message",
                "process_and_update_data_08003a74": "process_and_update_data",
                "process_user_input_08003f34": "process_user_input"
            },
            "calling": [
                "FUN_08007540"
            ],
            "called": [
                "FUN_0800583c",
                "FUN_08005814",
                "FUN_080001f8",
                "FUN_080082ba",
                "FUN_08003a74",
                "FUN_08008244",
                "FUN_08002f24",
                "FUN_080004ac",
                "FUN_08003f34",
                "FUN_0800283a",
                "FUN_080039a0",
                "FUN_08005238",
                "FUN_080041a0",
                "FUN_0800b430",
                "FUN_080039bc",
                "FUN_0800192c",
                "FUN_080051b4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001e98": {
            "entrypoint": "0x08001e98",
            "current_name": "process_data_08001e98",
            "code": "\nvoid processData_08001e98(undefined4 input1,undefined4 input2,undefined4 input3,undefined4 input4,\n                 undefined input5)\n\n{\n  int isEqual;\n  \n  if (DAT_20000ea9 != '\\a') {\n    do {\n      processAndUpdateData();\n      if (DAT_20000ea8 != '\\0') {\n        return;\n      }\n      isEqual = areDataEqual();\n    } while (isEqual != 0);\n    processBinaryData(input1,input2,input3,input4,input5);\n    if (DAT_20000ea9 == '\\0') {\n      DAT_20000ea9 = '\\x02';\n    }\n    if (DAT_20000eb8 != '\\0') {\n      initializeIfDataPending();\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001e98": "process_data_08001e98",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "param_5": "input5",
                "iVar1": "isEqual",
                "process_and_update_data_08003a74": "processAndUpdateData",
                "are_data_equal_08002fac": "areDataEqual",
                "process_binary_data_08003004": "processBinaryData",
                "initialize_if_data_pending_0800585c": "initializeIfDataPending"
            },
            "calling": [
                "FUN_08001f00",
                "FUN_080005b4",
                "FUN_080024c4"
            ],
            "called": [
                "FUN_08003004",
                "FUN_0800585c",
                "FUN_08003a74",
                "FUN_08002fac"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001f00": {
            "entrypoint": "0x08001f00",
            "current_name": "calculate_processed_data_08001f00",
            "code": "\nvoid calculateProcessedData_08001f00(int inputArray1,undefined4 *inputArray2,int inputArraySize,byte index1,byte index2,byte index3\n                 ,undefined4 constant1,char condition1,undefined4 constant2,char condition2)\n\n{\n  undefined4 result1;\n  undefined4 result2;\n  int loopCounter;\n  uint tempResult;\n  undefined8 decodedResult1;\n  undefined8 decodedResult2;\n  uint processedDataArray [4];\n  undefined4 localVar1;\n  undefined4 localVar2;\n  undefined4 localVar3;\n  undefined4 localVar4;\n  undefined4 localVar5;\n  undefined4 localVar6;\n  ushort localVar7;\n  undefined4 localVar8;\n  undefined4 localVar9;\n  undefined4 localVar10;\n  uint localVar11;\n  undefined4 localVar12;\n  undefined4 localVar13;\n  char localChar;\n  ushort localValue;\n  undefined4 finalResult;\n  uint localValue1;\n  uint localValue2;\n  \n  localVar13 = calculate_floating_point_08008cdc(*(undefined4 *)((uint)index1 * 4 + inputArray1),\n                          *(undefined4 *)((uint)index1 * 4 + inputArraySize));\n  localVar12 = calculate_floating_point_08008cdc(*(undefined4 *)((uint)index2 * 4 + inputArray1),\n                          *(undefined4 *)((uint)index2 * 4 + inputArraySize));\n  localVar11 = calculate_floating_point_08008cd8(inputArray2[index3],*(undefined4 *)((uint)index3 * 4 + inputArray1));\n  localValue2 = *(uint *)((uint)index1 * 4 + inputArraySize) ^ 0x80000000;\n  localValue1 = *(uint *)((uint)index2 * 4 + inputArraySize) ^ 0x80000000;\n  localVar10 = calculate_floating_point_08008cd8(inputArray2[index1],localVar13);\n  localVar9 = calculate_floating_point_08008cd8(inputArray2[index2],localVar12);\n  result1 = calculate_floating_point_08008eec(localValue2,localVar9);\n  result2 = calculate_floating_point_08008eec(localValue1,localVar10);\n  result1 = calculate_floating_point_08008cd8(result1,result2);\n  decodedResult1 = decode_and_improve_08008590(result1);\n  result1 = calculate_floating_point_08008eec(localValue2,localVar10);\n  result2 = calculate_floating_point_08008eec(localValue1,localVar9);\n  result1 = calculate_floating_point_08008cdc(result1,result2);\n  decodedResult2 = decode_and_improve_08008590(result1);\n  decodedResult1 = calculate_float_result_thunk_08009990((int)decodedResult1,(int)((ulonglong)decodedResult1 >> 0x20),(int)decodedResult2,\n                             (int)((ulonglong)decodedResult2 >> 0x20));\n  finalResult = convert_to_float_08008c30((int)decodedResult1,(int)((ulonglong)decodedResult1 >> 0x20));\n  if (condition2 == '\\0') {\n    loopCounter = concatenate_and_return_or_0800923c(finalResult,0);\n    if (loopCounter != 0) {\n      decodedResult1 = decode_and_improve_08008590(finalResult);\n      decodedResult1 = calculate_result_080082d4((int)decodedResult1,(int)((ulonglong)decodedResult1 >> 0x20),0x54442d18,0x401921fb);\n      finalResult = convert_to_float_08008c30((int)decodedResult1,(int)((ulonglong)decodedResult1 >> 0x20));\n    }\n  }\n  else {\n    loopCounter = check_concatenation_result_08009250(finalResult,0);\n    if (loopCounter != 0) {\n      decodedResult1 = decode_and_improve_08008590(finalResult);\n      decodedResult1 = reverse_binary_calculation_080082d0((int)decodedResult1,(int)((ulonglong)decodedResult1 >> 0x20),0x54442d18,0x401921fb);\n      finalResult = convert_to_float_08008c30((int)decodedResult1,(int)((ulonglong)decodedResult1 >> 0x20));\n    }\n  }\n  result1 = calculate_floating_point_08008eec(finalResult,constant2);\n  decodedResult1 = decode_and_improve_08008590(result1);\n  decodedResult2 = decode_and_improve_08008590(localVar11 & 0x7fffffff);\n  decodedResult1 = calculate_hypotenuse_0800981c((int)decodedResult1,(int)((ulonglong)decodedResult1 >> 0x20),(int)decodedResult2,\n                       (int)((ulonglong)decodedResult2 >> 0x20));\n  localVar8 = convert_to_float_08008c30((int)decodedResult1,(int)((ulonglong)decodedResult1 >> 0x20));\n  loopCounter = is_string_concatenated_08009214(localVar8,0);\n  if (loopCounter == 0) {\n    result1 = calculate_float_08009054(localVar8,DAT_20000ed8);\n    decodedResult1 = decode_and_improve_08008590(result1);\n    decodedResult1 = calculate_result_080094c0((int)decodedResult1,(int)((ulonglong)decodedResult1 >> 0x20));\n    localVar7 = calculate_shifted_value_08008bf0((int)decodedResult1,(int)((ulonglong)decodedResult1 >> 0x20));\n    if (condition1 != '\\0') {\n      result1 = calculate_signed_magnitude_08008e44(localVar7);\n      constant1 = calculate_floating_point_08008eec(constant1,result1);\n    }\n    result1 = calculate_signed_magnitude_08008e44(localVar7);\n    localVar6 = calculate_float_08009054(finalResult,result1);\n    result1 = calculate_signed_magnitude_08008e44(localVar7);\n    localVar5 = calculate_float_08009054(localVar11,result1);\n    decodedResult1 = decode_and_improve_08008590(localVar6);\n    decodedResult1 = calculate_result_08008640((int)decodedResult1,(int)((ulonglong)decodedResult1 >> 0x20),0,0x3fe00000);\n    decodedResult2 = decode_and_improve_08008590(localVar6);\n    decodedResult1 = calculate_result_08008640((int)decodedResult1,(int)((ulonglong)decodedResult1 >> 0x20),(int)decodedResult2,\n                         (int)((ulonglong)decodedResult2 >> 0x20));\n    decodedResult1 = reverse_binary_calculation_080082d0(0,0x3ff00000,(int)decodedResult1,(int)((ulonglong)decodedResult1 >> 0x20));\n    localVar4 = convert_to_float_08008c30((int)decodedResult1,(int)((ulonglong)decodedResult1 >> 0x20));\n    localVar3 = localVar6;\n    localChar = '\\0';\n    processedDataArray[index3] = *(uint *)(inputArray1 + (uint)index3 * 4);\n    for (localValue = 1; localValue < localVar7; localValue = localValue + 1) {\n      if ((int)localChar < (int)(uint)DAT_20000efa) {\n        result1 = calculate_floating_point_08008eec(localValue2,localVar3);\n        result2 = calculate_floating_point_08008eec(localValue1,localVar4);\n        processedDataArray[3] = calculate_floating_point_08008cdc(result1,result2);\n        result1 = calculate_floating_point_08008eec(localValue2,localVar4);\n        result2 = calculate_floating_point_08008eec(localValue1,localVar3);\n        localValue2 = calculate_floating_point_08008cd8(result1,result2);\n        localValue1 = processedDataArray[3];\n        localChar = localChar + '\\x01';\n      }\n      else {\n        result1 = calculate_signed_magnitude_08008e44(localValue);\n        result1 = calculate_floating_point_08008eec(result1,localVar6);\n        decodedResult1 = decode_and_improve_08008590(result1);\n        decodedResult1 = calculate_result_08009410((int)decodedResult1,(int)((ulonglong)decodedResult1 >> 0x20));\n        localVar2 = convert_to_float_08008c30((int)decodedResult1,(int)((ulonglong)decodedResult1 >> 0x20));\n        result1 = calculate_signed_magnitude_08008e44(localValue);\n        result1 = calculate_floating_point_08008eec(result1,localVar6);\n        decodedResult1 = decode_and_improve_08008590(result1);\n        decodedResult1 = calculate_result_080096e8((int)decodedResult1,(int)((ulonglong)decodedResult1 >> 0x20));\n        localVar1 = convert_to_float_08008c30((int)decodedResult1,(int)((ulonglong)decodedResult1 >> 0x20));\n        result1 = calculate_floating_point_08008eec(*(uint *)((uint)index1 * 4 + inputArraySize) ^ 0x80000000,localVar2);\n        result2 = calculate_floating_point_08008eec(*(undefined4 *)((uint)index2 * 4 + inputArraySize),localVar1);\n        localValue2 = calculate_floating_point_08008cdc(result1,result2);\n        result1 = calculate_floating_point_08008eec(*(uint *)((uint)index1 * 4 + inputArraySize) ^ 0x80000000,localVar1);\n        result2 = calculate_floating_point_08008eec(*(undefined4 *)((uint)index2 * 4 + inputArraySize),localVar2);\n        localValue1 = calculate_floating_point_08008cd8(result1,result2);\n        localChar = '\\0';\n      }\n      tempResult = calculate_floating_point_08008cdc(localVar13,localValue2);\n      processedDataArray[index1] = tempResult;\n      tempResult = calculate_floating_point_08008cdc(localVar12,localValue1);\n      processedDataArray[index2] = tempResult;\n      tempResult = calculate_floating_point_08008cdc(processedDataArray[index3],localVar5);\n      processedDataArray[index3] = tempResult;\n      process_data_08001e98(processedDataArray[0],processedDataArray[1],processedDataArray[2],constant1,condition1);\n      if (DAT_20000ea8 != '\\0') {\n        return;\n      }\n    }\n    process_data_08001e98(*inputArray2,inputArray2[1],inputArray2[2],constant1,condition1);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001f00": "calculate_processed_data_08001f00",
                "param_1": "inputArray1",
                "param_2": "inputArray2",
                "param_3": "inputArraySize",
                "param_4": "index1",
                "param_5": "index2",
                "param_6": "index3",
                "param_7": "constant1",
                "param_8": "condition1",
                "param_9": "constant2",
                "param_10": "condition2",
                "uVar1": "result1",
                "uVar2": "result2",
                "iVar3": "loopCounter",
                "uVar4": "tempResult",
                "uVar5": "decodedResult1",
                "uVar6": "decodedResult2",
                "local_6c": "processedDataArray",
                "local_5c": "localVar1",
                "local_58": "localVar2",
                "local_54": "localVar3",
                "local_50": "localVar4",
                "local_4c": "localVar5",
                "local_48": "localVar6",
                "local_42": "localVar7",
                "local_40": "localVar8",
                "local_3c": "localVar9",
                "local_38": "localVar10",
                "local_34": "localVar11",
                "local_30": "localVar12",
                "local_2c": "localVar13",
                "local_27": "localChar",
                "local_26": "localValue",
                "local_24": "finalResult",
                "local_20": "localValue1",
                "local_1c": "localValue2"
            },
            "calling": [
                "FUN_080005b4"
            ],
            "called": [
                "FUN_08008cdc",
                "FUN_080082d4",
                "FUN_080094c0",
                "FUN_08008bf0",
                "FUN_080096e8",
                "FUN_08008cd8",
                "FUN_08009054",
                "FUN_080082d0",
                "FUN_08001e98",
                "FUN_08008eec",
                "thunk_FUN_08009990",
                "FUN_08008590",
                "FUN_08008e44",
                "FUN_08008640",
                "FUN_08009410",
                "FUN_08008c30",
                "FUN_08009214",
                "FUN_0800981c",
                "FUN_0800923c",
                "FUN_08009250"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002408": {
            "entrypoint": "0x08002408",
            "current_name": "process_data_08002408",
            "code": "\nvoid process_data_08002408(undefined4 data)\n\n{\n  undefined2 result_shifted;\n  undefined4 float_val1;\n  undefined4 float_val2;\n  undefined8 decoded_val;\n  ushort iteration_count;\n  \n  float_val1 = calculate_floating_point_08008eec(data,0x41a00000);\n  decoded_val = decode_and_improve_08008590(float_val1);\n  decoded_val = calculate_result_080094c0((int)decoded_val,(int)((ulonglong)decoded_val >> 0x20));\n  iteration_count = calculate_shifted_value_08008bf0((int)decoded_val,(int)((ulonglong)decoded_val >> 0x20));\n  process_active_user_data_08002fd4();\n  float_val1 = calculate_floating_point_08008eec(data,0x447a0000);\n  float_val2 = calculate_signed_magnitude_08008e44((uint)iteration_count * 0x32);\n  float_val1 = calculate_floating_point_08008cd8(float_val1,float_val2);\n  decoded_val = decode_and_improve_08008590(float_val1);\n  decoded_val = calculate_result_080094c0((int)decoded_val,(int)((ulonglong)decoded_val >> 0x20));\n  result_shifted = calculate_shifted_value_08008bf0((int)decoded_val,(int)((ulonglong)decoded_val >> 0x20));\n  FUNC_08002814(result_shifted);\n  while ((iteration_count != 0 && (process_and_update_data_08003a74(), DAT_20000ea8 == '\\0'))) {\n    check_param_value_and_return_080002a0(0x32);\n    iteration_count = iteration_count - 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002408": "process_data_08002408",
                "param_1": "data",
                "uVar1": "result_shifted",
                "uVar2": "float_val1",
                "uVar3": "float_val2",
                "uVar4": "decoded_val",
                "local_12": "iteration_count"
            },
            "calling": [
                "FUN_080005b4"
            ],
            "called": [
                "FUN_080094c0",
                "FUN_08008bf0",
                "FUN_08008eec",
                "FUN_08008590",
                "FUN_08008e44",
                "FUN_08008cd8",
                "FUN_08002fd4",
                "FUN_08003a74",
                "FUN_080002a0",
                "FUN_08002814"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080024c4": {
            "entrypoint": "0x080024c4",
            "current_name": "initialize_data_processing_080024c4",
            "code": "\nvoid initializeDataProcessing_080024c4(void)\n\n{\n  undefined4 uVar1;\n  undefined4 uVar2;\n  undefined4 uVar3;\n  char isLocalData3;\n  char isLocalData2;\n  char isLocalData1;\n  \n  DAT_20000ea9 = 5;\n  DAT_20000e4c = 0;\n  initialize_and_process_data_08001d4c();\n  process_and_update_data_08003a74();\n  if (DAT_20000ea8 == '\\0') {\n    fill_memory_with_byte_0800b430(&DAT_20000eac,0,0xc);\n    initialize_and_calculate_float_values_0800283a();\n    DAT_20000ea9 = 0;\n    if ((DAT_20000ee6 & 0x20) == 0) {\n      isLocalData1 = -1;\n    }\n    else {\n      isLocalData1 = '\\x01';\n    }\n    if ((DAT_20000ee6 & 0x80) == 0) {\n      isLocalData2 = -1;\n    }\n    else {\n      isLocalData2 = '\\x01';\n    }\n    if ((DAT_20000ee6 & 0x200) == 0) {\n      isLocalData3 = -1;\n    }\n    else {\n      isLocalData3 = '\\x01';\n    }\n    uVar1 = calculate_signed_magnitude_08008e44((int)isLocalData1);\n    uVar1 = calculate_floating_point_08008eec(uVar1,DAT_20000ef4);\n    uVar2 = calculate_signed_magnitude_08008e44((int)isLocalData2);\n    uVar2 = calculate_floating_point_08008eec(uVar2,DAT_20000ef4);\n    uVar3 = calculate_signed_magnitude_08008e44((int)isLocalData3);\n    uVar3 = calculate_floating_point_08008eec(uVar3,DAT_20000ef4);\n    process_data_08001e98(uVar1,uVar2,uVar3,DAT_20000eec,0);\n    initialize_if_data_pending_0800585c();\n    process_active_user_data_08002fd4();\n    initialize_and_calculate_float_values_0800283a();\n    if ((DAT_20000ee4 & 8) != 0) {\n      DAT_20000e4c = 1;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080024c4": "initialize_data_processing_080024c4",
                "local_13": "isLocalData3",
                "local_12": "isLocalData2",
                "local_11": "isLocalData1"
            },
            "calling": [
                "FUN_08003b98"
            ],
            "called": [
                "FUN_08001e98",
                "FUN_08008eec",
                "FUN_0800585c",
                "FUN_08008e44",
                "FUN_08001d4c",
                "FUN_0800283a",
                "FUN_08002fd4",
                "FUN_08003a74",
                "FUN_0800b430"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080025e8": {
            "entrypoint": "0x080025e8",
            "current_name": "initialize_and_check_flags_080025e8",
            "code": "\nvoid initialize_and_check_flags_080025e8(void)\n\n{\n  if ((DAT_20000eaa & 0x10) == 0) {\n    DAT_20000eaa = DAT_20000eaa | 0x10;\n    initialize_application();\n    initialize();\n    if (DAT_20000ea9 - 3 < 3) {\n      DAT_20000eaa = DAT_20000eaa | 0x20;\n      initialize_flags();\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080025e8": "initialize_and_check_flags_080025e8",
                "initialize_application_08005250": "initialize_application",
                "initialize_08000210": "initialize",
                "initialize_flags_080057e4": "initialize_flags"
            },
            "calling": [
                "FUN_08003a18",
                "FUN_08003b98",
                "FUN_08005900",
                "FUN_080005b4",
                "FUN_0800195c"
            ],
            "called": [
                "FUN_080057e4",
                "FUN_08005250",
                "FUN_08000210"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002638": {
            "entrypoint": "0x08002638",
            "current_name": "extract_number_from_string_08002638",
            "code": "\nundefined4 extractNumberFromString_08002638(int baseAddress,byte *byteArray,uint *result)\n\n{\n  byte digit;\n  bool isNegative;\n  bool isFloatingPoint;\n  int isConcatenated;\n  char *currentChar;\n  char *nextChar;\n  undefined4 status;\n  undefined8 decodedValue;\n  uint reversedNumber;\n  byte digitCount;\n  char exponent;\n  int convertedNumber;\n  char startChar;\n  char *currentByte;\n  \n  nextChar = (char *)(baseAddress + (uint)*byteArray);\n  currentChar = nextChar + 1;\n  startChar = *nextChar;\n  isNegative = false;\n  if (startChar == '-') {\n    isNegative = true;\n    startChar = *currentChar;\n    currentByte = nextChar + 2;\n  }\n  else {\n    currentByte = currentChar;\n    if (startChar == '+') {\n      currentByte = nextChar + 2;\n      startChar = *currentChar;\n    }\n  }\n  convertedNumber = 0;\n  exponent = '\\0';\n  digitCount = 0;\n  isFloatingPoint = false;\n  do {\n    digit = startChar - 0x30;\n    if (digit < 10) {\n      digitCount = digitCount + 1;\n      if (digitCount < 9) {\n        if (isFloatingPoint) {\n          exponent = exponent + -1;\n        }\n        convertedNumber = (uint)digit + convertedNumber * 10;\n      }\n      else if (!isFloatingPoint) {\n        exponent = exponent + '\\x01';\n      }\n    }\n    else {\n      if ((digit != 0xfe) || (isFloatingPoint)) {\n        if (digitCount == 0) {\n          status = 0;\n        }\n        else {\n          reversedNumber = reverse_bits_08008e3c(convertedNumber);\n          isConcatenated = is_string_concatenated_08009214(reversedNumber,0);\n          if (isConcatenated == 0) {\n            for (; exponent < -1; exponent = exponent + '\\x02') {\n              decodedValue = decode_and_improve_08008590(reversedNumber);\n              decodedValue = calculate_result_08008640((int)decodedValue,(int)((ulonglong)decodedValue >> 0x20),0x47ae147b,0x3f847ae1)\n              ;\n              reversedNumber = convert_to_float_08008c30((int)decodedValue,(int)((ulonglong)decodedValue >> 0x20));\n            }\n            if (exponent < '\\0') {\n              decodedValue = decode_and_improve_08008590(reversedNumber);\n              decodedValue = calculate_result_08008640((int)decodedValue,(int)((ulonglong)decodedValue >> 0x20),0x9999999a,0x3fb99999)\n              ;\n              reversedNumber = convert_to_float_08008c30((int)decodedValue,(int)((ulonglong)decodedValue >> 0x20));\n            }\n            else {\n              for (; '\\0' < exponent; exponent = exponent + -1) {\n                reversedNumber = calculate_floating_point_08008eec(reversedNumber,0x41200000);\n              }\n            }\n          }\n          if (isNegative) {\n            *result = reversedNumber ^ 0x80000000;\n          }\n          else {\n            *result = reversedNumber;\n          }\n          *byteArray = ((char)currentByte - (char)baseAddress) - 1;\n          status = 1;\n        }\n        return status;\n      }\n      isFloatingPoint = true;\n    }\n    startChar = *currentByte;\n    currentByte = currentByte + 1;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08002638": "extract_number_from_string_08002638",
                "param_1": "baseAddress",
                "param_2": "byteArray",
                "param_3": "result",
                "bVar1": "digit",
                "bVar2": "isNegative",
                "bVar3": "isFloatingPoint",
                "iVar4": "isConcatenated",
                "pcVar5": "currentChar",
                "pcVar6": "nextChar",
                "uVar7": "status",
                "uVar8": "decodedValue",
                "local_1c": "reversedNumber",
                "local_16": "digitCount",
                "local_15": "exponent",
                "local_14": "convertedNumber",
                "local_d": "startChar",
                "local_c": "currentByte"
            },
            "calling": [
                "FUN_0800184c",
                "FUN_08003b98"
            ],
            "called": [
                "FUN_08008eec",
                "FUN_08008590",
                "FUN_08008640",
                "FUN_08008e3c",
                "FUN_08009214",
                "FUN_08008c30"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002814": {
            "entrypoint": "0x08002814",
            "current_name": "FUNC_08002814",
            "code": "\nvoid FUNC_08002814(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002814": "FUNC_08002814"
            },
            "calling": [
                "FUN_08002408",
                "FUN_08001d4c",
                "FUN_08004148"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08002828": {
            "entrypoint": "0x08002828",
            "current_name": "FUNC_08002828",
            "code": "\nvoid FUNC_08002828(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002828": "FUNC_08002828"
            },
            "calling": [
                "FUN_08001994"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800283a": {
            "entrypoint": "0x0800283a",
            "current_name": "initialize_and_calculate_float_values_0800283a",
            "code": "\nvoid initializeAndCalculateFloatValues_0800283a(void)\n\n{\n  initialize_data_080035ec(DAT_20000eac,DAT_20000eb0,DAT_20000eb4);\n  calculate_and_store_float_values_080004fc(DAT_20000eac,DAT_20000eb0,DAT_20000eb4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800283a": "initialize_and_calculate_float_values_0800283a"
            },
            "calling": [
                "FUN_08001ddc",
                "FUN_080024c4"
            ],
            "called": [
                "FUN_080035ec",
                "FUN_080004fc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002870": {
            "entrypoint": "0x08002870",
            "current_name": "increment_and_check_08002870",
            "code": "\nchar increment_and_check_08002870(char input_value)\n\n{\n  char result;\n  \n  result = input_value + '\\x01';\n  if (result == '\\x12') {\n    result = '\\0';\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08002870": "increment_and_check_08002870",
                "param_1": "input_value",
                "local_9": "result"
            },
            "calling": [
                "FUN_08002ba8",
                "FUN_08003004",
                "FUN_08002f40",
                "FUN_08002e08",
                "FUN_08002ef0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002896": {
            "entrypoint": "0x08002896",
            "current_name": "decrement_and_default_08002896",
            "code": "\nchar decrementAndDefault_08002896(char value)\n\n{\n  char result;\n  \n  result = value;\n  if (value == '\\0') {\n    result = '\\x12';\n  }\n  return result + -1;\n}\n\n",
            "renaming": {
                "FUN_08002896": "decrement_and_default_08002896",
                "param_1": "value",
                "local_9": "result"
            },
            "calling": [
                "FUN_08002a94"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080028bc": {
            "entrypoint": "0x080028bc",
            "current_name": "calculate_result_080028bc",
            "code": "\nundefined4 calculate_result_080028bc(undefined4 input_param_1,undefined4 input_param_2,undefined4 input_param_3)\n\n{\n  undefined4 result_1;\n  undefined4 result_2;\n  \n  result_1 = calculate_floating_point_08008eec(input_param_2,input_param_2);\n  result_2 = calculate_floating_point_08008eec(input_param_1,input_param_1);\n  result_1 = calculate_floating_point_08008cd8(result_1,result_2);\n  result_2 = calculate_floating_point_08008cdc(input_param_3,input_param_3);\n  result_1 = calculate_float_08009054(result_1,result_2);\n  return result_1;\n}\n\n",
            "renaming": {
                "FUN_080028bc": "calculate_result_080028bc",
                "param_1": "input_param_1",
                "param_2": "input_param_2",
                "param_3": "input_param_3",
                "uVar1": "result_1",
                "uVar2": "result_2"
            },
            "calling": [
                "FUN_08002c18"
            ],
            "called": [
                "FUN_08008cdc",
                "FUN_08008eec",
                "FUN_08008cd8",
                "FUN_08009054"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002908": {
            "entrypoint": "0x08002908",
            "current_name": "calculate_result_08002908",
            "code": "\nundefined4 calculate_result_08002908(undefined4 value_1,undefined4 value_2,undefined4 value_3,undefined4 value_4)\n\n{\n  undefined4 result_1;\n  undefined4 result_2;\n  \n  result_1 = calculate_floating_point_08008cdc(value_3,value_3);\n  result_1 = calculate_floating_point_08008eec(result_1,value_4);\n  result_2 = calculate_floating_point_08008eec(value_1,value_1);\n  result_1 = calculate_floating_point_08008cd8(result_1,result_2);\n  result_2 = calculate_floating_point_08008eec(value_2,value_2);\n  result_1 = calculate_floating_point_08008cdc(result_1,result_2);\n  result_2 = calculate_floating_point_08008eec(value_3,0x40800000);\n  result_1 = calculate_float_08009054(result_1,result_2);\n  return result_1;\n}\n\n",
            "renaming": {
                "FUN_08002908": "calculate_result_08002908",
                "param_1": "value_1",
                "param_2": "value_2",
                "param_3": "value_3",
                "param_4": "value_4",
                "uVar1": "result_1",
                "uVar2": "result_2"
            },
            "calling": [
                "FUN_08002c18"
            ],
            "called": [
                "FUN_08008cdc",
                "FUN_08008eec",
                "FUN_08008cd8",
                "FUN_08009054"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002978": {
            "entrypoint": "0x08002978",
            "current_name": "process_and_convert_data_08002978",
            "code": "\nundefined4 process_and_convert_data_08002978(undefined4 input_param1,undefined4 input_param2,undefined4 input_param3)\n\n{\n  undefined4 result1;\n  undefined4 result2;\n  undefined8 decoded_result;\n  \n  result1 = calculate_floating_point_08008eec(input_param2,input_param2);\n  result2 = calculate_floating_point_08008cdc(input_param1,input_param1);\n  result2 = calculate_floating_point_08008eec(result2,input_param3);\n  result1 = calculate_floating_point_08008cd8(result1,result2);\n  decoded_result = decode_and_improve_08008590(result1);\n  decoded_result = process_data_080098d0((int)decoded_result,(int)((ulonglong)decoded_result >> 0x20));\n  result1 = convert_to_float_08008c30((int)decoded_result,(int)((ulonglong)decoded_result >> 0x20));\n  return result1;\n}\n\n",
            "renaming": {
                "FUN_08002978": "process_and_convert_data_08002978",
                "param_1": "input_param1",
                "param_2": "input_param2",
                "param_3": "input_param3",
                "uVar1": "result1",
                "uVar2": "result2",
                "uVar3": "decoded_result"
            },
            "calling": [
                "FUN_08003004",
                "FUN_080029d8",
                "FUN_08002afc"
            ],
            "called": [
                "FUN_08008cdc",
                "FUN_08008eec",
                "FUN_08008590",
                "FUN_08008cd8",
                "FUN_08008c30",
                "FUN_080098d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080029d8": {
            "entrypoint": "0x080029d8",
            "current_name": "process_concatenated_string_080029d8",
            "code": "\nvoid processConcatenatedString_080029d8(undefined4 param1,int inputParam,int outputParam)\n\n{\n  int isConcatenatedString;\n  undefined4 processedData;\n  undefined4 originalData;\n  \n  if (((inputParam != 0) && (outputParam != 0)) &&\n     (isConcatenatedString = is_string_concatenated_08009214(*(undefined4 *)(inputParam + 0x18),*(undefined4 *)(inputParam + 0x1c)),\n     isConcatenatedString == 0)) {\n    if ((*(char *)(inputParam + 0x25) == '\\0') &&\n       (isConcatenatedString = check_if_string_is_empty_08009264(*(undefined4 *)(inputParam + 0x1c),*(undefined4 *)(outputParam + 0x18)),\n       isConcatenatedString != 0)) {\n      originalData = *(undefined4 *)(inputParam + 0x1c);\n      processedData = process_and_convert_data_08002978(DAT_20000edc ^ 0x80000000,*(undefined4 *)(outputParam + 0x18),\n                           *(undefined4 *)(inputParam + 0x20));\n      isConcatenatedString = check_null_termination_08009228(originalData,processedData);\n      if (isConcatenatedString == 0) {\n        processedData = process_and_convert_data_08002978(DAT_20000edc ^ 0x80000000,*(undefined4 *)(outputParam + 0x18),\n                             *(undefined4 *)(inputParam + 0x20));\n      }\n      else {\n        processedData = *(undefined4 *)(inputParam + 0x1c);\n      }\n      *(undefined4 *)(inputParam + 0x18) = processedData;\n    }\n    else {\n      *(undefined4 *)(inputParam + 0x18) = *(undefined4 *)(inputParam + 0x1c);\n    }\n    *(undefined *)(inputParam + 0x24) = 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080029d8": "process_concatenated_string_080029d8",
                "param_1": "param1",
                "param_2": "inputParam",
                "param_3": "outputParam",
                "iVar1": "isConcatenatedString",
                "uVar2": "processedData",
                "uVar3": "originalData"
            },
            "calling": [
                "FUN_08002a94"
            ],
            "called": [
                "FUN_08002978",
                "FUN_08009228",
                "FUN_08009214",
                "FUN_08009264"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002a94": {
            "entrypoint": "0x08002a94",
            "current_name": "process_concatenated_strings_08002a94",
            "code": "\nvoid process_concatenated_strings_08002a94(void)\n\n{\n  undefined *temp_string_ptr;\n  undefined *previous_string;\n  undefined *current_string;\n  byte current_byte;\n  \n  current_byte = DAT_20000cf0;\n  previous_string = (undefined *)0x0;\n  current_string = (undefined *)0x0;\n  while (temp_string_ptr = current_string, current_byte != DAT_20000cf1) {\n    current_byte = decrement_and_default_08002896(current_byte);\n    current_string = previous_string;\n    process_concatenated_string_080029d8(&DAT_20000870 + (uint)current_byte * 0x40,previous_string,temp_string_ptr);\n    previous_string = &DAT_20000870 + (uint)current_byte * 0x40;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002a94": "process_concatenated_strings_08002a94",
                "local_9": "current_byte",
                "local_18": "previous_string",
                "local_14": "current_string",
                "puVar1": "temp_string_ptr"
            },
            "calling": [
                "FUN_08002edc"
            ],
            "called": [
                "FUN_080029d8",
                "FUN_08002896"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002afc": {
            "entrypoint": "0x08002afc",
            "current_name": "process_data_08002afc",
            "code": "\nvoid processData_08002afc(int data1,int data2)\n\n{\n  int result;\n  undefined4 convertedData;\n  undefined4 data2Copy;\n  \n  if (((data1 != 0) && (*(char *)(data1 + 0x25) == '\\0')) &&\n     (result = check_null_termination_08009228(*(undefined4 *)(data1 + 0x18),*(undefined4 *)(data2 + 0x18)),\n     result != 0)) {\n    data2Copy = *(undefined4 *)(data2 + 0x18);\n    convertedData = process_and_convert_data_08002978(DAT_20000edc ^ 0x80000000,*(undefined4 *)(data1 + 0x18),\n                         *(undefined4 *)(data1 + 0x20));\n    result = check_null_termination_08009228(data2Copy,convertedData);\n    if (result == 0) {\n      convertedData = process_and_convert_data_08002978(DAT_20000edc ^ 0x80000000,*(undefined4 *)(data1 + 0x18),\n                           *(undefined4 *)(data1 + 0x20));\n    }\n    else {\n      convertedData = *(undefined4 *)(data2 + 0x18);\n    }\n    result = is_string_concatenated_08009214(convertedData,*(undefined4 *)(data2 + 0x18));\n    if (result == 0) {\n      *(undefined4 *)(data2 + 0x18) = convertedData;\n      *(undefined *)(data2 + 0x24) = 1;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002afc": "process_data_08002afc",
                "param_1": "data1",
                "param_2": "data2",
                "iVar1": "result",
                "uVar2": "convertedData",
                "uVar3": "data2Copy"
            },
            "calling": [
                "FUN_08002ba8"
            ],
            "called": [
                "FUN_08002978",
                "FUN_08009228",
                "FUN_08009214"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ba8": {
            "entrypoint": "0x08002ba8",
            "current_name": "process_data_08002ba8",
            "code": "\nvoid process_data_08002ba8(void)\n\n{\n  uint index;\n  undefined *temp_previous_data;\n  undefined *last_previous_data;\n  undefined *previous_data;\n  undefined *current_data;\n  byte byte_value;\n  \n  previous_data = (undefined *)0x0;\n  current_data = (undefined *)0x0;\n  byte_value = DAT_20000cf1;\n  last_previous_data = (undefined *)0x0;\n  while (temp_previous_data = previous_data, byte_value != DAT_20000cf0) {\n    previous_data = current_data;\n    index = (uint)byte_value;\n    process_data_08002ba8_func(temp_previous_data,current_data,&DAT_20000870 + index * 0x40);\n    byte_value = increment_and_check_func(byte_value);\n    last_previous_data = temp_previous_data;\n    current_data = &DAT_20000870 + index * 0x40;\n  }\n  process_data_08002ba8_func(previous_data,current_data,0,previous_data,last_previous_data);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ba8": "process_data_08002ba8",
                "local_14": "previous_data",
                "local_10": "current_data",
                "local_9": "byte_value",
                "puVar3": "last_previous_data",
                "puVar2": "temp_previous_data",
                "uVar1": "index",
                "process_data_08002afc": "process_data_func",
                "increment_and_check_08002870": "increment_and_check_func"
            },
            "calling": [
                "FUN_08002edc"
            ],
            "called": [
                "FUN_08002870",
                "FUN_08002afc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002c18": {
            "entrypoint": "0x08002c18",
            "current_name": "calculate_shifted_values_08002c18",
            "code": "\nvoid calculate_shifted_values_08002c18(int ptr_param_1,undefined4 ptr_param_2,undefined4 ptr_param_3)\n\n{\n  undefined4 shifted_value1;\n  int magnitude;\n  undefined4 shifted_value2;\n  undefined4 signed_magnitude;\n  undefined4 magnitude2;\n  uint value;\n  undefined8 decoded_value;\n  int result;\n  uint minimum_value;\n  \n  shifted_value1 = reverse_bits_08008e3c(*(undefined4 *)(ptr_param_1 + 0x3c));\n  shifted_value1 = calculate_floating_point_08008eec(shifted_value1,ptr_param_2);\n  decoded_value = decode_and_improve_08008590(shifted_value1);\n  decoded_value = calculate_value_08009318((int)decoded_value,(int)((ulonglong)decoded_value >> 0x20));\n  shifted_value1 = calculate_shifted_value_08008bf0((int)decoded_value,(int)((ulonglong)decoded_value >> 0x20));\n  *(undefined4 *)(ptr_param_1 + 0x28) = shifted_value1;\n  shifted_value1 = reverse_bits_08008e3c(*(undefined4 *)(ptr_param_1 + 0x3c));\n  shifted_value1 = calculate_floating_point_08008eec(shifted_value1,ptr_param_3);\n  decoded_value = decode_and_improve_08008590(shifted_value1);\n  decoded_value = calculate_value_08009318((int)decoded_value,(int)((ulonglong)decoded_value >> 0x20));\n  shifted_value1 = calculate_shifted_value_08008bf0((int)decoded_value,(int)((ulonglong)decoded_value >> 0x20));\n  *(undefined4 *)(ptr_param_1 + 0x2c) = shifted_value1;\n  decoded_value = shift_and_combine_bits_0800856c(*(int *)(ptr_param_1 + 0x30) * 0x32);\n  decoded_value = calculate_result_08008640((int)decoded_value,(int)((ulonglong)decoded_value >> 0x20),0,0x404e0000);\n  magnitude = calculate_value_08008ba0((int)decoded_value,(int)((ulonglong)decoded_value >> 0x20));\n  shifted_value1 = reverse_bits_08008e3c(*(undefined4 *)(ptr_param_1 + 0x28));\n  shifted_value2 = reverse_bits_08008e3c(*(undefined4 *)(ptr_param_1 + 0x3c));\n  signed_magnitude = calculate_signed_magnitude_08008e44(magnitude);\n  shifted_value1 = calculate_result_080028bc(shifted_value1,shifted_value2,signed_magnitude);\n  decoded_value = decode_and_improve_08008590(shifted_value1);\n  decoded_value = calculate_value_08009318((int)decoded_value,(int)((ulonglong)decoded_value >> 0x20));\n  minimum_value = calculate_value_08008ba0((int)decoded_value,(int)((ulonglong)decoded_value >> 0x20));\n  shifted_value1 = reverse_bits_08008e3c(*(undefined4 *)(ptr_param_1 + 0x3c));\n  shifted_value2 = reverse_bits_08008e3c(*(undefined4 *)(ptr_param_1 + 0x2c));\n  signed_magnitude = calculate_signed_magnitude_08008e44(-magnitude);\n  shifted_value1 = calculate_result_080028bc(shifted_value1,shifted_value2,signed_magnitude);\n  decoded_value = decode_and_improve_08008590(shifted_value1);\n  decoded_value = calculate_result_080094c0((int)decoded_value,(int)((ulonglong)decoded_value >> 0x20));\n  result = calculate_value_08008ba0((int)decoded_value,(int)((ulonglong)decoded_value >> 0x20));\n  result = (*(int *)(ptr_param_1 + 0x10) - minimum_value) - result;\n  if (result < 0) {\n    shifted_value1 = reverse_bits_08008e3c(*(undefined4 *)(ptr_param_1 + 0x28));\n    shifted_value2 = reverse_bits_08008e3c(*(undefined4 *)(ptr_param_1 + 0x2c));\n    signed_magnitude = calculate_signed_magnitude_08008e44(magnitude);\n    magnitude2 = calculate_signed_magnitude_08008e44(*(undefined4 *)(ptr_param_1 + 0x10));\n    shifted_value1 = calculate_result_08002908(shifted_value1,shifted_value2,signed_magnitude,magnitude2);\n    decoded_value = decode_and_improve_08008590(shifted_value1);\n    decoded_value = calculate_value_08009318((int)decoded_value,(int)((ulonglong)decoded_value >> 0x20));\n    value = calculate_value_08008ba0((int)decoded_value,(int)((ulonglong)decoded_value >> 0x20));\n    value = value & ~((int)value >> 0x1f);\n    minimum_value = *(uint *)(ptr_param_1 + 0x10);\n    if ((int)value <= (int)*(uint *)(ptr_param_1 + 0x10)) {\n      minimum_value = value;\n    }\n    result = 0;\n  }\n  *(uint *)(ptr_param_1 + 0x34) = minimum_value;\n  *(uint *)(ptr_param_1 + 0x38) = result + minimum_value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002c18": "calculate_shifted_values_08002c18",
                "param_1": "ptr_param_1",
                "param_2": "ptr_param_2",
                "param_3": "ptr_param_3",
                "uVar1": "shifted_value1",
                "iVar2": "magnitude",
                "uVar3": "shifted_value2",
                "uVar4": "signed_magnitude",
                "uVar5": "magnitude2",
                "uVar6": "value",
                "uVar7": "decoded_value",
                "local_20": "result",
                "local_1c": "minimum_value"
            },
            "calling": [
                "FUN_08002e08"
            ],
            "called": [
                "FUN_080094c0",
                "FUN_08008bf0",
                "FUN_08008eec",
                "FUN_08008590",
                "FUN_0800856c",
                "FUN_08008e44",
                "FUN_08008640",
                "FUN_08008e3c",
                "FUN_080028bc",
                "FUN_08008ba0",
                "FUN_08002908",
                "FUN_08009318"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002e08": {
            "entrypoint": "0x08002e08",
            "current_name": "calculate_shifted_values_08002e08",
            "code": "\nvoid calculate_shifted_values_08002e08(void)\n\n{\n  undefined4 calculation_result_1;\n  undefined4 calculation_result_2;\n  int index;\n  undefined *function_data;\n  byte byte_value;\n  \n  function_data = (undefined *)0x0;\n  byte_value = DAT_20000cf1;\n  while (byte_value != DAT_20000cf0) {\n    index = (uint)byte_value * 0x40;\n    if ((function_data != (undefined *)0x0) &&\n       ((function_data[0x24] != '\\0' || ((&DAT_20000894)[index] != '\\0')))) {\n      calculation_result_1 = calculate_float_08009054(*(undefined4 *)(function_data + 0x18),*(undefined4 *)(function_data + 0x14));\n      calculation_result_2 = calculate_float_08009054(*(undefined4 *)(&DAT_20000888 + index),*(undefined4 *)(function_data + 0x14));\n      calculate_shifted_values_08002e08_08002c18(function_data,calculation_result_1,calculation_result_2);\n      function_data[0x24] = 0;\n    }\n    byte_value = increment_and_check_08002870(byte_value);\n    function_data = &DAT_20000870 + index;\n  }\n  calculation_result_1 = calculate_float_08009054(*(undefined4 *)(function_data + 0x18),*(undefined4 *)(function_data + 0x14));\n  calculation_result_2 = calculate_float_08009054(0,*(undefined4 *)(function_data + 0x14));\n  calculate_shifted_values_08002e08_08002c18(function_data,calculation_result_1,calculation_result_2);\n  function_data[0x24] = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002e08": "calculate_shifted_values_08002e08",
                "local_18": "function_data",
                "local_11": "byte_value",
                "iVar3": "index",
                "uVar1": "calculation_result_1",
                "uVar2": "calculation_result_2"
            },
            "calling": [
                "FUN_08002edc"
            ],
            "called": [
                "FUN_08002870",
                "FUN_08002c18",
                "FUN_08009054"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002edc": {
            "entrypoint": "0x08002edc",
            "current_name": "process_data_from_binary_08002edc",
            "code": "\nvoid process_data_from_binary_08002edc(void)\n\n{\n  concatenate_strings();\n  process_data();\n  calculate_shifted_values();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002edc": "process_data_from_binary_08002edc",
                "process_concatenated_strings_08002a94": "concatenate_strings",
                "process_data_08002ba8": "process_data",
                "calculate_shifted_values_08002e08": "calculate_shifted_values"
            },
            "calling": [
                "FUN_08003004",
                "FUN_08003618"
            ],
            "called": [
                "FUN_08002ba8",
                "FUN_08002e08",
                "FUN_08002a94"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ef0": {
            "entrypoint": "0x08002ef0",
            "current_name": "update_data_08002ef0",
            "code": "\nvoid update_data_08002ef0(void)\n\n{\n  DAT_20000cf1 = DAT_20000cf0;\n  DAT_20000cf2 = increment_and_check_08002870(DAT_20000cf0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ef0": "update_data_08002ef0"
            },
            "calling": [
                "FUN_08002f24"
            ],
            "called": [
                "FUN_08002870"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002f24": {
            "entrypoint": "0x08002f24",
            "current_name": "initialize_memory_08002f24",
            "code": "\nvoid initializeMemory_08002f24(void)\n\n{\n  updateData();\n  fillMemoryWithByte(&DAT_20000cf4,0,0x1c);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002f24": "initialize_memory_08002f24",
                "update_data_08002ef0": "updateData",
                "fill_memory_with_byte_0800b430": "fillMemoryWithByte"
            },
            "calling": [
                "FUN_08001ddc"
            ],
            "called": [
                "FUN_08002ef0",
                "FUN_0800b430"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002f40": {
            "entrypoint": "0x08002f40",
            "current_name": "update_dat_variable_08002f40",
            "code": "\nvoid update_dat_variable_08002f40(void)\n\n{\n  if (DAT_20000cf0 != DAT_20000cf1) {\n    DAT_20000cf1 = increment_and_check(DAT_20000cf1);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002f40": "update_dat_variable_08002f40",
                "increment_and_check_08002870": "increment_and_check"
            },
            "calling": [
                "FUN_080053a0"
            ],
            "called": [
                "FUN_08002870"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002f74": {
            "entrypoint": "0x08002f74",
            "current_name": "get_active_user_data_08002f74",
            "code": "\nundefined * getActiveUserData_08002f74(void)\n\n{\n  undefined *activeUserDataPointer;\n  \n  if (DAT_20000cf0 == DAT_20000cf1) {\n    activeUserDataPointer = (undefined *)0x0;\n  }\n  else {\n    activeUserDataPointer = &DAT_20000870 + (uint)DAT_20000cf1 * 0x40;\n  }\n  return activeUserDataPointer;\n}\n\n",
            "renaming": {
                "FUN_08002f74": "get_active_user_data_08002f74",
                "puVar1": "activeUserDataPointer"
            },
            "calling": [
                "FUN_08002fd4",
                "FUN_080053a0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002fac": {
            "entrypoint": "0x08002fac",
            "current_name": "are_data_equal_08002fac",
            "code": "\nbool areDataEqual_08002fac(void)\n\n{\n  return DAT_20000cf1 == DAT_20000cf2;\n}\n\n",
            "renaming": {
                "FUN_08002fac": "are_data_equal_08002fac"
            },
            "calling": [
                "FUN_08001e98"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002fd4": {
            "entrypoint": "0x08002fd4",
            "current_name": "process_active_user_data_08002fd4",
            "code": "\nvoid processActiveUserData_08002fd4(void)\n\n{\n  int activeUserData;\n  \n  while ((activeUserData = getActiveUserData(), activeUserData != 0 || (DAT_20000ea9 == '\\x03'))) {\n    processAndUpdateData();\n    if (DAT_20000ea8 != '\\0') {\n      return;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002fd4": "process_active_user_data_08002fd4",
                "iVar1": "activeUserData",
                "get_active_user_data_08002f74": "getActiveUserData",
                "process_and_update_data_08003a74": "processAndUpdateData"
            },
            "calling": [
                "FUN_08002408",
                "FUN_0800525c",
                "FUN_080005b4",
                "FUN_080024c4",
                "FUN_08000220"
            ],
            "called": [
                "FUN_08002f74",
                "FUN_08003a74"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003004": {
            "entrypoint": "0x08003004",
            "current_name": "process_binary_data_08003004",
            "code": "\nvoid process_binary_data_08003004(undefined4 input1,undefined4 input2,undefined4 input3,undefined4 input4,\n                 char flag)\n\n{\n  undefined4 result1;\n  int result1_int;\n  int result2_int;\n  int result3_int;\n  undefined4 result2;\n  undefined4 result3;\n  undefined4 result4;\n  undefined4 result5;\n  uint min_value;\n  int offset;\n  ushort *pointer;\n  int abs_diff;\n  uint max_value;\n  undefined8 processed_data1;\n  undefined8 processed_data2;\n  undefined8 processed_data3;\n  undefined4 final_output;\n  undefined4 intermediate_value;\n  \n  offset = (uint)DAT_20000cf0 * 0x40;\n  pointer = (ushort *)(&DAT_20000870 + offset);\n  result1 = calculate_floating_point_08008eec(DAT_20000ebc,input1);\n  processed_data1 = decode_and_improve_08008590(result1);\n  result1_int = calculate_result_080095b8((int)processed_data1,(int)((ulonglong)processed_data1 >> 0x20));\n  result1 = calculate_floating_point_08008eec(DAT_20000ec0,input2);\n  processed_data1 = decode_and_improve_08008590(result1);\n  result2_int = calculate_result_080095b8((int)processed_data1,(int)((ulonglong)processed_data1 >> 0x20));\n  result1 = calculate_floating_point_08008eec(DAT_20000ec4,input3);\n  processed_data1 = decode_and_improve_08008590(result1);\n  result3_int = calculate_result_080095b8((int)processed_data1,(int)((ulonglong)processed_data1 >> 0x20));\n  *pointer = 0;\n  if (result1_int < DAT_20000cf4) {\n    *pointer = *pointer | 0x20;\n  }\n  if (result2_int < DAT_20000cf8) {\n    *pointer = *pointer | 0x880;\n  }\n  if (result3_int < DAT_20000cfc) {\n    *pointer = *pointer | 0x200;\n  }\n  abs_diff = result1_int - DAT_20000cf4;\n  if (abs_diff < 0) {\n    abs_diff = -abs_diff;\n  }\n  *(int *)(&DAT_20000874 + offset) = abs_diff;\n  abs_diff = result2_int - DAT_20000cf8;\n  if (abs_diff < 0) {\n    abs_diff = -abs_diff;\n  }\n  *(int *)(&DAT_20000878 + offset) = abs_diff;\n  abs_diff = result3_int - DAT_20000cfc;\n  if (abs_diff < 0) {\n    abs_diff = -abs_diff;\n  }\n  *(int *)(&DAT_2000087c + offset) = abs_diff;\n  min_value = *(uint *)(&DAT_2000087c + offset);\n  if (*(uint *)(&DAT_2000087c + offset) < *(uint *)(&DAT_20000878 + offset)) {\n    min_value = *(uint *)(&DAT_20000878 + offset);\n  }\n  max_value = *(uint *)(&DAT_20000874 + offset);\n  if (*(uint *)(&DAT_20000874 + offset) < min_value) {\n    max_value = min_value;\n  }\n  *(uint *)(&DAT_20000880 + offset) = max_value;\n  if (*(int *)(&DAT_20000880 + offset) != 0) {\n    result1 = calculate_signed_magnitude_08008e44(result1_int - DAT_20000cf4);\n    result1 = calculate_float_08009054(result1,DAT_20000ebc);\n    result2 = calculate_signed_magnitude_08008e44(result2_int - DAT_20000cf8);\n    result2 = calculate_float_08009054(result2,DAT_20000ec0);\n    result3 = calculate_signed_magnitude_08008e44(result3_int - DAT_20000cfc);\n    result3 = calculate_float_08009054(result3,DAT_20000ec4);\n    result4 = calculate_floating_point_08008eec(result1,result1);\n    result5 = calculate_floating_point_08008eec(result2,result2);\n    result4 = calculate_floating_point_08008cdc(result4,result5);\n    result5 = calculate_floating_point_08008eec(result3,result3);\n    result4 = calculate_floating_point_08008cdc(result4,result5);\n    processed_data1 = decode_and_improve_08008590(result4);\n    processed_data1 = process_data_080098d0((int)processed_data1,(int)((ulonglong)processed_data1 >> 0x20));\n    result4 = convert_to_float_08008c30((int)processed_data1,(int)((ulonglong)processed_data1 >> 0x20));\n    *(undefined4 *)(&DAT_20000890 + offset) = result4;\n    result4 = calculate_float_08009054(0x3f800000,*(undefined4 *)(&DAT_20000890 + offset));\n    if (flag == '\\0') {\n      intermediate_value = calculate_floating_point_08008eec(input4,result4);\n    }\n    else {\n      intermediate_value = calculate_float_08009054(0x3f800000,input4);\n    }\n    result5 = calculate_floating_point_08008eec(*(undefined4 *)(&DAT_20000890 + offset),intermediate_value);\n    *(undefined4 *)(&DAT_20000884 + offset) = result5;\n    result5 = calculate_signed_magnitude_08008e44(*(undefined4 *)(&DAT_20000880 + offset));\n    result5 = calculate_floating_point_08008eec(result5,intermediate_value);\n    processed_data1 = decode_and_improve_08008590(result5);\n    processed_data1 = calculate_value_08009318((int)processed_data1,(int)((ulonglong)processed_data1 >> 0x20));\n    result5 = calculate_shifted_value_08008bf0((int)processed_data1,(int)((ulonglong)processed_data1 >> 0x20));\n    *(undefined4 *)(&DAT_200008ac + offset) = result5;\n    result5 = calculate_signed_magnitude_08008e44(*(undefined4 *)(&DAT_20000880 + offset));\n    result5 = calculate_floating_point_08008eec(result5,result4);\n    result5 = calculate_floating_point_08008eec(result5,DAT_20000edc);\n    result5 = calculate_float_08009054(result5,0x453b8000);\n    processed_data1 = decode_and_improve_08008590(result5);\n    processed_data1 = calculate_value_08009318((int)processed_data1,(int)((ulonglong)processed_data1 >> 0x20));\n    result5 = calculate_value_08008ba0((int)processed_data1,(int)((ulonglong)processed_data1 >> 0x20));\n    *(undefined4 *)(&DAT_200008a0 + offset) = result5;\n    min_value = calculate_floating_point_08008eec(result1,result4);\n    result1 = calculate_floating_point_08008eec(result2,result4);\n    result2 = calculate_floating_point_08008eec(result3,result4);\n    final_output = 0;\n    if ((DAT_20000cf0 != DAT_20000cf1) && (abs_diff = check_if_string_is_empty_08009264(DAT_20000d0c,0), abs_diff != 0)) {\n      result3 = calculate_floating_point_08008eec(DAT_20000d00 ^ 0x80000000,min_value);\n      result4 = calculate_floating_point_08008eec(DAT_20000d04,result1);\n      result3 = calculate_floating_point_08008cd8(result3,result4);\n      result4 = calculate_floating_point_08008eec(DAT_20000d08,result2);\n      result3 = calculate_floating_point_08008cd8(result3,result4);\n      processed_data1 = decode_and_improve_08008590(result3);\n      abs_diff = is_end_of_string_08008b24((int)processed_data1,(int)((ulonglong)processed_data1 >> 0x20),0x66666666,0x3fee6666);\n      if (abs_diff != 0) {\n        abs_diff = check_null_termination_08009228(DAT_20000d0c,*(undefined4 *)(&DAT_20000884 + offset));\n        final_output = DAT_20000d0c;\n        if (abs_diff == 0) {\n          final_output = *(undefined4 *)(&DAT_20000884 + offset);\n        }\n        processed_data1 = decode_and_improve_08008590(result3);\n        abs_diff = check_if_string_empty_08008b60((int)processed_data1,(int)((ulonglong)processed_data1 >> 0x20),0x66666666,0xbfee6666);\n        if (abs_diff != 0) {\n          processed_data1 = decode_and_improve_08008590(result3);\n          processed_data1 = reverse_binary_calculation_080082d0(0,0x3ff00000,(int)processed_data1,(int)((ulonglong)processed_data1 >> 0x20));\n          processed_data1 = calculate_result_08008640((int)processed_data1,(int)((ulonglong)processed_data1 >> 0x20),0,0x3fe00000);\n          processed_data1 = process_data_080098d0((int)processed_data1,(int)((ulonglong)processed_data1 >> 0x20));\n          result3 = convert_to_float_08008c30((int)processed_data1,(int)((ulonglong)processed_data1 >> 0x20));\n          processed_data1 = decode_and_improve_08008590(final_output);\n          result4 = calculate_floating_point_08008eec(DAT_20000edc,DAT_20000ee0);\n          result4 = calculate_floating_point_08008eec(result4,result3);\n          processed_data2 = decode_and_improve_08008590(result4);\n          processed_data3 = decode_and_improve_08008590(result3);\n          processed_data3 = reverse_binary_calculation_080082d0(0,0x3ff00000,(int)processed_data3,(int)((ulonglong)processed_data3 >> 0x20));\n          processed_data2 = decode_float_08008894((int)processed_data2,(int)((ulonglong)processed_data2 >> 0x20),(int)processed_data3,\n                                (int)((ulonglong)processed_data3 >> 0x20));\n          processed_data2 = process_data_080098d0((int)processed_data2,(int)((ulonglong)processed_data2 >> 0x20));\n          abs_diff = is_end_of_string_08008b24((int)processed_data1,(int)((ulonglong)processed_data1 >> 0x20),(int)processed_data2,\n                                (int)((ulonglong)processed_data2 >> 0x20));\n          if (abs_diff == 0) {\n            result4 = calculate_floating_point_08008eec(DAT_20000edc,DAT_20000ee0);\n            result4 = calculate_floating_point_08008eec(result4,result3);\n            processed_data1 = decode_and_improve_08008590(result4);\n            processed_data2 = decode_and_improve_08008590(result3);\n            processed_data2 = reverse_binary_calculation_080082d0(0,0x3ff00000,(int)processed_data2,(int)((ulonglong)processed_data2 >> 0x20));\n            processed_data1 = decode_float_08008894((int)processed_data1,(int)((ulonglong)processed_data1 >> 0x20),(int)processed_data2,\n                                  (int)((ulonglong)processed_data2 >> 0x20));\n            processed_data1 = process_data_080098d0((int)processed_data1,(int)((ulonglong)processed_data1 >> 0x20));\n            final_output = convert_to_float_08008c30((int)processed_data1,(int)((ulonglong)processed_data1 >> 0x20));\n          }\n        }\n      }\n    }\n    *(undefined4 *)(&DAT_2000088c + offset) = final_output;\n    result4 = process_and_convert_data_08002978(DAT_20000edc ^ 0x80000000,0,*(undefined4 *)(&DAT_20000890 + offset));\n    abs_diff = check_null_termination_08009228(final_output,result4);\n    result3 = result4;\n    if (abs_diff != 0) {\n      result3 = final_output;\n    }\n    *(undefined4 *)(&DAT_20000888 + offset) = result3;\n    abs_diff = check_concatenation_result_08009250(result4,*(undefined4 *)(&DAT_20000884 + offset));\n    if (abs_diff == 0) {\n      (&DAT_20000895)[offset] = 0;\n    }\n    else {\n      (&DAT_20000895)[offset] = 1;\n    }\n    (&DAT_20000894)[offset] = 1;\n    DAT_20000d0c = *(undefined4 *)(&DAT_20000884 + offset);\n    DAT_20000cf0 = DAT_20000cf2;\n    DAT_20000d00 = min_value;\n    DAT_20000d04 = result1;\n    DAT_20000d08 = result2;\n    DAT_20000cf2 = increment_and_check_08002870(DAT_20000cf2);\n    DAT_20000cf4 = result1_int;\n    DAT_20000cf8 = result2_int;\n    DAT_20000cfc = result3_int;\n    process_data_from_binary_08002edc();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003004": "process_binary_data_08003004",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "param_5": "flag",
                "uVar1": "result1",
                "iVar2": "result1_int",
                "iVar3": "result2_int",
                "iVar4": "result3_int",
                "uVar5": "result2",
                "uVar6": "result3",
                "uVar7": "result4",
                "uVar8": "result5",
                "uVar9": "min_value",
                "iVar10": "offset",
                "puVar11": "pointer",
                "iVar12": "abs_diff",
                "uVar13": "max_value",
                "uVar14": "processed_data1",
                "uVar15": "processed_data2",
                "uVar16": "processed_data3",
                "local_20": "final_output",
                "local_1c": "intermediate_value"
            },
            "calling": [
                "FUN_08001e98"
            ],
            "called": [
                "FUN_080095b8",
                "FUN_08008cdc",
                "FUN_08008bf0",
                "FUN_08008b24",
                "FUN_08002edc",
                "FUN_08002978",
                "FUN_08008cd8",
                "FUN_08009054",
                "FUN_080082d0",
                "FUN_08009318",
                "FUN_08008b60",
                "FUN_08002870",
                "FUN_08008eec",
                "FUN_08008590",
                "FUN_08008640",
                "FUN_08008e44",
                "FUN_08008c30",
                "FUN_08009228",
                "FUN_080098d0",
                "FUN_08008894",
                "FUN_08009264",
                "FUN_08008ba0",
                "FUN_08009250"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080035ec": {
            "entrypoint": "0x080035ec",
            "current_name": "initialize_data_080035ec",
            "code": "\nvoid initializeData_080035ec(undefined4 inputParameter1,undefined4 inputParameter2,undefined4 inputParameter3)\n\n{\n  DAT_20000cf4 = inputParameter1;\n  DAT_20000cf8 = inputParameter2;\n  DAT_20000cfc = inputParameter3;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080035ec": "initialize_data_080035ec",
                "param_1": "inputParameter1",
                "param_2": "inputParameter2",
                "param_3": "inputParameter3"
            },
            "calling": [
                "FUN_0800283a"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003618": {
            "entrypoint": "0x08003618",
            "current_name": "process_data_08003618",
            "code": "\nvoid process_data_08003618(undefined4 input_data)\n\n{\n  undefined4 signed_magnitude_1;\n  int index;\n  undefined4 signed_magnitude_2;\n  \n  index = (uint)DAT_20000cf1 * 0x40;\n  signed_magnitude_2 = *(undefined4 *)(&DAT_20000890 + index);\n  signed_magnitude_1 = calculate_signed_magnitude_08008e44(input_data);\n  signed_magnitude_1 = calculate_floating_point_08008eec(signed_magnitude_2,signed_magnitude_1);\n  signed_magnitude_2 = calculate_signed_magnitude_08008e44(*(undefined4 *)(&DAT_20000880 + index));\n  signed_magnitude_1 = calculate_float_08009054(signed_magnitude_1,signed_magnitude_2);\n  *(undefined4 *)(&DAT_20000890 + index) = signed_magnitude_1;\n  *(undefined4 *)(&DAT_20000880 + index) = input_data;\n  *(undefined4 *)(&DAT_20000888 + index) = 0;\n  *(undefined4 *)(&DAT_2000088c + index) = 0;\n  (&DAT_20000895)[index] = 0;\n  (&DAT_20000894)[index] = 1;\n  process_data_08003618_from_binary_08002edc();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003618": "process_data_08003618",
                "param_1": "input_data",
                "uVar1": "signed_magnitude_1",
                "iVar2": "index",
                "uVar3": "signed_magnitude_2"
            },
            "calling": [
                "FUN_080058a0"
            ],
            "called": [
                "FUN_08002edc",
                "FUN_08008eec",
                "FUN_08008e44",
                "FUN_08009054"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800369c": {
            "entrypoint": "0x0800369c",
            "current_name": "wait_for_flag_to_be_set_0800369c",
            "code": "\nvoid waitForFlagToBeSet_0800369c(char *inputString)\n\n{\n  char *currentChar;\n  \n  currentChar = inputString;\n  while (*currentChar != '\\0') {\n    wait_for_flag_to_be_set_08008250(*currentChar);\n    currentChar = currentChar + 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800369c": "wait_for_flag_to_be_set_0800369c",
                "param_1": "inputString",
                "local_c": "currentChar"
            },
            "calling": [
                "FUN_08004900",
                "FUN_080039bc"
            ],
            "called": [
                "FUN_08008250"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080036c6": {
            "entrypoint": "0x080036c6",
            "current_name": "wait_for_string_completion_080036c6",
            "code": "\nvoid waitForStringCompletion_080036c6(char *inputString)\n\n{\n  char *currentCharacter;\n  \n  currentCharacter = inputString;\n  while (*currentCharacter != '\\0') {\n    wait_for_flag_to_be_set_08008250(*currentCharacter);\n    currentCharacter = currentCharacter + 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080036c6": "wait_for_string_completion_080036c6",
                "param_1": "inputString",
                "local_c": "currentCharacter"
            },
            "calling": [
                "FUN_080044e8",
                "FUN_080046d0",
                "FUN_0800423c",
                "FUN_08004250",
                "FUN_08004900",
                "FUN_08004030",
                "FUN_080041a0",
                "FUN_08004228",
                "FUN_08004940",
                "FUN_08004148"
            ],
            "called": [
                "FUN_08008250"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080036f0": {
            "entrypoint": "0x080036f0",
            "current_name": "wait_for_bits_to_be_set_080036f0",
            "code": "\nvoid wait_for_bits_to_be_set_080036f0(uint input_value,int num_bits)\n\n{\n  undefined4 bit_value;\n  int bit_index;\n  uint bit_mask;\n  \n  bit_mask = 1 << (num_bits - 1U & 0xff);\n  for (bit_index = 0; bit_index < num_bits; bit_index = bit_index + 1) {\n    if ((bit_mask & input_value) == 0) {\n      bit_value = 0x30;\n    }\n    else {\n      bit_value = 0x31;\n    }\n    wait_for_flag_to_be_set_08008250(bit_value);\n    bit_mask = bit_mask >> 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080036f0": "wait_for_bits_to_be_set_080036f0",
                "param_1": "input_value",
                "param_2": "num_bits",
                "uVar1": "bit_value",
                "local_10": "bit_index",
                "local_c": "bit_mask"
            },
            "calling": [
                "FUN_0800375c",
                "FUN_08003740"
            ],
            "called": [
                "FUN_08008250"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003740": {
            "entrypoint": "0x08003740",
            "current_name": "wait_for_bits_to_be_set_08003740",
            "code": "\nvoid wait_for_bits_to_be_set_08003740(undefined param)\n\n{\n  wait_for_bits_to_be_set_08003740(param,8);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003740": "wait_for_bits_to_be_set_08003740",
                "param_1": "param",
                "wait_for_bits_to_be_set_080036f0": "wait_for_bits_to_be_set"
            },
            "calling": [],
            "called": [
                "FUN_080036f0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800375c": {
            "entrypoint": "0x0800375c",
            "current_name": "wait_for_bits_to_be_set_0800375c",
            "code": "\nvoid wait_for_bits_to_be_set_0800375c(undefined2 param)\n\n{\n  wait_for_bits_to_be_set_0800375c_080036f0(param,0x10);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800375c": "wait_for_bits_to_be_set_0800375c",
                "param_1": "param"
            },
            "calling": [
                "FUN_08004250"
            ],
            "called": [
                "FUN_080036f0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003778": {
            "entrypoint": "0x08003778",
            "current_name": "print_reversed_number_08003778",
            "code": "\nvoid printReversedNumber_08003778(uint number)\n\n{\n  uint iterationCount;\n  uint dividend;\n  char reverseNumberString [12];\n  byte digitCount;\n  \n  digitCount = 0;\n  dividend = number;\n  if (number == 0) {\n    wait_for_flag_to_be_set_08008250(0x30);\n  }\n  else {\n    for (; dividend != 0; dividend = dividend / 10) {\n      iterationCount = (uint)digitCount;\n      digitCount = digitCount + 1;\n      reverseNumberString[iterationCount + 1] = (char)(dividend % 10) + '0';\n    }\n    for (; digitCount != 0; digitCount = digitCount - 1) {\n      wait_for_flag_to_be_set_08008250(reverseNumberString[digitCount]);\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003778": "print_reversed_number_08003778",
                "param_1": "number",
                "uVar1": "iterationCount",
                "local_1c": "dividend",
                "acStack_15": "reverseNumberString",
                "local_9": "digitCount"
            },
            "calling": [
                "FUN_080037fc"
            ],
            "called": [
                "FUN_08008250"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080037fc": {
            "entrypoint": "0x080037fc",
            "current_name": "print_absolute_reversed_number_080037fc",
            "code": "\nvoid printAbsoluteReversedNumber_080037fc(int number)\n\n{\n  int absoluteNumber;\n  \n  absoluteNumber = number;\n  if (number < 0) {\n    wait_for_flag_to_be_set_08008250(0x2d);\n    absoluteNumber = -number;\n  }\n  print_reversed_number_08003778(absoluteNumber);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080037fc": "print_absolute_reversed_number_080037fc",
                "param_1": "number",
                "local_c": "absoluteNumber"
            },
            "calling": [
                "FUN_080046d0",
                "FUN_08004250",
                "FUN_08004900"
            ],
            "called": [
                "FUN_08003778",
                "FUN_08008250"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003826": {
            "entrypoint": "0x08003826",
            "current_name": "print_float_number_08003826",
            "code": "\nvoid printFloatNumber_08003826(uint inputNumber)\n\n{\n  int isTerminated;\n  undefined4 convertedNumber;\n  byte tempByte;\n  uint tempUint;\n  uint modifiedInput;\n  char resultString [13];\n  uint dividedNumber;\n  byte currentDigit;\n  byte totalDigits;\n  \n  isTerminated = check_null_termination_08009228(inputNumber,0);\n  modifiedInput = inputNumber;\n  if (isTerminated != 0) {\n    wait_for_flag_to_be_set_08008250(0x2d);\n    modifiedInput = inputNumber ^ 0x80000000;\n  }\n  for (totalDigits = DAT_20000ef9; 1 < totalDigits; totalDigits = totalDigits - 2) {\n    modifiedInput = calculate_floating_point_08008eec(modifiedInput,0x42c80000);\n  }\n  if (totalDigits != 0) {\n    modifiedInput = calculate_floating_point_08008eec(modifiedInput,0x41200000);\n  }\n  convertedNumber = calculate_floating_point_08008cdc(modifiedInput,0x3f000000);\n  currentDigit = 0;\n  dividedNumber = convert_value_08009278(convertedNumber);\n  resultString[DAT_20000ef9 + 1] = '.';\n  for (; dividedNumber != 0; dividedNumber = dividedNumber / 10) {\n    if (currentDigit == DAT_20000ef9) {\n      currentDigit = currentDigit + 1;\n    }\n    tempUint = (uint)currentDigit;\n    currentDigit = currentDigit + 1;\n    resultString[tempUint + 1] = (char)(dividedNumber % 10) + '0';\n  }\n  while (currentDigit < DAT_20000ef9) {\n    tempUint = (uint)currentDigit;\n    currentDigit = currentDigit + 1;\n    resultString[tempUint + 1] = '0';\n  }\n  if (currentDigit == DAT_20000ef9) {\n    tempByte = currentDigit + 1;\n    currentDigit = currentDigit + 2;\n    resultString[tempByte + 1] = '0';\n  }\n  for (; currentDigit != 0; currentDigit = currentDigit - 1) {\n    wait_for_flag_to_be_set_08008250(resultString[currentDigit]);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003826": "print_float_number_08003826",
                "param_1": "inputNumber",
                "iVar1": "isTerminated",
                "uVar2": "convertedNumber",
                "bVar3": "tempByte",
                "uVar4": "tempUint",
                "local_24": "modifiedInput",
                "acStack_1d": "resultString",
                "local_10": "dividedNumber",
                "local_a": "currentDigit",
                "local_9": "totalDigits"
            },
            "calling": [
                "FUN_080044e8",
                "FUN_080046d0",
                "FUN_08004250",
                "FUN_08004940"
            ],
            "called": [
                "FUN_08008cdc",
                "FUN_08008eec",
                "FUN_08009278",
                "FUN_08009228",
                "FUN_08008250"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003980": {
            "entrypoint": "0x08003980",
            "current_name": "initialize_data_08003980",
            "code": "\nvoid initializeData_08003980(void)\n\n{\n  DAT_20000e10 = 0;\n  DAT_20000e11 = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003980": "initialize_data_08003980"
            },
            "calling": [
                "FUN_08003f34",
                "FUN_080039a0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080039a0": {
            "entrypoint": "0x080039a0",
            "current_name": "initialize_grbl_and_data_080039a0",
            "code": "\nvoid initialize_grbl_and_data_080039a0(void)\n\n{\n  initialize_data();\n  initialize_grbl();\n  DAT_20000e50 = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080039a0": "initialize_grbl_and_data_080039a0",
                "initialize_data_08003980": "initialize_data",
                "initialize_grbl_08004228": "initialize_grbl"
            },
            "calling": [
                "FUN_08001ddc"
            ],
            "called": [
                "FUN_08003980",
                "FUN_08004228"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080039bc": {
            "entrypoint": "0x080039bc",
            "current_name": "process_data_080039bc",
            "code": "\nvoid processData_080039bc(void)\n\n{\n  int result;\n  undefined4 inputResult;\n  byte counter;\n  \n  for (counter = 0; counter < 2; counter = counter + 1) {\n    result = check_and_process_data_08004d2c(counter,&DAT_20000d10);\n    if (result == 0) {\n      FUNC_08004030(10);\n    }\n    else if (DAT_20000d10 != '\\0') {\n      wait_for_flag_to_be_set_0800369c(&DAT_20000d10);\n      inputResult = process_input_080005b4(&DAT_20000d10);\n      FUNC_08004030(inputResult);\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080039bc": "process_data_080039bc",
                "iVar1": "result",
                "uVar2": "inputResult",
                "local_9": "counter"
            },
            "calling": [
                "FUN_08003b98",
                "FUN_08001ddc"
            ],
            "called": [
                "FUN_08004030",
                "FUN_080005b4",
                "FUN_08004d2c",
                "FUN_0800369c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003a18": {
            "entrypoint": "0x08003a18",
            "current_name": "check_flags_08003a18",
            "code": "\nvoid checkFlags_08003a18(uint flags)\n\n{\n  if ((flags & 0x80) == 0) {\n    if ((flags & 0x40) == 0) {\n      if ((flags & 0x20) != 0) {\n        DAT_20000eaa = DAT_20000eaa | 2;\n      }\n    }\n    else {\n      DAT_20000eaa = DAT_20000eaa | 8;\n    }\n  }\n  else {\n    initialize_and_check_flags_080025e8();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003a18": "check_flags_08003a18",
                "param_1": "flags"
            },
            "calling": [
                "FUN_080074c8"
            ],
            "called": [
                "FUN_080025e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003a74": {
            "entrypoint": "0x08003a74",
            "current_name": "process_and_update_data_08003a74",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08003ad2) */\n\nvoid process_and_update_data_08003a74(void)\n\n{\n  byte bVar1;\n  \n  bVar1 = DAT_20000eaa;\n  if (DAT_20000eaa != 0) {\n    if ((DAT_20000eaa & 0x60) != 0) {\n      DAT_20000ea9 = 6;\n      if ((DAT_20000eaa & 0x40) != 0) {\n        process_alarm(0xffffffff);\n        display_status_message(1);\n        do {\n        } while( true );\n      }\n      process_alarm(0xfffffffe);\n      DAT_20000eaa = DAT_20000eaa & 0x9f;\n    }\n    if ((bVar1 & 0x10) == 0) {\n      if ((bVar1 & 1) != 0) {\n        print_position_info();\n        DAT_20000eaa = DAT_20000eaa & 0xfe;\n      }\n      if ((bVar1 & 8) != 0) {\n        initialize_status();\n        DAT_20000eaa = DAT_20000eaa & 0xf7;\n      }\n      if ((bVar1 & 4) != 0) {\n        update_data();\n        DAT_20000eaa = DAT_20000eaa & 0xfb;\n      }\n      if ((bVar1 & 2) != 0) {\n        initialize_if_pending();\n        if ((DAT_20000ee4 & 2) != 0) {\n          DAT_20000eb8 = 1;\n        }\n        DAT_20000eaa = DAT_20000eaa & 0xfd;\n      }\n    }\n    else {\n      DAT_20000ea8 = 1;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003a74": "process_and_update_data_08003a74",
                "process_alarm_08004148": "process_alarm",
                "display_status_message_080041a0": "display_status_message",
                "print_position_information_08004940": "print_position_info",
                "initialize_status_0800587c": "initialize_status",
                "update_data_080058a0": "update_data",
                "initialize_if_data_pending_0800585c": "initialize_if_pending"
            },
            "calling": [
                "FUN_08003f34",
                "FUN_08001e98",
                "FUN_08002408",
                "FUN_08002fd4",
                "FUN_08001ddc",
                "FUN_080024c4"
            ],
            "called": [
                "FUN_0800585c",
                "FUN_0800587c",
                "FUN_080041a0",
                "FUN_08004940",
                "FUN_080058a0",
                "FUN_08004148"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003b98": {
            "entrypoint": "0x08003b98",
            "current_name": "process_command_08003b98",
            "code": "\nuint processCommand_08003b98(char *command)\n\n{\n  byte commandType;\n  int returnValue;\n  undefined4 convertedValue;\n  uint resultCode;\n  undefined8 decodedValue;\n  undefined4 parsedValue1;\n  undefined4 parsedValue2;\n  byte index;\n  byte flag;\n  \n  if (*command != '$') {\n    resultCode = process_input_080005b4(command);\n    return resultCode;\n  }\n  index = 1;\n  flag = '\\0';\n  commandType = command[1];\n  if (commandType == 0) {\n    initialize_grbl_commands_0800423c();\n    return 0;\n  }\n  if ((0x58 < commandType) || (commandType < 0x23)) goto switchD_08003bdc_caseD_25;\n  switch(commandType) {\n  case 0x23:\n    index = 2;\n    if (command[2] != '\\0') {\n      return 3;\n    }\n    calculate_and_print_float_numbers_080044e8();\n    break;\n  case 0x24:\n    index = 2;\n    if (command[2] != '\\0') {\n      return 3;\n    }\n    print_configuration_settings_08004250();\n    break;\n  case 0x43:\n    index = 2;\n    if (command[2] != '\\0') {\n      return 3;\n    }\n    if (DAT_20000ea9 == '\\a') {\n      initialize_and_check_flags_080025e8();\n      display_status_message_080041a0(5);\n    }\n    else {\n      if (DAT_20000ea9 != '\\0') {\n        return 0xb;\n      }\n      DAT_20000ea9 = '\\a';\n      display_status_message_080041a0(4);\n    }\n    break;\n  case 0x47:\n    index = 2;\n    if (command[2] != '\\0') {\n      return 3;\n    }\n    print_formatted_output_080046d0();\n    break;\n  case 0x48:\n    if ((DAT_20000ee4 & 0x10) == 0) {\n      return 7;\n    }\n    if ((DAT_20000ea9 != '\\0') && (DAT_20000ea9 != '\\x06')) {\n      return 0xb;\n    }\n    initialize_data_processing_080024c4();\n    if (DAT_20000ea8 == '\\0') {\n      process_data_080039bc();\n    }\n    break;\n  case 0x4e:\n    index = 2;\n    if (command[2] == '\\0') {\n      for (flag = 0; flag < 2; flag = flag + 1) {\n        returnValue = check_and_process_data_08004d2c(flag,command);\n        if (returnValue == 0) {\n          FUNC_08004030(10);\n        }\n        else {\n          print_reversed_number_08004900(flag,command);\n        }\n      }\n      return 0;\n    }\n    flag = '\\x01';\n  default:\nswitchD_08003bdc_caseD_25:\n    returnValue = extract_number_from_string_08002638(command,&index,&parsedValue2);\n    if (returnValue == 0) {\n      return 1;\n    }\n    commandType = index + 1;\n    if (command[index] != '=') {\n      return 3;\n    }\n    index = commandType;\n    if (flag == '\\0') {\n      returnValue = extract_number_from_string_08002638(command,&index,&parsedValue1);\n      if (returnValue == 0) {\n        return 1;\n      }\n      if (command[index] == '\\0') {\n        convertedValue = convert_value_08009278(parsedValue2);\n        resultCode = initialize_data_08004e30(convertedValue,parsedValue1);\n        return resultCode;\n      }\n      return 3;\n    }\n    do {\n      command[(uint)index - (uint)commandType] = command[index];\n      resultCode = (uint)index;\n      index = index + 1;\n    } while (command[resultCode] != '\\0');\n    flag = commandType;\n    flag = process_input_080005b4(command);\n    if (flag != 0) {\n      return (uint)flag;\n    }\n    decodedValue = decode_and_improve_08008590(parsedValue2);\n    decodedValue = extract_bits_08009798((int)decodedValue,(int)((ulonglong)decodedValue >> 0x20));\n    flag = calculate_shifted_value_08008bf0((int)decodedValue,(int)((ulonglong)decodedValue >> 0x20));\n    process_data_08004bc0(flag,command);\n    break;\n  case 0x58:\n    index = 2;\n    if (command[2] != '\\0') {\n      return 3;\n    }\n    if (DAT_20000ea9 == '\\x06') {\n      display_status_message_080041a0(3);\n      DAT_20000ea9 = '\\0';\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08003b98": "process_command_08003b98",
                "param_1": "command",
                "bVar1": "commandType",
                "iVar2": "returnValue",
                "uVar3": "convertedValue",
                "uVar4": "resultCode",
                "uVar5": "decodedValue",
                "local_14": "parsedValue1",
                "local_10": "parsedValue2",
                "local_a": "index",
                "local_9": "flag"
            },
            "calling": [
                "FUN_08003f34"
            ],
            "called": [
                "FUN_08002638",
                "FUN_080046d0",
                "FUN_08008bf0",
                "FUN_0800423c",
                "FUN_08004250",
                "FUN_08004030",
                "FUN_08009798",
                "FUN_08004e30",
                "FUN_080025e8",
                "FUN_080024c4",
                "FUN_08004bc0",
                "FUN_080044e8",
                "FUN_08008590",
                "FUN_08004900",
                "FUN_08009278",
                "FUN_080005b4",
                "FUN_080041a0",
                "FUN_08004d2c",
                "FUN_080039bc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003f34": {
            "entrypoint": "0x08003f34",
            "current_name": "process_user_input_08003f34",
            "code": "\nvoid process_user_input_08003f34(void)\n\n{\n  byte flag;\n  undefined4 status;\n  uint index;\n  \n  while( true ) {\n    while( true ) {\n      flag = check_and_return_flag_08008286();\n      if (flag == 0xff) {\n        return;\n      }\n      if ((flag == 10) || (flag == 0xd)) break;\n      if (DAT_20000e11 == '\\0') {\n        if ((0x20 < flag) && (flag != 0x2f)) {\n          if (flag == 0x28) {\n            DAT_20000e11 = '\\x01';\n          }\n          else if (DAT_20000e10 == 0xff) {\n            FUNC_08004030(0xd);\n            initialize_data_08003980();\n          }\n          else if ((flag < 0x61) || (0x7a < flag)) {\n            index = (uint)DAT_20000e10;\n            DAT_20000e10 = DAT_20000e10 + 1;\n            (&DAT_20000d10)[index] = flag;\n          }\n          else {\n            index = (uint)DAT_20000e10;\n            DAT_20000e10 = DAT_20000e10 + 1;\n            (&DAT_20000d10)[index] = flag - 0x20;\n          }\n        }\n      }\n      else if (flag == 0x29) {\n        DAT_20000e11 = '\\0';\n      }\n    }\n    process_and_update_data_08003a74();\n    if (DAT_20000ea8 != '\\0') break;\n    if (DAT_20000e10 == 0) {\n      FUNC_08004030(0);\n    }\n    else {\n      (&DAT_20000d10)[DAT_20000e10] = 0;\n      status = process_command_08003b98(&DAT_20000d10);\n      FUNC_08004030(status);\n    }\n    initialize_data_08003980();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003f34": "process_user_input_08003f34",
                "bVar1": "flag",
                "uVar2": "status",
                "uVar3": "index"
            },
            "calling": [
                "FUN_08001ddc"
            ],
            "called": [
                "FUN_08008286",
                "FUN_08003b98",
                "FUN_08004030",
                "FUN_08003980",
                "FUN_08003a74"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004030": {
            "entrypoint": "0x08004030",
            "current_name": "FUNC_08004030",
            "code": "\nvoid FUNC_08004030(char param_1)\n\n{\n  if (param_1 == '\\0') {\n    wait_for_string_completion_080036c6(&DAT_0800b5c8);\n  }\n  else {\n    wait_for_string_completion_080036c6(\"error: \");\n    switch(param_1) {\n    case '\\x01':\n      wait_for_string_completion_080036c6(\"Bad number format\");\n      break;\n    case '\\x02':\n      wait_for_string_completion_080036c6(\"Expected command letter\");\n      break;\n    case '\\x03':\n      wait_for_string_completion_080036c6(\"Unsupported statement\");\n      break;\n    case '\\x04':\n      wait_for_string_completion_080036c6(\"Invalid radius\");\n      break;\n    case '\\x05':\n      wait_for_string_completion_080036c6(\"Modal group violation\");\n      break;\n    case '\\x06':\n      wait_for_string_completion_080036c6(\"Invalid statement\");\n      break;\n    case '\\a':\n      wait_for_string_completion_080036c6(\"Setting disabled\");\n      break;\n    case '\\b':\n      wait_for_string_completion_080036c6(\"Value < 0.0\");\n      break;\n    case '\\t':\n      wait_for_string_completion_080036c6(\"Value < 3 usec\");\n      break;\n    case '\\n':\n      wait_for_string_completion_080036c6(\"EEPROM read fail. Using defaults\");\n      break;\n    case '\\v':\n      wait_for_string_completion_080036c6(\"Busy or queued\");\n      break;\n    case '\\f':\n      wait_for_string_completion_080036c6(\"Alarm lock\");\n      break;\n    case '\\r':\n      wait_for_string_completion_080036c6(\"Line overflow\");\n    }\n    wait_for_string_completion_080036c6(&DAT_0800b6d8);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004030": "FUNC_08004030"
            },
            "calling": [
                "FUN_080044e8",
                "FUN_080004ac",
                "FUN_08003f34",
                "FUN_08003b98",
                "FUN_080039bc",
                "FUN_080051b4"
            ],
            "called": [
                "FUN_080036c6"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004148": {
            "entrypoint": "0x08004148",
            "current_name": "process_alarm_08004148",
            "code": "\nvoid processAlarm_08004148(char errorCode)\n\n{\n  waitForStringCompletion(\"ALARM: \");\n  if (errorCode == -2) {\n    waitForStringCompletion(\"Abort during cycle\");\n  }\n  else if (errorCode == -1) {\n    waitForStringCompletion(\"Hard limit\");\n  }\n  waitForStringCompletion(\". MPos?\\r\\n\");\n  FUNC_08002814(500);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004148": "process_alarm_08004148",
                "param_1": "errorCode",
                "wait_for_string_completion_080036c6": "waitForStringCompletion"
            },
            "calling": [
                "FUN_08003a74"
            ],
            "called": [
                "FUN_080036c6",
                "FUN_08002814"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080041a0": {
            "entrypoint": "0x080041a0",
            "current_name": "display_status_message_080041a0",
            "code": "\nvoid displayStatusMessage_080041a0(undefined messageType)\n\n{\n  wait_for_string_completion_080036c6(&DAT_0800b710);\n  switch(messageType) {\n  case 1:\n    wait_for_string_completion_080036c6(\"Reset to continue\");\n    break;\n  case 2:\n    wait_for_string_completion_080036c6(\"\\'$H\\'|\\'$X\\' to unlock\");\n    break;\n  case 3:\n    wait_for_string_completion_080036c6(\"Caution: Unlocked\");\n    break;\n  case 4:\n    wait_for_string_completion_080036c6(\"Enabled\");\n    break;\n  case 5:\n    wait_for_string_completion_080036c6(\"Disabled\");\n  }\n  wait_for_string_completion_080036c6(&DAT_0800b764);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080041a0": "display_status_message_080041a0",
                "param_1": "messageType"
            },
            "calling": [
                "FUN_08003b98",
                "FUN_08001ddc",
                "FUN_08003a74"
            ],
            "called": [
                "FUN_080036c6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004228": {
            "entrypoint": "0x08004228",
            "current_name": "initialize_grbl_08004228",
            "code": "\nvoid initializeGrbl_08004228(void)\n\n{\n  waitForStringCompletion(\"\\r\\nGrbl 0.8c [\\'$\\' for help]\\r\\n\");\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004228": "initialize_grbl_08004228",
                "wait_for_string_completion_080036c6": "waitForStringCompletion"
            },
            "calling": [
                "FUN_080039a0"
            ],
            "called": [
                "FUN_080036c6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800423c": {
            "entrypoint": "0x0800423c",
            "current_name": "initialize_grbl_commands_0800423c",
            "code": "\nvoid initializeGrblCommands_0800423c(void)\n\n{\n  waitForStringCompletion(\n              \"ViewGrblSettings (view Grbl settings)\\r\\nViewParameters (view # parameters)\\r\\nViewParserState (view parser state)\\r\\nViewStartupBlocks (view startup blocks)\\r\\nSaveGrblSetting (save Grbl setting)\\r\\nSaveStartupBlock (save startup block)\\r\\nCheckGcodeMode (check gcode mode)\\r\\nKillAlarmLock (kill alarm lock)\\r\\nRunHomingCycle (run homing cycle)\\r\\nCycleStart (cycle start)\\r\\nFeedHold (feed hold)\\r\\n? (current status)\\r\\nResetGrbl (reset Grbl)\\r\\n\"\n              );\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800423c": "initialize_grbl_commands_0800423c",
                "wait_for_string_completion_080036c6": "waitForStringCompletion",
                "$$": "ViewGrblSettings",
                "$#": "ViewParameters",
                "$G": "ViewParserState",
                "$N": "ViewStartupBlocks",
                "$x=value": "SaveGrblSetting",
                "$Nx=line": "SaveStartupBlock",
                "$C": "CheckGcodeMode",
                "$X": "KillAlarmLock",
                "$H": "RunHomingCycle",
                "~": "CycleStart",
                "!": "FeedHold",
                "ctrl-x": "ResetGrbl"
            },
            "calling": [
                "FUN_08003b98"
            ],
            "called": [
                "FUN_080036c6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004250": {
            "entrypoint": "0x08004250",
            "current_name": "print_configuration_settings_08004250",
            "code": "\nvoid printConfigurationSettings_08004250(void)\n\n{\n  undefined4 acceleration;\n  \n  wait_for_string_completion_080036c6(&DAT_0800b8b8);\n  print_float_number_08003826(DAT_20000ebc);\n  wait_for_string_completion_080036c6(\" (x, step/mm)\\r\\n$1=\");\n  print_float_number_08003826(DAT_20000ec0);\n  wait_for_string_completion_080036c6(\" (y, step/mm)\\r\\n$2=\");\n  print_float_number_08003826(DAT_20000ec4);\n  wait_for_string_completion_080036c6(\" (z, step/mm)\\r\\n$3=\");\n  print_absolute_reversed_number_080037fc(DAT_20000ec9);\n  wait_for_string_completion_080036c6(\" (step pulse, usec)\\r\\n$4=\");\n  print_float_number_08003826(DAT_20000ecc);\n  wait_for_string_completion_080036c6(\" (default feed, mm/min)\\r\\n$5=\");\n  print_float_number_08003826(DAT_20000ed0);\n  wait_for_string_completion_080036c6(\" (default seek, mm/min)\\r\\n$6=\");\n  print_absolute_reversed_number_080037fc(DAT_20000ed4);\n  wait_for_string_completion_080036c6(\" (step port invert mask, int:\");\n  wait_for_bits_to_be_set_0800375c(DAT_20000ed4);\n  wait_for_string_completion_080036c6(\")\\r\\n$7=\");\n  print_absolute_reversed_number_080037fc(DAT_20000ef8);\n  wait_for_string_completion_080036c6(\" (step idle delay, msec)\\r\\n$8=\");\n  acceleration = calculate_float_08009054(DAT_20000edc,0x45610000);\n  print_float_number_08003826(acceleration);\n  wait_for_string_completion_080036c6(\" (acceleration, mm/sec^2)\\r\\n$9=\");\n  print_float_number_08003826(DAT_20000ee0);\n  wait_for_string_completion_080036c6(\" (junction deviation, mm)\\r\\n$10=\");\n  print_float_number_08003826(DAT_20000ed8);\n  wait_for_string_completion_080036c6(\" (arc, mm/segment)\\r\\n$11=\");\n  print_absolute_reversed_number_080037fc(DAT_20000efa);\n  wait_for_string_completion_080036c6(\" (n-arc correction, int)\\r\\n$12=\");\n  print_absolute_reversed_number_080037fc(DAT_20000ef9);\n  wait_for_string_completion_080036c6(\" (n-decimals, int)\\r\\n$13=\");\n  print_absolute_reversed_number_080037fc((DAT_20000ee4 & 1) != 0);\n  wait_for_string_completion_080036c6(\" (report inches, bool)\\r\\n$14=\");\n  print_absolute_reversed_number_080037fc((DAT_20000ee4 & 2) != 0);\n  wait_for_string_completion_080036c6(\" (auto start, bool)\\r\\n$15=\");\n  print_absolute_reversed_number_080037fc((DAT_20000ee4 & 4) != 0);\n  wait_for_string_completion_080036c6(\" (invert step enable, bool)\\r\\n$16=\");\n  print_absolute_reversed_number_080037fc((DAT_20000ee4 & 8) != 0);\n  wait_for_string_completion_080036c6(\" (hard limits, bool)\\r\\n$17=\");\n  print_absolute_reversed_number_080037fc((DAT_20000ee4 & 0x10) != 0);\n  wait_for_string_completion_080036c6(\" (homing cycle, bool)\\r\\n$18=\");\n  print_absolute_reversed_number_080037fc(DAT_20000ee6);\n  wait_for_string_completion_080036c6(\" (homing dir invert mask, int:\");\n  wait_for_bits_to_be_set_0800375c(DAT_20000ee6);\n  wait_for_string_completion_080036c6(\")\\r\\n$19=\");\n  print_float_number_08003826(DAT_20000ee8);\n  wait_for_string_completion_080036c6(\" (homing feed, mm/min)\\r\\n$20=\");\n  print_float_number_08003826(DAT_20000eec);\n  wait_for_string_completion_080036c6(\" (homing seek, mm/min)\\r\\n$21=\");\n  print_absolute_reversed_number_080037fc(DAT_20000ef0);\n  wait_for_string_completion_080036c6(\" (homing debounce, msec)\\r\\n$22=\");\n  print_float_number_08003826(DAT_20000ef4);\n  wait_for_string_completion_080036c6(\" (homing pull-off, mm)\\r\\n$23=\");\n  print_absolute_reversed_number_080037fc(DAT_20000ed6);\n  wait_for_string_completion_080036c6(\" (dir port invert mask, int:\");\n  wait_for_bits_to_be_set_0800375c(DAT_20000ed6);\n  wait_for_string_completion_080036c6(&DAT_0800bb94);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004250": "print_configuration_settings_08004250",
                "uVar1": "acceleration"
            },
            "calling": [
                "FUN_08003b98",
                "FUN_080051b4"
            ],
            "called": [
                "FUN_080036c6",
                "FUN_080037fc",
                "FUN_0800375c",
                "FUN_08009054",
                "FUN_08003826"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080044e8": {
            "entrypoint": "0x080044e8",
            "current_name": "calculate_and_print_float_numbers_080044e8",
            "code": "\nvoid calculateAndPrintFloatNumbers_080044e8(void)\n\n{\n  int verificationResult;\n  undefined4 convertedFloat;\n  undefined8 decodedFloat;\n  undefined4 memoryValues [3];\n  byte index;\n  byte counter;\n  \n  counter = 0;\n  while( true ) {\n    if (7 < counter) {\n      wait_for_string_completion_080036c6(\"[G92:\");\n      for (index = 0; index < 3; index = index + 1) {\n        if ((DAT_20000ee4 & 1) == 0) {\n          print_float_number_08003826(*(undefined4 *)(&DAT_20000e74 + (index + 10) * 4));\n        }\n        else {\n          decodedFloat = decode_and_improve_08008590(*(undefined4 *)(&DAT_20000e74 + (index + 10) * 4));\n          decodedFloat = calculate_result_08008640((int)decodedFloat,(int)((ulonglong)decodedFloat >> 0x20),0x57e16865,0x3fa42851);\n          convertedFloat = convert_to_float_08008c30((int)decodedFloat,(int)((ulonglong)decodedFloat >> 0x20));\n          print_float_number_08003826(convertedFloat);\n        }\n        if (index < 2) {\n          wait_for_string_completion_080036c6(&DAT_0800bbbc);\n        }\n        else {\n          wait_for_string_completion_080036c6(&DAT_0800b764);\n        }\n      }\n      return;\n    }\n    verificationResult = verify_memory_values_08004d7c(counter,memoryValues);\n    if (verificationResult == 0) break;\n    wait_for_string_completion_080036c6(&DAT_0800bb98);\n    switch(counter) {\n    case 0:\n      wait_for_string_completion_080036c6(&DAT_0800bb9c);\n      break;\n    case 1:\n      wait_for_string_completion_080036c6(&DAT_0800bba0);\n      break;\n    case 2:\n      wait_for_string_completion_080036c6(&DAT_0800bba4);\n      break;\n    case 3:\n      wait_for_string_completion_080036c6(&DAT_0800bba8);\n      break;\n    case 4:\n      wait_for_string_completion_080036c6(&DAT_0800bbac);\n      break;\n    case 5:\n      wait_for_string_completion_080036c6(&DAT_0800bbb0);\n      break;\n    case 6:\n      wait_for_string_completion_080036c6(&DAT_0800bbb4);\n      break;\n    case 7:\n      wait_for_string_completion_080036c6(&DAT_0800bbb8);\n    }\n    for (index = 0; index < 3; index = index + 1) {\n      if ((DAT_20000ee4 & 1) == 0) {\n        print_float_number_08003826(memoryValues[index]);\n      }\n      else {\n        decodedFloat = decode_and_improve_08008590(memoryValues[index]);\n        decodedFloat = calculate_result_08008640((int)decodedFloat,(int)((ulonglong)decodedFloat >> 0x20),0x57e16865,0x3fa42851);\n        convertedFloat = convert_to_float_08008c30((int)decodedFloat,(int)((ulonglong)decodedFloat >> 0x20));\n        print_float_number_08003826(convertedFloat);\n      }\n      if (index < 2) {\n        wait_for_string_completion_080036c6(&DAT_0800bbbc);\n      }\n      else {\n        wait_for_string_completion_080036c6(&DAT_0800b764);\n      }\n    }\n    counter = counter + 1;\n  }\n  FUNC_08004030(10);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080044e8": "calculate_and_print_float_numbers_080044e8",
                "auStack_18": "memoryValues",
                "local_a": "index",
                "local_9": "counter",
                "iVar1": "verificationResult",
                "uVar2": "convertedFloat",
                "uVar3": "decodedFloat"
            },
            "calling": [
                "FUN_08003b98"
            ],
            "called": [
                "FUN_080036c6",
                "FUN_08008590",
                "FUN_08008640",
                "FUN_08004030",
                "FUN_08008c30",
                "FUN_08003826",
                "FUN_08004d7c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080046d0": {
            "entrypoint": "0x080046d0",
            "current_name": "print_formatted_output_080046d0",
            "code": "\nvoid printFormattedOutput_080046d0(void)\n\n{\n  undefined4 uVar1;\n  undefined8 uVar2;\n  \n  switch(DAT_20000e71) {\n  case 0:\n    waitForStringCompletion(&DAT_0800bbc8);\n    break;\n  case 1:\n    waitForStringCompletion(&DAT_0800bbcc);\n    break;\n  case 2:\n    waitForStringCompletion(&DAT_0800bbd0);\n    break;\n  case 3:\n    waitForStringCompletion(&DAT_0800bbd4);\n    break;\n  case 4:\n    waitForStringCompletion(&DAT_0800bbd8);\n  }\n  waitForStringCompletion(&DAT_0800bbe0);\n  printReversedNumber(DAT_20000e8c + 0x36);\n  if (DAT_20000e89 == '\\0') {\n    if (DAT_20000e8a == '\\x01') {\n      waitForStringCompletion(&DAT_0800bbe4);\n    }\n    else {\n      waitForStringCompletion(&DAT_0800bbec);\n    }\n  }\n  else {\n    waitForStringCompletion(&DAT_0800bbf4);\n  }\n  if (DAT_20000e73 == '\\0') {\n    waitForStringCompletion(&DAT_0800bc04);\n  }\n  else {\n    waitForStringCompletion(&DAT_0800bbfc);\n  }\n  if (DAT_20000e74 == '\\0') {\n    waitForStringCompletion(&DAT_0800bc14);\n  }\n  else {\n    waitForStringCompletion(&DAT_0800bc0c);\n  }\n  if (DAT_20000e72 == '\\0') {\n    waitForStringCompletion(&DAT_0800bc24);\n  }\n  else {\n    waitForStringCompletion(&DAT_0800bc1c);\n  }\n  if (DAT_20000e75 == 2) {\n    waitForStringCompletion(&DAT_0800bc34);\n  }\n  else if (DAT_20000e75 < 3) {\n    if (DAT_20000e75 == 0) {\n      waitForStringCompletion(&DAT_0800bc2c);\n    }\n    else if (DAT_20000e75 == 1) {\n      waitForStringCompletion(&DAT_0800bc30);\n    }\n  }\n  if (DAT_20000e76 == '\\x01') {\n    waitForStringCompletion(&DAT_0800bc38);\n  }\n  else if (DAT_20000e76 < '\\x02') {\n    if (DAT_20000e76 == -1) {\n      waitForStringCompletion(&DAT_0800bc3c);\n    }\n    else if (DAT_20000e76 == '\\0') {\n      waitForStringCompletion(&DAT_0800bc40);\n    }\n  }\n  if (DAT_20000e77 == 2) {\n    waitForStringCompletion(&DAT_0800bc4c);\n  }\n  else if (DAT_20000e77 < 3) {\n    if (DAT_20000e77 == 0) {\n      waitForStringCompletion(&DAT_0800bc44);\n    }\n    else if (DAT_20000e77 == 1) {\n      waitForStringCompletion(&DAT_0800bc48);\n    }\n  }\n  waitForStringCompletion(&DAT_0800bc50);\n  printReversedNumber(DAT_20000e88);\n  waitForStringCompletion(&DAT_0800bc54);\n  if (DAT_20000e73 == '\\0') {\n    printFloatNumber(DAT_20000e78);\n  }\n  else {\n    uVar2 = decodeAndImprove(DAT_20000e78);\n    uVar2 = calculateResult((int)uVar2,(int)((ulonglong)uVar2 >> 0x20),0x57e16865,0x3fa42851);\n    uVar1 = convertToFloat((int)uVar2,(int)((ulonglong)uVar2 >> 0x20));\n    printFloatNumber(uVar1);\n  }\n  waitForStringCompletion(&DAT_0800b764);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080046d0": "print_formatted_output_080046d0",
                "decode_and_improve_08008590": "decodeAndImprove",
                "calculate_result_08008640": "calculateResult",
                "convert_to_float_08008c30": "convertToFloat",
                "print_absolute_reversed_number_080037fc": "printReversedNumber",
                "wait_for_string_completion_080036c6": "waitForStringCompletion",
                "print_float_number_08003826": "printFloatNumber"
            },
            "calling": [
                "FUN_08003b98"
            ],
            "called": [
                "FUN_080036c6",
                "FUN_080037fc",
                "FUN_08008590",
                "FUN_08008640",
                "FUN_08008c30",
                "FUN_08003826"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004900": {
            "entrypoint": "0x08004900",
            "current_name": "print_reversed_number_08004900",
            "code": "\nvoid print_reversed_number_08004900(undefined number,undefined4 flag)\n\n{\n  wait_for_string_completion(&DAT_0800bc58);\n  print_absolute_reversed_number(number);\n  wait_for_string_completion(&DAT_0800bc5c);\n  wait_for_flag_to_be_set(flag);\n  wait_for_string_completion(&DAT_0800b6d8);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004900": "print_reversed_number_08004900",
                "param_1": "number",
                "param_2": "flag",
                "wait_for_string_completion_080036c6": "wait_for_string_completion",
                "print_absolute_reversed_number_080037fc": "print_absolute_reversed_number",
                "wait_for_flag_to_be_set_0800369c": "wait_for_flag_to_be_set"
            },
            "calling": [
                "FUN_08003b98"
            ],
            "called": [
                "FUN_080036c6",
                "FUN_080037fc",
                "FUN_0800369c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004940": {
            "entrypoint": "0x08004940",
            "current_name": "print_position_information_08004940",
            "code": "\nvoid printPositionInformation_08004940(void)\n\n{\n  undefined4 magnitude;\n  uint index;\n  undefined4 floatingPointValue;\n  undefined8 decodedValue;\n  undefined8 improvedValue;\n  undefined4 positionValues [6];\n  byte dimensionIndex;\n  \n  positionValues[3] = DAT_20000eac;\n  positionValues[4] = DAT_20000eb0;\n  positionValues[5] = DAT_20000eb4;\n  switch(DAT_20000ea9) {\n  case 0:\n    wait_for_string_completion_080036c6(\"<Idle\");\n    break;\n  case 2:\n    wait_for_string_completion_080036c6(\"<Queue\");\n    break;\n  case 3:\n    wait_for_string_completion_080036c6(&DAT_0800bc70);\n    break;\n  case 4:\n    wait_for_string_completion_080036c6(\"<Hold\");\n    break;\n  case 5:\n    wait_for_string_completion_080036c6(\"<Home\");\n    break;\n  case 6:\n    wait_for_string_completion_080036c6(\"<Alarm\");\n    break;\n  case 7:\n    wait_for_string_completion_080036c6(\"<Check\");\n  }\n  wait_for_string_completion_080036c6(\",MPos:\");\n  for (dimensionIndex = 0; dimensionIndex < 3; dimensionIndex = dimensionIndex + 1) {\n    magnitude = calculate_signed_magnitude_08008e44(positionValues[dimensionIndex + 3]);\n    index = (uint)dimensionIndex;\n    magnitude = calculate_float_08009054(magnitude,(&DAT_20000ebc)[dimensionIndex]);\n    positionValues[index] = magnitude;\n    if ((DAT_20000ee4 & 1) != 0) {\n      decodedValue = decode_and_improve_08008590(positionValues[dimensionIndex]);\n      decodedValue = calculate_result_08008640((int)decodedValue,(int)((ulonglong)decodedValue >> 0x20),0x57e16865,0x3fa42851);\n      index = (uint)dimensionIndex;\n      magnitude = convert_to_float_08008c30((int)decodedValue,(int)((ulonglong)decodedValue >> 0x20));\n      positionValues[index] = magnitude;\n    }\n    print_float_number_08003826(positionValues[dimensionIndex]);\n    wait_for_string_completion_080036c6(&DAT_0800bbbc);\n  }\n  wait_for_string_completion_080036c6(\"WPos:\");\n  for (dimensionIndex = 0; dimensionIndex < 3; dimensionIndex = dimensionIndex + 1) {\n    if ((DAT_20000ee4 & 1) == 0) {\n      floatingPointValue = positionValues[dimensionIndex];\n      magnitude = calculate_floating_point_08008cdc(*(undefined4 *)(&DAT_20000e70 + (dimensionIndex + 8) * 4),\n                           *(undefined4 *)(&DAT_20000e74 + (dimensionIndex + 10) * 4));\n      index = (uint)dimensionIndex;\n      magnitude = calculate_floating_point_08008cd8(floatingPointValue,magnitude);\n      positionValues[index] = magnitude;\n    }\n    else {\n      decodedValue = decode_and_improve_08008590(positionValues[dimensionIndex]);\n      magnitude = calculate_floating_point_08008cdc(*(undefined4 *)(&DAT_20000e70 + (dimensionIndex + 8) * 4),\n                           *(undefined4 *)(&DAT_20000e74 + (dimensionIndex + 10) * 4));\n      improvedValue = decode_and_improve_08008590(magnitude);\n      improvedValue = calculate_result_08008640((int)improvedValue,(int)((ulonglong)improvedValue >> 0x20),0x57e16865,0x3fa42851);\n      decodedValue = reverse_binary_calculation_080082d0((int)decodedValue,(int)((ulonglong)decodedValue >> 0x20),(int)improvedValue,\n                           (int)((ulonglong)improvedValue >> 0x20));\n      index = (uint)dimensionIndex;\n      magnitude = convert_to_float_08008c30((int)decodedValue,(int)((ulonglong)decodedValue >> 0x20));\n      positionValues[index] = magnitude;\n    }\n    print_float_number_08003826(positionValues[dimensionIndex]);\n    if (dimensionIndex < 2) {\n      wait_for_string_completion_080036c6(&DAT_0800bbbc);\n    }\n  }\n  wait_for_string_completion_080036c6(&DAT_0800bca8);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004940": "print_position_information_08004940",
                "auStack_2c": "positionValues",
                "uVar1": "magnitude",
                "uVar2": "index",
                "uVar3": "floatingPointValue",
                "uVar4": "decodedValue",
                "uVar5": "improvedValue",
                "local_11": "dimensionIndex"
            },
            "calling": [
                "FUN_08003a74"
            ],
            "called": [
                "FUN_08008cdc",
                "FUN_080036c6",
                "FUN_08008590",
                "FUN_08008640",
                "FUN_08008e44",
                "FUN_08008cd8",
                "FUN_08008c30",
                "FUN_08009054",
                "FUN_08003826",
                "FUN_080082d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004bc0": {
            "entrypoint": "0x08004bc0",
            "current_name": "process_data_08004bc0",
            "code": "\nvoid processData_08004bc0(byte inputByte,undefined4 inputValue)\n\n{\n  processData_08004bc0Helper((unsignedShort)inputByte * 0x101 + 0x300,inputValue,0x100);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004bc0": "process_data_08004bc0",
                "param_1": "inputByte",
                "param_2": "inputValue",
                "process_data_08000374": "processDataHelper",
                "ushort": "unsignedShort"
            },
            "calling": [
                "FUN_08003b98",
                "FUN_08004d2c"
            ],
            "called": [
                "FUN_08000374"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004bf4": {
            "entrypoint": "0x08004bf4",
            "current_name": "process_data_08004bf4",
            "code": "\nvoid process_data_08004bf4(byte data_byte,undefined4 data_ptr)\n\n{\n  process_data_08004bf4_08000374((unsigned_short)data_byte * 0xd + 0x200,data_ptr,0xc);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004bf4": "process_data_08004bf4",
                "param_1": "data_byte",
                "param_2": "data_ptr",
                "ushort": "unsigned_short"
            },
            "calling": [
                "FUN_080005b4",
                "FUN_08004d7c"
            ],
            "called": [
                "FUN_08000374"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004c2a": {
            "entrypoint": "0x08004c2a",
            "current_name": "initialize_data_08004c2a",
            "code": "\nvoid initializeData_08004c2a(void)\n\n{\n  storeData(0,5);\n  processData(1,&DAT_20000ebc,0x40);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004c2a": "initialize_data_08004c2a",
                "store_data_08000340": "storeData",
                "process_data_08000374": "processData"
            },
            "calling": [
                "FUN_08004e30",
                "FUN_08004c48"
            ],
            "called": [
                "FUN_08000374",
                "FUN_08000340"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004c48": {
            "entrypoint": "0x08004c48",
            "current_name": "initialize_settings_08004c48",
            "code": "\nvoid initialize_settings_08004c48(char input_flag)\n\n{\n  if (input_flag != '\\0') {\n    DAT_20000ebc = 0x431d7af6;\n    DAT_20000ec0 = 0x431d7af6;\n    DAT_20000ec4 = 0x431d7af6;\n    DAT_20000ec9 = 10;\n    DAT_20000ecc = 0x437a0000;\n    DAT_20000ed0 = 0x43fa0000;\n    DAT_20000edc = 0x470ca000;\n    DAT_20000ed8 = 0x3dcccccd;\n    DAT_20000ed4 = 0;\n    DAT_20000ed6 = 0xa80;\n    DAT_20000ee0 = 0x3d4ccccd;\n  }\n  DAT_20000ee4 = 0x12;\n  DAT_20000ee6 = 0;\n  DAT_20000ee8 = 0x41c80000;\n  DAT_20000eec = 0x437a0000;\n  DAT_20000ef0 = 100;\n  DAT_20000ef4 = 0x3f800000;\n  DAT_20000ef8 = 0x19;\n  DAT_20000ef9 = 3;\n  DAT_20000efa = 0x19;\n  initialize_data_08004c2a();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004c48": "initialize_settings_08004c48",
                "param_1": "input_flag"
            },
            "calling": [
                "FUN_08004dd2",
                "FUN_080051b4"
            ],
            "called": [
                "FUN_08004c2a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004d2c": {
            "entrypoint": "0x08004d2c",
            "current_name": "check_and_process_data_08004d2c",
            "code": "\nbool checkAndProcessData_08004d2c(byte byteValue,undefined *buffer)\n\n{\n  int comparisonResult;\n  \n  comparisonResult = compare_memory_values_080003ec(buffer,(ushort)byteValue * 0x101 + 0x300,0x100);\n  if (comparisonResult == 0) {\n    *buffer = 0;\n    process_data_08004bc0(byteValue,buffer);\n  }\n  return comparisonResult != 0;\n}\n\n",
            "renaming": {
                "FUN_08004d2c": "check_and_process_data_08004d2c",
                "param_1": "byteValue",
                "param_2": "buffer",
                "iVar1": "comparisonResult"
            },
            "calling": [
                "FUN_08003b98",
                "FUN_080039bc"
            ],
            "called": [
                "FUN_080003ec",
                "FUN_08004bc0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004d7c": {
            "entrypoint": "0x08004d7c",
            "current_name": "verify_memory_values_08004d7c",
            "code": "\nbool verifyMemoryValues_08004d7c(byte byteValue,undefined4 address)\n\n{\n  int comparisonResult;\n  \n  comparisonResult = compare_memory_values_080003ec(address,(ushort)byteValue * 0xd + 0x200,0xc);\n  if (comparisonResult == 0) {\n    fill_memory_with_byte_0800b430(address,0,0xc);\n    process_data_08004bf4(byteValue,address);\n  }\n  return comparisonResult != 0;\n}\n\n",
            "renaming": {
                "FUN_08004d7c": "verify_memory_values_08004d7c",
                "param_1": "byteValue",
                "param_2": "address",
                "iVar1": "comparisonResult"
            },
            "calling": [
                "FUN_080044e8",
                "FUN_080004ac",
                "FUN_080005b4",
                "FUN_080051b4"
            ],
            "called": [
                "FUN_080003ec",
                "FUN_0800b430",
                "FUN_08004bf4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004dd2": {
            "entrypoint": "0x08004dd2",
            "current_name": "check_memory_08004dd2",
            "code": "\nundefined4 checkMemory_08004dd2(void)\n\n{\n  byte memoryValue;\n  int comparisonResult;\n  \n  memoryValue = get_memory_value_08000310(0);\n  if (memoryValue == 5) {\n    comparisonResult = compare_memory_values_080003ec(&DAT_20000ebc,1,0x40);\n    if (comparisonResult == 0) {\n      return 0;\n    }\n  }\n  else {\n    if (4 < memoryValue) {\n      return 0;\n    }\n    comparisonResult = compare_memory_values_080003ec(&DAT_20000ebc,1,0x28);\n    if (comparisonResult == 0) {\n      return 0;\n    }\n    initialize_settings_08004c48(0);\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08004dd2": "check_memory_08004dd2",
                "bVar1": "memoryValue",
                "iVar2": "comparisonResult"
            },
            "calling": [
                "FUN_080051b4"
            ],
            "called": [
                "FUN_080003ec",
                "FUN_08004c48",
                "FUN_08000310"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004e30": {
            "entrypoint": "0x08004e30",
            "current_name": "initialize_data_08004e30",
            "code": "\nundefined4 initialize_data_08004e30(int input_type,uint input_value)\n\n{\n  undefined4 result;\n  int concat_result;\n  undefined8 decoded_value;\n  \n  switch(input_type) {\n  case 0:\n  case 1:\n  case 2:\n    concat_result = concatenate_and_return_or_0800923c(input_value,0);\n    if (concat_result != 0) {\n      return 8;\n    }\n    (&DAT_20000ebc)[input_type] = input_value;\n    break;\n  case 3:\n    concat_result = check_null_termination_08009228(input_value,0x40400000);\n    if (concat_result != 0) {\n      return 9;\n    }\n    decoded_value = decode_and_improve_08008590(input_value);\n    decoded_value = convert_to64_bit_float_08009654((int)decoded_value,(int)((ulonglong)decoded_value >> 0x20));\n    DAT_20000ec9 = calculate_shifted_value_08008bf0((int)decoded_value,(int)((ulonglong)decoded_value >> 0x20));\n    break;\n  case 4:\n    DAT_20000ecc = input_value;\n    break;\n  case 5:\n    DAT_20000ed0 = input_value;\n    break;\n  case 6:\n    decoded_value = decode_and_improve_08008590(input_value);\n    decoded_value = extract_bits_08009798((int)decoded_value,(int)((ulonglong)decoded_value >> 0x20));\n    DAT_20000ed4 = calculate_shifted_value_08008bf0((int)decoded_value,(int)((ulonglong)decoded_value >> 0x20));\n    break;\n  case 7:\n    decoded_value = decode_and_improve_08008590(input_value);\n    decoded_value = convert_to64_bit_float_08009654((int)decoded_value,(int)((ulonglong)decoded_value >> 0x20));\n    DAT_20000ef8 = calculate_shifted_value_08008bf0((int)decoded_value,(int)((ulonglong)decoded_value >> 0x20));\n    break;\n  case 8:\n    result = calculate_floating_point_08008eec(input_value,0x42700000);\n    DAT_20000edc = calculate_floating_point_08008eec(result,0x42700000);\n    break;\n  case 9:\n    DAT_20000ee0 = input_value & 0x7fffffff;\n    break;\n  case 10:\n    DAT_20000ed8 = input_value;\n    break;\n  case 0xb:\n    decoded_value = decode_and_improve_08008590(input_value);\n    decoded_value = convert_to64_bit_float_08009654((int)decoded_value,(int)((ulonglong)decoded_value >> 0x20));\n    DAT_20000efa = calculate_shifted_value_08008bf0((int)decoded_value,(int)((ulonglong)decoded_value >> 0x20));\n    break;\n  case 0xc:\n    decoded_value = decode_and_improve_08008590(input_value);\n    decoded_value = convert_to64_bit_float_08009654((int)decoded_value,(int)((ulonglong)decoded_value >> 0x20));\n    DAT_20000ef9 = calculate_shifted_value_08008bf0((int)decoded_value,(int)((ulonglong)decoded_value >> 0x20));\n    break;\n  case 0xd:\n    concat_result = is_string_concatenated_08009214(input_value,0);\n    if (concat_result == 0) {\n      DAT_20000ee4 = DAT_20000ee4 | 1;\n    }\n    else {\n      DAT_20000ee4 = DAT_20000ee4 & 0xfe;\n    }\n    break;\n  case 0xe:\n    concat_result = is_string_concatenated_08009214(input_value,0);\n    if (concat_result == 0) {\n      DAT_20000ee4 = DAT_20000ee4 | 2;\n    }\n    else {\n      DAT_20000ee4 = DAT_20000ee4 & 0xfd;\n    }\n    break;\n  case 0xf:\n    concat_result = is_string_concatenated_08009214(input_value,0);\n    if (concat_result == 0) {\n      DAT_20000ee4 = DAT_20000ee4 | 4;\n    }\n    else {\n      DAT_20000ee4 = DAT_20000ee4 & 0xfb;\n    }\n    break;\n  case 0x10:\n    concat_result = is_string_concatenated_08009214(input_value,0);\n    if (concat_result == 0) {\n      DAT_20000ee4 = DAT_20000ee4 | 8;\n    }\n    else {\n      DAT_20000ee4 = DAT_20000ee4 & 0xf7;\n    }\n    check_flag_status_0800192c();\n    break;\n  case 0x11:\n    concat_result = is_string_concatenated_08009214(input_value,0);\n    if (concat_result == 0) {\n      DAT_20000ee4 = DAT_20000ee4 | 0x10;\n    }\n    else {\n      DAT_20000ee4 = DAT_20000ee4 & 0xef;\n    }\n    break;\n  case 0x12:\n    decoded_value = decode_and_improve_08008590(input_value);\n    decoded_value = extract_bits_08009798((int)decoded_value,(int)((ulonglong)decoded_value >> 0x20));\n    DAT_20000ee6 = calculate_shifted_value_08008bf0((int)decoded_value,(int)((ulonglong)decoded_value >> 0x20));\n    break;\n  case 0x13:\n    DAT_20000ee8 = input_value;\n    break;\n  case 0x14:\n    DAT_20000eec = input_value;\n    break;\n  case 0x15:\n    decoded_value = decode_and_improve_08008590(input_value);\n    decoded_value = convert_to64_bit_float_08009654((int)decoded_value,(int)((ulonglong)decoded_value >> 0x20));\n    DAT_20000ef0 = calculate_shifted_value_08008bf0((int)decoded_value,(int)((ulonglong)decoded_value >> 0x20));\n    break;\n  case 0x16:\n    DAT_20000ef4 = input_value;\n    break;\n  case 0x17:\n    decoded_value = decode_and_improve_08008590(input_value);\n    decoded_value = extract_bits_08009798((int)decoded_value,(int)((ulonglong)decoded_value >> 0x20));\n    DAT_20000ed6 = calculate_shifted_value_08008bf0((int)decoded_value,(int)((ulonglong)decoded_value >> 0x20));\n    break;\n  default:\n    return 6;\n  }\n  initialize_data_08004e30_08004c2a();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08004e30": "initialize_data_08004e30",
                "param_1": "input_type",
                "param_2": "input_value",
                "uVar1": "result",
                "iVar2": "concat_result",
                "uVar3": "decoded_value"
            },
            "calling": [
                "FUN_08003b98"
            ],
            "called": [
                "FUN_08009654",
                "FUN_08008bf0",
                "FUN_08008eec",
                "FUN_08008590",
                "FUN_08009214",
                "FUN_08009228",
                "FUN_08009798",
                "FUN_08004c2a",
                "FUN_0800923c",
                "FUN_0800192c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080051b4": {
            "entrypoint": "0x080051b4",
            "current_name": "improve_code_080051b4",
            "code": "\nvoid improve_code_080051b4(void)\n\n{\n  int iVar1;\n  undefined stack_buffer [15];\n  byte loop_iterator;\n  \n  iVar1 = check_memory_08004dd2();\n  if (iVar1 == 0) {\n    FUNC_08004030(10);\n    initialize_settings_08004c48(1);\n    print_configuration_settings_08004250();\n  }\n  for (loop_iterator = 0; loop_iterator < 8; loop_iterator = loop_iterator + 1) {\n    iVar1 = verify_memory_values_08004d7c(loop_iterator,stack_buffer);\n    if (iVar1 == 0) {\n      FUNC_08004030(10);\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080051b4": "improve_code_080051b4",
                "auStack_18": "stack_buffer",
                "local_9": "loop_iterator"
            },
            "calling": [
                "FUN_08001ddc"
            ],
            "called": [
                "FUN_08004dd2",
                "FUN_08004250",
                "FUN_08004030",
                "FUN_08004c48",
                "FUN_08004d7c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005208": {
            "entrypoint": "0x08005208",
            "current_name": "FUNC_08005208",
            "code": "\nvoid FUNC_08005208(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005208": "FUNC_08005208"
            },
            "calling": [
                "FUN_0800525c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005214": {
            "entrypoint": "0x08005214",
            "current_name": "FUNC_08005214",
            "code": "\nvoid FUNC_08005214(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005214": "FUNC_08005214"
            },
            "calling": [
                "FUN_08005250"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005220": {
            "entrypoint": "0x08005220",
            "current_name": "FUNC_08005220",
            "code": "\nvoid FUNC_08005220(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005220": "FUNC_08005220"
            },
            "calling": [
                "FUN_0800525c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800522c": {
            "entrypoint": "0x0800522c",
            "current_name": "FUNC_0800522c",
            "code": "\nvoid FUNC_0800522c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800522c": "FUNC_0800522c"
            },
            "calling": [
                "FUN_0800525c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005238": {
            "entrypoint": "0x08005238",
            "current_name": "initialize_application_08005238",
            "code": "\nvoid initialize_application_08005238(void)\n\n{\n  DAT_20000e12 = 0;\n  initialize_application_08005238_08005250();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005238": "initialize_application_08005238"
            },
            "calling": [
                "FUN_08001ddc"
            ],
            "called": [
                "FUN_08005250"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005250": {
            "entrypoint": "0x08005250",
            "current_name": "initialize_application_08005250",
            "code": "\nvoid initializeApplication_08005250(void)\n\n{\n  FUNC_08005214();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005250": "initialize_application_08005250"
            },
            "calling": [
                "FUN_0800525c",
                "FUN_08005238",
                "FUN_080025e8"
            ],
            "called": [
                "FUN_08005214"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800525c": {
            "entrypoint": "0x0800525c",
            "current_name": "process_user_input_0800525c",
            "code": "\nvoid process_user_input_0800525c(byte user_input)\n\n{\n  if ((int)(char)user_input != (uint)DAT_20000e12) {\n    process_active_user_data();\n    if (user_input == 0) {\n      initialize_application();\n      DAT_20000e12 = user_input;\n    }\n    else {\n      if ((char)user_input < '\\x01') {\n        FUNC_0800522c();\n      }\n      else {\n        FUNC_08005220();\n      }\n      FUNC_08005208();\n      DAT_20000e12 = user_input;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800525c": "process_user_input_0800525c",
                "param_1": "user_input",
                "process_active_user_data_08002fd4": "process_active_user_data",
                "initialize_application_08005250": "initialize_application"
            },
            "calling": [
                "FUN_080005b4"
            ],
            "called": [
                "FUN_0800522c",
                "FUN_08005250",
                "FUN_08002fd4",
                "FUN_08005220",
                "FUN_08005208"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080052ac": {
            "entrypoint": "0x080052ac",
            "current_name": "update_data_value_080052ac",
            "code": "\n\n\nvoid updateDataValue_080052ac(uint newValue)\n\n{\n  _DAT_40021014 = newValue | _DAT_40021014 & 0xfffffaaf;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080052ac": "update_data_value_080052ac",
                "param_1": "newValue"
            },
            "calling": [
                "FUN_08005760",
                "FUN_0800583c",
                "FUN_08005778"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080052dc": {
            "entrypoint": "0x080052dc",
            "current_name": "update_register_value_080052dc",
            "code": "\n\n\nvoid updateRegisterValue_080052dc(uint inputValue)\n\n{\n  _DAT_40021014 = inputValue | _DAT_40021014 & 0xfffff55f;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080052dc": "update_register_value_080052dc",
                "param_1": "inputValue"
            },
            "calling": [
                "FUN_080053a0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800530c": {
            "entrypoint": "0x0800530c",
            "current_name": "FUNC_0800530c",
            "code": "\nvoid FUNC_0800530c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800530c": "FUNC_0800530c"
            },
            "calling": [
                "FUN_080057e4"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005318": {
            "entrypoint": "0x08005318",
            "current_name": "FUNC_08005318",
            "code": "\nvoid FUNC_08005318(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005318": "FUNC_08005318"
            },
            "calling": [
                "FUN_08005790"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005324": {
            "entrypoint": "0x08005324",
            "current_name": "calculate_and_update_data_08005324",
            "code": "\nvoid calculateAndUpdateData_08005324(uint inputValue)\n\n{\n  uint adjustedValue;\n  \n  adjustedValue = inputValue;\n  if (inputValue < 800) {\n    adjustedValue = 800;\n  }\n  DAT_20000e28 = 1260000000 / adjustedValue;\n  update_data_08007bf0(DAT_20000e28);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005324": "calculate_and_update_data_08005324",
                "param_1": "inputValue",
                "local_14": "adjustedValue"
            },
            "calling": [
                "FUN_08005814",
                "FUN_080058a0",
                "FUN_080053a0"
            ],
            "called": [
                "FUN_08007bf0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005360": {
            "entrypoint": "0x08005360",
            "current_name": "update_counter_08005360",
            "code": "\nbool updateCounter_08005360(void)\n\n{\n  bool isExceedLimit;\n  \n  DAT_20000e2c = DAT_20000e28 + DAT_20000e2c;\n  isExceedLimit = 420000 < DAT_20000e2c;\n  if (isExceedLimit) {\n    DAT_20000e2c = DAT_20000e2c - 420000;\n  }\n  return isExceedLimit;\n}\n\n",
            "renaming": {
                "FUN_08005360": "update_counter_08005360",
                "bVar1": "isExceedLimit"
            },
            "calling": [
                "FUN_080053a0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080053a0": {
            "entrypoint": "0x080053a0",
            "current_name": "update_registers_080053a0",
            "code": "\nvoid update_registers_080053a0(void)\n\n{\n  int returnValue;\n  \n  update_register_value_080052dc(DAT_20000e3e);\n  DAT_20000e40 = DAT_20000e3c;\n  if (DAT_20000e38 == (ushort *)0x0) {\n    DAT_20000e38 = (ushort *)get_active_user_data_08002f74();\n    if (DAT_20000e38 == (ushort *)0x0) {\n      initialize_flags_080057e4();\n      DAT_20000eaa = DAT_20000eaa | 4;\n    }\n    else {\n      if (DAT_20000ea9 == '\\x03') {\n        DAT_20000e30 = *(uint *)(DAT_20000e38 + 0x14);\n        calculate_and_update_data_08005324(DAT_20000e30);\n        DAT_20000e2c = 210000;\n      }\n      DAT_20000e34 = (*(int *)(DAT_20000e38 + 0x18) >> 1) + *(int *)(DAT_20000e38 + 0x18);\n      DAT_20000e14 = -(*(int *)(DAT_20000e38 + 8) >> 1);\n      DAT_20000e20 = *(int *)(DAT_20000e38 + 8);\n      DAT_20000e24 = 0;\n      DAT_20000e18 = DAT_20000e14;\n      DAT_20000e1c = DAT_20000e14;\n    }\n  }\n  if (DAT_20000e38 != (ushort *)0x0) {\n    DAT_20000e3e = *DAT_20000e38;\n    DAT_20000e3c = 0;\n    DAT_20000e14 = *(int *)(DAT_20000e38 + 2) + DAT_20000e14;\n    if (0 < DAT_20000e14) {\n      DAT_20000e3c = 0x10;\n      DAT_20000e14 = DAT_20000e14 - DAT_20000e20;\n      if ((DAT_20000e3e & 0x20) == 0) {\n        DAT_20000eac = DAT_20000eac + 1;\n      }\n      else {\n        DAT_20000eac = DAT_20000eac + -1;\n      }\n    }\n    DAT_20000e18 = *(int *)(DAT_20000e38 + 4) + DAT_20000e18;\n    if (0 < DAT_20000e18) {\n      DAT_20000e3c = DAT_20000e3c | 0x440;\n      DAT_20000e18 = DAT_20000e18 - DAT_20000e20;\n      if ((DAT_20000e3e & 0x80) == 0) {\n        DAT_20000eb0 = DAT_20000eb0 + 1;\n      }\n      else {\n        DAT_20000eb0 = DAT_20000eb0 + -1;\n      }\n    }\n    DAT_20000e1c = *(int *)(DAT_20000e38 + 6) + DAT_20000e1c;\n    if (0 < DAT_20000e1c) {\n      DAT_20000e3c = DAT_20000e3c | 0x100;\n      DAT_20000e1c = DAT_20000e1c - DAT_20000e20;\n      if ((DAT_20000e3e & 0x200) == 0) {\n        DAT_20000eb4 = DAT_20000eb4 + 1;\n      }\n      else {\n        DAT_20000eb4 = DAT_20000eb4 + -1;\n      }\n    }\n    DAT_20000e24 = DAT_20000e24 + 1;\n    if (DAT_20000e24 < *(uint *)(DAT_20000e38 + 8)) {\n      if (DAT_20000ea9 == '\\x04') {\n        returnValue = update_counter_08005360();\n        if (returnValue != 0) {\n          if (*(uint *)(DAT_20000e38 + 0x18) < DAT_20000e30) {\n            DAT_20000e30 = DAT_20000e30 - *(int *)(DAT_20000e38 + 0x18);\n            calculate_and_update_data_08005324(DAT_20000e30);\n          }\n          else {\n            initialize_flags_080057e4();\n            DAT_20000eaa = DAT_20000eaa | 4;\n          }\n        }\n      }\n      else if (DAT_20000e24 < *(uint *)(DAT_20000e38 + 0x1a)) {\n        returnValue = update_counter_08005360();\n        if (returnValue != 0) {\n          DAT_20000e30 = DAT_20000e30 + *(int *)(DAT_20000e38 + 0x18);\n          if (*(uint *)(DAT_20000e38 + 0x1e) <= DAT_20000e30) {\n            DAT_20000e30 = *(uint *)(DAT_20000e38 + 0x1e);\n          }\n          calculate_and_update_data_08005324(DAT_20000e30);\n        }\n      }\n      else if (DAT_20000e24 < *(uint *)(DAT_20000e38 + 0x1c)) {\n        if (DAT_20000e30 != *(uint *)(DAT_20000e38 + 0x1e)) {\n          DAT_20000e30 = *(uint *)(DAT_20000e38 + 0x1e);\n          calculate_and_update_data_08005324(DAT_20000e30);\n        }\n      }\n      else if (DAT_20000e24 == *(uint *)(DAT_20000e38 + 0x1c)) {\n        if (DAT_20000e30 == *(uint *)(DAT_20000e38 + 0x1e)) {\n          DAT_20000e2c = 210000;\n        }\n        else {\n          DAT_20000e2c = 420000 - DAT_20000e2c;\n        }\n      }\n      else {\n        returnValue = update_counter_08005360();\n        if (returnValue != 0) {\n          if (DAT_20000e34 < DAT_20000e30) {\n            DAT_20000e30 = DAT_20000e30 - *(int *)(DAT_20000e38 + 0x18);\n          }\n          else {\n            DAT_20000e30 = DAT_20000e30 >> 1;\n          }\n          if (DAT_20000e30 < *(uint *)(DAT_20000e38 + 0x16)) {\n            DAT_20000e30 = *(uint *)(DAT_20000e38 + 0x16);\n          }\n          calculate_and_update_data_08005324(DAT_20000e30);\n        }\n      }\n    }\n    else {\n      DAT_20000e3c = 0;\n      DAT_20000e38 = (ushort *)0x0;\n      update_dat_variable_08002f40();\n    }\n  }\n  DAT_20000e3c = DAT_20000e3c ^ DAT_20000ed4;\n  DAT_20000e3e = DAT_20000e3e ^ DAT_20000ed6;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080053a0": "update_registers_080053a0",
                "iVar1": "returnValue"
            },
            "calling": [
                "FUN_08007c7c"
            ],
            "called": [
                "FUN_08002f40",
                "FUN_080057e4",
                "FUN_08002f74",
                "FUN_08005360",
                "FUN_080052dc",
                "FUN_08005324"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005760": {
            "entrypoint": "0x08005760",
            "current_name": "initialize_data_value_08005760",
            "code": "\nvoid initializeDataValue_08005760(void)\n\n{\n  update_data_value_080052ac(DAT_20000ed4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005760": "initialize_data_value_08005760"
            },
            "calling": [
                "FUN_08007c7c"
            ],
            "called": [
                "FUN_080052ac"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005778": {
            "entrypoint": "0x08005778",
            "current_name": "update_data_value_08005778",
            "code": "\nvoid update_data_value_08005778(void)\n\n{\n  update_data_value_08005778_080052ac(DAT_20000e40);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005778": "update_data_value_08005778"
            },
            "calling": [
                "FUN_08007c7c"
            ],
            "called": [
                "FUN_080052ac"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005790": {
            "entrypoint": "0x08005790",
            "current_name": "initialize_data_08005790",
            "code": "\nvoid initializeData_08005790(void)\n\n{\n  FUNC_08005318();\n  if (DAT_20000ea9 == '\\x03') {\n    DAT_20000e3c = DAT_20000ed4;\n    DAT_20000e3e = DAT_20000ed6;\n    setParameterValue(0x69);\n    initializeData_08005790((DAT_20000ec9 + 5) * 0x15);\n    setFlags();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005790": "initialize_data_08005790",
                "set_param_value_08007c40": "setParameterValue",
                "initialize_data_08007c5e": "initializeData",
                "set_flags_08007b70": "setFlags"
            },
            "calling": [
                "FUN_0800583c",
                "FUN_0800585c",
                "FUN_08001d4c"
            ],
            "called": [
                "FUN_08007c40",
                "FUN_08007c5e",
                "FUN_08005318",
                "FUN_08007b70"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080057e4": {
            "entrypoint": "0x080057e4",
            "current_name": "initialize_flags_080057e4",
            "code": "\nvoid initialize_flags_080057e4(void)\n\n{\n  clear_flags();\n  if ((DAT_20000ef8 != -1) || ((DAT_20000eaa & 0x20) != 0)) {\n    FUNC_0800530c();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080057e4": "initialize_flags_080057e4",
                "clear_flags_08007bc2": "clear_flags"
            },
            "calling": [
                "FUN_0800583c",
                "FUN_08001d4c",
                "FUN_080025e8",
                "FUN_080053a0"
            ],
            "called": [
                "FUN_08007bc2",
                "FUN_0800530c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005814": {
            "entrypoint": "0x08005814",
            "current_name": "initialize_memory_08005814",
            "code": "\nvoid initializeMemory_08005814(void)\n\n{\n  fillMemoryWithByte(&DAT_20000e14,0,0x24);\n  calculateAndUpdateData(800);\n  DAT_20000e38 = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005814": "initialize_memory_08005814",
                "fill_memory_with_byte_0800b430": "fillMemoryWithByte",
                "calculate_and_update_data_08005324": "calculateAndUpdateData"
            },
            "calling": [
                "FUN_08001ddc"
            ],
            "called": [
                "FUN_0800b430",
                "FUN_08005324"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800583c": {
            "entrypoint": "0x0800583c",
            "current_name": "initialize_and_update_data_0800583c",
            "code": "\nvoid initialize_and_update_data_0800583c(void)\n\n{\n  update_data_value_080052ac(DAT_20000ed4);\n  initialize_data();\n  initialize_flags();\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800583c": "initialize_and_update_data_0800583c",
                "initialize_data_08005790": "initialize_data",
                "initialize_flags_080057e4": "initialize_flags"
            },
            "calling": [
                "FUN_08001ddc"
            ],
            "called": [
                "FUN_08005790",
                "FUN_080057e4",
                "FUN_080052ac"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800585c": {
            "entrypoint": "0x0800585c",
            "current_name": "initialize_if_data_pending_0800585c",
            "code": "\nvoid initialize_if_data_pending_0800585c(void)\n\n{\n  if (DAT_20000ea9 == '\\x02') {\n    DAT_20000ea9 = '\\x03';\n    initialize_data();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800585c": "initialize_if_data_pending_0800585c",
                "initialize_data_08005790": "initialize_data"
            },
            "calling": [
                "FUN_08001e98",
                "FUN_08003a74",
                "FUN_080024c4"
            ],
            "called": [
                "FUN_08005790"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800587c": {
            "entrypoint": "0x0800587c",
            "current_name": "initialize_status_0800587c",
            "code": "\nvoid initializeStatus_0800587c(void)\n\n{\n  if (DAT_20000ea9 == '\\x03') {\n    DAT_20000ea9 = '\\x04';\n    DAT_20000eb8 = 0;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800587c": "initialize_status_0800587c"
            },
            "calling": [
                "FUN_08003a74"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080058a0": {
            "entrypoint": "0x080058a0",
            "current_name": "update_data_080058a0",
            "code": "\nvoid updateData_080058a0(void)\n\n{\n  if (DAT_20000e38 == 0) {\n    DAT_20000ea9 = 0;\n  }\n  else {\n    processData(*(int *)(DAT_20000e38 + 0x10) - DAT_20000e24);\n    DAT_20000e30 = 0;\n    calculateAndUpdateData(0);\n    DAT_20000e2c = 210000;\n    DAT_20000e24 = 0;\n    DAT_20000ea9 = 2;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080058a0": "update_data_080058a0",
                "calculate_and_update_data_08005324": "calculateAndUpdateData",
                "process_data_08003618": "processData"
            },
            "calling": [
                "FUN_08003a74"
            ],
            "called": [
                "FUN_08003618",
                "FUN_08005324"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005900": {
            "entrypoint": "0x08005900",
            "current_name": "check_flags_08005900",
            "code": "\nundefined4 checkFlags_08005900(byte byteValue)\n\n{\n  if (byteValue == 0x7e) {\n    DAT_20000eaa = DAT_20000eaa | 2;\n    return 1;\n  }\n  if (byteValue < 0x7f) {\n    if (byteValue == 0x3f) {\n      DAT_20000eaa = DAT_20000eaa | 1;\n      return 1;\n    }\n    if (byteValue < 0x40) {\n      if (byteValue == 0x18) {\n        initialize_and_check_flags_080025e8();\n        return 1;\n      }\n      if (byteValue == 0x21) {\n        DAT_20000eaa = DAT_20000eaa | 8;\n        return 1;\n      }\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08005900": "check_flags_08005900",
                "param_1": "byteValue"
            },
            "calling": [
                "FUN_08008286"
            ],
            "called": [
                "FUN_080025e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800597c": {
            "entrypoint": "0x0800597c",
            "current_name": "execute_software_interrupt_0800597c",
            "code": "\nvoid executeSoftwareInterrupt_0800597c(void)\n\n{\n  software_interrupt(0x3f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800597c": "execute_software_interrupt_0800597c"
            },
            "calling": [
                "FUN_08005984"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005984": {
            "entrypoint": "0x08005984",
            "current_name": "execute_or_return_interrupt_08005984",
            "code": "\nundefined4 execute_or_return_interrupt_08005984(undefined4 input_value)\n\n{\n  undefined4 result;\n  \n  if (DAT_20000e44 == 0) {\n    result = execute_software_interrupt_0800597c(1,input_value,0);\n  }\n  else {\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08005984": "execute_or_return_interrupt_08005984",
                "param_1": "input_value",
                "uVar1": "result"
            },
            "calling": [
                "FUN_08007540"
            ],
            "called": [
                "FUN_0800597c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080059b4": {
            "entrypoint": "0x080059b4",
            "current_name": "initialize_system_080059b4",
            "code": "\n\n\nundefined4 initialize_system_080059b4(void)\n\n{\n  _DAT_40023c00 = _DAT_40023c00 | 0x700;\n  allocate_memory(16000);\n  set_flag_pattern(3);\n  FUNC_08005a50();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080059b4": "initialize_system_080059b4",
                "update_memory_08006d72": "allocate_memory",
                "set_bit_pattern_08006ce0": "set_flag_pattern"
            },
            "calling": [
                "FUN_08007540"
            ],
            "called": [
                "FUN_08006ce0",
                "FUN_08005a50",
                "FUN_08006d72"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080059f8": {
            "entrypoint": "0x080059f8",
            "current_name": "initialize_data_080059f8",
            "code": "\n\n\nundefined4 initializeData_080059f8(void)\n\n{\n  _DAT_40023820 = 0;\n  _DAT_40023824 = 0;\n  _DAT_40023810 = 0;\n  _DAT_40023814 = 0;\n  _DAT_40023818 = 0;\n  FUNC_08005a5c();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080059f8": "initialize_data_080059f8"
            },
            "calling": [],
            "called": [
                "FUN_08005a5c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005a50": {
            "entrypoint": "0x08005a50",
            "current_name": "FUNC_08005a50",
            "code": "\nvoid FUNC_08005a50(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005a50": "FUNC_08005a50"
            },
            "calling": [
                "FUN_080059b4"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005a5c": {
            "entrypoint": "0x08005a5c",
            "current_name": "FUNC_08005a5c",
            "code": "\nvoid FUNC_08005a5c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005a5c": "FUNC_08005a5c"
            },
            "calling": [
                "FUN_080059f8"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005a68": {
            "entrypoint": "0x08005a68",
            "current_name": "increment_counter_08005a68",
            "code": "\nvoid incrementCounter_08005a68(void)\n\n{\n  DAT_20000e48 = DAT_20000e48 + 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005a68": "increment_counter_08005a68"
            },
            "calling": [
                "FUN_08007756"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005a84": {
            "entrypoint": "0x08005a84",
            "current_name": "get_data_value_08005a84",
            "code": "\nundefined4 get_data_value_08005a84(void)\n\n{\n  return DAT_20000e48;\n}\n\n",
            "renaming": {
                "FUN_08005a84": "get_data_value_08005a84"
            },
            "calling": [
                "FUN_08000268",
                "FUN_0800618c",
                "FUN_08007756",
                "FUN_08005cec",
                "FUN_08005a98"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005a98": {
            "entrypoint": "0x08005a98",
            "current_name": "check_param_value_in_range_08005a98",
            "code": "\nvoid checkParamValueInRange_08005a98(int value)\n\n{\n  int dataValue1;\n  uint dataValue2;\n  \n  dataValue1 = get_data_value_08005a84();\n  do {\n    dataValue2 = get_data_value_08005a84();\n  } while (dataValue2 < (uint)(value + dataValue1));\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005a98": "check_param_value_in_range_08005a98",
                "param_1": "value",
                "iVar1": "dataValue1",
                "uVar2": "dataValue2"
            },
            "calling": [
                "FUN_080002a0"
            ],
            "called": [
                "FUN_08005a84"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005bdc": {
            "entrypoint": "0x08005bdc",
            "current_name": "update_memory_08005bdc",
            "code": "\nvoid updateMemory_08005bdc(byte dataOffset,uint newValue)\n\n{\n  if ((char)dataOffset < '\\0') {\n    *(char *)((dataOffset & 0xf) + 0xe000ed14) = (char)((newValue & 0xff) << 4);\n  }\n  else {\n    *(char *)((char)dataOffset + -0x1fff1c00) = (char)((newValue & 0xff) << 4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005bdc": "update_memory_08005bdc",
                "param_1": "dataOffset",
                "param_2": "newValue"
            },
            "calling": [
                "FUN_08005c30"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005c30": {
            "entrypoint": "0x08005c30",
            "current_name": "check_and_update_memory_08005c30",
            "code": "\n\n\nbool checkAndUpdateMemory_08005c30(int input)\n\n{\n  bool isValid;\n  \n  isValid = input - 1U < 0x1000000;\n  if (isValid) {\n    _DAT_e000e014 = input + -1;\n    updateMemory(0xffffffff,0xf);\n    _DAT_e000e018 = 0;\n    _DAT_e000e010 = 7;\n  }\n  return !isValid;\n}\n\n",
            "renaming": {
                "FUN_08005c30": "check_and_update_memory_08005c30",
                "param_1": "input",
                "bVar1": "isValid",
                "update_memory_08005bdc": "updateMemory"
            },
            "calling": [
                "FUN_0800618c"
            ],
            "called": [
                "FUN_08005bdc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005cec": {
            "entrypoint": "0x08005cec",
            "current_name": "check_permissions_08005cec",
            "code": "\n\n\nundefined4 checkPermissions_08005cec(uint *permissions)\n\n{\n  int iVar1;\n  uint uVar2;\n  \n  if ((*permissions & 1) != 0) {\n    if (((_DAT_40023808 & 0xc) == 4) ||\n       (((_DAT_40023808 & 0xc) == 8 && ((_DAT_40023804 & 0x400000) == 0x400000)))) {\n      if (((_DAT_40023800 & 0x20000) != 0) && (permissions[1] != 1)) {\n        return 1;\n      }\n    }\n    else {\n      _DAT_40023800 = (uint3)_DAT_40023800;\n      iVar1 = getDataValue();\n      while ((_DAT_40023800 & 0x20000) != 0) {\n        uVar2 = getDataValue();\n        if (iVar1 + 5000U <= uVar2) {\n          return 3;\n        }\n      }\n      _DAT_40023800 = CONCAT13(DAT_40023800_3,CONCAT12((char)permissions[1],_DAT_40023800));\n      if (permissions[1] == 1) {\n        iVar1 = getDataValue();\n        while ((_DAT_40023800 & 0x20000) == 0) {\n          uVar2 = getDataValue();\n          if (iVar1 + 5000U <= uVar2) {\n            return 3;\n          }\n        }\n      }\n      else {\n        iVar1 = getDataValue();\n        while ((_DAT_40023800 & 0x20000) != 0) {\n          uVar2 = getDataValue();\n          if (iVar1 + 5000U <= uVar2) {\n            return 3;\n          }\n        }\n      }\n    }\n  }\n  if ((*permissions & 2) != 0) {\n    if (((_DAT_40023808 & 0xc) == 0) ||\n       (((_DAT_40023808 & 0xc) == 8 && ((_DAT_40023804 & 0x400000) == 0)))) {\n      if (((_DAT_40023800 & 2) != 0) && (permissions[3] != 1)) {\n        return 1;\n      }\n    }\n    else if (permissions[3] == 0) {\n      _DAT_42470000 = 0;\n      iVar1 = getDataValue();\n      while ((_DAT_40023800 & 2) != 0) {\n        uVar2 = getDataValue();\n        if (iVar1 + 100U <= uVar2) {\n          return 3;\n        }\n      }\n    }\n    else {\n      _DAT_42470000 = 1;\n      iVar1 = getDataValue();\n      while ((_DAT_40023800 & 2) == 0) {\n        uVar2 = getDataValue();\n        if (iVar1 + 100U <= uVar2) {\n          return 3;\n        }\n      }\n      _DAT_40023800 = permissions[4] << 3 | _DAT_40023800 & 0xffffff07;\n    }\n  }\n  if ((*permissions & 8) != 0) {\n    if (permissions[5] == 0) {\n      _DAT_42470e80 = 0;\n      iVar1 = getDataValue();\n      while ((_DAT_40023874 & 2) != 0) {\n        uVar2 = getDataValue();\n        if (iVar1 + 100U <= uVar2) {\n          return 3;\n        }\n      }\n    }\n    else {\n      _DAT_42470e80 = 1;\n      iVar1 = getDataValue();\n      while ((_DAT_40023874 & 2) == 0) {\n        uVar2 = getDataValue();\n        if (iVar1 + 100U <= uVar2) {\n          return 3;\n        }\n      }\n    }\n  }\n  if ((*permissions & 4) != 0) {\n    _DAT_40023840 = _DAT_40023840 | 0x10000000;\n    _DAT_40007000 = _DAT_40007000 | 0x100;\n    iVar1 = getDataValue();\n    while ((_DAT_40007000 & 0x100) == 0) {\n      uVar2 = getDataValue();\n      if (iVar1 + 100U <= uVar2) {\n        return 3;\n      }\n    }\n    _DAT_40023870 = _DAT_40023870 & 0xffffff00;\n    iVar1 = getDataValue();\n    while ((_DAT_40023870 & 2) != 0) {\n      uVar2 = getDataValue();\n      if (iVar1 + 5000U <= uVar2) {\n        return 3;\n      }\n    }\n    _DAT_40023870 = CONCAT31(DAT_40023870_1,(char)permissions[2]);\n    if (permissions[2] == 1) {\n      iVar1 = getDataValue();\n      while ((_DAT_40023870 & 2) == 0) {\n        uVar2 = getDataValue();\n        if (iVar1 + 5000U <= uVar2) {\n          return 3;\n        }\n      }\n    }\n    else {\n      iVar1 = getDataValue();\n      while ((_DAT_40023870 & 2) != 0) {\n        uVar2 = getDataValue();\n        if (iVar1 + 5000U <= uVar2) {\n          return 3;\n        }\n      }\n    }\n  }\n  if (permissions[6] != 0) {\n    if ((_DAT_40023808 & 0xc) == 8) {\n      return 1;\n    }\n    if (permissions[6] == 2) {\n      _DAT_42470060 = 0;\n      iVar1 = getDataValue();\n      while ((_DAT_40023800 & 0x2000000) != 0) {\n        uVar2 = getDataValue();\n        if (iVar1 + 100U <= uVar2) {\n          return 3;\n        }\n      }\n      _DAT_40023804 =\n           permissions[0xb] << 0x18 |\n           permissions[8] | permissions[9] << 6 | ((permissions[10] >> 1) - 1) * 0x10000 | permissions[7] |\n           0x20000000;\n      _DAT_42470060 = 1;\n      iVar1 = getDataValue();\n      while ((_DAT_40023800 & 0x2000000) == 0) {\n        uVar2 = getDataValue();\n        if (iVar1 + 100U <= uVar2) {\n          return 3;\n        }\n      }\n    }\n    else {\n      _DAT_42470060 = 0;\n      iVar1 = getDataValue();\n      while ((_DAT_40023800 & 0x2000000) != 0) {\n        uVar2 = getDataValue();\n        if (iVar1 + 100U <= uVar2) {\n          return 3;\n        }\n      }\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08005cec": "check_permissions_08005cec",
                "param_1": "permissions",
                "get_data_value_08005a84": "getDataValue"
            },
            "calling": [
                "FUN_08007436"
            ],
            "called": [
                "FUN_08005a84"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800618c": {
            "entrypoint": "0x0800618c",
            "current_name": "check_and_update_clock_freq_0800618c",
            "code": "\n\n\nundefined4 checkAndUpdateClockFreq_0800618c(uint *inputParams,uint paramSize)\n\n{\n  int dataValue;\n  uint dataValue2;\n  uint threshold;\n  undefined8 clockFrequency;\n  \n  if ((_DAT_40023c00 & 0xf) < paramSize) {\n    _DAT_40023c00 = CONCAT31(DAT_40023c00_1,(char)paramSize);\n    if (paramSize != (paramSize & 0xf)) {\n      return 1;\n    }\n    if ((*inputParams & 1) != 0) {\n      if (inputParams[1] == 1) {\n        if ((_DAT_40023800 & 0x20000) == 0) {\n          return 1;\n        }\n      }\n      else if ((inputParams[1] != 2) && ((_DAT_40023800 & 2) == 0)) {\n        return 1;\n      }\n      _DAT_40023808 = inputParams[1] | _DAT_40023808 & 0xfffffffc;\n      dataValue = getDataValue();\n      threshold = dataValue + 5000;\n      if (inputParams[1] == 1) {\n        while ((_DAT_40023808 & 0xc) != 4) {\n          dataValue2 = getDataValue();\n          if (threshold <= dataValue2) {\n            return 3;\n          }\n        }\n      }\n      else if (inputParams[1] == 2) {\n        while ((_DAT_40023808 & 0xc) != 8) {\n          dataValue2 = getDataValue();\n          if (threshold <= dataValue2) {\n            return 3;\n          }\n        }\n      }\n      else {\n        while ((_DAT_40023808 & 0xc) != 0) {\n          dataValue2 = getDataValue();\n          if (threshold <= dataValue2) {\n            return 3;\n          }\n        }\n      }\n    }\n  }\n  else {\n    if ((*inputParams & 1) != 0) {\n      if (inputParams[1] == 1) {\n        if ((_DAT_40023800 & 0x20000) == 0) {\n          return 1;\n        }\n      }\n      else if (inputParams[1] == 2) {\n        if ((_DAT_40023800 & 0x2000000) == 0) {\n          return 1;\n        }\n      }\n      else if ((_DAT_40023800 & 2) == 0) {\n        return 1;\n      }\n      _DAT_40023808 = inputParams[1] | _DAT_40023808 & 0xfffffffc;\n      dataValue = getDataValue();\n      threshold = dataValue + 5000;\n      if (inputParams[1] == 1) {\n        while ((_DAT_40023808 & 0xc) != 4) {\n          dataValue2 = getDataValue();\n          if (threshold <= dataValue2) {\n            return 3;\n          }\n        }\n      }\n      else if (inputParams[1] == 2) {\n        while ((_DAT_40023808 & 0xc) != 8) {\n          dataValue2 = getDataValue();\n          if (threshold <= dataValue2) {\n            return 3;\n          }\n        }\n      }\n      else {\n        while ((_DAT_40023808 & 0xc) != 0) {\n          dataValue2 = getDataValue();\n          if (threshold <= dataValue2) {\n            return 3;\n          }\n        }\n      }\n    }\n    _DAT_40023c00 = CONCAT31(DAT_40023c00_1,(char)paramSize);\n    if (paramSize != (paramSize & 0xf)) {\n      return 1;\n    }\n  }\n  if ((*inputParams & 2) != 0) {\n    _DAT_40023808 = inputParams[2] | _DAT_40023808 & 0xffffff0f;\n  }\n  if ((*inputParams & 4) != 0) {\n    _DAT_40023808 = inputParams[3] | _DAT_40023808 & 0xffffe3ff;\n  }\n  if ((*inputParams & 8) != 0) {\n    _DAT_40023808 = inputParams[4] << 3 | _DAT_40023808 & 0xffff1fff;\n  }\n  clockFrequency = calculateClockFreq();\n  checkAndUpdateMemory((uint)clockFrequency / 1000,(int)((ulonglong)clockFrequency >> 0x20),(uint)clockFrequency * 0x10624dd3);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800618c": "check_and_update_clock_freq_0800618c",
                "param_1": "inputParams",
                "param_2": "paramSize",
                "iVar1": "dataValue",
                "uVar2": "dataValue2",
                "uVar3": "threshold",
                "uVar4": "clockFrequency",
                "get_data_value_08005a84": "getDataValue",
                "calculate_clock_frequency_08006628": "calculateClockFreq",
                "check_and_update_memory_08005c30": "checkAndUpdateMemory"
            },
            "calling": [
                "FUN_08007436"
            ],
            "called": [
                "FUN_08005a84",
                "FUN_08006628",
                "FUN_08005c30"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800640c": {
            "entrypoint": "0x0800640c",
            "current_name": "update_flags_and_set_parameters_0800640c",
            "code": "\n\n\nvoid update_flags_and_set_parameters_0800640c(int flag,uint param_a,uint param_b)\n\n{\n  undefined4 value_a;\n  undefined4 value_b;\n  undefined4 value_c;\n  undefined4 value_d;\n  undefined4 value_e;\n  \n  if (flag == 0) {\n    _DAT_40023830 = _DAT_40023830 | 1;\n    value_a = 0x100;\n    value_b = 2;\n    value_d = 3;\n    value_c = 0;\n    value_e = 0;\n    update_flags_08006e88(0x40020000,&value_a);\n    _DAT_40023808 = param_b | param_a | _DAT_40023808 & 0xf89fffff;\n  }\n  else {\n    _DAT_40023830 = _DAT_40023830 | 4;\n    value_a = 0x200;\n    value_b = 2;\n    value_d = 3;\n    value_c = 0;\n    value_e = 0;\n    update_flags_08006e88(0x40020800,&value_a);\n    _DAT_40023808 = param_a | param_b << 3 | _DAT_40023808 & 0x7ffffff;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800640c": "update_flags_and_set_parameters_0800640c",
                "param_1": "flag",
                "param_2": "param_a",
                "param_3": "param_b",
                "local_1c": "value_a",
                "local_18": "value_b",
                "local_14": "value_c",
                "local_10": "value_d",
                "local_c": "value_e"
            },
            "calling": [],
            "called": [
                "FUN_08006e88"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080064ec": {
            "entrypoint": "0x080064ec",
            "current_name": "calculate_clock_frequency_080064ec",
            "code": "\n\n\nuint calculateClockFrequency_080064ec(void)\n\n{\n  uint clockType;\n  uint clockFrequency;\n  \n  clockType = _DAT_40023808 & 0xc;\n  if (clockType == 8) {\n    if ((_DAT_40023804 & 0x400000) == 0) {\n      clockFrequency = ((_DAT_40023804 & 0x7fc0) >> 6) * (16000000 / (_DAT_40023804 & 0x3f));\n    }\n    else {\n      clockFrequency = ((_DAT_40023804 & 0x7fc0) >> 6) * (8000000 / (_DAT_40023804 & 0x3f));\n    }\n    return clockFrequency / ((((_DAT_40023804 & 0x30000) >> 0x10) + 1) * 2);\n  }\n  if (clockType < 9) {\n    if (clockType == 0) {\n      return 16000000;\n    }\n    if (clockType == 4) {\n      return 8000000;\n    }\n  }\n  return 16000000;\n}\n\n",
            "renaming": {
                "FUN_080064ec": "calculate_clock_frequency_080064ec",
                "local_c": "clockFrequency",
                "uVar1": "clockType"
            },
            "calling": [
                "FUN_08006628"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006628": {
            "entrypoint": "0x08006628",
            "current_name": "calculate_clock_frequency_08006628",
            "code": "\n\n\nuint calculateClockFrequency_08006628(void)\n\n{\n  uint clockFrequency;\n  \n  clockFrequency = calculate_clock_frequency_080064ec();\n  DAT_20000000 = clockFrequency >> (&DAT_0800bcac)[(_DAT_40023808 & 0xf0) >> 4];\n  return clockFrequency >> (&DAT_0800bcac)[(_DAT_40023808 & 0xf0) >> 4];\n}\n\n",
            "renaming": {
                "FUN_08006628": "calculate_clock_frequency_08006628",
                "uVar1": "clockFrequency"
            },
            "calling": [
                "FUN_0800618c",
                "FUN_08006680",
                "FUN_080066cc"
            ],
            "called": [
                "FUN_080064ec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006680": {
            "entrypoint": "0x08006680",
            "current_name": "calculate_clock_frequency_08006680",
            "code": "\n\n\nuint calculateClockFrequency_08006680(void)\n\n{\n  uint clockFrequency;\n  \n  clockFrequency = calculate_clock_frequency_08006628();\n  return clockFrequency >> (&DAT_0800bcac)[(_DAT_40023808 & 0x1c00) >> 10];\n}\n\n",
            "renaming": {
                "FUN_08006680": "calculate_clock_frequency_08006680",
                "uVar1": "clockFrequency"
            },
            "calling": [
                "FUN_08007f54"
            ],
            "called": [
                "FUN_08006628"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080066cc": {
            "entrypoint": "0x080066cc",
            "current_name": "calculate_adjusted_clock_frequency_080066cc",
            "code": "\n\n\nuint calculateAdjustedClockFrequency_080066cc(void)\n\n{\n  uint clockFrequency;\n  \n  clockFrequency = calculate_clock_frequency_08006628();\n  return clockFrequency >> (&DAT_0800bcac)[(_DAT_40023808 & 0xe000) >> 0xd];\n}\n\n",
            "renaming": {
                "FUN_080066cc": "calculate_adjusted_clock_frequency_080066cc",
                "uVar1": "clockFrequency"
            },
            "calling": [
                "FUN_08007f54"
            ],
            "called": [
                "FUN_08006628"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006950": {
            "entrypoint": "0x08006950",
            "current_name": "set_bit_pattern_08006950",
            "code": "\n\n\nvoid setBitPattern_08006950(uint input)\n\n{\n  _DAT_e000ed0c = _DAT_e000ed0c & 0xf8ff | (input & 7) << 8 | 0x5fa0000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006950": "set_bit_pattern_08006950",
                "param_1": "input"
            },
            "calling": [
                "FUN_08006ce0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006998": {
            "entrypoint": "0x08006998",
            "current_name": "get_bit_value_08006998",
            "code": "\n\n\nuint get_bit_value_08006998(void)\n\n{\n  return _DAT_e000ed0c >> 8 & 7;\n}\n\n",
            "renaming": {
                "FUN_08006998": "get_bit_value_08006998"
            },
            "calling": [
                "FUN_08006d8a",
                "FUN_08006cf6"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080069b4": {
            "entrypoint": "0x080069b4",
            "current_name": "set_bit_in_memory_080069b4",
            "code": "\nvoid setBitInMemory_080069b4(byte inputByte)\n\n{\n  *(signedInt *)(((unsignedInt)(signedInt)(byte)inputByte >> 5) * 4 + -0x1fff1f00) = 1 << (inputByte and 0x1f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080069b4": "set_bit_in_memory_080069b4",
                "param_1": "inputByte",
                "uint": "unsignedInt",
                "int": "signedInt",
                "char": "byte",
                "&": "and"
            },
            "calling": [
                "FUN_08006d2e"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080069e4": {
            "entrypoint": "0x080069e4",
            "current_name": "set_bit_in_memory_080069e4",
            "code": "\nvoid setBitInMemory_080069e4(byte inputByte)\n\n{\n  *(int *)((((uint)(int)(char)inputByte >> 5) + 0x20) * 4 + -0x1fff1f00) = 1 << (inputByte & 0x1f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080069e4": "set_bit_in_memory_080069e4",
                "param_1": "inputByte"
            },
            "calling": [
                "FUN_08006d4a"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006a18": {
            "entrypoint": "0x08006a18",
            "current_name": "check_bit_08006a18",
            "code": "\nbool checkBit_08006a18(byte byteValue)\n\n{\n  return (*(uint *)((((uint)(int)(char)byteValue >> 5) + 0x40) * 4 + -0x1fff1f00) &\n         1 << (byteValue & 0x1f)) != 0;\n}\n\n",
            "renaming": {
                "FUN_08006a18": "check_bit_08006a18",
                "param_1": "byteValue"
            },
            "calling": [
                "FUN_08006de0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006a58": {
            "entrypoint": "0x08006a58",
            "current_name": "set_bit_in_memory_08006a58",
            "code": "\nvoid setBitInMemory_08006a58(byte inputByte)\n\n{\n  *(int *)((((uint)(int)(char)inputByte >> 5) + 0x40) * 4 + -0x1fff1f00) = 1 << (inputByte & 0x1f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006a58": "set_bit_in_memory_08006a58",
                "param_1": "inputByte"
            },
            "calling": [
                "FUN_08006dc4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006a8c": {
            "entrypoint": "0x08006a8c",
            "current_name": "set_bit_08006a8c",
            "code": "\nvoid setBit_08006a8c(byte byteData)\n\n{\n  *(int *)((((uint)(int)(char)byteData >> 5) + 0x60) * 4 + -0x1fff1f00) = 1 << (byteData & 0x1f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006a8c": "set_bit_08006a8c",
                "param_1": "byteData"
            },
            "calling": [
                "FUN_08006dfe"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006ac0": {
            "entrypoint": "0x08006ac0",
            "current_name": "check_bit_08006ac0",
            "code": "\nbool checkBit_08006ac0(byte byteValue)\n\n{\n  return (*(uint *)((((uint)(int)(char)byteValue >> 5) + 0x80) * 4 + -0x1fff1f00) &\n         1 << (byteValue & 0x1f)) != 0;\n}\n\n",
            "renaming": {
                "FUN_08006ac0": "check_bit_08006ac0",
                "param_1": "byteValue"
            },
            "calling": [
                "FUN_08006e1a"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006b00": {
            "entrypoint": "0x08006b00",
            "current_name": "update_memory_08006b00",
            "code": "\nvoid updateMemory_08006b00(byte inputByte,uint valueToStore)\n\n{\n  if ((char)inputByte < '\\0') {\n    *(char *)((inputByte & 0xf) + 0xe000ed14) = (char)((valueToStore & 0xff) << 4);\n  }\n  else {\n    *(char *)((char)inputByte + -0x1fff1c00) = (char)((valueToStore & 0xff) << 4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006b00": "update_memory_08006b00",
                "param_1": "inputByte",
                "param_2": "valueToStore"
            },
            "calling": [
                "FUN_08006c9c",
                "FUN_08006cf6"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006b54": {
            "entrypoint": "0x08006b54",
            "current_name": "extracted_byte_08006b54",
            "code": "\nbyte extractedByte_08006b54(byte inputByte)\n\n{\n  byte outputByte;\n  \n  if ((char)inputByte < '\\0') {\n    outputByte = *(byte *)((inputByte & 0xf) + 0xe000ed14);\n  }\n  else {\n    outputByte = *(byte *)((char)inputByte + -0x1fff1c00);\n  }\n  return outputByte >> 4;\n}\n\n",
            "renaming": {
                "FUN_08006b54": "extracted_byte_08006b54",
                "param_1": "inputByte",
                "bVar1": "outputByte"
            },
            "calling": [
                "FUN_08006d98"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006ba0": {
            "entrypoint": "0x08006ba0",
            "current_name": "bitwise_combination_08006ba0",
            "code": "\nuint bitwiseCombination_08006ba0(uint inputValue,uint bitPattern,uint outputValue)\n\n{\n  uint shiftAmount;\n  \n  inputValue = inputValue & 7;\n  shiftAmount = 7 - inputValue;\n  if (3 < shiftAmount) {\n    shiftAmount = 4;\n  }\n  if (inputValue + 4 < 7) {\n    inputValue = 0;\n  }\n  else {\n    inputValue = inputValue - 3;\n  }\n  return outputValue & (1 << (inputValue & 0xff)) - 1U |\n         ((1 << (shiftAmount & 0xff)) - 1U & bitPattern) << (inputValue & 0xff);\n}\n\n",
            "renaming": {
                "FUN_08006ba0": "bitwise_combination_08006ba0",
                "param_1": "inputValue",
                "param_2": "bitPattern",
                "param_3": "outputValue",
                "uVar1": "shiftAmount"
            },
            "calling": [
                "FUN_08006cf6"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006c04": {
            "entrypoint": "0x08006c04",
            "current_name": "extract_bits_08006c04",
            "code": "\nvoid extractBits_08006c04(uint input,uint bitPosition,uint *output1,uint *output2)\n\n{\n  uint shiftAmount;\n  \n  bitPosition = bitPosition & 7;\n  shiftAmount = 7 - bitPosition;\n  if (3 < shiftAmount) {\n    shiftAmount = 4;\n  }\n  if (bitPosition + 4 < 7) {\n    bitPosition = 0;\n  }\n  else {\n    bitPosition = bitPosition - 3;\n  }\n  *output1 = (1 << (shiftAmount & 0xff)) - 1U & input >> (bitPosition & 0xff);\n  *output2 = (1 << (bitPosition & 0xff)) - 1U & input;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006c04": "extract_bits_08006c04",
                "param_1": "input",
                "param_2": "bitPosition",
                "param_3": "output1",
                "param_4": "output2",
                "uVar1": "shiftAmount"
            },
            "calling": [
                "FUN_08006d98"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006c70": {
            "entrypoint": "0x08006c70",
            "current_name": "infinite_loop_08006c70",
            "code": "\nvoid infiniteLoop_08006c70(void)\n\n{\n  syncBarrier(0xf);\n  syncBarrier(0xf);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08006c70": "infinite_loop_08006c70",
                "DataSynchronizationBarrier": "syncBarrier"
            },
            "calling": [
                "FUN_08006d66"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006c9c": {
            "entrypoint": "0x08006c9c",
            "current_name": "check_and_update_memory_08006c9c",
            "code": "\n\n\nbool checkAndUpdateMemory_08006c9c(int inputValue)\n\n{\n  bool isInputValid;\n  \n  isInputValid = inputValue - 1U < 0x1000000;\n  if (isInputValid) {\n    _DAT_e000e014 = inputValue + -1;\n    update_memory_08006b00(0xffffffff,0xf);\n    _DAT_e000e018 = 0;\n    _DAT_e000e010 = 7;\n  }\n  return !isInputValid;\n}\n\n",
            "renaming": {
                "FUN_08006c9c": "check_and_update_memory_08006c9c",
                "param_1": "inputValue",
                "bVar1": "isInputValid"
            },
            "calling": [
                "FUN_08006d72"
            ],
            "called": [
                "FUN_08006b00"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006ce0": {
            "entrypoint": "0x08006ce0",
            "current_name": "set_bit_pattern_08006ce0",
            "code": "\nvoid setBitPattern_08006ce0(undefined4 input)\n\n{\n  setBitPattern_08006ce0Helper(input);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006ce0": "set_bit_pattern_08006ce0",
                "param_1": "input",
                "set_bit_pattern_08006950": "setBitPatternHelper"
            },
            "calling": [
                "FUN_080059b4"
            ],
            "called": [
                "FUN_08006950"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006cf6": {
            "entrypoint": "0x08006cf6",
            "current_name": "update_memory_with_bitwise_combination_08006cf6",
            "code": "\nvoid updateMemoryWithBitwiseCombination_08006cf6(char inputChar,undefined4 value1,undefined4 value2)\n\n{\n  undefined4 bitValue;\n  \n  bitValue = getBitValue();\n  bitValue = combineBitwise(bitValue,value1,value2);\n  updateMemory((int)inputChar,bitValue);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006cf6": "update_memory_with_bitwise_combination_08006cf6",
                "param_1": "inputChar",
                "param_2": "value1",
                "param_3": "value2",
                "uVar1": "bitValue",
                "get_bit_value_08006998": "getBitValue",
                "bitwise_combination_08006ba0": "combineBitwise",
                "update_memory_08006b00": "updateMemory"
            },
            "calling": [
                "FUN_08007a70"
            ],
            "called": [
                "FUN_08006998",
                "FUN_08006b00",
                "FUN_08006ba0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006d2e": {
            "entrypoint": "0x08006d2e",
            "current_name": "set_bit_in_memory_08006d2e",
            "code": "\nvoid setBitInMemory_08006d2e(char character)\n\n{\n  setBitInMemory_08006d2e((int)character);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006d2e": "set_bit_in_memory_08006d2e",
                "param_1": "character",
                "set_bit_in_memory_080069b4": "setBitInMemory"
            },
            "calling": [],
            "called": [
                "FUN_080069b4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006d4a": {
            "entrypoint": "0x08006d4a",
            "current_name": "set_bit_in_memory_08006d4a",
            "code": "\nvoid set_bit_in_memory_08006d4a(char bit_position)\n\n{\n  set_bit_in_memory_08006d4a_080069e4((int)bit_position);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006d4a": "set_bit_in_memory_08006d4a",
                "param_1": "bit_position"
            },
            "calling": [],
            "called": [
                "FUN_080069e4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006d66": {
            "entrypoint": "0x08006d66",
            "current_name": "execute_infinite_loop_08006d66",
            "code": "\nvoid execute_infinite_loop_08006d66(void)\n\n{\n  infinite_loop_08006c70();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006d66": "execute_infinite_loop_08006d66"
            },
            "calling": [],
            "called": [
                "FUN_08006c70"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006d72": {
            "entrypoint": "0x08006d72",
            "current_name": "update_memory_08006d72",
            "code": "\nundefined4 updateMemory_08006d72(undefined4 input)\n\n{\n  undefined4 result;\n  \n  result = check_and_update_memory_08006c9c(input);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08006d72": "update_memory_08006d72",
                "param_1": "input",
                "uVar1": "result"
            },
            "calling": [
                "FUN_080059b4"
            ],
            "called": [
                "FUN_08006c9c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006d8a": {
            "entrypoint": "0x08006d8a",
            "current_name": "get_bit_value_08006d8a",
            "code": "\nundefined4 get_bit_value_08006d8a(void)\n\n{\n  undefined4 bit_value;\n  \n  bit_value = get_bit_value_08006d8a_08006998();\n  return bit_value;\n}\n\n",
            "renaming": {
                "FUN_08006d8a": "get_bit_value_08006d8a",
                "uVar1": "bit_value"
            },
            "calling": [],
            "called": [
                "FUN_08006998"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006d98": {
            "entrypoint": "0x08006d98",
            "current_name": "extract_and_extract_bits_08006d98",
            "code": "\nvoid extractAndExtractBits_08006d98(char inputByte,undefined4 outputParam1,undefined4 outputParam2,undefined4 outputParam3)\n\n{\n  undefined4 extractedByte;\n  \n  extractedByte = extracted_byte_08006b54((int)inputByte);\n  extract_bits_08006c04(extractedByte,outputParam1,outputParam2,outputParam3);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006d98": "extract_and_extract_bits_08006d98",
                "param_1": "inputByte",
                "param_2": "outputParam1",
                "param_3": "outputParam2",
                "param_4": "outputParam3",
                "uVar1": "extractedByte"
            },
            "calling": [],
            "called": [
                "FUN_08006c04",
                "FUN_08006b54"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006dc4": {
            "entrypoint": "0x08006dc4",
            "current_name": "set_bit_in_memory_08006dc4",
            "code": "\nvoid setBitInMemory_08006dc4(char byteToSet)\n\n{\n  set_bit_in_memory_08006a58((int)byteToSet);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006dc4": "set_bit_in_memory_08006dc4",
                "param_1": "byteToSet"
            },
            "calling": [],
            "called": [
                "FUN_08006a58"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006de0": {
            "entrypoint": "0x08006de0",
            "current_name": "check_bit_08006de0",
            "code": "\nundefined4 check_bit_08006de0(char input_value)\n\n{\n  undefined4 bit_result;\n  \n  bit_result = check_bit_08006de0_08006a18((int)input_value);\n  return bit_result;\n}\n\n",
            "renaming": {
                "FUN_08006de0": "check_bit_08006de0",
                "param_1": "input_value",
                "uVar1": "bit_result"
            },
            "calling": [],
            "called": [
                "FUN_08006a18"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006dfe": {
            "entrypoint": "0x08006dfe",
            "current_name": "set_parameter_bit_08006dfe",
            "code": "\nvoid set_parameter_bit_08006dfe(char parameter)\n\n{\n  set_bit((int)parameter);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006dfe": "set_parameter_bit_08006dfe",
                "param_1": "parameter",
                "set_bit_08006a8c": "set_bit"
            },
            "calling": [],
            "called": [
                "FUN_08006a8c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006e1a": {
            "entrypoint": "0x08006e1a",
            "current_name": "check_bit_value_08006e1a",
            "code": "\nundefined4 check_bit_value_08006e1a(char character)\n\n{\n  undefined4 bit_check_result;\n  \n  bit_check_result = check_bit_08006ac0((int)character);\n  return bit_check_result;\n}\n\n",
            "renaming": {
                "FUN_08006e1a": "check_bit_value_08006e1a",
                "param_1": "character",
                "uVar1": "bit_check_result"
            },
            "calling": [],
            "called": [
                "FUN_08006ac0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006e88": {
            "entrypoint": "0x08006e88",
            "current_name": "update_flags_08006e88",
            "code": "\n\n\nvoid updateFlags_08006e88(uint *outputValues,uint *inputValues)\n\n{\n  uint bitValue;\n  uint result;\n  int index;\n  uint loopCounter;\n  \n  for (loopCounter = 0; loopCounter < 0x10; loopCounter = loopCounter + 1) {\n    bitValue = 1 << (loopCounter & 0xff);\n    result = *inputValues & bitValue;\n    if (result == bitValue) {\n      if ((inputValues[1] == 2) || (inputValues[1] == 0x12)) {\n        bitValue = inputValues[4];\n        outputValues[(loopCounter >> 3) + 8] = outputValues[(loopCounter >> 3) + 8] & ~(0xf << ((loopCounter & 7) << 2));\n        outputValues[(loopCounter >> 3) + 8] = outputValues[(loopCounter >> 3) + 8] | bitValue << ((loopCounter & 7) << 2);\n      }\n      *outputValues = *outputValues & ~(3 << ((loopCounter & 0x7f) << 1));\n      *outputValues = *outputValues | (inputValues[1] & 3) << ((loopCounter & 0x7f) << 1);\n      if ((((inputValues[1] == 1) || (inputValues[1] == 2)) || (inputValues[1] == 0x11)) || (inputValues[1] == 0x12)\n         ) {\n        outputValues[2] = outputValues[2] & ~(3 << ((loopCounter & 0x7f) << 1));\n        outputValues[2] = outputValues[2] | inputValues[3] << ((loopCounter & 0x7f) << 1);\n        outputValues[1] = outputValues[1] & ~(1 << (loopCounter & 0xff));\n        outputValues[1] = outputValues[1] | (inputValues[1] >> 4 & 1) << (loopCounter & 0xff);\n      }\n      outputValues[3] = outputValues[3] & ~(3 << ((loopCounter & 0x7f) << 1));\n      outputValues[3] = outputValues[3] | inputValues[2] << ((loopCounter & 0x7f) << 1);\n      if ((inputValues[1] & 0x10000000) != 0) {\n        _DAT_40023844 = _DAT_40023844 | 0x4000;\n        *(uint *)(((loopCounter >> 2) + 2) * 4 + 0x40013800) =\n             ~(0xf << ((loopCounter & 3) << 2)) & *(uint *)(((loopCounter >> 2) + 2) * 4 + 0x40013800);\n        if (outputValues == (uint *)0x40020000) {\n          index = 0;\n        }\n        else if (outputValues == (uint *)0x40020400) {\n          index = 1;\n        }\n        else if (outputValues == (uint *)0x40020800) {\n          index = 2;\n        }\n        else if (outputValues == (uint *)0x40020c00) {\n          index = 3;\n        }\n        else if (outputValues == (uint *)0x40021000) {\n          index = 4;\n        }\n        else if (outputValues == (uint *)0x40021400) {\n          index = 5;\n        }\n        else if (outputValues == (uint *)0x40021800) {\n          index = 6;\n        }\n        else if (outputValues == (uint *)0x40021c00) {\n          index = 7;\n        }\n        else if (outputValues == (uint *)0x40022000) {\n          index = 8;\n        }\n        else if (outputValues == (uint *)0x40022400) {\n          index = 9;\n        }\n        else {\n          index = 10;\n        }\n        *(uint *)(((loopCounter >> 2) + 2) * 4 + 0x40013800) =\n             index << ((loopCounter & 3) << 2) | *(uint *)(((loopCounter >> 2) + 2) * 4 + 0x40013800);\n        _DAT_40013c00 = ~result & _DAT_40013c00;\n        _DAT_40013c04 = ~result & _DAT_40013c04;\n        if ((inputValues[1] & 0x10000) != 0) {\n          _DAT_40013c00 = result | _DAT_40013c00;\n        }\n        if ((inputValues[1] & 0x20000) != 0) {\n          _DAT_40013c04 = result | _DAT_40013c04;\n        }\n        _DAT_40013c08 = ~result & _DAT_40013c08;\n        _DAT_40013c0c = ~result & _DAT_40013c0c;\n        if ((inputValues[1] & 0x100000) != 0) {\n          _DAT_40013c08 = result | _DAT_40013c08;\n        }\n        if ((inputValues[1] & 0x200000) != 0) {\n          _DAT_40013c0c = result | _DAT_40013c0c;\n        }\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006e88": "update_flags_08006e88",
                "param_1": "outputValues",
                "param_2": "inputValues",
                "uVar1": "bitValue",
                "uVar2": "result",
                "iVar3": "index",
                "local_c": "loopCounter"
            },
            "calling": [
                "FUN_0800640c",
                "FUN_0800778c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800733e": {
            "entrypoint": "0x0800733e",
            "current_name": "update_parameter_0800733e",
            "code": "\nvoid updateParameter_0800733e(int baseAddress,undefined2 value,char isSecondParameter)\n\n{\n  if (isSecondParameter == '\\0') {\n    *(undefined2 *)(baseAddress + 0x1a) = value;\n  }\n  else {\n    *(undefined2 *)(baseAddress + 0x18) = value;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800733e": "update_parameter_0800733e",
                "param_1": "baseAddress",
                "param_2": "value",
                "param_3": "isSecondParameter"
            },
            "calling": [
                "FUN_0800778c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800738e": {
            "entrypoint": "0x0800738e",
            "current_name": "update_and_call_function_0800738e",
            "code": "\n\n\nvoid updateAndCallFunction_0800738e(ushort input)\n\n{\n  if ((input & _DAT_40013c14) != 0) {\n    _DAT_40013c14 = (uint)input;\n    FUNC_080073c0(input);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800738e": "update_and_call_function_0800738e",
                "param_1": "input"
            },
            "calling": [],
            "called": [
                "FUN_080073c0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080073c0": {
            "entrypoint": "0x080073c0",
            "current_name": "FUNC_080073c0",
            "code": "\nvoid FUNC_080073c0(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080073c0": "FUNC_080073c0"
            },
            "calling": [
                "FUN_0800738e"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080073d4": {
            "entrypoint": "0x080073d4",
            "current_name": "set_bit_in_memory_080073d4",
            "code": "\nvoid setBitInMemory_080073d4(uint input)\n\n{\n  *(short *)(((int)input >> 4) * 0x400 + 0x4002001a) = (short)(1 << (input & 0xf));\n  return;\n}\n\n",
            "renaming": {
                "FUN_080073d4": "set_bit_in_memory_080073d4",
                "param_1": "input"
            },
            "calling": [
                "FUN_08007520"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007402": {
            "entrypoint": "0x08007402",
            "current_name": "write_bit_08007402",
            "code": "\nvoid writeBit_08007402(uint input)\n\n{\n  *(short *)(((int)input >> 4) * 0x400 + 0x40020018) = (short)(1 << (input & 0xf));\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007402": "write_bit_08007402",
                "param_1": "input"
            },
            "calling": [
                "FUN_080074c8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007430": {
            "entrypoint": "0x08007430",
            "current_name": "infinite_loop_08007430",
            "code": "\nvoid infiniteLoop_08007430(void)\n\n{\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08007430": "infinite_loop_08007430"
            },
            "calling": [
                "FUN_08007436"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007436": {
            "entrypoint": "0x08007436",
            "current_name": "initialize_system_08007436",
            "code": "\n\n\nvoid initializeSystem_08007436(void)\n\n{\n  int returnValue;\n  undefined4 permissionFlag;\n  undefined4 permissionFlag2;\n  undefined4 value1;\n  undefined4 value2;\n  undefined4 value3;\n  undefined4 value4;\n  undefined4 value5;\n  undefined4 value6;\n  undefined4 clockFreq;\n  undefined4 clockFreqFlag;\n  undefined4 loopCounter;\n  undefined4 loopLimit;\n  undefined4 loopStep;\n  \n  _DAT_40023840 = _DAT_40023840 | 0x10000000;\n  _DAT_40007000 = _DAT_40007000 | 0xc000;\n  permissionFlag = 1;\n  permissionFlag2 = 1;\n  value1 = 2;\n  value2 = 0x400000;\n  value3 = 8;\n  value4 = 0x150;\n  value5 = 2;\n  value6 = 7;\n  returnValue = check_permissions_08005cec(&permissionFlag);\n  if (returnValue != 0) {\n    infinite_loop_08007430();\n  }\n  clockFreq = 0xf;\n  clockFreqFlag = 2;\n  loopCounter = 0;\n  loopLimit = 0x1400;\n  loopStep = 0x1000;\n  returnValue = check_and_update_clock_freq_0800618c(&clockFreq,5);\n  if (returnValue != 0) {\n    infinite_loop_08007430();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007436": "initialize_system_08007436",
                "local_4c": "permissionFlag",
                "local_48": "permissionFlag2",
                "local_34": "value1",
                "local_30": "value2",
                "local_2c": "value3",
                "local_28": "value4",
                "local_24": "value5",
                "local_20": "value6",
                "local_1c": "clockFreq",
                "local_18": "clockFreqFlag",
                "local_14": "loopCounter",
                "local_10": "loopLimit",
                "local_c": "loopStep",
                "iVar1": "returnValue"
            },
            "calling": [
                "FUN_08007540"
            ],
            "called": [
                "FUN_0800618c",
                "FUN_08007430",
                "FUN_08005cec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080074c8": {
            "entrypoint": "0x080074c8",
            "current_name": "process_flags_080074c8",
            "code": "\nvoid processFlags_080074c8(uint flags)\n\n{\n  if ((flags & 1) != 0) {\n    writeBit(0x3e);\n  }\n  if ((DAT_20000e4c != 0) && ((flags & 0x1e) != 0)) {\n    initializeAndCheckFlags();\n  }\n  if ((DAT_20000e50 != 0) && ((flags & 0x80) != 0)) {\n    checkFlags(flags);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080074c8": "process_flags_080074c8",
                "param_1": "flags",
                "write_bit_08007402": "writeBit",
                "initialize_and_check_flags_0800195c": "initializeAndCheckFlags",
                "check_flags_08003a18": "checkFlags"
            },
            "calling": [
                "FUN_08007930"
            ],
            "called": [
                "FUN_08003a18",
                "FUN_08007402",
                "FUN_0800195c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007520": {
            "entrypoint": "0x08007520",
            "current_name": "set_bit_if_odd_08007520",
            "code": "\nvoid setBitIfOdd_08007520(uint inputValue)\n\n{\n  if ((inputValue & 1) != 0) {\n    set_bit_in_memory_080073d4(0x3e);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007520": "set_bit_if_odd_08007520",
                "param_1": "inputValue"
            },
            "calling": [
                "FUN_08007930"
            ],
            "called": [
                "FUN_080073d4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007540": {
            "entrypoint": "0x08007540",
            "current_name": "initialize_system_08007540",
            "code": "\nundefined4 initialize_system_08007540(void)\n\n{\n  initialize_system_08007540_1();\n  initialize_system_08007540_2();\n  update_registers();\n  initialize_system_08007540_3();\n  initialize_memory_1();\n  initialize_memory_2();\n  execute_interrupt(0);\n  main_loop();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08007540": "initialize_system_08007540",
                "initialize_system_080059b4": "initialize_system_1",
                "initialize_system_08007436": "initialize_system_2",
                "update_registers_0800778c": "update_registers",
                "initialize_system_08007e08": "initialize_system_3",
                "initialize_memory_080079c0": "initialize_memory_1",
                "initialize_memory_08008190": "initialize_memory_2",
                "execute_or_return_interrupt_08005984": "execute_interrupt",
                "main_loop_08001ddc": "main_loop"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_08005984",
                "FUN_08007436",
                "FUN_08007e08",
                "FUN_080079c0",
                "FUN_080059b4",
                "FUN_08001ddc",
                "FUN_0800778c",
                "FUN_08008190"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800756c": {
            "entrypoint": "0x0800756c",
            "current_name": "initialize_memory_0800756c",
            "code": "\n\n\nvoid initializeMemory_0800756c(void)\n\n{\n  _DAT_40023808 = 0;\n  _DAT_40023804 = 0x24003010;\n  _DAT_40023800 = _DAT_40023800 & 0xfef2ffff | 1;\n  _DAT_4002380c = 0;\n  _DAT_e000ed08 = 0x8000000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800756c": "initialize_memory_0800756c"
            },
            "calling": [
                "entry"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080076c8": {
            "entrypoint": "0x080076c8",
            "current_name": "update_bit_080076c8",
            "code": "\nvoid updateBit_080076c8(uint bits)\n\n{\n  *(uint *)(((int)bits >> 4) * 0x400 + 0x40020014) =\n       *(uint *)(((int)bits >> 4) * 0x400 + 0x40020014) ^ 1 << (bits & 0xf);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080076c8": "update_bit_080076c8",
                "param_1": "bits"
            },
            "calling": [
                "FUN_08007756"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007756": {
            "entrypoint": "0x08007756",
            "current_name": "process_data_08007756",
            "code": "\nvoid processData_08007756(void)\n\n{\n  uint dataValue;\n  \n  dataValue = getDataValue();\n  if ((dataValue & 0x1ff) == 0) {\n    updateBit(0x3c);\n  }\n  if ((dataValue & 0xf) == 0) {\n    processInput();\n  }\n  incrementCounter();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007756": "process_data_08007756",
                "uVar1": "dataValue",
                "get_data_value_08005a84": "getDataValue",
                "update_bit_080076c8": "updateBit",
                "process_input_08007930": "processInput",
                "increment_counter_08005a68": "incrementCounter"
            },
            "calling": [],
            "called": [
                "FUN_08005a84",
                "FUN_08005a68",
                "FUN_08007930",
                "FUN_080076c8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800778c": {
            "entrypoint": "0x0800778c",
            "current_name": "update_registers_0800778c",
            "code": "\n\n\nvoid update_registers_0800778c(void)\n\n{\n  int index;\n  int bit_shift_value;\n  undefined4 value_1;\n  undefined4 value_2;\n  undefined4 value_3;\n  undefined4 value_4;\n  uint *data_ptr;\n  uint loop_counter;\n  \n  for (loop_counter = 0; loop_counter < 0x11; loop_counter = loop_counter + 1) {\n    index = loop_counter * 0x18;\n    data_ptr = (uint *)(&DAT_0800bcbc + index);\n    _DAT_40023830 = _DAT_40023830 | 1 << (*data_ptr >> 4 & 0xff);\n    bit_shift_value = 1 << (*data_ptr & 0xf);\n    value_1 = *(undefined4 *)(&DAT_0800bcc0 + index);\n    value_2 = *(undefined4 *)(&DAT_0800bcc4 + index);\n    value_3 = *(undefined4 *)(&DAT_0800bcc8 + index);\n    value_4 = *(undefined4 *)(&DAT_0800bccc + index);\n    update_flags_08006e88(((*data_ptr >> 4) + 0x100080) * 0x400,&bit_shift_value);\n    if (-1 < (int)data_ptr[5]) {\n      update_parameter_0800733e(((*data_ptr >> 4) + 0x100080) * 0x400,1 << (*data_ptr & 0xf) & 0xffff,\n                   data_ptr[5] & 0xff);\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800778c": "update_registers_0800778c",
                "local_24": "bit_shift_value",
                "local_20": "value_1",
                "local_1c": "value_2",
                "local_18": "value_3",
                "local_14": "value_4",
                "local_10": "data_ptr",
                "local_c": "loop_counter",
                "iVar1": "index"
            },
            "calling": [
                "FUN_08007540"
            ],
            "called": [
                "FUN_0800733e",
                "FUN_08006e88"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007854": {
            "entrypoint": "0x08007854",
            "current_name": "check_bit_08007854",
            "code": "\nuint checkBit_08007854(uint input)\n\n{\n  return *(uint *)(((int)input >> 4) * 0x400 + 0x40020010) >> (input & 0xf) & 1;\n}\n\n",
            "renaming": {
                "FUN_08007854": "check_bit_08007854",
                "param_1": "input"
            },
            "calling": [
                "FUN_08007884"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007884": {
            "entrypoint": "0x08007884",
            "current_name": "combine_bits_08007884",
            "code": "\nuint combineBits_08007884(void)\n\n{\n  int bit0;\n  int bit1;\n  int bit2;\n  int bit3;\n  int bit4;\n  uint bit5;\n  \n  bit0 = check_bit_08007854(0x36);\n  bit1 = check_bit_08007854(0x37);\n  bit2 = check_bit_08007854(0x38);\n  bit3 = check_bit_08007854(0x39);\n  bit4 = check_bit_08007854(0xf);\n  bit5 = check_bit_08007854(0);\n  return bit5 | bit0 << 4 | bit1 << 3 | bit2 << 2 | bit3 << 1 | bit4 << 7;\n}\n\n",
            "renaming": {
                "FUN_08007884": "combine_bits_08007884",
                "iVar1": "bit0",
                "iVar2": "bit1",
                "iVar3": "bit2",
                "iVar4": "bit3",
                "iVar5": "bit4",
                "uVar6": "bit5"
            },
            "calling": [
                "FUN_08007930"
            ],
            "called": [
                "FUN_08007854"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080078f4": {
            "entrypoint": "0x080078f4",
            "current_name": "calculate_sum_080078f4",
            "code": "\nuint calculateSum_080078f4(void)\n\n{\n  int index;\n  uint sum;\n  \n  sum = 0;\n  for (index = 0; index < 4; index = index + 1) {\n    sum = *(uint *)(&DAT_20000e54 + index * 4) | sum;\n  }\n  return sum;\n}\n\n",
            "renaming": {
                "FUN_080078f4": "calculate_sum_080078f4",
                "local_10": "index",
                "local_c": "sum"
            },
            "calling": [
                "FUN_08001994",
                "FUN_08007930"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007930": {
            "entrypoint": "0x08007930",
            "current_name": "process_input_08007930",
            "code": "\nvoid processInput_08007930(void)\n\n{\n  int index;\n  uint previousValue;\n  undefined4 combinedBits;\n  uint sum;\n  uint bitDifference;\n  \n  index = DAT_20000e68;\n  previousValue = DAT_20000e64;\n  if (DAT_20000e6c != 0) {\n    combinedBits = combine_bits_08007884();\n    *(undefined4 *)(&DAT_20000e54 + index * 4) = combinedBits;\n    if (DAT_20000e68 == 3) {\n      DAT_20000e68 = 0;\n    }\n    else {\n      DAT_20000e68 = DAT_20000e68 + 1;\n    }\n    sum = calculate_sum_080078f4();\n    previousValue = DAT_20000e64;\n    if (sum != DAT_20000e64) {\n      bitDifference = ~sum & DAT_20000e64;\n      if ((~DAT_20000e64 & sum) != 0) {\n        process_flags_080074c8(~DAT_20000e64 & sum);\n      }\n      previousValue = sum;\n      if (bitDifference != 0) {\n        set_bit_if_odd_08007520(bitDifference);\n      }\n    }\n  }\n  DAT_20000e64 = previousValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007930": "process_input_08007930",
                "iVar1": "index",
                "uVar2": "previousValue",
                "uVar3": "combinedBits",
                "uVar4": "sum",
                "uVar5": "bitDifference"
            },
            "calling": [
                "FUN_08007756"
            ],
            "called": [
                "FUN_080078f4",
                "FUN_08007520",
                "FUN_080074c8",
                "FUN_08007884"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080079c0": {
            "entrypoint": "0x080079c0",
            "current_name": "initialize_memory_080079c0",
            "code": "\nvoid initializeMemory_080079c0(void)\n\n{\n  fill_memory_with_byte_0800b430(&DAT_20000e54,0,0x18);\n  DAT_20000e6c = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080079c0": "initialize_memory_080079c0"
            },
            "calling": [
                "FUN_08007540"
            ],
            "called": [
                "FUN_0800b430"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080079e0": {
            "entrypoint": "0x080079e0",
            "current_name": "set_bit_080079e0",
            "code": "\nvoid setBit_080079e0(byte byteValue)\n\n{\n  *(int *)(((uint)(int)(char)byteValue >> 5) * 4 + -0x1fff1f00) = 1 << (byteValue & 0x1f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080079e0": "set_bit_080079e0",
                "param_1": "byteValue"
            },
            "calling": [
                "FUN_08007a70"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007a10": {
            "entrypoint": "0x08007a10",
            "current_name": "update_flags_08007a10",
            "code": "\n\n\nvoid updateFlags_08007a10(undefined *pointer)\n\n{\n  if (pointer == (undefined *)0x40000000) {\n    _DAT_40023840 = _DAT_40023840 | 1;\n  }\n  else if (pointer == (undefined *)0x40000400) {\n    _DAT_40023840 = _DAT_40023840 | 2;\n  }\n  else if (pointer == &DAT_40000800) {\n    _DAT_40023840 = _DAT_40023840 | 4;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007a10": "update_flags_08007a10",
                "param_1": "pointer"
            },
            "calling": [
                "FUN_08007d08",
                "FUN_08007ad0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007a70": {
            "entrypoint": "0x08007a70",
            "current_name": "update_memory_with_combination_08007a70",
            "code": "\nvoid update_memory_with_combination_08007a70(undefined *input_pointer,undefined4 value_1,undefined4 value_2)\n\n{\n  undefined updated_value;\n  \n  if (input_pointer == (undefined *)0x40000000) {\n    updated_value = 0x1c;\n  }\n  else if (input_pointer == (undefined *)0x40000400) {\n    updated_value = 0x1d;\n  }\n  else {\n    if (input_pointer != &DAT_40000800) {\n      return;\n    }\n    updated_value = 0x1e;\n  }\n  update_memory_with_bitwise_combination_08006cf6(updated_value,value_1,value_2);\n  set_bit_080079e0(updated_value);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007a70": "update_memory_with_combination_08007a70",
                "param_1": "input_pointer",
                "param_2": "value_1",
                "param_3": "value_2",
                "local_c": "updated_value"
            },
            "calling": [
                "FUN_08007ad0"
            ],
            "called": [
                "FUN_08006cf6",
                "FUN_080079e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007ad0": {
            "entrypoint": "0x08007ad0",
            "current_name": "initialize_memory_08007ad0",
            "code": "\n\n\nvoid initializeMemory_08007ad0(void)\n\n{\n  updateFlags(0x40000000);\n  _DAT_40000000 = 0;\n  _DAT_40000004 = 0;\n  _DAT_40000008 = 0;\n  _DAT_4000000c = 0;\n  _DAT_40000010 = 0;\n  _DAT_40000018 = 0;\n  _DAT_4000001c = 0;\n  _DAT_40000020 = 0;\n  _DAT_40000024 = 0;\n  _DAT_40000028 = DAT_20000000 / 42000000 - 1;\n  _DAT_4000002c = 0;\n  _DAT_40000034 = 0;\n  _DAT_40000038 = 0;\n  _DAT_4000003c = 0;\n  _DAT_40000040 = 0;\n  _DAT_40000048 = 0;\n  _DAT_4000004c = 0;\n  updateMemoryWithCombination(0x40000000,0,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007ad0": "initialize_memory_08007ad0",
                "update_flags_08007a10": "updateFlags",
                "update_memory_with_combination_08007a70": "updateMemoryWithCombination"
            },
            "calling": [
                "FUN_08007e08"
            ],
            "called": [
                "FUN_08007a10",
                "FUN_08007a70"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007b70": {
            "entrypoint": "0x08007b70",
            "current_name": "set_flags_08007b70",
            "code": "\n\n\nvoid setFlags_08007b70(void)\n\n{\n  uint flags;\n  \n  flags = 1;\n  if (_DAT_40000034 != 0) {\n    flags = 3;\n  }\n  if (_DAT_40000038 != 0) {\n    flags = flags | 4;\n  }\n  _DAT_4000000c = _DAT_4000000c | flags;\n  _DAT_40000000 = _DAT_40000000 | 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007b70": "set_flags_08007b70",
                "local_c": "flags"
            },
            "calling": [
                "FUN_08005790"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007bc2": {
            "entrypoint": "0x08007bc2",
            "current_name": "clear_flags_08007bc2",
            "code": "\n\n\nvoid clearFlags_08007bc2(void)\n\n{\n  _DAT_40000000 = _DAT_40000000 & 0xfffffffe;\n  _DAT_4000000c = _DAT_4000000c & 0xfffffff8;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007bc2": "clear_flags_08007bc2"
            },
            "calling": [
                "FUN_080057e4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007bf0": {
            "entrypoint": "0x08007bf0",
            "current_name": "update_data_08007bf0",
            "code": "\n\n\nvoid update_data_08007bf0(uint new_value)\n\n{\n  _DAT_4000002c = new_value;\n  if (new_value <= _DAT_40000024) {\n    _DAT_40000024 = new_value;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007bf0": "update_data_08007bf0",
                "param_1": "new_value"
            },
            "calling": [
                "FUN_08005324"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007c40": {
            "entrypoint": "0x08007c40",
            "current_name": "set_param_value_08007c40",
            "code": "\n\n\nvoid setParamValue_08007c40(undefined4 newValue)\n\n{\n  _DAT_40000034 = newValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007c40": "set_param_value_08007c40",
                "param_1": "newValue"
            },
            "calling": [
                "FUN_08005790"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007c5e": {
            "entrypoint": "0x08007c5e",
            "current_name": "initialize_data_08007c5e",
            "code": "\n\n\nvoid initializeData_08007c5e(undefined4 dataValue)\n\n{\n  _DAT_40000038 = dataValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007c5e": "initialize_data_08007c5e",
                "param_1": "dataValue"
            },
            "calling": [
                "FUN_08005790"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007c7c": {
            "entrypoint": "0x08007c7c",
            "current_name": "update_data_08007c7c",
            "code": "\n\n\nvoid update_data_08007c7c(void)\n\n{\n  if (((_DAT_40000010 & 2) != 0) && ((_DAT_4000000c & 2) != 0)) {\n    _DAT_40000010 = _DAT_40000010 & 0xfffffffd;\n    update_data_08007c7c_value();\n  }\n  if (((_DAT_40000010 & 4) != 0) && ((_DAT_4000000c & 4) != 0)) {\n    _DAT_40000010 = _DAT_40000010 & 0xfffffffb;\n    initialize_data_value();\n  }\n  if (((_DAT_40000010 & 1) != 0) && ((_DAT_4000000c & 1) != 0)) {\n    _DAT_40000010 = _DAT_40000010 & 0xfffffffe;\n    update_registers();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007c7c": "update_data_08007c7c",
                "update_data_value_08005778": "update_data_value",
                "initialize_data_value_08005760": "initialize_data_value",
                "update_registers_080053a0": "update_registers"
            },
            "calling": [],
            "called": [
                "FUN_08005760",
                "FUN_08005778",
                "FUN_080053a0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007d08": {
            "entrypoint": "0x08007d08",
            "current_name": "initialize_hardware_08007d08",
            "code": "\n\n\nvoid initializeHardware_08007d08(void)\n\n{\n  update_flags_08007a10(&DAT_40000800);\n  _DAT_40000800 = 0x80;\n  _DAT_40000804 = 0;\n  _DAT_40000808 = 0;\n  _DAT_4000080c = 0;\n  _DAT_40000810 = 0;\n  _DAT_40000818 = 0x6800;\n  _DAT_4000081c = 0;\n  _DAT_40000820 = 0;\n  _DAT_40000824 = 0;\n  _DAT_40000828 = DAT_20000000 / 4800000 - 1;\n  _DAT_4000082c = 199;\n  _DAT_40000834 = 0;\n  _DAT_40000838 = 100;\n  _DAT_4000083c = 0;\n  _DAT_40000840 = 0;\n  _DAT_40000848 = 0;\n  _DAT_4000084c = 0;\n  _DAT_40000814 = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007d08": "initialize_hardware_08007d08"
            },
            "calling": [
                "FUN_08007e08"
            ],
            "called": [
                "FUN_08007a10"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007da8": {
            "entrypoint": "0x08007da8",
            "current_name": "set_flags_08007da8",
            "code": "\n\n\nvoid setFlags_08007da8(void)\n\n{\n  _DAT_40000820 = _DAT_40000820 | 0x10;\n  _DAT_40000800 = _DAT_40000800 | 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007da8": "set_flags_08007da8"
            },
            "calling": [
                "FUN_08007e08"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007e08": {
            "entrypoint": "0x08007e08",
            "current_name": "initialize_system_08007e08",
            "code": "\nvoid initialize_system_08007e08(void)\n\n{\n  initialize_memory();\n  initialize_hardware();\n  set_system_flags();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007e08": "initialize_system_08007e08",
                "initialize_memory_08007ad0": "initialize_memory",
                "initialize_hardware_08007d08": "initialize_hardware",
                "set_flags_08007da8": "set_system_flags"
            },
            "calling": [
                "FUN_08007540"
            ],
            "called": [
                "FUN_08007d08",
                "FUN_08007ad0",
                "FUN_08007da8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007e1c": {
            "entrypoint": "0x08007e1c",
            "current_name": "wait_for_flag_to_be_set_08007e1c",
            "code": "\n\n\nvoid waitForFlagToBeSet_08007e1c(byte inputByte)\n\n{\n  do {\n  } while ((_DAT_40004400 & 0x80) == 0);\n  _DAT_40004404 = (uint)inputByte;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007e1c": "wait_for_flag_to_be_set_08007e1c",
                "param_1": "inputByte"
            },
            "calling": [
                "FUN_0800826a",
                "FUN_08008250"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007e58": {
            "entrypoint": "0x08007e58",
            "current_name": "is_flag_set_08007e58",
            "code": "\n\n\nbool isFlagSet_08007e58(void)\n\n{\n  return (_DAT_40004400 & 0x20) != 0;\n}\n\n",
            "renaming": {
                "FUN_08007e58": "is_flag_set_08007e58"
            },
            "calling": [
                "FUN_08008286"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007e84": {
            "entrypoint": "0x08007e84",
            "current_name": "get_least_significant_byte_08007e84",
            "code": "\n\n\nuint get_least_significant_byte_08007e84(void)\n\n{\n  return _DAT_40004404 & 0xff;\n}\n\n",
            "renaming": {
                "FUN_08007e84": "get_least_significant_byte_08007e84"
            },
            "calling": [
                "FUN_08008286"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007ea4": {
            "entrypoint": "0x08007ea4",
            "current_name": "update_memory_permissions_08007ea4",
            "code": "\n\n\nvoid updateMemoryPermissions_08007ea4(undefined *memoryAddress)\n\n{\n  if (memoryAddress == (undefined *)0x40011000) {\n    _DAT_40023844 = _DAT_40023844 | 0x10;\n  }\n  else if (memoryAddress == &DAT_40004400) {\n    _DAT_40023840 = _DAT_40023840 | 0x20000;\n  }\n  else if (memoryAddress == (undefined *)0x40004800) {\n    _DAT_40023840 = _DAT_40023840 | 0x40000;\n  }\n  else if (memoryAddress == (undefined *)0x40004c00) {\n    _DAT_40023840 = _DAT_40023840 | 0x80000;\n  }\n  else if (memoryAddress == (undefined *)0x40005000) {\n    _DAT_40023840 = _DAT_40023840 | 0x100000;\n  }\n  else if (memoryAddress == (undefined *)0x40011400) {\n    _DAT_40023844 = _DAT_40023844 | 0x20;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007ea4": "update_memory_permissions_08007ea4",
                "param_1": "memoryAddress"
            },
            "calling": [
                "FUN_08008190"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007f54": {
            "entrypoint": "0x08007f54",
            "current_name": "calculate_clock_frequency_08007f54",
            "code": "\nvoid calculateClockFrequency_08007f54(int address,int value)\n\n{\n  ulonglong frequency;\n  int adjustedFrequency1;\n  int adjustedFrequency2;\n  undefined8 clockFrequency;\n  \n  if ((*(uint *)(address + 0xc) & 0x8000) == 0) {\n    if ((address != 0x40011000) && (address != 0x40011400)) {\n      clockFrequency = getClockFrequency1();\n      frequency = (ulonglong)(uint)((int)clockFrequency * 0x19) / (ulonglong)(uint)(value << 2);\n      adjustedFrequency1 = getClockFrequency1((int)clockFrequency,(int)((ulonglong)clockFrequency >> 0x20),(int)(frequency * 0x51eb851f));\n      adjustedFrequency2 = getClockFrequency1();\n      *(uint *)(address + 8) =\n           (int)(frequency / 100) << 4 |\n           (((uint)(adjustedFrequency1 * 0x19) / (uint)(value << 2) +\n            (int)(((ulonglong)(uint)(adjustedFrequency2 * 0x19) / (ulonglong)(uint)(value << 2)) / 100) * -100)\n            * 0x10 + 0x32) / 100 & 0xf;\n      return;\n    }\n    clockFrequency = getClockFrequency2();\n    frequency = (ulonglong)(uint)((int)clockFrequency * 0x19) / (ulonglong)(uint)(value << 2);\n    adjustedFrequency1 = getClockFrequency2((int)clockFrequency,(int)((ulonglong)clockFrequency >> 0x20),(int)(frequency * 0x51eb851f));\n    adjustedFrequency2 = getClockFrequency2();\n    *(uint *)(address + 8) =\n         (int)(frequency / 100) << 4 |\n         (((uint)(adjustedFrequency1 * 0x19) / (uint)(value << 2) +\n          (int)(((ulonglong)(uint)(adjustedFrequency2 * 0x19) / (ulonglong)(uint)(value << 2)) / 100) * -100) *\n          0x10 + 0x32) / 100 & 0xf;\n  }\n  else {\n    if ((address != 0x40011000) && (address != 0x40011400)) {\n      clockFrequency = getClockFrequency1();\n      frequency = (ulonglong)(uint)((int)clockFrequency * 0x19) / (ulonglong)(uint)(value << 1);\n      adjustedFrequency1 = getClockFrequency1((int)clockFrequency,(int)((ulonglong)clockFrequency >> 0x20),(int)(frequency * 0x51eb851f));\n      adjustedFrequency2 = getClockFrequency1();\n      *(uint *)(address + 8) =\n           (int)(frequency / 100) << 4 |\n           (((uint)(adjustedFrequency1 * 0x19) / (uint)(value << 1) +\n            (int)(((ulonglong)(uint)(adjustedFrequency2 * 0x19) / (ulonglong)(uint)(value << 1)) / 100) * -100)\n            * 0x10 + 0x32) / 100 & 0xf;\n      return;\n    }\n    clockFrequency = getClockFrequency2();\n    frequency = (ulonglong)(uint)((int)clockFrequency * 0x19) / (ulonglong)(uint)(value << 1);\n    adjustedFrequency1 = getClockFrequency2((int)clockFrequency,(int)((ulonglong)clockFrequency >> 0x20),(int)(frequency * 0x51eb851f));\n    adjustedFrequency2 = getClockFrequency2();\n    *(uint *)(address + 8) =\n         (int)(frequency / 100) << 4 |\n         (((uint)(adjustedFrequency1 * 0x19) / (uint)(value << 1) +\n          (int)(((ulonglong)(uint)(adjustedFrequency2 * 0x19) / (ulonglong)(uint)(value << 1)) / 100) * -100) *\n          0x10 + 0x32) / 100 & 0xf;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007f54": "calculate_clock_frequency_08007f54",
                "param_1": "address",
                "param_2": "value",
                "uVar1": "frequency",
                "iVar2": "adjustedFrequency1",
                "iVar3": "adjustedFrequency2",
                "uVar4": "clockFrequency",
                "calculate_clock_frequency_08006680": "getClockFrequency1",
                "calculate_adjusted_clock_frequency_080066cc": "getClockFrequency2"
            },
            "calling": [
                "FUN_08008190"
            ],
            "called": [
                "FUN_08006680",
                "FUN_080066cc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008190": {
            "entrypoint": "0x08008190",
            "current_name": "initialize_memory_08008190",
            "code": "\n\n\nvoid initializeMemory_08008190(void)\n\n{\n  update_memory_permissions_08007ea4(&DAT_40004400);\n  _DAT_4000440c = _DAT_4000440c & 0xffff400c | 0xc;\n  _DAT_40004410 = _DAT_40004410 & 0xffff8090;\n  _DAT_40004414 = _DAT_40004414 & 0xfffff000;\n  _DAT_40004400 = _DAT_40004400 & 0xfffffc00;\n  calculateClockFrequency(&DAT_40004400,0x1c200);\n  _DAT_4000440c = _DAT_4000440c | 0x2000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008190": "initialize_memory_08008190",
                "calculate_clock_frequency_08007f54": "calculateClockFrequency"
            },
            "calling": [
                "FUN_08007540"
            ],
            "called": [
                "FUN_08007ea4",
                "FUN_08007f54"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008244": {
            "entrypoint": "0x08008244",
            "current_name": "FUNC_08008244",
            "code": "\nvoid FUNC_08008244(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008244": "FUNC_08008244"
            },
            "calling": [
                "FUN_08001ddc"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08008250": {
            "entrypoint": "0x08008250",
            "current_name": "wait_for_flag_to_be_set_08008250",
            "code": "\nvoid waitForFlagToBeSet_08008250(undefined param)\n\n{\n  waitForFlagToBeSet_08008250(param);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008250": "wait_for_flag_to_be_set_08008250",
                "param_1": "param",
                "wait_for_flag_to_be_set_08007e1c": "waitForFlagToBeSet"
            },
            "calling": [
                "FUN_080036c6",
                "FUN_080037fc",
                "FUN_08003778",
                "FUN_0800369c",
                "FUN_08003826",
                "FUN_080036f0"
            ],
            "called": [
                "FUN_08007e1c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800826a": {
            "entrypoint": "0x0800826a",
            "current_name": "wait_for_flag_to_be_set_0800826a",
            "code": "\nundefined4 waitForFlagToBeSet_0800826a(undefined flag)\n\n{\n  waitForFlagToBeSet_0800826aHelper(flag);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800826a": "wait_for_flag_to_be_set_0800826a",
                "param_1": "flag",
                "wait_for_flag_to_be_set_08007e1c": "waitForFlagToBeSetHelper"
            },
            "calling": [],
            "called": [
                "FUN_08007e1c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008286": {
            "entrypoint": "0x08008286",
            "current_name": "check_and_return_flag_08008286",
            "code": "\nundefined check_and_return_flag_08008286(void)\n\n{\n  undefined leastSignificantByte;\n  int isFlagSet;\n  \n  isFlagSet = is_flag_set_08007e58();\n  if (isFlagSet != 0) {\n    leastSignificantByte = getLeastSignificantByte();\n    isFlagSet = checkFlags(leastSignificantByte);\n    if (isFlagSet == 0) {\n      return leastSignificantByte;\n    }\n  }\n  return 0xff;\n}\n\n",
            "renaming": {
                "FUN_08008286": "check_and_return_flag_08008286",
                "iVar2": "isFlagSet",
                "uVar1": "leastSignificantByte",
                "get_least_significant_byte_08007e84": "getLeastSignificantByte",
                "check_flags_08005900": "checkFlags"
            },
            "calling": [
                "FUN_08003f34"
            ],
            "called": [
                "FUN_08005900",
                "FUN_08007e58",
                "FUN_08007e84"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080082ba": {
            "entrypoint": "0x080082ba",
            "current_name": "FUNC_080082ba",
            "code": "\nvoid FUNC_080082ba(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080082ba": "FUNC_080082ba"
            },
            "calling": [
                "FUN_08001ddc"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080082d0": {
            "entrypoint": "0x080082d0",
            "current_name": "reverse_binary_calculation_080082d0",
            "code": "\nulonglong reverseBinaryCalculation_080082d0(uint input1,uint input2,uint input3,uint input4)\n\n{\n  int result;\n  byte carry;\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  uint uVar6;\n  uint uVar7;\n  int iVar8;\n  uint uVar9;\n  uint uVar10;\n  uint uVar11;\n  uint uVar12;\n  bool flag1;\n  bool flag2;\n  bool flag3;\n  \n  uVar6 = input4 ^ 0x80000000;\n  uVar9 = input2 << 1;\n  input4 = input4 << 1;\n  flag1 = ((input2 ^ uVar6) & 0x7fffffff) == 0;\n  flag2 = flag1 && input1 == input3;\n  if (!flag1 || input1 != input3) {\n    flag2 = (uVar9 | input1) == 0;\n  }\n  if (!flag2) {\n    flag2 = (input4 | input3) == 0;\n  }\n  iVar8 = (int)uVar9 >> 0x15;\n  if (!flag2) {\n    flag2 = iVar8 == -1;\n  }\n  result = (int)input4 >> 0x15;\n  if (!flag2) {\n    flag2 = result == -1;\n  }\n  if (flag2) {\n    if (iVar8 == -1 || result == -1) {\n      uVar9 = uVar6;\n      uVar11 = input3;\n      if (iVar8 == -1) {\n        uVar9 = input2;\n        uVar11 = input1;\n      }\n      if (iVar8 != -1 || result != -1) {\n        input3 = uVar11;\n        uVar6 = uVar9;\n      }\n      flag2 = (uVar11 | uVar9 << 0xc) == 0;\n      if (flag2) {\n        flag2 = (input3 | uVar6 << 0xc) == 0;\n      }\n      if (flag2) {\n        flag2 = uVar9 == uVar6;\n      }\n      if (!flag2) {\n        uVar9 = uVar9 | 0x80000;\n      }\n      return CONCAT44(uVar9,uVar11);\n    }\n    if (((input2 ^ uVar6) & 0x7fffffff) != 0 || input1 != input3) {\n      if ((uVar9 | input1) == 0) {\n        input1 = input3;\n        input2 = uVar6;\n      }\n      return CONCAT44(input2,input1);\n    }\n    if (input2 != uVar6) {\n      return 0;\n    }\n    if (uVar9 >> 0x15 == 0) {\n      flag2 = (input1 & 0x80000000) != 0;\n      uVar6 = input2 * 2 + (uint)flag2;\n      if (CARRY4(input2,input2) || CARRY4(input2 * 2,(uint)flag2)) {\n        uVar6 = uVar6 | 0x80000000;\n      }\n      return CONCAT44(uVar6,input1 << 1);\n    }\n    if (uVar9 < 0xffc00000) {\n      return CONCAT44(input2 + 0x100000,input1);\n    }\n    input2 = input2 & 0x80000000;\nLAB_08008514:\n    return (ulonglong)(input2 | 0x7ff00000) << 0x20;\n  }\n  uVar9 = uVar9 >> 0x15;\n  input4 = input4 >> 0x15;\n  uVar11 = input4 - uVar9;\n  flag2 = uVar11 != 0;\n  if (input4 < uVar9) {\n    uVar11 = -uVar11;\n  }\n  uVar10 = input1;\n  uVar7 = input2;\n  if (flag2 && uVar9 <= input4) {\n    uVar9 = uVar9 + uVar11;\n    uVar10 = input3;\n    uVar7 = uVar6;\n    input3 = input1;\n    uVar6 = input2;\n  }\n  if (0x36 < uVar11) {\n    return CONCAT44(uVar7,uVar10);\n  }\n  temp2 = uVar7 & 0xfffff | 0x100000;\n  if ((uVar7 & 0x80000000) != 0) {\n    flag2 = uVar10 != 0;\n    uVar10 = -uVar10;\n    temp2 = -temp2 - (uint)flag2;\n  }\n  uVar7 = uVar6 & 0xfffff | 0x100000;\n  if ((uVar6 & 0x80000000) != 0) {\n    flag2 = input3 != 0;\n    input3 = -input3;\n    uVar7 = -uVar7 - (uint)flag2;\n  }\n  if (uVar9 == uVar11) {\n    uVar7 = uVar7 ^ 0x100000;\n    if (uVar9 == 0) {\n      temp2 = temp2 ^ 0x100000;\n      uVar9 = 1;\n    }\n    else {\n      uVar11 = uVar11 - 1;\n    }\n  }\n  uVar6 = -uVar11 + 0x20;\n  if ((int)uVar11 < 0x21) {\n    uVar12 = input3 << (uVar6 & 0xff);\n    input3 = input3 >> (uVar11 & 0xff);\n    temp1 = uVar10 + input3;\n    temp3 = uVar7 << (uVar6 & 0xff);\n    uVar6 = temp1 + temp3;\n    temp2 = temp2 + CARRY4(uVar10,input3) + ((int)uVar7 >> (uVar11 & 0xff)) +\n            (uint)CARRY4(temp1,temp3);\n  }\n  else {\n    uVar12 = uVar7 << (-uVar11 + 0x40 & 0xff);\n    if (input3 != 0) {\n      uVar12 = uVar12 | 2;\n    }\n    uVar7 = (int)uVar7 >> (uVar11 - 0x20 & 0xff);\n    uVar6 = uVar10 + uVar7;\n    temp2 = temp2 + ((int)uVar7 >> 0x1f) + (uint)CARRY4(uVar10,uVar7);\n  }\n  input2 = temp2 & 0x80000000;\n  uVar11 = temp2;\n  if ((int)temp2 < 0) {\n    flag2 = uVar12 == 0;\n    uVar12 = -uVar12;\n    uVar11 = -uVar6;\n    uVar6 = -(uint)!flag2 - uVar6;\n    uVar11 = -(uint)(flag2 <= uVar11) - temp2;\n  }\n  if (0xfffff < uVar11) {\n    uVar10 = uVar9 - 1;\n    if (0x1fffff < uVar11) {\n      uVar10 = uVar11 & 1;\n      uVar11 = uVar11 >> 1;\n      carry = (byte)uVar6;\n      uVar6 = (uint)(uVar10 != 0) << 0x1f | uVar6 >> 1;\n      uVar12 = (uint)(carry & 1) << 0x1f | uVar12 >> 1;\n      uVar10 = uVar9;\n      if (0xffbfffff < uVar9 * 0x200000) goto LAB_08008514;\n    }\nLAB_080083e0:\n    flag2 = 0x7fffffff < uVar12;\n    if (uVar12 == 0x80000000) {\n      flag2 = (uVar6 & 1) != 0;\n    }\n    return CONCAT44(uVar11 + uVar10 * 0x100000 + (uint)CARRY4(uVar6,(uint)flag2) | input2,\n                    uVar6 + flag2);\n  }\n  flag1 = (uVar12 & 0x80000000) != 0;\n  uVar12 = uVar12 << 1;\n  uVar10 = uVar6 * 2;\n  flag2 = CARRY4(uVar6,uVar6);\n  uVar6 = uVar6 * 2 + (uint)flag1;\n  uVar11 = uVar11 * 2 + (uint)(flag2 || CARRY4(uVar10,(uint)flag1));\n  uVar10 = uVar9 - 2;\n  if (uVar9 - 1 != 0 && 0xfffff < uVar11) goto LAB_080083e0;\n  uVar7 = uVar6;\n  uVar9 = uVar11;\n  if (uVar11 == 0) {\n    uVar7 = 0;\n    uVar9 = uVar6;\n  }\n  iVar8 = LZCOUNT(uVar9);\n  if (uVar11 == 0) {\n    iVar8 = iVar8 + 0x20;\n  }\n  uVar11 = iVar8 - 0xb;\n  flag3 = SBORROW4(uVar11,0x20);\n  uVar6 = iVar8 - 0x2b;\n  flag2 = (int)uVar6 < 0;\n  flag1 = uVar6 == 0;\n  if ((int)uVar11 < 0x20) {\n    flag3 = SCARRY4(uVar6,0xc);\n    iVar8 = iVar8 + -0x1f;\n    flag2 = iVar8 < 0;\n    flag1 = iVar8 == 0;\n    uVar6 = uVar11;\n    if (!flag1 && flag2 == flag3) {\n      uVar7 = uVar9 << (uVar11 & 0xff);\n      uVar9 = uVar9 >> (0xcU - iVar8 & 0xff);\n      goto LAB_08008458;\n    }\n  }\n  if (flag1 || flag2 != flag3) {\n    uVar12 = 0x20 - uVar6;\n  }\n  uVar9 = uVar9 << (uVar6 & 0xff);\n  if (flag1 || flag2 != flag3) {\n    uVar9 = uVar9 | uVar7 >> (uVar12 & 0xff);\n  }\n  if (flag1 || flag2 != flag3) {\n    uVar7 = uVar7 << (uVar6 & 0xff);\n  }\nLAB_08008458:\n  if ((int)uVar11 <= (int)uVar10) {\n    return CONCAT44(uVar9 + (uVar10 - uVar11) * 0x100000 | input2,uVar7);\n  }\n  uVar6 = ~(uVar10 - uVar11);\n  if ((int)uVar6 < 0x1f) {\n    iVar8 = uVar6 - 0x13;\n    if (iVar8 != 0 && iVar8 < 0 == SCARRY4(uVar6 - 0x1f,0xc)) {\n      return CONCAT44(temp2,uVar7 >> (0x20 - (0xcU - iVar8) & 0xff) | uVar9 << (0xcU - iVar8 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    uVar6 = uVar6 + 1;\n    return CONCAT44(input2 | uVar9 >> (uVar6 & 0xff),\n                    uVar7 >> (uVar6 & 0xff) | uVar9 << (0x20 - uVar6 & 0xff));\n  }\n  return CONCAT44(temp2,uVar9 >> (uVar6 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_080082d0": "reverse_binary_calculation_080082d0",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "iVar1": "result",
                "bVar2": "carry",
                "uVar3": "temp1",
                "uVar4": "temp2",
                "uVar5": "temp3",
                "bVar13": "flag1",
                "bVar14": "flag2",
                "bVar15": "flag3"
            },
            "calling": [
                "FUN_08003004",
                "FUN_08001f00",
                "FUN_08009b24",
                "FUN_080096e8",
                "FUN_0800adf0",
                "FUN_0800af78",
                "FUN_08004940",
                "FUN_0800a5a0",
                "FUN_08009d78",
                "FUN_08009990",
                "FUN_08009410",
                "FUN_0800a348",
                "FUN_0800a1bc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080082d4": {
            "entrypoint": "0x080082d4",
            "current_name": "calculate_result_080082d4",
            "code": "\nulonglong calculate_result_080082d4(uint input_1,uint input_2,uint input_3,uint input_4)\n\n{\n  int shifted_input2;\n  byte carry_bit;\n  uint temp_1;\n  uint temp_2;\n  uint temp_3;\n  int shifted_input4;\n  uint shifted_input2_1;\n  uint shifted_input4_1;\n  uint result_2;\n  uint result_1;\n  uint carry;\n  uint result_4;\n  bool is_zero;\n  bool bVar14;\n  bool check_bit;\n  \n  shifted_input2_1 = input_2 << 1;\n  result_2 = input_4 << 1;\n  is_zero = ((input_2 ^ input_4) & 0x7fffffff) == 0;\n  bVar14 = is_zero && input_1 == input_3;\n  if (!is_zero || input_1 != input_3) {\n    bVar14 = (shifted_input2_1 | input_1) == 0;\n  }\n  if (!bVar14) {\n    bVar14 = (result_2 | input_3) == 0;\n  }\n  shifted_input4 = (int)shifted_input2_1 >> 0x15;\n  if (!bVar14) {\n    bVar14 = shifted_input4 == -1;\n  }\n  shifted_input2 = (int)result_2 >> 0x15;\n  if (!bVar14) {\n    bVar14 = shifted_input2 == -1;\n  }\n  if (bVar14) {\n    if (shifted_input4 == -1 || shifted_input2 == -1) {\n      result_2 = input_4;\n      shifted_input2_1 = input_3;\n      if (shifted_input4 == -1) {\n        result_2 = input_2;\n        shifted_input2_1 = input_1;\n      }\n      if (shifted_input4 != -1 || shifted_input2 != -1) {\n        input_3 = shifted_input2_1;\n        input_4 = result_2;\n      }\n      bVar14 = (shifted_input2_1 | result_2 << 0xc) == 0;\n      if (bVar14) {\n        bVar14 = (input_3 | input_4 << 0xc) == 0;\n      }\n      if (bVar14) {\n        bVar14 = result_2 == input_4;\n      }\n      if (!bVar14) {\n        result_2 = result_2 | 0x80000;\n      }\n      return CONCAT44(result_2,shifted_input2_1);\n    }\n    if (((input_2 ^ input_4) & 0x7fffffff) != 0 || input_1 != input_3) {\n      if ((shifted_input2_1 | input_1) == 0) {\n        input_1 = input_3;\n        input_2 = input_4;\n      }\n      return CONCAT44(input_2,input_1);\n    }\n    if (input_2 != input_4) {\n      return 0;\n    }\n    if (shifted_input2_1 >> 0x15 == 0) {\n      bVar14 = (input_1 & 0x80000000) != 0;\n      result_2 = input_2 * 2 + (uint)bVar14;\n      if (CARRY4(input_2,input_2) || CARRY4(input_2 * 2,(uint)bVar14)) {\n        result_2 = result_2 | 0x80000000;\n      }\n      return CONCAT44(result_2,input_1 << 1);\n    }\n    if (shifted_input2_1 < 0xffc00000) {\n      return CONCAT44(input_2 + 0x100000,input_1);\n    }\n    input_2 = input_2 & 0x80000000;\nLAB_08008514:\n    return (ulonglong)(input_2 | 0x7ff00000) << 0x20;\n  }\n  shifted_input2_1 = shifted_input2_1 >> 0x15;\n  result_2 = result_2 >> 0x15;\n  result_1 = result_2 - shifted_input2_1;\n  bVar14 = result_1 != 0;\n  if (result_2 < shifted_input2_1) {\n    result_1 = -result_1;\n  }\n  shifted_input4_1 = input_1;\n  temp_3 = input_2;\n  if (bVar14 && shifted_input2_1 <= result_2) {\n    shifted_input2_1 = shifted_input2_1 + result_1;\n    shifted_input4_1 = input_3;\n    temp_3 = input_4;\n    input_3 = input_1;\n    input_4 = input_2;\n  }\n  if (0x36 < result_1) {\n    return CONCAT44(temp_3,shifted_input4_1);\n  }\n  result_2 = temp_3 & 0xfffff | 0x100000;\n  if ((temp_3 & 0x80000000) != 0) {\n    bVar14 = shifted_input4_1 != 0;\n    shifted_input4_1 = -shifted_input4_1;\n    result_2 = -result_2 - (uint)bVar14;\n  }\n  temp_3 = input_4 & 0xfffff | 0x100000;\n  if ((input_4 & 0x80000000) != 0) {\n    bVar14 = input_3 != 0;\n    input_3 = -input_3;\n    temp_3 = -temp_3 - (uint)bVar14;\n  }\n  if (shifted_input2_1 == result_1) {\n    temp_3 = temp_3 ^ 0x100000;\n    if (shifted_input2_1 == 0) {\n      result_2 = result_2 ^ 0x100000;\n      shifted_input2_1 = 1;\n    }\n    else {\n      result_1 = result_1 - 1;\n    }\n  }\n  result_4 = -result_1 + 0x20;\n  if ((int)result_1 < 0x21) {\n    carry = input_3 << (result_4 & 0xff);\n    input_3 = input_3 >> (result_1 & 0xff);\n    temp_1 = shifted_input4_1 + input_3;\n    temp_2 = temp_3 << (result_4 & 0xff);\n    result_4 = temp_1 + temp_2;\n    result_2 = result_2 + CARRY4(shifted_input4_1,input_3) + ((int)temp_3 >> (result_1 & 0xff)) +\n            (uint)CARRY4(temp_1,temp_2);\n  }\n  else {\n    carry = temp_3 << (-result_1 + 0x40 & 0xff);\n    if (input_3 != 0) {\n      carry = carry | 2;\n    }\n    temp_3 = (int)temp_3 >> (result_1 - 0x20 & 0xff);\n    result_4 = shifted_input4_1 + temp_3;\n    result_2 = result_2 + ((int)temp_3 >> 0x1f) + (uint)CARRY4(shifted_input4_1,temp_3);\n  }\n  input_2 = result_2 & 0x80000000;\n  result_1 = result_2;\n  if ((int)result_2 < 0) {\n    bVar14 = carry == 0;\n    carry = -carry;\n    result_1 = -result_4;\n    result_4 = -(uint)!bVar14 - result_4;\n    result_1 = -(uint)(bVar14 <= result_1) - result_2;\n  }\n  if (0xfffff < result_1) {\n    shifted_input4_1 = shifted_input2_1 - 1;\n    if (0x1fffff < result_1) {\n      result_2 = result_1 & 1;\n      result_1 = result_1 >> 1;\n      carry_bit = (byte)result_4;\n      result_4 = (uint)(result_2 != 0) << 0x1f | result_4 >> 1;\n      carry = (uint)(carry_bit & 1) << 0x1f | carry >> 1;\n      shifted_input4_1 = shifted_input2_1;\n      if (0xffbfffff < shifted_input2_1 * 0x200000) goto LAB_08008514;\n    }\nLAB_080083e0:\n    bVar14 = 0x7fffffff < carry;\n    if (carry == 0x80000000) {\n      bVar14 = (result_4 & 1) != 0;\n    }\n    return CONCAT44(result_1 + shifted_input4_1 * 0x100000 + (uint)CARRY4(result_4,(uint)bVar14) | input_2,\n                    result_4 + bVar14);\n  }\n  is_zero = (carry & 0x80000000) != 0;\n  carry = carry << 1;\n  shifted_input4_1 = result_4 * 2;\n  bVar14 = CARRY4(result_4,result_4);\n  result_4 = result_4 * 2 + (uint)is_zero;\n  result_1 = result_1 * 2 + (uint)(bVar14 || CARRY4(shifted_input4_1,(uint)is_zero));\n  shifted_input4_1 = shifted_input2_1 - 2;\n  if (shifted_input2_1 - 1 != 0 && 0xfffff < result_1) goto LAB_080083e0;\n  temp_3 = result_4;\n  shifted_input2_1 = result_1;\n  if (result_1 == 0) {\n    temp_3 = 0;\n    shifted_input2_1 = result_4;\n  }\n  shifted_input4 = LZCOUNT(shifted_input2_1);\n  if (result_1 == 0) {\n    shifted_input4 = shifted_input4 + 0x20;\n  }\n  result_4 = shifted_input4 - 0xb;\n  check_bit = SBORROW4(result_4,0x20);\n  result_1 = shifted_input4 - 0x2b;\n  bVar14 = (int)result_1 < 0;\n  is_zero = result_1 == 0;\n  if ((int)result_4 < 0x20) {\n    check_bit = SCARRY4(result_1,0xc);\n    shifted_input4 = shifted_input4 + -0x1f;\n    bVar14 = shifted_input4 < 0;\n    is_zero = shifted_input4 == 0;\n    result_1 = result_4;\n    if (!is_zero && bVar14 == check_bit) {\n      temp_3 = shifted_input2_1 << (result_4 & 0xff);\n      shifted_input2_1 = shifted_input2_1 >> (0xcU - shifted_input4 & 0xff);\n      goto LAB_08008458;\n    }\n  }\n  if (is_zero || bVar14 != check_bit) {\n    carry = 0x20 - result_1;\n  }\n  shifted_input2_1 = shifted_input2_1 << (result_1 & 0xff);\n  if (is_zero || bVar14 != check_bit) {\n    shifted_input2_1 = shifted_input2_1 | temp_3 >> (carry & 0xff);\n  }\n  if (is_zero || bVar14 != check_bit) {\n    temp_3 = temp_3 << (result_1 & 0xff);\n  }\nLAB_08008458:\n  if ((int)result_4 <= (int)shifted_input4_1) {\n    return CONCAT44(shifted_input2_1 + (shifted_input4_1 - result_4) * 0x100000 | input_2,temp_3);\n  }\n  result_1 = ~(shifted_input4_1 - result_4);\n  if ((int)result_1 < 0x1f) {\n    shifted_input4 = result_1 - 0x13;\n    if (shifted_input4 != 0 && shifted_input4 < 0 == SCARRY4(result_1 - 0x1f,0xc)) {\n      return CONCAT44(result_2,temp_3 >> (0x20 - (0xcU - shifted_input4) & 0xff) | shifted_input2_1 << (0xcU - shifted_input4 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    result_1 = result_1 + 1;\n    return CONCAT44(input_2 | shifted_input2_1 >> (result_1 & 0xff),\n                    temp_3 >> (result_1 & 0xff) | shifted_input2_1 << (0x20 - result_1 & 0xff));\n  }\n  return CONCAT44(result_2,shifted_input2_1 >> (result_1 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_080082d4": "calculate_result_080082d4",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "iVar1": "shifted_input2",
                "bVar2": "carry_bit",
                "uVar3": "temp_1",
                "uVar4": "temp_2",
                "uVar5": "temp_3",
                "iVar6": "shifted_input4",
                "uVar7": "shifted_input2_1",
                "uVar8": "shifted_input4_1",
                "uVar9": "result_2",
                "uVar10": "result_1",
                "uVar11": "carry",
                "uVar12": "result_4",
                "bVar13": "is_zero",
                "bVar15": "check_bit"
            },
            "calling": [
                "FUN_080094c0",
                "FUN_08001f00",
                "FUN_08009b24",
                "FUN_0800adf0",
                "FUN_0800af78",
                "FUN_08009798",
                "FUN_0800a5a0",
                "FUN_08009d78",
                "FUN_08009318",
                "FUN_08009990",
                "FUN_08009654",
                "FUN_0800b2e8",
                "FUN_0800a348",
                "FUN_0800a1bc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800854c": {
            "entrypoint": "0x0800854c",
            "current_name": "shift_and_concat_0800854c",
            "code": "\nulonglong shift_and_concat_0800854c(uint input)\n\n{\n  uint result_low;\n  uint shift_amount;\n  int lzcount_result;\n  uint lzshift;\n  uint shift_count;\n  bool is_negative_shift;\n  bool is_zero_shift;\n  bool is_overflow_shift;\n  \n  if (input == 0) {\n    return 0;\n  }\n  result_low = 0;\n  lzcount_result = LZCOUNT(input);\n  lzshift = lzcount_result + 0x15;\n  is_overflow_shift = SBORROW4(lzshift,0x20);\n  shift_amount = lzcount_result - 0xb;\n  is_negative_shift = (int)shift_amount < 0;\n  is_zero_shift = shift_amount == 0;\n  if (lzshift < 0x20) {\n    is_overflow_shift = SCARRY4(shift_amount,0xc);\n    is_negative_shift = false;\n    is_zero_shift = lzcount_result + 1 == 0;\n    shift_amount = lzshift;\n    if (!is_zero_shift && is_overflow_shift == false) {\n      result_low = input << lzshift;\n      input = input >> (0xcU - (lzcount_result + 1) & 0xff);\n      goto LAB_08008458;\n    }\n  }\n  if (is_zero_shift || is_negative_shift != is_overflow_shift) {\n    shift_count = 0x20 - shift_amount;\n  }\n  input = input << (shift_amount & 0xff);\n  if (is_zero_shift || is_negative_shift != is_overflow_shift) {\n    input = input | 0U >> (shift_count & 0xff);\n  }\n  if (is_zero_shift || is_negative_shift != is_overflow_shift) {\n    result_low = 0 << (shift_amount & 0xff);\n  }\nLAB_08008458:\n  if (lzshift < 0x433) {\n    return CONCAT44(input + (0x432 - lzshift) * 0x100000,result_low);\n  }\n  shift_amount = ~(0x432 - lzshift);\n  if (0x1e < (int)shift_amount) {\n    return (ulonglong)(input >> (shift_amount - 0x1f & 0xff));\n  }\n  lzcount_result = shift_amount - 0x13;\n  if (lzcount_result == 0 || lzcount_result < 0 != SCARRY4(shift_amount - 0x1f,0xc)) {\n    shift_amount = shift_amount + 1;\n    return CONCAT44(input >> (shift_amount & 0xff),\n                    result_low >> (shift_amount & 0xff) | input << (0x20 - shift_amount & 0xff));\n  }\n  return (ulonglong)(result_low >> (0x20 - (0xcU - lzcount_result) & 0xff) | input << (0xcU - lzcount_result & 0xff));\n}\n\n",
            "renaming": {
                "FUN_0800854c": "shift_and_concat_0800854c",
                "param_1": "input",
                "uVar1": "result_low",
                "uVar2": "shift_amount",
                "iVar3": "lzcount_result",
                "uVar4": "lzshift",
                "in_r12": "shift_count",
                "bVar5": "is_negative_shift",
                "bVar6": "is_zero_shift",
                "bVar7": "is_overflow_shift"
            },
            "calling": [
                "FUN_08001994"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800856c": {
            "entrypoint": "0x0800856c",
            "current_name": "shift_and_combine_bits_0800856c",
            "code": "\nulonglong shiftAndCombineBits_0800856c(uint input)\n\n{\n  uint bitCount;\n  uint absInput;\n  uint shiftAmount;\n  int leadingZeros;\n  uint totalBits;\n  uint signBit;\n  uint remainingBits;\n  bool bVar7;\n  bool bVar8;\n  bool bVar9;\n  \n  if (input == 0) {\n    return 0;\n  }\n  signBit = input & 0x80000000;\n  absInput = input;\n  if ((int)signBit < 0) {\n    absInput = -input;\n  }\n  bitCount = 0;\n  leadingZeros = LZCOUNT(absInput);\n  totalBits = leadingZeros + 0x15;\n  bVar9 = SBORROW4(totalBits,0x20);\n  shiftAmount = leadingZeros - 0xb;\n  bVar7 = (int)shiftAmount < 0;\n  bVar8 = shiftAmount == 0;\n  if (totalBits < 0x20) {\n    bVar9 = SCARRY4(shiftAmount,0xc);\n    bVar7 = false;\n    bVar8 = leadingZeros + 1 == 0;\n    shiftAmount = totalBits;\n    if (!bVar8 && bVar9 == false) {\n      bitCount = absInput << totalBits;\n      absInput = absInput >> (0xcU - (leadingZeros + 1) & 0xff);\n      goto LAB_08008458;\n    }\n  }\n  if (bVar8 || bVar7 != bVar9) {\n    remainingBits = 0x20 - shiftAmount;\n  }\n  absInput = absInput << (shiftAmount & 0xff);\n  if (bVar8 || bVar7 != bVar9) {\n    absInput = absInput | 0U >> (remainingBits & 0xff);\n  }\n  if (bVar8 || bVar7 != bVar9) {\n    bitCount = 0 << (shiftAmount & 0xff);\n  }\nLAB_08008458:\n  if (totalBits < 0x433) {\n    return CONCAT44(absInput + (0x432 - totalBits) * 0x100000 | signBit,bitCount);\n  }\n  shiftAmount = ~(0x432 - totalBits);\n  if (0x1e < (int)shiftAmount) {\n    return CONCAT44(input,absInput >> (shiftAmount - 0x1f & 0xff)) & 0x80000000ffffffff;\n  }\n  leadingZeros = shiftAmount - 0x13;\n  if (leadingZeros == 0 || leadingZeros < 0 != SCARRY4(shiftAmount - 0x1f,0xc)) {\n    shiftAmount = shiftAmount + 1;\n    return CONCAT44(signBit | absInput >> (shiftAmount & 0xff),\n                    bitCount >> (shiftAmount & 0xff) | absInput << (0x20 - shiftAmount & 0xff));\n  }\n  return CONCAT44(input,bitCount >> (0x20 - (0xcU - leadingZeros) & 0xff) | absInput << (0xcU - leadingZeros & 0xff))\n         & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_0800856c": "shift_and_combine_bits_0800856c",
                "param_1": "input",
                "uVar1": "bitCount",
                "uVar2": "absInput",
                "uVar3": "shiftAmount",
                "iVar4": "leadingZeros",
                "uVar5": "totalBits",
                "uVar6": "signBit",
                "in_r12": "remainingBits"
            },
            "calling": [
                "FUN_08002c18",
                "FUN_0800a5a0",
                "FUN_08009d78"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008590": {
            "entrypoint": "0x08008590",
            "current_name": "decode_and_improve_08008590",
            "code": "\nulonglong decode_and_improve_08008590(uint input_val,undefined4 param1,undefined4 param2,uint param3)\n\n{\n  uint var1;\n  uint var2;\n  uint var3;\n  uint var4;\n  uint var5;\n  int var6;\n  uint var7;\n  uint var8;\n  bool flag1;\n  bool flag2;\n  bool flag3;\n  \n  var5 = input_val << 1;\n  flag2 = var5 == 0;\n  var1 = (uint)((input_val & 0x80000000) != 0) << 0x1f;\n  var4 = (uint)((int)var5 >> 3) >> 1;\n  var3 = var1 | var4;\n  input_val = input_val << 0x1d;\n  if (!flag2) {\n    param3 = var5 & 0xff000000;\n    flag2 = param3 == 0;\n  }\n  if (!flag2) {\n    flag2 = param3 == 0xff000000;\n  }\n  if (!flag2) {\n    return CONCAT44(var3,input_val) ^ 0x3800000000000000;\n  }\n  if ((var5 & 0xffffff) == 0) {\n    return CONCAT44(var3,input_val);\n  }\n  if (param3 == 0xff000000) {\n    return CONCAT44(var3,input_val) | 0x8000000000000;\n  }\n  var2 = input_val;\n  var5 = var4;\n  if (var4 == 0) {\n    var2 = 0;\n    var5 = input_val;\n  }\n  var6 = LZCOUNT(var5);\n  if (var4 == 0) {\n    var6 = var6 + 0x20;\n  }\n  var7 = var6 - 0xb;\n  flag3 = SBORROW4(var7,0x20);\n  var4 = var6 - 0x2b;\n  flag2 = (int)var4 < 0;\n  flag1 = var4 == 0;\n  if ((int)var7 < 0x20) {\n    flag3 = SCARRY4(var4,0xc);\n    var6 = var6 + -0x1f;\n    flag2 = var6 < 0;\n    flag1 = var6 == 0;\n    var4 = var7;\n    if (!flag1 && flag2 == flag3) {\n      var2 = var5 << (var7 & 0xff);\n      var5 = var5 >> (0xcU - var6 & 0xff);\n      goto LAB_08008458;\n    }\n  }\n  if (flag1 || flag2 != flag3) {\n    var8 = 0x20 - var4;\n  }\n  var5 = var5 << (var4 & 0xff);\n  if (flag1 || flag2 != flag3) {\n    var5 = var5 | var2 >> (var8 & 0xff);\n  }\n  if (flag1 || flag2 != flag3) {\n    var2 = var2 << (var4 & 0xff);\n  }\nLAB_08008458:\n  if ((int)var7 < 0x381) {\n    return CONCAT44(var5 + (0x380 - var7) * 0x100000 | var1,var2);\n  }\n  var4 = ~(0x380 - var7);\n  if (0x1e < (int)var4) {\n    return CONCAT44(var3,var5 >> (var4 - 0x1f & 0xff)) & 0x80000000ffffffff;\n  }\n  var6 = var4 - 0x13;\n  if (var6 == 0 || var6 < 0 != SCARRY4(var4 - 0x1f,0xc)) {\n    var4 = var4 + 1;\n    return CONCAT44(var1 | var5 >> (var4 & 0xff),\n                    var2 >> (var4 & 0xff) | var5 << (0x20 - var4 & 0xff));\n  }\n  return CONCAT44(var3,var2 >> (0x20 - (0xcU - var6) & 0xff) | var5 << (0xcU - var6 & 0xff)) &\n         0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_08008590": "decode_and_improve_08008590",
                "param_1": "input_val",
                "param_2": "param1",
                "param_3": "param2",
                "param_4": "param3",
                "uVar1": "var1",
                "uVar2": "var2",
                "uVar3": "var3",
                "uVar4": "var4",
                "uVar5": "var5",
                "iVar6": "var6",
                "uVar7": "var7",
                "in_r12": "var8",
                "bVar8": "flag1",
                "bVar9": "flag2",
                "bVar10": "flag3"
            },
            "calling": [
                "FUN_08002638",
                "FUN_080046d0",
                "FUN_08003004",
                "FUN_08001f00",
                "FUN_08002978",
                "FUN_08004940",
                "FUN_08004e30",
                "FUN_080044e8",
                "FUN_08003b98",
                "FUN_08002408",
                "FUN_080005b4",
                "FUN_08001994",
                "FUN_08002c18",
                "FUN_0800056c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008640": {
            "entrypoint": "0x08008640",
            "current_name": "calculate_result_08008640",
            "code": "\nulonglong calculate_result_08008640(undefined4 param1,uint input1,uint input2,uint input3)\n\n{\n  ulonglong result1;\n  longlong result2;\n  uint result3;\n  uint result4;\n  int result5;\n  uint result6;\n  uint result7;\n  uint result8;\n  uint result9;\n  bool condition1;\n  bool condition2;\n  bool condition3;\n  ulonglong combined_result;\n  \n  combined_result = CONCAT44(input1,param1);\n  result8 = 0x7ff;\n  result4 = input1 >> 0x14 & 0x7ff;\n  condition1 = result4 == 0;\n  if (!condition1) {\n    result7 = input3 >> 0x14 & 0x7ff;\n    condition1 = result7 == 0;\n  }\n  if (!condition1) {\n    condition1 = result4 == 0x7ff;\n  }\n  if (!condition1) {\n    condition1 = result7 == 0x7ff;\n  }\n  if (condition1) {\n    combined_result = calculate_result_08008640_0800881c();\n  }\n  result3 = (uint)(combined_result >> 0x20);\n  result5 = result4 + result7;\n  result4 = result3 ^ input3;\n  result3 = result3 & ~(result8 << 0x15);\n  input3 = input3 & ~(result8 << 0x15);\n  condition1 = ((uint)combined_result | result3 << 0xc) == 0;\n  if (!condition1) {\n    condition1 = (input2 | input3 << 0xc) == 0;\n  }\n  result3 = result3 | 0x100000;\n  input3 = input3 | 0x100000;\n  if (condition1) {\n    input2 = (uint)combined_result | input2;\n    input3 = (result4 & 0x80000000 | result3) ^ input3;\n    result4 = result8 >> 1;\n    condition3 = SBORROW4(result5,result4);\n    result6 = result5 - result4;\n    condition1 = result6 == 0;\n    result3 = result6;\n    if (!condition1 && (int)result4 <= result5) {\n      condition3 = SBORROW4(result8,result6);\n      result3 = result8 - result6;\n      condition1 = result8 == result6;\n    }\n    if (!condition1 && (int)result3 < 0 == condition3) {\n      input3 = input3 | result6 * 0x100000;\n    }\n    if (!condition1 && (int)result3 < 0 == condition3) {\n      return CONCAT44(input3,input2);\n    }\n    input3 = input3 | 0x100000;\n    result8 = 0;\n    condition3 = SBORROW4(result6,1);\n    result6 = result6 - 1;\n    condition1 = result6 == 0;\n    result4 = result6;\n  }\n  else {\n    result1 = (combined_result & 0xffffffff) * (ulonglong)input2;\n    combined_result = (combined_result & 0xffffffff) * (ulonglong)input3 +\n             (ulonglong)result3 * (ulonglong)input2 + (result1 >> 0x20);\n    result9 = (uint)combined_result;\n    result2 = (ulonglong)result3 * (ulonglong)input3 + (combined_result >> 0x20);\n    result8 = (uint)result2;\n    result3 = (uint)((ulonglong)result2 >> 0x20);\n    if ((int)result1 != 0) {\n      result9 = result9 | 1;\n    }\n    result6 = (result5 + -0x3ff) - (uint)(result3 < 0x200);\n    if (result3 < 0x200) {\n      condition1 = (result9 & 0x80000000) != 0;\n      result9 = result9 << 1;\n      result2 = CONCAT44(result3 * 2 + (uint)(CARRY4(result8,result8) || CARRY4(result8 * 2,(uint)condition1)),\n                       result8 * 2 + (uint)condition1);\n    }\n    input3 = result4 & 0x80000000 | (int)((ulonglong)result2 >> 0x20) << 0xb | (uint)result2 >> 0x15;\n    input2 = (uint)result2 << 0xb | result9 >> 0x15;\n    result8 = result9 * 0x800;\n    condition2 = 0xfc < result6;\n    condition3 = SBORROW4(result6,0xfd);\n    result3 = result6 - 0xfd;\n    condition1 = result3 == 0;\n    result4 = result3;\n    if (condition2 && !condition1) {\n      condition2 = 0x6ff < result3;\n      condition3 = SBORROW4(result3,0x700);\n      result4 = result6 - 0x7fd;\n      condition1 = result3 == 0x700;\n    }\n    if (!condition2 || condition1) {\n      condition1 = 0x7fffffff < result8;\n      if (result8 == 0x80000000) {\n        condition1 = (result9 >> 0x15 & 1) != 0;\n      }\n      return CONCAT44(input3 + result6 * 0x100000 + (uint)CARRY4(input2,(uint)condition1),input2 + condition1\n                     );\n    }\n  }\n  if (!condition1 && (int)result4 < 0 == condition3) {\n    return (ulonglong)(input3 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  condition2 = SCARRY4(result6,0x36);\n  condition1 = (int)(result6 + 0x36) < 0;\n  condition3 = result6 == 0xffffffca;\n  if (condition3 || condition1 != condition2) {\n    input2 = 0;\n  }\n  if (condition3 || condition1 != condition2) {\n    input3 = input3 & 0x80000000;\n  }\n  if (condition3 || condition1 != condition2) {\n    return CONCAT44(input3,input2);\n  }\n  result4 = -result6;\n  result3 = result4 - 0x20;\n  if (0x1f < (int)result4) {\n    result6 = input2 >> (result3 & 0xff) | input3 << (0x20 - result3 & 0xff);\n    result4 = (input3 >> (result3 & 0xff) & ~((input3 & 0x80000000) >> (result3 & 0xff))) -\n            ((int)result6 >> 0x1f);\n    if ((result8 | input2 << (0x20 - result3 & 0xff) | result6 << 1) == 0) {\n      result4 = result4 & ~(result6 >> 0x1f);\n    }\n    return CONCAT44(input3,result4) & 0x80000000ffffffff;\n  }\n  result5 = result4 - 0x14;\n  if (result5 == 0 || result5 < 0 != SCARRY4(result3,0xc)) {\n    result9 = input2 << (result6 + 0x20 & 0xff);\n    result3 = input2 >> (result4 & 0xff) | input3 << (result6 + 0x20 & 0xff);\n    result6 = result3 + -((int)result9 >> 0x1f);\n    if ((result8 | result9 << 1) == 0) {\n      result6 = result6 & ~(result9 >> 0x1f);\n    }\n    return CONCAT44((input3 & 0x80000000) +\n                    ((input3 & 0x7fffffff) >> (result4 & 0xff)) +\n                    (uint)CARRY4(result3,-((int)result9 >> 0x1f)),result6);\n  }\n  result4 = 0xc - result5;\n  result6 = input2 << (result4 & 0xff);\n  result4 = input2 >> (0x20 - result4 & 0xff) | input3 << (result4 & 0xff);\n  result3 = result4 + -((int)result6 >> 0x1f);\n  if ((result8 | result6 << 1) == 0) {\n    result3 = result3 & ~(result6 >> 0x1f);\n  }\n  return CONCAT44((input3 & 0x80000000) + (uint)CARRY4(result4,-((int)result6 >> 0x1f)),result3);\n}\n\n",
            "renaming": {
                "FUN_08008640": "calculate_result_08008640",
                "param_1": "param1",
                "param_2": "input1",
                "param_3": "input2",
                "param_4": "input3",
                "uVar1": "result1",
                "lVar2": "result2",
                "uVar3": "result3",
                "uVar4": "result4",
                "iVar5": "result5",
                "uVar6": "result6",
                "unaff_r5": "result7",
                "uVar7": "result8",
                "uVar8": "result9",
                "bVar9": "condition1",
                "bVar10": "condition2",
                "bVar11": "condition3",
                "uVar12": "combined_result"
            },
            "calling": [
                "FUN_08002638",
                "FUN_080046d0",
                "FUN_08003004",
                "FUN_08001f00",
                "FUN_08009b24",
                "FUN_0800adf0",
                "FUN_0800af78",
                "FUN_08004940",
                "FUN_0800a5a0",
                "FUN_08009d78",
                "FUN_080044e8",
                "FUN_0800b2e8",
                "FUN_08001994",
                "FUN_08002c18",
                "FUN_0800056c",
                "FUN_0800a348",
                "FUN_0800a1bc"
            ],
            "called": [
                "FUN_0800881c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800881c": {
            "entrypoint": "0x0800881c",
            "current_name": "calculate_result_0800881c",
            "code": "\nulonglong calculate_result_0800881c(uint input_1,uint input_2,uint input_3,uint input_4)\n\n{\n  uint bit_1;\n  uint bit_2;\n  uint bit_3;\n  uint result_2;\n  uint constant_1;\n  bool is_zero;\n  \n  bit_3 = constant_1 & input_4 >> 0x14;\n  if (bit_2 != constant_1 && bit_3 != constant_1) {\n    is_zero = (input_1 | input_2 << 1) == 0;\n    if (!is_zero) {\n      is_zero = (input_3 | input_4 << 1) == 0;\n    }\n    if (is_zero) {\n      return (ulonglong)((input_2 ^ input_4) & 0x80000000) << 0x20;\n    }\n    if (bit_2 == 0) {\n      result_2 = input_2 & 0x80000000;\n      do {\n        bit_1 = input_1 & 0x80000000;\n        input_1 = input_1 << 1;\n        input_2 = input_2 * 2 + (uint)(bit_1 != 0);\n      } while ((input_2 & 0x100000) == 0);\n      input_2 = input_2 | result_2;\n      if (bit_3 != 0) {\n        return CONCAT44(input_2,input_1);\n      }\n    }\n    do {\n      bit_3 = input_3 & 0x80000000;\n      input_3 = input_3 << 1;\n      input_4 = input_4 * 2 + (uint)(bit_3 != 0);\n    } while ((input_4 & 0x100000) == 0);\n    return CONCAT44(input_2,input_1);\n  }\n  is_zero = (input_1 | input_2 << 1) == 0;\n  if (is_zero) {\n    input_2 = input_4;\n    input_1 = input_3;\n  }\n  if (!is_zero) {\n    is_zero = (input_3 | input_4 << 1) == 0;\n  }\n  result_2 = input_2;\n  if (((!is_zero) && ((bit_2 != constant_1 || ((input_1 | input_2 << 0xc) == 0)))) &&\n     ((bit_3 != constant_1 || (input_1 = input_3, result_2 = input_4, (input_3 | input_4 << 0xc) == 0)))) {\n    return (ulonglong)((input_2 ^ input_4) & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  return CONCAT44(result_2,input_1) | 0x7ff8000000000000;\n}\n\n",
            "renaming": {
                "FUN_0800881c": "calculate_result_0800881c",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "uVar1": "bit_1",
                "unaff_r4": "bit_2",
                "uVar2": "bit_3",
                "uVar3": "result_2",
                "in_r12": "constant_1",
                "bVar4": "is_zero"
            },
            "calling": [
                "FUN_08008640"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008894": {
            "entrypoint": "0x08008894",
            "current_name": "decode_float_08008894",
            "code": "\nulonglong decode_float_08008894(undefined4 input1,uint input2,uint input3,uint input4)\n\n{\n  uint carry;\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  uint temp4;\n  uint temp5;\n  uint temp6;\n  int difference;\n  uint exponent1;\n  uint unaff_r5;\n  uint exponent2;\n  uint mantissa1;\n  uint mantissa2;\n  uint mantissa;\n  bool flag1;\n  bool flag2;\n  bool flag3;\n  undefined8 decoded_float;\n  \n  decoded_float = CONCAT44(input2,input1);\n  mantissa = 0x7ff;\n  temp6 = input2 >> 0x14 & 0x7ff;\n  flag1 = temp6 == 0;\n  if (!flag1) {\n    unaff_r5 = input4 >> 0x14 & 0x7ff;\n    flag1 = unaff_r5 == 0;\n  }\n  if (!flag1) {\n    flag1 = temp6 == 0x7ff;\n  }\n  if (!flag1) {\n    flag1 = unaff_r5 == 0x7ff;\n  }\n  if (flag1) {\n    decoded_float = decode_float_08008894_08008a02();\n  }\n  exponent1 = (uint)((ulonglong)decoded_float >> 0x20);\n  mantissa1 = (uint)decoded_float;\n  difference = temp6 - unaff_r5;\n  if ((input3 | input4 << 0xc) == 0) {\n    temp6 = (exponent1 ^ input4) & 0x80000000 | exponent1 & 0xfffff;\n    flag3 = SCARRY4(difference,mantissa >> 1);\n    exponent1 = difference + (mantissa >> 1);\n    flag1 = (int)exponent1 < 0;\n    flag2 = exponent1 == 0;\n    if (!flag2 && flag1 == flag3) {\n      flag3 = SBORROW4(mantissa,exponent1);\n      flag1 = (int)(mantissa - exponent1) < 0;\n      flag2 = mantissa == exponent1;\n    }\n    if (!flag2 && flag1 == flag3) {\n      temp6 = temp6 | exponent1 * 0x100000;\n    }\n    if (!flag2 && flag1 == flag3) {\n      return CONCAT44(temp6,mantissa1);\n    }\n    temp6 = temp6 | 0x100000;\n    mantissa = 0;\n    flag2 = SBORROW4(exponent1,1);\n    exponent1 = exponent1 - 1;\n    flag1 = exponent1 == 0;\n    temp2 = exponent1;\n  }\n  else {\n    temp2 = (input4 << 0xc) >> 4 | 0x10000000 | input3 >> 0x18;\n    mantissa = input3 << 8;\n    exponent2 = (exponent1 << 0xc) >> 4 | 0x10000000 | mantissa1 >> 0x18;\n    mantissa1 = mantissa1 * 0x100;\n    temp6 = (exponent1 ^ input4) & 0x80000000;\n    flag1 = temp2 <= exponent2;\n    if (exponent2 == temp2) {\n      flag1 = mantissa <= mantissa1;\n    }\n    difference = difference + (uint)flag1;\n    exponent1 = difference + 0x3fd;\n    if (flag1 == false) {\n      temp2 = temp2 >> 1;\n      mantissa = (uint)((input3 >> 0x18 & 1) != 0) << 0x1f | mantissa >> 1;\n    }\n    mantissa2 = mantissa1 - mantissa;\n    exponent2 = (exponent2 - temp2) - (uint)(mantissa1 < mantissa);\n    temp3 = temp2 >> 1;\n    carry = (uint)((temp2 & 1) != 0) << 0x1f | mantissa >> 1;\n    mantissa1 = 0x100000;\n    temp2 = 0x80000;\n    while( true ) {\n      flag1 = carry <= mantissa2;\n      if (temp3 < exponent2 || exponent2 - temp3 < (uint)flag1) {\n        mantissa2 = mantissa2 - carry;\n        mantissa1 = mantissa1 | temp2;\n        exponent2 = (exponent2 - temp3) - (uint)!flag1;\n      }\n      temp4 = temp3 >> 1;\n      carry = (uint)((temp3 & 1) != 0) << 0x1f | carry >> 1;\n      flag2 = carry <= mantissa2;\n      flag1 = exponent2 - temp4 < (uint)flag2;\n      mantissa = exponent2;\n      if (temp4 < exponent2 || flag1) {\n        mantissa2 = mantissa2 - carry;\n        mantissa = (exponent2 - temp4) - (uint)!flag2;\n      }\n      if (temp4 < exponent2 || flag1) {\n        mantissa1 = mantissa1 | temp2 >> 1;\n      }\n      exponent2 = temp3 >> 2;\n      temp1 = (uint)((temp4 & 1) != 0) << 0x1f | carry >> 1;\n      flag2 = temp1 <= mantissa2;\n      flag1 = mantissa - exponent2 < (uint)flag2;\n      temp4 = mantissa;\n      if (exponent2 < mantissa || flag1) {\n        mantissa2 = mantissa2 - temp1;\n        temp4 = (mantissa - exponent2) - (uint)!flag2;\n      }\n      if (exponent2 < mantissa || flag1) {\n        mantissa1 = mantissa1 | temp2 >> 2;\n      }\n      temp5 = temp3 >> 3;\n      carry = (uint)((exponent2 & 1) != 0) << 0x1f | temp1 >> 1;\n      flag2 = carry <= mantissa2;\n      flag1 = temp4 - temp5 < (uint)flag2;\n      exponent2 = temp4;\n      if (temp5 < temp4 || flag1) {\n        mantissa2 = mantissa2 - carry;\n        exponent2 = (temp4 - temp5) - (uint)!flag2;\n      }\n      if (temp5 < temp4 || flag1) {\n        mantissa1 = mantissa1 | temp2 >> 3;\n      }\n      mantissa = exponent2 | mantissa2;\n      if (mantissa == 0) break;\n      exponent2 = exponent2 << 4 | mantissa2 >> 0x1c;\n      mantissa2 = mantissa2 << 4;\n      temp3 = temp3 & 0xfffffff8 | carry >> 0x1d;\n      carry = (temp1 >> 1) << 3;\n      temp2 = temp2 >> 4;\n      if (temp2 == 0) {\n        temp5 = temp3;\n        if ((temp6 & 0x100000) != 0) goto LAB_080089b2;\n        temp6 = temp6 | mantissa1;\n        mantissa1 = 0;\n        temp2 = 0x80000000;\n      }\n    }\n    if ((temp6 & 0x100000) == 0) {\n      temp6 = temp6 | mantissa1;\n      mantissa1 = 0;\n    }\nLAB_080089b2:\n    flag3 = 0xfc < exponent1;\n    flag2 = SBORROW4(exponent1,0xfd);\n    temp3 = difference + 0x300;\n    flag1 = temp3 == 0;\n    temp2 = temp3;\n    if (flag3 && !flag1) {\n      flag3 = 0x6ff < temp3;\n      flag2 = SBORROW4(temp3,0x700);\n      temp2 = difference - 0x400;\n      flag1 = temp3 == 0x700;\n    }\n    if (!flag3 || flag1) {\n      flag1 = temp5 <= exponent2;\n      if (exponent2 == temp5) {\n        flag1 = carry <= mantissa2;\n      }\n      if (exponent2 == temp5 && mantissa2 == carry) {\n        flag1 = (mantissa1 & 1) != 0;\n      }\n      return CONCAT44(temp6 + exponent1 * 0x100000 + (uint)CARRY4(mantissa1,(uint)flag1),mantissa1 + flag1);\n    }\n  }\n  if (!flag1 && (int)temp2 < 0 == flag2) {\n    return (ulonglong)(temp6 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  flag3 = SCARRY4(exponent1,0x36);\n  flag1 = (int)(exponent1 + 0x36) < 0;\n  flag2 = exponent1 == 0xffffffca;\n  if (flag2 || flag1 != flag3) {\n    mantissa1 = 0;\n  }\n  if (flag2 || flag1 != flag3) {\n    temp6 = temp6 & 0x80000000;\n  }\n  if (flag2 || flag1 != flag3) {\n    return CONCAT44(temp6,mantissa1);\n  }\n  temp2 = -exponent1;\n  exponent2 = temp2 - 0x20;\n  if (0x1f < (int)temp2) {\n    temp2 = mantissa1 >> (exponent2 & 0xff) | temp6 << (0x20 - exponent2 & 0xff);\n    exponent1 = (temp6 >> (exponent2 & 0xff) & ~((temp6 & 0x80000000) >> (exponent2 & 0xff))) -\n            ((int)temp2 >> 0x1f);\n    if ((mantissa | mantissa1 << (0x20 - exponent2 & 0xff) | temp2 << 1) == 0) {\n      exponent1 = exponent1 & ~(temp2 >> 0x1f);\n    }\n    return CONCAT44(temp6,exponent1) & 0x80000000ffffffff;\n  }\n  difference = temp2 - 0x14;\n  if (difference != 0 && difference < 0 == SCARRY4(exponent2,0xc)) {\n    exponent1 = 0xc - difference;\n    temp2 = mantissa1 << (exponent1 & 0xff);\n    mantissa1 = mantissa1 >> (0x20 - exponent1 & 0xff) | temp6 << (exponent1 & 0xff);\n    exponent1 = mantissa1 + -((int)temp2 >> 0x1f);\n    if ((mantissa | temp2 << 1) == 0) {\n      exponent1 = exponent1 & ~(temp2 >> 0x1f);\n    }\n    return CONCAT44((temp6 & 0x80000000) + (uint)CARRY4(mantissa1,-((int)temp2 >> 0x1f)),exponent1);\n  }\n  exponent2 = mantissa1 << (exponent1 + 0x20 & 0xff);\n  mantissa1 = mantissa1 >> (temp2 & 0xff) | temp6 << (exponent1 + 0x20 & 0xff);\n  exponent1 = mantissa1 + -((int)exponent2 >> 0x1f);\n  if ((mantissa | exponent2 << 1) == 0) {\n    exponent1 = exponent1 & ~(exponent2 >> 0x1f);\n  }\n  return CONCAT44((temp6 & 0x80000000) +\n                  ((temp6 & 0x7fffffff) >> (temp2 & 0xff)) +\n                  (uint)CARRY4(mantissa1,-((int)exponent2 >> 0x1f)),exponent1);\n}\n\n",
            "renaming": {
                "FUN_08008894": "decode_float_08008894",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "carry",
                "uVar2": "temp1",
                "uVar3": "temp2",
                "uVar4": "temp3",
                "uVar5": "temp4",
                "uVar6": "temp5",
                "uVar7": "temp6",
                "iVar8": "difference",
                "uVar9": "exponent1",
                "uVar10": "exponent2",
                "uVar11": "mantissa1",
                "uVar12": "mantissa2",
                "uVar13": "mantissa",
                "bVar14": "flag1",
                "bVar15": "flag2",
                "bVar16": "flag3",
                "uVar17": "decoded_float"
            },
            "calling": [
                "FUN_08009990",
                "FUN_08003004",
                "FUN_0800af78",
                "FUN_08001994",
                "FUN_080005b4",
                "FUN_080098d0",
                "FUN_0800a1bc"
            ],
            "called": [
                "FUN_08008a02"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008a02": {
            "entrypoint": "0x08008a02",
            "current_name": "decode_float_08008a02",
            "code": "\nulonglong decodeFloat_08008a02(uint inputSign,uint inputExponent,uint inputMantissaHigh,uint inputMantissaLow)\n\n{\n  uint tempVar1;\n  uint inputExponentCopy;\n  uint tempVar2;\n  uint tempVar3;\n  uint inputExponentShifted;\n  bool isZero;\n  \n  tempVar2 = inputExponentShifted & inputMantissaLow >> 0x14;\n  tempVar3 = inputExponent;\n  if (inputExponentCopy != inputExponentShifted || tempVar2 != inputExponentShifted) {\n    if (inputExponentCopy == inputExponentShifted) {\n      if (((inputSign | inputExponent << 0xc) == 0) && (inputSign = inputMantissaHigh, tempVar3 = inputMantissaLow, tempVar2 != inputExponentShifted)\n         ) {\nhandleSignBit:\n        return (ulonglong)((inputExponent ^ inputMantissaLow) & 0x80000000 | 0x7ff00000) << 0x20;\n      }\n    }\n    else if (tempVar2 == inputExponentShifted) {\n      inputSign = inputMantissaHigh;\n      tempVar3 = inputMantissaLow;\n      if ((inputMantissaHigh | inputMantissaLow << 0xc) == 0) {\nhandlePositiveNumber:\n        return (ulonglong)((inputExponent ^ inputMantissaLow) & 0x80000000) << 0x20;\n      }\n    }\n    else {\n      isZero = (inputSign | inputExponent << 1) == 0;\n      if (!isZero) {\n        isZero = (inputMantissaHigh | inputMantissaLow << 1) == 0;\n      }\n      if (!isZero) {\n        if (inputExponentCopy == 0) {\n          tempVar3 = inputExponent & 0x80000000;\n          do {\n            tempVar1 = inputSign & 0x80000000;\n            inputSign = inputSign << 1;\n            inputExponent = inputExponent * 2 + (uint)(tempVar1 != 0);\n          } while ((inputExponent & 0x100000) == 0);\n          inputExponent = inputExponent | tempVar3;\n          if (tempVar2 != 0) {\n            return CONCAT44(inputExponent,inputSign);\n          }\n        }\n        do {\n          tempVar3 = inputMantissaHigh & 0x80000000;\n          inputMantissaHigh = inputMantissaHigh << 1;\n          inputMantissaLow = inputMantissaLow * 2 + (uint)(tempVar3 != 0);\n        } while ((inputMantissaLow & 0x100000) == 0);\n        return CONCAT44(inputExponent,inputSign);\n      }\n      if ((inputSign | inputExponent << 1) != 0) goto handleSignBit;\n      if ((inputMantissaHigh | inputMantissaLow << 1) != 0) goto handlePositiveNumber;\n    }\n  }\n  return CONCAT44(tempVar3,inputSign) | 0x7ff8000000000000;\n}\n\n",
            "renaming": {
                "FUN_08008a02": "decode_float_08008a02",
                "param_1": "inputSign",
                "param_2": "inputExponent",
                "param_3": "inputMantissaHigh",
                "param_4": "inputMantissaLow",
                "unaff_r4": "inputExponentCopy",
                "in_r12": "inputExponentShifted",
                "uVar1": "tempVar1",
                "uVar2": "tempVar2",
                "uVar3": "tempVar3",
                "bVar4": "isZero",
                "LAB_08008874": "handleSignBit",
                "LAB_08008838": "handlePositiveNumber"
            },
            "calling": [
                "FUN_08008894"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008a74": {
            "entrypoint": "0x08008a74",
            "current_name": "check_parameters_08008a74",
            "code": "\nuint check_parameters_08008a74(uint first_param,uint second_param,uint third_param,uint fourth_param)\n\n{\n  uint param_xor;\n  bool is_zero;\n  bool negative_compare;\n  \n  if (((int)(second_param << 1) >> 0x15 == -1 || (int)(fourth_param << 1) >> 0x15 == -1) &&\n     ((((int)(second_param << 1) >> 0x15 == -1 && ((first_param | second_param << 0xc) != 0)) ||\n      (((int)(fourth_param << 1) >> 0x15 == -1 && ((third_param | fourth_param << 0xc) != 0)))))) {\n    return 1;\n  }\n  is_zero = (first_param | second_param << 1) == 0;\n  if (is_zero) {\n    is_zero = (third_param | fourth_param << 1) == 0;\n  }\n  if (!is_zero) {\n    is_zero = second_param == fourth_param;\n  }\n  if (is_zero) {\n    is_zero = first_param == third_param;\n  }\n  if (!is_zero) {\n    param_xor = second_param ^ fourth_param;\n    is_zero = param_xor == 0;\n    if (-1 < (int)param_xor) {\n      is_zero = second_param == fourth_param;\n    }\n    negative_compare = -1 < (int)param_xor && fourth_param <= second_param;\n    if (is_zero) {\n      negative_compare = third_param <= first_param;\n    }\n    fourth_param = (int)fourth_param >> 0x1f;\n    if (!negative_compare) {\n      fourth_param = ~fourth_param;\n    }\n    return fourth_param | 1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08008a74": "check_parameters_08008a74",
                "param_1": "first_param",
                "param_2": "second_param",
                "param_3": "third_param",
                "param_4": "fourth_param",
                "uVar1": "param_xor",
                "bVar2": "is_zero",
                "bVar3": "negative_compare"
            },
            "calling": [
                "FUN_08008b00"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008af0": {
            "entrypoint": "0x08008af0",
            "current_name": "validate_and_return_value_08008af0",
            "code": "\nvoid validate_and_return_value_08008af0(undefined4 input_1,undefined4 input_2,undefined4 input_3,undefined4 input_4)\n\n{\n  validate_and_return_value_08008af0_08008b00(input_3,input_4,input_1,input_2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008af0": "validate_and_return_value_08008af0",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4"
            },
            "calling": [
                "FUN_08008b60",
                "FUN_08008b4c"
            ],
            "called": [
                "FUN_08008b00"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008b00": {
            "entrypoint": "0x08008b00",
            "current_name": "validate_and_return_value_08008b00",
            "code": "\nundefined4 validate_and_return_value_08008b00(undefined4 value)\n\n{\n  validate_parameters();\n  return value;\n}\n\n",
            "renaming": {
                "FUN_08008b00": "validate_and_return_value_08008b00",
                "param_1": "value",
                "check_parameters_08008a74": "validate_parameters"
            },
            "calling": [
                "FUN_08008b24",
                "FUN_08008b10",
                "FUN_08008af0"
            ],
            "called": [
                "FUN_08008a74"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008b10": {
            "entrypoint": "0x08008b10",
            "current_name": "check_and_return_result_08008b10",
            "code": "\nbool checkAndReturnResult_08008b10(void)\n\n{\n  char inputChar;\n  \n  validate_and_return_value_08008b00();\n  return inputChar != '\\0';\n}\n\n",
            "renaming": {
                "FUN_08008b10": "check_and_return_result_08008b10",
                "in_ZR": "inputChar"
            },
            "calling": [
                "FUN_0800a5a0",
                "FUN_08009d78"
            ],
            "called": [
                "FUN_08008b00"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008b24": {
            "entrypoint": "0x08008b24",
            "current_name": "is_end_of_string_08008b24",
            "code": "\nbool is_end_of_string_08008b24(void)\n\n{\n  char character;\n  \n  validate_and_get_value();\n  return character == '\\0';\n}\n\n",
            "renaming": {
                "FUN_08008b24": "is_end_of_string_08008b24",
                "in_CY": "character",
                "validate_and_return_value_08008b00": "validate_and_get_value"
            },
            "calling": [
                "FUN_08003004",
                "FUN_08009b24",
                "FUN_080098d0"
            ],
            "called": [
                "FUN_08008b00"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008b4c": {
            "entrypoint": "0x08008b4c",
            "current_name": "validate_and_return_cy_zr_08008b4c",
            "code": "\nbool validate_and_return_CY_ZR_08008b4c(void)\n\n{\n  undefined is_ZR_set;\n  undefined is_CY_set;\n  \n  validate_and_return_value_08008af0();\n  return !(bool)is_CY_set || (bool)is_ZR_set;\n}\n\n",
            "renaming": {
                "FUN_08008b4c": "validate_and_return_cy_zr_08008b4c",
                "in_CY": "is_CY_set",
                "in_ZR": "is_ZR_set"
            },
            "calling": [
                "FUN_0800a5a0"
            ],
            "called": [
                "FUN_08008af0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008b60": {
            "entrypoint": "0x08008b60",
            "current_name": "check_if_string_empty_08008b60",
            "code": "\nbool checkIfStringEmpty_08008b60(void)\n\n{\n  char inputChar;\n  \n  validate_and_return_value_08008af0();\n  return inputChar == '\\0';\n}\n\n",
            "renaming": {
                "FUN_08008b60": "check_if_string_empty_08008b60",
                "in_CY": "inputChar"
            },
            "calling": [
                "FUN_080094c0",
                "FUN_08003004",
                "FUN_0800af78",
                "FUN_08009318"
            ],
            "called": [
                "FUN_08008af0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008b74": {
            "entrypoint": "0x08008b74",
            "current_name": "check_conditions_08008b74",
            "code": "\nundefined4 check_conditions_08008b74(uint input_1,int input_2,uint input_3,int input_4)\n\n{\n  if ((((input_2 << 1) >> 0x15 != -1) || ((input_1 | input_2 << 0xc) == 0)) &&\n     (((input_4 << 1) >> 0x15 != -1 || ((input_3 | input_4 << 0xc) == 0)))) {\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08008b74": "check_conditions_08008b74",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4"
            },
            "calling": [
                "FUN_080098d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008ba0": {
            "entrypoint": "0x08008ba0",
            "current_name": "calculate_value_08008ba0",
            "code": "\nuint calculateValue_08008ba0(uint inputValue1,uint inputValue2)\n\n{\n  uint shiftedValue;\n  int multipliedValue;\n  uint subtractValue;\n  \n  multipliedValue = inputValue2 * 2 + 0x200000;\n  if (inputValue2 * 2 < 0xffe00000) {\n    if (-1 < multipliedValue) {\n      return 0;\n    }\n    shiftedValue = multipliedValue >> 0x15;\n    subtractValue = -shiftedValue - 0x3e1;\n    if (shiftedValue < 0xfffffc20 && subtractValue != 0) {\n      shiftedValue = (inputValue2 << 0xb | 0x80000000 | inputValue1 >> 0x15) >> (subtractValue & 0xff);\n      if ((inputValue2 & 0x80000000) != 0) {\n        shiftedValue = -shiftedValue;\n      }\n      return shiftedValue;\n    }\n  }\n  else if ((inputValue1 | inputValue2 << 0xc) != 0) {\n    return 0;\n  }\n  inputValue2 = inputValue2 & 0x80000000;\n  if (inputValue2 == 0) {\n    inputValue2 = 0x7fffffff;\n  }\n  return inputValue2;\n}\n\n",
            "renaming": {
                "FUN_08008ba0": "calculate_value_08008ba0",
                "param_1": "inputValue1",
                "param_2": "inputValue2",
                "iVar2": "multipliedValue",
                "uVar1": "shiftedValue",
                "uVar3": "subtractValue"
            },
            "calling": [
                "FUN_080095b8",
                "FUN_08003004",
                "FUN_0800adf0",
                "FUN_080005b4",
                "FUN_08002c18",
                "FUN_0800a5a0",
                "FUN_08009d78",
                "FUN_0800a348"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008bf0": {
            "entrypoint": "0x08008bf0",
            "current_name": "calculate_shifted_value_08008bf0",
            "code": "\nuint calculateShiftedValue_08008bf0(uint input1,uint input2)\n\n{\n  int temp1;\n  uint temp2;\n  \n  if ((input2 & 0x80000000) != 0) {\n    return 0;\n  }\n  temp1 = input2 * 2 + 0x200000;\n  if (input2 * 2 < 0xffe00000) {\n    if (-1 < temp1) {\n      return 0;\n    }\n    temp2 = -(temp1 >> 0x15) - 0x3e1;\n    if (-1 < (int)temp2) {\n      return (input2 << 0xb | 0x80000000 | input1 >> 0x15) >> (temp2 & 0xff);\n    }\n  }\n  else if ((input1 | input2 << 0xc) != 0) {\n    return 0;\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_08008bf0": "calculate_shifted_value_08008bf0",
                "param_1": "input1",
                "param_2": "input2",
                "iVar1": "temp1",
                "uVar2": "temp2"
            },
            "calling": [
                "FUN_08003004",
                "FUN_08001f00",
                "FUN_08003b98",
                "FUN_08002408",
                "FUN_08001994",
                "FUN_080005b4",
                "FUN_08004e30",
                "FUN_08002c18"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008c30": {
            "entrypoint": "0x08008c30",
            "current_name": "convert_to_float_08008c30",
            "code": "\nuint convertToFloat_08008c30(uint inputNumber,uint signBit)\n\n{\n  uint result;\n  uint temp1;\n  uint temp2;\n  uint convertedValue;\n  bool isZero;\n  bool isLessThan70000000;\n  \n  temp1 = signBit * 2;\n  isLessThan70000000 = temp1 < 0x70000000;\n  temp2 = temp1 + 0x90000000;\n  result = temp2;\n  if (!isLessThan70000000) {\n    convertedValue = temp1 + 0x8fe00000;\n    result = convertedValue;\n  }\n  isZero = result == 0;\n  if (!isLessThan70000000 && temp2 >= 0x200000) {\n    isZero = convertedValue == 0x1fc00000;\n  }\n  if (((isLessThan70000000 || temp2 < 0x200000) || 0x1fc00000 < convertedValue) || isZero) {\n    if ((signBit & 0x40000000) != 0) {\n      if (((int)temp1 >> 0x15 == -1) && ((inputNumber | signBit << 0xc) != 0)) {\n        return 0x7fc00000;\n      }\n      return signBit & 0x80000000 | 0x7f800000;\n    }\n    if ((int)(temp1 + 0x92e00000) < 0 != SCARRY4(temp2,0x2e00000)) {\n      return signBit & 0x80000000;\n    }\n    temp1 = 0x18 - (temp1 + 0x92e00000 >> 0x15);\n    result = inputNumber >> (temp1 & 0xff);\n    if (inputNumber << (0x20 - temp1 & 0xff) != 0) {\n      result = result | 1;\n    }\n    temp2 = signBit & 0x1fffff | 0x100000;\n    inputNumber = result | temp2 << (0x20 - temp1 & 0xff);\n    temp2 = (temp2 >> (temp1 & 0xff)) << 1;\n  }\n  result = (signBit & 0x80000000 | inputNumber >> 0x1d) + temp2 * 4 + (uint)(0x7fffffff < inputNumber * 8);\n  if (inputNumber * 8 == 0x80000000) {\n    result = result & 0xfffffffe;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08008c30": "convert_to_float_08008c30",
                "param_1": "inputNumber",
                "param_2": "signBit",
                "in_r12": "convertedValue",
                "uVar1": "result",
                "uVar2": "temp1",
                "uVar3": "temp2",
                "bVar4": "isZero",
                "bVar5": "isLessThan70000000"
            },
            "calling": [
                "FUN_08002638",
                "FUN_080044e8",
                "FUN_080046d0",
                "FUN_08003004",
                "FUN_08001f00",
                "FUN_08002978",
                "FUN_08001994",
                "FUN_080005b4",
                "FUN_08004940",
                "FUN_0800056c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008cd8": {
            "entrypoint": "0x08008cd8",
            "current_name": "calculate_floating_point_08008cd8",
            "code": "\nuint calculateFloatingPoint_08008cd8(uint input,uint mask,undefined4 undefined,uint result)\n\n{\n  int leftShiftedInput;\n  int leftShiftedMask;\n  uint flippedMask;\n  uint flippedInput;\n  uint inputLeftShifted;\n  uint output;\n  uint difference;\n  bool isSpecialCase;\n  \n  flippedMask = mask ^ 0x80000000;\n  inputLeftShifted = input << 1;\n  isSpecialCase = inputLeftShifted == 0;\n  if (!isSpecialCase) {\n    result = mask << 1;\n    isSpecialCase = result == 0;\n  }\n  if (!isSpecialCase) {\n    isSpecialCase = inputLeftShifted == result;\n  }\n  leftShiftedInput = (int)inputLeftShifted >> 0x18;\n  if (!isSpecialCase) {\n    isSpecialCase = leftShiftedInput == -1;\n  }\n  if (!isSpecialCase) {\n    isSpecialCase = (int)result >> 0x18 == -1;\n  }\n  if (isSpecialCase) {\n    leftShiftedMask = (int)(mask << 1) >> 0x18;\n    if (leftShiftedInput == -1 || leftShiftedMask == -1) {\n      inputLeftShifted = flippedMask;\n      if (leftShiftedInput == -1) {\n        inputLeftShifted = input;\n      }\n      if (leftShiftedInput != -1 || leftShiftedMask != -1) {\n        flippedMask = inputLeftShifted;\n      }\n      isSpecialCase = (inputLeftShifted & 0x7fffff) == 0;\n      if (isSpecialCase) {\n        isSpecialCase = (flippedMask & 0x7fffff) == 0;\n      }\n      if (isSpecialCase) {\n        isSpecialCase = inputLeftShifted == flippedMask;\n      }\n      if (!isSpecialCase) {\n        inputLeftShifted = inputLeftShifted | 0x400000;\n      }\n      return inputLeftShifted;\n    }\n    if (((input ^ flippedMask) & 0x7fffffff) != 0) {\n      if (inputLeftShifted == 0) {\n        input = flippedMask;\n      }\n      return input;\n    }\n    if (input != flippedMask) {\n      return 0;\n    }\n    if ((inputLeftShifted & 0xff000000) == 0) {\n      flippedMask = input << 1;\n      if ((input & 0x80000000) != 0) {\n        flippedMask = flippedMask | 0x80000000;\n      }\n      return flippedMask;\n    }\n    if (inputLeftShifted < 0xfe000000) {\n      return input + 0x800000;\n    }\n    input = input & 0x80000000;\nLAB_08008e12:\n    return input | 0x7f800000;\n  }\n  inputLeftShifted = inputLeftShifted >> 0x18;\n  result = result >> 0x18;\n  difference = result - inputLeftShifted;\n  isSpecialCase = difference != 0;\n  output = inputLeftShifted;\n  if (isSpecialCase && inputLeftShifted <= result) {\n    output = inputLeftShifted + difference;\n  }\n  if (isSpecialCase && inputLeftShifted <= result) {\n    flippedMask = flippedMask ^ input;\n  }\n  if (isSpecialCase && inputLeftShifted <= result) {\n    input = input ^ flippedMask;\n  }\n  if (isSpecialCase && inputLeftShifted <= result) {\n    flippedMask = flippedMask ^ input;\n  }\n  if (result < inputLeftShifted) {\n    difference = -difference;\n  }\n  if (0x19 < difference) {\n    return input;\n  }\n  inputLeftShifted = input & 0xffffff | 0x800000;\n  if ((input & 0x80000000) != 0) {\n    inputLeftShifted = -inputLeftShifted;\n  }\n  flippedInput = flippedMask & 0xffffff | 0x800000;\n  if ((flippedMask & 0x80000000) != 0) {\n    flippedInput = -flippedInput;\n  }\n  if (output == difference) {\n    flippedInput = flippedInput ^ 0x800000;\n    if (output == 0) {\n      inputLeftShifted = inputLeftShifted ^ 0x800000;\n      output = 1;\n    }\n    else {\n      difference = difference - 1;\n    }\n  }\n  inputLeftShifted = inputLeftShifted + ((int)flippedInput >> (difference & 0xff));\n  flippedInput = flippedInput << (0x20 - difference & 0xff);\n  input = inputLeftShifted & 0x80000000;\n  if ((int)inputLeftShifted < 0) {\n    isSpecialCase = flippedInput != 0;\n    flippedInput = -flippedInput;\n    inputLeftShifted = -inputLeftShifted - (uint)isSpecialCase;\n  }\n  if (inputLeftShifted < 0x800000) {\n    flippedMask = flippedInput & 0x80000000;\n    flippedInput = flippedInput << 1;\n    inputLeftShifted = inputLeftShifted * 2 + (uint)(flippedMask != 0);\n    flippedMask = output - 2;\n    if (output - 1 == 0 || inputLeftShifted < 0x800000) {\n      difference = LZCOUNT(inputLeftShifted) - 8;\n      inputLeftShifted = inputLeftShifted << (difference & 0xff);\n      if ((int)flippedMask < (int)difference) {\n        inputLeftShifted = inputLeftShifted >> (-(flippedMask - difference) & 0xff);\n      }\n      else {\n        inputLeftShifted = inputLeftShifted + (flippedMask - difference) * 0x800000;\n      }\n      return inputLeftShifted | input;\n    }\n  }\n  else {\n    flippedMask = output - 1;\n    if (0xffffff < inputLeftShifted) {\n      flippedMask = inputLeftShifted & 1;\n      inputLeftShifted = inputLeftShifted >> 1;\n      flippedInput = (uint)(flippedMask != 0) << 0x1f | flippedInput >> 1;\n      flippedMask = output;\n      if (0xfd < output) goto LAB_08008e12;\n    }\n  }\n  inputLeftShifted = inputLeftShifted + flippedMask * 0x800000 + (uint)(0x7fffffff < flippedInput);\n  if (flippedInput == 0x80000000) {\n    inputLeftShifted = inputLeftShifted & 0xfffffffe;\n  }\n  return inputLeftShifted | input;\n}\n\n",
            "renaming": {
                "FUN_08008cd8": "calculate_floating_point_08008cd8",
                "param_1": "input",
                "param_2": "mask",
                "param_3": "undefined",
                "param_4": "result",
                "iVar1": "leftShiftedInput",
                "iVar2": "leftShiftedMask",
                "uVar3": "flippedMask",
                "uVar4": "flippedInput",
                "uVar5": "inputLeftShifted",
                "uVar6": "output",
                "uVar7": "difference",
                "bVar8": "isSpecialCase"
            },
            "calling": [
                "FUN_08003004",
                "FUN_08001f00",
                "FUN_08002978",
                "FUN_08002408",
                "FUN_080005b4",
                "FUN_08004940",
                "FUN_080028bc",
                "FUN_08002908"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008cdc": {
            "entrypoint": "0x08008cdc",
            "current_name": "calculate_floating_point_08008cdc",
            "code": "\nuint calculateFloatingPoint_08008cdc(uint input1,uint input2,undefined4 threshold,uint result)\n\n{\n  int shiftedInput1;\n  int shiftedInput2;\n  uint mantissa1;\n  uint mantissa2;\n  uint shiftValue;\n  uint difference;\n  bool isZero;\n  \n  mantissa2 = input1 << 1;\n  isZero = mantissa2 == 0;\n  if (!isZero) {\n    result = input2 << 1;\n    isZero = result == 0;\n  }\n  if (!isZero) {\n    isZero = mantissa2 == result;\n  }\n  shiftedInput1 = (int)mantissa2 >> 0x18;\n  if (!isZero) {\n    isZero = shiftedInput1 == -1;\n  }\n  if (!isZero) {\n    isZero = (int)result >> 0x18 == -1;\n  }\n  if (isZero) {\n    shiftedInput2 = (int)(input2 << 1) >> 0x18;\n    if (shiftedInput1 == -1 || shiftedInput2 == -1) {\n      mantissa2 = input2;\n      if (shiftedInput1 == -1) {\n        mantissa2 = input1;\n      }\n      if (shiftedInput1 != -1 || shiftedInput2 != -1) {\n        input2 = mantissa2;\n      }\n      isZero = (mantissa2 & 0x7fffff) == 0;\n      if (isZero) {\n        isZero = (input2 & 0x7fffff) == 0;\n      }\n      if (isZero) {\n        isZero = mantissa2 == input2;\n      }\n      if (!isZero) {\n        mantissa2 = mantissa2 | 0x400000;\n      }\n      return mantissa2;\n    }\n    if (((input1 ^ input2) & 0x7fffffff) != 0) {\n      if (mantissa2 == 0) {\n        input1 = input2;\n      }\n      return input1;\n    }\n    if (input1 != input2) {\n      return 0;\n    }\n    if ((mantissa2 & 0xff000000) == 0) {\n      mantissa2 = input1 << 1;\n      if ((input1 & 0x80000000) != 0) {\n        mantissa2 = mantissa2 | 0x80000000;\n      }\n      return mantissa2;\n    }\n    if (mantissa2 < 0xfe000000) {\n      return input1 + 0x800000;\n    }\n    input1 = input1 & 0x80000000;\nLAB_08008e12:\n    return input1 | 0x7f800000;\n  }\n  mantissa2 = mantissa2 >> 0x18;\n  result = result >> 0x18;\n  difference = result - mantissa2;\n  isZero = difference != 0;\n  shiftValue = mantissa2;\n  if (isZero && mantissa2 <= result) {\n    shiftValue = mantissa2 + difference;\n  }\n  if (isZero && mantissa2 <= result) {\n    input2 = input2 ^ input1;\n  }\n  if (isZero && mantissa2 <= result) {\n    input1 = input1 ^ input2;\n  }\n  if (isZero && mantissa2 <= result) {\n    input2 = input2 ^ input1;\n  }\n  if (result < mantissa2) {\n    difference = -difference;\n  }\n  if (0x19 < difference) {\n    return input1;\n  }\n  mantissa2 = input1 & 0xffffff | 0x800000;\n  if ((input1 & 0x80000000) != 0) {\n    mantissa2 = -mantissa2;\n  }\n  mantissa1 = input2 & 0xffffff | 0x800000;\n  if ((input2 & 0x80000000) != 0) {\n    mantissa1 = -mantissa1;\n  }\n  if (shiftValue == difference) {\n    mantissa1 = mantissa1 ^ 0x800000;\n    if (shiftValue == 0) {\n      mantissa2 = mantissa2 ^ 0x800000;\n      shiftValue = 1;\n    }\n    else {\n      difference = difference - 1;\n    }\n  }\n  mantissa2 = mantissa2 + ((int)mantissa1 >> (difference & 0xff));\n  mantissa1 = mantissa1 << (0x20 - difference & 0xff);\n  input1 = mantissa2 & 0x80000000;\n  if ((int)mantissa2 < 0) {\n    isZero = mantissa1 != 0;\n    mantissa1 = -mantissa1;\n    mantissa2 = -mantissa2 - (uint)isZero;\n  }\n  if (mantissa2 < 0x800000) {\n    difference = mantissa1 & 0x80000000;\n    mantissa1 = mantissa1 << 1;\n    mantissa2 = mantissa2 * 2 + (uint)(difference != 0);\n    difference = shiftValue - 2;\n    if (shiftValue - 1 == 0 || mantissa2 < 0x800000) {\n      shiftValue = LZCOUNT(mantissa2) - 8;\n      mantissa2 = mantissa2 << (shiftValue & 0xff);\n      if ((int)difference < (int)shiftValue) {\n        mantissa2 = mantissa2 >> (-(difference - shiftValue) & 0xff);\n      }\n      else {\n        mantissa2 = mantissa2 + (difference - shiftValue) * 0x800000;\n      }\n      return mantissa2 | input1;\n    }\n  }\n  else {\n    difference = shiftValue - 1;\n    if (0xffffff < mantissa2) {\n      difference = mantissa2 & 1;\n      mantissa2 = mantissa2 >> 1;\n      mantissa1 = (uint)(difference != 0) << 0x1f | mantissa1 >> 1;\n      difference = shiftValue;\n      if (0xfd < shiftValue) goto LAB_08008e12;\n    }\n  }\n  mantissa2 = mantissa2 + difference * 0x800000 + (uint)(0x7fffffff < mantissa1);\n  if (mantissa1 == 0x80000000) {\n    mantissa2 = mantissa2 & 0xfffffffe;\n  }\n  return mantissa2 | input1;\n}\n\n",
            "renaming": {
                "FUN_08008cdc": "calculate_floating_point_08008cdc",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "threshold",
                "param_4": "result",
                "iVar1": "shiftedInput1",
                "iVar2": "shiftedInput2",
                "uVar3": "mantissa1",
                "uVar4": "mantissa2",
                "uVar5": "shiftValue",
                "uVar6": "difference",
                "bVar7": "isZero"
            },
            "calling": [
                "FUN_08003004",
                "FUN_08001f00",
                "FUN_08002978",
                "FUN_080005b4",
                "FUN_08004940",
                "FUN_080028bc",
                "FUN_08003826",
                "FUN_08002908"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008e3c": {
            "entrypoint": "0x08008e3c",
            "current_name": "reverse_bits_08008e3c",
            "code": "\nuint reverseBits_08008e3c(uint input)\n\n{\n  uint leadingZeros;\n  uint shiftCount;\n  int constant;\n  uint mask;\n  \n  if (input == 0) {\n    return 0;\n  }\n  leadingZeros = LZCOUNT(input);\n  shiftCount = leadingZeros - 8;\n  constant = shiftCount * -0x800000 + 0x4a800000;\n  if (7 < leadingZeros) {\n    mask = 0 << (shiftCount & 0xff);\n    leadingZeros = constant + (input << (shiftCount & 0xff)) +\n            (0U >> (0x20 - shiftCount & 0xff)) + (uint)(0x7fffffff < mask);\n    if (mask == 0x80000000) {\n      leadingZeros = leadingZeros & 0xfffffffe;\n    }\n    return leadingZeros;\n  }\n  shiftCount = input << leadingZeros + 0x18;\n  leadingZeros = constant + ((input >> (0x20 - (leadingZeros + 0x18) & 0xff)) - ((int)shiftCount >> 0x1f));\n  if ((shiftCount & 0x7fffffff) == 0) {\n    leadingZeros = leadingZeros & ~(shiftCount >> 0x1f);\n  }\n  return leadingZeros;\n}\n\n",
            "renaming": {
                "FUN_08008e3c": "reverse_bits_08008e3c",
                "param_1": "input",
                "uVar1": "leadingZeros",
                "uVar2": "shiftCount",
                "iVar3": "constant",
                "uVar4": "mask"
            },
            "calling": [
                "FUN_08002638",
                "FUN_08002c18"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008e44": {
            "entrypoint": "0x08008e44",
            "current_name": "calculate_signed_magnitude_08008e44",
            "code": "\nuint calculateSignedMagnitude_08008e44(uint input)\n\n{\n  uint leadingZerosCount;\n  uint shiftAmount;\n  uint signBit;\n  int result;\n  \n  signBit = input & 0x80000000;\n  if ((int)signBit < 0) {\n    input = -input;\n  }\n  if (input == 0) {\n    return 0;\n  }\n  leadingZerosCount = countLeadingZeros(input);\n  shiftAmount = leadingZerosCount - 8;\n  result = ((signBit | 0x4b000000) - 0x800000) + shiftAmount * -0x800000;\n  if (7 < leadingZerosCount) {\n    leadingZerosCount = 0 << (shiftAmount & 0xff);\n    signBit = result + (input << (shiftAmount & 0xff)) +\n            (0U >> (0x20 - shiftAmount & 0xff)) + (uint)(0x7fffffff < leadingZerosCount);\n    if (leadingZerosCount == 0x80000000) {\n      signBit = signBit & 0xfffffffe;\n    }\n    return signBit;\n  }\n  shiftAmount = input << leadingZerosCount + 0x18;\n  signBit = result + ((input >> (0x20 - (leadingZerosCount + 0x18) & 0xff)) - ((int)shiftAmount >> 0x1f));\n  if ((shiftAmount & 0x7fffffff) == 0) {\n    signBit = signBit & ~(shiftAmount >> 0x1f);\n  }\n  return signBit;\n}\n\n",
            "renaming": {
                "FUN_08008e44": "calculate_signed_magnitude_08008e44",
                "param_1": "input",
                "uVar1": "leadingZerosCount",
                "uVar2": "shiftAmount",
                "uVar3": "signBit",
                "iVar4": "result",
                "LZCOUNT": "countLeadingZeros"
            },
            "calling": [
                "FUN_08003004",
                "FUN_08001f00",
                "FUN_08002408",
                "FUN_080004fc",
                "FUN_08004940",
                "FUN_08002c18",
                "FUN_080024c4",
                "FUN_08003618"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008eec": {
            "entrypoint": "0x08008eec",
            "current_name": "calculate_floating_point_08008eec",
            "code": "\nuint calculateFloatingPoint_08008eec(uint input1,uint input2,undefined4 param3,uint param4)\n\n{\n  longlong product;\n  uint result;\n  uint exponent1;\n  int sumOfExponents;\n  int adjustedSum;\n  uint lowerBitsProduct;\n  int adjustedExponent;\n  uint adjustedResult;\n  bool isZero;\n  bool isNegative;\n  \n  exponent1 = input1 >> 0x17 & 0xff;\n  isZero = exponent1 == 0;\n  if (!isZero) {\n    param4 = input2 >> 0x17 & 0xff;\n    isZero = param4 == 0;\n  }\n  if (!isZero) {\n    isZero = exponent1 == 0xff;\n  }\n  if (!isZero) {\n    isZero = param4 == 0xff;\n  }\n  if (isZero) {\n    param4 = input2 >> 0x17 & 0xff;\n    if (exponent1 == 0xff || param4 == 0xff) {\n      isZero = input1 == 0 || input1 == 0x80000000;\n      result = input2;\n      if (input1 != 0 && input1 != 0x80000000) {\n        isZero = input2 == 0;\n        result = input1;\n      }\n      if (!isZero) {\n        isZero = input2 == 0x80000000;\n      }\n      adjustedResult = result;\n      if (((isZero) || ((exponent1 == 0xff && ((result & 0x7fffff) != 0)))) ||\n         ((param4 == 0xff && (adjustedResult = input2, (input2 & 0x7fffff) != 0)))) {\n        return adjustedResult | 0x7fc00000;\n      }\n      result = result ^ input2;\n      goto LAB_0800903c;\n    }\n    isZero = (input1 & 0x7fffffff) == 0;\n    if (!isZero) {\n      isZero = (input2 & 0x7fffffff) == 0;\n    }\n    if (isZero) {\n      return (input1 ^ input2) & 0x80000000;\n    }\n    isZero = exponent1 == 0;\n    result = input1 & 0x80000000;\n    while( true ) {\n      if (isZero) {\n        input1 = input1 << 1;\n        isZero = (input1 & 0x800000) == 0;\n      }\n      if (!isZero) break;\n      exponent1 = exponent1 - 1;\n    }\n    input1 = input1 | result;\n    isZero = param4 == 0;\n    result = input2 & 0x80000000;\n    while( true ) {\n      if (isZero) {\n        input2 = input2 << 1;\n        isZero = (input2 & 0x800000) == 0;\n      }\n      if (!isZero) break;\n      param4 = param4 - 1;\n    }\n    input2 = input2 | result;\n  }\n  sumOfExponents = exponent1 + param4;\n  adjustedResult = input1 ^ input2;\n  exponent1 = input1 << 9;\n  isZero = exponent1 == 0;\n  if (!isZero) {\n    input2 = input2 << 9;\n    isZero = input2 == 0;\n  }\n  if (isZero) {\n    if (exponent1 == 0) {\n      input2 = input2 << 9;\n    }\n    result = adjustedResult & 0x80000000 | input1 & 0x7fffff | input2 >> 9;\n    isNegative = SBORROW4(sumOfExponents,0x7f);\n    adjustedSum = sumOfExponents + -0x7f;\n    isZero = adjustedSum == 0;\n    adjustedExponent = adjustedSum;\n    if (!isZero && 0x7e < sumOfExponents) {\n      isNegative = SBORROW4(0xff,adjustedSum);\n      adjustedExponent = 0xff - adjustedSum;\n      isZero = adjustedSum == 0xff;\n    }\n    if (!isZero && adjustedExponent < 0 == isNegative) {\n      result = result | adjustedSum * 0x800000;\n    }\n    if (!isZero && adjustedExponent < 0 == isNegative) {\n      return result;\n    }\n    result = result | 0x800000;\n    lowerBitsProduct = 0;\n    isNegative = SBORROW4(adjustedSum,1);\n    adjustedResult = sumOfExponents - 0x80;\n    isZero = adjustedResult == 0;\n    exponent1 = adjustedResult;\n  }\n  else {\n    product = (ulonglong)(exponent1 >> 5 | 0x8000000) * (ulonglong)(input2 >> 5 | 0x8000000);\n    lowerBitsProduct = (uint)product;\n    result = (uint)((ulonglong)product >> 0x20);\n    isZero = result < 0x800000;\n    if (isZero) {\n      result = result << 1;\n    }\n    if (isZero) {\n      result = result | lowerBitsProduct >> 0x1f;\n      lowerBitsProduct = lowerBitsProduct << 1;\n    }\n    result = adjustedResult & 0x80000000 | result;\n    adjustedResult = (sumOfExponents + -0x7f) - (uint)isZero;\n    isNegative = SBORROW4(adjustedResult,0xfd);\n    isZero = adjustedResult == 0xfd;\n    exponent1 = adjustedResult - 0xfd;\n    if (adjustedResult < 0xfe) {\n      result = result + adjustedResult * 0x800000 + (uint)(0x7fffffff < lowerBitsProduct);\n      if (lowerBitsProduct == 0x80000000) {\n        result = result & 0xfffffffe;\n      }\n      return result;\n    }\n  }\n  if (isZero || (int)exponent1 < 0 != isNegative) {\n    isZero = (int)(adjustedResult + 0x19) < 0;\n    if (adjustedResult == 0xffffffe7 || isZero != SCARRY4(adjustedResult,0x19)) {\n      result = result & 0x80000000;\n    }\n    if (adjustedResult != 0xffffffe7 && isZero == SCARRY4(adjustedResult,0x19)) {\n      exponent1 = (result << 1) >> (-adjustedResult & 0xff);\n      adjustedResult = result << (adjustedResult + 0x20 & 0xff);\n      exponent1 = ((uint)((result & 0x80000000) != 0) << 0x1f | exponent1 >> 1) + (uint)((byte)exponent1 & 1);\n      if ((lowerBitsProduct | adjustedResult << 1) == 0) {\n        exponent1 = exponent1 & ~(adjustedResult >> 0x1f);\n      }\n      return exponent1;\n    }\n    return result;\n  }\nLAB_0800903c:\n  return result & 0x80000000 | 0x7f800000;\n}\n\n",
            "renaming": {
                "FUN_08008eec": "calculate_floating_point_08008eec",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "param3",
                "param_4": "param4",
                "lVar1": "product",
                "uVar2": "result",
                "uVar3": "exponent1",
                "iVar4": "sumOfExponents",
                "iVar5": "adjustedSum",
                "uVar6": "lowerBitsProduct",
                "iVar7": "adjustedExponent",
                "uVar8": "adjustedResult",
                "bVar9": "isZero",
                "bVar10": "isNegative"
            },
            "calling": [
                "FUN_08002638",
                "FUN_08003004",
                "FUN_08001f00",
                "FUN_08002978",
                "FUN_08004e30",
                "FUN_080024c4",
                "FUN_08003826",
                "FUN_08002408",
                "FUN_08001994",
                "FUN_080005b4",
                "FUN_08002c18",
                "FUN_080028bc",
                "FUN_08003618",
                "FUN_08002908"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009054": {
            "entrypoint": "0x08009054",
            "current_name": "calculate_float_08009054",
            "code": "\nuint calculateFloat_08009054(uint float_a,uint float_b,undefined4 parameter_3,uint float_c)\n\n{\n  uint temp1;\n  uint temp2;\n  int difference;\n  uint temp3;\n  int temp4;\n  uint result;\n  bool isZero;\n  bool isCarry;\n  bool isBorrow;\n  \n  temp2 = float_a >> 0x17 & 0xff;\n  isZero = temp2 == 0;\n  if (!isZero) {\n    float_c = float_b >> 0x17 & 0xff;\n    isZero = float_c == 0;\n  }\n  if (!isZero) {\n    isZero = temp2 == 0xff;\n  }\n  if (!isZero) {\n    isZero = float_c == 0xff;\n  }\n  if (isZero) {\n    float_c = float_b >> 0x17 & 0xff;\n    result = float_a;\n    if (temp2 == 0xff) {\n      if (((float_a & 0x7fffff) != 0) || (result = float_b, float_c == 0xff)) {\nLAB_0800904a:\n        return result | 0x7fc00000;\n      }\n    }\n    else {\n      if (float_c == 0xff) {\n        result = float_b;\n        if ((float_b & 0x7fffff) == 0) {\nLAB_08009000:\n          return (float_a ^ float_b) & 0x80000000;\n        }\n        goto LAB_0800904a;\n      }\n      isZero = (float_a & 0x7fffffff) == 0;\n      if (!isZero) {\n        isZero = (float_b & 0x7fffffff) == 0;\n      }\n      if (!isZero) {\n        isZero = temp2 == 0;\n        result = float_a & 0x80000000;\n        while( true ) {\n          if (isZero) {\n            float_a = float_a << 1;\n            isZero = (float_a & 0x800000) == 0;\n          }\n          if (!isZero) break;\n          temp2 = temp2 - 1;\n        }\n        float_a = float_a | result;\n        isZero = float_c == 0;\n        result = float_b & 0x80000000;\n        while( true ) {\n          if (isZero) {\n            float_b = float_b << 1;\n            isZero = (float_b & 0x800000) == 0;\n          }\n          if (!isZero) break;\n          float_c = float_c - 1;\n        }\n        float_b = float_b | result;\n        goto LAB_0800906c;\n      }\n      if ((float_a & 0x7fffffff) == 0) {\n        if ((float_b & 0x7fffffff) != 0) goto LAB_08009000;\n        goto LAB_0800904a;\n      }\n    }\n    float_a = float_a ^ float_b;\n  }\n  else {\nLAB_0800906c:\n    difference = temp2 - float_c;\n    if (float_b << 9 == 0) {\n      float_a = (float_a ^ float_b) & 0x80000000 | float_a & 0x7fffff;\n      isBorrow = SCARRY4(difference,0x7f);\n      temp4 = difference + 0x7f;\n      isZero = temp4 < 0;\n      isCarry = temp4 == 0;\n      if (!isCarry && isZero == isBorrow) {\n        isBorrow = SBORROW4(0xff,temp4);\n        isZero = 0xff - temp4 < 0;\n        isCarry = temp4 == 0xff;\n      }\n      if (!isCarry && isZero == isBorrow) {\n        float_a = float_a | temp4 * 0x800000;\n      }\n      if (!isCarry && isZero == isBorrow) {\n        return float_a;\n      }\n      float_a = float_a | 0x800000;\n      temp2 = 0;\n      isCarry = SBORROW4(temp4,1);\n      temp3 = difference + 0x7e;\n      isZero = temp3 == 0;\n      result = temp3;\n    }\n    else {\n      temp1 = (float_b << 9) >> 4 | 0x10000000;\n      temp2 = (float_a << 9) >> 4 | 0x10000000;\n      float_a = (float_a ^ float_b) & 0x80000000;\n      isZero = temp1 <= temp2;\n      if (!isZero) {\n        temp2 = temp2 << 1;\n      }\n      temp3 = difference + 0x7d + (uint)isZero;\n      result = 0x800000;\n      do {\n        if (temp1 <= temp2) {\n          temp2 = temp2 - temp1;\n          float_a = float_a | result;\n        }\n        isZero = temp1 >> 1 <= temp2;\n        if (isZero) {\n          temp2 = temp2 - (temp1 >> 1);\n        }\n        if (isZero) {\n          float_a = float_a | result >> 1;\n        }\n        isZero = temp1 >> 2 <= temp2;\n        if (isZero) {\n          temp2 = temp2 - (temp1 >> 2);\n        }\n        if (isZero) {\n          float_a = float_a | result >> 2;\n        }\n        isZero = temp1 >> 3 <= temp2;\n        if (isZero) {\n          temp2 = temp2 - (temp1 >> 3);\n        }\n        if (isZero) {\n          float_a = float_a | result >> 3;\n        }\n        temp2 = temp2 * 0x10;\n        isZero = temp2 == 0;\n        if (!isZero) {\n          result = result >> 4;\n          isZero = result == 0;\n        }\n      } while (!isZero);\n      isCarry = SBORROW4(temp3,0xfd);\n      isZero = temp3 == 0xfd;\n      result = temp3 - 0xfd;\n      if (temp3 < 0xfe) {\n        float_a = float_a + temp3 * 0x800000 + (uint)(temp1 <= temp2);\n        if (temp2 - temp1 == 0) {\n          float_a = float_a & 0xfffffffe;\n        }\n        return float_a;\n      }\n    }\n    if (isZero || (int)result < 0 != isCarry) {\n      isZero = (int)(temp3 + 0x19) < 0;\n      if (temp3 == 0xffffffe7 || isZero != SCARRY4(temp3,0x19)) {\n        float_a = float_a & 0x80000000;\n      }\n      if (temp3 == 0xffffffe7 || isZero != SCARRY4(temp3,0x19)) {\n        return float_a;\n      }\n      result = (float_a << 1) >> (-temp3 & 0xff);\n      temp3 = float_a << (temp3 + 0x20 & 0xff);\n      result = ((uint)((float_a & 0x80000000) != 0) << 0x1f | result >> 1) + (uint)((byte)result & 1);\n      if ((temp2 | temp3 << 1) == 0) {\n        result = result & ~(temp3 >> 0x1f);\n      }\n      return result;\n    }\n  }\n  return float_a & 0x80000000 | 0x7f800000;\n}\n\n",
            "renaming": {
                "FUN_08009054": "calculate_float_08009054",
                "param_1": "float_a",
                "param_2": "float_b",
                "param_3": "parameter_3",
                "param_4": "float_c",
                "uVar1": "temp1",
                "uVar2": "temp2",
                "iVar3": "difference",
                "uVar4": "temp3",
                "iVar5": "temp4",
                "uVar6": "result",
                "bVar7": "isZero",
                "bVar8": "isCarry",
                "bVar9": "isBorrow"
            },
            "calling": [
                "FUN_08003004",
                "FUN_08001f00",
                "FUN_080004fc",
                "FUN_08004250",
                "FUN_08002e08",
                "FUN_08001994",
                "FUN_08004940",
                "FUN_080028bc",
                "FUN_08003618",
                "FUN_08002908"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800919c": {
            "entrypoint": "0x0800919c",
            "current_name": "multiply_and_check_0800919c",
            "code": "\nuint multiplyAndCheck_0800919c(uint input1,uint input2)\n\n{\n  bool isNegative;\n  uint doubleInput1;\n  uint doubleInput2;\n  uint maskedOrValue;\n  bool isZero;\n  \n  doubleInput1 = input1 * 2;\n  doubleInput2 = input2 * 2;\n  if (((int)doubleInput1 >> 0x18 == -1 || (int)doubleInput2 >> 0x18 == -1) &&\n     ((((int)doubleInput1 >> 0x18 == -1 && ((input1 & 0x7fffff) != 0)) ||\n      (((int)doubleInput2 >> 0x18 == -1 && ((input2 & 0x7fffff) != 0)))))) {\n    result 1;\n  }\n  maskedOrValue = doubleInput1 | input2 & 0x7fffffff;\n  isZero = maskedOrValue == 0;\n  if (!isZero) {\n    maskedOrValue = input1 ^ input2;\n    isZero = maskedOrValue == 0;\n  }\n  isNegative = -1 < (int)maskedOrValue;\n  if (isNegative) {\n    input1 = doubleInput1 + input2 * -2;\n    isZero = input1 == 0;\n  }\n  if ((isNegative && doubleInput2 <= doubleInput1) && !isZero) {\n    input1 = (int)input2 >> 0x1f;\n  }\n  if (!isNegative || doubleInput2 > doubleInput1) {\n    input1 = ~((int)input2 >> 0x1f);\n  }\n  if (!isZero) {\n    input1 = input1 | 1;\n  }\n  result input1;\n}\n\n",
            "renaming": {
                "FUN_0800919c": "multiply_and_check_0800919c",
                "param_1": "input1",
                "param_2": "input2",
                "bVar1": "isNegative",
                "uVar2": "doubleInput1",
                "uVar3": "doubleInput2",
                "uVar4": "maskedOrValue",
                "bVar5": "isZero",
                "return": "result"
            },
            "calling": [
                "FUN_08009204"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080091fc": {
            "entrypoint": "0x080091fc",
            "current_name": "concatenate_and_return_080091fc",
            "code": "\nvoid concatenateAndReturn_080091fc(undefined4 input1,undefined4 input2)\n\n{\n  concatenate_and_return_08009204(input2,input1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080091fc": "concatenate_and_return_080091fc",
                "param_1": "input1",
                "param_2": "input2"
            },
            "calling": [
                "FUN_08009264",
                "FUN_08009250"
            ],
            "called": [
                "FUN_08009204"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009204": {
            "entrypoint": "0x08009204",
            "current_name": "concatenate_and_return_08009204",
            "code": "\nundefined8 concatenate_and_return_08009204(undefined4 input_1,undefined4 input_2)\n\n{\n  multiply_and_check_0800919c();\n  return CONCAT44(input_2,input_1);\n}\n\n",
            "renaming": {
                "FUN_08009204": "concatenate_and_return_08009204",
                "param_1": "input_1",
                "param_2": "input_2"
            },
            "calling": [
                "FUN_080091fc",
                "FUN_08009214",
                "FUN_08009228",
                "FUN_0800923c"
            ],
            "called": [
                "FUN_0800919c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009214": {
            "entrypoint": "0x08009214",
            "current_name": "is_string_concatenated_08009214",
            "code": "\nbool is_string_concatenated_08009214(void)\n\n{\n  char result;\n  \n  concatenate_and_return_08009204();\n  return result != '\\0';\n}\n\n",
            "renaming": {
                "FUN_08009214": "is_string_concatenated_08009214",
                "in_ZR": "result"
            },
            "calling": [
                "FUN_08002638",
                "FUN_08001f00",
                "FUN_080029d8",
                "FUN_080005b4",
                "FUN_08002afc",
                "FUN_08004e30"
            ],
            "called": [
                "FUN_08009204"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009228": {
            "entrypoint": "0x08009228",
            "current_name": "check_null_termination_08009228",
            "code": "\nbool check_null_termination_08009228(void)\n\n{\n  char input_character;\n  \n  concatenate_and_return_08009204();\n  return input_character == '\\0';\n}\n\n",
            "renaming": {
                "FUN_08009228": "check_null_termination_08009228",
                "in_CY": "input_character"
            },
            "calling": [
                "FUN_08003004",
                "FUN_080029d8",
                "FUN_080005b4",
                "FUN_08002afc",
                "FUN_08004e30",
                "FUN_08003826"
            ],
            "called": [
                "FUN_08009204"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800923c": {
            "entrypoint": "0x0800923c",
            "current_name": "concatenate_and_return_or_0800923c",
            "code": "\nbool concatenate_and_return_or_0800923c(void)\n\n{\n  undefined is_zero;\n  undefined is_carry;\n  \n  concatenate_and_return_08009204();\n  return !(bool)is_carry || (bool)is_zero;\n}\n\n",
            "renaming": {
                "FUN_0800923c": "concatenate_and_return_or_0800923c",
                "in_ZR": "is_zero",
                "in_CY": "is_carry"
            },
            "calling": [
                "FUN_08001f00",
                "FUN_080005b4",
                "FUN_08004e30"
            ],
            "called": [
                "FUN_08009204"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009250": {
            "entrypoint": "0x08009250",
            "current_name": "check_concatenation_result_08009250",
            "code": "\nbool checkConcatenationResult_08009250(void)\n\n{\n  undefined zeroFlag;\n  undefined carryFlag;\n  \n  concatenate_and_return_080091fc();\n  return !(bool)carryFlag || (bool)zeroFlag;\n}\n\n",
            "renaming": {
                "FUN_08009250": "check_concatenation_result_08009250",
                "in_ZR": "zeroFlag",
                "in_CY": "carryFlag"
            },
            "calling": [
                "FUN_08003004",
                "FUN_08001f00"
            ],
            "called": [
                "FUN_080091fc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009264": {
            "entrypoint": "0x08009264",
            "current_name": "check_if_string_is_empty_08009264",
            "code": "\nbool check_if_string_is_empty_08009264(void)\n\n{\n  char input_character;\n  \n  concatenate_and_return_080091fc();\n  return input_character == '\\0';\n}\n\n",
            "renaming": {
                "FUN_08009264": "check_if_string_is_empty_08009264",
                "in_CY": "input_character"
            },
            "calling": [
                "FUN_08003004",
                "FUN_080029d8"
            ],
            "called": [
                "FUN_080091fc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009278": {
            "entrypoint": "0x08009278",
            "current_name": "convert_value_08009278",
            "code": "\nuint convertValue_08009278(uint value)\n\n{\n  uint shiftedValue;\n  uint shiftAmount;\n  \n  if (value << 1 < 0x7f000000) {\n    return 0;\n  }\n  shiftedValue = (value << 1) >> 0x18;\n  shiftAmount = 0x9e - shiftedValue;\n  if (shiftedValue < 0x9f && shiftAmount != 0) {\n    shiftedValue = (value << 8 | 0x80000000) >> (shiftAmount & 0xff);\n    if ((value & 0x80000000) != 0) {\n      shiftedValue = -shiftedValue;\n    }\n    return shiftedValue;\n  }\n  if ((shiftAmount == 0xffffff9f) && ((value & 0x7fffff) != 0)) {\n    return 0;\n  }\n  value = value & 0x80000000;\n  if (value == 0) {\n    value = 0x7fffffff;\n  }\n  return value;\n}\n\n",
            "renaming": {
                "FUN_08009278": "convert_value_08009278",
                "param_1": "value",
                "uVar1": "shiftedValue",
                "uVar2": "shiftAmount"
            },
            "calling": [
                "FUN_08003b98",
                "FUN_08003826"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "entry": {
            "entrypoint": "0x080092c4",
            "current_name": "entry",
            "code": "\n/* WARNING: This function may have set the stack pointer */\n\nvoid entry(void)\n\n{\n  int iVar1;\n  undefined4 *puVar2;\n  code *UNRECOVERED_JUMPTABLE;\n  \n  for (iVar1 = 0; (undefined4 *)(iVar1 + 0x20000000) < &DAT_2000044c; iVar1 = iVar1 + 4) {\n    *(undefined4 *)(iVar1 + 0x20000000) = *(undefined4 *)(iVar1 + 0x800c0c0);\n  }\n  for (puVar2 = &DAT_2000044c; puVar2 < &DAT_20000f20; puVar2 = puVar2 + 1) {\n    *puVar2 = 0;\n  }\n  initialize_memory_0800756c();\n  execute_code_blocks_0800b3e8();\n  UNRECOVERED_JUMPTABLE = (code *)0x80092fa;\n  initialize_system_08007540();\n                    /* WARNING: Could not recover jumptable at 0x080092fa. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*UNRECOVERED_JUMPTABLE)();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [],
            "called": [
                "FUN_0800756c",
                "FUN_08007540",
                "FUN_0800b3e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009318": {
            "entrypoint": "0x08009318",
            "current_name": "calculate_value_08009318",
            "code": "\nlonglong calculate_value_08009318(uint input1,uint input2,undefined4 param3,undefined4 param4)\n\n{\n  int result;\n  uint shiftedBits;\n  uint mask;\n  bool carry;\n  undefined8 calculatedValue;\n  longlong output;\n  \n  mask = (input2 << 1) >> 0x15;\n  shiftedBits = mask - 0x3ff;\n  if ((int)shiftedBits < 0x14) {\n    if ((int)shiftedBits < 0) {\n      calculatedValue = calculate_result_080082d4(input1,input2,0x8800759c,0x7e37e43c,param4);\n      result = check_if_string_empty_08008b60((int)calculatedValue,(int)((ulonglong)calculatedValue >> 0x20),0,0);\n      output = CONCAT44(input2,input1);\n      if (result != 0) {\n        if ((int)input2 < 0) {\n          output = -0x8000000000000000;\n        }\n        else if ((input1 | input2) == 0) {\n          output = 0;\n        }\n        else {\n          output = 0x3ff0000000000000;\n        }\n      }\n    }\n    else {\n      mask = 0xfffff >> (shiftedBits & 0xff);\n      output = CONCAT44(input2,input1);\n      if ((input2 & mask | input1) != 0) {\n        calculatedValue = calculate_result_080082d4(input1,input2,0x8800759c,0x7e37e43c,param4);\n        result = check_if_string_empty_08008b60((int)calculatedValue,(int)((ulonglong)calculatedValue >> 0x20),0,0);\n        output = CONCAT44(input2,input1);\n        if (result != 0) {\n          if (0 < (int)input2) {\n            input2 = input2 + (0x100000 >> (shiftedBits & 0xff));\n          }\n          output = (ulonglong)(input2 & ~mask) << 0x20;\n        }\n      }\n    }\n  }\n  else if ((int)shiftedBits < 0x34) {\n    mask = 0xffffffff >> (mask - 0x413 & 0xff);\n    output = CONCAT44(input2,input1);\n    if ((mask & input1) != 0) {\n      calculatedValue = calculate_result_080082d4(input1,input2,0x8800759c,0x7e37e43c,param4);\n      result = check_if_string_empty_08008b60((int)calculatedValue,(int)((ulonglong)calculatedValue >> 0x20),0,0);\n      output = CONCAT44(input2,input1);\n      if (result != 0) {\n        if (0 < (int)input2) {\n          if (shiftedBits == 0x14) {\n            input2 = input2 + 1;\n          }\n          else {\n            shiftedBits = 1 << (0x34 - shiftedBits & 0xff);\n            carry = CARRY4(shiftedBits,input1);\n            input1 = shiftedBits + input1;\n            if (carry != false) {\n              input2 = input2 + 1;\n            }\n          }\n        }\n        output = CONCAT44(input2,input1 & ~mask);\n      }\n    }\n  }\n  else {\n    output = CONCAT44(input2,input1);\n    if (shiftedBits == 0x400) {\n      output = calculate_result_080082d4();\n    }\n  }\n  return output;\n}\n\n",
            "renaming": {
                "FUN_08009318": "calculate_value_08009318",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "param3",
                "param_4": "param4",
                "iVar1": "result",
                "uVar2": "shiftedBits",
                "uVar3": "mask",
                "bVar4": "carry",
                "uVar5": "calculatedValue",
                "lVar6": "output"
            },
            "calling": [
                "FUN_08003004",
                "FUN_08001994",
                "FUN_08002c18"
            ],
            "called": [
                "FUN_080082d4",
                "FUN_08008b60"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009410": {
            "entrypoint": "0x08009410",
            "current_name": "calculate_result_08009410",
            "code": "\nundefined4 calculateResult_08009410(undefined4 input1,uint input2)\n\n{\n  undefined4 result;\n  uint resultType;\n  undefined4 var1;\n  undefined4 var2;\n  undefined4 var3;\n  undefined4 var4;\n  \n  if (0x3fe921fb < (input2 & 0x7fffffff)) {\n    if ((input2 & 0x7fffffff) < 0x7ff00000) {\n      resultType = calculate_result_08009d78(input1,input2,&var1);\n      resultType = resultType & 3;\n      if (resultType == 1) {\n        result = calculate_0800adf0(var1,var2,var3,var4,1);\n      }\n      else if (resultType == 2) {\n        result = calculate_improved_value_0800a348(var1,var2,var3,var4);\n      }\n      else if (resultType == 0) {\n        result = calculate_improved_value_0800a348(var1,var2,var3,var4);\n      }\n      else {\n        result = calculate_0800adf0(var1,var2,var3,var4,1);\n      }\n    }\n    else {\n      result = reverse_binary_calculation_080082d0(input1,input2,input1,input2);\n    }\n    return result;\n  }\n  result = calculate_improved_value_0800a348(input1,input2,0,0);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08009410": "calculate_result_08009410",
                "param_1": "input1",
                "param_2": "input2",
                "uVar1": "result",
                "uVar2": "resultType",
                "local_28": "var1",
                "uStack_24": "var2",
                "local_20": "var3",
                "uStack_1c": "var4"
            },
            "calling": [
                "FUN_08001f00"
            ],
            "called": [
                "FUN_0800adf0",
                "FUN_08009d78",
                "FUN_0800a348",
                "FUN_080082d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080094c0": {
            "entrypoint": "0x080094c0",
            "current_name": "calculate_result_080094c0",
            "code": "\nlonglong calculate_result_080094c0(uint input_param1,uint input_param2,undefined4 input_param3,undefined4 input_param4)\n\n{\n  int is_string_empty;\n  uint shift_count;\n  uint mask_value;\n  bool carry_flag;\n  undefined8 result;\n  longlong output_value;\n  \n  mask_value = (input_param2 << 1) >> 0x15;\n  shift_count = mask_value - 0x3ff;\n  if ((int)shift_count < 0x14) {\n    if ((int)shift_count < 0) {\n      result = calculate_result_080094c0_080082d4(input_param1,input_param2,0x8800759c,0x7e37e43c,input_param4);\n      is_string_empty = check_if_string_empty_08008b60((int)result,(int)((ulonglong)result >> 0x20),0,0);\n      output_value = CONCAT44(input_param2,input_param1);\n      if (is_string_empty != 0) {\n        if ((int)input_param2 < 0) {\n          if ((input_param1 | input_param2 & 0x7fffffff) != 0) {\n            input_param2 = 0xbff00000;\n          }\n          output_value = (ulonglong)input_param2 << 0x20;\n        }\n        else {\n          output_value = 0;\n        }\n      }\n    }\n    else {\n      mask_value = 0xfffff >> (shift_count & 0xff);\n      output_value = CONCAT44(input_param2,input_param1);\n      if ((input_param2 & mask_value | input_param1) != 0) {\n        result = calculate_result_080094c0_080082d4(input_param1,input_param2,0x8800759c,0x7e37e43c,input_param4);\n        is_string_empty = check_if_string_empty_08008b60((int)result,(int)((ulonglong)result >> 0x20),0,0);\n        output_value = CONCAT44(input_param2,input_param1);\n        if (is_string_empty != 0) {\n          if ((int)input_param2 < 0) {\n            input_param2 = input_param2 + (0x100000 >> (shift_count & 0xff));\n          }\n          output_value = (ulonglong)(input_param2 & ~mask_value) << 0x20;\n        }\n      }\n    }\n  }\n  else if ((int)shift_count < 0x34) {\n    mask_value = 0xffffffff >> (mask_value - 0x413 & 0xff);\n    output_value = CONCAT44(input_param2,input_param1);\n    if ((mask_value & input_param1) != 0) {\n      result = calculate_result_080094c0_080082d4(input_param1,input_param2,0x8800759c,0x7e37e43c,input_param4);\n      is_string_empty = check_if_string_empty_08008b60((int)result,(int)((ulonglong)result >> 0x20),0,0);\n      output_value = CONCAT44(input_param2,input_param1);\n      if (is_string_empty != 0) {\n        if ((int)input_param2 < 0) {\n          if (shift_count == 0x14) {\n            input_param2 = input_param2 + 1;\n          }\n          else {\n            shift_count = 1 << (0x34 - shift_count & 0xff);\n            carry_flag = CARRY4(shift_count,input_param1);\n            input_param1 = shift_count + input_param1;\n            if (carry_flag != false) {\n              input_param2 = input_param2 + 1;\n            }\n          }\n        }\n        output_value = CONCAT44(input_param2,input_param1 & ~mask_value);\n      }\n    }\n  }\n  else {\n    output_value = CONCAT44(input_param2,input_param1);\n    if (shift_count == 0x400) {\n      output_value = calculate_result_080094c0_080082d4();\n    }\n  }\n  return output_value;\n}\n\n",
            "renaming": {
                "FUN_080094c0": "calculate_result_080094c0",
                "param_1": "input_param1",
                "param_2": "input_param2",
                "param_3": "input_param3",
                "param_4": "input_param4",
                "iVar1": "is_string_empty",
                "uVar2": "shift_count",
                "uVar3": "mask_value",
                "bVar4": "carry_flag",
                "uVar5": "result",
                "lVar6": "output_value"
            },
            "calling": [
                "FUN_08001f00",
                "FUN_08002408",
                "FUN_08002c18",
                "FUN_0800a5a0"
            ],
            "called": [
                "FUN_08008b60",
                "FUN_080082d4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080095b8": {
            "entrypoint": "0x080095b8",
            "current_name": "calculate_result_080095b8",
            "code": "\nint calculate_result_080095b8(uint input_1,uint input_2)\n\n{\n  uint bit_shifted_value;\n  uint shifted_input;\n  uint updated_value;\n  int result;\n  uint shift_difference;\n  \n  shifted_input = (input_2 << 1) >> 0x15;\n  shift_difference = shifted_input - 0x3ff;\n  if ((int)input_2 < 0) {\n    result = -1;\n  }\n  else {\n    result = 1;\n  }\n  updated_value = input_2 & 0xfffff | 0x100000;\n  if ((int)shift_difference < 0x14) {\n    if ((int)shift_difference < 0) {\n      if (shift_difference != 0xffffffff) {\n        result = 0;\n      }\n      return result;\n    }\n    updated_value = updated_value + (0x80000 >> (shift_difference & 0xff)) >> (0x14 - shift_difference & 0xff);\n  }\n  else {\n    if (0x1e < shift_difference) {\n      result = calculate_value_08008ba0();\n      return result;\n    }\n    if ((int)shift_difference < 0x34) {\n      bit_shifted_value = 0x80000000 >> (shifted_input - 0x413 & 0xff);\n      if (CARRY4(bit_shifted_value,input_1) != false) {\n        updated_value = updated_value + 1;\n      }\n      updated_value = updated_value << (shifted_input - 0x413 & 0xff);\n      if (shift_difference != 0x14) {\n        updated_value = updated_value | bit_shifted_value + input_1 >> (0x34 - shift_difference & 0xff);\n      }\n    }\n    else {\n      updated_value = updated_value << (shifted_input - 0x413 & 0xff) | input_1 << (shifted_input - 0x433 & 0xff);\n    }\n  }\n  return updated_value * result;\n}\n\n",
            "renaming": {
                "FUN_080095b8": "calculate_result_080095b8",
                "param_1": "input_1",
                "param_2": "input_2",
                "uVar1": "bit_shifted_value",
                "uVar2": "shifted_input",
                "uVar3": "updated_value",
                "iVar4": "result",
                "uVar5": "shift_difference"
            },
            "calling": [
                "FUN_08003004",
                "FUN_08001994"
            ],
            "called": [
                "FUN_08008ba0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009654": {
            "entrypoint": "0x08009654",
            "current_name": "convert_to64_bit_float_08009654",
            "code": "\nlonglong convertTo64BitFloat_08009654(uint input1,uint input2)\n\n{\n  uint exponentDiff;\n  uint shiftedExponent;\n  longlong result;\n  \n  result = CONCAT44(input2,input1);\n  shiftedExponent = (input2 << 1) >> 0x15;\n  exponentDiff = shiftedExponent - 0x3ff;\n  if ((int)exponentDiff < 0x14) {\n    if ((int)exponentDiff < 0) {\n      input2 = input2 & 0x80000000;\n      if (exponentDiff == 0xffffffff) {\n        input2 = input2 | 0x3ff00000;\n      }\n      result = (ulonglong)input2 << 0x20;\n    }\n    else {\n      shiftedExponent = 0xfffff >> (exponentDiff & 0xff);\n      result = CONCAT44(input2,input1);\n      if ((input2 & shiftedExponent | input1) != 0) {\n        result = (ulonglong)(input2 + (0x80000 >> (exponentDiff & 0xff)) & ~shiftedExponent) << 0x20;\n      }\n    }\n  }\n  else if ((int)exponentDiff < 0x34) {\n    shiftedExponent = 0xffffffff >> (shiftedExponent - 0x413 & 0xff);\n    if ((input1 & shiftedExponent) != 0) {\n      exponentDiff = 1 << (0x33 - exponentDiff & 0xff);\n      if (hasCarry(input1,exponentDiff) != false) {\n        input2 = input2 + 1;\n      }\n      result = CONCAT44(input2,input1 + exponentDiff & ~shiftedExponent);\n    }\n  }\n  else {\n    result = CONCAT44(input2,input1);\n    if (exponentDiff == 0x400) {\n      result = calculateSpecialCase();\n    }\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08009654": "convert_to64_bit_float_08009654",
                "param_1": "input1",
                "param_2": "input2",
                "uVar1": "exponentDiff",
                "uVar2": "shiftedExponent",
                "lVar3": "result",
                "CARRY4": "hasCarry",
                "calculate_result_080082d4": "calculateSpecialCase"
            },
            "calling": [
                "FUN_08004e30"
            ],
            "called": [
                "FUN_080082d4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080096e8": {
            "entrypoint": "0x080096e8",
            "current_name": "calculate_result_080096e8",
            "code": "\nundefined4 calculate_result_080096e8(undefined4 input_param,uint input_value)\n\n{\n  undefined4 result;\n  uint calculation_type;\n  undefined4 first_result;\n  undefined4 second_result;\n  undefined4 third_result;\n  undefined4 fourth_result;\n  \n  if (0x3fe921fb < (input_value & 0x7fffffff)) {\n    if ((input_value & 0x7fffffff) < 0x7ff00000) {\n      calculation_type = calculate_result_080096e8_08009d78(input_param,input_value,&first_result);\n      calculation_type = calculation_type & 3;\n      if (calculation_type == 1) {\n        result = calculate_improved_value_0800a348(first_result,second_result,third_result,fourth_result);\n      }\n      else if (calculation_type == 2) {\n        result = calculate_0800adf0(first_result,second_result,third_result,fourth_result,1);\n      }\n      else if (calculation_type == 0) {\n        result = calculate_0800adf0(first_result,second_result,third_result,fourth_result,1);\n      }\n      else {\n        result = calculate_improved_value_0800a348(first_result,second_result,third_result,fourth_result);\n      }\n    }\n    else {\n      result = reverse_binary_calculation_080082d0(input_param,input_value,input_param,input_value);\n    }\n    return result;\n  }\n  result = calculate_0800adf0(input_param,input_value,0,0,0);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080096e8": "calculate_result_080096e8",
                "param_1": "input_param",
                "param_2": "input_value",
                "uVar1": "result",
                "uVar2": "calculation_type",
                "local_28": "first_result",
                "uStack_24": "second_result",
                "local_20": "third_result",
                "uStack_1c": "fourth_result"
            },
            "calling": [
                "FUN_08001f00"
            ],
            "called": [
                "FUN_0800adf0",
                "FUN_08009d78",
                "FUN_0800a348",
                "FUN_080082d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009798": {
            "entrypoint": "0x08009798",
            "current_name": "extract_bits_08009798",
            "code": "\nlonglong extract_bits_08009798(uint input1,uint input2,undefined4 unused_param1,undefined4 unused_param2)\n\n{\n  uint shifted_bits;\n  uint shifted_value;\n  longlong result;\n  \n  shifted_value = (input2 << 1) >> 0x15;\n  shifted_bits = shifted_value - 0x3ff;\n  if ((int)shifted_bits < 0x14) {\n    if ((int)shifted_bits < 0) {\n      return ((ulonglong)input2 & 0x80000000) << 0x20;\n    }\n    result = (ulonglong)(input2 & ~(0xfffff >> (shifted_bits & 0xff))) << 0x20;\n  }\n  else {\n    if ((int)shifted_bits < 0x34) {\n      return CONCAT44(input2,input1 & ~(0xffffffffU >> (shifted_value - 0x413 & 0xff)));\n    }\n    if (shifted_bits != 0x400) {\n      return CONCAT44(input2,input1);\n    }\n    result = calculate_result_080082d4(input1,input2,input1,input2,unused_param2);\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08009798": "extract_bits_08009798",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "unused_param1",
                "param_4": "unused_param2",
                "uVar1": "shifted_bits",
                "uVar2": "shifted_value",
                "lVar3": "result"
            },
            "calling": [
                "FUN_08003b98",
                "FUN_080005b4",
                "FUN_08004e30"
            ],
            "called": [
                "FUN_080082d4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "thunk_FUN_08009990": {
            "entrypoint": "0x08009818",
            "current_name": "calculate_float_result_thunk_08009990",
            "code": "\nuint calculate_float_result_thunk_08009990(uint input_1,uint input_2,uint input_3,uint input_4)\n\n{\n  int temp_var_1;\n  undefined4 temp_var_2;\n  uint temp_var_3;\n  uint temp_var_4;\n  uint temp_var_5;\n  undefined8 temp_var_6;\n  \n  temp_var_4 = input_4 & 0x7fffffff;\n  if (((temp_var_4 | (-input_3 | input_3) >> 0x1f) < 0x7ff00001) &&\n     (temp_var_5 = input_2 & 0x7fffffff, (temp_var_5 | (-input_1 | input_1) >> 0x1f) < 0x7ff00001)) {\n    if ((input_4 + 0xc0100000 | input_3) == 0) {\n      temp_var_4 = calculate_result_0800af78();\n      return temp_var_4;\n    }\n    temp_var_3 = (int)input_4 >> 0x1e & 2U | input_2 >> 0x1f;\n    if ((temp_var_5 | input_1) == 0) {\n      if (temp_var_3 == 2) {\n        input_1 = 0x54442d18;\n      }\n      else if (temp_var_3 == 3) {\n        input_1 = 0x54442d18;\n      }\n    }\n    else {\n      if ((temp_var_4 | input_3) != 0) {\n        if (temp_var_4 == 0x7ff00000) {\n          temp_var_3 = temp_var_3 - 1;\n          if (temp_var_5 == 0x7ff00000) {\n            if (temp_var_3 < 3) {\n              return *(uint *)(&DAT_0800be68 + temp_var_3 * 8);\n            }\n            return 0x54442d18;\n          }\n          if (temp_var_3 < 3) {\n            return *(uint *)(&DAT_0800be80 + temp_var_3 * 8);\n          }\n          return 0;\n        }\n        if (temp_var_5 != 0x7ff00000) {\n          temp_var_1 = (int)(temp_var_5 - temp_var_4) >> 0x14;\n          if ((int)(temp_var_5 - temp_var_4) < 0x3d00000) {\n            if (((int)input_4 < 0) && (temp_var_1 + 0x3c < 0 != SCARRY4(temp_var_1,0x3c))) {\n              temp_var_6 = 0;\n            }\n            else {\n              decode_float_08008894(input_1,input_2,input_3,input_4,input_4);\n              FUNC_0800b2cc();\n              temp_var_6 = calculate_result_0800af78();\n            }\n          }\n          else {\n            temp_var_6 = 0x3ff921fb54442d18;\n          }\n          temp_var_2 = (undefined4)((ulonglong)temp_var_6 >> 0x20);\n          temp_var_4 = (uint)temp_var_6;\n          if (temp_var_3 == 1) {\n            return temp_var_4;\n          }\n          if (temp_var_3 == 2) {\n            temp_var_6 = reverse_binary_calculation_080082d0(temp_var_4,temp_var_2,0x33145c07,0x3ca1a626);\n            temp_var_4 = reverse_binary_calculation_080082d0(0x54442d18,0x400921fb,(int)temp_var_6,(int)((ulonglong)temp_var_6 >> 0x20));\n            return temp_var_4;\n          }\n          if (temp_var_3 == 0) {\n            return temp_var_4;\n          }\n          temp_var_6 = reverse_binary_calculation_080082d0(temp_var_4,temp_var_2,0x33145c07,0x3ca1a626);\n          temp_var_4 = reverse_binary_calculation_080082d0((int)temp_var_6,(int)((ulonglong)temp_var_6 >> 0x20),0x54442d18,0x400921fb);\n          return temp_var_4;\n        }\n      }\n      if ((int)input_2 < 0) {\n        input_1 = 0x54442d18;\n      }\n      else {\n        input_1 = 0x54442d18;\n      }\n    }\n  }\n  else {\n    input_1 = calculate_result_080082d4(input_3,input_4,input_1,input_2);\n  }\n  return input_1;\n}\n\n",
            "renaming": {
                "thunk_FUN_08009990": "calculate_float_result_thunk_08009990",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "iVar1": "temp_var_1",
                "uVar2": "temp_var_2",
                "uVar3": "temp_var_3",
                "uVar4": "temp_var_4",
                "uVar5": "temp_var_5",
                "uVar6": "temp_var_6"
            },
            "calling": [
                "FUN_08001f00"
            ],
            "called": [
                "FUN_08009990"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800981c": {
            "entrypoint": "0x0800981c",
            "current_name": "calculate_hypotenuse_0800981c",
            "code": "\nundefined8 calculate_hypotenuse_0800981c(undefined4 side_length_1,undefined4 side_length_2,undefined4 side_length_3,undefined4 side_length_4)\n\n{\n  int result;\n  undefined4 *global_data_ptr;\n  int *global_data_int_ptr;\n  undefined8 calculated_value;\n  undefined4 calculation_type;\n  char *calculation_name;\n  undefined4 param_1_copy;\n  undefined4 param_2_copy;\n  undefined4 param_3_copy;\n  undefined4 param_4_copy;\n  undefined4 min_limit;\n  undefined4 max_limit;\n  int extension_result;\n  \n  calculated_value = calculate_result_08009b24();\n  if (DAT_20000014 == -1) {\n    return calculated_value;\n  }\n  extension_result = sign_extension_0800b2d4();\n  if (extension_result != 0) {\n    return calculated_value;\n  }\n  result = sign_extension_0800b2d4(side_length_1,side_length_2);\n  if (result == 0) {\n    return calculated_value;\n  }\n  result = sign_extension_0800b2d4(side_length_3,side_length_4);\n  if (result == 0) {\n    return calculated_value;\n  }\n  calculation_type = 3;\n  calculation_name = \"hypot\";\n  param_1_copy = side_length_1;\n  param_2_copy = side_length_2;\n  param_3_copy = side_length_3;\n  param_4_copy = side_length_4;\n  if (DAT_20000014 == '\\0') {\n    min_limit = 0xe0000000;\n    max_limit = 0x47efffff;\nLAB_080098aa:\n    result = initialize_0800b2e0(&calculation_type);\n    if (result != 0) goto LAB_08009896;\n  }\n  else {\n    min_limit = 0;\n    max_limit = 0x7ff00000;\n    if (DAT_20000014 != '\\x02') goto LAB_080098aa;\n  }\n  global_data_ptr = (undefined4 *)get_global_data_0800b3dc();\n  *global_data_ptr = 0x22;\nLAB_08009896:\n  calculated_value = CONCAT44(max_limit,min_limit);\n  if (extension_result != 0) {\n    global_data_int_ptr = (int *)get_global_data_0800b3dc();\n    calculated_value = CONCAT44(max_limit,min_limit);\n    *global_data_int_ptr = extension_result;\n  }\n  return calculated_value;\n}\n\n",
            "renaming": {
                "FUN_0800981c": "calculate_hypotenuse_0800981c",
                "param_1": "side_length_1",
                "param_2": "side_length_2",
                "param_3": "side_length_3",
                "param_4": "side_length_4",
                "iVar1": "result",
                "puVar2": "global_data_ptr",
                "piVar3": "global_data_int_ptr",
                "uVar4": "calculated_value",
                "local_50": "calculation_type",
                "pcStack_4c": "calculation_name",
                "local_48": "param_1_copy",
                "uStack_44": "param_2_copy",
                "local_40": "param_3_copy",
                "uStack_3c": "param_4_copy",
                "local_38": "min_limit",
                "uStack_34": "max_limit",
                "local_30": "extension_result"
            },
            "calling": [
                "FUN_08001f00",
                "FUN_080005b4"
            ],
            "called": [
                "FUN_08009b24",
                "FUN_0800b3dc",
                "FUN_0800b2d4",
                "FUN_0800b2e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080098d0": {
            "entrypoint": "0x080098d0",
            "current_name": "process_data_080098d0",
            "code": "\nundefined4 process_data_080098d0(undefined4 input_param1,undefined4 input_param2)\n\n{\n  char condition;\n  undefined4 result;\n  int condition_result;\n  undefined4 *global_data_ptr;\n  int *global_data_int_ptr;\n  undefined4 flag;\n  undefined *message;\n  undefined4 input_param1_copy;\n  undefined4 input_param2_copy;\n  undefined4 input_param1_copy_2;\n  undefined4 input_param2_copy_2;\n  undefined8 float_value;\n  int string_end_result;\n  \n  result = calculate_0800a1bc();\n  condition = DAT_20000014;\n  if (((DAT_20000014 == -1) ||\n      (string_end_result = check_conditions_08008b74(input_param1,input_param2,input_param1,input_param2), string_end_result != 0)) ||\n     (condition_result = is_end_of_string_08008b24(input_param1,input_param2,0,0), condition_result == 0)) {\n    return result;\n  }\n  flag = 1;\n  message = &DAT_0800be5c;\n  input_param1_copy = input_param1;\n  input_param2_copy = input_param2;\n  input_param1_copy_2 = input_param1;\n  input_param2_copy_2 = input_param2;\n  if (condition == '\\0') {\n    float_value = 0;\nLAB_0800996c:\n    condition_result = initialize_0800b2e0(&flag);\n    if (condition_result != 0) goto joined_r0x0800997a;\n  }\n  else {\n    float_value = decode_float_08008894(0,0,0,0);\n    if (condition != '\\x02') goto LAB_0800996c;\n  }\n  global_data_ptr = (undefined4 *)get_global_data_0800b3dc();\n  *global_data_ptr = 0x21;\njoined_r0x0800997a:\n  if (string_end_result != 0) {\n    global_data_int_ptr = (int *)get_global_data_0800b3dc();\n    *global_data_int_ptr = string_end_result;\n  }\n  return (undefined4)float_value;\n}\n\n",
            "renaming": {
                "FUN_080098d0": "process_data_080098d0",
                "param_1": "input_param1",
                "param_2": "input_param2",
                "uVar2": "result",
                "iVar3": "condition_result",
                "puVar4": "global_data_ptr",
                "piVar5": "global_data_int_ptr",
                "local_50": "flag",
                "local_4c": "message",
                "local_48": "input_param1_copy",
                "uStack_44": "input_param2_copy",
                "local_40": "input_param1_copy_2",
                "uStack_3c": "input_param2_copy_2",
                "local_38": "float_value",
                "local_30": "string_end_result",
                "cVar1": "condition"
            },
            "calling": [
                "FUN_08003004",
                "FUN_08002978",
                "FUN_08001994",
                "FUN_080005b4"
            ],
            "called": [
                "FUN_08008b24",
                "FUN_0800b3dc",
                "FUN_08008b74",
                "FUN_08008894",
                "FUN_0800b2e0",
                "FUN_0800a1bc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009990": {
            "entrypoint": "0x08009990",
            "current_name": "calculate_result_08009990",
            "code": "\nuint calculate_result_08009990(uint input_1,uint input_2,uint input_3,uint input_4)\n\n{\n  int difference;\n  undefined4 result_high;\n  uint flag;\n  uint mod_input_4;\n  uint mod_input_2;\n  undefined8 result;\n  \n  mod_input_4 = input_4 & 0x7fffffff;\n  if (((mod_input_4 | (-input_3 | input_3) >> 0x1f) < 0x7ff00001) &&\n     (mod_input_2 = input_2 & 0x7fffffff, (mod_input_2 | (-input_1 | input_1) >> 0x1f) < 0x7ff00001)) {\n    if ((input_4 + 0xc0100000 | input_3) == 0) {\n      mod_input_4 = calculate_result_08009990();\n      return mod_input_4;\n    }\n    flag = (int)input_4 >> 0x1e & 2U | input_2 >> 0x1f;\n    if ((mod_input_2 | input_1) == 0) {\n      if (flag == 2) {\n        input_1 = 0x54442d18;\n      }\n      else if (flag == 3) {\n        input_1 = 0x54442d18;\n      }\n    }\n    else {\n      if ((mod_input_4 | input_3) != 0) {\n        if (mod_input_4 == 0x7ff00000) {\n          flag = flag - 1;\n          if (mod_input_2 == 0x7ff00000) {\n            if (flag < 3) {\n              return *(uint *)(&DAT_0800be68 + flag * 8);\n            }\n            return 0x54442d18;\n          }\n          if (flag < 3) {\n            return *(uint *)(&DAT_0800be80 + flag * 8);\n          }\n          return 0;\n        }\n        if (mod_input_2 != 0x7ff00000) {\n          difference = (int)(mod_input_2 - mod_input_4) >> 0x14;\n          if ((int)(mod_input_2 - mod_input_4) < 0x3d00000) {\n            if (((int)input_4 < 0) && (difference + 0x3c < 0 != SCARRY4(difference,0x3c))) {\n              result = 0;\n            }\n            else {\n              decode_float(input_1,input_2,input_3,input_4,input_4);\n              FUNC_0800b2cc();\n              result = calculate_result_08009990();\n            }\n          }\n          else {\n            result = 0x3ff921fb54442d18;\n          }\n          result_high = (undefined4)((ulonglong)result >> 0x20);\n          mod_input_4 = (uint)result;\n          if (flag == 1) {\n            return mod_input_4;\n          }\n          if (flag == 2) {\n            result = reverse_binary_calculation(mod_input_4,result_high,0x33145c07,0x3ca1a626);\n            mod_input_4 = reverse_binary_calculation(0x54442d18,0x400921fb,(int)result,(int)((ulonglong)result >> 0x20));\n            return mod_input_4;\n          }\n          if (flag == 0) {\n            return mod_input_4;\n          }\n          result = reverse_binary_calculation(mod_input_4,result_high,0x33145c07,0x3ca1a626);\n          mod_input_4 = reverse_binary_calculation((int)result,(int)((ulonglong)result >> 0x20),0x54442d18,0x400921fb);\n          return mod_input_4;\n        }\n      }\n      if ((int)input_2 < 0) {\n        input_1 = 0x54442d18;\n      }\n      else {\n        input_1 = 0x54442d18;\n      }\n    }\n  }\n  else {\n    input_1 = calculate_result_08009990(input_3,input_4,input_1,input_2);\n  }\n  return input_1;\n}\n\n",
            "renaming": {
                "FUN_08009990": "calculate_result_08009990",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "uVar4": "mod_input_4",
                "uVar3": "flag",
                "uVar5": "mod_input_2",
                "uVar6": "result",
                "iVar1": "difference",
                "uVar2": "result_high",
                "decode_float_08008894": "decode_float",
                "calculate_result_0800af78": "calculate_result",
                "reverse_binary_calculation_080082d0": "reverse_binary_calculation",
                "calculate_result_080082d4": "calculate_result"
            },
            "calling": [
                "thunk_FUN_08009990"
            ],
            "called": [
                "FUN_080082d4",
                "FUN_0800af78",
                "FUN_0800b2cc",
                "FUN_08008894",
                "FUN_080082d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009b24": {
            "entrypoint": "0x08009b24",
            "current_name": "calculate_result_08009b24",
            "code": "\nuint calculate_result_08009b24(uint input_1,uint input_2,uint input_3,uint input_4)\n\n{\n  undefined4 result1;\n  int result2;\n  uint result3;\n  int result4;\n  undefined4 result5;\n  int result6;\n  uint result7;\n  undefined4 result8;\n  undefined4 result9;\n  undefined8 result10;\n  undefined8 result11;\n  undefined8 result12;\n  undefined8 result13;\n  int local_var;\n  \n  input_2 = input_2 & 0x7fffffff;\n  input_4 = input_4 & 0x7fffffff;\n  result3 = input_1;\n  result7 = input_2;\n  if (input_2 < input_4) {\n    result3 = input_3;\n    input_3 = input_1;\n    result7 = input_4;\n    input_4 = input_2;\n  }\n  if (0x3c00000 < (int)(result7 - input_4)) {\n    result3 = calculate_result_08009b24_080082d4(result3,result7,input_3,input_4);\n    return result3;\n  }\n  if (result7 < 0x5f300001) {\n    local_var = 0;\n  }\n  else {\n    if (0x7fefffff < result7) {\n      if ((result7 & 0xfffff | result3) != 0) {\n        result3 = calculate_result_08009b24_080082d4(result3,result7,input_3,input_4);\n      }\n      if ((input_4 ^ 0x7ff00000 | input_3) != 0) {\n        return result3;\n      }\n      return input_3;\n    }\n    result7 = result7 + 0xda800000;\n    input_4 = input_4 + 0xda800000;\n    local_var = 600;\n  }\n  result11 = CONCAT44(result7,result3);\n  result10 = CONCAT44(input_4,input_3);\n  if ((int)input_4 < 0x20b00000) {\n    if ((int)input_4 < 0x100000) {\n      if ((input_4 | input_3) == 0) {\n        return result3;\n      }\n      result10 = calculate_result_08009b24_08008640(input_3,input_4,0,0x7fd00000);\n      result11 = calculate_result_08009b24_08008640(result3,result7,0,0x7fd00000);\n      local_var = local_var + -0x3fe;\n    }\n    else {\n      result7 = result7 + 0x25800000;\n      result11 = CONCAT44(result7,result3);\n      input_4 = input_4 + 0x25800000;\n      result10 = CONCAT44(input_4,input_3);\n      local_var = local_var + -600;\n    }\n  }\n  result9 = (undefined4)((ulonglong)result11 >> 0x20);\n  result8 = (undefined4)result11;\n  result6 = (int)((ulonglong)result10 >> 0x20);\n  result5 = (undefined4)result10;\n  result10 = reverse_binary_calculation_080082d0(result8,result9,result5,result6);\n  result4 = (int)((ulonglong)result10 >> 0x20);\n  result1 = (undefined4)result10;\n  result2 = is_end_of_string_08008b24(result5,result6,result1,result4);\n  if (result2 == 0) {\n    result10 = calculate_result_08009b24_08008640(0,input_4,0);\n    result11 = calculate_result_08009b24_08008640(result1,result4 + -0x80000000,result1,result4);\n    result12 = calculate_result_08009b24_080082d4(result8,result9,result8,result9);\n    result12 = reverse_binary_calculation_080082d0((int)result12,(int)((ulonglong)result12 >> 0x20),0,result7 + 0x100000);\n    result12 = calculate_result_08009b24_08008640((int)result12,(int)((ulonglong)result12 >> 0x20),result5,result6);\n    result13 = reverse_binary_calculation_080082d0(result5,result6,0,input_4);\n    result13 = calculate_result_08009b24_08008640((int)result13,(int)((ulonglong)result13 >> 0x20),0,result7 + 0x100000);\n    result12 = calculate_result_08009b24_080082d4((int)result12,(int)((ulonglong)result12 >> 0x20),(int)result13,\n                          (int)((ulonglong)result13 >> 0x20));\n    result11 = reverse_binary_calculation_080082d0((int)result11,(int)((ulonglong)result11 >> 0x20),(int)result12,\n                          (int)((ulonglong)result12 >> 0x20));\n    reverse_binary_calculation_080082d0((int)result10,(int)((ulonglong)result10 >> 0x20),(int)result11,\n                 (int)((ulonglong)result11 >> 0x20));\n    result10 = calculate_0800a1bc();\n  }\n  else {\n    result10 = calculate_result_08009b24_08008640(0,result7,0,result7);\n    result11 = calculate_result_08009b24_08008640(result5,result6 + -0x80000000,result5,result6);\n    result12 = calculate_result_08009b24_080082d4(result8,result9,0,result7);\n    result13 = reverse_binary_calculation_080082d0(result8,result9,0,result7);\n    result12 = calculate_result_08009b24_08008640((int)result12,(int)((ulonglong)result12 >> 0x20),(int)result13,\n                          (int)((ulonglong)result13 >> 0x20));\n    result11 = reverse_binary_calculation_080082d0((int)result11,(int)((ulonglong)result11 >> 0x20),(int)result12,\n                          (int)((ulonglong)result12 >> 0x20));\n    reverse_binary_calculation_080082d0((int)result10,(int)((ulonglong)result10 >> 0x20),(int)result11,\n                 (int)((ulonglong)result11 >> 0x20));\n    result10 = calculate_0800a1bc();\n  }\n  result3 = (uint)result10;\n  if (local_var != 0) {\n    result3 = calculate_result_08009b24_08008640(result3,(int)((ulonglong)result10 >> 0x20),0,local_var * 0x100000 + 0x3ff00000);\n  }\n  return result3;\n}\n\n",
            "renaming": {
                "FUN_08009b24": "calculate_result_08009b24",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "uVar1": "result1",
                "iVar2": "result2",
                "uVar3": "result3",
                "iVar4": "result4",
                "uVar5": "result5",
                "iVar6": "result6",
                "uVar7": "result7",
                "uVar8": "result8",
                "uVar9": "result9",
                "uVar10": "result10",
                "uVar11": "result11",
                "uVar12": "result12",
                "uVar13": "result13",
                "local_3c": "local_var"
            },
            "calling": [
                "FUN_0800981c"
            ],
            "called": [
                "FUN_080082d4",
                "FUN_08008b24",
                "FUN_08008640",
                "FUN_0800a1bc",
                "FUN_080082d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009d78": {
            "entrypoint": "0x08009d78",
            "current_name": "calculate_result_08009d78",
            "code": "\nint calculateResult_08009d78(undefined4 input1,uint input2,undefined8 *output)\n\n{\n  undefined4 result1;\n  undefined4 result2;\n  undefined4 temp1;\n  undefined4 temp2;\n  undefined4 temp3;\n  undefined4 temp4;\n  undefined4 temp5;\n  uint uInput2;\n  int result;\n  undefined8 calcResult1;\n  undefined8 calcResult2;\n  undefined8 calcResult3;\n  undefined4 localVar1;\n  undefined4 localVar2;\n  undefined8 localVar3;\n  undefined8 localVar4;\n  undefined8 localVar5;\n  \n  uInput2 = input2 & 0x7fffffff;\n  if (uInput2 < 0x3fe921fc) {\n    *(undefined4 *)output = input1;\n    *(uint *)((int)output + 4) = input2;\n    *(undefined4 *)(output + 1) = 0;\n    *(undefined4 *)((int)output + 0xc) = 0;\n    return 0;\n  }\n  if (uInput2 < 0x4002d97c) {\n    if ((int)input2 < 1) {\n      calcResult1 = calculate_result_080082d4(input1,input2,0x54400000,0x3ff921fb);\n      temp1 = (undefined4)((ulonglong)calcResult1 >> 0x20);\n      result1 = (undefined4)calcResult1;\n      if (uInput2 != 0x3ff921fb) {\n        calcResult1 = calculate_result_080082d4(result1,temp1,0x1a626331,0x3dd0b461);\n        *output = calcResult1;\n        calcResult1 = reverse_binary_calculation_080082d0(result1,temp1);\n        calcResult1 = calculate_result_080082d4((int)calcResult1,(int)((ulonglong)calcResult1 >> 0x20),0x1a626331,0x3dd0b461);\n        output[1] = calcResult1;\n        return -1;\n      }\n      calcResult1 = calculate_result_080082d4(result1,temp1,0x1a600000,0x3dd0b461);\n      result1 = (undefined4)((ulonglong)calcResult1 >> 0x20);\n      calcResult2 = calculate_result_080082d4((int)calcResult1,result1,0x2e037073,0x3ba3198a);\n      *output = calcResult2;\n      calcResult1 = reverse_binary_calculation_080082d0((int)calcResult1,result1);\n      calcResult1 = calculate_result_080082d4((int)calcResult1,(int)((ulonglong)calcResult1 >> 0x20),0x2e037073,0x3ba3198a);\n      output[1] = calcResult1;\n      return -1;\n    }\n    calcResult1 = reverse_binary_calculation_080082d0();\n    temp1 = (undefined4)((ulonglong)calcResult1 >> 0x20);\n    result1 = (undefined4)calcResult1;\n    if (uInput2 != 0x3ff921fb) {\n      calcResult1 = reverse_binary_calculation_080082d0(result1,temp1,0x1a626331,0x3dd0b461);\n      *output = calcResult1;\n      calcResult1 = reverse_binary_calculation_080082d0(result1,temp1);\n      calcResult1 = reverse_binary_calculation_080082d0((int)calcResult1,(int)((ulonglong)calcResult1 >> 0x20),0x1a626331,0x3dd0b461);\n      output[1] = calcResult1;\n      return 1;\n    }\n    calcResult1 = reverse_binary_calculation_080082d0(result1,temp1,0x1a600000,0x3dd0b461);\n    result1 = (undefined4)((ulonglong)calcResult1 >> 0x20);\n    calcResult2 = reverse_binary_calculation_080082d0((int)calcResult1,result1,0x2e037073,0x3ba3198a);\n    *output = calcResult2;\n    calcResult1 = reverse_binary_calculation_080082d0((int)calcResult1,result1);\n    calcResult1 = reverse_binary_calculation_080082d0((int)calcResult1,(int)((ulonglong)calcResult1 >> 0x20),0x2e037073,0x3ba3198a);\n    output[1] = calcResult1;\n    return 1;\n  }\n  if (0x413921fb < uInput2) {\n    if (0x7fefffff < uInput2) {\n      calcResult1 = reverse_binary_calculation_080082d0(input1,input2,input1,input2);\n      output[1] = calcResult1;\n      *output = calcResult1;\n      return 0;\n    }\n    result = ((int)uInput2 >> 0x14) + -0x416;\n    calculate_value_08008ba0();\n    localVar3 = shift_and_combine_bits_0800856c();\n    calcResult1 = reverse_binary_calculation_080082d0(input1,uInput2 + result * -0x100000,(int)localVar3,\n                          (int)((ulonglong)localVar3 >> 0x20));\n    calcResult1 = calculate_result_08008640((int)calcResult1,(int)((ulonglong)calcResult1 >> 0x20),0,0x41700000);\n    calculate_value_08008ba0();\n    localVar4 = shift_and_combine_bits_0800856c();\n    calcResult1 = reverse_binary_calculation_080082d0((int)calcResult1,(int)((ulonglong)calcResult1 >> 0x20));\n    localVar5 = calculate_result_08008640((int)calcResult1,(int)((ulonglong)calcResult1 >> 0x20),0,0x41700000);\n    check_and_return_result_08008b10((int)localVar5,(int)((ulonglong)localVar5 >> 0x20),0,0);\n    result = reverse_and_verify_0800a5a0(&localVar3,output,result);\n    if (-1 < (int)input2) {\n      return result;\n    }\n    *(int *)((int)output + 4) = *(int *)((int)output + 4) + -0x80000000;\n    *(int *)((int)output + 0xc) = *(int *)((int)output + 0xc) + -0x80000000;\n    return -result;\n  }\n  calcResult1 = FUNC_0800b2cc();\n  temp1 = (undefined4)((ulonglong)calcResult1 >> 0x20);\n  calcResult2 = calculate_result_08008640((int)calcResult1,temp1,0x6dc9c883,0x3fe45f30);\n  calculate_result_080082d4((int)calcResult2,(int)((ulonglong)calcResult2 >> 0x20),0,0x3fe00000);\n  result = calculate_value_08008ba0();\n  calcResult2 = shift_and_combine_bits_0800856c();\n  temp2 = (undefined4)((ulonglong)calcResult2 >> 0x20);\n  result1 = (undefined4)calcResult2;\n  calcResult2 = calculate_result_08008640(result1,temp2,0x54400000,0x3ff921fb);\n  calcResult1 = reverse_binary_calculation_080082d0((int)calcResult1,temp1,(int)calcResult2,(int)((ulonglong)calcResult2 >> 0x20));\n  temp3 = (undefined4)((ulonglong)calcResult1 >> 0x20);\n  temp1 = (undefined4)calcResult1;\n  calcResult2 = calculate_result_08008640(result1,temp2,0x1a626331,0x3dd0b461);\n  if ((0x1f < result) || (*(uint *)(&DAT_0800be98 + (result + -1) * 4) == uInput2)) {\n    calcResult3 = reverse_binary_calculation_080082d0(temp1,temp3,(int)calcResult2,(int)((ulonglong)calcResult2 >> 0x20));\n    if ((int)((uInput2 >> 0x14) - ((uint)((int)((ulonglong)calcResult3 >> 0x20) << 1) >> 0x15)) < 0x11)\n    goto LAB_0800a0ce;\n    calcResult2 = calculate_result_08008640(result1,temp2,0x1a600000,0x3dd0b461);\n    temp4 = (undefined4)((ulonglong)calcResult2 >> 0x20);\n    calcResult1 = reverse_binary_calculation_080082d0(temp1,temp3,(int)calcResult2,temp4);\n    temp5 = (undefined4)((ulonglong)calcResult1 >> 0x20);\n    result2 = (undefined4)calcResult1;\n    calcResult3 = reverse_binary_calculation_080082d0(temp1,temp3,result2,temp5);\n    calcResult2 = reverse_binary_calculation_080082d0((int)calcResult3,(int)((ulonglong)calcResult3 >> 0x20),(int)calcResult2,temp4);\n    calcResult3 = calculate_result_08008640(result1,temp2,0x2e037073,0x3ba3198a);\n    calcResult2 = reverse_binary_calculation_080082d0((int)calcResult3,(int)((ulonglong)calcResult3 >> 0x20),(int)calcResult2,\n                          (int)((ulonglong)calcResult2 >> 0x20));\n    calcResult3 = reverse_binary_calculation_080082d0(result2,temp5,(int)calcResult2,(int)((ulonglong)calcResult2 >> 0x20));\n    if ((int)(((int)uInput2 >> 0x14) - ((uint)((int)((ulonglong)calcResult3 >> 0x20) << 1) >> 0x15)) < 0x32\n       ) goto LAB_0800a0ce;\n    calcResult2 = calculate_result_08008640(result1,temp2,0x2e000000,0x3ba3198a);\n    temp1 = (undefined4)((ulonglong)calcResult2 >> 0x20);\n    calcResult1 = reverse_binary_calculation_080082d0(result2,temp5,(int)calcResult2,temp1);\n    calcResult3 = reverse_binary_calculation_080082d0(result2,temp5);\n    calcResult2 = reverse_binary_calculation_080082d0((int)calcResult3,(int)((ulonglong)calcResult3 >> 0x20),(int)calcResult2,temp1);\n    calcResult3 = calculate_result_08008640(result1,temp2,0x252049c1,0x397b839a);\n    calcResult2 = reverse_binary_calculation_080082d0((int)calcResult3,(int)((ulonglong)calcResult3 >> 0x20),(int)calcResult2,\n                          (int)((ulonglong)calcResult2 >> 0x20));\n  }\n  calcResult3 = reverse_binary_calculation_080082d0((int)calcResult1,(int)((ulonglong)calcResult1 >> 0x20),(int)calcResult2,\n                        (int)((ulonglong)calcResult2 >> 0x20));\nLAB_0800a0ce:\n  localVar2 = (undefined4)((ulonglong)calcResult1 >> 0x20);\n  localVar1 = (undefined4)calcResult1;\n  *output = calcResult3;\n  calcResult1 = reverse_binary_calculation_080082d0(localVar1,localVar2);\n  calcResult1 = reverse_binary_calculation_080082d0((int)calcResult1,(int)((ulonglong)calcResult1 >> 0x20),(int)calcResult2,\n                        (int)((ulonglong)calcResult2 >> 0x20));\n  output[1] = calcResult1;\n  if ((int)input2 < 0) {\n    *(int *)output = (int)calcResult3;\n    *(int *)((int)output + 4) = (int)((ulonglong)calcResult3 >> 0x20) + -0x80000000;\n    *(int *)(output + 1) = (int)calcResult1;\n    *(int *)((int)output + 0xc) = (int)((ulonglong)calcResult1 >> 0x20) + -0x80000000;\n    result = -result;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08009d78": "calculate_result_08009d78",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "output",
                "uVar1": "result1",
                "uVar2": "result2",
                "uVar3": "temp1",
                "uVar4": "temp2",
                "uVar5": "temp3",
                "uVar6": "temp4",
                "uVar7": "temp5",
                "uVar8": "uInput2",
                "iVar9": "result",
                "uVar10": "calcResult1",
                "uVar11": "calcResult2",
                "uVar12": "calcResult3",
                "local_50": "localVar1",
                "uStack_4c": "localVar2",
                "local_40": "localVar3",
                "local_38": "localVar4",
                "local_30": "localVar5"
            },
            "calling": [
                "FUN_080096e8",
                "FUN_08009410"
            ],
            "called": [
                "FUN_080082d4",
                "FUN_0800856c",
                "FUN_08008640",
                "FUN_08008b10",
                "FUN_0800b2cc",
                "FUN_0800a5a0",
                "FUN_08008ba0",
                "FUN_080082d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a1bc": {
            "entrypoint": "0x0800a1bc",
            "current_name": "calculate_0800a1bc",
            "code": "\nuint calculate_0800a1bc(uint input_a,uint input_b)\n\n{\n  uint result;\n  int counter;\n  uint mask;\n  undefined4 temp;\n  uint shift;\n  uint constant;\n  uint input_a;\n  uint remainder;\n  uint dividend;\n  int iterations;\n  uint quotient;\n  uint shift_count;\n  undefined8 intermediate_result;\n  \n  if ((~input_b & 0x7ff00000) == 0) {\n    intermediate_result = calculate_0800a1bc_result_08008640(input_a,input_b,input_a,input_b);\n    input_a = calculate_0800a1bc_result_080082d4((int)intermediate_result,(int)((ulonglong)intermediate_result >> 0x20),input_a,input_b);\n    return input_a;\n  }\n  if ((int)input_b < 1) {\n    if ((input_b & 0x7fffffff | input_a) == 0) {\n      return input_a;\n    }\n    if (input_b != 0) {\n      intermediate_result = reverse_binary_calculation_080082d0(input_a,input_b,input_a);\n      temp = (undefined4)((ulonglong)intermediate_result >> 0x20);\n      input_a = decode_float_08008894((int)intermediate_result,temp,(int)intermediate_result,temp);\n      return input_a;\n    }\n    do {\n      dividend = input_a;\n      input_a = dividend >> 0xb;\n      input_b = input_b - 0x15;\n      input_a = dividend << 0x15;\n    } while (input_a == 0);\n    result = input_b;\n    if (-1 < (int)dividend) goto LAB_0800a290;\n    shift_count = 0x20;\n    shift = 0xffffffff;\n    dividend = input_a;\n  }\n  else {\n    result = (int)input_b >> 0x14;\n    input_a = input_b;\n    dividend = input_a;\n    if (result != 0) goto LAB_0800a1da;\nLAB_0800a290:\n    dividend = 0;\n    shift_count = input_a;\n    do {\n      shift = dividend;\n      input_a = shift_count << 1;\n      iterations = shift_count << 0xc;\n      dividend = shift + 1;\n      shift_count = input_a;\n    } while (-1 < iterations);\n    shift_count = 0x20 - dividend;\n    input_b = result;\n    dividend = input_a << (dividend & 0xff);\n  }\n  input_a = input_a >> (shift_count & 0xff) | input_a;\n  result = input_b - shift;\nLAB_0800a1da:\n  input_a = input_a & 0xfffff | 0x100000;\n  if (-1 < (int)(result << 0x1f)) {\n    input_a = input_a * 2 - ((int)dividend >> 0x1f);\n    dividend = dividend << 1;\n  }\n  shift_count = 0;\n  input_a = input_a * 2 - ((int)dividend >> 0x1f);\n  dividend = dividend << 1;\n  result = 0;\n  iterations = 0x16;\n  shift = 0x200000;\n  do {\n    counter = result + shift;\n    if (counter <= (int)input_a) {\n      input_a = input_a - counter;\n      result = counter + shift;\n      shift_count = shift_count + shift;\n    }\n    iterations = iterations + -1;\n    input_a = input_a * 2 - ((int)dividend >> 0x1f);\n    shift = shift >> 1;\n    dividend = dividend << 1;\n  } while (iterations != 0);\n  counter = 0x20;\n  constant = 0x80000000;\n  iterations = 0;\n  shift = 0;\n  do {\n    mask = constant + iterations;\n    quotient = result;\n    if ((int)result < (int)input_a) {\n      if ((int)mask < 0) {\nLAB_0800a26a:\n        if (-1 < (int)(mask + constant)) {\n          quotient = result + 1;\n        }\n      }\n      remainder = input_a - result;\n      result = quotient;\n      if (dividend < mask) {\n        remainder = remainder - 1;\n      }\nLAB_0800a262:\n      iterations = mask + constant;\n      dividend = dividend - mask;\n      shift = shift + constant;\n      input_a = remainder;\n    }\n    else if ((input_a == result) && (mask <= dividend)) {\n      if ((int)mask < 0) goto LAB_0800a26a;\n      remainder = 0;\n      result = input_a;\n      goto LAB_0800a262;\n    }\n    counter = counter + -1;\n    constant = constant >> 1;\n    input_a = input_a * 2 - ((int)dividend >> 0x1f);\n    dividend = dividend << 1;\n    if (counter == 0) {\n      if ((input_a | dividend) == 0) {\n        shift = shift >> 1;\n      }\n      else if (shift == 0xffffffff) {\n        shift_count = shift_count + 1;\n        shift = 0;\n      }\n      else {\n        shift = shift + 1 >> 1;\n      }\n      if ((shift_count & 1) != 0) {\n        shift = shift | 0x80000000;\n      }\n      return shift;\n    }\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_0800a1bc": "calculate_0800a1bc",
                "param_1": "input_a",
                "param_2": "input_b",
                "uVar1": "result",
                "iVar2": "counter",
                "uVar3": "mask",
                "uVar4": "temp",
                "uVar5": "shift",
                "uVar6": "constant",
                "uVar7": "input_a",
                "uVar8": "remainder",
                "uVar9": "dividend",
                "iVar10": "iterations",
                "uVar11": "quotient",
                "uVar12": "shift_count",
                "uVar13": "intermediate_result"
            },
            "calling": [
                "FUN_08009b24",
                "FUN_080098d0"
            ],
            "called": [
                "FUN_080082d4",
                "FUN_08008640",
                "FUN_08008894",
                "FUN_080082d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a348": {
            "entrypoint": "0x0800a348",
            "current_name": "calculate_improved_value_0800a348",
            "code": "\nundefined4 calculateImprovedValue_0800a348(undefined4 input1,uint input2,undefined4 input3,undefined4 input4)\n\n{\n  int result1;\n  undefined4 result2;\n  undefined4 result3;\n  uint maskedInput2;\n  undefined8 result4;\n  undefined8 result5;\n  undefined8 result6;\n  undefined4 localVar1;\n  undefined4 localVar2;\n  undefined4 localVar3;\n  undefined4 localVar4;\n  \n  maskedInput2 = input2 & 0x7fffffff;\n  if (maskedInput2 < 0x3e400000) {\n    result1 = calculate_value_08008ba0();\n    if (result1 == 0) {\n      return 0;\n    }\n    result4 = calculate_result_08008640(input1,input2,input1,input2);\n    result3 = (undefined4)((ulonglong)result4 >> 0x20);\n    result2 = (undefined4)result4;\n    result5 = calculate_result_08008640(result2,result3,0xbe8838d4,0xbda8fae9);\n    result5 = calculate_result_080082d4((int)result5,(int)((ulonglong)result5 >> 0x20),0xbdb4b1c4,0x3e21ee9e);\n    result5 = calculate_result_08008640((int)result5,(int)((ulonglong)result5 >> 0x20),result2,result3);\n    result5 = reverse_binary_calculation_080082d0((int)result5,(int)((ulonglong)result5 >> 0x20),0x809c52ad,0x3e927e4f);\n    result5 = calculate_result_08008640((int)result5,(int)((ulonglong)result5 >> 0x20),result2,result3);\n    result5 = calculate_result_080082d4((int)result5,(int)((ulonglong)result5 >> 0x20),0x19cb1590,0x3efa01a0);\n    result5 = calculate_result_08008640((int)result5,(int)((ulonglong)result5 >> 0x20),result2,result3);\n    result5 = reverse_binary_calculation_080082d0((int)result5,(int)((ulonglong)result5 >> 0x20),0x16c15177,0x3f56c16c);\n    result5 = calculate_result_08008640((int)result5,(int)((ulonglong)result5 >> 0x20),result2,result3);\n    result5 = calculate_result_080082d4((int)result5,(int)((ulonglong)result5 >> 0x20),0x5555554c,0x3fa55555);\n    result5 = calculate_result_08008640((int)result5,(int)((ulonglong)result5 >> 0x20),result2,result3);\n  }\n  else {\n    result4 = calculate_result_08008640(input1,input2,input1,input2);\n    result3 = (undefined4)((ulonglong)result4 >> 0x20);\n    result2 = (undefined4)result4;\n    result5 = calculate_result_08008640(result2,result3,0xbe8838d4,0xbda8fae9);\n    result5 = calculate_result_080082d4((int)result5,(int)((ulonglong)result5 >> 0x20),0xbdb4b1c4,0x3e21ee9e);\n    result5 = calculate_result_08008640((int)result5,(int)((ulonglong)result5 >> 0x20),result2,result3);\n    result5 = reverse_binary_calculation_080082d0((int)result5,(int)((ulonglong)result5 >> 0x20),0x809c52ad,0x3e927e4f);\n    result5 = calculate_result_08008640((int)result5,(int)((ulonglong)result5 >> 0x20),result2,result3);\n    result5 = calculate_result_080082d4((int)result5,(int)((ulonglong)result5 >> 0x20),0x19cb1590,0x3efa01a0);\n    result5 = calculate_result_08008640((int)result5,(int)((ulonglong)result5 >> 0x20),result2,result3);\n    result5 = reverse_binary_calculation_080082d0((int)result5,(int)((ulonglong)result5 >> 0x20),0x16c15177,0x3f56c16c);\n    result5 = calculate_result_08008640((int)result5,(int)((ulonglong)result5 >> 0x20),result2,result3);\n    result5 = calculate_result_080082d4((int)result5,(int)((ulonglong)result5 >> 0x20),0x5555554c,0x3fa55555);\n    result5 = calculate_result_08008640((int)result5,(int)((ulonglong)result5 >> 0x20),result2,result3);\n    if (0x3fd33332 < maskedInput2) {\n      if (maskedInput2 < 0x3fe90001) {\n        result1 = maskedInput2 - 0x200000;\n        result4 = reverse_binary_calculation_080082d0(0,0x3ff00000,0,result1);\n      }\n      else {\n        result1 = 0x3fd20000;\n        result4 = 0x3fe7000000000000;\n      }\n      localVar4 = (undefined4)((ulonglong)result4 >> 0x20);\n      localVar3 = (undefined4)result4;\n      result4 = calculate_result_08008640(result2,result3,0,0x3fe00000);\n      result4 = reverse_binary_calculation_080082d0((int)result4,(int)((ulonglong)result4 >> 0x20),0,result1);\n      result5 = calculate_result_08008640(result2,result3,(int)result5,(int)((ulonglong)result5 >> 0x20));\n      result6 = calculate_result_08008640(input1,input2,input3,input4);\n      result5 = reverse_binary_calculation_080082d0((int)result5,(int)((ulonglong)result5 >> 0x20),(int)result6,\n                           (int)((ulonglong)result6 >> 0x20));\n      result4 = reverse_binary_calculation_080082d0((int)result4,(int)((ulonglong)result4 >> 0x20),(int)result5,\n                           (int)((ulonglong)result5 >> 0x20));\n      result2 = reverse_binary_calculation_080082d0(localVar3,localVar4,(int)result4,(int)((ulonglong)result4 >> 0x20));\n      return result2;\n    }\n  }\n  localVar2 = (undefined4)((ulonglong)result5 >> 0x20);\n  localVar1 = (undefined4)result5;\n  result2 = (undefined4)((ulonglong)result4 >> 0x20);\n  result5 = calculate_result_08008640((int)result4,result2,0,0x3fe00000);\n  result4 = calculate_result_08008640((int)result4,result2,localVar1,localVar2);\n  result6 = calculate_result_08008640(input1,input2,input3,input4);\n  result4 = reverse_binary_calculation_080082d0((int)result4,(int)((ulonglong)result4 >> 0x20),(int)result6,\n                       (int)((ulonglong)result6 >> 0x20));\n  result4 = reverse_binary_calculation_080082d0((int)result5,(int)((ulonglong)result5 >> 0x20),(int)result4,\n                       (int)((ulonglong)result4 >> 0x20));\n  result2 = reverse_binary_calculation_080082d0(0,0x3ff00000,(int)result4,(int)((ulonglong)result4 >> 0x20));\n  return result2;\n}\n\n",
            "renaming": {
                "FUN_0800a348": "calculate_improved_value_0800a348",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "iVar1": "result1",
                "uVar2": "result2",
                "uVar3": "result3",
                "uVar4": "maskedInput2",
                "uVar5": "result4",
                "uVar6": "result5",
                "uVar7": "result6",
                "local_30": "localVar1",
                "uStack_2c": "localVar2",
                "local_28": "localVar3",
                "uStack_24": "localVar4"
            },
            "calling": [
                "FUN_080096e8",
                "FUN_08009410"
            ],
            "called": [
                "FUN_080082d4",
                "FUN_08008640",
                "FUN_08008ba0",
                "FUN_080082d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a5a0": {
            "entrypoint": "0x0800a5a0",
            "current_name": "reverse_and_verify_0800a5a0",
            "code": "\n/* WARNING: Restarted to delay deadcode elimination for space: stack */\n\nuint reverse_and_verify_0800a5a0(int input_size,undefined8 *output,int input_length,int num_iterations,int operation_type,int operation_input)\n\n{\n  undefined4 *pointer_1;\n  uint result;\n  uint value;\n  int index;\n  uint *pointer_2;\n  undefined4 variable_1;\n  uint **pointer_3;\n  undefined4 variable_2;\n  int iteration;\n  undefined4 *pointer_4;\n  undefined4 variable_3;\n  uint variable_4;\n  uint *pointer_5;\n  int count;\n  int first_index;\n  undefined8 *pointer_16;\n  int second_index;\n  undefined4 *pointer_18;\n  undefined8 *pointer_19;\n  undefined4 result0;\n  int variable_5;\n  undefined8 *presult2;\n  undefined4 *presult3;\n  bool bVar24;\n  undefined8 variable_6;\n  undefined8 result_1;\n  undefined8 result_2;\n  undefined8 *local_output;\n  int temp_1;\n  int temp_2;\n  int temp_3;\n  uint *array_1 [2];\n  uint array_2 [20];\n  undefined8 stack_variable_1;\n  undefined8 temp_4;\n  int array_3 [38];\n  undefined8 stack_variable_2;\n  \n  first_index = *(int *)(&DAT_0800c060 + operation_type * 4);\n  iteration = num_iterations + -1;\n  array_1[1] = (uint *)output;\n  if (input_length + 0x14 < 0 == SCARRY4(input_length,0x14)) {\n    temp_3 = (input_length + -3) / 0x18;\n    temp_2 = (temp_3 + 1) * -0x18;\n  }\n  else {\n    temp_2 = -0x18;\n    temp_3 = 0;\n  }\n  temp_2 = input_length + temp_2;\n  second_index = temp_3 - iteration;\n  if (-1 < first_index + iteration) {\n    variable_5 = first_index + iteration + 1 + second_index;\n    pointer_16 = &stack_variable_1;\n    do {\n      while (second_index < 0) {\n        second_index = second_index + 1;\n        *(undefined4 *)pointer_16 = 0;\n        *(undefined4 *)((int)pointer_16 + 4) = 0;\n        pointer_16 = pointer_16 + 1;\n        if (second_index == variable_5) goto LAB_0800a626;\n      }\n      result_1 = shift_and_combine_bits_0800856c(*(undefined4 *)(operation_input + second_index * 4));\n      second_index = second_index + 1;\n      *pointer_16 = result_1;\n      pointer_16 = pointer_16 + 1;\n    } while (second_index != variable_5);\n  }\nLAB_0800a626:\n  pointer_4 = (undefined4 *)(input_size + -8);\n  if (-1 < first_index) {\n    presult2 = &stack_variable_1 + num_iterations;\n    second_index = iteration;\n    pointer_16 = &stack_variable_2;\n    do {\n      if (iteration < 0) {\n        result_1 = 0;\n      }\n      else {\n        result_1 = 0;\n        presult3 = pointer_4;\n        pointer_19 = presult2;\n        do {\n          pointer_18 = presult3 + 2;\n          variable_6 = calculate_result_08008640(*pointer_18,presult3[3],*(undefined4 *)(pointer_19 + -1),\n                                *(undefined4 *)((int)pointer_19 + -4));\n          result_1 = calculate_result_080082d4((int)result_1,(int)((ulonglong)result_1 >> 0x20),(int)variable_6,\n                                (int)((ulonglong)variable_6 >> 0x20));\n          presult3 = pointer_18;\n          pointer_19 = pointer_19 + -1;\n        } while (pointer_18 != pointer_4 + num_iterations * 2);\n      }\n      second_index = second_index + 1;\n      *pointer_16 = result_1;\n      presult2 = presult2 + 1;\n      pointer_16 = pointer_16 + 1;\n    } while (second_index != first_index + num_iterations);\n  }\n  array_1[0] = array_2 + first_index + -1;\n  second_index = first_index;\n  do {\n    result_1 = CONCAT44(*(undefined4 *)((int)&stack_variable_2 + second_index * 8 + 4),\n                      *(undefined4 *)(&stack_variable_2 + second_index));\n    if (0 < second_index) {\n      pointer_16 = &stack_variable_2 + second_index;\n      pointer_2 = array_2;\n      do {\n        variable_1 = (undefined4)((ulonglong)result_1 >> 0x20);\n        calculate_result_08008640((int)result_1,variable_1,0,0x3e700000);\n        calculate_value_08008ba0();\n        variable_6 = shift_and_combine_bits_0800856c();\n        variable_2 = (undefined4)((ulonglong)variable_6 >> 0x20);\n        result_2 = calculate_result_08008640((int)variable_6,variable_2,0,0x41700000);\n        reverse_binary_calculation_080082d0((int)result_1,variable_1,(int)result_2,(int)((ulonglong)result_2 >> 0x20));\n        result = calculate_value_08008ba0();\n        presult2 = pointer_16 + -1;\n        variable_1 = *(undefined4 *)presult2;\n        variable_3 = *(undefined4 *)((int)pointer_16 + -4);\n        *pointer_2 = result;\n        result_1 = calculate_result_080082d4((int)variable_6,variable_2,variable_1,variable_3);\n        pointer_16 = presult2;\n        pointer_2 = pointer_2 + 1;\n      } while (presult2 != &stack_variable_2);\n    }\n    result_1 = calculate_result_0800b2e8((int)result_1,(int)((ulonglong)result_1 >> 0x20),temp_2);\n    variable_2 = (undefined4)((ulonglong)result_1 >> 0x20);\n    calculate_result_08008640((int)result_1,variable_2,0,0x3fc00000);\n    variable_6 = calculate_result_080094c0();\n    variable_6 = calculate_result_08008640((int)variable_6,(int)((ulonglong)variable_6 >> 0x20),0,0x40200000);\n    result_1 = reverse_binary_calculation_080082d0((int)result_1,variable_2,(int)variable_6,(int)((ulonglong)variable_6 >> 0x20));\n    result = calculate_value_08008ba0();\n    variable_6 = shift_and_combine_bits_0800856c();\n    result_1 = reverse_binary_calculation_080082d0((int)result_1,(int)((ulonglong)result_1 >> 0x20),(int)variable_6,\n                          (int)((ulonglong)variable_6 >> 0x20));\n    variable_1 = (undefined4)((ulonglong)result_1 >> 0x20);\n    variable_2 = (undefined4)result_1;\n    if (temp_2 < 1) {\n      if (temp_2 == 0) {\n        variable_5 = (int)array_2[second_index + -1] >> 0x17;\n        goto joined_r0x0800a8b8;\n      }\n      variable_5 = validate_and_return_cy_zr_08008b4c(variable_2,variable_1,0,0x3fe00000);\n      if (variable_5 != 0) {\n        result = result + 1;\n        if (second_index < 1) {\n          result_1 = reverse_binary_calculation_080082d0(0,0x3ff00000,variable_2,variable_1);\n          variable_5 = 2;\n          goto LAB_0800a7a4;\n        }\n        variable_5 = 2;\n        goto LAB_0800a8c8;\n      }\n    }\n    else {\n      index = (int)array_2[second_index + -1] >> (0x18U - temp_2 & 0xff);\n      variable_4 = array_2[second_index + -1] - (index << (0x18U - temp_2 & 0xff));\n      variable_5 = (int)variable_4 >> (0x17U - temp_2 & 0xff);\n      array_2[second_index + -1] = variable_4;\n      result = result + index;\njoined_r0x0800a8b8:\n      if (0 < variable_5) {\n        result = result + 1;\n        if (second_index < 1) {\n          bVar24 = false;\n        }\n        else {\nLAB_0800a8c8:\n          if (array_2[0] == 0) {\n            bVar24 = false;\n            if (second_index != 1) {\n              pointer_2 = array_2;\n              index = 1;\n              do {\n                pointer_2 = pointer_2 + 1;\n                if (*pointer_2 != 0) {\n                  count = index + 1;\n                  variable_4 = *pointer_2;\n                  goto LAB_0800a8e2;\n                }\n                index = index + 1;\n              } while (index != second_index);\n              bVar24 = false;\n            }\n          }\n          else {\n            count = 1;\n            index = 0;\n            variable_4 = array_2[0];\nLAB_0800a8e2:\n            array_2[index] = 0x1000000 - variable_4;\n            if (count < second_index) {\n              variable_4 = array_2[count];\n              pointer_2 = array_2 + count;\n              while( true ) {\n                pointer_5 = pointer_2 + 1;\n                *pointer_2 = 0xffffff - variable_4;\n                if (pointer_5 == array_2 + second_index) break;\n                variable_4 = *pointer_5;\n                pointer_2 = pointer_5;\n              }\n            }\n            bVar24 = true;\n          }\n        }\n        if (0 < temp_2) {\n          if (temp_2 == 1) {\n            array_2[second_index + -1] = array_2[second_index + -1] & 0x7fffff;\n          }\n          else if (temp_2 == 2) {\n            array_2[second_index + -1] = array_2[second_index + -1] & 0x3fffff;\n          }\n        }\n        if (variable_5 == 2) {\n          result_1 = reverse_binary_calculation_080082d0(0,0x3ff00000,variable_2,variable_1);\n          if (bVar24) {\n            variable_6 = calculate_result_0800b2e8(0,0x3ff00000,temp_2);\n            result_1 = reverse_binary_calculation_080082d0((int)result_1,(int)((ulonglong)result_1 >> 0x20),(int)variable_6,\n                                  (int)((ulonglong)variable_6 >> 0x20));\n          }\n        }\n      }\n    }\nLAB_0800a7a4:\n    variable_2 = (undefined4)((ulonglong)result_1 >> 0x20);\n    index = check_and_return_result_08008b10((int)result_1,variable_2,0,0);\n    if (index == 0) {\n      result_1 = calculate_result_0800b2e8((int)result_1,variable_2,-temp_2);\n      variable_1 = (undefined4)((ulonglong)result_1 >> 0x20);\n      variable_2 = (undefined4)result_1;\n      iteration = validate_and_return_cy_zr_08008b4c(variable_2,variable_1,0,0x41700000);\n      if (iteration == 0) {\n        variable_4 = calculate_value_08008ba0(variable_2,variable_1);\n        array_2[second_index] = variable_4;\n        index = second_index;\n      }\n      else {\n        calculate_result_08008640(variable_2,variable_1,0,0x3e700000);\n        variable_4 = calculate_value_08008ba0();\n        result_1 = shift_and_combine_bits_0800856c();\n        result_1 = calculate_result_08008640((int)result_1,(int)((ulonglong)result_1 >> 0x20),0,0x41700000);\n        reverse_binary_calculation_080082d0(variable_2,variable_1,(int)result_1,(int)((ulonglong)result_1 >> 0x20));\n        value = calculate_value_08008ba0();\n        temp_2 = temp_2 + 0x18;\n        array_2[second_index] = value;\n        array_2[second_index + 1] = variable_4;\n        index = second_index + 1;\n      }\n      goto LAB_0800a9f6;\n    }\n    index = second_index + -1;\n    if (first_index <= index) {\n      variable_4 = 0;\n      pointer_2 = array_2 + second_index + 0x3fffffff;\n      do {\n        pointer_5 = pointer_2 + -1;\n        variable_4 = variable_4 | *pointer_2;\n        pointer_2 = pointer_5;\n      } while (pointer_5 != array_1[0]);\n      if (variable_4 != 0) break;\n    }\n    if (array_2[first_index + -1] == 0) {\n      temp_1 = 1;\n      pointer_3 = array_1 + first_index;\n      do {\n        pointer_2 = *pointer_3;\n        temp_1 = temp_1 + 1;\n        pointer_3 = pointer_3 + -1;\n      } while (pointer_2 == (uint *)0x0);\n      temp_1 = second_index + temp_1;\n    }\n    else {\n      temp_1 = second_index + 1;\n    }\n    variable_5 = second_index + 1;\n    presult3 = (undefined4 *)(operation_input + (variable_5 + temp_3 + 0x3fffffff) * 4);\n    pointer_16 = &stack_variable_1 + second_index + num_iterations;\n    local_output = &stack_variable_2 + variable_5;\n    do {\n      presult3 = presult3 + 1;\n      result_1 = shift_and_combine_bits_0800856c(*presult3);\n      *pointer_16 = result_1;\n      presult2 = pointer_16 + 1;\n      if (iteration < 0) {\n        variable_6 = 0;\n      }\n      else {\n        variable_6 = 0;\n        pointer_18 = pointer_4;\n        while( true ) {\n          pointer_16 = pointer_16 + -1;\n          pointer_1 = pointer_18 + 2;\n          result_1 = calculate_result_08008640((int)result_1,(int)((ulonglong)result_1 >> 0x20),*pointer_1,pointer_18[3]);\n          variable_6 = calculate_result_080082d4((int)variable_6,(int)((ulonglong)variable_6 >> 0x20),(int)result_1,\n                                (int)((ulonglong)result_1 >> 0x20));\n          if (pointer_1 == pointer_4 + num_iterations * 2) break;\n          result_1 = *pointer_16;\n          pointer_18 = pointer_1;\n        }\n      }\n      *local_output = variable_6;\n      variable_5 = variable_5 + 1;\n      second_index = temp_1;\n      pointer_16 = presult2;\n      local_output = local_output + 1;\n    } while (variable_5 <= temp_1);\n  } while( true );\n  temp_2 = temp_2 + -0x18;\n  if (array_2[index] == 0) {\n    pointer_2 = array_2 + second_index + 0x3ffffffe;\n    do {\n      variable_4 = *pointer_2;\n      index = index + -1;\n      temp_2 = temp_2 + -0x18;\n      pointer_2 = pointer_2 + -1;\n    } while (variable_4 == 0);\n  }\nLAB_0800a9f6:\n  result_1 = calculate_result_0800b2e8(0,0x3ff00000,temp_2);\n  if (index < 0) {\n    if (2 < operation_type) {\n      if (operation_type == 3) {\n        result_1 = 0;\nLAB_0800abe4:\n        if (variable_5 == 0) {\n          *array_1[1] = (undefined4)temp_4;\n          *(int *)((int)array_1[1] + 4) = temp_4._4_4_;\n          *(undefined8 *)((int)array_1[1] + 0x10) = result_1;\n          *(int *)((int)array_1[1] + 8) = array_3[0];\n          *(int *)((int)array_1[1] + 0xc) = array_3[1];\n          return result & 7;\n        }\n        *(int *)((int)array_1[1] + 0x10) = (int)result_1;\n        *(int *)((int)array_1[1] + 8) = array_3[0];\n        *(int *)((int)array_1[1] + 0x14) = (int)((ulonglong)result_1 >> 0x20) + -0x80000000;\n        *(int *)((int)array_1[1] + 4) = temp_4._4_4_ + -0x80000000;\n        *(int *)((int)array_1[1] + 0xc) = array_3[1] + -0x80000000;\n        *array_1[1] = (undefined4)temp_4;\n        return result & 7;\n      }\n      goto LAB_0800ab0e;\n    }\n    if (operation_type < 1) {\n      if (operation_type != 0) goto LAB_0800ab0e;\n      result_1 = 0;\nLAB_0800aafc:\n      iteration = (int)((ulonglong)result_1 >> 0x20);\n      if (variable_5 != 0) {\n        iteration = iteration + -0x80000000;\n      }\n      *array_1[1] = (int)result_1;\n      *(int *)((int)array_1[1] + 4) = iteration;\nLAB_0800ab0e:\n      return result & 7;\n    }\n    result_1 = 0;\n  }\n  else {\n    presult2 = &stack_variable_2 + index;\n    pointer_2 = array_2 + index + 1;\n    pointer_16 = &stack_variable_2 + index + 1;\n    do {\n      variable_2 = (undefined4)((ulonglong)result_1 >> 0x20);\n      pointer_2 = pointer_2 + -1;\n      variable_6 = shift_and_combine_bits_0800856c(*pointer_2);\n      variable_6 = calculate_result_08008640((int)variable_6,(int)((ulonglong)variable_6 >> 0x20),(int)result_1,variable_2);\n      pointer_16 = pointer_16 + -1;\n      *pointer_16 = variable_6;\n      result_1 = calculate_result_08008640((int)result_1,variable_2,0,0x3e700000);\n    } while (pointer_2 != array_2);\n    iteration = 0;\n    do {\n      if (first_index < 0) {\n        result_1 = 0;\n      }\n      else {\n        variable_2 = 0x40000000;\n        variable_1 = 0x3ff921fb;\n        result_1 = 0;\n        second_index = 0;\n        pointer_16 = presult2;\n        pointer_4 = &DAT_0800c028;\n        while( true ) {\n          variable_6 = calculate_result_08008640(*(undefined4 *)pointer_16,*(undefined4 *)((int)pointer_16 + 4),variable_2,variable_1\n                               );\n          result_1 = calculate_result_080082d4((int)result_1,(int)((ulonglong)result_1 >> 0x20),(int)variable_6,\n                                (int)((ulonglong)variable_6 >> 0x20));\n          second_index = second_index + 1;\n          if ((first_index < second_index) || (iteration < second_index)) break;\n          variable_2 = *pointer_4;\n          variable_1 = pointer_4[1];\n          pointer_16 = pointer_16 + 1;\n          pointer_4 = pointer_4 + 2;\n        }\n      }\n      bVar24 = iteration != index;\n      *(int *)(&temp_4 + iteration) = (int)result_1;\n      *(int *)((int)&temp_4 + (iteration * 2 + 1) * 4) = (int)((ulonglong)result_1 >> 0x20);\n      presult2 = presult2 + -1;\n      iteration = iteration + 1;\n    } while (bVar24);\n    if (2 < operation_type) {\n      if (operation_type == 3) {\n        if (index != 0) {\n          pointer_16 = &temp_4 + index;\n          result_1 = CONCAT44(*(undefined4 *)((int)&temp_4 + (index * 2 + 1) * 4),\n                            *(undefined4 *)pointer_16);\n          do {\n            variable_1 = (undefined4)((ulonglong)result_1 >> 0x20);\n            variable_2 = (undefined4)result_1;\n            variable_3 = *(undefined4 *)(pointer_16 + -1);\n            result0 = *(undefined4 *)((int)pointer_16 + -4);\n            result_1 = calculate_result_080082d4(variable_2,variable_1,variable_3,result0);\n            variable_6 = reverse_binary_calculation_080082d0(variable_3,result0,(int)result_1,(int)((ulonglong)result_1 >> 0x20));\n            variable_6 = calculate_result_080082d4((int)variable_6,(int)((ulonglong)variable_6 >> 0x20),variable_2,variable_1);\n            *pointer_16 = variable_6;\n            pointer_16 = pointer_16 + -1;\n            *pointer_16 = result_1;\n          } while (&temp_4 != pointer_16);\n          if (1 < index) {\n            pointer_16 = &temp_4 + index;\n            result_1 = CONCAT44(*(undefined4 *)((int)&temp_4 + (index * 2 + 1) * 4),\n                              *(undefined4 *)pointer_16);\n            do {\n              variable_1 = (undefined4)((ulonglong)result_1 >> 0x20);\n              variable_2 = (undefined4)result_1;\n              variable_3 = *(undefined4 *)(pointer_16 + -1);\n              result0 = *(undefined4 *)((int)pointer_16 + -4);\n              result_1 = calculate_result_080082d4(variable_2,variable_1,variable_3,result0);\n              variable_6 = reverse_binary_calculation_080082d0(variable_3,result0,(int)result_1,(int)((ulonglong)result_1 >> 0x20));\n              variable_6 = calculate_result_080082d4((int)variable_6,(int)((ulonglong)variable_6 >> 0x20),variable_2,variable_1);\n              *pointer_16 = variable_6;\n              pointer_16 = pointer_16 + -1;\n              *pointer_16 = result_1;\n            } while (&temp_4 + 1 != pointer_16);\n            result_1 = 0;\n            pointer_16 = &temp_4 + index + 1;\n            do {\n              presult2 = pointer_16 + -1;\n              result_1 = calculate_result_080082d4((int)result_1,(int)((ulonglong)result_1 >> 0x20),\n                                    *(undefined4 *)presult2,*(undefined4 *)((int)pointer_16 + -4));\n              pointer_16 = presult2;\n            } while (&temp_4 + 2 != presult2);\n            goto LAB_0800abe4;\n          }\n        }\n        result_1 = 0;\n        goto LAB_0800abe4;\n      }\n      goto LAB_0800ab0e;\n    }\n    if (operation_type < 1) {\n      if (operation_type != 0) goto LAB_0800ab0e;\n      result_1 = 0;\n      pointer_16 = &temp_4 + index + 1;\n      do {\n        presult2 = pointer_16 + -1;\n        result_1 = calculate_result_080082d4((int)result_1,(int)((ulonglong)result_1 >> 0x20),*(undefined4 *)presult2,\n                              *(undefined4 *)((int)pointer_16 + -4));\n        pointer_16 = presult2;\n      } while (&temp_4 != presult2);\n      goto LAB_0800aafc;\n    }\n    result_1 = 0;\n    pointer_16 = &temp_4 + index + 1;\n    do {\n      presult2 = pointer_16 + -1;\n      result_1 = calculate_result_080082d4((int)result_1,(int)((ulonglong)result_1 >> 0x20),*(undefined4 *)presult2,\n                            *(undefined4 *)((int)pointer_16 + -4));\n      pointer_16 = presult2;\n    } while (&temp_4 != presult2);\n  }\n  iteration = (int)((ulonglong)result_1 >> 0x20);\n  variable_2 = (undefined4)result_1;\n  if (variable_5 == 0) {\n    *(undefined8 *)array_1[1] = result_1;\n    result_1 = reverse_binary_calculation_080082d0((undefined4)temp_4,temp_4._4_4_,variable_2,iteration);\n    if (index < 1) goto LAB_0800ad26;\nLAB_0800ad04:\n    iteration = 1;\n    pointer_16 = &temp_4;\n    do {\n      result_1 = calculate_result_080082d4((int)result_1,(int)((ulonglong)result_1 >> 0x20),\n                            *(undefined4 *)(pointer_16 + 1),*(undefined4 *)((int)pointer_16 + 0xc));\n      iteration = iteration + 1;\n      pointer_16 = pointer_16 + 1;\n    } while (iteration <= index);\n    if (variable_5 == 0) goto LAB_0800ad26;\n  }\n  else {\n    *array_1[1] = variable_2;\n    *(int *)((int)array_1[1] + 4) = iteration + -0x80000000;\n    result_1 = reverse_binary_calculation_080082d0((undefined4)temp_4,temp_4._4_4_,variable_2,iteration);\n    if (0 < index) goto LAB_0800ad04;\n  }\n  result_1 = CONCAT44((int)((ulonglong)result_1 >> 0x20) + -0x80000000,(int)result_1);\nLAB_0800ad26:\n  *(undefined8 *)((int)array_1[1] + 8) = result_1;\n  return result & 7;\n}\n\n",
            "renaming": {
                "FUN_0800a5a0": "reverse_and_verify_0800a5a0",
                "param_1": "input_size",
                "param_2": "output",
                "param_3": "input_length",
                "param_4": "num_iterations",
                "param_5": "operation_type",
                "param_6": "operation_input",
                "puVar1": "pointer_1",
                "uVar2": "result",
                "uVar3": "value",
                "iVar4": "index",
                "puVar5": "pointer_2",
                "uVar6": "variable_1",
                "ppuVar7": "pointer_3",
                "uVar8": "variable_2",
                "iVar9": "iteration",
                "puVar10": "pointer_4",
                "uVar11": "variable_3",
                "uVar12": "variable_4",
                "puVar13": "pointer_5",
                "iVar14": "count",
                "iVar15": "first_index",
                "iVar17": "second_index",
                "iVar21": "variable_5",
                "uVar25": "variable_6",
                "uVar26": "result_1",
                "uVar27": "result_2",
                "local_284": "local_output",
                "local_280": "temp_1",
                "local_270": "temp_2",
                "local_26c": "temp_3",
                "local_260": "array_1",
                "local_258": "array_2",
                "uStack_208": "stack_variable_1",
                "local_168": "temp_4",
                "local_160": "array_3",
                "uStack_c8": "stack_variable_2"
            },
            "calling": [
                "FUN_08009d78"
            ],
            "called": [
                "FUN_080082d4",
                "FUN_080094c0",
                "FUN_0800856c",
                "FUN_08008640",
                "FUN_0800b2e8",
                "FUN_08008b10",
                "FUN_08008b4c",
                "FUN_08008ba0",
                "FUN_080082d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800adf0": {
            "entrypoint": "0x0800adf0",
            "current_name": "calculate_0800adf0",
            "code": "\nundefined4\ncalculate_0800adf0(undefined4 input_value_1,uint input_value_2,undefined4 temp_value_1,undefined4 temp_value_2,int is_reversed)\n\n{\n  int calculation_result;\n  undefined4 result_value_1;\n  undefined4 result_value_2;\n  undefined4 temp_result_value_1;\n  undefined4 temp_result_value_2;\n  undefined4 temp_result_value_3;\n  undefined8 final_result_value_1;\n  undefined8 final_result_value_2;\n  \n  if (((input_value_2 & 0x7fffffff) < 0x3e400000) && (calculation_result = calculate_0800adf0_value_08008ba0(), calculation_result == 0)) {\n    return input_value_1;\n  }\n  final_result_value_1 = calculate_0800adf0_result_08008640(input_value_1,input_value_2,input_value_1);\n  temp_result_value_1 = (undefined4)((ulonglong)final_result_value_1 >> 0x20);\n  result_value_2 = (undefined4)final_result_value_1;\n  final_result_value_1 = calculate_0800adf0_result_08008640(input_value_1,input_value_2,result_value_2,temp_result_value_1);\n  temp_result_value_2 = (undefined4)((ulonglong)final_result_value_1 >> 0x20);\n  result_value_1 = (undefined4)final_result_value_1;\n  final_result_value_1 = calculate_0800adf0_result_08008640(result_value_2,temp_result_value_1,0x5acfd57c,0x3de5d93a);\n  final_result_value_1 = reverse_binary_calculation_080082d0((int)final_result_value_1,(int)((ulonglong)final_result_value_1 >> 0x20),0x8a2b9ceb,0x3e5ae5e6);\n  final_result_value_1 = calculate_0800adf0_result_08008640((int)final_result_value_1,(int)((ulonglong)final_result_value_1 >> 0x20),result_value_2,temp_result_value_1);\n  final_result_value_1 = calculate_0800adf0_result_080082d4((int)final_result_value_1,(int)((ulonglong)final_result_value_1 >> 0x20),0x57b1fe7d,0x3ec71de3);\n  final_result_value_1 = calculate_0800adf0_result_08008640((int)final_result_value_1,(int)((ulonglong)final_result_value_1 >> 0x20),result_value_2,temp_result_value_1);\n  final_result_value_1 = reverse_binary_calculation_080082d0((int)final_result_value_1,(int)((ulonglong)final_result_value_1 >> 0x20),0x19c161d5,0x3f2a01a0);\n  final_result_value_1 = calculate_0800adf0_result_08008640((int)final_result_value_1,(int)((ulonglong)final_result_value_1 >> 0x20),result_value_2,temp_result_value_1);\n  final_result_value_1 = calculate_0800adf0_result_080082d4((int)final_result_value_1,(int)((ulonglong)final_result_value_1 >> 0x20),0x1110f8a6,0x3f811111);\n  temp_result_value_3 = (undefined4)((ulonglong)final_result_value_1 >> 0x20);\n  if (is_reversed != 0) {\n    final_result_value_2 = calculate_0800adf0_result_08008640(temp_value_1,temp_value_2,0,0x3fe00000);\n    final_result_value_1 = calculate_0800adf0_result_08008640(result_value_1,temp_result_value_2,(int)final_result_value_1,temp_result_value_3);\n    final_result_value_1 = reverse_binary_calculation_080082d0((int)final_result_value_2,(int)((ulonglong)final_result_value_2 >> 0x20),(int)final_result_value_1,\n                         (int)((ulonglong)final_result_value_1 >> 0x20));\n    final_result_value_1 = calculate_0800adf0_result_08008640((int)final_result_value_1,(int)((ulonglong)final_result_value_1 >> 0x20),result_value_2,temp_result_value_1);\n    final_result_value_1 = reverse_binary_calculation_080082d0((int)final_result_value_1,(int)((ulonglong)final_result_value_1 >> 0x20),temp_value_1,temp_value_2);\n    final_result_value_2 = calculate_0800adf0_result_08008640(result_value_1,temp_result_value_2,0x55555549,0x3fc55555);\n    final_result_value_1 = calculate_0800adf0_result_080082d4((int)final_result_value_1,(int)((ulonglong)final_result_value_1 >> 0x20),(int)final_result_value_2,\n                         (int)((ulonglong)final_result_value_2 >> 0x20));\n    result_value_2 = reverse_binary_calculation_080082d0(input_value_1,input_value_2,(int)final_result_value_1,(int)((ulonglong)final_result_value_1 >> 0x20));\n    return result_value_2;\n  }\n  final_result_value_1 = calculate_0800adf0_result_08008640(result_value_2,temp_result_value_1,(int)final_result_value_1,temp_result_value_3);\n  final_result_value_1 = reverse_binary_calculation_080082d0((int)final_result_value_1,(int)((ulonglong)final_result_value_1 >> 0x20),0x55555549,0x3fc55555);\n  final_result_value_1 = calculate_0800adf0_result_08008640((int)final_result_value_1,(int)((ulonglong)final_result_value_1 >> 0x20),result_value_1,temp_result_value_2);\n  result_value_2 = calculate_0800adf0_result_080082d4((int)final_result_value_1,(int)((ulonglong)final_result_value_1 >> 0x20),input_value_1,input_value_2);\n  return result_value_2;\n}\n\n",
            "renaming": {
                "FUN_0800adf0": "calculate_0800adf0",
                "param_1": "input_value_1",
                "param_2": "input_value_2",
                "param_3": "temp_value_1",
                "param_4": "temp_value_2",
                "param_5": "is_reversed",
                "iVar1": "calculation_result",
                "uVar2": "result_value_1",
                "uVar3": "result_value_2",
                "uVar4": "temp_result_value_1",
                "uVar5": "temp_result_value_2",
                "uVar6": "temp_result_value_3",
                "uVar7": "final_result_value_1",
                "uVar8": "final_result_value_2"
            },
            "calling": [
                "FUN_080096e8",
                "FUN_08009410"
            ],
            "called": [
                "FUN_080082d4",
                "FUN_08008640",
                "FUN_08008ba0",
                "FUN_080082d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800af78": {
            "entrypoint": "0x0800af78",
            "current_name": "calculate_result_0800af78",
            "code": "\nint calculate_result_0800af78(int input_1,uint input_2)\n\n{\n  undefined4 result_1;\n  undefined4 result_2;\n  undefined4 result_3;\n  undefined4 result_4;\n  int output;\n  undefined4 temp_1;\n  uint temp_2;\n  undefined8 temp_3;\n  undefined8 temp_4;\n  undefined4 local_variable;\n  \n  temp_3 = CONCAT44(input_2,input_1);\n  temp_2 = input_2 & 0x7fffffff;\n  if (temp_2 < 0x44100000) {\n    if (temp_2 < 0x3fdc0000) {\n      if (temp_2 < 0x3e200000) {\n        temp_4 = calculate_result_0800af78_080082d4(input_1,input_2,0x8800759c,0x7e37e43c);\n        output = check_if_string_empty_08008b60((int)temp_4,(int)((ulonglong)temp_4 >> 0x20),0,0x3ff00000);\n        if (output != 0) {\n          return input_1;\n        }\n      }\n      output = -1;\n    }\n    else {\n      temp_3 = FUNC_0800b2cc();\n      result_4 = (undefined4)((ulonglong)temp_3 >> 0x20);\n      result_1 = (undefined4)temp_3;\n      if (temp_2 < 0x3ff30000) {\n        if (temp_2 < 0x3fe60000) {\n          temp_3 = calculate_result_0800af78_080082d4(result_1,result_4,result_1,result_4);\n          temp_3 = reverse_binary_calculation_080082d0((int)temp_3,(int)((ulonglong)temp_3 >> 0x20),0,0x3ff00000);\n          temp_4 = calculate_result_0800af78_080082d4(result_1,result_4,0,0x40000000);\n          temp_3 = decode_float_08008894((int)temp_3,(int)((ulonglong)temp_3 >> 0x20),(int)temp_4,\n                               (int)((ulonglong)temp_4 >> 0x20));\n          output = 0;\n        }\n        else {\n          temp_3 = reverse_binary_calculation_080082d0(result_1,result_4,0,0x3ff00000);\n          temp_4 = calculate_result_0800af78_080082d4(result_1,result_4,0,0x3ff00000);\n          temp_3 = decode_float_08008894((int)temp_3,(int)((ulonglong)temp_3 >> 0x20),(int)temp_4,\n                               (int)((ulonglong)temp_4 >> 0x20));\n          output = 1;\n        }\n      }\n      else if (temp_2 < 0x40038000) {\n        temp_3 = reverse_binary_calculation_080082d0(result_1,result_4,0,0x3ff80000);\n        temp_4 = calculate_result_0800af78_08008640(result_1,result_4,0,0x3ff80000);\n        temp_4 = calculate_result_0800af78_080082d4((int)temp_4,(int)((ulonglong)temp_4 >> 0x20),0,0x3ff00000);\n        temp_3 = decode_float_08008894((int)temp_3,(int)((ulonglong)temp_3 >> 0x20),(int)temp_4,\n                             (int)((ulonglong)temp_4 >> 0x20));\n        output = 2;\n      }\n      else {\n        temp_3 = decode_float_08008894(0,0xbff00000,result_1,result_4);\n        output = 3;\n      }\n    }\n    local_variable = (undefined4)((ulonglong)temp_3 >> 0x20);\n    temp_1 = (undefined4)temp_3;\n    temp_3 = calculate_result_0800af78_08008640(temp_1,local_variable,temp_1);\n    result_2 = (undefined4)((ulonglong)temp_3 >> 0x20);\n    result_1 = (undefined4)temp_3;\n    temp_3 = calculate_result_0800af78_08008640(result_1,result_2,result_1,result_2);\n    result_3 = (undefined4)((ulonglong)temp_3 >> 0x20);\n    result_4 = (undefined4)temp_3;\n    temp_3 = calculate_result_0800af78_08008640(result_4,result_3,0xe322da11,0x3f90ad3a);\n    temp_3 = calculate_result_0800af78_080082d4((int)temp_3,(int)((ulonglong)temp_3 >> 0x20),0x24760deb,0x3fa97b4b);\n    temp_3 = calculate_result_0800af78_08008640((int)temp_3,(int)((ulonglong)temp_3 >> 0x20),result_4,result_3);\n    temp_3 = calculate_result_0800af78_080082d4((int)temp_3,(int)((ulonglong)temp_3 >> 0x20),0xa0d03d51,0x3fb10d66);\n    temp_3 = calculate_result_0800af78_08008640((int)temp_3,(int)((ulonglong)temp_3 >> 0x20),result_4,result_3);\n    temp_3 = calculate_result_0800af78_080082d4((int)temp_3,(int)((ulonglong)temp_3 >> 0x20),0xc54c206e,0x3fb745cd);\n    temp_3 = calculate_result_0800af78_08008640((int)temp_3,(int)((ulonglong)temp_3 >> 0x20),result_4,result_3);\n    temp_3 = calculate_result_0800af78_080082d4((int)temp_3,(int)((ulonglong)temp_3 >> 0x20),0x920083ff,0x3fc24924);\n    temp_3 = calculate_result_0800af78_08008640((int)temp_3,(int)((ulonglong)temp_3 >> 0x20),result_4,result_3);\n    temp_3 = calculate_result_0800af78_080082d4((int)temp_3,(int)((ulonglong)temp_3 >> 0x20),0x5555550d,0x3fd55555);\n    temp_3 = calculate_result_0800af78_08008640((int)temp_3,(int)((ulonglong)temp_3 >> 0x20),result_1,result_2);\n    result_1 = (undefined4)((ulonglong)temp_3 >> 0x20);\n    temp_4 = calculate_result_0800af78_08008640(result_4,result_3,0x2c6a6c2f,0xbfa2b444);\n    temp_4 = reverse_binary_calculation_080082d0((int)temp_4,(int)((ulonglong)temp_4 >> 0x20),0x52defd9a,0x3fadde2d);\n    temp_4 = calculate_result_0800af78_08008640((int)temp_4,(int)((ulonglong)temp_4 >> 0x20),result_4,result_3);\n    temp_4 = reverse_binary_calculation_080082d0((int)temp_4,(int)((ulonglong)temp_4 >> 0x20),0xaf749a6d,0x3fb3b0f2);\n    temp_4 = calculate_result_0800af78_08008640((int)temp_4,(int)((ulonglong)temp_4 >> 0x20),result_4,result_3);\n    temp_4 = reverse_binary_calculation_080082d0((int)temp_4,(int)((ulonglong)temp_4 >> 0x20),0xfe231671,0x3fbc71c6);\n    temp_4 = calculate_result_0800af78_08008640((int)temp_4,(int)((ulonglong)temp_4 >> 0x20),result_4,result_3);\n    temp_4 = reverse_binary_calculation_080082d0((int)temp_4,(int)((ulonglong)temp_4 >> 0x20),0x9998ebc4,0x3fc99999);\n    temp_4 = calculate_result_0800af78_08008640((int)temp_4,(int)((ulonglong)temp_4 >> 0x20),result_4,result_3);\n    result_4 = (undefined4)((ulonglong)temp_4 >> 0x20);\n    if (output == -1) {\n      temp_3 = calculate_result_0800af78_080082d4((int)temp_3,result_1,(int)temp_4,result_4);\n      temp_3 = calculate_result_0800af78_08008640((int)temp_3,(int)((ulonglong)temp_3 >> 0x20),temp_1,local_variable);\n      output = reverse_binary_calculation_080082d0(temp_1,local_variable,(int)temp_3,(int)((ulonglong)temp_3 >> 0x20));\n      return output;\n    }\n    temp_3 = calculate_result_0800af78_080082d4((int)temp_3,result_1,(int)temp_4,result_4);\n    temp_3 = calculate_result_0800af78_08008640((int)temp_3,(int)((ulonglong)temp_3 >> 0x20),temp_1,local_variable);\n    temp_3 = reverse_binary_calculation_080082d0((int)temp_3,(int)((ulonglong)temp_3 >> 0x20),\n                         *(undefined4 *)(&UNK_0800c090 + output * 8),\n                         *(undefined4 *)(&UNK_0800c094 + output * 8));\n    temp_3 = reverse_binary_calculation_080082d0((int)temp_3,(int)((ulonglong)temp_3 >> 0x20),temp_1,local_variable);\n    output = reverse_binary_calculation_080082d0(*(undefined4 *)(&UNK_0800c070 + output * 8),\n                         *(undefined4 *)(&UNK_0800c074 + output * 8),(int)temp_3,\n                         (int)((ulonglong)temp_3 >> 0x20));\n    if ((int)input_2 < 0) {\n      return output;\n    }\n  }\n  else {\n    if ((0x7ff00000 < temp_2) || ((temp_2 == 0x7ff00000 && (input_1 != 0)))) {\n      output = calculate_result_0800af78_080082d4(input_1,input_2,input_1);\n      return output;\n    }\n    output = 0x54442d18;\n  }\n  return output;\n}\n\n",
            "renaming": {
                "FUN_0800af78": "calculate_result_0800af78",
                "param_1": "input_1",
                "param_2": "input_2",
                "uVar1": "result_1",
                "uVar2": "result_2",
                "uVar3": "result_3",
                "uVar4": "result_4",
                "iVar5": "output",
                "uVar6": "temp_1",
                "uVar7": "temp_2",
                "uVar8": "temp_3",
                "uVar9": "temp_4",
                "local_2c": "local_variable"
            },
            "calling": [
                "FUN_08009990"
            ],
            "called": [
                "FUN_080082d4",
                "FUN_08008b60",
                "FUN_08008640",
                "FUN_0800b2cc",
                "FUN_08008894",
                "FUN_080082d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800b2cc": {
            "entrypoint": "0x0800b2cc",
            "current_name": "FUNC_0800b2cc",
            "code": "\nvoid FUNC_0800b2cc(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800b2cc": "FUNC_0800b2cc"
            },
            "calling": [
                "FUN_08009990",
                "FUN_0800af78",
                "FUN_08009d78"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800b2d4": {
            "entrypoint": "0x0800b2d4",
            "current_name": "sign_extension_0800b2d4",
            "code": "\nuint signExtension_0800b2d4(undefined4 param,uint value)\n\n{\n  return (value | 0x80000000) + 0x100000 >> 0x1f;\n}\n\n",
            "renaming": {
                "FUN_0800b2d4": "sign_extension_0800b2d4",
                "param_1": "param",
                "param_2": "value"
            },
            "calling": [
                "FUN_0800981c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800b2e0": {
            "entrypoint": "0x0800b2e0",
            "current_name": "initialize_0800b2e0",
            "code": "\nundefined4 initialize_0800b2e0(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800b2e0": "initialize_0800b2e0"
            },
            "calling": [
                "FUN_0800981c",
                "FUN_080098d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800b2e8": {
            "entrypoint": "0x0800b2e8",
            "current_name": "calculate_result_0800b2e8",
            "code": "\nuint calculate_result_0800b2e8(uint input1,uint input2,int offset,undefined4 param_4)\n\n{\n  uint shifted_value;\n  int result;\n  uint high_bits;\n  undefined8 concatenated_input;\n  \n  concatenated_input = CONCAT44(input2,input1);\n  shifted_value = (input2 << 1) >> 0x15;\n  if (shifted_value == 0) {\n    if ((input1 | input2 & 0x7fffffff) == 0) {\n      return input1;\n    }\n    concatenated_input = perform_calculation(input1,input2,0,0x43500000);\n    if (offset < -50000) goto LAB_0800b34a;\n    shifted_value = ((uint)((int)((ulonglong)concatenated_input >> 0x20) << 1) >> 0x15) - 0x36;\n  }\n  else if (shifted_value == 0x7ff) {\n    shifted_value = perform_special_calculation(input1,input2,input1,input2,param_4);\n    return shifted_value;\n  }\n  high_bits = (uint)((ulonglong)concatenated_input >> 0x20);\n  result = shifted_value + offset;\n  if (result < 0x7ff) {\n    if (0 < result) {\n      return (uint)concatenated_input;\n    }\n    if (result + 0x35 < 0 == SCARRY4(result,0x35)) {\n      shifted_value = perform_calculation((uint)concatenated_input,high_bits & 0x800fffff | (result + 0x36) * 0x100000,0,0x3c900000);\n      return shifted_value;\n    }\n    if (offset < 0xc351) {\n      concatenated_input = CONCAT44(high_bits & 0x80000000 | 0x1a56e1f,0xc2f8f359);\nLAB_0800b34a:\n      shifted_value = perform_calculation((int)concatenated_input,(int)((ulonglong)concatenated_input >> 0x20),0xc2f8f359,0x1a56e1f);\n      return shifted_value;\n    }\n  }\n  shifted_value = perform_calculation(0x8800759c,high_bits & 0x80000000 | 0x7e37e43c,0x8800759c,0x7e37e43c);\n  return shifted_value;\n}\n\n",
            "renaming": {
                "FUN_0800b2e8": "calculate_result_0800b2e8",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "offset",
                "uVar1": "shifted_value",
                "iVar2": "result",
                "uVar3": "high_bits",
                "uVar4": "concatenated_input",
                "calculate_result_08008640": "perform_calculation",
                "calculate_result_080082d4": "perform_special_calculation"
            },
            "calling": [
                "FUN_0800a5a0"
            ],
            "called": [
                "FUN_080082d4",
                "FUN_08008640"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800b3dc": {
            "entrypoint": "0x0800b3dc",
            "current_name": "get_global_data_0800b3dc",
            "code": "\nundefined4 getGlobalData_0800b3dc(void)\n\n{\n  return DAT_20000018;\n}\n\n",
            "renaming": {
                "FUN_0800b3dc": "get_global_data_0800b3dc"
            },
            "calling": [
                "FUN_0800981c",
                "FUN_080098d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800b3e8": {
            "entrypoint": "0x0800b3e8",
            "current_name": "execute_code_blocks_0800b3e8",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0800b3f4) */\n/* WARNING: Removing unreachable block (ram,0x0800b3f6) */\n\nvoid executeCodeBlocks_0800b3e8(void)\n\n{\n  int counter;\n  code **codeBlockPointers;\n  \n  FUNC_0800b5b0();\n  counter = 0;\n  codeBlockPointers = (code **)&DAT_0800c0b4;\n  do {\n    counter = counter + 1;\n    (**codeBlockPointers)();\n    codeBlockPointers = codeBlockPointers + 1;\n  } while (counter != 2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800b3e8": "execute_code_blocks_0800b3e8",
                "iVar1": "counter",
                "ppcVar2": "codeBlockPointers"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_0800b4d0",
                "FUN_0800b5b0",
                "FUN_080001ac"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800b430": {
            "entrypoint": "0x0800b430",
            "current_name": "fill_memory_with_byte_0800b430",
            "code": "\nvoid fillMemoryWithByte_0800b430(undefined4 *destination,undefined byteValue,uint size)\n\n{\n  undefined4 *destPtr;\n  undefined4 *nextPtr;\n  uint remainingSize;\n  undefined4 fullWord;\n  bool isEnd;\n  \n  if (((uint)destination & 3) != 0) {\n    remainingSize = size - 1;\n    destPtr = destination;\n    if (size == 0) {\n      return;\n    }\n    while( true ) {\n      destination = (undefined4 *)((int)destPtr + 1);\n      *(undefined *)destPtr = byteValue;\n      size = remainingSize;\n      if (((uint)destination & 3) == 0) break;\n      isEnd = remainingSize == 0;\n      remainingSize = remainingSize - 1;\n      destPtr = destination;\n      if (isEnd) {\n        return;\n      }\n    }\n  }\n  if (3 < size) {\n    fullWord = CONCAT22(CONCAT11(byteValue,byteValue),CONCAT11(byteValue,byteValue));\n    if (0xf < size) {\n      destPtr = destination + 4;\n      do {\n        destPtr[-4] = fullWord;\n        destPtr[-3] = fullWord;\n        destPtr[-2] = fullWord;\n        destPtr[-1] = fullWord;\n        destPtr = destPtr + 4;\n      } while (destPtr != (undefined4 *)((int)destination + (size - 0x10 & 0xfffffff0) + 0x20));\n      remainingSize = size & 0xc;\n      destination = destination + ((size - 0x10 >> 4) + 1) * 4;\n      size = size & 0xf;\n      if (remainingSize == 0) goto joined_r0x0800b4a8;\n    }\n    destPtr = (undefined4 *)((size - 4 & 0xfffffffc) + 4 + (int)destination);\n    do {\n      nextPtr = destination + 1;\n      *destination = fullWord;\n      destination = nextPtr;\n    } while (destPtr != nextPtr);\n    size = size & 3;\n    destination = destPtr;\n  }\njoined_r0x0800b4a8:\n  if (size != 0) {\n    destPtr = destination;\n    do {\n      nextPtr = (undefined4 *)((int)destPtr + 1);\n      *(undefined *)destPtr = byteValue;\n      destPtr = nextPtr;\n    } while ((undefined4 *)(size + (int)destination) != nextPtr);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800b430": "fill_memory_with_byte_0800b430",
                "param_1": "destination",
                "param_2": "byteValue",
                "param_3": "size",
                "puVar1": "destPtr",
                "puVar2": "nextPtr",
                "uVar3": "remainingSize",
                "uVar4": "fullWord",
                "bVar5": "isEnd"
            },
            "calling": [
                "FUN_080004ac",
                "FUN_08005814",
                "FUN_080079c0",
                "FUN_080005b4",
                "FUN_08001994",
                "FUN_08001ddc",
                "FUN_080002f0",
                "FUN_080024c4",
                "FUN_08002f24",
                "FUN_08004d7c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800b4d0": {
            "entrypoint": "0x0800b4d0",
            "current_name": "FUNC_0800b4d0",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0800b4d4) */\n\nvoid FUNC_0800b4d0(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800b4d0": "FUNC_0800b4d0"
            },
            "calling": [
                "FUN_0800b3e8"
            ],
            "called": [
                "FUN_0800b524"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800b51c": {
            "entrypoint": "0x0800b51c",
            "current_name": "FUNC_0800b51c",
            "code": "\nvoid FUNC_0800b51c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800b51c": "FUNC_0800b51c"
            },
            "calling": [
                "FUN_0800b524"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800b520": {
            "entrypoint": "0x0800b520",
            "current_name": "FUNC_0800b520",
            "code": "\nvoid FUNC_0800b520(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800b520": "FUNC_0800b520"
            },
            "calling": [
                "FUN_0800b524"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800b524": {
            "entrypoint": "0x0800b524",
            "current_name": "process_data_0800b524",
            "code": "\nundefined4 processData_0800b524(int input,undefined4 value1,undefined4 value2,undefined4 value3)\n\n{\n  undefined *dataPtr;\n  undefined4 result;\n  uint bitMask;\n  uint size;\n  \n  FUNC_0800b51c(DAT_20000448);\n  if (DAT_20000168 == (undefined *)0x0) {\n    DAT_20000168 = &DAT_2000016c;\n  }\n  dataPtr = DAT_20000168;\n  size = *(uint *)(DAT_20000168 + 4);\n  if ((int)size < 0x20) {\n    if (input != 0) {\n      *(undefined4 *)(DAT_20000168 + size * 4 + 0x88) = value2;\n      bitMask = 1 << (size & 0xff);\n      *(uint *)(dataPtr + 0x188) = *(uint *)(dataPtr + 0x188) | bitMask;\n      *(undefined4 *)(dataPtr + size * 4 + 0x108) = value3;\n      if (input == 2) {\n        *(uint *)(dataPtr + 0x18c) = bitMask | *(uint *)(dataPtr + 0x18c);\n      }\n    }\n    result = DAT_20000448;\n    *(uint *)(dataPtr + 4) = size + 1;\n    *(undefined4 *)(dataPtr + (size + 2) * 4) = value1;\n    FUNC_0800b520(result);\n    result = 0;\n  }\n  else {\n    FUNC_0800b520(DAT_20000448);\n    result = 0xffffffff;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_0800b524": "process_data_0800b524",
                "param_1": "input",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3",
                "puVar1": "dataPtr",
                "uVar2": "result",
                "uVar3": "bitMask",
                "uVar4": "size"
            },
            "calling": [
                "FUN_0800b4d0"
            ],
            "called": [
                "FUN_0800b51c",
                "FUN_0800b520"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800b5b0": {
            "entrypoint": "0x0800b5b0",
            "current_name": "FUNC_0800b5b0",
            "code": "\nvoid FUNC_0800b5b0(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800b5b0": "FUNC_0800b5b0"
            },
            "calling": [
                "FUN_0800b3e8",
                "FUN_080001ac",
                "FUN_08000188"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800b5bc": {
            "entrypoint": "0x0800b5bc",
            "current_name": "FUNC_0800b5bc",
            "code": "\nvoid FUNC_0800b5bc(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800b5bc": "FUNC_0800b5bc"
            },
            "calling": [],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        }
    },
    "used_tokens": 201480,
    "layers": [
        [
            "FUN_08000188",
            "FUN_080001ac",
            "FUN_08000210",
            "FUN_08000478",
            "FUN_080018cc",
            "FUN_080018fc",
            "FUN_0800192c",
            "FUN_08002870",
            "FUN_08002896",
            "FUN_08002f74",
            "FUN_08002fac",
            "FUN_080035ec",
            "FUN_08003980",
            "FUN_08005250",
            "FUN_080052ac",
            "FUN_080052dc",
            "FUN_08005360",
            "FUN_0800587c",
            "FUN_0800597c",
            "FUN_080059f8",
            "FUN_08005a68",
            "FUN_08005a84",
            "FUN_08005bdc",
            "FUN_080064ec",
            "FUN_08006950",
            "FUN_08006998",
            "FUN_080069b4",
            "FUN_080069e4",
            "FUN_08006a18",
            "FUN_08006a58",
            "FUN_08006a8c",
            "FUN_08006ac0",
            "FUN_08006b00",
            "FUN_08006b54",
            "FUN_08006ba0",
            "FUN_08006c04",
            "FUN_08006c70",
            "FUN_08006e88",
            "FUN_0800733e",
            "FUN_0800738e",
            "FUN_080073d4",
            "FUN_08007402",
            "FUN_08007430",
            "FUN_0800756c",
            "FUN_080076c8",
            "FUN_08007854",
            "FUN_080078f4",
            "FUN_080079e0",
            "FUN_08007a10",
            "FUN_08007b70",
            "FUN_08007bc2",
            "FUN_08007bf0",
            "FUN_08007c40",
            "FUN_08007c5e",
            "FUN_08007da8",
            "FUN_08007e1c",
            "FUN_08007e58",
            "FUN_08007e84",
            "FUN_08007ea4",
            "FUN_080082d0",
            "FUN_080082d4",
            "FUN_0800854c",
            "FUN_0800856c",
            "FUN_08008590",
            "FUN_0800881c",
            "FUN_08008a02",
            "FUN_08008a74",
            "FUN_08008b74",
            "FUN_08008ba0",
            "FUN_08008bf0",
            "FUN_08008c30",
            "FUN_08008cd8",
            "FUN_08008cdc",
            "FUN_08008e3c",
            "FUN_08008e44",
            "FUN_08008eec",
            "FUN_08009054",
            "FUN_0800919c",
            "FUN_08009278",
            "FUN_0800b2d4",
            "FUN_0800b2e0",
            "FUN_0800b3dc",
            "FUN_0800b3e8",
            "FUN_0800b430",
            "FUN_0800b524"
        ],
        [
            "FUN_080001f8",
            "FUN_08000268",
            "FUN_080002f0",
            "FUN_080004fc",
            "FUN_080028bc",
            "FUN_08002908",
            "FUN_08002ef0",
            "FUN_08002f40",
            "FUN_08005238",
            "FUN_08005324",
            "FUN_08005760",
            "FUN_08005778",
            "FUN_08005790",
            "FUN_080057e4",
            "FUN_08005984",
            "FUN_08005a98",
            "FUN_08005c30",
            "FUN_08005cec",
            "FUN_0800640c",
            "FUN_08006628",
            "FUN_08006c9c",
            "FUN_08006ce0",
            "FUN_08006cf6",
            "FUN_08006d2e",
            "FUN_08006d4a",
            "FUN_08006d66",
            "FUN_08006d8a",
            "FUN_08006d98",
            "FUN_08006dc4",
            "FUN_08006de0",
            "FUN_08006dfe",
            "FUN_08006e1a",
            "FUN_08007520",
            "FUN_0800778c",
            "FUN_08007884",
            "FUN_080079c0",
            "FUN_08007d08",
            "FUN_08008250",
            "FUN_0800826a",
            "FUN_08008640",
            "FUN_08008894",
            "FUN_08008b00",
            "FUN_08009204",
            "FUN_080095b8",
            "FUN_08009654",
            "FUN_08009798"
        ],
        [
            "FUN_080002a0",
            "FUN_080002b6",
            "FUN_08000310",
            "FUN_08000340",
            "FUN_0800056c",
            "FUN_080025e8",
            "FUN_0800283a",
            "FUN_08002f24",
            "FUN_0800369c",
            "FUN_080036c6",
            "FUN_080036f0",
            "FUN_08003778",
            "FUN_080053a0",
            "FUN_08005814",
            "FUN_0800583c",
            "FUN_0800585c",
            "FUN_0800618c",
            "FUN_08006680",
            "FUN_080066cc",
            "FUN_08006d72",
            "FUN_08007a70",
            "FUN_08008af0",
            "FUN_08008b10",
            "FUN_08008b24",
            "FUN_080091fc",
            "FUN_08009214",
            "FUN_08009228",
            "FUN_0800923c",
            "FUN_0800a1bc",
            "FUN_0800a348",
            "FUN_0800adf0",
            "FUN_0800b2e8"
        ],
        [
            "FUN_08000374",
            "FUN_080003ec",
            "FUN_0800195c",
            "FUN_08002638",
            "FUN_08003740",
            "FUN_0800375c",
            "FUN_080037fc",
            "FUN_08003826",
            "FUN_08003a18",
            "FUN_08004030",
            "FUN_08004148",
            "FUN_080041a0",
            "FUN_08004228",
            "FUN_0800423c",
            "FUN_08005900",
            "FUN_080059b4",
            "FUN_08007436",
            "FUN_08007ad0",
            "FUN_08007c7c",
            "FUN_08007f54",
            "FUN_08008b4c",
            "FUN_08008b60",
            "FUN_08009250",
            "FUN_08009264",
            "FUN_080098d0",
            "FUN_08009b24"
        ],
        [
            "FUN_0800184c",
            "FUN_08002978",
            "FUN_080039a0",
            "FUN_08004250",
            "FUN_080046d0",
            "FUN_08004900",
            "FUN_08004940",
            "FUN_08004bc0",
            "FUN_08004bf4",
            "FUN_08004c2a",
            "FUN_080074c8",
            "FUN_08007e08",
            "FUN_08008190",
            "FUN_08008286",
            "FUN_08009318",
            "FUN_080094c0",
            "FUN_0800981c",
            "FUN_0800af78"
        ],
        [
            "FUN_08001994",
            "FUN_080029d8",
            "FUN_08002afc",
            "FUN_08002c18",
            "FUN_08004c48",
            "FUN_08004d2c",
            "FUN_08004d7c",
            "FUN_08004e30",
            "FUN_08007930",
            "thunk_FUN_08009990",
            "FUN_08009990",
            "FUN_0800a5a0"
        ],
        [
            "FUN_080004ac",
            "FUN_08001d4c",
            "FUN_08002a94",
            "FUN_08002ba8",
            "FUN_08002e08",
            "FUN_080044e8",
            "FUN_08004dd2",
            "FUN_08007756",
            "FUN_08009d78"
        ],
        [
            "FUN_08002edc",
            "FUN_080051b4",
            "FUN_08009410",
            "FUN_080096e8"
        ],
        [
            "FUN_08003004",
            "FUN_08003618"
        ],
        [
            "FUN_080058a0"
        ],
        [
            "FUN_08003a74"
        ],
        [
            "FUN_08001e98",
            "FUN_08002fd4"
        ],
        [
            "FUN_08000220",
            "FUN_08001f00",
            "FUN_08002408",
            "FUN_080024c4",
            "FUN_0800525c"
        ],
        [
            "FUN_080005b4"
        ],
        [
            "FUN_080039bc"
        ],
        [
            "FUN_08003b98"
        ],
        [
            "FUN_08003f34"
        ],
        [
            "FUN_08001ddc"
        ],
        [
            "FUN_08007540"
        ]
    ],
    "locked_functions": []
}