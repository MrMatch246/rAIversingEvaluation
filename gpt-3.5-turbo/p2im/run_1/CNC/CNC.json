{
    "functions": {
        "FUN_0800192c": {
            "renaming": {
                "FUN_0800192c": "set_value_based_on_flag_0800192c",
                "PTR_DAT_08001954": "ptr_to_flag",
                "PTR_DAT_08001958": "ptr_to_value"
            },
            "code": "void set_value_based_on_flag_0800192c(void)\n{\n    int flag = PTR_DAT_08001954[0x28];\n    int* PTR_DAT_08001958 = (int*)PTR_DAT_08001958;\n    if ((flag & 8) == 0) {\n        *PTR_DAT_08001958 = 0;\n    }\n    else {\n        *PTR_DAT_08001958 = 1;\n    }\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800192c",
            "calling": [
                "FUN_08004e30",
                "FUN_08001ddc"
            ],
            "imported": false,
            "current_name": "set_value_based_on_flag_0800192c"
        },
        "FUN_08006950": {
            "renaming": {
                "FUN_08006950": "set_param_08006950",
                "param_1": "param_val",
                "PTR_DAT_08006994": "ptr",
                "DAT_08006994": "ptr_base",
                "mask": "mask",
                "param_bits": "param_bits",
                "constant_bits": "constant_bits"
            },
            "code": "void set_param_08006950(uint param_val) {\n    uint* PTR_DAT_08006994 = (uint*)(DAT_08006994 + 0xc);\n    uint mask = 0xf8ff;\n    uint param_bits = (param_val & 7) << 8;\n    uint constant_bits = 0x5fa0000;\n    *PTR_DAT_08006994 = (*PTR_DAT_08006994 & mask) | param_bits | constant_bits;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006950",
            "calling": [
                "FUN_08006ce0"
            ],
            "imported": false,
            "current_name": "set_param_08006950"
        },
        "FUN_08008ba0": {
            "renaming": {
                "FUN_08008ba0": "convert_to_int_08008ba0",
                "param_1": "num1",
                "param_2": "num2",
                "uVar1": "shifted_num1",
                "iVar2": "temp",
                "uVar3": "uVar3",
                "result": "result"
            },
            "code": "uint convert_to_int_08008ba0(uint num1, uint num2) {\n    uint result;\n    int temp = num2 * 2 + 0x200000;\n    if (num2 * 2 < 0xffe00000) {\n        if (temp < 0) {\n            return 0;\n        }\n        uint temp_shifted = temp >> 0x15;\n        uint uVar3 = -temp_shifted - 0x3e1;\n        if (temp_shifted < 0xfffffc20 && uVar3 != 0) {\n            uint shifted_num1 = (num2 << 0xb | 0x80000000 | num1 >> 0x15) >> (uVar3 & 0xff);\n            if ((num2 & 0x80000000) != 0) {\n                shifted_num1 = -shifted_num1;\n            }\n            result = shifted_num1;\n        }\n        else {\n            result = 0;\n        }\n    }\n    else if ((num1 | num2 << 0xc) != 0) {\n        result = 0;\n    }\n    else {\n        if ((num2 & 0x80000000) == 0) {\n            result = 0x7fffffff;\n        }\n        else {\n            result = num2;\n        }\n    }\n    return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008ba0",
            "calling": [
                "FUN_0800a348",
                "FUN_080005b4",
                "FUN_08009d78",
                "FUN_0800a5a0",
                "FUN_08003004",
                "FUN_0800adf0",
                "FUN_080095b8",
                "FUN_08002c18"
            ],
            "imported": false,
            "current_name": "convert_to_int_08008ba0"
        },
        "FUN_08005a5c": {
            "renaming": {
                "FUN_08005a5c": "do_nothing_08005a5c"
            },
            "code": "\nvoid do_nothing_08005a5c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005a5c",
            "calling": [
                "FUN_080059f8"
            ],
            "imported": false,
            "current_name": "do_nothing_08005a5c"
        },
        "FUN_08005984": {
            "renaming": {
                "FUN_08005984": "software_interrupt_handler_08005984",
                "param_1": "interrupt_number",
                "uVar1": "return_value",
                "PTR_DAT_080059b0": "ptr",
                "send_software_interrupt_0800597c": "send_interrupt"
            },
            "code": "int software_interrupt_handler_08005984(int interrupt_number, int param, int unused){\n    int* PTR_DAT_080059b0 = (int*) PTR_DAT_080059b0;\n    if (*PTR_DAT_080059b0 == 0){\n        return send_software_interrupt_0800597c(interrupt_number, param, unused);\n    }\n    else{\n        return 0;\n    }\n}",
            "called": [
                "FUN_0800597c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005984",
            "calling": [
                "FUN_08007540"
            ],
            "imported": false,
            "current_name": "software_interrupt_handler_08005984"
        },
        "FUN_08007a10": {
            "renaming": {
                "FUN_08007a10": "set_flags_08007a10",
                "param_1": "flag_value",
                "DAT_08007a64": "data_block",
                "DAT_08007a68": "FLAG_B",
                "DAT_08007a6c": "FLAG_C",
                "OFFSET_FLAG": "0x40",
                "FLAG_A": "0x40000000",
                "FLAG_A_BITMASK": "1",
                "FLAG_B_BITMASK": "2",
                "FLAG_C_BITMASK": "4"
            },
            "code": "void set_flags_08007a10(int flag_value)\n{\n  if (flag_value == FLAG_A)\n  {\n    *(uint *)(DAT_08007a64 + OFFSET_FLAG) = *(uint *)(DAT_08007a64 + OFFSET_FLAG) | FLAG_A_BITMASK;\n  }\n  else if (flag_value == DAT_08007a68)\n  {\n    *(uint *)(DAT_08007a64 + OFFSET_FLAG) = *(uint *)(DAT_08007a64 + OFFSET_FLAG) | DAT_08007a68_BITMASK;\n  }\n  else if (flag_value == DAT_08007a6c)\n  {\n    *(uint *)(DAT_08007a64 + OFFSET_FLAG) = *(uint *)(DAT_08007a64 + OFFSET_FLAG) | DAT_08007a6c_BITMASK;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007a10",
            "calling": [
                "FUN_08007ad0",
                "FUN_08007d08"
            ],
            "imported": false,
            "current_name": "set_flags_08007a10"
        },
        "FUN_0800856c": {
            "renaming": {
                "FUN_0800856c": "calculate_shifted_value_0800856c",
                "param_1": "num",
                "uVar1": "mask",
                "uVar2": "abs_num",
                "uVar3": "shift_amount",
                "iVar4": "leading_zeroes",
                "uVar5": "shift_amount_complement",
                "uVar6": "is_negative",
                "in_r12": "value_high",
                "bVar7": "shift_carry",
                "bVar8": "shift_zero",
                "bVar9": "shift_carry_complement"
            },
            "code": "ulonglong calculate_shifted_value_0800856c(uint num)\n{\n    uint mask = 0x80000000;\n    uint i = 0;\n    for (i = 0; i < 32; i++) {\n        if (num & mask) {\n            break;\n        }\n        mask >>= 1;\n    }\n    return i;\n}\n\n\nulonglong calculate_shifted_value_0800856c(uint num)\n{\n    if (num == 0) {\n        return 0;\n    }\n    bool is_negative = num & 0x80000000;\n    uint abs_num = is_negative ? -num : num;\n    uint leading_zeroes = calculate_shifted_value_0800856c(abs_num);\n    uint shift_amount = leading_zeroes + 0x15;\n    uint shifted_value = 0;\n    uint value_high = 0;\n    bool carry = shift_amount >= 0x20;\n    if (carry) {\n        shifted_value = abs_num << (shift_amount - 0x20);\n    }\n    else {\n        shifted_value = abs_num >> (0x20 - shift_amount);\n    }\n    if (carry) {\n        value_high = abs_num >> (shift_amount - 0x20);\n    }\n    else {\n        value_high = 0;\n    }\n    if (shift_amount >= 0x433) {\n        uint shift_amount_complement = ~(shift_amount - 0x432);\n        if (shift_amount_complement > 0x1e) {\n            return (ulonglong)(is_negative ? -num : num);\n        }\n        else {\n            uint shift_amount_final = shift_amount_complement + 0x13;\n            if (shift_amount_final == 0 || (shift_amount_final < 0) != ((shift_amount_complement - 0x1f) < 0xc)) {\n                shift_amount_complement++;\n                return (ulonglong)((is_negative ? 0x80000000 : 0) | (shifted_value >> shift_amount_complement) | (value_high << (0x20 - shift_amount_complement)));\n            }\n            else {\n                uint shift_amount_high = 0xc - shift_amount_final;\n                return (ulonglong)((is_negative ? -num : num) | (value_high >> (0x20 - shift_amount_high)) | (shifted_value << shift_amount_high));\n            }\n        }\n    }\n    else {\n        return (ulonglong)((is_negative ? 0x80000000 : 0) | (shifted_value + (0x432 - shift_amount) * 0x100000) | value_high);\n    }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800856c",
            "calling": [
                "FUN_08009d78",
                "FUN_0800a5a0",
                "FUN_08002c18"
            ],
            "imported": false,
            "current_name": "calculate_shifted_value_0800856c"
        },
        "FUN_08008b00": {
            "renaming": {
                "FUN_08008b00": "check_params_and_return_value_08008b00",
                "param_1": "input_value",
                "check_params_08008a74": "check_parameters"
            },
            "code": "undefined4 check_params_and_return_value_08008b00(undefined4 input_value)\n{\n  check_parameters();\n  return input_value;\n}",
            "called": [
                "FUN_08008a74"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008b00",
            "calling": [
                "FUN_08008b24",
                "FUN_08008af0",
                "FUN_08008b10"
            ],
            "imported": false,
            "current_name": "check_params_and_return_value_08008b00"
        },
        "FUN_0800585c": {
            "renaming": {
                "FUN_0800585c": "process_if_second_element_equals_two_then_set_to_three_and_process_data_0800585c",
                "PTR_DAT_08005878": "PTR_DAT",
                "process_data_08005790": "process_data"
            },
            "code": "void process_if_second_element_equals_two_then_set_to_three_and_process_data_0800585c(void)\n{\n  if (PTR_DAT_08005878_08005878[1] == '\\x02') {\n    PTR_DAT_08005878_08005878[1] = 3;\n    process_data_08005790();\n  }\n  return;\n}",
            "called": [
                "FUN_08005790"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800585c",
            "calling": [
                "FUN_08001e98",
                "FUN_080024c4",
                "FUN_08003a74"
            ],
            "imported": false,
            "current_name": "process_if_second_element_equals_two_then_set_to_three_and_process_data_0800585c"
        },
        "FUN_0800597c": {
            "renaming": {
                "FUN_0800597c": "send_software_interrupt_0800597c",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "void send_software_interrupt_0800597c(void)\n{\n  software_interrupt(SOFTWARE_INTERRUPT_CODE);\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800597c",
            "calling": [
                "FUN_08005984"
            ],
            "imported": false,
            "current_name": "send_software_interrupt_0800597c"
        },
        "FUN_08009798": {
            "renaming": {
                "FUN_08009798": "convert_to_double_08009798",
                "param_1": "num1",
                "param_2": "num2",
                "param_3": "param_3",
                "param_4": "param_4",
                "uVar1": "exponent",
                "uVar2": "shift_amount",
                "lVar3": "mantissa"
            },
            "code": "long long convert_to_double_08009798(uint32_t num1, uint32_t num2, undefined4 param_3, undefined4 param_4)\n{\n  uint32_t shift_amount = (num2 << 1) >> 0x15;\n  uint32_t exponent = shift_amount - 0x3ff;\n  if ((int)exponent < 0x14) {\n    if ((int)exponent < 0) {\n      return ((unsigned long long)num2 & 0x80000000) << 0x20;\n    }\n    long long mantissa = (unsigned long long)(num2 & ~(DAT_08009814 >> (exponent & 0xff))) << 0x20;\n  }\n  else {\n    if ((int)exponent < 0x34) {\n      return CONCAT44(num2,num1 & ~(0xffffffffU >> (shift_amount - 0x413 & 0xff)));\n    }\n    if (exponent != 0x400) {\n      return CONCAT44(num2,num1);\n    }\n    long long mantissa = FUNC_080082d4(num1,num2,num1,num2,param_4);\n  }\n  return mantissa;\n}",
            "called": [
                "FUN_080082d4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009798",
            "calling": [
                "FUN_080005b4",
                "FUN_08004e30",
                "FUN_08003b98"
            ],
            "imported": false,
            "current_name": "convert_to_double_08009798"
        },
        "FUN_08008cd8": {
            "renaming": {
                "FUN_08008cd8": "FUNC_08008cd8"
            },
            "code": "\nuint FUNC_08008cd8(uint param_1,uint param_2,undefined4 param_3,uint param_4)\n\n{\n  int iVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  int iVar7;\n  bool bVar8;\n  \n  uVar2 = param_2 ^ 0x80000000;\n  uVar4 = param_1 << 1;\n  bVar8 = uVar4 == 0;\n  if (!bVar8) {\n    param_4 = param_2 << 1;\n    bVar8 = param_4 == 0;\n  }\n  if (!bVar8) {\n    bVar8 = uVar4 == param_4;\n  }\n  iVar7 = (int)uVar4 >> 0x18;\n  if (!bVar8) {\n    bVar8 = iVar7 == -1;\n  }\n  if (!bVar8) {\n    bVar8 = (int)param_4 >> 0x18 == -1;\n  }\n  if (bVar8) {\n    iVar1 = (int)(param_2 << 1) >> 0x18;\n    if (iVar7 == -1 || iVar1 == -1) {\n      uVar4 = uVar2;\n      if (iVar7 == -1) {\n        uVar4 = param_1;\n      }\n      if (iVar7 != -1 || iVar1 != -1) {\n        uVar2 = uVar4;\n      }\n      bVar8 = (uVar4 & 0x7fffff) == 0;\n      if (bVar8) {\n        bVar8 = (uVar2 & 0x7fffff) == 0;\n      }\n      if (bVar8) {\n        bVar8 = uVar4 == uVar2;\n      }\n      if (!bVar8) {\n        uVar4 = uVar4 | 0x400000;\n      }\n      return uVar4;\n    }\n    if (((param_1 ^ uVar2) & 0x7fffffff) != 0) {\n      if (uVar4 == 0) {\n        param_1 = uVar2;\n      }\n      return param_1;\n    }\n    if (param_1 != uVar2) {\n      return 0;\n    }\n    if ((uVar4 & 0xff000000) == 0) {\n      uVar2 = param_1 << 1;\n      if ((param_1 & 0x80000000) != 0) {\n        uVar2 = uVar2 | 0x80000000;\n      }\n      return uVar2;\n    }\n    if (uVar4 < 0xfe000000) {\n      return param_1 + 0x800000;\n    }\n    param_1 = param_1 & 0x80000000;\nLAB_08008e12:\n    return param_1 | 0x7f800000;\n  }\n  uVar4 = uVar4 >> 0x18;\n  param_4 = param_4 >> 0x18;\n  uVar6 = param_4 - uVar4;\n  bVar8 = uVar6 != 0;\n  uVar5 = uVar4;\n  if (bVar8 && uVar4 <= param_4) {\n    uVar5 = uVar4 + uVar6;\n  }\n  if (bVar8 && uVar4 <= param_4) {\n    uVar2 = uVar2 ^ param_1;\n  }\n  if (bVar8 && uVar4 <= param_4) {\n    param_1 = param_1 ^ uVar2;\n  }\n  if (bVar8 && uVar4 <= param_4) {\n    uVar2 = uVar2 ^ param_1;\n  }\n  if (param_4 < uVar4) {\n    uVar6 = -uVar6;\n  }\n  if (0x19 < uVar6) {\n    return param_1;\n  }\n  uVar4 = param_1 & 0xffffff | 0x800000;\n  if ((param_1 & 0x80000000) != 0) {\n    uVar4 = -uVar4;\n  }\n  uVar3 = uVar2 & 0xffffff | 0x800000;\n  if ((uVar2 & 0x80000000) != 0) {\n    uVar3 = -uVar3;\n  }\n  if (uVar5 == uVar6) {\n    uVar3 = uVar3 ^ 0x800000;\n    if (uVar5 == 0) {\n      uVar4 = uVar4 ^ 0x800000;\n      uVar5 = 1;\n    }\n    else {\n      uVar6 = uVar6 - 1;\n    }\n  }\n  uVar4 = uVar4 + ((int)uVar3 >> (uVar6 & 0xff));\n  uVar3 = uVar3 << (0x20 - uVar6 & 0xff);\n  param_1 = uVar4 & 0x80000000;\n  if ((int)uVar4 < 0) {\n    bVar8 = uVar3 != 0;\n    uVar3 = -uVar3;\n    uVar4 = -uVar4 - (uint)bVar8;\n  }\n  if (uVar4 < 0x800000) {\n    uVar2 = uVar3 & 0x80000000;\n    uVar3 = uVar3 << 1;\n    uVar4 = uVar4 * 2 + (uint)(uVar2 != 0);\n    uVar2 = uVar5 - 2;\n    if (uVar5 - 1 == 0 || uVar4 < 0x800000) {\n      iVar7 = count_leading_zeroes(uVar4);\n      uVar6 = iVar7 - 8;\n      uVar4 = uVar4 << (uVar6 & 0xff);\n      if ((int)uVar2 < (int)uVar6) {\n        uVar4 = uVar4 >> (-(uVar2 - uVar6) & 0xff);\n      }\n      else {\n        uVar4 = uVar4 + (uVar2 - uVar6) * 0x800000;\n      }\n      return uVar4 | param_1;\n    }\n  }\n  else {\n    uVar2 = uVar5 - 1;\n    if (0xffffff < uVar4) {\n      uVar2 = uVar4 & 1;\n      uVar4 = uVar4 >> 1;\n      uVar3 = (uint)(uVar2 != 0) << 0x1f | uVar3 >> 1;\n      uVar2 = uVar5;\n      if (0xfd < uVar5) goto LAB_08008e12;\n    }\n  }\n  uVar4 = uVar4 + uVar2 * 0x800000 + (uint)(0x7fffffff < uVar3);\n  if (uVar3 == 0x80000000) {\n    uVar4 = uVar4 & 0xfffffffe;\n  }\n  return uVar4 | param_1;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08008cd8",
            "calling": [
                "FUN_08004940",
                "FUN_080005b4",
                "FUN_08002908",
                "FUN_080028bc",
                "FUN_08003004",
                "FUN_08002978",
                "FUN_08002408",
                "FUN_08001f00"
            ],
            "imported": false,
            "current_name": "FUNC_08008cd8"
        },
        "FUN_08007930": {
            "renaming": {
                "FUN_08007930": "decode_bits_and_calculate_sum_if_not_zero_08007930",
                "puVar1": "data_ptr",
                "uVar2": "decoded_bits",
                "uVar3": "sum",
                "uVar4": "previous_sum",
                "iVar5": "index"
            },
            "code": "void decode_bits_and_calculate_sum_if_not_zero_08007930(void)\n{\n  uint32_t* data_ptr = PTR_DAT_080079b8;\n  if (*(int*)PTR_DAT_080079bc != 0) {\n    int index = *(int*)(data_ptr + 0x14);\n    uint32_t decoded_bits = decode_bits_from_memory_08007884();\n    *(uint32_t*)(data_ptr + index * 4) = decoded_bits;\n    if (*(int*)(data_ptr + 0x14) == 3) {\n      index = 0;\n    }\n    else {\n      index = *(int*)(data_ptr + 0x14) + 1;\n    }\n    *(int*)(data_ptr + 0x14) = index;\n    uint32_t sum = calculate_sum_of_four_values_080078f4();\n    uint32_t previous_sum = *(uint32_t*)(data_ptr + 0x10);\n    if (sum != previous_sum) {\n      uint32_t difference = (~previous_sum & sum);\n      if (difference != 0) {\n        activate_sensors_if_needed_080074c8(difference);\n      }\n      difference = (~sum & previous_sum);\n      if (difference != 0) {\n        set_bit_in_short_at_offset_080073d4_if_odd_08007520(difference);\n      }\n      *(uint32_t*)(data_ptr + 0x10) = sum;\n    }\n  }\n  return;\n}",
            "called": [
                "FUN_08007520",
                "FUN_080074c8",
                "FUN_080078f4",
                "FUN_08007884"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007930",
            "calling": [
                "FUN_08007756"
            ],
            "imported": false,
            "current_name": "decode_bits_and_calculate_sum_if_not_zero_08007930"
        },
        "FUN_080082ba": {
            "renaming": {
                "FUN_080082ba": "do_nothing_080082ba"
            },
            "code": "\nvoid do_nothing_080082ba(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080082ba",
            "calling": [
                "FUN_08001ddc"
            ],
            "imported": false,
            "current_name": "do_nothing_080082ba"
        },
        "FUN_08000188": {
            "renaming": {
                "FUN_08000188": "initialize_if_empty_08000188",
                "param_1": "input_param",
                "*PTR_DAT_080001a0": "is_empty",
                "DAT_080001a4": "is_not_zero",
                "PTR_FUN_080001a8": "default_return_value"
            },
            "code": "undefined* initialize_if_empty_08000188(undefined* input_param) {\\n    if (*PTR_DAT_080001a0 == \"\\0\") {\\n        if (DAT_080001a4 != 0) {\\n            input_param = PTR_FUN_080001a8;\\n        }\\n        *PTR_DAT_080001a0 = 1;\\n    }\\n    return input_param;\\n}",
            "called": [
                "FUN_0800b5b0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000188",
            "calling": [],
            "imported": false,
            "current_name": "initialize_if_empty_08000188"
        },
        "FUN_080082d0": {
            "renaming": {
                "FUN_080082d0": "FUNC_080082d0"
            },
            "code": "\nulonglong FUNC_080082d0(uint param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  int iVar1;\n  byte bVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  uint uVar7;\n  int iVar8;\n  uint uVar9;\n  uint uVar10;\n  uint uVar11;\n  uint uVar12;\n  bool bVar13;\n  bool bVar14;\n  bool bVar15;\n  \n  uVar6 = param_4 ^ 0x80000000;\n  uVar9 = param_2 << 1;\n  param_4 = param_4 << 1;\n  bVar13 = ((param_2 ^ uVar6) & 0x7fffffff) == 0;\n  bVar14 = bVar13 && param_1 == param_3;\n  if (!bVar13 || param_1 != param_3) {\n    bVar14 = (uVar9 | param_1) == 0;\n  }\n  if (!bVar14) {\n    bVar14 = (param_4 | param_3) == 0;\n  }\n  iVar8 = (int)uVar9 >> 0x15;\n  if (!bVar14) {\n    bVar14 = iVar8 == -1;\n  }\n  iVar1 = (int)param_4 >> 0x15;\n  if (!bVar14) {\n    bVar14 = iVar1 == -1;\n  }\n  if (bVar14) {\n    if (iVar8 == -1 || iVar1 == -1) {\n      uVar9 = uVar6;\n      uVar11 = param_3;\n      if (iVar8 == -1) {\n        uVar9 = param_2;\n        uVar11 = param_1;\n      }\n      if (iVar8 != -1 || iVar1 != -1) {\n        param_3 = uVar11;\n        uVar6 = uVar9;\n      }\n      bVar14 = (uVar11 | uVar9 << 0xc) == 0;\n      if (bVar14) {\n        bVar14 = (param_3 | uVar6 << 0xc) == 0;\n      }\n      if (bVar14) {\n        bVar14 = uVar9 == uVar6;\n      }\n      if (!bVar14) {\n        uVar9 = uVar9 | 0x80000;\n      }\n      return CONCAT44(uVar9,uVar11);\n    }\n    if (((param_2 ^ uVar6) & 0x7fffffff) != 0 || param_1 != param_3) {\n      if ((uVar9 | param_1) == 0) {\n        param_1 = param_3;\n        param_2 = uVar6;\n      }\n      return CONCAT44(param_2,param_1);\n    }\n    if (param_2 != uVar6) {\n      return 0;\n    }\n    if (uVar9 >> 0x15 == 0) {\n      bVar14 = (param_1 & 0x80000000) != 0;\n      uVar6 = param_2 * 2 + (uint)bVar14;\n      if (CARRY4(param_2,param_2) || CARRY4(param_2 * 2,(uint)bVar14)) {\n        uVar6 = uVar6 | 0x80000000;\n      }\n      return CONCAT44(uVar6,param_1 << 1);\n    }\n    if (uVar9 < 0xffc00000) {\n      return CONCAT44(param_2 + 0x100000,param_1);\n    }\n    param_2 = param_2 & 0x80000000;\nLAB_08008514:\n    return (ulonglong)(param_2 | 0x7ff00000) << 0x20;\n  }\n  uVar9 = uVar9 >> 0x15;\n  param_4 = param_4 >> 0x15;\n  uVar11 = param_4 - uVar9;\n  bVar14 = uVar11 != 0;\n  if (param_4 < uVar9) {\n    uVar11 = -uVar11;\n  }\n  uVar10 = param_1;\n  uVar7 = param_2;\n  if (bVar14 && uVar9 <= param_4) {\n    uVar9 = uVar9 + uVar11;\n    uVar10 = param_3;\n    uVar7 = uVar6;\n    param_3 = param_1;\n    uVar6 = param_2;\n  }\n  if (0x36 < uVar11) {\n    return CONCAT44(uVar7,uVar10);\n  }\n  uVar4 = uVar7 & 0xfffff | 0x100000;\n  if ((uVar7 & 0x80000000) != 0) {\n    bVar14 = uVar10 != 0;\n    uVar10 = -uVar10;\n    uVar4 = -uVar4 - (uint)bVar14;\n  }\n  uVar7 = uVar6 & 0xfffff | 0x100000;\n  if ((uVar6 & 0x80000000) != 0) {\n    bVar14 = param_3 != 0;\n    param_3 = -param_3;\n    uVar7 = -uVar7 - (uint)bVar14;\n  }\n  if (uVar9 == uVar11) {\n    uVar7 = uVar7 ^ 0x100000;\n    if (uVar9 == 0) {\n      uVar4 = uVar4 ^ 0x100000;\n      uVar9 = 1;\n    }\n    else {\n      uVar11 = uVar11 - 1;\n    }\n  }\n  uVar6 = -uVar11 + 0x20;\n  if ((int)uVar11 < 0x21) {\n    uVar12 = param_3 << (uVar6 & 0xff);\n    param_3 = param_3 >> (uVar11 & 0xff);\n    uVar3 = uVar10 + param_3;\n    uVar5 = uVar7 << (uVar6 & 0xff);\n    uVar6 = uVar3 + uVar5;\n    uVar4 = uVar4 + CARRY4(uVar10,param_3) + ((int)uVar7 >> (uVar11 & 0xff)) +\n            (uint)CARRY4(uVar3,uVar5);\n  }\n  else {\n    uVar12 = uVar7 << (-uVar11 + 0x40 & 0xff);\n    if (param_3 != 0) {\n      uVar12 = uVar12 | 2;\n    }\n    uVar7 = (int)uVar7 >> (uVar11 - 0x20 & 0xff);\n    uVar6 = uVar10 + uVar7;\n    uVar4 = uVar4 + ((int)uVar7 >> 0x1f) + (uint)CARRY4(uVar10,uVar7);\n  }\n  param_2 = uVar4 & 0x80000000;\n  uVar11 = uVar4;\n  if ((int)uVar4 < 0) {\n    bVar14 = uVar12 == 0;\n    uVar12 = -uVar12;\n    uVar11 = -uVar6;\n    uVar6 = -(uint)!bVar14 - uVar6;\n    uVar11 = -(uint)(bVar14 <= uVar11) - uVar4;\n  }\n  if (0xfffff < uVar11) {\n    uVar10 = uVar9 - 1;\n    if (0x1fffff < uVar11) {\n      uVar10 = uVar11 & 1;\n      uVar11 = uVar11 >> 1;\n      bVar2 = (byte)uVar6;\n      uVar6 = (uint)(uVar10 != 0) << 0x1f | uVar6 >> 1;\n      uVar12 = (uint)(bVar2 & 1) << 0x1f | uVar12 >> 1;\n      uVar10 = uVar9;\n      if (0xffbfffff < uVar9 * 0x200000) goto LAB_08008514;\n    }\nLAB_080083e0:\n    bVar14 = 0x7fffffff < uVar12;\n    if (uVar12 == 0x80000000) {\n      bVar14 = (uVar6 & 1) != 0;\n    }\n    return CONCAT44(uVar11 + uVar10 * 0x100000 + (uint)CARRY4(uVar6,(uint)bVar14) | param_2,\n                    uVar6 + bVar14);\n  }\n  bVar13 = (uVar12 & 0x80000000) != 0;\n  uVar12 = uVar12 << 1;\n  uVar10 = uVar6 * 2;\n  bVar14 = CARRY4(uVar6,uVar6);\n  uVar6 = uVar6 * 2 + (uint)bVar13;\n  uVar11 = uVar11 * 2 + (uint)(bVar14 || CARRY4(uVar10,(uint)bVar13));\n  uVar10 = uVar9 - 2;\n  if (uVar9 - 1 != 0 && 0xfffff < uVar11) goto LAB_080083e0;\n  uVar7 = uVar6;\n  uVar9 = uVar11;\n  if (uVar11 == 0) {\n    uVar7 = 0;\n    uVar9 = uVar6;\n  }\n  iVar8 = count_leading_zeroes(uVar9);\n  if (uVar11 == 0) {\n    iVar8 = iVar8 + 0x20;\n  }\n  uVar11 = iVar8 - 0xb;\n  bVar15 = SBORROW4(uVar11,0x20);\n  uVar6 = iVar8 - 0x2b;\n  bVar14 = (int)uVar6 < 0;\n  bVar13 = uVar6 == 0;\n  if ((int)uVar11 < 0x20) {\n    bVar15 = SCARRY4(uVar6,0xc);\n    iVar8 = iVar8 + -0x1f;\n    bVar14 = iVar8 < 0;\n    bVar13 = iVar8 == 0;\n    uVar6 = uVar11;\n    if (!bVar13 && bVar14 == bVar15) {\n      uVar7 = uVar9 << (uVar11 & 0xff);\n      uVar9 = uVar9 >> (0xcU - iVar8 & 0xff);\n      goto LAB_08008458;\n    }\n  }\n  if (bVar13 || bVar14 != bVar15) {\n    uVar12 = 0x20 - uVar6;\n  }\n  uVar9 = uVar9 << (uVar6 & 0xff);\n  if (bVar13 || bVar14 != bVar15) {\n    uVar9 = uVar9 | uVar7 >> (uVar12 & 0xff);\n  }\n  if (bVar13 || bVar14 != bVar15) {\n    uVar7 = uVar7 << (uVar6 & 0xff);\n  }\nLAB_08008458:\n  if ((int)uVar11 <= (int)uVar10) {\n    return CONCAT44(uVar9 + (uVar10 - uVar11) * 0x100000 | param_2,uVar7);\n  }\n  uVar6 = ~(uVar10 - uVar11);\n  if ((int)uVar6 < 0x1f) {\n    iVar8 = uVar6 - 0x13;\n    if (iVar8 != 0 && iVar8 < 0 == SCARRY4(uVar6 - 0x1f,0xc)) {\n      return CONCAT44(uVar4,uVar7 >> (0x20 - (0xcU - iVar8) & 0xff) | uVar9 << (0xcU - iVar8 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    uVar6 = uVar6 + 1;\n    return CONCAT44(param_2 | uVar9 >> (uVar6 & 0xff),\n                    uVar7 >> (uVar6 & 0xff) | uVar9 << (0x20 - uVar6 & 0xff));\n  }\n  return CONCAT44(uVar4,uVar9 >> (uVar6 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x080082d0",
            "calling": [
                "FUN_08009410",
                "FUN_08009990",
                "FUN_080096e8",
                "FUN_0800af78",
                "FUN_08004940",
                "FUN_08009d78",
                "FUN_08003004",
                "FUN_08001f00",
                "FUN_08009b24",
                "FUN_0800a1bc",
                "FUN_0800a348",
                "FUN_0800a5a0",
                "FUN_0800adf0"
            ],
            "imported": false,
            "current_name": "FUNC_080082d0"
        },
        "FUN_08009318": {
            "renaming": {
                "FUN_08009318": "calculate_value_from_parameters_08009318",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "iVar1": "difference",
                "uVar2": "shift_amount",
                "uVar3": "mask",
                "bVar4": "carry_out",
                "uVar5": "result",
                "lVar6": "final_result"
            },
            "code": "longlong calculate_value_from_parameters_08009318(uint param1, uint param2, undefined4 param3, undefined4 param4)\n{\n  int difference;\n  uint shift_amount;\n  uint mask;\n  bool carry_out;\n  undefined8 result;\n  longlong final_result;\n\n  shift_amount = (param2 << 1) >> 0x15;\n  difference = (int)(shift_amount - 0x3ff);\n\n  if (difference < 0x14)\n  {\n    if (difference < 0)\n    {\n      result = FUNC_080082d4(param1, param2, DAT_08009400, DAT_08009404, param4);\n      if (is_end_of_string_08008b60((int)result, (int)((ulonglong)result >> 0x20), 0, 0) != 0)\n      {\n        if ((int)param2 < 0)\n        {\n          final_result = -0x8000000000000000;\n        }\n        else\n        {\n          param1 = param1 | param2;\n          if (param1 != 0)\n          {\n            final_result = (ulonglong)DAT_0800940c << 0x20;\n          }\n          else\n          {\n            final_result = CONCAT44(param2, param1);\n          }\n        }\n      }\n      else\n      {\n        final_result = CONCAT44(param2, param1);\n      }\n    }\n    else\n    {\n      mask = DAT_08009408 >> (difference & 0xff);\n      if ((param2 & mask | param1) != 0)\n      {\n        result = FUNC_080082d4(param1, param2, DAT_08009400, DAT_08009404, param4);\n        if (is_end_of_string_08008b60((int)result, (int)((ulonglong)result >> 0x20), 0, 0) != 0)\n        {\n          if (0 < (int)param2)\n          {\n            param2 = param2 + (0x100000 >> (difference & 0xff));\n          }\n          else\n          {\n            carry_out = CARRY4(1 << (0x34 - difference & 0xff), param1);\n            param1 = (1 << (0x34 - difference & 0xff)) + param1;\n            if (carry_out != false)\n            {\n              param2 = param2 + 1;\n            }\n          }\n          final_result = CONCAT44(param2, param1 & ~mask);\n        }\n        else\n        {\n          final_result = CONCAT44(param2, param1);\n        }\n      }\n      else\n      {\n        final_result = CONCAT44(param2, param1);\n      }\n    }\n  }\n  else if (difference < 0x34)\n  {\n    mask = 0xffffffff >> ((shift_amount - 0x413) & 0xff);\n    if ((mask & param1) != 0)\n    {\n      result = FUNC_080082d4(param1, param2, DAT_08009400, DAT_08009404, param4);\n      if (is_end_of_string_08008b60((int)result, (int)((ulonglong)result >> 0x20), 0, 0) != 0)\n      {\n        if (0 < (int)param2)\n        {\n          if (difference == 0x14)\n          {\n            param2 = param2 + 1;\n          }\n          else\n          {\n            carry_out = CARRY4(1 << (0x34 - shift_amount & 0xff), param1);\n            param1 = (1 << (0x34 - shift_amount & 0xff)) + param1;\n            if (carry_out != false)\n            {\n              param2 = param2 + 1;\n            }\n          }\n        }\n        final_result = CONCAT44(param2, param1 & ~mask);\n      }\n      else\n      {\n        final_result = CONCAT44(param2, param1);\n      }\n    }\n    else\n    {\n      final_result = CONCAT44(param2, param1);\n    }\n  }\n  else\n  {\n    if (difference == 0x400)\n    {\n      final_result = FUNC_080082d4();\n    }\n    else\n    {\n      final_result = CONCAT44(param2, param1);\n    }\n  }\n  return final_result;\n}",
            "called": [
                "FUN_080082d4",
                "FUN_08008b60"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009318",
            "calling": [
                "FUN_08001994",
                "FUN_08003004",
                "FUN_08002c18"
            ],
            "imported": false,
            "current_name": "calculate_value_from_parameters_08009318"
        },
        "FUN_080018cc": {
            "renaming": {
                "FUN_080018cc": "update_param_080018cc",
                "param_1": "new_param",
                "*(uint *)(DAT_080018f8 + 0x14)": "ptr",
                "DAT_080018f8": "DAT",
                "0x14": "offset",
                "0xfffffaaf": "mask"
            },
            "code": "void update_param_080018cc(uint new_param) {\n    uint* *(uint *)(DAT_080018f8 + 0x14) = (uint*)(DAT_080018f8_080018f8 + 0x14);\n    uint old_value = **(uint *)(DAT_080018f8 + 0x14);\n    uint mask = 0xfffffaaf;\n    uint new_value = (new_param | (old_value & mask));\n    **(uint *)(DAT_080018f8 + 0x14) = new_value;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080018cc",
            "calling": [
                "FUN_08001994"
            ],
            "imported": false,
            "current_name": "update_param_080018cc"
        },
        "FUN_080079e0": {
            "renaming": {
                "FUN_080079e0": "set_bit_in_array_080079e0",
                "param_1": "bit_index",
                "DAT_08007a0c": "array_start_address"
            },
            "code": "void set_bit_in_array_080079e0(uint8_t bit_index){\n    uint8_t byte_index = bit_index >> 5;\n    uint32_t* array_ptr = (uint32_t*)(DAT_08007a0c + byte_index * 4);\n    uint8_t bit_mask = 1 << (bit_index & 0x1f);\n    *array_ptr = bit_mask;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080079e0",
            "calling": [
                "FUN_08007a70"
            ],
            "imported": false,
            "current_name": "set_bit_in_array_080079e0"
        },
        "FUN_08006a58": {
            "renaming": {
                "FUN_08006a58": "set_bit_in_array_08006a58",
                "param_1": "bit_position",
                "DAT_08006a88": "array_start"
            },
            "code": "void set_bit_in_array_08006a58(uint8_t bit_position) {\n    uint32_t* array_ptr = (uint32_t*)(DAT_08006a88 + (((uint32_t)bit_position >> 5) + 0x40) * 4);\n    uint32_t bit_mask = 1 << (bit_position & 0x1f);\n    *array_ptr = bit_mask;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006a58",
            "calling": [
                "FUN_08006dc4"
            ],
            "imported": false,
            "current_name": "set_bit_in_array_08006a58"
        },
        "FUN_08005a84": {
            "renaming": {
                "FUN_08005a84": "get_value_from_pointer_08005a84",
                "PTR_DAT_08005a94": "ptr_to_value"
            },
            "code": "int get_value_from_pointer_08005a84() {\n    int *PTR_DAT_08005a94 = PTR_DAT_08005a94;\n    int value = *PTR_DAT_08005a94;\n    return value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005a84",
            "calling": [
                "FUN_08005a98",
                "FUN_0800618c",
                "FUN_08005cec",
                "FUN_08000268",
                "FUN_08007756"
            ],
            "imported": false,
            "current_name": "get_value_from_pointer_08005a84"
        },
        "FUN_08008b10": {
            "renaming": {
                "FUN_08008b10": "is_not_null_08008b10",
                "in_ZR": "input_char",
                "check_params_and_return_value_08008b00": "check_params_and_return_value"
            },
            "code": "bool is_not_null_08008b10(void)\\n{\\n  char input_char;\\n  check_params_and_return_value();\\n  return input_char != \"\\0\";\\n}",
            "called": [
                "FUN_08008b00"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008b10",
            "calling": [
                "FUN_08009d78",
                "FUN_0800a5a0"
            ],
            "imported": false,
            "current_name": "is_not_null_08008b10"
        },
        "FUN_08004e30": {
            "renaming": {
                "FUN_08004e30": "FUNC_08004e30"
            },
            "code": "\nundefined4 FUNC_08004e30(int param_1,uint param_2)\n\n{\n  undefined uVar1;\n  undefined2 uVar2;\n  undefined4 uVar3;\n  int iVar4;\n  undefined8 uVar5;\n  \n  switch(param_1) {\n  case 0:\n  case 1:\n  case 2:\n    iVar4 = check_if_carry_or_zero_0800923c(param_2,0);\n    if (iVar4 != 0) {\n      return 8;\n    }\n    *(uint *)(PTR_DAT_080051a8 + param_1 * 4) = param_2;\n    break;\n  case 3:\n    iVar4 = is_end_of_string_08009228(param_2,DAT_080051ac);\n    if (iVar4 != 0) {\n      return 9;\n    }\n    uVar5 = convert_to_big_endian_08008590(param_2);\n    uVar5 = convert_to_double_08009654((int)uVar5,(int)((ulonglong)uVar5 >> 0x20));\n    uVar1 = calculate_shifted_value_08008bf0((int)uVar5,(int)((ulonglong)uVar5 >> 0x20));\n    PTR_DAT_080051a8[0xd] = uVar1;\n    break;\n  case 4:\n    *(uint *)(PTR_DAT_080051a8 + 0x10) = param_2;\n    break;\n  case 5:\n    *(uint *)(PTR_DAT_080051a8 + 0x14) = param_2;\n    break;\n  case 6:\n    uVar5 = convert_to_big_endian_08008590(param_2);\n    uVar5 = convert_to_double_08009798((int)uVar5,(int)((ulonglong)uVar5 >> 0x20));\n    uVar2 = calculate_shifted_value_08008bf0((int)uVar5,(int)((ulonglong)uVar5 >> 0x20));\n    *(undefined2 *)(PTR_DAT_080051a8 + 0x18) = uVar2;\n    break;\n  case 7:\n    uVar5 = convert_to_big_endian_08008590(param_2);\n    uVar5 = convert_to_double_08009654((int)uVar5,(int)((ulonglong)uVar5 >> 0x20));\n    uVar1 = calculate_shifted_value_08008bf0((int)uVar5,(int)((ulonglong)uVar5 >> 0x20));\n    PTR_DAT_080051a8[0x3c] = uVar1;\n    break;\n  case 8:\n    uVar3 = FUNC_08008eec(param_2,DAT_080051b0);\n    uVar3 = FUNC_08008eec(uVar3,DAT_080051b0);\n    *(undefined4 *)(PTR_DAT_080051a8 + 0x20) = uVar3;\n    break;\n  case 9:\n    *(uint *)(PTR_DAT_080051a8 + 0x24) = param_2 & 0x7fffffff;\n    break;\n  case 10:\n    *(uint *)(PTR_DAT_080051a8 + 0x1c) = param_2;\n    break;\n  case 0xb:\n    uVar5 = convert_to_big_endian_08008590(param_2);\n    uVar5 = convert_to_double_08009654((int)uVar5,(int)((ulonglong)uVar5 >> 0x20));\n    uVar1 = calculate_shifted_value_08008bf0((int)uVar5,(int)((ulonglong)uVar5 >> 0x20));\n    PTR_DAT_080051a8[0x3e] = uVar1;\n    break;\n  case 0xc:\n    uVar5 = convert_to_big_endian_08008590(param_2);\n    uVar5 = convert_to_double_08009654((int)uVar5,(int)((ulonglong)uVar5 >> 0x20));\n    uVar1 = calculate_shifted_value_08008bf0((int)uVar5,(int)((ulonglong)uVar5 >> 0x20));\n    PTR_DAT_080051a8[0x3d] = uVar1;\n    break;\n  case 0xd:\n    iVar4 = check_input_is_not_null_08009214_08009214(param_2,0);\n    if (iVar4 == 0) {\n      PTR_DAT_080051a8[0x28] = PTR_DAT_080051a8[0x28] | 1;\n    }\n    else {\n      PTR_DAT_080051a8[0x28] = PTR_DAT_080051a8[0x28] & 0xfe;\n    }\n    break;\n  case 0xe:\n    iVar4 = check_input_is_not_null_08009214_08009214(param_2,0);\n    if (iVar4 == 0) {\n      PTR_DAT_080051a8[0x28] = PTR_DAT_080051a8[0x28] | 2;\n    }\n    else {\n      PTR_DAT_080051a8[0x28] = PTR_DAT_080051a8[0x28] & 0xfd;\n    }\n    break;\n  case 0xf:\n    iVar4 = check_input_is_not_null_08009214_08009214(param_2,0);\n    if (iVar4 == 0) {\n      PTR_DAT_080051a8[0x28] = PTR_DAT_080051a8[0x28] | 4;\n    }\n    else {\n      PTR_DAT_080051a8[0x28] = PTR_DAT_080051a8[0x28] & 0xfb;\n    }\n    break;\n  case 0x10:\n    iVar4 = check_input_is_not_null_08009214_08009214(param_2,0);\n    if (iVar4 == 0) {\n      PTR_DAT_080051a8[0x28] = PTR_DAT_080051a8[0x28] | 8;\n    }\n    else {\n      PTR_DAT_080051a8[0x28] = PTR_DAT_080051a8[0x28] & 0xf7;\n    }\n    set_value_based_on_flag_0800192c();\n    break;\n  case 0x11:\n    iVar4 = check_input_is_not_null_08009214_08009214(param_2,0);\n    if (iVar4 == 0) {\n      PTR_DAT_080051a8[0x28] = PTR_DAT_080051a8[0x28] | 0x10;\n    }\n    else {\n      PTR_DAT_080051a8[0x28] = PTR_DAT_080051a8[0x28] & 0xef;\n    }\n    break;\n  case 0x12:\n    uVar5 = convert_to_big_endian_08008590(param_2);\n    uVar5 = convert_to_double_08009798((int)uVar5,(int)((ulonglong)uVar5 >> 0x20));\n    uVar2 = calculate_shifted_value_08008bf0((int)uVar5,(int)((ulonglong)uVar5 >> 0x20));\n    *(undefined2 *)(PTR_DAT_080051a8 + 0x2a) = uVar2;\n    break;\n  case 0x13:\n    *(uint *)(PTR_DAT_080051a8 + 0x2c) = param_2;\n    break;\n  case 0x14:\n    *(uint *)(PTR_DAT_080051a8 + 0x30) = param_2;\n    break;\n  case 0x15:\n    uVar5 = convert_to_big_endian_08008590(param_2);\n    uVar5 = convert_to_double_08009654((int)uVar5,(int)((ulonglong)uVar5 >> 0x20));\n    uVar2 = calculate_shifted_value_08008bf0((int)uVar5,(int)((ulonglong)uVar5 >> 0x20));\n    *(undefined2 *)(PTR_DAT_080051a8 + 0x34) = uVar2;\n    break;\n  case 0x16:\n    *(uint *)(PTR_DAT_080051a8 + 0x38) = param_2;\n    break;\n  case 0x17:\n    uVar5 = convert_to_big_endian_08008590(param_2);\n    uVar5 = convert_to_double_08009798((int)uVar5,(int)((ulonglong)uVar5 >> 0x20));\n    uVar2 = calculate_shifted_value_08008bf0((int)uVar5,(int)((ulonglong)uVar5 >> 0x20));\n    *(undefined2 *)(PTR_DAT_080051a8 + 0x1a) = uVar2;\n    break;\n  default:\n    return 6;\n  }\n  write_to_memory_and_checksum_08004c2a();\n  return 0;\n}\n\n",
            "called": [
                "FUN_08008590",
                "FUN_0800192c",
                "FUN_08009214",
                "FUN_08009798",
                "FUN_08008bf0",
                "FUN_08009228",
                "FUN_08004c2a",
                "FUN_0800923c",
                "FUN_08009654",
                "FUN_08008eec"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08004e30",
            "calling": [
                "FUN_08003b98"
            ],
            "imported": false,
            "current_name": "FUNC_08004e30"
        },
        "FUN_08008c30": {
            "renaming": {
                "FUN_08008c30": "calculate_float_bits_08008c30",
                "param_1": "exponent_bits",
                "param_2": "mantissa_bits",
                "uVar1": "result",
                "uVar2": "exponent_bits_shifted",
                "uVar3": "normalized_exponent_bits_shifted",
                "in_r12": "exponent_bits_shifted_with_offset",
                "bVar4": "is_result_zero",
                "bVar5": "is_exponent_bits_shifted_less_than_threshold",
                "shift_amount": "shift_amount",
                "mantissa_bits_shifted": "mantissa_bits_shifted",
                "normalized_mantissa_bits": "normalized_mantissa_bits"
            },
            "code": "uint calculate_float_bits_08008c30(uint exponent_bits, uint mantissa_bits) {\n    uint exponent_bits_shifted = mantissa_bits * 2;\n    bool is_exponent_bits_shifted_less_than_threshold = exponent_bits_shifted < 0x70000000;\n    uint normalized_exponent_bits_shifted = exponent_bits_shifted + 0x90000000;\n    uint result = normalized_exponent_bits_shifted;\n    if (!is_exponent_bits_shifted_less_than_threshold) {\n        uint exponent_bits_shifted_with_offset = exponent_bits_shifted + 0x8fe00000;\n        result = exponent_bits_shifted_with_offset;\n    }\n    bool is_result_zero = result == 0;\n    if (!is_exponent_bits_shifted_less_than_threshold && normalized_exponent_bits_shifted >= 0x200000) {\n        is_result_zero = exponent_bits_shifted_with_offset == 0x1fc00000;\n    }\n    if (((is_exponent_bits_shifted_less_than_threshold || normalized_exponent_bits_shifted < 0x200000) || 0x1fc00000 < exponent_bits_shifted_with_offset) || is_result_zero) {\n        if ((mantissa_bits & 0x40000000) != 0) {\n            if (((int)exponent_bits_shifted >> 0x15 == -1) && ((exponent_bits | mantissa_bits << 0xc) != 0)) {\n                return 0x7fc00000;\n            }\n            return mantissa_bits & 0x80000000 | 0x7f800000;\n        }\n        if ((int)(exponent_bits_shifted + 0x92e00000) < 0 != SCARRY4(normalized_exponent_bits_shifted,0x2e00000)) {\n            return mantissa_bits & 0x80000000;\n        }\n        uint shift_amount = 0x18 - (exponent_bits_shifted + 0x92e00000 >> 0x15);\n        uint mantissa_bits_shifted = exponent_bits >> (shift_amount & 0xff);\n        if (exponent_bits << (0x20 - shift_amount & 0xff) != 0) {\n            mantissa_bits_shifted = mantissa_bits_shifted | 1;\n        }\n        uint normalized_mantissa_bits = mantissa_bits & 0x1fffff | 0x100000;\n        exponent_bits = mantissa_bits_shifted | normalized_mantissa_bits << (0x20 - shift_amount & 0xff);\n        normalized_mantissa_bits = (normalized_mantissa_bits >> (shift_amount & 0xff)) << 1;\n    }\n    result = (mantissa_bits & 0x80000000 | exponent_bits >> 0x1d) + normalized_mantissa_bits * 4 + (uint)(0x7fffffff < exponent_bits * 8);\n    if (exponent_bits * 8 == 0x80000000) {\n        result = result & 0xfffffffe;\n    }\n    return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008c30",
            "calling": [
                "FUN_08001994",
                "FUN_080046d0",
                "FUN_08004940",
                "FUN_080005b4",
                "FUN_08003004",
                "FUN_0800056c",
                "FUN_08002638",
                "FUN_08002978",
                "FUN_080044e8",
                "FUN_08001f00"
            ],
            "imported": false,
            "current_name": "calculate_float_bits_08008c30"
        },
        "FUN_080082d4": {
            "renaming": {
                "FUN_080082d4": "FUNC_080082d4"
            },
            "code": "\nulonglong FUNC_080082d4(uint param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  int iVar1;\n  byte bVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  int iVar6;\n  uint uVar7;\n  uint uVar8;\n  uint uVar9;\n  uint uVar10;\n  uint uVar11;\n  uint uVar12;\n  bool bVar13;\n  bool bVar14;\n  bool bVar15;\n  \n  uVar7 = param_2 << 1;\n  uVar9 = param_4 << 1;\n  bVar13 = ((param_2 ^ param_4) & 0x7fffffff) == 0;\n  bVar14 = bVar13 && param_1 == param_3;\n  if (!bVar13 || param_1 != param_3) {\n    bVar14 = (uVar7 | param_1) == 0;\n  }\n  if (!bVar14) {\n    bVar14 = (uVar9 | param_3) == 0;\n  }\n  iVar6 = (int)uVar7 >> 0x15;\n  if (!bVar14) {\n    bVar14 = iVar6 == -1;\n  }\n  iVar1 = (int)uVar9 >> 0x15;\n  if (!bVar14) {\n    bVar14 = iVar1 == -1;\n  }\n  if (bVar14) {\n    if (iVar6 == -1 || iVar1 == -1) {\n      uVar9 = param_4;\n      uVar7 = param_3;\n      if (iVar6 == -1) {\n        uVar9 = param_2;\n        uVar7 = param_1;\n      }\n      if (iVar6 != -1 || iVar1 != -1) {\n        param_3 = uVar7;\n        param_4 = uVar9;\n      }\n      bVar14 = (uVar7 | uVar9 << 0xc) == 0;\n      if (bVar14) {\n        bVar14 = (param_3 | param_4 << 0xc) == 0;\n      }\n      if (bVar14) {\n        bVar14 = uVar9 == param_4;\n      }\n      if (!bVar14) {\n        uVar9 = uVar9 | 0x80000;\n      }\n      return CONCAT44(uVar9,uVar7);\n    }\n    if (((param_2 ^ param_4) & 0x7fffffff) != 0 || param_1 != param_3) {\n      if ((uVar7 | param_1) == 0) {\n        param_1 = param_3;\n        param_2 = param_4;\n      }\n      return CONCAT44(param_2,param_1);\n    }\n    if (param_2 != param_4) {\n      return 0;\n    }\n    if (uVar7 >> 0x15 == 0) {\n      bVar14 = (param_1 & 0x80000000) != 0;\n      uVar9 = param_2 * 2 + (uint)bVar14;\n      if (CARRY4(param_2,param_2) || CARRY4(param_2 * 2,(uint)bVar14)) {\n        uVar9 = uVar9 | 0x80000000;\n      }\n      return CONCAT44(uVar9,param_1 << 1);\n    }\n    if (uVar7 < 0xffc00000) {\n      return CONCAT44(param_2 + 0x100000,param_1);\n    }\n    param_2 = param_2 & 0x80000000;\nLAB_08008514:\n    return (ulonglong)(param_2 | 0x7ff00000) << 0x20;\n  }\n  uVar7 = uVar7 >> 0x15;\n  uVar9 = uVar9 >> 0x15;\n  uVar10 = uVar9 - uVar7;\n  bVar14 = uVar10 != 0;\n  if (uVar9 < uVar7) {\n    uVar10 = -uVar10;\n  }\n  uVar8 = param_1;\n  uVar5 = param_2;\n  if (bVar14 && uVar7 <= uVar9) {\n    uVar7 = uVar7 + uVar10;\n    uVar8 = param_3;\n    uVar5 = param_4;\n    param_3 = param_1;\n    param_4 = param_2;\n  }\n  if (0x36 < uVar10) {\n    return CONCAT44(uVar5,uVar8);\n  }\n  uVar9 = uVar5 & 0xfffff | 0x100000;\n  if ((uVar5 & 0x80000000) != 0) {\n    bVar14 = uVar8 != 0;\n    uVar8 = -uVar8;\n    uVar9 = -uVar9 - (uint)bVar14;\n  }\n  uVar5 = param_4 & 0xfffff | 0x100000;\n  if ((param_4 & 0x80000000) != 0) {\n    bVar14 = param_3 != 0;\n    param_3 = -param_3;\n    uVar5 = -uVar5 - (uint)bVar14;\n  }\n  if (uVar7 == uVar10) {\n    uVar5 = uVar5 ^ 0x100000;\n    if (uVar7 == 0) {\n      uVar9 = uVar9 ^ 0x100000;\n      uVar7 = 1;\n    }\n    else {\n      uVar10 = uVar10 - 1;\n    }\n  }\n  uVar12 = -uVar10 + 0x20;\n  if ((int)uVar10 < 0x21) {\n    uVar11 = param_3 << (uVar12 & 0xff);\n    param_3 = param_3 >> (uVar10 & 0xff);\n    uVar3 = uVar8 + param_3;\n    uVar4 = uVar5 << (uVar12 & 0xff);\n    uVar12 = uVar3 + uVar4;\n    uVar9 = uVar9 + CARRY4(uVar8,param_3) + ((int)uVar5 >> (uVar10 & 0xff)) +\n            (uint)CARRY4(uVar3,uVar4);\n  }\n  else {\n    uVar11 = uVar5 << (-uVar10 + 0x40 & 0xff);\n    if (param_3 != 0) {\n      uVar11 = uVar11 | 2;\n    }\n    uVar5 = (int)uVar5 >> (uVar10 - 0x20 & 0xff);\n    uVar12 = uVar8 + uVar5;\n    uVar9 = uVar9 + ((int)uVar5 >> 0x1f) + (uint)CARRY4(uVar8,uVar5);\n  }\n  param_2 = uVar9 & 0x80000000;\n  uVar10 = uVar9;\n  if ((int)uVar9 < 0) {\n    bVar14 = uVar11 == 0;\n    uVar11 = -uVar11;\n    uVar10 = -uVar12;\n    uVar12 = -(uint)!bVar14 - uVar12;\n    uVar10 = -(uint)(bVar14 <= uVar10) - uVar9;\n  }\n  if (0xfffff < uVar10) {\n    uVar8 = uVar7 - 1;\n    if (0x1fffff < uVar10) {\n      uVar9 = uVar10 & 1;\n      uVar10 = uVar10 >> 1;\n      bVar2 = (byte)uVar12;\n      uVar12 = (uint)(uVar9 != 0) << 0x1f | uVar12 >> 1;\n      uVar11 = (uint)(bVar2 & 1) << 0x1f | uVar11 >> 1;\n      uVar8 = uVar7;\n      if (0xffbfffff < uVar7 * 0x200000) goto LAB_08008514;\n    }\nLAB_080083e0:\n    bVar14 = 0x7fffffff < uVar11;\n    if (uVar11 == 0x80000000) {\n      bVar14 = (uVar12 & 1) != 0;\n    }\n    return CONCAT44(uVar10 + uVar8 * 0x100000 + (uint)CARRY4(uVar12,(uint)bVar14) | param_2,\n                    uVar12 + bVar14);\n  }\n  bVar13 = (uVar11 & 0x80000000) != 0;\n  uVar11 = uVar11 << 1;\n  uVar8 = uVar12 * 2;\n  bVar14 = CARRY4(uVar12,uVar12);\n  uVar12 = uVar12 * 2 + (uint)bVar13;\n  uVar10 = uVar10 * 2 + (uint)(bVar14 || CARRY4(uVar8,(uint)bVar13));\n  uVar8 = uVar7 - 2;\n  if (uVar7 - 1 != 0 && 0xfffff < uVar10) goto LAB_080083e0;\n  uVar5 = uVar12;\n  uVar7 = uVar10;\n  if (uVar10 == 0) {\n    uVar5 = 0;\n    uVar7 = uVar12;\n  }\n  iVar6 = count_leading_zeroes(uVar7);\n  if (uVar10 == 0) {\n    iVar6 = iVar6 + 0x20;\n  }\n  uVar12 = iVar6 - 0xb;\n  bVar15 = SBORROW4(uVar12,0x20);\n  uVar10 = iVar6 - 0x2b;\n  bVar14 = (int)uVar10 < 0;\n  bVar13 = uVar10 == 0;\n  if ((int)uVar12 < 0x20) {\n    bVar15 = SCARRY4(uVar10,0xc);\n    iVar6 = iVar6 + -0x1f;\n    bVar14 = iVar6 < 0;\n    bVar13 = iVar6 == 0;\n    uVar10 = uVar12;\n    if (!bVar13 && bVar14 == bVar15) {\n      uVar5 = uVar7 << (uVar12 & 0xff);\n      uVar7 = uVar7 >> (0xcU - iVar6 & 0xff);\n      goto LAB_08008458;\n    }\n  }\n  if (bVar13 || bVar14 != bVar15) {\n    uVar11 = 0x20 - uVar10;\n  }\n  uVar7 = uVar7 << (uVar10 & 0xff);\n  if (bVar13 || bVar14 != bVar15) {\n    uVar7 = uVar7 | uVar5 >> (uVar11 & 0xff);\n  }\n  if (bVar13 || bVar14 != bVar15) {\n    uVar5 = uVar5 << (uVar10 & 0xff);\n  }\nLAB_08008458:\n  if ((int)uVar12 <= (int)uVar8) {\n    return CONCAT44(uVar7 + (uVar8 - uVar12) * 0x100000 | param_2,uVar5);\n  }\n  uVar10 = ~(uVar8 - uVar12);\n  if ((int)uVar10 < 0x1f) {\n    iVar6 = uVar10 - 0x13;\n    if (iVar6 != 0 && iVar6 < 0 == SCARRY4(uVar10 - 0x1f,0xc)) {\n      return CONCAT44(uVar9,uVar5 >> (0x20 - (0xcU - iVar6) & 0xff) | uVar7 << (0xcU - iVar6 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    uVar10 = uVar10 + 1;\n    return CONCAT44(param_2 | uVar7 >> (uVar10 & 0xff),\n                    uVar5 >> (uVar10 & 0xff) | uVar7 << (0x20 - uVar10 & 0xff));\n  }\n  return CONCAT44(uVar9,uVar7 >> (uVar10 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x080082d4",
            "calling": [
                "FUN_08009318",
                "FUN_080094c0",
                "FUN_08009990",
                "FUN_0800af78",
                "FUN_08009d78",
                "FUN_0800b2e8",
                "FUN_08001f00",
                "FUN_08009b24",
                "FUN_0800a1bc",
                "FUN_0800a348",
                "FUN_0800a5a0",
                "FUN_08009798",
                "FUN_0800adf0",
                "FUN_08009654"
            ],
            "imported": false,
            "current_name": "FUNC_080082d4"
        },
        "FUN_08007bf0": {
            "renaming": {
                "FUN_08007bf0": "update_data_08007bf0",
                "param_1": "new_data",
                "_DAT_4000002c": "PTR_4000002c",
                "_DAT_40000024": "PTR_40000024"
            },
            "code": "void update_data_08007bf0(uint new_data) {\n  _DAT_4000002c = new_data;\n  if (new_data <= _DAT_40000024) {\n    _DAT_40000024 = new_data;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007bf0",
            "calling": [
                "FUN_08005324"
            ],
            "imported": false,
            "current_name": "update_data_08007bf0"
        },
        "FUN_08008590": {
            "renaming": {
                "FUN_08008590": "convert_to_big_endian_08008590",
                "param_1": "value",
                "param_2": "unknown_param1",
                "param_3": "unknown_param2",
                "param_4": "unknown_param3",
                "uVar1": "temp2",
                "uVar2": "temp5",
                "uVar3": "temp7",
                "uVar4": "temp8",
                "uVar5": "temp1",
                "uVar7": "bit_count",
                "iVar6": "shift_amount",
                "bVar8": "mask",
                "bVar9": "temp9",
                "bVar10": "temp6",
                "in_r12": "temp4",
                "CONCAT44": "big_endian_value",
                "SBORROW4": "__builtin_sub_overflow",
                "SCARRY4": "__builtin_add_overflow",
                "__builtin_clz": "__builtin_clz",
                "LAB_08008458": "LAB_08008458"
            },
            "code": "uint64_t convert_to_big_endian_08008590(uint32_t value, uint32_t unknown_param1, uint32_t unknown_param2, uint32_t unknown_param3)\n{\n  uint32_t temp1, temp2, temp3, temp4, temp5, temp6, temp7, temp8, temp9;\n  uint32_t bit_count, shift_amount, mask;\n  uint64_t big_endian_value;\n  temp1 = value << 1;\n  bit_count = temp1 == 0;\n  temp2 = (value & 0x80000000) != 0;\n  temp3 = (bit_count << 31) | ((temp1 >> 3) >> 1) | temp2;\n  temp4 = value << 29;\n  if (!bit_count)\n  {\n    temp5 = value & 0xff000000;\n    bit_count = temp5 == 0;\n  }\n  if (!bit_count)\n  {\n    bit_count = temp5 == 0xff000000;\n  }\n  if (!bit_count)\n  {\n    big_endian_value = (uint64_t)temp3 << 32 | temp4;\n    big_endian_value ^= 0x3800000000000000;\n    return big_endian_value;\n  }\n  if ((temp1 & 0xffffff) == 0)\n  {\n    big_endian_value = (uint64_t)temp3 << 32 | temp4;\n    return big_endian_value;\n  }\n  if (temp5 == 0xff000000)\n  {\n    big_endian_value = (uint64_t)temp3 << 32 | temp4;\n    big_endian_value |= 0x8000000000000;\n    return big_endian_value;\n  }\n  temp6 = temp4;\n  temp7 = temp3;\n  if ((temp3 & 0x1fffffff) == 0)\n  {\n    temp6 = 0;\n    temp7 = temp4;\n  }\n  bit_count = __builtin_clz(temp7);\n  if ((temp3 & 0x1fffffff) == 0)\n  {\n    bit_count += 0x20;\n  }\n  shift_amount = bit_count - 0xb;\n  mask = shift_amount < 0x20;\n  temp8 = shift_amount - 0x2b;\n  temp9 = temp8 == 0;\n  if (shift_amount < 0x20)\n  {\n    mask = (temp8 + 0xc < 0) ? 1 : (temp8 + 0xc == 0);\n    bit_count += -0x1f;\n    temp9 = bit_count == 0;\n    temp8 = shift_amount;\n    if (!temp9 && mask)\n    {\n      temp6 = temp4 << (temp8 & 0xff);\n      temp4 = temp4 >> ((0xcU - bit_count) & 0xff);\n      goto LAB_08008458;\n    }\n  }\n  if (temp9 || mask)\n  {\n    temp2 = 0x20 - temp8;\n  }\n  temp4 = temp4 << (temp8 & 0xff);\n  if (temp9 || mask)\n  {\n    temp4 |= temp6 >> ((temp2) & 0xff);\n  }\n  if (temp9 || mask)\n  {\n    temp6 = temp6 << (temp8 & 0xff);\n  }\nLAB_08008458:\n  if (shift_amount < 0x381)\n  {\n    big_endian_value = (uint64_t)temp4 + ((0x380 - shift_amount) * 0x100000) | ((uint64_t)temp3 << 32);\n    return big_endian_value;\n  }\n  bit_count = ~(0x380 - shift_amount);\n  if (0x1e < bit_count)\n  {\n    big_endian_value = ((uint64_t)temp3 << 32) | (temp4 >> (bit_count - 0x1f) & 0x80000000ffffffff);\n    return big_endian_value;\n  }\n  temp8 = bit_count - 0x13;\n  if (temp8 == 0 || (temp8 < 0) != ((bit_count - 0x1f) < 0xc))\n  {\n    bit_count += 1;\n    big_endian_value = ((uint64_t)temp3 << 32) | (temp4 >> (bit_count & 0xff) | (temp6 << (0x20 - bit_count) & 0xffffffff));\n    return big_endian_value;\n  }\n  big_endian_value = ((uint64_t)temp3 << 32) | (temp6 >> (0x20 - (0xcU - temp8) & 0xff) | (temp4 << (0xcU - temp8) & 0xffffffff));\n  big_endian_value &= 0x80000000ffffffff;\n  return big_endian_value;\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008590",
            "calling": [
                "FUN_080046d0",
                "FUN_08004940",
                "FUN_08003004",
                "FUN_0800056c",
                "FUN_08002638",
                "FUN_08002978",
                "FUN_08004e30",
                "FUN_08001f00",
                "FUN_08003b98",
                "FUN_08002c18",
                "FUN_08001994",
                "FUN_080005b4",
                "FUN_080044e8",
                "FUN_08002408"
            ],
            "imported": false,
            "current_name": "convert_to_big_endian_08008590"
        },
        "FUN_08007ad0": {
            "renaming": {
                "FUN_08007ad0": "initialize_data_and_flags_08007ad0",
                "_DAT_40000000": "data_ptr[0]",
                "_DAT_40000004": "data_ptr[1]",
                "_DAT_40000008": "data_ptr[2]",
                "_DAT_4000000c": "data_ptr[3]",
                "_DAT_40000010": "data_ptr[4]",
                "_DAT_40000018": "data_ptr[5]",
                "_DAT_4000001c": "data_ptr[6]",
                "_DAT_40000020": "data_ptr[7]",
                "_DAT_40000024": "data_ptr[8]",
                "_DAT_40000028": "data_ptr[9]",
                "_DAT_4000002c": "data_ptr[10]",
                "_DAT_40000034": "data_ptr[12]",
                "_DAT_40000038": "data_ptr[13]",
                "_DAT_4000003c": "data_ptr[14]",
                "_DAT_40000040": "data_ptr[15]",
                "_DAT_40000048": "data_ptr[16]",
                "_DAT_4000004c": "data_ptr[17]",
                "PTR_DAT_08007b68": "global_var_2",
                "DAT_08007b6c": "global_var_1",
                "set_flags_08007a10": "set_flags",
                "set_data_and_bit_in_array_08007a70": "set_data_and_bit_in_array"
            },
            "code": "void initialize_data_and_flags_08007ad0(void)\n{\n  set_flags(0x40000000);\n  uint32_t *data_ptr = (uint32_t*)0x40000000;\n  for(int i = 0; i < 11; i++)\n  {\n    data_ptr[i] = 0;\n  }\n  data_ptr[11] = (uint32_t)((uint64_t)DAT_08007b6c * (uint64_t)*(uint32_t *)PTR_DAT_08007b68 >> 0x38) - 1;\n  for(int i = 13; i < 19; i++)\n  {\n    data_ptr[i] = 0;\n  }\n  set_data_and_bit_in_array(0x40000000,0,0);\n  return;\n}\n",
            "called": [
                "FUN_08007a70",
                "FUN_08007a10"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007ad0",
            "calling": [
                "FUN_08007e08"
            ],
            "imported": false,
            "current_name": "initialize_data_and_flags_08007ad0"
        },
        "FUN_080005b4": {
            "renaming": {
                "FUN_080005b4": "FUNC_080005b4"
            },
            "code": "\nuint FUNC_080005b4(undefined4 param_1)\n\n{\n  undefined *puVar1;\n  undefined uVar2;\n  int iVar3;\n  undefined4 uVar4;\n  uint uVar5;\n  undefined4 uVar6;\n  undefined8 uVar7;\n  undefined4 local_94 [4];\n  undefined4 local_84;\n  undefined4 local_80;\n  undefined4 local_7c;\n  undefined4 uStack_78;\n  undefined4 uStack_74;\n  undefined4 auStack_70 [6];\n  undefined4 local_58;\n  byte local_52;\n  undefined local_51 [20];\n  byte local_3d;\n  byte local_3c;\n  byte local_3b;\n  byte local_3a;\n  char local_39;\n  undefined4 local_38;\n  undefined4 local_34;\n  sbyte local_2f;\n  char local_2e;\n  char local_2d;\n  undefined4 local_2c;\n  byte local_27;\n  ushort local_26;\n  uint local_24;\n  \n  if (PTR_DAT_08000808[1] == '\\x06') {\n    uVar5 = 0xc;\n  }\n  else {\n    local_51[0] = 0;\n    local_26 = 0;\n    local_27 = 0;\n    local_2c = DAT_0800080c;\n    local_2d = '\\0';\n    local_2e = '\\0';\n    write_memory_with_byte_pattern_0800b430(auStack_70 + 3,0,0xc);\n    write_memory_with_byte_pattern_0800b430(auStack_70,0,0xc);\n    *PTR_DAT_08000810 = 0;\n    local_2f = 0;\n    while (iVar3 = check_input_0800184c(&local_52,auStack_70 + 6,param_1,local_51), iVar3 != 0) {\n      uVar7 = convert_to_big_endian_08008590(local_58);\n      uVar7 = convert_to_double_08009798((int)uVar7,(int)((ulonglong)uVar7 >> 0x20));\n      local_24 = convert_to_int_08008ba0((int)uVar7,(int)((ulonglong)uVar7 >> 0x20));\n      if (local_52 == 0x47) {\n        switch(local_24) {\n        case 0:\n        case 1:\n        case 2:\n        case 3:\n        case 0x50:\n          local_2f = 2;\n          break;\n        case 4:\n        case 10:\n        case 0x1c:\n        case 0x1e:\n        case 0x35:\n        case 0x5c:\n          local_2f = 1;\n          break;\n        case 0x11:\n        case 0x12:\n        case 0x13:\n          local_2f = 3;\n          break;\n        case 0x14:\n        case 0x15:\n          local_2f = 7;\n          break;\n        case 0x36:\n        case 0x37:\n        case 0x38:\n        case 0x39:\n        case 0x3a:\n        case 0x3b:\n          local_2f = 9;\n          break;\n        case 0x5a:\n        case 0x5b:\n          local_2f = 4;\n          break;\n        case 0x5d:\n        case 0x5e:\n          local_2f = 6;\n        }\n        switch(local_24) {\n        case 0:\n          PTR_DAT_08000ca0[1] = 0;\n          break;\n        case 1:\n          PTR_DAT_08000ca0[1] = 1;\n          break;\n        case 2:\n          PTR_DAT_08000ca0[1] = 2;\n          break;\n        case 3:\n          PTR_DAT_08000ca0[1] = 3;\n          break;\n        case 4:\n          local_2e = '\\x01';\n          break;\n        default:\n          *PTR_DAT_08000ca0 = 3;\n          break;\n        case 10:\n          local_2e = '\\x02';\n          break;\n        case 0x11:\n          set_params_in_array_08000478(0,1,2);\n          break;\n        case 0x12:\n          set_params_in_array_08000478(2,0,1);\n          break;\n        case 0x13:\n          set_params_in_array_08000478(1,2,0);\n          break;\n        case 0x14:\n          PTR_DAT_08000ca0[3] = 1;\n          break;\n        case 0x15:\n          PTR_DAT_08000ca0[3] = 0;\n          break;\n        case 0x1c:\n        case 0x1e:\n          uVar4 = FUNC_08008eec(local_58,DAT_08000ca4);\n          uVar7 = convert_to_big_endian_08008590(uVar4);\n          uVar7 = convert_to_double_08009798((int)uVar7,(int)((ulonglong)uVar7 >> 0x20));\n          local_24 = convert_to_int_08008ba0((int)uVar7,(int)((ulonglong)uVar7 >> 0x20));\n          switch(local_24) {\n          case 0x118:\n            local_2e = '\\x03';\n            break;\n          case 0x119:\n            local_2e = '\\x04';\n            break;\n          default:\n            *PTR_DAT_08000ca0 = 3;\n            break;\n          case 300:\n            local_2e = '\\x05';\n            break;\n          case 0x12d:\n            local_2e = '\\x06';\n          }\n          break;\n        case 0x35:\n          local_2d = '\\x01';\n          break;\n        case 0x36:\n        case 0x37:\n        case 0x38:\n        case 0x39:\n        case 0x3a:\n        case 0x3b:\n          PTR_DAT_08000ca0[0x1c] = (char)local_24 + -0x36;\n          break;\n        case 0x50:\n          PTR_DAT_08000ca0[1] = 4;\n          break;\n        case 0x5a:\n          PTR_DAT_08000ca0[4] = 1;\n          break;\n        case 0x5b:\n          PTR_DAT_08000ca0[4] = 0;\n          break;\n        case 0x5c:\n          uVar4 = FUNC_08008eec(local_58,DAT_08000ca4);\n          uVar7 = convert_to_big_endian_08008590(uVar4);\n          uVar7 = convert_to_double_08009798((int)uVar7,(int)((ulonglong)uVar7 >> 0x20));\n          local_24 = convert_to_int_08008ba0((int)uVar7,(int)((ulonglong)uVar7 >> 0x20));\n          if (local_24 == 0x398) {\n            local_2e = '\\a';\n          }\n          else if (local_24 == 0x399) {\n            local_2e = '\\b';\n          }\n          else {\n            *PTR_DAT_08000ca0 = 3;\n          }\n          break;\n        case 0x5d:\n          PTR_DAT_08000ca0[2] = 1;\n          break;\n        case 0x5e:\n          PTR_DAT_08000ca0[2] = 0;\n        }\n      }\n      else if (local_52 == 0x4d) {\n        if (local_24 == 0x1e) {\nLAB_08000b96:\n          local_2f = 5;\n        }\n        else if ((int)local_24 < 0x1f) {\n          if ((int)local_24 < 3) {\n            if (-1 < (int)local_24) goto LAB_08000b96;\n          }\n          else if (local_24 - 3 < 3) {\n            local_2f = 8;\n          }\n        }\n        switch(local_24) {\n        case 0:\n          PTR_DAT_08000ca0[5] = 1;\n          break;\n        case 1:\n          break;\n        case 2:\n        case 0x1e:\n          PTR_DAT_08000ca0[5] = 2;\n          break;\n        case 3:\n          PTR_DAT_08000ca0[6] = 1;\n          break;\n        case 4:\n          PTR_DAT_08000ca0[6] = 0xff;\n          break;\n        case 5:\n          PTR_DAT_08000ca0[6] = 0;\n          break;\n        default:\n          *PTR_DAT_08000ca0 = 3;\n          break;\n        case 7:\n          PTR_DAT_08000ca0[7] = 2;\n          break;\n        case 8:\n          PTR_DAT_08000ca0[7] = 1;\n          break;\n        case 9:\n          PTR_DAT_08000ca0[7] = 0;\n        }\n      }\n      if (local_2f != 0) {\n        if (((int)(uint)local_26 >> local_2f & 1U) == 0) {\n          local_26 = local_26 | (ushort)(1 << local_2f);\n        }\n        else {\n          *PTR_DAT_08000ca0 = 5;\n        }\n        local_2f = 0;\n      }\n    }\n    if (*PTR_DAT_08000ff0 == '\\0') {\n      local_34 = 0;\n      local_38 = 0;\n      local_39 = '\\0';\n      local_51[0] = 0;\nswitchD_08000d18_caseD_47:\n      iVar3 = check_input_0800184c(&local_52,auStack_70 + 6,param_1,local_51);\n      if (iVar3 != 0) {\n        switch(local_52) {\n        case 0x46:\n          iVar3 = check_if_carry_or_zero_0800923c(local_58,0);\n          if (iVar3 != 0) {\n            *PTR_DAT_08000ff0 = 6;\n          }\n          if (PTR_DAT_08000ff0[2] == '\\0') {\n            uVar4 = convert_and_calculate_float_bits_0800056c(local_58);\n            *(undefined4 *)(PTR_DAT_08000ff0 + 8) = uVar4;\n          }\n          else {\n            local_2c = convert_and_calculate_float_bits_0800056c(local_58);\n          }\n          break;\n        case 0x47:\n        case 0x4d:\n        case 0x4e:\n          break;\n        default:\n          *PTR_DAT_08000ff0 = 3;\n          break;\n        case 0x49:\n        case 0x4a:\n        case 0x4b:\n          uVar5 = (uint)local_52;\n          uVar4 = convert_and_calculate_float_bits_0800056c(local_58);\n          auStack_70[uVar5 - 0x49] = uVar4;\n          break;\n        case 0x4c:\n          uVar7 = convert_to_big_endian_08008590(local_58);\n          uVar7 = convert_to_double_08009798((int)uVar7,(int)((ulonglong)uVar7 >> 0x20));\n          local_39 = calculate_shifted_value_08008bf0((int)uVar7,(int)((ulonglong)uVar7 >> 0x20));\n          break;\n        case 0x50:\n          local_34 = local_58;\n          break;\n        case 0x52:\n          local_38 = convert_and_calculate_float_bits_0800056c(local_58);\n          break;\n        case 0x53:\n          iVar3 = is_end_of_string_08009228(local_58,0);\n          if (iVar3 != 0) {\n            *PTR_DAT_08000ff0 = 6;\n          }\n          break;\n        case 0x54:\n          iVar3 = is_end_of_string_08009228(local_58,0);\n          if (iVar3 != 0) {\n            *PTR_DAT_08000ff0 = 6;\n          }\n          uVar7 = convert_to_big_endian_08008590(local_58);\n          uVar7 = convert_to_double_08009798((int)uVar7,(int)((ulonglong)uVar7 >> 0x20));\n          uVar2 = calculate_shifted_value_08008bf0((int)uVar7,(int)((ulonglong)uVar7 >> 0x20));\n          PTR_DAT_08000ff0[0x18] = uVar2;\n          break;\n        case 0x58:\n          auStack_70[3] = convert_and_calculate_float_bits_0800056c(local_58);\n          local_27 = local_27 | 1;\n          break;\n        case 0x59:\n          auStack_70[4] = convert_and_calculate_float_bits_0800056c(local_58);\n          local_27 = local_27 | 2;\n          break;\n        case 0x5a:\n          auStack_70[5] = convert_and_calculate_float_bits_0800056c(local_58);\n          local_27 = local_27 | 4;\n        }\n        goto switchD_08000d18_caseD_47;\n      }\n      if (*PTR_DAT_08000ff0 == '\\0') {\n        if (PTR_DAT_08000ff4[1] != '\\a') {\n          process_character_0800525c((int)(char)PTR_DAT_08000ff0[6]);\n          process_input_char_08000220(PTR_DAT_08000ff0[7]);\n        }\n        if ((local_26 & 0x200) != 0) {\n          iVar3 = is_valid_checksum_08004d7c(PTR_DAT_08000ff0[0x1c],&local_7c);\n          puVar1 = PTR_DAT_08000ff0;\n          if (iVar3 == 0) {\n            return 10;\n          }\n          *(undefined4 *)(PTR_DAT_08000ff0 + 0x20) = local_7c;\n          *(undefined4 *)(puVar1 + 0x24) = uStack_78;\n          *(undefined4 *)(puVar1 + 0x28) = uStack_74;\n        }\n        switch(local_2e) {\n        case '\\x01':\n          iVar3 = is_end_of_string_08009228(local_34,0);\n          if (iVar3 == 0) {\n            if (PTR_DAT_08000ff4[1] != '\\a') {\n              process_data_and_find_value_greater_than_sum_of_param_and_pointer_08002408(local_34);\n            }\n          }\n          else {\n            *PTR_DAT_08000ff0 = 6;\n          }\n          break;\n        case '\\x02':\n          uVar7 = convert_to_big_endian_08008590(local_34);\n          uVar7 = convert_to_double_08009798((int)uVar7,(int)((ulonglong)uVar7 >> 0x20));\n          local_24 = convert_to_int_08008ba0((int)uVar7,(int)((ulonglong)uVar7 >> 0x20));\n          if ((((local_39 == '\\x02') || (local_39 == '\\x14')) && (-1 < (int)local_24)) &&\n             ((int)local_24 < 7)) {\n            if ((local_27 == 0) && (local_39 == '\\x02')) {\n              *PTR_DAT_08000ff0 = 6;\n            }\n            else {\n              if ((int)local_24 < 1) {\n                local_24 = (uint)(byte)PTR_DAT_08001304[0x1c];\n              }\n              else {\n                local_24 = local_24 - 1;\n              }\n              iVar3 = is_valid_checksum_08004d7c(local_24 & 0xff,local_94);\n              if (iVar3 == 0) {\n                return 10;\n              }\n              for (local_3a = 0; local_3a < 3; local_3a = local_3a + 1) {\n                if (((int)(uint)local_27 >> local_3a & 1U) != 0) {\n                  if (local_39 == '\\x14') {\n                    uVar5 = (uint)local_3a;\n                    uVar4 = FUNC_08008cd8(*(undefined4 *)(PTR_DAT_08001304 + (local_3a + 2) * 4 + 4),\n                                         auStack_70[local_3a + 3]);\n                    local_94[uVar5] = uVar4;\n                  }\n                  else {\n                    local_94[local_3a] = auStack_70[local_3a + 3];\n                  }\n                }\n              }\n              write_to_memory_at_offset_08004bf4(local_24 & 0xff,local_94);\n              puVar1 = PTR_DAT_08001304;\n              if (local_24 == (byte)PTR_DAT_08001304[0x1c]) {\n                *(undefined4 *)(PTR_DAT_08001304 + 0x20) = local_94[0];\n                *(undefined4 *)(puVar1 + 0x24) = local_94[1];\n                *(undefined4 *)(puVar1 + 0x28) = local_94[2];\n              }\n            }\n          }\n          else {\n            *PTR_DAT_08000ff0 = 3;\n          }\n          local_27 = 0;\n          break;\n        case '\\x03':\n        case '\\x05':\n          if (local_27 != 0) {\n            for (local_3b = 0; local_3b < 3; local_3b = local_3b + 1) {\n              if (((int)(uint)local_27 >> local_3b & 1U) == 0) {\n                auStack_70[local_3b + 3] =\n                     *(undefined4 *)(PTR_DAT_08001304 + (local_3b + 2) * 4 + 4);\n              }\n              else if (PTR_DAT_08001304[4] == '\\0') {\n                uVar5 = (uint)local_3b;\n                uVar4 = FUNC_08008cdc(auStack_70[local_3b + 3],\n                                     *(undefined4 *)(PTR_DAT_08001304 + (local_3b + 2) * 4 + 4));\n                auStack_70[uVar5 + 3] = uVar4;\n              }\n              else {\n                uVar6 = auStack_70[local_3b + 3];\n                uVar4 = FUNC_08008cdc(*(undefined4 *)(PTR_DAT_08001304 + (local_3b + 8) * 4),\n                                     *(undefined4 *)(PTR_DAT_08001304 + (local_3b + 10) * 4 + 4));\n                uVar5 = (uint)local_3b;\n                uVar4 = FUNC_08008cdc(uVar6,uVar4);\n                auStack_70[uVar5 + 3] = uVar4;\n              }\n            }\n            process_data_if_not_already_processed_08001e98(auStack_70[3],auStack_70[4],auStack_70[5],\n                         *(undefined4 *)(PTR_DAT_08001308 + 0x14),0);\n          }\n          if (local_2e == '\\x05') {\n            iVar3 = is_valid_checksum_08004d7c(7,local_94 + 3);\n            if (iVar3 == 0) {\n              return 10;\n            }\n          }\n          else {\n            iVar3 = is_valid_checksum_08004d7c(6,local_94 + 3);\n            if (iVar3 == 0) {\n              return 10;\n            }\n          }\n          process_data_if_not_already_processed_08001e98(local_94[3],local_84,local_80,*(undefined4 *)(PTR_DAT_08001308 + 0x14),0);\n          puVar1 = PTR_DAT_08001304;\n          *(undefined4 *)(PTR_DAT_08001304 + 0xc) = local_94[3];\n          *(undefined4 *)(puVar1 + 0x10) = local_84;\n          *(undefined4 *)(puVar1 + 0x14) = local_80;\n          local_27 = 0;\n          break;\n        case '\\x04':\n        case '\\x06':\n          if (local_2e == '\\x06') {\n            write_to_memory_at_offset_08004bf4(7,PTR_DAT_0800130c);\n          }\n          else {\n            write_to_memory_at_offset_08004bf4(6,PTR_DAT_0800130c);\n          }\n          break;\n        case '\\a':\n          if (local_27 == 0) {\n            *PTR_DAT_08001304 = 6;\n          }\n          else {\n            for (local_3c = 0; local_3c < 3; local_3c = local_3c + 1) {\n              if (((int)(uint)local_27 >> local_3c & 1U) != 0) {\n                uVar4 = FUNC_08008cd8(*(undefined4 *)(PTR_DAT_08001304 + (local_3c + 2) * 4 + 4),\n                                     *(undefined4 *)(PTR_DAT_08001304 + (local_3c + 8) * 4));\n                uVar5 = (uint)local_3c;\n                uVar4 = FUNC_08008cd8(uVar4,auStack_70[local_3c + 3]);\n                *(undefined4 *)(PTR_DAT_08001304 + (uVar5 + 10) * 4 + 4) = uVar4;\n              }\n            }\n          }\n          local_27 = 0;\n          break;\n        case '\\b':\n          write_memory_with_byte_pattern_0800b430(PTR_DAT_08001310,0,0xc);\n        }\n        if (((local_26 & 4) != 0) || (local_27 != 0)) {\n          if ((PTR_DAT_08001574[2] != '\\0') &&\n             ((iVar3 = is_end_of_string_08009228(local_2c,0), iVar3 != 0 && (PTR_DAT_08001574[1] != '\\x04')))) {\n            *PTR_DAT_08001574 = 6;\n          }\n          if (((local_2d != '\\0') && (PTR_DAT_08001574[1] != '\\0')) &&\n             (PTR_DAT_08001574[1] != '\\x01')) {\n            *PTR_DAT_08001574 = 6;\n          }\n          if (*PTR_DAT_08001574 != '\\0') {\n            return (uint)(byte)*PTR_DAT_08001574;\n          }\n          for (local_3d = 0; puVar1 = PTR_DAT_08001840, local_3d < 3; local_3d = local_3d + 1) {\n            if (((int)(uint)local_27 >> local_3d & 1U) == 0) {\n              auStack_70[local_3d + 3] = *(undefined4 *)(PTR_DAT_08001574 + (local_3d + 2) * 4 + 4);\n            }\n            else if (local_2d == '\\0') {\n              if (PTR_DAT_08001574[4] == '\\0') {\n                uVar5 = (uint)local_3d;\n                uVar4 = FUNC_08008cdc(auStack_70[local_3d + 3],\n                                     *(undefined4 *)(PTR_DAT_08001574 + (local_3d + 2) * 4 + 4));\n                auStack_70[uVar5 + 3] = uVar4;\n              }\n              else {\n                uVar6 = auStack_70[local_3d + 3];\n                uVar4 = FUNC_08008cdc(*(undefined4 *)(PTR_DAT_08001574 + (local_3d + 8) * 4),\n                                     *(undefined4 *)(PTR_DAT_08001574 + (local_3d + 10) * 4 + 4));\n                uVar5 = (uint)local_3d;\n                uVar4 = FUNC_08008cdc(uVar6,uVar4);\n                auStack_70[uVar5 + 3] = uVar4;\n              }\n            }\n          }\n          if ((byte)PTR_DAT_08001574[1] < 5) {\n                    /* WARNING: Could not recover jumptable at 0x08001474. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n            uVar5 = (*(code *)(&switchD_08001474::switchdataD_08001478)[(byte)PTR_DAT_08001574[1]])\n                              ();\n            return uVar5;\n          }\n          if (*PTR_DAT_08001840 != '\\0') {\n            return (uint)(byte)*PTR_DAT_08001840;\n          }\n          *(undefined4 *)(PTR_DAT_08001840 + 0xc) = auStack_70[3];\n          *(undefined4 *)(puVar1 + 0x10) = auStack_70[4];\n          *(undefined4 *)(puVar1 + 0x14) = auStack_70[5];\n        }\n        if (PTR_DAT_08001840[5] != '\\0') {\n          process_data_until_termination_or_interrupt_08002fd4();\n          PTR_DAT_08001848[0x10] = 0;\n          if (PTR_DAT_08001840[5] == '\\x02') {\n            activate_sensor_if_not_active_080025e8();\n          }\n          else {\n            PTR_DAT_08001840[5] = 0;\n          }\n        }\n        uVar5 = (uint)(byte)*PTR_DAT_08001840;\n      }\n      else {\n        uVar5 = (uint)(byte)*PTR_DAT_08000ff0;\n      }\n    }\n    else {\n      uVar5 = (uint)(byte)*PTR_DAT_08000ff0;\n    }\n  }\n  return uVar5;\n}\n\n",
            "called": [
                "FUN_08002fd4",
                "FUN_08008590",
                "FUN_08008bf0",
                "FUN_08000220",
                "FUN_08004d7c",
                "FUN_0800b430",
                "FUN_08001f00",
                "FUN_080025e8",
                "FUN_08001e98",
                "FUN_08000478",
                "FUN_08009798",
                "FUN_08009214",
                "FUN_08008cd8",
                "FUN_0800981c",
                "FUN_08008eec",
                "FUN_0800525c",
                "FUN_08004bf4",
                "FUN_080098d0",
                "FUN_08009228",
                "FUN_0800056c",
                "FUN_08008cdc",
                "FUN_08008c30",
                "FUN_08008ba0",
                "FUN_0800184c",
                "FUN_0800923c",
                "FUN_08008894",
                "FUN_08002408"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x080005b4",
            "calling": [
                "FUN_080039bc",
                "FUN_08003b98"
            ],
            "imported": false,
            "current_name": "FUNC_080005b4"
        },
        "FUN_080039a0": {
            "renaming": {
                "FUN_080039a0": "set_pointers_and_wait_until_ready_080039a0",
                "reset_pointers_08003980": "reset_all_pointers",
                "wait_until_all_bits_are_set_08004228": "wait_until_all_bits_are_set"
            },
            "code": "void set_pointers_and_wait_until_ready_080039a0(void)\n{\n  reset_all_pointers();\n  wait_until_all_bits_are_set();\n  *(undefined4 *)PTR_DAT_080039b8 = 1;\n  return;\n}",
            "called": [
                "FUN_08003980",
                "FUN_08004228"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080039a0",
            "calling": [
                "FUN_08001ddc"
            ],
            "imported": false,
            "current_name": "set_pointers_and_wait_until_ready_080039a0"
        },
        "FUN_08009204": {
            "renaming": {
                "FUN_08009204": "calculate_concatenated_parameters_08009204_08009204",
                "param_1": "first_param",
                "param_2": "second_param"
            },
            "code": "undefined8 calculate_concatenated_parameters_08009204_08009204(undefined4 first_param, undefined4 second_param)\n{\n  calculate_result_0800919c();\n  return CONCAT44(second_param, first_param);\n}",
            "called": [
                "FUN_0800919c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009204",
            "calling": [
                "FUN_08009214",
                "FUN_08009228",
                "FUN_080091fc",
                "FUN_0800923c"
            ],
            "imported": false,
            "current_name": "calculate_concatenated_parameters_08009204_08009204"
        },
        "FUN_080029d8": {
            "renaming": {
                "FUN_080029d8": "calculate_result_and_check_input_080029d8",
                "param_1": "initial_value",
                "param_2": "input1",
                "param_3": "input2",
                "iVar1": "is_input1_valid",
                "uVar2": "result",
                "uVar3": "input1_copy",
                "PTR_DAT_08002a90": "constant_data",
                "check_input_is_not_null_08009214_08009214": "check_input_is_not_null",
                "check_if_input_is_null_08009264_08009264": "check_input_is_null",
                "calculate_result_and_check_input_08002978": "calculate_result",
                "is_end_of_string_08009228": "is_end_of_string"
            },
            "code": "void calculate_result_and_check_input_080029d8(uint32_t initial_value, uint32_t* input1, uint32_t* input2) {\n  int is_input1_null = (input1 != NULL);\n  int is_input2_null = (input2 != NULL);\n  if (is_input1_null && is_input2_null) {\n    int is_input1_valid = check_input_is_not_null(*input1, *(input1 + 1));\n    if (is_input1_valid == 0) {\n      uint32_t result = calculate_result_and_check_input_080029d8_08002978(initial_value ^ 0x80000000, *(input2 + 1), *input1);\n      int is_result_end_of_string = is_end_of_string(input1, result);\n      if (is_result_end_of_string == 0) {\n        result = calculate_result_and_check_input_080029d8_08002978(initial_value ^ 0x80000000, *(input2 + 1), *input1);\n      }\n      *input1 = result;\n    }\n    else if (*input1 == 0) {\n      *input1 = *(input2 + 1);\n    }\n    *(char *)(input1 + 4) = 1;\n  }\n}\n",
            "called": [
                "FUN_08009214",
                "FUN_08009264",
                "FUN_08009228",
                "FUN_08002978"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080029d8",
            "calling": [
                "FUN_08002a94"
            ],
            "imported": false,
            "current_name": "calculate_result_and_check_input_080029d8"
        },
        "FUN_08007c5e": {
            "renaming": {
                "FUN_08007c5e": "set_global_variable_08007c5e",
                "param_1": "new_value",
                "_DAT_40000038": "global_variable"
            },
            "code": "void set_global_variable_08007c5e(int new_value) {\n    _DAT_40000038 = new_value;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007c5e",
            "calling": [
                "FUN_08005790"
            ],
            "imported": false,
            "current_name": "set_global_variable_08007c5e"
        },
        "FUN_08005760": {
            "renaming": {
                "FUN_08005760": "update_value_at_address_08005760",
                "PTR_DAT_08005774": "PTR_DATA",
                "update_value_at_address_080052ac": "update_value_at_address"
            },
            "code": "void update_value_at_address_08005760(void)\n{\n  int offset = 0x18;\n  int* address = PTR_DAT_08005774 + offset;\n  update_value_at_address_08005760_080052ac(*address);\n  return;\n}",
            "called": [
                "FUN_080052ac"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005760",
            "calling": [
                "FUN_08007c7c"
            ],
            "imported": false,
            "current_name": "update_value_at_address_08005760"
        },
        "FUN_08008b24": {
            "renaming": {
                "FUN_08008b24": "is_end_of_string_08008b24",
                "in_CY": "current_char"
            },
            "code": "bool is_end_of_string_08008b24(void)\n{\n  char current_char;\n  check_params_and_return_value();\n  return current_char == '\\0';\n}",
            "called": [
                "FUN_08008b00"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008b24",
            "calling": [
                "FUN_080098d0",
                "FUN_08003004",
                "FUN_08009b24"
            ],
            "imported": false,
            "current_name": "is_end_of_string_08008b24"
        },
        "FUN_08002814": {
            "renaming": {
                "FUN_08002814": "do_nothing_08002814"
            },
            "code": "\nvoid do_nothing_08002814(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002814",
            "calling": [
                "FUN_08001d4c",
                "FUN_08004148",
                "FUN_08002408"
            ],
            "imported": false,
            "current_name": "do_nothing_08002814"
        },
        "FUN_0800587c": {
            "renaming": {
                "FUN_0800587c": "update_data_if_flag_is_set_0800587c",
                "PTR_DAT_0800589c": "data_flag"
            },
            "code": "void update_data_if_flag_is_set_0800587c(void)\n{\n    if (PTR_DAT_0800589c[1] == 3) {\n        PTR_DAT_0800589c[1] = 4;\n        PTR_DAT_0800589c[16] = 0;\n    }\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800587c",
            "calling": [
                "FUN_08003a74"
            ],
            "imported": false,
            "current_name": "update_data_if_flag_is_set_0800587c"
        },
        "FUN_08008a02": {
            "renaming": {
                "FUN_08008a02": "calculate_result_08008a02",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "sign_input",
                "unaff_r4": "sign_temp",
                "uVar2": "exponent_input",
                "uVar3": "temp2",
                "in_r12": "shift",
                "bVar4": "check",
                "mask": "mask",
                "exponent_mask": "exponent_mask",
                "nan_mask": "nan_mask",
                "bit_mask": "bit_mask",
                "shift": "shift",
                "exponent_shift": "exponent_shift",
                "result": "result",
                "exponent_result": "exponent_result",
                "sign_result": "sign_result",
                "exponent": "exponent",
                "sign": "sign",
                "mantissa": "mantissa",
                "exponent_input": "exponent_input",
                "sign_input": "sign_input",
                "mantissa_input": "mantissa_input",
                "exponent_temp": "exponent_temp",
                "sign_temp": "sign_temp",
                "mantissa_temp": "mantissa_temp",
                "temp": "temp"
            },
            "code": "ulonglong calculate_result_08008a02(uint input1, uint input2, uint input3, uint input4)\n{\n  uint temp1, temp2, temp3, temp4;\n  bool check;\n  temp2 = input2;\n  temp1 = input1;\n  temp3 = input3;\n  temp4 = input4;\n  uint mask = 0x80000000;\n  uint exponent_mask = 0x7ff00000;\n  uint nan_mask = 0x7ff8000000000000;\n  uint bit_mask = 0x100000;\n  uint shift = 0x14;\n  uint exponent_shift = 0x20;\n  uint result;\n  uint exponent_result;\n  uint sign_result;\n  uint exponent;\n  uint sign;\n  uint mantissa;\n  uint exponent_input;\n  uint sign_input;\n  uint mantissa_input;\n  uint exponent_temp;\n  uint sign_temp;\n  uint mantissa_temp;\n  uint temp;\n  if (input4 >> shift == input3)\n  {\n    if ((input1 | input2 << 0xc) == 0)\n    {\n      if (input4 >> shift != input2)\n      {\n        result = (input2 ^ input4) & mask;\n        exponent_result = exponent_mask | (result << exponent_shift);\n        return (ulonglong)exponent_result;\n      }\n    }\n    else if ((input3 | input4 << 0xc) == 0)\n    {\n      result = (input2 ^ input4) & mask;\n      exponent_result = result << exponent_shift;\n      return (ulonglong)exponent_result;\n    }\n    else\n    {\n      check = (input1 | input2 << 1) == 0 || (input3 | input4 << 1) == 0;\n      if (!check)\n      {\n        if (input3 == 0)\n        {\n          sign_temp = input2 & mask;\n          do\n          {\n            sign_input = input1 & mask;\n            input1 = input1 << 1;\n            input2 = input2 * 2 + (uint)(sign_input != 0);\n          } while ((input2 & bit_mask) == 0);\n          input2 = input2 | sign_temp;\n          if (input4 != 0)\n          {\n            sign_result = input2 & mask;\n            exponent_input = input4 >> shift;\n            exponent = exponent_input - shift;\n            if (exponent >= 0x7ff)\n            {\n              return (ulonglong)nan_mask;\n            }\n            mantissa_input = input4 & 0xfffff;\n            mantissa = (mantissa_input | 0x100000) << 0xb | (input1 >> 0xb) & 0x7ff;\n            exponent_temp = exponent << exponent_shift;\n            sign_temp = sign_result | exponent_temp;\n            return (ulonglong)(sign_temp | mantissa);\n          }\n          else\n          {\n            return (ulonglong)(input2 | input1);\n          }\n        }\n        else\n        {\n          sign_temp = input4 & mask;\n          do\n          {\n            sign_input = input3 & mask;\n            input3 = input3 << 1;\n            input4 = input4 * 2 + (uint)(sign_input != 0);\n          } while ((input4 & bit_mask) == 0);\n          if (input2 != 0)\n          {\n            sign_result = input2 & mask;\n            exponent_input = input4 >> shift;\n            exponent = exponent_input - shift;\n            if (exponent >= 0x7ff)\n            {\n              return (ulonglong)nan_mask;\n            }\n            mantissa_input = input4 & 0xfffff;\n            mantissa = (mantissa_input | 0x100000) << 0xb | (input3 >> 0xb) & 0x7ff;\n            exponent_temp = exponent << exponent_shift;\n            sign_temp = sign_result | exponent_temp;\n            return (ulonglong)(sign_temp | mantissa);\n          }\n          else\n          {\n            return (ulonglong)(input4 | input3);\n          }\n        }\n      }\n      else\n      {\n        if ((input1 | input2 << 1) != 0)\n        {\n          result = (input2 ^ input4) & mask;\n          exponent_result = exponent_mask | (result << exponent_shift);\n          return (ulonglong)exponent_result;\n        }\n        else\n        {\n          result = (input3 | input4 << 1) == 0;\n          if (result)\n          {\n            result = (input2 ^ input4) & mask;\n            exponent_result = result << exponent_shift;\n            return (ulonglong)exponent_result;\n          }\n        }\n      }\n    }\n  }\n  sign_input = input4 & mask;\n  if (sign_input == input3)\n  {\n    result = input1 | input2 << 1;\n    if (result == 0)\n    {\n      return (ulonglong)nan_mask;\n    }\n    else\n    {\n      exponent_input = input4 >> shift;\n      exponent = exponent_input - shift;\n      if (exponent >= 0x7ff)\n      {\n        return (ulonglong)nan_mask;\n      }\n      mantissa_input = input4 & 0xfffff;\n      mantissa = (mantissa_input | 0x100000) << 0xb | (input3 >> 0xb) & 0x7ff;\n      exponent_temp = exponent << exponent_shift;\n      sign_temp = sign_input | exponent_temp;\n      return (ulonglong)(sign_temp | mantissa);\n    }\n  }\n  else\n  {\n    return (ulonglong)(input4 | input3) | nan_mask;\n  }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008a02",
            "calling": [
                "FUN_08008894"
            ],
            "imported": false,
            "current_name": "calculate_result_08008a02"
        },
        "FUN_0800369c": {
            "renaming": {
                "FUN_0800369c": "wait_until_characters_are_set_0800369c",
                "param_1": "string_to_check",
                "local_c": "current_character"
            },
            "code": "void wait_until_characters_are_set_0800369c(char *string_to_check){\\n  char *current_character;\\n  current_character = string_to_check;\\n  while (*current_character != \"\\0\") {\\n    wait_until_bit_is_set_08008250(*current_character);\\n    current_character = current_character + 1;\\n  }\\n  return;\\n}",
            "called": [
                "FUN_08008250"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800369c",
            "calling": [
                "FUN_080039bc",
                "FUN_08004900"
            ],
            "imported": false,
            "current_name": "wait_until_characters_are_set_0800369c"
        },
        "FUN_08005a98": {
            "renaming": {
                "FUN_08005a98": "find_value_greater_than_sum_of_param_and_pointer_08005a98",
                "param_1": "sum_of_param_and_pointer",
                "iVar1": "pointer_value",
                "uVar2": "current_value",
                "get_value_from_pointer_08005a84": "get_value_from_pointer"
            },
            "code": "void find_value_greater_than_sum_of_param_and_pointer_08005a98(int sum_of_param_and_pointer){\n  int pointer_value = get_value_from_pointer();\n  uint current_value;\n  do {\n    current_value = get_value_from_pointer();\n  } while (current_value < (uint)(sum_of_param_and_pointer + pointer_value));\n  return;\n}",
            "called": [
                "FUN_08005a84"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005a98",
            "calling": [
                "FUN_080002a0"
            ],
            "imported": false,
            "current_name": "find_value_greater_than_sum_of_param_and_pointer_08005a98"
        },
        "FUN_08008cdc": {
            "renaming": {
                "FUN_08008cdc": "FUNC_08008cdc"
            },
            "code": "\nuint FUNC_08008cdc(uint param_1,uint param_2,undefined4 param_3,uint param_4)\n\n{\n  int iVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  int iVar6;\n  bool bVar7;\n  \n  uVar3 = param_1 << 1;\n  bVar7 = uVar3 == 0;\n  if (!bVar7) {\n    param_4 = param_2 << 1;\n    bVar7 = param_4 == 0;\n  }\n  if (!bVar7) {\n    bVar7 = uVar3 == param_4;\n  }\n  iVar6 = (int)uVar3 >> 0x18;\n  if (!bVar7) {\n    bVar7 = iVar6 == -1;\n  }\n  if (!bVar7) {\n    bVar7 = (int)param_4 >> 0x18 == -1;\n  }\n  if (bVar7) {\n    iVar1 = (int)(param_2 << 1) >> 0x18;\n    if (iVar6 == -1 || iVar1 == -1) {\n      uVar3 = param_2;\n      if (iVar6 == -1) {\n        uVar3 = param_1;\n      }\n      if (iVar6 != -1 || iVar1 != -1) {\n        param_2 = uVar3;\n      }\n      bVar7 = (uVar3 & 0x7fffff) == 0;\n      if (bVar7) {\n        bVar7 = (param_2 & 0x7fffff) == 0;\n      }\n      if (bVar7) {\n        bVar7 = uVar3 == param_2;\n      }\n      if (!bVar7) {\n        uVar3 = uVar3 | 0x400000;\n      }\n      return uVar3;\n    }\n    if (((param_1 ^ param_2) & 0x7fffffff) != 0) {\n      if (uVar3 == 0) {\n        param_1 = param_2;\n      }\n      return param_1;\n    }\n    if (param_1 != param_2) {\n      return 0;\n    }\n    if ((uVar3 & 0xff000000) == 0) {\n      uVar3 = param_1 << 1;\n      if ((param_1 & 0x80000000) != 0) {\n        uVar3 = uVar3 | 0x80000000;\n      }\n      return uVar3;\n    }\n    if (uVar3 < 0xfe000000) {\n      return param_1 + 0x800000;\n    }\n    param_1 = param_1 & 0x80000000;\nLAB_08008e12:\n    return param_1 | 0x7f800000;\n  }\n  uVar3 = uVar3 >> 0x18;\n  param_4 = param_4 >> 0x18;\n  uVar5 = param_4 - uVar3;\n  bVar7 = uVar5 != 0;\n  uVar4 = uVar3;\n  if (bVar7 && uVar3 <= param_4) {\n    uVar4 = uVar3 + uVar5;\n  }\n  if (bVar7 && uVar3 <= param_4) {\n    param_2 = param_2 ^ param_1;\n  }\n  if (bVar7 && uVar3 <= param_4) {\n    param_1 = param_1 ^ param_2;\n  }\n  if (bVar7 && uVar3 <= param_4) {\n    param_2 = param_2 ^ param_1;\n  }\n  if (param_4 < uVar3) {\n    uVar5 = -uVar5;\n  }\n  if (0x19 < uVar5) {\n    return param_1;\n  }\n  uVar3 = param_1 & 0xffffff | 0x800000;\n  if ((param_1 & 0x80000000) != 0) {\n    uVar3 = -uVar3;\n  }\n  uVar2 = param_2 & 0xffffff | 0x800000;\n  if ((param_2 & 0x80000000) != 0) {\n    uVar2 = -uVar2;\n  }\n  if (uVar4 == uVar5) {\n    uVar2 = uVar2 ^ 0x800000;\n    if (uVar4 == 0) {\n      uVar3 = uVar3 ^ 0x800000;\n      uVar4 = 1;\n    }\n    else {\n      uVar5 = uVar5 - 1;\n    }\n  }\n  uVar3 = uVar3 + ((int)uVar2 >> (uVar5 & 0xff));\n  uVar2 = uVar2 << (0x20 - uVar5 & 0xff);\n  param_1 = uVar3 & 0x80000000;\n  if ((int)uVar3 < 0) {\n    bVar7 = uVar2 != 0;\n    uVar2 = -uVar2;\n    uVar3 = -uVar3 - (uint)bVar7;\n  }\n  if (uVar3 < 0x800000) {\n    uVar5 = uVar2 & 0x80000000;\n    uVar2 = uVar2 << 1;\n    uVar3 = uVar3 * 2 + (uint)(uVar5 != 0);\n    uVar5 = uVar4 - 2;\n    if (uVar4 - 1 == 0 || uVar3 < 0x800000) {\n      iVar6 = count_leading_zeroes(uVar3);\n      uVar4 = iVar6 - 8;\n      uVar3 = uVar3 << (uVar4 & 0xff);\n      if ((int)uVar5 < (int)uVar4) {\n        uVar3 = uVar3 >> (-(uVar5 - uVar4) & 0xff);\n      }\n      else {\n        uVar3 = uVar3 + (uVar5 - uVar4) * 0x800000;\n      }\n      return uVar3 | param_1;\n    }\n  }\n  else {\n    uVar5 = uVar4 - 1;\n    if (0xffffff < uVar3) {\n      uVar5 = uVar3 & 1;\n      uVar3 = uVar3 >> 1;\n      uVar2 = (uint)(uVar5 != 0) << 0x1f | uVar2 >> 1;\n      uVar5 = uVar4;\n      if (0xfd < uVar4) goto LAB_08008e12;\n    }\n  }\n  uVar3 = uVar3 + uVar5 * 0x800000 + (uint)(0x7fffffff < uVar2);\n  if (uVar2 == 0x80000000) {\n    uVar3 = uVar3 & 0xfffffffe;\n  }\n  return uVar3 | param_1;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08008cdc",
            "calling": [
                "FUN_08004940",
                "FUN_080005b4",
                "FUN_08003826",
                "FUN_08002908",
                "FUN_080028bc",
                "FUN_08003004",
                "FUN_08002978",
                "FUN_08001f00"
            ],
            "imported": false,
            "current_name": "FUNC_08008cdc"
        },
        "FUN_080044e8": {
            "renaming": {
                "FUN_080044e8": "print_sensor_data_080044e8",
                "auStack_18": "sensor_values",
                "local_a": "index",
                "local_9": "sensor_data_index",
                "uVar2": "float_bits",
                "uVar3": "float_value"
            },
            "code": "void print_sensor_data_080044e8(void)\n{\n    int index;\n    uint32_t float_bits;\n    uint32_t sensor_values[3];\n    uint8_t sensor_data_checksum = 0;\n    uint8_t sensor_data_index = 0;\n    while(sensor_data_index < 8)\n    {\n        if(!is_valid_checksum(sensor_data_index, sensor_values, &sensor_data_checksum))\n        {\n            wait_for_bits_to_set_08004030(10);\n            return;\n        }\n        wait_until_all_bits_are_set_080036c6(get_sensor_data_ready_ptr(sensor_data_index));\n        for(index = 0; index < 3; index++)\n        {\n            if(get_sensor_data_format() == LITTLE_ENDIAN)\n            {\n                print_decimal_string(sensor_values[index]);\n            }\n            else\n            {\n                float_bits = calculate_float_bits(sensor_values[index]);\n                print_decimal_string(float_bits);\n            }\n            if(index < 2)\n            {\n                wait_until_all_bits_are_set_080036c6(get_sensor_data_ready_ptr(sensor_data_index));\n            }\n            else\n            {\n                wait_until_all_bits_are_set_080036c6(get_sensor_data_last_ready_ptr(sensor_data_index));\n            }\n        }\n        sensor_data_index++;\n    }\n    wait_for_bits_to_set_08004030(10);\n    return;\n}",
            "called": [
                "FUN_08008590",
                "FUN_08008c30",
                "FUN_08003826",
                "FUN_08008640",
                "FUN_08004d7c",
                "FUN_08004030",
                "FUN_080036c6"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080044e8",
            "calling": [
                "FUN_08003b98"
            ],
            "imported": false,
            "current_name": "print_sensor_data_080044e8"
        },
        "FUN_08006c9c": {
            "renaming": {
                "FUN_08006c9c": "is_valid_number_08006c9c",
                "param_1": "number",
                "bVar1": "is_valid",
                "DAT_08006cdc": "data_array",
                "set_data_08006b00": "set_data"
            },
            "code": "bool is_valid_number_08006c9c(int number) {\n  bool is_valid = number > 0 && number < 0x1000000;\n  if (is_valid) {\n    DAT_08006cdc[1] = number - 1;\n    set_data(0xffffffff, 0xf);\n    DAT_08006cdc[2] = 0;\n    *DAT_08006cdc = 7;\n  }\n  return !is_valid;\n}",
            "called": [
                "FUN_08006b00"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006c9c",
            "calling": [
                "FUN_08006d72"
            ],
            "imported": false,
            "current_name": "is_valid_number_08006c9c"
        },
        "FUN_0800a5a0": {
            "renaming": {
                "FUN_0800a5a0": "FUNC_0800a5a0"
            },
            "code": "\n/* WARNING: Restarted to delay deadcode elimination for space: stack */\n\nuint FUNC_0800a5a0(int param_1,undefined8 *param_2,int param_3,int param_4,int param_5,int param_6)\n\n{\n  undefined4 *puVar1;\n  uint uVar2;\n  uint uVar3;\n  int iVar4;\n  uint *puVar5;\n  undefined4 uVar6;\n  uint **ppuVar7;\n  undefined4 uVar8;\n  int iVar9;\n  undefined4 *puVar10;\n  undefined4 uVar11;\n  uint uVar12;\n  uint *puVar13;\n  int iVar14;\n  int iVar15;\n  undefined8 *puVar16;\n  int iVar17;\n  undefined4 *puVar18;\n  undefined8 *puVar19;\n  undefined4 uVar20;\n  int iVar21;\n  undefined8 *puVar22;\n  undefined4 *puVar23;\n  bool bVar24;\n  undefined8 uVar25;\n  undefined8 uVar26;\n  undefined8 uVar27;\n  undefined8 uVar28;\n  ulonglong uVar29;\n  undefined8 *local_284;\n  int local_280;\n  int local_270;\n  int local_26c;\n  uint *local_260 [2];\n  uint local_258 [20];\n  undefined8 uStack_208;\n  undefined8 local_168;\n  int local_160 [38];\n  undefined8 uStack_c8;\n  \n  uVar28 = CONCAT44(param_5,param_5);\n  iVar15 = *(int *)(PTR_DAT_0800a894 + param_5 * 4);\n  iVar9 = param_4 + -1;\n  local_260[1] = (uint *)param_2;\n  if (param_3 + 0x14 < 0 == SCARRY4(param_3,0x14)) {\n    local_26c = (int)((longlong)DAT_0800a898 * (longlong)(param_3 + -3) >> 0x22) -\n                (param_3 + -3 >> 0x1f);\n    local_270 = (local_26c + 1) * -0x18;\n  }\n  else {\n    local_270 = -0x18;\n    local_26c = 0;\n  }\n  local_270 = param_3 + local_270;\n  iVar17 = local_26c - iVar9;\n  if (-1 < iVar15 + iVar9) {\n    iVar21 = iVar15 + iVar9 + 1 + iVar17;\n    puVar16 = &uStack_208;\n    do {\n      while (iVar17 < 0) {\n        iVar17 = iVar17 + 1;\n        *(undefined4 *)puVar16 = 0;\n        *(undefined4 *)((int)puVar16 + 4) = 0;\n        puVar16 = puVar16 + 1;\n        if (iVar17 == iVar21) goto LAB_0800a626;\n      }\n      uVar26 = calculate_shifted_value_0800856c(*(undefined4 *)(param_6 + iVar17 * 4));\n      iVar17 = iVar17 + 1;\n      *puVar16 = uVar26;\n      puVar16 = puVar16 + 1;\n    } while (iVar17 != iVar21);\n  }\nLAB_0800a626:\n  puVar10 = (undefined4 *)(param_1 + -8);\n  if (-1 < iVar15) {\n    puVar22 = &uStack_208 + param_4;\n    iVar17 = iVar9;\n    puVar16 = &uStack_c8;\n    do {\n      if (iVar9 < 0) {\n        uVar26 = 0;\n      }\n      else {\n        uVar26 = 0;\n        puVar23 = puVar10;\n        puVar19 = puVar22;\n        do {\n          puVar18 = puVar23 + 2;\n          uVar25 = FUNC_08008640(*puVar18,puVar23[3],*(undefined4 *)(puVar19 + -1),\n                                *(undefined4 *)((int)puVar19 + -4));\n          uVar26 = FUNC_080082d4((int)uVar26,(int)((ulonglong)uVar26 >> 0x20),(int)uVar25,\n                                (int)((ulonglong)uVar25 >> 0x20));\n          puVar23 = puVar18;\n          puVar19 = puVar19 + -1;\n        } while (puVar18 != puVar10 + param_4 * 2);\n      }\n      iVar17 = iVar17 + 1;\n      *puVar16 = uVar26;\n      puVar22 = puVar22 + 1;\n      puVar16 = puVar16 + 1;\n    } while (iVar17 != iVar15 + param_4);\n  }\n  local_260[0] = local_258 + iVar15 + -1;\n  iVar17 = iVar15;\n  do {\n    uVar26 = CONCAT44(*(undefined4 *)((int)&uStack_c8 + iVar17 * 8 + 4),\n                      *(undefined4 *)(&uStack_c8 + iVar17));\n    if (0 < iVar17) {\n      puVar16 = &uStack_c8 + iVar17;\n      puVar5 = local_258;\n      do {\n        uVar6 = (undefined4)((ulonglong)uVar26 >> 0x20);\n        FUNC_08008640((int)uVar26,uVar6,0,DAT_0800a89c);\n        convert_to_int_08008ba0();\n        uVar25 = calculate_shifted_value_0800856c();\n        uVar8 = (undefined4)((ulonglong)uVar25 >> 0x20);\n        uVar27 = FUNC_08008640((int)uVar25,uVar8,0,DAT_0800a8a0);\n        FUNC_080082d0((int)uVar26,uVar6,(int)uVar27,(int)((ulonglong)uVar27 >> 0x20));\n        uVar2 = convert_to_int_08008ba0();\n        puVar22 = puVar16 + -1;\n        uVar6 = *(undefined4 *)puVar22;\n        uVar11 = *(undefined4 *)((int)puVar16 + -4);\n        *puVar5 = uVar2;\n        uVar26 = FUNC_080082d4((int)uVar25,uVar8,uVar6,uVar11);\n        puVar16 = puVar22;\n        puVar5 = puVar5 + 1;\n      } while (puVar22 != &uStack_c8);\n    }\n    uVar26 = calculate_result_0800b2e8((int)uVar26,(int)((ulonglong)uVar26 >> 0x20),local_270);\n    uVar8 = (undefined4)((ulonglong)uVar26 >> 0x20);\n    FUNC_08008640((int)uVar26,uVar8,0,0x3fc00000);\n    uVar25 = calculate_long_long_080094c0();\n    uVar25 = FUNC_08008640((int)uVar25,(int)((ulonglong)uVar25 >> 0x20),0,DAT_0800a8a4);\n    uVar26 = FUNC_080082d0((int)uVar26,uVar8,(int)uVar25,(int)((ulonglong)uVar25 >> 0x20));\n    uVar2 = convert_to_int_08008ba0();\n    uVar25 = calculate_shifted_value_0800856c();\n    uVar26 = FUNC_080082d0((int)uVar26,(int)((ulonglong)uVar26 >> 0x20),(int)uVar25,\n                          (int)((ulonglong)uVar25 >> 0x20));\n    uVar6 = (undefined4)((ulonglong)uVar26 >> 0x20);\n    uVar8 = (undefined4)uVar26;\n    if (local_270 < 1) {\n      if (local_270 == 0) {\n        iVar21 = (int)local_258[iVar17 + -1] >> 0x17;\n        goto joined_r0x0800a8b8;\n      }\n      iVar21 = validate_input_and_return_result_08008b4c(uVar8,uVar6,0,DAT_0800ac3c);\n      if (iVar21 != 0) {\n        uVar2 = uVar2 + 1;\n        if (iVar17 < 1) {\n          uVar26 = FUNC_080082d0(0,DAT_0800ac38,uVar8,uVar6);\n          iVar21 = 2;\n          goto LAB_0800a7a4;\n        }\n        iVar21 = 2;\n        goto LAB_0800a8c8;\n      }\n    }\n    else {\n      iVar4 = (int)local_258[iVar17 + -1] >> (0x18U - local_270 & 0xff);\n      uVar12 = local_258[iVar17 + -1] - (iVar4 << (0x18U - local_270 & 0xff));\n      iVar21 = (int)uVar12 >> (0x17U - local_270 & 0xff);\n      local_258[iVar17 + -1] = uVar12;\n      uVar2 = uVar2 + iVar4;\njoined_r0x0800a8b8:\n      if (0 < iVar21) {\n        uVar2 = uVar2 + 1;\n        if (iVar17 < 1) {\n          uVar12 = 0;\n        }\n        else {\nLAB_0800a8c8:\n          uVar12 = local_258[0];\n          if (local_258[0] == 0) {\n            if (iVar17 != 1) {\n              puVar5 = local_258;\n              iVar4 = 1;\n              do {\n                puVar5 = puVar5 + 1;\n                uVar12 = *puVar5;\n                if (uVar12 != 0) {\n                  iVar14 = iVar4 + 1;\n                  goto LAB_0800a8e2;\n                }\n                iVar4 = iVar4 + 1;\n              } while (iVar4 != iVar17);\n            }\n          }\n          else {\n            iVar14 = 1;\n            iVar4 = 0;\nLAB_0800a8e2:\n            local_258[iVar4] = 0x1000000 - uVar12;\n            if (iVar14 < iVar17) {\n              uVar12 = local_258[iVar14];\n              puVar5 = local_258 + iVar14;\n              while( true ) {\n                puVar13 = puVar5 + 1;\n                *puVar5 = 0xffffff - uVar12;\n                if (puVar13 == local_258 + iVar17) break;\n                uVar12 = *puVar13;\n                puVar5 = puVar13;\n              }\n            }\n            uVar12 = 1;\n          }\n        }\n        if (0 < local_270) {\n          if (local_270 == 1) {\n            local_258[iVar17 + -1] = local_258[iVar17 + -1] & 0x7fffff;\n          }\n          else if (local_270 == 2) {\n            local_258[iVar17 + -1] = local_258[iVar17 + -1] & 0x3fffff;\n          }\n        }\n        if (iVar21 == 2) {\n          uVar26 = FUNC_080082d0(0,DAT_0800ac38,uVar8,uVar6);\n          if (uVar12 != 0) {\n            uVar25 = calculate_result_0800b2e8(0,DAT_0800ac38,local_270);\n            uVar26 = FUNC_080082d0((int)uVar26,(int)((ulonglong)uVar26 >> 0x20),(int)uVar25,\n                                  (int)((ulonglong)uVar25 >> 0x20));\n          }\n        }\n      }\n    }\nLAB_0800a7a4:\n    uVar8 = (undefined4)((ulonglong)uVar26 >> 0x20);\n    iVar4 = is_not_null_08008b10((int)uVar26,uVar8,0,0);\n    if (iVar4 == 0) {\n      uVar26 = calculate_result_0800b2e8((int)uVar26,uVar8,-local_270);\n      uVar6 = (undefined4)((ulonglong)uVar26 >> 0x20);\n      uVar8 = (undefined4)uVar26;\n      iVar9 = validate_input_and_return_result_08008b4c(uVar8,uVar6,0,DAT_0800ade4);\n      if (iVar9 == 0) {\n        uVar12 = convert_to_int_08008ba0(uVar8,uVar6);\n        local_258[iVar17] = uVar12;\n        iVar4 = iVar17;\n      }\n      else {\n        FUNC_08008640(uVar8,uVar6,0,DAT_0800ade8);\n        uVar12 = convert_to_int_08008ba0();\n        uVar26 = calculate_shifted_value_0800856c();\n        uVar26 = FUNC_08008640((int)uVar26,(int)((ulonglong)uVar26 >> 0x20),0,DAT_0800ade4);\n        FUNC_080082d0(uVar8,uVar6,(int)uVar26,(int)((ulonglong)uVar26 >> 0x20));\n        uVar3 = convert_to_int_08008ba0();\n        local_270 = local_270 + 0x18;\n        local_258[iVar17] = uVar3;\n        local_258[iVar17 + 1] = uVar12;\n        iVar4 = iVar17 + 1;\n      }\n      goto LAB_0800a9f6;\n    }\n    iVar4 = iVar17 + -1;\n    if (iVar15 <= iVar4) {\n      uVar12 = 0;\n      puVar5 = local_258 + iVar17 + 0x3fffffff;\n      do {\n        puVar13 = puVar5 + -1;\n        uVar12 = uVar12 | *puVar5;\n        puVar5 = puVar13;\n      } while (puVar13 != local_260[0]);\n      if (uVar12 != 0) break;\n    }\n    if (local_258[iVar15 + -1] == 0) {\n      local_280 = 1;\n      ppuVar7 = local_260 + iVar15;\n      do {\n        puVar5 = *ppuVar7;\n        local_280 = local_280 + 1;\n        ppuVar7 = ppuVar7 + -1;\n      } while (puVar5 == (uint *)0x0);\n      local_280 = iVar17 + local_280;\n    }\n    else {\n      local_280 = iVar17 + 1;\n    }\n    iVar21 = iVar17 + 1;\n    puVar23 = (undefined4 *)(param_6 + (iVar21 + local_26c + 0x3fffffff) * 4);\n    puVar16 = &uStack_208 + iVar17 + param_4;\n    local_284 = &uStack_c8 + iVar21;\n    do {\n      puVar23 = puVar23 + 1;\n      uVar26 = calculate_shifted_value_0800856c(*puVar23);\n      *puVar16 = uVar26;\n      puVar22 = puVar16 + 1;\n      if (iVar9 < 0) {\n        uVar25 = 0;\n      }\n      else {\n        uVar25 = 0;\n        puVar18 = puVar10;\n        while( true ) {\n          puVar16 = puVar16 + -1;\n          puVar1 = puVar18 + 2;\n          uVar26 = FUNC_08008640((int)uVar26,(int)((ulonglong)uVar26 >> 0x20),*puVar1,puVar18[3]);\n          uVar25 = FUNC_080082d4((int)uVar25,(int)((ulonglong)uVar25 >> 0x20),(int)uVar26,\n                                (int)((ulonglong)uVar26 >> 0x20));\n          if (puVar1 == puVar10 + param_4 * 2) break;\n          uVar26 = *puVar16;\n          puVar18 = puVar1;\n        }\n      }\n      *local_284 = uVar25;\n      iVar21 = iVar21 + 1;\n      iVar17 = local_280;\n      puVar16 = puVar22;\n      local_284 = local_284 + 1;\n    } while (iVar21 <= local_280);\n  } while( true );\n  local_270 = local_270 + -0x18;\n  if (local_258[iVar4] == 0) {\n    puVar5 = local_258 + iVar17 + 0x3ffffffe;\n    do {\n      uVar12 = *puVar5;\n      iVar4 = iVar4 + -1;\n      local_270 = local_270 + -0x18;\n      puVar5 = puVar5 + -1;\n    } while (uVar12 == 0);\n  }\nLAB_0800a9f6:\n  uVar26 = calculate_result_0800b2e8(0,DAT_0800ac38,local_270);\n  if (iVar4 < 0) {\n    if (2 < param_5) {\n      if (param_5 == 3) {\n        uVar28 = 0;\nLAB_0800abe4:\n        if (iVar21 == 0) {\n          *local_260[1] = (undefined4)local_168;\n          *(int *)((int)local_260[1] + 4) = local_168._4_4_;\n          *(undefined8 *)((int)local_260[1] + 0x10) = uVar28;\n          *(int *)((int)local_260[1] + 8) = local_160[0];\n          *(int *)((int)local_260[1] + 0xc) = local_160[1];\n          return uVar2 & 7;\n        }\n        *(int *)((int)local_260[1] + 0x10) = (int)uVar28;\n        *(int *)((int)local_260[1] + 8) = local_160[0];\n        *(int *)((int)local_260[1] + 0x14) = (int)((ulonglong)uVar28 >> 0x20) + -0x80000000;\n        *(int *)((int)local_260[1] + 4) = local_168._4_4_ + -0x80000000;\n        *(int *)((int)local_260[1] + 0xc) = local_160[1] + -0x80000000;\n        *local_260[1] = (undefined4)local_168;\n        return uVar2 & 7;\n      }\n      goto LAB_0800ab0e;\n    }\n    if (param_5 < 1) {\n      if (param_5 != 0) goto LAB_0800ab0e;\nLAB_0800aafc:\n      iVar9 = (int)((ulonglong)uVar28 >> 0x20);\n      if (iVar21 != 0) {\n        iVar9 = iVar9 + -0x80000000;\n      }\n      *local_260[1] = (int)uVar28;\n      *(int *)((int)local_260[1] + 4) = iVar9;\nLAB_0800ab0e:\n      return uVar2 & 7;\n    }\n    uVar28 = 0;\n  }\n  else {\n    puVar22 = &uStack_c8 + iVar4;\n    puVar5 = local_258 + iVar4 + 1;\n    puVar16 = &uStack_c8 + iVar4 + 1;\n    do {\n      uVar8 = (undefined4)((ulonglong)uVar26 >> 0x20);\n      puVar5 = puVar5 + -1;\n      uVar25 = calculate_shifted_value_0800856c(*puVar5);\n      uVar25 = FUNC_08008640((int)uVar25,(int)((ulonglong)uVar25 >> 0x20),(int)uVar26,uVar8);\n      puVar16 = puVar16 + -1;\n      *puVar16 = uVar25;\n      uVar26 = FUNC_08008640((int)uVar26,uVar8,0,DAT_0800ac40);\n    } while (puVar5 != local_258);\n    iVar9 = 0;\n    uVar8 = DAT_0800ac30;\n    uVar6 = DAT_0800ac34;\n    do {\n      DAT_0800ac30 = uVar8;\n      DAT_0800ac34 = uVar6;\n      if (iVar15 < 0) {\n        uVar26 = 0;\n      }\n      else {\n        uVar26 = 0;\n        iVar17 = 0;\n        puVar16 = puVar22;\n        puVar10 = (undefined4 *)PTR_DAT_0800ac44;\n        while( true ) {\n          uVar25 = FUNC_08008640(*(undefined4 *)puVar16,*(undefined4 *)((int)puVar16 + 4),uVar8,uVar6\n                               );\n          uVar26 = FUNC_080082d4((int)uVar26,(int)((ulonglong)uVar26 >> 0x20),(int)uVar25,\n                                (int)((ulonglong)uVar25 >> 0x20));\n          iVar17 = iVar17 + 1;\n          if ((iVar15 < iVar17) || (iVar9 < iVar17)) break;\n          uVar8 = *puVar10;\n          uVar6 = puVar10[1];\n          puVar16 = puVar16 + 1;\n          puVar10 = puVar10 + 2;\n        }\n      }\n      bVar24 = iVar9 != iVar4;\n      *(int *)(&local_168 + iVar9) = (int)uVar26;\n      *(int *)((int)&local_168 + (iVar9 * 2 + 1) * 4) = (int)((ulonglong)uVar26 >> 0x20);\n      puVar22 = puVar22 + -1;\n      iVar9 = iVar9 + 1;\n      uVar8 = DAT_0800ac30;\n      uVar6 = DAT_0800ac34;\n    } while (bVar24);\n    if (2 < param_5) {\n      if (param_5 == 3) {\n        if (iVar4 != 0) {\n          puVar16 = &local_168 + iVar4;\n          uVar28 = CONCAT44(*(undefined4 *)((int)&local_168 + (iVar4 * 2 + 1) * 4),\n                            *(undefined4 *)puVar16);\n          do {\n            uVar6 = (undefined4)((ulonglong)uVar28 >> 0x20);\n            uVar8 = (undefined4)uVar28;\n            uVar11 = *(undefined4 *)(puVar16 + -1);\n            uVar20 = *(undefined4 *)((int)puVar16 + -4);\n            uVar28 = FUNC_080082d4(uVar8,uVar6,uVar11,uVar20);\n            uVar26 = FUNC_080082d0(uVar11,uVar20,(int)uVar28,(int)((ulonglong)uVar28 >> 0x20));\n            uVar26 = FUNC_080082d4((int)uVar26,(int)((ulonglong)uVar26 >> 0x20),uVar8,uVar6);\n            *puVar16 = uVar26;\n            puVar16 = puVar16 + -1;\n            *puVar16 = uVar28;\n          } while (&local_168 != puVar16);\n          if (1 < iVar4) {\n            puVar16 = &local_168 + iVar4;\n            uVar28 = CONCAT44(*(undefined4 *)((int)&local_168 + (iVar4 * 2 + 1) * 4),\n                              *(undefined4 *)puVar16);\n            do {\n              uVar6 = (undefined4)((ulonglong)uVar28 >> 0x20);\n              uVar8 = (undefined4)uVar28;\n              uVar11 = *(undefined4 *)(puVar16 + -1);\n              uVar20 = *(undefined4 *)((int)puVar16 + -4);\n              uVar28 = FUNC_080082d4(uVar8,uVar6,uVar11,uVar20);\n              uVar26 = FUNC_080082d0(uVar11,uVar20,(int)uVar28,(int)((ulonglong)uVar28 >> 0x20));\n              uVar26 = FUNC_080082d4((int)uVar26,(int)((ulonglong)uVar26 >> 0x20),uVar8,uVar6);\n              *puVar16 = uVar26;\n              puVar16 = puVar16 + -1;\n              *puVar16 = uVar28;\n            } while (&local_168 + 1 != puVar16);\n            uVar28 = 0;\n            puVar16 = &local_168 + iVar4 + 1;\n            do {\n              puVar22 = puVar16 + -1;\n              uVar28 = FUNC_080082d4((int)uVar28,(int)((ulonglong)uVar28 >> 0x20),\n                                    *(undefined4 *)puVar22,*(undefined4 *)((int)puVar16 + -4));\n              puVar16 = puVar22;\n            } while (&local_168 + 2 != puVar22);\n            goto LAB_0800abe4;\n          }\n        }\n        uVar28 = 0;\n        goto LAB_0800abe4;\n      }\n      goto LAB_0800ab0e;\n    }\n    if (param_5 < 1) {\n      if (param_5 != 0) goto LAB_0800ab0e;\n      puVar16 = &local_168 + iVar4 + 1;\n      do {\n        puVar22 = puVar16 + -1;\n        uVar28 = FUNC_080082d4((int)uVar28,(int)((ulonglong)uVar28 >> 0x20),*(undefined4 *)puVar22,\n                              *(undefined4 *)((int)puVar16 + -4));\n        puVar16 = puVar22;\n      } while (&local_168 != puVar22);\n      goto LAB_0800aafc;\n    }\n    uVar28 = 0;\n    puVar16 = &local_168 + iVar4 + 1;\n    do {\n      puVar22 = puVar16 + -1;\n      uVar28 = FUNC_080082d4((int)uVar28,(int)((ulonglong)uVar28 >> 0x20),*(undefined4 *)puVar22,\n                            *(undefined4 *)((int)puVar16 + -4));\n      puVar16 = puVar22;\n    } while (&local_168 != puVar22);\n  }\n  iVar9 = (int)((ulonglong)uVar28 >> 0x20);\n  uVar8 = (undefined4)uVar28;\n  if (iVar21 == 0) {\n    *(undefined8 *)local_260[1] = uVar28;\n    uVar29 = FUNC_080082d0((undefined4)local_168,local_168._4_4_,uVar8,iVar9);\n    if (iVar4 < 1) goto LAB_0800ad26;\nLAB_0800ad04:\n    iVar9 = 1;\n    puVar16 = &local_168;\n    do {\n      uVar29 = FUNC_080082d4((int)uVar29,(int)(uVar29 >> 0x20),*(undefined4 *)(puVar16 + 1),\n                            *(undefined4 *)((int)puVar16 + 0xc));\n      iVar9 = iVar9 + 1;\n      puVar16 = puVar16 + 1;\n    } while (iVar9 <= iVar4);\n    if (iVar21 == 0) goto LAB_0800ad26;\n  }\n  else {\n    *local_260[1] = uVar8;\n    *(int *)((int)local_260[1] + 4) = iVar9 + -0x80000000;\n    uVar29 = FUNC_080082d0((undefined4)local_168,local_168._4_4_,uVar8,iVar9);\n    if (0 < iVar4) goto LAB_0800ad04;\n  }\n  uVar29 = uVar29 & 0xffffffff | (ulonglong)((int)(uVar29 >> 0x20) + 0x80000000) << 0x20;\nLAB_0800ad26:\n  *(ulonglong *)((int)local_260[1] + 8) = uVar29;\n  return uVar2 & 7;\n}\n\n",
            "called": [
                "FUN_080082d0",
                "FUN_080082d4",
                "FUN_080094c0",
                "FUN_0800856c",
                "FUN_08008b4c",
                "FUN_08008ba0",
                "FUN_08008640",
                "FUN_0800b2e8",
                "FUN_08008b10"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x0800a5a0",
            "calling": [
                "FUN_08009d78"
            ],
            "imported": false,
            "current_name": "FUNC_0800a5a0"
        },
        "FUN_0800195c": {
            "renaming": {
                "FUN_0800195c": "activate_sensor_if_not_active_and_set_flag_if_needed_0800195c",
                "PTR_DAT_08001990": "sensor_status"
            },
            "code": "void activate_sensor_if_not_active_and_set_flag_if_needed_0800195c(void)\n{\n  if ((PTR_DAT_08001990[1] != SENSOR_1_ACTIVE) && ((PTR_DAT_08001990[2] & SENSOR_2_FLAG) == 0)) {\n    activate_sensor_if_not_active_080025e8();\n    PTR_DAT_08001990[2] = PTR_DAT_08001990[2] | SENSOR_2_FLAG;\n  }\n  return;\n}",
            "called": [
                "FUN_080025e8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800195c",
            "calling": [
                "FUN_080074c8"
            ],
            "imported": false,
            "current_name": "activate_sensor_if_not_active_and_set_flag_if_needed_0800195c"
        },
        "FUN_08009214": {
            "renaming": {
                "FUN_08009214": "check_input_is_not_null_08009214_08009214",
                "in_ZR": "input_char"
            },
            "code": "bool check_input_is_not_null_08009214_08009214(void)\\n{\\n  char input_char;\\n  calculate_concatenated_parameters_08009204_08009204();\\n  return input_char != \"\\0\";\\n}",
            "called": [
                "FUN_08009204"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009214",
            "calling": [
                "FUN_08002afc",
                "FUN_080029d8",
                "FUN_080005b4",
                "FUN_08002638",
                "FUN_08004e30",
                "FUN_08001f00"
            ],
            "imported": false,
            "current_name": "check_input_is_not_null_08009214_08009214"
        },
        "FUN_08004dd2": {
            "renaming": {
                "FUN_08004dd2": "is_data_valid_08004dd2",
                "bVar1": "data_value",
                "iVar2": "checksum_valid",
                "is_checksum_valid_080003ec": "is_checksum_valid",
                "PTR_DAT_08004e2c": "PTR_DAT",
                "write_to_memory_and_checksum_08004c2a_08004c48": "write_to_memory_and_checksum"
            },
            "code": "int is_data_valid_08004dd2() {\n    byte data_value = get_value_from_data_table(0);\n    if (data_value == 5) {\n        int checksum_valid = is_checksum_valid(PTR_DAT_08004e2c_08004e2c, 1, 0x40);\n        if (checksum_valid == 0) {\n            return 0;\n        }\n    }\n    else {\n        if (data_value > 4) {\n            return 0;\n        }\n        int checksum_valid = is_checksum_valid(PTR_DAT_08004e2c_08004e2c, 1, 0x28);\n        if (checksum_valid == 0) {\n            return 0;\n        }\n        write_to_memory_and_checksum(0);\n    }\n    return 1;\n}",
            "called": [
                "FUN_08000310",
                "FUN_08004c48",
                "FUN_080003ec"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004dd2",
            "calling": [
                "FUN_080051b4"
            ],
            "imported": false,
            "current_name": "is_data_valid_08004dd2"
        },
        "FUN_08008244": {
            "renaming": {
                "FUN_08008244": "do_nothing_08008244"
            },
            "code": "\nvoid do_nothing_08008244(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008244",
            "calling": [
                "FUN_08001ddc"
            ],
            "imported": false,
            "current_name": "do_nothing_08008244"
        },
        "FUN_08005778": {
            "renaming": {
                "FUN_08005778": "update_value_at_address_08005778",
                "PTR_DAT_0800578c": "PTR_DAT_address"
            },
            "code": "void update_value_at_address_08005778(void)\n{\n  int* address = (int*)PTR_DAT_0800578c;\n  update_value_at_address_08005778_080052ac(*address);\n  return;\n}",
            "called": [
                "FUN_080052ac"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005778",
            "calling": [
                "FUN_08007c7c"
            ],
            "imported": false,
            "current_name": "update_value_at_address_08005778"
        },
        "FUN_080028bc": {
            "renaming": {
                "FUN_080028bc": "calculate_result_080028bc",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "uVar1": "result1",
                "uVar2": "result2"
            },
            "code": "undefined4 calculate_result_080028bc(undefined4 input1, undefined4 input2, undefined4 input3)\n{\n  undefined4 result1;\n  undefined4 result2;\n  result1 = FUNC_08008eec(input2, input2);\n  result2 = FUNC_08008eec(input1, input1);\n  result1 = FUNC_08008cd8(result1, result2);\n  result2 = FUNC_08008cdc(input3, input3);\n  result1 = FUNC_08009054(result1, result2);\n  return result1;\n}",
            "called": [
                "FUN_08008cd8",
                "FUN_08009054",
                "FUN_08008cdc",
                "FUN_08008eec"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080028bc",
            "calling": [
                "FUN_08002c18"
            ],
            "imported": false,
            "current_name": "calculate_result_080028bc"
        },
        "FUN_08006628": {
            "renaming": {
                "FUN_08006628": "calculate_division_rate_08006628",
                "uVar1": "division_rate",
                "uVar2": "leading_zeroes",
                "PTR_DAT_0800667c": "ptr",
                "PTR_DAT_08006678": "index_array",
                "DAT_08006674": "data"
            },
            "code": "uint calculate_division_rate_08006628() {\n    uint division_rate = calculate_division_rate_08006628_080064ec();\n    uint leading_zeroes = count_leading_zeroes(0xf000000);\n    uint index = (*(uint *)(DAT_08006674 + 8) & 0xf0) >> (leading_zeroes & 0xff);\n    uint* PTR_DAT_0800667c = (uint*) PTR_DAT_0800667c;\n    *PTR_DAT_0800667c = division_rate >> index;\n    return *(uint*) PTR_DAT_0800667c;\n}",
            "called": [
                "FUN_080064ec"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006628",
            "calling": [
                "FUN_0800618c",
                "FUN_08006680",
                "FUN_080066cc"
            ],
            "imported": false,
            "current_name": "calculate_division_rate_08006628"
        },
        "FUN_0800738e": {
            "renaming": {
                "FUN_0800738e": "set_param_if_valid_0800738e",
                "param_1": "param",
                "DAT_080073bc": "dat_080073bc",
                "PTR_dat_080073bc_14": "ptr_dat_080073bc_14",
                "param_mask": "param_mask"
            },
            "code": "void set_param_if_valid_0800738e(ushort param)\n{\n    uint* PTR_DAT_080073bc_14 = (uint*)(DAT_080073bc + 0x14);\n    uint param_mask = *PTR_DAT_080073bc_14;\n    if ((uint)param & param_mask) {\n        *PTR_DAT_080073bc_14 = (uint)param;\n        do_nothing_080073c0(param);\n    }\n}",
            "called": [
                "FUN_080073c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800738e",
            "calling": [],
            "imported": false,
            "current_name": "set_param_if_valid_0800738e"
        },
        "FUN_08002828": {
            "renaming": {
                "FUN_08002828": "do_nothing_08002828"
            },
            "code": "\nvoid do_nothing_08002828(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002828",
            "calling": [
                "FUN_08001994"
            ],
            "imported": false,
            "current_name": "do_nothing_08002828"
        },
        "FUN_080053a0": {
            "renaming": {
                "FUN_080053a0": "FUNC_080053a0"
            },
            "code": "\nvoid FUNC_080053a0(void)\n\n{\n  undefined4 uVar1;\n  int iVar2;\n  \n  update_param_080052dc(*(undefined2 *)PTR_DAT_080055f0);\n  *(undefined2 *)PTR_DAT_080055f8 = *(undefined2 *)PTR_DAT_080055f4;\n  if (*(int *)PTR_DAT_080055fc == 0) {\n    uVar1 = get_data_08002f74();\n    *(undefined4 *)PTR_DAT_080055fc = uVar1;\n    if (*(int *)PTR_DAT_080055fc == 0) {\n      clear_bits_and_check_condition_080057e4();\n      PTR_DAT_08005600[2] = PTR_DAT_08005600[2] | 4;\n    }\n    else {\n      if (PTR_DAT_08005600[1] == '\\x03') {\n        *(undefined4 *)(PTR_DAT_08005604 + 0x1c) = *(undefined4 *)(*(int *)PTR_DAT_080055fc + 0x28);\n        calculate_local_value_08005324(*(undefined4 *)(PTR_DAT_08005604 + 0x1c));\n        *(undefined4 *)(PTR_DAT_08005604 + 0x18) = DAT_08005608;\n      }\n      *(int *)(PTR_DAT_08005604 + 0x20) =\n           (*(int *)(*(int *)PTR_DAT_080055fc + 0x30) >> 1) +\n           *(int *)(*(int *)PTR_DAT_080055fc + 0x30);\n      *(int *)PTR_DAT_08005604 = -(*(int *)(*(int *)PTR_DAT_080055fc + 0x10) >> 1);\n      *(undefined4 *)(PTR_DAT_08005604 + 4) = *(undefined4 *)PTR_DAT_08005604;\n      *(undefined4 *)(PTR_DAT_08005604 + 8) = *(undefined4 *)PTR_DAT_08005604;\n      *(undefined4 *)(PTR_DAT_08005604 + 0xc) = *(undefined4 *)(*(int *)PTR_DAT_080055fc + 0x10);\n      *(undefined4 *)(PTR_DAT_08005604 + 0x10) = 0;\n    }\n  }\n  if (*(int *)PTR_DAT_080055fc != 0) {\n    *(undefined2 *)PTR_DAT_080055f0 = **(undefined2 **)PTR_DAT_080055fc;\n    *(undefined2 *)PTR_DAT_080055f4 = 0;\n    *(int *)PTR_DAT_08005604 = *(int *)(*(int *)PTR_DAT_080055fc + 4) + *(int *)PTR_DAT_08005604;\n    if (0 < *(int *)PTR_DAT_08005604) {\n      *(ushort *)PTR_DAT_080055f4 = *(ushort *)PTR_DAT_080055f4 | 0x10;\n      *(int *)PTR_DAT_08005604 = *(int *)PTR_DAT_08005604 - *(int *)(PTR_DAT_08005604 + 0xc);\n      if ((*(ushort *)PTR_DAT_080055f0 & 0x20) == 0) {\n        *(int *)(PTR_DAT_08005600 + 4) = *(int *)(PTR_DAT_08005600 + 4) + 1;\n      }\n      else {\n        *(int *)(PTR_DAT_08005600 + 4) = *(int *)(PTR_DAT_08005600 + 4) + -1;\n      }\n    }\n    *(int *)(PTR_DAT_08005604 + 4) =\n         *(int *)(*(int *)PTR_DAT_080055fc + 8) + *(int *)(PTR_DAT_08005604 + 4);\n    if (0 < *(int *)(PTR_DAT_08005604 + 4)) {\n      *(ushort *)PTR_DAT_080055f4 = *(ushort *)PTR_DAT_080055f4 | 0x440;\n      *(int *)(PTR_DAT_08005604 + 4) =\n           *(int *)(PTR_DAT_08005604 + 4) - *(int *)(PTR_DAT_08005604 + 0xc);\n      if ((*(ushort *)PTR_DAT_080055f0 & 0x80) == 0) {\n        *(int *)(PTR_DAT_08005600 + 8) = *(int *)(PTR_DAT_08005600 + 8) + 1;\n      }\n      else {\n        *(int *)(PTR_DAT_08005600 + 8) = *(int *)(PTR_DAT_08005600 + 8) + -1;\n      }\n    }\n    *(int *)(PTR_DAT_08005604 + 8) =\n         *(int *)(*(int *)PTR_DAT_080055fc + 0xc) + *(int *)(PTR_DAT_08005604 + 8);\n    if (0 < *(int *)(PTR_DAT_08005604 + 8)) {\n      *(ushort *)PTR_DAT_080055f4 = *(ushort *)PTR_DAT_080055f4 | 0x100;\n      *(int *)(PTR_DAT_08005604 + 8) =\n           *(int *)(PTR_DAT_08005604 + 8) - *(int *)(PTR_DAT_08005604 + 0xc);\n      if ((*(ushort *)PTR_DAT_080055f0 & 0x200) == 0) {\n        *(int *)(PTR_DAT_08005600 + 0xc) = *(int *)(PTR_DAT_08005600 + 0xc) + 1;\n      }\n      else {\n        *(int *)(PTR_DAT_08005600 + 0xc) = *(int *)(PTR_DAT_08005600 + 0xc) + -1;\n      }\n    }\n    *(int *)(PTR_DAT_08005604 + 0x10) = *(int *)(PTR_DAT_08005604 + 0x10) + 1;\n    if (*(uint *)(PTR_DAT_08005604 + 0x10) < *(uint *)(*(int *)PTR_DAT_080055fc + 0x10)) {\n      if (PTR_DAT_08005600[1] == '\\x04') {\n        iVar2 = calculate_result_08005360();\n        if (iVar2 != 0) {\n          if (*(uint *)(*(int *)PTR_DAT_080055fc + 0x30) < *(uint *)(PTR_DAT_08005604 + 0x1c)) {\n            *(int *)(PTR_DAT_08005604 + 0x1c) =\n                 *(int *)(PTR_DAT_08005604 + 0x1c) - *(int *)(*(int *)PTR_DAT_080055fc + 0x30);\n            calculate_local_value_08005324(*(undefined4 *)(PTR_DAT_08005604 + 0x1c));\n          }\n          else {\n            clear_bits_and_check_condition_080057e4();\n            PTR_DAT_08005600[2] = PTR_DAT_08005600[2] | 4;\n          }\n        }\n      }\n      else if (*(uint *)(PTR_DAT_08005748 + 0x10) < *(uint *)(*(int *)PTR_DAT_0800574c + 0x34)) {\n        iVar2 = calculate_result_08005360();\n        if (iVar2 != 0) {\n          *(int *)(PTR_DAT_08005748 + 0x1c) =\n               *(int *)(PTR_DAT_08005748 + 0x1c) + *(int *)(*(int *)PTR_DAT_0800574c + 0x30);\n          if (*(uint *)(*(int *)PTR_DAT_0800574c + 0x3c) <= *(uint *)(PTR_DAT_08005748 + 0x1c)) {\n            *(undefined4 *)(PTR_DAT_08005748 + 0x1c) =\n                 *(undefined4 *)(*(int *)PTR_DAT_0800574c + 0x3c);\n          }\n          calculate_local_value_08005324(*(undefined4 *)(PTR_DAT_08005748 + 0x1c));\n        }\n      }\n      else if (*(uint *)(PTR_DAT_08005748 + 0x10) < *(uint *)(*(int *)PTR_DAT_0800574c + 0x38)) {\n        if (*(int *)(PTR_DAT_08005748 + 0x1c) != *(int *)(*(int *)PTR_DAT_0800574c + 0x3c)) {\n          *(undefined4 *)(PTR_DAT_08005748 + 0x1c) =\n               *(undefined4 *)(*(int *)PTR_DAT_0800574c + 0x3c);\n          calculate_local_value_08005324(*(undefined4 *)(PTR_DAT_08005748 + 0x1c));\n        }\n      }\n      else if (*(int *)(PTR_DAT_08005748 + 0x10) == *(int *)(*(int *)PTR_DAT_0800574c + 0x38)) {\n        if (*(int *)(PTR_DAT_08005748 + 0x1c) == *(int *)(*(int *)PTR_DAT_0800574c + 0x3c)) {\n          *(undefined4 *)(PTR_DAT_08005748 + 0x18) = DAT_08005750;\n        }\n        else {\n          *(int *)(PTR_DAT_08005748 + 0x18) = 420000 - *(int *)(PTR_DAT_08005748 + 0x18);\n        }\n      }\n      else {\n        iVar2 = calculate_result_08005360();\n        if (iVar2 != 0) {\n          if (*(uint *)(PTR_DAT_08005748 + 0x20) < *(uint *)(PTR_DAT_08005748 + 0x1c)) {\n            *(int *)(PTR_DAT_08005748 + 0x1c) =\n                 *(int *)(PTR_DAT_08005748 + 0x1c) - *(int *)(*(int *)PTR_DAT_0800574c + 0x30);\n          }\n          else {\n            *(uint *)(PTR_DAT_08005748 + 0x1c) = *(uint *)(PTR_DAT_08005748 + 0x1c) >> 1;\n          }\n          if (*(uint *)(PTR_DAT_08005748 + 0x1c) < *(uint *)(*(int *)PTR_DAT_0800574c + 0x2c)) {\n            *(undefined4 *)(PTR_DAT_08005748 + 0x1c) =\n                 *(undefined4 *)(*(int *)PTR_DAT_0800574c + 0x2c);\n          }\n          calculate_local_value_08005324(*(undefined4 *)(PTR_DAT_08005748 + 0x1c));\n        }\n      }\n    }\n    else {\n      *(undefined2 *)PTR_DAT_08005754 = 0;\n      *(undefined4 *)PTR_DAT_0800574c = 0;\n      update_character_if_different_08002f40();\n    }\n  }\n  *(ushort *)PTR_DAT_08005754 = *(ushort *)PTR_DAT_08005754 ^ *(ushort *)(PTR_DAT_08005758 + 0x18);\n  *(ushort *)PTR_DAT_0800575c = *(ushort *)PTR_DAT_0800575c ^ *(ushort *)(PTR_DAT_08005758 + 0x1a);\n  return;\n}\n\n",
            "called": [
                "FUN_080052dc",
                "FUN_08005324",
                "FUN_08002f40",
                "FUN_080057e4",
                "FUN_08005360",
                "FUN_08002f74"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x080053a0",
            "calling": [
                "FUN_08007c7c"
            ],
            "imported": false,
            "current_name": "FUNC_080053a0"
        },
        "FUN_080092c4": {
            "renaming": {
                "FUN_080092c4": "initialize_and_execute_system_080092c4",
                "iVar1": "i",
                "puVar2": "data_ptr",
                "UNRECOVERED_JUMPTABLE": "jump_table_ptr",
                "set_flags_0800756c": "set_flags",
                "execute_functions_0800b3e8": "execute_functions",
                "initialize_system_and_interrupts_08007540": "initialize_system_and_interrupts"
            },
            "code": "void initialize_and_execute_system_080092c4(void)\n{\n  int i = 0;\n  undefined4 *data_ptr = (undefined4 *)PTR_DAT_0800930c;\n  code *jump_table_ptr;\n  for (i = 0; PTR_DAT_08009304 + i < PTR_DAT_08009308; i += 4) {\n    *(undefined4 *)(PTR_DAT_08009304 + i) = *(undefined4 *)(DAT_08009300 + i);\n  }\n  for (; data_ptr < PTR_DAT_08009310; data_ptr++) {\n    *data_ptr = 0;\n  }\n  set_flags();\n  execute_functions();\n  jump_table_ptr = (code *)0x80092fa;\n  initialize_system_and_interrupts();\n  (*jump_table_ptr)();\n  return;\n}",
            "called": [
                "FUN_08007540",
                "FUN_0800756c",
                "FUN_0800b3e8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080092c4",
            "calling": [],
            "imported": false,
            "current_name": "initialize_and_execute_system_080092c4"
        },
        "FUN_08008250": {
            "renaming": {
                "FUN_08008250": "wait_until_bit_is_set_08008250",
                "param_1": "device_register"
            },
            "code": "void wait_until_bit_is_set_08008250(undefined device_register) {\n  wait_until_bit_set_08007e1c(device_register);\n  return;\n}",
            "called": [
                "FUN_08007e1c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008250",
            "calling": [
                "FUN_0800369c",
                "FUN_08003826",
                "FUN_080036f0",
                "FUN_080037fc",
                "FUN_08003778",
                "FUN_080036c6"
            ],
            "imported": false,
            "current_name": "wait_until_bit_is_set_08008250"
        },
        "FUN_0800184c": {
            "renaming": {
                "FUN_0800184c": "check_input_0800184c",
                "param_1": "output",
                "param_2": "output_size",
                "param_3": "input_size",
                "param_4": "input",
                "iVar1": "parse_input_result",
                "uVar2": "result"
            },
            "code": "int check_input_0800184c(byte *output, int output_size, int input_size, byte *input) {\n    int index = (uint)*input;\n\n    if (*(char *)(input_size + index) == '\\0') {\n        return 0;\n    }\n\n    *output = *(byte *)(input_size + index);\n\n    if ((*output < 0x41) || (0x5a < *output)) {\n        *PTR_DAT_080018c8 = 2;\n        return 0;\n    }\n\n    *input = *input + 1;\n    int parse_input_result = parse_input_08002638_08002638(input_size, input, output_size);\n\n    if (parse_input_result == 0) {\n        *PTR_DAT_080018c8 = 1;\n        return 0;\n    }\n\n    return 1;\n}",
            "called": [
                "FUN_08002638"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800184c",
            "calling": [
                "FUN_080005b4"
            ],
            "imported": false,
            "current_name": "check_input_0800184c"
        },
        "FUN_08001f00": {
            "renaming": {
                "FUN_08001f00": "FUNC_08001f00"
            },
            "code": "\nvoid FUNC_08001f00(int param_1,undefined4 *param_2,int param_3,byte param_4,byte param_5,byte param_6\n                 ,undefined4 param_7,char param_8,undefined4 param_9,char param_10)\n\n{\n  undefined4 uVar1;\n  undefined4 uVar2;\n  int iVar3;\n  uint uVar4;\n  undefined8 uVar5;\n  undefined8 uVar6;\n  uint local_6c [4];\n  undefined4 local_5c;\n  undefined4 local_58;\n  undefined4 local_54;\n  undefined4 local_50;\n  undefined4 local_4c;\n  undefined4 local_48;\n  ushort local_42;\n  undefined4 local_40;\n  undefined4 local_3c;\n  undefined4 local_38;\n  uint local_34;\n  undefined4 local_30;\n  undefined4 local_2c;\n  char local_27;\n  ushort local_26;\n  undefined4 local_24;\n  uint local_20;\n  uint local_1c;\n  \n  local_2c = FUNC_08008cdc(*(undefined4 *)((uint)param_4 * 4 + param_1),\n                          *(undefined4 *)((uint)param_4 * 4 + param_3));\n  local_30 = FUNC_08008cdc(*(undefined4 *)((uint)param_5 * 4 + param_1),\n                          *(undefined4 *)((uint)param_5 * 4 + param_3));\n  local_34 = FUNC_08008cd8(param_2[param_6],*(undefined4 *)((uint)param_6 * 4 + param_1));\n  local_1c = *(uint *)((uint)param_4 * 4 + param_3) ^ 0x80000000;\n  local_20 = *(uint *)((uint)param_5 * 4 + param_3) ^ 0x80000000;\n  local_38 = FUNC_08008cd8(param_2[param_4],local_2c);\n  local_3c = FUNC_08008cd8(param_2[param_5],local_30);\n  uVar1 = FUNC_08008eec(local_1c,local_3c);\n  uVar2 = FUNC_08008eec(local_20,local_38);\n  uVar1 = FUNC_08008cd8(uVar1,uVar2);\n  uVar5 = convert_to_big_endian_08008590(uVar1);\n  uVar1 = FUNC_08008eec(local_1c,local_38);\n  uVar2 = FUNC_08008eec(local_20,local_3c);\n  uVar1 = FUNC_08008cdc(uVar1,uVar2);\n  uVar6 = convert_to_big_endian_08008590(uVar1);\n  uVar5 = thunk_calculate_result_08009990((int)uVar5,(int)((ulonglong)uVar5 >> 0x20),(int)uVar6,\n                             (int)((ulonglong)uVar6 >> 0x20));\n  local_24 = calculate_float_bits_08008c30((int)uVar5,(int)((ulonglong)uVar5 >> 0x20));\n  if (param_10 == '\\0') {\n    iVar3 = check_if_carry_or_zero_0800923c(local_24,0);\n    if (iVar3 != 0) {\n      uVar5 = convert_to_big_endian_08008590(local_24);\n      uVar5 = FUNC_080082d4((int)uVar5,(int)((ulonglong)uVar5 >> 0x20),DAT_08002240,DAT_08002244);\n      local_24 = calculate_float_bits_08008c30((int)uVar5,(int)((ulonglong)uVar5 >> 0x20));\n    }\n  }\n  else {\n    iVar3 = check_sum_of_concatenated_parameters_08009250(local_24,0);\n    if (iVar3 != 0) {\n      uVar5 = convert_to_big_endian_08008590(local_24);\n      uVar5 = FUNC_080082d0((int)uVar5,(int)((ulonglong)uVar5 >> 0x20),DAT_08002240,DAT_08002244);\n      local_24 = calculate_float_bits_08008c30((int)uVar5,(int)((ulonglong)uVar5 >> 0x20));\n    }\n  }\n  uVar1 = FUNC_08008eec(local_24,param_9);\n  uVar5 = convert_to_big_endian_08008590(uVar1);\n  uVar6 = convert_to_big_endian_08008590(local_34 & 0x7fffffff);\n  uVar5 = calculate_hypotenuse_0800981c((int)uVar5,(int)((ulonglong)uVar5 >> 0x20),(int)uVar6,\n                       (int)((ulonglong)uVar6 >> 0x20));\n  local_40 = calculate_float_bits_08008c30((int)uVar5,(int)((ulonglong)uVar5 >> 0x20));\n  iVar3 = check_input_is_not_null_08009214_08009214(local_40,0);\n  if (iVar3 == 0) {\n    uVar1 = FUNC_08009054(local_40,*(undefined4 *)(PTR_DAT_08002248 + 0x1c));\n    uVar5 = convert_to_big_endian_08008590(uVar1);\n    uVar5 = calculate_long_long_080094c0((int)uVar5,(int)((ulonglong)uVar5 >> 0x20));\n    local_42 = calculate_shifted_value_08008bf0((int)uVar5,(int)((ulonglong)uVar5 >> 0x20));\n    if (param_8 != '\\0') {\n      uVar1 = calculate_hash_08008e44(local_42);\n      param_7 = FUNC_08008eec(param_7,uVar1);\n    }\n    uVar1 = calculate_hash_08008e44(local_42);\n    local_48 = FUNC_08009054(local_24,uVar1);\n    uVar1 = calculate_hash_08008e44(local_42);\n    local_4c = FUNC_08009054(local_34,uVar1);\n    uVar5 = convert_to_big_endian_08008590(local_48);\n    uVar5 = FUNC_08008640((int)uVar5,(int)((ulonglong)uVar5 >> 0x20),0,DAT_0800224c);\n    uVar6 = convert_to_big_endian_08008590(local_48);\n    uVar5 = FUNC_08008640((int)uVar5,(int)((ulonglong)uVar5 >> 0x20),(int)uVar6,\n                         (int)((ulonglong)uVar6 >> 0x20));\n    uVar5 = FUNC_080082d0(0,DAT_08002250,(int)uVar5,(int)((ulonglong)uVar5 >> 0x20));\n    local_50 = calculate_float_bits_08008c30((int)uVar5,(int)((ulonglong)uVar5 >> 0x20));\n    local_54 = local_48;\n    local_27 = '\\0';\n    local_6c[param_6] = *(uint *)(param_1 + (uint)param_6 * 4);\n    for (local_26 = 1; local_26 < local_42; local_26 = local_26 + 1) {\n      if ((int)local_27 < (int)(uint)(byte)PTR_DAT_08002248[0x3e]) {\n        uVar1 = FUNC_08008eec(local_1c,local_54);\n        uVar2 = FUNC_08008eec(local_20,local_50);\n        local_6c[3] = FUNC_08008cdc(uVar1,uVar2);\n        uVar1 = FUNC_08008eec(local_1c,local_50);\n        uVar2 = FUNC_08008eec(local_20,local_54);\n        local_1c = FUNC_08008cd8(uVar1,uVar2);\n        local_20 = local_6c[3];\n        local_27 = local_27 + '\\x01';\n      }\n      else {\n        uVar1 = calculate_hash_08008e44(local_26);\n        uVar1 = FUNC_08008eec(uVar1,local_48);\n        uVar5 = convert_to_big_endian_08008590(uVar1);\n        uVar5 = calculate_result_08009410_08009410((int)uVar5,(int)((ulonglong)uVar5 >> 0x20));\n        local_58 = calculate_float_bits_08008c30((int)uVar5,(int)((ulonglong)uVar5 >> 0x20));\n        uVar1 = calculate_hash_08008e44(local_26);\n        uVar1 = FUNC_08008eec(uVar1,local_48);\n        uVar5 = convert_to_big_endian_08008590(uVar1);\n        uVar5 = calculate_result_080096e8_080096e8((int)uVar5,(int)((ulonglong)uVar5 >> 0x20));\n        local_5c = calculate_float_bits_08008c30((int)uVar5,(int)((ulonglong)uVar5 >> 0x20));\n        uVar1 = FUNC_08008eec(*(uint *)((uint)param_4 * 4 + param_3) ^ 0x80000000,local_58);\n        uVar2 = FUNC_08008eec(*(undefined4 *)((uint)param_5 * 4 + param_3),local_5c);\n        local_1c = FUNC_08008cdc(uVar1,uVar2);\n        uVar1 = FUNC_08008eec(*(uint *)((uint)param_4 * 4 + param_3) ^ 0x80000000,local_5c);\n        uVar2 = FUNC_08008eec(*(undefined4 *)((uint)param_5 * 4 + param_3),local_58);\n        local_20 = FUNC_08008cd8(uVar1,uVar2);\n        local_27 = '\\0';\n      }\n      uVar4 = FUNC_08008cdc(local_2c,local_1c);\n      local_6c[param_4] = uVar4;\n      uVar4 = FUNC_08008cdc(local_30,local_20);\n      local_6c[param_5] = uVar4;\n      uVar4 = FUNC_08008cdc(local_6c[param_6],local_4c);\n      local_6c[param_6] = uVar4;\n      process_data_if_not_already_processed_08001e98(local_6c[0],local_6c[1],local_6c[2],param_7,param_8);\n      if (*PTR_DAT_08002404 != '\\0') {\n        return;\n      }\n    }\n    process_data_if_not_already_processed_08001e98(*param_2,param_2[1],param_2[2],param_7,param_8);\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_08009250",
                "FUN_08009410",
                "FUN_080094c0",
                "FUN_08008590",
                "FUN_080096e8",
                "FUN_08008640",
                "FUN_08008bf0",
                "thunk_FUN_08009990",
                "FUN_08008cdc",
                "FUN_080082d0",
                "FUN_080082d4",
                "FUN_08008c30",
                "FUN_08008e44",
                "FUN_08001e98",
                "FUN_08009214",
                "FUN_08008cd8",
                "FUN_08009054",
                "FUN_0800923c",
                "FUN_0800981c",
                "FUN_08008eec"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08001f00",
            "calling": [
                "FUN_080005b4"
            ],
            "imported": false,
            "current_name": "FUNC_08001f00"
        },
        "FUN_08006ce0": {
            "renaming": {
                "FUN_08006ce0": "set_parameter_08006ce0",
                "param_1": "parameter"
            },
            "code": "void set_parameter_08006ce0(undefined4 parameter)\n{\n  set_param_08006950(parameter);\n  return;\n}",
            "called": [
                "FUN_08006950"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006ce0",
            "calling": [
                "FUN_080059b4"
            ],
            "imported": false,
            "current_name": "set_parameter_08006ce0"
        },
        "FUN_08006d4a": {
            "renaming": {
                "FUN_08006d4a": "set_bit_in_array_08006d4a",
                "param_1": "character"
            },
            "code": "void set_bit_in_array_08006d4a(char character){\n    set_bit_in_array_08006d4a_080069e4((int)character);\n}",
            "called": [
                "FUN_080069e4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006d4a",
            "calling": [],
            "imported": false,
            "current_name": "set_bit_in_array_08006d4a"
        },
        "FUN_08008894": {
            "renaming": {
                "FUN_08008894": "FUNC_08008894"
            },
            "code": "\nulonglong FUNC_08008894(undefined4 param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  uint uVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  uint uVar7;\n  int iVar8;\n  uint uVar9;\n  uint unaff_r5;\n  uint uVar10;\n  uint uVar11;\n  uint uVar12;\n  uint uVar13;\n  bool bVar14;\n  bool bVar15;\n  bool bVar16;\n  ulonglong uVar17;\n  \n  uVar17 = CONCAT44(param_2,param_1);\n  uVar13 = 0x7ff;\n  uVar7 = param_2 >> 0x14 & 0x7ff;\n  bVar14 = uVar7 == 0;\n  if (!bVar14) {\n    unaff_r5 = param_4 >> 0x14 & 0x7ff;\n    bVar14 = unaff_r5 == 0;\n  }\n  if (!bVar14) {\n    bVar14 = uVar7 == 0x7ff;\n  }\n  if (!bVar14) {\n    bVar14 = unaff_r5 == 0x7ff;\n  }\n  if (bVar14) {\n    uVar17 = calculate_result_08008a02();\n  }\n  uVar9 = (uint)(uVar17 >> 0x20);\n  uVar11 = (uint)uVar17;\n  iVar8 = uVar7 - unaff_r5;\n  if ((param_3 | param_4 << 0xc) == 0) {\n    uVar7 = (uVar9 ^ param_4) & 0x80000000 | uVar9 & 0xfffff;\n    bVar16 = SCARRY4(iVar8,uVar13 >> 1);\n    uVar9 = iVar8 + (uVar13 >> 1);\n    bVar14 = (int)uVar9 < 0;\n    bVar15 = uVar9 == 0;\n    if (!bVar15 && bVar14 == bVar16) {\n      bVar16 = SBORROW4(uVar13,uVar9);\n      bVar14 = (int)(uVar13 - uVar9) < 0;\n      bVar15 = uVar13 == uVar9;\n    }\n    if (!bVar15 && bVar14 == bVar16) {\n      uVar7 = uVar7 | uVar9 * 0x100000;\n    }\n    if (!bVar15 && bVar14 == bVar16) {\n      return uVar17 & 0xffffffff | (ulonglong)uVar7 << 0x20;\n    }\n    uVar7 = uVar7 | 0x100000;\n    uVar13 = 0;\n    bVar15 = SBORROW4(uVar9,1);\n    uVar9 = uVar9 - 1;\n    bVar14 = uVar9 == 0;\n    uVar3 = uVar9;\n  }\n  else {\n    uVar3 = (param_4 << 0xc) >> 4 | 0x10000000 | param_3 >> 0x18;\n    uVar13 = param_3 << 8;\n    uVar10 = (uVar9 << 0xc) >> 4 | 0x10000000 | uVar11 >> 0x18;\n    uVar11 = uVar11 * 0x100;\n    uVar7 = (uVar9 ^ param_4) & 0x80000000;\n    bVar14 = uVar3 <= uVar10;\n    if (uVar10 == uVar3) {\n      bVar14 = uVar13 <= uVar11;\n    }\n    iVar8 = iVar8 + (uint)bVar14;\n    uVar9 = iVar8 + 0x3fd;\n    if (bVar14 == false) {\n      uVar3 = uVar3 >> 1;\n      uVar13 = (uint)((param_3 >> 0x18 & 1) != 0) << 0x1f | uVar13 >> 1;\n    }\n    uVar12 = uVar11 - uVar13;\n    uVar10 = (uVar10 - uVar3) - (uint)(uVar11 < uVar13);\n    uVar4 = uVar3 >> 1;\n    uVar1 = (uint)((uVar3 & 1) != 0) << 0x1f | uVar13 >> 1;\n    uVar11 = 0x100000;\n    uVar3 = 0x80000;\n    while( true ) {\n      bVar14 = uVar1 <= uVar12;\n      if (uVar4 < uVar10 || uVar10 - uVar4 < (uint)bVar14) {\n        uVar12 = uVar12 - uVar1;\n        uVar11 = uVar11 | uVar3;\n        uVar10 = (uVar10 - uVar4) - (uint)!bVar14;\n      }\n      uVar5 = uVar4 >> 1;\n      uVar1 = (uint)((uVar4 & 1) != 0) << 0x1f | uVar1 >> 1;\n      bVar15 = uVar1 <= uVar12;\n      bVar14 = uVar10 - uVar5 < (uint)bVar15;\n      uVar13 = uVar10;\n      if (uVar5 < uVar10 || bVar14) {\n        uVar12 = uVar12 - uVar1;\n        uVar13 = (uVar10 - uVar5) - (uint)!bVar15;\n      }\n      if (uVar5 < uVar10 || bVar14) {\n        uVar11 = uVar11 | uVar3 >> 1;\n      }\n      uVar10 = uVar4 >> 2;\n      uVar2 = (uint)((uVar5 & 1) != 0) << 0x1f | uVar1 >> 1;\n      bVar15 = uVar2 <= uVar12;\n      bVar14 = uVar13 - uVar10 < (uint)bVar15;\n      uVar5 = uVar13;\n      if (uVar10 < uVar13 || bVar14) {\n        uVar12 = uVar12 - uVar2;\n        uVar5 = (uVar13 - uVar10) - (uint)!bVar15;\n      }\n      if (uVar10 < uVar13 || bVar14) {\n        uVar11 = uVar11 | uVar3 >> 2;\n      }\n      uVar6 = uVar4 >> 3;\n      uVar1 = (uint)((uVar10 & 1) != 0) << 0x1f | uVar2 >> 1;\n      bVar15 = uVar1 <= uVar12;\n      bVar14 = uVar5 - uVar6 < (uint)bVar15;\n      uVar10 = uVar5;\n      if (uVar6 < uVar5 || bVar14) {\n        uVar12 = uVar12 - uVar1;\n        uVar10 = (uVar5 - uVar6) - (uint)!bVar15;\n      }\n      if (uVar6 < uVar5 || bVar14) {\n        uVar11 = uVar11 | uVar3 >> 3;\n      }\n      uVar13 = uVar10 | uVar12;\n      if (uVar13 == 0) break;\n      uVar10 = uVar10 << 4 | uVar12 >> 0x1c;\n      uVar12 = uVar12 << 4;\n      uVar4 = uVar4 & 0xfffffff8 | uVar1 >> 0x1d;\n      uVar1 = (uVar2 >> 1) << 3;\n      uVar3 = uVar3 >> 4;\n      if (uVar3 == 0) {\n        uVar6 = uVar4;\n        if ((uVar7 & 0x100000) != 0) goto LAB_080089b2;\n        uVar7 = uVar7 | uVar11;\n        uVar11 = 0;\n        uVar3 = 0x80000000;\n      }\n    }\n    if ((uVar7 & 0x100000) == 0) {\n      uVar7 = uVar7 | uVar11;\n      uVar11 = 0;\n    }\nLAB_080089b2:\n    bVar16 = 0xfc < uVar9;\n    bVar15 = SBORROW4(uVar9,0xfd);\n    uVar4 = iVar8 + 0x300;\n    bVar14 = uVar4 == 0;\n    uVar3 = uVar4;\n    if (bVar16 && !bVar14) {\n      bVar16 = 0x6ff < uVar4;\n      bVar15 = SBORROW4(uVar4,0x700);\n      uVar3 = iVar8 - 0x400;\n      bVar14 = uVar4 == 0x700;\n    }\n    if (!bVar16 || bVar14) {\n      bVar14 = uVar6 <= uVar10;\n      if (uVar10 == uVar6) {\n        bVar14 = uVar1 <= uVar12;\n      }\n      if (uVar10 == uVar6 && uVar12 == uVar1) {\n        bVar14 = (uVar11 & 1) != 0;\n      }\n      return CONCAT44(uVar7 + uVar9 * 0x100000 + (uint)CARRY4(uVar11,(uint)bVar14),uVar11 + bVar14);\n    }\n  }\n  if (!bVar14 && (int)uVar3 < 0 == bVar15) {\n    return (ulonglong)(uVar7 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  bVar16 = SCARRY4(uVar9,0x36);\n  bVar14 = (int)(uVar9 + 0x36) < 0;\n  bVar15 = uVar9 == 0xffffffca;\n  if (bVar15 || bVar14 != bVar16) {\n    uVar11 = 0;\n  }\n  if (bVar15 || bVar14 != bVar16) {\n    uVar7 = uVar7 & 0x80000000;\n  }\n  if (bVar15 || bVar14 != bVar16) {\n    return CONCAT44(uVar7,uVar11);\n  }\n  uVar3 = -uVar9;\n  uVar10 = uVar3 - 0x20;\n  if (0x1f < (int)uVar3) {\n    uVar3 = uVar11 >> (uVar10 & 0xff) | uVar7 << (0x20 - uVar10 & 0xff);\n    uVar9 = (uVar7 >> (uVar10 & 0xff) & ~((uVar7 & 0x80000000) >> (uVar10 & 0xff))) -\n            ((int)uVar3 >> 0x1f);\n    if ((uVar13 | uVar11 << (0x20 - uVar10 & 0xff) | uVar3 << 1) == 0) {\n      uVar9 = uVar9 & ~(uVar3 >> 0x1f);\n    }\n    return CONCAT44(uVar7,uVar9) & 0x80000000ffffffff;\n  }\n  iVar8 = uVar3 - 0x14;\n  if (iVar8 != 0 && iVar8 < 0 == SCARRY4(uVar10,0xc)) {\n    uVar9 = 0xc - iVar8;\n    uVar3 = uVar11 << (uVar9 & 0xff);\n    uVar11 = uVar11 >> (0x20 - uVar9 & 0xff) | uVar7 << (uVar9 & 0xff);\n    uVar9 = uVar11 + -((int)uVar3 >> 0x1f);\n    if ((uVar13 | uVar3 << 1) == 0) {\n      uVar9 = uVar9 & ~(uVar3 >> 0x1f);\n    }\n    return CONCAT44((uVar7 & 0x80000000) + (uint)CARRY4(uVar11,-((int)uVar3 >> 0x1f)),uVar9);\n  }\n  uVar10 = uVar11 << (uVar9 + 0x20 & 0xff);\n  uVar11 = uVar11 >> (uVar3 & 0xff) | uVar7 << (uVar9 + 0x20 & 0xff);\n  uVar9 = uVar11 + -((int)uVar10 >> 0x1f);\n  if ((uVar13 | uVar10 << 1) == 0) {\n    uVar9 = uVar9 & ~(uVar10 >> 0x1f);\n  }\n  return CONCAT44((uVar7 & 0x80000000) +\n                  ((uVar7 & 0x7fffffff) >> (uVar3 & 0xff)) +\n                  (uint)CARRY4(uVar11,-((int)uVar10 >> 0x1f)),uVar9);\n}\n\n",
            "called": [
                "FUN_08008a02"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08008894",
            "calling": [
                "FUN_08001994",
                "FUN_0800a1bc",
                "FUN_080098d0",
                "FUN_08009990",
                "FUN_0800af78",
                "FUN_080005b4",
                "FUN_08003004"
            ],
            "imported": false,
            "current_name": "FUNC_08008894"
        },
        "FUN_08000374": {
            "renaming": {
                "FUN_08000374": "write_to_memory_with_checksum_08000374",
                "param_1": "address",
                "param_2": "data",
                "param_3": "size",
                "local_1c": "remaining_size",
                "local_18": "current_data",
                "local_14": "current_address",
                "local_9": "checksum"
            },
            "code": "void write_to_memory_with_checksum_08000374(int address, char *data, int size) {\n  int remaining_size = size;\n  char *current_data = data;\n  int current_address = address;\n  if (*(int *)PTR_DAT_080003e8 == 0) {\n    write_memory_with_byte_pattern_080002f0();\n    current_data = data;\n    current_address = address;\n  }\n  char checksum = '\\0';\n  while (remaining_size != 0) {\n    checksum = (checksum != '\\0') + *current_data;\n    write_to_memory_08000340(current_address, *current_data);\n    current_data++;\n    current_address++;\n    remaining_size--;\n  }\n  write_to_memory_08000340(current_address, checksum);\n  return;\n}",
            "called": [
                "FUN_080002f0",
                "FUN_08000340"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000374",
            "calling": [
                "FUN_08004bf4",
                "FUN_08004bc0",
                "FUN_08004c2a"
            ],
            "imported": false,
            "current_name": "write_to_memory_with_checksum_08000374"
        },
        "FUN_080037fc": {
            "renaming": {
                "FUN_080037fc": "wait_until_bit_is_set_080037fc",
                "param_1": "bit_position",
                "local_c": "absolute_bit_position",
                "wait_until_bit_is_set_08008250": "wait_until_bit_is_set",
                "wait_until_bit_is_set_08003778": "wait_until_bit_is_set"
            },
            "code": "void wait_until_bit_is_set_080037fc(int bit_position)\n{\n  int absolute_bit_position;\n  if (bit_position < 0) {\n    wait_until_bit_is_set_080037fc(45);\n    absolute_bit_position = -bit_position;\n  }\n  wait_until_bit_is_set_080037fc(absolute_bit_position);\n  return;\n}",
            "called": [
                "FUN_08008250",
                "FUN_08003778"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080037fc",
            "calling": [
                "FUN_08004250",
                "FUN_080046d0",
                "FUN_08004900"
            ],
            "imported": false,
            "current_name": "wait_until_bit_is_set_080037fc"
        },
        "FUN_0800a1bc": {
            "renaming": {
                "FUN_0800a1bc": "calculate_result_0800a1bc",
                "param_1": "dividend",
                "param_2": "divisor",
                "uVar1": "quotient",
                "uVar2": "shift",
                "iVar3": "temp",
                "uVar4": "temp_divisor",
                "uVar5": "temp_dividend",
                "uVar6": "bit",
                "uVar7": "mask",
                "uVar8": "value",
                "uVar9": "difference",
                "uVar10": "remainder",
                "uVar11": "shift",
                "uVar12": "temp_quotient",
                "uVar13": "shift_count",
                "uVar14": "temp_product"
            },
            "code": "uint calculate_result_0800a1bc(uint dividend, uint divisor)\n{\n  uint quotient = 0;\n  uint bit = 0x80000000;\n  uint temp_divisor = divisor;\n  uint remainder = dividend;\n  if ((0x0800a340 & ~divisor) == 0) {\n    uint64_t temp = multiply_two_numbers(dividend, divisor);\n    quotient = calculate_result_0800a1bc((uint) temp, (uint) (temp >> 32), dividend, divisor);\n    return quotient;\n  }\n  if ((int)divisor < 1) {\n    if ((divisor & 0x7fffffff | dividend) == 0) {\n      return dividend;\n    }\n    if (divisor != 0) {\n      uint64_t temp = calculate_result_0800a1bc(dividend, divisor, dividend);\n      uint temp_dividend = (uint) (temp >> 32);\n      quotient = multiply_two_numbers((uint) temp, temp_dividend, (uint) temp, temp_dividend);\n      return quotient;\n    }\n    do {\n      uint temp_dividend = remainder;\n      remainder <<= 0x15;\n      quotient <<= 0x15;\n      bit >>= 1;\n      if (temp_dividend >> 0x1f != 0) {\n        remainder |= 1;\n      }\n    } while (bit != 0);\n    temp_divisor = remainder;\n  }\n  else {\n    while (temp_divisor << 0x10 >> 0x1f == 0) {\n      temp_divisor <<= 0x10;\n      bit >>= 0x10;\n    }\n    uint shift = 0x20;\n    while ((int)(temp_divisor << shift >> 0x20) == 0) {\n      shift--;\n    }\n    remainder <<= shift;\n    temp_divisor <<= shift;\n  }\n  uint i = 0x16;\n  bit = 0x200000;\n  while (i != 0) {\n    if (temp_divisor <= remainder) {\n      remainder -= temp_divisor;\n      quotient |= bit;\n    }\n    bit >>= 1;\n    temp_divisor >>= 1;\n    i--;\n  }\n  if ((remainder << 1) >= divisor) {\n    quotient++;\n  }\n  return quotient;\n}",
            "called": [
                "FUN_080082d0",
                "FUN_080082d4",
                "FUN_08008640",
                "FUN_08008894"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800a1bc",
            "calling": [
                "FUN_080098d0",
                "FUN_08009b24"
            ],
            "imported": false,
            "current_name": "calculate_result_0800a1bc"
        },
        "FUN_0800525c": {
            "renaming": {
                "FUN_0800525c": "process_character_0800525c",
                "param_1": "character_to_process",
                "*PTR_DAT_080052a8": "data_pointer",
                "uint": "unsigned int",
                "byte": "unsigned char",
                "process_data_until_termination_or_interrupt_08002fd4": "process_data",
                "do_nothing_and_return_08005250": "return_without_processing",
                "do_nothing_0800522c": "do_nothing_for_special_characters",
                "do_nothing_08005220": "do_nothing_for_regular_characters",
                "do_nothing_08005208": "do_nothing_after_processing"
            },
            "code": "void process_character_0800525c(char character_to_process) {\n  int current_character = (int) character_to_process;\n  int **PTR_DAT_080052a8 = PTR_DAT_080052a8;\n\n  if (current_character != (uint)(byte)**PTR_DAT_080052a8) {\n    process_data_until_termination_or_interrupt_08002fd4();\n    if (character_to_process == '\\0') {\n      do_nothing_and_return_08005250();\n    }\n    else {\n      if (character_to_process < '\\x01') {\n        do_nothing_0800522c();\n      }\n      else {\n        do_nothing_08005220();\n      }\n      do_nothing_08005208();\n    }\n    **PTR_DAT_080052a8 = character_to_process;\n  }\n  return;\n}",
            "called": [
                "FUN_08005250",
                "FUN_08002fd4",
                "FUN_0800522c",
                "FUN_08005220",
                "FUN_08005208"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800525c",
            "calling": [
                "FUN_080005b4"
            ],
            "imported": false,
            "current_name": "process_character_0800525c"
        },
        "FUN_080073d4": {
            "renaming": {
                "FUN_080073d4": "set_bit_in_short_at_offset_080073d4",
                "param_1": "offset",
                "PTR_": "byte_",
                "DAT_": "word_"
            },
            "code": "void set_bit_in_short_at_offset_080073d4(uint offset)\n{\n    uint DAT_offset = offset >> 4;\n    uint PTR_offset = DAT_offset * 0x400 + 0x4002001a;\n    short *short_ptr = (short *)PTR_offset;\n    uint bit_offset = offset & 0xf;\n    short bit_mask = 1 << bit_offset;\n    *short_ptr = bit_mask;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080073d4",
            "calling": [
                "FUN_08007520"
            ],
            "imported": false,
            "current_name": "set_bit_in_short_at_offset_080073d4"
        },
        "FUN_08006dfe": {
            "renaming": {
                "FUN_08006dfe": "set_bit_in_array_08006dfe",
                "param_1": "character_index",
                "set_bit_in_array_08006a8c": "set_bit_in_array_helper",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "void set_bit_in_array_08006dfe(char character_index)\n{\n  set_bit_in_array_08006dfe_helper(character_index);\n  return;\n}\n\nvoid set_bit_in_array_08006dfe_helper(int index)\n{\n  set_bit_in_array_08006dfe_08006a8c(index);\n  return;\n}",
            "called": [
                "FUN_08006a8c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006dfe",
            "calling": [],
            "imported": false,
            "current_name": "set_bit_in_array_08006dfe"
        },
        "FUN_08006d66": {
            "renaming": {
                "FUN_08006d66": "synchronize_data_and_set_barrier_08006d66",
                "data_sync_barrier_and_set_08006c70": "data_sync_barrier_and_set"
            },
            "code": "void synchronize_data_and_set_barrier_08006d66(void)\n{\n  data_sync_barrier_and_set();\n  return;\n}\n",
            "called": [
                "FUN_08006c70"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006d66",
            "calling": [],
            "imported": false,
            "current_name": "synchronize_data_and_set_barrier_08006d66"
        },
        "FUN_08006e88": {
            "renaming": {
                "FUN_08006e88": "decode_bitstream_08006e88",
                "param_1": "bitstream",
                "param_2": "output",
                "uVar1": "bit_value",
                "uVar2": "bitstream_word",
                "iVar3": "output_index",
                "local_c": "current_bit"
            },
            "code": "void decode_bitstream_08006e88(uint *bitstream, uint *output)\n{\n  uint current_bit;\n  uint bit_value;\n  uint bitstream_word;\n  uint output_word;\n  int output_index;\n  \n  for (current_bit = 0; current_bit < 0x10; current_bit++) {\n    bit_value = 1 << (current_bit & 0xff);\n    bitstream_word = *output & bit_value;\n    if (bitstream_word == bit_value) {\n      if ((output[1] == 2) || (output[1] == 0x12)) {\n        output_word = output[4];\n        bitstream[(current_bit >> 3) + 8] &= ~(0xf << ((current_bit & 7) << 2));\n        bitstream[(current_bit >> 3) + 8] |= output_word << ((current_bit & 7) << 2);\n      }\n      *bitstream &= ~(3 << ((current_bit & 0x7f) << 1));\n      *bitstream |= (output[1] & 3) << ((current_bit & 0x7f) << 1);\n      if ((((output[1] == 1) || (output[1] == 2)) || (output[1] == 0x11)) || (output[1] == 0x12)) {\n        bitstream[2] &= ~(3 << ((current_bit & 0x7f) << 1));\n        bitstream[2] |= output[3] << ((current_bit & 0x7f) << 1);\n        bitstream[1] &= ~(1 << (current_bit & 0xff));\n        bitstream[1] |= (output[1] >> 4 & 1) << (current_bit & 0xff);\n      }\n      bitstream[3] &= ~(3 << ((current_bit & 0x7f) << 1));\n      bitstream[3] |= output[2] << ((current_bit & 0x7f) << 1);\n      if ((output[1] & 0x10000000) != 0) {\n        *(uint *)(PTR_DAT_0800719c + 0x44) |= 0x4000;\n        *(uint *)(PTR_DAT_080071a0 + ((current_bit >> 2) + 2) * 4) = ~(0xf << ((current_bit & 3) << 2)) & *(uint *)(PTR_DAT_080071a0 + ((current_bit >> 2) + 2) * 4);\n        if (bitstream == PTR_DAT_080071a4) {\n          output_index = 0;\n        }\n        else if (bitstream == PTR_DAT_080071a8) {\n          output_index = 1;\n        }\n        else if (bitstream == PTR_DAT_080071ac) {\n          output_index = 2;\n        }\n        else if (bitstream == PTR_DAT_080071b0) {\n          output_index = 3;\n        }\n        else if (bitstream == PTR_DAT_080071b4) {\n          output_index = 4;\n        }\n        else if (bitstream == PTR_DAT_080071b8) {\n          output_index = 5;\n        }\n        else if (bitstream == PTR_DAT_080071bc) {\n          output_index = 6;\n        }\n        else if (bitstream == PTR_DAT_080071c0) {\n          output_index = 7;\n        }\n        else if (bitstream == PTR_DAT_080071c4) {\n          output_index = 8;\n        }\n        else {\n          output_index = 10;\n        }\n        *(uint *)(PTR_DAT_080071a0 + ((current_bit >> 2) + 2) * 4) = output_index << ((current_bit & 3) << 2) | *(uint *)(PTR_DAT_080071a0 + ((current_bit >> 2) + 2) * 4);\n        *PTR_DAT_080071cc &= ~bitstream_word;\n        PTR_DAT_080071cc[1] &= ~bitstream_word;\n        if ((output[1] & 0x10000) != 0) {\n          *PTR_DAT_080071cc |= bitstream_word;\n        }\n        if ((output[1] & 0x20000) != 0) {\n          PTR_DAT_080071cc[1] |= bitstream_word;\n        }\n        PTR_DAT_080071cc[2] &= ~bitstream_word;\n        PTR_DAT_080071cc[3] &= ~bitstream_word;\n        if ((output[1] & 0x100000) != 0) {\n          PTR_DAT_080071cc[2] |= bitstream_word;\n        }\n        if ((output[1] & 0x200000) != 0) {\n          PTR_DAT_080071cc[3] |= bitstream_word;\n        }\n      }\n    }\n  }\n  return;\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006e88",
            "calling": [
                "FUN_0800640c",
                "FUN_0800778c"
            ],
            "imported": false,
            "current_name": "decode_bitstream_08006e88"
        },
        "FUN_080001e0": {
            "renaming": {
                "FUN_080001e0": "do_nothing_080001e0"
            },
            "code": "\nvoid do_nothing_080001e0(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080001e0",
            "calling": [
                "FUN_08000220"
            ],
            "imported": false,
            "current_name": "do_nothing_080001e0"
        },
        "FUN_080036f0": {
            "renaming": {
                "FUN_080036f0": "print_binary_representation_080036f0",
                "param_1": "number",
                "param_2": "num_bits",
                "local_10": "i",
                "local_c": "mask",
                "uVar1": "output_char"
            },
            "code": "void print_binary_representation_080036f0(uint number, int num_bits){\n    uint mask = 1 << (num_bits - 1);\n    for (int i = 0; i < num_bits; i++) {\n        if ((mask & number) == 0) {\n            putchar('0');\n        }\n        else {\n            putchar('1');\n        }\n        mask = mask >> 1;\n    }\n    return;\n}",
            "called": [
                "FUN_08008250"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080036f0",
            "calling": [
                "FUN_0800375c",
                "FUN_08003740"
            ],
            "imported": false,
            "current_name": "print_binary_representation_080036f0"
        },
        "FUN_08002edc": {
            "renaming": {
                "FUN_08002edc": "decrypt_and_update_result_and_calculate_hash_08002edc",
                "decrypt_data_08002a94": "decrypt_data",
                "check_input_and_update_result_08002ba8_08002ba8": "check_input_and_update_result",
                "calculate_hash_and_values_08002e08_08002e08": "calculate_hash_and_values"
            },
            "code": "void decrypt_and_update_result_and_calculate_hash_08002edc() {\n  decrypt_data();\n  check_input_and_update_result();\n  calculate_hash_and_values();\n  return;\n}",
            "called": [
                "FUN_08002e08",
                "FUN_08002ba8",
                "FUN_08002a94"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002edc",
            "calling": [
                "FUN_08003004",
                "FUN_08003618"
            ],
            "imported": false,
            "current_name": "decrypt_and_update_result_and_calculate_hash_08002edc"
        },
        "FUN_0800375c": {
            "renaming": {
                "FUN_0800375c": "print_binary_representation_0800375c",
                "param_1": "number",
                "PTR_": "ptr_",
                "DAT_": "dat_"
            },
            "code": "void print_binary_representation_0800375c(uint16_t number, uint8_t num_bits) {\n    print_binary_representation_0800375c_080036f0(number, num_bits);\n}",
            "called": [
                "FUN_080036f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800375c",
            "calling": [
                "FUN_08004250"
            ],
            "imported": false,
            "current_name": "print_binary_representation_0800375c"
        },
        "FUN_08009990": {
            "renaming": {
                "FUN_08009990": "calculate_result_08009990",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "iVar1": "intermediate_1",
                "uVar2": "output_2",
                "uVar3": "output_3",
                "uVar4": "output_4",
                "uVar5": "output_1",
                "uVar6": "intermediate_2"
            },
            "code": "uint calculate_result_08009990(uint input_1, uint input_2, uint input_3, uint input_4)\n{\n    int intermediate_1;\n    uint output_1;\n    uint output_2;\n    uint output_3;\n    uint output_4;\n    uint intermediate_2;\n    \n    intermediate_2 = CONCAT44(DAT_08009b04, DAT_08009b00);\n    output_3 = input_4 & 0x7fffffff;\n    if ((DAT_08009b18 < (output_3 | (-input_3 | input_3) >> 0x1f)) || (output_4 = input_2 & 0x7fffffff, DAT_08009b18 < (output_4 | (-input_1 | input_1) >> 0x1f))) {\n        output_3 = calculate_alternate_result(input_3, input_4, input_1, input_2);\n    }\n    else {\n        if ((input_4 + 0xc0100000 | input_3) == 0) {\n            output_3 = get_alternate_output();\n            return output_3;\n        }\n        output_1 = (int)input_4 >> 0x1e & 2U | input_2 >> 0x1f;\n        if ((output_4 | input_1) == 0) {\n            output_3 = DAT_08009af0;\n            if ((output_1 != 2) && (output_3 = input_1, output_1 == 3)) {\n                output_3 = DAT_08009af8;\n            }\n        }\n        else {\n            if ((output_3 | input_3) != 0) {\n                if (output_3 == DAT_08009b18) {\n                    output_1 = output_1 - 1;\n                    if (output_4 == output_3) {\n                        if (2 < output_1) {\n                            return DAT_08009b10;\n                        }\n                        return *(uint *)(PTR_DAT_08009b20 + output_1 * 8);\n                    }\n                    if (output_1 < 3) {\n                        return *(uint *)(PTR_DAT_08009b1c + output_1 * 8);\n                    }\n                    return 0;\n                }\n                if (output_4 != DAT_08009b18) {\n                    intermediate_1 = (int)(output_4 - output_3) >> 0x14;\n                    if ((int)(output_4 - output_3) < 0x3d00000) {\n                        if (((int)input_4 < 0) && (intermediate_1 + 0x3c < 0 != SCARRY4(intermediate_1,0x3c))) {\n                            intermediate_2 = 0;\n                        }\n                        else {\n                            perform_operation_1(input_1, input_2, input_3, input_4, input_4);\n                            do_nothing_0800b2cc();\n                            intermediate_2 = get_alternate_output();\n                        }\n                    }\n                    output_2 = (undefined4)((ulonglong)intermediate_2 >> 0x20);\n                    output_3 = (uint)intermediate_2;\n                    if (output_1 == 1) {\n                        return output_3;\n                    }\n                    if (output_1 == 2) {\n                        intermediate_2 = perform_operation_2(output_3, output_2, DAT_08009ae8, DAT_08009aec);\n                        output_3 = perform_operation_2(DAT_08009af0, DAT_08009af4, (int)intermediate_2, (int)((ulonglong)intermediate_2 >> 0x20));\n                        return output_3;\n                    }\n                    if (output_1 == 0) {\n                        return output_3;\n                    }\n                    intermediate_2 = perform_operation_2(output_3, output_2, DAT_08009ae8, DAT_08009aec);\n                    output_3 = perform_operation_2((int)intermediate_2, (int)((ulonglong)intermediate_2 >> 0x20), DAT_08009af0, DAT_08009af4);\n                    return output_3;\n                }\n            }\n            output_3 = DAT_08009b08;\n            if (-1 < (int)input_2) {\n                output_3 = DAT_08009b00;\n            }\n        }\n    }\n    return output_3;\n}\n\nuint calculate_alternate_result(uint input_1, uint input_2, uint input_3, uint input_4)\n{\n    // implementation of alternate calculation\n}\n\nuint get_alternate_output()\n{\n    // implementation of alternate output\n}\n\nvoid perform_operation_1(uint input_1, uint input_2, uint input_3, uint input_4, uint intermediate)\n{\n    // implementation of operation 1\n}\n\nuint perform_operation_2(uint input_1, uint input_2, uint input_3, uint input_4)\n{\n    // implementation of operation 2\n}\n\ndo_nothing_0800b2cc()\n{\n    // implementation of do nothing function\n}",
            "called": [
                "FUN_080082d0",
                "FUN_080082d4",
                "FUN_0800af78",
                "FUN_0800b2cc",
                "FUN_08008894"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009990",
            "calling": [
                "thunk_FUN_08009990"
            ],
            "imported": false,
            "current_name": "calculate_result_08009990"
        },
        "FUN_08007e58": {
            "renaming": {
                "FUN_08007e58": "is_bit_set_08007e58",
                "*DAT_08007e80": "data_pointer"
            },
            "code": "bool is_bit_set_08007e58(void)\n{\n  bool is_set = (*DAT_08007e80 & 0x20) != 0;\n  return is_set;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007e58",
            "calling": [
                "FUN_08008286"
            ],
            "imported": false,
            "current_name": "is_bit_set_08007e58"
        },
        "FUN_080059f8": {
            "renaming": {
                "FUN_080059f8": "initialize_data_080059f8",
                "DAT_08005a4c": "data_start",
                "do_nothing_08005a5c": "do_nothing"
            },
            "code": "void initialize_data_080059f8(void)\n{\n    int* data_ptr = (int*)(DAT_08005a4c + 0x20);\n    *data_ptr = -1;\n    *(data_ptr + 1) = 0;\n    data_ptr = (int*)(DAT_08005a4c + 0x24);\n    *data_ptr = -1;\n    *(data_ptr + 1) = 0;\n    data_ptr = (int*)(DAT_08005a4c + 0x10);\n    *data_ptr = -1;\n    *(data_ptr + 1) = 0;\n    data_ptr = (int*)(DAT_08005a4c + 0x14);\n    *data_ptr = -1;\n    *(data_ptr + 1) = 0;\n    data_ptr = (int*)(DAT_08005a4c + 0x18);\n    *data_ptr = -1;\n    *(data_ptr + 1) = 0;\n    do_nothing_08005a5c();\n}",
            "called": [
                "FUN_08005a5c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080059f8",
            "calling": [],
            "imported": false,
            "current_name": "initialize_data_080059f8"
        },
        "FUN_08003f34": {
            "renaming": {
                "FUN_08003f34": "process_input_08003f34_08003f34",
                "bVar1": "index",
                "bVar2": "current_byte",
                "uVar3": "wait_flags",
                "is_inside_parentheses": "*PTR_DAT_08004028"
            },
            "code": "void process_input_08003f34_08003f34(void)\n{\n  byte current_byte;\n  byte is_inside_parentheses;\n  undefined4 wait_flags;\n  while (true) {\n    while (true) {\n      current_byte = check_lowest_byte_if_bit_set_08008286();\n      if (current_byte == 0xff) {\n        return;\n      }\n      if ((current_byte == 10) || (current_byte == 0xd)) {\n        break;\n      }\n      if (*PTR_DAT_08004028 == '\\0') {\n        if ((0x20 < current_byte) && (current_byte != 0x2f)) {\n          if (current_byte == 0x28) {\n            *PTR_DAT_08004028 = 1;\n          }\n          else if (*PTR_DAT_08004020 == -1) {\n            wait_for_bits_to_set_08004030(0xd);\n            reset_pointers_08003980();\n          }\n          else if ((current_byte < 0x61) || (0x7a < current_byte)) {\n            byte index = *PTR_DAT_08004020;\n            *PTR_DAT_08004020 = index + 1;\n            PTR_DAT_08004024[index] = current_byte;\n          }\n          else {\n            byte index = *PTR_DAT_08004020;\n            *PTR_DAT_08004020 = index + 1;\n            PTR_DAT_08004024[index] = current_byte - 0x20;\n          }\n        }\n      }\n      else if (current_byte == 0x29) {\n        *PTR_DAT_08004028 = 0;\n      }\n    }\n    process_input_data_08003a74();\n    if (*PTR_DAT_0800401c != '\\0') {\n      break;\n    }\n    if (*PTR_DAT_08004020 == '\\0') {\n      wait_for_bits_to_set_08004030(0);\n    }\n    else {\n      byte index = (byte)*PTR_DAT_08004020;\n      PTR_DAT_08004024[index] = 0;\n      wait_flags = parse_input_and_execute_command_08003b98(PTR_DAT_08004024);\n      wait_for_bits_to_set_08004030(wait_flags);\n    }\n    reset_pointers_08003980();\n  }\n  return;\n}",
            "called": [
                "FUN_08008286",
                "FUN_08003980",
                "FUN_08004030",
                "FUN_08003b98",
                "FUN_08003a74"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003f34",
            "calling": [
                "FUN_08001ddc"
            ],
            "imported": false,
            "current_name": "process_input_08003f34_08003f34"
        },
        "FUN_080095b8": {
            "renaming": {
                "FUN_080095b8": "calculate_signed_integer_from_fixed_point_080095b8",
                "param_1": "integer_part",
                "param_2": "fractional_part",
                "uVar1": "carry",
                "uVar2": "exponent",
                "uVar3": "mantissa",
                "uVar5": "exponent_diff",
                "iVar4": "sign",
                "CARRY4": "carry_4_bits"
            },
            "code": "int calculate_signed_integer_from_fixed_point_080095b8(uint integer_part, uint fractional_part) {\n  uint exponent = (fractional_part << 1) >> 0x15;\n  uint exponent_diff = exponent - 0x3ff;\n  int sign = (int)fractional_part < 0 ? -1 : 1;\n  uint mantissa = fractional_part & 0xfffff | 0x100000;\n  if ((int)exponent_diff < 0x14) {\n    if ((int)exponent_diff < 0) {\n      if (exponent_diff != 0xffffffff) {\n        sign = 0;\n      }\n      return sign;\n    }\n    mantissa = mantissa + (0x80000 >> (exponent_diff & 0xff)) >> (0x14 - exponent_diff & 0xff);\n  }\n  else {\n    if (0x1e < exponent_diff) {\n      int conversion_result = convert_to_int_08008ba0();\n      return conversion_result;\n    }\n    if ((int)exponent_diff < 0x34) {\n      uint carry = 0x80000000 >> (exponent - 0x413 & 0xff);\n      if (CARRY4(carry, integer_part) != false) {\n        mantissa = mantissa + 1;\n      }\n      mantissa = mantissa << (exponent - 0x413 & 0xff);\n      if (exponent_diff != 0x14) {\n        mantissa = mantissa | carry + integer_part >> (0x34 - exponent_diff & 0xff);\n      }\n    }\n    else {\n      mantissa = mantissa << (exponent - 0x413 & 0xff) | integer_part << (exponent - 0x433 & 0xff);\n    }\n  }\n  return mantissa * sign;\n}",
            "called": [
                "FUN_08008ba0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080095b8",
            "calling": [
                "FUN_08001994",
                "FUN_08003004"
            ],
            "imported": false,
            "current_name": "calculate_signed_integer_from_fixed_point_080095b8"
        },
        "FUN_08006cf6": {
            "renaming": {
                "FUN_08006cf6": "set_data_08006cf6",
                "param_1": "data_index",
                "param_2": "start_bit_index",
                "param_3": "num_bits",
                "uVar1": "shifted_and_masked_value",
                "get_dat_value_shifted_right_and_masked_08006998": "get_shifted_and_masked_dat_value",
                "extract_bits_08006ba0": "extract_bits",
                "set_data_08006b00": "set_data_to_extracted_bits_value"
            },
            "code": "void set_data_08006cf6(char data_index, unsigned int extracted_bits) {\n    unsigned int shifted_and_masked_value = get_shifted_and_masked_dat_value();\n    unsigned int extracted_bits_value = extract_bits(shifted_and_masked_value, data_index, extracted_bits);\n    set_data_08006cf6_to_extracted_bits_value(data_index, extracted_bits_value);\n}",
            "called": [
                "FUN_08006998",
                "FUN_08006ba0",
                "FUN_08006b00"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006cf6",
            "calling": [
                "FUN_08007a70"
            ],
            "imported": false,
            "current_name": "set_data_08006cf6"
        },
        "FUN_08002ef0": {
            "renaming": {
                "FUN_08002ef0": "copy_and_increment_08002ef0",
                "uVar1": "incremented_char",
                "*PTR_DAT_08002f1c": "*second_character",
                "*PTR_DAT_08002f18": "*first_character",
                "*PTR_DAT_08002f20": "*third_character",
                "increment_char_and_reset_if_twelve_08002870": "increment_char_and_reset_if_twelve"
            },
            "code": "void copy_and_increment_08002ef0(char *character){\n    if(*character == 12){\n        *character = 0;\n    }\n    else{\n        *character++;\n    }\n}\n\nvoid copy_and_increment_08002ef0(){\n    char *PTR_DAT_08002f18 = PTR_DAT_08002f18;\n    char *PTR_DAT_08002f1c = PTR_DAT_08002f1c;\n    char *PTR_DAT_08002f20 = PTR_DAT_08002f20;\n    *PTR_DAT_08002f1c = *PTR_DAT_08002f18;\n    copy_and_increment_08002ef0(first_character);\n    *PTR_DAT_08002f20 = *PTR_DAT_08002f18;\n}",
            "called": [
                "FUN_08002870"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ef0",
            "calling": [
                "FUN_08002f24"
            ],
            "imported": false,
            "current_name": "copy_and_increment_08002ef0"
        },
        "FUN_08001d4c": {
            "renaming": {
                "FUN_08001d4c": "process_data_and_clear_bits_08001d4c",
                "local_9": "flag",
                "cVar1": "counter",
                "FUNC_08001994": "set_flag",
                "PTR_DAT_08001dd8": "PTR_DAT",
                "do_nothing_08002814": "do_nothing",
                "clear_bits_and_check_condition_080057e4": "clear_bits_and_check_condition"
            },
            "code": "void process_data_and_clear_bits_08001d4c(void)\n{\n  char counter;\n  char flag;\n  \n  process_data();\n  set_flag(4, 1, 0, *(undefined4 *)(PTR_DAT_08001dd8_08001dd8 + 0x30));\n  set_flag(3, 1, 0, *(undefined4 *)(PTR_DAT_08001dd8_08001dd8 + 0x30));\n  do_nothing(*(undefined2 *)(PTR_DAT_08001dd8_08001dd8 + 0x34));\n  flag = 2;\n  while( true ) {\n    counter = flag - 1;\n    if (flag == 0) break;\n    set_flag(7, 0, 1, *(undefined4 *)(PTR_DAT_08001dd8_08001dd8 + 0x2c));\n    do_nothing(*(undefined2 *)(PTR_DAT_08001dd8_08001dd8 + 0x34));\n    flag = counter;\n    if (0 < counter) {\n      set_flag(7, 1, 0, *(undefined4 *)(PTR_DAT_08001dd8_08001dd8 + 0x2c));\n      do_nothing(*(undefined2 *)(PTR_DAT_08001dd8_08001dd8 + 0x34));\n    }\n  }\n  clear_bits_and_check_condition();\n  return;\n}",
            "called": [
                "FUN_08001994",
                "FUN_08005790",
                "FUN_080057e4",
                "FUN_08002814"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001d4c",
            "calling": [
                "FUN_080024c4"
            ],
            "imported": false,
            "current_name": "process_data_and_clear_bits_08001d4c"
        },
        "FUN_08000268": {
            "renaming": {
                "FUN_08000268": "calculate_value_based_on_pointer_08000268",
                "iVar1": "pointer_value",
                "get_value_from_pointer_08005a84": "get_value_from_pointer",
                "DAT_0800029c": "global_data",
                "DAT_08000298": "global_data"
            },
            "code": "int calculate_value_based_on_pointer_08000268(void)\n{\n  int pointer_value = get_value_from_pointer();\n  int result = (pointer_value + 1) * 1000 - ((unsigned long long)DAT_0800029c * (unsigned long long)(*(unsigned int *)(DAT_0800029c + 8) >> 3) >> 33);\n  return result;\n}",
            "called": [
                "FUN_08005a84"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000268",
            "calling": [
                "FUN_080002b6"
            ],
            "imported": false,
            "current_name": "calculate_value_based_on_pointer_08000268"
        },
        "FUN_08003778": {
            "renaming": {
                "FUN_08003778": "wait_until_bit_is_set_08003778",
                "param_1": "bit_number",
                "local_1c": "quotient",
                "acStack_15": "digits",
                "local_9": "digit_count"
            },
            "code": "void wait_until_bit_is_set_08003778(uint bit_number) {\n    uint counter = 0;\n    char digits[12];\n    byte digit_count = 0;\n\n    if (bit_number == 0) {\n        wait_until_bit_is_set_08003778_08008250(0x30);\n    }\n    else {\n        while (bit_number != 0) {\n            uint quotient = bit_number / 10;\n            uint remainder = bit_number % 10;\n            digits[digit_count] = remainder + '0';\n            digit_count++;\n            bit_number = quotient;\n        }\n        while (digit_count != 0) {\n            digit_count--;\n            wait_until_bit_is_set_08003778_08008250(digits[digit_count]);\n        }\n    }\n}",
            "called": [
                "FUN_08008250"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003778",
            "calling": [
                "FUN_080037fc"
            ],
            "imported": false,
            "current_name": "wait_until_bit_is_set_08003778"
        },
        "FUN_0800b3dc": {
            "renaming": {
                "FUN_0800b3dc": "get_value_from_memory_0800b3dc",
                "undefined4": "unsigned int",
                "PTR_PTR_DAT_0800b3e4": "memory_address"
            },
            "code": "unsigned int get_value_from_memory_0800b3dc() {\n    unsigned int* PTR_PTR_DAT_0800b3e4 = *(unsigned int**)PTR_PTR_DAT_0800b3e4;\n    return *PTR_PTR_DAT_0800b3e4;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800b3dc",
            "calling": [
                "FUN_080098d0",
                "FUN_0800981c"
            ],
            "imported": false,
            "current_name": "get_value_from_memory_0800b3dc"
        },
        "FUN_080046d0": {
            "renaming": {
                "FUN_080046d0": "wait_for_bits_to_set_080046d0",
                "bVar1": "bits_flag",
                "cVar2": "char_flag",
                "uVar3": "big_endian",
                "uVar4": "float_bits",
                "PTR_DAT_08004890": "ptr_data_1",
                "PTR_DAT_080048a8": "ptr_data_2",
                "PTR_DAT_080048ac": "ptr_data_3",
                "PTR_DAT_080048b0": "ptr_data_4",
                "PTR_DAT_080048b4": "ptr_data_5",
                "PTR_DAT_080048b8": "ptr_data_6",
                "PTR_DAT_080048bc": "ptr_data_7",
                "PTR_DAT_080048c0": "ptr_data_8",
                "PTR_DAT_080048c4": "ptr_data_9",
                "PTR_DAT_080048c8": "ptr_data_10",
                "PTR_DAT_080048cc": "ptr_data_11",
                "PTR_DAT_080048d0": "ptr_data_12",
                "PTR_DAT_080048d4": "ptr_data_13",
                "PTR_DAT_080048d8": "ptr_data_14",
                "PTR_DAT_080048dc": "ptr_data_15",
                "PTR_DAT_080048e0": "ptr_data_16",
                "PTR_DAT_080048e4": "ptr_data_17",
                "PTR_DAT_080048e8": "ptr_data_18",
                "PTR_DAT_080048ec": "ptr_data_19",
                "PTR_DAT_080048f0": "ptr_data_20",
                "PTR_DAT_080048f4": "ptr_data_21",
                "PTR_DAT_080048f8": "ptr_data_22",
                "PTR_DAT_080048fc": "ptr_data_23",
                "DAT_08004888": "data_1",
                "DAT_0800488c": "data_2"
            },
            "code": "void wait_for_bits_to_set_080046d0() {\\n  byte bits = (byte)PTR_DAT_08004890[1];\\n  if (bits > 4) {\\n    wait_until_all_bits_are_set_080036c6(PTR_DAT_080048a8);\\n    wait_until_bit_is_set_080037fc((byte)PTR_DAT_08004890[0x1c] + 0x36);\\n    if (PTR_DAT_08004890[0x19] == \"\\0\") {\\n      if (PTR_DAT_08004890[0x1a] == \"\\x01\") {\\n        wait_until_all_bits_are_set_080036c6(PTR_DAT_080048ac);\\n      }\\n      else {\\n        wait_until_all_bits_are_set_080036c6(PTR_DAT_080048b0);\\n      }\\n    }\\n    else {\\n      wait_until_all_bits_are_set_080036c6(PTR_DAT_080048b4);\\n    }\\n    if (PTR_DAT_08004890[3] == \"\\0\") {\\n      wait_until_all_bits_are_set_080036c6(PTR_DAT_080048bc);\\n    }\\n    else {\\n      wait_until_all_bits_are_set_080036c6(PTR_DAT_080048b8);\\n    }\\n    if (PTR_DAT_08004890[4] == \"\\0\") {\\n      wait_until_all_bits_are_set_080036c6(PTR_DAT_080048c4);\\n    }\\n    else {\\n      wait_until_all_bits_are_set_080036c6(PTR_DAT_080048c0);\\n    }\\n    if (PTR_DAT_08004890[2] == \"\\0\") {\\n      wait_until_all_bits_are_set_080036c6(PTR_DAT_080048cc);\\n    }\\n    else {\\n      wait_until_all_bits_are_set_080036c6(PTR_DAT_080048c8);\\n    }\\n    byte bVar1 = PTR_DAT_08004890[5];\\n    if (bVar1 == 2) {\\n      wait_until_all_bits_are_set_080036c6(PTR_DAT_080048d8);\\n    }\\n    else if (bVar1 < 3) {\\n      if (bVar1 == 0) {\\n        wait_until_all_bits_are_set_080036c6(PTR_DAT_080048d0);\\n      }\\n      else if (bVar1 == 1) {\\n        wait_until_all_bits_are_set_080036c6(PTR_DAT_080048d4);\\n      }\\n    }\\n    char cVar2 = PTR_DAT_08004890[6];\\n    if (cVar2 == \"\\x01\") {\\n      wait_until_all_bits_are_set_080036c6(PTR_DAT_080048dc);\\n    }\\n    else if (cVar2 < \"\\x02\") {\\n      if (cVar2 == -1) {\\n        wait_until_all_bits_are_set_080036c6(PTR_DAT_080048e0);\\n      }\\n      else if (cVar2 == \"\\0\") {\\n        wait_until_all_bits_are_set_080036c6(PTR_DAT_080048e4);\\n      }\\n    }\\n    byte bVar2 = PTR_DAT_08004890[7];\\n    if (bVar2 == 2) {\\n      wait_until_all_bits_are_set_080036c6(PTR_DAT_080048f0);\\n    }\\n    else if (bVar2 < 3) {\\n      if (bVar2 == 0) {\\n        wait_until_all_bits_are_set_080036c6(PTR_DAT_080048e8);\\n      }\\n      else if (bVar2 == 1) {\\n        wait_until_all_bits_are_set_080036c6(PTR_DAT_080048ec);\\n      }\\n    }\\n    wait_until_all_bits_are_set_080036c6(PTR_DAT_080048f4);\\n    wait_until_bit_is_set_080037fc(PTR_DAT_08004890[0x18]);\\n    wait_until_all_bits_are_set_080036c6(PTR_DAT_080048f8);\\n    if (PTR_DAT_08004890[3] == \"\\0\") {\\n      convert_uint_to_decimal_string_08003826(*(undefined4 *)(PTR_DAT_08004890 + 8));\\n    }\\n    else {\\n      undefined8 uVar3 = convert_to_big_endian_08008590(*(undefined4 *)(PTR_DAT_08004890 + 8));\\n      uVar3 = FUNC_08008640((int)uVar3,(int)((ulonglong)uVar3 >> 0x20),DAT_08004888,DAT_0800488c);\\n      undefined4 uVar4 = calculate_float_bits_08008c30((int)uVar3,(int)((ulonglong)uVar3 >> 0x20));\\n      convert_uint_to_decimal_string_08003826(uVar4);\\n    }\\n    wait_until_all_bits_are_set_080036c6(PTR_DAT_080048fc);\\n    return;\\n  }\\n  else {\\n    (*(code *)(&switchD_080046de::switchdataD_080046e4)[bits])();\\n    return;\\n  }\\n}",
            "called": [
                "FUN_08008590",
                "FUN_08008c30",
                "FUN_080037fc",
                "FUN_08003826",
                "FUN_08008640",
                "FUN_080036c6"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080046d0",
            "calling": [
                "FUN_08003b98"
            ],
            "imported": false,
            "current_name": "wait_for_bits_to_set_080046d0"
        },
        "FUN_08006d72": {
            "renaming": {
                "FUN_08006d72": "is_valid_number_08006d72",
                "param_1": "number",
                "uVar1": "is_valid",
                "is_valid_number_08006c9c": "check_validity"
            },
            "code": "bool is_valid_number_08006d72(uint32_t number) {\n  bool is_valid = check_validity(number);\n  return is_valid;\n}",
            "called": [
                "FUN_08006c9c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006d72",
            "calling": [
                "FUN_080059b4"
            ],
            "imported": false,
            "current_name": "is_valid_number_08006d72"
        },
        "FUN_0800756c": {
            "renaming": {
                "FUN_0800756c": "set_flags_0800756c",
                "*DAT_080075bc": "flag_ptr",
                "DAT_080075bc": "flag_ptr",
                "DAT_080075c0": "flag_value_1",
                "DAT_080075c4": "flag_value_2"
            },
            "code": "void set_flags_0800756c(void)\n{\n  unsigned int **DAT_080075bc = DAT_080075bc;\n  **DAT_080075bc |= 1;\n  *DAT_080075bc[2] = 0;\n  **DAT_080075bc &= 0xfef6ffff;\n  *DAT_080075bc[1] = DAT_080075c0;\n  **DAT_080075bc &= 0xfffbffff;\n  *DAT_080075bc[3] = 0;\n  *(unsigned int *)(DAT_080075c4 + 8) = 0x8000000;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800756c",
            "calling": [
                "FUN_080092c4"
            ],
            "imported": false,
            "current_name": "set_flags_0800756c"
        },
        "FUN_080001f8": {
            "renaming": {
                "FUN_080001f8": "clear_ptr_dat_0800020c_080001f8",
                "PTR_DAT_0800020c": "ptr_dat_0800020c",
                "do_nothing_twice_08000210_08000210": "do_nothing_twice_08000210_08000210"
            },
            "code": "void clear_ptr_dat_0800020c_080001f8(void)\n{\n  *PTR_DAT_0800020c = 0;\n  do_nothing_twice_08000210_08000210();\n  return;\n}",
            "called": [
                "FUN_08000210"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080001f8",
            "calling": [
                "FUN_08001ddc"
            ],
            "imported": false,
            "current_name": "clear_ptr_dat_0800020c_080001f8"
        },
        "FUN_08002f74": {
            "renaming": {
                "FUN_08002f74": "get_data_08002f74",
                "puVar1": "data_ptr",
                "PTR_DAT_08002fa0": "data_start",
                "PTR_DAT_08002fa4": "data_end",
                "PTR_DAT_08002fa8": "data_pointer"
            },
            "code": "char* get_data_08002f74() {\n  char* data_ptr;\n  if (*PTR_DAT_08002fa0 == *PTR_DAT_08002fa4) {\n    data_ptr = NULL;\n  }\n  else {\n    data_ptr = PTR_DAT_08002fa0 + (uint8_t)*PTR_DAT_08002fa4 * 64;\n  }\n  return data_ptr;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002f74",
            "calling": [
                "FUN_080053a0",
                "FUN_08002fd4"
            ],
            "imported": false,
            "current_name": "get_data_08002f74"
        },
        "FUN_0800b3e8": {
            "renaming": {
                "FUN_0800b3e8": "execute_functions_0800b3e8",
                "ppcVar2": "function_ptrs",
                "iVar1": "i",
                "iVar3": "num_functions",
                "PTR_DAT_0800b420": "end_function_ptrs",
                "PTR_DAT_0800b424": "function_ptrs",
                "code": "function_ptr",
                "PTR_DAT_0800b42c": "other_end_function_ptrs",
                "PTR_DAT_0800b428": "other_function_ptrs",
                "do_nothing_0800b5b0": "do_nothing"
            },
            "code": "void execute_functions_0800b3e8(void)\n{\n  int num_functions = (int)PTR_DAT_0800b420 - (int)PTR_DAT_0800b424 >> 2;\n  if (num_functions != 0) {\n    int i = 0;\n    code** PTR_DAT_0800b424 = (code**)PTR_DAT_0800b424;\n    do {\n      i++;\n      (**PTR_DAT_0800b424)();\n      PTR_DAT_0800b424++;\n    } while (num_functions != i);\n  }\n  PTR_DAT_0800b424 = (code**)PTR_DAT_0800b42c;\n  int num_other_functions = (int)PTR_DAT_0800b428 - (int)PTR_DAT_0800b42c >> 2;\n  do_nothing_0800b5b0();\n  num_other_functions = num_other_functions >> 2;\n  if (num_other_functions != 0) {\n    int j = 0;\n    do {\n      j++;\n      (**PTR_DAT_0800b424)();\n      PTR_DAT_0800b424++;\n    } while (num_other_functions != j);\n  }\n  return;\n}",
            "called": [
                "FUN_080001ac",
                "FUN_0800b5b0",
                "FUN_0800b4d0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800b3e8",
            "calling": [
                "FUN_080092c4"
            ],
            "imported": false,
            "current_name": "execute_functions_0800b3e8"
        },
        "FUN_080096e8": {
            "renaming": {
                "FUN_080096e8": "calculate_result_080096e8_080096e8",
                "param_1": "input1",
                "param_2": "input2",
                "uVar1": "result",
                "local_28": "local_var1",
                "uStack_24": "local_var2",
                "local_20": "local_var3",
                "uStack_1c": "local_var4"
            },
            "code": "undefined4 calculate_result_080096e8_080096e8(undefined4 input1, uint input2)\n{\n    undefined4 result;\n    uint uVar2;\n    undefined4 local_var1;\n    undefined4 local_var2;\n    undefined4 local_var3;\n    undefined4 local_var4;\n    if (DAT_08009790 < (int)(input2 & 0x7fffffff)) {\n        if (DAT_08009794 < (int)(input2 & 0x7fffffff)) {\n            result = FUNC_080082d0(input1, input2, input1, input2);\n        }\n        else {\n            uVar2 = FUNC_08009d78(input1, input2, &local_var1);\n            uVar2 = uVar2 & 3;\n            if (uVar2 == 1) {\n                result = FUNC_0800a348(local_var1, local_var2, local_var3, local_var4);\n            }\n            else if (uVar2 == 2 || uVar2 == 0) {\n                result = calculate_result_0800adf0_0800adf0(local_var1, local_var2, local_var3, local_var4, 1);\n            }\n            else {\n                result = FUNC_0800a348(local_var1, local_var2, local_var3, local_var4);\n            }\n        }\n        return result;\n    }\n    result = calculate_result_0800adf0_0800adf0(input1, input2, 0, 0, 0);\n    return result;\n}",
            "called": [
                "FUN_080082d0",
                "FUN_0800a348",
                "FUN_08009d78",
                "FUN_0800adf0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080096e8",
            "calling": [
                "FUN_08001f00"
            ],
            "imported": false,
            "current_name": "calculate_result_080096e8_080096e8"
        },
        "FUN_08006a18": {
            "renaming": {
                "FUN_08006a18": "check_bit_08006a18",
                "param_1": "byte_value"
            },
            "code": "bool check_bit_08006a18(uint8_t byte_value) {\n    uint32_t* data_ptr = (uint32_t*)(DAT_08006a54 + (((uint32_t)byte_value >> 5) + 0x40) * 4);\n    uint32_t bit_mask = 1 << (byte_value & 0x1f);\n    return ((*data_ptr) & bit_mask) != 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006a18",
            "calling": [
                "FUN_08006de0"
            ],
            "imported": false,
            "current_name": "check_bit_08006a18"
        },
        "FUN_08002c18": {
            "renaming": {
                "FUN_08002c18": "calculate_hash_and_values_08002c18",
                "param_1": "input_address",
                "param_2": "param_2",
                "param_3": "param_3",
                "uVar1": "hash1",
                "iVar2": "value3",
                "uVar3": "hash2",
                "uVar4": "hash3",
                "uVar5": "hash4",
                "uVar6": "local_1c",
                "uVar7": "value1",
                "local_20": "local_20",
                "local_1c": "local_1c"
            },
            "code": "void calculate_hash_and_values_08002c18(int input_address, int param_2, int param_3)\n{\n    uint32_t hash1, hash2, hash3, hash4;\n    uint32_t value1, value2, value3;\n    uint32_t local_20, local_1c;\n    \n    hash1 = calculate_hash_08008e3c(*(uint32_t *)(input_address + 0x3c));\n    value1 = FUNC_08008eec(hash1, param_2);\n    value1 = convert_to_big_endian_08008590(value1);\n    value1 = calculate_value_from_parameters_08009318(value1, value1 >> 0x20);\n    value1 = calculate_shifted_value_08008bf0(value1, value1 >> 0x20);\n    *(uint32_t *)(input_address + 0x28) = value1;\n    \n    hash2 = calculate_hash_08008e3c(*(uint32_t *)(input_address + 0x3c));\n    value2 = FUNC_08008eec(hash2, param_3);\n    value2 = convert_to_big_endian_08008590(value2);\n    value2 = calculate_value_from_parameters_08009318(value2, value2 >> 0x20);\n    value2 = calculate_shifted_value_08008bf0(value2, value2 >> 0x20);\n    *(uint32_t *)(input_address + 0x2c) = value2;\n    \n    value3 = calculate_shifted_value_0800856c(*(uint32_t *)(input_address + 0x30) * 0x32);\n    value3 = FUNC_08008640(value3, value3 >> 0x20, 0, DAT_08002e04);\n    local_20 = convert_to_int_08008ba0(value3, value3 >> 0x20);\n    \n    hash3 = calculate_hash_08008e3c(*(uint32_t *)(input_address + 0x28));\n    hash4 = calculate_hash_08008e3c(*(uint32_t *)(input_address + 0x3c));\n    hash4 = calculate_hash_08008e44(-local_20);\n    hash1 = calculate_result_080028bc(hash3, hash4, hash1);\n    value1 = convert_to_big_endian_08008590(hash1);\n    value1 = calculate_value_from_parameters_08009318(value1, value1 >> 0x20);\n    local_1c = convert_to_int_08008ba0(value1, value1 >> 0x20);\n    \n    hash2 = calculate_hash_08008e3c(*(uint32_t *)(input_address + 0x3c));\n    hash3 = calculate_hash_08008e3c(*(uint32_t *)(input_address + 0x2c));\n    hash4 = calculate_hash_08008e44(local_20);\n    hash1 = calculate_result_080028bc(hash2, hash3, hash4);\n    value1 = convert_to_big_endian_08008590(hash1);\n    value1 = calculate_long_long_080094c0(value1, value1 >> 0x20);\n    local_20 = convert_to_int_08008ba0(value1, value1 >> 0x20);\n    local_20 = (*(uint32_t *)(input_address + 0x10) - local_1c) - local_20;\n    if (local_20 < 0) {\n        hash1 = calculate_hash_08008e3c(*(uint32_t *)(input_address + 0x28));\n        hash2 = calculate_hash_08008e3c(*(uint32_t *)(input_address + 0x2c));\n        hash3 = calculate_hash_08008e44(local_20);\n        hash4 = calculate_hash_08008e44(*(uint32_t *)(input_address + 0x10));\n        hash1 = calculate_result_08002908(hash1, hash2, hash3, hash4);\n        value1 = convert_to_big_endian_08008590(hash1);\n        value1 = calculate_value_from_parameters_08009318(value1, value1 >> 0x20);\n        local_1c = convert_to_int_08008ba0(value1, value1 >> 0x20);\n        local_1c = local_1c & ~(local_1c >> 0x1f);\n        local_1c = (*(uint32_t *)(input_address + 0x10) >= local_1c) ? local_1c : *(uint32_t *)(input_address + 0x10);\n        local_20 = 0;\n    }\n    *(uint32_t *)(input_address + 0x34) = local_1c;\n    *(uint32_t *)(input_address + 0x38) = local_1c + local_20;\n    return;\n}",
            "called": [
                "FUN_08009318",
                "FUN_080094c0",
                "FUN_08008590",
                "FUN_08008e44",
                "FUN_08008ba0",
                "FUN_0800856c",
                "FUN_08002908",
                "FUN_080028bc",
                "FUN_08008640",
                "FUN_08008bf0",
                "FUN_08008e3c",
                "FUN_08008eec"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002c18",
            "calling": [
                "FUN_08002e08"
            ],
            "imported": false,
            "current_name": "calculate_hash_and_values_08002c18"
        },
        "FUN_08006ac0": {
            "renaming": {
                "FUN_08006ac0": "check_bit_08006ac0",
                "param_1": "input_byte",
                "DAT_08006afc": "data_ptr"
            },
            "code": "bool check_bit_08006ac0(byte input_byte) {\n  uint* DAT_08006afc = PTR_DAT_08006afc;\n  uint index = ((uint)input_byte >> 5) + 0x80;\n  uint mask = 1 << (input_byte & 0x1f);\n  return (*(DAT_08006afc + index * 4) & mask) != 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006ac0",
            "calling": [
                "FUN_08006e1a"
            ],
            "imported": false,
            "current_name": "check_bit_08006ac0"
        },
        "FUN_080001ec": {
            "renaming": {
                "FUN_080001ec": "do_nothing_080001ec"
            },
            "code": "\nvoid do_nothing_080001ec(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080001ec",
            "calling": [
                "FUN_08000210"
            ],
            "imported": false,
            "current_name": "do_nothing_080001ec"
        },
        "FUN_08005a50": {
            "renaming": {
                "FUN_08005a50": "do_nothing_08005a50"
            },
            "code": "\nvoid do_nothing_08005a50(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005a50",
            "calling": [
                "FUN_080059b4"
            ],
            "imported": false,
            "current_name": "do_nothing_08005a50"
        },
        "FUN_08002ba8": {
            "renaming": {
                "FUN_08002ba8": "check_input_and_update_result_08002ba8_08002ba8",
                "puVar1": "data_ptr",
                "puVar2": "previous_char_ptr",
                "puVar3": "last_data_ptr",
                "local_14": "previous_char_ptr",
                "local_10": "current_char_ptr",
                "local_9": "current_char_index"
            },
            "code": "void check_input_and_update_result_08002ba8_08002ba8(void)\n{\n  undefined *current_char_ptr;\n  undefined *previous_char_ptr;\n  undefined *data_ptr;\n  undefined *previous_data_ptr;\n  undefined *last_data_ptr;\n  byte current_char_index;\n  byte start_char_index;\n  byte end_char_index;\n  \n  start_char_index = *PTR_DAT_08002c0c;\n  previous_char_ptr = (undefined *)0x0;\n  current_char_ptr = (undefined *)0x0;\n  previous_data_ptr = (undefined *)0x0;\n  last_data_ptr = (undefined *)0x0;\n  end_char_index = *PTR_DAT_08002c14;\n  while (start_char_index != end_char_index) {\n    previous_char_ptr = current_char_ptr;\n    data_ptr = PTR_DAT_08002c10 + (uint)start_char_index * 0x40;\n    check_input_and_update_result_08002afc(previous_char_ptr,current_char_ptr,data_ptr);\n    start_char_index = increment_char_and_reset_if_twelve_08002870(start_char_index);\n    previous_data_ptr = current_char_ptr;\n    current_char_ptr = data_ptr;\n    last_data_ptr = previous_data_ptr;\n  }\n  check_input_and_update_result_08002afc(previous_char_ptr,current_char_ptr,(undefined *)0x0,last_data_ptr,previous_data_ptr);\n  return;\n}",
            "called": [
                "FUN_08002afc",
                "FUN_08002870"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ba8",
            "calling": [
                "FUN_08002edc"
            ],
            "imported": false,
            "current_name": "check_input_and_update_result_08002ba8_08002ba8"
        },
        "FUN_0800919c": {
            "renaming": {
                "FUN_0800919c": "calculate_result_0800919c",
                "param_1": "num1",
                "param_2": "num2",
                "uVar2": "result1",
                "uVar3": "result2",
                "uVar4": "result3",
                "bVar1": "is_positive",
                "bVar5": "is_zero"
            },
            "code": "uint calculate_result_0800919c(uint num1, uint num2)\n{\n    bool is_negative1 = (int)(num1 * 2) >> 0x18 == -1;\n    bool is_negative2 = (int)(num2 * 2) >> 0x18 == -1;\n    \n    if (is_negative1 || is_negative2)\n    {\n        if ((is_negative1 && ((num1 & 0x7fffff) != 0)) || (is_negative2 && ((num2 & 0x7fffff) != 0)))\n        {\n            return 1;\n        }\n    }\n    \n    uint result1 = num1 * 2 | num2 & 0x7fffffff;\n    bool is_zero = result1 == 0;\n    \n    if (!is_zero)\n    {\n        uint result2 = num1 ^ num2;\n        is_zero = result2 == 0;\n    }\n    \n    bool is_positive = (int)num1 >= (int)num2;\n    \n    if (is_positive && num2 <= num1 && !is_zero)\n    {\n        num1 = (int)num2 >> 0x1f;\n    }\n    \n    if (!is_positive || num2 > num1)\n    {\n        num1 = ~((int)num2 >> 0x1f);\n    }\n    \n    if (!is_zero)\n    {\n        num1 |= 1;\n    }\n    \n    return num1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800919c",
            "calling": [
                "FUN_08009204"
            ],
            "imported": false,
            "current_name": "calculate_result_0800919c"
        },
        "FUN_0800b2cc": {
            "renaming": {
                "FUN_0800b2cc": "do_nothing_0800b2cc"
            },
            "code": "\nvoid do_nothing_0800b2cc(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800b2cc",
            "calling": [
                "FUN_08009990",
                "FUN_0800af78",
                "FUN_08009d78"
            ],
            "imported": false,
            "current_name": "do_nothing_0800b2cc"
        },
        "FUN_0800854c": {
            "renaming": {
                "FUN_0800854c": "reverse_and_shift_left_0800854c",
                "param_1": "input",
                "uVar1": "shift_left",
                "uVar2": "shift_right",
                "iVar3": "leading_zeroes",
                "uVar4": "shift_amount",
                "in_r12": "mask",
                "bVar5": "is_negative_shift",
                "bVar6": "is_zero_shift",
                "bVar7": "is_negative_shift_2"
            },
            "code": "ulonglong reverse_and_shift_left_0800854c(uint input)\n{\n  uint leading_zeroes = count_leading_zeroes(input);\n  uint shift_amount = leading_zeroes + 21;\n  uint mask = 0x1f;\n  bool is_negative_shift = shift_amount < 32;\n  if (input == 0)\n  {\n    return 0;\n  }\n  if (is_negative_shift)\n  {\n    shift_amount = 12 - leading_zeroes;\n    if (shift_amount < 0)\n    {\n      shift_amount = 0;\n    }\n    uint shift_left = input << shift_amount;\n    uint right_shift = 0;\n    if (shift_amount < 32)\n    {\n      right_shift = 0xffffffff >> (32 - shift_amount);\n    }\n    return ((ulonglong)shift_left << 32) | right_shift;\n  }\n  else if (shift_amount < 1075)\n  {\n    uint shift_left = input << (shift_amount - 1072);\n    return ((ulonglong)shift_left << 32) | (input >> (shift_amount - 32));\n  }\n  else\n  {\n    uint shift_amount = ~(shift_amount - 1075);\n    if (shift_amount > 30)\n    {\n      return (ulonglong)(input >> (shift_amount - 31));\n    }\n    else if (shift_amount > 18)\n    {\n      uint shift_right = shift_amount - 18;\n      uint shift_left = input << (32 - shift_right);\n      uint right_shift = input >> shift_right;\n      return ((ulonglong)right_shift << 32) | shift_left;\n    }\n    else\n    {\n      uint shift_left = input << (18 - shift_amount);\n      uint right_shift = input >> (shift_amount + 14);\n      return ((ulonglong)right_shift << 32) | shift_left;\n    }\n  }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800854c",
            "calling": [
                "FUN_08001994"
            ],
            "imported": false,
            "current_name": "reverse_and_shift_left_0800854c"
        },
        "FUN_08008e44": {
            "renaming": {
                "FUN_08008e44": "calculate_hash_08008e44",
                "param_1": "input_value",
                "iVar1": "leading_zeroes",
                "uVar2": "shifted_zeroes",
                "iVar4": "hash_value",
                "uVar3": "sign_bit",
                "uVar5": "overflow_check",
                "masked_input": "masked_input",
                "shifted_input": "shifted_input"
            },
            "code": "uint calculate_hash_08008e44(uint input_value)\n{\n  int leading_zeroes;\n  uint hash_value;\n  uint sign_bit;\n  uint shifted_input;\n  uint masked_input;\n  uint overflow_check;\n  uint shifted_zeroes;\n  \n  sign_bit = input_value & 0x80000000;\n  if ((int)sign_bit < 0) {\n    input_value = -input_value;\n  }\n  if (input_value == 0) {\n    return 0;\n  }\n  leading_zeroes = count_leading_zeroes(input_value);\n  shifted_zeroes = leading_zeroes - 8;\n  masked_input = input_value << (leading_zeroes + 0x18U & 0xff);\n  shifted_input = input_value >> (0x20 - (leading_zeroes + 0x18U) & 0xff);\n  overflow_check = 0;\n  if (shifted_zeroes > 7) {\n    overflow_check = 0x7fffffff;\n    hash_value = (sign_bit | 0x4b000000) - 0x800000 + shifted_zeroes * -0x800000;\n    hash_value += masked_input + (0U >> (0x20 - shifted_zeroes & 0xff)) + (uint)(overflow_check < 0);\n    if ((masked_input & 0x7fffffff) == 0x80000000) {\n      hash_value &= 0xfffffffe;\n    }\n  } else {\n    hash_value = (sign_bit | 0x4b000000) - 0x800000 + shifted_zeroes * -0x800000;\n    hash_value += shifted_input - ((int)masked_input >> 0x1f);\n    if ((masked_input & 0x7fffffff) == 0) {\n      hash_value &= ~(masked_input >> 0x1f);\n    }\n  }\n  return hash_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008e44",
            "calling": [
                "FUN_080004fc",
                "FUN_08004940",
                "FUN_08003004",
                "FUN_08003618",
                "FUN_080024c4",
                "FUN_08002408",
                "FUN_08001f00",
                "FUN_08002c18"
            ],
            "imported": false,
            "current_name": "calculate_hash_08008e44"
        },
        "FUN_0800733e": {
            "renaming": {
                "FUN_0800733e": "set_param_value_0800733e",
                "param_1": "param_address",
                "param_2": "value",
                "param_3": "is_second_param"
            },
            "code": "void set_param_value_0800733e(int param_address, undefined2 value, char is_second_param){\n  if (is_second_param == '\\0') {\n    *(undefined2 *)(param_address + 0x1a) = value;\n  }\n  else {\n    *(undefined2 *)(param_address + 0x18) = value;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800733e",
            "calling": [
                "FUN_0800778c"
            ],
            "imported": false,
            "current_name": "set_param_value_0800733e"
        },
        "FUN_0800583c": {
            "renaming": {
                "FUN_0800583c": "update_value_and_process_data_0800583c",
                "PTR_DAT_08005858": "address_data_pointer",
                "update_value_at_address_080052ac": "update_value_at_address",
                "process_data_08005790": "process_data",
                "clear_bits_and_check_condition_080057e4": "clear_bits_and_check_condition"
            },
            "code": "void update_value_and_process_data_0800583c(void)\n{\n  uint16_t *address_pointer = (uint16_t *)(PTR_DAT_08005858 + 0x18);\n  update_value_at_address_080052ac(*address_pointer);\n  process_data_08005790();\n  clear_bits_and_check_condition_080057e4();\n  return;\n}",
            "called": [
                "FUN_080052ac",
                "FUN_08005790",
                "FUN_080057e4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800583c",
            "calling": [
                "FUN_08001ddc"
            ],
            "imported": false,
            "current_name": "update_value_and_process_data_0800583c"
        },
        "FUN_08001e98": {
            "renaming": {
                "FUN_08001e98": "process_data_if_not_already_processed_08001e98",
                "param_1": "first_parameter",
                "param_2": "second_parameter",
                "param_3": "third_parameter",
                "param_4": "fourth_parameter",
                "param_5": "fifth_parameter",
                "iVar1": "are_pointers_equal_result"
            },
            "code": "void process_data_if_not_already_processed_08001e98(undefined4 param_1, undefined4 param_2, undefined4 param_3, undefined4 param_4, undefined param_5)\\n{\\n    int are_pointers_equal_result;\\n    if (PTR_DAT_08001efc[1] != \"\\a\") {\\n        do {\\n            process_data_08003a74_08003a74();\\n            if (*PTR_DAT_08001efc != \"\\0\") {\\n                return;\\n            }\\n            are_pointers_equal_result = are_pointers_equal_08002fac();\\n        } while (are_pointers_equal_result != 0);\\n        FUNC_08003004(param_1, param_2, param_3, param_4, param_5);\\n        if (PTR_DAT_08001efc[1] == \"\\0\") {\\n            PTR_DAT_08001efc[1] = 2;\\n        }\\n        if (PTR_DAT_08001efc[0x10] != \"\\0\") {\\n            process_if_second_element_equals_two_then_set_to_three_and_process_data_0800585c();\\n        }\\n    }\\n    return;\\n}",
            "called": [
                "FUN_08002fac",
                "FUN_08003004",
                "FUN_0800585c",
                "FUN_08003a74"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001e98",
            "calling": [
                "FUN_080005b4",
                "FUN_080024c4",
                "FUN_08001f00"
            ],
            "imported": false,
            "current_name": "process_data_if_not_already_processed_08001e98"
        },
        "FUN_080069e4": {
            "renaming": {
                "FUN_080069e4": "set_bit_in_array_080069e4",
                "param_1": "bit_index",
                "DAT_08006a14": "array_start_ptr"
            },
            "code": "void set_bit_in_array_080069e4(uint8_t bit_index) {\n    uint32_t* array_ptr = (uint32_t*)(DAT_08006a14 + (((uint32_t)bit_index >> 5) + 0x20) * 4);\n    uint32_t bit_mask = 1 << (bit_index & 0x1f);\n    *array_ptr = bit_mask;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080069e4",
            "calling": [
                "FUN_08006d4a"
            ],
            "imported": false,
            "current_name": "set_bit_in_array_080069e4"
        },
        "FUN_0800b2d4": {
            "renaming": {
                "FUN_0800b2d4": "set_sign_bit_0800b2d4",
                "param_1": "value",
                "param_2": "input_value"
            },
            "code": "uint set_sign_bit_0800b2d4(uint32_t value) {\n    uint32_t signed_value = value | 0x80000000;\n    uint32_t shifted_value = signed_value + 0x100000;\n    uint32_t result = shifted_value >> 0x1f;\n    return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800b2d4",
            "calling": [
                "FUN_0800981c"
            ],
            "imported": false,
            "current_name": "set_sign_bit_0800b2d4"
        },
        "FUN_08008e3c": {
            "renaming": {
                "FUN_08008e3c": "calculate_hash_08008e3c",
                "param_1": "input",
                "iVar1": "leading_zeroes_count",
                "uVar2": "shift_amount",
                "iVar3": "constant",
                "uVar4": "mask",
                "count_leading_zeroes": "count_leading_zeroes",
                "shift": "shift",
                "shifted_input": "shifted_input",
                "shifted_constant": "shifted_constant"
            },
            "code": "uint calculate_hash_08008e3c(uint value)\n{\n    uint mask = 0x80000000;\n    uint count = 0;\n    while ((value & mask) == 0 && mask != 0)\n    {\n        count++;\n        mask >>= 1;\n    }\n    return count;\n}\n\nuint calculate_hash_08008e3c(uint input)\n{\n    if (input == 0)\n    {\n        return 0;\n    }\n    uint leading_zeroes_count = calculate_hash_08008e3c(input);\n    uint shift_amount = leading_zeroes_count - 8;\n    uint constant = shift_amount * -0x800000 + 0x4a800000;\n    if (leading_zeroes_count > 7)\n    {\n        uint shift = shift_amount & 0xff;\n        uint mask = 0 << shift;\n        uint shifted_input = input << shift;\n        uint shifted_constant = constant + shifted_input + (0U >> (0x20 - shift & 0xff)) + (uint)(0x7fffffff < mask);\n        if (mask == 0x80000000)\n        {\n            shifted_constant = shifted_constant & 0xfffffffe;\n        }\n        return shifted_constant;\n    }\n    uint shift = (leading_zeroes_count + 0x18U) & 0xff;\n    uint shifted_input = input << shift;\n    uint shifted_constant = constant + ((input >> (0x20 - shift & 0xff)) - ((int)(input << (0x20 - shift & 0xff)) >> 0x1f));\n    if ((input << (0x20 - shift & 0xff) & 0x7fffffff) == 0)\n    {\n        shifted_constant = shifted_constant & ~(input << (0x20 - shift & 0xff) >> 0x1f);\n    }\n    return shifted_constant;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008e3c",
            "calling": [
                "FUN_08002638",
                "FUN_08002c18"
            ],
            "imported": false,
            "current_name": "calculate_hash_08008e3c"
        },
        "FUN_08009654": {
            "renaming": {
                "FUN_08009654": "convert_to_double_08009654",
                "param_1": "integer_part",
                "param_2": "fraction_part",
                "uVar1": "exponent",
                "uVar2": "adjusted_exponent",
                "lVar3": "result",
                "DAT_080096e4": "mask",
                "CARRY4": "__builtin_uadd_overflow"
            },
            "code": "long long convert_to_double_08009654(uint32_t integer_part, uint32_t fraction_part)\n{\n    long long result = ((long long)fraction_part << 32) | integer_part;\n    uint32_t exponent = (fraction_part << 1) >> 21;\n    uint32_t adjusted_exponent = exponent - 1023;\n    if (adjusted_exponent < 20)\n    {\n        if (adjusted_exponent < 0)\n        {\n            integer_part &= 0x80000000;\n            if (adjusted_exponent == 0xFFFFFFFF)\n            {\n                integer_part |= 0x3FF00000;\n            }\n            result = (long long)integer_part << 32;\n        }\n        else\n        {\n            uint32_t DAT_080096e4 = DAT_080096e4 >> (adjusted_exponent & 0xFF);\n            if ((fraction_part & DAT_080096e4) | integer_part)\n            {\n                result = (long long)(integer_part + (0x80000 >> (adjusted_exponent & 0xFF)) & ~DAT_080096e4) << 32;\n            }\n        }\n    }\n    else if (adjusted_exponent < 52)\n    {\n        uint32_t DAT_080096e4 = 0xFFFFFFFF >> (exponent - 1075 & 0xFF);\n        if (fraction_part & DAT_080096e4)\n        {\n            uint32_t bit = 1 << (52 - adjusted_exponent);\n            if (__builtin_uadd_overflow(integer_part, bit, &integer_part))\n            {\n                ++result;\n            }\n            result = ((long long)integer_part << 32) | ((fraction_part + bit) & ~DAT_080096e4);\n        }\n    }\n    else\n    {\n        if (adjusted_exponent == 0x400)\n        {\n            result = FUNC_080082d4();\n        }\n    }\n    return result;\n}",
            "called": [
                "FUN_080082d4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009654",
            "calling": [
                "FUN_08004e30"
            ],
            "imported": false,
            "current_name": "convert_to_double_08009654"
        },
        "FUN_08007bc2": {
            "renaming": {
                "FUN_08007bc2": "set_bits_to_zero_08007bc2",
                "_DAT_40000000": "_data_register_1",
                "_DAT_4000000c": "_data_register_2"
            },
            "code": "\n/* WARNING: Globals starting with '_' overlap smaller symbols at the same address */\n\nvoid set_bits_to_zero_08007bc2(void)\n{\n  // Clear the least significant bit of _DAT_40000000\n  _DAT_40000000 &= 0xfffffffe;\n  // Clear the 3 least significant bits of _DAT_4000000c\n  _DAT_4000000c &= 0xfffffff8;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007bc2",
            "calling": [
                "FUN_080057e4"
            ],
            "imported": false,
            "current_name": "set_bits_to_zero_08007bc2"
        },
        "FUN_08009410": {
            "renaming": {
                "FUN_08009410": "calculate_result_08009410_08009410",
                "param_1": "input_value",
                "param_2": "input_size",
                "uVar1": "result",
                "uVar2": "masked_value",
                "local_28": "local_var_1",
                "uStack_24": "local_var_2",
                "local_20": "local_var_3",
                "uStack_1c": "local_var_4"
            },
            "code": "undefined4 calculate_result_08009410_08009410(undefined4 input_value, uint input_size)\n{\n    undefined4 result;\n    uint masked_size = input_size & 0x7fffffff;\n    undefined4 local_28;\n    undefined4 uStack_24;\n    undefined4 local_20;\n    undefined4 uStack_1c;\n\n    if (DAT_080094b4 < (int)masked_size) {\n        if (DAT_080094b8 < (int)masked_size) {\n            result = FUNC_080082d0(input_value, masked_size, input_value, masked_size);\n        }\n        else {\n            uint uVar2 = FUNC_08009d78(input_value, masked_size, &local_28);\n            uVar2 &= 3;\n            if (uVar2 == 1) {\n                result = calculate_result_0800adf0_0800adf0(local_28, uStack_24, local_20, uStack_1c, 1);\n            }\n            else if (uVar2 == 2 || uVar2 == 0) {\n                result = FUNC_0800a348(local_28, uStack_24, local_20, uStack_1c);\n            }\n            else {\n                result = calculate_result_0800adf0_0800adf0(local_28, uStack_24, local_20, uStack_1c, 1);\n            }\n        }\n        return result;\n    }\n    result = FUNC_0800a348(input_value, masked_size, 0, 0);\n    return result;\n}",
            "called": [
                "FUN_080082d0",
                "FUN_0800a348",
                "FUN_08009d78",
                "FUN_0800adf0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009410",
            "calling": [
                "FUN_08001f00"
            ],
            "imported": false,
            "current_name": "calculate_result_08009410_08009410"
        },
        "FUN_080035ec": {
            "renaming": {
                "FUN_080035ec": "update_params_and_store_in_pointer_080035ec",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "PTR_DAT_08003614": "PTR_PARAM_STORAGE"
            },
            "code": "void update_params_and_store_in_pointer_080035ec(int param1, int param2, int param3)\n{\n  *(int*)PTR_DAT_08003614 = param1;\n  *(int*)(PTR_DAT_08003614 + 4) = param2;\n  *(int*)(PTR_DAT_08003614 + 8) = param3;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080035ec",
            "calling": [
                "FUN_0800283a"
            ],
            "imported": false,
            "current_name": "update_params_and_store_in_pointer_080035ec"
        },
        "FUN_08006c70": {
            "renaming": {
                "FUN_08006c70": "data_sync_barrier_and_set_08006c70",
                "DAT_08006c94": "data_ptr",
                "DAT_08006c98": "data_value"
            },
            "code": "void data_sync_barrier_and_set_08006c70(uint* DAT_08006c94, uint DAT_08006c98) {\n    DataSynchronizationBarrier(0xf);\n    *(DAT_08006c94 + 0x3) = DAT_08006c98 | (*(DAT_08006c94 + 0x3) & 0x700);\n    DataSynchronizationBarrier(0xf);\n    while (true) {\n        // Do nothing block with infinite loop\n    }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006c70",
            "calling": [
                "FUN_08006d66"
            ],
            "imported": false,
            "current_name": "data_sync_barrier_and_set_08006c70"
        },
        "FUN_08006d98": {
            "renaming": {
                "FUN_08006d98": "extract_bits_from_shifted_byte_08006d98",
                "param_1": "byte_to_shift",
                "param_2": "start_bit",
                "param_3": "end_bit",
                "param_4": "destination",
                "uVar1": "shifted_byte",
                "get_shifted_byte_08006b54": "get_shifted_byte",
                "extract_bits_08006c04": "extract_bits"
            },
            "code": "void extract_bits_from_shifted_byte_08006d98(unsigned char byte_to_shift, unsigned int start_bit, unsigned int end_bit, unsigned int destination) {\n    unsigned int shifted_byte = get_shifted_byte(byte_to_shift);\n    extract_bits(shifted_byte, start_bit, end_bit, destination);\n    return;\n}",
            "called": [
                "FUN_08006b54",
                "FUN_08006c04"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006d98",
            "calling": [],
            "imported": false,
            "current_name": "extract_bits_from_shifted_byte_08006d98"
        },
        "FUN_08005a68": {
            "renaming": {
                "FUN_08005a68": "increment_ptr_dat_08005a80_08005a68",
                "PTR_DAT_08005a80": "ptr_dat_08005a80"
            },
            "code": "void increment_ptr_dat_08005a80_08005a68(void)\n{\n  int* ptr = (int*) PTR_DAT_08005a80;\n  *ptr += 1;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005a68",
            "calling": [
                "FUN_08007756"
            ],
            "imported": false,
            "current_name": "increment_ptr_dat_08005a80_08005a68"
        },
        "FUN_080079c0": {
            "renaming": {
                "FUN_080079c0": "write_memory_with_byte_pattern_080079c0",
                "PTR_DAT_080079d8": "memory_ptr",
                "PTR_DAT_080079dc": "status_ptr",
                "write_memory_with_byte_pattern_0800b430": "write_memory_with_byte_pattern_with_byte_pattern"
            },
            "code": "void write_memory_with_byte_pattern_080079c0(void)\n{\n    uint32_t* PTR_DAT_080079d8 = PTR_DAT_080079d8;\n    uint32_t byte_pattern = 0;\n    uint32_t num_bytes = 0x18;\n\n    write_memory_with_byte_pattern_080079c0_0800b430(PTR_DAT_080079d8, byte_pattern, num_bytes);\n    *(uint32_t *)PTR_DAT_080079dc = 1;\n    return;\n}",
            "called": [
                "FUN_0800b430"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080079c0",
            "calling": [
                "FUN_08007540"
            ],
            "imported": false,
            "current_name": "write_memory_with_byte_pattern_080079c0"
        },
        "FUN_0800b2e0": {
            "renaming": {
                "FUN_0800b2e0": "return_zero_0800b2e0"
            },
            "code": "int return_zero_0800b2e0(void) {\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800b2e0",
            "calling": [
                "FUN_080098d0",
                "FUN_0800981c"
            ],
            "imported": false,
            "current_name": "return_zero_0800b2e0"
        },
        "FUN_08002908": {
            "renaming": {
                "FUN_08002908": "calculate_result_08002908",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "uVar1": "result_1",
                "uVar2": "result_2",
                "uVar3": "result_3",
                "uVar4": "result_4"
            },
            "code": "undefined4 calculate_result_08002908(undefined4 input_1, undefined4 input_2, undefined4 input_3, undefined4 input_4)\n{\n  undefined4 result_1 = FUNC_08008cdc(input_3, input_3);\n  result_1 = FUNC_08008eec(result_1, input_4);\n  undefined4 result_2 = FUNC_08008eec(input_1, input_1);\n  result_1 = FUNC_08008cd8(result_1, result_2);\n  undefined4 result_3 = FUNC_08008eec(input_2, input_2);\n  result_1 = FUNC_08008cdc(result_1, result_3);\n  undefined4 result_4 = FUNC_08008eec(input_3, 0x40800000);\n  result_1 = FUNC_08009054(result_1, result_4);\n  return result_1;\n}",
            "called": [
                "FUN_08008cd8",
                "FUN_08009054",
                "FUN_08008cdc",
                "FUN_08008eec"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002908",
            "calling": [
                "FUN_08002c18"
            ],
            "imported": false,
            "current_name": "calculate_result_08002908"
        },
        "FUN_08007c40": {
            "renaming": {
                "FUN_08007c40": "set_global_param_08007c40",
                "param_1": "new_param",
                "_DAT_40000034": "DAT_40000034"
            },
            "code": "void set_global_param_08007c40(undefined4 new_param){\n    _DAT_40000034 = new_param;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007c40",
            "calling": [
                "FUN_08005790"
            ],
            "imported": false,
            "current_name": "set_global_param_08007c40"
        },
        "FUN_080094c0": {
            "renaming": {
                "FUN_080094c0": "calculate_long_long_080094c0",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "param_3",
                "param_4": "param_4",
                "iVar1": "is_end_of_string",
                "uVar2": "uVar2",
                "uVar3": "uVar3",
                "bVar4": "carry_flag",
                "uVar5": "result",
                "lVar6": "result",
                "DAT_080095a8": "constant_8",
                "DAT_080095ac": "constant_9",
                "DAT_080095b0": "constant_11",
                "DAT_080095b4": "constant_10"
            },
            "code": "long long calculate_long_long_080094c0(uint32_t input_1, uint32_t input_2, undefined4 param_3, undefined4 param_4)\n{\n  int is_end_of_string;\n  uint32_t uVar2, uVar3, carry_check;\n  bool carry_flag;\n  undefined8 result;\n  uint32_t constant_1 = 0x3ff;\n  uint32_t constant_2 = 0x14;\n  uint32_t constant_3 = 0x34;\n  uint32_t constant_4 = 0x413;\n  uint32_t constant_5 = 0x100000;\n  uint32_t constant_6 = 0xffffffff;\n  uint32_t constant_7 = 0x400;\n\n  uVar3 = (input_2 << 1) >> 0x15;\n  uVar2 = uVar3 - constant_1;\n\n  if ((int)uVar2 < constant_2) {\n    if ((int)uVar2 < 0) {\n      result = function_1(input_1, input_2, DAT_080095a8, DAT_080095ac, param_4);\n      is_end_of_string = is_end_of_string_08008b60((int)result,(int)((ulonglong)result >> 0x20),0,0);\n      result = CONCAT_64(input_2, input_1);\n      if (is_end_of_string != 0) {\n        if ((int)input_2 < 0) {\n          if ((input_1 | input_2 & 0x7fffffff) != 0) {\n            input_2 = DAT_080095b4;\n          }\n          result = (ulonglong)input_2 << 0x20;\n        }\n        else {\n          result = 0;\n        }\n      }\n    }\n    else {\n      uVar3 = DAT_080095b0 >> (uVar2 & 0xff);\n      result = CONCAT_64(input_2, input_1);\n      if ((input_2 & uVar3 | input_1) != 0) {\n        result = function_1(input_1, input_2, DAT_080095a8, DAT_080095ac, param_4);\n        is_end_of_string = is_end_of_string_08008b60((int)result,(int)((ulonglong)result >> 0x20),0,0);\n        result = CONCAT_64(input_2, input_1);\n        if (is_end_of_string != 0) {\n          if ((int)input_2 < 0) {\n            input_2 = input_2 + (constant_5 >> (uVar2 & 0xff));\n          }\n          result = (ulonglong)(input_2 & ~uVar3) << 0x20;\n        }\n      }\n    }\n  }\n  else if ((int)uVar2 < constant_3) {\n    uVar3 = constant_6 >> (uVar3 - constant_4 & 0xff);\n    result = CONCAT_64(input_2, input_1);\n    if ((uVar3 & input_1) != 0) {\n      result = function_1(input_1, input_2, DAT_080095a8, DAT_080095ac, param_4);\n      is_end_of_string = is_end_of_string_08008b60((int)result,(int)((ulonglong)result >> 0x20),0,0);\n      result = CONCAT_64(input_2, input_1);\n      if (is_end_of_string != 0) {\n        if ((int)input_2 < 0) {\n          if (uVar2 == 0x14) {\n            input_2 = input_2 + 1;\n          }\n          else {\n            carry_check = 1 << (0x34 - uVar2 & 0xff);\n            carry_flag = CARRY4(carry_check, input_1);\n            input_1 = carry_check + input_1;\n            if (carry_flag != false) {\n              input_2 = input_2 + 1;\n            }\n          }\n        }\n        result = CONCAT_64(input_2, input_1 & ~uVar3);\n      }\n    }\n  }\n  else {\n    result = CONCAT_64(input_2, input_1);\n    if (uVar2 == constant_7) {\n      result = function_1(input_1, input_2, DAT_080095a8, DAT_080095ac, param_4);\n    }\n  }\n  return result;\n}\n",
            "called": [
                "FUN_080082d4",
                "FUN_08008b60"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080094c0",
            "calling": [
                "FUN_0800a5a0",
                "FUN_08002408",
                "FUN_08001f00",
                "FUN_08002c18"
            ],
            "imported": false,
            "current_name": "calculate_long_long_080094c0"
        },
        "FUN_08008eec": {
            "renaming": {
                "FUN_08008eec": "FUNC_08008eec"
            },
            "code": "\nuint FUNC_08008eec(uint param_1,uint param_2,undefined4 param_3,uint param_4)\n\n{\n  longlong lVar1;\n  uint uVar2;\n  uint uVar3;\n  int iVar4;\n  int iVar5;\n  uint uVar6;\n  int iVar7;\n  uint uVar8;\n  bool bVar9;\n  bool bVar10;\n  \n  uVar3 = param_1 >> 0x17 & 0xff;\n  bVar9 = uVar3 == 0;\n  if (!bVar9) {\n    param_4 = param_2 >> 0x17 & 0xff;\n    bVar9 = param_4 == 0;\n  }\n  if (!bVar9) {\n    bVar9 = uVar3 == 0xff;\n  }\n  if (!bVar9) {\n    bVar9 = param_4 == 0xff;\n  }\n  if (bVar9) {\n    param_4 = param_2 >> 0x17 & 0xff;\n    if (uVar3 == 0xff || param_4 == 0xff) {\n      bVar9 = param_1 == 0 || param_1 == 0x80000000;\n      uVar2 = param_2;\n      if (param_1 != 0 && param_1 != 0x80000000) {\n        bVar9 = param_2 == 0;\n        uVar2 = param_1;\n      }\n      if (!bVar9) {\n        bVar9 = param_2 == 0x80000000;\n      }\n      uVar8 = uVar2;\n      if (((bVar9) || ((uVar3 == 0xff && ((uVar2 & 0x7fffff) != 0)))) ||\n         ((param_4 == 0xff && (uVar8 = param_2, (param_2 & 0x7fffff) != 0)))) {\n        return uVar8 | 0x7fc00000;\n      }\n      uVar2 = uVar2 ^ param_2;\n      goto LAB_0800903c;\n    }\n    bVar9 = (param_1 & 0x7fffffff) == 0;\n    if (!bVar9) {\n      bVar9 = (param_2 & 0x7fffffff) == 0;\n    }\n    if (bVar9) {\n      return (param_1 ^ param_2) & 0x80000000;\n    }\n    bVar9 = uVar3 == 0;\n    uVar2 = param_1 & 0x80000000;\n    while( true ) {\n      if (bVar9) {\n        param_1 = param_1 << 1;\n        bVar9 = (param_1 & 0x800000) == 0;\n      }\n      if (!bVar9) break;\n      uVar3 = uVar3 - 1;\n    }\n    param_1 = param_1 | uVar2;\n    bVar9 = param_4 == 0;\n    uVar2 = param_2 & 0x80000000;\n    while( true ) {\n      if (bVar9) {\n        param_2 = param_2 << 1;\n        bVar9 = (param_2 & 0x800000) == 0;\n      }\n      if (!bVar9) break;\n      param_4 = param_4 - 1;\n    }\n    param_2 = param_2 | uVar2;\n  }\n  iVar4 = uVar3 + param_4;\n  uVar8 = param_1 ^ param_2;\n  uVar3 = param_1 << 9;\n  bVar9 = uVar3 == 0;\n  if (!bVar9) {\n    param_2 = param_2 << 9;\n    bVar9 = param_2 == 0;\n  }\n  if (bVar9) {\n    if (uVar3 == 0) {\n      param_2 = param_2 << 9;\n    }\n    uVar2 = uVar8 & 0x80000000 | param_1 & 0x7fffff | param_2 >> 9;\n    bVar10 = SBORROW4(iVar4,0x7f);\n    iVar5 = iVar4 + -0x7f;\n    bVar9 = iVar5 == 0;\n    iVar7 = iVar5;\n    if (!bVar9 && 0x7e < iVar4) {\n      bVar10 = SBORROW4(0xff,iVar5);\n      iVar7 = 0xff - iVar5;\n      bVar9 = iVar5 == 0xff;\n    }\n    if (!bVar9 && iVar7 < 0 == bVar10) {\n      uVar2 = uVar2 | iVar5 * 0x800000;\n    }\n    if (!bVar9 && iVar7 < 0 == bVar10) {\n      return uVar2;\n    }\n    uVar2 = uVar2 | 0x800000;\n    uVar6 = 0;\n    bVar10 = SBORROW4(iVar5,1);\n    uVar8 = iVar4 - 0x80;\n    bVar9 = uVar8 == 0;\n    uVar3 = uVar8;\n  }\n  else {\n    lVar1 = (ulonglong)(uVar3 >> 5 | 0x8000000) * (ulonglong)(param_2 >> 5 | 0x8000000);\n    uVar6 = (uint)lVar1;\n    uVar2 = (uint)((ulonglong)lVar1 >> 0x20);\n    bVar9 = uVar2 < 0x800000;\n    if (bVar9) {\n      uVar2 = uVar2 << 1;\n    }\n    if (bVar9) {\n      uVar2 = uVar2 | uVar6 >> 0x1f;\n      uVar6 = uVar6 << 1;\n    }\n    uVar2 = uVar8 & 0x80000000 | uVar2;\n    uVar8 = (iVar4 + -0x7f) - (uint)bVar9;\n    bVar10 = SBORROW4(uVar8,0xfd);\n    bVar9 = uVar8 == 0xfd;\n    uVar3 = uVar8 - 0xfd;\n    if (uVar8 < 0xfe) {\n      uVar2 = uVar2 + uVar8 * 0x800000 + (uint)(0x7fffffff < uVar6);\n      if (uVar6 == 0x80000000) {\n        uVar2 = uVar2 & 0xfffffffe;\n      }\n      return uVar2;\n    }\n  }\n  if (bVar9 || (int)uVar3 < 0 != bVar10) {\n    bVar9 = (int)(uVar8 + 0x19) < 0;\n    if (uVar8 == 0xffffffe7 || bVar9 != SCARRY4(uVar8,0x19)) {\n      uVar2 = uVar2 & 0x80000000;\n    }\n    if (uVar8 != 0xffffffe7 && bVar9 == SCARRY4(uVar8,0x19)) {\n      uVar3 = (uVar2 << 1) >> (-uVar8 & 0xff);\n      uVar8 = uVar2 << (uVar8 + 0x20 & 0xff);\n      uVar3 = ((uint)((uVar2 & 0x80000000) != 0) << 0x1f | uVar3 >> 1) + (uint)((byte)uVar3 & 1);\n      if ((uVar6 | uVar8 << 1) == 0) {\n        uVar3 = uVar3 & ~(uVar8 >> 0x1f);\n      }\n      return uVar3;\n    }\n    return uVar2;\n  }\nLAB_0800903c:\n  return uVar2 & 0x80000000 | 0x7f800000;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08008eec",
            "calling": [
                "FUN_08003004",
                "FUN_08003618",
                "FUN_08002638",
                "FUN_08002978",
                "FUN_08004e30",
                "FUN_08001f00",
                "FUN_08002c18",
                "FUN_08001994",
                "FUN_08003826",
                "FUN_080005b4",
                "FUN_08002908",
                "FUN_080028bc",
                "FUN_080024c4",
                "FUN_08002408"
            ],
            "imported": false,
            "current_name": "FUNC_08008eec"
        },
        "FUN_08006b54": {
            "renaming": {
                "FUN_08006b54": "get_shifted_byte_08006b54",
                "param_1": "input_byte",
                "bVar1": "shifted_byte",
                "DAT_08006b98": "ptr_data_1",
                "DAT_08006b9c": "ptr_data_2"
            },
            "code": "byte get_shifted_byte_08006b54(byte input_byte)\\n{\\n  byte shifted_byte;\\n  if ((char)input_byte < \"\\0\") {\\n    shifted_byte = *(byte *)((input_byte & 0xf) + DAT_08006b98 + 0x14);\\n  }\\n  else {\\n    shifted_byte = *(byte *)((char)input_byte + DAT_08006b9c + 0x300);\\n  }\\n  return shifted_byte >> 4;\\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006b54",
            "calling": [
                "FUN_08006d98"
            ],
            "imported": false,
            "current_name": "get_shifted_byte_08006b54"
        },
        "FUN_08007e84": {
            "renaming": {
                "FUN_08007e84": "get_lowest_byte_of_second_ptr_08007e84",
                "PTR_DAT_08007ea0": "second_ptr",
                "uint": "unsigned int",
                "lowest_byte": "lowest_byte_of_second_ptr"
            },
            "code": "uint get_lowest_byte_of_second_ptr_08007e84() {\n    uint* PTR_DAT_08007ea0 = (uint*)(DAT_08007ea0 + 4);\n    uint lowest_byte = *PTR_DAT_08007ea0 & 0xff;\n    return lowest_byte;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007e84",
            "calling": [
                "FUN_08008286"
            ],
            "imported": false,
            "current_name": "get_lowest_byte_of_second_ptr_08007e84"
        },
        "FUN_080057e4": {
            "renaming": {
                "FUN_080057e4": "clear_bits_and_check_condition_080057e4",
                "set_bits_to_zero_08007bc2": "clear_bits",
                "do_nothing_0800530c": "do_nothing"
            },
            "code": "void clear_bits_and_check_condition_080057e4(void)\n{\n  clear_bits();\n  if ((PTR_DAT_0800580c[0x3c] != -1) || ((PTR_DAT_08005810[2] & 0x20) != 0)) {\n    do_nothing();\n  }\n  return;\n}",
            "called": [
                "FUN_08007bc2",
                "FUN_0800530c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080057e4",
            "calling": [
                "FUN_080025e8",
                "FUN_080053a0",
                "FUN_08001d4c",
                "FUN_0800583c"
            ],
            "imported": false,
            "current_name": "clear_bits_and_check_condition_080057e4"
        },
        "FUN_08006d8a": {
            "renaming": {
                "FUN_08006d8a": "get_shifted_dat_value_and_masked_08006d8a",
                "uVar1": "shifted_dat_value",
                "get_dat_value_shifted_right_and_masked_08006998": "get_dat_value_shifted_right_and_masked"
            },
            "code": "unsigned int get_shifted_dat_value_and_masked_08006d8a(){\n    unsigned int shifted_dat_value = get_dat_value_shifted_right_and_masked_08006998();\n    return shifted_dat_value;\n}",
            "called": [
                "FUN_08006998"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006d8a",
            "calling": [],
            "imported": false,
            "current_name": "get_shifted_dat_value_and_masked_08006d8a"
        },
        "FUN_0800b2e8": {
            "renaming": {
                "FUN_0800b2e8": "calculate_result_0800b2e8",
                "param_1": "num1",
                "param_2": "num2",
                "param_3": "num3",
                "param_4": "param_4",
                "uVar1": "result1",
                "iVar2": "temp_num",
                "uVar3": "result2",
                "uVar4": "combined_nums"
            },
            "code": "uint calculate_result_0800b2e8(uint num1, uint num2, int num3, undefined4 param_4)\n{\n  uint result1;\n  int temp_num;\n  uint result2;\n  ulonglong combined_nums;\n  \n  combined_nums = CONCAT44(num2, num1);\n  result1 = (num2 << 1) >> 0x15;\n  if (result1 == 0) {\n    if ((num1 | num2 & 0x7fffffff) == 0) {\n      return num1;\n    }\n    combined_nums = FUNC_08008640(num1, num2, 0, DAT_0800b3c8);\n    if (num3 < DAT_0800b3cc) goto LAB_0800b34a;\n    result1 = ((uint)((int)(combined_nums >> 0x20) << 1) >> 0x15) - 0x36;\n  }\n  else if (result1 == 0x7ff) {\n    result1 = FUNC_080082d4(num1, num2, num1, num2, param_4);\n    return result1;\n  }\n  result2 = (uint)(combined_nums >> 0x20);\n  temp_num = result1 + num3;\n  if (temp_num < 0x7ff) {\n    if (0 < temp_num) {\n      return (uint)combined_nums;\n    }\n    if (temp_num + 0x35 < 0 == SCARRY4(temp_num,0x35)) {\n      result1 = FUNC_08008640((uint)combined_nums,result2 & 0x800fffff | (temp_num + 0x36) * 0x100000,0,DAT_0800b3d8\n                          );\n      return result1;\n    }\n    if (num3 < 0xc351) {\n      combined_nums = combined_nums & 0x8000000000000000 | (ulonglong)DAT_0800b3d0 | 0x1a56e1f00000000;\nLAB_0800b34a:\n      result1 = FUNC_08008640((int)combined_nums,(int)(combined_nums >> 0x20),DAT_0800b3b8,DAT_0800b3bc);\n      return result1;\n    }\n  }\n  result1 = FUNC_08008640(DAT_0800b3d4,result2 & 0x80000000 | 0x7e37e43c,DAT_0800b3c0,DAT_0800b3c4);\n  return result1;\n}",
            "called": [
                "FUN_080082d4",
                "FUN_08008640"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800b2e8",
            "calling": [
                "FUN_0800a5a0"
            ],
            "imported": false,
            "current_name": "calculate_result_0800b2e8"
        },
        "FUN_08005220": {
            "renaming": {
                "FUN_08005220": "do_nothing_08005220"
            },
            "code": "\nvoid do_nothing_08005220(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005220",
            "calling": [
                "FUN_0800525c"
            ],
            "imported": false,
            "current_name": "do_nothing_08005220"
        },
        "FUN_08007520": {
            "renaming": {
                "FUN_08007520": "set_bit_in_short_at_offset_080073d4_if_odd_08007520",
                "param_1": "input_number"
            },
            "code": "void set_bit_in_short_at_offset_080073d4_if_odd_08007520(uint input_number)\n{\n  if ((input_number & 1) != 0) {\n    set_bit_in_short_at_offset_080073d4(0x3e);\n  }\n  return;\n}",
            "called": [
                "FUN_080073d4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007520",
            "calling": [
                "FUN_08007930"
            ],
            "imported": false,
            "current_name": "set_bit_in_short_at_offset_080073d4_if_odd_08007520"
        },
        "FUN_08007884": {
            "renaming": {
                "FUN_08007884": "decode_bits_from_memory_08007884",
                "uVar6": "decoded_bits",
                "iVar1": "bit_1",
                "iVar2": "bit_2",
                "iVar3": "bit_3",
                "iVar4": "bit_4",
                "iVar5": "bit_5"
            },
            "code": "uint decode_bits_from_memory_08007884(void)\n{\n  int bit_0 = get_bit_at_index_08007854(0);\n  int bit_1 = get_bit_at_index_08007854(0x36);\n  int bit_2 = get_bit_at_index_08007854(0x37);\n  int bit_3 = get_bit_at_index_08007854(0x38);\n  int bit_4 = get_bit_at_index_08007854(0x39);\n  int bit_5 = get_bit_at_index_08007854(0xf);\n  uint decoded_bits = bit_0 | bit_1 << 4 | bit_2 << 3 | bit_3 << 2 | bit_4 << 1 | bit_5 << 7;\n  return decoded_bits;\n}",
            "called": [
                "FUN_08007854"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007884",
            "calling": [
                "FUN_08007930"
            ],
            "imported": false,
            "current_name": "decode_bits_from_memory_08007884"
        },
        "FUN_08004250": {
            "renaming": {
                "FUN_08004250": "print_settings_08004250",
                "PTR_DAT_08004470": "PTR_SETTINGS_BITMASK",
                "PTR_s___x__step_mm___1__08004478": "PTR_STEPS_PER_X_MM",
                "PTR_DAT_08004474": "PTR_SETTINGS_BITMASK",
                "PTR_s___y__step_mm___2__0800447c": "PTR_STEPS_PER_Y_MM",
                "PTR_s___z__step_mm___3__08004480": "PTR_STEPS_PER_Z_MM",
                "PTR_s___step_pulse__usec___4__08004484": "PTR_STEP_PULSE_USEC",
                "PTR_s___default_feed__mm_min___5__08004488": "PTR_DEFAULT_FEED_MM_MIN",
                "PTR_s___default_seek__mm_min___6__0800448c": "PTR_DEFAULT_SEEK_MM_MIN",
                "PTR_s____7__08004494": "PTR_REPORT_INCHES",
                "PTR_s___step_idle_delay__msec___8__08004498": "PTR_STEP_IDLE_DELAY",
                "PTR_s___acceleration__mm_sec_2___9__080044a0": "PTR_ACCELERATION_MM_SEC_2",
                "PTR_s___junction_deviation__mm___10__080044a4": "PTR_JUNCTION_DEVIATION_MM",
                "PTR_s___arc__mm_segment___11__080044a8": "PTR_ARC_MM_SEGMENT",
                "PTR_s___n_arc_correction__int___12__080044ac": "PTR_N_ARC_CORRECTION",
                "PTR_s___n_decimals__int___13__080044b0": "PTR_N_DECIMALS",
                "PTR_s___report_inches__bool___14__080044b4": "PTR_REPORT_INCHES",
                "PTR_s___auto_start__bool___15__080044b8": "PTR_AUTO_START",
                "PTR_s___invert_step_enable__bool___16__080044bc": "PTR_INVERT_STEP_ENABLE",
                "PTR_s___hard_limits__bool___17__080044c0": "PTR_HARD_LIMITS",
                "PTR_s___homing_cycle__bool___18__080044c4": "PTR_HOMING_CYCLE",
                "PTR_s___homing_dir_invert_mask__int__080044c8": "PTR_HOMING_DIR_INVERT_MASK",
                "PTR_s____19__080044cc": "PTR_HOMING_PULL_OFF_MM",
                "PTR_s___homing_feed__mm_min___20__080044d0": "PTR_HOMING_FEED_MM_MIN",
                "PTR_s___homing_seek__mm_min___21__080044d4": "PTR_HOMING_SEEK_MM_MIN",
                "PTR_s___homing_debounce__msec___22__080044d8": "PTR_HOMING_DEBOUNCE_MSEC",
                "PTR_s___homing_pull_off__mm___23__080044dc": "PTR_HOMING_PULL_OFF_MM",
                "DAT_0800449c": "DAT_0800449c"
            },
            "code": "void print_settings_08004250(void)\n{\n  undefined4 setting_value;\n  \n  wait_until_all_bits_are_set(PTR_DAT_08004470);\n  convert_uint_to_decimal_string(*(undefined4 *)PTR_s___x__step_mm___1__08004478);\n  wait_until_all_bits_are_set(PTR_s___y__step_mm___2__0800447c);\n  convert_uint_to_decimal_string(*(undefined4 *)(PTR_DAT_08004470 + 4));\n  wait_until_all_bits_are_set(PTR_s___z__step_mm___3__08004480);\n  wait_until_bit_is_set(PTR_DAT_08004470[0xd]);\n  wait_until_all_bits_are_set(PTR_s___step_pulse__usec___4__08004484);\n  convert_uint_to_decimal_string(*(undefined4 *)(PTR_DAT_08004470 + 0x10));\n  wait_until_all_bits_are_set(PTR_s___default_feed__mm_min___5__08004488);\n  convert_uint_to_decimal_string(*(undefined4 *)(PTR_DAT_08004470 + 0x14));\n  wait_until_all_bits_are_set(PTR_s___default_seek__mm_min___6__0800448c);\n  wait_until_bit_is_set(*(undefined2 *)(PTR_DAT_08004470 + 0x18));\n  wait_until_all_bits_are_set(PTR_STEP_PORT_INVERT_MASK);\n  print_binary_representation(*(undefined2 *)(PTR_DAT_08004470 + 0x18));\n  wait_until_all_bits_are_set(PTR_s____7__08004494);\n  wait_until_bit_is_set(PTR_DAT_08004470[0x3c]);\n  wait_until_all_bits_are_set(PTR_s___step_idle_delay__msec___8__08004498);\n  setting_value = get_setting_value(*(undefined4 *)(PTR_DAT_08004470 + 0x20), DAT_0800449c);\n  convert_uint_to_decimal_string(setting_value);\n  wait_until_all_bits_are_set(PTR_s___acceleration__mm_sec_2___9__080044a0);\n  convert_uint_to_decimal_string(*(undefined4 *)(PTR_DAT_08004470 + 0x24));\n  wait_until_all_bits_are_set(PTR_s___junction_deviation__mm___10__080044a4);\n  convert_uint_to_decimal_string(*(undefined4 *)(PTR_DAT_08004470 + 0x1c));\n  wait_until_all_bits_are_set(PTR_s___arc__mm_segment___11__080044a8);\n  wait_until_bit_is_set(PTR_DAT_08004470[0x3e]);\n  wait_until_all_bits_are_set(PTR_s___n_arc_correction__int___12__080044ac);\n  wait_until_bit_is_set(PTR_DAT_08004470[0x3d]);\n  wait_until_all_bits_are_set(PTR_s___n_decimals__int___13__080044b0);\n  wait_until_bit_is_set((PTR_DAT_08004470[0x28] & 1) != 0);\n  wait_until_all_bits_are_set(PTR_s____7__08004494);\n  wait_until_bit_is_set((PTR_DAT_08004470[0x28] & 2) != 0);\n  wait_until_all_bits_are_set(PTR_s___auto_start__bool___15__080044b8);\n  wait_until_bit_is_set((PTR_DAT_08004470[0x28] & 4) != 0);\n  wait_until_all_bits_are_set(PTR_s___invert_step_enable__bool___16__080044bc);\n  wait_until_bit_is_set((PTR_DAT_08004470[0x28] & 8) != 0);\n  wait_until_all_bits_are_set(PTR_s___hard_limits__bool___17__080044c0);\n  wait_until_bit_is_set((PTR_DAT_08004470[0x28] & 0x10) != 0);\n  wait_until_all_bits_are_set(PTR_s___homing_cycle__bool___18__080044c4);\n  wait_until_bit_is_set(*(undefined2 *)(PTR_DAT_08004470 + 0x2a));\n  wait_until_all_bits_are_set(PTR_s___homing_dir_invert_mask__int__080044c8);\n  print_binary_representation(*(undefined2 *)(PTR_DAT_08004470 + 0x2a));\n  wait_until_all_bits_are_set(PTR_s____19__080044cc);\n  convert_uint_to_decimal_string(*(undefined4 *)(PTR_DAT_08004470 + 0x2c));\n  wait_until_all_bits_are_set(PTR_s___homing_feed__mm_min___20__080044d0);\n  convert_uint_to_decimal_string(*(undefined4 *)(PTR_DAT_08004470 + 0x30));\n  wait_until_all_bits_are_set(PTR_s___homing_seek__mm_min___21__080044d4);\n  wait_until_bit_is_set(*(undefined2 *)(PTR_DAT_08004470 + 0x34));\n  wait_until_all_bits_are_set(PTR_s___homing_debounce__msec___22__080044d8);\n  convert_uint_to_decimal_string(*(undefined4 *)(PTR_DAT_08004470 + 0x38));\n  wait_until_all_bits_are_set(PTR_s____19__080044cc);\n  wait_until_bit_is_set(*(undefined2 *)(PTR_DAT_08004470 + 0x1a));\n  wait_until_all_bits_are_set(PTR_DIR_PORT_INVERT_MASK);\n  print_binary_representation(*(undefined2 *)(PTR_DAT_08004470 + 0x1a));\n  wait_until_all_bits_are_set(PTR_DAT_08004470);\n  return;\n}",
            "called": [
                "FUN_0800375c",
                "FUN_08003826",
                "FUN_080037fc",
                "FUN_08009054",
                "FUN_080036c6"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004250",
            "calling": [
                "FUN_080051b4",
                "FUN_08003b98"
            ],
            "imported": false,
            "current_name": "print_settings_08004250"
        },
        "FUN_08006dc4": {
            "renaming": {
                "FUN_08006dc4": "set_bit_in_array_08006dc4",
                "param_1": "bit_index",
                "set_bit_in_array_08006a58": "set_bit_in_array_at_index"
            },
            "code": "void set_bit_in_array_08006dc4(int bit_index)\n{\n  set_bit_in_array_08006dc4_at_index(bit_index);\n  return;\n}",
            "called": [
                "FUN_08006a58"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006dc4",
            "calling": [],
            "imported": false,
            "current_name": "set_bit_in_array_08006dc4"
        },
        "FUN_08007402": {
            "renaming": {
                "FUN_08007402": "set_bit_in_short_at_offset_08007402",
                "param_1": "offset",
                "PTR_": "",
                "DAT_": ""
            },
            "code": "void set_bit_in_short_at_offset_08007402(uint offset)\n{\n    uint base_address = (offset >> 4) * 0x400 + 0x40020018;\n    short* short_ptr = (short*)base_address;\n    uint bit_offset = offset & 0xf;\n    short bit_value = (short)(1 << bit_offset);\n    *short_ptr = bit_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007402",
            "calling": [
                "FUN_080074c8"
            ],
            "imported": false,
            "current_name": "set_bit_in_short_at_offset_08007402"
        },
        "FUN_08002870": {
            "renaming": {
                "FUN_08002870": "increment_char_and_reset_if_twelve_08002870",
                "param_1": "current_char",
                "local_9": "incremented_char"
            },
            "code": "char increment_char_and_reset_if_twelve_08002870(char current_char) {\n  char incremented_char = current_char + 1;\n  if (incremented_char == 18) {\n    incremented_char = 0;\n  }\n  return incremented_char;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002870",
            "calling": [
                "FUN_08002ef0",
                "FUN_08002ba8",
                "FUN_08002e08",
                "FUN_08003004",
                "FUN_08002f40"
            ],
            "imported": false,
            "current_name": "increment_char_and_reset_if_twelve_08002870"
        },
        "FUN_08000210": {
            "renaming": {
                "FUN_08000210": "do_nothing_twice_08000210_08000210",
                "do_nothing_080001ec": "do_nothing_once_080001ec",
                "do_nothing_080001d4": "do_nothing_once_080001d4"
            },
            "code": "void do_nothing_twice_08000210_08000210(void)\n{\n  do_nothing_080001ec();\n  do_nothing_080001d4();\n  return;\n}",
            "called": [
                "FUN_080001d4",
                "FUN_080001ec"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000210",
            "calling": [
                "FUN_080025e8",
                "FUN_080001f8",
                "FUN_08000220"
            ],
            "imported": false,
            "current_name": "do_nothing_twice_08000210_08000210"
        },
        "FUN_08005900": {
            "renaming": {
                "FUN_08005900": "check_byte_value_08005900",
                "param_1": "value",
                "PTR_DAT_08005978": "sensor_data",
                "activate_sensor_if_not_active_080025e8": "activate_sensor_if_not_active"
            },
            "code": "int check_byte_value_08005900(byte value) {\n    if (value == 0x7e) {\n        PTR_DAT_08005978[2] |= 2;\n        return 1;\n    }\n    if (value < 0x7f) {\n        if (value == 0x3f) {\n            PTR_DAT_08005978[2] |= 1;\n            return 1;\n        }\n        if (value < 0x40) {\n            if (value == 0x18) {\n                activate_sensor_if_not_active();\n                return 1;\n            }\n            if (value == 0x21) {\n                PTR_DAT_08005978[2] |= 8;\n                return 1;\n            }\n        }\n    }\n    return 0;\n}",
            "called": [
                "FUN_080025e8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005900",
            "calling": [
                "FUN_08008286"
            ],
            "imported": false,
            "current_name": "check_byte_value_08005900"
        },
        "FUN_08002638": {
            "renaming": {
                "FUN_08002638": "parse_input_08002638_08002638",
                "param_1": "input_offset",
                "param_2": "input_buffer",
                "param_3": "output_value",
                "bVar1": "current_digit",
                "bVar2": "is_negative",
                "bVar3": "is_exponent_negative",
                "iVar4": "check_result",
                "pcVar5": "output_ptr",
                "pcVar6": "current_ptr",
                "uVar7": "return_value",
                "uVar8": "conversion_result",
                "local_1c": "hash_value",
                "local_16": "integer_part_length",
                "local_15": "exponent_part_length",
                "local_14": "integer_part",
                "local_d": "current_char",
                "local_c": "current_ptr",
                "calculate_hash_08008e3c": "calculate_hash",
                "check_input_is_not_null_08009214_08009214": "check_input_is_not_null",
                "convert_to_big_endian_08008590": "convert_to_big_endian",
                "FUNC_08008640": "calculate_float",
                "calculate_float_bits_08008c30": "calculate_float_bits",
                "FUNC_08008eec": "update_hash",
                "DAT_08002800": "float_constant_1",
                "DAT_08002804": "float_constant_2",
                "DAT_08002808": "float_constant_3",
                "DAT_0800280c": "float_constant_4",
                "DAT_08002810": "hash_constant"
            },
            "code": "uint32_t parse_input_08002638_08002638(int input_offset, uint8_t *input_buffer, uint32_t *output_value)\n{\n    uint8_t current_char;\n    bool is_negative = false;\n    bool is_exponent_negative = false;\n    int32_t integer_part = 0;\n    int32_t integer_part_length = 0;\n    int32_t exponent_part_length = 0;\n    uint32_t hash_value = 0;\n    uint32_t float_bits = 0;\n    uint32_t exponent_value = 0;\n    uint8_t *current_ptr = input_buffer + input_offset;\n    char *output_ptr;\n\n    current_char = *current_ptr;\n    if (current_char == '-') {\n        is_negative = true;\n        current_char = *(++current_ptr);\n    }\n    else if (current_char == '+') {\n        current_char = *(++current_ptr);\n    }\n\n    while (true) {\n        if (current_char >= '0' && current_char <= '9') {\n            integer_part_length++;\n            if (integer_part_length < 9) {\n                integer_part = (current_char - '0') + integer_part * 10;\n            }\n            else if (!is_exponent_negative) {\n                exponent_part_length++;\n            }\n        }\n        else if (current_char == '.') {\n            is_exponent_negative = true;\n        }\n        else if (current_char == 'e') {\n            is_exponent_negative = false;\n            exponent_value = integer_part;\n            integer_part_length = 0;\n            integer_part = 0;\n        }\n        else {\n            if (exponent_part_length == 0) {\n                *output_value = 0;\n            }\n            else {\n                hash_value = calculate_hash_08008e3c(integer_part);\n                if (check_input_is_not_null_08009214_08009214(hash_value, 0) == 0) {\n                    for (int i = 0; i > exponent_value; i -= 2) {\n                        float_bits = calculate_float_bits_08008c30(FUNC_08008640(convert_to_big_endian_08008590(hash_value), DAT_08002800, DAT_08002804), 0);\n                    }\n                    if (exponent_value < 0) {\n                        float_bits = calculate_float_bits_08008c30(FUNC_08008640(convert_to_big_endian_08008590(hash_value), DAT_08002808, DAT_0800280c), 0);\n                    }\n                    else {\n                        for (int i = 0; i < exponent_value; i++) {\n                            hash_value = FUNC_08008eec(hash_value, DAT_08002810);\n                        }\n                        float_bits = calculate_float_bits_08008c30(convert_to_big_endian_08008590(hash_value), 0);\n                    }\n                }\n                if (is_negative) {\n                    *output_value = float_bits ^ 0x80000000;\n                }\n                else {\n                    *output_value = float_bits;\n                }\n                output_ptr = (char *)current_ptr - input_offset - 1;\n                *input_buffer = output_ptr;\n                return 1;\n            }\n        }\n        current_char = *(++current_ptr);\n    }\n}\n",
            "called": [
                "FUN_08008590",
                "FUN_08008c30",
                "FUN_08008640",
                "FUN_08009214",
                "FUN_08008e3c",
                "FUN_08008eec"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002638",
            "calling": [
                "FUN_0800184c",
                "FUN_08003b98"
            ],
            "imported": false,
            "current_name": "parse_input_08002638_08002638"
        },
        "FUN_080051b4": {
            "renaming": {
                "FUN_080051b4": "check_and_print_settings_080051b4",
                "iVar1": "is_valid_data",
                "auStack_18": "data_buffer",
                "local_9": "current_checksum_index",
                "is_data_valid_08004dd2": "is_data_valid",
                "wait_for_bits_to_set_08004030": "wait_for_bits_to_set",
                "write_to_memory_and_checksum_08004c2a_08004c48": "write_to_memory_and_update_checksum",
                "print_settings_08004250": "print_settings",
                "is_valid_checksum_08004d7c": "is_valid_checksum"
            },
            "code": "void check_and_print_settings_080051b4(void)\n{\n  int is_valid_data;\n  undefined data_buffer [15];\n  byte current_checksum_index;\n\n  is_valid_data = is_data_valid();\n  if (is_valid_data == 0) {\n    wait_for_bits_to_set(10);\n    write_to_memory_and_update_checksum(1);\n    print_settings();\n  }\n  for (current_checksum_index = 0; current_checksum_index < 8; current_checksum_index++) {\n    is_valid_data = is_valid_checksum(current_checksum_index, data_buffer);\n    if (is_valid_data == 0) {\n      wait_for_bits_to_set(10);\n    }\n  }\n  return;\n}",
            "called": [
                "FUN_08004250",
                "FUN_08004c48",
                "FUN_08004d7c",
                "FUN_08004030",
                "FUN_08004dd2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080051b4",
            "calling": [
                "FUN_08001ddc"
            ],
            "imported": false,
            "current_name": "check_and_print_settings_080051b4"
        },
        "FUN_080098d0": {
            "renaming": {
                "FUN_080098d0": "calculate_result_and_check_input_080098d0",
                "param_1": "input_1",
                "param_2": "input_2",
                "cVar1": "input_char",
                "uVar2": "result",
                "iVar3": "end_of_string_check",
                "puVar4": "memory_location_1",
                "piVar5": "memory_location_2",
                "local_50": "counter_1",
                "local_4c": "counter_2",
                "local_48": "counter_3",
                "uStack_44": "stack_value_1",
                "local_40": "counter_4",
                "uStack_3c": "stack_value_2",
                "local_38": "counter_5",
                "local_30": "input_validity_check"
            },
            "code": "undefined4 calculate_result_and_check_input_080098d0(undefined4 input_1, undefined4 input_2)\n{\n  char input_char;\n  undefined4 result;\n  int input_validity_check;\n  undefined4 *memory_location_1;\n  int *memory_location_2;\n  undefined4 counter_1;\n  undefined *counter_2;\n  undefined4 counter_3;\n  undefined4 stack_value_1;\n  undefined4 counter_4;\n  undefined4 stack_value_2;\n  undefined8 counter_5;\n  int end_of_string_check;\n  \n  result = calculate_result_0800a1bc();\n  input_char = *PTR_DAT_08009988;\n  if (((input_char == -1) || (input_validity_check = is_valid_input_08008b74(input_1,input_2,input_1,input_2), input_validity_check != 0))\n     || (end_of_string_check = is_end_of_string_08008b24(input_1,input_2,0,0), end_of_string_check == 0)) {\n    return result;\n  }\n  counter_1 = 1;\n  counter_2 = PTR_DAT_0800998c;\n  counter_3 = input_1;\n  stack_value_1 = input_2;\n  counter_4 = input_1;\n  stack_value_2 = input_2;\n  if (input_char == '\\0') {\n    counter_5 = 0;\nLAB_0800996c:\n    end_of_string_check = return_zero_0800b2e0(&counter_1);\n    if (end_of_string_check != 0) goto joined_r0x0800997a;\n  }\n  else {\n    counter_5 = FUNC_08008894(0,0,0,0);\n    if (input_char != '\\x02') goto LAB_0800996c;\n  }\n  memory_location_1 = (undefined4 *)get_value_from_memory_0800b3dc();\n  *memory_location_1 = 0x21;\njoined_r0x0800997a:\n  if (input_validity_check != 0) {\n    memory_location_2 = (int *)get_value_from_memory_0800b3dc();\n    *memory_location_2 = input_validity_check;\n  }\n  return (undefined4)counter_5;\n}",
            "called": [
                "FUN_08008b74",
                "FUN_0800a1bc",
                "FUN_08008b24",
                "FUN_0800b2e0",
                "FUN_08008894",
                "FUN_0800b3dc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080098d0",
            "calling": [
                "FUN_08001994",
                "FUN_080005b4",
                "FUN_08003004",
                "FUN_08002978"
            ],
            "imported": false,
            "current_name": "calculate_result_and_check_input_080098d0"
        },
        "FUN_08005c30": {
            "renaming": {
                "FUN_08005c30": "check_param_is_valid_08005c30",
                "param_1": "param_value",
                "bVar1": "is_valid",
                "DAT_08005c70": "PTR_DAT_08005c70",
                "set_byte_in_memory_08005bdc": "set_memory_byte_08005bdc",
                "*DAT_08005c70": "*PTR_DAT_08005c70"
            },
            "code": "bool check_param_is_valid_08005c30(int param_value)\n{\n  bool is_valid = param_value - 1U < 0x1000000;\n  if (is_valid) {\n    DAT_08005c70[1] = param_value - 1;\n    set_memory_byte_08005bdc(0xffffffff,0xf);\n    DAT_08005c70[2] = 0;\n    *DAT_08005c70 = 7;\n  }\n  return !is_valid;\n}",
            "called": [
                "FUN_08005bdc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005c30",
            "calling": [
                "FUN_0800618c"
            ],
            "imported": false,
            "current_name": "check_param_is_valid_08005c30"
        },
        "FUN_0800b51c": {
            "renaming": {
                "FUN_0800b51c": "do_nothing_0800b51c"
            },
            "code": "\nvoid do_nothing_0800b51c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800b51c",
            "calling": [
                "FUN_0800b524"
            ],
            "imported": false,
            "current_name": "do_nothing_0800b51c"
        },
        "FUN_0800056c": {
            "renaming": {
                "FUN_0800056c": "convert_and_calculate_float_bits_0800056c",
                "param_1": "float_bits",
                "uVar1": "big_endian",
                "convert_to_big_endian_08008590": "convert_to_big_endian",
                "FUNC_08008640": "convert_with_constants",
                "DAT_080005a8": "constant_1",
                "DAT_080005ac": "constant_2",
                "calculate_float_bits_08008c30": "calculate_float_bits"
            },
            "code": "int convert_and_calculate_float_bits_0800056c(int float_bits){\\n  if (PTR_DAT_080005b0[3] != \"\\0\") {\\n    int big_endian = convert_to_big_endian(float_bits);\\n    int converted_val = FUNC_08008640((int)big_endian,(int)((ulonglong)big_endian >> 0x20),DAT_080005a8,DAT_080005ac);\\n    float_bits = calculate_float_bits(converted_val,(int)((ulonglong)converted_val >> 0x20));\\n  }\\n  return float_bits;\\n}",
            "called": [
                "FUN_08008590",
                "FUN_08008c30",
                "FUN_08008640"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800056c",
            "calling": [
                "FUN_080005b4"
            ],
            "imported": false,
            "current_name": "convert_and_calculate_float_bits_0800056c"
        },
        "FUN_08002f24": {
            "renaming": {
                "FUN_08002f24": "copy_and_increment_and_write_to_memory_08002f24",
                "PTR_DAT_08002f3c": "memory_pointer",
                "copy_and_increment_08002ef0": "copy_and_increment",
                "write_memory_with_byte_pattern_0800b430": "write_memory_with_byte_pattern"
            },
            "code": "void copy_and_increment_and_write_to_memory_08002f24(void)\n{\n  copy_and_increment();\n  write_memory_with_byte_pattern(PTR_DAT_08002f3c, 0, 0x1c);\n  return;\n}",
            "called": [
                "FUN_08002ef0",
                "FUN_0800b430"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002f24",
            "calling": [
                "FUN_08001ddc"
            ],
            "imported": false,
            "current_name": "copy_and_increment_and_write_to_memory_08002f24"
        },
        "FUN_0800981c": {
            "renaming": {
                "FUN_0800981c": "calculate_hypotenuse_0800981c",
                "param_1": "x1",
                "param_2": "y1",
                "param_3": "x2",
                "param_4": "y2",
                "cVar1": "calculation_type",
                "puVar2": "data_pointer",
                "iVar3": "status",
                "puVar4": "value_pointer",
                "piVar5": "memory_pointer",
                "uVar6": "result",
                "local_50": "parameter_1",
                "puStack_4c": "data_pointer",
                "local_48": "parameter_2",
                "uStack_44": "parameter_3",
                "local_40": "parameter_4",
                "uStack_3c": "unused_parameter",
                "local_38": "unused_parameter",
                "uStack_34": "unused_parameter",
                "local_30": "sign_bit"
            },
            "code": "undefined8 calculate_hypotenuse_0800981c(undefined4 x1, undefined4 y1, undefined4 x2, undefined4 y2) {\n  char calculation_type;\n  undefined *data_pointer;\n  int sign_bit;\n  undefined8 result;\n  undefined4 *value_pointer;\n  int *memory_pointer;\n  undefined4 parameter_1;\n  undefined4 parameter_2;\n  undefined4 parameter_3;\n  undefined4 parameter_4;\n  int status;\n  data_pointer = PTR_DAT_080098cc;\n  result = FUNC_08009b24();\n  if (*data_pointer == -1) {\n    return result;\n  }\n  sign_bit = set_sign_bit_0800b2d4();\n  if (sign_bit != 0) {\n    return result;\n  }\n  status = set_sign_bit_0800b2d4(x1, y1);\n  if (status == 0) {\n    return result;\n  }\n  status = set_sign_bit_0800b2d4(x2, y2);\n  if (status == 0) {\n    return result;\n  }\n  calculation_type = *data_pointer;\n  parameter_1 = 3;\n  data_pointer = PTR_s_hypot_080098c0;\n  parameter_2 = x1;\n  parameter_3 = y1;\n  parameter_4 = x2;\n  if (calculation_type == '\\0') {\n    parameter_4 = y2;\n    parameter_3 = x2;\n    parameter_2 = y1;\n    parameter_1 = 0xe0000000;\n    value_pointer = (undefined4 *)get_value_from_memory_0800b3dc();\n    *value_pointer = 0x22;\n  }\n  else {\n    if (calculation_type == '\\x02') {\n      parameter_4 = y2;\n      parameter_3 = x2;\n      parameter_2 = y1;\n      parameter_1 = 0;\n    }\n  }\n  status = return_zero_0800b2e0(&parameter_1);\n  if (status != 0) {\n    goto LAB_08009896;\n  }\n  result = CONCAT44(DAT_080098c4, 0);\n  if (sign_bit != 0) {\n    memory_pointer = (int *)get_value_from_memory_0800b3dc();\n    result = CONCAT44(DAT_080098c4, 0);\n    *memory_pointer = sign_bit;\n  }\n  return result;\n}",
            "called": [
                "FUN_0800b2d4",
                "FUN_0800b2e0",
                "FUN_0800b3dc",
                "FUN_08009b24"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800981c",
            "calling": [
                "FUN_080005b4",
                "FUN_08001f00"
            ],
            "imported": false,
            "current_name": "calculate_hypotenuse_0800981c"
        },
        "FUN_080059b4": {
            "renaming": {
                "FUN_080059b4": "set_flags_and_parameters_080059b4",
                "DAT_080059f4": "data_ptr",
                "is_valid_number_08006d72": "is_valid_number",
                "set_parameter_08006ce0": "set_parameter",
                "do_nothing_08005a50": "do_nothing"
            },
            "code": "void set_flags_and_parameters_080059b4(void)\n{\n    int* DAT_080059f4 = DAT_080059f4;\n    *DAT_080059f4 |= 0x200;\n    *DAT_080059f4 |= 0x400;\n    *DAT_080059f4 |= 0x100;\n    is_valid_number(16000);\n    set_parameter(3);\n    do_nothing();\n}\n",
            "called": [
                "FUN_08005a50",
                "FUN_08006d72",
                "FUN_08006ce0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080059b4",
            "calling": [
                "FUN_08007540"
            ],
            "imported": false,
            "current_name": "set_flags_and_parameters_080059b4"
        },
        "FUN_08006c04": {
            "renaming": {
                "FUN_08006c04": "extract_bits_08006c04",
                "param_1": "input",
                "param_2": "num_bits",
                "param_3": "bits_above",
                "param_4": "bits_below",
                "uVar1": "bits_above_mask",
                "*param_3": "*bits_above",
                "*param_4": "*bits_below",
                "1 << (uVar1 & 0xff) - 1U & param_1 >> (param_2 & 0xff)": "(input >> bits_to_shift) & bits_above_mask",
                "1 << (param_2 & 0xff) - 1U & param_1": "input & bits_below_mask",
                "param_2 & 0xff": "bits_to_shift"
            },
            "code": "void extract_bits_08006c04(uint input, uint num_bits, uint *bits_above, uint *bits_below)\n{\n    uint bits_to_shift = num_bits & 7;\n    uint bits_above_mask = (bits_to_shift > 3) ? 0xF : (1 << bits_to_shift) - 1;\n    uint bits_below_mask = (bits_to_shift + 4 < 7) ? (1 << (bits_to_shift + 4)) - 1 : 0;\n    *bits_above = (input >> bits_to_shift) & bits_above_mask;\n    *bits_below = input & bits_below_mask;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006c04",
            "calling": [
                "FUN_08006d98"
            ],
            "imported": false,
            "current_name": "extract_bits_08006c04"
        },
        "FUN_08002e08": {
            "renaming": {
                "FUN_08002e08": "calculate_hash_and_values_08002e08_08002e08",
                "uVar1": "first_value",
                "uVar2": "second_value",
                "puVar3": "current_ptr",
                "local_18": "previous_ptr",
                "local_11": "current_char"
            },
            "code": "void calculate_hash_and_values_08002e08_08002e08(void)\\n{\\n  undefined4 first_value;\\n  undefined4 second_value;\\n  undefined *current_ptr;\\n  undefined *previous_ptr;\\n  byte current_char;\\n  \\n  current_char = *PTR_DAT_08002ed0;\\n  previous_ptr = (undefined *)0x0;\\n  while (current_char != *PTR_DAT_08002ed8) {\\n    current_ptr = PTR_DAT_08002ed4 + (uint)current_char * 0x40;\\n    if ((previous_ptr != (undefined *)0x0) && ((previous_ptr[0x24] != \"\\0\" || (current_ptr[0x24] != \"\\0\")))) {\\n      first_value = FUNC_08009054(*(undefined4 *)(previous_ptr + 0x18),*(undefined4 *)(previous_ptr + 0x14));\\n      second_value = FUNC_08009054(*(undefined4 *)(current_ptr + 0x18),*(undefined4 *)(previous_ptr + 0x14));\\n      calculate_hash_and_values_08002c18(previous_ptr,first_value,second_value);\\n      previous_ptr[0x24] = 0;\\n    }\\n    current_char = increment_char_and_reset_if_twelve_08002870(current_char);\\n    previous_ptr = current_ptr;\\n  }\\n  first_value = FUNC_08009054(*(undefined4 *)(previous_ptr + 0x18),*(undefined4 *)(previous_ptr + 0x14));\\n  second_value = FUNC_08009054(0,*(undefined4 *)(previous_ptr + 0x14));\\n  calculate_hash_and_values_08002c18(previous_ptr,first_value,second_value);\\n  previous_ptr[0x24] = 0;\\n  return;\\n}",
            "called": [
                "FUN_08009054",
                "FUN_08002870",
                "FUN_08002c18"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002e08",
            "calling": [
                "FUN_08002edc"
            ],
            "imported": false,
            "current_name": "calculate_hash_and_values_08002e08_08002e08"
        },
        "FUN_08006680": {
            "renaming": {
                "FUN_08006680": "calculate_division_rate_08006680",
                "uVar1": "division_rate",
                "uVar2": "leading_zeroes",
                "PTR_DAT_080066c8": "ptr_dat",
                "DAT_080066c4": "dat",
                "ptr_dat_index": "ptr_dat_index"
            },
            "code": "uint calculate_division_rate_08006680(void)\n{\n  uint division_rate = calculate_division_rate_08006680_08006628();\n  uint leading_zeroes = count_leading_zeroes(0x380000);\n  uint PTR_DAT_080066c8_index = (*(uint *)(DAT_080066c4 + 8) & 0x1c00) >> (leading_zeroes & 0xff);\n  return division_rate >> PTR_DAT_080066c8[PTR_DAT_080066c8_index];\n}",
            "called": [
                "FUN_08006628"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006680",
            "calling": [
                "FUN_08007f54"
            ],
            "imported": false,
            "current_name": "calculate_division_rate_08006680"
        },
        "FUN_08000340": {
            "renaming": {
                "FUN_08000340": "write_to_memory_08000340",
                "param_1": "memory_location",
                "param_2": "value",
                "PTR_DAT_0800036c": "memory_is_initialized",
                "write_memory_with_byte_pattern_080002f0": "initialize_memory",
                "PTR_DAT_08000370": "memory_array"
            },
            "code": "void write_to_memory_08000340(uint memory_location, undefined value) {\n  if (*(int *)PTR_DAT_0800036c == 0) {\n    initialize_memory();\n  }\n  PTR_DAT_08000370[memory_location & 0x3ff] = value;\n  return;\n}",
            "called": [
                "FUN_080002f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000340",
            "calling": [
                "FUN_08000374",
                "FUN_08004c2a"
            ],
            "imported": false,
            "current_name": "write_to_memory_08000340"
        },
        "thunk_FUN_08009990": {
            "renaming": {
                "thunk_FUN_08009990": "calculate_result_thunk_08009990",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "iVar1": "difference",
                "uVar2": "result",
                "uVar3": "mask",
                "uVar4": "value_1",
                "uVar5": "value_2",
                "uVar6": "combined_value",
                "DAT_08009b04": "constant_1",
                "DAT_08009b00": "constant_2",
                "DAT_08009b18": "constant_3",
                "FUNC_080082d4": "function_1",
                "FUNC_0800af78": "function_2",
                "DAT_08009af0": "constant_4",
                "DAT_08009af8": "constant_5",
                "DAT_08009b10": "constant_6",
                "PTR_DAT_08009b20": "pointer_1",
                "PTR_DAT_08009b1c": "pointer_2",
                "DAT_08009b08": "constant_7",
                "DAT_08009ae8": "constant_8",
                "DAT_08009aec": "constant_9",
                "FUNC_080082d0": "function_3",
                "SCARRY4": "SCARRY4",
                "FUNC_08008894": "function_4",
                "do_nothing_0800b2cc": "do_nothing_0800b2cc"
            },
            "code": "uint calculate_result_thunk_08009990(uint input_1, uint input_2, uint input_3, uint input_4)\n{\n  int difference;\n  undefined4 result;\n  uint mask = 0x7fffffff;\n  uint value_1 = input_4 & mask;\n  uint value_2 = input_2 & mask;\n  undefined8 combined_value = CONCAT44(DAT_08009b04,DAT_08009b00);\n  \n  if ((DAT_08009b18 < (value_1 | (-input_3 | input_3) >> 0x1f)) || (DAT_08009b18 < (value_2 | (-input_1 | input_1) >> 0x1f))) {\n    value_1 = FUNC_080082d4(input_3, input_4, input_1, input_2);\n  }\n  else {\n    if ((input_4 + 0xc0100000 | input_3) == 0) {\n      value_1 = FUNC_0800af78();\n      return value_1;\n    }\n    uint shift_value = (int)input_4 >> 0x1e & 2U | input_2 >> 0x1f;\n    if ((value_2 | input_1) == 0) {\n      value_1 = DAT_08009af0;\n      if ((shift_value != 2) && (value_1 = input_1, shift_value == 3)) {\n        value_1 = DAT_08009af8;\n      }\n    }\n    else {\n      if ((value_1 | input_3) != 0) {\n        if (value_1 == DAT_08009b18) {\n          shift_value = shift_value - 1;\n          if (value_2 == value_1) {\n            if (2 < shift_value) {\n              return DAT_08009b10;\n            }\n            return *(uint *)(PTR_DAT_08009b20 + shift_value * 8);\n          }\n          if (shift_value < 3) {\n            return *(uint *)(PTR_DAT_08009b1c + shift_value * 8);\n          }\n          return 0;\n        }\n        if (value_2 != DAT_08009b18) {\n          difference = (int)(value_2 - value_1) >> 0x14;\n          if ((int)(value_2 - value_1) < 0x3d00000) {\n            if (((int)input_4 < 0) && (difference + 0x3c < 0 != SCARRY4(difference,0x3c))) {\n              combined_value = 0;\n            }\n            else {\n              FUNC_08008894(input_1, input_2, input_3, input_4, input_4);\n              do_nothing_0800b2cc();\n              combined_value = FUNC_0800af78();\n            }\n          }\n          result = (undefined4)((ulonglong)combined_value >> 0x20);\n          value_1 = (uint)combined_value;\n          if (shift_value == 1) {\n            return value_1;\n          }\n          if (shift_value == 2) {\n            combined_value = FUNC_080082d0(value_1, result, DAT_08009ae8, DAT_08009aec);\n            value_1 = FUNC_080082d0(DAT_08009af0, DAT_08009af4, (int)combined_value, (int)((ulonglong)combined_value >> 0x20));\n            return value_1;\n          }\n          if (shift_value == 0) {\n            return value_1;\n          }\n          combined_value = FUNC_080082d0(value_1, result, DAT_08009ae8, DAT_08009aec);\n          value_1 = FUNC_080082d0((int)combined_value, (int)((ulonglong)combined_value >> 0x20), DAT_08009af0, DAT_08009af4);\n          return value_1;\n        }\n      }\n      value_1 = DAT_08009b08;\n      if (-1 < (int)input_2) {\n        value_1 = DAT_08009b00;\n      }\n    }\n  }\n  return value_1;\n}",
            "called": [
                "FUN_08009990"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009818",
            "calling": [
                "FUN_08001f00"
            ],
            "imported": false,
            "current_name": "calculate_result_thunk_08009990"
        },
        "FUN_08004bf4": {
            "renaming": {
                "FUN_08004bf4": "write_to_memory_at_offset_08004bf4",
                "param_1": "address_offset",
                "param_2": "data",
                "write_to_memory_with_checksum_08000374": "write_to_memory_with_checksum",
                "ushort": "unsigned_short",
                "0xd": "ADDRESS_MULTIPLIER",
                "0x200": "BASE_ADDRESS",
                "0xc": "DATA_SIZE"
            },
            "code": "void write_to_memory_at_offset_08004bf4(byte address_offset, undefined4 data, int data_size)\n{\n    ushort address = (ushort)address_offset * 0xd + 0x200;\n    write_to_memory_with_checksum_08000374(address, data, data_size);\n    return;\n}",
            "called": [
                "FUN_08000374"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004bf4",
            "calling": [
                "FUN_080005b4",
                "FUN_08004d7c"
            ],
            "imported": false,
            "current_name": "write_to_memory_at_offset_08004bf4"
        },
        "FUN_08004d7c": {
            "renaming": {
                "<original_function_name>": "is_valid_checksum",
                "param_1": "data_byte",
                "param_2": "data_address",
                "iVar1": "is_valid",
                "is_checksum_valid_080003ec": "is_checksum_valid",
                "write_memory_with_byte_pattern_0800b430": "write_zeroes_to_memory",
                "write_to_memory_at_offset_08004bf4": "write_byte_to_memory",
                "FUN_08004d7c": "is_valid_checksum_08004d7c"
            },
            "code": "bool is_valid_checksum_08004d7c(byte data_byte, undefined4 data_address){\n                     int is_valid = is_checksum_valid(data_address, (ushort)data_byte * 0xd + 0x200, 0xc);\n                     if (is_valid == 0) {\n                         write_zeroes_to_memory(data_address, 0xc);\n                         write_byte_to_memory(data_byte, data_address);\n                     }\n                     return is_valid != 0;\n                  }",
            "called": [
                "FUN_08004bf4",
                "FUN_0800b430",
                "FUN_080003ec"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004d7c",
            "calling": [
                "FUN_080005b4",
                "FUN_080004ac",
                "FUN_080051b4",
                "FUN_080044e8"
            ],
            "imported": false,
            "current_name": "is_valid_checksum_08004d7c"
        },
        "FUN_08009278": {
            "renaming": {
                "FUN_08009278": "convert_param_to_int_08009278",
                "param_1": "param",
                "uVar1": "shift_amount",
                "uVar2": "shifted_amount",
                "shifted_param": "shifted_param",
                "shifted_param2": "shifted_param2",
                "shifted_param3": "shifted_param3"
            },
            "code": "uint convert_param_to_int_08009278(uint param) {\n  uint shifted_param = param << 1;\n  if (shifted_param < 0x7f000000) {\n    return 0;\n  }\n  uint shift_amount = shifted_param >> 0x18;\n  uint shifted_amount = 0x9e - shift_amount;\n  if (shift_amount < 0x9f && shifted_amount != 0) {\n    uint shifted_param2 = param << 8 | 0x80000000;\n    uint shifted_param3 = shifted_param2 >> (shifted_amount & 0xff);\n    if ((param & 0x80000000) != 0) {\n      shifted_param3 = -shifted_param3;\n    }\n    return shifted_param3;\n  }\n  if ((shifted_amount == 0xffffff9f) && ((param & 0x7fffff) != 0)) {\n    return 0;\n  }\n  if ((param & 0x80000000) == 0) {\n    return 0x7fffffff;\n  }\n  return param;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009278",
            "calling": [
                "FUN_08003826",
                "FUN_08003b98"
            ],
            "imported": false,
            "current_name": "convert_param_to_int_08009278"
        },
        "FUN_080004fc": {
            "renaming": {
                "FUN_080004fc": "calculate_and_store_hashes_080004fc",
                "param_1": "file1_hash",
                "param_2": "file2_hash",
                "param_3": "file3_hash",
                "uVar1": "hash1, hash2, hash3"
            },
            "code": "void calculate_and_store_hashes_080004fc(undefined4 file1_hash, undefined4 file2_hash, undefined4 file3_hash)\n{\n  undefined4 hash1 = calculate_hash(file1_hash);\n  undefined4 hash2 = calculate_hash(file2_hash);\n  undefined4 hash3 = calculate_hash(file3_hash);\n  *(undefined4 *)(PTR_DAT_08000568 + 0xc) = FUNC_08009054(hash1,*(undefined4 *)PTR_DAT_08000564);\n  *(undefined4 *)(PTR_DAT_08000568 + 0x10) = FUNC_08009054(hash2,*(undefined4 *)(PTR_DAT_08000564 + 4));\n  *(undefined4 *)(PTR_DAT_08000568 + 0x14) = FUNC_08009054(hash3,*(undefined4 *)(PTR_DAT_08000564 + 8));\n  return;\n}",
            "called": [
                "FUN_08008e44",
                "FUN_08009054"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080004fc",
            "calling": [
                "FUN_0800283a"
            ],
            "imported": false,
            "current_name": "calculate_and_store_hashes_080004fc"
        },
        "FUN_08000220": {
            "renaming": {
                "FUN_08000220": "process_input_char_08000220",
                "param_1": "input_char",
                "process_data_until_termination_or_interrupt_08002fd4": "process_data_until_termination_or_interrupt",
                "do_nothing_080001c8": "do_nothing_case_1",
                "do_nothing_080001e0": "do_nothing_case_2",
                "do_nothing_twice_08000210_08000210": "do_nothing_case_default"
            },
            "code": "void process_input_char_08000220(char input_char)\n{\n    if (input_char != *PTR_DAT_08000264) {\n        process_data_until_termination_or_interrupt();\n        if (input_char == '\\x01') {\n            do_nothing_case_1();\n        }\n        else if (input_char == '\\x02') {\n            do_nothing_case_2();\n        }\n        else {\n            do_nothing_case_default();\n        }\n        *PTR_DAT_08000264 = input_char;\n    }\n    return;\n}",
            "called": [
                "FUN_08002fd4",
                "FUN_080001c8",
                "FUN_08000210",
                "FUN_080001e0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000220",
            "calling": [
                "FUN_080005b4"
            ],
            "imported": false,
            "current_name": "process_input_char_08000220"
        },
        "FUN_08005238": {
            "renaming": {
                "FUN_08005238": "reset_pointer_to_zero_and_return_08005238",
                "PTR_DAT_0800524c": "pointer_to_data",
                "do_nothing_and_return_08005250": "do_nothing_and_return"
            },
            "code": "void reset_pointer_to_zero_and_return_08005238(){\n  *PTR_DAT_0800524c = 0;\n  do_nothing_and_return();\n  return;\n}",
            "called": [
                "FUN_08005250"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005238",
            "calling": [
                "FUN_08001ddc"
            ],
            "imported": false,
            "current_name": "reset_pointer_to_zero_and_return_08005238"
        },
        "FUN_08007da8": {
            "renaming": {
                "FUN_08007da8": "set_flag_and_enable_interrupts_08007da8",
                "puVar1": "flag_ptr",
                "DAT_08007dd4": "flag_data"
            },
            "code": "void set_flag_and_enable_interrupts_08007da8(void)\n{\n  uint *flag_ptr;\n  flag_ptr = DAT_08007dd4;\n  DAT_08007dd4[8] |= 0x10;\n  *flag_ptr |= 1;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007da8",
            "calling": [
                "FUN_08007e08"
            ],
            "imported": false,
            "current_name": "set_flag_and_enable_interrupts_08007da8"
        },
        "FUN_08004148": {
            "renaming": {
                "FUN_08004148": "wait_until_bits_set_alarm_08004148",
                "param_1": "alarm_bit"
            },
            "code": "void wait_until_bits_set_alarm_08004148(char alarm_bit)\n{\n  wait_until_all_bits_are_set_080036c6(PTR_s_ALARM__08004190);\n  if (alarm_bit == -2) {\n    wait_until_all_bits_are_set_080036c6(PTR_s_Abort_during_cycle_08004198);\n  }\n  else if (alarm_bit == -1) {\n    wait_until_all_bits_are_set_080036c6(PTR_s_Hard_limit_08004194);\n  }\n  wait_until_all_bits_are_set_080036c6(PTR_s___MPos__0800419c);\n  do_nothing_08002814(500);\n  return;\n}",
            "called": [
                "FUN_08002814",
                "FUN_080036c6"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004148",
            "calling": [
                "FUN_08003a74"
            ],
            "imported": false,
            "current_name": "wait_until_bits_set_alarm_08004148"
        },
        "FUN_08004940": {
            "renaming": {
                "FUN_08004940": "calculate_and_convert_to_decimal_08004940_08004940",
                "uVar1": "hash_value",
                "uVar2": "index",
                "uVar3": "converted_value",
                "uVar4": "big_endian_value_1",
                "uVar5": "big_endian_value_2",
                "auStack_2c": "stack_array",
                "local_11": "loop_index"
            },
            "code": "void calculate_and_convert_to_decimal_08004940_08004940(void)\n{\n  undefined4 hash_value;\n  uint index;\n  undefined4 converted_value;\n  undefined8 big_endian_value_1;\n  undefined8 big_endian_value_2;\n  undefined4 stack_array[6];\n  byte loop_index;\n  stack_array[3] = *(undefined4 *)(PTR_DAT_08004b88 + 4);\n  stack_array[4] = *(undefined4 *)(PTR_DAT_08004b88 + 8);\n  stack_array[5] = *(undefined4 *)(PTR_DAT_08004b88 + 0xc);\n  if ((byte)PTR_DAT_08004b88[1] < 8) {\n    (*(code *)(&switchD_0800495e::switchdataD_08004964)[(byte)PTR_DAT_08004b88[1]])();\n    return;\n  }\n  wait_until_all_bits_are_set_080036c6(PTR_s__MPos__08004ba8);\n  for (loop_index = 0; loop_index < 3; loop_index++) {\n    hash_value = calculate_hash_08008e44(stack_array[loop_index + 3]);\n    index = (uint)loop_index;\n    hash_value = FUNC_08009054(hash_value,*(undefined4 *)(PTR_DAT_08004bac + (uint)loop_index * 4));\n    stack_array[index] = hash_value;\n    if ((PTR_DAT_08004bac[0x28] & 1) != 0) {\n      big_endian_value_1 = convert_to_big_endian_08008590(stack_array[loop_index]);\n      big_endian_value_1 = FUNC_08008640((int)big_endian_value_1,(int)((ulonglong)big_endian_value_1 >> 0x20),DAT_08004b80,DAT_08004b84);\n      index = (uint)loop_index;\n      converted_value = calculate_float_bits_08008c30((int)big_endian_value_1,(int)((ulonglong)big_endian_value_1 >> 0x20));\n      stack_array[index] = converted_value;\n    }\n    convert_uint_to_decimal_string_08003826(stack_array[loop_index]);\n    wait_until_all_bits_are_set_080036c6(PTR_DAT_08004bb0);\n  }\n  wait_until_all_bits_are_set_080036c6(PTR_s_WPos__08004bb4);\n  for (loop_index = 0; loop_index < 3; loop_index++) {\n    if ((PTR_DAT_08004bac[0x28] & 1) == 0) {\n      converted_value = stack_array[loop_index];\n      hash_value = FUNC_08008cdc(*(undefined4 *)(PTR_DAT_08004bb8 + (loop_index + 8) * 4),\n                           *(undefined4 *)(PTR_DAT_08004bb8 + (loop_index + 10) * 4 + 4));\n      index = (uint)loop_index;\n      hash_value = FUNC_08008cd8(converted_value,hash_value);\n      stack_array[index] = hash_value;\n    }\n    else {\n      big_endian_value_1 = convert_to_big_endian_08008590(stack_array[loop_index]);\n      hash_value = FUNC_08008cdc(*(undefined4 *)(PTR_DAT_08004bb8 + (loop_index + 8) * 4),\n                           *(undefined4 *)(PTR_DAT_08004bb8 + (loop_index + 10) * 4 + 4));\n      big_endian_value_2 = convert_to_big_endian_08008590(hash_value);\n      big_endian_value_2 = FUNC_08008640((int)big_endian_value_2,(int)((ulonglong)big_endian_value_2 >> 0x20),DAT_08004b80,DAT_08004b84);\n      big_endian_value_1 = FUNC_080082d0((int)big_endian_value_1,(int)((ulonglong)big_endian_value_1 >> 0x20),(int)big_endian_value_2,\n                           (int)((ulonglong)big_endian_value_2 >> 0x20));\n      index = (uint)loop_index;\n      converted_value = calculate_float_bits_08008c30((int)big_endian_value_1,(int)((ulonglong)big_endian_value_1 >> 0x20));\n      stack_array[index] = converted_value;\n    }\n    convert_uint_to_decimal_string_08003826(stack_array[loop_index]);\n    if (loop_index < 2) {\n      wait_until_all_bits_are_set_080036c6(PTR_DAT_08004bb0);\n    }\n  }\n  wait_until_all_bits_are_set_080036c6(PTR_DAT_08004bbc);\n  return;\n}",
            "called": [
                "FUN_080082d0",
                "FUN_08008590",
                "FUN_08008c30",
                "FUN_08008e44",
                "FUN_08003826",
                "FUN_08008640",
                "FUN_08008cd8",
                "FUN_08009054",
                "FUN_08008cdc",
                "FUN_080036c6"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004940",
            "calling": [
                "FUN_08003a74"
            ],
            "imported": false,
            "current_name": "calculate_and_convert_to_decimal_08004940_08004940"
        },
        "FUN_08008a74": {
            "renaming": {
                "FUN_08008a74": "check_params_08008a74",
                "param_1": "a",
                "param_2": "b",
                "param_3": "c",
                "param_4": "d",
                "uVar1": "xor_result",
                "bVar2": "is_a_b_zero",
                "bVar3": "is_d_less_than_b"
            },
            "code": "uint check_params_08008a74(uint a, uint b, uint c, uint d)\n{\n    bool is_a_b_zero = (a | (b << 1)) == 0;\n    bool is_c_d_zero = (c | (d << 1)) == 0;\n    bool is_b_d_same = b == d;\n    bool is_a_c_same = a == c;\n    if (((int)(b << 1) >> 0x15 == -1 || (int)(d << 1) >> 0x15 == -1) && (((int)(b << 1) >> 0x15 == -1 && !is_a_b_zero) || ((int)(d << 1) >> 0x15 == -1 && !is_c_d_zero))))\n    {\n        return 1;\n    }\n    if (!is_a_b_zero && !is_c_d_zero && !is_b_d_same && !is_a_c_same)\n    {\n        uint xor_result = b ^ d;\n        bool is_xor_result_zero = xor_result == 0;\n        if (-1 < (int)xor_result)\n        {\n            is_xor_result_zero = is_b_d_same;\n        }\n        bool is_d_less_than_b = -1 < (int)xor_result && d <= b;\n        if (is_xor_result_zero)\n        {\n            is_d_less_than_b = c <= a;\n        }\n        int result = (int)d >> 0x1f;\n        if (!is_d_less_than_b)\n        {\n            result = ~result;\n        }\n        return result | 1;\n    }\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008a74",
            "calling": [
                "FUN_08008b00"
            ],
            "imported": false,
            "current_name": "check_params_08008a74"
        },
        "FUN_08002fd4": {
            "renaming": {
                "FUN_08002fd4": "process_data_until_termination_or_interrupt_08002fd4",
                "iVar1": "next_data",
                "get_data_08002f74": "get_next_data",
                "PTR_DAT_08003000": "data_pointer",
                "process_data_08003a74_08003a74": "process_data"
            },
            "code": "void process_data_until_termination_or_interrupt_08002fd4() {\\n  int data = get_next_data();\\n  while (data != 0 || (PTR_DAT_08003000[1] == \"\\x03\")) {\\n    process_data();\\n    if (*PTR_DAT_08003000 != \"\\0\") {\\n      return;\\n    }\\n    data = get_next_data();\\n  }\\n  return;\\n}",
            "called": [
                "FUN_08002f74",
                "FUN_08003a74"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002fd4",
            "calling": [
                "FUN_0800525c",
                "FUN_080005b4",
                "FUN_08000220",
                "FUN_080024c4",
                "FUN_08002408"
            ],
            "imported": false,
            "current_name": "process_data_until_termination_or_interrupt_08002fd4"
        },
        "FUN_08002408": {
            "renaming": {
                "FUN_08002408": "process_data_and_find_value_greater_than_sum_of_param_and_pointer_08002408",
                "param_1": "input",
                "uVar1": "shifted_calculated_hash",
                "uVar2": "data",
                "uVar3": "hash_value",
                "uVar4": "long_data",
                "local_12": "shifted_data"
            },
            "code": "void process_data_and_find_value_greater_than_sum_of_param_and_pointer_08002408(uint32_t input)\\n{\\n  uint32_t hash_input = 0x32 * input;\\n  uint32_t data = FUNC_08008eec(input, DAT_080024b8);\\n  uint32_t big_endian_data = convert_to_big_endian_08008590(data);\\n  uint64_t long_data = calculate_long_long_080094c0((int)big_endian_data,(int)((uint64_t)big_endian_data >> 0x20));\\n  uint16_t shifted_data = calculate_shifted_value_08008bf0((int)long_data,(int)((uint64_t)long_data >> 0x20));\\n  process_data_until_termination_or_interrupt_08002fd4();\\n  uint32_t hash_input_2 = FUNC_08008eec(input, DAT_080024bc);\\n  uint32_t hash_value = calculate_hash_08008e44(hash_input);\\n  uint32_t calculated_hash = FUNC_08008cd8(hash_input_2, hash_value);\\n  uint32_t big_endian_calculated_hash = convert_to_big_endian_08008590(calculated_hash);\\n  uint64_t long_calculated_hash = calculate_long_long_080094c0((int)big_endian_calculated_hash,(int)((uint64_t)big_endian_calculated_hash >> 0x20));\\n  uint16_t shifted_calculated_hash = calculate_shifted_value_08008bf0((int)long_calculated_hash,(int)((uint64_t)long_calculated_hash >> 0x20));\\n  do_nothing_08002814(shifted_calculated_hash);\\n  ushort local_12 = shifted_data;\\n  while ((local_12 != 0 && (process_data_08003a74_08003a74(), *PTR_DAT_080024c0 == \"\\0\"))) {\\n    find_value_greater_than_sum_of_param_and_pointer_080002a0(0x32);\\n    local_12 = local_12 - 1;\\n  }\\n  return;\\n}",
            "called": [
                "FUN_080094c0",
                "FUN_080002a0",
                "FUN_08008590",
                "FUN_08002fd4",
                "FUN_08008e44",
                "FUN_08008bf0",
                "FUN_08008cd8",
                "FUN_08002814",
                "FUN_08008eec",
                "FUN_08003a74"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002408",
            "calling": [
                "FUN_080005b4"
            ],
            "imported": false,
            "current_name": "process_data_and_find_value_greater_than_sum_of_param_and_pointer_08002408"
        },
        "FUN_08002a94": {
            "renaming": {
                "FUN_08002a94": "decrypt_data_08002a94",
                "*PTR_DAT_08002af0": "current_char_ptr",
                "*PTR_DAT_08002af8": "end_char_ptr",
                "local_18": "previous_ptr",
                "local_14": "current_ptr",
                "local_9": "current_char",
                "PTR_DAT_08002af4": "result_ptr"
            },
            "code": "void decrypt_data_08002a94(void)\n{\n  undefined *current_ptr;\n  undefined *previous_ptr;\n  undefined *PTR_DAT_08002af4;\n  byte current_char;\n  current_char = *PTR_DAT_08002af0;\n  previous_ptr = (undefined *)0x0;\n  PTR_DAT_08002af4 = (undefined *)0x0;\n  while (current_char != *PTR_DAT_08002af8) {\n    current_char = decrement_character_08002896(current_char);\n    previous_ptr = PTR_DAT_08002af4;\n    PTR_DAT_08002af4 = PTR_DAT_08002af4 + (uint)current_char * 0x40;\n    calculate_result_and_check_input_080029d8(PTR_DAT_08002af4, previous_ptr, current_ptr);\n  }\n  return;\n}",
            "called": [
                "FUN_08002896",
                "FUN_080029d8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002a94",
            "calling": [
                "FUN_08002edc"
            ],
            "imported": false,
            "current_name": "decrypt_data_08002a94"
        },
        "FUN_08003618": {
            "renaming": {
                "FUN_08003618": "update_hash_and_decrypt_result_08003618",
                "param_1": "input",
                "PTR_DAT_08003698": "g_data_ptr",
                "PTR_DAT_08003694": "g_data_index",
                "calculate_hash_08008e44": "calculate_hash",
                "FUNC_08008eec": "func_a",
                "calculate_hash_08008e44_1": "calculate_hash",
                "FUNC_08009054": "func_b"
            },
            "code": "void update_hash_and_decrypt_result_08003618(undefined4 input)\n{\n    byte index = *PTR_DAT_08003694;\n    uint offset = index * 0x40;\n    uint hash_offset = offset + 0x20;\n    uint input_offset = offset + 0x10;\n    uint zero_offset = offset + 0x18;\n    uint one_offset = offset + 0x24;\n    uint two_offset = offset + 0x25;\n    uint hash = *(uint *)(PTR_DAT_08003698 + hash_offset);\n    uint input_hash = calculate_hash(input);\n    hash = func_a(hash, input_hash);\n    uint stored_input_hash = calculate_hash(*(uint *)(PTR_DAT_08003698 + input_offset));\n    hash = func_b(hash, stored_input_hash);\n    *(uint *)(PTR_DAT_08003698 + hash_offset) = hash;\n    *(uint *)(PTR_DAT_08003698 + input_offset) = input;\n    *(uint *)(PTR_DAT_08003698 + zero_offset) = 0;\n    *(uint *)(PTR_DAT_08003698 + one_offset) = 1;\n    PTR_DAT_08003698[two_offset] = 0;\n    decrypt_and_update_result_and_calculate_hash();\n}\n",
            "called": [
                "FUN_08008e44",
                "FUN_08009054",
                "FUN_08002edc",
                "FUN_08008eec"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003618",
            "calling": [
                "FUN_080058a0"
            ],
            "imported": false,
            "current_name": "update_hash_and_decrypt_result_08003618"
        },
        "FUN_0800522c": {
            "renaming": {
                "FUN_0800522c": "do_nothing_0800522c"
            },
            "code": "\nvoid do_nothing_0800522c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800522c",
            "calling": [
                "FUN_0800525c"
            ],
            "imported": false,
            "current_name": "do_nothing_0800522c"
        },
        "FUN_0800af78": {
            "renaming": {
                "FUN_0800af78": "FUNC_0800af78"
            },
            "code": "\nint FUNC_0800af78(int param_1,uint param_2)\n\n{\n  undefined *puVar1;\n  int iVar2;\n  undefined4 uVar3;\n  undefined4 uVar4;\n  undefined4 uVar5;\n  undefined4 uVar6;\n  undefined4 uVar7;\n  uint uVar8;\n  undefined8 uVar9;\n  undefined8 uVar10;\n  undefined4 local_2c;\n  \n  uVar9 = CONCAT44(param_2,param_1);\n  uVar8 = param_2 & 0x7fffffff;\n  if (DAT_0800b298 < (int)uVar8) {\n    if ((uVar8 != DAT_0800b29c && (int)DAT_0800b29c <= (int)uVar8) ||\n       ((iVar2 = DAT_0800b2a8, uVar8 == DAT_0800b29c && (param_1 != 0)))) {\n      iVar2 = FUNC_080082d4(param_1,param_2,param_1);\n      return iVar2;\n    }\n  }\n  else {\n    if (DAT_0800b2ac < (int)uVar8) {\n      uVar9 = do_nothing_0800b2cc();\n      uVar6 = (undefined4)((ulonglong)uVar9 >> 0x20);\n      uVar3 = (undefined4)uVar9;\n      if (DAT_0800b2bc < (int)uVar8) {\n        if ((int)uVar8 < DAT_0800b2c0) {\n          uVar9 = FUNC_080082d0(uVar3,uVar6,0,DAT_0800b2c4);\n          uVar10 = FUNC_08008640(uVar3,uVar6,0,DAT_0800b2c4);\n          uVar10 = FUNC_080082d4((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),0,DAT_0800b2b8);\n          uVar9 = FUNC_08008894((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),(int)uVar10,\n                               (int)((ulonglong)uVar10 >> 0x20));\n          iVar2 = 2;\n        }\n        else {\n          uVar9 = FUNC_08008894(0,DAT_0800b2c8,uVar3,uVar6);\n          iVar2 = 3;\n        }\n      }\n      else if (DAT_0800b2bc + -0xd0000 < (int)uVar8) {\n        uVar9 = FUNC_080082d0(uVar3,uVar6,0,DAT_0800b2b8);\n        uVar10 = FUNC_080082d4(uVar3,uVar6,0,DAT_0800b2b8);\n        uVar9 = FUNC_08008894((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),(int)uVar10,\n                             (int)((ulonglong)uVar10 >> 0x20));\n        iVar2 = 1;\n      }\n      else {\n        uVar9 = FUNC_080082d4(uVar3,uVar6,uVar3,uVar6);\n        uVar9 = FUNC_080082d0((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),0,DAT_0800b2b8);\n        uVar10 = FUNC_080082d4(uVar3,uVar6,0,0x40000000);\n        uVar9 = FUNC_08008894((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),(int)uVar10,\n                             (int)((ulonglong)uVar10 >> 0x20));\n        iVar2 = 0;\n      }\n    }\n    else {\n      if ((int)uVar8 <= DAT_0800b2ac + -0x1bc0000) {\n        uVar10 = FUNC_080082d4(param_1,param_2,DAT_0800b290,DAT_0800b294);\n        iVar2 = is_end_of_string_08008b60((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),0,DAT_0800b2b8);\n        if (iVar2 != 0) {\n          return param_1;\n        }\n      }\n      iVar2 = -1;\n    }\n    local_2c = (undefined4)((ulonglong)uVar9 >> 0x20);\n    uVar7 = (undefined4)uVar9;\n    uVar9 = FUNC_08008640(uVar7,local_2c,uVar7);\n    uVar4 = (undefined4)((ulonglong)uVar9 >> 0x20);\n    uVar3 = (undefined4)uVar9;\n    uVar9 = FUNC_08008640(uVar3,uVar4,uVar3,uVar4);\n    uVar5 = (undefined4)((ulonglong)uVar9 >> 0x20);\n    uVar6 = (undefined4)uVar9;\n    uVar9 = FUNC_08008640(uVar6,uVar5,DAT_0800b238,DAT_0800b23c);\n    uVar9 = FUNC_080082d4((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),DAT_0800b240,DAT_0800b244);\n    uVar9 = FUNC_08008640((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),uVar6,uVar5);\n    uVar9 = FUNC_080082d4((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),DAT_0800b248,DAT_0800b24c);\n    uVar9 = FUNC_08008640((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),uVar6,uVar5);\n    uVar9 = FUNC_080082d4((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),DAT_0800b250,DAT_0800b254);\n    uVar9 = FUNC_08008640((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),uVar6,uVar5);\n    uVar9 = FUNC_080082d4((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),DAT_0800b258,DAT_0800b25c);\n    uVar9 = FUNC_08008640((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),uVar6,uVar5);\n    uVar9 = FUNC_080082d4((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),DAT_0800b260,DAT_0800b264);\n    uVar9 = FUNC_08008640((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),uVar3,uVar4);\n    uVar3 = (undefined4)((ulonglong)uVar9 >> 0x20);\n    uVar10 = FUNC_08008640(uVar6,uVar5,DAT_0800b268,DAT_0800b26c);\n    uVar10 = FUNC_080082d0((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),DAT_0800b270,DAT_0800b274);\n    uVar10 = FUNC_08008640((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),uVar6,uVar5);\n    uVar10 = FUNC_080082d0((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),DAT_0800b278,DAT_0800b27c);\n    uVar10 = FUNC_08008640((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),uVar6,uVar5);\n    uVar10 = FUNC_080082d0((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),DAT_0800b280,DAT_0800b284);\n    uVar10 = FUNC_08008640((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),uVar6,uVar5);\n    uVar10 = FUNC_080082d0((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),DAT_0800b288,DAT_0800b28c);\n    uVar10 = FUNC_08008640((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),uVar6,uVar5);\n    uVar6 = (undefined4)((ulonglong)uVar10 >> 0x20);\n    if (iVar2 == -1) {\n      uVar9 = FUNC_080082d4((int)uVar9,uVar3,(int)uVar10,uVar6);\n      uVar9 = FUNC_08008640((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),uVar7,local_2c);\n      iVar2 = FUNC_080082d0(uVar7,local_2c,(int)uVar9,(int)((ulonglong)uVar9 >> 0x20));\n      return iVar2;\n    }\n    uVar9 = FUNC_080082d4((int)uVar9,uVar3,(int)uVar10,uVar6);\n    puVar1 = PTR_DAT_0800b2b0;\n    uVar9 = FUNC_08008640((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),uVar7,local_2c);\n    uVar9 = FUNC_080082d0((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),\n                         *(undefined4 *)(PTR_DAT_0800b2b4 + iVar2 * 8),\n                         *(undefined4 *)((int)(PTR_DAT_0800b2b4 + iVar2 * 8) + 4));\n    uVar9 = FUNC_080082d0((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),uVar7,local_2c);\n    iVar2 = FUNC_080082d0(*(undefined4 *)(puVar1 + iVar2 * 8),\n                         *(undefined4 *)((int)(puVar1 + iVar2 * 8) + 4),(int)uVar9,\n                         (int)((ulonglong)uVar9 >> 0x20));\n    if ((int)param_2 < 0) {\n      return iVar2;\n    }\n  }\n  return iVar2;\n}\n\n",
            "called": [
                "FUN_080082d0",
                "FUN_080082d4",
                "FUN_08008b60",
                "FUN_0800b2cc",
                "FUN_08008640",
                "FUN_08008894"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x0800af78",
            "calling": [
                "FUN_08009990"
            ],
            "imported": false,
            "current_name": "FUNC_0800af78"
        },
        "FUN_08007d08": {
            "renaming": {
                "FUN_08007d08": "initialize_data_08007d08",
                "puVar1": "data"
            },
            "code": "void initialize_data_08007d08(void)\n{\n  uint32_t *data = DAT_08007d9c;\n  set_flags_08007a10(DAT_08007d9c);\n  data[0] = 0x80;\n  data[1] = 0;\n  data[2] = 0;\n  data[3] = 0;\n  data[4] = 0;\n  data[6] = 0x6800;\n  data[7] = 0;\n  data[8] = 0;\n  data[9] = 0;\n  data[10] = (uint32_t)((uint64_t)DAT_08007da4 * (uint64_t)*(uint32_t *)PTR_DAT_08007da0 >> 0x35) - 1;\n  data[0xb] = 199;\n  data[0xd] = 0;\n  data[0xe] = 100;\n  data[0xf] = 0;\n  data[0x10] = 0;\n  data[0x12] = 0;\n  data[0x13] = 0;\n  data[5] = 1;\n  return;\n}",
            "called": [
                "FUN_08007a10"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007d08",
            "calling": [
                "FUN_08007e08"
            ],
            "imported": false,
            "current_name": "initialize_data_08007d08"
        },
        "FUN_080091fc": {
            "renaming": {
                "FUN_080091fc": "concatenate_parameters_and_calculate_sum_080091fc",
                "param_1": "num1",
                "param_2": "num2"
            },
            "code": "void concatenate_parameters_and_calculate_sum_080091fc(int num1, int num2)\n{\n  calculate_concatenated_parameters_08009204_08009204(num2, num1);\n  return;\n}",
            "called": [
                "FUN_08009204"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080091fc",
            "calling": [
                "FUN_08009250",
                "FUN_08009264"
            ],
            "imported": false,
            "current_name": "concatenate_parameters_and_calculate_sum_080091fc"
        },
        "FUN_080058a0": {
            "renaming": {
                "FUN_080058a0": "update_local_value_080058a0",
                "PTR_DAT_080058f0": "ptr_dat_f0",
                "PTR_DAT_080058f4": "ptr_dat_f4",
                "PTR_DAT_080058fc": "ptr_dat_fc",
                "DAT_080058f8": "dat_f8"
            },
            "code": "void update_local_value_080058a0(void)\n{\n    int* PTR_DAT_080058f0 = (int*)PTR_DAT_080058f0;\n    int* PTR_DAT_080058f4 = (int*)PTR_DAT_080058f4;\n    int* PTR_DAT_080058fc = (int*)PTR_DAT_080058fc;\n    int DAT_080058f8 = DAT_080058f8;\n\n    if (*PTR_DAT_080058f0 == 0) {\n        PTR_DAT_080058fc[1] = 0;\n    }\n    else {\n        int* ptr = (int*)(*PTR_DAT_080058f0 + 0x10);\n        int result = *ptr - *(int *)(PTR_DAT_080058f4 + 0x10);\n        update_hash_and_decrypt_result_08003618(result);\n        PTR_DAT_080058f4[7] = 0;\n        calculate_local_value_08005324(PTR_DAT_080058f4[7]);\n        PTR_DAT_080058f4[6] = DAT_080058f8;\n        PTR_DAT_080058f4[4] = 0;\n        PTR_DAT_080058fc[1] = 2;\n    }\n    return;\n}",
            "called": [
                "FUN_08005324",
                "FUN_08003618"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080058a0",
            "calling": [
                "FUN_08003a74"
            ],
            "imported": false,
            "current_name": "update_local_value_080058a0"
        },
        "FUN_080036c6": {
            "renaming": {
                "FUN_080036c6": "wait_until_all_bits_are_set_080036c6",
                "param_1": "message",
                "local_c": "current_char"
            },
            "code": "void wait_until_all_bits_are_set_080036c6(char* message)\n{\n  char* current_char = message;\n  while (*current_char != '\\0') {\n    wait_until_bit_is_set_08008250(*current_char);\n    current_char++;\n  }\n  return;\n}",
            "called": [
                "FUN_08008250"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080036c6",
            "calling": [
                "FUN_08004250",
                "FUN_080046d0",
                "FUN_08004148",
                "FUN_08004940",
                "FUN_0800423c",
                "FUN_08004030",
                "FUN_080041a0",
                "FUN_08004228",
                "FUN_080044e8",
                "FUN_08004900"
            ],
            "imported": false,
            "current_name": "wait_until_all_bits_are_set_080036c6"
        },
        "FUN_08008190": {
            "renaming": {
                "FUN_08008190": "calculate_division_rate_08008190",
                "DAT_08008240": "PTR_data",
                "set_flag_08007ea4": "set_flag",
                "calculate_rate_of_division_08007f54": "calculate_rate_of_division"
            },
            "code": "void calculate_division_rate_08008190(void)\n{\n  uint *data_ptr;\n  data_ptr = DAT_08008240;\n  set_flag(DAT_08008240);\n  data_ptr[3] &= 0xffffdfff;\n  data_ptr[3] &= 0xffff400c | 0xc;\n  data_ptr[4] &= 0xffff8090;\n  data_ptr[5] &= 0xfffff000;\n  *data_ptr &= 0xfffffc00;\n  calculate_rate_of_division(data_ptr,0x1c200);\n  data_ptr[6] = data_ptr[6];\n  data_ptr[3] |= 0x2000;\n  return;\n}",
            "called": [
                "FUN_08007f54",
                "FUN_08007ea4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008190",
            "calling": [
                "FUN_08007540"
            ],
            "imported": false,
            "current_name": "calculate_division_rate_08008190"
        },
        "FUN_080074c8": {
            "renaming": {
                "FUN_080074c8": "activate_sensors_if_needed_080074c8",
                "param_1": "sensor_flags",
                "PTR_DAT_08007518": "sensor_activation_status_1",
                "PTR_DAT_0800751c": "sensor_activation_status_2",
                "activate_sensor_if_not_active_and_set_flag_if_needed_0800195c": "activate_sensor_if_not_active_and_set_flag_if_needed",
                "check_sensor_activation_08003a18": "check_sensor_activation",
                "set_bit_in_short_at_offset_08007402": "set_bit_in_short_at_offset"
            },
            "code": "void activate_sensors_if_needed_080074c8(uint sensor_flags){\n        if((sensor_flags & 0x01) != 0){\n            set_bit_in_short_at_offset(0x3e);\n        }\n        if((*PTR_DAT_08007518 != 0) && ((sensor_flags & 0x1e) != 0)){\n            activate_sensor_if_not_active_and_set_flag_if_needed();\n        }\n        if((*PTR_DAT_0800751c != 0) && ((sensor_flags & 0x80) != 0)){\n            check_sensor_activation(sensor_flags);\n        }\n        return;\n    }",
            "called": [
                "FUN_08007402",
                "FUN_0800195c",
                "FUN_08003a18"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080074c8",
            "calling": [
                "FUN_08007930"
            ],
            "imported": false,
            "current_name": "activate_sensors_if_needed_080074c8"
        },
        "FUN_0800b430": {
            "renaming": {
                "FUN_0800b430": "write_memory_with_byte_pattern_0800b430",
                "param_1": "memory",
                "param_2": "byte_pattern",
                "param_3": "num_bytes",
                "puVar1": "current_word",
                "puVar2": "memory",
                "uVar3": "num_remaining_bytes",
                "uVar4": "pattern_word",
                "bVar5": "is_aligned"
            },
            "code": "void write_memory_with_byte_pattern_0800b430(uint32_t *memory, uint8_t byte_pattern, uint32_t num_bytes) {\n    uint32_t *current_word;\n    uint32_t num_remaining_bytes;\n    uint32_t pattern_word;\n    bool is_aligned = ((uint32_t)memory & 3) == 0;\n\n    if (!is_aligned) {\n        num_remaining_bytes = num_bytes - 1;\n        current_word = memory;\n        if (num_bytes == 0) {\n            return;\n        }\n        while (true) {\n            memory = (uint32_t *)((int)current_word + 1);\n            *(uint8_t *)current_word = byte_pattern;\n            num_bytes = num_remaining_bytes;\n            if (((uint32_t)memory & 3) == 0) {\n                break;\n            }\n            num_remaining_bytes = num_remaining_bytes - 1;\n            current_word = memory;\n            if (num_remaining_bytes == 0) {\n                return;\n            }\n        }\n    }\n\n    if (num_bytes > 3) {\n        pattern_word = (byte_pattern << 24) | (byte_pattern << 16) | (byte_pattern << 8) | byte_pattern;\n        if (num_bytes > 15) {\n            current_word = memory + 4;\n            do {\n                current_word[-4] = pattern_word;\n                current_word[-3] = pattern_word;\n                current_word[-2] = pattern_word;\n                current_word[-1] = pattern_word;\n                current_word = current_word + 4;\n            } while (current_word != (uint32_t *)((int)memory + (num_bytes - 16 & 0xfffffff0) + 0x20));\n            num_remaining_bytes = num_bytes & 0xc;\n            memory = memory + ((num_bytes - 16 >> 4) + 1) * 4;\n            num_bytes &= 0xf;\n            if (num_remaining_bytes == 0) {\n                goto end;\n            }\n        }\n        current_word = (uint32_t *)((num_bytes - 4 & 0xfffffffc) + 4 + (int)memory);\n        do {\n            memory = current_word + 1;\n            *current_word = pattern_word;\n            current_word = memory;\n        } while (current_word != (uint32_t *)((int)memory + (num_bytes & 3)));\n        num_bytes &= 3;\n        memory = current_word;\n    }\n\nend:\n    if (num_bytes != 0) {\n        current_word = memory;\n        do {\n            memory = (uint32_t *)((int)current_word + 1);\n            *(uint8_t *)current_word = byte_pattern;\n            current_word = memory;\n        } while ((uint32_t *)(num_bytes + (int)memory) != current_word);\n    }\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800b430",
            "calling": [
                "FUN_080079c0",
                "FUN_08001994",
                "FUN_080005b4",
                "FUN_080002f0",
                "FUN_080004ac",
                "FUN_08004d7c",
                "FUN_08005814",
                "FUN_080024c4",
                "FUN_08002f24",
                "FUN_08001ddc"
            ],
            "imported": false,
            "current_name": "write_memory_with_byte_pattern_0800b430"
        },
        "FUN_08004030": {
            "renaming": {
                "FUN_08004030": "wait_for_bits_to_set_08004030",
                "param_1": "error_code"
            },
            "code": "void wait_for_bits_to_set_08004030(char error_code) {\n  if (error_code == '\\0') {\n    wait_until_all_bits_are_set_080036c6(PTR_DAT_08004108);\n  }\n  else {\n    switch (error_code) {\n      case '\\x01':\n        wait_until_all_bits_are_set_080036c6(PTR_s_Bad_number_format_08004110);\n        break;\n      case '\\x02':\n        wait_until_all_bits_are_set_080036c6(PTR_s_Expected_command_letter_08004114);\n        break;\n      case '\\x03':\n        wait_until_all_bits_are_set_080036c6(PTR_s_Unsupported_statement_08004118);\n        break;\n      case '\\x04':\n        wait_until_all_bits_are_set_080036c6(PTR_s_Invalid_radius_0800411c);\n        break;\n      case '\\x05':\n        wait_until_all_bits_are_set_080036c6(PTR_s_Modal_group_violation_08004120);\n        break;\n      case '\\x06':\n        wait_until_all_bits_are_set_080036c6(PTR_s_Invalid_statement_08004124);\n        break;\n      case '\\a':\n        wait_until_all_bits_are_set_080036c6(PTR_s_Setting_disabled_08004128);\n        break;\n      case '\\b':\n        wait_until_all_bits_are_set_080036c6(PTR_s_Value___0_0_0800412c);\n        break;\n      case '\\t':\n        wait_until_all_bits_are_set_080036c6(PTR_s_Value___3_usec_08004130);\n        break;\n      case '\\n':\n        wait_until_all_bits_are_set_080036c6(PTR_s_EEPROM_read_fail__Using_defaults_08004134);\n        break;\n      case '\\v':\n        wait_until_all_bits_are_set_080036c6(PTR_s_Busy_or_queued_08004138);\n        break;\n      case '\\f':\n        wait_until_all_bits_are_set_080036c6(PTR_s_Alarm_lock_0800413c);\n        break;\n      case '\\r':\n        wait_until_all_bits_are_set_080036c6(PTR_s_Line_overflow_08004140);\n        break;\n    }\n    wait_until_all_bits_are_set_080036c6(PTR_DAT_08004144);\n  }\n  return;\n}",
            "called": [
                "FUN_080036c6"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004030",
            "calling": [
                "FUN_08003f34",
                "FUN_080039bc",
                "FUN_080004ac",
                "FUN_080051b4",
                "FUN_080044e8",
                "FUN_08003b98"
            ],
            "imported": false,
            "current_name": "wait_for_bits_to_set_08004030"
        },
        "FUN_08005360": {
            "renaming": {
                "FUN_08005360": "calculate_result_08005360",
                "DAT_0800539c": "max_value",
                "PTR_DAT_08005398": "data_ptr"
            },
            "code": "bool calculate_result_08005360(void)\n{\n  int sum = *(int *)(PTR_DAT_08005398 + 0x14) + *(int *)(PTR_DAT_08005398 + 0x18);\n  *(int *)(PTR_DAT_08005398 + 0x18) = sum;\n  uint DAT_0800539c = DAT_0800539c;\n  uint current_value = *(uint *)(PTR_DAT_08005398 + 0x18);\n  if (DAT_0800539c < current_value) {\n    *(int *)(PTR_DAT_08005398 + 0x18) = sum - 420000;\n  }\n  return DAT_0800539c < current_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005360",
            "calling": [
                "FUN_080053a0"
            ],
            "imported": false,
            "current_name": "calculate_result_08005360"
        },
        "FUN_08003980": {
            "renaming": {
                "FUN_08003980": "reset_pointers_08003980",
                "PTR_DAT_08003998": "pointer_data_1",
                "PTR_DAT_0800399c": "pointer_data_2"
            },
            "code": "void reset_pointers_08003980(void)\n{\n    *PTR_DAT_08003998 = 0;\n    *PTR_DAT_0800399c = 0;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003980",
            "calling": [
                "FUN_080039a0",
                "FUN_08003f34"
            ],
            "imported": false,
            "current_name": "reset_pointers_08003980"
        },
        "FUN_08006de0": {
            "renaming": {
                "FUN_08006de0": "check_bit_08006de0",
                "param_1": "bit_to_check",
                "uVar1": "result",
                "check_bit_08006a18": "check_bit_helper"
            },
            "code": "int check_bit_08006de0(int bit_to_check) {\n    int result = check_bit_08006de0_helper(bit_to_check);\n    return result;\n}",
            "called": [
                "FUN_08006a18"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006de0",
            "calling": [],
            "imported": false,
            "current_name": "check_bit_08006de0"
        },
        "FUN_08007540": {
            "renaming": {
                "FUN_08007540": "initialize_system_and_interrupts_08007540",
                "set_flags_and_parameters_080059b4": "set_flags_and_parameters",
                "set_flags_and_process_data_08007436": "set_flags_and_process_data",
                "decode_and_set_params_0800778c": "decode_and_set_parameters",
                "initialize_system_and_interrupts_08007e08": "initialize_system_and_interrupts",
                "write_memory_with_byte_pattern_080079c0": "write_memory_with_byte_pattern",
                "calculate_division_rate_08008190": "calculate_division_rate",
                "software_interrupt_handler_08005984": "software_interrupt_handler",
                "process_data_and_input_08001ddc_08001ddc": "process_data_and_input"
            },
            "code": " \nint initialize_system_and_interrupts_08007540()\n{\n  set_flags_and_parameters();\n  set_flags_and_process_data();\n  decode_and_set_parameters();\n  initialize_system_and_interrupts_08007540();\n  write_memory_with_byte_pattern();\n  calculate_division_rate();\n  software_interrupt_handler(0);\n  process_data_and_input();\n  return 0;\n}",
            "called": [
                "FUN_08008190",
                "FUN_080079c0",
                "FUN_08007436",
                "FUN_080059b4",
                "FUN_08007e08",
                "FUN_08005984",
                "FUN_0800778c",
                "FUN_08001ddc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007540",
            "calling": [
                "FUN_080092c4"
            ],
            "imported": false,
            "current_name": "initialize_system_and_interrupts_08007540"
        },
        "FUN_080052dc": {
            "renaming": {
                "FUN_080052dc": "update_param_080052dc",
                "param_1": "new_param",
                "*(uint *)(DAT_08005308 + 0x14)": "ptr",
                "old_value": "old_value",
                "mask": "mask",
                "new_value": "new_value"
            },
            "code": "void update_param_080052dc(uint new_param)\n{\n    uint* *(uint *)(DAT_08005308 + 0x14) = (uint*)(DAT_08005308 + 0x14);\n    uint old_value = **(uint *)(DAT_08005308 + 0x14);\n    uint mask = 0xfffff55f;\n    uint new_value = new_param | (old_value & mask);\n    **(uint *)(DAT_08005308 + 0x14) = new_value;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080052dc",
            "calling": [
                "FUN_080053a0"
            ],
            "imported": false,
            "current_name": "update_param_080052dc"
        },
        "FUN_080064ec": {
            "renaming": {
                "FUN_080064ec": "calculate_division_rate_080064ec",
                "uVar1": "voltage_level",
                "uVar2": "frequency",
                "local_c": "rate",
                "count_leading_zeroes": "count_leading_zeros"
            },
            "code": "uint calculate_division_rate_080064ec(void)\n{\n  uint rate;\n  uint voltage_level = *(uint *)(DAT_0800661c + 8) & 0xc;\n  if (voltage_level == 8) {\n    uint frequency = *(uint *)(DAT_0800661c + 4) & 0x3f;\n    uint shift_count = count_leading_zeroes(0x200);\n    if ((*(uint *)(DAT_0800661c + 4) & 0x400000) >> (shift_count & 0xff) == 0) {\n      shift_count = count_leading_zeroes(0x3fe0000);\n      rate = ((*(uint *)(DAT_0800661c + 4) & 0x7fc0) >> (shift_count & 0xff)) * (DAT_08006620 / frequency);\n    }\n    else {\n      shift_count = count_leading_zeroes(0x3fe0000);\n      rate = ((*(uint *)(DAT_0800661c + 4) & 0x7fc0) >> (shift_count & 0xff)) * (DAT_08006624 / frequency);\n    }\n    shift_count = count_leading_zeroes(0xc000);\n    return rate / ((((*(uint *)(DAT_0800661c + 4) & 0x30000) >> (shift_count & 0xff)) + 1) * 2);\n  }\n  if (voltage_level < 9) {\n    if (voltage_level == 0) {\n      return DAT_08006620;\n    }\n    if (voltage_level == 4) {\n      return DAT_08006624;\n    }\n  }\n  return DAT_08006620;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080064ec",
            "calling": [
                "FUN_08006628"
            ],
            "imported": false,
            "current_name": "calculate_division_rate_080064ec"
        },
        "FUN_08006ba0": {
            "renaming": {
                "FUN_08006ba0": "extract_bits_08006ba0",
                "param_1": "input",
                "param_2": "mask",
                "param_3": "shift",
                "uVar1": "num_bits",
                "PTR_": "ptr_",
                "DAT_": "dat_"
            },
            "code": "uint extract_bits_08006ba0(uint input, uint mask, uint shift) {\n  uint num_bits = 7 - (input & 7);\n  if (num_bits > 3) {\n    num_bits = 4;\n  }\n  uint shift_amount = 0;\n  if ((input + 4) < 7) {\n    shift_amount = 0;\n  }\n  else {\n    shift_amount = input - 3;\n  }\n  return (mask & ((1 << shift_amount) - 1)) | (((1 << num_bits) - 1) & input) << shift_amount;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006ba0",
            "calling": [
                "FUN_08006cf6"
            ],
            "imported": false,
            "current_name": "extract_bits_08006ba0"
        },
        "FUN_080003ec": {
            "renaming": {
                "FUN_080003ec": "is_checksum_valid_080003ec",
                "param_1": "data",
                "param_2": "data_length",
                "param_3": "checksum_index",
                "cVar1": "current_byte",
                "local_1c": "data_length_copy",
                "local_18": "checksum_index_copy",
                "local_14": "current_position",
                "local_9": "checksum"
            },
            "code": "bool is_checksum_valid_080003ec(char *data, int data_length, int checksum_index) {\n  char current_byte;\n  uint8_t checksum = 0;\n  char *current_position = data;\n  if (*(int *)PTR_DAT_08000470 == 0) {\n    write_memory_with_byte_pattern_080002f0();\n    current_position = data;\n  }\n  for (; data_length != 0; data_length--) {\n    current_byte = get_value_from_data_table_08000310(checksum_index);\n    checksum += (current_byte != 0);\n    *current_position = current_byte;\n    checksum_index++;\n    current_position++;\n  }\n  uint8_t expected_checksum = get_value_from_data_table_08000310(checksum_index);\n  return checksum == expected_checksum;\n}",
            "called": [
                "FUN_08000310",
                "FUN_080002f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080003ec",
            "calling": [
                "FUN_08004d2c",
                "FUN_08004d7c",
                "FUN_08004dd2"
            ],
            "imported": false,
            "current_name": "is_checksum_valid_080003ec"
        },
        "FUN_08002896": {
            "renaming": {
                "FUN_08002896": "decrement_character_08002896",
                "param_1": "input_char",
                "local_9": "result_char"
            },
            "code": "char decrement_character_08002896(char input_char)\n{\n  char result_char;\n  result_char = input_char;\n  if (input_char == '\\0') {\n    result_char = '\\x12';\n  }\n  return result_char - 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002896",
            "calling": [
                "FUN_08002a94"
            ],
            "imported": false,
            "current_name": "decrement_character_08002896"
        },
        "FUN_0800a348": {
            "renaming": {
                "FUN_0800a348": "FUNC_0800a348"
            },
            "code": "\nundefined4 FUNC_0800a348(undefined4 param_1,uint param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  int iVar1;\n  undefined4 uVar2;\n  undefined4 uVar3;\n  uint uVar4;\n  undefined8 uVar5;\n  undefined8 uVar6;\n  undefined8 uVar7;\n  longlong lVar8;\n  undefined4 local_30;\n  undefined4 uStack_2c;\n  undefined4 local_28;\n  undefined4 uStack_24;\n  \n  uVar4 = param_2 & 0x7fffffff;\n  if (uVar4 < 0x3e400000) {\n    iVar1 = convert_to_int_08008ba0();\n    if (iVar1 == 0) {\n      return 0;\n    }\n    uVar5 = FUNC_08008640(param_1,param_2,param_1,param_2);\n    uVar3 = (undefined4)((ulonglong)uVar5 >> 0x20);\n    uVar2 = (undefined4)uVar5;\n    uVar6 = FUNC_08008640(uVar2,uVar3,DAT_0800a558,DAT_0800a55c);\n    uVar6 = FUNC_080082d4((int)uVar6,(int)((ulonglong)uVar6 >> 0x20),DAT_0800a560,DAT_0800a564);\n    uVar6 = FUNC_08008640((int)uVar6,(int)((ulonglong)uVar6 >> 0x20),uVar2,uVar3);\n    uVar6 = FUNC_080082d0((int)uVar6,(int)((ulonglong)uVar6 >> 0x20),DAT_0800a568,DAT_0800a56c);\n    uVar6 = FUNC_08008640((int)uVar6,(int)((ulonglong)uVar6 >> 0x20),uVar2,uVar3);\n    uVar6 = FUNC_080082d4((int)uVar6,(int)((ulonglong)uVar6 >> 0x20),DAT_0800a570,DAT_0800a574);\n    uVar6 = FUNC_08008640((int)uVar6,(int)((ulonglong)uVar6 >> 0x20),uVar2,uVar3);\n    uVar6 = FUNC_080082d0((int)uVar6,(int)((ulonglong)uVar6 >> 0x20),DAT_0800a578,DAT_0800a57c);\n    uVar6 = FUNC_08008640((int)uVar6,(int)((ulonglong)uVar6 >> 0x20),uVar2,uVar3);\n    uVar6 = FUNC_080082d4((int)uVar6,(int)((ulonglong)uVar6 >> 0x20),DAT_0800a580,DAT_0800a584);\n    uVar6 = FUNC_08008640((int)uVar6,(int)((ulonglong)uVar6 >> 0x20),uVar2,uVar3);\n  }\n  else {\n    uVar5 = FUNC_08008640(param_1,param_2,param_1,param_2);\n    uVar3 = (undefined4)((ulonglong)uVar5 >> 0x20);\n    uVar2 = (undefined4)uVar5;\n    uVar6 = FUNC_08008640(uVar2,uVar3,DAT_0800a558,DAT_0800a55c);\n    uVar6 = FUNC_080082d4((int)uVar6,(int)((ulonglong)uVar6 >> 0x20),DAT_0800a560,DAT_0800a564);\n    uVar6 = FUNC_08008640((int)uVar6,(int)((ulonglong)uVar6 >> 0x20),uVar2,uVar3);\n    uVar6 = FUNC_080082d0((int)uVar6,(int)((ulonglong)uVar6 >> 0x20),DAT_0800a568,DAT_0800a56c);\n    uVar6 = FUNC_08008640((int)uVar6,(int)((ulonglong)uVar6 >> 0x20),uVar2,uVar3);\n    uVar6 = FUNC_080082d4((int)uVar6,(int)((ulonglong)uVar6 >> 0x20),DAT_0800a570,DAT_0800a574);\n    uVar6 = FUNC_08008640((int)uVar6,(int)((ulonglong)uVar6 >> 0x20),uVar2,uVar3);\n    uVar6 = FUNC_080082d0((int)uVar6,(int)((ulonglong)uVar6 >> 0x20),DAT_0800a578,DAT_0800a57c);\n    uVar6 = FUNC_08008640((int)uVar6,(int)((ulonglong)uVar6 >> 0x20),uVar2,uVar3);\n    uVar6 = FUNC_080082d4((int)uVar6,(int)((ulonglong)uVar6 >> 0x20),DAT_0800a580,DAT_0800a584);\n    uVar6 = FUNC_08008640((int)uVar6,(int)((ulonglong)uVar6 >> 0x20),uVar2,uVar3);\n    if (DAT_0800a590 < (int)uVar4) {\n      if (DAT_0800a594 < (int)uVar4) {\n        lVar8 = (ulonglong)DAT_0800a598 << 0x20;\n        iVar1 = DAT_0800a59c;\n      }\n      else {\n        lVar8 = FUNC_080082d0(0,DAT_0800a58c,0,uVar4 - 0x200000);\n        iVar1 = uVar4 - 0x200000;\n      }\n      uStack_24 = (undefined4)((ulonglong)lVar8 >> 0x20);\n      local_28 = (undefined4)lVar8;\n      uVar5 = FUNC_08008640(uVar2,uVar3,0,DAT_0800a588);\n      uVar5 = FUNC_080082d0((int)uVar5,(int)((ulonglong)uVar5 >> 0x20),0,iVar1);\n      uVar6 = FUNC_08008640(uVar2,uVar3,(int)uVar6,(int)((ulonglong)uVar6 >> 0x20));\n      uVar7 = FUNC_08008640(param_1,param_2,param_3,param_4);\n      uVar6 = FUNC_080082d0((int)uVar6,(int)((ulonglong)uVar6 >> 0x20),(int)uVar7,\n                           (int)((ulonglong)uVar7 >> 0x20));\n      uVar5 = FUNC_080082d0((int)uVar5,(int)((ulonglong)uVar5 >> 0x20),(int)uVar6,\n                           (int)((ulonglong)uVar6 >> 0x20));\n      uVar2 = FUNC_080082d0(local_28,uStack_24,(int)uVar5,(int)((ulonglong)uVar5 >> 0x20));\n      return uVar2;\n    }\n  }\n  uStack_2c = (undefined4)((ulonglong)uVar6 >> 0x20);\n  local_30 = (undefined4)uVar6;\n  uVar2 = (undefined4)((ulonglong)uVar5 >> 0x20);\n  uVar6 = FUNC_08008640((int)uVar5,uVar2,0,DAT_0800a588);\n  uVar5 = FUNC_08008640((int)uVar5,uVar2,local_30,uStack_2c);\n  uVar7 = FUNC_08008640(param_1,param_2,param_3,param_4);\n  uVar5 = FUNC_080082d0((int)uVar5,(int)((ulonglong)uVar5 >> 0x20),(int)uVar7,\n                       (int)((ulonglong)uVar7 >> 0x20));\n  uVar5 = FUNC_080082d0((int)uVar6,(int)((ulonglong)uVar6 >> 0x20),(int)uVar5,\n                       (int)((ulonglong)uVar5 >> 0x20));\n  uVar2 = FUNC_080082d0(0,DAT_0800a58c,(int)uVar5,(int)((ulonglong)uVar5 >> 0x20));\n  return uVar2;\n}\n\n",
            "called": [
                "FUN_080082d0",
                "FUN_080082d4",
                "FUN_08008ba0",
                "FUN_08008640"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x0800a348",
            "calling": [
                "FUN_08009410",
                "FUN_080096e8"
            ],
            "imported": false,
            "current_name": "FUNC_0800a348"
        },
        "FUN_080001ac": {
            "renaming": {
                "FUN_080001ac": "concatenate_080001ac",
                "param_1": "first",
                "param_2": "second",
                "DAT_080001bc": "global_variable",
                "PTR_FUN_080001c4": "global_pointer",
                "PTR_DAT_080001c0": "global_data_pointer"
            },
            "code": "uint64_t concatenate_080001ac(uint64_t *first, uint64_t *second) {\n  if (DAT_080001bc != 0) {\n    first = PTR_FUN_080001c4;\n    second = PTR_DAT_080001c0;\n  }\n  return ((uint64_t)(*second) << 32) | (uint64_t)(*first);\n}",
            "called": [
                "FUN_0800b5b0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080001ac",
            "calling": [
                "FUN_0800b3e8"
            ],
            "imported": false,
            "current_name": "concatenate_080001ac"
        },
        "FUN_08003740": {
            "renaming": {
                "FUN_08003740": "print_binary_representation_08003740",
                "param_1": "data"
            },
            "code": "void print_binary_representation_08003740(void* data, int num_bits) {\n    print_binary_representation_08003740_080036f0(data, num_bits);\n    return;\n}",
            "called": [
                "FUN_080036f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003740",
            "calling": [],
            "imported": false,
            "current_name": "print_binary_representation_08003740"
        },
        "FUN_08000478": {
            "renaming": {
                "FUN_08000478": "set_params_in_array_08000478",
                "param_1": "first_param",
                "param_2": "second_param",
                "param_3": "third_param",
                "PTR_DAT_080004a8": "array_of_params"
            },
            "code": "void set_params_in_array_08000478(int param_1, int param_2, int param_3)\n{\n  PTR_DAT_080004a8[25] = param_1;\n  PTR_DAT_080004a8[26] = param_2;\n  PTR_DAT_080004a8[27] = param_3;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000478",
            "calling": [
                "FUN_080005b4",
                "FUN_080004ac"
            ],
            "imported": false,
            "current_name": "set_params_in_array_08000478"
        },
        "FUN_08006d2e": {
            "renaming": {
                "FUN_08006d2e": "set_bit_at_index_08006d2e",
                "param_1": "index"
            },
            "code": "void set_bit_at_index_08006d2e(int index){\n  set_bit_at_index_08006d2e_080069b4(index);\n  return;\n}",
            "called": [
                "FUN_080069b4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006d2e",
            "calling": [],
            "imported": false,
            "current_name": "set_bit_at_index_08006d2e"
        },
        "FUN_08007e1c": {
            "renaming": {
                "FUN_08007e1c": "wait_until_bit_set_08007e1c",
                "param_1": "bit_to_wait_for",
                "DAT_08007e48": "status_register"
            },
            "code": "void wait_until_bit_set_08007e1c(byte bit_to_wait_for)\n{\n  while ((*DAT_08007e48 & 0x80) == 0);\n  *(DAT_08007e48 + 1) = (uint)bit_to_wait_for;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007e1c",
            "calling": [
                "FUN_08008250",
                "FUN_0800826a"
            ],
            "imported": false,
            "current_name": "wait_until_bit_set_08007e1c"
        },
        "FUN_0800adf0": {
            "renaming": {
                "FUN_0800adf0": "calculate_result_0800adf0_0800adf0",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "param_5": "input_5",
                "iVar1": "conversion_result",
                "uVar2": "result_1",
                "uVar3": "result_2",
                "uVar4": "result_3",
                "uVar5": "result_4",
                "uVar6": "result_5",
                "uVar7": "intermediate_result_1",
                "uVar8": "intermediate_result_2"
            },
            "code": "undefined4 calculate_result_0800adf0_0800adf0(undefined4 input_1, uint input_2, undefined4 input_3, undefined4 input_4, int input_5) {\n  int conversion_result;\n  undefined4 result_1;\n  undefined4 result_2;\n  undefined4 result_3;\n  undefined4 result_4;\n  undefined4 result_5;\n  undefined8 intermediate_result_1;\n  undefined8 intermediate_result_2;\n  if ((input_2 & 0x7fffffff) < 0x3e400000) {\n    conversion_result = convert_to_int_08008ba0();\n    if (conversion_result == 0) {\n      return input_1;\n    }\n  }\n  intermediate_result_1 = FUNC_08008640(input_1, input_2, input_1);\n  result_1 = (undefined4)((ulonglong)intermediate_result_1 >> 0x20);\n  result_2 = (undefined4)intermediate_result_1;\n  intermediate_result_1 = FUNC_08008640(input_1, input_2, result_2, result_1);\n  result_3 = (undefined4)((ulonglong)intermediate_result_1 >> 0x20);\n  result_4 = (undefined4)intermediate_result_1;\n  intermediate_result_1 = FUNC_08008640(result_2, result_1, DAT_0800af40, DAT_0800af44);\n  intermediate_result_1 = FUNC_080082d0((int)intermediate_result_1, (int)((ulonglong)intermediate_result_1 >> 0x20), DAT_0800af48, DAT_0800af4c);\n  intermediate_result_1 = FUNC_08008640((int)intermediate_result_1, (int)((ulonglong)intermediate_result_1 >> 0x20), result_2, result_1);\n  intermediate_result_1 = FUNC_080082d4((int)intermediate_result_1, (int)((ulonglong)intermediate_result_1 >> 0x20), DAT_0800af50, DAT_0800af54);\n  intermediate_result_1 = FUNC_08008640((int)intermediate_result_1, (int)((ulonglong)intermediate_result_1 >> 0x20), result_2, result_1);\n  intermediate_result_1 = FUNC_080082d0((int)intermediate_result_1, (int)((ulonglong)intermediate_result_1 >> 0x20), DAT_0800af58, DAT_0800af5c);\n  intermediate_result_1 = FUNC_08008640((int)intermediate_result_1, (int)((ulonglong)intermediate_result_1 >> 0x20), result_2, result_1);\n  intermediate_result_1 = FUNC_080082d4((int)intermediate_result_1, (int)((ulonglong)intermediate_result_1 >> 0x20), DAT_0800af60, DAT_0800af64);\n  result_5 = (undefined4)((ulonglong)intermediate_result_1 >> 0x20);\n  if (input_5 != 0) {\n    intermediate_result_2 = FUNC_08008640(input_3, input_4, 0, DAT_0800af70);\n    intermediate_result_1 = FUNC_08008640(result_2, result_1, (int)intermediate_result_1, result_5);\n    intermediate_result_1 = FUNC_080082d0((int)intermediate_result_2, (int)((ulonglong)intermediate_result_2 >> 0x20), (int)intermediate_result_1, (int)((ulonglong)intermediate_result_1 >> 0x20));\n    intermediate_result_1 = FUNC_08008640((int)intermediate_result_1, (int)((ulonglong)intermediate_result_1 >> 0x20), result_2, result_1);\n    intermediate_result_1 = FUNC_080082d0((int)intermediate_result_1, (int)((ulonglong)intermediate_result_1 >> 0x20), input_3, input_4);\n    intermediate_result_2 = FUNC_08008640(result_2, result_1, DAT_0800af68, DAT_0800af6c);\n    intermediate_result_1 = FUNC_080082d4((int)intermediate_result_1, (int)((ulonglong)intermediate_result_1 >> 0x20), (int)intermediate_result_2, (int)((ulonglong)intermediate_result_2 >> 0x20));\n    result_2 = FUNC_080082d0(input_1, input_2, (int)intermediate_result_1, (int)((ulonglong)intermediate_result_1 >> 0x20));\n    return result_2;\n  }\n  intermediate_result_1 = FUNC_08008640(result_2, result_1, (int)intermediate_result_1, result_5);\n  intermediate_result_1 = FUNC_080082d0((int)intermediate_result_1, (int)((ulonglong)intermediate_result_1 >> 0x20), DAT_0800af68, DAT_0800af6c);\n  intermediate_result_1 = FUNC_08008640((int)intermediate_result_1, (int)((ulonglong)intermediate_result_1 >> 0x20), result_2, result_1);\n  result_2 = FUNC_080082d4((int)intermediate_result_1, (int)((ulonglong)intermediate_result_1 >> 0x20), input_1, input_2);\n  return result_2;\n}\n",
            "called": [
                "FUN_080082d0",
                "FUN_080082d4",
                "FUN_08008ba0",
                "FUN_08008640"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800adf0",
            "calling": [
                "FUN_08009410",
                "FUN_080096e8"
            ],
            "imported": false,
            "current_name": "calculate_result_0800adf0_0800adf0"
        },
        "FUN_08003a74": {
            "renaming": {
                "FUN_08003a74": "process_data_08003a74_08003a74",
                "bVar1": "data_byte"
            },
            "code": "void process_data_08003a74_08003a74(void)\\n{\\n  byte data_byte;\\n  if (PTR_DATA_08003b90[2] != \"\\0\") {\\n    data_byte = PTR_DATA_08003b90[2];\\n    if ((data_byte & 0x60) != 0) {\\n      PTR_DATA_08003b90[1] = 6;\\n      if ((data_byte & 0x40) == 0) {\\n        wait_until_bits_set_alarm_08004148(0xfffffffe);\\n      }\\n      else {\\n        wait_until_bits_set_alarm_08004148(0xffffffff);\\n        wait_until_all_bits_are_set_and_continue_after_reset_080041a0(1);\\n        PTR_DATA_08003b90[2] &= 0xef;\\n        do {\\n        } while ((PTR_DATA_08003b90[2] & 0x10) == 0);\\n      }\\n      PTR_DATA_08003b90[2] &= 0x9f;\\n    }\\n    if ((data_byte & 0x10) == 0) {\\n      if ((data_byte & 1) != 0) {\\n        calculate_and_convert_to_decimal_08004940_08004940();\\n        PTR_DATA_08003b90[2] &= 0xfe;\\n      }\\n      if ((data_byte & 8) != 0) {\\n        update_data_if_flag_is_set_0800587c();\\n        PTR_DATA_08003b90[2] &= 0xf7;\\n      }\\n      if ((data_byte & 4) != 0) {\\n        update_local_value_080058a0();\\n        PTR_DATA_08003b90[2] &= 0xfb;\\n      }\\n      if ((data_byte & 2) != 0) {\\n        process_if_second_element_equals_two_then_set_to_three_and_process_data_0800585c();\\n        if ((PTR_DATA_08003b94[0x28] & 2) != 0) {\\n          PTR_DATA_08003b90[0x10] = 1;\\n        }\\n        PTR_DATA_08003b90[2] &= 0xfd;\\n      }\\n    }\\n    else {\\n      *PTR_DATA_08003b90 = 1;\\n    }\\n  }\\n  return;\\n}",
            "called": [
                "FUN_080058a0",
                "FUN_08004940",
                "FUN_08004148",
                "FUN_0800587c",
                "FUN_0800585c",
                "FUN_080041a0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003a74",
            "calling": [
                "FUN_08002fd4",
                "FUN_08003f34",
                "FUN_08001e98",
                "FUN_080024c4",
                "FUN_08002408",
                "FUN_08001ddc"
            ],
            "imported": false,
            "current_name": "process_data_08003a74_08003a74"
        },
        "FUN_08005cec": {
            "renaming": {
                "FUN_08005cec": "FUNC_08005cec"
            },
            "code": "\nundefined4 FUNC_08005cec(uint *param_1)\n\n{\n  int iVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  \n  if ((*param_1 & 1) != 0) {\n    if (((DAT_08005fac[2] & 0xc) == 4) ||\n       (((DAT_08005fac[2] & 0xc) == 8 && ((DAT_08005fac[1] & 0x400000) == 0x400000)))) {\n      if (((*DAT_08005fac & 0x20000) != 0) && (param_1[1] != 1)) {\n        return 1;\n      }\n    }\n    else {\n      *DAT_08005fb0 = 0;\n      iVar1 = get_value_from_pointer_08005a84();\n      while ((*DAT_08005fac & 0x20000) != 0) {\n        uVar2 = get_value_from_pointer_08005a84();\n        if (iVar1 + 5000U <= uVar2) {\n          return 3;\n        }\n      }\n      *DAT_08005fb0 = (char)param_1[1];\n      if (param_1[1] == 1) {\n        iVar1 = get_value_from_pointer_08005a84();\n        while ((*DAT_08005fac & 0x20000) == 0) {\n          uVar2 = get_value_from_pointer_08005a84();\n          if (iVar1 + 5000U <= uVar2) {\n            return 3;\n          }\n        }\n      }\n      else {\n        iVar1 = get_value_from_pointer_08005a84();\n        while ((*DAT_08005fac & 0x20000) != 0) {\n          uVar2 = get_value_from_pointer_08005a84();\n          if (iVar1 + 5000U <= uVar2) {\n            return 3;\n          }\n        }\n      }\n    }\n  }\n  if ((*param_1 & 2) != 0) {\n    if (((DAT_08005fac[2] & 0xc) == 0) ||\n       (((DAT_08005fac[2] & 0xc) == 8 && ((DAT_08005fac[1] & 0x400000) == 0)))) {\n      if (((*DAT_08005fac & 2) != 0) && (param_1[3] != 1)) {\n        return 1;\n      }\n    }\n    else if (param_1[3] == 0) {\n      *DAT_08005fb4 = 0;\n      iVar1 = get_value_from_pointer_08005a84();\n      while ((*DAT_08005fac & 2) != 0) {\n        uVar2 = get_value_from_pointer_08005a84();\n        if (iVar1 + 100U <= uVar2) {\n          return 3;\n        }\n      }\n    }\n    else {\n      *DAT_08005fb4 = 1;\n      iVar1 = get_value_from_pointer_08005a84();\n      while ((*DAT_08005fac & 2) == 0) {\n        uVar2 = get_value_from_pointer_08005a84();\n        if (iVar1 + 100U <= uVar2) {\n          return 3;\n        }\n      }\n      uVar2 = count_leading_zeroes(0x1f000000);\n      *DAT_08005fac = param_1[4] << (uVar2 & 0xff) | *DAT_08005fac & 0xffffff07;\n    }\n  }\n  if ((*param_1 & 8) != 0) {\n    if (param_1[5] == 0) {\n      *DAT_08005fb8 = 0;\n      iVar1 = get_value_from_pointer_08005a84();\n      while ((DAT_08005fac[0x1d] & 2) != 0) {\n        uVar2 = get_value_from_pointer_08005a84();\n        if (iVar1 + 100U <= uVar2) {\n          return 3;\n        }\n      }\n    }\n    else {\n      *DAT_08005fb8 = 1;\n      iVar1 = get_value_from_pointer_08005a84();\n      while ((DAT_08005fac[0x1d] & 2) == 0) {\n        uVar2 = get_value_from_pointer_08005a84();\n        if (iVar1 + 100U <= uVar2) {\n          return 3;\n        }\n      }\n    }\n  }\n  if ((*param_1 & 4) != 0) {\n    DAT_08005fac[0x10] = DAT_08005fac[0x10] | 0x10000000;\n    *DAT_08005fbc = *DAT_08005fbc | 0x100;\n    iVar1 = get_value_from_pointer_08005a84();\n    while ((*DAT_08005fbc & 0x100) == 0) {\n      uVar2 = get_value_from_pointer_08005a84();\n      if (iVar1 + 100U <= uVar2) {\n        return 3;\n      }\n    }\n    *DAT_08005fc0 = 0;\n    iVar1 = get_value_from_pointer_08005a84();\n    while ((DAT_08006180[0x1c] & 2) != 0) {\n      uVar2 = get_value_from_pointer_08005a84();\n      if (iVar1 + 5000U <= uVar2) {\n        return 3;\n      }\n    }\n    *DAT_08006184 = (char)param_1[2];\n    if (param_1[2] == 1) {\n      iVar1 = get_value_from_pointer_08005a84();\n      while ((DAT_08006180[0x1c] & 2) == 0) {\n        uVar2 = get_value_from_pointer_08005a84();\n        if (iVar1 + 5000U <= uVar2) {\n          return 3;\n        }\n      }\n    }\n    else {\n      iVar1 = get_value_from_pointer_08005a84();\n      while ((DAT_08006180[0x1c] & 2) != 0) {\n        uVar2 = get_value_from_pointer_08005a84();\n        if (iVar1 + 5000U <= uVar2) {\n          return 3;\n        }\n      }\n    }\n  }\n  if (param_1[6] != 0) {\n    if ((DAT_08006180[2] & 0xc) == 8) {\n      return 1;\n    }\n    if (param_1[6] == 2) {\n      *DAT_08006188 = 0;\n      iVar1 = get_value_from_pointer_08005a84();\n      while ((*DAT_08006180 & 0x2000000) != 0) {\n        uVar2 = get_value_from_pointer_08005a84();\n        if (iVar1 + 100U <= uVar2) {\n          return 3;\n        }\n      }\n      uVar2 = count_leading_zeroes(0x3fe0000);\n      uVar3 = count_leading_zeroes(0xc000);\n      uVar4 = count_leading_zeroes(0xf0);\n      DAT_08006180[1] =\n           param_1[0xb] << (uVar4 & 0xff) |\n           param_1[8] | param_1[9] << (uVar2 & 0xff) | (param_1[10] >> 1) - 1 << (uVar3 & 0xff) |\n           param_1[7] | 0x20000000;\n      *DAT_08006188 = 1;\n      iVar1 = get_value_from_pointer_08005a84();\n      while ((*DAT_08006180 & 0x2000000) == 0) {\n        uVar2 = get_value_from_pointer_08005a84();\n        if (iVar1 + 100U <= uVar2) {\n          return 3;\n        }\n      }\n    }\n    else {\n      *DAT_08006188 = 0;\n      iVar1 = get_value_from_pointer_08005a84();\n      while ((*DAT_08006180 & 0x2000000) != 0) {\n        uVar2 = get_value_from_pointer_08005a84();\n        if (iVar1 + 100U <= uVar2) {\n          return 3;\n        }\n      }\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_08005a84"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08005cec",
            "calling": [
                "FUN_08007436"
            ],
            "imported": false,
            "current_name": "FUNC_08005cec"
        },
        "FUN_08006b00": {
            "renaming": {
                "FUN_08006b00": "set_data_08006b00",
                "param_1": "data",
                "param_2": "value",
                "DAT_08006b4c": "data_ptr_1",
                "DAT_08006b50": "data_ptr_2"
            },
            "code": "void set_data_08006b00(byte data, uint8_t value) {\n    if (data < 0) {\n        *(char *)((data & 0xf) + DAT_08006b4c + 0x14) = (char)((value & 0xff) << 4);\n    }\n    else {\n        *(char *)((char)data + DAT_08006b50 + 0x300) = (char)((value & 0xff) << 4);\n    }\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006b00",
            "calling": [
                "FUN_08006cf6",
                "FUN_08006c9c"
            ],
            "imported": false,
            "current_name": "set_data_08006b00"
        },
        "FUN_0800b4d0": {
            "renaming": {
                "FUN_0800b4d0": "add_data_to_list_if_not_null_0800b4d0",
                "DAT_0800b4dc": "data_exists",
                "PTR_LAB_0800b4f0_1_0800b4e0": "data_pointer",
                "add_data_to_list_0800b524": "add_data_to_list"
            },
            "code": "void add_data_to_list_if_not_null_0800b4d0()\n{\n    if (DAT_0800b4dc != 0) {\n        add_data_to_list(0, PTR_LAB_0800b4f0_1_0800b4e0, 0);\n        return;\n    }\n    return;\n}",
            "called": [
                "FUN_0800b524"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800b4d0",
            "calling": [
                "FUN_0800b3e8"
            ],
            "imported": false,
            "current_name": "add_data_to_list_if_not_null_0800b4d0"
        },
        "FUN_08007f54": {
            "renaming": {
                "FUN_08007f54": "calculate_rate_of_division_08007f54",
                "param_1": "dividend",
                "param_2": "divisor",
                "lVar1": "rate",
                "iVar2": "quotient1",
                "iVar3": "quotient2",
                "uVar4": "rate1",
                "DAT_08008184": "special_case_1",
                "DAT_08008188": "special_case_2"
            },
            "code": "void calculate_rate_of_division_08007f54(int dividend, int divisor)\n{\n  long long rate;\n  int quotient1, quotient2, quotient3;\n  int divisor_shifted = divisor << 2;\n  int constant = 25;\n  bool is_divisor_shifted = (uint *)(dividend + 0xc) & 0x8000) == 0;\n  bool is_not_special_case = (dividend != DAT_08008184) && (dividend != DAT_08008188);\n  if (is_divisor_shifted)\n  {\n    if (is_not_special_case)\n    {\n      int rate1 = calculate_division_rate_1();\n      rate = (long long)constant * (long long)constant * (long long)dividend * (long long)rate1 / (long long)divisor_shifted;\n      quotient1 = calculate_division_rate_1(rate1, (int)(rate1 >> 0x20), (int)rate);\n      quotient2 = calculate_division_rate_1();\n      quotient3 = calculate_division_rate_1((int)constant, (int)(constant >> 0x20), (int)rate);\n    }\n    else\n    {\n      int rate1 = calculate_division_rate_2();\n      rate = (long long)constant * (long long)constant * (long long)dividend * (long long)rate1 / (long long)divisor_shifted;\n      quotient1 = calculate_division_rate_2(rate1, (int)(rate1 >> 0x20), (int)rate);\n      quotient2 = calculate_division_rate_2();\n      quotient3 = calculate_division_rate_2((int)constant, (int)(constant >> 0x20), (int)rate);\n    }\n  }\n  else\n  {\n    if (is_not_special_case)\n    {\n      int rate1 = calculate_division_rate_1();\n      rate = (long long)constant * (long long)constant * (long long)dividend * (long long)rate1 / (long long)(divisor << 1);\n      quotient1 = calculate_division_rate_1(rate1, (int)(rate1 >> 0x20), (int)rate);\n      quotient2 = calculate_division_rate_1();\n      quotient3 = calculate_division_rate_1((int)constant, (int)(constant >> 0x20), (int)rate);\n    }\n    else\n    {\n      int rate1 = calculate_division_rate_2();\n      rate = (long long)constant * (long long)constant * (long long)dividend * (long long)rate1 / (long long)(divisor << 1);\n      quotient1 = calculate_division_rate_2(rate1, (int)(rate1 >> 0x20), (int)rate);\n      quotient2 = calculate_division_rate_2();\n      quotient3 = calculate_division_rate_2((int)constant, (int)(constant >> 0x20), (int)rate);\n    }\n  }\n  *(uint *)(dividend + 8) = ((uint)(rate >> constant) << 4) | ((uint)constant * ((quotient1 * 0x19 / divisor_shifted) + (constant * (quotient2 * 0x19 / divisor_shifted) >> constant) * -100 + 0x32) >> constant) & 0xf;\n}",
            "called": [
                "FUN_08006680",
                "FUN_080066cc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007f54",
            "calling": [
                "FUN_08008190"
            ],
            "imported": false,
            "current_name": "calculate_rate_of_division_08007f54"
        },
        "FUN_08003b98": {
            "renaming": {
                "FUN_08003b98": "parse_input_and_execute_command_08003b98",
                "param_1": "input",
                "bVar1": "first_char",
                "iVar2": "parse_index",
                "uVar3": "parse_result",
                "uVar4": "return_value",
                "uVar5": "converted_value",
                "local_14": "local_int",
                "local_10": "parse_index",
                "local_a": "local_byte_1",
                "local_9": "local_byte_2"
            },
            "code": "uint parse_input_and_execute_command_08003b98(char *input)\n{\n  byte first_char = input[0];\n  int parse_index = 0;\n  undefined4 parse_result;\n  uint return_value;\n  undefined8 converted_value;\n  undefined4 local_int;\n  undefined4 local_uint;\n  byte local_byte_1;\n  byte local_byte_2;\n  if (first_char != '$') {\n    return FUNC_080005b4(input);\n  }\n  local_byte_1 = 1;\n  local_byte_2 = 0;\n  byte second_char = input[1];\n  if (second_char == 0) {\n    wait_until_all_bits_are_set_0800423c();\n    return 0;\n  }\n  if ((0x58 < second_char) || (second_char < 0x23)) {\n    goto switchD_08003bdc_caseD_25;\n  }\n  switch(second_char) {\n  case 0x23:\n    local_byte_1 = 2;\n    if (input[2] != '\\0') {\n      return 3;\n    }\n    print_sensor_data_080044e8();\n    break;\n  case 0x24:\n    local_byte_1 = 2;\n    if (input[2] != '\\0') {\n      return 3;\n    }\n    print_settings_08004250();\n    break;\n  case 0x43:\n    local_byte_1 = 2;\n    if (input[2] != '\\0') {\n      return 3;\n    }\n    if (PTR_DAT_08003f2c[1] == '\\a') {\n      activate_sensor_if_not_active_080025e8();\n      wait_until_all_bits_are_set_and_continue_after_reset_080041a0(5);\n    }\n    else {\n      if (PTR_DAT_08003f2c[1] != '\\0') {\n        return 0xb;\n      }\n      PTR_DAT_08003f2c[1] = 7;\n      wait_until_all_bits_are_set_and_continue_after_reset_080041a0(4);\n    }\n    break;\n  case 0x47:\n    local_byte_1 = 2;\n    if (input[2] != '\\0') {\n      return 3;\n    }\n    wait_for_bits_to_set_080046d0();\n    break;\n  case 0x48:\n    if ((PTR_DAT_08003f30[0x28] & 0x10) == 0) {\n      return 7;\n    }\n    if ((PTR_DAT_08003f2c[1] != '\\0') && (PTR_DAT_08003f2c[1] != '\\x06')) {\n      return 0xb;\n    }\n    process_data_and_update_params_080024c4();\n    if (*PTR_DAT_08003f2c == '\\0') {\n      wait_for_data_or_timeout_080039bc();\n    }\n    break;\n  case 0x4e:\n    local_byte_1 = 2;\n    if (input[2] == '\\0') {\n      for (local_byte_2 = 0; local_byte_2 < 2; local_byte_2++) {\n        parse_result = is_checksum_valid_08004d2c(local_byte_2, input);\n        if (parse_result == 0) {\n          wait_for_bits_to_set_08004030(10);\n        }\n        else {\n          wait_until_all_bits_and_characters_are_set_08004900(local_byte_2, input);\n        }\n      }\n      return 0;\n    }\n    local_byte_2 = '\\x01';\n  default:\nswitchD_08003bdc_caseD_25:\n    parse_result = parse_input_08002638_08002638(input, &local_byte_1, &parse_index);\n    if (parse_result == 0) {\n      return 1;\n    }\n    byte after_equals_char = input[local_byte_1 + 1];\n    if (after_equals_char != '=') {\n      return 3;\n    }\n    local_byte_1++;\n    if (local_byte_2 == 0) {\n      parse_result = parse_input_08002638_08002638(input, &local_byte_1, &local_int);\n      if (parse_result == 0) {\n        return 1;\n      }\n      if (input[local_byte_1] == '\\0') {\n        local_uint = convert_param_to_int_08009278(parse_index);\n        return_value = FUNC_08004e30(local_uint, local_int);\n        return return_value;\n      }\n      return 3;\n    }\n    do {\n      input[(uint)local_byte_1 - (uint)local_byte_2] = input[local_byte_1];\n      return_value = (uint)local_byte_1;\n      local_byte_1++;\n    } while (input[return_value] != '\\0');\n    local_byte_2 = local_byte_1 - local_byte_2;\n    return_value = FUNC_080005b4(input);\n    if (return_value != 0) {\n      return return_value;\n    }\n    converted_value = convert_to_big_endian_08008590(parse_index);\n    converted_value = convert_to_double_08009798((int)converted_value, (int)((ulonglong)converted_value >> 0x20));\n    local_byte_2 = calculate_shifted_value_08008bf0((int)converted_value, (int)((ulonglong)converted_value >> 0x20));\n    write_to_memory_at_offset_08004bc0(local_byte_2, input);\n    break;\n  case 0x58:\n    local_byte_1 = 2;\n    if (input[2] != '\\0') {\n      return 3;\n    }\n    if (PTR_DAT_08003f2c[1] == '\\x06') {\n      wait_until_all_bits_are_set_and_continue_after_reset_080041a0(3);\n      PTR_DAT_08003f2c[1] = 0;\n    }\n  }\n  return 0;\n}",
            "called": [
                "FUN_080046d0",
                "FUN_08008590",
                "FUN_08004bc0",
                "FUN_080039bc",
                "FUN_08008bf0",
                "FUN_0800423c",
                "FUN_08004030",
                "FUN_08009278",
                "FUN_08002638",
                "FUN_08004e30",
                "FUN_080025e8",
                "FUN_08004250",
                "FUN_08004d2c",
                "FUN_080005b4",
                "FUN_08009798",
                "FUN_080024c4",
                "FUN_080041a0",
                "FUN_08004900",
                "FUN_080044e8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003b98",
            "calling": [
                "FUN_08003f34"
            ],
            "imported": false,
            "current_name": "parse_input_and_execute_command_08003b98"
        },
        "FUN_080024c4": {
            "renaming": {
                "FUN_080024c4": "process_data_and_update_params_080024c4",
                "local_13": "is_thirteenth_bit_set",
                "local_12": "is_eighth_bit_set",
                "local_11": "is_tenth_bit_set",
                "PTR_DAT_080025d8": "ptr_dat_080025d8",
                "PTR_DAT_080025dc": "ptr_dat_080025dc",
                "process_data_and_clear_bits_08001d4c": "process_data_and_clear_bits",
                "process_data_08003a74_08003a74": "process_data",
                "write_memory_with_byte_pattern_0800b430": "write_memory_with_byte_pattern",
                "update_params_and_calculate_hashes_0800283a": "update_params_and_calculate_hashes",
                "calculate_hash_08008e44": "calculate_hash",
                "FUNC_08008eec": "func_08008eec",
                "process_data_if_not_already_processed_08001e98": "process_data_if_not_already_processed",
                "process_if_second_element_equals_two_then_set_to_three_and_process_data_0800585c": "process_if_second_element_equals_two_then_set_to_three_and_process_data",
                "process_data_until_termination_or_interrupt_08002fd4": "process_data_until_termination_or_interrupt"
            },
            "code": "void process_data_and_update_params_080024c4(void)\n{\n    int is_bit_set;\n    int is_second_element_two;\n    int is_memory_written;\n    int is_eighth_bit_set;\n    int is_thirteenth_bit_set;\n    int is_tenth_bit_set;\n    int hash_1;\n    int hash_2;\n    int hash_3;\n    PTR_DAT_080025d8[1] = 5;\n    *(undefined4 *)PTR_DAT_080025dc = 0;\n    process_data_and_clear_bits_08001d4c();\n    process_data_08003a74_08003a74();\n    if (*PTR_DAT_080025d8 == '\\0') {\n        is_memory_written = write_memory_with_byte_pattern_0800b430(PTR_DAT_080025e0, 0, 0xc);\n        update_params_and_calculate_hashes_0800283a();\n        PTR_DAT_080025d8[1] = 0;\n        is_eighth_bit_set = (*(ushort *)(PTR_DAT_080025e4 + 0x2a) & 0x20) != 0;\n        is_thirteenth_bit_set = (*(ushort *)(PTR_DAT_080025e4 + 0x2a) & 0x80) != 0;\n        is_tenth_bit_set = (*(ushort *)(PTR_DAT_080025e4 + 0x2a) & 0x200) !=0;\n        hash_1 = calculate_hash_08008e44(is_eighth_bit_set ? 1 : -1);\n        hash_1 = FUNC_08008eec(hash_1, *(undefined4 *)(PTR_DAT_080025e4 + 0x38));\n        hash_2 = calculate_hash_08008e44(is_thirteenth_bit_set ? 1 : -1);\n        hash_2 = FUNC_08008eec(hash_2, *(undefined4 *)(PTR_DAT_080025e4 + 0x38));\n        hash_3 = calculate_hash_08008e44(is_tenth_bit_set ? 1 : -1);\n        hash_3 = FUNC_08008eec(hash_3, *(undefined4 *)(PTR_DAT_080025e4 + 0x38));\n        process_data_if_not_already_processed_08001e98(hash_1, hash_2, hash_3, *(undefined4 *)(PTR_DAT_080025e4 + 0x30), 0);\n        is_second_element_two = process_if_second_element_equals_two_then_set_to_three_and_process_data_0800585c();\n        if(!is_second_element_two) {\n            process_data_until_termination_or_interrupt_08002fd4();\n        }\n        update_params_and_calculate_hashes_0800283a();\n        is_bit_set = (PTR_DAT_080025e4[0x28] & 8) != 0;\n        *(undefined4 *)PTR_DAT_080025dc = is_bit_set ? 1 : 0;\n    }\n    return;\n}",
            "called": [
                "FUN_08002fd4",
                "FUN_08001d4c",
                "FUN_0800283a",
                "FUN_08008e44",
                "FUN_08001e98",
                "FUN_0800585c",
                "FUN_0800b430",
                "FUN_08008eec",
                "FUN_08003a74"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080024c4",
            "calling": [
                "FUN_08003b98"
            ],
            "imported": false,
            "current_name": "process_data_and_update_params_080024c4"
        },
        "FUN_08002f40": {
            "renaming": {
                "FUN_08002f40": "update_character_if_different_08002f40",
                "*PTR_DAT_08002f6c": "*target_char",
                "*PTR_DAT_08002f70": "*current_char",
                "uVar1": "incremented_char",
                "increment_char_and_reset_if_twelve_08002870": "increment_and_reset_if_twelve"
            },
            "code": "void update_character_if_different_08002f40(void)\n{\n  char current_char = *PTR_DAT_08002f70;\n  char target_char = *PTR_DAT_08002f6c;\n  if (current_char != target_char) {\n    char incremented_char = increment_and_reset_if_twelve(current_char);\n    *PTR_DAT_08002f70 = incremented_char;\n  }\n  return;\n}",
            "called": [
                "FUN_08002870"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002f40",
            "calling": [
                "FUN_080053a0"
            ],
            "imported": false,
            "current_name": "update_character_if_different_08002f40"
        },
        "FUN_08009054": {
            "renaming": {
                "FUN_08009054": "FUNC_08009054"
            },
            "code": "\nuint FUNC_08009054(uint param_1,uint param_2,undefined4 param_3,uint param_4)\n\n{\n  uint uVar1;\n  uint uVar2;\n  int iVar3;\n  uint uVar4;\n  int iVar5;\n  uint uVar6;\n  bool bVar7;\n  bool bVar8;\n  bool bVar9;\n  \n  uVar2 = param_1 >> 0x17 & 0xff;\n  bVar7 = uVar2 == 0;\n  if (!bVar7) {\n    param_4 = param_2 >> 0x17 & 0xff;\n    bVar7 = param_4 == 0;\n  }\n  if (!bVar7) {\n    bVar7 = uVar2 == 0xff;\n  }\n  if (!bVar7) {\n    bVar7 = param_4 == 0xff;\n  }\n  if (bVar7) {\n    param_4 = param_2 >> 0x17 & 0xff;\n    uVar6 = param_1;\n    if (uVar2 == 0xff) {\n      if (((param_1 & 0x7fffff) != 0) || (uVar6 = param_2, param_4 == 0xff)) {\nLAB_0800904a:\n        return uVar6 | 0x7fc00000;\n      }\n    }\n    else {\n      if (param_4 == 0xff) {\n        uVar6 = param_2;\n        if ((param_2 & 0x7fffff) == 0) {\nLAB_08009000:\n          return (param_1 ^ param_2) & 0x80000000;\n        }\n        goto LAB_0800904a;\n      }\n      bVar7 = (param_1 & 0x7fffffff) == 0;\n      if (!bVar7) {\n        bVar7 = (param_2 & 0x7fffffff) == 0;\n      }\n      if (!bVar7) {\n        bVar7 = uVar2 == 0;\n        uVar6 = param_1 & 0x80000000;\n        while( true ) {\n          if (bVar7) {\n            param_1 = param_1 << 1;\n            bVar7 = (param_1 & 0x800000) == 0;\n          }\n          if (!bVar7) break;\n          uVar2 = uVar2 - 1;\n        }\n        param_1 = param_1 | uVar6;\n        bVar7 = param_4 == 0;\n        uVar6 = param_2 & 0x80000000;\n        while( true ) {\n          if (bVar7) {\n            param_2 = param_2 << 1;\n            bVar7 = (param_2 & 0x800000) == 0;\n          }\n          if (!bVar7) break;\n          param_4 = param_4 - 1;\n        }\n        param_2 = param_2 | uVar6;\n        goto LAB_0800906c;\n      }\n      if ((param_1 & 0x7fffffff) == 0) {\n        if ((param_2 & 0x7fffffff) != 0) goto LAB_08009000;\n        goto LAB_0800904a;\n      }\n    }\n    param_1 = param_1 ^ param_2;\n  }\n  else {\nLAB_0800906c:\n    iVar3 = uVar2 - param_4;\n    if (param_2 << 9 == 0) {\n      param_1 = (param_1 ^ param_2) & 0x80000000 | param_1 & 0x7fffff;\n      bVar9 = SCARRY4(iVar3,0x7f);\n      iVar5 = iVar3 + 0x7f;\n      bVar7 = iVar5 < 0;\n      bVar8 = iVar5 == 0;\n      if (!bVar8 && bVar7 == bVar9) {\n        bVar9 = SBORROW4(0xff,iVar5);\n        bVar7 = 0xff - iVar5 < 0;\n        bVar8 = iVar5 == 0xff;\n      }\n      if (!bVar8 && bVar7 == bVar9) {\n        param_1 = param_1 | iVar5 * 0x800000;\n      }\n      if (!bVar8 && bVar7 == bVar9) {\n        return param_1;\n      }\n      param_1 = param_1 | 0x800000;\n      uVar2 = 0;\n      bVar8 = SBORROW4(iVar5,1);\n      uVar4 = iVar3 + 0x7e;\n      bVar7 = uVar4 == 0;\n      uVar6 = uVar4;\n    }\n    else {\n      uVar1 = (param_2 << 9) >> 4 | 0x10000000;\n      uVar2 = (param_1 << 9) >> 4 | 0x10000000;\n      param_1 = (param_1 ^ param_2) & 0x80000000;\n      bVar7 = uVar1 <= uVar2;\n      if (!bVar7) {\n        uVar2 = uVar2 << 1;\n      }\n      uVar4 = iVar3 + 0x7d + (uint)bVar7;\n      uVar6 = 0x800000;\n      do {\n        if (uVar1 <= uVar2) {\n          uVar2 = uVar2 - uVar1;\n          param_1 = param_1 | uVar6;\n        }\n        bVar7 = uVar1 >> 1 <= uVar2;\n        if (bVar7) {\n          uVar2 = uVar2 - (uVar1 >> 1);\n        }\n        if (bVar7) {\n          param_1 = param_1 | uVar6 >> 1;\n        }\n        bVar7 = uVar1 >> 2 <= uVar2;\n        if (bVar7) {\n          uVar2 = uVar2 - (uVar1 >> 2);\n        }\n        if (bVar7) {\n          param_1 = param_1 | uVar6 >> 2;\n        }\n        bVar7 = uVar1 >> 3 <= uVar2;\n        if (bVar7) {\n          uVar2 = uVar2 - (uVar1 >> 3);\n        }\n        if (bVar7) {\n          param_1 = param_1 | uVar6 >> 3;\n        }\n        uVar2 = uVar2 * 0x10;\n        bVar7 = uVar2 == 0;\n        if (!bVar7) {\n          uVar6 = uVar6 >> 4;\n          bVar7 = uVar6 == 0;\n        }\n      } while (!bVar7);\n      bVar8 = SBORROW4(uVar4,0xfd);\n      bVar7 = uVar4 == 0xfd;\n      uVar6 = uVar4 - 0xfd;\n      if (uVar4 < 0xfe) {\n        param_1 = param_1 + uVar4 * 0x800000 + (uint)(uVar1 <= uVar2);\n        if (uVar2 - uVar1 == 0) {\n          param_1 = param_1 & 0xfffffffe;\n        }\n        return param_1;\n      }\n    }\n    if (bVar7 || (int)uVar6 < 0 != bVar8) {\n      bVar7 = (int)(uVar4 + 0x19) < 0;\n      if (uVar4 == 0xffffffe7 || bVar7 != SCARRY4(uVar4,0x19)) {\n        param_1 = param_1 & 0x80000000;\n      }\n      if (uVar4 == 0xffffffe7 || bVar7 != SCARRY4(uVar4,0x19)) {\n        return param_1;\n      }\n      uVar6 = (param_1 << 1) >> (-uVar4 & 0xff);\n      uVar4 = param_1 << (uVar4 + 0x20 & 0xff);\n      uVar6 = ((uint)((param_1 & 0x80000000) != 0) << 0x1f | uVar6 >> 1) + (uint)((byte)uVar6 & 1);\n      if ((uVar2 | uVar4 << 1) == 0) {\n        uVar6 = uVar6 & ~(uVar4 >> 0x1f);\n      }\n      return uVar6;\n    }\n  }\n  return param_1 & 0x80000000 | 0x7f800000;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08009054",
            "calling": [
                "FUN_08004250",
                "FUN_08001994",
                "FUN_080004fc",
                "FUN_08004940",
                "FUN_08002908",
                "FUN_08002e08",
                "FUN_080028bc",
                "FUN_08003004",
                "FUN_08003618",
                "FUN_08001f00"
            ],
            "imported": false,
            "current_name": "FUNC_08009054"
        },
        "FUN_080025e8": {
            "renaming": {
                "FUN_080025e8": "activate_sensor_if_not_active_080025e8",
                "PTR_DAT_08002634": "sensor_data",
                "activate_first_function": "do_nothing_and_return",
                "activate_second_function_twice": "do_nothing_twice",
                "is_condition_met": "is_condition_met",
                "clear_bits_and_check_condition": "clear_bits_and_check_condition"
            },
            "code": "void activate_sensor_if_not_active_080025e8(void)\n{\n  bool is_sensor_active = (PTR_DAT_08002634[2] & 0x10);\n  if (!is_sensor_active) {\n    PTR_DAT_08002634[2] |= 0x10;\n    activate_first_function();\n    activate_second_function_twice();\n    bool is_condition_met = ((byte)PTR_DAT_08002634[1] - 3 < 3);\n    if (is_condition_met) {\n      PTR_DAT_08002634[2] |= 0x20;\n      clear_bits_and_check_condition();\n    }\n  }\n  return;\n}",
            "called": [
                "FUN_08005250",
                "FUN_080057e4",
                "FUN_08000210"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080025e8",
            "calling": [
                "FUN_08005900",
                "FUN_080005b4",
                "FUN_08003b98",
                "FUN_0800195c",
                "FUN_08003a18"
            ],
            "imported": false,
            "current_name": "activate_sensor_if_not_active_080025e8"
        },
        "FUN_080001c8": {
            "renaming": {
                "FUN_080001c8": "do_nothing_080001c8"
            },
            "code": "\nvoid do_nothing_080001c8(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080001c8",
            "calling": [
                "FUN_08000220"
            ],
            "imported": false,
            "current_name": "do_nothing_080001c8"
        },
        "FUN_08005250": {
            "renaming": {
                "FUN_08005250": "do_nothing_and_return_08005250",
                "do_nothing_08005214": "do_nothing"
            },
            "code": "void do_nothing_and_return_08005250(void)\n{\n  do_nothing();\n  return;\n}",
            "called": [
                "FUN_08005214"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005250",
            "calling": [
                "FUN_080025e8",
                "FUN_0800525c",
                "FUN_08005238"
            ],
            "imported": false,
            "current_name": "do_nothing_and_return_08005250"
        },
        "FUN_08007430": {
            "renaming": {
                "FUN_08007430": "infinite_loop_08007430"
            },
            "code": "void infinite_loop_08007430(void)\n{\n  while(true) {\n    // Do nothing\n  }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007430",
            "calling": [
                "FUN_08007436"
            ],
            "imported": false,
            "current_name": "infinite_loop_08007430"
        },
        "FUN_08008640": {
            "renaming": {
                "FUN_08008640": "FUNC_08008640"
            },
            "code": "\nulonglong FUNC_08008640(undefined4 param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  ulonglong uVar1;\n  longlong lVar2;\n  uint uVar3;\n  uint uVar4;\n  int iVar5;\n  uint uVar6;\n  uint unaff_r5;\n  uint uVar7;\n  uint uVar8;\n  bool bVar9;\n  bool bVar10;\n  bool bVar11;\n  ulonglong uVar12;\n  \n  uVar12 = CONCAT44(param_2,param_1);\n  uVar7 = 0x7ff;\n  uVar4 = param_2 >> 0x14 & 0x7ff;\n  bVar9 = uVar4 == 0;\n  if (!bVar9) {\n    unaff_r5 = param_4 >> 0x14 & 0x7ff;\n    bVar9 = unaff_r5 == 0;\n  }\n  if (!bVar9) {\n    bVar9 = uVar4 == 0x7ff;\n  }\n  if (!bVar9) {\n    bVar9 = unaff_r5 == 0x7ff;\n  }\n  if (bVar9) {\n    uVar12 = binary_conversion_0800881c();\n  }\n  uVar3 = (uint)(uVar12 >> 0x20);\n  iVar5 = uVar4 + unaff_r5;\n  uVar4 = uVar3 ^ param_4;\n  uVar3 = uVar3 & ~(uVar7 << 0x15);\n  param_4 = param_4 & ~(uVar7 << 0x15);\n  bVar9 = ((uint)uVar12 | uVar3 << 0xc) == 0;\n  if (!bVar9) {\n    bVar9 = (param_3 | param_4 << 0xc) == 0;\n  }\n  uVar3 = uVar3 | 0x100000;\n  param_4 = param_4 | 0x100000;\n  if (bVar9) {\n    param_3 = (uint)uVar12 | param_3;\n    param_4 = (uVar4 & 0x80000000 | uVar3) ^ param_4;\n    uVar4 = uVar7 >> 1;\n    bVar11 = SBORROW4(iVar5,uVar4);\n    uVar6 = iVar5 - uVar4;\n    bVar9 = uVar6 == 0;\n    uVar3 = uVar6;\n    if (!bVar9 && (int)uVar4 <= iVar5) {\n      bVar11 = SBORROW4(uVar7,uVar6);\n      uVar3 = uVar7 - uVar6;\n      bVar9 = uVar7 == uVar6;\n    }\n    if (!bVar9 && (int)uVar3 < 0 == bVar11) {\n      param_4 = param_4 | uVar6 * 0x100000;\n    }\n    if (!bVar9 && (int)uVar3 < 0 == bVar11) {\n      return CONCAT44(param_4,param_3);\n    }\n    param_4 = param_4 | 0x100000;\n    uVar7 = 0;\n    bVar11 = SBORROW4(uVar6,1);\n    uVar6 = uVar6 - 1;\n    bVar9 = uVar6 == 0;\n    uVar4 = uVar6;\n  }\n  else {\n    uVar1 = (uVar12 & 0xffffffff) * (ulonglong)param_3;\n    uVar12 = (uVar12 & 0xffffffff) * (ulonglong)param_4 +\n             (ulonglong)uVar3 * (ulonglong)param_3 + (uVar1 >> 0x20);\n    uVar8 = (uint)uVar12;\n    lVar2 = (ulonglong)uVar3 * (ulonglong)param_4 + (uVar12 >> 0x20);\n    uVar7 = (uint)lVar2;\n    uVar3 = (uint)((ulonglong)lVar2 >> 0x20);\n    if ((int)uVar1 != 0) {\n      uVar8 = uVar8 | 1;\n    }\n    uVar6 = (iVar5 + -0x3ff) - (uint)(uVar3 < 0x200);\n    if (uVar3 < 0x200) {\n      bVar9 = (uVar8 & 0x80000000) != 0;\n      uVar8 = uVar8 << 1;\n      lVar2 = CONCAT44(uVar3 * 2 + (uint)(CARRY4(uVar7,uVar7) || CARRY4(uVar7 * 2,(uint)bVar9)),\n                       uVar7 * 2 + (uint)bVar9);\n    }\n    param_4 = uVar4 & 0x80000000 | (int)((ulonglong)lVar2 >> 0x20) << 0xb | (uint)lVar2 >> 0x15;\n    param_3 = (uint)lVar2 << 0xb | uVar8 >> 0x15;\n    uVar7 = uVar8 * 0x800;\n    bVar10 = 0xfc < uVar6;\n    bVar11 = SBORROW4(uVar6,0xfd);\n    uVar3 = uVar6 - 0xfd;\n    bVar9 = uVar3 == 0;\n    uVar4 = uVar3;\n    if (bVar10 && !bVar9) {\n      bVar10 = 0x6ff < uVar3;\n      bVar11 = SBORROW4(uVar3,0x700);\n      uVar4 = uVar6 - 0x7fd;\n      bVar9 = uVar3 == 0x700;\n    }\n    if (!bVar10 || bVar9) {\n      bVar9 = 0x7fffffff < uVar7;\n      if (uVar7 == 0x80000000) {\n        bVar9 = (uVar8 >> 0x15 & 1) != 0;\n      }\n      return CONCAT44(param_4 + uVar6 * 0x100000 + (uint)CARRY4(param_3,(uint)bVar9),param_3 + bVar9\n                     );\n    }\n  }\n  if (!bVar9 && (int)uVar4 < 0 == bVar11) {\n    return (ulonglong)(param_4 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  bVar10 = SCARRY4(uVar6,0x36);\n  bVar9 = (int)(uVar6 + 0x36) < 0;\n  bVar11 = uVar6 == 0xffffffca;\n  if (bVar11 || bVar9 != bVar10) {\n    param_3 = 0;\n  }\n  if (bVar11 || bVar9 != bVar10) {\n    param_4 = param_4 & 0x80000000;\n  }\n  if (bVar11 || bVar9 != bVar10) {\n    return CONCAT44(param_4,param_3);\n  }\n  uVar4 = -uVar6;\n  uVar3 = uVar4 - 0x20;\n  if (0x1f < (int)uVar4) {\n    uVar6 = param_3 >> (uVar3 & 0xff) | param_4 << (0x20 - uVar3 & 0xff);\n    uVar4 = (param_4 >> (uVar3 & 0xff) & ~((param_4 & 0x80000000) >> (uVar3 & 0xff))) -\n            ((int)uVar6 >> 0x1f);\n    if ((uVar7 | param_3 << (0x20 - uVar3 & 0xff) | uVar6 << 1) == 0) {\n      uVar4 = uVar4 & ~(uVar6 >> 0x1f);\n    }\n    return CONCAT44(param_4,uVar4) & 0x80000000ffffffff;\n  }\n  iVar5 = uVar4 - 0x14;\n  if (iVar5 == 0 || iVar5 < 0 != SCARRY4(uVar3,0xc)) {\n    uVar8 = param_3 << (uVar6 + 0x20 & 0xff);\n    uVar3 = param_3 >> (uVar4 & 0xff) | param_4 << (uVar6 + 0x20 & 0xff);\n    uVar6 = uVar3 + -((int)uVar8 >> 0x1f);\n    if ((uVar7 | uVar8 << 1) == 0) {\n      uVar6 = uVar6 & ~(uVar8 >> 0x1f);\n    }\n    return CONCAT44((param_4 & 0x80000000) +\n                    ((param_4 & 0x7fffffff) >> (uVar4 & 0xff)) +\n                    (uint)CARRY4(uVar3,-((int)uVar8 >> 0x1f)),uVar6);\n  }\n  uVar4 = 0xc - iVar5;\n  uVar6 = param_3 << (uVar4 & 0xff);\n  uVar4 = param_3 >> (0x20 - uVar4 & 0xff) | param_4 << (uVar4 & 0xff);\n  uVar3 = uVar4 + -((int)uVar6 >> 0x1f);\n  if ((uVar7 | uVar6 << 1) == 0) {\n    uVar3 = uVar3 & ~(uVar6 >> 0x1f);\n  }\n  return CONCAT44((param_4 & 0x80000000) + (uint)CARRY4(uVar4,-((int)uVar6 >> 0x1f)),uVar3);\n}\n\n",
            "called": [
                "FUN_0800881c"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08008640",
            "calling": [
                "FUN_080046d0",
                "FUN_0800af78",
                "FUN_08004940",
                "FUN_08009d78",
                "FUN_08003004",
                "FUN_0800056c",
                "FUN_0800b2e8",
                "FUN_08002638",
                "FUN_08001f00",
                "FUN_08009b24",
                "FUN_08002c18",
                "FUN_08001994",
                "FUN_0800a1bc",
                "FUN_0800a348",
                "FUN_0800a5a0",
                "FUN_0800adf0",
                "FUN_080044e8"
            ],
            "imported": false,
            "current_name": "FUNC_08008640"
        },
        "FUN_08007436": {
            "renaming": {
                "FUN_08007436": "set_flags_and_process_data_08007436",
                "local_4c": "flag1",
                "local_48": "flag2",
                "local_34": "num1",
                "local_30": "num2",
                "local_2c": "num3",
                "local_28": "num4",
                "local_24": "num5",
                "local_20": "num6",
                "local_1c": "num7",
                "local_18": "num8",
                "local_14": "num9",
                "local_10": "num10",
                "local_c": "num11",
                "DAT_080074c0": "flag_data_1",
                "DAT_080074c4": "flag_data_2",
                "PTR_FUN_08005cec": "FUNC_08005cec",
                "PTR_FUN_0800618c": "process_data_0800618c"
            },
            "code": "void set_flags_and_process_data_08007436(void)\n{\n  int result;\n  uint *flag_ptr = (uint *)(DAT_080074c0 + 0x40);\n  uint *data_ptr = DAT_080074c4;\n  *flag_ptr |= 0x10000000;\n  *data_ptr |= 0xc000;\n  int flag1 = 1;\n  int flag2 = 1;\n  int num1 = 2;\n  int num2 = 0x400000;\n  int num3 = 8;\n  int num4 = 0x150;\n  int num5 = 2;\n  int num6 = 7;\n  result = PTR_FUNC_08005cec(&flag1);\n  if (result != 0) {\n    infinite_loop_08007430();\n  }\n  int num7 = 0xf;\n  int num8 = 2;\n  int num9 = 0;\n  int num10 = 0x1400;\n  int num11 = 0x1000;\n  result = PTR_FUN_0800618c(&num7,5);\n  if (result != 0) {\n    infinite_loop_08007430();\n  }\n  return;\n}",
            "called": [
                "FUN_0800618c",
                "FUN_08005cec",
                "FUN_08007430"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007436",
            "calling": [
                "FUN_08007540"
            ],
            "imported": false,
            "current_name": "set_flags_and_process_data_08007436"
        },
        "FUN_08005814": {
            "renaming": {
                "FUN_08005814": "initialize_memory_and_values_08005814",
                "PTR_DAT_08005834": "memory_pointer",
                "calculate_local_value_08005324": "calculate_local_value",
                "flag_pointer": "PTR_DAT_08005838"
            },
            "code": "void initialize_memory_and_values_08005814(void)\n{\n    write_memory_with_byte_pattern(PTR_DAT_08005834, 0, 0x24);\n    calculate_local_value(800);\n    *flag_pointer = 0;\n    return;\n}",
            "called": [
                "FUN_08005324",
                "FUN_0800b430"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005814",
            "calling": [
                "FUN_08001ddc"
            ],
            "imported": false,
            "current_name": "initialize_memory_and_values_08005814"
        },
        "FUN_08005bdc": {
            "renaming": {
                "FUN_08005bdc": "set_byte_in_memory_08005bdc",
                "param_1": "address",
                "param_2": "value",
                "DAT_08005c28": "data_array_1",
                "DAT_08005c2c": "data_array_2"
            },
            "code": "void set_byte_in_memory_08005bdc(byte address, uint value) {\n  if (address < 0) {\n    *(char *)((address & 0xf) + DAT_08005c28 + 0x14) = (char)((value & 0xff) << 4);\n  }\n  else {\n    *(char *)((char)address + DAT_08005c2c + 0x300) = (char)((value & 0xff) << 4);\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005bdc",
            "calling": [
                "FUN_08005c30"
            ],
            "imported": false,
            "current_name": "set_byte_in_memory_08005bdc"
        },
        "FUN_080002f0": {
            "renaming": {
                "FUN_080002f0": "write_memory_with_byte_pattern_080002f0",
                "PTR_DAT_08000308": "address",
                "PTR_DAT_0800030c": "size",
                "write_memory_with_byte_pattern_0800b430": "write_memory_with_byte_pattern",
                "undefined4": "uint32_t",
                "0xff": "pattern"
            },
            "code": "void write_memory_with_byte_pattern_080002f0(uint8_t* PTR_DAT_08000308, uint8_t pattern, PTR_DAT_0800030c_t PTR_DAT_0800030c) {\n  write_memory_with_byte_pattern_080002f0_0800b430(PTR_DAT_08000308, pattern, PTR_DAT_0800030c);\n  *(uint32_t *)PTR_DAT_0800030c = 1;\n  return;\n}",
            "called": [
                "FUN_0800b430"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080002f0",
            "calling": [
                "FUN_08000374",
                "FUN_08000310",
                "FUN_08000340",
                "FUN_080003ec"
            ],
            "imported": false,
            "current_name": "write_memory_with_byte_pattern_080002f0"
        },
        "FUN_080073c0": {
            "renaming": {
                "FUN_080073c0": "do_nothing_080073c0"
            },
            "code": "\nvoid do_nothing_080073c0(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080073c0",
            "calling": [
                "FUN_0800738e"
            ],
            "imported": false,
            "current_name": "do_nothing_080073c0"
        },
        "FUN_0800778c": {
            "renaming": {
                "FUN_0800778c": "decode_and_set_params_0800778c",
                "local_24": "bit_position",
                "local_20": "bitstream_1",
                "local_1c": "bitstream_2",
                "local_18": "bitstream_3",
                "local_14": "bitstream_4",
                "local_10": "current_params",
                "local_c": "current_bitstream_position"
            },
            "code": "void decode_and_set_params_0800778c(void)\n{\n  int bit_position;\n  uint bit_flag;\n  uint bitstream_1;\n  uint bitstream_2;\n  uint bitstream_3;\n  uint bitstream_4;\n  uint *current_params;\n  uint current_bitstream_position;\n\n  for (current_bitstream_position = 0; current_bitstream_position < 0x11; current_bitstream_position++) {\n    current_params = (uint *)(PTR_DAT_0800784c + current_bitstream_position * 0x18);\n    bit_flag = 1 << (*current_params >> 4 & 0xff);\n    *(uint *)(DAT_08007850 + 0x30) |= bit_flag;\n    bit_position = *current_params & 0xf;\n    bitstream_1 = current_params[1];\n    bitstream_2 = current_params[2];\n    bitstream_3 = current_params[3];\n    bitstream_4 = current_params[4];\n    decode_bitstream_08006e88(((*current_params >> 4) + 0x100080) * 0x400, &bit_flag);\n    if ((int)current_params[5] >= -1) {\n      set_param_value_0800733e(((*current_params >> 4) + 0x100080) * 0x400, 1 << bit_position & 0xffff, current_params[5] & 0xff);\n    }\n  }\n  return;\n}",
            "called": [
                "FUN_0800733e",
                "FUN_08006e88"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800778c",
            "calling": [
                "FUN_08007540"
            ],
            "imported": false,
            "current_name": "decode_and_set_params_0800778c"
        },
        "FUN_080001d4": {
            "renaming": {
                "FUN_080001d4": "do_nothing_080001d4"
            },
            "code": "\nvoid do_nothing_080001d4(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080001d4",
            "calling": [
                "FUN_08000210"
            ],
            "imported": false,
            "current_name": "do_nothing_080001d4"
        },
        "FUN_08001ddc": {
            "renaming": {
                "FUN_08001ddc": "process_data_and_input_08001ddc_08001ddc",
                "PTR_DAT_08001e90": "data_pointer_08001e90",
                "PTR_DAT_08001e94": "data_pointer_08001e94",
                "do_nothing_08008244": "do_nothing",
                "check_and_print_settings_080051b4": "check_and_print_settings",
                "update_value_and_process_data_0800583c": "update_value_and_process_data",
                "write_memory_with_byte_pattern_0800b430": "write_memory_with_byte_pattern",
                "copy_and_increment_and_write_to_memory_08002f24": "copy_and_increment_and_write_to_memory",
                "write_and_set_params_080004ac": "write_and_set_params",
                "set_pointers_and_wait_until_ready_080039a0": "set_pointers_and_wait_until_ready",
                "reset_pointer_to_zero_and_return_08005238": "reset_pointer_to_zero_and_return",
                "clear_ptr_dat_0800020c_080001f8": "clear_ptr_dat_0800020c_080001f8",
                "set_value_based_on_flag_0800192c": "set_value_based_on_flag",
                "initialize_memory_and_values_08005814": "initialize_memory_and_values",
                "update_params_and_calculate_hashes_0800283a": "update_params_and_calculate_hashes",
                "do_nothing_080082ba": "do_nothing",
                "wait_until_all_bits_are_set_and_continue_after_reset_080041a0": "wait_until_all_bits_are_set_and_continue_after_reset",
                "wait_for_data_or_timeout_080039bc": "wait_for_data_or_timeout",
                "process_data_08003a74_08003a74": "process_data",
                "process_input_08003f34_08003f34": "process_input"
            },
            "code": "void process_data_and_input_08001ddc_08001ddc(void)\\n{\\n  do_nothing();\\n  check_and_print_settings();\\n  update_value_and_process_data();\\n  write_memory_with_byte_pattern(PTR_DAT_08001e90, 0, 0x14);\\n  *PTR_DAT_08001e90 = 1;\\n  PTR_DAT_08001e90[1] = 1;\\n  do {\\n    if (*PTR_DAT_08001e90 != \"\\0\") {\\n      do_nothing();\\n      copy_and_increment_and_write_to_memory();\\n      write_and_set_params();\\n      set_pointers_and_wait_until_ready();\\n      reset_pointer_to_zero_and_return();\\n      clear_ptr_dat_0800020c_080001f8();\\n      set_value_based_on_flag();\\n      initialize_memory_and_values();\\n      update_params_and_calculate_hashes();\\n      *PTR_DAT_08001e90 = 0;\\n      PTR_DAT_08001e90[2] = 0;\\n      if ((PTR_DAT_08001e94[0x28] & 2) != 0) {\\n        PTR_DAT_08001e90[0x10] = 1;\\n      }\\n      if ((PTR_DAT_08001e90[1] == 1) && ((PTR_DAT_08001e94[0x28] & 0x10) != 0)) {\\n        PTR_DAT_08001e90[1] = 6;\\n      }\\n      if (PTR_DAT_08001e90[1] == 6) {\\n        wait_until_all_bits_are_set_and_continue_after_reset(2);\\n      }\\n      else {\\n        PTR_DAT_08001e90[1] = 0;\\n        wait_for_data_or_timeout();\\n      }\\n    }\\n    process_data();\\n    process_input();\\n  } while(true);\\n}",
            "called": [
                "FUN_080039a0",
                "FUN_0800283a",
                "FUN_080039bc",
                "FUN_0800583c",
                "FUN_080001f8",
                "FUN_080004ac",
                "FUN_080051b4",
                "FUN_08005814",
                "FUN_0800b430",
                "FUN_08002f24",
                "FUN_080082ba",
                "FUN_08003a74",
                "FUN_08008244",
                "FUN_08003f34",
                "FUN_08005238",
                "FUN_0800192c",
                "FUN_080041a0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001ddc",
            "calling": [
                "FUN_08007540"
            ],
            "imported": false,
            "current_name": "process_data_and_input_08001ddc_08001ddc"
        },
        "FUN_080069b4": {
            "renaming": {
                "FUN_080069b4": "set_bit_at_index_080069b4",
                "param_1": "index",
                "DAT_080069e0": "base_address",
                "uint": "unsigned_integer",
                "int": "integer",
                "char": "character",
                "PTR_": "pointer_",
                "shift_amount": "shift_amount",
                "bit_position": "bit_position",
                "target_address": "target_address",
                "bit_mask": "bit_mask"
            },
            "code": "void set_bit_at_index_080069b4(int index){\n    int DAT_080069e0 = DAT_080069e0;\n    int shift_amount = index >> 5;\n    int bit_position = index & 0x1f;\n    int* target_address = (int*)(DAT_080069e0 + shift_amount * 4);\n    int bit_mask = 1 << bit_position;\n    *target_address = bit_mask;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080069b4",
            "calling": [
                "FUN_08006d2e"
            ],
            "imported": false,
            "current_name": "set_bit_at_index_080069b4"
        },
        "FUN_08009228": {
            "renaming": {
                "FUN_08009228": "is_end_of_string_08009228",
                "in_CY": "input_char"
            },
            "code": "bool is_end_of_string_08009228(void)\n{\n    char input_char;\n    calculate_concatenated_parameters();\n    return input_char == '\\0';\n}",
            "called": [
                "FUN_08009204"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009228",
            "calling": [
                "FUN_08002afc",
                "FUN_080005b4",
                "FUN_08003826",
                "FUN_080029d8",
                "FUN_08003004",
                "FUN_08004e30"
            ],
            "imported": false,
            "current_name": "is_end_of_string_08009228"
        },
        "FUN_08007c7c": {
            "renaming": {
                "FUN_08007c7c": "update_registers_if_flag_set_08007c7c",
                "_DAT_40000010": "_register_1",
                "_DAT_4000000c": "_register_2",
                "update_value_at_address_08005778": "update_value_at_address_1",
                "update_value_at_address_08005760": "update_value_at_address_2",
                "FUNC_080053a0": "function_1"
            },
            "code": "void update_registers_if_flag_set_08007c7c(void)\n{\n  bool flag_2_set = ((_DAT_40000010 & 2) != 0);\n  bool flag_4_set = ((_DAT_40000010 & 4) != 0);\n  bool flag_1_set = ((_DAT_40000010 & 1) != 0);\n  bool flag_2_cleared = ((_DAT_4000000c & 2) == 0);\n  bool flag_4_cleared = ((_DAT_4000000c & 4) == 0);\n  bool flag_1_cleared = ((_DAT_4000000c & 1) == 0);\n  \n  if (flag_2_set && flag_2_cleared) {\n    _DAT_40000010 &= 0xfffffffd;\n    update_value_at_address_08005778();\n  }\n  if (flag_4_set && flag_4_cleared) {\n    _DAT_40000010 &= 0xfffffffb;\n    update_value_at_address_08005760();\n  }\n  if (flag_1_set && flag_1_cleared) {\n    _DAT_40000010 &= 0xfffffffe;\n    FUNC_080053a0();\n  }\n  return;\n}",
            "called": [
                "FUN_080053a0",
                "FUN_08005778",
                "FUN_08005760"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007c7c",
            "calling": [],
            "imported": false,
            "current_name": "update_registers_if_flag_set_08007c7c"
        },
        "FUN_08007b70": {
            "renaming": {
                "FUN_08007b70": "set_flags_based_on_data_08007b70",
                "local_c": "flags",
                "_DAT_40000034": "data_flag_1",
                "_DAT_40000038": "data_flag_2",
                "_DAT_4000000c": "status_register",
                "_DAT_40000000": "control_register"
            },
            "code": "void set_flags_based_on_data_08007b70(void)\n{\n  uint8_t flags = 1;\n  if (_DAT_40000034 != 0) {\n    flags |= 3;\n  }\n  if (_DAT_40000038 != 0) {\n    flags |= 4;\n  }\n  _DAT_4000000c |= flags;\n  _DAT_40000000 |= 1;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007b70",
            "calling": [
                "FUN_08005790"
            ],
            "imported": false,
            "current_name": "set_flags_based_on_data_08007b70"
        },
        "FUN_08004d2c": {
            "renaming": {
                "FUN_08004d2c": "is_checksum_valid_08004d2c",
                "param_1": "checksum",
                "param_2": "data",
                "iVar1": "is_valid"
            },
            "code": "bool is_checksum_valid_08004d2c(byte checksum, undefined *data) {\n    int is_valid = is_checksum_valid_08004d2c_080003ec(data, (ushort)checksum * 0x101 + 0x300, 0x100);\n    if (is_valid == 0) {\n        *data = 0;\n        write_to_memory_at_offset(checksum, data);\n    }\n    return is_valid != 0;\n}",
            "called": [
                "FUN_08004bc0",
                "FUN_080003ec"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004d2c",
            "calling": [
                "FUN_080039bc",
                "FUN_08003b98"
            ],
            "imported": false,
            "current_name": "is_checksum_valid_08004d2c"
        },
        "FUN_08003004": {
            "renaming": {
                "FUN_08003004": "FUNC_08003004"
            },
            "code": "\nvoid FUNC_08003004(undefined4 param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4,\n                 char param_5)\n\n{\n  undefined *puVar1;\n  undefined uVar2;\n  undefined4 uVar3;\n  int iVar4;\n  int iVar5;\n  int iVar6;\n  undefined4 uVar7;\n  undefined4 uVar8;\n  undefined4 uVar9;\n  undefined4 uVar10;\n  uint uVar11;\n  ushort *puVar12;\n  int iVar13;\n  uint uVar14;\n  undefined8 uVar15;\n  undefined8 uVar16;\n  undefined8 uVar17;\n  undefined4 local_20;\n  undefined4 local_1c;\n  \n  puVar12 = (ushort *)(PTR_DAT_08003234 + (uint)(byte)*PTR_DAT_08003230 * 0x40);\n  uVar3 = FUNC_08008eec(*(undefined4 *)PTR_DAT_08003238,param_1);\n  uVar15 = convert_to_big_endian_08008590(uVar3);\n  iVar4 = calculate_signed_integer_from_fixed_point_080095b8((int)uVar15,(int)((ulonglong)uVar15 >> 0x20));\n  uVar3 = FUNC_08008eec(*(undefined4 *)(PTR_DAT_08003238 + 4),param_2);\n  uVar15 = convert_to_big_endian_08008590(uVar3);\n  iVar5 = calculate_signed_integer_from_fixed_point_080095b8((int)uVar15,(int)((ulonglong)uVar15 >> 0x20));\n  uVar3 = FUNC_08008eec(*(undefined4 *)(PTR_DAT_08003238 + 8),param_3);\n  uVar15 = convert_to_big_endian_08008590(uVar3);\n  iVar6 = calculate_signed_integer_from_fixed_point_080095b8((int)uVar15,(int)((ulonglong)uVar15 >> 0x20));\n  *puVar12 = 0;\n  if (iVar4 < *(int *)PTR_DAT_0800323c) {\n    *puVar12 = *puVar12 | 0x20;\n  }\n  if (iVar5 < *(int *)(PTR_DAT_0800323c + 4)) {\n    *puVar12 = *puVar12 | 0x880;\n  }\n  if (iVar6 < *(int *)(PTR_DAT_0800323c + 8)) {\n    *puVar12 = *puVar12 | 0x200;\n  }\n  iVar13 = iVar4 - *(int *)PTR_DAT_0800323c;\n  if (iVar13 < 0) {\n    iVar13 = -iVar13;\n  }\n  *(int *)(puVar12 + 2) = iVar13;\n  iVar13 = iVar5 - *(int *)(PTR_DAT_0800323c + 4);\n  if (iVar13 < 0) {\n    iVar13 = -iVar13;\n  }\n  *(int *)(puVar12 + 4) = iVar13;\n  iVar13 = iVar6 - *(int *)(PTR_DAT_0800323c + 8);\n  if (iVar13 < 0) {\n    iVar13 = -iVar13;\n  }\n  *(int *)(puVar12 + 6) = iVar13;\n  uVar11 = *(uint *)(puVar12 + 6);\n  if (*(uint *)(puVar12 + 6) < *(uint *)(puVar12 + 4)) {\n    uVar11 = *(uint *)(puVar12 + 4);\n  }\n  uVar14 = *(uint *)(puVar12 + 2);\n  if (*(uint *)(puVar12 + 2) < uVar11) {\n    uVar14 = uVar11;\n  }\n  *(uint *)(puVar12 + 8) = uVar14;\n  if (*(int *)(puVar12 + 8) != 0) {\n    uVar3 = calculate_hash_08008e44(iVar4 - *(int *)PTR_DAT_0800323c);\n    uVar3 = FUNC_08009054(uVar3,*(undefined4 *)PTR_DAT_08003238);\n    uVar7 = calculate_hash_08008e44(iVar5 - *(int *)(PTR_DAT_0800323c + 4));\n    uVar7 = FUNC_08009054(uVar7,*(undefined4 *)(PTR_DAT_08003238 + 4));\n    uVar8 = calculate_hash_08008e44(iVar6 - *(int *)(PTR_DAT_0800323c + 8));\n    uVar8 = FUNC_08009054(uVar8,*(undefined4 *)(PTR_DAT_08003238 + 8));\n    uVar9 = FUNC_08008eec(uVar3,uVar3);\n    uVar10 = FUNC_08008eec(uVar7,uVar7);\n    uVar9 = FUNC_08008cdc(uVar9,uVar10);\n    uVar10 = FUNC_08008eec(uVar8,uVar8);\n    uVar9 = FUNC_08008cdc(uVar9,uVar10);\n    uVar15 = convert_to_big_endian_08008590(uVar9);\n    uVar15 = calculate_result_and_check_input_080098d0((int)uVar15,(int)((ulonglong)uVar15 >> 0x20));\n    uVar9 = calculate_float_bits_08008c30((int)uVar15,(int)((ulonglong)uVar15 >> 0x20));\n    *(undefined4 *)(puVar12 + 0x10) = uVar9;\n    uVar9 = FUNC_08009054(0x3f800000,*(undefined4 *)(puVar12 + 0x10));\n    if (param_5 == '\\0') {\n      local_1c = FUNC_08008eec(param_4,uVar9);\n    }\n    else {\n      local_1c = FUNC_08009054(0x3f800000,param_4);\n    }\n    uVar10 = FUNC_08008eec(*(undefined4 *)(puVar12 + 0x10),local_1c);\n    *(undefined4 *)(puVar12 + 10) = uVar10;\n    uVar10 = calculate_hash_08008e44(*(undefined4 *)(puVar12 + 8));\n    uVar10 = FUNC_08008eec(uVar10,local_1c);\n    uVar15 = convert_to_big_endian_08008590(uVar10);\n    uVar15 = calculate_value_from_parameters_08009318((int)uVar15,(int)((ulonglong)uVar15 >> 0x20));\n    uVar10 = calculate_shifted_value_08008bf0((int)uVar15,(int)((ulonglong)uVar15 >> 0x20));\n    *(undefined4 *)(puVar12 + 0x1e) = uVar10;\n    uVar10 = calculate_hash_08008e44(*(undefined4 *)(puVar12 + 8));\n    uVar10 = FUNC_08008eec(uVar10,uVar9);\n    uVar10 = FUNC_08008eec(uVar10,*(undefined4 *)(PTR_DAT_08003560 + 0x20));\n    uVar10 = FUNC_08009054(uVar10,DAT_08003564);\n    uVar15 = convert_to_big_endian_08008590(uVar10);\n    uVar15 = calculate_value_from_parameters_08009318((int)uVar15,(int)((ulonglong)uVar15 >> 0x20));\n    uVar10 = convert_to_int_08008ba0((int)uVar15,(int)((ulonglong)uVar15 >> 0x20));\n    *(undefined4 *)(puVar12 + 0x18) = uVar10;\n    uVar3 = FUNC_08008eec(uVar3,uVar9);\n    uVar7 = FUNC_08008eec(uVar7,uVar9);\n    uVar8 = FUNC_08008eec(uVar8,uVar9);\n    local_20 = 0;\n    if ((*PTR_DAT_08003568 != *PTR_DAT_0800356c) &&\n       (iVar13 = check_if_input_is_null_08009264_08009264(*(undefined4 *)(PTR_DAT_08003570 + 0x18),0), iVar13 != 0)) {\n      uVar9 = FUNC_08008eec(*(uint *)(PTR_DAT_08003570 + 0xc) ^ 0x80000000,uVar3);\n      uVar10 = FUNC_08008eec(*(undefined4 *)(PTR_DAT_08003570 + 0x10),uVar7);\n      uVar9 = FUNC_08008cd8(uVar9,uVar10);\n      uVar10 = FUNC_08008eec(*(undefined4 *)(PTR_DAT_08003570 + 0x14),uVar8);\n      uVar9 = FUNC_08008cd8(uVar9,uVar10);\n      uVar15 = convert_to_big_endian_08008590(uVar9);\n      iVar13 = is_end_of_string_08008b24((int)uVar15,(int)((ulonglong)uVar15 >> 0x20),DAT_08003550,DAT_08003554);\n      if (iVar13 != 0) {\n        iVar13 = is_end_of_string_08009228(*(undefined4 *)(PTR_DAT_08003570 + 0x18),*(undefined4 *)(puVar12 + 10)\n                             );\n        if (iVar13 == 0) {\n          local_20 = *(undefined4 *)(puVar12 + 10);\n        }\n        else {\n          local_20 = *(undefined4 *)(PTR_DAT_08003570 + 0x18);\n        }\n        uVar15 = convert_to_big_endian_08008590(uVar9);\n        iVar13 = is_end_of_string_08008b60((int)uVar15,(int)((ulonglong)uVar15 >> 0x20),DAT_08003558,DAT_0800355c\n                             );\n        if (iVar13 != 0) {\n          uVar15 = convert_to_big_endian_08008590(uVar9);\n          uVar15 = FUNC_080082d0(0,DAT_08003574,(int)uVar15,(int)((ulonglong)uVar15 >> 0x20));\n          uVar15 = FUNC_08008640((int)uVar15,(int)((ulonglong)uVar15 >> 0x20),0,DAT_08003578);\n          uVar15 = calculate_result_and_check_input_080098d0((int)uVar15,(int)((ulonglong)uVar15 >> 0x20));\n          uVar9 = calculate_float_bits_08008c30((int)uVar15,(int)((ulonglong)uVar15 >> 0x20));\n          uVar15 = convert_to_big_endian_08008590(local_20);\n          uVar10 = FUNC_08008eec(*(undefined4 *)(PTR_DAT_08003560 + 0x20),\n                                *(undefined4 *)(PTR_DAT_08003560 + 0x24));\n          uVar10 = FUNC_08008eec(uVar10,uVar9);\n          uVar16 = convert_to_big_endian_08008590(uVar10);\n          uVar17 = convert_to_big_endian_08008590(uVar9);\n          uVar17 = FUNC_080082d0(0,DAT_08003574,(int)uVar17,(int)((ulonglong)uVar17 >> 0x20));\n          uVar16 = FUNC_08008894((int)uVar16,(int)((ulonglong)uVar16 >> 0x20),(int)uVar17,\n                                (int)((ulonglong)uVar17 >> 0x20));\n          uVar16 = calculate_result_and_check_input_080098d0((int)uVar16,(int)((ulonglong)uVar16 >> 0x20));\n          iVar13 = is_end_of_string_08008b24((int)uVar15,(int)((ulonglong)uVar15 >> 0x20),(int)uVar16,\n                                (int)((ulonglong)uVar16 >> 0x20));\n          if (iVar13 == 0) {\n            uVar10 = FUNC_08008eec(*(undefined4 *)(PTR_DAT_08003560 + 0x20),\n                                  *(undefined4 *)(PTR_DAT_08003560 + 0x24));\n            uVar10 = FUNC_08008eec(uVar10,uVar9);\n            uVar15 = convert_to_big_endian_08008590(uVar10);\n            uVar16 = convert_to_big_endian_08008590(uVar9);\n            uVar16 = FUNC_080082d0(0,DAT_08003574,(int)uVar16,(int)((ulonglong)uVar16 >> 0x20));\n            uVar15 = FUNC_08008894((int)uVar15,(int)((ulonglong)uVar15 >> 0x20),(int)uVar16,\n                                  (int)((ulonglong)uVar16 >> 0x20));\n            uVar15 = calculate_result_and_check_input_080098d0((int)uVar15,(int)((ulonglong)uVar15 >> 0x20));\n            local_20 = calculate_float_bits_08008c30((int)uVar15,(int)((ulonglong)uVar15 >> 0x20));\n          }\n        }\n      }\n    }\n    *(undefined4 *)(puVar12 + 0xe) = local_20;\n    uVar10 = calculate_result_and_check_input_08002978(*(uint *)(PTR_DAT_08003560 + 0x20) ^ 0x80000000,0,\n                          *(undefined4 *)(puVar12 + 0x10));\n    iVar13 = is_end_of_string_08009228(local_20,uVar10);\n    uVar9 = uVar10;\n    if (iVar13 != 0) {\n      uVar9 = local_20;\n    }\n    *(undefined4 *)(puVar12 + 0xc) = uVar9;\n    iVar13 = check_sum_of_concatenated_parameters_08009250(uVar10,*(undefined4 *)(puVar12 + 10));\n    if (iVar13 == 0) {\n      *(undefined *)((int)puVar12 + 0x25) = 0;\n    }\n    else {\n      *(undefined *)((int)puVar12 + 0x25) = 1;\n    }\n    *(undefined *)(puVar12 + 0x12) = 1;\n    puVar1 = PTR_DAT_080035e0;\n    *(undefined4 *)(PTR_DAT_080035e0 + 0xc) = uVar3;\n    *(undefined4 *)(puVar1 + 0x10) = uVar7;\n    *(undefined4 *)(puVar1 + 0x14) = uVar8;\n    *(undefined4 *)(PTR_DAT_080035e0 + 0x18) = *(undefined4 *)(puVar12 + 10);\n    *PTR_DAT_080035e8 = *PTR_DAT_080035e4;\n    uVar2 = increment_char_and_reset_if_twelve_08002870(*PTR_DAT_080035e8);\n    *PTR_DAT_080035e4 = uVar2;\n    puVar1 = PTR_DAT_080035e0;\n    *(int *)PTR_DAT_080035e0 = iVar4;\n    *(int *)(puVar1 + 4) = iVar5;\n    *(int *)(puVar1 + 8) = iVar6;\n    decrypt_and_update_result_and_calculate_hash_08002edc();\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_08009318",
                "FUN_08009250",
                "FUN_080098d0",
                "FUN_08008590",
                "FUN_08008b60",
                "FUN_08008640",
                "FUN_08008b24",
                "FUN_08008bf0",
                "FUN_08009264",
                "FUN_08009228",
                "FUN_08002870",
                "FUN_08002978",
                "FUN_08008cdc",
                "FUN_08002edc",
                "FUN_080082d0",
                "FUN_08008c30",
                "FUN_08008e44",
                "FUN_08008ba0",
                "FUN_08008cd8",
                "FUN_08009054",
                "FUN_08008894",
                "FUN_080095b8",
                "FUN_08008eec"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08003004",
            "calling": [
                "FUN_08001e98"
            ],
            "imported": false,
            "current_name": "FUNC_08003004"
        },
        "FUN_080066cc": {
            "renaming": {
                "FUN_080066cc": "calculate_division_rate_080066cc",
                "uVar1": "division_rate",
                "uVar2": "leading_zero_count",
                "PTR_DAT_08006714": "ptr_dat_array",
                "DAT_08006710": "dat_value",
                "masked_value": "masked_value",
                "shifted_value": "shifted_value",
                "ptr_dat_index": "ptr_dat_index",
                "ptr_dat_final_value": "ptr_dat_final_value"
            },
            "code": "uint calculate_division_rate_080066cc(void)\n{\n  uint division_rate;\n  uint leading_zero_count;\n  \n  division_rate = calculate_division_rate_080066cc();\n  leading_zero_count = count_leading_zeroes(0x70000);\n  uint ptr_DAT_08006710 = *(uint *)(DAT_08006710 + 8);\n  uint masked_value = ptr_DAT_08006710 & 0xe000;\n  uint shifted_value = masked_value >> (leading_zero_count & 0xff);\n  uint ptr_dat_index = shifted_value;\n  uint ptr_dat_final_value = PTR_DAT_08006714[ptr_dat_index];\n  return division_rate >> ptr_dat_final_value;\n}",
            "called": [
                "FUN_08006628"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080066cc",
            "calling": [
                "FUN_08007f54"
            ],
            "imported": false,
            "current_name": "calculate_division_rate_080066cc"
        },
        "FUN_080018fc": {
            "renaming": {
                "FUN_080018fc": "update_param_in_memory_080018fc",
                "param_1": "new_param",
                "PTR_DAT_08001928": "param_ptr",
                "DAT_08001928": "memory_location",
                "mask": "bitmask",
                "current_param": "current_value"
            },
            "code": "void update_param_in_memory_080018fc(uint new_param) {\n    uint* PTR_DAT_08001928 = (uint*)(DAT_08001928 + 0x14);\n    uint current_param = *PTR_DAT_08001928;\n    uint mask = 0xfffff55f;\n    *PTR_DAT_08001928 = (new_param | (current_param & mask));\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080018fc",
            "calling": [
                "FUN_08001994"
            ],
            "imported": false,
            "current_name": "update_param_in_memory_080018fc"
        },
        "FUN_080039bc": {
            "renaming": {
                "FUN_080039bc": "wait_for_data_or_timeout_080039bc",
                "local_9": "loop_counter",
                "iVar1": "is_checksum_valid",
                "uVar2": "checksum_value",
                "PTR_DAT_08003a14": "data_ptr",
                "is_checksum_valid_08004d2c": "is_checksum_valid_08004d2c",
                "wait_for_bits_to_set_08004030": "wait_for_bits_to_set_08004030",
                "wait_until_characters_are_set_0800369c": "wait_until_characters_are_set_0800369c",
                "FUNC_080005b4": "calculate_checksum"
            },
            "code": "void wait_for_data_or_timeout_080039bc(void)\n{\n  int is_checksum_valid;\n  undefined4 checksum_value;\n  byte loop_counter;\n  for (loop_counter = 0; loop_counter < 2; loop_counter++) {\n    is_checksum_valid = is_checksum_valid_08004d2c(loop_counter, PTR_DAT_08003a14);\n    if (is_checksum_valid == 0) {\n      wait_for_bits_to_set_08004030(10);\n    }\n    else if (*PTR_DAT_08003a14 != '\\0') {\n      wait_until_characters_are_set_0800369c(PTR_DAT_08003a14);\n      checksum_value = calculate_checksum(PTR_DAT_08003a14);\n      wait_for_bits_to_set_08004030(checksum_value);\n    }\n  }\n  return;\n}",
            "called": [
                "FUN_08004d2c",
                "FUN_0800369c",
                "FUN_080005b4",
                "FUN_08004030"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080039bc",
            "calling": [
                "FUN_08001ddc",
                "FUN_08003b98"
            ],
            "imported": false,
            "current_name": "wait_for_data_or_timeout_080039bc"
        },
        "FUN_0800618c": {
            "renaming": {
                "FUN_0800618c": "process_data_0800618c",
                "param_1": "data",
                "param_2": "size",
                "lVar1": "result",
                "iVar2": "value",
                "uVar3": "temp",
                "uVar4": "limit",
                "uVar5": "div_rate",
                "DAT_08006400": "ptr_dat_08006400",
                "DAT_08006404": "ptr_dat_08006404",
                "DAT_08006408": "ptr_dat_08006408"
            },
            "code": "uint32_t process_data_0800618c(uint32_t *data, uint32_t size)\n{\n  uint32_t val;\n  uint32_t limit;\n  uint32_t div_rate;\n  uint32_t *DAT_08006400 = (uint32_t *)DAT_08006400;\n  uint32_t *DAT_08006404 = (uint32_t *)DAT_08006404;\n  uint32_t *DAT_08006408 = (uint32_t *)DAT_08006408;\n\n  if ((*DAT_08006400 & 0xf) < size)\n  {\n    *(char *)DAT_08006400 = (char)size;\n    if (size != (*DAT_08006400 & 0xf))\n    {\n      return 1;\n    }\n    if ((*data & 1) != 0)\n    {\n      if (data[1] == 1)\n      {\n        if ((*DAT_08006404 & 0x20000) == 0)\n        {\n          return 1;\n        }\n      }\n      else if ((data[1] != 2) && ((*DAT_08006404 & 2) == 0))\n      {\n        return 1;\n      }\n      DAT_08006404[2] = data[1] | DAT_08006404[2] & 0xfffffffc;\n      val = get_value_from_pointer_08005a84();\n      limit = val + 5000;\n      if (data[1] == 1)\n      {\n        while ((DAT_08006404[2] & 0xc) != 4)\n        {\n          val = get_value_from_pointer_08005a84();\n          if (limit <= val)\n          {\n            return 3;\n          }\n        }\n      }\n      else if (data[1] == 2)\n      {\n        while ((DAT_08006404[2] & 0xc) != 8)\n        {\n          val = get_value_from_pointer_08005a84();\n          if (limit <= val)\n          {\n            return 3;\n          }\n        }\n      }\n      else\n      {\n        while ((DAT_08006404[2] & 0xc) != 0)\n        {\n          val = get_value_from_pointer_08005a84();\n          if (limit <= val)\n          {\n            return 3;\n          }\n        }\n      }\n    }\n  }\n  else\n  {\n    if ((*data & 1) != 0)\n    {\n      if (data[1] == 1)\n      {\n        if ((*DAT_08006404 & 0x20000) == 0)\n        {\n          return 1;\n        }\n      }\n      else if (data[1] == 2)\n      {\n        if ((*DAT_08006404 & 0x2000000) == 0)\n        {\n          return 1;\n        }\n      }\n      else if ((*DAT_08006404 & 2) == 0)\n      {\n        return 1;\n      }\n      DAT_08006404[2] = data[1] | DAT_08006404[2] & 0xfffffffc;\n      val = get_value_from_pointer_08005a84();\n      limit = val + 5000;\n      if (data[1] == 1)\n      {\n        while ((DAT_08006404[2] & 0xc) != 4)\n        {\n          val = get_value_from_pointer_08005a84();\n          if (limit <= val)\n          {\n            return 3;\n          }\n        }\n      }\n      else if (data[1] == 2)\n      {\n        while ((DAT_08006404[2] & 0xc) != 8)\n        {\n          val = get_value_from_pointer_08005a84();\n          if (limit <= val)\n          {\n            return 3;\n          }\n        }\n      }\n      else\n      {\n        while ((DAT_08006404[2] & 0xc) != 0)\n        {\n          val = get_value_from_pointer_08005a84();\n          if (limit <= val)\n          {\n            return 3;\n          }\n        }\n      }\n    }\n    *(char *)DAT_08006400 = (char)size;\n    if (size != (*DAT_08006400 & 0xf))\n    {\n      return 1;\n    }\n  }\n  if ((*data & 2) != 0)\n  {\n    DAT_08006404[2] = data[2] | DAT_08006404[2] & 0xffffff0f;\n  }\n  if ((*data & 4) != 0)\n  {\n    DAT_08006404[2] = data[3] | DAT_08006404[2] & 0xffffe3ff;\n  }\n  if ((*data & 8) != 0)\n  {\n    DAT_08006404[2] = data[4] << 3 | DAT_08006404[2] & 0xffff1fff;\n  }\n  div_rate = calculate_division_rate_08006628();\n  val = (uint32_t)((uint64_t)*DAT_08006408 * (div_rate & 0xffffffff) >> 0x26);\n  check_param_is_valid_08005c30(val, (int)(div_rate >> 0x20), (int)((uint64_t)*DAT_08006408 * (div_rate & 0xffffffff)));\n  return 0;\n}",
            "called": [
                "FUN_08006628",
                "FUN_08005c30",
                "FUN_08005a84"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800618c",
            "calling": [
                "FUN_08007436"
            ],
            "imported": false,
            "current_name": "process_data_0800618c"
        },
        "FUN_08006998": {
            "renaming": {
                "FUN_08006998": "get_dat_value_shifted_right_and_masked_08006998",
                "DAT_080069b0": "DAT_OFFSET"
            },
            "code": "uint get_dat_value_shifted_right_and_masked_08006998(void)\n{\n    uint dat_value = *(uint *)(DAT_080069b0 + 0xc);\n    uint shifted_value = dat_value >> 8;\n    uint masked_value = shifted_value & 7;\n    return masked_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006998",
            "calling": [
                "FUN_08006cf6",
                "FUN_08006d8a"
            ],
            "imported": false,
            "current_name": "get_dat_value_shifted_right_and_masked_08006998"
        },
        "FUN_080004ac": {
            "renaming": {
                "FUN_080004ac": "write_and_set_params_080004ac",
                "PTR_DAT_080004f0": "memory_ptr_1",
                "PTR_DAT_080004f4": "memory_ptr_2",
                "PTR_DAT_080004f8": "memory_ptr_3",
                "set_params_in_array_08000478": "set_params",
                "is_valid_checksum_08004d7c": "is_valid_checksum",
                "wait_for_bits_to_set_08004030": "wait_for_bits_to_set"
            },
            "code": "void write_and_set_params_080004ac(void)\n{\n  int is_valid_checksum;\n  write_memory_with_byte_pattern_0800b430(PTR_DAT_080004f0, 0, 0x38);\n  PTR_DAT_080004f0[2] = 2;\n  PTR_DAT_080004f0[3] = 3;\n  PTR_DAT_080004f0[4] = 1;\n  *(undefined4 *)(PTR_DAT_080004f0 + 8) = *(undefined4 *)(PTR_DAT_080004f4 + 0x10);\n  is_valid_checksum = is_valid_checksum_08004d7c(PTR_DAT_080004f0[0x1c],PTR_DAT_080004f8);\n  if (is_valid_checksum == 0) {\n    wait_for_bits_to_set_08004030(10);\n  }\n  return;\n}",
            "called": [
                "FUN_08000478",
                "FUN_08004d7c",
                "FUN_0800b430",
                "FUN_08004030"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080004ac",
            "calling": [
                "FUN_08001ddc"
            ],
            "imported": false,
            "current_name": "write_and_set_params_080004ac"
        },
        "FUN_080078f4": {
            "renaming": {
                "FUN_080078f4": "calculate_sum_of_four_values_080078f4",
                "local_10": "index",
                "local_c": "sum"
            },
            "code": "uint calculate_sum_of_four_values_080078f4(void)\n{\n  int index;\n  uint sum = 0;\n  for (index = 0; index < 4; index++) {\n    sum |= *(uint *)(PTR_DAT_0800792c + index * 4);\n  }\n  return sum;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080078f4",
            "calling": [
                "FUN_08001994",
                "FUN_08007930"
            ],
            "imported": false,
            "current_name": "calculate_sum_of_four_values_080078f4"
        },
        "FUN_080041a0": {
            "renaming": {
                "FUN_080041a0": "wait_until_all_bits_are_set_and_continue_after_reset_080041a0",
                "param_1": "mode"
            },
            "code": "void wait_until_all_bits_are_set_and_continue_after_reset_080041a0(int mode)\n{\n  wait_until_all_bits_are_set_080036c6(PTR_DAT_0800420c);\n  switch(mode) {\n  case 1:\n    wait_until_all_bits_are_set_080036c6(PTR_s_Reset_to_continue_08004210);\n    break;\n  case 2:\n    wait_until_all_bits_are_set_080036c6(PTR_s___H____X__to_unlock_08004214);\n    break;\n  case 3:\n    wait_until_all_bits_are_set_080036c6(PTR_s_Caution__Unlocked_08004218);\n    break;\n  case 4:\n    wait_until_all_bits_are_set_080036c6(PTR_s_Enabled_0800421c);\n    break;\n  case 5:\n    wait_until_all_bits_are_set_080036c6(PTR_s_Disabled_08004220);\n  }\n  wait_until_all_bits_are_set_080036c6(PTR_DAT_08004224);\n  return;\n}",
            "called": [
                "FUN_080036c6"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080041a0",
            "calling": [
                "FUN_08001ddc",
                "FUN_08003b98",
                "FUN_08003a74"
            ],
            "imported": false,
            "current_name": "wait_until_all_bits_are_set_and_continue_after_reset_080041a0"
        },
        "FUN_08008bf0": {
            "renaming": {
                "FUN_08008bf0": "calculate_shifted_value_08008bf0",
                "param_1": "value",
                "param_2": "shift_amount",
                "iVar1": "intermediate_value",
                "uVar2": "result"
            },
            "code": "uint calculate_shifted_value_08008bf0(uint value, uint shift_amount)\n{\n    int intermediate_value;\n    uint result;\n\n    if ((shift_amount & 0x80000000) != 0) {\n        return 0;\n    }\n\n    intermediate_value = shift_amount * 2 + 0x200000;\n    if (shift_amount * 2 < 0xffe00000) {\n        if (-1 < intermediate_value) {\n            return 0;\n        }\n        result = -(intermediate_value >> 0x15) - 0x3e1;\n        if (-1 < (int)result) {\n            return (shift_amount << 0xb | 0x80000000 | value >> 0x15) >> (result & 0xff);\n        }\n    }\n    else if ((value | shift_amount << 0xc) != 0) {\n        return 0;\n    }\n\n    return 0xffffffff;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008bf0",
            "calling": [
                "FUN_08001994",
                "FUN_080005b4",
                "FUN_08003004",
                "FUN_08004e30",
                "FUN_08002408",
                "FUN_08001f00",
                "FUN_08003b98",
                "FUN_08002c18"
            ],
            "imported": false,
            "current_name": "calculate_shifted_value_08008bf0"
        },
        "FUN_08003a18": {
            "renaming": {
                "FUN_08003a18": "check_sensor_activation_08003a18",
                "param_1": "sensor_value"
            },
            "code": "void check_sensor_activation_08003a18(uint sensor_value) {\n    if ((sensor_value & 0x80) == 0) {\n        if ((sensor_value & 0x40) == 0) {\n            if ((sensor_value & 0x20) != 0) {\n                PTR_DAT_08003a70[2] |= 2;\n            }\n        }\n        else {\n            PTR_DAT_08003a70[2] |= 8;\n        }\n    }\n    else {\n        activate_sensor_if_not_active_080025e8();\n    }\n    return;\n}",
            "called": [
                "FUN_080025e8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003a18",
            "calling": [
                "FUN_080074c8"
            ],
            "imported": false,
            "current_name": "check_sensor_activation_08003a18"
        },
        "FUN_08005790": {
            "renaming": {
                "FUN_08005790": "process_data_08005790",
                "PTR_DAT_080057d4": "data",
                "PTR_DAT_080057dc": "result_1",
                "PTR_DAT_080057d8": "data",
                "PTR_DAT_080057e0": "result_2",
                "set_global_param_08007c40": "set_global_param",
                "set_global_variable_08007c5e": "set_global_variable",
                "set_flags_based_on_data_08007b70": "set_flags_based_on_data"
            },
            "code": "void process_data_08005790(void)\n{\n  do_nothing();\n  if (PTR_DAT_080057d4[1] == 0x03) {\n    *(uint16_t *)PTR_DAT_080057dc = *(uint16_t *)(PTR_DAT_080057d4 + 0x18);\n    *(uint16_t *)PTR_DAT_080057e0 = *(uint16_t *)(PTR_DAT_080057d4 + 0x1a);\n    set_global_param(0x69);\n    set_global_variable(((uint8_t)PTR_DAT_080057d4[0xd] + 5) * 0x15);\n    set_flags_based_on_PTR_DAT_080057d4();\n  }\n  return;\n}",
            "called": [
                "FUN_08007b70",
                "FUN_08007c5e",
                "FUN_08005318",
                "FUN_08007c40"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005790",
            "calling": [
                "FUN_08001d4c",
                "FUN_0800583c",
                "FUN_0800585c"
            ],
            "imported": false,
            "current_name": "process_data_08005790"
        },
        "FUN_08001994": {
            "renaming": {
                "FUN_08001994": "FUNC_08001994"
            },
            "code": "\nvoid FUNC_08001994(byte param_1,char param_2,char param_3,undefined4 param_4)\n\n{\n  undefined4 uVar1;\n  uint uVar2;\n  undefined8 uVar3;\n  undefined8 uVar4;\n  byte local_61;\n  uint local_5c;\n  uint local_58;\n  uint local_54;\n  ushort local_4e;\n  uint local_4c;\n  int local_48;\n  undefined4 local_44;\n  uint local_40;\n  uint local_3c;\n  ushort local_36;\n  uint local_34;\n  uint local_30;\n  int local_2c;\n  int local_28;\n  int local_24;\n  int local_20;\n  ushort local_1a;\n  uint local_18;\n  char local_11;\n  \n  local_11 = '\\0';\n  write_memory_with_byte_pattern_0800b430(&local_5c,0,0xc);\n  if ((param_1 & 1) != 0) {\n    local_11 = local_11 + '\\x01';\n    uVar3 = convert_to_big_endian_08008590(*(undefined4 *)PTR_DAT_08001c90);\n    local_5c = calculate_signed_integer_from_fixed_point_080095b8((int)uVar3,(int)((ulonglong)uVar3 >> 0x20));\n  }\n  if ((param_1 & 2) != 0) {\n    local_11 = local_11 + '\\x01';\n    uVar3 = convert_to_big_endian_08008590(*(undefined4 *)(PTR_DAT_08001c90 + 4));\n    local_58 = calculate_signed_integer_from_fixed_point_080095b8((int)uVar3,(int)((ulonglong)uVar3 >> 0x20));\n  }\n  if ((param_1 & 4) != 0) {\n    local_11 = local_11 + '\\x01';\n    uVar3 = convert_to_big_endian_08008590(*(undefined4 *)(PTR_DAT_08001c90 + 8));\n    local_54 = calculate_signed_integer_from_fixed_point_080095b8((int)uVar3,(int)((ulonglong)uVar3 >> 0x20));\n  }\n  uVar2 = local_54;\n  if (local_54 < local_58) {\n    uVar2 = local_58;\n  }\n  local_40 = local_5c;\n  if (local_5c < uVar2) {\n    local_40 = uVar2;\n  }\n  uVar3 = reverse_and_shift_left_0800854c(local_40);\n  uVar4 = reverse_and_shift_left_0800854c(local_11);\n  uVar4 = calculate_result_and_check_input_080098d0((int)uVar4,(int)((ulonglong)uVar4 >> 0x20));\n  uVar3 = FUNC_08008894((int)uVar3,(int)((ulonglong)uVar3 >> 0x20),(int)uVar4,\n                       (int)((ulonglong)uVar4 >> 0x20));\n  local_44 = calculate_float_bits_08008c30((int)uVar3,(int)((ulonglong)uVar3 >> 0x20));\n  uVar1 = FUNC_08008eec(*(undefined4 *)(PTR_DAT_08001c90 + 0x20),local_44);\n  uVar1 = FUNC_08009054(uVar1,DAT_08001c94);\n  uVar3 = convert_to_big_endian_08008590(uVar1);\n  uVar3 = calculate_value_from_parameters_08009318((int)uVar3,(int)((ulonglong)uVar3 >> 0x20));\n  local_48 = calculate_shifted_value_08008bf0((int)uVar3,(int)((ulonglong)uVar3 >> 0x20));\n  uVar3 = reverse_and_shift_left_0800854c(local_11);\n  uVar3 = calculate_result_and_check_input_080098d0((int)uVar3,(int)((ulonglong)uVar3 >> 0x20));\n  uVar4 = convert_to_big_endian_08008590(param_4);\n  uVar3 = FUNC_08008640((int)uVar3,(int)((ulonglong)uVar3 >> 0x20),(int)uVar4,\n                       (int)((ulonglong)uVar4 >> 0x20));\n  uVar1 = calculate_float_bits_08008c30((int)uVar3,(int)((ulonglong)uVar3 >> 0x20));\n  uVar1 = FUNC_08008eec(local_44,uVar1);\n  uVar1 = FUNC_08009054(DAT_08001c98,uVar1);\n  uVar3 = convert_to_big_endian_08008590(uVar1);\n  local_4c = calculate_signed_integer_from_fixed_point_080095b8((int)uVar3,(int)((ulonglong)uVar3 >> 0x20));\n  local_18 = DAT_08001c9c;\n  if (local_4c < DAT_08001c9c) {\n    local_18 = local_4c;\n  }\n  local_4e = *(ushort *)(PTR_DAT_08001c90 + 0x18);\n  local_1a = *(ushort *)(PTR_DAT_08001c90 + 0x1a) ^ *(ushort *)(PTR_DAT_08001c90 + 0x2a) & 0xaa0;\n  if (param_2 == '\\0') {\n    local_1a = local_1a ^ 0xaa0;\n  }\n  update_param_in_memory_080018fc(local_1a);\n  update_param_080018cc(local_4e);\n  local_28 = -(local_40 >> 1);\n  local_2c = local_18 - (byte)PTR_DAT_08001c90[0xd];\n  local_30 = 0;\n  local_34 = 10000;\n  local_61 = param_1;\n  local_24 = local_28;\n  local_20 = local_28;\n  while( true ) {\n    local_36 = local_4e;\n    local_3c = calculate_sum_of_four_values_080078f4();\n    if (param_3 == '\\0') {\n      local_3c = local_3c ^ 0x1e;\n    }\n    if (((local_61 & 1) != 0) && (local_20 = local_20 + local_5c, 0 < local_20)) {\n      if ((local_3c & 0x10) == 0) {\n        local_61 = local_61 & 0xfe;\n      }\n      else {\n        local_36 = local_36 ^ 0x10;\n      }\n      local_20 = local_20 - local_40;\n    }\n    if (((local_61 & 2) != 0) && (local_24 = local_24 + local_58, 0 < local_24)) {\n      if ((local_3c & 8) == 0) {\n        local_61 = local_61 & 0xfd;\n      }\n      else {\n        local_36 = local_36 ^ 0x440;\n      }\n      local_24 = local_24 - local_40;\n    }\n    if (((local_61 & 4) != 0) && (local_28 = local_28 + local_54, 0 < local_28)) {\n      if ((local_3c & 4) == 0) {\n        local_61 = local_61 & 0xfb;\n      }\n      else {\n        local_36 = local_36 ^ 0x100;\n      }\n      local_28 = local_28 - local_40;\n    }\n    if ((local_61 == 0) || ((PTR_DAT_08001d40[2] & 0x10) != 0)) break;\n    update_param_080018cc(local_36);\n    do_nothing_08002828(PTR_DAT_08001d44[0xd]);\n    update_param_080018cc(local_4e);\n    do_nothing_08002828(local_2c);\n    if ((local_4c < local_18) && (local_34 = local_18 + local_34, 20000 < local_34)) {\n      local_34 = local_34 - 20000;\n      local_30 = local_48 + local_30;\n      local_18 = DAT_08001d48 / local_30;\n      if (local_18 < local_4c) {\n        local_18 = local_4c;\n      }\n      local_2c = local_18 - (byte)PTR_DAT_08001d44[0xd];\n    }\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_08009318",
                "FUN_08008590",
                "FUN_080098d0",
                "FUN_08008640",
                "FUN_080078f4",
                "FUN_08008bf0",
                "FUN_0800b430",
                "FUN_080018fc",
                "FUN_08008c30",
                "FUN_080018cc",
                "FUN_08002828",
                "FUN_08009054",
                "FUN_08008894",
                "FUN_080095b8",
                "FUN_0800854c",
                "FUN_08008eec"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08001994",
            "calling": [
                "FUN_08001d4c"
            ],
            "imported": false,
            "current_name": "FUNC_08001994"
        },
        "FUN_08007854": {
            "renaming": {
                "FUN_08007854": "get_bit_at_index_08007854",
                "param_1": "num",
                "PTR_": "",
                "DAT_": "",
                "uint": "",
                "base_address": "",
                "shifted_num": "",
                "index": ""
            },
            "code": "uint get_bit_at_index_08007854(uint num, uint index) {\n    uint base_address = ((int)num >> 4) * 0x400 + 0x40020010;\n    uint shifted_num = *(uint *)base_address >> (index & 0xf);\n    return shifted_num & 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007854",
            "calling": [
                "FUN_08007884"
            ],
            "imported": false,
            "current_name": "get_bit_at_index_08007854"
        },
        "FUN_08004900": {
            "renaming": {
                "FUN_08004900": "wait_until_all_bits_and_characters_are_set_08004900",
                "param_1": "wait_bits_mask",
                "param_2": "characters_to_wait_for"
            },
            "code": "void wait_until_all_bits_and_characters_are_set_08004900(undefined wait_bits_ptr, unsigned int wait_bits_mask, char* characters_to_wait_for){\n  wait_until_all_bits_are_set_080036c6(wait_bits_ptr);\n  wait_until_bit_is_set_080037fc(wait_bits_mask);\n  wait_until_characters_are_set_0800369c(characters_to_wait_for);\n  wait_until_all_bits_are_set_080036c6(wait_bits_ptr);\n  return;\n}",
            "called": [
                "FUN_0800369c",
                "FUN_080037fc",
                "FUN_080036c6"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004900",
            "calling": [
                "FUN_08003b98"
            ],
            "imported": false,
            "current_name": "wait_until_all_bits_and_characters_are_set_08004900"
        },
        "FUN_08005318": {
            "renaming": {
                "FUN_08005318": "do_nothing_08005318"
            },
            "code": "\nvoid do_nothing_08005318(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005318",
            "calling": [
                "FUN_08005790"
            ],
            "imported": false,
            "current_name": "do_nothing_08005318"
        },
        "FUN_08004228": {
            "renaming": {
                "FUN_08004228": "wait_until_all_bits_are_set_08004228",
                "PTR_s__Grbl_0_8c______for_help__08004238": "PTR_help_message"
            },
            "code": "void wait_until_all_bits_are_set_08004228(void)\n{\n  wait_until_all_bits_are_set_08004228_080036c6(PTR_s__Grbl_0_8c______for_help__08004238);\n  return;\n}",
            "called": [
                "FUN_080036c6"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004228",
            "calling": [
                "FUN_080039a0"
            ],
            "imported": false,
            "current_name": "wait_until_all_bits_are_set_08004228"
        },
        "FUN_08009b24": {
            "renaming": {
                "FUN_08009b24": "FUNC_08009b24"
            },
            "code": "\nuint FUNC_08009b24(uint param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  undefined4 uVar1;\n  int iVar2;\n  uint uVar3;\n  int iVar4;\n  undefined4 uVar5;\n  int iVar6;\n  uint uVar7;\n  undefined4 uVar8;\n  undefined4 uVar9;\n  undefined8 uVar10;\n  undefined8 uVar11;\n  undefined8 uVar12;\n  undefined8 uVar13;\n  int local_3c;\n  \n  uVar1 = DAT_08009d70;\n  param_2 = param_2 & 0x7fffffff;\n  param_4 = param_4 & 0x7fffffff;\n  uVar3 = param_1;\n  uVar7 = param_2;\n  if (param_2 < param_4) {\n    uVar3 = param_3;\n    param_3 = param_1;\n    uVar7 = param_4;\n    param_4 = param_2;\n  }\n  if (0x3c00000 < (int)(uVar7 - param_4)) {\n    uVar3 = FUNC_080082d4(uVar3,uVar7,param_3,param_4);\n    return uVar3;\n  }\n  if (DAT_08009d68 < (int)uVar7) {\n    if (DAT_08009d74 < (int)uVar7) {\n      if ((uVar7 & 0xfffff | uVar3) != 0) {\n        uVar3 = FUNC_080082d4(uVar3,uVar7,param_3,param_4);\n      }\n      if ((param_4 ^ 0x7ff00000 | param_3) != 0) {\n        return uVar3;\n      }\n      return param_3;\n    }\n    uVar7 = uVar7 + 0xda800000;\n    param_4 = param_4 + 0xda800000;\n    local_3c = 600;\n  }\n  else {\n    local_3c = 0;\n  }\n  uVar11 = CONCAT44(uVar7,uVar3);\n  uVar10 = CONCAT44(param_4,param_3);\n  if ((int)param_4 <= DAT_08009d6c) {\n    if ((int)param_4 < 0x100000) {\n      if ((param_4 | param_3) == 0) {\n        return uVar3;\n      }\n      uVar10 = FUNC_08008640(param_3,param_4,0,DAT_08009d70);\n      uVar11 = FUNC_08008640(uVar3,uVar7,0,uVar1);\n      local_3c = local_3c + -0x3fe;\n    }\n    else {\n      uVar7 = uVar7 + 0x25800000;\n      uVar11 = CONCAT44(uVar7,uVar3);\n      param_4 = param_4 + 0x25800000;\n      uVar10 = CONCAT44(param_4,param_3);\n      local_3c = local_3c + -600;\n    }\n  }\n  uVar9 = (undefined4)((ulonglong)uVar11 >> 0x20);\n  uVar8 = (undefined4)uVar11;\n  iVar6 = (int)((ulonglong)uVar10 >> 0x20);\n  uVar5 = (undefined4)uVar10;\n  uVar10 = FUNC_080082d0(uVar8,uVar9,uVar5,iVar6);\n  iVar4 = (int)((ulonglong)uVar10 >> 0x20);\n  uVar1 = (undefined4)uVar10;\n  iVar2 = is_end_of_string_08008b24(uVar5,iVar6,uVar1,iVar4);\n  if (iVar2 == 0) {\n    uVar10 = FUNC_08008640(0,param_4,0);\n    uVar11 = FUNC_08008640(uVar1,iVar4 + -0x80000000,uVar1,iVar4);\n    uVar12 = FUNC_080082d4(uVar8,uVar9,uVar8,uVar9);\n    uVar12 = FUNC_080082d0((int)uVar12,(int)((ulonglong)uVar12 >> 0x20),0,uVar7 + 0x100000);\n    uVar12 = FUNC_08008640((int)uVar12,(int)((ulonglong)uVar12 >> 0x20),uVar5,iVar6);\n    uVar13 = FUNC_080082d0(uVar5,iVar6,0,param_4);\n    uVar13 = FUNC_08008640((int)uVar13,(int)((ulonglong)uVar13 >> 0x20),0,uVar7 + 0x100000);\n    uVar12 = FUNC_080082d4((int)uVar12,(int)((ulonglong)uVar12 >> 0x20),(int)uVar13,\n                          (int)((ulonglong)uVar13 >> 0x20));\n    uVar11 = FUNC_080082d0((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),(int)uVar12,\n                          (int)((ulonglong)uVar12 >> 0x20));\n    FUNC_080082d0((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),(int)uVar11,\n                 (int)((ulonglong)uVar11 >> 0x20));\n    uVar10 = calculate_result_0800a1bc();\n  }\n  else {\n    uVar10 = FUNC_08008640(0,uVar7,0,uVar7);\n    uVar11 = FUNC_08008640(uVar5,iVar6 + -0x80000000,uVar5,iVar6);\n    uVar12 = FUNC_080082d4(uVar8,uVar9,0,uVar7);\n    uVar13 = FUNC_080082d0(uVar8,uVar9,0,uVar7);\n    uVar12 = FUNC_08008640((int)uVar12,(int)((ulonglong)uVar12 >> 0x20),(int)uVar13,\n                          (int)((ulonglong)uVar13 >> 0x20));\n    uVar11 = FUNC_080082d0((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),(int)uVar12,\n                          (int)((ulonglong)uVar12 >> 0x20));\n    FUNC_080082d0((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),(int)uVar11,\n                 (int)((ulonglong)uVar11 >> 0x20));\n    uVar10 = calculate_result_0800a1bc();\n  }\n  uVar3 = (uint)uVar10;\n  if (local_3c != 0) {\n    uVar3 = FUNC_08008640(uVar3,(int)((ulonglong)uVar10 >> 0x20),0,local_3c * 0x100000 + 0x3ff00000);\n  }\n  return uVar3;\n}\n\n",
            "called": [
                "FUN_080082d0",
                "FUN_0800a1bc",
                "FUN_080082d4",
                "FUN_08008640",
                "FUN_08008b24"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08009b24",
            "calling": [
                "FUN_0800981c"
            ],
            "imported": false,
            "current_name": "FUNC_08009b24"
        },
        "FUN_080076c8": {
            "renaming": {
                "FUN_080076c8": "set_bit_in_uint_array_080076c8",
                "param_1": "array_index",
                "PTR_": "uint_array",
                "DAT_": "uint_array_value",
                "bit_mask": "bit_mask",
                "bit_index": "bit_index"
            },
            "code": "void set_bit_in_uint_array_080076c8(uint array_index)\n{\n    uint* PTR_ = (uint*)((int)array_index >> 4) * 0x400 + 0x40020014;\n    uint DAT_ = *PTR_;\n    uint bit_index = array_index & 0xf;\n    uint bit_mask = 1 << bit_index;\n    DAT_ ^= bit_mask;\n    *PTR_ = DAT_;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080076c8",
            "calling": [
                "FUN_08007756"
            ],
            "imported": false,
            "current_name": "set_bit_in_uint_array_080076c8"
        },
        "FUN_0800530c": {
            "renaming": {
                "FUN_0800530c": "do_nothing_0800530c"
            },
            "code": "\nvoid do_nothing_0800530c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800530c",
            "calling": [
                "FUN_080057e4"
            ],
            "imported": false,
            "current_name": "do_nothing_0800530c"
        },
        "FUN_08006a8c": {
            "renaming": {
                "FUN_08006a8c": "set_bit_in_array_08006a8c",
                "param_1": "bit_index",
                "DAT_08006abc": "array_ptr"
            },
            "code": "void set_bit_in_array_08006a8c(byte bit_index) {\n    int* DAT_08006abc = DAT_08006abc;\n    uint shifted_index = (uint) bit_index >> 5;\n    uint array_index = shifted_index + 0x60;\n    uint bit_mask = 1 << (bit_index & 0x1f);\n    int* target_ptr = DAT_08006abc + (array_index * 4);\n    *target_ptr = bit_mask;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006a8c",
            "calling": [
                "FUN_08006dfe"
            ],
            "imported": false,
            "current_name": "set_bit_in_array_08006a8c"
        },
        "FUN_0800283a": {
            "renaming": {
                "FUN_0800283a": "update_params_and_calculate_hashes_0800283a",
                "*(undefined4 *)(PTR_DAT_08002868 + 4)": "first_param",
                "*(undefined4 *)(PTR_DAT_08002868 + 8)": "second_param",
                "*(undefined4 *)(PTR_DAT_08002868 + 0xc)": "third_param"
            },
            "code": "void update_params_and_calculate_hashes_0800283a(void)\n{\n    int *(undefined4 *)(PTR_DAT_08002868 + 4) = *(int *)(PTR_DAT_08002868 + 4);\n    int *(undefined4 *)(PTR_DAT_08002868 + 8) = *(int *)(PTR_DAT_08002868 + 8);\n    int *(undefined4 *)(PTR_DAT_08002868 + 0xc) = *(int *)(PTR_DAT_08002868 + 0xc);\n    \n    update_params_and_store_in_pointer_080035ec(*(undefined4 *)(PTR_DAT_08002868 + 4), *(undefined4 *)(PTR_DAT_08002868 + 8), *(undefined4 *)(PTR_DAT_08002868 + 0xc));\n    calculate_and_store_hashes_080004fc(*(undefined4 *)(PTR_DAT_08002868 + 4), *(undefined4 *)(PTR_DAT_08002868 + 8), *(undefined4 *)(PTR_DAT_08002868 + 0xc));\n    return;\n}",
            "called": [
                "FUN_080004fc",
                "FUN_080035ec"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800283a",
            "calling": [
                "FUN_080024c4",
                "FUN_08001ddc"
            ],
            "imported": false,
            "current_name": "update_params_and_calculate_hashes_0800283a"
        },
        "FUN_0800881c": {
            "renaming": {
                "FUN_0800881c": "binary_conversion_0800881c",
                "param_1": "num1",
                "param_2": "num2",
                "param_3": "num3",
                "param_4": "num4",
                "uVar1": "temp1",
                "unaff_r4": "temp2",
                "uVar2": "temp3",
                "uVar3": "temp4",
                "in_r12": "temp5",
                "bVar4": "condition1",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "ulonglong binary_conversion_0800881c(uint num1, uint num2, uint num3, uint num4) {\n  uint temp1, temp2, temp3, temp4, temp5;\n  bool condition1, condition2;\n  temp1 = num4 >> 0x14;\n  temp2 = num1 | (num2 << 1);\n  temp3 = num3 | (num4 << 1);\n  condition1 = (temp2 == 0) && (temp3 == 0);\n  condition2 = (num4 == 0);\n  if ((num2 == temp1) || (num4 == temp1)) {\n    if (condition1) {\n      return (ulonglong)((num2 ^ num4) & 0x80000000 | 0x7ff00000) << 0x20;\n    }\n    if (condition2) {\n      temp4 = num2 & 0x80000000;\n      do {\n        temp5 = num1 & 0x80000000;\n        num1 = num1 << 1;\n        num2 = num2 * 2 + (uint)(temp5 != 0);\n      } while ((num2 & 0x100000) == 0);\n      num2 = num2 | temp4;\n      if (temp1 != 0) {\n        return CONCAT44(num2, num1);\n      }\n    }\n    do {\n      temp1 = num3 & 0x80000000;\n      num3 = num3 << 1;\n      num4 = num4 * 2 + (uint)(temp1 != 0);\n    } while ((num4 & 0x100000) == 0);\n    return CONCAT44(num2, num1);\n  }\n  if (condition1) {\n    num2 = num4;\n    num1 = num3;\n  }\n  temp4 = num2;\n  if (!condition1) {\n    condition1 = (temp3 == 0);\n  }\n  if (((!condition1) && ((num2 != temp1 || ((num1 | num2 << 0xc) == 0)))) && ((temp1 != num4 || (num1 = num3, temp4 = num4, (num3 | num4 << 0xc) == 0)))) {\n    return (ulonglong)((num2 ^ num4) & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  return CONCAT44(temp4, num1) | 0x7ff8000000000000;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800881c",
            "calling": [
                "FUN_08008640"
            ],
            "imported": false,
            "current_name": "binary_conversion_0800881c"
        },
        "FUN_08004bc0": {
            "renaming": {
                "FUN_08004bc0": "write_to_memory_at_offset_08004bc0",
                "param_1": "address",
                "param_2": "data"
            },
            "code": "void write_to_memory_at_offset_08004bc0(byte address, undefined4 data) {\n    ushort offset = (ushort)address * 0x101 + 0x300;\n    write_to_memory_with_checksum_08000374(offset, data, 0x100);\n    return;\n}",
            "called": [
                "FUN_08000374"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004bc0",
            "calling": [
                "FUN_08004d2c",
                "FUN_08003b98"
            ],
            "imported": false,
            "current_name": "write_to_memory_at_offset_08004bc0"
        },
        "FUN_08008b4c": {
            "renaming": {
                "FUN_08008b4c": "validate_input_and_return_result_08008b4c",
                "in_ZR": "in_zero",
                "in_CY": "in_carry",
                "validate_and_return_value_08008af0": "validate_input"
            },
            "code": "bool validate_input_and_return_result_08008b4c(void)\n{\n    undefined in_zero;\n    undefined in_carry;\n    \n    validate_input();\n    return !(bool)in_carry || (bool)in_zero;\n}",
            "called": [
                "FUN_08008af0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008b4c",
            "calling": [
                "FUN_0800a5a0"
            ],
            "imported": false,
            "current_name": "validate_input_and_return_result_08008b4c"
        },
        "FUN_08004c2a": {
            "renaming": {
                "FUN_08004c2a": "write_to_memory_and_checksum_08004c2a",
                "PTR_DAT_08004c44": "ptr_data"
            },
            "code": "void write_to_memory_and_checksum_08004c2a(void)\n{\n  write_to_memory(0, 5);\n  write_to_memory_with_checksum(1, PTR_DAT_08004c44, 0x40);\n  return;\n}",
            "called": [
                "FUN_08000374",
                "FUN_08000340"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004c2a",
            "calling": [
                "FUN_08004c48",
                "FUN_08004e30"
            ],
            "imported": false,
            "current_name": "write_to_memory_and_checksum_08004c2a"
        },
        "FUN_0800826a": {
            "renaming": {
                "FUN_0800826a": "wait_until_bit_is_set_0800826a",
                "param_1": "ptr_param"
            },
            "code": "int wait_until_bit_is_set_0800826a(void* ptr_param){\n  wait_until_bit_set_08007e1c(ptr_param);\n  return 0;\n}",
            "called": [
                "FUN_08007e1c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800826a",
            "calling": [],
            "imported": false,
            "current_name": "wait_until_bit_is_set_0800826a"
        },
        "FUN_08008b60": {
            "renaming": {
                "FUN_08008b60": "is_end_of_string_08008b60",
                "in_CY": "current_char"
            },
            "code": "bool is_end_of_string_08008b60(void)\n{\n  char current_char;\n  validate_and_return_value();\n  return current_char == '\\0';\n}",
            "called": [
                "FUN_08008af0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008b60",
            "calling": [
                "FUN_08009318",
                "FUN_080094c0",
                "FUN_0800af78",
                "FUN_08003004"
            ],
            "imported": false,
            "current_name": "is_end_of_string_08008b60"
        },
        "FUN_08005324": {
            "renaming": {
                "FUN_08005324": "calculate_local_value_08005324",
                "param_1": "input_value",
                "local_14": "local_value",
                "DAT_08005358": "constant_value",
                "PTR_DAT_0800535c": "pointer_to_data",
                "update_data_08007bf0": "update_data"
            },
            "code": "void calculate_local_value_08005324(uint input_value) {\n  uint local_value;\n  if (input_value < 800) {\n    local_value = 800;\n  } else {\n    local_value = input_value;\n  }\n  uint result = DAT_08005358 / local_value;\n  *(uint *)(PTR_DAT_0800535c + 0x14) = result;\n  update_data_08007bf0(result);\n  return;\n}",
            "called": [
                "FUN_08007bf0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005324",
            "calling": [
                "FUN_080058a0",
                "FUN_080053a0",
                "FUN_08005814"
            ],
            "imported": false,
            "current_name": "calculate_local_value_08005324"
        },
        "FUN_08000310": {
            "renaming": {
                "FUN_08000310": "get_value_from_data_table_08000310",
                "param_1": "index",
                "PTR_DAT_08000338": "is_memory_initialized",
                "write_memory_with_byte_pattern_080002f0": "initialize_memory",
                "PTR_DAT_0800033c": "data_table"
            },
            "code": "uint16_t get_value_from_data_table_08000310(uint16_t index) {\n  if (*PTR_DAT_08000338 == 0) {\n    initialize_memory();\n  }\n  return PTR_DAT_0800033c[index & 0x3ff];\n}",
            "called": [
                "FUN_080002f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000310",
            "calling": [
                "FUN_080003ec",
                "FUN_08004dd2"
            ],
            "imported": false,
            "current_name": "get_value_from_data_table_08000310"
        },
        "FUN_08005208": {
            "renaming": {
                "FUN_08005208": "do_nothing_08005208"
            },
            "code": "\nvoid do_nothing_08005208(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005208",
            "calling": [
                "FUN_0800525c"
            ],
            "imported": false,
            "current_name": "do_nothing_08005208"
        },
        "FUN_08007a70": {
            "renaming": {
                "FUN_08007a70": "set_data_and_bit_in_array_08007a70",
                "param_1": "data",
                "local_c": "new_data",
                "param_2": "param_2",
                "param_3": "param_3"
            },
            "code": "void set_data_and_bit_in_array_08007a70(int data, undefined4 param_2, undefined4 param_3) {\n   \n  if (data == 0x40000000) {\n    data = 0x1c;\n  }\n  else if (data == DAT_08007ac8) {\n    data = 0x1d;\n  }\n  else {\n    if (data != DAT_08007acc) {\n      return;\n    }\n    data = 0x1e;\n  }\n  set_data_08006cf6(data, param_2, param_3);\n  set_bit_in_array_080079e0(data);\n  return;\n}",
            "called": [
                "FUN_080079e0",
                "FUN_08006cf6"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007a70",
            "calling": [
                "FUN_08007ad0"
            ],
            "imported": false,
            "current_name": "set_data_and_bit_in_array_08007a70"
        },
        "FUN_0800b5b0": {
            "renaming": {
                "FUN_0800b5b0": "do_nothing_0800b5b0"
            },
            "code": "\nvoid do_nothing_0800b5b0(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800b5b0",
            "calling": [
                "FUN_080001ac",
                "FUN_0800b3e8",
                "FUN_08000188"
            ],
            "imported": false,
            "current_name": "do_nothing_0800b5b0"
        },
        "FUN_08002978": {
            "renaming": {
                "FUN_08002978": "calculate_result_and_check_input_08002978",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "uVar1": "var1",
                "uVar2": "var2",
                "uVar3": "var3"
            },
            "code": "float calculate_result_and_check_input_08002978(int input1, int input2) {\n    float result;\n    int var1 = FUNC_08008eec(input1, input1);\n    int var2 = FUNC_08008cdc(input2, input2);\n    var2 = FUNC_08008eec(var2, input3);\n    int var3 = FUNC_08008cd8(var1, var2);\n    int var4 = convert_to_big_endian_08008590(var3);\n    int var5 = calculate_result_and_check_input_08002978_080098d0(var4, var4 >> 32);\n    result = calculate_float_bits_08008c30(var5, var5 >> 32);\n    return result;\n}",
            "called": [
                "FUN_080098d0",
                "FUN_08008590",
                "FUN_08008c30",
                "FUN_08008cd8",
                "FUN_08008cdc",
                "FUN_08008eec"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002978",
            "calling": [
                "FUN_08002afc",
                "FUN_080029d8",
                "FUN_08003004"
            ],
            "imported": false,
            "current_name": "calculate_result_and_check_input_08002978"
        },
        "FUN_08009d78": {
            "renaming": {
                "FUN_08009d78": "FUNC_08009d78"
            },
            "code": "\n/* WARNING: Could not reconcile some variable overlaps */\n\nint FUNC_08009d78(undefined4 param_1,uint param_2,undefined8 *param_3)\n\n{\n  undefined4 uVar1;\n  undefined4 uVar2;\n  undefined4 uVar3;\n  undefined4 uVar4;\n  undefined4 uVar5;\n  undefined4 uVar6;\n  undefined4 uVar7;\n  uint uVar8;\n  int iVar9;\n  undefined8 uVar10;\n  undefined8 uVar11;\n  undefined8 uVar12;\n  undefined4 local_50;\n  undefined4 uStack_4c;\n  undefined8 local_40;\n  undefined8 local_38;\n  undefined8 local_30;\n  \n  uVar8 = param_2 & 0x7fffffff;\n  if ((int)uVar8 <= DAT_08009fb0) {\n    *(undefined4 *)param_3 = param_1;\n    *(uint *)((int)param_3 + 4) = param_2;\n    *(undefined4 *)(param_3 + 1) = 0;\n    *(undefined4 *)((int)param_3 + 0xc) = 0;\n    return 0;\n  }\n  if ((int)uVar8 <= DAT_08009fb4) {\n    if ((int)param_2 < 1) {\n      uVar10 = FUNC_080082d4(param_1,param_2,DAT_08009f88,DAT_08009f8c);\n      uVar3 = (undefined4)((ulonglong)uVar10 >> 0x20);\n      uVar1 = (undefined4)uVar10;\n      if (uVar8 != DAT_0800a1b8) {\n        uVar10 = FUNC_080082d4(uVar1,uVar3,DAT_0800a1b0,DAT_0800a1b4);\n        *param_3 = uVar10;\n        uVar10 = FUNC_080082d0(uVar1,uVar3);\n        uVar10 = FUNC_080082d4((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),DAT_0800a1b0,DAT_0800a1b4\n                             );\n        param_3[1] = uVar10;\n        return -1;\n      }\n      uVar10 = FUNC_080082d4(uVar1,uVar3,DAT_0800a190,DAT_0800a194);\n      uVar1 = (undefined4)((ulonglong)uVar10 >> 0x20);\n      uVar11 = FUNC_080082d4((int)uVar10,uVar1,DAT_0800a198,DAT_0800a19c);\n      *param_3 = uVar11;\n      uVar10 = FUNC_080082d0((int)uVar10,uVar1);\n      uVar10 = FUNC_080082d4((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),DAT_0800a198,DAT_0800a19c);\n      param_3[1] = uVar10;\n      return -1;\n    }\n    uVar10 = FUNC_080082d0();\n    uVar3 = (undefined4)((ulonglong)uVar10 >> 0x20);\n    uVar1 = (undefined4)uVar10;\n    if (uVar8 != DAT_08009fb8) {\n      uVar10 = FUNC_080082d0(uVar1,uVar3,DAT_08009f90,DAT_08009f94);\n      *param_3 = uVar10;\n      uVar10 = FUNC_080082d0(uVar1,uVar3);\n      uVar10 = FUNC_080082d0((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),DAT_08009f90,DAT_08009f94);\n      param_3[1] = uVar10;\n      return 1;\n    }\n    uVar10 = FUNC_080082d0(uVar1,uVar3,DAT_08009f98,DAT_08009f9c);\n    uVar1 = (undefined4)((ulonglong)uVar10 >> 0x20);\n    uVar11 = FUNC_080082d0((int)uVar10,uVar1,DAT_08009fa0,DAT_08009fa4);\n    *param_3 = uVar11;\n    uVar10 = FUNC_080082d0((int)uVar10,uVar1);\n    uVar10 = FUNC_080082d0((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),DAT_08009fa0,DAT_08009fa4);\n    param_3[1] = uVar10;\n    return 1;\n  }\n  if (DAT_08009fbc < (int)uVar8) {\n    if (DAT_08009fc0 < (int)uVar8) {\n      uVar10 = FUNC_080082d0(param_1,param_2,param_1,param_2);\n      param_3[1] = uVar10;\n      *param_3 = uVar10;\n      return 0;\n    }\n    iVar9 = ((int)uVar8 >> 0x14) + -0x416;\n    convert_to_int_08008ba0();\n    local_40 = calculate_shifted_value_0800856c();\n    uVar10 = FUNC_080082d0(param_1,uVar8 + iVar9 * -0x100000,(int)local_40,\n                          (int)((ulonglong)local_40 >> 0x20));\n    uVar10 = FUNC_08008640((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),0,DAT_08009fc4);\n    convert_to_int_08008ba0();\n    local_38 = calculate_shifted_value_0800856c();\n    uVar10 = FUNC_080082d0((int)uVar10,(int)((ulonglong)uVar10 >> 0x20));\n    local_30 = FUNC_08008640((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),0,DAT_08009fc4);\n    is_not_null_08008b10((int)local_30,(int)((ulonglong)local_30 >> 0x20),0,0);\n    iVar9 = FUNC_0800a5a0(&local_40,param_3,iVar9);\n    if (-1 < (int)param_2) {\n      return iVar9;\n    }\n    *(int *)((int)param_3 + 4) = *(int *)((int)param_3 + 4) + -0x80000000;\n    *(int *)((int)param_3 + 0xc) = *(int *)((int)param_3 + 0xc) + -0x80000000;\n    return -iVar9;\n  }\n  uVar10 = do_nothing_0800b2cc();\n  uVar3 = (undefined4)((ulonglong)uVar10 >> 0x20);\n  uVar11 = FUNC_08008640((int)uVar10,uVar3,DAT_08009fa8,DAT_08009fac);\n  FUNC_080082d4((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),0,DAT_08009fcc);\n  iVar9 = convert_to_int_08008ba0();\n  uVar11 = calculate_shifted_value_0800856c();\n  uVar4 = (undefined4)((ulonglong)uVar11 >> 0x20);\n  uVar1 = (undefined4)uVar11;\n  uVar11 = FUNC_08008640(uVar1,uVar4,DAT_08009f88,DAT_08009f8c);\n  uVar10 = FUNC_080082d0((int)uVar10,uVar3,(int)uVar11,(int)((ulonglong)uVar11 >> 0x20));\n  uVar5 = (undefined4)((ulonglong)uVar10 >> 0x20);\n  uVar3 = (undefined4)uVar10;\n  uVar11 = FUNC_08008640(uVar1,uVar4,DAT_08009f90,DAT_08009f94);\n  if ((0x1f < iVar9) || (*(uint *)(PTR_DAT_08009fd0 + (iVar9 + -1) * 4) == uVar8)) {\n    uVar12 = FUNC_080082d0(uVar3,uVar5,(int)uVar11,(int)((ulonglong)uVar11 >> 0x20));\n    if ((int)((uVar8 >> 0x14) - ((uint)((int)((ulonglong)uVar12 >> 0x20) << 1) >> 0x15)) < 0x11)\n    goto LAB_0800a0ce;\n    uVar11 = FUNC_08008640(uVar1,uVar4,DAT_0800a190,DAT_0800a194);\n    uVar6 = (undefined4)((ulonglong)uVar11 >> 0x20);\n    uVar10 = FUNC_080082d0(uVar3,uVar5,(int)uVar11,uVar6);\n    uVar7 = (undefined4)((ulonglong)uVar10 >> 0x20);\n    uVar2 = (undefined4)uVar10;\n    uVar12 = FUNC_080082d0(uVar3,uVar5,uVar2,uVar7);\n    uVar11 = FUNC_080082d0((int)uVar12,(int)((ulonglong)uVar12 >> 0x20),(int)uVar11,uVar6);\n    uVar12 = FUNC_08008640(uVar1,uVar4,DAT_0800a198,DAT_0800a19c);\n    uVar11 = FUNC_080082d0((int)uVar12,(int)((ulonglong)uVar12 >> 0x20),(int)uVar11,\n                          (int)((ulonglong)uVar11 >> 0x20));\n    uVar12 = FUNC_080082d0(uVar2,uVar7,(int)uVar11,(int)((ulonglong)uVar11 >> 0x20));\n    if ((int)(((int)uVar8 >> 0x14) - ((uint)((int)((ulonglong)uVar12 >> 0x20) << 1) >> 0x15)) < 0x32\n       ) goto LAB_0800a0ce;\n    uVar11 = FUNC_08008640(uVar1,uVar4,DAT_0800a1a0,DAT_0800a1a4);\n    uVar3 = (undefined4)((ulonglong)uVar11 >> 0x20);\n    uVar10 = FUNC_080082d0(uVar2,uVar7,(int)uVar11,uVar3);\n    uVar12 = FUNC_080082d0(uVar2,uVar7);\n    uVar11 = FUNC_080082d0((int)uVar12,(int)((ulonglong)uVar12 >> 0x20),(int)uVar11,uVar3);\n    uVar12 = FUNC_08008640(uVar1,uVar4,DAT_0800a1a8,DAT_0800a1ac);\n    uVar11 = FUNC_080082d0((int)uVar12,(int)((ulonglong)uVar12 >> 0x20),(int)uVar11,\n                          (int)((ulonglong)uVar11 >> 0x20));\n  }\n  uVar12 = FUNC_080082d0((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),(int)uVar11,\n                        (int)((ulonglong)uVar11 >> 0x20));\nLAB_0800a0ce:\n  uStack_4c = (undefined4)((ulonglong)uVar10 >> 0x20);\n  local_50 = (undefined4)uVar10;\n  *param_3 = uVar12;\n  uVar10 = FUNC_080082d0(local_50,uStack_4c);\n  uVar10 = FUNC_080082d0((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),(int)uVar11,\n                        (int)((ulonglong)uVar11 >> 0x20));\n  param_3[1] = uVar10;\n  if ((int)param_2 < 0) {\n    *(int *)param_3 = (int)uVar12;\n    *(int *)((int)param_3 + 4) = (int)((ulonglong)uVar12 >> 0x20) + -0x80000000;\n    *(int *)(param_3 + 1) = (int)uVar10;\n    *(int *)((int)param_3 + 0xc) = (int)((ulonglong)uVar10 >> 0x20) + -0x80000000;\n    iVar9 = -iVar9;\n  }\n  return iVar9;\n}\n\n",
            "called": [
                "FUN_080082d0",
                "FUN_080082d4",
                "FUN_0800b2cc",
                "FUN_0800856c",
                "FUN_08008ba0",
                "FUN_0800a5a0",
                "FUN_08008640",
                "FUN_08008b10"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08009d78",
            "calling": [
                "FUN_08009410",
                "FUN_080096e8"
            ],
            "imported": false,
            "current_name": "FUNC_08009d78"
        },
        "FUN_08003826": {
            "renaming": {
                "FUN_08003826": "convert_uint_to_decimal_string_08003826",
                "param_1": "input_num",
                "iVar1": "end_of_string",
                "uVar2": "shifted_num",
                "bVar3": "temp_byte",
                "uVar4": "temp_uint",
                "local_24": "num",
                "acStack_1d": "decimal_string",
                "local_10": "num_copy",
                "local_a": "digit"
            },
            "code": "void convert_uint_to_decimal_string_08003826(uint input_num) {\n  int end_of_string = is_end_of_string_08009228(input_num, 0);\n  uint num = input_num;\n  if (end_of_string != 0) {\n    wait_until_bit_is_set_08008250(0x2d);\n    num = input_num ^ 0x80000000;\n  }\n  for (uint i = 0; i < PTR_DAT_08003970[0x3d]; i += 2) {\n    num = FUNC_08008eec(num, DAT_08003974);\n  }\n  if (PTR_DAT_08003970[0x3d] % 2 != 0) {\n    num = FUNC_08008eec(num, DAT_08003978);\n  }\n  uint shifted_num = FUNC_08008cdc(num, 0x3f000000);\n  uint digit = 0;\n  uint num_copy = convert_param_to_int_08009278(shifted_num);\n  char decimal_string[(byte)PTR_DAT_08003970[0x3d] + 2];\n  decimal_string[(byte)PTR_DAT_08003970[0x3d] + 1] = '.';\n  for (; num_copy != 0; num_copy /= 10) {\n    if (digit == PTR_DAT_08003970[0x3d]) {\n      digit++;\n    }\n    decimal_string[digit] = (char)(num_copy % 10) + '0';\n    digit++;\n  }\n  while (digit < (byte)PTR_DAT_08003970[0x3d] + 1) {\n    decimal_string[digit] = '0';\n    digit++;\n  }\n  if (digit == (byte)PTR_DAT_08003970[0x3d] + 1) {\n    decimal_string[digit] = '0';\n    digit += 2;\n  }\n  for (; digit != 0; digit--) {\n    wait_until_bit_is_set_08008250(decimal_string[digit]);\n  }\n}",
            "called": [
                "FUN_08008250",
                "FUN_08009228",
                "FUN_08009278",
                "FUN_08008cdc",
                "FUN_08008eec"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003826",
            "calling": [
                "FUN_08004250",
                "FUN_080046d0",
                "FUN_08004940",
                "FUN_080044e8"
            ],
            "imported": false,
            "current_name": "convert_uint_to_decimal_string_08003826"
        },
        "FUN_0800923c": {
            "renaming": {
                "FUN_0800923c": "check_if_carry_or_zero_0800923c",
                "in_CY": "carry_flag",
                "in_ZR": "zero_flag",
                "calculate_concatenated_parameters_08009204_08009204": "calculate_concatenated_parameters"
            },
            "code": "bool check_if_carry_or_zero_0800923c(void)\n{\n  undefined carry_flag;\n  undefined zero_flag;\n  calculate_concatenated_parameters();\n  return !(bool)carry_flag || (bool)zero_flag;\n}",
            "called": [
                "FUN_08009204"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800923c",
            "calling": [
                "FUN_080005b4",
                "FUN_08004e30",
                "FUN_08001f00"
            ],
            "imported": false,
            "current_name": "check_if_carry_or_zero_0800923c"
        },
        "FUN_08002afc": {
            "renaming": {
                "FUN_08002afc": "check_input_and_update_result_08002afc",
                "param_1": "input_address",
                "param_2": "result_address",
                "iVar1": "is_end_of_string",
                "uVar2": "input_value",
                "uVar3": "result_value"
            },
            "code": "void check_input_and_update_result_08002afc(int input_address, int result_address) {\n  int is_end_of_string;\n  undefined4 input_value;\n  undefined4 result_value;\n  \n  if (((input_address != 0) && (*(char *)(input_address + 0x25) == '\\0')) &&\n     (is_end_of_string = is_end_of_string_08009228(*(undefined4 *)(input_address + 0x18),*(undefined4 *)(result_address + 0x18)),\n     is_end_of_string != 0)) {\n    result_value = *(undefined4 *)(result_address + 0x18);\n    input_value = calculate_result_and_check_input_08002978(*(uint *)(PTR_DAT_08002ba4 + 0x20) ^ 0x80000000,\n                         *(undefined4 *)(input_address + 0x18),*(undefined4 *)(input_address + 0x20));\n    is_end_of_string = is_end_of_string_08009228(result_value,input_value);\n    if (is_end_of_string == 0) {\n      input_value = calculate_result_and_check_input_08002978(*(uint *)(PTR_DAT_08002ba4 + 0x20) ^ 0x80000000,\n                           *(undefined4 *)(input_address + 0x18),*(undefined4 *)(input_address + 0x20));\n    }\n    else {\n      input_value = *(undefined4 *)(result_address + 0x18);\n    }\n    is_end_of_string = check_input_is_not_null_08009214_08009214(input_value,*(undefined4 *)(result_address + 0x18));\n    if (is_end_of_string == 0) {\n      *(undefined4 *)(result_address + 0x18) = input_value;\n      *(undefined *)(result_address + 0x24) = 1;\n    }\n  }\n  return;\n}",
            "called": [
                "FUN_08009214",
                "FUN_08009228",
                "FUN_08002978"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002afc",
            "calling": [
                "FUN_08002ba8"
            ],
            "imported": false,
            "current_name": "check_input_and_update_result_08002afc"
        },
        "FUN_08004c48": {
            "renaming": {
                "FUN_08004c48": "write_to_memory_and_checksum_08004c2a_08004c48",
                "param_1": "input_char",
                "PTR_DAT_08004d0c": "memory_address_08004d0c",
                "DAT_08004d10": "memory_data_08004d10",
                "DAT_08004d14": "memory_data_08004d14",
                "DAT_08004d18": "memory_data_08004d18",
                "DAT_08004d1c": "memory_data_08004d1c",
                "DAT_08004d20": "memory_data_08004d20",
                "DAT_08004d24": "memory_data_08004d24",
                "DAT_08004d28": "memory_data_08004d28"
            },
            "code": "void write_to_memory_and_checksum_08004c2a_08004c48(char input_char) {\n    if (input_char != '\\0') {\n        *(undefined4 *)PTR_DAT_08004d0c = DAT_08004d10;\n        *(undefined4 *)(PTR_DAT_08004d0c + 4) = DAT_08004d10;\n        *(undefined4 *)(PTR_DAT_08004d0c + 8) = DAT_08004d10;\n        PTR_DAT_08004d0c[0xd] = 10;\n        *(undefined4 *)(PTR_DAT_08004d0c + 0x10) = DAT_08004d14;\n        *(undefined4 *)(PTR_DAT_08004d0c + 0x14) = DAT_08004d18;\n        *(undefined4 *)(PTR_DAT_08004d0c + 0x20) = DAT_08004d1c;\n        *(undefined4 *)(PTR_DAT_08004d0c + 0x1c) = DAT_08004d20;\n        *(undefined2 *)(PTR_DAT_08004d0c + 0x18) = 0;\n        *(undefined2 *)(PTR_DAT_08004d0c + 0x1a) = 0xa80;\n        *(undefined4 *)(PTR_DAT_08004d0c + 0x24) = DAT_08004d24;\n    }\n    PTR_DAT_08004d0c[0x28] = 0;\n    PTR_DAT_08004d0c[0x28] |= 2;\n    PTR_DAT_08004d0c[0x28] |= 0x10;\n    *(undefined2 *)(PTR_DAT_08004d0c + 0x2a) = 0;\n    *(undefined4 *)(PTR_DAT_08004d0c + 0x2c) = DAT_08004d28;\n    *(undefined4 *)(PTR_DAT_08004d0c + 0x30) = DAT_08004d14;\n    *(undefined2 *)(PTR_DAT_08004d0c + 0x34) = 100;\n    *(undefined4 *)(PTR_DAT_08004d0c + 0x38) = 0x3f800000;\n    PTR_DAT_08004d0c[0x3c] = 0x19;\n    PTR_DAT_08004d0c[0x3d] = 3;\n    PTR_DAT_08004d0c[0x3e] = 0x19;\n    write_to_memory_and_checksum_08004c2a_08004c48();\n    return;\n}",
            "called": [
                "FUN_08004c2a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004c48",
            "calling": [
                "FUN_080051b4",
                "FUN_08004dd2"
            ],
            "imported": false,
            "current_name": "write_to_memory_and_checksum_08004c2a_08004c48"
        },
        "FUN_080002a0": {
            "renaming": {
                "FUN_080002a0": "find_value_greater_than_sum_of_param_and_pointer_080002a0",
                "param_1": "ptr_param"
            },
            "code": "void find_value_greater_than_sum_of_param_and_pointer_080002a0(void* ptr_param){\n  find_value_greater_than_sum_of_param_and_pointer_080002a0_08005a98(ptr_param);\n  return;\n}",
            "called": [
                "FUN_08005a98"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080002a0",
            "calling": [
                "FUN_08002408"
            ],
            "imported": false,
            "current_name": "find_value_greater_than_sum_of_param_and_pointer_080002a0"
        },
        "FUN_08009250": {
            "renaming": {
                "FUN_08009250": "check_sum_of_concatenated_parameters_08009250",
                "in_ZR": "zero_flag",
                "in_CY": "carry_flag",
                "concatenate_parameters_and_calculate_sum_080091fc": "concatenate_parameters_and_calculate_sum"
            },
            "code": "bool check_sum_of_concatenated_parameters_08009250(void)\n{\n  undefined zero_flag;\n  undefined carry_flag;\n  concatenate_parameters_and_calculate_sum();\n  return !(bool)carry_flag || (bool)zero_flag;\n}",
            "called": [
                "FUN_080091fc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009250",
            "calling": [
                "FUN_08003004",
                "FUN_08001f00"
            ],
            "imported": false,
            "current_name": "check_sum_of_concatenated_parameters_08009250"
        },
        "FUN_0800640c": {
            "renaming": {
                "FUN_0800640c": "decode_bitstream_0800640c",
                "param_1": "stream_type",
                "param_2": "stream_flags",
                "param_3": "stream_data",
                "local_1c": "local_1",
                "local_18": "local_2",
                "local_10": "local_3",
                "local_14": "local_4",
                "local_c": "local_5",
                "DAT_080064b0": "bitstream_flags",
                "DAT_080064b4": "stream_data_1",
                "DAT_080064b8": "stream_data_2"
            },
            "code": "void decode_bitstream_0800640c(uint8_t stream_type, uint32_t stream_flags, uint32_t stream_data) {\n    uint32_t DAT_080064b0 = *(uint32_t*)(DAT_080064b0 + 0x30);\n    uint32_t local_1 = 0x100;\n    uint32_t local_2 = 2;\n    uint32_t local_3 = 3;\n    uint32_t local_4 = 0;\n    uint32_t local_5 = 0;\n    if (stream_type == 0) {\n        DAT_080064b0 |= 1;\n        decode_bitstream_0800640c_08006e88(DAT_080064b4, &local_1);\n        *(uint32_t*)(DAT_080064b0 + 8) = (stream_data | stream_flags | *(uint32_t*)(DAT_080064b0 + 8) & 0xf89fffff);\n    }\n    else {\n        DAT_080064b0 |= 4;\n        local_1 = 0x200;\n        decode_bitstream_0800640c_08006e88(DAT_080064b8, &local_1);\n        *(uint32_t*)(DAT_080064b0 + 8) = (stream_flags | (stream_data << 3) | *(uint32_t*)(DAT_080064b0 + 8) & 0x7ffffff);\n    }\n}",
            "called": [
                "FUN_08006e88"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800640c",
            "calling": [],
            "imported": false,
            "current_name": "decode_bitstream_0800640c"
        },
        "FUN_08008af0": {
            "renaming": {
                "FUN_08008af0": "validate_and_return_value_08008af0",
                "param_1": "param_1",
                "param_2": "param_2",
                "param_3": "input_1",
                "param_4": "input_2",
                "check_params_and_return_value_08008b00": "check_params_and_return_value"
            },
            "code": "void validate_and_return_value_08008af0(undefined4 input_1, undefined4 input_2, undefined4 param_1, undefined4 param_2)\n{\n  check_params_and_return_value(input_1, input_2, param_1, param_2);\n  return;\n}",
            "called": [
                "FUN_08008b00"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008af0",
            "calling": [
                "FUN_08008b60",
                "FUN_08008b4c"
            ],
            "imported": false,
            "current_name": "validate_and_return_value_08008af0"
        },
        "FUN_08006e1a": {
            "renaming": {
                "FUN_08006e1a": "check_bit_08006e1a",
                "param_1": "bit_index",
                "uVar1": "is_set",
                "check_bit_08006ac0": "check_bit"
            },
            "code": "int check_bit_08006e1a(int bit_index) {\n  int is_set = (param_1 >> bit_index) & 1;\n  return is_set;\n}",
            "called": [
                "FUN_08006ac0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006e1a",
            "calling": [],
            "imported": false,
            "current_name": "check_bit_08006e1a"
        },
        "FUN_080052ac": {
            "renaming": {
                "FUN_080052ac": "update_value_at_address_080052ac",
                "param_1": "new_value",
                "DAT_080052d8": "PTR_data_address",
                "PTR_data_address": "address",
                "mask": "mask_value",
                "current_value": "old_value",
                "masked_current_value": "masked_old_value",
                "masked_new_value": "masked_new_value"
            },
            "code": "void update_value_at_address_080052ac(uint new_value){\n  uint* PTR_data_address = (uint*)(DAT_080052d8 + 0x14);\n  uint current_value = *PTR_data_address;\n  uint mask = 0xfffffaaf;\n  uint masked_current_value = current_value & mask;\n  uint masked_new_value = new_value | masked_current_value;\n  *PTR_data_address = masked_new_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080052ac",
            "calling": [
                "FUN_0800583c",
                "FUN_08005778",
                "FUN_08005760"
            ],
            "imported": false,
            "current_name": "update_value_at_address_080052ac"
        },
        "FUN_08008286": {
            "renaming": {
                "FUN_08008286": "check_lowest_byte_if_bit_set_08008286",
                "uVar1": "lowest_byte",
                "iVar2": "is_bit_set",
                "get_lowest_byte_of_second_ptr_08007e84": "get_lowest_byte",
                "check_byte_value_08005900": "check_byte_validity"
            },
            "code": "undefined check_lowest_byte_if_bit_set_08008286(void)\n{\n    undefined lowest_byte;\n    int is_bit_set = is_bit_set_08007e58();\n    if (is_bit_set != 0) {\n        lowest_byte = get_lowest_byte_of_second_ptr_08007e84();\n        int is_byte_valid = check_byte_value_08005900(lowest_byte);\n        if (is_byte_valid == 0) {\n            return lowest_byte;\n        }\n    }\n    return 0xff;\n}",
            "called": [
                "FUN_08005900",
                "FUN_08007e84",
                "FUN_08007e58"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008286",
            "calling": [
                "FUN_08003f34"
            ],
            "imported": false,
            "current_name": "check_lowest_byte_if_bit_set_08008286"
        },
        "FUN_0800b5bc": {
            "renaming": {
                "FUN_0800b5bc": "do_nothing_0800b5bc"
            },
            "code": "\nvoid do_nothing_0800b5bc(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800b5bc",
            "calling": [],
            "imported": false,
            "current_name": "do_nothing_0800b5bc"
        },
        "FUN_08008b74": {
            "renaming": {
                "FUN_08008b74": "is_valid_input_08008b74",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4"
            },
            "code": "int is_valid_input_08008b74(uint input1, int input2, uint input3, int input4)\n{\n  int is_invalid = (((input2 << 1) >> 0x15) != -1) || ((input1 | (input2 << 0xc)) == 0) || (((input4 << 1) >> 0x15) != -1) || ((input3 | (input4 << 0xc)) == 0);\n  return !is_invalid;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008b74",
            "calling": [
                "FUN_080098d0"
            ],
            "imported": false,
            "current_name": "is_valid_input_08008b74"
        },
        "FUN_0800b524": {
            "renaming": {
                "FUN_0800b524": "add_data_to_list_0800b524",
                "param_1": "data",
                "param_2": "list_ptr",
                "param_3": "list_size",
                "param_4": "flag",
                "puVar1": "list_start",
                "uVar2": "return_val",
                "uVar3": "bit_mask",
                "iVar4": "list_base",
                "iVar5": "list_end",
                "uVar6": "list_offset"
            },
            "code": "int add_data_to_list_0800b524(int data, int* list_ptr, int list_size, int flag) {\n  int* list_start = *list_ptr;\n  do_nothing(list_start);\n  int list_base = *(int *)(list_ptr + 4);\n  int list_end = *(int *)(list_base + 0x148);\n  if (list_end == 0) {\n    list_end = list_base + 0x14c;\n    *(int *)(list_base + 0x148) = list_end;\n  }\n  uint list_offset = *(uint *)(list_end + 4);\n  if ((int)list_offset < list_size) {\n    if (data != 0) {\n      int* data_ptr = list_end + list_offset * 4;\n      *(int *)(data_ptr + 0x88) = flag;\n      uint bit_mask = 1 << (list_offset & 0xff);\n      *(uint *)(list_end + 0x188) = *(uint *)(list_end + 0x188) | bit_mask;\n      *(int *)(data_ptr + 0x108) = flag;\n      if (data == 2) {\n        *(uint *)(list_end + 0x18c) = bit_mask | *(uint *)(list_end + 0x18c);\n      }\n    }\n    int list_val = *list_start;\n    *(uint *)(list_end + 4) = list_offset + 1;\n    *(int *)(list_end + (list_offset + 2) * 4) = list_val;\n    do_nothing(list_val);\n    return 0;\n  }\n  else {\n    do_nothing(list_start);\n    return -1;\n  }\n}",
            "called": [
                "FUN_0800b51c",
                "FUN_0800b520"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800b524",
            "calling": [
                "FUN_0800b4d0"
            ],
            "imported": false,
            "current_name": "add_data_to_list_0800b524"
        },
        "FUN_08005214": {
            "renaming": {
                "FUN_08005214": "do_nothing_08005214"
            },
            "code": "\nvoid do_nothing_08005214(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005214",
            "calling": [
                "FUN_08005250"
            ],
            "imported": false,
            "current_name": "do_nothing_08005214"
        },
        "FUN_08007ea4": {
            "renaming": {
                "FUN_08007ea4": "set_flag_08007ea4",
                "param_1": "flag_value",
                "DAT_08007f38": "FLAG_1",
                "DAT_08007f40": "FLAG_2",
                "DAT_08007f44": "FLAG_3",
                "DAT_08007f48": "FLAG_4",
                "DAT_08007f4c": "FLAG_5",
                "DAT_08007f50": "FLAG_6",
                "*(uint *)(DAT_08007f3c + 0x44)": "flag_ptr2",
                "*(uint *)(DAT_08007f3c + 0x40)": "flag_ptr"
            },
            "code": "void set_flag_08007ea4(int flag_value) {\n    uint* *(uint *)(DAT_08007f3c + 0x40) = (uint*)(DAT_08007f3c + 0x40);\n    uint* *(uint *)(DAT_08007f3c + 0x44) = (uint*)(DAT_08007f3c + 0x44);\n    switch (flag_value) {\n        case DAT_08007f38:\n            **(uint *)(DAT_08007f3c + 0x44) |= 0x10;\n            break;\n        case DAT_08007f40:\n            **(uint *)(DAT_08007f3c + 0x40) |= 0x20000;\n            break;\n        case DAT_08007f44:\n            **(uint *)(DAT_08007f3c + 0x40) |= 0x40000;\n            break;\n        case DAT_08007f48:\n            **(uint *)(DAT_08007f3c + 0x40) |= 0x80000;\n            break;\n        case DAT_08007f4c:\n            **(uint *)(DAT_08007f3c + 0x40) |= 0x100000;\n            break;\n        case DAT_08007f50:\n            **(uint *)(DAT_08007f3c + 0x44) |= 0x20;\n            break;\n    }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007ea4",
            "calling": [
                "FUN_08008190"
            ],
            "imported": false,
            "current_name": "set_flag_08007ea4"
        },
        "FUN_08007756": {
            "renaming": {
                "FUN_08007756": "check_and_set_bits_in_array_if_value_is_multiple_of_512_08007756",
                "get_value_from_pointer_08005a84": "get_value_from_pointer",
                "set_bit_in_uint_array_080076c8": "set_bit_in_uint_array",
                "decode_bits_and_calculate_sum_if_not_zero_08007930": "decode_bits_and_calculate_sum_if_not_zero",
                "increment_ptr_dat_08005a80_08005a68": "increment_pointer"
            },
            "code": "void check_and_set_bits_in_array_if_value_is_multiple_of_512_08007756(void)\n{\n  uint pointer_value = get_value_from_pointer();\n  if ((pointer_value & 0x1ff) == 0) {\n    set_bit_in_uint_array(0x3c);\n  }\n  if ((pointer_value & 0xf) == 0) {\n    decode_bits_and_calculate_sum_if_not_zero();\n  }\n  increment_pointer();\n  return;\n}",
            "called": [
                "FUN_08007930",
                "FUN_080076c8",
                "FUN_08005a68",
                "FUN_08005a84"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007756",
            "calling": [],
            "imported": false,
            "current_name": "check_and_set_bits_in_array_if_value_is_multiple_of_512_08007756"
        },
        "FUN_0800b520": {
            "renaming": {
                "FUN_0800b520": "do_nothing_0800b520"
            },
            "code": "\nvoid do_nothing_0800b520(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800b520",
            "calling": [
                "FUN_0800b524"
            ],
            "imported": false,
            "current_name": "do_nothing_0800b520"
        },
        "FUN_0800423c": {
            "renaming": {
                "FUN_0800423c": "wait_until_all_bits_are_set_0800423c",
                "PTR_s_____view_Grbl_settings______view_0800424c": "PTR_settings_view"
            },
            "code": "void wait_until_all_bits_are_set_0800423c(void)\n{\n  wait_until_all_bits_are_set_0800423c(PTR_s_____view_Grbl_settings______view_0800424c);\n  return;\n}",
            "called": [
                "FUN_080036c6"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800423c",
            "calling": [
                "FUN_08003b98"
            ],
            "imported": false,
            "current_name": "wait_until_all_bits_are_set_0800423c"
        },
        "FUN_08009264": {
            "renaming": {
                "FUN_08009264": "check_if_input_is_null_08009264_08009264",
                "in_CY": "input_char"
            },
            "code": "bool check_if_input_is_null_08009264_08009264(void)\n{\n  char input_char;\n  concatenate_parameters_and_calculate_sum_080091fc();\n  return input_char == '\\0';\n}",
            "called": [
                "FUN_080091fc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009264",
            "calling": [
                "FUN_080029d8",
                "FUN_08003004"
            ],
            "imported": false,
            "current_name": "check_if_input_is_null_08009264_08009264"
        },
        "FUN_08007e08": {
            "renaming": {
                "FUN_08007e08": "initialize_system_and_interrupts_08007e08",
                "initialize_data_and_flags_08007ad0": "initialize_data_and_flags",
                "initialize_data_08007d08": "initialize_data",
                "set_flag_and_enable_interrupts_08007da8": "set_flags_and_enable_interrupts"
            },
            "code": "void initialize_system_and_interrupts_08007e08(void)\n{\n  initialize_data_and_flags();\n  initialize_data();\n  set_flags_and_enable_interrupts();\n  return;\n}",
            "called": [
                "FUN_08007ad0",
                "FUN_08007d08",
                "FUN_08007da8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007e08",
            "calling": [
                "FUN_08007540"
            ],
            "imported": false,
            "current_name": "initialize_system_and_interrupts_08007e08"
        },
        "FUN_08002fac": {
            "renaming": {
                "FUN_08002fac": "are_pointers_equal_08002fac",
                "*PTR_DAT_08002fcc": "*pointer_1",
                "*PTR_DAT_08002fd0": "*pointer_2"
            },
            "code": "bool are_pointers_equal_08002fac(void)\n{\n  bool result = (*PTR_DAT_08002fcc == *PTR_DAT_08002fd0);\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002fac",
            "calling": [
                "FUN_08001e98"
            ],
            "imported": false,
            "current_name": "are_pointers_equal_08002fac"
        },
        "FUN_080002b6": {
            "renaming": {
                "FUN_080002b6": "calculate_value_based_on_pointer_and_param_080002b6",
                "param_1": "param",
                "uVar1": "value1",
                "uVar2": "value2",
                "bVar3": "is_greater",
                "lVar4": "result1",
                "uVar5": "result2"
            },
            "code": "void calculate_value_based_on_pointer_and_param_080002b6(uint32_t param)\n{\n  uint32_t value1;\n  uint32_t value2;\n  bool is_greater;\n  uint64_t result1;\n  uint64_t result2;\n\n  result1 = calculate_value_based_on_pointer_08000268();\n  value2 = (uint32_t)(result1 + (uint64_t)param >> 0x20);\n  do {\n    result2 = calculate_value_based_on_pointer_08000268();\n    value1 = (uint32_t)(result2 >> 0x20);\n    is_greater = value2 <= value1;\n    if (value1 == value2) {\n      is_greater = (uint32_t)(result1 + (uint64_t)param) <= (uint32_t)result2;\n    }\n  } while (!is_greater);\n  return;\n}",
            "called": [
                "FUN_08000268"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080002b6",
            "calling": [],
            "imported": false,
            "current_name": "calculate_value_based_on_pointer_and_param_080002b6"
        }
    },
    "used_tokens": 196553,
    "layers": [
        [
            "FUN_0800192c",
            "FUN_08006950",
            "FUN_08008ba0",
            "FUN_08007a10",
            "FUN_0800856c",
            "FUN_0800597c",
            "FUN_08009798",
            "FUN_08000188",
            "FUN_080018cc",
            "FUN_080079e0",
            "FUN_08006a58",
            "FUN_08005a84",
            "FUN_08008c30",
            "FUN_08007bf0",
            "FUN_08008590",
            "FUN_08007c5e",
            "FUN_0800587c",
            "FUN_08008a02",
            "FUN_080028bc",
            "FUN_0800738e",
            "FUN_0800a1bc",
            "FUN_080073d4",
            "FUN_08006e88",
            "FUN_08009990",
            "FUN_08007e58",
            "FUN_080059f8",
            "FUN_0800b3dc",
            "FUN_0800756c",
            "FUN_08002f74",
            "FUN_0800b3e8",
            "FUN_08006a18",
            "FUN_08006ac0",
            "FUN_0800919c",
            "FUN_0800854c",
            "FUN_08008e44",
            "FUN_0800733e",
            "FUN_080069e4",
            "FUN_0800b2d4",
            "FUN_08008e3c",
            "FUN_08009654",
            "FUN_08007bc2",
            "FUN_080035ec",
            "FUN_08006c70",
            "FUN_08005a68",
            "FUN_0800b2e0",
            "FUN_08002908",
            "FUN_08007c40",
            "FUN_08006b54",
            "FUN_08007e84",
            "FUN_0800b2e8",
            "FUN_08007402",
            "FUN_08002870",
            "FUN_08000210",
            "FUN_08006c04",
            "thunk_FUN_08009990",
            "FUN_08009278",
            "FUN_08007da8",
            "FUN_08008a74",
            "FUN_0800b430",
            "FUN_08005360",
            "FUN_08003980",
            "FUN_080052dc",
            "FUN_080064ec",
            "FUN_08006ba0",
            "FUN_08002896",
            "FUN_080001ac",
            "FUN_08000478",
            "FUN_08007e1c",
            "FUN_08006b00",
            "FUN_08005250",
            "FUN_08007430",
            "FUN_08005bdc",
            "FUN_080069b4",
            "FUN_08007b70",
            "FUN_080018fc",
            "FUN_08006998",
            "FUN_080078f4",
            "FUN_08008bf0",
            "FUN_08007854",
            "FUN_080076c8",
            "FUN_08006a8c",
            "FUN_0800881c",
            "FUN_080052ac",
            "FUN_08008b74",
            "FUN_0800b524",
            "FUN_08007ea4",
            "FUN_08002fac"
        ],
        [
            "FUN_08005984",
            "FUN_08008b00",
            "FUN_08009204",
            "FUN_08005760",
            "FUN_08005a98",
            "FUN_08006c9c",
            "FUN_08005778",
            "FUN_08006628",
            "FUN_08008250",
            "FUN_08006ce0",
            "FUN_08006d4a",
            "FUN_08006dfe",
            "FUN_08006d66",
            "FUN_080095b8",
            "FUN_08006cf6",
            "FUN_08002ef0",
            "FUN_08000268",
            "FUN_080001f8",
            "FUN_08006d98",
            "FUN_080079c0",
            "FUN_080057e4",
            "FUN_08006d8a",
            "FUN_08007520",
            "FUN_08007884",
            "FUN_08006dc4",
            "FUN_08005c30",
            "FUN_0800056c",
            "FUN_0800981c",
            "FUN_080004fc",
            "FUN_08005238",
            "FUN_08007d08",
            "FUN_08006de0",
            "FUN_08006d2e",
            "FUN_0800adf0",
            "FUN_0800b4d0",
            "FUN_08002f40",
            "FUN_080002f0",
            "FUN_0800778c",
            "FUN_08005790",
            "FUN_0800826a",
            "FUN_08005324",
            "FUN_0800640c",
            "FUN_08006e1a"
        ],
        [
            "FUN_0800585c",
            "FUN_08008b10",
            "FUN_08008b24",
            "FUN_0800369c",
            "FUN_08009214",
            "FUN_080036f0",
            "FUN_08001d4c",
            "FUN_08003778",
            "FUN_08006d72",
            "FUN_080096e8",
            "FUN_0800583c",
            "FUN_08009410",
            "FUN_08002f24",
            "FUN_08006680",
            "FUN_08000340",
            "FUN_080091fc",
            "FUN_080036c6",
            "FUN_080025e8",
            "FUN_08005814",
            "FUN_08009228",
            "FUN_08007c7c",
            "FUN_080066cc",
            "FUN_0800618c",
            "FUN_0800283a",
            "FUN_08000310",
            "FUN_08007a70",
            "FUN_0800923c",
            "FUN_080002a0",
            "FUN_08008af0",
            "FUN_080002b6"
        ],
        [
            "FUN_08007ad0",
            "FUN_0800195c",
            "FUN_08000374",
            "FUN_080037fc",
            "FUN_0800375c",
            "FUN_08005900",
            "FUN_08002638",
            "FUN_080098d0",
            "FUN_080059b4",
            "FUN_08004148",
            "FUN_08004030",
            "FUN_080003ec",
            "FUN_08003740",
            "FUN_08007f54",
            "FUN_08007436",
            "FUN_080041a0",
            "FUN_08003a18",
            "FUN_08004228",
            "FUN_08008b4c",
            "FUN_08008b60",
            "FUN_08003826",
            "FUN_08009250",
            "FUN_0800423c",
            "FUN_08009264"
        ],
        [
            "FUN_08009318",
            "FUN_080039a0",
            "FUN_0800184c",
            "FUN_080046d0",
            "FUN_080094c0",
            "FUN_08004250",
            "FUN_08004bf4",
            "FUN_08004940",
            "FUN_08008190",
            "FUN_080074c8",
            "FUN_08004900",
            "FUN_08004bc0",
            "FUN_08004c2a",
            "FUN_08002978",
            "FUN_08008286",
            "FUN_08007e08"
        ],
        [
            "FUN_08007930",
            "FUN_080029d8",
            "FUN_08002c18",
            "FUN_08004d7c",
            "FUN_08004d2c",
            "FUN_08002afc",
            "FUN_08004c48"
        ],
        [
            "FUN_080044e8",
            "FUN_08004dd2",
            "FUN_08002ba8",
            "FUN_08002e08",
            "FUN_08002a94",
            "FUN_080039bc",
            "FUN_080004ac",
            "FUN_08007756"
        ],
        [
            "FUN_08002edc",
            "FUN_080051b4"
        ],
        [
            "FUN_08003618"
        ],
        [
            "FUN_080058a0"
        ],
        [
            "FUN_08003a74"
        ],
        [
            "FUN_08001e98",
            "FUN_08002fd4"
        ],
        [
            "FUN_0800525c",
            "FUN_08000220",
            "FUN_08002408",
            "FUN_080024c4"
        ],
        [
            "FUN_08003b98"
        ],
        [
            "FUN_08003f34"
        ],
        [
            "FUN_08001ddc"
        ],
        [
            "FUN_08007540"
        ],
        [
            "FUN_080092c4"
        ]
    ],
    "locked_functions": []
}