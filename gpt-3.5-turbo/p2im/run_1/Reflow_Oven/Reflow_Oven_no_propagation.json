{
    "functions": {
        "FUN_08002470": {
            "renaming": {
                "FUN_08002470": "update_register_08002470",
                "param_1": "input_value",
                "DAT_08002490": "register_data",
                "register_ptr": "register_pointer",
                "register_value": "register_value",
                "mask": "mask",
                "new_value": "new_value"
            },
            "code": "void update_register_08002470(uint input_value)\n{\n    uint* register_ptr = (uint*)(DAT_08002490 + 0xc);\n    uint register_value = *register_ptr;\n    uint mask = 0xf8ff;\n    uint new_value = (input_value & 7) << 8 | (register_value & mask) | 0x5fa0000;\n    *register_ptr = new_value;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002470",
            "calling": [
                "FUN_08001c88",
                "FUN_08005f5e"
            ],
            "imported": false,
            "current_name": "update_register_08002470"
        },
        "FUN_08007004": {
            "renaming": {
                "FUN_08007004": "process_input_08007004",
                "param_1": "output",
                "param_2": "input1",
                "param_3": "input2",
                "param_4": "input3",
                "puVar1": "data_pointer",
                "iVar2": "result",
                "PTR_DAT_08007024": "PTR_DAT",
                "FUN_0800571a": "calculate_result"
            },
            "code": "void process_input_08007004(int *output, undefined4 input1, undefined4 input2, undefined4 input3)\n{\n    undefined *data_pointer;\n    int result;\n    data_pointer = PTR_DAT_08007024_08007024;\n    *(undefined4 *)PTR_DAT_08007024_08007024 = 0;\n    result = calculate_result(input1, input2, input2, 0, input3);\n    if ((result == -1) && (*(int *)data_pointer != 0)) {\n        *output = *(int *)data_pointer;\n    }\n    return;\n}",
            "called": [
                "FUN_0800571a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007004",
            "calling": [
                "FUN_08006dc8"
            ],
            "imported": false,
            "current_name": "process_input_08007004"
        },
        "FUN_08006394": {
            "renaming": {
                "FUN_08006394": "FUNC_08006394"
            },
            "code": "\nint FUNC_08006394(int param_1,undefined *param_2,byte *param_3,int *param_4)\n\n{\n  undefined *puVar1;\n  int iVar2;\n  int *piVar3;\n  bool bVar4;\n  byte *pbVar5;\n  byte *pbVar6;\n  int unaff_r9;\n  int iVar7;\n  int *local_8c;\n  uint local_88;\n  int local_84;\n  undefined4 local_80;\n  int local_7c;\n  int local_74;\n  byte local_70;\n  undefined local_6f;\n  undefined local_6e;\n  undefined local_45;\n  undefined4 local_30;\n  \n  local_8c = param_4;\n  if ((param_1 != 0) && (*(int *)(param_1 + 0x18) == 0)) {\n    FUN_08006cb4();\n  }\n  if (param_2 == PTR_DAT_080065a0) {\n    param_2 = *(undefined **)(param_1 + 4);\n  }\n  else if (param_2 == PTR_DAT_080065a8) {\n    param_2 = *(undefined **)(param_1 + 8);\n  }\n  else if (param_2 == PTR_DAT_080065ac) {\n    param_2 = *(undefined **)(param_1 + 0xc);\n  }\n  if (((-1 < (int)((uint)*(ushort *)(param_2 + 0xc) << 0x1c)) || (*(int *)(param_2 + 0x10) == 0)) &&\n     (iVar7 = FUN_080069e4(param_1,param_2), iVar7 != 0)) {\n    return -1;\n  }\n  local_74 = 0;\n  local_6f = 0x20;\n  local_6e = 0x30;\n  pbVar5 = param_3;\nLAB_080063d6:\n  pbVar6 = pbVar5;\n  if (*pbVar6 != 0) goto LAB_0800648c;\n  goto LAB_080063e0;\nLAB_0800648c:\n  pbVar5 = pbVar6 + 1;\n  if (*pbVar6 != 0x25) goto LAB_080063d6;\nLAB_080063e0:\n  iVar7 = (int)pbVar6 - (int)param_3;\n  if (iVar7 != 0) {\n    iVar2 = FUN_08006370(param_1,param_2,param_3,iVar7);\n    if (iVar2 == -1) {\nLAB_08006580:\n      if ((int)((uint)*(ushort *)(param_2 + 0xc) << 0x19) < 0) {\n        return -1;\n      }\n      return local_74;\n    }\n    local_74 = local_74 + iVar7;\n  }\n  if (*pbVar6 == 0) goto LAB_08006580;\n  local_88 = 0;\n  local_7c = 0;\n  local_84 = -1;\n  local_80 = 0;\n  local_45 = 0;\n  local_30 = 0;\n  pbVar5 = pbVar6 + 1;\n  while( true ) {\n    iVar7 = FUN_08006e90(PTR_s___0__080065a4,*pbVar5);\n    puVar1 = PTR_DAT_080065b0;\n    param_3 = pbVar5 + 1;\n    if (iVar7 == 0) break;\n    local_88 = 1 << (iVar7 - (int)PTR_s___0__080065a4 & 0xffU) | local_88;\n    pbVar5 = param_3;\n  }\n  if ((int)(local_88 << 0x1b) < 0) {\n    local_45 = 0x20;\n  }\n  if ((int)(local_88 << 0x1c) < 0) {\n    local_45 = 0x2b;\n  }\n  if (*pbVar5 == 0x2a) {\n    piVar3 = local_8c + 1;\n    iVar7 = *local_8c;\n    local_8c = piVar3;\n    if (-1 < iVar7) goto LAB_080064b0;\n    local_7c = -iVar7;\n    local_88 = local_88 | 2;\n  }\n  else {\n    bVar4 = false;\n    iVar7 = local_7c;\n    param_3 = pbVar5;\n    while( true ) {\n      if (9 < *param_3 - 0x30) break;\n      iVar7 = iVar7 * 10 + (*param_3 - 0x30);\n      bVar4 = true;\n      param_3 = param_3 + 1;\n    }\n    if (bVar4) {\nLAB_080064b0:\n      local_7c = iVar7;\n    }\n  }\n  if (*param_3 == 0x2e) {\n    if (param_3[1] == 0x2a) {\n      param_3 = param_3 + 2;\n      piVar3 = local_8c + 1;\n      local_84 = *local_8c;\n      local_8c = piVar3;\n      if (local_84 < 0) {\n        local_84 = -1;\n      }\n    }\n    else {\n      bVar4 = false;\n      iVar7 = 0;\n      local_84 = 0;\n      while( true ) {\n        param_3 = param_3 + 1;\n        if (9 < *param_3 - 0x30) break;\n        iVar7 = iVar7 * 10 + (*param_3 - 0x30);\n        bVar4 = true;\n      }\n      if (bVar4) {\n        local_84 = iVar7;\n      }\n    }\n  }\n  iVar7 = FUN_08006e90(PTR_DAT_080065b0,*param_3,3);\n  if (iVar7 != 0) {\n    param_3 = param_3 + 1;\n    local_88 = local_88 | 0x40 << (iVar7 - (int)puVar1 & 0xffU);\n  }\n  local_70 = *param_3;\n  param_3 = param_3 + 1;\n  iVar7 = FUN_08006e90(PTR_s_efgEFG_080065b4,local_70,6);\n  if (iVar7 == 0) {\n    iVar7 = FUNC_080066b0(param_1,&local_88,param_2,DAT_080065bc,&local_8c);\n  }\n  else {\n    iVar7 = param_1;\n    if (DAT_080065b8 == 0) {\n      local_8c = (int *)(((int)local_8c + 7U & 0xfffffff8) + 8);\n      iVar7 = unaff_r9;\n      goto LAB_08006532;\n    }\n  }\n  if (iVar7 == -1) goto LAB_08006580;\nLAB_08006532:\n  local_74 = local_74 + iVar7;\n  pbVar5 = param_3;\n  unaff_r9 = iVar7;\n  goto LAB_080063d6;\n}\n\n",
            "called": [
                "FUN_08006e90",
                "FUN_080066b0",
                "FUN_080069e4",
                "FUN_08006cb4",
                "FUN_08006370"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08006394",
            "calling": [
                "FUN_08006174",
                "FUN_080068f0"
            ],
            "imported": false,
            "current_name": "FUNC_08006394"
        },
        "FUN_08005740": {
            "renaming": {
                "FUN_08005740": "set_ptr_dat_value_08005740",
                "PTR_DAT_0800574c": "ptr_dat_value"
            },
            "code": "void set_ptr_dat_value_08005740(void)\n{\n    int new_value = 22;\n    *(int *)PTR_DAT_0800574c = new_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005740",
            "calling": [
                "FUN_08006f00"
            ],
            "imported": false,
            "current_name": "set_ptr_dat_value_08005740"
        },
        "FUN_08006158": {
            "renaming": {
                "FUN_08006158": "calculate_result_08006158",
                "param_1": "input_param_1",
                "param_2": "input_param_2",
                "DAT_08006170": "global_variable",
                "CONCAT44": "N/A"
            },
            "code": "long long calculate_result_08006158(uint32_t input_param_1, uint32_t input_param_2)\n{\n    if (DAT_08006170 != 0)\n    {\n        return (long long)input_param_1 * 2;\n    }\n    return (unsigned long long)input_param_2 << 0x20;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006158",
            "calling": [
                "FUN_08006112"
            ],
            "imported": false,
            "current_name": "calculate_result_08006158"
        },
        "FUN_08003688": {
            "renaming": {
                "FUN_08003688": "FUNC_08003688"
            },
            "code": "\n/* WARNING: Globals starting with '_' overlap smaller symbols at the same address */\n\nundefined4 FUNC_08003688(uint *param_1)\n\n{\n  uint *puVar1;\n  uint *puVar2;\n  int iVar3;\n  int iVar4;\n  undefined4 uVar5;\n  uint uVar6;\n  bool bVar7;\n  \n  puVar1 = DAT_08003948;\n  if ((*param_1 & 1) != 0) {\n    if (((DAT_08003948[1] & 0xc) == 4) ||\n       (((DAT_08003948[1] & 0xc) == 8 && ((DAT_08003948[1] & 0x10000) != 0)))) {\n      if (((*DAT_08003948 & 0x20000) != 0) && (param_1[1] == 0)) {\n        return 1;\n      }\n    }\n    else {\n      uVar6 = param_1[1];\n      if (uVar6 == 0x10000) {\n        *DAT_08003948 = *DAT_08003948 | 0x10000;\n      }\n      else if (uVar6 == 0) {\n        _DAT_40021000 = _DAT_40021000 & 0xfffaffff;\n      }\n      else if (uVar6 == 0x50000) {\n        _DAT_40021000 = _DAT_40021000 | 0x50000;\n      }\n      else {\n        *DAT_08003948 = *DAT_08003948 & 0xfffeffff;\n        *puVar1 = *puVar1 & 0xfffbffff;\n      }\n      if (param_1[1] == 0) {\n        iVar3 = FUN_08001cc4();\n        while ((*DAT_08003948 & 0x20000) != 0) {\n          iVar4 = FUN_08001cc4();\n          if (100 < (uint)(iVar4 - iVar3)) {\n            return 3;\n          }\n        }\n      }\n      else {\n        iVar3 = FUN_08001cc4();\n        while ((*DAT_08003948 & 0x20000) == 0) {\n          iVar4 = FUN_08001cc4();\n          if (100 < (uint)(iVar4 - iVar3)) {\n            return 3;\n          }\n        }\n      }\n    }\n  }\n  if ((*param_1 & 2) != 0) {\n    if (((DAT_08003948[1] & 0xc) == 0) ||\n       (((DAT_08003948[1] & 0xc) == 8 && ((DAT_08003948[1] & 0x10000) == 0)))) {\n      if (((*DAT_08003948 & 2) != 0) && (param_1[4] != 1)) {\n        return 1;\n      }\n      *DAT_08003948 = *DAT_08003948 & 0xffffff07 | param_1[5] << 3;\n    }\n    else if (param_1[4] == 0) {\n      *DAT_0800394c = 0;\n      iVar3 = FUN_08001cc4();\n      while ((*DAT_08003948 & 2) != 0) {\n        iVar4 = FUN_08001cc4();\n        if (2 < (uint)(iVar4 - iVar3)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      *DAT_0800394c = 1;\n      iVar3 = FUN_08001cc4();\n      while ((*DAT_08003948 & 2) == 0) {\n        iVar4 = FUN_08001cc4();\n        if (2 < (uint)(iVar4 - iVar3)) {\n          return 3;\n        }\n      }\n      *DAT_08003948 = *DAT_08003948 & 0xffffff07 | param_1[5] << 3;\n    }\n  }\n  if ((*param_1 & 8) != 0) {\n    if (param_1[6] == 0) {\n      *DAT_08003950 = 0;\n      iVar3 = FUN_08001cc4();\n      while ((DAT_08003948[9] & 2) != 0) {\n        iVar4 = FUN_08001cc4();\n        if (2 < (uint)(iVar4 - iVar3)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      *DAT_08003950 = 1;\n      iVar3 = FUN_08001cc4();\n      while ((DAT_08003948[9] & 2) == 0) {\n        iVar4 = FUN_08001cc4();\n        if (2 < (uint)(iVar4 - iVar3)) {\n          return 3;\n        }\n      }\n      FUN_0800365c(1);\n    }\n  }\n  if ((*param_1 & 4) != 0) {\n    bVar7 = (DAT_08003948[7] & 0x10000000) == 0;\n    if (bVar7) {\n      DAT_08003948[7] = DAT_08003948[7] | 0x10000000;\n    }\n    if ((*DAT_08003954 & 0x100) == 0) {\n      *DAT_08003954 = *DAT_08003954 | 0x100;\n      iVar3 = FUN_08001cc4();\n      while ((*DAT_08003954 & 0x100) == 0) {\n        iVar4 = FUN_08001cc4();\n        if (100 < (uint)(iVar4 - iVar3)) {\n          return 3;\n        }\n      }\n    }\n    puVar2 = DAT_08003a60;\n    puVar1 = DAT_08003948;\n    uVar6 = param_1[3];\n    if (uVar6 == 1) {\n      DAT_08003948[8] = DAT_08003948[8] | 1;\n    }\n    else if (uVar6 == 0) {\n      _DAT_40021020 = _DAT_40021020 & 0xfffffffa;\n    }\n    else if (uVar6 == 5) {\n      DAT_08003a60[8] = DAT_08003a60[8] | 4;\n      puVar2[8] = puVar2[8] | 1;\n    }\n    else {\n      DAT_08003948[8] = DAT_08003948[8] & 0xfffffffe;\n      puVar1[8] = puVar1[8] & 0xfffffffb;\n    }\n    if (param_1[3] == 0) {\n      iVar3 = FUN_08001cc4();\n      while ((DAT_08003a60[8] & 2) != 0) {\n        iVar4 = FUN_08001cc4();\n        if (5000 < (uint)(iVar4 - iVar3)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      iVar3 = FUN_08001cc4();\n      while ((DAT_08003948[8] & 2) == 0) {\n        iVar4 = FUN_08001cc4();\n        if (5000 < (uint)(iVar4 - iVar3)) {\n          return 3;\n        }\n      }\n    }\n    if (bVar7) {\n      DAT_08003a60[7] = DAT_08003a60[7] & 0xefffffff;\n    }\n  }\n  if (param_1[7] == 0) {\n    uVar5 = 0;\n  }\n  else if ((DAT_08003a60[1] & 0xc) == 8) {\n    uVar5 = 1;\n  }\n  else if (param_1[7] == 2) {\n    *DAT_08003a64 = 0;\n    iVar3 = FUN_08001cc4();\n    do {\n      if ((*DAT_08003a60 & 0x2000000) == 0) {\n        if (param_1[8] == 0x10000) {\n          DAT_08003a60[1] = DAT_08003a60[1] & 0xfffdffff | param_1[2];\n        }\n        DAT_08003a60[1] = DAT_08003a60[1] & 0xffc2ffff | param_1[8] | param_1[9];\n        *DAT_08003a64 = 1;\n        iVar3 = FUN_08001cc4();\n        do {\n          if ((*DAT_08003a60 & 0x2000000) != 0) {\n            return 0;\n          }\n          iVar4 = FUN_08001cc4();\n        } while ((uint)(iVar4 - iVar3) < 3);\n        return 3;\n      }\n      iVar4 = FUN_08001cc4();\n    } while ((uint)(iVar4 - iVar3) < 3);\n    uVar5 = 3;\n  }\n  else {\n    *DAT_08003a64 = 0;\n    iVar3 = FUN_08001cc4();\n    do {\n      if ((*DAT_08003a60 & 0x2000000) == 0) {\n        return 0;\n      }\n      iVar4 = FUN_08001cc4();\n    } while ((uint)(iVar4 - iVar3) < 3);\n    uVar5 = 3;\n  }\n  return uVar5;\n}\n\n",
            "called": [
                "FUN_0800365c",
                "FUN_08001cc4"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08003688",
            "calling": [
                "FUN_08001b48"
            ],
            "imported": false,
            "current_name": "FUNC_08003688"
        },
        "FUN_08004ec4": {
            "renaming": {
                "FUN_08004ec4": "execute_function_if_conditions_met_08004ec4",
                "param_1": "function_param",
                "iVar1": "function_result"
            },
            "code": "void execute_function_if_conditions_met_08004ec4(undefined4 function_param){\n  int function_result = get_function_result();\n  if (((*(code **)(function_result + 0x60) != (code *)0x0) && (*(char *)(function_result + 0x5c) == '\\x01')) && (*(char *)(function_result + 0x2c) != ' ')) {\n    (**(code **)(function_result + 0x60))(function_result + 0x68);\n  }\n  execute_another_function(function_param);\n  return;\n}",
            "called": [
                "FUN_08002c10",
                "FUN_08004e70"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004ec4",
            "calling": [
                "FUN_0800316c",
                "FUN_08002d1c",
                "FUN_080032b4"
            ],
            "imported": false,
            "current_name": "execute_function_if_conditions_met_08004ec4"
        },
        "FUN_08000178": {
            "renaming": {
                "FUN_08000178": "find_end_of_string_08000178",
                "param_1": "str",
                "pcVar2": "current_char",
                "pcVar3": "ptr_to_current_char",
                "cVar1": "current_char_value"
            },
            "code": "char* find_end_of_string_08000178(char* str) {\n    char* current_char = str;\n    while (*current_char != '\\0') {\n        current_char++;\n    }\n    return current_char;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000178",
            "calling": [
                "FUN_08005c96",
                "FUN_08005ce8"
            ],
            "imported": false,
            "current_name": "find_end_of_string_08000178"
        },
        "FUN_08004418": {
            "renaming": {
                "FUN_08004418": "do_nothing_08004418"
            },
            "code": "\nvoid do_nothing_08004418(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004418",
            "calling": [
                "FUN_0800441a"
            ],
            "imported": false,
            "current_name": "do_nothing_08004418"
        },
        "FUN_08006c88": {
            "renaming": {
                "FUN_08006c88": "allocate_memory_for_struct_08006c88",
                "param_1": "base_address",
                "param_2": "struct_size",
                "puVar1": "struct_ptr",
                "iVar2": "offset"
            },
            "code": "undefined4* allocate_memory_for_struct_08006c88(undefined4 base_address, int struct_size)\n{\n  undefined4 *struct_ptr;\n  int offset = (struct_size - 1) * 0x68;\n  struct_ptr = (undefined4*)FUN_08006288(base_address, offset + 0x74);\n  if (struct_ptr != (undefined4*)0x0) {\n    *struct_ptr = 0;\n    struct_ptr[1] = struct_size;\n    struct_ptr[2] = struct_ptr + 3;\n    FUN_080061e0(struct_ptr + 3, 0, offset + 0x68);\n  }\n  return struct_ptr;\n}",
            "called": [
                "FUN_08006288",
                "FUN_080061e0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006c88",
            "calling": [
                "FUN_08006d14"
            ],
            "imported": false,
            "current_name": "allocate_memory_for_struct_08006c88"
        },
        "FUN_080060e4": {
            "renaming": {
                "FUN_080060e4": "check_if_valid_080060e4",
                "iVar1": "index",
                "FUN_08005f8c": "get_index",
                "PTR_DAT_08006100": "data_pointer",
                "value": "value",
                "perform_action": "FUN_080060d4"
            },
            "code": "void check_if_valid_080060e4() {\n\tint index = get_index();\n\tint value = *(int *)(PTR_DAT_08006100 + index * 0x14 + 0xc);\n\tif (value != 0) {\n\t\tperform_action();\n\t}\n\treturn;\n}",
            "called": [
                "FUN_08005f8c",
                "FUN_080060d4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080060e4",
            "calling": [
                "FUN_0800282c"
            ],
            "imported": false,
            "current_name": "check_if_valid_080060e4"
        },
        "FUN_0800258c": {
            "renaming": {
                "FUN_0800258c": "get_value_from_pointer_0800258c",
                "param_1": "pointer",
                "uVar1": "value",
                "puVar2": "pointer_value"
            },
            "code": "uint get_value_from_pointer_0800258c(uint **pointer){\n    uint value;\n    if (*(char *)((int)pointer + 0x21) != '\\x02') {\n        pointer[0xe] = (uint *)0x4;\n        return 1;\n    }\n    **pointer &= 0xfffffff1;\n    **pointer &= 0xfffffffe;\n    uint *pointer_value = *pointer;\n    if (pointer_value == PTR_DAT_0800261c) {\n        value = 1;\n    }\n    else if (pointer_value == PTR_DAT_0800261c + 5) {\n        value = 0x10;\n    }\n    else if (pointer_value == PTR_DAT_0800261c + 10) {\n        value = 0x100;\n    }\n    else if (pointer_value == PTR_DAT_0800261c + 0xf) {\n        value = 0x1000;\n    }\n    else if (pointer_value == PTR_DAT_0800261c + 0x14) {\n        value = 0x10000;\n    }\n    else if (pointer_value == PTR_DAT_0800261c + 0x19) {\n        value = 0x100000;\n    }\n    else {\n        value = 0x1000000;\n    }\n    *(undefined4 *)(PTR_DAT_08002620 + 4) = value;\n    *(undefined *)((int)pointer + 0x21) = 1;\n    *(undefined *)(pointer + 8) = 0;\n    if (pointer[0xd] != (uint *)0x0) {\n        (*(code *)pointer[0xd])();\n        return 0;\n    }\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800258c",
            "calling": [
                "FUN_0800316c",
                "FUN_080046b8"
            ],
            "imported": false,
            "current_name": "get_value_from_pointer_0800258c"
        },
        "FUN_08004e20": {
            "renaming": {
                "FUN_08004e20": "check_if_ptr_dat_is_null_08004e20",
                "PTR_DAT_08004e30": "ptr_dat",
                "FUN_08003f18": "call_fun_08003f18"
            },
            "code": "void check_if_ptr_dat_is_null_08004e20(void)\n{\n  int* PTR_DAT_08004e30 = (int*)PTR_DAT_08004e30;\n  if (*PTR_DAT_08004e30 != 0) {\n    call_fun_08003f18();\n  }\n  return;\n}",
            "called": [
                "FUN_08003f18"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004e20",
            "calling": [],
            "imported": false,
            "current_name": "check_if_ptr_dat_is_null_08004e20"
        },
        "FUN_0800573c": {
            "renaming": {
                "FUN_0800573c": "do_nothing_loop_0800573c"
            },
            "code": "void do_nothing_loop_0800573c() {\n  while (true) {\n    // Do nothing\n  }\n}",
            "called": [
                "FUN_0800573c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800573c",
            "calling": [
                "FUN_08006ac0",
                "FUN_0800573c"
            ],
            "imported": false,
            "current_name": "do_nothing_loop_0800573c"
        },
        "FUN_080032b4": {
            "renaming": {
                "FUN_080032b4": "clean_and_process_input_080032b4",
                "param_1": "input",
                "cVar1": "current_char",
                "puVar2": "ptr_input",
                "puVar3": "ptr_input9"
            },
            "code": "uint32_t clean_and_process_input_080032b4(uint32_t **input)\n{\n  char current_char = *(char *)((int)input + 0x3d);\n  (*input)[1] = (*input)[1] & 0xfffff8ff;\n  **input = **input | 1;\n  **input = **input & 0xfffffbff;\n  uint32_t *ptr_input = *input;\n  if ((ptr_input[1] & 0x800) != 0) {\n    if ((*(char *)((int)input + 0x3d) == '\"') || (*(char *)((int)input + 0x3d) == '*')) {\n      *(int16_t *)((int)input + 0x2a) = (int16_t)*(uint32_t *)(*input[0xe] + 4);\n    }\n    else {\n      *(int16_t *)((int)input + 0x2a) = (int16_t)*(uint32_t *)(*input[0xd] + 4);\n    }\n  }\n  if (*(int16_t *)((int)input + 0x2a) != 0) {\n    if ((ptr_input[5] & 4) != 0) {\n      uint32_t *ptr_input9 = input[9];\n      input[9] = (uint32_t *)((int)ptr_input9 + 1);\n      *(char *)ptr_input9 = (char)ptr_input[4];\n      *(int16_t *)((int)input + 0x2a) = *(int16_t *)((int)input + 0x2a) + -1;\n    }\n    if (((*input)[5] & 0x40) != 0) {\n      ptr_input = input[9];\n      input[9] = (uint32_t *)((int)ptr_input + 1);\n      *(char *)ptr_input = (char)(*input)[4];\n      *(int16_t *)((int)input + 0x2a) = *(int16_t *)((int)input + 0x2a) + -1;\n    }\n    input[0x10] = (uint32_t *)((uint32_t)input[0x10] | 4);\n  }\n  if (input[0x10] == (uint32_t *)0x0) {\n    if (((current_char == '(') || (current_char == '*')) || (current_char == ')')) {\n      input[0xb] = PTR_DAT_080033b4;\n      input[0xc] = (uint32_t *)0x0;\n      *(undefined *)((int)input + 0x3d) = 0x20;\n      *(undefined *)((int)input + 0x3e) = 0;\n      process_input_08004ec4();\n    }\n    else if ((input[0xc] == (uint32_t *)0x22) || (current_char == '\"')) {\n      input[0xc] = (uint32_t *)0x0;\n      *(undefined *)((int)input + 0x3d) = 0x20;\n      *(undefined *)((int)input + 0x3e) = 0;\n      do_nothing_08002ca4();\n    }\n  }\n  else {\n    process_input_0800316c();\n  }\n  return 0;\n}",
            "called": [
                "FUN_0800316c",
                "FUN_08002ca4",
                "FUN_08004ec4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080032b4",
            "calling": [
                "FUN_080033b8"
            ],
            "imported": false,
            "current_name": "clean_and_process_input_080032b4"
        },
        "FUN_08004d06": {
            "renaming": {
                "FUN_08004d06": "compare_and_return_08004d06",
                "param_1": "value1",
                "param_2": "value2"
            },
            "code": "int compare_and_return_08004d06(int value1, int value2)\n{\n  if (value1 != value2) {\n    if (value1 == 0) {\n      return value2;\n    }\n    if (value2 == 0) {\n      return value1;\n    }\n    value1 = 0;\n  }\n  return value1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004d06",
            "calling": [
                "FUN_08004f4c"
            ],
            "imported": false,
            "current_name": "compare_and_return_08004d06"
        },
        "FUN_080056d8": {
            "renaming": {
                "FUN_080056d8": "calculate_offset_080056d8",
                "param_1": "base_offset",
                "iVar1": "current_offset",
                "puVar2": "stack_pointer"
            },
            "code": "int calculate_offset_080056d8(int base_offset)\n{\n  int current_offset;\n  undefined *stack_pointer;\n  \n  if (*(int *)PTR_DAT_08005708 == 0) {\n    *(undefined **)PTR_DAT_08005708 = PTR_DAT_0800570c;\n  }\n  current_offset = *(int *)PTR_DAT_08005708;\n  stack_pointer = (undefined *)(base_offset + current_offset);\n  if (stack_pointer <= &stack0x00000000) {\n    *(undefined **)PTR_DAT_08005708 = stack_pointer;\n    return current_offset;\n  }\n  *(undefined4 *)PTR_DAT_08005710 = 0xc;\n  return -1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080056d8",
            "calling": [
                "FUN_08006920"
            ],
            "imported": false,
            "current_name": "calculate_offset_080056d8"
        },
        "FUN_080019f6": {
            "renaming": {
                "FUN_080019f6": "update_values_080019f6",
                "param_1": "data",
                "iVar1": "condition_check",
                "uVar2": "temp1",
                "uVar3": "temp2",
                "uVar4": "temp3",
                "uVar5": "temp4"
            },
            "code": "void update_values_080019f6(int data)\n{\n    int temp1, temp2, temp3, temp4, temp5;\n    temp2 = *(int *)(data + 0x3c);\n    temp3 = *(int *)(temp2 + 4);\n    *(int *)(data + 0x48) = temp2;\n    *(int *)(data + 0x4c) = temp3;\n    temp1 = *(int *)(data + 0x38);\n    temp4 = *(int *)(temp1 + 4);\n    *(int *)(data + 0x50) = *(int *)temp1;\n    *(int *)(data + 0x54) = temp4;\n    temp5 = *(int *)(data + 0x68);\n    temp4 = *(int *)(data + 0x6c);\n    if (check_condition(temp2, temp3, temp5, temp4) == 0) {\n        temp5 = *(int *)(data + 0x60);\n        temp4 = *(int *)(data + 100);\n        if (check_condition(temp2, temp3, temp5, temp4) != 0) {\n            *(int *)(data + 0x48) = temp5;\n            *(int *)(data + 0x4c) = temp4;\n        }\n    } else {\n        *(int *)(data + 0x48) = temp5;\n        *(int *)(data + 0x4c) = temp4;\n    }\n}",
            "called": [
                "FUN_08000a18",
                "FUN_080009dc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080019f6",
            "calling": [
                "FUN_08001a44"
            ],
            "imported": false,
            "current_name": "update_values_080019f6"
        },
        "FUN_08002f9c": {
            "renaming": {
                "FUN_08002f9c": "parse_input_08002f9c",
                "param_1": "input",
                "puVar1": "ninth_ptr",
                "current_char": "current_char",
                "current_short": "current_short",
                "eleventh_ptr": "eleventh_ptr",
                "ninth_ptr": "ninth_ptr"
            },
            "code": "uint32_t parse_input_08002f9c(uint32_t **input)\n{\n  uint32_t *input_ptr = *input;\n  char current_char = *(char *)((int)input + 0x3d);\n  if (current_char == '\"') {\n    uint16_t current_short = *(uint16_t *)((int)input + 0x2a);\n    if (current_short < 4) {\n      uint32_t *eleventh_ptr = input[0xb];\n      if (eleventh_ptr == (uint32_t *)0x2) {\n        **input = **input | 0x400;\n      }\n      else {\n        **input = (**input & 0xfffffbff) | 0x800;\n      }\n      (*input)[1] &= 0xfffffbff;\n    }\n    else {\n      uint32_t *ninth_ptr = input[9];\n      *(char *)ninth_ptr = (char)(*input)[4];\n      *(uint16_t *)((int)input + 0x2a) = current_short - 1;\n      if (current_char == '@') {\n        *(char *)((int)input + 0x3e) = 0;\n        do_nothing_08002f9a();\n      }\n      else {\n        *(char *)((int)input + 0x3e) = 0;\n        do_nothing_08002c50();\n      }\n    }\n  }\n  return 0;\n}",
            "called": [
                "FUN_08002c50",
                "FUN_08002f9a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002f9c",
            "calling": [
                "FUN_080033b8"
            ],
            "imported": false,
            "current_name": "parse_input_08002f9c"
        },
        "FUN_08005510": {
            "renaming": {
                "FUN_08005510": "update_data_08005510",
                "param_1": "data_ptr",
                "param_2": "new_data",
                "param_3": "unk_param_1",
                "param_4": "unk_param_2",
                "iVar1": "result",
                "uVar2": "index",
                "PTR_DAT_08005560": "data_ptr_array",
                "PTR_DAT_08005564": "unk_param_array",
                "unk_param_3": "data_ptr_char"
            },
            "code": "void update_data_08005510(int data_ptr, int new_data, int unk_param_1, int unk_param_2)\n{\n  int result = FUN_0800548c();\n  if (data_ptr != 0 && result == 0) {\n    uint index = (uint)*(byte *)(data_ptr + 0x44);\n    *(int *)(PTR_DAT_08005560 + index * 4) = data_ptr;\n    *(int *)(PTR_DAT_08005564 + index * 4) = unk_param_2;\n    int unk_param_3 = (int)*(char *)(data_ptr + 0x5a);\n    FUN_08002494(unk_param_3, 0, 1, index, unk_param_2);\n    FUN_080024f8(unk_param_3);\n    FUN_080045a2(*(undefined4 *)(PTR_DAT_08005564 + index * 4), data_ptr + 0x45, 1);\n  }\n}\n",
            "called": [
                "FUN_080045a2",
                "FUN_08002494",
                "FUN_0800548c",
                "FUN_080024f8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005510",
            "calling": [
                "FUN_08005a68"
            ],
            "imported": false,
            "current_name": "update_data_08005510"
        },
        "FUN_08002f9a": {
            "renaming": {
                "FUN_08002f9a": "do_nothing_08002f9a"
            },
            "code": "\nvoid do_nothing_08002f9a(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002f9a",
            "calling": [
                "FUN_08002f9c",
                "FUN_0800306c"
            ],
            "imported": false,
            "current_name": "do_nothing_08002f9a"
        },
        "FUN_08005750": {
            "renaming": {
                "FUN_08005750": "always_returns_one_08005750"
            },
            "code": "\nint always_returns_one_08005750(void)\n{\n  return 1;\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005750",
            "calling": [
                "thunk_FUN_08005750"
            ],
            "imported": false,
            "current_name": "always_returns_one_08005750"
        },
        "FUN_08002cf2": {
            "renaming": {
                "FUN_08002cf2": "process_data_08002cf2",
                "param_1": "data_ptr",
                "param_2": "flag1",
                "param_3": "flag2",
                "param_4": "flag3",
                "uVar1": "value",
                "uVar2": "data"
            },
            "code": "int process_data_08002cf2(int *data_ptr, int flag1, int flag2, int flag3)\n{\n    int data = *(int *)(*data_ptr + 0x18);\n    int value;\n    if ((data & 0x80) == 0)\n    {\n        value = *(int *)(data_ptr + 3);\n    }\n    else\n    {\n        value = *(int *)(data_ptr + 6);\n    }\n    execute_function(data_ptr, (data & 4) == 0, value, data, flag3);\n    return 0;\n}",
            "called": [
                "FUN_08004e74"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002cf2",
            "calling": [
                "FUN_080033b8"
            ],
            "imported": false,
            "current_name": "process_data_08002cf2"
        },
        "FUN_08006288": {
            "renaming": {
                "FUN_08006288": "allocate_memory_block_08006288",
                "param_1": "out_pointer",
                "param_2": "requested_size",
                "puVar1": "unused_pointer",
                "uVar2": "result",
                "puVar3": "current_block_pointer",
                "iVar4": "padding_size",
                "puVar5": "previous_block_pointer",
                "uVar6": "block_size",
                "puVar7": "previous_block_pointer",
                "uVar8": "requested_block_size"
            },
            "code": "uint allocate_memory_block_08006288(uint *out_pointer, uint requested_size)\n{\n  uint *current_block_pointer;\n  uint block_size;\n  uint *previous_block_pointer;\n  uint padding_size;\n  uint requested_block_size = (requested_size + 3 & 0xfffffffc) + 8;\n  if (requested_block_size < 0xc) {\n    requested_block_size = 0xc;\n  }\n  if (((int)requested_block_size < 0) || (requested_block_size < requested_size)) {\n    *out_pointer = 0xc;\n  }\n  else {\n    do_nothing_08006eac();\n    current_block_pointer = *(uint **)PTR_DAT_0800633c;\n    previous_block_pointer = *(uint **)PTR_DAT_0800633c;\n    while (current_block_pointer != (uint *)0x0) {\n      block_size = *current_block_pointer - requested_block_size;\n      if (-1 < (int)block_size) {\n        if (block_size < 0xc) {\n          if (previous_block_pointer == current_block_pointer) {\n            requested_block_size = previous_block_pointer[1];\n            *(uint *)PTR_DAT_0800633c = requested_block_size;\n          }\n          else {\n            requested_block_size = current_block_pointer[1];\n          }\n          if (previous_block_pointer != current_block_pointer) {\n            previous_block_pointer[1] = requested_block_size;\n            previous_block_pointer = current_block_pointer;\n          }\n        }\n        else {\n          *current_block_pointer = block_size;\n          *(uint *)((int)current_block_pointer + block_size) = requested_block_size;\n          previous_block_pointer = (uint *)((int)current_block_pointer + block_size);\n        }\n        goto LAB_080062ec;\n      }\n      previous_block_pointer = current_block_pointer;\n      current_block_pointer = (uint *)current_block_pointer[1];\n    }\n    if (*(int *)PTR_DAT_08006340 == 0) {\n      uint result = FUN_08006920(out_pointer);\n      *(uint *)PTR_DAT_08006340 = result;\n    }\n    current_block_pointer = (uint *)FUN_08006920(out_pointer,requested_block_size);\n    if ((current_block_pointer != (uint *)0xffffffff) && ((previous_block_pointer = (uint *)((int)current_block_pointer + 3U & 0xfffffffc), current_block_pointer == previous_block_pointer || (padding_size = FUN_08006920(out_pointer,(int)previous_block_pointer - (int)current_block_pointer), padding_size != -1)))) {\n      *previous_block_pointer = requested_block_size;\nLAB_080062ec:\n      do_nothing_08006eae(out_pointer);\n      uint aligned_block_size = (int)previous_block_pointer + 0xbU & 0xfffffff8;\n      int padding_size = aligned_block_size - (int)(previous_block_pointer + 1);\n      if (padding_size != 0) {\n        *(int *)((int)previous_block_pointer + padding_size) = -padding_size;\n        return aligned_block_size;\n      }\n      return aligned_block_size;\n    }\n    *out_pointer = 0xc;\n    do_nothing_08006eae(out_pointer);\n  }\n  return 0;\n}",
            "called": [
                "FUN_08006920",
                "FUN_08006eac",
                "FUN_08006eae"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006288",
            "calling": [
                "FUN_08006c88",
                "FUN_08006e10"
            ],
            "imported": false,
            "current_name": "allocate_memory_block_08006288"
        },
        "FUN_08002004": {
            "renaming": {
                "FUN_08002004": "check_flag_status_08002004",
                "param_1": "flag_ptr",
                "iVar1": "status",
                "puVar2": "ptr1"
            },
            "code": "int check_flag_status_08002004(undefined4 *flag_ptr)\n{\n    int status;\n    undefined4 *ptr1;\n    if (*(char *)(flag_ptr + 9) != '\\x01') {\n        *(undefined *)(flag_ptr + 9) = 1;\n        status = check_func();\n        if (status == 0) {\n            flag_ptr[10] = flag_ptr[10] & 0xfffffcfe | 0x100;\n            ptr1 = (undefined4 *)*flag_ptr;\n            if ((ptr1 == PTR_DAT_080020e8) && ((PTR_DAT_080020e8[-0xff] & 0xf0000) != 0)) {\n                flag_ptr[10] = flag_ptr[10] | 0x100000;\n                if ((*(uint *)(PTR_DAT_080020ec + 4) & 0x400) != 0) {\n                    flag_ptr[10] = flag_ptr[10] & 0xffffcfff | 0x1000;\n                }\n            }\n            else {\n                flag_ptr[10] = flag_ptr[10] & 0xffefffff;\n                if ((ptr1[1] & 0x400) != 0) {\n                    flag_ptr[10] = flag_ptr[10] & 0xffffcfff | 0x1000;\n                }\n            }\n            if ((flag_ptr[10] & 0x1000) == 0) {\n                flag_ptr[0xb] = 0;\n            }\n            else {\n                flag_ptr[0xb] = flag_ptr[0xb] & 0xfffffff9;\n            }\n            *(undefined *)(flag_ptr + 9) = 0;\n            *ptr1 = 0xfffffffd;\n            flag_ptr = (undefined4 *)*flag_ptr;\n            if (((flag_ptr[2] & 0xe0000) == 0xe0000) &&\n                ((flag_ptr != PTR_DAT_080020e8 || ((PTR_DAT_080020e8[-0xff] & 0xf0000) == 0)))) {\n                flag_ptr[2] = flag_ptr[2] | 0x500000;\n            }\n            else {\n                flag_ptr[2] = flag_ptr[2] | 0x100000;\n            }\n        }\n        else {\n            *(undefined *)(flag_ptr + 9) = 0;\n        }\n        return status;\n    }\n    return 2;\n}",
            "called": [
                "FUN_08001f84"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002004",
            "calling": [
                "FUN_08004a4c"
            ],
            "imported": false,
            "current_name": "check_flag_status_08002004"
        },
        "FUN_08005754": {
            "renaming": {
                "FUN_08005754": "get_value_from_data_08005754",
                "param_1": "input_value",
                "bVar1": "is_input_valid",
                "cVar2": "data_value",
                "uVar3": "return_value",
                "uVar4": "shift_amount"
            },
            "code": "uint get_value_from_data_08005754(uint input_value)\n{\n    bool is_input_valid;\n    char data_value;\n    uint return_value;\n    uint shift_amount;\n\n    if (input_value < 14) {\n        if (input_value + 46 < 60) {\n            is_input_valid = true;\n        }\n        else {\n            is_input_valid = false;\n        }\n    }\n    else {\n        is_input_valid = input_value < 60;\n    }\n\n    if (is_input_valid) {\n        if (input_value < 14) {\n            input_value += 46;\n        }\n        data_value = PTR_DAT_080057ac[input_value];\n    }\n    else {\n        data_value = -1;\n    }\n\n    if (data_value == -1) {\n        return_value = 0;\n    }\n    else {\n        return_value = FUN_08004a4c();\n        shift_amount = *(uint *)PTR_DAT_080057b0;\n        if (shift_amount != 12) {\n            if (shift_amount < 12) {\n                return_value = return_value >> (12 - shift_amount);\n            }\n            else {\n                return_value = return_value << (shift_amount - 12);\n            }\n        }\n    }\n    return return_value;\n}",
            "called": [
                "FUN_08004a4c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005754",
            "calling": [
                "FUN_08000cd0"
            ],
            "imported": false,
            "current_name": "get_value_from_data_08005754"
        },
        "FUN_08005fc8": {
            "renaming": {
                "FUN_08005fc8": "initialize_data_08005fc8",
                "param_1": "flag",
                "param_2": "magic_number",
                "unused_param_3": "unused_param_3",
                "unused_param_4": "unused_param_4",
                "puVar1": "data_ptr"
            },
            "code": "void initialize_data_08005fc8(int param_1, int param_2, undefined4 unused_param_3, undefined4 unused_param_4)\n{\n    undefined *data_ptr = PTR_DAT_08006068;\n    if (param_1 != 1) {\n        return;\n    }\n    if (param_2 == 0xffff) {\n        *data_ptr = 6;\n        *(undefined4 *)(data_ptr + 0xc) = 0;\n        data_ptr[0x14] = 7;\n        *(undefined4 *)(data_ptr + 0x20) = 0;\n        data_ptr[0x28] = 8;\n        *(undefined4 *)(data_ptr + 0x34) = 0;\n        data_ptr[0x3c] = 9;\n        *(undefined4 *)(data_ptr + 0x48) = 0;\n        data_ptr[0x50] = 10;\n        *(undefined4 *)(data_ptr + 0x5c) = 0;\n        data_ptr[100] = 0x17;\n        *(undefined4 *)(data_ptr + 0x70) = 0;\n        data_ptr[0x78] = 0x17;\n        *(undefined4 *)(data_ptr + 0x84) = 0;\n        data_ptr[0x8c] = 0x17;\n        *(undefined4 *)(data_ptr + 0x98) = 0;\n        data_ptr[0xa0] = 0x17;\n        *(undefined4 *)(data_ptr + 0xac) = 0;\n        data_ptr[0xb4] = 0x17;\n        *(undefined4 *)(data_ptr + 0xc0) = 0;\n        data_ptr[200] = 0x28;\n        *(undefined4 *)(data_ptr + 0xd4) = 0;\n        data_ptr[0xdc] = 0x28;\n        *(undefined4 *)(data_ptr + 0xe8) = 0;\n        data_ptr[0xf0] = 0x28;\n        *(undefined4 *)(data_ptr + 0xfc) = 0;\n        data_ptr[0x104] = 0x28;\n        *(undefined4 *)(data_ptr + 0x110) = 0;\n        data_ptr[0x118] = 0x28;\n        *(undefined4 *)(data_ptr + 0x124) = 0;\n        data_ptr[300] = 0x28;\n        *(undefined4 *)(data_ptr + 0x138) = 0;\n        initialize_data_08005fc8(0, PTR_LAB_08005fa0_1_08006070, PTR_DAT_0800606c, data_ptr, unused_param_4);\n    }\n    return;\n}",
            "called": [
                "FUN_08006112"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005fc8",
            "calling": [],
            "imported": false,
            "current_name": "initialize_data_08005fc8"
        },
        "FUN_08002ab8": {
            "renaming": {
                "FUN_08002ab8": "increment_value_at_index_if_not_zero_08002ab8",
                "param_1": "array",
                "pbVar1": "ptr_to_byte",
                "value_at_index_42": "value_at_index_42",
                "PTR_": "ptr_to_",
                "DAT_": "data_"
            },
            "code": "int increment_value_at_index_if_not_zero_08002ab8(int* array) {\n    int* PTR_array = array;\n    short value_at_index_42 = *(short*)(PTR_array + 0x2a);\n    if (value_at_index_42 != 0) {\n        byte* PTR_byte = (byte*)array[9];\n        array[9] = (int)(PTR_byte + 1);\n        uint value_at_PTR_byte = (uint)*PTR_byte;\n        *(uint*)(*PTR_array + 0x10) = value_at_PTR_byte;\n        value_at_index_42--;\n        *(short*)(PTR_array + 0x2a) = value_at_index_42;\n    }\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ab8",
            "calling": [
                "FUN_080033b8"
            ],
            "imported": false,
            "current_name": "increment_value_at_index_if_not_zero_08002ab8"
        },
        "FUN_080068f0": {
            "renaming": {
                "FUN_080068f0": "process_data_080068f0",
                "param_1": "data_1",
                "param_2": "data_2",
                "param_3": "data_3",
                "param_4": "data_4",
                "iVar1": "ptr_data",
                "uVar2": "var_1",
                "uStack_c": "var_2",
                "uStack_8": "var_3",
                "uStack_4": "var_4",
                "PTR_PTR_DAT_0800691c": "PTR_PTR_DAT_0800691c",
                "FUN_08006cb4": "cleanup",
                "FUNC_08006394": "perform_action"
            },
            "code": "void process_data_080068f0(undefined4 data_1, undefined4 data_2, undefined4 data_3, undefined4 data_4)\n{\n  int ptr_data = *(int *)PTR_PTR_DAT_0800691c;\n  undefined4 var_1 = data_1;\n  undefined4 var_2 = data_2;\n  undefined4 var_3 = data_3;\n  undefined4 var_4 = data_4;\n  \n  if ((ptr_data != 0) && (*(int *)(ptr_data + 0x18) == 0)) {\n    cleanup(ptr_data);\n  }\n  perform_action(ptr_data, *(undefined4 *)(ptr_data + 8), data_1, &var_2, var_1, &var_2);\n  return;\n}",
            "called": [
                "FUN_08006cb4",
                "FUN_08006394"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080068f0",
            "calling": [
                "FUN_08004f4c"
            ],
            "imported": false,
            "current_name": "process_data_080068f0"
        },
        "FUN_080066b0": {
            "renaming": {
                "FUN_080066b0": "FUNC_080066b0"
            },
            "code": "\nuint FUNC_080066b0(undefined4 param_1,uint *param_2,undefined4 param_3,code *param_4,uint **param_5)\n\n{\n  byte bVar1;\n  int iVar2;\n  uint *puVar3;\n  int iVar4;\n  undefined *puVar5;\n  uint uVar6;\n  uint **ppuVar7;\n  uint uVar8;\n  uint uVar9;\n  undefined *puVar10;\n  undefined *puVar11;\n  uint local_24 [2];\n  \n  bVar1 = *(byte *)(param_2 + 6);\n  puVar11 = (undefined *)((int)param_2 + 0x43);\n  if (bVar1 != 0x6e) {\n    if (bVar1 < 0x6f) {\n      if (bVar1 != 99) {\n        if (bVar1 < 100) {\n          if (bVar1 == 0) goto LAB_0800686a;\n          if (bVar1 != 0x58) goto LAB_080066e0;\n          *(undefined *)((int)param_2 + 0x45) = 0x58;\n          puVar5 = PTR_s_0123456789ABCDEF_080068ec;\nLAB_080067fa:\n          uVar6 = *param_2;\n          puVar3 = *param_5;\n          *param_5 = puVar3 + 1;\n          if (((uVar6 & 0x80) == 0) && ((int)(uVar6 << 0x19) < 0)) {\n            uVar8 = (uint)*(ushort *)puVar3;\n          }\n          else {\n            uVar8 = *puVar3;\n          }\n          if ((int)(uVar6 << 0x1f) < 0) {\n            *param_2 = uVar6 | 0x20;\n          }\n          if (uVar8 == 0) {\n            *param_2 = *param_2 & 0xffffffdf;\n          }\n          uVar6 = 0x10;\nLAB_08006790:\n          *(undefined *)((int)param_2 + 0x43) = 0;\n        }\n        else {\n          if ((bVar1 != 100) && (bVar1 != 0x69)) goto LAB_080066e0;\n          uVar8 = *param_2;\n          puVar3 = *param_5;\n          if ((uVar8 & 0x80) == 0) {\n            *param_5 = puVar3 + 1;\n            if ((uVar8 & 0x40) == 0) goto LAB_08006700;\n            uVar8 = (uint)(short)*(ushort *)puVar3;\n          }\n          else {\n            *param_5 = puVar3 + 1;\nLAB_08006700:\n            uVar8 = *puVar3;\n          }\n          if ((int)uVar8 < 0) {\n            uVar8 = -uVar8;\n            *(undefined *)((int)param_2 + 0x43) = 0x2d;\n          }\n          uVar6 = 10;\n          puVar5 = PTR_s_0123456789ABCDEF_080068ec;\n        }\n        uVar9 = param_2[1];\n        param_2[2] = uVar9;\n        puVar10 = puVar11;\n        if ((int)uVar9 < 0) {\n          if (uVar8 != 0) goto LAB_0800682e;\nLAB_080068dc:\n          *(undefined *)((int)param_2 + 0x42) = *puVar5;\n          puVar10 = (undefined *)((int)param_2 + 0x42);\n        }\n        else {\n          *param_2 = *param_2 & 0xfffffffb;\n          if (uVar8 == 0) {\n            if (uVar9 != 0) goto LAB_080068dc;\n          }\n          else {\nLAB_0800682e:\n            do {\n              uVar9 = uVar8 / uVar6;\n              puVar10 = puVar10 + -1;\n              *puVar10 = puVar5[uVar8 - uVar6 * uVar9];\n              uVar8 = uVar9;\n            } while (uVar9 != 0);\n          }\n        }\n        if (((uVar6 == 8) && ((int)(*param_2 << 0x1f) < 0)) && ((int)param_2[1] <= (int)param_2[4]))\n        {\n          puVar10[-1] = 0x30;\n          puVar10 = puVar10 + -1;\n        }\n        param_2[4] = (int)puVar11 - (int)puVar10;\n        puVar11 = puVar10;\n        goto LAB_080067d6;\n      }\n      puVar3 = *param_5;\n      *param_5 = puVar3 + 1;\n      *(char *)((int)param_2 + 0x42) = (char)*puVar3;\nLAB_08006740:\n      puVar11 = (undefined *)((int)param_2 + 0x42);\n      uVar8 = 1;\n    }\n    else {\n      if (bVar1 != 0x73) {\n        if (bVar1 < 0x74) {\n          if (bVar1 == 0x6f) {\nLAB_08006766:\n            uVar8 = *param_2;\n            puVar3 = *param_5;\n            if ((uVar8 & 0x80) == 0) {\n              *param_5 = puVar3 + 1;\n              if ((uVar8 & 0x40) == 0) goto LAB_08006774;\n              uVar8 = (uint)*(ushort *)puVar3;\n            }\n            else {\n              *param_5 = puVar3 + 1;\nLAB_08006774:\n              uVar8 = *puVar3;\n            }\n            puVar5 = PTR_s_0123456789ABCDEF_080068ec;\n            if (bVar1 == 0x6f) {\n              uVar6 = 8;\n            }\n            else {\n              uVar6 = 10;\n            }\n            goto LAB_08006790;\n          }\n          if (bVar1 == 0x70) {\n            *param_2 = *param_2 | 0x20;\nLAB_08006726:\n            puVar5 = PTR_s_0123456789abcdef_080068e8;\n            *(undefined *)((int)param_2 + 0x45) = 0x78;\n            goto LAB_080067fa;\n          }\n        }\n        else {\n          if (bVar1 == 0x75) goto LAB_08006766;\n          if (bVar1 == 0x78) goto LAB_08006726;\n        }\nLAB_080066e0:\n        *(byte *)((int)param_2 + 0x42) = bVar1;\n        goto LAB_08006740;\n      }\n      puVar3 = *param_5;\n      *param_5 = puVar3 + 1;\n      puVar11 = (undefined *)*puVar3;\n      iVar2 = FUN_08006e90(puVar11,0,param_2[1]);\n      if (iVar2 != 0) {\n        param_2[1] = iVar2 - (int)puVar11;\n      }\n      uVar8 = param_2[1];\n    }\n    param_2[4] = uVar8;\n    *(undefined *)((int)param_2 + 0x43) = 0;\n    goto LAB_080067d6;\n  }\n  uVar8 = *param_2;\n  ppuVar7 = (uint **)*param_5;\n  uVar6 = param_2[5];\n  if ((uVar8 & 0x80) == 0) {\n    *param_5 = (uint *)(ppuVar7 + 1);\n    puVar3 = *ppuVar7;\n    if ((uVar8 & 0x40) == 0) goto LAB_08006856;\n    *(short *)puVar3 = (short)uVar6;\n  }\n  else {\n    *param_5 = (uint *)(ppuVar7 + 1);\n    puVar3 = *ppuVar7;\nLAB_08006856:\n    *puVar3 = uVar6;\n  }\nLAB_0800686a:\n  param_2[4] = 0;\nLAB_080067d6:\n  iVar2 = FUN_080065c0(param_1,param_2,local_24,param_3,param_4);\n  if ((iVar2 == -1) || (iVar2 = (*param_4)(param_1,param_3,puVar11,param_2[4]), iVar2 == -1)) {\nLAB_080067ea:\n    uVar8 = 0xffffffff;\n  }\n  else {\n    if ((int)(*param_2 << 0x1e) < 0) {\n      for (iVar2 = 0; iVar2 < (int)(param_2[3] - local_24[0]); iVar2 = iVar2 + 1) {\n        iVar4 = (*param_4)(param_1,param_3,(int)param_2 + 0x19,1);\n        if (iVar4 == -1) goto LAB_080067ea;\n      }\n    }\n    uVar8 = param_2[3];\n    if ((int)param_2[3] < (int)local_24[0]) {\n      uVar8 = local_24[0];\n    }\n  }\n  return uVar8;\n}\n\n",
            "called": [
                "FUN_08006e90",
                "FUN_080065c0"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x080066b0",
            "calling": [
                "FUN_08006394"
            ],
            "imported": false,
            "current_name": "FUNC_080066b0"
        },
        "FUN_08002c52": {
            "renaming": {
                "FUN_08002c52": "do_nothing_08002c52"
            },
            "code": "\nvoid do_nothing_08002c52(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002c52",
            "calling": [
                "FUN_08002d1c",
                "FUN_08002c54"
            ],
            "imported": false,
            "current_name": "do_nothing_08002c52"
        },
        "FUN_0800138e": {
            "renaming": {
                "FUN_0800138e": "set_flag_and_call_function_0800138e",
                "param_1": "data_ptr",
                "param_2": "flag_ptr",
                "param_3": "param_3",
                "param_4": "param_4",
                "bVar1": "flag",
                "*(byte *)(param_1 + 0x14)": "*(int *)(flag_ptr + 0x14)",
                "*(byte *)(param_1 + 0x14) = bVar1 | 4": "*(int *)(flag_ptr + 0x14) = flag | 4",
                "FUN_08001310": "call_function"
            },
            "code": "void set_flag_and_call_function_0800138e(int data_ptr, int flag_ptr, int param_3, int param_4) {\n  int flag = *(int *)(flag_ptr + 0x14);\n  *(int *)(flag_ptr + 0x14) = flag | 4;\n  call_function(data_ptr, flag | 0xc, 0, param_4, param_4);\n  return;\n}",
            "called": [
                "FUN_08001310"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800138e",
            "calling": [
                "FUN_080013a4"
            ],
            "imported": false,
            "current_name": "set_flag_and_call_function_0800138e"
        },
        "FUN_08002c50": {
            "renaming": {
                "FUN_08002c50": "do_nothing_08002c50"
            },
            "code": "\nvoid do_nothing_08002c50(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002c50",
            "calling": [
                "FUN_08002f9c",
                "FUN_0800306c"
            ],
            "imported": false,
            "current_name": "do_nothing_08002c50"
        },
        "FUN_0800598a": {
            "renaming": {
                "FUN_0800598a": "update_data_0800598a",
                "param_1": "data_ptr",
                "iVar1": "status",
                "uVar2": "index",
                "local_9": "new_data"
            },
            "code": "void update_data_0800598a(int data_ptr)\n{\n  int status;\n  ushort index;\n  undefined new_data;\n  status = get_data(data_ptr, &new_data);\n  if ((status == 0) && (index = *(short *)(data_ptr + 0x60) + 1U & 0x3f, index != *(ushort *)(data_ptr + 0x62))) {\n    *(undefined *)(*(int *)(data_ptr + 0x5c) + (uint)*(ushort *)(data_ptr + 0x60)) = new_data;\n    *(ushort *)(data_ptr + 0x60) = index;\n  }\n  return;\n}",
            "called": [
                "FUN_080054d4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800598a",
            "calling": [],
            "imported": false,
            "current_name": "update_data_0800598a"
        },
        "FUN_08001c88": {
            "renaming": {
                "FUN_08001c88": "set_flag_and_call_functions_08001c88",
                "FUN_08002470": "call_function_one",
                "FUN_08001c3c": "call_function_two",
                "do_nothing_08001c3a": "do_nothing"
            },
            "code": "  \nvoid set_flag_and_call_functions_08001c88(void){\n    *DAT_08001ca8 |= 0x10; \n    call_function_one(3);  \n    call_function_two(0xf); \n    do_nothing(); \n}",
            "called": [
                "FUN_08002470",
                "FUN_08001c3a",
                "FUN_08001c3c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001c88",
            "calling": [
                "FUN_08004c52"
            ],
            "imported": false,
            "current_name": "set_flag_and_call_functions_08001c88"
        },
        "FUN_08001a44": {
            "renaming": {
                "FUN_08001a44": "set_flag_08001a44",
                "param_1": "address",
                "param_2": "value",
                "uVar1": "flag",
                "*(char *)(param_1 + 0x70)": "*(bool *)(address + 0x70)",
                "FUN_080019f6": "initialize_flag"
            },
            "code": "void set_flag_08001a44(int address, int value) {\\n  bool flag;\\n  if (value == 1) {\\n    flag = true;\\n    if (*(char *)(address + 0x70) == \"\\0\") {\\n      initialize_flag();\\n    }\\n  }\\n  else {\\n    flag = false;\\n  }\\n  *(bool *)(address + 0x70) = flag;\\n  return;\\n}",
            "called": [
                "FUN_080019f6"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001a44",
            "calling": [
                "FUN_08000cd0"
            ],
            "imported": false,
            "current_name": "set_flag_08001a44"
        },
        "FUN_08002c54": {
            "renaming": {
                "FUN_08002c54": "process_data_08002c54",
                "param_1": "data",
                "pbVar2": "byte_array",
                "cVar1": "last_char"
            },
            "code": "int process_data_08002c54(int *data)\n{\n  char last_char;\n  byte *byte_array;\n  \n  last_char = *(char *)((int)data + 0x3d);\n  if (*(short *)((int)data + 0x2a) != 0) {\n    byte_array = (byte *)data[9];\n    data[9] = (int)(byte_array + 1);\n    *(uint *)(*data + 0x10) = (uint)*byte_array;\n    *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n    if ((*(short *)((int)data + 0x2a) == 0) && (last_char == ')')) {\n      *(uint *)(*data + 4) = *(uint *)(*data + 4) & 0xfffffbff;\n      data[0xc] = 0x21;\n      *(undefined *)((int)data + 0x3d) = 0x28;\n      do_nothing();\n    }\n    return 0;\n  }\n  return 0;\n}",
            "called": [
                "FUN_08002c52"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002c54",
            "calling": [
                "FUN_080033b8"
            ],
            "imported": false,
            "current_name": "process_data_08002c54"
        },
        "FUN_080043b4": {
            "renaming": {
                "FUN_080043b4": "check_permissions_080043b4",
                "param_1": "permission_set",
                "param_2": "required_permissions",
                "param_3": "allow_all",
                "param_4": "permission_offset",
                "param_5": "max_offset",
                "iVar1": "current_offset"
            },
            "code": "uint check_permissions_080043b4(uint** permission_set, uint required_permissions, bool allow_all, int permission_offset, uint max_offset)\n{\n  int current_offset;\n  do {\n    bool has_permissions = (required_permissions & ~**permission_set) == 0;\n    if (has_permissions != allow_all) {\n      return 0;\n    }\n  } while (max_offset == 0xffffffff || (max_offset != 0 && (current_offset = get_current_offset(), (uint)(current_offset - permission_offset) <= max_offset))));\n  (*permission_set)[3] &= 0xfffffe5f;\n  (*permission_set)[5] &= 0xfffffffe;\n  *(undefined *)((int)permission_set + 0x39) = 0x20;\n  *(undefined *)((int)permission_set + 0x3a) = 0x20;\n  *(undefined *)(permission_set + 0xe) = 0;\n  return 3;\n}",
            "called": [
                "FUN_08001cc4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080043b4",
            "calling": [
                "FUN_08004478"
            ],
            "imported": false,
            "current_name": "check_permissions_080043b4"
        },
        "FUN_0800441a": {
            "renaming": {
                "FUN_0800441a": "zero_out_and_set_flags_0800441a",
                "param_1": "ptr_param_1",
                "*(char *)((int)param_1 + 0x39)": "*(char *)(ptr_param_1 + 0x39)",
                "*(undefined *)(param_1 + 0xe)": "*(undefined *)(ptr_param_1 + 0xe)",
                "do_nothing_08004418": "do_nothing_08004418",
                "*(undefined *)((int)param_1 + 0x39)": "*(undefined *)((int)ptr_param_1 + 0x39)",
                "*(uint *)(*param_1 + 0xc)": "*(uint *)(*ptr_param_1 + 0xc)",
                "FUN_08004204": "FUN_08004204",
                "*(uint *)(*param_1 + 0x10)": "*(uint *)(*ptr_param_1 + 0x10)",
                "*(uint *)(*param_1 + 0x14)": "*(uint *)(*ptr_param_1 + 0x14)",
                "param_1[0xf]": "ptr_param_1[0xf]",
                "*(undefined *)((int)param_1 + 0x3a)": "*(undefined *)((int)ptr_param_1 + 0x3a)"
            },
            "code": "int zero_out_and_set_flags_0800441a(int *ptr_param_1) {\n    if (ptr_param_1 != NULL) {\n        if (*(char *)(ptr_param_1 + 0x39) == '\\0') {\n            *(undefined *)(ptr_param_1 + 0xe) = 0;\n            do_nothing_08004418();\n        }\n        *(undefined *)((int)ptr_param_1 + 0x39) = 0x24;\n        *(uint *)(*ptr_param_1 + 0xc) &= 0xffffdfff;\n        FUN_08004204(ptr_param_1);\n        *(uint *)(*ptr_param_1 + 0x10) &= 0xffffb7ff;\n        *(uint *)(*ptr_param_1 + 0x14) &= 0xffffffd5;\n        *(uint *)(*ptr_param_1 + 0xc) |= 0x2000;\n        ptr_param_1[0xf] = 0;\n        *(undefined *)((int)ptr_param_1 + 0x39) = 0x20;\n        *(undefined *)((int)ptr_param_1 + 0x3a) = 0x20;\n        return 0;\n    }\n    return 1;\n}",
            "called": [
                "FUN_08004418",
                "FUN_08004204"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800441a",
            "calling": [
                "FUN_08004f4c"
            ],
            "imported": false,
            "current_name": "zero_out_and_set_flags_0800441a"
        },
        "FUN_08004d18": {
            "renaming": {
                "FUN_08004d18": "execute_function_if_not_null_08004d18",
                "PTR_DAT_08004d28": "function_pointer",
                "PTR_DAT_08004d2c": "arg",
                "code": "function"
            },
            "code": "void execute_function_if_not_null_08004d18() {\n  code **PTR_DAT_08004d28 = *(code **)(PTR_DAT_08004d28);\n  if (PTR_DAT_08004d28 != NULL) {\n    code *function = *PTR_DAT_08004d28;\n    undefined4 PTR_DAT_08004d2c = *(undefined4 *)(PTR_DAT_08004d2c);\n    function(PTR_DAT_08004d2c);\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004d18",
            "calling": [
                "FUN_08003ea0"
            ],
            "imported": false,
            "current_name": "execute_function_if_not_null_08004d18"
        },
        "FUN_080006d4": {
            "renaming": {
                "FUN_080006d4": "calculate_result_080006d4",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "uVar1": "bit_value",
                "unaff_r4": "check_bit",
                "uVar2": "shift_value",
                "uVar3": "bit_value",
                "in_r12": "shift_value",
                "bVar4": "check"
            },
            "code": "ulonglong calculate_result_080006d4(uint input_1, uint input_2, uint input_3, uint input_4)\n{\n  uint shift_value = input_4 >> 0x14;\n  if (input_2 != input_3 && shift_value != input_3) {\n    bool check = (input_1 | input_2 << 1) == 0;\n    if (!check) {\n      check = (input_3 | input_4 << 1) == 0;\n    }\n    if (check) {\n      return (ulonglong)((input_2 ^ input_4) & 0x80000000) << 0x20;\n    }\n    if (input_2 == 0) {\n      uint check_bit = input_1 & 0x80000000;\n      do {\n        uint bit_value = input_1 & 0x80000000;\n        input_1 = input_1 << 1;\n        input_2 = input_2 * 2 + (uint)(bit_value != 0);\n      } while ((input_2 & 0x100000) == 0);\n      input_2 = input_2 | check_bit;\n      if (shift_value != 0) {\n        return CONCAT44(input_2,input_1);\n      }\n    }\n    do {\n      uint check_bit = input_3 & 0x80000000;\n      input_3 = input_3 << 1;\n      input_4 = input_4 * 2 + (uint)(check_bit != 0);\n    } while ((input_4 & 0x100000) == 0);\n    return CONCAT44(input_2,input_1);\n  }\n  bool check = (input_1 | input_2 << 1) == 0;\n  if (check) {\n    input_2 = input_4;\n    input_1 = input_3;\n  }\n  if (!check) {\n    check = (input_3 | input_4 << 1) == 0;\n  }\n  uint bit_value = input_2;\n  if (((!check) && ((input_2 != input_3 || ((input_1 | input_2 << 0xc) == 0)))) &&\n     ((shift_value != input_3 || (input_1 = input_3, bit_value = input_4, (input_3 | input_4 << 0xc) == 0)))) {\n    return (ulonglong)((input_2 ^ input_4) & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  return CONCAT44(bit_value,input_1) | 0x7ff8000000000000;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080006d4",
            "calling": [
                "FUN_080004f8"
            ],
            "imported": false,
            "current_name": "calculate_result_080006d4"
        },
        "FUN_08000190": {
            "renaming": {
                "FUN_08000190": "FUNC_08000190"
            },
            "code": "\nulonglong FUNC_08000190(uint param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  int iVar1;\n  byte bVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  uint uVar7;\n  int iVar8;\n  uint uVar9;\n  uint uVar10;\n  uint uVar11;\n  uint uVar12;\n  bool bVar13;\n  bool bVar14;\n  bool bVar15;\n  \n  uVar6 = param_4 ^ 0x80000000;\n  uVar9 = param_2 << 1;\n  param_4 = param_4 << 1;\n  bVar13 = ((param_2 ^ uVar6) & 0x7fffffff) == 0;\n  bVar14 = bVar13 && param_1 == param_3;\n  if (!bVar13 || param_1 != param_3) {\n    bVar14 = (uVar9 | param_1) == 0;\n  }\n  if (!bVar14) {\n    bVar14 = (param_4 | param_3) == 0;\n  }\n  iVar8 = (int)uVar9 >> 0x15;\n  if (!bVar14) {\n    bVar14 = iVar8 == -1;\n  }\n  iVar1 = (int)param_4 >> 0x15;\n  if (!bVar14) {\n    bVar14 = iVar1 == -1;\n  }\n  if (bVar14) {\n    if (iVar8 == -1 || iVar1 == -1) {\n      uVar9 = uVar6;\n      uVar11 = param_3;\n      if (iVar8 == -1) {\n        uVar9 = param_2;\n        uVar11 = param_1;\n      }\n      if (iVar8 != -1 || iVar1 != -1) {\n        param_3 = uVar11;\n        uVar6 = uVar9;\n      }\n      bVar14 = (uVar11 | uVar9 << 0xc) == 0;\n      if (bVar14) {\n        bVar14 = (param_3 | uVar6 << 0xc) == 0;\n      }\n      if (bVar14) {\n        bVar14 = uVar9 == uVar6;\n      }\n      if (!bVar14) {\n        uVar9 = uVar9 | 0x80000;\n      }\n      return CONCAT44(uVar9,uVar11);\n    }\n    if (((param_2 ^ uVar6) & 0x7fffffff) != 0 || param_1 != param_3) {\n      if ((uVar9 | param_1) == 0) {\n        param_1 = param_3;\n        param_2 = uVar6;\n      }\n      return CONCAT44(param_2,param_1);\n    }\n    if (param_2 != uVar6) {\n      return 0;\n    }\n    if (uVar9 >> 0x15 == 0) {\n      bVar14 = (param_1 & 0x80000000) != 0;\n      uVar6 = param_2 * 2 + (uint)bVar14;\n      if (CARRY4(param_2,param_2) || CARRY4(param_2 * 2,(uint)bVar14)) {\n        uVar6 = uVar6 | 0x80000000;\n      }\n      return CONCAT44(uVar6,param_1 << 1);\n    }\n    if (uVar9 < 0xffc00000) {\n      return CONCAT44(param_2 + 0x100000,param_1);\n    }\n    param_2 = param_2 & 0x80000000;\nLAB_080003d4:\n    return (ulonglong)(param_2 | 0x7ff00000) << 0x20;\n  }\n  uVar9 = uVar9 >> 0x15;\n  param_4 = param_4 >> 0x15;\n  uVar11 = param_4 - uVar9;\n  bVar14 = uVar11 != 0;\n  if (param_4 < uVar9) {\n    uVar11 = -uVar11;\n  }\n  uVar10 = param_1;\n  uVar7 = param_2;\n  if (bVar14 && uVar9 <= param_4) {\n    uVar9 = uVar9 + uVar11;\n    uVar10 = param_3;\n    uVar7 = uVar6;\n    param_3 = param_1;\n    uVar6 = param_2;\n  }\n  if (0x36 < uVar11) {\n    return CONCAT44(uVar7,uVar10);\n  }\n  uVar4 = uVar7 & 0xfffff | 0x100000;\n  if ((uVar7 & 0x80000000) != 0) {\n    bVar14 = uVar10 != 0;\n    uVar10 = -uVar10;\n    uVar4 = -uVar4 - (uint)bVar14;\n  }\n  uVar7 = uVar6 & 0xfffff | 0x100000;\n  if ((uVar6 & 0x80000000) != 0) {\n    bVar14 = param_3 != 0;\n    param_3 = -param_3;\n    uVar7 = -uVar7 - (uint)bVar14;\n  }\n  if (uVar9 == uVar11) {\n    uVar7 = uVar7 ^ 0x100000;\n    if (uVar9 == 0) {\n      uVar4 = uVar4 ^ 0x100000;\n      uVar9 = 1;\n    }\n    else {\n      uVar11 = uVar11 - 1;\n    }\n  }\n  uVar6 = -uVar11 + 0x20;\n  if ((int)uVar11 < 0x21) {\n    uVar12 = param_3 << (uVar6 & 0xff);\n    param_3 = param_3 >> (uVar11 & 0xff);\n    uVar3 = uVar10 + param_3;\n    uVar5 = uVar7 << (uVar6 & 0xff);\n    uVar6 = uVar3 + uVar5;\n    uVar4 = uVar4 + CARRY4(uVar10,param_3) + ((int)uVar7 >> (uVar11 & 0xff)) +\n            (uint)CARRY4(uVar3,uVar5);\n  }\n  else {\n    uVar12 = uVar7 << (-uVar11 + 0x40 & 0xff);\n    if (param_3 != 0) {\n      uVar12 = uVar12 | 2;\n    }\n    uVar7 = (int)uVar7 >> (uVar11 - 0x20 & 0xff);\n    uVar6 = uVar10 + uVar7;\n    uVar4 = uVar4 + ((int)uVar7 >> 0x1f) + (uint)CARRY4(uVar10,uVar7);\n  }\n  param_2 = uVar4 & 0x80000000;\n  uVar11 = uVar4;\n  if ((int)uVar4 < 0) {\n    bVar14 = uVar12 == 0;\n    uVar12 = -uVar12;\n    uVar11 = -uVar6;\n    uVar6 = -(uint)!bVar14 - uVar6;\n    uVar11 = -(uint)(bVar14 <= uVar11) - uVar4;\n  }\n  if (0xfffff < uVar11) {\n    uVar10 = uVar9 - 1;\n    if (0x1fffff < uVar11) {\n      uVar10 = uVar11 & 1;\n      uVar11 = uVar11 >> 1;\n      bVar2 = (byte)uVar6;\n      uVar6 = (uint)(uVar10 != 0) << 0x1f | uVar6 >> 1;\n      uVar12 = (uint)(bVar2 & 1) << 0x1f | uVar12 >> 1;\n      uVar10 = uVar9;\n      if (0xffbfffff < uVar9 * 0x200000) goto LAB_080003d4;\n    }\nLAB_080002a0:\n    bVar14 = 0x7fffffff < uVar12;\n    if (uVar12 == 0x80000000) {\n      bVar14 = (uVar6 & 1) != 0;\n    }\n    return CONCAT44(uVar11 + uVar10 * 0x100000 + (uint)CARRY4(uVar6,(uint)bVar14) | param_2,\n                    uVar6 + bVar14);\n  }\n  bVar13 = (uVar12 & 0x80000000) != 0;\n  uVar12 = uVar12 << 1;\n  uVar10 = uVar6 * 2;\n  bVar14 = CARRY4(uVar6,uVar6);\n  uVar6 = uVar6 * 2 + (uint)bVar13;\n  uVar11 = uVar11 * 2 + (uint)(bVar14 || CARRY4(uVar10,(uint)bVar13));\n  uVar10 = uVar9 - 2;\n  if ((uVar11 & 0x100000) != 0) goto LAB_080002a0;\n  uVar7 = uVar6;\n  uVar9 = uVar11;\n  if (uVar11 == 0) {\n    uVar7 = 0;\n    uVar9 = uVar6;\n  }\n  iVar8 = count_leading_zeroes(uVar9);\n  if (uVar11 == 0) {\n    iVar8 = iVar8 + 0x20;\n  }\n  uVar11 = iVar8 - 0xb;\n  bVar15 = SBORROW4(uVar11,0x20);\n  uVar6 = iVar8 - 0x2b;\n  bVar14 = (int)uVar6 < 0;\n  bVar13 = uVar6 == 0;\n  if ((int)uVar11 < 0x20) {\n    bVar15 = SCARRY4(uVar6,0xc);\n    iVar8 = iVar8 + -0x1f;\n    bVar14 = iVar8 < 0;\n    bVar13 = iVar8 == 0;\n    uVar6 = uVar11;\n    if (!bVar13 && bVar14 == bVar15) {\n      uVar7 = uVar9 << (uVar11 & 0xff);\n      uVar9 = uVar9 >> (0xcU - iVar8 & 0xff);\n      goto LAB_08000318;\n    }\n  }\n  if (bVar13 || bVar14 != bVar15) {\n    uVar12 = 0x20 - uVar6;\n  }\n  uVar9 = uVar9 << (uVar6 & 0xff);\n  if (bVar13 || bVar14 != bVar15) {\n    uVar9 = uVar9 | uVar7 >> (uVar12 & 0xff);\n  }\n  if (bVar13 || bVar14 != bVar15) {\n    uVar7 = uVar7 << (uVar6 & 0xff);\n  }\nLAB_08000318:\n  if ((int)uVar11 <= (int)uVar10) {\n    return CONCAT44(uVar9 + (uVar10 - uVar11) * 0x100000 | param_2,uVar7);\n  }\n  uVar6 = ~(uVar10 - uVar11);\n  if ((int)uVar6 < 0x1f) {\n    iVar8 = uVar6 - 0x13;\n    if (iVar8 != 0 && iVar8 < 0 == SCARRY4(uVar6 - 0x1f,0xc)) {\n      return CONCAT44(uVar4,uVar7 >> (0x20 - (0xcU - iVar8) & 0xff) | uVar9 << (0xcU - iVar8 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    uVar6 = uVar6 + 1;\n    return CONCAT44(param_2 | uVar9 >> (uVar6 & 0xff),\n                    uVar7 >> (uVar6 & 0xff) | uVar9 << (0x20 - uVar6 & 0xff));\n  }\n  return CONCAT44(uVar4,uVar9 >> (uVar6 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08000190",
            "calling": [
                "FUN_08001a66",
                "FUN_08001814",
                "FUN_080016b4",
                "FUN_08005da8"
            ],
            "imported": false,
            "current_name": "FUNC_08000190"
        },
        "FUN_08006174": {
            "renaming": {
                "FUN_08006174": "process_data_and_call_func_08006174",
                "param_1": "func_param_1",
                "param_2": "data_1",
                "param_3": "data_3",
                "param_4": "data_4",
                "uStack_8": "data_3",
                "uStack_4": "data_4"
            },
            "code": "void process_data_and_call_func_08006174(undefined4 data_1, undefined4 data_2, undefined4 data_3, undefined4 data_4)\n{\n  undefined4 param_1 = *(undefined4 *)PTR_PTR_DAT_08006194;\n  undefined4 param_2 = data_1;\n  undefined4 param_3 = data_3;\n  undefined4 param_4 = data_4;\n  \n  FUNC_08006394(param_1, data_1, data_2, &param_3, data_1, &param_3);\n  return;\n}",
            "called": [
                "FUN_08006394"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006174",
            "calling": [
                "FUN_0800611c"
            ],
            "imported": false,
            "current_name": "process_data_and_call_func_08006174"
        },
        "FUN_08007028": {
            "renaming": {
                "FUN_08007028": "process_input_08007028",
                "param_1": "output_value",
                "param_2": "input_value",
                "puVar1": "ptr",
                "iVar2": "result"
            },
            "code": "void process_input_08007028(int *output_value, undefined4 input_value)\n{\n  undefined *ptr = PTR_DAT_08007044;\n  *(undefined4 *)PTR_DAT_08007044 = 0;\n  int result = validate_input(input_value);\n  if ((result == -1) && (*(int *)ptr != 0)) {\n    *output_value = *(int *)ptr;\n  }\n  return;\n}",
            "called": [
                "FUN_08005724"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007028",
            "calling": [
                "FUN_08006e10"
            ],
            "imported": false,
            "current_name": "process_input_08007028"
        },
        "FUN_08000194": {
            "renaming": {
                "FUN_08000194": "FUNC_08000194"
            },
            "code": "\nulonglong FUNC_08000194(uint param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  int iVar1;\n  byte bVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  int iVar6;\n  uint uVar7;\n  uint uVar8;\n  uint uVar9;\n  uint uVar10;\n  uint uVar11;\n  uint uVar12;\n  bool bVar13;\n  bool bVar14;\n  bool bVar15;\n  \n  uVar7 = param_2 << 1;\n  uVar9 = param_4 << 1;\n  bVar13 = ((param_2 ^ param_4) & 0x7fffffff) == 0;\n  bVar14 = bVar13 && param_1 == param_3;\n  if (!bVar13 || param_1 != param_3) {\n    bVar14 = (uVar7 | param_1) == 0;\n  }\n  if (!bVar14) {\n    bVar14 = (uVar9 | param_3) == 0;\n  }\n  iVar6 = (int)uVar7 >> 0x15;\n  if (!bVar14) {\n    bVar14 = iVar6 == -1;\n  }\n  iVar1 = (int)uVar9 >> 0x15;\n  if (!bVar14) {\n    bVar14 = iVar1 == -1;\n  }\n  if (bVar14) {\n    if (iVar6 == -1 || iVar1 == -1) {\n      uVar9 = param_4;\n      uVar7 = param_3;\n      if (iVar6 == -1) {\n        uVar9 = param_2;\n        uVar7 = param_1;\n      }\n      if (iVar6 != -1 || iVar1 != -1) {\n        param_3 = uVar7;\n        param_4 = uVar9;\n      }\n      bVar14 = (uVar7 | uVar9 << 0xc) == 0;\n      if (bVar14) {\n        bVar14 = (param_3 | param_4 << 0xc) == 0;\n      }\n      if (bVar14) {\n        bVar14 = uVar9 == param_4;\n      }\n      if (!bVar14) {\n        uVar9 = uVar9 | 0x80000;\n      }\n      return CONCAT44(uVar9,uVar7);\n    }\n    if (((param_2 ^ param_4) & 0x7fffffff) != 0 || param_1 != param_3) {\n      if ((uVar7 | param_1) == 0) {\n        param_1 = param_3;\n        param_2 = param_4;\n      }\n      return CONCAT44(param_2,param_1);\n    }\n    if (param_2 != param_4) {\n      return 0;\n    }\n    if (uVar7 >> 0x15 == 0) {\n      bVar14 = (param_1 & 0x80000000) != 0;\n      uVar9 = param_2 * 2 + (uint)bVar14;\n      if (CARRY4(param_2,param_2) || CARRY4(param_2 * 2,(uint)bVar14)) {\n        uVar9 = uVar9 | 0x80000000;\n      }\n      return CONCAT44(uVar9,param_1 << 1);\n    }\n    if (uVar7 < 0xffc00000) {\n      return CONCAT44(param_2 + 0x100000,param_1);\n    }\n    param_2 = param_2 & 0x80000000;\nLAB_080003d4:\n    return (ulonglong)(param_2 | 0x7ff00000) << 0x20;\n  }\n  uVar7 = uVar7 >> 0x15;\n  uVar9 = uVar9 >> 0x15;\n  uVar10 = uVar9 - uVar7;\n  bVar14 = uVar10 != 0;\n  if (uVar9 < uVar7) {\n    uVar10 = -uVar10;\n  }\n  uVar8 = param_1;\n  uVar5 = param_2;\n  if (bVar14 && uVar7 <= uVar9) {\n    uVar7 = uVar7 + uVar10;\n    uVar8 = param_3;\n    uVar5 = param_4;\n    param_3 = param_1;\n    param_4 = param_2;\n  }\n  if (0x36 < uVar10) {\n    return CONCAT44(uVar5,uVar8);\n  }\n  uVar9 = uVar5 & 0xfffff | 0x100000;\n  if ((uVar5 & 0x80000000) != 0) {\n    bVar14 = uVar8 != 0;\n    uVar8 = -uVar8;\n    uVar9 = -uVar9 - (uint)bVar14;\n  }\n  uVar5 = param_4 & 0xfffff | 0x100000;\n  if ((param_4 & 0x80000000) != 0) {\n    bVar14 = param_3 != 0;\n    param_3 = -param_3;\n    uVar5 = -uVar5 - (uint)bVar14;\n  }\n  if (uVar7 == uVar10) {\n    uVar5 = uVar5 ^ 0x100000;\n    if (uVar7 == 0) {\n      uVar9 = uVar9 ^ 0x100000;\n      uVar7 = 1;\n    }\n    else {\n      uVar10 = uVar10 - 1;\n    }\n  }\n  uVar12 = -uVar10 + 0x20;\n  if ((int)uVar10 < 0x21) {\n    uVar11 = param_3 << (uVar12 & 0xff);\n    param_3 = param_3 >> (uVar10 & 0xff);\n    uVar3 = uVar8 + param_3;\n    uVar4 = uVar5 << (uVar12 & 0xff);\n    uVar12 = uVar3 + uVar4;\n    uVar9 = uVar9 + CARRY4(uVar8,param_3) + ((int)uVar5 >> (uVar10 & 0xff)) +\n            (uint)CARRY4(uVar3,uVar4);\n  }\n  else {\n    uVar11 = uVar5 << (-uVar10 + 0x40 & 0xff);\n    if (param_3 != 0) {\n      uVar11 = uVar11 | 2;\n    }\n    uVar5 = (int)uVar5 >> (uVar10 - 0x20 & 0xff);\n    uVar12 = uVar8 + uVar5;\n    uVar9 = uVar9 + ((int)uVar5 >> 0x1f) + (uint)CARRY4(uVar8,uVar5);\n  }\n  param_2 = uVar9 & 0x80000000;\n  uVar10 = uVar9;\n  if ((int)uVar9 < 0) {\n    bVar14 = uVar11 == 0;\n    uVar11 = -uVar11;\n    uVar10 = -uVar12;\n    uVar12 = -(uint)!bVar14 - uVar12;\n    uVar10 = -(uint)(bVar14 <= uVar10) - uVar9;\n  }\n  if (0xfffff < uVar10) {\n    uVar8 = uVar7 - 1;\n    if (0x1fffff < uVar10) {\n      uVar9 = uVar10 & 1;\n      uVar10 = uVar10 >> 1;\n      bVar2 = (byte)uVar12;\n      uVar12 = (uint)(uVar9 != 0) << 0x1f | uVar12 >> 1;\n      uVar11 = (uint)(bVar2 & 1) << 0x1f | uVar11 >> 1;\n      uVar8 = uVar7;\n      if (0xffbfffff < uVar7 * 0x200000) goto LAB_080003d4;\n    }\nLAB_080002a0:\n    bVar14 = 0x7fffffff < uVar11;\n    if (uVar11 == 0x80000000) {\n      bVar14 = (uVar12 & 1) != 0;\n    }\n    return CONCAT44(uVar10 + uVar8 * 0x100000 + (uint)CARRY4(uVar12,(uint)bVar14) | param_2,\n                    uVar12 + bVar14);\n  }\n  bVar13 = (uVar11 & 0x80000000) != 0;\n  uVar11 = uVar11 << 1;\n  uVar8 = uVar12 * 2;\n  bVar14 = CARRY4(uVar12,uVar12);\n  uVar12 = uVar12 * 2 + (uint)bVar13;\n  uVar10 = uVar10 * 2 + (uint)(bVar14 || CARRY4(uVar8,(uint)bVar13));\n  uVar8 = uVar7 - 2;\n  if ((uVar10 & 0x100000) != 0) goto LAB_080002a0;\n  uVar5 = uVar12;\n  uVar7 = uVar10;\n  if (uVar10 == 0) {\n    uVar5 = 0;\n    uVar7 = uVar12;\n  }\n  iVar6 = count_leading_zeroes(uVar7);\n  if (uVar10 == 0) {\n    iVar6 = iVar6 + 0x20;\n  }\n  uVar12 = iVar6 - 0xb;\n  bVar15 = SBORROW4(uVar12,0x20);\n  uVar10 = iVar6 - 0x2b;\n  bVar14 = (int)uVar10 < 0;\n  bVar13 = uVar10 == 0;\n  if ((int)uVar12 < 0x20) {\n    bVar15 = SCARRY4(uVar10,0xc);\n    iVar6 = iVar6 + -0x1f;\n    bVar14 = iVar6 < 0;\n    bVar13 = iVar6 == 0;\n    uVar10 = uVar12;\n    if (!bVar13 && bVar14 == bVar15) {\n      uVar5 = uVar7 << (uVar12 & 0xff);\n      uVar7 = uVar7 >> (0xcU - iVar6 & 0xff);\n      goto LAB_08000318;\n    }\n  }\n  if (bVar13 || bVar14 != bVar15) {\n    uVar11 = 0x20 - uVar10;\n  }\n  uVar7 = uVar7 << (uVar10 & 0xff);\n  if (bVar13 || bVar14 != bVar15) {\n    uVar7 = uVar7 | uVar5 >> (uVar11 & 0xff);\n  }\n  if (bVar13 || bVar14 != bVar15) {\n    uVar5 = uVar5 << (uVar10 & 0xff);\n  }\nLAB_08000318:\n  if ((int)uVar12 <= (int)uVar8) {\n    return CONCAT44(uVar7 + (uVar8 - uVar12) * 0x100000 | param_2,uVar5);\n  }\n  uVar10 = ~(uVar8 - uVar12);\n  if ((int)uVar10 < 0x1f) {\n    iVar6 = uVar10 - 0x13;\n    if (iVar6 != 0 && iVar6 < 0 == SCARRY4(uVar10 - 0x1f,0xc)) {\n      return CONCAT44(uVar9,uVar5 >> (0x20 - (0xcU - iVar6) & 0xff) | uVar7 << (0xcU - iVar6 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    uVar10 = uVar10 + 1;\n    return CONCAT44(param_2 | uVar7 >> (uVar10 & 0xff),\n                    uVar5 >> (uVar10 & 0xff) | uVar7 << (0x20 - uVar10 & 0xff));\n  }\n  return CONCAT44(uVar9,uVar7 >> (uVar10 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08000194",
            "calling": [
                "FUN_080015f8",
                "FUN_08000cd0",
                "FUN_080016b4",
                "FUN_08005da8"
            ],
            "imported": false,
            "current_name": "FUNC_08000194"
        },
        "FUN_08002494": {
            "renaming": {
                "FUN_08002494": "set_bits_08002494",
                "param_1": "bit_offset",
                "param_2": "mask",
                "param_3": "value",
                "uVar1": "bit_shift",
                "uVar2": "num_bits_to_set",
                "DAT_080024f0": "ptr_dat_1",
                "DAT_080024f4": "ptr_dat_2"
            },
            "code": "void set_bits_08002494(uint bit_offset, uint mask, uint value) {\n    uint bit_shift = (*(int *)(DAT_080024f0 + 0xc) << 0x15) >> 0x1d;\n    uint num_bits_to_set = 7 - bit_shift;\n    if (num_bits_to_set > 3) {\n        num_bits_to_set = 4;\n    }\n    if (bit_shift + 4 < 7) {\n        bit_shift = 0;\n    }\n    else {\n        bit_shift -= 3;\n    }\n    uint bits_to_set = (mask & (1 << (num_bits_to_set & 0xff)) - 1U) << (bit_shift & 0xff) | (1 << (bit_shift & 0xff)) - 1U & value;\n    if ((int)bit_offset < 0) {\n        *(char *)(DAT_080024f4 + (bit_offset & 0xf)) = (char)(bits_to_set << 4);\n    }\n    else {\n        *(char *)(bit_offset + 0xe000e400) = (char)(bits_to_set << 4);\n    }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002494",
            "calling": [
                "FUN_08001b48",
                "FUN_08001c3c",
                "FUN_08005510",
                "FUN_08005568"
            ],
            "imported": false,
            "current_name": "set_bits_08002494"
        },
        "FUN_08002c4e": {
            "renaming": {
                "FUN_08002c4e": "do_nothing_08002c4e"
            },
            "code": "\nvoid do_nothing_08002c4e(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002c4e",
            "calling": [
                "FUN_08002db2",
                "FUN_08002efc"
            ],
            "imported": false,
            "current_name": "do_nothing_08002c4e"
        },
        "FUN_08004f4c": {
            "renaming": {
                "FUN_08004f4c": "FUNC_08004f4c"
            },
            "code": "\nvoid FUNC_08004f4c(int *param_1)\n\n{\n  int iVar1;\n  int iVar2;\n  int iVar3;\n  int iVar4;\n  undefined4 uVar5;\n  uint uVar6;\n  uint local_20;\n  uint local_1c;\n  uint local_18;\n  undefined4 local_14;\n  \n  if (param_1 != (int *)0x0) {\n    iVar2 = FUN_08004c78((int)*(char *)(param_1 + 0x16),PTR_DAT_08005204);\n    iVar3 = FUN_08004c78((int)*(char *)((int)param_1 + 0x59),PTR_DAT_08005208);\n    if ((iVar3 == 0) || (iVar2 == 0)) {\n      FUN_080068f0(PTR_s_ERROR__at_least_one_UART_pin_has_0800521c,iVar3);\n    }\n    else {\n      iVar4 = FUN_08004d06(iVar2);\n      *param_1 = iVar4;\n      iVar1 = DAT_08005214;\n      iVar3 = DAT_08005210;\n      iVar2 = DAT_0800520c;\n      if (iVar4 == 0) {\n        FUN_080068f0(PTR_s_ERROR__U_S_ART_pins_mismatch_08005220);\n      }\n      else {\n        if (iVar4 == DAT_0800520c) {\n          *(uint *)(DAT_0800520c + 0xd80c) = *(uint *)(DAT_0800520c + 0xd80c) | 0x4000;\n          *(uint *)(iVar2 + 0xd80c) = *(uint *)(iVar2 + 0xd80c) & 0xffffbfff;\n          *(uint *)(iVar2 + 0xd818) = *(uint *)(iVar2 + 0xd818) | 0x4000;\n          *(undefined *)(param_1 + 0x11) = 0;\n          *(undefined *)((int)param_1 + 0x5a) = 0x25;\n        }\n        else if (iVar4 == DAT_08005210) {\n          *(uint *)(DAT_08005210 + 0x1cc10) = *(uint *)(DAT_08005210 + 0x1cc10) | 0x20000;\n          *(uint *)(iVar3 + 0x1cc10) = *(uint *)(iVar3 + 0x1cc10) & 0xfffdffff;\n          *(uint *)(iVar3 + 0x1cc1c) = *(uint *)(iVar3 + 0x1cc1c) | 0x20000;\n          *(undefined *)(param_1 + 0x11) = 1;\n          *(undefined *)((int)param_1 + 0x5a) = 0x26;\n        }\n        else if (iVar4 == DAT_08005214) {\n          *(uint *)(DAT_08005214 + 0x1c810) = *(uint *)(DAT_08005214 + 0x1c810) | 0x40000;\n          *(uint *)(iVar1 + 0x1c810) = *(uint *)(iVar1 + 0x1c810) & 0xfffbffff;\n          *(uint *)(iVar1 + 0x1c81c) = *(uint *)(iVar1 + 0x1c81c) | 0x40000;\n          *(undefined *)(param_1 + 0x11) = 2;\n          *(undefined *)((int)param_1 + 0x5a) = 0x27;\n        }\n        uVar5 = FUN_08004884((uint)((int)*(char *)((int)param_1 + 0x59) << 0x18) >> 0x1c);\n        uVar6 = FUN_08004cce((int)*(char *)((int)param_1 + 0x59),PTR_DAT_08005208);\n        local_20 = 1 << (*(byte *)((int)param_1 + 0x59) & 0xf) & 0xffff;\n        local_1c = (uVar6 >> 3 & 1) << 4 | uVar6 & 7;\n        local_18 = (uVar6 << 0x1a) >> 0x1e;\n        *(uint *)(DAT_08005218 + 0x18) = *(uint *)(DAT_08005218 + 0x18) | 1;\n        switch((uVar6 << 0x11) >> 0x19) {\n        case 1:\n          *(uint *)(DAT_08005224 + 4) = *(uint *)(DAT_08005224 + 4) | 0x7000001;\n          break;\n        case 2:\n          *(uint *)(DAT_08005224 + 4) = *(uint *)(DAT_08005224 + 4) & 0xfffffffe | 0x7000000;\n          break;\n        case 3:\n          *(uint *)(DAT_08005224 + 4) = *(uint *)(DAT_08005224 + 4) | 0x7000002;\n          break;\n        case 4:\n          *(uint *)(DAT_08005224 + 4) = *(uint *)(DAT_08005224 + 4) & 0xfffffffd | 0x7000000;\n          break;\n        case 5:\n          *(uint *)(DAT_08005224 + 4) = *(uint *)(DAT_08005224 + 4) | 0x7000004;\n          break;\n        case 6:\n          *(uint *)(DAT_08005224 + 4) = *(uint *)(DAT_08005224 + 4) & 0xfffffffb | 0x7000000;\n          break;\n        case 7:\n          *(uint *)(DAT_08005224 + 4) = *(uint *)(DAT_08005224 + 4) | 0x7000008;\n          break;\n        case 8:\n          *(uint *)(DAT_08005224 + 4) = *(uint *)(DAT_08005224 + 4) & 0xfffffff7 | 0x7000000;\n          break;\n        case 9:\n          *(uint *)(DAT_08005224 + 4) = *(uint *)(DAT_08005224 + 4) | 0x7000030;\n          break;\n        case 10:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xffffffcf | 0x7000010;\n          break;\n        case 0xb:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xffffffcf | 0x7000000;\n          break;\n        case 0xc:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) | 0x70000c0;\n          break;\n        case 0xd:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xffffff3f | 0x7000040;\n          break;\n        case 0xe:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xffffff3f | 0x7000000;\n          break;\n        case 0xf:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) | 0x7000300;\n          break;\n        case 0x10:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xfffffcff | 0x7000200;\n          break;\n        case 0x11:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xfffffcff | 0x7000100;\n          break;\n        case 0x12:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xfffffcff | 0x7000000;\n          break;\n        case 0x13:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) | 0x7000c00;\n          break;\n        case 0x14:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xfffff3ff | 0x7000800;\n          break;\n        case 0x15:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xfffff3ff | 0x7000000;\n          break;\n        case 0x16:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) | 0x7001000;\n          break;\n        case 0x17:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xffffefff | 0x7000000;\n          break;\n        case 0x1b:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) | 0x7008000;\n          break;\n        case 0x1c:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xffff7fff | 0x7000000;\n          break;\n        case 0x21:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xf8ffffff;\n          break;\n        case 0x22:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xf8ffffff | 0x1000000;\n          break;\n        case 0x23:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xf8ffffff | 0x2000000;\n          break;\n        case 0x24:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xf8ffffff | 0x4000000;\n        }\n        local_14 = 3;\n        FUN_08002624(uVar5,&local_20);\n        uVar5 = FUN_08004884((uint)((int)*(char *)(param_1 + 0x16) << 0x18) >> 0x1c);\n        uVar6 = FUN_08004cce((int)*(char *)(param_1 + 0x16),PTR_DAT_08005204);\n        local_20 = 1 << (*(byte *)(param_1 + 0x16) & 0xf) & 0xffff;\n        local_1c = (uVar6 >> 3 & 1) << 4 | uVar6 & 7;\n        local_18 = (uVar6 << 0x1a) >> 0x1e;\n        FUN_08002624(uVar5,&local_20);\n        *(int **)(PTR_DAT_08005228 + (uint)*(byte *)(param_1 + 0x11) * 4) = param_1 + 1;\n        param_1[1] = *param_1;\n        param_1[2] = param_1[0x12];\n        param_1[3] = param_1[0x13];\n        param_1[4] = param_1[0x14];\n        param_1[5] = param_1[0x15];\n        param_1[6] = 0xc;\n        param_1[7] = 0;\n        param_1[8] = 0;\n        FUN_0800441a(param_1 + 1);\n      }\n    }\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_0800441a",
                "FUN_08004884",
                "FUN_08004d06",
                "FUN_080068f0",
                "FUN_08002624",
                "FUN_08004cce",
                "FUN_08004c78"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08004f4c",
            "calling": [
                "FUN_08005a68",
                "FUN_08005384"
            ],
            "imported": false,
            "current_name": "FUNC_08004f4c"
        },
        "FUN_080055bc": {
            "renaming": {
                "FUN_080055bc": "find_value_index_080055bc",
                "param_1": "value",
                "uVar1": "index"
            },
            "code": "uint find_value_index_080055bc(int value) {\n  uint index;\n  if (value == 0) {\n    index = 5;\n  }\n  else {\n    index = 0;\n    while (true) {\n      if (index > 4) {\n        return index;\n      }\n      if (value == *(int *)(PTR_DAT_080055dc + index * 4)) {\n        break;\n      }\n      index = (index + 1) & 0xff;\n    }\n  }\n  return index;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080055bc",
            "calling": [
                "FUN_080055e0",
                "FUN_08005604"
            ],
            "imported": false,
            "current_name": "find_value_index_080055bc"
        },
        "FUN_08001960": {
            "renaming": {
                "FUN_08001960": "set_params_08001960",
                "param_1": "obj",
                "param_2": "param1",
                "param_3": "param2",
                "param_4": "param3",
                "param_5": "param4",
                "param_6": "param5",
                "iVar1": "result",
                "puVar2": "ptr",
                "uVar3": "value1",
                "uVar4": "value2",
                "uVar5": "value3",
                "uVar6": "value4"
            },
            "code": "void set_params_08001960(int obj, int param1, int param2, int param3, int param4, int param5)\n{\n  int result;\n  int* ptr;\n  int value1;\n  int value2;\n  int value3;\n  int value4;\n  result = check_params(param3, param4, param5, param4);\n  if (result == 0) {\n    *(int*)(obj + 0x60) = param3;\n    *(int*)(obj + 100) = param4;\n    *(int*)(obj + 0x68) = param5;\n    *(int*)(obj + 0x6c) = param4;\n    if (*(char*)(obj + 0x70) != '\\0') {\n      ptr = *(int**)(obj + 0x3c);\n      value1 = *ptr;\n      value3 = ptr[1];\n      result = check_values(param5, param4, value1, value3);\n      if (result == 0) {\n        result = check_params(param3, param4, value1, value3);\n        if (result != 0) {\n          *ptr = param3;\n          ptr[1] = param4;\n        }\n      }\n      else {\n        *ptr = param5;\n        ptr[1] = param4;\n      }\n      value1 = *(int*)(obj + 0x48);\n      value3 = *(int*)(obj + 0x4c);\n      value2 = *(int*)(obj + 0x68);\n      value4 = *(int*)(obj + 0x6c);\n      result = check_params(value1, value3, value2, value4);\n      if (result != 0) {\n        *(int*)(obj + 0x48) = value2;\n        *(int*)(obj + 0x4c) = value4;\n        return;\n      }\n      value2 = *(int*)(obj + 0x60);\n      value4 = *(int*)(obj + 100);\n      result = check_values(value1, value3, value2, value4);\n      if (result != 0) {\n        *(int*)(obj + 0x48) = value2;\n        *(int*)(obj + 0x4c) = value4;\n      }\n    }\n  }\n  return;\n}",
            "called": [
                "FUN_08000a04",
                "FUN_08000a18",
                "FUN_080009dc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001960",
            "calling": [
                "FUN_08001ab0",
                "FUN_08000cd0"
            ],
            "imported": false,
            "current_name": "set_params_08001960"
        },
        "FUN_08004ca2": {
            "renaming": {
                "FUN_08004ca2": "check_param_not_zero_08004ca2",
                "param_1": "param",
                "uVar1": "result",
                "FUN_08004c8a": "do_something"
            },
            "code": "int check_param_not_zero_08004ca2(int param){\n    int result;\n    if (param != 0){\n        result = do_something();\n    }\n    else{\n        result = -1;\n    }\n    return result;\n}",
            "called": [
                "FUN_08004c8a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004ca2",
            "calling": [
                "FUN_08005384",
                "FUN_08005b54"
            ],
            "imported": false,
            "current_name": "check_param_not_zero_08004ca2"
        },
        "FUN_08002810": {
            "renaming": {
                "FUN_08002810": "is_param2_bit_set_in_param1_08002810",
                "param_1": "ptr_param1",
                "param_2": "param2_mask",
                "PTR_": "ptr_",
                "DAT_": "dat_"
            },
            "code": "int is_param2_bit_set_in_param1_08002810(uint32_t PTR_param1, uint32_t param2_mask) {\n    uint32_t PTR_param1_offset = *(uint32_t*)(PTR_param1 + 8);\n    if ((param2_mask & PTR_param1_offset) == 0) {\n        return 0;\n    }\n    return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002810",
            "calling": [
                "FUN_08004c48"
            ],
            "imported": false,
            "current_name": "is_param2_bit_set_in_param1_08002810"
        },
        "FUN_0800224c": {
            "renaming": {
                "FUN_0800224c": "clear_bits_0800224c",
                "param_1": "param_array",
                "iVar1": "return_value",
                "DAT_08002340": "DAT_08002340",
                "DAT_08002344": "DAT_08002344"
            },
            "code": "int clear_bits_0800224c(int *param_array)\n{\n  int return_value;\n  if (param_array == NULL) {\n    return_value = 1;\n  }\n  else {\n    param_array[10] |= 2;\n    return_value = FUN_080020f0();\n    if (return_value == 0) {\n      *(int *)*param_array = -32;\n      *(unsigned int *)(*param_array + 4) &= DAT_08002340;\n      *(unsigned int *)(*param_array + 8) &= DAT_08002344;\n      *(unsigned int *)(*param_array + 12) &= 0xff000000;\n      *(unsigned int *)(*param_array + 16) &= 0xc0000000;\n      *(unsigned int *)(*param_array + 20) &= 0xfffff000;\n      *(unsigned int *)(*param_array + 24) &= 0xfffff000;\n      *(unsigned int *)(*param_array + 28) &= 0xfffff000;\n      *(unsigned int *)(*param_array + 32) &= 0xfffff000;\n      *(unsigned int *)(*param_array + 36) &= 0xfffff000;\n      *(unsigned int *)(*param_array + 40) &= 0xfffff000;\n      *(unsigned int *)(*param_array + 44) &= 0xff000000;\n      *(unsigned int *)(*param_array + 48) &= 0xff000000;\n      *(unsigned int *)(*param_array + 52) &= 0xc0000000;\n      *(unsigned int *)(*param_array + 56) &= 0xc0000000;\n      *(unsigned int *)(*param_array + 60) &= 0xffc00000;\n      *(unsigned int *)(*param_array + 64) &= 0xffc00000;\n      FUN_080049f0(param_array);\n      param_array[11] = 0;\n      param_array[10] = 0;\n    }\n    *(char *)(param_array + 9) = 0;\n  }\n  return return_value;\n}",
            "called": [
                "FUN_080020f0",
                "FUN_080049f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800224c",
            "calling": [
                "FUN_08004a4c"
            ],
            "imported": false,
            "current_name": "clear_bits_0800224c"
        },
        "FUN_080054b0": {
            "renaming": {
                "FUN_080054b0": "is_valid_input_080054b0",
                "param_1": "input_index",
                "uVar1": "result",
                "PTR_DAT_080054d0": "ptr_data",
                "byte": "byte_value",
                "FUN_080047e8": "calculate_value",
                "DAT_080054d0": "data"
            },
            "code": "bool is_valid_input_080054b0(int input_index) {\n  uint32_t ptr_value = *(uint32_t *)(PTR_DAT_080054d0 + (uint32_t)*(uint8_t *)(input_index + 0x44) * 4);\n  uint32_t uVar1 = FUN_080047e8(ptr_value);\n  bool is_valid = (uVar1 & 0x21) == 0x21;\n  return is_valid;\n}",
            "called": [
                "FUN_080047e8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080054b0",
            "calling": [],
            "imported": false,
            "current_name": "is_valid_input_080054b0"
        },
        "FUN_08006f00": {
            "renaming": {
                "FUN_08006f00": "process_input_08006f00",
                "param_1": "input_size",
                "puVar1": "error_code_ptr",
                "uVar2": "function_result",
                "piVar3": "error_ptr",
                "iVar4": "function_index",
                "pcVar5": "function_ptr",
                "unaff_r4": "unused_var_1",
                "unaff_r5": "unused_var_2",
                "in_lr": "unused_var_3",
                "puVar6": "global_ptr",
                "PTR_PTR_DAT_08006f0c": "error_ptr_ptr",
                "PTR_DAT_08006f30": "input_ptr"
            },
            "code": "int process_input_08006f00(uint input_size) {\n  int *error_ptr;\n  code *function_ptr;\n  int function_index;\n  undefined *global_ptr;\n  undefined *error_code_ptr;\n  undefined *PTR_DAT_08006f30;\n  undefined4 function_result;\n  undefined4 unused_var_1;\n  undefined4 unused_var_2;\n  undefined4 unused_var_3;\n  error_ptr = *(int **)PTR_PTR_DAT_08006f0c;\n  if (input_size > 31) {\n    *error_ptr = 22;\n    return -1;\n  }\n  function_index = error_ptr[17];\n  if ((function_index != 0) && ((function_ptr = *(code **)(function_index + input_size * 4)), function_ptr != (code *)0x0)) {\n    if (function_ptr != (code *)0x1) {\n      if (function_ptr == (code *)0xffffffff) {\n        *error_ptr = 22;\n        return 1;\n      }\n      *(undefined4 *)(function_index + input_size * 4) = 0;\n      (*function_ptr)(input_size);\n    }\n    return 0;\n  }\n  global_ptr = PTR_PTR_DAT_08006f0c;\n  function_result = thunk_FUN_08005750(error_ptr);\n  PTR_DAT_08006f30 = PTR_DAT_08006f30;\n  *(undefined4 *)PTR_DAT_08006f30 = 0;\n  unused_var_1 = FUN_08005740(function_result, input_size, input_size, 0, global_ptr, unused_var_2, unused_var_3, in_lr);\n  if ((unused_var_1 == -1) && (*(int *)PTR_DAT_08006f30 != 0)) {\n    *error_ptr = *(int *)PTR_DAT_08006f30;\n  }\n  return unused_var_1;\n}",
            "called": [
                "FUN_08005740",
                "thunk_FUN_08005750"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006f00",
            "calling": [
                "FUN_08006ac0"
            ],
            "imported": false,
            "current_name": "process_input_08006f00"
        },
        "FUN_080016b4": {
            "renaming": {
                "FUN_080016b4": "validate_input_080016b4",
                "param_1": "input_address",
                "cVar1": "result",
                "iVar2": "var1",
                "iVar3": "var23",
                "uVar4": "var3",
                "uVar5": "var4",
                "uVar6": "var6",
                "uVar7": "var21",
                "uVar8": "var5",
                "uVar9": "var17",
                "uVar10": "var22",
                "cVar11": "var14",
                "uVar12": "var18",
                "uVar13": "var19",
                "uVar14": "var13",
                "uVar15": "var15",
                "uVar16": "var10",
                "uVar17": "var11",
                "uVar18": "var24",
                "local_38": "var12",
                "uStack_34": "var20"
            },
            "code": "char validate_input_080016b4(int input_address)\n{\n    char result = *(char *)(input_address + 0x70);\n    if (result != '\\0') {\n        int var1 = get_var1();\n        int var2 = *(int *)(input_address + 0x44);\n        uint var3 = *(uint *)(input_address + 0x58);\n        if ((var1 - var2) < var3) {\n            result = '\\0';\n        }\n        else {\n            uint* ptr1 = *(uint**)(input_address + 0x38);\n            uint var4 = ptr1[0];\n            uint var5 = ptr1[1];\n            uint* ptr2 = *(uint**)(input_address + 0x40);\n            uint var6 = ptr2[0];\n            uint var7 = ptr2[1];\n            uint var8 = *(uint *)(input_address + 0x50);\n            uint var9 = *(uint *)(input_address + 0x54);\n            uint var10 = func1(var6, var7);\n            uint var11 = func2(var4, var5, var8, var9);\n            uint var12 = func3(var10, var11, *(uint *)(input_address + 0x20), *(uint *)(input_address + 0x24));\n            uint var13 = func4(var12, *(uint *)(input_address + 0x48), *(uint *)(input_address + 0x4c));\n            *(uint64_t *)(input_address + 0x48) = var13;\n            char var14 = *(char *)(input_address + 0x71);\n            if (var14 == '\\0') {\n                uint var15 = func2(var13, *(uint *)(input_address + 0x4c), *(uint *)(input_address + 0x18), *(uint *)(input_address + 0x1c));\n                *(uint64_t *)(input_address + 0x48) = var15;\n            }\n            uint var16 = *(uint *)(input_address + 0x48);\n            uint var17 = *(uint *)(input_address + 0x4c);\n            uint var18 = *(uint *)(input_address + 0x68);\n            uint var19 = *(uint *)(input_address + 0x6c);\n            uint var20 = func5(var16, var17, var18, var19);\n            if (var20 == 0) {\n                uint var21 = *(uint *)(input_address + 0x60);\n                uint var22 = *(uint *)(input_address + 100);\n                int var23 = func6(var16, var17);\n                if (var23 != 0) {\n                    *(uint *)(input_address + 0x48) = var21;\n                    *(uint *)(input_address + 0x4c) = var22;\n                }\n            }\n            else {\n                *(uint *)(input_address + 0x48) = var18;\n                *(uint *)(input_address + 0x4c) = var19;\n            }\n            if (var14 == '\\0') {\n                uint var24 = func3(var10, var11, *(uint *)(input_address + 0x18), *(uint *)(input_address + 0x1c));\n                *(uint *)(input_address + 0x48) = var24;\n            }\n            uint* ptr3 = *(uint**)(input_address + 0x3c);\n            *ptr3 = *(uint64_t *)(input_address + 0x60);\n            *(uint *)(input_address + 0x50) = var4;\n            *(uint *)(input_address + 0x54) = var5;\n            *(int *)(input_address + 0x44) = var1;\n        }\n    }\n    return result;\n}",
            "called": [
                "FUN_08000194",
                "FUN_08000a18",
                "FUN_080004f8",
                "FUN_080058e0",
                "FUN_08000190",
                "FUN_080009dc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080016b4",
            "calling": [
                "FUN_08000cd0"
            ],
            "imported": false,
            "current_name": "validate_input_080016b4"
        },
        "FUN_0800074c": {
            "renaming": {
                "FUN_0800074c": "FUNC_0800074c"
            },
            "code": "\nulonglong FUNC_0800074c(undefined4 param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  uint uVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  uint uVar7;\n  int iVar8;\n  uint uVar9;\n  uint unaff_r5;\n  uint uVar10;\n  uint uVar11;\n  uint uVar12;\n  uint uVar13;\n  bool bVar14;\n  bool bVar15;\n  bool bVar16;\n  ulonglong uVar17;\n  \n  uVar17 = CONCAT44(param_2,param_1);\n  uVar13 = 0x7ff;\n  uVar7 = param_2 >> 0x14 & 0x7ff;\n  bVar14 = uVar7 == 0;\n  if (!bVar14) {\n    unaff_r5 = param_4 >> 0x14 & 0x7ff;\n    bVar14 = unaff_r5 == 0;\n  }\n  if (!bVar14) {\n    bVar14 = uVar7 == 0x7ff;\n  }\n  if (!bVar14) {\n    bVar14 = unaff_r5 == 0x7ff;\n  }\n  if (bVar14) {\n    uVar17 = FUN_080008ba();\n  }\n  uVar9 = (uint)(uVar17 >> 0x20);\n  uVar11 = (uint)uVar17;\n  iVar8 = uVar7 - unaff_r5;\n  if ((param_3 | param_4 << 0xc) == 0) {\n    uVar7 = (uVar9 ^ param_4) & 0x80000000 | uVar9 & 0xfffff;\n    bVar16 = SCARRY4(iVar8,uVar13 >> 1);\n    uVar9 = iVar8 + (uVar13 >> 1);\n    bVar14 = (int)uVar9 < 0;\n    bVar15 = uVar9 == 0;\n    if (!bVar15 && bVar14 == bVar16) {\n      bVar16 = SBORROW4(uVar13,uVar9);\n      bVar14 = (int)(uVar13 - uVar9) < 0;\n      bVar15 = uVar13 == uVar9;\n    }\n    if (!bVar15 && bVar14 == bVar16) {\n      uVar7 = uVar7 | uVar9 * 0x100000;\n    }\n    if (!bVar15 && bVar14 == bVar16) {\n      return uVar17 & 0xffffffff | (ulonglong)uVar7 << 0x20;\n    }\n    uVar7 = uVar7 | 0x100000;\n    uVar13 = 0;\n    bVar15 = SBORROW4(uVar9,1);\n    uVar9 = uVar9 - 1;\n    bVar14 = uVar9 == 0;\n    uVar3 = uVar9;\n  }\n  else {\n    uVar3 = (param_4 << 0xc) >> 4 | 0x10000000 | param_3 >> 0x18;\n    uVar13 = param_3 << 8;\n    uVar10 = (uVar9 << 0xc) >> 4 | 0x10000000 | uVar11 >> 0x18;\n    uVar11 = uVar11 * 0x100;\n    uVar7 = (uVar9 ^ param_4) & 0x80000000;\n    bVar14 = uVar3 <= uVar10;\n    if (uVar10 == uVar3) {\n      bVar14 = uVar13 <= uVar11;\n    }\n    iVar8 = iVar8 + (uint)bVar14;\n    uVar9 = iVar8 + 0x3fd;\n    if (bVar14 == false) {\n      uVar3 = uVar3 >> 1;\n      uVar13 = (uint)((param_3 >> 0x18 & 1) != 0) << 0x1f | uVar13 >> 1;\n    }\n    uVar12 = uVar11 - uVar13;\n    uVar10 = (uVar10 - uVar3) - (uint)(uVar11 < uVar13);\n    uVar4 = uVar3 >> 1;\n    uVar1 = (uint)((uVar3 & 1) != 0) << 0x1f | uVar13 >> 1;\n    uVar11 = 0x100000;\n    uVar3 = 0x80000;\n    while( true ) {\n      bVar14 = uVar1 <= uVar12;\n      if (uVar4 < uVar10 || uVar10 - uVar4 < (uint)bVar14) {\n        uVar12 = uVar12 - uVar1;\n        uVar11 = uVar11 | uVar3;\n        uVar10 = (uVar10 - uVar4) - (uint)!bVar14;\n      }\n      uVar5 = uVar4 >> 1;\n      uVar1 = (uint)((uVar4 & 1) != 0) << 0x1f | uVar1 >> 1;\n      bVar15 = uVar1 <= uVar12;\n      bVar14 = uVar10 - uVar5 < (uint)bVar15;\n      uVar13 = uVar10;\n      if (uVar5 < uVar10 || bVar14) {\n        uVar12 = uVar12 - uVar1;\n        uVar13 = (uVar10 - uVar5) - (uint)!bVar15;\n      }\n      if (uVar5 < uVar10 || bVar14) {\n        uVar11 = uVar11 | uVar3 >> 1;\n      }\n      uVar10 = uVar4 >> 2;\n      uVar2 = (uint)((uVar5 & 1) != 0) << 0x1f | uVar1 >> 1;\n      bVar15 = uVar2 <= uVar12;\n      bVar14 = uVar13 - uVar10 < (uint)bVar15;\n      uVar5 = uVar13;\n      if (uVar10 < uVar13 || bVar14) {\n        uVar12 = uVar12 - uVar2;\n        uVar5 = (uVar13 - uVar10) - (uint)!bVar15;\n      }\n      if (uVar10 < uVar13 || bVar14) {\n        uVar11 = uVar11 | uVar3 >> 2;\n      }\n      uVar6 = uVar4 >> 3;\n      uVar1 = (uint)((uVar10 & 1) != 0) << 0x1f | uVar2 >> 1;\n      bVar15 = uVar1 <= uVar12;\n      bVar14 = uVar5 - uVar6 < (uint)bVar15;\n      uVar10 = uVar5;\n      if (uVar6 < uVar5 || bVar14) {\n        uVar12 = uVar12 - uVar1;\n        uVar10 = (uVar5 - uVar6) - (uint)!bVar15;\n      }\n      if (uVar6 < uVar5 || bVar14) {\n        uVar11 = uVar11 | uVar3 >> 3;\n      }\n      uVar13 = uVar10 | uVar12;\n      if (uVar13 == 0) break;\n      uVar10 = uVar10 << 4 | uVar12 >> 0x1c;\n      uVar12 = uVar12 << 4;\n      uVar4 = uVar4 & 0xfffffff8 | uVar1 >> 0x1d;\n      uVar1 = (uVar2 >> 1) << 3;\n      uVar3 = uVar3 >> 4;\n      if (uVar3 == 0) {\n        uVar6 = uVar4;\n        if ((uVar7 & 0x100000) != 0) goto LAB_0800086a;\n        uVar7 = uVar7 | uVar11;\n        uVar11 = 0;\n        uVar3 = 0x80000000;\n      }\n    }\n    if ((uVar7 & 0x100000) == 0) {\n      uVar7 = uVar7 | uVar11;\n      uVar11 = 0;\n    }\nLAB_0800086a:\n    bVar16 = 0xfc < uVar9;\n    bVar15 = SBORROW4(uVar9,0xfd);\n    uVar4 = iVar8 + 0x300;\n    bVar14 = uVar4 == 0;\n    uVar3 = uVar4;\n    if (bVar16 && !bVar14) {\n      bVar16 = 0x6ff < uVar4;\n      bVar15 = SBORROW4(uVar4,0x700);\n      uVar3 = iVar8 - 0x400;\n      bVar14 = uVar4 == 0x700;\n    }\n    if (!bVar16 || bVar14) {\n      bVar14 = uVar6 <= uVar10;\n      if (uVar10 == uVar6) {\n        bVar14 = uVar1 <= uVar12;\n      }\n      if (uVar10 == uVar6 && uVar12 == uVar1) {\n        bVar14 = (uVar11 & 1) != 0;\n      }\n      return CONCAT44(uVar7 + uVar9 * 0x100000 + (uint)CARRY4(uVar11,(uint)bVar14),uVar11 + bVar14);\n    }\n  }\n  if (!bVar14 && (int)uVar3 < 0 == bVar15) {\n    return (ulonglong)(uVar7 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  bVar16 = SCARRY4(uVar9,0x36);\n  bVar14 = (int)(uVar9 + 0x36) < 0;\n  bVar15 = uVar9 == 0xffffffca;\n  if (bVar15 || bVar14 != bVar16) {\n    uVar11 = 0;\n  }\n  if (bVar15 || bVar14 != bVar16) {\n    uVar7 = uVar7 & 0x80000000;\n  }\n  if (bVar15 || bVar14 != bVar16) {\n    return CONCAT44(uVar7,uVar11);\n  }\n  uVar3 = -uVar9;\n  uVar10 = uVar3 - 0x20;\n  if (0x1f < (int)uVar3) {\n    uVar3 = uVar11 >> (uVar10 & 0xff) | uVar7 << (0x20 - uVar10 & 0xff);\n    uVar9 = (uVar7 >> (uVar10 & 0xff) & ~((uVar7 & 0x80000000) >> (uVar10 & 0xff))) -\n            ((int)uVar3 >> 0x1f);\n    if ((uVar13 | uVar11 << (0x20 - uVar10 & 0xff) | uVar3 << 1) == 0) {\n      uVar9 = uVar9 & ~(uVar3 >> 0x1f);\n    }\n    return CONCAT44(uVar7,uVar9) & 0x80000000ffffffff;\n  }\n  iVar8 = uVar3 - 0x14;\n  if (iVar8 != 0 && iVar8 < 0 == SCARRY4(uVar10,0xc)) {\n    uVar9 = 0xc - iVar8;\n    uVar3 = uVar11 << (uVar9 & 0xff);\n    uVar11 = uVar11 >> (0x20 - uVar9 & 0xff) | uVar7 << (uVar9 & 0xff);\n    uVar9 = uVar11 + -((int)uVar3 >> 0x1f);\n    if ((uVar13 | uVar3 << 1) == 0) {\n      uVar9 = uVar9 & ~(uVar3 >> 0x1f);\n    }\n    return CONCAT44((uVar7 & 0x80000000) + (uint)CARRY4(uVar11,-((int)uVar3 >> 0x1f)),uVar9);\n  }\n  uVar10 = uVar11 << (uVar9 + 0x20 & 0xff);\n  uVar11 = uVar11 >> (uVar3 & 0xff) | uVar7 << (uVar9 + 0x20 & 0xff);\n  uVar9 = uVar11 + -((int)uVar10 >> 0x1f);\n  if ((uVar13 | uVar10 << 1) == 0) {\n    uVar9 = uVar9 & ~(uVar10 >> 0x1f);\n  }\n  return CONCAT44((uVar7 & 0x80000000) +\n                  ((uVar7 & 0x7fffffff) >> (uVar3 & 0xff)) +\n                  (uint)CARRY4(uVar11,-((int)uVar10 >> 0x1f)),uVar9);\n}\n\n",
            "called": [
                "FUN_080008ba"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x0800074c",
            "calling": [
                "FUN_080015f8",
                "FUN_08001814",
                "FUN_08001918",
                "FUN_08005da8"
            ],
            "imported": false,
            "current_name": "FUNC_0800074c"
        },
        "FUN_080018f8": {
            "renaming": {
                "FUN_080018f8": "execute_function_080018f8",
                "FUN_08001814": "call_helper_function"
            },
            "code": "void execute_function_080018f8(void)\n{\n  call_helper_function();\n  return;\n}",
            "called": [
                "FUN_08001814"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080018f8",
            "calling": [
                "FUN_08000cd0"
            ],
            "imported": false,
            "current_name": "execute_function_080018f8"
        },
        "FUN_08005890": {
            "renaming": {
                "FUN_08005890": "get_char_from_data_08005890",
                "param_1": "index",
                "cVar1": "result",
                "iVar2": "search_result",
                "uVar3": "shift_amount",
                "uVar4": "data_value",
                "PTR_DAT_080058d8": "data_array",
                "PTR_DAT_080058dc": "search_array"
            },
            "code": "char get_char_from_data_08005890(uint index) {\n  char result = '\\0';\n  uint data_value;\n  if (index < 0x3c) {\n    data_value = (uint)(char)PTR_DAT_080058d8[index];\n  }\n  else {\n    data_value = 0xffffffff;\n  }\n  if (data_value != 0xffffffff) {\n    int search_result = find_in_data(data_value, PTR_DAT_080058dc);\n    if (search_result != 0) {\n      uint shift_amount = (data_value << 0x18) >> 0x1c;\n      uint bitmask = 1 << (data_value & 0xf) & 0xffff;\n      result = get_char_from_shift_and_bitmask(shift_amount, bitmask);\n    }\n  }\n  if (result != '\\0') {\n    result = '\\x01';\n  }\n  return result;\n}",
            "called": [
                "FUN_08004848",
                "FUN_080047f4",
                "FUN_08004c48"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005890",
            "calling": [
                "FUN_08000cd0",
                "FUN_080015b2"
            ],
            "imported": false,
            "current_name": "get_char_from_data_08005890"
        },
        "FUN_08005da0": {
            "renaming": {
                "FUN_08005da0": "run_function_08005da0",
                "FUN_08005d8a": "call_helper_function"
            },
            "code": "void run_function_08005da0(void)\n{\n  call_helper_function();\n  return;\n}",
            "called": [
                "FUN_08005d8a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005da0",
            "calling": [],
            "imported": false,
            "current_name": "run_function_08005da0"
        },
        "FUN_08004cb2": {
            "renaming": {
                "FUN_08004cb2": "find_index_08004cb2",
                "param_1": "target",
                "param_2": "array",
                "*param_2": "*array",
                "undefined4": "unsigned int"
            },
            "code": "unsigned int find_index_08004cb2(int target, char *array)\n{\n    while (true) {\n        if (*array == -1) {\n            return 0xffffffff;\n        }\n        if (*array == target) break;\n        array += 0xc;\n    }\n    return *(unsigned int *)(array + 8);\n}",
            "called": [
                "FUN_08004cb2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004cb2",
            "calling": [
                "FUN_08004cb2",
                "FUN_08004cce"
            ],
            "imported": false,
            "current_name": "find_index_08004cb2"
        },
        "FUN_08004ef4": {
            "renaming": {
                "FUN_08004ef4": "check_and_call_function_08004ef4",
                "param_1": "param",
                "iVar1": "function_result",
                "FUN_08004e70": "get_function_result",
                "*(char *)(iVar1 + 0x5d)": "result",
                "FUN_08002c10": "call_function"
            },
            "code": "void check_and_call_function_08004ef4(undefined4 param_1)\\n{\\n  int function_result = get_function_result();\\n  if (*(char *)(function_result + 0x5d) == \"\\0\") {\\n    call_function(param_1);\\n  }\\n  return;\\n}",
            "called": [
                "FUN_08002c10",
                "FUN_08004e70"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004ef4",
            "calling": [
                "FUN_0800316c"
            ],
            "imported": false,
            "current_name": "check_and_call_function_08004ef4"
        },
        "FUN_08001294": {
            "renaming": {
                "FUN_08001294": "set_values_08001294",
                "param_1": "struct_address",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3",
                "param_5": "value4"
            },
            "code": "void set_values_08001294(int struct_address, undefined value1, undefined value2, undefined value3, undefined value4) {\n  *(undefined *)(struct_address + 0x18) = value1;\n  *(undefined *)(struct_address + 0x19) = value2;\n  *(undefined *)(struct_address + 0x1a) = value3;\n  *(undefined *)(struct_address + 0x1b) = value4;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001294",
            "calling": [
                "FUN_080013a4"
            ],
            "imported": false,
            "current_name": "set_values_08001294"
        },
        "FUN_08002384": {
            "renaming": {
                "FUN_08002384": "check_status_08002384",
                "param_1": "status",
                "iVar1": "result",
                "uVar2": "time_diff",
                "iVar3": "start_time",
                "iVar4": "current_time",
                "uVar5": "loop_counter",
                "local_14": "unused_variable"
            },
            "code": "int check_status_08002384(int *status) {\n  int result;\n  uint uVar1;\n  int start_time;\n  int current_time;\n  uint time_diff;\n  int loop_counter;\n  \n  if (*(char *)(status + 9) == '\\x01') {\n    return 2;\n  }\n  *(undefined *)(status + 9) = 1;\n  result = initialize();\n  if (result == 0) {\n    status[10] = status[10] & 0xffffeefdU | 2;\n    uVar1 = *(uint *)PTR_DAT_0800246c;\n    time_diff = FUN_08003da4(2);\n    loop_counter = uVar1 / time_diff << 1;\n    while (loop_counter != 0) {\n        loop_counter = loop_counter + -1;\n    }\n    do_something(status);\n    *(uint *)(*status + 8) = *(uint *)(*status + 8) | 8;\n    start_time = get_time();\n    while ((*(uint *)(*status + 8) & 8) != 0) {\n      current_time = get_time();\n      if (10 < (uint)(current_time - start_time)) {\n        status[10] = status[10] & 0xffffffedU | 0x10;\n        *(undefined *)(status + 9) = 0;\n        return 1;\n      }\n    }\n    *(uint *)(current_time + 8) = *(uint *)(current_time + 8) | 4;\n    start_time = get_time();\n    while ((*(uint *)(*status + 8) & 4) != 0) {\n      current_time = get_time();\n      if (10 < (uint)(current_time - start_time)) {\n        status[10] = status[10] & 0xffffffedU | 0x10;\n        *(undefined *)(status + 9) = 0;\n        return 1;\n      }\n    }\n    status[10] = status[10] & 0xfffffffcU | 1;\n  }\n  *(undefined *)(status + 9) = 0;\n  return result;\n}\n",
            "called": [
                "FUN_080020f0",
                "FUN_08003da4",
                "FUN_08001cc4",
                "FUN_08001f84"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002384",
            "calling": [
                "FUN_08004a4c"
            ],
            "imported": false,
            "current_name": "check_status_08002384"
        },
        "FUN_08005650": {
            "renaming": {
                "FUN_08005650": "do_nothing_08005650"
            },
            "code": "\nvoid do_nothing_08005650(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005650",
            "calling": [
                "FUN_080046b8"
            ],
            "imported": false,
            "current_name": "do_nothing_08005650"
        },
        "FUN_08002ad8": {
            "renaming": {
                "FUN_08002ad8": "increment_and_decrement_08002ad8",
                "param_1": "data_ptr",
                "puVar1": "byte_ptr",
                "*(short *)((int)param_1 + 0x2a)": "*count",
                "(int)(puVar1 + 1)": "(int)(byte_ptr + 1)",
                "(char)*(undefined4 *)(*param_1 + 0x10)": "(char)*(int *)(*data_ptr + 16)"
            },
            "code": "int increment_and_decrement_08002ad8(short *count, int *data_ptr) {\n  if (*count != 0) {\n    unsigned char *byte_ptr = (unsigned char *)data_ptr[9];\n    data_ptr[9] = (int)(byte_ptr + 1);\n    *byte_ptr = (char)*(int *)(*data_ptr + 16);\n    *count -= 1;\n  }\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ad8",
            "calling": [
                "FUN_080033b8"
            ],
            "imported": false,
            "current_name": "increment_and_decrement_08002ad8"
        },
        "FUN_08004204": {
            "renaming": {
                "FUN_08004204": "calculate_result_08004204",
                "*param_1": "input_array",
                "uVar1": "u_var_1",
                "uVar2": "u_var_2",
                "iVar3": "i_var_3",
                "iVar4": "i_var_4",
                "iVar5": "i_var_5",
                "iVar6": "i_var_6",
                "iVar7": "i_var_7",
                "iVar8": "input_2",
                "iVar9": "input_2",
                "iVar10": "input_2",
                "iVar11": "input_2",
                "iVar12": "ptr",
                "DAT_080043ac": "PTR_DAT_080043ac",
                "DAT_080043b0": "DAT_080043b0"
            },
            "code": "void calculate_result_08004204(int *input_array)\n{\n    uint32_t *ptr = (uint32_t *)(*input_array);\n    uint32_t input_2 = input_array[1];\n    uint32_t input_3 = input_array[2];\n    uint32_t input_4 = input_array[3];\n    uint32_t input_5 = input_array[4];\n    uint32_t input_6 = input_array[5];\n    uint32_t input_7 = input_array[6];\n\n    ptr[4] = (ptr[4] & 0xFFFFCFFF) | input_4;\n    ptr[3] = input_3 | input_5 | input_6 | (ptr[3] & 0xFFFFE9F3);\n    ptr[5] = (ptr[5] & 0xFFFFFCFF) | input_7;\n\n    if (*input_array != DAT_080043ac)\n    {\n        uint32_t uVar1 = DAT_080043b0;\n        uint32_t iVar3 = FUN_08003c50();\n        uint32_t iVar4 = FUN_08003c50();\n        uint32_t iVar5 = FUN_08003c50();\n        uint32_t iVar6 = FUN_08003c50();\n        uint32_t iVar7 = FUN_08003c50();\n\n        ptr[2] = (((uVar1 * ((iVar3 * 0x19) / (input_2 << 2))) >> 0x25) * -100 + ((uVar1 * ((iVar4 * 0x19) / (input_2 << 2))) >> 0x25) * 0x10 + 0x32 + ((uVar1 * ((iVar5 * 0x19) / (input_2 << 2))) >> 0x25) * 0x10) >> 0x20;\n        ptr[2] = (ptr[2] << 0x17) >> 0x1c;\n        ptr[2] += ((uVar1 * ((iVar6 * 0x19) / (input_2 << 2))) >> 0x25) & 0xF0;\n        ptr[2] += ((uVar1 * ((iVar7 * 0x19) / (input_2 << 2))) >> 0x25) * 0x10;\n    }\n    else\n    {\n        uint32_t uVar1 = DAT_080043b0;\n        uint32_t iVar3 = FUN_08003c70();\n        uint32_t iVar4 = FUN_08003c70();\n        uint32_t iVar5 = FUN_08003c70();\n        uint32_t iVar6 = FUN_08003c70();\n        uint32_t iVar7 = FUN_08003c70();\n\n        ptr[2] = (((uVar1 * ((iVar3 * 0x19) / (input_2 << 2))) >> 0x25) * -100 + ((uVar1 * ((iVar4 * 0x19) / (input_2 << 2))) >> 0x25) * 0x10 + 0x32 + ((uVar1 * ((iVar5 * 0x19) / (input_2 << 2))) >> 0x25) * 0x10) >> 0x20;\n        ptr[2] = (ptr[2] << 0x17) >> 0x1c;\n        ptr[2] += ((uVar1 * ((iVar6 * 0x19) / (input_2 << 2))) >> 0x25) & 0xF0;\n        ptr[2] += ((uVar1 * ((iVar7 * 0x19) / (input_2 << 2))) >> 0x25) * 0x10;\n    }\n}",
            "called": [
                "FUN_08003c70",
                "FUN_08003c50"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004204",
            "calling": [
                "FUN_0800441a"
            ],
            "imported": false,
            "current_name": "calculate_result_08004204"
        },
        "FUN_08005da8": {
            "renaming": {
                "FUN_08005da8": "process_data_08005da8",
                "param_1": "data_1",
                "param_2": "data_2",
                "param_3": "data_3",
                "param_4": "data_4",
                "param_5": "data_5",
                "iVar1": "result",
                "uVar2": "temp_data_19",
                "iVar3": "temp_result",
                "bVar4": "i",
                "lVar5": "temp_data_14",
                "uVar6": "temp_data_15",
                "uVar7": "temp_data_17"
            },
            "code": "int process_data_08005da8(undefined4 data_1, undefined4 data_2, undefined4 data_3, uint32_t data_4, byte data_5) {\n  int result = 0;\n  int temp_result = 0;\n  int temp_data_4 = data_4;\n  int temp_data_3 = data_3;\n  int temp_data_2 = data_2;\n  int temp_data_1 = data_1;\n  int temp_data_4_masked = data_4 & 0x7fffffff;\n\n  temp_result = FUN_08000a2c(data_3, data_4, data_3, data_4);\n  if (temp_result == 0) {\n    temp_result = FUN_08000a2c(data_3, temp_data_4_masked, 0xffffffff, DAT_08005f08);\n    if ((temp_result == 0) &&\n       (temp_result = FUN_080009f0(data_3, temp_data_4_masked, 0xffffffff, DAT_08005f08), temp_result == 0)) {\n      result = FUN_08005c96(temp_data_1, PTR_DAT_08005f20);\n    }\n    else {\n      temp_result = FUN_08000a18(data_3, data_4, 0xe0000000, DAT_08005f0c);\n      if (temp_result == 0) {\n        temp_result = FUN_080009dc(data_3, data_4, 0xe0000000, DAT_08005f10);\n        if (temp_result == 0) {\n          temp_result = FUN_080009dc(data_3, data_4, 0, 0);\n          if (temp_result == 0) {\n            result = 0;\n          }\n          else {\n            result = FUN_08005cb6(temp_data_1, 0x2d);\n            temp_data_4 += 0x80000000;\n          }\n          long long temp_data_14 = (long long)DAT_08005f14 << 0x20;\n          for (byte i = 0; i < data_5; i++) {\n            temp_data_14 = FUNC_0800074c((int)temp_data_14, (undefined4)((unsigned long long)temp_data_14 >> 0x20), 0, DAT_08005f18);\n          }\n          undefined8 temp_data_15 = FUNC_08000194(data_3, temp_data_4, (int)temp_data_14, (undefined4)((unsigned long long)temp_data_14 >> 0x20));\n          undefined4 temp_data_16 = FUN_08000aa8();\n          undefined8 temp_data_17 = FUN_0800040c();\n          temp_data_15 = FUNC_08000190((int)temp_data_15, (int)((unsigned long long)temp_data_15 >> 0x20), (int)temp_data_17, (int)((unsigned long long)temp_data_17 >> 0x20));\n          result = result + FUN_08005d8a(temp_data_1, temp_data_16, 10);\n          if (data_5 != 0) {\n            result = result + FUN_08005c96(temp_data_1, PTR_DAT_08005f28);\n          }\n          while (data_5 != 0) {\n            temp_data_15 = FUNC_080004f8((int)temp_data_15, (int)((unsigned long long)temp_data_15 >> 0x20), 0, DAT_08005f18);\n            temp_data_16 = FUN_08000a58();\n            result = result + FUN_08005d82(temp_data_1, temp_data_16, 10);\n            undefined4 temp_data_18 = FUN_0800042c(temp_data_16);\n            temp_data_15 = FUNC_08000190((int)temp_data_15, (int)((unsigned long long)temp_data_15 >> 0x20), (int)temp_data_18, (int)((unsigned long long)temp_data_18 >> 0x20));\n            data_5 = data_5 - 1;\n          }\n        }\n        else {\n          result = FUN_08005c96(temp_data_1, PTR_DAT_08005f24);\n        }\n      }\n      else {\n        result = FUN_08005c96(temp_data_1, PTR_DAT_08005f24);\n      }\n    }\n  }\n  else {\n    result = FUN_08005c96(temp_data_1, PTR_DAT_08005f1c);\n  }\n  return result;\n}",
            "called": [
                "FUN_080009f0",
                "FUN_08000a18",
                "FUN_08000a58",
                "FUN_08000a2c",
                "FUN_0800074c",
                "FUN_080009dc",
                "FUN_0800040c",
                "FUN_08005c96",
                "FUN_08005cb6",
                "FUN_08000194",
                "FUN_080004f8",
                "FUN_08005d82",
                "FUN_0800042c",
                "FUN_08000aa8",
                "FUN_08005d8a",
                "FUN_08000190"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005da8",
            "calling": [
                "FUN_08005f2c"
            ],
            "imported": false,
            "current_name": "process_data_08005da8"
        },
        "FUN_080045fe": {
            "renaming": {
                "FUN_080045fe": "set_flagged_bit_to_zero_080045fe",
                "param_1": "data_array",
                "*param_1": "*data_array",
                "uint": "uint32_t",
                "undefined": "uint8_t",
                "(int)param_1": "(int)data_array",
                "0xc": "0xc",
                "0x39": "0x39",
                "& 0xffffffbf": "& 0xffffffbf",
                "FUN_08005604": "call_function_08005604"
            },
            "code": "int set_flagged_bit_to_zero_080045fe(int *data_array) {\n    uint32_t* data_ptr = (uint32_t*)(data_array + 0xc);\n    *data_ptr &= 0xffffffbf;\n    uint8_t* flag_ptr = (uint8_t*)(data_array + 0x39);\n    *flag_ptr = 0x20;\n    call_function_08005604();\n    return 0;\n}",
            "called": [
                "FUN_08005604"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080045fe",
            "calling": [
                "FUN_080046b8"
            ],
            "imported": false,
            "current_name": "set_flagged_bit_to_zero_080045fe"
        },
        "FUN_08005f2c": {
            "renaming": {
                "FUN_08005f2c": "call_function_and_return_08005f2c",
                "FUN_08005da8": "call_another_function"
            },
            "code": "void call_function_and_return_08005f2c(void)\n{\n  call_another_function();\n  return;\n}",
            "called": [
                "FUN_08005da8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005f2c",
            "calling": [
                "FUN_08005f40",
                "FUN_08000cd0"
            ],
            "imported": false,
            "current_name": "call_function_and_return_08005f2c"
        },
        "FUN_080055e0": {
            "renaming": {
                "FUN_080055e0": "execute_command_080055e0",
                "uVar1": "command_index",
                "FUN_080055bc": "get_command_index",
                "PTR_DAT_080055fc": "command_functions",
                "PTR_DAT_08005600": "command_arguments"
            },
            "code": "void execute_command_080055e0() {\n    uint command_index = get_command_index();\n    if (command_index < COMMAND_COUNT) {\n        PTR_DAT_080055fc[command_index](PTR_DAT_08005600[command_index]);\n    }\n    return;\n}",
            "called": [
                "FUN_080055bc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080055e0",
            "calling": [
                "FUN_08004618"
            ],
            "imported": false,
            "current_name": "execute_command_080055e0"
        },
        "FUN_08005f40": {
            "renaming": {
                "FUN_08005f40": "sum_of_two_values_08005f40",
                "param_1": "value",
                "iVar1": "first_value",
                "iVar2": "second_value",
                "FUN_08005f2c": "get_first_value",
                "FUN_08005cc0": "calculate_second_value"
            },
            "code": "int sum_of_two_values_08005f40(int value){\n  int first_value = get_first_value();\n  int second_value = calculate_second_value(value);\n  return first_value + second_value;\n}",
            "called": [
                "FUN_08005cc0",
                "FUN_08005f2c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005f40",
            "calling": [
                "FUN_08000cd0"
            ],
            "imported": false,
            "current_name": "sum_of_two_values_08005f40"
        },
        "FUN_0800213c": {
            "renaming": {
                "FUN_0800213c": "check_parameters_0800213c",
                "param_1": "params",
                "iVar1": "status",
                "uVar2": "mask",
                "uVar3": "flags",
                "DAT_08002244": "MASK_1",
                "DAT_08002248": "MASK_2"
            },
            "code": "int check_parameters_0800213c(int *params)\n{\n    int status;\n    uint flags;\n    uint mask;\n\n    if (params == NULL)\n    {\n        return 1;\n    }\n\n    if (params[10] == 0)\n    {\n        params[11] = 0;\n        *(undefined *)(params + 9) = 0;\n        call_function();\n    }\n\n    status = validate_params(params);\n    flags = params[10] & 0x10;\n\n    if ((flags == 0) && (status == 0))\n    {\n        params[10] = params[10] & 0xffffeefdU | 2;\n        mask = params[1] | params[7] | params[3] << 1;\n\n        if (params[2] == 0x100 || params[2] == 1)\n        {\n            flags = 0x100;\n        }\n\n        if (params[5] == 1)\n        {\n            if (params[3] == 0)\n            {\n                flags = flags | (params[6] + -1) * 0x2000 | 0x800;\n            }\n            else\n            {\n                params[10] = params[10] | 0x20;\n                params[11] = params[11] | 1;\n            }\n        }\n\n        *(uint *)(*params + 4) = flags | *(uint *)(*params + 4) & 0xffff16ff;\n        *(uint *)(*params + 8) = DAT_08002244 & *(uint *)(*params + 8) | mask;\n\n        if (params[2] == 0x100 || params[2] == 1)\n        {\n            flags = (params[4] + -1) * 0x100000;\n        }\n        else\n        {\n            flags = 0;\n        }\n\n        *(uint *)(*params + 0x2c) = flags | *(uint *)(*params + 0x2c) & 0xff0fffff;\n\n        if (mask != (DAT_08002248 & *(uint *)(*params + 8)))\n        {\n            params[10] = params[10] & 0xffffffedU | 0x10;\n            params[11] = params[11] | 1;\n            return 1;\n        }\n\n        params[11] = 0;\n        params[10] = params[10] & 0xfffffffcU | 1;\n        return 0;\n    }\n\n    params[10] = params[10] | 0x10;\n    return 1;\n}",
            "called": [
                "FUN_08004974",
                "FUN_080020f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800213c",
            "calling": [
                "FUN_08004a4c"
            ],
            "imported": false,
            "current_name": "check_parameters_0800213c"
        },
        "FUN_0800455a": {
            "renaming": {
                "FUN_0800455a": "check_valid_input_0800455a",
                "param_1": "input_array",
                "param_2": "array_length",
                "param_3": "value",
                "*(char *)((int)param_1 + 0x39)": "input_array[9]",
                "*(char *)(param_1 + 0xe)": "input_array[14]",
                "param_1[8]": "input_array[8]",
                "*(short *)(param_1 + 9)": "input_array[9]",
                "*(short *)((int)param_1 + 0x26)": "input_array[10]",
                "param_1[0xf]": "input_array[15]",
                "*(undefined *)((int)param_1 + 0x39)": "input_array[9]",
                "*(undefined *)(param_1 + 0xe)": "input_array[14]",
                "*(uint *)(*param_1 + 0xc)": "*(uint *)(*input_array + 0xc)"
            },
            "code": "int check_valid_input_0800455a(int *input_array, int array_length, int value)\n{\n    if (input_array[9] != ' ')\n    {\n        return 2;\n    }\n    if (array_length == 0)\n    {\n        return 1;\n    }\n    if (value == 0)\n    {\n        return 1;\n    }\n    if (input_array[14] != 1)\n    {\n        input_array[8] = array_length;\n        input_array[9] = (short)value;\n        input_array[10] = (short)value;\n        input_array[15] = 0;\n        input_array[9] = '!';\n        input_array[14] = 0;\n        *(uint *)(*input_array + 0xc) = *(uint *)(*input_array + 0xc) | 0x80;\n        return 0;\n    }\n    return 2;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800455a",
            "calling": [
                "FUN_08005604",
                "FUN_08005568"
            ],
            "imported": false,
            "current_name": "check_valid_input_0800455a"
        },
        "FUN_08001a66": {
            "renaming": {
                "FUN_08001a66": "update_param_08001a66",
                "param_1": "param_address",
                "param_2": "new_param_value",
                "param_3": "param_3",
                "param_4": "param_4",
                "uVar1": "new_value1, new_value2, new_value3"
            },
            "code": "void update_param_08001a66(int param_address, int new_param_value, undefined4 param_3, undefined4 param_4)\\n{\\n  if ((*(char *)(param_address + 0x70) != \"\\0\") && (*(int *)(param_address + 0x30) != new_param_value)) {\\n    undefined8 new_value1 = FUNC_08000190(0,0,*(undefined4 *)(param_address + 0x18),*(undefined4 *)(param_address + 0x1c),param_4);\\n    *(undefined8 *)(param_address + 0x18) = new_value1;\\n    undefined8 new_value2 = FUNC_08000190(0,0,*(undefined4 *)(param_address + 0x20),*(undefined4 *)(param_address + 0x24));\\n    *(undefined8 *)(param_address + 0x20) = new_value2;\\n    undefined8 new_value3 = FUNC_08000190(0,0,*(undefined4 *)(param_address + 0x28),*(undefined4 *)(param_address + 0x2c));\\n    *(undefined8 *)(param_address + 0x28) = new_value3;\\n  }\\n  *(int *)(param_address + 0x30) = new_param_value;\\n  return;\\n}",
            "called": [
                "FUN_08000190"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001a66",
            "calling": [
                "FUN_08001ab0"
            ],
            "imported": false,
            "current_name": "update_param_08001a66"
        },
        "FUN_08003c44": {
            "renaming": {
                "FUN_08003c44": "get_value_from_pointer_08003c44",
                "undefined4": "uint32_t"
            },
            "code": "uint32_t get_value_from_pointer_08003c44() {\n    return *(uint32_t *)PTR_DAT_08003c4c;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003c44",
            "calling": [
                "FUN_08003c70",
                "FUN_08001b48",
                "FUN_08003c50"
            ],
            "imported": false,
            "current_name": "get_value_from_pointer_08003c44"
        },
        "FUN_080028d2": {
            "renaming": {
                "FUN_080028d2": "set_value_at_offset_080028d2",
                "param_1": "base_ptr",
                "PTR_8": "offset",
                "DAT_0804a024": "value"
            },
            "code": "int set_value_at_offset_080028d2(int *base_ptr, int PTR_8, int DAT_0804a024)\n{\n  *(uint *)(base_ptr + PTR_8) = DAT_0804a024 & 0xff;\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080028d2",
            "calling": [
                "FUN_080033b8"
            ],
            "imported": false,
            "current_name": "set_value_at_offset_080028d2"
        },
        "FUN_08000a18": {
            "renaming": {
                "FUN_08000a18": "is_end_of_string_08000a18",
                "in_CY": "current_char",
                "FUN_080009a8": "execute_preprocessing"
            },
            "code": "bool is_end_of_string_08000a18(void)\n{\n  char current_char;\n  execute_preprocessing();\n  return current_char == '\\0';\n}",
            "called": [
                "FUN_080009a8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000a18",
            "calling": [
                "FUN_080019f6",
                "FUN_08001960",
                "FUN_08000cd0",
                "FUN_080016b4",
                "FUN_08005da8"
            ],
            "imported": false,
            "current_name": "is_end_of_string_08000a18"
        },
        "FUN_08005384": {
            "renaming": {
                "FUN_08005384": "update_data_08005384",
                "cVar1": "input_char",
                "puVar2": "data_ptr",
                "uVar3": "data_byte",
                "iVar4": "result",
                "uVar5": "result_2"
            },
            "code": "void update_data_08005384(void)\n{\n  char input_char;\n  undefined *data_ptr;\n  undefined data_byte;\n  int result;\n  undefined4 result_2;\n  input_char = input_data[1];\n  result = find_index((int)input_char,lookup_table);\n  if (result != 0) {\n    result_2 = find_index((int)input_char,lookup_table);\n    data_byte = convert_data(result_2,conversion_table);\n    data_ptr = data_array;\n    data_array[0x59] = data_byte;\n    data_array[0x58] = input_char;\n    *(undefined4 *)(data_ptr + 0x48) = 0x2580;\n    *(undefined4 *)(data_ptr + 0x54) = 0;\n    *(undefined4 *)(data_ptr + 0x4c) = 0;\n    *(undefined4 *)(data_ptr + 0x50) = 0;\n    process_data(data_ptr);\n  }\n  return;\n}",
            "called": [
                "FUN_08004f4c",
                "FUN_08004ca2",
                "FUN_08004c78"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005384",
            "calling": [
                "FUN_080053d4"
            ],
            "imported": false,
            "current_name": "update_data_08005384"
        },
        "FUN_08005b3c": {
            "renaming": {
                "FUN_08005b3c": "set_value_at_offset_08005b3c",
                "param_1": "offset",
                "param_2": "value",
                "uVar1": "undefined_value"
            },
            "code": "void set_value_at_offset_08005b3c(int offset, uint value) {\n  undefined uVar1;\n  if (value < 0x3c) {\n    uVar1 = PTR_DAT_08005b50[value];\n  }\n  else {\n    uVar1 = 0xff;\n  }\n  *(undefined *)(offset + 300) = uVar1;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005b3c",
            "calling": [
                "FUN_08005b54"
            ],
            "imported": false,
            "current_name": "set_value_at_offset_08005b3c"
        },
        "FUN_080046b8": {
            "renaming": {
                "FUN_080046b8": "process_data_080046b8",
                "param_1": "data",
                "iVar1": "result",
                "uVar2": "third_byte",
                "puVar3": "ptr",
                "uVar4": "fourth_byte",
                "uVar5": "first_byte",
                "FUN_08004618": "execute_func_1",
                "FUN_08004198": "execute_func_2",
                "FUN_080045fe": "execute_func_3",
                "do_nothing_08005650": "do_nothing",
                "PTR_LAB_080047d8_1_080047d4": "execute_func_5",
                "FUN_0800258c": "execute_func_6"
            },
            "code": "void process_data_080046b8(uint **data)\n{\n  uint *ptr = *data;\n  uint first_byte = *ptr;\n  uint third_byte = ptr[3];\n  \n  if ((first_byte & 0x20) && !(first_byte & 0xf) && (third_byte & 0x20)) {\n    execute_func_1(data);\n    return;\n  }\n  \n  if ((first_byte & 0xf) || ((ptr[5] & 1) && (third_byte & 0x120))) {\n    if ((first_byte & 0x80) && (third_byte & 0x80)) {\n      execute_func_2(data);\n      return;\n    }\n    \n    if ((first_byte & 0x40) && (third_byte & 0x40)) {\n      execute_func_3(data);\n    }\n  }\n  else {\n    if ((first_byte & 1) && (third_byte & 0x100)) {\n      (*data)[15] |= 1;\n    }\n    \n    uint fourth_byte = ptr[5] & 1;\n    if ((first_byte & 4) && fourth_byte) {\n      (*data)[15] |= 2;\n    }\n    \n    if ((first_byte & 2) && fourth_byte) {\n      (*data)[15] |= 4;\n    }\n    \n    if ((first_byte & 8) && fourth_byte) {\n      (*data)[15] |= 8;\n    }\n    \n    if ((*data)[15]) {\n      if ((first_byte & 0x20) && (third_byte & 0x20)) {\n        execute_func_1(data);\n      }\n      \n      if (!((*data)[15] & 8) && !((*data)[0][5] & 0x40)) {\n        do_nothing(data);\n        (*data)[15] = 0;\n        return;\n      }\n      \n      execute_func_4(data);\n      ptr = *data;\n      \n      if (!(ptr[5] & 0x40)) {\n        do_nothing(data);\n        return;\n      }\n      \n      ptr[5] &= 0xffffffbf;\n      \n      if (!(*data)[13]) {\n        do_nothing(data);\n        return;\n      }\n      \n      (*data)[13][13] = (uint)PTR_LAB_080047d8_1_080047d4;\n      int result = execute_func_6((*data)[13]);\n      if (result != 0) {\n        (*(code *)(*data)[13][13])();\n        return;\n      }\n    }\n  }\n  return;\n}",
            "called": [
                "FUN_08004198",
                "FUN_0800417c",
                "FUN_08004618",
                "FUN_080045fe",
                "FUN_08005650",
                "FUN_0800258c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080046b8",
            "calling": [],
            "imported": false,
            "current_name": "process_data_080046b8"
        },
        "FUN_08004c8a": {
            "renaming": {
                "FUN_08004c8a": "find_value_in_array_08004c8a",
                "param_1": "value_to_find",
                "param_2": "array_of_values",
                "PTR_": "",
                "DAT_": "",
                "*param_2": "*array_of_values"
            },
            "code": "int find_value_in_array_08004c8a(int value_to_find, char *array_of_values)\n{\n  while( true ) {\n    if (*(int *)(array_of_values + 4) == 0) {\n      return -1;\n    }\n    if (*(int *)(array_of_values + 4) == value_to_find) break;\n    array_of_values = array_of_values + 0xc;\n  }\n  return (int)*array_of_values;\n}",
            "called": [
                "FUN_08004c8a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004c8a",
            "calling": [
                "FUN_08004c8a",
                "FUN_08004ca2"
            ],
            "imported": false,
            "current_name": "find_value_in_array_08004c8a"
        },
        "FUN_08001cd0": {
            "renaming": {
                "FUN_08001cd0": "calculate_08001cd0",
                "param_1": "input",
                "param_2": "param",
                "iVar1": "start_time",
                "uVar2": "factor",
                "iVar3": "elapsed_time",
                "uVar4": "result",
                "puVar5": "data",
                "uVar6": "divisor",
                "local_1c": "threshold"
            },
            "code": "uint32_t calculate_08001cd0(uint32_t **input, uint32_t param)\n{\n  uint32_t result = 0;\n  int start_time = get_time();\n  uint32_t *data = *input;\n  if ((data[2] & 0x100) == 0) {\n    if (((data[1] & 0x100) == 0) && ((data[0xb] & 0xf00000) == 0)) {\n      do {\n        if ((**input & 2) != 0) goto exit;\n      } while ((param == 0xffffffff) ||\n              ((param != 0 && (get_time() - start_time) <= param)));\n      (*input)[10] |= 4;\n      (*input)[9] = 0;\n      result = 3;\n    }\n    else {\n      uint32_t divisor = *(uint32_t *)PTR_DAT_08001e2c;\n      uint32_t factor = get_factor(2);\n      uint32_t *data = *input;\n      if (((data[4] & DAT_08001e30) == 0) && ((data[3] & DAT_08001e30 + 0xdc000000) == 0)) {\n        if ((data[4] & DAT_08001e34) == 0) {\n          if ((data[3] & DAT_08001e38) == 0) {\n            result = 0x14;\n          }\n          else {\n            result = 0x29;\n          }\n        }\n        else {\n          result = 0x29;\n        }\n      }\n      else if (((data[4] & DAT_08001e34) == 0) && ((data[3] & DAT_08001e34 + 0xee000000) == 0))\n      {\n        result = 0x54;\n      }\n      else if ((DAT_08001e3c & data[4]) == 0) {\n        if ((DAT_08001e3c & data[3]) == 0) {\n          result = 0x54;\n        }\n        else {\n          result = 0xfc;\n        }\n      }\n      else {\n        result = 0xfc;\n      }\n      uint32_t threshold = (divisor / factor) * result;\n      for (; result <= threshold && threshold - result != 0; result++) {\n        if ((param != 0xffffffff) &&\n           ((param == 0 || (get_time() - start_time) > param))) {\n          (*input)[10] |= 4;\n          (*input)[9] = 0;\n          goto exit;\n        }\n      }\n      **input = 0xffffffed;\n      (*input)[10] |= 0x200;\n      if (((*input)[2] & 0xe0000) == 0xe0000) {\n        if (input[3] == (uint32_t *)0x0) {\n          (*input)[10] &= 0xfffffeff;\n          if (((*input)[10] & 0x1000) == 0) {\n            (*input)[10] |= 1;\n            result = 0;\n          }\n          else {\n            result = 0;\n          }\n        }\n        else {\n          result = 0;\n        }\n      }\n      else {\n        result = 0;\n      }\n    }\n  }\n  else {\n    (*input)[10] |= 0x20;\n    (*input)[9] = 0;\n    result = 1;\n  }\n  exit:\n  return result;\n}",
            "called": [
                "FUN_08003da4",
                "FUN_08001cc4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001cd0",
            "calling": [
                "FUN_08004a4c"
            ],
            "imported": false,
            "current_name": "calculate_08001cd0"
        },
        "FUN_08004178": {
            "renaming": {
                "FUN_08004178": "do_nothing_08004178"
            },
            "code": "\nvoid do_nothing_08004178(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004178",
            "calling": [
                "FUN_08003f18"
            ],
            "imported": false,
            "current_name": "do_nothing_08004178"
        },
        "FUN_08004a4c": {
            "renaming": {
                "FUN_08004a4c": "parse_input_08004a4c",
                "param_1": "input_val",
                "local_46": "result",
                "local_44": "len",
                "local_40": "temp_6",
                "local_3c": "temp_4",
                "local_38": "buffer[0]",
                "local_34": "temp_0",
                "local_30": "temp_1",
                "local_2c": "temp_2",
                "local_28": "temp_7",
                "local_24": "temp_3",
                "local_20": "temp_5",
                "local_1c": "temp_8",
                "local_10": "temp_9"
            },
            "code": "uint16_t parse_input_08004a4c(uint32_t input_val) {\n  uint32_t buffer[12];\n  memset(buffer, 0, sizeof(buffer));\n  uint16_t result = 0;\n\n  buffer[0] = parse_input_08004a4c_helper(input_val, PTR_DAT_08004b2c);\n\n  if (buffer[0] == 0) {\n    result = 0;\n  }\n  else {\n    uint32_t temp[8] = {0};\n    temp[5] = 0xE0000;\n    temp[7] = 1;\n    *PTR_DAT_08004b30 = (char)input_val;\n    if (parse_helper(&buffer[0]) == 0) {\n      uint32_t len = get_input_length(input_val);\n      if (len < 0x12) {\n        temp[6] = 1;\n        temp[4] = 2;\n        if (parse_input_08004a4c_helper_2(&buffer[0], &len) == 0) {\n          if (parse_helper_2(&buffer[0]) == 0) {\n            if (parse_helper_3(&buffer[0]) == 0) {\n              if (parse_helper_4(&buffer[0], 10) == 0) {\n                uint32_t flags = get_flags(&buffer[0]);\n                if ((flags & 0x200) != 0) {\n                  result = parse_helper_5(&buffer[0]);\n                }\n                if (parse_helper_6(&buffer[0]) != 0) {\n                  result = 0;\n                }\n              }\n              else {\n                result = 0;\n              }\n            }\n            else {\n              result = 0;\n            }\n          }\n          else {\n            result = 0;\n          }\n        }\n        else {\n          result = 0;\n        }\n      }\n      else {\n        result = 0;\n      }\n    }\n    else {\n      result = 0;\n    }\n  }\n  return result;\n}",
            "called": [
                "FUN_08001e40",
                "FUN_08001f80",
                "FUN_08001cd0",
                "FUN_0800492c",
                "FUN_0800224c",
                "FUN_08002348",
                "FUN_0800213c",
                "FUN_08002004",
                "FUN_08002384",
                "FUN_08001e48",
                "FUN_080061e0",
                "FUN_08004c78"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004a4c",
            "calling": [
                "FUN_08005754"
            ],
            "imported": false,
            "current_name": "parse_input_08004a4c"
        },
        "FUN_08006112": {
            "renaming": {
                "FUN_08006112": "swap_arguments_and_call_function_08006112",
                "param_1": "first_arg",
                "param_2": "second_arg",
                "FUN_08006158": "call_function_with_swapped_arguments"
            },
            "code": "void swap_arguments_and_call_function_08006112(undefined4 first_arg, undefined4 second_arg)\n{\n  call_function_with_swapped_arguments(second_arg, first_arg);\n  return;\n}",
            "called": [
                "FUN_08006158"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006112",
            "calling": [
                "FUN_08005fc8"
            ],
            "imported": false,
            "current_name": "swap_arguments_and_call_function_08006112"
        },
        "FUN_08004974": {
            "renaming": {
                "FUN_08004974": "decode_and_process_08004974",
                "param_1": "input_data",
                "param_2": "param",
                "puVar1": "byte_ptr",
                "iVar2": "int_var",
                "uVar3": "decoded_value",
                "uVar4": "mask",
                "uVar5": "input_value",
                "local_18": "local_mask",
                "local_14": "local_flag",
                "local_10": "local_zero",
                "DAT_080049ec": "GLOBAL_VAR_1",
                "DAT_080049e0": "GLOBAL_VAR_2",
                "DAT_080049e4": "GLOBAL_VAR_3",
                "PTR_DAT_080049e8": "BYTE_PTR",
                "FUN_08004884": "decode",
                "FUN_08002624": "process"
            },
            "code": "void decode_and_process_08004974(uint *input_data, undefined4 param) {\n  undefined *byte_ptr;\n  int int_var;\n  undefined4 decoded_value;\n  uint input_value = *input_data;\n  uint mask;\n  uint flag;\n  uint local_mask;\n  undefined4 local_flag;\n  undefined4 local_zero;\n\n  int_var = DAT_080049ec;\n  if (input_value == DAT_080049e0) {\n    mask = *(uint *)(DAT_080049ec + 0x18) | 0x200;\n    *(uint *)(DAT_080049ec + 0x18) = mask;\n    flag = *(uint *)(int_var + 0x18) & 0x200;\n  }\n  else {\n    mask = DAT_080049e4;\n    if (input_value == DAT_080049e4) {\n      mask = *(uint *)(DAT_080049ec + 0x18) | 0x400;\n      *(uint *)(DAT_080049ec + 0x18) = mask;\n      flag = *(uint *)(int_var + 0x18) & 0x400;\n    }\n  }\n  byte_ptr = PTR_DAT_080049e8;\n  decoded_value = decode((uint)((int)(char)*PTR_DAT_080049e8 << 0x18) >> 0x1c, param, mask, flag);\n  local_mask = 1 << ((byte)*byte_ptr & 0xf) & 0xffff;\n  local_flag = 3;\n  local_zero = 0;\n  process(decoded_value, &local_mask);\n  return;\n}",
            "called": [
                "FUN_08004884",
                "FUN_08002624"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004974",
            "calling": [
                "FUN_0800213c"
            ],
            "imported": false,
            "current_name": "decode_and_process_08004974"
        },
        "FUN_08003520": {
            "renaming": {
                "FUN_08003520": "check_flags_08003520",
                "param_1": "flags",
                "puVar2": "ptr_flags",
                "uVar3": "flag_1",
                "uVar4": "flag_2",
                "DAT_080035f8": "FLAG_1_MASK",
                "char cVar1": "char c",
                "FUN_08002d1c": "handle_flag_3",
                "param_1[0xc]": "flags[12]",
                "FUN_0800316c": "handle_flags"
            },
            "code": "void check_flags_08003520(uint **flags)\n{\n  uint *ptr_flags = *flags;\n  uint flag_1 = ptr_flags[5];\n  uint flag_2 = ptr_flags[1];\n  if (((flag_1 & DAT_080035f8) != 0) && ((flag_2 & 0x100) != 0)) {\n    flags[16] = (uint *)((uint)flags[16] | 1);\n    ptr_flags[5] = 0xfffffeff;\n    **flags = **flags | 0x8000;\n  }\n  if (((flag_1 & FLAG_2_MASK) != 0) && ((flag_2 & 0x100) != 0)) {\n    flags[16] = (uint *)((uint)flags[16] | 2);\n    (*flags)[5] = 0xfffffdff;\n  }\n  if (((flag_1 & FLAG_3_MASK) != 0) && ((flag_2 & 0x100) != 0)) {\n    char c = *(char *)((int)flags + 0x3d);\n    if (((*(char *)((int)flags + 0x3e) == ' ') && (*(short *)((int)flags + 0x2a) == 0)) && (((c == '!' || (c == ')')) || ((c == '(' && (flags[12] == (uint *)0x21)))))) {\n      handle_flag_3(flags);\n    }\n    else {\n      flags[16] = (uint *)((uint)flags[16] | 4);\n      if (*(char *)((int)flags + 0x3e) == '\\x10') {\n        **flags = **flags | 0x200;\n      }\n      (*flags)[5] = 0xfffffbff;\n    }\n  }\n  if (((flag_1 & FLAG_4_MASK) != 0) && ((flag_2 & 0x100) != 0)) {\n    flags[16] = (uint *)((uint)flags[16] | 8);\n    (*flags)[5] = 0xfffff7ff;\n  }\n  if (flags[16] != (uint *)0x0) {\n    handle_flags(flags);\n  }\n  return;\n}",
            "called": [
                "FUN_0800316c",
                "FUN_08002d1c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003520",
            "calling": [],
            "imported": false,
            "current_name": "check_flags_08003520"
        },
        "FUN_08002ca6": {
            "renaming": {
                "FUN_08002ca6": "process_input_08002ca6",
                "param_1": "input_array",
                "puVar2": "output_ptr",
                "cVar1": "current_char"
            },
            "code": "int process_input_08002ca6(int *input_array) {\n    char current_char = *(char *)((int)input_array + 0x3d);\n    if (*(short *)((int)input_array + 0x2a) != 0) {\n        undefined *output_ptr = (undefined *)input_array[9];\n        input_array[9] = (int)(output_ptr + 1);\n        *output_ptr = (char)*(undefined4 *)(*input_array + 0x10);\n        *(short *)((int)input_array + 0x2a) = *(short *)((int)input_array + 0x2a) + -1;\n        if ((*(short *)((int)input_array + 0x2a) == 0) && (current_char == '*')) {\n            *(uint *)(*input_array + 4) = *(uint *)(*input_array + 4) & 0xfffffbff;\n            input_array[0xc] = 0x22;\n            *(undefined *)((int)input_array + 0x3d) = 0x28;\n            do_nothing_08002ca4();\n        }\n    }\n    return 0;\n}",
            "called": [
                "FUN_08002ca4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ca6",
            "calling": [
                "FUN_080033b8"
            ],
            "imported": false,
            "current_name": "process_input_08002ca6"
        },
        "FUN_08002ca4": {
            "renaming": {
                "FUN_08002ca4": "do_nothing_08002ca4"
            },
            "code": "\nvoid do_nothing_08002ca4(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ca4",
            "calling": [
                "FUN_08002ca6",
                "FUN_080032b4"
            ],
            "imported": false,
            "current_name": "do_nothing_08002ca4"
        },
        "FUN_08007328": {
            "renaming": {
                "FUN_08007328": "do_nothing_08007328"
            },
            "code": "\nvoid do_nothing_08007328(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007328",
            "calling": [
                "FUN_08006198",
                "FUN_0800010c"
            ],
            "imported": false,
            "current_name": "do_nothing_08007328"
        },
        "FUN_08005b54": {
            "renaming": {
                "FUN_08005b54": "initialize_array_08005b54",
                "param_1": "array",
                "param_2": "arg_2",
                "param_3": "arg_3",
                "param_4": "arg_4",
                "uVar1": "character_1",
                "FUN_08005b24": "perform_operation_1",
                "FUN_08005b3c": "perform_operation_2",
                "FUN_08004ca2": "get_character",
                "*param_1": "*array",
                "PTR_PTR_LAB_080059c8_1_08005ba0": "PTR_PTR_LAB_080059c8_1_08005ba0",
                "PTR_DAT_08005ba4": "PTR_DAT_08005ba4",
                "PTR_DAT_08005ba8": "PTR_DAT_08005ba8",
                "PTR_DAT_08005bac": "PTR_DAT_08005bac"
            },
            "code": "undefined4* initialize_array_08005b54(undefined4 *array, undefined4 arg_2, undefined4 arg_3, undefined4 arg_4)\n{\n  undefined character_1;\n  array[1] = 0;\n  array[2] = 1000;\n  *array = PTR_PTR_LAB_080059c8_1_08005ba0;\n  if (array == (undefined4 *)PTR_DAT_08005ba4) {\n    perform_operation_1(array, 0, arg_3, PTR_DAT_08005ba4, arg_4);\n    perform_operation_2(array, 1);\n  }\n  else {\n    character_1 = get_character(arg_2, PTR_DAT_08005ba8);\n    *(undefined *)((int)array + 0x12d) = character_1;\n    character_1 = get_character(arg_2, PTR_DAT_08005bac);\n    *(undefined *)(array + 0x4b) = character_1;\n  }\n  perform_operation_3(array);\n  return array;\n}",
            "called": [
                "FUN_08005b3c",
                "FUN_08005a44",
                "FUN_08005b24",
                "FUN_08004ca2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005b54",
            "calling": [
                "FUN_08005bb0"
            ],
            "imported": false,
            "current_name": "initialize_array_08005b54"
        },
        "FUN_08004618": {
            "renaming": {
                "FUN_08004618": "process_data_08004618",
                "param_1": "data_ptr",
                "pbVar1": "data_10_uchar_ptr",
                "puVar3": "data_10_char_ptr",
                "sVar2": "data_2_short_ptr",
                "data_4_ptr": "data_4_ptr",
                "data_10_ptr": "data_10_ptr",
                "data_char_ptr": "data_char_ptr",
                "PTR_DAT_0000000c": "data_ptr_0",
                "PTR_DAT_00000014": "data_ptr_14"
            },
            "code": "int process_data_08004618(int *data_ptr) {\n  char *data_char_ptr = (char *)(data_ptr + 0x3a);\n  if (*data_char_ptr != '\"') {\n    return 2;\n  }\n  int *data_4_ptr = (int *)(*data_ptr + 4);\n  int *data_10_ptr = (int *)(data_ptr[10]);\n  if (data_ptr[2] == 0x1000) {\n    if (data_ptr[4] == 0) {\n      *(unsigned short *)data_10_ptr = (unsigned short)((*data_4_ptr << 0x17) >> 0x17);\n      data_ptr[10] = data_ptr[10] + 2;\n    }\n    else {\n      *(unsigned short *)data_10_ptr = (unsigned short)(*data_4_ptr & 0xff);\n      data_ptr[10] = data_ptr[10] + 1;\n    }\n  }\n  else if (data_ptr[4] == 0) {\n    char *data_10_char_ptr = (char *)data_10_ptr;\n    data_ptr[10] = (int)(data_10_char_ptr + 1);\n    *data_10_char_ptr = (char)(*data_4_ptr);\n  }\n  else {\n    unsigned char *data_10_uchar_ptr = (unsigned char *)data_10_ptr;\n    data_ptr[10] = (int)(data_10_uchar_ptr + 1);\n    *data_10_uchar_ptr = (unsigned char)(*data_4_ptr & 0x7f);\n  }\n  short *data_2_short_ptr = (short *)(data_ptr + 0x2e);\n  *data_2_short_ptr = *data_2_short_ptr - 1;\n  if (*data_2_short_ptr != 0) {\n    return 0;\n  }\n  int *PTR_DAT_0000000c = (int *)(*data_ptr + 0xc);\n  *PTR_DAT_0000000c = *PTR_DAT_0000000c & 0xffffffdf;\n  *PTR_DAT_0000000c = *PTR_DAT_0000000c & 0xfffffeff;\n  int *PTR_DAT_00000014 = (int *)(*data_ptr + 0x14);\n  *PTR_DAT_00000014 = *PTR_DAT_00000014 & 0xfffffffe;\n  *data_char_ptr = ' ';\n  call_some_other_function();\n  return 0;\n}",
            "called": [
                "FUN_080055e0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004618",
            "calling": [
                "FUN_080046b8"
            ],
            "imported": false,
            "current_name": "process_data_08004618"
        },
        "FUN_08006c40": {
            "renaming": {
                "FUN_08006c40": "initialize_param_array_08006c40",
                "param_1": "param_array",
                "param_2": "param_2",
                "param_3": "param_3"
            },
            "code": "void initialize_param_array_08006c40(undefined4 *param_array, undefined2 param_2, undefined2 param_3)\n{\n    param_array[0] = 0;\n    param_array[1] = 0;\n    param_array[2] = 0;\n    *(undefined2 *)(param_array + 3) = param_2;\n    param_array[0x19] = 0;\n    *(undefined2 *)((int)param_array + 0xe) = param_3;\n    param_array[4] = 0;\n    param_array[5] = 0;\n    param_array[6] = 0;\n    initialize_param_array_08006c40(param_array + 0x17, 0, 8);\n    param_array[8] = param_array;\n    param_array[9] = DAT_08006c78;\n    param_array[10] = PTR_FUN_08006f5a_1_08006c7c;\n    param_array[0xb] = PTR_FUN_08006f92_1_08006c80;\n    param_array[0xc] = PTR_LAB_08006fb6_1_08006c84;\n}",
            "called": [
                "FUN_080061e0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006c40",
            "calling": [
                "FUN_08006cb4"
            ],
            "imported": false,
            "current_name": "initialize_param_array_08006c40"
        },
        "FUN_0800157c": {
            "renaming": {
                "FUN_0800157c": "set_params_0800157c",
                "param_1": "buffer",
                "param_2": "value",
                "param_3": "c1",
                "param_4": "c2",
                "*param_1": "*buffer",
                "FUN_080057b4": "set_value",
                "FUN_08005848": "set_flag"
            },
            "code": "char* set_params_0800157c(char* buffer, int value, char c1, char c2)\n{\n    *buffer = (char)value;\n    buffer[1] = c1;\n    buffer[2] = c2;\n    set_value(value, 0);\n    set_value(buffer[1], 1);\n    set_value(buffer[2], 1);\n    set_flag(buffer[1], 1);\n    set_flag(buffer[2], 0);\n    return buffer;\n}",
            "called": [
                "FUN_080057b4",
                "FUN_08005848"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800157c",
            "calling": [
                "FUN_08000b08"
            ],
            "imported": false,
            "current_name": "set_params_0800157c"
        },
        "FUN_080045a2": {
            "renaming": {
                "FUN_080045a2": "check_param_080045a2",
                "param_1": "param_arr",
                "param_2": "param_2",
                "param_3": "param_3"
            },
            "code": "int check_param_080045a2(int *param_arr, int param_2, int param_3) {\n  if (*(char *)((int)param_arr + 0x3a) != ' ') {\n    return 2;\n  }\n  if (param_2 == 0) {\n    return 1;\n  }\n  if (param_3 == 0) {\n    return 1;\n  }\n  if (*(char *)(param_arr + 0xe) != '\\x01') {\n    param_arr[10] = param_2;\n    *(short *)(param_arr + 0xb) = (short)param_3;\n    *(short *)((int)param_arr + 0x2e) = (short)param_3;\n    param_arr[0xf] = 0;\n    *(undefined *)((int)param_arr + 0x3a) = 0x22;\n    *(undefined *)(param_arr + 0xe) = 0;\n    *(uint *)(*param_arr + 0xc) |= 0x100;\n    *(uint *)(*param_arr + 0x14) |= 1;\n    *(uint *)(*param_arr + 0xc) |= 0x20;\n    return 0;\n  }\n  return 2;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080045a2",
            "calling": [
                "FUN_080054d4",
                "FUN_08005510"
            ],
            "imported": false,
            "current_name": "check_param_080045a2"
        },
        "FUN_08001c32": {
            "renaming": {
                "FUN_08001c32": "call_fun_08004c52_before_return_08001c32",
                "FUN_08004c52": "call_fun_08004c52"
            },
            "code": "void call_fun_08004c52_before_return_08001c32(void)\n{\n  call_fun_08004c52();\n  return;\n}",
            "called": [
                "FUN_08004c52"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001c32",
            "calling": [
                "FUN_08005f5e"
            ],
            "imported": false,
            "current_name": "call_fun_08004c52_before_return_08001c32"
        },
        "FUN_080047e8": {
            "renaming": {
                "FUN_080047e8": "combine_two_bytes_080047e8",
                "param_1": "address",
                "*(byte *)(param_1 + 0x3a)": "byte1",
                "*(byte *)(param_1 + 0x39)": "byte2"
            },
            "code": "byte combine_two_bytes_080047e8(int address){\n    byte byte1 = *(byte *)(address + 0x3a);\n    byte byte2 = *(byte *)(address + 0x39);\n    return byte1 | byte2;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080047e8",
            "calling": [
                "FUN_0800548c",
                "FUN_080054b0"
            ],
            "imported": false,
            "current_name": "combine_two_bytes_080047e8"
        },
        "FUN_080057b4": {
            "renaming": {
                "process_data": "process_data",
                "param_1": "data_index",
                "param_2": "arg_1",
                "param_3": "arg_2",
                "param_4": "data_array",
                "iVar1": "function_result",
                "puVar2": "data_pointer",
                "iVar3": "index_value",
                "FUN_080057b4": "process_data_080057b4"
            },
            "code": "void process_data_080057b4(uint data_index, undefined4 arg_1, undefined4 arg_2, undefined *data_array)\n{\n  int index_value;\n  undefined *data_pointer;\n  int function_result;\n\n  if (data_index < 0x3c) {\n    index_value = (int)(char)PTR_DAT_08005838[data_index];\n    data_pointer = PTR_DAT_08005838;\n  }\n  else {\n    index_value = -1;\n    data_pointer = data_array;\n  }\n  if (index_value != -1) {\n    function_result = FUN_080047f4(index_value, PTR_DAT_0800583c, arg_2, data_pointer, data_array);\n    if (function_result != 0) {\n      function_result = FUN_08004ce2(index_value, PTR_DAT_08005840);\n      if (function_result != 0) {\n        FUN_08004b3c(index_value);\n      }\n      FUN_08004828(index_value, PTR_DAT_0800583c);\n    }\n    switch(arg_1) {\n    case 0:\n      FUN_08004bb0(index_value, 0);\n      break;\n    case 1:\n      FUN_08004bb0(index_value, 1, 0);\n      break;\n    case 2:\n      FUN_08004bb0(index_value, 0, 1);\n      break;\n    case 3:\n      FUN_08004bb0(index_value, 0, 2);\n    }\n    FUN_0800480a(index_value, PTR_DAT_08005844);\n  }\n  return;\n}",
            "called": [
                "FUN_08004b3c",
                "FUN_080047f4",
                "FUN_08004bb0",
                "FUN_08004828",
                "FUN_0800480a",
                "FUN_08004ce2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080057b4",
            "calling": [
                "FUN_0800157c",
                "FUN_08000bcc",
                "FUN_080013a4"
            ],
            "imported": false,
            "current_name": "process_data_080057b4"
        },
        "FUN_08007334": {
            "renaming": {
                "FUN_08007334": "do_nothing_08007334"
            },
            "code": "\nvoid do_nothing_08007334(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007334",
            "calling": [],
            "imported": false,
            "current_name": "do_nothing_08007334"
        },
        "FUN_08001b18": {
            "renaming": {
                "FUN_08001b18": "execute_function_08001b18",
                "param_1": "input_param",
                "FUN_08001ab0": "call_initialization_function"
            },
            "code": "undefined4 execute_function_08001b18(undefined4 input_param)\n{\n  call_initialization_function();\n  return input_param;\n}",
            "called": [
                "FUN_08001ab0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001b18",
            "calling": [
                "FUN_08000b08"
            ],
            "imported": false,
            "current_name": "execute_function_08001b18"
        },
        "thunk_FUN_08005750": {
            "renaming": {
                "thunk_FUN_08005750": "return_one_thunk_08005750"
            },
            "code": "\nint return_one_thunk_08005750()\n{\n  int result = 1;\n  return result;\n}\n",
            "called": [
                "FUN_08005750"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006f34",
            "calling": [
                "FUN_08006f00"
            ],
            "imported": false,
            "current_name": "return_one_thunk_08005750"
        },
        "FUN_0800092c": {
            "renaming": {
                "FUN_0800092c": "check_parameters_0800092c",
                "param_1": "first_param",
                "param_2": "second_param",
                "param_3": "third_param",
                "param_4": "fourth_param",
                "uVar1": "xor_result",
                "bVar2": "are_second_and_fourth_equal",
                "bVar3": "is_fourth_param_less_or_equal_than_second"
            },
            "code": "uint check_parameters_0800092c(uint first_param, uint second_param, uint third_param, uint fourth_param)\n{\n    uint result;\n    bool is_negative_first = (int)(second_param << 1) >> 0x15 == -1;\n    bool is_negative_second = (int)(fourth_param << 1) >> 0x15 == -1;\n    if ((is_negative_first || is_negative_second) && (((is_negative_first && ((first_param | second_param << 0xc) != 0)) || ((is_negative_second && ((third_param | fourth_param << 0xc) != 0))))))\n    {\n        return 1;\n    }\n    bool is_first_param_zero = (first_param | second_param << 1) == 0;\n    bool is_third_param_zero = (third_param | fourth_param << 1) == 0;\n    if (!is_first_param_zero)\n    {\n        bool are_second_and_fourth_equal = second_param == fourth_param;\n        if (are_second_and_fourth_equal)\n        {\n            bool are_first_and_third_equal = first_param == third_param;\n            if (are_first_and_third_equal)\n            {\n                return 0;\n            }\n            uint xor_result = second_param ^ fourth_param;\n            bool is_xor_result_zero = xor_result == 0;\n            if (-1 < (int)xor_result)\n            {\n                is_xor_result_zero = second_param == fourth_param;\n            }\n            bool is_fourth_param_less_or_equal_than_second = -1 < (int)xor_result && fourth_param <= second_param;\n            if (is_xor_result_zero)\n            {\n                is_fourth_param_less_or_equal_than_second = third_param <= first_param;\n            }\n            uint shift_amount = (int)fourth_param >> 0x1f;\n            if (!is_fourth_param_less_or_equal_than_second)\n            {\n                shift_amount = ~shift_amount;\n            }\n            result = shift_amount | 1;\n        }\n        else\n        {\n            result = 0;\n        }\n    }\n    else if (is_third_param_zero)\n    {\n        result = 1;\n    }\n    else\n    {\n        result = 0;\n    }\n    return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800092c",
            "calling": [
                "FUN_080009b8"
            ],
            "imported": false,
            "current_name": "check_parameters_0800092c"
        },
        "FUN_08005d8a": {
            "renaming": {
                "FUN_08005d8a": "process_data_08005d8a",
                "param_1": "data_ptr",
                "param_2": "data_size",
                "param_3": "flag",
                "param_4": "func_ptr"
            },
            "code": "void process_data_08005d8a(uint32_t *data_ptr, uint32_t data_size, uint32_t flag, uint32_t func_ptr) {\n  if (flag != 0) {\n    process_data_08005d8a(data_ptr, data_size, flag & 0xff, 0);\n    return;\n  }\n  (**(void (**)(uint32_t *, uint32_t, uint32_t, void *))data_ptr)(data_ptr, data_size & 0xff, 0, (**(void (**)(uint32_t *, uint32_t, uint32_t, void *))data_ptr), func_ptr);\n  return;\n}",
            "called": [
                "FUN_08005ce8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005d8a",
            "calling": [
                "FUN_08005da0",
                "FUN_08005da8"
            ],
            "imported": false,
            "current_name": "process_data_08005d8a"
        },
        "FUN_08002560": {
            "renaming": {
                "FUN_08002560": "set_flag_if_param_is_four_08002560",
                "param_1": "param",
                "DAT_0800257c": "flag_ptr"
            },
            "code": "void set_flag_if_param_is_four_08002560(int param) {\n  if (param != 4) {\n    *DAT_0800257c = *DAT_0800257c & 0xfffffffb;\n    return;\n  }\n  *DAT_0800257c = *DAT_0800257c | 4;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002560",
            "calling": [
                "FUN_08001b48"
            ],
            "imported": false,
            "current_name": "set_flag_if_param_is_four_08002560"
        },
        "FUN_08006e90": {
            "renaming": {
                "FUN_08006e90": "find_char_in_string_08006e90",
                "param_1": "string",
                "param_2": "target_char",
                "param_3": "string_length",
                "pcVar1": "current_char",
                "pcVar2": "previous_char"
            },
            "code": "char* find_char_in_string_08006e90(char* string, char target_char, int string_length) {\n  char* current_char = string;\n  do {\n    if (current_char == string + string_length) {\n      return NULL;\n    }\n    current_char++;\n  } while (*current_char != target_char);\n  return current_char;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006e90",
            "calling": [
                "FUN_080066b0",
                "FUN_08006394"
            ],
            "imported": false,
            "current_name": "find_char_in_string_08006e90"
        },
        "FUN_0800417a": {
            "renaming": {
                "FUN_0800417a": "do_nothing_0800417a"
            },
            "code": "\nvoid do_nothing_0800417a(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800417a",
            "calling": [
                "FUN_08003f18"
            ],
            "imported": false,
            "current_name": "do_nothing_0800417a"
        },
        "FUN_08006920": {
            "renaming": {
                "FUN_08006920": "process_input_08006920",
                "param_1": "output",
                "param_2": "input",
                "puVar1": "ptr_data",
                "iVar2": "result"
            },
            "code": "void process_input_08006920(int *output, undefined4 input)\n{\n  undefined *ptr_data = PTR_DAT_0800693c;\n  *(undefined4 *)ptr_data = 0;\n  int result = calculate_input(input);\n  if ((result == -1) && (*(int *)ptr_data != 0)) {\n    *output = *(int *)ptr_data;\n  }\n  return;\n}",
            "called": [
                "FUN_080056d8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006920",
            "calling": [
                "FUN_08006288"
            ],
            "imported": false,
            "current_name": "process_input_08006920"
        },
        "FUN_080008ba": {
            "renaming": {
                "FUN_080008ba": "calculate_result_080008ba",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "uVar1": "temp_var_1",
                "unaff_r4": "temp_var_2",
                "uVar2": "shift_amount",
                "uVar3": "temp_var_3",
                "in_r12": "constant_value",
                "bVar4": "is_zero"
            },
            "code": "ulonglong calculate_result_080008ba(uint input_1, uint input_2, uint input_3, uint input_4)\n{\n  uint shift_amount;\n  uint temp_var_1;\n  uint temp_var_2;\n  uint temp_var_3;\n  bool is_zero;\n  \n  shift_amount = input_4 >> 0x14;\n  temp_var_2 = input_2;\n  if (input_3 != input_4 || shift_amount != input_3) {\n    if (input_3 == input_4) {\n      if (((input_1 | input_2 << 0xc) == 0) && (input_1 = input_3, temp_var_2 = input_4, shift_amount != input_3)) {\n        goto return_case_1;\n      }\n    }\n    else if (shift_amount == input_3) {\n      input_1 = input_3;\n      temp_var_2 = input_4;\n      if ((input_3 | input_4 << 0xc) == 0) {\n        goto return_case_2;\n      }\n    }\n    else {\n      is_zero = (input_1 | input_2 << 1) == 0;\n      if (!is_zero) {\n        is_zero = (input_3 | input_4 << 1) == 0;\n      }\n      if (!is_zero) {\n        if (input_4 == 0) {\n          temp_var_2 = input_2 & 0x80000000;\n          do {\n            temp_var_1 = input_1 & 0x80000000;\n            input_1 = input_1 << 1;\n            input_2 = input_2 * 2 + (uint)(temp_var_1 != 0);\n          } while ((input_2 & 0x100000) == 0);\n          input_2 = input_2 | temp_var_2;\n          if (shift_amount != 0) {\n            return CONCAT44(input_2,input_1);\n          }\n        }\n        do {\n          temp_var_2 = input_3 & 0x80000000;\n          input_3 = input_3 << 1;\n          input_4 = input_4 * 2 + (uint)(temp_var_2 != 0);\n        } while ((input_4 & 0x100000) == 0);\n        return CONCAT44(input_2,input_1);\n      }\n      if ((input_1 | input_2 << 1) != 0) goto return_case_1;\n      if ((input_3 | input_4 << 1) != 0) goto return_case_2;\n    }\n  }\n  return CONCAT44(temp_var_2,input_1) | 0x7ff8000000000000;\n\nreturn_case_1:\n  return (ulonglong)((input_2 ^ input_4) & 0x80000000 | 0x7ff00000) << 0x20;\n\nreturn_case_2:\n  return (ulonglong)((input_2 ^ input_4) & 0x80000000) << 0x20;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080008ba",
            "calling": [
                "FUN_0800074c"
            ],
            "imported": false,
            "current_name": "calculate_result_080008ba"
        },
        "FUN_08002d1c": {
            "renaming": {
                "FUN_08002d1c": "modify_parameters_08002d1c",
                "param_1": "parameters",
                "param_1[0xb]": "param_b",
                "*(char *)((int)param_1 + 0x3d)": "*(char *)((int)parameters + 0x3d)",
                "DAT_08002dac": "PTR_DAT_08002dac"
            },
            "code": "uint32_t modify_parameters_08002d1c(uint32_t **parameters)\n{\n    uint32_t *param_b = parameters[0xb];\n    char *param_3d = (char *)((int)parameters + 0x3d);\n\n    if ((param_b == (uint32_t *)0x4 || param_b == (uint32_t *)0x8) && (*param_3d == '(')) {\n        param_b = DAT_08002dac;\n        (*parameters)[1] &= 0xfffff8ff;\n        (*parameters)[5] = 0xfffffbff;\n        **parameters &= 0xfffffbff;\n        parameters[0xc] = (uint32_t *)0x0;\n        *param_3d = 0x20;\n        *(param_3d + 1) = 0;\n        FUN_08004ec4();\n    }\n    else if (*param_3d == '!') {\n        param_b = DAT_08002dac;\n        parameters[0xc] = (uint32_t *)0x21;\n        *param_3d = 0x20;\n        *(param_3d + 1) = 0;\n        (*parameters)[1] &= 0xfffff8ff;\n        (*parameters)[5] = 0xfffffbff;\n        **parameters &= 0xfffffbff;\n        do_nothing_08002c52();\n    }\n    else {\n        (*parameters)[5] = 0xfffffbff;\n    }\n    return 0;\n}",
            "called": [
                "FUN_08002c52",
                "FUN_08004ec4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002d1c",
            "calling": [
                "FUN_08003520"
            ],
            "imported": false,
            "current_name": "modify_parameters_08002d1c"
        },
        "FUN_08005714": {
            "renaming": {
                "FUN_08005714": "return_error_code_08005714"
            },
            "code": "int32_t return_error_code_08005714(void)\n{\n    return -1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005714",
            "calling": [],
            "imported": false,
            "current_name": "return_error_code_08005714"
        },
        "FUN_08003da4": {
            "renaming": {
                "FUN_08003da4": "calculate_value_08003da4",
                "param_1": "input_param",
                "uVar1": "result",
                "local_24": "local_var_1",
                "abStack_20": "stack_array",
                "uStack_1c": "stack_var_1",
                "uStack_18": "stack_var_2",
                "uStack_14": "stack_var_3"
            },
            "code": "uint calculate_value_08003da4(int input_param) {\n  uint result = 0;\n  undefined2 local_var_1;\n  byte stack_array[4];\n  undefined4 stack_var_1;\n  undefined4 stack_var_2;\n  undefined4 stack_var_3;\n  stack_var_3 = *(undefined4 *)(PTR_DAT_08003e8c + 8);\n  stack_var_2 = *(undefined4 *)(PTR_DAT_08003e8c + 4);\n  stack_var_1 = *(undefined4 *)PTR_DAT_08003e8c;\n  local_var_1 = *(undefined2 *)(PTR_DAT_08003e8c + 0x10);\n  if (input_param == 2) {\n    uint temp_var_1 = calculate_division();\n    result = temp_var_1 / ((((DAT_08003e90[1] << 0x10) >> 0x1e) + 1) * 2);\n  }\n  else if (input_param == 0x10) {\n    if ((*DAT_08003e90 & 0x1000000) == 0) {\n      result = 0;\n    }\n    else {\n      result = DAT_08003e9c;\n      if ((DAT_08003e90[1] & 0x10000) != 0) {\n        result = DAT_08003e94 / *(byte *)((int)&local_var_1 - ((int)(DAT_08003e90[1] << 0xe) >> 0x1f));\n      }\n      result = result * stack_array[(DAT_08003e90[1] << 10) >> 0x1c];\n      if ((DAT_08003e90[1] & 0x400000) == 0) {\n        result = (uint)((ulonglong)DAT_08003e98 * (ulonglong)(result * 2) >> 0x21);\n      }\n    }\n  }\n  else if (input_param == 1) {\n    if ((DAT_08003e90[8] & 0x302) == 0x102) {\n      result = 0x8000;\n    }\n    else {\n      uint temp_var_2 = DAT_08003e90[8] & 0x300;\n      if ((temp_var_2 == 0x200) && ((DAT_08003e90[9] & 2) != 0)) {\n        result = 32000;\n      }\n      else if (temp_var_2 == 0x300) {\n        if ((*DAT_08003e90 & 0x20000) == 0) {\n          result = 0;\n        }\n        else {\n          result = 0xf424;\n        }\n      }\n      else {\n        result = 0;\n      }\n    }\n  }\n  else {\n    result = 0;\n  }\n  return result;\n}\n",
            "called": [
                "FUN_08003c70"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003da4",
            "calling": [
                "FUN_08001cd0",
                "FUN_08002384"
            ],
            "imported": false,
            "current_name": "calculate_value_08003da4"
        },
        "FUN_08005a44": {
            "renaming": {
                "FUN_08005a44": "initialize_struct_08005a44",
                "param_1": "struct_ptr",
                "PTR_": "",
                "DAT_": "",
                "*(int *)(param_1 + 0x130)": "*(ptr_to_int)",
                "*(undefined2 *)(param_1 + 0x134)": "*(short *)(struct_ptr + 0x134)",
                "*(undefined2 *)(param_1 + 0x136)": "*(short *)(struct_ptr + 0x136)",
                "*(int *)(param_1 + 0x138)": "*(ptr_to_int2)",
                "*(undefined2 *)(param_1 + 0x13c)": "*(short *)(struct_ptr + 0x13c)",
                "*(undefined2 *)(param_1 + 0x13e)": "*(short *)(struct_ptr + 0x13e)"
            },
            "code": "void initialize_struct_08005a44(int struct_ptr){\n    int *ptr_to_int = (int *)(struct_ptr + 0x130);\n    int *ptr_to_int2 = (int *)(struct_ptr + 0x138);\n    *(ptr_to_int) = struct_ptr + 0x11;\n    *(ptr_to_int2) = struct_ptr + 0x51;\n    *(short *)(struct_ptr + 0x134) = 0;\n    *(short *)(struct_ptr + 0x136) = 0;\n    *(short *)(struct_ptr + 0x13c) = 0;\n    *(short *)(struct_ptr + 0x13e) = 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005a44",
            "calling": [
                "FUN_08005b54"
            ],
            "imported": false,
            "current_name": "initialize_struct_08005a44"
        },
        "FUN_080009dc": {
            "renaming": {
                "FUN_080009dc": "is_string_terminated_080009dc",
                "in_CY": "last_char",
                "FUN_080009b8": "call_some_function"
            },
            "code": "bool is_string_terminated_080009dc(void)\n{\n  char last_char;\n  call_some_function();\n  return last_char == '\\0';\n}",
            "called": [
                "FUN_080009b8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080009dc",
            "calling": [
                "FUN_080019f6",
                "FUN_08001814",
                "FUN_08001960",
                "FUN_08000cd0",
                "FUN_080016b4",
                "FUN_08005da8"
            ],
            "imported": false,
            "current_name": "is_string_terminated_080009dc"
        },
        "FUN_0800417c": {
            "renaming": {
                "FUN_0800417c": "set_values_from_pointers_0800417c",
                "param_1": "pointer_array",
                "*param_1": "*pointer_array",
                "uint": "unsigned int",
                "char": "char",
                "first_pointer": "unsigned_int_pointer_1",
                "second_pointer": "unsigned_int_pointer_2",
                "char_pointer": "char_pointer"
            },
            "code": "void set_values_from_pointers_0800417c(int *pointer_array) {\n  uint *first_pointer = (uint *)(*pointer_array + 0xc);\n  uint *second_pointer = (uint *)(*pointer_array + 0x14);\n  *first_pointer &= 0xfffffedf;\n  *second_pointer &= 0xfffffffe;\n  char *char_pointer = (char *)pointer_array + 0x3a;\n  *char_pointer = 0x20;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800417c",
            "calling": [
                "FUN_080046b8"
            ],
            "imported": false,
            "current_name": "set_values_from_pointers_0800417c"
        },
        "FUN_08004b94": {
            "renaming": {
                "FUN_08004b94": "call_first_function_08004b94",
                "FUN_08001cc4": "execute_second_function"
            },
            "code": "void call_first_function_08004b94(void)\n{\n  execute_second_function();\n  return;\n}",
            "called": [
                "FUN_08001cc4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004b94",
            "calling": [
                "FUN_080058e0"
            ],
            "imported": false,
            "current_name": "call_first_function_08004b94"
        },
        "FUN_080058e0": {
            "renaming": {
                "FUN_080058e0": "execute_initialization_080058e0",
                "FUN_08004b94": "initialize_system"
            },
            "code": "void execute_initialization_080058e0(void)\n{\n  initialize_system();\n  return;\n}",
            "called": [
                "FUN_08004b94"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080058e0",
            "calling": [
                "FUN_08001ab0",
                "FUN_08000cd0",
                "FUN_08000bcc",
                "FUN_080016b4"
            ],
            "imported": false,
            "current_name": "execute_initialization_080058e0"
        },
        "FUN_08001918": {
            "renaming": {
                "FUN_08001918": "process_data_08001918",
                "param_1": "data_ptr",
                "param_2": "data_size",
                "uVar1": "encrypted_data_ptr_high",
                "uVar2": "data",
                "uVar3": "key",
                "param_3": "param_3",
                "param_4": "param_4"
            },
            "code": "void process_data_08001918(int data_ptr, int data_size, undefined4 param_3, undefined4 param_4)\n{\n  if (data_size > 0) {\n    void* data = FUN_0800042c(data_size);\n    void* key = FUN_0800040c(*(undefined4 *)(data_ptr + 0x58));\n    void* encrypted_data = FUNC_0800074c((int)data, (int)((ulonglong)data >> 0x20), (int)key, (int)((ulonglong)key >> 0x20), param_4);\n    void* encrypted_data_ptr = FUNC_080004f8((int)data, (undefined4)((ulonglong)encrypted_data >> 0x20), *(undefined4 *)(data_ptr + 0x20), *(undefined4 *)(data_ptr + 0x24));\n    *(void **)(data_ptr + 0x20) = encrypted_data_ptr;\n    void* encrypted_key = FUNC_0800074c(*(undefined4 *)(data_ptr + 0x28), *(undefined4 *)(data_ptr + 0x2c), (int)data, (undefined4)((ulonglong)encrypted_data >> 0x20));\n    *(void **)(data_ptr + 0x28) = encrypted_key;\n    *(int *)(data_ptr + 0x58) = data_size;\n  }\n  return;\n}",
            "called": [
                "FUN_0800040c",
                "FUN_080004f8",
                "FUN_0800042c",
                "FUN_0800074c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001918",
            "calling": [
                "FUN_08000cd0"
            ],
            "imported": false,
            "current_name": "process_data_08001918"
        },
        "FUN_0800611c": {
            "renaming": {
                "FUN_0800611c": "assertion_failed_0800611c",
                "param_1": "assertion",
                "param_2": "file",
                "param_3": "message",
                "param_4": "value",
                "uVar1": "stderr",
                "puVar2": "format",
                "uVar3": "exit_code",
                "uVar4": "line",
                "PTR_PTR_DAT_08006148": "unmodified",
                "PTR_s___function__0800614c": "unmodified",
                "PTR_s_assertion___s__failed__file___s__08006150": "unmodified",
                "PTR_s__08006154": "unmodified"
            },
            "code": "void assertion_failed_0800611c(void *assertion, void *file, int line, void *function, void *message, void *value)\n{\n  void *stderr = (void *)0x2;\n  void *format = (void *)0x804a018;\n  fprintf(stderr, format, file, line, function, assertion, message, value);\n  exit(1);\n}",
            "called": [
                "FUN_08006174",
                "FUN_08006ac0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800611c",
            "calling": [
                "FUN_08005a68"
            ],
            "imported": false,
            "current_name": "assertion_failed_0800611c"
        },
        "FUN_080047f4": {
            "renaming": {
                "FUN_080047f4": "get_bit_from_uint_at_index_080047f4",
                "param_1": "num",
                "param_2": "index",
                "PTR_": "ptr",
                "DAT_": "shifted_num, masked_num"
            },
            "code": "uint get_bit_from_uint_at_index_080047f4(uint num, int index) {\n    uint* PTR_ = (uint*)(index + ((num << 0x18) >> 0x1c) * 4);\n    uint shifted_num = num & 0xf;\n    uint masked_num = *PTR_ >> shifted_num;\n    return masked_num & 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080047f4",
            "calling": [
                "FUN_08005890",
                "FUN_080057b4",
                "FUN_08005848"
            ],
            "imported": false,
            "current_name": "get_bit_from_uint_at_index_080047f4"
        },
        "FUN_080009f0": {
            "renaming": {
                "FUN_080009f0": "check_CY_or_ZR_080009f0",
                "in_ZR": "zero",
                "in_CY": "cy"
            },
            "code": "bool check_CY_or_ZR_080009f0(void)\n{\n  undefined zero = 0;\n  undefined cy = 0;\n  FUN_080009b8();\n  return (cy == zero) || (zero == zero);\n}",
            "called": [
                "FUN_080009b8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080009f0",
            "calling": [
                "FUN_08000cd0",
                "FUN_08005da8"
            ],
            "imported": false,
            "current_name": "check_CY_or_ZR_080009f0"
        },
        "FUN_0800134e": {
            "renaming": {
                "FUN_0800134e": "execute_function_0800134e",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arg3",
                "param_4": "arg4",
                "FUN_08001310": "call_function"
            },
            "code": "int execute_function_0800134e(int arg1, int arg2, int arg3, int arg4)\n{\n  call_function(arg1, arg2, 1, arg4, arg4);\n  return 1;\n}",
            "called": [
                "FUN_08001310"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800134e",
            "calling": [
                "FUN_08000cd0"
            ],
            "imported": false,
            "current_name": "execute_function_0800134e"
        },
        "FUN_08002c10": {
            "renaming": {
                "FUN_08002c10": "set_bit_fields_08002c10",
                "param_1": "bit_array_ptr",
                "puVar1": "bit_array",
                "PTR_": "ptr_",
                "DAT_": "dat_"
            },
            "code": "uint32_t set_bit_fields_08002c10(uint32_t **bit_array_ptr)\n{\n    uint32_t *bit_array = *bit_array_ptr;\n    if (*(char *)((int)bit_array_ptr + 0x3d) != ' ')\n    {\n        return 2;\n    }\n    *(char *)((int)bit_array_ptr + 0x3d) = '(';\n    if ((*bit_array & 1) == 0)\n    {\n        *bit_array = *bit_array | 1;\n    }\n    **bit_array_ptr = **bit_array_ptr | 0x400;\n    (*bit_array_ptr)[1] = (*bit_array_ptr)[1] | 0x300;\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002c10",
            "calling": [
                "FUN_08004ef4",
                "FUN_08004ec4"
            ],
            "imported": false,
            "current_name": "set_bit_fields_08002c10"
        },
        "FUN_08006be0": {
            "renaming": {
                "FUN_08006be0": "process_data_08006be0",
                "param_1": "data",
                "param_2": "params",
                "uVar1": "result",
                "iVar2": "num_params",
                "piVar3": "function_param",
                "uVar4": "value1",
                "uVar5": "value2",
                "iVar6": "value3",
                "unaff_r4": "unused_parameter_1",
                "unaff_r5": "unused_parameter_2",
                "pcVar7": "function_ptr",
                "iVar8": "temp_value",
                "uVar9": "flags",
                "UNRECOVERED_JUMPTABLE_00": "unrecovered_jumptable",
                "bVar10": "condition",
                "PTR_DAT_08006c28": "constant_pointer_1",
                "PTR_DAT_08006c2c": "constant_pointer_2",
                "PTR_DAT_08006c30": "constant_pointer_3",
                "LAB_08006bc6": "label_1",
                "LAB_08006aea": "label_2",
                "DAT_08006bdc": "constant_data"
            },
            "code": "uint32_t process_data_08006be0(uint32_t *data, int *params) {\\n\\\n        uint32_t result;\\n\\\n        int num_params;\\n\\\n        uint32_t value1;\\n\\\n        uint32_t value2;\\n\\\n        uint32_t value3;\\n\\\n        uint32_t value4;\\n\\\n        uint16_t flags;\\n\\\n        int offset;\\n\\\n        int increment;\\n\\\n        code *function_ptr;\\n\\\n        int temp_value;\\n\\\n        bool condition;\\n\\\n        \\n\\\n        num_params = params[4];\\n\\\n        if (num_params != 0) {\\n\\\n            if ((data != NULL) && (data[6] == 0)) {\\n\\\n                call_function_08006cb4();\\n\\\n            }\\n\\\n            if (params == (int *)PTR_DAT_08006c28) {\\n\\\n                params = (int *)data[1];\\n\\\n            }\\n\\\n            else if (params == (int *)PTR_DAT_08006c2c) {\\n\\\n                params = (int *)data[2];\\n\\\n            }\\n\\\n            else if (params == (int *)PTR_DAT_08006c30) {\\n\\\n                params = (int *)data[3];\\n\\\n            }\\n\\\n            flags = *(uint16_t *)(params + 3);\\n\\\n            if (flags != 0) {\\n\\\n                if ((int)(flags << 0x1c) < 0) {\\n\\\n                    num_params = params[4];\\n\\\n                    if (num_params != 0) {\\n\\\n                        value3 = flags << 0x1e;\\n\\\n                        condition = value3 == 0;\\n\\\n                        if (condition) {\\n\\\n                            value3 = 0;\\n\\\n                        }\\n\\\n                        value1 = *params;\\n\\\n                        if (!condition) {\\n\\\n                            value3 = params[5];\\n\\\n                        }\\n\\\n                        *params = num_params;\\n\\\n                        params[2] = value3;\\n\\\n                        offset = value1 - num_params;\\n\\\n                        increment = value3;\\n\\\n                        while (offset > 0) {\\n\\\n                            temp_value = (*(code *)params[10])(data,params[8],num_params,offset,0,0);\\n\\\n                            if (temp_value < 1) {\\n\\\n                                flags = *(uint16_t *)(params + 3);\\n\\\n                                goto end_function;\\n\\\n                            }\\n\\\n                            num_params += temp_value;\\n\\\n                            offset -= increment;\\n\\\n                        }\\n\\\n                    }\\n\\\n                }\\n\\\n                else {\\n\\\n                    if (((params[1] > 0) || (params[0x10] > 0)) && (params[0xb] != NULL)) {\\n\\\n                        function_ptr = (code *)params[0xb];\\n\\\n                        value1 = *data;\\n\\\n                        *data = 0;\\n\\\n                        if ((flags & 0x1000) == 0) {\\n\\\n                            temp_value = (*function_ptr)(data,params[8],flags & 0x1000,1);\\n\\\n                            if ((temp_value == -1) && (*data != 0)) {\\n\\\n                                if ((*data != 0x1d) && (*data != 0x16)) {\\n\\\n                                    flags = *(uint16_t *)(params + 3);\\n\\\n                                    goto end_function;\\n\\\n                                }\\n\\\n                                *data = value1;\\n\\\n                                goto check_flags;\\n\\\n                            }\\n\\\n                        }\\n\\\n                        else {\\n\\\n                            temp_value = params[0x15];\\n\\\n                        }\\n\\\n                        if (((int)(flags << 0x1d) < 0) && (params[0xd] != 0)) {\\n\\\n                            temp_value -= params[1];\\n\\\n                            if (params[0xd] != params + 0x11) {\\n\\\n                                call_function_080061f0(data);\\n\\\n                            }\\n\\\n                            params[0xd] = 0;\\n\\\n                            flags = *(uint16_t *)(params + 3);\\n\\\n                            goto end_function;\\n\\\n                        }\\n\\\n                        temp_value = (*(code *)params[0xb])(data,params[8],temp_value,0);\\n\\\n                        flags = *(uint16_t *)(params + 3);\\n\\\n                        if ((temp_value == -1) && ((*data > 0x1d) || (DAT_08006bdc >> (*data & 0xff) < 0))) {\\n\\\n                            goto check_flags;\\n\\\n                        }\\n\\\n                        params[1] = 0;\\n\\\n                        *params = params[4];\\n\\\n                        if ((int)(flags << 0x13) < 0) {\\n\\\n                            if ((temp_value != -1) || (*data == 0)) {\\n\\\n                                params[0x15] = temp_value;\\n\\\n                            }\\n\\\n                        }\\n\\\n                        params[0xd] = 0;\\n\\\n                        flags = *(uint16_t *)(params + 3);\\n\\\n                        goto end_function;\\n\\\n                    }\\n\\\n                }\\n\\\n            }\\n\\\n        }\\n\\\n        result = 0;\\n\\\n        goto end_function;\\n\\\n        \\n\\\n        check_flags:\\n\\\n        flags = *(uint16_t *)(params + 3);\\n\\\n        *(uint16_t *)(params + 3) = flags | 0x40;\\n\\\n        end_function:\\n\\\n        result = 0xffffffff;\\n\\\n        return result;\\n\\\n    }",
            "called": [
                "FUN_08006cb4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006be0",
            "calling": [
                "FUN_08006344"
            ],
            "imported": false,
            "current_name": "process_data_08006be0"
        },
        "FUN_080012e8": {
            "renaming": {
                "FUN_080012e8": "process_bits_and_call_function_080012e8",
                "param_1": "data",
                "param_2": "bit_data",
                "uVar1": "bit_index",
                "FUN_08005848": "call_function",
                "FUN_080012a2": "finalize_process"
            },
            "code": "void process_bits_and_call_function_080012e8(int data, int bit_data) {\n  uint bit_index;\n  for (bit_index = 0; (int)bit_index < 8; bit_index++) {\n    call_function(*(undefined *)(data + bit_index + 0xb), bit_data >> (bit_index & 0xff) & 1);\n  }\n  finalize_process(data);\n  return;\n}",
            "called": [
                "FUN_080012a2",
                "FUN_08005848"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080012e8",
            "calling": [
                "FUN_08001310"
            ],
            "imported": false,
            "current_name": "process_bits_and_call_function_080012e8"
        },
        "FUN_080058e8": {
            "renaming": {
                "FUN_080058e8": "do_nothing_080058e8"
            },
            "code": "\nvoid do_nothing_080058e8(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080058e8",
            "calling": [
                "FUN_08000bcc"
            ],
            "imported": false,
            "current_name": "do_nothing_080058e8"
        },
        "FUN_08006370": {
            "renaming": {
                "FUN_08006370": "process_data_08006370",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "data",
                "param_4": "data_length",
                "iVar1": "result",
                "puVar2": "data_end",
                "iVar3": "i",
                "FUN_08006344": "process_byte"
            },
            "code": "int process_data_08006370(undefined4 arg1, undefined4 arg2, undefined *data, int data_length) {\n  int result = 0;\n  undefined *data_end = data + data_length;\n  int i = 0;\n  while (i < data_length) {\n    if (data == data_end) {\n      return 0;\n    }\n    result = process_byte(arg1, *data, arg2, data_length, i);\n    i++;\n    data++;\n  }\n  return result;\n}",
            "called": [
                "FUN_08006344"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006370",
            "calling": [
                "FUN_08006394"
            ],
            "imported": false,
            "current_name": "process_data_08006370"
        },
        "FUN_080024f8": {
            "renaming": {
                "FUN_080024f8": "set_bit_at_index_080024f8",
                "param_1": "index",
                "DAT_08002510": "data"
            },
            "code": "void set_bit_at_index_080024f8(uint index) {\n  if (index >= 0) {\n    *(int *)(DAT_08002510 + (index >> 5) * 4) = 1 << (index & 0x1f);\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080024f8",
            "calling": [
                "FUN_08005510",
                "FUN_08005568"
            ],
            "imported": false,
            "current_name": "set_bit_at_index_080024f8"
        },
        "FUN_08001ab0": {
            "renaming": {
                "FUN_08001ab0": "update_data_08001ab0",
                "param_1": "data_ptr",
                "param_2": "data_size",
                "param_3": "data_type",
                "param_4": "data_id",
                "param_5": "data_value",
                "param_6": "data_flags",
                "param_7": "data_timestamp",
                "param_8": "data_quality",
                "param_9": "data_user_id",
                "param_10": "data_status",
                "param_11": "data_error",
                "param_12": "data_context",
                "iVar1": "result",
                "FUN_08001960": "initialize_data",
                "DAT_08001b10": "DATA_BEGIN",
                "DAT_08001b14": "DATA_END",
                "FUN_08001a66": "update_data_value",
                "FUN_08001814": "update_data_status",
                "FUN_080058e0": "get_current_time"
            },
            "code": "int update_data_08001ab0(int data_ptr, int data_size, int data_type, int data_id, int data_value, int data_flags, int data_timestamp, int data_quality, int data_user_id, int data_status, int data_error, int data_context) {\n  int result = 0;\n  *(int *)(data_ptr + 0x3c) = data_type;\n  *(int *)(data_ptr + 0x38) = data_size;\n  *(int *)(data_ptr + 0x40) = data_id;\n  *(char *)(data_ptr + 0x70) = 0;\n  initialize_data(data_ptr, data_size, 0, 0, DAT_08001b10, DAT_08001b14);\n  *(int *)(data_ptr + 0x58) = 100;\n  update_data_08001ab0_value(data_ptr, data_context);\n  result = update_data_08001ab0_status(data_ptr, data_value, data_flags, data_timestamp, data_quality, data_user_id, data_status, data_error);\n  *(int *)(data_ptr + 0x44) = result - *(int *)(data_ptr + 0x58);\n  return data_ptr;\n}",
            "called": [
                "FUN_08001a66",
                "FUN_08001814",
                "FUN_08001960",
                "FUN_080058e0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001ab0",
            "calling": [
                "FUN_08001b18"
            ],
            "imported": false,
            "current_name": "update_data_08001ab0"
        },
        "FUN_08006ac0": {
            "renaming": {
                "FUN_08006ac0": "process_data_08006ac0",
                "puVar1": "data_pointer",
                "iVar2": "index1",
                "piVar3": "array_pointer1",
                "piVar4": "array_pointer2",
                "uVar5": "data",
                "uVar6": "data_short",
                "iVar7": "index2",
                "pcVar8": "function_pointer1",
                "iVar9": "index3",
                "uVar10": "data2",
                "UNRECOVERED_JUMPTABLE_00": "jump_table1",
                "bVar11": "bool_value",
                "uVar12": "variable1"
            },
            "code": "void process_data_08006ac0(void)\n{\n  uint *data_pointer;\n  int index1;\n  int *array_pointer1;\n  int *array_pointer2;\n  uint data;\n  ushort data_short;\n  int index2;\n  code *function_pointer1;\n  int index3;\n  uint data2;\n  code *jump_table1;\n  bool bool_value;\n  undefined8 variable1;\n  initialize(6);\n  jump_table1 = (code *)0x8006acf;\n  variable1 = get_data(1);\n  array_pointer1 = (int *)((ulonglong)variable1 >> 0x20);\n  data_pointer = (uint *)variable1;\n  data_short = *(ushort *)(array_pointer1 + 3);\n  data = (uint)data_short;\n  if ((int)(data << 0x1c) < 0) {\n    index1 = array_pointer1[4];\n    if (index1 != 0) {\n      index2 = data << 0x1e;\n      bool_value = index2 != 0;\n      if (bool_value) {\n        index2 = 0;\n      }\n      index3 = *array_pointer1;\n      if (!bool_value) {\n        index2 = array_pointer1[5];\n      }\n      *array_pointer1 = index1;\n      array_pointer1[2] = index2;\n      for (index3 = index3 - index1; 0 < index3; index3 = index3 - index2) {\n        index2 = (*(code *)array_pointer1[10])(data_pointer,array_pointer1[8],index1,index3);\n        if (index2 < 1) {\n          data_short = *(ushort *)(array_pointer1 + 3);\n          goto LAB_08006bc6;\n        }\n        index1 = index1 + index2;\n      }\n    }\n  }\n  else if (((0 < array_pointer1[1]) || (0 < array_pointer1[0x10])) &&\n          (function_pointer1 = (code *)array_pointer1[0xb], function_pointer1 != (code *)0x0)) {\n    data2 = *data_pointer;\n    *data_pointer = 0;\n    if ((data_short & 0x1000) == 0) {\n      index1 = (*function_pointer1)(data_pointer,array_pointer1[8],data & 0x1000,1);\n      if ((index1 == -1) && (data_short = *data_pointer, data_short != 0)) {\n        if ((data_short != 0x1d) && (data_short != 0x16)) {\n          *(ushort *)(array_pointer1 + 3) = *(ushort *)(array_pointer1 + 3) | 0x40;\n          (*jump_table1)();\n          return;\n        }\n        *data_pointer = data2;\n        goto LAB_08006aea;\n      }\n    }\n    else {\n      index1 = array_pointer1[0x15];\n    }\n    if (((int)((uint)*(ushort *)(array_pointer1 + 3) << 0x1d) < 0) &&\n       (index1 = index1 - array_pointer1[1], array_pointer1[0xd] != 0)) {\n      index1 = index1 - array_pointer1[0x10];\n    }\n    index1 = (*(code *)array_pointer1[0xb])(data_pointer,array_pointer1[8],index1,0);\n    data_short = *(ushort *)(array_pointer1 + 3);\n    if ((index1 == -1) &&\n       ((0x1d < *data_pointer || (-1 < (int)((DAT_08006bdc >> (*data_pointer & 0xff)) << 0x1f))))) {\n      *(ushort *)(array_pointer1 + 3) = data_short | 0x40;\n      (*jump_table1)(0xffffffff);\n      return;\n    }\n    array_pointer1[1] = 0;\n    *array_pointer1 = array_pointer1[4];\n    if (((int)((uint)data_short << 0x13) < 0) && ((index1 != -1 || (*data_pointer == 0)))) {\n      array_pointer1[0x15] = index1;\n    }\n    array_pointer2 = (int *)array_pointer1[0xd];\n    *data_pointer = data2;\n    if (array_pointer2 != (int *)0x0) {\n      if (array_pointer2 != array_pointer1 + 0x11) {\n        initialize(data_pointer);\n      }\n      array_pointer1[0xd] = 0;\n      (*jump_table1)();\n      return;\n    }\n  }\nLAB_08006aea:\n  (*jump_table1)(0);\n  return;\n}",
            "called": [
                "FUN_080061f0",
                "FUN_08006f00",
                "FUN_0800573c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006ac0",
            "calling": [
                "FUN_08007090",
                "FUN_0800611c"
            ],
            "imported": false,
            "current_name": "process_data_08006ac0"
        },
        "FUN_08004198": {
            "renaming": {
                "FUN_08004198": "decode_message_08004198",
                "param_1": "message_buffer",
                "sVar1": "remaining_bytes",
                "pbVar2": "payload",
                "header": "header",
                "payload": "payload"
            },
            "code": "undefined4 decode_message_08004198(int *message_buffer)\n{\n    short remaining_bytes = *(short *)((int)message_buffer + 0x26) + -1;\n    if (*(char *)((int)message_buffer + 0x39) != '!')\n    {\n        return 2;\n    }\n    if (message_buffer[2] == 0x1000)\n    {\n        uint *header = (uint *)*message_buffer;\n        ushort *payload = (ushort *)message_buffer[8];\n        header[1] = *payload & 0x1ff;\n        message_buffer[8] += message_buffer[4] == 0 ? 2 : 1;\n    }\n    else\n    {\n        uint *header = (uint *)*message_buffer;\n        byte *payload = (byte *)message_buffer[8];\n        header[1] = (uint)*payload;\n        message_buffer[8]++;\n    }\n    if (remaining_bytes == 0)\n    {\n        uint *header = (uint *)*message_buffer;\n        header[3] &= 0xffffff7f;\n        header[3] |= 0x40;\n        return 0;\n    }\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004198",
            "calling": [
                "FUN_080046b8"
            ],
            "imported": false,
            "current_name": "decode_message_08004198"
        },
        "FUN_08001c3c": {
            "renaming": {
                "FUN_08001c3c": "check_value_08001c3c",
                "param_1": "value",
                "iVar1": "result",
                "PTR_DAT_08001c80": "divisor_ptr",
                "PTR_DAT_08001c7c": "byte_ptr",
                "FUN_08002514": "calculate_divisor",
                "0xf": "max_allowed_value",
                "FUN_08002494": "set_value",
                "PTR_DAT_08001c84": "value_ptr"
            },
            "code": "int check_value_08001c3c(uint value) {\n  uint divisor = *(uint *)PTR_DAT_08001c80 / (1000 / (byte)*PTR_DAT_08001c7c);\n  int result = FUN_08002514(divisor);\n  if (result != 0) {\n    return 1;\n  }\n  if (value > 0xf) {\n    return 1;\n  }\n  FUN_08002494(0xffffffff, value, 0);\n  *(uint *)PTR_DAT_08001c84 = value;\n  return 0;\n}",
            "called": [
                "FUN_08002494",
                "FUN_08002514"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001c3c",
            "calling": [
                "FUN_08001c88",
                "FUN_08003afa"
            ],
            "imported": false,
            "current_name": "check_value_08001c3c"
        },
        "FUN_08001c3a": {
            "renaming": {
                "FUN_08001c3a": "do_nothing_08001c3a"
            },
            "code": "\nvoid do_nothing_08001c3a(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001c3a",
            "calling": [
                "FUN_08001c88"
            ],
            "imported": false,
            "current_name": "do_nothing_08001c3a"
        },
        "FUN_08000a2c": {
            "renaming": {
                "FUN_08000a2c": "is_valid_input_08000a2c",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "int is_valid_input_08000a2c(uint input_1, int input_2, uint input_3, int input_4) {\n    int invalid_input = -1;\n    int condition_1 = ((input_2 << 1) >> 0x15 != invalid_input) || ((input_1 | input_2 << 0xc) == 0);\n    int condition_2 = ((input_4 << 1) >> 0x15 != invalid_input) || ((input_3 | input_4 << 0xc) == 0);\n    if (condition_1 && condition_2) {\n        return 0;\n    }\n    return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000a2c",
            "calling": [
                "FUN_08005da8"
            ],
            "imported": false,
            "current_name": "is_valid_input_08000a2c"
        },
        "FUN_08001366": {
            "renaming": {
                "FUN_08001366": "get_character_at_index_08001366",
                "param_1": "str_ptr",
                "param_2": "base_char",
                "param_3": "index",
                "param_4": "param_4",
                "cVar1": "character",
                "max_index": "max_index",
                "str_length": "str_length"
            },
            "code": "void get_character_at_index_08001366(int str_ptr, char base_char, uint index, undefined4 param_4)\n{\n  char character;\n  uint max_index = 3;\n  if (max_index < index) {\n    index = max_index;\n  }\n  uint str_length = (uint)*(byte *)(str_ptr + 0x17);\n  if ((int)str_length <= (int)index) {\n    index = str_length - 1 & 0xff;\n  }\n  character = *(char *)(index + str_ptr + 0x18);\n  call_another_function(str_ptr, base_char + character | 0x80, 0, character, param_4);\n  return;\n}",
            "called": [
                "FUN_08001310"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001366",
            "calling": [
                "FUN_08000cd0",
                "FUN_08000bcc"
            ],
            "imported": false,
            "current_name": "get_character_at_index_08001366"
        },
        "FUN_08005848": {
            "renaming": {
                "FUN_08005848": "process_data_08005848",
                "param_1": "index",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "data",
                "iVar1": "result",
                "uVar2": "lookup_val",
                "puVar3": "lookup_data",
                "uVar4": "byte_val"
            },
            "code": "void process_data_08005848(uint index, uint32_t value1, uint32_t value2, undefined *data)\n{\n  int result = 0;\n  uint8_t byte_val;\n  uint32_t lookup_val;\n  undefined *lookup_data = PTR_DAT_08005888;\n  if (index < 0x3c) {\n    byte_val = (uint8_t)lookup_data[index];\n  }\n  else {\n    byte_val = 0xff;\n    lookup_data = data;\n  }\n  if ((byte_val != 0xff) && (result = lookup_function(byte_val, PTR_DAT_0800588c, value2, lookup_data, data), result != 0)) {\n    lookup_val = get_lookup_value((byte_val << 0x18) >> 0x1c);\n    apply_lookup_operation(lookup_val, 1 << (byte_val & 0xf) & 0xffff, value1);\n  }\n  return;\n}",
            "called": [
                "FUN_08004c30",
                "FUN_080047f4",
                "FUN_08004848"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005848",
            "calling": [
                "FUN_080012c0",
                "FUN_080012a2",
                "FUN_0800157c",
                "FUN_08000cd0",
                "FUN_080012e8",
                "FUN_08001310",
                "FUN_08000bcc",
                "FUN_080013a4",
                "FUN_080015b2"
            ],
            "imported": false,
            "current_name": "process_data_08005848"
        },
        "FUN_08000ae8": {
            "renaming": {
                "FUN_08000ae8": "send_software_interrupt_08000ae8",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "void send_software_interrupt_08000ae8(void)\n{\n  software_interrupt(SOFTWARE_INTERRUPT_CODE);\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000ae8",
            "calling": [
                "FUN_08000aec"
            ],
            "imported": false,
            "current_name": "send_software_interrupt_08000ae8"
        },
        "FUN_08003ed8": {
            "renaming": {
                "FUN_08003ed8": "set_flag_and_call_function_if_conditions_met_08003ed8",
                "param_1": "pointer_to_pointer_to_uint",
                "puVar1": "pointer_to_uint"
            },
            "code": "void set_flag_and_call_function_if_conditions_met_08003ed8(uint **pointer_to_pointer_to_uint){\n  uint *pointer_to_uint = *pointer_to_pointer_to_uint;\n  *(undefined *)((int)pointer_to_pointer_to_uint + 0x3d) = 2;\n  if ((pointer_to_uint[8] & 0x1111) == 0) {\n    if ((pointer_to_uint[8] & 0x444) == 0) {\n      *pointer_to_uint = *pointer_to_uint & 0xfffffffe;\n    }\n  }\n  call_function(pointer_to_pointer_to_uint);\n  *(undefined *)((int)pointer_to_pointer_to_uint + 0x3d) = 0;\n  *(undefined *)(pointer_to_pointer_to_uint + 0xf) = 0;\n  return;\n}",
            "called": [
                "FUN_08004b34"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003ed8",
            "calling": [
                "FUN_08004b3c"
            ],
            "imported": false,
            "current_name": "set_flag_and_call_function_if_conditions_met_08003ed8"
        },
        "FUN_080061e0": {
            "renaming": {
                "FUN_080061e0": "fill_memory_range_with_value_080061e0",
                "param_1": "memory_start_address",
                "param_2": "value_to_fill",
                "param_3": "memory_range_size",
                "puVar1": "memory_end_address",
                "*param_1": "*memory_start_address"
            },
            "code": "void fill_memory_range_with_value_080061e0(void *memory_start_address, char value_to_fill, int memory_range_size) {\n  void *memory_end_address = memory_start_address + memory_range_size;\n  for (; memory_start_address != memory_end_address; memory_start_address++) {\n    *memory_start_address = value_to_fill;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080061e0",
            "calling": [
                "FUN_08006c88",
                "FUN_08006d14",
                "FUN_08006c40",
                "FUN_08004a4c"
            ],
            "imported": false,
            "current_name": "fill_memory_range_with_value_080061e0"
        },
        "FUN_08005604": {
            "renaming": {
                "FUN_08005604": "process_data_08005604",
                "uVar1": "random_index",
                "iVar2": "process_result",
                "iVar3": "data_index",
                "PTR_DAT_08005644": "PTR_DATA_ARRAY",
                "PTR_DAT_08005648": "PTR_DATA_ADDRESS",
                "*(int *)(PTR_DAT_0800564c + (uint)*(byte *)(iVar3 + 0x44) * 4)": "*(int32_t *)(data_index + DATA_OFFSET)",
                "*(int *)(iVar3 + 100) + (uint)*(ushort *)(iVar3 + 0x6a)": "data_offset + data_value",
                "*(uint16_t *)(iVar3 + 0x6a)": "data_value",
                "*(byte *)(iVar3 + 0x44)": "data_byte"
            },
            "code": "void process_data_08005604(void)\n{\n  uint32_t random_index = get_random_index();\n  int32_t data_index = *(int32_t *)(PTR_DAT_08005644 + random_index * 4);\n  if ((random_index < 5) && (data_index != -1)) {\n    int32_t data_offset = *(int *)(PTR_DAT_0800564c + (uint)*(byte *)(iVar3 + 0x44) * 4);\n    uint16_t data_value = *(uint16_t *)(data_index + DATA_VALUE);\n    uint8_t data_byte = *(uint8_t *)(data_index + DATA_BYTE);\n    int32_t data_address = *(int32_t *)(PTR_DAT_08005648 + data_byte * 4);\n    FUN_PROCESS_DATA(data_address, data_offset + data_value, 1);\n  }\n  return;\n}",
            "called": [
                "FUN_080055bc",
                "FUN_0800455a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005604",
            "calling": [
                "FUN_080045fe"
            ],
            "imported": false,
            "current_name": "process_data_08005604"
        },
        "FUN_08005724": {
            "renaming": {
                "FUN_08005724": "return_one_08005724"
            },
            "code": "int return_one_08005724(void)\n{\n  int result = 1;\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005724",
            "calling": [
                "FUN_08007028"
            ],
            "imported": false,
            "current_name": "return_one_08005724"
        },
        "FUN_08005728": {
            "renaming": {
                "FUN_08005728": "return_zero_08005728"
            },
            "code": "int return_zero_08005728(void) {\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005728",
            "calling": [
                "FUN_08007048"
            ],
            "imported": false,
            "current_name": "return_zero_08005728"
        },
        "FUN_0800135a": {
            "renaming": {
                "FUN_0800135a": "call_function_with_params_0800135a",
                "param_1": "param_1",
                "param_2": "N/A",
                "param_3": "N/A",
                "param_4": "param_4",
                "FUN_08001310": "call_function_with_4_params"
            },
            "code": "void call_function_with_params_0800135a(undefined4 param_1, undefined4 param_4)\n{\n  call_function_with_4_params(param_1, 1, 0, param_4, param_4);\n  return;\n}",
            "called": [
                "FUN_08001310"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800135a",
            "calling": [
                "FUN_08000cd0",
                "FUN_08000bcc",
                "FUN_080013a4"
            ],
            "imported": false,
            "current_name": "call_function_with_params_0800135a"
        },
        "FUN_08005c96": {
            "renaming": {
                "FUN_08005c96": "execute_function_if_not_null_08005c96",
                "param_1": "function_ptr",
                "param_2": "arg_count",
                "param_3": "arg1",
                "param_4": "arg2",
                "uVar1": "result"
            },
            "code": "int execute_function_if_not_null_08005c96(int *function_ptr, int arg_count, int arg1, int arg2) {\n  if (arg_count != 0) {\n    int result = allocate_memory_block(arg_count);\n    result = (**(code **)(*function_ptr + 4))(function_ptr, arg_count, result, *(code **)(*function_ptr + 4), arg2);\n    return result;\n  }\n  return 0;\n}",
            "called": [
                "FUN_08000178"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005c96",
            "calling": [
                "FUN_08000cd0",
                "FUN_08005cd4",
                "FUN_08000bcc",
                "FUN_08005da8"
            ],
            "imported": false,
            "current_name": "execute_function_if_not_null_08005c96"
        },
        "FUN_0800571a": {
            "renaming": {
                "FUN_0800571a": "set_memory_permissions_0800571a",
                "param_1": "base_address",
                "param_2": "permissions_mask"
            },
            "code": "int set_memory_permissions_0800571a(undefined4 base_address, int permissions_mask)\n{\n  *(undefined4 *)(base_address + 4) = permissions_mask;\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800571a",
            "calling": [
                "FUN_08007004"
            ],
            "imported": false,
            "current_name": "set_memory_permissions_0800571a"
        },
        "FUN_08002efc": {
            "renaming": {
                "FUN_08002efc": "process_data_08002efc",
                "param_1": "data",
                "puVar1": "ptr1"
            },
            "code": "uint32_t process_data_08002efc(uint32_t **data)\n{\n  uint32_t *ptr1;\n  ptr1 = data[11];\n  if (*(char *)((int)data + 61) == '!') {\n    if (*(uint16_t *)((int)data + 42) == 0) {\n      if (((ptr1 == (uint32_t *)0x4) || (ptr1 == (uint32_t *)0x8)) || (ptr1 == (uint32_t *)0xffff0000)) {\n        (*data)[1] &= 0xfffff8ff;\n        **data |= 0x200;\n        data[12] = (uint32_t *)0x0;\n        *(char *)((int)data + 61) = ' ';\n        if (*(char *)((int)data + 62) == '@') {\n          *(char *)((int)data + 62) = 0;\n          do_nothing_08002db0();\n        }\n        else {\n          *(char *)((int)data + 62) = 0;\n          do_nothing_08002c4e();\n        }\n      }\n      else {\n        (*data)[1] &= 0xfffff8ff;\n        data[12] = (uint32_t *)0x11;\n        *(char *)((int)data + 62) = 0;\n        *(char *)((int)data + 61) = ' ';\n        do_nothing_08002c4e();\n      }\n    }\n    else {\n      ptr1 = data[9];\n      data[9] = (uint32_t *)((int)ptr1 + 1);\n      (*data)[4] = (uint32_t)*(char *)ptr1;\n      *(uint16_t *)((int)data + 42) -= 1;\n    }\n  }\n  return 0;\n}",
            "called": [
                "FUN_08002c4e",
                "FUN_08002db0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002efc",
            "calling": [
                "FUN_080033b8"
            ],
            "imported": false,
            "current_name": "process_data_08002efc"
        },
        "FUN_0800365c": {
            "renaming": {
                "FUN_0800365c": "calculate_loop_count_0800365c",
                "param_1": "input_value",
                "local_4": "loop_count",
                "DAT_08003684": "global_constant",
                "PTR_DAT_08003680": "global_pointer"
            },
            "code": "void calculate_loop_count_0800365c(int input_value) {\n  int loop_count = input_value * (uint64_t)((uint64_t)DAT_08003684 * (uint64_t)*(uint32_t*)PTR_DAT_08003680 >> 0x29);\n  while (loop_count != 0) {\n    loop_count--;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800365c",
            "calling": [
                "FUN_08003688"
            ],
            "imported": false,
            "current_name": "calculate_loop_count_0800365c"
        },
        "FUN_080033b8": {
            "renaming": {
                "FUN_080033b8": "process_data_080033b8"
            },
            "code": "void process_data_080033b8(int *data_ptr) {\n  int data = *data_ptr;\n  uint offset1 = *(uint *)(data + 0x18);\n  uint offset2 = *(uint *)(data + 0x14);\n  uint flag = *(uint *)(data + 4);\n  \n  if ((*(char *)((int)data_ptr + 0x3e) == '\\x10') || (*(char *)((int)data_ptr + 0x3e) == '@')) {\n    if (((offset2 & 0x10001) == 0) || ((flag & 0x200) == 0)) {\n      if (((DAT_08003518 & offset2) == 0) || ((flag & 0x200) == 0)) {\n        if (((DAT_08003504 & offset2) != 0) && ((flag & 0x200) != 0)) {\n          FUN_080028de(data_ptr);\n        }\n      }\n      else {\n        FUN_080028d2(data_ptr);\n      }\n    }\n    else {\n      FUN_08002848(data_ptr);\n    }\n    if ((DAT_0800350c & offset1) == 0) {\n      if ((((DAT_0800351c & offset2) != 0) && ((flag & 0x400) != 0)) && ((DAT_08003514 & offset2) == 0)) {\n        FUN_08002f9c(data_ptr);\n        return;\n      }\n      if (((DAT_08003514 & offset2) != 0) && ((flag & 0x200) != 0)) {\n        FUN_0800306c(data_ptr);\n        return;\n      }\n    }\n    else {\n      if ((((DAT_08003510 & offset2) != 0) && ((flag & 0x400) != 0)) && ((DAT_08003514 & offset2) == 0)) {\n        FUN_08002db2(data_ptr);\n        return;\n      }\n      if (((DAT_08003514 & offset2) != 0) && ((flag & 0x200) != 0)) {\n        FUN_08002efc(data_ptr);\n        return;\n      }\n    }\n  }\n  else {\n    if (((DAT_08003504 & offset2) != 0) && ((flag & 0x200) != 0)) {\n      FUN_08002cf2();\n      return;\n    }\n    if (((DAT_08003508 & offset2) != 0) && ((flag & 0x200) != 0)) {\n      FUN_080032b4(data_ptr);\n      return;\n    }\n    if ((DAT_0800350c & offset1) == 0) {\n      if ((((DAT_0800351c & offset2) != 0) && ((flag & 0x400) != 0)) && ((DAT_08003514 & offset2) == 0)) {\n        FUN_08002ca6(data_ptr);\n        return;\n      }\n      if (((DAT_08003514 & offset2) != 0) && ((flag & 0x200) != 0)) {\n        FUN_08002ad8(data_ptr);\n      }\n    }\n    else {\n      if ((((DAT_08003510 & offset2) != 0) && ((flag & 0x400) != 0)) && ((DAT_08003514 & offset2) == 0)) {\n        FUN_08002c54(data_ptr);\n        return;\n      }\n      if (((DAT_08003514 & offset2) != 0) && ((flag & 0x200) != 0)) {\n        FUN_08002ab8(data_ptr);\n        return;\n      }\n    }\n  }\n  return;\n}",
            "called": [
                "FUN_08002db2",
                "FUN_080028d2",
                "FUN_080028de",
                "FUN_08002ca6",
                "FUN_08002ab8",
                "FUN_0800306c",
                "FUN_080032b4",
                "FUN_08002f9c",
                "FUN_08002cf2",
                "FUN_08002ad8",
                "FUN_08002efc",
                "FUN_08002848",
                "FUN_08002c54"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080033b8",
            "calling": [],
            "imported": false,
            "current_name": "process_data_080033b8"
        },
        "FUN_080069e4": {
            "renaming": {
                "FUN_080069e4": "calculate_result_080069e4",
                "param_1": "result",
                "param_2": "input",
                "uVar1": "output",
                "uVar2": "input_value_shifted",
                "iVar3": "input_value",
                "PTR_PTR_DAT_08006ab0": "ptr_ptr_data_08006ab0",
                "PTR_DAT_08006ab4": "ptr_data_08006ab4",
                "PTR_DAT_08006ab8": "ptr_data_08006ab8",
                "PTR_DAT_08006abc": "ptr_data_08006abc"
            },
            "code": "uint calculate_result_080069e4(uint *result, uint *input)\n{\n  uint output;\n  uint input_value = *(uint *)PTR_PTR_DAT_08006ab0;\n  if ((input_value != 0) && (*(uint *)(input_value + 0x18) == 0)) {\n    cleanup(input_value);\n  }\n  if (input == (uint *)PTR_DAT_08006ab4) {\n    input = *(uint **)(input_value + 4);\n  }\n  else if (input == (uint *)PTR_DAT_08006ab8) {\n    input = *(uint **)(input_value + 8);\n  }\n  else if (input == (uint *)PTR_DAT_08006abc) {\n    input = *(uint **)(input_value + 0xc);\n  }\n  uint input_value_shifted = *(ushort *)(input + 3);\n  output = (uint)input_value_shifted;\n  if (-1 < (int)(output << 0x1c)) {\n    if (-1 < (int)(output << 0x1b)) {\n      *result = 9;\n      goto LAB_08006a14;\n    }\n    if ((int)(output << 0x1d) < 0) {\n      if ((uint *)input[0xd] != (uint *)0x0) {\n        if ((uint *)input[0xd] != input + 0x11) {\n          handle_error(result);\n        }\n        input[0xd] = 0;\n      }\n      *(ushort *)(input + 3) = *(ushort *)(input + 3) & 0xffdb;\n      input[1] = 0;\n      *input = input[4];\n    }\n    *(ushort *)(input + 3) = *(ushort *)(input + 3) | 8;\n  }\n  if ((input[4] == 0) && ((*(ushort *)(input + 3) & 0x280) != 0x200)) {\n    handle_error(result, input);\n  }\n  input_value_shifted = *(ushort *)(input + 3);\n  output = input_value_shifted & 1;\n  if ((input_value_shifted & 1) == 0) {\n    if (-1 < (int)((uint)input_value_shifted << 0x1e)) {\n      output = input[5];\n    }\n    input[2] = output;\n  }\n  else {\n    input[2] = 0;\n    input[6] = -input[5];\n  }\n  if (input[4] == 0) {\n    input_value_shifted = *(ushort *)(input + 3);\n    output = (int)(short)input_value_shifted & 0x80;\n    if (output != 0) {\nLAB_08006a14:\n      *(ushort *)(input + 3) = input_value_shifted | 0x40;\n      return 0xffffffff;\n    }\n  }\n  else {\n    output = 0;\n  }\n  return output;\n}\n",
            "called": [
                "FUN_080061f0",
                "FUN_08006cb4",
                "FUN_08006e10"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080069e4",
            "calling": [
                "FUN_08006344",
                "FUN_08006394"
            ],
            "imported": false,
            "current_name": "calculate_result_080069e4"
        },
        "FUN_08002580": {
            "renaming": {
                "FUN_08002580": "do_nothing_08002580"
            },
            "code": "\nvoid do_nothing_08002580(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002580",
            "calling": [
                "FUN_08002582"
            ],
            "imported": false,
            "current_name": "do_nothing_08002580"
        },
        "FUN_08004b9e": {
            "renaming": {
                "FUN_08004b9e": "do_something_08004b9e",
                "FUN_08001cac": "call_function1",
                "FUN_08002582": "call_function2",
                "do_nothing_08004b9c": "do_nothing"
            },
            "code": "void do_something_08004b9e(void)\n{\n  call_function1();\n  call_function2();\n  do_nothing();\n  return;\n}",
            "called": [
                "FUN_08002582",
                "FUN_08004b9c",
                "FUN_08001cac"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004b9e",
            "calling": [],
            "imported": false,
            "current_name": "do_something_08004b9e"
        },
        "FUN_08004b9c": {
            "renaming": {
                "FUN_08004b9c": "do_nothing_08004b9c"
            },
            "code": "\nvoid do_nothing_08004b9c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004b9c",
            "calling": [
                "FUN_08004b9e"
            ],
            "imported": false,
            "current_name": "do_nothing_08004b9c"
        },
        "FUN_08005730": {
            "renaming": {
                "FUN_08005730": "process_data_08005730",
                "param_1": "data_start",
                "param_2": "data_end",
                "param_3": "data_size",
                "param_4": "data_offset",
                "FUN_080053d4": "call_data_processing_func"
            },
            "code": "void process_data_08005730(undefined4 data_start, undefined4 data_end, undefined4 data_size, undefined4 data_offset)\n{\n    call_data_processing_func(data_start, data_end, data_size, data_offset, data_offset);\n    return;\n}",
            "called": [
                "FUN_080053d4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005730",
            "calling": [
                "FUN_08006f5a"
            ],
            "imported": false,
            "current_name": "process_data_08005730"
        },
        "FUN_08002582": {
            "renaming": {
                "FUN_08002582": "do_nothing_and_return_08002582_08002582",
                "do_nothing_08002580": "do_nothing_08002580"
            },
            "code": "void do_nothing_and_return_08002582_08002582(void)\n{\n  do_nothing_08002580();\n  return;\n}",
            "called": [
                "FUN_08002580"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002582",
            "calling": [
                "FUN_08004b9e"
            ],
            "imported": false,
            "current_name": "do_nothing_and_return_08002582_08002582"
        },
        "FUN_08004884": {
            "renaming": {
                "FUN_08004884": "set_flag_08004884",
                "param_1": "flag_index",
                "uVar1": "return_value",
                "DAT_08004914": "flag_memory",
                "DAT_08004918": "flag_0_return_value",
                "DAT_0800491c": "flag_1_return_value",
                "DAT_08004920": "flag_2_return_value",
                "DAT_08004924": "flag_3_return_value",
                "DAT_08004928": "flag_4_return_value"
            },
            "code": "uint32_t set_flag_08004884(uint32_t flag_index)\n{\n  uint32_t *flag_ptr = (uint32_t *)(DAT_08004914 + 0x18);\n  switch(flag_index) {\n  case 0:\n    *flag_ptr |= 0x04;\n    return DAT_08004918;\n  case 1:\n    *flag_ptr |= 0x08;\n    return DAT_0800491c;\n  case 2:\n    *flag_ptr |= 0x10;\n    return DAT_08004920;\n  case 3:\n    *flag_ptr |= 0x20;\n    return DAT_08004924;\n  case 4:\n    *flag_ptr |= 0x40;\n    return DAT_08004928;\n  default:\n    return 0;\n  }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004884",
            "calling": [
                "FUN_08004974",
                "FUN_08004bb0",
                "FUN_08004f4c"
            ],
            "imported": false,
            "current_name": "set_flag_08004884"
        },
        "FUN_08001be8": {
            "renaming": {
                "FUN_08001be8": "copy_data_and_clear_08001be8",
                "iVar1": "index",
                "puVar2": "data_ptr",
                "UNRECOVERED_JUMPTABLE": "jump_table"
            },
            "code": "void copy_data_and_clear_08001be8(void)\n{\n  int index;\n  undefined4 *data_ptr;\n  code *jump_table;\n  for (index = 0; index < (DAT_08001c24 - PTR_DAT_08001c20); index += 4) {\n    *(undefined4 *)(PTR_DAT_08001c20 + index) = *(undefined4 *)(DAT_08001c1c + index);\n  }\n  for (data_ptr = (undefined4 *)PTR_DAT_08001c28; data_ptr < PTR_DAT_08001c2c; data_ptr++) {\n    *data_ptr = 0;\n  }\n  call_function_1();\n  call_function_2();\n  jump_table = (code *)0x8001c1a;\n  call_function_3(jump_table);\n  return;\n}",
            "called": [
                "FUN_08004d44",
                "FUN_08005f6c",
                "FUN_08006198"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001be8",
            "calling": [],
            "imported": false,
            "current_name": "copy_data_and_clear_08001be8"
        },
        "FUN_080061f0": {
            "renaming": {
                "FUN_080061f0": "add_to_linked_list_080061f0",
                "param_1": "new_element",
                "param_2": "element_size",
                "param_3": "error_code",
                "param_4": "unused_parameter",
                "puVar1": "current_pointer",
                "extraout_r1": "head_element_pointer",
                "ppiVar2": "previous_element_pointer",
                "ppiVar3": "current_element_pointer",
                "piVar4": "element_pointer",
                "ppiVar5": "head_element_pointer",
                "ppiVar6": "current_element_pointer",
                "ppiVar7": "current_element_pointer"
            },
            "code": "void add_to_linked_list_080061f0(int* new_element, int element_size, int error_code, int unused_parameter)\n{\n    int** current_element_pointer;\n    int** previous_element_pointer;\n    int** head_element_pointer = *(int ***)PTR_DAT_08006284;\n    if (element_size == 0) {\n        return;\n    }\n    current_element_pointer = (int **)(element_size + -4);\n    if (*(int *)(element_size + -4) < 0) {\n        current_element_pointer = (int **)((int)current_element_pointer + *(int *)(element_size + -4));\n    }\n    do_nothing_08006eac();\n    previous_element_pointer = NULL;\n    while (head_element_pointer != NULL && head_element_pointer <= current_element_pointer) {\n        previous_element_pointer = head_element_pointer;\n        head_element_pointer = (int **)head_element_pointer[1];\n    }\n    if (previous_element_pointer == NULL) {\n        *(int ***)PTR_DAT_08006284 = current_element_pointer;\n    }\n    else {\n        previous_element_pointer[1] = (int *)current_element_pointer;\n    }\n    do_nothing_08006eae(&error_code, (int *)previous_element_pointer, (int *)current_element_pointer, unused_parameter);\n    return;\n}",
            "called": [
                "FUN_08006eac",
                "FUN_08006eae"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080061f0",
            "calling": [
                "FUN_080069e4",
                "FUN_08006ac0"
            ],
            "imported": false,
            "current_name": "add_to_linked_list_080061f0"
        },
        "FUN_08002348": {
            "renaming": {
                "FUN_08002348": "check_status_and_update_08002348",
                "param_1": "status",
                "iVar1": "result",
                "FUN_080020f0": "perform_operation"
            },
            "code": "int check_status_and_update_08002348(int status)\n{\n  int result;\n  if (*(char *)(status + 0x24) == '\\x01') {\n    return 2;\n  }\n  *(undefined *)(status + 0x24) = 1;\n  result = perform_operation();\n  if (result == 0) {\n    *(uint *)(status + 0x28) = *(uint *)(status + 0x28) & 0xffffeefe | 1;\n  }\n  *(undefined *)(status + 0x24) = 0;\n  return result;\n}",
            "called": [
                "FUN_080020f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002348",
            "calling": [
                "FUN_08004a4c"
            ],
            "imported": false,
            "current_name": "check_status_and_update_08002348"
        },
        "FUN_080060d4": {
            "renaming": {
                "FUN_080060d4": "process_data_080060d4",
                "param_1": "data_ptr",
                "iVar1": "index",
                "FUN_08007090": "initialize_data",
                "FUN_08005f8c": "get_data_index"
            },
            "code": "void process_data_080060d4(int data_ptr) {\n    int index;\n    if (*(int *)(data_ptr + 8) != 0) {\n        (**(code **)(data_ptr + 0xc))();\n        return;\n    }\n    initialize_data();\n    index = get_data_index();\n    if (*(int *)(PTR_DAT_08006100 + index * 0x14 + 0xc) != 0) {\n        process_data_080060d4(data_ptr);\n    }\n    return;\n}",
            "called": [
                "FUN_08007090"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080060d4",
            "calling": [
                "FUN_080060e4"
            ],
            "imported": false,
            "current_name": "process_data_080060d4"
        },
        "FUN_08005a68": {
            "renaming": {
                "FUN_08005a68": "set_params_08005a68",
                "param_1": "obj",
                "param_2": "param_val",
                "param_3": "flags",
                "bVar1": "flag_bits",
                "iVar2": "num_bits_set",
                "pbVar3": "byte_ptr",
                "UNRECOVERED_JUMPTABLE": "jump_table"
            },
            "code": "void set_params_08005a68(int obj, int param_val, byte flags)\n{\n  uint extraout_r1;\n  byte flag_bits;\n  int num_bits_set = 0;\n  byte *byte_ptr;\n  undefined unaff_r4;\n  int unaff_r6;\n  code *jump_table;\n  \n  *(int *)(obj + 0x11c) = param_val;\n  *(byte *)(obj + 0x140) = flags;\n  flag_bits = flags & 7;\n  if (flag_bits == 4) {\n    num_bits_set = 7;\n  }\n  else if (flag_bits == 6) {\n    num_bits_set = 8;\n  }\n  else if (flag_bits == 2) {\n    num_bits_set = 6;\n  }\n  if ((flags & 0x30) == 0x30) {\n    *(int *)(obj + 0x128) = 0x600;\n    num_bits_set++;\n  }\n  else if ((flags & 0x20) == 0) {\n    *(int *)(obj + 0x128) = 0;\n  }\n  else {\n    *(int *)(obj + 0x128) = 0x400;\n    num_bits_set++;\n  }\n  if ((flags & 8) == 0) {\n    *(int *)(obj + 0x124) = 0;\n  }\n  else {\n    *(int *)(obj + 0x124) = 0x2000;\n  }\n  if (num_bits_set == 8) {\n    *(int *)(obj + 0x120) = 0;\n  }\n  else if (num_bits_set == 9) {\n    *(int *)(obj + 0x120) = 0x1000;\n  }\n  else {\n    num_bits_set = 0;\n  }\n  if (num_bits_set != 0) {\n    set_func(obj + 0xd4);\n    set_func(uRam08005b14)(obj + 0xd4);\n    return;\n  }\n  jump_table = (code *)0x8005b12;\n  num_bits_set = iRam08005b1c;\n  set_func(uRam08005b20)(299, iRam08005b1c, uRam08005b18);\n  byte_ptr = *(byte **)(extraout_r1 + unaff_r6);\n  *(undefined *)(num_bits_set + 0x1e) = unaff_r4;\n  *(undefined *)(*byte_ptr + 0x1e) = 0;\n  if (extraout_r1 < 0x3c) {\n    uRam0000012d = PTR_DAT_08005b38[extraout_r1];\n  }\n  else {\n    uRam0000012d = 0xff;\n  }\n  (*jump_table)();\n  return;\n}",
            "called": [
                "FUN_0800611c",
                "FUN_08004f4c",
                "FUN_08005510"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005a68",
            "calling": [
                "FUN_08000bcc"
            ],
            "imported": false,
            "current_name": "set_params_08005a68"
        },
        "FUN_08001814": {
            "renaming": {
                "FUN_08001814": "initialize_parameters_08001814",
                "param_1": "params",
                "param_2": "param_2",
                "param_3": "param_3",
                "param_4": "param_4",
                "param_5": "param_5",
                "param_6": "param_6",
                "param_7": "param_7",
                "param_8": "param_8",
                "param_9": "param_9",
                "iVar1": "initialization_result",
                "uVar2": "func_result",
                "uVar3": "param_9_as_int",
                "bVar4": "param_9_not_equal_to_1",
                "uVar5": "func_result_combined",
                "uVar6": "param_5_6_combined",
                "uVar7": "func_result_2_combined"
            },
            "code": "void initialize_parameters_08001814(int* params, int param_2, int param_3, int param_4, int param_5, int param_6, int param_7, int param_8, int param_9) {\n  int initialization_result = FUN_080009dc(param_3, param_4, 0, 0);\n  if (initialization_result != 0) {\n    return;\n  }\n  initialization_result = FUN_080009dc(param_5, param_6, 0, 0);\n  if (initialization_result != 0) {\n    return;\n  }\n  initialization_result = FUN_080009dc(param_7, param_8, 0, 0);\n  if (initialization_result != 0) {\n    return;\n  }\n  params[13] = param_9;\n  bool param_9_not_equal_to_1 = param_9 != 1;\n  int param_9_as_int = param_9_not_equal_to_1 ? 0 : 1;\n  *(char*)(params + 29) = (char)param_9_as_int;\n  params[0] = param_3;\n  params[1] = param_4;\n  params[2] = param_5;\n  params[3] = param_6;\n  params[4] = param_7;\n  params[5] = param_8;\n  int func_result = FUN_0800040c(params[22]);\n  func_result = FUNC_0800074c(func_result >> 32, func_result, 0, DAT_080018f4);\n  params[6] = param_3;\n  params[7] = param_4;\n  long long param_5_6_combined = ((long long)param_5 << 32) | param_6;\n  long long func_result_combined = ((long long)func_result >> 32) | (func_result << 32);\n  long long func_result_2_combined = ((long long)func_result >> 32) | (func_result << 32);\n  long long func_result_3_combined = ((long long)func_result >> 32) | (func_result << 32);\n  long long func_result_4_combined = ((long long)func_result >> 32) | (func_result << 32);\n  long long func_result_5_combined = ((long long)func_result >> 32) | (func_result << 32);\n  long long func_result_6_combined = ((long long)func_result >> 32) | (func_result << 32);\n  long long func_result_7_combined = ((long long)func_result >> 32) | (func_result << 32);\n  long long func_result_8_combined = ((long long)func_result >> 32) | (func_result << 32);\n  long long func_result_9_combined = ((long long)func_result >> 32) | (func_result << 32);\n  long long func_result_10_combined = ((long long)func_result >> 32) | (func_result << 32);\n  long long func_result_11_combined = ((long long)func_result >> 32) | (func_result << 32);\n  long long func_result_12_combined = ((long long)func_result >> 32) | (func_result << 32);\n  long long func_result_13_combined = ((long long)func_result >> 32) | (func_result << 32);\n  long long func_result_14_combined = ((long long)func_result >> 32) | (func_result << 32);\n  long long func_result_15_combined = ((long long)func_result >> 32) | (func_result << 32);\n  long long func_result_16_combined = ((long long)func_result >> 32) | (func_result << 32);\n  long long func_result_17_combined = ((long long)func_result >> 32) | (func_result << 32);\n  long long func_result_18_combined = ((long long)func_result >> 32) | (func_result << 32);\n  long long func_result_19_combined = ((long long)func_result >> 32) | (func_result << 32);\n  long long func_result_20_combined = ((long long)func_result >> 32) | (func_result << 32);\n  long long func_result_21_combined = ((long long)func_result >> 32) | (func_result << 32);\n  long long func_result_22_combined = ((long long)func_result >> 32) | (func_result << 32);\n  long long func_result_23_combined = ((long long)func_result >> 32) | (func_result << 32);\n  long long func_result_24_combined = ((long long)func_result >> 32) | (func_result << 32);\n  long long func_result_25_combined = ((long long)func_result >> 32) | (func_result << 32);\n  long long func_result_26_combined = ((long long)func_result >> 32) | (func_result << 32);\n  long long func_result_27_combined = ((long long)func_result >> 32) | (func_result << 32);\n  params[8] = (int)FUNC_080004f8(param_5_6_combined, func_result_combined, 0, 0);\n  params[10] = (int)FUNC_0800074c(param_7, param_8, func_result_2_combined, func_result_3_combined);\n  if (params[12] == 1) {\n    params[6] = (int)FUNC_08000190(0, 0, param_3, param_4);\n    params[8] = (int)FUNC_08000190(0, 0, func_result_4_combined, func_result_5_combined);\n    params[10] = (int)FUNC_08000190(0, 0, func_result_6_combined, func_result_7_combined);\n  }\n}\n",
            "called": [
                "FUN_0800040c",
                "FUN_080004f8",
                "FUN_0800074c",
                "FUN_080009dc",
                "FUN_08000190"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001814",
            "calling": [
                "FUN_08001ab0",
                "FUN_080018f8"
            ],
            "imported": false,
            "current_name": "initialize_parameters_08001814"
        },
        "FUN_08000aec": {
            "renaming": {
                "FUN_08000aec": "check_and_call_function_08000aec",
                "param_1": "arg1",
                "param_4": "arg4",
                "uVar1": "result"
            },
            "code": "int check_and_call_function_08000aec(int arg1, int arg4) {\n  int result = 0;\n  if (*(int *)PTR_DAT_08000b04 == 0) {\n    result = call_function(1, arg1, 0, 0, arg4);\n  }\n  return result;\n}",
            "called": [
                "FUN_08000ae8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000aec",
            "calling": [
                "FUN_08000bcc"
            ],
            "imported": false,
            "current_name": "check_and_call_function_08000aec"
        },
        "FUN_0800572c": {
            "renaming": {
                "FUN_0800572c": "return_zero_0800572c"
            },
            "code": "int return_zero_0800572c(void) {\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800572c",
            "calling": [
                "FUN_0800706c"
            ],
            "imported": false,
            "current_name": "return_zero_0800572c"
        },
        "FUN_08004e12": {
            "renaming": {
                "FUN_08004e12": "execute_function_if_exists_08004e12",
                "iVar1": "function_pointer_address",
                "FUN_08004df4": "get_function_pointer_address"
            },
            "code": "void execute_function_if_exists_08004e12(void)\n{\n  int function_pointer_address = get_function_pointer_address();\n  if (*(code **)(function_pointer_address + 0x48) != (code *)0x0) {\n    (**(code **)(function_pointer_address + 0x48))();\n  }\n  return;\n}",
            "called": [
                "FUN_08004df4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004e12",
            "calling": [
                "FUN_08003f18"
            ],
            "imported": false,
            "current_name": "execute_function_if_exists_08004e12"
        },
        "FUN_08000a58": {
            "renaming": {
                "FUN_08000a58": "convert_to_signed_magnitude_08000a58",
                "param_1": "dividend",
                "param_2": "divisor",
                "uVar1": "quotient",
                "iVar2": "scale_factor",
                "uVar3": "abs_divisor",
                "DAT_0804a008": "0x200000",
                "DAT_0804a00c": "0xffe00000",
                "DAT_0804a010": "-1",
                "DAT_0804a014": "0xfffffc20",
                "DAT_0804a018": "-0x3e1",
                "DAT_0804a01c": "0xb",
                "DAT_0804a020": "0x80000000",
                "DAT_0804a024": "0x7fffffff"
            },
            "code": "uint convert_to_signed_magnitude_08000a58(uint dividend, uint divisor)\n{\n  uint quotient;\n  int scale_factor;\n  uint abs_divisor;\n  \n  scale_factor = divisor * 2 + DAT_0804a008;\n  if (divisor * 2 < DAT_0804a00c) {\n    if (DAT_0804a010 < scale_factor) {\n      return 0;\n    }\n    int abs_scale_factor = -(scale_factor >> 0x15) - 0x3e1;\n    if (scale_factor >> 0x15 < DAT_0804a014 && abs_scale_factor != 0) {\n      quotient = (divisor << DAT_0804a01c | DAT_0804a020 | dividend >> 0x15) >> (abs_scale_factor & 0xff);\n      if ((divisor & DAT_0804a020) != 0) {\n        quotient = -quotient;\n      }\n      return quotient;\n    }\n  }\n  else if ((dividend | divisor << 0xc) != 0) {\n    return 0;\n  }\n  divisor = divisor & DAT_0804a020;\n  if (divisor == 0) {\n    divisor = DAT_0804a024;\n  }\n  return divisor;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000a58",
            "calling": [
                "FUN_08005da8"
            ],
            "imported": false,
            "current_name": "convert_to_signed_magnitude_08000a58"
        },
        "FUN_08001b48": {
            "renaming": {
                "FUN_08001b48": "initialize_peripherals_08001b48",
                "iVar1": "result",
                "local_54": "pwm_prescaler",
                "local_4c": "pwm_period",
                "local_44": "adc_prescaler",
                "local_40": "adc_sample_time",
                "local_3c": "unused_variable",
                "local_38": "adc_resolution",
                "local_34": "unused_variable",
                "local_30": "timer_prescaler",
                "local_20": "unused_variable",
                "local_1c": "timer_period",
                "local_14": "unused_variable",
                "local_10": "unused_variable",
                "local_c": "clock_frequency",
                "FUNC_08003688": "initialize_timer",
                "FUN_08004d40": "print_error",
                "FUN_08003ad4": "initialize_adc",
                "FUN_08003c90": "initialize_pwm",
                "FUN_08003c44": "get_adc_value",
                "FUN_08002514": "set_pwm_period",
                "FUN_08002560": "set_pwm_duty_cycle",
                "DAT_08001be0": "clock_frequency"
            },
            "code": "void initialize_peripherals_08001b48(void)\n{\n    int result;\n    uint32_t timer_prescaler[2];\n    uint32_t timer_period;\n    uint32_t adc_prescaler;\n    uint32_t adc_sample_time;\n    uint32_t pwm_prescaler[2];\n    uint32_t pwm_period;\n    uint32_t DAT_08001be0 = 380000;\n\n    timer_prescaler[0] = 2;\n    timer_prescaler[1] = 1;\n    timer_period = 16;\n    result = initialize_timer(timer_prescaler, timer_period);\n    if (result != 0)\n    {\n        print_error(\"Could not initialize timer.\\n\", 0x88);\n    }\n\n    adc_prescaler = 15;\n    adc_sample_time = 2;\n    result = initialize_adc(adc_prescaler, adc_sample_time, 0x400);\n    if (result != 0)\n    {\n        print_error(\"Could not initialize ADC.\\n\", 0x95);\n    }\n\n    pwm_prescaler[0] = 2;\n    pwm_prescaler[1] = 0x8000;\n    result = initialize_pwm(pwm_prescaler);\n    if (result != 0)\n    {\n        print_error(\"Could not initialize PWM.\\n\", 0x9c);\n    }\n\n    uint32_t clock_period = get_timer_period();\n    uint32_t pwm_period = (uint32_t)((uint64_t)clock_period * get_adc_value() >> 0x26);\n    set_pwm_period(pwm_period);\n    set_pwm_duty_cycle(100);\n}",
            "called": [
                "FUN_08003688",
                "FUN_08003ad4",
                "FUN_08002560",
                "FUN_08002494",
                "FUN_08004d40",
                "FUN_08002514",
                "FUN_08003c90",
                "FUN_08003c44"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001b48",
            "calling": [
                "FUN_08004c52"
            ],
            "imported": false,
            "current_name": "initialize_peripherals_08001b48"
        },
        "FUN_08004092": {
            "renaming": {
                "FUN_08004092": "set_bit_in_uint_at_index_08004092",
                "param_1": "ptr_param_1",
                "param_2": "param_2",
                "param_3": "param_3",
                "*(uint *)(param_1 + 0x20)": "*uint_ptr",
                "~(1 << (param_2 & 0xff))": "mask",
                "param_3 << (param_2 & 0xff)": "value"
            },
            "code": "void set_bit_in_uint_at_index_08004092(int ptr_param_1, uint param_2, int param_3) {\n    uint* uint_ptr = (uint *)(ptr_param_1 + 0x20);\n    uint mask = ~(1 << (param_2 & 0xff));\n    uint value = param_3 << (param_2 & 0xff);\n    *uint_ptr = (*uint_ptr & mask) | value;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004092",
            "calling": [
                "FUN_080040b0"
            ],
            "imported": false,
            "current_name": "set_bit_in_uint_at_index_08004092"
        },
        "FUN_08005cd4": {
            "renaming": {
                "FUN_08005cd4": "sum_of_functions_08005cd4",
                "param_1": "param",
                "iVar1": "first_value",
                "iVar2": "second_value",
                "FUN_08005c96": "get_first_value",
                "FUN_08005cc0": "get_second_value"
            },
            "code": "int sum_of_functions_08005cd4(int param){\n  int first_value = get_first_value();\n  int second_value = get_second_value(param);\n  return second_value + first_value;\n}",
            "called": [
                "FUN_08005cc0",
                "FUN_08005c96"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005cd4",
            "calling": [
                "FUN_08000cd0"
            ],
            "imported": false,
            "current_name": "sum_of_functions_08005cd4"
        },
        "FUN_08005bb0": {
            "renaming": {
                "FUN_08005bb0": "process_input_08005bb0",
                "param_1": "input_value",
                "param_2": "max_value",
                "FUN_08005b54": "process_data"
            },
            "code": "void process_input_08005bb0(int input_value, int max_value, undefined4 param_3, undefined4 param_4)\n{\n  if (input_value != 1) {\n    return;\n  }\n  if (max_value == 0xffff) {\n    process_data(PTR_DAT_08005bd0,DAT_08005bcc,param_3,0xffff,param_4);\n  }\n  return;\n}",
            "called": [
                "FUN_08005b54"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005bb0",
            "calling": [],
            "imported": false,
            "current_name": "process_input_08005bb0"
        },
        "FUN_080014ba": {
            "renaming": {
                "FUN_080014ba": "assign_values_to_memory_080014ba",
                "param_1": "memory_location",
                "param_2": "zero_flag",
                "param_3": "initial_value",
                "param_4": "value_1",
                "param_5": "value_2",
                "param_6": "value_3",
                "param_7": "value_4",
                "param_8": "value_5",
                "param_9": "value_6",
                "param_10": "value_7",
                "param_11": "value_8",
                "param_12": "value_9",
                "param_13": "value_10"
            },
            "code": "void assign_values_to_memory_080014ba(int memory_location, int zero_flag, undefined initial_value, undefined4 value_1, undefined value_2, undefined value_3, undefined value_4, undefined value_5, undefined value_6, undefined value_7, undefined value_8, undefined value_9, undefined value_10){\n  *(undefined *)(memory_location + 8) = initial_value;\n  *(char *)(memory_location + 9) = (char)value_1;\n  *(undefined *)(memory_location + 10) = value_2;\n  *(undefined *)(memory_location + 0xb) = value_3;\n  *(undefined *)(memory_location + 0xc) = value_4;\n  *(undefined *)(memory_location + 0xd) = value_5;\n  *(undefined *)(memory_location + 0xe) = value_6;\n  *(undefined *)(memory_location + 0xf) = value_7;\n  *(undefined *)(memory_location + 0x10) = value_8;\n  *(undefined *)(memory_location + 0x11) = value_9;\n  *(undefined *)(memory_location + 0x12) = value_10;\n  if (zero_flag == 0) {\n    *(undefined *)(memory_location + 0x13) = 0x10;\n  }\n  else {\n    *(undefined *)(memory_location + 0x13) = 0;\n  }\n  assign_values_to_memory_080014ba_2(memory_location,0x10,1,0,value_1);\n  return;\n}",
            "called": [
                "FUN_080013a4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080014ba",
            "calling": [
                "FUN_08001510"
            ],
            "imported": false,
            "current_name": "assign_values_to_memory_080014ba"
        },
        "FUN_08003c90": {
            "renaming": {
                "FUN_08003c90": "set_flags_08003c90",
                "param_1": "flags",
                "puVar1": "flag_1_ptr",
                "iVar2": "flag_2_data",
                "iVar3": "current_time",
                "uVar4": "flag_3_value",
                "bVar5": "is_flag_2_unset",
                "DAT_08003d98": "PTR_DAT_08003d98",
                "DAT_08003d9c": "PTR_DAT_08003d9c",
                "DAT_08003da0": "PTR_DAT_08003da0"
            },
            "code": "int set_flags_08003c90(uint *flags) {\n  bool is_flag_1_set = (*flags & 1) != 0;\n  if (is_flag_1_set) {\n    bool is_flag_2_unset = (*(uint *)(DAT_08003d98 + 0x1c) & 0x10000000) == 0;\n    if (is_flag_2_unset) {\n      *(uint *)(DAT_08003d98 + 0x1c) = *(uint *)(DAT_08003d98 + 0x1c) | 0x10000000;\n    }\n    if ((*DAT_08003d9c & 0x100) == 0) {\n      *DAT_08003d9c = *DAT_08003d9c | 0x100;\n      int start_time = get_current_time();\n      while ((*DAT_08003d9c & 0x100) == 0) {\n        int current_time = get_current_time();\n        if (100 < (uint)(current_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n    uint *flag_3_ptr = DAT_08003da0;\n    int flag_3_data = DAT_08003d98;\n    uint flag_3_value = *(uint *)(DAT_08003d98 + 0x20) & 0x300;\n    if ((flag_3_value != 0) && (flag_3_value != (flags[1] & 0x300))) {\n      flag_3_value = *(uint *)(DAT_08003d98 + 0x20);\n      *flag_3_ptr = 1;\n      *(uint *)(flag_3_data + 0x24) = 0;\n      *(uint *)(flag_3_data + 0x20) = flag_3_value & 0xfffffcff;\n      if ((flag_3_value & 1) != 0) {\n        int start_time = get_current_time();\n        while ((*(uint *)(DAT_08003d98 + 0x20) & 2) == 0) {\n          int current_time = get_current_time();\n          if (5000 < (uint)(current_time - start_time)) {\n            return 3;\n          }\n        }\n      }\n    }\n    int flag_3_data = DAT_08003d98;\n    *(uint *)(DAT_08003d98 + 0x20) = *(uint *)(DAT_08003d98 + 0x20) & 0xfffffcff | flags[1];\n    if (is_flag_2_unset) {\n      *(uint *)(flag_3_data + 0x1c) = *(uint *)(flag_3_data + 0x1c) & 0xefffffff;\n    }\n  }\n  if ((*flags & 2) != 0) {\n    *(uint *)(DAT_08003d98 + 4) = *(uint *)(DAT_08003d98 + 4) & 0xffff3fff | flags[2];\n  }\n  if ((*flags & 0x10) != 0) {\n    *(uint *)(DAT_08003d98 + 4) = *(uint *)(DAT_08003d98 + 4) & 0xffbfffff | flags[3];\n  }\n  return 0;\n}",
            "called": [
                "FUN_08001cc4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003c90",
            "calling": [
                "FUN_08001b48"
            ],
            "imported": false,
            "current_name": "set_flags_08003c90"
        },
        "FUN_08002514": {
            "renaming": {
                "FUN_08002514": "validate_input_08002514",
                "param_1": "input_value",
                "puVar1": "ptr_value"
            },
            "code": "int validate_input_08002514(unsigned int input_value) {\n    unsigned int *ptr_value = DAT_08002538;\n    if (input_value - 1U < 0x1000000) {\n        ptr_value[1] = input_value - 1U;\n        *(unsigned char *)(DAT_0800253c + 0x23) = 0xf0;\n        ptr_value[2] = 0;\n        *ptr_value = 7;\n        return 0;\n    }\n    return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002514",
            "calling": [
                "FUN_08001b48",
                "FUN_08001c3c"
            ],
            "imported": false,
            "current_name": "validate_input_08002514"
        },
        "FUN_08005c1c": {
            "renaming": {
                "FUN_08005c1c": "set_parameters_08005c1c",
                "param_1": "ptr",
                "param_2": "param1",
                "param_3": "param2",
                "param_4": "param3",
                "param_5": "param4"
            },
            "code": "void set_parameters_08005c1c(int *ptr, int param1, int param2, int param3, int param4) {\n  *ptr = PTR_PTR_LAB_08005be2_1_08005c34;\n  *(int *)(ptr + 1) = param1;\n  *(int *)((int)ptr + 5) = param2;\n  *(int *)((int)ptr + 6) = param3;\n  *(int *)((int)ptr + 7) = param4;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005c1c",
            "calling": [
                "FUN_08005c38"
            ],
            "imported": false,
            "current_name": "set_parameters_08005c1c"
        },
        "FUN_08006dc8": {
            "renaming": {
                "FUN_08006dc8": "check_file_permissions_and_type_08006dc8",
                "param_1": "file_path",
                "param_2": "file_path_offset",
                "param_3": "error_code",
                "param_4": "permissions",
                "iVar1": "result",
                "uVar2": "return_value",
                "auStack_4c": "file_type",
                "local_48": "temp"
            },
            "code": "int check_file_permissions_and_type_08006dc8(void *file_path, int file_path_offset, int *error_code, uint *permissions) {\n  int file_type_offset = 0xe;\n  int file_type = *(short *)(file_path_offset + file_type_offset);\n  int result = 0;\n  if (file_type >= 0) {\n    result = check_file_permissions(file_path, file_type, error_code);\n    if (result >= 0) {\n      *permissions = (uint)((*error_code & 0xf000) == 0x2000);\n      return 0x400;\n    }\n  }\n  if ((int)((uint)*(ushort *)(file_path_offset + 0xc) << 0x18) < 0) {\n    *error_code = 0x40;\n  }\n  *permissions = 0;\n  return 0;\n}",
            "called": [
                "FUN_08007004"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006dc8",
            "calling": [
                "FUN_08006e10"
            ],
            "imported": false,
            "current_name": "check_file_permissions_and_type_08006dc8"
        },
        "FUN_0800412c": {
            "renaming": {
                "FUN_0800412c": "disable_flags_if_zero_0800412c",
                "param_1": "data",
                "param_2": "flag",
                "puVar1": "ptr_data",
                "DAT_08004a68": "flag_mask1",
                "DAT_08004a6c": "flag_mask2"
            },
            "code": "uint32_t disable_flags_if_zero_0800412c(uint32_t **data, uint32_t flag)\n{\n  uint32_t *ptr_data = *data;\n  uint32_t DAT_08004a68 = 0x1111;\n  uint32_t DAT_08004a6c = 0x444;\n  \n  FUN_08004110(*data, flag, 0);\n  \n  if (((ptr_data[8] & DAT_08004a68) == 0) && ((ptr_data[8] & DAT_08004a6c) == 0)) {\n    ptr_data[0x11] &= 0xffff7fff;\n  }\n  \n  ptr_data = *data;\n  if (((ptr_data[8] & DAT_08004a68) == 0) && ((ptr_data[8] & DAT_08004a6c) == 0)) {\n    *ptr_data &= 0xfffffffe;\n  }\n  \n  return 0;\n}",
            "called": [
                "FUN_08004110"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800412c",
            "calling": [
                "FUN_08004b3c"
            ],
            "imported": false,
            "current_name": "disable_flags_if_zero_0800412c"
        },
        "FUN_08007090": {
            "renaming": {
                "FUN_08007090": "set_pointers_to_one_08007090",
                "UNRECOVERED_JUMPTABLE": "jump_table",
                "PTR_DAT_0800712c": "dat_pointer_1",
                "PTR_DAT_08007130": "dat_pointer_2",
                "PTR_DAT_08007134": "dat_pointer_3",
                "PTR_DAT_08007138": "dat_pointer_4",
                "PTR_DAT_0800713c": "dat_pointer_5",
                "PTR_DAT_08007140": "dat_pointer_6",
                "PTR_DAT_08007144": "dat_pointer_7",
                "PTR_DAT_08007148": "dat_pointer_8",
                "PTR_DAT_0800714c": "dat_pointer_9",
                "PTR_DAT_08007150": "dat_pointer_10",
                "PTR_DAT_08007154": "dat_pointer_11",
                "PTR_DAT_08007158": "dat_pointer_12",
                "FUN_08006ac0": "unspecified_function",
                "*(int *)PTR_DAT_0800712c": "value_at_dat_pointer_1",
                "*(int *)PTR_DAT_08007130": "value_at_dat_pointer_2",
                "*(int *)PTR_DAT_08007134": "value_at_dat_pointer_3",
                "*(int *)PTR_DAT_08007138": "value_at_dat_pointer_4",
                "*(int *)PTR_DAT_0800713c": "value_at_dat_pointer_5",
                "*(int *)PTR_DAT_08007140": "value_at_dat_pointer_6",
                "*(int *)PTR_DAT_08007144": "value_at_dat_pointer_7",
                "*(int *)PTR_DAT_08007148": "value_at_dat_pointer_8",
                "*(int *)PTR_DAT_0800714c": "value_at_dat_pointer_9",
                "*(int *)PTR_DAT_08007150": "value_at_dat_pointer_10",
                "*(int *)PTR_DAT_08007154": "value_at_dat_pointer_11",
                "*(int *)PTR_DAT_08007158": "value_at_dat_pointer_12"
            },
            "code": "void set_pointers_to_one_08007090(void)\n{\n  void (*jump_table)(void);\n  jump_table = set_pointers_to_one_08007090;\n  set_dat_pointer_to_one(PTR_DAT_0800712c);\n  set_dat_pointer_to_one(PTR_DAT_08007130);\n  set_dat_pointer_to_one(PTR_DAT_08007134);\n  set_dat_pointer_to_one(PTR_DAT_08007138);\n  set_dat_pointer_to_one(PTR_DAT_0800713c);\n  set_dat_pointer_to_one(PTR_DAT_08007140);\n  set_dat_pointer_to_one(PTR_DAT_08007144);\n  set_dat_pointer_to_one(PTR_DAT_08007148);\n  set_dat_pointer_to_one(PTR_DAT_0800714c);\n  set_dat_pointer_to_one(PTR_DAT_08007150);\n  set_dat_pointer_to_one(PTR_DAT_08007154);\n  set_dat_pointer_to_one(PTR_DAT_08007158);\n  jump_table();\n}\n\nvoid set_dat_pointer_to_one(int *dat_pointer)\n{\n  if (*dat_pointer < 0) {\n    *dat_pointer = 1;\n  }\n}\n",
            "called": [
                "FUN_08006ac0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007090",
            "calling": [
                "FUN_080060d4"
            ],
            "imported": false,
            "current_name": "set_pointers_to_one_08007090"
        },
        "FUN_0800492c": {
            "renaming": {
                "FUN_0800492c": "calculate_shifted_value_0800492c",
                "param_1": "input_val",
                "param_2": "unused_param_1",
                "param_3": "unused_param_2",
                "param_4": "unused_param_3",
                "iVar1": "shifted_val",
                "uVar2": "shifted_right_val"
            },
            "code": "uint calculate_shifted_value_0800492c(uint input_val){\n  int shifted_val = call_other_function(input_val, PTR_DAT_08004944, 0, 0, 0);\n  uint shifted_right_val = (uint)(shifted_val << 12) >> 27;\n  if (shifted_right_val > 0x10){\n    shifted_right_val = 0;\n  }\n  return shifted_right_val;\n}",
            "called": [
                "FUN_08004cce"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800492c",
            "calling": [
                "FUN_08004a4c"
            ],
            "imported": false,
            "current_name": "calculate_shifted_value_0800492c"
        },
        "FUN_0800480a": {
            "renaming": {
                "FUN_0800480a": "set_bit_at_index_0800480a",
                "param_1": "index",
                "param_2": "array",
                "uVar1": "array_index",
                "PTR_": "array_ptr",
                "DAT_": "bit_index"
            },
            "code": "void set_bit_at_index_0800480a(uint index, int *array) {\n    uint array_index = (index << 0x18) >> 0x1c;\n    uint *PTR_ = (uint *)(array + array_index * 4);\n    uint DAT_ = index & 0xf;\n    *PTR_ |= 1 << DAT_;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800480a",
            "calling": [
                "FUN_080057b4"
            ],
            "imported": false,
            "current_name": "set_bit_at_index_0800480a"
        },
        "FUN_080015f8": {
            "renaming": {
                "FUN_080015f8": "get_result_080015f8",
                "param_1": "param_1",
                "param_2": "param_2",
                "param_3": "param_3",
                "param_4": "param_4",
                "uVar1": "value",
                "uVar2": "bit_flag",
                "uVar3": "shifted_value",
                "uVar4": "result",
                "DAT_0800169c": "DAT_0800169c",
                "DAT_08001698": "DAT_08001698",
                "DAT_080016a0": "DAT_080016a0",
                "DAT_080016a4": "DAT_080016a4",
                "DAT_080016a8": "DAT_080016a8",
                "DAT_080016ac": "DAT_080016ac",
                "DAT_080016b0": "DAT_080016b0",
                "func_1": "get_value",
                "func_2": "func_2",
                "func_3": "func_3",
                "func_4": "func_4",
                "CONCAT44": "CONCAT44"
            },
            "code": "uint32_t get_result_080015f8(uint32_t param_1, int param_2, uint32_t param_3, uint32_t param_4)\n{\n  uint32_t result = 0;\n  uint32_t uVar1 = get_value();\n  uint32_t uVar2 = uVar1 & 0x10000;\n  uint32_t uVar3 = (uVar1 >> 0x12) & 0x1fff;\n  uint64_t uVar4;\n  if (uVar2 == 0) {\n    uVar4 = func_1(uVar3);\n    if ((uVar1 & 0x2000) != 0) {\n      uint32_t uVar5 = ~uVar3 & 0x1fff;\n      uVar4 = func_2(uVar5, param_4);\n      uVar4 = (uVar4 & 0xffffffff) | ((uint64_t)((int)(uVar4 >> 0x20) + 0x80000000) << 0x20);\n    }\n    result = func_3((uint32_t)uVar4, (uint32_t)(uVar4 >> 0x20), param_3);\n    if (param_2 == 1) {\n      result = func_3((uint32_t)result, (uint32_t)(result >> 0x20), DAT_080016a8);\n      result = func_4((uint32_t)result, (uint32_t)(result >> 0x20), DAT_080016ac);\n      result = func_2((uint32_t)result, DAT_080016b0);\n      return result;\n    }\n  }\n  else {\n    uVar1 &= 7;\n    if (uVar1 == 2) {\n      return CONCAT44(DAT_0800168c, DAT_08001688);\n    }\n    if (uVar1 == 4) {\n      return CONCAT44(DAT_08001694, DAT_08001690);\n    }\n    if (uVar1 == 1) {\n      return result;\n    }\n  }\n  return result;\n}",
            "called": [
                "FUN_0800040c",
                "FUN_08000194",
                "FUN_080004f8",
                "FUN_0800074c",
                "FUN_080015b2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080015f8",
            "calling": [
                "FUN_08000cd0"
            ],
            "imported": false,
            "current_name": "get_result_080015f8"
        },
        "FUN_08005c38": {
            "renaming": {
                "FUN_08005c38": "process_input_08005c38",
                "param_1": "input_1",
                "param_2": "input_2",
                "FUN_08005c1c": "execute_function"
            },
            "code": "void process_input_08005c38(int input_1, int input_2) {\n    if (input_1 == 1 && input_2 == 0xffff) {\n        execute_function(PTR_DAT_08005c60, 0, 0, 0, 0);\n        return;\n    }\n    return;\n}",
            "called": [
                "FUN_08005c1c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005c38",
            "calling": [],
            "imported": false,
            "current_name": "process_input_08005c38"
        },
        "FUN_08005f8c": {
            "renaming": {
                "FUN_08005f8c": "find_most_significant_bit_08005f8c",
                "param_1": "number",
                "cVar1": "bit_position"
            },
            "code": "char find_most_significant_bit_08005f8c(uint number) {\n  char bit_position = 0;\n  while (number != 1) {\n    number = number >> 1;\n    bit_position++;\n  }\n  return bit_position;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005f8c",
            "calling": [
                "FUN_080060e4"
            ],
            "imported": false,
            "current_name": "find_most_significant_bit_08005f8c"
        },
        "FUN_08006f5a": {
            "renaming": {
                "FUN_08006f5a": "process_data_08006f5a",
                "param_1": "result",
                "param_2": "data_ptr",
                "param_3": "arg1",
                "param_4": "arg2",
                "sVar1": "data",
                "puVar2": "ptr",
                "iVar3": "ret",
                "unaff_r4": "unused1",
                "unaff_r5": "unused2",
                "in_lr": "unused3",
                "PTR_DAT_08006fe0": "PTR_RESULT"
            },
            "code": "void process_data_08006f5a(int *result, int data_ptr, int arg1, int arg2) {\n  short data = *(short *)(data_ptr + 0xe);\n  uint16_t flag = *(uint16_t *)(data_ptr + 0xc);\n\n  if ((flag << 0x17) < 0) {\n    FUN_08007048(result, data, 0, 2);\n  }\n  flag &= 0xefff;\n  int ret = FUN_08005730(data, arg1, arg2, arg2, arg2, 0, 0, 0);\n  if ((ret == -1) && (*(int *)PTR_DAT_08006fe0 != 0)) {\n    *result = *(int *)PTR_DAT_08006fe0;\n  }\n  return;\n}",
            "called": [
                "FUN_08007048",
                "FUN_08005730"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006f5a",
            "calling": [],
            "imported": false,
            "current_name": "process_data_08006f5a"
        },
        "FUN_08000b08": {
            "renaming": {
                "FUN_08000b08": "process_inputs_08000b08",
                "param_1": "num_inputs",
                "param_2": "input_value",
                "FUN_08001b18": "initialize_data",
                "PTR_DAT_08000b9c": "data_ptr1",
                "PTR_DAT_08000b98": "data_ptr2",
                "PTR_DAT_08000b94": "data_ptr3",
                "PTR_DAT_08000b90": "data_ptr4",
                "PTR_DAT_08000b8c": "data_ptr5",
                "PTR_DAT_08000b88": "data_ptr6",
                "PTR_DAT_08000b84": "data_ptr7",
                "FUN_08001510": "perform_task1",
                "PTR_DAT_08000bb8": "task1_ptr1",
                "PTR_DAT_08000ba0": "task1_ptr2",
                "PTR_DAT_08000ba4": "task1_ptr3",
                "PTR_DAT_08000ba8": "task1_ptr4",
                "PTR_DAT_08000bac": "task1_ptr5",
                "PTR_DAT_08000bb0": "task1_ptr6",
                "PTR_DAT_08000bb4": "task1_ptr7",
                "FUN_0800157c": "perform_task2",
                "PTR_DAT_08000bc8": "task2_ptr1",
                "PTR_DAT_08000bc4": "task2_ptr2",
                "PTR_DAT_08000bc0": "task2_ptr3",
                "PTR_DAT_08000bbc": "task2_ptr4"
            },
            "code": "void process_inputs_08000b08(int num_inputs, int input_value)\n{\n  if ((num_inputs == 1) && (input_value == 0xffff)) {\n    initialize_data(PTR_DAT_08000b9c,PTR_DAT_08000b98,PTR_DAT_08000b94,PTR_DAT_08000b90,\n                 *(undefined4 *)PTR_DAT_08000b8c,*(undefined4 *)(PTR_DAT_08000b8c + 4),\n                 *(undefined4 *)PTR_DAT_08000b88,*(undefined4 *)(PTR_DAT_08000b88 + 4),\n                 *(undefined4 *)PTR_DAT_08000b84,*(undefined4 *)(PTR_DAT_08000b84 + 4),0);\n    perform_task1(PTR_DAT_08000bb8,*PTR_DAT_08000ba0,*PTR_DAT_08000ba4,*PTR_DAT_08000ba8,\n                 *PTR_DAT_08000bac,*PTR_DAT_08000bb0,*PTR_DAT_08000bb4);\n    perform_task2(PTR_DAT_08000bc8,*PTR_DAT_08000bc4,*PTR_DAT_08000bc0,*PTR_DAT_08000bbc);\n    return;\n  }\n  return;\n}",
            "called": [
                "FUN_0800157c",
                "FUN_08001510",
                "FUN_08001b18"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000b08",
            "calling": [],
            "imported": false,
            "current_name": "process_inputs_08000b08"
        },
        "FUN_08006cb4": {
            "renaming": {
                "FUN_08006cb4": "initialize_parameters_08006cb4",
                "param_1": "parameter_1",
                "uVar1": "uVar",
                "iVar2": "iVar",
                "bVar3": "is_param_1_equal_to_iVar"
            },
            "code": "void initialize_parameters_08006cb4(int parameter_1)\n{\n    if (*(int *)(parameter_1 + 0x18) == 0) {\n        *(undefined4 *)(parameter_1 + 0x48) = 0;\n        *(undefined4 *)(parameter_1 + 0x4c) = 0;\n        *(undefined4 *)(parameter_1 + 0x50) = 0;\n        int iVar = *(int *)PTR_PTR_DAT_08006d0c;\n        *(undefined **)(parameter_1 + 0x28) = PTR_LAB_08006c34_1_08006d10;\n        bool is_param_1_equal_to_iVar = parameter_1 == iVar;\n        if (is_param_1_equal_to_iVar) {\n            iVar = 1;\n        }\n        if (is_param_1_equal_to_iVar) {\n            *(int *)(parameter_1 + 0x18) = iVar;\n        }\n        undefined4 uVar = FUN_08006d14();\n        *(undefined4 *)(parameter_1 + 4) = uVar;\n        uVar = FUN_08006d14(parameter_1);\n        *(undefined4 *)(parameter_1 + 8) = uVar;\n        uVar = FUN_08006d14(parameter_1);\n        *(undefined4 *)(parameter_1 + 0xc) = uVar;\n        FUN_08006c40(*(undefined4 *)(parameter_1 + 4),4,0);\n        FUN_08006c40(*(undefined4 *)(parameter_1 + 8),9,1);\n        FUN_08006c40(*(undefined4 *)(parameter_1 + 0xc),0x12,2);\n        *(undefined4 *)(parameter_1 + 0x18) = 1;\n    }\n    return;\n}",
            "called": [
                "FUN_08006d14",
                "FUN_08006c40"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006cb4",
            "calling": [
                "FUN_08006be0",
                "FUN_08006d14",
                "FUN_080069e4",
                "FUN_08006344",
                "FUN_080068f0",
                "FUN_08006394"
            ],
            "imported": false,
            "current_name": "initialize_parameters_08006cb4"
        },
        "FUN_08004c5e": {
            "renaming": {
                "FUN_08004c5e": "find_param_in_array_08004c5e",
                "param_1": "param_value",
                "param_2": "param_array"
            },
            "code": "int find_param_in_array_08004c5e(int param_value, char *param_array)\n{\n    while (*param_array != -1)\n    {\n        if (*param_array == param_value)\n        {\n            return *(int *)(param_array + 4);\n        }\n        param_array += 12;\n    }\n    return 0;\n}",
            "called": [
                "FUN_08004c5e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004c5e",
            "calling": [
                "FUN_08004c5e",
                "FUN_08004c78"
            ],
            "imported": false,
            "current_name": "find_param_in_array_08004c5e"
        },
        "FUN_08004b3c": {
            "renaming": {
                "FUN_08004b3c": "process_data_08004b3c",
                "param_1": "data_to_process",
                "local_50": "data_array",
                "FUN_08004c78": "get_data",
                "PTR_DAT_08004b90": "DATA_PTR_08004b90",
                "FUN_08004948": "check_status",
                "FUN_08004cce": "get_flags",
                "FUN_080040b0": "process_data_type1",
                "FUN_0800412c": "process_data_type2",
                "FUN_08003ed8": "cleanup_data"
            },
            "code": "void process_data_08004b3c(int data_to_process)\n{\n  int status;\n  uint flags;\n  int data_array[17];\n  \n  data_array[0] = get_data(data_to_process, PTR_DAT_08004b90);\n  if ((data_array[0] != 0) && (((status = check_status(data_to_process), status == 0 || (status == 4)) || (status == 8)) || ((status == 0xc || (status == 0x18))))){\n    flags = get_flags(data_to_process, PTR_DAT_08004b90);\n    if ((flags & 0x100000) == 0) {\n      process_data_08004b3c_type1(data_array, status);\n    }\n    else {\n      process_data_08004b3c_type2(data_array, status);\n    }\n    cleanup_data(data_array);\n  }\n  return;\n}\n",
            "called": [
                "FUN_08004948",
                "FUN_0800412c",
                "FUN_080040b0",
                "FUN_08004cce",
                "FUN_08003ed8",
                "FUN_08004c78"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004b3c",
            "calling": [
                "FUN_080057b4"
            ],
            "imported": false,
            "current_name": "process_data_08004b3c"
        },
        "FUN_08001550": {
            "renaming": {
                "FUN_08001550": "process_data_08001550",
                "*param_1": "*data_buffer",
                "param_2": "data_length",
                "param_3": "data_offset",
                "iVar1": "i",
                "FUN_08001310": "<unchanged>"
            },
            "code": "void process_data_08001550(uint8_t *data_buffer, uint data_length, int data_offset) {\n  uint8_t *function_ptr = data_buffer;\n  uint8_t function_code = (data_length & 7) << 3 | 0x40;\n  uint8_t i;\n  // Call function pointed to by function_ptr 8 times with each byte of data starting from data_offset\n  for (i = 0; i < 8; i++) {\n    (**(code **)function_ptr)(function_ptr, *(uint8_t *)(data_offset + i));\n  }\n  return;\n}",
            "called": [
                "FUN_08001310"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001550",
            "calling": [
                "FUN_08000bcc"
            ],
            "imported": false,
            "current_name": "process_data_08001550"
        },
        "FUN_08000cd0": {
            "renaming": {
                "FUN_08000cd0": "FUNC_08000cd0"
            },
            "code": "\nvoid FUNC_08000cd0(void)\n\n{\n  char cVar1;\n  undefined *puVar2;\n  undefined *puVar3;\n  undefined *puVar4;\n  uint uVar5;\n  undefined4 uVar6;\n  int iVar7;\n  undefined4 extraout_r1;\n  undefined4 extraout_r1_00;\n  undefined4 extraout_r1_01;\n  undefined4 uVar8;\n  undefined8 uVar9;\n  \n  uVar5 = FUN_080058e0();\n  if (*(uint *)PTR_DAT_08000f50 < uVar5) {\n    *(uint *)PTR_DAT_08000f50 = *(uint *)PTR_DAT_08000f50 + 1000;\n    uVar9 = FUN_080015f8(PTR_DAT_08000f74,0);\n    uVar8 = (undefined4)((ulonglong)uVar9 >> 0x20);\n    uVar6 = (undefined4)uVar9;\n    *(undefined8 *)PTR_DAT_08000f6c = uVar9;\n    iVar7 = FUN_080009c8(uVar6,uVar8,DAT_08000f18,DAT_08000f1c);\n    if (((iVar7 != 0) || (iVar7 = FUN_080009c8(uVar6,uVar8,DAT_08000f20,DAT_08000f24), iVar7 != 0))\n       || (iVar7 = FUN_080009c8(uVar6,uVar8,DAT_08000f28,DAT_08000f2c), iVar7 != 0)) {\n      *PTR_DAT_08000f64 = 7;\n      *PTR_DAT_08000f58 = 0;\n    }\n  }\n  uVar5 = FUN_080058e0();\n  if (*(uint *)PTR_DAT_08000f54 < uVar5) {\n    *(uint *)PTR_DAT_08000f54 = *(uint *)PTR_DAT_08000f54 + 1000;\n    if (*PTR_DAT_08000f58 == '\\x01') {\n      uVar8 = *(undefined4 *)PTR_DAT_08000f5c;\n      uVar6 = FUN_08005890(uVar8);\n      uVar5 = count_leading_zeroes(uVar6);\n      FUN_08005848(uVar8,uVar5 >> 5);\n      iVar7 = *(int *)PTR_DAT_08000f78;\n      *(int *)PTR_DAT_08000f78 = iVar7 + 1;\n      puVar2 = PTR_DAT_08000f7c;\n      FUN_08005d82(PTR_DAT_08000f7c,iVar7 + 1,10);\n      puVar3 = PTR_DAT_08000f80;\n      FUN_08005c96(puVar2,PTR_DAT_08000f80);\n      FUN_08005f2c(puVar2,extraout_r1,*(undefined4 *)PTR_DAT_08000f84,\n                   *(undefined4 *)(PTR_DAT_08000f84 + 4),2);\n      FUN_08005c96(puVar2,puVar3);\n      FUN_08005f2c(puVar2,extraout_r1_00,*(undefined4 *)PTR_DAT_08000f6c,\n                   *(undefined4 *)(PTR_DAT_08000f6c + 4),2);\n      FUN_08005c96(puVar2,puVar3);\n      FUN_08005f40(puVar2,extraout_r1_01,*(undefined4 *)PTR_DAT_08000f88,\n                   *(undefined4 *)(PTR_DAT_08000f88 + 4),2);\n    }\n    else {\n      FUN_08005848(*(undefined4 *)PTR_DAT_08000f5c,1);\n    }\n    puVar2 = PTR_DAT_08000f60;\n    FUN_0800135a(PTR_DAT_08000f60);\n    puVar4 = PTR_DAT_08000f64;\n    FUN_08005c96(puVar2,*(undefined4 *)\n                         (PTR_PTR_s_Ready_08000f68 + (uint)(byte)*PTR_DAT_08000f64 * 4));\n    FUN_08001366(puVar2,0,1);\n    puVar3 = PTR_DAT_08000f60;\n    if (*puVar4 == '\\a') {\n      FUN_08005c96(puVar2,PTR_s_TC_Error__08000f8c);\n    }\n    else {\n      FUN_08005f2c(PTR_DAT_08000f60,2,*(undefined4 *)PTR_DAT_08000f6c,\n                   *(undefined4 *)(PTR_DAT_08000f6c + 4),2);\n      FUN_0800134e(puVar3,0);\n      FUN_08005c96(puVar3,PTR_DAT_08000f70);\n    }\n  }\n  if ((byte)*PTR_DAT_08000f64 < 8) {\n                    /* WARNING: Could not recover jumptable at 0x08000d5c. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n    (*(code *)(&switchD_08000d5c::switchdataD_08000d60 +\n              (&switchD_08000d5c::switchdataD_08000d60)[(byte)*PTR_DAT_08000f64]))();\n    return;\n  }\n  if ((*PTR_DAT_08001274 == '\\x01') && (*PTR_DAT_0800126c == '\\x01')) {\n    *PTR_DAT_0800126c = 0;\n    *PTR_DAT_08001258 = 0;\n  }\n  cVar1 = *PTR_DAT_08001278;\n  if (cVar1 == '\\x01') {\n    iVar7 = FUN_08005754(*(undefined4 *)PTR_DAT_08001280);\n    if (iVar7 == 0) {\n      iVar7 = FUN_080058e0();\n      if (0x32 < (uint)(iVar7 - *(int *)PTR_DAT_08001284)) {\n        *PTR_DAT_08001278 = 2;\n      }\n    }\n    else {\n      *PTR_DAT_08001278 = 0;\n    }\n  }\n  else if (cVar1 == '\\0') {\n    *PTR_DAT_08001274 = 0;\n    iVar7 = FUN_08005754(*(undefined4 *)PTR_DAT_08001280);\n    if (iVar7 == 0) {\n      uVar6 = FUN_080058e0();\n      *(undefined4 *)PTR_DAT_08001284 = uVar6;\n      *PTR_DAT_08001278 = 1;\n    }\n  }\n  else if ((cVar1 == '\\x02') && (iVar7 = FUN_08005754(*(undefined4 *)PTR_DAT_08001280), iVar7 != 0))\n  {\n    *PTR_DAT_08001274 = 1;\n    *PTR_DAT_08001278 = 0;\n  }\n  if (*PTR_DAT_0800126c == '\\x01') {\n    iVar7 = FUN_080058e0();\n    FUN_080016b4(PTR_DAT_08001250);\n    if (*(uint *)PTR_DAT_0800128c < (uint)(iVar7 - *(int *)PTR_DAT_08001288)) {\n      *(uint *)PTR_DAT_08001288 = *(int *)PTR_DAT_08001288 + *(uint *)PTR_DAT_0800128c;\n    }\n    uVar9 = FUN_0800040c(iVar7 - *(int *)PTR_DAT_08001288);\n    iVar7 = FUN_080009dc((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),*(undefined4 *)PTR_DAT_08001290,\n                         *(undefined4 *)(PTR_DAT_08001290 + 4));\n    if (iVar7 == 0) {\n      FUN_08005848(*(undefined4 *)PTR_DAT_0800127c,0);\n    }\n    else {\n      FUN_08005848(*(undefined4 *)PTR_DAT_0800127c,1);\n    }\n  }\n  else {\n    FUN_08005848(*(undefined4 *)PTR_DAT_0800127c,0);\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_08005f2c",
                "FUN_08000a04",
                "FUN_08000a18",
                "FUN_08005f40",
                "FUN_0800134e",
                "FUN_0800135a",
                "FUN_0800040c",
                "FUN_08005c96",
                "FUN_08005890",
                "FUN_08005d82",
                "FUN_08001960",
                "FUN_0800042c",
                "FUN_080058e0",
                "FUN_08005cd4",
                "FUN_08001a44",
                "FUN_08001918",
                "FUN_080018f8",
                "FUN_080009c8",
                "FUN_080009f0",
                "FUN_080015f8",
                "FUN_08005754",
                "FUN_08001366",
                "FUN_080009dc",
                "FUN_080016b4",
                "FUN_08000194",
                "FUN_08005848"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08000cd0",
            "calling": [
                "FUN_08005f6c"
            ],
            "imported": false,
            "current_name": "FUNC_08000cd0"
        },
        "FUN_08001310": {
            "renaming": {
                "FUN_08001310": "process_data_08001310",
                "param_1": "data_ptr",
                "param_2": "data_size",
                "param_3": "param_3",
                "param_4": "param_4",
                "FUN_08005848": "send_data",
                "PTR_": "data_ptr_",
                "DAT_": "data_"
            },
            "code": "void process_data_08001310(int DAT_ptr, uint DAT_size, uint param_3, uint param_4)\n{\n  send_data(*(char *)(DAT_ptr + 8), param_3, param_3, param_4, param_4);\n  if (*(char *)(DAT_ptr + 9) != -1) {\n    send_data(*(char *)(DAT_ptr + 9), 0, 0, 0, 0);\n  }\n  if ((*(byte *)(DAT_ptr + 0x13) & 0x10) == 0) {\n    process_DAT_helper(DAT_ptr, DAT_size >> 4);\n    process_DAT_helper(DAT_ptr, DAT_size);\n    return;\n  }\n  process_DAT_helper2(DAT_ptr, DAT_size);\n  return;\n}",
            "called": [
                "FUN_080012c0",
                "FUN_080012e8",
                "FUN_08005848"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001310",
            "calling": [
                "FUN_0800138e",
                "FUN_08001550",
                "FUN_0800134e",
                "FUN_08001366",
                "FUN_0800135a",
                "FUN_080013a4"
            ],
            "imported": false,
            "current_name": "process_data_08001310"
        },
        "FUN_080009a8": {
            "renaming": {
                "FUN_080009a8": "swap_integers_080009a8",
                "param_1": "first_integer",
                "param_2": "second_integer",
                "param_3": "temporary_holder",
                "param_4": ""
            },
            "code": "void swap_integers_080009a8(int* first_integer, int* second_integer) {\n  int temporary_holder = *first_integer;\n  *first_integer = *second_integer;\n  *second_integer = temporary_holder;\n  return;\n}",
            "called": [
                "FUN_080009b8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080009a8",
            "calling": [
                "FUN_08000a04",
                "FUN_08000a18"
            ],
            "imported": false,
            "current_name": "swap_integers_080009a8"
        },
        "FUN_08004d90": {
            "renaming": {
                "FUN_08004d90": "update_memory_flags_08004d90",
                "param_1": "memory_address",
                "*param_1": "*memory_address",
                "DAT_08004de4": "MEMORY_FLAG_A",
                "DAT_08004df0": "MEMORY_FLAG_ADDRESS",
                "DAT_08004de8": "MEMORY_FLAG_C",
                "DAT_08004dec": "MEMORY_FLAG_D"
            },
            "code": "void update_memory_flags_08004d90(int *memory_address) {\n    int flag_value = *memory_address;\n    if (flag_value == DAT_08004de4) {\n        *(uint *)(DAT_08004df0 + 0x18) &= 0xfffff7ff;\n    }\n    if (flag_value == MEMORY_FLAG_B) {\n        *(uint *)(DAT_08004df0 + 0x1c) &= 0xfffffffe;\n    }\n    if (flag_value == DAT_08004de8) {\n        *(uint *)(DAT_08004df0 + 0x1c) &= 0xfffffffd;\n    }\n    if (flag_value == DAT_08004dec) {\n        *(uint *)(DAT_08004df0 + 0x1c) &= 0xfffffffb;\n    }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004d90",
            "calling": [
                "FUN_08004b34"
            ],
            "imported": false,
            "current_name": "update_memory_flags_08004d90"
        },
        "FUN_08005ce8": {
            "renaming": {
                "FUN_08005ce8": "convert_base_08005ce8",
                "param_1": "array_pointer",
                "param_2": "number",
                "param_3": "base",
                "uVar2": "result",
                "uVar3": "remainder",
                "uVar4": "quotient",
                "pcVar5": "current_digit",
                "local_15": "reversed_digits",
                "cVar1": "digit"
            },
            "code": "undefined4 convert_base_08005ce8(int *array_pointer, uint number, uint base)\n{\n  char digit;\n  undefined4 result;\n  uint quotient;\n  uint remainder;\n  char reversed_digits[9];\n  reversed_digits[1] = 0;\n  if ((int)base < 2) {\n    base = 10;\n  }\n  char *current_digit = reversed_digits + 1;\n  do {\n    quotient = number / base;\n    remainder = (number & 0xff) - (quotient * base & 0xff) & 0xff;\n    current_digit = current_digit - 1;\n    digit = (char)remainder;\n    if (remainder < 10) {\n      digit = digit + '0';\n    }\n    else {\n      digit = digit + '7';\n    }\n    *current_digit = digit;\n    number = quotient;\n  } while (quotient != 0);\n  if (current_digit == (char *)0x0) {\n    result = 0;\n  }\n  else {\n    uint length = FUN_08000178(current_digit);\n    result = (**(code **)(*array_pointer + 4))(array_pointer, current_digit, length);\n  }\n  return result;\n}",
            "called": [
                "FUN_08000178"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005ce8",
            "calling": [
                "FUN_08005d8a",
                "FUN_08005d42"
            ],
            "imported": false,
            "current_name": "convert_base_08005ce8"
        },
        "FUN_0800316c": {
            "renaming": {
                "FUN_0800316c": "process_input_0800316c",
                "param_1": "input",
                "iVar1": "index",
                "puVar2": "previous_input",
                "puVar3": "current_input"
            },
            "code": "void process_input_0800316c(uint **input)\n{\n  int index;\n  uint *current_input;\n  uint *previous_input;\n  \n  if (*(byte *)((int)input + 0x3d) - 0x29 < 2)) {\n    input[0xc] = (uint *)0x0;\n    *(undefined *)((int)input + 0x3d) = 0x28;\n  }\n  else {\n    if ((*(char *)((int)input + 0x3d) != '`') && (((*input)[1] & 0x800) == 0)) {\n      *(undefined *)((int)input + 0x3d) = 0x20;\n    }\n    input[0xc] = (uint *)0x0;\n    *(undefined *)((int)input + 0x3e) = 0;\n  }\n  **input = **input & 0xfffff7ff;\n  current_input = *input;\n  if ((current_input[1] & 0x800) == 0) {\n    if (*(char *)((int)input + 0x3d) == '`') {\n      *(undefined *)((int)input + 0x3d) = 0x20;\n      input[0x10] = (uint *)0x0;\n      if ((current_input[5] & 0x40) != 0) {\n        previous_input = input[9];\n        input[9] = (uint *)((int)previous_input + 1);\n        *(char *)previous_input = (char)current_input[4];\n      }\n      **input = **input & 0xfffffffe;\n      do_nothing(input);\n    }\n    else {\n      if ((current_input[5] & 0x40) != 0) {\n        previous_input = input[9];\n        input[9] = (uint *)((int)previous_input + 1);\n        *(char *)previous_input = (char)current_input[4];\n      }\n      process_input_0800316c(input);\n    }\n  }\n  else {\n    current_input[1] = current_input[1] & 0xfffff7ff;\n    if (*(char *)((int)input[0xd] + 0x21) == '\\x01') {\n      input[0xe][0xd] = (uint)PTR_LAB_080035fc_1_080032ac;\n      index = FUN_0800258c(input[0xe]);\n      if (index != 0) {\n        if (((*input)[5] & 0x40) != 0) {\n          previous_input = input[9];\n          input[9] = (uint *)((int)previous_input + 1);\n          *(char *)previous_input = (char)(*input)[4];\n        }\n        **input = **input & 0xfffffffe;\n        *(undefined *)((int)input + 0x3d) = 0x20;\n        (*(code *)input[0xe][0xd])();\n      }\n    }\n    else {\n      input[0xd][0xd] = (uint)PTR_LAB_080035fc_1_080032ac;\n      index = FUN_0800258c(input[0xd]);\n      if (index != 0) {\n        **input = **input & 0xfffffffe;\n        *(undefined *)((int)input + 0x3d) = 0x20;\n        (*(code *)input[0xd][0xd])();\n      }\n    }\n  }\n  if ((*(char *)((int)input + 0x3d) == '(') && (((uint)input[0x10] & 4) != 0)) {\n    input[0xb] = DAT_080032b0;\n    input[0xc] = (uint *)0x0;\n    *(undefined *)((int)input + 0x3d) = 0x20;\n    *(undefined *)((int)input + 0x3e) = 0;\n    process_output(input);\n  }\n  return;\n}\n",
            "called": [
                "FUN_08004ef4",
                "FUN_0800316a",
                "FUN_0800258c",
                "FUN_08004ec4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800316c",
            "calling": [
                "FUN_08003520",
                "FUN_080032b4"
            ],
            "imported": false,
            "current_name": "process_input_0800316c"
        },
        "FUN_08004828": {
            "renaming": {
                "FUN_08004828": "update_bit_at_index_08004828",
                "param_1": "index",
                "param_2": "array",
                "uVar1": "shifted_index",
                "PTR_": "ptr",
                "DAT_": "mask"
            },
            "code": "void update_bit_at_index_08004828(uint index, int* array){\n    uint shifted_index = (index << 0x18) >> 0x1c;\n    uint* PTR_ = (uint*)(array + shifted_index * 4);\n    uint DAT_ = ~(1 << (index & 0xf));\n    *PTR_ = (*PTR_) & DAT_;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004828",
            "calling": [
                "FUN_080057b4"
            ],
            "imported": false,
            "current_name": "update_bit_at_index_08004828"
        },
        "FUN_08003afa": {
            "renaming": {
                "FUN_08003afa": "process_data_08003afa",
                "param_1": "data",
                "param_2": "data_length",
                "puVar1": "ptr",
                "iVar2": "start_time",
                "iVar3": "elapsed_time",
                "uVar4": "value",
                "DAT_08003c38": "config",
                "DAT_08003c34": "ptr",
                "PTR_DAT_08003c40": "processed_data_ptr",
                "PTR_DAT_08003c3c": "processed_data_shift"
            },
            "code": "uint32_t process_data_08003afa(uint32_t *data, uint32_t data_length)\n{\n  uint32_t *DAT_08003c38 = DAT_08003c38;\n  uint32_t *DAT_08003c34 = DAT_08003c34;\n  uint32_t start_time = FUN_08001cc4();\n  uint32_t result = 0;\n  \n  if ((*data & 2) != 0) {\n    DAT_08003c38[1] = (DAT_08003c38[1] & 0xffffff0f) | data[2];\n  }\n  \n  if ((*data & 1) != 0) {\n    uint32_t value = data[1];\n    if (value == 1) {\n      if ((*DAT_08003c38 & 0x20000) == 0) {\n        return 1;\n      }\n    }\n    else if ((value != 2) && ((*DAT_08003c38 & 2) == 0)) {\n      return 1;\n    }\n    DAT_08003c38[1] = value | (DAT_08003c38[1] & 0xfffffffc);\n    \n    if (value == 1) {\n      while ((DAT_08003c38[1] & 0xc) != 4) {\n        uint32_t elapsed_time = FUN_08001cc4() - start_time;\n        if (elapsed_time > 5000) {\n          return 3;\n        }\n      }\n    }\n    else if (value == 2) {\n      while ((DAT_08003c38[1] & 0xc) != 8) {\n        uint32_t elapsed_time = FUN_08001cc4() - start_time;\n        if (elapsed_time > 5000) {\n          return 3;\n        }\n      }\n    }\n    else {\n      while ((DAT_08003c38[1] & 0xc) != 0) {\n        uint32_t elapsed_time = FUN_08001cc4() - start_time;\n        if (elapsed_time > 5000) {\n          return 3;\n        }\n      }\n    }\n  }\n  \n  if ((data_length < (*DAT_08003c34 & 7)) && (*DAT_08003c34 = (*DAT_08003c34 & 0xfffffff8) | data_length, data_length != (*DAT_08003c34 & 7))) {\n    return 1;\n  }\n  \n  if ((*data & 4) != 0) {\n    DAT_08003c38[1] = (DAT_08003c38[1] & 0xfffff8ff) | data[3];\n  }\n  \n  if ((*data & 8) != 0) {\n    DAT_08003c38[1] = (DAT_08003c38[1] & 0xffffc7ff) | (data[4] << 3);\n  }\n  \n  uint32_t processed_data = FUN_08003a68();\n  *(uint32_t *)PTR_DAT_08003c40 = processed_data >> PTR_DAT_08003c3c[(DAT_08003c38[1] << 0x18) >> 0x1c];\n  FUN_08001c3c(0xf);\n  return result;\n}",
            "called": [
                "FUN_08003a68",
                "FUN_08001c3c",
                "FUN_08001cc4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003afa",
            "calling": [
                "FUN_08003ad4"
            ],
            "imported": false,
            "current_name": "process_data_08003afa"
        },
        "FUN_08004948": {
            "renaming": {
                "FUN_08004948": "check_value_08004948",
                "param_1": "value1",
                "param_2": "ptr",
                "param_3": "value2",
                "param_4": "value3",
                "iVar1": "result",
                "uVar2": "shifted_result"
            },
            "code": "uint8_t check_value_08004948(uint32_t value1, uint8_t* ptr, uint32_t value2, uint32_t value3)\n{\n  int32_t result = FUN_08004cce(value1, ptr, value2, value3, value3);\n  uint8_t shifted_result = (result << 0xc) >> 0x1b;\n  if (shifted_result == 3) {\n    return 8;\n  }\n  if (shifted_result == 4) {\n    return 0xc;\n  }\n  if (shifted_result == 2) {\n    return 4;\n  }\n  return 0;\n}",
            "called": [
                "FUN_08004cce"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004948",
            "calling": [
                "FUN_08004b3c"
            ],
            "imported": false,
            "current_name": "check_value_08004948"
        },
        "FUN_0800316a": {
            "renaming": {
                "FUN_0800316a": "do_nothing_0800316a"
            },
            "code": "\nvoid do_nothing_0800316a(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800316a",
            "calling": [
                "FUN_0800316c"
            ],
            "imported": false,
            "current_name": "do_nothing_0800316a"
        },
        "FUN_08005b24": {
            "renaming": {
                "FUN_08005b24": "set_byte_at_offset_08005b24",
                "param_1": "offset",
                "param_2": "value",
                "uVar1": "byte_value",
                "PTR_DAT_08005b38": "PTR_DAT_08005b38",
                "UNRECOVERED_JUMPTABLE": "UNRECOVERED_JUMPTABLE"
            },
            "code": "void set_byte_at_offset_08005b24(int offset, uint8_t value) {\n  uint8_t byte_value;\n  if (value < 0x3c) {\n    byte_value = PTR_DAT_08005b38[value];\n  }\n  else {\n    byte_value = 0xff;\n  }\n  *(uint8_t *)(offset + 0x12d) = byte_value;\n  code *UNRECOVERED_JUMPTABLE;\n  (*UNRECOVERED_JUMPTABLE)();\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005b24",
            "calling": [
                "FUN_08005b54"
            ],
            "imported": false,
            "current_name": "set_byte_at_offset_08005b24"
        },
        "FUN_080049f0": {
            "renaming": {
                "FUN_080049f0": "update_flag_if_matches_080049f0",
                "param_1": "flag_ptr",
                "iVar1": "data_ptr",
                "DAT_08004a48": "data_ptr",
                "DAT_08004a40": "flag_a",
                "DAT_08004a44": "flag_b",
                "uint": "unsigned int",
                "flag_c_ptr": "flag_c_ptr",
                "flag_d_ptr": "flag_d_ptr"
            },
            "code": "void update_flag_if_matches_080049f0(int *flag_ptr) {\n  int DAT_08004a48 = DAT_08004a48;\n  int DAT_08004a40 = DAT_08004a40;\n  int DAT_08004a44 = DAT_08004a44;\n  if (*flag_ptr != DAT_08004a40) {\n    if (*flag_ptr == DAT_08004a44) {\n      uint *flag_c_ptr = (uint *)(DAT_08004a48 + 0xc);\n      *flag_c_ptr |= 0x400;\n      uint *flag_d_ptr = (uint *)(DAT_08004a48 + 0x18);\n      *flag_d_ptr &= 0xfffffbff;\n      *flag_d_ptr &= 0xfffffbff;\n    }\n    return;\n  }\n  uint *flag_c_ptr = (uint *)(DAT_08004a48 + 0xc);\n  *flag_c_ptr |= 0x200;\n  uint *flag_d_ptr = (uint *)(DAT_08004a48 + 0x18);\n  *flag_d_ptr &= 0xfffffdff;\n  *flag_d_ptr &= 0xfffffdff;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080049f0",
            "calling": [
                "FUN_0800224c"
            ],
            "imported": false,
            "current_name": "update_flag_if_matches_080049f0"
        },
        "FUN_08001e40": {
            "renaming": {
                "FUN_08001e40": "get_value_at_offset_0x4c_08001e40",
                "param_1": "data_pointer",
                "*param_1": "data_pointer",
                "*(undefined4 *)(*param_1 + 0x4c)": "*value_pointer",
                "undefined4": "int",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "int get_value_at_offset_0x4c_08001e40(int* data_pointer) {\n    int* value_pointer = data_pointer + 0x4c;\n    return *value_pointer;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001e40",
            "calling": [
                "FUN_08004a4c"
            ],
            "imported": false,
            "current_name": "get_value_at_offset_0x4c_08001e40"
        },
        "FUN_08003a68": {
            "renaming": {
                "FUN_08003a68": "calculate_value_08003a68",
                "uVar1": "result",
                "uVar2": "flag",
                "local_1c": "local_value",
                "abStack_18": "array",
                "uStack_14": "uStack_14",
                "uStack_10": "uStack_10",
                "uStack_c": "uStack_c",
                "DAT_08003ac4": "PTR_DAT_08003ac4",
                "DAT_08003ac8": "DAT_08003ac8",
                "DAT_08003acc": "DAT_08003acc",
                "DAT_08003ad0": "DAT_08003ad0"
            },
            "code": "uint calculate_value_08003a68(void)\n{\n  uint result = 0;\n  uint flag = *(uint *)(DAT_08003ac8 + 4);\n  uint factor = DAT_08003ad0;\n  uint array_index = (flag << 10) >> 0x1c;\n  uint array_value = abStack_18[array_index];\n  undefined2 local_1c = *(undefined2 *)(DAT_08003ac4 + 0x10);\n  undefined4 uStack_14 = *(undefined4 *)DAT_08003ac4;\n  undefined4 uStack_10 = *(undefined4 *)(DAT_08003ac4 + 4);\n  undefined4 uStack_c = *(undefined4 *)(DAT_08003ac4 + 8);\n  if ((flag & 0xc) == 8) {\n    if ((flag & 0x10000) == 0) {\n      result = DAT_08003acc * array_value;\n    }\n    else {\n      uint local_index = (flag << 0xe) >> 0x1f;\n      uint local_value = *(byte *)((int)&local_1c - local_index);\n      result = (DAT_08003ad0 * array_value) / local_value;\n    }\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003a68",
            "calling": [
                "FUN_08003afa"
            ],
            "imported": false,
            "current_name": "calculate_value_08003a68"
        },
        "FUN_080012a2": {
            "renaming": {
                "FUN_080012a2": "print_twice_after_first_zero_byte_080012a2",
                "param_1": "input_address",
                "*(undefined *)(param_1 + 10)": "input_ptr",
                "FUN_08005848": "print_byte"
            },
            "code": "void print_twice_after_first_zero_byte_080012a2(int input_address)\n{\n  char* input_ptr = (char*)(input_address + 10);\n  print_byte(*input_ptr, 0);\n  print_byte(*input_ptr, 1);\n  print_byte(*input_ptr, 0);\n  return;\n}",
            "called": [
                "FUN_08005848"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080012a2",
            "calling": [
                "FUN_080012c0",
                "FUN_080012e8"
            ],
            "imported": false,
            "current_name": "print_twice_after_first_zero_byte_080012a2"
        },
        "FUN_08004c78": {
            "renaming": {
                "FUN_08004c78": "check_for_negative_one_08004c78",
                "param_1": "input_value",
                "uVar1": "result",
                "FUN_08004c5e": "perform_operation"
            },
            "code": "int check_for_negative_one_08004c78(int input_value) {\n  int result;\n  if (input_value != -1) {\n    result = perform_operation();\n    return result;\n  }\n  return 0;\n}",
            "called": [
                "FUN_08004c5e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004c78",
            "calling": [
                "FUN_08004b3c",
                "FUN_080053d4",
                "FUN_08005384",
                "FUN_08004a4c",
                "FUN_08004f4c"
            ],
            "imported": false,
            "current_name": "check_for_negative_one_08004c78"
        },
        "FUN_08001e48": {
            "renaming": {
                "FUN_08001e48": "update_values_08001e48",
                "param_1": "values",
                "param_2": "params",
                "uVar1": "result",
                "uVar2": "param1",
                "iVar3": "value",
                "local_c": "i",
                "DAT_08001f74": "DAT_08001f74",
                "DAT_08001f7c": "DAT_08001f7c",
                "PTR_DAT_08001f78": "PTR_DAT_08001f78"
            },
            "code": "uint32_t update_values_08001e48(int *values, uint32_t *params) {\n  uint32_t result = 0;\n  int flag = *(char *)(values + 9);\n  if (flag == 1) {\n    result = 2;\n  }\n  else {\n    *(undefined *)(values + 9) = 1;\n    uint32_t param1 = params[1];\n    if (param1 < 7) {\n      param1 = param1 * 5 - 5;\n      *(uint32_t *)(*values + 0x34) = *params << (param1 & 0xff) | *(uint32_t *)(*values + 0x34) & ~(0x1f << (param1 & 0xff));\n    }\n    else if (param1 < 0xd) {\n      param1 = param1 * 5 - 0x23;\n      *(uint32_t *)(*values + 0x30) = *params << (param1 & 0xff) | *(uint32_t *)(*values + 0x30) & ~(0x1f << (param1 & 0xff));\n    }\n    else {\n      param1 = param1 * 5 - 0x41;\n      *(uint32_t *)(*values + 0x2c) = *params << (param1 & 0xff) | *(uint32_t *)(*values + 0x2c) & ~(0x1f << (param1 & 0xff));\n    }\n    param1 = *params;\n    if (param1 < 10) {\n      *(uint32_t *)(*values + 0x10) = params[2] << (param1 * 3 & 0xff) | *(uint32_t *)(*values + 0x10) & ~(7 << (param1 * 3 & 0xff));\n    }\n    else {\n      param1 = param1 * 3 - 0x1e;\n      *(uint32_t *)(*values + 0xc) = params[2] << (param1 & 0xff) | *(uint32_t *)(*values + 0xc) & ~(7 << (param1 & 0xff));\n    }\n    if (*params - 0x10 < 2) {\n      int value = *values;\n      if (value == DAT_08001f74) {\n        if ((*(uint32_t *)(value + 8) & 0x800000) == 0) {\n          *(uint32_t *)(value + 8) = *(uint32_t *)(value + 8) | 0x800000;\n          if (*params == 0x10) {\n            for (int i = (uint32_t)((ulonglong)DAT_08001f7c * (ulonglong)*(uint32_t *)PTR_DAT_08001f78 >> 0x32) * 10; i != 0; i = i + -1) {\n            }\n            result = 0;\n          }\n          else {\n            result = 0;\n          }\n        }\n        else {\n          result = 0;\n        }\n      }\n      else {\n        values[10] = values[10] | 0x20;\n        result = 1;\n      }\n    }\n    else {\n      result = 0;\n    }\n    *(undefined *)(values + 9) = 0;\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001e48",
            "calling": [
                "FUN_08004a4c"
            ],
            "imported": false,
            "current_name": "update_values_08001e48"
        },
        "FUN_080009b8": {
            "renaming": {
                "FUN_080009b8": "execute_function_080009b8",
                "param_1": "input_param",
                "FUN_0800092c": "initialize_system"
            },
            "code": "undefined4 execute_function_080009b8(undefined4 input_param)\n{\n  initialize_system();\n  return input_param;\n}",
            "called": [
                "FUN_0800092c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080009b8",
            "calling": [
                "FUN_080009c8",
                "FUN_080009f0",
                "FUN_080009a8",
                "FUN_080009dc"
            ],
            "imported": false,
            "current_name": "execute_function_080009b8"
        },
        "FUN_08000aa8": {
            "renaming": {
                "FUN_08000aa8": "convert_float_to_fixed_point_08000aa8",
                "param_1": "float_value",
                "param_2": "fractional_bits",
                "iVar1": "intermediate_value",
                "uVar2": "normalized_value"
            },
            "code": "uint convert_float_to_fixed_point_08000aa8(uint float_value, uint fractional_bits) {\n  int intermediate_value;\n  uint normalized_value;\n  if ((fractional_bits & 0x80000000) != 0) {\n    return 0;\n  }\n  intermediate_value = fractional_bits * 2 + 0x200000;\n  if (fractional_bits * 2 < 0xffe00000) {\n    if (-1 < intermediate_value) {\n      return 0;\n    }\n    normalized_value = -(intermediate_value >> 0x15) - 0x3e1;\n    if (-1 < (int)normalized_value) {\n      return (fractional_bits << 0xb | 0x80000000 | float_value >> 0x15) >> (normalized_value & 0xff);\n    }\n  }\n  else if ((float_value | fractional_bits << 0xc) != 0) {\n    return 0;\n  }\n  return 0xffffffff;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000aa8",
            "calling": [
                "FUN_08005da8"
            ],
            "imported": false,
            "current_name": "convert_float_to_fixed_point_08000aa8"
        },
        "FUN_08000a04": {
            "renaming": {
                "FUN_08000a04": "check_for_carry_or_zero_flag_08000a04",
                "in_CY": "carry_flag",
                "in_ZR": "zero_flag",
                "FUN_080009a8": "check_carry_and_zero_flags"
            },
            "code": "bool check_for_carry_or_zero_flag_08000a04(void)\n{\n  bool carry_flag = check_carry_flag();\n  bool zero_flag = check_zero_flag();\n  return !carry_flag || zero_flag;\n}",
            "called": [
                "FUN_080009a8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000a04",
            "calling": [
                "FUN_08001960",
                "FUN_08000cd0"
            ],
            "imported": false,
            "current_name": "check_for_carry_or_zero_flag_08000a04"
        },
        "FUN_0800010c": {
            "renaming": {
                "FUN_0800010c": "check_if_initialized_0800010c",
                "param_1": "data",
                "*PTR_DAT_08000124": "*PTR_INITIALIZED_FLAG",
                "DAT_08000128": "DAT_DEBUG_FLAG",
                "PTR_FUN_0800012c": "PTR_DEFAULT_DATA"
            },
            "code": "char* check_if_initialized_0800010c(char* data){\\n  if (*PTR_DAT_08000124 == \"\\0\") {\\n    if (DAT_08000128 != 0) {\\n      data = PTR_FUN_0800012c;\\n    }\\n    *PTR_DAT_08000124 = 1;\\n  }\\n  return data;\\n}",
            "called": [
                "FUN_08007328"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800010c",
            "calling": [],
            "imported": false,
            "current_name": "check_if_initialized_0800010c"
        },
        "FUN_08003f14": {
            "renaming": {
                "FUN_08003f14": "do_nothing_08003f14"
            },
            "code": "\nvoid do_nothing_08003f14(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003f14",
            "calling": [
                "FUN_08003f18"
            ],
            "imported": false,
            "current_name": "do_nothing_08003f14"
        },
        "FUN_08001cac": {
            "renaming": {
                "FUN_08001cac": "update_data_at_pointer_08001cac",
                "PTR_DAT_08001cbc": "data_pointer",
                "PTR_DAT_08001cc0": "byte_value_pointer",
                "uint": "uint32_t",
                "byte": "uint8_t"
            },
            "code": "void update_data_at_pointer_08001cac(void)\n{\n    uint8_t* PTR_DAT_08001cbc = (uint8_t*) PTR_DAT_08001cbc;\n    uint8_t byte_value = * (uint8_t*) PTR_DAT_08001cc0;\n    uint32_t* int_pointer = (uint32_t*) PTR_DAT_08001cbc;\n    uint32_t int_value = *int_pointer;\n    uint32_t sum = byte_value + int_value;\n    *int_pointer = sum;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001cac",
            "calling": [
                "FUN_08004b9e"
            ],
            "imported": false,
            "current_name": "update_data_at_pointer_08001cac"
        },
        "FUN_08003f12": {
            "renaming": {
                "FUN_08003f12": "do_nothing_08003f12"
            },
            "code": "\nvoid do_nothing_08003f12(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003f12",
            "calling": [
                "FUN_08003f18"
            ],
            "imported": false,
            "current_name": "do_nothing_08003f12"
        },
        "FUN_08005a18": {
            "renaming": {
                "FUN_08005a18": "check_and_call_function_08005a18",
                "DAT_08005a3c": "flag",
                "FUN_0800591e": "call_function",
                "PTR_DAT_08005a40": "data_pointer"
            },
            "code": "void check_and_call_function_08005a18(void)\n{\n  if (DAT_08005a3c != 0) {\n    call_function(PTR_DAT_08005a40);\n  }\n  return;\n}",
            "called": [
                "FUN_0800591e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005a18",
            "calling": [
                "FUN_08005f6c"
            ],
            "imported": false,
            "current_name": "check_and_call_function_08005a18"
        },
        "FUN_08003f18": {
            "renaming": {
                "FUN_08003f18": "check_and_update_status_08003f18",
                "param_1": "status",
                "iVar1": "current_status",
                "do_nothing_08003f14": "update_status",
                "do_nothing_08003f12": "do_nothing",
                "FUN_08004df8": "perform_task_1",
                "FUN_08004e12": "perform_task_2",
                "do_nothing_0800417a": "do_nothing_2",
                "do_nothing_08003f16": "do_nothing_3",
                "do_nothing_08004178": "do_nothing_4"
            },
            "code": "void check_and_update_status_08003f18(int *status)\n{\n  int current_status = *status;\n  if (((*(uint *)(current_status + 0x10) & 2) != 0) && ((*(uint *)(current_status + 0xc) & 2) != 0)) {\n    *(undefined4 *)(current_status + 0x10) = 0xfffffffd;\n    *(undefined *)(status + 7) = 1;\n    if ((*(uint *)(*status + 0x18) & 3) == 0) {\n      perform_task_1();\n      update_status(status);\n    }\n    else {\n      do_nothing();\n    }\n    *(undefined *)(status + 7) = 0;\n  }\n  current_status = *status;\n  if (((*(uint *)(current_status + 0x10) & 4) != 0) && ((*(uint *)(current_status + 0xc) & 4) != 0)) {\n    *(undefined4 *)(current_status + 0x10) = 0xfffffffb;\n    *(undefined *)(status + 7) = 2;\n    if ((*(uint *)(*status + 0x18) & 0x300) == 0) {\n      perform_task_1(status);\n      update_status(status);\n    }\n    else {\n      do_nothing(status);\n    }\n    *(undefined *)(status + 7) = 0;\n  }\n  current_status = *status;\n  if (((*(uint *)(current_status + 0x10) & 8) != 0) && ((*(uint *)(current_status + 0xc) & 8) != 0)) {\n    *(undefined4 *)(current_status + 0x10) = 0xfffffff7;\n    *(undefined *)(status + 7) = 4;\n    if ((*(uint *)(*status + 0x1c) & 3) == 0) {\n      perform_task_1(status);\n      update_status(status);\n    }\n    else {\n      do_nothing(status);\n    }\n    *(undefined *)(status + 7) = 0;\n  }\n  current_status = *status;\n  if (((*(uint *)(current_status + 0x10) & 0x10) != 0) && ((*(uint *)(current_status + 0xc) & 0x10) != 0)) {\n    *(undefined4 *)(current_status + 0x10) = 0xffffffef;\n    *(undefined *)(status + 7) = 8;\n    if ((*(uint *)(*status + 0x1c) & 0x300) == 0) {\n      perform_task_1(status);\n      update_status(status);\n    }\n    else {\n      do_nothing(status);\n    }\n    *(undefined *)(status + 7) = 0;\n  }\n  current_status = *status;\n  if (((*(uint *)(current_status + 0x10) & 1) != 0) && ((*(uint *)(current_status + 0xc) & 1) != 0)) {\n    *(undefined4 *)(current_status + 0x10) = 0xfffffffe;\n    perform_task_2(status);\n  }\n  current_status = *status;\n  if (((*(uint *)(current_status + 0x10) & 0x80) != 0) && ((*(uint *)(current_status + 0xc) & 0x80) != 0)) {\n    *(undefined4 *)(current_status + 0x10) = 0xffffff7f;\n    do_nothing_2(status);\n  }\n  current_status = *status;\n  if (((*(uint *)(current_status + 0x10) & 0x40) != 0) && ((*(uint *)(current_status + 0xc) & 0x40) != 0)) {\n    *(undefined4 *)(current_status + 0x10) = 0xffffffbf;\n    do_nothing_3(status);\n  }\n  current_status = *status;\n  if (((*(uint *)(current_status + 0x10) & 0x20) != 0) && ((*(uint *)(current_status + 0xc) & 0x20) != 0)) {\n    *(undefined4 *)(current_status + 0x10) = 0xffffffdf;\n    do_nothing_4(status);\n  }\n  return;\n}",
            "called": [
                "FUN_08003f12",
                "FUN_08004178",
                "FUN_08004df8",
                "FUN_08004e12",
                "FUN_08003f14",
                "FUN_08003f16",
                "FUN_0800417a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003f18",
            "calling": [
                "FUN_08004e20"
            ],
            "imported": false,
            "current_name": "check_and_update_status_08003f18"
        },
        "FUN_08003f16": {
            "renaming": {
                "FUN_08003f16": "do_nothing_08003f16"
            },
            "code": "\nvoid do_nothing_08003f16(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003f16",
            "calling": [
                "FUN_08003f18"
            ],
            "imported": false,
            "current_name": "do_nothing_08003f16"
        },
        "FUN_0800591e": {
            "renaming": {
                "FUN_0800591e": "calculate_value_at_offset_0800591e",
                "param_1": "address",
                "*(short *)(param_1 + 0x134)": "value_at_offset_1",
                "*(short *)(param_1 + 0x136)": "value_at_offset_2",
                "result": "result"
            },
            "code": "ushort calculate_value_at_offset_0800591e(int address)\n{\n    ushort value_at_offset_1 = *(ushort *)(address + 0x134);\n    ushort value_at_offset_2 = *(ushort *)(address + 0x136);\n    ushort result = (value_at_offset_1 + 0x40) - value_at_offset_2 & 0x3f;\n    return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800591e",
            "calling": [
                "FUN_08005a18"
            ],
            "imported": false,
            "current_name": "calculate_value_at_offset_0800591e"
        },
        "FUN_08002540": {
            "renaming": {
                "FUN_08002540": "set_bit_in_array_08002540",
                "param_1": "bit_index",
                "PTR_DAT_0800255c": "array_start_ptr",
                "DAT_0800255c": "array_start_offset"
            },
            "code": "void set_bit_in_array_08002540(uint bit_index) {\n  if (bit_index >= 0) {\n    uint array_index = (bit_index >> 5) + 0x60;\n    uint* array_ptr = (uint*)(DAT_0800255c + array_index * 4);\n    uint bit_mask = 1 << (bit_index & 0x1f);\n    *array_ptr = bit_mask;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002540",
            "calling": [],
            "imported": false,
            "current_name": "set_bit_in_array_08002540"
        },
        "FUN_08006344": {
            "renaming": {
                "FUN_08006344": "decode_08006344",
                "param_1": "decoder",
                "param_2": "character",
                "param_3": "buffer",
                "pbVar2": "buffer_end",
                "pbVar3": "current_byte",
                "uVar4": "result",
                "iVar1": "buffer_size"
            },
            "code": "uint decode_08006344(int decode_08006344r, byte character, byte **buffer) {\n  int buffer_size;\n  byte *current_byte;\n  byte *buffer_end;\n  uint result;\n\n  buffer_end = buffer[2] + -1;\n  buffer[2] = buffer_end;\n  if ((-1 < (int)buffer_end) || (((int)buffer[6] <= (int)buffer_end && (buffer_end = (byte *)(uint)character, buffer_end != (byte *)0xa)))) {\n    current_byte = *buffer;\n    *buffer = current_byte + 1;\n    *current_byte = character;\n    return (uint)character;\n  }\n  if ((decode_08006344r != 0) && (*(int *)(decode_08006344r + 0x18) == 0)) {\n    handle_error();\n  }\n  if (buffer == (byte **)PTR_DAT_080069d8) {\n    buffer = *(byte ***)(decode_08006344r + 4);\n  }\n  else if (buffer == (byte **)PTR_DAT_080069dc) {\n    buffer = *(byte ***)(decode_08006344r + 8);\n  }\n  else if (buffer == (byte **)PTR_DAT_080069e0) {\n    buffer = *(byte ***)(decode_08006344r + 0xc);\n  }\n  buffer[2] = buffer[6];\n  buffer_size = (int)*(ushort *)(buffer + 3) << 0x1c;\n  if (((buffer_size < 0) && (current_byte = buffer[4], current_byte != (byte *)0x0)) || (buffer_size = decode_08006344(decode_08006344r, buffer, buffer_size, current_byte, buffer_end), buffer_size == 0)) {\n    result = (uint)character;\n    buffer_size = (int)*buffer - (int)buffer[4];\n    if ((buffer_size < (int)buffer[5]) || (buffer_size = handle_error(decode_08006344r, buffer), buffer_size == 0)) {\n      buffer[2] = buffer[2] + -1;\n      current_byte = *buffer;\n      *buffer = current_byte + 1;\n      *current_byte = character;\n      if ((byte *)(buffer_size + 1) != buffer[5]) {\n        if (-1 < (int)((uint)*(ushort *)(buffer + 3) << 0x1f)) {\n          return result;\n        }\n        if (result != 10) {\n          return result;\n        }\n      }\n      buffer_size = handle_error(decode_08006344r, buffer);\n      if (buffer_size == 0) {\n        return result;\n      }\n    }\n  }\n  return 0xffffffff;\n}",
            "called": [
                "FUN_08006be0",
                "FUN_080069e4",
                "FUN_08006cb4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006344",
            "calling": [
                "FUN_08006370"
            ],
            "imported": false,
            "current_name": "decode_08006344"
        },
        "FUN_080009c8": {
            "renaming": {
                "FUN_080009c8": "check_input_is_not_null_080009c8",
                "in_ZR": "input_char",
                "FUN_080009b8": "call_input_function"
            },
            "code": "bool check_input_is_not_null_080009c8(void)\\n{\\n  char input_char;\\n  call_input_function();\\n  return input_char != \"\\0\";\\n}",
            "called": [
                "FUN_080009b8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080009c8",
            "calling": [
                "FUN_08000cd0"
            ],
            "imported": false,
            "current_name": "check_input_is_not_null_080009c8"
        },
        "FUN_08002db2": {
            "renaming": {
                "FUN_08002db2": "process_data_08002db2",
                "param_1": "data",
                "cVar1": "current_char",
                "puVar2": "ptr1",
                "PTR_DAT_080030a8": "ptr2",
                "PTR_DAT_080030a4": "ptr3",
                "PTR_DAT_080030a0": "ptr4",
                "PTR_DAT_0800309c": "ptr5",
                "PTR_DAT_08003098": "ptr6",
                "PTR_DAT_08003094": "ptr7",
                "PTR_DAT_08003090": "ptr8",
                "PTR_DAT_0800308c": "ptr9",
                "PTR_DAT_08003088": "ptr10",
                "PTR_DAT_08003084": "ptr11",
                "PTR_DAT_08003080": "ptr12",
                "PTR_DAT_0800307c": "ptr13",
                "PTR_DAT_08003078": "ptr14",
                "PTR_DAT_08003074": "ptr15",
                "PTR_DAT_08003070": "ptr16",
                "PTR_DAT_0800306c": "ptr17",
                "PTR_DAT_08003068": "ptr18",
                "PTR_DAT_08003064": "ptr19",
                "PTR_DAT_08003060": "ptr20",
                "PTR_DAT_0800305c": "ptr21",
                "PTR_DAT_08003058": "ptr22"
            },
            "code": "uint32_t process_data_08002db2(uint32_t **data)\n{\n    char current_char;\n    uint32_t *ptr1;\n    uint32_t *PTR_DAT_080030a8;\n    uint32_t *PTR_DAT_080030a4;\n    uint32_t *PTR_DAT_080030a0;\n    uint32_t *PTR_DAT_0800309c;\n    uint32_t *PTR_DAT_08003098;\n    uint32_t *PTR_DAT_08003094;\n    uint32_t *PTR_DAT_08003090;\n    uint32_t *PTR_DAT_0800308c;\n    uint32_t *PTR_DAT_08003088;\n    uint32_t *PTR_DAT_08003084;\n    uint32_t *PTR_DAT_08003080;\n    uint32_t *PTR_DAT_0800307c;\n    uint32_t *PTR_DAT_08003078;\n    uint32_t *PTR_DAT_08003074;\n    uint32_t *PTR_DAT_08003070;\n    uint32_t *PTR_DAT_0800306c;\n    uint32_t *PTR_DAT_08003068;\n    uint32_t *PTR_DAT_08003064;\n    uint32_t *PTR_DAT_08003060;\n    uint32_t *PTR_DAT_0800305c;\n    uint32_t *PTR_DAT_08003058;\n    current_char = *(char *)((int)data + 0x3d);\n    ptr1 = data[0xb];\n    if ((*(short *)(data + 10) == 0) && (current_char == '!')) {\n        if ((ptr1 == (uint32_t *)0x4) || ((ptr1 == (uint32_t *)0x8 || (ptr1 == (uint32_t *)0xffff0000)))) {\n            (*data)[1] = (*data)[1] & 0xfffff8ff;\n            **data = **data | 0x200;\n            data[0xc] = (uint32_t *)0x0;\n            *(undefined *)((int)data + 0x3d) = 0x20;\n            if (*(char *)((int)data + 0x3e) == '@') {\n                *(undefined *)((int)data + 0x3e) = 0;\n                do_nothing_08002db0();\n            }\n            else {\n                *(undefined *)((int)data + 0x3e) = 0;\n                do_nothing_08002c4e();\n            }\n        }\n        else {\n            (*data)[1] = (*data)[1] & 0xfffff8ff;\n            data[0xc] = (uint32_t *)0x11;\n            *(undefined *)((int)data + 0x3e) = 0;\n            *(undefined *)((int)data + 0x3d) = 0x20;\n            do_nothing_08002c4e();\n        }\n    }\n    else if ((current_char == '!') || ((*(char *)((int)data + 0x3e) == '@' && (current_char == '\"')))) {\n        if (*(short *)((int)data + 0x2a) == 0) {\n            (*data)[1] = (*data)[1] & 0xfffffbff;\n        }\n        else if (*(char *)((int)data + 0x3e) == '@') {\n            PTR_DAT_080030a8 = data[0x14];\n            if (PTR_DAT_080030a8 == (uint32_t *)0x0) {\n                PTR_DAT_080030a4 = data[0x13];\n                if (PTR_DAT_080030a4 == (uint32_t *)0x1) {\n                    (*data)[4] = (uint32_t)data[0x12] & 0xff;\n                    data[0x14] = (uint32_t *)((int)data[0x14] + 2);\n                }\n                else {\n                    (*data)[4] = (uint32_t)((int)data[0x12] << 0x10) >> 0x18;\n                    data[0x14] = (uint32_t *)((int)data[0x14] + 1);\n                }\n            }\n            else if (PTR_DAT_080030a8 == (uint32_t *)0x1) {\n                (*data)[4] = (uint32_t)data[0x12] & 0xff;\n                data[0x14] = (uint32_t *)((int)data[0x14] + 1);\n            }\n            else if (PTR_DAT_080030a8 == (uint32_t *)0x2) {\n                if (*(char *)((int)data + 0x3d) == '\"') {\n                    **data = **data | 0x100;\n                }\n                else if (*(char *)((int)data + 0x3d) == '!') {\n                    PTR_DAT_080030a0 = data[9];\n                    data[9] = (uint32_t *)((int)PTR_DAT_080030a0 + 1);\n                    (*data)[4] = (uint32_t)*(byte *)PTR_DAT_080030a0;\n                    *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n                }\n            }\n        }\n        else {\n            PTR_DAT_0800309c = data[9];\n            data[9] = (uint32_t *)((int)PTR_DAT_0800309c + 1);\n            (*data)[4] = (uint32_t)*(byte *)PTR_DAT_0800309c;\n            *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n        }\n    }\n    return 0;\n}",
            "called": [
                "FUN_08002c4e",
                "FUN_08002db0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002db2",
            "calling": [
                "FUN_080033b8"
            ],
            "imported": false,
            "current_name": "process_data_08002db2"
        },
        "FUN_08001cc4": {
            "renaming": {
                "FUN_08001cc4": "get_value_from_pointer_08001cc4",
                "undefined4": "uint32_t"
            },
            "code": "uint32_t get_value_from_pointer_08001cc4() {\n    return *(uint32_t*)PTR_DAT_08001ccc;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001cc4",
            "calling": [
                "FUN_080043b4",
                "FUN_080053d4",
                "FUN_08001cd0",
                "FUN_08003688",
                "FUN_08003afa",
                "FUN_080020f0",
                "FUN_08004b94",
                "FUN_08004478",
                "FUN_08002384",
                "FUN_08003c90",
                "FUN_08001f84"
            ],
            "imported": false,
            "current_name": "get_value_from_pointer_08001cc4"
        },
        "FUN_08002db0": {
            "renaming": {
                "FUN_08002db0": "do_nothing_08002db0"
            },
            "code": "\nvoid do_nothing_08002db0(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002db0",
            "calling": [
                "FUN_08002db2",
                "FUN_08002efc"
            ],
            "imported": false,
            "current_name": "do_nothing_08002db0"
        },
        "FUN_08003ea0": {
            "renaming": {
                "FUN_08003ea0": "check_and_update_flags_08003ea0",
                "param_1": "memory_address",
                "**param_1": "flag_1",
                "(*param_1)[1]": "flag_2",
                "FUN_08004d18": "call_function_to_do_something"
            },
            "code": "void check_and_update_flags_08003ea0(uint **memory_address){\n    uint flag_1 = **memory_address & 2;\n    uint flag_2 = (*memory_address)[1] & 2;\n    if (flag_1 && flag_2) {\n        call_function_to_do_something();\n        (*memory_address)[1] = 0xfffffffd;\n    }\n    *(undefined4 *)(DAT_08003ed4 + 0x14) = 0x20000;\n    *(undefined *)((int)memory_address + 0x11) = 1;\n    return;\n}",
            "called": [
                "FUN_08004d18"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003ea0",
            "calling": [],
            "imported": false,
            "current_name": "check_and_update_flags_08003ea0"
        },
        "FUN_0800306c": {
            "renaming": {
                "FUN_0800306c": "process_data_0800306c",
                "param_1": "data_ptr",
                "puVar1": "data_ptr_11",
                "puVar2": "data_ptr_9",
                "puVar3": "data_ptr_9_2",
                "puVar4": "data_ptr_9_3",
                "DAT_080002a2": "data_length"
            },
            "code": "uint32_t process_data_0800306c(uint32_t **data_ptr) {\n  uint32_t *puVar1;\n  puVar1 = data_ptr[11];\n  uint16_t DAT_080002a2 = *(uint16_t *)((int)data_ptr + 0x2a);\n  if (DAT_080002a2 == 3) {\n    if (((puVar1 == (uint32_t *)0x4) || (puVar1 == (uint32_t *)0x8)) || (puVar1 == (uint32_t *)0xffff0000)) {\n      **data_ptr &= 0xfffffbff;\n    }\n    uint32_t *puVar2 = data_ptr[9];\n    data_ptr[9] = (uint32_t *)((int)puVar2 + 1);\n    *(char *)puVar2 = (char)(*data_ptr)[4];\n    DAT_080002a2--;\n  }\n  else if (DAT_080002a2 == 2) {\n    if (((puVar1 == (uint32_t *)0x4) || (puVar1 == (uint32_t *)0x8)) || (puVar1 == (uint32_t *)0xffff0000)) {\n      (*data_ptr)[1] &= 0xfffffcff;\n      **data_ptr |= 0x200;\n    }\n    else {\n      if (puVar1 == (uint32_t *)0x2) {\n        **data_ptr |= 0x400;\n      }\n      else {\n        **data_ptr &= 0xfffffbff;\n      }\n      (*data_ptr)[1] &= 0xfffffcff;\n    }\n    uint32_t *puVar3 = data_ptr[9];\n    data_ptr[9] = (uint32_t *)((int)puVar3 + 1);\n    *(char *)puVar3 = (char)(*data_ptr)[4];\n    DAT_080002a2--;\n    puVar3 = data_ptr[9];\n    data_ptr[9] = (uint32_t *)((int)puVar3 + 1);\n    *(char *)puVar3 = (char)(*data_ptr)[4];\n    DAT_080002a2--;\n    *(undefined *)((int)data_ptr + 0x3d) = 0x20;\n    data_ptr[12] = (uint32_t *)0x0;\n    if (*(char *)((int)data_ptr + 0x3e) == '@') {\n      *(undefined *)((int)data_ptr + 0x3e) = 0;\n      do_nothing_08002f9a();\n    }\n    else {\n      *(undefined *)((int)data_ptr + 0x3e) = 0;\n      do_nothing_08002c50();\n    }\n  }\n  else {\n    uint32_t *puVar4 = data_ptr[9];\n    data_ptr[9] = (uint32_t *)((int)puVar4 + 1);\n    *(char *)puVar4 = (char)(*data_ptr)[4];\n    DAT_080002a2--;\n  }\n  return 0;\n}",
            "called": [
                "FUN_08002c50",
                "FUN_08002f9a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800306c",
            "calling": [
                "FUN_080033b8"
            ],
            "imported": false,
            "current_name": "process_data_0800306c"
        },
        "FUN_0800548c": {
            "renaming": {
                "FUN_0800548c": "is_valid_input_0800548c",
                "param_1": "input_index",
                "uVar1": "input_value",
                "PTR_DAT_080054ac": "input_ptr"
            },
            "code": "bool is_valid_input_0800548c(int input_index) {\n    uint32_t* PTR_DAT_080054ac = PTR_DAT_080054ac + (uint32_t)*(byte *)(input_index + 0x44) * 4;\n    uint32_t input_value = FUN_080047e8(*PTR_DAT_080054ac);\n    bool is_valid = (input_value & 0x22) == 0x22;\n    return is_valid;\n}",
            "called": [
                "FUN_080047e8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800548c",
            "calling": [
                "FUN_080054d4",
                "FUN_08005510"
            ],
            "imported": false,
            "current_name": "is_valid_input_0800548c"
        },
        "FUN_08004848": {
            "renaming": {
                "FUN_08004848": "get_data_by_index_08004848",
                "param_1": "index",
                "DAT_08004870": "data_0",
                "DAT_08004880": "data_1",
                "DAT_08004874": "data_2",
                "DAT_08004878": "data_3",
                "DAT_0800487c": "data_4"
            },
            "code": "undefined4 get_data_by_index_08004848(int index) {\n  switch(index) {\n    case 0:\n      return DAT_08004870;\n    case 1:\n      return DAT_08004880;\n    case 2:\n      return DAT_08004874;\n    case 3:\n      return DAT_08004878;\n    case 4:\n      return DAT_0800487c;\n    default:\n      return 0;\n  }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004848",
            "calling": [
                "FUN_08005890",
                "FUN_08005848"
            ],
            "imported": false,
            "current_name": "get_data_by_index_08004848"
        },
        "FUN_08005d82": {
            "renaming": {
                "FUN_08005d82": "execute_application_08005d82",
                "FUN_08005d42": "initialize_application"
            },
            "code": "void execute_application_08005d82(void)\n{\n  initialize_application();\n  return;\n}",
            "called": [
                "FUN_08005d42"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005d82",
            "calling": [
                "FUN_08000cd0",
                "FUN_08005da8"
            ],
            "imported": false,
            "current_name": "execute_application_08005d82"
        },
        "FUN_08006f92": {
            "renaming": {
                "FUN_08006f92": "validate_and_update_data_08006f92",
                "param_1": "data",
                "param_2": "offset",
                "iVar1": "result",
                "uVar2": "updated_data",
                "bVar3": "is_invalid"
            },
            "code": "void validate_and_update_data_08006f92(undefined4 data, int offset)\n{\n  int result = FUN_08007048(data, *(short *)(offset + 14));\n  bool is_invalid = result == -1;\n  ushort updated_data = *(ushort *)(offset + 12);\n  if (is_invalid) {\n    updated_data &= 0xefff;\n  }\n  else {\n    *(int *)(offset + 84) = result;\n    updated_data |= 0x1000;\n  }\n  *(ushort *)(offset + 12) = updated_data;\n}",
            "called": [
                "FUN_08007048"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006f92",
            "calling": [],
            "imported": false,
            "current_name": "validate_and_update_data_08006f92"
        },
        "FUN_080012c0": {
            "renaming": {
                "FUN_080012c0": "iterate_bits_and_call_function_080012c0",
                "param_1": "data_address",
                "param_2": "bit_mask",
                "uVar1": "bit_index",
                "FUN_08005848": "call_function_with_bit_and_data",
                "FUN_080012a2": "call_another_function"
            },
            "code": "void iterate_bits_and_call_function_080012c0(int data_address, int bit_mask) {\n  uint bit_index;\n  for (bit_index = 0; bit_index < 4; bit_index++) {\n    call_function_with_bit_and_data(*(undefined *)(data_address + bit_index + 0xb), bit_mask >> (bit_index & 0xff) & 1);\n  }\n  call_another_function(data_address);\n  return;\n}",
            "called": [
                "FUN_080012a2",
                "FUN_08005848"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080012c0",
            "calling": [
                "FUN_08001310",
                "FUN_080013a4"
            ],
            "imported": false,
            "current_name": "iterate_bits_and_call_function_080012c0"
        },
        "FUN_08001f80": {
            "renaming": {
                "FUN_08001f80": "get_value_at_offset_08001f80",
                "param_1": "offset"
            },
            "code": "int get_value_at_offset_08001f80(int offset)\n{\n  return *(int *)(offset + 0x28);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001f80",
            "calling": [
                "FUN_08004a4c"
            ],
            "imported": false,
            "current_name": "get_value_at_offset_08001f80"
        },
        "FUN_08001f84": {
            "renaming": {
                "FUN_08001f84": "set_flag_if_not_set_08001f84",
                "param_1": "flag_ptr",
                "param_2": "param",
                "iVar1": "temp",
                "iVar3": "flag_value",
                "local_14": "iterations"
            },
            "code": "int set_flag_if_not_set_08001f84(int *flag_ptr, uint32_t param) {\n  int flag_value = *flag_ptr;\n  if ((*(uint32_t *)(flag_value + 8) & 1) == 0) {\n    *(uint32_t *)(flag_value + 8) = *(uint32_t *)(flag_value + 8) | 1;\n    uint32_t iterations = (uint32_t)((uint64_t)DAT_08002000 * (uint64_t)*(uint32_t *)PTR_DAT_08001ffc >> 0x32);\n    for (uint32_t i = iterations; i != 0; i--) {\n    }\n    int result = FUN_08001cc4(flag_ptr, param, (int)((uint64_t)DAT_08002000 * (uint64_t)*(uint32_t *)PTR_DAT_08001ffc));\n    do {\n      if ((*(uint32_t *)(*flag_ptr + 8) & 1) != 0) {\n        return 0;\n      }\n      int temp = FUN_08001cc4();\n    } while ((uint32_t)(temp - result) < 3);\n    flag_ptr[10] = flag_ptr[10] | 0x10;\n    flag_ptr[0xb] = flag_ptr[0xb] | 1;\n    *(undefined *)(flag_ptr + 9) = 0;\n    return 1;\n  }\n  else {\n    return 0;\n  }\n}",
            "called": [
                "FUN_08001cc4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001f84",
            "calling": [
                "FUN_08002004",
                "FUN_08002384"
            ],
            "imported": false,
            "current_name": "set_flag_if_not_set_08001f84"
        },
        "FUN_08000bcc": {
            "renaming": {
                "FUN_08000bcc": "initialize_system_08000bcc",
                "puVar1": "temp_sensor_1",
                "puVar2": "temp_sensor_2",
                "puVar3": "oven_temp_sensor",
                "uVar4": "result"
            },
            "code": "void initialize_system_08000bcc(void)\n{\n  // initialize temperature sensors\n  uint32_t *temp_sensor_1 = PTR_DAT_08000c90;\n  uint32_t *temp_sensor_2 = PTR_DAT_08000c94;\n  uint32_t *temp_sensor_3 = PTR_DAT_08000c98;\n  initialize_temp_sensor(*temp_sensor_1);\n  initialize_temp_sensor(*temp_sensor_2);\n  initialize_temp_sensor(*temp_sensor_3);\n  // initialize oven\n  uint32_t *oven_temp_sensor = PTR_DAT_08000c9c;\n  initialize_oven(oven_temp_sensor);\n  set_oven_mode(oven_temp_sensor, OVEN_MODE_REFLOW);\n  start_oven(oven_temp_sensor);\n  // wait for oven to reach temperature\n  wait_for_oven(oven_temp_sensor);\n  // start reflow process\n  start_reflow_process();\n  // clean up\n  stop_oven(oven_temp_sensor);\n  stop_temp_sensor(*temp_sensor_1);\n  stop_temp_sensor(*temp_sensor_2);\n  stop_temp_sensor(*temp_sensor_3);\n}\n",
            "called": [
                "FUN_08005c96",
                "FUN_08005a68",
                "FUN_08001550",
                "FUN_080058e8",
                "FUN_080057b4",
                "FUN_080058e0",
                "FUN_08001366",
                "FUN_08005848",
                "FUN_0800135a",
                "FUN_080013a4",
                "FUN_08000aec"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000bcc",
            "calling": [
                "FUN_08005f6c"
            ],
            "imported": false,
            "current_name": "initialize_system_08000bcc"
        },
        "FUN_0800281e": {
            "renaming": {
                "FUN_0800281e": "set_value_at_offset_0800281e",
                "param_1": "base_address",
                "param_2": "value",
                "param_3": "offset",
                "*(int *)(param_1 + 0x10)": "value_at_offset"
            },
            "code": "void set_value_at_offset_0800281e(int base_address, int value, int offset) {\n  if (offset == 0) {\n    *(int *)(base_address + 0x10) = value << 0x10;\n    return;\n  }\n  *(int *)(base_address + 0x10) = value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800281e",
            "calling": [
                "FUN_08004c30"
            ],
            "imported": false,
            "current_name": "set_value_at_offset_0800281e"
        },
        "FUN_08006198": {
            "renaming": {
                "FUN_08006198": "execute_functions_08006198",
                "puVar1": "function_ptrs_1",
                "iVar2": "num_functions_1",
                "iVar3": "i",
                "puVar2": "function_ptrs_2",
                "iVar4": "num_functions_2"
            },
            "code": "void execute_functions_08006198(void)\n{\n  void** function_ptrs_1 = PTR_DAT_080061d0;\n  int num_functions_1 = (int)PTR_DAT_080061d4 - (int)PTR_DAT_080061d0;\n  for (int i = 0; i < num_functions_1 >> 2; i++) {\n    (**(void(**)())(function_ptrs_1 + i * 4))();\n  }\n  do_nothing_08007328();\n  void** function_ptrs_2 = PTR_DAT_080061d8;\n  int num_functions_2 = (int)PTR_DAT_080061dc - (int)PTR_DAT_080061d8;\n  for (int i = 0; i < num_functions_2 >> 2; i++) {\n    (**(void(**)())(function_ptrs_2 + i * 4))();\n  }\n  return;\n}",
            "called": [
                "FUN_08005f5e",
                "FUN_08007328"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006198",
            "calling": [
                "FUN_08001be8"
            ],
            "imported": false,
            "current_name": "execute_functions_08006198"
        },
        "FUN_08007048": {
            "renaming": {
                "FUN_08007048": "process_result_08007048",
                "param_1": "output",
                "param_2": "input1",
                "param_3": "input2",
                "param_4": "input3",
                "puVar1": "data_ptr",
                "iVar2": "result"
            },
            "code": "void process_result_08007048(int *output, undefined4 input1, undefined4 input2, undefined4 input3)\n{\n  undefined *data_ptr;\n  int result;\n  data_ptr = PTR_DAT_08007068;\n  *(undefined4 *)PTR_DAT_08007068 = 0;\n  result = calculate_result(input1, input2, input3, input3, input3);\n  if ((result == -1) && (*(int *)data_ptr != 0)) {\n    *output = *(int *)data_ptr;\n  }\n  return;\n}\n",
            "called": [
                "FUN_08005728"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007048",
            "calling": [
                "FUN_08006f92",
                "FUN_08006f5a"
            ],
            "imported": false,
            "current_name": "process_result_08007048"
        },
        "FUN_08003c50": {
            "renaming": {
                "FUN_08003c50": "get_shifted_result_08003c50",
                "uVar1": "result",
                "FUN_08003c44": "get_value",
                "PTR_DAT_08003c6c": "shift_array",
                "DAT_08003c68": "data_pointer"
            },
            "code": "unsigned int get_shifted_result_08003c50() {\n  unsigned int result;\n  result = get_value();\n  unsigned int shift_amount = (unsigned int)(*(int *)(DAT_08003c68 + 4) << 0x15) >> 0x1d;\n  return result >> shift_amount;\n}",
            "called": [
                "FUN_08003c44"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003c50",
            "calling": [
                "FUN_08004204"
            ],
            "imported": false,
            "current_name": "get_shifted_result_08003c50"
        },
        "FUN_080065c0": {
            "renaming": {
                "FUN_080065c0": "decode_data_080065c0",
                "param_1": "data_start",
                "param_2": "data",
                "param_3": "data_end",
                "param_4": "param_4",
                "param_5": "output_fn",
                "iVar1": "index",
                "uVar2": "max_len",
                "uVar3": "data_len",
                "bVar4": "is_valid",
                "data_val": "data_val",
                "data_offset": "data_offset",
                "end": "end",
                "offset": "offset",
                "result": "result"
            },
            "code": "undefined4 decode_data_080065c0(undefined4 data_start, uint* data, uint* data_end, undefined4 param_4, code* output_fn)\n{\n    int index;\n    uint max_len = data[4];\n    if ((int)max_len < (int)data[2]) {\n        max_len = data[2];\n    }\n    *data_end = max_len;\n    if (*(char *)((int)data + 0x43) != '\\0') {\n        *data_end = max_len + 1;\n    }\n    if ((int)(*data << 0x1a) < 0) {\n        *data_end = *data_end + 2;\n    }\n    uint data_val = *data & 6;\n    if (data_val == 0) {\n        for (; (int)data_val < (int)(data[3] - *data_end); data_val++) {\n            int result = (*output_fn)(data_start, param_4, (int)data + 0x19, 1);\n            if (result == -1) {\n                return 0xffffffff;\n            }\n        }\n    }\n    uint data_len = (uint)*(byte *)((int)data + 0x43);\n    if (data_len != 0) {\n        data_len = 1;\n    }\n    uint data_offset = data_len;\n    if ((int)(*data << 0x1a) < 0) {\n        *(undefined *)((int)data + data_len + 0x43) = 0x30;\n        data_offset = data_len + 2;\n        *(undefined *)((int)data + data_len + 0x44) = *(undefined *)((int)data + 0x45);\n    }\n    int result = (*output_fn)(data_start, param_4, (int)data + 0x43, data_offset);\n    if (result != -1) {\n        uint end = data[3];\n        bool is_valid = (*data & 6) != 4;\n        if (is_valid) {\n            end = 0;\n        }\n        uint offset = 0;\n        if (!is_valid) {\n            end = end - *data_end;\n        }\n        if (!is_valid) {\n            end = end & ~((int)end >> 0x1f);\n        }\n        if ((int)data[4] < (int)data[2]) {\n            end = end + (data[2] - data[4]);\n        }\n        while (true) {\n            if (end == offset) {\n                return 0;\n            }\n            int result = (*output_fn)(data_start, param_4, (int)data + 0x1a, 1);\n            if (result == -1) break;\n            offset++;\n        }\n    }\n    return 0xffffffff;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080065c0",
            "calling": [
                "FUN_080066b0"
            ],
            "imported": false,
            "current_name": "decode_data_080065c0"
        },
        "FUN_080054d4": {
            "renaming": {
                "FUN_080054d4": "get_value_from_param_080054d4",
                "param_1": "param_value",
                "param_2": "output_value",
                "param_3": "input_value",
                "param_4": "lookup_table",
                "iVar1": "lookup_index",
                "PTR_DAT_0800550c": "lookup_table"
            },
            "code": "int get_value_from_param_080054d4(int param_value, undefined *output_value, int input_value, int PTR_DAT_0800550c) {\n    if (param_value == 0) {\n        return -1;\n    }\n    int lookup_index = get_lookup_index();\n    if (lookup_index == 0) {\n        *output_value = *(undefined *)(param_value + 0x45);\n        update_value_in_PTR_DAT_0800550c(*(int *)(PTR_DAT_0800550c + (uint)*(byte *)(param_value + 0x44) * 4),\n                 param_value + 0x45,1,PTR_DAT_0800550c,input_value);\n        return 0;\n    }\n    return -1;\n}",
            "called": [
                "FUN_080045a2",
                "FUN_0800548c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080054d4",
            "calling": [
                "FUN_0800598a"
            ],
            "imported": false,
            "current_name": "get_value_from_param_080054d4"
        },
        "FUN_08004d40": {
            "renaming": {
                "FUN_08004d40": "infinite_loop_08004d40",
                "PTR_": "PTR_ (unchanged)",
                "DAT_": "DAT_ (unchanged)"
            },
            "code": "void infinite_loop_08004d40(void)\n{\n    while(true) {\n        // Do nothing\n    }\n}",
            "called": [
                "FUN_08004d40"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004d40",
            "calling": [
                "FUN_08001b48",
                "FUN_08004d40"
            ],
            "imported": false,
            "current_name": "infinite_loop_08004d40"
        },
        "FUN_08004d44": {
            "renaming": {
                "FUN_08004d44": "set_flags_08004d44",
                "puVar1": "flags_ptr",
                "*puVar1": "*flags_ptr",
                "DAT_08004d84": "flags_ptr",
                "*DAT_08004d84": "*flags_ptr",
                "puVar1[1]": "flags_ptr[1]",
                "DAT_08004d88": "data",
                "puVar1[2]": "flags_ptr[2]",
                "*(undefined4 *)(DAT_08004d8c + 8)": "unknown_ptr"
            },
            "code": "void set_flags_08004d44(void)\n{\n  uint *DAT_08004d84;\n  DAT_08004d84 = DAT_08004d84;\n  *DAT_08004d84 |= 1;\n  DAT_08004d84[1] = DAT_08004d88 & DAT_08004d84[1];\n  *DAT_08004d84 &= 0xfef6ffff;\n  *DAT_08004d84 &= 0xfffbffff;\n  DAT_08004d84[1] &= 0xff80ffff;\n  DAT_08004d84[2] = 0x9f0000;\n  *(undefined4 *)(DAT_08004d8c + 8) = 0x8000000;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004d44",
            "calling": [
                "FUN_08001be8"
            ],
            "imported": false,
            "current_name": "set_flags_08004d44"
        },
        "FUN_0800282c": {
            "renaming": {
                "FUN_0800282c": "update_param_0800282c",
                "param_1": "new_param",
                "PTR_DAT_08002844": "data_ptr",
                "FUN_080060e4": "call_function"
            },
            "code": "void update_param_0800282c(uint new_param) {\n    uint* PTR_DAT_08002844 = (uint*)(DAT_08002844 + 0x14);\n    if ((*PTR_DAT_08002844 & new_param) != 0) {\n        *PTR_DAT_08002844 = new_param;\n        call_function();\n    }\n    return;\n}",
            "called": [
                "FUN_080060e4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800282c",
            "calling": [],
            "imported": false,
            "current_name": "update_param_0800282c"
        },
        "FUN_080015b2": {
            "renaming": {
                "FUN_080015b2": "reverse_bits_set_to_1_080015b2",
                "*param_1": "input_array",
                "iVar1": "bit_value",
                "uVar2": "bit_index",
                "uVar3": "output_value",
                "FUN_08005848": "set_bit",
                "FUN_08005890": "get_bit"
            },
            "code": "uint reverse_bits_set_to_1_080015b2(uint8_t *input_array)\n{\n  int bit_value;\n  uint output_value = 0;\n  set_bit(input_array[1], 0, true);\n  for (int bit_index = 31; bit_index >= 0; bit_index--)\n  {\n    set_bit(input_array[2], 1, true);\n    bit_value = get_bit(input_array[0], 0);\n    if (bit_value != 0)\n    {\n      output_value |= 1 << (bit_index & 0xff);\n    }\n    set_bit(input_array[2], 1, false);\n  }\n  set_bit(input_array[1], 0, false);\n  return output_value;\n}\n",
            "called": [
                "FUN_08005890",
                "FUN_08005848"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080015b2",
            "calling": [
                "FUN_080015f8"
            ],
            "imported": false,
            "current_name": "reverse_bits_set_to_1_080015b2"
        },
        "FUN_0800040c": {
            "renaming": {
                "FUN_0800040c": "reverse_bits_0800040c",
                "param_1": "input",
                "uVar1": "shifted_result",
                "uVar2": "shift_amount_3",
                "iVar3": "leading_zeros",
                "uVar4": "shift_amount",
                "in_r12": "unused_var",
                "bVar5": "condition_1",
                "bVar6": "condition_2",
                "bVar7": "condition_3"
            },
            "code": "ulonglong reverse_bits_0800040c(uint input) {\n  if (input == 0) {\n    return 0;\n  }\n  uint leading_zeros = count_leading_zeroes(input);\n  uint shift_amount = leading_zeros + 21;\n  bool shift_condition = shift_amount < 32;\n  if (!shift_condition) {\n    uint shift_amount_2 = 32 - shift_amount;\n    uint shifted_input = input << (shift_amount_2);\n    uint shifted_result = 0;\n    if (shift_condition) {\n      shifted_result = shifted_input | (0U >> (32 - shift_amount));\n    }\n    return (ulonglong)shifted_result;\n  }\n  uint shifted_input_2 = input << (leading_zeros - 11);\n  uint shifted_result_2 = shifted_input_2 | (0U >> (32 - (32 - leading_zeros)));\n  if (shift_amount < 1075) {\n    return CONCAT44(shifted_result_2 + (1074 - shift_amount) * 0x100000, 0);\n  }\n  uint shift_amount_3 = ~(1074 - shift_amount);\n  if (30 < shift_amount_3) {\n    return (ulonglong)(shifted_input_2 >> (shift_amount_3 - 31));\n  }\n  int shift_amount_4 = shift_amount_3 - 19;\n  if (shift_amount_4 == 0 || shift_amount_4 < 0 != SCARRY4(shift_amount_3 - 31, 12)) {\n    shift_amount_3++;\n    return CONCAT44(shifted_input_2 >> (shift_amount_3), 0 | shifted_input_2 << (32 - shift_amount_3));\n  }\n  return (ulonglong)(0 | shifted_input_2 >> (32 - (12 - shift_amount_4)));\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800040c",
            "calling": [
                "FUN_080015f8",
                "FUN_08001814",
                "FUN_08000cd0",
                "FUN_08001918",
                "FUN_08005da8"
            ],
            "imported": false,
            "current_name": "reverse_bits_0800040c"
        },
        "FUN_08004df4": {
            "renaming": {
                "FUN_08004df4": "subtract_four_from_input_08004df4",
                "param_1": "input_value",
                "return": "result"
            },
            "code": "int subtract_four_from_input_08004df4(int input_value) {\n    int result = input_value - 4;\n    return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004df4",
            "calling": [
                "FUN_08004df8",
                "FUN_08004e12"
            ],
            "imported": false,
            "current_name": "subtract_four_from_input_08004df4"
        },
        "FUN_08004bb0": {
            "renaming": {
                "FUN_08004bb0": "process_input_08004bb0",
                "param_1": "input_val",
                "param_2": "param_2_new_name",
                "param_3": "param_3_new_name",
                "uVar1": "func_result",
                "local_20": "bit_mask",
                "local_1c": "param_2_new_name",
                "local_18": "param_3_new_name",
                "local_14": "constant_val",
                "DAT_08004c28": "ptr_dat_08004c28",
                "DAT_08004c2c": "ptr_dat_08004c2c"
            },
            "code": "void process_input_08004bb0(uint input_val, undefined4 param_2, undefined4 param_3)\n{\n  uint bit_mask;\n  uint bit_shifted_val;\n  undefined4 func_result;\n  undefined4 param_2_new_name;\n  undefined4 param_3_new_name;\n  uint constant_val = 3;\n  uint* DAT_08004c28 = (uint*)DAT_08004c28;\n  uint* DAT_08004c2c = (uint*)DAT_08004c2c;\n  \n  func_result = FUN_08004884((input_val << 0x18) >> 0x1c);\n  bit_shifted_val = 1 << (input_val & 0xf) & 0xffff;\n  *DAT_08004c28 |= 1;\n  if ((input_val - 0xd & 0xff) < 2) {\n    *(DAT_08004c2c + 4) &= 0xf8ffffff;\n    *(DAT_08004c2c + 4) |= 0x4000000;\n  }\n  if (((input_val == 0xf) || (input_val == 0x13)) || (input_val == 0x14)) {\n    *(DAT_08004c2c + 4) &= 0xf8ffffff;\n    *(DAT_08004c2c + 4) |= 0x2000000;\n  }\n  param_2_new_name = param_2;\n  param_3_new_name = param_3;\n  FUN_08002624(func_result, &bit_shifted_val);\n  return;\n}",
            "called": [
                "FUN_08004884",
                "FUN_08002624"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004bb0",
            "calling": [
                "FUN_080057b4"
            ],
            "imported": false,
            "current_name": "process_input_08004bb0"
        },
        "FUN_08004df8": {
            "renaming": {
                "FUN_08004df8": "execute_callback_if_flag_set_08004df8",
                "param_1": "flag",
                "iVar1": "callback_ptr",
                "FUN_08004df4": "get_callback_ptr"
            },
            "code": "void execute_callback_if_flag_set_08004df8(int flag) {\n  int callback_ptr = get_callback_ptr();\n  if ((*(code **)(callback_ptr + 0x4c) != (code *)0x0) && (*(char *)(flag + 0x1c) == '\\x01')) {\n    (**(code **)(callback_ptr + 0x4c))(callback_ptr,0);\n  }\n  return;\n}",
            "called": [
                "FUN_08004df4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004df8",
            "calling": [
                "FUN_08003f18"
            ],
            "imported": false,
            "current_name": "execute_callback_if_flag_set_08004df8"
        },
        "FUN_08001510": {
            "renaming": {
                "FUN_08001510": "process_data_08001510",
                "param_1": "data",
                "param_2": "length",
                "param_3": "value1",
                "param_4": "value2",
                "param_5": "flag1",
                "param_6": "flag2",
                "param_7": "flag3",
                "FUN_080014ba": "process_helper"
            },
            "code": "undefined4* process_data_08001510(undefined4 *data, undefined4 length, undefined4 value1, undefined4 value2, undefined flag1, undefined flag2, undefined flag3) {\n  data[1] = 0;\n  *data = PTR_PTR_process_data_08001510_1_0800154c;\n  process_helper(data, 1, value1, 0xff, value2, length, flag1, flag2, flag3, 0, 0, 0, 0);\n  return data;\n}",
            "called": [
                "FUN_080014ba"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001510",
            "calling": [
                "FUN_08000b08"
            ],
            "imported": false,
            "current_name": "process_data_08001510"
        },
        "FUN_08002af8": {
            "renaming": {
                "FUN_08002af8": "check_if_valid_expression_08002af8",
                "param_1": "expression",
                "param_2": "expression_length",
                "param_3": "expression_type",
                "param_4": "error_code",
                "uVar1": "result",
                "puVar2": "expression_ptr"
            },
            "code": "int check_if_valid_expression_08002af8(uint **expression, uint *expression_length, int expression_type, uint *error_code)\n{\n    int result;\n    uint *expression_ptr;\n\n    if (*(char *)((int)expression + 0x3d) == '(') {\n        if (expression_length == NULL) {\n            result = 1;\n        }\n        else if (expression_type == 0) {\n            result = 1;\n        }\n        else if (*(char *)(expression + 0xf) == '\\x01') {\n            result = 2;\n        }\n        else {\n            *(undefined *)(expression + 0xf) = 1;\n            expression_ptr = *expression;\n            if ((*expression_ptr & 1) == 0) {\n                *expression_ptr = *expression_ptr | 1;\n            }\n            **expression = **expression & 0xfffff7ff;\n            *(undefined *)((int)expression + 0x3d) = 0x29;\n            *(undefined *)((int)expression + 0x3e) = 0x20;\n            result = 0;\n            expression[0x10] = NULL;\n            expression[9] = expression_length;\n            *(short *)((int)expression + 0x2a) = (short)expression_type;\n            expression[0xb] = error_code;\n            *(undefined2 *)(expression + 10) = *(undefined2 *)((int)expression + 0x2a);\n            *(undefined *)(expression + 0xf) = 0;\n            (*expression)[1] = (*expression)[1] | 0x700;\n        }\n    }\n    else {\n        result = 2;\n    }\n    return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002af8",
            "calling": [
                "FUN_08004e74"
            ],
            "imported": false,
            "current_name": "check_if_valid_expression_08002af8"
        },
        "FUN_080028de": {
            "renaming": {
                "FUN_080028de": "process_input_080028de",
                "param_1": "input",
                "puVar1": "ptr1"
            },
            "code": "uint32_t process_input_080028de(uint32_t **input)\n{\n    uint32_t *ptr1;\n    ptr1 = input[11];\n    if ((*(char *)((int)input + 0x3d) == '\"') && ((input[20] != (uint32_t *)0x0 || (*(char *)((int)input + 0x3e) != '@')))) {\n        if ((input[20] == (uint32_t *)0x0) && (input[4] == (uint32_t *)0xc000)) {\n            **input = **input | 0x100;\n            input[20] = (uint32_t *)((int)input[20] + 1);\n        }\n        else {\n            uint32_t var1 = *(uint16_t *)((int)input + 0x2a);\n            if (var1 == 0) {\n                **input = **input | 0x200;\n            }\n            else if (var1 == 1) {\n                if (ptr1 == (uint32_t *)0xffff0000) {\n                    **input = **input & 0xfffffbff;\n                    ptr1 = *input;\n                    if ((ptr1[1] & 0x800) == 0) {\n                        *ptr1 = *ptr1 | 0x200;\n                    }\n                    else {\n                        *ptr1 = *ptr1 & 0xfffffbff;\n                    }\n                }\n                else if (((ptr1 == (uint32_t *)0x4) || (ptr1 == (uint32_t *)0x8)) || (input[12] == (uint32_t *)0x12)) {\n                    **input = **input & 0xfffffbff;\n                    **input = **input | 0x200;\n                }\n                else if (input[11] == (uint32_t *)0x2) {\n                    **input = **input | 0x400;\n                }\n                else {\n                    **input = **input & 0xfffffbff;\n                }\n            }\n            else if (var1 == 2) {\n                if (input[11] == (uint32_t *)0x2) {\n                    **input = **input | 0x400;\n                }\n                else {\n                    **input = **input | 0x800;\n                    **input = **input & 0xfffffbff;\n                }\n                ptr1 = *input;\n                if ((ptr1[1] & 0x800) != 0) {\n                    ptr1[1] = ptr1[1] | 0x1000;\n                }\n            }\n            else {\n                **input = **input | 0x400;\n                ptr1 = *input;\n                if ((ptr1[1] & 0x800) != 0) {\n                    ptr1[1] = ptr1[1] | 0x1000;\n                }\n            }\n            input[20] = (uint32_t *)0x0;\n        }\n    }\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080028de",
            "calling": [
                "FUN_080033b8"
            ],
            "imported": false,
            "current_name": "process_input_080028de"
        },
        "FUN_08002848": {
            "renaming": {
                "FUN_08002848": "set_control_flags_08002848",
                "param_1": "control_data",
                "*param_1": "*control_data",
                "uint": "uint32_t",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "uint8_t set_control_flags_08002848(int *control_data)\n{\n    uint8_t control_flag = 0;\n    if (*(char *)((int)control_data + 0x3e) == '@') {\n        if (control_data[0x14] == 0) {\n            *(uint *)(*control_data + 0x10) = control_data[0x11] & 0xfe;\n        }\n        else {\n            *(uint *)(*control_data + 0x10) = control_data[0x11] & 0xffU | 1;\n        }\n    }\n    else if (control_data[4] == 0x4000) {\n        if (*(char *)((int)control_data + 0x3d) == '!') {\n            *(uint *)(*control_data + 0x10) = control_data[0x11] & 0xfe;\n        }\n        else {\n            *(uint *)(*control_data + 0x10) = control_data[0x11] & 0xffU | 1;\n        }\n    }\n    else if (control_data[0x14] == 0) {\n        control_flag = (uint8_t)((control_data[0x11] << 0x10) >> 0x17 & 6 | 0xf0);\n        *(uint *)(*control_data + 0x10) = control_flag;\n    }\n    else if (control_data[0x14] == 1) {\n        control_flag = (uint8_t)((control_data[0x11] << 0x10) >> 0x17 & 6 | 0xf1);\n        *(uint *)(*control_data + 0x10) = control_flag;\n    }\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002848",
            "calling": [
                "FUN_080033b8"
            ],
            "imported": false,
            "current_name": "set_control_flags_08002848"
        },
        "FUN_08004e70": {
            "renaming": {
                "FUN_08004e70": "decrement_by_four_08004e70",
                "param_1": "value"
            },
            "code": "int decrement_by_four_08004e70(int value)\n{\n  return value - 4;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004e70",
            "calling": [
                "FUN_08004ef4",
                "FUN_08004e74",
                "FUN_08004ec4"
            ],
            "imported": false,
            "current_name": "decrement_by_four_08004e70"
        },
        "FUN_080020f0": {
            "renaming": {
                "FUN_080020f0": "check_flag_080020f0",
                "param_1": "flag_ptr",
                "iVar1": "current_value",
                "iVar2": "flag_address",
                "initial_value": "initial_value"
            },
            "code": "int check_flag_080020f0(int *flag_ptr) {\n  int flag_address = *flag_ptr;\n  if ((*(uint *)(flag_address + 8) & 1) == 0) {\n    return 0;\n  }\n  *(uint *)(flag_address + 8) = *(uint *)(flag_address + 8) & 0xfffffffe;\n  int initial_value = FUN_08001cc4();\n  do {\n    if ((*(uint *)(*flag_ptr + 8) & 1) == 0) {\n      return 0;\n    }\n    int current_value = FUN_08001cc4();\n  } while ((uint)(current_value - initial_value) < 3);\n  flag_ptr[10] = flag_ptr[10] | 0x10;\n  flag_ptr[0xb] = flag_ptr[0xb] | 1;\n  return 1;\n}",
            "called": [
                "FUN_08001cc4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080020f0",
            "calling": [
                "FUN_0800224c",
                "FUN_08002348",
                "FUN_0800213c",
                "FUN_08002384"
            ],
            "imported": false,
            "current_name": "check_flag_080020f0"
        },
        "FUN_08006e10": {
            "renaming": {
                "process_data": "process_data",
                "param_1": "data",
                "param_2": "data_array",
                "uVar1": "flag",
                "iVar2": "value2",
                "local_18": "value1",
                "local_14": "ptr1",
                "FUN_08006dc8": "get_flag",
                "FUN_08006288": "get_value",
                "PTR_LAB_08006c34_1_08006e8c": "PTR_LAB_08006c34_1_08006e8c",
                "PTR_FUN_08007028": "get_ptr",
                "FUN_08006e10": "process_data_08006e10"
            },
            "code": "void process_data_08006e10(int data, int *data_array)\n{\n  ushort flag;\n  int value1;\n  int value2;\n  int *ptr1;\n  int *ptr2;\n  \n  if ((int)((uint)*(ushort *)(data_array + 3) << 0x1e) >= 0) {\n    value1 = data;\n    ptr1 = data_array;\n    flag = get_flag(data, data_array, &value1, &ptr1);\n    value2 = get_value(data, value1);\n    if (value2 != 0) {\n      *(undefined **)(data + 0x28) = PTR_LAB_08006c34_1_08006e8c;\n      *data_array = value2;\n      *(ushort *)(data_array + 3) = *(ushort *)(data_array + 3) | 0x80;\n      data_array[4] = value2;\n      data_array[5] = value1;\n      ptr2 = PTR_FUN_08007028(data, (int)*(short *)((int)data_array + 0xe));\n      if ((ptr1 != (int *)0x0) && (get_value(data, (int)*(short *)((int)data_array + 0xe)) != 0)) {\n        *(ushort *)(data_array + 3) = *(ushort *)(data_array + 3) & 0xfffc | 1;\n      }\n      *(ushort *)(data_array + 3) = flag | *(ushort *)(data_array + 3);\n      return;\n    }\n    if ((int)(short)*(ushort *)(data_array + 3) << 0x16 < 0) {\n      return;\n    }\n    *(ushort *)(data_array + 3) = *(ushort *)(data_array + 3) & 0xfffc | 2;\n  }\n  *data_array = (int)data_array + 0x47;\n  data_array[4] = (int)data_array + 0x47;\n  data_array[5] = 1;\n  return;\n}",
            "called": [
                "FUN_08006288",
                "FUN_08006dc8",
                "FUN_08007028"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006e10",
            "calling": [
                "FUN_080069e4"
            ],
            "imported": false,
            "current_name": "process_data_08006e10"
        },
        "FUN_08004e74": {
            "renaming": {
                "FUN_08004e74": "process_data_08004e74",
                "param_1": "data_ptr",
                "param_2": "flag",
                "param_3": "data_length",
                "param_4": "param_4",
                "iVar1": "result_ptr",
                "FUN_08004e70": "get_result",
                "FUN_08002af8": "process_data_helper",
                "*(int *)(param_1 + 0xc)": "*(int *)(data_ptr + 0xc)",
                "*(code **)(iVar1 + 100)": "*(code **)(result_ptr + 100)",
                "*(undefined *)(iVar1 + 0x88)": "*(undefined *)(result_ptr + 0x88)",
                "*(undefined *)(iVar1 + 0x5c)": "*(undefined *)(result_ptr + 0x5c)"
            },
            "code": "void process_data_08004e74(int data_ptr, int flag, int data_length, undefined4 param_4)\n{\n    int result_ptr;\n    result_ptr = get_result();\n    if (data_length == *(int *)(data_ptr + 0xc)) {\n        if (flag == 0) {\n            *(undefined *)(result_ptr + 0x88) = 0;\n            *(undefined *)(result_ptr + 0x5c) = 0;\n            if (*(code **)(result_ptr + 100) != (code *)0x0) {\n                (**(code **)(result_ptr + 100))();\n            }\n            process_data_08004e74_helper(data_ptr, result_ptr + 0x68, *(undefined *)(result_ptr + 0x88), 8);\n            return;\n        }\n        *(undefined *)(result_ptr + 0x5c) = 1;\n        process_data_08004e74_helper(data_ptr, result_ptr + 0x68, 0x20, 8, param_4);\n    }\n    return;\n}",
            "called": [
                "FUN_08004e70",
                "FUN_08002af8",
                "FUN_08002b84"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004e74",
            "calling": [
                "FUN_08002cf2"
            ],
            "imported": false,
            "current_name": "process_data_08004e74"
        },
        "FUN_08004c30": {
            "renaming": {
                "FUN_08004c30": "process_data_08004c30",
                "param_1": "data_ptr",
                "param_2": "data_size",
                "param_3": "flag",
                "param_4": "data_buffer",
                "FUN_0800281e": "process_data_helper"
            },
            "code": "void process_data_08004c30(undefined4 data_ptr, undefined2 data_size, int flag, undefined4 data_buffer) {\n  if (flag == 0) {\n    process_data_08004c30_helper(data_ptr, data_size, 0, data_buffer, data_buffer);\n    return;\n  }\n  process_data_08004c30_helper(data_ptr, data_size, 1, data_buffer, data_buffer);\n  return;\n}",
            "called": [
                "FUN_0800281e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004c30",
            "calling": [
                "FUN_08005848"
            ],
            "imported": false,
            "current_name": "process_data_08004c30"
        },
        "FUN_08006f38": {
            "renaming": {
                "FUN_08006f38": "update_value_based_on_input_08006f38",
                "param_1": "input_buffer",
                "param_2": "input_buffer_offset",
                "iVar1": "input_value",
                "uVar2": "new_value",
                "bVar3": "is_input_value_valid"
            },
            "code": "void update_value_based_on_input_08006f38(void* input_buffer, int input_buffer_offset)\n{\n  int input_value = get_input_value(input_buffer, *(short *)(input_buffer_offset + 0xe));\n  bool is_input_value_valid = input_value >= 0;\n  uint new_value = is_input_value_valid ? *(int *)(input_buffer_offset + 0x54) + input_value : *(ushort *)(input_buffer_offset + 0xc) & 0xffffefff;\n  if (is_input_value_valid) {\n    *(uint *)(input_buffer_offset + 0x54) = new_value;\n  }\n  else {\n    *(short *)(input_buffer_offset + 0xc) = (short)new_value;\n  }\n  return;\n}",
            "called": [
                "FUN_0800706c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006f38",
            "calling": [],
            "imported": false,
            "current_name": "update_value_based_on_input_08006f38"
        },
        "FUN_08004cce": {
            "renaming": {
                "FUN_08004cce": "get_result_08004cce",
                "param_1": "input_value",
                "uVar1": "result",
                "FUN_08004cb2": "calculate_result"
            },
            "code": "int get_result_08004cce(int input_value) {\n    int result = -1;\n    if (input_value != -1) {\n        result = calculate_result();\n    }\n    return result;\n}",
            "called": [
                "FUN_08004cb2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004cce",
            "calling": [
                "FUN_08004b3c",
                "FUN_08004948",
                "FUN_0800492c",
                "FUN_08004f4c"
            ],
            "imported": false,
            "current_name": "get_result_08004cce"
        },
        "FUN_08006eac": {
            "renaming": {
                "FUN_08006eac": "do_nothing_08006eac"
            },
            "code": "\nvoid do_nothing_08006eac(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006eac",
            "calling": [
                "FUN_08006288",
                "FUN_080061f0"
            ],
            "imported": false,
            "current_name": "do_nothing_08006eac"
        },
        "FUN_08006eae": {
            "renaming": {
                "FUN_08006eae": "do_nothing_08006eae"
            },
            "code": "\nvoid do_nothing_08006eae(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006eae",
            "calling": [
                "FUN_08006288",
                "FUN_080061f0"
            ],
            "imported": false,
            "current_name": "do_nothing_08006eae"
        },
        "FUN_08005f5c": {
            "renaming": {
                "FUN_08005f5c": "do_nothing_08005f5c"
            },
            "code": "\nvoid do_nothing_08005f5c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005f5c",
            "calling": [
                "FUN_08005f6c"
            ],
            "imported": false,
            "current_name": "do_nothing_08005f5c"
        },
        "FUN_08003ad4": {
            "renaming": {
                "FUN_08003ad4": "update_data_08003ad4",
                "param_1": "data",
                "param_2": "length",
                "puVar1": "data_pointer",
                "iVar2": "start_time",
                "iVar3": "current_time",
                "uVar4": "value",
                "data_value": "data_value",
                "data_value2": "data_value2"
            },
            "code": "uint32_t update_data_08003ad4(uint32_t *data, uint32_t length)\n{\n    uint32_t *data_pointer = DAT_08003c34;\n    uint32_t data_value = *data_pointer;\n    \n    if (((data_value & 7) < length) &&\n        (data_value = (data_value & 0xfffffff8) | length, length != (data_value & 7)))) {\n        return 1;\n    }\n    \n    if ((*data & 2) != 0) {\n        DAT_08003c38[1] = (DAT_08003c38[1] & 0xffffff0f) | data[2];\n    }\n    \n    if ((*data & 1) != 0) {\n        uint32_t data_value2 = data[1];\n        \n        if (data_value2 == 1) {\n            if ((*DAT_08003c38 & 0x20000) == 0) {\n                return 1;\n            }\n        }\n        else if ((data_value2 != 2) && ((*DAT_08003c38 & 2) == 0)) {\n            return 1;\n        }\n        \n        DAT_08003c38[1] = data_value2 | (DAT_08003c38[1] & 0xfffffffc);\n        int start_time = FUN_08001cc4();\n        \n        if (data[1] == 1) {\n            while ((DAT_08003c38[1] & 0xc) != 4) {\n                int current_time = FUN_08001cc4();\n                if (5000 < (uint32_t)(current_time - start_time)) {\n                    return 3;\n                }\n            }\n        }\n        else if (data[1] == 2) {\n            while ((DAT_08003c38[1] & 0xc) != 8) {\n                int current_time = FUN_08001cc4();\n                if (5000 < (uint32_t)(current_time - start_time)) {\n                    return 3;\n                }\n            }\n        }\n        else {\n            while ((DAT_08003c38[1] & 0xc) != 0) {\n                int current_time = FUN_08001cc4();\n                if (5000 < (uint32_t)(current_time - start_time)) {\n                    return 3;\n                }\n            }\n        }\n    }\n    \n    data_pointer = DAT_08003c34;\n    data_value = *data_pointer;\n    \n    if ((length < (data_value & 7)) &&\n        (data_value = (data_value & 0xfffffff8) | length, length != (data_value & 7)))) {\n        return 1;\n    }\n    \n    if ((*data & 4) != 0) {\n        DAT_08003c38[1] = (DAT_08003c38[1] & 0xfffff8ff) | data[3];\n    }\n    \n    if ((*data & 8) != 0) {\n        DAT_08003c38[1] = (DAT_08003c38[1] & 0xffffc7ff) | (data[4] << 3);\n    }\n    \n    uint32_t value = FUN_08003a68();\n    *(uint32_t *)PTR_DAT_08003c40 = value >> PTR_DAT_08003c3c[(DAT_08003c38[1] << 0x18) >> 0x1c];\n    FUN_08001c3c(0xf);\n    return 0;\n}",
            "called": [
                "FUN_08003afa"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003ad4",
            "calling": [
                "FUN_08001b48"
            ],
            "imported": false,
            "current_name": "update_data_08003ad4"
        },
        "FUN_08004110": {
            "renaming": {
                "FUN_08004110": "update_bit_at_index_08004110",
                "param_1": "data",
                "param_2": "index",
                "param_3": "bit_value",
                "*(uint *)(param_1 + 0x20)": "data[5]",
                "mask": "mask",
                "4": "BIT_MASK"
            },
            "code": "void update_bit_at_index_08004110(int data[], uint index, int bit_value) {\n    uint mask = ~(4 << (index & 0xff));\n    data[5] = (data[5] & mask) | (bit_value << (index & 0xff));\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004110",
            "calling": [
                "FUN_0800412c"
            ],
            "imported": false,
            "current_name": "update_bit_at_index_08004110"
        },
        "FUN_08004ce2": {
            "renaming": {
                "FUN_08004ce2": "check_if_value_in_array_08004ce2",
                "param_1": "value",
                "param_2": "array",
                "*param_2": "*array"
            },
            "code": "int check_if_value_in_array_08004ce2(int value, char* array) {\n    if (value == -1) {\n        return 0;\n    }\n    while (*array != -1) {\n        if (value == *array) {\n            return 1;\n        }\n        array += 12;\n    }\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004ce2",
            "calling": [
                "FUN_080057b4"
            ],
            "imported": false,
            "current_name": "check_if_value_in_array_08004ce2"
        },
        "FUN_08005568": {
            "renaming": {
                "FUN_08005568": "process_input_08005568",
                "param_1": "param_1",
                "param_2": "param_2",
                "bVar1": "index",
                "PTR_DAT_080055b0": "data_ptr",
                "PTR_DAT_080055b4": "address_ptr",
                "PTR_DAT_080055b8": "ptr_dat_value",
                "char_value": "char_value"
            },
            "code": "void process_input_08005568(int input_address, uint32_t input_value) {\n    if (input_address == 0) {\n        return;\n    }\n    uint8_t index = *(uint8_t *)(input_address + 0x44);\n    uint32_t* PTR_DAT_080055b0 = (uint32_t*)(PTR_DAT_080055b0 + index * 4);\n    *PTR_DAT_080055b0 = input_value;\n    int* PTR_DAT_080055b4 = (int*)(PTR_DAT_080055b4 + index * 4);\n    *PTR_DAT_080055b4 = input_address;\n    uint8_t char_value = *(uint8_t *)(input_address + 0x5a);\n    send_message(char_value, 0, 2);\n    send_message(char_value);\n    uint32_t* PTR_DAT_080055b8 = (uint32_t*)(PTR_DAT_080055b8 + index * 4);\n    int* param_1 = (int*)(input_address + 100);\n    uint16_t* param_2 = (uint16_t*)(input_address + 0x6a);\n    send_message(*PTR_DAT_080055b8, *param_1 + *param_2, 1);\n}",
            "called": [
                "FUN_0800455a",
                "FUN_08002494",
                "FUN_080024f8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005568",
            "calling": [],
            "imported": false,
            "current_name": "process_input_08005568"
        },
        "FUN_08004478": {
            "renaming": {
                "FUN_08004478": "decode_data_08004478",
                "param_1": "data_buffer",
                "param_2": "input_data",
                "param_3": "input_data_length",
                "param_4": "param_4",
                "uVar1": "data",
                "iVar2": "result"
            },
            "code": "int decode_data_08004478(int *data_buffer, ushort *input_data, int input_data_length, undefined4 param_4) {\n  undefined4 uVar1;\n  int result;\n  if (*(char *)((int)data_buffer + 0x39) == ' ') {\n    if (input_data == (ushort *)0x0) {\n      result = 1;\n    }\n    else if (input_data_length == 0) {\n      result = 1;\n    }\n    else if (*(char *)(data_buffer + 0xe) == '\\x01') {\n      result = 2;\n    }\n    else {\n      *(undefined *)(data_buffer + 0xe) = 1;\n      data_buffer[0xf] = 0;\n      *(undefined *)((int)data_buffer + 0x39) = 0x21;\n      uVar1 = get_data(param_4);\n      *(short *)(data_buffer + 9) = (short)input_data_length;\n      *(short *)((int)data_buffer + 0x26) = (short)input_data_length;\n      while (*(short *)((int)data_buffer + 0x26) != 0) {\n        *(short *)((int)data_buffer + 0x26) = *(short *)((int)data_buffer + 0x26) + -1;\n        if (data_buffer[2] == 0x1000) {\n          result = decode_block(data_buffer,0x80,0,uVar1,param_4);\n          if (result != 0) {\n            return 3;\n          }\n          *(uint *)(*data_buffer + 4) = *input_data & 0x1ff;\n          if (data_buffer[4] == 0) {\n            input_data = input_data + 1;\n          }\n          else {\n            input_data = (ushort *)((int)input_data + 1);\n          }\n        }\n        else {\n          result = decode_block(data_buffer,0x80,0,uVar1,param_4);\n          if (result != 0) {\n            return 3;\n          }\n          *(uint *)(*data_buffer + 4) = (uint)*(byte *)input_data;\n          input_data = (ushort *)((int)input_data + 1);\n        }\n      }\n      result = decode_block(data_buffer,0x40,0,uVar1,param_4);\n      if (result == 0) {\n        *(undefined *)((int)data_buffer + 0x39) = 0x20;\n        *(undefined *)(data_buffer + 0xe) = 0;\n      }\n      else {\n        result = 3;\n      }\n    }\n  }\n  else {\n    result = 2;\n  }\n  return result;\n}",
            "called": [
                "FUN_080043b4",
                "FUN_08001cc4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004478",
            "calling": [
                "FUN_080053d4"
            ],
            "imported": false,
            "current_name": "decode_data_08004478"
        },
        "FUN_08005f5e": {
            "renaming": {
                "FUN_08005f5e": "call_functions_08005f5e",
                "FUN_08002470": "call_function_one",
                "FUN_08001c32": "call_function_two"
            },
            "code": "void call_functions_08005f5e(void)\n{\n  call_function_one(3);\n  call_function_two();\n  return;\n}",
            "called": [
                "FUN_08002470",
                "FUN_08001c32"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005f5e",
            "calling": [
                "FUN_08006198"
            ],
            "imported": false,
            "current_name": "call_functions_08005f5e"
        },
        "FUN_08005cb6": {
            "renaming": {
                "FUN_08005cb6": "execute_function_pointer_08005cb6",
                "param_1": "function_pointer"
            },
            "code": "void execute_function_pointer_08005cb6(void* function_pointer) {\n    (*(void(*)())function_pointer)();\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005cb6",
            "calling": [
                "FUN_08005d42",
                "FUN_08005da8"
            ],
            "imported": false,
            "current_name": "execute_function_pointer_08005cb6"
        },
        "FUN_08003c70": {
            "renaming": {
                "FUN_08003c70": "calculate_shift_amount_08003c70",
                "uVar1": "result",
                "FUN_08003c44": "calculate_value",
                "DAT_08003c88": "global_data",
                "PTR_DAT_08003c8c": "shift_amount_array",
                "index": "shift_amount_index"
            },
            "code": "uint calculate_shift_amount_08003c70(void)\n{\n  uint result;\n  uint index = (uint)(*(int *)(DAT_08003c88 + 4) << 0x12) >> 0x1d;\n  result = calculate_value();\n  return result >> PTR_DAT_08003c8c[index];\n}",
            "called": [
                "FUN_08003c44"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003c70",
            "calling": [
                "FUN_08004204",
                "FUN_08003da4"
            ],
            "imported": false,
            "current_name": "calculate_shift_amount_08003c70"
        },
        "FUN_080053d4": {
            "renaming": {
                "FUN_080053d4": "check_param_080053d4",
                "param_1": "input_param_1",
                "param_2": "input_param_2",
                "cVar1": "c",
                "iVar2": "start_time",
                "iVar3": "c_int",
                "uVar4": "i"
            },
            "code": "uint check_param_080053d4(uint param_1, uint param_2)\n{\n  int start_time = get_current_time();\n  char c = PTR_DAT_0800547c[1];\n  int c_int = FUN_08004c78((int)c, PTR_DAT_08005480);\n  if (c_int == 0) {\n    return 0;\n  }\n  uint i = 0;\n  while ((i < 5 && ((*(int *)(PTR_DAT_08005484 + i * 4) == 0 || (c_int = FUN_08004c78((int)c, PTR_DAT_08005480), **(int **)(PTR_DAT_08005484 + i * 4) != c_int))))) {\n    i++;\n  }\n  if (i > 4) {\n    if ((4 < (byte)PTR_DAT_08005488[0x44]) && (FUN_08005384(), 4 < (byte)PTR_DAT_08005488[0x44])) {\n      return 0;\n    }\n    i = (uint)(byte)PTR_DAT_08005488[0x44];\n  }\n  do {\n    c_int = FUN_08004478(*(undefined4 *)(PTR_DAT_08005484 + i * 4), param_1, param_2 & 0xffff, 1000);\n    if (c_int == 0) {\n      return param_2;\n    }\n    start_time = get_current_time();\n  } while ((uint)(get_current_time() - start_time) < 1000);\n  return 0;\n}",
            "called": [
                "FUN_08005384",
                "FUN_08004478",
                "FUN_08001cc4",
                "FUN_08004c78"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080053d4",
            "calling": [
                "FUN_08005730"
            ],
            "imported": false,
            "current_name": "check_param_080053d4"
        },
        "FUN_08002b84": {
            "renaming": {
                "FUN_08002b84": "validate_input_08002b84",
                "param_1": "input_array",
                "param_2": "input_value",
                "param_3": "input_length",
                "param_4": "output_array",
                "puVar2": "ptr1",
                "uVar1": "return_value"
            },
            "code": "uint32_t validate_input_08002b84(uint32_t **input_array, uint32_t *input_value, int input_length, uint32_t *output_array) {\n    uint32_t return_value;\n    uint32_t *ptr1;\n    if (*(char *)((int)input_array + 0x3d) == '(') {\n        if (input_value == NULL) {\n            return_value = 1;\n        }\n        else if (input_length == 0) {\n            return_value = 1;\n        }\n        else if (*(char *)(input_array + 0xf) == '\\x01') {\n            return_value = 2;\n        }\n        else {\n            *(undefined *)(input_array + 0xf) = 1;\n            ptr1 = *input_array;\n            if ((*ptr1 & 1) == 0) {\n                *ptr1 = *ptr1 | 1;\n            }\n            **input_array = **input_array & 0xfffff7ff;\n            *(undefined *)((int)input_array + 0x3d) = 0x2a;\n            *(undefined *)((int)input_array + 0x3e) = 0x20;\n            return_value = 0;\n            input_array[0x10] = NULL;\n            input_array[9] = input_value;\n            *(short *)((int)input_array + 0x2a) = (short)input_length;\n            input_array[0xb] = output_array;\n            *(undefined2 *)(input_array + 10) = *(undefined2 *)((int)input_array + 0x2a);\n            *(undefined *)(input_array + 0xf) = 0;\n            (*input_array)[1] = (*input_array)[1] | 0x700;\n        }\n    }\n    else {\n        return_value = 2;\n    }\n    return return_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002b84",
            "calling": [
                "FUN_08004e74"
            ],
            "imported": false,
            "current_name": "validate_input_08002b84"
        },
        "FUN_08004c48": {
            "renaming": {
                "FUN_08004c48": "execute_function_with_params_08004c48",
                "param_1": "input_param_1",
                "param_2": "input_param_2",
                "param_3": "input_param_3",
                "param_4": "input_param_4",
                "FUN_08002810": "execute_function"
            },
            "code": "void execute_function_with_params_08004c48(undefined4 param_1, undefined2 param_2, undefined4 param_3, undefined4 param_4)\n{\n  execute_function(param_1, param_2, param_3, param_4, param_4);\n  return;\n}",
            "called": [
                "FUN_08002810"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004c48",
            "calling": [
                "FUN_08005890"
            ],
            "imported": false,
            "current_name": "execute_function_with_params_08004c48"
        },
        "FUN_0800042c": {
            "renaming": {
                "FUN_0800042c": "calculate_shifted_value_0800042c",
                "param_1": "number",
                "uVar1": "count",
                "uVar2": "abs_value",
                "uVar3": "shift_count",
                "iVar4": "carry",
                "uVar5": "shift_amount",
                "uVar6": "sign_bit",
                "bVar7": "is_negative",
                "bVar8": "is_zero",
                "bVar9": "is_carry"
            },
            "code": "ulonglong calculate_shifted_value_0800042c(uint number);\n\nulonglong calculate_shifted_value_0800042c(uint number);\n\nulonglong calculate_result(uint number, uint shifted_value, uint sign_bit);\n\nulonglong calculate_shifted_value_0800042c(uint number)\n{\n    uint count = 0;\n    while (number != 0)\n    {\n        number = number >> 1;\n        count++;\n    }\n    return count;\n}\n\nulonglong calculate_shifted_value_0800042c(uint number)\n{\n    uint sign_bit = number & 0x80000000;\n    uint abs_value = (int)sign_bit < 0 ? -number : number;\n    uint shift_count = calculate_shifted_value_0800042c(abs_value) + 0x15;\n    if (shift_count < 0x20)\n    {\n        uint shift_amount = shift_count & 0xff;\n        uint shifted_value = abs_value << shift_amount;\n        uint carry = shift_count < 0 ? (shift_count - 0xc) < 0 : (shift_count + 1) == 0;\n        if (!carry)\n        {\n            uint shift_amount = (0xc - shift_count) & 0xff;\n            shifted_value = abs_value >> shift_amount;\n        }\n        return calculate_result(number, shifted_value, sign_bit);\n    }\n    else\n    {\n        uint shift_amount = 0x20 - shift_count;\n        uint shifted_value = abs_value << (shift_count & 0xff);\n        if (shift_count < 0 || shift_count == 0)\n        {\n            shifted_value |= 0U >> (shift_amount & 0xff);\n        }\n        uint carry = shift_count < 0 ? (shift_count - 0xc) < 0 : (shift_count + 1) == 0;\n        uint shift_amount = carry ? shift_count + 1 : 0x432 - shift_count;\n        return CONCAT44(sign_bit | shifted_value >> (shift_amount & 0xff), 0) & 0x80000000ffffffff;\n    }\n}\n\nulonglong calculate_result(uint number, uint shifted_value, uint sign_bit)\n{\n    if (calculate_shifted_value_0800042c(number) < 0x433)\n    {\n        uint shift_amount = (0x432 - calculate_shifted_value_0800042c(number)) * 0x100000;\n        return CONCAT44(shifted_value + shift_amount | sign_bit, 0);\n    }\n    else\n    {\n        uint shift_amount = ~(0x432 - calculate_shifted_value_0800042c(number));\n        if (shift_amount > 0x1e)\n        {\n            return CONCAT44(number, shifted_value >> (shift_amount - 0x1f & 0xff)) & 0x80000000ffffffff;\n        }\n        else\n        {\n            uint carry = (shift_amount - 0x13) == 0 || (shift_amount - 0x1f) < 0 && (shift_amount - 0x1f + 0xc) < 0;\n            uint shift_amount = carry ? shift_amount + 1 : (0xc - (shift_amount - 0x13)) & 0xff;\n            return CONCAT44(sign_bit | shifted_value >> (shift_amount & 0xff), number >> (0x20 - shift_amount & 0xff)) & 0x80000000ffffffff;\n        }\n    }\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800042c",
            "calling": [
                "FUN_08000cd0",
                "FUN_08001918",
                "FUN_08005da8"
            ],
            "imported": false,
            "current_name": "calculate_shifted_value_0800042c"
        },
        "FUN_08005f6c": {
            "renaming": {
                "FUN_08005f6c": "do_nothing_and_call_function_08005f6c",
                "FUN_08000bcc": "call_first_function",
                "FUNC_08000cd0": "call_second_function",
                "FUN_08005a18": "call_third_function",
                "DAT_08005f88": "data"
            },
            "code": "void do_nothing_and_call_function_08005f6c(void)\n{\n  do_nothing();\n  call_first_function();\n  do {\n    do {\n      call_second_function();\n    } while (DAT_08005f88 == 0);\n    call_third_function();\n  } while (true);\n}",
            "called": [
                "FUN_08005f5c",
                "FUN_08005a18",
                "FUN_08000cd0",
                "FUN_08000bcc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005f6c",
            "calling": [
                "FUN_08001be8"
            ],
            "imported": false,
            "current_name": "do_nothing_and_call_function_08005f6c"
        },
        "FUN_08005cc0": {
            "renaming": {
                "FUN_08005cc0": "invoke_callback_08005cc0",
                "param_1": "callback_func_ptr",
                "param_2": "arg1",
                "param_3": "arg2",
                "param_4": "arg3",
                "PTR_DAT_08005cd0": "some_data_ptr"
            },
            "code": "void invoke_callback_08005cc0(int *callback_func_ptr, int arg1, int arg2, int arg3)\n{\n  (*callback_func_ptr)(callback_func_ptr, PTR_DAT_08005cd0, arg2, *callback_func_ptr, arg3);\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005cc0",
            "calling": [
                "FUN_08005f40",
                "FUN_08005cd4"
            ],
            "imported": false,
            "current_name": "invoke_callback_08005cc0"
        },
        "FUN_0800706c": {
            "renaming": {
                "FUN_0800706c": "process_input_0800706c",
                "param_1": "output",
                "param_2": "input_1",
                "param_3": "input_2",
                "param_4": "input_3",
                "puVar1": "ptr",
                "iVar2": "result"
            },
            "code": "void process_input_0800706c(int *output, undefined4 input_1, undefined4 input_2, undefined4 input_3)\n{\n  undefined *ptr = PTR_DAT_0800708c;\n  *(undefined4 *)PTR_DAT_0800708c = 0;\n  int result = calculate(input_1, input_2, input_3, input_3, input_3);\n  if ((result == -1) && (*(int *)ptr != 0)) {\n    *output = *(int *)ptr;\n  }\n  return;\n}",
            "called": [
                "FUN_0800572c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800706c",
            "calling": [
                "FUN_08006f38"
            ],
            "imported": false,
            "current_name": "process_input_0800706c"
        },
        "FUN_08002624": {
            "renaming": {
                "FUN_08002624": "update_bits_08002624",
                "param_1": "bits",
                "param_2": "data",
                "puVar1": "bits_ptr",
                "uVar2": "data_index",
                "uVar3": "bit_mask",
                "uVar4": "bit_value",
                "uVar5": "bits_offset",
                "uVar6": "data_type",
                "uVar7": "bits_mask",
                "uVar9": "data_value",
                "iVar8": "bits_index",
                "iVar10": "data_index",
                "data_offset": "data_offset",
                "bits_offset": "bits_offset",
                "bits_mask": "bits_mask",
                "bits_index": "bits_index",
                "data_index": "data_index"
            },
            "code": "void update_bits_08002624(uint *bits, uint *data)\n{\n  uint *bits_ptr;\n  uint bit_mask;\n  uint bit_value;\n  uint data_type;\n  uint data_offset;\n  uint bits_offset;\n  uint bits_mask;\n  int bits_index;\n  int data_index;\n  data_offset = 0;\n  bits_offset = 0;\n  do {\n    if (bits_offset > 15) {\n      return;\n    }\n    bit_mask = 1 << (bits_offset & 0xff);\n    bit_value = *data & bit_mask;\n    if (bit_mask == bit_value) {\n      data_type = data[1];\n      if (data_type == 0x12) {\n        bits_mask = data[3] + 0xc;\n      }\n      else if (data_type < 0x13) {\n        if (data_type == 2) {\n          bits_mask = data[3] + 8;\n        }\n        else if (data_type < 3) {\n          if (data_type == 0) goto LAB_SKIP;\n          if (data_type == 1) {\n            bits_mask = data[3];\n          }\n        }\n        else if (data_type == 3) {\n          bits_mask = 0;\n        }\n        else if (data_type == 0x11) {\n          bits_mask = data[3] + 4;\n        }\n      }\n      else {\n        if (data_type != PTR_DAT_08002804) {\n          if (PTR_DAT_08002804 < data_type) {\n            if (data_type == PTR_DAT_08002808) goto LAB_SKIP;\n            bits_mask = PTR_DAT_08002808 + 0x10000;\n            data_index = PTR_DAT_08002808;\n          }\n          else {\n            bits_mask = PTR_DAT_08002804 - 0x100000;\n            data_index = PTR_DAT_08002804;\n          }\n          if ((data_type != bits_mask) && (data_type != data_index - 0xf0000)) goto LAB_END;\n        }\nLAB_SKIP:\n        if (data[2] == 0) {\n          bits_mask = 4;\n        }\n        else if (data[2] == 1) {\n          bits[4] = bit_mask;\n          bits_mask = 8;\n        }\n        else {\n          bits[5] = bit_mask;\n          bits_mask = 8;\n        }\n      }\nLAB_END:\n      bits_index = bits_offset;\n      bits_ptr = bits;\n      if (0xff < bit_value) {\n        bits_index = bits_offset - 8;\n        bits_ptr = bits + 1;\n      }\n      *bits_ptr = *bits_ptr & ~(0xf << (bits_index << 2 & 0xff)) | bits_mask << (bits_index << 2 & 0xff);\n      if ((data[1] & 0x10000000) != 0) {\n        *(uint *)(PTR_DAT_080027f8 + 0x18) = *(uint *)(PTR_DAT_080027f8 + 0x18) | 1;\n        bits_index = (bits_offset & 3) << 2;\n        if (bits_ptr == PTR_DAT_0800280c) {\n          data_index = 0;\n        }\n        else if (bits_ptr == PTR_DAT_0800280c + 0x100) {\n          data_index = 1;\n        }\n        else if (bits_ptr == PTR_DAT_0800280c + 0x200) {\n          data_index = 2;\n        }\n        else if (bits_ptr == PTR_DAT_0800280c + 0x300) {\n          data_index = 3;\n        }\n        else {\n          data_index = 4;\n        }\n        *(uint *)(PTR_DAT_080027fc + ((bits_offset >> 2) + 2) * 4) =\n             *(uint *)(PTR_DAT_080027fc + ((bits_offset >> 2) + 2) * 4) & ~(0xf << bits_index) | data_index << bits_index;\n        if ((data[1] & 0x10000) == 0) {\n          *PTR_DAT_08002800 = *PTR_DAT_08002800 & ~bit_value;\n        }\n        else {\n          *PTR_DAT_08002800 = *PTR_DAT_08002800 | bit_value;\n        }\n        if ((data[1] & 0x20000) == 0) {\n          PTR_DAT_08002800[1] = PTR_DAT_08002800[1] & ~bit_value;\n        }\n        else {\n          PTR_DAT_08002800[1] = PTR_DAT_08002800[1] | bit_value;\n        }\n        if ((data[1] & 0x100000) == 0) {\n          PTR_DAT_08002800[2] = PTR_DAT_08002800[2] & ~bit_value;\n        }\n        else {\n          PTR_DAT_08002800[2] = PTR_DAT_08002800[2] | bit_value;\n        }\n        if ((data[1] & 0x200000) == 0) {\n          PTR_DAT_08002800[3] = PTR_DAT_08002800[3] & ~bit_value;\n        }\n        else {\n          PTR_DAT_08002800[3] = bit_value | PTR_DAT_08002800[3];\n        }\n      }\n    }\n    bits_offset = bits_offset + 1;\n  } while( true );\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002624",
            "calling": [
                "FUN_08004974",
                "FUN_08004bb0",
                "FUN_08004f4c"
            ],
            "imported": false,
            "current_name": "update_bits_08002624"
        },
        "FUN_080040b0": {
            "renaming": {
                "FUN_080040b0": "reverse_engineer_code_080040b0",
                "param_1": "data_ptr",
                "param_2": "param_2",
                "puVar1": "data",
                "DAT_0800410c": "DAT_constant",
                "*(undefined *)((int)param_1 + 0x3d)": "variable_1"
            },
            "code": "uint* data = *data_ptr;\n\n// Call function with reverse_engineer_code_080040b0(data, param_2, 0);\n\nif (data == DAT_0800410c && (data[8] & 0x1111) == 0 && (data[8] & 0x444) == 0) {\n    data[0x11] &= 0xffff7fff;\n}\n\nif ((data[8] & 0x1111) == 0 && (data[8] & 0x444) == 0) {\n    *data &= 0xfffffffe;\n}\n\n*(undefined *)((int)data_ptr + 0x3d) = 1;\nreturn 0;",
            "called": [
                "FUN_08004092"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080040b0",
            "calling": [
                "FUN_08004b3c"
            ],
            "imported": false,
            "current_name": "reverse_engineer_code_080040b0"
        },
        "FUN_08005d42": {
            "renaming": {
                "FUN_08005d42": "get_result_08005d42",
                "param_1": "ptr_param_array",
                "param_2": "param_2",
                "param_3": "param_3",
                "iVar1": "result",
                "iVar2": "negative_flag",
                "FUN_08005ce8": "get_result",
                "FUN_08005cb6": "get_result",
                "negative_sign": "negative_sign"
            },
            "code": "int get_result_08005d42(undefined4 *ptr_param_array, uint param_2, uint param_3) {\n  int result;\n  int negative_sign = 0x2d;\n  if (param_3 == 0) {\n    result = (**(code **)*ptr_param_array)(ptr_param_array,param_2 & 0xff);\n    return result;\n  }\n  if (param_3 != 10) {\n    result = get_result_08005d42(ptr_param_array, param_2, param_3 & 0xff);\n    return result;\n  }\n  if (-1 < (int)param_2) {\n    result = get_result_08005d42(ptr_param_array, param_2, 10);\n    return result;\n  }\n  int negative_flag = get_result_08005d42(ptr_param_array, -param_2, 10);\n  result = negative_flag + negative_sign;\n  return result;\n}",
            "called": [
                "FUN_08005cb6",
                "FUN_08005ce8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005d42",
            "calling": [
                "FUN_08005d82"
            ],
            "imported": false,
            "current_name": "get_result_08005d42"
        },
        "FUN_08004b34": {
            "renaming": {
                "FUN_08004b34": "execute_main_function_08004b34",
                "FUN_08004d90": "execute_helper_function"
            },
            "code": "void execute_main_function_08004b34(void)\n{\n  execute_helper_function();\n  return;\n}",
            "called": [
                "FUN_08004d90"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004b34",
            "calling": [
                "FUN_08003ed8"
            ],
            "imported": false,
            "current_name": "execute_main_function_08004b34"
        },
        "FUN_08004c52": {
            "renaming": {
                "FUN_08004c52": "initialize_game_08004c52",
                "FUN_08001c88": "setup_audio",
                "FUN_08001b48": "setup_graphics"
            },
            "code": "void initialize_game_08004c52(void)\n{\n  setup_audio();\n  setup_graphics();\n  return;\n}",
            "called": [
                "FUN_08001c88",
                "FUN_08001b48"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004c52",
            "calling": [
                "FUN_08001c32"
            ],
            "imported": false,
            "current_name": "initialize_game_08004c52"
        },
        "FUN_080013a4": {
            "renaming": {
                "FUN_080013a4": "update_flags_080013a4",
                "param_1": "memory_address",
                "param_2": "offset",
                "param_3": "length",
                "param_4": "flag",
                "iVar1": "increment",
                "iVar2": "index",
                "FUN_08001294": "copy_data",
                "FUN_080057b4": "send_signal",
                "FUN_080012c0": "set_flag",
                "FUN_08001310": "set_flag_with_mask"
            },
            "code": "void update_flags_080013a4(int memory_address,int offset,int length,int flag)\n{\n  int index;\n  int increment;\n  if (length > 1) {\n    *(byte *)(memory_address + 0x13) = *(byte *)(memory_address + 0x13) | 8;\n  }\n  *(char *)(memory_address + 0x17) = (char)length;\n  copy_data(memory_address,0,0x40,offset,offset + 0x40);\n  if ((flag != 0) && (length == 1)) {\n    *(byte *)(memory_address + 0x13) = *(byte *)(memory_address + 0x13) | 4;\n  }\n  send_signal(*(undefined *)(memory_address + 8),1);\n  if (*(char *)(memory_address + 9) != -1) {\n    send_signal(*(char *)(memory_address + 9),1);\n  }\n  send_signal(*(undefined *)(memory_address + 10),1);\n  index = 0;\n  while( true ) {\n    if ((*(byte *)(memory_address + 0x13) & 0x10) == 0) {\n      increment = 4;\n    }\n    else {\n      increment = 8;\n    }\n    if (increment <= index) break;\n    send_signal(*(undefined *)(memory_address + index + 0xb),1);\n    index = index + 1;\n  }\n  send_signal(*(undefined *)(memory_address + 8),0);\n  send_signal(*(undefined *)(memory_address + 10),0);\n  if (*(char *)(memory_address + 9) != -1) {\n    send_signal(*(char *)(memory_address + 9),0);\n  }\n  if ((*(byte *)(memory_address + 0x13) & 0x10) == 0) {\n    set_flag(memory_address,3);\n    set_flag(memory_address,3);\n    set_flag(memory_address,3);\n    set_flag(memory_address,2);\n  }\n  else {\n    set_flag_with_mask(memory_address,*(byte *)(memory_address + 0x13) | 0x20,0);\n    set_flag_with_mask(memory_address,*(byte *)(memory_address + 0x13) | 0x20,0);\n    set_flag_with_mask(memory_address,*(byte *)(memory_address + 0x13) | 0x20,0);\n  }\n  set_flag_with_mask(memory_address,*(byte *)(memory_address + 0x13) | 0x20,0);\n  *(undefined *)(memory_address + 0x14) = 4;\n  update_memory(memory_address);\n  update_data(memory_address);\n  *(undefined *)(memory_address + 0x15) = 2;\n  set_flag_with_mask(memory_address,6,0);\n  return;\n}",
            "called": [
                "FUN_0800138e",
                "FUN_080012c0",
                "FUN_08001294",
                "FUN_080057b4",
                "FUN_08001310",
                "FUN_0800135a",
                "FUN_08005848"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080013a4",
            "calling": [
                "FUN_080014ba",
                "FUN_08000bcc"
            ],
            "imported": false,
            "current_name": "update_flags_080013a4"
        },
        "FUN_08006d14": {
            "renaming": {
                "FUN_08006d14": "find_unused_item_08006d14",
                "param_1": "error_code",
                "param_2": "param_2",
                "param_3": "param_3",
                "param_4": "param_4",
                "piVar1": "item_ptr",
                "piVar2": "item_start_ptr",
                "iVar3": "item_start_ptr",
                "ppiVar4": "item_list_ptr_ptr"
            },
            "code": "int* find_unused_item_08006d14(undefined4* error_code, undefined4 param_2, undefined4 param_3, undefined4 param_4)\n{\n    int* item_ptr;\n    int* item_start_ptr;\n    int item_count;\n    int** item_list_ptr_ptr;\n    \n    item_start_ptr = *(int**)PTR_PTR_DAT_08006d88;\n    if (*(int*)(item_start_ptr + 0x18) == 0) {\n        initialize_items(item_start_ptr);\n    }\n    item_list_ptr_ptr = (int**)(item_start_ptr + 0x48);\n    do {\n        item_ptr = item_list_ptr_ptr[2];\n        item_count = (int)item_list_ptr_ptr[1];\n        while (item_count-- > 0) {\n            if (*(short*)(item_ptr + 3) == 0) {\n                *(undefined2*)((int)item_ptr + 0xe) = 0xffff;\n                item_ptr[0x19] = 0;\n                *(undefined2*)(item_ptr + 3) = 1;\n                *item_ptr = 0;\n                item_ptr[2] = 0;\n                item_ptr[1] = 0;\n                item_ptr[4] = 0;\n                item_ptr[5] = 0;\n                item_ptr[6] = 0;\n                initialize_item(item_ptr + 0x17, 0, 8, 1, param_4);\n                item_ptr[0xd] = 0;\n                item_ptr[0xe] = 0;\n                item_ptr[0x12] = 0;\n                item_ptr[0x13] = 0;\n                return item_ptr;\n            }\n            item_ptr = item_ptr + 0x1a;\n        }\n        if (*item_list_ptr_ptr == (int*)0x0) {\n            item_ptr = (int*)create_item(error_code, 4);\n            *item_list_ptr_ptr = item_ptr;\n            if (item_ptr == (int*)0x0) {\n                *error_code = 0xc;\n                return (int*)0x0;\n            }\n        }\n        item_list_ptr_ptr = (int**)*item_list_ptr_ptr;\n    } while (true);\n}",
            "called": [
                "FUN_08006c88",
                "FUN_08006cb4",
                "FUN_080061e0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006d14",
            "calling": [
                "FUN_08006cb4"
            ],
            "imported": false,
            "current_name": "find_unused_item_08006d14"
        },
        "FUN_080004f8": {
            "renaming": {
                "FUN_080004f8": "FUNC_080004f8"
            },
            "code": "\nulonglong FUNC_080004f8(undefined4 param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  ulonglong uVar1;\n  longlong lVar2;\n  uint uVar3;\n  uint uVar4;\n  int iVar5;\n  uint uVar6;\n  uint unaff_r5;\n  uint uVar7;\n  uint uVar8;\n  bool bVar9;\n  bool bVar10;\n  bool bVar11;\n  ulonglong uVar12;\n  \n  uVar12 = CONCAT44(param_2,param_1);\n  uVar7 = 0x7ff;\n  uVar4 = param_2 >> 0x14 & 0x7ff;\n  bVar9 = uVar4 == 0;\n  if (!bVar9) {\n    unaff_r5 = param_4 >> 0x14 & 0x7ff;\n    bVar9 = unaff_r5 == 0;\n  }\n  if (!bVar9) {\n    bVar9 = uVar4 == 0x7ff;\n  }\n  if (!bVar9) {\n    bVar9 = unaff_r5 == 0x7ff;\n  }\n  if (bVar9) {\n    uVar12 = FUN_080006d4();\n  }\n  uVar3 = (uint)(uVar12 >> 0x20);\n  iVar5 = uVar4 + unaff_r5;\n  uVar4 = uVar3 ^ param_4;\n  uVar3 = uVar3 & ~(uVar7 << 0x15);\n  param_4 = param_4 & ~(uVar7 << 0x15);\n  bVar9 = ((uint)uVar12 | uVar3 << 0xc) == 0;\n  if (!bVar9) {\n    bVar9 = (param_3 | param_4 << 0xc) == 0;\n  }\n  uVar3 = uVar3 | 0x100000;\n  param_4 = param_4 | 0x100000;\n  if (bVar9) {\n    param_3 = (uint)uVar12 | param_3;\n    param_4 = (uVar4 & 0x80000000 | uVar3) ^ param_4;\n    uVar4 = uVar7 >> 1;\n    bVar11 = SBORROW4(iVar5,uVar4);\n    uVar6 = iVar5 - uVar4;\n    bVar9 = uVar6 == 0;\n    uVar3 = uVar6;\n    if (!bVar9 && (int)uVar4 <= iVar5) {\n      bVar11 = SBORROW4(uVar7,uVar6);\n      uVar3 = uVar7 - uVar6;\n      bVar9 = uVar7 == uVar6;\n    }\n    if (!bVar9 && (int)uVar3 < 0 == bVar11) {\n      param_4 = param_4 | uVar6 * 0x100000;\n    }\n    if (!bVar9 && (int)uVar3 < 0 == bVar11) {\n      return CONCAT44(param_4,param_3);\n    }\n    param_4 = param_4 | 0x100000;\n    uVar7 = 0;\n    bVar11 = SBORROW4(uVar6,1);\n    uVar6 = uVar6 - 1;\n    bVar9 = uVar6 == 0;\n    uVar4 = uVar6;\n  }\n  else {\n    uVar1 = (uVar12 & 0xffffffff) * (ulonglong)param_3;\n    uVar12 = (uVar12 & 0xffffffff) * (ulonglong)param_4 +\n             (ulonglong)uVar3 * (ulonglong)param_3 + (uVar1 >> 0x20);\n    uVar8 = (uint)uVar12;\n    lVar2 = (ulonglong)uVar3 * (ulonglong)param_4 + (uVar12 >> 0x20);\n    uVar7 = (uint)lVar2;\n    uVar3 = (uint)((ulonglong)lVar2 >> 0x20);\n    if ((int)uVar1 != 0) {\n      uVar8 = uVar8 | 1;\n    }\n    uVar6 = (iVar5 + -0x3ff) - (uint)(uVar3 < 0x200);\n    if (uVar3 < 0x200) {\n      bVar9 = (uVar8 & 0x80000000) != 0;\n      uVar8 = uVar8 << 1;\n      lVar2 = CONCAT44(uVar3 * 2 + (uint)(CARRY4(uVar7,uVar7) || CARRY4(uVar7 * 2,(uint)bVar9)),\n                       uVar7 * 2 + (uint)bVar9);\n    }\n    param_4 = uVar4 & 0x80000000 | (int)((ulonglong)lVar2 >> 0x20) << 0xb | (uint)lVar2 >> 0x15;\n    param_3 = (uint)lVar2 << 0xb | uVar8 >> 0x15;\n    uVar7 = uVar8 * 0x800;\n    bVar10 = 0xfc < uVar6;\n    bVar11 = SBORROW4(uVar6,0xfd);\n    uVar3 = uVar6 - 0xfd;\n    bVar9 = uVar3 == 0;\n    uVar4 = uVar3;\n    if (bVar10 && !bVar9) {\n      bVar10 = 0x6ff < uVar3;\n      bVar11 = SBORROW4(uVar3,0x700);\n      uVar4 = uVar6 - 0x7fd;\n      bVar9 = uVar3 == 0x700;\n    }\n    if (!bVar10 || bVar9) {\n      bVar9 = 0x7fffffff < uVar7;\n      if (uVar7 == 0x80000000) {\n        bVar9 = (uVar8 >> 0x15 & 1) != 0;\n      }\n      return CONCAT44(param_4 + uVar6 * 0x100000 + (uint)CARRY4(param_3,(uint)bVar9),param_3 + bVar9\n                     );\n    }\n  }\n  if (!bVar9 && (int)uVar4 < 0 == bVar11) {\n    return (ulonglong)(param_4 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  bVar10 = SCARRY4(uVar6,0x36);\n  bVar9 = (int)(uVar6 + 0x36) < 0;\n  bVar11 = uVar6 == 0xffffffca;\n  if (bVar11 || bVar9 != bVar10) {\n    param_3 = 0;\n  }\n  if (bVar11 || bVar9 != bVar10) {\n    param_4 = param_4 & 0x80000000;\n  }\n  if (bVar11 || bVar9 != bVar10) {\n    return CONCAT44(param_4,param_3);\n  }\n  uVar4 = -uVar6;\n  uVar3 = uVar4 - 0x20;\n  if (0x1f < (int)uVar4) {\n    uVar6 = param_3 >> (uVar3 & 0xff) | param_4 << (0x20 - uVar3 & 0xff);\n    uVar4 = (param_4 >> (uVar3 & 0xff) & ~((param_4 & 0x80000000) >> (uVar3 & 0xff))) -\n            ((int)uVar6 >> 0x1f);\n    if ((uVar7 | param_3 << (0x20 - uVar3 & 0xff) | uVar6 << 1) == 0) {\n      uVar4 = uVar4 & ~(uVar6 >> 0x1f);\n    }\n    return CONCAT44(param_4,uVar4) & 0x80000000ffffffff;\n  }\n  iVar5 = uVar4 - 0x14;\n  if (iVar5 == 0 || iVar5 < 0 != SCARRY4(uVar3,0xc)) {\n    uVar8 = param_3 << (uVar6 + 0x20 & 0xff);\n    uVar3 = param_3 >> (uVar4 & 0xff) | param_4 << (uVar6 + 0x20 & 0xff);\n    uVar6 = uVar3 + -((int)uVar8 >> 0x1f);\n    if ((uVar7 | uVar8 << 1) == 0) {\n      uVar6 = uVar6 & ~(uVar8 >> 0x1f);\n    }\n    return CONCAT44((param_4 & 0x80000000) +\n                    ((param_4 & 0x7fffffff) >> (uVar4 & 0xff)) +\n                    (uint)CARRY4(uVar3,-((int)uVar8 >> 0x1f)),uVar6);\n  }\n  uVar4 = 0xc - iVar5;\n  uVar6 = param_3 << (uVar4 & 0xff);\n  uVar4 = param_3 >> (0x20 - uVar4 & 0xff) | param_4 << (uVar4 & 0xff);\n  uVar3 = uVar4 + -((int)uVar6 >> 0x1f);\n  if ((uVar7 | uVar6 << 1) == 0) {\n    uVar3 = uVar3 & ~(uVar6 >> 0x1f);\n  }\n  return CONCAT44((param_4 & 0x80000000) + (uint)CARRY4(uVar4,-((int)uVar6 >> 0x1f)),uVar3);\n}\n\n",
            "called": [
                "FUN_080006d4"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x080004f8",
            "calling": [
                "FUN_080015f8",
                "FUN_08001814",
                "FUN_08001918",
                "FUN_080016b4",
                "FUN_08005da8"
            ],
            "imported": false,
            "current_name": "FUNC_080004f8"
        }
    },
    "used_tokens": 227229,
    "layers": [
        [
            "FUN_08002470",
            "FUN_08007004",
            "FUN_08005740",
            "FUN_08006158",
            "FUN_08004ec4",
            "FUN_08000178",
            "FUN_08006c88",
            "FUN_080060e4",
            "FUN_0800258c",
            "FUN_08004e20",
            "FUN_0800573c",
            "FUN_080032b4",
            "FUN_08004d06",
            "FUN_080056d8",
            "FUN_080019f6",
            "FUN_08002f9c",
            "FUN_08005510",
            "FUN_08005750",
            "FUN_08002cf2",
            "FUN_08006288",
            "FUN_08002004",
            "FUN_08005754",
            "FUN_08005fc8",
            "FUN_08002ab8",
            "FUN_080068f0",
            "FUN_0800138e",
            "FUN_0800598a",
            "FUN_08001c88",
            "FUN_08001a44",
            "FUN_08002c54",
            "FUN_080043b4",
            "FUN_0800441a",
            "FUN_08004d18",
            "FUN_080006d4",
            "FUN_08006174",
            "FUN_08007028",
            "FUN_08002494",
            "FUN_080055bc",
            "FUN_08001960",
            "FUN_08004ca2",
            "FUN_08002810",
            "FUN_0800224c",
            "FUN_080054b0",
            "FUN_08006f00",
            "FUN_080016b4",
            "FUN_080018f8",
            "FUN_08005890",
            "FUN_08005da0",
            "FUN_08004cb2",
            "FUN_08004ef4",
            "FUN_08001294",
            "FUN_08002384",
            "FUN_08002ad8",
            "FUN_08004204",
            "FUN_08005da8",
            "FUN_080045fe",
            "FUN_08005f2c",
            "FUN_080055e0",
            "FUN_08005f40",
            "FUN_0800213c",
            "FUN_0800455a",
            "FUN_08001a66",
            "FUN_08003c44",
            "FUN_080028d2",
            "FUN_08000a18",
            "FUN_08005384",
            "FUN_08005b3c",
            "FUN_080046b8",
            "FUN_08004c8a",
            "FUN_08001cd0",
            "FUN_08004a4c",
            "FUN_08006112",
            "FUN_08004974",
            "FUN_08003520",
            "FUN_08002ca6",
            "FUN_08005b54",
            "FUN_08004618",
            "FUN_08006c40",
            "FUN_0800157c",
            "FUN_080045a2",
            "FUN_08001c32",
            "FUN_080047e8",
            "FUN_080057b4",
            "FUN_08001b18",
            "thunk_FUN_08005750",
            "FUN_0800092c",
            "FUN_08005d8a",
            "FUN_08002560",
            "FUN_08006e90",
            "FUN_08006920",
            "FUN_080008ba",
            "FUN_08002d1c",
            "FUN_08005714",
            "FUN_08003da4",
            "FUN_08005a44",
            "FUN_080009dc",
            "FUN_0800417c",
            "FUN_08004b94",
            "FUN_080058e0",
            "FUN_08001918",
            "FUN_0800611c",
            "FUN_080047f4",
            "FUN_080009f0",
            "FUN_0800134e",
            "FUN_08002c10",
            "FUN_08006be0",
            "FUN_080012e8",
            "FUN_08006370",
            "FUN_080024f8",
            "FUN_08001ab0",
            "FUN_08006ac0",
            "FUN_08004198",
            "FUN_08001c3c",
            "FUN_08000a2c",
            "FUN_08001366",
            "FUN_08005848",
            "FUN_08000ae8",
            "FUN_08003ed8",
            "FUN_080061e0",
            "FUN_08005604",
            "FUN_08005724",
            "FUN_08005728",
            "FUN_0800135a",
            "FUN_08005c96",
            "FUN_0800571a",
            "FUN_08002efc",
            "FUN_0800365c",
            "FUN_080033b8",
            "FUN_080069e4",
            "FUN_08004b9e",
            "FUN_08005730",
            "FUN_08002582",
            "FUN_08004884",
            "FUN_08001be8",
            "FUN_080061f0",
            "FUN_08002348",
            "FUN_080060d4",
            "FUN_08005a68",
            "FUN_08001814",
            "FUN_08000aec",
            "FUN_0800572c",
            "FUN_08004e12",
            "FUN_08000a58",
            "FUN_08001b48",
            "FUN_08004092",
            "FUN_08005cd4",
            "FUN_08005bb0",
            "FUN_080014ba",
            "FUN_08003c90",
            "FUN_08002514",
            "FUN_08005c1c",
            "FUN_08006dc8",
            "FUN_0800412c",
            "FUN_08007090",
            "FUN_0800492c",
            "FUN_0800480a",
            "FUN_080015f8",
            "FUN_08005c38",
            "FUN_08005f8c",
            "FUN_08006f5a",
            "FUN_08000b08",
            "FUN_08006cb4",
            "FUN_08004c5e",
            "FUN_08004b3c",
            "FUN_08001550",
            "FUN_08001310",
            "FUN_080009a8",
            "FUN_08004d90",
            "FUN_08005ce8",
            "FUN_0800316c",
            "FUN_08004828",
            "FUN_08003afa",
            "FUN_08004948",
            "FUN_08005b24",
            "FUN_080049f0",
            "FUN_08001e40",
            "FUN_08003a68",
            "FUN_080012a2",
            "FUN_08004c78",
            "FUN_08001e48",
            "FUN_080009b8",
            "FUN_08000aa8",
            "FUN_08000a04",
            "FUN_0800010c",
            "FUN_08001cac",
            "FUN_08005a18",
            "FUN_08003f18",
            "FUN_0800591e",
            "FUN_08002540",
            "FUN_08006344",
            "FUN_080009c8",
            "FUN_08002db2",
            "FUN_08001cc4",
            "FUN_08003ea0",
            "FUN_0800306c",
            "FUN_0800548c",
            "FUN_08004848",
            "FUN_08005d82",
            "FUN_08006f92",
            "FUN_080012c0",
            "FUN_08001f80",
            "FUN_08001f84",
            "FUN_08000bcc",
            "FUN_0800281e",
            "FUN_08006198",
            "FUN_08007048",
            "FUN_08003c50",
            "FUN_080065c0",
            "FUN_080054d4",
            "FUN_08004d40",
            "FUN_08004d44",
            "FUN_0800282c",
            "FUN_080015b2",
            "FUN_0800040c",
            "FUN_08004df4",
            "FUN_08004bb0",
            "FUN_08004df8",
            "FUN_08001510",
            "FUN_08002af8",
            "FUN_080028de",
            "FUN_08002848",
            "FUN_08004e70",
            "FUN_080020f0",
            "FUN_08006e10",
            "FUN_08004e74",
            "FUN_08004c30",
            "FUN_08006f38",
            "FUN_08004cce",
            "FUN_08003ad4",
            "FUN_08004110",
            "FUN_08004ce2",
            "FUN_08005568",
            "FUN_08004478",
            "FUN_08005f5e",
            "FUN_08005cb6",
            "FUN_08003c70",
            "FUN_080053d4",
            "FUN_08002b84",
            "FUN_08004c48",
            "FUN_0800042c",
            "FUN_08005f6c",
            "FUN_08005cc0",
            "FUN_0800706c",
            "FUN_08002624",
            "FUN_080040b0",
            "FUN_08005d42",
            "FUN_08004b34",
            "FUN_08004c52",
            "FUN_080013a4",
            "FUN_08006d14"
        ],
        [
            "FUN_080057b4",
            "FUN_08006e10"
        ]
    ],
    "locked_functions": []
}