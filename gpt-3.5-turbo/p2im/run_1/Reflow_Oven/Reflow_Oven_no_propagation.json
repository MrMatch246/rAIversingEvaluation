{
    "functions": {
        "FUN_0800010c": {
            "additional_data": {
                "<original_function_name>": {
                    "1": "initialize_flag"
                },
                "<original_variable_name_1>": {
                    "1": "flag"
                },
                "DAT_20000160": {
                    "1": "data_flag",
                    "17": "flag"
                },
                "DAT_20000160._0_1_": {
                    "1": "flag"
                },
                "FUN_0800010c": {
                    "1": "update_flag_if_unset",
                    "20": "initialize_flag",
                    "3": "initialize_flag_if_needed"
                },
                "char": {
                    "1": "flag"
                },
                "param_1": {
                    "1": "input_param",
                    "18": "input",
                    "6": "input_value"
                }
            },
            "called": [
                "FUN_08007328"
            ],
            "calling": [],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08000118) */\n\nundefined4 initialize_flag_0800010c(undefined4 input)\n\n{\n  if ((flag)DAT_20000160 == '\\0') {\n    DAT_20000160._0_1_ = '\\x01';\n  }\n  return input;\n}\n\n",
            "current_name": "initialize_flag_0800010c",
            "entrypoint": "0x0800010c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800010c": "initialize_flag_0800010c",
                "char": "flag",
                "param_1": "input"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000178": {
            "additional_data": {
                "FUN_08000178": {
                    "1": "get_end_of_string",
                    "19": "find_end_of_string",
                    "2": "find_string_length",
                    "5": "get_string_length"
                },
                "cVar1": {
                    "1": "current_byte",
                    "2": "current_char_value",
                    "20": "current_char",
                    "5": "current_character"
                },
                "param_1": {
                    "1": "input_str",
                    "10": "input_string",
                    "11": "str",
                    "9": "string"
                },
                "pcVar2": {
                    "1": "next_character_ptr",
                    "18": "next_char",
                    "5": "next_char_ptr"
                },
                "pcVar3": {
                    "1": "current_index",
                    "2": "current_character_ptr",
                    "3": "current_character",
                    "4": "current_char_ptr",
                    "9": "current_char"
                }
            },
            "called": [],
            "calling": [
                "FUN_08005ce8",
                "FUN_08005c96"
            ],
            "code": "\nchar * find_end_of_string_08000178(char *str)\n\n{\n  char current_char;\n  char *next_char;\n  char *current_char;\n  \n  current_char = str;\n  do {\n    next_char = current_char + 1;\n    current_char = *current_char;\n    current_char = next_char;\n  } while (current_char != '\\0');\n  return next_char + (-1 - (int)str);\n}\n\n",
            "current_name": "find_end_of_string_08000178",
            "entrypoint": "0x08000178",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000178": "find_end_of_string_08000178",
                "cVar1": "current_char",
                "param_1": "str",
                "pcVar2": "next_char",
                "pcVar3": "current_char"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000190": {
            "additional_data": {
                "CARRY4": {
                    "1": "carry4"
                },
                "CONCAT44": {
                    "1": "join_numbers"
                },
                "FUN_08000190": {
                    "1": "calculate_xor",
                    "2": "reverse_bits",
                    "7": "calculate"
                },
                "LAB_080002a0": {
                    "1": "label2"
                },
                "LAB_080003d4": {
                    "1": "label1"
                },
                "LZCOUNT": {
                    "1": "leading_zeros_count"
                },
                "bVar13": {
                    "1": "var13",
                    "2": "bool1",
                    "3": "flag1",
                    "4": "condition1",
                    "6": "is_zero"
                },
                "bVar14": {
                    "1": "temp14",
                    "2": "bool2",
                    "3": "flag2",
                    "4": "condition2"
                },
                "bVar15": {
                    "1": "cond3",
                    "2": "bool3",
                    "3": "condition3"
                },
                "bVar2": {
                    "1": "var2",
                    "3": "carry_bit",
                    "5": "carry1",
                    "6": "carry"
                },
                "iVar1": {
                    "1": "shifted_bits",
                    "2": "bit_shift1",
                    "3": "shift_amount1",
                    "5": "shift1"
                },
                "iVar8": {
                    "1": "temp7",
                    "3": "shift_amount2",
                    "5": "shift2"
                },
                "param_1": {
                    "1": "num1",
                    "21": "input1",
                    "7": "input_1"
                },
                "param_2": {
                    "1": "num2",
                    "20": "input2",
                    "7": "input_2"
                },
                "param_3": {
                    "1": "num3",
                    "20": "input3",
                    "7": "input_3"
                },
                "param_4": {
                    "1": "operand4",
                    "20": "input4",
                    "7": "input_4"
                },
                "uVar1": {
                    "1": "temp1"
                },
                "uVar10": {
                    "1": "shifted_second_int",
                    "2": "temp4",
                    "3": "temp3"
                },
                "uVar11": {
                    "1": "result_high",
                    "2": "temp_var2",
                    "3": "temp4"
                },
                "uVar12": {
                    "1": "result4",
                    "2": "temp6",
                    "3": "temp4",
                    "4": "temp5"
                },
                "uVar15": {
                    "1": "temp_7"
                },
                "uVar3": {
                    "1": "addition_result",
                    "3": "result1",
                    "7": "temp1"
                },
                "uVar4": {
                    "1": "result4",
                    "3": "result2",
                    "5": "temp2"
                },
                "uVar5": {
                    "1": "temp4",
                    "3": "result3",
                    "6": "temp3"
                },
                "uVar6": {
                    "1": "temp_var_10",
                    "2": "result_1",
                    "3": "result1",
                    "4": "temp4",
                    "5": "temp1"
                },
                "uVar7": {
                    "1": "result",
                    "2": "temp4",
                    "3": "result2",
                    "5": "temp2"
                },
                "uVar8": {
                    "1": "temp_var10"
                },
                "uVar9": {
                    "1": "result4",
                    "2": "temp3"
                }
            },
            "called": [],
            "calling": [
                "FUN_08005da8",
                "FUN_08001814",
                "FUN_080016b4",
                "FUN_08001a66"
            ],
            "code": "\nulonglong calculate_08000190(uint input1,uint input2,uint input3,uint input4)\n\n{\n  int shift1;\n  byte carry;\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  uint temp1;\n  uint temp2;\n  int shift2;\n  uint temp3;\n  uint temp3;\n  uint temp4;\n  uint temp5;\n  bool is_zero;\n  bool condition2;\n  bool condition3;\n  \n  temp1 = input4 ^ 0x80000000;\n  temp3 = input2 << 1;\n  input4 = input4 << 1;\n  is_zero = ((input2 ^ temp1) & 0x7fffffff) == 0;\n  condition2 = is_zero && input1 == input3;\n  if (!is_zero || input1 != input3) {\n    condition2 = (temp3 | input1) == 0;\n  }\n  if (!condition2) {\n    condition2 = (input4 | input3) == 0;\n  }\n  shift2 = (int)temp3 >> 0x15;\n  if (!condition2) {\n    condition2 = shift2 == -1;\n  }\n  shift1 = (int)input4 >> 0x15;\n  if (!condition2) {\n    condition2 = shift1 == -1;\n  }\n  if (condition2) {\n    if (shift2 == -1 || shift1 == -1) {\n      temp3 = temp1;\n      temp4 = input3;\n      if (shift2 == -1) {\n        temp3 = input2;\n        temp4 = input1;\n      }\n      if (shift2 != -1 || shift1 != -1) {\n        input3 = temp4;\n        temp1 = temp3;\n      }\n      condition2 = (temp4 | temp3 << 0xc) == 0;\n      if (condition2) {\n        condition2 = (input3 | temp1 << 0xc) == 0;\n      }\n      if (condition2) {\n        condition2 = temp3 == temp1;\n      }\n      if (!condition2) {\n        temp3 = temp3 | 0x80000;\n      }\n      return join_numbers(temp3,temp4);\n    }\n    if (((input2 ^ temp1) & 0x7fffffff) != 0 || input1 != input3) {\n      if ((temp3 | input1) == 0) {\n        input1 = input3;\n        input2 = temp1;\n      }\n      return join_numbers(input2,input1);\n    }\n    if (input2 != temp1) {\n      return 0;\n    }\n    if (temp3 >> 0x15 == 0) {\n      condition2 = (input1 & 0x80000000) != 0;\n      temp1 = input2 * 2 + (uint)condition2;\n      if (carry4(input2,input2) || carry4(input2 * 2,(uint)condition2)) {\n        temp1 = temp1 | 0x80000000;\n      }\n      return join_numbers(temp1,input1 << 1);\n    }\n    if (temp3 < 0xffc00000) {\n      return join_numbers(input2 + 0x100000,input1);\n    }\n    input2 = input2 & 0x80000000;\nlabel1:\n    return (ulonglong)(input2 | 0x7ff00000) << 0x20;\n  }\n  temp3 = temp3 >> 0x15;\n  input4 = input4 >> 0x15;\n  temp4 = input4 - temp3;\n  condition2 = temp4 != 0;\n  if (input4 < temp3) {\n    temp4 = -temp4;\n  }\n  temp3 = input1;\n  temp2 = input2;\n  if (condition2 && temp3 <= input4) {\n    temp3 = temp3 + temp4;\n    temp3 = input3;\n    temp2 = temp1;\n    input3 = input1;\n    temp1 = input2;\n  }\n  if (0x36 < temp4) {\n    return join_numbers(temp2,temp3);\n  }\n  temp2 = temp2 & 0xfffff | 0x100000;\n  if ((temp2 & 0x80000000) != 0) {\n    condition2 = temp3 != 0;\n    temp3 = -temp3;\n    temp2 = -temp2 - (uint)condition2;\n  }\n  temp2 = temp1 & 0xfffff | 0x100000;\n  if ((temp1 & 0x80000000) != 0) {\n    condition2 = input3 != 0;\n    input3 = -input3;\n    temp2 = -temp2 - (uint)condition2;\n  }\n  if (temp3 == temp4) {\n    temp2 = temp2 ^ 0x100000;\n    if (temp3 == 0) {\n      temp2 = temp2 ^ 0x100000;\n      temp3 = 1;\n    }\n    else {\n      temp4 = temp4 - 1;\n    }\n  }\n  temp1 = -temp4 + 0x20;\n  if ((int)temp4 < 0x21) {\n    temp5 = input3 << (temp1 & 0xff);\n    input3 = input3 >> (temp4 & 0xff);\n    temp1 = temp3 + input3;\n    temp3 = temp2 << (temp1 & 0xff);\n    temp1 = temp1 + temp3;\n    temp2 = temp2 + carry4(temp3,input3) + ((int)temp2 >> (temp4 & 0xff)) +\n            (uint)carry4(temp1,temp3);\n  }\n  else {\n    temp5 = temp2 << (-temp4 + 0x40 & 0xff);\n    if (input3 != 0) {\n      temp5 = temp5 | 2;\n    }\n    temp2 = (int)temp2 >> (temp4 - 0x20 & 0xff);\n    temp1 = temp3 + temp2;\n    temp2 = temp2 + ((int)temp2 >> 0x1f) + (uint)carry4(temp3,temp2);\n  }\n  input2 = temp2 & 0x80000000;\n  temp4 = temp2;\n  if ((int)temp2 < 0) {\n    condition2 = temp5 == 0;\n    temp5 = -temp5;\n    temp4 = -temp1;\n    temp1 = -(uint)!condition2 - temp1;\n    temp4 = -(uint)(condition2 <= temp4) - temp2;\n  }\n  if (0xfffff < temp4) {\n    temp3 = temp3 - 1;\n    if (0x1fffff < temp4) {\n      temp3 = temp4 & 1;\n      temp4 = temp4 >> 1;\n      carry = (byte)temp1;\n      temp1 = (uint)(temp3 != 0) << 0x1f | temp1 >> 1;\n      temp5 = (uint)(carry & 1) << 0x1f | temp5 >> 1;\n      temp3 = temp3;\n      if (0xffbfffff < temp3 * 0x200000) goto label1;\n    }\nlabel2:\n    condition2 = 0x7fffffff < temp5;\n    if (temp5 == 0x80000000) {\n      condition2 = (temp1 & 1) != 0;\n    }\n    return join_numbers(temp4 + temp3 * 0x100000 + (uint)carry4(temp1,(uint)condition2) | input2,\n                    temp1 + condition2);\n  }\n  is_zero = (temp5 & 0x80000000) != 0;\n  temp5 = temp5 << 1;\n  temp3 = temp1 * 2;\n  condition2 = carry4(temp1,temp1);\n  temp1 = temp1 * 2 + (uint)is_zero;\n  temp4 = temp4 * 2 + (uint)(condition2 || carry4(temp3,(uint)is_zero));\n  temp3 = temp3 - 2;\n  if ((temp4 & 0x100000) != 0) goto label2;\n  temp2 = temp1;\n  temp3 = temp4;\n  if (temp4 == 0) {\n    temp2 = 0;\n    temp3 = temp1;\n  }\n  shift2 = leading_zeros_count(temp3);\n  if (temp4 == 0) {\n    shift2 = shift2 + 0x20;\n  }\n  temp4 = shift2 - 0xb;\n  condition3 = SBORROW4(temp4,0x20);\n  temp1 = shift2 - 0x2b;\n  condition2 = (int)temp1 < 0;\n  is_zero = temp1 == 0;\n  if ((int)temp4 < 0x20) {\n    condition3 = Scarry4(temp1,0xc);\n    shift2 = shift2 + -0x1f;\n    condition2 = shift2 < 0;\n    is_zero = shift2 == 0;\n    temp1 = temp4;\n    if (!is_zero && condition2 == condition3) {\n      temp2 = temp3 << (temp4 & 0xff);\n      temp3 = temp3 >> (0xcU - shift2 & 0xff);\n      goto LAB_08000318;\n    }\n  }\n  if (is_zero || condition2 != condition3) {\n    temp5 = 0x20 - temp1;\n  }\n  temp3 = temp3 << (temp1 & 0xff);\n  if (is_zero || condition2 != condition3) {\n    temp3 = temp3 | temp2 >> (temp5 & 0xff);\n  }\n  if (is_zero || condition2 != condition3) {\n    temp2 = temp2 << (temp1 & 0xff);\n  }\nLAB_08000318:\n  if ((int)temp4 <= (int)temp3) {\n    return join_numbers(temp3 + (temp3 - temp4) * 0x100000 | input2,temp2);\n  }\n  temp1 = ~(temp3 - temp4);\n  if ((int)temp1 < 0x1f) {\n    shift2 = temp1 - 0x13;\n    if (shift2 != 0 && shift2 < 0 == Scarry4(temp1 - 0x1f,0xc)) {\n      return join_numbers(temp2,temp2 >> (0x20 - (0xcU - shift2) & 0xff) | temp3 << (0xcU - shift2 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    temp1 = temp1 + 1;\n    return join_numbers(input2 | temp3 >> (temp1 & 0xff),\n                    temp2 >> (temp1 & 0xff) | temp3 << (0x20 - temp1 & 0xff));\n  }\n  return join_numbers(temp2,temp3 >> (temp1 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "current_name": "calculate_08000190",
            "entrypoint": "0x08000190",
            "imported": false,
            "improved": true,
            "renaming": {
                "CARRY4": "carry4",
                "CONCAT44": "join_numbers",
                "FUN_08000190": "calculate_08000190",
                "LAB_080002a0": "label2",
                "LAB_080003d4": "label1",
                "LZCOUNT": "leading_zeros_count",
                "bVar13": "is_zero",
                "bVar14": "condition2",
                "bVar15": "condition3",
                "bVar2": "carry",
                "iVar1": "shift1",
                "iVar8": "shift2",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "temp1",
                "uVar10": "temp3",
                "uVar11": "temp4",
                "uVar12": "temp5",
                "uVar3": "temp1",
                "uVar4": "temp2",
                "uVar5": "temp3",
                "uVar6": "temp1",
                "uVar7": "temp2",
                "uVar9": "temp3"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000194": {
            "additional_data": {
                "CARRY4": {
                    "1": "check_carry"
                },
                "FUN_08000194": {
                    "1": "calculate_floating_point_product",
                    "2": "perform_calculation",
                    "7": "calculate_result"
                },
                "LZCOUNT": {
                    "1": "leading_zero_count"
                },
                "bVar13": {
                    "1": "is_match",
                    "2": "is_input2_and_input4_equal",
                    "4": "condition1",
                    "6": "is_equal"
                },
                "bVar14": {
                    "1": "is_result_zero",
                    "2": "is_equal",
                    "4": "condition2",
                    "6": "is_zero"
                },
                "bVar15": {
                    "1": "shift_carry",
                    "4": "condition3",
                    "7": "is_negative"
                },
                "bVar2": {
                    "1": "temp_bit_value",
                    "3": "byte_var",
                    "4": "carry_bit",
                    "5": "carry1",
                    "7": "carry"
                },
                "iVar1": {
                    "1": "shift_right_count1",
                    "3": "shifted_input2",
                    "4": "shift1"
                },
                "iVar6": {
                    "1": "shift_count2",
                    "2": "shift_amount2",
                    "3": "shift2"
                },
                "iVar6_temp": {
                    "1": "temp_shift1"
                },
                "param_1": {
                    "1": "input_value1",
                    "17": "input1",
                    "2": "num1",
                    "3": "a"
                },
                "param_2": {
                    "1": "input_2",
                    "17": "input2",
                    "2": "value2"
                },
                "param_3": {
                    "1": "quotient",
                    "17": "input3",
                    "2": "num3",
                    "3": "c"
                },
                "param_4": {
                    "1": "operand4",
                    "17": "input4",
                    "2": "value4",
                    "3": "d"
                },
                "return": {
                    "1": "result"
                },
                "uVar10": {
                    "1": "diff_d_b",
                    "2": "temp7",
                    "3": "result2",
                    "5": "difference"
                },
                "uVar11": {
                    "1": "result4",
                    "2": "temp4"
                },
                "uVar11_temp": {
                    "1": "temp_result_lower"
                },
                "uVar12": {
                    "1": "operand4_partial_result",
                    "2": "result"
                },
                "uVar12_temp": {
                    "1": "temp_carry_shift"
                },
                "uVar13": {
                    "1": "operand2_partial_sum_shifted"
                },
                "uVar14": {
                    "1": "operand3_partial_sum_shifted"
                },
                "uVar15": {
                    "1": "temp_var3"
                },
                "uVar16": {
                    "1": "operand5_partial_result_shifted"
                },
                "uVar17": {
                    "1": "remaining_bit_count"
                },
                "uVar18": {
                    "1": "operand1_result"
                },
                "uVar19": {
                    "1": "operand2_result"
                },
                "uVar20": {
                    "1": "operand3_result"
                },
                "uVar21": {
                    "1": "operand4_result"
                },
                "uVar22": {
                    "1": "operand5_result"
                },
                "uVar3": {
                    "1": "temp_var1",
                    "10": "temp1",
                    "2": "temp3",
                    "3": "var3",
                    "5": "sum1"
                },
                "uVar3_total": {
                    "1": "carry_result"
                },
                "uVar4": {
                    "1": "temp_value2",
                    "2": "temp4",
                    "3": "sum2",
                    "9": "temp2"
                },
                "uVar5": {
                    "1": "result_var1",
                    "2": "temp2",
                    "3": "u_var5",
                    "9": "temp3"
                },
                "uVar5_total": {
                    "1": "result_upper"
                },
                "uVar7": {
                    "1": "temp37",
                    "2": "shifted_input1",
                    "3": "temp4",
                    "6": "shifted_input2"
                },
                "uVar7_temp": {
                    "1": "temp_var2_shifted"
                },
                "uVar8": {
                    "1": "shifted_input4_scaled",
                    "2": "temp1",
                    "3": "temp5"
                },
                "uVar9": {
                    "1": "var4_shifted",
                    "2": "result2",
                    "4": "result1",
                    "6": "shifted_input4"
                },
                "uVar9_temp": {
                    "1": "temp_var4_shifted"
                }
            },
            "called": [],
            "calling": [
                "FUN_08005da8",
                "FUN_080015f8",
                "FUN_08000cd0",
                "FUN_080016b4"
            ],
            "code": "\nulonglong calculate_result_08000194(uint input1,uint input2,uint input3,uint input4)\n\n{\n  int shift1;\n  byte carry;\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  int shift2;\n  uint shifted_input2;\n  uint temp5;\n  uint shifted_input4;\n  uint difference;\n  uint temp1;\n  uint temp2;\n  bool is_equal;\n  bool is_zero;\n  bool is_negative;\n  \n  shifted_input2 = input2 << 1;\n  shifted_input4 = input4 << 1;\n  is_equal = ((input2 ^ input4) & 0x7fffffff) == 0;\n  is_zero = is_equal && input1 == input3;\n  if (!is_equal || input1 != input3) {\n    is_zero = (shifted_input2 | input1) == 0;\n  }\n  if (!is_zero) {\n    is_zero = (shifted_input4 | input3) == 0;\n  }\n  shift2 = (int)shifted_input2 >> 0x15;\n  if (!is_zero) {\n    is_zero = shift2 == -1;\n  }\n  shift1 = (int)shifted_input4 >> 0x15;\n  if (!is_zero) {\n    is_zero = shift1 == -1;\n  }\n  if (is_zero) {\n    if (shift2 == -1 || shift1 == -1) {\n      shifted_input4 = input4;\n      shifted_input2 = input3;\n      if (shift2 == -1) {\n        shifted_input4 = input2;\n        shifted_input2 = input1;\n      }\n      if (shift2 != -1 || shift1 != -1) {\n        input3 = shifted_input2;\n        input4 = shifted_input4;\n      }\n      is_zero = (shifted_input2 | shifted_input4 << 0xc) == 0;\n      if (is_zero) {\n        is_zero = (input3 | input4 << 0xc) == 0;\n      }\n      if (is_zero) {\n        is_zero = shifted_input4 == input4;\n      }\n      if (!is_zero) {\n        shifted_input4 = shifted_input4 | 0x80000;\n      }\n      result CONCAT44(shifted_input4,shifted_input2);\n    }\n    if (((input2 ^ input4) & 0x7fffffff) != 0 || input1 != input3) {\n      if ((shifted_input2 | input1) == 0) {\n        input1 = input3;\n        input2 = input4;\n      }\n      result CONCAT44(input2,input1);\n    }\n    if (input2 != input4) {\n      result 0;\n    }\n    if (shifted_input2 >> 0x15 == 0) {\n      is_zero = (input1 & 0x80000000) != 0;\n      shifted_input4 = input2 * 2 + (uint)is_zero;\n      if (check_carry(input2,input2) || check_carry(input2 * 2,(uint)is_zero)) {\n        shifted_input4 = shifted_input4 | 0x80000000;\n      }\n      result CONCAT44(shifted_input4,input1 << 1);\n    }\n    if (shifted_input2 < 0xffc00000) {\n      result CONCAT44(input2 + 0x100000,input1);\n    }\n    input2 = input2 & 0x80000000;\nLAB_080003d4:\n    result (ulonglong)(input2 | 0x7ff00000) << 0x20;\n  }\n  shifted_input2 = shifted_input2 >> 0x15;\n  shifted_input4 = shifted_input4 >> 0x15;\n  difference = shifted_input4 - shifted_input2;\n  is_zero = difference != 0;\n  if (shifted_input4 < shifted_input2) {\n    difference = -difference;\n  }\n  temp5 = input1;\n  temp3 = input2;\n  if (is_zero && shifted_input2 <= shifted_input4) {\n    shifted_input2 = shifted_input2 + difference;\n    temp5 = input3;\n    temp3 = input4;\n    input3 = input1;\n    input4 = input2;\n  }\n  if (0x36 < difference) {\n    result CONCAT44(temp3,temp5);\n  }\n  shifted_input4 = temp3 & 0xfffff | 0x100000;\n  if ((temp3 & 0x80000000) != 0) {\n    is_zero = temp5 != 0;\n    temp5 = -temp5;\n    shifted_input4 = -shifted_input4 - (uint)is_zero;\n  }\n  temp3 = input4 & 0xfffff | 0x100000;\n  if ((input4 & 0x80000000) != 0) {\n    is_zero = input3 != 0;\n    input3 = -input3;\n    temp3 = -temp3 - (uint)is_zero;\n  }\n  if (shifted_input2 == difference) {\n    temp3 = temp3 ^ 0x100000;\n    if (shifted_input2 == 0) {\n      shifted_input4 = shifted_input4 ^ 0x100000;\n      shifted_input2 = 1;\n    }\n    else {\n      difference = difference - 1;\n    }\n  }\n  temp2 = -difference + 0x20;\n  if ((int)difference < 0x21) {\n    temp1 = input3 << (temp2 & 0xff);\n    input3 = input3 >> (difference & 0xff);\n    temp1 = temp5 + input3;\n    temp2 = temp3 << (temp2 & 0xff);\n    temp2 = temp1 + temp2;\n    shifted_input4 = shifted_input4 + check_carry(temp5,input3) + ((int)temp3 >> (difference & 0xff)) +\n            (uint)check_carry(temp1,temp2);\n  }\n  else {\n    temp1 = temp3 << (-difference + 0x40 & 0xff);\n    if (input3 != 0) {\n      temp1 = temp1 | 2;\n    }\n    temp3 = (int)temp3 >> (difference - 0x20 & 0xff);\n    temp2 = temp5 + temp3;\n    shifted_input4 = shifted_input4 + ((int)temp3 >> 0x1f) + (uint)check_carry(temp5,temp3);\n  }\n  input2 = shifted_input4 & 0x80000000;\n  difference = shifted_input4;\n  if ((int)shifted_input4 < 0) {\n    is_zero = temp1 == 0;\n    temp1 = -temp1;\n    difference = -temp2;\n    temp2 = -(uint)!is_zero - temp2;\n    difference = -(uint)(is_zero <= difference) - shifted_input4;\n  }\n  if (0xfffff < difference) {\n    temp5 = shifted_input2 - 1;\n    if (0x1fffff < difference) {\n      shifted_input4 = difference & 1;\n      difference = difference >> 1;\n      carry = (byte)temp2;\n      temp2 = (uint)(shifted_input4 != 0) << 0x1f | temp2 >> 1;\n      temp1 = (uint)(carry & 1) << 0x1f | temp1 >> 1;\n      temp5 = shifted_input2;\n      if (0xffbfffff < shifted_input2 * 0x200000) goto LAB_080003d4;\n    }\nLAB_080002a0:\n    is_zero = 0x7fffffff < temp1;\n    if (temp1 == 0x80000000) {\n      is_zero = (temp2 & 1) != 0;\n    }\n    result CONCAT44(difference + temp5 * 0x100000 + (uint)check_carry(temp2,(uint)is_zero) | input2,\n                    temp2 + is_zero);\n  }\n  is_equal = (temp1 & 0x80000000) != 0;\n  temp1 = temp1 << 1;\n  temp5 = temp2 * 2;\n  is_zero = check_carry(temp2,temp2);\n  temp2 = temp2 * 2 + (uint)is_equal;\n  difference = difference * 2 + (uint)(is_zero || check_carry(temp5,(uint)is_equal));\n  temp5 = shifted_input2 - 2;\n  if ((difference & 0x100000) != 0) goto LAB_080002a0;\n  temp3 = temp2;\n  shifted_input2 = difference;\n  if (difference == 0) {\n    temp3 = 0;\n    shifted_input2 = temp2;\n  }\n  shift2 = leading_zero_count(shifted_input2);\n  if (difference == 0) {\n    shift2 = shift2 + 0x20;\n  }\n  temp2 = shift2 - 0xb;\n  is_negative = SBORROW4(temp2,0x20);\n  difference = shift2 - 0x2b;\n  is_zero = (int)difference < 0;\n  is_equal = difference == 0;\n  if ((int)temp2 < 0x20) {\n    is_negative = Scheck_carry(difference,0xc);\n    shift2 = shift2 + -0x1f;\n    is_zero = shift2 < 0;\n    is_equal = shift2 == 0;\n    difference = temp2;\n    if (!is_equal && is_zero == is_negative) {\n      temp3 = shifted_input2 << (temp2 & 0xff);\n      shifted_input2 = shifted_input2 >> (0xcU - shift2 & 0xff);\n      goto LAB_08000318;\n    }\n  }\n  if (is_equal || is_zero != is_negative) {\n    temp1 = 0x20 - difference;\n  }\n  shifted_input2 = shifted_input2 << (difference & 0xff);\n  if (is_equal || is_zero != is_negative) {\n    shifted_input2 = shifted_input2 | temp3 >> (temp1 & 0xff);\n  }\n  if (is_equal || is_zero != is_negative) {\n    temp3 = temp3 << (difference & 0xff);\n  }\nLAB_08000318:\n  if ((int)temp2 <= (int)temp5) {\n    result CONCAT44(shifted_input2 + (temp5 - temp2) * 0x100000 | input2,temp3);\n  }\n  difference = ~(temp5 - temp2);\n  if ((int)difference < 0x1f) {\n    shift2 = difference - 0x13;\n    if (shift2 != 0 && shift2 < 0 == Scheck_carry(difference - 0x1f,0xc)) {\n      result CONCAT44(shifted_input4,temp3 >> (0x20 - (0xcU - shift2) & 0xff) | shifted_input2 << (0xcU - shift2 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    difference = difference + 1;\n    result CONCAT44(input2 | shifted_input2 >> (difference & 0xff),\n                    temp3 >> (difference & 0xff) | shifted_input2 << (0x20 - difference & 0xff));\n  }\n  result CONCAT44(shifted_input4,shifted_input2 >> (difference - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "current_name": "calculate_result_08000194",
            "entrypoint": "0x08000194",
            "imported": false,
            "improved": true,
            "renaming": {
                "CARRY4": "check_carry",
                "FUN_08000194": "calculate_result_08000194",
                "LZCOUNT": "leading_zero_count",
                "bVar13": "is_equal",
                "bVar14": "is_zero",
                "bVar15": "is_negative",
                "bVar2": "carry",
                "iVar1": "shift1",
                "iVar6": "shift2",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "return": "result",
                "uVar10": "difference",
                "uVar11": "temp1",
                "uVar12": "temp2",
                "uVar3": "temp1",
                "uVar4": "temp2",
                "uVar5": "temp3",
                "uVar7": "shifted_input2",
                "uVar8": "temp5",
                "uVar9": "shifted_input4"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800040c": {
            "additional_data": {
                "0": {
                    "1": "zero"
                },
                "0U": {
                    "1": "mask"
                },
                "0x100000": {
                    "1": "shift_multiplier"
                },
                "0x13": {
                    "1": "min_shift"
                },
                "0x15": {
                    "1": "constant_1"
                },
                "0x1e": {
                    "1": "max_shift"
                },
                "0x20": {
                    "1": "bit_length"
                },
                "0x432": {
                    "1": "threshold"
                },
                "0xcU": {
                    "1": "masked_bits"
                },
                "CASE1": {
                    "1": "less_than_0x433"
                },
                "CASE2": {
                    "1": "greater_than_0x1e"
                },
                "CASE3": {
                    "1": "equal_to_or_less_than_0x13"
                },
                "CONCAT44": {
                    "1": "merge_values"
                },
                "CONST_1": {
                    "1": "constant_1"
                },
                "CONST_100000": {
                    "1": "shift_multiplier"
                },
                "CONST_20": {
                    "1": "bit_length"
                },
                "CONST_432": {
                    "1": "threshold"
                },
                "CONST_C": {
                    "1": "masked_bits"
                },
                "FUN_0800040c": {
                    "1": "bitwise_shift",
                    "2": "reverse_shift",
                    "3": "shift_and_concatenate",
                    "4": "shift_and_concat",
                    "6": "reverse_bits"
                },
                "LAB_08000318": {
                    "1": "shift_operations",
                    "2": "shift_logic"
                },
                "SWITCH": {
                    "1": "cases_1_to_3"
                },
                "bVar5": {
                    "1": "is_negative_shift_amount",
                    "2": "is_negative_count",
                    "20": "is_negative",
                    "3": "is_less_than_zero"
                },
                "bVar6": {
                    "1": "is_equal",
                    "2": "is_zero_count",
                    "20": "is_zero"
                },
                "bVar7": {
                    "1": "is_subtract",
                    "3": "carry_flag",
                    "6": "is_borrow"
                },
                "bitwiseShift": {
                    "1": "more_descriptive_function"
                },
                "iVar3": {
                    "1": "shift_count",
                    "2": "num_bits",
                    "4": "count",
                    "6": "bit_count",
                    "8": "leading_zeros"
                },
                "in_r12": {
                    "1": "zeros_to_shift",
                    "15": "remaining_bits",
                    "2": "constant",
                    "4": "remainder"
                },
                "param_1": {
                    "1": "compressed_data",
                    "24": "input",
                    "6": "input_value"
                },
                "uVar1": {
                    "1": "output",
                    "2": "concatenated_value",
                    "3": "result",
                    "6": "shifted_value",
                    "8": "result1"
                },
                "uVar2": {
                    "1": "num_bits",
                    "16": "shift_amount",
                    "6": "result2"
                },
                "uVar4": {
                    "1": "adjusted_lz_count",
                    "2": "adjusted_shift_amount",
                    "3": "offset",
                    "4": "shift_amount"
                }
            },
            "called": [],
            "calling": [
                "FUN_08005da8",
                "FUN_080015f8",
                "FUN_08000cd0",
                "FUN_08001814",
                "FUN_08001918"
            ],
            "code": "\nulonglong reverse_bits_0800040c(uint input)\n\n{\n  uint result1;\n  uint shift_amount;\n  int leading_zeros;\n  uint shift_amount;\n  uint remaining_bits;\n  bool is_negative;\n  bool is_zero;\n  bool is_borrow;\n  \n  if (input == 0) {\n    return 0;\n  }\n  result1 = 0;\n  leading_zeros = LZCOUNT(input);\n  shift_amount = leading_zeros + 0x15;\n  is_borrow = SBORROW4(shift_amount,0x20);\n  shift_amount = leading_zeros - 0xb;\n  is_negative = (int)shift_amount < 0;\n  is_zero = shift_amount == 0;\n  if (shift_amount < 0x20) {\n    is_borrow = SCARRY4(shift_amount,0xc);\n    is_negative = false;\n    is_zero = leading_zeros + 1 == 0;\n    shift_amount = shift_amount;\n    if (!is_zero && is_borrow == false) {\n      result1 = input << shift_amount;\n      input = input >> (masked_bits - (leading_zeros + 1) & 0xff);\n      goto shift_logic;\n    }\n  }\n  if (is_zero || is_negative != is_borrow) {\n    remaining_bits = 0x20 - shift_amount;\n  }\n  input = input << (shift_amount & 0xff);\n  if (is_zero || is_negative != is_borrow) {\n    input = input | mask >> (remaining_bits & 0xff);\n  }\n  if (is_zero || is_negative != is_borrow) {\n    result1 = 0 << (shift_amount & 0xff);\n  }\nshift_logic:\n  if (shift_amount < 0x433) {\n    return merge_values(input + (0x432 - shift_amount) * 0x100000,result1);\n  }\n  shift_amount = ~(0x432 - shift_amount);\n  if (0x1e < (int)shift_amount) {\n    return (ulonglong)(input >> (shift_amount - 0x1f & 0xff));\n  }\n  leading_zeros = shift_amount - 0x13;\n  if (leading_zeros == 0 || leading_zeros < 0 != SCARRY4(shift_amount - 0x1f,0xc)) {\n    shift_amount = shift_amount + 1;\n    return merge_values(input >> (shift_amount & 0xff),\n                    result1 >> (shift_amount & 0xff) | input << (0x20 - shift_amount & 0xff));\n  }\n  return (ulonglong)(result1 >> (0x20 - (masked_bits - leading_zeros) & 0xff) | input << (masked_bits - leading_zeros & 0xff));\n}\n\n",
            "current_name": "reverse_bits_0800040c",
            "entrypoint": "0x0800040c",
            "imported": false,
            "improved": true,
            "renaming": {
                "0U": "mask",
                "0xcU": "masked_bits",
                "CONCAT44": "merge_values",
                "FUN_0800040c": "reverse_bits_0800040c",
                "LAB_08000318": "shift_logic",
                "bVar5": "is_negative",
                "bVar6": "is_zero",
                "bVar7": "is_borrow",
                "iVar3": "leading_zeros",
                "in_r12": "remaining_bits",
                "param_1": "input",
                "uVar1": "result1",
                "uVar2": "shift_amount",
                "uVar4": "shift_amount"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800042c": {
            "additional_data": {
                "0x80000000": {
                    "1": "sign_bit"
                },
                "0x80000000ffffffff": {
                    "1": "mask"
                },
                "CONCAT44": {
                    "1": "combine_low_high",
                    "2": "concatenate"
                },
                "FUN_0800042c": {
                    "1": "reverse_shift_bits",
                    "12": "reverse_bits",
                    "3": "bitwise_shift"
                },
                "LAB_08000318": {
                    "1": "shift_calculation"
                },
                "LZCOUNT": {
                    "1": "leading_zero_count"
                },
                "SBORROW4": {
                    "1": "subtraction_borrow_check"
                },
                "SCARRY4": {
                    "1": "subtraction_carry_check"
                },
                "bVar7": {
                    "1": "positive",
                    "16": "is_negative",
                    "3": "is_positive"
                },
                "bVar8": {
                    "1": "is_exact_shift",
                    "2": "zero_shift",
                    "20": "is_zero"
                },
                "bVar9": {
                    "1": "is_carry_set",
                    "2": "is_overflow",
                    "3": "carry_flag",
                    "4": "overflow",
                    "8": "is_carry"
                },
                "iVar4": {
                    "1": "temp_variable4",
                    "2": "bit_count",
                    "20": "leading_zeros",
                    "3": "count"
                },
                "in_r12": {
                    "1": "updated_remaining_bits",
                    "14": "remaining_bits",
                    "2": "temp",
                    "4": "mask"
                },
                "new_parameter_name_1": {
                    "1": "new_parameter_name_1"
                },
                "param_1": {
                    "1": "input_num",
                    "27": "input",
                    "3": "input_value"
                },
                "uVar1": {
                    "1": "shift_amount",
                    "2": "bit_count",
                    "3": "shifted_input",
                    "9": "result"
                },
                "uVar2": {
                    "1": "temp_variable2",
                    "18": "abs_input",
                    "2": "result2",
                    "3": "absolute_value"
                },
                "uVar3": {
                    "1": "shift_count",
                    "20": "shift_amount",
                    "3": "shift"
                },
                "uVar5": {
                    "1": "adjusted_shift_amount",
                    "2": "shifted_amount",
                    "3": "adjusted_shift",
                    "4": "total_bits"
                },
                "uVar6": {
                    "1": "msb_position",
                    "2": "input_sign",
                    "21": "sign_bit"
                },
                "uVar7": {
                    "1": "shifted_input"
                },
                "uVar8": {
                    "1": "shifted_mask"
                }
            },
            "called": [],
            "calling": [
                "FUN_08005da8",
                "FUN_08000cd0",
                "FUN_08001918"
            ],
            "code": "\nulonglong reverse_bits_0800042c(uint input)\n\n{\n  uint result;\n  uint abs_input;\n  uint shift_amount;\n  int leading_zeros;\n  uint total_bits;\n  uint sign_bit;\n  uint remaining_bits;\n  bool is_negative;\n  bool is_zero;\n  bool is_carry;\n  \n  if (input == 0) {\n    return 0;\n  }\n  sign_bit = input & 0x80000000;\n  abs_input = input;\n  if ((int)sign_bit < 0) {\n    abs_input = -input;\n  }\n  result = 0;\n  leading_zeros = leading_zero_count(abs_input);\n  total_bits = leading_zeros + 0x15;\n  is_carry = subtraction_borrow_check(total_bits,0x20);\n  shift_amount = leading_zeros - 0xb;\n  is_negative = (int)shift_amount < 0;\n  is_zero = shift_amount == 0;\n  if (total_bits < 0x20) {\n    is_carry = subtraction_carry_check(shift_amount,0xc);\n    is_negative = false;\n    is_zero = leading_zeros + 1 == 0;\n    shift_amount = total_bits;\n    if (!is_zero && is_carry == false) {\n      result = abs_input << total_bits;\n      abs_input = abs_input >> (0xcU - (leading_zeros + 1) & 0xff);\n      goto shift_calculation;\n    }\n  }\n  if (is_zero || is_negative != is_carry) {\n    remaining_bits = 0x20 - shift_amount;\n  }\n  abs_input = abs_input << (shift_amount & 0xff);\n  if (is_zero || is_negative != is_carry) {\n    abs_input = abs_input | 0U >> (remaining_bits & 0xff);\n  }\n  if (is_zero || is_negative != is_carry) {\n    result = 0 << (shift_amount & 0xff);\n  }\nshift_calculation:\n  if (total_bits < 0x433) {\n    return concatenate(abs_input + (0x432 - total_bits) * 0x100000 | sign_bit,result);\n  }\n  shift_amount = ~(0x432 - total_bits);\n  if (0x1e < (int)shift_amount) {\n    return concatenate(input,abs_input >> (shift_amount - 0x1f & 0xff)) & 0x80000000ffffffff;\n  }\n  leading_zeros = shift_amount - 0x13;\n  if (leading_zeros == 0 || leading_zeros < 0 != subtraction_carry_check(shift_amount - 0x1f,0xc)) {\n    shift_amount = shift_amount + 1;\n    return concatenate(sign_bit | abs_input >> (shift_amount & 0xff),\n                    result >> (shift_amount & 0xff) | abs_input << (0x20 - shift_amount & 0xff));\n  }\n  return concatenate(input,result >> (0x20 - (0xcU - leading_zeros) & 0xff) | abs_input << (0xcU - leading_zeros & 0xff))\n         & 0x80000000ffffffff;\n}\n\n",
            "current_name": "reverse_bits_0800042c",
            "entrypoint": "0x0800042c",
            "imported": false,
            "improved": true,
            "renaming": {
                "CONCAT44": "concatenate",
                "FUN_0800042c": "reverse_bits_0800042c",
                "LAB_08000318": "shift_calculation",
                "LZCOUNT": "leading_zero_count",
                "SBORROW4": "subtraction_borrow_check",
                "SCARRY4": "subtraction_carry_check",
                "bVar7": "is_negative",
                "bVar8": "is_zero",
                "bVar9": "is_carry",
                "iVar4": "leading_zeros",
                "in_r12": "remaining_bits",
                "param_1": "input",
                "uVar1": "result",
                "uVar2": "abs_input",
                "uVar3": "shift_amount",
                "uVar5": "total_bits",
                "uVar6": "sign_bit"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080004f8": {
            "additional_data": {
                "FUN_080004f8": {
                    "1": "calculate_float",
                    "12": "calculate_result",
                    "2": "calculate_sum",
                    "7": "calculate_product"
                },
                "bVar10": {
                    "1": "is_carry_set",
                    "17": "flag2",
                    "2": "is_negative1",
                    "3": "is_negative"
                },
                "bVar11": {
                    "1": "temp_var10",
                    "17": "flag3",
                    "5": "is_negative2"
                },
                "bVar9": {
                    "1": "temp_var8",
                    "16": "flag1",
                    "2": "is_zero1",
                    "7": "is_zero"
                },
                "iVar5": {
                    "1": "i_var",
                    "13": "temp3",
                    "2": "temp5",
                    "3": "var3",
                    "4": "sum"
                },
                "lVar2": {
                    "1": "temp_var1",
                    "11": "result2",
                    "2": "temp2",
                    "3": "temp_var",
                    "8": "temp"
                },
                "param_1": {
                    "1": "integer_part",
                    "2": "param1",
                    "22": "input1"
                },
                "param_2": {
                    "1": "input_val_2",
                    "2": "input_param2",
                    "22": "input2"
                },
                "param_3": {
                    "1": "input_value3",
                    "2": "input_param3",
                    "21": "input3"
                },
                "param_4": {
                    "1": "input_val_4",
                    "2": "input_param4",
                    "21": "input4"
                },
                "uVar1": {
                    "1": "lower_part_result",
                    "10": "result",
                    "11": "result1",
                    "2": "temp1",
                    "3": "product"
                },
                "uVar12": {
                    "1": "concatenated",
                    "10": "combined_input",
                    "2": "concatenated_input",
                    "4": "combined_inputs"
                },
                "uVar3": {
                    "1": "temp_var1",
                    "16": "temp1",
                    "2": "temp3",
                    "3": "var1"
                },
                "uVar4": {
                    "1": "result4",
                    "15": "temp2",
                    "2": "temp4",
                    "3": "var2"
                },
                "uVar6": {
                    "1": "temp_var4",
                    "13": "temp4",
                    "2": "difference",
                    "3": "var4"
                },
                "uVar7": {
                    "1": "temp_var8",
                    "10": "temp6",
                    "2": "temp_var6",
                    "4": "temp5"
                },
                "uVar8": {
                    "1": "result_high_word",
                    "11": "temp7",
                    "2": "var7",
                    "4": "temp6"
                },
                "unaff_r5": {
                    "1": "input4",
                    "11": "temp5",
                    "2": "temp4"
                }
            },
            "called": [
                "FUN_080006d4"
            ],
            "calling": [
                "FUN_08005da8",
                "FUN_080015f8",
                "FUN_08001814",
                "FUN_08001918",
                "FUN_080016b4"
            ],
            "code": "\nulonglong calculate_result_080004f8(undefined4 input1,uint input2,uint input3,uint input4)\n\n{\n  ulonglong result1;\n  longlong result2;\n  uint temp1;\n  uint temp2;\n  int temp3;\n  uint temp4;\n  uint temp5;\n  uint temp6;\n  uint temp7;\n  bool flag1;\n  bool flag2;\n  bool flag3;\n  ulonglong combined_input;\n  \n  combined_input = CONCAT44(input2,input1);\n  temp6 = 0x7ff;\n  temp2 = input2 >> 0x14 & 0x7ff;\n  flag1 = temp2 == 0;\n  if (!flag1) {\n    temp5 = input4 >> 0x14 & 0x7ff;\n    flag1 = temp5 == 0;\n  }\n  if (!flag1) {\n    flag1 = temp2 == 0x7ff;\n  }\n  if (!flag1) {\n    flag1 = temp5 == 0x7ff;\n  }\n  if (flag1) {\n    combined_input = FUN_080006d4();\n  }\n  temp1 = (uint)(combined_input >> 0x20);\n  temp3 = temp2 + temp5;\n  temp2 = temp1 ^ input4;\n  temp1 = temp1 & ~(temp6 << 0x15);\n  input4 = input4 & ~(temp6 << 0x15);\n  flag1 = ((uint)combined_input | temp1 << 0xc) == 0;\n  if (!flag1) {\n    flag1 = (input3 | input4 << 0xc) == 0;\n  }\n  temp1 = temp1 | 0x100000;\n  input4 = input4 | 0x100000;\n  if (flag1) {\n    input3 = (uint)combined_input | input3;\n    input4 = (temp2 & 0x80000000 | temp1) ^ input4;\n    temp2 = temp6 >> 1;\n    flag3 = SBORROW4(temp3,temp2);\n    temp4 = temp3 - temp2;\n    flag1 = temp4 == 0;\n    temp1 = temp4;\n    if (!flag1 && (int)temp2 <= temp3) {\n      flag3 = SBORROW4(temp6,temp4);\n      temp1 = temp6 - temp4;\n      flag1 = temp6 == temp4;\n    }\n    if (!flag1 && (int)temp1 < 0 == flag3) {\n      input4 = input4 | temp4 * 0x100000;\n    }\n    if (!flag1 && (int)temp1 < 0 == flag3) {\n      return CONCAT44(input4,input3);\n    }\n    input4 = input4 | 0x100000;\n    temp6 = 0;\n    flag3 = SBORROW4(temp4,1);\n    temp4 = temp4 - 1;\n    flag1 = temp4 == 0;\n    temp2 = temp4;\n  }\n  else {\n    result1 = (combined_input & 0xffffffff) * (ulonglong)input3;\n    combined_input = (combined_input & 0xffffffff) * (ulonglong)input4 +\n             (ulonglong)temp1 * (ulonglong)input3 + (result1 >> 0x20);\n    temp7 = (uint)combined_input;\n    result2 = (ulonglong)temp1 * (ulonglong)input4 + (combined_input >> 0x20);\n    temp6 = (uint)result2;\n    temp1 = (uint)((ulonglong)result2 >> 0x20);\n    if ((int)result1 != 0) {\n      temp7 = temp7 | 1;\n    }\n    temp4 = (temp3 + -0x3ff) - (uint)(temp1 < 0x200);\n    if (temp1 < 0x200) {\n      flag1 = (temp7 & 0x80000000) != 0;\n      temp7 = temp7 << 1;\n      result2 = CONCAT44(temp1 * 2 + (uint)(CARRY4(temp6,temp6) || CARRY4(temp6 * 2,(uint)flag1)),\n                       temp6 * 2 + (uint)flag1);\n    }\n    input4 = temp2 & 0x80000000 | (int)((ulonglong)result2 >> 0x20) << 0xb | (uint)result2 >> 0x15;\n    input3 = (uint)result2 << 0xb | temp7 >> 0x15;\n    temp6 = temp7 * 0x800;\n    flag2 = 0xfc < temp4;\n    flag3 = SBORROW4(temp4,0xfd);\n    temp1 = temp4 - 0xfd;\n    flag1 = temp1 == 0;\n    temp2 = temp1;\n    if (flag2 && !flag1) {\n      flag2 = 0x6ff < temp1;\n      flag3 = SBORROW4(temp1,0x700);\n      temp2 = temp4 - 0x7fd;\n      flag1 = temp1 == 0x700;\n    }\n    if (!flag2 || flag1) {\n      flag1 = 0x7fffffff < temp6;\n      if (temp6 == 0x80000000) {\n        flag1 = (temp7 >> 0x15 & 1) != 0;\n      }\n      return CONCAT44(input4 + temp4 * 0x100000 + (uint)CARRY4(input3,(uint)flag1),input3 + flag1\n                     );\n    }\n  }\n  if (!flag1 && (int)temp2 < 0 == flag3) {\n    return (ulonglong)(input4 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  flag2 = SCARRY4(temp4,0x36);\n  flag1 = (int)(temp4 + 0x36) < 0;\n  flag3 = temp4 == 0xffffffca;\n  if (flag3 || flag1 != flag2) {\n    input3 = 0;\n  }\n  if (flag3 || flag1 != flag2) {\n    input4 = input4 & 0x80000000;\n  }\n  if (flag3 || flag1 != flag2) {\n    return CONCAT44(input4,input3);\n  }\n  temp2 = -temp4;\n  temp1 = temp2 - 0x20;\n  if (0x1f < (int)temp2) {\n    temp4 = input3 >> (temp1 & 0xff) | input4 << (0x20 - temp1 & 0xff);\n    temp2 = (input4 >> (temp1 & 0xff) & ~((input4 & 0x80000000) >> (temp1 & 0xff))) -\n            ((int)temp4 >> 0x1f);\n    if ((temp6 | input3 << (0x20 - temp1 & 0xff) | temp4 << 1) == 0) {\n      temp2 = temp2 & ~(temp4 >> 0x1f);\n    }\n    return CONCAT44(input4,temp2) & 0x80000000ffffffff;\n  }\n  temp3 = temp2 - 0x14;\n  if (temp3 == 0 || temp3 < 0 != SCARRY4(temp1,0xc)) {\n    temp7 = input3 << (temp4 + 0x20 & 0xff);\n    temp1 = input3 >> (temp2 & 0xff) | input4 << (temp4 + 0x20 & 0xff);\n    temp4 = temp1 + -((int)temp7 >> 0x1f);\n    if ((temp6 | temp7 << 1) == 0) {\n      temp4 = temp4 & ~(temp7 >> 0x1f);\n    }\n    return CONCAT44((input4 & 0x80000000) +\n                    ((input4 & 0x7fffffff) >> (temp2 & 0xff)) +\n                    (uint)CARRY4(temp1,-((int)temp7 >> 0x1f)),temp4);\n  }\n  temp2 = 0xc - temp3;\n  temp4 = input3 << (temp2 & 0xff);\n  temp2 = input3 >> (0x20 - temp2 & 0xff) | input4 << (temp2 & 0xff);\n  temp1 = temp2 + -((int)temp4 >> 0x1f);\n  if ((temp6 | temp4 << 1) == 0) {\n    temp1 = temp1 & ~(temp4 >> 0x1f);\n  }\n  return CONCAT44((input4 & 0x80000000) + (uint)CARRY4(temp2,-((int)temp4 >> 0x1f)),temp1);\n}\n\n",
            "current_name": "calculate_result_080004f8",
            "entrypoint": "0x080004f8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080004f8": "calculate_result_080004f8",
                "bVar10": "flag2",
                "bVar11": "flag3",
                "bVar9": "flag1",
                "iVar5": "temp3",
                "lVar2": "result2",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "result1",
                "uVar12": "combined_input",
                "uVar3": "temp1",
                "uVar4": "temp2",
                "uVar6": "temp4",
                "uVar7": "temp6",
                "uVar8": "temp7",
                "unaff_r5": "temp5"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080006d4": {
            "additional_data": {
                "CONCAT44": {
                    "1": "join_values"
                },
                "FUN_080006d4": {
                    "1": "calculate_bitwise_xor",
                    "2": "calculate_bitwise",
                    "3": "extract_bit_range",
                    "8": "reverse_bits"
                },
                "bVar4": {
                    "1": "check_condition",
                    "23": "is_zero"
                },
                "in_r12": {
                    "1": "flag2",
                    "2": "bit_5",
                    "3": "mask",
                    "4": "temp_2",
                    "5": "bit5"
                },
                "param_1": {
                    "1": "input_a",
                    "11": "input_1",
                    "16": "input1"
                },
                "param_2": {
                    "1": "value2",
                    "11": "input_2",
                    "16": "input2"
                },
                "param_3": {
                    "1": "third_param",
                    "11": "input_3",
                    "16": "input3"
                },
                "param_4": {
                    "1": "value4",
                    "11": "input_4",
                    "16": "input4"
                },
                "uVar1": {
                    "1": "bit_check_1",
                    "3": "temp2",
                    "5": "bit_1",
                    "9": "bit1"
                },
                "uVar2": {
                    "1": "temp4",
                    "2": "temp_3",
                    "3": "temp3",
                    "4": "bit3",
                    "5": "bit2"
                },
                "uVar3": {
                    "1": "var_3",
                    "2": "temp4",
                    "3": "bit_3",
                    "4": "bit4",
                    "5": "bit3"
                },
                "uVar4": {
                    "1": "result2"
                },
                "uVar5": {
                    "1": "temp_var_1"
                },
                "uVar6": {
                    "1": "temp_var_2"
                },
                "unaff_r4": {
                    "1": "bit_check_2",
                    "2": "bit_2",
                    "4": "bit2",
                    "5": "temp_1",
                    "6": "temp1"
                }
            },
            "called": [],
            "calling": [
                "FUN_080004f8"
            ],
            "code": "\nulonglong reverse_bits_080006d4(uint input1,uint input2,uint input3,uint input4)\n\n{\n  uint bit1;\n  uint temp1;\n  uint bit2;\n  uint bit3;\n  uint bit5;\n  bool is_zero;\n  \n  bit2 = bit5 & input4 >> 0x14;\n  if (temp1 != bit5 && bit2 != bit5) {\n    is_zero = (input1 | input2 << 1) == 0;\n    if (!is_zero) {\n      is_zero = (input3 | input4 << 1) == 0;\n    }\n    if (is_zero) {\n      return (ulonglong)((input2 ^ input4) & 0x80000000) << 0x20;\n    }\n    if (temp1 == 0) {\n      bit3 = input2 & 0x80000000;\n      do {\n        bit1 = input1 & 0x80000000;\n        input1 = input1 << 1;\n        input2 = input2 * 2 + (uint)(bit1 != 0);\n      } while ((input2 & 0x100000) == 0);\n      input2 = input2 | bit3;\n      if (bit2 != 0) {\n        return join_values(input2,input1);\n      }\n    }\n    do {\n      bit2 = input3 & 0x80000000;\n      input3 = input3 << 1;\n      input4 = input4 * 2 + (uint)(bit2 != 0);\n    } while ((input4 & 0x100000) == 0);\n    return join_values(input2,input1);\n  }\n  is_zero = (input1 | input2 << 1) == 0;\n  if (is_zero) {\n    input2 = input4;\n    input1 = input3;\n  }\n  if (!is_zero) {\n    is_zero = (input3 | input4 << 1) == 0;\n  }\n  bit3 = input2;\n  if (((!is_zero) && ((temp1 != bit5 || ((input1 | input2 << 0xc) == 0)))) &&\n     ((bit2 != bit5 || (input1 = input3, bit3 = input4, (input3 | input4 << 0xc) == 0)))) {\n    return (ulonglong)((input2 ^ input4) & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  return join_values(bit3,input1) | 0x7ff8000000000000;\n}\n\n",
            "current_name": "reverse_bits_080006d4",
            "entrypoint": "0x080006d4",
            "imported": false,
            "improved": true,
            "renaming": {
                "CONCAT44": "join_values",
                "FUN_080006d4": "reverse_bits_080006d4",
                "bVar4": "is_zero",
                "in_r12": "bit5",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "bit1",
                "uVar2": "bit2",
                "uVar3": "bit3",
                "unaff_r4": "temp1"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800074c": {
            "additional_data": {
                "FUN_0800074c": {
                    "1": "calculate_floating_point_value",
                    "12": "calculate_floating_point",
                    "3": "calculate_float"
                },
                "FUN_080008ba": {
                    "1": "sub_function"
                },
                "bVar14": {
                    "1": "comparison_result",
                    "15": "flag1",
                    "3": "is_zero1",
                    "4": "is_zero"
                },
                "bVar15": {
                    "1": "comparison_result",
                    "16": "flag2",
                    "2": "is_equal",
                    "3": "is_zero2"
                },
                "bVar16": {
                    "1": "is_min_inf_or_na_n",
                    "16": "flag3",
                    "2": "carry_flag"
                },
                "bVar17": {
                    "1": "bit_is_set"
                },
                "iVar8": {
                    "1": "temp_var8",
                    "17": "temp8",
                    "3": "exponent_diff",
                    "6": "difference"
                },
                "param_1": {
                    "1": "input_param_1",
                    "10": "sign",
                    "13": "input1",
                    "2": "value1"
                },
                "param_2": {
                    "1": "b",
                    "13": "input2",
                    "2": "value2",
                    "8": "exponent"
                },
                "param_3": {
                    "1": "fraction",
                    "13": "input3",
                    "2": "value3"
                },
                "param_4": {
                    "1": "input_param_4",
                    "13": "input4",
                    "2": "value4"
                },
                "uVar1": {
                    "1": "variable1",
                    "21": "temp1"
                },
                "uVar10": {
                    "1": "mant_high_1",
                    "17": "temp11",
                    "2": "temp9"
                },
                "uVar11": {
                    "1": "temp10",
                    "17": "temp12",
                    "2": "temp9"
                },
                "uVar12": {
                    "1": "temp_var13",
                    "17": "temp13",
                    "2": "temp10"
                },
                "uVar13": {
                    "1": "shifted_trailing2",
                    "17": "temp14"
                },
                "uVar17": {
                    "1": "combined",
                    "21": "result"
                },
                "uVar18": {
                    "1": "result1"
                },
                "uVar19": {
                    "1": "result2"
                },
                "uVar2": {
                    "1": "variable2",
                    "21": "temp2"
                },
                "uVar3": {
                    "1": "bit_slice3",
                    "21": "temp3"
                },
                "uVar4": {
                    "1": "bit_mask",
                    "21": "temp4"
                },
                "uVar5": {
                    "1": "shifted_fraction",
                    "21": "temp5"
                },
                "uVar6": {
                    "1": "result_6",
                    "21": "temp6"
                },
                "uVar7": {
                    "1": "bit_mask",
                    "21": "temp7"
                },
                "uVar9": {
                    "1": "temp2",
                    "17": "temp9",
                    "2": "temp8"
                },
                "unaff_r5": {
                    "1": "variable10",
                    "17": "temp10"
                }
            },
            "called": [
                "FUN_080008ba"
            ],
            "calling": [
                "FUN_08005da8",
                "FUN_080015f8",
                "FUN_08001814",
                "FUN_08001918"
            ],
            "code": "\nulonglong calculate_floating_point_0800074c(undefined4 input1,uint input2,uint input3,uint input4)\n\n{\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  uint temp4;\n  uint temp5;\n  uint temp6;\n  uint temp7;\n  int temp8;\n  uint temp9;\n  uint temp10;\n  uint temp11;\n  uint temp12;\n  uint temp13;\n  uint temp14;\n  bool flag1;\n  bool flag2;\n  bool flag3;\n  undefined8 result;\n  \n  result = CONCAT44(input2,input1);\n  temp14 = 0x7ff;\n  temp7 = input2 >> 0x14 & 0x7ff;\n  flag1 = temp7 == 0;\n  if (!flag1) {\n    temp10 = input4 >> 0x14 & 0x7ff;\n    flag1 = temp10 == 0;\n  }\n  if (!flag1) {\n    flag1 = temp7 == 0x7ff;\n  }\n  if (!flag1) {\n    flag1 = temp10 == 0x7ff;\n  }\n  if (flag1) {\n    result = FUN_080008ba();\n  }\n  temp9 = (uint)((ulonglong)result >> 0x20);\n  temp12 = (uint)result;\n  temp8 = temp7 - temp10;\n  if ((input3 | input4 << 0xc) == 0) {\n    temp7 = (temp9 ^ input4) & 0x80000000 | temp9 & 0xfffff;\n    flag3 = SCARRY4(temp8,temp14 >> 1);\n    temp9 = temp8 + (temp14 >> 1);\n    flag1 = (int)temp9 < 0;\n    flag2 = temp9 == 0;\n    if (!flag2 && flag1 == flag3) {\n      flag3 = SBORROW4(temp14,temp9);\n      flag1 = (int)(temp14 - temp9) < 0;\n      flag2 = temp14 == temp9;\n    }\n    if (!flag2 && flag1 == flag3) {\n      temp7 = temp7 | temp9 * 0x100000;\n    }\n    if (!flag2 && flag1 == flag3) {\n      return CONCAT44(temp7,temp12);\n    }\n    temp7 = temp7 | 0x100000;\n    temp14 = 0;\n    flag2 = SBORROW4(temp9,1);\n    temp9 = temp9 - 1;\n    flag1 = temp9 == 0;\n    temp3 = temp9;\n  }\n  else {\n    temp3 = (input4 << 0xc) >> 4 | 0x10000000 | input3 >> 0x18;\n    temp14 = input3 << 8;\n    temp11 = (temp9 << 0xc) >> 4 | 0x10000000 | temp12 >> 0x18;\n    temp12 = temp12 * 0x100;\n    temp7 = (temp9 ^ input4) & 0x80000000;\n    flag1 = temp3 <= temp11;\n    if (temp11 == temp3) {\n      flag1 = temp14 <= temp12;\n    }\n    temp8 = temp8 + (uint)flag1;\n    temp9 = temp8 + 0x3fd;\n    if (flag1 == false) {\n      temp3 = temp3 >> 1;\n      temp14 = (uint)((input3 >> 0x18 & 1) != 0) << 0x1f | temp14 >> 1;\n    }\n    temp13 = temp12 - temp14;\n    temp11 = (temp11 - temp3) - (uint)(temp12 < temp14);\n    temp4 = temp3 >> 1;\n    temp1 = (uint)((temp3 & 1) != 0) << 0x1f | temp14 >> 1;\n    temp12 = 0x100000;\n    temp3 = 0x80000;\n    while( true ) {\n      flag1 = temp1 <= temp13;\n      if (temp4 < temp11 || temp11 - temp4 < (uint)flag1) {\n        temp13 = temp13 - temp1;\n        temp12 = temp12 | temp3;\n        temp11 = (temp11 - temp4) - (uint)!flag1;\n      }\n      temp5 = temp4 >> 1;\n      temp1 = (uint)((temp4 & 1) != 0) << 0x1f | temp1 >> 1;\n      flag2 = temp1 <= temp13;\n      flag1 = temp11 - temp5 < (uint)flag2;\n      temp14 = temp11;\n      if (temp5 < temp11 || flag1) {\n        temp13 = temp13 - temp1;\n        temp14 = (temp11 - temp5) - (uint)!flag2;\n      }\n      if (temp5 < temp11 || flag1) {\n        temp12 = temp12 | temp3 >> 1;\n      }\n      temp11 = temp4 >> 2;\n      temp2 = (uint)((temp5 & 1) != 0) << 0x1f | temp1 >> 1;\n      flag2 = temp2 <= temp13;\n      flag1 = temp14 - temp11 < (uint)flag2;\n      temp5 = temp14;\n      if (temp11 < temp14 || flag1) {\n        temp13 = temp13 - temp2;\n        temp5 = (temp14 - temp11) - (uint)!flag2;\n      }\n      if (temp11 < temp14 || flag1) {\n        temp12 = temp12 | temp3 >> 2;\n      }\n      temp6 = temp4 >> 3;\n      temp1 = (uint)((temp11 & 1) != 0) << 0x1f | temp2 >> 1;\n      flag2 = temp1 <= temp13;\n      flag1 = temp5 - temp6 < (uint)flag2;\n      temp11 = temp5;\n      if (temp6 < temp5 || flag1) {\n        temp13 = temp13 - temp1;\n        temp11 = (temp5 - temp6) - (uint)!flag2;\n      }\n      if (temp6 < temp5 || flag1) {\n        temp12 = temp12 | temp3 >> 3;\n      }\n      temp14 = temp11 | temp13;\n      if (temp14 == 0) break;\n      temp11 = temp11 << 4 | temp13 >> 0x1c;\n      temp13 = temp13 << 4;\n      temp4 = temp4 & 0xfffffff8 | temp1 >> 0x1d;\n      temp1 = (temp2 >> 1) << 3;\n      temp3 = temp3 >> 4;\n      if (temp3 == 0) {\n        temp6 = temp4;\n        if ((temp7 & 0x100000) != 0) goto LAB_0800086a;\n        temp7 = temp7 | temp12;\n        temp12 = 0;\n        temp3 = 0x80000000;\n      }\n    }\n    if ((temp7 & 0x100000) == 0) {\n      temp7 = temp7 | temp12;\n      temp12 = 0;\n    }\nLAB_0800086a:\n    flag3 = 0xfc < temp9;\n    flag2 = SBORROW4(temp9,0xfd);\n    temp4 = temp8 + 0x300;\n    flag1 = temp4 == 0;\n    temp3 = temp4;\n    if (flag3 && !flag1) {\n      flag3 = 0x6ff < temp4;\n      flag2 = SBORROW4(temp4,0x700);\n      temp3 = temp8 - 0x400;\n      flag1 = temp4 == 0x700;\n    }\n    if (!flag3 || flag1) {\n      flag1 = temp6 <= temp11;\n      if (temp11 == temp6) {\n        flag1 = temp1 <= temp13;\n      }\n      if (temp11 == temp6 && temp13 == temp1) {\n        flag1 = (temp12 & 1) != 0;\n      }\n      return CONCAT44(temp7 + temp9 * 0x100000 + (uint)CARRY4(temp12,(uint)flag1),temp12 + flag1);\n    }\n  }\n  if (!flag1 && (int)temp3 < 0 == flag2) {\n    return (ulonglong)(temp7 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  flag3 = SCARRY4(temp9,0x36);\n  flag1 = (int)(temp9 + 0x36) < 0;\n  flag2 = temp9 == 0xffffffca;\n  if (flag2 || flag1 != flag3) {\n    temp12 = 0;\n  }\n  if (flag2 || flag1 != flag3) {\n    temp7 = temp7 & 0x80000000;\n  }\n  if (flag2 || flag1 != flag3) {\n    return CONCAT44(temp7,temp12);\n  }\n  temp3 = -temp9;\n  temp11 = temp3 - 0x20;\n  if (0x1f < (int)temp3) {\n    temp3 = temp12 >> (temp11 & 0xff) | temp7 << (0x20 - temp11 & 0xff);\n    temp9 = (temp7 >> (temp11 & 0xff) & ~((temp7 & 0x80000000) >> (temp11 & 0xff))) -\n            ((int)temp3 >> 0x1f);\n    if ((temp14 | temp12 << (0x20 - temp11 & 0xff) | temp3 << 1) == 0) {\n      temp9 = temp9 & ~(temp3 >> 0x1f);\n    }\n    return CONCAT44(temp7,temp9) & 0x80000000ffffffff;\n  }\n  temp8 = temp3 - 0x14;\n  if (temp8 != 0 && temp8 < 0 == SCARRY4(temp11,0xc)) {\n    temp9 = 0xc - temp8;\n    temp3 = temp12 << (temp9 & 0xff);\n    temp12 = temp12 >> (0x20 - temp9 & 0xff) | temp7 << (temp9 & 0xff);\n    temp9 = temp12 + -((int)temp3 >> 0x1f);\n    if ((temp14 | temp3 << 1) == 0) {\n      temp9 = temp9 & ~(temp3 >> 0x1f);\n    }\n    return CONCAT44((temp7 & 0x80000000) + (uint)CARRY4(temp12,-((int)temp3 >> 0x1f)),temp9);\n  }\n  temp11 = temp12 << (temp9 + 0x20 & 0xff);\n  temp12 = temp12 >> (temp3 & 0xff) | temp7 << (temp9 + 0x20 & 0xff);\n  temp9 = temp12 + -((int)temp11 >> 0x1f);\n  if ((temp14 | temp11 << 1) == 0) {\n    temp9 = temp9 & ~(temp11 >> 0x1f);\n  }\n  return CONCAT44((temp7 & 0x80000000) +\n                  ((temp7 & 0x7fffffff) >> (temp3 & 0xff)) +\n                  (uint)CARRY4(temp12,-((int)temp11 >> 0x1f)),temp9);\n}\n\n",
            "current_name": "calculate_floating_point_0800074c",
            "entrypoint": "0x0800074c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800074c": "calculate_floating_point_0800074c",
                "bVar14": "flag1",
                "bVar15": "flag2",
                "bVar16": "flag3",
                "iVar8": "temp8",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "temp1",
                "uVar10": "temp11",
                "uVar11": "temp12",
                "uVar12": "temp13",
                "uVar13": "temp14",
                "uVar17": "result",
                "uVar2": "temp2",
                "uVar3": "temp3",
                "uVar4": "temp4",
                "uVar5": "temp5",
                "uVar6": "temp6",
                "uVar7": "temp7",
                "uVar9": "temp9",
                "unaff_r5": "temp10"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080008ba": {
            "additional_data": {
                "<original_function_name>": {
                    "1": "extract_bits"
                },
                "<param_1>": {
                    "1": "input_1"
                },
                "<param_2>": {
                    "1": "input_2"
                },
                "<param_3>": {
                    "1": "input_3"
                },
                "<param_4>": {
                    "1": "input_4"
                },
                "FUN_080008ba": {
                    "1": "decode_float",
                    "3": "reverse_bits",
                    "4": "calculate_double_precision"
                },
                "LAB_080006f0": {
                    "1": "return_double_nan"
                },
                "LAB_0800072c": {
                    "1": "return_nan"
                },
                "bVar4": {
                    "1": "bool_flag",
                    "16": "is_zero",
                    "5": "flag"
                },
                "in_r12": {
                    "1": "temp4",
                    "2": "temp5",
                    "3": "temp2"
                },
                "param_1": {
                    "1": "first_param",
                    "11": "input1",
                    "2": "float_part1",
                    "5": "input_1"
                },
                "param_2": {
                    "1": "second_param",
                    "11": "input2",
                    "2": "float_part2",
                    "5": "input_2"
                },
                "param_3": {
                    "1": "num3",
                    "11": "input3",
                    "2": "float_part3",
                    "5": "input_3"
                },
                "param_4": {
                    "1": "operand4",
                    "11": "input4",
                    "2": "float_part4",
                    "5": "input_4"
                },
                "uVar1": {
                    "1": "bit",
                    "10": "bit1",
                    "2": "temp1",
                    "3": "bit_1"
                },
                "uVar2": {
                    "1": "temp4",
                    "2": "bit_3",
                    "3": "temp3",
                    "6": "bit2"
                },
                "uVar3": {
                    "1": "bit4",
                    "2": "bit_4",
                    "3": "temp4",
                    "4": "bit3"
                },
                "unaff_r4": {
                    "1": "bit4",
                    "2": "bit_2",
                    "5": "temp1"
                },
                "unaff_r4: , : temp1: ,\n  : uVar1": {
                    "1": "temp2"
                }
            },
            "called": [],
            "calling": [
                "FUN_0800074c"
            ],
            "code": "\nulonglong calculate_double_precision_080008ba(uint input1,uint input2,uint input3,uint input4)\n\n{\n  uint bit1;\n  uint temp1;\n  uint bit2;\n  uint bit3;\n  uint temp2;\n  bool is_zero;\n  \n  bit2 = temp2 & input4 >> 0x14;\n  bit3 = input2;\n  if (temp1 != temp2 || bit2 != temp2) {\n    if (temp1 == temp2) {\n      if (((input1 | input2 << 0xc) == 0) && (input1 = input3, bit3 = input4, bit2 != temp2)\n         ) {\nreturn_nan:\n        return (ulonglong)((input2 ^ input4) & 0x80000000 | 0x7ff00000) << 0x20;\n      }\n    }\n    else if (bit2 == temp2) {\n      input1 = input3;\n      bit3 = input4;\n      if ((input3 | input4 << 0xc) == 0) {\nreturn_double_nan:\n        return (ulonglong)((input2 ^ input4) & 0x80000000) << 0x20;\n      }\n    }\n    else {\n      is_zero = (input1 | input2 << 1) == 0;\n      if (!is_zero) {\n        is_zero = (input3 | input4 << 1) == 0;\n      }\n      if (!is_zero) {\n        if (temp1 == 0) {\n          bit3 = input2 & 0x80000000;\n          do {\n            bit1 = input1 & 0x80000000;\n            input1 = input1 << 1;\n            input2 = input2 * 2 + (uint)(bit1 != 0);\n          } while ((input2 & 0x100000) == 0);\n          input2 = input2 | bit3;\n          if (bit2 != 0) {\n            return CONCAT44(input2,input1);\n          }\n        }\n        do {\n          bit3 = input3 & 0x80000000;\n          input3 = input3 << 1;\n          input4 = input4 * 2 + (uint)(bit3 != 0);\n        } while ((input4 & 0x100000) == 0);\n        return CONCAT44(input2,input1);\n      }\n      if ((input1 | input2 << 1) != 0) goto return_nan;\n      if ((input3 | input4 << 1) != 0) goto return_double_nan;\n    }\n  }\n  return CONCAT44(bit3,input1) | 0x7ff8000000000000;\n}\n\n",
            "current_name": "calculate_double_precision_080008ba",
            "entrypoint": "0x080008ba",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080008ba": "calculate_double_precision_080008ba",
                "LAB_080006f0": "return_double_nan",
                "LAB_0800072c": "return_nan",
                "bVar4": "is_zero",
                "in_r12": "temp2",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "bit1",
                "uVar2": "bit2",
                "uVar3": "bit3",
                "unaff_r4": "temp1"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800092c": {
            "additional_data": {
                "->": {
                    "1": "result"
                },
                "2": {
                    "1": "bit_shift"
                },
                "FUN_0800092c": {
                    "1": "check_parameters_and_return_result",
                    "10": "check_parameters",
                    "2": "check_params_equality",
                    "5": "check_conditions"
                },
                "bVar2": {
                    "1": "is_empty",
                    "21": "is_zero"
                },
                "bVar3": {
                    "1": "is_equal",
                    "10": "is_negative",
                    "2": "is_condition_true",
                    "3": "is_less_or_equal"
                },
                "param_1": {
                    "1": "num1",
                    "2": "input1",
                    "5": "first_param",
                    "8": "value1"
                },
                "param_2": {
                    "1": "num2",
                    "2": "input_2",
                    "5": "second_param",
                    "8": "value2"
                },
                "param_3": {
                    "1": "num3",
                    "2": "input3",
                    "5": "third_param",
                    "8": "value3"
                },
                "param_4": {
                    "1": "w",
                    "2": "input4",
                    "4": "value_4",
                    "5": "d",
                    "8": "value4"
                },
                "param_4 >> 0x1f": {
                    "1": "shifted_param_4"
                },
                "param_4 | 1": {
                    "1": "result_bitwise_or"
                },
                "return": {
                    "3": "result"
                },
                "uVar1": {
                    "1": "temp_var1",
                    "15": "result",
                    "9": "xor_result"
                }
            },
            "called": [],
            "calling": [
                "FUN_080009b8"
            ],
            "code": "\nuint check_parameters_0800092c(uint value1,uint value2,uint value3,uint value4)\n\n{\n  uint result;\n  bool is_zero;\n  bool is_negative;\n  \n  if (((int)(value2 << 1) >> 0x15 == -1 || (int)(value4 << 1) >> 0x15 == -1) &&\n     ((((int)(value2 << 1) >> 0x15 == -1 && ((value1 | value2 << 0xc) != 0)) ||\n      (((int)(value4 << 1) >> 0x15 == -1 && ((value3 | value4 << 0xc) != 0)))))) {\n    result 1;\n  }\n  is_zero = (value1 | value2 << 1) == 0;\n  if (is_zero) {\n    is_zero = (value3 | value4 << 1) == 0;\n  }\n  if (!is_zero) {\n    is_zero = value2 == value4;\n  }\n  if (is_zero) {\n    is_zero = value1 == value3;\n  }\n  if (!is_zero) {\n    result = value2 ^ value4;\n    is_zero = result == 0;\n    if (-1 < (int)result) {\n      is_zero = value2 == value4;\n    }\n    is_negative = -1 < (int)result && value4 <= value2;\n    if (is_zero) {\n      is_negative = value3 <= value1;\n    }\n    value4 = (int)value4 >> 0x1f;\n    if (!is_negative) {\n      value4 = ~value4;\n    }\n    result value4 | 1;\n  }\n  result 0;\n}\n\n",
            "current_name": "check_parameters_0800092c",
            "entrypoint": "0x0800092c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800092c": "check_parameters_0800092c",
                "bVar2": "is_zero",
                "bVar3": "is_negative",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "value3",
                "param_4": "value4",
                "return": "result",
                "uVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080009a8": {
            "additional_data": {
                "FUN_080009a8": {
                    "1": "execute_process",
                    "22": "execute_function",
                    "3": "process_data"
                },
                "FUN_080009b8": {
                    "1": "process_sub_data",
                    "13": "sub_function",
                    "2": "invoke_sub_function",
                    "7": "call_sub_function"
                },
                "param_1": {
                    "1": "param1",
                    "16": "arg1",
                    "2": "input_param_1",
                    "3": "input_param1",
                    "6": "input1"
                },
                "param_2": {
                    "1": "input_parameter_2",
                    "16": "arg2",
                    "2": "input_param_2",
                    "3": "input_param2",
                    "6": "input2"
                },
                "param_3": {
                    "1": "param1",
                    "16": "arg3",
                    "2": "argument3",
                    "3": "input_param3"
                },
                "param_4": {
                    "1": "input_parameter_4",
                    "16": "arg4",
                    "2": "input4",
                    "3": "input_param4"
                }
            },
            "called": [
                "FUN_080009b8"
            ],
            "calling": [
                "FUN_08000a18",
                "FUN_08000a04"
            ],
            "code": "\nvoid execute_function_080009a8(undefined4 arg1,undefined4 arg2,undefined4 arg3,undefined4 arg4)\n\n{\n  FUN_080009b8(arg3,arg4,arg1,arg2);\n  return;\n}\n\n",
            "current_name": "execute_function_080009a8",
            "entrypoint": "0x080009a8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080009a8": "execute_function_080009a8",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arg3",
                "param_4": "arg4"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080009b8": {
            "additional_data": {
                "<original_function_name>": {
                    "1": "initialize_param"
                },
                "<original_parameter_name_1>": {
                    "1": "param_1"
                },
                "<original_variable_name_1>": {
                    "1": "result"
                },
                "FUN_0800092c": {
                    "1": "execute_subtask",
                    "2": "calculate_result",
                    "6": "process_data",
                    "7": "perform_operation"
                },
                "FUN_0800092c_param_1": {
                    "1": "input1"
                },
                "FUN_0800092c_param_2": {
                    "1": "op2"
                },
                "FUN_0800092c_param_3": {
                    "1": "input3"
                },
                "FUN_0800092c_param_4": {
                    "1": "input4"
                },
                "FUN_080009b8": {
                    "1": "perform_initialization",
                    "2": "initialize_function",
                    "6": "initialize",
                    "7": "execute_function"
                },
                "param_1": {
                    "1": "data_1",
                    "2": "input_parameter",
                    "3": "param",
                    "6": "input_param",
                    "7": "input_value",
                    "8": "input"
                },
                "param_2": {
                    "1": "operation1",
                    "4": "value1"
                },
                "param_3": {
                    "1": "step_param2",
                    "4": "value2"
                },
                "param_4": {
                    "1": "data_param3",
                    "4": "value3"
                }
            },
            "called": [
                "FUN_0800092c"
            ],
            "calling": [
                "FUN_080009c8",
                "FUN_080009f0",
                "FUN_080009dc",
                "FUN_080009a8"
            ],
            "code": "\nundefined4 execute_function_080009b8(undefined4 input)\n\n{\n  FUN_0800092c();\n  return input;\n}\n\n",
            "current_name": "execute_function_080009b8",
            "entrypoint": "0x080009b8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080009b8": "execute_function_080009b8",
                "param_1": "input"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080009c8": {
            "additional_data": {
                "FUN_080009b8": {
                    "1": "perform_some_action"
                },
                "FUN_080009c8": {
                    "1": "check_if_not_empty",
                    "2": "check_in_zr",
                    "4": "check_if_initialized"
                },
                "in_ZR": {
                    "1": "is_nonzero_character",
                    "2": "input_character",
                    "4": "is_initialized",
                    "7": "result"
                }
            },
            "called": [
                "FUN_080009b8"
            ],
            "calling": [
                "FUN_08000cd0"
            ],
            "code": "\nbool check_if_initialized_080009c8(void)\n\n{\n  char result;\n  \n  FUN_080009b8();\n  return result != '\\0';\n}\n\n",
            "current_name": "check_if_initialized_080009c8",
            "entrypoint": "0x080009c8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080009c8": "check_if_initialized_080009c8",
                "in_ZR": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080009dc": {
            "additional_data": {
                "<original_function_name>": {
                    "1": "check_if_null_terminated"
                },
                "<original_variable_name_1>": {
                    "1": "input_char"
                },
                "FUN_080009b8": {
                    "1": "initialization_function",
                    "2": "perform_initialization"
                },
                "FUN_080009dc": {
                    "1": "is_null_terminator",
                    "2": "check_if_null_terminator",
                    "4": "is_cy_null",
                    "7": "check_if_null_terminated"
                },
                "in_CY": {
                    "1": "user_input",
                    "11": "input_character",
                    "2": "character",
                    "8": "input_char"
                },
                "param_1": {
                    "1": "parameter"
                },
                "undefined4": {
                    "1": "data_type"
                }
            },
            "called": [
                "FUN_080009b8"
            ],
            "calling": [
                "FUN_08005da8",
                "FUN_08000cd0",
                "FUN_080019f6",
                "FUN_08001814",
                "FUN_080016b4",
                "FUN_08001960"
            ],
            "code": "\nbool check_if_null_terminated_080009dc(void)\n\n{\n  char input_character;\n  \n  FUN_080009b8();\n  return input_character == '\\0';\n}\n\n",
            "current_name": "check_if_null_terminated_080009dc",
            "entrypoint": "0x080009dc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080009dc": "check_if_null_terminated_080009dc",
                "in_CY": "input_character"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080009f0": {
            "additional_data": {
                "BOOL": {
                    "1": "bool"
                },
                "FUN_080009b8": {
                    "1": "perform_operation",
                    "2": "perform_additional_checks"
                },
                "FUN_080009f0": {
                    "1": "check_error_flags",
                    "4": "check_cy_and_zr",
                    "5": "check_flags",
                    "9": "check_conditions"
                },
                "in_CY": {
                    "1": "condition_1",
                    "18": "carry_flag",
                    "2": "carry_flag_set",
                    "6": "is_carry"
                },
                "in_ZR": {
                    "1": "condition_2",
                    "15": "zero_flag",
                    "2": "is_zero_result",
                    "3": "zero_result",
                    "6": "is_zero"
                },
                "param_1": {
                    "1": "input_param"
                }
            },
            "called": [
                "FUN_080009b8"
            ],
            "calling": [
                "FUN_08005da8",
                "FUN_08000cd0"
            ],
            "code": "\nbool check_conditions_080009f0(void)\n\n{\n  undefined zero_flag;\n  undefined carry_flag;\n  \n  FUN_080009b8();\n  return !(bool)carry_flag || (bool)zero_flag;\n}\n\n",
            "current_name": "check_conditions_080009f0",
            "entrypoint": "0x080009f0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080009f0": "check_conditions_080009f0",
                "in_CY": "carry_flag",
                "in_ZR": "zero_flag"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000a04": {
            "additional_data": {
                "FUN_080009a8": {
                    "1": "execute_preconditions",
                    "2": "perform_initialization",
                    "4": "initialize_flags"
                },
                "FUN_08000a04": {
                    "1": "check_zero_conditions",
                    "2": "check_flags",
                    "3": "check_carry_and_zero",
                    "4": "check_cy_and_zr",
                    "5": "check_conditions"
                },
                "in_CY": {
                    "1": "is_carry_flag",
                    "16": "carry_flag"
                },
                "in_ZR": {
                    "1": "zr_flag",
                    "14": "zero_flag",
                    "2": "is_zero_flag"
                },
                "param_1": {
                    "1": "unused_param",
                    "2": "param1"
                },
                "param_2": {
                    "1": "input_param_2",
                    "2": "param2"
                },
                "param_3": {
                    "1": "unused_param",
                    "2": "param3"
                },
                "param_4": {
                    "1": "input_param_4",
                    "2": "param4"
                }
            },
            "called": [
                "FUN_080009a8"
            ],
            "calling": [
                "FUN_08000cd0",
                "FUN_08001960"
            ],
            "code": "\nbool check_cy_zr_08000a04(void)\n\n{\n  undefined zero_flag;\n  undefined carry_flag;\n  \n  FUN_080009a8();\n  return !(bool)carry_flag || (bool)zero_flag;\n}\n\n",
            "current_name": "check_cy_zr_08000a04",
            "entrypoint": "0x08000a04",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000a04": "check_cy_zr_08000a04",
                "in_CY": "carry_flag",
                "in_ZR": "zero_flag"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000a18": {
            "additional_data": {
                "FUN_080009a8": {
                    "1": "execute_sub_function"
                },
                "FUN_08000a18": {
                    "1": "is_null_termination_checked",
                    "2": "is_input_empty",
                    "3": "check_if_null_terminated",
                    "4": "is_string_empty",
                    "5": "is_cy_null"
                },
                "in_CY": {
                    "1": "user_input",
                    "12": "input_character",
                    "14": "input_char"
                }
            },
            "called": [
                "FUN_080009a8"
            ],
            "calling": [
                "FUN_08005da8",
                "FUN_080019f6",
                "FUN_08000cd0",
                "FUN_080016b4",
                "FUN_08001960"
            ],
            "code": "\nbool is_cy_null_08000a18(void)\n\n{\n  char input_char;\n  \n  FUN_080009a8();\n  return input_char == '\\0';\n}\n\n",
            "current_name": "is_cy_null_08000a18",
            "entrypoint": "0x08000a18",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000a18": "is_cy_null_08000a18",
                "in_CY": "input_char"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000a2c": {
            "additional_data": {
                "FUN_08000a2c": {
                    "1": "check_for_zero_values",
                    "14": "check_parameters",
                    "2": "check_parameters_validity",
                    "3": "check_input_validity",
                    "4": "check_params"
                },
                "param_1": {
                    "1": "first_parameter",
                    "2": "first_param",
                    "6": "input1",
                    "7": "value1",
                    "8": "input_1"
                },
                "param_2": {
                    "1": "second_parameter",
                    "2": "second_param",
                    "6": "input2",
                    "7": "value2",
                    "8": "input_2"
                },
                "param_3": {
                    "1": "third_parameter",
                    "2": "third_param",
                    "6": "input3",
                    "7": "value3",
                    "8": "input_3"
                },
                "param_4": {
                    "1": "value2",
                    "2": "fourth_param",
                    "6": "input4",
                    "7": "value4",
                    "8": "input_4"
                }
            },
            "called": [],
            "calling": [
                "FUN_08005da8"
            ],
            "code": "\nundefined4 check_parameters_08000a2c(uint input_1,int input_2,uint input_3,int input_4)\n\n{\n  if ((((input_2 << 1) >> 0x15 != -1) || ((input_1 | input_2 << 0xc) == 0)) &&\n     (((input_4 << 1) >> 0x15 != -1 || ((input_3 | input_4 << 0xc) == 0)))) {\n    return 0;\n  }\n  return 1;\n}\n\n",
            "current_name": "check_parameters_08000a2c",
            "entrypoint": "0x08000a2c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000a2c": "check_parameters_08000a2c",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000a58": {
            "additional_data": {
                "FUN_08000a58": {
                    "1": "decode_param",
                    "2": "reverse_bits",
                    "3": "calculate_result"
                },
                "iVar2": {
                    "1": "multiplier",
                    "2": "result2",
                    "3": "temp2",
                    "4": "offset",
                    "5": "adjusted_value"
                },
                "param_1": {
                    "1": "input_a",
                    "2": "dividend",
                    "5": "input1",
                    "6": "input_value1",
                    "8": "input_value"
                },
                "param_2": {
                    "1": "limit",
                    "2": "multiplier",
                    "3": "shift_value",
                    "4": "input2",
                    "6": "input_value2"
                },
                "uVar1": {
                    "1": "output",
                    "2": "quotient",
                    "4": "result1",
                    "7": "result"
                },
                "uVar2": {
                    "1": "result"
                },
                "uVar3": {
                    "1": "shifted_multiplier_minus_value",
                    "2": "temp3",
                    "3": "difference"
                },
                "uVar4": {
                    "1": "result"
                }
            },
            "called": [],
            "calling": [
                "FUN_08005da8"
            ],
            "code": "\nuint calculate_result_08000a58(uint input_value,uint input_value2)\n\n{\n  uint result;\n  int adjusted_value;\n  uint difference;\n  \n  adjusted_value = input_value2 * 2 + 0x200000;\n  if (input_value2 * 2 < 0xffe00000) {\n    if (-1 < adjusted_value) {\n      return 0;\n    }\n    result = adjusted_value >> 0x15;\n    difference = -result - 0x3e1;\n    if (result < 0xfffffc20 && difference != 0) {\n      result = (input_value2 << 0xb | 0x80000000 | input_value >> 0x15) >> (difference & 0xff);\n      if ((input_value2 & 0x80000000) != 0) {\n        result = -result;\n      }\n      return result;\n    }\n  }\n  else if ((input_value | input_value2 << 0xc) != 0) {\n    return 0;\n  }\n  input_value2 = input_value2 & 0x80000000;\n  if (input_value2 == 0) {\n    input_value2 = 0x7fffffff;\n  }\n  return input_value2;\n}\n\n",
            "current_name": "calculate_result_08000a58",
            "entrypoint": "0x08000a58",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000a58": "calculate_result_08000a58",
                "iVar2": "adjusted_value",
                "param_1": "input_value",
                "param_2": "input_value2",
                "uVar1": "result",
                "uVar3": "difference"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000aa8": {
            "additional_data": {
                "0xffffffff": {
                    "1": "0xffffffff"
                },
                "FUN_08000aa8": {
                    "1": "validate_parameters",
                    "2": "calculate_shift_amount",
                    "8": "calculate_shifted_value"
                },
                "iVar1": {
                    "1": "adjusted_shift_amount",
                    "2": "temp1",
                    "3": "temp_var1",
                    "9": "shifted_value"
                },
                "param_1": {
                    "1": "input_data",
                    "10": "input_value",
                    "2": "input_param",
                    "4": "input1"
                },
                "param_2": {
                    "1": "value",
                    "2": "multiplier",
                    "3": "shift_value",
                    "4": "input2",
                    "6": "shift_amount"
                },
                "uVar2": {
                    "1": "shifted_bits",
                    "11": "shift_amount",
                    "2": "result",
                    "3": "temp_var2"
                }
            },
            "called": [],
            "calling": [
                "FUN_08005da8"
            ],
            "code": "\nuint calculate_shifted_value_08000aa8(uint input_value,uint shift_amount)\n\n{\n  int shifted_value;\n  uint shift_amount;\n  \n  if ((shift_amount & 0x80000000) != 0) {\n    return 0;\n  }\n  shifted_value = shift_amount * 2 + 0x200000;\n  if (shift_amount * 2 < 0xffe00000) {\n    if (-1 < shifted_value) {\n      return 0;\n    }\n    shift_amount = -(shifted_value >> 0x15) - 0x3e1;\n    if (-1 < (int)shift_amount) {\n      return (shift_amount << 0xb | 0x80000000 | input_value >> 0x15) >> (shift_amount & 0xff);\n    }\n  }\n  else if ((input_value | shift_amount << 0xc) != 0) {\n    return 0;\n  }\n  return 0xffffffff;\n}\n\n",
            "current_name": "calculate_shifted_value_08000aa8",
            "entrypoint": "0x08000aa8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000aa8": "calculate_shifted_value_08000aa8",
                "iVar1": "shifted_value",
                "param_1": "input_value",
                "param_2": "shift_amount",
                "uVar2": "shift_amount"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000ae8": {
            "additional_data": {
                "": {
                    "2": ""
                },
                "0x3f": {
                    "1": "interrupt_code"
                },
                "<original_variable_name_1>": {
                    "1": "result_code"
                },
                "<original_variable_name_2>": {
                    "1": "<new_variable_name_2>"
                },
                "FUN_08000ae8": {
                    "1": "get_system_info",
                    "2": "call_interrupt",
                    "3": "invoke_software_interrupt",
                    "4": "execute_system_interrupt",
                    "5": "execute_software_interrupt",
                    "6": "execute_system_call"
                },
                "PTR_08000ae8": {
                    "1": "execute_interrupt_fn_ptr"
                },
                "original_function_name": {
                    "1": "more_descriptive_function_name"
                },
                "original_parameter_name_1": {
                    "1": "new_parameter_name_1"
                },
                "original_parameter_name_2": {
                    "1": "new_parameter_name_2"
                },
                "original_variable_name_1": {
                    "1": "new_variable_name_1"
                },
                "original_variable_name_2": {
                    "1": "new_variable_name_2"
                },
                "soft_interrupt": {
                    "1": "invoke_interrupt"
                },
                "software_interrupt": {
                    "1": "interrupt_handler",
                    "2": "interrupt",
                    "3": "trigger_interrupt",
                    "4": "invoke_interrupt"
                }
            },
            "called": [],
            "calling": [
                "FUN_08000aec"
            ],
            "code": "\nvoid execute_system_call_08000ae8(void)\n\n{\n  invoke_interrupt(0x3f);\n  return;\n}\n\n",
            "current_name": "execute_system_call_08000ae8",
            "entrypoint": "0x08000ae8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000ae8": "execute_system_call_08000ae8",
                "software_interrupt": "invoke_interrupt"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000aec": {
            "additional_data": {
                "DAT_2000017c": {
                    "1": "condition_variable"
                },
                "FUN_08000aec": {
                    "1": "execute_secure_operation",
                    "15": "execute_function",
                    "4": "process_data"
                },
                "param_1": {
                    "12": "input1",
                    "2": "input_param1",
                    "3": "input_value",
                    "4": "arg1",
                    "5": "input_param"
                },
                "param_2": {
                    "1": "arg2",
                    "2": "unused_param",
                    "5": "input2"
                },
                "param_3": {
                    "1": "arg3",
                    "5": "input3"
                },
                "param_4": {
                    "1": "arg2",
                    "12": "input4",
                    "2": "input_param4",
                    "3": "arg4",
                    "4": "output_param"
                },
                "uVar1": {
                    "16": "result",
                    "6": "return_value"
                }
            },
            "called": [
                "FUN_08000ae8"
            ],
            "calling": [
                "FUN_08000bcc"
            ],
            "code": "\nundefined4 execute_function_08000aec(undefined4 input1,undefined4 input2,undefined4 input3,undefined4 input4)\n\n{\n  undefined4 result;\n  \n  if (DAT_2000017c != 0) {\n    return 0;\n  }\n  result = FUN_08000ae8(1,input1,0,0,input4);\n  return result;\n}\n\n",
            "current_name": "execute_function_08000aec",
            "entrypoint": "0x08000aec",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000aec": "execute_function_08000aec",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000b08": {
            "additional_data": {
                "&DAT_20000188": {
                    "1": "data2"
                },
                "&DAT_20000194": {
                    "1": "data11"
                },
                "&DAT_200001b8": {
                    "1": "data3"
                },
                "&DAT_200001c0": {
                    "1": "data1"
                },
                "&DAT_20000240": {
                    "1": "data4"
                },
                "&DAT_2000024c": {
                    "1": "data18"
                },
                "DAT_20000010": {
                    "1": "data9"
                },
                "DAT_20000014": {
                    "1": "data10"
                },
                "DAT_20000018": {
                    "1": "data7"
                },
                "DAT_2000001c": {
                    "1": "data8"
                },
                "DAT_20000020": {
                    "1": "data5"
                },
                "DAT_20000024": {
                    "1": "data6"
                },
                "DAT_20000028": {
                    "1": "data14"
                },
                "DAT_2000002c": {
                    "1": "data15"
                },
                "DAT_20000030": {
                    "1": "data16"
                },
                "DAT_20000034": {
                    "1": "data17"
                },
                "DAT_20000038": {
                    "1": "data13"
                },
                "DAT_2000005c": {
                    "1": "data12"
                },
                "DAT_2000006c": {
                    "1": "data21"
                },
                "DAT_20000070": {
                    "1": "data20"
                },
                "DAT_20000074": {
                    "1": "data19"
                },
                "FUN_08000b08": {
                    "1": "execute_relevant_functions",
                    "2": "initialize_components",
                    "3": "process_parameters",
                    "6": "process_data"
                },
                "FUN_08001510": {
                    "1": "process_data_b",
                    "2": "process_data1",
                    "3": "process_data",
                    "4": "update_data",
                    "8": "initialize_data"
                },
                "FUN_0800157c": {
                    "1": "process_data_b",
                    "2": "modify_data",
                    "3": "process_data2",
                    "4": "process_data"
                },
                "FUN_08001b18": {
                    "1": "rearrange_data",
                    "11": "reverse_data",
                    "2": "reverse_bytes",
                    "4": "initialize_data"
                },
                "param_1": {
                    "1": "value_g",
                    "2": "input1",
                    "4": "flag1",
                    "5": "status"
                },
                "param_2": {
                    "1": "value2",
                    "11": "value",
                    "2": "condition2",
                    "5": "flag2"
                },
                "param_3": {
                    "1": "value_e"
                },
                "param_4": {
                    "1": "value_f"
                }
            },
            "called": [
                "FUN_08001510",
                "FUN_0800157c",
                "FUN_08001b18"
            ],
            "calling": [],
            "code": "\nvoid process_data_08000b08(int status,int value)\n\n{\n  if ((status == 1) && (value == 0xffff)) {\n    FUN_08001b18(&DAT_200001c0,&DAT_20000188,&DAT_200001b8,&DAT_20000240,DAT_20000020,DAT_20000024,\n                 DAT_20000018,DAT_2000001c,DAT_20000010,DAT_20000014,0);\n    FUN_08001510(&DAT_20000194,DAT_2000005c,DAT_20000038,DAT_20000028,DAT_2000002c,DAT_20000030,\n                 DAT_20000034);\n    FUN_0800157c(&DAT_2000024c,DAT_20000074,DAT_20000070,DAT_2000006c);\n    return;\n  }\n  return;\n}\n\n",
            "current_name": "process_data_08000b08",
            "entrypoint": "0x08000b08",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000b08": "process_data_08000b08",
                "param_1": "status",
                "param_2": "value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000bcc": {
            "additional_data": {
                "FUNC_080058e8": {
                    "1": "configure_sensor",
                    "2": "set_temperature"
                },
                "FUN_08000aec": {
                    "1": "unknown_function4",
                    "10": "shutdown_oven",
                    "2": "finalize_initialization",
                    "4": "start_oven"
                },
                "FUN_08000bcc": {
                    "1": "initialize_oven_controller",
                    "22": "initialize_oven",
                    "3": "initialize_components",
                    "4": "initialize_reflow_oven"
                },
                "FUN_0800135a": {
                    "1": "disable_feature",
                    "2": "free_memory",
                    "4": "cleanup_data",
                    "5": "stop_timer"
                },
                "FUN_08001366": {
                    "1": "change_display_state",
                    "2": "update_display",
                    "3": "configure_display",
                    "4": "set_flag"
                },
                "FUN_080013a4": {
                    "1": "set_register_value",
                    "2": "set_configuration",
                    "3": "initialize_timer",
                    "4": "set_timer",
                    "5": "initialize_data"
                },
                "FUN_08001550": {
                    "1": "set_data_value",
                    "2": "set_data",
                    "3": "copy_memory",
                    "4": "set_timer",
                    "5": "initialize_timer"
                },
                "FUN_080057b4": {
                    "1": "set_temperature",
                    "2": "start_heating",
                    "3": "set_oven_mode"
                },
                "FUN_08005848": {
                    "1": "configure_setting",
                    "12": "set_temperature",
                    "2": "turn_off_heater",
                    "3": "set_oven_state"
                },
                "FUN_080058e0": {
                    "1": "get_something",
                    "2": "get_sensor_value",
                    "3": "get_current_time"
                },
                "FUN_080058e8": {
                    "1": "disable_alarm"
                },
                "FUN_08005a68": {
                    "1": "unknown_function2",
                    "2": "initialize_sensor",
                    "3": "configure_settings",
                    "4": "configure_device"
                },
                "FUN_08005c96": {
                    "1": "display_text",
                    "23": "display_message",
                    "3": "print_message"
                }
            },
            "called": [
                "FUN_080058e8",
                "FUN_08005a68",
                "FUN_08001550",
                "FUN_0800135a",
                "FUN_08000aec",
                "FUN_08005848",
                "FUN_08005c96",
                "FUN_080013a4",
                "FUN_080057b4",
                "FUN_08001366",
                "FUN_080058e0"
            ],
            "calling": [
                "FUN_08005f6c"
            ],
            "code": "\nvoid initialize_oven_08000bcc(void)\n\n{\n  FUN_08005848(DAT_20000064,0);\n  FUN_080057b4(DAT_20000064,1);\n  FUN_08005848(DAT_20000004,0);\n  FUN_080057b4(DAT_20000004,1);\n  FUN_08005848(DAT_20000060,0);\n  FUN_080057b4(DAT_20000060,1);\n  FUN_08005848(DAT_20000004,1);\n  FUN_080013a4(&DAT_20000194,8,2,0);\n  FUN_08001550(&DAT_20000194,0,&DAT_20000008);\n  FUN_0800135a(&DAT_20000194);\n  FUN_08005c96(&DAT_20000194,\"Reflow\");\n  FUN_08001366(&DAT_20000194,0,1);\n  FUN_08005c96(&DAT_20000194,\"Oven 1.2\");\n  FUN_08005848(DAT_20000004,0);\n  FUNC_080058e8(0x9c4);\n  FUN_0800135a(&DAT_20000194);\n  FUN_08005a68(&DAT_2000036c,0xe100,6);\n  FUN_08005848(DAT_20000060,1);\n  DAT_20000258 = 2000;\n  DAT_200001b0 = FUN_080058e0();\n  DAT_200001b4 = FUN_080058e0();\n  FUN_08000aec(0);\n  return;\n}\n\n",
            "current_name": "initialize_oven_08000bcc",
            "entrypoint": "0x08000bcc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000bcc": "initialize_oven_08000bcc"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000cd0": {
            "additional_data": {
                "DAT_08007368": {
                    "1": "str1"
                },
                "DAT_08007378": {
                    "1": "str2"
                },
                "DAT_20000064": {
                    "1": "flag4"
                },
                "DAT_20000068": {
                    "1": "flag_var"
                },
                "DAT_20000180": {
                    "1": "timeout"
                },
                "DAT_20000184": {
                    "1": "flag5",
                    "2": "flag3"
                },
                "DAT_20000188": {
                    "1": "param3"
                },
                "DAT_2000018c": {
                    "1": "data_2"
                },
                "DAT_20000190": {
                    "1": "counter3",
                    "2": "time"
                },
                "DAT_20000194": {
                    "1": "message"
                },
                "DAT_200001b0": {
                    "1": "threshold_value_2"
                },
                "DAT_200001b4": {
                    "1": "limit1"
                },
                "DAT_200001b8": {
                    "1": "value3"
                },
                "DAT_200001bc": {
                    "1": "value4"
                },
                "DAT_200001c0": {
                    "1": "data"
                },
                "DAT_20000238": {
                    "1": "flag2",
                    "2": "state"
                },
                "DAT_20000239": {
                    "1": "flag4",
                    "2": "flag"
                },
                "DAT_20000240": {
                    "1": "param1"
                },
                "DAT_20000244": {
                    "1": "data4"
                },
                "DAT_20000248": {
                    "1": "flag3",
                    "2": "flag2"
                },
                "DAT_2000024c": {
                    "1": "data1"
                },
                "DAT_20000250": {
                    "1": "count2",
                    "3": "counter"
                },
                "DAT_20000254": {
                    "1": "counter2"
                },
                "DAT_20000258": {
                    "1": "limit"
                },
                "DAT_2000025c": {
                    "1": "time3"
                },
                "DAT_20000260": {
                    "1": "buffer2"
                },
                "DAT_2000036c": {
                    "1": "buffer"
                },
                "FUN_08000194": {
                    "1": "perform_operation",
                    "2": "get_data",
                    "6": "calculate_value"
                },
                "FUN_0800040c": {
                    "1": "convert_value2",
                    "2": "calculate_value",
                    "3": "calculate_difference"
                },
                "FUN_0800042c": {
                    "1": "calculate_checksum",
                    "2": "convert_value",
                    "6": "calculate_value"
                },
                "FUN_0800051a": {
                    "1": "is_valid_time"
                },
                "FUN_0800052c": {
                    "1": "calculate_new_value"
                },
                "FUN_080005754": {
                    "1": "check_connection"
                },
                "FUN_0800058e0": {
                    "1": "get_current_value"
                },
                "FUN_080005c96": {
                    "1": "append_string"
                },
                "FUN_080005cd4": {
                    "1": "display_message"
                },
                "FUN_080005d82": {
                    "1": "update_output"
                },
                "FUN_080006e4": {
                    "1": "get_pointer"
                },
                "FUN_080009c8": {
                    "1": "perform_operation",
                    "10": "check_condition",
                    "2": "check_connection",
                    "4": "check_value"
                },
                "FUN_080009dc": {
                    "1": "check_data2",
                    "2": "perform_action"
                },
                "FUN_080009f0": {
                    "1": "check_error",
                    "2": "check_condition2"
                },
                "FUN_08000a04": {
                    "1": "calculate_result",
                    "2": "perform_task",
                    "4": "check_data"
                },
                "FUN_08000a18": {
                    "1": "check_data2"
                },
                "FUN_08000cd0": {
                    "1": "update_settings",
                    "2": "process_data"
                },
                "FUN_08001060": {
                    "1": "set_time"
                },
                "FUN_0800134e": {
                    "1": "initialize_variable",
                    "2": "set_flag"
                },
                "FUN_0800135a": {
                    "1": "initialize_variable",
                    "2": "print_status",
                    "7": "initialize_data"
                },
                "FUN_08001366": {
                    "1": "append_string3",
                    "2": "process_data",
                    "3": "set_flag"
                },
                "FUN_080015c0": {
                    "1": "set_time_setpoint"
                },
                "FUN_080015f8": {
                    "1": "calculate_result",
                    "15": "allocate_memory"
                },
                "FUN_080016b4": {
                    "1": "initialize_variable",
                    "2": "perform_action"
                },
                "FUN_080018f8": {
                    "1": "set_values",
                    "3": "update_data"
                },
                "FUN_08001918": {
                    "1": "set_data_interval",
                    "2": "set_data",
                    "5": "set_interval"
                },
                "FUN_08001960": {
                    "1": "func_14",
                    "2": "set_data",
                    "4": "initialize_data"
                },
                "FUN_08001a44": {
                    "1": "set_flag2",
                    "2": "enable_feature",
                    "3": "set_flag"
                },
                "FUN_080026b8": {
                    "1": "set_error_message"
                },
                "FUN_08004e08": {
                    "1": "calculate_time_setpoint"
                },
                "FUN_08004e0c": {
                    "1": "is_valid_value"
                },
                "FUN_08004e10": {
                    "1": "is_time_setpoint_valid"
                },
                "FUN_08005754": {
                    "1": "has_data",
                    "2": "check_condition",
                    "9": "check_status"
                },
                "FUN_08005848": {
                    "1": "set_display",
                    "4": "update_value",
                    "5": "set_flag"
                },
                "FUN_08005890": {
                    "1": "check_time_setpoint_io",
                    "2": "check_value"
                },
                "FUN_080058e0": {
                    "1": "get_value1",
                    "5": "get_current_value"
                },
                "FUN_08005a58": {
                    "1": "check_error"
                },
                "FUN_08005c96": {
                    "1": "append_string4",
                    "2": "append_to_buffer",
                    "3": "print_message",
                    "5": "append_data"
                },
                "FUN_08005cd4": {
                    "1": "func_5",
                    "2": "print_message"
                },
                "FUN_08005d82": {
                    "1": "perform_operation",
                    "2": "print_data",
                    "3": "print_message"
                },
                "FUN_08005f2c": {
                    "1": "execute_operation",
                    "2": "append_data"
                },
                "FUN_08005f40": {
                    "1": "perform_operation",
                    "3": "display_data"
                },
                "extraout_r1": {
                    "1": "extra_status_1",
                    "3": "extra_output1"
                },
                "extraout_r1_00": {
                    "1": "temp_var4",
                    "3": "extra_output2"
                },
                "extraout_r1_01": {
                    "1": "high_result3",
                    "3": "extra_output3"
                },
                "iVar3": {
                    "1": "var2",
                    "2": "index"
                },
                "uVar1": {
                    "1": "count1",
                    "2": "result",
                    "3": "result1"
                },
                "uVar2": {
                    "1": "temp_var1",
                    "2": "value2",
                    "3": "result2"
                },
                "uVar4": {
                    "1": "u_var4",
                    "2": "result4"
                },
                "uVar5": {
                    "1": "var7",
                    "2": "result"
                }
            },
            "called": [
                "FUN_08005f2c",
                "FUN_080009c8",
                "FUN_080015f8",
                "FUN_080018f8",
                "FUN_08005c96",
                "FUN_0800042c",
                "FUN_080016b4",
                "FUN_08005890",
                "FUN_080058e0",
                "FUN_08000194",
                "FUN_08005cd4",
                "FUN_08005848",
                "FUN_08005d82",
                "FUN_08001918",
                "FUN_08001366",
                "FUN_08000a18",
                "FUN_0800040c",
                "FUN_08005754",
                "FUN_08001a44",
                "FUN_08000a04",
                "FUN_080009f0",
                "FUN_080009dc",
                "FUN_0800134e",
                "FUN_0800135a",
                "FUN_08005f40",
                "FUN_08001960"
            ],
            "calling": [
                "FUN_08005f6c"
            ],
            "code": "\nvoid update_data_08000cd0(void)\n\n{\n  uint result1;\n  undefined4 result2;\n  int index;\n  undefined4 result4;\n  undefined4 extra_output1;\n  undefined4 extra_output2;\n  undefined4 extra_output3;\n  undefined8 result;\n  \n  result1 = FUN_080058e0();\n  if (DAT_200001b4 < result1) {\n    DAT_200001b4 = DAT_200001b4 + 1000;\n    result = FUN_080015f8(&DAT_2000024c,0);\n    result4 = (undefined4)((ulonglong)result >> 0x20);\n    result2 = (undefined4)result;\n    DAT_20000188 = result2;\n    DAT_2000018c = result4;\n    index = FUN_080009c8(result2,result4,0,0x40c38800);\n    if (((index != 0) || (index = FUN_080009c8(result2,result4,0,0x40c38880), index != 0)) ||\n       (index = FUN_080009c8(result2,result4,0,0x40c38900), index != 0)) {\n      DAT_20000238 = 7;\n      DAT_20000239 = '\\0';\n    }\n  }\n  result1 = FUN_080058e0();\n  result2 = DAT_20000060;\n  if (DAT_200001b0 < result1) {\n    DAT_200001b0 = DAT_200001b0 + 1000;\n    if (DAT_20000239 == '\\x01') {\n      index = FUN_08005890(DAT_20000060);\n      FUN_08005848(result2,index == 0);\n      DAT_20000250 = DAT_20000250 + 1;\n      FUN_08005d82(&DAT_2000036c,DAT_20000250,10);\n      FUN_08005c96(&DAT_2000036c,&DAT_08007368);\n      FUN_08005f2c(&DAT_2000036c,extra_output1,DAT_20000240,DAT_20000244,2);\n      FUN_08005c96(&DAT_2000036c,&DAT_08007368);\n      FUN_08005f2c(&DAT_2000036c,extra_output2,DAT_20000188,DAT_2000018c,2);\n      FUN_08005c96(&DAT_2000036c,&DAT_08007368);\n      FUN_08005f40(&DAT_2000036c,extra_output3,DAT_200001b8,DAT_200001bc,2);\n    }\n    else {\n      FUN_08005848(DAT_20000060,1);\n    }\n    FUN_0800135a(&DAT_20000194);\n    FUN_08005c96(&DAT_20000194,(&PTR_s_Ready_2000003c)[DAT_20000238]);\n    FUN_08001366(&DAT_20000194,0,1);\n    if (DAT_20000238 == 7) {\n      FUN_08005c96(&DAT_20000194,\"TC Error!\");\n    }\n    else {\n      FUN_08005f2c(&DAT_20000194,2,DAT_20000188,DAT_2000018c,2);\n      FUN_0800134e(&DAT_20000194,0);\n      FUN_08005c96(&DAT_20000194,&DAT_08007378);\n    }\n  }\n  result4 = DAT_2000018c;\n  result2 = DAT_20000188;\n  switch(DAT_20000238) {\n  case 0:\n    index = FUN_08000a04(DAT_20000188,DAT_2000018c,0,0x40490000);\n    if (index == 0) {\n      if (DAT_20000248 == '\\x01') {\n        FUN_08005cd4(&DAT_2000036c,\"Time Setpoint Input Output\");\n        DAT_20000250 = 0;\n        DAT_2000025c = FUN_080058e0();\n        DAT_20000240 = 0;\n        DAT_20000244 = 0x4062c000;\n        result = FUN_0800042c(DAT_20000258);\n        FUN_08001960(&DAT_200001c0,(int)((ulonglong)result >> 0x20),0,0,result);\n        FUN_08001918(&DAT_200001c0,1000);\n        FUN_08001a44(&DAT_200001c0,1);\n        DAT_20000238 = 1;\n      }\n    }\n    else {\n      DAT_20000238 = 6;\n    }\n    break;\n  case 1:\n    DAT_20000239 = '\\x01';\n    index = FUN_08000a04(DAT_20000188,DAT_2000018c,0,0x4062c000);\n    if (index != 0) {\n      result = FUN_080058e0();\n      DAT_20000254 = (int)result + 9000;\n      FUN_080018f8(&DAT_200001c0,(int)((ulonglong)result >> 0x20),0,0x4072c000,0x9999999a,0x3fa99999,\n                   0,0x406f4000);\n      DAT_20000240 = 0;\n      DAT_20000244 = 0x40636000;\n      DAT_20000238 = 2;\n    }\n    break;\n  case 2:\n    result1 = FUN_080058e0();\n    if (DAT_20000254 < result1) {\n      index = FUN_080058e0();\n      DAT_20000254 = index + 9000;\n      result = FUN_08000194(DAT_20000240,DAT_20000244,0,0x40140000);\n      DAT_20000244 = (undefined4)((ulonglong)result >> 0x20);\n      DAT_20000240 = (undefined4)result;\n      result = FUN_08000a18(DAT_20000240,DAT_20000244,0,0x40690000);\n      if ((int)result != 0) {\n        FUN_080018f8(&DAT_200001c0,(int)((ulonglong)result >> 0x20),0,0x4072c000,0x9999999a,\n                     0x3fa99999,0,0x4075e000);\n        DAT_20000240 = 0;\n        DAT_20000244 = 0x406f4000;\n        DAT_20000238 = 3;\n      }\n    }\n    break;\n  case 3:\n    result = FUN_08000a04(DAT_20000188,DAT_2000018c,0,0x406ea000);\n    if ((int)result != 0) {\n      FUN_080018f8(&DAT_200001c0,(int)((ulonglong)result >> 0x20),0,0x4072c000,0x9999999a,0x3fa99999,\n                   0,0x4075e000);\n      DAT_20000240 = 0;\n      DAT_20000244 = 0x40590000;\n      DAT_20000238 = 4;\n    }\n    break;\n  case 4:\n    index = FUN_080009f0(DAT_20000188,DAT_2000018c,0,0x40590000);\n    if (index != 0) {\n      index = FUN_080058e0();\n      DAT_20000180 = index + 1000;\n      FUN_08005848(DAT_20000004,1);\n      DAT_20000239 = '\\0';\n      DAT_20000238 = 5;\n    }\n    break;\n  case 5:\n    result1 = FUN_080058e0();\n    if (DAT_20000180 < result1) {\n      FUN_08005848(DAT_20000004,0);\n      DAT_20000238 = 0;\n    }\n    break;\n  case 6:\n    index = FUN_080009dc(DAT_20000188,DAT_2000018c,0,0x40490000);\n    if (index != 0) {\n      DAT_20000238 = 0;\n    }\n    break;\n  case 7:\n    index = FUN_080009c8(DAT_20000188,DAT_2000018c,0,0x40c38800);\n    if (((index == 0) && (index = FUN_080009c8(result2,result4,0,0x40c38880), index == 0)) &&\n       (index = FUN_080009c8(result2,result4,0,0x40c38900), index == 0)) {\n      DAT_20000238 = 0;\n    }\n    else {\n      DAT_20000238 = 7;\n    }\n  }\n  if ((DAT_20000248 == '\\x01') && (DAT_20000239 == '\\x01')) {\n    DAT_20000239 = '\\0';\n    DAT_20000238 = 0;\n  }\n  if (DAT_20000184 == '\\x01') {\n    index = FUN_08005754(DAT_20000068);\n    if (index == 0) {\n      index = FUN_080058e0();\n      if (0x32 < (uint)(index - DAT_20000190)) {\n        DAT_20000184 = '\\x02';\n      }\n    }\n    else {\n      DAT_20000184 = '\\0';\n    }\n  }\n  else if (DAT_20000184 == '\\0') {\n    DAT_20000248 = '\\0';\n    index = FUN_08005754(DAT_20000068);\n    if (index == 0) {\n      DAT_20000190 = FUN_080058e0();\n      DAT_20000184 = '\\x01';\n    }\n  }\n  else if ((DAT_20000184 == '\\x02') && (index = FUN_08005754(DAT_20000068), index != 0)) {\n    DAT_20000248 = '\\x01';\n    DAT_20000184 = '\\0';\n  }\n  if (DAT_20000239 == '\\x01') {\n    index = FUN_080058e0();\n    FUN_080016b4(&DAT_200001c0);\n    if (DAT_20000258 < (uint)(index - DAT_2000025c)) {\n      DAT_2000025c = DAT_2000025c + DAT_20000258;\n    }\n    result = FUN_0800040c(index - DAT_2000025c);\n    index = FUN_080009dc((int)result,(int)((ulonglong)result >> 0x20),DAT_200001b8,DAT_200001bc);\n    if (index == 0) {\n      FUN_08005848(DAT_20000064,0);\n    }\n    else {\n      FUN_08005848(DAT_20000064,1);\n    }\n  }\n  else {\n    FUN_08005848(DAT_20000064,0);\n  }\n  return;\n}\n\n",
            "current_name": "update_data_08000cd0",
            "entrypoint": "0x08000cd0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000cd0": "update_data_08000cd0",
                "extraout_r1": "extra_output1",
                "extraout_r1_00": "extra_output2",
                "extraout_r1_01": "extra_output3",
                "iVar3": "index",
                "uVar1": "result1",
                "uVar2": "result2",
                "uVar4": "result4",
                "uVar5": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08001294": {
            "additional_data": {
                "FUN_08001294": {
                    "1": "store_parameters",
                    "11": "set_parameters",
                    "14": "set_params",
                    "2": "set_memory_values"
                },
                "param_1": {
                    "1": "object",
                    "16": "object_address",
                    "2": "memory_address"
                },
                "param_2": {
                    "1": "param_2",
                    "2": "parameter1",
                    "21": "value1",
                    "3": "param2"
                },
                "param_3": {
                    "1": "value_2",
                    "2": "parameter2",
                    "21": "value2",
                    "3": "param3"
                },
                "param_4": {
                    "1": "value_3",
                    "2": "parameter3",
                    "21": "value3",
                    "3": "param4"
                },
                "param_5": {
                    "1": "param_5",
                    "2": "parameter4",
                    "21": "value4",
                    "3": "param5"
                }
            },
            "called": [],
            "calling": [
                "FUN_080013a4"
            ],
            "code": "\nvoid set_params_08001294(int object_address,undefined value1,undefined value2,undefined value3,\n                 undefined value4)\n\n{\n  *(undefined *)(object_address + 0x18) = value1;\n  *(undefined *)(object_address + 0x19) = value2;\n  *(undefined *)(object_address + 0x1a) = value3;\n  *(undefined *)(object_address + 0x1b) = value4;\n  return;\n}\n\n",
            "current_name": "set_params_08001294",
            "entrypoint": "0x08001294",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08001294": "set_params_08001294",
                "param_1": "object_address",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3",
                "param_5": "value4"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080012a2": {
            "additional_data": {
                "*(undefined *)(param_1 + 10)": {
                    "1": "number_ptr",
                    "2": "data"
                },
                "FUN_080012a2": {
                    "1": "extract_and_process_data",
                    "2": "execute_operations",
                    "3": "execute_function_three_times",
                    "8": "execute_function"
                },
                "FUN_08005848": {
                    "1": "call_another_function",
                    "2": "perform_operation",
                    "3": "send_data",
                    "5": "execute_sub_function"
                },
                "param_1": {
                    "1": "resource_id",
                    "2": "input_param",
                    "4": "input",
                    "5": "param",
                    "6": "input_value"
                },
                "param_2": {
                    "1": "operation_code",
                    "2": "operation_type"
                },
                "param_3": {
                    "1": "flag2",
                    "2": "sub_func_param2"
                },
                "param_4": {
                    "1": "param_four",
                    "2": "sub_func_param3",
                    "3": "data_pointer"
                }
            },
            "called": [
                "FUN_08005848"
            ],
            "calling": [
                "FUN_080012c0",
                "FUN_080012e8"
            ],
            "code": "\nvoid execute_function_080012a2(int input_value)\n\n{\n  FUN_08005848(*(undefined *)(input_value + 10),0);\n  FUN_08005848(*(undefined *)(input_value + 10),1);\n  FUN_08005848(*(undefined *)(input_value + 10),0);\n  return;\n}\n\n",
            "current_name": "execute_function_080012a2",
            "entrypoint": "0x080012a2",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080012a2": "execute_function_080012a2",
                "param_1": "input_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080012c0": {
            "additional_data": {
                "*(undefined *)(param_1 + uVar1 + 0xb)": {
                    "1": "data_element"
                },
                "FUN_080012a2": {
                    "1": "perform_cleanup",
                    "2": "cleanup_data"
                },
                "FUN_080012c0": {
                    "1": "reverse_and_process",
                    "19": "process_data",
                    "3": "reverse_and_update_bits"
                },
                "FUN_08005848": {
                    "1": "update_data"
                },
                "param_1": {
                    "1": "input_pointer",
                    "2": "buffer_address",
                    "3": "input_address",
                    "4": "data_ptr",
                    "8": "data_address"
                },
                "param_2": {
                    "1": "input_data",
                    "2": "flags",
                    "4": "bitmask",
                    "5": "input_value"
                },
                "param_2 >> (uVar1 & 0xff) & 1": {
                    "1": "bit_value"
                },
                "param_4": {
                    "1": "data_ptr"
                },
                "uVar1": {
                    "1": "iter_count",
                    "2": "iteration_count",
                    "3": "counter",
                    "4": "bit_index",
                    "7": "i",
                    "9": "index"
                }
            },
            "called": [
                "FUN_080012a2",
                "FUN_08005848"
            ],
            "calling": [
                "FUN_08001310",
                "FUN_080013a4"
            ],
            "code": "\nvoid process_data_080012c0(int data_address,int input_value)\n\n{\n  uint index;\n  \n  for (index = 0; (int)index < 4; index = index + 1) {\n    FUN_08005848(*(undefined *)(data_address + index + 0xb),input_value >> (index & 0xff) & 1);\n  }\n  FUN_080012a2(data_address);\n  return;\n}\n\n",
            "current_name": "process_data_080012c0",
            "entrypoint": "0x080012c0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080012c0": "process_data_080012c0",
                "param_1": "data_address",
                "param_2": "input_value",
                "uVar1": "index"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080012e8": {
            "additional_data": {
                "*(undefined *)(param_1 + uVar1 + 0xb)": {
                    "1": "data"
                },
                "FUN_080012a2": {
                    "2": "finalize_processing"
                },
                "FUN_080012e8": {
                    "1": "extract_bits",
                    "2": "reverse_and_process",
                    "3": "extract_and_process_bits",
                    "5": "process_bits",
                    "8": "process_data"
                },
                "FUN_08005848": {
                    "1": "process_data_entry",
                    "3": "process_byte"
                },
                "param_1": {
                    "1": "array_address",
                    "10": "data_address",
                    "2": "buffer_address",
                    "4": "input_address"
                },
                "param_2": {
                    "1": "binary_value",
                    "2": "bit_mask",
                    "3": "bit_pattern",
                    "4": "value",
                    "6": "input_value"
                },
                "param_4": {
                    "1": "data_entry"
                },
                "uVar1": {
                    "1": "bit_position",
                    "14": "bit_index",
                    "3": "counter",
                    "5": "iteration",
                    "7": "index"
                }
            },
            "called": [
                "FUN_080012a2",
                "FUN_08005848"
            ],
            "calling": [
                "FUN_08001310"
            ],
            "code": "\nvoid process_data_080012e8(int data_address,int input_value)\n\n{\n  uint bit_index;\n  \n  for (bit_index = 0; (int)bit_index < 8; bit_index = bit_index + 1) {\n    FUN_08005848(*(undefined *)(data_address + bit_index + 0xb),input_value >> (bit_index & 0xff) & 1);\n  }\n  FUN_080012a2(data_address);\n  return;\n}\n\n",
            "current_name": "process_data_080012e8",
            "entrypoint": "0x080012e8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080012e8": "process_data_080012e8",
                "param_1": "data_address",
                "param_2": "input_value",
                "uVar1": "bit_index"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08001310": {
            "additional_data": {
                "*(char *)(param_1 + 9)": {
                    "1": "data_char"
                },
                "*(undefined *)(param_1 + 8)": {
                    "1": "data_ptr1"
                },
                "FUN_080012c0": {
                    "1": "process_sub_function_a",
                    "2": "process_flagged_data",
                    "4": "process_data1"
                },
                "FUN_080012e8": {
                    "1": "process_data_helper3",
                    "3": "reverse_data",
                    "4": "process_data2"
                },
                "FUN_08001310": {
                    "1": "update_data",
                    "18": "process_data"
                },
                "FUN_08005848": {
                    "1": "perform_operation",
                    "2": "process_data_helper",
                    "4": "process_sub_function1",
                    "6": "process_data"
                },
                "param_1": {
                    "1": "input_data",
                    "2": "data_address",
                    "4": "data_pointer",
                    "5": "input_param",
                    "6": "data_ptr"
                },
                "param_2": {
                    "1": "input_param_2",
                    "2": "arg2",
                    "3": "data_value",
                    "4": "data_size",
                    "5": "value",
                    "8": "flags"
                },
                "param_2 >> 4": {
                    "1": "shifted_data_size"
                },
                "param_3": {
                    "1": "arg2",
                    "10": "param1",
                    "2": "arg3",
                    "3": "param_a",
                    "6": "arg1"
                },
                "param_4": {
                    "1": "input_param_4",
                    "10": "param2",
                    "2": "arg4",
                    "3": "param_b",
                    "6": "arg2"
                }
            },
            "called": [
                "FUN_08005848",
                "FUN_080012c0",
                "FUN_080012e8"
            ],
            "calling": [
                "FUN_0800138e",
                "FUN_0800134e",
                "FUN_08001550",
                "FUN_0800135a",
                "FUN_080013a4",
                "FUN_08001366"
            ],
            "code": "\nvoid process_data_08001310(int data_ptr,uint flags,undefined4 param1,undefined4 param2)\n\n{\n  FUN_08005848(*(undefined *)(data_ptr + 8),param1,param1,param2,param2);\n  if (*(char *)(data_ptr + 9) != -1) {\n    FUN_08005848(*(char *)(data_ptr + 9),0);\n  }\n  if ((*(byte *)(data_ptr + 0x13) & 0x10) == 0) {\n    FUN_080012c0(data_ptr,flags >> 4);\n    FUN_080012c0(data_ptr,flags);\n    return;\n  }\n  FUN_080012e8(data_ptr,flags);\n  return;\n}\n\n",
            "current_name": "process_data_08001310",
            "entrypoint": "0x08001310",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08001310": "process_data_08001310",
                "param_1": "data_ptr",
                "param_2": "flags",
                "param_3": "param1",
                "param_4": "param2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800134e": {
            "additional_data": {
                "FUN_08001310": {
                    "1": "perform_operation",
                    "2": "process_data"
                },
                "FUN_0800134e": {
                    "1": "initialize_and_return_value",
                    "2": "initialize_process",
                    "3": "initialize_and_return",
                    "4": "process_data",
                    "5": "initialize_and_return_one",
                    "7": "execute_function"
                },
                "param_1": {
                    "1": "input_param_1",
                    "2": "input_param",
                    "3": "data_1",
                    "6": "arg1"
                },
                "param_2": {
                    "1": "param_2",
                    "2": "input_param2",
                    "3": "data_2",
                    "6": "arg2"
                },
                "param_3": {
                    "1": "constant",
                    "2": "unknown_param",
                    "6": "arg3"
                },
                "param_4": {
                    "1": "unused2",
                    "2": "input_param4",
                    "3": "data_4",
                    "6": "arg4"
                }
            },
            "called": [
                "FUN_08001310"
            ],
            "calling": [
                "FUN_08000cd0"
            ],
            "code": "\nundefined4 execute_function_0800134e(undefined4 arg1,undefined4 arg2,undefined4 arg3,undefined4 arg4)\n\n{\n  FUN_08001310(arg1,arg2,1,arg4,arg4);\n  return 1;\n}\n\n",
            "current_name": "execute_function_0800134e",
            "entrypoint": "0x0800134e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800134e": "execute_function_0800134e",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arg3",
                "param_4": "arg4"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800135a": {
            "additional_data": {
                "FUN_08001310": {
                    "1": "perform_operation",
                    "3": "process_data"
                },
                "FUN_0800135a": {
                    "1": "initialize_settings",
                    "13": "initialize_function",
                    "2": "initialize_parameters",
                    "3": "execute_function",
                    "5": "initialize_data"
                },
                "param_1": {
                    "1": "input_param",
                    "2": "input1",
                    "4": "param_1",
                    "8": "param1"
                },
                "param_2": {
                    "1": "setting2",
                    "2": "param_2",
                    "6": "param2",
                    "7": "arg2"
                },
                "param_3": {
                    "1": "input3",
                    "2": "param_3",
                    "6": "arg3"
                },
                "param_4": {
                    "1": "value4",
                    "2": "input4",
                    "4": "param_4",
                    "8": "arg4"
                }
            },
            "called": [
                "FUN_08001310"
            ],
            "calling": [
                "FUN_08000cd0",
                "FUN_08000bcc",
                "FUN_080013a4"
            ],
            "code": "\nvoid initialize_function_0800135a(undefined4 arg1,undefined4 arg2,undefined4 arg3,undefined4 arg4)\n\n{\n  FUN_08001310(arg1,1,0,arg4,arg4);\n  return;\n}\n\n",
            "current_name": "initialize_function_0800135a",
            "entrypoint": "0x0800135a",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800135a": "initialize_function_0800135a",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arg3",
                "param_4": "arg4"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08001366": {
            "additional_data": {
                "FUN_08001310": {
                    "1": "process_data",
                    "2": "call_sub_function"
                },
                "FUN_08001366": {
                    "1": "update_character_and_call_function",
                    "18": "process_data",
                    "2": "process_character",
                    "3": "process_input"
                },
                "cVar1": {
                    "1": "byte_val",
                    "2": "byte_value",
                    "3": "selected_character",
                    "6": "selected_char"
                },
                "param_1": {
                    "1": "data_ptr",
                    "2": "input_data",
                    "3": "input_array",
                    "4": "input_buffer",
                    "6": "data_pointer",
                    "7": "data_address"
                },
                "param_2": {
                    "1": "char_offset",
                    "10": "flag",
                    "2": "char_code",
                    "4": "input_char",
                    "6": "character"
                },
                "param_3": {
                    "1": "maximum_index",
                    "2": "max_size",
                    "3": "max_value",
                    "4": "limit",
                    "5": "length"
                },
                "param_4": {
                    "1": "extra_parameter",
                    "2": "unknown_param",
                    "4": "param",
                    "5": "additional_param",
                    "6": "param4"
                }
            },
            "called": [
                "FUN_08001310"
            ],
            "calling": [
                "FUN_08000cd0",
                "FUN_08000bcc"
            ],
            "code": "\nvoid process_data_08001366(int data_address,char flag,uint length,undefined4 param4)\n\n{\n  char selected_char;\n  \n  if (3 < length) {\n    length = 3;\n  }\n  if ((int)(uint)*(byte *)(data_address + 0x17) <= (int)length) {\n    length = *(byte *)(data_address + 0x17) - 1 & 0xff;\n  }\n  selected_char = *(char *)(length + data_address + 0x18);\n  FUN_08001310(data_address,flag + selected_char | 0x80,0,selected_char,param4);\n  return;\n}\n\n",
            "current_name": "process_data_08001366",
            "entrypoint": "0x08001366",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08001366": "process_data_08001366",
                "cVar1": "selected_char",
                "param_1": "data_address",
                "param_2": "flag",
                "param_3": "length",
                "param_4": "param4"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800138e": {
            "additional_data": {
                "FUN_08001310": {
                    "1": "call_function",
                    "2": "call_sub_function"
                },
                "FUN_0800138e": {
                    "1": "update_permissions",
                    "12": "set_flag_and_call_function",
                    "2": "set_bit_and_call_function",
                    "5": "update_flag_and_call_function"
                },
                "bVar1": {
                    "1": "old_value",
                    "2": "original_value",
                    "3": "current_value",
                    "7": "current_flag_value"
                },
                "param_1": {
                    "1": "input_pointer",
                    "2": "data_ptr",
                    "5": "data_address",
                    "6": "data_pointer"
                },
                "param_2": {
                    "1": "flag_value_a",
                    "2": "value1",
                    "3": "flag_value",
                    "5": "flag1",
                    "6": "param2"
                },
                "param_3": {
                    "1": "flag2",
                    "4": "unused_param",
                    "6": "param3"
                },
                "param_4": {
                    "1": "data_value",
                    "2": "unused_param",
                    "9": "param4"
                }
            },
            "called": [
                "FUN_08001310"
            ],
            "calling": [
                "FUN_080013a4"
            ],
            "code": "\nvoid set_flag_and_call_function_0800138e(int data,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  byte current_flag_value;\n  \n  current_flag_value = *(byte *)(data + 0x14);\n  *(byte *)(data + 0x14) = current_flag_value | 4;\n  FUN_08001310(data,current_flag_value | 0xc,0,param4,param4);\n  return;\n}\n\n",
            "current_name": "set_flag_and_call_function_0800138e",
            "entrypoint": "0x0800138e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800138e": "set_flag_and_call_function_0800138e",
                "bVar1": "current_flag_value",
                "param_1": "data",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080013a4": {
            "additional_data": {
                "*(byte *)(param_1 + 0x13)": {
                    "1": "data_flag"
                },
                "*(byte *)(param_1 + 0x13) & 0x10": {
                    "1": "flag_comparison"
                },
                "*(byte *)(param_1 + 0x13) | 0x20": {
                    "1": "combined_flag"
                },
                "*(char *)(param_1 + 0x17)": {
                    "1": "char_value"
                },
                "*(char *)(param_1 + 9)": {
                    "1": "char_value2"
                },
                "*(undefined *)(param_1 + 0x14)": {
                    "1": "flag_value"
                },
                "*(undefined *)(param_1 + 0x15)": {
                    "1": "flag_value2"
                },
                "*(undefined *)(param_1 + 10)": {
                    "1": "pointer_value2"
                },
                "*(undefined *)(param_1 + 8)": {
                    "1": "pointer_value1"
                },
                "*(undefined *)(param_1 + iVar2 + 0xb)": {
                    "1": "modified_data"
                },
                "FUM_0800138e": {
                    "1": "process_data1"
                },
                "FUN_08001294": {
                    "1": "copy_data_to_memory",
                    "3": "process_step7",
                    "4": "copy_data"
                },
                "FUN_080012c0": {
                    "1": "update_control_signal",
                    "3": "process_step5"
                },
                "FUN_08001310": {
                    "1": "process_data_func2",
                    "3": "process_step2"
                },
                "FUN_0800135a": {
                    "1": "perform_operation",
                    "3": "process_step3"
                },
                "FUN_0800138e": {
                    "1": "execute_operation",
                    "3": "process_step1"
                },
                "FUN_080013a4": {
                    "1": "update_data",
                    "14": "process_data",
                    "2": "process_function",
                    "4": "process_params"
                },
                "FUN_080057b4": {
                    "1": "process_data_func6",
                    "3": "process_step6"
                },
                "FUN_08005848": {
                    "1": "finalize_data",
                    "3": "process_step4"
                },
                "iVar1": {
                    "1": "flag_value",
                    "2": "condition",
                    "3": "counter1",
                    "4": "loop_index",
                    "7": "loop_counter"
                },
                "iVar2": {
                    "1": "temp2",
                    "2": "inner_loop_counter",
                    "3": "counter2",
                    "4": "index"
                },
                "param_1": {
                    "1": "input_pointer",
                    "11": "data",
                    "2": "base_address",
                    "3": "data_pointer"
                },
                "param_2": {
                    "1": "param1",
                    "12": "param2",
                    "2": "offset",
                    "3": "size",
                    "6": "value1"
                },
                "param_3": {
                    "1": "loop_param",
                    "2": "count",
                    "3": "value1",
                    "6": "value2",
                    "8": "param3"
                },
                "param_4": {
                    "1": "condition_param",
                    "2": "condition",
                    "3": "value2",
                    "4": "flag",
                    "6": "value3",
                    "8": "param4"
                }
            },
            "called": [
                "FUN_0800138e",
                "FUN_08001310",
                "FUN_0800135a",
                "FUN_08005848",
                "FUN_080012c0",
                "FUN_080057b4",
                "FUN_08001294"
            ],
            "calling": [
                "FUN_080014ba",
                "FUN_08000bcc"
            ],
            "code": "\nvoid process_data_080013a4(int data,int param2,int param3,int param4)\n\n{\n  int loop_counter;\n  int counter;\n  \n  if (1 < param3) {\n    *(byte *)(data + 0x13) = *(byte *)(data + 0x13) | 8;\n  }\n  *(char *)(data + 0x17) = (char)param3;\n  FUN_08001294(data,0,0x40,param2,param2 + 0x40);\n  if ((param4 != 0) && (param3 == 1)) {\n    *(byte *)(data + 0x13) = *(byte *)(data + 0x13) | 4;\n  }\n  FUN_080057b4(*(undefined *)(data + 8),1);\n  if (*(char *)(data + 9) != -1) {\n    FUN_080057b4(*(char *)(data + 9),1);\n  }\n  FUN_080057b4(*(undefined *)(data + 10),1);\n  counter = 0;\n  while( true ) {\n    if ((*(byte *)(data + 0x13) & 0x10) == 0) {\n      loop_counter = 4;\n    }\n    else {\n      loop_counter = 8;\n    }\n    if (loop_counter <= counter) break;\n    FUN_080057b4(*(undefined *)(data + counter + 0xb),1);\n    counter = counter + 1;\n  }\n  FUN_08005848(*(undefined *)(data + 8),0);\n  FUN_08005848(*(undefined *)(data + 10),0);\n  if (*(char *)(data + 9) != -1) {\n    FUN_08005848(*(char *)(data + 9),0);\n  }\n  if ((*(byte *)(data + 0x13) & 0x10) == 0) {\n    FUN_080012c0(data,3);\n    FUN_080012c0(data,3);\n    FUN_080012c0(data,3);\n    FUN_080012c0(data,2);\n  }\n  else {\n    FUN_08001310(data,*(byte *)(data + 0x13) | 0x20,0);\n    FUN_08001310(data,*(byte *)(data + 0x13) | 0x20,0);\n    FUN_08001310(data,*(byte *)(data + 0x13) | 0x20,0);\n  }\n  FUN_08001310(data,*(byte *)(data + 0x13) | 0x20,0);\n  *(undefined *)(data + 0x14) = 4;\n  FUN_0800138e(data);\n  FUN_0800135a(data);\n  *(undefined *)(data + 0x15) = 2;\n  FUN_08001310(data,6,0);\n  return;\n}\n\n",
            "current_name": "process_data_080013a4",
            "entrypoint": "0x080013a4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080013a4": "process_data_080013a4",
                "iVar1": "loop_counter",
                "iVar2": "counter",
                "param_1": "data",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080014ba": {
            "additional_data": {
                "FUN_080013a4": {
                    "1": "initialize_function",
                    "2": "execute_sub_function",
                    "5": "call_sub_function",
                    "9": "process_data"
                },
                "FUN_080014ba": {
                    "1": "update_parameters",
                    "2": "initialize_parameters",
                    "3": "set_function_params",
                    "5": "set_parameters",
                    "7": "initialize_params"
                },
                "param_1": {
                    "1": "memory_address",
                    "3": "function_pointer",
                    "5": "buffer"
                },
                "param_10": {
                    "1": "param8",
                    "15": "value8",
                    "2": "value_8",
                    "3": "param_10",
                    "5": "param10"
                },
                "param_11": {
                    "1": "undefined_param9",
                    "15": "value9",
                    "2": "value_9",
                    "3": "param_11",
                    "5": "param11"
                },
                "param_12": {
                    "1": "argument_12",
                    "15": "value10",
                    "2": "value_10",
                    "3": "param_12",
                    "5": "param12"
                },
                "param_13": {
                    "1": "value9",
                    "15": "value11",
                    "2": "value_11",
                    "3": "param_13",
                    "5": "param13"
                },
                "param_2": {
                    "1": "param1",
                    "25": "flag",
                    "3": "condition"
                },
                "param_3": {
                    "1": "unknown_value1",
                    "14": "value1",
                    "2": "value_1",
                    "3": "param_3",
                    "5": "param3"
                },
                "param_4": {
                    "1": "param4_value",
                    "14": "value2",
                    "2": "value_2",
                    "5": "param4"
                },
                "param_5": {
                    "1": "unknown_value2",
                    "15": "value3",
                    "2": "value_3",
                    "3": "param_5",
                    "5": "param5"
                },
                "param_6": {
                    "1": "param6_value",
                    "15": "value4",
                    "2": "value_4",
                    "3": "param_6",
                    "5": "param6"
                },
                "param_7": {
                    "1": "new_value5",
                    "15": "value5",
                    "2": "value_5",
                    "3": "param_7",
                    "5": "param7"
                },
                "param_8": {
                    "1": "value4",
                    "15": "value6",
                    "2": "value_6",
                    "3": "param_8",
                    "5": "param8"
                },
                "param_9": {
                    "1": "new_value7",
                    "15": "value7",
                    "2": "value_7",
                    "3": "param_9",
                    "5": "param9"
                }
            },
            "called": [
                "FUN_080013a4"
            ],
            "calling": [
                "FUN_08001510"
            ],
            "code": "\nvoid initialize_params_080014ba(int base_address,int flag,undefined value1,undefined4 value2,undefined value3,\n                 undefined value4,undefined value5,undefined value6,undefined value7,\n                 undefined value8,undefined value9,undefined value10,undefined value11)\n\n{\n  *(undefined *)(base_address + 8) = value1;\n  *(char *)(base_address + 9) = (char)value2;\n  *(undefined *)(base_address + 10) = value3;\n  *(undefined *)(base_address + 0xb) = value4;\n  *(undefined *)(base_address + 0xc) = value5;\n  *(undefined *)(base_address + 0xd) = value6;\n  *(undefined *)(base_address + 0xe) = value7;\n  *(undefined *)(base_address + 0xf) = value8;\n  *(undefined *)(base_address + 0x10) = value9;\n  *(undefined *)(base_address + 0x11) = value10;\n  *(undefined *)(base_address + 0x12) = value11;\n  if (flag == 0) {\n    *(undefined *)(base_address + 0x13) = 0x10;\n  }\n  else {\n    *(undefined *)(base_address + 0x13) = 0;\n  }\n  FUN_080013a4(base_address,0x10,1,0,value2);\n  return;\n}\n\n",
            "current_name": "initialize_params_080014ba",
            "entrypoint": "0x080014ba",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080014ba": "initialize_params_080014ba",
                "param_1": "base_address",
                "param_10": "value8",
                "param_11": "value9",
                "param_12": "value10",
                "param_13": "value11",
                "param_2": "flag",
                "param_3": "value1",
                "param_4": "value2",
                "param_5": "value3",
                "param_6": "value4",
                "param_7": "value5",
                "param_8": "value6",
                "param_9": "value7"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08001510": {
            "additional_data": {
                "&PTR_FUN_0800134e_1_080073f8": {
                    "1": "function_pointer"
                },
                "*param_1": {
                    "1": "pointer_array"
                },
                "FUN_080014ba": {
                    "1": "update_buffer_data",
                    "2": "perform_operation",
                    "8": "sub_function"
                },
                "FUN_08001510": {
                    "1": "initialize_data_structure",
                    "2": "initialize_param",
                    "23": "initialize_function"
                },
                "param_1": {
                    "1": "result_pointer",
                    "2": "result_array",
                    "6": "array",
                    "8": "output_array"
                },
                "param_2": {
                    "1": "param_2",
                    "11": "value1",
                    "2": "input1",
                    "4": "input_value1"
                },
                "param_3": {
                    "1": "arg2",
                    "11": "value2",
                    "2": "value_2",
                    "4": "param3"
                },
                "param_4": {
                    "1": "input_data3",
                    "11": "value3",
                    "2": "value_3",
                    "4": "param4"
                },
                "param_5": {
                    "1": "input_param5",
                    "2": "input4",
                    "8": "param5"
                },
                "param_6": {
                    "1": "unused2",
                    "2": "param5",
                    "3": "flag2",
                    "5": "input_value5",
                    "7": "param6"
                },
                "param_7": {
                    "1": "byte3",
                    "2": "value6",
                    "3": "input6",
                    "5": "input_value6",
                    "7": "param7"
                }
            },
            "called": [
                "FUN_080014ba"
            ],
            "calling": [
                "FUN_08000b08"
            ],
            "code": "\nundefined4 *\ninitialize_function_08001510(undefined4 *output_array,undefined4 value1,undefined4 value2,undefined4 value3,\n            undefined param5,undefined param6,undefined param7)\n\n{\n  output_array[1] = 0;\n  *output_array = &PTR_FUN_0800134e_1_080073f8;\n  FUN_080014ba(output_array,1,value1,0xff,value2,value3,param5,param6,param7,0,0,0,0);\n  return output_array;\n}\n\n",
            "current_name": "initialize_function_08001510",
            "entrypoint": "0x08001510",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08001510": "initialize_function_08001510",
                "param_1": "output_array",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3",
                "param_5": "param5",
                "param_6": "param6",
                "param_7": "param7"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08001550": {
            "additional_data": {
                "FUN_08001550": {
                    "1": "copy_values_to_function",
                    "24": "process_data",
                    "3": "execute_function"
                },
                "F_08001310": {
                    "1": "initialize_data"
                },
                "iVar1": {
                    "1": "counter",
                    "21": "index",
                    "6": "i"
                },
                "param_1": {
                    "1": "input_array",
                    "2": "output_buffer",
                    "3": "data_ptr",
                    "5": "data",
                    "9": "data_array"
                },
                "param_2": {
                    "1": "flags",
                    "2": "input_size",
                    "3": "bitmask",
                    "4": "size",
                    "5": "data_length",
                    "6": "length"
                },
                "param_3": {
                    "1": "buffer",
                    "2": "data_start_index",
                    "3": "array_address",
                    "4": "data_offset",
                    "6": "data_address"
                }
            },
            "called": [
                "FUN_08001310"
            ],
            "calling": [
                "FUN_08000bcc"
            ],
            "code": "\nvoid process_data_08001550(undefined4 *data_array,uint length,int data_address)\n\n{\n  int index;\n  \n  FUN_08001310(data_array,(length & 7) << 3 | 0x40,0);\n  for (index = 0; index < 8; index = index + 1) {\n    (**(code **)*data_array)(data_array,*(undefined *)(data_address + index));\n  }\n  return;\n}\n\n",
            "current_name": "process_data_08001550",
            "entrypoint": "0x08001550",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08001550": "process_data_08001550",
                "iVar1": "index",
                "param_1": "data_array",
                "param_2": "length",
                "param_3": "data_address"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800157c": {
            "additional_data": {
                "<original_function_name>": {
                    "1": "initialize_param_data"
                },
                "FUN_0800157c": {
                    "1": "assign_params_and_call_sub_functions",
                    "2": "initialize_data",
                    "4": "initialize_buffer"
                },
                "FUN_080057b4": {
                    "1": "update_parameter_value",
                    "2": "perform_action",
                    "4": "process_value"
                },
                "FUN_08005848": {
                    "1": "do_something_else_with_param",
                    "2": "update_data"
                },
                "fun_080057b4": {
                    "1": "process_data"
                },
                "param_1": {
                    "1": "output_buffer",
                    "2": "output",
                    "4": "data",
                    "6": "buffer"
                },
                "param_1[1]": {
                    "1": "param_buffer_element1"
                },
                "param_1[2]": {
                    "1": "param_buffer_element2"
                },
                "param_2": {
                    "1": "param_2",
                    "10": "value1",
                    "12": "value",
                    "2": "character"
                },
                "param_3": {
                    "1": "first_param",
                    "10": "value2",
                    "2": "param1_value",
                    "3": "value1"
                },
                "param_4": {
                    "1": "value_3",
                    "10": "value3",
                    "2": "flag2",
                    "3": "value2"
                }
            },
            "called": [
                "FUN_08005848",
                "FUN_080057b4"
            ],
            "calling": [
                "FUN_08000b08"
            ],
            "code": "\nundefined * initialize_buffer_0800157c(undefined *buffer,undefined4 value,undefined value2,undefined value3)\n\n{\n  *buffer = (char)value;\n  value2 = value2;\n  value3 = value3;\n  FUN_080057b4(value,0);\n  FUN_080057b4(value2,1);\n  FUN_080057b4(value3,1);\n  FUN_08005848(value2,1);\n  FUN_08005848(value3,0);\n  return buffer;\n}\n\n",
            "current_name": "initialize_buffer_0800157c",
            "entrypoint": "0x0800157c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800157c": "initialize_buffer_0800157c",
                "param_1": "buffer",
                "param_1[1]": "value2",
                "param_1[2]": "value3",
                "param_2": "value",
                "param_3": "value2",
                "param_4": "value3"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080015b2": {
            "additional_data": {
                "*param_1": {
                    "1": "param1_data"
                },
                "FUN_080015b2": {
                    "1": "extract_bits",
                    "2": "find_set_bits",
                    "9": "reverse_bits"
                },
                "FUN_08005848": {
                    "1": "set_parameter",
                    "2": "set_bit"
                },
                "FUN_08005890": {
                    "1": "check_value",
                    "2": "check_bit"
                },
                "iVar1": {
                    "1": "is_set",
                    "2": "check_result",
                    "24": "result",
                    "3": "bit_value"
                },
                "param_1": {
                    "1": "ptr_array",
                    "10": "data",
                    "2": "input",
                    "5": "input_array",
                    "6": "array"
                },
                "param_1[1]": {
                    "1": "param1_start_flag"
                },
                "param_1[2]": {
                    "1": "param2_flag"
                },
                "param_2": {
                    "1": "enable_flag"
                },
                "param_3": {
                    "1": "flag2"
                },
                "param_4": {
                    "1": "param_invalid"
                },
                "uVar2": {
                    "1": "bit_index1",
                    "16": "bit_index",
                    "2": "index",
                    "3": "bit_count",
                    "8": "bit_position"
                },
                "uVar3": {
                    "1": "encoded_value",
                    "2": "bit_mask",
                    "4": "result",
                    "5": "extracted_bits",
                    "7": "reversed_bits"
                }
            },
            "called": [
                "FUN_08005848",
                "FUN_08005890"
            ],
            "calling": [
                "FUN_080015f8"
            ],
            "code": "\nuint reverse_bits_080015b2(undefined *data)\n\n{\n  int result;\n  uint bit_index;\n  uint reversed_bits;\n  \n  FUN_08005848(param1_start_flag,0);\n  reversed_bits = 0;\n  for (bit_index = 0x1f; -1 < (int)bit_index; bit_index = bit_index - 1) {\n    FUN_08005848(param2_flag,1);\n    result = FUN_08005890(*data);\n    if (result != 0) {\n      reversed_bits = reversed_bits | 1 << (bit_index & 0xff);\n    }\n    FUN_08005848(param2_flag,0);\n  }\n  FUN_08005848(param1_start_flag,1);\n  return reversed_bits;\n}\n\n",
            "current_name": "reverse_bits_080015b2",
            "entrypoint": "0x080015b2",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080015b2": "reverse_bits_080015b2",
                "iVar1": "result",
                "param_1": "data",
                "param_1[1]": "param1_start_flag",
                "param_1[2]": "param2_flag",
                "uVar2": "bit_index",
                "uVar3": "reversed_bits"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080015f8": {
            "additional_data": {
                "0x10000": {
                    "1": "flag_mask"
                },
                "0x12": {
                    "1": "shift_amount"
                },
                "0x1fff": {
                    "1": "value_mask"
                },
                "0x2000": {
                    "1": "flag_mask2"
                },
                "0x3ff00000": {
                    "1": "param4_const1"
                },
                "0x40140000": {
                    "1": "param4_const3"
                },
                "0x40220000": {
                    "1": "param4_const2"
                },
                "0x40400000": {
                    "1": "param4_const4"
                },
                "0x40c3880000000000": {
                    "1": "result_value1"
                },
                "0x40c3888000000000": {
                    "1": "result_value2"
                },
                "0x40c3890000000000": {
                    "1": "result_value4"
                },
                "1": {
                    "1": "flag_value1"
                },
                "2": {
                    "1": "flag_value2"
                },
                "4": {
                    "1": "flag_value4"
                },
                "7": {
                    "1": "flag_mask3"
                },
                "FUN_08000194": {
                    "1": "process_value2"
                },
                "FUN_0800040c": {
                    "1": "compute_c"
                },
                "FUN_080004f8": {
                    "1": "compute_a"
                },
                "FUN_0800074c": {
                    "1": "compute_d"
                },
                "FUN_080015b2": {
                    "1": "read_binary_data"
                },
                "FUN_080015f8": {
                    "1": "get_modified_value",
                    "2": "calculate_result",
                    "4": "calculate_value",
                    "6": "process_data"
                },
                "param_1": {
                    "1": "input_val",
                    "2": "value1",
                    "3": "var1",
                    "4": "input_param",
                    "6": "param1"
                },
                "param_2": {
                    "1": "condition_param",
                    "3": "arg2",
                    "7": "param2"
                },
                "param_3": {
                    "1": "input2",
                    "10": "param3",
                    "2": "param_3",
                    "3": "var2",
                    "4": "arg3"
                },
                "param_4": {
                    "1": "param",
                    "10": "param4",
                    "2": "constant_param",
                    "3": "input4",
                    "4": "arg4"
                },
                "uVar1": {
                    "1": "flags",
                    "11": "result1",
                    "2": "flag_result",
                    "4": "status",
                    "9": "result"
                },
                "uVar2": {
                    "1": "value2",
                    "10": "result",
                    "11": "result2",
                    "2": "final_result",
                    "3": "modified_result"
                }
            },
            "called": [
                "FUN_080004f8",
                "FUN_08000194",
                "FUN_0800040c",
                "FUN_080015b2",
                "FUN_0800074c"
            ],
            "calling": [
                "FUN_08000cd0"
            ],
            "code": "\nundefined8 process_data_080015f8(undefined4 param1,int param2,undefined4 param3,undefined4 param4)\n\n{\n  uint result1;\n  undefined8 result2;\n  \n  result1 = FUN_080015b2();\n  if ((result1 & 0x10000) == 0) {\n    result1 = result1 >> 0x12;\n    result2 = FUN_0800040c(result1 & 0x1fff);\n    if ((result1 & 0x2000) != 0) {\n      result2 = FUN_0800040c(~result1 & 0x1fff);\n      result2 = FUN_08000194((int)result2,(int)((ulonglong)result2 >> 0x20),0,0x3ff00000,param4);\n      result2 = CONCAT44((int)((ulonglong)result2 >> 0x20) + -0x80000000,(int)result2);\n    }\n    result2 = FUN_080004f8((int)result2,(int)((ulonglong)result2 >> 0x20),0,0x3fd00000);\n    if (param2 == 1) {\n      result2 = FUN_080004f8((int)result2,(int)((ulonglong)result2 >> 0x20),0,0x40220000);\n      result2 = FUN_0800074c((int)result2,(int)((ulonglong)result2 >> 0x20),0,0x40140000);\n      result2 = FUN_08000194((int)result2,(int)((ulonglong)result2 >> 0x20),0,0x40400000);\n      return result2;\n    }\n  }\n  else {\n    result1 = result1 & 7;\n    if (result1 == 2) {\n      return 0x40c3888000000000;\n    }\n    if (result1 == 4) {\n      return 0x40c3890000000000;\n    }\n    if (result1 != 1) {\n      return 0;\n    }\n    result2 = 0x40c3880000000000;\n  }\n  return result2;\n}\n\n",
            "current_name": "process_data_080015f8",
            "entrypoint": "0x080015f8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080015f8": "process_data_080015f8",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "result1",
                "uVar2": "result2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080016b4": {
            "additional_data": {
                "DAT_080058e0": {
                    "1": "get_some_value"
                },
                "FUN_08000190": {
                    "1": "combine_values1"
                },
                "FUN_08000194": {
                    "1": "combine_values2"
                },
                "FUN_080004f8": {
                    "1": "combine_values3"
                },
                "FUN_080009dc": {
                    "1": "compare_values"
                },
                "FUN_08000a18": {
                    "1": "check_values"
                },
                "FUN_080016b4": {
                    "16": "process_data"
                },
                "F_080016b4": {
                    "1": "analyze_data"
                },
                "cVar1": {
                    "1": "is_flag_set",
                    "19": "result",
                    "2": "status",
                    "3": "flag"
                },
                "cVar11": {
                    "1": "char_var1",
                    "2": "result",
                    "7": "flag"
                },
                "iVar2": {
                    "1": "temp_int",
                    "2": "value",
                    "5": "temp_var1",
                    "7": "value1",
                    "9": "result"
                },
                "iVar3": {
                    "1": "comparison",
                    "2": "var2",
                    "4": "comparison_result",
                    "5": "value2"
                },
                "local_38": {
                    "1": "var13",
                    "2": "temp_var38",
                    "3": "temp15",
                    "8": "local_var1"
                },
                "param_1": {
                    "1": "parameter",
                    "2": "input_value",
                    "3": "input",
                    "4": "input_parameter",
                    "5": "input_param",
                    "8": "input_data"
                },
                "uStack_34": {
                    "1": "temp_var",
                    "2": "temp_var18",
                    "3": "temp16",
                    "7": "local_var2"
                },
                "uVar10": {
                    "1": "var16",
                    "10": "temp7",
                    "3": "temp_var10",
                    "4": "temp_var7"
                },
                "uVar11": {
                    "1": "temp_var8",
                    "3": "temp8"
                },
                "uVar12": {
                    "1": "result4",
                    "2": "temp_var9",
                    "3": "temp_var8",
                    "5": "temp8"
                },
                "uVar13": {
                    "1": "var2",
                    "2": "var11",
                    "3": "temp10",
                    "5": "temp9"
                },
                "uVar14": {
                    "1": "temp_var_10",
                    "3": "temp_var14",
                    "5": "temp10"
                },
                "uVar15": {
                    "1": "var13",
                    "3": "temp_var13",
                    "5": "temp11"
                },
                "uVar16": {
                    "1": "temp_var15",
                    "2": "var5",
                    "3": "temp13",
                    "5": "temp12"
                },
                "uVar17": {
                    "1": "function3_result",
                    "3": "temp14",
                    "5": "temp13"
                },
                "uVar18": {
                    "1": "var16",
                    "3": "temp_var14",
                    "5": "temp14"
                },
                "uVar4": {
                    "1": "temp_var_1",
                    "11": "temp1",
                    "4": "temp_var1"
                },
                "uVar5": {
                    "1": "value2",
                    "11": "temp2",
                    "2": "var1",
                    "3": "temp_var5",
                    "4": "temp_var4",
                    "5": "temp_var2"
                },
                "uVar6": {
                    "1": "temp_value3",
                    "10": "temp3",
                    "3": "temp_var6",
                    "4": "temp_var5"
                },
                "uVar7": {
                    "1": "value4",
                    "10": "temp4",
                    "3": "temp_var7",
                    "4": "temp_var4"
                },
                "uVar8": {
                    "1": "var7",
                    "10": "temp5",
                    "2": "var2",
                    "3": "temp_var8",
                    "4": "temp_var7"
                },
                "uVar9": {
                    "1": "var7",
                    "10": "temp6",
                    "3": "temp_var9",
                    "4": "temp_var6",
                    "5": "temp_var8"
                }
            },
            "called": [
                "FUN_08000a18",
                "FUN_08000194",
                "FUN_08000190",
                "FUN_080004f8",
                "FUN_080009dc",
                "FUN_080058e0"
            ],
            "calling": [
                "FUN_08000cd0"
            ],
            "code": "\nchar process_data_080016b4(int data)\n\n{\n  char result;\n  int result;\n  int value2;\n  undefined4 temp1;\n  undefined4 temp2;\n  undefined4 temp3;\n  undefined4 temp4;\n  undefined4 temp5;\n  undefined4 temp6;\n  undefined4 temp7;\n  char flag;\n  undefined4 temp8;\n  undefined4 temp9;\n  undefined4 temp10;\n  undefined8 temp11;\n  undefined8 temp12;\n  undefined8 temp13;\n  undefined8 temp14;\n  undefined4 local_var1;\n  undefined4 local_var2;\n  \n  flag = *(char *)(data + 0x70);\n  if (flag != '\\0') {\n    result = FUN_080058e0();\n    if ((uint)(result - *(int *)(data + 0x44)) < *(uint *)(data + 0x58)) {\n      flag = '\\0';\n    }\n    else {\n      temp2 = **(undefined4 **)(data + 0x38);\n      temp5 = (*(undefined4 **)(data + 0x38))[1];\n      temp11 = FUN_08000190(**(undefined4 **)(data + 0x40),(*(undefined4 **)(data + 0x40))[1])\n      ;\n      temp10 = (undefined4)((ulonglong)temp11 >> 0x20);\n      temp12 = FUN_08000190(temp2,temp5,*(undefined4 *)(data + 0x50),\n                            *(undefined4 *)(data + 0x54));\n      temp1 = (undefined4)((ulonglong)temp12 >> 0x20);\n      temp13 = FUN_080004f8((int)temp11,temp10,*(undefined4 *)(data + 0x20),\n                            *(undefined4 *)(data + 0x24));\n      temp13 = FUN_08000194((int)temp13,(int)((ulonglong)temp13 >> 0x20),\n                            *(undefined4 *)(data + 0x48),*(undefined4 *)(data + 0x4c));\n      *(undefined8 *)(data + 0x48) = temp13;\n      result = *(char *)(data + 0x71);\n      if (result == '\\0') {\n        temp14 = FUN_080004f8((int)temp12,temp1,*(undefined4 *)(data + 0x18),\n                              *(undefined4 *)(data + 0x1c));\n        temp13 = FUN_08000190((int)temp13,(int)((ulonglong)temp13 >> 0x20),(int)temp14,\n                              (int)((ulonglong)temp14 >> 0x20));\n        *(undefined8 *)(data + 0x48) = temp13;\n      }\n      temp3 = *(undefined4 *)(data + 0x48);\n      temp6 = *(undefined4 *)(data + 0x4c);\n      temp8 = *(undefined4 *)(undefined8 *)(data + 0x68);\n      temp9 = *(undefined4 *)(data + 0x6c);\n      temp13 = *(undefined8 *)(data + 0x68);\n      value2 = FUN_08000a18(temp3,temp6,temp8,temp9);\n      if (value2 == 0) {\n        temp4 = *(undefined4 *)(data + 0x60);\n        temp7 = *(undefined4 *)(data + 100);\n        value2 = FUN_080009dc(temp3,temp6);\n        if (value2 != 0) {\n          *(undefined4 *)(data + 0x48) = temp4;\n          *(undefined4 *)(data + 0x4c) = temp7;\n        }\n      }\n      else {\n        *(undefined4 *)(data + 0x48) = temp8;\n        *(undefined4 *)(data + 0x4c) = temp9;\n      }\n      if (result == '\\0') {\n        temp11 = 0;\n      }\n      else {\n        temp11 = FUN_080004f8((int)temp11,temp10,*(undefined4 *)(data + 0x18),\n                              *(undefined4 *)(data + 0x1c));\n      }\n      local_var2 = (undefined4)((ulonglong)temp11 >> 0x20);\n      local_var1 = (undefined4)temp11;\n      temp10 = *(undefined4 *)(data + 0x48);\n      temp3 = *(undefined4 *)(data + 0x4c);\n      temp11 = FUN_080004f8((int)temp12,temp1,*(undefined4 *)(data + 0x28),\n                            *(undefined4 *)(data + 0x2c));\n      temp11 = FUN_08000190(temp10,temp3,(int)temp11,(int)((ulonglong)temp11 >> 0x20));\n      temp11 = FUN_08000194(local_var1,local_var2,(int)temp11,(int)((ulonglong)temp11 >> 0x20));\n      temp10 = (undefined4)((ulonglong)temp11 >> 0x20);\n      value2 = FUN_080009dc(temp8,temp9,(int)temp11,temp10);\n      if (value2 == 0) {\n        temp13 = *(undefined8 *)(data + 0x60);\n        value2 = FUN_080009dc((int)temp11,temp10,*(undefined4 *)(undefined8 *)(data + 0x60),\n                             *(undefined4 *)(data + 100));\n        if (value2 == 0) {\n          temp13 = temp11;\n        }\n      }\n      **(undefined8 **)(data + 0x3c) = temp13;\n      *(undefined4 *)(data + 0x50) = temp2;\n      *(undefined4 *)(data + 0x54) = temp5;\n      *(int *)(data + 0x44) = result;\n    }\n  }\n  return flag;\n}\n\n",
            "current_name": "process_data_080016b4",
            "entrypoint": "0x080016b4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080016b4": "process_data_080016b4",
                "cVar1": "result",
                "cVar11": "flag",
                "iVar2": "result",
                "iVar3": "value2",
                "local_38": "local_var1",
                "param_1": "data",
                "uStack_34": "local_var2",
                "uVar10": "temp7",
                "uVar12": "temp8",
                "uVar13": "temp9",
                "uVar14": "temp10",
                "uVar15": "temp11",
                "uVar16": "temp12",
                "uVar17": "temp13",
                "uVar18": "temp14",
                "uVar4": "temp1",
                "uVar5": "temp2",
                "uVar6": "temp3",
                "uVar7": "temp4",
                "uVar8": "temp5",
                "uVar9": "temp6"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08001814": {
            "additional_data": {
                "FUN_08001814": {
                    "1": "update_parameters",
                    "14": "initialize_parameters",
                    "2": "initialize_data",
                    "8": "initialize_params"
                },
                "bVar4": {
                    "1": "is_flag1",
                    "2": "is_not_one",
                    "4": "is_flag_one",
                    "6": "is_flag_set",
                    "8": "is_flag_true"
                },
                "iVar1": {
                    "1": "return_value",
                    "2": "result1",
                    "28": "result"
                },
                "param_1": {
                    "1": "output_buffer",
                    "10": "parameters",
                    "2": "params",
                    "3": "params_array",
                    "6": "output_array"
                },
                "param_2": {
                    "1": "unused_param_1",
                    "14": "param2",
                    "2": "value1",
                    "6": "param_2"
                },
                "param_3": {
                    "1": "value2",
                    "11": "input1",
                    "2": "source1",
                    "3": "value1",
                    "6": "param3"
                },
                "param_4": {
                    "1": "value4",
                    "11": "input2",
                    "2": "input_2",
                    "3": "value2",
                    "6": "param4"
                },
                "param_5": {
                    "1": "param_5",
                    "11": "input3",
                    "2": "source3",
                    "3": "value3",
                    "6": "param5"
                },
                "param_6": {
                    "1": "input_param_4",
                    "11": "input4",
                    "2": "source4",
                    "3": "value4",
                    "6": "param6"
                },
                "param_7": {
                    "1": "value7",
                    "11": "input5",
                    "2": "source5",
                    "3": "value5",
                    "6": "param7"
                },
                "param_8": {
                    "1": "input_param_6",
                    "11": "input6",
                    "2": "input_6",
                    "3": "value6",
                    "6": "param8"
                },
                "param_9": {
                    "1": "condition",
                    "17": "flag",
                    "3": "status",
                    "6": "param9"
                },
                "uVar2": {
                    "1": "high_bits",
                    "2": "temp_var1",
                    "3": "upper_bits",
                    "5": "result2",
                    "6": "temp"
                },
                "uVar3": {
                    "1": "param9_as_bool",
                    "2": "temp_var2",
                    "3": "temp2",
                    "4": "flag",
                    "5": "flag_value"
                },
                "uVar5": {
                    "1": "return_val1",
                    "2": "return_value1",
                    "3": "temp_var1",
                    "4": "temp3"
                },
                "uVar6": {
                    "1": "temp_value2",
                    "2": "result4",
                    "3": "temp_var2",
                    "4": "temp4"
                },
                "uVar7": {
                    "1": "return_val3",
                    "2": "temp_result3",
                    "3": "func_result3",
                    "4": "temp5"
                }
            },
            "called": [
                "FUN_08000190",
                "FUN_080004f8",
                "FUN_080009dc",
                "FUN_0800040c",
                "FUN_0800074c"
            ],
            "calling": [
                "FUN_080018f8",
                "FUN_08001ab0"
            ],
            "code": "\nvoid initialize_parameters_08001814(undefined4 *parameters,undefined4 param2,undefined4 input1,undefined4 input2,\n                 undefined4 input3,undefined4 input4,undefined4 input5,undefined4 input6,\n                 int flag)\n\n{\n  int result;\n  undefined4 temp;\n  undefined flag_value;\n  bool is_flag_true;\n  undefined8 temp3;\n  undefined8 temp4;\n  undefined8 temp5;\n  \n  result = FUN_080009dc(input1,input2,0,0);\n  if (((result == 0) && (result = FUN_080009dc(input3,input4,0,0), result == 0)) &&\n     (result = FUN_080009dc(input5,input6,0,0), result == 0)) {\n    parameters[0xd] = flag;\n    is_flag_true = flag != 1;\n    if (is_flag_true) {\n      flag = 0;\n    }\n    flag_value = (undefined)flag;\n    if (!is_flag_true) {\n      flag_value = 1;\n    }\n    *(undefined *)((int)parameters + 0x71) = flag_value;\n    *parameters = input1;\n    parameters[1] = input2;\n    parameters[2] = input3;\n    parameters[3] = input4;\n    parameters[4] = input5;\n    parameters[5] = input6;\n    temp3 = FUN_0800040c(parameters[0x16]);\n    temp3 = FUN_0800074c((int)temp3,(int)((ulonglong)temp3 >> 0x20),0,0x408f4000);\n    temp = (undefined4)((ulonglong)temp3 >> 0x20);\n    parameters[6] = input1;\n    parameters[7] = input2;\n    temp4 = FUN_080004f8(input3,input4,(int)temp3,temp);\n    *(undefined8 *)(parameters + 8) = temp4;\n    temp3 = FUN_0800074c(input5,input6,(int)temp3,temp);\n    *(undefined8 *)(parameters + 10) = temp3;\n    if (parameters[0xc] == 1) {\n      temp5 = FUN_08000190(0,0,input1,input2);\n      *(undefined8 *)(parameters + 6) = temp5;\n      temp4 = FUN_08000190(0,0,(int)temp4,(int)((ulonglong)temp4 >> 0x20));\n      *(undefined8 *)(parameters + 8) = temp4;\n      temp3 = FUN_08000190(0,0,(int)temp3,(int)((ulonglong)temp3 >> 0x20));\n      *(undefined8 *)(parameters + 10) = temp3;\n    }\n  }\n  return;\n}\n\n",
            "current_name": "initialize_parameters_08001814",
            "entrypoint": "0x08001814",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08001814": "initialize_parameters_08001814",
                "bVar4": "is_flag_true",
                "iVar1": "result",
                "param_1": "parameters",
                "param_2": "param2",
                "param_3": "input1",
                "param_4": "input2",
                "param_5": "input3",
                "param_6": "input4",
                "param_7": "input5",
                "param_8": "input6",
                "param_9": "flag",
                "uVar2": "temp",
                "uVar3": "flag_value",
                "uVar5": "temp3",
                "uVar6": "temp4",
                "uVar7": "temp5"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080018f8": {
            "additional_data": {
                "FUN_08001814": {
                    "1": "call_sub_functions",
                    "2": "initialize_variables",
                    "8": "perform_initialization"
                },
                "FUN_080018f8": {
                    "1": "run_initialization",
                    "2": "initialize_components",
                    "3": "initialize_program",
                    "5": "initialize",
                    "6": "execute_main_function"
                },
                "param_1": {
                    "1": "array",
                    "2": "input_array"
                },
                "param_2": {
                    "1": "array_size",
                    "2": "param2"
                },
                "param_3": {
                    "1": "value2",
                    "2": "param3"
                },
                "param_4": {
                    "1": "value3",
                    "2": "param4"
                },
                "undefined4 *param_1": {
                    "1": "result_array"
                },
                "undefined4 param_2": {
                    "1": "arg2"
                },
                "undefined4 param_3": {
                    "1": "arg3"
                },
                "undefined4 param_4": {
                    "1": "arg4"
                }
            },
            "called": [
                "FUN_08001814"
            ],
            "calling": [
                "FUN_08000cd0"
            ],
            "code": "\nvoid execute_main_function_080018f8(void)\n\n{\n  FUN_08001814();\n  return;\n}\n\n",
            "current_name": "execute_main_function_080018f8",
            "entrypoint": "0x080018f8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080018f8": "execute_main_function_080018f8"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08001918": {
            "additional_data": {
                "(int)((ulonglong)uVar2 >> 0x20)": {
                    "1": "ptr_val1_upper_bits"
                },
                "(int)((ulonglong)uVar3 >> 0x20)": {
                    "1": "ptr_val2_upper_bits"
                },
                "(int)uVar2": {
                    "1": "ptr_val1"
                },
                "(int)uVar3": {
                    "1": "ptr_val2"
                },
                "FIND_AND_UPDATE_DATA": {
                    "1": "update_data"
                },
                "FUN_0800040c": {
                    "1": "retrieve_value"
                },
                "FUN_0800042c": {
                    "1": "allocate_memory"
                },
                "FUN_080004f8": {
                    "1": "update_data"
                },
                "FUN_0800074c": {
                    "1": "combine_values"
                },
                "FUN_08001918": {
                    "1": "execute_operation",
                    "15": "process_data",
                    "3": "update_data",
                    "4": "update_parameters"
                },
                "param_1": {
                    "1": "input_pointer",
                    "2": "input_data",
                    "3": "data_address",
                    "6": "data_ptr"
                },
                "param_2": {
                    "1": "arg2",
                    "2": "num_elements",
                    "3": "size",
                    "6": "data_size",
                    "8": "count"
                },
                "param_3": {
                    "1": "temp_var1",
                    "15": "param3",
                    "2": "param_3",
                    "5": "param1"
                },
                "param_4": {
                    "1": "var2",
                    "14": "param4",
                    "2": "arg2",
                    "5": "param2"
                },
                "uVar1": {
                    "1": "high32_result",
                    "25": "result1"
                },
                "uVar2": {
                    "1": "fun_result1",
                    "17": "result2",
                    "2": "func_result1"
                },
                "uVar3": {
                    "1": "updated_var3",
                    "17": "result3",
                    "2": "ptr2"
                }
            },
            "called": [
                "FUN_080004f8",
                "FUN_0800040c",
                "FUN_0800042c",
                "FUN_0800074c"
            ],
            "calling": [
                "FUN_08000cd0"
            ],
            "code": "\nvoid process_data_08001918(int data_ptr,int count,undefined4 param3,undefined4 param4)\n\n{\n  undefined4 result1;\n  undefined8 result2;\n  undefined8 result3;\n  \n  if (0 < count) {\n    result2 = FUN_0800042c(count);\n    result3 = FUN_0800040c(*(undefined4 *)(data_ptr + 0x58));\n    result2 = FUN_0800074c(ptr_val1,(int)((ulonglong)result2 >> 0x20),ptr_val2,\n                         (int)((ulonglong)result3 >> 0x20),param4);\n    result1 = (undefined4)((ulonglong)result2 >> 0x20);\n    result3 = FUN_080004f8(ptr_val1,result1,*(undefined4 *)(data_ptr + 0x20),\n                         *(undefined4 *)(data_ptr + 0x24));\n    *(undefined8 *)(data_ptr + 0x20) = result3;\n    result2 = FUN_0800074c(*(undefined4 *)(data_ptr + 0x28),*(undefined4 *)(data_ptr + 0x2c),ptr_val1,\n                         result1);\n    *(undefined8 *)(data_ptr + 0x28) = result2;\n    *(int *)(data_ptr + 0x58) = count;\n  }\n  return;\n}\n\n",
            "current_name": "process_data_08001918",
            "entrypoint": "0x08001918",
            "imported": false,
            "improved": true,
            "renaming": {
                "(int)uVar2": "ptr_val1",
                "(int)uVar3": "ptr_val2",
                "FUN_08001918": "process_data_08001918",
                "param_1": "data_ptr",
                "param_2": "count",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "result1",
                "uVar2": "result2",
                "uVar3": "result3"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08001960": {
            "additional_data": {
                "FUN_08001960": {
                    "1": "update_parameters",
                    "3": "process_data",
                    "4": "initialize_data",
                    "5": "update_data",
                    "6": "update_params"
                },
                "iVar1": {
                    "2": "return_value",
                    "29": "result"
                },
                "param_1": {
                    "1": "param_addr",
                    "2": "data_ptr",
                    "3": "base_address"
                },
                "param_2": {
                    "1": "param_2",
                    "15": "param2",
                    "2": "unused_param2",
                    "4": "unused_param"
                },
                "param_3": {
                    "1": "parameter_a",
                    "2": "input1",
                    "3": "param3",
                    "5": "new_value1",
                    "6": "value1"
                },
                "param_4": {
                    "1": "new_data2",
                    "2": "param_b",
                    "3": "param4",
                    "5": "new_value2",
                    "6": "value2"
                },
                "param_5": {
                    "1": "new_param5",
                    "2": "input3",
                    "3": "param5",
                    "4": "new_value3",
                    "6": "value3"
                },
                "param_6": {
                    "1": "property4",
                    "2": "input4",
                    "3": "param6",
                    "4": "new_value4",
                    "6": "value4"
                },
                "puVar2": {
                    "1": "ptr_array",
                    "12": "ptr",
                    "3": "pointer"
                },
                "uVar3": {
                    "1": "var_1",
                    "11": "value1",
                    "2": "ptr_value1",
                    "3": "temp_var1",
                    "5": "temp1"
                },
                "uVar4": {
                    "1": "val2",
                    "11": "value2",
                    "2": "ptr_value2",
                    "3": "var2",
                    "5": "temp2"
                },
                "uVar5": {
                    "1": "temp_value3",
                    "11": "value3",
                    "2": "ptr_value3",
                    "3": "temp_var3",
                    "5": "temp3"
                },
                "uVar6": {
                    "1": "value2",
                    "11": "value4",
                    "2": "ptr_value4",
                    "3": "temp_var4",
                    "5": "temp4"
                }
            },
            "called": [
                "FUN_08000a18",
                "FUN_08000a04",
                "FUN_080009dc"
            ],
            "calling": [
                "FUN_08000cd0",
                "FUN_08001ab0"
            ],
            "code": "\nvoid update_params_08001960(int data_struct,undefined4 param2,undefined4 value1,undefined4 value2,\n                 undefined4 value3,undefined4 value4)\n\n{\n  int result;\n  undefined4 *ptr;\n  undefined4 value1;\n  undefined4 value2;\n  undefined4 value3;\n  undefined4 value4;\n  \n  result = FUN_08000a04(value1,value2,value3,value4,value2);\n  if (result == 0) {\n    *(undefined4 *)(data_struct + 0x60) = value1;\n    *(undefined4 *)(data_struct + 100) = value2;\n    *(undefined4 *)(data_struct + 0x68) = value3;\n    *(undefined4 *)(data_struct + 0x6c) = value4;\n    if (*(char *)(data_struct + 0x70) != '\\0') {\n      ptr = *(undefined4 **)(data_struct + 0x3c);\n      value1 = *ptr;\n      value3 = ptr[1];\n      result = FUN_080009dc(value3,value4,value1,value3);\n      if (result == 0) {\n        result = FUN_08000a18(value1,value2,value1,value3);\n        if (result != 0) {\n          *ptr = value1;\n          ptr[1] = value2;\n        }\n      }\n      else {\n        *ptr = value3;\n        ptr[1] = value4;\n      }\n      value1 = *(undefined4 *)(data_struct + 0x48);\n      value3 = *(undefined4 *)(data_struct + 0x4c);\n      value2 = *(undefined4 *)(data_struct + 0x68);\n      value4 = *(undefined4 *)(data_struct + 0x6c);\n      result = FUN_08000a18(value1,value3,value2,value4);\n      if (result != 0) {\n        *(undefined4 *)(data_struct + 0x48) = value2;\n        *(undefined4 *)(data_struct + 0x4c) = value4;\n        return;\n      }\n      value2 = *(undefined4 *)(data_struct + 0x60);\n      value4 = *(undefined4 *)(data_struct + 100);\n      result = FUN_080009dc(value1,value3,value2,value4);\n      if (result != 0) {\n        *(undefined4 *)(data_struct + 0x48) = value2;\n        *(undefined4 *)(data_struct + 0x4c) = value4;\n      }\n    }\n  }\n  return;\n}\n\n",
            "current_name": "update_params_08001960",
            "entrypoint": "0x08001960",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08001960": "update_params_08001960",
                "iVar1": "result",
                "param_1": "data_struct",
                "param_2": "param2",
                "param_3": "value1",
                "param_4": "value2",
                "param_5": "value3",
                "param_6": "value4",
                "puVar2": "ptr",
                "uVar3": "value1",
                "uVar4": "value2",
                "uVar5": "value3",
                "uVar6": "value4"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080019f6": {
            "additional_data": {
                "FUN_080009dc": {
                    "1": "check_function_b"
                },
                "FUN_08000a18": {
                    "1": "process_data"
                },
                "FUN_080019f6": {
                    "1": "copy_data_from_binary",
                    "2": "extract_and_check_data",
                    "3": "update_variables",
                    "4": "update_parameters",
                    "6": "update_data"
                },
                "iVar1": {
                    "1": "is_valid",
                    "26": "result",
                    "3": "return_value"
                },
                "param_1": {
                    "1": "input_data",
                    "2": "data_address",
                    "3": "input_param",
                    "5": "data_pointer"
                },
                "uVar2": {
                    "1": "variable1",
                    "2": "var1",
                    "4": "value3",
                    "5": "temp_var1",
                    "6": "value1"
                },
                "uVar3": {
                    "1": "first_pointer_value",
                    "2": "var2",
                    "3": "ptr1",
                    "7": "value1"
                },
                "uVar4": {
                    "1": "second_data",
                    "2": "var3",
                    "3": "ptr2",
                    "7": "value2"
                },
                "uVar5": {
                    "1": "fourth_ptr",
                    "2": "temp_var2",
                    "3": "value2",
                    "7": "value4"
                }
            },
            "called": [
                "FUN_08000a18",
                "FUN_080009dc"
            ],
            "calling": [
                "FUN_08001a44"
            ],
            "code": "\nvoid update_values_080019f6(int base_address)\n\n{\n  int result;\n  undefined4 value1;\n  undefined4 value1;\n  undefined4 value2;\n  undefined4 value4;\n  \n  value1 = **(undefined4 **)(base_address + 0x3c);\n  value2 = (*(undefined4 **)(base_address + 0x3c))[1];\n  *(undefined4 *)(base_address + 0x48) = value1;\n  *(undefined4 *)(base_address + 0x4c) = value2;\n  value1 = (*(undefined4 **)(base_address + 0x38))[1];\n  *(undefined4 *)(base_address + 0x50) = **(undefined4 **)(base_address + 0x38);\n  *(undefined4 *)(base_address + 0x54) = value1;\n  value1 = *(undefined4 *)(base_address + 0x68);\n  value4 = *(undefined4 *)(base_address + 0x6c);\n  result = FUN_08000a18(value1,value2,value1,value4);\n  if (result == 0) {\n    value1 = *(undefined4 *)(base_address + 0x60);\n    value4 = *(undefined4 *)(base_address + 100);\n    result = FUN_080009dc(value1,value2,value1,value4);\n    if (result != 0) {\n      *(undefined4 *)(base_address + 0x48) = value1;\n      *(undefined4 *)(base_address + 0x4c) = value4;\n    }\n    return;\n  }\n  *(undefined4 *)(base_address + 0x48) = value1;\n  *(undefined4 *)(base_address + 0x4c) = value4;\n  return;\n}\n\n",
            "current_name": "update_values_080019f6",
            "entrypoint": "0x080019f6",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080019f6": "update_values_080019f6",
                "iVar1": "result",
                "param_1": "base_address",
                "uVar2": "value1",
                "uVar3": "value1",
                "uVar4": "value2",
                "uVar5": "value4"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08001a44": {
            "additional_data": {
                "FUN_080019f6": {
                    "1": "perform_operation"
                },
                "FUN_08001a44": {
                    "1": "update_flag_based_on_parameter",
                    "14": "update_flag",
                    "2": "update_parameter_value",
                    "3": "update_param"
                },
                "param_1": {
                    "1": "data_offset",
                    "2": "input_address",
                    "3": "address",
                    "5": "base_address",
                    "9": "object_address"
                },
                "param_2": {
                    "1": "is_one",
                    "3": "condition",
                    "4": "value",
                    "8": "flag",
                    "9": "flag_value"
                },
                "uVar1": {
                    "1": "is_flag_set",
                    "2": "updated_value",
                    "3": "flag_value",
                    "5": "flag",
                    "9": "new_flag_value"
                }
            },
            "called": [
                "FUN_080019f6"
            ],
            "calling": [
                "FUN_08000cd0"
            ],
            "code": "\nvoid update_flag_08001a44(int object_address,int flag_value)\n\n{\n  undefined new_flag_value;\n  \n  if (flag_value == 1) {\n    new_flag_value = 1;\n    if (*(char *)(object_address + 0x70) == '\\0') {\n      FUN_080019f6();\n    }\n  }\n  else {\n    new_flag_value = 0;\n  }\n  *(undefined *)(object_address + 0x70) = new_flag_value;\n  return;\n}\n\n",
            "current_name": "update_flag_08001a44",
            "entrypoint": "0x08001a44",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08001a44": "update_flag_08001a44",
                "param_1": "object_address",
                "param_2": "flag_value",
                "uVar1": "new_flag_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08001a66": {
            "additional_data": {
                "*(char *)(param_1 + 0x70)": {
                    "1": "should_update"
                },
                "*(int *)(param_1 + 0x30)": {
                    "1": "prev_param"
                },
                "*(undefined4 *)(param_1 + 0x18)": {
                    "1": "param_x"
                },
                "*(undefined4 *)(param_1 + 0x1c)": {
                    "1": "value2"
                },
                "*(undefined4 *)(param_1 + 0x20)": {
                    "1": "param_z"
                },
                "*(undefined4 *)(param_1 + 0x24)": {
                    "1": "value4"
                },
                "*(undefined4 *)(param_1 + 0x28)": {
                    "1": "value5"
                },
                "*(undefined4 *)(param_1 + 0x2c)": {
                    "1": "param_n"
                },
                "FUN_08001a66": {
                    "1": "update_function",
                    "12": "update_parameters",
                    "2": "update_param_and_call_functions",
                    "4": "update_data",
                    "9": "update_params"
                },
                "PTR_(param_1 + 0x18)": {
                    "1": "function1_pointer"
                },
                "PTR_(param_1 + 0x1c)": {
                    "1": "function1_argument_pointer"
                },
                "PTR_(param_1 + 0x20)": {
                    "1": "function2_pointer"
                },
                "PTR_(param_1 + 0x24)": {
                    "1": "function2_argument_pointer"
                },
                "PTR_(param_1 + 0x28)": {
                    "1": "function3_pointer"
                },
                "PTR_(param_1 + 0x2c)": {
                    "1": "function3_argument_pointer"
                },
                "PTR_(param_1 + 0x30)": {
                    "1": "stored_value_pointer"
                },
                "PTR_(param_1 + 0x70)": {
                    "1": "char_pointer"
                },
                "param_1": {
                    "1": "ptr",
                    "2": "param_ptr",
                    "3": "data",
                    "4": "data_struct",
                    "5": "object_address"
                },
                "param_2": {
                    "1": "new_data",
                    "11": "new_value",
                    "15": "new_param"
                },
                "param_3": {
                    "1": "prev_val1",
                    "3": "param_a",
                    "4": "old_value1",
                    "8": "param1"
                },
                "param_4": {
                    "1": "var2",
                    "3": "unused_param2",
                    "4": "old_value2",
                    "5": "param4",
                    "8": "param2"
                },
                "uVar1": {
                    "20": "result",
                    "6": "return_value"
                }
            },
            "called": [
                "FUN_08000190"
            ],
            "calling": [
                "FUN_08001ab0"
            ],
            "code": "\nvoid update_parameters_08001a66(int object_address,int new_param,undefined4 param1,undefined4 param2)\n\n{\n  undefined8 result;\n  \n  if ((*(char *)(object_address + 0x70) != '\\0') && (*(int *)(object_address + 0x30) != new_param)) {\n    result = FUN_08000190(0,0,*(undefined4 *)(object_address + 0x18),*(undefined4 *)(object_address + 0x1c),param2\n                        );\n    *(undefined8 *)(object_address + 0x18) = result;\n    result = FUN_08000190(0,0,*(undefined4 *)(object_address + 0x20),*(undefined4 *)(object_address + 0x24));\n    *(undefined8 *)(object_address + 0x20) = result;\n    result = FUN_08000190(0,0,*(undefined4 *)(object_address + 0x28),*(undefined4 *)(object_address + 0x2c));\n    *(undefined8 *)(object_address + 0x28) = result;\n  }\n  *(int *)(object_address + 0x30) = new_param;\n  return;\n}\n\n",
            "current_name": "update_parameters_08001a66",
            "entrypoint": "0x08001a66",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08001a66": "update_parameters_08001a66",
                "param_1": "object_address",
                "param_2": "new_param",
                "param_3": "param1",
                "param_4": "param2",
                "uVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08001ab0": {
            "additional_data": {
                "0x406fe000": {
                    "1": "sub_function_param"
                },
                "FUN_08001814": {
                    "1": "calculate_result",
                    "13": "process_data",
                    "2": "perform_operation"
                },
                "FUN_08001960": {
                    "1": "initialize_sub_function",
                    "10": "initialize_data",
                    "3": "initialize_memory"
                },
                "FUN_08001a66": {
                    "1": "reverse_something",
                    "2": "update_parameter",
                    "3": "perform_operation",
                    "5": "process_data"
                },
                "FUN_08001ab0": {
                    "1": "configure_device",
                    "11": "initialize_function",
                    "3": "initialize_params",
                    "5": "initialize_parameters",
                    "9": "initialize_data"
                },
                "FUN_080058e0": {
                    "1": "compute_result",
                    "2": "get_difference",
                    "4": "calculate_result",
                    "7": "calculate_value"
                },
                "extraout_r1": {
                    "1": "extra_return1",
                    "2": "extra_out",
                    "3": "extra_output",
                    "4": "extra_return",
                    "6": "extra_result",
                    "7": "result"
                },
                "iVar1": {
                    "1": "result_variable",
                    "16": "result",
                    "4": "difference",
                    "5": "return_value"
                },
                "param_1": {
                    "1": "input_param",
                    "2": "function_parameter",
                    "3": "function_pointer",
                    "4": "data_pointer",
                    "6": "data"
                },
                "param_10": {
                    "1": "function_parameter10",
                    "2": "value9",
                    "20": "param10",
                    "3": "value10"
                },
                "param_11": {
                    "1": "value9",
                    "2": "value10",
                    "20": "param11",
                    "3": "value11"
                },
                "param_12": {
                    "1": "function_parameter12",
                    "19": "param12",
                    "2": "value11",
                    "3": "value12"
                },
                "param_2": {
                    "1": "param_a",
                    "19": "param2",
                    "2": "param1",
                    "6": "value1"
                },
                "param_3": {
                    "1": "parameter3",
                    "19": "param3",
                    "2": "param2",
                    "6": "value2"
                },
                "param_4": {
                    "1": "param_c",
                    "19": "param4",
                    "2": "param3",
                    "6": "value3"
                },
                "param_5": {
                    "1": "function_parameter5",
                    "20": "param5",
                    "3": "value4"
                },
                "param_6": {
                    "1": "param_f",
                    "20": "param6",
                    "3": "value6"
                },
                "param_7": {
                    "1": "param_g",
                    "20": "param7",
                    "3": "value7"
                },
                "param_8": {
                    "1": "param_h",
                    "20": "param8",
                    "3": "value7"
                },
                "param_9": {
                    "1": "param8",
                    "2": "value9",
                    "20": "param9",
                    "3": "value8"
                }
            },
            "called": [
                "FUN_08001814",
                "FUN_08001960",
                "FUN_080058e0",
                "FUN_08001a66"
            ],
            "calling": [
                "FUN_08001b18"
            ],
            "code": "\nint initialize_function_08001ab0(int data,undefined4 param2,undefined4 param3,undefined4 param4,\n                undefined4 param5,undefined4 param6,undefined4 param7,undefined4 param8,\n                undefined4 param9,undefined4 param10,undefined4 param11,undefined4 param12)\n\n{\n  int result;\n  undefined4 result;\n  \n  *(undefined4 *)(data + 0x3c) = param3;\n  *(undefined4 *)(data + 0x38) = param2;\n  *(undefined4 *)(data + 0x40) = param4;\n  *(undefined *)(data + 0x70) = 0;\n  FUN_08001960(data,param2,0,0,0,0x406fe000);\n  *(undefined4 *)(data + 0x58) = 100;\n  FUN_08001a66(data,param12);\n  FUN_08001814(data,result,param5,param6,param7,param8,param9,param10,param11);\n  result = FUN_080058e0();\n  *(int *)(data + 0x44) = result - *(int *)(data + 0x58);\n  return data;\n}\n\n",
            "current_name": "initialize_function_08001ab0",
            "entrypoint": "0x08001ab0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08001ab0": "initialize_function_08001ab0",
                "extraout_r1": "result",
                "iVar1": "result",
                "param_1": "data",
                "param_10": "param10",
                "param_11": "param11",
                "param_12": "param12",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "param_6": "param6",
                "param_7": "param7",
                "param_8": "param8",
                "param_9": "param9"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08001b18": {
            "additional_data": {
                "FUN_08001ab0": {
                    "1": "perform_operation",
                    "2": "execute_function",
                    "5": "perform_initialization",
                    "8": "initialize"
                },
                "FUN_08001b18": {
                    "1": "execute_function_with_param",
                    "2": "initialize_param",
                    "4": "execute_and_return_param",
                    "5": "initialize",
                    "7": "execute_function"
                },
                "param_1": {
                    "1": "param",
                    "12": "input_param",
                    "2": "input_value",
                    "5": "input_parameter",
                    "8": "input"
                },
                "param_2": {
                    "1": "value_1",
                    "2": "arg1",
                    "4": "param2"
                },
                "param_3": {
                    "1": "value_2",
                    "2": "arg2",
                    "4": "param3"
                },
                "param_4": {
                    "1": "value_3",
                    "2": "arg3",
                    "4": "param4"
                }
            },
            "called": [
                "FUN_08001ab0"
            ],
            "calling": [
                "FUN_08000b08"
            ],
            "code": "\nundefined4 execute_function_08001b18(undefined4 input_param)\n\n{\n  FUN_08001ab0();\n  return input_param;\n}\n\n",
            "current_name": "execute_function_08001b18",
            "entrypoint": "0x08001b18",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08001b18": "execute_function_08001b18",
                "param_1": "input_param"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08001b48": {
            "additional_data": {
                "FUN_08001b48": {
                    "1": "initialize_components",
                    "15": "initialize_hardware",
                    "8": "initialize_board"
                },
                "FUN_08002494": {
                    "1": "set_peripheral_attributes",
                    "3": "initialize_timer"
                },
                "FUN_08002514": {
                    "1": "convert_microseconds_to_milliseconds",
                    "2": "delay_microseconds",
                    "3": "delay_milliseconds",
                    "7": "convert_to_seconds"
                },
                "FUN_08002560": {
                    "1": "initialize_sensor",
                    "6": "set_mode"
                },
                "FUN_08003688": {
                    "1": "check_version",
                    "2": "check_pin_modes"
                },
                "FUN_08003ad4": {
                    "1": "check_configuration2",
                    "2": "check_mask"
                },
                "FUN_08003c44": {
                    "1": "retrieve_value",
                    "2": "get_current_time",
                    "3": "get_system_time"
                },
                "FUN_08003c90": {
                    "1": "update_version"
                },
                "FUN_08004d40": {
                    "1": "print_error",
                    "2": "log_error_message",
                    "4": "log_error",
                    "6": "print_error_message"
                },
                "iVar1": {
                    "1": "status",
                    "20": "result"
                },
                "local_10": {
                    "1": "output_type",
                    "3": "value4"
                },
                "local_14": {
                    "1": "var_14",
                    "2": "value",
                    "3": "value3"
                },
                "local_1c": {
                    "1": "pin_mode_size",
                    "2": "flag2",
                    "3": "value2"
                },
                "local_20": {
                    "1": "uart_baud_rate",
                    "2": "pin_mode",
                    "3": "value1"
                },
                "local_30": {
                    "1": "array1",
                    "2": "gpio_pins",
                    "3": "pin_modes"
                },
                "local_30[0]": {
                    "1": "uart_baud_rate"
                },
                "local_34": {
                    "1": "pin_config10",
                    "2": "value5"
                },
                "local_38": {
                    "1": "output_state",
                    "2": "value4"
                },
                "local_3c": {
                    "1": "variable8",
                    "2": "value3"
                },
                "local_40": {
                    "1": "param8",
                    "2": "gpio_mode",
                    "3": "value2"
                },
                "local_44": {
                    "1": "param7",
                    "2": "value1",
                    "3": "gpio_pin"
                },
                "local_4c": {
                    "1": "option_value"
                },
                "local_54": {
                    "1": "other_settings",
                    "2": "timer_config"
                },
                "local_54[0]": {
                    "1": "spi_mode_config"
                },
                "local_c": {
                    "1": "pin_config5",
                    "2": "baud_rate",
                    "3": "value5",
                    "4": "address"
                },
                "param_1": {
                    "1": "parameter1",
                    "5": "param1"
                },
                "param_2": {
                    "1": "parameter2",
                    "5": "param2"
                },
                "param_3": {
                    "1": "parameter3",
                    "5": "param3"
                },
                "uVar2": {
                    "1": "processed_value",
                    "2": "time_delay",
                    "5": "time"
                }
            },
            "called": [
                "FUN_08002494",
                "FUN_08003c90",
                "FUN_08002560",
                "FUN_08002514",
                "FUN_08004d40",
                "FUN_08003c44",
                "FUN_08003ad4",
                "FUN_08003688"
            ],
            "calling": [
                "FUN_08004c52"
            ],
            "code": "\nvoid initialize_hardware_08001b48(void)\n\n{\n  int result;\n  uint time;\n  undefined4 spi_mode [2];\n  undefined4 spi_clock_phase;\n  undefined4 gpio_pin;\n  undefined4 value2;\n  undefined4 gpio_pull;\n  undefined4 value4;\n  undefined4 value5;\n  undefined4 pin_modes [4];\n  undefined4 flag;\n  undefined4 value2;\n  undefined4 value3;\n  undefined4 value4;\n  undefined4 address;\n  \n  uart_baud_rate = 2;\n  flag = 1;\n  value2 = 0x10;\n  value3 = 2;\n  value4 = 0;\n  address = 0x380000;\n  result = FUN_08003688(pin_modes);\n  if (result != 0) {\n    FUN_08004d40(\"/home/bo/.arduino15/packages/STM32/hardware/stm32/1.3.0/variants/NUCLEO_F103RB/variant.cpp\"\n                 ,0x88);\n  }\n  gpio_pin = 0xf;\n  value2 = 2;\n  gpio_pull = 0;\n  value4 = 0x400;\n  value5 = 0;\n  result = FUN_08003ad4(&gpio_pin);\n  if (result != 0) {\n    FUN_08004d40(\"/home/bo/.arduino15/packages/STM32/hardware/stm32/1.3.0/variants/NUCLEO_F103RB/variant.cpp\"\n                 ,0x95);\n  }\n  spi_mode_config = 2;\n  spi_clock_phase = 0x8000;\n  result = FUN_08003c90(spi_mode);\n  if (result != 0) {\n    FUN_08004d40(\"/home/bo/.arduino15/packages/STM32/hardware/stm32/1.3.0/variants/NUCLEO_F103RB/variant.cpp\"\n                 ,0x9c);\n  }\n  time = FUN_08003c44();\n  FUN_08002514(time / 1000);\n  FUN_08002560(4);\n  FUN_08002494(0xffffffff,0);\n  return;\n}\n\n",
            "current_name": "initialize_hardware_08001b48",
            "entrypoint": "0x08001b48",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08001b48": "initialize_hardware_08001b48",
                "iVar1": "result",
                "local_10": "value4",
                "local_14": "value3",
                "local_1c": "value2",
                "local_20": "flag",
                "local_30": "pin_modes",
                "local_30[0]": "uart_baud_rate",
                "local_34": "value5",
                "local_38": "value4",
                "local_3c": "gpio_pull",
                "local_40": "value2",
                "local_44": "gpio_pin",
                "local_4c": "spi_clock_phase",
                "local_54": "spi_mode",
                "local_54[0]": "spi_mode_config",
                "local_c": "address",
                "uVar2": "time"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08001c32": {
            "additional_data": {
                "<original_function_name>": {
                    "1": "initialize"
                },
                "<original_variable_name_1>": {
                    "1": "<new_variable_name_1>"
                },
                "<original_variable_name_2>": {
                    "1": "<new_variable_name_2>"
                },
                "<original_variable_name_n>": {
                    "1": "<new_variable_name_n>"
                },
                "FUN_08001c32": {
                    "1": "execute_cleanup_process",
                    "11": "initialize_application",
                    "2": "execute_main_function",
                    "4": "execute_initialization",
                    "5": "initialize_system"
                },
                "FUN_08004c52": {
                    "1": "execute_startup_task",
                    "3": "execute_sub_function",
                    "8": "perform_initialization"
                }
            },
            "called": [
                "FUN_08004c52"
            ],
            "calling": [
                "FUN_08005f5e"
            ],
            "code": "\nvoid initialize_application_08001c32(void)\n\n{\n  FUN_08004c52();\n  return;\n}\n\n",
            "current_name": "initialize_application_08001c32",
            "entrypoint": "0x08001c32",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08001c32": "initialize_application_08001c32"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08001c3a": {
            "called": [],
            "calling": [
                "FUN_08001c88"
            ],
            "code": "\nvoid FUNC_08001c3a(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_08001c3a",
            "entrypoint": "0x08001c3a",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_08001c3a": "FUNC_08001c3a"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_08001c3c": {
            "additional_data": {
                "0xf": {
                    "1": "limit",
                    "3": "max_value",
                    "9": "threshold"
                },
                "0xffffffff": {
                    "1": "constant3",
                    "2": "param1",
                    "5": "constant"
                },
                "1000": {
                    "1": "constant_1"
                },
                "DAT_20000078": {
                    "1": "divide_constant",
                    "3": "value2",
                    "4": "constant2"
                },
                "DAT_2000007c": {
                    "1": "data_value",
                    "2": "current_value",
                    "3": "stored_value"
                },
                "DAT_20000084": {
                    "1": "numerator",
                    "3": "value1",
                    "4": "constant1"
                },
                "FUN_08001c3c": {
                    "1": "update_parameter_value",
                    "2": "process_param",
                    "3": "validate_input",
                    "8": "initialize_data"
                },
                "FUN_08002494": {
                    "1": "execute_operation",
                    "2": "execute_function",
                    "5": "process_data",
                    "6": "perform_operation"
                },
                "FUN_08002514": {
                    "1": "convert_to_milliseconds",
                    "2": "calculate_threshold",
                    "3": "calculate_ratio",
                    "9": "calculate_value"
                },
                "iVar1": {
                    "1": "calculation_result",
                    "29": "result"
                },
                "param_1": {
                    "1": "param",
                    "13": "input_value",
                    "4": "input_param"
                },
                "param_2": {
                    "1": "value2",
                    "2": "value1",
                    "3": "param2"
                },
                "param_3": {
                    "1": "value_2",
                    "2": "value2",
                    "3": "param3"
                }
            },
            "called": [
                "FUN_08002494",
                "FUN_08002514"
            ],
            "calling": [
                "FUN_08003afa",
                "FUN_08001c88"
            ],
            "code": "\nundefined4 initialize_data_08001c3c(uint input_value)\n\n{\n  int result;\n  \n  result = FUN_08002514(DAT_20000084 / (1000 / DAT_20000078));\n  if (result != 0) {\n    return 1;\n  }\n  if (0xf < input_value) {\n    return 1;\n  }\n  FUN_08002494(0xffffffff,input_value,0);\n  DAT_2000007c = input_value;\n  return 0;\n}\n\n",
            "current_name": "initialize_data_08001c3c",
            "entrypoint": "0x08001c3c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08001c3c": "initialize_data_08001c3c",
                "iVar1": "result",
                "param_1": "input_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08001c88": {
            "additional_data": {
                "DAT_40022000": {
                    "1": "memory_address"
                },
                "FUNC_08001c3a": {
                    "1": "additional_operation",
                    "2": "perform_initialization",
                    "3": "execute_function",
                    "7": "perform_action"
                },
                "FUN_08001c3a": {
                    "1": "execute_function"
                },
                "FUN_08001c3c": {
                    "1": "apply_param_to_function",
                    "17": "set_flag",
                    "2": "set_configuration"
                },
                "FUN_08001c88": {
                    "1": "update_data",
                    "2": "set_bit_and_call_functions",
                    "3": "set_flags_and_call_functions",
                    "4": "initialize_flags",
                    "7": "set_flag_and_call_functions"
                },
                "FUN_08002470": {
                    "1": "set_current_mode",
                    "2": "set_mode",
                    "3": "execute_operation",
                    "5": "perform_operation",
                    "6": "perform_action"
                },
                "_DAT_40022000": {
                    "1": "data_flags"
                },
                "param_1": {
                    "1": "param",
                    "2": "value",
                    "5": "flag_value",
                    "8": "flag"
                },
                "return 0": {
                    "1": "success"
                }
            },
            "called": [
                "FUN_08001c3c",
                "FUN_08001c3a",
                "FUN_08002470"
            ],
            "calling": [
                "FUN_08004c52"
            ],
            "code": "\n\n\nundefined4 set_flag_and_call_functions_08001c88(void)\n\n{\n  _DAT_40022000 = _DAT_40022000 | 0x10;\n  FUN_08002470(3);\n  FUN_08001c3c(0xf);\n  FUNC_08001c3a();\n  return 0;\n}\n\n",
            "current_name": "set_flag_and_call_functions_08001c88",
            "entrypoint": "0x08001c88",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08001c88": "set_flag_and_call_functions_08001c88"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08001cac": {
            "additional_data": {
                "DAT_20000078": {
                    "1": "input_data",
                    "10": "input",
                    "2": "original_value",
                    "4": "input_value",
                    "5": "value_to_add"
                },
                "DAT_200006a0": {
                    "1": "updated_value",
                    "14": "result",
                    "2": "updated_sum",
                    "7": "sum"
                },
                "FUN_08001cac": {
                    "1": "addition_calculation",
                    "2": "add_values",
                    "4": "update_sum",
                    "5": "addition_operation"
                }
            },
            "called": [],
            "calling": [
                "FUN_08004b9e"
            ],
            "code": "\nvoid addition_operation_08001cac(void)\n\n{\n  DAT_200006a0 = (uint)DAT_20000078 + DAT_200006a0;\n  return;\n}\n\n",
            "current_name": "addition_operation_08001cac",
            "entrypoint": "0x08001cac",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08001cac": "addition_operation_08001cac"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08001cc4": {
            "additional_data": {
                "DAT_200006a0": {
                    "1": "data_from_memory",
                    "13": "data",
                    "2": "global_data",
                    "3": "global_variable"
                },
                "FUN_08001cc4": {
                    "1": "get_data_pointer",
                    "11": "get_data",
                    "2": "get_return_value",
                    "3": "get_global_variable",
                    "7": "get_data_value"
                }
            },
            "called": [],
            "calling": [
                "FUN_08004478",
                "FUN_08002384",
                "FUN_080053d4",
                "FUN_08003afa",
                "FUN_08003c90",
                "FUN_08001cd0",
                "FUN_08001f84",
                "FUN_080043b4",
                "FUN_080020f0",
                "FUN_08004b94",
                "FUN_08003688"
            ],
            "code": "\nundefined4 get_data_08001cc4(void)\n\n{\n  return DAT_200006a0;\n}\n\n",
            "current_name": "get_data_08001cc4",
            "entrypoint": "0x08001cc4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08001cc4": "get_data_08001cc4"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08001cd0": {
            "additional_data": {
                "FUN_08001cc4": {
                    "1": "get_time_stamp"
                },
                "FUN_08001cd0": {
                    "1": "check_and_modify_bits",
                    "2": "calculate_result",
                    "3": "check_and_process_data",
                    "4": "process_data"
                },
                "iVar1": {
                    "1": "start",
                    "2": "start_time",
                    "21": "initial_value",
                    "4": "initial_time"
                },
                "iVar3": {
                    "1": "local_var3",
                    "3": "interval",
                    "4": "current_time",
                    "5": "difference",
                    "6": "temp_value"
                },
                "local_1c": {
                    "1": "local_var_outer_loop",
                    "2": "count",
                    "27": "counter"
                },
                "param_1": {
                    "1": "input_ptr",
                    "2": "input_data",
                    "3": "input_array",
                    "4": "param_array",
                    "6": "data"
                },
                "param_2": {
                    "1": "max_iterations",
                    "2": "length",
                    "4": "size",
                    "6": "threshold",
                    "9": "limit"
                },
                "puVar5": {
                    "1": "flag_values",
                    "2": "flags",
                    "3": "data_array"
                },
                "uVar2": {
                    "1": "result1",
                    "10": "random_value",
                    "13": "factor",
                    "3": "multiplier"
                },
                "uVar4": {
                    "1": "return_val",
                    "23": "result",
                    "6": "return_value"
                },
                "uVar6": {
                    "1": "multiplier",
                    "2": "calculated_value",
                    "3": "computed_value",
                    "4": "calculation",
                    "9": "calculation_result"
                }
            },
            "called": [
                "FUN_08003da4",
                "FUN_08001cc4"
            ],
            "calling": [
                "FUN_08004a4c"
            ],
            "code": "\nundefined4 process_data_08001cd0(uint **data,uint limit)\n\n{\n  int initial_value;\n  uint factor;\n  int temp_value;\n  undefined4 result;\n  uint *ptr_data;\n  uint calculation_result;\n  uint counter;\n  \n  counter = 0;\n  initial_value = FUN_08001cc4();\n  calculation_result = DAT_20000084;\n  ptr_data = *data;\n  if ((ptr_data[2] & 0x100) == 0) {\n    if (((ptr_data[1] & 0x100) == 0) && ((ptr_data[0xb] & 0xf00000) == 0)) {\n      do {\n        if ((**data & 2) != 0) goto LAB_08001de2;\n      } while ((limit == 0xffffffff) ||\n              ((limit != 0 && (temp_value = FUN_08001cc4(), (uint)(temp_value - initial_value) <= limit))));\n      data[10] = (uint *)((uint)data[10] | 4);\n      *(undefined *)(data + 9) = 0;\n      result = 3;\n    }\n    else {\n      factor = FUN_08003da4(2);\n      ptr_data = *data;\n      if (((ptr_data[4] & 0x24924924) == 0) && ((ptr_data[3] & 0x924924) == 0)) {\n        if ((ptr_data[4] & 0x12492492) == 0) {\n          if ((ptr_data[3] & 0x492492) == 0) {\n            temp_value = 0x14;\n          }\n          else {\n            temp_value = 0x29;\n          }\n        }\n        else {\n          temp_value = 0x29;\n        }\n      }\n      else if (((ptr_data[4] & 0x12492492) == 0) && ((ptr_data[3] & 0x492492) == 0)) {\n        temp_value = 0x54;\n      }\n      else if ((ptr_data[4] & 0x249249) == 0) {\n        if ((ptr_data[3] & 0x249249) == 0) {\n          temp_value = 0x54;\n        }\n        else {\n          temp_value = 0xfc;\n        }\n      }\n      else {\n        temp_value = 0xfc;\n      }\n      calculation_result = (calculation_result / factor) * temp_value;\n      for (; counter <= calculation_result && calculation_result - counter != 0; counter = counter + 1) {\n        if ((limit != 0xffffffff) &&\n           ((limit == 0 || (temp_value = FUN_08001cc4(), limit < (uint)(temp_value - initial_value))))) {\n          data[10] = (uint *)((uint)data[10] | 4);\n          *(undefined *)(data + 9) = 0;\n          return 3;\n        }\n      }\nLAB_08001de2:\n      **data = 0xffffffed;\n      data[10] = (uint *)((uint)data[10] | 0x200);\n      if (((*data)[2] & 0xe0000) == 0xe0000) {\n        if (data[3] == (uint *)0x0) {\n          data[10] = (uint *)((uint)data[10] & 0xfffffeff);\n          if (((uint)data[10] & 0x1000) == 0) {\n            data[10] = (uint *)((uint)data[10] | 1);\n            result = 0;\n          }\n          else {\n            result = 0;\n          }\n        }\n        else {\n          result = 0;\n        }\n      }\n      else {\n        result = 0;\n      }\n    }\n  }\n  else {\n    data[10] = (uint *)((uint)data[10] | 0x20);\n    *(undefined *)(data + 9) = 0;\n    result = 1;\n  }\n  return result;\n}\n\n",
            "current_name": "process_data_08001cd0",
            "entrypoint": "0x08001cd0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08001cd0": "process_data_08001cd0",
                "iVar1": "initial_value",
                "iVar3": "temp_value",
                "local_1c": "counter",
                "param_1": "data",
                "param_2": "limit",
                "puVar5": "ptr_data",
                "uVar2": "factor",
                "uVar4": "result",
                "uVar6": "calculation_result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08001e40": {
            "additional_data": {
                "*(undefined4 *)": {
                    "1": "result"
                },
                "*(undefined4 *)(*param_1 + 0x4c)": {
                    "1": "value_at_offset4_c",
                    "2": "value_at_offset"
                },
                "*param_1": {
                    "1": "memory_address",
                    "2": "ptr_value",
                    "4": "offset_value"
                },
                "0x4c": {
                    "2": "offset"
                },
                "<original_variable_name_1>": {
                    "1": "<new_variable_name_1>"
                },
                "FUN_08001e40": {
                    "1": "extract_value_from_offset",
                    "13": "get_offset_value",
                    "2": "get_pointer_value",
                    "3": "get_offset",
                    "4": "get_value_from_offset"
                },
                "param_1": {
                    "1": "value_pointer",
                    "2": "memory_address",
                    "3": "input_pointer",
                    "4": "offset_ptr",
                    "9": "offset_pointer"
                },
                "x_newVariable": {
                    "1": "new_variable"
                }
            },
            "called": [],
            "calling": [
                "FUN_08004a4c"
            ],
            "code": "\nundefined4 get_offset_value_08001e40(int *offset_pointer)\n\n{\n  return *(undefined4 *)(*offset_pointer + 0x4c);\n}\n\n",
            "current_name": "get_offset_value_08001e40",
            "entrypoint": "0x08001e40",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08001e40": "get_offset_value_08001e40",
                "param_1": "offset_pointer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08001e48": {
            "additional_data": {
                "*(char *)(param_1 + 9)": {
                    "1": "config->flag"
                },
                "*(undefined *)(param_1 + 9)": {
                    "1": "config->flag"
                },
                "*param_1": {
                    "1": "config_value"
                },
                "*param_2": {
                    "1": "data_value"
                },
                "DAT_20000084": {
                    "1": "time_constant"
                },
                "FUN_08001e48": {
                    "1": "update_register_values",
                    "2": "update_values",
                    "3": "update_config",
                    "6": "update_settings",
                    "8": "update_configuration"
                },
                "local_c": {
                    "1": "delay",
                    "17": "counter",
                    "4": "loop_counter",
                    "8": "count"
                },
                "param_1": {
                    "1": "operation_params",
                    "2": "config_ptr",
                    "7": "settings",
                    "8": "config"
                },
                "param_2": {
                    "1": "input_ptr",
                    "16": "values",
                    "5": "data"
                },
                "uRam40012408": {
                    "1": "status_register"
                },
                "uVar1": {
                    "1": "return_val",
                    "16": "result",
                    "9": "return_value"
                },
                "uVar2": {
                    "1": "multiplier",
                    "13": "index",
                    "3": "value",
                    "6": "temp_value"
                }
            },
            "called": [],
            "calling": [
                "FUN_08004a4c"
            ],
            "code": "\nundefined4 update_configuration_08001e48(int *config,uint *values)\n\n{\n  undefined4 result;\n  uint index;\n  int counter;\n  \n  if (*(char *)(config + 9) == '\\x01') {\n    result = 2;\n  }\n  else {\n    *(undefined *)(config + 9) = 1;\n    index = values[1];\n    if (index < 7) {\n      index = index * 5 - 5;\n      *(uint *)(*config + 0x34) =\n           *values << (index & 0xff) | *(uint *)(*config + 0x34) & ~(0x1f << (index & 0xff));\n    }\n    else if (index < 0xd) {\n      index = index * 5 - 0x23;\n      *(uint *)(*config + 0x30) =\n           *values << (index & 0xff) | *(uint *)(*config + 0x30) & ~(0x1f << (index & 0xff));\n    }\n    else {\n      index = index * 5 - 0x41;\n      *(uint *)(*config + 0x2c) =\n           *values << (index & 0xff) | *(uint *)(*config + 0x2c) & ~(0x1f << (index & 0xff));\n    }\n    index = *values;\n    if (index < 10) {\n      *(uint *)(*config + 0x10) =\n           values[2] << (index * 3 & 0xff) |\n           *(uint *)(*config + 0x10) & ~(7 << (index * 3 & 0xff));\n    }\n    else {\n      index = index * 3 - 0x1e;\n      *(uint *)(*config + 0xc) =\n           values[2] << (index & 0xff) | *(uint *)(*config + 0xc) & ~(7 << (index & 0xff));\n    }\n    if (*values - 0x10 < 2) {\n      if (*config == 0x40012400) {\n        if ((flag & 0x800000) == 0) {\n          flag = flag | 0x800000;\n          if (*values == 0x10) {\n            for (counter = (DAT_20000084 / 1000000) * 10; counter != 0; counter = counter + -1) {\n            }\n            result = 0;\n          }\n          else {\n            result = 0;\n          }\n        }\n        else {\n          result = 0;\n        }\n      }\n      else {\n        config[10] = config[10] | 0x20;\n        result = 1;\n      }\n    }\n    else {\n      result = 0;\n    }\n    *(undefined *)(config + 9) = 0;\n  }\n  return result;\n}\n\n",
            "current_name": "update_configuration_08001e48",
            "entrypoint": "0x08001e48",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08001e48": "update_configuration_08001e48",
                "local_c": "counter",
                "param_1": "config",
                "param_2": "values",
                "uRam40012408": "flag",
                "uVar1": "result",
                "uVar2": "index"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08001f80": {
            "additional_data": {
                "*(undefined4 *)(param_1 + 0x28)": {
                    "2": "value",
                    "3": "offset_value",
                    "4": "return_value"
                },
                "*PTR_DAT_08005e64": {
                    "1": "offset_value"
                },
                "+ 0x28": {
                    "1": "address_offset"
                },
                "DAT_": {
                    "1": "<unchanged>"
                },
                "FUN_08001f80": {
                    "1": "get_pointer_at_index",
                    "2": "get_value_from_address",
                    "3": "get_value_from_offset",
                    "4": "get_return_value",
                    "5": "get_pointer_value",
                    "9": "get_offset_value"
                },
                "PTR_": {
                    "1": "<unchanged>"
                },
                "param_1": {
                    "1": "input_pointer",
                    "12": "base_address",
                    "2": "memory_address",
                    "3": "pointer_address",
                    "4": "address",
                    "5": "offset"
                },
                "var_1": {
                    "1": "pointer"
                }
            },
            "called": [],
            "calling": [
                "FUN_08004a4c"
            ],
            "code": "\nundefined4 get_offset_value_08001f80(int base_address)\n\n{\n  return *(undefined4 *)(base_address + 0x28);\n}\n\n",
            "current_name": "get_offset_value_08001f80",
            "entrypoint": "0x08001f80",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08001f80": "get_offset_value_08001f80",
                "param_1": "base_address"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08001f84": {
            "additional_data": {
                "DAT_20000084": {
                    "1": "constant_value"
                },
                "FUN_08001cc4": {
                    "1": "perform_reverse_operation",
                    "2": "perform_operation"
                },
                "FUN_08001f84": {
                    "1": "update_flag_and_status",
                    "2": "initialize_device",
                    "3": "execute_task",
                    "4": "process_data"
                },
                "iVar1": {
                    "1": "result_var",
                    "20": "result",
                    "5": "temp_var1"
                },
                "iVar3": {
                    "1": "current_value",
                    "2": "ptr",
                    "3": "ptr_value",
                    "4": "data_value"
                },
                "local_14": {
                    "1": "delay_count",
                    "11": "counter",
                    "2": "delay",
                    "3": "iteration_count",
                    "6": "loop_counter"
                },
                "param_1": {
                    "1": "resource_list",
                    "2": "input_data",
                    "3": "data",
                    "8": "input_array"
                },
                "param_2": {
                    "1": "size",
                    "2": "data_size",
                    "3": "value",
                    "4": "param2",
                    "5": "input_value",
                    "7": "param"
                },
                "uVar2": {
                    "1": "status",
                    "15": "return_value"
                }
            },
            "called": [
                "FUN_08001cc4"
            ],
            "calling": [
                "FUN_08002384",
                "FUN_08002004"
            ],
            "code": "\nundefined4 process_data_08001f84(int *input_array,undefined4 param)\n\n{\n  int result;\n  undefined4 return_value;\n  int data_value;\n  uint counter;\n  \n  data_value = *input_array;\n  if ((*(uint *)(data_value + 8) & 1) == 0) {\n    *(uint *)(data_value + 8) = *(uint *)(data_value + 8) | 1;\n    for (counter = DAT_20000084 / 1000000; counter != 0; counter = counter - 1) {\n    }\n    data_value = FUN_08001cc4(input_array,param,DAT_20000084 * 0x431bde83);\n    do {\n      if ((*(uint *)(*input_array + 8) & 1) != 0) {\n        return 0;\n      }\n      result = FUN_08001cc4();\n    } while ((uint)(result - data_value) < 3);\n    input_array[10] = input_array[10] | 0x10;\n    input_array[0xb] = input_array[0xb] | 1;\n    *(undefined *)(input_array + 9) = 0;\n    return_value = 1;\n  }\n  else {\n    return_value = 0;\n  }\n  return return_value;\n}\n\n",
            "current_name": "process_data_08001f84",
            "entrypoint": "0x08001f84",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08001f84": "process_data_08001f84",
                "iVar1": "result",
                "iVar3": "data_value",
                "local_14": "counter",
                "param_1": "input_array",
                "param_2": "param",
                "uVar2": "return_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002004": {
            "additional_data": {
                "(iVar3 != 0x40012800 || ((_DAT_40012404 & 0xf0000) == 0))": {
                    "1": "condition_d"
                },
                "(param_1[10] & 0x1000U) == 0": {
                    "1": "condition_c"
                },
                "(puVar2 == (undefined4 *)0x40012800) && ((_DAT_40012404 & 0xf0000) != 0)": {
                    "1": "condition_a"
                },
                "(puVar2[1] & 0x400) != 0": {
                    "1": "condition_b"
                },
                "*(char *)(param_1 + 9)": {
                    "1": "check_flag",
                    "2": "flag"
                },
                "*(uint *)(iVar3 + 8)": {
                    "1": "value2"
                },
                "*(uint *)(iVar3 + 8) & 0xe0000": {
                    "1": "value_e"
                },
                "*(undefined *)(param_1 + 9)": {
                    "1": "update_flag",
                    "2": "flag_value"
                },
                "*param_1": {
                    "1": "value_pointer"
                },
                "0x01": {
                    "1": "flag"
                },
                "0x100": {
                    "1": "flag2"
                },
                "0x1000": {
                    "1": "flag6"
                },
                "0x100000": {
                    "1": "flag10"
                },
                "0x1000U": {
                    "1": "flag7"
                },
                "0x400": {
                    "1": "flag4"
                },
                "0x40012800": {
                    "1": "constant_value"
                },
                "0x500000": {
                    "1": "flag9"
                },
                "0xb": {
                    "1": "num_var"
                },
                "0xe0000": {
                    "1": "flag8"
                },
                "0xffefffff": {
                    "1": "flag5"
                },
                "0xfffffcfeU": {
                    "1": "flag_mask"
                },
                "0xfffffff9": {
                    "1": "num_var_mask"
                },
                "0xfffffffd": {
                    "1": "constant3_value"
                },
                "FUM_08001f84": {
                    "1": "get_some_value"
                },
                "FUN_08001f84": {
                    "1": "perform_operation",
                    "2": "initialize_config"
                },
                "FUN_08001f84()": {
                    "1": "fetch_value"
                },
                "FUN_08002004": {
                    "1": "update_settings",
                    "2": "initialize_parameter",
                    "3": "update_configuration",
                    "4": "initialize_parameters"
                },
                "F_UNPACK_BINARY": {
                    "1": "unpack_binary"
                },
                "_DAT_40012404": {
                    "1": "value_d",
                    "2": "data_value"
                },
                "_DAT_40012404 & 0xf0000": {
                    "1": "additional_data_check"
                },
                "iVar1": {
                    "1": "error_code",
                    "22": "result",
                    "7": "return_value"
                },
                "iVar3": {
                    "1": "other_variable",
                    "11": "value",
                    "2": "temp",
                    "4": "i_var"
                },
                "param_1": {
                    "1": "input_data",
                    "2": "flags",
                    "3": "parameter",
                    "4": "config",
                    "6": "parameters"
                },
                "param_1[0xb]": {
                    "1": "value_b"
                },
                "param_1[10]": {
                    "1": "param_array[10]"
                },
                "param_2": {
                    "2": "param"
                },
                "puVar2": {
                    "1": "ptr_var",
                    "10": "ptr",
                    "2": "config_ptr",
                    "7": "pointer"
                }
            },
            "called": [
                "FUN_08001f84"
            ],
            "calling": [
                "FUN_08004a4c"
            ],
            "code": "\n\n\nint initialize_parameters_08002004(int *parameters)\n\n{\n  int result;\n  undefined4 *ptr;\n  int value;\n  \n  if (*(char *)(parameters + 9) != '\\x01') {\n    *(undefined *)(parameters + 9) = 1;\n    result = FUN_08001f84();\n    if (result == 0) {\n      config_flag = config_flag & flag_mask | 0x100;\n      ptr = (undefined4 *)*parameters;\n      if ((ptr == (undefined4 *)0x40012800) && ((_DAT_40012404 & 0xf0000) != 0)) {\n        config_flag = config_flag | 0x100000;\n        if ((_DAT_40012404 & 0x400) != 0) {\n          config_flag = config_flag & 0xffffcfffU | 0x1000;\n        }\n      }\n      else {\n        config_flag = config_flag & 0xffefffff;\n        if ((ptr[1] & 0x400) != 0) {\n          config_flag = config_flag & 0xffffcfffU | 0x1000;\n        }\n      }\n      if ((config_flag & flag7) == 0) {\n        flag_value = 0;\n      }\n      else {\n        flag_value = flag_value & 0xfffffff9;\n      }\n      *(undefined *)(parameters + 9) = 0;\n      *ptr = 0xfffffffd;\n      value = *parameters;\n      if (((*(uint *)(value + 8) & 0xe0000) == 0xe0000) &&\n         ((value != 0x40012800 || ((_DAT_40012404 & 0xf0000) == 0)))) {\n        *(uint *)(value + 8) = *(uint *)(value + 8) | 0x500000;\n      }\n      else {\n        *(uint *)(value + 8) = *(uint *)(value + 8) | 0x100000;\n      }\n    }\n    else {\n      *(undefined *)(parameters + 9) = 0;\n    }\n    return result;\n  }\n  return 2;\n}\n\n",
            "current_name": "initialize_parameters_08002004",
            "entrypoint": "0x08002004",
            "imported": false,
            "improved": true,
            "renaming": {
                "0x1000U": "flag7",
                "0xfffffcfeU": "flag_mask",
                "FUN_08002004": "initialize_parameters_08002004",
                "iVar1": "result",
                "iVar3": "value",
                "param_1": "parameters",
                "param_1[0xb]": "flag_value",
                "param_1[10]": "config_flag",
                "puVar2": "ptr"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080020f0": {
            "additional_data": {
                "FUN_08001cc4": {
                    "1": "get_tick_count",
                    "2": "get_value",
                    "3": "get_random_value"
                },
                "FUN_080020f0": {
                    "1": "update_flags_and_values",
                    "10": "update_flags",
                    "2": "check_and_set_flags",
                    "3": "check_and_update_flags"
                },
                "iVar1": {
                    "1": "first_call_result",
                    "2": "temp1",
                    "4": "temp_var1",
                    "6": "result1"
                },
                "iVar2": {
                    "1": "value2",
                    "2": "current_value",
                    "3": "element",
                    "4": "temp_var2",
                    "6": "value"
                },
                "param_1": {
                    "1": "param",
                    "11": "data",
                    "2": "data_ptr",
                    "6": "array",
                    "7": "input_array"
                },
                "param_1[0xb]": {
                    "1": "data_ptr[0xb]"
                },
                "param_1[10]": {
                    "1": "data_ptr[10]"
                }
            },
            "called": [
                "FUN_08001cc4"
            ],
            "calling": [
                "FUN_0800213c",
                "FUN_08002384",
                "FUN_08002348",
                "FUN_0800224c"
            ],
            "code": "\nundefined4 update_flags_080020f0(int *data)\n\n{\n  int result1;\n  int value;\n  \n  value = *data;\n  if ((*(uint *)(value + 8) & 1) == 0) {\n    return 0;\n  }\n  *(uint *)(value + 8) = *(uint *)(value + 8) & 0xfffffffe;\n  value = FUN_08001cc4();\n  do {\n    if ((*(uint *)(*data + 8) & 1) == 0) {\n      return 0;\n    }\n    result1 = FUN_08001cc4();\n  } while ((uint)(result1 - value) < 3);\n  data_ptr[10] = data_ptr[10] | 0x10;\n  data_ptr[0xb] = data_ptr[0xb] | 1;\n  return 1;\n}\n\n",
            "current_name": "update_flags_080020f0",
            "entrypoint": "0x080020f0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080020f0": "update_flags_080020f0",
                "iVar1": "result1",
                "iVar2": "value",
                "param_1": "data",
                "param_1[0xb]": "data_ptr[0xb]",
                "param_1[10]": "data_ptr[10]"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800213c": {
            "additional_data": {
                "*param_1": {
                    "1": "param1"
                },
                "FUN_080020f0": {
                    "1": "get_data"
                },
                "FUN_0800213c": {
                    "1": "validate_parameters",
                    "2": "check_and_configure_device",
                    "3": "initialize_device",
                    "6": "process_data"
                },
                "FUN_08004974": {
                    "1": "perform_additional_operation",
                    "2": "initialize_data"
                },
                "iVar1": {
                    "1": "status",
                    "2": "return_value",
                    "28": "result"
                },
                "param_1": {
                    "1": "param",
                    "2": "parameters",
                    "3": "device",
                    "4": "parameter",
                    "6": "data"
                },
                "uVar2": {
                    "1": "combined",
                    "2": "var2",
                    "4": "temp_var1",
                    "5": "value1"
                },
                "uVar3": {
                    "1": "flag2",
                    "2": "mask2",
                    "4": "var2",
                    "5": "value2"
                }
            },
            "called": [
                "FUN_08004974",
                "FUN_080020f0"
            ],
            "calling": [
                "FUN_08004a4c"
            ],
            "code": "\nundefined4 process_data_0800213c(int *data)\n\n{\n  int result;\n  uint value1;\n  uint value2;\n  \n  if (data == (int *)0x0) {\n    return 1;\n  }\n  if (data[10] == 0) {\n    data[0xb] = 0;\n    *(undefined *)(data + 9) = 0;\n    FUN_08004974();\n  }\n  result = FUN_080020f0(data);\n  if (((data[10] & 0x10U) == 0) && (result == 0)) {\n    data[10] = data[10] & 0xffffeefdU | 2;\n    value1 = data[1] | data[7] | data[3] << 1;\n    if (data[2] == 0x100) {\n      value2 = 0x100;\n    }\n    else {\n      value2 = 0;\n      if (data[2] == 1) {\n        value2 = 0x100;\n      }\n    }\n    if (data[5] == 1) {\n      if (data[3] == 0) {\n        value2 = value2 | (data[6] + -1) * 0x2000 | 0x800;\n      }\n      else {\n        data[10] = data[10] | 0x20;\n        data[0xb] = data[0xb] | 1;\n      }\n    }\n    *(uint *)(*data + 4) = value2 | *(uint *)(*data + 4) & 0xffff16ff;\n    *(uint *)(*data + 8) = *(uint *)(*data + 8) & 0xffe1f7fd | value1;\n    if ((data[2] == 0x100) || (data[2] == 1)) {\n      value2 = (data[4] + -1) * 0x100000;\n    }\n    else {\n      value2 = 0;\n    }\n    *(uint *)(*data + 0x2c) = value2 | *(uint *)(*data + 0x2c) & 0xff0fffff;\n    if (value1 != (*(uint *)(*data + 8) & 0xff1f0efe)) {\n      data[10] = data[10] & 0xffffffedU | 0x10;\n      data[0xb] = data[0xb] | 1;\n      return 1;\n    }\n    data[0xb] = 0;\n    data[10] = data[10] & 0xfffffffcU | 1;\n    return 0;\n  }\n  data[10] = data[10] | 0x10;\n  return 1;\n}\n\n",
            "current_name": "process_data_0800213c",
            "entrypoint": "0x0800213c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800213c": "process_data_0800213c",
                "iVar1": "result",
                "param_1": "data",
                "uVar2": "value1",
                "uVar3": "value2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800224c": {
            "additional_data": {
                "*(uint *)(*param_1 + 0x10)": {
                    "1": "condition4"
                },
                "*(uint *)(*param_1 + 0x14)": {
                    "1": "condition5"
                },
                "*(uint *)(*param_1 + 0x18)": {
                    "1": "condition6"
                },
                "*(uint *)(*param_1 + 0x1c)": {
                    "1": "condition7"
                },
                "*(uint *)(*param_1 + 0x20)": {
                    "1": "condition8"
                },
                "*(uint *)(*param_1 + 0x24)": {
                    "1": "condition9"
                },
                "*(uint *)(*param_1 + 0x28)": {
                    "1": "condition10"
                },
                "*(uint *)(*param_1 + 0x2c)": {
                    "1": "condition11"
                },
                "*(uint *)(*param_1 + 0x30)": {
                    "1": "condition12"
                },
                "*(uint *)(*param_1 + 0x34)": {
                    "1": "condition13"
                },
                "*(uint *)(*param_1 + 0x38)": {
                    "1": "condition14"
                },
                "*(uint *)(*param_1 + 0xc)": {
                    "1": "condition3"
                },
                "*(uint *)(*param_1 + 4)": {
                    "1": "condition1"
                },
                "*(uint *)(*param_1 + 8)": {
                    "1": "condition2"
                },
                "*(undefined *)(param_1 + 9)": {
                    "1": "error_flag"
                },
                "*(undefined4 *)*param_1": {
                    "1": "error_code"
                },
                "*param_1": {
                    "1": "input_array"
                },
                "FUN_080020f0": {
                    "1": "subfunction_1",
                    "2": "check_function",
                    "4": "check_condition"
                },
                "FUN_0800224c": {
                    "1": "set_flags_and_reset",
                    "2": "clear_flags"
                },
                "FUN_080049f0": {
                    "1": "process_memory_layout",
                    "2": "perform_operation",
                    "3": "perform_cleanup"
                },
                "iVar1": {
                    "1": "error_code",
                    "28": "result"
                },
                "param_1": {
                    "1": "param",
                    "2": "memory_address",
                    "3": "flags",
                    "4": "memory_block"
                },
                "param_1[0]": {
                    "1": "memory_address[0]"
                },
                "param_1[0xb]": {
                    "1": "memory_address[0xb]"
                },
                "param_1[10]": {
                    "1": "memory_address[10]"
                },
                "param_1[9]": {
                    "1": "memory_address[9]"
                },
                "undefined4": {
                    "1": "uint32"
                }
            },
            "called": [
                "FUN_080020f0",
                "FUN_080049f0"
            ],
            "calling": [
                "FUN_08004a4c"
            ],
            "code": "\nint initialize_flags_0800224c(int *array)\n\n{\n  int result;\n  \n  if (array == (int *)0x0) {\n    result = 1;\n  }\n  else {\n    memory_region[10] = memory_region[10] | 2;\n    result = FUN_080020f0();\n    if (result == 0) {\n      *(uint32 *)*array = 0xffffffe0;\n      *(uint *)(*array + 4) = *(uint *)(*array + 4) & 0xff3f0000;\n      *(uint *)(*array + 8) = *(uint *)(*array + 8) & 0xff0106f0;\n      *(uint *)(*array + 0xc) = *(uint *)(*array + 0xc) & 0xff000000;\n      *(uint *)(*array + 0x10) = *(uint *)(*array + 0x10) & 0xc0000000;\n      *(uint *)(*array + 0x14) = *(uint *)(*array + 0x14) & 0xfffff000;\n      *(uint *)(*array + 0x18) = *(uint *)(*array + 0x18) & 0xfffff000;\n      *(uint *)(*array + 0x1c) = *(uint *)(*array + 0x1c) & 0xfffff000;\n      *(uint *)(*array + 0x20) = *(uint *)(*array + 0x20) & 0xfffff000;\n      *(uint *)(*array + 0x24) = *(uint *)(*array + 0x24) & 0xfffff000;\n      *(uint *)(*array + 0x28) = *(uint *)(*array + 0x28) & 0xfffff000;\n      *(uint *)(*array + 0x2c) = *(uint *)(*array + 0x2c) & 0xff000000;\n      *(uint *)(*array + 0x2c) = *(uint *)(*array + 0x2c) & 0xff000000;\n      *(uint *)(*array + 0x30) = *(uint *)(*array + 0x30) & 0xc0000000;\n      *(uint *)(*array + 0x34) = *(uint *)(*array + 0x34) & 0xc0000000;\n      *(uint *)(*array + 0x38) = *(uint *)(*array + 0x38) & 0xffc00000;\n      *(uint *)(*array + 0x38) = *(uint *)(*array + 0x38) & 0xffc00000;\n      FUN_080049f0(array);\n      memory_region[0xb] = 0;\n      memory_region[10] = 0;\n    }\n    *(undefined *)(array + 9) = 0;\n  }\n  return result;\n}\n\n",
            "current_name": "initialize_flags_0800224c",
            "entrypoint": "0x0800224c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800224c": "initialize_flags_0800224c",
                "iVar1": "result",
                "param_1": "array",
                "param_1[0xb]": "memory_region[0xb]",
                "param_1[10]": "memory_region[10]",
                "undefined4": "uint32"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002348": {
            "additional_data": {
                "*(char *)(param_1 + 0x24)": {
                    "1": "character_check"
                },
                "*(uint *)(param_1 + 0x28)": {
                    "1": "data"
                },
                "*(undefined *)(param_1 + 0x24)": {
                    "1": "status_update"
                },
                "0xffffeefe | 1": {
                    "1": "mask_update"
                },
                "<original_function_name>": {
                    "1": "check_and_update_param"
                },
                "<param_1>": {
                    "1": "param"
                },
                "FUN_080020f0": {
                    "1": "perform_operation",
                    "2": "process_data"
                },
                "FUN_08002348": {
                    "1": "process_param1",
                    "2": "check_and_update_flag",
                    "3": "check_and_modify_value",
                    "6": "check_and_update_status"
                },
                "iVar1": {
                    "25": "result",
                    "5": "return_value"
                },
                "param_1": {
                    "1": "input_param",
                    "2": "param",
                    "3": "status",
                    "8": "input"
                },
                "undefined": {
                    "1": "status"
                }
            },
            "called": [
                "FUN_080020f0"
            ],
            "calling": [
                "FUN_08004a4c"
            ],
            "code": "\nint check_and_update_status_08002348(int input)\n\n{\n  int result;\n  \n  if (*(char *)(input + 0x24) == '\\x01') {\n    return 2;\n  }\n  *(status *)(input + 0x24) = 1;\n  result = FUN_080020f0();\n  if (result == 0) {\n    *(uint *)(input + 0x28) = *(uint *)(input + 0x28) & 0xffffeefe | 1;\n  }\n  *(status *)(input + 0x24) = 0;\n  return result;\n}\n\n",
            "current_name": "check_and_update_status_08002348",
            "entrypoint": "0x08002348",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002348": "check_and_update_status_08002348",
                "iVar1": "result",
                "param_1": "input",
                "undefined": "status"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002384": {
            "additional_data": {
                "FUM_08002384": {
                    "1": "check_and_update_status"
                },
                "FUN_08001cc4": {
                    "1": "perform_action",
                    "2": "perform_operation"
                },
                "FUN_08001f84": {
                    "1": "initialize_array"
                },
                "FUN_080020f0": {
                    "3": "check_condition"
                },
                "FUN_08002384": {
                    "1": "perform_operation",
                    "2": "check_function_status",
                    "5": "check_and_update_status",
                    "8": "process_data"
                },
                "FUN_08003da4": {
                    "1": "calculate_division",
                    "2": "divide"
                },
                "iVar2": {
                    "1": "result_code",
                    "2": "return_value",
                    "26": "result"
                },
                "iVar4": {
                    "1": "first_index",
                    "2": "start_value",
                    "4": "temp_var1",
                    "8": "start"
                },
                "iVar5": {
                    "1": "loop_var2",
                    "2": "end",
                    "3": "temp2",
                    "5": "current_value",
                    "6": "current"
                },
                "local_14": {
                    "1": "loop_var3",
                    "2": "iterations",
                    "3": "loop_variable",
                    "4": "iteration_count",
                    "5": "count",
                    "6": "counter"
                },
                "param_1": {
                    "1": "parameters",
                    "10": "data",
                    "2": "param",
                    "4": "status",
                    "7": "input_array"
                },
                "uVar1": {
                    "1": "some_constant",
                    "2": "divisor",
                    "3": "temp_var1",
                    "4": "quotient",
                    "5": "division_result",
                    "9": "dividend"
                },
                "uVar3": {
                    "1": "constant2",
                    "14": "divisor",
                    "2": "quotient",
                    "3": "value2"
                }
            },
            "called": [
                "FUN_08003da4",
                "FUN_08001cc4",
                "FUN_08001f84",
                "FUN_080020f0"
            ],
            "calling": [
                "FUN_08004a4c"
            ],
            "code": "\nint process_data_08002384(int *data)\n\n{\n  uint dividend;\n  int result;\n  uint divisor;\n  int start;\n  int current;\n  int counter;\n  \n  if (*(char *)(data + 9) == '\\x01') {\n    return 2;\n  }\n  *(undefined *)(data + 9) = 1;\n  result = FUN_080020f0();\n  if (result == 0) {\n    data[10] = data[10] & 0xffffeefdU | 2;\n    dividend = DAT_20000084;\n    divisor = FUN_08003da4(2);\n    for (counter = dividend / divisor << 1; counter != 0; counter = counter + -1) {\n    }\n    FUN_08001f84(data);\n    *(uint *)(*data + 8) = *(uint *)(*data + 8) | 8;\n    start = FUN_08001cc4();\n    while (current = *data, (*(uint *)(current + 8) & 8) != 0) {\n      current = FUN_08001cc4();\n      if (10 < (uint)(current - start)) {\n        data[10] = data[10] & 0xffffffedU | 0x10;\n        *(undefined *)(data + 9) = 0;\n        return 1;\n      }\n    }\n    *(uint *)(current + 8) = *(uint *)(current + 8) | 4;\n    start = FUN_08001cc4();\n    while ((*(uint *)(*data + 8) & 4) != 0) {\n      current = FUN_08001cc4();\n      if (10 < (uint)(current - start)) {\n        data[10] = data[10] & 0xffffffedU | 0x10;\n        *(undefined *)(data + 9) = 0;\n        return 1;\n      }\n    }\n    data[10] = data[10] & 0xfffffffcU | 1;\n  }\n  *(undefined *)(data + 9) = 0;\n  return result;\n}\n\n",
            "current_name": "process_data_08002384",
            "entrypoint": "0x08002384",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002384": "process_data_08002384",
                "iVar2": "result",
                "iVar4": "start",
                "iVar5": "current",
                "local_14": "counter",
                "param_1": "data",
                "uVar1": "dividend",
                "uVar3": "divisor"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002470": {
            "additional_data": {
                "FUN_08002470": {
                    "1": "update_screen",
                    "2": "set_register_value",
                    "3": "update_register",
                    "4": "update_configuration"
                },
                "_DAT_e000ed0c": {
                    "1": "memory_address",
                    "2": "data_register",
                    "8": "register_value"
                },
                "param_1": {
                    "1": "status_value",
                    "14": "input_value",
                    "2": "config_value",
                    "4": "value"
                }
            },
            "called": [],
            "calling": [
                "FUN_08005f5e",
                "FUN_08001c88"
            ],
            "code": "\n\n\nvoid update_register_value_08002470(uint input_value)\n\n{\n  _DAT_e000ed0c = (input_value & 7) << 8 | _DAT_e000ed0c & 0xf8ff | 0x5fa0000;\n  return;\n}\n\n",
            "current_name": "update_register_value_08002470",
            "entrypoint": "0x08002470",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002470": "update_register_value_08002470",
                "param_1": "input_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002494": {
            "additional_data": {
                "(1 << (uVar1 & 0xff)) - 1U": {
                    "1": "low_bit_mask"
                },
                "*(char *)((param_1 & 0xf) + 0xe000ed14)": {
                    "1": "target_location1"
                },
                "*(char *)(param_1 + 0xe000e400)": {
                    "1": "target_location2"
                },
                "1 << (numShifts & 0xff)) - 1U & data": {
                    "1": "masked_data"
                },
                "1 << (uVar1 & 0xff)) - 1U": {
                    "1": "input_bits"
                },
                "1 << (uVar2 & 0xff)": {
                    "1": "high_bit_mask"
                },
                "1 << (uVar2 & 0xff)) - 1U": {
                    "1": "mask_bits"
                },
                "<original_function_name>": {
                    "1": "update_register_value"
                },
                "<param_1>": {
                    "1": "register_offset"
                },
                "<param_2>": {
                    "1": "bit_mask"
                },
                "<param_3>": {
                    "1": "register_value"
                },
                "<uVar1>": {
                    "1": "shift_count"
                },
                "<uVar2>": {
                    "1": "shifted_bits"
                },
                "<uVar3>": {
                    "1": "mask1"
                },
                "<uVar4>": {
                    "1": "mask2"
                },
                "<uVar5>": {
                    "1": "result"
                },
                "FUN_08002494": {
                    "1": "store_data_in_memory",
                    "2": "update_character",
                    "3": "update_memory_value",
                    "4": "update_data"
                },
                "VAR_1": {
                    "1": "memory_address"
                },
                "VAR_2": {
                    "1": "memory_address"
                },
                "addressOffset_0": {
                    "1": "address_offset_modulo"
                },
                "addressOffset_15_fl": {
                    "1": "address_offset_modulo"
                },
                "char *)((param_1 & 0xf) + 0xe000ed14)": {
                    "1": "char_pointer1"
                },
                "char *)(param_1 + 0xe000e400)": {
                    "1": "char_pointer2"
                },
                "charPointer1": {
                    "1": "destination1"
                },
                "charPointer2": {
                    "1": "destination2"
                },
                "char_bitmask_shifted": {
                    "1": "char_bitmask_shifted"
                },
                "char_ptr_e000e400": {
                    "1": "char_ptr_b"
                },
                "char_ptr_e000ed14": {
                    "1": "char_ptr_a"
                },
                "param_1": {
                    "1": "char_index",
                    "14": "address",
                    "3": "offset"
                },
                "param_1 < 0": {
                    "1": "is_negative"
                },
                "param_1_15": {
                    "1": "address_offset_modulo"
                },
                "param_1_15_bits": {
                    "1": "address_offset_modulo"
                },
                "param_1_15_fl": {
                    "1": "is_negative"
                },
                "param_1_and_f": {
                    "1": "character_index_and_f"
                },
                "param_1_bit": {
                    "1": "param_bit"
                },
                "param_1_bitmask": {
                    "1": "character_index_bitmask"
                },
                "param_2": {
                    "1": "value1",
                    "11": "mask",
                    "2": "bit_mask"
                },
                "param_2 & (1 << (shiftAmount & 0xff)) - 1U": {
                    "1": "masked_bits"
                },
                "param_3": {
                    "1": "value2",
                    "2": "value_2",
                    "5": "mask",
                    "6": "value",
                    "8": "data"
                },
                "result": {
                    "1": "updated_char_value"
                },
                "uVar1": {
                    "1": "shift",
                    "4": "shifted_bits",
                    "9": "shift_amount"
                },
                "uVar1 & 0xff": {
                    "1": "shift_bits"
                },
                "uVar1 + 4 < 7": {
                    "1": "is_condition_met"
                },
                "uVar1 << 4": {
                    "1": "shifted_value"
                },
                "uVar1 = (param_2 & lowBitMask) << shiftAmount_mod | lowBitMask & param_3": {
                    "1": "updated_value"
                },
                "uVar1_0": {
                    "1": "masked_value"
                },
                "uVar1_3_4": {
                    "1": "shifted_mask"
                },
                "uVar1_7_4_rs": {
                    "1": "bit_shift"
                },
                "uVar1_7_fl": {
                    "1": "conditional_mask"
                },
                "uVar1_address": {
                    "1": "address_bit"
                },
                "uVar1_and": {
                    "1": "u_var1_and"
                },
                "uVar1_and_1": {
                    "1": "u_var1_and_with_one"
                },
                "uVar1_and_1_minus": {
                    "1": "u_var1_and_with_one_minus"
                },
                "uVar1_and_ff": {
                    "1": "u_var1_and_with_ff"
                },
                "uVar1_bc": {
                    "1": "reduced_shifted_bits"
                },
                "uVar1_bitmask": {
                    "1": "u_var1_bitmask"
                },
                "uVar1_char": {
                    "1": "char_value"
                },
                "uVar1_combined": {
                    "1": "u_var1_combined"
                },
                "uVar1_condition": {
                    "1": "u_var1_condition"
                },
                "uVar1_final": {
                    "1": "final_shift"
                },
                "uVar1_masked": {
                    "1": "masked_shift_amount"
                },
                "uVar1_minus": {
                    "1": "shift_amount_minus"
                },
                "uVar1_new": {
                    "1": "new_shift_amount"
                },
                "uVar1_original": {
                    "1": "original_shift_amount"
                },
                "uVar1_shifted": {
                    "1": "shifted_bitmask"
                },
                "uVar1_shifted_minus": {
                    "1": "shifted_bitmask_minus"
                },
                "uVar1_shifted_minus_and_ff": {
                    "1": "shifted_bitmask_minus_and_ff"
                },
                "uVar1_temp": {
                    "1": "shift_temp"
                },
                "uVar1_update": {
                    "1": "u_var1_update"
                },
                "uVar2": {
                    "1": "effective_shift_amount",
                    "2": "offset",
                    "5": "shift_amount",
                    "8": "remaining_bits"
                },
                "uVar2 & 0xff": {
                    "1": "modified_remaining_bits"
                },
                "uVar2_and": {
                    "1": "u_var2_and"
                },
                "uVar2_and_ff": {
                    "1": "u_var2_and_with_ff"
                },
                "uVar2_final": {
                    "1": "final_bits"
                },
                "uVar2_minus": {
                    "1": "modified_shift_amount_minus"
                },
                "uVar2_new": {
                    "1": "new_modified_shift_amount"
                },
                "uVar2_original": {
                    "1": "original_modified_shift_amount"
                },
                "uVar2_temp": {
                    "1": "bits_temp"
                },
                "uVar3": {
                    "1": "num_bits_data"
                },
                "uVar4": {
                    "1": "shifted_data"
                },
                "uVar5": {
                    "1": "new_value"
                }
            },
            "called": [],
            "calling": [
                "FUN_08005510",
                "FUN_08001b48",
                "FUN_08001c3c",
                "FUN_08005568"
            ],
            "code": "\n\n\nvoid update_memory_08002494(uint address,uint mask,uint data)\n\n{\n  uint shift_amount;\n  uint remaining_bits;\n  \n  shift_amount = (uint)(_DAT_e000ed0c << 0x15) >> 0x1d;\n  remaining_bits = 7 - shift_amount;\n  if (3 < remaining_bits) {\n    remaining_bits = 4;\n  }\n  if (shift_amount + 4 < 7) {\n    shift_amount = 0;\n  }\n  else {\n    shift_amount = shift_amount - 3;\n  }\n  shift_amount = (mask & (1 << (remaining_bits & 0xff)) - 1U) << (shift_amount & 0xff) |\n          (1 << (shift_amount & 0xff)) - 1U & data;\n  if ((int)address < 0) {\n    *(char *)((address & 0xf) + 0xe000ed14) = (char)(shift_amount << 4);\n  }\n  else {\n    *(char *)(address + 0xe000e400) = (char)(shift_amount << 4);\n  }\n  return;\n}\n\n",
            "current_name": "update_memory_08002494",
            "entrypoint": "0x08002494",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002494": "update_memory_08002494",
                "param_1": "address",
                "param_2": "mask",
                "param_3": "data",
                "uVar1": "shift_amount",
                "uVar2": "remaining_bits"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080024f8": {
            "additional_data": {
                "*(int *)((param_1 >> 5) * 4 + -0x1fff1f00)": {
                    "1": "memory_address",
                    "2": "bit_array"
                },
                "1 << (param_1 & 0x1f)": {
                    "2": "bit_value",
                    "7": "bit_mask"
                },
                "<original_variable_name_1>": {
                    "1": "bit_mask"
                },
                "<original_variable_name_2>": {
                    "1": "offset"
                },
                "FUN_080024f8": {
                    "1": "initialize_bit",
                    "11": "set_bit",
                    "4": "set_bit_in_memory",
                    "6": "set_bit_at_index",
                    "7": "set_bit_in_array"
                },
                "int": {
                    "1": "bit_value"
                },
                "param_1": {
                    "1": "num",
                    "11": "bit_index",
                    "15": "index",
                    "2": "bit_position"
                },
                "param_1 & 0x1f": {
                    "1": "bit_offset",
                    "2": "bit_index"
                },
                "param_1 >> 5": {
                    "1": "array_index",
                    "2": "word_index"
                }
            },
            "called": [],
            "calling": [
                "FUN_08005510",
                "FUN_08005568"
            ],
            "code": "\nvoid set_bit_080024f8(ubit_value index)\n\n{\n  if (-1 < (bit_value)index) {\n    *(bit_value *)((index >> 5) * 4 + -0x1fff1f00) = 1 << (index & 0x1f);\n  }\n  return;\n}\n\n",
            "current_name": "set_bit_080024f8",
            "entrypoint": "0x080024f8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080024f8": "set_bit_080024f8",
                "int": "bit_value",
                "param_1": "index"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002514": {
            "additional_data": {
                "DAT_e000ed23": {
                    "1": "register2",
                    "2": "constant",
                    "3": "constant_value",
                    "7": "status"
                },
                "FUN_08002514": {
                    "1": "initialize_value",
                    "2": "set_param_values",
                    "5": "initialize_memory",
                    "7": "initialize_data"
                },
                "_DAT_e000e010": {
                    "1": "default_mask_value",
                    "2": "limit"
                },
                "_DAT_e000e014": {
                    "1": "param_minus_one",
                    "2": "memory_address",
                    "3": "modified_input",
                    "4": "modified_value"
                },
                "_DAT_e000e018": {
                    "1": "variable_a",
                    "10": "counter",
                    "2": "additional_value",
                    "3": "unused_variable",
                    "5": "initialized_value"
                },
                "param_1": {
                    "1": "device_id",
                    "12": "input_value",
                    "13": "value"
                }
            },
            "called": [],
            "calling": [
                "FUN_08001b48",
                "FUN_08001c3c"
            ],
            "code": "\n\n\nundefined4 initialize_data_08002514(int value)\n\n{\n  if (value - 1U < 0x1000000) {\n    _DAT_e000e014 = value - 1U;\n    DAT_e000ed23 = 0xf0;\n    _DAT_e000e018 = 0;\n    _DAT_e000e010 = 7;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "current_name": "initialize_data_08002514",
            "entrypoint": "0x08002514",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002514": "initialize_data_08002514",
                "param_1": "value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002540": {
            "additional_data": {
                "(int)param_1": {
                    "1": "index"
                },
                "(param_1 & 0x1f)": {
                    "1": "bit_offset"
                },
                "(param_1 >> 5)": {
                    "1": "array_index"
                },
                "(param_1 >> 5) + 0x60": {
                    "1": "memory_byte_offset"
                },
                "(param_1 >> 5) + 0x60) * 4 + -0x1fff1f00": {
                    "1": "array_address"
                },
                "*(int *)(((param_1 >> 5) + 0x60) * 4 + -0x1fff1f00)": {
                    "3": "array",
                    "4": "bit_array"
                },
                "-0x1fff1f00": {
                    "1": "base_address"
                },
                "1 << (param_1 & 0x1f)": {
                    "1": "bit_pattern",
                    "4": "bit_mask"
                },
                "<new_variable_name_1>": {
                    "1": "array_base_address"
                },
                "FUN_08002540": {
                    "1": "set_bit_in_integer",
                    "11": "set_bit",
                    "2": "set_bit_at_index",
                    "3": "set_bit_at_position",
                    "9": "set_bit_in_array"
                },
                "int": {
                    "1": "integer"
                },
                "param_1": {
                    "1": "array_index",
                    "13": "bit_index",
                    "2": "position",
                    "5": "bit_position",
                    "8": "index"
                },
                "param_1 & 0x1f": {
                    "1": "bit_index"
                },
                "param_1 >> 5": {
                    "1": "divided_by32"
                },
                "param_2": {
                    "1": "value"
                }
            },
            "called": [],
            "calling": [],
            "code": "\nvoid set_bit_08002540(uinteger bit_index)\n\n{\n  if (-1 < converted_index) {\n    *(integer *)(((bit_index >> 5) + 0x60) * 4 + -0x1fff1f00) = 1 << (bit_index & 0x1f);\n  }\n  return;\n}\n\n",
            "current_name": "set_bit_08002540",
            "entrypoint": "0x08002540",
            "imported": false,
            "improved": true,
            "renaming": {
                "(int)param_1": "converted_index",
                "FUN_08002540": "set_bit_08002540",
                "int": "integer",
                "param_1": "bit_index"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002560": {
            "additional_data": {
                "FUN_08002560": {
                    "1": "set_flag_based_on_parameter",
                    "2": "update_flag",
                    "4": "update_status",
                    "5": "update_control_register"
                },
                "_DAT_e000e010": {
                    "1": "register_e000e010",
                    "2": "flag",
                    "4": "status_register",
                    "6": "control_register",
                    "9": "register_value"
                },
                "param_1": {
                    "1": "mode",
                    "11": "value",
                    "2": "input",
                    "3": "flag_value",
                    "4": "status"
                }
            },
            "called": [],
            "calling": [
                "FUN_08001b48"
            ],
            "code": "\n\n\nvoid set_flag_08002560(int value)\n\n{\n  if (value != 4) {\n    _DAT_e000e010 = _DAT_e000e010 & 0xfffffffb;\n    return;\n  }\n  _DAT_e000e010 = _DAT_e000e010 | 4;\n  return;\n}\n\n",
            "current_name": "set_flag_08002560",
            "entrypoint": "0x08002560",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002560": "set_flag_08002560",
                "param_1": "value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002580": {
            "called": [],
            "calling": [
                "FUN_08002582"
            ],
            "code": "\nvoid FUNC_08002580(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_08002580",
            "entrypoint": "0x08002580",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_08002580": "FUNC_08002580"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_08002582": {
            "additional_data": {
                "FUNC_08002580": {
                    "1": "perform_main_operation",
                    "2": "execute_subfunction",
                    "4": "perform_initialization"
                },
                "FUN_08002582": {
                    "1": "perform_initialization",
                    "2": "execute_code",
                    "4": "initialize",
                    "5": "execute_function",
                    "6": "execute_main_function",
                    "7": "initialize_system"
                }
            },
            "called": [
                "FUN_08002580"
            ],
            "calling": [
                "FUN_08004b9e"
            ],
            "code": "\nvoid initialize_system_08002582(void)\n\n{\n  FUNC_08002580();\n  return;\n}\n\n",
            "current_name": "initialize_system_08002582",
            "entrypoint": "0x08002582",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002582": "initialize_system_08002582"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800258c": {
            "additional_data": {
                "(*(code *)param_1[0xd])()": {
                    "1": "run_callback",
                    "2": "execute_callback"
                },
                "(*param_1)[11]": {
                    "1": "some_value"
                },
                "(*param_1)[12]": {
                    "1": "data"
                },
                "(*param_1)[13]": {
                    "1": "callback_function"
                },
                "(*param_1)[14]": {
                    "1": "status"
                },
                "(*param_1)[8]": {
                    "1": "another_value"
                },
                "(code *)param_1[0xd]": {
                    "1": "custom_function"
                },
                "(int)param_1 + 0x21": {
                    "1": "settings_flag"
                },
                "(uint *)0x0": {
                    "1": "null_pointer"
                },
                "(uint *)0x4": {
                    "1": "option_1"
                },
                "(uint *)0x40020008": {
                    "1": "option_2"
                },
                "(uint *)0x4002001c": {
                    "1": "config_param_2"
                },
                "(uint *)0x40020030": {
                    "1": "option_4"
                },
                "(uint *)0x40020044": {
                    "1": "config_param_4"
                },
                "(uint *)0x40020058": {
                    "1": "config_param_5"
                },
                "(uint *)0x4002006c": {
                    "1": "config_param_6"
                },
                "(uint *)0x40020080": {
                    "1": "option_8"
                },
                "*(char *)((int)data + 0x21)": {
                    "1": "value"
                },
                "*(char *)((int)param_1 + 0x21)": {
                    "1": "options_flag",
                    "3": "config_status"
                },
                "*(code *)param_1[0xd]": {
                    "1": "execute_callback_function"
                },
                "*(undefined *)((int)param_1 + 0x21)": {
                    "1": "set_new_mode",
                    "2": "config_flag"
                },
                "*(undefined *)(param_1 + 8)": {
                    "1": "additional_info"
                },
                "**param_1": {
                    "1": "flag_value",
                    "4": "config_value"
                },
                "*param_1": {
                    "1": "config_pointer"
                },
                "*param_1 == (uint *)0x40020008": {
                    "1": "is_config1"
                },
                "*param_1 == (uint *)0x4002001c": {
                    "1": "is_config2"
                },
                "*param_1 == (uint *)0x40020030": {
                    "1": "is_config3"
                },
                "*param_1 == (uint *)0x40020044": {
                    "1": "is_config4"
                },
                "*param_1 == (uint *)0x40020058": {
                    "1": "is_config5"
                },
                "*param_1 == (uint *)0x4002006c": {
                    "1": "is_config6"
                },
                "._21": {
                    "1": "flag"
                },
                "0": {
                    "1": "no_extra_data"
                },
                "0x0": {
                    "1": "null_pointer"
                },
                "0x1000000": {
                    "1": "address_default"
                },
                "0x21": {
                    "1": "updated_condition_flag"
                },
                "0x4": {
                    "1": "invalid_configuration"
                },
                "0x40020008": {
                    "1": "address_1"
                },
                "0x4002001c": {
                    "1": "address_2"
                },
                "0x40020030": {
                    "1": "address_3"
                },
                "0x40020044": {
                    "1": "address_4"
                },
                "0x40020058": {
                    "1": "address_5"
                },
                "0x4002006c": {
                    "1": "address_6"
                },
                "0xd": {
                    "1": "function_ptr"
                },
                "0xe": {
                    "1": "index"
                },
                "0xfffffff1": {
                    "1": "bit_mask_1"
                },
                "0xfffffffe": {
                    "1": "bit_mask_2"
                },
                "1": {
                    "1": "configured_flag"
                },
                "8": {
                    "1": "offset"
                },
                "FUN_0800258c": {
                    "1": "configure_memory_access",
                    "2": "initialize_settings",
                    "5": "initialize_data",
                    "7": "set_configuration"
                },
                "PTR_40020004": {
                    "1": "status_register"
                },
                "PTR_40020008": {
                    "1": "option1"
                },
                "PTR_4002001c": {
                    "1": "option2"
                },
                "PTR_40020030": {
                    "1": "option3"
                },
                "PTR_40020044": {
                    "1": "option4"
                },
                "PTR_40020058": {
                    "1": "option5"
                },
                "PTR_4002006c": {
                    "1": "option6"
                },
                "_DAT_40020004": {
                    "1": "access_code",
                    "2": "data_register",
                    "3": "config_value"
                },
                "_DAT_40020008": {
                    "1": "memory_option1"
                },
                "_DAT_4002001c": {
                    "1": "memory_option2"
                },
                "_DAT_40020030": {
                    "1": "memory_option3"
                },
                "_DAT_40020044": {
                    "1": "memory_option4"
                },
                "_DAT_40020058": {
                    "1": "memory_option5"
                },
                "_DAT_4002006c": {
                    "1": "memory_option6"
                },
                "code": {
                    "1": "callback"
                },
                "param_1": {
                    "1": "data_settings",
                    "2": "configuration",
                    "4": "settings",
                    "5": "data"
                },
                "param_1 + 8": {
                    "1": "additional_data"
                },
                "param_1[0xd]": {
                    "1": "perform_operation",
                    "10": "callback_function",
                    "2": "callback_func"
                },
                "param_1[0xe]": {
                    "1": "error_flag",
                    "12": "error_code",
                    "2": "result"
                },
                "puVar1": {
                    "1": "current_value",
                    "2": "current_setting",
                    "3": "ptr",
                    "4": "current_config",
                    "5": "value"
                }
            },
            "called": [],
            "calling": [
                "FUN_0800316c",
                "FUN_080046b8"
            ],
            "code": "\n\n\nundefined4 set_configuration_0800258c(uint **data)\n\n{\n  uint *current_param;\n  \n  if (*(char *)((int)data + 0x21) != '\\x02') {\n    error_code = (uint *)0x4;\n    return 1;\n  }\n  **data = **data & 0xfffffff1;\n  **data = **data & 0xfffffffe;\n  current_param = *data;\n  if (current_param == (uint *)0x40020008) {\n    _DAT_40020004 = 1;\n  }\n  else if (current_param == (uint *)0x4002001c) {\n    _DAT_40020004 = 0x10;\n  }\n  else if (current_param == (uint *)0x40020030) {\n    _DAT_40020004 = 0x100;\n  }\n  else if (current_param == (uint *)0x40020044) {\n    _DAT_40020004 = 0x1000;\n  }\n  else if (current_param == (uint *)0x40020058) {\n    _DAT_40020004 = 0x10000;\n  }\n  else if (current_param == (uint *)0x4002006c) {\n    _DAT_40020004 = 0x100000;\n  }\n  else {\n    _DAT_40020004 = 0x1000000;\n  }\n  *(undefined *)((int)data + 0x21) = 1;\n  *(undefined *)(data + 8) = 0;\n  if (callback_function != (uint *)0x0) {\n    (*(callback *)callback_function)();\n    return 0;\n  }\n  return 0;\n}\n\n",
            "current_name": "set_configuration_0800258c",
            "entrypoint": "0x0800258c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800258c": "set_configuration_0800258c",
                "code": "callback",
                "param_1": "data",
                "param_1[0xd]": "callback_function",
                "param_1[0xe]": "error_code",
                "puVar1": "current_param"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002624": {
            "additional_data": {
                "FUN_08002624": {
                    "1": "update_parameters",
                    "2": "update_flags_and_values",
                    "3": "update_register_values",
                    "5": "update_flags",
                    "6": "update_bits"
                },
                "_DAT_40010400": {
                    "1": "register_0"
                },
                "_DAT_40010404": {
                    "1": "register_1"
                },
                "_DAT_40010408": {
                    "1": "register_2"
                },
                "_DAT_4001040c": {
                    "1": "register_value5"
                },
                "_DAT_40021018": {
                    "1": "control_register"
                },
                "iVar7": {
                    "1": "index_bit_shift",
                    "2": "index",
                    "4": "shift",
                    "8": "bit_offset"
                },
                "iVar8": {
                    "1": "memory_index",
                    "17": "register_index",
                    "2": "index"
                },
                "param_1": {
                    "1": "bitmask1",
                    "2": "bits_to_update",
                    "3": "flags"
                },
                "param_2": {
                    "1": "register_array_2",
                    "2": "input_values",
                    "3": "input_flags"
                },
                "puVar1": {
                    "1": "memory_ptr",
                    "3": "output_ptr"
                },
                "uVar2": {
                    "1": "shifted_bit",
                    "26": "bit_mask"
                },
                "uVar3": {
                    "1": "bit_check_result",
                    "3": "bit_value",
                    "8": "bit_check"
                },
                "uVar4": {
                    "1": "config_index",
                    "10": "bit_index",
                    "2": "iteration",
                    "4": "i",
                    "5": "bit_position",
                    "6": "index"
                },
                "uVar5": {
                    "1": "operation_code",
                    "2": "instruction",
                    "4": "flag_value",
                    "5": "opcode",
                    "7": "value"
                },
                "uVar6": {
                    "1": "flag_value",
                    "14": "new_value",
                    "2": "new_flag_value",
                    "8": "updated_value"
                }
            },
            "called": [],
            "calling": [
                "FUN_08004bb0",
                "FUN_08004974",
                "FUN_08004f4c"
            ],
            "code": "\n\n\nvoid update_bits_08002624(uint *register_values,uint *input_flags)\n\n{\n  uint *output_ptr;\n  uint bit_mask;\n  uint bit_check;\n  uint bit_index;\n  uint value;\n  uint new_value;\n  int bit_offset;\n  int register_index;\n  \n  new_value = 0;\n  bit_index = 0;\n  do {\n    if (0xf < bit_index) {\n      return;\n    }\n    bit_mask = 1 << (bit_index & 0xff);\n    bit_check = *input_flags & bit_mask;\n    if (bit_mask == bit_check) {\n      value = input_flags[1];\n      if (value == 0x12) {\n        new_value = input_flags[3] + 0xc;\n      }\n      else if (value < 0x13) {\n        if (value == 2) {\n          new_value = input_flags[3] + 8;\n        }\n        else if (value < 3) {\n          if (value == 0) goto LAB_08002776;\n          if (value == 1) {\n            new_value = input_flags[3];\n          }\n        }\n        else if (value == 3) {\n          new_value = 0;\n        }\n        else if (value == 0x11) {\n          new_value = input_flags[3] + 4;\n        }\n      }\n      else if (value == 0x10210000) {\nLAB_08002776:\n        if (input_flags[2] == 0) {\n          new_value = 4;\n        }\n        else if (input_flags[2] == 1) {\n          register_values[4] = bit_mask;\n          new_value = 8;\n        }\n        else {\n          register_values[5] = bit_mask;\n          new_value = 8;\n        }\n      }\n      else if (value < 0x10210001) {\n        if ((value == 0x10110000) || (value == 0x10120000)) goto LAB_08002776;\n      }\n      else if ((value == 0x10310000) || ((value == 0x10320000 || (value == 0x10220000))))\n      goto LAB_08002776;\n      bit_mask = bit_index;\n      output_ptr = register_values;\n      if (0xff < bit_check) {\n        bit_mask = bit_index - 8;\n        output_ptr = register_values + 1;\n      }\n      *output_ptr = *output_ptr & ~(0xf << (bit_mask << 2 & 0xff)) | new_value << (bit_mask << 2 & 0xff);\n      if ((input_flags[1] & 0x10000000) != 0) {\n        _DAT_40021018 = _DAT_40021018 | 1;\n        bit_offset = (bit_index & 3) << 2;\n        if (register_values == (uint *)0x40010800) {\n          register_index = 0;\n        }\n        else if (register_values == (uint *)0x40010c00) {\n          register_index = 1;\n        }\n        else if (register_values == (uint *)0x40011000) {\n          register_index = 2;\n        }\n        else if (register_values == (uint *)0x40011400) {\n          register_index = 3;\n        }\n        else {\n          register_index = 4;\n        }\n        *(uint *)(((bit_index >> 2) + 2) * 4 + 0x40010000) =\n             *(uint *)(((bit_index >> 2) + 2) * 4 + 0x40010000) & ~(0xf << bit_offset) | register_index << bit_offset;\n        if ((input_flags[1] & 0x10000) == 0) {\n          _DAT_40010400 = _DAT_40010400 & ~bit_check;\n        }\n        else {\n          _DAT_40010400 = _DAT_40010400 | bit_check;\n        }\n        if ((input_flags[1] & 0x20000) == 0) {\n          _DAT_40010404 = _DAT_40010404 & ~bit_check;\n        }\n        else {\n          _DAT_40010404 = _DAT_40010404 | bit_check;\n        }\n        if ((input_flags[1] & 0x100000) == 0) {\n          _DAT_40010408 = _DAT_40010408 & ~bit_check;\n        }\n        else {\n          _DAT_40010408 = _DAT_40010408 | bit_check;\n        }\n        if ((input_flags[1] & 0x200000) == 0) {\n          _DAT_4001040c = _DAT_4001040c & ~bit_check;\n        }\n        else {\n          _DAT_4001040c = bit_check | _DAT_4001040c;\n        }\n      }\n    }\n    bit_index = bit_index + 1;\n  } while( true );\n}\n\n",
            "current_name": "update_bits_08002624",
            "entrypoint": "0x08002624",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002624": "update_bits_08002624",
                "iVar7": "bit_offset",
                "iVar8": "register_index",
                "param_1": "register_values",
                "param_2": "input_flags",
                "puVar1": "output_ptr",
                "uVar2": "bit_mask",
                "uVar3": "bit_check",
                "uVar4": "bit_index",
                "uVar5": "value",
                "uVar6": "new_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002810": {
            "additional_data": {
                "*(uint *)(param_1 + 8)": {
                    "1": "bit_pattern"
                },
                "8": {
                    "1": "mask_offset"
                },
                "<original_variable_name_1>": {
                    "1": "mask_result"
                },
                "DAT_": {
                    "1": "ignore_"
                },
                "DAT_08002868": {
                    "1": "bitcheck_result"
                },
                "FUN_08002810": {
                    "1": "is_bit_set",
                    "18": "check_bit",
                    "2": "check_param_bit"
                },
                "PTR_": {
                    "1": "ignore_"
                },
                "PTR_08002810": {
                    "1": "p_mask"
                },
                "local_1": {
                    "1": "bitwise_result"
                },
                "original_variable_name_n": {
                    "1": "result"
                },
                "param_1": {
                    "1": "input_param",
                    "14": "input_value",
                    "2": "data_address"
                },
                "param_1 + 8": {
                    "1": "bitmask_address",
                    "2": "bit_mask_address"
                },
                "param_1+8": {
                    "1": "mask_address"
                },
                "param_2": {
                    "14": "bit_mask",
                    "2": "flag",
                    "4": "value",
                    "5": "mask",
                    "6": "bitmask"
                },
                "param_3": {
                    "1": "offset"
                },
                "param_4": {
                    "1": "result"
                },
                "ptr_to_value": {
                    "1": "value_ptr"
                },
                "return": {
                    "1": "is_bit_set",
                    "2": "result"
                },
                "uint": {
                    "1": "unsigned_integer"
                }
            },
            "called": [],
            "calling": [
                "FUN_08004c48"
            ],
            "code": "\nundefined4 check_bit_08002810(int input_value,unsigned_integer bit_mask)\n\n{\n  if ((bit_mask & *(unsigned_integer *)(input_value + 8)) == 0) {\n    result 0;\n  }\n  result 1;\n}\n\n",
            "current_name": "check_bit_08002810",
            "entrypoint": "0x08002810",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002810": "check_bit_08002810",
                "param_1": "input_value",
                "param_2": "bit_mask",
                "return": "result",
                "uint": "unsigned_integer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800281e": {
            "additional_data": {
                "*(int *)(dstAddress + 0x10)": {
                    "1": "updated_value"
                },
                "*(int *)(param_1 + 0x10)": {
                    "1": "current_value",
                    "3": "target_address"
                },
                "FUN_0800281e": {
                    "1": "update_parameter_value",
                    "13": "set_param_value",
                    "2": "update_param_value"
                },
                "local_1": {
                    "1": "shifted_value"
                },
                "local_2": {
                    "1": "address_to_modify"
                },
                "param_1": {
                    "1": "context",
                    "13": "object_address",
                    "2": "memory_address",
                    "9": "base_address"
                },
                "param_1 + 0x10": {
                    "1": "value_address"
                },
                "param_2": {
                    "1": "parameter_value",
                    "19": "value",
                    "9": "new_value"
                },
                "param_2 << 0x10": {
                    "1": "updated_value",
                    "5": "shifted_value"
                },
                "param_3": {
                    "1": "update_high_bits",
                    "17": "is_shifted",
                    "2": "shift_flag",
                    "6": "shift_value"
                }
            },
            "called": [],
            "calling": [
                "FUN_08004c30"
            ],
            "code": "\nvoid set_param_value_0800281e(int object_address,int value,int is_shifted)\n\n{\n  if (is_shifted == 0) {\n    *(int *)(object_address + 0x10) = value << 0x10;\n    return;\n  }\n  *(int *)(object_address + 0x10) = value;\n  return;\n}\n\n",
            "current_name": "set_param_value_0800281e",
            "entrypoint": "0x0800281e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800281e": "set_param_value_0800281e",
                "param_1": "object_address",
                "param_2": "value",
                "param_3": "is_shifted"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800282c": {
            "additional_data": {
                "FUN_0800282c": {
                    "1": "check_and_call_function",
                    "2": "update_flag",
                    "3": "update_data_if_flag_set",
                    "4": "update_data"
                },
                "FUN_080060e4": {
                    "1": "do_data_update",
                    "2": "process_updated_data",
                    "3": "execute_update",
                    "5": "perform_action",
                    "7": "perform_update"
                },
                "_DAT_40010414": {
                    "1": "existing_data",
                    "2": "flag_register",
                    "4": "data_flag",
                    "7": "data"
                },
                "param_1": {
                    "1": "input_param",
                    "2": "data_to_update",
                    "6": "data",
                    "7": "flag"
                }
            },
            "called": [
                "FUN_080060e4"
            ],
            "calling": [],
            "code": "\n\n\nvoid update_and_call_function_0800282c(uint flag)\n\n{\n  if ((_DAT_40010414 & flag) != 0) {\n    _DAT_40010414 = flag;\n    FUN_080060e4();\n  }\n  return;\n}\n\n",
            "current_name": "update_and_call_function_0800282c",
            "entrypoint": "0x0800282c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800282c": "update_and_call_function_0800282c",
                "param_1": "flag"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002848": {
            "additional_data": {
                "(uint)(param_1[0x11] << 0x10) >> 0x17 & 6 | 0xf0": {
                    "1": "shifted_flag_value_and0x17_and6_or0x_f0"
                },
                "(uint)(param_1[0x11] << 0x10) >> 0x17 & 6 | 0xf1": {
                    "1": "flag_calculation_1"
                },
                "*(char *)((int)inputParams + 0x3d)": {
                    "1": "char2"
                },
                "*(char *)((int)inputParams + 0x3e)": {
                    "1": "char1"
                },
                "*(char *)((int)param_1 + 0x3d)": {
                    "1": "param_array[0x3d]",
                    "2": "char_value2"
                },
                "*(char *)((int)param_1 + 0x3d) == '!'": {
                    "1": "character_b_equal_exclamation"
                },
                "*(char *)((int)param_1 + 0x3e)": {
                    "1": "config.character",
                    "2": "symbol"
                },
                "*(char*)((int)param_1 + 0x3d)": {
                    "1": "flag_char2"
                },
                "*(char*)((int)param_1 + 0x3e)": {
                    "1": "flag_char1"
                },
                "*(uint *)(*inputParams + 0x10)": {
                    "1": "flag"
                },
                "*(uint *)(*param_1 + 0x10)": {
                    "1": "flag_value",
                    "2": "flag_ptr"
                },
                "*(uint*)(*param_1 + 0x10)": {
                    "1": "flag_ptr"
                },
                "*param_1": {
                    "1": "control_ptr"
                },
                "*param_1 + 0x10": {
                    "1": "control_register_value"
                },
                "0x10": {
                    "1": "value_offset"
                },
                "0x11": {
                    "1": "bitwise_value",
                    "2": "value"
                },
                "0x14": {
                    "1": "condition2",
                    "2": "index"
                },
                "0x3d": {
                    "1": "char_value_2"
                },
                "0x3e": {
                    "1": "character_offset"
                },
                "0x4000": {
                    "1": "constant_value"
                },
                "0xfe": {
                    "1": "mask_62_clear"
                },
                "0xffU": {
                    "1": "mask_63_set"
                },
                "FUN_08002848": {
                    "1": "set_control_bits",
                    "2": "update_flag",
                    "3": "set_permissions",
                    "5": "update_flag_value"
                },
                "PTR_x": {
                    "1": "file_ptr"
                },
                "char": {
                    "2": "character"
                },
                "char[] ((int)deviceInfo + 0x3d)": {
                    "1": "character_at3_d"
                },
                "char[] ((int)deviceInfo + 0x3e)": {
                    "1": "character_at3_e"
                },
                "char_1": {
                    "1": "file_type"
                },
                "char_2": {
                    "1": "second_char"
                },
                "inputParams[0x11]": {
                    "1": "value_to_calculate"
                },
                "inputParams[0x14]": {
                    "1": "flag_value"
                },
                "int": {
                    "2": "integer"
                },
                "param_1": {
                    "1": "flag_data",
                    "2": "parameters",
                    "3": "permissions",
                    "4": "input_array"
                },
                "param_1 + 0x3d": {
                    "1": "parameters[61]"
                },
                "param_1 + 0x3e": {
                    "1": "parameters[62]"
                },
                "param_1[0x11]": {
                    "1": "flag_data",
                    "2": "flag_value",
                    "3": "value"
                },
                "param_1[0x11] & 0xfe": {
                    "1": "flag_value_and0x_fe"
                },
                "param_1[0x11] & 0xffU | 1": {
                    "1": "flag_value_and0x_ff_or1"
                },
                "param_1[0x14]": {
                    "1": "version",
                    "2": "mode",
                    "3": "flag_index",
                    "4": "flag"
                },
                "param_1[0x14] == 0": {
                    "1": "is_flag_zero_equal_zero"
                },
                "param_1[0x14] == 1": {
                    "1": "is_flag_zero_equal_one"
                },
                "param_1[4]": {
                    "1": "value2",
                    "2": "flag_value"
                },
                "param_1[4] == 0x4000": {
                    "1": "param4_equal0x4000"
                },
                "permissions": {
                    "1": "permissions"
                },
                "uint": {
                    "1": "unsigned_int"
                },
                "uint_1": {
                    "1": "flag_ptr"
                },
                "uint_2": {
                    "1": "value"
                },
                "uint_3": {
                    "1": "result"
                },
                "uint_x": {
                    "1": "permissions"
                }
            },
            "called": [],
            "calling": [
                "FUN_080033b8"
            ],
            "code": "\nundefined4 update_flag_value_08002848(integer *input_array)\n\n{\n  if (*(character *)((integer)input_array + 0x3e) == '@') {\n    if (flag == 0) {\n      *(unsigned_int *)(*input_array + 0x10) = value & 0xfe;\n    }\n    else {\n      *(unsigned_int *)(*input_array + 0x10) = value & mask_63_set | 1;\n    }\n  }\n  else if (flag_value == 0x4000) {\n    if (*(character *)((integer)input_array + 0x3d) == '!') {\n      *(unsigned_int *)(*input_array + 0x10) = value & 0xfe;\n    }\n    else {\n      *(unsigned_int *)(*input_array + 0x10) = value & mask_63_set | 1;\n    }\n  }\n  else if (flag == 0) {\n    *(unsigned_int *)(*input_array + 0x10) = (unsigned_int)(value << 0x10) >> 0x17 & 6 | 0xf0;\n  }\n  else if (flag == 1) {\n    *(unsigned_int *)(*input_array + 0x10) = (unsigned_int)(value << 0x10) >> 0x17 & 6 | 0xf1;\n  }\n  return 0;\n}\n\n",
            "current_name": "update_flag_value_08002848",
            "entrypoint": "0x08002848",
            "imported": false,
            "improved": true,
            "renaming": {
                "0xffU": "mask_63_set",
                "FUN_08002848": "update_flag_value_08002848",
                "char": "character",
                "int": "integer",
                "param_1": "input_array",
                "param_1[0x11]": "value",
                "param_1[0x14]": "flag",
                "param_1[4]": "flag_value",
                "uint": "unsigned_int"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080028d2": {
            "additional_data": {
                "& 0xff": {
                    "1": "mask"
                },
                "*(uint *)(*param_1 + 0x10)": {
                    "1": "address_value",
                    "8": "target_address"
                },
                "*param_1": {
                    "1": "address_value"
                },
                "0x10": {
                    "2": "offset"
                },
                "0x11": {
                    "1": "index"
                },
                "0xff": {
                    "1": "bitmask",
                    "4": "mask"
                },
                "<original_variable_name_1>": {
                    "1": "base_pointer"
                },
                "<original_variable_name_2>": {
                    "1": "offset"
                },
                "<original_variable_name_n>": {
                    "1": "result"
                },
                "DAT_": {
                    "1": "ignore_"
                },
                "FUN_080028d2": {
                    "1": "write_param_value",
                    "2": "update_parameter_value",
                    "4": "set_param_value"
                },
                "PTR_": {
                    "1": "ignore_"
                },
                "param_1": {
                    "1": "memory_address",
                    "2": "param_list",
                    "3": "parameter",
                    "7": "input_array"
                },
                "param_1[0x11]": {
                    "1": "data_array[17]",
                    "2": "parameter_value",
                    "3": "value_at_index17"
                },
                "param_1[0x11] & 0xff": {
                    "1": "masked_byte"
                },
                "return value": {
                    "1": "success"
                },
                "valueToUpdate & 0xff": {
                    "1": "updated_value"
                }
            },
            "called": [],
            "calling": [
                "FUN_080033b8"
            ],
            "code": "\nundefined4 set_param_value_080028d2(int *input_array)\n\n{\n  *(uint *)(*input_array + 0x10) = value & 0xff;\n  return 0;\n}\n\n",
            "current_name": "set_param_value_080028d2",
            "entrypoint": "0x080028d2",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080028d2": "set_param_value_080028d2",
                "param_1": "input_array",
                "param_1[0x11]": "value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080028de": {
            "additional_data": {
                "(uint *)0x0": {
                    "1": "0x0"
                },
                "(uint *)0x12": {
                    "1": "constant4"
                },
                "(uint *)0x2": {
                    "1": "0x2"
                },
                "(uint *)0x4": {
                    "1": "constant2"
                },
                "(uint *)0x8": {
                    "1": "constant3"
                },
                "(uint *)0xc000": {
                    "1": "0xc000"
                },
                "(uint *)0xffff0000": {
                    "1": "0xffff0000"
                },
                "*(char *)((int)param_1 + 0x3d)": {
                    "1": "char_at_offset_0x3d",
                    "2": "char_check1",
                    "3": "char_value1",
                    "4": "char_value"
                },
                "*(char *)((int)param_1 + 0x3e)": {
                    "1": "param[62]",
                    "2": "char_check2",
                    "6": "char_value2"
                },
                "*(short *)((int)param_1 + 0x2a)": {
                    "1": "param[42]",
                    "2": "short_check",
                    "7": "short_value"
                },
                "**(int **)(param_1)": {
                    "1": "ptr_var3"
                },
                "**(param_1)": {
                    "1": "value10"
                },
                "**param_1": {
                    "1": "ptr_value"
                },
                "*param_1": {
                    "1": "pointer_var_element0"
                },
                "*param_1[0x14]": {
                    "1": "value2"
                },
                "0x12": {
                    "1": "constant10"
                },
                "0x14": {
                    "1": "constant2"
                },
                "0x2a": {
                    "1": "constant5"
                },
                "0x3d": {
                    "1": "var_c"
                },
                "0x3e": {
                    "1": "var_d"
                },
                "0x4": {
                    "1": "constant8"
                },
                "0x8": {
                    "1": "constant9"
                },
                "0xb": {
                    "1": "var_a"
                },
                "0xc": {
                    "1": "var_g"
                },
                "0xc000": {
                    "1": "constant4"
                },
                "0xffff0000": {
                    "1": "constant6"
                },
                "0xfffffbff": {
                    "1": "constant7"
                },
                "4": {
                    "1": "constant3"
                },
                "8": {
                    "1": "var_f"
                },
                "<original_variable_name_1>": {
                    "1": "<new_variable_name_1>"
                },
                "<original_variable_name_2>": {
                    "1": "<new_variable_name_2>"
                },
                "<original_variable_name_n>": {
                    "1": "<new_variable_name_n>"
                },
                "DAT_08002d96": {
                    "1": "quote_char"
                },
                "DAT_08002d97": {
                    "1": "at_char"
                },
                "FUN_080028de": {
                    "1": "update_flag_status",
                    "15": "update_flags",
                    "2": "update_flags_and_values",
                    "3": "update_permissions"
                },
                "PTR_08002d7a": {
                    "1": "pointer2"
                },
                "PTR_08002dce": {
                    "1": "constant_pointer"
                },
                "PTR_08002dda": {
                    "1": "pointer1"
                },
                "flagPointer": {
                    "1": "flag_pointer"
                },
                "param_1": {
                    "1": "param_list",
                    "2": "param",
                    "21": "parameters",
                    "4": "params"
                },
                "param_1[0x14]": {
                    "1": "flag_ptr",
                    "2": "parameters[0x14]"
                },
                "param_1[0xb]": {
                    "1": "flag_value",
                    "2": "parameters[0xb]"
                },
                "param_1[0xb] == (uint *)0x2": {
                    "1": "param11_is_2"
                },
                "param_1[0xc]": {
                    "1": "ptr_to12",
                    "2": "parameters[0xc]"
                },
                "param_1[4]": {
                    "1": "value_ptr",
                    "3": "parameters[4]"
                },
                "puVar1": {
                    "1": "temp_pointer",
                    "2": "current_value",
                    "3": "value_ptr",
                    "4": "value"
                },
                "puVar1[1]": {
                    "1": "pointer_var[1]"
                },
                "puVar1[1] & 0x800": {
                    "1": "value1_check"
                },
                "puVar1[1] & 0x800 == 0": {
                    "1": "value1_check_zero"
                }
            },
            "called": [],
            "calling": [
                "FUN_080033b8"
            ],
            "code": "\nundefined4 update_flags_080028de(uint **parameters)\n\n{\n  uint *pointer_var;\n  \n  pointer_var = parameters[0xb];\n  if ((*(char *)((int)parameters + 0x3d) == '\\\"') &&\n     ((parameters[0x14] != (uint *)0x0 || (*(char *)((int)parameters + 0x3e) != '@')))) {\n    if ((parameters[0x14] == (uint *)0x0) && (parameters[4] == (uint *)0xc000)) {\n      **parameters = **parameters | 0x100;\n      parameters[0x14] = (uint *)((int)parameters[0x14] + 1);\n    }\n    else {\n      if (*(short *)((int)parameters + 0x2a) == 0) {\n        **parameters = **parameters | 0x200;\n      }\n      else if (*(short *)((int)parameters + 0x2a) == 1) {\n        if (pointer_var == (uint *)0xffff0000) {\n          **parameters = **parameters & 0xfffffbff;\n          pointer_var = *parameters;\n          if ((ptr_param1_1 & 0x800) == 0) {\n            *pointer_var = *pointer_var | 0x200;\n          }\n          else {\n            *pointer_var = *pointer_var & 0xfffffbff;\n          }\n        }\n        else if (((pointer_var == (uint *)0x4) || (pointer_var == (uint *)0x8)) ||\n                (parameters[0xc] == (uint *)0x12)) {\n          **parameters = **parameters & 0xfffffbff;\n          **parameters = **parameters | 0x200;\n        }\n        else if (parameters[0xb] == (uint *)0x2) {\n          **parameters = **parameters | 0x400;\n        }\n        else {\n          **parameters = **parameters & 0xfffffbff;\n        }\n      }\n      else if (*(short *)((int)parameters + 0x2a) == 2) {\n        if (parameters[0xb] == (uint *)0x2) {\n          **parameters = **parameters | 0x400;\n        }\n        else {\n          **parameters = **parameters | 0x800;\n          **parameters = **parameters & 0xfffffbff;\n        }\n        pointer_var = *parameters;\n        if ((ptr_param1_1 & 0x800) != 0) {\n          ptr_param1_1 = ptr_param1_1 | 0x1000;\n        }\n      }\n      else {\n        **parameters = **parameters | 0x400;\n        pointer_var = *parameters;\n        if ((ptr_param1_1 & 0x800) != 0) {\n          ptr_param1_1 = ptr_param1_1 | 0x1000;\n        }\n      }\n      parameters[0x14] = (uint *)0x0;\n    }\n  }\n  return 0;\n}\n\n",
            "current_name": "update_flags_080028de",
            "entrypoint": "0x080028de",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080028de": "update_flags_080028de",
                "param_1": "parameters",
                "param_1[0x14]": "parameters[0x14]",
                "param_1[0xb]": "parameters[0xb]",
                "param_1[0xc]": "parameters[0xc]",
                "param_1[4]": "parameters[4]",
                "puVar1": "pointer_var",
                "puVar1[1]": "ptr_param1_1"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002ab8": {
            "additional_data": {
                "(int)(pbVar1 + 1)": {
                    "1": "updated_byte_pointer"
                },
                "(int)param_1 + 0x2a": {
                    "1": "param_array_offset_address"
                },
                "*(short *)((int)param_1 + 0x2a)": {
                    "1": "count",
                    "4": "short_value"
                },
                "*(short *)((int)param_1 + 0x2a) + -1": {
                    "1": "decremented_short_value"
                },
                "*(uint *)(*param_1 + 0x10)": {
                    "1": "pointer_value"
                },
                "*param_1": {
                    "1": "data_array_ptr"
                },
                "FUN_08002ab8": {
                    "1": "update_value_from_byte",
                    "2": "update_data",
                    "4": "update_value"
                },
                "param_1": {
                    "1": "param",
                    "2": "buffer",
                    "3": "input_array",
                    "6": "array",
                    "7": "data"
                },
                "param_1[9]": {
                    "1": "buffer_index"
                },
                "pbVar1": {
                    "1": "byte_data",
                    "16": "byte_pointer",
                    "2": "byte_array",
                    "4": "byte_ptr",
                    "5": "current_byte"
                },
                "pbVar1 + 1": {
                    "1": "next_byte"
                }
            },
            "called": [],
            "calling": [
                "FUN_080033b8"
            ],
            "code": "\nundefined4 process_data_08002ab8(int *data)\n\n{\n  byte *byte_pointer;\n  \n  if (*(short *)((int)data + 0x2a) != 0) {\n    byte_pointer = (byte *)data_buffer;\n    data_buffer = (int)(byte_pointer + 1);\n    *(uint *)(*data + 0x10) = (uint)*byte_pointer;\n    *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n  }\n  return 0;\n}\n\n",
            "current_name": "process_data_08002ab8",
            "entrypoint": "0x08002ab8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002ab8": "process_data_08002ab8",
                "param_1": "data",
                "param_1[9]": "data_buffer",
                "pbVar1": "byte_pointer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002ad8": {
            "additional_data": {
                "(char)*(undefined4 *)(*param_1 + 0x10)": {
                    "1": "byte_value"
                },
                "(int)(puVar1 + 1)": {
                    "1": "updated_param_ptr"
                },
                "(int)param_1 + 0x2a": {
                    "1": "offset"
                },
                "(undefined *)param_1[9]": {
                    "1": "ptr_to_byte"
                },
                "*(short *)((int)data + 0x2a)": {
                    "1": "short_value"
                },
                "*(short *)((int)param_1 + 0x2a)": {
                    "1": "array_length",
                    "2": "counter",
                    "3": "short_value"
                },
                "*(short *)((int)param_1 + 0x2a) + -1": {
                    "1": "updated_count"
                },
                "*(short *)((int)param_1 + 0x2a) - 1": {
                    "1": "updated_array_length"
                },
                "*(undefined4 *)(*data + 0x10)": {
                    "1": "char_value"
                },
                "*(undefined4 *)(*param_1 + 0x10)": {
                    "1": "source_element",
                    "2": "value_to_assign"
                },
                "*param_1": {
                    "1": "param_data"
                },
                "*puVar1": {
                    "1": "assigned_value",
                    "2": "current_value",
                    "3": "updated_value"
                },
                "2a": {
                    "1": "array_length"
                },
                "FUN_08002ad8": {
                    "1": "reverse_and_decrement",
                    "2": "update_array_value",
                    "3": "update_value",
                    "8": "update_data"
                },
                "param_1": {
                    "1": "param_list",
                    "12": "array",
                    "2": "param",
                    "6": "data"
                },
                "param_1[9]": {
                    "1": "pointer_array"
                },
                "puVar1": {
                    "1": "temp_pointer",
                    "2": "ptr_to_value",
                    "5": "ptr"
                },
                "puVar1 + 1": {
                    "1": "incremented_pointer"
                }
            },
            "called": [],
            "calling": [
                "FUN_080033b8"
            ],
            "code": "\nundefined4 update_data_08002ad8(int *array)\n\n{\n  undefined *ptr;\n  \n  if (*(short *)((int)array + 0x2a) != 0) {\n    ptr = (undefined *)array;\n    array = (int)(ptr + 1);\n    *ptr = (char)*(undefined4 *)(*array + 0x10);\n    *(short *)((int)array + 0x2a) = *(short *)((int)array + 0x2a) + -1;\n  }\n  return 0;\n}\n\n",
            "current_name": "update_data_08002ad8",
            "entrypoint": "0x08002ad8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002ad8": "update_data_08002ad8",
                "param_1": "array",
                "param_1[9]": "array",
                "puVar1": "ptr"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002af8": {
            "additional_data": {
                "(*param_1)[1]": {
                    "1": "input_data_value2"
                },
                "(int)param_1 + 0x2a": {
                    "1": "short_offset"
                },
                "(int)param_1 + 0x3d": {
                    "1": "condition_offset"
                },
                "(int)param_1 + 0x3e": {
                    "1": "additional_offset"
                },
                "(short)param_3": {
                    "1": "short_data_size"
                },
                "(uint *)0x0": {
                    "1": "null"
                },
                "*((int)param_1 + 0x3d)": {
                    "1": "char_value"
                },
                "*(char *)((int)param_1 + 0x3d)": {
                    "1": "char_in_buffer",
                    "3": "char_value"
                },
                "*(char *)(param_1 + 0xf)": {
                    "1": "condition2",
                    "2": "flag_value",
                    "3": "char_value2"
                },
                "*(short *)((int)param_1 + 0x2a)": {
                    "1": "short_size",
                    "4": "short_value"
                },
                "*(undefined *)((int)param_1 + 0x3d)": {
                    "1": "char_ptr"
                },
                "*(undefined *)((int)param_1 + 0x3e)": {
                    "1": "char_ptr2"
                },
                "*(undefined *)(param_1 + 0xf)": {
                    "1": "char_value3"
                },
                "*(undefined2 *)(param_1 + 10)": {
                    "1": "pointer_value",
                    "3": "undefined2_value"
                },
                "**(param_1)": {
                    "1": "double_pointer_value"
                },
                "**param_1": {
                    "1": "param1_value"
                },
                "*param_1": {
                    "1": "ptr_value"
                },
                "*puVar2": {
                    "1": "ptr_value_deref"
                },
                "*puVar2 & 1": {
                    "1": "is_flag_set"
                },
                "CMD_PTR_0": {
                    "1": "command_ptr"
                },
                "CMD_PTR_1": {
                    "1": "command_ptr_1"
                },
                "FUN_08002af8": {
                    "1": "parse_expression",
                    "2": "process_parameters",
                    "3": "validate_input",
                    "4": "process_params"
                },
                "param_1": {
                    "1": "input_pointer",
                    "2": "input_struct",
                    "3": "params"
                },
                "param_1 + 0xf": {
                    "1": "param_array_offset"
                },
                "param_1[0x10]": {
                    "1": "placeholder_1"
                },
                "param_1[0xb]": {
                    "1": "pointer3"
                },
                "param_1[9]": {
                    "1": "array_element_value2"
                },
                "param_2": {
                    "1": "param_2_ptr",
                    "2": "param2",
                    "3": "input_data"
                },
                "param_3": {
                    "1": "param2",
                    "2": "input_param2",
                    "4": "data_length",
                    "6": "size"
                },
                "param_4": {
                    "1": "flag_ptr",
                    "2": "result",
                    "3": "output_buffer"
                },
                "path_condition": {
                    "1": "condition"
                },
                "pointer_to_param_1": {
                    "1": "input_data_pointer"
                },
                "pointer_to_param_2": {
                    "1": "data_pointer"
                },
                "puVar2": {
                    "1": "ptr_var",
                    "12": "ptr",
                    "2": "flags",
                    "3": "flag_ptr"
                },
                "uVar1": {
                    "20": "result",
                    "4": "status",
                    "7": "return_value"
                }
            },
            "called": [],
            "calling": [
                "FUN_08004e74"
            ],
            "code": "\nundefined4 process_params_08002af8(uint **input_data,uint *input_data,int size,uint *output_data)\n\n{\n  undefined4 result;\n  uint *ptr;\n  \n  if (*(char *)((int)input_data + 0x3d) == '(') {\n    if (input_data == (uint *)0x0) {\n      result = 1;\n    }\n    else if (size == 0) {\n      result = 1;\n    }\n    else if (*(char *)(input_data + 0xf) == '\\x01') {\n      result = 2;\n    }\n    else {\n      *(undefined *)(input_data + 0xf) = 1;\n      ptr = *input_data;\n      if ((*ptr & 1) == 0) {\n        *ptr = *ptr | 1;\n      }\n      **input_data = **input_data & 0xfffff7ff;\n      *(undefined *)((int)input_data + 0x3d) = 0x29;\n      *(undefined *)((int)input_data + 0x3e) = 0x20;\n      result = 0;\n      array_element_value1 = (uint *)0x0;\n      array_element_value2 = input_data;\n      *(short *)((int)input_data + 0x2a) = short_array_size;\n      array_element_value3 = output_data;\n      *(undefined2 *)(input_data + 10) = *(undefined2 *)((int)input_data + 0x2a);\n      *(undefined *)(input_data + 0xf) = 0;\n      (*input_data)[1] = (*input_data)[1] | 0x700;\n    }\n  }\n  else {\n    result = 2;\n  }\n  return result;\n}\n\n",
            "current_name": "process_params_08002af8",
            "entrypoint": "0x08002af8",
            "imported": false,
            "improved": true,
            "renaming": {
                "(short)param_3": "short_array_size",
                "FUN_08002af8": "process_params_08002af8",
                "param_1": "input_data",
                "param_1[0x10]": "array_element_value1",
                "param_1[0xb]": "array_element_value3",
                "param_1[9]": "array_element_value2",
                "param_2": "input_data",
                "param_3": "size",
                "param_4": "output_data",
                "puVar2": "ptr",
                "uVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002b84": {
            "additional_data": {
                "'\\x01'": {
                    "1": "char_2_constant"
                },
                "(*param_1)[1]": {
                    "1": "array1"
                },
                "(*param_1)[1] |= 0x700": {
                    "1": "bitwise_or_assignment2"
                },
                "(*puVar2 & 1)": {
                    "1": "is_flag_set"
                },
                "(*puVar2 & 1) == 0": {
                    "1": "bitwise_comparison_result"
                },
                "(char *)((int)param_1 + 0x3d)": {
                    "1": "char_ptr_1"
                },
                "(char)0x01": {
                    "1": "char_constant1"
                },
                "(int)param_1 + 0x3d": {
                    "1": "char_1"
                },
                "(param_1 + 10)": {
                    "1": "int_ptr_2"
                },
                "(short)param_3": {
                    "1": "casted_param3"
                },
                "(undefined)1": {
                    "1": "undefined_constant1"
                },
                "*(char *)((int)param_1 + 0x3d)": {
                    "1": "param1_char",
                    "2": "char1",
                    "3": "char_value"
                },
                "*(char *)(param_1 + 0xf)": {
                    "1": "char_2_value",
                    "2": "char2",
                    "3": "char_value2"
                },
                "*(short *)((int)param_1 + 0x2a)": {
                    "1": "short_len",
                    "5": "short_value"
                },
                "*(undefined *)((int)param_1 + 0x3d)": {
                    "1": "param1_char",
                    "2": "char3"
                },
                "*(undefined *)((int)param_1 + 0x3e)": {
                    "1": "undefined_3_value",
                    "2": "char4"
                },
                "*(undefined *)(param_1 + 0xf)": {
                    "1": "undefined_1_value"
                },
                "*(undefined2 *)((int)param_1 + 0x2a)": {
                    "1": "undefined2_value"
                },
                "*(undefined2 *)(param_1 + 10)": {
                    "1": "param_1_10",
                    "3": "undefined2_value"
                },
                "**param_1": {
                    "1": "value1"
                },
                "**param_1 & 0xfffff7ff": {
                    "1": "bitwise_and2"
                },
                "*param_1": {
                    "1": "value1"
                },
                "*puVar2": {
                    "1": "value_at_ptr_var",
                    "2": "ptr_value"
                },
                "*puVar2 & 1": {
                    "1": "bitwise_and1"
                },
                "*puVar2 | 1": {
                    "1": "bitwise_or1"
                },
                "*puVar2 |= 1": {
                    "1": "bitwise_or_assignment"
                },
                "0x0": {
                    "1": "null"
                },
                "0x1": {
                    "1": "true"
                },
                "0x20": {
                    "1": "space"
                },
                "0x2a": {
                    "1": "char_constant2"
                },
                "0x700": {
                    "1": "bitmask2"
                },
                "0xfffff7ff": {
                    "1": "bitmask"
                },
                "FUN_08002b84": {
                    "1": "validate_parameters",
                    "2": "validate_input",
                    "4": "process_params",
                    "7": "process_input"
                },
                "param_1": {
                    "1": "input_pointer",
                    "2": "data",
                    "3": "param_list",
                    "4": "input_data",
                    "6": "param_array"
                },
                "param_1 + 0xf": {
                    "1": "int_ptr_1"
                },
                "param_1[0x10]": {
                    "1": "param1_array10"
                },
                "param_1[0xb]": {
                    "1": "tmp_ptr3"
                },
                "param_1[9]": {
                    "1": "tmp_ptr2"
                },
                "param_2": {
                    "1": "input_ptr",
                    "2": "optional_param",
                    "3": "param2",
                    "4": "data"
                },
                "param_2 == (uint *)0x0": {
                    "1": "ptr1_is_null"
                },
                "param_3": {
                    "1": "len",
                    "2": "param_size",
                    "3": "length",
                    "4": "count",
                    "8": "size"
                },
                "param_3 == 0": {
                    "1": "length_is_zero"
                },
                "param_4": {
                    "1": "result",
                    "2": "param_data",
                    "4": "param4",
                    "5": "output"
                },
                "puVar2": {
                    "1": "ptr_value",
                    "13": "ptr",
                    "2": "pointer",
                    "3": "ptr_var"
                },
                "uVar1": {
                    "1": "status_code",
                    "24": "result",
                    "5": "return_value"
                }
            },
            "called": [],
            "calling": [
                "FUN_08004e74"
            ],
            "code": "\nundefined4 process_input_08002b84(uint **param_array,uint *data,int size,uint *output)\n\n{\n  undefined4 result;\n  uint *ptr;\n  \n  if (*(char *)((int)param_array + 0x3d) == '(') {\n    if (data == (uint *)0x0) {\n      result = 1;\n    }\n    else if (size == 0) {\n      result = 1;\n    }\n    else if (*(char *)(param_array + 0xf) == '\\x01') {\n      result = 2;\n    }\n    else {\n      *(undefined *)(param_array + 0xf) = 1;\n      ptr = *param_array;\n      if ((*ptr & 1) == 0) {\n        *ptr = *ptr | 1;\n      }\n      **param_array = **param_array & 0xfffff7ff;\n      *(undefined *)((int)param_array + 0x3d) = 0x2a;\n      *(undefined *)((int)param_array + 0x3e) = 0x20;\n      result = 0;\n      param1_array10 = (uint *)0x0;\n      param1_array9 = data;\n      *(short *)((int)param_array + 0x2a) = short_param3;\n      param1_array_b = output;\n      *(undefined2 *)(param_array + 10) = *(undefined2 *)((int)param_array + 0x2a);\n      *(undefined *)(param_array + 0xf) = 0;\n      (*param_array)[1] = (*param_array)[1] | 0x700;\n    }\n  }\n  else {\n    result = 2;\n  }\n  return result;\n}\n\n",
            "current_name": "process_input_08002b84",
            "entrypoint": "0x08002b84",
            "imported": false,
            "improved": true,
            "renaming": {
                "(short)param_3": "short_param3",
                "FUN_08002b84": "process_input_08002b84",
                "param_1": "param_array",
                "param_1[0x10]": "param1_array10",
                "param_1[0xb]": "param1_array_b",
                "param_1[9]": "param1_array9",
                "param_2": "data",
                "param_3": "size",
                "param_4": "output",
                "puVar2": "ptr",
                "uVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002c10": {
            "additional_data": {
                "(*param_1)[1]": {
                    "1": "second_value_at_input",
                    "2": "second_element"
                },
                "(*puVar1 & 1)": {
                    "1": "bit_check"
                },
                "(int)param_1 + 0x3d": {
                    "1": "offset"
                },
                "*(char *)((int)data + 0x3d)": {
                    "1": "character"
                },
                "*(char *)((int)param_1 + 0x3d)": {
                    "1": "character_check",
                    "3": "character"
                },
                "*(undefined *)((int)data + 0x3d)": {
                    "1": "modified_character"
                },
                "*(undefined *)((int)param_1 + 0x3d)": {
                    "1": "null_character"
                },
                "**param_1": {
                    "1": "double_param_value"
                },
                "*param_1": {
                    "1": "pointer_to_data_pointer"
                },
                "*puVar1": {
                    "1": "pointer_value"
                },
                "0x300": {
                    "1": "bit_mask2"
                },
                "0x3d": {
                    "1": "offset"
                },
                "0x400": {
                    "1": "bit_mask1"
                },
                "1": {
                    "1": "flag"
                },
                "28": {
                    "1": "bracket_char"
                },
                "<unnamed>:0": {
                    "1": "space_char"
                },
                "<unnamed>:1": {
                    "1": "open_parenthesis"
                },
                "<unnamed>:2": {
                    "1": "bitmask_flag"
                },
                "<unnamed>:3": {
                    "1": "bitmask_flag2"
                },
                "FUN_08002c10": {
                    "1": "update_parameters",
                    "12": "initialize_data",
                    "2": "update_flags_and_values",
                    "3": "initialize_memory"
                },
                "char": {
                    "1": "character"
                },
                "param_1": {
                    "1": "input_array",
                    "2": "parameter",
                    "3": "params",
                    "8": "data_pointer"
                },
                "puVar1": {
                    "1": "current_value",
                    "2": "temp_pointer",
                    "3": "pointer"
                },
                "undefined4": {
                    "1": "status"
                }
            },
            "called": [],
            "calling": [
                "FUN_08004ec4",
                "FUN_08004ef4"
            ],
            "code": "\nstatus initialize_data_08002c10(uint **data_pointer)\n\n{\n  uint *pointer;\n  \n  if (*(character *)((int)data_pointer + 0x3d) != ' ') {\n    return 2;\n  }\n  *(undefined *)((int)data_pointer + 0x3d) = 0x28;\n  pointer = *data_pointer;\n  if ((*pointer & 1) == 0) {\n    *pointer = *pointer | 1;\n  }\n  **data_pointer = **data_pointer | 0x400;\n  (*data_pointer)[1] = (*data_pointer)[1] | 0x300;\n  return 0;\n}\n\n",
            "current_name": "initialize_data_08002c10",
            "entrypoint": "0x08002c10",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002c10": "initialize_data_08002c10",
                "char": "character",
                "param_1": "data_pointer",
                "puVar1": "pointer",
                "undefined4": "status"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002c4e": {
            "called": [],
            "calling": [
                "FUN_08002db2",
                "FUN_08002efc"
            ],
            "code": "\nvoid FUNC_08002c4e(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_08002c4e",
            "entrypoint": "0x08002c4e",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_08002c4e": "FUNC_08002c4e"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_08002c50": {
            "called": [],
            "calling": [
                "FUN_0800306c",
                "FUN_08002f9c"
            ],
            "code": "\nvoid FUNC_08002c50(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_08002c50",
            "entrypoint": "0x08002c50",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_08002c50": "FUNC_08002c50"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_08002c52": {
            "called": [],
            "calling": [
                "FUN_08002c54",
                "FUN_08002d1c"
            ],
            "code": "\nvoid FUNC_08002c52(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_08002c52",
            "entrypoint": "0x08002c52",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_08002c52": "FUNC_08002c52"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_08002c54": {
            "additional_data": {
                "*param_1": {
                    "1": "data"
                },
                "FUNC_08002c52": {
                    "1": "execute_operation",
                    "3": "perform_action"
                },
                "FUN_08002c54": {
                    "1": "process_bytes",
                    "14": "process_data",
                    "2": "update_data",
                    "4": "process_input"
                },
                "cVar1": {
                    "1": "last_character",
                    "15": "character",
                    "9": "char_value"
                },
                "param_1": {
                    "1": "input_data",
                    "14": "data",
                    "2": "param",
                    "3": "input",
                    "4": "input_array"
                },
                "pbVar2": {
                    "1": "byte_data",
                    "11": "byte_pointer",
                    "18": "byte_ptr"
                }
            },
            "called": [
                "FUN_08002c52"
            ],
            "calling": [
                "FUN_080033b8"
            ],
            "code": "\nundefined4 process_data_08002c54(int *data)\n\n{\n  char character;\n  byte *byte_ptr;\n  \n  character = *(char *)((int)data + 0x3d);\n  if (*(short *)((int)data + 0x2a) != 0) {\n    byte_ptr = (byte *)data[9];\n    data[9] = (int)(byte_ptr + 1);\n    *(uint *)(*data + 0x10) = (uint)*byte_ptr;\n    *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n    if ((*(short *)((int)data + 0x2a) == 0) && (character == ')')) {\n      *(uint *)(*data + 4) = *(uint *)(*data + 4) & 0xfffffbff;\n      data[0xc] = 0x21;\n      *(undefined *)((int)data + 0x3d) = 0x28;\n      FUNC_08002c52();\n    }\n    return 0;\n  }\n  return 0;\n}\n\n",
            "current_name": "process_data_08002c54",
            "entrypoint": "0x08002c54",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002c54": "process_data_08002c54",
                "cVar1": "character",
                "param_1": "data",
                "pbVar2": "byte_ptr"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002ca4": {
            "called": [],
            "calling": [
                "FUN_08002ca6",
                "FUN_080032b4"
            ],
            "code": "\nvoid FUNC_08002ca4(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_08002ca4",
            "entrypoint": "0x08002ca4",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_08002ca4": "FUNC_08002ca4"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_08002ca6": {
            "additional_data": {
                "*param_1": {
                    "1": "data"
                },
                "*puVar2": {
                    "1": "ptr_val"
                },
                "FUNC_08002ca4": {
                    "1": "execute_operation",
                    "2": "execute_task",
                    "3": "perform_action",
                    "5": "cleanup"
                },
                "FUN_08002ca6": {
                    "1": "update_character",
                    "15": "process_data",
                    "2": "update_data",
                    "3": "process_input"
                },
                "_param_1": {
                    "1": "another_parameter"
                },
                "cVar1": {
                    "1": "char_at3d",
                    "2": "current_char",
                    "3": "char_var",
                    "6": "character",
                    "8": "char_value"
                },
                "param_1": {
                    "1": "param",
                    "16": "data",
                    "2": "param_array",
                    "4": "input_array"
                },
                "puVar2": {
                    "1": "undefined_ptr",
                    "12": "ptr",
                    "2": "data_ptr",
                    "3": "pointer"
                }
            },
            "called": [
                "FUN_08002ca4"
            ],
            "calling": [
                "FUN_080033b8"
            ],
            "code": "\nundefined4 process_data_08002ca6(int *data)\n\n{\n  char char_value;\n  undefined *ptr;\n  \n  char_value = *(char *)((int)data + 0x3d);\n  if (*(short *)((int)data + 0x2a) != 0) {\n    ptr = (undefined *)data[9];\n    data[9] = (int)(ptr + 1);\n    *ptr = (char)*(undefined4 *)(*data + 0x10);\n    *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n    if ((*(short *)((int)data + 0x2a) == 0) && (char_value == '*')) {\n      *(uint *)(*data + 4) = *(uint *)(*data + 4) & 0xfffffbff;\n      data[0xc] = 0x22;\n      *(undefined *)((int)data + 0x3d) = 0x28;\n      FUNC_08002ca4();\n    }\n  }\n  return 0;\n}\n\n",
            "current_name": "process_data_08002ca6",
            "entrypoint": "0x08002ca6",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002ca6": "process_data_08002ca6",
                "cVar1": "char_value",
                "param_1": "data",
                "puVar2": "ptr"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002cf2": {
            "additional_data": {
                "FUN_08002cf2": {
                    "1": "extract_and_process_data",
                    "2": "execute_function",
                    "20": "process_data",
                    "3": "process_function"
                },
                "FUN_08004e74": {
                    "1": "execute_action",
                    "2": "sub_function"
                },
                "param_1": {
                    "1": "input_data",
                    "14": "data",
                    "2": "input_array",
                    "6": "data_pointer"
                },
                "param_2": {
                    "1": "arg2",
                    "13": "param2",
                    "2": "flag1",
                    "5": "value1"
                },
                "param_3": {
                    "1": "arg2",
                    "13": "param3",
                    "2": "flag2",
                    "5": "value2"
                },
                "param_4": {
                    "1": "value2",
                    "15": "param4",
                    "2": "param_4",
                    "5": "value3"
                },
                "uVar1": {
                    "1": "value_to_pass",
                    "16": "selected_value",
                    "2": "value1",
                    "7": "result"
                },
                "uVar2": {
                    "1": "data_flag",
                    "12": "flag",
                    "2": "value2",
                    "3": "flag_value",
                    "5": "value",
                    "6": "flags"
                }
            },
            "called": [
                "FUN_08004e74"
            ],
            "calling": [
                "FUN_080033b8"
            ],
            "code": "\nundefined4 process_data_08002cf2(int *data,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  undefined2 selected_value;\n  uint flag;\n  \n  flag = *(uint *)(*data + 0x18);\n  if ((flag & 0x80) == 0) {\n    selected_value = *(undefined2 *)(data + 3);\n  }\n  else {\n    selected_value = *(undefined2 *)(data + 6);\n  }\n  FUN_08004e74(data,(*(uint *)(*data + 0x18) & 4) == 0,selected_value,flag,param4);\n  return 0;\n}\n\n",
            "current_name": "process_data_08002cf2",
            "entrypoint": "0x08002cf2",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002cf2": "process_data_08002cf2",
                "param_1": "data",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "selected_value",
                "uVar2": "flag"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002d1c": {
            "additional_data": {
                "(**param_1)": {
                    "1": "double_ptr_value"
                },
                "(*param_1)": {
                    "1": "dereferenced_parameter1"
                },
                "(*param_1)[1]": {
                    "1": "param_1_index_1"
                },
                "(*param_1)[1] & 0xfffff8ff": {
                    "1": "param_1_index_1_changed"
                },
                "(*param_1)[5]": {
                    "1": "param_1_index_5"
                },
                "(char)((int)param_1 + 0x3d)": {
                    "1": "char_value"
                },
                "(int)param_1 + 0x3d": {
                    "1": "char_offset"
                },
                "(uint *)0x0": {
                    "1": "zero"
                },
                "(uint *)0x21": {
                    "1": "error_flag"
                },
                "(uint *)0x4": {
                    "1": "constant_four"
                },
                "(uint *)0x8": {
                    "1": "constant_eight"
                },
                "(uint *)0xffff0000": {
                    "1": "constant_zer_ox_ffff0000"
                },
                "(uint *)0xfffffbff": {
                    "1": "new_value_ptr"
                },
                "(undefined *)((int)param_1 + 0x3d)": {
                    "1": "char_value_ptr"
                },
                "(undefined *)((int)param_1 + 0x3e)": {
                    "1": "second_char_value_ptr"
                },
                "(undefined)0x0": {
                    "1": "null_value_char"
                },
                "(undefined)0x20": {
                    "1": "new_value_char"
                },
                "(undefined)0x21": {
                    "1": "new_value_char2"
                },
                "*(char *)((int)param_1 + 0x3d)": {
                    "1": "char_at_offset_0x3d",
                    "3": "char_value"
                },
                "*(char *)((int)parameter + 0x3d)": {
                    "1": "char_value"
                },
                "*(undefined *)((int)param_1 + 0x3d)": {
                    "1": "undefined_at_param_plus3_d"
                },
                "*(undefined *)((int)param_1 + 0x3e)": {
                    "1": "undefined_at_offset_0x3e"
                },
                "**param_1": {
                    "1": "param_1_value"
                },
                "*param_1": {
                    "1": "double_deref_param"
                },
                "0": {
                    "1": "null_value"
                },
                "0!": {
                    "1": "exclamation"
                },
                "0x0": {
                    "1": "zero"
                },
                "0x20": {
                    "1": "constant_twenty"
                },
                "0x21": {
                    "1": "constant_twenty_one"
                },
                "0xfffff8ff": {
                    "1": "f8ff"
                },
                "0xfffffbff": {
                    "1": "constant_zer_ox_fffffbff"
                },
                "FUNC_08002c52": {
                    "1": "handle_case2",
                    "2": "perform_action2",
                    "3": "perform_action"
                },
                "FUN_08002d1c": {
                    "1": "improve_binary_settings",
                    "10": "process_param",
                    "2": "handle_param",
                    "3": "process_parameters",
                    "4": "process_parameter"
                },
                "FUN_08004ec4": {
                    "1": "initialize_process",
                    "2": "process_condition1"
                },
                "param_1": {
                    "1": "input_data",
                    "12": "param",
                    "2": "parameter",
                    "4": "param_array",
                    "5": "parameters"
                },
                "param_1[0xb]": {
                    "1": "input[11]",
                    "2": "param[11]"
                },
                "param_1[0xc]": {
                    "1": "param_ptr_twelfth",
                    "2": "param[12]"
                }
            },
            "called": [
                "FUN_08004ec4",
                "FUN_08002c52"
            ],
            "calling": [
                "FUN_08003520"
            ],
            "code": "\nundefined4 process_param_08002d1c(uint **param)\n\n{\n  if (((param[11] == (uint *)0x4) || (param[11] == (uint *)0x8)) &&\n     (*(char *)((int)param + 0x3d) == '(')) {\n    param[11] = (uint *)0xffff0000;\n    (*param)[1] = (*param)[1] & 0xfffff8ff;\n    (*param)[5] = 0xfffffbff;\n    **param = **param & 0xfffffbff;\n    param[12] = (uint *)0x0;\n    *(undefined *)((int)param + 0x3d) = 0x20;\n    *(undefined *)((int)param + 0x3e) = 0;\n    FUN_08004ec4();\n  }\n  else if (*(char *)((int)param + 0x3d) == '!') {\n    param[11] = (uint *)0xffff0000;\n    param[12] = (uint *)0x21;\n    *(undefined *)((int)param + 0x3d) = 0x20;\n    *(undefined *)((int)param + 0x3e) = 0;\n    (*param)[1] = (*param)[1] & 0xfffff8ff;\n    (*param)[5] = 0xfffffbff;\n    **param = **param & 0xfffffbff;\n    FUNC_08002c52();\n  }\n  else {\n    (*param)[5] = 0xfffffbff;\n  }\n  return 0;\n}\n\n",
            "current_name": "process_param_08002d1c",
            "entrypoint": "0x08002d1c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002d1c": "process_param_08002d1c",
                "param_1": "param",
                "param_1[0xb]": "param[11]",
                "param_1[0xc]": "param[12]"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002db0": {
            "called": [],
            "calling": [
                "FUN_08002db2",
                "FUN_08002efc"
            ],
            "code": "\nvoid FUNC_08002db0(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_08002db0",
            "entrypoint": "0x08002db0",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_08002db0": "FUNC_08002db0"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_08002db2": {
            "additional_data": {
                "FUNC_08002c4e": {
                    "1": "execute_task2"
                },
                "FUNC_08002db0": {
                    "1": "execute_task1",
                    "2": "handle_exclamation"
                },
                "FUN_08002db2": {
                    "1": "process_input_data",
                    "11": "process_data",
                    "2": "process_function",
                    "5": "process_input"
                },
                "cVar1": {
                    "1": "char1",
                    "14": "char_value",
                    "2": "char_var",
                    "6": "first_char",
                    "7": "character"
                },
                "param_1": {
                    "1": "command_params",
                    "11": "data",
                    "2": "param_array",
                    "3": "param",
                    "5": "parameters"
                },
                "puVar2": {
                    "1": "pointer_variable",
                    "3": "ptr_var",
                    "4": "pointer_var",
                    "5": "pointer",
                    "6": "ptr_value",
                    "8": "pointer_value"
                }
            },
            "called": [
                "FUN_08002db0",
                "FUN_08002c4e"
            ],
            "calling": [
                "FUN_080033b8"
            ],
            "code": "\nundefined4 process_data_08002db2(uint **data)\n\n{\n  char char_value;\n  uint *pointer_value;\n  \n  char_value = *(char *)((int)data + 0x3d);\n  pointer_value = data[0xb];\n  if ((*(short *)(data + 10) == 0) && (char_value == '!')) {\n    if ((pointer_value == (uint *)0x4) || ((pointer_value == (uint *)0x8 || (pointer_value == (uint *)0xffff0000)))) {\n      (*data)[1] = (*data)[1] & 0xfffff8ff;\n      **data = **data | 0x200;\n      data[0xc] = (uint *)0x0;\n      *(undefined *)((int)data + 0x3d) = 0x20;\n      if (*(char *)((int)data + 0x3e) == '@') {\n        *(undefined *)((int)data + 0x3e) = 0;\n        FUNC_08002db0();\n      }\n      else {\n        *(undefined *)((int)data + 0x3e) = 0;\n        FUNC_08002c4e();\n      }\n    }\n    else {\n      (*data)[1] = (*data)[1] & 0xfffff8ff;\n      data[0xc] = (uint *)0x11;\n      *(undefined *)((int)data + 0x3e) = 0;\n      *(undefined *)((int)data + 0x3d) = 0x20;\n      FUNC_08002c4e();\n    }\n  }\n  else if ((char_value == '!') || ((*(char *)((int)data + 0x3e) == '@' && (char_value == '\\\"')))) {\n    if (*(short *)((int)data + 0x2a) == 0) {\n      (*data)[1] = (*data)[1] & 0xfffffbff;\n    }\n    else if (*(char *)((int)data + 0x3e) == '@') {\n      if (data[0x14] == (uint *)0x0) {\n        if (data[0x13] == (uint *)0x1) {\n          (*data)[4] = (uint)data[0x12] & 0xff;\n          data[0x14] = (uint *)((int)data[0x14] + 2);\n        }\n        else {\n          (*data)[4] = (uint)((int)data[0x12] << 0x10) >> 0x18;\n          data[0x14] = (uint *)((int)data[0x14] + 1);\n        }\n      }\n      else if (data[0x14] == (uint *)0x1) {\n        (*data)[4] = (uint)data[0x12] & 0xff;\n        data[0x14] = (uint *)((int)data[0x14] + 1);\n      }\n      else if (data[0x14] == (uint *)0x2) {\n        if (*(char *)((int)data + 0x3d) == '\\\"') {\n          **data = **data | 0x100;\n        }\n        else if (*(char *)((int)data + 0x3d) == '!') {\n          pointer_value = data[9];\n          data[9] = (uint *)((int)pointer_value + 1);\n          (*data)[4] = (uint)*(byte *)pointer_value;\n          *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n        }\n      }\n    }\n    else {\n      pointer_value = data[9];\n      data[9] = (uint *)((int)pointer_value + 1);\n      (*data)[4] = (uint)*(byte *)pointer_value;\n      *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n    }\n  }\n  return 0;\n}\n\n",
            "current_name": "process_data_08002db2",
            "entrypoint": "0x08002db2",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002db2": "process_data_08002db2",
                "cVar1": "char_value",
                "param_1": "data",
                "puVar2": "pointer_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002efc": {
            "additional_data": {
                "(*(byte *)puVar1)": {
                    "1": "byte_value"
                },
                "(*(char *)((int)param_1 + 0x3d))": {
                    "1": "char_value"
                },
                "(*(char *)((int)param_1 + 0x3e))": {
                    "1": "char_value2"
                },
                "(*(short *)((int)param_1 + 0x2a))": {
                    "1": "short_value"
                },
                "(*param_1)[1]": {
                    "1": "first_element_of_param1"
                },
                "(*param_1)[4]": {
                    "1": "input_data_ptr3"
                },
                "(int)param_1 + 0x2a": {
                    "1": "param2_value"
                },
                "(int)param_1 + 0x3d": {
                    "1": "param1_value"
                },
                "(uint *)((int)puVar1 + 1)": {
                    "1": "updated_param_b"
                },
                "(uint *)0x4": {
                    "1": "ptr1"
                },
                "(uint *)0x8": {
                    "1": "ptr2"
                },
                "(uint *)0xffff0000": {
                    "1": "ptr3"
                },
                "(uint)*(byte *)puVar1": {
                    "1": "param_b_byte"
                },
                "*(byte *)puVar1": {
                    "1": "byte_value"
                },
                "*(char *)((int)param_1 + 0x3d)": {
                    "1": "char1"
                },
                "*(char *)((int)param_1 + 0x3e)": {
                    "1": "second_char"
                },
                "*(short *)((int)param_1 + 0x2a)": {
                    "1": "short_check"
                },
                "*(short *)((int)param_1 + 0x2a) + -1": {
                    "1": "updated_short1"
                },
                "*(undefined *)((int)param_1 + 0x3d)": {
                    "1": "char_value1"
                },
                "*(undefined *)((int)param_1 + 0x3e)": {
                    "1": "char_value2"
                },
                "**param_1": {
                    "1": "double_deref_param1"
                },
                "*param_1": {
                    "1": "input_data"
                },
                "*param_1)[1]": {
                    "1": "input_data_ptr1"
                },
                "FUNC_08002c4e": {
                    "1": "process_function2",
                    "2": "handle_other_symbol",
                    "3": "perform_action2"
                },
                "FUNC_08002db0": {
                    "1": "execute_function1",
                    "2": "handle_special_case",
                    "3": "handle_case1"
                },
                "FUN_08002efc": {
                    "1": "handle_params",
                    "11": "process_param",
                    "2": "process_function",
                    "3": "process_data",
                    "4": "process_input"
                },
                "param_1": {
                    "1": "function_params",
                    "2": "input_data",
                    "3": "param_list",
                    "4": "param",
                    "5": "parameters"
                },
                "param_1[0xb]": {
                    "1": "temp_ptr_data"
                },
                "param_1[0xc]": {
                    "1": "output_ptr"
                },
                "param_1[9]": {
                    "1": "param1_element9"
                },
                "puVar1": {
                    "1": "value_pointer",
                    "2": "ptr_value",
                    "3": "value_ptr",
                    "4": "temp_ptr",
                    "6": "value"
                }
            },
            "called": [
                "FUN_08002db0",
                "FUN_08002c4e"
            ],
            "calling": [
                "FUN_080033b8"
            ],
            "code": "\nundefined4 process_param_08002efc(uint **params)\n\n{\n  uint *value;\n  \n  value = temp_ptr_data;\n  if (*(char *)((int)params + 0x3d) == '!') {\n    if (*(short *)((int)params + 0x2a) == 0) {\n      if (((value == (uint *)0x4) || (value == (uint *)0x8)) || (value == (uint *)0xffff0000)) {\n        (*params)[1] = (*params)[1] & 0xfffff8ff;\n        **params = **params | 0x200;\n        param1_element12 = (uint *)0x0;\n        *(undefined *)((int)params + 0x3d) = 0x20;\n        if (*(char *)((int)params + 0x3e) == '@') {\n          *(undefined *)((int)params + 0x3e) = 0;\n          FUNC_08002db0();\n        }\n        else {\n          *(undefined *)((int)params + 0x3e) = 0;\n          FUNC_08002c4e();\n        }\n      }\n      else {\n        (*params)[1] = (*params)[1] & 0xfffff8ff;\n        param1_element12 = (uint *)0x11;\n        *(undefined *)((int)params + 0x3e) = 0;\n        *(undefined *)((int)params + 0x3d) = 0x20;\n        FUNC_08002c4e();\n      }\n    }\n    else {\n      value = param1_element9;\n      param1_element9 = (uint *)((int)value + 1);\n      (*params)[4] = (uint)*(byte *)value;\n      *(short *)((int)params + 0x2a) = *(short *)((int)params + 0x2a) + -1;\n    }\n  }\n  return 0;\n}\n\n",
            "current_name": "process_param_08002efc",
            "entrypoint": "0x08002efc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002efc": "process_param_08002efc",
                "param_1": "params",
                "param_1[0xb]": "temp_ptr_data",
                "param_1[0xc]": "param1_element12",
                "param_1[9]": "param1_element9",
                "puVar1": "value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002f9a": {
            "called": [],
            "calling": [
                "FUN_0800306c",
                "FUN_08002f9c"
            ],
            "code": "\nvoid FUNC_08002f9a(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_08002f9a",
            "entrypoint": "0x08002f9a",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_08002f9a": "FUNC_08002f9a"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_08002f9c": {
            "additional_data": {
                "FUNC_08002c50": {
                    "1": "handle_case2",
                    "2": "handle_default_case"
                },
                "FUNC_08002f9a": {
                    "1": "execute_if_at_symbol",
                    "2": "handle_special_case",
                    "4": "handle_at_symbol"
                },
                "FUN_08002f9c": {
                    "1": "parse_string",
                    "2": "update_flag",
                    "3": "process_param",
                    "4": "process_parameter"
                },
                "param_1": {
                    "1": "param",
                    "2": "input_data",
                    "3": "params",
                    "4": "data",
                    "5": "parameter",
                    "6": "parameters"
                },
                "puVar1": {
                    "1": "next_char",
                    "11": "temp_ptr",
                    "2": "temp_var1",
                    "6": "temp_pointer"
                }
            },
            "called": [
                "FUN_08002f9a",
                "FUN_08002c50"
            ],
            "calling": [
                "FUN_080033b8"
            ],
            "code": "\nundefined4 process_parameter_08002f9c(uint **parameters)\n\n{\n  uint *temp_ptr;\n  \n  if (*(char *)((int)parameters + 0x3d) == '\\\"') {\n    if (*(ushort *)((int)parameters + 0x2a) < 4) {\n      if (*(ushort *)((int)parameters + 0x2a) - 2 < 2) {\n        if (parameters[0xb] == (uint *)0x2) {\n          **parameters = **parameters | 0x400;\n        }\n        else {\n          **parameters = **parameters & 0xfffffbff;\n          **parameters = **parameters | 0x800;\n        }\n        (*parameters)[1] = (*parameters)[1] & 0xfffffbff;\n      }\n      else {\n        if (parameters[0xb] == (uint *)0x2) {\n          **parameters = **parameters | 0x400;\n        }\n        else {\n          **parameters = **parameters & 0xfffffbff;\n        }\n        (*parameters)[1] = (*parameters)[1] & 0xfffff8ff;\n        temp_ptr = parameters[9];\n        parameters[9] = (uint *)((int)temp_ptr + 1);\n        *(char *)temp_ptr = (char)(*parameters)[4];\n        *(short *)((int)parameters + 0x2a) = *(short *)((int)parameters + 0x2a) + -1;\n        *(undefined *)((int)parameters + 0x3d) = 0x20;\n        parameters[0xc] = (uint *)0x0;\n        if (*(char *)((int)parameters + 0x3e) == '@') {\n          *(undefined *)((int)parameters + 0x3e) = 0;\n          FUNC_08002f9a();\n        }\n        else {\n          *(undefined *)((int)parameters + 0x3e) = 0;\n          FUNC_08002c50();\n        }\n      }\n    }\n    else {\n      temp_ptr = parameters[9];\n      parameters[9] = (uint *)((int)temp_ptr + 1);\n      *(char *)temp_ptr = (char)(*parameters)[4];\n      *(short *)((int)parameters + 0x2a) = *(short *)((int)parameters + 0x2a) + -1;\n    }\n  }\n  return 0;\n}\n\n",
            "current_name": "process_parameter_08002f9c",
            "entrypoint": "0x08002f9c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002f9c": "process_parameter_08002f9c",
                "param_1": "parameters",
                "puVar1": "temp_ptr"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800306c": {
            "additional_data": {
                "(char)(*param_1)[4]": {
                    "1": "fourth_element_char_value"
                },
                "(int)param_1": {
                    "1": "param_pointer"
                },
                "(int)param_1 + 0x2a": {
                    "1": "param_pointer_plus0x2a"
                },
                "(int)param_1 + 0x3d": {
                    "1": "param_pointer_plus0x3d"
                },
                "(int)puVar1": {
                    "1": "value_pointer"
                },
                "(int)puVar1 + 1": {
                    "1": "value_pointer_plus1"
                },
                "*(char *)((int)param_1 + 0x3e)": {
                    "1": "char_value_plus0x3e"
                },
                "*(char *)puVar1": {
                    "1": "char_value"
                },
                "*(short *)((int)param_1 + 0x2a)": {
                    "1": "data_length"
                },
                "*(undefined *)((int)param_1 + 0x3d)": {
                    "1": "undefined_value"
                },
                "*(undefined *)((int)param_1 + 0x3e)": {
                    "1": "flag"
                },
                "**param_1": {
                    "1": "dereferenced_pointer"
                },
                "*param_1": {
                    "1": "pointer_value"
                },
                "DAT_080033ad": {
                    "1": "character_2"
                },
                "FUNC_08002c50": {
                    "1": "handle_case2",
                    "2": "perform_default_action",
                    "3": "handle_default",
                    "4": "handle_other"
                },
                "FUNC_08002f9a": {
                    "1": "handle_at_character",
                    "2": "handle_at_sign",
                    "3": "handle_at",
                    "9": "handle_at_symbol"
                },
                "FUN_0800306c": {
                    "1": "perform_operation",
                    "18": "process_data",
                    "2": "process_input",
                    "4": "process_param"
                },
                "param_1": {
                    "1": "parameters",
                    "16": "data",
                    "2": "param",
                    "3": "input_data"
                },
                "param_1[0xc]": {
                    "1": "twelfth_element"
                },
                "param_1[9]": {
                    "1": "list_element"
                },
                "puVar1": {
                    "1": "temp_pointer",
                    "17": "value",
                    "2": "current_value",
                    "4": "ptr"
                }
            },
            "called": [
                "FUN_08002f9a",
                "FUN_08002c50"
            ],
            "calling": [
                "FUN_080033b8"
            ],
            "code": "\nundefined4 process_data_0800306c(uint **data)\n\n{\n  uint *value;\n  \n  value = data[0xb];\n  if (*(short *)(param_pointer + 0x2a) == 3) {\n    if (((value == (uint *)0x4) || (value == (uint *)0x8)) || (value == (uint *)0xffff0000)) {\n      **data = **data & 0xfffffbff;\n    }\n    value = list_element;\n    list_element = (uint *)(value_pointer + 1);\n    *(char *)value = (char)(*data)[4];\n    *(short *)(param_pointer + 0x2a) = *(short *)(param_pointer + 0x2a) + -1;\n  }\n  else if (*(short *)(param_pointer + 0x2a) == 2) {\n    if (((value == (uint *)0x4) || (value == (uint *)0x8)) || (value == (uint *)0xffff0000)) {\n      (*data)[1] = (*data)[1] & 0xfffffcff;\n      **data = **data | 0x200;\n    }\n    else {\n      if (value == (uint *)0x2) {\n        **data = **data | 0x400;\n      }\n      else {\n        **data = **data & 0xfffffbff;\n      }\n      (*data)[1] = (*data)[1] & 0xfffffcff;\n    }\n    value = list_element;\n    list_element = (uint *)(value_pointer + 1);\n    *(char *)value = (char)(*data)[4];\n    *(short *)(param_pointer + 0x2a) = *(short *)(param_pointer + 0x2a) + -1;\n    value = list_element;\n    list_element = (uint *)(value_pointer + 1);\n    *(char *)value = (char)(*data)[4];\n    *(short *)(param_pointer + 0x2a) = *(short *)(param_pointer + 0x2a) + -1;\n    *(undefined *)(param_pointer + 0x3d) = 0x20;\n    twelfth_element = (uint *)0x0;\n    if (*(char *)(param_pointer + 0x3e) == '@') {\n      *(undefined *)(param_pointer + 0x3e) = 0;\n      FUNC_08002f9a();\n    }\n    else {\n      *(undefined *)(param_pointer + 0x3e) = 0;\n      FUNC_08002c50();\n    }\n  }\n  else {\n    value = list_element;\n    list_element = (uint *)(value_pointer + 1);\n    *(char *)value = (char)(*data)[4];\n    *(short *)(param_pointer + 0x2a) = *(short *)(param_pointer + 0x2a) + -1;\n  }\n  return 0;\n}\n\n",
            "current_name": "process_data_0800306c",
            "entrypoint": "0x0800306c",
            "imported": false,
            "improved": true,
            "renaming": {
                "(int)param_1": "param_pointer",
                "(int)puVar1": "value_pointer",
                "FUN_0800306c": "process_data_0800306c",
                "param_1": "data",
                "param_1[0xc]": "twelfth_element",
                "param_1[9]": "list_element",
                "puVar1": "value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800316a": {
            "called": [],
            "calling": [
                "FUN_0800316c"
            ],
            "code": "\nvoid FUNC_0800316a(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_0800316a",
            "entrypoint": "0x0800316a",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_0800316a": "FUNC_0800316a"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_0800316c": {
            "additional_data": {
                "FUNC_0800316a": {
                    "1": "another_function"
                },
                "FUN_0800258c": {
                    "1": "helper_function"
                },
                "FUN_0800316c": {
                    "1": "process_function",
                    "2": "update_parameter",
                    "8": "process_data"
                },
                "FUN_08004ec4": {
                    "1": "process_data3"
                },
                "FUN_08004ef4": {
                    "1": "process_data2"
                },
                "LAB_080035fc_1": {
                    "2": "label_1"
                },
                "iVar1": {
                    "1": "status",
                    "16": "result",
                    "4": "return_value",
                    "7": "index"
                },
                "param_1": {
                    "1": "arguments",
                    "2": "param",
                    "4": "input",
                    "6": "parameters",
                    "7": "data"
                },
                "puVar2": {
                    "1": "pointer_variable1",
                    "2": "temp_var1",
                    "4": "ptr",
                    "5": "ptr2"
                },
                "puVar3": {
                    "1": "pointer_var3",
                    "2": "pointer_var2",
                    "3": "temp_var2",
                    "4": "ptr2",
                    "5": "ptr3"
                }
            },
            "called": [
                "FUN_08004ec4",
                "FUN_0800258c",
                "FUN_0800316a",
                "FUN_08004ef4"
            ],
            "calling": [
                "FUN_08003520",
                "FUN_080032b4"
            ],
            "code": "\nvoid process_data_0800316c(uint **data)\n\n{\n  int result;\n  uint *temp_ptr;\n  uint *ptr3;\n  \n  if (*(byte *)((int)data + 0x3d) - 0x29 < 2) {\n    data[0xc] = (uint *)0x0;\n    *(undefined *)((int)data + 0x3d) = 0x28;\n  }\n  else {\n    if ((*(char *)((int)data + 0x3d) != '`') && (((*data)[1] & 0x800) == 0)) {\n      *(undefined *)((int)data + 0x3d) = 0x20;\n    }\n    data[0xc] = (uint *)0x0;\n    *(undefined *)((int)data + 0x3e) = 0;\n  }\n  **data = **data & 0xfffff7ff;\n  ptr3 = *data;\n  if ((ptr3[1] & 0x800) == 0) {\n    if (*(char *)((int)data + 0x3d) == '`') {\n      *(undefined *)((int)data + 0x3d) = 0x20;\n      data[0x10] = (uint *)0x0;\n      if ((ptr3[5] & 0x40) != 0) {\n        temp_ptr = data[9];\n        data[9] = (uint *)((int)temp_ptr + 1);\n        *(char *)temp_ptr = (char)ptr3[4];\n      }\n      **data = **data & 0xfffffffe;\n      FUNC_0800316a(data);\n    }\n    else {\n      if ((ptr3[5] & 0x40) != 0) {\n        temp_ptr = data[9];\n        data[9] = (uint *)((int)temp_ptr + 1);\n        *(char *)temp_ptr = (char)ptr3[4];\n      }\n      FUN_08004ef4(data);\n    }\n  }\n  else {\n    ptr3[1] = ptr3[1] & 0xfffff7ff;\n    if (*(char *)((int)data[0xd] + 0x21) == '\\x01') {\n      data[0xe][0xd] = (uint)&label_1;\n      result = FUN_0800258c(data[0xe]);\n      if (result != 0) {\n        if (((*data)[5] & 0x40) != 0) {\n          ptr3 = data[9];\n          data[9] = (uint *)((int)ptr3 + 1);\n          *(char *)ptr3 = (char)(*data)[4];\n        }\n        **data = **data & 0xfffffffe;\n        *(undefined *)((int)data + 0x3d) = 0x20;\n        (*(code *)data[0xe][0xd])();\n      }\n    }\n    else {\n      data[0xd][0xd] = (uint)&label_1;\n      result = FUN_0800258c(data[0xd]);\n      if (result != 0) {\n        **data = **data & 0xfffffffe;\n        *(undefined *)((int)data + 0x3d) = 0x20;\n        (*(code *)data[0xd][0xd])();\n      }\n    }\n  }\n  if ((*(char *)((int)data + 0x3d) == '(') && (((uint)data[0x10] & 4) != 0)) {\n    data[0xb] = (uint *)0xffff0000;\n    data[0xc] = (uint *)0x0;\n    *(undefined *)((int)data + 0x3d) = 0x20;\n    *(undefined *)((int)data + 0x3e) = 0;\n    FUN_08004ec4(data);\n  }\n  return;\n}\n\n",
            "current_name": "process_data_0800316c",
            "entrypoint": "0x0800316c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800316c": "process_data_0800316c",
                "LAB_080035fc_1": "label_1",
                "iVar1": "result",
                "param_1": "data",
                "puVar2": "temp_ptr",
                "puVar3": "ptr3"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080032b4": {
            "additional_data": {
                "*param_1": {
                    "1": "data"
                },
                "FUNC_08002ca4": {
                    "1": "execute_function2"
                },
                "FUN_0800316c": {
                    "1": "perform_cleanup"
                },
                "FUN_080032b4": {
                    "1": "update_permissions",
                    "2": "process_function",
                    "3": "process_param",
                    "7": "process_parameter"
                },
                "FUN_08004ec4": {
                    "1": "execute_function1"
                },
                "cVar1": {
                    "1": "char",
                    "12": "char_value",
                    "4": "char_var",
                    "8": "character"
                },
                "param_1": {
                    "1": "configuration",
                    "2": "input",
                    "5": "param",
                    "6": "parameter"
                },
                "puVar2": {
                    "1": "pointer_var_1",
                    "2": "pointer_var2",
                    "3": "ptr1",
                    "4": "ptr_var1",
                    "5": "pointer1"
                },
                "puVar3": {
                    "1": "var2",
                    "2": "pointer_var3",
                    "3": "pointer_var2",
                    "4": "ptr2",
                    "5": "pointer2"
                }
            },
            "called": [
                "FUN_0800316c",
                "FUN_08004ec4",
                "FUN_08002ca4"
            ],
            "calling": [
                "FUN_080033b8"
            ],
            "code": "\nundefined4 process_parameter_080032b4(uint **parameter)\n\n{\n  char char_value;\n  uint *pointer1;\n  uint *pointer2;\n  \n  char_value = *(char *)((int)parameter + 0x3d);\n  (*parameter)[1] = (*parameter)[1] & 0xfffff8ff;\n  **parameter = **parameter | 1;\n  **parameter = **parameter & 0xfffffbff;\n  pointer1 = *parameter;\n  if ((pointer1[1] & 0x800) != 0) {\n    if ((*(char *)((int)parameter + 0x3d) == '\\\"') || (*(char *)((int)parameter + 0x3d) == '*')) {\n      *(short *)((int)parameter + 0x2a) = (short)*(undefined4 *)(*parameter[0xe] + 4);\n    }\n    else {\n      *(short *)((int)parameter + 0x2a) = (short)*(undefined4 *)(*parameter[0xd] + 4);\n    }\n  }\n  if (*(short *)((int)parameter + 0x2a) != 0) {\n    if ((pointer1[5] & 4) != 0) {\n      pointer2 = parameter[9];\n      parameter[9] = (uint *)((int)pointer2 + 1);\n      *(char *)pointer2 = (char)pointer1[4];\n      *(short *)((int)parameter + 0x2a) = *(short *)((int)parameter + 0x2a) + -1;\n    }\n    if (((*parameter)[5] & 0x40) != 0) {\n      pointer1 = parameter[9];\n      parameter[9] = (uint *)((int)pointer1 + 1);\n      *(char *)pointer1 = (char)(*parameter)[4];\n      *(short *)((int)parameter + 0x2a) = *(short *)((int)parameter + 0x2a) + -1;\n    }\n    parameter[0x10] = (uint *)((uint)parameter[0x10] | 4);\n  }\n  if (parameter[0x10] == (uint *)0x0) {\n    if (((char_value == '(') || (char_value == '*')) || (char_value == ')')) {\n      parameter[0xb] = (uint *)0xffff0000;\n      parameter[0xc] = (uint *)0x0;\n      *(undefined *)((int)parameter + 0x3d) = 0x20;\n      *(undefined *)((int)parameter + 0x3e) = 0;\n      FUN_08004ec4();\n    }\n    else if ((parameter[0xc] == (uint *)0x22) || (char_value == '\\\"')) {\n      parameter[0xc] = (uint *)0x0;\n      *(undefined *)((int)parameter + 0x3d) = 0x20;\n      *(undefined *)((int)parameter + 0x3e) = 0;\n      FUNC_08002ca4();\n    }\n  }\n  else {\n    FUN_0800316c();\n  }\n  return 0;\n}\n\n",
            "current_name": "process_parameter_080032b4",
            "entrypoint": "0x080032b4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080032b4": "process_parameter_080032b4",
                "cVar1": "char_value",
                "param_1": "parameter",
                "puVar2": "pointer1",
                "puVar3": "pointer2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080033b8": {
            "additional_data": {
                "*param_1": {
                    "1": "data"
                },
                "FUN_08002848": {
                    "1": "handle_case2"
                },
                "FUN_080028d2": {
                    "1": "handle_case4"
                },
                "FUN_080028de": {
                    "1": "handle_case8"
                },
                "FUN_08002ab8": {
                    "1": "handle_case9"
                },
                "FUN_08002ad8": {
                    "1": "handle_case10"
                },
                "FUN_08002c54": {
                    "1": "handle_case5"
                },
                "FUN_08002ca6": {
                    "1": "handle_case3"
                },
                "FUN_08002cf2": {
                    "1": "reverse_data"
                },
                "FUN_08002db2": {
                    "1": "handle_case6"
                },
                "FUN_08002efc": {
                    "1": "handle_case11"
                },
                "FUN_08002f9c": {
                    "1": "handle_case7"
                },
                "FUN_0800306c": {
                    "1": "handle_case1"
                },
                "FUN_080032b4": {
                    "1": "handle_case12"
                },
                "FUN_080033b8": {
                    "1": "process_flags",
                    "2": "execute_operation",
                    "20": "process_data"
                },
                "iVar1": {
                    "1": "operation_address",
                    "2": "ptr_data",
                    "3": "data_value",
                    "4": "ptr",
                    "5": "param_value",
                    "8": "value"
                },
                "param_1": {
                    "1": "param",
                    "14": "data",
                    "2": "data_pointer",
                    "3": "input_data"
                },
                "uVar2": {
                    "1": "flag_value1",
                    "13": "flag1",
                    "2": "flags1",
                    "7": "value1"
                },
                "uVar3": {
                    "1": "second_flag",
                    "13": "flag2",
                    "2": "var2",
                    "7": "value2"
                },
                "uVar4": {
                    "1": "value_c",
                    "13": "flag3",
                    "2": "flags3",
                    "7": "value3"
                }
            },
            "called": [
                "FUN_0800306c",
                "FUN_08002848",
                "FUN_08002ca6",
                "FUN_080028d2",
                "FUN_08002c54",
                "FUN_08002db2",
                "FUN_08002f9c",
                "FUN_080028de",
                "FUN_08002ab8",
                "FUN_08002ad8",
                "FUN_08002efc",
                "FUN_080032b4",
                "FUN_08002cf2"
            ],
            "calling": [],
            "code": "\nvoid process_data_080033b8(int *data)\n\n{\n  int value;\n  uint flag1;\n  uint flag2;\n  uint flag3;\n  \n  value = *data;\n  flag3 = *(uint *)(value + 0x18);\n  flag1 = *(uint *)(value + 0x14);\n  flag2 = *(uint *)(value + 4);\n  if ((*(char *)((int)data + 0x3e) == '\\x10') || (*(char *)((int)data + 0x3e) == '@')) {\n    if (((flag1 & 0x10001) == 0) || ((flag2 & 0x200) == 0)) {\n      if (((flag1 & 0x10008) == 0) || ((flag2 & 0x200) == 0)) {\n        if (((flag1 & 0x10002) != 0) && ((flag2 & 0x200) != 0)) {\n          FUN_080028de(data);\n        }\n      }\n      else {\n        FUN_080028d2(data);\n      }\n    }\n    else {\n      FUN_08002848(data);\n    }\n    if ((flag3 & 0x100004) == 0) {\n      if ((((flag1 & 0x10040) != 0) && ((flag2 & 0x400) != 0)) && ((flag1 & 0x10004) == 0)) {\n        FUN_08002f9c(data);\n        return;\n      }\n      if (((flag1 & 0x10004) != 0) && ((flag2 & 0x200) != 0)) {\n        FUN_0800306c(data);\n        return;\n      }\n    }\n    else {\n      if ((((flag1 & 0x10080) != 0) && ((flag2 & 0x400) != 0)) && ((flag1 & 0x10004) == 0)) {\n        FUN_08002db2(data);\n        return;\n      }\n      if (((flag1 & 0x10004) != 0) && ((flag2 & 0x200) != 0)) {\n        FUN_08002efc(data);\n        return;\n      }\n    }\n  }\n  else {\n    if (((flag1 & 0x10002) != 0) && ((flag2 & 0x200) != 0)) {\n      FUN_08002cf2();\n      return;\n    }\n    if (((flag1 & 0x10010) != 0) && ((flag2 & 0x200) != 0)) {\n      FUN_080032b4(data);\n      return;\n    }\n    if ((flag3 & 0x100004) == 0) {\n      if ((((flag1 & 0x10040) != 0) && ((flag2 & 0x400) != 0)) && ((flag1 & 0x10004) == 0)) {\n        FUN_08002ca6(data);\n        return;\n      }\n      if (((flag1 & 0x10004) != 0) && ((flag2 & 0x200) != 0)) {\n        FUN_08002ad8(data);\n      }\n    }\n    else {\n      if ((((flag1 & 0x10080) != 0) && ((flag2 & 0x400) != 0)) && ((flag1 & 0x10004) == 0)) {\n        FUN_08002c54(data);\n        return;\n      }\n      if (((flag1 & 0x10004) != 0) && ((flag2 & 0x200) != 0)) {\n        FUN_08002ab8(data);\n        return;\n      }\n    }\n  }\n  return;\n}\n\n",
            "current_name": "process_data_080033b8",
            "entrypoint": "0x080033b8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080033b8": "process_data_080033b8",
                "iVar1": "value",
                "param_1": "data",
                "uVar2": "flag1",
                "uVar3": "flag2",
                "uVar4": "flag3"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003520": {
            "additional_data": {
                "FUN_08002d1c": {
                    "1": "perform_operation"
                },
                "FUN_0800316c": {
                    "1": "execute_action",
                    "3": "perform_action"
                },
                "FUN_08003520": {
                    "1": "update_status_and_flags",
                    "2": "update_flags_and_values",
                    "3": "process_data",
                    "4": "process_flags",
                    "6": "update_flags"
                },
                "cVar1": {
                    "1": "check_char",
                    "14": "character",
                    "2": "character_var",
                    "3": "char1",
                    "5": "char_var",
                    "6": "char_value"
                },
                "param_1": {
                    "1": "ptr_array",
                    "2": "input_array",
                    "3": "flags",
                    "4": "data",
                    "5": "parameters"
                },
                "puVar2": {
                    "1": "pointer_value",
                    "2": "param_ptr",
                    "3": "pointer_var",
                    "6": "pointer",
                    "8": "ptr"
                },
                "uVar3": {
                    "1": "flag_value",
                    "16": "value1",
                    "2": "flag_var1",
                    "4": "flag1"
                },
                "uVar4": {
                    "1": "variable2",
                    "16": "value2",
                    "2": "flag_var2",
                    "4": "flag2"
                }
            },
            "called": [
                "FUN_0800316c",
                "FUN_08002d1c"
            ],
            "calling": [],
            "code": "\nvoid update_flags_08003520(uint **parameters)\n\n{\n  char character;\n  uint *ptr;\n  uint value1;\n  uint value2;\n  \n  ptr = *parameters;\n  value1 = ptr[5];\n  value2 = ptr[1];\n  if (((value1 & 0x10100) != 0) && ((value2 & 0x100) != 0)) {\n    parameters[0x10] = (uint *)((uint)parameters[0x10] | 1);\n    ptr[5] = 0xfffffeff;\n    **parameters = **parameters | 0x8000;\n  }\n  if (((value1 & 0x10200) != 0) && ((value2 & 0x100) != 0)) {\n    parameters[0x10] = (uint *)((uint)parameters[0x10] | 2);\n    (*parameters)[5] = 0xfffffdff;\n  }\n  if (((value1 & 0x10400) != 0) && ((value2 & 0x100) != 0)) {\n    character = *(char *)((int)parameters + 0x3d);\n    if (((*(char *)((int)parameters + 0x3e) == ' ') && (*(short *)((int)parameters + 0x2a) == 0)) &&\n       (((character == '!' || (character == ')')) || ((character == '(' && (parameters[0xc] == (uint *)0x21)))))) {\n      FUN_08002d1c(parameters);\n    }\n    else {\n      parameters[0x10] = (uint *)((uint)parameters[0x10] | 4);\n      if (*(char *)((int)parameters + 0x3e) == '\\x10') {\n        **parameters = **parameters | 0x200;\n      }\n      (*parameters)[5] = 0xfffffbff;\n    }\n  }\n  if (((value1 & 0x10800) != 0) && ((value2 & 0x100) != 0)) {\n    parameters[0x10] = (uint *)((uint)parameters[0x10] | 8);\n    (*parameters)[5] = 0xfffff7ff;\n  }\n  if (parameters[0x10] != (uint *)0x0) {\n    FUN_0800316c(parameters);\n  }\n  return;\n}\n\n",
            "current_name": "update_flags_08003520",
            "entrypoint": "0x08003520",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08003520": "update_flags_08003520",
                "cVar1": "character",
                "param_1": "parameters",
                "puVar2": "ptr",
                "uVar3": "value1",
                "uVar4": "value2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800365c": {
            "additional_data": {
                "FUN_0800365c": {
                    "1": "calculate_time_delay",
                    "16": "calculate_delay",
                    "2": "count_down",
                    "5": "delay_function",
                    "6": "calculate_iterations"
                },
                "bVar1": {
                    "1": "is_delay_done",
                    "3": "continue_loop"
                },
                "local_4": {
                    "1": "estimated_iterations",
                    "2": "multiplied_value",
                    "3": "calculated_delay",
                    "4": "delay",
                    "7": "delay_count"
                },
                "param_1": {
                    "1": "duration_in_milliseconds",
                    "18": "input_value",
                    "9": "input"
                }
            },
            "called": [],
            "calling": [
                "FUN_08003688"
            ],
            "code": "\nvoid calculate_delay_0800365c(int input_value)\n\n{\n  bool continue_loop;\n  int delay_count;\n  \n  delay_count = input_value * (DAT_20000084 / 8000);\n  do {\n    continue_loop = delay_count != 0;\n    delay_count = delay_count + -1;\n  } while (continue_loop);\n  return;\n}\n\n",
            "current_name": "calculate_delay_0800365c",
            "entrypoint": "0x0800365c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800365c": "calculate_delay_0800365c",
                "bVar1": "continue_loop",
                "local_4": "delay_count",
                "param_1": "input_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003688": {
            "additional_data": {
                "FUN_08001cc4": {
                    "1": "calculate_delay",
                    "5": "get_time",
                    "6": "get_current_time"
                },
                "FUN_0800365c": {
                    "1": "set_register_8",
                    "8": "set_flag"
                },
                "FUN_08003688": {
                    "1": "perform_operation",
                    "2": "process_input",
                    "5": "process_flags"
                },
                "PTR_DAT_08003690": {
                    "1": "config_values"
                },
                "PTR_FUN_0800365c": {
                    "2": "set_flag"
                },
                "_DAT_40007000": {
                    "1": "flag3"
                },
                "_DAT_40021000": {
                    "1": "register2"
                },
                "_DAT_40021004": {
                    "1": "register_1"
                },
                "_DAT_4002101c": {
                    "1": "data_reg2"
                },
                "_DAT_40021020": {
                    "1": "register_4"
                },
                "_DAT_40021024": {
                    "1": "flag2"
                },
                "_DAT_42420000": {
                    "1": "register_7",
                    "2": "flag1"
                },
                "_DAT_42420060": {
                    "1": "flag2"
                },
                "_DAT_42420480": {
                    "1": "register_8"
                },
                "bVar5": {
                    "1": "is_set",
                    "2": "is_bit_clear",
                    "3": "is_condition_met",
                    "4": "is_condition_true",
                    "5": "flag",
                    "7": "is_flag_set"
                },
                "iVar1": {
                    "1": "start",
                    "2": "initial_value",
                    "22": "start_time"
                },
                "iVar2": {
                    "1": "current_value",
                    "21": "current_time"
                },
                "param_1": {
                    "1": "function_params",
                    "11": "flags",
                    "2": "input_params",
                    "3": "params",
                    "4": "input_data",
                    "6": "parameters"
                },
                "uVar3": {
                    "1": "return_code",
                    "23": "result",
                    "5": "return_value"
                },
                "uVar4": {
                    "1": "comp_value",
                    "14": "value",
                    "2": "flag_value",
                    "3": "param1_value"
                }
            },
            "called": [
                "FUN_08001cc4",
                "FUN_0800365c"
            ],
            "calling": [
                "FUN_08001b48"
            ],
            "code": "\n\n/* WARNING: Restarted to delay deadcode elimination for space: ram */\n\nundefined4 process_flags_08003688(uint *flags)\n\n{\n  int start_time;\n  int current_time;\n  undefined4 result;\n  uint value;\n  bool is_flag_set;\n  \n  if ((*flags & 1) != 0) {\n    if (((_DAT_40021004 & 0xc) == 4) ||\n       (((_DAT_40021004 & 0xc) == 8 && ((_DAT_40021004 & 0x10000) != 0)))) {\n      if (((_DAT_40021000 & 0x20000) != 0) && (flags[1] == 0)) {\n        return 1;\n      }\n    }\n    else {\n      value = flags[1];\n      if (value == 0x10000) {\n        _DAT_40021000 = _DAT_40021000 | 0x10000;\n      }\n      else if (value == 0) {\n        _DAT_40021000 = _DAT_40021000 & 0xfffaffff;\n      }\n      else if (value == 0x50000) {\n        _DAT_40021000 = _DAT_40021000 | 0x50000;\n      }\n      else {\n        _DAT_40021000 = _DAT_40021000 & 0xfffaffff;\n      }\n      if (flags[1] == 0) {\n        start_time = FUN_08001cc4();\n        while ((_DAT_40021000 & 0x20000) != 0) {\n          current_time = FUN_08001cc4();\n          if (100 < (uint)(current_time - start_time)) {\n            return 3;\n          }\n        }\n      }\n      else {\n        start_time = FUN_08001cc4();\n        while ((_DAT_40021000 & 0x20000) == 0) {\n          current_time = FUN_08001cc4();\n          if (100 < (uint)(current_time - start_time)) {\n            return 3;\n          }\n        }\n      }\n    }\n  }\n  if ((*flags & 2) != 0) {\n    if (((_DAT_40021004 & 0xc) == 0) ||\n       (((_DAT_40021004 & 0xc) == 8 && ((_DAT_40021004 & 0x10000) == 0)))) {\n      if (((_DAT_40021000 & 2) != 0) && (flags[4] != 1)) {\n        return 1;\n      }\n      _DAT_40021000 = _DAT_40021000 & 0xffffff07 | flags[5] << 3;\n    }\n    else if (flags[4] == 0) {\n      _DAT_42420000 = 0;\n      start_time = FUN_08001cc4();\n      while ((_DAT_40021000 & 2) != 0) {\n        current_time = FUN_08001cc4();\n        if (2 < (uint)(current_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      _DAT_42420000 = 1;\n      start_time = FUN_08001cc4();\n      while ((_DAT_40021000 & 2) == 0) {\n        current_time = FUN_08001cc4();\n        if (2 < (uint)(current_time - start_time)) {\n          return 3;\n        }\n      }\n      _DAT_40021000 = _DAT_40021000 & 0xffffff07 | flags[5] << 3;\n    }\n  }\n  if ((*flags & 8) != 0) {\n    if (flags[6] == 0) {\n      _DAT_42420480 = 0;\n      start_time = FUN_08001cc4();\n      while ((_DAT_40021024 & 2) != 0) {\n        current_time = FUN_08001cc4();\n        if (2 < (uint)(current_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      _DAT_42420480 = 1;\n      start_time = FUN_08001cc4();\n      while ((_DAT_40021024 & 2) == 0) {\n        current_time = FUN_08001cc4();\n        if (2 < (uint)(current_time - start_time)) {\n          return 3;\n        }\n      }\n      FUN_0800365c(1);\n    }\n  }\n  if ((*flags & 4) != 0) {\n    is_flag_set = (_DAT_4002101c & 0x10000000) == 0;\n    if (is_flag_set) {\n      _DAT_4002101c = _DAT_4002101c | 0x10000000;\n    }\n    if ((_DAT_40007000 & 0x100) == 0) {\n      _DAT_40007000 = _DAT_40007000 | 0x100;\n      start_time = FUN_08001cc4();\n      while ((_DAT_40007000 & 0x100) == 0) {\n        current_time = FUN_08001cc4();\n        if (100 < (uint)(current_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n    value = flags[3];\n    if (value == 1) {\n      _DAT_40021020 = _DAT_40021020 | 1;\n    }\n    else if (value == 0) {\n      _DAT_40021020 = _DAT_40021020 & 0xfffffffa;\n    }\n    else if (value == 5) {\n      _DAT_40021020 = _DAT_40021020 | 5;\n    }\n    else {\n      _DAT_40021020 = _DAT_40021020 & 0xfffffffa;\n    }\n    if (flags[3] == 0) {\n      start_time = FUN_08001cc4();\n      while ((_DAT_40021020 & 2) != 0) {\n        current_time = FUN_08001cc4();\n        if (5000 < (uint)(current_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      start_time = FUN_08001cc4();\n      while ((_DAT_40021020 & 2) == 0) {\n        current_time = FUN_08001cc4();\n        if (5000 < (uint)(current_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n    if (is_flag_set) {\n      _DAT_4002101c = _DAT_4002101c & 0xefffffff;\n    }\n  }\n  if (flags[7] == 0) {\n    result = 0;\n  }\n  else if ((_DAT_40021004 & 0xc) == 8) {\n    result = 1;\n  }\n  else if (flags[7] == 2) {\n    _DAT_42420060 = 0;\n    start_time = FUN_08001cc4();\n    do {\n      if ((_DAT_40021000 & 0x2000000) == 0) {\n        if (flags[8] == 0x10000) {\n          _DAT_40021004 = _DAT_40021004 & 0xfffdffff | flags[2];\n        }\n        _DAT_40021004 = _DAT_40021004 & 0xffc2ffff | flags[8] | flags[9];\n        _DAT_42420060 = 1;\n        start_time = FUN_08001cc4();\n        do {\n          if ((_DAT_40021000 & 0x2000000) != 0) {\n            return 0;\n          }\n          current_time = FUN_08001cc4();\n        } while ((uint)(current_time - start_time) < 3);\n        return 3;\n      }\n      current_time = FUN_08001cc4();\n    } while ((uint)(current_time - start_time) < 3);\n    result = 3;\n  }\n  else {\n    _DAT_42420060 = 0;\n    start_time = FUN_08001cc4();\n    do {\n      if ((_DAT_40021000 & 0x2000000) == 0) {\n        return 0;\n      }\n      current_time = FUN_08001cc4();\n    } while ((uint)(current_time - start_time) < 3);\n    result = 3;\n  }\n  return result;\n}\n\n",
            "current_name": "process_flags_08003688",
            "entrypoint": "0x08003688",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08003688": "process_flags_08003688",
                "bVar5": "is_flag_set",
                "iVar1": "start_time",
                "iVar2": "current_time",
                "param_1": "flags",
                "uVar3": "result",
                "uVar4": "value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003a68": {
            "additional_data": {
                "FUN_08003a68": {
                    "1": "calculate_timings",
                    "21": "calculate_delay",
                    "3": "calculate_execution_time"
                },
                "PTR_614D3067": {
                    "1": "byte_pointer"
                },
                "_DAT_40021004": {
                    "1": "configuration",
                    "2": "status_register",
                    "3": "register_value",
                    "5": "data"
                },
                "byte_40021014": {
                    "1": "delay_constant4"
                },
                "local_1c": {
                    "1": "data_offset",
                    "2": "constant5",
                    "4": "delay_multiplier",
                    "8": "counter"
                },
                "uStack_10": {
                    "1": "parameter_b",
                    "2": "constant2",
                    "3": "data3",
                    "4": "constant3",
                    "6": "value3"
                },
                "uStack_14": {
                    "1": "third_stack_value",
                    "2": "constant3",
                    "3": "multiplier",
                    "4": "constant2",
                    "6": "value2"
                },
                "uStack_18": {
                    "1": "fourth_stack_value",
                    "2": "constant4",
                    "3": "data1",
                    "4": "constant1",
                    "6": "value1"
                },
                "uStack_c": {
                    "1": "constant_4",
                    "2": "constant1",
                    "3": "data4",
                    "4": "constant4",
                    "6": "value4"
                },
                "uVar1": {
                    "1": "execution_time",
                    "2": "delay_value",
                    "3": "result",
                    "5": "delay"
                }
            },
            "called": [],
            "calling": [
                "FUN_08003afa"
            ],
            "code": "\n\n\nuint calculate_delay_08003a68(void)\n\n{\n  uint delay;\n  undefined2 counter;\n  undefined4 value1;\n  undefined4 value2;\n  undefined4 value3;\n  undefined4 value4;\n  \n  value4 = 0x10100f0e;\n  value3 = 0xd0c0b0a;\n  value2 = 0x9080706;\n  value1 = 0x5040302;\n  counter = 0x201;\n  if ((_DAT_40021004 & 0xc) == 8) {\n    delay = (uint)*(byte *)((int)&value1 + ((_DAT_40021004 << 10) >> 0x1c));\n    if ((_DAT_40021004 & 0x10000) == 0) {\n      delay = delay * 4000000;\n    }\n    else {\n      delay = (delay * 8000000) /\n              (uint)*(byte *)((int)&counter - ((int)(_DAT_40021004 << 0xe) >> 0x1f));\n    }\n  }\n  else {\n    delay = 8000000;\n  }\n  return delay;\n}\n\n",
            "current_name": "calculate_delay_08003a68",
            "entrypoint": "0x08003a68",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08003a68": "calculate_delay_08003a68",
                "local_1c": "counter",
                "uStack_10": "value3",
                "uStack_14": "value2",
                "uStack_18": "value1",
                "uStack_c": "value4",
                "uVar1": "delay"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003ad4": {
            "additional_data": {
                "DAT_0800772c": {
                    "1": "sensor_data_map"
                },
                "DAT_20000084": {
                    "1": "updated_value",
                    "5": "result"
                },
                "DAT_40021000": {
                    "1": "constant_value"
                },
                "DAT_40021004": {
                    "1": "memory_options"
                },
                "DAT_40022000": {
                    "1": "memory_block_size"
                },
                "FUN_08001c3c": {
                    "1": "reset_memory_settings"
                },
                "FUN_08001cc4": {
                    "1": "get_elapsed_time",
                    "3": "get_current_time",
                    "4": "get_time"
                },
                "FUN_08003a68": {
                    "1": "retrieve_data"
                },
                "FUN_08003ad4": {
                    "1": "adjust_memory_layout",
                    "2": "update_data",
                    "3": "update_configuration"
                },
                "_DAT_40021000": {
                    "1": "system_status"
                },
                "_DAT_40021004": {
                    "1": "flag2",
                    "2": "hardware_config"
                },
                "_DAT_40022000": {
                    "1": "data_structure1"
                },
                "iVar1": {
                    "1": "start",
                    "2": "initial_value",
                    "21": "start_time"
                },
                "iVar2": {
                    "1": "current",
                    "2": "current_value",
                    "21": "current_time"
                },
                "param_1": {
                    "1": "input_param",
                    "2": "memory_settings",
                    "3": "settings",
                    "4": "input_array",
                    "5": "data"
                },
                "param_1[1]": {
                    "1": "flag_value1"
                },
                "param_1[2]": {
                    "1": "flag_value2"
                },
                "param_2": {
                    "1": "operation_length",
                    "10": "size",
                    "2": "array_size",
                    "3": "length"
                },
                "uVar3": {
                    "1": "temp_var1",
                    "2": "status",
                    "3": "temp_value",
                    "6": "result"
                }
            },
            "called": [
                "FUN_08003afa"
            ],
            "calling": [
                "FUN_08001b48"
            ],
            "code": "\n\n\nundefined4 process_data_08003ad4(uint *data,uint size)\n\n{\n  int start_time;\n  int current_time;\n  uint flag;\n  \n  if ((_DAT_40022000 & 7) < size) {\n    _DAT_40022000 = _DAT_40022000 & 0xfffffff8 | size;\n    if (size != (size & 7)) {\n      return 1;\n    }\n  }\n  if ((*data & 2) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xffffff0f | flag_value2;\n  }\n  if ((*data & 1) != 0) {\n    flag = flag_value1;\n    if (flag == 1) {\n      if ((_DAT_40021000 & 0x20000) == 0) {\n        return 1;\n      }\n    }\n    else if ((flag != 2) && ((_DAT_40021000 & 2) == 0)) {\n      return 1;\n    }\n    _DAT_40021004 = flag | _DAT_40021004 & 0xfffffffc;\n    start_time = FUN_08001cc4();\n    if (flag_value1 == 1) {\n      while ((_DAT_40021004 & 0xc) != 4) {\n        current_time = FUN_08001cc4();\n        if (5000 < (uint)(current_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n    else if (flag_value1 == 2) {\n      while ((_DAT_40021004 & 0xc) != 8) {\n        current_time = FUN_08001cc4();\n        if (5000 < (uint)(current_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      while ((_DAT_40021004 & 0xc) != 0) {\n        current_time = FUN_08001cc4();\n        if (5000 < (uint)(current_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n  }\n  if (size < (_DAT_40022000 & 7)) {\n    _DAT_40022000 = _DAT_40022000 & 0xfffffff8 | size;\n    if (size != (size & 7)) {\n      return 1;\n    }\n  }\n  if ((*data & 4) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xfffff8ff | data[3];\n  }\n  if ((*data & 8) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xffffc7ff | data[4] << 3;\n  }\n  flag = FUN_08003a68();\n  DAT_20000084 = flag >> (&DAT_0800772c)[(_DAT_40021004 << 0x18) >> 0x1c];\n  FUN_08001c3c(0xf);\n  return 0;\n}\n\n",
            "current_name": "process_data_08003ad4",
            "entrypoint": "0x08003ad4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08003ad4": "process_data_08003ad4",
                "iVar1": "start_time",
                "iVar2": "current_time",
                "param_1": "data",
                "param_1[1]": "flag_value1",
                "param_1[2]": "flag_value2",
                "param_2": "size",
                "uVar3": "flag"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003afa": {
            "additional_data": {
                "(register_1_status != 0)": {
                    "1": "is_register_1_not_0"
                },
                "(register_1_status != 4)": {
                    "1": "is_register_1_not_4"
                },
                "(register_1_status != 8)": {
                    "1": "is_register_1_not_8"
                },
                "5000": {
                    "1": "timeout"
                },
                "DATA_40022000": {
                    "1": "reg4"
                },
                "DAT_0800772c": {
                    "1": "reg5"
                },
                "DAT_20000084": {
                    "1": "final_value",
                    "2": "data_value",
                    "8": "result"
                },
                "FUN_08001c3c": {
                    "1": "set_bits",
                    "2": "set_bitmask",
                    "4": "set_mode"
                },
                "FUN_08001cc4": {
                    "1": "get_elapsed_time",
                    "2": "measure_time",
                    "9": "get_current_time"
                },
                "FUN_08003a68": {
                    "1": "calculate_result",
                    "2": "calculate_value",
                    "3": "get_value"
                },
                "FUN_08003afa": {
                    "1": "process_param",
                    "2": "process_flags",
                    "4": "update_configuration",
                    "5": "update_settings"
                },
                "_DAT_40021000": {
                    "1": "register2",
                    "2": "control_register"
                },
                "_DAT_40021004": {
                    "1": "device_status",
                    "2": "control_register",
                    "3": "register_value"
                },
                "_DAT_40021004 & 0xc": {
                    "1": "register_1_status"
                },
                "_DAT_40021004 & 0xffffc7ff": {
                    "1": "updated_register_1_3"
                },
                "_DAT_40021004 & 0xfffff8ff": {
                    "1": "updated_register_1_2"
                },
                "_DAT_40021004 & 0xfffffff8": {
                    "1": "updated_register_3"
                },
                "_DAT_40021004 & 0xfffffffc": {
                    "1": "updated_register_1"
                },
                "_DAT_40021004 << 0x18": {
                    "1": "shift_amount"
                },
                "_DAT_40021004 >> 0x1c": {
                    "1": "shift_index"
                },
                "_DAT_40022000": {
                    "1": "register2",
                    "2": "buffer_size"
                },
                "iVar1": {
                    "14": "start_time",
                    "2": "start",
                    "4": "initial_value",
                    "9": "initial_time"
                },
                "iVar2": {
                    "1": "end_time",
                    "2": "current",
                    "23": "current_time",
                    "5": "current_value"
                },
                "param_1": {
                    "1": "settings",
                    "20": "flags",
                    "3": "config_flags"
                },
                "param_2": {
                    "1": "max_iterations",
                    "18": "value",
                    "2": "limit"
                },
                "uVar3": {
                    "1": "task_type",
                    "2": "status",
                    "3": "return_value",
                    "6": "flag_value",
                    "7": "result"
                },
                "uint *param_1": {
                    "1": "settings"
                },
                "uint param_2": {
                    "1": "value"
                }
            },
            "called": [
                "FUN_08003a68",
                "FUN_08001c3c",
                "FUN_08001cc4"
            ],
            "calling": [
                "FUN_08003ad4"
            ],
            "code": "\n\n\nundefined4 process_data_08003afa(uint *flags,uint value)\n\n{\n  int start_time;\n  int current_time;\n  uint result;\n  \n  if ((*flags & 2) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xffffff0f | flags[2];\n  }\n  if ((*flags & 1) != 0) {\n    result = flags[1];\n    if (result == 1) {\n      if ((_DAT_40021000 & 0x20000) == 0) {\n        return 1;\n      }\n    }\n    else if ((result != 2) && ((_DAT_40021000 & 2) == 0)) {\n      return 1;\n    }\n    _DAT_40021004 = result | _DAT_40021004 & 0xfffffffc;\n    start_time = FUN_08001cc4();\n    if (flags[1] == 1) {\n      while ((_DAT_40021004 & 0xc) != 4) {\n        current_time = FUN_08001cc4();\n        if (5000 < (uint)(current_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n    else if (flags[1] == 2) {\n      while ((_DAT_40021004 & 0xc) != 8) {\n        current_time = FUN_08001cc4();\n        if (5000 < (uint)(current_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      while ((_DAT_40021004 & 0xc) != 0) {\n        current_time = FUN_08001cc4();\n        if (5000 < (uint)(current_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n  }\n  if (value < (_DAT_40022000 & 7)) {\n    _DAT_40022000 = _DAT_40022000 & 0xfffffff8 | value;\n    if (value != (value & 7)) {\n      return 1;\n    }\n  }\n  if ((*flags & 4) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xfffff8ff | flags[3];\n  }\n  if ((*flags & 8) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xffffc7ff | flags[4] << 3;\n  }\n  result = FUN_08003a68();\n  DAT_20000084 = result >> (&DAT_0800772c)[(_DAT_40021004 << 0x18) >> 0x1c];\n  FUN_08001c3c(0xf);\n  return 0;\n}\n\n",
            "current_name": "process_data_08003afa",
            "entrypoint": "0x08003afa",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08003afa": "process_data_08003afa",
                "iVar1": "start_time",
                "iVar2": "current_time",
                "param_1": "flags",
                "param_2": "value",
                "uVar3": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003c44": {
            "additional_data": {
                "DAT_20000084": {
                    "1": "data_pointer",
                    "2": "data_address",
                    "3": "global_value",
                    "6": "data_value",
                    "7": "data"
                },
                "FUN_08003c44": {
                    "1": "get_data_ptr",
                    "2": "get_data_address",
                    "3": "get_global_value",
                    "6": "get_data",
                    "9": "get_data_value"
                },
                "undefined4": {
                    "1": "uint32_t"
                }
            },
            "called": [],
            "calling": [
                "FUN_08001b48",
                "FUN_08003c50",
                "FUN_08003c70"
            ],
            "code": "\nuint32_t get_data_value_08003c44(void)\n\n{\n  return DAT_20000084;\n}\n\n",
            "current_name": "get_data_value_08003c44",
            "entrypoint": "0x08003c44",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08003c44": "get_data_value_08003c44",
                "undefined4": "uint32_t"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003c50": {
            "additional_data": {
                "&DAT_0800773c": {
                    "1": "shift_table",
                    "3": "shift_array"
                },
                "DAT_0800773c": {
                    "2": "shift_table"
                },
                "FUN_08003c44": {
                    "1": "get_integer",
                    "4": "get_initial_value",
                    "9": "get_original_value"
                },
                "FUN_08003c50": {
                    "1": "shifted_value_from_dat_0800773c",
                    "2": "shift_and_return",
                    "3": "calculate_shifted_value",
                    "6": "shifted_result",
                    "8": "shifted_value"
                },
                "_DAT_40021004": {
                    "1": "operation_code",
                    "2": "input_data",
                    "3": "input_value"
                },
                "uVar1": {
                    "1": "original_value",
                    "4": "value",
                    "5": "result"
                }
            },
            "called": [
                "FUN_08003c44"
            ],
            "calling": [
                "FUN_08004204"
            ],
            "code": "\n\n\nuint shifted_value_08003c50(void)\n\n{\n  uint result;\n  \n  result = FUN_08003c44();\n  return result >> (&DAT_0800773c)[(uint)(_DAT_40021004 << 0x15) >> 0x1d];\n}\n\n",
            "current_name": "shifted_value_08003c50",
            "entrypoint": "0x08003c50",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08003c50": "shifted_value_08003c50",
                "uVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003c70": {
            "additional_data": {
                "&DAT_0800773c": {
                    "1": "data_array",
                    "2": "shift_amount",
                    "5": "shift_array"
                },
                "DAT_0800773c": {
                    "1": "shift_amount"
                },
                "FUN_08003c44": {
                    "1": "get_return_value",
                    "10": "get_value",
                    "5": "get_original_value",
                    "6": "get_initial_value"
                },
                "FUN_08003c70": {
                    "1": "extracted_result",
                    "2": "shift_value_based_on_constant",
                    "3": "get_shifted_value",
                    "4": "calculate_shifted_value",
                    "5": "shift_and_return"
                },
                "_DAT_40021004": {
                    "1": "original_value_shift",
                    "3": "data_value",
                    "8": "input_value"
                },
                "uVar1": {
                    "1": "original_value",
                    "2": "value",
                    "5": "result"
                }
            },
            "called": [
                "FUN_08003c44"
            ],
            "calling": [
                "FUN_08003da4",
                "FUN_08004204"
            ],
            "code": "\n\n\nuint shift_and_return_08003c70(void)\n\n{\n  uint result;\n  \n  result = FUN_08003c44();\n  return result >> (&DAT_0800773c)[(uint)(_DAT_40021004 << 0x12) >> 0x1d];\n}\n\n",
            "current_name": "shift_and_return_08003c70",
            "entrypoint": "0x08003c70",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08003c70": "shift_and_return_08003c70",
                "uVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003c90": {
            "additional_data": {
                "FUN_08001cc4": {
                    "1": "wait_for_value_change"
                },
                "FUN_08003c90": {
                    "1": "set_flags_and_values",
                    "10": "update_configuration",
                    "2": "configure_peripheral",
                    "3": "configure_device",
                    "5": "update_settings"
                },
                "_DAT_40007000": {
                    "1": "data_register2",
                    "4": "register2"
                },
                "_DAT_40021004": {
                    "1": "data_register5",
                    "3": "register5"
                },
                "_DAT_4002101c": {
                    "1": "system_control_reg1",
                    "5": "register1"
                },
                "_DAT_40021020": {
                    "1": "flag2",
                    "4": "register3"
                },
                "_DAT_42420440": {
                    "1": "register_4",
                    "3": "register4"
                },
                "bVar5": {
                    "1": "is_config_set",
                    "2": "is_first_run",
                    "4": "flag",
                    "8": "is_flag_set"
                },
                "iVar3": {
                    "1": "initial_counter",
                    "5": "start_value",
                    "8": "start_time",
                    "9": "initial_value"
                },
                "iVar4": {
                    "1": "loop_var2",
                    "12": "current_value",
                    "9": "current_time"
                },
                "param_1": {
                    "1": "config_flags",
                    "2": "configuration",
                    "3": "flags",
                    "4": "config_params",
                    "5": "settings"
                },
                "uVar1": {
                    "1": "updated_value1",
                    "12": "temp_var1",
                    "2": "flag1",
                    "6": "temp1"
                },
                "uVar2": {
                    "1": "value2",
                    "12": "temp_var2",
                    "2": "flag2",
                    "6": "temp2"
                }
            },
            "called": [
                "FUN_08001cc4"
            ],
            "calling": [
                "FUN_08001b48"
            ],
            "code": "\n\n\nundefined4 update_configuration_08003c90(uint *settings)\n\n{\n  uint temp_var1;\n  uint temp_var2;\n  int initial_value;\n  int current_value;\n  bool is_flag_set;\n  \n  if ((*settings & 1) != 0) {\n    is_flag_set = (_DAT_4002101c & 0x10000000) == 0;\n    if (is_flag_set) {\n      _DAT_4002101c = _DAT_4002101c | 0x10000000;\n    }\n    if ((_DAT_40007000 & 0x100) == 0) {\n      _DAT_40007000 = _DAT_40007000 | 0x100;\n      initial_value = FUN_08001cc4();\n      while ((_DAT_40007000 & 0x100) == 0) {\n        current_value = FUN_08001cc4();\n        if (100 < (uint)(current_value - initial_value)) {\n          return 3;\n        }\n      }\n    }\n    if (((_DAT_40021020 & 0x300) != 0) && ((_DAT_40021020 & 0x300) != (settings[1] & 0x300))) {\n      temp_var2 = _DAT_40021020 & 0xfffffcff;\n      _DAT_42420440 = 0;\n      temp_var1 = _DAT_40021020 & 1;\n      _DAT_40021020 = temp_var2;\n      if (temp_var1 != 0) {\n        initial_value = FUN_08001cc4();\n        while ((_DAT_40021020 & 2) == 0) {\n          current_value = FUN_08001cc4();\n          if (5000 < (uint)(current_value - initial_value)) {\n            return 3;\n          }\n        }\n      }\n    }\n    _DAT_40021020 = _DAT_40021020 & 0xfffffcff | settings[1];\n    if (is_flag_set) {\n      _DAT_4002101c = _DAT_4002101c & 0xefffffff;\n    }\n  }\n  if ((*settings & 2) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xffff3fff | settings[2];\n  }\n  if ((*settings & 0x10) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xffbfffff | settings[3];\n  }\n  return 0;\n}\n\n",
            "current_name": "update_configuration_08003c90",
            "entrypoint": "0x08003c90",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08003c90": "update_configuration_08003c90",
                "bVar5": "is_flag_set",
                "iVar3": "initial_value",
                "iVar4": "current_value",
                "param_1": "settings",
                "uVar1": "temp_var1",
                "uVar2": "temp_var2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003da4": {
            "additional_data": {
                "FUN_08003da4": {
                    "1": "calculate_something",
                    "10": "calculate_value",
                    "2": "calculate_time",
                    "5": "calculate_parameter"
                },
                "F_08003da4": {
                    "1": "calculate_time"
                },
                "_DAT_40021000": {
                    "1": "data2"
                },
                "_DAT_40021004": {
                    "1": "data1"
                },
                "_DAT_40021020": {
                    "1": "data3"
                },
                "_DAT_40021024": {
                    "1": "data4"
                },
                "local_24": {
                    "1": "multiplier",
                    "2": "value1",
                    "3": "constant_value",
                    "4": "flag",
                    "9": "constant"
                },
                "param_1": {
                    "1": "mode",
                    "15": "input",
                    "3": "input_param",
                    "4": "parameter",
                    "7": "input_value"
                },
                "uStack_14": {
                    "1": "last_constant",
                    "2": "stack_value4",
                    "3": "constant1",
                    "6": "value4"
                },
                "uStack_18": {
                    "1": "value4",
                    "2": "constant_4",
                    "3": "constant",
                    "4": "constant2",
                    "6": "value3"
                },
                "uStack_1c": {
                    "1": "yet_another_constant",
                    "2": "constant2",
                    "4": "constant3",
                    "5": "value2"
                },
                "uStack_20": {
                    "1": "constant2",
                    "2": "multiplier",
                    "3": "constant4",
                    "5": "value1"
                },
                "uVar1": {
                    "1": "parameter_value",
                    "2": "delay",
                    "24": "result"
                }
            },
            "called": [
                "FUN_08003c70"
            ],
            "calling": [
                "FUN_08002384",
                "FUN_08001cd0"
            ],
            "code": "\n\n\nuint calculate_value_08003da4(int input)\n\n{\n  uint result;\n  undefined2 constant;\n  undefined4 value1;\n  undefined4 value2;\n  undefined4 value3;\n  undefined4 value4;\n  \n  value4 = 0x10100f0e;\n  value3 = 0xd0c0b0a;\n  value2 = 0x9080706;\n  value1 = 0x5040302;\n  constant = 0x201;\n  if (input == 2) {\n    result = FUN_08003c70();\n    result = result / ((((_DAT_40021004 << 0x10) >> 0x1e) + 1) * 2);\n  }\n  else if (input == 0x10) {\n    if ((_DAT_40021000 & 0x1000000) == 0) {\n      result = 0;\n    }\n    else {\n      if ((_DAT_40021004 & 0x10000) == 0) {\n        result = 4000000;\n      }\n      else {\n        result = 8000000 / *(byte *)((int)&constant - ((int)(_DAT_40021004 << 0xe) >> 0x1f));\n      }\n      result = result * *(byte *)((int)&value1 + ((_DAT_40021004 << 10) >> 0x1c));\n      if ((_DAT_40021004 & 0x400000) == 0) {\n        result = (result * 2) / 3;\n      }\n    }\n  }\n  else if (input == 1) {\n    if ((_DAT_40021020 & 0x302) == 0x102) {\n      result = 0x8000;\n    }\n    else if (((_DAT_40021020 & 0x300) == 0x200) && ((_DAT_40021024 & 2) != 0)) {\n      result = 32000;\n    }\n    else if ((_DAT_40021020 & 0x300) == 0x300) {\n      if ((_DAT_40021000 & 0x20000) == 0) {\n        result = 0;\n      }\n      else {\n        result = 0xf424;\n      }\n    }\n    else {\n      result = 0;\n    }\n  }\n  else {\n    result = 0;\n  }\n  return result;\n}\n\n",
            "current_name": "calculate_value_08003da4",
            "entrypoint": "0x08003da4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08003da4": "calculate_value_08003da4",
                "local_24": "constant",
                "param_1": "input",
                "uStack_14": "value4",
                "uStack_18": "value3",
                "uStack_1c": "value2",
                "uStack_20": "value1",
                "uVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003ea0": {
            "additional_data": {
                "& 2": {
                    "1": "is_bit_set"
                },
                "((int)param_1 + 0x11)": {
                    "1": "address_offset"
                },
                "(*param_1)[1]": {
                    "1": "data_ptr[1]",
                    "2": "value2",
                    "3": "flags[1]"
                },
                "(int)param_1": {
                    "1": "flags"
                },
                "(int)param_1 + 0x11": {
                    "1": "pointer_offset"
                },
                "(undefined *)((int)param_1 + 0x11)": {
                    "1": "flag_address"
                },
                "*((int)param_1 + 0x11)": {
                    "1": "status"
                },
                "*(*param_1)": {
                    "1": "value1"
                },
                "*(undefined *)((int)param_1 + 0x11)": {
                    "1": "byte_value",
                    "2": "flag_value",
                    "3": "flag"
                },
                "**param_1": {
                    "1": "status_value"
                },
                "*_param_1": {
                    "1": "input_data"
                },
                "*_param_1[0]": {
                    "1": "first_flag_value"
                },
                "*_param_1[1]": {
                    "1": "second_flag_value"
                },
                "*param_1": {
                    "1": "value_at_memory_pointer"
                },
                "DAT_40010414": {
                    "1": "some_constant"
                },
                "FUN_08003ea0": {
                    "1": "set_memory_attributes",
                    "10": "initialize_data",
                    "2": "update_data",
                    "3": "initialize_flags",
                    "7": "initialize_memory"
                },
                "FUN_08004d18": {
                    "1": "perform_additional_action",
                    "2": "reverse_data",
                    "3": "reset_flags",
                    "4": "perform_action"
                },
                "PTR_40010414": {
                    "1": "some_pointer"
                },
                "PTR_40010415": {
                    "1": "another_pointer"
                },
                "_DAT_40010414": {
                    "1": "status_register_address",
                    "3": "data",
                    "5": "constant_value"
                },
                "param_1": {
                    "1": "input_data",
                    "2": "memory_ptr",
                    "4": "flags",
                    "5": "memory_pointer",
                    "7": "data"
                }
            },
            "called": [
                "FUN_08004d18"
            ],
            "calling": [],
            "code": "\n\n\nvoid initialize_data_08003ea0(uint **data)\n\n{\n  if (((**data & 2) != 0) && (((*data)[1] & 2) != 0)) {\n    FUN_08004d18();\n    (*data)[1] = 0xfffffffd;\n  }\n  _DAT_40010414 = 0x20000;\n  *(undefined *)(flags + 0x11) = 1;\n  return;\n}\n\n",
            "current_name": "initialize_data_08003ea0",
            "entrypoint": "0x08003ea0",
            "imported": false,
            "improved": true,
            "renaming": {
                "(int)param_1": "flags",
                "FUN_08003ea0": "initialize_data_08003ea0",
                "param_1": "data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003ed8": {
            "additional_data": {
                "*(undefined *)((int)param_1 + 0x3d)": {
                    "1": "flag"
                },
                "FUN_08003ed8": {
                    "1": "clear_flag_and_update",
                    "11": "set_flag_and_call_function",
                    "2": "update_values",
                    "3": "update_data"
                },
                "FUN_08004b34": {
                    "1": "perform_operation",
                    "2": "call_sub_function",
                    "4": "call_another_function"
                },
                "param_1": {
                    "1": "input_array",
                    "2": "input_pointer",
                    "3": "input_data",
                    "4": "input_params",
                    "5": "parameters"
                },
                "param_1 + 0x3d": {
                    "1": "flag"
                },
                "param_1 + 0xf": {
                    "1": "counter"
                },
                "puVar1": {
                    "1": "temp_ptr",
                    "2": "current_pointer",
                    "3": "ptr"
                }
            },
            "called": [
                "FUN_08004b34"
            ],
            "calling": [
                "FUN_08004b3c"
            ],
            "code": "\nvoid set_flag_and_call_function_08003ed8(uint **parameters)\n\n{\n  uint *pointer;\n  \n  *(undefined *)((int)parameters + 0x3d) = 2;\n  pointer = *parameters;\n  if ((pointer[8] & 0x1111) == 0) {\n    if ((pointer[8] & 0x444) == 0) {\n      *pointer = *pointer & 0xfffffffe;\n    }\n  }\n  FUN_08004b34(parameters);\n  *(undefined *)((int)parameters + 0x3d) = 0;\n  *(undefined *)(parameters + 0xf) = 0;\n  return;\n}\n\n",
            "current_name": "set_flag_and_call_function_08003ed8",
            "entrypoint": "0x08003ed8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08003ed8": "set_flag_and_call_function_08003ed8",
                "param_1": "parameters",
                "puVar1": "pointer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003f12": {
            "called": [],
            "calling": [
                "FUN_08003f18"
            ],
            "code": "\nvoid FUNC_08003f12(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_08003f12",
            "entrypoint": "0x08003f12",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_08003f12": "FUNC_08003f12"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_08003f14": {
            "called": [],
            "calling": [
                "FUN_08003f18"
            ],
            "code": "\nvoid FUNC_08003f14(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_08003f14",
            "entrypoint": "0x08003f14",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_08003f14": "FUNC_08003f14"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_08003f16": {
            "called": [],
            "calling": [
                "FUN_08003f18"
            ],
            "code": "\nvoid FUNC_08003f16(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_08003f16",
            "entrypoint": "0x08003f16",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_08003f16": "FUNC_08003f16"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_08003f18": {
            "additional_data": {
                "*(uint *)(*param_1 + 0x18)": {
                    "1": "value2"
                },
                "*(uint *)(*param_1 + 0x18) & 0x300": {
                    "1": "check6"
                },
                "*(uint *)(*param_1 + 0x18) & 3": {
                    "1": "check3"
                },
                "*(uint *)(*param_1 + 0x1c)": {
                    "1": "value3"
                },
                "*(uint *)(*param_1 + 0x1c) & 0x300": {
                    "1": "check12"
                },
                "*(uint *)(*param_1 + 0x1c) & 3": {
                    "1": "check9"
                },
                "*(uint *)(iVar1 + 0x10)": {
                    "1": "value_and_mask1"
                },
                "*(uint *)(iVar1 + 0x10) & 0x10": {
                    "1": "check10"
                },
                "*(uint *)(iVar1 + 0x10) & 0x20": {
                    "1": "check19"
                },
                "*(uint *)(iVar1 + 0x10) & 0x40": {
                    "1": "check17"
                },
                "*(uint *)(iVar1 + 0x10) & 0x80": {
                    "1": "check15"
                },
                "*(uint *)(iVar1 + 0x10) & 1": {
                    "1": "check13"
                },
                "*(uint *)(iVar1 + 0x10) & 2": {
                    "1": "check1"
                },
                "*(uint *)(iVar1 + 0x10) & 4": {
                    "1": "check4"
                },
                "*(uint *)(iVar1 + 0x10) & 8": {
                    "1": "check7"
                },
                "*(uint *)(iVar1 + 0xc)": {
                    "1": "value_and_mask2"
                },
                "*(uint *)(iVar1 + 0xc) & 0x10": {
                    "1": "check11"
                },
                "*(uint *)(iVar1 + 0xc) & 0x20": {
                    "1": "check20"
                },
                "*(uint *)(iVar1 + 0xc) & 0x40": {
                    "1": "check18"
                },
                "*(uint *)(iVar1 + 0xc) & 0x80": {
                    "1": "check16"
                },
                "*(uint *)(iVar1 + 0xc) & 1": {
                    "1": "check14"
                },
                "*(uint *)(iVar1 + 0xc) & 2": {
                    "1": "check2"
                },
                "*(uint *)(iVar1 + 0xc) & 4": {
                    "1": "check5"
                },
                "*(uint *)(iVar1 + 0xc) & 8": {
                    "1": "check8"
                },
                "*(undefined *)(param_1 + 7)": {
                    "1": "status"
                },
                "*(undefined4 *)(iVar1 + 0x10)": {
                    "1": "modified_value_and_mask1"
                },
                "FNC_08003f12": {
                    "1": "check_data2"
                },
                "FNC_08003f14": {
                    "1": "check_data1"
                },
                "FNC_08003f16": {
                    "1": "check_data5"
                },
                "FNC_08004178": {
                    "1": "check_data3"
                },
                "FNC_0800417a": {
                    "1": "check_data4"
                },
                "FUC_08003f14": {
                    "1": "handle_flag1"
                },
                "FUNCHelper_08003f12": {
                    "1": "process_case2"
                },
                "FUNCHelper_08003f14": {
                    "1": "process_case1"
                },
                "FUNC_08003f12": {
                    "1": "execute_function4",
                    "2": "perform_action5",
                    "3": "handle_case2"
                },
                "FUNC_08003f12: : handleCondition5: ,\n: FUN_08004df8": {
                    "1": "execute_function"
                },
                "FUNC_08003f14": {
                    "1": "handle_flag1",
                    "2": "perform_action1",
                    "3": "handle_case1"
                },
                "FUNC_08003f16": {
                    "1": "execute_action4",
                    "2": "handle_case4"
                },
                "FUNC_08004178": {
                    "1": "handle_flag1",
                    "2": "handle_case5"
                },
                "FUNC_0800417a": {
                    "1": "process_case4_flag",
                    "2": "perform_action4"
                },
                "FUNC_08004df8": {
                    "1": "perform_operation"
                },
                "FUNC_08004e12": {
                    "1": "process_case_2"
                },
                "FUNK_08003f14": {
                    "1": "perform_action1"
                },
                "FUN_08003f18": {
                    "1": "handle_params",
                    "14": "process_flags",
                    "3": "process_params",
                    "4": "process_data"
                },
                "FUN_08004df8": {
                    "1": "reverse_something2",
                    "2": "perform_action6"
                },
                "FUN_08004e12": {
                    "1": "reverse_operation",
                    "2": "perform_action3",
                    "4": "reverse_something"
                },
                "iVar1": {
                    "1": "value1",
                    "14": "value",
                    "2": "current_value"
                },
                "param_1": {
                    "1": "arguments",
                    "2": "param",
                    "4": "params",
                    "5": "data",
                    "9": "flags"
                }
            },
            "called": [
                "FUN_08003f14",
                "FUN_08004178",
                "FUN_08004e12",
                "FUN_0800417a",
                "FUN_08003f12",
                "FUN_08004df8",
                "FUN_08003f16"
            ],
            "calling": [
                "FUN_08004e20"
            ],
            "code": "\nvoid process_flags_08003f18(int *flags)\n\n{\n  int value;\n  \n  value = *flags;\n  if (((*(uint *)(value + 0x10) & 2) != 0) && ((*(uint *)(value + 0xc) & 2) != 0)) {\n    *(undefined4 *)(value + 0x10) = 0xfffffffd;\n    *(undefined *)(flags + 7) = 1;\n    if ((*(uint *)(*flags + 0x18) & 3) == 0) {\n      FUN_08004df8();\n      FUNC_08003f14(flags);\n    }\n    else {\n      FUNC_08003f12();\n    }\n    *(undefined *)(flags + 7) = 0;\n  }\n  value = *flags;\n  if (((*(uint *)(value + 0x10) & 4) != 0) && ((*(uint *)(value + 0xc) & 4) != 0)) {\n    *(undefined4 *)(value + 0x10) = 0xfffffffb;\n    *(undefined *)(flags + 7) = 2;\n    if ((*(uint *)(*flags + 0x18) & 0x300) == 0) {\n      FUN_08004df8(flags);\n      FUNC_08003f14(flags);\n    }\n    else {\n      FUNC_08003f12(flags);\n    }\n    *(undefined *)(flags + 7) = 0;\n  }\n  value = *flags;\n  if (((*(uint *)(value + 0x10) & 8) != 0) && ((*(uint *)(value + 0xc) & 8) != 0)) {\n    *(undefined4 *)(value + 0x10) = 0xfffffff7;\n    *(undefined *)(flags + 7) = 4;\n    if ((*(uint *)(*flags + 0x1c) & 3) == 0) {\n      FUN_08004df8(flags);\n      FUNC_08003f14(flags);\n    }\n    else {\n      FUNC_08003f12(flags);\n    }\n    *(undefined *)(flags + 7) = 0;\n  }\n  value = *flags;\n  if (((*(uint *)(value + 0x10) & 0x10) != 0) && ((*(uint *)(value + 0xc) & 0x10) != 0)) {\n    *(undefined4 *)(value + 0x10) = 0xffffffef;\n    *(undefined *)(flags + 7) = 8;\n    if ((*(uint *)(*flags + 0x1c) & 0x300) == 0) {\n      FUN_08004df8(flags);\n      FUNC_08003f14(flags);\n    }\n    else {\n      FUNC_08003f12(flags);\n    }\n    *(undefined *)(flags + 7) = 0;\n  }\n  value = *flags;\n  if (((*(uint *)(value + 0x10) & 1) != 0) && ((*(uint *)(value + 0xc) & 1) != 0)) {\n    *(undefined4 *)(value + 0x10) = 0xfffffffe;\n    FUN_08004e12(flags);\n  }\n  value = *flags;\n  if (((*(uint *)(value + 0x10) & 0x80) != 0) && ((*(uint *)(value + 0xc) & 0x80) != 0)) {\n    *(undefined4 *)(value + 0x10) = 0xffffff7f;\n    FUNC_0800417a(flags);\n  }\n  value = *flags;\n  if (((*(uint *)(value + 0x10) & 0x40) != 0) && ((*(uint *)(value + 0xc) & 0x40) != 0)) {\n    *(undefined4 *)(value + 0x10) = 0xffffffbf;\n    FUNC_08003f16(flags);\n  }\n  value = *flags;\n  if (((*(uint *)(value + 0x10) & 0x20) != 0) && ((*(uint *)(value + 0xc) & 0x20) != 0)) {\n    *(undefined4 *)(value + 0x10) = 0xffffffdf;\n    FUNC_08004178(flags);\n  }\n  return;\n}\n\n",
            "current_name": "process_flags_08003f18",
            "entrypoint": "0x08003f18",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08003f18": "process_flags_08003f18",
                "iVar1": "value",
                "param_1": "flags"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004092": {
            "additional_data": {
                "*(uint *)(param_1 + 0x20)": {
                    "1": "bitwise_value"
                },
                "FUN_08004092": {
                    "1": "update_bit_at_offset",
                    "11": "update_bitwise_value",
                    "4": "update_bits",
                    "6": "update_bit",
                    "7": "update_bit_value"
                },
                "param_1": {
                    "1": "data_ptr",
                    "2": "data",
                    "25": "base_address"
                },
                "param_1 + 0x20": {
                    "1": "bitwise_value_address"
                },
                "param_2": {
                    "1": "bit_offset",
                    "2": "position",
                    "27": "bit_position"
                },
                "param_3": {
                    "1": "updated_value",
                    "20": "new_value",
                    "3": "value",
                    "7": "bit_value"
                }
            },
            "called": [],
            "calling": [
                "FUN_080040b0"
            ],
            "code": "\nvoid update_bitwise_value_08004092(int base_address,uint bit_position,int new_value)\n\n{\n  *(uint *)(base_address + 0x20) = *(uint *)(base_address + 0x20) & ~(1 << (bit_position & 0xff));\n  *(uint *)(base_address + 0x20) = *(uint *)(base_address + 0x20) | new_value << (bit_position & 0xff);\n  return;\n}\n\n",
            "current_name": "update_bitwise_value_08004092",
            "entrypoint": "0x08004092",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004092": "update_bitwise_value_08004092",
                "param_1": "base_address",
                "param_2": "bit_position",
                "param_3": "new_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080040b0": {
            "additional_data": {
                "FUN_08004092": {
                    "1": "execute_operation",
                    "2": "do_something"
                },
                "FUN_080040b0": {
                    "1": "improve_binary_processing",
                    "2": "initialize_flags"
                },
                "param_1": {
                    "1": "input_ptr",
                    "2": "memory",
                    "3": "input_pointer"
                },
                "param_1[8]": {
                    "1": "current_data[8]"
                },
                "param_1_0": {
                    "1": "flag_array"
                },
                "param_2": {
                    "1": "flag_value",
                    "18": "value",
                    "2": "input_value",
                    "4": "param"
                },
                "param_3": {
                    "1": "param",
                    "2": "offset",
                    "3": "index",
                    "5": "flag"
                },
                "puVar1": {
                    "1": "param",
                    "2": "ptr1",
                    "3": "current_pointer",
                    "4": "pointer",
                    "8": "ptr"
                },
                "uRam40012c00": {
                    "1": "mem_address",
                    "3": "constant1"
                },
                "uRam40012c20": {
                    "1": "memory_value1",
                    "3": "constant2"
                },
                "uRam40012c44": {
                    "1": "memory_value2",
                    "3": "constant3"
                }
            },
            "called": [
                "FUN_08004092"
            ],
            "calling": [
                "FUN_08004b3c"
            ],
            "code": "\nundefined4 set_flags_and_return_080040b0(uint **input_pointer,undefined4 value)\n\n{\n  uint *ptr;\n  \n  FUN_08004092(*input_pointer,value,0);\n  if (((*input_pointer == (uint *)0x40012c00) && ((constant2 & 0x1111) == 0)) &&\n     ((constant2 & 0x444) == 0)) {\n    constant3 = constant3 & 0xffff7fff;\n  }\n  ptr = *input_pointer;\n  if (((ptr[8] & 0x1111) == 0) && ((ptr[8] & 0x444) == 0)) {\n    *ptr = *ptr & 0xfffffffe;\n  }\n  *(undefined *)((int)input_pointer + 0x3d) = 1;\n  return 0;\n}\n\n",
            "current_name": "set_flags_and_return_080040b0",
            "entrypoint": "0x080040b0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080040b0": "set_flags_and_return_080040b0",
                "param_1": "input_pointer",
                "param_2": "value",
                "puVar1": "ptr",
                "uRam40012c20": "constant2",
                "uRam40012c44": "constant3"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004110": {
            "additional_data": {
                "&": {
                    "1": "and"
                },
                "(param_2 & 0xff)": {
                    "1": "bit_offset"
                },
                "*(uint *)(param_1 + 0x20)": {
                    "1": "current_value"
                },
                "4 << (param_2 & 0xff)": {
                    "1": "bit_shift",
                    "2": "bit_mask"
                },
                "<<": {
                    "1": "bitwise_shift_left"
                },
                "FUN_08004110": {
                    "1": "update_register_value",
                    "2": "update_bit",
                    "3": "update_flags",
                    "9": "update_value"
                },
                "param_1": {
                    "1": "data_ptr",
                    "2": "register_address",
                    "20": "base_address",
                    "3": "data_address",
                    "4": "address"
                },
                "param_1 + 0x20": {
                    "1": "address_to_update"
                },
                "param_2": {
                    "1": "flag_position",
                    "11": "bit_offset",
                    "14": "bit_position",
                    "3": "position"
                },
                "param_2 & 0xff": {
                    "1": "masked_bit_position"
                },
                "param_3": {
                    "1": "bit_value",
                    "21": "new_value",
                    "8": "value"
                },
                "param_3 << (param_2 & 0xff)": {
                    "1": "shifted_value"
                },
                "uint": {
                    "1": "uint"
                },
                "val &= ~(4 << (param_2 & 0xff))": {
                    "1": "new_value"
                },
                "val | param_3 << (param_2 & 0xff)": {
                    "1": "updated_value"
                },
                "|": {
                    "1": "bitwise_or"
                },
                "~(4 << (param_2 & 0xff))": {
                    "1": "mask"
                }
            },
            "called": [],
            "calling": [
                "FUN_0800412c"
            ],
            "code": "\nvoid update_value_08004110(int base_address,uint bit_position,int new_value)\n\n{\n  *(uint *)(base_address + 0x20) = *(uint *)(base_address + 0x20) and ~(4 << (bit_position and 0xff));\n  *(uint *)(base_address + 0x20) = *(uint *)(base_address + 0x20) | new_value << (bit_position and 0xff);\n  return;\n}\n\n",
            "current_name": "update_value_08004110",
            "entrypoint": "0x08004110",
            "imported": false,
            "improved": true,
            "renaming": {
                "&": "and",
                "FUN_08004110": "update_value_08004110",
                "param_1": "base_address",
                "param_2": "bit_position",
                "param_3": "new_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800412c": {
            "additional_data": {
                "*param_1": {
                    "1": "ptr_value"
                },
                "*pointer": {
                    "1": "mask2"
                },
                "FUN_08004110": {
                    "1": "handle_data_processing",
                    "2": "update_data",
                    "3": "process_data"
                },
                "FUN_0800412c": {
                    "1": "update_permissions",
                    "11": "update_flags_and_values",
                    "2": "update_flags"
                },
                "param_1": {
                    "1": "array_param",
                    "2": "param_1",
                    "3": "input_array",
                    "7": "data"
                },
                "param_1[8]": {
                    "1": "data"
                },
                "param_1_1": {
                    "1": "input_array"
                },
                "param_1_2": {
                    "1": "value"
                },
                "param_2": {
                    "1": "condition",
                    "15": "value",
                    "2": "param",
                    "3": "param2"
                },
                "param_3": {
                    "1": "parameter",
                    "2": "index",
                    "3": "param_3",
                    "5": "param3"
                },
                "pointer[0x11]": {
                    "1": "mask1"
                },
                "ptr[0x11]": {
                    "1": "ptr_value[0x11]"
                },
                "ptr[8]": {
                    "1": "ptr_value[8]"
                },
                "puVar1": {
                    "1": "pointer_value",
                    "2": "pointer_to_data",
                    "3": "data_pointer",
                    "6": "pointer",
                    "7": "ptr"
                },
                "puVar1_1": {
                    "1": "ptr"
                }
            },
            "called": [
                "FUN_08004110"
            ],
            "calling": [
                "FUN_08004b3c"
            ],
            "code": "\nundefined4 update_flags_and_values_0800412c(uint **data,undefined4 value)\n\n{\n  uint *ptr;\n  \n  FUN_08004110(*data,value,0);\n  ptr = *data;\n  if (((ptr[8] & 0x1111) == 0) && ((ptr[8] & 0x444) == 0)) {\n    ptr[0x11] = ptr[0x11] & 0xffff7fff;\n  }\n  ptr = *data;\n  if (((ptr[8] & 0x1111) == 0) && ((ptr[8] & 0x444) == 0)) {\n    *ptr = *ptr & 0xfffffffe;\n  }\n  return 0;\n}\n\n",
            "current_name": "update_flags_and_values_0800412c",
            "entrypoint": "0x0800412c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800412c": "update_flags_and_values_0800412c",
                "param_1": "data",
                "param_2": "value",
                "puVar1": "ptr"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004178": {
            "called": [],
            "calling": [
                "FUN_08003f18"
            ],
            "code": "\nvoid FUNC_08004178(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_08004178",
            "entrypoint": "0x08004178",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_08004178": "FUNC_08004178"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_0800417a": {
            "called": [],
            "calling": [
                "FUN_08003f18"
            ],
            "code": "\nvoid FUNC_0800417a(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_0800417a",
            "entrypoint": "0x0800417a",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_0800417a": "FUNC_0800417a"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_0800417c": {
            "additional_data": {
                "(int)param_1": {
                    "1": "param1"
                },
                "(int)param_1 + 0x3a": {
                    "1": "offset"
                },
                "*(uint *)(*memoryAddress + 0x14)": {
                    "1": "value2"
                },
                "*(uint *)(*memoryAddress + 0xc)": {
                    "1": "value1"
                },
                "*(uint *)(*param_1 + 0x14)": {
                    "1": "second_memory_value",
                    "2": "value_at_offset14",
                    "3": "flag2",
                    "5": "value2"
                },
                "*(uint *)(*param_1 + 0xc)": {
                    "1": "flags_value1",
                    "2": "value_at_offset_c",
                    "3": "flag1",
                    "5": "value1"
                },
                "*(undefined *)((int)param_1 + 0x3a)": {
                    "1": "flags",
                    "3": "flag"
                },
                "*(undefined*)((int)objectAddress + 0x3a)": {
                    "1": "new_permission_value"
                },
                "*param_1": {
                    "1": "input_pointer",
                    "2": "data"
                },
                "*param_1 + 0x14": {
                    "1": "flags_register2"
                },
                "*param_1 + 0xc": {
                    "1": "flags_register1"
                },
                "0x14": {
                    "1": "value2",
                    "2": "mask2",
                    "3": "offset2"
                },
                "0x3a": {
                    "1": "character"
                },
                "0xc": {
                    "1": "flag_offset",
                    "2": "mask1",
                    "3": "offset1"
                },
                "0xfffffedf": {
                    "1": "mask1_value"
                },
                "0xfffffffe": {
                    "1": "bit_mask2"
                },
                "DAT": {
                    "1": "data"
                },
                "FUN_0800417c": {
                    "1": "update_values",
                    "2": "clear_bitwise_flags",
                    "3": "clear_bits_and_set_space",
                    "5": "clear_flags"
                },
                "PTR": {
                    "1": "pointer"
                },
                "PTR_*(uint)(objectAddress + 0x14)": {
                    "1": "flags_address"
                },
                "PTR_*(uint)(objectAddress + 0xc)": {
                    "1": "permissions_address"
                },
                "int": {
                    "1": "integer"
                },
                "param_1": {
                    "1": "parameter",
                    "2": "memory_address",
                    "3": "flags",
                    "5": "input_array"
                },
                "uint": {
                    "2": "unsigned_int"
                },
                "undefined": {
                    "1": "unknown"
                }
            },
            "called": [],
            "calling": [
                "FUN_080046b8"
            ],
            "code": "\nvoid clear_flags_0800417c(integer *input_array)\n\n{\n  *(unsigned_int *)(*input_array + 0xc) = *(unsigned_int *)(*input_array + 0xc) & 0xfffffedf;\n  *(unsigned_int *)(*input_array + 0x14) = *(unsigned_int *)(*input_array + 0x14) & 0xfffffffe;\n  *(undecided *)(param1_as_int + 0x3a) = 0x20;\n  return;\n}\n\n",
            "current_name": "clear_flags_0800417c",
            "entrypoint": "0x0800417c",
            "imported": false,
            "improved": true,
            "renaming": {
                "(int)param_1": "param1_as_int",
                "FUN_0800417c": "clear_flags_0800417c",
                "int": "integer",
                "param_1": "input_array",
                "uint": "unsigned_int",
                "undefined": "undecided"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004198": {
            "additional_data": {
                "(int)(pbVar2 + 1)": {
                    "1": "next_byte_address"
                },
                "(uint)*pbVar2": {
                    "1": "value"
                },
                "(unsigned int)*(ushort *)param_1[8] & 0x1ff": {
                    "1": "masked_value"
                },
                "*(char *)((int)param_1 + 0x39)": {
                    "1": "char_value"
                },
                "*(short *)((int)param_1 + 0x26)": {
                    "1": "iterations_counter"
                },
                "*(uint *)(*param_1 + 0xc)": {
                    "1": "flag_value",
                    "2": "flags"
                },
                "*(uint *)(*param_1 + 4)": {
                    "1": "output_value"
                },
                "*(ushort *)param_1[8]": {
                    "1": "temp_value"
                },
                "*(ushort *)param_1[8] & 0x1ff": {
                    "1": "masked_value"
                },
                "*param_1": {
                    "1": "result"
                },
                "*param_1 + 0xc": {
                    "1": "flag_ptr"
                },
                "*param_1 + 4": {
                    "1": "offset_ptr"
                },
                "*param_1[8]": {
                    "1": "address"
                },
                "0x1000": {
                    "1": "hex_constant"
                },
                "0x1ff": {
                    "1": "mask_constant"
                },
                "0x26": {
                    "1": "short_offset"
                },
                "0x39": {
                    "1": "char_constant"
                },
                "0x40": {
                    "1": "or_mask"
                },
                "0xc": {
                    "1": "offset_constant"
                },
                "0xffffff7f": {
                    "1": "and_mask"
                },
                "FUN_08004198": {
                    "1": "extract_information",
                    "16": "process_data",
                    "2": "parse_input"
                },
                "param_1": {
                    "1": "data_arr",
                    "17": "data",
                    "2": "data_array",
                    "3": "data_ptr",
                    "4": "input_data"
                },
                "param_1[2]": {
                    "1": "constant_value"
                },
                "param_1[4]": {
                    "1": "increment_flag"
                },
                "param_1[8]": {
                    "1": "data_pointer",
                    "2": "data_ptr"
                },
                "pbVar2": {
                    "1": "byte_array",
                    "16": "byte_ptr",
                    "5": "current_byte",
                    "8": "byte_pointer"
                },
                "sVar1": {
                    "1": "remaining_executions",
                    "2": "iteration_count",
                    "4": "remaining_count",
                    "6": "counter",
                    "7": "remaining_iterations",
                    "9": "count"
                }
            },
            "called": [],
            "calling": [
                "FUN_080046b8"
            ],
            "code": "\nundefined4 process_data_08004198(int *data)\n\n{\n  short count;\n  byte *byte_ptr;\n  \n  if (*(char *)((int)data + 0x39) != '!') {\n    return 2;\n  }\n  if (constant_value == 0x1000) {\n    *(uint *)(*data + 4) = *(ushort *)data_ptr & 0x1ff;\n    if (increment_flag == 0) {\n      data_ptr = data_ptr + 2;\n    }\n    else {\n      data_ptr = data_ptr + 1;\n    }\n  }\n  else {\n    byte_ptr = (byte *)data_ptr;\n    data_ptr = (int)(byte_ptr + 1);\n    *(uint *)(*data + 4) = (uint)*byte_ptr;\n  }\n  count = *(short *)((int)data + 0x26) + -1;\n  *(short *)((int)data + 0x26) = count;\n  if (count == 0) {\n    *(uint *)(*data + 0xc) = *(uint *)(*data + 0xc) & 0xffffff7f;\n    *(uint *)(*data + 0xc) = *(uint *)(*data + 0xc) | 0x40;\n    return 0;\n  }\n  return 0;\n}\n\n",
            "current_name": "process_data_08004198",
            "entrypoint": "0x08004198",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004198": "process_data_08004198",
                "param_1": "data",
                "param_1[2]": "constant_value",
                "param_1[4]": "increment_flag",
                "param_1[8]": "data_ptr",
                "pbVar2": "byte_ptr",
                "sVar1": "count"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004204": {
            "additional_data": {
                "*param_1": {
                    "1": "parameter_pointer"
                },
                "FUN_08003c50": {
                    "1": "get_first_value",
                    "2": "calculate_result1",
                    "3": "calculate_value1"
                },
                "FUN_08003c70": {
                    "1": "get_second_value",
                    "2": "calculate_result2",
                    "3": "calculate_value2"
                },
                "FUN_08004204": {
                    "1": "calculate_and_update_value",
                    "2": "update_config_values",
                    "5": "update_values",
                    "6": "calculate_values"
                },
                "F_08003c50": {
                    "1": "get_calculated_value1"
                },
                "F_08003c70": {
                    "1": "get_calculated_value2"
                },
                "iRam40013808": {
                    "1": "output_value"
                },
                "iVar1": {
                    "1": "var1",
                    "2": "result_1",
                    "21": "result1",
                    "6": "value1"
                },
                "iVar10": {
                    "1": "calc_var10",
                    "15": "result10",
                    "2": "input_value",
                    "4": "value10"
                },
                "iVar2": {
                    "1": "var2",
                    "2": "result_2",
                    "21": "result2",
                    "6": "value2"
                },
                "iVar3": {
                    "1": "calc_var3",
                    "2": "result_3",
                    "21": "result3",
                    "6": "value3"
                },
                "iVar4": {
                    "1": "calc_var4",
                    "2": "result_4",
                    "21": "result4",
                    "6": "value4"
                },
                "iVar5": {
                    "1": "var5",
                    "2": "result_5",
                    "21": "result5",
                    "6": "value5"
                },
                "iVar6": {
                    "1": "calc_var6",
                    "2": "result_6",
                    "21": "result6",
                    "6": "value6"
                },
                "iVar7": {
                    "1": "calc_var7",
                    "2": "result_7",
                    "21": "result7",
                    "6": "value7"
                },
                "iVar8": {
                    "1": "calc_var8",
                    "2": "result_8",
                    "21": "result8",
                    "6": "value8"
                },
                "iVar9": {
                    "1": "calc_var9",
                    "2": "result_9",
                    "21": "result9",
                    "6": "value9"
                },
                "param_1": {
                    "1": "input_values",
                    "2": "param",
                    "3": "input_data",
                    "4": "parameters",
                    "7": "input_array"
                }
            },
            "called": [
                "FUN_08003c50",
                "FUN_08003c70"
            ],
            "calling": [
                "FUN_0800441a"
            ],
            "code": "\nvoid calculate_value_08004204(int *input_array)\n\n{\n  int result1;\n  int result2;\n  int result3;\n  int result4;\n  int result5;\n  int result6;\n  int result7;\n  int result8;\n  int result9;\n  int result10;\n  \n  *(uint *)(*input_array + 0x10) = *(uint *)(*input_array + 0x10) & 0xffffcfff | input_array[3];\n  *(uint *)(*input_array + 0xc) =\n       input_array[2] | input_array[4] | input_array[5] | *(uint *)(*input_array + 0xc) & 0xffffe9f3;\n  *(uint *)(*input_array + 0x14) = *(uint *)(*input_array + 0x14) & 0xfffffcff | input_array[6];\n  result10 = *input_array;\n  if (result10 != 0x40013800) {\n    result1 = FUN_08003c50();\n    result6 = input_array[1];\n    result2 = FUN_08003c50();\n    result7 = input_array[1];\n    result3 = FUN_08003c50();\n    result8 = input_array[1];\n    result4 = FUN_08003c50();\n    result9 = input_array[1];\n    result5 = FUN_08003c50();\n    *(uint *)(result10 + 8) =\n         ((uint)((int)((ulonglong)\n                       (((uint)(result4 * 0x19) / (uint)(result9 << 2) +\n                        (int)(((ulonglong)(uint)(result5 * 0x19) / (ulonglong)(uint)(input_array[1] << 2))\n                             / 100) * -100) * 0x10 + 0x32) * 0x51eb851f >> 0x20) << 0x17) >> 0x1c) +\n         ((((uint)(result2 * 0x19) / (uint)(result7 << 2) +\n           (int)(((ulonglong)(uint)(result3 * 0x19) / (ulonglong)(uint)(result8 << 2)) / 100) * -100) *\n           0x10 + 0x32) / 100 & 0xf0) +\n         (int)(((ulonglong)(uint)(result1 * 0x19) / (ulonglong)(uint)(result6 << 2)) / 100) * 0x10;\n    return;\n  }\n  result10 = FUN_08003c70();\n  result5 = input_array[1];\n  result1 = FUN_08003c70();\n  result6 = input_array[1];\n  result2 = FUN_08003c70();\n  result7 = input_array[1];\n  result3 = FUN_08003c70();\n  result8 = input_array[1];\n  result4 = FUN_08003c70();\n  output_value = ((uint)((int)((ulonglong)\n                               (((uint)(result3 * 0x19) / (uint)(result8 << 2) +\n                                (int)(((ulonglong)(uint)(result4 * 0x19) /\n                                      (ulonglong)(uint)(input_array[1] << 2)) / 100) * -100) * 0x10 +\n                               0x32) * 0x51eb851f >> 0x20) << 0x17) >> 0x1c) +\n                 ((((uint)(result1 * 0x19) / (uint)(result6 << 2) +\n                   (int)(((ulonglong)(uint)(result2 * 0x19) / (ulonglong)(uint)(result7 << 2)) / 100) *\n                   -100) * 0x10 + 0x32) / 100 & 0xf0) +\n                 (int)(((ulonglong)(uint)(result10 * 0x19) / (ulonglong)(uint)(result5 << 2)) / 100) *\n                 0x10;\n  return;\n}\n\n",
            "current_name": "calculate_value_08004204",
            "entrypoint": "0x08004204",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004204": "calculate_value_08004204",
                "iRam40013808": "output_value",
                "iVar1": "result1",
                "iVar10": "result10",
                "iVar2": "result2",
                "iVar3": "result3",
                "iVar4": "result4",
                "iVar5": "result5",
                "iVar6": "result6",
                "iVar7": "result7",
                "iVar8": "result8",
                "iVar9": "result9",
                "param_1": "input_array"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080043b4": {
            "additional_data": {
                "(*param_1)[3]": {
                    "1": "parameter_list[3]"
                },
                "(*param_1)[5]": {
                    "1": "value2"
                },
                "*param_1": {
                    "1": "pointer_to_input_parameters"
                },
                "*param_1[0]": {
                    "1": "ptr_value_1"
                },
                "0": {
                    "1": "min_result"
                },
                "0xffffffff": {
                    "1": "max_threshold"
                },
                "3": {
                    "1": "success"
                },
                "FUN_08001cc4": {
                    "1": "get_result_value"
                },
                "FUN_080043b4": {
                    "1": "check_parameter_validity",
                    "2": "check_condition_and_modify",
                    "3": "validate_parameters",
                    "4": "check_params"
                },
                "iVar1": {
                    "1": "return_value2",
                    "2": "difference",
                    "20": "result"
                },
                "param_1": {
                    "1": "input_pointer",
                    "2": "input_ptr",
                    "5": "param_array"
                },
                "param_2": {
                    "1": "value_2",
                    "2": "condition_1",
                    "6": "mask",
                    "8": "flag"
                },
                "param_3": {
                    "1": "value2",
                    "2": "is_equal",
                    "3": "expected_value",
                    "4": "condition",
                    "5": "flag"
                },
                "param_4": {
                    "1": "limit",
                    "4": "reference_value",
                    "6": "threshold",
                    "9": "comparison_value"
                },
                "param_5": {
                    "1": "value4",
                    "6": "limit",
                    "9": "max_difference"
                },
                "returnValue": {
                    "1": "result"
                }
            },
            "called": [
                "FUN_08001cc4"
            ],
            "calling": [
                "FUN_08004478"
            ],
            "code": "\nundefined4 check_parameters_080043b4(uint **param_array,uint flag,uint flag,int comparison_value,uint max_difference)\n\n{\n  int result;\n  \n  do {\n    if (((flag & ~**param_array) == 0) != flag) {\n      return 0;\n    }\n  } while ((max_difference == 0xffffffff) ||\n          ((max_difference != 0 && (result = FUN_08001cc4(), (uint)(result - comparison_value) <= max_difference))));\n  (*param_array)[3] = (*param_array)[3] & 0xfffffe5f;\n  (*param_array)[5] = (*param_array)[5] & 0xfffffffe;\n  *(undefined *)((int)param_array + 0x39) = 0x20;\n  *(undefined *)((int)param_array + 0x3a) = 0x20;\n  *(undefined *)(param_array + 0xe) = 0;\n  return 3;\n}\n\n",
            "current_name": "check_parameters_080043b4",
            "entrypoint": "0x080043b4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080043b4": "check_parameters_080043b4",
                "iVar1": "result",
                "param_1": "param_array",
                "param_2": "flag",
                "param_3": "flag",
                "param_4": "comparison_value",
                "param_5": "max_difference"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004418": {
            "called": [],
            "calling": [
                "FUN_0800441a"
            ],
            "code": "\nvoid FUNC_08004418(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_08004418",
            "entrypoint": "0x08004418",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_08004418": "FUNC_08004418"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_0800441a": {
            "additional_data": {
                "'*(char *)((int)param_1 + 0x39)'": {
                    "1": "is_null_char"
                },
                "'*(uint *)(*param_1 + 0x10)'": {
                    "1": "modify_value_10"
                },
                "'*(uint *)(*param_1 + 0x14)'": {
                    "1": "modify_value_14"
                },
                "'*(uint *)(*param_1 + 0xc)'": {
                    "1": "modify_value_c"
                },
                "'*(undefined *)((int)param_1 + 0x39)'": {
                    "1": "update_char"
                },
                "'*(undefined *)((int)param_1 + 0x3a)'": {
                    "1": "update_char_3a"
                },
                "'*(undefined *)(param_1 + 0xe)'": {
                    "1": "set_zero"
                },
                "'FUN_08004204(param_1)'": {
                    "1": "modify_data"
                },
                "'param_1[0xf]'": {
                    "1": "set_zero_f"
                },
                "(int)param_1": {
                    "1": "(int)data_ptr"
                },
                "(int)param_1 + 0x39": {
                    "1": "config_flag_address"
                },
                "(int)param_1 + 0x3a": {
                    "1": "new_flag_address"
                },
                "(uint *)(*param_1 + 0x10)": {
                    "1": "value2"
                },
                "(uint *)(*param_1 + 0x14)": {
                    "1": "value3"
                },
                "(uint *)(*param_1 + 0xc)": {
                    "1": "value1"
                },
                "*(char *)((int)dataStructure + 0x39)": {
                    "1": "is_flag_set"
                },
                "*(char *)((int)param + 0x39)": {
                    "1": "is_character_null"
                },
                "*(char *)((int)param_1 + 0x39)": {
                    "1": "is_param_valid"
                },
                "*(char *)config_flag_address": {
                    "1": "config_flag_value"
                },
                "*(uint *)(*config_data + 0x10)": {
                    "1": "field_2"
                },
                "*(uint *)(*config_data + 0x14)": {
                    "1": "field_3"
                },
                "*(uint *)(*config_data + 0xc)": {
                    "1": "field_4"
                },
                "*(uint *)(*dataStructure + 0x10)": {
                    "1": "value2"
                },
                "*(uint *)(*dataStructure + 0x14)": {
                    "1": "value3"
                },
                "*(uint *)(*dataStructure + 0xc)": {
                    "1": "value1"
                },
                "*(uint *)(*param + 0x10)": {
                    "1": "param_value2"
                },
                "*(uint *)(*param + 0x14)": {
                    "1": "param_value3"
                },
                "*(uint *)(*param + 0xc)": {
                    "1": "param_value1"
                },
                "*(uint *)(*param_1 + 0x10)": {
                    "1": "param_flag1",
                    "4": "value2"
                },
                "*(uint *)(*param_1 + 0x14)": {
                    "1": "mask_value_c",
                    "4": "value3"
                },
                "*(uint *)(*param_1 + 0xc)": {
                    "1": "mask_value_a",
                    "4": "value1"
                },
                "*(uint *)(*param_1 + 0xc) | 0x2000": {
                    "1": "updated_value1"
                },
                "*(undefined *)((int)param + 0x39)": {
                    "1": "set_character1"
                },
                "*(undefined *)((int)param + 0x3a)": {
                    "1": "set_character2"
                },
                "*(undefined *)((int)param_1 + 0x39)": {
                    "1": "flag_char"
                },
                "*(undefined *)((int)param_1 + 0x3a)": {
                    "1": "additional_data"
                },
                "*(undefined *)(config_data + 0xe)": {
                    "1": "initialized_flag"
                },
                "*(undefined *)(dataStructure + 0xe)": {
                    "1": "flag"
                },
                "*(undefined *)(param + 0xe)": {
                    "1": "set_zero"
                },
                "*(undefined *)(param_1 + 0xe)": {
                    "1": "reset_value"
                },
                "*config_data + 0xc": {
                    "1": "field_1"
                },
                "*param_1": {
                    "1": "param_pointer"
                },
                "*param_1 + 0x10": {
                    "1": "param_pointer_value10"
                },
                "*param_1 + 0x14": {
                    "1": "param_pointer_value14"
                },
                "*param_1 + 0xc": {
                    "1": "param_pointer_value_c"
                },
                "0": {
                    "1": "success"
                },
                "0x0": {
                    "2": "null"
                },
                "0x10": {
                    "1": "value_2_offset"
                },
                "0x14": {
                    "1": "address_3"
                },
                "0x20": {
                    "1": "new_flag_byte_value"
                },
                "0x2000": {
                    "1": "flag_mask"
                },
                "0x24": {
                    "1": "flag_value"
                },
                "0x39": {
                    "1": "flag_byte_offset"
                },
                "0x3a": {
                    "1": "new_indicator_byte_value"
                },
                "0xc": {
                    "1": "address_1"
                },
                "0xe": {
                    "1": "zero_byte_offset"
                },
                "0xf": {
                    "1": "reset_value"
                },
                "0xffffb7ff": {
                    "1": "mask_2"
                },
                "0xffffdfff": {
                    "1": "mask1"
                },
                "0xffffffd5": {
                    "1": "mask3"
                },
                "1": {
                    "1": "failure"
                },
                "FUNC_08004418": {
                    "1": "perform_initialization",
                    "2": "initialize_data",
                    "3": "perform_action",
                    "4": "reset_function",
                    "6": "reset_data"
                },
                "FUN_08004204": {
                    "1": "perform_operation",
                    "10": "process_data",
                    "2": "update_param"
                },
                "FUN_0800441a": {
                    "1": "update_data",
                    "2": "validate_and_configure",
                    "3": "initialize_param",
                    "6": "initialize_data"
                },
                "char": {
                    "1": "character"
                },
                "char_1": {
                    "1": "flag_char"
                },
                "e": {
                    "1": "initialized_flag"
                },
                "int": {
                    "1": "integer"
                },
                "param[0xf]": {
                    "1": "index"
                },
                "param_1": {
                    "1": "input_param",
                    "2": "param",
                    "3": "input_data",
                    "6": "data_ptr"
                },
                "param_1 + 0x39": {
                    "1": "param_char"
                },
                "param_1 + 0x3a": {
                    "1": "param3_a"
                },
                "param_1 + 0xe": {
                    "1": "param_byte"
                },
                "param_1[0xf]": {
                    "1": "data_ptr[15]",
                    "2": "flag",
                    "3": "value4"
                },
                "uint": {
                    "1": "unsigned_integer"
                },
                "uint_1": {
                    "1": "mask_1"
                },
                "uint_2": {
                    "1": "mask_2"
                },
                "undefined": {
                    "1": "unknown"
                }
            },
            "called": [
                "FUN_08004204",
                "FUN_08004418"
            ],
            "calling": [
                "FUN_08004f4c"
            ],
            "code": "\nunknown4 initialize_data_0800441a(integer *data_ptr)\n\n{\n  if (data_ptr != (integer *)0x0) {\n    if (*(character *)((int)data_ptr + 0x39) == '\\0') {\n      *(unknown *)(data_ptr + 0xe) = 0;\n      FUNC_08004418();\n    }\n    *(unknown *)((int)data_ptr + 0x39) = 0x24;\n    *(unsigned_integer *)(*data_ptr + 0xc) = *(unsigned_integer *)(*data_ptr + 0xc) & 0xffffdfff;\n    FUN_08004204(data_ptr);\n    *(unsigned_integer *)(*data_ptr + 0x10) = *(unsigned_integer *)(*data_ptr + 0x10) & 0xffffb7ff;\n    *(unsigned_integer *)(*data_ptr + 0x14) = *(unsigned_integer *)(*data_ptr + 0x14) & 0xffffffd5;\n    *(unsigned_integer *)(*data_ptr + 0xc) = *(unsigned_integer *)(*data_ptr + 0xc) | 0x2000;\n    value4 = 0;\n    *(unknown *)((int)data_ptr + 0x39) = 0x20;\n    *(unknown *)((int)data_ptr + 0x3a) = 0x20;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "current_name": "initialize_data_0800441a",
            "entrypoint": "0x0800441a",
            "imported": false,
            "improved": true,
            "renaming": {
                "(int)param_1": "(int)data_ptr",
                "FUN_0800441a": "initialize_data_0800441a",
                "char": "character",
                "int": "integer",
                "param_1": "data_ptr",
                "param_1[0xf]": "value4",
                "uint": "unsigned_integer",
                "undefined": "unknown"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004478": {
            "additional_data": {
                "*(byte *)param_2": {
                    "1": "byte_value"
                },
                "*(char *)((int)param_1 + 0x39)": {
                    "1": "status"
                },
                "*(char *)(param_1 + 0xe)": {
                    "1": "flag"
                },
                "*(short *)((int)param_1 + 0x26)": {
                    "1": "remaining_size"
                },
                "*(short *)(param_1 + 9)": {
                    "1": "payload_size"
                },
                "*(uint *)(*param_1 + 4)": {
                    "1": "data_value"
                },
                "*(undefined *)((int)param_1 + 0x39)": {
                    "1": "status"
                },
                "*(undefined *)(param_1 + 0xe)": {
                    "1": "flag"
                },
                "*param_1": {
                    "1": "data_ptr"
                },
                "FUN_08001cc4": {
                    "1": "get_data",
                    "3": "initialize_data",
                    "9": "initialize"
                },
                "FUN_080043b4": {
                    "1": "write_to_buffer",
                    "2": "process_data_helper",
                    "3": "process_sub_function"
                },
                "FUN_08004478": {
                    "1": "parse_data",
                    "2": "decode_and_process_data",
                    "24": "process_data"
                },
                "F_08004478": {
                    "1": "process_data"
                },
                "iVar1": {
                    "1": "status",
                    "10": "return_value",
                    "15": "result",
                    "3": "temp_var"
                },
                "param_1": {
                    "1": "data_array_ptr",
                    "2": "input_data",
                    "3": "input_array",
                    "4": "data_pointer",
                    "8": "data_ptr"
                },
                "param_1[2]": {
                    "1": "flag"
                },
                "param_1[4]": {
                    "1": "flag2"
                },
                "param_2": {
                    "1": "ushort_array_ptr",
                    "2": "input_ptr",
                    "3": "ushort_ptr",
                    "4": "data_array"
                },
                "param_3": {
                    "1": "value_count",
                    "2": "length",
                    "3": "size",
                    "6": "array_length"
                },
                "param_4": {
                    "1": "status",
                    "10": "param_4",
                    "11": "param4",
                    "2": "config",
                    "4": "param"
                },
                "uVar2": {
                    "1": "status_code",
                    "15": "result",
                    "6": "status",
                    "8": "return_value"
                }
            },
            "called": [
                "FUN_08001cc4",
                "FUN_080043b4"
            ],
            "calling": [
                "FUN_080053d4"
            ],
            "code": "\nundefined4 process_data_08004478(int *data_ptr,ushort *data_array,int array_length,undefined4 param4)\n\n{\n  int result;\n  undefined4 result;\n  \n  if (*(char *)((int)data_ptr + 0x39) == ' ') {\n    if (data_array == (ushort *)0x0) {\n      result = 1;\n    }\n    else if (array_length == 0) {\n      result = 1;\n    }\n    else if (*(char *)(data_ptr + 0xe) == '\\x01') {\n      result = 2;\n    }\n    else {\n      *(undefined *)(data_ptr + 0xe) = 1;\n      data_ptr[0xf] = 0;\n      *(undefined *)((int)data_ptr + 0x39) = 0x21;\n      result = FUN_08001cc4();\n      *(short *)(data_ptr + 9) = (short)array_length;\n      *(short *)((int)data_ptr + 0x26) = (short)array_length;\n      while (*(short *)((int)data_ptr + 0x26) != 0) {\n        *(short *)((int)data_ptr + 0x26) = *(short *)((int)data_ptr + 0x26) + -1;\n        if (flag == 0x1000) {\n          result = FUN_080043b4(data_ptr,0x80,0,result,param4);\n          if (result != 0) {\n            return 3;\n          }\n          *(uint *)(*data_ptr + 4) = *data_array & 0x1ff;\n          if (flag2 == 0) {\n            data_array = data_array + 1;\n          }\n          else {\n            data_array = (ushort *)((int)data_array + 1);\n          }\n        }\n        else {\n          result = FUN_080043b4(data_ptr,0x80,0,result,param4);\n          if (result != 0) {\n            return 3;\n          }\n          *(uint *)(*data_ptr + 4) = (uint)*(byte *)data_array;\n          data_array = (ushort *)((int)data_array + 1);\n        }\n      }\n      result = FUN_080043b4(data_ptr,0x40,0,result,param4);\n      if (result == 0) {\n        *(undefined *)((int)data_ptr + 0x39) = 0x20;\n        *(undefined *)(data_ptr + 0xe) = 0;\n        result = 0;\n      }\n      else {\n        result = 3;\n      }\n    }\n  }\n  else {\n    result = 2;\n  }\n  return result;\n}\n\n",
            "current_name": "process_data_08004478",
            "entrypoint": "0x08004478",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004478": "process_data_08004478",
                "iVar1": "result",
                "param_1": "data_ptr",
                "param_1[2]": "flag",
                "param_1[4]": "flag2",
                "param_2": "data_array",
                "param_3": "array_length",
                "param_4": "param4",
                "uVar2": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800455a": {
            "additional_data": {
                "(char *)((int)param_1 + 0x39)": {
                    "1": "char_pointer_1"
                },
                "(char *)(param_1 + 0xe)": {
                    "1": "char_pointer_2"
                },
                "(int)param_1 + 0x26": {
                    "1": "input_array[38]"
                },
                "(int)param_1 + 0x39": {
                    "1": "input_array[57]"
                },
                "(int)param_1 + 0xc": {
                    "1": "input_array[12]"
                },
                "*((int)param_1 + 0x39)": {
                    "1": "input_array[0x39]"
                },
                "*(char *)((int)param_1 + 0x39)": {
                    "1": "array_character",
                    "4": "char_value"
                },
                "*(char *)(param_1 + 0xe)": {
                    "1": "flag_value",
                    "2": "input_array[0xe]",
                    "4": "flag"
                },
                "*(short *)((int)param_1 + 0x26)": {
                    "1": "short_value_offset",
                    "2": "array_element3"
                },
                "*(short *)(param_1 + 9)": {
                    "1": "short_value_1",
                    "2": "result2"
                },
                "*(uint *)(*data + 0xc)": {
                    "1": "pointer_data"
                },
                "*(uint *)(*param_1 + 0xc)": {
                    "1": "array_pointer_offset",
                    "3": "pointer_value"
                },
                "*(undefined *)((int)param_1 + 0x39)": {
                    "1": "data_flag_update",
                    "2": "input_array[0x39]"
                },
                "*(undefined *)(param_1 + 0xe)": {
                    "1": "flag2",
                    "2": "flag_reset"
                },
                "*param_1": {
                    "1": "input_array[0]"
                },
                "*param_1 + 0xc": {
                    "1": "input_array[12]"
                },
                "0x21": {
                    "1": "new_char_value"
                },
                "0x26": {
                    "1": "result3"
                },
                "0x39": {
                    "1": "space_character"
                },
                "0xe": {
                    "1": "flag_ptr"
                },
                "0xf": {
                    "1": "result4"
                },
                "8": {
                    "1": "result1"
                },
                "9": {
                    "1": "result2"
                },
                "DAT_*": {
                    "1": "<unchanged>"
                },
                "FUN_0800455a": {
                    "1": "validate_parameters",
                    "11": "validate_input",
                    "2": "parse_input",
                    "3": "initialize_data",
                    "4": "update_data",
                    "5": "process_data"
                },
                "PTR_*": {
                    "1": "<unchanged>"
                },
                "byte1": {
                    "1": "data_byte1"
                },
                "byte2": {
                    "1": "data_byte2"
                },
                "char *)((int)param_1 + 0x39)": {
                    "1": "input_data_end"
                },
                "char1": {
                    "1": "data_char1"
                },
                "char2": {
                    "1": "data_char2"
                },
                "config_array": {
                    "1": "config"
                },
                "data + 0x39": {
                    "1": "condition_char"
                },
                "data + 0xe": {
                    "1": "flag3"
                },
                "data[0xf]": {
                    "1": "counter"
                },
                "data[8]": {
                    "1": "data_size"
                },
                "data[9]": {
                    "1": "value4"
                },
                "e": {
                    "1": "flag"
                },
                "inputArray": {
                    "1": "input_array"
                },
                "inputArray + 0x39": {
                    "1": "input_array[57]"
                },
                "inputArray + 0xe": {
                    "1": "input_array[14]"
                },
                "input_array[0x39]": {
                    "1": "array_char"
                },
                "input_array[0xe]": {
                    "1": "array_element"
                },
                "input_array[0xf]": {
                    "1": "array_index_0xf"
                },
                "input_array[8]": {
                    "1": "array_index_8"
                },
                "input_array[9]": {
                    "1": "array_index_9"
                },
                "input_data": {
                    "1": "input_array"
                },
                "int1": {
                    "1": "data_int1"
                },
                "int2": {
                    "1": "data_int2"
                },
                "param_1": {
                    "1": "input_ptr",
                    "10": "input_array",
                    "2": "data_ptr",
                    "4": "input_data",
                    "6": "data"
                },
                "param_1 + 0x26": {
                    "1": "flag2"
                },
                "param_1 + 0x39": {
                    "1": "input_array[57]"
                },
                "param_1 + 0xe": {
                    "1": "array_position"
                },
                "param_1 + 9": {
                    "1": "input_array[9]"
                },
                "param_1+0xe": {
                    "1": "flag"
                },
                "param_1[0xf]": {
                    "1": "input_array_index_0xf",
                    "2": "array_element4",
                    "3": "input_array[0xf]"
                },
                "param_1[8]": {
                    "1": "data_offset",
                    "2": "result1",
                    "4": "input_array[8]"
                },
                "param_1[9]": {
                    "1": "result_length"
                },
                "param_2": {
                    "1": "param_2_value",
                    "19": "value1",
                    "9": "value_1"
                },
                "param_2 == 0": {
                    "1": "length_is_zero"
                },
                "param_3": {
                    "1": "param_3_value",
                    "19": "value2",
                    "2": "value",
                    "9": "value_2"
                },
                "param_3 == 0": {
                    "1": "value_is_zero"
                },
                "short *)((int)param_1 + 0x26)": {
                    "1": "input_data[10]"
                },
                "short1": {
                    "1": "data_short1"
                },
                "short2": {
                    "1": "data_short2"
                },
                "value1": {
                    "1": "value1"
                },
                "value2": {
                    "1": "value2"
                },
                "value3": {
                    "1": "0x80"
                },
                "value_1": {
                    "1": "length"
                },
                "value_2": {
                    "1": "limit"
                }
            },
            "called": [],
            "calling": [
                "FUN_08005604",
                "FUN_08005568"
            ],
            "code": "\nundefined4 validate_input_0800455a(int *input_array,int value1,int value2)\n\n{\n  if (*(char *)((int)input_array + 0x39) != ' ') {\n    return 2;\n  }\n  if (value1 == 0) {\n    return 1;\n  }\n  if (value2 == 0) {\n    return 1;\n  }\n  if (*(char *)(input_array + 0xe) != '\\x01') {\n    input_array[8] = value1;\n    *(short *)(input_array + 9) = (short)value2;\n    *(short *)((int)input_array + 0x26) = (short)value2;\n    input_array[0xf] = 0;\n    *(undefined *)((int)input_array + 0x39) = 0x21;\n    *(undefined *)(input_array + 0xe) = 0;\n    *(uint *)(*input_array + 0xc) = *(uint *)(*input_array + 0xc) | 0x80;\n    return 0;\n  }\n  return 2;\n}\n\n",
            "current_name": "validate_input_0800455a",
            "entrypoint": "0x0800455a",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800455a": "validate_input_0800455a",
                "param_1": "input_array",
                "param_1[0xf]": "input_array[0xf]",
                "param_1[8]": "input_array[8]",
                "param_2": "value1",
                "param_3": "value2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080045a2": {
            "additional_data": {
                "(char *)(param_1 + 0xe)": {
                    "1": "flag"
                },
                "(param_1 + 0xe)": {
                    "1": "(ptr_to_element)"
                },
                "(uint *)(*param_1 + 0x14)": {
                    "1": "pointer2"
                },
                "(uint *)(*param_1 + 0xc)": {
                    "1": "pointer1"
                },
                "*(char *)((int)param_1 + 0x3a)": {
                    "1": "data[58]",
                    "2": "char_at_index_58"
                },
                "*(char *)(param_1 + 0xe)": {
                    "1": "input_array_flag",
                    "2": "char_at_index_14"
                },
                "*(short *)((int)param_1 + 0x2e)": {
                    "1": "array[0x2e]",
                    "2": "short_at_index_46",
                    "3": "short_value2",
                    "4": "short_value_2"
                },
                "*(short *)(param_1 + 0xb)": {
                    "1": "store_value_2",
                    "2": "short_at_index_11",
                    "4": "short_value_1"
                },
                "*(uint *)(*param_1 + 0x14)": {
                    "1": "pointer_value_4"
                },
                "*(uint *)(*param_1 + 0xc)": {
                    "1": "uint_value_1"
                },
                "*(undefined *)((int)param_1 + 0x3a)": {
                    "1": "flag_char",
                    "2": "undefined_at_index_58",
                    "3": "undefined_value"
                },
                "*(undefined *)(param_1 + 0xe)": {
                    "1": "data[14]",
                    "2": "undefined_at_index_14"
                },
                "*param_1": {
                    "1": "variable_1"
                },
                "*param_1 + 0x14": {
                    "1": "variable_3"
                },
                "*param_1 + 0xc": {
                    "1": "variable_2"
                },
                "0x14": {
                    "1": "ptr_d"
                },
                "0x22": {
                    "1": "final_char"
                },
                "0x2e": {
                    "1": "another_element"
                },
                "0x3a": {
                    "1": "space_check",
                    "2": "flag"
                },
                "0xb": {
                    "1": "buf_value"
                },
                "0xc": {
                    "1": "ptr_c"
                },
                "0xe": {
                    "1": "flag_check"
                },
                "0xf": {
                    "1": "counter"
                },
                "10": {
                    "1": "buf_length"
                },
                "DAT_0800ac1c": {
                    "1": "constant_1"
                },
                "DAT_0800ac24": {
                    "1": "constant_2"
                },
                "FUN_080045a2": {
                    "1": "verify_conditions_and_update",
                    "13": "validate_input",
                    "2": "update_data",
                    "3": "process_data"
                },
                "array": {
                    "1": "input_array"
                },
                "char": {
                    "1": "character"
                },
                "data": {
                    "1": "data"
                },
                "input_array": {
                    "2": "array"
                },
                "input_buffer": {
                    "1": "input_buffer"
                },
                "input_buffer + 0x2e": {
                    "1": "value_2_updated"
                },
                "input_buffer + 0x3a": {
                    "1": "character_update"
                },
                "input_buffer[10]": {
                    "1": "value_1_updated"
                },
                "input_buffer[11]": {
                    "1": "value_2_updated"
                },
                "input_buffer[12]": {
                    "1": "pointer_value_1"
                },
                "input_buffer[12] | 0x100": {
                    "1": "pointer_condition_1"
                },
                "input_buffer[12] | 0x20": {
                    "1": "pointer_condition_3"
                },
                "input_buffer[14]": {
                    "1": "character_update"
                },
                "input_buffer[15]": {
                    "1": "value_3"
                },
                "input_buffer[20]": {
                    "1": "pointer_value_2"
                },
                "input_buffer[20] | 1": {
                    "1": "pointer_condition_2"
                },
                "input_data": {
                    "1": "data"
                },
                "input_ptr": {
                    "1": "input_buffer"
                },
                "int": {
                    "1": "integer"
                },
                "param_1": {
                    "1": "input_ptr",
                    "2": "input_data",
                    "5": "array",
                    "6": "data",
                    "9": "input_array"
                },
                "param_1 + 0x2e": {
                    "1": "ptr_to_short2"
                },
                "param_1 + 0xb": {
                    "1": "ptr_to_short1"
                },
                "param_1 + 0xe": {
                    "1": "ptr_to_element"
                },
                "param_1[0xf]": {
                    "1": "flag2",
                    "2": "array[15]",
                    "4": "input_array[0xf]"
                },
                "param_1[10]": {
                    "1": "data_offset",
                    "2": "params[10]",
                    "6": "input_array[10]"
                },
                "param_1[11]": {
                    "1": "input_array[11]"
                },
                "param_1[14]": {
                    "1": "input_array[14]"
                },
                "param_2": {
                    "1": "size_of_param_1",
                    "13": "value1",
                    "3": "length",
                    "4": "size",
                    "9": "value_1"
                },
                "param_2 == 0": {
                    "1": "is_value1_zero"
                },
                "param_3": {
                    "1": "y_coord",
                    "13": "value2",
                    "7": "value",
                    "9": "value_2"
                },
                "param_3 == 0": {
                    "1": "is_value2_zero"
                },
                "parseInput": {
                    "1": "parse_input"
                },
                "parse_input": {
                    "1": "parse_input"
                },
                "ptr_1": {
                    "1": "first_pointer"
                },
                "ptr_2": {
                    "1": "second_pointer"
                },
                "short": {
                    "1": "short_value"
                },
                "size": {
                    "1": "buffer_size"
                },
                "undefined4": {
                    "1": "return_value"
                },
                "value": {
                    "1": "buffer_value"
                },
                "value1": {
                    "1": "value1"
                },
                "value2": {
                    "1": "value2"
                },
                "value_1": {
                    "1": "param_2"
                },
                "value_2": {
                    "1": "param_3"
                },
                "x_coord": {
                    "1": "x_coordinate"
                },
                "y_coord": {
                    "1": "y_coordinate"
                }
            },
            "called": [],
            "calling": [
                "FUN_08005510",
                "FUN_080054d4"
            ],
            "code": "\nreturn_value validate_input_080045a2(integer *input_array,integer value1,integer value2)\n\n{\n  if (*(character *)((integer)input_array + 0x3a) != ' ') {\n    return 2;\n  }\n  if (value1 == 0) {\n    return 1;\n  }\n  if (value2 == 0) {\n    return 1;\n  }\n  if (*(character *)(input_array + 0xe) != '\\x01') {\n    input_array[10] = value1;\n    *(short_value *)(input_array + 0xb) = (short_value)value2;\n    *(short_value *)((integer)input_array + 0x2e) = (short_value)value2;\n    input_array[0xf] = 0;\n    *(undefined *)((integer)input_array + 0x3a) = 0x22;\n    *(undefined *)(input_array + 0xe) = 0;\n    *(uinteger *)(*input_array + 0xc) = *(uinteger *)(*input_array + 0xc) | 0x100;\n    *(uinteger *)(*input_array + 0x14) = *(uinteger *)(*input_array + 0x14) | 1;\n    *(uinteger *)(*input_array + 0xc) = *(uinteger *)(*input_array + 0xc) | 0x20;\n    return 0;\n  }\n  return 2;\n}\n\n",
            "current_name": "validate_input_080045a2",
            "entrypoint": "0x080045a2",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080045a2": "validate_input_080045a2",
                "char": "character",
                "int": "integer",
                "param_1": "input_array",
                "param_1[0xf]": "input_array[0xf]",
                "param_1[10]": "input_array[10]",
                "param_2": "value1",
                "param_3": "value2",
                "short": "short_value",
                "undefined4": "return_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080045fe": {
            "additional_data": {
                "(int)param_1 + 0x39": {
                    "1": "char_offset"
                },
                "*(uint *)(*param_1 + 0xc)": {
                    "1": "flag_value"
                },
                "*(undefined *)((int)param_1 + 0x39)": {
                    "1": "status_flag"
                },
                "*param_1": {
                    "1": "input_array_pointer"
                },
                "0xc": {
                    "1": "offset"
                },
                "0xffffffbf": {
                    "1": "mask"
                },
                "<original_function_name>": {
                    "1": "clear_bits_and_set_flag"
                },
                "<param_1>": {
                    "1": "ptr_data"
                },
                "FUN_080045fe": {
                    "1": "update_parameter_value",
                    "2": "update_value_and_call_function",
                    "5": "update_flags_and_call_function"
                },
                "FUN_08005604": {
                    "1": "perform_operation",
                    "2": "execute_secondary_function",
                    "4": "execute_sub_function"
                },
                "param_1": {
                    "1": "input_pointer",
                    "2": "parameter",
                    "3": "input_array",
                    "6": "data_pointer"
                }
            },
            "called": [
                "FUN_08005604"
            ],
            "calling": [
                "FUN_080046b8"
            ],
            "code": "\nundefined4 set_flag_and_call_function_080045fe(int *data_pointer)\n\n{\n  *(uint *)(*data_pointer + 0xc) = *(uint *)(*data_pointer + 0xc) & 0xffffffbf;\n  *(undefined *)((int)data_pointer + 0x39) = 0x20;\n  FUN_08005604();\n  return 0;\n}\n\n",
            "current_name": "set_flag_and_call_function_080045fe",
            "entrypoint": "0x080045fe",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080045fe": "set_flag_and_call_function_080045fe",
                "param_1": "data_pointer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004618": {
            "additional_data": {
                "FUN_08004618": {
                    "1": "parse_quote",
                    "15": "process_data",
                    "2": "process_string",
                    "3": "parse_string"
                },
                "FUN_080055e0": {
                    "1": "execute_function"
                },
                "param_1": {
                    "1": "input_array",
                    "14": "data",
                    "2": "data_ptr",
                    "3": "input",
                    "8": "input_data"
                },
                "pbVar1": {
                    "1": "new_byte",
                    "11": "byte_pointer",
                    "14": "byte_ptr",
                    "4": "output_byte"
                },
                "puVar3": {
                    "1": "new_pointer",
                    "2": "byte_pointer2",
                    "9": "undefined_ptr"
                },
                "sVar2": {
                    "1": "tmp_short",
                    "10": "count",
                    "13": "counter",
                    "4": "remaining_count"
                }
            },
            "called": [
                "FUN_080055e0"
            ],
            "calling": [
                "FUN_080046b8"
            ],
            "code": "\nundefined4 process_data_08004618(int *data)\n\n{\n  byte *byte_ptr;\n  short counter;\n  undefined *undefined_pointer;\n  \n  if (*(char *)((int)data + 0x3a) != '\\\"') {\n    return 2;\n  }\n  if (data[2] == 0x1000) {\n    if (data[4] == 0) {\n      *(ushort *)data[10] = (ushort)((uint)(*(int *)(*data + 4) << 0x17) >> 0x17);\n      data[10] = data[10] + 2;\n    }\n    else {\n      *(ushort *)data[10] = (ushort)*(undefined4 *)(*data + 4) & 0xff;\n      data[10] = data[10] + 1;\n    }\n  }\n  else if (data[4] == 0) {\n    undefined_pointer = (undefined *)data[10];\n    data[10] = (int)(undefined_pointer + 1);\n    *undefined_pointer = (char)*(undefined4 *)(*data + 4);\n  }\n  else {\n    byte_ptr = (byte *)data[10];\n    data[10] = (int)(byte_ptr + 1);\n    *byte_ptr = (byte)*(undefined4 *)(*data + 4) & 0x7f;\n  }\n  counter = *(short *)((int)data + 0x2e) + -1;\n  *(short *)((int)data + 0x2e) = counter;\n  if (counter != 0) {\n    return 0;\n  }\n  *(uint *)(*data + 0xc) = *(uint *)(*data + 0xc) & 0xffffffdf;\n  *(uint *)(*data + 0xc) = *(uint *)(*data + 0xc) & 0xfffffeff;\n  *(uint *)(*data + 0x14) = *(uint *)(*data + 0x14) & 0xfffffffe;\n  *(undefined *)((int)data + 0x3a) = 0x20;\n  FUN_080055e0();\n  return 0;\n}\n\n",
            "current_name": "process_data_08004618",
            "entrypoint": "0x08004618",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004618": "process_data_08004618",
                "param_1": "data",
                "pbVar1": "byte_ptr",
                "puVar3": "undefined_pointer",
                "sVar2": "counter"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080046b8": {
            "additional_data": {
                "*param_1": {
                    "1": "param"
                },
                "FUNC_0800258c": {
                    "1": "check_condition"
                },
                "FUNC_08005650": {
                    "1": "cleanup_data",
                    "2": "cleanup_function",
                    "7": "cleanup"
                },
                "FUN_0800258c": {
                    "1": "perform_operation"
                },
                "FUN_0800417c": {
                    "1": "function_with_flags_non_zero_and_0x40",
                    "2": "process_flag_d"
                },
                "FUN_08004198": {
                    "1": "handle_flag80",
                    "2": "process_flag_a"
                },
                "FUN_080045fe": {
                    "1": "perform_action_b",
                    "2": "process_flag_b"
                },
                "FUN_08004618": {
                    "1": "do_something3",
                    "2": "process_flag_c"
                },
                "FUN_080046b8": {
                    "1": "analyze_parameters",
                    "2": "process_flags",
                    "4": "check_and_process_flags"
                },
                "LAB_080047d8_1": {
                    "1": "label1"
                },
                "iVar1": {
                    "1": "index",
                    "22": "result",
                    "7": "return_value"
                },
                "param_1": {
                    "1": "param_list",
                    "12": "parameters",
                    "2": "arguments",
                    "3": "flags"
                },
                "param_1[0xd]": {
                    "1": "nested_parameters"
                },
                "param_1[0xf]": {
                    "1": "result_flags"
                },
                "puVar3": {
                    "1": "ptr_var",
                    "2": "param",
                    "9": "ptr"
                },
                "uVar2": {
                    "1": "value_2",
                    "2": "var1",
                    "3": "var2",
                    "6": "value2"
                },
                "uVar4": {
                    "1": "value_2",
                    "2": "condition",
                    "3": "value4",
                    "8": "flag"
                },
                "uVar5": {
                    "1": "var_3",
                    "2": "first_value",
                    "3": "value1"
                },
                "uint": {
                    "1": "unsigned_integer"
                }
            },
            "called": [
                "FUN_08004198",
                "FUN_080045fe",
                "FUN_08004618",
                "FUN_0800258c",
                "FUN_08005650",
                "FUN_0800417c"
            ],
            "calling": [],
            "code": "\nvoid check_and_process_flags_080046b8(unsigned_integer **parameters)\n\n{\n  int result;\n  unsigned_integer value2;\n  unsigned_integer *pointer;\n  unsigned_integer flag;\n  unsigned_integer var5;\n  \n  pointer = *parameters;\n  var5 = *pointer;\n  value2 = pointer[3];\n  if ((((var5 & 0xf) == 0) && ((var5 & 0x20) != 0)) && ((value2 & 0x20) != 0)) {\n    FUN_08004618(parameters);\n    return;\n  }\n  if (((var5 & 0xf) == 0) || ((flag = pointer[5] & 1, flag == 0 && ((value2 & 0x120) == 0)))) {\n    if (((var5 & 0x80) != 0) && ((value2 & 0x80) != 0)) {\n      FUN_08004198(parameters);\n      return;\n    }\n    if (((var5 & 0x40) != 0) && ((value2 & 0x40) != 0)) {\n      FUN_080045fe(parameters);\n    }\n  }\n  else {\n    if (((var5 & 1) != 0) && ((value2 & 0x100) != 0)) {\n      result_flags = (unsigned_integer *)((unsigned_integer)result_flags | 1);\n    }\n    if (((var5 & 4) != 0) && (flag != 0)) {\n      result_flags = (unsigned_integer *)((unsigned_integer)result_flags | 2);\n    }\n    if (((var5 & 2) != 0) && (flag != 0)) {\n      result_flags = (unsigned_integer *)((unsigned_integer)result_flags | 4);\n    }\n    if (((var5 & 8) != 0) && (flag != 0)) {\n      result_flags = (unsigned_integer *)((unsigned_integer)result_flags | 8);\n    }\n    if (result_flags != (unsigned_integer *)0x0) {\n      if (((var5 & 0x20) != 0) && ((value2 & 0x20) != 0)) {\n        FUN_08004618(parameters);\n      }\n      if ((((unsigned_integer)result_flags & 8) == 0) && (((*parameters)[5] & 0x40) == 0)) {\n        FUNC_08005650(parameters);\n        result_flags = (unsigned_integer *)0x0;\n        return;\n      }\n      FUN_0800417c(parameters);\n      pointer = *parameters;\n      if ((pointer[5] & 0x40) == 0) {\n        FUNC_08005650(parameters);\n        return;\n      }\n      pointer[5] = pointer[5] & 0xffffffbf;\n      if (nested_parameters == (unsigned_integer *)0x0) {\n        FUNC_08005650(parameters);\n        return;\n      }\n      nested_parameters[0xd] = (unsigned_integer)&label1;\n      result = FUN_0800258c(nested_parameters);\n      if (result != 0) {\n        (*(code *)nested_parameters[0xd])();\n        return;\n      }\n    }\n  }\n  return;\n}\n\n",
            "current_name": "check_and_process_flags_080046b8",
            "entrypoint": "0x080046b8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080046b8": "check_and_process_flags_080046b8",
                "LAB_080047d8_1": "label1",
                "iVar1": "result",
                "param_1": "parameters",
                "param_1[0xd]": "nested_parameters",
                "param_1[0xf]": "result_flags",
                "puVar3": "pointer",
                "uVar2": "value2",
                "uVar4": "flag",
                "uVar5": "var5",
                "uint": "unsigned_integer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080047e8": {
            "additional_data": {
                "*(byte *)(param_1 + 0x39)": {
                    "1": "byte_at_offset2",
                    "13": "byte2",
                    "4": "second_byte"
                },
                "*(byte *)(param_1 + 0x3a)": {
                    "1": "byte_at_offset1",
                    "13": "byte1",
                    "4": "first_byte"
                },
                "0x39": {
                    "1": "offset2",
                    "2": "offset_b"
                },
                "0x3a": {
                    "1": "offset1",
                    "2": "offset_a"
                },
                "<original_function_name>": {
                    "1": "combine_bytes"
                },
                "<variable_name_1>": {
                    "1": "byte1"
                },
                "<variable_name_2>": {
                    "1": "byte2"
                },
                "FUN_080047e8": {
                    "1": "combine_two_bytes",
                    "29": "combine_bytes"
                },
                "byte": {
                    "1": "result"
                },
                "local_1": {
                    "1": "byte1"
                },
                "local_2": {
                    "1": "byte2"
                },
                "param_1": {
                    "1": "offset",
                    "15": "input",
                    "2": "input_offset",
                    "9": "address"
                },
                "param_1 + 0x39": {
                    "1": "second_byte_address"
                },
                "param_1 + 0x3a": {
                    "1": "first_byte_address"
                }
            },
            "called": [],
            "calling": [
                "FUN_080054b0",
                "FUN_0800548c"
            ],
            "code": "\ncombined_byte combine_bytes_080047e8(int input)\n\n{\n  return *(combined_byte *)(input + 0x3a) | *(combined_byte *)(input + 0x39);\n}\n\n",
            "current_name": "combine_bytes_080047e8",
            "entrypoint": "0x080047e8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080047e8": "combine_bytes_080047e8",
                "byte": "combined_byte",
                "param_1": "input"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080047f4": {
            "additional_data": {
                "&": {
                    "1": "bitwise_and"
                },
                "(param_1 & 0xf)": {
                    "2": "bit_offset"
                },
                "*(uint *)(param_2 + ((param_1 << 0x18) >> 0x1c) * 4)": {
                    "1": "bit_array"
                },
                "*(uint *)(param_2 + (shifted_value * 4))": {
                    "1": "extracted_value"
                },
                "*(uint *)(shiftedPtr)": {
                    "1": "value"
                },
                "<variable_name>": {
                    "1": "<new_variable_name>"
                },
                ">>": {
                    "1": "right_shift"
                },
                "DAT_": {
                    "1": "dat"
                },
                "FUN_080047f4": {
                    "1": "extract_bit_from_u_int",
                    "13": "get_bit_value",
                    "2": "retrieve_bit_at_position",
                    "6": "extract_bit"
                },
                "PTR_": {
                    "1": "ptr_"
                },
                "extracted_value >> bit_mask": {
                    "1": "result"
                },
                "newVar_1": {
                    "1": "shifted_index"
                },
                "newVar_2": {
                    "1": "bit_mask"
                },
                "newVar_3": {
                    "1": "result"
                },
                "param_1": {
                    "1": "word",
                    "12": "value",
                    "2": "number",
                    "3": "bit_index",
                    "4": "index"
                },
                "param_1 & 0xf": {
                    "2": "bit_mask"
                },
                "param_1 << 0x18": {
                    "1": "shifted_data"
                },
                "param_2": {
                    "1": "uint_array",
                    "2": "array_ptr",
                    "3": "base_address",
                    "7": "address",
                    "8": "array_address"
                },
                "param_3": {
                    "1": "index"
                },
                "param_4": {
                    "1": "mask"
                },
                "ptr + ((shiftedData >> 0x1c) * 4)": {
                    "1": "shifted_ptr"
                },
                "return": {
                    "1": "bit_value"
                },
                "shifted_index >> 0x1c": {
                    "1": "masked_index"
                },
                "shifted_input_value >> 0x1c": {
                    "1": "shifted_value"
                },
                "value >> mask & 1": {
                    "1": "bit_value"
                }
            },
            "called": [],
            "calling": [
                "FUN_08005848",
                "FUN_080057b4",
                "FUN_08005890"
            ],
            "code": "\nuint get_bit_value_080047f4(uint value,int array_address)\n\n{\n  bit_value *(uint *)(array_address + ((value << 0x18) >> 0x1c) * 4) >> (value bitwise_and 0xf) bitwise_and 1;\n}\n\n",
            "current_name": "get_bit_value_080047f4",
            "entrypoint": "0x080047f4",
            "imported": false,
            "improved": true,
            "renaming": {
                "&": "bitwise_and",
                "FUN_080047f4": "get_bit_value_080047f4",
                "param_1": "value",
                "param_2": "array_address",
                "return": "bit_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800480a": {
            "additional_data": {
                "*(uint *)(param_2 + uVar1 * 4)": {
                    "1": "target_element"
                },
                "<unmodified>": {
                    "1": "original_name"
                },
                "FUN_0800480a": {
                    "1": "update_bit_array",
                    "10": "set_bit_in_array",
                    "2": "update_bit_in_array",
                    "3": "update_bit",
                    "9": "set_bit"
                },
                "param_1": {
                    "13": "bit_position",
                    "2": "position",
                    "3": "bit_index",
                    "7": "value"
                },
                "param_1 & 0xf": {
                    "2": "bit_offset"
                },
                "param_2": {
                    "1": "array_pointer",
                    "10": "array_address",
                    "14": "array",
                    "2": "memory_address"
                },
                "uVar1": {
                    "1": "shift_amount",
                    "11": "index",
                    "2": "array_index",
                    "3": "shifted_index",
                    "4": "byte_offset"
                }
            },
            "called": [],
            "calling": [
                "FUN_080057b4"
            ],
            "code": "\nvoid set_bit_in_array_0800480a(uint bit_position,int array)\n\n{\n  uint index;\n  \n  index = (bit_position << 0x18) >> 0x1c;\n  *(uint *)(array + index * 4) = *(uint *)(array + index * 4) | 1 << (bit_position & 0xf);\n  return;\n}\n\n",
            "current_name": "set_bit_in_array_0800480a",
            "entrypoint": "0x0800480a",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800480a": "set_bit_in_array_0800480a",
                "param_1": "bit_position",
                "param_2": "array",
                "uVar1": "index"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004828": {
            "additional_data": {
                "&(arrayStart + shift * 4)": {
                    "1": "target_address"
                },
                "(param_1 << 0x18) >> 0x1c": {
                    "1": "shifted_index"
                },
                "*(uint *)(param_2 + uVar1 * 4)": {
                    "1": "current_value"
                },
                "1": {
                    "1": "bit_mask"
                },
                "1 << (param_1 & 0xf)": {
                    "1": "bit_mask"
                },
                "FUN_08004828": {
                    "1": "modify_and_store_value",
                    "11": "update_bit",
                    "2": "update_memory_value",
                    "3": "update_bit_in_array"
                },
                "param_1": {
                    "1": "bit_pos",
                    "11": "bit_position",
                    "2": "index",
                    "6": "input_value",
                    "9": "value"
                },
                "param_1 & 0xf": {
                    "1": "bit_position"
                },
                "param_2": {
                    "1": "data_address",
                    "15": "array",
                    "2": "array_start",
                    "3": "memory_address",
                    "6": "array_address"
                },
                "uVar1": {
                    "1": "array_index",
                    "2": "shifted_position",
                    "7": "shifted_index",
                    "8": "index"
                }
            },
            "called": [],
            "calling": [
                "FUN_080057b4"
            ],
            "code": "\nvoid update_bit_08004828(uint bit_position,int array)\n\n{\n  uint index;\n  \n  index = (bit_position << 0x18) >> 0x1c;\n  *(uint *)(array + index * 4) = *(uint *)(array + index * 4) & ~(1 << (bit_position & 0xf));\n  return;\n}\n\n",
            "current_name": "update_bit_08004828",
            "entrypoint": "0x08004828",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004828": "update_bit_08004828",
                "param_1": "bit_position",
                "param_2": "array",
                "uVar1": "index"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004848": {
            "additional_data": {
                "0": {
                    "1": "memory_address_1",
                    "2": "memory_address_0",
                    "6": "base_address"
                },
                "1": {
                    "1": "case1_return_value",
                    "2": "memory_address_1"
                },
                "2": {
                    "1": "addr_2",
                    "2": "third_address"
                },
                "3": {
                    "1": "address_d",
                    "2": "fourth_address"
                },
                "4": {
                    "1": "address_offset4",
                    "2": "address_5"
                },
                "FUN_08004848": {
                    "1": "map_value_to_address",
                    "2": "get_address",
                    "21": "get_memory_address",
                    "3": "map_param_to_address"
                },
                "case 0": {
                    "1": "return_address_a"
                },
                "case 1": {
                    "1": "return_address_b"
                },
                "case 2": {
                    "1": "return_address_c"
                },
                "case 3": {
                    "1": "return_address_d"
                },
                "case 4": {
                    "1": "return_address_e"
                },
                "param_1": {
                    "1": "input_param",
                    "3": "param",
                    "5": "input_value",
                    "7": "index",
                    "8": "input"
                },
                "return": {
                    "2": "address",
                    "3": "memory_address"
                }
            },
            "called": [],
            "calling": [
                "FUN_08005848",
                "FUN_08005890"
            ],
            "code": "\nundefined4 get_memory_address_08004848(undefined4 input)\n\n{\n  switch(input) {\n  case 0:\n    memory_address 0x40010800;\n  case 1:\n    memory_address 0x40010c00;\n  case 2:\n    memory_address 0x40011000;\n  case 3:\n    memory_address 0x40011400;\n  case 4:\n    memory_address 0x40011800;\n  default:\n    memory_address 0;\n  }\n}\n\n",
            "current_name": "get_memory_address_08004848",
            "entrypoint": "0x08004848",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004848": "get_memory_address_08004848",
                "param_1": "input",
                "return": "memory_address"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004884": {
            "additional_data": {
                "FUN_08004884": {
                    "1": "update_data_register",
                    "2": "set_flag_value",
                    "9": "configure_peripheral"
                },
                "_DAT_40021018": {
                    "1": "memory_address"
                },
                "param_1": {
                    "1": "param",
                    "3": "flag_index",
                    "4": "input_value",
                    "7": "peripheral_index"
                },
                "uVar1": {
                    "1": "new_address",
                    "2": "memory_address",
                    "3": "peripheral_address",
                    "4": "base_address",
                    "5": "result",
                    "6": "address"
                }
            },
            "called": [],
            "calling": [
                "FUN_08004bb0",
                "FUN_08004974",
                "FUN_08004f4c"
            ],
            "code": "\n\n\nundefined4 configure_peripheral_08004884(undefined4 peripheral_index)\n\n{\n  undefined4 address;\n  \n  switch(peripheral_index) {\n  case 0:\n    _DAT_40021018 = _DAT_40021018 | 4;\n    address = 0x40010800;\n    break;\n  case 1:\n    _DAT_40021018 = _DAT_40021018 | 8;\n    address = 0x40010c00;\n    break;\n  case 2:\n    _DAT_40021018 = _DAT_40021018 | 0x10;\n    address = 0x40011000;\n    break;\n  case 3:\n    _DAT_40021018 = _DAT_40021018 | 0x20;\n    address = 0x40011400;\n    break;\n  case 4:\n    _DAT_40021018 = _DAT_40021018 | 0x40;\n    address = 0x40011800;\n    break;\n  default:\n    address = 0;\n  }\n  return address;\n}\n\n",
            "current_name": "configure_peripheral_08004884",
            "entrypoint": "0x08004884",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004884": "configure_peripheral_08004884",
                "param_1": "peripheral_index",
                "uVar1": "address"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800492c": {
            "additional_data": {
                "FUN_0800492c": {
                    "1": "calculate_shift_value",
                    "13": "calculate_shifted_value",
                    "3": "extract_bits",
                    "4": "calculate_value"
                },
                "iVar1": {
                    "1": "shifted_result",
                    "2": "shifted_value",
                    "24": "result"
                },
                "param_1": {
                    "1": "param1",
                    "2": "input_param1",
                    "3": "value_1",
                    "4": "input_param"
                },
                "param_2": {
                    "1": "input_value_2",
                    "2": "input_2",
                    "3": "input_param_2",
                    "4": "value2",
                    "5": "unused_param"
                },
                "param_3": {
                    "1": "third_param",
                    "2": "value_3",
                    "3": "input_param_3",
                    "4": "input3"
                },
                "param_4": {
                    "1": "offset",
                    "2": "input_param4",
                    "3": "input_param_4",
                    "4": "input4"
                },
                "uVar2": {
                    "1": "bit_value",
                    "15": "shifted_value",
                    "2": "result",
                    "3": "extracted_bits",
                    "6": "shifted_result"
                }
            },
            "called": [
                "FUN_08004cce"
            ],
            "calling": [
                "FUN_08004a4c"
            ],
            "code": "\nuint calculate_shifted_value_0800492c(undefined4 input1,undefined4 unused_param,undefined4 input3,undefined4 input4)\n\n{\n  int result;\n  uint shifted_value;\n  \n  result = FUN_08004cce(input1,&DAT_08007400,input3,input4,input4);\n  shifted_value = (uint)(result << 0xc) >> 0x1b;\n  if (0x10 < shifted_value - 1) {\n    shifted_value = 0;\n  }\n  return shifted_value;\n}\n\n",
            "current_name": "calculate_shifted_value_0800492c",
            "entrypoint": "0x0800492c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800492c": "calculate_shifted_value_0800492c",
                "iVar1": "result",
                "param_1": "input1",
                "param_2": "unused_param",
                "param_3": "input3",
                "param_4": "input4",
                "uVar2": "shifted_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004948": {
            "additional_data": {
                "FUN_08004948": {
                    "1": "determine_shifted_value",
                    "2": "get_shifted_value",
                    "4": "process_data"
                },
                "iVar1": {
                    "1": "result_code",
                    "27": "result"
                },
                "param_1": {
                    "1": "code_param",
                    "2": "input1",
                    "3": "input_1",
                    "4": "input_value",
                    "8": "input_param"
                },
                "param_2": {
                    "1": "arg2",
                    "2": "param_2",
                    "3": "input_2",
                    "6": "unused_param"
                },
                "param_3": {
                    "1": "unused_param_3",
                    "2": "input3",
                    "3": "input_3"
                },
                "param_4": {
                    "1": "arg4",
                    "2": "input4",
                    "3": "param4"
                },
                "uVar2": {
                    "1": "category",
                    "11": "shifted_value",
                    "13": "shifted_result"
                }
            },
            "called": [
                "FUN_08004cce"
            ],
            "calling": [
                "FUN_08004b3c"
            ],
            "code": "\nundefined4 process_data_08004948(undefined4 input_param,undefined4 unused_param,undefined4 param3,undefined4 param4)\n\n{\n  int result;\n  uint shifted_result;\n  \n  result = FUN_08004cce(input_param,&DAT_080074b4,param3,param4,param4);\n  shifted_result = (uint)(result << 0xc) >> 0x1b;\n  if (shifted_result == 3) {\n    return 8;\n  }\n  if (shifted_result != 4) {\n    if (shifted_result != 2) {\n      return 0;\n    }\n    return 4;\n  }\n  return 0xc;\n}\n\n",
            "current_name": "process_data_08004948",
            "entrypoint": "0x08004948",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004948": "process_data_08004948",
                "iVar1": "result",
                "param_1": "input_param",
                "param_2": "unused_param",
                "param_3": "param3",
                "param_4": "param4",
                "uVar2": "shifted_result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004974": {
            "additional_data": {
                "DAT_20000080": {
                    "1": "data"
                },
                "FUN_08002624": {
                    "1": "set_bitmask"
                },
                "FUN_08004884": {
                    "1": "process_flag",
                    "2": "calculate_result"
                },
                "FUN_08004974": {
                    "1": "update_flag_and_call_another_function",
                    "2": "update_flags",
                    "3": "update_data",
                    "4": "update_status"
                },
                "iVar3": {
                    "1": "value2",
                    "2": "flag_value",
                    "4": "current_value",
                    "7": "value"
                },
                "local_10": {
                    "1": "constant_val2",
                    "10": "constant2",
                    "2": "offset",
                    "3": "value2"
                },
                "local_14": {
                    "1": "variable1",
                    "10": "constant1",
                    "2": "bit_count",
                    "3": "value1"
                },
                "local_18": {
                    "1": "bit_position",
                    "18": "bit_mask",
                    "9": "bitmask"
                },
                "param_1": {
                    "1": "input_ptr",
                    "2": "data_pointer",
                    "3": "status",
                    "5": "data_ptr"
                },
                "param_2": {
                    "1": "additional_parameter",
                    "10": "value",
                    "12": "param"
                },
                "uVar1": {
                    "1": "updated_value",
                    "28": "result"
                },
                "uVar2": {
                    "1": "new_data",
                    "11": "updated_value",
                    "2": "flags",
                    "4": "flag_value",
                    "5": "flag"
                }
            },
            "called": [
                "FUN_08002624",
                "FUN_08004884"
            ],
            "calling": [
                "FUN_0800213c"
            ],
            "code": "\n\n\nvoid update_status_08004974(int *data_ptr,undefined4 param)\n\n{\n  undefined4 result;\n  uint updated_value;\n  int value;\n  uint bit_mask;\n  undefined4 constant1;\n  undefined4 constant2;\n  \n  value = *data_ptr;\n  if (value == 0x40012400) {\n    updated_value = _DAT_40021018 | 0x200;\n    value = 0x200;\n    _DAT_40021018 = updated_value;\n  }\n  else {\n    updated_value = 0x40012800;\n    if (value == 0x40012800) {\n      updated_value = _DAT_40021018 | 0x400;\n      value = 0x400;\n      _DAT_40021018 = updated_value;\n    }\n  }\n  result = FUN_08004884((uint)((int)(char)DAT_20000080 << 0x18) >> 0x1c,param,updated_value,value);\n  bit_mask = 1 << (DAT_20000080 & 0xf) & 0xffff;\n  constant1 = 3;\n  constant2 = 0;\n  FUN_08002624(result,&bit_mask);\n  return;\n}\n\n",
            "current_name": "update_status_08004974",
            "entrypoint": "0x08004974",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004974": "update_status_08004974",
                "iVar3": "value",
                "local_10": "constant2",
                "local_14": "constant1",
                "local_18": "bit_mask",
                "param_1": "data_ptr",
                "param_2": "param",
                "uVar1": "result",
                "uVar2": "updated_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080049f0": {
            "additional_data": {
                "*param_1": {
                    "1": "status",
                    "3": "value"
                },
                "0x40012400": {
                    "1": "some_constant"
                },
                "0x40012800": {
                    "1": "another_constant"
                },
                "FUN_080049f0": {
                    "1": "check_power_status",
                    "2": "set_control_bits",
                    "3": "update_flags",
                    "4": "update_control_registers"
                },
                "PTR_4002100c": {
                    "1": "config_register1"
                },
                "PTR_40021018": {
                    "1": "config_register2"
                },
                "_DAT_4002100c": {
                    "1": "control_reg1",
                    "11": "register1",
                    "2": "register_a",
                    "3": "control_register1"
                },
                "_DAT_40021018": {
                    "1": "memory_flag_2",
                    "11": "register2",
                    "2": "flag2",
                    "3": "control_register2"
                },
                "param_1": {
                    "1": "input_param",
                    "3": "config_ptr",
                    "4": "register_value",
                    "7": "value"
                }
            },
            "called": [],
            "calling": [
                "FUN_0800224c"
            ],
            "code": "\n\n\nvoid update_control_registers_080049f0(int *value)\n\n{\n  if (*value != 0x40012400) {\n    if (*value == 0x40012800) {\n      _DAT_4002100c = _DAT_4002100c & 0xfffffbff;\n      _DAT_40021018 = _DAT_40021018 & 0xfffffbff;\n    }\n    return;\n  }\n  _DAT_4002100c = _DAT_4002100c & 0xfffffdff;\n  _DAT_40021018 = _DAT_40021018 & 0xfffffdff;\n  return;\n}\n\n",
            "current_name": "update_control_registers_080049f0",
            "entrypoint": "0x080049f0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080049f0": "update_control_registers_080049f0",
                "param_1": "value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004a4c": {
            "additional_data": {
                "&DAT_08007400": {
                    "1": "data_array"
                },
                "&DAT_20000080": {
                    "1": "param_char"
                },
                "DAT_08007400": {
                    "1": "constant_data"
                },
                "DAT_20000080": {
                    "1": "constant_data2"
                },
                "FUN_08001cd0": {
                    "1": "check_condition"
                },
                "FUN_08001e40": {
                    "1": "extract_string",
                    "2": "get_result"
                },
                "FUN_08001e48": {
                    "1": "decode_buffer"
                },
                "FUN_08001f80": {
                    "1": "retrieve_flag",
                    "3": "check_flag"
                },
                "FUN_08002004": {
                    "1": "validate_input"
                },
                "FUN_0800213c": {
                    "1": "perform_operation"
                },
                "FUN_0800224c": {
                    "1": "transform_data"
                },
                "FUN_08002348": {
                    "1": "check_data2"
                },
                "FUN_08002384": {
                    "1": "operation_3"
                },
                "FUN_0800492c": {
                    "1": "get_data",
                    "3": "get_value"
                },
                "FUN_08004a4c": {
                    "1": "extract_function",
                    "3": "check_and_process_data",
                    "6": "validate_input"
                },
                "FUN_08004c78": {
                    "1": "process_input_data",
                    "2": "check_condition"
                },
                "FUN_080061e0": {
                    "1": "initialize_variables",
                    "2": "initialize_memory"
                },
                "iVar1": {
                    "1": "temp_result",
                    "2": "return_value",
                    "4": "result"
                },
                "local_10": {
                    "1": "temp9",
                    "2": "temp_7",
                    "3": "var8"
                },
                "local_18": {
                    "1": "temp9"
                },
                "local_1c": {
                    "1": "var_5",
                    "2": "temp7",
                    "3": "var5"
                },
                "local_20": {
                    "1": "var_6",
                    "2": "temp6",
                    "3": "temp7"
                },
                "local_24": {
                    "1": "var_5",
                    "2": "temp5",
                    "3": "temp_var6",
                    "4": "var4",
                    "5": "temp4"
                },
                "local_28": {
                    "1": "temp_value7",
                    "2": "temp4",
                    "3": "temp_4"
                },
                "local_2c": {
                    "1": "temp_variable4",
                    "2": "var_3",
                    "3": "temp_var4",
                    "7": "temp3"
                },
                "local_30": {
                    "1": "unused2",
                    "2": "var_2",
                    "3": "temp_2",
                    "7": "var2"
                },
                "local_34": {
                    "1": "temp_variable2",
                    "2": "var_1",
                    "3": "temp_1",
                    "7": "temp1"
                },
                "local_38": {
                    "1": "value4",
                    "12": "buffer",
                    "2": "temp_var1",
                    "3": "temp_variable"
                },
                "local_3c": {
                    "1": "temp_value3",
                    "17": "flag2",
                    "2": "value3",
                    "7": "flag_2"
                },
                "local_40": {
                    "1": "temp_value2",
                    "17": "flag1",
                    "2": "value2",
                    "7": "flag_1"
                },
                "local_44": {
                    "1": "condition_1",
                    "2": "value1",
                    "3": "value",
                    "7": "length"
                },
                "local_46": {
                    "1": "reversed_result",
                    "2": "success",
                    "21": "result",
                    "3": "output_value"
                },
                "local_46_2": {
                    "1": "var9"
                },
                "param_1": {
                    "1": "credential",
                    "14": "input_data",
                    "2": "input",
                    "3": "input_parameter",
                    "4": "input_param",
                    "5": "input_value"
                },
                "uVar2": {
                    "1": "condition_result",
                    "3": "flags",
                    "4": "flag"
                }
            },
            "called": [
                "FUN_0800213c",
                "FUN_08001f80",
                "FUN_08004c78",
                "FUN_08002384",
                "FUN_08002348",
                "FUN_08002004",
                "FUN_08001e40",
                "FUN_08001e48",
                "FUN_0800224c",
                "FUN_08001cd0",
                "FUN_080061e0",
                "FUN_0800492c"
            ],
            "calling": [
                "FUN_08005754"
            ],
            "code": "\nundefined2 validate_input_08004a4c(undefined4 input_data)\n\n{\n  int result;\n  uint flag;\n  undefined2 result;\n  uint length;\n  undefined4 flag1;\n  undefined4 flag2;\n  int buffer;\n  undefined4 var1;\n  undefined4 var2;\n  undefined4 var3;\n  undefined4 var7;\n  undefined4 temp4;\n  undefined4 var8;\n  undefined4 var5;\n  undefined4 var6;\n  \n  FUN_080061e0(&buffer,0,0x30);\n  length = 0;\n  flag1 = 0;\n  flag2 = 0;\n  result = 0;\n  buffer = FUN_08004c78(input_data,&DAT_08007400);\n  if (buffer == 0) {\n    result = 0;\n  }\n  else {\n    var1 = 0;\n    var2 = 0;\n    var3 = 0;\n    temp4 = 0;\n    var5 = 0xe0000;\n    var6 = 0;\n    var7 = 1;\n    var8 = 0;\n    DAT_20000080 = (undefined)input_data;\n    result = FUN_0800213c(&buffer);\n    if (result == 0) {\n      length = FUN_0800492c(input_data);\n      if (length < 0x12) {\n        flag1 = 1;\n        flag2 = 2;\n        result = FUN_08001e48(&buffer,&length);\n        if (result == 0) {\n          result = FUN_08002384(&buffer);\n          if (result == 0) {\n            result = FUN_08002004(&buffer);\n            if (result == 0) {\n              result = FUN_08001cd0(&buffer,10);\n              if (result == 0) {\n                flag = FUN_08001f80(&buffer);\n                if ((flag & 0x200) != 0) {\n                  result = FUN_08001e40(&buffer);\n                }\n                result = FUN_08002348(&buffer);\n                if (result == 0) {\n                  result = FUN_0800224c(&buffer);\n                  if (result != 0) {\n                    result = 0;\n                  }\n                }\n                else {\n                  result = 0;\n                }\n              }\n              else {\n                result = 0;\n              }\n            }\n            else {\n              result = 0;\n            }\n          }\n          else {\n            result = 0;\n          }\n        }\n        else {\n          result = 0;\n        }\n      }\n      else {\n        result = 0;\n      }\n    }\n    else {\n      result = 0;\n    }\n  }\n  return result;\n}\n\n",
            "current_name": "validate_input_08004a4c",
            "entrypoint": "0x08004a4c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004a4c": "validate_input_08004a4c",
                "iVar1": "result",
                "local_10": "var6",
                "local_1c": "var5",
                "local_20": "var8",
                "local_24": "temp4",
                "local_28": "var7",
                "local_2c": "var3",
                "local_30": "var2",
                "local_34": "var1",
                "local_38": "buffer",
                "local_3c": "flag2",
                "local_40": "flag1",
                "local_44": "length",
                "local_46": "result",
                "param_1": "input_data",
                "uVar2": "flag"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004b34": {
            "additional_data": {
                "*param_1": {
                    "1": "data_pointer"
                },
                "FUN_08004b34": {
                    "1": "execute_main_task",
                    "2": "initialize_program",
                    "4": "execute_initialization",
                    "5": "initialize_system",
                    "6": "execute_main_function"
                },
                "FUN_08004d90": {
                    "1": "perform_operation",
                    "2": "execute_initialization",
                    "5": "perform_initialization"
                },
                "param_1": {
                    "1": "task_parameter",
                    "2": "data_pointer"
                }
            },
            "called": [
                "FUN_08004d90"
            ],
            "calling": [
                "FUN_08003ed8"
            ],
            "code": "\nvoid execute_main_function_08004b34(void)\n\n{\n  FUN_08004d90();\n  return;\n}\n\n",
            "current_name": "execute_main_function_08004b34",
            "entrypoint": "0x08004b34",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004b34": "execute_main_function_08004b34"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004b3c": {
            "additional_data": {
                "FUN_08003ed8": {
                    "1": "cleanup_results_array",
                    "2": "cleanup_results",
                    "3": "cleanup_data",
                    "7": "cleanup"
                },
                "FUN_080040b0": {
                    "1": "perform_operation",
                    "2": "handle_flag_false"
                },
                "FUN_0800412c": {
                    "1": "process_results_b",
                    "2": "handle_flag"
                },
                "FUN_08004948": {
                    "1": "check_data",
                    "2": "check_result",
                    "4": "check_error_code",
                    "5": "check_condition"
                },
                "FUN_08004b3c": {
                    "1": "process_function",
                    "24": "process_data"
                },
                "FUN_08004c78": {
                    "1": "calculate_result",
                    "3": "get_initial_value"
                },
                "FUN_08004cce": {
                    "1": "perform_operation",
                    "2": "calculate_flag",
                    "6": "check_flag"
                },
                "iVar1": {
                    "1": "condition_result",
                    "17": "result",
                    "2": "result_code",
                    "4": "error_code"
                },
                "local_50": {
                    "1": "array_data",
                    "10": "data_array",
                    "2": "results_array",
                    "3": "result_array",
                    "7": "results"
                },
                "local_50[0]": {
                    "1": "result"
                },
                "param_1": {
                    "1": "input_param",
                    "10": "data",
                    "11": "input_data",
                    "8": "input"
                },
                "uVar2": {
                    "1": "flag_value",
                    "17": "flag",
                    "9": "flags"
                }
            },
            "called": [
                "FUN_0800412c",
                "FUN_08004c78",
                "FUN_080040b0",
                "FUN_08004948",
                "FUN_08003ed8",
                "FUN_08004cce"
            ],
            "calling": [
                "FUN_080057b4"
            ],
            "code": "\nvoid process_data_08004b3c(undefined4 input_data)\n\n{\n  int result;\n  uint flag;\n  int data_array [17];\n  \n  result = FUN_08004c78(input_data,&DAT_080074b4);\n  if ((result != 0) &&\n     ((((result = FUN_08004948(input_data), result == 0 || (result == 4)) || (result == 8)) ||\n      ((result == 0xc || (result == 0x18)))))) {\n    flag = FUN_08004cce(input_data,&DAT_080074b4);\n    if ((flag & 0x100000) == 0) {\n      FUN_080040b0(data_array,result);\n    }\n    else {\n      FUN_0800412c(data_array,result);\n    }\n    FUN_08003ed8(data_array);\n  }\n  return;\n}\n\n",
            "current_name": "process_data_08004b3c",
            "entrypoint": "0x08004b3c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004b3c": "process_data_08004b3c",
                "iVar1": "result",
                "local_50": "data_array",
                "local_50[0]": "result",
                "param_1": "input_data",
                "uVar2": "flag"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004b94": {
            "additional_data": {
                "FUN_08001cc4": {
                    "1": "perform_initial_setup",
                    "3": "initialize_system",
                    "5": "execute_initialization",
                    "8": "perform_initialization"
                },
                "FUN_08004b94": {
                    "1": "execute_function",
                    "2": "initialize_program",
                    "4": "execute_initialization",
                    "7": "initialize_system",
                    "8": "initialize"
                },
                "undefined4": {
                    "1": "void"
                }
            },
            "called": [
                "FUN_08001cc4"
            ],
            "calling": [
                "FUN_080058e0"
            ],
            "code": "\nvoid initialize_08004b94(void)\n\n{\n  FUN_08001cc4();\n  return;\n}\n\n",
            "current_name": "initialize_08004b94",
            "entrypoint": "0x08004b94",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004b94": "initialize_08004b94"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004b9c": {
            "called": [],
            "calling": [
                "FUN_08004b9e"
            ],
            "code": "\nvoid FUNC_08004b9c(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_08004b9c",
            "entrypoint": "0x08004b9c",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_08004b9c": "FUNC_08004b9c"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_08004b9e": {
            "additional_data": {
                "FUNC_08004b9c": {
                    "1": "initialize_step_3",
                    "2": "configure_settings"
                },
                "FUN_08001cac": {
                    "1": "perform_first_task",
                    "2": "perform_initialization",
                    "4": "initialize_components",
                    "6": "initialize_system"
                },
                "FUN_08002582": {
                    "1": "perform_initialization",
                    "2": "perform_preprocessing"
                },
                "FUN_08004b9e": {
                    "1": "execute_function_sequence",
                    "2": "initialize_program",
                    "4": "initialize_application",
                    "5": "initialize_system"
                }
            },
            "called": [
                "FUN_08001cac",
                "FUN_08002582",
                "FUN_08004b9c"
            ],
            "calling": [],
            "code": "\nvoid execute_main_function_08004b9e(void)\n\n{\n  FUN_08001cac();\n  FUN_08002582();\n  FUNC_08004b9c();\n  return;\n}\n\n",
            "current_name": "execute_main_function_08004b9e",
            "entrypoint": "0x08004b9e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004b9e": "execute_main_function_08004b9e"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004bb0": {
            "additional_data": {
                "FUN_08002624": {
                    "1": "modify_values"
                },
                "FUN_08004884": {
                    "1": "calculate_bit_mask"
                },
                "FUN_08004bb0": {
                    "1": "initialize_function",
                    "11": "initialize_peripheral",
                    "4": "initialize_registers",
                    "6": "initialize_device"
                },
                "_DAT_40010004": {
                    "1": "flag2",
                    "2": "peripheral_register2",
                    "4": "register2"
                },
                "_DAT_40021018": {
                    "1": "register_a",
                    "2": "peripheral_register1",
                    "4": "register1"
                },
                "local_14": {
                    "1": "local_var1",
                    "2": "local_var3",
                    "4": "local_variable",
                    "7": "constant_value",
                    "9": "constant"
                },
                "local_18": {
                    "1": "var2",
                    "2": "local_param2",
                    "3": "new_param3",
                    "4": "local_param3",
                    "9": "param3_copy"
                },
                "local_1c": {
                    "1": "param2_new",
                    "2": "local_param1",
                    "3": "new_param2",
                    "4": "local_param2",
                    "9": "param2_copy"
                },
                "local_20": {
                    "1": "bit_shifted_value",
                    "15": "bit_mask",
                    "5": "mask",
                    "6": "bitmask"
                },
                "param_1": {
                    "1": "input_param",
                    "2": "input",
                    "5": "device_id",
                    "7": "peripheral_id"
                },
                "param_2": {
                    "1": "param2_value",
                    "18": "param2",
                    "2": "param_2",
                    "4": "param1"
                },
                "param_3": {
                    "1": "config2",
                    "18": "param3",
                    "2": "value2",
                    "4": "param2"
                },
                "uVar1": {
                    "1": "transformed_value",
                    "2": "shifted_value",
                    "7": "result"
                }
            },
            "called": [
                "FUN_08002624",
                "FUN_08004884"
            ],
            "calling": [
                "FUN_080057b4"
            ],
            "code": "\n\n\nvoid initialize_peripheral_08004bb0(uint input_value,undefined4 param2,undefined4 param3)\n\n{\n  undefined4 result;\n  uint bit_mask;\n  undefined4 param2_copy;\n  undefined4 param3_copy;\n  undefined4 constant;\n  \n  result = FUN_08004884((input_value << 0x18) >> 0x1c);\n  bit_mask = 1 << (input_value & 0xf) & 0xffff;\n  constant = 3;\n  _DAT_40021018 = _DAT_40021018 | 1;\n  if ((input_value - 0xd & 0xff) < 2) {\n    _DAT_40010004 = _DAT_40010004 & 0xf8ffffff | 0x4000000;\n  }\n  if (((input_value == 0xf) || (input_value == 0x13)) || (input_value == 0x14)) {\n    _DAT_40010004 = _DAT_40010004 & 0xf8ffffff | 0x2000000;\n  }\n  param2_copy = param2;\n  param3_copy = param3;\n  FUN_08002624(result,&bit_mask);\n  return;\n}\n\n",
            "current_name": "initialize_peripheral_08004bb0",
            "entrypoint": "0x08004bb0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004bb0": "initialize_peripheral_08004bb0",
                "local_14": "constant",
                "local_18": "param3_copy",
                "local_1c": "param2_copy",
                "local_20": "bit_mask",
                "param_1": "input_value",
                "param_2": "param2",
                "param_3": "param3",
                "uVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004c30": {
            "additional_data": {
                "FUN_0800281e": {
                    "1": "process",
                    "3": "perform_operation",
                    "7": "process_data"
                },
                "FUN_08004c30": {
                    "1": "make_decision_based_on_param",
                    "10": "process_param",
                    "2": "choose_action_based_on_param",
                    "3": "execute_based_on_condition"
                },
                "param_1": {
                    "1": "input_param",
                    "10": "input1",
                    "2": "data",
                    "4": "param1",
                    "5": "arg1"
                },
                "param_2": {
                    "1": "value2",
                    "10": "input2",
                    "4": "param2",
                    "5": "arg2"
                },
                "param_3": {
                    "1": "selection",
                    "2": "input3",
                    "3": "param3",
                    "8": "flag",
                    "9": "condition"
                },
                "param_4": {
                    "1": "param",
                    "11": "data",
                    "3": "param4",
                    "4": "arg4"
                }
            },
            "called": [
                "FUN_0800281e"
            ],
            "calling": [
                "FUN_08005848"
            ],
            "code": "\nvoid process_param_08004c30(undefined4 input1,undefined2 input2,int condition,undefined4 data)\n\n{\n  if (condition == 0) {\n    FUN_0800281e(input1,input2,0,data,data);\n    return;\n  }\n  FUN_0800281e(input1,input2,1,data,data);\n  return;\n}\n\n",
            "current_name": "process_param_08004c30",
            "entrypoint": "0x08004c30",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004c30": "process_param_08004c30",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "condition",
                "param_4": "data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004c48": {
            "additional_data": {
                "FUN_08002810": {
                    "1": "update_data",
                    "2": "perform_operation",
                    "4": "call_sub_function",
                    "7": "process_data"
                },
                "FUN_08004c48": {
                    "1": "initialize_function",
                    "20": "execute_function",
                    "3": "initialize"
                },
                "param_1": {
                    "1": "data_1",
                    "2": "param",
                    "3": "param_1",
                    "5": "input1",
                    "6": "param1"
                },
                "param_2": {
                    "1": "value",
                    "2": "arg2",
                    "3": "input_2",
                    "4": "param_2",
                    "5": "input2",
                    "7": "param2"
                },
                "param_3": {
                    "1": "param_config",
                    "3": "argument3",
                    "4": "input3",
                    "7": "param3"
                },
                "param_4": {
                    "1": "length",
                    "3": "argument4",
                    "4": "input4",
                    "7": "param4"
                },
                "undefined2 param_2": {
                    "1": "input2"
                },
                "undefined4 param_1": {
                    "1": "input1"
                },
                "undefined4 param_3": {
                    "1": "input3"
                },
                "undefined4 param_4": {
                    "1": "input4"
                }
            },
            "called": [
                "FUN_08002810"
            ],
            "calling": [
                "FUN_08005890"
            ],
            "code": "\nvoid execute_function_08004c48(undefined4 param1,undefined2 param2,undefined4 param3,undefined4 param4)\n\n{\n  FUN_08002810(param1,param2,param3,param4,param4);\n  return;\n}\n\n",
            "current_name": "execute_function_08004c48",
            "entrypoint": "0x08004c48",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004c48": "execute_function_08004c48",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004c52": {
            "additional_data": {
                "FUN_08001b48": {
                    "1": "perform_initialization",
                    "2": "configure_network",
                    "3": "initialize_components",
                    "4": "perform_cleanup"
                },
                "FUN_08001c88": {
                    "1": "initialize_database",
                    "2": "configure_settings",
                    "4": "perform_initialization"
                },
                "FUN_08004c52": {
                    "1": "execute_initialization_process",
                    "2": "initialize_components",
                    "3": "initialize",
                    "5": "initialize_application",
                    "8": "initialize_program"
                }
            },
            "called": [
                "FUN_08001b48",
                "FUN_08001c88"
            ],
            "calling": [
                "FUN_08001c32"
            ],
            "code": "\nvoid initialize_program_08004c52(void)\n\n{\n  FUN_08001c88();\n  FUN_08001b48();\n  return;\n}\n\n",
            "current_name": "initialize_program_08004c52",
            "entrypoint": "0x08004c52",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004c52": "initialize_program_08004c52"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004c5e": {
            "additional_data": {
                "*(undefined4 *)(param_2 + 4)": {
                    "1": "next_parameter",
                    "2": "result"
                },
                "*param_2": {
                    "1": "current_value"
                },
                "*param_2 + 0xc": {
                    "1": "next_element"
                },
                "FUN_08004c5e": {
                    "1": "find_value_by_index",
                    "2": "find_value_in_list",
                    "4": "find_value_offset",
                    "5": "find_value_index",
                    "9": "find_value_in_array"
                },
                "N/A": {
                    "1": "n/a"
                },
                "loop_variable": {
                    "1": "current_element"
                },
                "param_1": {
                    "1": "item",
                    "12": "target_value",
                    "3": "search_value",
                    "5": "value",
                    "8": "value_to_find"
                },
                "param_2": {
                    "1": "param_array",
                    "2": "array_of_values",
                    "3": "list_ptr",
                    "4": "data",
                    "8": "array_ptr",
                    "9": "array"
                },
                "param_2 + 0xc": {
                    "1": "current_parameter_next",
                    "3": "next_element"
                },
                "param_2 + 4": {
                    "1": "result"
                },
                "param_2[0]": {
                    "1": "element_0"
                },
                "param_2[1]": {
                    "1": "element_1"
                },
                "param_2[2]": {
                    "1": "element_2"
                },
                "param_2[n]": {
                    "1": "element_n"
                },
                "param_n": {
                    "1": "n/a"
                },
                "var_1": {
                    "1": "current_value"
                }
            },
            "called": [
                "FUN_08004c5e"
            ],
            "calling": [
                "FUN_08004c78",
                "FUN_08004c5e"
            ],
            "code": "\nundefined4 find_value_in_array_08004c5e(int target_value,char *array)\n\n{\n  while( true ) {\n    if (*array == -1) {\n      return 0;\n    }\n    if (*array == target_value) break;\n    array = array + 0xc;\n  }\n  return *(undefined4 *)(array + 4);\n}\n\n",
            "current_name": "find_value_in_array_08004c5e",
            "entrypoint": "0x08004c5e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004c5e": "find_value_in_array_08004c5e",
                "param_1": "target_value",
                "param_2": "array"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004c78": {
            "additional_data": {
                "FUN_08004c5e": {
                    "1": "process_function",
                    "3": "process_data",
                    "4": "process_input"
                },
                "FUN_08004c78": {
                    "1": "check_valid_param",
                    "13": "check_param",
                    "2": "check_param_validity"
                },
                "param_1": {
                    "1": "return_value",
                    "11": "input_param",
                    "2": "param",
                    "3": "value",
                    "4": "input",
                    "9": "input_value"
                },
                "param_2": {
                    "1": "data_param",
                    "2": "data",
                    "3": "input_string"
                },
                "uVar1": {
                    "22": "result",
                    "6": "return_value"
                }
            },
            "called": [
                "FUN_08004c5e"
            ],
            "calling": [
                "FUN_080053d4",
                "FUN_08004f4c",
                "FUN_08004a4c",
                "FUN_08004b3c",
                "FUN_08005384"
            ],
            "code": "\nundefined4 check_param_08004c78(int input_param)\n\n{\n  undefined4 result;\n  \n  if (input_param != -1) {\n    result = FUN_08004c5e();\n    return result;\n  }\n  return 0;\n}\n\n",
            "current_name": "check_param_08004c78",
            "entrypoint": "0x08004c78",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004c78": "check_param_08004c78",
                "param_1": "input_param",
                "uVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004c8a": {
            "additional_data": {
                "*(int *)(param_2 + 4)": {
                    "1": "array_element_value",
                    "2": "current_value"
                },
                "*param_2": {
                    "1": "current_element",
                    "2": "result",
                    "4": "found_value"
                },
                "FUN_08004c8a": {
                    "1": "find_param_value",
                    "2": "find_character_position",
                    "3": "find_value_in_array",
                    "4": "find_value_in_list",
                    "8": "find_value_index"
                },
                "param_1": {
                    "1": "target_id",
                    "12": "value",
                    "2": "target_character",
                    "3": "target_value",
                    "4": "element",
                    "6": "value_to_find"
                },
                "param_2": {
                    "1": "character_array",
                    "14": "array",
                    "2": "char_array",
                    "3": "array_ptr",
                    "4": "data_array"
                },
                "param_2 + 0xc": {
                    "1": "next_array_element_ptr",
                    "2": "next_element",
                    "5": "next_array_element"
                },
                "param_2 + 4": {
                    "1": "current_value",
                    "2": "array_value"
                },
                "param_2+0xc": {
                    "1": "next_array_element"
                },
                "param_2+4": {
                    "1": "array_element_with_length"
                }
            },
            "called": [
                "FUN_08004c8a"
            ],
            "calling": [
                "FUN_08004ca2",
                "FUN_08004c8a"
            ],
            "code": "\nint find_value_index_08004c8a(int value,char *array)\n\n{\n  while( true ) {\n    if (*(int *)(array + 4) == 0) {\n      return -1;\n    }\n    if (*(int *)(array + 4) == value) break;\n    array = array + 0xc;\n  }\n  return (int)*array;\n}\n\n",
            "current_name": "find_value_index_08004c8a",
            "entrypoint": "0x08004c8a",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004c8a": "find_value_index_08004c8a",
                "param_1": "value",
                "param_2": "array"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004ca2": {
            "additional_data": {
                "FUN_08004c8a": {
                    "1": "process_data"
                },
                "FUN_08004ca2": {
                    "1": "extract_int_from_binary",
                    "11": "check_param",
                    "2": "validate_input",
                    "4": "check_parameter"
                },
                "param_1": {
                    "11": "input",
                    "5": "value",
                    "7": "input_param",
                    "8": "input_value"
                },
                "param_2": {
                    "1": "data"
                },
                "uVar1": {
                    "26": "result",
                    "4": "return_value"
                }
            },
            "called": [
                "FUN_08004c8a"
            ],
            "calling": [
                "FUN_08005b54",
                "FUN_08005384"
            ],
            "code": "\nundefined4 check_param_08004ca2(int input)\n\n{\n  undefined4 result;\n  \n  if (input != 0) {\n    result = FUN_08004c8a();\n    return result;\n  }\n  return 0xffffffff;\n}\n\n",
            "current_name": "check_param_08004ca2",
            "entrypoint": "0x08004ca2",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004ca2": "check_param_08004ca2",
                "param_1": "input",
                "uVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004cb2": {
            "additional_data": {
                "*(undefined4 *)(param_2 + 8)": {
                    "1": "next_parameter_value",
                    "2": "result",
                    "4": "found_value"
                },
                "*param_2": {
                    "2": "current_parameter",
                    "4": "current_value"
                },
                "*param_2 == -1": {
                    "1": "current_value_is_negative_one"
                },
                "*param_2 == param_1": {
                    "1": "current_parameter_is_target"
                },
                "0xc": {
                    "1": "list_offset"
                },
                "0xffffffff": {
                    "2": "not_found"
                },
                "FUN_08004cb2": {
                    "1": "lookup_value_by_param",
                    "2": "find_value_by_index",
                    "3": "find_value_in_list",
                    "4": "find_value",
                    "5": "find_value_index"
                },
                "PTR_00000008": {
                    "1": "value_offset"
                },
                "PTR_0000000c": {
                    "1": "array_stride"
                },
                "param_1": {
                    "1": "target_parameter",
                    "3": "search_value",
                    "5": "key",
                    "8": "value",
                    "9": "target_value"
                },
                "param_2": {
                    "1": "values_array",
                    "2": "list",
                    "4": "array_ptr",
                    "6": "array",
                    "7": "data"
                },
                "param_2 + 0xc": {
                    "1": "current_value_next",
                    "2": "data_offset"
                },
                "return": {
                    "2": "found_value"
                }
            },
            "called": [
                "FUN_08004cb2"
            ],
            "calling": [
                "FUN_08004cb2",
                "FUN_08004cce"
            ],
            "code": "\nundefined4 find_value_index_08004cb2(int target_value,char *data)\n\n{\n  while( true ) {\n    if (*data == -1) {\n      found_value 0xffffffff;\n    }\n    if (*data == target_value) break;\n    data = data + 0xc;\n  }\n  found_value *(undefined4 *)(data + 8);\n}\n\n",
            "current_name": "find_value_index_08004cb2",
            "entrypoint": "0x08004cb2",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004cb2": "find_value_index_08004cb2",
                "param_1": "target_value",
                "param_2": "data",
                "return": "found_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004cce": {
            "additional_data": {
                "FUN_08004cb2": {
                    "1": "perform_operation"
                },
                "FUN_08004cce": {
                    "1": "get_status",
                    "2": "check_param",
                    "3": "check_return_value",
                    "4": "process_param",
                    "5": "process_parameter"
                },
                "param_1": {
                    "1": "status",
                    "13": "input_value",
                    "2": "input_number",
                    "3": "param",
                    "6": "input_param"
                },
                "param_2": {
                    "1": "message"
                },
                "uVar1": {
                    "24": "result",
                    "6": "return_value"
                }
            },
            "called": [
                "FUN_08004cb2"
            ],
            "calling": [
                "FUN_08004948",
                "FUN_08004f4c",
                "FUN_08004b3c",
                "FUN_0800492c"
            ],
            "code": "\nundefined4 process_parameter_08004cce(int input_value)\n\n{\n  undefined4 result;\n  \n  if (input_value == -1) {\n    return 0xffffffff;\n  }\n  result = FUN_08004cb2();\n  return result;\n}\n\n",
            "current_name": "process_parameter_08004cce",
            "entrypoint": "0x08004cce",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004cce": "process_parameter_08004cce",
                "param_1": "input_value",
                "uVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004ce2": {
            "additional_data": {
                "*param_2": {
                    "1": "current_int",
                    "3": "current_value"
                },
                "*param_2 == -1": {
                    "1": "end_of_array"
                },
                "DAT_08004ce2": {
                    "1": "successful_search"
                },
                "FUN_08004ce2": {
                    "1": "find_value_in_sequence",
                    "2": "find_value_in_array",
                    "3": "compare_integers",
                    "4": "compare_values",
                    "5": "find_match"
                },
                "break": {
                    "1": "stop_search"
                },
                "param_1": {
                    "1": "value_to_compare",
                    "3": "target",
                    "4": "value_1",
                    "5": "input_value",
                    "8": "value"
                },
                "param_1 == *param_2": {
                    "1": "values_match"
                },
                "param_1 == -1": {
                    "1": "value1_not_found"
                },
                "param_2": {
                    "1": "value_2",
                    "2": "string_array",
                    "3": "array_of_values",
                    "7": "array"
                },
                "param_2 + 0xc": {
                    "1": "next_integer"
                },
                "param_2[0]": {
                    "1": "str1_char"
                },
                "param_2[0xc]": {
                    "1": "next_str1_char"
                },
                "param_2_1": {
                    "1": "current_value"
                },
                "param_2_n": {
                    "1": "next_value"
                },
                "param_2_original": {
                    "1": "data_original"
                }
            },
            "called": [],
            "calling": [
                "FUN_080057b4"
            ],
            "code": "\nundefined4 find_match_08004ce2(int value,char *array)\n\n{\n  if (value == -1) {\n    return 0;\n  }\n  while( true ) {\n    if (*array == -1) {\n      return 0;\n    }\n    if (value == *array) stop_search;\n    array = array + 0xc;\n  }\n  return 1;\n}\n\n",
            "current_name": "find_match_08004ce2",
            "entrypoint": "0x08004ce2",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004ce2": "find_match_08004ce2",
                "break": "stop_search",
                "param_1": "value",
                "param_2": "array"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004d06": {
            "additional_data": {
                "FUN_08004d06": {
                    "1": "compare_and_return_nonzero",
                    "2": "find_nonzero_param",
                    "3": "compare_and_return",
                    "6": "compare_and_return_non_zero",
                    "7": "compare_and_return_smaller"
                },
                "param_1": {
                    "1": "first_param",
                    "10": "value1",
                    "11": "value_1"
                },
                "param_2": {
                    "1": "second_parameter",
                    "11": "value2"
                }
            },
            "called": [],
            "calling": [
                "FUN_08004f4c"
            ],
            "code": "\nint compare_and_return_smaller_08004d06(int value_1,int value_2)\n\n{\n  if (value_1 != value_2) {\n    if (value_1 == 0) {\n      return value_2;\n    }\n    if (value_2 == 0) {\n      return value_1;\n    }\n    value_1 = 0;\n  }\n  return value_1;\n}\n\n",
            "current_name": "compare_and_return_smaller_08004d06",
            "entrypoint": "0x08004d06",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004d06": "compare_and_return_smaller_08004d06",
                "param_1": "value_1",
                "param_2": "value_2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004d18": {
            "additional_data": {
                "*DAT_20000260": {
                    "1": "callback"
                },
                "*callback": {
                    "1": "callback_function"
                },
                "*callback_function": {
                    "1": "callback_function"
                },
                "*data": {
                    "1": "data"
                },
                "CODE_CALLBACK": {
                    "1": "callback"
                },
                "DAT_20000260": {
                    "1": "callback_ptr",
                    "12": "callback_function",
                    "3": "callback_function_pointer",
                    "4": "function_pointer"
                },
                "DAT_20000278": {
                    "1": "callback_parameter",
                    "2": "argument",
                    "4": "callback_argument",
                    "9": "callback_data"
                },
                "FUN_08004d18": {
                    "1": "call_external_function",
                    "14": "execute_callback",
                    "8": "execute_callback_function"
                },
                "callback": {
                    "1": "callback"
                },
                "callback_function": {
                    "1": "callback_function"
                },
                "code": {
                    "1": "function_pointer",
                    "2": "callback_function"
                },
                "executeCallback": {
                    "1": "execute_callback"
                },
                "executeCallbackFunction": {
                    "1": "execute_callback_function"
                },
                "executeFunction": {
                    "1": "function_to_execute"
                },
                "executePrimaryFunction": {
                    "1": "execute_function"
                },
                "execute_callback_function": {
                    "1": "execute_callback_function"
                },
                "paramValue": {
                    "1": "parameter_value"
                }
            },
            "called": [],
            "calling": [
                "FUN_08003ea0"
            ],
            "code": "\nvoid execute_callback_08004d18(void)\n\n{\n  if (DAT_20000260 != (callback_function *)0x0) {\n    (*DAT_20000260)(DAT_20000278);\n  }\n  return;\n}\n\n",
            "current_name": "execute_callback_08004d18",
            "entrypoint": "0x08004d18",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004d18": "execute_callback_08004d18",
                "code": "callback_function"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004d40": {
            "additional_data": {
                "<original_variable_name_1>": {
                    "1": "<new_variable_name_1>"
                },
                "<original_variable_name_2>": {
                    "1": "<new_variable_name_2>"
                },
                "<original_variable_name_n>": {
                    "1": "<new_variable_name_n>"
                },
                "DAT": {
                    "1": "dat"
                },
                "DAT_": {
                    "1": "remains_unchanged",
                    "2": ""
                },
                "DAT_08004d40": {
                    "1": "buffer"
                },
                "FUN_08004d40": {
                    "1": "continuous_loop",
                    "30": "infinite_loop"
                },
                "PTR": {
                    "1": "ptr"
                },
                "PTR_": {
                    "1": "remains_unchanged",
                    "2": ""
                },
                "do": {
                    "1": "loop"
                },
                "original_variable_name_1": {
                    "1": "loop_counter"
                }
            },
            "called": [
                "FUN_08004d40"
            ],
            "calling": [
                "FUN_08001b48",
                "FUN_08004d40"
            ],
            "code": "\nvoid infinite_loop_08004d40(void)\n\n{\n  loop {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "current_name": "infinite_loop_08004d40",
            "entrypoint": "0x08004d40",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004d40": "infinite_loop_08004d40",
                "do": "loop"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004d44": {
            "additional_data": {
                "": {
                    "1": ""
                },
                "FUN_08004d44": {
                    "1": "configure_peripheral",
                    "11": "initialize_registers",
                    "2": "initialize_memory",
                    "5": "initialize_hardware"
                },
                "_DAT_40021000": {
                    "1": "device_control_register1",
                    "2": "gpio_control_register",
                    "3": "register1",
                    "4": "control_register1",
                    "9": "control_register"
                },
                "_DAT_40021004": {
                    "1": "device_configuration",
                    "3": "register2",
                    "4": "control_register2",
                    "5": "status_register"
                },
                "_DAT_40021008": {
                    "1": "device_control",
                    "2": "memory_address"
                },
                "_DAT_e000ed08": {
                    "1": "memory_barrier",
                    "2": "register4",
                    "3": "system_control_register",
                    "4": "interrupt_control_register",
                    "5": "interrupt_register"
                }
            },
            "called": [],
            "calling": [
                "entry"
            ],
            "code": "\n\n\nvoid initialize_registers_08004d44(void)\n\n{\n  _DAT_40021000 = _DAT_40021000 & 0xfef2ffff | 1;\n  _DAT_40021004 = _DAT_40021004 & 0xf8800000;\n  _DAT_40021008 = 0x9f0000;\n  _DAT_e000ed08 = 0x8000000;\n  return;\n}\n\n",
            "current_name": "initialize_registers_08004d44",
            "entrypoint": "0x08004d44",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004d44": "initialize_registers_08004d44"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004d90": {
            "additional_data": {
                "*param_1": {
                    "1": "flag_value",
                    "2": "config_value",
                    "3": "value"
                },
                "0x40000000": {
                    "1": "constant2"
                },
                "0x40000400": {
                    "1": "constant3"
                },
                "0x40000800": {
                    "1": "constant4"
                },
                "0x40012c00": {
                    "1": "constant1"
                },
                "FUN_08004d90": {
                    "1": "update_data_values",
                    "2": "update_configuration",
                    "3": "update_settings"
                },
                "PTR_40021018": {
                    "1": "permissions_1"
                },
                "PTR_4002101c": {
                    "1": "permissions_2"
                },
                "_DAT_40021018": {
                    "1": "memory_permission1",
                    "2": "register1",
                    "3": "register_1"
                },
                "_DAT_4002101c": {
                    "1": "global_config2",
                    "2": "register2",
                    "3": "register_2"
                },
                "param_1": {
                    "1": "state",
                    "2": "param",
                    "3": "memory_address",
                    "7": "value"
                }
            },
            "called": [],
            "calling": [
                "FUN_08004b34"
            ],
            "code": "\n\n\nvoid update_settings_08004d90(int *value)\n\n{\n  if (*value == 0x40012c00) {\n    _DAT_40021018 = _DAT_40021018 & 0xfffff7ff;\n  }\n  if (*value == 0x40000000) {\n    _DAT_4002101c = _DAT_4002101c & 0xfffffffe;\n  }\n  if (*value == 0x40000400) {\n    _DAT_4002101c = _DAT_4002101c & 0xfffffffd;\n  }\n  if (*value == 0x40000800) {\n    _DAT_4002101c = _DAT_4002101c & 0xfffffffb;\n  }\n  return;\n}\n\n",
            "current_name": "update_settings_08004d90",
            "entrypoint": "0x08004d90",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004d90": "update_settings_08004d90",
                "param_1": "value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004df4": {
            "additional_data": {
                "-4": {
                    "1": "result"
                },
                "<original_function_name>": {
                    "1": "subtract_four"
                },
                "DAT_variable_1": {
                    "1": "count"
                },
                "DAT_variable_2": {
                    "1": "index"
                },
                "FUN_08004df4": {
                    "2": "subtract_four_from_parameter",
                    "28": "subtract_four"
                },
                "PTR_variable": {
                    "1": "result"
                },
                "new_param_1": {
                    "1": "new_input"
                },
                "param_1": {
                    "1": "input_num",
                    "2": "number",
                    "3": "result",
                    "4": "input_number",
                    "5": "num",
                    "7": "input_value",
                    "8": "input"
                },
                "param_1 + -4": {
                    "1": "input_minus_four"
                },
                "param_2": {
                    "1": "number"
                },
                "return": {
                    "2": "result"
                }
            },
            "called": [],
            "calling": [
                "FUN_08004e12",
                "FUN_08004df8"
            ],
            "code": "\nint subtract_four_08004df4(int input)\n\n{\n  result input + -4;\n}\n\n",
            "current_name": "subtract_four_08004df4",
            "entrypoint": "0x08004df4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004df4": "subtract_four_08004df4",
                "param_1": "input",
                "return": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004df8": {
            "additional_data": {
                "(*(char *)(param_1 + 0x1c) == '\\x01')": {
                    "1": "is_char_equal_to_one"
                },
                "(*(code **)(iVar1 + 0x4c) != (code *)0x0)": {
                    "1": "is_function_non_null"
                },
                "(char *)": {
                    "2": "character_pointer"
                },
                "(char *)(inputParam + 0x1c)": {
                    "1": "pointer_to_input_byte"
                },
                "(code *)0x0": {
                    "1": "null_pointer"
                },
                "(code **)": {
                    "1": "function_pointer"
                },
                "*(char *)(callback_parameter + 0x1c)": {
                    "1": "condition_variable"
                },
                "*(char *)(param_1 + 0x1c)": {
                    "1": "is_condition_met",
                    "2": "flag"
                },
                "*(char *)(value + 0x1c)": {
                    "1": "flag"
                },
                "*(code **)(iVar1 + 0x4c)": {
                    "1": "sub_func",
                    "2": "function_ptr",
                    "3": "callback_function"
                },
                "**(code **)(iVar1 + 0x4c)": {
                    "1": "function_pointer"
                },
                "DAT_": {
                    "1": "data_"
                },
                "FUN_08004df4": {
                    "1": "get_callback_function",
                    "3": "get_function_pointer",
                    "6": "get_function_address"
                },
                "FUN_08004df8": {
                    "1": "execute_code_if_param_set",
                    "2": "execute_callback_if_needed",
                    "7": "execute_function_if_condition_met"
                },
                "code": {
                    "1": "function_type",
                    "2": "function_pointer"
                },
                "iVar1": {
                    "1": "callback_ptr",
                    "11": "result",
                    "2": "callback_result",
                    "3": "return_value",
                    "4": "function_result"
                },
                "param_1": {
                    "1": "code_index",
                    "2": "param",
                    "3": "input_value",
                    "4": "input_param",
                    "7": "input_parameter"
                },
                "param_1 + 0x1c": {
                    "1": "check_flag"
                },
                "param_1+0x1c": {
                    "1": "flag_address"
                }
            },
            "called": [
                "FUN_08004df4"
            ],
            "calling": [
                "FUN_08003f18"
            ],
            "code": "\nvoid execute_function_if_condition_met_08004df8(int input_parameter)\n\n{\n  int result;\n  \n  result = FUN_08004df4();\n  if ((*(function_pointer **)(result + 0x4c) != (function_pointer *)0x0) && (*(char *)(input_parameter + 0x1c) == '\\x01')) {\n    (**(function_pointer **)(result + 0x4c))(result,0);\n  }\n  return;\n}\n\n",
            "current_name": "execute_function_if_condition_met_08004df8",
            "entrypoint": "0x08004df8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004df8": "execute_function_if_condition_met_08004df8",
                "code": "function_pointer",
                "iVar1": "result",
                "param_1": "input_parameter"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004e12": {
            "additional_data": {
                "(code *)0x0": {
                    "1": "null"
                },
                "(code **)(iVar1 + 0x48)": {
                    "1": "function_pointer"
                },
                "**(code **)(iVar1 + 0x48)": {
                    "1": "function_to_call"
                },
                "<unnamed_variable>": {
                    "1": "function_pointer"
                },
                "FUN_08004df4": {
                    "1": "find_callback_function",
                    "2": "get_callback_function",
                    "3": "get_callback_function_address",
                    "4": "get_callback_address",
                    "7": "get_function_address",
                    "9": "get_function_pointer"
                },
                "FUN_08004e12": {
                    "1": "execute_optional_function",
                    "10": "execute_function",
                    "6": "execute_callback_function",
                    "8": "execute_callback"
                },
                "FUN_8004df4": {
                    "1": "get_function_address"
                },
                "FUN_8004e12": {
                    "1": "execute_function"
                },
                "iVar1": {
                    "1": "pointer_offset",
                    "2": "result",
                    "3": "callback_address",
                    "4": "function_address"
                },
                "param_1": {
                    "1": "arg1",
                    "2": "input",
                    "7": "input_parameter"
                }
            },
            "called": [
                "FUN_08004df4"
            ],
            "calling": [
                "FUN_08003f18"
            ],
            "code": "\nvoid execute_function_08004e12(void)\n\n{\n  int function_address;\n  \n  function_address = FUN_08004df4();\n  if (*(code **)(function_address + 0x48) != (code *)0x0) {\n    (**(code **)(function_address + 0x48))();\n  }\n  return;\n}\n\n",
            "current_name": "execute_function_08004e12",
            "entrypoint": "0x08004e12",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004e12": "execute_function_08004e12",
                "iVar1": "function_address"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004e20": {
            "additional_data": {
                "*param_1": {
                    "1": "input_param"
                },
                "DAT_2000027c": {
                    "1": "data_flag"
                },
                "FUN_08003f18": {
                    "1": "perform_operation",
                    "2": "call_sub_function",
                    "4": "execute_function",
                    "7": "process_data"
                },
                "FUN_08004e20": {
                    "1": "handle_initialization",
                    "11": "check_and_call_function",
                    "2": "check_and_invoke_function",
                    "8": "check_and_execute_function"
                },
                "param_1": {
                    "1": "parameter",
                    "2": "input_data",
                    "3": "data"
                }
            },
            "called": [
                "FUN_08003f18"
            ],
            "calling": [],
            "code": "\nvoid check_and_call_function_08004e20(void)\n\n{\n  if (DAT_2000027c != 0) {\n    FUN_08003f18();\n  }\n  return;\n}\n\n",
            "current_name": "check_and_call_function_08004e20",
            "entrypoint": "0x08004e20",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004e20": "check_and_call_function_08004e20"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004e70": {
            "additional_data": {
                "<original_variable_name_1>": {
                    "2": "<new_variable_name_1>"
                },
                "<original_variable_name_2>": {
                    "1": "<new_variable_name_2>"
                },
                "<original_variable_name_n>": {
                    "1": "<new_variable_name_n>"
                },
                "FUN_08004e70": {
                    "1": "subtract4",
                    "2": "subtract_four_from_param",
                    "25": "subtract_four"
                },
                "F_UNIQUENAME": {
                    "1": "add_four_to_parameter"
                },
                "param_1": {
                    "1": "input_param",
                    "2": "input_number",
                    "3": "input_value",
                    "4": "num",
                    "7": "result",
                    "8": "input"
                },
                "param_2": {
                    "1": "n/a"
                },
                "param_3": {
                    "1": "n/a"
                },
                "param_4": {
                    "1": "n/a"
                },
                "return": {
                    "1": "difference",
                    "2": "result"
                },
                "tempVar_1": {
                    "1": "result"
                }
            },
            "called": [],
            "calling": [
                "FUN_08004e74",
                "FUN_08004ec4",
                "FUN_08004ef4"
            ],
            "code": "\nint subtract_four_08004e70(int input)\n\n{\n  result input + -4;\n}\n\n",
            "current_name": "subtract_four_08004e70",
            "entrypoint": "0x08004e70",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004e70": "subtract_four_08004e70",
                "param_1": "input",
                "return": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004e74": {
            "additional_data": {
                "(code **)(iVar1 + 100)": {
                    "1": "function_pointer"
                },
                "(iVar1 + 0x5c)": {
                    "1": "value2_offset"
                },
                "(iVar1 + 0x88)": {
                    "1": "value1_offset"
                },
                "(param_1 + 0xc)": {
                    "1": "data_offset"
                },
                "*(code **)(iVar1 + 100)": {
                    "1": "ptr"
                },
                "*(code **)(result + 100)": {
                    "1": "result100"
                },
                "*(int *)(param_1 + 0xc)": {
                    "1": "param1c"
                },
                "*(undefined *)(iVar1 + 0x5c)": {
                    "2": "flag2"
                },
                "*(undefined *)(iVar1 + 0x88)": {
                    "1": "value1",
                    "2": "flag1"
                },
                "*(undefined *)(result + 0x5c)": {
                    "1": "result5c"
                },
                "*(undefined *)(result + 0x88)": {
                    "1": "result88"
                },
                "0x20": {
                    "1": "value_20"
                },
                "0x5c": {
                    "1": "offset_5c"
                },
                "0x68": {
                    "1": "offset_68"
                },
                "0x88": {
                    "1": "offset_88"
                },
                "0xc": {
                    "1": "offset_c"
                },
                "100": {
                    "1": "offset_100"
                },
                "8": {
                    "1": "constant8"
                },
                "FUM_08002af8": {
                    "1": "update_data1"
                },
                "FUN_08002af8": {
                    "1": "update_values",
                    "2": "process_param1",
                    "4": "process_data1",
                    "6": "copy_data"
                },
                "FUN_08002b84": {
                    "1": "another_update_data_helper",
                    "2": "process_function2",
                    "5": "process_data2"
                },
                "FUN_08004e70": {
                    "1": "get_something",
                    "2": "get_pointer",
                    "5": "get_return_value",
                    "7": "get_result"
                },
                "FUN_08004e74": {
                    "1": "update_flags_based_on_params",
                    "2": "update_settings",
                    "3": "check_params",
                    "5": "process_parameters",
                    "6": "update_data",
                    "8": "process_params"
                },
                "iVar1": {
                    "1": "internal_var1",
                    "20": "result",
                    "5": "return_value"
                },
                "iVar1 + 0x68": {
                    "1": "result68"
                },
                "param_1": {
                    "1": "input_param",
                    "2": "data_pointer",
                    "3": "arg1",
                    "4": "param1"
                },
                "param_2": {
                    "1": "result_array",
                    "2": "arg2",
                    "4": "param2",
                    "9": "flag"
                },
                "param_3": {
                    "1": "value2",
                    "2": "comparison",
                    "3": "arg3",
                    "4": "param3",
                    "5": "value"
                },
                "param_4": {
                    "1": "ptr",
                    "2": "input_param4",
                    "3": "arg4",
                    "5": "param4",
                    "6": "param"
                }
            },
            "called": [
                "FUN_08002af8",
                "FUN_08004e70",
                "FUN_08002b84"
            ],
            "calling": [
                "FUN_08002cf2"
            ],
            "code": "\nvoid process_params_08004e74(int param1,int flag,int value,undefined4 param)\n\n{\n  int result;\n  \n  result = FUN_08004e70();\n  if (value == *(int *)(param1 + 0xc)) {\n    if (flag == 0) {\n      *(undefined *)(result + 0x88) = 0;\n      *(undefined *)(result + 0x5c) = 0;\n      if (*(code **)(result + 100) != (code *)0x0) {\n        (**(code **)(result + 100))();\n      }\n      FUN_08002af8(param1,result + 0x68,*(undefined *)(result + 0x88),8);\n      return;\n    }\n    *(undefined *)(result + 0x5c) = 1;\n    FUN_08002b84(param1,result + 0x68,0x20,8,param);\n  }\n  return;\n}\n\n",
            "current_name": "process_params_08004e74",
            "entrypoint": "0x08004e74",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004e74": "process_params_08004e74",
                "iVar1": "result",
                "param_1": "param1",
                "param_2": "flag",
                "param_3": "value",
                "param_4": "param"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004ec4": {
            "additional_data": {
                " FUN_08004e70": {
                    "1": "get_function_pointer"
                },
                "(**(code **)(iVar1 + 0x60))": {
                    "1": "function_to_execute"
                },
                "(char *)(iVar1 + 0x2c)": {
                    "1": "check_char"
                },
                "(char *)(iVar1 + 0x5c)": {
                    "1": "condition_char"
                },
                "(code *)0x0": {
                    "1": "null_function_pointer"
                },
                "(code **)(iVar1 + 0x60)": {
                    "1": "function_to_call"
                },
                "(code **)(iVar1 + 0x60)))(iVar1 + 0x68)": {
                    "1": "execute_function_with_argument"
                },
                "(iVar1 + 0x2c)": {
                    "1": "character"
                },
                "(iVar1 + 0x5c)": {
                    "1": "flag"
                },
                "(iVar1 + 0x68)": {
                    "1": "argument"
                },
                "F0x2c": {
                    "1": "char_check_offset"
                },
                "F0x5c": {
                    "1": "flag_check_offset"
                },
                "F0x60": {
                    "1": "function_ptr_offset"
                },
                "F0x68": {
                    "1": "argument_offset"
                },
                "FUNCHUNK_08002c10": {
                    "1": "execute_second_function"
                },
                "FUNCHUNK_08004e70": {
                    "1": "get_function_pointer"
                },
                "FUN_08002c10": {
                    "1": "execute_other_function",
                    "10": "perform_cleanup",
                    "3": "cleanup"
                },
                "FUN_08004e70": {
                    "1": "get_callback_info",
                    "14": "get_function_pointer",
                    "6": "get_function_ptr"
                },
                "FUN_08004ec4": {
                    "1": "execute_callback_if_condition_met",
                    "15": "execute_function",
                    "2": "execute_function_if_conditions_met"
                },
                "F_08002c10": {
                    "1": "execute_sub_function"
                },
                "char *": {
                    "1": "char_pointer"
                },
                "code": {
                    "1": "callback_code"
                },
                "code **": {
                    "1": "function_pointer"
                },
                "iVar1": {
                    "1": "callback_result",
                    "2": "function_address",
                    "4": "function_pointer",
                    "5": "function_ptr",
                    "6": "return_value",
                    "8": "result"
                },
                "param_1": {
                    "1": "cleanup_param",
                    "2": "parameter",
                    "4": "arg1",
                    "6": "input_param",
                    "7": "param"
                },
                "param_2": {
                    "1": "func_ptr_param"
                }
            },
            "called": [
                "FUN_08004e70",
                "FUN_08002c10"
            ],
            "calling": [
                "FUN_0800316c",
                "FUN_080032b4",
                "FUN_08002d1c"
            ],
            "code": "\nvoid execute_function_08004ec4(undefined4 param)\n\n{\n  int result;\n  \n  result = FUN_08004e70();\n  if (((*(callback_code **)(result + 0x60) != (callback_code *)0x0) && (*(char *)(result + 0x5c) == '\\x01')) &&\n     (*(char *)(result + 0x2c) != ' ')) {\n    (**(callback_code **)(result + 0x60))(result + 0x68);\n  }\n  FUN_08002c10(param);\n  return;\n}\n\n",
            "current_name": "execute_function_08004ec4",
            "entrypoint": "0x08004ec4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004ec4": "execute_function_08004ec4",
                "code": "callback_code",
                "iVar1": "result",
                "param_1": "param"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004ef4": {
            "additional_data": {
                "*(char *)(iVar1 + 0x5d)": {
                    "1": "is_condition_met"
                },
                "FIM_08004e70": {
                    "1": "get_flag_address"
                },
                "FUM_08002c10": {
                    "1": "execute_function"
                },
                "FUNK_08002c10": {
                    "1": "call_function"
                },
                "FUN_08002c10": {
                    "1": "call_another_function",
                    "2": "call_sub_function",
                    "3": "call_function",
                    "7": "execute_function"
                },
                "FUN_08004e70": {
                    "1": "get_something",
                    "3": "get_result",
                    "5": "get_return_value"
                },
                "FUN_08004ef4": {
                    "1": "execute_if_flag_is_set",
                    "17": "check_and_call_function",
                    "2": "check_and_invoke_function",
                    "7": "check_and_execute_function"
                },
                "F_08002c10": {
                    "1": "perform_action"
                },
                "iVar1": {
                    "1": "var1",
                    "17": "result",
                    "2": "function_result",
                    "7": "return_value"
                },
                "param_1": {
                    "1": "param",
                    "13": "input_param",
                    "2": "function_parameter",
                    "4": "input_parameter",
                    "7": "input"
                }
            },
            "called": [
                "FUN_08004e70",
                "FUN_08002c10"
            ],
            "calling": [
                "FUN_0800316c"
            ],
            "code": "\nvoid check_and_call_function_08004ef4(undefined4 input_param)\n\n{\n  int result;\n  \n  result = FUN_08004e70();\n  if (*(char *)(result + 0x5d) == '\\0') {\n    FUN_08002c10(input_param);\n  }\n  return;\n}\n\n",
            "current_name": "check_and_call_function_08004ef4",
            "entrypoint": "0x08004ef4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004ef4": "check_and_call_function_08004ef4",
                "iVar1": "result",
                "param_1": "input_param"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004f4c": {
            "additional_data": {
                "&DAT_08007604": {
                    "1": "uart_peripheral_data2"
                },
                "&DAT_0800764c": {
                    "1": "uart_peripheral_data1"
                },
                "&DAT_2000032c": {
                    "1": "pin_data"
                },
                "(&DAT_2000032c)[*(byte *)(param_1 + 0x11)]": {
                    "1": "uart_peripherals_array"
                },
                "(*(byte *)(param_1 + 0x16) & 0xf)": {
                    "1": "uart_pin4"
                },
                "*(byte *)(param_1 + 0x11)": {
                    "1": "uart_pin1_index"
                },
                "*(undefined *)((int)param_1 + 0x5a)": {
                    "1": "uart_pin2_setting"
                },
                "*(undefined *)(param_1 + 0x11)": {
                    "1": "pin_config4"
                },
                "*param_1": {
                    "1": "config_ptr"
                },
                "DAT_08007604": {
                    "1": "uart_peripheral2"
                },
                "DAT_0800764c": {
                    "1": "uart_pins1"
                },
                "DAT_2000032c": {
                    "1": "uart_registers"
                },
                "DAT_40010004": {
                    "1": "uart_register5"
                },
                "FUN_08002624": {
                    "1": "configure_peripheral"
                },
                "FUN_0800441a": {
                    "1": "initialize_config",
                    "2": "initialize_peripheral",
                    "5": "initialize_uart"
                },
                "FUN_08004884": {
                    "1": "calculate_uart_config"
                },
                "FUN_08004c78": {
                    "1": "get_uart_pin_config",
                    "3": "get_peripheral_config"
                },
                "FUN_08004cce": {
                    "1": "get_gpio_alternate_function",
                    "2": "get_uart_pin_config",
                    "3": "get_pin_configuration"
                },
                "FUN_08004d06": {
                    "1": "configure_peripheral",
                    "2": "set_uart_pin_config",
                    "3": "configure_uart"
                },
                "FUN_08004f4c": {
                    "1": "initialize_uart_pin",
                    "14": "configure_uart_pins",
                    "2": "configure_peripheral",
                    "4": "initialize_uart",
                    "5": "initialize_uart_pins"
                },
                "FUN_080068f0": {
                    "1": "report_error",
                    "4": "print_error",
                    "6": "print_error_message"
                },
                "_DAT_40010004": {
                    "1": "some_address5"
                },
                "_DAT_4002100c": {
                    "1": "uart_register1",
                    "2": "register1"
                },
                "_DAT_40021010": {
                    "1": "uart2_c",
                    "2": "register3"
                },
                "_DAT_40021018": {
                    "1": "uart1_uart_reg2",
                    "2": "register2"
                },
                "_DAT_4002101c": {
                    "1": "uart2_uart_reg2",
                    "2": "register4"
                },
                "byte": {
                    "1": "byte_value"
                },
                "iVar1": {
                    "1": "uart1_pin_result",
                    "2": "uart_pin1_config",
                    "3": "peripheral1",
                    "4": "uart_peripheral1",
                    "6": "uart_pin1"
                },
                "iVar2": {
                    "1": "uart_pin2_configuration",
                    "2": "uart_pin2_config",
                    "3": "peripheral2",
                    "4": "uart_peripheral2",
                    "6": "uart_pin2"
                },
                "local_14": {
                    "1": "uart_info",
                    "2": "uart_config",
                    "3": "uart_mode"
                },
                "local_18": {
                    "1": "uart_pin2_bit",
                    "3": "pin_config2"
                },
                "local_1c": {
                    "1": "mode_bits",
                    "2": "uart_pin2_mask",
                    "3": "pin_config1"
                },
                "local_20": {
                    "1": "uart_pin1_bit",
                    "2": "uart1_pin_bit",
                    "3": "uart_pin_mask",
                    "4": "pin_mask",
                    "5": "pin_mask1"
                },
                "param_1": {
                    "1": "param",
                    "10": "pin_config",
                    "3": "uart_config",
                    "4": "pin_configuration",
                    "5": "uart_pins"
                },
                "param_2": {
                    "1": "peripheral_error"
                },
                "uVar3": {
                    "1": "uart_pin",
                    "2": "uart_pin1_config",
                    "7": "uart_config1"
                },
                "uVar4": {
                    "1": "pin_config_value",
                    "2": "uart_peripheral2",
                    "8": "uart_config2"
                }
            },
            "called": [
                "FUN_08002624",
                "FUN_08004c78",
                "FUN_08004d06",
                "FUN_08004884",
                "FUN_080068f0",
                "FUN_08004cce",
                "FUN_0800441a"
            ],
            "calling": [
                "FUN_08005a68",
                "FUN_08005384"
            ],
            "code": "\n\n\nvoid configure_uart_pins_08004f4c(int *pin_config)\n\n{\n  int uart_pin1;\n  int uart_pin2;\n  undefined4 uart_config1;\n  uint uart_config2;\n  uint pin_mask1;\n  uint pin_config1;\n  uint pin_config2;\n  undefined4 uart_mode;\n  \n  if (pin_config != (int *)0x0) {\n    uart_pin1 = FUN_08004c78((int)*(char *)(pin_config + 0x16),&DAT_0800764c);\n    uart_pin2 = FUN_08004c78((int)*(char *)((int)pin_config + 0x59),&DAT_08007604);\n    if ((uart_pin2 == 0) || (uart_pin1 == 0)) {\n      FUN_080068f0(\"ERROR: at least one UART pin has no peripheral\\n\",uart_pin2);\n    }\n    else {\n      uart_pin1 = FUN_08004d06(uart_pin1);\n      *pin_config = uart_pin1;\n      if (uart_pin1 == 0) {\n        FUN_080068f0(\"ERROR: U(S)ART pins mismatch\\n\");\n      }\n      else {\n        if (uart_pin1 == 0x40013800) {\n          _DAT_4002100c = _DAT_4002100c & 0xffffbfff;\n          _DAT_40021018 = _DAT_40021018 | 0x4000;\n          *(undefined *)(pin_config + 0x11) = 0;\n          *(undefined *)((int)pin_config + 0x5a) = 0x25;\n        }\n        else if (uart_pin1 == 0x40004400) {\n          _DAT_40021010 = _DAT_40021010 & 0xfffdffff;\n          _DAT_4002101c = _DAT_4002101c | 0x20000;\n          *(undefined *)(pin_config + 0x11) = 1;\n          *(undefined *)((int)pin_config + 0x5a) = 0x26;\n        }\n        else if (uart_pin1 == 0x40004800) {\n          _DAT_40021010 = _DAT_40021010 & 0xfffbffff;\n          _DAT_4002101c = _DAT_4002101c | 0x40000;\n          *(undefined *)(pin_config + 0x11) = 2;\n          *(undefined *)((int)pin_config + 0x5a) = 0x27;\n        }\n        uart_config1 = FUN_08004884((uint)((int)*(char *)((int)pin_config + 0x59) << 0x18) >> 0x1c);\n        uart_config2 = FUN_08004cce((int)*(char *)((int)pin_config + 0x59),&DAT_08007604);\n        pin_mask1 = 1 << (*(pin_index *)((int)pin_config + 0x59) & 0xf) & 0xffff;\n        pin_config1 = (uart_config2 >> 3 & 1) << 4 | uart_config2 & 7;\n        pin_config2 = (uart_config2 << 0x1a) >> 0x1e;\n        _DAT_40021018 = _DAT_40021018 | 1;\n        switch((uart_config2 << 0x11) >> 0x19) {\n        case 1:\n          _DAT_40010004 = _DAT_40010004 | 0x7000001;\n          break;\n        case 2:\n          _DAT_40010004 = _DAT_40010004 & 0xfffffffe | 0x7000000;\n          break;\n        case 3:\n          _DAT_40010004 = _DAT_40010004 | 0x7000002;\n          break;\n        case 4:\n          _DAT_40010004 = _DAT_40010004 & 0xfffffffd | 0x7000000;\n          break;\n        case 5:\n          _DAT_40010004 = _DAT_40010004 | 0x7000004;\n          break;\n        case 6:\n          _DAT_40010004 = _DAT_40010004 & 0xfffffffb | 0x7000000;\n          break;\n        case 7:\n          _DAT_40010004 = _DAT_40010004 | 0x7000008;\n          break;\n        case 8:\n          _DAT_40010004 = _DAT_40010004 & 0xfffffff7 | 0x7000000;\n          break;\n        case 9:\n          _DAT_40010004 = _DAT_40010004 | 0x7000030;\n          break;\n        case 10:\n          _DAT_40010004 = _DAT_40010004 & 0xffffffcf | 0x7000010;\n          break;\n        case 0xb:\n          _DAT_40010004 = _DAT_40010004 & 0xffffffcf | 0x7000000;\n          break;\n        case 0xc:\n          _DAT_40010004 = _DAT_40010004 | 0x70000c0;\n          break;\n        case 0xd:\n          _DAT_40010004 = _DAT_40010004 & 0xffffff3f | 0x7000040;\n          break;\n        case 0xe:\n          _DAT_40010004 = _DAT_40010004 & 0xffffff3f | 0x7000000;\n          break;\n        case 0xf:\n          _DAT_40010004 = _DAT_40010004 | 0x7000300;\n          break;\n        case 0x10:\n          _DAT_40010004 = _DAT_40010004 & 0xfffffcff | 0x7000200;\n          break;\n        case 0x11:\n          _DAT_40010004 = _DAT_40010004 & 0xfffffcff | 0x7000100;\n          break;\n        case 0x12:\n          _DAT_40010004 = _DAT_40010004 & 0xfffffcff | 0x7000000;\n          break;\n        case 0x13:\n          _DAT_40010004 = _DAT_40010004 | 0x7000c00;\n          break;\n        case 0x14:\n          _DAT_40010004 = _DAT_40010004 & 0xfffff3ff | 0x7000800;\n          break;\n        case 0x15:\n          _DAT_40010004 = _DAT_40010004 & 0xfffff3ff | 0x7000000;\n          break;\n        case 0x16:\n          _DAT_40010004 = _DAT_40010004 | 0x7001000;\n          break;\n        case 0x17:\n          _DAT_40010004 = _DAT_40010004 & 0xffffefff | 0x7000000;\n          break;\n        case 0x1b:\n          _DAT_40010004 = _DAT_40010004 | 0x7008000;\n          break;\n        case 0x1c:\n          _DAT_40010004 = _DAT_40010004 & 0xffff7fff | 0x7000000;\n          break;\n        case 0x21:\n          _DAT_40010004 = _DAT_40010004 & 0xf8ffffff;\n          break;\n        case 0x22:\n          _DAT_40010004 = _DAT_40010004 & 0xf8ffffff | 0x1000000;\n          break;\n        case 0x23:\n          _DAT_40010004 = _DAT_40010004 & 0xf8ffffff | 0x2000000;\n          break;\n        case 0x24:\n          _DAT_40010004 = _DAT_40010004 & 0xf8ffffff | 0x4000000;\n        }\n        uart_mode = 3;\n        FUN_08002624(uart_config1,&pin_mask1);\n        uart_config1 = FUN_08004884((uint)((int)*(char *)(pin_config + 0x16) << 0x18) >> 0x1c);\n        uart_config2 = FUN_08004cce((int)*(char *)(pin_config + 0x16),&DAT_0800764c);\n        pin_mask1 = 1 << (*(pin_index *)(pin_config + 0x16) & 0xf) & 0xffff;\n        pin_config1 = (uart_config2 >> 3 & 1) << 4 | uart_config2 & 7;\n        pin_config2 = (uart_config2 << 0x1a) >> 0x1e;\n        FUN_08002624(uart_config1,&pin_mask1);\n        (&DAT_2000032c)[*(pin_index *)(pin_config + 0x11)] = pin_config + 1;\n        pin_config[1] = *pin_config;\n        pin_config[2] = pin_config[0x12];\n        pin_config[3] = pin_config[0x13];\n        pin_config[4] = pin_config[0x14];\n        pin_config[5] = pin_config[0x15];\n        pin_config[6] = 0xc;\n        pin_config[7] = 0;\n        pin_config[8] = 0;\n        FUN_0800441a(pin_config + 1);\n      }\n    }\n    return;\n  }\n  return;\n}\n\n",
            "current_name": "configure_uart_pins_08004f4c",
            "entrypoint": "0x08004f4c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004f4c": "configure_uart_pins_08004f4c",
                "byte": "pin_index",
                "iVar1": "uart_pin1",
                "iVar2": "uart_pin2",
                "local_14": "uart_mode",
                "local_18": "pin_config2",
                "local_1c": "pin_config1",
                "local_20": "pin_mask1",
                "param_1": "pin_config",
                "uVar3": "uart_config1",
                "uVar4": "uart_config2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005384": {
            "additional_data": {
                "&DAT_08007604": {
                    "1": "data_pointer2"
                },
                "&DAT_0800764c": {
                    "1": "data_pointer1"
                },
                "&DAT_20000088": {
                    "1": "data_ptr"
                },
                "DAT_08007604": {
                    "1": "operation_parameter"
                },
                "DAT_0800764c": {
                    "1": "operation_data"
                },
                "DAT_20000088": {
                    "1": "data9"
                },
                "DAT_200000d0": {
                    "1": "constant2",
                    "2": "constant_value"
                },
                "DAT_200000d4": {
                    "1": "variable2",
                    "2": "data5"
                },
                "DAT_200000d8": {
                    "1": "constant4",
                    "2": "data6"
                },
                "DAT_200000dc": {
                    "1": "constant2",
                    "2": "data4"
                },
                "DAT_200000e0": {
                    "1": "initialized_data_2",
                    "2": "data2"
                },
                "DAT_200000e1": {
                    "1": "processed_value",
                    "2": "processed_data"
                },
                "FUN_08004c78": {
                    "1": "get_info",
                    "2": "perform_operation"
                },
                "FUN_08004ca2": {
                    "1": "execute_operation",
                    "2": "process_value",
                    "5": "process_data"
                },
                "FUN_08004f4c": {
                    "1": "update_data",
                    "9": "print_data"
                },
                "FUN_08005384": {
                    "1": "initialize_program",
                    "2": "initialize_function",
                    "21": "initialize_data",
                    "5": "initialize_application"
                },
                "iVar1": {
                    "1": "error_code",
                    "25": "result",
                    "3": "result1"
                },
                "uVar2": {
                    "1": "handle",
                    "2": "data_value",
                    "3": "param",
                    "4": "value",
                    "9": "second_result"
                }
            },
            "called": [
                "FUN_08004c78",
                "FUN_08004ca2",
                "FUN_08004f4c"
            ],
            "calling": [
                "FUN_080053d4"
            ],
            "code": "\nvoid initialize_data_08005384(void)\n\n{\n  int result;\n  undefined4 second_result;\n  \n  result = FUN_08004c78(2,&DAT_0800764c);\n  if (result != 0) {\n    second_result = FUN_08004c78(2,&DAT_0800764c);\n    DAT_200000e1 = FUN_08004ca2(second_result,&DAT_08007604);\n    DAT_200000e0 = 2;\n    DAT_200000d0 = 0x2580;\n    DAT_200000dc = 0;\n    DAT_200000d4 = 0;\n    DAT_200000d8 = 0;\n    FUN_08004f4c(&DAT_20000088);\n  }\n  return;\n}\n\n",
            "current_name": "initialize_data_08005384",
            "entrypoint": "0x08005384",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005384": "initialize_data_08005384",
                "iVar1": "result",
                "uVar2": "second_result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080053d4": {
            "additional_data": {
                "&DAT_0800764c": {
                    "1": "constant_data",
                    "7": "data_array"
                },
                "&DAT_2000032c": {
                    "1": "dynamic_array",
                    "2": "array"
                },
                "1000": {
                    "1": "max_time_difference"
                },
                "DAT_0800764c": {
                    "1": "array_two",
                    "2": "constant_data"
                },
                "DAT_200000cc": {
                    "1": "loop_limit",
                    "2": "dynamic_data",
                    "3": "condition_variable"
                },
                "DAT_2000032c": {
                    "1": "loop_check_array",
                    "2": "array_data"
                },
                "FUM_08001cc4": {
                    "1": "get_current_time"
                },
                "FUM_08004c78": {
                    "1": "connect_to_server"
                },
                "FUN_08001cc4": {
                    "1": "function3",
                    "4": "get_current_time"
                },
                "FUN_08004478": {
                    "1": "function2",
                    "2": "execute_action"
                },
                "FUN_08004c78": {
                    "1": "check_data",
                    "2": "initialize_variable"
                },
                "FUN_08005384": {
                    "1": "perform_additional_operation",
                    "2": "print_error_message"
                },
                "FUN_080053d4": {
                    "1": "perform_operation",
                    "2": "find_value"
                },
                "iVar1": {
                    "1": "result_var1",
                    "2": "result_a",
                    "6": "result1",
                    "8": "initial_value"
                },
                "iVar2": {
                    "1": "current_result",
                    "2": "result_b",
                    "6": "result"
                },
                "param_1": {
                    "1": "value",
                    "2": "param_a",
                    "3": "input_param",
                    "4": "input1"
                },
                "param_2": {
                    "1": "input_values",
                    "2": "limit",
                    "3": "value",
                    "4": "param2"
                },
                "param_3": {
                    "1": "execution_time",
                    "3": "param_3"
                },
                "param_4": {
                    "1": "time_limit",
                    "3": "param_4"
                },
                "uVar3": {
                    "1": "iteration_counter",
                    "10": "loop_counter",
                    "2": "count",
                    "5": "index",
                    "9": "counter"
                }
            },
            "called": [
                "FUN_08004c78",
                "FUN_08004478",
                "FUN_08001cc4",
                "FUN_08005384"
            ],
            "calling": [
                "FUN_08005730"
            ],
            "code": "\nuint find_value_080053d4(undefined4 input_value,uint input2)\n\n{\n  int initial_value;\n  int result;\n  uint loop_counter;\n  \n  initial_value = FUN_08001cc4();\n  result = FUN_08004c78(2,&DAT_0800764c);\n  if (result == 0) {\n    return 0;\n  }\n  for (loop_counter = 0;\n      (loop_counter < 5 &&\n      (((&DAT_2000032c)[loop_counter] == 0 ||\n       (result = FUN_08004c78(2,&DAT_0800764c), *(int *)(&DAT_2000032c)[loop_counter] != result))));\n      loop_counter = loop_counter + 1 & 0xff) {\n  }\n  if (4 < loop_counter) {\n    if ((4 < DAT_200000cc) && (FUN_08005384(), 4 < DAT_200000cc)) {\n      return 0;\n    }\n    loop_counter = (uint)DAT_200000cc;\n  }\n  do {\n    result = FUN_08004478((&DAT_2000032c)[loop_counter],input_value,input2 & 0xffff,1000);\n    if (result == 0) {\n      return input2;\n    }\n    result = FUN_08001cc4();\n  } while ((uint)(result - initial_value) < 1000);\n  return 0;\n}\n\n",
            "current_name": "find_value_080053d4",
            "entrypoint": "0x080053d4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080053d4": "find_value_080053d4",
                "iVar1": "initial_value",
                "iVar2": "result",
                "param_1": "input_value",
                "param_2": "input2",
                "uVar3": "loop_counter"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800548c": {
            "additional_data": {
                "*(byte *)(param_1 + 0x44)": {
                    "1": "byte_value"
                },
                "0x22": {
                    "1": "magic_value"
                },
                "FUN_080047e8": {
                    "1": "get_bit_pattern",
                    "3": "get_byte_value"
                },
                "FUN_0800548c": {
                    "1": "check_if_flags_set",
                    "2": "check_flag_condition",
                    "3": "is_condition_met",
                    "7": "is_flag_set"
                },
                "byte": {
                    "1": "param"
                },
                "param_1": {
                    "1": "input_parameter",
                    "10": "input_value",
                    "2": "value",
                    "3": "flag_value",
                    "9": "flag"
                },
                "uVar1": {
                    "1": "flag_check",
                    "2": "return_value",
                    "23": "result",
                    "3": "flag_value"
                }
            },
            "called": [
                "FUN_080047e8"
            ],
            "calling": [
                "FUN_08005510",
                "FUN_080054d4"
            ],
            "code": "\nbool is_flag_set_0800548c(int input_value)\n\n{\n  uint result;\n  \n  result = FUN_080047e8((&DAT_2000032c)[*(param *)(input_value + 0x44)]);\n  return (result & 0x22) == 0x22;\n}\n\n",
            "current_name": "is_flag_set_0800548c",
            "entrypoint": "0x0800548c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800548c": "is_flag_set_0800548c",
                "byte": "param",
                "param_1": "input_value",
                "uVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080054b0": {
            "additional_data": {
                "&DAT_2000032c": {
                    "1": "[array_name]"
                },
                "(&DAT_2000032c)[*(byte *)(param_1 + 0x44)]": {
                    "1": "important_data"
                },
                "*(&DAT_2000032c)": {
                    "1": "lookup_table"
                },
                "*(byte *)(param_1 + 0x44)": {
                    "1": "index"
                },
                "FUN_080047e8": {
                    "1": "get_flag_data"
                },
                "FUN_080054b0": {
                    "1": "is_data_valid",
                    "2": "check_flag_validity",
                    "3": "check_flag_condition",
                    "7": "is_flag_set"
                },
                "byte": {
                    "1": "int_value",
                    "2": "input_byte",
                    "3": "byte_value"
                },
                "param_1": {
                    "1": "value",
                    "12": "input_value",
                    "2": "data",
                    "3": "flag_index",
                    "4": "flag",
                    "5": "flag_value"
                },
                "uVar1": {
                    "1": "flag_result",
                    "21": "result",
                    "4": "flag_value"
                }
            },
            "called": [
                "FUN_080047e8"
            ],
            "calling": [],
            "code": "\nbool is_flag_set_080054b0(int input_value)\n\n{\n  uint result;\n  \n  result = FUN_080047e8((&DAT_2000032c)[*(byte_value *)(input_value + 0x44)]);\n  return (result & 0x21) == 0x21;\n}\n\n",
            "current_name": "is_flag_set_080054b0",
            "entrypoint": "0x080054b0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080054b0": "is_flag_set_080054b0",
                "byte": "byte_value",
                "param_1": "input_value",
                "uVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080054d4": {
            "additional_data": {
                "&DAT_2000032c": {
                    "1": "helper_array"
                },
                "&DAT_2000032c[*(byte *)(param_1 + 0x44)]": {
                    "1": "func_array_entry"
                },
                "(&(DAT_2000032c)[*(byte *)(param_1 + 0x44)])": {
                    "1": "data_ptr"
                },
                "(*(byte *)(param_1 + 0x44))": {
                    "1": "index"
                },
                "(*(undefined *)(param_1 + 0x45))": {
                    "1": "source_data"
                },
                "(byte *)(param_1 + 0x44)": {
                    "1": "byte_from_input_address_plus_offset"
                },
                "(param_1 + 0x44)": {
                    "1": "index"
                },
                "(param_1 + 0x45)": {
                    "1": "data"
                },
                "*(undefined *)(param_1 + 0x45)": {
                    "1": "data_from_input_address_plus_offset"
                },
                "*param_2": {
                    "1": "extracted_byte"
                },
                "1": {
                    "1": "byte_count"
                },
                "DAT_2000032c": {
                    "1": "some_data"
                },
                "FUB_0800548c": {
                    "1": "check_status"
                },
                "FUN_080045a2": {
                    "1": "call_function",
                    "17": "process_data",
                    "4": "copy_data"
                },
                "FUN_0800548c": {
                    "1": "is_user_data_valid",
                    "2": "check_value",
                    "9": "check_condition"
                },
                "FUN_080054d4": {
                    "1": "extract_value_and_update",
                    "13": "extract_data",
                    "2": "extract_byte_and_call_function",
                    "4": "extract_and_process_data",
                    "6": "extract_data_from_binary"
                },
                "byte": {
                    "1": "byte_value"
                },
                "byte *(param_1 + 0x44)": {
                    "1": "func_index"
                },
                "byte *(param_1 + 0x45)": {
                    "1": "byte_value"
                },
                "iVar1": {
                    "1": "success",
                    "2": "status",
                    "27": "result"
                },
                "param_1": {
                    "1": "input_param",
                    "2": "data_address",
                    "3": "data_pointer",
                    "5": "input_value",
                    "6": "input"
                },
                "param_1 + 0x45": {
                    "1": "byte_address"
                },
                "param_2": {
                    "1": "dest",
                    "10": "output",
                    "2": "output_buffer",
                    "5": "output_data"
                },
                "param_3": {
                    "1": "length",
                    "10": "param3",
                    "2": "param1",
                    "6": "size",
                    "7": "param_3"
                },
                "param_4": {
                    "1": "param",
                    "13": "param4",
                    "2": "additional_param",
                    "8": "param_4"
                },
                "ptr_FUN_080045a2": {
                    "1": "process_data"
                },
                "ptr_FUN_0800548c": {
                    "1": "check_data_validity"
                }
            },
            "called": [
                "FUN_080045a2",
                "FUN_0800548c"
            ],
            "calling": [
                "FUN_0800598a"
            ],
            "code": "\nundefined4 extract_data_080054d4(int input,undefined *output,undefined4 param3,undefined4 param4)\n\n{\n  int result;\n  \n  if (input == 0) {\n    return 0xffffffff;\n  }\n  result = FUN_0800548c();\n  if (result == 0) {\n    *output = *(undefined *)(input + 0x45);\n    FUN_080045a2((&DAT_2000032c)[*(byte_value *)(input + 0x44)],input + 0x45,1,&DAT_2000032c,param4);\n    return 0;\n  }\n  return 0xffffffff;\n}\n\n",
            "current_name": "extract_data_080054d4",
            "entrypoint": "0x080054d4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080054d4": "extract_data_080054d4",
                "byte": "byte_value",
                "iVar1": "result",
                "param_1": "input",
                "param_2": "output",
                "param_3": "param3",
                "param_4": "param4"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005510": {
            "additional_data": {
                "&DAT_200002dc": {
                    "1": "ptr_arr1"
                },
                "&DAT_200002f0": {
                    "1": "ptr_arr2"
                },
                "(&DAT_2000032c)[*(byte *)(param_1 + 0x44)]": {
                    "1": "function_pointer"
                },
                "(int)*(char *)(param_1 + 0x5a)": {
                    "1": "flag_value"
                },
                "*(byte *)(param_1 + 0x44)": {
                    "1": "byte_value"
                },
                "*(char *)(param_1 + 0x5a)": {
                    "1": "char_value"
                },
                "*(int *)(&DAT_200002f0 + uVar2 * 4)": {
                    "1": "data_pointer_array[index]"
                },
                "*(undefined4 *)(&DAT_200002dc + uVar2 * 4)": {
                    "1": "data_array[index]"
                },
                "FUN_08002494": {
                    "1": "perform_operation"
                },
                "FUN_080024f8": {
                    "1": "finalize_update"
                },
                "FUN_080045a2": {
                    "1": "process_data"
                },
                "FUN_0800548c": {
                    "1": "check_validity",
                    "2": "check_value"
                },
                "FUN_08005510": {
                    "1": "update_parameter_data",
                    "18": "update_data",
                    "3": "initialize_data"
                },
                "iVar1": {
                    "1": "check_result",
                    "29": "result"
                },
                "param_1": {
                    "1": "param",
                    "11": "data",
                    "3": "input_data",
                    "5": "data_ptr",
                    "6": "data_pointer"
                },
                "param_1 + 0x45": {
                    "1": "data_offset"
                },
                "param_2": {
                    "1": "new_param",
                    "11": "new_value",
                    "13": "value",
                    "3": "value1"
                },
                "param_3": {
                    "1": "value_2",
                    "3": "value2",
                    "4": "unused_param"
                },
                "param_4": {
                    "1": "param",
                    "2": "unused_param2",
                    "3": "unused2",
                    "4": "param_4",
                    "5": "param4"
                },
                "uVar2": {
                    "1": "data_index",
                    "25": "index",
                    "3": "byte_value"
                }
            },
            "called": [
                "FUN_080045a2",
                "FUN_08002494",
                "FUN_0800548c",
                "FUN_080024f8"
            ],
            "calling": [
                "FUN_08005a68"
            ],
            "code": "\nvoid update_data_08005510(int data,undefined4 value,undefined4 unused,undefined4 param4)\n\n{\n  int result;\n  uint index;\n  \n  if (data != 0) {\n    result = FUN_0800548c();\n    if (result == 0) {\n      index = (uint)*(byte *)(data + 0x44);\n      *(undefined4 *)(&DAT_200002dc + index * 4) = value;\n      *(int *)(&DAT_200002f0 + index * 4) = data;\n      FUN_08002494((int)*(char *)(data + 0x5a),0,1,index,param4);\n      FUN_080024f8((int)*(char *)(data + 0x5a));\n      FUN_080045a2((&DAT_2000032c)[*(byte *)(data + 0x44)],data + 0x45,1);\n    }\n    return;\n  }\n  return;\n}\n\n",
            "current_name": "update_data_08005510",
            "entrypoint": "0x08005510",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005510": "update_data_08005510",
                "iVar1": "result",
                "param_1": "data",
                "param_2": "value",
                "param_3": "unused",
                "param_4": "param4",
                "uVar2": "index"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005568": {
            "additional_data": {
                "(&DAT_20000304 + (uint)bVar1 * 4)": {
                    "1": "data_address"
                },
                "(&DAT_20000318 + (uint)bVar1 * 4)": {
                    "1": "pointer_address"
                },
                "*(byte *)(param_1 + 0x44)": {
                    "1": "byte_offset"
                },
                "*(char *)(param_1 + 0x5a)": {
                    "1": "char_value"
                },
                "*(int *)(param_1 + 100)": {
                    "1": "int_value"
                },
                "*(ushort *)(param_1 + 0x6a)": {
                    "1": "ushort_value"
                },
                "FUN_08002494": {
                    "1": "update_flags",
                    "2": "initialize_data",
                    "4": "process_data",
                    "5": "set_flag"
                },
                "FUN_080024f8": {
                    "1": "execute_process",
                    "2": "perform_action2",
                    "7": "process_data"
                },
                "FUN_0800455a": {
                    "1": "perform_operation",
                    "2": "perform_action3",
                    "5": "perform_action"
                },
                "FUN_08005568": {
                    "1": "process_data",
                    "28": "update_data"
                },
                "bVar1": {
                    "14": "index",
                    "17": "byte_value"
                },
                "param_1": {
                    "1": "input_param",
                    "2": "address",
                    "4": "data_address",
                    "6": "data",
                    "8": "data_pointer"
                },
                "param_2": {
                    "1": "value2",
                    "2": "new_data",
                    "21": "new_value",
                    "6": "value"
                },
                "param_3": {
                    "1": "value3"
                }
            },
            "called": [
                "FUN_08002494",
                "FUN_080024f8",
                "FUN_0800455a"
            ],
            "calling": [],
            "code": "\nvoid update_data_08005568(int data_ptr,undefined4 new_value)\n\n{\n  byte byte_value;\n  \n  if (data_ptr != 0) {\n    byte_value = *(byte *)(data_ptr + 0x44);\n    *(undefined4 *)(&DAT_20000304 + (uint)byte_value * 4) = new_value;\n    *(int *)(&DAT_20000318 + (uint)byte_value * 4) = data_ptr;\n    FUN_08002494((int)*(char *)(data_ptr + 0x5a),0,2);\n    FUN_080024f8((int)*(char *)(data_ptr + 0x5a));\n    FUN_0800455a((&DAT_2000032c)[*(byte *)(data_ptr + 0x44)],\n                 *(int *)(data_ptr + 100) + (uint)*(ushort *)(data_ptr + 0x6a),1);\n    return;\n  }\n  return;\n}\n\n",
            "current_name": "update_data_08005568",
            "entrypoint": "0x08005568",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005568": "update_data_08005568",
                "bVar1": "byte_value",
                "param_1": "data_ptr",
                "param_2": "new_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080055bc": {
            "additional_data": {
                "<original_function_name>": {
                    "1": "find_first_occurrence"
                },
                "<param_1>": {
                    "1": "input"
                },
                "FUN_080055bc": {
                    "1": "find_index_or_default",
                    "2": "find_element_index",
                    "20": "find_value_index",
                    "5": "find_index"
                },
                "param_1": {
                    "1": "number",
                    "2": "element",
                    "23": "value",
                    "4": "input_value"
                },
                "uVar1": {
                    "31": "index"
                }
            },
            "called": [],
            "calling": [
                "FUN_08005604",
                "FUN_080055e0"
            ],
            "code": "\nuint find_value_index_080055bc(int value)\n\n{\n  uint index;\n  \n  if (value == 0) {\n    index = 5;\n  }\n  else {\n    index = 0;\n    while( true ) {\n      if (4 < index) {\n        return index;\n      }\n      if (value == (&DAT_2000032c)[index]) break;\n      index = index + 1 & 0xff;\n    }\n  }\n  return index;\n}\n\n",
            "current_name": "find_value_index_080055bc",
            "entrypoint": "0x080055bc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080055bc": "find_value_index_080055bc",
                "param_1": "value",
                "uVar1": "index"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080055e0": {
            "additional_data": {
                "&DAT_200002dc": {
                    "1": "subfunction_table"
                },
                "&DAT_200002f0": {
                    "1": "param_table"
                },
                "DAT_200002dc": {
                    "1": "function_array"
                },
                "DAT_200002f0": {
                    "1": "parameter_array"
                },
                "FUN_080055bc": {
                    "1": "get_threshold",
                    "3": "get_sub_function_index",
                    "8": "get_function_index"
                },
                "FUN_080055e0": {
                    "1": "execute_selected_function",
                    "3": "execute_subfunction",
                    "5": "execute_sub_function",
                    "6": "execute_function_based_on_value",
                    "8": "execute_function"
                },
                "code **": {
                    "1": "function_pointer"
                },
                "param_1": {
                    "1": "param",
                    "2": "index"
                },
                "uVar1": {
                    "1": "num_sub_functions",
                    "2": "return_value",
                    "3": "value",
                    "4": "result",
                    "7": "function_index"
                }
            },
            "called": [
                "FUN_080055bc"
            ],
            "calling": [
                "FUN_08004618"
            ],
            "code": "\nvoid execute_function_080055e0(void)\n\n{\n  uint function_index;\n  \n  function_index = FUN_080055bc();\n  if (function_index < 5) {\n    (**(code **)(&DAT_200002dc + function_index * 4))(*(undefined4 *)(&DAT_200002f0 + function_index * 4));\n  }\n  return;\n}\n\n",
            "current_name": "execute_function_080055e0",
            "entrypoint": "0x080055e0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080055e0": "execute_function_080055e0",
                "uVar1": "function_index"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005604": {
            "additional_data": {
                "&DAT_20000304": {
                    "1": "dynamic_functions"
                },
                "&DAT_20000318": {
                    "1": "dynamic_addresses"
                },
                "(&DAT_2000032c)[*(byte *)(address + 0x44)]": {
                    "1": "buffer"
                },
                "*(byte *)(iVar3 + 0x44)": {
                    "1": "byte_value"
                },
                "*(int *)(&DAT_20000318 + uVar1 * 4)": {
                    "1": "data_pointer"
                },
                "*(int *)(address + 100) + (uint)*(ushort *)(address + 0x6a)": {
                    "1": "value"
                },
                "*(int *)(iVar3 + 100)": {
                    "1": "int_value"
                },
                "*(ushort *)(iVar3 + 0x6a)": {
                    "1": "ushort_value"
                },
                "**(code **)(&DAT_20000304 + uVar1 * 4)": {
                    "2": "function_pointer"
                },
                "**code": {
                    "1": "function_pointer"
                },
                "DAT_20000304": {
                    "1": "function_address",
                    "2": "function_array"
                },
                "DAT_20000318": {
                    "1": "data_address",
                    "2": "array"
                },
                "DAT_2000032c": {
                    "1": "data",
                    "3": "byte_data"
                },
                "FUN_0800455a": {
                    "1": "send_data",
                    "2": "execute_operation",
                    "3": "execute_action",
                    "7": "perform_action"
                },
                "FUN_080055bc": {
                    "1": "get_function_index",
                    "2": "get_index",
                    "3": "get_result",
                    "4": "get_random_number",
                    "9": "get_random_index"
                },
                "FUN_08005604": {
                    "1": "process_function",
                    "2": "execute_task",
                    "8": "process_data",
                    "9": "execute_function"
                },
                "code": {
                    "1": "function_pointer"
                },
                "code **": {
                    "1": "function_pointer_array"
                },
                "iVar2": {
                    "1": "function_result",
                    "11": "result",
                    "13": "return_value",
                    "2": "action_result"
                },
                "iVar3": {
                    "1": "data_address",
                    "11": "address",
                    "3": "data_ptr",
                    "4": "data",
                    "6": "data_pointer"
                },
                "param_1": {
                    "1": "input_param",
                    "4": "input"
                },
                "param_2": {
                    "1": "param1"
                },
                "param_3": {
                    "1": "param2"
                },
                "uVar1": {
                    "1": "random_number",
                    "13": "result",
                    "2": "return_value",
                    "3": "index",
                    "8": "random_index"
                },
                "uVar1 < 5": {
                    "1": "random_value_less_than_5"
                }
            },
            "called": [
                "FUN_080055bc",
                "FUN_0800455a"
            ],
            "calling": [
                "FUN_080045fe"
            ],
            "code": "\nvoid execute_function_08005604(void)\n\n{\n  uint result;\n  int return_value;\n  int address;\n  \n  result = FUN_080055bc();\n  address = *(int *)(&DAT_20000318 + result * 4);\n  if ((result < 5) && (return_value = (**(function_pointer **)(&DAT_20000304 + result * 4))(address), return_value != -1)) {\n    FUN_0800455a((&DAT_2000032c)[*(byte *)(address + 0x44)],\n                 *(int *)(address + 100) + (uint)*(ushort *)(address + 0x6a),1);\n  }\n  return;\n}\n\n",
            "current_name": "execute_function_08005604",
            "entrypoint": "0x08005604",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005604": "execute_function_08005604",
                "code": "function_pointer",
                "iVar2": "return_value",
                "iVar3": "address",
                "uVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005650": {
            "called": [],
            "calling": [
                "FUN_080046b8"
            ],
            "code": "\nvoid FUNC_08005650(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_08005650",
            "entrypoint": "0x08005650",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_08005650": "FUNC_08005650"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_080056d8": {
            "additional_data": {
                "&DAT_20000340": {
                    "1": "global_memory"
                },
                "&DAT_200006a8": {
                    "1": "initial_global_memory"
                },
                "&stack0x00000000": {
                    "1": "stack_memory",
                    "2": "end_of_stack"
                },
                "DAT_20000340": {
                    "1": "stack_pointer",
                    "10": "current_memory",
                    "2": "current_memory_ptr"
                },
                "DAT_200006a4": {
                    "1": "allocation_error",
                    "21": "error_code"
                },
                "DAT_200006a8": {
                    "1": "stack_start_address",
                    "2": "initial_position",
                    "4": "default_memory",
                    "6": "initial_memory"
                },
                "DIC_20000340": {
                    "1": "first_allocation"
                },
                "DIC_200006a4": {
                    "1": "allocation_failure"
                },
                "DIC_200006a8": {
                    "1": "stack_start"
                },
                "FUN_080056d8": {
                    "1": "increase_stack_pointer",
                    "27": "allocate_memory"
                },
                "param_1": {
                    "1": "increase_amount",
                    "27": "size",
                    "3": "num_bytes"
                },
                "puVar1": {
                    "1": "memory_address",
                    "27": "allocated_memory"
                },
                "puVar2": {
                    "1": "new_allocated_memory"
                },
                "stack0x00000000": {
                    "1": "end_of_stack",
                    "2": "stack_limit",
                    "3": "stack_end"
                }
            },
            "called": [],
            "calling": [
                "FUN_08006920"
            ],
            "code": "\nundefined * allocate_memory_080056d8(int size)\n\n{\n  undefined *allocated_memory;\n  \n  if (DAT_20000340 == (undefined *)0x0) {\n    DAT_20000340 = &DAT_200006a8;\n  }\n  allocated_memory = DAT_20000340;\n  if (DAT_20000340 + size <= end_of_stack) {\n    DAT_20000340 = DAT_20000340 + size;\n    return allocated_memory;\n  }\n  DAT_200006a4 = 0xc;\n  return (undefined *)0xffffffff;\n}\n\n",
            "current_name": "allocate_memory_080056d8",
            "entrypoint": "0x080056d8",
            "imported": false,
            "improved": true,
            "renaming": {
                "&stack0x00000000": "end_of_stack",
                "FUN_080056d8": "allocate_memory_080056d8",
                "param_1": "size",
                "puVar1": "allocated_memory",
                "stack0x00000000": "stack_end"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005714": {
            "additional_data": {
                "0xffffffff": {
                    "1": "return_value"
                },
                "<original_variable_name_1>": {
                    "1": "error_code"
                },
                "DAT_": {
                    "1": "..."
                },
                "FUN_08005714": {
                    "1": "initialize_function",
                    "2": "get_negative_one",
                    "3": "initialize_error_code",
                    "4": "initialize_return_value",
                    "6": "get_return_value",
                    "8": "get_error_code"
                },
                "PTR_": {
                    "1": "..."
                },
                "undefined4": {
                    "1": "error_status",
                    "2": "unsigned_int",
                    "3": "int",
                    "4": "uint32_t"
                }
            },
            "called": [],
            "calling": [],
            "code": "\nuint32_t get_error_code_08005714(void)\n\n{\n  return 0xffffffff;\n}\n\n",
            "current_name": "get_error_code_08005714",
            "entrypoint": "0x08005714",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005714": "get_error_code_08005714",
                "undefined4": "uint32_t"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800571a": {
            "additional_data": {
                "*(undefined4 *)(param_2 + 4)": {
                    "1": "memory_location",
                    "2": "memory_value",
                    "3": "memory_size"
                },
                "0x2000": {
                    "1": "attribute_value"
                },
                "FUN_0800571a": {
                    "1": "set_memory_segment",
                    "14": "initialize_memory",
                    "2": "set_memory_page_size",
                    "3": "set_memory_flag"
                },
                "param_1": {
                    "1": "flag_value",
                    "2": "param",
                    "3": "result",
                    "9": "param1"
                },
                "param_2": {
                    "1": "memory_offset",
                    "12": "memory_address",
                    "2": "buffer",
                    "3": "address",
                    "4": "buffer_address"
                },
                "param_2 + 4": {
                    "1": "buffer_offset"
                }
            },
            "called": [],
            "calling": [
                "FUN_08007004"
            ],
            "code": "\nundefined4 initialize_memory_0800571a(undefined4 param1,int memory_address)\n\n{\n  *(undefined4 *)(memory_address + 4) = 0x2000;\n  return 0;\n}\n\n",
            "current_name": "initialize_memory_0800571a",
            "entrypoint": "0x0800571a",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800571a": "initialize_memory_0800571a",
                "param_1": "param1",
                "param_2": "memory_address"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005724": {
            "additional_data": {
                "<original_variable_name>": {
                    "1": "<new_variable_name>"
                },
                "DAT_": {
                    "1": "<unchanged>"
                },
                "FUN_08005724": {
                    "1": "initialize_return_value",
                    "3": "get_one",
                    "4": "initialize_flag",
                    "7": "initialize",
                    "9": "get_return_value"
                },
                "PTR_": {
                    "1": "ptr_"
                },
                "return": {
                    "1": "return_value",
                    "6": "result"
                },
                "return_value": {
                    "1": "result"
                },
                "undefined4": {
                    "1": "status_type",
                    "2": "uint32",
                    "3": "uint32_t"
                }
            },
            "called": [],
            "calling": [
                "FUN_08007028"
            ],
            "code": "\nvoid get_return_value_08005724(void)\n\n{\n  result 1;\n}\n\n",
            "current_name": "get_return_value_08005724",
            "entrypoint": "0x08005724",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005724": "get_return_value_08005724",
                "return": "result",
                "undefined4": "void"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005728": {
            "additional_data": {
                "": {
                    "1": ""
                },
                "<original_variable_name>": {
                    "1": "result"
                },
                "DAT_": {
                    "1": "unchanged"
                },
                "FUNC_PARAM_1": {
                    "1": "param1"
                },
                "FUNC_PARAM_2": {
                    "1": "param2"
                },
                "FUN_08005728": {
                    "1": "initialize_value",
                    "18": "initialize",
                    "2": "initialize_program",
                    "4": "get_default_value"
                },
                "FUN_08005728.return_value": {
                    "1": "result"
                },
                "PTR_": {
                    "1": "unchanged"
                },
                "PTR_FUN_08005728": {
                    "1": "p_value"
                },
                "PTR_param_1": {
                    "1": "parameter"
                },
                "PTR_param_2": {
                    "1": "parameter2"
                },
                "original_function_name": {
                    "1": "more_descriptive_function_name"
                },
                "result": {
                    "1": "return_value"
                },
                "return": {
                    "1": "status"
                },
                "undefined4": {
                    "1": "uint32_t",
                    "12": "void"
                }
            },
            "called": [],
            "calling": [
                "FUN_08007048"
            ],
            "code": "\nvoid initialize_08005728(void)\n\n{\n  status 0;\n}\n\n",
            "current_name": "initialize_08005728",
            "entrypoint": "0x08005728",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005728": "initialize_08005728",
                "return": "status",
                "undefined4": "void"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800572c": {
            "additional_data": {
                "<original_function_name>": {
                    "1": "initialize_data"
                },
                "<original_parameter_name_1>": {
                    "1": "<new_parameter_name_1>"
                },
                "<original_parameter_name_2>": {
                    "1": "<new_parameter_name_2>"
                },
                "<original_parameter_name_n>": {
                    "1": "<new_parameter_name_n>"
                },
                "<original_variable_name_1>": {
                    "1": "<new_variable_name_1>"
                },
                "<original_variable_name_2>": {
                    "1": "<new_variable_name_2>"
                },
                "<original_variable_name_n>": {
                    "1": "<new_variable_name_n>"
                },
                "DAT_0800572c": {
                    "1": "result"
                },
                "DAT_var_1": {
                    "1": "data_variable_1"
                },
                "DAT_var_2": {
                    "1": "data_variable_2"
                },
                "FUN_0800572c": {
                    "1": "calculate_result",
                    "16": "initialize",
                    "2": "initialize_data",
                    "3": "get_zero"
                },
                "PTR_fun_1": {
                    "1": "function_pointer_1"
                },
                "PTR_fun_2": {
                    "1": "function_pointer_2"
                },
                "PTR_param1": {
                    "1": "parameter1"
                },
                "PTR_param2": {
                    "1": "parameter2"
                },
                "PTR_var_1": {
                    "1": "variable_pointer_1"
                },
                "PTR_var_2": {
                    "1": "variable_pointer_2"
                },
                "VAR_1": {
                    "1": "result"
                },
                "original variable(s)": {
                    "1": "no_change"
                },
                "return": {
                    "1": "status",
                    "2": "result"
                },
                "return value": {
                    "1": "status",
                    "2": "success"
                },
                "undefined4": {
                    "1": "uint32_t",
                    "2": "int",
                    "9": "void"
                }
            },
            "called": [],
            "calling": [
                "FUN_0800706c"
            ],
            "code": "\nvoid initialize_0800572c(void)\n\n{\n  result 0;\n}\n\n",
            "current_name": "initialize_0800572c",
            "entrypoint": "0x0800572c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800572c": "initialize_0800572c",
                "return": "result",
                "undefined4": "void"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005730": {
            "additional_data": {
                "FUN_080053d4": {
                    "1": "process_config_data",
                    "2": "perform_operation",
                    "3": "reverse_data",
                    "4": "call_sub_function"
                },
                "FUN_08005730": {
                    "1": "execute_reverse_operation",
                    "2": "call_sub_functions",
                    "5": "initialize",
                    "9": "execute_function"
                },
                "param_1": {
                    "1": "input_param",
                    "2": "unused_param",
                    "5": "param1"
                },
                "param_1 (FUN_080053d4)": {
                    "1": "config_param"
                },
                "param_2": {
                    "1": "input_param",
                    "2": "param_2",
                    "4": "input1",
                    "5": "arg2"
                },
                "param_2 (FUN_080053d4)": {
                    "1": "data_param"
                },
                "param_3": {
                    "1": "arg2",
                    "2": "input_2",
                    "4": "param3",
                    "7": "arg3"
                },
                "param_4": {
                    "1": "param_c",
                    "2": "value2",
                    "3": "unused",
                    "4": "param4",
                    "7": "arg4"
                }
            },
            "called": [
                "FUN_080053d4"
            ],
            "calling": [
                "FUN_08006f5a"
            ],
            "code": "\nvoid execute_function_08005730(undefined4 param1,undefined4 param2,undefined4 arg3,undefined4 arg4)\n\n{\n  FUN_080053d4(param2,arg3,arg3,arg4,arg4);\n  return;\n}\n\n",
            "current_name": "execute_function_08005730",
            "entrypoint": "0x08005730",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005730": "execute_function_08005730",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "arg3",
                "param_4": "arg4"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800573c": {
            "additional_data": {
                "<no_name>": {
                    "1": "do_nothing"
                },
                "DAT_": {
                    "1": ""
                },
                "DAT_*": {
                    "1": "unchanged"
                },
                "DAT_006634c0": {
                    "1": "dat1"
                },
                "DAT_0800573c": {
                    "1": "dummy_variable"
                },
                "DAT_XXXXXX": {
                    "1": "dat_xxxxxx"
                },
                "FUN_0800573c": {
                    "1": "run_infinite_loop",
                    "28": "infinite_loop"
                },
                "PTR_": {
                    "1": ""
                },
                "PTR_*": {
                    "1": "unchanged"
                },
                "PTR_00687f58": {
                    "1": "ptr1"
                },
                "PTR_0800573c": {
                    "1": "ptr_infinite_loop"
                },
                "PTR_XXXXXX": {
                    "1": "unchanged"
                },
                "do": {
                    "1": "do"
                },
                "original function name": {
                    "1": "more_descriptive_function_name"
                },
                "original parameter name": {
                    "1": "new_parameter_name"
                },
                "original variable name": {
                    "1": "new_variable_name"
                },
                "original_function_name": {
                    "1": "more_descriptive_function_name"
                },
                "original_parameter_name_1": {
                    "1": "new_parameter_name_1"
                },
                "original_parameter_name_2": {
                    "1": "new_parameter_name_2"
                },
                "original_variable_name_1": {
                    "1": "counter",
                    "2": "new_variable_name_1"
                },
                "original_variable_name_2": {
                    "1": "new_variable_name_2"
                },
                "true": {
                    "1": "true"
                },
                "while": {
                    "1": "end_loop"
                }
            },
            "called": [
                "FUN_0800573c"
            ],
            "calling": [
                "FUN_0800573c",
                "FUN_08006ac0"
            ],
            "code": "\nvoid infinite_loop_0800573c(void)\n\n{\n  start_loop {\n                    /* WARNING: Do nothing block with infinite loop */\n  } end_loop( true );\n}\n\n",
            "current_name": "infinite_loop_0800573c",
            "entrypoint": "0x0800573c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800573c": "infinite_loop_0800573c",
                "do": "start_loop",
                "while": "end_loop"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005740": {
            "additional_data": {
                "DAT_200006a4": {
                    "1": "value",
                    "2": "default_value",
                    "4": "data_value",
                    "6": "data_size",
                    "8": "initial_value"
                },
                "FUN_08005740": {
                    "1": "initialize",
                    "14": "initialize_data",
                    "4": "set_default_value",
                    "5": "set_initial_value",
                    "6": "initialize_value"
                },
                "RET_4": {
                    "1": "success"
                },
                "return": {
                    "1": "status"
                },
                "return value": {
                    "1": "error_code"
                },
                "returnValue": {
                    "1": "status"
                },
                "undefined4": {
                    "2": "void"
                }
            },
            "called": [],
            "calling": [
                "FUN_08006f00"
            ],
            "code": "\nvoid initialize_data_08005740(void)\n\n{\n  DAT_200006a4 = 0x16;\n  status 0xffffffff;\n}\n\n",
            "current_name": "initialize_data_08005740",
            "entrypoint": "0x08005740",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005740": "initialize_data_08005740",
                "return": "status",
                "undefined4": "void"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005750": {
            "additional_data": {
                "": {
                    "1": ""
                },
                "<original_variable_name_1>": {
                    "1": "flag",
                    "2": "<new_variable_name_1>"
                },
                "<original_variable_name_2>": {
                    "1": "<new_variable_name_2>"
                },
                "<original_variable_name_n>": {
                    "1": "<new_variable_name_n>"
                },
                "DAT_": {
                    "1": ""
                },
                "FUN_08005750": {
                    "1": "check_success",
                    "10": "initialize",
                    "2": "get_status",
                    "6": "get_return_value"
                },
                "PTR_": {
                    "1": ""
                },
                "original_function_name": {
                    "1": "initialize"
                },
                "original_variable_name": {
                    "1": "result"
                },
                "result": {
                    "2": "status"
                },
                "return": {
                    "1": "status",
                    "2": "result"
                },
                "return value": {
                    "1": "status"
                },
                "return_value": {
                    "1": "status"
                },
                "rtnVal": {
                    "1": "result"
                },
                "undefined4": {
                    "1": "bool",
                    "2": "status",
                    "3": "void",
                    "4": "int"
                }
            },
            "called": [],
            "calling": [
                "thunk_FUN_08005750"
            ],
            "code": "\nint initialize_08005750(void)\n\n{\n  result 1;\n}\n\n",
            "current_name": "initialize_08005750",
            "entrypoint": "0x08005750",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005750": "initialize_08005750",
                "return": "result",
                "undefined4": "int"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005754": {
            "additional_data": {
                "FUN_08004a4c": {
                    "1": "get_decoded_value"
                },
                "FUN_08005754": {
                    "1": "decode",
                    "2": "get_shifted_value",
                    "3": "get_modified_value"
                },
                "F_08005754": {
                    "1": "reverse_and_shift"
                },
                "bVar1": {
                    "1": "is_small_value",
                    "2": "is_less_than",
                    "3": "is_valid_range",
                    "7": "is_in_range"
                },
                "cVar2": {
                    "1": "modified_char",
                    "2": "character",
                    "3": "decoded_character",
                    "4": "result",
                    "6": "result_char"
                },
                "param_1": {
                    "1": "input_param",
                    "14": "input_value",
                    "3": "input",
                    "5": "character",
                    "7": "value"
                },
                "uVar3": {
                    "1": "encoded_value",
                    "15": "result",
                    "2": "output_value",
                    "3": "return_value"
                }
            },
            "called": [
                "FUN_08004a4c"
            ],
            "calling": [
                "FUN_08000cd0"
            ],
            "code": "\nuint decode_character_08005754(uint input_value)\n\n{\n  bool is_in_range;\n  char decoded_char;\n  uint result;\n  \n  if (input_value < 0xe) {\n    if (input_value + 0x2e < 0x3c) {\n      is_in_range = true;\n    }\n    else {\n      is_in_range = false;\n    }\n  }\n  else {\n    is_in_range = input_value < 0x3c;\n  }\n  if (is_in_range) {\n    if (input_value < 0xe) {\n      input_value = input_value + 0x2e;\n    }\n    decoded_char = (&DAT_080076f0)[input_value];\n  }\n  else {\n    decoded_char = -1;\n  }\n  if (decoded_char == -1) {\n    result = 0;\n  }\n  else {\n    result = FUN_08004a4c();\n    if (DAT_200000f4 != 0xc) {\n      if (DAT_200000f4 < 0xc) {\n        return result >> (0xc - DAT_200000f4 & 0xff);\n      }\n      return result << (DAT_200000f4 - 0xc & 0xff);\n    }\n  }\n  return result;\n}\n\n",
            "current_name": "decode_character_08005754",
            "entrypoint": "0x08005754",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005754": "decode_character_08005754",
                "bVar1": "is_in_range",
                "cVar2": "decoded_char",
                "param_1": "input_value",
                "uVar3": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080057b4": {
            "additional_data": {
                "&DAT_080074b4": {
                    "1": "constant_data"
                },
                "&DAT_20000344": {
                    "1": "operation_data"
                },
                "&DAT_20000358": {
                    "1": "execution_data"
                },
                "DAT_080074b4": {
                    "1": "some_data"
                },
                "DAT_080076f0": {
                    "1": "lookup_table"
                },
                "DAT_20000344": {
                    "2": "data_buffer"
                },
                "DAT_20000358": {
                    "1": "execution_data"
                },
                "FUN_080047f4": {
                    "1": "calculate_checksum",
                    "3": "perform_operation"
                },
                "FUN_0800480a": {
                    "1": "log_process_status",
                    "2": "update_status"
                },
                "FUN_08004828": {
                    "1": "initialize_operation",
                    "2": "perform_action",
                    "3": "update_data"
                },
                "FUN_08004b3c": {
                    "1": "cleanup_data",
                    "5": "cleanup"
                },
                "FUN_08004bb0": {
                    "1": "perform_operation",
                    "2": "set_option",
                    "3": "set_mode"
                },
                "FUN_08004ce2": {
                    "1": "perform_operation",
                    "2": "check_condition"
                },
                "FUN_080057b4": {
                    "1": "execute_action",
                    "2": "execute_process",
                    "6": "execute_operation",
                    "8": "execute_function",
                    "9": "process_data"
                },
                "iVar1": {
                    "1": "return_value",
                    "2": "result1",
                    "28": "result"
                },
                "iVar3": {
                    "1": "byte_value",
                    "11": "value",
                    "5": "lookup_index",
                    "7": "index"
                },
                "param_1": {
                    "1": "input_param",
                    "12": "index",
                    "2": "data_index",
                    "5": "input_index"
                },
                "param_2": {
                    "1": "sub_action_code",
                    "12": "mode",
                    "2": "param1",
                    "3": "operation_type",
                    "5": "option"
                },
                "param_3": {
                    "1": "config_param",
                    "2": "data",
                    "4": "param1",
                    "5": "param3",
                    "6": "param"
                },
                "param_4": {
                    "1": "flag2",
                    "2": "data_buffer",
                    "4": "buffer",
                    "9": "data"
                },
                "puVar2": {
                    "1": "variable1",
                    "2": "data_ptr",
                    "3": "pointer",
                    "5": "data_pointer"
                }
            },
            "called": [
                "FUN_08004bb0",
                "FUN_080047f4",
                "FUN_0800480a",
                "FUN_08004b3c",
                "FUN_08004828",
                "FUN_08004ce2"
            ],
            "calling": [
                "FUN_08000bcc",
                "FUN_0800157c",
                "FUN_080013a4"
            ],
            "code": "\nvoid process_data_080057b4(uint index,undefined4 mode,undefined4 param,undefined *data)\n\n{\n  int result;\n  undefined *lookup_table;\n  int value;\n  \n  if (index < 0x3c) {\n    value = (int)(char)(&DAT_080076f0)[index];\n    lookup_table = &DAT_080076f0;\n  }\n  else {\n    value = -1;\n    lookup_table = data;\n  }\n  if (value != -1) {\n    result = FUN_080047f4(value,&DAT_20000344,param,lookup_table,data);\n    if (result != 0) {\n      result = FUN_08004ce2(value,&DAT_080074b4);\n      if (result != 0) {\n        FUN_08004b3c(value);\n      }\n      FUN_08004828(value,&DAT_20000344);\n    }\n    switch(mode) {\n    case 0:\n      FUN_08004bb0(value,0);\n      break;\n    case 1:\n      FUN_08004bb0(value,1,0);\n      break;\n    case 2:\n      FUN_08004bb0(value,0,1);\n      break;\n    case 3:\n      FUN_08004bb0(value,0,2);\n    }\n    FUN_0800480a(value,&DAT_20000358);\n  }\n  return;\n}\n\n",
            "current_name": "process_data_080057b4",
            "entrypoint": "0x080057b4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080057b4": "process_data_080057b4",
                "iVar1": "result",
                "iVar3": "value",
                "param_1": "index",
                "param_2": "mode",
                "param_3": "param",
                "param_4": "data",
                "puVar2": "lookup_table"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005848": {
            "additional_data": {
                "&DAT_080076f0": {
                    "1": "lookup_array"
                },
                "&DAT_20000358": {
                    "1": "constant_value"
                },
                "FUN_080047f4": {
                    "1": "calculate_result"
                },
                "FUN_08004848": {
                    "1": "shift_value"
                },
                "FUN_08004c30": {
                    "1": "update_data"
                },
                "FUN_08005848": {
                    "1": "extract_and_process_data",
                    "2": "decode_and_process_data",
                    "20": "process_data"
                },
                "iVar1": {
                    "1": "output_value",
                    "28": "result"
                },
                "param_1": {
                    "1": "param",
                    "18": "index",
                    "2": "input_value",
                    "6": "input_index"
                },
                "param_2": {
                    "1": "param1",
                    "13": "param2",
                    "2": "param",
                    "4": "param_a",
                    "6": "param_2"
                },
                "param_3": {
                    "1": "param_y",
                    "13": "param3",
                    "2": "value2",
                    "4": "param_b",
                    "6": "param_3"
                },
                "param_4": {
                    "1": "buffer",
                    "14": "data",
                    "2": "param_ptr",
                    "4": "data_ptr"
                },
                "puVar3": {
                    "1": "char_array",
                    "2": "array_ptr",
                    "3": "source",
                    "4": "data_pointer",
                    "5": "pointer",
                    "6": "data_ptr"
                },
                "uVar2": {
                    "1": "modified_index",
                    "2": "processed_value",
                    "20": "shifted_value",
                    "3": "modified_value"
                },
                "uVar4": {
                    "1": "value2",
                    "15": "value",
                    "2": "data_value",
                    "8": "char_value"
                }
            },
            "called": [
                "FUN_08004848",
                "FUN_08004c30",
                "FUN_080047f4"
            ],
            "calling": [
                "FUN_08001310",
                "FUN_08000cd0",
                "FUN_080012a2",
                "FUN_08000bcc",
                "FUN_080015b2",
                "FUN_080012c0",
                "FUN_0800157c",
                "FUN_080013a4",
                "FUN_080012e8"
            ],
            "code": "\nvoid process_data_08005848(uint index,undefined4 param2,undefined4 param3,undefined *data)\n\n{\n  int result;\n  undefined4 shifted_value;\n  undefined *data_ptr;\n  uint value;\n  \n  if (index < 0x3c) {\n    value = (uint)(char)(&DAT_080076f0)[index];\n    data_ptr = &DAT_080076f0;\n  }\n  else {\n    value = 0xffffffff;\n    data_ptr = data;\n  }\n  if ((value != 0xffffffff) &&\n     (result = FUN_080047f4(value,&DAT_20000358,param3,data_ptr,data), result != 0)) {\n    shifted_value = FUN_08004848((value << 0x18) >> 0x1c);\n    FUN_08004c30(shifted_value,1 << (value & 0xf) & 0xffff,param2);\n  }\n  return;\n}\n\n",
            "current_name": "process_data_08005848",
            "entrypoint": "0x08005848",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005848": "process_data_08005848",
                "iVar1": "result",
                "param_1": "index",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "data",
                "puVar3": "data_ptr",
                "uVar2": "shifted_value",
                "uVar4": "value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005890": {
            "additional_data": {
                "&DAT_080076f0": {
                    "1": "flag_array"
                },
                "&DAT_20000358": {
                    "1": "param_array"
                },
                "FUN_080047f4": {
                    "1": "check_validity"
                },
                "FUN_08004848": {
                    "1": "extract_bits"
                },
                "FUN_08004c48": {
                    "1": "check_bit_in_byte",
                    "3": "apply_mask"
                },
                "FUN_08005890": {
                    "1": "retrieve_flag",
                    "2": "check_parameter_value",
                    "8": "check_character"
                },
                "cVar1": {
                    "1": "is_match",
                    "11": "result",
                    "14": "is_valid",
                    "2": "is_valid_character"
                },
                "iVar2": {
                    "1": "success",
                    "19": "result",
                    "2": "comparison_result",
                    "3": "status"
                },
                "param_1": {
                    "1": "input_character",
                    "2": "input_param",
                    "3": "character_index",
                    "4": "value",
                    "5": "input_value",
                    "7": "character"
                },
                "param_2": {
                    "1": "bit_mask"
                },
                "uVar3": {
                    "1": "shifted_val",
                    "25": "shifted_value"
                },
                "uVar4": {
                    "1": "array_value",
                    "2": "char_index",
                    "6": "index",
                    "7": "lookup_value"
                }
            },
            "called": [
                "FUN_08004848",
                "FUN_080047f4",
                "FUN_08004c48"
            ],
            "calling": [
                "FUN_08000cd0",
                "FUN_080015b2"
            ],
            "code": "\nchar check_character_validity_08005890(uint character)\n\n{\n  char is_valid;\n  int result;\n  undefined4 shifted_value;\n  uint lookup_value;\n  \n  if (character < 0x3c) {\n    lookup_value = (uint)(char)(&DAT_080076f0)[character];\n  }\n  else {\n    lookup_value = 0xffffffff;\n  }\n  if (lookup_value == 0xffffffff) {\n    is_valid = '\\0';\n  }\n  else {\n    result = FUN_080047f4(lookup_value,&DAT_20000358);\n    if (result == 0) {\n      is_valid = '\\0';\n    }\n    else {\n      shifted_value = FUN_08004848((lookup_value << 0x18) >> 0x1c);\n      is_valid = FUN_08004c48(shifted_value,1 << (lookup_value & 0xf) & 0xffff);\n    }\n  }\n  if (is_valid != '\\0') {\n    is_valid = '\\x01';\n  }\n  return is_valid;\n}\n\n",
            "current_name": "check_character_validity_08005890",
            "entrypoint": "0x08005890",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005890": "check_character_validity_08005890",
                "cVar1": "is_valid",
                "iVar2": "result",
                "param_1": "character",
                "uVar3": "shifted_value",
                "uVar4": "lookup_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080058e0": {
            "additional_data": {
                "FUN_08004b94": {
                    "1": "execute_process",
                    "11": "perform_initialization",
                    "5": "execute_initialization"
                },
                "FUN_080058e0": {
                    "1": "initialize_components",
                    "13": "initialize",
                    "3": "initialize_application",
                    "4": "execute_initialization",
                    "5": "initialize_system"
                }
            },
            "called": [
                "FUN_08004b94"
            ],
            "calling": [
                "FUN_08000cd0",
                "FUN_08000bcc",
                "FUN_08001ab0",
                "FUN_080016b4"
            ],
            "code": "\nvoid initialize_080058e0(void)\n\n{\n  FUN_08004b94();\n  return;\n}\n\n",
            "current_name": "initialize_080058e0",
            "entrypoint": "0x080058e0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080058e0": "initialize_080058e0"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080058e8": {
            "called": [],
            "calling": [
                "FUN_08000bcc"
            ],
            "code": "\nvoid FUNC_080058e8(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_080058e8",
            "entrypoint": "0x080058e8",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_080058e8": "FUNC_080058e8"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_0800591e": {
            "additional_data": {
                "& 0x3f": {
                    "1": "mask"
                },
                "(*(short *)(dataAddress + 0x134) + 0x40)": {
                    "1": "value1"
                },
                "(*(short *)(param_1 + 0x134) + 0x40)": {
                    "1": "value1"
                },
                "(dataAddress + 0x136)": {
                    "1": "value2"
                },
                "(short *)(base_address + 0x134)": {
                    "1": "value1_ptr"
                },
                "(short *)(base_address + 0x136)": {
                    "1": "value2_ptr"
                },
                "* (short *)(param_1 + 0x134)": {
                    "2": "first_value"
                },
                "* (short *)(param_1 + 0x136)": {
                    "2": "second_value"
                },
                "*((short *)(param_1 + 0x134))": {
                    "1": "first_value"
                },
                "*((short *)(param_1 + 0x136))": {
                    "1": "second_value"
                },
                "*(short *)(offset + 0x134)": {
                    "1": "base_value"
                },
                "*(short *)(offset + 0x136)": {
                    "1": "subtraction_value"
                },
                "*(short *)(param_1 + 0x134)": {
                    "1": "first_value_offset",
                    "8": "first_value"
                },
                "*(short *)(param_1 + 0x136)": {
                    "1": "offset_value_2",
                    "2": "value2",
                    "8": "second_value"
                },
                "*PTR_134": {
                    "1": "offset_1"
                },
                "*PTR_136": {
                    "1": "offset_2"
                },
                "0x134": {
                    "1": "offset_checksum1",
                    "3": "offset1"
                },
                "0x136": {
                    "1": "offset_2",
                    "3": "offset2"
                },
                "0x3f": {
                    "1": "bitwise_and_constant"
                },
                "0x40": {
                    "1": "offset_constant"
                },
                "FUN_0800591e": {
                    "1": "calculate_shift_value",
                    "10": "calculate_checksum",
                    "2": "calculate_modified_value",
                    "3": "calculate_result",
                    "9": "calculate_offset"
                },
                "param_1": {
                    "1": "data_offset",
                    "2": "data_address",
                    "3": "address",
                    "5": "base_address",
                    "9": "input_value"
                },
                "param_1 + 0x134": {
                    "1": "offset_address1"
                },
                "param_1 + 0x136": {
                    "1": "offset_address2"
                },
                "short *": {
                    "1": "data_pointer"
                },
                "short_ptr_1": {
                    "1": "memory_offset_1"
                },
                "short_ptr_2": {
                    "1": "memory_offset_2"
                }
            },
            "called": [],
            "calling": [
                "FUN_08005a18"
            ],
            "code": "\nushort calculate_checksum_0800591e(int input_value)\n\n{\n  return (*(short *)(input_value + 0x134) + 0x40) - *(short *)(input_value + 0x136) & 0x3f;\n}\n\n",
            "current_name": "calculate_checksum_0800591e",
            "entrypoint": "0x0800591e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800591e": "calculate_checksum_0800591e",
                "param_1": "input_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800598a": {
            "additional_data": {
                "FUN_0800598a": {
                    "1": "update_and_shift_value",
                    "14": "update_data",
                    "2": "update_data_and_index",
                    "3": "update_buffer"
                },
                "iVar1": {
                    "1": "function_result",
                    "27": "result"
                },
                "local_9": {
                    "1": "value_to_update",
                    "23": "new_value",
                    "4": "new_data"
                },
                "param_1": {
                    "1": "input_param",
                    "2": "buffer",
                    "3": "data_address",
                    "8": "data_pointer"
                },
                "uVar2": {
                    "1": "current_index",
                    "2": "updated_value",
                    "20": "new_index",
                    "3": "updated_index"
                }
            },
            "called": [
                "FUN_080054d4"
            ],
            "calling": [],
            "code": "\nvoid update_data_0800598a(int data_pointer)\n\n{\n  int result;\n  ushort new_index;\n  undefined new_value;\n  \n  result = FUN_080054d4(data_pointer,&new_value);\n  if ((result == 0) &&\n     (new_index = *(short *)(data_pointer + 0x60) + 1U & 0x3f, new_index != *(ushort *)(data_pointer + 0x62))) {\n    *(undefined *)(*(int *)(data_pointer + 0x5c) + (uint)*(ushort *)(data_pointer + 0x60)) = new_value;\n    *(ushort *)(data_pointer + 0x60) = new_index;\n  }\n  return;\n}\n\n",
            "current_name": "update_data_0800598a",
            "entrypoint": "0x0800598a",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800598a": "update_data_0800598a",
                "iVar1": "result",
                "local_9": "new_value",
                "param_1": "data_pointer",
                "uVar2": "new_index"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005a18": {
            "called": [
                "FUN_0800591e"
            ],
            "calling": [
                "FUN_08005f6c"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08005a1e) */\n/* WARNING: Removing unreachable block (ram,0x08005a30) */\n/* WARNING: Removing unreachable block (ram,0x08005a26) */\n/* WARNING: Removing unreachable block (ram,0x08005a38) */\n\nvoid FUNC_08005a18(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_08005a18",
            "entrypoint": "0x08005a18",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_08005a18": "FUNC_08005a18"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_08005a44": {
            "additional_data": {
                "*(int *)(param_1 + 0x130)": {
                    "1": "data_pointer1"
                },
                "*(int *)(param_1 + 0x138)": {
                    "1": "data_offset2"
                },
                "*(undefined2 *)(param_1 + 0x134)": {
                    "1": "data_element2_value"
                },
                "*(undefined2 *)(param_1 + 0x136)": {
                    "1": "data_structure.value2"
                },
                "*(undefined2 *)(param_1 + 0x13c)": {
                    "1": "data_structure.value3"
                },
                "*(undefined2 *)(param_1 + 0x13e)": {
                    "1": "data_pointer6"
                },
                "0": {
                    "1": "value_2"
                },
                "0x11": {
                    "1": "constant_offset_a",
                    "2": "initial_value1"
                },
                "0x130": {
                    "1": "data_structure_offset_a",
                    "3": "offset1"
                },
                "0x134": {
                    "1": "data_structure_offset_b",
                    "2": "offset2"
                },
                "0x136": {
                    "1": "data_structure_offset_c",
                    "2": "offset3"
                },
                "0x138": {
                    "1": "data_structure_offset_d",
                    "2": "offset4"
                },
                "0x13c": {
                    "1": "offset_5",
                    "2": "offset5"
                },
                "0x13e": {
                    "1": "offset_6",
                    "2": "offset6"
                },
                "0x51": {
                    "1": "value2",
                    "2": "initial_value2"
                },
                "FUN_08005a44": {
                    "1": "initialize_data_struct",
                    "12": "initialize_data",
                    "2": "initialize_memory",
                    "3": "initialize_data_structure",
                    "4": "initialize_data_structures",
                    "6": "initialize_parameters"
                },
                "param_1": {
                    "1": "base_addr",
                    "14": "base_address",
                    "2": "param",
                    "3": "data_address"
                },
                "param_1 + 0x11": {
                    "1": "data_offset",
                    "2": "parameter1_value"
                },
                "param_1 + 0x130": {
                    "1": "address1",
                    "2": "data_pointer1"
                },
                "param_1 + 0x134": {
                    "1": "data_struct_offset2",
                    "2": "data_pointer2"
                },
                "param_1 + 0x136": {
                    "1": "data_address3",
                    "2": "variable_b"
                },
                "param_1 + 0x138": {
                    "1": "param.offset_address",
                    "2": "data_pointer4"
                },
                "param_1 + 0x13c": {
                    "1": "param.value_1",
                    "2": "variable_c"
                },
                "param_1 + 0x13e": {
                    "1": "data_address6",
                    "2": "variable_d"
                },
                "param_1 + 0x51": {
                    "1": "data_struct_init_value2",
                    "2": "parameter4_value"
                },
                "param_1+0x130": {
                    "1": "parameter_block.start_address"
                },
                "param_1+0x134": {
                    "1": "parameter_block.value1"
                },
                "param_1+0x136": {
                    "1": "parameter_block.value2"
                },
                "param_1+0x138": {
                    "1": "parameter_block.end_address"
                },
                "param_1+0x13c": {
                    "1": "parameter_block.value3"
                },
                "param_1+0x13e": {
                    "1": "parameter_block.value4"
                }
            },
            "called": [],
            "calling": [
                "FUN_08005b54"
            ],
            "code": "\nvoid initialize_data_08005a44(int base_address)\n\n{\n  *(int *)(base_address + 0x130) = base_address + 0x11;\n  *(undefined2 *)(base_address + 0x134) = 0;\n  *(undefined2 *)(base_address + 0x136) = 0;\n  *(int *)(base_address + 0x138) = base_address + 0x51;\n  *(undefined2 *)(base_address + 0x13c) = 0;\n  *(undefined2 *)(base_address + 0x13e) = 0;\n  return;\n}\n\n",
            "current_name": "initialize_data_08005a44",
            "entrypoint": "0x08005a44",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005a44": "initialize_data_08005a44",
                "param_1": "base_address"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005a68": {
            "additional_data": {
                "FUN_08004f4c": {
                    "1": "setup_buffer",
                    "2": "initialize_buffer"
                },
                "FUN_08005510": {
                    "1": "initialize_serial_settings"
                },
                "FUN_08005a68": {
                    "1": "configure_hardware_serial",
                    "10": "initialize_serial_port",
                    "3": "initialize_serial_communication",
                    "4": "configure_serial_port",
                    "5": "initialize_serial",
                    "7": "initialize_hardware_serial"
                },
                "FUN_0800611c": {
                    "1": "handle_error",
                    "2": "report_error"
                },
                "UNRECOVERED_JUMPTABLE": {
                    "1": "jump_table_pointer",
                    "15": "jump_table",
                    "2": "unrecovered_jumptable",
                    "3": "error_handler"
                },
                "bVar2": {
                    "1": "selected_bits",
                    "2": "configuration_mask",
                    "7": "config_mask",
                    "9": "config_bits"
                },
                "extraout_r1": {
                    "1": "extra_output1",
                    "2": "extra_out1",
                    "3": "error_code",
                    "4": "extra_output",
                    "8": "result"
                },
                "iVar3": {
                    "1": "config_bits_count",
                    "12": "config_value",
                    "2": "configuration_value",
                    "3": "config_index"
                },
                "param_1": {
                    "1": "serial_interface",
                    "16": "serial_port",
                    "2": "serial_port_address",
                    "7": "port_address"
                },
                "param_2": {
                    "31": "baud_rate"
                },
                "param_3": {
                    "1": "options",
                    "10": "config",
                    "2": "config_flags",
                    "3": "config_byte",
                    "6": "configuration"
                },
                "pbVar4": {
                    "1": "port_data",
                    "10": "byte_pointer",
                    "2": "ptr",
                    "3": "config_ptr",
                    "5": "byte_ptr"
                },
                "pcVar1": {
                    "1": "message",
                    "22": "error_message",
                    "7": "error_string"
                },
                "uRam0000012d": {
                    "1": "assigned_value"
                },
                "unaff_r4": {
                    "1": "uninitialized_char",
                    "2": "unaffected_r4",
                    "6": "character"
                },
                "unaff_r6": {
                    "1": "package_offset",
                    "2": "unaffected_r6",
                    "3": "base_address",
                    "8": "offset"
                }
            },
            "called": [
                "FUN_08005510",
                "FUN_08004f4c",
                "FUN_0800611c"
            ],
            "calling": [
                "FUN_08000bcc"
            ],
            "code": "\nvoid initialize_serial_port_08005a68(int serial_port,undefined4 baud_rate,byte config)\n\n{\n  uint result;\n  char *error_message;\n  byte config_bits;\n  int config_value;\n  byte *byte_pointer;\n  char character;\n  int offset;\n  code *jump_table;\n  \n  *(undefined4 *)(serial_port + 0x11c) = baud_rate;\n  *(byte *)(serial_port + 0x140) = config;\n  config_bits = config & 7;\n  if (config_bits == 4) {\n    config_value = 7;\n  }\n  else if (config_bits == 6) {\n    config_value = 8;\n  }\n  else if (config_bits == 2) {\n    config_value = 6;\n  }\n  else {\n    config_value = 0;\n  }\n  if ((config & 0x30) == 0x30) {\n    *(undefined4 *)(serial_port + 0x128) = 0x600;\n    config_value = config_value + 1;\n  }\n  else if ((config & 0x20) == 0) {\n    *(undefined4 *)(serial_port + 0x128) = 0;\n  }\n  else {\n    *(undefined4 *)(serial_port + 0x128) = 0x400;\n    config_value = config_value + 1;\n  }\n  if ((config & 8) == 0) {\n    *(undefined4 *)(serial_port + 0x124) = 0;\n  }\n  else {\n    *(undefined4 *)(serial_port + 0x124) = 0x2000;\n  }\n  if (config_value == 8) {\n    *(undefined4 *)(serial_port + 0x120) = 0;\n  }\n  else if (config_value == 9) {\n    *(undefined4 *)(serial_port + 0x120) = 0x1000;\n  }\n  else {\n    config_value = 0;\n  }\n  if (config_value != 0) {\n    FUN_08004f4c(serial_port + 0xd4);\n    FUN_08005510(serial_port + 0xd4,0x800598b);\n    return;\n  }\n  error_message = \"void HardwareSerial::begin(long unsigned int, byte)\";\n  jump_table = (code *)0x8005b12;\n  FUN_0800611c(\"/home/bo/.arduino15/packages/STM32/hardware/stm32/1.3.0/cores/arduino/HardwareSerial.cpp\"\n               ,299,\"void HardwareSerial::begin(long unsigned int, byte)\",\"databits!=0\");\n  byte_pointer = *(byte **)(result + offset);\n  error_message[0x1e] = character;\n  *(undefined *)(*byte_pointer + 0x1e) = 0;\n  if (result < 0x3c) {\n    assigned_value = (&DAT_080076f0)[result];\n  }\n  else {\n    assigned_value = 0xff;\n  }\n                    /* WARNING: Could not recover jumptable at 0x08005b30. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jump_table)();\n  return;\n}\n\n",
            "current_name": "initialize_serial_port_08005a68",
            "entrypoint": "0x08005a68",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005a68": "initialize_serial_port_08005a68",
                "UNRECOVERED_JUMPTABLE": "jump_table",
                "bVar2": "config_bits",
                "extraout_r1": "result",
                "iVar3": "config_value",
                "param_1": "serial_port",
                "param_2": "baud_rate",
                "param_3": "config",
                "pbVar4": "byte_pointer",
                "pcVar1": "error_message",
                "uRam0000012d": "assigned_value",
                "unaff_r4": "character",
                "unaff_r6": "offset"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005b24": {
            "additional_data": {
                "FUN_08005b24": {
                    "1": "set_special_value",
                    "2": "set_flag_value",
                    "3": "set_return_value"
                },
                "UNRECOVERED_JUMPTABLE": {
                    "1": "jump_table_function",
                    "2": "function_pointer",
                    "4": "jump_table"
                },
                "param_1": {
                    "1": "destination_address",
                    "3": "flag_address",
                    "6": "address",
                    "8": "memory_address"
                },
                "param_2": {
                    "1": "flag_value",
                    "15": "index",
                    "2": "input_value",
                    "3": "value_index",
                    "5": "value"
                },
                "uVar1": {
                    "1": "color",
                    "2": "flag_value",
                    "3": "return_value",
                    "4": "byte_value",
                    "7": "value"
                }
            },
            "called": [],
            "calling": [
                "FUN_08005b54"
            ],
            "code": "\nvoid set_return_value_08005b24(int base_address,uint index)\n\n{\n  undefined value;\n  code *jump_table;\n  \n  if (index < 0x3c) {\n    value = (&DAT_080076f0)[index];\n  }\n  else {\n    value = 0xff;\n  }\n  *(undefined *)(base_address + 0x12d) = value;\n                    /* WARNING: Could not recover jumptable at 0x08005b30. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jump_table)();\n  return;\n}\n\n",
            "current_name": "set_return_value_08005b24",
            "entrypoint": "0x08005b24",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005b24": "set_return_value_08005b24",
                "UNRECOVERED_JUMPTABLE": "jump_table",
                "param_1": "base_address",
                "param_2": "index",
                "uVar1": "value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005b3c": {
            "additional_data": {
                "FUN_08005b3c": {
                    "1": "update_parameter_value",
                    "2": "set_default_value",
                    "3": "set_memory_byte",
                    "4": "set_memory_value",
                    "5": "set_byte_value"
                },
                "param_1": {
                    "1": "buffer_address",
                    "2": "data_address",
                    "5": "destination_address",
                    "6": "address",
                    "7": "memory_address"
                },
                "param_2": {
                    "1": "byte_count",
                    "2": "offset",
                    "23": "index"
                },
                "uVar1": {
                    "1": "updated_value",
                    "14": "value",
                    "3": "default_value",
                    "5": "byte_value"
                }
            },
            "called": [],
            "calling": [
                "FUN_08005b54"
            ],
            "code": "\nvoid set_byte_value_08005b3c(int memory_address,uint index)\n\n{\n  undefined value;\n  \n  if (index < 0x3c) {\n    value = (&DAT_080076f0)[index];\n  }\n  else {\n    value = 0xff;\n  }\n  *(undefined *)(memory_address + 300) = value;\n  return;\n}\n\n",
            "current_name": "set_byte_value_08005b3c",
            "entrypoint": "0x08005b3c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005b3c": "set_byte_value_08005b3c",
                "param_1": "memory_address",
                "param_2": "index",
                "uVar1": "value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005b54": {
            "additional_data": {
                "&DAT_2000036c": {
                    "1": "global_data"
                },
                "&PTR_LAB_080059c8_1_08007804": {
                    "1": "label_pointer"
                },
                "DAT_2000036c": {
                    "1": "constant_data"
                },
                "FUN_08004ca2": {
                    "1": "resolve_flag",
                    "10": "get_value",
                    "2": "get_byte",
                    "3": "get_return_value"
                },
                "FUN_08005a44": {
                    "1": "cleanup_params",
                    "2": "finalize_parameters",
                    "3": "process_params",
                    "9": "process_data"
                },
                "FUN_08005b24": {
                    "1": "call_function2",
                    "2": "modify_data",
                    "5": "perform_action2"
                },
                "FUN_08005b3c": {
                    "1": "perform_operation",
                    "12": "set_flag",
                    "2": "perform_action2",
                    "3": "perform_action",
                    "5": "perform_action1"
                },
                "FUN_08005b54": {
                    "1": "initialize_data_struct",
                    "10": "initialize_data",
                    "2": "initialize_param",
                    "3": "initialize_function",
                    "5": "initialize_params",
                    "8": "initialize_parameters"
                },
                "PTR_LAB_080059c8_1_08007804": {
                    "1": "some_pointer"
                },
                "fun_08005b3c": {
                    "1": "function_b"
                },
                "param_1": {
                    "1": "output_parameters",
                    "2": "param_array",
                    "3": "params",
                    "5": "parameters",
                    "7": "data"
                },
                "param_1[0]": {
                    "1": "parameters[0]"
                },
                "param_1[1]": {
                    "1": "param_array_offset1"
                },
                "param_1[2]": {
                    "1": "parameters[2]"
                },
                "param_2": {
                    "1": "param",
                    "10": "value",
                    "2": "input_param",
                    "5": "value1"
                },
                "param_3": {
                    "1": "val2",
                    "3": "param1",
                    "4": "param3",
                    "5": "value2"
                },
                "param_4": {
                    "1": "param_z",
                    "2": "size",
                    "3": "param2",
                    "4": "param4",
                    "5": "value3"
                },
                "uVar1": {
                    "1": "byte_value",
                    "2": "return_value",
                    "4": "result"
                }
            },
            "called": [
                "FUN_08004ca2",
                "FUN_08005a44",
                "FUN_08005b3c",
                "FUN_08005b24"
            ],
            "calling": [
                "FUN_08005bb0"
            ],
            "code": "\nundefined4 *\ninitialize_data_08005b54(undefined4 *data,undefined4 value,undefined4 value2,undefined4 value3)\n\n{\n  undefined result;\n  \n  param_array_offset1 = 0;\n  param_array_offset2 = 1000;\n  *data = &PTR_LAB_080059c8_1_08007804;\n  if (data == (undefined4 *)&DAT_2000036c) {\n    FUN_08005b24(&DAT_2000036c,0,value2,&DAT_2000036c,value3);\n    FUN_08005b3c(&DAT_2000036c,1);\n  }\n  else {\n    result = FUN_08004ca2(value,&DAT_08007604);\n    *(undefined *)((int)data + 0x12d) = result;\n    result = FUN_08004ca2(value,&DAT_0800764c);\n    *(undefined *)(data + 0x4b) = result;\n  }\n  FUN_08005a44(data);\n  return data;\n}\n\n",
            "current_name": "initialize_data_08005b54",
            "entrypoint": "0x08005b54",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005b54": "initialize_data_08005b54",
                "param_1": "data",
                "param_1[1]": "param_array_offset1",
                "param_1[2]": "param_array_offset2",
                "param_2": "value",
                "param_3": "value2",
                "param_4": "value3",
                "uVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005bb0": {
            "additional_data": {
                "DAT_2000036c": {
                    "1": "data_array"
                },
                "FUN_08005b54": {
                    "1": "perform_operation",
                    "2": "perform_action",
                    "6": "process_data"
                },
                "FUN_08005bb0": {
                    "1": "execute_if_condition_param_equals_one",
                    "2": "check_parameters",
                    "5": "check_param",
                    "6": "process_param",
                    "7": "check_and_call_function"
                },
                "param_1": {
                    "1": "value1",
                    "2": "status_flag",
                    "3": "value_1",
                    "4": "flag"
                },
                "param_2": {
                    "1": "value2",
                    "11": "value",
                    "2": "value_2"
                },
                "param_3": {
                    "1": "input1",
                    "2": "param3",
                    "3": "value_3",
                    "8": "param_3",
                    "9": "arg1"
                },
                "param_4": {
                    "1": "subfunction_param_4",
                    "2": "param4",
                    "3": "value_4",
                    "8": "param_4",
                    "9": "arg2"
                }
            },
            "called": [
                "FUN_08005b54"
            ],
            "calling": [],
            "code": "\nvoid check_and_call_function_08005bb0(int flag,int value,undefined4 arg1,undefined4 arg2)\n\n{\n  if (flag != 1) {\n    return;\n  }\n  if (value == 0xffff) {\n    FUN_08005b54(&DAT_2000036c,0x40004400,arg1,0xffff,arg2);\n  }\n  return;\n}\n\n",
            "current_name": "check_and_call_function_08005bb0",
            "entrypoint": "0x08005bb0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005bb0": "check_and_call_function_08005bb0",
                "param_1": "flag",
                "param_2": "value",
                "param_3": "arg1",
                "param_4": "arg2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005c1c": {
            "additional_data": {
                "FUN_08005c1c": {
                    "1": "initialize_function",
                    "2": "initialize_data_structure",
                    "24": "initialize_data"
                },
                "param_1": {
                    "1": "output_buffer",
                    "12": "data_pointer",
                    "2": "data_ptr",
                    "3": "output",
                    "7": "output_data"
                },
                "param_2": {
                    "1": "input_param1",
                    "18": "value1",
                    "3": "input1",
                    "7": "value_1"
                },
                "param_3": {
                    "1": "byte2",
                    "18": "value2",
                    "3": "input2",
                    "7": "value_2"
                },
                "param_4": {
                    "1": "input4",
                    "18": "value3",
                    "3": "input3",
                    "7": "value_3"
                },
                "param_5": {
                    "1": "byte4",
                    "18": "value4",
                    "3": "input4",
                    "7": "value_4"
                },
                "param_6": {
                    "1": "value5"
                }
            },
            "called": [],
            "calling": [
                "FUN_08005c38"
            ],
            "code": "\nvoid initialize_data_08005c1c(undefined4 *data_pointer,undefined value1,undefined value2,undefined value3,\n                 undefined value4)\n\n{\n  *data_pointer = &DAT_08007858;\n  *(undefined *)(data_pointer + 1) = value1;\n  *(undefined *)((int)data_pointer + 5) = value2;\n  *(undefined *)((int)data_pointer + 6) = value3;\n  *(undefined *)((int)data_pointer + 7) = value4;\n  return;\n}\n\n",
            "current_name": "initialize_data_08005c1c",
            "entrypoint": "0x08005c1c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005c1c": "initialize_data_08005c1c",
                "param_1": "data_pointer",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3",
                "param_5": "value4"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005c38": {
            "additional_data": {
                "FUN_08005c1c": {
                    "1": "process_data",
                    "6": "initialize_data"
                },
                "FUN_08005c38": {
                    "1": "handle_params",
                    "2": "initialize_data",
                    "4": "check_params_and_call_function",
                    "5": "check_params",
                    "9": "check_parameters"
                },
                "param_1": {
                    "1": "buffer",
                    "12": "value1",
                    "2": "flag1",
                    "3": "status",
                    "4": "first_param"
                },
                "param_2": {
                    "1": "is_max_value",
                    "12": "value2",
                    "2": "flag2",
                    "4": "second_param",
                    "5": "value"
                },
                "param_3": {
                    "1": "param_3"
                },
                "param_4": {
                    "1": "param_4"
                }
            },
            "called": [
                "FUN_08005c1c"
            ],
            "calling": [],
            "code": "\nvoid check_parameters_08005c38(int value1,int value2)\n\n{\n  if ((value1 == 1) && (value2 == 0xffff)) {\n    FUN_08005c1c(&DAT_200004b0,0,0,0,0);\n    return;\n  }\n  return;\n}\n\n",
            "current_name": "check_parameters_08005c38",
            "entrypoint": "0x08005c38",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005c38": "check_parameters_08005c38",
                "param_1": "value1",
                "param_2": "value2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005c96": {
            "additional_data": {
                "FUM_08000178": {
                    "1": "get_string"
                },
                "FUN_08000178": {
                    "1": "calculate_checksum",
                    "5": "reverse_string",
                    "7": "get_string"
                },
                "FUN_08005c96": {
                    "1": "perform_operation",
                    "2": "execute_function_with_param",
                    "20": "execute_function",
                    "3": "process_data"
                },
                "param_1": {
                    "1": "command",
                    "14": "function_pointer",
                    "2": "array_ptr",
                    "3": "input_array"
                },
                "param_2": {
                    "1": "input_param",
                    "3": "array_size",
                    "5": "data_size",
                    "8": "input_value"
                },
                "param_3": {
                    "1": "result",
                    "11": "param3",
                    "2": "param1",
                    "3": "param_3",
                    "4": "arg1"
                },
                "param_4": {
                    "1": "arg4",
                    "11": "param4",
                    "2": "unused_param2",
                    "3": "param_4",
                    "4": "arg2"
                },
                "uVar1": {
                    "1": "output_value",
                    "25": "result"
                }
            },
            "called": [
                "FUN_08000178"
            ],
            "calling": [
                "FUN_08005da8",
                "FUN_08000cd0",
                "FUN_08005cd4",
                "FUN_08000bcc"
            ],
            "code": "\nundefined4 execute_function_08005c96(int *function_pointer,int input_value,undefined4 param3,undefined4 param4)\n\n{\n  undefined4 result;\n  \n  if (input_value != 0) {\n    result = FUN_08000178(input_value);\n    result = (**(code **)(*function_pointer + 4))(function_pointer,input_value,result,*(code **)(*function_pointer + 4),param4);\n    return result;\n  }\n  return 0;\n}\n\n",
            "current_name": "execute_function_08005c96",
            "entrypoint": "0x08005c96",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005c96": "execute_function_08005c96",
                "param_1": "function_pointer",
                "param_2": "input_value",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005cb6": {
            "additional_data": {
                "*param_1": {
                    "1": "callback_function"
                },
                "FUN_08005cb6": {
                    "1": "run_extracted_function",
                    "22": "execute_function",
                    "6": "execute_code"
                },
                "param_1": {
                    "1": "code_ptr",
                    "2": "code_pointer",
                    "24": "function_pointer",
                    "3": "function_ptr"
                }
            },
            "called": [],
            "calling": [
                "FUN_08005da8",
                "FUN_08005d42"
            ],
            "code": "\nvoid execute_function_08005cb6(undefined4 *function_pointer)\n\n{\n  (**(code **)*function_pointer)();\n  return;\n}\n\n",
            "current_name": "execute_function_08005cb6",
            "entrypoint": "0x08005cb6",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005cb6": "execute_function_08005cb6",
                "param_1": "function_pointer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005cc0": {
            "additional_data": {
                "&(*param_1 + 4)": {
                    "1": "function_reference"
                },
                "&DAT_0800786c": {
                    "1": "data"
                },
                "FUN_08005cc0": {
                    "1": "execute_callback_function",
                    "11": "execute_callback",
                    "14": "execute_function",
                    "2": "execute_function_with_arguments"
                },
                "param_1": {
                    "1": "callback_ptr",
                    "13": "function_pointer",
                    "5": "callback_function",
                    "6": "function_ptr"
                },
                "param_2": {
                    "1": "arg2",
                    "19": "arg1",
                    "2": "param_2"
                },
                "param_3": {
                    "1": "arg3",
                    "19": "arg2",
                    "2": "param_3"
                },
                "param_4": {
                    "1": "extra_argument",
                    "18": "arg3",
                    "2": "param_4",
                    "3": "additional_param"
                }
            },
            "called": [],
            "calling": [
                "FUN_08005cd4",
                "FUN_08005f40"
            ],
            "code": "\nvoid execute_function_08005cc0(int *function_pointer,undefined4 arg1,undefined4 arg2,undefined4 arg3)\n\n{\n  (**(code **)(*function_pointer + 4))(function_pointer,&DAT_0800786c,2,*(code **)(*function_pointer + 4),arg3);\n  return;\n}\n\n",
            "current_name": "execute_function_08005cc0",
            "entrypoint": "0x08005cc0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005cc0": "execute_function_08005cc0",
                "param_1": "function_pointer",
                "param_2": "arg1",
                "param_3": "arg2",
                "param_4": "arg3"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005cd4": {
            "additional_data": {
                "FUN_08005c96": {
                    "1": "get_initial_value"
                },
                "FUN_08005cc0": {
                    "1": "calculate_second_value"
                },
                "FUN_08005cd4": {
                    "1": "add_two_values",
                    "21": "calculate_sum",
                    "3": "sum_of_function_results",
                    "4": "sum_of_functions"
                },
                "iVar1": {
                    "1": "result_1",
                    "2": "first_value",
                    "27": "result1"
                },
                "iVar2": {
                    "1": "result_2",
                    "2": "second_value",
                    "27": "result2"
                },
                "param_1": {
                    "1": "input_param",
                    "11": "input_value",
                    "15": "input"
                }
            },
            "called": [
                "FUN_08005cc0",
                "FUN_08005c96"
            ],
            "calling": [
                "FUN_08000cd0"
            ],
            "code": "\nint calculate_sum_08005cd4(undefined4 input)\n\n{\n  int result1;\n  int result2;\n  \n  result1 = FUN_08005c96();\n  result2 = FUN_08005cc0(input);\n  return result2 + result1;\n}\n\n",
            "current_name": "calculate_sum_08005cd4",
            "entrypoint": "0x08005cd4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005cd4": "calculate_sum_08005cd4",
                "iVar1": "result1",
                "iVar2": "result2",
                "param_1": "input"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005ce8": {
            "additional_data": {
                "*pcVar5": {
                    "1": "current_digit"
                },
                "FUN_08005ce8": {
                    "1": "convert_number_to_base",
                    "10": "convert_to_base",
                    "12": "convert_base",
                    "5": "convert_decimal_to_base"
                },
                "cVar1": {
                    "1": "encoded_digit",
                    "2": "converted_digit",
                    "7": "digit"
                },
                "local_15": {
                    "1": "temp_str",
                    "2": "output_string",
                    "5": "buffer"
                },
                "param_1": {
                    "1": "input_pointer",
                    "2": "input_arr",
                    "3": "result",
                    "4": "output",
                    "5": "array"
                },
                "param_2": {
                    "1": "decimal",
                    "19": "number",
                    "2": "num",
                    "4": "decimal_number"
                },
                "param_3": {
                    "31": "base"
                },
                "pcVar5": {
                    "1": "output_str",
                    "2": "output_arr",
                    "3": "buffer"
                },
                "uVar2": {
                    "1": "converted_number",
                    "18": "result",
                    "2": "converted_value",
                    "3": "return_value"
                },
                "uVar3": {
                    "1": "digit",
                    "25": "remainder"
                },
                "uVar4": {
                    "26": "quotient"
                }
            },
            "called": [
                "FUN_08000178"
            ],
            "calling": [
                "FUN_08005d8a",
                "FUN_08005d42"
            ],
            "code": "\nundefined4 convert_base_08005ce8(int *array,uint number,uint base)\n\n{\n  char digit;\n  undefined4 result;\n  uint remainder;\n  uint quotient;\n  char *buffer;\n  char buffer [9];\n  \n  buffer[1] = 0;\n  if ((int)base < 2) {\n    base = 10;\n  }\n  buffer = buffer + 1;\n  do {\n    quotient = number / base;\n    remainder = (number & 0xff) - (quotient * base & 0xff) & 0xff;\n    buffer = buffer + -1;\n    digit = (char)remainder;\n    if (remainder < 10) {\n      digit = digit + '0';\n    }\n    else {\n      digit = digit + '7';\n    }\n    *buffer = digit;\n    number = quotient;\n  } while (quotient != 0);\n  if (buffer == (char *)0x0) {\n    result = 0;\n  }\n  else {\n    result = FUN_08000178(buffer);\n    result = (**(code **)(*array + 4))(array,buffer,result);\n  }\n  return result;\n}\n\n",
            "current_name": "convert_base_08005ce8",
            "entrypoint": "0x08005ce8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005ce8": "convert_base_08005ce8",
                "cVar1": "digit",
                "local_15": "buffer",
                "param_1": "array",
                "param_2": "number",
                "param_3": "base",
                "pcVar5": "buffer",
                "uVar2": "result",
                "uVar3": "remainder",
                "uVar4": "quotient"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005d42": {
            "additional_data": {
                "FUN_08005cb6": {
                    "1": "write_to_buffer",
                    "2": "print_character"
                },
                "FUN_08005ce8": {
                    "1": "parse_input_base",
                    "2": "convert_to_base"
                },
                "FUN_08005d42": {
                    "1": "calculate_result",
                    "2": "process_number",
                    "3": "parse_number",
                    "4": "process_data"
                },
                "F_08005d42": {
                    "1": "parse_number"
                },
                "iVar1": {
                    "1": "result1",
                    "2": "return_value",
                    "26": "result"
                },
                "iVar2": {
                    "1": "minus_flag",
                    "2": "negative_offset",
                    "3": "negative_result",
                    "4": "temp",
                    "6": "negative"
                },
                "param_1": {
                    "1": "arr",
                    "2": "buffer",
                    "3": "output_buffer",
                    "5": "data",
                    "6": "function_pointer"
                },
                "param_2": {
                    "1": "input_value1",
                    "10": "number",
                    "3": "value",
                    "4": "num1"
                },
                "param_3": {
                    "1": "value",
                    "18": "base",
                    "4": "value2"
                }
            },
            "called": [
                "FUN_08005cb6",
                "FUN_08005ce8"
            ],
            "calling": [
                "FUN_08005d82"
            ],
            "code": "\nint process_data_08005d42(undefined4 *function_pointer,uint number,uint base)\n\n{\n  int result;\n  int negative;\n  \n  if (base == 0) {\n    result = (**(code **)*function_pointer)(function_pointer,number & 0xff);\n    return result;\n  }\n  if (base != 10) {\n    result = FUN_08005ce8(function_pointer,number,base & 0xff);\n    return result;\n  }\n  if (-1 < (int)number) {\n    result = FUN_08005ce8(function_pointer,number,10);\n    return result;\n  }\n  result = FUN_08005cb6(function_pointer,0x2d);\n  negative = FUN_08005ce8(function_pointer,-number,10);\n  return negative + result;\n}\n\n",
            "current_name": "process_data_08005d42",
            "entrypoint": "0x08005d42",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005d42": "process_data_08005d42",
                "iVar1": "result",
                "iVar2": "negative",
                "param_1": "function_pointer",
                "param_2": "number",
                "param_3": "base"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005d82": {
            "additional_data": {
                "FUN_08005d42": {
                    "1": "perform_initialization",
                    "2": "perform_task",
                    "3": "perform_operation",
                    "5": "execute_sub_function",
                    "6": "process_data"
                },
                "FUN_08005d82": {
                    "1": "improve_code",
                    "2": "initialize_system",
                    "3": "initialize_program",
                    "4": "execute_initialization",
                    "5": "initialize_application",
                    "7": "execute_main_function"
                },
                "param_1": {
                    "1": "original_function_param1",
                    "2": "input_array",
                    "3": "parameter_1"
                },
                "param_2": {
                    "1": "arg2",
                    "2": "array_size",
                    "3": "parameter_2",
                    "8": "size"
                },
                "param_3": {
                    "1": "size",
                    "2": "max_size",
                    "3": "new_param_3",
                    "9": "count"
                }
            },
            "called": [
                "FUN_08005d42"
            ],
            "calling": [
                "FUN_08005da8",
                "FUN_08000cd0"
            ],
            "code": "\nvoid execute_main_function_08005d82(void)\n\n{\n  FUN_08005d42();\n  return;\n}\n\n",
            "current_name": "execute_main_function_08005d82",
            "entrypoint": "0x08005d82",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005d82": "execute_main_function_08005d82"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005d8a": {
            "additional_data": {
                "<original_function_name>": {
                    "1": "process_data"
                },
                "<param_1>": {
                    "1": "data_buffer"
                },
                "<param_2>": {
                    "1": "data_length"
                },
                "<param_3>": {
                    "1": "flag"
                },
                "<param_4>": {
                    "1": "callback_function"
                },
                "FUNK_08005d8a": {
                    "1": "execute_operation"
                },
                "FUN_08005ce8": {
                    "1": "handle_data",
                    "2": "process_sub_function",
                    "4": "execute_sub_function"
                },
                "FUN_08005d8a": {
                    "1": "execute_or_fallback",
                    "12": "execute_function",
                    "2": "execute_operation",
                    "8": "process_data"
                },
                "param_1": {
                    "1": "sub_function_pointer",
                    "15": "function_pointer",
                    "2": "function_ptr",
                    "5": "data_pointer"
                },
                "param_2": {
                    "1": "sub_arg1",
                    "2": "value",
                    "3": "size",
                    "5": "input_value",
                    "6": "value1"
                },
                "param_3": {
                    "1": "input_value_2",
                    "2": "arg2",
                    "6": "value2",
                    "8": "flag"
                },
                "param_4": {
                    "1": "unknown_param",
                    "2": "arg3",
                    "3": "param",
                    "4": "extra_param",
                    "5": "value3"
                }
            },
            "called": [
                "FUN_08005ce8"
            ],
            "calling": [
                "FUN_08005da8"
            ],
            "code": "\nvoid execute_function_08005d8a(undefined4 *function_pointer,uint value1,uint flag,undefined4 value3)\n\n{\n  if (flag != 0) {\n    FUN_08005ce8(function_pointer,value1,flag & 0xff);\n    return;\n  }\n  (**(code **)*function_pointer)(function_pointer,value1 & 0xff,0,*(code **)*function_pointer,value3);\n  return;\n}\n\n",
            "current_name": "execute_function_08005d8a",
            "entrypoint": "0x08005d8a",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005d8a": "execute_function_08005d8a",
                "param_1": "function_pointer",
                "param_2": "value1",
                "param_3": "flag",
                "param_4": "value3"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005da8": {
            "additional_data": {
                "FUM_08000a2c": {
                    "1": "check_condition"
                },
                "FUN_08000190": {
                    "1": "calculate5"
                },
                "FUN_08000194": {
                    "1": "perform_operation_2"
                },
                "FUN_0800040c": {
                    "1": "calculate_value_1"
                },
                "FUN_0800042c": {
                    "1": "return_value_1"
                },
                "FUN_080004f8": {
                    "1": "perform_operation_3"
                },
                "FUN_080005c96": {
                    "1": "perform_action"
                },
                "FUN_0800074c": {
                    "1": "perform_operation"
                },
                "FUN_080009dc": {
                    "1": "execute_task_1"
                },
                "FUN_080009dc_1": {
                    "1": "execute_task_2"
                },
                "FUN_080009f0": {
                    "1": "check_condition"
                },
                "FUN_080009f0_1": {
                    "1": "check_condition_1"
                },
                "FUN_080009f0_2": {
                    "1": "check_condition_2"
                },
                "FUN_080009f0_3": {
                    "1": "check_condition_3"
                },
                "FUN_08000a18": {
                    "1": "process_data"
                },
                "FUN_08000a2c_1": {
                    "1": "check_validity_1"
                },
                "FUN_08000a2c_2": {
                    "1": "check_validity_2"
                },
                "FUN_08000a2c_3": {
                    "1": "check_validity_3"
                },
                "FUN_08000a2c_4": {
                    "1": "check_validity_4"
                },
                "FUN_08000a58": {
                    "1": "calculate8"
                },
                "FUN_08000aa8": {
                    "1": "calculate1"
                },
                "FUN_08005c96": {
                    "1": "execute_task"
                },
                "FUN_08005cb6": {
                    "1": "handle_error"
                },
                "FUN_08005d82": {
                    "1": "return_value_2"
                },
                "FUN_08005d8a": {
                    "1": "return_value_3"
                },
                "FUN_08005da8": {
                    "1": "perform_task",
                    "2": "process_data"
                },
                "FUn_08000a2c": {
                    "1": "check_validity"
                },
                "bVar4": {
                    "1": "byte_value",
                    "2": "temp_var_3",
                    "3": "temp3",
                    "5": "byte_var",
                    "7": "loop_counter"
                },
                "iVar1": {
                    "26": "result",
                    "3": "result1"
                },
                "iVar3": {
                    "1": "temp_variable2",
                    "2": "result2",
                    "4": "temp_var2",
                    "8": "temp2"
                },
                "param_1": {
                    "1": "unknown_param",
                    "2": "argument_1",
                    "3": "param_1",
                    "4": "input1",
                    "5": "param1",
                    "7": "arg1"
                },
                "param_2": {
                    "1": "input_2",
                    "2": "argument_2",
                    "3": "param_2",
                    "4": "input2",
                    "5": "param2",
                    "7": "arg2"
                },
                "param_3": {
                    "1": "value_3",
                    "2": "argument_3",
                    "3": "param_3",
                    "4": "input3",
                    "5": "param3",
                    "7": "arg3"
                },
                "param_4": {
                    "1": "input_param_4",
                    "2": "argument_4",
                    "3": "param_4",
                    "4": "input4",
                    "5": "param4",
                    "7": "arg4"
                },
                "param_5": {
                    "1": "byte_param",
                    "2": "argument_5",
                    "3": "param_5",
                    "4": "input5",
                    "5": "param5",
                    "7": "arg5"
                },
                "uVar2": {
                    "1": "temporary_value",
                    "2": "temp_var_1",
                    "3": "temp",
                    "4": "result2",
                    "5": "temp_var1",
                    "6": "temp1"
                },
                "uVar5": {
                    "1": "temp_value2",
                    "2": "temp_var4",
                    "3": "temp4",
                    "6": "temp3"
                },
                "uVar6": {
                    "1": "u_result2",
                    "2": "temp_var_5",
                    "3": "temp5",
                    "6": "temp4"
                }
            },
            "called": [
                "FUN_08000a18",
                "FUN_08000aa8",
                "FUN_0800040c",
                "FUN_08005c96",
                "FUN_0800042c",
                "FUN_0800074c",
                "FUN_08000190",
                "FUN_08000194",
                "FUN_080004f8",
                "FUN_080009f0",
                "FUN_080009dc",
                "FUN_08005cb6",
                "FUN_08000a58",
                "FUN_08005d82",
                "FUN_08000a2c",
                "FUN_08005d8a"
            ],
            "calling": [
                "FUN_08005f2c"
            ],
            "code": "\nint process_data_08005da8(undefined4 arg1,undefined4 arg2,undefined4 arg3,uint arg4,byte arg5)\n\n{\n  int result;\n  undefined4 temp1;\n  int temp2;\n  byte loop_counter;\n  undefined8 temp3;\n  undefined8 temp4;\n  \n  result = FUN_08000a2c(arg3,arg4,arg3,arg4);\n  if (result == 0) {\n    result = FUN_08000a2c(arg3,arg4 & 0x7fffffff,0xffffffff,0x7fefffff);\n    if ((result == 0) &&\n       (result = FUN_080009f0(arg3,arg4 & 0x7fffffff,0xffffffff,0x7fefffff), result == 0)) {\n      result = FUN_08005c96(arg1,&DAT_08007860);\n    }\n    else {\n      result = FUN_08000a18(arg3,arg4,0xe0000000,0x41efffff);\n      if (result == 0) {\n        result = FUN_080009dc(arg3,arg4,0xe0000000,0xc1efffff);\n        if (result == 0) {\n          result = FUN_080009dc(arg3,arg4,0,0);\n          if (result == 0) {\n            result = 0;\n          }\n          else {\n            result = FUN_08005cb6(arg1,0x2d);\n            arg4 = arg4 + 0x80000000;\n          }\n          temp3 = 0x3fe0000000000000;\n          for (loop_counter = 0; temp1 = (undefined4)((ulonglong)temp3 >> 0x20), loop_counter < arg5;\n              loop_counter = loop_counter + 1) {\n            temp3 = FUN_0800074c((int)temp3,temp1,0,0x40240000);\n          }\n          temp3 = FUN_08000194(arg3,arg4,(int)temp3,temp1);\n          temp1 = FUN_08000aa8();\n          temp4 = FUN_0800040c();\n          temp3 = FUN_08000190((int)temp3,(int)((ulonglong)temp3 >> 0x20),(int)temp4,\n                               (int)((ulonglong)temp4 >> 0x20));\n          temp2 = FUN_08005d8a(arg1,temp1,10);\n          result = result + temp2;\n          if (arg5 != 0) {\n            temp2 = FUN_08005c96(arg1,&DAT_08007868);\n            result = result + temp2;\n          }\n          while (arg5 != 0) {\n            temp3 = FUN_080004f8((int)temp3,(int)((ulonglong)temp3 >> 0x20),0,0x40240000);\n            temp1 = FUN_08000a58();\n            temp2 = FUN_08005d82(arg1,temp1,10);\n            result = result + temp2;\n            temp4 = FUN_0800042c(temp1);\n            temp3 = FUN_08000190((int)temp3,(int)((ulonglong)temp3 >> 0x20),(int)temp4,\n                                 (int)((ulonglong)temp4 >> 0x20));\n            arg5 = arg5 - 1;\n          }\n        }\n        else {\n          result = FUN_08005c96(arg1,&DAT_08007864);\n        }\n      }\n      else {\n        result = FUN_08005c96(arg1,&DAT_08007864);\n      }\n    }\n  }\n  else {\n    result = FUN_08005c96(arg1,&DAT_0800785c);\n  }\n  return result;\n}\n\n",
            "current_name": "process_data_08005da8",
            "entrypoint": "0x08005da8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005da8": "process_data_08005da8",
                "bVar4": "loop_counter",
                "iVar1": "result",
                "iVar3": "temp2",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arg3",
                "param_4": "arg4",
                "param_5": "arg5",
                "uVar2": "temp1",
                "uVar5": "temp3",
                "uVar6": "temp4"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005f2c": {
            "additional_data": {
                "FUN_08005da8": {
                    "1": "perform_initialization",
                    "2": "execute_sub_function",
                    "5": "execute_initialization"
                },
                "FUN_08005f2c": {
                    "1": "execute_initial_process",
                    "3": "initialize_program",
                    "5": "initialize_application",
                    "7": "execute_initialization",
                    "9": "initialize_system"
                },
                "param_1": {
                    "1": "setup_param_1",
                    "17": "arg1",
                    "2": "argument1",
                    "4": "param1"
                },
                "param_2": {
                    "1": "setup_param_2",
                    "17": "arg2",
                    "2": "argument2",
                    "4": "param2"
                },
                "param_3": {
                    "1": "setup_param_3",
                    "17": "arg3",
                    "2": "argument3",
                    "4": "param3"
                },
                "param_4": {
                    "1": "setup_param_4",
                    "17": "arg4",
                    "4": "param4"
                },
                "param_5": {
                    "1": "byte_data",
                    "17": "arg5",
                    "2": "flag",
                    "4": "param5"
                }
            },
            "called": [
                "FUN_08005da8"
            ],
            "calling": [
                "FUN_08000cd0",
                "FUN_08005f40"
            ],
            "code": "\nvoid initialize_system_08005f2c(void)\n\n{\n  FUN_08005da8();\n  return;\n}\n\n",
            "current_name": "initialize_system_08005f2c",
            "entrypoint": "0x08005f2c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005f2c": "initialize_system_08005f2c"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005f40": {
            "additional_data": {
                "FUN_08005cc0": {
                    "1": "perform_calculation"
                },
                "FUN_08005f2c": {
                    "1": "get_first_value"
                },
                "FUN_08005f40": {
                    "1": "sum_of_function_results",
                    "23": "calculate_sum",
                    "3": "sum_of_functions"
                },
                "iVar1": {
                    "1": "result_of_fun_08005f2c",
                    "23": "result1",
                    "4": "result_1"
                },
                "iVar2": {
                    "1": "value2",
                    "23": "result2",
                    "4": "result_2"
                },
                "param_1": {
                    "1": "input_param",
                    "11": "input",
                    "16": "input_value"
                }
            },
            "called": [
                "FUN_08005f2c",
                "FUN_08005cc0"
            ],
            "calling": [
                "FUN_08000cd0"
            ],
            "code": "\nint calculate_sum_08005f40(undefined4 input_value)\n\n{\n  int result1;\n  int result2;\n  \n  result1 = FUN_08005f2c();\n  result2 = FUN_08005cc0(input_value);\n  return result2 + result1;\n}\n\n",
            "current_name": "calculate_sum_08005f40",
            "entrypoint": "0x08005f40",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005f40": "calculate_sum_08005f40",
                "iVar1": "result1",
                "iVar2": "result2",
                "param_1": "input_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005f5c": {
            "called": [],
            "calling": [
                "FUN_08005f6c"
            ],
            "code": "\nvoid FUNC_08005f5c(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_08005f5c",
            "entrypoint": "0x08005f5c",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_08005f5c": "FUNC_08005f5c"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_08005f5e": {
            "additional_data": {
                "FUN_08001c32": {
                    "1": "perform_background_task",
                    "11": "perform_initialization",
                    "2": "perform_first_task"
                },
                "FUN_08002470": {
                    "1": "execute_operation",
                    "2": "configure_system",
                    "3": "set_log_level",
                    "5": "set_configuration"
                },
                "FUN_08005f5e": {
                    "1": "initialize_components",
                    "3": "initialize_program",
                    "5": "execute_initialization",
                    "8": "initialize_application",
                    "9": "initialize_system"
                },
                "param_1": {
                    "1": "log_level",
                    "2": "number_of_processes"
                }
            },
            "called": [
                "FUN_08001c32",
                "FUN_08002470"
            ],
            "calling": [
                "FUN_08006198"
            ],
            "code": "\nvoid initialize_system_08005f5e(void)\n\n{\n  FUN_08002470(3);\n  FUN_08001c32();\n  return;\n}\n\n",
            "current_name": "initialize_system_08005f5e",
            "entrypoint": "0x08005f5e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005f5e": "initialize_system_08005f5e"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005f6c": {
            "additional_data": {
                "FUNC_08005a18": {
                    "1": "finalize",
                    "2": "cleanup",
                    "3": "execute_task",
                    "4": "process_data"
                },
                "FUNC_08005f5c": {
                    "1": "execute_first_task",
                    "2": "execute_task1",
                    "3": "execute_first_function",
                    "4": "initialize_system",
                    "8": "initialize"
                },
                "FUN_08000bcc": {
                    "1": "run_second_function",
                    "11": "initialize",
                    "2": "perform_initialization",
                    "3": "setup"
                },
                "FUN_08000cd0": {
                    "1": "repeat_operation",
                    "2": "perform_task_a",
                    "3": "execute_task",
                    "6": "perform_operation",
                    "7": "perform_action"
                },
                "FUN_08005f6c": {
                    "1": "main_function",
                    "10": "run_infinite_loop",
                    "2": "run_loop",
                    "3": "main_loop",
                    "4": "execute_loop"
                }
            },
            "called": [
                "FUN_08000cd0",
                "FUN_08000bcc",
                "FUN_08005f5c",
                "FUN_08005a18"
            ],
            "calling": [
                "entry"
            ],
            "code": "\nvoid run_infinite_loop_08005f6c(void)\n\n{\n  FUNC_08005f5c();\n  FUN_08000bcc();\n  do {\n    FUN_08000cd0();\n    FUNC_08005a18();\n  } while( true );\n}\n\n",
            "current_name": "run_infinite_loop_08005f6c",
            "entrypoint": "0x08005f6c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005f6c": "run_infinite_loop_08005f6c"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005f8c": {
            "additional_data": {
                "FUN_08005f8c": {
                    "1": "count_binary_bits",
                    "2": "count_bits_set",
                    "23": "count_set_bits",
                    "4": "count_bits"
                },
                "cVar1": {
                    "1": "set_bits_count",
                    "2": "count",
                    "25": "bit_count"
                },
                "param_1": {
                    "1": "input_num",
                    "18": "number",
                    "2": "input_number",
                    "8": "num"
                }
            },
            "called": [],
            "calling": [
                "FUN_080060e4"
            ],
            "code": "\nchar count_set_bits_08005f8c(uint number)\n\n{\n  char bit_count;\n  \n  bit_count = '\\0';\n  for (; number != 1; number = number >> 1) {\n    bit_count = bit_count + '\\x01';\n  }\n  return bit_count;\n}\n\n",
            "current_name": "count_set_bits_08005f8c",
            "entrypoint": "0x08005f8c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005f8c": "count_set_bits_08005f8c",
                "cVar1": "bit_count",
                "param_1": "number"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005fc8": {
            "additional_data": {
                "&DAT_20000000": {
                    "2": "ptr2"
                },
                "&LAB_08005fa0_1": {
                    "2": "ptr1"
                },
                "FUN_08005fc8": {
                    "1": "initialize_memory",
                    "19": "initialize_data",
                    "2": "initialize_params",
                    "5": "initialize_parameters"
                },
                "FUN_08006112": {
                    "1": "perform_operation",
                    "10": "process_data",
                    "2": "call_sub_function"
                },
                "LAB_08005fa0_1": {
                    "1": "some_label",
                    "3": "label"
                },
                "flag": {
                    "1": "flag"
                },
                "label": {
                    "1": "label"
                },
                "newVariable1": {
                    "1": "6"
                },
                "newVariable10": {
                    "1": "0"
                },
                "newVariable11": {
                    "1": "0x17"
                },
                "newVariable12": {
                    "1": "0"
                },
                "newVariable13": {
                    "1": "0x17"
                },
                "newVariable14": {
                    "1": "0"
                },
                "newVariable15": {
                    "1": "0x17"
                },
                "newVariable16": {
                    "1": "0"
                },
                "newVariable17": {
                    "1": "0x17"
                },
                "newVariable18": {
                    "1": "0"
                },
                "newVariable19": {
                    "1": "0x17"
                },
                "newVariable2": {
                    "1": "0"
                },
                "newVariable20": {
                    "1": "0"
                },
                "newVariable21": {
                    "1": "0x28"
                },
                "newVariable22": {
                    "1": "0"
                },
                "newVariable23": {
                    "1": "0x28"
                },
                "newVariable24": {
                    "1": "0"
                },
                "newVariable25": {
                    "1": "0x28"
                },
                "newVariable26": {
                    "1": "0"
                },
                "newVariable27": {
                    "1": "0x28"
                },
                "newVariable28": {
                    "1": "0"
                },
                "newVariable29": {
                    "1": "0x28"
                },
                "newVariable3": {
                    "1": "7"
                },
                "newVariable30": {
                    "1": "0"
                },
                "newVariable31": {
                    "1": "0x28"
                },
                "newVariable32": {
                    "1": "0"
                },
                "newVariable4": {
                    "1": "0"
                },
                "newVariable5": {
                    "1": "8"
                },
                "newVariable6": {
                    "1": "0"
                },
                "newVariable7": {
                    "1": "9"
                },
                "newVariable8": {
                    "1": "0"
                },
                "newVariable9": {
                    "1": "10"
                },
                "original_variable_name_n": {
                    "1": "new_variable_name_n"
                },
                "param_1": {
                    "1": "input_one",
                    "2": "mode",
                    "3": "input_flag",
                    "4": "status",
                    "9": "condition"
                },
                "param_2": {
                    "1": "input_two",
                    "2": "input_value",
                    "23": "value",
                    "3": "condition2"
                },
                "param_3": {
                    "1": "unused_param_1",
                    "2": "param_3",
                    "3": "unused_param1",
                    "5": "unused1",
                    "6": "unused_param"
                },
                "param_4": {
                    "1": "unused_2",
                    "2": "param",
                    "3": "unused_param2",
                    "5": "unused2"
                },
                "value": {
                    "1": "value"
                }
            },
            "called": [
                "FUN_08006112"
            ],
            "calling": [],
            "code": "\nvoid initialize_data_08005fc8(int condition,int value,undefined4 unused_param,undefined4 unused2)\n\n{\n  if (condition != 1) {\n    return;\n  }\n  if (value == 0xffff) {\n    DAT_200004b8 = 6;\n    DAT_200004c4 = 0;\n    DAT_200004cc = 7;\n    DAT_200004d8 = 0;\n    DAT_200004e0 = 8;\n    DAT_200004ec = 0;\n    DAT_200004f4 = 9;\n    DAT_20000500 = 0;\n    DAT_20000508 = 10;\n    DAT_20000514 = 0;\n    DAT_2000051c = 0x17;\n    DAT_20000528 = 0;\n    DAT_20000530 = 0x17;\n    DAT_2000053c = 0;\n    DAT_20000544 = 0x17;\n    DAT_20000550 = 0;\n    DAT_20000558 = 0x17;\n    DAT_20000564 = 0;\n    DAT_2000056c = 0x17;\n    DAT_20000578 = 0;\n    DAT_20000580 = 0x28;\n    DAT_2000058c = 0;\n    DAT_20000594 = 0x28;\n    DAT_200005a0 = 0;\n    DAT_200005a8 = 0x28;\n    DAT_200005b4 = 0;\n    DAT_200005bc = 0x28;\n    DAT_200005c8 = 0;\n    DAT_200005d0 = 0x28;\n    DAT_200005dc = 0;\n    DAT_200005e4 = 0x28;\n    DAT_200005f0 = 0;\n    FUN_08006112(0,ptr1,&DAT_20000000,&DAT_200004b8,unused2);\n  }\n  return;\n}\n\n",
            "current_name": "initialize_data_08005fc8",
            "entrypoint": "0x08005fc8",
            "imported": false,
            "improved": true,
            "renaming": {
                "&LAB_08005fa0_1": "ptr1",
                "FUN_08005fc8": "initialize_data_08005fc8",
                "LAB_08005fa0_1": "label",
                "param_1": "condition",
                "param_2": "value",
                "param_3": "unused_param",
                "param_4": "unused2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080060d4": {
            "additional_data": {
                "&DAT_200004c4": {
                    "1": "resource_array",
                    "3": "data_array"
                },
                "DAT_200004c4": {
                    "2": "data",
                    "4": "data_array"
                },
                "FUN_08005f8c": {
                    "1": "get_index",
                    "2": "calculate_index"
                },
                "FUN_080060d4": {
                    "1": "execute_param_function",
                    "2": "execute_next_operation",
                    "3": "process_parameter",
                    "4": "process_data",
                    "7": "execute_function"
                },
                "FUN_08007090": {
                    "1": "init_function",
                    "4": "initialize",
                    "5": "initialize_data"
                },
                "iVar1": {
                    "1": "operation_result",
                    "2": "result_index",
                    "23": "index",
                    "4": "result"
                },
                "param_1": {
                    "1": "input_data",
                    "2": "parameter",
                    "3": "function_pointer",
                    "5": "input",
                    "6": "input_param"
                }
            },
            "called": [
                "FUN_08007090"
            ],
            "calling": [
                "FUN_080060e4"
            ],
            "code": "\nvoid execute_function_080060d4(int input_param)\n\n{\n  int index;\n  \n  if (*(int *)(input_param + 8) != 0) {\n    (**(code **)(input_param + 0xc))();\n    return;\n  }\n  FUN_08007090();\n  index = FUN_08005f8c();\n  if ((&DAT_200004c4)[index * 5] != 0) {\n    execute_function_080060d4();\n  }\n  return;\n}\n\n",
            "current_name": "execute_function_080060d4",
            "entrypoint": "0x080060d4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080060d4": "execute_function_080060d4",
                "iVar1": "index",
                "param_1": "input_param"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080060e4": {
            "additional_data": {
                "&DAT_200004c4": {
                    "3": "data_array"
                },
                "FUN_08005f8c": {
                    "1": "get_index_of_non_null_data",
                    "2": "check_condition",
                    "3": "get_index",
                    "4": "get_return_value",
                    "5": "get_array_index"
                },
                "FUN_080060d4": {
                    "1": "execute_alternative_function",
                    "10": "execute_function",
                    "2": "execute_operation",
                    "8": "execute_action"
                },
                "FUN_080060e4": {
                    "1": "check_and_execute_callback",
                    "2": "check_and_call_function",
                    "6": "check_and_update_data",
                    "7": "check_and_execute"
                },
                "iVar1": {
                    "1": "index_result",
                    "3": "index",
                    "8": "result"
                },
                "param_1": {
                    "1": "input_param",
                    "2": "input",
                    "5": "index"
                }
            },
            "called": [
                "FUN_08005f8c",
                "FUN_080060d4"
            ],
            "calling": [
                "FUN_0800282c"
            ],
            "code": "\nvoid check_and_execute_080060e4(void)\n\n{\n  int result;\n  \n  result = FUN_08005f8c();\n  if ((&DAT_200004c4)[result * 5] != 0) {\n    FUN_080060d4();\n  }\n  return;\n}\n\n",
            "current_name": "check_and_execute_080060e4",
            "entrypoint": "0x080060e4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080060e4": "check_and_execute_080060e4",
                "iVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08006112": {
            "additional_data": {
                "FUN_08006112": {
                    "1": "call_first_subfunction",
                    "2": "call_other_function",
                    "8": "execute_function"
                },
                "FUN_08006158": {
                    "1": "rearrange_data",
                    "2": "compute_result",
                    "4": "reverse_operation",
                    "5": "perform_operation"
                },
                "longlong": {
                    "1": "long_result_type"
                },
                "param_1": {
                    "1": "first_parameter",
                    "2": "param_1",
                    "5": "input_param",
                    "6": "arg1"
                },
                "param_1_of_FUN_08006158": {
                    "1": "reverse_param1"
                },
                "param_2": {
                    "1": "sub_func_param2",
                    "2": "param_2",
                    "3": "output_param",
                    "5": "input2",
                    "6": "arg2"
                },
                "param_2_of_FUN_08006158": {
                    "1": "reverse_param2"
                },
                "uint": {
                    "1": "unsigned_int_type"
                },
                "undefined4": {
                    "1": "param_type"
                }
            },
            "called": [
                "FUN_08006158"
            ],
            "calling": [
                "FUN_08005fc8"
            ],
            "code": "\nvoid execute_function_08006112(param_type arg1,param_type arg2)\n\n{\n  FUN_08006158(arg2,arg1);\n  return;\n}\n\n",
            "current_name": "execute_function_08006112",
            "entrypoint": "0x08006112",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08006112": "execute_function_08006112",
                "param_1": "arg1",
                "param_2": "arg2",
                "undefined4": "param_type"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800611c": {
            "additional_data": {
                "FUN_0800611c": {
                    "1": "print_assertion_failed",
                    "15": "assertion_failed",
                    "2": "assertion_failure"
                },
                "FUN_08006174": {
                    "1": "print_assertion_error",
                    "2": "print_error_message"
                },
                "FUN_08006ac0": {
                    "3": "get_current_time"
                },
                "param_1": {
                    "1": "failed_assertion",
                    "18": "file",
                    "2": "message",
                    "5": "file_name"
                },
                "param_2": {
                    "1": "file_name",
                    "10": "line_number",
                    "14": "line",
                    "5": "file"
                },
                "param_3": {
                    "1": "assertion_msg",
                    "2": "error_message",
                    "3": "condition",
                    "4": "assertion_message",
                    "7": "message",
                    "8": "assertion"
                },
                "param_4": {
                    "1": "line",
                    "12": "function_name",
                    "18": "function"
                },
                "pcVar2": {
                    "1": "extra_string",
                    "2": "delimiter",
                    "3": "suffix"
                },
                "uVar1": {
                    "1": "assertion_address",
                    "2": "ptr_value",
                    "3": "assertion",
                    "7": "file_ptr"
                },
                "uVar3": {
                    "1": "result_ptr",
                    "19": "result",
                    "9": "return_value"
                },
                "uVar4": {
                    "1": "function_name_copy",
                    "2": "ptr_function",
                    "3": "function_copy",
                    "7": "function_ptr"
                }
            },
            "called": [
                "FUN_08006174",
                "FUN_08006ac0"
            ],
            "calling": [
                "FUN_08005a68"
            ],
            "code": "\nvoid assertion_failed_0800611c(undefined4 file,undefined4 line,char *assertion,undefined4 function)\n\n{\n  undefined4 file_ptr;\n  char *message;\n  undefined8 result;\n  undefined4 function_ptr;\n  \n  file_ptr = *(undefined4 *)(DAT_200000f8 + 0xc);\n  function_ptr = function;\n  if (assertion == (char *)0x0) goto LAB_08006140;\n  message = \", function: \";\n  do {\n    FUN_08006174(file_ptr,\"assertion \\\"%s\\\" failed: file \\\"%s\\\", line %d%s%s\\n\",function,file,line\n                 ,message,assertion,function_ptr);\n    result = FUN_08006ac0();\n    line = (undefined4)((ulonglong)result >> 0x20);\n    file_ptr = (undefined4)result;\nLAB_08006140:\n    assertion = \"\";\n    message = assertion;\n  } while( true );\n}\n\n",
            "current_name": "assertion_failed_0800611c",
            "entrypoint": "0x0800611c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800611c": "assertion_failed_0800611c",
                "param_1": "file",
                "param_2": "line",
                "param_3": "assertion",
                "param_4": "function",
                "pcVar2": "message",
                "uVar1": "file_ptr",
                "uVar3": "result",
                "uVar4": "function_ptr"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08006158": {
            "additional_data": {
                "<original_variable_name_1>": {
                    "1": "<new_variable_name_1>"
                },
                "<original_variable_name_2>": {
                    "1": "<new_variable_name_2>"
                },
                "<original_variable_name_n>": {
                    "1": "<new_variable_name_n>"
                },
                "FUN_08006158": {
                    "1": "shift_left_with_padding",
                    "2": "left_shift_u_int64",
                    "9": "shift_left_by32"
                },
                "longlong": {
                    "1": "output"
                },
                "param_1": {
                    "1": "unset_value",
                    "2": "param1",
                    "4": "param",
                    "6": "flags"
                },
                "param_2": {
                    "1": "input_2",
                    "12": "value",
                    "2": "input_value",
                    "4": "shift_amount",
                    "5": "value_to_shift"
                },
                "param_n": {
                    "1": "n"
                },
                "ulonglong": {
                    "1": "shifted_value",
                    "2": "result"
                }
            },
            "called": [],
            "calling": [
                "FUN_08006112"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08006160) */\n\noutput shift_left_by32_08006158(undefined4 flags,uint value)\n\n{\n  return (result)value << 0x20;\n}\n\n",
            "current_name": "shift_left_by32_08006158",
            "entrypoint": "0x08006158",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08006158": "shift_left_by32_08006158",
                "longlong": "output",
                "param_1": "flags",
                "param_2": "value",
                "ulonglong": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08006174": {
            "additional_data": {
                "FUN_08006174": {
                    "1": "extract_and_reverse_binary",
                    "15": "process_data",
                    "2": "extract_data"
                },
                "FUN_08006394": {
                    "1": "reverse_data"
                },
                "param_1": {
                    "1": "data_1",
                    "2": "param1",
                    "5": "input_param",
                    "7": "input1"
                },
                "param_2": {
                    "1": "arg2",
                    "2": "input_2",
                    "5": "input_param2",
                    "7": "input2"
                },
                "param_3": {
                    "1": "function_param3",
                    "2": "buffer_param"
                },
                "param_4": {
                    "1": "fourth_param",
                    "2": "input4"
                },
                "uStack_4": {
                    "1": "stack_variable_2",
                    "2": "temp2",
                    "3": "stack_var2"
                },
                "uStack_8": {
                    "1": "input_byte_array",
                    "2": "temp1",
                    "3": "stack_var1"
                }
            },
            "called": [
                "FUN_08006394"
            ],
            "calling": [
                "FUN_0800611c"
            ],
            "code": "\nvoid process_data_08006174(undefined4 input1,undefined4 input2,undefined4 buffer,undefined4 counter_param)\n\n{\n  undefined4 stack_var1;\n  undefined4 stack_var2;\n  \n  stack_var1 = buffer;\n  stack_var2 = counter_param;\n  FUN_08006394(DAT_200000f8,input1,input2,&stack_var1,input1,&stack_var1);\n  return;\n}\n\n",
            "current_name": "process_data_08006174",
            "entrypoint": "0x08006174",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08006174": "process_data_08006174",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "buffer",
                "param_4": "counter_param",
                "uStack_4": "stack_var2",
                "uStack_8": "stack_var1"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08006198": {
            "additional_data": {
                "FUNC_08007328": {
                    "1": "cleanup_data",
                    "2": "finalize_execution",
                    "5": "cleanup"
                },
                "FUN_08005f5e": {
                    "1": "sub_function",
                    "2": "perform_operation"
                },
                "FUN_08006198": {
                    "1": "execute_all_functions",
                    "2": "execute_subfunctions",
                    "26": "execute_functions"
                },
                "iVar1": {
                    "1": "iteration_index",
                    "15": "index",
                    "8": "counter"
                }
            },
            "called": [
                "FUN_08005f5e",
                "FUN_08007328"
            ],
            "calling": [
                "entry"
            ],
            "code": "\nvoid execute_functions_08006198(void)\n\n{\n  int index;\n  \n  for (index = 0; index != 0; index = index + 1) {\n    (*(code *)(&DAT_08007944)[index])();\n  }\n  FUNC_08007328();\n  for (index = 0; index != 10; index = index + 1) {\n    (*(code *)(&DAT_08007944)[index])();\n  }\n  return;\n}\n\n",
            "current_name": "execute_functions_08006198",
            "entrypoint": "0x08006198",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08006198": "execute_functions_08006198",
                "iVar1": "index"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080061e0": {
            "additional_data": {
                "FUN_080061e0": {
                    "1": "memset",
                    "15": "fill_memory",
                    "2": "fill_memory_with_byte",
                    "4": "initialize_memory"
                },
                "param_1": {
                    "1": "memory_address",
                    "13": "memory",
                    "2": "memory_start",
                    "3": "dest",
                    "9": "destination"
                },
                "param_2": {
                    "1": "byte_value",
                    "28": "value"
                },
                "param_3": {
                    "2": "count",
                    "20": "size",
                    "9": "length"
                },
                "puVar1": {
                    "1": "dest_end",
                    "13": "end_address",
                    "2": "memory_end",
                    "3": "end_memory",
                    "4": "end_pointer"
                }
            },
            "called": [],
            "calling": [
                "FUN_08006c40",
                "FUN_08006c88",
                "FUN_08004a4c",
                "FUN_08006d14"
            ],
            "code": "\nvoid fill_memory_080061e0(undefined *memory,undefined value,int size)\n\n{\n  undefined *end_address;\n  \n  end_address = memory + size;\n  for (; memory != end_address; memory = memory + 1) {\n    *memory = value;\n  }\n  return;\n}\n\n",
            "current_name": "fill_memory_080061e0",
            "entrypoint": "0x080061e0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080061e0": "fill_memory_080061e0",
                "param_1": "memory",
                "param_2": "value",
                "param_3": "size",
                "puVar1": "end_address"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080061f0": {
            "additional_data": {
                "DAT_200005f8": {
                    "1": "global_variable"
                },
                "FUNC_08006eac": {
                    "1": "initialize_ptr",
                    "2": "initialize"
                },
                "FUNC_08006eae": {
                    "1": "perform_operation"
                },
                "FUN_080061f0": {
                    "1": "manage_data",
                    "11": "process_data",
                    "2": "update_data_structure",
                    "3": "update_data"
                },
                "extraout_r1": {
                    "1": "result",
                    "2": "temp1",
                    "3": "temp",
                    "9": "extra_output"
                },
                "param_1": {
                    "1": "output_buffer",
                    "10": "output",
                    "3": "result_array",
                    "4": "output_array",
                    "8": "result"
                },
                "param_2": {
                    "1": "length",
                    "16": "size",
                    "2": "list_size",
                    "3": "array_length",
                    "4": "input_size"
                },
                "param_3": {
                    "1": "param",
                    "12": "param3",
                    "2": "param1",
                    "4": "arg1",
                    "6": "param_3"
                },
                "param_4": {
                    "1": "constant2",
                    "12": "param4",
                    "2": "param2",
                    "4": "arg2",
                    "6": "param_4"
                },
                "piVar3": {
                    "1": "temp_int_pointer_3",
                    "2": "pointer3",
                    "4": "temp_pointer",
                    "7": "temp_var"
                },
                "ppiVar1": {
                    "1": "prev_ptr",
                    "2": "pointer1",
                    "5": "temp_ptr1"
                },
                "ppiVar2": {
                    "1": "temp_var2",
                    "2": "temp3",
                    "3": "next_pointer",
                    "5": "temp_ptr2"
                },
                "ppiVar4": {
                    "1": "previous_pointer",
                    "2": "pointer4",
                    "3": "prev",
                    "5": "temp_ptr3"
                },
                "ppiVar5": {
                    "1": "list4",
                    "2": "pointer5",
                    "3": "temp_ptr4",
                    "4": "new_node"
                }
            },
            "called": [
                "FUN_08006eac",
                "FUN_08006eae"
            ],
            "calling": [
                "FUN_080069e4",
                "FUN_08006ac0"
            ],
            "code": "\nvoid process_data_080061f0(undefined4 *output,int size,undefined4 param3,undefined4 param4)\n\n{\n  int **extra_output;\n  int **temp_ptr1;\n  int **temp_ptr2;\n  int *temp_var;\n  int **temp_ptr3;\n  int **new_node;\n  \n  if (size == 0) {\n    return;\n  }\n  new_node = (int **)(size + -4);\n  if (*(int *)(size + -4) < 0) {\n    new_node = (int **)((int)new_node + *(int *)(size + -4));\n  }\n  FUNC_08006eac();\n  temp_ptr2 = (int **)&DAT_200005f8;\n  if (DAT_200005f8 == (int **)0x0) {\n    new_node[1] = (int *)0x0;\n    temp_ptr1 = extra_output;\n    DAT_200005f8 = new_node;\n  }\n  else {\n    temp_ptr2 = DAT_200005f8;\n    if (new_node < DAT_200005f8) {\n      temp_ptr1 = (int **)*new_node;\n      temp_ptr2 = (int **)((int)new_node + (int)temp_ptr1);\n      if (DAT_200005f8 == temp_ptr2) {\n        temp_var = *DAT_200005f8;\n        DAT_200005f8 = (int **)DAT_200005f8[1];\n        temp_ptr2 = (int **)((int)temp_var + (int)temp_ptr1);\n        *new_node = (int *)temp_ptr2;\n      }\n      new_node[1] = (int *)DAT_200005f8;\n      DAT_200005f8 = new_node;\n    }\n    else {\n      do {\n        temp_ptr3 = temp_ptr2;\n        temp_ptr2 = (int **)temp_ptr3[1];\n        if (temp_ptr2 == (int **)0x0) break;\n      } while (temp_ptr2 <= new_node);\n      temp_ptr1 = (int **)*temp_ptr3;\n      if ((int **)((int)temp_ptr3 + (int)temp_ptr1) == new_node) {\n        temp_ptr1 = (int **)((int)temp_ptr1 + (int)*new_node);\n        *temp_ptr3 = (int *)temp_ptr1;\n        if (temp_ptr2 == (int **)((int)temp_ptr3 + (int)temp_ptr1)) {\n          temp_var = *temp_ptr2;\n          temp_ptr2 = (int **)temp_ptr2[1];\n          temp_ptr1 = (int **)((int)temp_ptr1 + (int)temp_var);\n          *temp_ptr3 = (int *)temp_ptr1;\n          temp_ptr3[1] = (int *)temp_ptr2;\n        }\n      }\n      else if (new_node < (int **)((int)temp_ptr3 + (int)temp_ptr1)) {\n        *output = 0xc;\n      }\n      else {\n        temp_ptr1 = (int **)((int)new_node + (int)*new_node);\n        if (temp_ptr2 == temp_ptr1) {\n          temp_var = *temp_ptr2;\n          temp_ptr2 = (int **)temp_ptr2[1];\n          temp_ptr1 = (int **)((int)temp_var + (int)*new_node);\n          *new_node = (int *)temp_ptr1;\n        }\n        new_node[1] = (int *)temp_ptr2;\n        temp_ptr3[1] = (int *)new_node;\n      }\n    }\n  }\n  FUNC_08006eae(output,temp_ptr1,temp_ptr2,param4);\n  return;\n}\n\n",
            "current_name": "process_data_080061f0",
            "entrypoint": "0x080061f0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080061f0": "process_data_080061f0",
                "extraout_r1": "extra_output",
                "param_1": "output",
                "param_2": "size",
                "param_3": "param3",
                "param_4": "param4",
                "piVar3": "temp_var",
                "ppiVar1": "temp_ptr1",
                "ppiVar2": "temp_ptr2",
                "ppiVar4": "temp_ptr3",
                "ppiVar5": "new_node"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08006288": {
            "additional_data": {
                "DAT_200005f8": {
                    "1": "first_node",
                    "9": "first_block"
                },
                "DAT_200005fc": {
                    "1": "memory_init_flag",
                    "3": "initialized",
                    "5": "is_initialized"
                },
                "FUNC_08006920": {
                    "1": "get_memory_block"
                },
                "FUNC_08006eac": {
                    "1": "initialize_heap",
                    "2": "initialize_blocks",
                    "3": "initialize_memory"
                },
                "FUNC_08006eae": {
                    "1": "terminate_heap",
                    "2": "cleanup"
                },
                "FUN_08006288": {
                    "1": "allocate_mem",
                    "14": "allocate_memory",
                    "3": "allocate_and_initialize_memory",
                    "6": "allocate_memory_block"
                },
                "FUN_08006920": {
                    "1": "find_block",
                    "2": "allocate_block"
                },
                "LAB_080062ec": {
                    "1": "allocation_success"
                },
                "iVar2": {
                    "1": "block_size_diff",
                    "3": "difference",
                    "4": "block_size",
                    "6": "remaining_space",
                    "7": "offset"
                },
                "param_1": {
                    "1": "memory_ptr",
                    "2": "output_buffer",
                    "3": "output",
                    "6": "result"
                },
                "param_2": {
                    "1": "block_size",
                    "2": "required_size",
                    "21": "size",
                    "4": "requested_size"
                },
                "puVar1": {
                    "1": "current",
                    "2": "current_chunk",
                    "26": "current_block"
                },
                "puVar3": {
                    "1": "previous_chunk",
                    "19": "previous_block",
                    "2": "temp_block",
                    "3": "next_block"
                },
                "puVar5": {
                    "1": "previous_block_current",
                    "2": "previous",
                    "3": "last_block",
                    "4": "new_block",
                    "6": "previous_block"
                },
                "puVar6": {
                    "1": "aligned_block"
                },
                "uVar4": {
                    "1": "free_bytes",
                    "2": "block_size",
                    "3": "size_difference",
                    "4": "block_difference",
                    "7": "difference"
                },
                "uVar6": {
                    "1": "allocated_address",
                    "2": "aligned_size",
                    "20": "allocated_size",
                    "3": "new_block_size"
                }
            },
            "called": [
                "FUN_08006920",
                "FUN_08006eac",
                "FUN_08006eae"
            ],
            "calling": [
                "FUN_08006e10",
                "FUN_08006c88"
            ],
            "code": "\nuint allocate_memory_08006288(undefined4 *output_ptr,uint size)\n\n{\n  uint *current_block;\n  int offset;\n  uint *previous_block;\n  uint difference;\n  uint *previous_block;\n  uint allocated_size;\n  \n  allocated_size = (size + 3 & 0xfffffffc) + 8;\n  if (allocated_size < 0xc) {\n    allocated_size = 0xc;\n  }\n  if (((int)allocated_size < 0) || (allocated_size < size)) {\n    *output_ptr = 0xc;\n  }\n  else {\n    FUNC_08006eac();\n    current_block = DAT_200005f8;\n    previous_block = DAT_200005f8;\n    while (previous_block = current_block, previous_block != (uint *)0x0) {\n      difference = *previous_block - allocated_size;\n      if (-1 < (int)difference) {\n        if (difference < 0xc) {\n          if (previous_block == previous_block) {\n            current_block = (uint *)previous_block[1];\n            DAT_200005f8 = current_block;\n          }\n          else {\n            current_block = (uint *)previous_block[1];\n          }\n          if (previous_block != previous_block) {\n            previous_block[1] = (uint)current_block;\n            previous_block = previous_block;\n          }\n        }\n        else {\n          *previous_block = difference;\n          *(uint *)((int)previous_block + difference) = allocated_size;\n          previous_block = (uint *)((int)previous_block + difference);\n        }\n        goto allocation_success;\n      }\n      previous_block = previous_block;\n      current_block = (uint *)previous_block[1];\n    }\n    if (DAT_200005fc == 0) {\n      DAT_200005fc = FUN_08006920(output_ptr);\n    }\n    current_block = (uint *)FUN_08006920(output_ptr,allocated_size);\n    if ((current_block != (uint *)0xffffffff) &&\n       ((previous_block = (uint *)((int)current_block + 3U & 0xfffffffc), current_block == previous_block ||\n        (offset = FUN_08006920(output_ptr,(int)previous_block - (int)current_block), offset != -1)))) {\n      *previous_block = allocated_size;\nallocation_success:\n      FUNC_08006eae(output_ptr);\n      allocated_size = (int)previous_block + 0xbU & 0xfffffff8;\n      offset = allocated_size - (int)(previous_block + 1);\n      if (offset != 0) {\n        *(int *)((int)previous_block + offset) = -offset;\n        return allocated_size;\n      }\n      return allocated_size;\n    }\n    *output_ptr = 0xc;\n    FUNC_08006eae(output_ptr);\n  }\n  return 0;\n}\n\n",
            "current_name": "allocate_memory_08006288",
            "entrypoint": "0x08006288",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08006288": "allocate_memory_08006288",
                "LAB_080062ec": "allocation_success",
                "iVar2": "offset",
                "param_1": "output_ptr",
                "param_2": "size",
                "puVar1": "current_block",
                "puVar3": "previous_block",
                "puVar5": "previous_block",
                "uVar4": "difference",
                "uVar6": "allocated_size"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08006344": {
            "additional_data": {
                "DAT_080078e4": {
                    "1": "data_3",
                    "2": "dat_080078e4"
                },
                "DAT_08007904": {
                    "1": "data_1",
                    "2": "dat_08007904"
                },
                "DAT_08007924": {
                    "1": "data_2",
                    "2": "dat_08007924"
                },
                "FUNC_080069e4": {
                    "1": "process_subfunction3"
                },
                "FUNC_08006be0": {
                    "1": "process_subfunction1"
                },
                "FUNC_08006cb4": {
                    "1": "process_subfunction2"
                },
                "FUN_08006344": {
                    "1": "parse_and_update",
                    "19": "process_input",
                    "5": "process_byte"
                },
                "FUN_080069e4": {
                    "1": "process_compressed_data",
                    "2": "perform_operation",
                    "3": "process_data"
                },
                "FUN_08006be0": {
                    "1": "update_data",
                    "2": "process_helper"
                },
                "FUN_08006cb4": {
                    "1": "process_function2",
                    "2": "handle_error"
                },
                "F_080069e4": {
                    "1": "compute_result"
                },
                "F_08006be0": {
                    "1": "check_conditions"
                },
                "F_08006cb4": {
                    "1": "handle_null"
                },
                "iVar1": {
                    "1": "result_1",
                    "4": "index",
                    "7": "temp_var1",
                    "8": "temp_var"
                },
                "param_1": {
                    "1": "param",
                    "2": "data_ptr",
                    "5": "input_param",
                    "6": "input_data"
                },
                "param_2": {
                    "1": "byte_val",
                    "13": "byte_value",
                    "2": "byte_data",
                    "9": "input_byte"
                },
                "param_3": {
                    "1": "input_pointer",
                    "2": "input_ptr",
                    "3": "byte_array",
                    "4": "buffer"
                },
                "pbVar2": {
                    "1": "remaining_pointer",
                    "2": "last_element",
                    "3": "current_byte",
                    "6": "temp_var2"
                },
                "pbVar3": {
                    "1": "temp_byte",
                    "2": "ushort_value",
                    "3": "pb_var3",
                    "6": "temp_var3"
                },
                "uVar4": {
                    "1": "output",
                    "11": "return_value",
                    "15": "result"
                }
            },
            "called": [
                "FUN_08006be0",
                "FUN_08006cb4",
                "FUN_080069e4"
            ],
            "calling": [
                "FUN_08006370"
            ],
            "code": "\nuint process_input_08006344(int input_data,byte byte_value,byte **buffer)\n\n{\n  int temp_var;\n  byte *temp_var2;\n  byte *temp_var3;\n  uint result;\n  \n  temp_var2 = buffer[2] + -1;\n  buffer[2] = temp_var2;\n  if ((-1 < (int)temp_var2) ||\n     (((int)buffer[6] <= (int)temp_var2 && (temp_var2 = (byte *)(uint)byte_value, temp_var2 != (byte *)0xa))))\n  {\n    temp_var2 = *buffer;\n    *buffer = temp_var2 + 1;\n    *temp_var2 = byte_value;\n    return (uint)byte_value;\n  }\n  if ((input_data != 0) && (*(int *)(input_data + 0x18) == 0)) {\n    FUN_08006cb4();\n  }\n  if (buffer == (byte **)&DAT_08007904) {\n    buffer = *(byte ***)(input_data + 4);\n  }\n  else if (buffer == (byte **)&DAT_08007924) {\n    buffer = *(byte ***)(input_data + 8);\n  }\n  else if (buffer == (byte **)&DAT_080078e4) {\n    buffer = *(byte ***)(input_data + 0xc);\n  }\n  buffer[2] = buffer[6];\n  temp_var3 = (byte *)(uint)*(ushort *)(buffer + 3);\n  temp_var = (int)temp_var3 << 0x1c;\n  if (((temp_var < 0) && (temp_var3 = buffer[4], temp_var3 != (byte *)0x0)) ||\n     (temp_var = FUN_080069e4(input_data,buffer,temp_var,temp_var3,temp_var2), temp_var == 0)) {\n    result = (uint)byte_value;\n    temp_var = (int)*buffer - (int)buffer[4];\n    if ((temp_var < (int)buffer[5]) || (temp_var = FUN_08006be0(input_data,buffer), temp_var == 0)) {\n      buffer[2] = buffer[2] + -1;\n      temp_var2 = *buffer;\n      *buffer = temp_var2 + 1;\n      *temp_var2 = byte_value;\n      if ((byte *)(temp_var + 1) != buffer[5]) {\n        if (-1 < (int)((uint)*(ushort *)(buffer + 3) << 0x1f)) {\n          return result;\n        }\n        if (result != 10) {\n          return result;\n        }\n      }\n      temp_var = FUN_08006be0(input_data,buffer);\n      if (temp_var == 0) {\n        return result;\n      }\n    }\n  }\n  return 0xffffffff;\n}\n\n",
            "current_name": "process_input_08006344",
            "entrypoint": "0x08006344",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08006344": "process_input_08006344",
                "iVar1": "temp_var",
                "param_1": "input_data",
                "param_2": "byte_value",
                "param_3": "buffer",
                "pbVar2": "temp_var2",
                "pbVar3": "temp_var3",
                "uVar4": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08006370": {
            "additional_data": {
                "FUN_08006370": {
                    "1": "iterative_reverse",
                    "18": "process_data",
                    "2": "iterate_and_call_function",
                    "3": "process_bytes"
                },
                "iVar1": {
                    "1": "return_value",
                    "30": "result"
                },
                "iVar3": {
                    "1": "original_length",
                    "18": "current_index",
                    "3": "current_length"
                },
                "param_1": {
                    "1": "param1",
                    "2": "input_param",
                    "3": "input1",
                    "4": "arg1"
                },
                "param_2": {
                    "1": "value2",
                    "2": "input_param_2",
                    "3": "input_2",
                    "4": "arg2"
                },
                "param_3": {
                    "1": "input_data",
                    "2": "array",
                    "3": "data_array",
                    "6": "data_ptr",
                    "7": "byte_array",
                    "9": "data"
                },
                "param_4": {
                    "1": "str_length",
                    "2": "data_size",
                    "4": "data_length",
                    "7": "size",
                    "8": "length"
                },
                "puVar2": {
                    "1": "end_of_bytes",
                    "14": "end_ptr",
                    "2": "end",
                    "4": "end_pointer",
                    "5": "end_of_array"
                }
            },
            "called": [
                "FUN_08006344"
            ],
            "calling": [
                "FUN_08006394"
            ],
            "code": "\nint process_data_08006370(undefined4 arg1,undefined4 arg2,undefined *data,int length)\n\n{\n  int result;\n  undefined *end_ptr;\n  int current_index;\n  \n  end_ptr = data + length;\n  current_index = length;\n  do {\n    if (data == end_ptr) {\n      return 0;\n    }\n    result = FUN_08006344(arg1,*data,arg2,length,current_index);\n    length = result + 1;\n    data = data + 1;\n  } while (length != 0);\n  return result;\n}\n\n",
            "current_name": "process_data_08006370",
            "entrypoint": "0x08006370",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08006370": "process_data_08006370",
                "iVar1": "result",
                "iVar3": "current_index",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "data",
                "param_4": "length",
                "puVar2": "end_ptr"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08006394": {
            "additional_data": {
                "&DAT_08007904": {
                    "1": "default_config_ptr"
                },
                "0x18": {
                    "1": "config_offset"
                },
                "0x19": {
                    "1": "width_offset"
                },
                "0x1b": {
                    "1": "flag_space_plus_shift"
                },
                "0x1c": {
                    "1": "flag_hash_shift"
                },
                "0x2a": {
                    "1": "asterisk_char"
                },
                "0x3": {
                    "1": "precision_offset"
                },
                "0x4": {
                    "1": "default_config_offset"
                },
                "0x8": {
                    "1": "alternate_config_offset"
                },
                "0xc": {
                    "1": "short_config_offset"
                },
                "DAT_080078b6": {
                    "1": "double_chars"
                },
                "DAT_080078e4": {
                    "1": "short_config"
                },
                "DAT_08007904": {
                    "1": "default_config"
                },
                "DAT_08007924": {
                    "1": "alternate_config"
                },
                "FUN_08006370": {
                    "1": "handle_non_specifier_chars",
                    "2": "process_string"
                },
                "FUN_08006394": {
                    "1": "parse_and_process_string",
                    "2": "parse_string",
                    "8": "process_data"
                },
                "FUN_080066b0": {
                    "1": "process_conversion"
                },
                "FUN_080069e4": {
                    "1": "validate_input"
                },
                "FUN_08006cb4": {
                    "1": "initialize_default_config"
                },
                "FUN_08006e90": {
                    "1": "match_character"
                },
                "F_UNPACK": {
                    "1": "unpack_data"
                },
                "bVar3": {
                    "1": "is_true",
                    "2": "bool_var",
                    "3": "found_digit",
                    "4": "is_number",
                    "5": "is_digit"
                },
                "efgEFG": {
                    "1": "float_chars"
                },
                "iVar1": {
                    "1": "result_code",
                    "23": "result",
                    "3": "return_value"
                },
                "iVar6": {
                    "1": "parse_loop_var",
                    "2": "counter",
                    "3": "count",
                    "8": "temp_var"
                },
                "local_30": {
                    "1": "alignment_flag",
                    "2": "asterisk_flag",
                    "3": "zero_flag"
                },
                "local_45": {
                    "1": "third_char_option",
                    "2": "zero_flag"
                },
                "local_6e": {
                    "1": "zero_flag",
                    "14": "plus_flag"
                },
                "local_6f": {
                    "1": "width_flag",
                    "14": "space_flag"
                },
                "local_70": {
                    "1": "modifier",
                    "2": "format_char",
                    "3": "specifier",
                    "7": "conversion_specifier"
                },
                "local_74": {
                    "1": "length",
                    "11": "total_length",
                    "2": "total",
                    "3": "output_length",
                    "4": "total_size"
                },
                "local_7c": {
                    "1": "flag2",
                    "5": "field_width",
                    "9": "width"
                },
                "local_80": {
                    "1": "local_var_3",
                    "2": "unused",
                    "4": "precision"
                },
                "local_84": {
                    "1": "decimal_point",
                    "11": "precision",
                    "5": "width"
                },
                "local_88": {
                    "1": "modifiers",
                    "2": "flag_bits",
                    "20": "flags",
                    "3": "options"
                },
                "local_8c": {
                    "1": "param_value_stack",
                    "2": "temp_array",
                    "3": "local_ptr",
                    "4": "result_ptr"
                },
                "param_1": {
                    "1": "param1",
                    "2": "format_string",
                    "3": "input_param",
                    "5": "input"
                },
                "param_2": {
                    "1": "arg_pointer",
                    "2": "config_ptr",
                    "3": "format_specifier"
                },
                "param_3": {
                    "1": "output_buffer",
                    "2": "output_string",
                    "3": "format_string",
                    "4": "string",
                    "7": "input_string"
                },
                "param_4": {
                    "1": "arg4",
                    "2": "output_param",
                    "3": "result",
                    "4": "output"
                },
                "param_6": {
                    "1": "input_string_length"
                },
                "param_7": {
                    "1": "parsed_string_size"
                },
                "pbVar4": {
                    "1": "ptr",
                    "2": "ptr1",
                    "3": "current_byte",
                    "6": "current_char"
                },
                "pbVar5": {
                    "1": "string_ptr",
                    "2": "next_byte_ptr",
                    "3": "ptr2",
                    "4": "next_byte",
                    "6": "next_char"
                },
                "piVar2": {
                    "1": "temp_pointer",
                    "2": "pointer_var",
                    "3": "ptr_var",
                    "4": "temp_ptr",
                    "6": "ptr"
                },
                "unaff_r9": {
                    "1": "result",
                    "2": "return_value",
                    "3": "temp",
                    "5": "unaff_r9"
                }
            },
            "called": [
                "FUN_080066b0",
                "FUN_08006cb4",
                "FUN_08006e90",
                "FUN_080069e4",
                "FUN_08006370"
            ],
            "calling": [
                "FUN_08006174",
                "FUN_080068f0"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08006568) */\n\nint process_data_08006394(int input,undefined4 *format_specifier,byte *input_string,int *output)\n\n{\n  int result;\n  int *ptr;\n  bool flag;\n  byte *current_char;\n  byte *next_char;\n  int unaff_r9;\n  int temp_var;\n  int *output_ptr;\n  uint flags;\n  int precision;\n  undefined4 precision;\n  int width;\n  int total_length;\n  byte conversion_specifier;\n  undefined space_flag;\n  undefined plus_flag;\n  undefined hash_flag;\n  undefined4 zero_flag;\n  \n  output_ptr = output;\n  if ((input != 0) && (*(int *)(input + 0x18) == 0)) {\n    FUN_08006cb4();\n  }\n  if (format_specifier == &DAT_08007904) {\n    format_specifier = *(undefined4 **)(input + 4);\n  }\n  else if (format_specifier == (undefined4 *)&DAT_08007924) {\n    format_specifier = *(undefined4 **)(input + 8);\n  }\n  else if (format_specifier == (undefined4 *)&DAT_080078e4) {\n    format_specifier = *(undefined4 **)(input + 0xc);\n  }\n  if (((-1 < (int)((uint)*(ushort *)(format_specifier + 3) << 0x1c)) || (format_specifier[4] == 0)) &&\n     (temp_var = FUN_080069e4(input,format_specifier), temp_var != 0)) {\n    return -1;\n  }\n  total_length = 0;\n  space_flag = 0x20;\n  plus_flag = 0x30;\n  current_char = input_string;\nLAB_080063d6:\n  next_char = current_char;\n  if (*next_char != 0) goto LAB_0800648c;\n  goto LAB_080063e0;\nLAB_0800648c:\n  current_char = next_char + 1;\n  if (*next_char != 0x25) goto LAB_080063d6;\nLAB_080063e0:\n  temp_var = (int)next_char - (int)input_string;\n  if (temp_var != 0) {\n    result = FUN_08006370(input,format_specifier,input_string,temp_var);\n    if (result == -1) {\nLAB_08006580:\n      if ((int)((uint)*(ushort *)(format_specifier + 3) << 0x19) < 0) {\n        return -1;\n      }\n      return total_length;\n    }\n    total_length = total_length + temp_var;\n  }\n  if (*next_char == 0) goto LAB_08006580;\n  flags = 0;\n  width = 0;\n  precision = -1;\n  precision = 0;\n  hash_flag = 0;\n  zero_flag = 0;\n  current_char = next_char + 1;\n  while( true ) {\n    temp_var = FUN_08006e90(\"#-0+ \",*current_char);\n    input_string = current_char + 1;\n    if (temp_var == 0) break;\n    flags = 1 << (temp_var + 0xf7ff8750U & 0xff) | flags;\n    current_char = input_string;\n  }\n  if ((int)(flags << 0x1b) < 0) {\n    hash_flag = 0x20;\n  }\n  if ((int)(flags << 0x1c) < 0) {\n    hash_flag = 0x2b;\n  }\n  if (*current_char == 0x2a) {\n    ptr = output_ptr + 1;\n    temp_var = *output_ptr;\n    output_ptr = ptr;\n    if (temp_var < 0) {\n      width = -temp_var;\n      flags = flags | 2;\n      goto LAB_080064be;\n    }\n  }\n  else {\n    flag = false;\n    temp_var = width;\n    input_string = current_char;\n    while( true ) {\n      if (9 < *input_string - 0x30) break;\n      temp_var = temp_var * 10 + (*input_string - 0x30);\n      flag = true;\n      input_string = input_string + 1;\n    }\n    if (!flag) goto LAB_080064be;\n  }\n  width = temp_var;\nLAB_080064be:\n  if (*input_string == 0x2e) {\n    if (input_string[1] == 0x2a) {\n      input_string = input_string + 2;\n      ptr = output_ptr + 1;\n      precision = *output_ptr;\n      output_ptr = ptr;\n      if (precision < 0) {\n        precision = -1;\n      }\n    }\n    else {\n      flag = false;\n      temp_var = 0;\n      precision = 0;\n      while( true ) {\n        input_string = input_string + 1;\n        if (9 < *input_string - 0x30) break;\n        temp_var = temp_var * 10 + (*input_string - 0x30);\n        flag = true;\n      }\n      if (flag) {\n        precision = temp_var;\n      }\n    }\n  }\n  temp_var = FUN_08006e90(&DAT_080078b6,*input_string,3);\n  if (temp_var != 0) {\n    input_string = input_string + 1;\n    flags = flags | 0x40 << (temp_var + 0xf7ff874aU & 0xff);\n  }\n  conversion_specifier = *input_string;\n  input_string = input_string + 1;\n  temp_var = FUN_08006e90(\"float_chars\",conversion_specifier,6);\n  if (temp_var == 0) {\n    unaff_r9 = FUN_080066b0(input,&flags,format_specifier,0x8006371,&output_ptr);\n    if (unaff_r9 == -1) goto LAB_08006580;\n  }\n  else {\n    output_ptr = (int *)(((int)output_ptr + 7U & 0xfffffff8) + 8);\n  }\n  total_length = total_length + unaff_r9;\n  current_char = input_string;\n  goto LAB_080063d6;\n}\n\n",
            "current_name": "process_data_08006394",
            "entrypoint": "0x08006394",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08006394": "process_data_08006394",
                "bVar3": "flag",
                "efgEFG": "float_chars",
                "iVar1": "result",
                "iVar6": "temp_var",
                "local_30": "zero_flag",
                "local_45": "hash_flag",
                "local_6e": "plus_flag",
                "local_6f": "space_flag",
                "local_70": "conversion_specifier",
                "local_74": "total_length",
                "local_7c": "width",
                "local_80": "precision",
                "local_84": "precision",
                "local_88": "flags",
                "local_8c": "output_ptr",
                "param_1": "input",
                "param_2": "format_specifier",
                "param_3": "input_string",
                "param_4": "output",
                "pbVar4": "current_char",
                "pbVar5": "next_char",
                "piVar2": "ptr"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080065c0": {
            "additional_data": {
                "(*param_2 & 6)": {
                    "1": "bitwise_operation"
                },
                "(int)(*param_2 & 6) != 4": {
                    "1": "is_bitwise_operation_not_four"
                },
                "(int)(*param_2 << 0x1a)": {
                    "1": "shifted_value"
                },
                "(int)(param_2[3] - *param_3)": {
                    "1": "loop_size"
                },
                "(int)*param_2 << 0x1a": {
                    "1": "shift_operation"
                },
                "(int)param_2[4] < (int)param_2[2]": {
                    "1": "is_size_less_than_max"
                },
                "(int)uVar3 >> 0x1f)": {
                    "1": "sign_bit"
                },
                "(uint)*(byte *)((int)param_2 + 0x43)": {
                    "1": "byte_value"
                },
                "*(byte *)((int)param_2 + 0x43)": {
                    "1": "byte_flag"
                },
                "*(char *)((int)param_2 + 0x43)": {
                    "1": "is_flag_set",
                    "2": "flag"
                },
                "*(undefined *)((int)param_2 + 0x43)": {
                    "1": "flag1"
                },
                "*(undefined *)((int)param_2 + uVar3 + 0x43)": {
                    "1": "flag3"
                },
                "*(undefined *)((int)param_2 + uVar3 + 0x44)": {
                    "1": "char2"
                },
                "FUN_080065c0": {
                    "1": "parse_input_data",
                    "16": "process_data",
                    "2": "decode_and_process_data"
                },
                "bVar5": {
                    "1": "is_true",
                    "2": "check",
                    "3": "flag",
                    "4": "is_condition_met",
                    "6": "is_flag_set"
                },
                "iVar1": {
                    "1": "iterator_1",
                    "11": "index",
                    "2": "count",
                    "3": "result",
                    "4": "i"
                },
                "iVar2": {
                    "1": "loop_variable_2",
                    "14": "result",
                    "3": "j",
                    "6": "callback_result"
                },
                "param_1": {
                    "1": "input_value1",
                    "11": "input",
                    "2": "input_param",
                    "4": "input_data",
                    "6": "data"
                },
                "param_2": {
                    "1": "arg2",
                    "2": "info",
                    "5": "header",
                    "9": "data"
                },
                "param_2[2] - param_2[4]": {
                    "1": "size_difference"
                },
                "param_3": {
                    "1": "arg3",
                    "2": "size",
                    "3": "result",
                    "5": "output",
                    "7": "output_size"
                },
                "param_4": {
                    "1": "offset_param",
                    "4": "additional_param",
                    "7": "param_4",
                    "9": "param"
                },
                "param_5": {
                    "1": "process_function",
                    "19": "callback",
                    "4": "callback_func",
                    "6": "callback_function"
                },
                "uVar3": {
                    "1": "max_output_size",
                    "2": "min_size",
                    "3": "max_length",
                    "8": "max_value",
                    "9": "max_size"
                },
                "uVar3 = param_2[3]": {
                    "1": "total_size"
                },
                "uVar4": {
                    "1": "temp_length",
                    "10": "offset",
                    "2": "counter"
                },
                "uVar4 = uVar3 + 2;*(undefined *)((int)param_2 + uVar3 + 0x44)": {
                    "1": "flag2"
                }
            },
            "called": [],
            "calling": [
                "FUN_080066b0"
            ],
            "code": "\nundefined4\nprocess_data_080065c0(undefined4 input,uint *data,uint *output_size,undefined4 param,code *callback)\n\n{\n  int index;\n  int result;\n  uint max_size;\n  uint offset;\n  bool is_flag_set;\n  \n  max_size = data[4];\n  if ((int)data[4] < (int)data[2]) {\n    max_size = data[2];\n  }\n  *output_size = max_size;\n  if (*(char *)((int)data + 0x43) != '\\0') {\n    *output_size = max_size + 1;\n  }\n  if ((int)(*data << 0x1a) < 0) {\n    *output_size = *output_size + 2;\n  }\n  if ((*data & 6) == 0) {\n    for (index = 0; index < (int)(data[3] - *output_size); index = index + 1) {\n      result = (*callback)(input,param,(int)data + 0x19,1);\n      if (result == -1) {\n        return 0xffffffff;\n      }\n    }\n  }\n  max_size = (uint)*(byte *)((int)data + 0x43);\n  if (max_size != 0) {\n    max_size = 1;\n  }\n  offset = max_size;\n  if ((int)(*data << 0x1a) < 0) {\n    *(undefined *)((int)data + max_size + 0x43) = 0x30;\n    offset = max_size + 2;\n    *(undefined *)((int)data + max_size + 0x44) = *(undefined *)((int)data + 0x45);\n  }\n  index = (*callback)(input,param,(int)data + 0x43,offset);\n  if (index != -1) {\n    max_size = data[3];\n    is_flag_set = (*data & 6) != 4;\n    if (is_flag_set) {\n      max_size = 0;\n    }\n    offset = 0;\n    if (!is_flag_set) {\n      max_size = max_size - *output_size;\n    }\n    if (!is_flag_set) {\n      max_size = max_size & ~((int)max_size >> 0x1f);\n    }\n    if ((int)data[4] < (int)data[2]) {\n      max_size = max_size + (data[2] - data[4]);\n    }\n    while( true ) {\n      if (max_size == offset) {\n        return 0;\n      }\n      index = (*callback)(input,param,(int)data + 0x1a,1);\n      if (index == -1) break;\n      offset = offset + 1;\n    }\n  }\n  return 0xffffffff;\n}\n\n",
            "current_name": "process_data_080065c0",
            "entrypoint": "0x080065c0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080065c0": "process_data_080065c0",
                "bVar5": "is_flag_set",
                "iVar1": "index",
                "iVar2": "result",
                "param_1": "input",
                "param_2": "data",
                "param_3": "output_size",
                "param_4": "param",
                "param_5": "callback",
                "uVar3": "max_size",
                "uVar4": "offset"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080066b0": {
            "additional_data": {
                "FUN_080066b0": {
                    "1": "parse_input_data",
                    "3": "parse_input",
                    "4": "decode_and_process_data"
                },
                "bVar1": {
                    "1": "flag",
                    "18": "byte_value",
                    "3": "byte_var",
                    "4": "first_byte",
                    "5": "byte_val"
                },
                "iVar2": {
                    "1": "result_var",
                    "13": "index",
                    "2": "temp_int1",
                    "3": "int_var",
                    "4": "counter"
                },
                "iVar4": {
                    "1": "iter_var",
                    "2": "inner_index",
                    "3": "result",
                    "5": "int_var2"
                },
                "local_24": {
                    "1": "buffer",
                    "2": "temp_arr",
                    "20": "local_array",
                    "3": "local_arr"
                },
                "param_1": {
                    "1": "input_data",
                    "12": "param1",
                    "2": "input_param",
                    "3": "arg1",
                    "6": "input1"
                },
                "param_2": {
                    "1": "input_arr",
                    "2": "buffer",
                    "3": "data_ptr",
                    "4": "input_data",
                    "5": "input_array"
                },
                "param_3": {
                    "1": "value_2",
                    "12": "param3",
                    "3": "arg3",
                    "4": "param_3",
                    "5": "input3"
                },
                "param_4": {
                    "1": "function",
                    "2": "function_ptr",
                    "3": "input4",
                    "4": "param4",
                    "5": "callback",
                    "7": "callback_function"
                },
                "param_5": {
                    "1": "array_param",
                    "3": "output_data",
                    "5": "param5"
                },
                "pcVar11": {
                    "1": "output_str",
                    "2": "output_ptr",
                    "3": "char_ptr_2",
                    "5": "char_ptr2"
                },
                "pcVar12": {
                    "1": "result_end",
                    "2": "char_ptr2",
                    "3": "char_ptr_3",
                    "4": "char_ptr3"
                },
                "pcVar5": {
                    "1": "temp_string1",
                    "2": "char_ptr1",
                    "3": "hex_characters",
                    "4": "hex_chars",
                    "5": "hex_digits",
                    "8": "char_ptr"
                },
                "ppcVar8": {
                    "1": "pointer_pointer_char_var",
                    "5": "char_ptr_ptr"
                },
                "ppuVar7": {
                    "1": "double_ptr",
                    "3": "ptr_ptr"
                },
                "puVar3": {
                    "1": "ptr_var1",
                    "12": "ptr",
                    "2": "ptr_var",
                    "3": "ptr_value"
                },
                "uVar10": {
                    "1": "unsigned_var_3",
                    "2": "length",
                    "3": "temp",
                    "4": "uint_var3",
                    "5": "temp_value"
                },
                "uVar6": {
                    "1": "unsigned_var",
                    "2": "temp",
                    "3": "value",
                    "5": "base"
                },
                "uVar9": {
                    "1": "unsigned_value",
                    "2": "var9",
                    "3": "value",
                    "4": "uint_var2",
                    "9": "result"
                }
            },
            "called": [
                "FUN_080065c0",
                "FUN_08006e90"
            ],
            "calling": [
                "FUN_08006394"
            ],
            "code": "\nuint decode_and_process_data_080066b0(undefined4 param1,uint *input_array,undefined4 param3,code *callback_function,uint **output)\n\n{\n  byte byte_value;\n  int index;\n  uint *ptr;\n  int int_var2;\n  char *char_ptr;\n  uint base;\n  uint **ptr_ptr;\n  char **char_ptr_ptr;\n  uint result;\n  uint temp_value;\n  char *char_ptr2;\n  char *char_ptr3;\n  uint local_array [2];\n  \n  byte_value = *(byte *)(input_array + 6);\n  char_ptr3 = (char *)((int)input_array + 0x43);\n  if (byte_value != 0x6e) {\n    if (byte_value < 0x6f) {\n      if (byte_value != 99) {\n        if (byte_value < 100) {\n          if (byte_value == 0) goto LAB_0800686a;\n          if (byte_value != 0x58) goto LAB_080066e0;\n          *(undefined *)((int)input_array + 0x45) = 0x58;\n          char_ptr = \"0123456789ABCDEF\";\nLAB_080067fa:\n          base = *input_array;\n          ptr = *output;\n          *output = ptr + 1;\n          if (((base & 0x80) == 0) && ((int)(base << 0x19) < 0)) {\n            result = (uint)*(ushort *)ptr;\n          }\n          else {\n            result = *ptr;\n          }\n          if ((int)(base << 0x1f) < 0) {\n            *input_array = base | 0x20;\n          }\n          if (result == 0) {\n            *input_array = *input_array & 0xffffffdf;\n          }\n          base = 0x10;\nLAB_08006790:\n          *(undefined *)((int)input_array + 0x43) = 0;\n        }\n        else {\n          if ((byte_value != 100) && (byte_value != 0x69)) goto LAB_080066e0;\n          result = *input_array;\n          ptr = *output;\n          if ((result & 0x80) == 0) {\n            *output = ptr + 1;\n            if ((result & 0x40) == 0) goto LAB_08006700;\n            result = (uint)(short)*(ushort *)ptr;\n          }\n          else {\n            *output = ptr + 1;\nLAB_08006700:\n            result = *ptr;\n          }\n          if ((int)result < 0) {\n            result = -result;\n            *(undefined *)((int)input_array + 0x43) = 0x2d;\n          }\n          char_ptr = \"0123456789ABCDEF\";\n          base = 10;\n        }\n        temp_value = input_array[1];\n        input_array[2] = temp_value;\n        char_ptr2 = char_ptr3;\n        if ((int)temp_value < 0) {\n          if (result != 0) goto LAB_0800682e;\nLAB_080068dc:\n          *(char *)((int)input_array + 0x42) = *char_ptr;\n          char_ptr2 = (char *)((int)input_array + 0x42);\n        }\n        else {\n          *input_array = *input_array & 0xfffffffb;\n          if (result == 0) {\n            if (temp_value != 0) goto LAB_080068dc;\n          }\n          else {\nLAB_0800682e:\n            do {\n              temp_value = result / base;\n              char_ptr2 = char_ptr2 + -1;\n              *char_ptr2 = char_ptr[result - base * temp_value];\n              result = temp_value;\n            } while (temp_value != 0);\n          }\n        }\n        if (((base == 8) && ((int)(*input_array << 0x1f) < 0)) && ((int)input_array[1] <= (int)input_array[4]))\n        {\n          char_ptr2[-1] = '0';\n          char_ptr2 = char_ptr2 + -1;\n        }\n        input_array[4] = (int)char_ptr3 - (int)char_ptr2;\n        char_ptr3 = char_ptr2;\n        goto LAB_080067d6;\n      }\n      ptr = *output;\n      *output = ptr + 1;\n      *(char *)((int)input_array + 0x42) = (char)*ptr;\nLAB_08006740:\n      char_ptr3 = (char *)((int)input_array + 0x42);\n      result = 1;\n    }\n    else {\n      if (byte_value != 0x73) {\n        if (byte_value < 0x74) {\n          if (byte_value == 0x6f) {\nLAB_08006766:\n            result = *input_array;\n            ptr = *output;\n            if ((result & 0x80) == 0) {\n              *output = ptr + 1;\n              if ((result & 0x40) == 0) goto LAB_08006774;\n              result = (uint)*(ushort *)ptr;\n            }\n            else {\n              *output = ptr + 1;\nLAB_08006774:\n              result = *ptr;\n            }\n            if (byte_value == 0x6f) {\n              base = 8;\n            }\n            else {\n              base = 10;\n            }\n            char_ptr = \"0123456789ABCDEF\";\n            goto LAB_08006790;\n          }\n          if (byte_value == 0x70) {\n            *input_array = *input_array | 0x20;\nLAB_08006726:\n            char_ptr = \"0123456789abcdef\";\n            *(undefined *)((int)input_array + 0x45) = 0x78;\n            goto LAB_080067fa;\n          }\n        }\n        else {\n          if (byte_value == 0x75) goto LAB_08006766;\n          if (byte_value == 0x78) goto LAB_08006726;\n        }\nLAB_080066e0:\n        *(byte *)((int)input_array + 0x42) = byte_value;\n        goto LAB_08006740;\n      }\n      char_ptr_ptr = (char **)*output;\n      *output = (uint *)(char_ptr_ptr + 1);\n      char_ptr3 = *char_ptr_ptr;\n      index = FUN_08006e90(char_ptr3,0,input_array[1]);\n      if (index != 0) {\n        input_array[1] = index - (int)char_ptr3;\n      }\n      result = input_array[1];\n    }\n    input_array[4] = result;\n    *(undefined *)((int)input_array + 0x43) = 0;\n    goto LAB_080067d6;\n  }\n  result = *input_array;\n  ptr_ptr = (uint **)*output;\n  base = input_array[5];\n  if ((result & 0x80) == 0) {\n    *output = (uint *)(ptr_ptr + 1);\n    ptr = *ptr_ptr;\n    if ((result & 0x40) == 0) goto LAB_08006856;\n    *(short *)ptr = (short)base;\n  }\n  else {\n    *output = (uint *)(ptr_ptr + 1);\n    ptr = *ptr_ptr;\nLAB_08006856:\n    *ptr = base;\n  }\nLAB_0800686a:\n  input_array[4] = 0;\nLAB_080067d6:\n  index = FUN_080065c0(param1,input_array,local_array,param3,callback_function);\n  if ((index == -1) || (index = (*callback_function)(param1,param3,char_ptr3,input_array[4]), index == -1)) {\nLAB_080067ea:\n    result = 0xffffffff;\n  }\n  else {\n    if ((int)(*input_array << 0x1e) < 0) {\n      for (index = 0; index < (int)(input_array[3] - local_array[0]); index = index + 1) {\n        int_var2 = (*callback_function)(param1,param3,(int)input_array + 0x19,1);\n        if (int_var2 == -1) goto LAB_080067ea;\n      }\n    }\n    result = input_array[3];\n    if ((int)input_array[3] < (int)local_array[0]) {\n      result = local_array[0];\n    }\n  }\n  return result;\n}\n\n",
            "current_name": "decode_and_process_data_080066b0",
            "entrypoint": "0x080066b0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080066b0": "decode_and_process_data_080066b0",
                "bVar1": "byte_value",
                "iVar2": "index",
                "iVar4": "int_var2",
                "local_24": "local_array",
                "param_1": "param1",
                "param_2": "input_array",
                "param_3": "param3",
                "param_4": "callback_function",
                "param_5": "output",
                "pcVar11": "char_ptr2",
                "pcVar12": "char_ptr3",
                "pcVar5": "char_ptr",
                "ppcVar8": "char_ptr_ptr",
                "ppuVar7": "ptr_ptr",
                "puVar3": "ptr",
                "uVar10": "temp_value",
                "uVar6": "base",
                "uVar9": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080068f0": {
            "additional_data": {
                "FUN_080068f0": {
                    "1": "execute_process",
                    "12": "execute_function",
                    "2": "initialize_function",
                    "5": "process_data"
                },
                "iVar1": {
                    "1": "variable1",
                    "6": "data_ptr",
                    "7": "data_address",
                    "9": "data_pointer"
                },
                "param_1": {
                    "1": "input_param",
                    "2": "input_param_1",
                    "3": "data1",
                    "6": "arg1",
                    "7": "input1"
                },
                "param_2": {
                    "1": "value2",
                    "2": "input_param_2",
                    "3": "data2",
                    "6": "arg2",
                    "7": "input2"
                },
                "param_3": {
                    "1": "third_param",
                    "2": "input_param_3",
                    "3": "data3",
                    "6": "arg3",
                    "7": "input3"
                },
                "param_4": {
                    "1": "option3",
                    "2": "input_param_4",
                    "3": "data4",
                    "6": "arg4",
                    "7": "input4"
                },
                "uStack_4": {
                    "1": "stack_variable_4",
                    "2": "temp_var4",
                    "3": "param4_copy",
                    "4": "arg4_copy"
                },
                "uStack_8": {
                    "1": "input_param_3_copy",
                    "2": "input3_copy",
                    "3": "stack_var2",
                    "4": "arg3_copy"
                },
                "uStack_c": {
                    "1": "saved_input2",
                    "2": "temp_var2",
                    "3": "stack_var1",
                    "4": "arg2_copy"
                },
                "uVar2": {
                    "1": "variable2",
                    "2": "temp_var1",
                    "5": "arg1_copy",
                    "7": "param1_copy"
                }
            },
            "called": [
                "FUN_08006cb4",
                "FUN_08006394"
            ],
            "calling": [
                "FUN_08004f4c"
            ],
            "code": "\nvoid execute_function_080068f0(undefined4 input1,undefined4 input2,undefined4 input3,undefined4 input4)\n\n{\n  int data_pointer;\n  undefined4 param1_copy;\n  undefined4 arg2_copy;\n  undefined4 arg3_copy;\n  undefined4 arg4_copy;\n  \n  data_pointer = DAT_200000f8;\n  param1_copy = input1;\n  arg2_copy = input2;\n  arg3_copy = input3;\n  arg4_copy = input4;\n  if ((DAT_200000f8 != 0) && (*(int *)(DAT_200000f8 + 0x18) == 0)) {\n    FUN_08006cb4(DAT_200000f8);\n  }\n  FUN_08006394(data_pointer,*(undefined4 *)(data_pointer + 8),input1,&arg2_copy,param1_copy,&arg2_copy);\n  return;\n}\n\n",
            "current_name": "execute_function_080068f0",
            "entrypoint": "0x080068f0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080068f0": "execute_function_080068f0",
                "iVar1": "data_pointer",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uStack_4": "arg4_copy",
                "uStack_8": "arg3_copy",
                "uStack_c": "arg2_copy",
                "uVar2": "param1_copy"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08006920": {
            "additional_data": {
                "DAT_200006a4": {
                    "1": "extracted_data"
                },
                "FUN_080056d8": {
                    "1": "get_updated_value"
                },
                "FUN_08006920": {
                    "1": "copy_value_if_error",
                    "2": "update_param_if_negative",
                    "3": "check_and_update_value",
                    "4": "extract_data"
                },
                "iVar1": {
                    "1": "result_code",
                    "15": "result",
                    "2": "status",
                    "8": "return_value"
                },
                "param_1": {
                    "1": "param",
                    "2": "output_data",
                    "3": "output_value",
                    "7": "result",
                    "8": "output"
                },
                "param_2": {
                    "1": "value",
                    "11": "input",
                    "12": "input_value",
                    "3": "input_param"
                }
            },
            "called": [
                "FUN_080056d8"
            ],
            "calling": [
                "FUN_08006288"
            ],
            "code": "\nvoid process_data_08006920(int *output,undefined4 input_value)\n\n{\n  int result;\n  \n  DAT_200006a4 = 0;\n  result = FUN_080056d8(input_value);\n  if ((result == -1) && (DAT_200006a4 != 0)) {\n    *output = DAT_200006a4;\n  }\n  return;\n}\n\n",
            "current_name": "process_data_08006920",
            "entrypoint": "0x08006920",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08006920": "process_data_08006920",
                "iVar1": "result",
                "param_1": "output",
                "param_2": "input_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080069e4": {
            "additional_data": {
                "&(iVar1 + 0xc)": {
                    "1": "ptr3"
                },
                "&(iVar1 + 4)": {
                    "1": "ptr1"
                },
                "&(iVar1 + 8)": {
                    "1": "ptr2"
                },
                "&DAT_080078e4": {
                    "1": "constant_pointer3"
                },
                "&DAT_08007904": {
                    "1": "constant_pointer1",
                    "2": "value1"
                },
                "&DAT_08007924": {
                    "1": "constant_pointer2"
                },
                "&DAT_200000f8": {
                    "1": "dat_value"
                },
                "(int)(short)uVar3 & 0x80": {
                    "1": "check_flag2"
                },
                "(int)(uVar2 << 0x1b)": {
                    "1": "check2"
                },
                "(int)(uVar2 << 0x1c)": {
                    "1": "check1"
                },
                "(int)(uVar2 << 0x1d)": {
                    "1": "check3"
                },
                "(undefined4 *)&DAT_080078e4": {
                    "1": "constant_3",
                    "2": "value3"
                },
                "(undefined4 *)&DAT_08007924": {
                    "1": "constant_ptr_2",
                    "2": "value2"
                },
                "(undefined4 *)param_2[0xd]": {
                    "1": "ptr_check"
                },
                "(ushort *)(param_2 + 3) & 0x280": {
                    "1": "clear_flag2"
                },
                "*(int *)(DAT_200000f8 + 0x18)": {
                    "1": "check_value"
                },
                "*(undefined4 **)(iVar1 + 0xc)": {
                    "1": "data_ptr_3"
                },
                "*(undefined4 **)(iVar1 + 4)": {
                    "1": "data_ptr_1"
                },
                "*(undefined4 **)(iVar1 + 8)": {
                    "1": "data_ptr_2"
                },
                "*(ushort *)(param_2 + 3)": {
                    "1": "flags"
                },
                "*(ushort *)(param_2 + 3) & 0x80": {
                    "1": "check_flag"
                },
                "*(ushort *)(param_2 + 3) & 0xffdb": {
                    "1": "clear_flag1"
                },
                "*(ushort *)(param_2 + 3) | 0x40": {
                    "1": "set_flag2"
                },
                "*(ushort *)(param_2 + 3) | 8": {
                    "1": "set_flag1"
                },
                "DAT_200000f8": {
                    "1": "data_mem"
                },
                "FNV_200000f8": {
                    "1": "data_ptr"
                },
                "FUM_08006e10": {
                    "1": "perform_action"
                },
                "FUN_080061f0": {
                    "1": "perform_operation",
                    "2": "validate_data"
                },
                "FUN_080069e4": {
                    "1": "perform_operation",
                    "11": "process_data",
                    "6": "update_data"
                },
                "FUN_08006cb4": {
                    "1": "check_and_initialize_data",
                    "2": "cleanup",
                    "3": "cleanup_data"
                },
                "FUN_08006e10": {
                    "1": "process_sub_function1",
                    "2": "perform_operation"
                },
                "FVAR1": {
                    "1": "data_address"
                },
                "LAB_08006a14": {
                    "1": "end_label"
                },
                "iVar1": {
                    "1": "data_source",
                    "2": "global_var",
                    "3": "data_offset",
                    "5": "data_pointer",
                    "7": "data_ptr"
                },
                "param_1": {
                    "1": "data_pointer1",
                    "2": "output_status",
                    "3": "result",
                    "6": "output",
                    "8": "output_param"
                },
                "param_1 + 0xd": {
                    "1": "pointer_check"
                },
                "param_1[2]": {
                    "1": "data_value_1"
                },
                "param_1[6]": {
                    "1": "data_value_2"
                },
                "param_2": {
                    "1": "data_pointer2",
                    "2": "data_ptr",
                    "3": "input_ptr",
                    "4": "input_data",
                    "6": "input",
                    "9": "input_param"
                },
                "param_2 + 0x11": {
                    "1": "pointer_comparison"
                },
                "param_2[0xd]": {
                    "1": "pointer_check"
                },
                "param_2[1]": {
                    "1": "data"
                },
                "param_2[2]": {
                    "1": "new_value1"
                },
                "param_2[4]": {
                    "1": "value_check"
                },
                "param_2[5]": {
                    "1": "value1"
                },
                "param_2[6]": {
                    "1": "new_value2"
                },
                "uVar2": {
                    "1": "processed_value",
                    "2": "value",
                    "22": "result",
                    "3": "return_value"
                },
                "uVar3": {
                    "1": "temp_val",
                    "12": "flags",
                    "2": "data_value",
                    "3": "temp_value",
                    "6": "value"
                }
            },
            "called": [
                "FUN_08006e10",
                "FUN_08006cb4",
                "FUN_080061f0"
            ],
            "calling": [
                "FUN_08006344",
                "FUN_08006394"
            ],
            "code": "\nuint process_data_080069e4(undefined4 *output_param,undefined4 *input_param)\n\n{\n  int data_ptr;\n  uint result;\n  ushort flags;\n  \n  data_ptr = DAT_200000f8;\n  if ((DAT_200000f8 != 0) && (*(int *)(DAT_200000f8 + 0x18) == 0)) {\n    FUN_08006cb4(DAT_200000f8);\n  }\n  if (input_param == &DAT_08007904) {\n    input_param = *(undefined4 **)(data_ptr + 4);\n  }\n  else if (input_param == (undefined4 *)&DAT_08007924) {\n    input_param = *(undefined4 **)(data_ptr + 8);\n  }\n  else if (input_param == (undefined4 *)&DAT_080078e4) {\n    input_param = *(undefined4 **)(data_ptr + 0xc);\n  }\n  flags = *(ushort *)(input_param + 3);\n  result = (uint)flags;\n  if (-1 < (int)(result << 0x1c)) {\n    if (-1 < (int)(result << 0x1b)) {\n      *output_param = 9;\n      goto end_label;\n    }\n    if ((int)(result << 0x1d) < 0) {\n      if ((undefined4 *)pointer_check != (undefined4 *)0x0) {\n        if ((undefined4 *)pointer_check != input_param + 0x11) {\n          FUN_080061f0(output_param);\n        }\n        pointer_check = 0;\n      }\n      *(ushort *)(input_param + 3) = *(ushort *)(input_param + 3) & 0xffdb;\n      data = 0;\n      *input_param = value_check;\n    }\n    *(ushort *)(input_param + 3) = *(ushort *)(input_param + 3) | 8;\n  }\n  if ((value_check == 0) && ((*(ushort *)(input_param + 3) & 0x280) != 0x200)) {\n    FUN_08006e10(output_param,input_param);\n  }\n  flags = *(ushort *)(input_param + 3);\n  result = flags & 1;\n  if ((flags & 1) == 0) {\n    if (-1 < (int)((uint)flags << 0x1e)) {\n      result = value1;\n    }\n    new_value1 = result;\n  }\n  else {\n    new_value1 = 0;\n    new_value2 = -value1;\n  }\n  if (value_check == 0) {\n    flags = *(ushort *)(input_param + 3);\n    result = (int)(short)flags & 0x80;\n    if (result != 0) {\nend_label:\n      *(ushort *)(input_param + 3) = flags | 0x40;\n      return 0xffffffff;\n    }\n  }\n  else {\n    result = 0;\n  }\n  return result;\n}\n\n",
            "current_name": "process_data_080069e4",
            "entrypoint": "0x080069e4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080069e4": "process_data_080069e4",
                "LAB_08006a14": "end_label",
                "iVar1": "data_ptr",
                "param_1": "output_param",
                "param_2": "input_param",
                "param_2[0xd]": "pointer_check",
                "param_2[1]": "data",
                "param_2[2]": "new_value1",
                "param_2[4]": "value_check",
                "param_2[5]": "value1",
                "param_2[6]": "new_value2",
                "uVar2": "result",
                "uVar3": "flags"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08006ac0": {
            "additional_data": {
                "FUN_0800573c": {
                    "1": "get_input_from_user",
                    "2": "get_pointer_value",
                    "5": "get_pointer",
                    "6": "get_data"
                },
                "FUN_080061f0": {
                    "1": "clean_up_memory",
                    "2": "free_memory",
                    "4": "cleanup_data",
                    "6": "cleanup"
                },
                "FUN_08006ac0": {
                    "1": "execute_function",
                    "11": "process_data"
                },
                "FUN_08006f00": {
                    "1": "perform_initialization",
                    "14": "initialize",
                    "3": "initialize_variable",
                    "5": "initialize_data"
                },
                "UNRECOVERED_JUMPTABLE_00": {
                    "1": "jump_table_function",
                    "2": "unrecovered_jumptable"
                },
                "bVar11": {
                    "1": "flag_value",
                    "2": "is_zero",
                    "3": "is_true"
                },
                "iVar2": {
                    "1": "variable3",
                    "3": "counter"
                },
                "iVar4": {
                    "1": "count"
                },
                "iVar7": {
                    "1": "temp_size",
                    "2": "temp_counter"
                },
                "iVar9": {
                    "1": "total"
                },
                "pcVar8": {
                    "1": "ptr4",
                    "2": "callback",
                    "3": "function_ptr"
                },
                "piVar3": {
                    "1": "ptr_array",
                    "3": "parameters"
                },
                "piVar3[0x10]": {
                    "1": "flag2"
                },
                "piVar3[0xd]": {
                    "1": "flag3"
                },
                "piVar3[1]": {
                    "1": "flag1"
                },
                "piVar4": {
                    "1": "temp_vars",
                    "2": "cleanup_array"
                },
                "puVar1": {
                    "1": "ptr_data",
                    "2": "ptr_value",
                    "3": "data"
                },
                "uVar10": {
                    "1": "temp_unsigned_2"
                },
                "uVar12": {
                    "1": "return_value",
                    "5": "result"
                },
                "uVar5": {
                    "1": "variable1",
                    "2": "ushort_value",
                    "4": "value"
                },
                "uVar6": {
                    "1": "variable2",
                    "2": "flag",
                    "4": "flags"
                }
            },
            "called": [
                "FUN_0800573c",
                "FUN_080061f0",
                "FUN_08006f00"
            ],
            "calling": [
                "FUN_08007090",
                "FUN_0800611c"
            ],
            "code": "\nvoid process_data_08006ac0(void)\n\n{\n  uint *data;\n  int counter;\n  int *parameters;\n  int *cleanup_array;\n  uint value;\n  ushort flags;\n  int temp_counter;\n  code *function_ptr;\n  int total;\n  uint temp_uint;\n  code *jump_table;\n  bool is_true;\n  undefined8 result;\n  \n  FUN_08006f00(6);\n  jump_table = (code *)0x8006acf;\n  result = FUN_0800573c(1);\n  parameters = (int *)((ulonglong)result >> 0x20);\n  data = (uint *)result;\n  flags = *(ushort *)(parameters + 3);\n  value = (uint)flags;\n  if ((int)(value << 0x1c) < 0) {\n    counter = parameters[4];\n    if (counter != 0) {\n      temp_counter = value << 0x1e;\n      is_true = temp_counter != 0;\n      if (is_true) {\n        temp_counter = 0;\n      }\n      total = *parameters;\n      if (!is_true) {\n        temp_counter = parameters[5];\n      }\n      *parameters = counter;\n      parameters[2] = temp_counter;\n      for (total = total - counter; 0 < total; total = total - temp_counter) {\n        temp_counter = (*(code *)parameters[10])(data,parameters[8],counter,total);\n        if (temp_counter < 1) {\n          flags = *(ushort *)(parameters + 3);\n          goto LAB_08006bc6;\n        }\n        counter = counter + temp_counter;\n      }\n    }\n  }\n  else if (((0 < flag1) || (0 < flag2)) &&\n          (function_ptr = (code *)parameters[0xb], function_ptr != (code *)0x0)) {\n    temp_uint = *data;\n    *data = 0;\n    if ((flags & 0x1000) == 0) {\n      counter = (*function_ptr)(data,parameters[8],value & 0x1000,1);\n      if ((counter == -1) && (value = *data, value != 0)) {\n        if ((value != 0x1d) && (value != 0x16)) {\n          *(ushort *)(parameters + 3) = *(ushort *)(parameters + 3) | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x08006b90. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          (*jump_table)();\n          return;\n        }\n        *data = temp_uint;\n        goto LAB_08006aea;\n      }\n    }\n    else {\n      counter = parameters[0x15];\n    }\n    if (((int)((uint)*(ushort *)(parameters + 3) << 0x1d) < 0) &&\n       (counter = counter - flag1, flag3 != 0)) {\n      counter = counter - flag2;\n    }\n    counter = (*(code *)parameters[0xb])(data,parameters[8],counter,0);\n    flags = *(ushort *)(parameters + 3);\n    if ((counter == -1) &&\n       ((0x1d < *data || (-1 < (int)((0x20400001U >> (*data & 0xff)) << 0x1f))))) {\nLAB_08006bc6:\n      *(ushort *)(parameters + 3) = flags | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x08006bd0. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      (*jump_table)(0xffffffff);\n      return;\n    }\n    flag1 = 0;\n    *parameters = parameters[4];\n    if (((int)((uint)flags << 0x13) < 0) && ((counter != -1 || (*data == 0)))) {\n      parameters[0x15] = counter;\n    }\n    cleanup_array = (int *)flag3;\n    *data = temp_uint;\n    if (cleanup_array != (int *)0x0) {\n      if (cleanup_array != parameters + 0x11) {\n        FUN_080061f0(data);\n      }\n      flag3 = 0;\n                    /* WARNING: Could not recover jumptable at 0x08006b66. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      (*jump_table)();\n      return;\n    }\n  }\nLAB_08006aea:\n                    /* WARNING: Could not recover jumptable at 0x08006aec. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jump_table)(0);\n  return;\n}\n\n",
            "current_name": "process_data_08006ac0",
            "entrypoint": "0x08006ac0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08006ac0": "process_data_08006ac0",
                "UNRECOVERED_JUMPTABLE_00": "jump_table",
                "bVar11": "is_true",
                "iVar2": "counter",
                "iVar4": "count",
                "iVar7": "temp_counter",
                "iVar9": "total",
                "pcVar8": "function_ptr",
                "piVar3": "parameters",
                "piVar3[0x10]": "flag2",
                "piVar3[0xd]": "flag3",
                "piVar3[1]": "flag1",
                "piVar4": "cleanup_array",
                "puVar1": "data",
                "uVar10": "temp_uint",
                "uVar12": "result",
                "uVar5": "value",
                "uVar6": "flags"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08006be0": {
            "additional_data": {
                "FUN_08006be0": {
                    "1": "execute_function",
                    "11": "process_data",
                    "2": "process_parameters"
                },
                "UNRECOVERED_JUMPTABLE_00": {
                    "1": "error_func_ptr",
                    "13": "jump_table",
                    "3": "unrecovered_jump_table"
                },
                "bVar10": {
                    "1": "bool_variable",
                    "2": "flag1"
                },
                "bVar11": {
                    "1": "flag2"
                },
                "iVar2": {
                    "1": "info_index",
                    "2": "temp_var1",
                    "3": "count",
                    "6": "counter"
                },
                "iVar6": {
                    "1": "offset",
                    "2": "i_var6",
                    "3": "temp_var"
                },
                "iVar8": {
                    "1": "temp_var6",
                    "2": "counter"
                },
                "param_1": {
                    "1": "array1",
                    "2": "data",
                    "3": "input_data",
                    "8": "param_array"
                },
                "param_2": {
                    "1": "int_array",
                    "2": "info_array",
                    "3": "output_array"
                },
                "pcVar7": {
                    "1": "callback_func",
                    "10": "function_ptr",
                    "2": "callback_function",
                    "3": "callback",
                    "4": "func_ptr"
                },
                "piVar3": {
                    "1": "var2",
                    "2": "ptr_var",
                    "3": "ptr",
                    "5": "pointer_var",
                    "7": "temp_ptr"
                },
                "uVar1": {
                    "14": "result",
                    "17": "return_value"
                },
                "uVar10": {
                    "1": "boolean",
                    "2": "bool_var",
                    "3": "temp_bool"
                },
                "uVar4": {
                    "1": "int_value",
                    "2": "temp_var1",
                    "3": "value",
                    "4": "ushort_value"
                },
                "uVar5": {
                    "1": "temp_value2",
                    "2": "u_var5",
                    "3": "temp_var2",
                    "4": "temp_ushort",
                    "5": "flag"
                },
                "uVar9": {
                    "1": "uint_val",
                    "2": "temp_var4",
                    "3": "temp_uint2"
                },
                "unaff_r4": {
                    "1": "reg4",
                    "2": "unaffected_register4",
                    "3": "unaff_r4",
                    "4": "unaff_var4"
                },
                "unaff_r5": {
                    "1": "register5",
                    "2": "unaff_arg5",
                    "3": "unaff_r5",
                    "4": "unaff_var5"
                }
            },
            "called": [
                "FUN_08006cb4"
            ],
            "calling": [
                "FUN_08006344"
            ],
            "code": "\nundefined4 process_data_08006be0(uint *param_array,int *output_array)\n\n{\n  undefined4 return_value;\n  int counter;\n  int *temp_ptr;\n  uint ushort_value;\n  ushort flag;\n  int temp_var2;\n  undefined4 unaff_var4;\n  undefined4 unaff_var5;\n  code *function_ptr;\n  int i_var;\n  uint temp_uint2;\n  code *jump_table;\n  bool flag;\n  \n  if (output_array[4] != 0) {\n    if ((param_array != (uint *)0x0) && (param_array[6] == 0)) {\n      FUN_08006cb4();\n    }\n    if (output_array == &DAT_08007904) {\n      output_array = (int *)param_array[1];\n    }\n    else if (output_array == (int *)&DAT_08007924) {\n      output_array = (int *)param_array[2];\n    }\n    else if (output_array == (int *)&DAT_080078e4) {\n      output_array = (int *)param_array[3];\n    }\n    if (*(short *)(output_array + 3) != 0) {\n      flag = *(ushort *)(output_array + 3);\n      ushort_value = (uint)flag;\n      if ((int)(ushort_value << 0x1c) < 0) {\n        counter = output_array[4];\n        if (counter != 0) {\n          temp_var2 = ushort_value << 0x1e;\n          flag = temp_var2 != 0;\n          if (flag) {\n            temp_var2 = 0;\n          }\n          i_var = *output_array;\n          if (!flag) {\n            temp_var2 = output_array[5];\n          }\n          *output_array = counter;\n          output_array[2] = temp_var2;\n          for (i_var = i_var - counter; 0 < i_var; i_var = i_var - temp_var2) {\n            temp_var2 = (*(code *)output_array[10])(param_array,output_array[8],counter,i_var,unaff_var4,unaff_var5);\n            if (temp_var2 < 1) {\n              flag = *(ushort *)(output_array + 3);\n              goto LAB_08006bc6;\n            }\n            counter = counter + temp_var2;\n          }\n        }\n      }\n      else if (((0 < output_array[1]) || (0 < output_array[0x10])) &&\n              (function_ptr = (code *)output_array[0xb], function_ptr != (code *)0x0)) {\n        temp_uint2 = *param_array;\n        *param_array = 0;\n        if ((flag & 0x1000) == 0) {\n          counter = (*function_ptr)(param_array,output_array[8],ushort_value & 0x1000,1);\n          if ((counter == -1) && (ushort_value = *param_array, ushort_value != 0)) {\n            if ((ushort_value != 0x1d) && (ushort_value != 0x16)) {\n              *(ushort *)(output_array + 3) = *(ushort *)(output_array + 3) | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x08006b90. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n              return_value = (*jump_table)();\n              return return_value;\n            }\n            *param_array = temp_uint2;\n            goto LAB_08006aea;\n          }\n        }\n        else {\n          counter = output_array[0x15];\n        }\n        if (((int)((uint)*(ushort *)(output_array + 3) << 0x1d) < 0) &&\n           (counter = counter - output_array[1], output_array[0xd] != 0)) {\n          counter = counter - output_array[0x10];\n        }\n        counter = (*(code *)output_array[0xb])(param_array,output_array[8],counter,0);\n        flag = *(ushort *)(output_array + 3);\n        if ((counter == -1) &&\n           ((0x1d < *param_array || (-1 < (int)((0x20400001U >> (*param_array & 0xff)) << 0x1f))))) {\nLAB_08006bc6:\n          *(ushort *)(output_array + 3) = flag | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x08006bd0. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          return_value = (*jump_table)(0xffffffff);\n          return return_value;\n        }\n        output_array[1] = 0;\n        *output_array = output_array[4];\n        if (((int)((uint)flag << 0x13) < 0) && ((counter != -1 || (*param_array == 0)))) {\n          output_array[0x15] = counter;\n        }\n        temp_ptr = (int *)output_array[0xd];\n        *param_array = temp_uint2;\n        if (temp_ptr != (int *)0x0) {\n          if (temp_ptr != output_array + 0x11) {\n            FUN_080061f0(param_array);\n          }\n          output_array[0xd] = 0;\n                    /* WARNING: Could not recover jumptable at 0x08006b66. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          return_value = (*jump_table)();\n          return return_value;\n        }\n      }\nLAB_08006aea:\n                    /* WARNING: Could not recover jumptable at 0x08006aec. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      return_value = (*jump_table)(0);\n      return return_value;\n    }\n  }\n  return 0;\n}\n\n",
            "current_name": "process_data_08006be0",
            "entrypoint": "0x08006be0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08006be0": "process_data_08006be0",
                "UNRECOVERED_JUMPTABLE_00": "jump_table",
                "bVar10": "flag",
                "iVar2": "counter",
                "iVar6": "temp_var2",
                "iVar8": "i_var",
                "param_1": "param_array",
                "param_2": "output_array",
                "pcVar7": "function_ptr",
                "piVar3": "temp_ptr",
                "uVar1": "return_value",
                "uVar4": "ushort_value",
                "uVar5": "flag",
                "uVar9": "temp_uint2",
                "unaff_r4": "unaff_var4",
                "unaff_r5": "unaff_var5"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08006c40": {
            "additional_data": {
                "&LAB_08006fb6_1": {
                    "1": "label_08006fb6_1"
                },
                "FUN_080061e0": {
                    "1": "fill_memory_with_zeros",
                    "2": "initialize_data",
                    "4": "set_memory",
                    "5": "initialize_memory",
                    "8": "initialize_array"
                },
                "FUN_08006c40": {
                    "1": "initialize_global_variables",
                    "13": "initialize_parameters",
                    "2": "initialize_function",
                    "3": "initialize_data_structure",
                    "6": "initialize_data"
                },
                "LAB_08006fb6_1": {
                    "2": "label"
                },
                "int param_3": {
                    "1": "length"
                },
                "param_1": {
                    "1": "array_to_initialize",
                    "2": "data",
                    "5": "parameters",
                    "9": "array"
                },
                "param_1[0x19]": {
                    "1": "param_array[25]"
                },
                "param_1[0xb]": {
                    "1": "parameters[11]"
                },
                "param_1[0xc]": {
                    "1": "parameters[12]"
                },
                "param_1[10]": {
                    "1": "parameters[10]"
                },
                "param_1[1]": {
                    "1": "parameters[1]"
                },
                "param_1[2]": {
                    "1": "parameters[2]"
                },
                "param_1[4]": {
                    "1": "parameters[4]"
                },
                "param_1[5]": {
                    "1": "parameters[5]"
                },
                "param_1[6]": {
                    "1": "parameters[6]"
                },
                "param_1[8]": {
                    "1": "parameters[8]"
                },
                "param_1[9]": {
                    "1": "parameters[9]"
                },
                "param_2": {
                    "1": "start_value",
                    "10": "value",
                    "4": "default_value",
                    "5": "value1",
                    "7": "initial_value"
                },
                "param_3": {
                    "1": "number_of_bytes",
                    "10": "length",
                    "12": "size",
                    "5": "value2"
                },
                "undefined *param_1": {
                    "1": "data"
                },
                "undefined param_2": {
                    "1": "init_value"
                },
                "undefined2 param_2": {
                    "1": "value1"
                },
                "undefined2 param_3": {
                    "1": "value2"
                },
                "undefined4 *param_1": {
                    "1": "parameters"
                }
            },
            "called": [
                "FUN_080061e0"
            ],
            "calling": [
                "FUN_08006cb4"
            ],
            "code": "\nvoid initialize_parameters_08006c40(undefined4 *array,undefined2 value,undefined2 size)\n\n{\n  *array = 0;\n  parameters[1] = 0;\n  parameters[2] = 0;\n  *(undefined2 *)(array + 3) = value;\n  parameters[25] = 0;\n  *(undefined2 *)((int)array + 0xe) = size;\n  parameters[4] = 0;\n  parameters[5] = 0;\n  parameters[6] = 0;\n  FUN_080061e0(array + 0x17,0,8);\n  parameters[8] = array;\n  parameters[9] = 0x8006f39;\n  parameters[10] = 0x8006f5b;\n  parameters[11] = 0x8006f93;\n  parameters[12] = label_08006fb6_1;\n  return;\n}\n\n",
            "current_name": "initialize_parameters_08006c40",
            "entrypoint": "0x08006c40",
            "imported": false,
            "improved": true,
            "renaming": {
                "&LAB_08006fb6_1": "label_08006fb6_1",
                "FUN_08006c40": "initialize_parameters_08006c40",
                "LAB_08006fb6_1": "label",
                "param_1": "array",
                "param_1[0x19]": "parameters[25]",
                "param_1[0xb]": "parameters[11]",
                "param_1[0xc]": "parameters[12]",
                "param_1[10]": "parameters[10]",
                "param_1[1]": "parameters[1]",
                "param_1[2]": "parameters[2]",
                "param_1[4]": "parameters[4]",
                "param_1[5]": "parameters[5]",
                "param_1[6]": "parameters[6]",
                "param_1[8]": "parameters[8]",
                "param_1[9]": "parameters[9]",
                "param_2": "value",
                "param_3": "size"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08006c88": {
            "additional_data": {
                "FUN_080061e0": {
                    "1": "initialize_data",
                    "12": "initialize_memory"
                },
                "FUN_08006288": {
                    "1": "get_data_at_offset",
                    "12": "allocate_memory"
                },
                "FUN_08006c88": {
                    "1": "create_array_element",
                    "2": "initialize_object",
                    "21": "initialize_data_structure"
                },
                "iVar2": {
                    "1": "byte_size",
                    "25": "offset",
                    "4": "index"
                },
                "param_1": {
                    "1": "input_param",
                    "2": "object_address",
                    "3": "input_data",
                    "4": "data_ptr",
                    "8": "data"
                },
                "param_2": {
                    "1": "length",
                    "16": "size",
                    "2": "array_size",
                    "6": "num_elements"
                },
                "param_3": {
                    "2": "size"
                },
                "puVar1": {
                    "1": "dynamic_array",
                    "2": "result_ptr",
                    "3": "result"
                }
            },
            "called": [
                "FUN_08006288",
                "FUN_080061e0"
            ],
            "calling": [
                "FUN_08006d14"
            ],
            "code": "\nundefined4 * initialize_data_structure_08006c88(undefined4 data,int size)\n\n{\n  undefined4 *result;\n  int offset;\n  \n  offset = (size + -1) * 0x68;\n  result = (undefined4 *)FUN_08006288(data,offset + 0x74);\n  if (result != (undefined4 *)0x0) {\n    *result = 0;\n    result[1] = size;\n    result[2] = result + 3;\n    FUN_080061e0(result + 3,0,offset + 0x68);\n  }\n  return result;\n}\n\n",
            "current_name": "initialize_data_structure_08006c88",
            "entrypoint": "0x08006c88",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08006c88": "initialize_data_structure_08006c88",
                "iVar2": "offset",
                "param_1": "data",
                "param_2": "size",
                "puVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08006cb4": {
            "additional_data": {
                "&DAT_200000fc": {
                    "1": "constant"
                },
                "&LAB_08006c34_1": {
                    "1": "label"
                },
                "0x12": {
                    "1": "size3"
                },
                "4": {
                    "1": "size1"
                },
                "9": {
                    "1": "size2"
                },
                "DAT_200000fc": {
                    "1": "reference_data"
                },
                "FUN_08006c34_1": {
                    "1": "some_function"
                },
                "FUN_08006c40": {
                    "1": "initialize_value",
                    "2": "modify_data",
                    "3": "set_param_value",
                    "6": "set_data",
                    "7": "set_values"
                },
                "FUN_08006c40(data[1],4,0)": {
                    "1": "set_data(data[1],4,0)"
                },
                "FUN_08006c40(data[2],9,1)": {
                    "1": "set_data(data[2],9,1)"
                },
                "FUN_08006c40(data[3],0x12,2)": {
                    "1": "set_data(data[3],0x12,2)"
                },
                "FUN_08006cb4": {
                    "1": "initialize_function",
                    "2": "initialize_param",
                    "21": "initialize_data",
                    "5": "initialize_parameters"
                },
                "FUN_08006d14": {
                    "1": "create_param",
                    "20": "allocate_memory"
                },
                "LAB_08006c34_1": {
                    "1": "label"
                },
                "param_1": {
                    "1": "param",
                    "14": "data",
                    "2": "data_ptr",
                    "4": "parameters",
                    "5": "data_pointer"
                },
                "param_1[0x12]": {
                    "1": "data_ptr[18]"
                },
                "param_1[0x13]": {
                    "1": "data[19]"
                },
                "param_1[0x14]": {
                    "1": "mem_block3"
                },
                "param_1[10]": {
                    "1": "function_params[10]"
                },
                "param_1[1]": {
                    "1": "data_ptr[1]"
                },
                "param_1[2]": {
                    "1": "data[2]"
                },
                "param_1[3]": {
                    "1": "allocated_memory3"
                },
                "param_1[6]": {
                    "1": "data_ptr[6]"
                },
                "param_2": {
                    "1": "data_length",
                    "2": "length"
                },
                "param_3": {
                    "1": "data2",
                    "2": "value2",
                    "3": "index"
                },
                "param_4": {
                    "1": "size",
                    "2": "value3"
                },
                "puVar2": {
                    "1": "flag_pointer",
                    "2": "ptr",
                    "7": "temp_ptr",
                    "8": "temp_pointer",
                    "9": "pointer"
                },
                "uVar1": {
                    "1": "temp_var",
                    "25": "result",
                    "5": "return_value"
                }
            },
            "called": [
                "FUN_08006c40",
                "FUN_08006d14"
            ],
            "calling": [
                "FUN_08006be0",
                "FUN_080069e4",
                "FUN_08006344",
                "FUN_080068f0",
                "FUN_08006394",
                "FUN_08006d14"
            ],
            "code": "\nvoid initialize_data_08006cb4(undefined4 *data)\n\n{\n  undefined4 result;\n  undefined4 *pointer;\n  \n  if (function_params[6] == 0) {\n    function_params[0x12] = 0;\n    function_params[0x13] = 0;\n    function_params[0x14] = 0;\n    pointer = &DAT_200000fc;\n    function_params[10] = function_label_ptr;\n    if (data == &DAT_200000fc) {\n      pointer = (undefined4 *)0x1;\n    }\n    if (data == &DAT_200000fc) {\n      function_params[6] = pointer;\n    }\n    result = FUN_08006d14();\n    allocated_memory1 = result;\n    result = FUN_08006d14(data);\n    allocated_memory2 = result;\n    result = FUN_08006d14(data);\n    allocated_memory3 = result;\n    FUN_08006c40(allocated_memory1,4,0);\n    FUN_08006c40(allocated_memory2,9,1);\n    FUN_08006c40(allocated_memory3,0x12,2);\n    function_params[6] = 1;\n  }\n  return;\n}\n\n",
            "current_name": "initialize_data_08006cb4",
            "entrypoint": "0x08006cb4",
            "imported": false,
            "improved": true,
            "renaming": {
                "&LAB_08006c34_1": "function_label_ptr",
                "FUN_08006cb4": "initialize_data_08006cb4",
                "LAB_08006c34_1": "constant1",
                "param_1": "data",
                "param_1[0x12]": "function_params[0x12]",
                "param_1[0x13]": "function_params[0x13]",
                "param_1[0x14]": "function_params[0x14]",
                "param_1[10]": "function_params[10]",
                "param_1[1]": "allocated_memory1",
                "param_1[2]": "allocated_memory2",
                "param_1[3]": "allocated_memory3",
                "param_1[6]": "function_params[6]",
                "puVar2": "pointer",
                "uVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08006d14": {
            "additional_data": {
                "&DAT_200000fc": {
                    "1": "data_buffer_pointer"
                },
                "&DAT_20000144": {
                    "1": "data_structure_pointer"
                },
                "*param_1": {
                    "1": "result"
                },
                "*ppiVar3": {
                    "1": "next_pointer"
                },
                "DAT_200000fc": {
                    "1": "error_code_data",
                    "2": "data_ptr"
                },
                "DAT_20000114": {
                    "1": "initialized_flag",
                    "2": "flag",
                    "3": "data_flag"
                },
                "DAT_20000144": {
                    "1": "data_structure_data",
                    "2": "data_ptr"
                },
                "FUN_080061e0": {
                    "1": "initialize_block",
                    "2": "initialize_array",
                    "4": "initialize_memory"
                },
                "FUN_08006c88": {
                    "1": "allocate_resource",
                    "13": "allocate_memory"
                },
                "FUN_08006cb4": {
                    "1": "initialize_variable",
                    "15": "initialize_data"
                },
                "FUN_08006d14": {
                    "1": "initialize_structures",
                    "2": "find_initialized_pointer",
                    "3": "initialize_data_structures",
                    "8": "process_data"
                },
                "param_1": {
                    "1": "function_status",
                    "2": "result",
                    "3": "output_param"
                },
                "param_2": {
                    "1": "arg2",
                    "2": "size",
                    "4": "param1",
                    "5": "param_2",
                    "8": "param2"
                },
                "param_3": {
                    "1": "arg2",
                    "2": "input_2",
                    "4": "param2",
                    "5": "param_3",
                    "9": "param3"
                },
                "param_4": {
                    "1": "input_data3",
                    "10": "param4",
                    "2": "input_param3",
                    "4": "param3",
                    "5": "param_4"
                },
                "piVar1": {
                    "1": "inner_loop_counter",
                    "2": "current_pointer",
                    "3": "iterator1",
                    "4": "current_pointer1"
                },
                "piVar2": {
                    "1": "nested_current_element",
                    "2": "current_array",
                    "3": "iterator2",
                    "4": "current_pointer2"
                },
                "piVar2[0]": {
                    "1": "int_value1"
                },
                "piVar2[0x12]": {
                    "1": "int_value9"
                },
                "piVar2[0x13]": {
                    "1": "int_value10"
                },
                "piVar2[0x17]": {
                    "1": "block_pointer"
                },
                "piVar2[0xd]": {
                    "1": "int_value7"
                },
                "piVar2[0xe]": {
                    "1": "int_value8"
                },
                "piVar2[1]": {
                    "1": "int_value3"
                },
                "piVar2[2]": {
                    "1": "int_value2"
                },
                "piVar2[3]": {
                    "1": "short_value"
                },
                "piVar2[4]": {
                    "1": "int_value4"
                },
                "piVar2[5]": {
                    "1": "int_value5"
                },
                "piVar2[6]": {
                    "1": "int_value6"
                },
                "ppiVar3": {
                    "1": "loop_pointer",
                    "2": "pointer_array",
                    "3": "data_array_pointer",
                    "4": "ptr_ptr"
                }
            },
            "called": [
                "FUN_08006cb4",
                "FUN_08006c88",
                "FUN_080061e0"
            ],
            "calling": [
                "FUN_08006cb4"
            ],
            "code": "\nint * process_data_08006d14(undefined4 *output_data,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  int *ptr1;\n  int *ptr2;\n  int **ptr_ptr;\n  \n  if (DAT_20000114 == 0) {\n    FUN_08006cb4(&DAT_200000fc);\n  }\n  ptr_ptr = (int **)&DAT_20000144;\n  do {\n    ptr2 = ptr_ptr[2];\n    ptr1 = ptr_ptr[1];\n    while (ptr1 = (int *)((int)ptr1 + -1), -1 < (int)ptr1) {\n      if (*(short *)(ptr2 + 3) == 0) {\n        *(undefined2 *)((int)ptr2 + 0xe) = 0xffff;\n        ptr2[0x19] = 0;\n        *(undefined2 *)(ptr2 + 3) = 1;\n        *ptr2 = 0;\n        int_value2 = 0;\n        int_value3 = 0;\n        int_value4 = 0;\n        int_value5 = 0;\n        int_value6 = 0;\n        FUN_080061e0(ptr2 + 0x17,0,8,1,param4);\n        int_value7 = 0;\n        int_value8 = 0;\n        int_value9 = 0;\n        int_value10 = 0;\n        return ptr2;\n      }\n      ptr2 = ptr2 + 0x1a;\n    }\n    if (*ptr_ptr == (int *)0x0) {\n      ptr1 = (int *)FUN_08006c88(output_data,4);\n      *ptr_ptr = ptr1;\n      if (ptr1 == (int *)0x0) {\n        *output_data = 0xc;\n        return (int *)0x0;\n      }\n    }\n    ptr_ptr = (int **)*ptr_ptr;\n  } while( true );\n}\n\n",
            "current_name": "process_data_08006d14",
            "entrypoint": "0x08006d14",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08006d14": "process_data_08006d14",
                "param_1": "output_data",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "piVar1": "ptr1",
                "piVar2": "ptr2",
                "piVar2[0x12]": "int_value9",
                "piVar2[0x13]": "int_value10",
                "piVar2[0xd]": "int_value7",
                "piVar2[0xe]": "int_value8",
                "piVar2[1]": "int_value3",
                "piVar2[2]": "int_value2",
                "piVar2[4]": "int_value4",
                "piVar2[5]": "int_value5",
                "piVar2[6]": "int_value6",
                "ppiVar3": "ptr_ptr"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08006dc8": {
            "additional_data": {
                "FUN_08006dc8": {
                    "1": "calculate_flag",
                    "2": "process_data",
                    "3": "check_memory_permissions",
                    "4": "check_permission",
                    "6": "check_permissions"
                },
                "FUN_08007004": {
                    "1": "check_memory_access"
                },
                "auStack_4c": {
                    "1": "temporary_buffer",
                    "2": "buffer",
                    "3": "temporary_data",
                    "7": "stack_var"
                },
                "iVar1": {
                    "10": "result",
                    "12": "status",
                    "2": "error_code",
                    "7": "return_value"
                },
                "local_48": {
                    "1": "file_permissions",
                    "2": "value",
                    "3": "file_attributes",
                    "6": "local_var"
                },
                "param_1": {
                    "1": "input_param",
                    "2": "param",
                    "3": "file_pointer",
                    "5": "param_1",
                    "7": "param1"
                },
                "param_2": {
                    "1": "access_mode",
                    "2": "arg2",
                    "3": "buffer",
                    "7": "param2"
                },
                "param_3": {
                    "1": "output_param",
                    "2": "result_flag",
                    "4": "param3",
                    "7": "result"
                },
                "param_4": {
                    "1": "permissions",
                    "2": "flag",
                    "4": "result",
                    "5": "flags"
                },
                "uVar2": {
                    "1": "output_value",
                    "2": "flag_value",
                    "4": "flag",
                    "9": "permission"
                }
            },
            "called": [
                "FUN_08007004"
            ],
            "calling": [
                "FUN_08006e10"
            ],
            "code": "\nundefined4 check_file_permissions_08006dc8(undefined4 param1,int param2,undefined4 *result,uint *flags)\n\n{\n  int status;\n  undefined4 permission;\n  undefined stack_var [4];\n  uint local_var;\n  \n  if ((*(short *)(param2 + 0xe) < 0) ||\n     (status = FUN_08007004(param1,(int)*(short *)(param2 + 0xe),stack_var), status < 0)) {\n    *flags = 0;\n    if ((int)((uint)*(ushort *)(param2 + 0xc) << 0x18) < 0) {\n      permission = 0x40;\n      goto LAB_08006e08;\n    }\n  }\n  else {\n    *flags = (uint)((local_var & 0xf000) == 0x2000);\n  }\n  permission = 0x400;\nLAB_08006e08:\n  *result = permission;\n  return 0;\n}\n\n",
            "current_name": "check_file_permissions_08006dc8",
            "entrypoint": "0x08006dc8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08006dc8": "check_file_permissions_08006dc8",
                "auStack_4c": "stack_var",
                "iVar1": "status",
                "local_48": "local_var",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "result",
                "param_4": "flags",
                "uVar2": "permission"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08006e10": {
            "additional_data": {
                "(int)param_2 + 0x47": {
                    "1": "new_param"
                },
                "FUN_08006288": {
                    "1": "check_value"
                },
                "FUN_08006dc8": {
                    "1": "process_data"
                },
                "FUN_08006e10": {
                    "1": "update_data",
                    "17": "process_data",
                    "2": "check_and_process_data"
                },
                "FUN_08007028": {
                    "1": "update_flag"
                },
                "LAB_08006c34_1": {
                    "1": "label"
                },
                "iVar2": {
                    "2": "result_2",
                    "3": "result",
                    "5": "result2",
                    "7": "status"
                },
                "local_14": {
                    "1": "var2",
                    "2": "temp2",
                    "3": "temp_var2",
                    "5": "local_var2",
                    "6": "local_array"
                },
                "local_18": {
                    "1": "input_copy",
                    "2": "local_data",
                    "3": "temp_var1",
                    "4": "temp_value",
                    "5": "local_var1"
                },
                "param_1": {
                    "1": "output",
                    "2": "param",
                    "3": "input_data",
                    "5": "input_param",
                    "6": "input_value"
                },
                "param_2": {
                    "1": "input_2",
                    "2": "input_array",
                    "3": "param_array",
                    "4": "output_data",
                    "5": "output"
                },
                "uVar1": {
                    "1": "calc_result",
                    "2": "result_var1",
                    "20": "result",
                    "3": "result1"
                }
            },
            "called": [
                "FUN_08007028",
                "FUN_08006288",
                "FUN_08006dc8"
            ],
            "calling": [
                "FUN_080069e4"
            ],
            "code": "\nvoid process_data_08006e10(int input_value,int *output)\n\n{\n  ushort result;\n  int return_value;\n  int local_var1;\n  int *local_array;\n  \n  if (-1 < (int)((uint)*(ushort *)(output + 3) << 0x1e)) {\n    local_var1 = input_value;\n    local_array = output;\n    result = FUN_08006dc8(input_value,output,&local_var1,&local_array);\n    return_value = FUN_08006288(input_value,local_var1);\n    if (return_value != 0) {\n      *(undefined **)(input_value + 0x28) = &label;\n      *output = return_value;\n      *(ushort *)(output + 3) = *(ushort *)(output + 3) | 0x80;\n      output[4] = return_value;\n      output[5] = local_var1;\n      if ((local_array != (int *)0x0) &&\n         (return_value = FUN_08007028(input_value,(int)*(short *)((int)output + 0xe)), return_value != 0)) {\n        *(ushort *)(output + 3) = *(ushort *)(output + 3) & 0xfffc | 1;\n      }\n      *(ushort *)(output + 3) = result | *(ushort *)(output + 3);\n      return;\n    }\n    if ((int)(short)*(ushort *)(output + 3) << 0x16 < 0) {\n      return;\n    }\n    *(ushort *)(output + 3) = *(ushort *)(output + 3) & 0xfffc | 2;\n  }\n  *output = (int)output + 0x47;\n  output[4] = (int)output + 0x47;\n  output[5] = 1;\n  return;\n}\n\n",
            "current_name": "process_data_08006e10",
            "entrypoint": "0x08006e10",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08006e10": "process_data_08006e10",
                "LAB_08006c34_1": "label",
                "iVar2": "return_value",
                "local_14": "local_array",
                "local_18": "local_var1",
                "param_1": "input_value",
                "param_2": "output",
                "uVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08006e90": {
            "additional_data": {
                "FUN_08006e90": {
                    "1": "find_character_after_offset",
                    "15": "find_character",
                    "3": "find_character_index",
                    "4": "find_character_in_string",
                    "6": "find_first_occurrence"
                },
                "param_1": {
                    "1": "char_array",
                    "27": "string",
                    "3": "str"
                },
                "param_2": {
                    "1": "target_character",
                    "23": "character",
                    "3": "target"
                },
                "param_3": {
                    "1": "offset",
                    "2": "str_length",
                    "25": "length"
                },
                "pcVar1": {
                    "1": "current_char_ptr",
                    "14": "current_char",
                    "2": "current",
                    "4": "current_position"
                },
                "pcVar2": {
                    "1": "previous_position",
                    "13": "next_char",
                    "2": "next",
                    "3": "next_position",
                    "4": "next_character"
                }
            },
            "called": [],
            "calling": [
                "FUN_080066b0",
                "FUN_08006394"
            ],
            "code": "\nchar * find_character_08006e90(char *string,char character,int length)\n\n{\n  char *current_char;\n  char *next_char;\n  \n  current_char = string;\n  do {\n    next_char = current_char;\n    if (next_char == string + length) {\n      return (char *)0x0;\n    }\n    current_char = next_char + 1;\n  } while (*next_char != character);\n  return next_char;\n}\n\n",
            "current_name": "find_character_08006e90",
            "entrypoint": "0x08006e90",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08006e90": "find_character_08006e90",
                "param_1": "string",
                "param_2": "character",
                "param_3": "length",
                "pcVar1": "current_char",
                "pcVar2": "next_char"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08006eac": {
            "called": [],
            "calling": [
                "FUN_080061f0",
                "FUN_08006288"
            ],
            "code": "\nvoid FUNC_08006eac(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_08006eac",
            "entrypoint": "0x08006eac",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_08006eac": "FUNC_08006eac"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_08006eae": {
            "called": [],
            "calling": [
                "FUN_08006288",
                "FUN_080061f0"
            ],
            "code": "\nvoid FUNC_08006eae(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_08006eae",
            "entrypoint": "0x08006eae",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_08006eae": "FUNC_08006eae"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_08006f00": {
            "additional_data": {
                "DAT_200000f8": {
                    "1": "command_table"
                },
                "DAT_200006a4": {
                    "1": "error_flag",
                    "3": "error_code"
                },
                "FUN_08005740": {
                    "1": "sub_function_1"
                },
                "FUN_08006f00": {
                    "1": "execute_operation",
                    "15": "execute_function",
                    "2": "process_param"
                },
                "iVar3": {
                    "1": "entry",
                    "2": "value",
                    "4": "function_pointer"
                },
                "in_lr": {
                    "1": "unused_lr",
                    "2": "link_register"
                },
                "param_1": {
                    "1": "input_param",
                    "2": "param",
                    "4": "function_index",
                    "5": "input_value",
                    "7": "input",
                    "8": "index"
                },
                "pcVar4": {
                    "1": "target_function",
                    "10": "function_pointer",
                    "4": "function",
                    "5": "code_ptr",
                    "7": "function_ptr"
                },
                "piVar1": {
                    "1": "command_table",
                    "2": "result",
                    "3": "function_array",
                    "4": "data_ptr"
                },
                "puVar5": {
                    "1": "result_ptr_ptr",
                    "2": "data_ptr_ptr",
                    "3": "data_pointer_ptr"
                },
                "thunk_FUN_08005750": {
                    "1": "sub_function_2"
                },
                "uVar2": {
                    "1": "result_var",
                    "19": "result",
                    "3": "return_value",
                    "7": "thunk_result"
                },
                "unaff_r4": {
                    "1": "unaffected_register_4"
                },
                "unaff_r5": {
                    "1": "unused2"
                }
            },
            "called": [
                "FUN_08005740",
                "thunk_FUN_08005750"
            ],
            "calling": [
                "FUN_08006ac0"
            ],
            "code": "\nint execute_function_08006f00(uint index)\n\n{\n  int *data_ptr;\n  undefined4 result;\n  int function_pointer;\n  code *function_pointer;\n  undefined4 unused_var;\n  undefined4 unused_var;\n  undefined4 link_register;\n  undefined4 *data_pointer_ptr;\n  \n  data_ptr = DAT_200000f8;\n  data_pointer_ptr = &DAT_200000f8;\n  if (0x1f < index) {\n    *DAT_200000f8 = 0x16;\n    return -1;\n  }\n  function_pointer = DAT_200000f8[0x11];\n  if ((function_pointer != 0) && (function_pointer = *(code **)(function_pointer + index * 4), function_pointer != (code *)0x0)) {\n    if (function_pointer != (code *)0x1) {\n      if (function_pointer == (code *)0xffffffff) {\n        *DAT_200000f8 = 0x16;\n        return 1;\n      }\n      *(undefined4 *)(function_pointer + index * 4) = 0;\n      (*function_pointer)(index);\n    }\n    return 0;\n  }\n  result = thunk_FUN_08005750(DAT_200000f8);\n  DAT_200006a4 = 0;\n  function_pointer = FUN_08005740(result,index,index,0,data_pointer_ptr,unused_var,unused_var,link_register);\n  if ((function_pointer == -1) && (DAT_200006a4 != 0)) {\n    *data_ptr = DAT_200006a4;\n  }\n  return function_pointer;\n}\n\n",
            "current_name": "execute_function_08006f00",
            "entrypoint": "0x08006f00",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08006f00": "execute_function_08006f00",
                "iVar3": "function_pointer",
                "in_lr": "link_register",
                "param_1": "index",
                "pcVar4": "function_pointer",
                "piVar1": "data_ptr",
                "puVar5": "data_pointer_ptr",
                "uVar2": "result",
                "unaff_r4": "unused_var",
                "unaff_r5": "unused_var"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08006f38": {
            "additional_data": {
                "FUN_08006f38": {
                    "1": "calculate_and_update_value",
                    "21": "update_value",
                    "7": "update_data"
                },
                "bVar3": {
                    "1": "condition_met",
                    "2": "is_greater_than_zero",
                    "25": "is_positive"
                },
                "iVar1": {
                    "31": "result"
                },
                "param_1": {
                    "1": "buffer",
                    "2": "ptr1",
                    "3": "input_array",
                    "4": "param1",
                    "5": "param"
                },
                "param_2": {
                    "1": "input_param",
                    "2": "data_offset",
                    "3": "address",
                    "4": "data",
                    "5": "param2",
                    "8": "offset"
                },
                "uVar2": {
                    "1": "value",
                    "13": "new_value",
                    "17": "updated_value"
                }
            },
            "called": [
                "FUN_0800706c"
            ],
            "calling": [],
            "code": "\nvoid update_value_08006f38(undefined4 param,int offset)\n\n{\n  int result;\n  uint updated_value;\n  bool is_positive;\n  \n  result = FUN_0800706c(param,(int)*(short *)(offset + 0xe));\n  is_positive = -1 < result;\n  if (is_positive) {\n    updated_value = *(int *)(offset + 0x54) + result;\n  }\n  else {\n    updated_value = *(ushort *)(offset + 0xc) & 0xffffefff;\n  }\n  if (is_positive) {\n    *(uint *)(offset + 0x54) = updated_value;\n  }\n  if (!is_positive) {\n    *(short *)(offset + 0xc) = (short)updated_value;\n  }\n  return;\n}\n\n",
            "current_name": "update_value_08006f38",
            "entrypoint": "0x08006f38",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08006f38": "update_value_08006f38",
                "bVar3": "is_positive",
                "iVar1": "result",
                "param_1": "param",
                "param_2": "offset",
                "uVar2": "updated_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08006f5a": {
            "additional_data": {
                "FUN_08005730": {
                    "1": "process_data3",
                    "2": "calculate_result"
                },
                "FUN_08006f5a": {
                    "1": "update_data",
                    "12": "process_data",
                    "2": "reverse_and_update"
                },
                "FUN_08007048": {
                    "1": "update_result"
                },
                "iVar1": {
                    "1": "function_result",
                    "17": "result",
                    "5": "return_value"
                },
                "in_lr": {
                    "1": "unused_parameter",
                    "2": "temp3",
                    "3": "unused_param3"
                },
                "param_1": {
                    "1": "output_data",
                    "13": "output_array",
                    "2": "result_array",
                    "5": "output",
                    "6": "result"
                },
                "param_2": {
                    "1": "pointer",
                    "11": "input_array",
                    "2": "data_address",
                    "4": "data",
                    "7": "input"
                },
                "param_3": {
                    "1": "extra_param_1",
                    "2": "value1",
                    "4": "param1",
                    "5": "param_3",
                    "6": "param_a",
                    "8": "param3"
                },
                "param_4": {
                    "1": "config2",
                    "2": "arg2",
                    "4": "param2",
                    "5": "param_4",
                    "6": "param_b",
                    "8": "param4"
                },
                "unaff_r4": {
                    "1": "unused_variable_1",
                    "2": "temp1",
                    "3": "var1"
                },
                "unaff_r5": {
                    "1": "unaff_r5",
                    "2": "unused2",
                    "3": "var2",
                    "4": "unused_param2"
                }
            },
            "called": [
                "FUN_08007048",
                "FUN_08005730"
            ],
            "calling": [],
            "code": "\nvoid process_data_08006f5a(int *output_array,int input_array,undefined4 param3,undefined4 param4)\n\n{\n  int result;\n  undefined4 unused_param1;\n  undefined4 unused_param2;\n  undefined4 unused_param3;\n  \n  if ((int)((uint)*(ushort *)(input_array + 0xc) << 0x17) < 0) {\n    FUN_08007048(output_array,(int)*(short *)(input_array + 0xe),0,2);\n  }\n  *(ushort *)(input_array + 0xc) = *(ushort *)(input_array + 0xc) & 0xefff;\n  DAT_200006a4 = 0;\n  result = FUN_08005730((int)*(short *)(input_array + 0xe),param3,param4,param4,param4,unused_param1,\n                       unused_param2,unused_param3);\n  if ((result == -1) && (DAT_200006a4 != 0)) {\n    *output_array = DAT_200006a4;\n  }\n  return;\n}\n\n",
            "current_name": "process_data_08006f5a",
            "entrypoint": "0x08006f5a",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08006f5a": "process_data_08006f5a",
                "iVar1": "result",
                "in_lr": "unused_param3",
                "param_1": "output_array",
                "param_2": "input_array",
                "param_3": "param3",
                "param_4": "param4",
                "unaff_r4": "unused_param1",
                "unaff_r5": "unused_param2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08006f92": {
            "additional_data": {
                "FUN_08006f92": {
                    "1": "update_var",
                    "10": "update_status",
                    "2": "update_flags",
                    "3": "update_value"
                },
                "bVar3": {
                    "1": "is_not_found",
                    "16": "is_error",
                    "4": "is_invalid",
                    "6": "is_negative"
                },
                "iVar1": {
                    "2": "return_value",
                    "29": "result"
                },
                "param_1": {
                    "1": "input_ptr",
                    "2": "param_1",
                    "3": "input_array"
                },
                "param_2": {
                    "1": "input_index",
                    "2": "offset",
                    "7": "data"
                },
                "uVar2": {
                    "1": "modified_value",
                    "14": "updated_value",
                    "2": "modified_flags",
                    "3": "flag",
                    "4": "updated_flag"
                }
            },
            "called": [
                "FUN_08007048"
            ],
            "calling": [],
            "code": "\nvoid update_status_08006f92(undefined4 status,int data)\n\n{\n  int result;\n  ushort updated_value;\n  bool is_error;\n  \n  result = FUN_08007048(status,(int)*(short *)(data + 0xe));\n  is_error = result == -1;\n  if (is_error) {\n    updated_value = *(ushort *)(data + 0xc) & 0xefff;\n  }\n  else {\n    *(int *)(data + 0x54) = result;\n    updated_value = *(ushort *)(data + 0xc) | 0x1000;\n  }\n  if (is_error) {\n    *(ushort *)(data + 0xc) = updated_value;\n  }\n  if (!is_error) {\n    *(ushort *)(data + 0xc) = updated_value;\n  }\n  return;\n}\n\n",
            "current_name": "update_status_08006f92",
            "entrypoint": "0x08006f92",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08006f92": "update_status_08006f92",
                "bVar3": "is_error",
                "iVar1": "result",
                "param_1": "status",
                "param_2": "data",
                "uVar2": "updated_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08007004": {
            "additional_data": {
                "DAT_200006a4": {
                    "1": "stored_result"
                },
                "FUN_0800571a": {
                    "1": "perform_operation",
                    "4": "calculate_result"
                },
                "FUN_08007004": {
                    "1": "reverse_and_store_value",
                    "2": "reverse_and_assign_value"
                },
                "iVar1": {
                    "1": "result_code",
                    "15": "result",
                    "8": "return_value"
                },
                "param_1": {
                    "1": "result_pointer",
                    "2": "output_value",
                    "8": "result",
                    "9": "output"
                },
                "param_2": {
                    "1": "input_value1",
                    "12": "input1",
                    "3": "input_param1",
                    "9": "input_1"
                },
                "param_3": {
                    "1": "arg2",
                    "11": "input2",
                    "3": "input_param2",
                    "8": "input_2"
                },
                "param_4": {
                    "1": "input_2",
                    "11": "input3",
                    "3": "input_param3",
                    "8": "input_3"
                }
            },
            "called": [
                "FUN_0800571a"
            ],
            "calling": [
                "FUN_08006dc8"
            ],
            "code": "\nvoid process_data_08007004(int *output,undefined4 input1,undefined4 input2,undefined4 input3)\n\n{\n  int result;\n  \n  DAT_200006a4 = 0;\n  result = FUN_0800571a(input1,input2,input2,0,input3);\n  if ((result == -1) && (DAT_200006a4 != 0)) {\n    *output = DAT_200006a4;\n  }\n  return;\n}\n\n",
            "current_name": "process_data_08007004",
            "entrypoint": "0x08007004",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08007004": "process_data_08007004",
                "iVar1": "result",
                "param_1": "output",
                "param_2": "input1",
                "param_3": "input2",
                "param_4": "input3"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08007028": {
            "additional_data": {
                "*param_1": {
                    "1": "output_value"
                },
                "DAT_200006a4": {
                    "1": "result"
                },
                "FUN_08005724": {
                    "1": "perform_calculation"
                },
                "FUN_08007028": {
                    "1": "extract_integer",
                    "2": "extract_and_assign_value",
                    "5": "process_data"
                },
                "iVar1": {
                    "1": "sub_function_result",
                    "12": "result",
                    "2": "status",
                    "9": "return_value"
                },
                "param_1": {
                    "1": "current_state",
                    "11": "result",
                    "4": "output_value"
                },
                "param_2": {
                    "1": "input_param",
                    "12": "input_value",
                    "16": "input"
                }
            },
            "called": [
                "FUN_08005724"
            ],
            "calling": [
                "FUN_08006e10"
            ],
            "code": "\nvoid process_data_08007028(int *result,undefined4 input)\n\n{\n  int result;\n  \n  DAT_200006a4 = 0;\n  result = FUN_08005724(input);\n  if ((result == -1) && (DAT_200006a4 != 0)) {\n    *result = DAT_200006a4;\n  }\n  return;\n}\n\n",
            "current_name": "process_data_08007028",
            "entrypoint": "0x08007028",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08007028": "process_data_08007028",
                "iVar1": "result",
                "param_1": "result",
                "param_2": "input"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08007048": {
            "additional_data": {
                "DAT_200006a4": {
                    "1": "error_value"
                },
                "FUN_08005728": {
                    "1": "perform_calculation"
                },
                "FUN_08007048": {
                    "1": "reverse_and_store_value",
                    "2": "update_value_if_error",
                    "3": "extract_error_code"
                },
                "iVar1": {
                    "1": "result_code",
                    "14": "return_value",
                    "15": "result"
                },
                "param_1": {
                    "1": "error_code_pointer",
                    "2": "output_value",
                    "3": "result_pointer",
                    "6": "output",
                    "9": "result"
                },
                "param_2": {
                    "1": "input_param_1",
                    "3": "param_2",
                    "5": "input_1",
                    "6": "arg1",
                    "7": "input1"
                },
                "param_3": {
                    "1": "input_param_2",
                    "3": "param_3",
                    "5": "input_2",
                    "6": "arg2",
                    "7": "input2"
                },
                "param_4": {
                    "1": "arg_3",
                    "2": "param3",
                    "3": "param_4",
                    "5": "input_3",
                    "6": "arg3",
                    "7": "input3"
                }
            },
            "called": [
                "FUN_08005728"
            ],
            "calling": [
                "FUN_08006f5a",
                "FUN_08006f92"
            ],
            "code": "\nvoid check_and_assign_value_08007048(int *result,undefined4 input1,undefined4 input2,undefined4 input3)\n\n{\n  int result;\n  \n  DAT_200006a4 = 0;\n  result = FUN_08005728(input1,input2,input3,input3,input3);\n  if ((result == -1) && (DAT_200006a4 != 0)) {\n    *result = DAT_200006a4;\n  }\n  return;\n}\n\n",
            "current_name": "check_and_assign_value_08007048",
            "entrypoint": "0x08007048",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08007048": "check_and_assign_value_08007048",
                "iVar1": "result",
                "param_1": "result",
                "param_2": "input1",
                "param_3": "input2",
                "param_4": "input3"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800706c": {
            "additional_data": {
                "DAT_200006a4": {
                    "2": "error_value"
                },
                "FUN_0800572c": {
                    "1": "calculate_result"
                },
                "FUN_0800706c": {
                    "1": "improve_and_copy_value",
                    "2": "update_param_if_error",
                    "3": "extract_error_code"
                },
                "iVar1": {
                    "1": "sub_function_result",
                    "15": "result",
                    "3": "function_result",
                    "7": "return_value"
                },
                "param_1": {
                    "1": "result_pointer",
                    "3": "error_code",
                    "5": "output_value",
                    "7": "result",
                    "8": "output"
                },
                "param_2": {
                    "2": "input_param_1",
                    "3": "input_value1",
                    "6": "input_1",
                    "7": "arg1",
                    "8": "input1"
                },
                "param_3": {
                    "2": "input_param_2",
                    "3": "input_value2",
                    "6": "input_2",
                    "7": "arg2",
                    "8": "input2"
                },
                "param_4": {
                    "2": "input_param_3",
                    "3": "input_value3",
                    "6": "input_3",
                    "7": "arg3",
                    "8": "input3"
                }
            },
            "called": [
                "FUN_0800572c"
            ],
            "calling": [
                "FUN_08006f38"
            ],
            "code": "\nvoid extract_error_code_0800706c(int *output,undefined4 input1,undefined4 input2,undefined4 input3)\n\n{\n  int result;\n  \n  DAT_200006a4 = 0;\n  result = FUN_0800572c(input1,input2,input3,input3,input3);\n  if ((result == -1) && (DAT_200006a4 != 0)) {\n    *output = DAT_200006a4;\n  }\n  return;\n}\n\n",
            "current_name": "extract_error_code_0800706c",
            "entrypoint": "0x0800706c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800706c": "extract_error_code_0800706c",
                "iVar1": "result",
                "param_1": "output",
                "param_2": "input1",
                "param_3": "input2",
                "param_4": "input3"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08007090": {
            "additional_data": {
                "FUN_08006ac0": {
                    "1": "function_a",
                    "10": "perform_initialization",
                    "3": "execute_sub_function",
                    "8": "sub_function"
                },
                "FUN_08007090": {
                    "1": "update_values",
                    "14": "initialize_flags",
                    "2": "update_flags",
                    "3": "initialize_variables",
                    "6": "initialize_data"
                },
                "UNRECOVERED_JUMPTABLE": {
                    "2": "jumptable",
                    "5": "jump_table"
                },
                "doSomething": {
                    "1": "do_something"
                },
                "initializeData": {
                    "1": "initialize_data"
                }
            },
            "called": [
                "FUN_08006ac0"
            ],
            "calling": [
                "FUN_080060d4"
            ],
            "code": "\nvoid initialize_flags_08007090(void)\n\n{\n  code *jump_table;\n  \n  jump_table = initialize_flags_08007090;\n  FUN_08006ac0();\n  if (-1 < DAT_2000062c << 0x1f) {\n    DAT_2000062c = 1;\n  }\n  if (-1 < DAT_20000628 << 0x1f) {\n    DAT_20000628 = 1;\n  }\n  if (-1 < DAT_20000624 << 0x1f) {\n    DAT_20000624 = 1;\n  }\n  if (-1 < DAT_20000620 << 0x1f) {\n    DAT_20000620 = 1;\n  }\n  if (-1 < DAT_2000061c << 0x1f) {\n    DAT_2000061c = 1;\n  }\n  if (-1 < DAT_20000618 << 0x1f) {\n    DAT_20000618 = 1;\n  }\n  if (-1 < DAT_20000614 << 0x1f) {\n    DAT_20000614 = 1;\n  }\n  if (-1 < DAT_20000610 << 0x1f) {\n    DAT_20000610 = 1;\n  }\n  if (-1 < DAT_2000060c << 0x1f) {\n    DAT_2000060c = 1;\n  }\n  if (-1 < DAT_20000608 << 0x1f) {\n    DAT_20000608 = 1;\n  }\n  if (-1 < DAT_20000604 << 0x1f) {\n    DAT_20000604 = 1;\n  }\n  if (-1 < DAT_20000600 << 0x1f) {\n    DAT_20000600 = 1;\n  }\n                    /* WARNING: Could not recover jumptable at 0x08007128. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jump_table)();\n  return;\n}\n\n",
            "current_name": "initialize_flags_08007090",
            "entrypoint": "0x08007090",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08007090": "initialize_flags_08007090",
                "UNRECOVERED_JUMPTABLE": "jump_table"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08007328": {
            "called": [],
            "calling": [
                "FUN_08006198",
                "FUN_0800010c"
            ],
            "code": "\nvoid FUNC_08007328(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_08007328",
            "entrypoint": "0x08007328",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_08007328": "FUNC_08007328"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_08007334": {
            "called": [],
            "calling": [],
            "code": "\nvoid FUNC_08007334(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_08007334",
            "entrypoint": "0x08007334",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_08007334": "FUNC_08007334"
            },
            "skipped": true,
            "tags": []
        },
        "entry": {
            "called": [
                "FUN_08006198",
                "FUN_08004d44",
                "FUN_08005f6c"
            ],
            "calling": [],
            "code": "\nvoid entry(void)\n\n{\n  int iVar1;\n  undefined4 *puVar2;\n  code *UNRECOVERED_JUMPTABLE;\n  \n  for (iVar1 = 0; (undefined *)(iVar1 + 0x20000000) < &DAT_2000015c; iVar1 = iVar1 + 4) {\n    *(undefined4 *)(iVar1 + 0x20000000) = *(undefined4 *)(iVar1 + 0x8007970);\n  }\n  for (puVar2 = &DAT_20000160; puVar2 < &DAT_200006a8; puVar2 = puVar2 + 1) {\n    *puVar2 = 0;\n  }\n  FUN_08004d44();\n  FUN_08006198();\n  UNRECOVERED_JUMPTABLE = (code *)0x8001c1a;\n  FUN_08005f6c();\n                    /* WARNING: Could not recover jumptable at 0x08001c1a. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*UNRECOVERED_JUMPTABLE)();\n  return;\n}\n\n",
            "current_name": "entry",
            "entrypoint": "0x08001be8",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "thunk_FUN_08005750": {
            "additional_data": {
                "FUN_08005750": {
                    "1": "calculate_result",
                    "2": "get_status_internal",
                    "4": "calculate_return_value",
                    "7": "get_return_value"
                },
                "thunk_FUN_08005750": {
                    "1": "perform_operation",
                    "10": "initialize",
                    "6": "get_status",
                    "9": "get_return_value"
                }
            },
            "called": [
                "FUN_08005750"
            ],
            "calling": [
                "FUN_08006f00"
            ],
            "code": "\nundefined4 initialize_thunk_08005750(void)\n\n{\n  return 1;\n}\n\n",
            "current_name": "initialize_thunk_08005750",
            "entrypoint": "0x08006f34",
            "imported": false,
            "improved": true,
            "renaming": {
                "thunk_FUN_08005750": "initialize_thunk_08005750"
            },
            "skipped": false,
            "tags": []
        }
    },
    "layers": [
        [
            "FUN_0800010c",
            "FUN_08000178",
            "FUN_08000190",
            "FUN_08000194",
            "FUN_0800040c",
            "FUN_0800042c",
            "FUN_080004f8",
            "FUN_080006d4",
            "FUN_0800074c",
            "FUN_080008ba",
            "FUN_0800092c",
            "FUN_080009a8",
            "FUN_080009b8",
            "FUN_080009c8",
            "FUN_080009dc",
            "FUN_080009f0",
            "FUN_08000a04",
            "FUN_08000a18",
            "FUN_08000a2c",
            "FUN_08000a58",
            "FUN_08000aa8",
            "FUN_08000ae8",
            "FUN_08000aec",
            "FUN_08000b08",
            "FUN_08000bcc",
            "FUN_08000cd0",
            "FUN_08001294",
            "FUN_080012a2",
            "FUN_080012c0",
            "FUN_080012e8",
            "FUN_08001310",
            "FUN_0800134e",
            "FUN_0800135a",
            "FUN_08001366",
            "FUN_0800138e",
            "FUN_080013a4",
            "FUN_080014ba",
            "FUN_08001510",
            "FUN_08001550",
            "FUN_0800157c",
            "FUN_080015b2",
            "FUN_080015f8",
            "FUN_080016b4",
            "FUN_08001814",
            "FUN_080018f8",
            "FUN_08001918",
            "FUN_08001960",
            "FUN_080019f6",
            "FUN_08001a44",
            "FUN_08001a66",
            "FUN_08001ab0",
            "FUN_08001b18",
            "FUN_08001b48",
            "FUN_08001c32",
            "FUN_08001c3c",
            "FUN_08001c88",
            "FUN_08001cac",
            "FUN_08001cc4",
            "FUN_08001cd0",
            "FUN_08001e40",
            "FUN_08001e48",
            "FUN_08001f80",
            "FUN_08001f84",
            "FUN_08002004",
            "FUN_080020f0",
            "FUN_0800213c",
            "FUN_0800224c",
            "FUN_08002348",
            "FUN_08002384",
            "FUN_08002470",
            "FUN_08002494",
            "FUN_080024f8",
            "FUN_08002514",
            "FUN_08002540",
            "FUN_08002560",
            "FUN_08002582",
            "FUN_0800258c",
            "FUN_08002624",
            "FUN_08002810",
            "FUN_0800281e",
            "FUN_0800282c",
            "FUN_08002848",
            "FUN_080028d2",
            "FUN_080028de",
            "FUN_08002ab8",
            "FUN_08002ad8",
            "FUN_08002af8",
            "FUN_08002b84",
            "FUN_08002c10",
            "FUN_08002c54",
            "FUN_08002ca6",
            "FUN_08002cf2",
            "FUN_08002d1c",
            "FUN_08002db2",
            "FUN_08002efc",
            "FUN_08002f9c",
            "FUN_0800306c",
            "FUN_0800316c",
            "FUN_080032b4",
            "FUN_080033b8",
            "FUN_08003520",
            "FUN_0800365c",
            "FUN_08003688",
            "FUN_08003a68",
            "FUN_08003ad4",
            "FUN_08003afa",
            "FUN_08003c44",
            "FUN_08003c50",
            "FUN_08003c70",
            "FUN_08003c90",
            "FUN_08003da4",
            "FUN_08003ea0",
            "FUN_08003ed8",
            "FUN_08003f18",
            "FUN_08004092",
            "FUN_080040b0",
            "FUN_08004110",
            "FUN_0800412c",
            "FUN_0800417c",
            "FUN_08004198",
            "FUN_08004204",
            "FUN_080043b4",
            "FUN_0800441a",
            "FUN_08004478",
            "FUN_0800455a",
            "FUN_080045a2",
            "FUN_080045fe",
            "FUN_08004618",
            "FUN_080046b8",
            "FUN_080047e8",
            "FUN_080047f4",
            "FUN_0800480a",
            "FUN_08004828",
            "FUN_08004848",
            "FUN_08004884",
            "FUN_0800492c",
            "FUN_08004948",
            "FUN_08004974",
            "FUN_080049f0",
            "FUN_08004a4c",
            "FUN_08004b34",
            "FUN_08004b3c",
            "FUN_08004b94",
            "FUN_08004b9e",
            "FUN_08004bb0",
            "FUN_08004c30",
            "FUN_08004c48",
            "FUN_08004c52",
            "FUN_08004c5e",
            "FUN_08004c78",
            "FUN_08004c8a",
            "FUN_08004ca2",
            "FUN_08004cb2",
            "FUN_08004cce",
            "FUN_08004ce2",
            "FUN_08004d06",
            "FUN_08004d18",
            "FUN_08004d40",
            "FUN_08004d44",
            "FUN_08004d90",
            "FUN_08004df4",
            "FUN_08004df8",
            "FUN_08004e12",
            "FUN_08004e20",
            "FUN_08004e70",
            "FUN_08004e74",
            "FUN_08004ec4",
            "FUN_08004ef4",
            "FUN_08004f4c",
            "FUN_08005384",
            "FUN_080053d4",
            "FUN_0800548c",
            "FUN_080054b0",
            "FUN_080054d4",
            "FUN_08005510",
            "FUN_08005568",
            "FUN_080055bc",
            "FUN_080055e0",
            "FUN_08005604",
            "FUN_080056d8",
            "FUN_08005714",
            "FUN_0800571a",
            "FUN_08005724",
            "FUN_08005728",
            "FUN_0800572c",
            "FUN_08005730",
            "FUN_0800573c",
            "FUN_08005740",
            "FUN_08005750",
            "FUN_08005754",
            "FUN_080057b4",
            "FUN_08005848",
            "FUN_08005890",
            "FUN_080058e0",
            "FUN_0800591e",
            "FUN_0800598a",
            "FUN_08005a44",
            "FUN_08005a68",
            "FUN_08005b24",
            "FUN_08005b3c",
            "FUN_08005b54",
            "FUN_08005bb0",
            "FUN_08005c1c",
            "FUN_08005c38",
            "FUN_08005c96",
            "FUN_08005cb6",
            "FUN_08005cc0",
            "FUN_08005cd4",
            "FUN_08005ce8",
            "FUN_08005d42",
            "FUN_08005d82",
            "FUN_08005d8a",
            "FUN_08005da8",
            "FUN_08005f2c",
            "FUN_08005f40",
            "FUN_08005f5e",
            "FUN_08005f6c",
            "FUN_08005f8c",
            "FUN_08005fc8",
            "FUN_080060d4",
            "FUN_080060e4",
            "FUN_08006112",
            "FUN_0800611c",
            "FUN_08006158",
            "FUN_08006174",
            "FUN_08006198",
            "FUN_080061e0",
            "FUN_080061f0",
            "FUN_08006288",
            "FUN_08006344",
            "FUN_08006370",
            "FUN_08006394",
            "FUN_080065c0",
            "FUN_080066b0",
            "FUN_080068f0",
            "FUN_08006920",
            "FUN_080069e4",
            "FUN_08006ac0",
            "FUN_08006be0",
            "FUN_08006c40",
            "FUN_08006c88",
            "FUN_08006cb4",
            "FUN_08006d14",
            "FUN_08006dc8",
            "FUN_08006e10",
            "FUN_08006e90",
            "FUN_08006f00",
            "thunk_FUN_08005750",
            "FUN_08006f38",
            "FUN_08006f5a",
            "FUN_08006f92",
            "FUN_08007004",
            "FUN_08007028",
            "FUN_08007048",
            "FUN_0800706c",
            "FUN_08007090"
        ]
    ],
    "locked_functions": [],
    "used_tokens": 907787
}