{
    "functions": {
        "FUN_0800010c": {
            "entrypoint": "0x0800010c",
            "current_name": "initialize_flag_0800010c",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08000118) */\n\nundefined4 initialize_flag_0800010c(undefined4 input)\n\n{\n  if ((char)DAT_20000160 == '\\0') {\n    DAT_20000160._0_1_ = '\\x01';\n  }\n  return input;\n}\n\n",
            "renaming": {
                "FUN_0800010c": "initialize_flag_0800010c",
                "param_1": "input"
            },
            "calling": [],
            "called": [
                "FUN_08007328"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800010c": {
                    "1": "initialize_flag_if_necessary",
                    "22": "initialize_flag",
                    "2": "initialize_data",
                    "3": "initialize_flag_if_needed"
                },
                "param_1": {
                    "12": "input",
                    "4": "data",
                    "3": "input_parameter",
                    "1": "input_param",
                    "8": "input_value"
                },
                "DAT_20000160": {
                    "17": "flag",
                    "2": "data_flag",
                    "3": "flag_variable",
                    "1": "flag_status"
                },
                "FUNC_08007328": {
                    "1": "some_function"
                }
            }
        },
        "FUN_08000178": {
            "entrypoint": "0x08000178",
            "current_name": "find_end_of_string_08000178",
            "code": "\nchar * find_end_of_string_08000178(char *string)\n\n{\n  char current_char;\n  char *next_char;\n  char *current_char;\n  \n  current_char = string;\n  do {\n    next_char = current_char + 1;\n    current_char = *current_char;\n    current_char = next_char;\n  } while (current_char != '\\0');\n  return next_char + (-1 - (int)string);\n}\n\n",
            "renaming": {
                "FUN_08000178": "find_end_of_string_08000178",
                "param_1": "string",
                "cVar1": "current_char",
                "pcVar2": "next_char",
                "pcVar3": "current_char"
            },
            "calling": [
                "FUN_08005ce8",
                "FUN_08005c96"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08000178": {
                    "1": "find_last_character",
                    "18": "find_end_of_string",
                    "3": "get_string_length",
                    "2": "get_string_size"
                },
                "param_1": {
                    "13": "string",
                    "11": "input_string",
                    "1": "text",
                    "5": "str"
                },
                "cVar1": {
                    "9": "current_character",
                    "1": "last_char",
                    "11": "current_char",
                    "6": "current_char_value",
                    "2": "current_character_value"
                },
                "pcVar2": {
                    "9": "next_character",
                    "1": "current_char_ptr",
                    "18": "next_char"
                },
                "pcVar3": {
                    "3": "current_character",
                    "1": "current_char_ptr",
                    "6": "current_ptr",
                    "10": "current_char",
                    "4": "current_position"
                },
                "<original_function_name>": {
                    "1": "find_null_terminated_string"
                },
                "<param_1>": {
                    "1": "string"
                }
            }
        },
        "FUN_08000190": {
            "entrypoint": "0x08000190",
            "current_name": "calculate_result_08000190",
            "code": "\nulonglong calculate_result_08000190(uint input1,uint input2,uint input3,uint input4)\n\n{\n  int shift1;\n  byte carry_flag;\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  uint temp4;\n  uint temp5;\n  int temp6;\n  uint result1;\n  uint temp5;\n  uint result3;\n  uint result4;\n  bool condition1;\n  bool condition2;\n  bool flag3;\n  \n  temp4 = input4 ^ 0x80000000;\n  result1 = input2 << 1;\n  input4 = input4 << 1;\n  condition1 = ((input2 ^ temp4) & 0x7fffffff) == 0;\n  condition2 = condition1 && input1 == input3;\n  if (!condition1 || input1 != input3) {\n    condition2 = (result1 | input1) == 0;\n  }\n  if (!condition2) {\n    condition2 = (input4 | input3) == 0;\n  }\n  temp6 = (int)result1 >> 0x15;\n  if (!condition2) {\n    condition2 = temp6 == -1;\n  }\n  shift1 = (int)input4 >> 0x15;\n  if (!condition2) {\n    condition2 = shift1 == -1;\n  }\n  if (condition2) {\n    if (temp6 == -1 || shift1 == -1) {\n      result1 = temp4;\n      result3 = input3;\n      if (temp6 == -1) {\n        result1 = input2;\n        result3 = input1;\n      }\n      if (temp6 != -1 || shift1 != -1) {\n        input3 = result3;\n        temp4 = result1;\n      }\n      condition2 = (result3 | result1 << 0xc) == 0;\n      if (condition2) {\n        condition2 = (input3 | temp4 << 0xc) == 0;\n      }\n      if (condition2) {\n        condition2 = result1 == temp4;\n      }\n      if (!condition2) {\n        result1 = result1 | 0x80000;\n      }\n      return CONCAT44(result1,result3);\n    }\n    if (((input2 ^ temp4) & 0x7fffffff) != 0 || input1 != input3) {\n      if ((result1 | input1) == 0) {\n        input1 = input3;\n        input2 = temp4;\n      }\n      return CONCAT44(input2,input1);\n    }\n    if (input2 != temp4) {\n      return 0;\n    }\n    if (result1 >> 0x15 == 0) {\n      condition2 = (input1 & 0x80000000) != 0;\n      temp4 = input2 * 2 + (uint)condition2;\n      if (CARRY4(input2,input2) || CARRY4(input2 * 2,(uint)condition2)) {\n        temp4 = temp4 | 0x80000000;\n      }\n      return CONCAT44(temp4,input1 << 1);\n    }\n    if (result1 < 0xffc00000) {\n      return CONCAT44(input2 + 0x100000,input1);\n    }\n    input2 = input2 & 0x80000000;\nLAB_080003d4:\n    return (ulonglong)(input2 | 0x7ff00000) << 0x20;\n  }\n  result1 = result1 >> 0x15;\n  input4 = input4 >> 0x15;\n  result3 = input4 - result1;\n  condition2 = result3 != 0;\n  if (input4 < result1) {\n    result3 = -result3;\n  }\n  temp5 = input1;\n  temp5 = input2;\n  if (condition2 && result1 <= input4) {\n    result1 = result1 + result3;\n    temp5 = input3;\n    temp5 = temp4;\n    input3 = input1;\n    temp4 = input2;\n  }\n  if (0x36 < result3) {\n    return CONCAT44(temp5,temp5);\n  }\n  temp2 = temp5 & 0xfffff | 0x100000;\n  if ((temp5 & 0x80000000) != 0) {\n    condition2 = temp5 != 0;\n    temp5 = -temp5;\n    temp2 = -temp2 - (uint)condition2;\n  }\n  temp5 = temp4 & 0xfffff | 0x100000;\n  if ((temp4 & 0x80000000) != 0) {\n    condition2 = input3 != 0;\n    input3 = -input3;\n    temp5 = -temp5 - (uint)condition2;\n  }\n  if (result1 == result3) {\n    temp5 = temp5 ^ 0x100000;\n    if (result1 == 0) {\n      temp2 = temp2 ^ 0x100000;\n      result1 = 1;\n    }\n    else {\n      result3 = result3 - 1;\n    }\n  }\n  temp4 = -result3 + 0x20;\n  if ((int)result3 < 0x21) {\n    result4 = input3 << (temp4 & 0xff);\n    input3 = input3 >> (result3 & 0xff);\n    temp1 = temp5 + input3;\n    temp3 = temp5 << (temp4 & 0xff);\n    temp4 = temp1 + temp3;\n    temp2 = temp2 + CARRY4(temp5,input3) + ((int)temp5 >> (result3 & 0xff)) +\n            (uint)CARRY4(temp1,temp3);\n  }\n  else {\n    result4 = temp5 << (-result3 + 0x40 & 0xff);\n    if (input3 != 0) {\n      result4 = result4 | 2;\n    }\n    temp5 = (int)temp5 >> (result3 - 0x20 & 0xff);\n    temp4 = temp5 + temp5;\n    temp2 = temp2 + ((int)temp5 >> 0x1f) + (uint)CARRY4(temp5,temp5);\n  }\n  input2 = temp2 & 0x80000000;\n  result3 = temp2;\n  if ((int)temp2 < 0) {\n    condition2 = result4 == 0;\n    result4 = -result4;\n    result3 = -temp4;\n    temp4 = -(uint)!condition2 - temp4;\n    result3 = -(uint)(condition2 <= result3) - temp2;\n  }\n  if (0xfffff < result3) {\n    temp5 = result1 - 1;\n    if (0x1fffff < result3) {\n      temp5 = result3 & 1;\n      result3 = result3 >> 1;\n      carry_flag = (byte)temp4;\n      temp4 = (uint)(temp5 != 0) << 0x1f | temp4 >> 1;\n      result4 = (uint)(carry_flag & 1) << 0x1f | result4 >> 1;\n      temp5 = result1;\n      if (0xffbfffff < result1 * 0x200000) goto LAB_080003d4;\n    }\nLAB_080002a0:\n    condition2 = 0x7fffffff < result4;\n    if (result4 == 0x80000000) {\n      condition2 = (temp4 & 1) != 0;\n    }\n    return CONCAT44(result3 + temp5 * 0x100000 + (uint)CARRY4(temp4,(uint)condition2) | input2,\n                    temp4 + condition2);\n  }\n  condition1 = (result4 & 0x80000000) != 0;\n  result4 = result4 << 1;\n  temp5 = temp4 * 2;\n  condition2 = CARRY4(temp4,temp4);\n  temp4 = temp4 * 2 + (uint)condition1;\n  result3 = result3 * 2 + (uint)(condition2 || CARRY4(temp5,(uint)condition1));\n  temp5 = result1 - 2;\n  if ((result3 & 0x100000) != 0) goto LAB_080002a0;\n  temp5 = temp4;\n  result1 = result3;\n  if (result3 == 0) {\n    temp5 = 0;\n    result1 = temp4;\n  }\n  temp6 = LZCOUNT(result1);\n  if (result3 == 0) {\n    temp6 = temp6 + 0x20;\n  }\n  result3 = temp6 - 0xb;\n  flag3 = SBORROW4(result3,0x20);\n  temp4 = temp6 - 0x2b;\n  condition2 = (int)temp4 < 0;\n  condition1 = temp4 == 0;\n  if ((int)result3 < 0x20) {\n    flag3 = SCARRY4(temp4,0xc);\n    temp6 = temp6 + -0x1f;\n    condition2 = temp6 < 0;\n    condition1 = temp6 == 0;\n    temp4 = result3;\n    if (!condition1 && condition2 == flag3) {\n      temp5 = result1 << (result3 & 0xff);\n      result1 = result1 >> (0xcU - temp6 & 0xff);\n      goto LAB_08000318;\n    }\n  }\n  if (condition1 || condition2 != flag3) {\n    result4 = 0x20 - temp4;\n  }\n  result1 = result1 << (temp4 & 0xff);\n  if (condition1 || condition2 != flag3) {\n    result1 = result1 | temp5 >> (result4 & 0xff);\n  }\n  if (condition1 || condition2 != flag3) {\n    temp5 = temp5 << (temp4 & 0xff);\n  }\nLAB_08000318:\n  if ((int)result3 <= (int)temp5) {\n    return CONCAT44(result1 + (temp5 - result3) * 0x100000 | input2,temp5);\n  }\n  temp4 = ~(temp5 - result3);\n  if ((int)temp4 < 0x1f) {\n    temp6 = temp4 - 0x13;\n    if (temp6 != 0 && temp6 < 0 == SCARRY4(temp4 - 0x1f,0xc)) {\n      return CONCAT44(temp2,temp5 >> (0x20 - (0xcU - temp6) & 0xff) | result1 << (0xcU - temp6 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    temp4 = temp4 + 1;\n    return CONCAT44(input2 | result1 >> (temp4 & 0xff),\n                    temp5 >> (temp4 & 0xff) | result1 << (0x20 - temp4 & 0xff));\n  }\n  return CONCAT44(temp2,result1 >> (temp4 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_08000190": "calculate_result_08000190",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar6": "temp4",
                "uVar9": "result1",
                "uVar11": "result3",
                "uVar12": "result4",
                "bVar13": "condition1",
                "bVar14": "condition2",
                "bVar15": "flag3",
                "iVar8": "temp6",
                "iVar1": "shift1",
                "bVar2": "carry_flag",
                "uVar3": "temp1",
                "uVar4": "temp2",
                "uVar5": "temp3",
                "uVar7": "temp5",
                "uVar10": "temp5",
                "uVar1": "temp_1"
            },
            "calling": [
                "FUN_080016b4",
                "FUN_08005da8",
                "FUN_08001a66",
                "FUN_08001814"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08000190": {
                    "1": "multiply_and_shift",
                    "4": "calculate_result",
                    "2": "reverse_operation",
                    "3": "reverse_bits"
                },
                "param_1": {
                    "4": "input_1",
                    "1": "input_a",
                    "2": "operand1",
                    "21": "input1"
                },
                "param_2": {
                    "21": "input2",
                    "1": "input_num_2",
                    "2": "operand2",
                    "4": "input_2"
                },
                "param_3": {
                    "4": "input_3",
                    "1": "quotient",
                    "2": "operand3",
                    "21": "input3"
                },
                "param_4": {
                    "1": "d",
                    "4": "input_4",
                    "2": "operand4",
                    "21": "input4"
                },
                "uVar6": {
                    "1": "result",
                    "3": "temp1",
                    "9": "temp4"
                },
                "uVar9": {
                    "1": "temp1",
                    "2": "temp6",
                    "3": "temp4"
                },
                "uVar11": {
                    "1": "difference",
                    "2": "temp3",
                    "3": "temp6"
                },
                "uVar12": {
                    "1": "result2_shifted",
                    "2": "temp4",
                    "3": "result4"
                },
                "bVar13": {
                    "1": "temp_13",
                    "8": "condition1",
                    "6": "flag1",
                    "2": "is_equal",
                    "4": "is_zero"
                },
                "bVar14": {
                    "1": "is_condition_2",
                    "8": "condition2",
                    "6": "flag2",
                    "2": "is_condition2"
                },
                "bVar15": {
                    "1": "bool_var3",
                    "2": "overflow",
                    "6": "condition3"
                },
                "iVar8": {
                    "3": "shift_amount2",
                    "1": "temp_8",
                    "5": "temp6",
                    "2": "temp3"
                },
                "iVar1": {
                    "1": "count_1",
                    "2": "bit_count1",
                    "3": "shift_amount1"
                },
                "bVar2": {
                    "1": "bit",
                    "3": "carry_bit",
                    "4": "carry_flag",
                    "2": "carry_flag1"
                },
                "uVar3": {
                    "1": "temp_var1",
                    "15": "temp1",
                    "4": "result1",
                    "2": "temp_1"
                },
                "uVar4": {
                    "1": "result_upper",
                    "4": "result2",
                    "2": "temp_2",
                    "14": "temp2"
                },
                "uVar5": {
                    "1": "lower_val2",
                    "2": "temp_3",
                    "3": "result3",
                    "14": "temp3"
                },
                "uVar7": {
                    "1": "result4",
                    "10": "temp5",
                    "2": "result_2",
                    "3": "temp2"
                },
                "uVar10": {
                    "1": "result_2",
                    "2": "temp9",
                    "3": "result2",
                    "5": "temp5"
                },
                "uVar1": {
                    "1": "temp_1"
                },
                "uVar16": {
                    "1": "final_result"
                },
                "uVar17": {
                    "1": "temp_result_2"
                }
            }
        },
        "FUN_08000194": {
            "entrypoint": "0x08000194",
            "current_name": "calculate_08000194",
            "code": "\nulonglong calculate_08000194(uint input1,uint input2,uint input3,uint input4)\n\n{\n  int shift_amount1;\n  byte carry;\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  int shift_amount2;\n  uint shifted_input2;\n  uint temp5;\n  uint result2;\n  uint difference;\n  uint temp5;\n  uint result;\n  bool is_equal;\n  bool is_zero;\n  bool is_negative;\n  \n  shifted_input2 = input2 << 1;\n  result2 = input4 << 1;\n  is_equal = ((input2 ^ input4) & 0x7fffffff) == 0;\n  is_zero = is_equal && input1 == input3;\n  if (!is_equal || input1 != input3) {\n    is_zero = (shifted_input2 | input1) == 0;\n  }\n  if (!is_zero) {\n    is_zero = (result2 | input3) == 0;\n  }\n  shift_amount2 = (int)shifted_input2 >> 0x15;\n  if (!is_zero) {\n    is_zero = shift_amount2 == -1;\n  }\n  shift_amount1 = (int)result2 >> 0x15;\n  if (!is_zero) {\n    is_zero = shift_amount1 == -1;\n  }\n  if (is_zero) {\n    if (shift_amount2 == -1 || shift_amount1 == -1) {\n      result2 = input4;\n      shifted_input2 = input3;\n      if (shift_amount2 == -1) {\n        result2 = input2;\n        shifted_input2 = input1;\n      }\n      if (shift_amount2 != -1 || shift_amount1 != -1) {\n        input3 = shifted_input2;\n        input4 = result2;\n      }\n      is_zero = (shifted_input2 | result2 << 0xc) == 0;\n      if (is_zero) {\n        is_zero = (input3 | input4 << 0xc) == 0;\n      }\n      if (is_zero) {\n        is_zero = result2 == input4;\n      }\n      if (!is_zero) {\n        result2 = result2 | 0x80000;\n      }\n      return CONCAT44(result2,shifted_input2);\n    }\n    if (((input2 ^ input4) & 0x7fffffff) != 0 || input1 != input3) {\n      if ((shifted_input2 | input1) == 0) {\n        input1 = input3;\n        input2 = input4;\n      }\n      return CONCAT44(input2,input1);\n    }\n    if (input2 != input4) {\n      return 0;\n    }\n    if (shifted_input2 >> 0x15 == 0) {\n      is_zero = (input1 & 0x80000000) != 0;\n      result2 = input2 * 2 + (uint)is_zero;\n      if (CARRY4(input2,input2) || CARRY4(input2 * 2,(uint)is_zero)) {\n        result2 = result2 | 0x80000000;\n      }\n      return CONCAT44(result2,input1 << 1);\n    }\n    if (shifted_input2 < 0xffc00000) {\n      return CONCAT44(input2 + 0x100000,input1);\n    }\n    input2 = input2 & 0x80000000;\nLAB_080003d4:\n    return (ulonglong)(input2 | 0x7ff00000) << 0x20;\n  }\n  shifted_input2 = shifted_input2 >> 0x15;\n  result2 = result2 >> 0x15;\n  difference = result2 - shifted_input2;\n  is_zero = difference != 0;\n  if (result2 < shifted_input2) {\n    difference = -difference;\n  }\n  temp5 = input1;\n  temp3 = input2;\n  if (is_zero && shifted_input2 <= result2) {\n    shifted_input2 = shifted_input2 + difference;\n    temp5 = input3;\n    temp3 = input4;\n    input3 = input1;\n    input4 = input2;\n  }\n  if (0x36 < difference) {\n    return CONCAT44(temp3,temp5);\n  }\n  result2 = temp3 & 0xfffff | 0x100000;\n  if ((temp3 & 0x80000000) != 0) {\n    is_zero = temp5 != 0;\n    temp5 = -temp5;\n    result2 = -result2 - (uint)is_zero;\n  }\n  temp3 = input4 & 0xfffff | 0x100000;\n  if ((input4 & 0x80000000) != 0) {\n    is_zero = input3 != 0;\n    input3 = -input3;\n    temp3 = -temp3 - (uint)is_zero;\n  }\n  if (shifted_input2 == difference) {\n    temp3 = temp3 ^ 0x100000;\n    if (shifted_input2 == 0) {\n      result2 = result2 ^ 0x100000;\n      shifted_input2 = 1;\n    }\n    else {\n      difference = difference - 1;\n    }\n  }\n  result = -difference + 0x20;\n  if ((int)difference < 0x21) {\n    temp5 = input3 << (result & 0xff);\n    input3 = input3 >> (difference & 0xff);\n    temp1 = temp5 + input3;\n    temp2 = temp3 << (result & 0xff);\n    result = temp1 + temp2;\n    result2 = result2 + CARRY4(temp5,input3) + ((int)temp3 >> (difference & 0xff)) +\n            (uint)CARRY4(temp1,temp2);\n  }\n  else {\n    temp5 = temp3 << (-difference + 0x40 & 0xff);\n    if (input3 != 0) {\n      temp5 = temp5 | 2;\n    }\n    temp3 = (int)temp3 >> (difference - 0x20 & 0xff);\n    result = temp5 + temp3;\n    result2 = result2 + ((int)temp3 >> 0x1f) + (uint)CARRY4(temp5,temp3);\n  }\n  input2 = result2 & 0x80000000;\n  difference = result2;\n  if ((int)result2 < 0) {\n    is_zero = temp5 == 0;\n    temp5 = -temp5;\n    difference = -result;\n    result = -(uint)!is_zero - result;\n    difference = -(uint)(is_zero <= difference) - result2;\n  }\n  if (0xfffff < difference) {\n    temp5 = shifted_input2 - 1;\n    if (0x1fffff < difference) {\n      result2 = difference & 1;\n      difference = difference >> 1;\n      carry = (byte)result;\n      result = (uint)(result2 != 0) << 0x1f | result >> 1;\n      temp5 = (uint)(carry & 1) << 0x1f | temp5 >> 1;\n      temp5 = shifted_input2;\n      if (0xffbfffff < shifted_input2 * 0x200000) goto LAB_080003d4;\n    }\nLAB_080002a0:\n    is_zero = 0x7fffffff < temp5;\n    if (temp5 == 0x80000000) {\n      is_zero = (result & 1) != 0;\n    }\n    return CONCAT44(difference + temp5 * 0x100000 + (uint)CARRY4(result,(uint)is_zero) | input2,\n                    result + is_zero);\n  }\n  is_equal = (temp5 & 0x80000000) != 0;\n  temp5 = temp5 << 1;\n  temp5 = result * 2;\n  is_zero = CARRY4(result,result);\n  result = result * 2 + (uint)is_equal;\n  difference = difference * 2 + (uint)(is_zero || CARRY4(temp5,(uint)is_equal));\n  temp5 = shifted_input2 - 2;\n  if ((difference & 0x100000) != 0) goto LAB_080002a0;\n  temp3 = result;\n  shifted_input2 = difference;\n  if (difference == 0) {\n    temp3 = 0;\n    shifted_input2 = result;\n  }\n  shift_amount2 = LZCOUNT(shifted_input2);\n  if (difference == 0) {\n    shift_amount2 = shift_amount2 + 0x20;\n  }\n  result = shift_amount2 - 0xb;\n  is_negative = SBORROW4(result,0x20);\n  difference = shift_amount2 - 0x2b;\n  is_zero = (int)difference < 0;\n  is_equal = difference == 0;\n  if ((int)result < 0x20) {\n    is_negative = SCARRY4(difference,0xc);\n    shift_amount2 = shift_amount2 + -0x1f;\n    is_zero = shift_amount2 < 0;\n    is_equal = shift_amount2 == 0;\n    difference = result;\n    if (!is_equal && is_zero == is_negative) {\n      temp3 = shifted_input2 << (result & 0xff);\n      shifted_input2 = shifted_input2 >> (0xcU - shift_amount2 & 0xff);\n      goto LAB_08000318;\n    }\n  }\n  if (is_equal || is_zero != is_negative) {\n    temp5 = 0x20 - difference;\n  }\n  shifted_input2 = shifted_input2 << (difference & 0xff);\n  if (is_equal || is_zero != is_negative) {\n    shifted_input2 = shifted_input2 | temp3 >> (temp5 & 0xff);\n  }\n  if (is_equal || is_zero != is_negative) {\n    temp3 = temp3 << (difference & 0xff);\n  }\nLAB_08000318:\n  if ((int)result <= (int)temp5) {\n    return CONCAT44(shifted_input2 + (temp5 - result) * 0x100000 | input2,temp3);\n  }\n  difference = ~(temp5 - result);\n  if ((int)difference < 0x1f) {\n    shift_amount2 = difference - 0x13;\n    if (shift_amount2 != 0 && shift_amount2 < 0 == SCARRY4(difference - 0x1f,0xc)) {\n      return CONCAT44(result2,temp3 >> (0x20 - (0xcU - shift_amount2) & 0xff) | shifted_input2 << (0xcU - shift_amount2 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    difference = difference + 1;\n    return CONCAT44(input2 | shifted_input2 >> (difference & 0xff),\n                    temp3 >> (difference & 0xff) | shifted_input2 << (0x20 - difference & 0xff));\n  }\n  return CONCAT44(result2,shifted_input2 >> (difference - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "iVar1": "shift_amount1",
                "bVar2": "carry",
                "uVar3": "temp1",
                "uVar4": "temp2",
                "uVar5": "temp3",
                "iVar6": "shift_amount2",
                "uVar7": "shifted_input2",
                "uVar8": "temp5",
                "uVar9": "result2",
                "uVar10": "difference",
                "uVar11": "temp5",
                "uVar12": "result",
                "bVar13": "is_equal",
                "bVar14": "is_zero",
                "bVar15": "is_negative",
                "FUN_08000194": "calculate_08000194"
            },
            "calling": [
                "FUN_080015f8",
                "FUN_080016b4",
                "FUN_08005da8",
                "FUN_08000cd0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "param_1": {
                    "7": "input_1",
                    "1": "input_a",
                    "15": "input1"
                },
                "param_2": {
                    "1": "arg2",
                    "15": "input2",
                    "7": "input_2"
                },
                "param_3": {
                    "7": "input_3",
                    "1": "num3",
                    "15": "input3"
                },
                "param_4": {
                    "1": "operand4",
                    "7": "input_4",
                    "15": "input4"
                },
                "iVar1": {
                    "1": "shifted_b",
                    "2": "shift_amount1"
                },
                "bVar2": {
                    "1": "lsb",
                    "7": "carry",
                    "4": "carry_flag"
                },
                "uVar3": {
                    "1": "shifted_result1",
                    "10": "temp1",
                    "2": "result1"
                },
                "uVar4": {
                    "1": "shifted_result_1",
                    "10": "temp2"
                },
                "uVar5": {
                    "1": "result_2",
                    "2": "shifted_input2",
                    "9": "temp3"
                },
                "iVar6": {
                    "1": "shifted_index1",
                    "2": "shift2",
                    "3": "shift_amount2"
                },
                "uVar7": {
                    "1": "double_input2",
                    "2": "shifted_input_2",
                    "4": "shifted_input2",
                    "3": "temp4"
                },
                "uVar8": {
                    "1": "temp4",
                    "3": "temp5"
                },
                "uVar9": {
                    "1": "temp3",
                    "2": "temp4"
                },
                "uVar10": {
                    "1": "result",
                    "7": "difference",
                    "2": "temp4"
                },
                "uVar11": {
                    "1": "result_2",
                    "2": "temp4",
                    "3": "temp5"
                },
                "uVar12": {
                    "1": "temp_var_10",
                    "2": "temp9",
                    "3": "result"
                },
                "bVar13": {
                    "2": "is_same_sign",
                    "1": "is_negative",
                    "6": "is_equal",
                    "3": "is_zero"
                },
                "bVar14": {
                    "1": "result",
                    "2": "flag2",
                    "9": "is_zero"
                },
                "bVar15": {
                    "1": "is_borrow",
                    "7": "is_negative"
                },
                "FUN_08000194": {
                    "1": "calculate_concat44",
                    "2": "reverse_bits",
                    "4": "calculate",
                    "3": "calculate_result"
                },
                "uVar15": {
                    "1": "result_part3"
                },
                "uVar16": {
                    "1": "result_part4"
                },
                "bVar16": {
                    "1": "is_negative"
                },
                "bVar17": {
                    "1": "is_overflown"
                },
                "bVar18": {
                    "1": "is_carry"
                },
                "bVar19": {
                    "1": "is_zero_flag"
                },
                "bVar20": {
                    "1": "is_sign_flag"
                },
                "uVar13": {
                    "1": "result_part1"
                },
                "uVar14": {
                    "1": "result_part2"
                },
                "uVar17": {
                    "1": "low_result_part1"
                },
                "uVar18": {
                    "1": "low_result_part2"
                },
                "uVar19": {
                    "1": "low_result_part3"
                },
                "uVar20": {
                    "1": "low_result_part4"
                },
                "uVar21": {
                    "1": "shift_val_diff"
                },
                "uVar22": {
                    "1": "shift_comp_result"
                },
                "uVar23": {
                    "1": "shift_result"
                },
                "UVar10": {
                    "1": "shift_count"
                }
            }
        },
        "FUN_0800040c": {
            "entrypoint": "0x0800040c",
            "current_name": "reverse_bits_0800040c",
            "code": "\nulonglong reverse_bits_0800040c(uint input)\n\n{\n  uint result;\n  uint shift_amount;\n  int count;\n  uint shift_amount;\n  uint remaining_bits;\n  bool is_negative;\n  bool is_zero;\n  bool is_overflow;\n  \n  if (input == 0) {\n    return 0;\n  }\n  result = 0;\n  count = LZCOUNT(input);\n  shift_amount = count + 0x15;\n  is_overflow = is_borrow_set(shift_amount,0x20);\n  shift_amount = count - 0xb;\n  is_negative = (int)shift_amount < 0;\n  is_zero = shift_amount == 0;\n  if (shift_amount < 0x20) {\n    is_overflow = is_carry_set(shift_amount,0xc);\n    is_negative = false;\n    is_zero = count + 1 == 0;\n    shift_amount = shift_amount;\n    if (!is_zero && is_overflow == false) {\n      result = input << shift_amount;\n      input = input >> (0xcU - (count + 1) & 0xff);\n      goto bitwise_operations;\n    }\n  }\n  if (is_zero || is_negative != is_overflow) {\n    remaining_bits = 0x20 - shift_amount;\n  }\n  input = input << (shift_amount & 0xff);\n  if (is_zero || is_negative != is_overflow) {\n    input = input | zero_shift >> (remaining_bits & 0xff);\n  }\n  if (is_zero || is_negative != is_overflow) {\n    result = 0 << (shift_amount & 0xff);\n  }\nbitwise_operations:\n  if (shift_amount < 0x433) {\n    return combine_values(input + (0x432 - shift_amount) * 0x100000,result);\n  }\n  shift_amount = ~(0x432 - shift_amount);\n  if (0x1e < (int)shift_amount) {\n    return (ulonglong)(input >> (shift_amount - 0x1f & 0xff));\n  }\n  count = shift_amount - 0x13;\n  if (count == 0 || count < 0 != is_carry_set(shift_amount - 0x1f,0xc)) {\n    shift_amount = shift_amount + 1;\n    return combine_values(input >> (shift_amount & 0xff),\n                    result >> (shift_amount & 0xff) | input << (0x20 - shift_amount & 0xff));\n  }\n  return (ulonglong)(result >> (0x20 - (0xcU - count) & 0xff) | input << (0xcU - count & 0xff));\n}\n\n",
            "renaming": {
                "FUN_0800040c": "reverse_bits_0800040c",
                "param_1": "input",
                "uVar1": "result",
                "uVar2": "shift_amount",
                "iVar3": "count",
                "uVar4": "shift_amount",
                "in_r12": "remaining_bits",
                "bVar5": "is_negative",
                "bVar6": "is_zero",
                "bVar7": "is_overflow",
                "LAB_08000318": "bitwise_operations",
                "CONCAT44": "combine_values",
                "SCARRY4": "is_carry_set",
                "SBORROW4": "is_borrow_set",
                "0U": "zero_shift"
            },
            "calling": [
                "FUN_080015f8",
                "FUN_08005da8",
                "FUN_08000cd0",
                "FUN_08001918",
                "FUN_08001814"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800040c": {
                    "1": "compute_shifted_value",
                    "2": "shift_and_rotate_bits",
                    "3": "shift_and_concat",
                    "8": "reverse_bits"
                },
                "param_1": {
                    "25": "input",
                    "1": "input_data",
                    "2": "input_num",
                    "3": "input_value"
                },
                "uVar1": {
                    "1": "concatenated_value",
                    "6": "shifted_value",
                    "5": "result1",
                    "3": "upper_bits",
                    "2": "shifted_num",
                    "9": "result"
                },
                "uVar2": {
                    "1": "result_b",
                    "4": "shift",
                    "17": "shift_amount"
                },
                "iVar3": {
                    "1": "leading_zeros_count",
                    "13": "count",
                    "9": "leading_zeros",
                    "2": "bit_count"
                },
                "uVar4": {
                    "1": "adjusted_shift_count",
                    "3": "adjusted_shift",
                    "4": "adjusted_count",
                    "6": "shift_amount",
                    "2": "adjusted_shift_amount"
                },
                "in_r12": {
                    "3": "shift_amount",
                    "1": "remaining_shifts",
                    "14": "remaining_bits"
                },
                "bVar5": {
                    "1": "count_less_than_zero",
                    "26": "is_negative",
                    "3": "is_negative_shift"
                },
                "bVar6": {
                    "1": "is_shift_amount_zero",
                    "26": "is_zero",
                    "3": "is_zero_shift"
                },
                "bVar7": {
                    "6": "is_carry",
                    "1": "is_borrowed",
                    "2": "carry",
                    "8": "is_overflow",
                    "5": "is_borrow"
                },
                "uCantThinkOfAName": {
                    "1": "bit_mask"
                },
                "LAB_08000318": {
                    "1": "cleanup_label",
                    "2": "bitwise_operations"
                },
                "CONCAT44": {
                    "1": "concat",
                    "2": "combine_values"
                },
                "0x432": {
                    "1": "constant_a"
                },
                "0x433": {
                    "1": "constant_b"
                },
                "0x1e": {
                    "1": "constant_c"
                },
                "0x13": {
                    "1": "constant_d"
                },
                "SCARRY4": {
                    "1": "is_carry_set"
                },
                "SBORROW4": {
                    "1": "is_borrow_set"
                },
                "0U": {
                    "1": "zero_shift"
                }
            }
        },
        "FUN_0800042c": {
            "entrypoint": "0x0800042c",
            "current_name": "reverse_bits_0800042c",
            "code": "\nulonglong reverse_bits_0800042c(uint input)\n\n{\n  uint count;\n  uint abs_input;\n  uint shift_amount;\n  int leading_zeros;\n  uint final_shift_amount;\n  uint sign_bit;\n  uint remaining_bits;\n  bool is_negative;\n  bool is_zero;\n  bool carry;\n  \n  if (input == 0) {\n    return 0;\n  }\n  sign_bit = input & 0x80000000;\n  abs_input = input;\n  if ((int)sign_bit < 0) {\n    abs_input = -input;\n  }\n  count = 0;\n  leading_zeros = LZCOUNT(abs_input);\n  final_shift_amount = leading_zeros + 0x15;\n  carry = subtraction_borrow(final_shift_amount,0x20);\n  shift_amount = leading_zeros - 0xb;\n  is_negative = value < 0;\n  is_zero = shift_amount == 0;\n  if (final_shift_amount < 0x20) {\n    carry = subtraction_carry(shift_amount,0xc);\n    is_negative = false;\n    is_zero = leading_zeros + 1 == 0;\n    shift_amount = final_shift_amount;\n    if (!is_zero && carry == false) {\n      count = abs_input << final_shift_amount;\n      abs_input = abs_input >> (0xcU - (leading_zeros + 1) & 0xff);\n      goto apply_shift;\n    }\n  }\n  if (is_zero || is_negative != carry) {\n    remaining_bits = 0x20 - shift_amount;\n  }\n  abs_input = abs_input << (shift_amount & 0xff);\n  if (is_zero || is_negative != carry) {\n    abs_input = abs_input | 0U >> (remaining_bits & 0xff);\n  }\n  if (is_zero || is_negative != carry) {\n    count = 0 << (shift_amount & 0xff);\n  }\napply_shift:\n  if (final_shift_amount < 0x433) {\n    return concatenate(abs_input + (0x432 - final_shift_amount) * 0x100000 | sign_bit,count);\n  }\n  shift_amount = ~(0x432 - final_shift_amount);\n  if (0x1e < value) {\n    return concatenate(input,abs_input >> (shift_amount - 0x1f & 0xff)) & 0x80000000ffffffff;\n  }\n  leading_zeros = shift_amount - 0x13;\n  if (leading_zeros == 0 || leading_zeros < 0 != subtraction_carry(shift_amount - 0x1f,0xc)) {\n    shift_amount = shift_amount + 1;\n    return concatenate(sign_bit | abs_input >> (shift_amount & 0xff),\n                    count >> (shift_amount & 0xff) | abs_input << (0x20 - shift_amount & 0xff));\n  }\n  return concatenate(input,count >> (0x20 - (0xcU - leading_zeros) & 0xff) | abs_input << (0xcU - leading_zeros & 0xff))\n         & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_0800042c": "reverse_bits_0800042c",
                "param_1": "input",
                "uVar1": "count",
                "uVar2": "abs_input",
                "uVar3": "shift_amount",
                "iVar4": "leading_zeros",
                "uVar5": "final_shift_amount",
                "uVar6": "sign_bit",
                "in_r12": "remaining_bits",
                "bVar7": "is_negative",
                "bVar8": "is_zero",
                "bVar9": "carry",
                "LAB_08000318": "apply_shift",
                "CONCAT44": "concatenate",
                "SCARRY4": "subtraction_carry",
                "SBORROW4": "subtraction_borrow",
                "(int)uVar3": "value"
            },
            "calling": [
                "FUN_08005da8",
                "FUN_08000cd0",
                "FUN_08001918"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800042c": {
                    "1": "convert_to_u_int64",
                    "3": "bitwise_shift",
                    "11": "reverse_bits"
                },
                "param_1": {
                    "26": "input",
                    "1": "value",
                    "2": "input_value"
                },
                "uVar1": {
                    "2": "result",
                    "1": "shifted_input",
                    "4": "bit_count",
                    "3": "shift_count"
                },
                "uVar2": {
                    "1": "abs_value",
                    "2": "absolute_number",
                    "4": "absolute_value",
                    "17": "abs_input"
                },
                "uVar3": {
                    "1": "abs_shift_amount",
                    "2": "shift",
                    "18": "shift_amount"
                },
                "iVar4": {
                    "1": "temp3",
                    "2": "leading_zeroes",
                    "21": "leading_zeros",
                    "3": "bit_count"
                },
                "uVar5": {
                    "1": "result",
                    "3": "total_bits",
                    "4": "final_shift_amount",
                    "2": "adjusted_shift_amount"
                },
                "uVar6": {
                    "1": "result",
                    "20": "sign_bit",
                    "3": "input_sign",
                    "2": "sign_mask"
                },
                "in_r12": {
                    "2": "bit_mask",
                    "17": "remaining_bits",
                    "1": "constant"
                },
                "bVar7": {
                    "14": "is_negative",
                    "1": "leading_zeros_less_than_zero",
                    "2": "condition1"
                },
                "bVar8": {
                    "1": "condition_2",
                    "2": "is_shift_amount_zero",
                    "16": "is_zero"
                },
                "bVar9": {
                    "3": "is_carry",
                    "2": "is_negative",
                    "1": "carry_occurred",
                    "4": "carry"
                },
                "LAB_08000318": {
                    "1": "shift_result"
                },
                "CONCAT44": {
                    "1": "combine_values",
                    "2": "concatenate"
                },
                "SCARRY4": {
                    "1": "subtraction_carry"
                },
                "SBORROW4": {
                    "1": "subtraction_borrow"
                },
                "uVar2 + (0x432 - uVar5) * 0x100000 | uVar6": {
                    "1": "result1"
                },
                "uVar2 >> (uVar3 - 0x1f & 0xff)": {
                    "1": "result2"
                },
                "uVar6 | uVar2 >> (uVar3 & 0xff)": {
                    "1": "result3"
                },
                "uVar1 >> (uVar3 & 0xff) | uVar2 << (0x20 - uVar3 & 0xff)": {
                    "1": "result4"
                },
                "uVar1 >> (0x20 - (0xcU - iVar4) & 0xff) | uVar2 << (0xcU - iVar4 & 0xff)": {
                    "1": "result"
                },
                "0x80000000": {
                    "1": "sign_bit"
                },
                "0x20": {
                    "1": "bit_size"
                },
                "0xc": {
                    "1": "constant_c"
                },
                "0x15": {
                    "1": "addition_constant"
                },
                "0x433": {
                    "1": "threshold"
                },
                "0x432": {
                    "1": "threshold_minus_one"
                },
                "0x100000": {
                    "1": "base_shift_constant"
                },
                "0x1e": {
                    "1": "upper_threshold"
                },
                "0x13": {
                    "1": "shift_threshold"
                },
                "uVar7": {
                    "1": "mask"
                },
                "0": {
                    "1": "zero_bits"
                },
                "uVar3 & 0xff": {
                    "1": "shift_mask2"
                },
                "uVar2 >> (shiftMask & 0xff)": {
                    "1": "shifted_bits_left"
                },
                "0x20 - uVar3 & 0xff": {
                    "1": "shift_mask_right"
                },
                "uVar2 << (0x20 - uVar3 & 0xff)": {
                    "1": "shifted_bits_right"
                },
                "~(0x432 - uVar5)": {
                    "1": "inverse_value"
                },
                "(int)uVar3": {
                    "1": "value"
                },
                "iVar4 == 0 || iVar4 < 0 != SCARRY4(uVar3 - 0x1f,0xc)": {
                    "1": "is_positive"
                },
                "uVar3 + 1": {
                    "1": "shifted_mask"
                }
            }
        },
        "FUN_080004f8": {
            "entrypoint": "0x080004f8",
            "current_name": "calculate_result_080004f8",
            "code": "\nulonglong calculate_result_080004f8(undefined4 input1,uint input2,uint input3,uint input4)\n\n{\n  ulonglong result1;\n  longlong result2;\n  uint temp1;\n  uint temp2;\n  int temp3;\n  uint temp4;\n  uint temp5;\n  uint temp6;\n  uint temp7;\n  bool flag1;\n  bool flag2;\n  bool flag3;\n  ulonglong combined_input;\n  \n  combined_input = CONCAT44(input2,input1);\n  temp6 = 0x7ff;\n  temp2 = input2 >> 0x14 & 0x7ff;\n  flag1 = temp2 == 0;\n  if (!flag1) {\n    temp5 = input4 >> 0x14 & 0x7ff;\n    flag1 = temp5 == 0;\n  }\n  if (!flag1) {\n    flag1 = temp2 == 0x7ff;\n  }\n  if (!flag1) {\n    flag1 = temp5 == 0x7ff;\n  }\n  if (flag1) {\n    combined_input = reverse_bits();\n  }\n  temp1 = (uint)(combined_input >> 0x20);\n  temp3 = temp2 + temp5;\n  temp2 = temp1 ^ input4;\n  temp1 = temp1 & ~(temp6 << 0x15);\n  input4 = input4 & ~(temp6 << 0x15);\n  flag1 = ((uint)combined_input | temp1 << 0xc) == 0;\n  if (!flag1) {\n    flag1 = (input3 | input4 << 0xc) == 0;\n  }\n  temp1 = temp1 | 0x100000;\n  input4 = input4 | 0x100000;\n  if (flag1) {\n    input3 = (uint)combined_input | input3;\n    input4 = (temp2 & 0x80000000 | temp1) ^ input4;\n    temp2 = temp6 >> 1;\n    flag3 = SBORROW4(temp3,temp2);\n    temp4 = temp3 - temp2;\n    flag1 = temp4 == 0;\n    temp1 = temp4;\n    if (!flag1 && (int)temp2 <= temp3) {\n      flag3 = SBORROW4(temp6,temp4);\n      temp1 = temp6 - temp4;\n      flag1 = temp6 == temp4;\n    }\n    if (!flag1 && (int)temp1 < 0 == flag3) {\n      input4 = input4 | temp4 * 0x100000;\n    }\n    if (!flag1 && (int)temp1 < 0 == flag3) {\n      return CONCAT44(input4,input3);\n    }\n    input4 = input4 | 0x100000;\n    temp6 = 0;\n    flag3 = SBORROW4(temp4,1);\n    temp4 = temp4 - 1;\n    flag1 = temp4 == 0;\n    temp2 = temp4;\n  }\n  else {\n    result1 = (combined_input & 0xffffffff) * (ulonglong)input3;\n    combined_input = (combined_input & 0xffffffff) * (ulonglong)input4 +\n             (ulonglong)temp1 * (ulonglong)input3 + (result1 >> 0x20);\n    temp7 = (uint)combined_input;\n    result2 = (ulonglong)temp1 * (ulonglong)input4 + (combined_input >> 0x20);\n    temp6 = (uint)result2;\n    temp1 = (uint)((ulonglong)result2 >> 0x20);\n    if ((int)result1 != 0) {\n      temp7 = temp7 | 1;\n    }\n    temp4 = (temp3 + -0x3ff) - (uint)(temp1 < 0x200);\n    if (temp1 < 0x200) {\n      flag1 = (temp7 & 0x80000000) != 0;\n      temp7 = temp7 << 1;\n      result2 = CONCAT44(temp1 * 2 + (uint)(CARRY4(temp6,temp6) || CARRY4(temp6 * 2,(uint)flag1)),\n                       temp6 * 2 + (uint)flag1);\n    }\n    input4 = temp2 & 0x80000000 | (int)((ulonglong)result2 >> 0x20) << 0xb | (uint)result2 >> 0x15;\n    input3 = (uint)result2 << 0xb | temp7 >> 0x15;\n    temp6 = temp7 * 0x800;\n    flag2 = 0xfc < temp4;\n    flag3 = SBORROW4(temp4,0xfd);\n    temp1 = temp4 - 0xfd;\n    flag1 = temp1 == 0;\n    temp2 = temp1;\n    if (flag2 && !flag1) {\n      flag2 = 0x6ff < temp1;\n      flag3 = SBORROW4(temp1,0x700);\n      temp2 = temp4 - 0x7fd;\n      flag1 = temp1 == 0x700;\n    }\n    if (!flag2 || flag1) {\n      flag1 = 0x7fffffff < temp6;\n      if (temp6 == 0x80000000) {\n        flag1 = (temp7 >> 0x15 & 1) != 0;\n      }\n      return CONCAT44(input4 + temp4 * 0x100000 + (uint)CARRY4(input3,(uint)flag1),input3 + flag1\n                     );\n    }\n  }\n  if (!flag1 && (int)temp2 < 0 == flag3) {\n    return (ulonglong)(input4 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  flag2 = SCARRY4(temp4,0x36);\n  flag1 = (int)(temp4 + 0x36) < 0;\n  flag3 = temp4 == 0xffffffca;\n  if (flag3 || flag1 != flag2) {\n    input3 = 0;\n  }\n  if (flag3 || flag1 != flag2) {\n    input4 = input4 & 0x80000000;\n  }\n  if (flag3 || flag1 != flag2) {\n    return CONCAT44(input4,input3);\n  }\n  temp2 = -temp4;\n  temp1 = temp2 - 0x20;\n  if (0x1f < (int)temp2) {\n    temp4 = input3 >> (temp1 & 0xff) | input4 << (0x20 - temp1 & 0xff);\n    temp2 = (input4 >> (temp1 & 0xff) & ~((input4 & 0x80000000) >> (temp1 & 0xff))) -\n            ((int)temp4 >> 0x1f);\n    if ((temp6 | input3 << (0x20 - temp1 & 0xff) | temp4 << 1) == 0) {\n      temp2 = temp2 & ~(temp4 >> 0x1f);\n    }\n    return CONCAT44(input4,temp2) & 0x80000000ffffffff;\n  }\n  temp3 = temp2 - 0x14;\n  if (temp3 == 0 || temp3 < 0 != SCARRY4(temp1,0xc)) {\n    temp7 = input3 << (temp4 + 0x20 & 0xff);\n    temp1 = input3 >> (temp2 & 0xff) | input4 << (temp4 + 0x20 & 0xff);\n    temp4 = temp1 + -((int)temp7 >> 0x1f);\n    if ((temp6 | temp7 << 1) == 0) {\n      temp4 = temp4 & ~(temp7 >> 0x1f);\n    }\n    return CONCAT44((input4 & 0x80000000) +\n                    ((input4 & 0x7fffffff) >> (temp2 & 0xff)) +\n                    (uint)CARRY4(temp1,-((int)temp7 >> 0x1f)),temp4);\n  }\n  temp2 = 0xc - temp3;\n  temp4 = input3 << (temp2 & 0xff);\n  temp2 = input3 >> (0x20 - temp2 & 0xff) | input4 << (temp2 & 0xff);\n  temp1 = temp2 + -((int)temp4 >> 0x1f);\n  if ((temp6 | temp4 << 1) == 0) {\n    temp1 = temp1 & ~(temp4 >> 0x1f);\n  }\n  return CONCAT44((input4 & 0x80000000) + (uint)CARRY4(temp2,-((int)temp4 >> 0x1f)),temp1);\n}\n\n",
            "renaming": {
                "FUN_080004f8": "calculate_result_080004f8",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "result1",
                "lVar2": "result2",
                "uVar3": "temp1",
                "uVar4": "temp2",
                "iVar5": "temp3",
                "uVar6": "temp4",
                "unaff_r5": "temp5",
                "uVar7": "temp6",
                "uVar8": "temp7",
                "bVar9": "flag1",
                "bVar10": "flag2",
                "bVar11": "flag3",
                "uVar12": "combined_input",
                "reverse_bits_080006d4": "reverse_bits"
            },
            "calling": [
                "FUN_080015f8",
                "FUN_080016b4",
                "FUN_08005da8",
                "FUN_08001918",
                "FUN_08001814"
            ],
            "called": [
                "FUN_080006d4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080004f8": {
                    "1": "reverse_bits",
                    "3": "calculate_product",
                    "20": "calculate_result"
                },
                "param_1": {
                    "1": "arg1",
                    "3": "value1",
                    "25": "input1"
                },
                "param_2": {
                    "25": "input2",
                    "1": "arg2",
                    "3": "value2"
                },
                "param_3": {
                    "1": "arg3",
                    "3": "value3",
                    "24": "input3"
                },
                "param_4": {
                    "1": "modified_param4",
                    "23": "input4",
                    "3": "value4"
                },
                "uVar1": {
                    "1": "result_var1",
                    "2": "product",
                    "3": "temp1",
                    "13": "result1",
                    "9": "result"
                },
                "lVar2": {
                    "2": "temp_result",
                    "7": "temp",
                    "1": "sum",
                    "13": "result2",
                    "3": "temp2"
                },
                "uVar3": {
                    "1": "value1",
                    "4": "result3",
                    "6": "var1",
                    "12": "temp1",
                    "2": "temp_var1"
                },
                "uVar4": {
                    "1": "param2_bits",
                    "2": "temp4",
                    "4": "result4",
                    "11": "temp2",
                    "6": "var2"
                },
                "iVar5": {
                    "6": "var3",
                    "2": "sum_input2_input4",
                    "11": "temp3",
                    "1": "temp_int",
                    "3": "sum"
                },
                "uVar6": {
                    "1": "temp_value2",
                    "2": "temp_var4",
                    "3": "result6",
                    "6": "var4",
                    "10": "temp4"
                },
                "unaff_r5": {
                    "8": "temp5",
                    "3": "result7",
                    "1": "param4_bits",
                    "2": "var5"
                },
                "uVar7": {
                    "3": "temp5",
                    "2": "carry",
                    "1": "u_var7",
                    "7": "temp6",
                    "4": "var5"
                },
                "uVar8": {
                    "1": "temp9",
                    "3": "temp6",
                    "4": "var6",
                    "8": "temp7",
                    "2": "var7"
                },
                "bVar9": {
                    "4": "condition1",
                    "1": "temp10",
                    "15": "flag1",
                    "2": "is_condition1",
                    "5": "is_zero"
                },
                "bVar10": {
                    "1": "temp_var8",
                    "3": "is_negative",
                    "4": "condition2",
                    "2": "is_condition2",
                    "16": "flag2"
                },
                "bVar11": {
                    "1": "is_condition_true3",
                    "2": "is_overflow",
                    "16": "flag3",
                    "4": "condition3"
                },
                "uVar12": {
                    "1": "temp13",
                    "13": "combined_input",
                    "2": "concatenated"
                },
                "UVar4": {
                    "1": "check2"
                },
                "reverse_bits_080006d4": {
                    "1": "reverse_bits"
                }
            }
        },
        "FUN_080006d4": {
            "entrypoint": "0x080006d4",
            "current_name": "reverse_bits_080006d4",
            "code": "\nulonglong reverse_bits_080006d4(uint input1,uint input2,uint input3,uint input4)\n\n{\n  uint bit_1;\n  uint temp1;\n  uint temp3;\n  uint temp4;\n  uint mask;\n  bool is_zero;\n  \n  temp3 = mask & input4 >> 0x14;\n  if (temp1 != mask && temp3 != mask) {\n    is_zero = (input1 | input2 << 1) == 0;\n    if (!is_zero) {\n      is_zero = (input3 | input4 << 1) == 0;\n    }\n    if (is_zero) {\n      result (ulonglong)((input2 ^ input4) & 0x80000000) << 0x20;\n    }\n    if (temp1 == 0) {\n      temp4 = input2 & 0x80000000;\n      do {\n        bit_1 = input1 & 0x80000000;\n        input1 = input1 << 1;\n        input2 = input2 * 2 + (uint)(bit_1 != 0);\n      } while ((input2 & 0x100000) == 0);\n      input2 = input2 | temp4;\n      if (temp3 != 0) {\n        result CONCAT44(input2,input1);\n      }\n    }\n    do {\n      temp3 = input3 & 0x80000000;\n      input3 = input3 << 1;\n      input4 = input4 * 2 + (uint)(temp3 != 0);\n    } while ((input4 & 0x100000) == 0);\n    result CONCAT44(input2,input1);\n  }\n  is_zero = (input1 | input2 << 1) == 0;\n  if (is_zero) {\n    input2 = input4;\n    input1 = input3;\n  }\n  if (!is_zero) {\n    is_zero = (input3 | input4 << 1) == 0;\n  }\n  temp4 = input2;\n  if (((!is_zero) && ((temp1 != mask || ((input1 | input2 << 0xc) == 0)))) &&\n     ((temp3 != mask || (input1 = input3, temp4 = input4, (input3 | input4 << 0xc) == 0)))) {\n    result (ulonglong)((input2 ^ input4) & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  result CONCAT44(temp4,input1) | 0x7ff8000000000000;\n}\n\n",
            "renaming": {
                "FUN_080006d4": "reverse_bits_080006d4",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "bit_1",
                "unaff_r4": "temp1",
                "uVar2": "temp3",
                "uVar3": "temp4",
                "in_r12": "mask",
                "bVar4": "is_zero",
                "return": "result"
            },
            "calling": [
                "FUN_080004f8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080006d4": {
                    "1": "reverse_and_convert",
                    "3": "extract_bit_range",
                    "2": "extract_bits",
                    "5": "reverse_bits"
                },
                "param_1": {
                    "1": "num1",
                    "9": "input_1",
                    "2": "value1",
                    "16": "input1"
                },
                "param_2": {
                    "1": "num2",
                    "16": "input2",
                    "9": "input_2",
                    "2": "value2"
                },
                "param_3": {
                    "9": "input_3",
                    "1": "num3",
                    "2": "value3",
                    "16": "input3"
                },
                "param_4": {
                    "9": "input_4",
                    "1": "bits_4",
                    "2": "value4",
                    "16": "input4"
                },
                "uVar1": {
                    "1": "bit_check_1",
                    "2": "temp2",
                    "5": "bit1",
                    "3": "temp1"
                },
                "unaff_r4": {
                    "1": "variable1",
                    "2": "temp_var2",
                    "6": "temp1"
                },
                "uVar2": {
                    "1": "temp4",
                    "2": "temp2",
                    "3": "bit_2",
                    "4": "temp3"
                },
                "uVar3": {
                    "1": "bit4",
                    "2": "temp3",
                    "3": "bit_3",
                    "4": "temp4"
                },
                "in_r12": {
                    "1": "tmp_5",
                    "3": "temp2",
                    "2": "temp_2"
                },
                "bVar4": {
                    "2": "flag",
                    "25": "is_zero",
                    "1": "is_condition_met"
                },
                "return": {
                    "1": "result"
                },
                "uVar5": {
                    "1": "result"
                }
            }
        },
        "FUN_0800074c": {
            "entrypoint": "0x0800074c",
            "current_name": "calculate_floating_point_0800074c",
            "code": "\nulonglong calculate_floating_point_0800074c(undefined4 input1,uint input2,uint input3,uint input4)\n\n{\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  uint temp4;\n  uint temp5;\n  uint temp6;\n  uint temp7;\n  int difference;\n  uint temp9;\n  uint temp10;\n  uint temp11;\n  uint temp12;\n  uint temp13;\n  uint temp14;\n  bool flag1;\n  bool is_equal;\n  bool flag3;\n  undefined8 reversed_bits;\n  \n  reversed_bits = CONCAT44(input2,input1);\n  temp14 = 0x7ff;\n  temp7 = input2 >> 0x14 & 0x7ff;\n  flag1 = temp7 == 0;\n  if (!flag1) {\n    temp10 = input4 >> 0x14 & 0x7ff;\n    flag1 = temp10 == 0;\n  }\n  if (!flag1) {\n    flag1 = temp7 == 0x7ff;\n  }\n  if (!flag1) {\n    flag1 = temp10 == 0x7ff;\n  }\n  if (flag1) {\n    reversed_bits = reverse_bits();\n  }\n  temp9 = (uint)((ulonglong)reversed_bits >> 0x20);\n  temp12 = (uint)reversed_bits;\n  difference = temp7 - temp10;\n  if ((input3 | input4 << 0xc) == 0) {\n    temp7 = (temp9 ^ input4) & 0x80000000 | temp9 & 0xfffff;\n    flag3 = SCARRY4(difference,temp14 >> 1);\n    temp9 = difference + (temp14 >> 1);\n    flag1 = (int)temp9 < 0;\n    is_equal = temp9 == 0;\n    if (!is_equal && flag1 == flag3) {\n      flag3 = SBORROW4(temp14,temp9);\n      flag1 = (int)(temp14 - temp9) < 0;\n      is_equal = temp14 == temp9;\n    }\n    if (!is_equal && flag1 == flag3) {\n      temp7 = temp7 | temp9 * 0x100000;\n    }\n    if (!is_equal && flag1 == flag3) {\n      return CONCAT44(temp7,temp12);\n    }\n    temp7 = temp7 | 0x100000;\n    temp14 = 0;\n    is_equal = SBORROW4(temp9,1);\n    temp9 = temp9 - 1;\n    flag1 = temp9 == 0;\n    temp3 = temp9;\n  }\n  else {\n    temp3 = (input4 << 0xc) >> 4 | 0x10000000 | input3 >> 0x18;\n    temp14 = input3 << 8;\n    temp11 = (temp9 << 0xc) >> 4 | 0x10000000 | temp12 >> 0x18;\n    temp12 = temp12 * 0x100;\n    temp7 = (temp9 ^ input4) & 0x80000000;\n    flag1 = temp3 <= temp11;\n    if (temp11 == temp3) {\n      flag1 = temp14 <= temp12;\n    }\n    difference = difference + (uint)flag1;\n    temp9 = difference + 0x3fd;\n    if (flag1 == false) {\n      temp3 = temp3 >> 1;\n      temp14 = (uint)((input3 >> 0x18 & 1) != 0) << 0x1f | temp14 >> 1;\n    }\n    temp13 = temp12 - temp14;\n    temp11 = (temp11 - temp3) - (uint)(temp12 < temp14);\n    temp4 = temp3 >> 1;\n    temp1 = (uint)((temp3 & 1) != 0) << 0x1f | temp14 >> 1;\n    temp12 = 0x100000;\n    temp3 = 0x80000;\n    while( true ) {\n      flag1 = temp1 <= temp13;\n      if (temp4 < temp11 || temp11 - temp4 < (uint)flag1) {\n        temp13 = temp13 - temp1;\n        temp12 = temp12 | temp3;\n        temp11 = (temp11 - temp4) - (uint)!flag1;\n      }\n      temp5 = temp4 >> 1;\n      temp1 = (uint)((temp4 & 1) != 0) << 0x1f | temp1 >> 1;\n      is_equal = temp1 <= temp13;\n      flag1 = temp11 - temp5 < (uint)is_equal;\n      temp14 = temp11;\n      if (temp5 < temp11 || flag1) {\n        temp13 = temp13 - temp1;\n        temp14 = (temp11 - temp5) - (uint)!is_equal;\n      }\n      if (temp5 < temp11 || flag1) {\n        temp12 = temp12 | temp3 >> 1;\n      }\n      temp11 = temp4 >> 2;\n      temp2 = (uint)((temp5 & 1) != 0) << 0x1f | temp1 >> 1;\n      is_equal = temp2 <= temp13;\n      flag1 = temp14 - temp11 < (uint)is_equal;\n      temp5 = temp14;\n      if (temp11 < temp14 || flag1) {\n        temp13 = temp13 - temp2;\n        temp5 = (temp14 - temp11) - (uint)!is_equal;\n      }\n      if (temp11 < temp14 || flag1) {\n        temp12 = temp12 | temp3 >> 2;\n      }\n      temp6 = temp4 >> 3;\n      temp1 = (uint)((temp11 & 1) != 0) << 0x1f | temp2 >> 1;\n      is_equal = temp1 <= temp13;\n      flag1 = temp5 - temp6 < (uint)is_equal;\n      temp11 = temp5;\n      if (temp6 < temp5 || flag1) {\n        temp13 = temp13 - temp1;\n        temp11 = (temp5 - temp6) - (uint)!is_equal;\n      }\n      if (temp6 < temp5 || flag1) {\n        temp12 = temp12 | temp3 >> 3;\n      }\n      temp14 = temp11 | temp13;\n      if (temp14 == 0) break;\n      temp11 = temp11 << 4 | temp13 >> 0x1c;\n      temp13 = temp13 << 4;\n      temp4 = temp4 & 0xfffffff8 | temp1 >> 0x1d;\n      temp1 = (temp2 >> 1) << 3;\n      temp3 = temp3 >> 4;\n      if (temp3 == 0) {\n        temp6 = temp4;\n        if ((temp7 & 0x100000) != 0) goto LAB_0800086a;\n        temp7 = temp7 | temp12;\n        temp12 = 0;\n        temp3 = 0x80000000;\n      }\n    }\n    if ((temp7 & 0x100000) == 0) {\n      temp7 = temp7 | temp12;\n      temp12 = 0;\n    }\nLAB_0800086a:\n    flag3 = 0xfc < temp9;\n    is_equal = SBORROW4(temp9,0xfd);\n    temp4 = difference + 0x300;\n    flag1 = temp4 == 0;\n    temp3 = temp4;\n    if (flag3 && !flag1) {\n      flag3 = 0x6ff < temp4;\n      is_equal = SBORROW4(temp4,0x700);\n      temp3 = difference - 0x400;\n      flag1 = temp4 == 0x700;\n    }\n    if (!flag3 || flag1) {\n      flag1 = temp6 <= temp11;\n      if (temp11 == temp6) {\n        flag1 = temp1 <= temp13;\n      }\n      if (temp11 == temp6 && temp13 == temp1) {\n        flag1 = (temp12 & 1) != 0;\n      }\n      return CONCAT44(temp7 + temp9 * 0x100000 + (uint)CARRY4(temp12,(uint)flag1),temp12 + flag1);\n    }\n  }\n  if (!flag1 && (int)temp3 < 0 == is_equal) {\n    return (ulonglong)(temp7 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  flag3 = SCARRY4(temp9,0x36);\n  flag1 = (int)(temp9 + 0x36) < 0;\n  is_equal = temp9 == 0xffffffca;\n  if (is_equal || flag1 != flag3) {\n    temp12 = 0;\n  }\n  if (is_equal || flag1 != flag3) {\n    temp7 = temp7 & 0x80000000;\n  }\n  if (is_equal || flag1 != flag3) {\n    return CONCAT44(temp7,temp12);\n  }\n  temp3 = -temp9;\n  temp11 = temp3 - 0x20;\n  if (0x1f < (int)temp3) {\n    temp3 = temp12 >> (temp11 & 0xff) | temp7 << (0x20 - temp11 & 0xff);\n    temp9 = (temp7 >> (temp11 & 0xff) & ~((temp7 & 0x80000000) >> (temp11 & 0xff))) -\n            ((int)temp3 >> 0x1f);\n    if ((temp14 | temp12 << (0x20 - temp11 & 0xff) | temp3 << 1) == 0) {\n      temp9 = temp9 & ~(temp3 >> 0x1f);\n    }\n    return CONCAT44(temp7,temp9) & 0x80000000ffffffff;\n  }\n  difference = temp3 - 0x14;\n  if (difference != 0 && difference < 0 == SCARRY4(temp11,0xc)) {\n    temp9 = 0xc - difference;\n    temp3 = temp12 << (temp9 & 0xff);\n    temp12 = temp12 >> (0x20 - temp9 & 0xff) | temp7 << (temp9 & 0xff);\n    temp9 = temp12 + -((int)temp3 >> 0x1f);\n    if ((temp14 | temp3 << 1) == 0) {\n      temp9 = temp9 & ~(temp3 >> 0x1f);\n    }\n    return CONCAT44((temp7 & 0x80000000) + (uint)CARRY4(temp12,-((int)temp3 >> 0x1f)),temp9);\n  }\n  temp11 = temp12 << (temp9 + 0x20 & 0xff);\n  temp12 = temp12 >> (temp3 & 0xff) | temp7 << (temp9 + 0x20 & 0xff);\n  temp9 = temp12 + -((int)temp11 >> 0x1f);\n  if ((temp14 | temp11 << 1) == 0) {\n    temp9 = temp9 & ~(temp11 >> 0x1f);\n  }\n  return CONCAT44((temp7 & 0x80000000) +\n                  ((temp7 & 0x7fffffff) >> (temp3 & 0xff)) +\n                  (uint)CARRY4(temp12,-((int)temp11 >> 0x1f)),temp9);\n}\n\n",
            "renaming": {
                "FUN_0800074c": "calculate_floating_point_0800074c",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "temp1",
                "uVar2": "temp2",
                "uVar3": "temp3",
                "uVar4": "temp4",
                "uVar5": "temp5",
                "uVar6": "temp6",
                "uVar7": "temp7",
                "iVar8": "difference",
                "uVar9": "temp9",
                "uVar10": "temp11",
                "uVar11": "temp12",
                "uVar12": "temp13",
                "uVar13": "temp14",
                "bVar14": "flag1",
                "bVar15": "is_equal",
                "bVar16": "flag3",
                "uVar17": "reversed_bits",
                "unaff_r5": "temp10",
                "reverse_bits_080008ba": "reverse_bits"
            },
            "calling": [
                "FUN_080015f8",
                "FUN_08005da8",
                "FUN_08001918",
                "FUN_08001814"
            ],
            "called": [
                "FUN_080008ba"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800074c": {
                    "1": "improved_convoluted_calculation",
                    "5": "calculate_floating_point_value",
                    "2": "calculate_result",
                    "14": "calculate_floating_point"
                },
                "param_1": {
                    "1": "integer_part",
                    "2": "num1",
                    "15": "input1"
                },
                "param_2": {
                    "1": "input_2",
                    "15": "input2",
                    "2": "value2",
                    "3": "exponent"
                },
                "param_3": {
                    "1": "value_c",
                    "2": "num3",
                    "15": "input3"
                },
                "param_4": {
                    "2": "value4",
                    "1": "parameter_4",
                    "15": "input4"
                },
                "uVar1": {
                    "1": "normalized_exponent",
                    "2": "temp_1",
                    "16": "temp1"
                },
                "uVar2": {
                    "1": "exponent_and_mantissa1_mask",
                    "2": "var2",
                    "16": "temp2"
                },
                "uVar3": {
                    "2": "bit3",
                    "1": "bit_mask3",
                    "16": "temp3"
                },
                "uVar4": {
                    "1": "result4",
                    "2": "bit4",
                    "16": "temp4"
                },
                "uVar5": {
                    "16": "temp5",
                    "2": "bit5",
                    "1": "fifth_condition"
                },
                "uVar6": {
                    "2": "bit6",
                    "15": "temp6",
                    "1": "temp2"
                },
                "uVar7": {
                    "1": "flags",
                    "2": "u_var7",
                    "15": "temp7"
                },
                "iVar8": {
                    "1": "exponent_difference",
                    "2": "temp_8",
                    "12": "temp8",
                    "13": "difference"
                },
                "uVar9": {
                    "1": "temp_var1",
                    "2": "result",
                    "11": "temp9"
                },
                "uVar10": {
                    "1": "variable10",
                    "8": "temp11",
                    "2": "var11",
                    "3": "temp2",
                    "5": "temp10"
                },
                "uVar11": {
                    "1": "result4",
                    "2": "var12",
                    "8": "temp12",
                    "4": "temp11"
                },
                "uVar12": {
                    "1": "temp10",
                    "4": "temp12",
                    "8": "temp13",
                    "2": "var13"
                },
                "uVar13": {
                    "1": "limit",
                    "4": "temp13",
                    "2": "temp_14",
                    "8": "temp14"
                },
                "bVar14": {
                    "1": "is_negative_fractional_part",
                    "3": "is_zero1",
                    "8": "is_zero",
                    "2": "is_true"
                },
                "bVar15": {
                    "1": "is_condition_met2",
                    "3": "condition2",
                    "9": "is_equal",
                    "2": "is_zero2",
                    "8": "flag2"
                },
                "bVar16": {
                    "1": "is_carry1",
                    "3": "condition3",
                    "7": "flag3",
                    "4": "is_overflow",
                    "2": "carry_flag"
                },
                "uVar17": {
                    "1": "reverse_bits",
                    "11": "reversed_bits",
                    "3": "result",
                    "2": "combined_params"
                },
                "unaff_r5": {
                    "1": "unaff_r5",
                    "2": "temp_10",
                    "8": "temp10"
                },
                "bVar17": {
                    "2": "flag4",
                    "1": "is_greater_than"
                },
                "uVar18": {
                    "1": "result_part1"
                },
                "uVar19": {
                    "1": "result2"
                },
                "uVar20": {
                    "1": "temp_15"
                },
                "uVar21": {
                    "1": "temp_16"
                },
                "uVar22": {
                    "1": "temp_17"
                },
                "uVar23": {
                    "1": "temp_18"
                },
                "reverse_bits_080008ba": {
                    "4": "reverse_bits"
                }
            }
        },
        "FUN_080008ba": {
            "entrypoint": "0x080008ba",
            "current_name": "reverse_bits_080008ba",
            "code": "\nulonglong reverse_bits_080008ba(uint input1,uint input2,uint input3,uint input4)\n\n{\n  uint bit1;\n  uint temp1;\n  uint bit2;\n  uint bit3;\n  uint constant;\n  bool is_zero;\n  \n  bit2 = constant & input4 >> 0x14;\n  bit3 = input2;\n  if (temp1 != constant || bit2 != constant) {\n    if (temp1 == constant) {\n      if (((input1 | input2 << 0xc) == 0) && (input1 = input3, bit3 = input4, bit2 != constant)\n         ) {\nhandle_zero_value:\n        return (ulonglong)((input2 ^ input4) & 0x80000000 | 0x7ff00000) << 0x20;\n      }\n    }\n    else if (bit2 == constant) {\n      input1 = input3;\n      bit3 = input4;\n      if ((input3 | input4 << 0xc) == 0) {\nhandle_zero_shifted_value:\n        return (ulonglong)((input2 ^ input4) & 0x80000000) << 0x20;\n      }\n    }\n    else {\n      is_zero = (input1 | input2 << 1) == 0;\n      if (!is_zero) {\n        is_zero = (input3 | input4 << 1) == 0;\n      }\n      if (!is_zero) {\n        if (temp1 == 0) {\n          bit3 = input2 & 0x80000000;\n          do {\n            bit1 = input1 & 0x80000000;\n            input1 = input1 << 1;\n            input2 = input2 * 2 + (uint)(bit1 != 0);\n          } while ((input2 & 0x100000) == 0);\n          input2 = input2 | bit3;\n          if (bit2 != 0) {\n            return combine_bits(input2,input1);\n          }\n        }\n        do {\n          bit3 = input3 & 0x80000000;\n          input3 = input3 << 1;\n          input4 = input4 * 2 + (uint)(bit3 != 0);\n        } while ((input4 & 0x100000) == 0);\n        return combine_bits(input2,input1);\n      }\n      if ((input1 | input2 << 1) != 0) goto handle_zero_value;\n      if ((input3 | input4 << 1) != 0) goto handle_zero_shifted_value;\n    }\n  }\n  return combine_bits(bit3,input1) | 0x7ff8000000000000;\n}\n\n",
            "renaming": {
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "bit1",
                "unaff_r4": "temp1",
                "uVar2": "bit2",
                "uVar3": "bit3",
                "in_r12": "constant",
                "bVar4": "is_zero",
                "FUN_080008ba": "reverse_bits_080008ba",
                "CONCAT44": "combine_bits",
                "LAB_0800072c": "handle_zero_value",
                "LAB_080006f0": "handle_zero_shifted_value"
            },
            "calling": [
                "FUN_0800074c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "param_1": {
                    "1": "input_a",
                    "7": "input_1",
                    "2": "value1",
                    "16": "input1"
                },
                "param_2": {
                    "16": "input2",
                    "1": "second_param",
                    "7": "input_2",
                    "2": "value2"
                },
                "param_3": {
                    "7": "input_3",
                    "1": "num3",
                    "2": "value3",
                    "16": "input3"
                },
                "param_4": {
                    "1": "int_value4",
                    "7": "input_4",
                    "2": "value4",
                    "16": "input4"
                },
                "uVar1": {
                    "1": "temp4",
                    "5": "bit_1",
                    "15": "bit1",
                    "2": "temp_var1"
                },
                "unaff_r4": {
                    "1": "register_4",
                    "2": "temp_var2",
                    "3": "bit2",
                    "6": "temp1"
                },
                "uVar2": {
                    "2": "temp_var3",
                    "8": "bit2",
                    "1": "result_2",
                    "3": "bit3",
                    "4": "temp2"
                },
                "uVar3": {
                    "1": "output_1",
                    "7": "bit3",
                    "3": "bit4",
                    "2": "temp_var4"
                },
                "in_r12": {
                    "4": "bit5",
                    "1": "bit4",
                    "2": "constant_value",
                    "5": "constant",
                    "3": "temp2"
                },
                "bVar4": {
                    "27": "is_zero",
                    "1": "bit_result",
                    "2": "temp_var6"
                },
                "FUN_080008ba": {
                    "2": "reverse_binary_operation",
                    "1": "evaluate_float",
                    "6": "reverse_bits"
                },
                "CONCAT44": {
                    "1": "combine_bits"
                },
                "LAB_0800072c": {
                    "1": "handle_zero_value"
                },
                "LAB_080006f0": {
                    "1": "handle_zero_shifted_value"
                }
            }
        },
        "FUN_0800092c": {
            "entrypoint": "0x0800092c",
            "current_name": "check_parameters_0800092c",
            "code": "\nuint check_parameters_0800092c(uint value1,uint value2,uint value3,uint value4)\n\n{\n  uint result;\n  bool is_zero;\n  bool is_negative;\n  \n  if (((int)(value2 << 1) >> 0x15 == -1 || (int)(value4 << 1) >> 0x15 == -1) &&\n     ((((int)(value2 << 1) >> 0x15 == -1 && ((value1 | value2 << 0xc) != 0)) ||\n      (((int)(value4 << 1) >> 0x15 == -1 && ((value3 | value4 << 0xc) != 0)))))) {\n    return 1;\n  }\n  is_zero = (value1 | value2 << 1) == 0;\n  if (is_zero) {\n    is_zero = (value3 | value4 << 1) == 0;\n  }\n  if (!is_zero) {\n    is_zero = value2 == value4;\n  }\n  if (is_zero) {\n    is_zero = value1 == value3;\n  }\n  if (!is_zero) {\n    result = value2 ^ value4;\n    is_zero = result == 0;\n    if (-1 < (int)result) {\n      is_zero = value2 == value4;\n    }\n    is_negative = -1 < (int)result && value4 <= value2;\n    if (is_zero) {\n      is_negative = value3 <= value1;\n    }\n    value4 = (int)value4 >> 0x1f;\n    if (!is_negative) {\n      value4 = ~value4;\n    }\n    return value4 | 1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800092c": "check_parameters_0800092c",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "value3",
                "param_4": "value4",
                "uVar1": "result",
                "bVar2": "is_zero",
                "bVar3": "is_negative"
            },
            "calling": [
                "FUN_080009b8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800092c": {
                    "1": "check_conditions",
                    "15": "check_parameters",
                    "2": "check_params_equality",
                    "5": "check_equality"
                },
                "param_1": {
                    "4": "first_param",
                    "1": "first_parameter",
                    "6": "value_1",
                    "10": "value1"
                },
                "param_2": {
                    "1": "second_parameter",
                    "4": "input_2",
                    "6": "value_2",
                    "10": "value2"
                },
                "param_3": {
                    "4": "third_param",
                    "10": "value3",
                    "1": "value_c",
                    "6": "value_3"
                },
                "param_4": {
                    "6": "value_4",
                    "1": "input4",
                    "3": "d",
                    "4": "fourth_param",
                    "10": "value4"
                },
                "uVar1": {
                    "1": "result1",
                    "10": "xor_result",
                    "17": "result"
                },
                "bVar2": {
                    "1": "is_both_params_zero",
                    "2": "is_equal",
                    "16": "is_zero"
                },
                "bVar3": {
                    "2": "is_negative_or_equal",
                    "1": "should_invert",
                    "8": "is_negative"
                },
                "bVar4": {
                    "1": "is_input_equal"
                },
                "bVar5": {
                    "1": "is_param3_less_than_input1"
                },
                "2": {
                    "1": "shifted_b"
                },
                "4": {
                    "1": "shifted_d"
                },
                "1": {
                    "1": "is_true"
                }
            }
        },
        "FUN_080009a8": {
            "entrypoint": "0x080009a8",
            "current_name": "compare_floats_080009a8",
            "code": "\nvoid compare_floats_080009a8(undefined4 result,undefined4 status,undefined4 value1,undefined4 value2)\n\n{\n  __aeabi_cdcmpeq(value1,value2,result,status);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080009a8": "compare_floats_080009a8",
                "param_1": "result",
                "param_2": "status",
                "param_3": "value1",
                "param_4": "value2"
            },
            "calling": [
                "FUN_08000a04",
                "FUN_08000a18"
            ],
            "called": [
                "FUN_080009b8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080009a8": {
                    "2": "compare_and_return",
                    "9": "compare_floats",
                    "6": "compare_floating_point_numbers",
                    "3": "compare_values",
                    "4": "compare_floating_point_values",
                    "1": "perform_cdcmp"
                },
                "param_1": {
                    "1": "precision",
                    "4": "comparison_result",
                    "13": "result",
                    "3": "input1"
                },
                "param_2": {
                    "1": "result",
                    "3": "input2",
                    "4": "value2",
                    "2": "unused"
                },
                "param_3": {
                    "1": "floating_point_value1",
                    "3": "value3",
                    "14": "value1",
                    "2": "float_a"
                },
                "param_4": {
                    "1": "floating_point_value2",
                    "2": "float_b",
                    "3": "value4",
                    "14": "value2"
                },
                "FUN_080009b8": {
                    "1": "perform_comparison"
                }
            }
        },
        "FUN_080009b8": {
            "entrypoint": "0x080009b8",
            "current_name": "calculate_result_080009b8",
            "code": "\nundefined4 calculate_result_080009b8(undefined4 input_value)\n\n{\n  calculate_result_080009b8();\n  return input_value;\n}\n\n",
            "renaming": {
                "FUN_080009b8": "calculate_result_080009b8",
                "param_1": "input_value",
                "__eqdf2": "calculate_result"
            },
            "calling": [
                "FUN_080009c8",
                "FUN_080009dc",
                "FUN_080009f0",
                "FUN_080009a8"
            ],
            "called": [
                "FUN_0800092c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080009b8": {
                    "1": "convert_to_undefined4",
                    "3": "perform_operation",
                    "11": "calculate_result"
                },
                "param_1": {
                    "3": "value1",
                    "15": "input_value",
                    "2": "input_param",
                    "1": "input1"
                },
                "FUN_0800092c": {
                    "1": "perform_operation",
                    "10": "perform_calculation",
                    "4": "calculate_result"
                },
                "param_2": {
                    "1": "arg2",
                    "3": "value2",
                    "2": "num2"
                },
                "param_3": {
                    "1": "input3",
                    "3": "value2",
                    "2": "num3"
                },
                "param_4": {
                    "1": "input4",
                    "3": "value4",
                    "2": "num4"
                },
                "__eqdf2": {
                    "1": "perform_equality_operation",
                    "2": "calculate_result"
                },
                "PARAM_1": {
                    "1": "operand_1"
                },
                "PARAM_2": {
                    "1": "operand_2"
                },
                "PARAM_3": {
                    "1": "operand_3"
                },
                "PARAM_4": {
                    "1": "operand_4"
                }
            }
        },
        "FUN_080009c8": {
            "entrypoint": "0x080009c8",
            "current_name": "check_if_not_zero_080009c8",
            "code": "\nbool check_if_not_zero_080009c8(void)\n\n{\n  char result;\n  \n  compare_double_numbers();\n  return result != '\\0';\n}\n\n",
            "renaming": {
                "FUN_080009c8": "check_if_not_zero_080009c8",
                "in_ZR": "result",
                "__aeabi_cdcmpeq": "compare_double_numbers"
            },
            "calling": [
                "FUN_08000cd0"
            ],
            "called": [
                "FUN_080009b8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080009c8": {
                    "1": "check_nonzero_return",
                    "3": "is_not_zero",
                    "4": "check_if_not_zero",
                    "2": "check_result"
                },
                "in_ZR": {
                    "1": "comparison_result",
                    "2": "is_not_empty",
                    "12": "result",
                    "5": "is_not_zero"
                },
                "FUN_080009b8": {
                    "1": "check_parameter"
                },
                "__aeabi_cdcmpeq": {
                    "1": "compare_floats"
                }
            }
        },
        "FUN_080009dc": {
            "entrypoint": "0x080009dc",
            "current_name": "is_cy_null_080009dc",
            "code": "\nbool is_cy_null_080009dc(void)\n\n{\n  char input_char;\n  \n  compare_double_values();\n  return input_char == '\\0';\n}\n\n",
            "renaming": {
                "FUN_080009dc": "is_cy_null_080009dc",
                "in_CY": "input_char",
                "__aeabi_cdcmpeq": "compare_double_values"
            },
            "calling": [
                "FUN_080016b4",
                "FUN_080019f6",
                "FUN_08005da8",
                "FUN_08001960",
                "FUN_08000cd0",
                "FUN_08001814"
            ],
            "called": [
                "FUN_080009b8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080009dc": {
                    "1": "check_if_character_is_null",
                    "2": "check_if_input_is_zero",
                    "6": "is_cy_null",
                    "3": "check_if_null_character"
                },
                "in_CY": {
                    "2": "character",
                    "14": "input_char",
                    "1": "input_cy",
                    "12": "input_character"
                },
                "__aeabi_cdcmpeq": {
                    "1": "compare_floats",
                    "2": "compare_double_values"
                },
                "FUN_080009b8": {
                    "1": "function_with_param"
                }
            }
        },
        "FUN_080009f0": {
            "entrypoint": "0x080009f0",
            "current_name": "check_equality_080009f0",
            "code": "\nbool check_equality_080009f0(void)\n\n{\n  undefined zero_flag;\n  undefined carry_flag;\n  \n  __aeabi_cdcmpeq();\n  return !(bool)carry_flag || (bool)zero_flag;\n}\n\n",
            "renaming": {
                "FUN_080009f0": "check_equality_080009f0",
                "in_ZR": "zero_flag",
                "in_CY": "carry_flag"
            },
            "calling": [
                "FUN_08005da8",
                "FUN_08000cd0"
            ],
            "called": [
                "FUN_080009b8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080009f0": {
                    "1": "check_for_equality",
                    "2": "check_zero_flag",
                    "4": "check_conditions",
                    "3": "check_condition",
                    "9": "check_equality"
                },
                "in_ZR": {
                    "5": "zero_result",
                    "7": "is_zero",
                    "1": "is_zero_set",
                    "13": "zero_flag"
                },
                "in_CY": {
                    "6": "is_carry",
                    "2": "is_carry_result",
                    "1": "is_carry_flag",
                    "16": "carry_flag",
                    "3": "is_carry_set"
                },
                "param_1": {
                    "1": "arg",
                    "3": "input_value",
                    "2": "input_param"
                },
                "FUN_080009b8": {
                    "1": "compare_values"
                }
            }
        },
        "FUN_08000a04": {
            "entrypoint": "0x08000a04",
            "current_name": "check_comparison_result_08000a04",
            "code": "\nbool check_comparison_result_08000a04(void)\n\n{\n  undefined is_zero_result;\n  undefined carry_flag;\n  \n  __aeabi_cdrcmple();\n  return !(bool)carry_flag || (bool)is_zero_result;\n}\n\n",
            "renaming": {
                "FUN_08000a04": "check_comparison_result_08000a04",
                "in_ZR": "is_zero_result",
                "in_CY": "carry_flag"
            },
            "calling": [
                "FUN_08001960",
                "FUN_08000cd0"
            ],
            "called": [
                "FUN_080009a8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08000a04": {
                    "1": "check_less_or_equal",
                    "2": "check_order_conditions",
                    "8": "check_comparison_result"
                },
                "FUN_080009a8": {
                    "1": "process_order",
                    "3": "perform_operation"
                },
                "param_1": {
                    "1": "input1",
                    "2": "input_param_1"
                },
                "param_2": {
                    "1": "arg2",
                    "2": "input_param_2"
                },
                "param_3": {
                    "1": "param_z",
                    "2": "input_param_3"
                },
                "param_4": {
                    "1": "input4",
                    "2": "input_param_4"
                },
                "in_ZR": {
                    "2": "zero_result",
                    "1": "is_zero_param",
                    "8": "is_zero",
                    "7": "zero_flag"
                },
                "in_CY": {
                    "7": "is_carry",
                    "1": "zero_flag",
                    "3": "is_carry_result",
                    "12": "carry_flag",
                    "2": "is_carry_set"
                }
            }
        },
        "FUN_08000a18": {
            "entrypoint": "0x08000a18",
            "current_name": "is_null_character_08000a18",
            "code": "\nbool is_null_character_08000a18(void)\n\n{\n  char input_char;\n  \n  compare_double_values();\n  return input_char == '\\0';\n}\n\n",
            "renaming": {
                "FUN_08000a18": "is_null_character_08000a18",
                "in_CY": "input_char",
                "__aeabi_cdrcmple": "compare_double_values"
            },
            "calling": [
                "FUN_080016b4",
                "FUN_080019f6",
                "FUN_08005da8",
                "FUN_08001960",
                "FUN_08000cd0"
            ],
            "called": [
                "FUN_080009a8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08000a18": {
                    "1": "is_null_char",
                    "5": "is_null_character",
                    "3": "check_if_null",
                    "4": "is_null_terminated",
                    "2": "check_if_null_character"
                },
                "in_CY": {
                    "1": "user_input",
                    "15": "input_char",
                    "9": "input_character",
                    "3": "cy_value"
                },
                "__aeabi_cdrcmple": {
                    "1": "compare_character_to_zero"
                },
                "FUN_080009a8": {
                    "1": "param_func"
                }
            }
        },
        "FUN_08000a2c": {
            "entrypoint": "0x08000a2c",
            "current_name": "check_parameters_08000a2c",
            "code": "\nundefined4 check_parameters_08000a2c(uint input_1,int input_2,uint input_3,int input_4)\n\n{\n  if ((((input_2 << 1) >> 0x15 != -1) || ((input_1 | input_2 << 0xc) == 0)) &&\n     (((input_4 << 1) >> 0x15 != -1 || ((input_3 | input_4 << 0xc) == 0)))) {\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08000a2c": "check_parameters_08000a2c",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4"
            },
            "calling": [
                "FUN_08005da8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08000a2c": {
                    "2": "check_inputs",
                    "9": "check_parameters",
                    "1": "is_valid_params",
                    "6": "check_conditions",
                    "3": "check_params"
                },
                "param_1": {
                    "1": "bitwise_param_1",
                    "9": "value1",
                    "5": "value_1",
                    "4": "input1"
                },
                "param_2": {
                    "1": "shifted_value_2",
                    "4": "value_2",
                    "9": "value2"
                },
                "param_3": {
                    "9": "value3",
                    "1": "bitwise_param_3",
                    "4": "input3",
                    "5": "value_3"
                },
                "param_4": {
                    "1": "input_value_4",
                    "4": "input4",
                    "9": "value4"
                },
                "== 0": {
                    "1": "is_zero"
                },
                "<<": {
                    "1": "shift_left"
                },
                ">>": {
                    "1": "shift_right"
                },
                "!= -1": {
                    "1": "is_not_negative"
                },
                "|": {
                    "1": "bitwise_or"
                }
            }
        },
        "FUN_08000a58": {
            "entrypoint": "0x08000a58",
            "current_name": "calculate_result_08000a58",
            "code": "\nuint calculate_result_08000a58(uint input1,uint input_value2)\n\n{\n  uint shifted_value;\n  int multiplied_value;\n  uint result3;\n  \n  multiplied_value = input_value2 * 2 + 0x200000;\n  if (input_value2 * 2 < 0xffe00000) {\n    if (-1 < multiplied_value) {\n      return 0;\n    }\n    shifted_value = multiplied_value >> 0x15;\n    result3 = -shifted_value - 0x3e1;\n    if (shifted_value < 0xfffffc20 && result3 != 0) {\n      shifted_value = (input_value2 << 0xb | 0x80000000 | input1 >> 0x15) >> (result3 & 0xff);\n      if ((input_value2 & 0x80000000) != 0) {\n        shifted_value = -shifted_value;\n      }\n      return shifted_value;\n    }\n  }\n  else if ((input1 | input_value2 << 0xc) != 0) {\n    return 0;\n  }\n  input_value2 = input_value2 & 0x80000000;\n  if (input_value2 == 0) {\n    input_value2 = 0x7fffffff;\n  }\n  return input_value2;\n}\n\n",
            "renaming": {
                "FUN_08000a58": "calculate_result_08000a58",
                "param_1": "input1",
                "param_2": "input_value2",
                "iVar2": "multiplied_value",
                "uVar1": "shifted_value",
                "uVar3": "result3"
            },
            "calling": [
                "FUN_08005da8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08000a58": {
                    "2": "calculate_unsigned_value",
                    "1": "reverse_sign",
                    "5": "calculate_result"
                },
                "param_1": {
                    "1": "unsigned_input1",
                    "5": "input_value",
                    "3": "value1",
                    "8": "input1",
                    "6": "input_value1",
                    "2": "input_a"
                },
                "param_2": {
                    "1": "input_2",
                    "5": "input_value2",
                    "2": "multiplier",
                    "3": "value2"
                },
                "iVar2": {
                    "2": "modified_input2",
                    "5": "multiplied_value",
                    "1": "shifted_param_2",
                    "3": "result2",
                    "4": "offset"
                },
                "uVar1": {
                    "1": "result_var1",
                    "9": "shifted_value",
                    "2": "final_result",
                    "3": "result1",
                    "6": "result"
                },
                "uVar3": {
                    "1": "temp3",
                    "2": "result",
                    "3": "result3"
                },
                "CONST_0xffe00000": {
                    "1": "max_value"
                },
                "CONST_0x200000": {
                    "1": "constant1"
                },
                "CONST_0x15": {
                    "1": "constant2"
                },
                "CONST_0xfffffc20": {
                    "1": "boundary_value"
                },
                "CONST_0x3e1": {
                    "1": "constant3"
                },
                "CONST_0xb": {
                    "1": "constant4"
                },
                "CONST_0x80000000": {
                    "1": "constant5"
                },
                "CONST_0xff": {
                    "1": "constant6"
                },
                "CONST_0xc": {
                    "1": "constant7"
                },
                "param_2 & 0x80000000": {
                    "1": "temp_value"
                },
                "param_2 == 0": {
                    "1": "is_negative"
                },
                "uVar4": {
                    "1": "shift_value"
                },
                "uVar2": {
                    "1": "result_value"
                },
                "uVar1 < 0xfffffc20 && uVar3 != 0": {
                    "1": "conditions_met"
                },
                "(param_2 << 0xb | 0x80000000 | param_1 >> 0x15) >> (uVar3 & 0xff)": {
                    "1": "updated_value"
                },
                "0x7fffffff": {
                    "1": "max_positive_value"
                }
            }
        },
        "FUN_08000aa8": {
            "entrypoint": "0x08000aa8",
            "current_name": "calculate_shifted_value_08000aa8",
            "code": "\nuint calculate_shifted_value_08000aa8(uint input_value,uint shift_amount)\n\n{\n  int shifted_value;\n  uint shift_amount;\n  \n  if ((shift_amount & 0x80000000) != 0) {\n    return 0;\n  }\n  shifted_value = shift_amount * 2 + 0x200000;\n  if (shift_amount * 2 < 0xffe00000) {\n    if (-1 < shifted_value) {\n      return 0;\n    }\n    shift_amount = -(shifted_value >> 0x15) - 0x3e1;\n    if (-1 < (int)shift_amount) {\n      return (shift_amount << 0xb | 0x80000000 | input_value >> 0x15) >> (shift_amount & 0xff);\n    }\n  }\n  else if ((input_value | shift_amount << 0xc) != 0) {\n    return 0;\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_08000aa8": "calculate_shifted_value_08000aa8",
                "param_1": "input_value",
                "param_2": "shift_amount",
                "iVar1": "shifted_value",
                "uVar2": "shift_amount"
            },
            "calling": [
                "FUN_08005da8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08000aa8": {
                    "1": "validate_range_and_shift",
                    "9": "calculate_shifted_value",
                    "2": "reverse_bits"
                },
                "param_1": {
                    "3": "input_1",
                    "1": "input_param",
                    "10": "input_value",
                    "4": "value"
                },
                "param_2": {
                    "1": "limit",
                    "3": "multiplier",
                    "2": "shift",
                    "7": "shift_amount"
                },
                "iVar1": {
                    "1": "shifted_val",
                    "11": "shifted_value",
                    "2": "temp_var1"
                },
                "uVar2": {
                    "1": "result_2",
                    "3": "shifted_value",
                    "2": "shift",
                    "13": "shift_amount"
                },
                "0x80000000": {
                    "1": "sign_bit"
                },
                "0x200000": {
                    "1": "constant"
                },
                "0xffe00000": {
                    "1": "limit"
                },
                "-1": {
                    "1": "negative_one"
                },
                "0x15": {
                    "1": "shift"
                },
                "0x3e1": {
                    "1": "constant"
                },
                "0xb": {
                    "1": "bit_shift"
                },
                "0xc": {
                    "1": "shift_amount_2"
                },
                "0xffffffff": {
                    "1": "mask_all_ones"
                }
            }
        },
        "FUN_08000ae8": {
            "entrypoint": "0x08000ae8",
            "current_name": "execute_system_call_08000ae8",
            "code": "\nvoid execute_system_call_08000ae8(void)\n\n{\n  trigger_interrupt(0x3f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000ae8": "execute_system_call_08000ae8",
                "software_interrupt": "trigger_interrupt"
            },
            "calling": [
                "FUN_08000aec"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08000ae8": {
                    "1": "call_software_interrupt",
                    "5": "execute_software_interrupt",
                    "2": "trigger_software_interrupt",
                    "4": "invoke_system_interrupt",
                    "8": "execute_system_call"
                },
                "software_interrupt": {
                    "1": "system_call",
                    "4": "trigger_interrupt",
                    "2": "interrupt",
                    "3": "call_interrupt"
                },
                "<no parameter>": {
                    "1": ""
                },
                "<no variable>": {
                    "1": ""
                },
                "": {
                    "1": ""
                },
                "PTR_": {
                    "1": "unchanged"
                },
                "DAT_": {
                    "1": "unchanged"
                },
                "0x3f": {
                    "1": "interrupt_number"
                }
            }
        },
        "FUN_08000aec": {
            "entrypoint": "0x08000aec",
            "current_name": "execute_afl_call_08000aec",
            "code": "\nundefined4 execute_afl_call_08000aec(undefined4 input_param,undefined4 unused_param,undefined4 unused_param2,undefined4 output_param)\n\n{\n  undefined4 result;\n  \n  if (DAT_2000017c != 0) {\n    return 0;\n  }\n  result = perform_afl_call(1,input_param,0,0,output_param);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08000aec": "execute_afl_call_08000aec",
                "param_1": "input_param",
                "param_4": "output_param",
                "uVar1": "result",
                "aflCall": "perform_afl_call",
                "param_2": "unused_param",
                "param_3": "unused_param2"
            },
            "calling": [
                "FUN_08000bcc"
            ],
            "called": [
                "FUN_08000ae8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08000aec": {
                    "1": "call_external_function",
                    "2": "afl_call_wrapper",
                    "7": "call_afl_function",
                    "15": "execute_afl_call"
                },
                "param_1": {
                    "2": "argument1",
                    "1": "param",
                    "3": "input_value",
                    "4": "arg1",
                    "11": "input_param"
                },
                "param_4": {
                    "3": "flag",
                    "1": "input4",
                    "7": "output_param",
                    "2": "output_value",
                    "4": "arg4"
                },
                "uVar1": {
                    "1": "return_value",
                    "14": "result",
                    "2": "afl_call_result"
                },
                "DAT_2000017c": {
                    "1": "condition_flag"
                },
                "aflCall": {
                    "1": "perform_afl_call"
                },
                "param_2": {
                    "2": "unused_param",
                    "1": "buffer_size"
                },
                "param_3": {
                    "1": "index",
                    "4": "unused_param2"
                },
                "<original_function_name>": {
                    "1": "execute_afl_call"
                }
            }
        },
        "FUN_08000b08": {
            "entrypoint": "0x08000b08",
            "current_name": "initialize_devices_08000b08",
            "code": "\nvoid initialize_devices_08000b08(int condition1,int condition2)\n\n{\n  if ((condition1 == 1) && (condition2 == 0xffff)) {\n    initialize_pid(&DAT_200001c0,&DAT_20000188,&DAT_200001b8,&DAT_20000240,DAT_20000020,DAT_20000024,\n        DAT_20000018,DAT_2000001c,DAT_20000010,DAT_20000014,0);\n    initialize_lcd(&DAT_20000194,DAT_2000005c,DAT_20000038,DAT_20000028,DAT_2000002c,DAT_20000030,\n                  DAT_20000034);\n    initialize_max31855(&DAT_2000024c,DAT_20000074,DAT_20000070,DAT_2000006c);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000b08": "initialize_devices_08000b08",
                "param_1": "condition1",
                "param_2": "condition2",
                "PID": "initialize_pid",
                "LiquidCrystal": "initialize_lcd",
                "MAX31855": "initialize_max31855"
            },
            "calling": [],
            "called": [
                "FUN_08001b18",
                "FUN_0800157c",
                "FUN_08001510"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08000b08": {
                    "11": "initialize_devices",
                    "2": "initialize_hardware_components",
                    "6": "initialize_peripherals",
                    "1": "initialize_system",
                    "5": "initialize_components"
                },
                "param_1": {
                    "5": "flag",
                    "1": "input1",
                    "10": "condition1",
                    "3": "value1",
                    "2": "option1"
                },
                "param_2": {
                    "1": "condition_2",
                    "10": "condition2",
                    "8": "value",
                    "2": "option2",
                    "3": "flag2"
                },
                "PID": {
                    "3": "configure_pid",
                    "1": "setup_pid",
                    "16": "initialize_pid"
                },
                "LiquidCrystal": {
                    "1": "initialize_display",
                    "15": "initialize_lcd",
                    "5": "initialize_liquid_crystal"
                },
                "MAX31855": {
                    "3": "initialize_thermocouple",
                    "1": "initialize_max",
                    "8": "initialize_temperature_sensor"
                },
                "FUN_08001b18": {
                    "1": "initialize_function1"
                },
                "FUN_0800157c": {
                    "1": "initialize_function2"
                },
                "param_3": {
                    "1": "initialize_func3_param3"
                },
                "param_4": {
                    "1": "initialize_func3_param4"
                },
                "FUN_08001510": {
                    "1": "initialize_function3"
                }
            }
        },
        "FUN_08000bcc": {
            "entrypoint": "0x08000bcc",
            "current_name": "initialize_oven_08000bcc",
            "code": "\nvoid initialize_oven_08000bcc(void)\n\n{\n  set_pin_state(DAT_20000064,0);\n  configure_pin_mode(DAT_20000064,1);\n  set_pin_state(DAT_20000004,0);\n  configure_pin_mode(DAT_20000004,1);\n  set_pin_state(DAT_20000060,0);\n  configure_pin_mode(DAT_20000060,1);\n  set_pin_state(DAT_20000004,1);\n  initialize_display(&DAT_20000194,8,2,0);\n  create_character(&DAT_20000194,0,&DAT_20000008);\n  clear_display(&DAT_20000194);\n  execute_function(&DAT_20000194,\"Reflow\");\n  set_cursor_position(&DAT_20000194,0,1);\n  execute_function(&DAT_20000194,\"Oven 1.2\");\n  set_pin_state(DAT_20000004,0);\n  delay_milliseconds(0x9c4);\n  clear_display(&DAT_20000194);\n  initialize_serial_communication(&DAT_2000036c,0xe100,6);\n  set_pin_state(DAT_20000060,1);\n  DAT_20000258 = 2000;\n  DAT_200001b0 = get_current_milliseconds();\n  DAT_200001b4 = get_current_milliseconds();\n  start_fork_server(0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000bcc": "initialize_oven_08000bcc",
                "initialize_display_080013a4": "initialize_display",
                "execute_function_08005c96": "execute_function",
                "digitalWrite": "set_pin_state",
                "pinMode": "configure_pin_mode",
                "createChar": "create_character",
                "clear": "clear_display",
                "setCursor": "set_cursor_position",
                "delay": "delay_milliseconds",
                "begin": "initialize_serial_communication",
                "millis": "get_current_milliseconds",
                "startForkserver": "start_fork_server"
            },
            "calling": [
                "FUN_08005f6c"
            ],
            "called": [
                "FUN_08005a68",
                "FUN_08001366",
                "FUN_08001550",
                "FUN_080058e0",
                "FUN_080013a4",
                "FUN_0800135a",
                "FUN_080058e8",
                "FUN_08005848",
                "FUN_08000aec",
                "FUN_08005c96",
                "FUN_080057b4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08000bcc": {
                    "3": "initialize_oven_system",
                    "27": "initialize_oven",
                    "1": "initialize_oven_controller"
                },
                "initialize_serial_communication_08005a68": {
                    "16": "initialize_serial_communication"
                },
                "send_character_08001366": {
                    "16": "send_character"
                },
                "send_data_08001550": {
                    "16": "send_data"
                },
                "get_current_milliseconds_080058e0": {
                    "17": "get_current_milliseconds"
                },
                "initialize_display_080013a4": {
                    "26": "initialize_display",
                    "1": "setup_display"
                },
                "send_data_0800135a": {
                    "1": "send_data_to_socket",
                    "7": "send_data",
                    "5": "send_data2"
                },
                "FUNC_080058e8": {
                    "1": "perform_operation",
                    "2": "perform_function",
                    "3": "some_function"
                },
                "configure_pin_08005848": {
                    "1": "configure_pin1",
                    "15": "configure_pin"
                },
                "execute_afl_call_08000aec": {
                    "16": "execute_afl_call"
                },
                "execute_function_08005c96": {
                    "3": "execute_display_function",
                    "1": "display_message",
                    "19": "execute_function",
                    "2": "display_text"
                },
                "configure_pin_080057b4": {
                    "1": "configure_pin_mode",
                    "5": "configure_pin2",
                    "9": "configure_pin"
                },
                "DIGITAL_WRITE": {
                    "3": "set_digital_output",
                    "1": "set_pin_value"
                },
                "PIN_MODE": {
                    "1": "pin_mode",
                    "8": "set_pin_mode"
                },
                "DELAY": {
                    "1": "delay_milliseconds"
                },
                "INITIALIZE_DISPLAY": {
                    "1": "initialize_display"
                },
                "CREATE_CHAR": {
                    "1": "create_custom_character"
                },
                "CLEAR": {
                    "2": "clear_display"
                },
                "EXECUTE_FUNCTION": {
                    "1": "execute_function"
                },
                "SET_CURSOR": {
                    "1": "set_cursor_position"
                },
                "BEGIN": {
                    "2": "begin_communication"
                },
                "START_FORKSERVER": {
                    "2": "start_fork_server"
                },
                "INITIALIZE_SERIAL_COMMUNICATION": {
                    "1": "initialize_serial_communication"
                },
                "SEND_CHARACTER": {
                    "1": "send_character"
                },
                "SEND_DATA": {
                    "1": "send_data"
                },
                "GET_CURRENT_MILLISECONDS": {
                    "1": "get_current_milliseconds"
                },
                "CONFIGURE_PIN": {
                    "1": "configure_pin"
                },
                "EXECUTE_AFL_CALL": {
                    "1": "execute_afl_call"
                },
                "digitalWrite": {
                    "7": "set_pin_state",
                    "1": "set_digital_pin_state"
                },
                "pinMode": {
                    "4": "configure_pin_mode",
                    "1": "configure_digital_pin_mode"
                },
                "createChar": {
                    "2": "create_custom_char",
                    "7": "create_character",
                    "6": "create_custom_character",
                    "1": "define_character"
                },
                "clear": {
                    "16": "clear_display"
                },
                "setCursor": {
                    "1": "set_cursor",
                    "2": "move_cursor",
                    "5": "set_display_cursor",
                    "7": "set_cursor_position"
                },
                "delay": {
                    "5": "delay_execution",
                    "1": "add_delay",
                    "2": "pause_execution",
                    "8": "delay_milliseconds"
                },
                "begin": {
                    "1": "initialize_communication",
                    "5": "initialize_serial_communication",
                    "3": "begin_communication",
                    "2": "start_communication"
                },
                "millis": {
                    "10": "get_current_milliseconds"
                },
                "startForkserver": {
                    "1": "start_forkserver",
                    "13": "start_fork_server"
                },
                "DIG_PIN_20000064": {
                    "1": "display_pin"
                },
                "DIG_PIN_20000004": {
                    "1": "oven_pin"
                },
                "DIG_PIN_20000060": {
                    "1": "communication_pin"
                },
                "DAT_20000194": {
                    "1": "display_data",
                    "3": "display"
                },
                "DAT_20000008": {
                    "1": "custom_char"
                },
                "DAT_2000036c": {
                    "1": "communication_data"
                },
                "DAT_20000258": {
                    "1": "execution_time"
                },
                "DAT_200001b0": {
                    "3": "start_time"
                },
                "DAT_200001b4": {
                    "2": "current_time",
                    "1": "end_time"
                },
                "DIG_20000064": {
                    "1": "display_pin"
                },
                "DIG_20000004": {
                    "1": "oven_pin"
                },
                "DIG_20000060": {
                    "1": "serial_pin"
                },
                "DIGITAL_PIN": {
                    "1": "oven_pin"
                },
                "DISPLAY_PIN1": {
                    "1": "display_pin1"
                },
                "DISPLAY_PIN2": {
                    "1": "display_pin2"
                },
                "DISPLAY_FLAG": {
                    "1": "display_flag"
                },
                "DISPLAY_DATA": {
                    "1": "display_data"
                },
                "STRING_REFLOW": {
                    "1": "reflow_string"
                },
                "STRING_OVEN": {
                    "1": "oven_string"
                },
                "DIGITAL_ON": {
                    "1": "digital_on"
                },
                "DIGITAL_OFF": {
                    "1": "digital_off"
                },
                "DELAY_DURATION": {
                    "1": "delay_duration"
                },
                "DATA_ADDRESS": {
                    "1": "data_address"
                },
                "SERIAL_PORT": {
                    "1": "serial_port"
                },
                "BAUD_RATE": {
                    "1": "baud_rate"
                },
                "CONFIG": {
                    "1": "config"
                },
                "MAX_LENGTH": {
                    "1": "max_length"
                },
                "CHARACTER": {
                    "1": "character"
                },
                "DATA_LENGTH": {
                    "1": "data_length"
                },
                "DATA_PTR": {
                    "1": "data_ptr"
                },
                "MILLISECONDS": {
                    "1": "current_milliseconds"
                },
                "INPUT_ARRAY": {
                    "1": "input_array"
                },
                "STRING_PARAM": {
                    "1": "string_param"
                },
                "PIN_NUMBER": {
                    "1": "pin_number"
                },
                "PIN_CONFIG": {
                    "1": "pin_config"
                },
                "DIGITAL_WRITE_PIN": {
                    "1": "set_pin_digital_value"
                },
                "DAT_20000064": {
                    "1": "oven_pin1"
                },
                "DAT_20000004": {
                    "1": "oven_pin2"
                },
                "DAT_20000060": {
                    "1": "display_pin"
                },
                "INITIALIZE_DISPLAY_080013a4": {
                    "1": "initialize_display"
                },
                "EXECUTE_FUNCTION_08005c96": {
                    "1": "show_message"
                }
            }
        },
        "FUN_08000cd0": {
            "entrypoint": "0x08000cd0",
            "current_name": "control_temperature_08000cd0",
            "code": "\nvoid control_temperature_08000cd0(void)\n\n{\n  uint current_millis;\n  undefined4 output_pin;\n  int comparison_result;\n  undefined4 thermocouple_value2;\n  undefined4 extra_output1;\n  undefined4 extra_output2;\n  undefined4 extra_output3;\n  undefined8 result;\n  \n  current_millis = get_millis();\n  if (DAT_200001b4 < current_millis) {\n    DAT_200001b4 = DAT_200001b4 + 1000;\n    result = read_thermocouple(&DAT_2000024c,0);\n    thermocouple_value2 = (undefined4)((ulonglong)result >> 0x20);\n    output_pin = (undefined4)result;\n    DAT_20000188 = output_pin;\n    DAT_2000018c = thermocouple_value2;\n    comparison_result = compare_floats(output_pin,thermocouple_value2,0,0x40c38800);\n    if (((comparison_result != 0) || (comparison_result = compare_floats(output_pin,thermocouple_value2,0,0x40c38880), comparison_result != 0)) ||\n       (comparison_result = compare_floats(output_pin,thermocouple_value2,0,0x40c38900), comparison_result != 0)) {\n      DAT_20000238 = 7;\n      DAT_20000239 = '\\0';\n    }\n  }\n  current_millis = get_millis();\n  output_pin = DAT_20000060;\n  if (DAT_200001b0 < current_millis) {\n    DAT_200001b0 = DAT_200001b0 + 1000;\n    if (DAT_20000239 == '\\x01') {\n      comparison_result = read_digital_pin(DAT_20000060);\n      write_digital_pin(output_pin,comparison_result == 0);\n      DAT_20000250 = DAT_20000250 + 1;\n      print_number_or_execute_function(&DAT_2000036c,DAT_20000250,10);\n      execute_function(&DAT_2000036c,&DAT_08007368);\n      print_data(&DAT_2000036c,extra_output1,DAT_20000240,DAT_20000244,2);\n      execute_function(&DAT_2000036c,&DAT_08007368);\n      print_data(&DAT_2000036c,extra_output2,DAT_20000188,DAT_2000018c,2);\n      execute_function(&DAT_2000036c,&DAT_08007368);\n      print_text_line(&DAT_2000036c,extra_output3,DAT_200001b8,DAT_200001bc,2);\n    }\n    else {\n      write_digital_pin(DAT_20000060,1);\n    }\n    clear_display(&DAT_20000194);\n    execute_function(&DAT_20000194,(&PTR_s_Ready_2000003c)[DAT_20000238]);\n    set_cursor_position(&DAT_20000194,0,1);\n    if (DAT_20000238 == 7) {\n      execute_function(&DAT_20000194,\"TC Error!\");\n    }\n    else {\n      print_data(&DAT_20000194,2,DAT_20000188,DAT_2000018c,2);\n      send_data(&DAT_20000194,0);\n      execute_function(&DAT_20000194,&DAT_08007378);\n    }\n  }\n  thermocouple_value2 = DAT_2000018c;\n  output_pin = DAT_20000188;\n  switch(DAT_20000238) {\n  case 0:\n    comparison_result = compare_floats_greater_than_or_equal(DAT_20000188,DAT_2000018c,0,0x40490000);\n    if (comparison_result == 0) {\n      if (DAT_20000248 == '\\x01') {\n        calculate_sum(&DAT_2000036c,\"Time Setpoint Input Output\");\n        DAT_20000250 = 0;\n        DAT_2000025c = get_millis();\n        DAT_20000240 = 0;\n        DAT_20000244 = 0x4062c000;\n        result = int_to_float(DAT_20000258);\n        set_output_limits(&DAT_200001c0,(int)((ulonglong)result >> 0x20),0,0,result);\n        set_sample_time(&DAT_200001c0,1000);\n        set_mode(&DAT_200001c0,1);\n        DAT_20000238 = 1;\n      }\n    }\n    else {\n      DAT_20000238 = 6;\n    }\n    break;\n  case 1:\n    DAT_20000239 = '\\x01';\n    comparison_result = compare_floats_greater_than_or_equal(DAT_20000188,DAT_2000018c,0,0x4062c000);\n    if (comparison_result != 0) {\n      result = get_millis();\n      DAT_20000254 = (int)result + 9000;\n      set_tunings(&DAT_200001c0,(int)((ulonglong)result >> 0x20),0,0x4072c000,0x9999999a,0x3fa99999,0,\n                 0x406f4000);\n      DAT_20000240 = 0;\n      DAT_20000244 = 0x40636000;\n      DAT_20000238 = 2;\n    }\n    break;\n  case 2:\n    current_millis = get_millis();\n    if (DAT_20000254 < current_millis) {\n      comparison_result = get_millis();\n      DAT_20000254 = comparison_result + 9000;\n      result = add_floats(DAT_20000240,DAT_20000244,0,0x40140000);\n      DAT_20000244 = (undefined4)((ulonglong)result >> 0x20);\n      DAT_20000240 = (undefined4)result;\n      result = compare_float_greater_than(DAT_20000240,DAT_20000244,0,0x40690000);\n      if ((int)result != 0) {\n        set_tunings(&DAT_200001c0,(int)((ulonglong)result >> 0x20),0,0x4072c000,0x9999999a,0x3fa99999,\n                   0,0x4075e000);\n        DAT_20000240 = 0;\n        DAT_20000244 = 0x406f4000;\n        DAT_20000238 = 3;\n      }\n    }\n    break;\n  case 3:\n    result = compare_floats_greater_than_or_equal(DAT_20000188,DAT_2000018c,0,0x406ea000);\n    if ((int)result != 0) {\n      set_tunings(&DAT_200001c0,(int)((ulonglong)result >> 0x20),0,0x4072c000,0x9999999a,0x3fa99999,0,\n                 0x4075e000);\n      DAT_20000240 = 0;\n      DAT_20000244 = 0x40590000;\n      DAT_20000238 = 4;\n    }\n    break;\n  case 4:\n    comparison_result = compare_floats_less_than_or_equal(DAT_20000188,DAT_2000018c,0,0x40590000);\n    if (comparison_result != 0) {\n      comparison_result = get_millis();\n      DAT_20000180 = comparison_result + 1000;\n      write_digital_pin(DAT_20000004,1);\n      DAT_20000239 = '\\0';\n      DAT_20000238 = 5;\n    }\n    break;\n  case 5:\n    current_millis = get_millis();\n    if (DAT_20000180 < current_millis) {\n      write_digital_pin(DAT_20000004,0);\n      DAT_20000238 = 0;\n    }\n    break;\n  case 6:\n    comparison_result = compare_float_less_than(DAT_20000188,DAT_2000018c,0,0x40490000);\n    if (comparison_result != 0) {\n      DAT_20000238 = 0;\n    }\n    break;\n  case 7:\n    comparison_result = compare_floats(DAT_20000188,DAT_2000018c,0,0x40c38800);\n    if (((comparison_result == 0) && (comparison_result = compare_floats(output_pin,thermocouple_value2,0,0x40c38880), comparison_result == 0)) &&\n       (comparison_result = compare_floats(output_pin,thermocouple_value2,0,0x40c38900), comparison_result == 0)) {\n      DAT_20000238 = 0;\n    }\n    else {\n      DAT_20000238 = 7;\n    }\n  }\n  if ((DAT_20000248 == '\\x01') && (DAT_20000239 == '\\x01')) {\n    DAT_20000239 = '\\0';\n    DAT_20000238 = 0;\n  }\n  if (DAT_20000184 == '\\x01') {\n    comparison_result = read_analog_pin(DAT_20000068);\n    if (comparison_result == 0) {\n      comparison_result = get_millis();\n      if (0x32 < (uint)(comparison_result - DAT_20000190)) {\n        DAT_20000184 = '\\x02';\n      }\n    }\n    else {\n      DAT_20000184 = '\\0';\n    }\n  }\n  else if (DAT_20000184 == '\\0') {\n    DAT_20000248 = '\\0';\n    comparison_result = read_analog_pin(DAT_20000068);\n    if (comparison_result == 0) {\n      DAT_20000190 = get_millis();\n      DAT_20000184 = '\\x01';\n    }\n  }\n  else if ((DAT_20000184 == '\\x02') && (comparison_result = read_analog_pin(DAT_20000068), comparison_result != 0)) {\n    DAT_20000248 = '\\x01';\n    DAT_20000184 = '\\0';\n  }\n  if (DAT_20000239 == '\\x01') {\n    comparison_result = get_millis();\n    compute(&DAT_200001c0);\n    if (DAT_20000258 < (uint)(comparison_result - DAT_2000025c)) {\n      DAT_2000025c = DAT_2000025c + DAT_20000258;\n    }\n    result = unsigned_int_to_float(comparison_result - DAT_2000025c);\n    comparison_result = compare_float_less_than((int)result,(int)((ulonglong)result >> 0x20),DAT_200001b8,DAT_200001bc);\n    if (comparison_result == 0) {\n      write_digital_pin(DAT_20000064,0);\n    }\n    else {\n      write_digital_pin(DAT_20000064,1);\n    }\n  }\n  else {\n    write_digital_pin(DAT_20000064,0);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000cd0": "control_temperature_08000cd0",
                "uVar1": "current_millis",
                "uVar2": "output_pin",
                "iVar3": "comparison_result",
                "uVar4": "thermocouple_value2",
                "extraout_r1": "extra_output1",
                "extraout_r1_00": "extra_output2",
                "extraout_r1_01": "extra_output3",
                "uVar5": "result",
                "millis": "get_millis",
                "readThermocouple": "read_thermocouple",
                "__aeabi_dcmpeq": "compare_floats",
                "digitalRead": "read_digital_pin",
                "digitalWrite": "write_digital_pin",
                "print_number_or_execute_function_08005d82": "print_number_or_execute_function",
                "execute_function_08005c96": "execute_function",
                "print": "print_data",
                "println": "print_text_line",
                "clear": "clear_display",
                "setCursor": "set_cursor_position",
                "SetOutputLimits": "set_output_limits",
                "SetSampleTime": "set_sample_time",
                "SetMode": "set_mode",
                "__aeabi_dcmpge": "compare_floats_greater_than_or_equal",
                "calculate_sum_08005cd4": "calculate_sum",
                "__floatsidf": "int_to_float",
                "SetTunings": "set_tunings",
                "__aeabi_dadd": "add_floats",
                "__aeabi_dcmpgt": "compare_float_greater_than",
                "__aeabi_dcmplt": "compare_float_less_than",
                "__aeabi_dcmple": "compare_floats_less_than_or_equal",
                "analogRead": "read_analog_pin",
                "__floatunsidf": "unsigned_int_to_float",
                "Compute": "compute",
                "send_data_0800134e": "send_data",
                "sum": "sum_value",
                "execute_function_08005d82": "execute_print_number_or_function"
            },
            "calling": [
                "FUN_08005f6c"
            ],
            "called": [
                "FUN_080009dc",
                "FUN_0800042c",
                "FUN_08005890",
                "FUN_08001a44",
                "FUN_08000a18",
                "FUN_08005f2c",
                "FUN_08005d82",
                "FUN_080016b4",
                "FUN_080058e0",
                "FUN_08001366",
                "FUN_08005848",
                "FUN_08005c96",
                "FUN_080009c8",
                "FUN_0800134e",
                "FUN_080018f8",
                "FUN_08005f40",
                "FUN_08000a04",
                "FUN_08005754",
                "FUN_080015f8",
                "FUN_08000194",
                "FUN_080009f0",
                "FUN_0800135a",
                "FUN_08005cd4",
                "FUN_08001960",
                "FUN_08001918",
                "FUN_0800040c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08000cd0": {
                    "1": "do_thermocouple_reading",
                    "9": "control_temperature",
                    "3": "control_loop",
                    "2": "temperature_control",
                    "4": "update_temperature_control"
                },
                "uVar1": {
                    "7": "current_time",
                    "19": "current_millis",
                    "3": "current_milliseconds"
                },
                "uVar2": {
                    "1": "thermo_couple_reading_low",
                    "2": "thermocouple_value1",
                    "5": "pin_number",
                    "7": "output_pin"
                },
                "iVar3": {
                    "3": "result",
                    "1": "temp_comparison",
                    "4": "temp_var",
                    "8": "comparison_result"
                },
                "uVar4": {
                    "1": "thermo_value_high",
                    "2": "thermocouple_value2"
                },
                "extraout_r1": {
                    "1": "temperature_print",
                    "2": "param1",
                    "5": "extra_output1"
                },
                "extraout_r1_00": {
                    "2": "param2",
                    "1": "extra2",
                    "5": "extra_output2"
                },
                "extraout_r1_01": {
                    "1": "extra_return_val_3",
                    "2": "param3",
                    "5": "extra_output3"
                },
                "uVar5": {
                    "1": "temp_double_var",
                    "2": "temp_reading",
                    "5": "result"
                },
                "DAT_200001b4": {
                    "1": "target_time1",
                    "6": "previous_millis1"
                },
                "DAT_2000024c": {
                    "1": "input1",
                    "4": "thermocouple",
                    "5": "thermocouple_pin",
                    "2": "thermocouple_data"
                },
                "DAT_20000188": {
                    "1": "temp_reading_lower",
                    "3": "temperature1",
                    "2": "temperature"
                },
                "DAT_2000018c": {
                    "1": "temperature_reading_high",
                    "3": "temperature2",
                    "2": "setpoint"
                },
                "DAT_20000238": {
                    "1": "thermocouple_error_1",
                    "2": "control_state",
                    "10": "state"
                },
                "DAT_20000239": {
                    "7": "flag",
                    "1": "thermocouple_error_2",
                    "3": "is_ready",
                    "2": "is_control_enabled"
                },
                "DAT_200001b0": {
                    "1": "previous_digital_update",
                    "6": "previous_millis2"
                },
                "DAT_20000248": {
                    "1": "is_set",
                    "3": "is_button_pressed",
                    "2": "time_setpoint_flag"
                },
                "DAT_20000060": {
                    "1": "thermocouple_interval",
                    "2": "button_pin",
                    "3": "relay_pin"
                },
                "DAT_200001b8": {
                    "1": "millis_to_read_adc"
                },
                "DAT_200001bc": {
                    "1": "output_value2"
                },
                "DAT_20000240": {
                    "1": "temperature1"
                },
                "DAT_20000244": {
                    "2": "temperature_setpoint",
                    "1": "temp_value2"
                },
                "DAT_20000194": {
                    "4": "lcd_buffer",
                    "1": "lcd_output",
                    "2": "status_buffer",
                    "5": "lcd"
                },
                "DAT_200001c0": {
                    "1": "temperature_pid",
                    "3": "controller",
                    "5": "pid"
                },
                "DAT_2000036c": {
                    "1": "output",
                    "3": "output_buffer"
                },
                "DAT_08007368": {
                    "1": "lcd_control_functions1"
                },
                "DAT_08007378": {
                    "1": "constant2"
                },
                "DAT_2000004": {
                    "1": "heating_relay_pin"
                },
                "DAT_20000184": {
                    "1": "is_pressed",
                    "2": "analog_status"
                },
                "DAT_20000190": {
                    "1": "button_millis"
                },
                "DAT_20000254": {
                    "1": "relay_state_millis",
                    "2": "next_time"
                },
                "DAT_20000180": {
                    "1": "heating_on_millis"
                },
                "DAT_20000004": {
                    "4": "digital_pin",
                    "3": "relay_pin",
                    "1": "switch_pin"
                },
                "DAT_20000258": {
                    "1": "pid_delay",
                    "7": "sample_time"
                },
                "DAT_2000025c": {
                    "2": "previous_time",
                    "1": "timer"
                },
                "DAT_20000068": {
                    "1": "adc_input_pin",
                    "11": "analog_pin",
                    "3": "adc_pin"
                },
                "DAT_20000064": {
                    "1": "status_le_dpin",
                    "3": "output_pin",
                    "4": "led_pin"
                },
                "DAT_2000023c": {
                    "1": "init_state"
                },
                "DAT_20000370": {
                    "1": "pid_buffer"
                },
                "DAT_2000038c": {
                    "1": "print_buffer5"
                },
                "DAT_200001c4": {
                    "1": "value_1"
                },
                "DAT_20000220": {
                    "1": "initial_output"
                },
                "DAT_200001a8": {
                    "1": "input"
                },
                "DAT_200001ac": {
                    "1": "last_input"
                },
                "DAT_200001c8": {
                    "1": "output"
                },
                "DAT_20000000": {
                    "1": "cy_null"
                },
                "DAT_20000084": {
                    "1": "null_char_check"
                },
                "DAT_2000008c": {
                    "1": "null_char_result"
                },
                "DAT_20000070": {
                    "1": "null_char_previous_check"
                },
                "DAT_200000a0": {
                    "1": "comparison_result"
                },
                "DAT_2000019c": {
                    "1": "result"
                },
                "DAT_200001dc": {
                    "1": "func_output"
                },
                "DAT_20000250": {
                    "1": "time_setpoint",
                    "3": "count",
                    "6": "counter",
                    "2": "button_press_count"
                },
                "PTR_s_Ready_2000003c": {
                    "1": "ready_strings",
                    "3": "ready_string"
                },
                "PTR_DAT_08005380": {
                    "1": "hysteresis_string"
                },
                "millis": {
                    "1": "get_milliseconds",
                    "3": "get_current_milliseconds",
                    "5": "get_millis"
                },
                "readThermocouple": {
                    "1": "read_temp_data"
                },
                "__aeabi_dcmpeq": {
                    "1": "check_equality"
                },
                "digitalRead": {
                    "1": "read_digital_input",
                    "3": "read_digital_pin"
                },
                "digitalWrite": {
                    "2": "write_digital_pin",
                    "1": "write_digital"
                },
                "print_number_or_execute_function_08005d82": {
                    "1": "print_number_or_execute",
                    "7": "print_number_or_execute_function"
                },
                "execute_function_08005c96": {
                    "8": "execute_function"
                },
                "print": {
                    "1": "print_text",
                    "3": "print_data"
                },
                "println": {
                    "1": "print_line_data"
                },
                "clear": {
                    "1": "clear_lcd",
                    "2": "clear_display"
                },
                "setCursor": {
                    "1": "set_cursor_position"
                },
                "SetOutputLimits": {
                    "1": "set_pid_output_limits",
                    "4": "set_output_limits"
                },
                "SetSampleTime": {
                    "1": "set_pid_sample_time",
                    "3": "set_sample_time"
                },
                "SetMode": {
                    "1": "set_pid_mode",
                    "4": "set_mode"
                },
                "__aeabi_dcmpge": {
                    "1": "is_greater_than_or_equal"
                },
                "calculate_sum_08005cd4": {
                    "5": "calculate_sum",
                    "1": "sum"
                },
                "__floatsidf": {
                    "1": "integer_to_float",
                    "3": "int_to_float"
                },
                "SetTunings": {
                    "2": "set_tunings"
                },
                "__aeabi_dadd": {
                    "2": "add_float"
                },
                "__aeabi_dcmpgt": {
                    "1": "compare_floats_greater_than",
                    "2": "compare_float_greater_than"
                },
                "__aeabi_dcmplt": {
                    "1": "float_less_than",
                    "2": "compare_float_less_than"
                },
                "__aeabi_dcmple": {
                    "1": "check_less_than_or_equal"
                },
                "analogRead": {
                    "3": "read_analog_pin",
                    "1": "read_analog"
                },
                "__floatunsidf": {
                    "1": "unsigned_integer_to_float",
                    "2": "unsigned_int_to_float"
                },
                "Compute": {
                    "1": "compute_pid",
                    "2": "compute"
                },
                "calculate_result_080015f8": {
                    "5": "calculate_result"
                },
                "calculate_08000194": {
                    "2": "calculate_value",
                    "1": "calculate_values",
                    "3": "calculate"
                },
                "send_data_0800134e": {
                    "9": "send_data"
                },
                "reverse_bits_0800040c": {
                    "6": "reverse_bits"
                },
                "(&PTR_s_Ready_2000003c)": {
                    "1": "status_string_array"
                },
                "DAT_20000368": {
                    "1": "output_buffer_ptr"
                },
                "DAT_20000234": {
                    "1": "is_serial_data_available"
                },
                "DAT_20000230": {
                    "1": "serial_data"
                },
                "DAT_200001fc": {
                    "1": "serial_data_length"
                },
                "DAT_200001f8": {
                    "1": "receive_flag"
                },
                "DAT_200001f4": {
                    "1": "send_flag"
                },
                "TIMESTAMP": {
                    "1": "time_stamp"
                },
                "D1": {
                    "1": "relay_pin"
                },
                "ITEM1": {
                    "1": "item1"
                },
                "ITEM2": {
                    "1": "item2"
                },
                "DAT_20000130": {
                    "1": "string1"
                },
                "DAT_20000253": {
                    "1": "counter2"
                },
                "DAT_20000257": {
                    "1": "counter2_limit"
                },
                "DAT_20000138": {
                    "1": "string2"
                },
                "DAT_2000025d": {
                    "1": "previous_millis4"
                },
                "DAT_20000249": {
                    "1": "counter3"
                },
                "DAT_2000024d": {
                    "1": "counter3_limit"
                },
                "result1": {
                    "1": "is_greater"
                },
                "result2": {
                    "1": "is_zero"
                },
                "input1": {
                    "2": "input_value1"
                },
                "input2": {
                    "2": "input_value2"
                },
                "input3": {
                    "1": "input_value3"
                },
                "input4": {
                    "1": "input_value4"
                },
                "input_array": {
                    "1": "input_array"
                },
                "socket": {
                    "1": "socket_id"
                },
                "buffer": {
                    "2": "data_buffer"
                },
                "size": {
                    "2": "data_size"
                },
                "flags": {
                    "2": "data_flags"
                },
                "input_value": {
                    "1": "input_value"
                },
                "pin_number": {
                    "1": "pin_number"
                },
                "base_address": {
                    "1": "base_address"
                },
                "flag": {
                    "1": "update_flag"
                },
                "pin_config": {
                    "1": "pin_configuration"
                },
                "input": {
                    "1": "input_value"
                },
                "string": {
                    "1": "string_data"
                },
                "param3": {
                    "1": "parameter3"
                },
                "param4": {
                    "1": "parameter4"
                },
                "character": {
                    "1": "char_data"
                },
                "max_length": {
                    "1": "max_length"
                },
                "param_4": {
                    "1": "parameter4"
                },
                "sum": {
                    "1": "sum_value"
                },
                "adc": {
                    "1": "adc_value"
                },
                "new_value1": {
                    "1": "new_value1"
                },
                "new_value2": {
                    "1": "new_value2"
                },
                "input_data": {
                    "1": "input_data"
                },
                "new_value": {
                    "1": "new_value"
                },
                "print_float_wrapper_08005f2c": {
                    "4": "print_float_wrapper"
                },
                "println_08001960": {
                    "1": "println_values"
                },
                "println_08001918": {
                    "1": "println_parameters"
                },
                "compute_080001c0": {
                    "1": "compute_control_loop"
                },
                "check_pin_status_08005890": {
                    "1": "is_pin_high",
                    "4": "check_pin_status"
                },
                "send_character_08001366": {
                    "5": "send_character"
                },
                "configure_pin_08005848": {
                    "4": "configure_pin"
                },
                "send_data_0800135a": {
                    "5": "send_data"
                },
                "check_equality_080009f0": {
                    "1": "is_equal",
                    "4": "check_equality"
                },
                "calculate_sum_08005f40": {
                    "4": "calculate_sum"
                },
                "process_data_080018f8": {
                    "5": "process_data"
                },
                "is_cy_null_080009dc": {
                    "4": "is_cy_null"
                },
                "check_if_not_zero_080009c8": {
                    "5": "check_if_not_zero",
                    "1": "is_not_zero"
                },
                "reverse_bits_0800042c": {
                    "4": "reverse_bits"
                },
                "is_null_character_08000a18": {
                    "6": "is_null_character"
                },
                "calculate_result_080016b4": {
                    "5": "calculate_result"
                },
                "check_comparison_result_08000a04": {
                    "4": "check_comparison_result"
                },
                "get_adc_value_08005754": {
                    "5": "get_adc_value"
                },
                "update_status_08001a44": {
                    "4": "update_status"
                },
                "get_current_milliseconds_080058e0": {
                    "1": "get_current_millis",
                    "2": "get_current_milliseconds"
                },
                "update_values_08001960": {
                    "4": "update_values"
                },
                "update_parameters_08001918": {
                    "4": "update_parameters"
                },
                "DAT_20000224": {
                    "1": "flag2"
                },
                "DIGITAL_WRITE": {
                    "2": "digital_write"
                },
                "DIGITAL_READ": {
                    "1": "digital_read"
                },
                "execute_function_08005d82": {
                    "1": "execute_print_number_or_function"
                },
                "print_number_08005d82": {
                    "1": "print_number"
                },
                "__aeabi_dcmpne": {
                    "1": "compare_float_inequality"
                },
                "DIGITAL_PIN": {
                    "1": "digital_pin"
                },
                "DIGITAL_HIGH": {
                    "1": "digital_value_high"
                },
                "DIGITAL_LOW": {
                    "1": "digital_value_low"
                },
                "getMillis": {
                    "1": "get_current_millis"
                },
                "CONFIGURATION_VALUE": {
                    "1": "configuration_value"
                },
                "CONFIGURE_PIN": {
                    "1": "configure_pin"
                },
                "PROCESS_DATA_080018f8": {
                    "1": "process_data"
                },
                "setCursorPosition": {
                    "1": "set_position"
                },
                "DAT_200002ba": {
                    "1": "temp_sum"
                },
                "D2AT_20000248": {
                    "1": "is_manual_control"
                },
                "D2AT_20000238": {
                    "1": "control_state"
                },
                "D2AT_20000254": {
                    "1": "next_tuning_time"
                },
                "D2AT_20000250": {
                    "1": "counter"
                },
                "D2AT_2000025c": {
                    "1": "start_time"
                },
                "D2AT_2040036c": {
                    "1": "output_buffer"
                },
                "D2AT_208007368": {
                    "1": "ready_string"
                },
                "DAT_208007368": {
                    "1": "ready_string_index"
                },
                "D2AT_20000188": {
                    "1": "temp_value1"
                },
                "D2AT_2000018c": {
                    "1": "temp_value2"
                },
                "D2AT_20000240": {
                    "1": "temp_value3"
                },
                "D2AT_20000244": {
                    "1": "temp_value4"
                },
                "DAT_20000260": {
                    "1": "output_pin"
                },
                "D2AT_20000190": {
                    "1": "prev_detection_time"
                },
                "D2AT_20000184": {
                    "1": "is_detection_enabled"
                },
                "D2AT_20000004": {
                    "1": "detection_pin"
                },
                "D2AT_20000064": {
                    "1": "alarm_pin"
                },
                "D2AT_2000005c": {
                    "1": "detection_pin_mode"
                },
                "FUNC_08005c96": {
                    "1": "execute_function"
                },
                "D2AT_08007378": {
                    "1": "execution_function1"
                },
                "D2AT_08007368": {
                    "1": "execution_function2"
                },
                "D2AT_20000194": {
                    "1": "status_buffer"
                },
                "D2AT_2000003c": {
                    "1": "status_strings"
                },
                "DAT_200001e0": {
                    "1": "address_1"
                },
                "DAT_200001e4": {
                    "1": "address_2"
                },
                "DAT_20000214": {
                    "1": "max_value"
                },
                "DAT_20000218": {
                    "1": "min_value"
                }
            }
        },
        "FUN_08001294": {
            "entrypoint": "0x08001294",
            "current_name": "set_parameters_08001294",
            "code": "\nvoid set_parameters_08001294(int object_address,undefined value1,undefined value2,undefined value3,\n                 undefined value4)\n\n{\n  *(undefined *)(object_address + 0x18) = value1;\n  *(undefined *)(object_address + 0x19) = value2;\n  *(undefined *)(object_address + 0x1a) = value3;\n  *(undefined *)(object_address + 0x1b) = value4;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001294": "set_parameters_08001294",
                "param_1": "object_address",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3",
                "param_5": "value4"
            },
            "calling": [
                "FUN_080013a4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08001294": {
                    "11": "set_parameters",
                    "2": "store_params",
                    "1": "update_parameters"
                },
                "param_1": {
                    "1": "object",
                    "18": "object_address",
                    "4": "base_address",
                    "2": "obj_ptr"
                },
                "param_2": {
                    "3": "param2",
                    "1": "parameter_1",
                    "2": "param2_value",
                    "19": "value1"
                },
                "param_3": {
                    "3": "param3",
                    "1": "parameter_2",
                    "2": "value_2",
                    "19": "value2"
                },
                "param_4": {
                    "1": "val3",
                    "3": "param4",
                    "2": "value_3",
                    "19": "value3"
                },
                "param_5": {
                    "2": "parameter5",
                    "1": "parameter_4",
                    "3": "param5",
                    "19": "value4"
                },
                "param_1 + 0x18": {
                    "1": "address1"
                },
                "param_1 + 0x19": {
                    "1": "address2"
                },
                "param_1 + 0x1a": {
                    "1": "address3"
                },
                "param_1 + 0x1b": {
                    "1": "address4"
                }
            }
        },
        "FUN_080012a2": {
            "entrypoint": "0x080012a2",
            "current_name": "toggle_pin_state_080012a2",
            "code": "\nvoid toggle_pin_state_080012a2(int pin_number)\n\n{\n  digitalWrite(*(undefined *)(pin_number + 10),0);\n  digitalWrite(*(undefined *)(pin_number + 10),1);\n  digitalWrite(*(undefined *)(pin_number + 10),0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080012a2": "toggle_pin_state_080012a2",
                "param_1": "pin_number"
            },
            "calling": [
                "FUN_080012e8",
                "FUN_080012c0"
            ],
            "called": [
                "FUN_08005848"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080012a2": {
                    "1": "turn_on_and_off",
                    "4": "toggle_pin",
                    "6": "toggle_digital_pin",
                    "7": "toggle_pin_state",
                    "2": "initialize_gpio"
                },
                "param_1": {
                    "3": "pin_index",
                    "22": "pin_number",
                    "1": "pin",
                    "2": "pin_address"
                },
                "param_4": {
                    "1": "config_data",
                    "3": "data_buffer",
                    "2": "pin_mode_pointer"
                },
                "*(undefined *)(param_1 + 10)": {
                    "3": "pin_address",
                    "1": "pin_variable"
                },
                "FUN_08005848": {
                    "1": "configure_pin"
                },
                "param_2": {
                    "1": "param2"
                },
                "param_3": {
                    "1": "param3"
                }
            }
        },
        "FUN_080012c0": {
            "entrypoint": "0x080012c0",
            "current_name": "update_digital_pins_080012c0",
            "code": "\nvoid update_digital_pins_080012c0(int base_address,int data)\n\n{\n  uint bit_index;\n  \n  for (bit_index = 0; (int)bit_index < 4; bit_index = bit_index + 1) {\n    digitalWrite(*(undefined *)(base_address + bit_index + 0xb),data >> (bit_index & 0xff) & 1);\n  }\n  pulseEnable(base_address);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080012c0": "update_digital_pins_080012c0",
                "param_1": "base_address",
                "param_2": "data",
                "uVar1": "bit_index"
            },
            "calling": [
                "FUN_080013a4",
                "FUN_08001310"
            ],
            "called": [
                "FUN_080012a2",
                "FUN_08005848"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080012c0": {
                    "8": "update_digital_pins",
                    "5": "digital_write_multiple_bits",
                    "1": "update_gpio_status",
                    "3": "set_digital_pins"
                },
                "param_1": {
                    "1": "array_start",
                    "9": "base_address",
                    "4": "port_address",
                    "6": "pin_array",
                    "2": "pin_address"
                },
                "param_2": {
                    "14": "data",
                    "1": "input_data",
                    "2": "output_value",
                    "11": "value"
                },
                "uVar1": {
                    "1": "bit_position",
                    "5": "i",
                    "16": "bit_index",
                    "8": "index"
                }
            }
        },
        "FUN_080012e8": {
            "entrypoint": "0x080012e8",
            "current_name": "digital_write_loop_080012e8",
            "code": "\nvoid digital_write_loop_080012e8(int port_address,int data)\n\n{\n  uint bit_index;\n  \n  for (bit_index = 0; (int)bit_index < 8; bit_index = bit_index + 1) {\n    digitalWrite(*(undefined *)(port_address + bit_index + 0xb),data >> (bit_index & 0xff) & 1);\n  }\n  pulseEnable(port_address);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080012e8": "digital_write_loop_080012e8",
                "param_1": "port_address",
                "param_2": "data",
                "uVar1": "bit_index"
            },
            "calling": [
                "FUN_08001310"
            ],
            "called": [
                "FUN_080012a2",
                "FUN_08005848"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080012e8": {
                    "2": "write_to_gpio",
                    "1": "write_bits_to_pins",
                    "4": "write_bits",
                    "5": "digital_write_loop"
                },
                "param_1": {
                    "2": "pin_base",
                    "3": "pin_array",
                    "1": "pin_register",
                    "5": "port_address"
                },
                "param_2": {
                    "20": "data",
                    "1": "input_data",
                    "8": "value"
                },
                "uVar1": {
                    "1": "i",
                    "25": "bit_index",
                    "4": "index"
                }
            }
        },
        "FUN_08001310": {
            "entrypoint": "0x08001310",
            "current_name": "write_data_08001310",
            "code": "\nvoid write_data_08001310(int device,uint data,undefined4 pin1,undefined4 pin2)\n\n{\n  set_pin_state(*(undefined *)(device + 8),pin1,pin1,pin2,pin2);\n  if (*(character *)(device + 9) != -1) {\n    set_pin_state(*(character *)(device + 9),0);\n  }\n  if ((*(byte *)(device + 0x13) & 0x10) == 0) {\n    write_four_bits(device,data >> 4);\n    write_four_bits(device,data);\n    return;\n  }\n  write_eight_bits(device,data);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001310": "write_data_08001310",
                "param_1": "device",
                "param_2": "data",
                "param_3": "pin1",
                "param_4": "pin2",
                "write4bits": "write_four_bits",
                "write8bits": "write_eight_bits",
                "digitalWrite": "set_pin_state",
                "char": "character"
            },
            "calling": [
                "FUN_0800134e",
                "FUN_0800138e",
                "FUN_08001366",
                "FUN_08001550",
                "FUN_080013a4",
                "FUN_0800135a"
            ],
            "called": [
                "FUN_080012e8",
                "FUN_080012c0",
                "FUN_08005848"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08001310": {
                    "4": "initialize_display",
                    "1": "display_data",
                    "2": "init_lcd"
                },
                "param_1": {
                    "4": "display",
                    "2": "lcd_pin",
                    "5": "data_pin",
                    "1": "lcd_address"
                },
                "param_2": {
                    "26": "data",
                    "1": "pin",
                    "2": "data_value"
                },
                "param_3": {
                    "1": "command",
                    "2": "param_3",
                    "8": "pin1"
                },
                "param_4": {
                    "1": "state2",
                    "2": "param_4",
                    "8": "pin2"
                },
                "write4bits": {
                    "1": "write_data_bits",
                    "5": "write_four_bits",
                    "3": "write_4_bits"
                },
                "write8bits": {
                    "1": "write_bytes_to_lcd",
                    "2": "write_byte",
                    "3": "write_8_bits",
                    "5": "write_eight_bits"
                },
                "FUN_080012e8": {
                    "1": "write_high_bits",
                    "4": "digital_write"
                },
                "FUN_080012c0": {
                    "4": "write4bits",
                    "1": "digital_write_with_one_param",
                    "2": "write8bits"
                },
                "FUN_08005848": {
                    "1": "send_data",
                    "4": "digital_write"
                },
                "*param_4": {
                    "1": "pin_state"
                },
                "digitalWrite": {
                    "1": "set_pin"
                },
                "char": {
                    "1": "character"
                },
                "byte": {
                    "1": "byte"
                },
                "param_2 >> 4": {
                    "1": "upper_nibble"
                },
                "*(undefined *)(param_1 + 8)": {
                    "1": "device_pin1"
                },
                "*(char *)(param_1 + 9)": {
                    "1": "device_pin2"
                },
                "*(byte *)(param_1 + 0x13)": {
                    "1": "device_byte"
                },
                "0x10": {
                    "1": "bit_mask"
                },
                "param_1 + 8": {
                    "1": "lcd_data_pin"
                },
                "param_1 + 9": {
                    "1": "lcd_enable_pin"
                },
                "param_1 + 0x13": {
                    "1": "lcd_control_register"
                }
            }
        },
        "FUN_0800134e": {
            "entrypoint": "0x0800134e",
            "current_name": "send_data_0800134e",
            "code": "\nundefined4 send_data_0800134e(undefined4 socket,undefined4 buffer,undefined4 size,undefined4 flags)\n\n{\n  send(socket,buffer,1,flags,flags);\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_0800134e": "send_data_0800134e",
                "param_1": "socket",
                "param_2": "buffer",
                "param_3": "size",
                "param_4": "flags"
            },
            "calling": [
                "FUN_08000cd0"
            ],
            "called": [
                "FUN_08001310"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800134e": {
                    "4": "send_message",
                    "1": "send_data_and_return_success",
                    "22": "send_data",
                    "3": "send_and_return"
                },
                "param_1": {
                    "4": "socket_descriptor",
                    "5": "socket_fd",
                    "22": "socket"
                },
                "param_2": {
                    "9": "data",
                    "1": "data_length",
                    "5": "data_buffer",
                    "2": "message",
                    "13": "buffer"
                },
                "param_3": {
                    "1": "additional_param_1",
                    "6": "size",
                    "3": "length"
                },
                "param_4": {
                    "3": "length",
                    "2": "data_length",
                    "1": "message_length",
                    "6": "size",
                    "12": "flags"
                },
                "FUN_08001310": {
                    "1": "send_data",
                    "3": "handle_send",
                    "5": "process_data"
                }
            }
        },
        "FUN_0800135a": {
            "entrypoint": "0x0800135a",
            "current_name": "send_data_0800135a",
            "code": "\nvoid send_data_0800135a(undefined4 socket,undefined4 data_length,undefined4 param_3,undefined4 data)\n\n{\n  send_data_0800135a_to_socket(socket,1,0,data,data);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800135a": "send_data_0800135a",
                "param_1": "socket",
                "param_2": "data_length",
                "param_4": "data",
                "send": "send_data_to_socket"
            },
            "calling": [
                "FUN_08000bcc",
                "FUN_080013a4",
                "FUN_08000cd0"
            ],
            "called": [
                "FUN_08001310"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800135a": {
                    "1": "send_message",
                    "29": "send_data"
                },
                "param_1": {
                    "5": "socket_descriptor",
                    "1": "param_1",
                    "8": "socket_fd",
                    "16": "socket"
                },
                "param_2": {
                    "1": "data_1",
                    "2": "length",
                    "7": "data_length",
                    "4": "flags"
                },
                "param_3": {
                    "1": "param",
                    "4": "param_3"
                },
                "param_4": {
                    "1": "payload",
                    "12": "data",
                    "3": "param_4",
                    "4": "buffer"
                },
                "FUN_08001310": {
                    "4": "process_data",
                    "1": "handle_send"
                },
                "send": {
                    "1": "send_data_to_socket"
                }
            }
        },
        "FUN_08001366": {
            "entrypoint": "0x08001366",
            "current_name": "send_character_08001366",
            "code": "\nvoid send_character_08001366(int socket,char character,uint max_length,undefined4 param_4)\n\n{\n  char character;\n  \n  if (3 < max_length) {\n    max_length = 3;\n  }\n  if ((int)(uint)*(byte *)(socket + 0x17) <= (int)max_length) {\n    max_length = *(byte *)(socket + 0x17) - 1 & 0xff;\n  }\n  character = *(char *)(max_length + socket + 0x18);\n  send_data(socket,character + character | 0x80,0,character,param_4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001366": "send_character_08001366",
                "param_1": "socket",
                "param_2": "character",
                "param_3": "max_length",
                "cVar1": "character",
                "send": "send_data"
            },
            "calling": [
                "FUN_08000bcc",
                "FUN_08000cd0"
            ],
            "called": [
                "FUN_08001310"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08001366": {
                    "1": "send_encrypted_data",
                    "6": "send_modified_data",
                    "5": "send_data",
                    "2": "send_with_adjusted_param",
                    "8": "send_character"
                },
                "param_1": {
                    "1": "data_address",
                    "7": "socket",
                    "3": "data_ptr",
                    "5": "buffer_address"
                },
                "param_2": {
                    "1": "param2",
                    "4": "data",
                    "6": "character",
                    "2": "header_byte",
                    "3": "offset"
                },
                "param_3": {
                    "1": "max_character",
                    "5": "length",
                    "2": "limit",
                    "4": "data_length",
                    "3": "max_size"
                },
                "param_4": {
                    "1": "unknown_param",
                    "4": "param4",
                    "10": "param_4",
                    "5": "additional_param",
                    "2": "param"
                },
                "cVar1": {
                    "1": "offset",
                    "4": "char_value",
                    "7": "character",
                    "2": "selected_byte"
                },
                "send": {
                    "1": "send_function",
                    "4": "send_data"
                },
                "FUN_08001310": {
                    "3": "send",
                    "1": "calculate_checksum"
                }
            }
        },
        "FUN_0800138e": {
            "entrypoint": "0x0800138e",
            "current_name": "set_flag_and_send_data_0800138e",
            "code": "\nvoid set_flag_and_send_data_0800138e(int data_ptr,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  byte current_value;\n  \n  current_value = *(byte *)(data_ptr + 0x14);\n  *(byte *)(data_ptr + 0x14) = current_value | 4;\n  send_data(data_ptr,current_value | 0xc,0,param4,param4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800138e": "set_flag_and_send_data_0800138e",
                "param_1": "data_ptr",
                "param_2": "param2",
                "param_4": "param4",
                "bVar1": "current_value",
                "param_3": "param3",
                "send": "send_data"
            },
            "calling": [
                "FUN_080013a4"
            ],
            "called": [
                "FUN_08001310"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800138e": {
                    "1": "update_and_send_packet",
                    "8": "set_flag_and_send_data",
                    "7": "set_flag_and_send",
                    "6": "update_and_send_data"
                },
                "param_1": {
                    "3": "data_address",
                    "2": "data_buffer",
                    "1": "ptr_data",
                    "13": "data_ptr",
                    "7": "data_pointer"
                },
                "param_2": {
                    "1": "unused_param",
                    "7": "param2",
                    "2": "param1",
                    "3": "param_2"
                },
                "param_4": {
                    "1": "buffer",
                    "10": "param4",
                    "2": "param",
                    "7": "param_4"
                },
                "bVar1": {
                    "1": "original_value",
                    "2": "original_flag",
                    "3": "flag_value",
                    "4": "current_value"
                },
                "param_3": {
                    "2": "param2",
                    "6": "param3",
                    "1": "unknown2",
                    "3": "param_3"
                },
                "send": {
                    "4": "send_data"
                },
                "FUN_08001310": {
                    "1": "send_data"
                }
            }
        },
        "FUN_080013a4": {
            "entrypoint": "0x080013a4",
            "current_name": "initialize_display_080013a4",
            "code": "\nvoid initialize_display_080013a4(int display,int pin1,int pin2,int flag)\n\n{\n  int offset;\n  int index;\n  \n  if (1 < pin2) {\n    *(byte *)(display + 0x13) = *(byte *)(display + 0x13) | 8;\n  }\n  *(char *)(display + 0x17) = (char)pin2;\n  set_row_offsets(display,0,0x40,pin1,pin1 + 0x40);\n  if ((flag != 0) && (pin2 == 1)) {\n    *(byte *)(display + 0x13) = *(byte *)(display + 0x13) | 4;\n  }\n  set_pin_mode(*(undefined *)(display + 8),1);\n  if (*(char *)(display + 9) != -1) {\n    set_pin_mode(*(char *)(display + 9),1);\n  }\n  set_pin_mode(*(undefined *)(display + 10),1);\n  index = 0;\n  while( true ) {\n    if ((*(byte *)(display + 0x13) & 0x10) == 0) {\n      offset = 4;\n    }\n    else {\n      offset = 8;\n    }\n    if (offset <= index) break;\n    set_pin_mode(*(undefined *)(display + index + 0xb),1);\n    index = index + 1;\n  }\n  write_digital(*(undefined *)(display + 8),0);\n  write_digital(*(undefined *)(display + 10),0);\n  if (*(char *)(display + 9) != -1) {\n    write_digital(*(char *)(display + 9),0);\n  }\n  if ((*(byte *)(display + 0x13) & 0x10) == 0) {\n    send_four_bits_to_lcd(param_1,3);\n    send_four_bits_to_lcd(param_1,3);\n    send_four_bits_to_lcd(param_1,3);\n    send_four_bits_to_lcd(param_1,2);\n  }\n  else {\n    send_data(display,*(byte *)(display + 0x13) | 0x20,0);\n    send_data(display,*(byte *)(display + 0x13) | 0x20,0);\n    send_data(display,*(byte *)(display + 0x13) | 0x20,0);\n  }\n  send_data(display,*(byte *)(display + 0x13) | 0x20,0);\n  *(undefined *)(display + 0x14) = 4;\n  show_display(param_1);\n  clear_display(param_1);\n  *(undefined *)(display + 0x15) = 2;\n  send_data(display,6,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080013a4": "initialize_display_080013a4",
                "param_1": "display",
                "param_2": "pin1",
                "param_3": "pin2",
                "param_4": "flag",
                "iVar1": "offset",
                "iVar2": "index",
                "setRowOffsets": "set_row_offsets",
                "pinMode": "set_pin_mode",
                "digitalWrite": "write_digital",
                "send": "send_data",
                "display": "display_data",
                "clear": "clear_display",
                "write4bits(param_1,3)": "send_four_bits_to_lcd(param_1,3)",
                "write4bits(param_1,2)": "send_four_bits_to_lcd(param_1,2)",
                "display(param_1)": "show_display(param_1)",
                "clear(param_1)": "clear_display(param_1)"
            },
            "calling": [
                "FUN_08000bcc",
                "FUN_080014ba"
            ],
            "called": [
                "FUN_0800138e",
                "FUN_0800135a",
                "FUN_080012c0",
                "FUN_08001294",
                "FUN_08005848",
                "FUN_08001310",
                "FUN_080057b4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080013a4": {
                    "18": "initialize_display",
                    "13": "initialize_lcd"
                },
                "param_1": {
                    "1": "lcd_pin_config",
                    "3": "lcd",
                    "5": "display_address",
                    "2": "display_object",
                    "7": "display",
                    "4": "lcd_address"
                },
                "param_2": {
                    "1": "pin_data",
                    "2": "pin_rs",
                    "3": "rs",
                    "9": "pin1"
                },
                "param_3": {
                    "2": "enable",
                    "3": "num_lines",
                    "1": "pin_rs",
                    "7": "pin2"
                },
                "param_4": {
                    "3": "mode",
                    "1": "data_pins",
                    "2": "backlight_state"
                },
                "iVar1": {
                    "1": "bit",
                    "3": "pin_mode_value",
                    "7": "offset",
                    "2": "index"
                },
                "iVar2": {
                    "1": "digital_write_loop_counter",
                    "2": "i",
                    "3": "offset_index",
                    "5": "counter",
                    "11": "index"
                },
                "setRowOffsets": {
                    "7": "set_row_offsets"
                },
                "pinMode": {
                    "1": "pin_mode",
                    "6": "set_pin_mode"
                },
                "digitalWrite": {
                    "1": "set_digital_write",
                    "3": "write_digital"
                },
                "write4bits": {
                    "1": "write_data_bits",
                    "3": "write4bits",
                    "2": "write_four_bits"
                },
                "send": {
                    "1": "send_to_lcd",
                    "5": "send_data"
                },
                "display": {
                    "4": "display_data",
                    "1": "display_lcd",
                    "3": "display"
                },
                "clear": {
                    "6": "clear_display",
                    "1": "clear_lcd"
                },
                "FUN_0800138e": {
                    "4": "set_row_offsets"
                },
                "FUN_0800135a": {
                    "1": "display"
                },
                "FUN_080012c0": {
                    "3": "pin_mode",
                    "1": "digital_write"
                },
                "FUN_08001294": {
                    "1": "digital_write_wrapper",
                    "2": "digital_write"
                },
                "FUN_08005848": {
                    "1": "send_command",
                    "2": "send"
                },
                "FUN_08001310": {
                    "2": "display"
                },
                "FUN_080057b4": {
                    "2": "clear",
                    "1": "display"
                },
                "writeChar": {
                    "1": "write_character"
                },
                "initializeDisplay": {
                    "1": "initialize_display"
                },
                "pinModeWrapper": {
                    "1": "pin_mode_wrapper"
                },
                "digitalWriteWrapper": {
                    "1": "digital_write_wrapper"
                },
                "param_1 + 0x13": {
                    "1": "lcd_flags"
                },
                "param_1 + 0x17": {
                    "1": "num_rows"
                },
                "param_2 + 0x40": {
                    "1": "rs_pin_offset"
                },
                "write4bits(param_1,3)": {
                    "1": "send_four_bits_to_lcd(param_1,3)"
                },
                "write4bits(param_1,2)": {
                    "1": "send_four_bits_to_lcd(param_1,2)"
                },
                "param_1 + 0x14": {
                    "1": "display_mode"
                },
                "param_1 + 0x15": {
                    "1": "entry_mode"
                },
                "display(param_1)": {
                    "1": "show_display(param_1)"
                },
                "clear(param_1)": {
                    "1": "clear_display(param_1)"
                },
                "param_5": {
                    "1": "param4"
                }
            }
        },
        "FUN_080014ba": {
            "entrypoint": "0x080014ba",
            "current_name": "initialize_parameters_080014ba",
            "code": "\nvoid initialize_parameters_080014ba(int display,int flag,undefined param_3,undefined4 pin1,undefined param_5,\n                 undefined param_6,undefined param_7,undefined param_8,undefined param_9,\n                 undefined display0,undefined display1,undefined display2,undefined display3)\n\n{\n  *(undefined *)(display + 8) = param_3;\n  *(char *)(display + 9) = (char)pin1;\n  *(undefined *)(display + 10) = param_5;\n  *(undefined *)(display + 0xb) = param_6;\n  *(undefined *)(display + 0xc) = param_7;\n  *(undefined *)(display + 0xd) = param_8;\n  *(undefined *)(display + 0xe) = param_9;\n  *(undefined *)(display + 0xf) = display0;\n  *(undefined *)(display + 0x10) = display1;\n  *(undefined *)(display + 0x11) = display2;\n  *(undefined *)(display + 0x12) = display3;\n  if (flag == 0) {\n    *(undefined *)(display + 0x13) = 0x10;\n  }\n  else {\n    *(undefined *)(display + 0x13) = 0;\n  }\n  initialize_display(display,0x10,1,0,pin1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080014ba": "initialize_parameters_080014ba",
                "param_1": "display",
                "param_2": "flag",
                "param_4": "pin1",
                "initialize_display_080013a4": "initialize_display"
            },
            "calling": [
                "FUN_08001510"
            ],
            "called": [
                "FUN_080013a4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080014ba": {
                    "2": "initialize_display_params",
                    "1": "set_display_params",
                    "6": "initialize_display"
                },
                "param_1": {
                    "1": "display_addr",
                    "29": "display"
                },
                "param_2": {
                    "22": "flag",
                    "8": "pin1",
                    "1": "pin_flag"
                },
                "param_3": {
                    "4": "param3",
                    "1": "pin1",
                    "2": "value_1",
                    "5": "value1",
                    "13": "param_3"
                },
                "param_4": {
                    "1": "flag2",
                    "2": "param_4",
                    "7": "pin2",
                    "11": "pin1",
                    "5": "value2"
                },
                "param_5": {
                    "2": "param_4",
                    "1": "value_3",
                    "5": "value3",
                    "12": "param_5"
                },
                "param_6": {
                    "1": "param_4_value",
                    "3": "param5",
                    "5": "value4",
                    "10": "param_6",
                    "2": "param_5"
                },
                "param_7": {
                    "1": "param7",
                    "5": "value5",
                    "3": "param6",
                    "2": "param_6",
                    "13": "param_7"
                },
                "param_8": {
                    "13": "param_8",
                    "1": "param8",
                    "5": "value6",
                    "2": "param_7",
                    "3": "param7"
                },
                "param_9": {
                    "2": "param_8",
                    "1": "value_7",
                    "13": "param_9",
                    "5": "value7",
                    "3": "param8"
                },
                "param_10": {
                    "1": "param_8_value",
                    "13": "param_10",
                    "5": "value8",
                    "3": "param9",
                    "2": "param_9"
                },
                "param_11": {
                    "3": "param10",
                    "1": "param9_value",
                    "2": "param_10",
                    "13": "param_11",
                    "5": "value9"
                },
                "param_12": {
                    "1": "config9",
                    "5": "value10",
                    "2": "param_11",
                    "3": "param11",
                    "13": "param_12"
                },
                "param_13": {
                    "1": "param11_value",
                    "3": "param12",
                    "5": "value11",
                    "13": "param_13",
                    "2": "param_12"
                },
                "initialize_display_080013a4": {
                    "13": "initialize_display",
                    "2": "init_display"
                },
                "pin1": {
                    "1": "pin",
                    "5": "pin1"
                },
                "pin2": {
                    "1": "display_pin2",
                    "5": "pin2"
                },
                "display": {
                    "2": "display"
                },
                "flag": {
                    "2": "flag"
                }
            }
        },
        "FUN_08001510": {
            "entrypoint": "0x08001510",
            "current_name": "initialize_send_data_08001510",
            "code": "\nundefined4 *\ninitialize_send_data_08001510(undefined4 *send_data,undefined4 display,undefined4 flag,undefined4 pin1,\n            undefined param_5,undefined param_6,undefined param_7)\n\n{\n  send_data[1] = 0;\n  *send_data = &PTR_send_data_0800134e_1_080073f8;\n  initialize_parameters(send_data,1,display,0xff,flag,pin1,param_5,param_6,param_7,0,0,0,0);\n  return send_data;\n}\n\n",
            "renaming": {
                "FUN_08001510": "initialize_send_data_08001510",
                "param_1": "send_data",
                "param_2": "display",
                "param_3": "flag",
                "param_4": "pin1",
                "initialize_parameters_080014ba": "initialize_parameters"
            },
            "calling": [
                "FUN_08000b08"
            ],
            "called": [
                "FUN_080014ba"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08001510": {
                    "1": "initialize_send_data_function",
                    "14": "initialize_send_data",
                    "6": "initialize_and_send_data",
                    "2": "initialize_data_sender"
                },
                "param_1": {
                    "3": "send_data_array",
                    "2": "output_buffer",
                    "1": "send_data_array_ptr",
                    "6": "send_data",
                    "4": "send_data_ptr"
                },
                "param_2": {
                    "3": "display_flag",
                    "1": "display_value",
                    "24": "display"
                },
                "param_3": {
                    "24": "flag",
                    "1": "flag_value",
                    "3": "param_3"
                },
                "param_4": {
                    "1": "pin1_variable",
                    "26": "pin1"
                },
                "param_5": {
                    "1": "input_value_4",
                    "8": "param_3",
                    "20": "param_5"
                },
                "param_6": {
                    "1": "input_value_5",
                    "8": "param_5",
                    "21": "param_6"
                },
                "param_7": {
                    "22": "param_7",
                    "1": "input_value_6",
                    "7": "param_6"
                },
                "PTR_send_data_0800134e_1_080073f8": {
                    "1": "send_data_ptr"
                },
                "initialize_parameters_080014ba": {
                    "1": "initialize_params",
                    "3": "initialize_parameters"
                }
            }
        },
        "FUN_08001550": {
            "entrypoint": "0x08001550",
            "current_name": "send_data_08001550",
            "code": "\nvoid send_data_08001550(undefined4 *data_ptr,uint data_length,int data_address)\n\n{\n  int index;\n  \n  send(data_ptr,(data_length & 7) << 3 | 0x40,0);\n  for (index = 0; index < 8; index = index + 1) {\n    (**(code **)*data_ptr)(data_ptr,*(undefined *)(data_address + index));\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001550": "send_data_08001550",
                "param_1": "data_ptr",
                "param_2": "data_length",
                "param_3": "data_address",
                "iVar1": "index"
            },
            "calling": [
                "FUN_08000bcc"
            ],
            "called": [
                "FUN_08001310"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08001550": {
                    "23": "send_data",
                    "1": "send_data_to_remote",
                    "3": "send_and_process_data",
                    "2": "send_data_to_device"
                },
                "param_1": {
                    "1": "remote_connection",
                    "2": "socket",
                    "3": "data_buffer",
                    "13": "data_ptr",
                    "5": "buffer"
                },
                "param_2": {
                    "1": "byte_count",
                    "5": "data_size",
                    "13": "data_length",
                    "3": "flags",
                    "4": "length"
                },
                "param_3": {
                    "1": "input_data_ptr",
                    "2": "source_address",
                    "5": "data_address",
                    "3": "data_ptr"
                },
                "iVar1": {
                    "1": "iteration_count",
                    "14": "index",
                    "8": "i"
                }
            }
        },
        "FUN_0800157c": {
            "entrypoint": "0x0800157c",
            "current_name": "initialize_gpio_0800157c",
            "code": "\nundefined * initialize_gpio_0800157c(undefined *gpio_pins,undefined4 pin1,undefined pin2,undefined pin3)\n\n{\n  *gpio_pins = (char)pin1;\n  pin_mode1_pin = pin2;\n  pin_mode2_pin = pin3;\n  set_pin_mode(pin1,0);\n  set_pin_mode(pin_mode1_pin,1);\n  set_pin_mode(pin_mode2_pin,1);\n  write_digital(pin_mode1_pin,1);\n  write_digital(pin_mode2_pin,0);\n  return gpio_pins;\n}\n\n",
            "renaming": {
                "FUN_0800157c": "initialize_gpio_0800157c",
                "param_1": "gpio_pins",
                "param_2": "pin1",
                "param_3": "pin2",
                "param_4": "pin3",
                "pinMode": "set_pin_mode",
                "digitalWrite": "write_digital",
                "pin": "pin_number",
                "param_1[1]": "pin_mode1_pin",
                "param_1[2]": "pin_mode2_pin"
            },
            "calling": [
                "FUN_08000b08"
            ],
            "called": [
                "FUN_08005848",
                "FUN_080057b4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800157c": {
                    "1": "initialize_ports",
                    "3": "initialize_device",
                    "2": "configure_io",
                    "7": "initialize_io",
                    "11": "initialize_gpio"
                },
                "param_1": {
                    "2": "output_pins",
                    "3": "device_config",
                    "1": "buffer",
                    "6": "gpio_pins",
                    "4": "pin_array"
                },
                "param_2": {
                    "7": "pin_number",
                    "1": "conf_1",
                    "2": "pin",
                    "13": "pin1"
                },
                "param_3": {
                    "3": "input_pin1",
                    "4": "mode1",
                    "1": "input_pin_mode",
                    "2": "pin2_mode",
                    "7": "pin2"
                },
                "param_4": {
                    "1": "pin_3_mode",
                    "2": "pin3_state",
                    "3": "input_pin2",
                    "6": "pin3",
                    "4": "mode2"
                },
                "pinMode": {
                    "1": "configure_pin_mode",
                    "10": "set_pin_mode"
                },
                "digitalWrite": {
                    "2": "write_digital_value",
                    "5": "write_digital"
                },
                "FUN_08005848": {
                    "1": "configure_pin_as_output"
                },
                "FUN_080057b4": {
                    "1": "write_digital_high"
                },
                "pin_1": {
                    "1": "io_pins[0]"
                },
                "pin_2": {
                    "1": "io_pins[1]"
                },
                "pin_3": {
                    "1": "io_pins[2]"
                },
                "pConfig": {
                    "1": "config_array"
                },
                "pin": {
                    "1": "pin_number"
                },
                "mode1": {
                    "1": "input_mode"
                },
                "mode2": {
                    "1": "output_mode"
                },
                "outputValues": {
                    "1": "output_values"
                },
                "param_1[1]": {
                    "1": "pin_mode1_pin"
                },
                "param_1[2]": {
                    "1": "pin_mode2_pin"
                }
            }
        },
        "FUN_080015b2": {
            "entrypoint": "0x080015b2",
            "current_name": "reverse_bits_080015b2",
            "code": "\nuint reverse_bits_080015b2(undefined *pins)\n\n{\n  int bit_value;\n  uint bit_index;\n  uint decoded_value;\n  \n  set_pin_state(pin1,0);\n  decoded_value = 0;\n  for (bit_index = 0x1f; -1 < (int)bit_index; bit_index = bit_index - 1) {\n    set_pin_state(pin2,1);\n    bit_value = digitalRead(*pins);\n    if (bit_value != 0) {\n      decoded_value = decoded_value | 1 << (bit_index & 0xff);\n    }\n    set_pin_state(pin2,0);\n  }\n  set_pin_state(pin1,1);\n  return decoded_value;\n}\n\n",
            "renaming": {
                "FUN_080015b2": "reverse_bits_080015b2",
                "param_1": "pins",
                "iVar1": "bit_value",
                "uVar2": "bit_index",
                "uVar3": "decoded_value",
                "digitalWrite": "set_pin_state",
                "param_1[1]": "pin1",
                "param_1[2]": "pin2"
            },
            "calling": [
                "FUN_080015f8"
            ],
            "called": [
                "FUN_08005890",
                "FUN_08005848"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080015b2": {
                    "1": "bit_read",
                    "2": "read_bits_from_port",
                    "12": "reverse_bits",
                    "3": "decode_bits"
                },
                "param_1": {
                    "2": "port_pins",
                    "1": "bits_to_reverse",
                    "3": "input"
                },
                "iVar1": {
                    "1": "input_bit",
                    "2": "read_result",
                    "6": "read_value",
                    "4": "pin_value",
                    "13": "bit_value"
                },
                "uVar2": {
                    "1": "bits_remaining",
                    "9": "bit_position",
                    "19": "bit_index"
                },
                "uVar3": {
                    "1": "parsed_data",
                    "7": "decoded_value",
                    "5": "reversed_value",
                    "6": "result"
                },
                "*param_1": {
                    "1": "port_data"
                },
                "digitalWrite": {
                    "1": "set_output"
                },
                "param_1[1]": {
                    "2": "pin1"
                },
                "param_1[2]": {
                    "2": "pin2"
                },
                "digitalRead(*param_1)": {
                    "1": "read_input"
                },
                "FUN_08005890": {
                    "1": "convert_byte_to_char"
                },
                "FUN_08005848": {
                    "1": "read_bit_value"
                },
                "param_2": {
                    "1": "output_value_1"
                },
                "param_3": {
                    "1": "output_value_0"
                },
                "param_4": {
                    "1": "pin_array"
                }
            }
        },
        "FUN_080015f8": {
            "entrypoint": "0x080015f8",
            "current_name": "calculate_result_080015f8",
            "code": "\nundefined8 calculate_result_080015f8(undefined4 input1,int input2,undefined4 param3,undefined4 param4)\n\n{\n  uint data;\n  undefined8 result;\n  \n  data = readData();\n  if ((data & 0x10000) == 0) {\n    data = data >> 0x12;\n    result = __floatunsidf(data & 0x1fff);\n    if ((data & 0x2000) != 0) {\n      result = __floatunsidf(~data & 0x1fff);\n      result = __aeabi_dadd((int)result,(int)((ulonglong)result >> 0x20),0,0x3ff00000,param4);\n      result = CONCAT44((int)((ulonglong)result >> 0x20) + -0x80000000,(int)result);\n    }\n    result = __muldf3((int)result,(int)((ulonglong)result >> 0x20),0,0x3fd00000);\n    if (input2 == 1) {\n      result = __muldf3((int)result,(int)((ulonglong)result >> 0x20),0,0x40220000);\n      result = __divdf3((int)result,(int)((ulonglong)result >> 0x20),0,0x40140000);\n      result = __aeabi_dadd((int)result,(int)((ulonglong)result >> 0x20),0,0x40400000);\n      return result;\n    }\n  }\n  else {\n    data = data & 7;\n    if (data == 2) {\n      return 0x40c3888000000000;\n    }\n    if (data == 4) {\n      return 0x40c3890000000000;\n    }\n    if (data != 1) {\n      return 0;\n    }\n    result = 0x40c3880000000000;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080015f8": "calculate_result_080015f8",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "data",
                "uVar2": "result"
            },
            "calling": [
                "FUN_08000cd0"
            ],
            "called": [
                "FUN_080004f8",
                "FUN_08000194",
                "FUN_080015b2",
                "FUN_0800074c",
                "FUN_0800040c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080015f8": {
                    "5": "calculate_value",
                    "3": "process_data",
                    "1": "calculate_float_value",
                    "20": "calculate_result"
                },
                "param_1": {
                    "2": "input_param1",
                    "4": "param1",
                    "1": "input_data",
                    "3": "arg1",
                    "6": "input1"
                },
                "param_2": {
                    "5": "flag",
                    "4": "param2",
                    "1": "toggle",
                    "6": "input2",
                    "2": "mode",
                    "3": "arg2"
                },
                "param_3": {
                    "1": "param_3",
                    "2": "param1",
                    "11": "param3",
                    "3": "arg3",
                    "6": "input3"
                },
                "param_4": {
                    "2": "unused2",
                    "11": "param4",
                    "1": "unused_flag2",
                    "3": "arg4",
                    "6": "input4"
                },
                "uVar1": {
                    "27": "data",
                    "2": "data_value"
                },
                "uVar2": {
                    "31": "result"
                }
            }
        },
        "FUN_080016b4": {
            "entrypoint": "0x080016b4",
            "current_name": "calculate_result_080016b4",
            "code": "\nchar calculate_result_080016b4(int input)\n\n{\n  char result;\n  int current_time;\n  int comparison_result;\n  undefined4 temp1;\n  undefined4 temp2;\n  undefined4 temp3;\n  undefined4 temp4;\n  undefined4 temp5;\n  undefined4 temp6;\n  undefined4 temp7;\n  char flag;\n  undefined4 temp8;\n  undefined4 temp9;\n  undefined4 temp10;\n  undefined8 temp11;\n  undefined8 temp12;\n  undefined8 temp13;\n  undefined8 temp14;\n  undefined4 temp15;\n  undefined4 temp16;\n  \n  flag = *(char *)(input + 0x70);\n  if (flag != '\\0') {\n    current_time = millis();\n    if ((uint)(current_time - *(int *)(input + 0x44)) < *(uint *)(input + 0x58)) {\n      flag = '\\0';\n    }\n    else {\n      temp2 = **(undefined4 **)(input + 0x38);\n      temp5 = (*(undefined4 **)(input + 0x38))[1];\n      temp11 = __subdf3(**(undefined4 **)(input + 0x40),(*(undefined4 **)(input + 0x40))[1]);\n      temp10 = (undefined4)((ulonglong)temp11 >> 0x20);\n      temp12 = __subdf3(temp2,temp5,*(undefined4 *)(input + 0x50),*(undefined4 *)(input + 0x54))\n      ;\n      temp1 = (undefined4)((ulonglong)temp12 >> 0x20);\n      temp13 = __muldf3((int)temp11,temp10,*(undefined4 *)(input + 0x20),\n                        *(undefined4 *)(input + 0x24));\n      temp13 = __aeabi_dadd((int)temp13,(int)((ulonglong)temp13 >> 0x20),\n                            *(undefined4 *)(input + 0x48),*(undefined4 *)(input + 0x4c));\n      *(undefined8 *)(input + 0x48) = temp13;\n      result = *(char *)(input + 0x71);\n      if (result == '\\0') {\n        temp14 = __muldf3((int)temp12,temp1,*(undefined4 *)(input + 0x18),\n                          *(undefined4 *)(input + 0x1c));\n        temp13 = __subdf3((int)temp13,(int)((ulonglong)temp13 >> 0x20),(int)temp14,\n                          (int)((ulonglong)temp14 >> 0x20));\n        *(undefined8 *)(input + 0x48) = temp13;\n      }\n      temp3 = *(undefined4 *)(input + 0x48);\n      temp6 = *(undefined4 *)(input + 0x4c);\n      temp8 = *(undefined4 *)(undefined8 *)(input + 0x68);\n      temp9 = *(undefined4 *)(input + 0x6c);\n      temp13 = *(undefined8 *)(input + 0x68);\n      comparison_result = __aeabi_dcmpgt(temp3,temp6,temp8,temp9);\n      if (comparison_result == 0) {\n        temp4 = *(undefined4 *)(input + 0x60);\n        temp7 = *(undefined4 *)(input + 100);\n        comparison_result = __aeabi_dcmplt(temp3,temp6);\n        if (comparison_result != 0) {\n          *(undefined4 *)(input + 0x48) = temp4;\n          *(undefined4 *)(input + 0x4c) = temp7;\n        }\n      }\n      else {\n        *(undefined4 *)(input + 0x48) = temp8;\n        *(undefined4 *)(input + 0x4c) = temp9;\n      }\n      if (result == '\\0') {\n        temp11 = 0;\n      }\n      else {\n        temp11 = __muldf3((int)temp11,temp10,*(undefined4 *)(input + 0x18),\n                          *(undefined4 *)(input + 0x1c));\n      }\n      temp16 = (undefined4)((ulonglong)temp11 >> 0x20);\n      temp15 = (undefined4)temp11;\n      temp10 = *(undefined4 *)(input + 0x48);\n      temp3 = *(undefined4 *)(input + 0x4c);\n      temp11 = __muldf3((int)temp12,temp1,*(undefined4 *)(input + 0x28),\n                        *(undefined4 *)(input + 0x2c));\n      temp11 = __subdf3(temp10,temp3,(int)temp11,(int)((ulonglong)temp11 >> 0x20));\n      temp11 = __aeabi_dadd(temp15,temp16,(int)temp11,(int)((ulonglong)temp11 >> 0x20));\n      temp10 = (undefined4)((ulonglong)temp11 >> 0x20);\n      comparison_result = __aeabi_dcmplt(temp8,temp9,(int)temp11,temp10);\n      if (comparison_result == 0) {\n        temp13 = *(undefined8 *)(input + 0x60);\n        comparison_result = __aeabi_dcmplt((int)temp11,temp10,*(undefined4 *)(undefined8 *)(input + 0x60),\n                               *(undefined4 *)(input + 100));\n        if (comparison_result == 0) {\n          temp13 = temp11;\n        }\n      }\n      **(undefined8 **)(input + 0x3c) = temp13;\n      *(undefined4 *)(input + 0x50) = temp2;\n      *(undefined4 *)(input + 0x54) = temp5;\n      *(int *)(input + 0x44) = current_time;\n    }\n  }\n  return flag;\n}\n\n",
            "renaming": {
                "FUN_080016b4": "calculate_result_080016b4",
                "param_1": "input",
                "cVar1": "result",
                "iVar2": "current_time",
                "iVar3": "comparison_result",
                "uVar4": "temp1",
                "uVar5": "temp2",
                "uVar6": "temp3",
                "uVar7": "temp4",
                "uVar8": "temp5",
                "uVar9": "temp6",
                "uVar10": "temp7",
                "uVar12": "temp8",
                "uVar13": "temp9",
                "uVar14": "temp10",
                "uVar15": "temp11",
                "uVar16": "temp12",
                "uVar17": "temp13",
                "uVar18": "temp14",
                "local_38": "temp15",
                "uStack_34": "temp16",
                "cVar11": "flag"
            },
            "calling": [
                "FUN_08000cd0"
            ],
            "called": [
                "FUN_080009dc",
                "FUN_080004f8",
                "FUN_08000194",
                "FUN_08000190",
                "FUN_080058e0",
                "FUN_08000a18"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080016b4": {
                    "3": "calculate_new_value",
                    "1": "calculate_something",
                    "4": "calculate_and_update_values",
                    "2": "calculate_and_update_value",
                    "5": "calculate_result"
                },
                "param_1": {
                    "11": "input",
                    "6": "data",
                    "1": "object",
                    "10": "input_value"
                },
                "cVar1": {
                    "1": "updated_value",
                    "27": "result"
                },
                "iVar2": {
                    "21": "current_time",
                    "10": "current_millis"
                },
                "iVar3": {
                    "2": "comparison",
                    "29": "comparison_result"
                },
                "uVar4": {
                    "1": "high_bits1",
                    "17": "temp1",
                    "4": "temp_var4",
                    "5": "temp_var1"
                },
                "uVar5": {
                    "4": "temp_var5",
                    "1": "temporary_variable5",
                    "5": "temp_var2",
                    "3": "value1",
                    "15": "temp2"
                },
                "uVar6": {
                    "5": "temp_var3",
                    "1": "temp_result3",
                    "4": "temp_var6",
                    "15": "temp3",
                    "2": "value2"
                },
                "uVar7": {
                    "1": "temporary_variable7",
                    "4": "temp_var7",
                    "5": "temp_var4",
                    "15": "temp4",
                    "2": "temp2"
                },
                "uVar8": {
                    "1": "value2",
                    "15": "temp5",
                    "5": "temp_var5",
                    "4": "temp_var8"
                },
                "uVar9": {
                    "14": "temp6",
                    "1": "temp_variable9",
                    "4": "temp_var9",
                    "5": "temp_var6"
                },
                "uVar10": {
                    "1": "temp_variable10",
                    "14": "temp7",
                    "5": "temp_var7",
                    "2": "temp3",
                    "4": "temp_var10"
                },
                "uVar11": {
                    "1": "temp_var8",
                    "2": "temp_var11",
                    "3": "temp8"
                },
                "uVar12": {
                    "4": "temp_var12",
                    "1": "temp4",
                    "2": "value1",
                    "6": "temp8",
                    "3": "temp9"
                },
                "uVar13": {
                    "1": "temporary_variable13",
                    "2": "value2",
                    "4": "temp_var13",
                    "3": "temp10",
                    "6": "temp9"
                },
                "uVar14": {
                    "1": "high_bits",
                    "2": "temp_var8",
                    "3": "value3",
                    "4": "temp_var14",
                    "6": "temp10"
                },
                "uVar15": {
                    "1": "temp_var12",
                    "6": "temp11",
                    "2": "mul_result1",
                    "3": "calculation1",
                    "4": "temp_var15"
                },
                "uVar16": {
                    "1": "result2",
                    "6": "temp12",
                    "3": "temp13",
                    "4": "temp_var16"
                },
                "uVar17": {
                    "1": "temporary_variable17",
                    "2": "final_result",
                    "5": "temp13",
                    "4": "temp_var17",
                    "3": "temp14"
                },
                "uVar18": {
                    "1": "temporary_value",
                    "2": "temp8",
                    "3": "temp15",
                    "4": "temp_var18",
                    "5": "temp14"
                },
                "local_38": {
                    "2": "temp_value1",
                    "1": "temp_variable38",
                    "5": "temp15",
                    "3": "local_var1"
                },
                "uStack_34": {
                    "3": "local_variable2",
                    "1": "sub_result2",
                    "5": "temp16",
                    "2": "temp9"
                },
                "cVar11": {
                    "9": "flag",
                    "1": "result",
                    "2": "status"
                },
                "*(char *)(param_1 + 0x70)": {
                    "1": "c_var11"
                },
                "*(int *)(param_1 + 0x44)": {
                    "1": "previous_time"
                },
                "*(uint *)(param_1 + 0x58)": {
                    "1": "threshold"
                },
                "**(undefined4 **)(param_1 + 0x38)": {
                    "1": "ptr1"
                },
                "(**(undefined4 **)(param_1 + 0x38))[1]": {
                    "1": "ptr2"
                },
                "**(undefined4 **)(param_1 + 0x40)": {
                    "1": "ptr3"
                },
                "(*(undefined4 **)(param_1 + 0x40))[1]": {
                    "1": "ptr4"
                },
                "**(undefined4 **)(param_1 + 0x3c)": {
                    "1": "ptr5"
                },
                "*(undefined4 *)(param_1 + 0x50)": {
                    "1": "ptr6"
                },
                "*(undefined4 *)(param_1 + 0x54)": {
                    "1": "ptr7"
                },
                "*(undefined8 *)(param_1 + 0x68)": {
                    "1": "ptr8"
                },
                "*(undefined4 *)(param_1 + 0x6c)": {
                    "1": "ptr9"
                },
                "*(undefined4 *)(param_1 + 0x48)": {
                    "1": "ptr10"
                },
                "*(undefined4 *)(param_1 + 0x4c)": {
                    "1": "ptr11"
                },
                "*(undefined4 *)(undefined8 *)(param_1 + 0x60)": {
                    "1": "ptr12"
                },
                "*(undefined4 *)(param_1 + 100)": {
                    "1": "ptr13"
                },
                "*(undefined4 *)(param_1 + 0x28)": {
                    "1": "ptr14"
                },
                "*(undefined4 *)(param_1 + 0x2c)": {
                    "1": "ptr15"
                },
                "*(int *)(param_1 + 0x20)": {
                    "1": "ptr16"
                },
                "*(int *)(param_1 + 0x24)": {
                    "1": "ptr17"
                },
                "*(undefined4 *)(param_1 + 0x18)": {
                    "1": "ptr18"
                },
                "*(undefined4 *)(param_1 + 0x1c)": {
                    "1": "ptr19"
                }
            }
        },
        "FUN_08001814": {
            "entrypoint": "0x08001814",
            "current_name": "process_data_08001814",
            "code": "\nvoid process_data_08001814(undefined4 *output_array,undefined4 input1,undefined4 input2,undefined4 input3,\n                 undefined4 input4,undefined4 input5,undefined4 input6,undefined4 input7,\n                 int flag)\n\n{\n  int comparison_result;\n  undefined4 result;\n  undefined flag_value;\n  bool is_not_equal;\n  undefined8 float_value;\n  undefined8 mul_result;\n  undefined8 sub_result;\n  \n  comparison_result = check_if_less_than(input2,input3,0,0);\n  if (((comparison_result == 0) && (comparison_result = check_if_less_than(input4,input5,0,0), comparison_result == 0)) &&\n     (comparison_result = check_if_less_than(input6,input7,0,0), comparison_result == 0)) {\n    output_array[0xd] = flag;\n    is_not_equal = flag != 1;\n    if (is_not_equal) {\n      flag = 0;\n    }\n    flag_value = (undefined)flag;\n    if (!is_not_equal) {\n      flag_value = 1;\n    }\n    *(undefined *)((int)output_array + 0x71) = flag_value;\n    *output_array = input2;\n    output_array[1] = input3;\n    output_array[2] = input4;\n    output_array[3] = input5;\n    output_array[4] = input6;\n    output_array[5] = input7;\n    float_value = convert_to_unsigned_float(output_array[0x16]);\n    float_value = divide_floats((int)float_value,(int)((ulonglong)float_value >> 0x20),0,0x408f4000);\n    result = (undefined4)((ulonglong)float_value >> 0x20);\n    output_array[6] = input2;\n    output_array[7] = input3;\n    mul_result = multiply_floats(input4,input5,(int)float_value,result);\n    *(undefined8 *)(output_array + 8) = mul_result;\n    float_value = divide_floats(input6,input7,(int)float_value,result);\n    *(undefined8 *)(output_array + 10) = float_value;\n    if (output_array[0xc] == 1) {\n      sub_result = subtract_floats(0,0,input2,input3);\n      *(undefined8 *)(output_array + 6) = sub_result;\n      mul_result = subtract_floats(0,0,(int)mul_result,(int)((ulonglong)mul_result >> 0x20));\n      *(undefined8 *)(output_array + 8) = mul_result;\n      float_value = subtract_floats(0,0,(int)float_value,(int)((ulonglong)float_value >> 0x20));\n      *(undefined8 *)(output_array + 10) = float_value;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001814": "process_data_08001814",
                "param_1": "output_array",
                "param_2": "input1",
                "param_3": "input2",
                "param_4": "input3",
                "param_5": "input4",
                "param_6": "input5",
                "param_7": "input6",
                "param_8": "input7",
                "param_9": "flag",
                "iVar1": "comparison_result",
                "uVar2": "result",
                "uVar3": "flag_value",
                "bVar4": "is_not_equal",
                "uVar5": "float_value",
                "uVar6": "mul_result",
                "uVar7": "sub_result",
                "__aeabi_dcmplt": "check_if_less_than",
                "__floatunsidf": "convert_to_unsigned_float",
                "__divdf3": "divide_floats",
                "__muldf3": "multiply_floats",
                "__subdf3": "subtract_floats"
            },
            "calling": [
                "FUN_080018f8",
                "FUN_08001ab0"
            ],
            "called": [
                "FUN_080009dc",
                "FUN_080004f8",
                "FUN_08000190",
                "FUN_0800074c",
                "FUN_0800040c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08001814": {
                    "3": "update_params",
                    "4": "process_params",
                    "6": "process_data",
                    "5": "process_parameters",
                    "1": "update_function_params",
                    "2": "update_parameters"
                },
                "param_1": {
                    "9": "output_array",
                    "1": "param_array",
                    "2": "result",
                    "7": "output",
                    "6": "result_array"
                },
                "param_2": {
                    "7": "param2",
                    "1": "input_2",
                    "2": "param_2",
                    "10": "input1"
                },
                "param_3": {
                    "1": "first_param",
                    "7": "input2",
                    "3": "value1",
                    "2": "input1"
                },
                "param_4": {
                    "3": "value2",
                    "2": "y1",
                    "1": "value_3",
                    "7": "input3"
                },
                "param_5": {
                    "1": "min_param2",
                    "2": "input3",
                    "3": "param5",
                    "7": "input4"
                },
                "param_6": {
                    "2": "input4",
                    "1": "input_6",
                    "7": "input5",
                    "3": "value4"
                },
                "param_7": {
                    "2": "e",
                    "3": "param7",
                    "1": "param_f",
                    "7": "input6"
                },
                "param_8": {
                    "1": "condition6",
                    "2": "f",
                    "3": "param8",
                    "7": "input7"
                },
                "param_9": {
                    "16": "flag",
                    "1": "param_h",
                    "2": "param9",
                    "3": "condition",
                    "4": "input8"
                },
                "iVar1": {
                    "2": "comparison",
                    "1": "less_than_flag",
                    "11": "comparison_result"
                },
                "uVar2": {
                    "1": "result2",
                    "2": "temp1",
                    "4": "temp_var",
                    "5": "result"
                },
                "uVar3": {
                    "3": "flag",
                    "1": "result",
                    "2": "new_value",
                    "8": "flag_value"
                },
                "bVar4": {
                    "1": "is_not_condition2",
                    "9": "is_not_equal",
                    "2": "flag_check",
                    "4": "is_flag_set"
                },
                "uVar5": {
                    "1": "calculation1",
                    "3": "float_value",
                    "2": "temp1"
                },
                "uVar6": {
                    "1": "result4",
                    "2": "temp_value2",
                    "10": "mul_result",
                    "3": "temp_var2"
                },
                "uVar7": {
                    "3": "temp_var3",
                    "1": "converted_value5",
                    "2": "temp_value3",
                    "10": "sub_result"
                },
                "__aeabi_dcmplt": {
                    "1": "check_if_less_than"
                },
                "__floatunsidf": {
                    "1": "convert_to_unsigned_float"
                },
                "__divdf3": {
                    "1": "divide_floats"
                },
                "__muldf3": {
                    "1": "multiply_floats"
                },
                "__subdf3": {
                    "1": "subtract_floats"
                }
            }
        },
        "FUN_080018f8": {
            "entrypoint": "0x080018f8",
            "current_name": "process_data_080018f8",
            "code": "\nvoid process_data_080018f8(void)\n\n{\n  process_data_080018f8_helper();\n  return;\n}\n\n",
            "renaming": {
                "FUN_080018f8": "process_data_080018f8",
                "process_data_08001814": "process_data_helper"
            },
            "calling": [
                "FUN_08000cd0"
            ],
            "called": [
                "FUN_08001814"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080018f8": {
                    "5": "process_and_return_data",
                    "26": "process_data"
                },
                "input1": {
                    "7": "data1",
                    "1": "input_a",
                    "6": "data_input1",
                    "2": "data_input_1",
                    "4": "param1"
                },
                "input2": {
                    "2": "data_input_2",
                    "4": "param2",
                    "1": "value2",
                    "7": "data2",
                    "6": "data_input2"
                },
                "input3": {
                    "7": "data3",
                    "1": "param",
                    "2": "third_input",
                    "4": "param3",
                    "6": "data_input3"
                },
                "*output_array": {
                    "1": "output_array"
                },
                "process_data_08001814": {
                    "1": "process_data_sub_function"
                },
                "output_array": {
                    "4": "result_array",
                    "1": "output_data",
                    "5": "result"
                }
            }
        },
        "FUN_08001918": {
            "entrypoint": "0x08001918",
            "current_name": "update_parameters_08001918",
            "code": "\nvoid update_parameters_08001918(int input_data,int new_value,undefined4 param3,undefined4 param4)\n\n{\n  undefined4 result1;\n  undefined8 float_value1;\n  undefined8 float_value2;\n  \n  if (0 < new_value) {\n    float_value1 = __floatsidf(new_value);\n    float_value2 = __floatunsidf(*(undefined4 *)(input_data + 0x58));\n    float_value1 = __divdf3((int)float_value1,(int)((ulonglong)float_value1 >> 0x20),(int)float_value2,\n                     (int)((ulonglong)float_value2 >> 0x20),param4);\n    result1 = (undefined4)((ulonglong)float_value1 >> 0x20);\n    float_value2 = __muldf3((int)float_value1,result1,*(undefined4 *)(input_data + 0x20),\n                     *(undefined4 *)(input_data + 0x24));\n    *(undefined8 *)(input_data + 0x20) = float_value2;\n    float_value1 = __divdf3(*(undefined4 *)(input_data + 0x28),*(undefined4 *)(input_data + 0x2c),(int)float_value1,\n                     result1);\n    *(undefined8 *)(input_data + 0x28) = float_value1;\n    *(int *)(input_data + 0x58) = new_value;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001918": "update_parameters_08001918",
                "param_1": "input_data",
                "param_2": "new_value",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "result1",
                "uVar2": "float_value1",
                "uVar3": "float_value2"
            },
            "calling": [
                "FUN_08000cd0"
            ],
            "called": [
                "FUN_080004f8",
                "FUN_0800042c",
                "FUN_0800074c",
                "FUN_0800040c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08001918": {
                    "1": "update_data",
                    "10": "update_parameters",
                    "2": "update_param_values",
                    "3": "calculate_division_and_multiplication",
                    "4": "update_values"
                },
                "param_1": {
                    "1": "context",
                    "2": "input",
                    "3": "arg1",
                    "5": "input_data"
                },
                "param_2": {
                    "1": "size",
                    "12": "new_value",
                    "3": "num_iterations",
                    "2": "arg2"
                },
                "param_3": {
                    "2": "float_value1",
                    "1": "param1",
                    "6": "param3",
                    "3": "arg3"
                },
                "param_4": {
                    "1": "additional_parameter",
                    "7": "param4",
                    "2": "value2",
                    "3": "arg4"
                },
                "uVar1": {
                    "1": "division_result_high",
                    "3": "quotient1",
                    "2": "quotient_high",
                    "7": "result1",
                    "6": "quotient"
                },
                "uVar2": {
                    "1": "float_num_elements",
                    "6": "float_value1",
                    "2": "float_param"
                },
                "uVar3": {
                    "1": "float_data",
                    "2": "converted_arg1",
                    "7": "float_value2"
                },
                "FUN_080004f8": {
                    "1": "convert_unsigned_to_float"
                },
                "FUN_0800042c": {
                    "1": "convert_float_to_unsigned"
                },
                "FUN_0800074c": {
                    "1": "convert_unsigned_to_float2"
                },
                "FUN_0800040c": {
                    "1": "calculate_quotient3"
                },
                "*(undefined4 *)(param_1 + 0x58)": {
                    "1": "current_value"
                },
                "*(undefined4 *)(param_1 + 0x20)": {
                    "1": "product1"
                },
                "*(undefined4 *)(param_1 + 0x24)": {
                    "1": "product2"
                },
                "*(undefined4 *)(param_1 + 0x28)": {
                    "1": "product3"
                },
                "*(undefined4 *)(param_1 + 0x2c)": {
                    "1": "product4"
                },
                "uVar3_2": {
                    "1": "float_input_data2"
                },
                "uVar3_3": {
                    "1": "float_input_data3"
                },
                "uVar4": {
                    "1": "result1"
                },
                "uVar5": {
                    "1": "temp1"
                },
                "uVar6": {
                    "1": "temp2"
                }
            }
        },
        "FUN_08001960": {
            "entrypoint": "0x08001960",
            "current_name": "update_values_08001960",
            "code": "\nvoid update_values_08001960(int base_address,undefined4 param2,undefined4 new_value1,undefined4 new_value2,\n                 undefined4 new_value3,undefined4 new_value4)\n\n{\n  int comparison_result;\n  undefined4 *ptr;\n  undefined4 value1;\n  undefined4 value2;\n  undefined4 value3;\n  undefined4 value4;\n  \n  comparison_result = __aeabi_dcmpge(new_value1,new_value2,new_value3,new_value4,new_value2);\n  if (comparison_result == 0) {\n    *(undefined4 *)(base_address + 0x60) = new_value1;\n    *(undefined4 *)(base_address + 100) = new_value2;\n    *(undefined4 *)(base_address + 0x68) = new_value3;\n    *(undefined4 *)(base_address + 0x6c) = new_value4;\n    if (*(char *)(base_address + 0x70) != '\\0') {\n      ptr = *(undefined4 **)(base_address + 0x3c);\n      value1 = *ptr;\n      value3 = ptr[1];\n      comparison_result = __aeabi_dcmplt(new_value3,new_value4,value1,value3);\n      if (comparison_result == 0) {\n        comparison_result = __aeabi_dcmpgt(new_value1,new_value2,value1,value3);\n        if (comparison_result != 0) {\n          *ptr = new_value1;\n          ptr[1] = new_value2;\n        }\n      }\n      else {\n        *ptr = new_value3;\n        ptr[1] = new_value4;\n      }\n      value1 = *(undefined4 *)(base_address + 0x48);\n      value3 = *(undefined4 *)(base_address + 0x4c);\n      value2 = *(undefined4 *)(base_address + 0x68);\n      value4 = *(undefined4 *)(base_address + 0x6c);\n      comparison_result = __aeabi_dcmpgt(value1,value3,value2,value4);\n      if (comparison_result != 0) {\n        *(undefined4 *)(base_address + 0x48) = value2;\n        *(undefined4 *)(base_address + 0x4c) = value4;\n        return;\n      }\n      value2 = *(undefined4 *)(base_address + 0x60);\n      value4 = *(undefined4 *)(base_address + 100);\n      comparison_result = __aeabi_dcmplt(value1,value3,value2,value4);\n      if (comparison_result != 0) {\n        *(undefined4 *)(base_address + 0x48) = value2;\n        *(undefined4 *)(base_address + 0x4c) = value4;\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001960": "update_values_08001960",
                "param_1": "base_address",
                "param_2": "param2",
                "param_3": "new_value1",
                "param_4": "new_value2",
                "param_5": "new_value3",
                "param_6": "new_value4",
                "iVar1": "comparison_result",
                "puVar2": "ptr",
                "uVar3": "value1",
                "uVar4": "value2",
                "uVar5": "value3",
                "uVar6": "value4"
            },
            "calling": [
                "FUN_08001ab0",
                "FUN_08000cd0"
            ],
            "called": [
                "FUN_080009dc",
                "FUN_08000a04",
                "FUN_08000a18"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08001960": {
                    "9": "update_values",
                    "1": "process_parameters",
                    "7": "update_parameters",
                    "4": "update_params_and_compare"
                },
                "param_1": {
                    "3": "object",
                    "1": "param_base_address",
                    "2": "param",
                    "9": "base_address"
                },
                "param_2": {
                    "7": "param2",
                    "1": "unused_param2",
                    "2": "arg2",
                    "6": "unused",
                    "5": "unused_param"
                },
                "param_3": {
                    "1": "new_param3",
                    "11": "new_value1",
                    "8": "new_param1",
                    "2": "new_val1",
                    "6": "value1"
                },
                "param_4": {
                    "11": "new_value2",
                    "1": "new_param4",
                    "2": "new_val2",
                    "8": "new_param2",
                    "6": "value2"
                },
                "param_5": {
                    "1": "new_param5",
                    "8": "new_param3",
                    "6": "value3",
                    "2": "value1"
                },
                "param_6": {
                    "1": "val4",
                    "8": "new_param4",
                    "6": "value4",
                    "2": "value2"
                },
                "iVar1": {
                    "1": "is_equal",
                    "26": "comparison_result"
                },
                "puVar2": {
                    "1": "ptr_data",
                    "4": "ptr_to_values",
                    "3": "ptr_to_data",
                    "5": "ptr",
                    "2": "ptr_to_value_array"
                },
                "uVar3": {
                    "4": "data1",
                    "1": "param_value1",
                    "3": "temp1",
                    "2": "temp_var1",
                    "5": "value1"
                },
                "uVar4": {
                    "1": "comparison_var2",
                    "4": "data2",
                    "2": "array_value2",
                    "5": "value2",
                    "3": "temp_value2"
                },
                "uVar5": {
                    "2": "temp_value3",
                    "1": "param_value3",
                    "4": "value3",
                    "3": "temp3"
                },
                "uVar6": {
                    "1": "condition_data2",
                    "2": "compare_value2",
                    "4": "value4",
                    "3": "temp4"
                }
            }
        },
        "FUN_080019f6": {
            "entrypoint": "0x080019f6",
            "current_name": "compare_and_update_values_080019f6",
            "code": "\nvoid compare_and_update_values_080019f6(int base_address)\n\n{\n  int comparison_result;\n  undefined4 first_value;\n  undefined4 second_value;\n  undefined4 third_value;\n  undefined4 fourth_value;\n  \n  second_value = **(undefined4 **)(base_address + 0x3c);\n  third_value = (*(undefined4 **)(base_address + 0x3c))[1];\n  *(undefined4 *)(base_address + 0x48) = second_value;\n  *(undefined4 *)(base_address + 0x4c) = third_value;\n  first_value = (*(undefined4 **)(base_address + 0x38))[1];\n  *(undefined4 *)(base_address + 0x50) = **(undefined4 **)(base_address + 0x38);\n  *(undefined4 *)(base_address + 0x54) = first_value;\n  first_value = *(undefined4 *)(base_address + 0x68);\n  fourth_value = *(undefined4 *)(base_address + 0x6c);\n  comparison_result = __aeabi_dcmpgt(second_value,third_value,first_value,fourth_value);\n  if (comparison_result == 0) {\n    first_value = *(undefined4 *)(base_address + 0x60);\n    fourth_value = *(undefined4 *)(base_address + 100);\n    comparison_result = __aeabi_dcmplt(second_value,third_value,first_value,fourth_value);\n    if (comparison_result != 0) {\n      *(undefined4 *)(base_address + 0x48) = first_value;\n      *(undefined4 *)(base_address + 0x4c) = fourth_value;\n    }\n    return;\n  }\n  *(undefined4 *)(base_address + 0x48) = first_value;\n  *(undefined4 *)(base_address + 0x4c) = fourth_value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080019f6": "compare_and_update_values_080019f6",
                "param_1": "base_address",
                "iVar1": "comparison_result",
                "uVar2": "first_value",
                "uVar3": "second_value",
                "uVar4": "third_value",
                "uVar5": "fourth_value"
            },
            "calling": [
                "FUN_08001a44"
            ],
            "called": [
                "FUN_080009dc",
                "FUN_08000a18"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080019f6": {
                    "1": "compare_and_assign_min_max",
                    "2": "find_largest_value",
                    "6": "compare_and_set_values",
                    "4": "update_values"
                },
                "param_1": {
                    "8": "base_address",
                    "4": "data",
                    "1": "pointer_value"
                },
                "iVar1": {
                    "25": "comparison_result",
                    "3": "result",
                    "1": "compare_result"
                },
                "uVar2": {
                    "11": "first_value",
                    "1": "secondary_var1",
                    "2": "temp1",
                    "5": "value1",
                    "4": "temp_var1"
                },
                "uVar3": {
                    "2": "first_value",
                    "1": "pointer1",
                    "9": "second_value",
                    "6": "value1",
                    "4": "value2"
                },
                "uVar4": {
                    "1": "context_second_value",
                    "2": "second_value",
                    "4": "value3",
                    "8": "third_value",
                    "6": "value2"
                },
                "uVar5": {
                    "1": "value2",
                    "2": "temp2",
                    "9": "fourth_value",
                    "4": "value4"
                }
            }
        },
        "FUN_08001a44": {
            "entrypoint": "0x08001a44",
            "current_name": "update_status_08001a44",
            "code": "\nvoid update_status_08001a44(int base_address,int flag)\n\n{\n  undefined new_value;\n  \n  if (flag == 1) {\n    new_value = 1;\n    if (*(char *)(base_address + 0x70) == '\\0') {\n      initialize_function();\n    }\n  }\n  else {\n    new_value = 0;\n  }\n  *(undefined *)(base_address + 0x70) = new_value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001a44": "update_status_08001a44",
                "param_1": "base_address",
                "param_2": "flag",
                "uVar1": "new_value",
                "Initialize": "initialize_function"
            },
            "calling": [
                "FUN_08000cd0"
            ],
            "called": [
                "FUN_080019f6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08001a44": {
                    "6": "update_flag",
                    "2": "set_flag_value",
                    "1": "set_flag_based_on_param",
                    "7": "update_status"
                },
                "param_1": {
                    "1": "input_param",
                    "3": "flag_address",
                    "5": "object_address",
                    "12": "base_address",
                    "2": "param"
                },
                "param_2": {
                    "11": "flag",
                    "2": "condition",
                    "1": "status_value",
                    "4": "status",
                    "8": "flag_value"
                },
                "uVar1": {
                    "1": "initialized_flag",
                    "13": "new_value",
                    "5": "new_flag_value",
                    "3": "is_initialized",
                    "2": "status"
                },
                "Initialize": {
                    "2": "initialize_function",
                    "1": "initialize"
                },
                "FUN_080019f6": {
                    "1": "reset_data"
                }
            }
        },
        "FUN_08001a66": {
            "entrypoint": "0x08001a66",
            "current_name": "update_params_08001a66",
            "code": "\nvoid update_params_08001a66(int object_address,int new_value,undefined4 param3,undefined4 param4)\n\n{\n  undefined8 result;\n  \n  if ((*(char *)(object_address + 0x70) != '\\0') && (*(int *)(object_address + 0x30) != new_value)) {\n    result = calculate_difference(0,0,*(undefined4 *)(object_address + 0x18),*(undefined4 *)(object_address + 0x1c),param4);\n    *(undefined8 *)(object_address + 0x18) = result;\n    result = calculate_difference(0,0,*(undefined4 *)(object_address + 0x20),*(undefined4 *)(object_address + 0x24));\n    *(undefined8 *)(object_address + 0x20) = result;\n    result = calculate_difference(0,0,*(undefined4 *)(object_address + 0x28),*(undefined4 *)(object_address + 0x2c));\n    *(undefined8 *)(object_address + 0x28) = result;\n  }\n  *(int *)(object_address + 0x30) = new_value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001a66": "update_params_08001a66",
                "param_1": "object_address",
                "param_2": "new_value",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "result",
                "__subdf3": "calculate_difference"
            },
            "calling": [
                "FUN_08001ab0"
            ],
            "called": [
                "FUN_08000190"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08001a66": {
                    "10": "update_params",
                    "1": "update_params_and_store",
                    "8": "update_values"
                },
                "param_1": {
                    "1": "ptr_struct",
                    "3": "obj_ptr",
                    "2": "data_struct_ptr",
                    "6": "object_address",
                    "4": "data_struct"
                },
                "param_2": {
                    "1": "value",
                    "19": "new_value",
                    "10": "new_param"
                },
                "param_3": {
                    "1": "param1",
                    "7": "unused_param1",
                    "2": "param_3"
                },
                "param_4": {
                    "1": "unused2",
                    "8": "unused_param2",
                    "2": "temp2"
                },
                "uVar1": {
                    "22": "result",
                    "2": "updated_value"
                },
                "*(char *)(param_1 + 0x70)": {
                    "2": "flag",
                    "1": "should_update",
                    "4": "is_flag_set"
                },
                "*(int *)(param_1 + 0x30)": {
                    "1": "previous_param",
                    "2": "prev_param",
                    "6": "previous_value"
                },
                "*(undefined4 *)(param_1 + 0x18)": {
                    "1": "val1",
                    "2": "param1",
                    "9": "value1"
                },
                "*(undefined4 *)(param_1 + 0x1c)": {
                    "2": "param2",
                    "1": "param_b",
                    "9": "value2"
                },
                "*(undefined4 *)(param_1 + 0x20)": {
                    "1": "param_c",
                    "9": "value3",
                    "2": "param3"
                },
                "*(undefined4 *)(param_1 + 0x24)": {
                    "1": "val4",
                    "2": "param4",
                    "9": "value4"
                },
                "*(undefined4 *)(param_1 + 0x28)": {
                    "2": "param5",
                    "1": "param_e",
                    "9": "value5"
                },
                "*(undefined4 *)(param_1 + 0x2c)": {
                    "9": "value6",
                    "1": "param_f",
                    "2": "param6"
                },
                "__subdf3": {
                    "1": "calculate_difference"
                },
                "*(undefined8 *)(param_1 + 0x18)": {
                    "1": "updated_value1"
                },
                "*(undefined8 *)(param_1 + 0x20)": {
                    "1": "updated_value3"
                },
                "*(undefined8 *)(param_1 + 0x28)": {
                    "1": "updated_value5"
                },
                "PTR_08000190": {
                    "1": "sub_function"
                },
                "*PTR_objectAddress": {
                    "1": "object_flag"
                },
                "*PTR_objectAddress_2": {
                    "1": "previous_value"
                },
                "*PTR_objectAddress_3": {
                    "1": "value1"
                },
                "*PTR_objectAddress_4": {
                    "1": "value2"
                },
                "*PTR_objectAddress_5": {
                    "1": "value3"
                },
                "FUN_08000190": {
                    "1": "calculate_result"
                }
            }
        },
        "FUN_08001ab0": {
            "entrypoint": "0x08001ab0",
            "current_name": "initialize_controller_08001ab0",
            "code": "\nint initialize_controller_08001ab0(int controller_address,undefined4 param2,undefined4 param3,undefined4 param4,\n                undefined4 input1,undefined4 input2,undefined4 input3,undefined4 param8,\n                undefined4 param9,undefined4 param10,undefined4 param11,undefined4 controller_direction)\n\n{\n  int current_time;\n  undefined4 return_value;\n  \n  *(undefined4 *)(controller_address + 0x3c) = param3;\n  *(undefined4 *)(controller_address + 0x38) = param2;\n  *(undefined4 *)(controller_address + 0x40) = param4;\n  *(undefined *)(controller_address + 0x70) = 0;\n  set_output_limits(controller_address,param2,0,0,0,0x406fe000);\n  *(undefined4 *)(controller_address + 0x58) = 100;\n  set_controller_direction(controller_address,controller_direction);\n  process_data(controller_address,return_value,input1,input2,input3,param8,param9,param10,param11);\n  current_time = get_current_milliseconds();\n  *(int *)(controller_address + 0x44) = current_time - *(int *)(controller_address + 0x58);\n  return controller_address;\n}\n\n",
            "renaming": {
                "FUN_08001ab0": "initialize_controller_08001ab0",
                "param_1": "controller_address",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "input1",
                "param_6": "input2",
                "param_7": "input3",
                "param_8": "param8",
                "param_9": "param9",
                "param_10": "param10",
                "param_11": "param11",
                "param_12": "controller_direction",
                "extraout_r1": "return_value",
                "iVar1": "current_time",
                "SetOutputLimits": "set_output_limits",
                "SetControllerDirection": "set_controller_direction",
                "process_data_08001814": "process_data",
                "millis": "get_current_milliseconds"
            },
            "calling": [
                "FUN_08001b18"
            ],
            "called": [
                "FUN_080058e0",
                "FUN_08001960",
                "FUN_08001a66",
                "FUN_08001814"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08001ab0": {
                    "25": "initialize_controller",
                    "2": "configure_controller",
                    "1": "set_controller_data_limits"
                },
                "param_1": {
                    "5": "controller",
                    "1": "controller_data",
                    "23": "controller_address",
                    "2": "base_address"
                },
                "param_2": {
                    "19": "param2",
                    "2": "param1",
                    "1": "limit1",
                    "5": "input1"
                },
                "param_3": {
                    "2": "param2",
                    "5": "input2",
                    "18": "param3",
                    "1": "param_3"
                },
                "param_4": {
                    "18": "param4",
                    "1": "param_value3",
                    "2": "param3",
                    "5": "input3"
                },
                "param_5": {
                    "1": "input_param_1",
                    "2": "input4",
                    "11": "input1"
                },
                "param_6": {
                    "2": "input5",
                    "1": "param5",
                    "11": "param6"
                },
                "param_7": {
                    "2": "input6",
                    "1": "param_f",
                    "11": "param7"
                },
                "param_8": {
                    "14": "param8",
                    "1": "input_param_4",
                    "4": "param4",
                    "2": "input4"
                },
                "param_9": {
                    "2": "input8",
                    "1": "param8",
                    "14": "param9",
                    "4": "param5"
                },
                "param_10": {
                    "1": "param8",
                    "14": "param10",
                    "4": "param6",
                    "2": "input6"
                },
                "param_11": {
                    "1": "param5",
                    "2": "input7",
                    "14": "param11",
                    "4": "param7"
                },
                "param_12": {
                    "1": "input11",
                    "10": "param12",
                    "11": "controller_direction",
                    "5": "direction",
                    "2": "param8"
                },
                "extraout_r1": {
                    "2": "output1",
                    "1": "extra_out",
                    "7": "return_value",
                    "6": "extra_output"
                },
                "iVar1": {
                    "1": "elapsed_time",
                    "18": "current_time",
                    "2": "current_milliseconds",
                    "4": "current_millis"
                },
                "base_address": {
                    "1": "output_array",
                    "2": "base_address"
                },
                "new_value1": {
                    "3": "new_value1"
                },
                "new_value2": {
                    "3": "new_value2"
                },
                "object_address": {
                    "3": "object_address"
                },
                "new_value": {
                    "3": "new_value"
                },
                "output_array": {
                    "3": "output_array"
                },
                "SetOutputLimits": {
                    "1": "configure_output_limits",
                    "24": "set_output_limits"
                },
                "SetControllerDirection": {
                    "25": "set_controller_direction"
                },
                "process_data_08001814": {
                    "26": "process_data"
                },
                "millis": {
                    "2": "get_current_time",
                    "1": "get_current_milliseconds_080058e0",
                    "3": "get_current_millis",
                    "13": "get_current_milliseconds"
                },
                "get_current_milliseconds_080058e0": {
                    "3": "get_current_milliseconds"
                },
                "update_values_08001960": {
                    "4": "update_values"
                },
                "update_params_08001a66": {
                    "4": "update_params"
                },
                "*(int *)(param_1 + 0x44)": {
                    "1": "time_difference"
                },
                "input1": {
                    "2": "input1"
                },
                "input2": {
                    "2": "input2"
                },
                "input3": {
                    "2": "input3"
                }
            }
        },
        "FUN_08001b18": {
            "entrypoint": "0x08001b18",
            "current_name": "initialize_and_return_param_08001b18",
            "code": "\nundefined4 initialize_and_return_param_08001b18(undefined4 input_param)\n\n{\n  initialize_controller();\n  return input_param;\n}\n\n",
            "renaming": {
                "FUN_08001b18": "initialize_and_return_param_08001b18",
                "param_1": "input_param",
                "initialize_controller_08001ab0": "initialize_controller"
            },
            "calling": [
                "FUN_08000b08"
            ],
            "called": [
                "FUN_08001ab0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08001b18": {
                    "8": "initialize_and_return",
                    "1": "initialize_system",
                    "2": "initialize",
                    "9": "initialize_and_return_param"
                },
                "param_1": {
                    "3": "input",
                    "1": "input_data",
                    "2": "controller",
                    "4": "param",
                    "9": "input_param"
                },
                "initialize_controller_08001ab0": {
                    "2": "initialize_controller_subfunction",
                    "20": "initialize_controller"
                },
                "controller_address": {
                    "2": "controller_addr",
                    "1": "controller_address"
                },
                "param2": {
                    "3": "param2"
                },
                "param3": {
                    "3": "param3"
                },
                "param4": {
                    "3": "param4"
                }
            }
        },
        "FUN_08001b48": {
            "entrypoint": "0x08001b48",
            "current_name": "initialize_system_08001b48",
            "code": "\nvoid initialize_system_08001b48(void)\n\n{\n  int result;\n  uint hclk_freq;\n  undefined4 peripheral_clock_config [2];\n  undefined4 periph_clk_init;\n  undefined4 clock_config;\n  undefined4 pll_source;\n  undefined4 pll_config;\n  undefined4 apb1_prescaler;\n  undefined4 apb2_prescaler;\n  undefined4 oscillator_config [4];\n  undefined4 clock_source;\n  undefined4 clock_config;\n  undefined4 clock_config;\n  undefined4 pclk2_config;\n  undefined4 pll_mul;\n  \n  oscillator_type = 2;\n  clock_source = 1;\n  clock_config = 0x10;\n  clock_config = 2;\n  pclk2_config = 0;\n  pll_mul = 0x380000;\n  result = configure_oscillators(oscillator_config);\n  if (result != 0) {\n    handle_error(\"/home/bo/.arduino15/packages/STM32/hardware/stm32/1.3.0/variants/NUCLEO_F103RB/variant.cpp\"\n                   ,0x88);\n  }\n  clock_config = 0xf;\n  pll_source = 2;\n  pll_config = 0;\n  apb1_prescaler = 0x400;\n  apb2_prescaler = 0;\n  result = configure_clock(&clock_config);\n  if (result != 0) {\n    handle_error(\"/home/bo/.arduino15/packages/STM32/hardware/stm32/1.3.0/variants/NUCLEO_F103RB/variant.cpp\"\n                   ,0x95);\n  }\n  peripheral_clock_type = 2;\n  periph_clk_init = 0x8000;\n  result = configure_periph_clock(peripheral_clock_config);\n  if (result != 0) {\n    handle_error(\"/home/bo/.arduino15/packages/STM32/hardware/stm32/1.3.0/variants/NUCLEO_F103RB/variant.cpp\"\n                   ,0x9c);\n  }\n  hclk_freq = get_hclk_freq();\n  configure_sys_tick(hclk_freq / 1000);\n  configure_sys_tick_clock_source(4);\n  set_priority(0xffffffff,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001b48": "initialize_system_08001b48",
                "local_30": "oscillator_config",
                "local_20": "clock_source",
                "local_1c": "clock_config",
                "local_14": "clock_config",
                "local_10": "pclk2_config",
                "local_c": "pll_mul",
                "local_44": "clock_config",
                "local_40": "pll_source",
                "local_3c": "pll_config",
                "local_38": "apb1_prescaler",
                "local_34": "apb2_prescaler",
                "local_54": "peripheral_clock_config",
                "local_4c": "periph_clk_init",
                "iVar1": "result",
                "uVar2": "hclk_freq",
                "local_30[0]": "oscillator_type",
                "local_54[0]": "peripheral_clock_type",
                "_Error_Handler": "handle_error",
                "HAL_RCC_OscConfig": "configure_oscillators",
                "HAL_RCC_ClockConfig": "configure_clock",
                "HAL_RCCEx_PeriphCLKConfig": "configure_periph_clock",
                "HAL_RCC_GetHCLKFreq": "get_hclk_freq",
                "HAL_SYSTICK_Config": "configure_sys_tick",
                "HAL_SYSTICK_CLKSourceConfig": "configure_sys_tick_clock_source",
                "HAL_NVIC_SetPriority": "set_priority"
            },
            "calling": [
                "FUN_08004c52"
            ],
            "called": [
                "FUN_08003c44",
                "FUN_08003ad4",
                "FUN_08003688",
                "FUN_08002514",
                "FUN_08002560",
                "FUN_08004d40",
                "FUN_08002494",
                "FUN_08003c90"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08001b48": {
                    "1": "initialize_gpio_clock",
                    "2": "initialize_system_clock",
                    "19": "initialize_system",
                    "3": "initialize_clock"
                },
                "local_30": {
                    "2": "osc_config_array",
                    "1": "oscillator_config_params",
                    "8": "osc_config",
                    "13": "oscillator_config"
                },
                "local_20": {
                    "1": "osc_type",
                    "7": "clock_source",
                    "2": "source_config"
                },
                "local_1c": {
                    "1": "sys_tick_source",
                    "2": "clock_config"
                },
                "local_14": {
                    "1": "peri_clk_config",
                    "2": "clock_config"
                },
                "local_10": {
                    "1": "usb_config_mask",
                    "2": "pclk2_config"
                },
                "local_c": {
                    "1": "flash_config",
                    "2": "pll_mul"
                },
                "local_44": {
                    "1": "rcc_clock_init",
                    "2": "rcc_clock_type",
                    "5": "clock_config"
                },
                "local_40": {
                    "1": "pclk_divider",
                    "2": "pll_source"
                },
                "local_3c": {
                    "1": "pclk1_freq",
                    "2": "pll_multiplier"
                },
                "local_38": {
                    "2": "apb1_divider",
                    "1": "pllmul_config",
                    "3": "ahb_prescaler"
                },
                "local_34": {
                    "1": "config5",
                    "2": "apb1_divider",
                    "3": "apb2_prescaler"
                },
                "local_54": {
                    "1": "peripheral_clk_config",
                    "2": "config_array2",
                    "8": "peripheral_clock_config"
                },
                "local_4c": {
                    "1": "pll_mul",
                    "2": "periph_clk_init"
                },
                "iVar1": {
                    "1": "return_value",
                    "22": "result"
                },
                "uVar2": {
                    "3": "hclk_frequency",
                    "1": "system_clock_frequency",
                    "2": "sys_tick_freq",
                    "16": "hclk_freq"
                },
                "local_30[0]": {
                    "1": "oscillator_type"
                },
                "local_54[0]": {
                    "1": "peripheral_clock_type"
                },
                "_Error_Handler": {
                    "1": "handle_error"
                },
                "HAL_RCC_OscConfig": {
                    "1": "configure_oscillators"
                },
                "HAL_RCC_ClockConfig": {
                    "1": "configure_clock"
                },
                "HAL_RCCEx_PeriphCLKConfig": {
                    "1": "configure_periph_clock"
                },
                "HAL_RCC_GetHCLKFreq": {
                    "1": "get_hclk_freq"
                },
                "HAL_SYSTICK_Config": {
                    "1": "configure_sys_tick"
                },
                "HAL_SYSTICK_CLKSourceConfig": {
                    "1": "configure_sys_tick_clock_source"
                },
                "HAL_NVIC_SetPriority": {
                    "1": "set_priority"
                }
            }
        },
        "FUN_08001be8": {
            "entrypoint": "0x08001be8",
            "current_name": "initialize_system_08001be8",
            "code": "\nvoid initialize_system_08001be8(void)\n\n{\n  int index;\n  undefined4 *ptr;\n  code *jump_table;\n  \n  for (index = 0; (undefined *)(index + 0x20000000) < &DAT_2000015c; index = index + 4) {\n    *(undefined4 *)(index + 0x20000000) = *(undefined4 *)(index + 0x8007970);\n  }\n  for (ptr = &DAT_20000160; ptr < &DAT_200006a8; ptr = ptr + 1) {\n    *ptr = 0;\n  }\n  SystemInit();\n  __libc_init_array();\n  jump_table = (code *)0x8001c1a;\n  main();\n                    /* WARNING: Could not recover jumptable at 0x08001c1a. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jump_table)();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001be8": "initialize_system_08001be8",
                "iVar1": "index",
                "puVar2": "ptr",
                "UNRECOVERED_JUMPTABLE": "jump_table"
            },
            "calling": [],
            "called": [
                "FUN_08004d44",
                "FUN_08006198",
                "FUN_08005f6c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08001be8": {
                    "1": "initialize_and_jump",
                    "2": "initialize_program",
                    "23": "initialize_system"
                },
                "iVar1": {
                    "4": "i",
                    "6": "offset",
                    "5": "counter",
                    "16": "index"
                },
                "puVar2": {
                    "1": "p_data_ptr",
                    "3": "pointer",
                    "25": "ptr"
                },
                "UNRECOVERED_JUMPTABLE": {
                    "1": "recovered_jump_table",
                    "24": "jump_table",
                    "4": "jumptable"
                },
                "FUN_08004d44": {
                    "1": "process_data"
                },
                "FUN_08006198": {
                    "1": "initialize_array"
                },
                "FUN_08005f6c": {
                    "1": "main_function"
                }
            }
        },
        "FUN_08001c32": {
            "entrypoint": "0x08001c32",
            "current_name": "initialize_hardware_configuration_08001c32",
            "code": "\nvoid initialize_hardware_configuration_08001c32(void)\n\n{\n  initialize_hardware_config();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001c32": "initialize_hardware_configuration_08001c32",
                "hw_config_init": "initialize_hardware_config"
            },
            "calling": [
                "FUN_08005f5e"
            ],
            "called": [
                "FUN_08004c52"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08001c32": {
                    "2": "initialize_hardware_config",
                    "21": "initialize_hardware_configuration",
                    "4": "initialize_hw_config"
                },
                "FUN_08004c52": {
                    "1": "configure_hw",
                    "12": "perform_additional_setup",
                    "2": "perform_additional_configuration",
                    "7": "perform_additional_tasks"
                },
                "hw_config_init": {
                    "2": "initialize_hardware_config"
                }
            }
        },
        "FUN_08001c3a": {
            "entrypoint": "0x08001c3a",
            "current_name": "FUNC_08001c3a",
            "code": "\nvoid FUNC_08001c3a(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001c3a": "FUNC_08001c3a"
            },
            "calling": [
                "FUN_08001c88"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08001c3c": {
            "entrypoint": "0x08001c3c",
            "current_name": "configure_sys_tick_08001c3c",
            "code": "\nundefined4 configure_sys_tick_08001c3c(uint priority_level)\n\n{\n  int config_status;\n  \n  config_status = configure_sys_tick_08001c3c(DAT_20000084 / (1000 / DAT_20000078));\n  if (config_status != 0) {\n    return 1;\n  }\n  if (0xf < priority_level) {\n    return 1;\n  }\n  set_interrupt_priority(0xffffffff,priority_level,0);\n  DAT_2000007c = priority_level;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001c3c": "configure_sys_tick_08001c3c",
                "param_1": "priority_level",
                "iVar1": "config_status",
                "HAL_SYSTICK_Config": "configure_sys_tick",
                "HAL_NVIC_SetPriority": "set_interrupt_priority"
            },
            "calling": [
                "FUN_08001c88",
                "FUN_08003afa"
            ],
            "called": [
                "FUN_08002514",
                "FUN_08002494"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08001c3c": {
                    "1": "initialize_system_timer",
                    "15": "configure_sys_tick",
                    "4": "configure_systick",
                    "5": "initialize_sys_tick"
                },
                "param_1": {
                    "7": "priority",
                    "24": "priority_level"
                },
                "iVar1": {
                    "2": "status",
                    "5": "config_result",
                    "1": "systick_config_ret",
                    "3": "systick_config_result",
                    "7": "result"
                },
                "DAT_20000084": {
                    "3": "sys_tick_reload_value",
                    "1": "sys_tick_cycles_per_millisecond"
                },
                "DAT_20000078": {
                    "1": "desired_sys_tick_freq",
                    "4": "sys_tick_frequency"
                },
                "HAL_SYSTICK_Config": {
                    "1": "configure_systick_timer",
                    "6": "configure_sys_tick"
                },
                "HAL_NVIC_SetPriority": {
                    "5": "set_interrupt_priority",
                    "3": "set_priority"
                },
                "DAT_2000007c": {
                    "3": "interrupt_priority",
                    "4": "current_priority",
                    "1": "configured_priority"
                },
                "FUN_08002514": {
                    "1": "configure_nvic_priority"
                },
                "FUN_08002494": {
                    "1": "set_nvic_priority"
                }
            }
        },
        "FUN_08001c88": {
            "entrypoint": "0x08001c88",
            "current_name": "initialize_hardware_08001c88",
            "code": "\n\n\nundefined4 initialize_hardware_08001c88(void)\n\n{\n  _DAT_40022000 = _DAT_40022000 | 0x10;\n  set_priority_grouping(3);\n  initialize_tick(0xf);\n  initialize_msp();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001c88": "initialize_hardware_08001c88",
                "HAL_NVIC_SetPriorityGrouping": "set_priority_grouping",
                "HAL_InitTick": "initialize_tick",
                "HAL_MspInit": "initialize_msp"
            },
            "calling": [
                "FUN_08004c52"
            ],
            "called": [
                "FUN_08001c3a",
                "FUN_08001c3c",
                "FUN_08002470"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08001c88": {
                    "1": "initialize_hal_system",
                    "17": "initialize_hardware",
                    "8": "initialize_system",
                    "4": "initialize_hal"
                },
                "FUNC_08001c3a": {
                    "1": "initialize_tick"
                },
                "FUN_08001c3c": {
                    "2": "configure_peripheral",
                    "1": "configure_nvic_priority_group",
                    "5": "set_priority"
                },
                "FUN_08002470": {
                    "1": "perform_third_action",
                    "2": "perform_operation",
                    "3": "initialize_tick"
                },
                "FUN_08001c3a": {
                    "1": "perform_pre_init_tasks",
                    "2": "perform_initialization"
                },
                "param_1": {
                    "1": "configuration"
                },
                "_DAT_40022000": {
                    "1": "status_register"
                },
                "HAL_NVIC_SetPriorityGrouping": {
                    "5": "set_priority_grouping",
                    "1": "configure_nvic_priority_grouping",
                    "4": "set_interrupt_priority_group",
                    "3": "set_interrupt_priority_grouping"
                },
                "HAL_InitTick": {
                    "14": "initialize_tick",
                    "1": "initialize_system_tick"
                },
                "HAL_MspInit": {
                    "2": "initialize_peripheral",
                    "1": "initialize_hal_peripherals",
                    "7": "initialize_msp",
                    "3": "initialize_periph"
                }
            }
        },
        "FUN_08001cac": {
            "entrypoint": "0x08001cac",
            "current_name": "update_sum_08001cac",
            "code": "\nvoid update_sum_08001cac(void)\n\n{\n  DAT_200006a0 = (uint)DAT_20000078 + DAT_200006a0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001cac": "update_sum_08001cac"
            },
            "calling": [
                "FUN_08004b9e"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08001cac": {
                    "1": "accumulate_values",
                    "4": "update_sum",
                    "2": "addition_function",
                    "3": "addition"
                },
                "DAT_200006a0": {
                    "2": "sum_value",
                    "1": "global_var",
                    "3": "accumulated_value",
                    "9": "sum",
                    "8": "result"
                },
                "DAT_20000078": {
                    "4": "input",
                    "2": "old_value",
                    "1": "input_data",
                    "11": "input_value"
                }
            }
        },
        "FUN_08001cc4": {
            "entrypoint": "0x08001cc4",
            "current_name": "get_data_08001cc4",
            "code": "\nuint32_t get_data_08001cc4(void)\n\n{\n  return DAT_200006a0;\n}\n\n",
            "renaming": {
                "FUN_08001cc4": "get_data_08001cc4",
                "undefined4": "uint32_t"
            },
            "calling": [
                "FUN_08003688",
                "FUN_08001f84",
                "FUN_08001cd0",
                "FUN_08002384",
                "FUN_08004b94",
                "FUN_08003afa",
                "FUN_080043b4",
                "FUN_080020f0",
                "FUN_080053d4",
                "FUN_08004478",
                "FUN_08003c90"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08001cc4": {
                    "4": "get_global_variable",
                    "1": "get_global_data",
                    "10": "get_data_value",
                    "12": "get_data",
                    "3": "get_dat_value"
                },
                "undefined4": {
                    "1": "uint32_t"
                },
                "DAT_200006a0": {
                    "11": "data",
                    "2": "data_value",
                    "4": "global_variable"
                }
            }
        },
        "FUN_08001cd0": {
            "entrypoint": "0x08001cd0",
            "current_name": "calculate_delay_08001cd0",
            "code": "\nundefined4 calculate_delay_08001cd0(uint **input_params,uint timeout)\n\n{\n  int start_time;\n  uint periph_freq;\n  int delay;\n  undefined4 result;\n  uint *data;\n  uint calculated_value;\n  uint counter;\n  \n  counter = 0;\n  start_time = get_current_tick();\n  calculated_value = DAT_20000084;\n  data = *input_params;\n  if ((data[2] & 0x100) == 0) {\n    if (((data[1] & 0x100) == 0) && ((data[0xb] & 0xf00000) == 0)) {\n      do {\n        if ((**input_params & 2) != 0) goto LAB_08001de2;\n      } while ((timeout == 0xffffffff) ||\n              ((timeout != 0 && (delay = get_current_tick(), (uint)(delay - start_time) <= timeout))));\n      input_params[10] = (uint *)((uint)input_params[10] | 4);\n      *(undefined *)(input_params + 9) = 0;\n      result = 3;\n    }\n    else {\n      periph_freq = get_peripheral_clock_frequency(2);\n      data = *input_params;\n      if (((data[4] & 0x24924924) == 0) && ((data[3] & 0x924924) == 0)) {\n        if ((data[4] & 0x12492492) == 0) {\n          if ((data[3] & 0x492492) == 0) {\n            delay = 0x14;\n          }\n          else {\n            delay = 0x29;\n          }\n        }\n        else {\n          delay = 0x29;\n        }\n      }\n      else if (((data[4] & 0x12492492) == 0) && ((data[3] & 0x492492) == 0)) {\n        delay = 0x54;\n      }\n      else if ((data[4] & 0x249249) == 0) {\n        if ((data[3] & 0x249249) == 0) {\n          delay = 0x54;\n        }\n        else {\n          delay = 0xfc;\n        }\n      }\n      else {\n        delay = 0xfc;\n      }\n      calculated_value = (calculated_value / periph_freq) * delay;\n      for (; counter <= calculated_value && calculated_value - counter != 0; counter = counter + 1) {\n        if ((timeout != 0xffffffff) &&\n           ((timeout == 0 || (delay = get_current_tick(), timeout < (uint)(delay - start_time))))) {\n          input_params[10] = (uint *)((uint)input_params[10] | 4);\n          *(undefined *)(input_params + 9) = 0;\n          return 3;\n        }\n      }\nLAB_08001de2:\n      **input_params = 0xffffffed;\n      input_params[10] = (uint *)((uint)input_params[10] | 0x200);\n      if (((*input_params)[2] & 0xe0000) == 0xe0000) {\n        if (input_params[3] == (uint *)0x0) {\n          input_params[10] = (uint *)((uint)input_params[10] & 0xfffffeff);\n          if (((uint)input_params[10] & 0x1000) == 0) {\n            input_params[10] = (uint *)((uint)input_params[10] | 1);\n            result = 0;\n          }\n          else {\n            result = 0;\n          }\n        }\n        else {\n          result = 0;\n        }\n      }\n      else {\n        result = 0;\n      }\n    }\n  }\n  else {\n    input_params[10] = (uint *)((uint)input_params[10] | 0x20);\n    *(undefined *)(input_params + 9) = 0;\n    result = 1;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08001cd0": "calculate_delay_08001cd0",
                "param_1": "input_params",
                "param_2": "timeout",
                "local_1c": "counter",
                "iVar1": "start_time",
                "uVar2": "periph_freq",
                "iVar3": "delay",
                "uVar4": "result",
                "puVar5": "data",
                "uVar6": "calculated_value",
                "HAL_GetTick": "get_current_tick",
                "HAL_RCCEx_GetPeriphCLKFreq": "get_peripheral_clock_frequency"
            },
            "calling": [
                "FUN_08004a4c"
            ],
            "called": [
                "FUN_08001cc4",
                "FUN_08003da4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08001cd0": {
                    "16": "calculate_delay",
                    "2": "calculate_timing",
                    "1": "calculate_result"
                },
                "param_1": {
                    "1": "input_data",
                    "3": "input_array",
                    "2": "input_values",
                    "6": "input_params"
                },
                "param_2": {
                    "3": "max_delay",
                    "1": "parameter_value",
                    "24": "timeout"
                },
                "local_1c": {
                    "1": "current_duration",
                    "15": "counter",
                    "10": "current_delay"
                },
                "iVar1": {
                    "1": "elapsed_time",
                    "9": "start_tick",
                    "18": "start_time",
                    "2": "tick_start"
                },
                "uVar2": {
                    "3": "clock_frequency",
                    "7": "clock_freq",
                    "4": "frequency",
                    "2": "periph_clk_freq",
                    "8": "periph_freq",
                    "1": "clk_freq"
                },
                "iVar3": {
                    "2": "increment",
                    "1": "time_diff",
                    "4": "elapsed_time",
                    "5": "delay"
                },
                "uVar4": {
                    "25": "result",
                    "5": "return_value"
                },
                "puVar5": {
                    "3": "ptr_data",
                    "1": "input_params_at_index",
                    "2": "ptr"
                },
                "uVar6": {
                    "1": "adjusted_delay",
                    "2": "total_delay",
                    "3": "calculated_delay",
                    "5": "calculated_value",
                    "4": "delay"
                },
                "HAL_GetTick": {
                    "1": "get_current_tick"
                },
                "HAL_RCCEx_GetPeriphCLKFreq": {
                    "1": "get_peripheral_clock_frequency"
                }
            }
        },
        "FUN_08001e40": {
            "entrypoint": "0x08001e40",
            "current_name": "get_offset_value_08001e40",
            "code": "\nundefined4 get_offset_value_08001e40(int *offset_pointer)\n\n{\n  return *(undefined4 *)(*offset_pointer + 0x4c);\n}\n\n",
            "renaming": {
                "FUN_08001e40": "get_offset_value_08001e40",
                "param_1": "offset_pointer"
            },
            "calling": [
                "FUN_08004a4c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08001e40": {
                    "16": "get_offset_value",
                    "1": "get_value_from_offset",
                    "4": "get_value_at_offset"
                },
                "param_1": {
                    "1": "offset_list",
                    "2": "array",
                    "3": "offset_ptr",
                    "8": "offset_pointer",
                    "6": "input_array",
                    "5": "input_pointer"
                },
                "*param_1": {
                    "1": "input_array_value",
                    "3": "offset_value",
                    "2": "dereferenced_input_pointer"
                },
                "*(undefined4 *)(*param_1 + 0x4c)": {
                    "1": "offset_value_at_address",
                    "3": "offset_value"
                },
                "0x4c": {
                    "1": "offset_constant"
                }
            }
        },
        "FUN_08001e48": {
            "entrypoint": "0x08001e48",
            "current_name": "update_config_08001e48",
            "code": "\nundefined4 update_config_08001e48(int *param_array,uint *values)\n\n{\n  undefined4 result;\n  uint index;\n  int counter;\n  \n  if (*(char *)(param_array + 9) == '\\x01') {\n    result = 2;\n  }\n  else {\n    *(undefined *)(param_array + 9) = 1;\n    index = shift_index;\n    if (index < 7) {\n      index = index * 5 - 5;\n      *(uint *)(*param_array + 0x34) =\n           *values << (index & 0xff) | *(uint *)(*param_array + 0x34) & ~(0x1f << (index & 0xff));\n    }\n    else if (index < 0xd) {\n      index = index * 5 - 0x23;\n      *(uint *)(*param_array + 0x30) =\n           *values << (index & 0xff) | *(uint *)(*param_array + 0x30) & ~(0x1f << (index & 0xff));\n    }\n    else {\n      index = index * 5 - 0x41;\n      *(uint *)(*param_array + 0x2c) =\n           *values << (index & 0xff) | *(uint *)(*param_array + 0x2c) & ~(0x1f << (index & 0xff));\n    }\n    index = *values;\n    if (index < 10) {\n      *(uint *)(*param_array + 0x10) =\n           values[2] << (index * 3 & 0xff) |\n           *(uint *)(*param_array + 0x10) & ~(7 << (index * 3 & 0xff));\n    }\n    else {\n      index = index * 3 - 0x1e;\n      *(uint *)(*param_array + 0xc) =\n           values[2] << (index & 0xff) | *(uint *)(*param_array + 0xc) & ~(7 << (index & 0xff));\n    }\n    if (*values - 0x10 < 2) {\n      if (*param_array == 0x40012400) {\n        if ((register_value & 0x800000) == 0) {\n          register_value = register_value | 0x800000;\n          if (*values == 0x10) {\n            for (counter = (DAT_20000084 / 1000000) * 10; counter != 0; counter = counter + -1) {\n            }\n            result = 0;\n          }\n          else {\n            result = 0;\n          }\n        }\n        else {\n          result = 0;\n        }\n      }\n      else {\n        param_array[10] = param_array[10] | 0x20;\n        result = 1;\n      }\n    }\n    else {\n      result = 0;\n    }\n    *(undefined *)(param_array + 9) = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08001e48": "update_config_08001e48",
                "param_1": "param_array",
                "param_2": "values",
                "local_c": "counter",
                "uVar1": "result",
                "uVar2": "index",
                "uRam40012408": "register_value",
                "param_2[1]": "shift_index"
            },
            "calling": [
                "FUN_08004a4c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08001e48": {
                    "7": "update_config",
                    "2": "update_registers",
                    "5": "update_configuration",
                    "4": "update_parameters"
                },
                "param_1": {
                    "3": "settings",
                    "1": "settings_pointer",
                    "6": "param_array",
                    "5": "config_ptr",
                    "2": "configuration"
                },
                "param_2": {
                    "2": "data_array",
                    "1": "config_data",
                    "3": "data_ptr",
                    "13": "values"
                },
                "local_c": {
                    "5": "loop_counter",
                    "7": "count",
                    "2": "temp_var",
                    "15": "counter",
                    "1": "delay"
                },
                "uVar1": {
                    "1": "return_val",
                    "17": "result",
                    "8": "return_value"
                },
                "uVar2": {
                    "2": "shift_value",
                    "1": "value_index",
                    "6": "value",
                    "12": "index"
                },
                "*(char *)(param_1 + 9)": {
                    "2": "flag",
                    "1": "config_flag"
                },
                "*(undefined *)(param_1 + 9)": {
                    "2": "flag",
                    "1": "config_flag"
                },
                "uRam40012408": {
                    "2": "register_value",
                    "1": "ram_value_a"
                },
                "0x40012400": {
                    "1": "constant_value"
                },
                "DAT_20000084": {
                    "1": "constant_value"
                },
                "param_2[1]": {
                    "1": "temp_value_1"
                },
                "*param_1": {
                    "1": "base_address"
                },
                "*(uint *)(*param_1 + 0x34)": {
                    "1": "config_value_a"
                },
                "0x1f": {
                    "1": "bitmask3"
                },
                "*(uint *)(*param_1 + 0x30)": {
                    "1": "param_1[0x30]"
                },
                "*(uint *)(*param_1 + 0x2c)": {
                    "1": "register_array[0x2c]"
                },
                "*(uint *)(*param_1 + 0x10)": {
                    "1": "memory_location4"
                },
                "7": {
                    "1": "bitmask5"
                },
                "*(uint *)(*param_1 + 0xc)": {
                    "1": "param_1[0xc]"
                },
                "param_2 - 0x10": {
                    "1": "difference"
                },
                "0x800000": {
                    "1": "bitmask6"
                },
                "*param_2": {
                    "1": "input_value"
                },
                "0x10": {
                    "1": "comparison_value"
                },
                "1": {
                    "1": "set_flag"
                },
                "DAT_20000084 / 1000000": {
                    "1": "constant_value"
                },
                "<original_function_name>": {
                    "1": "reverse_bits_and_flags"
                },
                "<param_1>": {
                    "1": "params"
                },
                "<param_2>": {
                    "1": "values"
                },
                "<local_c>": {
                    "1": "counter"
                },
                "<uVar1>": {
                    "1": "result"
                },
                "<uVar2>": {
                    "1": "shift_amount"
                }
            }
        },
        "FUN_08001f80": {
            "entrypoint": "0x08001f80",
            "current_name": "get_offset_value_08001f80",
            "code": "\nundefined4 get_offset_value_08001f80(int base_address)\n\n{\n  return *(undefined4 *)(base_address + 0x28);\n}\n\n",
            "renaming": {
                "FUN_08001f80": "get_offset_value_08001f80",
                "param_1": "base_address"
            },
            "calling": [
                "FUN_08004a4c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08001f80": {
                    "9": "get_offset_value",
                    "1": "get_return_value",
                    "6": "get_pointer_value",
                    "3": "get_value_at_offset",
                    "5": "get_value_from_offset"
                },
                "param_1": {
                    "3": "address",
                    "12": "base_address",
                    "1": "input_pointer",
                    "10": "offset",
                    "2": "pointer_address"
                },
                "PTR_08004f80": {
                    "1": "pointer_value"
                },
                "* (undefined4 *)(param_1 + 0x28)": {
                    "1": "value"
                },
                "<original_function_name>": {
                    "1": "get_value_from_offset"
                },
                "<original_variable_name_1>": {
                    "1": "<new_variable_name_1>"
                },
                "*(undefined4 *)(param_1 + 0x28)": {
                    "1": "get_offset_value_with_offset"
                },
                "<original_variable_name>": {
                    "1": "<improved_variable_name>"
                },
                "param_1 + 0x28": {
                    "1": "pointer_address"
                },
                "*PTR_address+0x28": {
                    "1": "target_value"
                }
            }
        },
        "FUN_08001f84": {
            "entrypoint": "0x08001f84",
            "current_name": "initialize_device_08001f84",
            "code": "\nundefined4 initialize_device_08001f84(int *data,undefined4 param)\n\n{\n  int current_tick;\n  undefined4 result;\n  int device_address;\n  uint delay;\n  \n  device_address = *data;\n  if ((*(uint *)(device_address + 8) & 1) == 0) {\n    *(uint *)(device_address + 8) = *(uint *)(device_address + 8) | 1;\n    for (delay = DAT_20000084 / 1000000; delay != 0; delay = delay - 1) {\n    }\n    device_address = get_tick(data,param,DAT_20000084 * 0x431bde83);\n    do {\n      if ((*(uint *)(*data + 8) & 1) != 0) {\n        return 0;\n      }\n      current_tick = get_tick();\n    } while ((uint)(current_tick - device_address) < 3);\n    flag1 = flag1 | 0x10;\n    flag2 = flag2 | 1;\n    *(undefined *)(data + 9) = 0;\n    result = 1;\n  }\n  else {\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08001f84": "initialize_device_08001f84",
                "param_1": "data",
                "param_2": "param",
                "iVar1": "current_tick",
                "iVar3": "device_address",
                "uVar2": "result",
                "local_14": "delay",
                "HAL_GetTick": "get_tick",
                "param_1[10]": "flag1",
                "param_1[0xb]": "flag2"
            },
            "calling": [
                "FUN_08002384",
                "FUN_08002004"
            ],
            "called": [
                "FUN_08001cc4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08001f84": {
                    "2": "toggle_flag",
                    "1": "update_data",
                    "9": "initialize_device",
                    "5": "perform_operation"
                },
                "param_1": {
                    "1": "input_param",
                    "5": "data",
                    "2": "device_data",
                    "3": "device_params",
                    "4": "input_array"
                },
                "param_2": {
                    "2": "value",
                    "4": "param2",
                    "1": "config_param",
                    "3": "input_value",
                    "9": "param"
                },
                "iVar1": {
                    "11": "current_tick",
                    "3": "tick_value",
                    "1": "tick_before",
                    "2": "tick1",
                    "4": "current_time",
                    "5": "tick_start"
                },
                "iVar3": {
                    "2": "array_value",
                    "4": "device_address",
                    "1": "input_param_value",
                    "3": "data_value"
                },
                "uVar2": {
                    "1": "success_flag",
                    "12": "result",
                    "5": "return_value"
                },
                "local_14": {
                    "5": "delay_counter",
                    "1": "delay_iteration",
                    "2": "iteration_count",
                    "3": "delay_count",
                    "6": "delay"
                },
                "HAL_GetTick": {
                    "2": "get_current_tick",
                    "3": "get_tick_count",
                    "5": "get_tick"
                },
                "param_1[10]": {
                    "4": "flag1"
                },
                "param_1[0xb]": {
                    "4": "flag2"
                },
                "FUN_08001cc4": {
                    "1": "initialize_device"
                }
            }
        },
        "FUN_08002004": {
            "entrypoint": "0x08002004",
            "current_name": "initialize_adc_08002004",
            "code": "\n\n\nint initialize_adc_08002004(int *adc_params)\n\n{\n  int result;\n  undefined4 *base_address;\n  int value;\n  \n  if (*(char *)(adc_params + 9) != '\\x01') {\n    *(undefined *)(adc_params + 9) = 1;\n    result = enable_adc();\n    if (result == 0) {\n      param_1_field_10 = param_1_field_10 & 0xfffffcfeU | 0x100;\n      base_address = (undefined4 *)*adc_params;\n      if ((base_address == (undefined4 *)0x40012800) && ((_DAT_40012404 & 0xf0000) != 0)) {\n        param_1_field_10 = param_1_field_10 | 0x100000;\n        if ((_DAT_40012404 & 0x400) != 0) {\n          param_1_field_10 = param_1_field_10 & 0xffffcfffU | 0x1000;\n        }\n      }\n      else {\n        param_1_field_10 = param_1_field_10 & 0xffefffff;\n        if ((ptr[1] & 0x400) != 0) {\n          param_1_field_10 = param_1_field_10 & 0xffffcfffU | 0x1000;\n        }\n      }\n      if ((param_1_field_10 & 0x1000U) == 0) {\n        param_1_field_11 = 0;\n      }\n      else {\n        param_1_field_11 = param_1_field_11 & 0xfffffff9;\n      }\n      *(undefined *)(adc_params + 9) = 0;\n      *base_address = 0xfffffffd;\n      value = *adc_params;\n      if (((*(uint *)(value + 8) & 0xe0000) == 0xe0000) &&\n         ((value != 0x40012800 || ((_DAT_40012404 & 0xf0000) == 0)))) {\n        *(uint *)(value + 8) = *(uint *)(value + 8) | 0x500000;\n      }\n      else {\n        *(uint *)(value + 8) = *(uint *)(value + 8) | 0x100000;\n      }\n    }\n    else {\n      *(undefined *)(adc_params + 9) = 0;\n    }\n    return result;\n  }\n  return 2;\n}\n\n",
            "renaming": {
                "FUN_08002004": "initialize_adc_08002004",
                "param_1": "adc_params",
                "iVar1": "result",
                "puVar2": "base_address",
                "iVar3": "value",
                "ADC_Enable": "enable_adc",
                "param_1[10]": "param_1_field_10",
                "param_1[0xb]": "param_1_field_11",
                "puVar2[1]": "ptr[1]"
            },
            "calling": [
                "FUN_08004a4c"
            ],
            "called": [
                "FUN_08001f84"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08002004": {
                    "16": "initialize_adc",
                    "1": "initialize_adc_settings",
                    "2": "initialize_device",
                    "7": "enable_adc"
                },
                "param_1": {
                    "1": "input_array",
                    "6": "adc_data",
                    "3": "adc_config",
                    "8": "adc_params",
                    "2": "adc_settings",
                    "5": "parameters"
                },
                "iVar1": {
                    "1": "adc_enable_status",
                    "16": "result",
                    "3": "status",
                    "5": "enable_result",
                    "2": "adc_status"
                },
                "puVar2": {
                    "1": "base_addr",
                    "3": "ptr",
                    "2": "param_pointer",
                    "8": "base_address"
                },
                "iVar3": {
                    "1": "memory_value",
                    "5": "adc_value",
                    "4": "address",
                    "6": "value"
                },
                "FUN_08001f84": {
                    "1": "update_parameters",
                    "6": "configure_adc"
                },
                "ADC_Enable": {
                    "1": "enable_adc_subfunction",
                    "4": "enable_adc",
                    "2": "enable_adc_function"
                },
                "ADC_ReadStatus": {
                    "1": "read_adc_status"
                },
                "_DAT_40012404": {
                    "1": "status_register"
                },
                "param_1[10]": {
                    "1": "config_value"
                },
                "param_1[9]": {
                    "1": "param_value[9]"
                },
                "param_1[0xb]": {
                    "1": "param_1_field_11"
                },
                "puVar2[1]": {
                    "1": "param_ptr32[1]"
                },
                "param_2": {
                    "2": "value",
                    "1": "param_2"
                },
                "DAT_40012404": {
                    "1": "constant_value"
                },
                "(char *)(param_1 + 9)": {
                    "1": "char_pointer"
                },
                "undefined *(param_1 + 9)": {
                    "1": "undefined_pointer"
                },
                "puVar2 == (undefined4 *)0x40012800": {
                    "1": "pu_var2_is_0x40012800"
                },
                "param_1 + 9": {
                    "1": "status"
                },
                "*(char *)(parameters + 9)": {
                    "1": "status_value"
                },
                "*(undefined *)(parameters + 9)": {
                    "1": "status_value"
                },
                "*(undefined4 *)*parameters": {
                    "1": "config_value_ptr"
                },
                "*puVar2": {
                    "1": "config_value_ptr"
                },
                "*(uint *)(data + 8)": {
                    "1": "data_value"
                },
                "*(uint *)(data + 8) & 0xe0000": {
                    "1": "data_check"
                },
                "ADC_Disable": {
                    "1": "disable_adc"
                }
            }
        },
        "FUN_080020f0": {
            "entrypoint": "0x080020f0",
            "current_name": "update_flags_080020f0",
            "code": "\nundefined4 update_flags_080020f0(int *data)\n\n{\n  int current_tick;\n  int value;\n  \n  value = *data;\n  if ((*(uint *)(value + 8) & 1) == 0) {\n    return 0;\n  }\n  *(uint *)(value + 8) = *(uint *)(value + 8) & 0xfffffffe;\n  value = get_current_tick();\n  do {\n    if ((*(uint *)(*data + 8) & 1) == 0) {\n      return 0;\n    }\n    current_tick = get_current_tick();\n  } while ((uint)(current_tick - value) < 3);\n  flag_value = flag_value | 0x10;\n  flag_value2 = flag_value2 | 1;\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_080020f0": "update_flags_080020f0",
                "iVar2": "value",
                "iVar1": "current_tick",
                "param_1": "data",
                "HAL_GetTick": "get_current_tick",
                "param_1[10]": "flag_value",
                "param_1[0xb]": "flag_value2"
            },
            "calling": [
                "FUN_0800213c",
                "FUN_08002384",
                "FUN_0800224c",
                "FUN_08002348"
            ],
            "called": [
                "FUN_08001cc4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080020f0": {
                    "1": "check_and_modify_parameters",
                    "2": "update_flag_and_status",
                    "7": "update_flags"
                },
                "*param_1": {
                    "1": "array"
                },
                "iVar2": {
                    "1": "status_value",
                    "2": "data_value",
                    "3": "initial_tick"
                },
                "iVar1": {
                    "16": "current_tick",
                    "1": "value2",
                    "9": "current_time",
                    "2": "tick_start"
                },
                "param_1": {
                    "6": "data",
                    "3": "array",
                    "2": "flag_array",
                    "1": "parameters",
                    "5": "input_array"
                },
                "HAL_GetTick": {
                    "8": "get_current_tick",
                    "2": "get_tick_value"
                },
                "param_1[10]": {
                    "1": "flag_value"
                },
                "param_1[0xb]": {
                    "1": "flag_value2"
                },
                "*(uint *)(iVar2 + 8)": {
                    "1": "flag_value"
                },
                "*(uint *)(*param_1 + 8)": {
                    "1": "flag_value_2"
                }
            }
        },
        "FUN_0800213c": {
            "entrypoint": "0x0800213c",
            "current_name": "initialize_adc_0800213c",
            "code": "\nundefined4 initialize_adc_0800213c(int *adc_params)\n\n{\n  int conversion_result;\n  uint mask1;\n  uint mask2;\n  \n  if (adc_params == (int *)0x0) {\n    return 1;\n  }\n  if (adc_data_struct.flag == 0) {\n    adc_data_struct.error_flag = 0;\n    *(undefined *)(adc_params + 9) = 0;\n    initialize_adc_0800213c_peripherals();\n  }\n  conversion_result = stop_and_disable_conversion(adc_params);\n  if (((adc_data_struct.flag & 0x10U) == 0) && (conversion_result == 0)) {\n    adc_data_struct.flag = adc_data_struct.flag & 0xffffeefdU | 2;\n    mask1 = adc_data_struct.field_1 | adc_data_struct.field_7 | adc_data_struct.field_3 << 1;\n    if (adc_data_struct.field_2 == 0x100) {\n      mask2 = 0x100;\n    }\n    else {\n      mask2 = 0;\n      if (adc_data_struct.field_2 == 1) {\n        mask2 = 0x100;\n      }\n    }\n    if (adc_data_struct.field_5 == 1) {\n      if (adc_data_struct.field_3 == 0) {\n        mask2 = mask2 | (adc_data_struct.field_6 + -1) * 0x2000 | 0x800;\n      }\n      else {\n        adc_data_struct.flag = adc_data_struct.flag | 0x20;\n        adc_data_struct.error_flag = adc_data_struct.error_flag | 1;\n      }\n    }\n    *(uint *)(*adc_params + 4) = mask2 | *(uint *)(*adc_params + 4) & 0xffff16ff;\n    *(uint *)(*adc_params + 8) = *(uint *)(*adc_params + 8) & 0xffe1f7fd | mask1;\n    if ((adc_data_struct.field_2 == 0x100) || (adc_data_struct.field_2 == 1)) {\n      mask2 = (adc_data_struct.field_4 + -1) * 0x100000;\n    }\n    else {\n      mask2 = 0;\n    }\n    *(uint *)(*adc_params + 0x2c) = mask2 | *(uint *)(*adc_params + 0x2c) & 0xff0fffff;\n    if (mask1 != (*(uint *)(*adc_params + 8) & 0xff1f0efe)) {\n      adc_data_struct.flag = adc_data_struct.flag & 0xffffffedU | 0x10;\n      adc_data_struct.error_flag = adc_data_struct.error_flag | 1;\n      return 1;\n    }\n    adc_data_struct.error_flag = 0;\n    adc_data_struct.flag = adc_data_struct.flag & 0xfffffffcU | 1;\n    return 0;\n  }\n  adc_data_struct.flag = adc_data_struct.flag | 0x10;\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_0800213c": "initialize_adc_0800213c",
                "param_1": "adc_params",
                "iVar1": "conversion_result",
                "uVar2": "mask1",
                "uVar3": "mask2",
                "HAL_ADC_MspInit": "initialize_adc_peripherals",
                "ADC_ConversionStop_Disable": "stop_and_disable_conversion",
                "param_1[10]": "adc_data_struct.flag",
                "param_1[0xb]": "adc_data_struct.error_flag",
                "param_1[1]": "adc_data_struct.field_1",
                "param_1[2]": "adc_data_struct.field_2",
                "param_1[3]": "adc_data_struct.field_3",
                "param_1[4]": "adc_data_struct.field_4",
                "param_1[5]": "adc_data_struct.field_5",
                "param_1[6]": "adc_data_struct.field_6",
                "param_1[7]": "adc_data_struct.field_7"
            },
            "calling": [
                "FUN_08004a4c"
            ],
            "called": [
                "FUN_080020f0",
                "FUN_08004974"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800213c": {
                    "1": "perform_adc_conversion",
                    "26": "initialize_adc",
                    "2": "configure_adc"
                },
                "param_1": {
                    "1": "config_params",
                    "2": "adc_data",
                    "6": "adc_config",
                    "17": "adc_params"
                },
                "iVar1": {
                    "1": "stop_status",
                    "3": "result",
                    "8": "stop_result",
                    "13": "conversion_result"
                },
                "uVar2": {
                    "1": "combined_flags",
                    "3": "var1",
                    "2": "flags"
                },
                "uVar3": {
                    "3": "mask2",
                    "1": "conditional_result",
                    "2": "config_value"
                },
                "HAL_ADC_MspInit": {
                    "1": "configure_adc",
                    "3": "initialize_adc_peripheral",
                    "6": "initialize_adc_peripherals"
                },
                "ADC_ConversionStop_Disable": {
                    "1": "stop_conversion_disable",
                    "3": "stop_and_disable_conversion",
                    "2": "disable_adc_conversion_stop"
                },
                "FUN_080020f0": {
                    "1": "stop_conversion_enable"
                },
                "FUN_08004974": {
                    "2": "configure_adc",
                    "1": "set_adc_registers"
                },
                "*param_1": {
                    "1": "adc_data_struct_pointer"
                },
                "param_2": {
                    "1": "config_value"
                },
                "*(undefined *)(param_1 + 9)": {
                    "1": "initialized_flag"
                },
                "*(uint *)(*param_1 + 4)": {
                    "1": "register_a"
                },
                "*(uint *)(*param_1 + 8)": {
                    "1": "adc_params.register2"
                },
                "*(uint *)(*param_1 + 0x2c)": {
                    "1": "config->register3"
                },
                "param_1[10]": {
                    "1": "config->options"
                },
                "param_1[0xb]": {
                    "1": "adc_params[0xb]"
                },
                "param_1[1]": {
                    "1": "adc_data_struct.field_1"
                },
                "param_1[2]": {
                    "1": "adc_data_struct.field_2"
                },
                "param_1[3]": {
                    "1": "config->value3"
                },
                "param_1[4]": {
                    "1": "adc_params[4]"
                },
                "param_1[5]": {
                    "1": "adc_data_struct.field_5"
                },
                "param_1[6]": {
                    "1": "adc_params[6]"
                },
                "param_1[7]": {
                    "1": "adc_data_struct.field_7"
                },
                "*(undefined *)param_1[9]": {
                    "1": "config->disable"
                },
                "param_1[11]": {
                    "1": "config->flag"
                },
                "*(param_1 + 6)": {
                    "1": "adc_params->config_value"
                },
                "*(param_1 + 11)": {
                    "1": "adc_params->error"
                },
                "*(param_1 + 10)": {
                    "1": "adc_params->adc_flags"
                },
                "*(param_1 + 1)": {
                    "1": "adc_params->param1"
                },
                "*(param_1 + 7)": {
                    "1": "adc_params->param2"
                },
                "*(param_1 + 3)": {
                    "1": "adc_params->param3"
                },
                "*(param_1 + 2)": {
                    "1": "adc_params->param4"
                },
                "*(param_1 + 5)": {
                    "1": "adc_params->param5"
                },
                "*(param_1 + 4)": {
                    "1": "adc_params->param6"
                },
                "param_1 + 10": {
                    "1": "adc_params[10]"
                },
                "param_1 + 9": {
                    "1": "adc_params[9]"
                },
                "param_1 + 4": {
                    "1": "adc_params[12]"
                },
                "param_1 + 8": {
                    "1": "adc_params[11]"
                },
                "param_1 + 0x2c": {
                    "1": "adc_params[15]"
                }
            }
        },
        "FUN_0800224c": {
            "entrypoint": "0x0800224c",
            "current_name": "stop_adc_conversion_0800224c",
            "code": "\nint stop_adc_conversion_0800224c(int *adc_params)\n\n{\n  int result;\n  \n  if (adc_params == (int *)0x0) {\n    result = 1;\n  }\n  else {\n    adc_config[10] = adc_config[10] | 2;\n    result = disable_adc_conversion_stop();\n    if (result == 0) {\n      *(undefined4 *)*adc_params = 0xffffffe0;\n      *(uint *)(*adc_params + 4) = *(uint *)(*adc_params + 4) & 0xff3f0000;\n      *(uint *)(*adc_params + 8) = *(uint *)(*adc_params + 8) & 0xff0106f0;\n      *(uint *)(*adc_params + 0xc) = *(uint *)(*adc_params + 0xc) & 0xff000000;\n      *(uint *)(*adc_params + 0x10) = *(uint *)(*adc_params + 0x10) & 0xc0000000;\n      *(uint *)(*adc_params + 0x14) = *(uint *)(*adc_params + 0x14) & 0xfffff000;\n      *(uint *)(*adc_params + 0x18) = *(uint *)(*adc_params + 0x18) & 0xfffff000;\n      *(uint *)(*adc_params + 0x1c) = *(uint *)(*adc_params + 0x1c) & 0xfffff000;\n      *(uint *)(*adc_params + 0x20) = *(uint *)(*adc_params + 0x20) & 0xfffff000;\n      *(uint *)(*adc_params + 0x24) = *(uint *)(*adc_params + 0x24) & 0xfffff000;\n      *(uint *)(*adc_params + 0x28) = *(uint *)(*adc_params + 0x28) & 0xfffff000;\n      *(uint *)(*adc_params + 0x2c) = *(uint *)(*adc_params + 0x2c) & 0xff000000;\n      *(uint *)(*adc_params + 0x2c) = *(uint *)(*adc_params + 0x2c) & 0xff000000;\n      *(uint *)(*adc_params + 0x30) = *(uint *)(*adc_params + 0x30) & 0xc0000000;\n      *(uint *)(*adc_params + 0x34) = *(uint *)(*adc_params + 0x34) & 0xc0000000;\n      *(uint *)(*adc_params + 0x38) = *(uint *)(*adc_params + 0x38) & 0xffc00000;\n      *(uint *)(*adc_params + 0x38) = *(uint *)(*adc_params + 0x38) & 0xffc00000;\n      deinitialize_adc(adc_params);\n      adc_config[0xb] = 0;\n      adc_config[10] = 0;\n    }\n    *(undefined *)(adc_params + 9) = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_0800224c": "stop_adc_conversion_0800224c",
                "param_1": "adc_params",
                "iVar1": "result",
                "ADC_ConversionStop_Disable": "disable_adc_conversion_stop",
                "HAL_ADC_MspDeInit": "deinitialize_adc",
                "param_1[10]": "adc_config[10]",
                "param_1[0xb]": "adc_config[0xb]"
            },
            "calling": [
                "FUN_08004a4c"
            ],
            "called": [
                "FUN_080049f0",
                "FUN_080020f0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800224c": {
                    "1": "update_adc_settings",
                    "4": "disable_adc_conversion",
                    "2": "reset_adc"
                },
                "param_1": {
                    "1": "param",
                    "2": "input_array",
                    "5": "adc_config",
                    "8": "adc_params",
                    "4": "adc_data"
                },
                "iVar1": {
                    "30": "result",
                    "1": "success"
                },
                "ADC_ConversionStop_Disable": {
                    "1": "stop_adc_conversion",
                    "9": "disable_adc_conversion_stop"
                },
                "HAL_ADC_MspDeInit": {
                    "1": "deinitialize_adc_msp",
                    "2": "deinitialize_hal_adc",
                    "10": "deinitialize_adc"
                },
                "FUN_080049f0": {
                    "1": "initialize_adc_data",
                    "2": "stop_adc_conversion"
                },
                "FUN_080020f0": {
                    "1": "configure_adc_pin",
                    "3": "adc_conversion_stop_disable",
                    "2": "stop_adc_conversion"
                },
                "param_1[10]": {
                    "1": "adc_config[10]"
                },
                "param_1[0xb]": {
                    "1": "adc_config[0xb]"
                },
                "getParamValue": {
                    "1": "adc_conversion_stop_disable"
                }
            }
        },
        "FUN_08002348": {
            "entrypoint": "0x08002348",
            "current_name": "check_and_modify_status_08002348",
            "code": "\nint check_and_modify_status_08002348(int device_address)\n\n{\n  int result;\n  \n  if (*(char *)(device_address + 0x24) == '\\x01') {\n    return 2;\n  }\n  *(undefined *)(device_address + 0x24) = 1;\n  result = disable_adc_conversion_stop;\n  if (result == 0) {\n    *(unsigned_integer *)(device_address + 0x28) = *(unsigned_integer *)(device_address + 0x28) & 0xffffeefe | 1;\n  }\n  *(undefined *)(device_address + 0x24) = 0;\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08002348": "check_and_modify_status_08002348",
                "param_1": "device_address",
                "iVar1": "result",
                "ADC_ConversionStop_Disable": "disable_adc_conversion_stop",
                "uint": "unsigned_integer",
                "ADC_ConversionStop_Disable()": "disable_adc_conversion_stop"
            },
            "calling": [
                "FUN_08004a4c"
            ],
            "called": [
                "FUN_080020f0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08002348": {
                    "1": "update_adc_settings",
                    "2": "check_and_set_flag"
                },
                "param_1": {
                    "2": "input_param",
                    "5": "device_address",
                    "1": "device_ptr",
                    "4": "data_ptr",
                    "3": "input_data"
                },
                "iVar1": {
                    "5": "conversion_status",
                    "1": "stop_status",
                    "4": "stop_result",
                    "12": "result",
                    "7": "conversion_result"
                },
                "ADC_ConversionStop_Disable": {
                    "1": "disable_conversion",
                    "4": "stop_adc_conversion",
                    "6": "disable_adc_conversion_stop"
                },
                "*(char *)(param_1 + 0x24)": {
                    "1": "adc_status"
                },
                "*(undefined *)(param_1 + 0x24)": {
                    "1": "data_flag_ptr"
                },
                "*(uint *)(param_1 + 0x28)": {
                    "1": "adc_value"
                },
                "0xffffeefe": {
                    "1": "adc_value_mask"
                },
                "'\\x01'": {
                    "1": "adc_enabled"
                },
                "1": {
                    "1": "status_flag_true"
                },
                "FUN_080020f0": {
                    "1": "adc_conversion_stop_disable"
                },
                "uint": {
                    "1": "unsigned_integer"
                },
                "FUR_08002348": {
                    "1": "check_adc_conversion"
                },
                "* (char *)((int)dataPtr + 0x24)": {
                    "1": "status_flag"
                },
                "* (undefined *)((int)dataPtr + 0x24)": {
                    "1": "status_flag_ptr"
                },
                "ADC_ConversionStop_Disable()": {
                    "1": "disable_adc_conversion_stop"
                },
                "*(uint *)((int)dataPtr + 0x28)": {
                    "1": "data_value"
                },
                "*(uint *)((int)dataPtr + 0x28) & 0xffffeefe | 1": {
                    "1": "updated_data_value"
                }
            }
        },
        "FUN_08002384": {
            "entrypoint": "0x08002384",
            "current_name": "initialize_adc_08002384",
            "code": "\nint initialize_adc_08002384(int *adc_params)\n\n{\n  uint periph_freq;\n  int stop_result;\n  uint clock_freq;\n  int start_time;\n  int current_time;\n  int loop_counter;\n  \n  if (*(char *)(adc_params + 9) == '\\x01') {\n    return 2;\n  }\n  *(undefined *)(adc_params + 9) = 1;\n  stop_result = ADC_ConversionStop_Disable();\n  if (stop_result == 0) {\n    adc_params[10] = adc_params[10] & 0xffffeefdU | 2;\n    periph_freq = DAT_20000084;\n    clock_freq = HAL_RCCEx_GetPeriphCLKFreq(2);\n    for (loop_counter = periph_freq / clock_freq << 1; loop_counter != 0; loop_counter = loop_counter + -1) {\n    }\n    ADC_Enable(adc_params);\n    *(uint *)(*adc_params + 8) = *(uint *)(*adc_params + 8) | 8;\n    start_time = HAL_GetTick();\n    while (current_time = *adc_params, (*(uint *)(current_time + 8) & 8) != 0) {\n      current_time = HAL_GetTick();\n      if (10 < (uint)(current_time - start_time)) {\n        adc_params[10] = adc_params[10] & 0xffffffedU | 0x10;\n        *(undefined *)(adc_params + 9) = 0;\n        return 1;\n      }\n    }\n    *(uint *)(current_time + 8) = *(uint *)(current_time + 8) | 4;\n    start_time = HAL_GetTick();\n    while ((*(uint *)(*adc_params + 8) & 4) != 0) {\n      current_time = HAL_GetTick();\n      if (10 < (uint)(current_time - start_time)) {\n        adc_params[10] = adc_params[10] & 0xffffffedU | 0x10;\n        *(undefined *)(adc_params + 9) = 0;\n        return 1;\n      }\n    }\n    adc_params[10] = adc_params[10] & 0xfffffffcU | 1;\n  }\n  *(undefined *)(adc_params + 9) = 0;\n  return stop_result;\n}\n\n",
            "renaming": {
                "FUN_08002384": "initialize_adc_08002384",
                "param_1": "adc_params",
                "uVar1": "periph_freq",
                "iVar2": "stop_result",
                "uVar3": "clock_freq",
                "iVar4": "start_time",
                "iVar5": "current_time",
                "local_14": "loop_counter"
            },
            "calling": [
                "FUN_08004a4c"
            ],
            "called": [
                "FUN_08001cc4",
                "FUN_08001f84",
                "FUN_08003da4",
                "FUN_080020f0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08002384": {
                    "1": "perform_adc_conversion",
                    "23": "initialize_adc",
                    "2": "configure_adc"
                },
                "param_1": {
                    "1": "configuration",
                    "11": "adc_data",
                    "2": "adc_config",
                    "12": "adc_params"
                },
                "uVar1": {
                    "1": "peripheral_clock_frequency",
                    "2": "clock_frequency",
                    "6": "periph_freq",
                    "5": "frequency"
                },
                "iVar2": {
                    "1": "stop_disable_result",
                    "18": "stop_result",
                    "2": "adc_stop_result",
                    "5": "result"
                },
                "uVar3": {
                    "3": "periph_clk_freq",
                    "1": "rcc_frequency",
                    "7": "clock_freq",
                    "4": "adc_freq",
                    "2": "clock_frequency"
                },
                "iVar4": {
                    "5": "tick_start",
                    "15": "start_time",
                    "10": "start_tick"
                },
                "iVar5": {
                    "14": "current_time",
                    "12": "current_tick",
                    "4": "tick_current"
                },
                "local_14": {
                    "16": "loop_counter",
                    "1": "loop_var",
                    "7": "loop_count",
                    "5": "iteration_count"
                },
                "uVar2": {
                    "1": "adc_result"
                }
            }
        },
        "FUN_08002470": {
            "entrypoint": "0x08002470",
            "current_name": "update_register_value_08002470",
            "code": "\n\n\nvoid update_register_value_08002470(uint input_value)\n\n{\n  _DAT_e000ed0c = (input_value & 7) << 8 | _DAT_e000ed0c & 0xf8ff | 0x5fa0000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002470": "update_register_value_08002470",
                "param_1": "input_value"
            },
            "calling": [
                "FUN_08001c88",
                "FUN_08005f5e"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08002470": {
                    "2": "update_control_register",
                    "1": "update_parameters",
                    "4": "update_configuration",
                    "9": "update_register_value"
                },
                "param_1": {
                    "5": "input",
                    "4": "new_value",
                    "1": "configuration",
                    "15": "input_value",
                    "3": "value"
                },
                "_DAT_e000ed0c": {
                    "1": "configuration",
                    "2": "current_value",
                    "4": "register_value"
                },
                "new_variable_name_1": {
                    "1": "new_value"
                },
                "0xf8ff": {
                    "1": "clear_mask"
                },
                "0x5fa0000": {
                    "1": "new_value"
                },
                "DAT_e000ed0c": {
                    "1": "config_value"
                }
            }
        },
        "FUN_08002494": {
            "entrypoint": "0x08002494",
            "current_name": "update_memory_08002494",
            "code": "\n\n\nvoid update_memory_08002494(uint address,uint mask,uint value)\n\n{\n  uint shift_amount;\n  uint remaining_bits;\n  \n  shift_amount = (uint)(_DAT_e000ed0c << 0x15) >> 0x1d;\n  remaining_bits = 7 - shift_amount;\n  if (3 < remaining_bits) {\n    remaining_bits = 4;\n  }\n  if (shift_amount + 4 < 7) {\n    shift_amount = 0;\n  }\n  else {\n    shift_amount = shift_amount - 3;\n  }\n  shift_amount = (mask & (1 << (remaining_bits & 0xff)) - 1U) << (shift_amount & 0xff) |\n          (1 << (shift_amount & 0xff)) - 1U & value;\n  if ((int)address < 0) {\n    *(char *)((address & 0xf) + 0xe000ed14) = (char)(shift_amount << 4);\n  }\n  else {\n    *(char *)(address + 0xe000e400) = (char)(shift_amount << 4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002494": "update_memory_08002494",
                "param_1": "address",
                "param_2": "mask",
                "param_3": "value",
                "uVar1": "shift_amount",
                "uVar2": "remaining_bits"
            },
            "calling": [
                "FUN_08005510",
                "FUN_08005568",
                "FUN_08001c3c",
                "FUN_08001b48"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08002494": {
                    "1": "apply_mask_and_store",
                    "2": "update_character",
                    "6": "update_memory"
                },
                "param_1": {
                    "12": "address",
                    "1": "masked_address",
                    "2": "memory_address",
                    "4": "character_index"
                },
                "param_2": {
                    "7": "mask",
                    "2": "bitmask",
                    "1": "bit_values",
                    "3": "value1",
                    "6": "bit_mask"
                },
                "param_3": {
                    "2": "data",
                    "1": "updated_value",
                    "3": "value2",
                    "8": "value"
                },
                "uVar1": {
                    "1": "shifted_value1",
                    "2": "masked_value",
                    "5": "shifted_bits",
                    "15": "shift_amount"
                },
                "uVar2": {
                    "1": "result",
                    "6": "remaining_bits",
                    "2": "num_bits"
                },
                "uVar3": {
                    "1": "mask1"
                },
                "uVar4": {
                    "1": "shifted_bits_adjusted3",
                    "2": "result"
                },
                "(*(char *)((param_1 & 0xf) + 0xe000ed14))": {
                    "1": "char1"
                },
                "(*(char *)(param_1 + 0xe000e400))": {
                    "1": "char2"
                },
                "*(char *)((param_1 & 0xf) + 0xe000ed14)": {
                    "1": "output1"
                },
                "*(char *)(param_1 + 0xe000e400)": {
                    "1": "character_data2"
                },
                "uVar1_new": {
                    "1": "shifted_mask1"
                },
                "uVar1_new_2": {
                    "1": "shifted_mask2"
                },
                "uVar2_new": {
                    "1": "modified_shift_amount"
                },
                "uVar1_new_3": {
                    "1": "masked_value"
                },
                "uVar1 & 0xff": {
                    "1": "shift_amount"
                },
                "uVar2 & 0xff": {
                    "1": "masked_bits"
                },
                "uVar1 + 4 < 7": {
                    "1": "should_reset_shift_amount"
                },
                "uVar1 - 3": {
                    "1": "new_shift_amount"
                },
                "(1 << (uVar2 & 0xff)) - 1U": {
                    "1": "bit_mask1"
                },
                "(1 << (uVar1 & 0xff)) - 1U": {
                    "1": "bit_mask2"
                },
                "(param_2 & (1 << (uVar2 & 0xff)) - 1U) << (uVar1 & 0xff) | (1 << (uVar1 & 0xff)) - 1U & param_3": {
                    "1": "updated_value"
                },
                "(param_1 & 0xf) + 0xe000ed14": {
                    "1": "address1"
                },
                "param_1 + 0xe000e400": {
                    "1": "address2"
                }
            }
        },
        "FUN_080024f8": {
            "entrypoint": "0x080024f8",
            "current_name": "set_bit_080024f8",
            "code": "\nvoid set_bit_080024f8(uvalue bit_index)\n\n{\n  if (-1 < signed_num) {\n    *(value *)((bit_index >> 5) * 4 + -0x1fff1f00) = 1 << (bit_index & 0x1f);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080024f8": "set_bit_080024f8",
                "param_1": "bit_index",
                "int": "value",
                "(int)param_1": "signed_num"
            },
            "calling": [
                "FUN_08005510",
                "FUN_08005568"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080024f8": {
                    "8": "set_bit",
                    "1": "set_bit_in_int_array",
                    "5": "set_bit_in_memory",
                    "3": "set_bit_value",
                    "2": "set_bit_at_index",
                    "7": "set_bit_in_array"
                },
                "param_1": {
                    "1": "num_bits",
                    "14": "bit_index",
                    "2": "position",
                    "10": "index"
                },
                "param_2": {
                    "1": "n/a"
                },
                "PTR_": {
                    "1": "n/a"
                },
                "DAT_": {
                    "1": "n/a"
                },
                "param_1>>5": {
                    "1": "shifted_input"
                },
                "input & 0x1f": {
                    "1": "bit_offset"
                },
                "(-0x1fff1f00 + (shiftedInput * 4))": {
                    "1": "address"
                },
                "1 << bitOffset": {
                    "1": "bit_value"
                },
                "*(int *)((param_1 >> 5) * 4 + -0x1fff1f00)": {
                    "2": "array",
                    "1": "array_address",
                    "3": "bit_array"
                },
                "0x1f": {
                    "1": "bitmask"
                },
                "1 << (param_1 & 0x1f)": {
                    "2": "bit_value",
                    "6": "bit_mask"
                },
                "int": {
                    "1": "int"
                },
                "param_1 >> 5": {
                    "1": "position_shifted"
                },
                "-0x1fff1f00": {
                    "1": "base_address"
                },
                "param_1 & 0x1f": {
                    "2": "bit_offset"
                },
                "(param_1 >> 5) * 4 + -0x1fff1f00": {
                    "1": "address"
                },
                "new_parameter_name_1": {
                    "1": ""
                },
                "new_parameter_name_2": {
                    "1": ""
                },
                "new_parameter_name_n": {
                    "1": ""
                },
                "new_variable_name_1": {
                    "1": ""
                },
                "new_variable_name_2": {
                    "1": ""
                },
                "new_variable_name_n": {
                    "1": ""
                },
                "(int)param_1": {
                    "1": "signed_num"
                },
                "1": {
                    "1": "bit"
                },
                "4": {
                    "1": "int_size"
                },
                "(1 << (position & bitmask))": {
                    "1": "bit_pattern"
                }
            }
        },
        "FUN_08002514": {
            "entrypoint": "0x08002514",
            "current_name": "initialize_memory_08002514",
            "code": "\n\n\nundefined4 initialize_memory_08002514(int value)\n\n{\n  if (value - 1U < 0x1000000) {\n    _DAT_e000e014 = value - 1U;\n    DAT_e000ed23 = 0xf0;\n    _DAT_e000e018 = 0;\n    _DAT_e000e010 = 7;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08002514": "initialize_memory_08002514",
                "param_1": "value"
            },
            "calling": [
                "FUN_08001c3c",
                "FUN_08001b48"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08002514": {
                    "1": "set_param_values",
                    "3": "initialize_registers",
                    "7": "initialize_memory",
                    "6": "initialize_data"
                },
                "param_1": {
                    "1": "block_size",
                    "7": "input_value",
                    "17": "value"
                },
                "_DAT_e000e014": {
                    "1": "result",
                    "2": "register_value",
                    "3": "base_address"
                },
                "DAT_e000ed23": {
                    "1": "limit",
                    "3": "status_register",
                    "2": "constant"
                },
                "_DAT_e000e018": {
                    "2": "offset",
                    "1": "data_value",
                    "3": "additional_data",
                    "6": "counter"
                },
                "_DAT_e000e010": {
                    "8": "flag",
                    "1": "limit",
                    "2": "initial_value"
                },
                "0x1000000": {
                    "1": "threshold"
                }
            }
        },
        "FUN_08002540": {
            "entrypoint": "0x08002540",
            "current_name": "set_bit_08002540",
            "code": "\nvoid set_bit_08002540(uint index)\n\n{\n  if (-1 < signed_index) {\n    *(int *)(((index >> 5) + 0x60) * 4 + -0x1fff1f00) = 1 << (index & 0x1f);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002540": "set_bit_08002540",
                "param_1": "index",
                "(int)param_1": "signed_index"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08002540": {
                    "12": "set_bit",
                    "1": "set_bit_at_offset",
                    "5": "set_bit_in_memory",
                    "3": "set_bit_at_index",
                    "9": "set_bit_in_array"
                },
                "param_1": {
                    "1": "array_index",
                    "8": "bit_index",
                    "10": "index"
                },
                "param_2": {
                    "1": "data"
                },
                "param_3": {
                    "1": "bit_mask"
                },
                "ptr": {
                    "1": "array"
                },
                "count": {
                    "1": "array_length"
                },
                "offset": {
                    "1": "array_offset"
                },
                "(int)param_1": {
                    "1": "position_as_int",
                    "2": "signed_index"
                },
                "(param_1 >> 5)": {
                    "1": "shifted_position"
                },
                "(param_1 & 0x1f)": {
                    "1": "bit_mask"
                },
                "(param_1 >> 5) + 0x60": {
                    "1": "index"
                },
                "(index * 4 + -0x1fff1f00)": {
                    "1": "address"
                },
                "1 << (param_1 & 0x1f)": {
                    "1": "bit_shifted_value"
                },
                "param_1 >> 5": {
                    "1": "divided_by32"
                },
                "intValue < -1": {
                    "1": "is_negative"
                },
                "dividedBy32 + 0x60": {
                    "1": "offset"
                },
                "-0x1fff1f00": {
                    "1": "base_address"
                },
                "*(int *)(((param_1 >> 5) + 0x60) * 4 + -0x1fff1f00)": {
                    "1": "array_address"
                },
                "param_1 & 0x1f": {
                    "1": "remainder_index"
                },
                "<unnamed_variable>": {
                    "1": "bit_position"
                },
                "<new_variable_name_1>": {
                    "1": "base_address"
                },
                "<original_variable_name_1>": {
                    "1": "<new_variable_name_1>"
                }
            }
        },
        "FUN_08002560": {
            "entrypoint": "0x08002560",
            "current_name": "update_control_register_08002560",
            "code": "\n\n\nvoid update_control_register_08002560(int value)\n\n{\n  if (value != 4) {\n    _DAT_e000e010 = _DAT_e000e010 & 0xfffffffb;\n    return;\n  }\n  _DAT_e000e010 = _DAT_e000e010 | 4;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002560": "update_control_register_08002560",
                "param_1": "value"
            },
            "calling": [
                "FUN_08001b48"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08002560": {
                    "1": "update_data_reg",
                    "7": "update_control_register",
                    "5": "set_flag",
                    "3": "update_status"
                },
                "param_1": {
                    "3": "flag",
                    "2": "input_value",
                    "1": "parameter",
                    "8": "value",
                    "4": "status",
                    "7": "flag_value"
                },
                "_DAT_e000e010": {
                    "1": "status_register",
                    "6": "control_register",
                    "4": "flag_register",
                    "3": "register_value"
                },
                "DAT_e000e010": {
                    "1": "control_register"
                }
            }
        },
        "FUN_08002580": {
            "entrypoint": "0x08002580",
            "current_name": "FUNC_08002580",
            "code": "\nvoid FUNC_08002580(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002580": "FUNC_08002580"
            },
            "calling": [
                "FUN_08002582"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08002582": {
            "entrypoint": "0x08002582",
            "current_name": "update_systick_callback_08002582",
            "code": "\nvoid update_systick_callback_08002582(void)\n\n{\n  handle_systick_interrupt();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002582": "update_systick_callback_08002582",
                "HAL_SYSTICK_Callback": "handle_systick_interrupt"
            },
            "calling": [
                "FUN_08004b9e"
            ],
            "called": [
                "FUN_08002580"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08002582": {
                    "1": "initialize_sys_tick",
                    "4": "handle_sys_tick_interrupt",
                    "3": "update_system_tick_callback"
                },
                "FUNC_08002580": {
                    "2": "perform_systick_callback",
                    "1": "perform_systick_operation",
                    "3": "initialize_sys_tick"
                },
                "HAL_SYSTICK_Callback": {
                    "1": "handle_sys_tick",
                    "2": "system_tick_callback"
                }
            }
        },
        "FUN_0800258c": {
            "entrypoint": "0x0800258c",
            "current_name": "initialize_data_0800258c",
            "code": "\n\n\nundefined4 initialize_data_0800258c(uint **data)\n\n{\n  uint *current_setting;\n  \n  if (*(char *)((int)data + 0x21) != '\\x02') {\n    error_code = (uint *)0x4;\n    return 1;\n  }\n  **data = **data & 0xfffffff1;\n  **data = **data & 0xfffffffe;\n  current_setting = *data;\n  if (current_setting == (uint *)0x40020008) {\n    _DAT_40020004 = 1;\n  }\n  else if (current_setting == (uint *)0x4002001c) {\n    _DAT_40020004 = 0x10;\n  }\n  else if (current_setting == (uint *)0x40020030) {\n    _DAT_40020004 = 0x100;\n  }\n  else if (current_setting == (uint *)0x40020044) {\n    _DAT_40020004 = 0x1000;\n  }\n  else if (current_setting == (uint *)0x40020058) {\n    _DAT_40020004 = 0x10000;\n  }\n  else if (current_setting == (uint *)0x4002006c) {\n    _DAT_40020004 = 0x100000;\n  }\n  else {\n    _DAT_40020004 = 0x1000000;\n  }\n  *(undefined *)((int)data + 0x21) = 1;\n  *(undefined *)(data + 8) = 0;\n  if (callback_function != (uint *)0x0) {\n    (*(code *)callback_function)();\n    return 0;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800258c": "initialize_data_0800258c",
                "param_1": "data",
                "puVar1": "current_setting",
                "param_1[0xe]": "error_code",
                "param_1[0xd]": "callback_function"
            },
            "calling": [
                "FUN_0800316c",
                "FUN_080046b8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800258c": {
                    "3": "configure_hardware",
                    "1": "configure_data_structure",
                    "2": "initialize_settings",
                    "4": "set_configuration",
                    "6": "initialize_data"
                },
                "param_1": {
                    "5": "data",
                    "4": "config",
                    "2": "device_config",
                    "1": "memory_config",
                    "3": "configuration"
                },
                "puVar1": {
                    "1": "ptr_conf_data",
                    "3": "value",
                    "5": "current_setting",
                    "4": "current_value"
                },
                "_DAT_40020004": {
                    "1": "result",
                    "2": "global_value"
                },
                "*(char *)((int)param_1 + 0x21)": {
                    "2": "device_status",
                    "1": "flag_value",
                    "3": "config_flag"
                },
                "param_1[0xe]": {
                    "1": "error",
                    "10": "error_code"
                },
                "**param_1": {
                    "1": "value_ptr",
                    "3": "config_value"
                },
                "*(undefined *)((int)param_1 + 0x21)": {
                    "1": "is_config_set",
                    "3": "config_flag"
                },
                "*(undefined *)(param_1 + 8)": {
                    "1": "initialized_flag",
                    "2": "reset_value"
                },
                "param_1[0xd]": {
                    "2": "function_pointer",
                    "1": "callback_func",
                    "9": "callback_function"
                },
                "*(code *)param_1[0xd]": {
                    "1": "callback"
                },
                "(uint *)0x4": {
                    "1": "initial_value"
                },
                "(uint *)0x40020008": {
                    "1": "option1"
                },
                "(uint *)0x4002001c": {
                    "1": "option2"
                },
                "(uint *)0x40020030": {
                    "1": "option3"
                },
                "(uint *)0x40020044": {
                    "1": "option4"
                },
                "(uint *)0x40020058": {
                    "1": "option5"
                },
                "(uint *)0x4002006c": {
                    "1": "option6"
                },
                "(*(code *)param_1[0xd])();": {
                    "1": "callback_function();"
                },
                "(code *)param_1[0xd]": {
                    "1": "callback_function"
                },
                "(*(char *)((int)param_1 + 0x21))": {
                    "1": "flag"
                },
                "*(uint *)param_1[0xd]": {
                    "1": "config_callback_func"
                },
                "*(uint *)param_1": {
                    "1": "config_value_deref"
                },
                "*param_1": {
                    "1": "ptr_config_value"
                },
                "**(param_1)": {
                    "1": "config_value"
                },
                "(int)param_1 + 0x21": {
                    "1": "config_flag"
                },
                "param_1 + 8": {
                    "1": "output_data"
                }
            }
        },
        "FUN_08002624": {
            "entrypoint": "0x08002624",
            "current_name": "update_bits_08002624",
            "code": "\n\n\nvoid update_bits_08002624(uint *output_params,uint *input_params)\n\n{\n  uint *register_ptr;\n  uint bit_mask;\n  uint bit_check;\n  uint bit_index;\n  uint opcode;\n  uint new_value;\n  int shift_amount;\n  int register_index;\n  \n  new_value = 0;\n  bit_index = 0;\n  do {\n    if (0xf < bit_index) {\n      return;\n    }\n    bit_mask = 1 << (bit_index & 0xff);\n    bit_check = *input_params & bit_mask;\n    if (bit_mask == bit_check) {\n      opcode = input_params[1];\n      if (opcode == 0x12) {\n        new_value = input_params[3] + 0xc;\n      }\n      else if (opcode < 0x13) {\n        if (opcode == 2) {\n          new_value = input_params[3] + 8;\n        }\n        else if (opcode < 3) {\n          if (opcode == 0) goto LAB_08002776;\n          if (opcode == 1) {\n            new_value = input_params[3];\n          }\n        }\n        else if (opcode == 3) {\n          new_value = 0;\n        }\n        else if (opcode == 0x11) {\n          new_value = input_params[3] + 4;\n        }\n      }\n      else if (opcode == 0x10210000) {\nLAB_08002776:\n        if (input_params[2] == 0) {\n          new_value = 4;\n        }\n        else if (input_params[2] == 1) {\n          output_params[4] = bit_mask;\n          new_value = 8;\n        }\n        else {\n          output_params[5] = bit_mask;\n          new_value = 8;\n        }\n      }\n      else if (opcode < 0x10210001) {\n        if ((opcode == 0x10110000) || (opcode == 0x10120000)) goto LAB_08002776;\n      }\n      else if ((opcode == 0x10310000) || ((opcode == 0x10320000 || (opcode == 0x10220000))))\n      goto LAB_08002776;\n      bit_mask = bit_index;\n      register_ptr = output_params;\n      if (0xff < bit_check) {\n        bit_mask = bit_index - 8;\n        register_ptr = output_params + 1;\n      }\n      *register_ptr = *register_ptr & ~(0xf << (bit_mask << 2 & 0xff)) | new_value << (bit_mask << 2 & 0xff);\n      if ((input_params[1] & 0x10000000) != 0) {\n        _DAT_40021018 = _DAT_40021018 | 1;\n        shift_amount = (bit_index & 3) << 2;\n        if (output_params == (uint *)0x40010800) {\n          register_index = 0;\n        }\n        else if (output_params == (uint *)0x40010c00) {\n          register_index = 1;\n        }\n        else if (output_params == (uint *)0x40011000) {\n          register_index = 2;\n        }\n        else if (output_params == (uint *)0x40011400) {\n          register_index = 3;\n        }\n        else {\n          register_index = 4;\n        }\n        *(uint *)(((bit_index >> 2) + 2) * 4 + 0x40010000) =\n             *(uint *)(((bit_index >> 2) + 2) * 4 + 0x40010000) & ~(0xf << shift_amount) | register_index << shift_amount;\n        if ((input_params[1] & 0x10000) == 0) {\n          _DAT_40010400 = _DAT_40010400 & ~bit_check;\n        }\n        else {\n          _DAT_40010400 = _DAT_40010400 | bit_check;\n        }\n        if ((input_params[1] & 0x20000) == 0) {\n          _DAT_40010404 = _DAT_40010404 & ~bit_check;\n        }\n        else {\n          _DAT_40010404 = _DAT_40010404 | bit_check;\n        }\n        if ((input_params[1] & 0x100000) == 0) {\n          _DAT_40010408 = _DAT_40010408 & ~bit_check;\n        }\n        else {\n          _DAT_40010408 = _DAT_40010408 | bit_check;\n        }\n        if ((input_params[1] & 0x200000) == 0) {\n          _DAT_4001040c = _DAT_4001040c & ~bit_check;\n        }\n        else {\n          _DAT_4001040c = bit_check | _DAT_4001040c;\n        }\n      }\n    }\n    bit_index = bit_index + 1;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08002624": "update_bits_08002624",
                "param_1": "output_params",
                "param_2": "input_params",
                "puVar1": "register_ptr",
                "uVar2": "bit_mask",
                "uVar3": "bit_check",
                "uVar4": "bit_index",
                "uVar5": "opcode",
                "uVar6": "new_value",
                "iVar7": "shift_amount",
                "iVar8": "register_index"
            },
            "calling": [
                "FUN_08004f4c",
                "FUN_08004bb0",
                "FUN_08004974"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08002624": {
                    "1": "update_settings",
                    "7": "update_bits",
                    "2": "update_permissions",
                    "5": "update_registers",
                    "4": "update_register_values"
                },
                "param_1": {
                    "1": "register_data_1",
                    "2": "register1",
                    "3": "bits_to_update"
                },
                "param_2": {
                    "2": "register_array_2",
                    "1": "input_values",
                    "4": "input_params"
                },
                "puVar1": {
                    "1": "output_flags_ptr",
                    "2": "register_ptr"
                },
                "uVar2": {
                    "5": "mask",
                    "1": "bit_pos",
                    "24": "bit_mask"
                },
                "uVar3": {
                    "1": "flag_result",
                    "3": "bit_result",
                    "12": "bit_check",
                    "5": "bit_value"
                },
                "uVar4": {
                    "1": "current_bit",
                    "5": "bit_position",
                    "10": "bit_index",
                    "6": "index"
                },
                "uVar5": {
                    "1": "parameter",
                    "7": "opcode",
                    "3": "config_value",
                    "4": "value",
                    "2": "data_value"
                },
                "uVar6": {
                    "16": "new_value",
                    "1": "value2",
                    "5": "updated_value"
                },
                "iVar7": {
                    "1": "temp_var1",
                    "4": "shift_amount",
                    "3": "shift",
                    "2": "shift_value"
                },
                "iVar8": {
                    "1": "offset_2",
                    "2": "index",
                    "17": "register_index"
                },
                "_DAT_40021018": {
                    "1": "status_register"
                },
                "_DAT_40010400": {
                    "1": "register2"
                },
                "_DAT_40010404": {
                    "1": "control_register1"
                },
                "_DAT_40010408": {
                    "1": "register4"
                },
                "_DAT_4001040c": {
                    "1": "control_register3"
                }
            }
        },
        "FUN_08002810": {
            "entrypoint": "0x08002810",
            "current_name": "check_bit_08002810",
            "code": "\nundefined4 check_bit_08002810(int input_value,uint bit_mask)\n\n{\n  if ((bit_mask & *(uint *)(input_value + 8)) == 0) {\n    result 0;\n  }\n  result 1;\n}\n\n",
            "renaming": {
                "FUN_08002810": "check_bit_08002810",
                "param_1": "input_value",
                "param_2": "bit_mask",
                "return": "result"
            },
            "calling": [
                "FUN_08004c48"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08002810": {
                    "1": "check_param_bit",
                    "2": "check_bitwise_intersection",
                    "15": "check_bit"
                },
                "param_1": {
                    "4": "address",
                    "1": "input_param",
                    "12": "input_value",
                    "2": "offset",
                    "3": "data_address"
                },
                "param_2": {
                    "2": "input_value",
                    "1": "value2",
                    "4": "bitmask",
                    "12": "bit_mask"
                },
                "param_1 + 8": {
                    "1": "bit_mask_address"
                },
                "return_value": {
                    "1": "is_intersection"
                },
                "8": {
                    "1": "bit_mask"
                },
                "*(uint *)(param_1 + 8)": {
                    "1": "bitmask"
                },
                "return": {
                    "2": "result"
                },
                "param_2 & *(uint *)(param_1 + 8)": {
                    "1": "bit_result"
                },
                "param_2 &*(uint *)(param_1 + 8)": {
                    "1": "bitwise_result"
                }
            }
        },
        "FUN_0800281e": {
            "entrypoint": "0x0800281e",
            "current_name": "set_param_value_0800281e",
            "code": "\nvoid set_param_value_0800281e(int base_address,int value,int is_shifted)\n\n{\n  if (is_shifted == 0) {\n    *(int *)(base_address + 0x10) = value << 0x10;\n    return;\n  }\n  *(int *)(base_address + 0x10) = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800281e": "set_param_value_0800281e",
                "param_1": "base_address",
                "param_2": "value",
                "param_3": "is_shifted"
            },
            "calling": [
                "FUN_08004c30"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800281e": {
                    "3": "update_value",
                    "1": "update_parameter_value",
                    "2": "update_param",
                    "13": "set_param_value"
                },
                "param_1": {
                    "1": "base_addr",
                    "9": "object_address",
                    "11": "base_address",
                    "2": "target_address"
                },
                "param_2": {
                    "13": "new_value",
                    "1": "data_value",
                    "14": "value"
                },
                "param_3": {
                    "2": "shift_flag",
                    "1": "use_shift",
                    "6": "shift_value",
                    "19": "is_shifted"
                },
                "param_1 + 0x10": {
                    "1": "address_to_update",
                    "3": "target_address"
                },
                "*(int *)(param_1 + 0x10)": {
                    "1": "obj_value",
                    "4": "target_value"
                },
                "<original_function_name>": {
                    "1": "set_param_value"
                },
                "<original_variable_name_1>": {
                    "1": "param_1_ptr"
                },
                "<original_variable_name_2>": {
                    "1": "param_2_ptr"
                },
                "param_2 << 0x10": {
                    "1": "shifted_value"
                },
                "param_4": {
                    "1": "base_address"
                },
                "local_var_1": {
                    "1": "shifted_value"
                }
            }
        },
        "FUN_0800282c": {
            "entrypoint": "0x0800282c",
            "current_name": "update_gpio_exti_0800282c",
            "code": "\n\n\nvoid update_gpio_exti_0800282c(uint interrupt_mask)\n\n{\n  if ((_DAT_40010414 & interrupt_mask) != 0) {\n    _DAT_40010414 = interrupt_mask;\n    handle_gpio_interrupt;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800282c": "update_gpio_exti_0800282c",
                "param_1": "interrupt_mask",
                "HAL_GPIO_EXTI_Callback": "handle_gpio_interrupt",
                "HAL_GPIO_EXTI_Callback()": "handle_gpio_interrupt"
            },
            "calling": [],
            "called": [
                "FUN_080060e4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800282c": {
                    "1": "update_gpio_callback",
                    "4": "update_gpio_interrupt",
                    "2": "update_gpio_state"
                },
                "param_1": {
                    "1": "updated_value",
                    "4": "interrupt_mask",
                    "3": "input_value",
                    "2": "gpio_state"
                },
                "_DAT_40010414": {
                    "1": "gpio_reg",
                    "3": "gpio_state",
                    "8": "gpio_register"
                },
                "HAL_GPIO_EXTI_Callback": {
                    "1": "invoke_callback",
                    "6": "handle_gpio_interrupt",
                    "2": "handle_gpio_exti",
                    "3": "handle_gpio_exti_callback"
                },
                "HAL_GPIO_EXTI_Callback()": {
                    "1": "handle_gpio_interrupt"
                },
                "DAT_40010414": {
                    "1": "gpio_register"
                }
            }
        },
        "FUN_08002848": {
            "entrypoint": "0x08002848",
            "current_name": "update_flag_value_08002848",
            "code": "\nundefined4 update_flag_value_08002848(int *input_array)\n\n{\n  if (*(character *)((int)input_array + 0x3e) == '@') {\n    if (flag == 0) {\n      *(unsigned_int *)(*input_array + 0x10) = value & 0xfe;\n    }\n    else {\n      *(unsigned_int *)(*input_array + 0x10) = value & 0xffU | 1;\n    }\n  }\n  else if (condition2 == 0x4000) {\n    if (*(character *)((int)input_array + 0x3d) == '!') {\n      *(unsigned_int *)(*input_array + 0x10) = value & 0xfe;\n    }\n    else {\n      *(unsigned_int *)(*input_array + 0x10) = value & 0xffU | 1;\n    }\n  }\n  else if (flag == 0) {\n    *(unsigned_int *)(*input_array + 0x10) = (unsigned_int)(value << 0x10) >> 0x17 & 6 | 0xf0;\n  }\n  else if (flag == 1) {\n    *(unsigned_int *)(*input_array + 0x10) = (unsigned_int)(value << 0x10) >> 0x17 & 6 | 0xf1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002848": "update_flag_value_08002848",
                "param_1": "input_array",
                "param_1[0x14]": "flag",
                "param_1[4]": "condition2",
                "param_1[0x11]": "value",
                "char": "character",
                "uint": "unsigned_int"
            },
            "calling": [
                "FUN_080033b8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08002848": {
                    "3": "update_parameter",
                    "1": "set_permission_bit",
                    "2": "update_permissions"
                },
                "param_1": {
                    "1": "configuration",
                    "4": "data",
                    "3": "param_array",
                    "2": "flag_array",
                    "6": "input_array"
                },
                "param_1[0x14]": {
                    "5": "flag",
                    "1": "value_at_index14",
                    "2": "condition1"
                },
                "param_1[4]": {
                    "2": "condition2",
                    "1": "flag_value"
                },
                "param_1[0x11]": {
                    "1": "value_at_index0x11_of_input_array",
                    "8": "value"
                },
                "*param_1": {
                    "1": "permissions_ptr"
                },
                "*(char *)((int)param_1 + 0x3e)": {
                    "1": "configuration.flag_char",
                    "2": "status_char",
                    "3": "char1"
                },
                "*(uint *)(*param_1 + 0x10)": {
                    "1": "status_value",
                    "2": "result",
                    "3": "flag_value"
                },
                "*(char *)((int)param_1 + 0x3d)": {
                    "1": "character_2",
                    "2": "character2",
                    "3": "char2"
                },
                "param_1[0x11] & 0xfe": {
                    "1": "masked_result1"
                },
                "param_1[0x11] & 0xffU | 1": {
                    "1": "masked_result2"
                },
                "(uint)(param_1[0x11] << 0x10) >> 0x17 & 6 | 0xf0": {
                    "1": "masked_result3"
                },
                "(uint)(param_1[0x11] << 0x10) >> 0x17 & 6 | 0xf1": {
                    "1": "masked_result4"
                },
                "inputArray": {
                    "1": "param_array"
                },
                "char": {
                    "1": "character"
                },
                "uint": {
                    "1": "unsigned_int"
                },
                "0x3e": {
                    "1": "char_at"
                },
                "0x14": {
                    "1": "index"
                },
                "0x10": {
                    "1": "updated_value"
                },
                "0x11": {
                    "1": "value_to_check"
                },
                "0x3d": {
                    "1": "char_at2"
                },
                "PTR_inputArray": {
                    "1": "pointer_to_input_array"
                },
                "*param_1 + 0x10": {
                    "1": "result"
                },
                "(char *)((int)param_1 + 0x3e)": {
                    "1": "char_ptr3_e"
                },
                "(char *)((int)param_1 + 0x3d)": {
                    "1": "char_ptr3_d"
                },
                "0x6": {
                    "1": "bit_mask"
                },
                "(uint)(param_1[0x11] << 0x10) >> 0x17 & 6": {
                    "1": "updated_value_calculation"
                },
                "inputParams[0x14]": {
                    "1": "condition_flag"
                },
                "inputParams[0x11]": {
                    "1": "value_to_check"
                },
                "*(uint *)(*inputParams + 0x10)": {
                    "1": "flag_value"
                },
                "*(char *)((int)inputParams + 0x3e)": {
                    "1": "char_value1"
                },
                "*(char *)((int)inputParams + 0x3d)": {
                    "1": "char_value2"
                },
                "*(char *)((int)inputArray + 0x3e)": {
                    "1": "is_char_at"
                },
                "*(uint *)(*inputArray + 0x10)": {
                    "1": "flags"
                },
                "*(char *)((int)inputArray + 0x3d)": {
                    "1": "is_exclamation"
                },
                "char_ptr": {
                    "1": "char_ptr"
                },
                "uint_ptr": {
                    "1": "uint_ptr"
                },
                "data": {
                    "1": "param_1"
                }
            }
        },
        "FUN_080028d2": {
            "entrypoint": "0x080028d2",
            "current_name": "set_byte_value_080028d2",
            "code": "\nundefined4 set_byte_value_080028d2(int *input_array)\n\n{\n  *(uint *)(*input_array + 0x10) = param_array[17] & 0xff;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080028d2": "set_byte_value_080028d2",
                "param_1": "input_array",
                "param_1[0x11]": "param_array[17]"
            },
            "calling": [
                "FUN_080033b8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080028d2": {
                    "1": "update_parameter_value",
                    "2": "set_param_value",
                    "6": "set_byte_value",
                    "3": "update_value"
                },
                "param_1": {
                    "2": "memory_address",
                    "1": "input_pointer",
                    "4": "param_array",
                    "9": "input_array"
                },
                "*param_1": {
                    "1": "parameter_value"
                },
                "param_1[0x11]": {
                    "1": "byte_value",
                    "2": "source_value",
                    "3": "input_array[17]",
                    "4": "param_array[17]"
                },
                "*(uint *)(*param_1 + 0x10)": {
                    "1": "buffer_address",
                    "6": "target_address",
                    "2": "memory_location"
                },
                "param_1[0x11] & 0xff": {
                    "1": "data_value"
                },
                "0xff": {
                    "5": "mask",
                    "1": "255"
                },
                "& 0xff": {
                    "1": "mask"
                },
                "PTR_param_1": {
                    "1": "pointer_location"
                },
                "pointer": {
                    "1": "ptr"
                },
                "PTR_param_1[0x11]": {
                    "1": "value_location"
                }
            }
        },
        "FUN_080028de": {
            "entrypoint": "0x080028de",
            "current_name": "update_flags_080028de",
            "code": "\nundefined4 update_flags_080028de(unsigned_integer **parameters)\n\n{\n  unsigned_integer *value;\n  \n  value = param_b;\n  if ((*(char *)((int)parameters + 0x3d) == '\\\"') &&\n     ((ptr_value != (unsigned_integer *)0x0 || (*(char *)((int)parameters + 0x3e) != '@')))) {\n    if ((ptr_value == (unsigned_integer *)0x0) && (flag4 == (unsigned_integer *)0xc000)) {\n      **parameters = **parameters | 0x100;\n      ptr_value = (unsigned_integer *)((int)ptr_value + 1);\n    }\n    else {\n      if (*(short *)((int)parameters + 0x2a) == 0) {\n        **parameters = **parameters | 0x200;\n      }\n      else if (*(short *)((int)parameters + 0x2a) == 1) {\n        if (value == (unsigned_integer *)0xffff0000) {\n          **parameters = **parameters & 0xfffffbff;\n          value = *parameters;\n          if ((temp_flag & 0x800) == 0) {\n            *value = *value | 0x200;\n          }\n          else {\n            *value = *value & 0xfffffbff;\n          }\n        }\n        else if (((value == (unsigned_integer *)0x4) || (value == (unsigned_integer *)0x8)) ||\n                (param_c == (unsigned_integer *)0x12)) {\n          **parameters = **parameters & 0xfffffbff;\n          **parameters = **parameters | 0x200;\n        }\n        else if (param_b == (unsigned_integer *)0x2) {\n          **parameters = **parameters | 0x400;\n        }\n        else {\n          **parameters = **parameters & 0xfffffbff;\n        }\n      }\n      else if (*(short *)((int)parameters + 0x2a) == 2) {\n        if (param_b == (unsigned_integer *)0x2) {\n          **parameters = **parameters | 0x400;\n        }\n        else {\n          **parameters = **parameters | 0x800;\n          **parameters = **parameters & 0xfffffbff;\n        }\n        value = *parameters;\n        if ((temp_flag & 0x800) != 0) {\n          temp_flag = temp_flag | 0x1000;\n        }\n      }\n      else {\n        **parameters = **parameters | 0x400;\n        value = *parameters;\n        if ((temp_flag & 0x800) != 0) {\n          temp_flag = temp_flag | 0x1000;\n        }\n      }\n      ptr_value = (unsigned_integer *)0x0;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080028de": "update_flags_080028de",
                "param_1": "parameters",
                "puVar1": "value",
                "param_1[0x14]": "ptr_value",
                "param_1[4]": "flag4",
                "puVar1[1]": "temp_flag",
                "param_1[0xb]": "param_b",
                "param_1[0xc]": "param_c",
                "_": "ignored",
                "uint": "unsigned_integer"
            },
            "calling": [
                "FUN_080033b8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080028de": {
                    "1": "apply_flag_operations",
                    "16": "update_flags",
                    "5": "process_flags",
                    "2": "set_flags",
                    "3": "update_permissions"
                },
                "param_1": {
                    "1": "param",
                    "6": "params",
                    "17": "parameters",
                    "2": "arguments"
                },
                "puVar1": {
                    "3": "temp_ptr",
                    "1": "temp_pointer",
                    "2": "ptr",
                    "4": "value"
                },
                "*(char *)((int)param_1 + 0x3d)": {
                    "1": "char_value_1",
                    "3": "char_value1",
                    "2": "char1"
                },
                "param_1[0x14]": {
                    "1": "pointer_value",
                    "2": "ptr_value"
                },
                "*(char *)((int)param_1 + 0x3e)": {
                    "1": "char_value_2",
                    "2": "char2",
                    "5": "char_value2"
                },
                "param_1[4]": {
                    "1": "ptr_check"
                },
                "*(short *)((int)param_1 + 0x2a)": {
                    "10": "short_value",
                    "1": "short_check",
                    "2": "short1"
                },
                "puVar1[1]": {
                    "1": "current_flag[1]"
                },
                "<original_function_name>": {
                    "1": "update_flags"
                },
                "param_1[0xb]": {
                    "1": "ptr_11",
                    "2": "value"
                },
                "**param_1": {
                    "2": "flag",
                    "1": "pointer_value"
                },
                "0xffff0000": {
                    "1": "constant3"
                },
                "0x800": {
                    "1": "flag3"
                },
                "0x4": {
                    "1": "condition2"
                },
                "0x8": {
                    "1": "eight"
                },
                "param_1[0xc]": {
                    "1": "value4"
                },
                "0x12": {
                    "1": "condition4"
                },
                "0x2": {
                    "1": "ptr_value5"
                },
                "0x400": {
                    "1": "flag2"
                },
                "0x1000": {
                    "1": "mask_value3"
                },
                "uint *)0xffff0000)": {
                    "1": "label_1"
                },
                "uint *)0x4)": {
                    "1": "label_2"
                },
                "uint *)0x8)": {
                    "1": "label_3"
                },
                "(uint *)0xffff0000": {
                    "1": "special_pointer1"
                },
                "(uint *)0x4": {
                    "1": "flag_value2"
                },
                "(uint *)0x8": {
                    "1": "flag_value3"
                },
                "(uint *)0x12": {
                    "1": "flag_value5"
                },
                "(uint *)0x2": {
                    "1": "flag_value6"
                },
                "0x0": {
                    "1": "null"
                },
                "_": {
                    "1": "ignored"
                },
                "*param_1": {
                    "1": "deref_params"
                },
                "param_1[0xb] == (uint *)0x2": {
                    "1": "pu_var1_is_two"
                },
                "puVar1 == (uint *)0xffff0000": {
                    "1": "is_ffff0000"
                },
                "puVar1 == (uint *)0x4": {
                    "1": "is_four"
                },
                "puVar1 == (uint *)0x8": {
                    "1": "is_eight"
                },
                "param_1[0xc] == (uint *)0x12": {
                    "1": "is_twelve"
                },
                "puVar1[1] & 0x800": {
                    "1": "is_bit_set"
                },
                "puVar1[1] & 0x800) == 0": {
                    "1": "is_bit_not_set"
                },
                "0xb": {
                    "1": "index"
                },
                "0x14": {
                    "1": "flag_index"
                },
                "0x3d": {
                    "2": "char1"
                },
                "0x3e": {
                    "2": "char2"
                },
                "4": {
                    "1": "constant1"
                },
                "0x2a": {
                    "1": "short_var"
                },
                "0xc000": {
                    "1": "constant2"
                },
                "0xfffffbff": {
                    "1": "condition_flag"
                },
                "2": {
                    "1": "compare_value"
                },
                "*(char*)((int)param_1 + 0x3d)": {
                    "1": "char_value1"
                },
                "*(char*)((int)param_1 + 0x3e)": {
                    "1": "char_value2"
                },
                "*(short*)((int)param_1 + 0x2a)": {
                    "1": "short_value"
                },
                "tempPointer[1]": {
                    "1": "temp_pointer[1]"
                },
                "char_1": {
                    "1": "quote"
                },
                "char_2": {
                    "1": "at_symbol"
                },
                "short_1": {
                    "1": "short_val"
                },
                "uint_1": {
                    "1": "flag"
                },
                "uint_ptr_1": {
                    "1": "ptr_flag"
                },
                "uint_ptr_2": {
                    "1": "ptr_flag_2"
                },
                "0x100": {
                    "1": "permission_a"
                },
                "0x200": {
                    "1": "flag2"
                },
                "uint": {
                    "1": "unsigned_integer"
                },
                "uint *": {
                    "1": "uint_ptr"
                },
                "0xc": {
                    "1": "constant6"
                }
            }
        },
        "FUN_08002ab8": {
            "entrypoint": "0x08002ab8",
            "current_name": "update_data_08002ab8",
            "code": "\nundefined4 update_data_08002ab8(int *data)\n\n{\n  byte *byte_pointer;\n  \n  if (*(short *)((int)data + 0x2a) != 0) {\n    byte_pointer = (byte *)array_element;\n    array_element = (int)(byte_pointer + 1);\n    *(uint *)(*data + 0x10) = (uint)*byte_pointer;\n    *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002ab8": "update_data_08002ab8",
                "param_1": "data",
                "pbVar1": "byte_pointer",
                "param_1[9]": "array_element"
            },
            "calling": [
                "FUN_080033b8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08002ab8": {
                    "2": "update_pointer_and_decrement",
                    "1": "modify_byte_array",
                    "8": "update_data"
                },
                "param_1": {
                    "10": "data",
                    "2": "pointer_array",
                    "1": "buffer",
                    "6": "input_array",
                    "3": "param"
                },
                "pbVar1": {
                    "6": "byte_ptr",
                    "21": "byte_pointer",
                    "1": "byte_data"
                },
                "*(short *)((int)param_1 + 0x2a)": {
                    "3": "short_value"
                },
                "param_1[9]": {
                    "1": "array_pointer"
                },
                "*(uint *)(*param_1 + 0x10)": {
                    "1": "int_value"
                },
                "*param_1": {
                    "1": "pointer_value"
                },
                "*(short *)((int)param_1 + 0x2a) + -1": {
                    "1": "updated_short_value"
                },
                "*pbVar1": {
                    "1": "byte_value"
                }
            }
        },
        "FUN_08002ad8": {
            "entrypoint": "0x08002ad8",
            "current_name": "update_value_08002ad8",
            "code": "\nundefined4 update_value_08002ad8(int *array)\n\n{\n  undefined *ptr;\n  \n  if (*(short *)((int)array + 0x2a) != 0) {\n    ptr = (undefined *)array[9];\n    array[9] = (int)(ptr + 1);\n    *ptr = (char)*(undefined4 *)(*array + 0x10);\n    *(short *)((int)array + 0x2a) = *(short *)((int)array + 0x2a) + -1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002ad8": "update_value_08002ad8",
                "param_1": "array",
                "puVar1": "ptr",
                "param_1[9]": "array[9]"
            },
            "calling": [
                "FUN_080033b8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08002ad8": {
                    "1": "update_and_decrement_counter",
                    "2": "update_array_element",
                    "3": "update_parameter_value",
                    "4": "update_data",
                    "5": "update_value"
                },
                "param_1": {
                    "7": "data",
                    "11": "array",
                    "1": "char_array",
                    "2": "pointer",
                    "5": "parameter"
                },
                "puVar1": {
                    "2": "current_char",
                    "1": "ptr_to_param_value",
                    "3": "pointer",
                    "6": "ptr"
                },
                "*(short *)((int)param_1 + 0x2a)": {
                    "1": "param_value_check",
                    "2": "condition"
                },
                "param_1[9]": {
                    "1": "pointer_array"
                },
                "*puVar1": {
                    "2": "new_value",
                    "1": "new_char_value"
                },
                "(undefined *)param_1[9]": {
                    "1": "pointer_to_byte"
                },
                "(int)(puVar1 + 1)": {
                    "1": "updated_ptr_to_array_element9"
                },
                "(char)*(undefined4 *)(*param_1 + 0x10)": {
                    "1": "value"
                },
                "*(undefined4 *)(*param_1 + 0x10)": {
                    "1": "parameter_value",
                    "3": "source_value"
                },
                "*(short *)((int)data + 0x2a)": {
                    "1": "counter"
                },
                "(undefined *)data[9]": {
                    "1": "buffer"
                },
                "*(undefined4 *)(*data + 0x10)": {
                    "1": "character"
                },
                "puVar1 + 1": {
                    "1": "updated_pointer"
                },
                "*(short *)((int)param_1 + 0x2a) + -1": {
                    "1": "decremented_condition"
                },
                "*(undefined4 *)(*(int *)data + 0x10)": {
                    "1": "value"
                },
                "*(short *)((int)data + 0x2a) + -1": {
                    "1": "decremented_short_value"
                },
                "*(short *)((int)array + 0x2a)": {
                    "1": "size"
                },
                "*(undefined4 *)(*array + 0x10)": {
                    "1": "source"
                },
                "*(short *)((int)parameter + 0x2a)": {
                    "1": "short_value"
                },
                "(undefined *)parameter[9]": {
                    "1": "pointer_to_data"
                },
                "(int)(ptrToData + 1)": {
                    "1": "updated_pointer_value"
                },
                "*(char *)puVar1": {
                    "1": "updated_data_array_value"
                }
            }
        },
        "FUN_08002af8": {
            "entrypoint": "0x08002af8",
            "current_name": "process_parameters_08002af8",
            "code": "\nundefined4 process_parameters_08002af8(uint **input_data,uint *data_ptr,int input_size,uint *output_data)\n\n{\n  undefined4 result;\n  uint *ptr;\n  \n  if (*(char *)((int)input_data + 0param_1[0xf]3d) == '(') {\n    if (data_ptr == (uint *)0param_1[0xf]0) {\n      result = 1;\n    }\n    else if (input_size == 0) {\n      result = 1;\n    }\n    else if (*(char *)(input_data + 0param_1[0xf]f) == '\\param_1[0xf]01') {\n      result = 2;\n    }\n    else {\n      *(undefined *)(input_data + 0param_1[0xf]f) = 1;\n      ptr = *input_data;\n      if ((*ptr & 1) == 0) {\n        *ptr = *ptr | 1;\n      }\n      **input_data = **input_data & 0param_1[0xf]fffff7ff;\n      *(undefined *)((int)input_data + 0param_1[0xf]3d) = 0param_1[0xf]29;\n      *(undefined *)((int)input_data + 0param_1[0xf]3e) = 0param_1[0xf]20;\n      result = 0;\n      array_var = (uint *)0param_1[0xf]0;\n      param2_var = data_ptr;\n      *(short *)((int)input_data + 0param_1[0xf]2a) = (short)input_size;\n      param4_var = output_data;\n      *(undefined2 *)(input_data + 10) = *(undefined2 *)((int)input_data + 0param_1[0xf]2a);\n      *(undefined *)(input_data + 0param_1[0xf]f) = 0;\n      (*input_data)[1] = (*input_data)[1] | 0param_1[0xf]700;\n    }\n  }\n  else {\n    result = 2;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08002af8": "process_parameters_08002af8",
                "param_1": "input_data",
                "param_2": "data_ptr",
                "param_3": "input_size",
                "param_4": "output_data",
                "uVar1": "result",
                "puVar2": "ptr",
                "x": "param_1[0xf]",
                "param_1[0x10]": "array_var",
                "param_1[9]": "param2_var",
                "param_1[0xb]": "param4_var"
            },
            "calling": [
                "FUN_08004e74"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08002af8": {
                    "1": "update_parameters",
                    "4": "process_params",
                    "2": "validate_input"
                },
                "param_1": {
                    "2": "data_ptr",
                    "1": "input_pointer",
                    "3": "input_ptr",
                    "4": "input_data"
                },
                "param_2": {
                    "1": "input_pointer",
                    "2": "pointer_1",
                    "3": "data_ptr"
                },
                "param_3": {
                    "1": "parameter_count",
                    "2": "length",
                    "6": "input_size",
                    "3": "count",
                    "4": "size"
                },
                "param_4": {
                    "4": "output_data",
                    "1": "output_buffer",
                    "3": "parameter4",
                    "2": "output_param"
                },
                "uVar1": {
                    "3": "status",
                    "20": "result",
                    "6": "return_value",
                    "1": "return_val"
                },
                "puVar2": {
                    "1": "first_ptr",
                    "5": "pointer_var",
                    "3": "flag_ptr",
                    "2": "ptr_var",
                    "7": "ptr",
                    "4": "temp_pointer"
                },
                "*(char *)((int)param_1 + 0x3d)": {
                    "1": "character"
                },
                "param_1 + 0xf": {
                    "1": "param_1_offset"
                },
                "*(char *)(param_1 + 0xf)": {
                    "1": "param_1_offset_char"
                },
                "*puVar2": {
                    "1": "ptr_value"
                },
                "**param_1": {
                    "1": "double_ptr_value"
                },
                "x": {
                    "1": "param_1[0xf]"
                },
                "*(undefined *)(param_1 + 0xf)": {
                    "1": "undefined_var"
                },
                "*(undefined2 *)((int)param_1 + 0x2a)": {
                    "1": "short_value"
                },
                "*(short *)((int)param_1 + 0x2a)": {
                    "1": "short_var"
                },
                "**(param_1)": {
                    "1": "ptr_value"
                },
                "*(undefined *)((int)param_1 + 0x3d)": {
                    "1": "undefined_var2"
                },
                "*(undefined *)((int)param_1 + 0x3e)": {
                    "1": "undefined_var3"
                },
                "param_1[0x10]": {
                    "1": "array_var"
                },
                "param_1[9]": {
                    "1": "param2_var"
                },
                "param_1[0xb]": {
                    "1": "param4_var"
                },
                "*(undefined2 *)(param_1 + 10)": {
                    "1": "undefined_var4"
                },
                "(*param_1)[1]": {
                    "1": "param1_var"
                }
            }
        },
        "FUN_08002b84": {
            "entrypoint": "0x08002b84",
            "current_name": "process_input_08002b84",
            "code": "\nundefined4 process_input_08002b84(uint **input_data,uint *data_ptr,int size,uint *output_ptr)\n\n{\n  undefined4 result;\n  uint *ptr;\n  \n  if (*(char *)((int)input_data + 0x3d) == '(') {\n    if (data_ptr == (uint *)0x0) {\n      result = 1;\n    }\n    else if (size == 0) {\n      result = 1;\n    }\n    else if (*(char *)(input_data + 0xf) == '\\x01') {\n      result = 2;\n    }\n    else {\n      *(undefined *)(input_data + 0xf) = 1;\n      ptr = *input_data;\n      if ((*ptr & 1) == 0) {\n        *ptr = *ptr | 1;\n      }\n      **input_data = **input_data & 0xfffff7ff;\n      *(undefined *)((int)input_data + 0x3d) = 0x2a;\n      *(undefined *)((int)input_data + 0x3e) = 0x20;\n      result = 0;\n      ptr1 = (uint *)0x0;\n      ptr2 = data_ptr;\n      *(short *)((int)input_data + 0x2a) = (short)size;\n      ptr3 = output_ptr;\n      *(undefined2 *)(input_data + 10) = *(undefined2 *)((int)input_data + 0x2a);\n      *(undefined *)(input_data + 0xf) = 0;\n      (*input_data)[1] = (*input_data)[1] | 0x700;\n    }\n  }\n  else {\n    result = 2;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08002b84": "process_input_08002b84",
                "param_1": "input_data",
                "param_2": "data_ptr",
                "param_3": "size",
                "param_4": "output_ptr",
                "uVar1": "result",
                "puVar2": "ptr",
                "param_1[0x10]": "ptr1",
                "param_1[9]": "ptr2",
                "param_1[0xb]": "ptr3"
            },
            "calling": [
                "FUN_08004e74"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08002b84": {
                    "2": "check_parameters",
                    "9": "process_input",
                    "1": "update_parameters",
                    "6": "process_parameters",
                    "3": "validate_input"
                },
                "param_1": {
                    "2": "params",
                    "1": "input_data_ptr",
                    "3": "input_ptr",
                    "4": "input_data"
                },
                "param_2": {
                    "4": "data",
                    "3": "param2",
                    "1": "pointer_value",
                    "7": "data_ptr",
                    "5": "param_ptr"
                },
                "param_3": {
                    "1": "arg2",
                    "3": "param_size",
                    "8": "size"
                },
                "param_4": {
                    "6": "output_ptr",
                    "1": "pointer_param",
                    "3": "param4",
                    "2": "result"
                },
                "uVar1": {
                    "4": "status",
                    "21": "result",
                    "6": "return_value"
                },
                "puVar2": {
                    "3": "pointer_var",
                    "2": "pointer",
                    "1": "ptr_data",
                    "11": "ptr",
                    "5": "ptr_var"
                },
                "*(char *)((int)param_1 + 0x3d)": {
                    "1": "char_at_params_plus_0x3d",
                    "3": "character"
                },
                "(uint *)0x0": {
                    "1": "null"
                },
                "*(char *)(param_1 + 0xf)": {
                    "4": "flag",
                    "1": "char_at_params_plus_0xf"
                },
                "*(undefined *)(param_1 + 0xf)": {
                    "1": "flag_value"
                },
                "*(undefined *)((int)param_1 + 0x3d)": {
                    "1": "undef1"
                },
                "*(undefined *)((int)param_1 + 0x3e)": {
                    "1": "data_char_2"
                },
                "param_1[0x10]": {
                    "1": "params_plus_0x10",
                    "2": "ptr1"
                },
                "param_1[9]": {
                    "1": "value2",
                    "2": "ptr2"
                },
                "*(short *)((int)param_1 + 0x2a)": {
                    "1": "short_at_params_plus_0x2a",
                    "2": "short_size"
                },
                "param_1[0xb]": {
                    "1": "output_data_ptr",
                    "2": "ptr3"
                },
                "*(undefined2 *)(param_1 + 10)": {
                    "1": "undef3"
                },
                "(*param_1)[1]": {
                    "1": "deref_params_plus_1",
                    "2": "value"
                },
                "(*puVar2 & 1)": {
                    "1": "ptr_check"
                },
                "**param_1": {
                    "1": "data_value"
                },
                "(*param_1)[1] | 0x700": {
                    "1": "modified_value"
                },
                "*puVar2": {
                    "1": "ptr_value"
                },
                "*param_1": {
                    "1": "ptr_value_1"
                },
                "*(undefined2 *)((int)param_1 + 0x2a)": {
                    "1": "undefined2_at_params_plus_0x2a"
                },
                "(int)param_1 + 0x3d": {
                    "1": "flag_char"
                },
                "(param_1 + 0xf)": {
                    "1": "flag"
                },
                "(param_1 + 0x2a)": {
                    "1": "short_param"
                }
            }
        },
        "FUN_08002c10": {
            "entrypoint": "0x08002c10",
            "current_name": "initialize_data_08002c10",
            "code": "\nundefined4 initialize_data_08002c10(uint **data)\n\n{\n  uint *first_element;\n  \n  if (*(char *)((int)data + 0x3d) != ' ') {\n    return 2;\n  }\n  *(undefined *)((int)data + 0x3d) = 0x28;\n  first_element = *data;\n  if ((*first_element & 1) == 0) {\n    *first_element = *first_element | 1;\n  }\n  **data = **data | 0x400;\n  (*data)[1] = (*data)[1] | 0x300;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002c10": "initialize_data_08002c10",
                "param_1": "data",
                "puVar1": "first_element"
            },
            "calling": [
                "FUN_08004ef4",
                "FUN_08004ec4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08002c10": {
                    "1": "update_values",
                    "2": "initialize_param",
                    "8": "initialize_data",
                    "4": "set_flags_and_values"
                },
                "param_1": {
                    "3": "param",
                    "4": "data",
                    "1": "ptr_array",
                    "2": "flags"
                },
                "puVar1": {
                    "1": "first_param",
                    "3": "current_param",
                    "2": "ptr_data",
                    "4": "ptr",
                    "6": "first_element"
                },
                "*(char *)((int)param_1 + 0x3d)": {
                    "3": "char_value",
                    "1": "flag_char"
                },
                "*(undefined *)((int)param_1 + 0x3d)": {
                    "1": "flag_value"
                },
                "*param_1": {
                    "1": "first_param"
                },
                "*puVar1": {
                    "1": "current_param_value",
                    "2": "value"
                },
                "**param_1": {
                    "1": "double_pointer_value"
                },
                "(*param_1)[1]": {
                    "1": "second_param",
                    "2": "array_value"
                },
                "return 2": {
                    "1": "invalid_param_value"
                },
                "return 0": {
                    "1": "success"
                },
                "(*puVar1 & 1)": {
                    "1": "first_element_flag"
                },
                "0x400": {
                    "1": "new_flag1"
                },
                "0x300": {
                    "1": "new_flag2"
                },
                "(*(char *)((int)paramList + 0x3d)": {
                    "1": "single_character"
                },
                "*(undefined *)((int)paramList + 0x3d)": {
                    "1": "modified_character"
                },
                "**paramList": {
                    "1": "first_param_value"
                },
                "(*paramList)[1]": {
                    "1": "second_param_value"
                },
                "*(char *)((int)flags + 0x3d)": {
                    "1": "flags_character"
                },
                "*(undefined *)((int)flags + 0x3d)": {
                    "1": "update_flags_character"
                },
                "*(char *)((int)flags + 0x3d) != ' '": {
                    "1": "is_flags_character_space"
                },
                "0x28": {
                    "1": "open_paren"
                },
                "(*puVar1 & 1) == 0": {
                    "1": "is_flag_bit_not_set"
                },
                "1": {
                    "1": "flag_bit_mask"
                },
                "*puVar1 = *puVar1 | 1": {
                    "1": "set_flag_bit"
                },
                "**flags = **flags | 0x400": {
                    "1": "set_main_flag1"
                },
                "(*flags)[1] = (*flags)[1] | 0x300": {
                    "1": "set_main_flag2"
                },
                "2": {
                    "1": "invalid_character"
                },
                "0": {
                    "1": "success"
                },
                "*(char *)((int)parameters + 0x3d)": {
                    "1": "character_at_offset"
                },
                "*(undefined *)((int)parameters + 0x3d)": {
                    "1": "modified_byte"
                },
                "*puVar1 & 1": {
                    "1": "is_bit_set"
                },
                "**param_1 | 0x400": {
                    "1": "modified_value_of_pointer"
                },
                "(*param_1)[1] | 0x300": {
                    "1": "modified_second_element"
                },
                "**(param_1)": {
                    "1": "value_at_first_param"
                }
            }
        },
        "FUN_08002c4e": {
            "entrypoint": "0x08002c4e",
            "current_name": "FUNC_08002c4e",
            "code": "\nvoid FUNC_08002c4e(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002c4e": "FUNC_08002c4e"
            },
            "calling": [
                "FUN_08002db2",
                "FUN_08002efc"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08002c50": {
            "entrypoint": "0x08002c50",
            "current_name": "FUNC_08002c50",
            "code": "\nvoid FUNC_08002c50(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002c50": "FUNC_08002c50"
            },
            "calling": [
                "FUN_08002f9c",
                "FUN_0800306c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08002c52": {
            "entrypoint": "0x08002c52",
            "current_name": "FUNC_08002c52",
            "code": "\nvoid FUNC_08002c52(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002c52": "FUNC_08002c52"
            },
            "calling": [
                "FUN_08002d1c",
                "FUN_08002c54"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08002c54": {
            "entrypoint": "0x08002c54",
            "current_name": "process_data_08002c54",
            "code": "\nundefined4 process_data_08002c54(int *data)\n\n{\n  char character;\n  byte *byte_pointer;\n  \n  character = *(char *)((int)data + 0x3d);\n  if (*(short *)((int)data + 0x2a) != 0) {\n    byte_pointer = (byte *)data[9];\n    data[9] = (int)(byte_pointer + 1);\n    *(uint *)(*data + 0x10) = (uint)*byte_pointer;\n    *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n    if ((*(short *)((int)data + 0x2a) == 0) && (character == ')')) {\n      *(uint *)(*data + 4) = *(uint *)(*data + 4) & 0xfffffbff;\n      data[0xc] = 0x21;\n      *(undefined *)((int)data + 0x3d) = 0x28;\n      handle_i2_c_transmission_complete();\n    }\n    return 0;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002c54": "process_data_08002c54",
                "param_1": "data",
                "cVar1": "character",
                "pbVar2": "byte_pointer",
                "HAL_I2C_SlaveTxCpltCallback": "handle_i2_c_transmission_complete"
            },
            "calling": [
                "FUN_080033b8"
            ],
            "called": [
                "FUN_08002c52"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08002c54": {
                    "2": "process_i2_c_data",
                    "1": "decode_and_process_data",
                    "15": "process_data",
                    "4": "update_data"
                },
                "param_1": {
                    "19": "data",
                    "1": "input_data",
                    "4": "data_ptr",
                    "3": "parameters"
                },
                "cVar1": {
                    "7": "char_value",
                    "11": "character",
                    "1": "closing_bracket",
                    "2": "last_character",
                    "3": "char_var"
                },
                "pbVar2": {
                    "13": "byte_ptr",
                    "14": "byte_pointer",
                    "1": "byte_data"
                },
                "FUNC_08002c52": {
                    "1": "initialize_i2c"
                },
                "HAL_I2C_SlaveTxCpltCallback": {
                    "1": "handle_transmission_complete",
                    "2": "handle_i2_c_complete",
                    "4": "handle_i2_c_transmission_complete"
                }
            }
        },
        "FUN_08002ca4": {
            "entrypoint": "0x08002ca4",
            "current_name": "FUNC_08002ca4",
            "code": "\nvoid FUNC_08002ca4(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ca4": "FUNC_08002ca4"
            },
            "calling": [
                "FUN_080032b4",
                "FUN_08002ca6"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08002ca6": {
            "entrypoint": "0x08002ca6",
            "current_name": "process_data_08002ca6",
            "code": "\nundefined4 process_data_08002ca6(int *data)\n\n{\n  char char_value;\n  undefined *ptr;\n  \n  char_value = *(char *)((int)data + 0x3d);\n  if (*(short *)((int)data + 0x2a) != 0) {\n    ptr = (undefined *)data[9];\n    data[9] = (int)(ptr + 1);\n    *ptr = (char)*(undefined4 *)(*data + 0x10);\n    *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n    if ((*(short *)((int)data + 0x2a) == 0) && (char_value == '*')) {\n      *(uint *)(*data + 4) = *(uint *)(*data + 4) & 0xfffffbff;\n      data[0xc] = 0x22;\n      *(undefined *)((int)data + 0x3d) = 0x28;\n      handle_i2_c_receive;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002ca6": "process_data_08002ca6",
                "param_1": "data",
                "cVar1": "char_value",
                "puVar2": "ptr",
                "HAL_I2C_SlaveRxCpltCallback": "handle_i2_c_receive_complete",
                "HAL_I2C_SlaveRxCpltCallback()": "handle_i2_c_receive"
            },
            "calling": [
                "FUN_080033b8"
            ],
            "called": [
                "FUN_08002ca4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08002ca6": {
                    "24": "process_data",
                    "1": "process_input_data"
                },
                "param_1": {
                    "26": "data",
                    "1": "input_data"
                },
                "cVar1": {
                    "2": "char_var",
                    "13": "char_value",
                    "4": "character",
                    "1": "delimiter"
                },
                "puVar2": {
                    "1": "ptr_data",
                    "2": "buffer",
                    "4": "pointer",
                    "14": "ptr"
                },
                "HAL_I2C_SlaveRxCpltCallback": {
                    "1": "handle_i2_c_receive_completion",
                    "3": "handle_i2_c_completion",
                    "2": "handle_i2_c_data_received",
                    "6": "handle_i2_c_receive_complete"
                },
                "HAL_I2C_SlaveRxCpltCallback()": {
                    "1": "handle_i2_c_receive"
                },
                "FUNC_08002ca4": {
                    "1": "notify_data_received"
                },
                "<original_function_name>": {
                    "1": "process_data"
                }
            }
        },
        "FUN_08002cf2": {
            "entrypoint": "0x08002cf2",
            "current_name": "i2c_address_callback_08002cf2",
            "code": "\nundefined4 i2c_address_callback_08002cf2(int *i2c_data,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  undefined2 address;\n  uint flags;\n  \n  flags = *(uint *)(*i2c_data + 0x18);\n  if ((flags & 0x80) == 0) {\n    address = *(undefined2 *)(i2c_data + 3);\n  }\n  else {\n    address = *(undefined2 *)(i2c_data + 6);\n  }\n  perform_i2_c_callback(i2c_data,(*(uint *)(*i2c_data + 0x18) & 4) == 0,address,flags,param4);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002cf2": "i2c_address_callback_08002cf2",
                "param_1": "i2c_data",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "address",
                "uVar2": "flags",
                "HAL_I2C_AddrCallback": "perform_i2_c_callback"
            },
            "calling": [
                "FUN_080033b8"
            ],
            "called": [
                "FUN_08004e74"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08002cf2": {
                    "4": "update_i2_c_address",
                    "1": "perform_i2_c_address_callback",
                    "5": "i2c_address_callback",
                    "2": "process_i2_c_address",
                    "3": "perform_i2_c_operation"
                },
                "param_1": {
                    "2": "i2c_params",
                    "1": "i2c_controller",
                    "7": "i2c_data",
                    "3": "data_ptr"
                },
                "param_2": {
                    "18": "param2",
                    "1": "arg2",
                    "2": "arg1"
                },
                "param_3": {
                    "1": "flag_b",
                    "19": "param3",
                    "2": "arg2"
                },
                "param_4": {
                    "1": "callback_param3",
                    "2": "param",
                    "19": "param4"
                },
                "uVar1": {
                    "11": "address",
                    "1": "address_value",
                    "5": "selected_value",
                    "2": "selected_data"
                },
                "uVar2": {
                    "4": "flags",
                    "1": "config_bits",
                    "2": "config",
                    "3": "value"
                },
                "HAL_I2C_AddrCallback": {
                    "1": "perform_i2c_addr_callback",
                    "2": "perform_i2_c_address_callback"
                },
                "FUN_08004e74": {
                    "1": "internal_function"
                },
                "*param_1": {
                    "1": "data_ptr"
                }
            }
        },
        "FUN_08002d1c": {
            "entrypoint": "0x08002d1c",
            "current_name": "handle_i2_c_event_08002d1c",
            "code": "\nundefined4 handle_i2_c_event_08002d1c(uint **event_data)\n\n{\n  if (((event_data[11] == (uint *)0x4) || (event_data[11] == (uint *)0x8)) &&\n     (*(char *)((int)event_data + 0x3d) == open_parenthesis)) {\n    event_data[11] = (uint *)0xffff0000;\n    (*event_data)[1] = (*event_data)[1] & 0xfffff8ff;\n    (*event_data)[5] = 0xfffffbff;\n    **event_data = **event_data & 0xfffffbff;\n    event_data[12] = (uint *)0x0;\n    *(undefined *)((int)event_data + 0x3d) = 0x20;\n    *(undefined *)((int)event_data + 0x3e) = 0;\n    i2_c_listen_complete;\n  }\n  else if (*(char *)((int)event_data + 0x3d) == exclamation_mark) {\n    event_data[11] = (uint *)0xffff0000;\n    event_data[12] = (uint *)0x21;\n    *(undefined *)((int)event_data + 0x3d) = 0x20;\n    *(undefined *)((int)event_data + 0x3e) = 0;\n    (*event_data)[1] = (*event_data)[1] & 0xfffff8ff;\n    (*event_data)[5] = 0xfffffbff;\n    **event_data = **event_data & 0xfffffbff;\n    i2_c_slave_transmit_complete;\n  }\n  else {\n    (*event_data)[5] = 0xfffffbff;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002d1c": "handle_i2_c_event_08002d1c",
                "param_1": "event_data",
                "HAL_I2C_ListenCpltCallback()": "i2_c_listen_complete",
                "HAL_I2C_SlaveTxCpltCallback()": "i2_c_slave_transmit_complete",
                "param_1[0xb]": "event_data[11]",
                "param_1[0xc]": "event_data[12]",
                "HAL_I2C_ListenCpltCallback": "handle_listen_complete",
                "HAL_I2C_SlaveTxCpltCallback": "handle_slave_transmit_complete",
                "'('": "open_parenthesis",
                "'!'": "exclamation_mark"
            },
            "calling": [
                "FUN_08003520"
            ],
            "called": [
                "FUN_08002c52",
                "FUN_08004ec4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08002d1c": {
                    "1": "process_param",
                    "8": "process_i2_c_data",
                    "4": "process_i2_c_event",
                    "10": "handle_i2_c_event"
                },
                "param_1": {
                    "8": "data",
                    "1": "i2c_params",
                    "12": "event_data",
                    "2": "param"
                },
                "(uint *)0x4": {
                    "1": "constant4"
                },
                "(uint *)0x8": {
                    "1": "state_2"
                },
                "(int)param_1 + 0x3d": {
                    "1": "condition_char"
                },
                "(uint *)0xffff0000": {
                    "1": "mask_1"
                },
                "(uint *)0x0": {
                    "1": "mask_2"
                },
                "(int)param_1 + 0x3d)": {
                    "1": "slave_tx_condition"
                },
                "(int)param_1 + 0x3e)": {
                    "1": "reset"
                },
                "(uint *)0xfffffbff": {
                    "1": "and_mask"
                },
                "(uint *)0x21": {
                    "1": "slave_tx"
                },
                "FUNC_08002c52": {
                    "1": "initialize"
                },
                "FUN_08004ec4": {
                    "1": "slave_tx_complete_callback"
                },
                "(uint *)": {
                    "1": "pointer"
                },
                "(char *)((int)param_1 + 0x3d)": {
                    "1": "char_pointer"
                },
                "HAL_I2C_ListenCpltCallback()": {
                    "1": "handle_listen_complete()"
                },
                "HAL_I2C_SlaveTxCpltCallback()": {
                    "1": "i2_c_slave_transmit_complete"
                },
                "param_1[0xb]": {
                    "1": "i2c_data->status",
                    "6": "event_data[11]"
                },
                "param_1[0xc]": {
                    "1": "counter_ptr",
                    "4": "event_data[12]"
                },
                "*(char *)((int)param_1 + 0x3d)": {
                    "1": "event_char",
                    "3": "char_value",
                    "2": "event_type"
                },
                "0xffff0000": {
                    "1": "constant_ffff0000"
                },
                "0x20": {
                    "1": "constant20"
                },
                "0": {
                    "1": "constant0"
                },
                "0xfffff8ff": {
                    "1": "array_mask_one"
                },
                "0xfffffbff": {
                    "1": "array_mask_five"
                },
                "&paramArray[0]": {
                    "1": "param_array_address"
                },
                "&paramArray[0][1]": {
                    "1": "param_array_element1_address"
                },
                "&paramArray[0][5]": {
                    "1": "param_array_element5_address"
                },
                "**param_1": {
                    "1": "value_0"
                },
                "**param_1 & 0xfffffbff": {
                    "1": "param_array_value_with_fffbff"
                },
                "&paramArray[11]": {
                    "1": "param11_address"
                },
                "&paramArray[11][1]": {
                    "1": "param11_element1_address"
                },
                "&paramArray[11][5]": {
                    "1": "param11_element5_address"
                },
                "(*param_1)[1]": {
                    "1": "i2c_data->value1"
                },
                "(*param_1)[5]": {
                    "1": "value2"
                },
                "*(undefined *)((int)param_1 + 0x3d)": {
                    "1": "data_char_space"
                },
                "HAL_I2C_ListenCpltCallback": {
                    "1": "handle_i2_c_listen_complete",
                    "4": "handle_listen_complete",
                    "2": "i2c_listen_complete_callback"
                },
                "HAL_I2C_SlaveTxCpltCallback": {
                    "3": "handle_slave_transmit_complete",
                    "1": "on_i2_c_slave_transmit_complete"
                },
                "param_1 + 0x3d": {
                    "1": "i2c_data->char1"
                },
                "param_1 + 0x3e": {
                    "1": "i2c_data->char2"
                },
                "(*param_1)": {
                    "1": "i2c_data->values"
                },
                "'('": {
                    "1": "open_parenthesis"
                },
                "*(undefined *)((int)param_1 + 0x3e)": {
                    "1": "data_char_zero"
                },
                "'!'": {
                    "1": "exclamation_mark"
                },
                "(int)param_1 + 0x3e": {
                    "1": "value"
                },
                "param_1[0xb] == (uint *)0x4": {
                    "1": "is_state_4"
                },
                "param_1[0xb] == (uint *)0x8": {
                    "1": "is_state_8"
                },
                "FUN_08002c52": {
                    "1": "initialize_i2_c_listen"
                },
                "char *)((int)param_1 + 0x3d)": {
                    "1": "event_data[end_char_index]"
                },
                "*param_1": {
                    "1": "ptr"
                }
            }
        },
        "FUN_08002db0": {
            "entrypoint": "0x08002db0",
            "current_name": "FUNC_08002db0",
            "code": "\nvoid FUNC_08002db0(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002db0": "FUNC_08002db0"
            },
            "calling": [
                "FUN_08002db2",
                "FUN_08002efc"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08002db2": {
            "entrypoint": "0x08002db2",
            "current_name": "process_data_08002db2",
            "code": "\nundefined4 process_data_08002db2(uint **data)\n\n{\n  char character;\n  uint *pointer;\n  \n  character = *(char *)((int)data + 0x3d);\n  pointer = data[0xb];\n  if ((*(short *)(data + 10) == 0) && (character == '!')) {\n    if ((pointer == (uint *)0x4) || ((pointer == (uint *)0x8 || (pointer == (uint *)0xffff0000)))) {\n      (*data)[1] = (*data)[1] & 0xfffff8ff;\n      **data = **data | 0x200;\n      data[0xc] = (uint *)0x0;\n      *(undefined *)((int)data + 0x3d) = 0x20;\n      if (*(char *)((int)data + 0x3e) == '@') {\n        *(undefined *)((int)data + 0x3e) = 0;\n        handle_mem_tx_cplt();\n      }\n      else {\n        *(undefined *)((int)data + 0x3e) = 0;\n        handle_master_tx_cplt();\n      }\n    }\n    else {\n      (*data)[1] = (*data)[1] & 0xfffff8ff;\n      data[0xc] = (uint *)0x11;\n      *(undefined *)((int)data + 0x3e) = 0;\n      *(undefined *)((int)data + 0x3d) = 0x20;\n      handle_master_tx_cplt();\n    }\n  }\n  else if ((character == '!') || ((*(char *)((int)data + 0x3e) == '@' && (character == '\\\"')))) {\n    if (*(short *)((int)data + 0x2a) == 0) {\n      (*data)[1] = (*data)[1] & 0xfffffbff;\n    }\n    else if (*(char *)((int)data + 0x3e) == '@') {\n      if (data[0x14] == (uint *)0x0) {\n        if (data[0x13] == (uint *)0x1) {\n          (*data)[4] = (uint)data[0x12] & 0xff;\n          data[0x14] = (uint *)((int)data[0x14] + 2);\n        }\n        else {\n          (*data)[4] = (uint)((int)data[0x12] << 0x10) >> 0x18;\n          data[0x14] = (uint *)((int)data[0x14] + 1);\n        }\n      }\n      else if (data[0x14] == (uint *)0x1) {\n        (*data)[4] = (uint)data[0x12] & 0xff;\n        data[0x14] = (uint *)((int)data[0x14] + 1);\n      }\n      else if (data[0x14] == (uint *)0x2) {\n        if (*(char *)((int)data + 0x3d) == '\\\"') {\n          **data = **data | 0x100;\n        }\n        else if (*(char *)((int)data + 0x3d) == '!') {\n          pointer = data[9];\n          data[9] = (uint *)((int)pointer + 1);\n          (*data)[4] = (uint)*(byte *)pointer;\n          *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n        }\n      }\n    }\n    else {\n      pointer = data[9];\n      data[9] = (uint *)((int)pointer + 1);\n      (*data)[4] = (uint)*(byte *)pointer;\n      *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002db2": "process_data_08002db2",
                "param_1": "data",
                "cVar1": "character",
                "puVar2": "pointer",
                "HAL_I2C_MemTxCpltCallback": "handle_mem_tx_cplt",
                "HAL_I2C_MasterTxCpltCallback": "handle_master_tx_cplt"
            },
            "calling": [
                "FUN_080033b8"
            ],
            "called": [
                "FUN_08002c4e",
                "FUN_08002db0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08002db2": {
                    "1": "execute_i2_c_operation",
                    "27": "process_data"
                },
                "param_1": {
                    "20": "data",
                    "1": "param",
                    "2": "input_data"
                },
                "cVar1": {
                    "1": "condition",
                    "7": "char_value",
                    "9": "character",
                    "2": "char_flag",
                    "3": "first_char",
                    "6": "char1"
                },
                "puVar2": {
                    "2": "ptr_var",
                    "3": "ptr_value",
                    "1": "var2",
                    "9": "pointer",
                    "8": "ptr"
                },
                "HAL_I2C_MemTxCpltCallback": {
                    "3": "handle_mem_tx_cplt_callback",
                    "1": "handle_i2_c_mem_tx_complete",
                    "5": "handle_i2_c_mem_tx_cplt",
                    "9": "handle_mem_tx_cplt"
                },
                "HAL_I2C_MasterTxCpltCallback": {
                    "3": "handle_master_tx_cplt_callback",
                    "9": "handle_master_tx_cplt",
                    "1": "master_tx_complete_callback",
                    "2": "handle_master_transmit_complete",
                    "5": "handle_i2_c_master_tx_cplt"
                }
            }
        },
        "FUN_08002efc": {
            "entrypoint": "0x08002efc",
            "current_name": "process_data_08002efc",
            "code": "\nundefined4 process_data_08002efc(uint **data)\n\n{\n  uint *value;\n  \n  value = data[0xb];\n  if (*(char *)((int)data + 0x3d) == '!') {\n    if (*(short *)((int)data + 0x2a) == 0) {\n      if (((value == (uint *)0x4) || (value == (uint *)0x8)) || (value == (uint *)0xffff0000)) {\n        (*data)[1] = (*data)[1] & 0xfffff8ff;\n        **data = **data | 0x200;\n        event_status = (uint *)0x0;\n        *(undefined *)((int)data + 0x3d) = 0x20;\n        if (*(char *)((int)data + 0x3e) == '@') {\n          *(undefined *)((int)data + 0x3e) = 0;\n          handle_mem_tx_cplt_callback;\n        }\n        else {\n          *(undefined *)((int)data + 0x3e) = 0;\n          handle_master_tx_cplt_callback;\n        }\n      }\n      else {\n        (*data)[1] = (*data)[1] & 0xfffff8ff;\n        event_status = (uint *)0x11;\n        *(undefined *)((int)data + 0x3e) = 0;\n        *(undefined *)((int)data + 0x3d) = 0x20;\n        handle_master_tx_cplt_callback;\n      }\n    }\n    else {\n      value = data[9];\n      data[9] = (uint *)((int)value + 1);\n      (*data)[4] = (uint)*(byte *)value;\n      *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002efc": "process_data_08002efc",
                "param_1": "data",
                "puVar1": "value",
                "HAL_I2C_MemTxCpltCallback": "handle_mem_tx_cplt",
                "HAL_I2C_MasterTxCpltCallback": "handle_master_tx_cplt",
                "param_1[0xc]": "event_status",
                "HAL_I2C_MemTxCpltCallback()": "handle_mem_tx_cplt_callback",
                "HAL_I2C_MasterTxCpltCallback()": "handle_master_tx_cplt_callback"
            },
            "calling": [
                "FUN_080033b8"
            ],
            "called": [
                "FUN_08002c4e",
                "FUN_08002db0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08002efc": {
                    "3": "process_i2_c_data",
                    "1": "handle_i2_c_interrupt",
                    "8": "process_data",
                    "2": "process_param",
                    "6": "handle_i2_c_event"
                },
                "param_1": {
                    "11": "data",
                    "1": "transaction_data",
                    "2": "params",
                    "6": "event_data",
                    "5": "parameters"
                },
                "puVar1": {
                    "1": "current_value",
                    "2": "temp_ptr",
                    "8": "value"
                },
                "HAL_I2C_MemTxCpltCallback": {
                    "4": "handle_i2_c_mem_tx_cplt",
                    "1": "mem_tx_cplt_callback",
                    "11": "handle_mem_tx_cplt"
                },
                "HAL_I2C_MasterTxCpltCallback": {
                    "4": "handle_i2_c_master_tx_cplt",
                    "11": "handle_master_tx_cplt",
                    "1": "master_tx_cplt_callback",
                    "2": "handle_master_transmit_complete"
                },
                "puVar2": {
                    "1": "buffer_value"
                },
                "Hal_I2C_MemTxCpltCallback": {
                    "1": "handle_mem_tx_complete"
                },
                "Hal_I2C_MasterTxCpltCallback": {
                    "1": "handle_master_tx_complete"
                },
                "(int)param_1 + 0x3d": {
                    "1": "status_char"
                },
                "(int)param_1 + 0x2a": {
                    "1": "remaining_count"
                },
                "(uint *)0x4": {
                    "1": "option_1"
                },
                "(uint *)0x8": {
                    "1": "option_2"
                },
                "(uint *)0xffff0000": {
                    "1": "option_3"
                },
                "(*param_1)": {
                    "1": "event_data_value"
                },
                "(*param_1)[1]": {
                    "1": "param_1_value1"
                },
                "0xfffff8ff": {
                    "1": "bit_mask"
                },
                "**param_1": {
                    "1": "event_data_value2"
                },
                "param_1[0xc]": {
                    "1": "event_status"
                },
                "(int)param_1 + 0x3e": {
                    "1": "callback_char"
                },
                "HAL_I2C_MemTxCpltCallback()": {
                    "1": "handle_memory_transmit_complete"
                },
                "HAL_I2C_MasterTxCpltCallback()": {
                    "1": "handle_master_transmit_complete"
                },
                "(uint *)((int)puVar1 + 1)": {
                    "1": "next_entry"
                },
                "(*param_1)[4]": {
                    "1": "event_data_value4"
                },
                "*(byte *)puVar1": {
                    "1": "current_byte"
                },
                "*param_1": {
                    "1": "event_data_value"
                },
                "*(char *)((int)param_1 + 0x3d)": {
                    "1": "char_a"
                },
                "*(short *)((int)param_1 + 0x2a)": {
                    "1": "short_a"
                },
                "(**param_1)": {
                    "1": "ptr_a[0]"
                },
                "*(char *)((int)param_1 + 0x3e)": {
                    "1": "char_b"
                },
                "*(undefined *)((int)param_1 + 0x3d)": {
                    "1": "undefined_a"
                },
                "*(undefined *)((int)param_1 + 0x3e)": {
                    "1": "undefined_b"
                }
            }
        },
        "FUN_08002f9a": {
            "entrypoint": "0x08002f9a",
            "current_name": "FUNC_08002f9a",
            "code": "\nvoid FUNC_08002f9a(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002f9a": "FUNC_08002f9a"
            },
            "calling": [
                "FUN_08002f9c",
                "FUN_0800306c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08002f9c": {
            "entrypoint": "0x08002f9c",
            "current_name": "process_data_08002f9c",
            "code": "\nundefined4 process_data_08002f9c(uint **data)\n\n{\n  uint *temp_ptr;\n  \n  if (*(char *)((int)data + 0x3d) == '\\\"') {\n    if (*(ushort *)((int)data + 0x2a) < 4) {\n      if (*(ushort *)((int)data + 0x2a) - 2 < 2) {\n        if (data[0xb] == (uint *)0x2) {\n          **data = **data | 0x400;\n        }\n        else {\n          **data = **data & 0xfffffbff;\n          **data = **data | 0x800;\n        }\n        (*data)[1] = (*data)[1] & 0xfffffbff;\n      }\n      else {\n        if (data[0xb] == (uint *)0x2) {\n          **data = **data | 0x400;\n        }\n        else {\n          **data = **data & 0xfffffbff;\n        }\n        (*data)[1] = (*data)[1] & 0xfffff8ff;\n        temp_ptr = data[9];\n        data[9] = (uint *)((int)temp_ptr + 1);\n        *(char *)temp_ptr = (char)(*data)[4];\n        *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n        *(undefined *)((int)data + 0x3d) = 0x20;\n        data[0xc] = (uint *)0x0;\n        if (*(char *)((int)data + 0x3e) == '@') {\n          *(undefined *)((int)data + 0x3e) = 0;\n          handle_mem_rx_cplt();\n        }\n        else {\n          *(undefined *)((int)data + 0x3e) = 0;\n          handle_master_rx_cplt();\n        }\n      }\n    }\n    else {\n      temp_ptr = data[9];\n      data[9] = (uint *)((int)temp_ptr + 1);\n      *(char *)temp_ptr = (char)(*data)[4];\n      *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002f9c": "process_data_08002f9c",
                "param_1": "data",
                "puVar1": "temp_ptr",
                "HAL_I2C_MemRxCpltCallback": "handle_mem_rx_cplt",
                "HAL_I2C_MasterRxCpltCallback": "handle_master_rx_cplt"
            },
            "calling": [
                "FUN_080033b8"
            ],
            "called": [
                "FUN_08002c50",
                "FUN_08002f9a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08002f9c": {
                    "1": "update_control_register",
                    "2": "update_flags_and_callback",
                    "19": "process_data"
                },
                "param_1": {
                    "1": "parameters",
                    "18": "data",
                    "2": "param"
                },
                "puVar1": {
                    "1": "tmp",
                    "3": "char_ptr",
                    "12": "temp_ptr",
                    "5": "ptr",
                    "2": "temp_pointer"
                },
                "HAL_I2C_MemRxCpltCallback": {
                    "2": "handle_mem_rx_cplt_callback",
                    "1": "handle_memory_receive_complete",
                    "4": "handle_mem_rx_cplt"
                },
                "HAL_I2C_MasterRxCpltCallback": {
                    "4": "handle_master_rx_cplt",
                    "1": "master_receive_complete_callback",
                    "2": "handle_master_rx_cplt_callback"
                }
            }
        },
        "FUN_0800306c": {
            "entrypoint": "0x0800306c",
            "current_name": "process_data_0800306c",
            "code": "\nundefined4 process_data_0800306c(uint **data)\n\n{\n  uint *value;\n  \n  value = ptr_condition;\n  if (*(short *)((int)data + 0x2a) == 3) {\n    if (((value == (uint *)0x4) || (value == (uint *)0x8)) || (value == (uint *)0xffff0000)) {\n      **data = **data & 0xfffffbff;\n    }\n    value = ptr_data;\n    ptr_data = (uint *)((int)value + 1);\n    *(char *)value = (char)(*data)[4];\n    *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n  }\n  else if (*(short *)((int)data + 0x2a) == 2) {\n    if (((value == (uint *)0x4) || (value == (uint *)0x8)) || (value == (uint *)0xffff0000)) {\n      (*data)[1] = (*data)[1] & 0xfffffcff;\n      **data = **data | 0x200;\n    }\n    else {\n      if (value == (uint *)0x2) {\n        **data = **data | 0x400;\n      }\n      else {\n        **data = **data & 0xfffffbff;\n      }\n      (*data)[1] = (*data)[1] & 0xfffffcff;\n    }\n    value = ptr_data;\n    ptr_data = (uint *)((int)value + 1);\n    *(char *)value = (char)(*data)[4];\n    *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n    value = ptr_data;\n    ptr_data = (uint *)((int)value + 1);\n    *(char *)value = (char)(*data)[4];\n    *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n    *(undefined *)((int)data + 0x3d) = 0x20;\n    data[0xc] = (uint *)0x0;\n    if (*(char *)((int)data + 0x3e) == '@') {\n      *(undefined *)((int)data + 0x3e) = 0;\n      handle_mem_rx_cplt();\n    }\n    else {\n      *(undefined *)((int)data + 0x3e) = 0;\n      handle_master_rx_cplt();\n    }\n  }\n  else {\n    value = ptr_data;\n    ptr_data = (uint *)((int)value + 1);\n    *(char *)value = (char)(*data)[4];\n    *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800306c": "process_data_0800306c",
                "param_1": "data",
                "puVar1": "value",
                "param_1[0xb]": "ptr_condition",
                "param_1[9]": "ptr_data",
                "HAL_I2C_MemRxCpltCallback": "handle_mem_rx_cplt",
                "HAL_I2C_MasterRxCpltCallback": "handle_master_rx_cplt"
            },
            "calling": [
                "FUN_080033b8"
            ],
            "called": [
                "FUN_08002c50",
                "FUN_08002f9a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800306c": {
                    "1": "handle_i2c_callback",
                    "27": "process_data"
                },
                "param_1": {
                    "1": "params",
                    "19": "data",
                    "3": "input_data"
                },
                "puVar1": {
                    "1": "current_value",
                    "2": "temp",
                    "5": "pointer",
                    "12": "value",
                    "3": "ptr"
                },
                "*param_1": {
                    "1": "value"
                },
                "*(short *)((int)param_1 + 0x2a)": {
                    "1": "condition"
                },
                "param_1[0xb]": {
                    "1": "ptr_condition"
                },
                "param_1[9]": {
                    "1": "ptr_data"
                },
                "(char)(*param_1)[4]": {
                    "1": "character_data"
                },
                "*(short *)((int)param_1 + 0x3d)": {
                    "1": "flag"
                },
                "*(char *)((int)param_1 + 0x3e)": {
                    "1": "flag_char"
                },
                "HAL_I2C_MemRxCpltCallback": {
                    "1": "handle_memory_receive_complete",
                    "15": "handle_mem_rx_cplt"
                },
                "HAL_I2C_MasterRxCpltCallback": {
                    "15": "handle_master_rx_cplt",
                    "1": "handle_i2_c_master_rx_cplt"
                },
                "FUNC_08002c50": {
                    "2": "callback1",
                    "1": "callback_func_1"
                },
                "FUNC_08002f9a": {
                    "2": "callback2",
                    "1": "do_something"
                },
                "(*param_1)[4]": {
                    "1": "data[0][4]"
                },
                "(*param_1)[1]": {
                    "1": "data[0][1]"
                },
                "Hal_I2C_MemRxCpltCallback": {
                    "1": "handle_mem_rx_complete"
                },
                "Hal_I2C_MasterRxCpltCallback": {
                    "1": "handle_master_rx_complete"
                }
            }
        },
        "FUN_0800316a": {
            "entrypoint": "0x0800316a",
            "current_name": "FUNC_0800316a",
            "code": "\nvoid FUNC_0800316a(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800316a": "FUNC_0800316a"
            },
            "calling": [
                "FUN_0800316c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800316c": {
            "entrypoint": "0x0800316c",
            "current_name": "handle_i2_c_event_0800316c",
            "code": "\nvoid handle_i2_c_event_0800316c(uint **event_data)\n\n{\n  int result;\n  uint *char_ptr;\n  uint *event_ptr;\n  \n  if (*(byte *)((int)event_data + 0x3d) - 0x29 < 2) {\n    abort_flag = (uint *)0x0;\n    *(undefined *)((int)event_data + 0x3d) = 0x28;\n  }\n  else {\n    if ((*(char *)((int)event_data + 0x3d) != '`') && (((*event_data)[1] & 0x800) == 0)) {\n      *(undefined *)((int)event_data + 0x3d) = 0x20;\n    }\n    abort_flag = (uint *)0x0;\n    *(undefined *)((int)event_data + 0x3e) = 0;\n  }\n  **event_data = **event_data & 0xfffff7ff;\n  event_ptr = *event_data;\n  if ((event_ptr[1] & 0x800) == 0) {\n    if (*(char *)((int)event_data + 0x3d) == '`') {\n      *(undefined *)((int)event_data + 0x3d) = 0x20;\n      event_data[0x10] = (uint *)0x0;\n      if ((event_ptr[5] & 0x40) != 0) {\n        char_ptr = event_data[9];\n        event_data[9] = (uint *)((int)char_ptr + 1);\n        *(char *)char_ptr = (char)event_ptr[4];\n      }\n      **event_data = **event_data & 0xfffffffe;\n      handle_i2_c_abort_complete(event_data);\n    }\n    else {\n      if ((event_ptr[5] & 0x40) != 0) {\n        char_ptr = event_data[9];\n        event_data[9] = (uint *)((int)char_ptr + 1);\n        *(char *)char_ptr = (char)event_ptr[4];\n      }\n      handle_i2_c_error(event_data);\n    }\n  }\n  else {\n    event_ptr[1] = event_ptr[1] & 0xfffff7ff;\n    if (*(char *)((int)dma_channel1 + 0x21) == '\\x01') {\n      dma_callback = (uint)callback_function;\n      result = abort_dma(dma_channel2);\n      if (result != 0) {\n        if (((*event_data)[5] & 0x40) != 0) {\n          event_ptr = event_data[9];\n          event_data[9] = (uint *)((int)event_ptr + 1);\n          *(char *)event_ptr = (char)(*event_data)[4];\n        }\n        **event_data = **event_data & 0xfffffffe;\n        *(undefined *)((int)event_data + 0x3d) = 0x20;\n        (*(code *)dma_callback)();\n      }\n    }\n    else {\n      dma_callback2 = (uint)callback_function;\n      result = abort_dma(dma_channel1);\n      if (result != 0) {\n        **event_data = **event_data & 0xfffffffe;\n        *(undefined *)((int)event_data + 0x3d) = 0x20;\n        (*(code *)dma_callback2)();\n      }\n    }\n  }\n  if ((*(char *)((int)event_data + 0x3d) == '(') && (((uint)event_data[0x10] & 4) != 0)) {\n    event_data[0xb] = (uint *)0xffff0000;\n    abort_flag = (uint *)0x0;\n    *(undefined *)((int)event_data + 0x3d) = 0x20;\n    *(undefined *)((int)event_data + 0x3e) = 0;\n    handle_i2_c_listen_complete(event_data);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800316c": "handle_i2_c_event_0800316c",
                "param_1": "event_data",
                "iVar1": "result",
                "puVar2": "char_ptr",
                "puVar3": "event_ptr",
                "HAL_I2C_AbortCpltCallback": "handle_i2_c_abort_complete",
                "HAL_I2C_ErrorCallback": "handle_i2_c_error",
                "HAL_DMA_Abort_IT": "abort_dma",
                "LAB_080035fc_1": "dma_abort_callback",
                "HAL_I2C_ListenCpltCallback": "handle_i2_c_listen_complete",
                "param_1[0xe][0xd]": "dma_callback",
                "param_1[0xd][0xd]": "dma_callback2",
                "param_1[0xd]": "dma_channel1",
                "param_1[0xe]": "dma_channel2",
                "&LAB_080035fc_1": "callback_function",
                "param_1[0xc]": "abort_flag"
            },
            "calling": [
                "FUN_08003520",
                "FUN_080032b4"
            ],
            "called": [
                "FUN_0800258c",
                "FUN_08004ef4",
                "FUN_0800316a",
                "FUN_08004ec4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800316c": {
                    "2": "perform_i2_c_operation",
                    "1": "process_i2_c_event",
                    "13": "handle_i2_c_event"
                },
                "param_1": {
                    "5": "data",
                    "12": "event_data",
                    "1": "param",
                    "2": "input_data",
                    "4": "i2c_params"
                },
                "iVar1": {
                    "1": "dma_abort_result",
                    "2": "index",
                    "21": "result"
                },
                "puVar2": {
                    "1": "counter",
                    "2": "ptr_char",
                    "4": "char_ptr",
                    "3": "ptr1"
                },
                "puVar3": {
                    "1": "pointer3",
                    "5": "event_ptr",
                    "2": "pointer_3"
                },
                "HAL_I2C_AbortCpltCallback": {
                    "5": "handle_i2_c_abort_complete",
                    "1": "i2c_abort_complete_callback"
                },
                "HAL_I2C_ErrorCallback": {
                    "5": "handle_i2_c_error",
                    "1": "i2c_error_callback"
                },
                "HAL_DMA_Abort_IT": {
                    "1": "dma_abort",
                    "3": "abort_dma"
                },
                "LAB_080035fc_1": {
                    "1": "interrupt_handler",
                    "2": "dma_abort_callback"
                },
                "HAL_I2C_ListenCpltCallback": {
                    "3": "handle_i2_c_listen_complete",
                    "1": "i2c_listen_complete_callback"
                },
                "param_1[0xd] + 0x21": {
                    "1": "condition"
                },
                "param_1[0xe][0xd]": {
                    "1": "dma_callback"
                },
                "param_1[0xd][0xd]": {
                    "1": "dma_callback2"
                },
                "param_1[0x10] & 4": {
                    "1": "listen_condition"
                },
                "FUN_0800258c": {
                    "1": "process_event_data"
                },
                "FUN_08004ef4": {
                    "1": "callback1"
                },
                "FUNC_0800316a": {
                    "1": "callback2"
                },
                "FUN_08004ec4": {
                    "1": "callback3"
                },
                "param_1[0xd]": {
                    "1": "dma_config1"
                },
                "param_1[0xe]": {
                    "1": "dma_channel2"
                },
                "&LAB_080035fc_1": {
                    "1": "callback_function"
                },
                "(*(code *)param_1[0xe][0xd])()": {
                    "1": "callback_function(event_data->dma_channel2)"
                },
                "(*(code *)param_1[0xd][0xd])()": {
                    "1": "callback_function(event_data->dma_channel1)"
                },
                "param_1[0xc]": {
                    "1": "abort_flag"
                },
                "(*param_1)[1]": {
                    "1": "event_status"
                },
                "(*param_1)[4]": {
                    "1": "event_data1"
                },
                "(*param_1)[5]": {
                    "1": "event_data2"
                },
                "(*param_1)[0]": {
                    "1": "event_control"
                },
                "(*param_1)[0xd]": {
                    "1": "dma_control1"
                },
                "(*param_1)[0xd][0xd]": {
                    "1": "dma_control1_callback"
                },
                "(*param_1)[0xe][0xd]": {
                    "1": "dma_control2_callback"
                },
                "(*param_1)[0x10]": {
                    "1": "event_flag"
                },
                "*(undefined *)((int)param_1 + 0x3d)": {
                    "1": "event_char1"
                },
                "*(undefined *)((int)param_1 + 0x3e)": {
                    "1": "event_char2"
                }
            }
        },
        "FUN_080032b4": {
            "entrypoint": "0x080032b4",
            "current_name": "process_data_080032b4",
            "code": "\nundefined4 process_data_080032b4(uint **data)\n\n{\n  char character;\n  uint *ptr1;\n  uint *ptr2;\n  \n  character = *(char *)((int)data + 0x3d);\n  (*data)[1] = (*data)[1] & 0xfffff8ff;\n  **data = **data | 1;\n  **data = **data & 0xfffffbff;\n  ptr1 = *data;\n  if ((ptr1[1] & 0x800) != 0) {\n    if ((*(char *)((int)data + 0x3d) == '\\\"') || (*(char *)((int)data + 0x3d) == '*')) {\n      *(short *)((int)data + 0x2a) = (short)*(undefined4 *)(*data[0xe] + 4);\n    }\n    else {\n      *(short *)((int)data + 0x2a) = (short)*(undefined4 *)(*data[0xd] + 4);\n    }\n  }\n  if (*(short *)((int)data + 0x2a) != 0) {\n    if ((ptr1[5] & 4) != 0) {\n      ptr2 = data[9];\n      data[9] = (uint *)((int)ptr2 + 1);\n      *(char *)ptr2 = (char)ptr1[4];\n      *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n    }\n    if (((*data)[5] & 0x40) != 0) {\n      ptr1 = data[9];\n      data[9] = (uint *)((int)ptr1 + 1);\n      *(char *)ptr1 = (char)(*data)[4];\n      *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n    }\n    data[0x10] = (uint *)((uint)data[0x10] | 4);\n  }\n  if (data[0x10] == (uint *)0x0) {\n    if (((character == '(') || (character == '*')) || (character == ')')) {\n      data[0xb] = (uint *)0xffff0000;\n      data[0xc] = (uint *)0x0;\n      *(undefined *)((int)data + 0x3d) = 0x20;\n      *(undefined *)((int)data + 0x3e) = 0;\n      HAL_I2C_ListenCpltCallback();\n    }\n    else if ((data[0xc] == (uint *)0x22) || (character == '\\\"')) {\n      data[0xc] = (uint *)0x0;\n      *(undefined *)((int)data + 0x3d) = 0x20;\n      *(undefined *)((int)data + 0x3e) = 0;\n      HAL_I2C_SlaveRxCpltCallback();\n    }\n  }\n  else {\n    I2C_ITError();\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080032b4": "process_data_080032b4",
                "param_1": "data",
                "cVar1": "character",
                "puVar2": "ptr1",
                "puVar3": "ptr2"
            },
            "calling": [
                "FUN_080033b8"
            ],
            "called": [
                "FUN_08002ca4",
                "FUN_0800316c",
                "FUN_08004ec4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080032b4": {
                    "2": "process_i2_c_packet",
                    "22": "process_data",
                    "1": "process_data_and_callback"
                },
                "param_1": {
                    "19": "data",
                    "2": "input_data",
                    "1": "param"
                },
                "cVar1": {
                    "6": "char_value",
                    "14": "character",
                    "1": "char_at3d",
                    "4": "first_char"
                },
                "puVar2": {
                    "1": "ptr_var1",
                    "10": "ptr1",
                    "4": "ptr",
                    "6": "pointer1"
                },
                "puVar3": {
                    "6": "pointer2",
                    "1": "var2",
                    "14": "ptr2"
                },
                "FUNC_08002ca4": {
                    "1": "i2_c_it_error"
                },
                "FUN_0800316c": {
                    "1": "process_packet_type"
                },
                "FUN_08004ec4": {
                    "1": "i2_c_slave_rx_cplt_callback"
                }
            }
        },
        "FUN_080033b8": {
            "entrypoint": "0x080033b8",
            "current_name": "process_i2_c_operation_080033b8",
            "code": "\nvoid process_i2_c_operation_080033b8(int *i2c_data)\n\n{\n  int param_value;\n  uint flag1;\n  uint flag2;\n  uint flag3;\n  \n  param_value = *i2c_data;\n  flag3 = *(uint *)(param_value + 0x18);\n  flag1 = *(uint *)(param_value + 0x14);\n  flag2 = *(uint *)(param_value + 4);\n  if ((*(char *)((int)i2c_data + 0x3e) == '\\x10') || (*(char *)((int)i2c_data + 0x3e) == '@')) {\n    if (((flag1 & 0x10001) == 0) || ((flag2 & 0x200) == 0)) {\n      if (((flag1 & 0x10008) == 0) || ((flag2 & 0x200) == 0)) {\n        if (((flag1 & 0x10002) != 0) && ((flag2 & 0x200) != 0)) {\n          perform_master_address(i2c_data);\n        }\n      }\n      else {\n        perform_master_add10(i2c_data);\n      }\n    }\n    else {\n      perform_master_sb(i2c_data);\n    }\n    if ((flag3 & 0x100004) == 0) {\n      if ((((flag1 & 0x10040) != 0) && ((flag2 & 0x400) != 0)) && ((flag1 & 0x10004) == 0)) {\n        receive_data_rxne(i2c_data);\n        return;\n      }\n      if (((flag1 & 0x10004) != 0) && ((flag2 & 0x200) != 0)) {\n        receive_data_btf(i2c_data);\n        return;\n      }\n    }\n    else {\n      if ((((flag1 & 0x10080) != 0) && ((flag2 & 0x400) != 0)) && ((flag1 & 0x10004) == 0)) {\n        transmit_data_txe(i2c_data);\n        return;\n      }\n      if (((flag1 & 0x10004) != 0) && ((flag2 & 0x200) != 0)) {\n        transmit_data_btf(i2c_data);\n        return;\n      }\n    }\n  }\n  else {\n    if (((flag1 & 0x10002) != 0) && ((flag2 & 0x200) != 0)) {\n      perform_slave_address();\n      return;\n    }\n    if (((flag1 & 0x10010) != 0) && ((flag2 & 0x200) != 0)) {\n      perform_slave_stopf(i2c_data);\n      return;\n    }\n    if ((flag3 & 0x100004) == 0) {\n      if ((((flag1 & 0x10040) != 0) && ((flag2 & 0x400) != 0)) && ((flag1 & 0x10004) == 0)) {\n        receive_slave_data_rxne(i2c_data);\n        return;\n      }\n      if (((flag1 & 0x10004) != 0) && ((flag2 & 0x200) != 0)) {\n        receive_slave_data_btf(i2c_data);\n      }\n    }\n    else {\n      if ((((flag1 & 0x10080) != 0) && ((flag2 & 0x400) != 0)) && ((flag1 & 0x10004) == 0)) {\n        transmit_slave_data_txe(i2c_data);\n        return;\n      }\n      if (((flag1 & 0x10004) != 0) && ((flag2 & 0x200) != 0)) {\n        transmit_slave_data_btf(i2c_data);\n        return;\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080033b8": "process_i2_c_operation_080033b8",
                "param_1": "i2c_data",
                "iVar1": "param_value",
                "uVar2": "flag1",
                "uVar3": "flag2",
                "uVar4": "flag3",
                "I2C_Master_ADDR": "perform_master_address",
                "I2C_Master_ADD10": "perform_master_add10",
                "I2C_Master_SB": "perform_master_sb",
                "I2C_MasterReceive_RXNE": "receive_data_rxne",
                "I2C_MasterReceive_BTF": "receive_data_btf",
                "I2C_MasterTransmit_TXE": "transmit_data_txe",
                "I2C_MasterTransmit_BTF": "transmit_data_btf",
                "I2C_Slave_ADDR": "perform_slave_address",
                "I2C_Slave_STOPF": "perform_slave_stopf",
                "I2C_SlaveReceive_RXNE": "receive_slave_data_rxne",
                "I2C_SlaveReceive_BTF": "receive_slave_data_btf",
                "I2C_SlaveTransmit_TXE": "transmit_slave_data_txe",
                "I2C_SlaveTransmit_BTF": "transmit_slave_data_btf"
            },
            "calling": [],
            "called": [
                "FUN_08002f9c",
                "FUN_08002848",
                "FUN_08002ad8",
                "FUN_080028d2",
                "FUN_08002ca6",
                "FUN_080028de",
                "FUN_08002efc",
                "FUN_08002db2",
                "FUN_08002c54",
                "FUN_08002cf2",
                "FUN_08002ab8",
                "FUN_0800306c",
                "FUN_080032b4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080033b8": {
                    "1": "handle_i2_c_master_slave",
                    "3": "perform_i2_c_operation",
                    "7": "process_i2_c_operation",
                    "2": "process_i2_c_event"
                },
                "param_1": {
                    "1": "state",
                    "3": "input_data",
                    "4": "event_data",
                    "2": "operation_params",
                    "5": "i2c_data"
                },
                "iVar1": {
                    "1": "data_value",
                    "3": "param_value",
                    "2": "i2c_data_ptr"
                },
                "uVar2": {
                    "1": "message_status1",
                    "3": "status1",
                    "7": "flag1",
                    "2": "status_reg"
                },
                "uVar3": {
                    "1": "status_value",
                    "2": "event_data[2]",
                    "7": "flag2",
                    "3": "status2"
                },
                "uVar4": {
                    "1": "status_flags3",
                    "7": "flag3",
                    "3": "status3",
                    "2": "event_data[3]"
                },
                "I2C_Master_ADDR": {
                    "2": "perform_master_address",
                    "1": "master_address"
                },
                "I2C_Master_ADD10": {
                    "2": "perform_master_add10",
                    "1": "master_add10"
                },
                "I2C_Master_SB": {
                    "1": "master_sb",
                    "2": "perform_master_sb"
                },
                "I2C_MasterReceive_RXNE": {
                    "1": "receive_data_rxne"
                },
                "I2C_MasterReceive_BTF": {
                    "1": "perform_master_receive_btf"
                },
                "I2C_MasterTransmit_TXE": {
                    "1": "transmit_data_txe"
                },
                "I2C_MasterTransmit_BTF": {
                    "1": "master_transmit_btf"
                },
                "I2C_Slave_ADDR": {
                    "2": "perform_slave_address",
                    "1": "slave_address"
                },
                "I2C_Slave_STOPF": {
                    "1": "slave_stop_f",
                    "2": "perform_slave_stopf"
                },
                "I2C_SlaveReceive_RXNE": {
                    "1": "receive_slave_data_rxne"
                },
                "I2C_SlaveReceive_BTF": {
                    "1": "receive_slave_data_btf"
                },
                "I2C_SlaveTransmit_TXE": {
                    "1": "transmit_slave_data_txe"
                },
                "I2C_SlaveTransmit_BTF": {
                    "1": "transmit_slave_data_btf"
                }
            }
        },
        "FUN_08003520": {
            "entrypoint": "0x08003520",
            "current_name": "process_flags_08003520",
            "code": "\nvoid process_flags_08003520(uint **parameters)\n\n{\n  char character;\n  uint *pointer;\n  uint flag1;\n  uint flag2;\n  \n  pointer = *parameters;\n  flag1 = pointer[5];\n  flag2 = pointer[1];\n  if (((flag1 & 0x10100) != 0) && ((flag2 & 0x100) != 0)) {\n    parameters[0x10] = (uint *)((uint)parameters[0x10] | 1);\n    pointer[5] = 0xfffffeff;\n    **parameters = **parameters | 0x8000;\n  }\n  if (((flag1 & 0x10200) != 0) && ((flag2 & 0x100) != 0)) {\n    parameters[0x10] = (uint *)((uint)parameters[0x10] | 2);\n    (*parameters)[5] = 0xfffffdff;\n  }\n  if (((flag1 & 0x10400) != 0) && ((flag2 & 0x100) != 0)) {\n    character = *(char *)((int)parameters + 0x3d);\n    if (((*(char *)((int)parameters + 0x3e) == ' ') && (*(short *)((int)parameters + 0x2a) == 0)) &&\n       (((character == '!' || (character == ')')) || ((character == '(' && (parameters[0xc] == (uint *)0x21)))))) {\n      handle_slave_af(parameters);\n    }\n    else {\n      parameters[0x10] = (uint *)((uint)parameters[0x10] | 4);\n      if (*(char *)((int)parameters + 0x3e) == '\\x10') {\n        **parameters = **parameters | 0x200;\n      }\n      (*parameters)[5] = 0xfffffbff;\n    }\n  }\n  if (((flag1 & 0x10800) != 0) && ((flag2 & 0x100) != 0)) {\n    parameters[0x10] = (uint *)((uint)parameters[0x10] | 8);\n    (*parameters)[5] = 0xfffff7ff;\n  }\n  if (parameters[0x10] != (uint *)0x0) {\n    handle_i2_c_it_error(parameters);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003520": "process_flags_08003520",
                "param_1": "parameters",
                "puVar2": "pointer",
                "uVar3": "flag1",
                "uVar4": "flag2",
                "cVar1": "character",
                "I2C_Slave_AF": "handle_slave_af",
                "I2C_ITError": "handle_i2_c_it_error"
            },
            "calling": [],
            "called": [
                "FUN_08002d1c",
                "FUN_0800316c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08003520": {
                    "2": "process_i2_c_data",
                    "3": "update_i2_c_status",
                    "1": "update_parameters",
                    "5": "process_flags"
                },
                "param_1": {
                    "1": "i2c_status",
                    "3": "data",
                    "2": "input_data",
                    "8": "parameters",
                    "4": "flags"
                },
                "puVar2": {
                    "1": "status_value",
                    "2": "param",
                    "7": "pointer",
                    "3": "data_pointer",
                    "6": "ptr"
                },
                "uVar3": {
                    "1": "flag_value",
                    "11": "value1"
                },
                "uVar4": {
                    "1": "flags2",
                    "11": "flag2"
                },
                "cVar1": {
                    "9": "char_value",
                    "10": "character",
                    "1": "char_var1",
                    "4": "char_var"
                },
                "I2C_Slave_AF": {
                    "1": "perform_i2_c_slave_action"
                },
                "I2C_ITError": {
                    "2": "handle_i2_c_it_error",
                    "1": "handle_it_error"
                }
            }
        },
        "FUN_0800365c": {
            "entrypoint": "0x0800365c",
            "current_name": "calculate_delay_0800365c",
            "code": "\nvoid calculate_delay_0800365c(int input_value)\n\n{\n  bool is_not_zero;\n  int delay_count;\n  \n  delay_count = input_value * (DAT_20000084 / 8000);\n  do {\n    is_not_zero = delay_count != 0;\n    delay_count = delay_count + -1;\n  } while (is_not_zero);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800365c": "calculate_delay_0800365c",
                "param_1": "input_value",
                "local_4": "delay_count",
                "bVar1": "is_not_zero"
            },
            "calling": [
                "FUN_08003688"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800365c": {
                    "1": "initialize_delay",
                    "14": "calculate_delay",
                    "4": "calculate_iterations",
                    "5": "delay_function",
                    "2": "count_down"
                },
                "param_1": {
                    "7": "input",
                    "1": "seconds",
                    "19": "input_value",
                    "2": "delay_time"
                },
                "local_4": {
                    "1": "adjusted_delay",
                    "2": "iteration_count",
                    "3": "calculated_value",
                    "7": "delay_count",
                    "4": "delay"
                },
                "bVar1": {
                    "1": "is_positive",
                    "2": "is_not_zero"
                }
            }
        },
        "FUN_08003688": {
            "entrypoint": "0x08003688",
            "current_name": "handle_flags_08003688",
            "code": "\n\n/* WARNING: Restarted to delay deadcode elimination for space: ram */\n\nundefined4 handle_flags_08003688(uint *parameters)\n\n{\n  int start_time;\n  int current_time;\n  undefined4 result;\n  uint value;\n  bool flag;\n  \n  if ((*parameters & 1) != 0) {\n    if (((_DAT_40021004 & 0xc) == 4) ||\n       (((_DAT_40021004 & 0xc) == 8 && ((_DAT_40021004 & 0x10000) != 0)))) {\n      if (((_DAT_40021000 & 0x20000) != 0) && (parameters[1] == 0)) {\n        return 1;\n      }\n    }\n    else {\n      value = parameters[1];\n      if (value == 0x10000) {\n        _DAT_40021000 = _DAT_40021000 | 0x10000;\n      }\n      else if (value == 0) {\n        _DAT_40021000 = _DAT_40021000 & 0xfffaffff;\n      }\n      else if (value == 0x50000) {\n        _DAT_40021000 = _DAT_40021000 | 0x50000;\n      }\n      else {\n        _DAT_40021000 = _DAT_40021000 & 0xfffaffff;\n      }\n      if (parameters[1] == 0) {\n        start_time = get_current_time();\n        while ((_DAT_40021000 & 0x20000) != 0) {\n          current_time = get_current_time();\n          if (100 < (uint)(current_time - start_time)) {\n            return 3;\n          }\n        }\n      }\n      else {\n        start_time = get_current_time();\n        while ((_DAT_40021000 & 0x20000) == 0) {\n          current_time = get_current_time();\n          if (100 < (uint)(current_time - start_time)) {\n            return 3;\n          }\n        }\n      }\n    }\n  }\n  if ((*parameters & 2) != 0) {\n    if (((_DAT_40021004 & 0xc) == 0) ||\n       (((_DAT_40021004 & 0xc) == 8 && ((_DAT_40021004 & 0x10000) == 0)))) {\n      if (((_DAT_40021000 & 2) != 0) && (parameters[4] != 1)) {\n        return 1;\n      }\n      _DAT_40021000 = _DAT_40021000 & 0xffffff07 | parameters[5] << 3;\n    }\n    else if (parameters[4] == 0) {\n      _DAT_42420000 = 0;\n      start_time = get_current_time();\n      while ((_DAT_40021000 & 2) != 0) {\n        current_time = get_current_time();\n        if (2 < (uint)(current_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      _DAT_42420000 = 1;\n      start_time = get_current_time();\n      while ((_DAT_40021000 & 2) == 0) {\n        current_time = get_current_time();\n        if (2 < (uint)(current_time - start_time)) {\n          return 3;\n        }\n      }\n      _DAT_40021000 = _DAT_40021000 & 0xffffff07 | parameters[5] << 3;\n    }\n  }\n  if ((*parameters & 8) != 0) {\n    if (parameters[6] == 0) {\n      _DAT_42420480 = 0;\n      start_time = get_current_time();\n      while ((_DAT_40021024 & 2) != 0) {\n        current_time = get_current_time();\n        if (2 < (uint)(current_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      _DAT_42420480 = 1;\n      start_time = get_current_time();\n      while ((_DAT_40021024 & 2) == 0) {\n        current_time = get_current_time();\n        if (2 < (uint)(current_time - start_time)) {\n          return 3;\n        }\n      }\n      delay_function(1);\n    }\n  }\n  if ((*parameters & 4) != 0) {\n    flag = (_DAT_4002101c & 0x10000000) == 0;\n    if (flag) {\n      _DAT_4002101c = _DAT_4002101c | 0x10000000;\n    }\n    if ((_DAT_40007000 & 0x100) == 0) {\n      _DAT_40007000 = _DAT_40007000 | 0x100;\n      start_time = get_current_time();\n      while ((_DAT_40007000 & 0x100) == 0) {\n        current_time = get_current_time();\n        if (100 < (uint)(current_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n    value = parameters[3];\n    if (value == 1) {\n      _DAT_40021020 = _DAT_40021020 | 1;\n    }\n    else if (value == 0) {\n      _DAT_40021020 = _DAT_40021020 & 0xfffffffa;\n    }\n    else if (value == 5) {\n      _DAT_40021020 = _DAT_40021020 | 5;\n    }\n    else {\n      _DAT_40021020 = _DAT_40021020 & 0xfffffffa;\n    }\n    if (parameters[3] == 0) {\n      start_time = get_current_time();\n      while ((_DAT_40021020 & 2) != 0) {\n        current_time = get_current_time();\n        if (5000 < (uint)(current_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      start_time = get_current_time();\n      while ((_DAT_40021020 & 2) == 0) {\n        current_time = get_current_time();\n        if (5000 < (uint)(current_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n    if (flag) {\n      _DAT_4002101c = _DAT_4002101c & 0xefffffff;\n    }\n  }\n  if (parameter_1_value_7 == 0) {\n    result = 0;\n  }\n  else if ((_DAT_40021004 & 0xc) == 8) {\n    result = 1;\n  }\n  else if (parameter_1_value_7 == 2) {\n    _DAT_42420060 = 0;\n    start_time = get_current_time();\n    do {\n      if ((_DAT_40021000 & 0x2000000) == 0) {\n        if (parameter_1_value_8 == 0x10000) {\n          _DAT_40021004 = _DAT_40021004 & 0xfffdffff | parameters[2];\n        }\n        _DAT_40021004 = _DAT_40021004 & 0xffc2ffff | parameter_1_value_8 | parameter_1_value_9;\n        _DAT_42420060 = 1;\n        start_time = get_current_time();\n        do {\n          if ((_DAT_40021000 & 0x2000000) != 0) {\n            return 0;\n          }\n          current_time = get_current_time();\n        } while ((uint)(current_time - start_time) < 3);\n        return 3;\n      }\n      current_time = get_current_time();\n    } while ((uint)(current_time - start_time) < 3);\n    result = 3;\n  }\n  else {\n    _DAT_42420060 = 0;\n    start_time = get_current_time();\n    do {\n      if ((_DAT_40021000 & 0x2000000) == 0) {\n        return 0;\n      }\n      current_time = get_current_time();\n    } while ((uint)(current_time - start_time) < 3);\n    result = 3;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08003688": "handle_flags_08003688",
                "param_1": "parameters",
                "iVar1": "start_time",
                "iVar2": "current_time",
                "bVar5": "flag",
                "uVar4": "value",
                "HAL_GetTick": "get_current_time",
                "uVar3": "result",
                "RCC_Delay": "delay_function",
                "param_1[7]": "parameter_1_value_7",
                "param_1[8]": "parameter_1_value_8",
                "param_1[9]": "parameter_1_value_9"
            },
            "calling": [
                "FUN_08001b48"
            ],
            "called": [
                "FUN_08001cc4",
                "FUN_0800365c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08003688": {
                    "1": "perform_operation",
                    "3": "handle_flags",
                    "2": "process_flags"
                },
                "param_1": {
                    "1": "configuration",
                    "3": "data",
                    "2": "status_flags",
                    "7": "flags"
                },
                "iVar1": {
                    "1": "current_time",
                    "27": "start_time",
                    "3": "start_tick"
                },
                "iVar2": {
                    "3": "current_tick",
                    "25": "current_time",
                    "1": "curr_time"
                },
                "bVar5": {
                    "8": "flag",
                    "1": "is_set",
                    "3": "condition",
                    "2": "is_condition_met",
                    "7": "is_flag_set"
                },
                "uVar4": {
                    "2": "flag_value",
                    "1": "param1_val1",
                    "17": "value"
                },
                "_DAT_40021004": {
                    "1": "register_value9",
                    "2": "register1"
                },
                "_DAT_40021000": {
                    "2": "register2",
                    "1": "control_register2"
                },
                "HAL_GetTick": {
                    "1": "get_current_tick",
                    "2": "get_tick",
                    "3": "get_current_time"
                },
                "_DAT_40021024": {
                    "1": "register_value6",
                    "2": "register_3"
                },
                "_DAT_40007000": {
                    "1": "register_4"
                },
                "_DAT_4002101c": {
                    "1": "register_4",
                    "2": "register_value5"
                },
                "_DAT_40021020": {
                    "2": "register_6",
                    "1": "register_value4"
                },
                "_DAT_42420000": {
                    "1": "control_register8"
                },
                "_DAT_42420480": {
                    "1": "register5"
                },
                "_DAT_42420060": {
                    "1": "register_value9"
                },
                "uVar3": {
                    "1": "status",
                    "25": "result",
                    "4": "return_value"
                },
                "RCC_Delay": {
                    "2": "delay_function"
                },
                "_DAT_40020060": {
                    "1": "register9"
                },
                "FUN_08001cc4": {
                    "1": "initialize"
                },
                "FUN_0800365c": {
                    "1": "delay"
                },
                "param_1[7]": {
                    "1": "parameter_1_value_7"
                },
                "param_1[8]": {
                    "1": "parameter_1_value_8"
                },
                "param_1[9]": {
                    "1": "parameter_1_value_9"
                }
            }
        },
        "FUN_08003a68": {
            "entrypoint": "0x08003a68",
            "current_name": "calculate_delay_08003a68",
            "code": "\n\n\nuint calculate_delay_08003a68(void)\n\n{\n  uint delay;\n  undefined2 counter;\n  undefined4 multiplier;\n  undefined4 constant3;\n  undefined4 constant2;\n  undefined4 constant1;\n  \n  constant1 = 0x10100f0e;\n  constant2 = 0xd0c0b0a;\n  constant3 = 0x9080706;\n  multiplier = 0x5040302;\n  counter = 0x201;\n  if ((_DAT_40021004 & 0xc) == 8) {\n    delay = (uint)*(byte *)((int)&multiplier + ((_DAT_40021004 << 10) >> 0x1c));\n    if ((_DAT_40021004 & 0x10000) == 0) {\n      delay = delay * 4000000;\n    }\n    else {\n      delay = (delay * 8000000) /\n              (uint)*(byte *)((int)&counter - ((int)(_DAT_40021004 << 0xe) >> 0x1f));\n    }\n  }\n  else {\n    delay = 8000000;\n  }\n  return delay;\n}\n\n",
            "renaming": {
                "FUN_08003a68": "calculate_delay_08003a68",
                "uVar1": "delay",
                "local_1c": "counter",
                "uStack_18": "multiplier",
                "uStack_14": "constant3",
                "uStack_10": "constant2",
                "uStack_c": "constant1"
            },
            "calling": [
                "FUN_08003afa"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08003a68": {
                    "2": "calculate_time_delay",
                    "23": "calculate_delay",
                    "1": "calculate_timer_delay"
                },
                "uVar1": {
                    "1": "delay_time",
                    "2": "delay_value",
                    "9": "delay"
                },
                "local_1c": {
                    "2": "multiplier",
                    "1": "offset",
                    "4": "constant5",
                    "3": "delay_factor",
                    "6": "counter"
                },
                "uStack_18": {
                    "1": "constant_a",
                    "2": "mask",
                    "4": "constant4",
                    "3": "value1"
                },
                "uStack_14": {
                    "1": "pattern2",
                    "3": "value2",
                    "2": "value1",
                    "4": "constant3"
                },
                "uStack_10": {
                    "1": "constant3",
                    "6": "constant2",
                    "3": "value3",
                    "2": "constant"
                },
                "uStack_c": {
                    "4": "constant1",
                    "1": "stack_var4",
                    "2": "constant3",
                    "3": "value4"
                },
                "_DAT_40021004": {
                    "1": "data_value",
                    "2": "input_data",
                    "6": "register_value"
                },
                "*(byte *)((int)&uStack_18 + ((_DAT_40021004 << 10) >> 0x1c))": {
                    "1": "multiplier"
                },
                "*(byte *)((int)&local_1c - ((int)(_DAT_40021004 << 0xe) >> 0x1f))": {
                    "1": "divider"
                }
            }
        },
        "FUN_08003ad4": {
            "entrypoint": "0x08003ad4",
            "current_name": "initialize_system_08003ad4",
            "code": "\n\n\nundefined4 initialize_system_08003ad4(uint *config_params,uint config_size)\n\n{\n  int start_time;\n  int current_time;\n  uint sys_clock_freq;\n  \n  if ((_DAT_40022000 & 7) < config_size) {\n    _DAT_40022000 = _DAT_40022000 & 0xfffffff8 | config_size;\n    if (config_size != (config_size & 7)) {\n      return 1;\n    }\n  }\n  if ((*config_params & 2) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xffffff0f | config_params[2];\n  }\n  if ((*config_params & 1) != 0) {\n    sys_clock_freq = config_params[1];\n    if (sys_clock_freq == 1) {\n      if ((_DAT_40021000 & 0x20000) == 0) {\n        return 1;\n      }\n    }\n    else if ((sys_clock_freq != 2) && ((_DAT_40021000 & 2) == 0)) {\n      return 1;\n    }\n    _DAT_40021004 = sys_clock_freq | _DAT_40021004 & 0xfffffffc;\n    start_time = get_current_tick();\n    if (config_params[1] == 1) {\n      while ((_DAT_40021004 & 0xc) != 4) {\n        current_time = get_current_tick();\n        if (5000 < (uint)(current_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n    else if (config_params[1] == 2) {\n      while ((_DAT_40021004 & 0xc) != 8) {\n        current_time = get_current_tick();\n        if (5000 < (uint)(current_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      while ((_DAT_40021004 & 0xc) != 0) {\n        current_time = get_current_tick();\n        if (5000 < (uint)(current_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n  }\n  if (config_size < (_DAT_40022000 & 7)) {\n    _DAT_40022000 = _DAT_40022000 & 0xfffffff8 | config_size;\n    if (config_size != (config_size & 7)) {\n      return 1;\n    }\n  }\n  if ((*config_params & 4) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xfffff8ff | config_params[3];\n  }\n  if ((*config_params & 8) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xffffc7ff | config_params[4] << 3;\n  }\n  sys_clock_freq = get_system_clock_frequency();\n  DAT_20000084 = sys_clock_freq >> (&DAT_0800772c)[(_DAT_40021004 << 0x18) >> 0x1c];\n  HAL_InitTick(0xf);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08003ad4": "initialize_system_08003ad4",
                "param_1": "config_params",
                "param_2": "config_size",
                "iVar1": "start_time",
                "iVar2": "current_time",
                "uVar3": "sys_clock_freq",
                "HAL_GetTick": "get_current_tick",
                "HAL_RCC_GetSysClockFreq": "get_system_clock_frequency"
            },
            "calling": [
                "FUN_08001b48"
            ],
            "called": [
                "FUN_08003afa"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08003ad4": {
                    "3": "initialize_hardware",
                    "1": "configure_peripheral",
                    "17": "initialize_system",
                    "5": "initialize_device"
                },
                "param_1": {
                    "1": "config_parameters",
                    "2": "config_data",
                    "7": "config",
                    "13": "config_params"
                },
                "param_2": {
                    "1": "bit_mask",
                    "2": "config_count",
                    "12": "config_size",
                    "9": "num_params"
                },
                "iVar1": {
                    "27": "start_time",
                    "1": "start_tick"
                },
                "iVar2": {
                    "27": "current_time",
                    "1": "current_tick"
                },
                "uVar3": {
                    "1": "clock_frequency",
                    "26": "sys_clock_freq",
                    "2": "temp_value"
                },
                "_DAT_40022000": {
                    "1": "system_status"
                },
                "_DAT_40021004": {
                    "1": "system_status_register"
                },
                "HAL_GetTick": {
                    "3": "get_current_tick"
                },
                "HAL_RCC_GetSysClockFreq": {
                    "1": "get_sys_clock_frequency",
                    "2": "get_system_clock_frequency"
                },
                "DAT_20000084": {
                    "1": "sys_clock_divisor"
                }
            }
        },
        "FUN_08003afa": {
            "entrypoint": "0x08003afa",
            "current_name": "initialize_system_08003afa",
            "code": "\n\n\nundefined4 initialize_system_08003afa(uint *flags,uint clock_source)\n\n{\n  int start_time;\n  int current_time;\n  uint sys_clock_freq;\n  \n  if ((*flags & 2) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xffffff0f | flag_mask;\n  }\n  if ((*flags & 1) != 0) {\n    sys_clock_freq = flag_index;\n    if (sys_clock_freq == 1) {\n      if ((_DAT_40021000 & 0x20000) == 0) {\n        return 1;\n      }\n    }\n    else if ((sys_clock_freq != 2) && ((_DAT_40021000 & 2) == 0)) {\n      return 1;\n    }\n    _DAT_40021004 = sys_clock_freq | _DAT_40021004 & 0xfffffffc;\n    start_time = get_current_timestamp;\n    if (flag_index == 1) {\n      while ((_DAT_40021004 & 0xc) != 4) {\n        current_time = get_current_timestamp;\n        if (5000 < (uint)(current_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n    else if (flag_index == 2) {\n      while ((_DAT_40021004 & 0xc) != 8) {\n        current_time = get_current_timestamp;\n        if (5000 < (uint)(current_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      while ((_DAT_40021004 & 0xc) != 0) {\n        current_time = get_current_timestamp;\n        if (5000 < (uint)(current_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n  }\n  if (clock_source < (_DAT_40022000 & 7)) {\n    _DAT_40022000 = _DAT_40022000 & 0xfffffff8 | clock_source;\n    if (clock_source != (clock_source & 7)) {\n      return 1;\n    }\n  }\n  if ((*flags & 4) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xfffff8ff | flag_config1;\n  }\n  if ((*flags & 8) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xffffc7ff | flag_config2 << 3;\n  }\n  sys_clock_freq = get_system_clock_frequency;\n  DAT_20000084 = sys_clock_freq >> (&DAT_0800772c)[(_DAT_40021004 << 0x18) >> 0x1c];\n  initialize_tick;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08003afa": "initialize_system_08003afa",
                "param_1": "flags",
                "param_2": "clock_source",
                "iVar1": "start_time",
                "iVar2": "current_time",
                "uVar3": "sys_clock_freq",
                "HAL_GetTick": "get_current_time",
                "HAL_RCC_GetSysClockFreq": "get_sys_clock_freq",
                "param_1[1]": "flag_index",
                "param_1[2]": "flag_mask",
                "param_1[3]": "flag_config1",
                "param_1[4]": "flag_config2",
                "HAL_GetTick()": "get_current_timestamp",
                "HAL_RCC_GetSysClockFreq()": "get_system_clock_frequency",
                "HAL_InitTick(0xf)": "initialize_tick"
            },
            "calling": [
                "FUN_08003ad4"
            ],
            "called": [
                "FUN_08001cc4",
                "FUN_08001c3c",
                "FUN_08003a68"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08003afa": {
                    "3": "initialize_device",
                    "2": "initialize_peripheral",
                    "17": "initialize_system",
                    "1": "configure_peripheral"
                },
                "param_1": {
                    "2": "system_flags",
                    "1": "hardware_flags",
                    "15": "flags",
                    "7": "config_flags"
                },
                "param_2": {
                    "1": "num_bits",
                    "7": "clock_source",
                    "2": "clock_config",
                    "3": "num_channels"
                },
                "iVar1": {
                    "1": "start_ticks",
                    "22": "start_time",
                    "5": "start_tick"
                },
                "iVar2": {
                    "23": "current_time",
                    "5": "current_tick",
                    "1": "current_ticks"
                },
                "uVar3": {
                    "1": "flag_value",
                    "3": "value",
                    "18": "sys_clock_freq",
                    "2": "clock_freq"
                },
                "_DAT_40021004": {
                    "1": "system_settings",
                    "3": "system_config"
                },
                "_DAT_40021000": {
                    "1": "register2",
                    "2": "device_status"
                },
                "HAL_GetTick": {
                    "2": "get_current_tick",
                    "1": "get_tick",
                    "3": "get_current_time"
                },
                "HAL_RCC_GetSysClockFreq": {
                    "3": "get_system_clock_frequency",
                    "1": "get_sys_clock_frequency"
                },
                "DAT_20000084": {
                    "1": "updated_value"
                },
                "_DAT_40022000": {
                    "1": "register3"
                },
                "(_DAT_40021004 & 0xc)": {
                    "1": "status_value"
                },
                "(_DAT_40021004 & 0xffffff0f)": {
                    "1": "updated_config"
                },
                "(_DAT_40021000 & 0x20000)": {
                    "1": "status_condition"
                },
                "(_DAT_40021004 & 0xfffffffc)": {
                    "1": "updated_config"
                },
                "param_1[1]": {
                    "1": "flag_index"
                },
                "param_1[2]": {
                    "1": "flag_mask"
                },
                "param_1[3]": {
                    "1": "flag_config1"
                },
                "param_1[4]": {
                    "1": "interrupt_mode"
                },
                "5000": {
                    "1": "max_wait_time"
                },
                "(_DAT_40022000 & 7)": {
                    "1": "sys_config_value"
                },
                "&DAT_0800772c": {
                    "1": "sys_config_lookup"
                },
                "FUN_08001cc4": {
                    "1": "initialize_sub_function1",
                    "2": "initialize_tick"
                },
                "FUN_08001c3c": {
                    "1": "check_flag"
                },
                "FUN_08003a68": {
                    "1": "get_device_config"
                },
                "_DAT_40021004 & 0xffffff0f | param_1[2]": {
                    "1": "update_channel_config"
                },
                "_DAT_40021000 & 0x20000": {
                    "1": "is_interrupt_disabled"
                },
                "_DAT_40021004 & 0xfffffffc": {
                    "1": "update_channel_num"
                },
                "HAL_GetTick()": {
                    "1": "get_current_timestamp"
                },
                "_DAT_40021004 & 0xc": {
                    "1": "get_channel_status"
                },
                "?": {
                    "1": "check_max_wait_time"
                },
                "(uint)(iVar2 - iVar1)": {
                    "1": "elapsed_time"
                },
                "(_DAT_40021004 & 0xc) != <channel|flag>_status": {
                    "1": "check_channel_status"
                },
                "param_2 & 7": {
                    "1": "valid_num_channels"
                },
                "_DAT_40021004 & 0xfffff8ff | param_1[3]": {
                    "1": "update_interrupt_flags"
                },
                "_DAT_40021004 & 0xffffc7ff | param_1[4] << 3": {
                    "1": "update_interrupt_mode"
                },
                "HAL_RCC_GetSysClockFreq()": {
                    "1": "get_system_clock_frequency"
                },
                "(DAT_20000084) >> (&DAT_0800772c)[(_DAT_40021004 << 0x18) >> 0x1c]": {
                    "1": "calculate_actual_frequency"
                },
                "HAL_InitTick(0xf)": {
                    "1": "initialize_tick"
                },
                "return 0": {
                    "1": "success"
                },
                "return 1": {
                    "1": "failure_1"
                },
                "return 3": {
                    "1": "failure_3"
                },
                "DAT_0800772c": {
                    "1": "clock_freq_lookup_table"
                }
            }
        },
        "FUN_08003c44": {
            "entrypoint": "0x08003c44",
            "current_name": "get_data_08003c44",
            "code": "\nundefined4 get_data_08003c44(void)\n\n{\n  return DAT_20000084;\n}\n\n",
            "renaming": {
                "FUN_08003c44": "get_data_08003c44"
            },
            "calling": [
                "FUN_08003c50",
                "FUN_08003c70",
                "FUN_08001b48"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08003c44": {
                    "2": "get_global_variable",
                    "3": "get_global_variable_value",
                    "1": "get_config_value",
                    "6": "get_global_value",
                    "5": "get_data_value",
                    "13": "get_data"
                },
                "DAT_20000084": {
                    "10": "data",
                    "2": "global_variable",
                    "5": "global_value",
                    "1": "current_value",
                    "3": "global_variable_value"
                },
                "": {
                    "1": ""
                }
            }
        },
        "FUN_08003c50": {
            "entrypoint": "0x08003c50",
            "current_name": "get_hclk_frequency_08003c50",
            "code": "\n\n\nuint get_hclk_frequency_08003c50(void)\n\n{\n  uint hclk_freq;\n  \n  hclk_freq = get_hclk_frequency_08003c50();\n  return hclk_freq >> (&DAT_0800773c)[(uint)(_DAT_40021004 << 0x15) >> 0x1d];\n}\n\n",
            "renaming": {
                "FUN_08003c50": "get_hclk_frequency_08003c50",
                "uVar1": "hclk_freq",
                "HAL_RCC_GetHCLKFreq": "get_hclk_frequency"
            },
            "calling": [
                "FUN_08004204"
            ],
            "called": [
                "FUN_08003c44"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08003c50": {
                    "1": "get_adjusted_hclk_frequency",
                    "4": "calculate_adjusted_hclk_freq",
                    "2": "get_clock_frequency",
                    "3": "get_adjusted_clock_frequency",
                    "7": "get_adjusted_hclk_freq",
                    "9": "get_hclk_frequency"
                },
                "uVar1": {
                    "5": "hclk_frequency",
                    "1": "original_hclk_freq",
                    "4": "frequency",
                    "2": "clock_frequency",
                    "12": "hclk_freq"
                },
                "HAL_RCC_GetHCLKFreq": {
                    "1": "get_original_hclk_freq",
                    "4": "get_hclk_freq",
                    "2": "get_current_hclk_freq",
                    "5": "get_hclk_frequency"
                },
                "_DAT_40021004": {
                    "2": "data",
                    "3": "some_value",
                    "1": "input_param",
                    "7": "input_value"
                },
                "&DAT_0800773c": {
                    "3": "shift_values",
                    "2": "shift_array",
                    "1": "scaling_factors_table"
                },
                "DAT_0800773c": {
                    "5": "shift_values",
                    "1": "lut_table",
                    "2": "shift_array"
                },
                "FUN_08003c44": {
                    "1": "get_rcc_value"
                }
            }
        },
        "FUN_08003c70": {
            "entrypoint": "0x08003c70",
            "current_name": "get_adjusted_hclk_freq_08003c70",
            "code": "\n\n\nuint get_adjusted_hclk_freq_08003c70(void)\n\n{\n  uint hclk_freq;\n  \n  hclk_freq = get_hclk_freq;\n  return hclk_freq >> (&DAT_0800773c)[(uint)(_DAT_40021004 << 0x12) >> 0x1d];\n}\n\n",
            "renaming": {
                "FUN_08003c70": "get_adjusted_hclk_freq_08003c70",
                "uVar1": "hclk_freq",
                "HAL_RCC_GetHCLKFreq": "get_hclk_freq",
                "HAL_RCC_GetHCLKFreq()": "get_hclk_freq"
            },
            "calling": [
                "FUN_08004204",
                "FUN_08003da4"
            ],
            "called": [
                "FUN_08003c44"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08003c70": {
                    "1": "get_hclk_freq_divided_by",
                    "3": "get_adjusted_clock_frequency",
                    "4": "get_hclk_frequency",
                    "9": "get_adjusted_hclk_freq"
                },
                "uVar1": {
                    "4": "hclk_frequency",
                    "1": "clock_frequency",
                    "19": "hclk_freq"
                },
                "HAL_RCC_GetHCLKFreq": {
                    "1": "get_base_frequency",
                    "6": "get_hclk_freq",
                    "4": "get_hclk_frequency"
                },
                "&DAT_0800773c": {
                    "1": "ptr_array",
                    "4": "shift_table"
                },
                "_DAT_40021004": {
                    "1": "multiplier",
                    "2": "input_data",
                    "9": "input_value",
                    "3": "register_value"
                },
                "<< 0x12": {
                    "1": "shift_left_by18"
                },
                ">> 0x1d": {
                    "1": "shift_right_by29"
                },
                "FUN_08003c44": {
                    "1": "get_hclk_frequency",
                    "2": "get_hclk_freq"
                },
                "DAT_0800773c": {
                    "1": "bit_shift_array",
                    "2": "offset_table",
                    "3": "shift_array"
                },
                "HAL_RCC_GetHCLKFreq()": {
                    "1": "get_hclk_freq"
                }
            }
        },
        "FUN_08003c90": {
            "entrypoint": "0x08003c90",
            "current_name": "initialize_hardware_08003c90",
            "code": "\n\n\nundefined4 initialize_hardware_08003c90(uint *register_values)\n\n{\n  uint temp_var1;\n  uint temp_var2;\n  int start_time;\n  int current_time;\n  bool is_flag_set;\n  \n  if ((*register_values & 1) != 0) {\n    is_flag_set = (_DAT_4002101c & 0x10000000) == 0;\n    if (is_flag_set) {\n      _DAT_4002101c = _DAT_4002101c | 0x10000000;\n    }\n    if ((_DAT_40007000 & 0x100) == 0) {\n      _DAT_40007000 = _DAT_40007000 | 0x100;\n      start_time = get_tick_count();\n      while ((_DAT_40007000 & 0x100) == 0) {\n        current_time = get_tick_count();\n        if (100 < (uint)(current_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n    if (((_DAT_40021020 & 0x300) != 0) && ((_DAT_40021020 & 0x300) != (register_values[1] & 0x300))) {\n      temp_var2 = _DAT_40021020 & 0xfffffcff;\n      _DAT_42420440 = 0;\n      temp_var1 = _DAT_40021020 & 1;\n      _DAT_40021020 = temp_var2;\n      if (temp_var1 != 0) {\n        start_time = get_tick_count();\n        while ((_DAT_40021020 & 2) == 0) {\n          current_time = get_tick_count();\n          if (5000 < (uint)(current_time - start_time)) {\n            return 3;\n          }\n        }\n      }\n    }\n    _DAT_40021020 = _DAT_40021020 & 0xfffffcff | register_values[1];\n    if (is_flag_set) {\n      _DAT_4002101c = _DAT_4002101c & 0xefffffff;\n    }\n  }\n  if ((*register_values & 2) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xffff3fff | register_values[2];\n  }\n  if ((*register_values & 0x10) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xffbfffff | register_values[3];\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08003c90": "initialize_hardware_08003c90",
                "param_1": "register_values",
                "uVar1": "temp_var1",
                "uVar2": "temp_var2",
                "iVar3": "start_time",
                "iVar4": "current_time",
                "bVar5": "is_flag_set",
                "HAL_GetTick": "get_tick_count"
            },
            "calling": [
                "FUN_08001b48"
            ],
            "called": [
                "FUN_08001cc4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08003c90": {
                    "3": "update_registers",
                    "1": "process_flags",
                    "5": "initialize_hardware",
                    "4": "initialize_device",
                    "2": "configure_peripheral"
                },
                "param_1": {
                    "2": "flags",
                    "3": "config_data",
                    "1": "device_settings",
                    "5": "register_values"
                },
                "uVar1": {
                    "2": "temp1",
                    "1": "flags",
                    "4": "flag1",
                    "15": "temp_var1"
                },
                "uVar2": {
                    "1": "var2",
                    "15": "temp_var2",
                    "2": "temp2",
                    "4": "flag2"
                },
                "iVar3": {
                    "1": "time_start",
                    "27": "start_time"
                },
                "iVar4": {
                    "1": "counter_2",
                    "26": "current_time",
                    "2": "end_time"
                },
                "bVar5": {
                    "5": "flag",
                    "1": "is_flag_enabled",
                    "3": "is_first_time",
                    "12": "is_flag_set"
                },
                "_DAT_4002101c": {
                    "1": "config_register1",
                    "5": "register1"
                },
                "_DAT_40007000": {
                    "1": "control_register2",
                    "4": "register2"
                },
                "_DAT_40021020": {
                    "1": "register2",
                    "4": "register3"
                },
                "_DAT_42420440": {
                    "1": "hardware_register4",
                    "3": "register4"
                },
                "_DAT_40021004": {
                    "1": "peripheral5",
                    "2": "register5"
                },
                "*param_1": {
                    "1": "device_settings"
                },
                "FUN_08001cc4": {
                    "1": "initialize_subsystem"
                },
                "HAL_GetTick": {
                    "1": "get_current_time",
                    "2": "get_tick_count"
                }
            }
        },
        "FUN_08003da4": {
            "entrypoint": "0x08003da4",
            "current_name": "calculate_clock_frequency_08003da4",
            "code": "\n\n\nuint calculate_clock_frequency_08003da4(int clock_type)\n\n{\n  uint frequency;\n  undefined2 prescaler;\n  undefined4 multiplier;\n  undefined4 divider;\n  undefined4 constant2;\n  undefined4 constant;\n  \n  constant = 0x10100f0e;\n  constant2 = 0xd0c0b0a;\n  divider = 0x9080706;\n  multiplier = 0x5040302;\n  prescaler = 0x201;\n  if (clock_type == 2) {\n    frequency = get_pclk2_frequency();\n    frequency = frequency / ((((_DAT_40021004 << 0x10) >> 0x1e) + 1) * 2);\n  }\n  else if (clock_type == 0x10) {\n    if ((_DAT_40021000 & 0x1000000) == 0) {\n      frequency = 0;\n    }\n    else {\n      if ((_DAT_40021004 & 0x10000) == 0) {\n        frequency = 4000000;\n      }\n      else {\n        frequency = 8000000 / *(byte *)((int)&prescaler - ((int)(_DAT_40021004 << 0xe) >> 0x1f));\n      }\n      frequency = frequency * *(byte *)((int)&multiplier + ((_DAT_40021004 << 10) >> 0x1c));\n      if ((_DAT_40021004 & 0x400000) == 0) {\n        frequency = (frequency * 2) / 3;\n      }\n    }\n  }\n  else if (clock_type == 1) {\n    if ((_DAT_40021020 & 0x302) == 0x102) {\n      frequency = 0x8000;\n    }\n    else if (((_DAT_40021020 & 0x300) == 0x200) && ((_DAT_40021024 & 2) != 0)) {\n      frequency = 32000;\n    }\n    else if ((_DAT_40021020 & 0x300) == 0x300) {\n      if ((_DAT_40021000 & 0x20000) == 0) {\n        frequency = 0;\n      }\n      else {\n        frequency = 0xf424;\n      }\n    }\n    else {\n      frequency = 0;\n    }\n  }\n  else {\n    frequency = 0;\n  }\n  return frequency;\n}\n\n",
            "renaming": {
                "FUN_08003da4": "calculate_clock_frequency_08003da4",
                "param_1": "clock_type",
                "uVar1": "frequency",
                "local_24": "prescaler",
                "uStack_20": "multiplier",
                "uStack_1c": "divider",
                "uStack_18": "constant2",
                "uStack_14": "constant",
                "HAL_RCC_GetPCLK2Freq": "get_pclk2_frequency"
            },
            "calling": [
                "FUN_08001cd0",
                "FUN_08002384"
            ],
            "called": [
                "FUN_08003c70"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08003da4": {
                    "18": "calculate_clock_frequency",
                    "1": "calculate_frequency",
                    "11": "get_clock_frequency"
                },
                "param_1": {
                    "2": "input_type",
                    "1": "input_param",
                    "4": "clock_source",
                    "5": "mode",
                    "7": "clock_type"
                },
                "uVar1": {
                    "16": "frequency",
                    "3": "clock_freq",
                    "12": "clock_frequency"
                },
                "local_24": {
                    "1": "prescalar",
                    "13": "prescaler",
                    "3": "constant_value",
                    "6": "multiplier",
                    "2": "prescaler_value"
                },
                "uStack_20": {
                    "1": "multiplier_1",
                    "9": "multiplier",
                    "2": "divider"
                },
                "uStack_1c": {
                    "3": "constant3",
                    "1": "stack_var4",
                    "5": "divider",
                    "2": "constant_value3"
                },
                "uStack_18": {
                    "1": "divider_1",
                    "2": "constant",
                    "5": "constant2",
                    "3": "divider"
                },
                "uStack_14": {
                    "3": "constant",
                    "2": "constant3",
                    "1": "stack_value4"
                },
                "HAL_RCC_GetPCLK2Freq": {
                    "4": "get_pclk2_frequency"
                },
                "<original_function_name>": {
                    "1": "calculate_frequency"
                },
                "_DAT_40021004": {
                    "1": "register1"
                },
                "_DAT_40021000": {
                    "1": "register2"
                },
                "_DAT_40021020": {
                    "1": "register3"
                },
                "_DAT_40021024": {
                    "1": "register4"
                }
            }
        },
        "FUN_08003ea0": {
            "entrypoint": "0x08003ea0",
            "current_name": "update_alarm_status_08003ea0",
            "code": "\n\n\nvoid update_alarm_status_08003ea0(uint **alarm_data)\n\n{\n  if (((**alarm_data & 2) != 0) && (((*alarm_data)[1] & 2) != 0)) {\n    trigger_alarm_event();\n    (*alarm_data)[1] = 0xfffffffd;\n  }\n  _DAT_40010414 = 0x20000;\n  *(undefined *)(address + 0x11) = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003ea0": "update_alarm_status_08003ea0",
                "param_1": "alarm_data",
                "HAL_RTC_AlarmAEventCallback": "handle_alarm_event",
                "HAL_RTC_AlarmAEventCallback()": "trigger_alarm_event()",
                "(int)param_1": "address"
            },
            "calling": [],
            "called": [
                "FUN_08004d18"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08003ea0": {
                    "1": "set_rtc_alarm_a_callback",
                    "4": "update_alarm_status",
                    "2": "initialize_rtc_alarm",
                    "3": "initialize_alarm"
                },
                "param_1": {
                    "2": "parameters",
                    "4": "alarm_status",
                    "1": "parameter",
                    "7": "alarm_data"
                },
                "**param_1": {
                    "1": "alarm_value"
                },
                "(*param_1)[1]": {
                    "1": "data_value_at_index1",
                    "2": "alarm_data[1]"
                },
                "_DAT_40010414": {
                    "1": "gpio_register",
                    "2": "status_register",
                    "3": "register_value"
                },
                "(int)param_1 + 0x11": {
                    "2": "offset"
                },
                "HAL_RTC_AlarmAEventCallback": {
                    "2": "handle_rtc_alarm_event",
                    "1": "handle_rtc_alarm_event_callback",
                    "11": "handle_alarm_event"
                },
                "*param_1": {
                    "1": "alarm_params_value"
                },
                "& 2": {
                    "1": "is_bit_set"
                },
                "0xfffffffd": {
                    "1": "updated_value"
                },
                "*(undefined *)((int)param_1 + 0x11)": {
                    "1": "flag_value",
                    "2": "status"
                },
                "->": {
                    "1": ""
                },
                "HAL_RTC_AlarmAEventCallback()": {
                    "1": "trigger_alarm_event()"
                },
                "<parameter_name>": {
                    "1": "<new_parameter_name>"
                },
                "<variable_name>": {
                    "1": "<new_variable_name>"
                },
                "DAT_40010414": {
                    "2": "memory_address",
                    "1": "register_address"
                },
                "array[1]": {
                    "1": "array_element_1"
                },
                "FUN_08004d18": {
                    "1": "perform_additional_processing"
                },
                "PTR_": {
                    "1": "unchanged_variable"
                },
                "DAT_": {
                    "1": "unchanged_variable"
                },
                "PTR_11": {
                    "1": "flag"
                },
                "(int)param_1": {
                    "1": "address"
                },
                "(undefined *)((int)param_1 + 0x11)": {
                    "1": "flag"
                }
            }
        },
        "FUN_08003ed8": {
            "entrypoint": "0x08003ed8",
            "current_name": "initialize_pwm_08003ed8",
            "code": "\nvoid initialize_pwm_08003ed8(uint **pwm_config)\n\n{\n  uint *p_pwm_data;\n  \n  *(state *)((int)pwm_config + 0x3d) = 2;\n  p_pwm_data = *pwm_config;\n  if ((p_pwm_data[8] & 0x1111) == 0) {\n    if ((p_pwm_data[8] & 0x444) == 0) {\n      *p_pwm_data = *p_pwm_data & 0xfffffffe;\n    }\n  }\n  deinitialize_pwm_08003ed8(pwm_config);\n  *(state *)((int)pwm_config + 0x3d) = 0;\n  *(state *)(pwm_config + 0xf) = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003ed8": "initialize_pwm_08003ed8",
                "param_1": "pwm_config",
                "puVar1": "p_pwm_data",
                "HAL_TIM_PWM_MspDeInit": "deinitialize_pwm",
                "undefined": "state"
            },
            "calling": [
                "FUN_08004b3c"
            ],
            "called": [
                "FUN_08004b34"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08003ed8": {
                    "1": "update_pwm_state",
                    "2": "pwm_deinit",
                    "7": "initialize_pwm"
                },
                "param_1": {
                    "1": "param",
                    "4": "p_pwm_params",
                    "7": "pwm_config",
                    "2": "pwm_param"
                },
                "puVar1": {
                    "1": "timer_ptr",
                    "3": "pwm_data",
                    "4": "pointer",
                    "2": "pwm_value"
                },
                "HAL_TIM_PWM_MspDeInit": {
                    "11": "deinitialize_pwm",
                    "1": "deinitialize_tim_pwm",
                    "2": "deinit_tim_pwm"
                },
                "undefined": {
                    "1": "state"
                },
                "0x3d": {
                    "1": "state_offset"
                },
                "0x1111": {
                    "1": "mask1"
                },
                "0x444": {
                    "1": "mask2"
                },
                "*(undefined *)((int)param_1 + 0x3d)": {
                    "1": "pwm_state"
                },
                "*(undefined *)(param_1 + 0xf)": {
                    "1": "extra_data"
                },
                "*param_1": {
                    "1": "p_params"
                }
            }
        },
        "FUN_08003f12": {
            "entrypoint": "0x08003f12",
            "current_name": "FUNC_08003f12",
            "code": "\nvoid FUNC_08003f12(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003f12": "FUNC_08003f12"
            },
            "calling": [
                "FUN_08003f18"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08003f14": {
            "entrypoint": "0x08003f14",
            "current_name": "FUNC_08003f14",
            "code": "\nvoid FUNC_08003f14(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003f14": "FUNC_08003f14"
            },
            "calling": [
                "FUN_08003f18"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08003f16": {
            "entrypoint": "0x08003f16",
            "current_name": "FUNC_08003f16",
            "code": "\nvoid FUNC_08003f16(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003f16": "FUNC_08003f16"
            },
            "calling": [
                "FUN_08003f18"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08003f18": {
            "entrypoint": "0x08003f18",
            "current_name": "handle_timers_08003f18",
            "code": "\nvoid handle_timers_08003f18(int *timer_data)\n\n{\n  int timer_value;\n  \n  timer_value = *timer_data;\n  if (((*(uint *)(timer_value + 0x10) & 2) != 0) && ((*(uint *)(timer_value + 0xc) & 2) != 0)) {\n    *(undefined4 *)(timer_value + 0x10) = 0xfffffffd;\n    *(undefined *)(timer_data + 7) = 1;\n    if ((*(uint *)(*timer_data + 0x18) & 3) == 0) {\n      handle_oc_delay_elapsed_callback();\n      handle_pwm_pulse_finished_callback(timer_data);\n    }\n    else {\n      handle_ic_capture_callback();\n    }\n    *(undefined *)(timer_data + 7) = 0;\n  }\n  timer_value = *timer_data;\n  if (((*(uint *)(timer_value + 0x10) & 4) != 0) && ((*(uint *)(timer_value + 0xc) & 4) != 0)) {\n    *(undefined4 *)(timer_value + 0x10) = 0xfffffffb;\n    *(undefined *)(timer_data + 7) = 2;\n    if ((*(uint *)(*timer_data + 0x18) & 0x300) == 0) {\n      handle_oc_delay_elapsed_callback(timer_data);\n      handle_pwm_pulse_finished_callback(timer_data);\n    }\n    else {\n      handle_ic_capture_callback(timer_data);\n    }\n    *(undefined *)(timer_data + 7) = 0;\n  }\n  timer_value = *timer_data;\n  if (((*(uint *)(timer_value + 0x10) & 8) != 0) && ((*(uint *)(timer_value + 0xc) & 8) != 0)) {\n    *(undefined4 *)(timer_value + 0x10) = 0xfffffff7;\n    *(undefined *)(timer_data + 7) = 4;\n    if ((*(uint *)(*timer_data + 0x1c) & 3) == 0) {\n      handle_oc_delay_elapsed_callback(timer_data);\n      handle_pwm_pulse_finished_callback(timer_data);\n    }\n    else {\n      handle_ic_capture_callback(timer_data);\n    }\n    *(undefined *)(timer_data + 7) = 0;\n  }\n  timer_value = *timer_data;\n  if (((*(uint *)(timer_value + 0x10) & 0x10) != 0) && ((*(uint *)(timer_value + 0xc) & 0x10) != 0)) {\n    *(undefined4 *)(timer_value + 0x10) = 0xffffffef;\n    *(undefined *)(timer_data + 7) = 8;\n    if ((*(uint *)(*timer_data + 0x1c) & 0x300) == 0) {\n      handle_oc_delay_elapsed_callback(timer_data);\n      handle_pwm_pulse_finished_callback(timer_data);\n    }\n    else {\n      handle_ic_capture_callback(timer_data);\n    }\n    *(undefined *)(timer_data + 7) = 0;\n  }\n  timer_value = *timer_data;\n  if (((*(uint *)(timer_value + 0x10) & 1) != 0) && ((*(uint *)(timer_value + 0xc) & 1) != 0)) {\n    *(undefined4 *)(timer_value + 0x10) = 0xfffffffe;\n    handle_period_elapsed_callback(timer_data);\n  }\n  timer_value = *timer_data;\n  if (((*(uint *)(timer_value + 0x10) & 0x80) != 0) && ((*(uint *)(timer_value + 0xc) & 0x80) != 0)) {\n    *(undefined4 *)(timer_value + 0x10) = 0xffffff7f;\n    handle_break_callback(timer_data);\n  }\n  timer_value = *timer_data;\n  if (((*(uint *)(timer_value + 0x10) & 0x40) != 0) && ((*(uint *)(timer_value + 0xc) & 0x40) != 0)) {\n    *(undefined4 *)(timer_value + 0x10) = 0xffffffbf;\n    handle_trigger_callback(timer_data);\n  }\n  timer_value = *timer_data;\n  if (((*(uint *)(timer_value + 0x10) & 0x20) != 0) && ((*(uint *)(timer_value + 0xc) & 0x20) != 0)) {\n    *(undefined4 *)(timer_value + 0x10) = 0xffffffdf;\n    handle_commutation_callback(timer_data);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003f18": "handle_timers_08003f18",
                "param_1": "timer_data",
                "iVar1": "timer_value",
                "HAL_TIM_OC_DelayElapsedCallback": "handle_oc_delay_elapsed_callback",
                "HAL_TIM_PWM_PulseFinishedCallback": "handle_pwm_pulse_finished_callback",
                "HAL_TIM_IC_CaptureCallback": "handle_ic_capture_callback",
                "HAL_TIM_PeriodElapsedCallback": "handle_period_elapsed_callback",
                "HAL_TIMEx_BreakCallback": "handle_break_callback",
                "HAL_TIM_TriggerCallback": "handle_trigger_callback",
                "HAL_TIMEx_CommutationCallback": "handle_commutation_callback"
            },
            "calling": [
                "FUN_08004e20"
            ],
            "called": [
                "FUN_08003f16",
                "FUN_08003f14",
                "FUN_08003f12",
                "FUN_08004e12",
                "FUN_0800417a",
                "FUN_08004df8",
                "FUN_08004178"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08003f18": {
                    "1": "process_interrupt",
                    "3": "process_callbacks",
                    "2": "handle_tim_callbacks",
                    "7": "handle_timers",
                    "4": "process_timers"
                },
                "param_1": {
                    "5": "timer_array",
                    "6": "timer_data",
                    "1": "interrupt_data",
                    "2": "timer"
                },
                "iVar1": {
                    "4": "data_value",
                    "1": "block_value",
                    "8": "timer_value",
                    "3": "timer_data"
                },
                "FUNC_08003f16": {
                    "1": "handle_delay_elapsed",
                    "3": "hal_tim_oc_delay_elapsed_callback"
                },
                "FUNC_08003f14": {
                    "3": "hal_tim_pwm_pulse_finished_callback",
                    "1": "handle_pulse_finished"
                },
                "FUNC_08003f12": {
                    "3": "hal_tim_ic_capture_callback",
                    "1": "handle_capture"
                },
                "FUN_08004e12": {
                    "1": "handle_period_elapsed",
                    "3": "hal_tim_period_elapsed_callback"
                },
                "FUNC_0800417a": {
                    "1": "handle_break",
                    "3": "hal_tim_ex_break_callback"
                },
                "FUN_08004df8": {
                    "3": "hal_tim_trigger_callback",
                    "1": "handle_trigger"
                },
                "FUNC_08004178": {
                    "1": "handle_commutation",
                    "3": "hal_tim_ex_commutation_callback"
                },
                "HAL_TIM_OC_DelayElapsedCallback": {
                    "3": "handle_oc_delay_elapsed",
                    "1": "handle_delay_elapsed_callback",
                    "2": "output_compare_delay_elapsed_callback",
                    "7": "handle_oc_delay_elapsed_callback"
                },
                "HAL_TIM_PWM_PulseFinishedCallback": {
                    "1": "handle_pulse_finished_callback",
                    "7": "handle_pwm_pulse_finished_callback",
                    "3": "handle_pwm_pulse_finished"
                },
                "HAL_TIM_IC_CaptureCallback": {
                    "2": "input_capture_callback",
                    "1": "handle_tim_ic_capture_callback",
                    "7": "handle_ic_capture_callback",
                    "3": "handle_ic_capture"
                },
                "HAL_TIM_PeriodElapsedCallback": {
                    "9": "handle_period_elapsed_callback",
                    "3": "handle_period_elapsed",
                    "1": "handle_tim_period_elapsed_callback",
                    "2": "period_elapsed_callback"
                },
                "HAL_TIMEx_BreakCallback": {
                    "2": "handle_break",
                    "1": "handle_ex_break",
                    "8": "handle_break_callback"
                },
                "HAL_TIM_TriggerCallback": {
                    "3": "handle_trigger",
                    "1": "handle_tim_trigger_callback",
                    "9": "handle_trigger_callback",
                    "2": "trigger_callback"
                },
                "HAL_TIMEx_CommutationCallback": {
                    "1": "handle_tim_ex_commutation_callback",
                    "2": "handle_commutation",
                    "8": "handle_commutation_callback"
                },
                "*(uint *)(iVar1 + 0x10)": {
                    "1": "timer_flag"
                },
                "*(uint *)(iVar1 + 0xc)": {
                    "1": "control_flag"
                },
                "*(undefined4 *)(iVar1 + 0x10)": {
                    "1": "updated_status_register"
                },
                "*(undefined *)(param_1 + 7)": {
                    "1": "current_status"
                },
                "*(uint *)(*param_1 + 0x18)": {
                    "1": "timer_control_register_1"
                },
                "*(uint *)(*param_1 + 0x1c)": {
                    "1": "timer_control_register_2"
                },
                "0x10": {
                    "1": "status_register"
                },
                "0xc": {
                    "1": "control_register"
                },
                "0x18": {
                    "1": "timer_control_register"
                },
                "0x1c": {
                    "1": "other_timer_control_register"
                }
            }
        },
        "FUN_08004092": {
            "entrypoint": "0x08004092",
            "current_name": "update_bit_value_08004092",
            "code": "\nvoid update_bit_value_08004092(int base_address,uint bit_position,int new_value)\n\n{\n  *(uint *)(base_address + 0x20) = *(uint *)(base_address + 0x20) & ~(1 << (bit_position & 0xff));\n  *(uint *)(base_address + 0x20) = *(uint *)(base_address + 0x20) | new_value << (bit_position & 0xff);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004092": "update_bit_value_08004092",
                "param_1": "base_address",
                "param_2": "bit_position",
                "param_3": "new_value"
            },
            "calling": [
                "FUN_080040b0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08004092": {
                    "1": "update_bitfield",
                    "6": "update_bitwise_value",
                    "7": "update_bit_value",
                    "4": "update_bits"
                },
                "param_1": {
                    "1": "base_addr",
                    "2": "data_address",
                    "20": "base_address"
                },
                "param_2": {
                    "1": "position",
                    "26": "bit_position",
                    "3": "bit_index"
                },
                "param_3": {
                    "14": "new_value",
                    "3": "value",
                    "12": "bit_value",
                    "1": "value_to_update"
                },
                "*(uint *)(param_1 + 0x20)": {
                    "1": "target_value"
                },
                "param_2 & 0xff": {
                    "1": "bit_mask"
                }
            }
        },
        "FUN_080040b0": {
            "entrypoint": "0x080040b0",
            "current_name": "initialize_tim_c_cx_channel_080040b0",
            "code": "\nundefined4 initialize_tim_c_cx_channel_080040b0(uint **timer_channel,undefined4 channel_command)\n\n{\n  uint *channel_ptr;\n  \n  TIM_CCxChannelCmd(*timer_channel,channel_command,0);\n  if (((*timer_channel == (uint *)0x40012c00) && ((timer_status & 0x1111) == 0)) &&\n     ((timer_status & 0x444) == 0)) {\n    timer_control = timer_control & 0xffff7fff;\n  }\n  channel_ptr = *timer_channel;\n  if (((selected_timer_status & 0x1111) == 0) && ((selected_timer_status & 0x444) == 0)) {\n    *channel_ptr = *channel_ptr & 0xfffffffe;\n  }\n  *(undefined *)((int)timer_channel + 0x3d) = 1;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080040b0": "initialize_tim_c_cx_channel_080040b0",
                "param_1": "timer_channel",
                "param_2": "channel_command",
                "puVar1": "channel_ptr",
                "uRam40012c20": "timer_status",
                "uRam40012c44": "timer_control",
                "puVar1[8]": "selected_timer_status"
            },
            "calling": [
                "FUN_08004b3c"
            ],
            "called": [
                "FUN_08004092"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080040b0": {
                    "7": "initialize_tim_c_cx_channel",
                    "1": "configure_peripheral",
                    "3": "configure_timer_channel",
                    "2": "configure_tim_c_cx_channel",
                    "6": "initialize_timer_channel"
                },
                "param_1": {
                    "1": "pwm_registers",
                    "4": "channel_ptr",
                    "2": "peripheral",
                    "5": "timer_config",
                    "6": "timer_channel"
                },
                "param_2": {
                    "2": "command",
                    "1": "parameter",
                    "6": "channel",
                    "4": "channel_config"
                },
                "puVar1": {
                    "1": "config_ptr",
                    "2": "channel_pointer",
                    "3": "channel"
                },
                "uRam40012c00": {
                    "1": "peripheral_address",
                    "7": "timer_base_address",
                    "2": "base_address"
                },
                "uRam40012c20": {
                    "1": "gpio_config_value",
                    "2": "timer_config_value"
                },
                "uRam40012c44": {
                    "1": "memory_value_3",
                    "2": "timer_control"
                },
                "*(undefined *)((int)param_1 + 0x3d)": {
                    "1": "initialized_flag"
                },
                "puVar1[8]": {
                    "1": "selected_timer_status"
                },
                "param_1 + 0x3d": {
                    "1": "flag"
                },
                "FUN_08004092": {
                    "1": "configure_channel",
                    "2": "set_tim_c_cx_channel_cmd"
                },
                "param_3": {
                    "1": "unknown_param",
                    "2": "unused_param"
                },
                "param_1[8]": {
                    "1": "timer_config_register"
                },
                "param_1+8": {
                    "1": "channel_ptr+8"
                },
                "param_1+0x3d": {
                    "1": "channel_ptr+0x3d"
                }
            }
        },
        "FUN_08004110": {
            "entrypoint": "0x08004110",
            "current_name": "update_bitwise_value_08004110",
            "code": "\nvoid update_bitwise_value_08004110(int base_address,uint bit_position,int new_value)\n\n{\n  *(uint *)(base_address + 0x20) = *(uint *)(base_address + 0x20) & ~(4 << (bit_position & 0xff));\n  *(uint *)(base_address + 0x20) = *(uint *)(base_address + 0x20) | new_value << (bit_position & 0xff);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004110": "update_bitwise_value_08004110",
                "param_1": "base_address",
                "param_2": "bit_position",
                "param_3": "new_value"
            },
            "calling": [
                "FUN_0800412c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08004110": {
                    "1": "update_value_at_index",
                    "3": "update_value",
                    "2": "update_flag",
                    "6": "update_bitwise_value"
                },
                "param_1": {
                    "3": "address",
                    "1": "base_addr",
                    "19": "base_address",
                    "2": "data_pointer"
                },
                "param_2": {
                    "5": "bit_offset",
                    "21": "bit_position",
                    "2": "offset",
                    "1": "index"
                },
                "param_3": {
                    "1": "data",
                    "7": "value",
                    "15": "new_value",
                    "8": "bit_value"
                },
                "param_1 + 0x20": {
                    "1": "address_to_modify"
                },
                "*(uint *)(param_1 + 0x20)": {
                    "1": "register_value"
                },
                "4 << (param_2 & 0xff)": {
                    "2": "bit_mask"
                },
                "param_3 << (param_2 & 0xff)": {
                    "2": "new_value"
                },
                "(4 << (param_2 & 0xff))": {
                    "1": "bit_mask"
                },
                "param_1+0x20": {
                    "1": "value_address"
                }
            }
        },
        "FUN_0800412c": {
            "entrypoint": "0x0800412c",
            "current_name": "configure_tim_c_cx_n_channel_0800412c",
            "code": "\nundefined4 configure_tim_c_cx_n_channel_0800412c(uint **channel,undefined4 channel)\n\n{\n  uint *channel_data;\n  \n  TIM_CCxNChannelCmd(*channel,channel,0);\n  channel_data = *channel;\n  if (((ptr_to_input[8] & 0x1111) == 0) && ((ptr_to_input[8] & 0x444) == 0)) {\n    ptr_to_input[0x11] = ptr_to_input[0x11] & 0xffff7fff;\n  }\n  channel_data = *channel;\n  if (((ptr_to_input[8] & 0x1111) == 0) && ((ptr_to_input[8] & 0x444) == 0)) {\n    *channel_data = *channel_data & 0xfffffffe;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800412c": "configure_tim_c_cx_n_channel_0800412c",
                "param_1": "channel",
                "param_2": "channel",
                "puVar1": "channel_data",
                "puVar1[8]": "ptr_to_input[8]",
                "puVar1[0x11]": "ptr_to_input[0x11]"
            },
            "calling": [
                "FUN_08004b3c"
            ],
            "called": [
                "FUN_08004110"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800412c": {
                    "2": "disable_timers",
                    "1": "disable_channel",
                    "7": "configure_tim_c_cx_n_channel",
                    "5": "disable_tim_channel",
                    "3": "disable_timer_channel"
                },
                "param_1": {
                    "1": "channel_pointer",
                    "2": "timer_array",
                    "4": "channel"
                },
                "param_2": {
                    "3": "param_value",
                    "1": "input_param",
                    "2": "param",
                    "9": "channel"
                },
                "puVar1": {
                    "2": "channel",
                    "1": "channel_pointer",
                    "5": "channel_data",
                    "3": "current_timer"
                },
                "param_1[8]": {
                    "1": "timer_data[8]"
                },
                "puVar1[8]": {
                    "1": "timer_status"
                },
                "puVar1[0x11]": {
                    "1": "ptr_to_input[0x11]"
                },
                "FUN_08004110": {
                    "1": "manipulate_channel_data"
                },
                "param_3": {
                    "1": "param3"
                },
                "*puVar1": {
                    "1": "timer_value"
                },
                "*param_1": {
                    "1": "timer_array_value"
                },
                "param_1[0x11]": {
                    "1": "device_status"
                },
                "data[8] & 0x1111": {
                    "1": "check1"
                },
                "data[8] & 0x444": {
                    "1": "check2"
                },
                "puVar1[0]": {
                    "1": "device_control"
                }
            }
        },
        "FUN_08004178": {
            "entrypoint": "0x08004178",
            "current_name": "FUNC_08004178",
            "code": "\nvoid FUNC_08004178(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004178": "FUNC_08004178"
            },
            "calling": [
                "FUN_08003f18"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800417a": {
            "entrypoint": "0x0800417a",
            "current_name": "FUNC_0800417a",
            "code": "\nvoid FUNC_0800417a(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800417a": "FUNC_0800417a"
            },
            "calling": [
                "FUN_08003f18"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800417c": {
            "entrypoint": "0x0800417c",
            "current_name": "clear_flags_0800417c",
            "code": "\nvoid clear_flags_0800417c(int *data)\n\n{\n  *(unsigned_int *)(*data + 0xc) = *(unsigned_int *)(*data + 0xc) & 0xfffffedf;\n  *(unsigned_int *)(*data + 0x14) = *(unsigned_int *)(*data + 0x14) & 0xfffffffe;\n  *(unknown *)((int)data + 0x3a) = 0x20;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800417c": "clear_flags_0800417c",
                "param_1": "data",
                "uint": "unsigned_int",
                "undefined": "unknown"
            },
            "calling": [
                "FUN_080046b8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800417c": {
                    "1": "update_parameters",
                    "2": "clear_bits_and_set_flag",
                    "5": "clear_flags"
                },
                "param_1": {
                    "1": "parameters",
                    "7": "data",
                    "2": "flags",
                    "5": "input_array"
                },
                "*(uint *)(*param_1 + 0xc)": {
                    "1": "value_at_offset_c",
                    "3": "flag1",
                    "7": "value1"
                },
                "*(uint *)(*param_1 + 0x14)": {
                    "1": "value_at20th_address",
                    "7": "value2",
                    "3": "flag2"
                },
                "*(undefined *)((int)param_1 + 0x3a)": {
                    "4": "flag",
                    "2": "character",
                    "1": "flag3"
                },
                "*param_1": {
                    "1": "address_value"
                },
                "(int)param_1 + 0x3a": {
                    "1": "address_plus3_a"
                },
                "0xc": {
                    "1": "mask1_offset"
                },
                "0x14": {
                    "1": "offset2"
                },
                "0xfffffedf": {
                    "1": "bit_mask_clear_flag"
                },
                "0xfffffffe": {
                    "1": "flag2_mask"
                },
                "0x3a": {
                    "1": "flag_offset"
                },
                "0x20": {
                    "2": "new_value"
                },
                "uint": {
                    "1": "unsigned_int"
                },
                "undefined": {
                    "1": "unknown"
                },
                "*(unsignedInt *)(*dataPtrValue + 0xc)": {
                    "1": "flags_value"
                },
                "*(unsignedInt *)(*dataPtrValue + 0x14)": {
                    "1": "value"
                },
                "((int)dataPtr + 0x3a)": {
                    "1": "unknown_var"
                },
                "param_1[0]": {
                    "1": "input_array[0]"
                },
                "input_array + 0xc": {
                    "1": "input_array_start"
                },
                "input_array + 0x14": {
                    "1": "input_array_end"
                },
                "param_1 + 0x3a": {
                    "1": "param_1_offset"
                },
                "c": {
                    "1": "array_offset_c"
                },
                "14": {
                    "1": "array_offset14"
                },
                "_param_1": {
                    "1": "base_address"
                },
                "*(uint *)(*data + 0xc)": {
                    "1": "flag_value1"
                },
                "*(uint *)(*data + 0x14)": {
                    "1": "flag_value2"
                },
                "*(undefined *)((int)data + 0x3a)": {
                    "1": "flag_value3"
                },
                "*((uint *)(*param_1 + 0xc))": {
                    "1": "flags_value1"
                },
                "*((uint *)(*param_1 + 0x14))": {
                    "1": "flags_value2"
                },
                "*((undefined *)((int)param_1 + 0x3a))": {
                    "1": "character"
                }
            }
        },
        "FUN_08004198": {
            "entrypoint": "0x08004198",
            "current_name": "process_data_08004198",
            "code": "\nundefined4 process_data_08004198(int *data)\n\n{\n  short count;\n  byte *byte_ptr;\n  \n  if (*(char *)((int)data + 0x39) != '!') {\n    return 2;\n  }\n  if (flag == 0x1000) {\n    *(uint *)(*data + 4) = *(ushort *)encoded_data & 0x1ff;\n    if (increment_flag == 0) {\n      encoded_data = encoded_data + 2;\n    }\n    else {\n      encoded_data = encoded_data + 1;\n    }\n  }\n  else {\n    byte_ptr = (byte *)encoded_data;\n    encoded_data = (int)(byte_ptr + 1);\n    *(uint *)(*data + 4) = (uint)*byte_ptr;\n  }\n  count = *(short *)((int)data + 0x26) + -1;\n  *(short *)((int)data + 0x26) = count;\n  if (count == 0) {\n    *(uint *)(*data + 0xc) = *(uint *)(*data + 0xc) & 0xffffff7f;\n    *(uint *)(*data + 0xc) = *(uint *)(*data + 0xc) | 0x40;\n    return 0;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08004198": "process_data_08004198",
                "param_1": "data",
                "pbVar2": "byte_ptr",
                "sVar1": "count",
                "param_1[2]": "flag",
                "param_1[4]": "increment_flag",
                "param_1[8]": "encoded_data"
            },
            "calling": [
                "FUN_080046b8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08004198": {
                    "1": "decode_and_process_data",
                    "17": "process_data",
                    "6": "parse_data"
                },
                "param_1": {
                    "17": "data",
                    "2": "input_data",
                    "1": "parameter",
                    "5": "data_ptr"
                },
                "pbVar2": {
                    "18": "byte_ptr",
                    "8": "byte_pointer",
                    "1": "byte_data",
                    "4": "current_byte"
                },
                "sVar1": {
                    "3": "remaining_steps",
                    "7": "remaining_iterations",
                    "10": "count",
                    "1": "count_minus_one",
                    "5": "counter"
                },
                "*(char *)((int)param_1 + 0x39)": {
                    "1": "delimiter"
                },
                "param_1[2]": {
                    "1": "constant_value"
                },
                "*(uint *)(*param_1 + 4)": {
                    "1": "uint_value_at_offset_4"
                },
                "*(ushort *)param_1[8]": {
                    "1": "encoded_value"
                },
                "param_1[4]": {
                    "1": "increment_flag"
                },
                "param_1[8]": {
                    "1": "encoded_data"
                },
                "*(uint *)(*param_1 + 0xc)": {
                    "1": "uint_value_at_offset_0xc"
                },
                "*(short *)((int)param_1 + 0x26)": {
                    "2": "count",
                    "1": "short_value_at_offset_0x26"
                },
                "*param_1": {
                    "1": "data"
                },
                "*(ushort *)param_1[8] & 0x1ff": {
                    "1": "masked_value"
                }
            }
        },
        "FUN_08004204": {
            "entrypoint": "0x08004204",
            "current_name": "calculate_clock_frequency_08004204",
            "code": "\nvoid calculate_clock_frequency_08004204(int *clock_params)\n\n{\n  int pclk1_freq;\n  int pclk1_freq2;\n  int pclk1_freq3;\n  int pclk1_freq4;\n  int pclk1_freq5;\n  int pclk2_freq1;\n  int pclk2_freq2;\n  int pclk2_freq3;\n  int pclk2_freq4;\n  int base_address;\n  \n  *(uint *)(*clock_params + 0x10) = *(uint *)(*clock_params + 0x10) & 0xffffcfff | clock_params[3];\n  *(uint *)(*clock_params + 0xc) =\n       clock_params[2] | clock_params[4] | clock_params[5] | *(uint *)(*clock_params + 0xc) & 0xffffe9f3;\n  *(uint *)(*clock_params + 0x14) = *(uint *)(*clock_params + 0x14) & 0xfffffcff | clock_params[6];\n  base_address = *clock_params;\n  if (base_address != 0x40013800) {\n    pclk1_freq = get_pclk1_frequency();\n    pclk2_freq1 = clock_params[1];\n    pclk1_freq2 = get_pclk1_frequency();\n    pclk2_freq2 = clock_params[1];\n    pclk1_freq3 = get_pclk1_frequency();\n    pclk2_freq3 = clock_params[1];\n    pclk1_freq4 = get_pclk1_frequency();\n    pclk2_freq4 = clock_params[1];\n    pclk1_freq5 = get_pclk1_frequency();\n    *(uint *)(base_address + 8) =\n         ((uint)((int)((ulonglong)\n                       (((uint)(pclk1_freq4 * 0x19) / (uint)(pclk2_freq4 << 2) +\n                        (int)(((ulonglong)(uint)(pclk1_freq5 * 0x19) / (ulonglong)(uint)(clock_params[1] << 2))\n                             / 100) * -100) * 0x10 + 0x32) * 0x51eb851f >> 0x20) << 0x17) >> 0x1c) +\n         ((((uint)(pclk1_freq2 * 0x19) / (uint)(pclk2_freq2 << 2) +\n           (int)(((ulonglong)(uint)(pclk1_freq3 * 0x19) / (ulonglong)(uint)(pclk2_freq3 << 2)) / 100) * -100) *\n           0x10 + 0x32) / 100 & 0xf0) +\n         (int)(((ulonglong)(uint)(pclk1_freq * 0x19) / (ulonglong)(uint)(pclk2_freq1 << 2)) / 100) * 0x10;\n    return;\n  }\n  base_address = get_pclk2_frequency();\n  pclk1_freq5 = clock_params[1];\n  pclk1_freq = get_pclk2_frequency();\n  pclk2_freq1 = clock_params[1];\n  pclk1_freq2 = get_pclk2_frequency();\n  pclk2_freq2 = clock_params[1];\n  pclk1_freq3 = get_pclk2_frequency();\n  pclk2_freq3 = clock_params[1];\n  pclk1_freq4 = get_pclk2_frequency();\n  result = ((uint)((int)((ulonglong)\n                               (((uint)(pclk1_freq3 * 0x19) / (uint)(pclk2_freq3 << 2) +\n                                (int)(((ulonglong)(uint)(pclk1_freq4 * 0x19) /\n                                      (ulonglong)(uint)(clock_params[1] << 2)) / 100) * -100) * 0x10 +\n                               0x32) * 0x51eb851f >> 0x20) << 0x17) >> 0x1c) +\n                 ((((uint)(pclk1_freq * 0x19) / (uint)(pclk2_freq1 << 2) +\n                   (int)(((ulonglong)(uint)(pclk1_freq2 * 0x19) / (ulonglong)(uint)(pclk2_freq2 << 2)) / 100) *\n                   -100) * 0x10 + 0x32) / 100 & 0xf0) +\n                 (int)(((ulonglong)(uint)(base_address * 0x19) / (ulonglong)(uint)(pclk1_freq5 << 2)) / 100) *\n                 0x10;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004204": "calculate_clock_frequency_08004204",
                "param_1": "clock_params",
                "iVar1": "pclk1_freq",
                "iVar2": "pclk1_freq2",
                "iVar3": "pclk1_freq3",
                "iVar4": "pclk1_freq4",
                "iVar5": "pclk1_freq5",
                "iVar6": "pclk2_freq1",
                "iVar7": "pclk2_freq2",
                "iVar8": "pclk2_freq3",
                "iVar9": "pclk2_freq4",
                "iVar10": "base_address",
                "iRam40013808": "result",
                "HAL_RCC_GetPCLK1Freq": "get_pclk1_frequency",
                "HAL_RCC_GetPCLK2Freq": "get_pclk2_frequency"
            },
            "calling": [
                "FUN_0800441a"
            ],
            "called": [
                "FUN_08003c50",
                "FUN_08003c70"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08004204": {
                    "1": "calculate_clock_configuration",
                    "2": "calculate_clock_config",
                    "9": "calculate_clock_frequency"
                },
                "param_1": {
                    "4": "config_params",
                    "1": "config_parameters",
                    "9": "clock_params",
                    "2": "clock_settings"
                },
                "iVar1": {
                    "2": "pclk_freq",
                    "1": "pclk1",
                    "18": "pclk1_freq",
                    "8": "pclk1_freq1"
                },
                "iVar2": {
                    "2": "pclk_freq",
                    "14": "pclk1_freq2",
                    "1": "pclk1_freq1",
                    "11": "pclk1_freq"
                },
                "iVar3": {
                    "2": "pclk_freq",
                    "1": "pclk1_2",
                    "14": "pclk1_freq3",
                    "11": "pclk1_freq"
                },
                "iVar4": {
                    "2": "pclk_freq",
                    "1": "pclk1_3",
                    "14": "pclk1_freq4",
                    "11": "pclk1_freq"
                },
                "iVar5": {
                    "2": "pclk_freq",
                    "14": "pclk1_freq5",
                    "1": "pclk1_freq4",
                    "11": "pclk1_freq"
                },
                "iVar6": {
                    "1": "clock_data",
                    "2": "param1_1",
                    "4": "pclk1_freq6",
                    "3": "pclk2_freq",
                    "5": "pclk2_freq1"
                },
                "iVar7": {
                    "8": "pclk2_freq2",
                    "1": "pclk1_6",
                    "2": "param1_value",
                    "4": "pclk1_freq7"
                },
                "iVar8": {
                    "1": "clock_data",
                    "8": "pclk2_freq3",
                    "2": "param1_value",
                    "4": "pclk1_freq8"
                },
                "iVar9": {
                    "1": "pclk1_8",
                    "8": "pclk2_freq4",
                    "2": "param1_value",
                    "4": "pclk1_freq9"
                },
                "iVar10": {
                    "1": "clock_data",
                    "2": "pclk1_freq10",
                    "3": "pclk2_freq5",
                    "7": "base_address"
                },
                "iRam40013808": {
                    "1": "ram_addr",
                    "3": "result",
                    "2": "calculated_frequency"
                },
                "HAL_RCC_GetPCLK1Freq": {
                    "10": "get_pclk1_frequency",
                    "2": "get_pclk1_freq"
                },
                "HAL_RCC_GetPCLK2Freq": {
                    "2": "get_pclk2_freq",
                    "9": "get_pclk2_frequency"
                },
                "FUN_08003c50": {
                    "1": "get_coefficient1"
                },
                "FUN_08003c70": {
                    "1": "get_coefficient2"
                }
            }
        },
        "FUN_080043b4": {
            "entrypoint": "0x080043b4",
            "current_name": "check_parameters_080043b4",
            "code": "\nundefined4 check_parameters_080043b4(uint **param_array,uint mask,uint expected_result,int start_time,uint timeout)\n\n{\n  int current_time;\n  \n  do {\n    if (((mask & ~**param_array) == 0) != expected_result) {\n      return 0;\n    }\n  } while ((timeout == 0xffffffff) ||\n          ((timeout != 0 && (current_time = HAL_GetTick(), (uint)(current_time - start_time) <= timeout))));\n  (*param_array)[3] = (*param_array)[3] & 0xfffffe5f;\n  (*param_array)[5] = (*param_array)[5] & 0xfffffffe;\n  *(undefined *)((int)param_array + 0x39) = 0x20;\n  *(undefined *)((int)param_array + 0x3a) = 0x20;\n  *(undefined *)(param_array + 0xe) = 0;\n  return 3;\n}\n\n",
            "renaming": {
                "FUN_080043b4": "check_parameters_080043b4",
                "param_1": "param_array",
                "param_2": "mask",
                "param_3": "expected_result",
                "param_4": "start_time",
                "param_5": "timeout",
                "iVar1": "current_time"
            },
            "calling": [
                "FUN_08004478"
            ],
            "called": [
                "FUN_08001cc4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080043b4": {
                    "1": "validate_parameters",
                    "3": "check_conditions",
                    "2": "check_param_validity",
                    "7": "check_parameters"
                },
                "param_1": {
                    "1": "input_pointer",
                    "3": "array_ptr",
                    "6": "param_array",
                    "2": "parameters",
                    "4": "input_array"
                },
                "param_2": {
                    "4": "flag",
                    "8": "mask",
                    "1": "target",
                    "2": "flags",
                    "3": "bit_mask"
                },
                "param_3": {
                    "2": "check_result",
                    "1": "condition_result",
                    "10": "expected_result",
                    "7": "condition"
                },
                "param_4": {
                    "7": "start_tick",
                    "1": "previous_ticks",
                    "20": "start_time"
                },
                "param_5": {
                    "21": "timeout",
                    "1": "max_interval",
                    "4": "time_limit",
                    "2": "max_time"
                },
                "iVar1": {
                    "16": "current_time",
                    "12": "current_tick",
                    "1": "current_ticks"
                },
                "*param_1": {
                    "1": "parameter_value"
                },
                "**param_1": {
                    "1": "dereferenced_parameter_value"
                },
                "*(undefined *)((int)param_1 + 0x39)": {
                    "1": "status_register_1"
                },
                "*(undefined *)((int)param_1 + 0x3a)": {
                    "1": "status_register_2"
                },
                "*(undefined *)(param_1 + 0xe)": {
                    "1": "data"
                }
            }
        },
        "FUN_08004418": {
            "entrypoint": "0x08004418",
            "current_name": "FUNC_08004418",
            "code": "\nvoid FUNC_08004418(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004418": "FUNC_08004418"
            },
            "calling": [
                "FUN_0800441a"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800441a": {
            "entrypoint": "0x0800441a",
            "current_name": "initialize_uart_0800441a",
            "code": "\nundefined4 initialize_uart_0800441a(int *uart_config)\n\n{\n  if (uart_config != (int *)0x0) {\n    if (*(char *)((int)uart_config + 0x39) == '\\0') {\n      *(undefined *)(uart_config + 0xe) = 0;\n      initialize_uart_0800441a_peripherals();\n    }\n    *(undefined *)((int)uart_config + 0x39) = 0x24;\n    *(uint *)(*uart_config + 0xc) = *(uint *)(*uart_config + 0xc) & 0xffffdfff;\n    set_uart_configuration(uart_config);\n    *(uint *)(*uart_config + 0x10) = *(uint *)(*uart_config + 0x10) & 0xffffb7ff;\n    *(uint *)(*uart_config + 0x14) = *(uint *)(*uart_config + 0x14) & 0xffffffd5;\n    *(uint *)(*uart_config + 0xc) = *(uint *)(*uart_config + 0xc) | 0x2000;\n    uart_error_status = 0;\n    *(undefined *)((int)uart_config + 0x39) = 0x20;\n    *(undefined *)((int)uart_config + 0x3a) = 0x20;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_0800441a": "initialize_uart_0800441a",
                "param_1": "uart_config",
                "HAL_UART_MspInit": "initialize_uart_peripherals",
                "UART_SetConfig": "set_uart_configuration",
                "param_1[0xf]": "uart_error_status"
            },
            "calling": [
                "FUN_08004f4c"
            ],
            "called": [
                "FUN_08004204",
                "FUN_08004418"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800441a": {
                    "29": "initialize_uart",
                    "1": "initialize_uart_settings"
                },
                "param_1": {
                    "15": "uart_config",
                    "7": "uart_handle",
                    "1": "uart",
                    "6": "uart_instance"
                },
                "HAL_UART_MspInit": {
                    "1": "configure_uart_pins",
                    "2": "initialize_uart_hardware",
                    "11": "initialize_uart_peripherals",
                    "5": "initialize_uart_peripheral"
                },
                "FUN_08004204": {
                    "2": "initialize_uart_gpio",
                    "1": "check_uart_instance_validity",
                    "6": "initialize_uart_peripherals",
                    "3": "initialize_uart_peripheral"
                },
                "FUNC_08004418": {
                    "2": "unknown_function",
                    "1": "some_function",
                    "5": "hal_uart_msp_init",
                    "3": "undefined_function"
                },
                "*(char *)((int)param_1 + 0x39)": {
                    "2": "uart_config_flag",
                    "1": "is_uart_initialized"
                },
                "*(undefined *)(param_1 + 0xe)": {
                    "2": "uart_flag",
                    "1": "initialized_flag"
                },
                "*(undefined *)((int)param_1 + 0x39)": {
                    "1": "uart_flag1"
                },
                "0x24": {
                    "1": "uart_init_flag_set"
                },
                "*(uint *)(*param_1 + 0xc)": {
                    "1": "uart_register1"
                },
                "UART_SetConfig": {
                    "9": "set_uart_configuration",
                    "2": "configure_uart",
                    "6": "set_uart_config"
                },
                "*(uint *)(*param_1 + 0x10)": {
                    "1": "uart_control_register"
                },
                "*(uint *)(*param_1 + 0x14)": {
                    "1": "uart_modem_reg"
                },
                "0xffffdfff": {
                    "1": "uart_config_mask"
                },
                "0xffffb7ff": {
                    "1": "uart_control_mask"
                },
                "0xffffffd5": {
                    "1": "uart_baud_rate_mask"
                },
                "0x2000": {
                    "1": "uart_config_flag"
                },
                "param_1[0xf]": {
                    "1": "uart_interrupt_flag"
                },
                "0x20": {
                    "1": "uart_default_flag"
                },
                "(unchanged - not included)\n: *(char *)((int)param_1 + 0x39): ": {
                    "1": "uart_initialized"
                },
                "*(undefined *)((int)param_1 + 0x3a)": {
                    "1": "uart_flag2"
                },
                "e": {
                    "1": "error_flag"
                },
                "*(uint *)(*param_1 + 0xc) | 0x2000": {
                    "1": "uart_config_fourth_value"
                },
                "initialize_UART": {
                    "1": "initialize_uart"
                },
                "uart_instance": {
                    "1": "uart_instance"
                }
            }
        },
        "FUN_08004478": {
            "entrypoint": "0x08004478",
            "current_name": "process_data_08004478",
            "code": "\nundefined4 process_data_08004478(int *data_buffer,ushort *data,int data_length,undefined4 timeout)\n\n{\n  int result;\n  undefined4 return_value;\n  \n  if (*(char *)((int)data_buffer + 0x39) == ' ') {\n    if (data == (ushort *)0x0) {\n      return_value = 1;\n    }\n    else if (data_length == 0) {\n      return_value = 1;\n    }\n    else if (*(char *)(data_buffer + 0xe) == '\\x01') {\n      return_value = 2;\n    }\n    else {\n      *(undefined *)(data_buffer + 0xe) = 1;\n      counter = 0;\n      *(undefined *)((int)data_buffer + 0x39) = 0x21;\n      return_value = get_current_time();\n      *(short *)(data_buffer + 9) = (short)data_length;\n      *(short *)((int)data_buffer + 0x26) = (short)data_length;\n      while (*(short *)((int)data_buffer + 0x26) != 0) {\n        *(short *)((int)data_buffer + 0x26) = *(short *)((int)data_buffer + 0x26) + -1;\n        if (flag_value == 0x1000) {\n          result = wait_and_check_result;\n          if (result != 0) {\n            return 3;\n          }\n          *(uint *)(*data_buffer + 4) = *data & 0x1ff;\n          if (extra_flag == 0) {\n            data = data + 1;\n          }\n          else {\n            data = (ushort *)((int)data + 1);\n          }\n        }\n        else {\n          result = wait_and_check_result;\n          if (result != 0) {\n            return 3;\n          }\n          *(uint *)(*data_buffer + 4) = (uint)*(byte *)data;\n          data = (ushort *)((int)data + 1);\n        }\n      }\n      result = wait_and_check_result2;\n      if (result == 0) {\n        *(undefined *)((int)data_buffer + 0x39) = 0x20;\n        *(undefined *)(data_buffer + 0xe) = 0;\n        return_value = 0;\n      }\n      else {\n        return_value = 3;\n      }\n    }\n  }\n  else {\n    return_value = 2;\n  }\n  return return_value;\n}\n\n",
            "renaming": {
                "FUN_08004478": "process_data_08004478",
                "param_1": "data_buffer",
                "param_2": "data",
                "param_3": "data_length",
                "param_4": "timeout",
                "iVar1": "result",
                "uVar2": "return_value",
                "HAL_GetTick": "get_current_time",
                "UART_WaitOnFlagUntilTimeout": "wait_for_flag_until_timeout",
                "param_1[2]": "flag_value",
                "param_1[4]": "extra_flag",
                "param_1[0xf]": "counter",
                "UART_WaitOnFlagUntilTimeout(param_1,0x80,0,uVar2,param_4)": "wait_and_check_result",
                "UART_WaitOnFlagUntilTimeout(param_1,0x40,0,uVar2,param_4)": "wait_and_check_result2"
            },
            "calling": [
                "FUN_080053d4"
            ],
            "called": [
                "FUN_08001cc4",
                "FUN_080043b4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08004478": {
                    "1": "process_input_data",
                    "29": "process_data"
                },
                "param_1": {
                    "1": "data_array",
                    "2": "data",
                    "19": "data_buffer",
                    "8": "data_ptr"
                },
                "param_2": {
                    "3": "buffer",
                    "9": "data",
                    "1": "data_payload",
                    "2": "buffer_ptr",
                    "5": "input_data"
                },
                "param_3": {
                    "1": "stream_length",
                    "2": "payload_size",
                    "3": "input_length",
                    "5": "buffer_size",
                    "6": "input_size",
                    "9": "data_length"
                },
                "param_4": {
                    "28": "timeout",
                    "1": "param_4"
                },
                "iVar1": {
                    "3": "return_value",
                    "2": "status",
                    "20": "result"
                },
                "uVar2": {
                    "9": "status",
                    "12": "return_value",
                    "7": "result",
                    "2": "error_code"
                },
                "HAL_GetTick": {
                    "3": "get_current_tick",
                    "2": "get_tick",
                    "4": "get_current_time"
                },
                "UART_WaitOnFlagUntilTimeout": {
                    "4": "wait_on_flag_until_timeout",
                    "5": "wait_for_flag_until_timeout",
                    "2": "wait_for_flag"
                },
                "param_1 + 0x39": {
                    "1": "status"
                },
                "param_1 + 0xe": {
                    "2": "flag"
                },
                "param_1 + 0xf": {
                    "1": "counter"
                },
                "param_1 + 9": {
                    "1": "remaining"
                },
                "param_1 + 0x26": {
                    "1": "current"
                },
                "param_1[2]": {
                    "1": "flag_value"
                },
                "param_1[4]": {
                    "1": "extra_flag"
                },
                "param_2 + 1": {
                    "1": "next_data_buffer"
                },
                "*param_1": {
                    "1": "ptr_data_buffer"
                },
                "*(char *)((int)param_1 + 0x39)": {
                    "1": "state"
                },
                "param_2 == (ushort *)0x0": {
                    "1": "input_buffer_is_null"
                },
                "*(char *)(param_1 + 0xe) == '\\x01'": {
                    "1": "is_flag_set"
                },
                "*(undefined *)(param_1 + 0xe)": {
                    "1": "reset_flag"
                },
                "param_1[0xf]": {
                    "1": "counter"
                },
                "*(undefined *)((int)param_1 + 0x39)": {
                    "1": "reset_state"
                },
                "uVar2 = HAL_GetTick()": {
                    "1": "tick_value"
                },
                "*(short *)(param_1 + 9)": {
                    "1": "param3_as_short"
                },
                "*(short *)((int)param_1 + 0x26)": {
                    "1": "counter_as_short"
                },
                "param_1[2] == 0x1000": {
                    "1": "flag_is1000"
                },
                "UART_WaitOnFlagUntilTimeout(param_1,0x80,0,uVar2,param_4)": {
                    "1": "wait_and_check_result"
                },
                "iVar1 != 0": {
                    "1": "wait_failed"
                },
                "*(uint *)(*param_1 + 4)": {
                    "1": "data_ptr_value"
                },
                "*param_2 & 0x1ff": {
                    "1": "mask_value"
                },
                "param_1[4] == 0": {
                    "1": "is_zero"
                },
                "(ushort *)((int)param_2 + 1)": {
                    "1": "incremented_input_buffer"
                },
                "(uint)*(byte *)param_2": {
                    "1": "byte_value"
                },
                "param_2 = (ushort *)((int)param_2 + 1)": {
                    "1": "increment_input_buffer"
                },
                "UART_WaitOnFlagUntilTimeout(param_1,0x40,0,uVar2,param_4)": {
                    "1": "wait_and_check_result2"
                }
            }
        },
        "FUN_0800455a": {
            "entrypoint": "0x0800455a",
            "current_name": "validate_input_0800455a",
            "code": "\nundefined4 validate_input_0800455a(int *input_array,int value1,int value2)\n\n{\n  if (*(char *)((int)input_array + 0x39) != ' ') {\n    return 2;\n  }\n  if (value1 == 0) {\n    return 1;\n  }\n  if (value2 == 0) {\n    return 1;\n  }\n  if (*(char *)(input_array + 0xe) != '\\x01') {\n    input_array[8] = value1;\n    *(short *)(input_array + 9) = (short)value2;\n    *(short *)((int)input_array + 0x26) = (short)value2;\n    counter = 0;\n    *(undefined *)((int)input_array + 0x39) = 0x21;\n    *(undefined *)(input_array + 0xe) = 0;\n    *(uint *)(*input_array + 0xc) = *(uint *)(*input_array + 0xc) | 0x80;\n    return 0;\n  }\n  return 2;\n}\n\n",
            "renaming": {
                "FUN_0800455a": "validate_input_0800455a",
                "param_1": "input_array",
                "param_2": "value1",
                "param_3": "value2",
                "param_1[8]": "input_array[8]",
                "param_1[0xf]": "counter"
            },
            "calling": [
                "FUN_08005568",
                "FUN_08005604"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800455a": {
                    "1": "convert_input_to_binary",
                    "2": "update_param",
                    "7": "process_data",
                    "11": "validate_input",
                    "3": "update_data"
                },
                "param_1": {
                    "8": "data",
                    "2": "param_array",
                    "1": "configuration",
                    "9": "input_array"
                },
                "param_2": {
                    "1": "length",
                    "6": "value_1",
                    "16": "value1",
                    "2": "size"
                },
                "param_3": {
                    "1": "length",
                    "2": "value",
                    "6": "value_2",
                    "16": "value2"
                },
                "*(char *)((int)param_1 + 0x39)": {
                    "1": "buffer_end",
                    "2": "char1"
                },
                "*(char *)(param_1 + 0xe)": {
                    "6": "flag",
                    "1": "char_at_offset_0xe",
                    "2": "char2"
                },
                "param_1[8]": {
                    "1": "data_value1",
                    "2": "result1",
                    "3": "input_array[8]"
                },
                "*(short *)(param_1 + 9)": {
                    "1": "array_element_9",
                    "2": "result2"
                },
                "*(short *)((int)param_1 + 0x26)": {
                    "1": "short_at_index2",
                    "2": "result3"
                },
                "param_1[0xf]": {
                    "1": "param_array_index15",
                    "3": "counter",
                    "2": "result4"
                },
                "*(undefined *)((int)param_1 + 0x39)": {
                    "1": "modified_flag_char"
                },
                "*(undefined *)(param_1 + 0xe)": {
                    "1": "toggle"
                },
                "*(uint *)(*param_1 + 0xc)": {
                    "1": "uint_value_at_address_of_array_plus_0xc",
                    "2": "pointer_value"
                },
                "param_1 + 0xe": {
                    "2": "flag",
                    "1": "data_offset"
                },
                "param_1 + 0x26": {
                    "1": "user_info.level_progress"
                },
                "param_1[9]": {
                    "1": "value2_updated"
                },
                "*(char *)((int)data + 0x39)": {
                    "1": "character"
                },
                "*(char *)(data + 0xe)": {
                    "1": "flag_value"
                },
                "*(uint *)(*data + 0xc)": {
                    "1": "pointer_value"
                },
                "return 2": {
                    "1": "invalid_character"
                },
                "return 1": {
                    "1": "invalid_parameter"
                },
                "return 0": {
                    "1": "success"
                },
                "param_1 + 0x39": {
                    "1": "data_end"
                },
                "param_1 + 9": {
                    "1": "short_offset"
                },
                "(int)param_1 + 0x26": {
                    "1": "var2",
                    "2": "short_value2"
                },
                "(int)param_1 + 0x39": {
                    "1": "space_character"
                },
                "deviceInfo": {
                    "1": "device"
                },
                "newParam2": {
                    "1": "param2_value"
                },
                "newParam3": {
                    "1": "param3_value"
                },
                "PTR_DAT_39": {
                    "1": "char_check"
                },
                "PTR_10": {
                    "1": "short_value1"
                },
                "PTR_26": {
                    "1": "short_value2"
                },
                "userInfo + 0x39": {
                    "1": "user_info.space_status"
                },
                "userInfo + 0xe": {
                    "1": "user_info.permission_flag"
                },
                "userInfo + 0xc": {
                    "1": "user_info.settings"
                },
                "char_val": {
                    "1": "character_value"
                },
                "short_val": {
                    "1": "short_value"
                },
                "param_1+9": {
                    "1": "input_array+9"
                },
                "(int)param_1+0x26": {
                    "1": "(int)input_array+0x26"
                },
                "(int)param_1+0x39": {
                    "1": "(int)input_array+0x39"
                },
                "array": {
                    "1": "array"
                },
                "value1": {
                    "1": "value1"
                },
                "value2": {
                    "1": "value2"
                },
                "parameterArray + 0xe": {
                    "1": "parameter_array_index"
                },
                "var1": {
                    "1": "char_val"
                },
                "var2": {
                    "1": "short_val"
                },
                "var3": {
                    "1": "zero"
                },
                "var4": {
                    "1": "space"
                },
                "var5": {
                    "1": "one"
                },
                "var6": {
                    "1": "flag"
                },
                "*param_1": {
                    "1": "ptr"
                },
                "*param_1 + 0xc": {
                    "1": "ptr_value"
                },
                "input_array": {
                    "1": "input_buffer"
                },
                "value_1": {
                    "1": "length"
                },
                "value_2": {
                    "1": "width"
                }
            }
        },
        "FUN_080045a2": {
            "entrypoint": "0x080045a2",
            "current_name": "process_data_080045a2",
            "code": "\nundefined_value4 process_data_080045a2(int_value *data,int_value value1,int_value value2)\n\n{\n  if (*(character *)((int_value)data + 0x3a) != ' ') {\n    return 2;\n  }\n  if (value1 == 0) {\n    return 1;\n  }\n  if (value2 == 0) {\n    return 1;\n  }\n  if (*(character *)(data + 0xe) != '\\x01') {\n    input_array[10] = value1;\n    *(short_value *)(data + 0xb) = short_value;\n    *(short_value *)((int_value)data + 0x2e) = short_value;\n    input_array[15] = 0;\n    *(undefined_value *)((int_value)data + 0x3a) = 0x22;\n    *(undefined_value *)(data + 0xe) = 0;\n    *(unsigned_int_value *)(*data + 0xc) = *(unsigned_int_value *)(*data + 0xc) | 0x100;\n    *(unsigned_int_value *)(*data + 0x14) = *(unsigned_int_value *)(*data + 0x14) | 1;\n    *(unsigned_int_value *)(*data + 0xc) = *(unsigned_int_value *)(*data + 0xc) | 0x20;\n    return 0;\n  }\n  return 2;\n}\n\n",
            "renaming": {
                "FUN_080045a2": "process_data_080045a2",
                "param_1": "data",
                "param_2": "value1",
                "param_3": "value2",
                "param_1[10]": "input_array[10]",
                "param_1[0xf]": "input_array[15]",
                "(short)param_3": "short_value",
                "char": "character",
                "short": "short_value",
                "int": "int_value",
                "undefined": "undefined_value",
                "uint": "unsigned_int_value"
            },
            "calling": [
                "FUN_08005510",
                "FUN_080054d4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080045a2": {
                    "1": "update_data",
                    "9": "validate_input",
                    "2": "initialize_data"
                },
                "param_1": {
                    "1": "input_data",
                    "9": "data",
                    "3": "data_structure",
                    "7": "input_array"
                },
                "param_2": {
                    "1": "size_of_array",
                    "8": "value_1",
                    "15": "value1",
                    "2": "size",
                    "4": "length"
                },
                "param_3": {
                    "6": "value",
                    "1": "size_param_3",
                    "8": "value_2",
                    "15": "value2"
                },
                "*(char *)((int)param_1 + 0x3a)": {
                    "1": "status_check",
                    "4": "character",
                    "2": "char_check"
                },
                "*(char *)(param_1 + 0xe)": {
                    "5": "flag",
                    "1": "element_char",
                    "2": "flag_check",
                    "3": "flag_value"
                },
                "param_1[10]": {
                    "1": "array_element10",
                    "2": "data_structure[10]",
                    "4": "input_array[10]",
                    "3": "data[10]"
                },
                "*(short *)(param_1 + 0xb)": {
                    "1": "array_element11",
                    "5": "input_array[11]"
                },
                "*(short *)((int)param_1 + 0x2e)": {
                    "1": "short_at_0x2e",
                    "2": "input_array[46]"
                },
                "param_1[0xf]": {
                    "1": "data_array[0xf]",
                    "2": "data[15]",
                    "4": "input_array[15]"
                },
                "*(undefined *)((int)param_1 + 0x3a)": {
                    "4": "input_array[58]",
                    "1": "input_params[58]"
                },
                "*(undefined *)(param_1 + 0xe)": {
                    "1": "input_array_flag",
                    "4": "input_array[14]"
                },
                "*(uint *)(*param_1 + 0xc)": {
                    "1": "first_flag",
                    "2": "pointer_value1"
                },
                "*(uint *)(*param_1 + 0x14)": {
                    "1": "flag2",
                    "2": "pointer_value2"
                },
                "e": {
                    "1": "flag"
                },
                "data[10]": {
                    "1": "value1_processed"
                },
                "data[11]": {
                    "1": "new_value2"
                },
                "data[14]": {
                    "1": "flag2"
                },
                "data[15]": {
                    "1": "flag3"
                },
                "data": {
                    "1": "data_ptr"
                },
                "value1": {
                    "1": "input_value1"
                },
                "value2": {
                    "1": "new_value2"
                },
                "(*(char *)((int)param_1 + 0x3a)": {
                    "1": "data_ptr[0x3a]"
                },
                "(*(char *)(param_1 + 0xe)": {
                    "1": "data_ptr[0xe]"
                },
                "param_1 + 0xe": {
                    "1": "element_flag"
                },
                "param_1 + 0xb": {
                    "1": "short_value"
                },
                "param_1 + 0x2e": {
                    "1": "short_value_copy"
                },
                "param_1 + 0xf": {
                    "1": "counter"
                },
                "0x3a": {
                    "1": "char_check"
                },
                "*param_1": {
                    "1": "ptr_to_data_array"
                },
                "*param_1 + 0xc": {
                    "1": "ptr_data"
                },
                "*param_1 + 0x14": {
                    "1": "ptr_data_copy"
                },
                "b": {
                    "1": "is_space"
                },
                "data[0x3a]": {
                    "1": "space_char"
                },
                "data[0xe]": {
                    "1": "flag"
                },
                "data[0x2e]": {
                    "1": "new_value3"
                },
                "data[0xf]": {
                    "1": "new_value4"
                },
                "data[0xc]": {
                    "1": "flag1"
                },
                "data[0x14]": {
                    "1": "flag2"
                },
                "data[*ptr]": {
                    "1": "ptr_data"
                },
                "data[0]": {
                    "1": "ptr_value1"
                },
                "*(char *)((int)array + 0x3a)": {
                    "1": "char1"
                },
                "*(char *)(array + 0xe)": {
                    "1": "char2"
                },
                "*(short *)(array + 0xb)": {
                    "1": "short1"
                },
                "*(short *)((int)array + 0x2e)": {
                    "1": "short2"
                },
                "*(undefined *)((int)array + 0x3a)": {
                    "1": "undefined1"
                },
                "*(undefined *)(array + 0xe)": {
                    "1": "undefined2"
                },
                "*(uint *)(*array + 0xc)": {
                    "1": "uint1"
                },
                "*(uint *)(*array + 0x14)": {
                    "1": "uint2"
                },
                "input_array": {
                    "1": "array"
                },
                "size_param_2": {
                    "1": "size_1"
                },
                "size_param_3": {
                    "1": "size_2"
                },
                "inputArray": {
                    "1": "input_array"
                },
                "length": {
                    "1": "length"
                },
                "value": {
                    "1": "array_value"
                },
                "(int)param_1 + 0x2e": {
                    "1": "ptr_to_short2"
                },
                "dataPointer": {
                    "1": "data"
                },
                "*(char *)((int)dataStructure + 0x3a)": {
                    "1": "char_check"
                },
                "(short)param_3": {
                    "1": "short_value"
                },
                "(int)param_1 + 0x3a": {
                    "1": "ptr_to_char2"
                },
                "(param_1 + 0xe)": {
                    "1": "ptr_to_char3"
                },
                "(uint *)(*param_1 + 0xc)": {
                    "1": "ptr_to_uint1"
                },
                "(uint *)(*param_1 + 0x14)": {
                    "1": "ptr_to_uint2"
                },
                "*(char *)((int)data + 0x3a)": {
                    "1": "data_marker"
                },
                "*(char *)(data + 0xe)": {
                    "1": "flag"
                },
                "*(short *)(data + 0xb)": {
                    "1": "data[11]"
                },
                "*(short *)((int)data + 0x2e)": {
                    "1": "data[30]"
                },
                "*(undefined *)((int)data + 0x3a)": {
                    "1": "data[58]"
                },
                "*(undefined *)(data + 0xe)": {
                    "1": "data[14]"
                },
                "*(uint *)(*data + 0xc)": {
                    "1": "data[12]"
                },
                "*(uint *)(*data + 0x14)": {
                    "1": "data[20]"
                },
                "char": {
                    "1": "character"
                },
                "short": {
                    "1": "short_value"
                },
                "int": {
                    "1": "int_value"
                },
                "undefined": {
                    "1": "undefined_value"
                },
                "uint": {
                    "1": "unsigned_int_value"
                },
                "input_data": {
                    "1": "data_array"
                }
            }
        },
        "FUN_080045fe": {
            "entrypoint": "0x080045fe",
            "current_name": "update_uart_settings_080045fe",
            "code": "\nundefined4 update_uart_settings_080045fe(int *uart_settings)\n\n{\n  *(uint *)(*uart_settings + 0xc) = *(uint *)(*uart_settings + 0xc) & 0xffffffbf;\n  *(undefined *)((int)uart_settings + 0x39) = 0x20;\n  transmission_complete_callback();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080045fe": "update_uart_settings_080045fe",
                "param_1": "uart_settings",
                "HAL_UART_TxCpltCallback": "transmission_complete_callback"
            },
            "calling": [
                "FUN_080046b8"
            ],
            "called": [
                "FUN_08005604"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080045fe": {
                    "1": "update_flags_and_transmit_data",
                    "3": "update_uart_config",
                    "11": "update_uart_settings"
                },
                "param_1": {
                    "1": "uart_data",
                    "5": "uart_settings",
                    "2": "uart_settings_ptr",
                    "4": "config_ptr"
                },
                "HAL_UART_TxCpltCallback": {
                    "1": "notify_uart_transmission_complete",
                    "3": "handle_uart_transmit_complete",
                    "4": "handle_uart_transmission_complete",
                    "2": "handle_transmit_complete",
                    "5": "transmission_complete_callback"
                },
                "param_1 + 0xc": {
                    "1": "settings_register"
                },
                "param_1 + 0x39": {
                    "1": "control_byte"
                },
                "*(uint *)(*param_1 + 0xc)": {
                    "1": "uart_register_value"
                },
                "*(undefined *)((int)param_1 + 0x39)": {
                    "1": "new_character"
                },
                "0xffffffbf": {
                    "1": "uart_flag_clear_bitmask"
                },
                "*param_1": {
                    "1": "dereferenced_parameter1"
                },
                "0x20": {
                    "1": "uart_flag_value"
                },
                "PTR_": {
                    "1": ""
                },
                "DAT_": {
                    "1": ""
                }
            }
        },
        "FUN_08004618": {
            "entrypoint": "0x08004618",
            "current_name": "process_data_08004618",
            "code": "\nundefined4 process_data_08004618(int *data)\n\n{\n  byte *byte_ptr;\n  short counter;\n  undefined *undefined_ptr;\n  \n  if (*(char *)((int)data + 0x3a) != '\\\"') {\n    return 2;\n  }\n  if (data[2] == 0x1000) {\n    if (data[4] == 0) {\n      *(ushort *)data[10] = (ushort)((uint)(*(int *)(*data + 4) << 0x17) >> 0x17);\n      data[10] = data[10] + 2;\n    }\n    else {\n      *(ushort *)data[10] = (ushort)*(undefined4 *)(*data + 4) & 0xff;\n      data[10] = data[10] + 1;\n    }\n  }\n  else if (data[4] == 0) {\n    undefined_ptr = (undefined *)data[10];\n    data[10] = (int)(undefined_ptr + 1);\n    *undefined_ptr = (char)*(undefined4 *)(*data + 4);\n  }\n  else {\n    byte_ptr = (byte *)data[10];\n    data[10] = (int)(byte_ptr + 1);\n    *byte_ptr = (byte)*(undefined4 *)(*data + 4) & 0x7f;\n  }\n  counter = *(short *)((int)data + 0x2e) + -1;\n  *(short *)((int)data + 0x2e) = counter;\n  if (counter != 0) {\n    return 0;\n  }\n  *(uint *)(*data + 0xc) = *(uint *)(*data + 0xc) & 0xffffffdf;\n  *(uint *)(*data + 0xc) = *(uint *)(*data + 0xc) & 0xfffffeff;\n  *(uint *)(*data + 0x14) = *(uint *)(*data + 0x14) & 0xfffffffe;\n  *(undefined *)((int)data + 0x3a) = 0x20;\n  handle_rx_complete();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08004618": "process_data_08004618",
                "param_1": "data",
                "pbVar1": "byte_ptr",
                "sVar2": "counter",
                "puVar3": "undefined_ptr",
                "HAL_UART_RxCpltCallback": "handle_rx_complete"
            },
            "calling": [
                "FUN_080046b8"
            ],
            "called": [
                "FUN_080055e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08004618": {
                    "4": "process_input",
                    "1": "process_string",
                    "18": "process_data",
                    "3": "parse_string"
                },
                "param_1": {
                    "2": "input_data",
                    "14": "data",
                    "1": "parameters",
                    "3": "data_buffer"
                },
                "pbVar1": {
                    "16": "byte_ptr",
                    "1": "output_byte",
                    "12": "byte_pointer"
                },
                "sVar2": {
                    "4": "loop_counter",
                    "3": "count",
                    "1": "total_count",
                    "2": "short_var",
                    "13": "counter"
                },
                "puVar3": {
                    "3": "byte_ptr",
                    "1": "byte_ptr2",
                    "11": "undefined_pointer",
                    "13": "undefined_ptr"
                },
                "HAL_UART_RxCpltCallback": {
                    "1": "handle_rx_complete"
                }
            }
        },
        "FUN_080046b8": {
            "entrypoint": "0x080046b8",
            "current_name": "process_data_080046b8",
            "code": "\nvoid process_data_080046b8(uint **param)\n\n{\n  int result;\n  uint value1;\n  uint *ptr;\n  uint value2;\n  uint value3;\n  \n  ptr = *param;\n  value3 = *ptr;\n  value1 = ptr[3];\n  if ((((value3 & 0xf) == 0) && ((value3 & 0x20) != 0)) && ((value1 & 0x20) != 0)) {\n    handle_receive_it(param);\n    return;\n  }\n  if (((value3 & 0xf) == 0) || ((value2 = ptr[5] & 1, value2 == 0 && ((value1 & 0x120) == 0)))) {\n    if (((value3 & 0x80) != 0) && ((value1 & 0x80) != 0)) {\n      handle_transmit_it(param);\n      return;\n    }\n    if (((value3 & 0x40) != 0) && ((value1 & 0x40) != 0)) {\n      handle_end_transmit_it(param);\n    }\n  }\n  else {\n    if (((value3 & 1) != 0) && ((value1 & 0x100) != 0)) {\n      flag = (uint *)((uint)flag | 1);\n    }\n    if (((value3 & 4) != 0) && (value2 != 0)) {\n      flag = (uint *)((uint)flag | 2);\n    }\n    if (((value3 & 2) != 0) && (value2 != 0)) {\n      flag = (uint *)((uint)flag | 4);\n    }\n    if (((value3 & 8) != 0) && (value2 != 0)) {\n      flag = (uint *)((uint)flag | 8);\n    }\n    if (flag != (uint *)0x0) {\n      if (((value3 & 0x20) != 0) && ((value1 & 0x20) != 0)) {\n        handle_receive_it(param);\n      }\n      if ((((uint)flag & 8) == 0) && (((*param)[5] & 0x40) == 0)) {\n        handle_error_callback(param);\n        flag = (uint *)0x0;\n        return;\n      }\n      handle_end_rx_transfer(param);\n      ptr = *param;\n      if ((ptr[5] & 0x40) == 0) {\n        handle_error_callback(param);\n        return;\n      }\n      ptr[5] = ptr[5] & 0xffffffbf;\n      if (dma == (uint *)0x0) {\n        handle_error_callback(param);\n        return;\n      }\n      dma[0xd] = (uint)&location;\n      result = abort_dma(dma);\n      if (result != 0) {\n        (*(callback_function *)dma[0xd])();\n        return;\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080046b8": "process_data_080046b8",
                "param_1": "param",
                "iVar1": "result",
                "uVar2": "value1",
                "puVar3": "ptr",
                "uVar4": "value2",
                "uVar5": "value3",
                "UART_Receive_IT": "handle_receive_it",
                "UART_Transmit_IT": "handle_transmit_it",
                "UART_EndTransmit_IT": "handle_end_transmit_it",
                "HAL_UART_ErrorCallback": "handle_error_callback",
                "UART_EndRxTransfer": "handle_end_rx_transfer",
                "HAL_DMA_Abort_IT": "abort_dma",
                "code": "callback_function",
                "LAB_080047d8_1": "location",
                "param_1[0xf]": "flag",
                "param_1[0xd]": "dma"
            },
            "calling": [],
            "called": [
                "FUN_080045fe",
                "FUN_0800258c",
                "FUN_0800417c",
                "FUN_08004198",
                "FUN_08005650",
                "FUN_08004618"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080046b8": {
                    "1": "handle_uart_operation",
                    "6": "process_data",
                    "2": "handle_uart_transfer",
                    "4": "handle_uart_operations"
                },
                "param_1": {
                    "1": "p_uart_status",
                    "4": "data",
                    "2": "param_list",
                    "3": "uart_data",
                    "5": "param"
                },
                "iVar1": {
                    "5": "return_value",
                    "1": "variable1",
                    "3": "status",
                    "2": "index",
                    "15": "result"
                },
                "uVar2": {
                    "1": "status_value",
                    "4": "value2",
                    "14": "value1",
                    "2": "var2"
                },
                "puVar3": {
                    "1": "pointer_value",
                    "3": "pointer",
                    "2": "ptr_data",
                    "4": "ptr"
                },
                "uVar4": {
                    "6": "flag",
                    "1": "value_2",
                    "2": "var4",
                    "3": "value4",
                    "12": "value2"
                },
                "uVar5": {
                    "1": "value_3",
                    "3": "value5",
                    "2": "value2",
                    "12": "value3"
                },
                "*param_1": {
                    "1": "transaction_ptr"
                },
                "UART_Receive_IT": {
                    "1": "handle_receive_it"
                },
                "UART_Transmit_IT": {
                    "1": "handle_transmit_it"
                },
                "UART_EndTransmit_IT": {
                    "1": "end_transmitting_data"
                },
                "HAL_UART_ErrorCallback": {
                    "1": "error_callback"
                },
                "UART_EndRxTransfer": {
                    "1": "end_rx_transfer"
                },
                "HAL_DMA_Abort_IT": {
                    "1": "handle_dma_abort_it",
                    "2": "abort_dma"
                },
                "code": {
                    "1": "callback_function"
                },
                "LAB_080047d8_1": {
                    "1": "callback_function"
                },
                "FUN_080045fe": {
                    "1": "check_flags"
                },
                "FUN_0800258c": {
                    "1": "uart_receive_it"
                },
                "FUN_0800417c": {
                    "1": "process_function3"
                },
                "FUN_08004198": {
                    "1": "process_function4"
                },
                "FUNC_08005650": {
                    "1": "hal_uart_error_callback",
                    "2": "function5"
                },
                "FUN_08004618": {
                    "1": "process_function6"
                },
                "param_1[0xf]": {
                    "1": "flag"
                },
                "param_1[0xd]": {
                    "1": "dma"
                }
            }
        },
        "FUN_080047e8": {
            "entrypoint": "0x080047e8",
            "current_name": "combine_bytes_080047e8",
            "code": "\nresult combine_bytes_080047e8(int input)\n\n{\n  return *(result *)(input + 0x3a) | *(result *)(input + 0x39);\n}\n\n",
            "renaming": {
                "FUN_080047e8": "combine_bytes_080047e8",
                "param_1": "input",
                "byte": "result"
            },
            "calling": [
                "FUN_0800548c",
                "FUN_080054b0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080047e8": {
                    "30": "combine_bytes",
                    "1": "combine_two_bytes"
                },
                "param_1": {
                    "19": "input",
                    "5": "address",
                    "1": "index",
                    "4": "offset"
                },
                "*(byte *)(param_1 + 0x3a)": {
                    "1": "value1",
                    "16": "byte1",
                    "2": "first_byte"
                },
                "*(byte *)(param_1 + 0x39)": {
                    "2": "second_byte",
                    "16": "byte2",
                    "1": "value2"
                },
                "0x3a": {
                    "1": "left_byte_offset"
                },
                "0x39": {
                    "1": "right_byte_offset"
                },
                "@param_1 + 0x3a": {
                    "1": "byte1"
                },
                "@param_1 + 0x39": {
                    "1": "byte2"
                },
                "byte": {
                    "2": "result"
                },
                "byte_1": {
                    "1": "byte1"
                },
                "byte_2": {
                    "1": "byte2"
                },
                "PTR_": {
                    "1": "unchanged"
                },
                "param_1 + 0x3a": {
                    "1": "first_byte_address"
                },
                "param_1 + 0x39": {
                    "1": "second_byte_address"
                }
            }
        },
        "FUN_080047f4": {
            "entrypoint": "0x080047f4",
            "current_name": "get_bit_value_080047f4",
            "code": "\nunsigned_integer get_bit_value_080047f4(unsigned_integer value,int address)\n\n{\n  return *(unsigned_integer *)(address + ((value << 0x18) >> 0x1c) * 4) >> (value & 0xf) & 1;\n}\n\n",
            "renaming": {
                "FUN_080047f4": "get_bit_value_080047f4",
                "param_1": "value",
                "param_2": "address",
                "uint": "unsigned_integer"
            },
            "calling": [
                "FUN_08005890",
                "FUN_08005848",
                "FUN_080057b4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080047f4": {
                    "3": "extract_bit_from_uint",
                    "1": "retrieve_bit_from_memory",
                    "2": "check_bit",
                    "7": "get_bit_value",
                    "4": "extract_bit"
                },
                "param_1": {
                    "1": "index",
                    "3": "data",
                    "7": "input_value",
                    "2": "bit_index",
                    "12": "value"
                },
                "param_2": {
                    "5": "address",
                    "2": "memory_address",
                    "1": "ptr_array",
                    "3": "array_address",
                    "4": "array_ptr"
                },
                "param_3": {
                    "2": "bit_offset",
                    "1": "position"
                },
                "ptr_obj": {
                    "1": "pointer_object"
                },
                "param_1 << 0x18": {
                    "1": "shifted_value"
                },
                "shifted_value >> 0x1c": {
                    "1": "masked_shifted_value"
                },
                "param_1 & 0xf": {
                    "3": "bit_offset"
                },
                "&*(uint *)": {
                    "1": "extracted_value"
                },
                "0x18": {
                    "1": "bit_shift_amount1"
                },
                "0x1c": {
                    "1": "bit_shift_amount2"
                },
                "0xf": {
                    "2": "bit_mask"
                },
                "param_4": {
                    "2": "bit_mask"
                },
                "var_1": {
                    "1": "array_index"
                },
                "var_2": {
                    "1": "shifted_data"
                },
                "var_3": {
                    "1": "bit_value"
                },
                "variable_1": {
                    "1": "shifted_bit"
                },
                "variable_2": {
                    "1": "offset"
                },
                "variable_3": {
                    "1": "bit_value"
                },
                "uint": {
                    "1": "unsigned_integer"
                },
                "*(uint *)(param_2 + ((param_1 << 0x18) >> 0x1c) * 4)": {
                    "1": "array_value"
                },
                "PTR_": {
                    "1": "unchanged"
                },
                "DAT_": {
                    "1": "unchanged"
                }
            }
        },
        "FUN_0800480a": {
            "entrypoint": "0x0800480a",
            "current_name": "set_bit_in_array_0800480a",
            "code": "\nvoid set_bit_in_array_0800480a(uint bit_position,int array_address)\n\n{\n  uint shifted_index;\n  \n  shifted_index = (bit_position << 0x18) >> 0x1c;\n  *(uint *)(array_address + shifted_index * 4) = *(uint *)(array_address + shifted_index * 4) | 1 << (bit_position & 0xf);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800480a": "set_bit_in_array_0800480a",
                "param_1": "bit_position",
                "param_2": "array_address",
                "uVar1": "shifted_index"
            },
            "calling": [
                "FUN_080057b4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800480a": {
                    "1": "update_bit_in_array",
                    "6": "set_bit",
                    "5": "update_bit",
                    "10": "set_bit_in_array"
                },
                "param_1": {
                    "4": "input_value",
                    "17": "bit_position",
                    "3": "index",
                    "1": "position"
                },
                "param_2": {
                    "1": "uint_array",
                    "9": "array",
                    "2": "array_pointer",
                    "12": "array_address"
                },
                "uVar1": {
                    "3": "byte_offset",
                    "1": "array_index",
                    "2": "shifted_position",
                    "8": "shifted_index",
                    "4": "index"
                },
                "4": {
                    "1": "size"
                },
                "1": {
                    "1": "bit_value"
                },
                "0xf": {
                    "1": "bit_mask"
                }
            }
        },
        "FUN_08004828": {
            "entrypoint": "0x08004828",
            "current_name": "update_bit_08004828",
            "code": "\nvoid update_bit_08004828(uint bit_position,int array)\n\n{\n  uint index;\n  \n  index = (bit_position << 0x18) >> 0x1c;\n  *(uint *)(array + index * 4) = *(uint *)(array + index * 4) & ~(1 << (bit_position & 0xf));\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004828": "update_bit_08004828",
                "param_1": "bit_position",
                "param_2": "array",
                "uVar1": "index"
            },
            "calling": [
                "FUN_080057b4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08004828": {
                    "2": "update_bit_value",
                    "1": "update_bit_field",
                    "12": "update_bit",
                    "5": "update_bit_in_array"
                },
                "param_1": {
                    "1": "original_value",
                    "5": "input_value",
                    "13": "bit_position",
                    "2": "bit_index",
                    "7": "value"
                },
                "param_2": {
                    "1": "array_addr",
                    "11": "array",
                    "2": "array_start",
                    "8": "array_address"
                },
                "uVar1": {
                    "1": "masked_position",
                    "2": "shifted_position",
                    "7": "shifted_index",
                    "10": "index"
                },
                "*(uint *)(param_2 + uVar1 * 4)": {
                    "1": "element"
                },
                "(param_1 << 0x18) >> 0x1c": {
                    "1": "shifted_index"
                },
                "(1 << (param_1 & 0xf))": {
                    "1": "bit_mask"
                }
            }
        },
        "FUN_08004848": {
            "entrypoint": "0x08004848",
            "current_name": "get_memory_address_08004848",
            "code": "\nundefined4 get_memory_address_08004848(undefined4 input)\n\n{\n  switch(input) {\n  case 0:\n    memory_address 0x40010800;\n  case 1:\n    memory_address 0x40010c00;\n  case 2:\n    memory_address 0x40011000;\n  case 3:\n    memory_address 0x40011400;\n  case 4:\n    memory_address 0x40011800;\n  default:\n    memory_address 0;\n  }\n}\n\n",
            "renaming": {
                "FUN_08004848": "get_memory_address_08004848",
                "param_1": "input",
                "return": "memory_address"
            },
            "calling": [
                "FUN_08005890",
                "FUN_08005848"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08004848": {
                    "1": "get_memory_offset",
                    "3": "get_address_from_param",
                    "18": "get_memory_address",
                    "5": "map_param_to_address"
                },
                "param_1": {
                    "15": "input",
                    "2": "index",
                    "4": "param",
                    "1": "memory_index"
                },
                "0": {
                    "3": "address_0",
                    "1": "first_address",
                    "6": "base_address",
                    "2": "memory_address_1"
                },
                "1": {
                    "1": "memory_address_1",
                    "3": "address_1",
                    "2": "first_address"
                },
                "2": {
                    "3": "address_2",
                    "2": "memory_address_3",
                    "1": "offset_2"
                },
                "3": {
                    "1": "0x40011400",
                    "3": "address_3",
                    "2": "third_address"
                },
                "4": {
                    "1": "address4",
                    "3": "address_4",
                    "2": "fourth_address"
                },
                "return_value": {
                    "1": "memory_address"
                },
                "return": {
                    "3": "memory_address"
                },
                "case 0": {
                    "1": "input_equal_to_zero"
                },
                "case 1": {
                    "1": "case_one"
                },
                "case 2": {
                    "1": "input_equal_to_two"
                },
                "case 3": {
                    "1": "case_three"
                },
                "case 4": {
                    "1": "return_address4"
                },
                "return 0x40010800": {
                    "1": "return_address_zero"
                },
                "return 0x40010c00": {
                    "1": "return_address_one"
                },
                "return 0x40011000": {
                    "1": "return_address_two"
                },
                "return 0x40011400": {
                    "1": "return_address_three"
                },
                "return 0x40011800": {
                    "1": "return_address_four"
                },
                "0x40010800": {
                    "1": "address0"
                },
                "0x40010c00": {
                    "1": "address1"
                },
                "0x40011000": {
                    "1": "address_two"
                },
                "0x40011400": {
                    "1": "address_three"
                },
                "0x40011800": {
                    "1": "address_four"
                },
                "return_address_0": {
                    "1": "address_zero"
                },
                "return_address_1": {
                    "1": "address_one"
                },
                "return_address_2": {
                    "1": "address_two"
                },
                "return_address_3": {
                    "1": "address_three"
                },
                "return_address_4": {
                    "1": "address_four"
                }
            }
        },
        "FUN_08004884": {
            "entrypoint": "0x08004884",
            "current_name": "set_flag_and_return_address_08004884",
            "code": "\n\n\nundefined4 set_flag_and_return_address_08004884(undefined4 flag)\n\n{\n  undefined4 address;\n  \n  switch(flag) {\n  case 0:\n    _DAT_40021018 = _DAT_40021018 | 4;\n    address = 0x40010800;\n    break;\n  case 1:\n    _DAT_40021018 = _DAT_40021018 | 8;\n    address = 0x40010c00;\n    break;\n  case 2:\n    _DAT_40021018 = _DAT_40021018 | 0x10;\n    address = 0x40011000;\n    break;\n  case 3:\n    _DAT_40021018 = _DAT_40021018 | 0x20;\n    address = 0x40011400;\n    break;\n  case 4:\n    _DAT_40021018 = _DAT_40021018 | 0x40;\n    address = 0x40011800;\n    break;\n  default:\n    address = 0;\n  }\n  return address;\n}\n\n",
            "renaming": {
                "FUN_08004884": "set_flag_and_return_address_08004884",
                "param_1": "flag",
                "uVar1": "address"
            },
            "calling": [
                "FUN_08004f4c",
                "FUN_08004bb0",
                "FUN_08004974"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08004884": {
                    "1": "set_flag_and_return_value",
                    "2": "set_flags_and_return_address",
                    "3": "set_memory_address",
                    "9": "set_flag_and_return_address"
                },
                "param_1": {
                    "10": "flag",
                    "1": "flag_value",
                    "2": "peripheral_index",
                    "3": "value"
                },
                "uVar1": {
                    "7": "address",
                    "3": "result",
                    "4": "new_address",
                    "1": "output",
                    "2": "memory_address"
                },
                "_DAT_40021018": {
                    "1": "control_register"
                }
            }
        },
        "FUN_0800492c": {
            "entrypoint": "0x0800492c",
            "current_name": "calculate_shifted_value_0800492c",
            "code": "\nuint calculate_shifted_value_0800492c(undefined4 input1,undefined4 input2,undefined4 input3,undefined4 input4)\n\n{\n  int result;\n  uint shifted_value;\n  \n  result = pinmap_function(input1,&DAT_08007400,input3,input4,input4);\n  shifted_value = (uint)(result << 0xc) >> 0x1b;\n  if (0x10 < shifted_value - 1) {\n    shifted_value = 0;\n  }\n  return shifted_value;\n}\n\n",
            "renaming": {
                "FUN_0800492c": "calculate_shifted_value_0800492c",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "iVar1": "result",
                "uVar2": "shifted_value"
            },
            "calling": [
                "FUN_08004a4c"
            ],
            "called": [
                "FUN_08004cce"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800492c": {
                    "1": "calculate_pinmap",
                    "2": "map_and_shift",
                    "4": "calculate_shifted_value",
                    "3": "calculate_pinmap_value"
                },
                "param_1": {
                    "1": "device",
                    "4": "input_1",
                    "3": "pin_value",
                    "7": "pin",
                    "9": "input1"
                },
                "param_2": {
                    "2": "param2",
                    "8": "input2",
                    "1": "param",
                    "5": "unused_param",
                    "3": "input_2",
                    "4": "param_2"
                },
                "param_3": {
                    "3": "param3",
                    "1": "data_1",
                    "2": "param_a",
                    "4": "param_3",
                    "8": "input3"
                },
                "param_4": {
                    "1": "pinmap_argument_4",
                    "3": "input_4",
                    "2": "param_b",
                    "4": "param_4",
                    "8": "input4"
                },
                "iVar1": {
                    "1": "pin_value",
                    "10": "pinmap_result",
                    "17": "result"
                },
                "uVar2": {
                    "1": "result",
                    "15": "shifted_value",
                    "12": "shifted_result"
                }
            }
        },
        "FUN_08004948": {
            "entrypoint": "0x08004948",
            "current_name": "pinmap_to_value_08004948",
            "code": "\nundefined4 pinmap_to_value_08004948(undefined4 input_1,undefined4 input_2,undefined4 param_3,undefined4 param_4)\n\n{\n  int result;\n  uint shifted_result;\n  \n  result = pinmap_function(input_1,&DAT_080074b4,param_3,param_4,param_4);\n  shifted_result = (uint)(result << 0xc) >> 0x1b;\n  if (shifted_result == 3) {\n    return 8;\n  }\n  if (shifted_result != 4) {\n    if (shifted_result != 2) {\n      return 0;\n    }\n    return 4;\n  }\n  return 0xc;\n}\n\n",
            "renaming": {
                "param_1": "input_1",
                "param_2": "input_2",
                "iVar1": "result",
                "uVar2": "shifted_result",
                "FUN_08004948": "pinmap_to_value_08004948"
            },
            "calling": [
                "FUN_08004b3c"
            ],
            "called": [
                "FUN_08004cce"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "param_1": {
                    "8": "input_1",
                    "5": "input_value",
                    "1": "device_id",
                    "7": "pin",
                    "2": "input1",
                    "4": "input_param"
                },
                "param_2": {
                    "2": "input_param_2",
                    "1": "param",
                    "5": "param_2",
                    "8": "input_2"
                },
                "param_3": {
                    "8": "input_3",
                    "1": "pinmap_param",
                    "2": "input3",
                    "9": "param_3"
                },
                "param_4": {
                    "1": "arg2",
                    "2": "input4",
                    "8": "input_4",
                    "9": "param_4"
                },
                "iVar1": {
                    "1": "map_result",
                    "3": "pinmap_result",
                    "23": "result"
                },
                "uVar2": {
                    "21": "shifted_result",
                    "9": "shifted_value"
                },
                "FUN_08004948": {
                    "1": "pinmap_reverse",
                    "2": "pinmap_function_result",
                    "3": "pinmap_check"
                }
            }
        },
        "FUN_08004974": {
            "entrypoint": "0x08004974",
            "current_name": "initialize_gpio_port_08004974",
            "code": "\n\n\nvoid initialize_gpio_port_08004974(int *port_address,undefined4 param)\n\n{\n  undefined4 gpio_port;\n  uint gpio_clock;\n  int port_value;\n  uint pin_mask;\n  undefined4 pin_mode;\n  undefined4 gpio_pull;\n  \n  port_value = *port_address;\n  if (port_value == 0x40012400) {\n    gpio_clock = _DAT_40021018 | 0x200;\n    port_value = 0x200;\n    _DAT_40021018 = gpio_clock;\n  }\n  else {\n    gpio_clock = 0x40012800;\n    if (port_value == 0x40012800) {\n      gpio_clock = _DAT_40021018 | 0x400;\n      port_value = 0x400;\n      _DAT_40021018 = gpio_clock;\n    }\n  }\n  gpio_port = configure_gpio_port_clock((uint)((int)(char)DAT_20000080 << 0x18) >> 0x1c,param,gpio_clock,port_value);\n  pin_mask = 1 << (DAT_20000080 & 0xf) & 0xffff;\n  pin_mode = 3;\n  gpio_pull = 0;\n  initialize_gpio(gpio_port,&pin_mask);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004974": "initialize_gpio_port_08004974",
                "param_1": "port_address",
                "param_2": "param",
                "uVar1": "gpio_port",
                "uVar2": "gpio_clock",
                "iVar3": "port_value",
                "local_18": "pin_mask",
                "local_14": "pin_mode",
                "local_10": "gpio_pull",
                "set_GPIO_Port_Clock": "configure_gpio_port_clock",
                "HAL_GPIO_Init": "initialize_gpio"
            },
            "calling": [
                "FUN_0800213c"
            ],
            "called": [
                "FUN_08004884",
                "FUN_08002624"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08004974": {
                    "1": "init_gpio_port_clock",
                    "14": "initialize_gpio_port",
                    "13": "initialize_gpio"
                },
                "param_1": {
                    "2": "gpio_address",
                    "1": "ptr_value",
                    "3": "gpio_pin",
                    "5": "port_address",
                    "4": "input_data"
                },
                "param_2": {
                    "2": "clock_param",
                    "1": "value",
                    "3": "clock_value",
                    "5": "param"
                },
                "uVar1": {
                    "1": "clock_value",
                    "18": "gpio_port",
                    "3": "gpio_port_clock_result",
                    "4": "port_clock"
                },
                "uVar2": {
                    "1": "port_data",
                    "2": "port_mask",
                    "5": "gpio_clock"
                },
                "iVar3": {
                    "1": "gpio_type",
                    "5": "port_value",
                    "4": "value",
                    "2": "pin_value",
                    "3": "data_value"
                },
                "local_18": {
                    "14": "pin_mask",
                    "3": "gpio_pin_mask",
                    "1": "pin_select",
                    "2": "pin_bitmask",
                    "4": "bit_mask"
                },
                "local_14": {
                    "1": "gpio_init_mode",
                    "11": "gpio_mode",
                    "13": "pin_mode"
                },
                "local_10": {
                    "1": "pin_alternate",
                    "8": "pin_pull",
                    "10": "gpio_pull"
                },
                "FUN_08004884": {
                    "1": "configure_port_clock"
                },
                "FUN_08002624": {
                    "1": "configure_gpio_init"
                },
                "set_GPIO_Port_Clock": {
                    "1": "update_gpio_port_clock",
                    "4": "configure_gpio_port_clock",
                    "3": "configure_gpio_clock"
                },
                "HAL_GPIO_Init": {
                    "1": "initialize_gpio_interface",
                    "9": "initialize_gpio"
                },
                "DAT_20000080": {
                    "1": "config_data"
                }
            }
        },
        "FUN_080049f0": {
            "entrypoint": "0x080049f0",
            "current_name": "update_control_registers_080049f0",
            "code": "\n\n\nvoid update_control_registers_080049f0(int *memory_address)\n\n{\n  if (*memory_address != 0x40012400) {\n    if (*memory_address == 0x40012800) {\n      _DAT_4002100c = _DAT_4002100c & 0xfffffbff;\n      _DAT_40021018 = _DAT_40021018 & 0xfffffbff;\n    }\n    return;\n  }\n  _DAT_4002100c = _DAT_4002100c & 0xfffffdff;\n  _DAT_40021018 = _DAT_40021018 & 0xfffffdff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080049f0": "update_control_registers_080049f0",
                "param_1": "memory_address"
            },
            "calling": [
                "FUN_0800224c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080049f0": {
                    "1": "update_register_value",
                    "4": "update_memory_protection",
                    "9": "update_control_registers",
                    "2": "update_registers",
                    "3": "update_permissions"
                },
                "param_1": {
                    "1": "input_param",
                    "3": "value",
                    "2": "flags",
                    "5": "register_value"
                },
                "_DAT_4002100c": {
                    "1": "memory_protection_register1",
                    "7": "register1",
                    "2": "control_reg1",
                    "3": "control_register1",
                    "4": "register_a"
                },
                "_DAT_40021018": {
                    "1": "status_register_b",
                    "2": "control_reg2",
                    "4": "register_b",
                    "3": "control_register2",
                    "7": "register2"
                },
                "PTR_DAT_4002100c": {
                    "1": "register1"
                },
                "PTR_DAT_40021018": {
                    "1": "register2"
                },
                "*param_1": {
                    "1": "status"
                },
                "DAT_4002100c": {
                    "2": "memory_register1",
                    "1": "flag1"
                },
                "DAT_40021018": {
                    "1": "flag2",
                    "2": "memory_register2"
                },
                "PTR_PARAM_1": {
                    "1": "memory_address"
                }
            }
        },
        "FUN_08004a4c": {
            "entrypoint": "0x08004a4c",
            "current_name": "read_adc_value_08004a4c",
            "code": "\nundefined2 read_adc_value_08004a4c(undefined4 peripheral_address)\n\n{\n  int result;\n  uint adc_state;\n  undefined2 adc_value;\n  uint adc_channel;\n  undefined4 adc_config_1;\n  undefined4 adc_config_2;\n  int adc_handle;\n  undefined4 adc_config;\n  undefined4 adc_config_4;\n  undefined4 adc_config_5;\n  undefined4 poll_result;\n  undefined4 state;\n  undefined4 state;\n  undefined4 calibration_value;\n  undefined4 adc_stop;\n  \n  initialize_memory(&adc_handle,0,0x30);\n  adc_channel = 0;\n  adc_config_1 = 0;\n  adc_config_2 = 0;\n  adc_value = 0;\n  adc_handle = set_pinmap_peripheral(peripheral_address,&DAT_08007400);\n  if (adc_handle == 0) {\n    adc_value = 0;\n  }\n  else {\n    adc_config = 0;\n    adc_config_4 = 0;\n    adc_config_5 = 0;\n    state = 0;\n    calibration_value = 0xe0000;\n    adc_stop = 0;\n    poll_result = 1;\n    state = 0;\n    DAT_20000080 = (undefined)peripheral_address;\n    result = initialize_adc(&adc_handle);\n    if (result == 0) {\n      adc_channel = get_adc_channel(peripheral_address);\n      if (adc_channel < 0x12) {\n        adc_config_1 = 1;\n        adc_config_2 = 2;\n        result = configure_adc_channel(&adc_handle,&adc_channel);\n        if (result == 0) {\n          result = start_adc_calibration(&adc_handle);\n          if (result == 0) {\n            result = start_adc_conversion(&adc_handle);\n            if (result == 0) {\n              result = poll_adc_conversion(&adc_handle,10);\n              if (result == 0) {\n                adc_state = get_adc_state(&adc_handle);\n                if ((adc_state & 0x200) != 0) {\n                  adc_value = get_adc_value(&adc_handle);\n                }\n                result = stop_adc_conversion(&adc_handle);\n                if (result == 0) {\n                  result = deinitialize_adc(&adc_handle);\n                  if (result != 0) {\n                    adc_value = 0;\n                  }\n                }\n                else {\n                  adc_value = 0;\n                }\n              }\n              else {\n                adc_value = 0;\n              }\n            }\n            else {\n              adc_value = 0;\n            }\n          }\n          else {\n            adc_value = 0;\n          }\n        }\n        else {\n          adc_value = 0;\n        }\n      }\n      else {\n        adc_value = 0;\n      }\n    }\n    else {\n      adc_value = 0;\n    }\n  }\n  return adc_value;\n}\n\n",
            "renaming": {
                "FUN_08004a4c": "read_adc_value_08004a4c",
                "param_1": "peripheral_address",
                "local_46": "adc_value",
                "local_44": "adc_channel",
                "local_40": "adc_config_1",
                "local_3c": "adc_config_2",
                "local_38": "adc_handle",
                "local_34": "adc_config",
                "local_30": "adc_config_4",
                "local_2c": "adc_config_5",
                "local_28": "poll_result",
                "local_24": "state",
                "local_20": "state",
                "local_1c": "calibration_value",
                "local_10": "adc_stop",
                "iVar1": "result",
                "HAL_ADC_Init": "initialize_adc",
                "HAL_ADC_ConfigChannel": "configure_adc_channel",
                "HAL_ADCEx_Calibration_Start": "start_adc_calibration",
                "HAL_ADC_Start": "start_adc_conversion",
                "HAL_ADC_PollForConversion": "poll_adc_conversion",
                "HAL_ADC_GetState": "get_adc_state",
                "HAL_ADC_GetValue": "get_adc_value",
                "HAL_ADC_Stop": "stop_adc_conversion",
                "HAL_ADC_DeInit": "deinitialize_adc",
                "memset": "initialize_memory",
                "pinmap_peripheral": "set_pinmap_peripheral",
                "uVar2": "adc_state"
            },
            "calling": [
                "FUN_08005754"
            ],
            "called": [
                "FUN_0800213c",
                "FUN_080061e0",
                "FUN_08001e40",
                "FUN_08002384",
                "FUN_08001cd0",
                "FUN_0800224c",
                "FUN_08001e48",
                "FUN_0800492c",
                "FUN_08004c78",
                "FUN_08002348",
                "FUN_08002004",
                "FUN_08001f80"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08004a4c": {
                    "1": "read_and_calculate_adc_value",
                    "2": "initialize_adc",
                    "8": "get_adc_value",
                    "13": "read_adc_value"
                },
                "param_1": {
                    "7": "pin",
                    "4": "pin_number",
                    "10": "peripheral_address",
                    "1": "peripheral_addr"
                },
                "local_46": {
                    "1": "sensor_value",
                    "26": "adc_value",
                    "4": "analog_value"
                },
                "local_44": {
                    "1": "channel_index",
                    "12": "channel",
                    "17": "adc_channel"
                },
                "local_40": {
                    "1": "adc_enabled",
                    "3": "config_value",
                    "2": "config1",
                    "5": "adc_config_1"
                },
                "local_3c": {
                    "1": "config_offset",
                    "2": "config2",
                    "5": "adc_config_2"
                },
                "local_38": {
                    "1": "pinmap_value",
                    "22": "adc_handle",
                    "2": "adc_handler"
                },
                "local_34": {
                    "1": "value1",
                    "2": "config3",
                    "3": "adc_config_3"
                },
                "local_30": {
                    "1": "init_param_2",
                    "2": "config4",
                    "3": "adc_config_4"
                },
                "local_2c": {
                    "1": "adc_calibration_value_3",
                    "3": "adc_config_5",
                    "2": "config5"
                },
                "local_28": {
                    "1": "start_status",
                    "2": "adc_config_6"
                },
                "local_24": {
                    "1": "adc_start",
                    "2": "config7"
                },
                "local_20": {
                    "1": "adc_init_failure",
                    "2": "conversion_status",
                    "3": "state"
                },
                "local_1c": {
                    "1": "initialization_value_7",
                    "2": "adc_config_9"
                },
                "local_10": {
                    "1": "local_10",
                    "2": "poll_timeout"
                },
                "DAT_20000080": {
                    "1": "adc_data",
                    "2": "adc_param"
                },
                "iVar1": {
                    "1": "init_status",
                    "3": "status",
                    "2": "init_result",
                    "8": "result"
                },
                "HAL_ADC_Init": {
                    "4": "initialize_adc",
                    "2": "initialize_adc_handle"
                },
                "get_adc_channel": {
                    "1": "retrieve_adc_channel",
                    "4": "get_adc_channel"
                },
                "HAL_ADC_ConfigChannel": {
                    "1": "configure_channel",
                    "4": "configure_adc_channel"
                },
                "HAL_ADCEx_Calibration_Start": {
                    "2": "calibrate_adc",
                    "1": "start_calibration",
                    "3": "start_adc_calibration"
                },
                "HAL_ADC_Start": {
                    "1": "start_conversion",
                    "5": "start_adc_conversion"
                },
                "HAL_ADC_PollForConversion": {
                    "1": "adc_conversion_complete",
                    "2": "poll_adc_conversion"
                },
                "HAL_ADC_GetState": {
                    "6": "get_adc_state"
                },
                "HAL_ADC_GetValue": {
                    "6": "get_adc_value"
                },
                "HAL_ADC_Stop": {
                    "1": "stop_conversion",
                    "5": "stop_adc_conversion"
                },
                "HAL_ADC_DeInit": {
                    "1": "deinitialize_adc_handle",
                    "5": "deinitialize_adc"
                },
                "memset": {
                    "1": "initialize_adchandle",
                    "3": "initialize_memory"
                },
                "pinmap_peripheral": {
                    "1": "set_pinmap_peripheral"
                },
                "DAT_08007400": {
                    "1": "pinmap_pointer"
                },
                "uVar2": {
                    "2": "state",
                    "11": "adc_state",
                    "1": "adc_state_value"
                },
                "&DAT_08007400": {
                    "1": "peripheral_address"
                }
            }
        },
        "FUN_08004b34": {
            "entrypoint": "0x08004b34",
            "current_name": "disable_timer_clock_08004b34",
            "code": "\nvoid disable_timer_clock_08004b34(void)\n\n{\n  disable_timer_clock_08004b34();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004b34": "disable_timer_clock_08004b34",
                "timer_disable_clock": "disable_timer_clock"
            },
            "calling": [
                "FUN_08003ed8"
            ],
            "called": [
                "FUN_08004d90"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08004b34": {
                    "27": "disable_timer_clock",
                    "4": "disable_timer"
                },
                "FUN_08004d90": {
                    "1": "process_param_1",
                    "12": "process_data",
                    "2": "update_param",
                    "3": "update_param_1"
                },
                "param_1": {
                    "5": "data",
                    "1": "counter_ptr"
                },
                "*param_1": {
                    "1": "data_ptr"
                },
                "timer_disable_clock": {
                    "1": "disable_timer_clock"
                }
            }
        },
        "FUN_08004b3c": {
            "entrypoint": "0x08004b3c",
            "current_name": "stop_pwm_08004b3c",
            "code": "\nvoid stop_pwm_08004b3c(undefined4 peripheral)\n\n{\n  int pwm_channel;\n  uint pin_function;\n  int pwm_handle [17];\n  \n  pwm_handle[0] = pinmap_peripheral(peripheral,&DAT_080074b4);\n  if ((pwm_handle[0] != 0) &&\n     ((((pwm_channel = get_pwm_channel(peripheral), pwm_channel == 0 || (pwm_channel == 4)) || (pwm_channel == 8)) ||\n      ((pwm_channel == 0xc || (pwm_channel == 0x18)))))) {\n    pin_function = pinmap_function(peripheral,&DAT_080074b4);\n    if ((pin_function & 0x100000) == 0) {\n      stop_pwm_08004b3c(pwm_handle,pwm_channel);\n    }\n    else {\n      stop_pwm_08004b3c_ex(pwm_handle,pwm_channel);\n    }\n    deinit_pwm(pwm_handle);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004b3c": "stop_pwm_08004b3c",
                "param_1": "peripheral",
                "local_50": "pwm_handle",
                "iVar1": "pwm_channel",
                "uVar2": "pin_function",
                "HAL_TIM_PWM_Stop": "stop_pwm",
                "HAL_TIMEx_PWMN_Stop": "stop_pwm_ex",
                "HAL_TIM_PWM_DeInit": "deinit_pwm"
            },
            "calling": [
                "FUN_080057b4"
            ],
            "called": [
                "FUN_0800412c",
                "FUN_08004948",
                "FUN_080040b0",
                "FUN_08004cce",
                "FUN_08004c78",
                "FUN_08003ed8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08004b3c": {
                    "1": "stop_pwm_outputs",
                    "7": "stop_pwm_channel",
                    "8": "stop_pwm",
                    "2": "stop_pwm_on_peripheral",
                    "3": "stop_timers"
                },
                "param_1": {
                    "15": "peripheral",
                    "1": "param",
                    "9": "device",
                    "4": "peripheral_address"
                },
                "local_50": {
                    "1": "tim_handle",
                    "2": "timers",
                    "7": "pwm_handle",
                    "3": "pwm_channel_array",
                    "5": "pwm_channels"
                },
                "iVar1": {
                    "5": "channel",
                    "20": "pwm_channel",
                    "1": "channel_index"
                },
                "uVar2": {
                    "2": "function",
                    "1": "function_flags",
                    "4": "function_pin",
                    "6": "pin_function"
                },
                "FUN_0800412c": {
                    "4": "pinmap_peripheral"
                },
                "FUN_08004948": {
                    "4": "get_pwm_channel"
                },
                "FUN_080040b0": {
                    "3": "pinmap_function"
                },
                "FUN_08004cce": {
                    "1": "check_pwm_channel",
                    "3": "hal_tim_pwm_stop"
                },
                "FUN_08004c78": {
                    "3": "hal_tim_ex_pwmn_stop",
                    "1": "check_pwm_channel"
                },
                "FUN_08003ed8": {
                    "3": "hal_tim_pwm_de_init"
                },
                "HAL_TIM_PWM_Stop": {
                    "1": "stop_pwm"
                },
                "HAL_TIMEx_PWMN_Stop": {
                    "1": "stop_pwm_ex"
                },
                "HAL_TIM_PWM_DeInit": {
                    "1": "deinit_pwm"
                },
                "FUND_08004b3c": {
                    "1": "stop_pwm"
                }
            }
        },
        "FUN_08004b94": {
            "entrypoint": "0x08004b94",
            "current_name": "get_current_tick_08004b94",
            "code": "\nvoid get_current_tick_08004b94(void)\n\n{\n  get_system_tick();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004b94": "get_current_tick_08004b94",
                "HAL_GetTick": "get_system_tick"
            },
            "calling": [
                "FUN_080058e0"
            ],
            "called": [
                "FUN_08001cc4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08004b94": {
                    "3": "get_system_tick",
                    "2": "get_current_timestamp",
                    "15": "get_current_tick",
                    "8": "get_current_time"
                },
                "FUN_08001cc4": {
                    "1": "get_dynamic_data",
                    "2": "get_value",
                    "9": "initialize_system",
                    "5": "retrieve_data"
                },
                "HAL_GetTick": {
                    "2": "current_tick",
                    "1": "get_tick_count"
                }
            }
        },
        "FUN_08004b9c": {
            "entrypoint": "0x08004b9c",
            "current_name": "FUNC_08004b9c",
            "code": "\nvoid FUNC_08004b9c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004b9c": "FUNC_08004b9c"
            },
            "calling": [
                "FUN_08004b9e"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004b9e": {
            "entrypoint": "0x08004b9e",
            "current_name": "update_system_tick_08004b9e",
            "code": "\nvoid update_system_tick_08004b9e(void)\n\n{\n  increment_system_tick();\n  handle_sys_tick_interrupt();\n  handle_no_os_sys_tick();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004b9e": "update_system_tick_08004b9e",
                "HAL_IncTick": "increment_system_tick",
                "HAL_SYSTICK_IRQHandler": "handle_sys_tick_interrupt",
                "noOsSystickHandler": "handle_no_os_sys_tick"
            },
            "calling": [],
            "called": [
                "FUN_08002582",
                "FUN_08004b9c",
                "FUN_08001cac"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08004b9e": {
                    "4": "handle_system_tick",
                    "1": "update_tick_and_interrupt_handler",
                    "3": "handle_tick_interrupt",
                    "2": "handle_sys_tick",
                    "11": "update_system_tick",
                    "6": "handle_sys_tick_interrupt"
                },
                "FUN_08002582": {
                    "2": "perform_initialization",
                    "1": "execute_function1",
                    "7": "increment_tick"
                },
                "FUNC_08004b9c": {
                    "1": "handle_tick",
                    "2": "handle_sys_tick",
                    "5": "handle_sys_tick_interrupt"
                },
                "FUN_08001cac": {
                    "6": "no_os_systick_handler",
                    "1": "execute_function3",
                    "3": "handle_no_os_systick"
                },
                "HAL_IncTick": {
                    "9": "increment_system_tick",
                    "2": "increment_sys_tick",
                    "5": "increment_tick"
                },
                "HAL_SYSTICK_IRQHandler": {
                    "4": "handle_sys_tick_irq",
                    "3": "handle_system_tick_interrupt",
                    "1": "process_sys_tick_interrupt",
                    "2": "handle_sys_tick",
                    "6": "handle_sys_tick_interrupt"
                },
                "noOsSystickHandler": {
                    "1": "perform_no_os_systick_handling",
                    "7": "handle_no_os_sys_tick",
                    "4": "custom_sys_tick_handler",
                    "2": "handle_no_os_system_tick"
                }
            }
        },
        "FUN_08004bb0": {
            "entrypoint": "0x08004bb0",
            "current_name": "initialize_gpio_08004bb0",
            "code": "\n\n\nvoid initialize_gpio_08004bb0(uint pin_number,undefined4 param2,undefined4 param3)\n\n{\n  undefined4 gpio_port;\n  uint pin_mask;\n  undefined4 local_var1;\n  undefined4 local_var2;\n  undefined4 local_var3;\n  \n  gpio_port = set_clock((pin_number << 0x18) >> 0x1c);\n  pin_mask = 1 << (pin_number & 0xf) & 0xffff;\n  local_var3 = 3;\n  _DAT_40021018 = _DAT_40021018 | 1;\n  if ((pin_number - 0xd & 0xff) < 2) {\n    _DAT_40010004 = _DAT_40010004 & 0xf8ffffff | 0x4000000;\n  }\n  if (((pin_number == 0xf) || (pin_number == 0x13)) || (pin_number == 0x14)) {\n    _DAT_40010004 = _DAT_40010004 & 0xf8ffffff | 0x2000000;\n  }\n  local_var1 = param2;\n  local_var2 = param3;\n  configure_gpio(gpio_port,&pin_mask);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004bb0": "initialize_gpio_08004bb0",
                "param_1": "pin_number",
                "param_2": "param2",
                "param_3": "param3",
                "local_20": "pin_mask",
                "local_1c": "local_var1",
                "local_18": "local_var2",
                "local_14": "local_var3",
                "uVar1": "gpio_port",
                "HAL_GPIO_Init": "configure_gpio",
                "set_GPIO_Port_Clock": "set_clock"
            },
            "calling": [
                "FUN_080057b4"
            ],
            "called": [
                "FUN_08004884",
                "FUN_08002624"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08004bb0": {
                    "4": "configure_gpio",
                    "1": "initialize_gpio_pin",
                    "10": "initialize_gpio_port",
                    "15": "initialize_gpio"
                },
                "param_1": {
                    "2": "pin_index",
                    "26": "pin_number",
                    "1": "pin"
                },
                "param_2": {
                    "1": "init_struct_ptr",
                    "10": "param2",
                    "3": "config_param1",
                    "2": "mode",
                    "7": "param_2"
                },
                "param_3": {
                    "2": "param2",
                    "3": "config_param2",
                    "1": "gpio_pull",
                    "10": "param3",
                    "7": "param_3"
                },
                "local_20": {
                    "2": "gpio_pin_mask",
                    "1": "gpio_config",
                    "27": "pin_mask"
                },
                "local_1c": {
                    "2": "local_param_1",
                    "3": "new_param2",
                    "1": "local_1c",
                    "6": "local_var1"
                },
                "local_18": {
                    "6": "local_var2",
                    "1": "local_18",
                    "2": "param2_copy",
                    "3": "local_param_3"
                },
                "local_14": {
                    "1": "default_speed",
                    "2": "local_var",
                    "5": "constant_value",
                    "6": "local_var3"
                },
                "uVar1": {
                    "2": "port",
                    "3": "port_clock",
                    "1": "port_address",
                    "19": "gpio_port"
                },
                "_DAT_40021018": {
                    "2": "register_1",
                    "1": "port_c_register",
                    "4": "gpio_port_clock_register"
                },
                "_DAT_40010004": {
                    "1": "gpio_register",
                    "2": "gpio_mode_register",
                    "4": "register2"
                },
                "FUN_08004884": {
                    "1": "initialize_gpio_port_clock"
                },
                "FUN_08002624": {
                    "1": "initialize_gpio"
                },
                "HAL_GPIO_Init": {
                    "1": "initialize_gpio",
                    "2": "configure_gpio"
                },
                "set_GPIO_Port_Clock": {
                    "1": "set_clock"
                }
            }
        },
        "FUN_08004c30": {
            "entrypoint": "0x08004c30",
            "current_name": "write_pin_based_on_condition_08004c30",
            "code": "\nvoid write_pin_based_on_condition_08004c30(undefined4 gpio_port,undefined2 pin,int state,undefined4 param)\n\n{\n  if (state == 0) {\n    write_gpio(gpio_port,pin,0,param,param);\n    return;\n  }\n  write_gpio(gpio_port,pin,1,param,param);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004c30": "write_pin_based_on_condition_08004c30",
                "param_1": "gpio_port",
                "param_2": "pin",
                "param_3": "state",
                "param_4": "param",
                "HAL_GPIO_WritePin": "write_gpio"
            },
            "calling": [
                "FUN_08005848"
            ],
            "called": [
                "FUN_0800281e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08004c30": {
                    "1": "set_gpio_pin_state",
                    "2": "write_pin",
                    "4": "set_gpio_state",
                    "3": "toggle_gpio_pin",
                    "5": "write_pin_based_on_condition"
                },
                "param_1": {
                    "11": "port",
                    "1": "pin_port",
                    "2": "param1",
                    "3": "pin",
                    "12": "gpio_port"
                },
                "param_2": {
                    "2": "state",
                    "11": "gpio_pin",
                    "1": "pin_state",
                    "12": "pin"
                },
                "param_3": {
                    "1": "level",
                    "2": "param3",
                    "6": "condition",
                    "18": "state"
                },
                "param_4": {
                    "1": "delay",
                    "6": "param4",
                    "2": "arg1",
                    "14": "param"
                },
                "HAL_GPIO_WritePin": {
                    "2": "gpio_write_pin",
                    "3": "write_gpio",
                    "1": "set_gpio_pin_state"
                },
                "FUN_0800281e": {
                    "1": "auxiliary_function",
                    "2": "perform_operation"
                }
            }
        },
        "FUN_08004c48": {
            "entrypoint": "0x08004c48",
            "current_name": "read_gpio_pin_08004c48",
            "code": "\nvoid read_gpio_pin_08004c48(undefined4 gpio_port,undefined2 gpio_pin,undefined4 param3,undefined4 param4)\n\n{\n  read_pin(gpio_port,gpio_pin,param3,param4,param4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004c48": "read_gpio_pin_08004c48",
                "param_1": "gpio_port",
                "param_2": "gpio_pin",
                "param_3": "param3",
                "param_4": "param4",
                "HAL_GPIO_ReadPin": "read_pin"
            },
            "calling": [
                "FUN_08005890"
            ],
            "called": [
                "FUN_08002810"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08004c48": {
                    "1": "read_pin_status",
                    "12": "read_gpio_pin",
                    "4": "read_and_return_pin_state",
                    "2": "read_pin_and_return",
                    "5": "read_pin"
                },
                "param_1": {
                    "4": "param1",
                    "3": "data",
                    "2": "param_1",
                    "1": "pin",
                    "11": "gpio_port"
                },
                "param_2": {
                    "1": "pin_state",
                    "4": "param2",
                    "3": "param_2",
                    "6": "gpio_pin",
                    "2": "length"
                },
                "param_3": {
                    "14": "param3",
                    "2": "gpio_mode",
                    "1": "param",
                    "12": "param_3"
                },
                "param_4": {
                    "1": "gpio_pull",
                    "14": "param4",
                    "12": "param_4"
                },
                "FUN_08002810": {
                    "1": "perform_operation",
                    "3": "process_data",
                    "4": "reverse_bits"
                },
                "HAL_GPIO_ReadPin": {
                    "1": "read_pin"
                }
            }
        },
        "FUN_08004c52": {
            "entrypoint": "0x08004c52",
            "current_name": "initialize_system_08004c52",
            "code": "\nvoid initialize_system_08004c52(void)\n\n{\n  initialize_hal();\n  configure_system_clock();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004c52": "initialize_system_08004c52",
                "HAL_Init": "initialize_hal",
                "SystemClock_Config": "configure_system_clock"
            },
            "calling": [
                "FUN_08001c32"
            ],
            "called": [
                "FUN_08001c88",
                "FUN_08001b48"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08004c52": {
                    "1": "initialize_hardware",
                    "28": "initialize_system"
                },
                "HAL_Init": {
                    "1": "initialize_hardware_abstraction_layer",
                    "2": "initialize_hardware",
                    "11": "initialize_hal"
                },
                "SystemClock_Config": {
                    "1": "configure_clock",
                    "13": "configure_system_clock"
                },
                "FUN_08001c88": {
                    "1": "perform_initialization",
                    "2": "initialize_hal",
                    "4": "configure_hardware"
                },
                "FUN_08001b48": {
                    "2": "execute_task",
                    "1": "initialize_clock",
                    "10": "configure_system_clock",
                    "5": "configure_clock"
                }
            }
        },
        "FUN_08004c5e": {
            "entrypoint": "0x08004c5e",
            "current_name": "find_value_08004c5e",
            "code": "\nundefined4 find_value_08004c5e(int target_value,char *array)\n\n{\n  while( true ) {\n    if (*array == -1) {\n      return 0;\n    }\n    if (*array == target_value) break;\n    array = array + 0xc;\n  }\n  return *(undefined4 *)(array + 4);\n}\n\n",
            "renaming": {
                "FUN_08004c5e": "find_value_08004c5e",
                "param_1": "target_value",
                "param_2": "array"
            },
            "calling": [
                "FUN_08004c5e",
                "FUN_08004c78"
            ],
            "called": [
                "FUN_08004c5e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08004c5e": {
                    "2": "find_param_value",
                    "4": "find_value_by_key",
                    "7": "find_value",
                    "1": "find_value_in_list",
                    "6": "find_value_in_array"
                },
                "param_1": {
                    "7": "value_to_find",
                    "1": "index",
                    "10": "target_value",
                    "6": "value",
                    "4": "key"
                },
                "param_2": {
                    "2": "param_list",
                    "6": "data_array",
                    "9": "array",
                    "1": "array_start",
                    "3": "array_of_values",
                    "5": "array_ptr"
                },
                "*param_2": {
                    "2": "current_element",
                    "1": "current_value"
                },
                "PTR_": {
                    "1": "<unchanged>"
                },
                "DAT_": {
                    "1": "<unchanged>"
                },
                "*(undefined4 *)(param_2 + 4)": {
                    "2": "value_found",
                    "1": "parameter_value"
                },
                "param_2 + 0xc": {
                    "3": "next_element",
                    "1": "next_parameter"
                },
                "param_2[0]": {
                    "1": "current_value"
                },
                "PTR_08004c5e": {
                    "1": "result"
                },
                "param_2[12n]": {
                    "1": "next_value"
                },
                "param_2[12]": {
                    "1": "current_element"
                },
                "param_2[16]": {
                    "1": "offset"
                }
            }
        },
        "FUN_08004c78": {
            "entrypoint": "0x08004c78",
            "current_name": "find_peripheral_08004c78",
            "code": "\nundefined4 find_peripheral_08004c78(int input_value)\n\n{\n  undefined4 peripheral;\n  \n  if (input_value != -1) {\n    peripheral = pinmap_find_peripheral_08004c78();\n    return peripheral;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08004c78": "find_peripheral_08004c78",
                "param_1": "input_value",
                "uVar1": "peripheral"
            },
            "calling": [
                "FUN_08004f4c",
                "FUN_08004a4c",
                "FUN_08004b3c",
                "FUN_080053d4",
                "FUN_08005384"
            ],
            "called": [
                "FUN_08004c5e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08004c78": {
                    "25": "find_peripheral",
                    "1": "find_valid_peripheral"
                },
                "param_1": {
                    "4": "input_param",
                    "1": "value",
                    "16": "input_value"
                },
                "uVar1": {
                    "1": "found_peripheral",
                    "9": "result",
                    "5": "peripheral_found",
                    "2": "peripheral_result",
                    "3": "peripheral_value"
                },
                "FUN_08004c5e": {
                    "2": "find_peripheral_helper",
                    "3": "pinmap_find_peripheral",
                    "1": "find_peripheral"
                },
                "param_2": {
                    "1": "helper_parameter",
                    "4": "peripheral_name"
                }
            }
        },
        "FUN_08004c8a": {
            "entrypoint": "0x08004c8a",
            "current_name": "find_value_index_08004c8a",
            "code": "\nint find_value_index_08004c8a(int target_value,char *array)\n\n{\n  while( true ) {\n    if (*(int *)(array + 4) == 0) {\n      return -1;\n    }\n    if (*(int *)(array + 4) == target_value) break;\n    array = array + 0xc;\n  }\n  return (int)*array;\n}\n\n",
            "renaming": {
                "FUN_08004c8a": "find_value_index_08004c8a",
                "param_1": "target_value",
                "param_2": "array"
            },
            "calling": [
                "FUN_08004c8a",
                "FUN_08004ca2"
            ],
            "called": [
                "FUN_08004c8a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08004c8a": {
                    "4": "find_value_in_array",
                    "1": "find_param_value",
                    "2": "find_integer_in_array",
                    "3": "find_value_in_list"
                },
                "param_1": {
                    "5": "value",
                    "4": "character",
                    "6": "target_value",
                    "3": "element",
                    "1": "key",
                    "2": "target"
                },
                "param_2": {
                    "1": "char_array",
                    "12": "array",
                    "2": "character_list",
                    "4": "array_ptr"
                },
                "*(int *)(param_2 + 4)": {
                    "1": "current_element",
                    "2": "current_index"
                },
                "param_2 + 0xc": {
                    "1": "advance_to_next_character",
                    "2": "next_element",
                    "5": "next_array_element"
                },
                "*param_2": {
                    "1": "current_value",
                    "2": "current_element",
                    "3": "found_value",
                    "4": "result"
                },
                "param_2 + 4": {
                    "5": "array_element",
                    "1": "current_param_value",
                    "2": "current_element"
                },
                "*param_2 + 4": {
                    "1": "next_param_value"
                },
                "*(int *)param_2": {
                    "1": "result"
                },
                "param_2+4": {
                    "1": "array_size"
                },
                "param_2+0xc": {
                    "1": "next_array_element"
                },
                "*ptr": {
                    "1": "value"
                },
                "loc_1": {
                    "1": "list_length"
                },
                "loc_2": {
                    "1": "current_item"
                },
                "return -1": {
                    "1": "element_not_found"
                },
                "*(int *)(param_2 + 0xc)": {
                    "1": "next_element"
                }
            }
        },
        "FUN_08004ca2": {
            "entrypoint": "0x08004ca2",
            "current_name": "find_pin_08004ca2",
            "code": "\nundefined4 find_pin_08004ca2(int pin_value)\n\n{\n  undefined4 found_pin;\n  \n  if (pin_value != 0) {\n    found_pin = pinmap_find_pin_08004ca2();\n    return found_pin;\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_08004ca2": "find_pin_08004ca2",
                "param_1": "pin_value",
                "uVar1": "found_pin"
            },
            "calling": [
                "FUN_08005b54",
                "FUN_08005384"
            ],
            "called": [
                "FUN_08004c8a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08004ca2": {
                    "1": "find_and_return_pin",
                    "4": "find_pin_by_param",
                    "5": "find_pin"
                },
                "param_1": {
                    "2": "pin_param",
                    "1": "param",
                    "6": "pin_id",
                    "8": "pin_value",
                    "3": "pin",
                    "5": "input_param"
                },
                "uVar1": {
                    "11": "pin_result",
                    "1": "pin",
                    "12": "found_pin",
                    "4": "result"
                },
                "FUN_08004c8a": {
                    "1": "pinmap_find_pin"
                },
                "param_2": {
                    "1": "pinmap"
                }
            }
        },
        "FUN_08004cb2": {
            "entrypoint": "0x08004cb2",
            "current_name": "find_value_index_08004cb2",
            "code": "\nundefined4 find_value_index_08004cb2(int target_value,char *array)\n\n{\n  while( true ) {\n    if (*array == -1) {\n      return 0xffffffff;\n    }\n    if (*array == target_value) break;\n    array = array + 0xc;\n  }\n  return *(undefined4 *)(array + 8);\n}\n\n",
            "renaming": {
                "FUN_08004cb2": "find_value_index_08004cb2",
                "param_1": "target_value",
                "param_2": "array"
            },
            "calling": [
                "FUN_08004cce",
                "FUN_08004cb2"
            ],
            "called": [
                "FUN_08004cb2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08004cb2": {
                    "1": "find_param_value",
                    "3": "find_value",
                    "4": "find_value_in_list",
                    "2": "find_value_by_index"
                },
                "param_1": {
                    "5": "value_to_find",
                    "15": "target_value",
                    "1": "key",
                    "7": "value"
                },
                "param_2": {
                    "8": "data_array",
                    "11": "array",
                    "1": "buffer",
                    "2": "array_ptr"
                },
                "*param_2": {
                    "3": "current_element",
                    "1": "data_array_value",
                    "6": "current_value"
                },
                "return 0xffffffff;": {
                    "1": "no_match_found"
                },
                "*(undefined4 *)(param_2 + 8);": {
                    "1": "get_return_value(parameter_list)"
                },
                "ptr_value": {
                    "1": "value_ptr"
                },
                "param_2+0xc": {
                    "1": "array_next_element"
                },
                "param_2 + 8": {
                    "1": "return_address"
                },
                "0xffffffff": {
                    "1": "value_not_found"
                },
                "param_2 + 0xc": {
                    "3": "next_value",
                    "2": "next_element",
                    "1": "array_next_element"
                },
                "*(undefined4 *)(param_2 + 8)": {
                    "1": "desired_value",
                    "3": "found_value"
                },
                "*param_2 + 0xc": {
                    "1": "next_value"
                }
            }
        },
        "FUN_08004cce": {
            "entrypoint": "0x08004cce",
            "current_name": "find_function_result_08004cce",
            "code": "\nundefined4 find_function_result_08004cce(int input_value)\n\n{\n  undefined4 result;\n  \n  if (input_value == -1) {\n    return 0xffffffff;\n  }\n  result = pinmap_find_function();\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08004cce": "find_function_result_08004cce",
                "param_1": "input_value",
                "uVar1": "result"
            },
            "calling": [
                "FUN_08004f4c",
                "FUN_0800492c",
                "FUN_08004948",
                "FUN_08004b3c"
            ],
            "called": [
                "FUN_08004cb2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08004cce": {
                    "1": "find_function_or_error_code",
                    "2": "find_function_or_default",
                    "3": "find_pinmap_function",
                    "9": "find_function_result",
                    "4": "find_function"
                },
                "param_1": {
                    "3": "input",
                    "1": "pin",
                    "14": "input_value",
                    "8": "input_param"
                },
                "uVar1": {
                    "1": "found_function",
                    "3": "function_address",
                    "11": "function_result",
                    "2": "function_found",
                    "13": "result"
                }
            }
        },
        "FUN_08004ce2": {
            "entrypoint": "0x08004ce2",
            "current_name": "find_value_in_array_08004ce2",
            "code": "\nundefined4 find_value_in_array_08004ce2(int value,char *array)\n\n{\n  if (value == -1) {\n    return 0;\n  }\n  while( true ) {\n    if (*array == -1) {\n      return 0;\n    }\n    if (value == *array) break;\n    array = array + 0xc;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08004ce2": "find_value_in_array_08004ce2",
                "param_1": "value",
                "param_2": "array"
            },
            "calling": [
                "FUN_080057b4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08004ce2": {
                    "1": "compare_integer_character",
                    "3": "find_value",
                    "2": "check_value",
                    "7": "find_value_in_array"
                },
                "param_1": {
                    "2": "value_to_check",
                    "1": "input_param",
                    "3": "value1",
                    "4": "value_1",
                    "13": "value"
                },
                "param_2": {
                    "14": "array",
                    "1": "char_array",
                    "4": "string",
                    "3": "array_of_values",
                    "2": "array_ptr"
                },
                "*param_2": {
                    "1": "current_element",
                    "6": "current_value"
                },
                "param_2 + 0xc": {
                    "4": "next_value"
                },
                "*param_2 == -1": {
                    "1": "is_end_of_array"
                },
                "param_1 == *param_2": {
                    "1": "values_match"
                }
            }
        },
        "FUN_08004d06": {
            "entrypoint": "0x08004d06",
            "current_name": "compare_and_return_smaller_08004d06",
            "code": "\nint compare_and_return_smaller_08004d06(int value1,int value2)\n\n{\n  if (value1 != value2) {\n    if (value1 == 0) {\n      return value2;\n    }\n    if (value2 == 0) {\n      return value1;\n    }\n    value1 = 0;\n  }\n  return value1;\n}\n\n",
            "renaming": {
                "FUN_08004d06": "compare_and_return_smaller_08004d06",
                "param_1": "value1",
                "param_2": "value2"
            },
            "calling": [
                "FUN_08004f4c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08004d06": {
                    "1": "compare_and_return_min",
                    "8": "compare_and_return_smaller",
                    "4": "compare_and_return_non_zero",
                    "2": "find_nonzero_value",
                    "3": "compare_and_return_nonzero"
                },
                "param_1": {
                    "1": "smaller_input",
                    "3": "num1",
                    "8": "value_1",
                    "12": "value1"
                },
                "param_2": {
                    "3": "num2",
                    "1": "input_2",
                    "8": "value_2",
                    "12": "value2"
                },
                "param_1 == param_2": {
                    "1": "value1_equals_value2"
                },
                "param_1 == 0": {
                    "1": "value1_is_zero"
                },
                "param_2 == 0": {
                    "1": "value2_is_zero"
                },
                "param_1 != param_2": {
                    "1": "values_are_not_equal"
                }
            }
        },
        "FUN_08004d18": {
            "entrypoint": "0x08004d18",
            "current_name": "execute_callback_08004d18",
            "code": "\nvoid execute_callback_08004d18(void)\n\n{\n  if (DAT_20000260 != (callback_function *)0x0) {\n    (*DAT_20000260)(DAT_20000278);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004d18": "execute_callback_08004d18",
                "code": "callback_function"
            },
            "calling": [
                "FUN_08003ea0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08004d18": {
                    "1": "call_function_if_not_null",
                    "15": "execute_callback",
                    "3": "execute_function_if_not_null",
                    "8": "execute_callback_function"
                },
                "DAT_20000260": {
                    "3": "function_pointer",
                    "4": "callback_function_pointer",
                    "1": "callback_pointer",
                    "11": "callback_function"
                },
                "DAT_20000278": {
                    "1": "code_parameter",
                    "8": "callback_data",
                    "2": "argument",
                    "3": "callback_function_argument",
                    "4": "callback_parameter"
                },
                "code": {
                    "6": "callback_function"
                },
                "code *": {
                    "1": "function_pointer"
                },
                "void": {
                    "1": "void"
                },
                "executeFunction": {
                    "1": "execute_function"
                },
                "functionPointer": {
                    "1": "function_pointer"
                },
                "execute_callback": {
                    "1": "execute_callback"
                },
                "PTR_execute_callback_param_1": {
                    "1": "param_1"
                },
                "DAT_execute_callback_param_2": {
                    "1": "param_2"
                },
                "(*DAT_20000260)": {
                    "2": "callback_function"
                },
                "executeCallback": {
                    "2": "execute_callback"
                },
                "callbackFunction": {
                    "2": "callback_function"
                },
                "executeCallbackFunction": {
                    "1": "callback_function_executor"
                },
                "PTR_FUN_08004d18_param_1": {
                    "1": "callback_function"
                },
                "PTR_FUN_08004d18_param_2": {
                    "1": "callback_data"
                }
            }
        },
        "FUN_08004d40": {
            "entrypoint": "0x08004d40",
            "current_name": "infinite_loop_08004d40",
            "code": "\nvoid infinite_loop_08004d40(void)\n\n{\n  loop {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( is_true );\n}\n\n",
            "renaming": {
                "FUN_08004d40": "infinite_loop_08004d40",
                "do": "loop",
                "true": "is_true"
            },
            "calling": [
                "FUN_08004d40",
                "FUN_08001b48"
            ],
            "called": [
                "FUN_08004d40"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08004d40": {
                    "1": "loop_forever",
                    "24": "infinite_loop",
                    "2": "run_infinite_loop"
                },
                "PTR_XXXXXXX": {
                    "1": "ptr_variable1"
                },
                "DAT_XXXXXXX": {
                    "1": "data_variable1"
                },
                "PTR_": {
                    "3": "ptr",
                    "1": "ptr_"
                },
                "DAT_": {
                    "1": "dat_",
                    "3": "dat"
                },
                "do": {
                    "1": "loop"
                },
                "true": {
                    "1": "is_true"
                },
                "_": {
                    "1": "_"
                },
                "PTR_12345678": {
                    "1": "unchanged_ptr"
                },
                "DAT_87654321": {
                    "1": "unchanged_data"
                },
                "PTR_XXXXX": {
                    "1": "ptr_xxxxx"
                },
                "DAT_XXXXX": {
                    "1": "dat_xxxxx"
                },
                "ptr_param_1": {
                    "1": "ptr_input"
                },
                "ptr_param_2": {
                    "1": "ptr_data"
                },
                "ptr_param_3": {
                    "1": "ptr_buffer"
                },
                "<original_parameter_name_1>": {
                    "1": "<new_parameter_name_1>"
                },
                "<original_parameter_name_2>": {
                    "1": "<new_parameter_name_2>"
                },
                "<original_parameter_name_n>": {
                    "1": "<new_parameter_name_n>"
                },
                "PTR_something": {
                    "1": "ptr_something"
                },
                "DAT_something": {
                    "1": "dat_something"
                }
            }
        },
        "FUN_08004d44": {
            "entrypoint": "0x08004d44",
            "current_name": "initialize_registers_08004d44",
            "code": "\n\n\nvoid initialize_registers_08004d44(void)\n\n{\n  _DAT_40021000 = _DAT_40021000 & 0xfef2ffff | 1;\n  _DAT_40021004 = _DAT_40021004 & 0xf8800000;\n  _DAT_40021008 = 0x9f0000;\n  _DAT_e000ed08 = 0x8000000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004d44": "initialize_registers_08004d44"
            },
            "calling": [
                "FUN_08001be8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08004d44": {
                    "1": "configure_peripheral",
                    "4": "initialize_memory",
                    "10": "initialize_registers",
                    "2": "initialize_peripheral",
                    "3": "initialize_peripheral_registers"
                },
                "_DAT_40021000": {
                    "1": "device_control_register1",
                    "7": "register1",
                    "2": "status_register",
                    "3": "control_register1",
                    "5": "control_register"
                },
                "_DAT_40021004": {
                    "1": "gpio_pin_mask",
                    "2": "control_register",
                    "5": "status_register",
                    "3": "control_register2",
                    "7": "register2"
                },
                "_DAT_40021008": {
                    "1": "hardware_control_reg",
                    "7": "register3",
                    "4": "data_register",
                    "2": "timer_register"
                },
                "_DAT_e000ed08": {
                    "1": "peripheral_ctrl",
                    "6": "interrupt_register",
                    "3": "system_control_register",
                    "7": "register4"
                }
            }
        },
        "FUN_08004d90": {
            "entrypoint": "0x08004d90",
            "current_name": "update_registers_08004d90",
            "code": "\n\n\nvoid update_registers_08004d90(int *value)\n\n{\n  if (*value == 0x40012c00) {\n    _DAT_40021018 = _DAT_40021018 & 0xfffff7ff;\n  }\n  if (*value == 0x40000000) {\n    _DAT_4002101c = _DAT_4002101c & 0xfffffffe;\n  }\n  if (*value == 0x40000400) {\n    _DAT_4002101c = _DAT_4002101c & 0xfffffffd;\n  }\n  if (*value == 0x40000800) {\n    _DAT_4002101c = _DAT_4002101c & 0xfffffffb;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004d90": "update_registers_08004d90",
                "param_1": "value"
            },
            "calling": [
                "FUN_08004b34"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08004d90": {
                    "1": "update_flags_based_on_value",
                    "2": "clear_flags",
                    "5": "update_registers",
                    "3": "update_flags"
                },
                "*param_1": {
                    "2": "control_value",
                    "1": "system_value"
                },
                "param_1": {
                    "1": "memory_address",
                    "2": "flag_ptr",
                    "4": "value"
                },
                "_DAT_40021018": {
                    "1": "data_flags1",
                    "3": "register_a"
                },
                "_DAT_4002101c": {
                    "1": "flag2",
                    "3": "control_register2"
                },
                "0x40012c00": {
                    "1": "some_constant_1"
                },
                "0x40000000": {
                    "1": "mask_2"
                },
                "0x40000400": {
                    "1": "flag_3"
                },
                "0x40000800": {
                    "1": "mask_4"
                },
                ": >DAT_40021018": {
                    "1": "flags_register18"
                },
                "DAT_4002101c": {
                    "1": "flags_register1c"
                },
                "0xfffff7ff": {
                    "1": "bits_to_clear_1"
                },
                "0xfffffffe": {
                    "1": "bits_to_clear_2"
                },
                "0xfffffffd": {
                    "1": "bits_to_clear_3"
                },
                "0xfffffffb": {
                    "1": "bits_to_clear_4"
                },
                "PTR_40021018": {
                    "1": "permission_register1"
                },
                "PTR_4002101c": {
                    "1": "permission_register2"
                }
            }
        },
        "FUN_08004df4": {
            "entrypoint": "0x08004df4",
            "current_name": "subtract_four_08004df4",
            "code": "\nint subtract_four_08004df4(int result)\n\n{\n  result result + -4;\n}\n\n",
            "renaming": {
                "FUN_08004df4": "subtract_four_08004df4",
                "param_1": "result",
                "return": "result"
            },
            "calling": [
                "FUN_08004e12",
                "FUN_08004df8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08004df4": {
                    "1": "add_four",
                    "27": "subtract_four"
                },
                "param_1": {
                    "7": "input",
                    "1": "num_to_subtract",
                    "4": "input_value",
                    "2": "input_number",
                    "6": "num",
                    "8": "result"
                },
                "return": {
                    "3": "result"
                },
                "param_2": {
                    "1": "new_param_name_2",
                    "2": "new_parameter_name_2"
                },
                "param_n": {
                    "1": "new_param_name_n"
                },
                "var_1": {
                    "1": "result"
                },
                "var_2": {
                    "1": "new_var_name_2"
                },
                "var_n": {
                    "1": "new_var_name_n"
                },
                "return_value": {
                    "1": "result"
                }
            }
        },
        "FUN_08004df8": {
            "entrypoint": "0x08004df8",
            "current_name": "execute_timer_function_08004df8",
            "code": "\nvoid execute_timer_function_08004df8(int timer_obj)\n\n{\n  int timer_obj;\n  \n  timer_obj = get_timer_object();\n  if ((*(function_pointer **)(timer_obj + 0x4c) != (function_pointer *)0x0) && (*(char *)(timer_obj + 0x1c) == '\\x01')) {\n    (**(function_pointer **)(timer_obj + 0x4c))(timer_obj,0);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004df8": "execute_timer_function_08004df8",
                "param_1": "timer_obj",
                "iVar1": "timer_obj",
                "get_timer_obj": "get_timer_object",
                "code": "function_pointer"
            },
            "calling": [
                "FUN_08003f18"
            ],
            "called": [
                "FUN_08004df4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08004df8": {
                    "1": "execute_timer",
                    "7": "execute_timer_callback",
                    "4": "execute_timer_action",
                    "15": "execute_timer_function"
                },
                "param_1": {
                    "6": "timer_id",
                    "1": "game_object_id",
                    "8": "timer_obj",
                    "5": "timer_object"
                },
                "iVar1": {
                    "1": "timer_object_ptr",
                    "4": "timer_handle",
                    "5": "timer_object",
                    "14": "timer_obj"
                },
                "get_timer_obj": {
                    "2": "fetch_timer_object",
                    "11": "get_timer_object",
                    "1": "get_timer"
                },
                "FUN_08004df4": {
                    "1": "check_if_timer_valid",
                    "2": "check_condition",
                    "4": "get_timer_obj"
                },
                "0x1c": {
                    "1": "condition_offset"
                },
                "0x4c": {
                    "1": "callback_offset"
                },
                "*(code **)(iVar1 + 0x4c)": {
                    "1": "timer_function_ptr",
                    "2": "timer_function"
                },
                "*(char *)(param_1 + 0x1c)": {
                    "1": "timer_status"
                },
                "(*get_timer_obj)()": {
                    "1": "get_timer_object"
                },
                "(code *)0x0": {
                    "2": "null",
                    "1": "null_code_ptr"
                },
                "(code **)(timer + 0x4c)": {
                    "1": "timer_function"
                },
                "*(char *)(timerIndex + 0x1c)": {
                    "1": "flag"
                },
                "param_1 + 0x1c": {
                    "1": "timer_status"
                },
                "(**(code **)(iVar1 + 0x4c))(iVar1,0)": {
                    "1": "execute_timer_callback"
                },
                "code": {
                    "1": "timer_obj_function",
                    "2": "function_pointer"
                },
                "iVar1+0x4c": {
                    "1": "callback_offset"
                },
                "(code **)": {
                    "1": "code_ptr"
                },
                "(iVar1 + 0x4c)": {
                    "1": "timer_action_function_ptr"
                },
                "(**(code **)(iVar1 + 0x4c))": {
                    "1": "timer_action_function"
                }
            }
        },
        "FUN_08004e12": {
            "entrypoint": "0x08004e12",
            "current_name": "execute_timer_function_08004e12",
            "code": "\nvoid execute_timer_function_08004e12(void)\n\n{\n  int timer_obj;\n  \n  timer_obj = get_timer_object();\n  if (*(code **)(timer_obj + 0x48) != (code *)0x0) {\n    (**(code **)(timer_obj + 0x48))();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004e12": "execute_timer_function_08004e12",
                "iVar1": "timer_obj",
                "get_timer_obj()": "get_timer_object()",
                "get_timer_obj": "retrieve_timer_object"
            },
            "calling": [
                "FUN_08003f18"
            ],
            "called": [
                "FUN_08004df4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08004e12": {
                    "1": "execute_timer",
                    "2": "execute_timer_callback",
                    "22": "execute_timer_function"
                },
                "FUN_08004df4": {
                    "1": "get_timer_object",
                    "19": "get_timer_obj",
                    "2": "check_timer_object"
                },
                "iVar1": {
                    "4": "timer_obj_address",
                    "1": "timer_object_pointer",
                    "2": "timer_obj_ptr",
                    "5": "timer_object",
                    "15": "timer_obj"
                },
                "get_timer_obj()": {
                    "1": "get_timer_object()"
                },
                "*(code **)(timer_obj + 0x48)": {
                    "1": "timer_function"
                },
                "(code *)0x0": {
                    "1": "null_function_pointer"
                },
                "param_1": {
                    "1": "input_param",
                    "2": "input_value",
                    "3": "obj_id",
                    "5": "timer_object",
                    "6": "timer_obj"
                },
                "get_timer_obj": {
                    "1": "get_timer_object"
                },
                "*(code **)(timerObject + 0x48)": {
                    "1": "timer_function"
                },
                "<original_variable_name_1>": {
                    "1": "<new_variable_name_1>"
                },
                "<original_variable_name_2>": {
                    "1": "<new_variable_name_2>"
                },
                "**(code **)(iVar1 + 0x48)": {
                    "1": "event_function"
                },
                "getCode": {
                    "1": "get_code_pointer"
                }
            }
        },
        "FUN_08004e20": {
            "entrypoint": "0x08004e20",
            "current_name": "handle_timer_interrupt_08004e20",
            "code": "\nvoid handle_timer_interrupt_08004e20(void)\n\n{\n  if (DAT_2000027c != 0) {\n    handle_timer_interrupt_08004e20();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004e20": "handle_timer_interrupt_08004e20",
                "HAL_TIM_IRQHandler": "handle_timer_interrupt"
            },
            "calling": [],
            "called": [
                "FUN_08003f18"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08004e20": {
                    "12": "handle_timer_interrupt",
                    "6": "handle_tim_irq",
                    "11": "handle_tim_interrupt",
                    "2": "handle_timer_irq"
                },
                "FUN_08003f18": {
                    "6": "process_parameter",
                    "13": "process_data",
                    "1": "process_param1",
                    "3": "process_param",
                    "2": "process_input_data"
                },
                "param_1": {
                    "1": "input_param",
                    "9": "data",
                    "2": "data_ptr",
                    "5": "parameter",
                    "3": "param"
                },
                "HAL_TIM_IRQHandler": {
                    "1": "handle_timer_irq"
                },
                "DAT_2000027c": {
                    "2": "timer_flag",
                    "1": "is_interrupt_enabled"
                }
            }
        },
        "FUN_08004e70": {
            "entrypoint": "0x08004e70",
            "current_name": "subtract_four_08004e70",
            "code": "\nint subtract_four_08004e70(int input)\n\n{\n  result input + -4;\n}\n\n",
            "renaming": {
                "FUN_08004e70": "subtract_four_08004e70",
                "param_1": "input",
                "return": "result"
            },
            "calling": [
                "FUN_08004ef4",
                "FUN_08004ec4",
                "FUN_08004e74"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08004e70": {
                    "1": "subtract_four_from_value",
                    "25": "subtract_four",
                    "2": "subtract_four_from_param"
                },
                "param_1": {
                    "9": "input",
                    "1": "original_value",
                    "2": "output",
                    "3": "input_value",
                    "4": "num",
                    "7": "result"
                },
                "param_2": {
                    "1": "new_parameter_name_2"
                },
                "param_n": {
                    "1": "new_parameter_name_n"
                },
                "var_1": {
                    "1": "subtract_result"
                },
                "return": {
                    "3": "result"
                }
            }
        },
        "FUN_08004e74": {
            "entrypoint": "0x08004e74",
            "current_name": "transmit_or_receive_data_08004e74",
            "code": "\nvoid transmit_or_receive_data_08004e74(int data_buffer,int is_receive,int param3,undefined4 callback_function)\n\n{\n  int i2c_obj;\n  \n  i2c_obj = get_i2_c_object();\n  if (param3 == *(int *)(data_buffer + 0xc)) {\n    if (is_receive == 0) {\n      *(undefined *)(i2c_obj + 0x88) = 0;\n      *(undefined *)(i2c_obj + 0x5c) = 0;\n      if (*(code **)(i2c_obj + 100) != (code *)0x0) {\n        (**(code **)(i2c_obj + 100))();\n      }\n      transmit_data(data_buffer,i2c_obj + 0x68,*(undefined *)(i2c_obj + 0x88),8);\n      return;\n    }\n    *(undefined *)(i2c_obj + 0x5c) = 1;\n    receive_data_sequentially(data_buffer,i2c_obj + 0x68,0x20,8,callback_function);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004e74": "transmit_or_receive_data_08004e74",
                "param_1": "data_buffer",
                "param_2": "is_receive",
                "param_3": "param3",
                "param_4": "callback_function",
                "iVar1": "i2c_obj",
                "get_i2c_obj": "get_i2_c_object",
                "HAL_I2C_Slave_Sequential_Transmit_IT": "transmit_data",
                "HAL_I2C_Slave_Sequential_Receive_IT": "receive_data_sequentially"
            },
            "calling": [
                "FUN_08002cf2"
            ],
            "called": [
                "FUN_08004e70",
                "FUN_08002b84",
                "FUN_08002af8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08004e74": {
                    "1": "transmit_i2_c_packet",
                    "2": "transmit_data_or_receive",
                    "5": "transmit_data",
                    "15": "transmit_or_receive_data",
                    "3": "transmit_receive_data"
                },
                "param_1": {
                    "1": "data_address",
                    "2": "param1",
                    "4": "i2c_obj",
                    "3": "i2c_address"
                },
                "param_2": {
                    "3": "is_transmit",
                    "2": "param2",
                    "4": "transmit_flag",
                    "1": "is_write_operation",
                    "5": "receive_flag",
                    "8": "is_receive"
                },
                "param_3": {
                    "1": "parameter",
                    "2": "compare_value",
                    "5": "param3",
                    "4": "expected_value"
                },
                "param_4": {
                    "1": "arg4",
                    "5": "param4",
                    "8": "callback",
                    "4": "callback_func",
                    "10": "callback_function",
                    "2": "param"
                },
                "iVar1": {
                    "1": "obj_value",
                    "6": "i2c_object",
                    "17": "i2c_obj"
                },
                "get_i2c_obj": {
                    "1": "get_i2c_obj",
                    "3": "get_i2c_object",
                    "17": "get_i2_c_object"
                },
                "HAL_I2C_Slave_Sequential_Transmit_IT": {
                    "1": "transmit_data_using_i2_c",
                    "5": "transmit_data_sequentially",
                    "6": "transmit_data"
                },
                "HAL_I2C_Slave_Sequential_Receive_IT": {
                    "1": "sequential_receive_it",
                    "6": "receive_data"
                },
                "param_1 + 0xc": {
                    "1": "compare_address"
                },
                "*(int *)(param_1 + 0xc)": {
                    "1": "compare_data"
                },
                "*(undefined *)(iVar1 + 0x88)": {
                    "1": "transmit_buffer_size"
                },
                "*(undefined *)(iVar1 + 0x5c)": {
                    "1": "receive_flag"
                },
                "*(code **)(iVar1 + 100)": {
                    "1": "function_pointer"
                },
                "iVar1 + 100": {
                    "1": "function_address"
                },
                "iVar1 + 0x68": {
                    "1": "transmit_buffer_address"
                },
                "0x20": {
                    "1": "receive_buffer_size"
                }
            }
        },
        "FUN_08004ec4": {
            "entrypoint": "0x08004ec4",
            "current_name": "enable_i2c_and_listen_08004ec4",
            "code": "\nvoid enable_i2c_and_listen_08004ec4(undefined4 param)\n\n{\n  int i2c_obj;\n  \n  i2c_obj = retrieve_i2c_object;\n  if (((*(function_pointer **)(i2c_obj + 0x60) != (function_pointer *)0x0) && (*(char *)(i2c_obj + 0x5c) == '\\x01')) &&\n     (*(char *)(i2c_obj + 0x2c) != ' ')) {\n    (**(function_pointer **)(i2c_obj + 0x60))(i2c_obj + 0x68);\n  }\n  enable_i2c_listen_interrupt(param);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004ec4": "enable_i2c_and_listen_08004ec4",
                "param_1": "param",
                "iVar1": "i2c_obj",
                "get_i2c_obj": "get_i2c_object",
                "HAL_I2C_EnableListen_IT": "enable_i2c_listen_interrupt",
                "code": "function_pointer",
                "get_i2c_obj()": "retrieve_i2c_object"
            },
            "calling": [
                "FUN_08002d1c",
                "FUN_0800316c",
                "FUN_080032b4"
            ],
            "called": [
                "FUN_08004e70",
                "FUN_08002c10"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08004ec4": {
                    "6": "enable_i2c_and_listen",
                    "1": "enable_i2_c_listen_and_execute",
                    "2": "initialize_i2c_and_enable_listen",
                    "3": "enable_i2c_listen_mode",
                    "4": "enable_i2c_communication"
                },
                "param_1": {
                    "3": "param_1",
                    "1": "status_param",
                    "5": "param",
                    "2": "i2c_handle"
                },
                "iVar1": {
                    "7": "i2c_object",
                    "1": "i2c_obj_ptr",
                    "22": "i2c_obj"
                },
                "get_i2c_obj": {
                    "3": "retrieve_i2c_object",
                    "16": "get_i2c_object",
                    "1": "fetch_i2c_object",
                    "2": "retrieve_i2c_obj"
                },
                "HAL_I2C_EnableListen_IT": {
                    "1": "enable_i2c_listen_it",
                    "17": "enable_i2c_listen_interrupt",
                    "2": "enable_i2_c_listen_interrupt"
                },
                "i2c_obj + 0x60": {
                    "1": "callback_func_ptr"
                },
                "i2c_obj + 0x5c": {
                    "1": "condition_1"
                },
                "i2c_obj + 0x2c": {
                    "1": "condition_2"
                },
                "iVar1 + 0x68": {
                    "1": "callback_arg"
                },
                "FUN_08004e70": {
                    "1": "get_i2c_object_initialized",
                    "2": "check_i2c_object_validity",
                    "6": "get_i2c_obj"
                },
                "FUN_08002c10": {
                    "1": "retrieve_i2c_object_param",
                    "2": "enable_i2c_listen_interrupt"
                },
                "code": {
                    "1": "function_ptr",
                    "2": "function_pointer"
                },
                "get_i2c_obj()": {
                    "1": "retrieve_i2c_object"
                },
                "*(code **)(i2c_obj + 0x60)": {
                    "1": "i2c_callback"
                },
                "*(char *)(i2c_obj + 0x5c)": {
                    "1": "is_enabled"
                },
                "*(char *)(i2c_obj + 0x2c)": {
                    "1": "is_space"
                },
                "code **(iVar1 + 0x60)": {
                    "1": "callback_func_ptr"
                },
                "*(char *)(iVar1 + 0x5c)": {
                    "1": "callback_condition"
                },
                "*(char *)(iVar1 + 0x2c)": {
                    "1": "condition_2"
                },
                "(code *)0x0": {
                    "1": "null_ptr"
                },
                "(iVar1 + 0x68)": {
                    "1": "callback_parameter"
                },
                "param_1+0x60": {
                    "1": "callback_function"
                },
                "param_1+0x5c": {
                    "1": "is_enabled"
                },
                "param_1+0x2c": {
                    "1": "status"
                },
                "*(code **)(iVar1 + 0x60)": {
                    "1": "callback_function"
                },
                "(code *)(iVar1 + 0x60)": {
                    "1": "i2c_callback_ptr"
                },
                "(char *)(iVar1 + 0x5c)": {
                    "1": "i2c_flag_char"
                },
                "(char *)(iVar1 + 0x2c)": {
                    "1": "i2c_status_char"
                },
                "(code **)(iVar1 + 0x60)": {
                    "1": "i2c_callback_ptr_addr"
                },
                "(**(code **)(iVar1 + 0x60))": {
                    "1": "callback_function"
                },
                "(*(code **)(iVar1 + 0x60)": {
                    "1": "i2c_function"
                },
                "(*(char *)(iVar1 + 0x5c)": {
                    "1": "i2c_flag"
                },
                "(*(char *)(iVar1 + 0x2c)": {
                    "1": "some_char"
                },
                "DAT_08004e64": {
                    "1": "space_character"
                },
                "code *": {
                    "1": "callback_func_ptr"
                }
            }
        },
        "FUN_08004ef4": {
            "entrypoint": "0x08004ef4",
            "current_name": "enable_i2c_listen_08004ef4",
            "code": "\nvoid enable_i2c_listen_08004ef4(undefined4 i2c_handle)\n\n{\n  int i2c_obj;\n  \n  i2c_obj = get_i2c_object();\n  if (*(char *)(i2c_obj + 0x5d) == '\\0') {\n    enable_i2c_listen_08004ef4_interrupt(i2c_handle);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004ef4": "enable_i2c_listen_08004ef4",
                "param_1": "i2c_handle",
                "iVar1": "i2c_obj",
                "get_i2c_obj": "get_i2c_object",
                "HAL_I2C_EnableListen_IT": "enable_i2c_listen_interrupt"
            },
            "calling": [
                "FUN_0800316c"
            ],
            "called": [
                "FUN_08004e70",
                "FUN_08002c10"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08004ef4": {
                    "3": "enable_i2_c_listen",
                    "1": "enable_i2_c_listen_interrupt",
                    "15": "enable_i2c_listen",
                    "5": "enable_i2c_listen_interrupt"
                },
                "param_1": {
                    "3": "i2c_device_address",
                    "1": "input_param",
                    "2": "i2c_address",
                    "4": "i2c_obj",
                    "5": "i2c_handle"
                },
                "iVar1": {
                    "2": "i2c_obj_address",
                    "1": "i2c_obj_ptr",
                    "6": "i2c_object",
                    "19": "i2c_obj"
                },
                "get_i2c_obj": {
                    "2": "retrieve_i2c_object",
                    "11": "get_i2c_object",
                    "1": "obtain_i2c_object"
                },
                "HAL_I2C_EnableListen_IT": {
                    "2": "enable_i2_c_listen_interrupt",
                    "1": "enable_i2_c_listen_interrupt_it",
                    "3": "enable_i2c_listen_it",
                    "10": "enable_i2c_listen_interrupt"
                },
                "*(char *)(iVar1 + 0x5d)": {
                    "1": "i2c_status"
                }
            }
        },
        "FUN_08004f4c": {
            "entrypoint": "0x08004f4c",
            "current_name": "initialize_uart_pins_08004f4c",
            "code": "\n\n\nvoid initialize_uart_pins_08004f4c(int *uart_pins)\n\n{\n  int peripheral1;\n  int peripheral2;\n  undefined4 gpio_port_clock;\n  uint pin_function;\n  uint pin_mask;\n  uint pin_config;\n  uint pin_speed;\n  undefined4 gpio_init_struct;\n  \n  if (uart_pins != (int *)0x0) {\n    peripheral1 = map_peripheral((int)*(char *)(uart_pins + 0x16),&DAT_0800764c);\n    peripheral2 = map_peripheral((int)*(char *)((int)uart_pins + 0x59),&DAT_08007604);\n    if ((peripheral2 == 0) || (peripheral1 == 0)) {\n      print_error_message(\"ERROR: at least one UART pin has no peripheral\\n\",peripheral2);\n    }\n    else {\n      peripheral1 = merge_peripheral(peripheral1);\n      *uart_pins = peripheral1;\n      if (peripheral1 == 0) {\n        print_error_message(\"ERROR: U(S)ART pins mismatch\\n\");\n      }\n      else {\n        if (peripheral1 == 0x40013800) {\n          _DAT_4002100c = _DAT_4002100c & 0xffffbfff;\n          _DAT_40021018 = _DAT_40021018 | 0x4000;\n          *(undefined *)(uart_pins + 0x11) = 0;\n          *(undefined *)((int)uart_pins + 0x5a) = 0x25;\n        }\n        else if (peripheral1 == 0x40004400) {\n          _DAT_40021010 = _DAT_40021010 & 0xfffdffff;\n          _DAT_4002101c = _DAT_4002101c | 0x20000;\n          *(undefined *)(uart_pins + 0x11) = 1;\n          *(undefined *)((int)uart_pins + 0x5a) = 0x26;\n        }\n        else if (peripheral1 == 0x40004800) {\n          _DAT_40021010 = _DAT_40021010 & 0xfffbffff;\n          _DAT_4002101c = _DAT_4002101c | 0x40000;\n          *(undefined *)(uart_pins + 0x11) = 2;\n          *(undefined *)((int)uart_pins + 0x5a) = 0x27;\n        }\n        gpio_port_clock = set_gpio_port_clock((uint)((int)*(char *)((int)uart_pins + 0x59) << 0x18) >> 0x1c);\n        pin_function = get_pin_function((int)*(char *)((int)uart_pins + 0x59),&DAT_08007604);\n        pin_mask = 1 << (*(byte *)((int)uart_pins + 0x59) & 0xf) & 0xffff;\n        pin_config = (pin_function >> 3 & 1) << 4 | pin_function & 7;\n        pin_speed = (pin_function << 0x1a) >> 0x1e;\n        _DAT_40021018 = _DAT_40021018 | 1;\n        pin_function_switch((pin_function << 0x11) >> 0x19) {\n        case 1:\n          _DAT_40010004 = _DAT_40010004 | 0x7000001;\n          break;\n        case 2:\n          _DAT_40010004 = _DAT_40010004 & 0xfffffffe | 0x7000000;\n          break;\n        case 3:\n          _DAT_40010004 = _DAT_40010004 | 0x7000002;\n          break;\n        case 4:\n          _DAT_40010004 = _DAT_40010004 & 0xfffffffd | 0x7000000;\n          break;\n        case 5:\n          _DAT_40010004 = _DAT_40010004 | 0x7000004;\n          break;\n        case 6:\n          _DAT_40010004 = _DAT_40010004 & 0xfffffffb | 0x7000000;\n          break;\n        case 7:\n          _DAT_40010004 = _DAT_40010004 | 0x7000008;\n          break;\n        case 8:\n          _DAT_40010004 = _DAT_40010004 & 0xfffffff7 | 0x7000000;\n          break;\n        case 9:\n          _DAT_40010004 = _DAT_40010004 | 0x7000030;\n          break;\n        case 10:\n          _DAT_40010004 = _DAT_40010004 & 0xffffffcf | 0x7000010;\n          break;\n        case 0xb:\n          _DAT_40010004 = _DAT_40010004 & 0xffffffcf | 0x7000000;\n          break;\n        case 0xc:\n          _DAT_40010004 = _DAT_40010004 | 0x70000c0;\n          break;\n        case 0xd:\n          _DAT_40010004 = _DAT_40010004 & 0xffffff3f | 0x7000040;\n          break;\n        case 0xe:\n          _DAT_40010004 = _DAT_40010004 & 0xffffff3f | 0x7000000;\n          break;\n        case 0xf:\n          _DAT_40010004 = _DAT_40010004 | 0x7000300;\n          break;\n        case 0x10:\n          _DAT_40010004 = _DAT_40010004 & 0xfffffcff | 0x7000200;\n          break;\n        case 0x11:\n          _DAT_40010004 = _DAT_40010004 & 0xfffffcff | 0x7000100;\n          break;\n        case 0x12:\n          _DAT_40010004 = _DAT_40010004 & 0xfffffcff | 0x7000000;\n          break;\n        case 0x13:\n          _DAT_40010004 = _DAT_40010004 | 0x7000c00;\n          break;\n        case 0x14:\n          _DAT_40010004 = _DAT_40010004 & 0xfffff3ff | 0x7000800;\n          break;\n        case 0x15:\n          _DAT_40010004 = _DAT_40010004 & 0xfffff3ff | 0x7000000;\n          break;\n        case 0x16:\n          _DAT_40010004 = _DAT_40010004 | 0x7001000;\n          break;\n        case 0x17:\n          _DAT_40010004 = _DAT_40010004 & 0xffffefff | 0x7000000;\n          break;\n        case 0x1b:\n          _DAT_40010004 = _DAT_40010004 | 0x7008000;\n          break;\n        case 0x1c:\n          _DAT_40010004 = _DAT_40010004 & 0xffff7fff | 0x7000000;\n          break;\n        case 0x21:\n          _DAT_40010004 = _DAT_40010004 & 0xf8ffffff;\n          break;\n        case 0x22:\n          _DAT_40010004 = _DAT_40010004 & 0xf8ffffff | 0x1000000;\n          break;\n        case 0x23:\n          _DAT_40010004 = _DAT_40010004 & 0xf8ffffff | 0x2000000;\n          break;\n        case 0x24:\n          _DAT_40010004 = _DAT_40010004 & 0xf8ffffff | 0x4000000;\n        }\n        gpio_init_struct = 3;\n        initialize_gpio(gpio_port_clock,&pin_mask);\n        gpio_port_clock = set_gpio_port_clock((uint)((int)*(char *)(uart_pins + 0x16) << 0x18) >> 0x1c);\n        pin_function = get_pin_function((int)*(char *)(uart_pins + 0x16),&DAT_0800764c);\n        pin_mask = 1 << (*(byte *)(uart_pins + 0x16) & 0xf) & 0xffff;\n        pin_config = (pin_function >> 3 & 1) << 4 | pin_function & 7;\n        pin_speed = (pin_function << 0x1a) >> 0x1e;\n        initialize_gpio(gpio_port_clock,&pin_mask);\n        (&DAT_2000032c)[*(byte *)(uart_pins + 0x11)] = uart_pins + 1;\n        uart_pins[1] = *uart_pins;\n        uart_pins[2] = uart_pins[0x12];\n        uart_pins[3] = uart_pins[0x13];\n        uart_pins[4] = uart_pins[0x14];\n        uart_pins[5] = uart_pins[0x15];\n        uart_pins[6] = 0xc;\n        uart_pins[7] = 0;\n        uart_pins[8] = 0;\n        initialize_uart(uart_pins + 1);\n      }\n    }\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004f4c": "initialize_uart_pins_08004f4c",
                "param_1": "uart_pins",
                "iVar1": "peripheral1",
                "iVar2": "peripheral2",
                "uVar3": "gpio_port_clock",
                "uVar4": "pin_function",
                "local_20": "pin_mask",
                "local_1c": "pin_config",
                "local_18": "pin_speed",
                "local_14": "gpio_init_struct",
                "HAL_GPIO_Init": "initialize_gpio",
                "iprintf": "print_error_message",
                "set_GPIO_Port_Clock": "set_gpio_port_clock",
                "pinmap_peripheral": "map_peripheral",
                "pinmap_merge_peripheral": "merge_peripheral",
                "pinmap_function": "get_pin_function",
                "HAL_UART_Init": "initialize_uart",
                "switch": "pin_function_switch"
            },
            "calling": [
                "FUN_08005a68",
                "FUN_08005384"
            ],
            "called": [
                "FUN_08004884",
                "FUN_0800441a",
                "FUN_080068f0",
                "FUN_08004d06",
                "FUN_08002624",
                "FUN_08004cce",
                "FUN_08004c78"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08004f4c": {
                    "16": "initialize_uart_pins",
                    "1": "configure_uart_pins",
                    "3": "init_uart_pins",
                    "6": "initialize_uart",
                    "2": "initialize_uart_pin"
                },
                "param_1": {
                    "1": "pin_configuration",
                    "2": "config",
                    "6": "pins",
                    "8": "uart_pins",
                    "4": "pin_config"
                },
                "iVar1": {
                    "1": "uart_pin_1_peripheral",
                    "2": "uart_peripheral1",
                    "10": "peripheral1"
                },
                "iVar2": {
                    "10": "peripheral2",
                    "1": "gpio_peripheral",
                    "2": "uart_pin_2"
                },
                "uVar3": {
                    "1": "gpio_port_clock_uart",
                    "2": "gpio_port1",
                    "7": "gpio_port_clock",
                    "5": "gpio_clock1",
                    "3": "gpio_port_clock1"
                },
                "uVar4": {
                    "1": "gpio_function_1",
                    "2": "function",
                    "12": "pin_function"
                },
                "local_20": {
                    "1": "gpio_init_1",
                    "7": "pin_mask",
                    "3": "gpio_pin1",
                    "4": "gpio_pin_mask"
                },
                "local_1c": {
                    "1": "pin_config_bits",
                    "2": "gpio_pin_mode1",
                    "3": "pin_config"
                },
                "local_18": {
                    "1": "gpio_alternative_function",
                    "2": "pin_mux",
                    "3": "pin_speed"
                },
                "local_14": {
                    "1": "gpio_pin_configuration2",
                    "7": "gpio_init_struct",
                    "6": "gpio_config"
                },
                "_DAT_4002100c": {
                    "1": "uart_config_reg1",
                    "4": "uart_register1"
                },
                "_DAT_40021018": {
                    "1": "uart_1_register_2",
                    "3": "uart_register2",
                    "4": "register2"
                },
                "_DAT_40021010": {
                    "1": "gpio_config_reg1",
                    "3": "uart_register3",
                    "4": "register3"
                },
                "_DAT_4002101c": {
                    "1": "register_4",
                    "4": "uart_register4"
                },
                "HAL_GPIO_Init": {
                    "2": "init_gpio",
                    "1": "configure_gpio_pin",
                    "7": "initialize_gpio"
                },
                "DAT_2000032c": {
                    "1": "uart_register",
                    "2": "uart_registers"
                },
                "DAT_0800764c": {
                    "1": "gpio_address1",
                    "3": "uart1_pinmap"
                },
                "DAT_08007604": {
                    "1": "peripheral_map_2",
                    "3": "uart2_pinmap"
                },
                "iprintf": {
                    "5": "print_error_message",
                    "1": "print_error"
                },
                "set_GPIO_Port_Clock": {
                    "5": "set_gpio_port_clock",
                    "2": "configure_gpio_port_clock"
                },
                "pinmap_peripheral": {
                    "1": "get_peripheral_pin",
                    "2": "map_peripheral"
                },
                "pinmap_merge_peripheral": {
                    "1": "merge_peripheral_pin",
                    "3": "merge_peripheral",
                    "2": "merge_peripheral_mapping"
                },
                "pinmap_function": {
                    "1": "get_pin_map_function",
                    "2": "get_pin_function"
                },
                "HAL_UART_Init": {
                    "7": "initialize_uart",
                    "1": "initialize_uart_module"
                },
                "&DAT_0800764c": {
                    "1": "peripheral_map_1"
                },
                "&DAT_08007604": {
                    "1": "peripheral_map_2"
                },
                "*param_1": {
                    "1": "uart_peripheral"
                },
                "*param_1 + 0x16": {
                    "1": "uart_pin_1_value"
                },
                "*(char *)((int)param_1 + 0x59)": {
                    "1": "uart_pin_2_value"
                },
                "*(undefined *)(param_1 + 0x11)": {
                    "1": "uart_pin_mode"
                },
                "*(undefined *)((int)param_1 + 0x5a)": {
                    "1": "uart_pin_id"
                },
                "(*(byte *)(param_1 + 0x11))": {
                    "1": "uart_pin_index"
                },
                "(uVar4 << 0x11) >> 0x19": {
                    "1": "pin_mode_bits"
                },
                "DAT_40010004": {
                    "1": "uart_pin_register"
                },
                "_DAT_40010004": {
                    "1": "register_5"
                },
                "&DAT_2000032c": {
                    "1": "uart_module_base_address",
                    "2": "uart_register_array"
                },
                "param_1 + 0x16": {
                    "1": "uart_pin_1"
                },
                "(int)param_1 + 0x59": {
                    "1": "uart_pin_char_2"
                },
                "(int)param_1 + 0x5a": {
                    "1": "uart_pin_char_3"
                },
                "(int)*(char *)(param_1 + 0x16)": {
                    "1": "uart_pin_char_1"
                },
                "(int)*(char *)((int)param_1 + 0x59)": {
                    "1": "uart_pin_char_4"
                },
                "(int)*(char *)((int)param_1 + 0x59) << 0x18": {
                    "1": "uart_pin_shifted_1"
                },
                "(int)*(char *)((int)param_1 + 0x59) << 0x18) >> 0x1c": {
                    "1": "uart_pin_shifted_2"
                },
                "*(byte *)((int)param_1 + 0x59) & 0xf": {
                    "1": "uart_pin_bit"
                },
                "*(byte *)((int)param_1 + 0x59)": {
                    "1": "uart_pin_byte_1"
                },
                "*(byte *)(param_1 + 0x16) & 0xf": {
                    "1": "uart_pin_bit_1"
                },
                "*(byte *)(param_1 + 0x16)": {
                    "1": "uart_pin_byte_2"
                },
                "FUN_08004884": {
                    "1": "pinmap_peripheral"
                },
                "FUN_0800441a": {
                    "1": "pinmap_merge_peripheral"
                },
                "FUN_080068f0": {
                    "1": "set_gpio_port_clock"
                },
                "FUN_08004d06": {
                    "1": "pinmap_function"
                },
                "FUN_08002624": {
                    "1": "hal_gpio_init"
                },
                "FUN_08004cce": {
                    "1": "hal_uart_init"
                },
                "FUN_08004c78": {
                    "1": "iprintf"
                },
                "UART1": {
                    "1": "uart1_config_value"
                },
                "UART2": {
                    "1": "uart2_config_value"
                },
                "switch": {
                    "1": "pin_function_switch"
                }
            }
        },
        "FUN_08005384": {
            "entrypoint": "0x08005384",
            "current_name": "initialize_uart_08005384",
            "code": "\nvoid initialize_uart_08005384(void)\n\n{\n  int peripheral_result;\n  undefined4 peripheral_address;\n  \n  peripheral_result = get_peripheral(2,&DAT_0800764c);\n  if (peripheral_result != 0) {\n    peripheral_address = get_peripheral(2,&DAT_0800764c);\n    DAT_200000e1 = pinmap_pin(peripheral_address,&DAT_08007604);\n    DAT_200000e0 = 2;\n    DAT_200000d0 = 0x2580;\n    DAT_200000dc = 0;\n    DAT_200000d4 = 0;\n    DAT_200000d8 = 0;\n    init_uart(&DAT_20000088);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005384": "initialize_uart_08005384",
                "iVar1": "peripheral_result",
                "uVar2": "peripheral_address",
                "uart_init": "init_uart",
                "pinmap_peripheral": "get_peripheral"
            },
            "calling": [
                "FUN_080053d4"
            ],
            "called": [
                "FUN_08004f4c",
                "FUN_08004c78",
                "FUN_08004ca2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08005384": {
                    "1": "initialize_uart_module",
                    "26": "initialize_uart",
                    "3": "initialize_peripheral"
                },
                "iVar1": {
                    "6": "peripheral_status",
                    "5": "pinmap_result",
                    "1": "status",
                    "9": "result"
                },
                "uVar2": {
                    "1": "peripheral_result",
                    "3": "pin_result",
                    "2": "peripheral_result_2",
                    "4": "peripheral_address"
                },
                "DAT_200000e1": {
                    "4": "pin_number",
                    "1": "pin_num",
                    "2": "pin"
                },
                "DAT_200000e0": {
                    "1": "peripheral_number",
                    "4": "pin_mode"
                },
                "DAT_200000d0": {
                    "1": "value_1",
                    "6": "baud_rate"
                },
                "DAT_200000dc": {
                    "3": "data_bits",
                    "1": "value_2",
                    "2": "parity"
                },
                "DAT_200000d4": {
                    "4": "stop_bits",
                    "1": "unknown_value3"
                },
                "DAT_200000d8": {
                    "1": "option3",
                    "2": "flow_control"
                },
                "param_1": {
                    "1": "pin_data"
                },
                "FUN_08004f4c": {
                    "1": "configure_pin_as_peripheral"
                },
                "FUN_08004c78": {
                    "2": "map_peripheral"
                },
                "FUN_08004ca2": {
                    "2": "map_pin"
                },
                "DAT_20000088": {
                    "1": "uart_configuration",
                    "3": "uart_config"
                },
                "&DAT_0800764c": {
                    "1": "peripheral_info"
                },
                "&DAT_08007604": {
                    "1": "pin_config"
                },
                "&DAT_20000088": {
                    "2": "uart_config"
                },
                "uart_init": {
                    "1": "init_uart"
                },
                "DAT_0800764c": {
                    "2": "peripheral_data",
                    "1": "peripheral_info"
                },
                "DAT_08007604": {
                    "1": "pin_data"
                },
                "pinmap_peripheral": {
                    "1": "get_peripheral"
                }
            }
        },
        "FUN_080053d4": {
            "entrypoint": "0x080053d4",
            "current_name": "transmit_data_080053d4",
            "code": "\nuint transmit_data_080053d4(undefined4 data,uint length)\n\n{\n  int start_time;\n  int peripheral;\n  uint index;\n  \n  start_time = get_current_tick();\n  peripheral = get_peripheral_id(2,&DAT_0800764c);\n  if (peripheral == 0) {\n    return 0;\n  }\n  for (index = 0;\n      (index < 5 &&\n      (((&DAT_2000032c)[index] == 0 ||\n       (peripheral = get_peripheral_id(2,&DAT_0800764c), *(int *)(&DAT_2000032c)[index] != peripheral))));\n      index = index + 1 & 0xff) {\n  }\n  if (4 < index) {\n    if ((4 < DAT_200000cc) && (initialize_uart_debug(), 4 < DAT_200000cc)) {\n      return 0;\n    }\n    index = (uint)DAT_200000cc;\n  }\n  do {\n    peripheral = transmit_uart_data((&DAT_2000032c)[index],data,length & 0xffff,1000);\n    if (peripheral == 0) {\n      return length;\n    }\n    peripheral = get_current_tick();\n  } while ((uint)(peripheral - start_time) < 1000);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080053d4": "transmit_data_080053d4",
                "param_1": "data",
                "param_2": "length",
                "iVar1": "start_time",
                "iVar2": "peripheral",
                "uVar3": "index",
                "HAL_GetTick": "get_current_time",
                "pinmap_peripheral": "get_peripheral_id",
                "HAL_UART_Transmit": "transmit_uart_data",
                "uart_debug_init": "initialize_debug_uart",
                "HAL_GetTick()": "get_current_tick()",
                "uart_debug_init()": "initialize_uart_debug()"
            },
            "calling": [
                "FUN_08005730"
            ],
            "called": [
                "FUN_08001cc4",
                "FUN_08004c78",
                "FUN_08005384",
                "FUN_08004478"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080053d4": {
                    "27": "transmit_data",
                    "1": "transmit_message",
                    "3": "send_data"
                },
                "param_1": {
                    "26": "data",
                    "4": "data_buffer",
                    "1": "message"
                },
                "param_2": {
                    "5": "data_size",
                    "4": "data_length",
                    "10": "size",
                    "11": "length",
                    "1": "message_length"
                },
                "iVar1": {
                    "16": "start_time",
                    "14": "start_tick",
                    "1": "start_ticks"
                },
                "iVar2": {
                    "11": "peripheral",
                    "6": "pin_peripheral",
                    "1": "peripheral_index",
                    "9": "pinmap_result"
                },
                "uVar3": {
                    "1": "counter",
                    "29": "index"
                },
                "DAT_0800764c": {
                    "1": "peripheral_value",
                    "12": "peripheral_data"
                },
                "DAT_2000032c": {
                    "2": "peripheral_list",
                    "1": "uart_peripheral"
                },
                "DAT_200000cc": {
                    "2": "uart_count",
                    "1": "uart_size"
                },
                "HAL_GetTick": {
                    "2": "get_current_time",
                    "1": "get_tick"
                },
                "pinmap_peripheral": {
                    "1": "get_peripheral",
                    "2": "get_peripheral_id"
                },
                "UART_DEBUG_INIT": {
                    "1": "initialize_uart_debug"
                },
                "HAL_UART_Transmit": {
                    "4": "transmit_uart_data",
                    "1": "uart_transmit"
                },
                "FUN_08001cc4": {
                    "1": "initialize"
                },
                "FUN_08004c78": {
                    "2": "pinmap_peripheral"
                },
                "FUN_08005384": {
                    "2": "uart_debug_init"
                },
                "FUN_08004478": {
                    "1": "transmit_uart"
                },
                "uart_debug_init": {
                    "1": "init_uart_debug",
                    "3": "initialize_debug_uart"
                },
                "&DAT_2000032c": {
                    "1": "peripheral_addresses"
                },
                "1000": {
                    "1": "transmit_timeout"
                },
                "HAL_GetTick()": {
                    "1": "get_current_tick()"
                },
                "pinmap_peripheral()": {
                    "1": "get_peripheral_mapping()"
                },
                "uart_debug_init()": {
                    "1": "initialize_uart_debug()"
                },
                "HAL_UART_Transmit()": {
                    "1": "transmit_uart_data()"
                },
                "Hal_GetTick()": {
                    "1": "get_current_tick()"
                }
            }
        },
        "FUN_0800548c": {
            "entrypoint": "0x0800548c",
            "current_name": "check_uart_state_0800548c",
            "code": "\nbool check_uart_state_0800548c(int index)\n\n{\n  uint uart_state;\n  \n  uart_state = get_uart_state((&DAT_2000032c)[*(byte_type *)(index + 0x44)]);\n  return (uart_state & 0x22) == 0x22;\n}\n\n",
            "renaming": {
                "FUN_0800548c": "check_uart_state_0800548c",
                "param_1": "index",
                "uVar1": "uart_state",
                "HAL_UART_GetState": "get_uart_state",
                "byte": "byte_type"
            },
            "calling": [
                "FUN_08005510",
                "FUN_080054d4"
            ],
            "called": [
                "FUN_080047e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800548c": {
                    "2": "is_uart_transmission_complete",
                    "12": "check_uart_state",
                    "1": "check_uart_status",
                    "3": "is_uart_transmitting_data"
                },
                "param_1": {
                    "2": "uart_index",
                    "1": "input_param",
                    "5": "index",
                    "3": "device_id"
                },
                "uVar1": {
                    "1": "state",
                    "29": "uart_state"
                },
                "HAL_UART_GetState": {
                    "6": "get_uart_state"
                },
                "byte": {
                    "1": "byte_value",
                    "2": "byte_type"
                },
                "*(byte *)(param_1 + 0x44)": {
                    "1": "param_byte"
                },
                "FUN_080047e8": {
                    "3": "get_uart_state",
                    "1": "get_byte_value"
                },
                "DAT_2000032c": {
                    "1": "uart_device_list"
                },
                "0x22": {
                    "1": "expected_state"
                }
            }
        },
        "FUN_080054b0": {
            "entrypoint": "0x080054b0",
            "current_name": "check_uart_state_080054b0",
            "code": "\nbool check_uart_state_080054b0(int input_value)\n\n{\n  uint uart_state;\n  \n  uart_state = get_uart_state((&DAT_2000032c)[*(byte_value *)(input_value + 0x44)]);\n  return (uart_state & 0x21) == 0x21;\n}\n\n",
            "renaming": {
                "FUN_080054b0": "check_uart_state_080054b0",
                "param_1": "input_value",
                "uVar1": "uart_state",
                "byte": "byte_value",
                "HAL_UART_GetState": "get_uart_state"
            },
            "calling": [],
            "called": [
                "FUN_080047e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080054b0": {
                    "1": "is_uart_state_data_valid",
                    "2": "is_uart_state_active",
                    "12": "check_uart_state",
                    "8": "is_uart_state_valid"
                },
                "param_1": {
                    "2": "device_index",
                    "1": "input_data",
                    "11": "input_value",
                    "7": "index"
                },
                "uVar1": {
                    "31": "uart_state"
                },
                "byte": {
                    "2": "byte_value",
                    "1": "byte_val"
                },
                "HAL_UART_GetState": {
                    "9": "get_uart_state"
                },
                "*(byte *)(param_1 + 0x44)": {
                    "1": "byte_offset",
                    "3": "uart_index"
                },
                "FUN_080047e8": {
                    "1": "get_uart_state"
                },
                "(uint) (*(byte *)(param_1 + 0x44))": {
                    "1": "byte_value"
                },
                "DAT_2000032c": {
                    "1": "data_array"
                },
                "PTR_": {
                    "1": "unchanged_variable"
                }
            }
        },
        "FUN_080054d4": {
            "entrypoint": "0x080054d4",
            "current_name": "receive_data_080054d4",
            "code": "\nundefined4 receive_data_080054d4(int data_length,undefined *received_data,undefined4 param_3,undefined4 param4)\n\n{\n  int is_serial_rx_active;\n  \n  if (data_length == 0) {\n    return 0xffffffff;\n  }\n  is_serial_rx_active = check_rx_activity;\n  if (is_serial_rx_active == 0) {\n    *received_data = *(undefined *)(data_length + 0x45);\n    receive_uart_data((&DAT_2000032c)[*(byte *)(data_length + 0x44)],data_length + 0x45,1,&DAT_2000032c,\n                        param4);\n    return 0;\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_080054d4": "receive_data_080054d4",
                "param_1": "data_length",
                "param_2": "received_data",
                "param_4": "param4",
                "iVar1": "is_serial_rx_active",
                "serial_rx_active()": "check_rx_activity",
                "HAL_UART_Receive_IT": "receive_uart_data",
                "serial_rx_active": "is_serial_rx_active"
            },
            "calling": [
                "FUN_0800598a"
            ],
            "called": [
                "FUN_080045a2",
                "FUN_0800548c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080054d4": {
                    "1": "handle_uart_receive",
                    "4": "receive_serial_data",
                    "3": "receive_and_process_data",
                    "18": "receive_data"
                },
                "param_1": {
                    "1": "serial_data_length",
                    "2": "input_data",
                    "3": "data_size",
                    "6": "data_length",
                    "4": "data_ptr"
                },
                "param_2": {
                    "1": "rx_buffer",
                    "14": "received_data",
                    "3": "buffer",
                    "2": "output_data"
                },
                "param_3": {
                    "2": "parameter_3",
                    "1": "length",
                    "10": "param3",
                    "3": "param1",
                    "11": "param_3"
                },
                "param_4": {
                    "3": "callback",
                    "11": "param4",
                    "1": "callback_handle",
                    "9": "param_4",
                    "2": "parameter_4"
                },
                "iVar1": {
                    "1": "is_active",
                    "14": "is_serial_rx_active",
                    "12": "is_rx_active"
                },
                "serial_rx_active()": {
                    "1": "is_serial_rx_active()"
                },
                "*param_2": {
                    "1": "data_ptr_value"
                },
                "HAL_UART_Receive_IT()": {
                    "1": "receive_data_with_interrupt"
                },
                "DAT_2000032c": {
                    "1": "data_array"
                },
                "*(undefined *)(param_1 + 0x45)": {
                    "1": "data_at_offset_45"
                },
                "*(byte *)(param_1 + 0x44)": {
                    "1": "index"
                },
                "0xffffffff": {
                    "1": "error_code"
                },
                "&DAT_2000032c": {
                    "1": "uart_receive_buffer"
                },
                "HAL_UART_Receive_IT((&DAT_2000032c)[*(byte *)(param_1 + 0x44)],param_1 + 0x45,1,&DAT_2000032c, param_4)": {
                    "1": "receive_data_over_uart"
                },
                "FUN_080045a2": {
                    "1": "process_data"
                },
                "FUN_0800548c": {
                    "2": "is_serial_rx_active",
                    "1": "is_rx_active"
                },
                "HAL_UART_Receive_IT": {
                    "3": "receive_uart_data",
                    "1": "receive_data_with_interrupt"
                },
                "serial_rx_active": {
                    "2": "is_serial_rx_active",
                    "1": "check_rx_active"
                },
                "(&DAT_2000032c)[*(byte *)(param_1 + 0x44)]": {
                    "1": "uart_address"
                },
                "param_1 + 0x45": {
                    "1": "data_offset"
                },
                "1": {
                    "1": "data_length"
                },
                "FUNC_080045a2": {
                    "1": "initialize_buffer"
                }
            }
        },
        "FUN_08005510": {
            "entrypoint": "0x08005510",
            "current_name": "initialize_serial_communication_08005510",
            "code": "\nvoid initialize_serial_communication_08005510(int serial_port,undefined4 data,undefined4 data_bits,undefined4 param4)\n\n{\n  int is_serial_rx_active;\n  uint index;\n  \n  if (serial_port != 0) {\n    is_serial_rx_active = serial_rx_active();\n    if (is_serial_rx_active == 0) {\n      index = (uint)*(byte *)(serial_port + 0x44);\n      *(undefined4 *)(&DAT_200002dc + index * 4) = data;\n      *(int *)(&DAT_200002f0 + index * 4) = serial_port;\n      set_interrupt_priority((int)*(char *)(serial_port + 0x5a),0,1,index,param4);\n      enable_interrupt((int)*(char *)(serial_port + 0x5a));\n      receive_data((&DAT_2000032c)[*(byte *)(serial_port + 0x44)],serial_port + 0x45,1);\n    }\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005510": "initialize_serial_communication_08005510",
                "param_1": "serial_port",
                "param_2": "data",
                "param_3": "data_bits",
                "param_4": "param4",
                "iVar1": "is_serial_rx_active",
                "uVar2": "index",
                "HAL_NVIC_SetPriority": "set_interrupt_priority",
                "HAL_NVIC_EnableIRQ": "enable_interrupt",
                "HAL_UART_Receive_IT": "receive_data"
            },
            "calling": [
                "FUN_08005a68"
            ],
            "called": [
                "FUN_080024f8",
                "FUN_080045a2",
                "FUN_0800548c",
                "FUN_08002494"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08005510": {
                    "1": "configure_uart_interrupts",
                    "3": "initialize_serial",
                    "14": "initialize_serial_communication",
                    "5": "handle_serial_data"
                },
                "param_1": {
                    "1": "serial_device",
                    "2": "data_ptr",
                    "15": "serial_port"
                },
                "param_2": {
                    "13": "data",
                    "1": "preempt_priority",
                    "8": "baud_rate",
                    "3": "value1"
                },
                "param_3": {
                    "1": "unused_param",
                    "8": "data_bits",
                    "3": "value2",
                    "2": "param_3"
                },
                "param_4": {
                    "1": "parity",
                    "8": "param4",
                    "3": "value3",
                    "7": "stop_bits",
                    "2": "param_4"
                },
                "iVar1": {
                    "1": "active_flag",
                    "3": "rx_active",
                    "15": "is_serial_rx_active",
                    "2": "is_serial_active",
                    "8": "is_rx_active"
                },
                "uVar2": {
                    "1": "buffer_index",
                    "6": "port_index",
                    "2": "port_number",
                    "13": "index",
                    "4": "byte_value"
                },
                "HAL_NVIC_SetPriority": {
                    "10": "set_interrupt_priority",
                    "5": "set_priority",
                    "1": "set_uart_interrupt_priority"
                },
                "HAL_NVIC_EnableIRQ": {
                    "11": "enable_interrupt",
                    "3": "enable_irq",
                    "1": "enable_interrupts"
                },
                "HAL_UART_Receive_IT": {
                    "1": "receive_data_using_uart",
                    "4": "receive_data_interrupt",
                    "5": "receive_data"
                },
                "FUN_080024f8": {
                    "1": "handle_serial_rx"
                },
                "FUN_080045a2": {
                    "1": "set_priority"
                },
                "FUN_0800548c": {
                    "3": "is_serial_rx_active"
                },
                "FUN_08002494": {
                    "1": "configure_port"
                },
                "*(byte *)(param_1 + 0x44)": {
                    "1": "byte_value"
                },
                "*(&DAT_200002dc + uVar2 * 4)": {
                    "1": "serial_port_data_array[index]"
                },
                "*(&DAT_200002f0 + uVar2 * 4)": {
                    "1": "serial_port_var_array[index]"
                },
                "(int)*(char *)(serialPort + 0x5a)": {
                    "1": "priority"
                },
                "(int)*(char *)(serialPort + 0x44)": {
                    "1": "irq"
                },
                "(int)*(byte *)(serialPort + 0x44)": {
                    "1": "input_index"
                },
                "DAT_200002dc": {
                    "1": "array1"
                },
                "DAT_200002f0": {
                    "1": "array2"
                }
            }
        },
        "FUN_08005568": {
            "entrypoint": "0x08005568",
            "current_name": "initialize_peripheral_08005568",
            "code": "\nvoid initialize_peripheral_08005568(int peripheral_address,undefined4 priority)\n\n{\n  byte peripheral_index;\n  \n  if (peripheral_address != 0) {\n    peripheral_index = *(byte *)(peripheral_address + 0x44);\n    *(undefined4 *)(&DAT_20000304 + (uint)peripheral_index * 4) = priority;\n    *(int *)(&DAT_20000318 + (uint)peripheral_index * 4) = peripheral_address;\n    set_interrupt_priority((int)*(char *)(peripheral_address + 0x5a),0,2);\n    enable_interrupt((int)*(char *)(peripheral_address + 0x5a));\n    transmit_data_using_uart\n              ((&DAT_2000032c)[*(byte *)(peripheral_address + 0x44)],\n               *(int *)(peripheral_address + 100) + (uint)*(ushort *)(peripheral_address + 0x6a),1);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005568": "initialize_peripheral_08005568",
                "param_1": "peripheral_address",
                "param_2": "priority",
                "bVar1": "peripheral_index",
                "HAL_NVIC_SetPriority": "set_interrupt_priority",
                "HAL_NVIC_EnableIRQ": "enable_interrupt",
                "HAL_UART_Transmit_IT": "transmit_data_using_uart"
            },
            "calling": [],
            "called": [
                "FUN_080024f8",
                "FUN_08002494",
                "FUN_0800455a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08005568": {
                    "1": "setup_interrupt",
                    "11": "initialize_peripheral",
                    "2": "set_priority_and_transmit",
                    "5": "initialize_device",
                    "3": "configure_peripheral"
                },
                "param_1": {
                    "9": "device_address",
                    "2": "peripheral",
                    "1": "buffer",
                    "11": "peripheral_address"
                },
                "param_2": {
                    "2": "parameter",
                    "1": "param",
                    "6": "priority_level",
                    "4": "value"
                },
                "bVar1": {
                    "4": "device_index",
                    "1": "byte_val",
                    "6": "byte_value",
                    "12": "peripheral_index"
                },
                "FUN_080024f8": {
                    "1": "function_one"
                },
                "FUN_08002494": {
                    "1": "function_two"
                },
                "FUN_0800455a": {
                    "1": "function_three",
                    "2": "transmit_data"
                },
                "HAL_NVIC_SetPriority": {
                    "5": "set_interrupt_priority",
                    "1": "set_priority"
                },
                "HAL_NVIC_EnableIRQ": {
                    "5": "enable_interrupt",
                    "1": "enable_interrupt_irq"
                },
                "HAL_UART_Transmit_IT": {
                    "1": "transmit_data_it",
                    "2": "transmit_data"
                },
                "param_3": {
                    "1": "offset"
                }
            }
        },
        "FUN_080055bc": {
            "entrypoint": "0x080055bc",
            "current_name": "find_value_index_080055bc",
            "code": "\nuint find_value_index_080055bc(int value)\n\n{\n  uint index;\n  \n  if (value == 0) {\n    index = 5;\n  }\n  else {\n    index = 0;\n    while( true ) {\n      if (4 < index) {\n        return index;\n      }\n      if (value == (&DAT_2000032c)[index]) break;\n      index = index + 1 & 0xff;\n    }\n  }\n  return index;\n}\n\n",
            "renaming": {
                "FUN_080055bc": "find_value_index_080055bc",
                "param_1": "value",
                "uVar1": "index"
            },
            "calling": [
                "FUN_080055e0",
                "FUN_08005604"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080055bc": {
                    "1": "find_equivalent_index",
                    "2": "find_matching_index",
                    "16": "find_value_index",
                    "5": "find_index"
                },
                "param_1": {
                    "2": "number",
                    "3": "input_value",
                    "21": "value",
                    "1": "num"
                },
                "uVar1": {
                    "1": "current_index",
                    "28": "index"
                },
                "&DAT_2000032c": {
                    "1": "data_array"
                }
            }
        },
        "FUN_080055e0": {
            "entrypoint": "0x080055e0",
            "current_name": "execute_uart_function_080055e0",
            "code": "\nvoid execute_uart_function_080055e0(void)\n\n{\n  uint uart_index;\n  \n  uart_index = uart_index();\n  if (uart_index < 5) {\n    (**(sub_function **)(&DAT_200002dc + uart_index * 4))(*(undefined4 *)(&DAT_200002f0 + uart_index * 4));\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080055e0": "execute_uart_function_080055e0",
                "uVar1": "uart_index",
                "code": "sub_function"
            },
            "calling": [
                "FUN_08004618"
            ],
            "called": [
                "FUN_080055bc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080055e0": {
                    "16": "execute_uart_function",
                    "1": "execute_uart_instruction",
                    "5": "execute_uart_operation",
                    "2": "process_uart_commands"
                },
                "uVar1": {
                    "7": "uart_index_result",
                    "1": "uart_index_value",
                    "20": "uart_index",
                    "2": "index"
                },
                "FUN_080055bc": {
                    "1": "uart_operation",
                    "12": "get_uart_index"
                },
                "param_1": {
                    "1": "uart_index",
                    "15": "index"
                },
                "uVar2": {
                    "1": "uart_index_result_multiplier"
                },
                "uint FUN_080055bc": {
                    "1": "get_uart_index"
                },
                "code": {
                    "1": "sub_function"
                },
                "DAT_200002dc": {
                    "1": "function_table_start"
                },
                "DAT_200002f0": {
                    "1": "parameter_table_offset"
                },
                "*(undefined4 *)(&DAT_200002f0 + uVar1 * 4)": {
                    "1": "uart_param"
                },
                "uVar1 < 5": {
                    "1": "is_valid_uart_index"
                },
                "(**(code **)(&DAT_200002dc + uVar1 * 4))": {
                    "1": "uart_function"
                },
                "**(*(code **)(&DAT_200002dc + uVar1 * 4))(*(undefined4 *)(&DAT_200002f0 + uVar1 * 4))": {
                    "1": "execute_selected_uart_function"
                }
            }
        },
        "FUN_08005604": {
            "entrypoint": "0x08005604",
            "current_name": "transmit_data_08005604",
            "code": "\nvoid transmit_data_08005604(void)\n\n{\n  unsigned_int uart_index;\n  integer result;\n  integer uart_pointer;\n  \n  uart_index = uart_index();\n  uart_pointer = *(integer *)(&DAT_20000318 + uart_index * 4);\n  if ((uart_index < 5) && (result = (**(code **)(&DAT_20000304 + uart_index * 4))(uart_pointer), result != -1)) {\n    transmit_data_08005604_it\n              ((&DAT_2000032c)[*(byte_data *)(uart_pointer + 0x44)],\n               *(integer *)(uart_pointer + 100) + (unsigned_int)*(unsigned_short *)(uart_pointer + 0x6a),1);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005604": "transmit_data_08005604",
                "iVar2": "result",
                "iVar3": "uart_pointer",
                "uVar1": "uart_index",
                "HAL_UART_Transmit_IT": "transmit_data_it",
                "byte": "byte_data",
                "uint": "unsigned_int",
                "int": "integer",
                "ushort": "unsigned_short"
            },
            "calling": [
                "FUN_080045fe"
            ],
            "called": [
                "FUN_080055bc",
                "FUN_0800455a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08005604": {
                    "9": "transmit_uart_data",
                    "21": "transmit_data",
                    "1": "transmit_data_over_uart"
                },
                "param_1": {
                    "1": "uart_number",
                    "3": "uart_index"
                },
                "iVar2": {
                    "27": "result",
                    "3": "transmit_result"
                },
                "iVar3": {
                    "1": "ptr_data",
                    "5": "uart_data",
                    "4": "uart_address",
                    "2": "uart_descriptor",
                    "6": "uart_pointer"
                },
                "FUN_080055bc": {
                    "1": "get_uart_controller",
                    "3": "get_uart_config",
                    "5": "get_uart_index"
                },
                "param_2": {
                    "1": "size"
                },
                "param_3": {
                    "1": "uart_length"
                },
                "FUN_0800455a": {
                    "1": "transmit_data",
                    "3": "uart_transmit",
                    "2": "transmit_uart_data"
                },
                "uVar1": {
                    "25": "uart_index",
                    "2": "index"
                },
                "HAL_UART_Transmit_IT": {
                    "1": "transmit_it",
                    "2": "transmit_data_it"
                },
                "FUNC_080055bc": {
                    "1": "get_uart_index"
                },
                "FUNC_0800455a": {
                    "1": "uart_transmit"
                },
                "byte": {
                    "1": "byte_data"
                },
                "uint": {
                    "1": "unsigned_int"
                },
                "int": {
                    "1": "integer"
                },
                "ushort": {
                    "1": "unsigned_short"
                }
            }
        },
        "FUN_08005650": {
            "entrypoint": "0x08005650",
            "current_name": "FUNC_08005650",
            "code": "\nvoid FUNC_08005650(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005650": "FUNC_08005650"
            },
            "calling": [
                "FUN_080046b8"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080056d8": {
            "entrypoint": "0x080056d8",
            "current_name": "allocate_memory_080056d8",
            "code": "\nundefined * allocate_memory_080056d8(int size)\n\n{\n  undefined *allocated_memory;\n  \n  if (DAT_20000340 == (undefined *)0x0) {\n    DAT_20000340 = &DAT_200006a8;\n  }\n  allocated_memory = DAT_20000340;\n  if (DAT_20000340 + size <= end_of_stack) {\n    DAT_20000340 = DAT_20000340 + size;\n    return allocated_memory;\n  }\n  DAT_200006a4 = 0xc;\n  return (undefined *)0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_080056d8": "allocate_memory_080056d8",
                "param_1": "size",
                "puVar1": "allocated_memory",
                "&stack0x00000000": "end_of_stack",
                "stack0x00000000": "stack_boundary",
                "stack0x0": "stack_end"
            },
            "calling": [
                "FUN_08006920"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080056d8": {
                    "1": "get_memory_block",
                    "2": "get_available_memory",
                    "26": "allocate_memory"
                },
                "param_1": {
                    "2": "bytes_requested",
                    "26": "size",
                    "1": "block_size"
                },
                "puVar1": {
                    "1": "memory_ptr",
                    "25": "allocated_memory"
                },
                "&DAT_20000340": {
                    "1": "current_memory"
                },
                "&DAT_200006a8": {
                    "1": "default_pointer",
                    "2": "initial_memory"
                },
                "&stack0x00000000": {
                    "1": "end_of_stack"
                },
                "DAT_200006a4": {
                    "2": "error_flag",
                    "20": "error_code"
                },
                "DAT_20000340": {
                    "1": "allocated_memory_start",
                    "5": "current_position",
                    "7": "current_memory",
                    "4": "current_pointer"
                },
                "DAT_200006a8": {
                    "1": "initial_position",
                    "2": "stack_bottom",
                    "3": "default_memory"
                },
                "stack0x00000000": {
                    "1": "stack_limit",
                    "3": "stack_boundary",
                    "2": "stack_bottom"
                },
                "stack0x0": {
                    "1": "stack_end"
                }
            }
        },
        "FUN_08005714": {
            "entrypoint": "0x08005714",
            "current_name": "get_error_code_08005714",
            "code": "\nuint32_t get_error_code_08005714(void)\n\n{\n  result 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_08005714": "get_error_code_08005714",
                "undefined4": "uint32_t",
                "return": "result"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08005714": {
                    "1": "get_invalid_value",
                    "4": "get_default_value",
                    "10": "get_error_code",
                    "2": "initialize_error_flag",
                    "5": "initialize_return_value"
                },
                "undefined4": {
                    "1": "unsigned_int",
                    "3": "int",
                    "6": "uint32_t"
                },
                "return": {
                    "1": "result"
                },
                "<original_variable_name>": {
                    "1": "error_code"
                },
                "<original_function_name>": {
                    "1": "reverse_positive"
                },
                "<original_variable_name_1>": {
                    "1": "result"
                },
                "PTR_FUN_08005714": {
                    "1": "function_pointer"
                },
                "DAT_08005714": {
                    "1": "constant_value"
                }
            }
        },
        "FUN_0800571a": {
            "entrypoint": "0x0800571a",
            "current_name": "initialize_memory_0800571a",
            "code": "\nundefined4 initialize_memory_0800571a(undefined4 param1,int memory_address)\n\n{\n  *(undefined4 *)(memory_address + 4) = 0x2000;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800571a": "initialize_memory_0800571a",
                "param_1": "param1",
                "param_2": "memory_address"
            },
            "calling": [
                "FUN_08007004"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800571a": {
                    "1": "initialize_memory_region",
                    "3": "set_page_size",
                    "2": "set_memory_segment_size",
                    "7": "set_memory_page_size",
                    "10": "initialize_memory"
                },
                "param_1": {
                    "3": "result",
                    "1": "status",
                    "2": "param",
                    "5": "param1"
                },
                "param_2": {
                    "1": "ptr",
                    "3": "buffer",
                    "2": "base_address",
                    "5": "memory_address"
                },
                "<original_function_name>": {
                    "1": "initialize_memory"
                },
                "<param_1>": {
                    "1": "param"
                },
                "<param_2>": {
                    "1": "memory_address"
                },
                "<original_variable_name>": {
                    "1": "memory_segment_size"
                },
                "*(undefined4 *)(param_2 + 4)": {
                    "1": "memory_address"
                },
                "<Unnamed_var>": {
                    "1": "memory_value"
                },
                "param_2 + 4": {
                    "1": "page_size_address"
                },
                "0x2000": {
                    "1": "size"
                },
                "buffer": {
                    "1": "page_buffer"
                },
                "param_1_undefined_4": {
                    "1": "param1"
                },
                "param_2_int": {
                    "1": "param2"
                },
                "param_1_undefined_4_ptr": {
                    "1": "param1_ptr"
                },
                "param_2_int_ptr": {
                    "1": "param2_ptr"
                }
            }
        },
        "FUN_08005724": {
            "entrypoint": "0x08005724",
            "current_name": "get_return_value_08005724",
            "code": "\nint get_return_value_08005724(void)\n\n{\n  result 1;\n}\n\n",
            "renaming": {
                "FUN_08005724": "get_return_value_08005724",
                "undefined4": "int",
                "return": "result"
            },
            "calling": [
                "FUN_08007028"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08005724": {
                    "4": "initialize_flag",
                    "1": "get_status",
                    "3": "check_success",
                    "12": "get_return_value"
                },
                "undefined4": {
                    "2": "bool",
                    "4": "void",
                    "7": "int"
                },
                "PTR_": {
                    "1": "<same>",
                    "2": "ptr_"
                },
                "DAT_": {
                    "1": "dat",
                    "2": "dat_"
                },
                "returnValue": {
                    "1": "ret_value"
                },
                "return": {
                    "1": "status_code",
                    "3": "result"
                },
                "return 1;": {
                    "1": "return_flag_value"
                },
                "<original_variable_name_1>": {
                    "1": "status"
                },
                "result": {
                    "1": "flag"
                },
                "<no parameters>": {
                    "1": ""
                },
                "<no variables>": {
                    "1": ""
                }
            }
        },
        "FUN_08005728": {
            "entrypoint": "0x08005728",
            "current_name": "initialize_08005728",
            "code": "\nvoid initialize_08005728(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08005728": "initialize_08005728",
                "undefined4": "void"
            },
            "calling": [
                "FUN_08007048"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08005728": {
                    "1": "clear_function",
                    "19": "initialize",
                    "2": "get_zero"
                },
                "undefined4": {
                    "15": "void",
                    "3": "int",
                    "1": "uint32_t"
                },
                "<original_variable_name_1>": {
                    "1": "<new_variable_name_1>"
                },
                "<original_variable_name_2>": {
                    "1": "<new_variable_name_2>"
                },
                "<original_variable_name_n>": {
                    "1": "<new_variable_name_n>"
                },
                "void": {
                    "2": ""
                },
                "0": {
                    "1": "default_value"
                },
                "return": {
                    "1": ""
                },
                "DAT_0800572c": {
                    "1": "result"
                },
                "<original_function_name>": {
                    "1": "<more_descriptive_function_name>"
                },
                "DAT_08005728": {
                    "1": "application_status"
                },
                "undefined4 FUN_08005728": {
                    "1": "initialize"
                },
                "result": {
                    "1": "return_value"
                }
            }
        },
        "FUN_0800572c": {
            "entrypoint": "0x0800572c",
            "current_name": "initialize_0800572c",
            "code": "\nvoid initialize_0800572c(void)\n\n{\n  result 0;\n}\n\n",
            "renaming": {
                "FUN_0800572c": "initialize_0800572c",
                "undefined4": "void",
                "return": "result"
            },
            "calling": [
                "FUN_0800706c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800572c": {
                    "1": "initialize_value_to_zero",
                    "10": "initialize",
                    "3": "get_zero",
                    "6": "initialize_application"
                },
                "undefined4": {
                    "8": "void",
                    "1": "uint32_t"
                },
                "<original_variable_name>": {
                    "1": "error_code"
                },
                "<original_variable_name_1>": {
                    "2": "result"
                },
                "PTR_Param1": {
                    "1": "param1"
                },
                "PTR_LocalVar1": {
                    "1": "local_var1"
                },
                "PTR_LocalVar2": {
                    "1": "local_var2"
                },
                "return": {
                    "1": "result"
                },
                "result": {
                    "1": "return_value"
                }
            }
        },
        "FUN_08005730": {
            "entrypoint": "0x08005730",
            "current_name": "write_debug_message_08005730",
            "code": "\nvoid write_debug_message_08005730(undefined4 unused_param,undefined4 data_1,undefined4 length,undefined4 param_4)\n\n{\n  uart_debug_write(data_1,length,length,param_4,param_4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005730": "write_debug_message_08005730",
                "param_1": "unused_param",
                "param_2": "data_1",
                "param_3": "length"
            },
            "calling": [
                "FUN_08006f5a"
            ],
            "called": [
                "FUN_080053d4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08005730": {
                    "1": "write_to_uart_debug",
                    "24": "write_debug_message",
                    "4": "write_debug_info"
                },
                "param_1": {
                    "1": "unused_param_1",
                    "2": "unknown_param",
                    "3": "arg1",
                    "9": "unused_param",
                    "7": "param_1"
                },
                "param_2": {
                    "1": "value",
                    "2": "input",
                    "5": "data_1",
                    "4": "message"
                },
                "param_3": {
                    "1": "message_length",
                    "2": "data2",
                    "6": "data_2",
                    "5": "size",
                    "3": "arg3",
                    "8": "length"
                },
                "param_4": {
                    "1": "padding_param",
                    "2": "unused_param_2",
                    "4": "data_3",
                    "3": "unused_param"
                },
                "FUN_080053d4": {
                    "1": "perform_operation",
                    "2": "modify_data",
                    "3": "reverse_data",
                    "5": "reverse_bytes"
                },
                "ptr_1": {
                    "1": "result"
                },
                "<original_variable_name_1>": {
                    "1": "<new_variable_name_1>"
                },
                "<original_variable_name_2>": {
                    "1": "<new_variable_name_2>"
                },
                "<original_variable_name_n>": {
                    "1": "<new_variable_name_n>"
                }
            }
        },
        "FUN_0800573c": {
            "entrypoint": "0x0800573c",
            "current_name": "infinite_loop_0800573c",
            "code": "\nvoid infinite_loop_0800573c(void)\n\n{\n  loop {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_0800573c": "infinite_loop_0800573c",
                "do": "loop"
            },
            "calling": [
                "FUN_0800573c",
                "FUN_08006ac0"
            ],
            "called": [
                "FUN_0800573c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800573c": {
                    "1": "loop_forever",
                    "24": "infinite_loop",
                    "4": "endless_loop"
                },
                "do": {
                    "1": "do",
                    "2": "loop"
                },
                "true": {
                    "1": "true"
                },
                "PTR_": {
                    "1": "unchanged"
                },
                "DAT_": {
                    "1": "unchanged"
                },
                "original_variable_name_1": {
                    "1": "counter"
                },
                "": {
                    "1": ""
                },
                "<original_variable_name_1>": {
                    "1": "<new_variable_name_1>"
                },
                "<original_variable_name_2>": {
                    "1": "<new_variable_name_2>"
                },
                "<original_variable_name_n>": {
                    "1": "<new_variable_name_n>"
                },
                "PTR_0800573c": {
                    "1": "ptr"
                },
                "DAT_0800573c": {
                    "1": "dat"
                },
                "original_function_name": {
                    "1": "more_descriptive_function_name"
                },
                "original_parameter_name_1": {
                    "1": "new_parameter_name_1"
                },
                "original_parameter_name_2": {
                    "1": "new_parameter_name_2"
                },
                "original_variable_name_2": {
                    "1": "new_variable_name_2"
                }
            }
        },
        "FUN_08005740": {
            "entrypoint": "0x08005740",
            "current_name": "initialize_data_08005740",
            "code": "\nvoid initialize_data_08005740(void)\n\n{\n  DAT_200006a4 = 0x16;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_08005740": "initialize_data_08005740",
                "undefined4": "void"
            },
            "calling": [
                "FUN_08006f00"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08005740": {
                    "1": "initialize_default_settings",
                    "14": "initialize_data",
                    "10": "set_initial_value",
                    "2": "initialize_value"
                },
                "undefined4": {
                    "1": "void"
                },
                "DAT_200006a4": {
                    "4": "data_size",
                    "2": "default_value",
                    "1": "value",
                    "9": "initial_value",
                    "6": "data_value"
                },
                "return value": {
                    "2": "error_flag"
                },
                "return_value": {
                    "1": "success"
                }
            }
        },
        "FUN_08005750": {
            "entrypoint": "0x08005750",
            "current_name": "initialize_08005750",
            "code": "\nvoid initialize_08005750(void)\n\n{\n  result 1;\n}\n\n",
            "renaming": {
                "FUN_08005750": "initialize_08005750",
                "undefined4": "void",
                "return": "result"
            },
            "calling": [
                "FUN_08006f34"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08005750": {
                    "9": "initialize",
                    "1": "check_success",
                    "4": "get_one",
                    "3": "initialize_flag",
                    "6": "get_return_value",
                    "2": "initialize_return_value"
                },
                "undefined4": {
                    "3": "int"
                },
                "return": {
                    "1": "return",
                    "2": "return_value"
                },
                "Result": {
                    "1": "status"
                },
                "PTR": {
                    "1": "pointer"
                },
                "DAT": {
                    "1": "data"
                },
                "<original_parameter_name_1>": {
                    "1": "<new_parameter_name_1>"
                },
                "": {
                    "2": ""
                },
                "getOne": {
                    "1": "get_one"
                },
                "void": {
                    "1": ""
                },
                "DAT_": {
                    "1": ""
                },
                "PTR_": {
                    "1": ""
                },
                "PTR_fun_1": {
                    "1": "function_pointer"
                },
                "PTR_fun_2": {
                    "1": "function_pointer2"
                },
                "PTR_fun_3": {
                    "1": "function_pointer3"
                },
                "VAR_result": {
                    "1": "result"
                }
            }
        },
        "FUN_08005754": {
            "entrypoint": "0x08005754",
            "current_name": "get_adc_value_08005754",
            "code": "\nuint get_adc_value_08005754(uint input_value)\n\n{\n  bool is_less_than_threshold;\n  char character_value;\n  uint adc_value;\n  \n  if (input_value < 0xe) {\n    if (input_value + 0x2e < 0x3c) {\n      is_less_than_threshold = true;\n    }\n    else {\n      is_less_than_threshold = false;\n    }\n  }\n  else {\n    is_less_than_threshold = input_value < 0x3c;\n  }\n  if (is_less_than_threshold) {\n    if (input_value < 0xe) {\n      input_value = input_value + 0x2e;\n    }\n    character_value = (&DAT_080076f0)[input_value];\n  }\n  else {\n    character_value = -1;\n  }\n  if (character_value == -1) {\n    adc_value = 0;\n  }\n  else {\n    adc_value = read_adc_value();\n    if (DAT_200000f4 != 0xc) {\n      if (DAT_200000f4 < 0xc) {\n        return adc_value >> (0xc - DAT_200000f4 & 0xff);\n      }\n      return adc_value << (DAT_200000f4 - 0xc & 0xff);\n    }\n  }\n  return adc_value;\n}\n\n",
            "renaming": {
                "FUN_08005754": "get_adc_value_08005754",
                "param_1": "input_value",
                "bVar1": "is_less_than_threshold",
                "cVar2": "character_value",
                "uVar3": "adc_value",
                "adc_read_value": "read_adc_value"
            },
            "calling": [
                "FUN_08000cd0"
            ],
            "called": [
                "FUN_08004a4c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08005754": {
                    "3": "read_and_modify_value",
                    "1": "read_and_process_value",
                    "4": "decode_and_adjust_value",
                    "6": "get_adc_value",
                    "2": "read_adc_value"
                },
                "param_1": {
                    "7": "value",
                    "23": "input_value",
                    "1": "input_param"
                },
                "bVar1": {
                    "2": "is_small_value",
                    "4": "is_less_than_0x3c",
                    "1": "is_valid_range",
                    "3": "is_less_than",
                    "8": "is_less_than_threshold"
                },
                "cVar2": {
                    "1": "transformed_value",
                    "2": "extracted_value",
                    "5": "result"
                },
                "uVar3": {
                    "3": "result_value",
                    "1": "processed_value",
                    "2": "read_value",
                    "4": "adjusted_value",
                    "6": "result",
                    "7": "adc_value"
                },
                "DAT_080076f0": {
                    "1": "character_array"
                },
                "DAT_200000f4": {
                    "2": "shift_amount",
                    "1": "constant"
                },
                "adc_read_value": {
                    "1": "read_adc_value"
                },
                "FUN_08004a4c": {
                    "1": "adc_read_value"
                }
            }
        },
        "FUN_080057b4": {
            "entrypoint": "0x080057b4",
            "current_name": "configure_pin_080057b4",
            "code": "\nvoid configure_pin_080057b4(uint pin_number,undefined4 pin_mode,undefined4 param3,undefined *pin_config)\n\n{\n  int pin_configured;\n  undefined *pin_config_array;\n  int pin_config_index;\n  \n  if (pin_number < 0x3c) {\n    pin_config_index = (int)(char)(&DAT_080076f0)[pin_number];\n    pin_config_array = &DAT_080076f0;\n  }\n  else {\n    pin_config_index = -1;\n    pin_config_array = pin_config;\n  }\n  if (pin_config_index != -1) {\n    pin_configured = check_pin_configuration(pin_config_index,&DAT_20000344,param3,pin_config_array,pin_config);\n    if (pin_configured != 0) {\n      pin_configured = check_pin_in_pinmap(pin_config_index,&DAT_080074b4);\n      if (pin_configured != 0) {\n        stop_pwm(pin_config_index);\n      }\n      reset_pin_configuration(pin_config_index,&DAT_20000344);\n    }\n    switch(pin_mode) {\n    case 0:\n      initialize_digital_io(pin_config_index,0);\n      break;\n    case 1:\n      initialize_digital_io(pin_config_index,1,0);\n      break;\n    case 2:\n      initialize_digital_io(pin_config_index,0,1);\n      break;\n    case 3:\n      initialize_digital_io(pin_config_index,0,2);\n    }\n    set_pin_configuration(pin_config_index,&DAT_20000358);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080057b4": "configure_pin_080057b4",
                "param_1": "pin_number",
                "param_2": "pin_mode",
                "param_3": "param3",
                "param_4": "pin_config",
                "iVar1": "pin_configured",
                "puVar2": "pin_config_array",
                "iVar3": "pin_config_index",
                "is_pin_configured": "check_pin_configuration",
                "pin_in_pinmap": "check_pin_in_pinmap",
                "pwm_stop": "stop_pwm",
                "reset_pin_configured": "reset_pin_configuration",
                "digital_io_init": "initialize_digital_io",
                "set_pin_configured": "set_pin_configuration"
            },
            "calling": [
                "FUN_08000bcc",
                "FUN_0800157c",
                "FUN_080013a4"
            ],
            "called": [
                "FUN_08004828",
                "FUN_08004ce2",
                "FUN_08004bb0",
                "FUN_08004b3c",
                "FUN_0800480a",
                "FUN_080047f4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080057b4": {
                    "1": "initialize_configured_pin",
                    "7": "initialize_pin",
                    "12": "configure_pin",
                    "2": "configure_gpio_pin"
                },
                "param_1": {
                    "3": "pin_id",
                    "10": "pin_index",
                    "16": "pin_number",
                    "1": "pin"
                },
                "param_2": {
                    "1": "configuration",
                    "7": "io_mode",
                    "10": "pin_mode",
                    "5": "mode"
                },
                "param_3": {
                    "2": "parameter_3",
                    "9": "param3",
                    "1": "config_param",
                    "8": "param_3"
                },
                "param_4": {
                    "4": "param4",
                    "1": "pin_config_array",
                    "5": "pin_data",
                    "6": "pin_config",
                    "2": "parameter_4"
                },
                "iVar1": {
                    "3": "pin_config_result",
                    "1": "pin_config_status",
                    "10": "pin_configured",
                    "2": "is_pin_configured_result"
                },
                "puVar2": {
                    "3": "pin_data_ptr",
                    "1": "pin_mapping",
                    "2": "pin_table",
                    "4": "pin_config_ptr",
                    "5": "pin_array",
                    "7": "pin_config_array"
                },
                "iVar3": {
                    "2": "pin_val",
                    "7": "pin_index",
                    "8": "pin_config_index",
                    "1": "index",
                    "3": "pin_config_value"
                },
                "is_pin_configured": {
                    "1": "check_pin_configured",
                    "6": "check_pin_configuration",
                    "3": "check_if_pin_configured"
                },
                "pin_in_pinmap": {
                    "1": "check_if_pin_in_pinmap",
                    "2": "check_pin_in_pin_map",
                    "5": "check_pin_in_pinmap"
                },
                "pwm_stop": {
                    "12": "stop_pwm"
                },
                "reset_pin_configured": {
                    "4": "reset_pin_configured",
                    "1": "clear_pin_configuration",
                    "5": "reset_pin_configuration",
                    "2": "reset_pin_config"
                },
                "digital_io_init": {
                    "11": "initialize_digital_io",
                    "1": "init_digital_io"
                },
                "set_pin_configured": {
                    "2": "set_pin_config",
                    "4": "set_pin_configured",
                    "5": "set_pin_configuration"
                },
                "FUN_08004828": {
                    "2": "is_pin_configured",
                    "1": "initialize_analog_io"
                },
                "FUN_08004ce2": {
                    "1": "configure_pin",
                    "2": "pin_in_pinmap"
                },
                "FUN_08004bb0": {
                    "2": "pwm_stop",
                    "1": "initialize_uart_io"
                },
                "FUN_08004b3c": {
                    "2": "reset_pin_configured",
                    "1": "reset_uart_config"
                },
                "FUN_0800480a": {
                    "1": "initialize_spi_io",
                    "2": "digital_io_init"
                },
                "FUN_080047f4": {
                    "2": "set_pin_configured",
                    "1": "initialize_i2c_io"
                },
                "DAT_20000344": {
                    "1": "pin_config_map"
                },
                "DAT_080076f0": {
                    "1": "pin_config_lookup"
                },
                "DAT_20000358": {
                    "1": "pin_config"
                },
                "param_2 in switch": {
                    "1": "io_mode_case"
                },
                "default_pin_config": {
                    "1": "configure_pin"
                },
                "selected_pin": {
                    "1": "pin_index"
                },
                "output_mode": {
                    "1": "is_output_mode"
                },
                "pull_up_down": {
                    "1": "pull_up_down"
                },
                "DAT_080074b4": {
                    "1": "pin_map"
                },
                "&DAT_20000344": {
                    "1": "pin_config_data1"
                },
                "&DAT_080074b4": {
                    "1": "pin_map_array"
                },
                "&DAT_20000358": {
                    "1": "pin_config_data2"
                }
            }
        },
        "FUN_08005848": {
            "entrypoint": "0x08005848",
            "current_name": "configure_pin_08005848",
            "code": "\nvoid configure_pin_08005848(uint pin_index,undefined4 value,undefined4 param_3,undefined *pin_config)\n\n{\n  int is_configured;\n  undefined4 gpio_port;\n  undefined *pin_config_ptr;\n  uint pin_value;\n  \n  if (pin_index < 0x3c) {\n    pin_value = (uint)(char)(&DAT_080076f0)[pin_index];\n    pin_config_ptr = &DAT_080076f0;\n  }\n  else {\n    pin_value = 0xffffffff;\n    pin_config_ptr = pin_config;\n  }\n  if ((pin_value != 0xffffffff) &&\n     (is_configured = check_pin_configuration(pin_value,&DAT_20000358,param_3,pin_config_ptr,pin_config), is_configured != 0)) {\n    gpio_port = get_gpio_port((pin_value << 0x18) >> 0x1c);\n    write_digital_io(gpio_port,1 << (pin_value & 0xf) & 0xffff,value);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005848": "configure_pin_08005848",
                "param_1": "pin_index",
                "param_2": "value",
                "param_4": "pin_config",
                "iVar1": "is_configured",
                "uVar2": "gpio_port",
                "uVar4": "pin_value",
                "puVar3": "pin_config_ptr",
                "get_GPIO_Port": "get_gpio_port",
                "digital_io_write": "write_digital_io",
                "is_pin_configured": "check_pin_configuration"
            },
            "calling": [
                "FUN_08000bcc",
                "FUN_080015b2",
                "FUN_0800157c",
                "FUN_080012a2",
                "FUN_080013a4",
                "FUN_080012e8",
                "FUN_080012c0",
                "FUN_08000cd0",
                "FUN_08001310"
            ],
            "called": [
                "FUN_08004848",
                "FUN_08004c30",
                "FUN_080047f4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08005848": {
                    "1": "configure_pin_and_write_data",
                    "2": "configure_pin_and_write",
                    "14": "configure_pin",
                    "7": "configure_gpio_pin"
                },
                "param_1": {
                    "19": "pin_index",
                    "11": "pin_number",
                    "1": "pin"
                },
                "param_2": {
                    "5": "pin_state",
                    "2": "output_value",
                    "3": "pin_value",
                    "12": "value",
                    "1": "logic_level"
                },
                "param_3": {
                    "1": "port_number",
                    "3": "param3",
                    "2": "size",
                    "15": "param_3",
                    "4": "config_param"
                },
                "param_4": {
                    "1": "config2",
                    "2": "config_data",
                    "6": "pin_data"
                },
                "iVar1": {
                    "2": "config_result",
                    "16": "is_configured",
                    "1": "pin_config_success",
                    "4": "is_pin_configured_result",
                    "3": "result"
                },
                "uVar2": {
                    "1": "port",
                    "30": "gpio_port"
                },
                "uVar4": {
                    "1": "pin_index_temp",
                    "2": "pin_data",
                    "12": "pin_value",
                    "8": "pin_config"
                },
                "puVar3": {
                    "1": "gpio_pin_config_ptr",
                    "3": "pin_config",
                    "5": "pin_config_ptr",
                    "2": "pin_array",
                    "4": "pin_data"
                },
                "get_GPIO_Port": {
                    "1": "get_gpio_port_from_pin",
                    "8": "get_gpio_port"
                },
                "digital_io_write": {
                    "1": "write_to_digital_io",
                    "2": "write_to_gpio",
                    "4": "write_digital_io"
                },
                "is_pin_configured": {
                    "2": "check_if_pin_configured",
                    "6": "check_pin_configuration"
                },
                "FUN_08004848": {
                    "1": "get_gpio_port_from_pin_index"
                },
                "FUN_08004c30": {
                    "1": "configure_pin"
                },
                "FUN_080047f4": {
                    "1": "convert_pin_to_value"
                },
                "DAT_080076f0": {
                    "1": "pin_data"
                },
                "DAT_20000358": {
                    "1": "pin_config_data"
                }
            }
        },
        "FUN_08005890": {
            "entrypoint": "0x08005890",
            "current_name": "check_pin_status_08005890",
            "code": "\nchar check_pin_status_08005890(uint pin_number)\n\n{\n  char pin_status;\n  int is_configured;\n  undefined4 gpio_port;\n  uint pin_value;\n  \n  if (pin_number < 0x3c) {\n    pin_value = (uint)(char)(&DAT_080076f0)[pin_number];\n  }\n  else {\n    pin_value = 0xffffffff;\n  }\n  if (pin_value == 0xffffffff) {\n    pin_status = '\\0';\n  }\n  else {\n    is_configured = check_pin_configuration(pin_value,&DAT_20000358);\n    if (is_configured == 0) {\n      pin_status = '\\0';\n    }\n    else {\n      gpio_port = get_gpio_port((pin_value << 0x18) >> 0x1c);\n      pin_status = read_digital_io(gpio_port,1 << (pin_value & 0xf) & 0xffff);\n    }\n  }\n  if (pin_status != '\\0') {\n    pin_status = '\\x01';\n  }\n  return pin_status;\n}\n\n",
            "renaming": {
                "FUN_08005890": "check_pin_status_08005890",
                "param_1": "pin_number",
                "cVar1": "pin_status",
                "iVar2": "is_configured",
                "uVar3": "gpio_port",
                "uVar4": "pin_value",
                "is_pin_configured": "check_pin_configuration",
                "get_GPIO_Port": "get_gpio_port",
                "digital_io_read": "read_digital_io"
            },
            "calling": [
                "FUN_080015b2",
                "FUN_08000cd0"
            ],
            "called": [
                "FUN_08004c48",
                "FUN_08004848",
                "FUN_080047f4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08005890": {
                    "1": "read_pin_status",
                    "14": "check_pin_status",
                    "2": "check_pin_state",
                    "3": "read_pin_value",
                    "4": "check_gpio_pin"
                },
                "param_1": {
                    "1": "pin_num",
                    "3": "pin_index",
                    "27": "pin_number"
                },
                "cVar1": {
                    "1": "result",
                    "6": "is_configured",
                    "8": "pin_status",
                    "2": "pin_value",
                    "5": "status",
                    "7": "pin_state"
                },
                "iVar2": {
                    "1": "configured",
                    "15": "is_configured",
                    "6": "pin_configured",
                    "4": "is_configured_result",
                    "2": "is_pin_configured_result"
                },
                "uVar3": {
                    "31": "gpio_port"
                },
                "uVar4": {
                    "1": "data_value",
                    "3": "pin_index",
                    "2": "pin_data",
                    "4": "pin_config",
                    "10": "pin_value"
                },
                "is_pin_configured": {
                    "3": "check_pin_configuration"
                },
                "get_GPIO_Port": {
                    "1": "retrieve_gpio_port",
                    "4": "get_gpio_port"
                },
                "digital_io_read": {
                    "5": "read_digital_io",
                    "1": "read_pin"
                },
                "FUN_08004c48": {
                    "2": "configure_pin"
                },
                "FUN_08004848": {
                    "2": "is_pin_configured"
                },
                "FUN_080047f4": {
                    "2": "get_gpio_port"
                },
                "\tiVar2": {
                    "1": "pin_configured"
                }
            }
        },
        "FUN_080058e0": {
            "entrypoint": "0x080058e0",
            "current_name": "get_current_milliseconds_080058e0",
            "code": "\nvoid get_current_milliseconds_080058e0(void)\n\n{\n  GetCurrentMilli();\n  return;\n}\n\n",
            "renaming": {
                "FUN_080058e0": "get_current_milliseconds_080058e0"
            },
            "calling": [
                "FUN_08000bcc",
                "FUN_080016b4",
                "FUN_08001ab0",
                "FUN_08000cd0"
            ],
            "called": [
                "FUN_08004b94"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080058e0": {
                    "1": "get_current_millisecond_time",
                    "2": "get_current_time_in_milliseconds",
                    "12": "get_current_milliseconds",
                    "3": "get_current_time",
                    "7": "get_current_millisecond",
                    "4": "get_current_milli"
                },
                "FUN_08004b94": {
                    "1": "perform_initialization",
                    "4": "do_something",
                    "3": "initialize_data",
                    "6": "initialize_system",
                    "2": "print_message"
                },
                "GetCurrentMilli": {
                    "1": "get_current_milliseconds"
                }
            }
        },
        "FUN_080058e8": {
            "entrypoint": "0x080058e8",
            "current_name": "FUNC_080058e8",
            "code": "\nvoid FUNC_080058e8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080058e8": "FUNC_080058e8"
            },
            "calling": [
                "FUN_08000bcc"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800591e": {
            "entrypoint": "0x0800591e",
            "current_name": "calculate_checksum_0800591e",
            "code": "\nuvalue calculate_checksum_0800591e(int input_value)\n\n{\n  return (*(value *)(input_value + 0x134) + 0x40) - *(value *)(input_value + 0x136) bitwise_and 0x3f;\n}\n\n",
            "renaming": {
                "FUN_0800591e": "calculate_checksum_0800591e",
                "param_1": "input_value",
                "&": "bitwise_and",
                "short": "value"
            },
            "calling": [
                "FUN_08005a18"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800591e": {
                    "1": "calculate_shifted_difference",
                    "7": "calculate_offset",
                    "2": "calculate_offset_difference",
                    "4": "calculate_difference",
                    "13": "calculate_checksum",
                    "3": "calculate_result"
                },
                "param_1": {
                    "4": "address",
                    "3": "data_pointer",
                    "11": "input_value",
                    "1": "data_address",
                    "5": "base_address"
                },
                "*(short *)(param_1 + 0x134)": {
                    "9": "first_value",
                    "2": "offset1",
                    "3": "value1"
                },
                "*(short *)(param_1 + 0x136)": {
                    "2": "offset2",
                    "9": "second_value",
                    "3": "value2"
                },
                "0x40": {
                    "1": "offset",
                    "2": "constant_value"
                },
                "&": {
                    "1": "bitwise_and"
                },
                "0x3f": {
                    "2": "mask",
                    "1": "bitwise_mask"
                },
                "*((short *)(param_1 + 0x134))": {
                    "1": "offset_1"
                },
                "*((short *)(param_1 + 0x136))": {
                    "1": "offset_2"
                },
                "0x134": {
                    "2": "offset_1",
                    "3": "offset_a",
                    "1": "value1_offset"
                },
                "0x136": {
                    "3": "offset2",
                    "1": "value2_offset",
                    "2": "offset_2"
                },
                "param_2": {
                    "1": "offset1"
                },
                "param_3": {
                    "1": "offset2"
                },
                "param_4": {
                    "1": "mask"
                },
                "& 0x3f": {
                    "1": "masked_value"
                },
                "short_value_1": {
                    "1": "checksum_offset"
                },
                "short_value_2": {
                    "1": "modification_offset"
                },
                "short": {
                    "1": "value"
                },
                "short_1": {
                    "1": "offset1"
                },
                "short_2": {
                    "1": "offset2"
                },
                "*PTR_{}_134": {
                    "1": "offset1"
                },
                "*PTR_{}_136": {
                    "1": "offset2"
                },
                "var_1": {
                    "1": "offset_1"
                },
                "var_2": {
                    "1": "offset_2"
                }
            }
        },
        "FUN_0800598a": {
            "entrypoint": "0x0800598a",
            "current_name": "process_uart_input_0800598a",
            "code": "\nvoid process_uart_input_0800598a(int uart_device)\n\n{\n  int input_status;\n  ushort current_index;\n  undefined received_data;\n  \n  input_status = uart_getc(uart_device,&received_data);\n  if ((input_status == 0) &&\n     (current_index = *(short *)(uart_device + 0x60) + 1U & 0x3f, current_index != *(ushort *)(uart_device + 0x62))) {\n    *(undefined *)(*(int *)(uart_device + 0x5c) + (uint)*(ushort *)(uart_device + 0x60)) = received_data;\n    *(ushort *)(uart_device + 0x60) = current_index;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800598a": "process_uart_input_0800598a",
                "param_1": "uart_device",
                "iVar1": "input_status",
                "uVar2": "current_index",
                "local_9": "received_data"
            },
            "calling": [],
            "called": [
                "FUN_080054d4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800598a": {
                    "3": "process_uart_data",
                    "2": "read_and_store_character",
                    "1": "read_and_store_uart_data",
                    "16": "process_uart_input"
                },
                "param_1": {
                    "6": "uart_port",
                    "1": "uart_handler",
                    "14": "uart_device",
                    "7": "uart_handle"
                },
                "iVar1": {
                    "1": "uart_input",
                    "3": "input_result",
                    "2": "uart_result",
                    "4": "read_result",
                    "8": "input_status"
                },
                "uVar2": {
                    "1": "index",
                    "4": "next_index",
                    "9": "new_index",
                    "14": "current_index"
                },
                "local_9": {
                    "7": "received_byte",
                    "1": "byte_data",
                    "4": "received_char",
                    "2": "input_byte"
                },
                "param_2": {
                    "1": "buffer"
                },
                "param_3": {
                    "1": "size"
                },
                "param_4": {
                    "1": "offset"
                },
                "param_1 + 0x60": {
                    "1": "buffer_start"
                },
                "param_1 + 0x62": {
                    "1": "buffer_end"
                }
            }
        },
        "FUN_08005a18": {
            "entrypoint": "0x08005a18",
            "current_name": "FUNC_08005a18",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08005a1e) */\n/* WARNING: Removing unreachable block (ram,0x08005a30) */\n/* WARNING: Removing unreachable block (ram,0x08005a26) */\n/* WARNING: Removing unreachable block (ram,0x08005a38) */\n\nvoid FUNC_08005a18(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005a18": "FUNC_08005a18"
            },
            "calling": [
                "FUN_08005f6c"
            ],
            "called": [
                "FUN_0800591e"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005a44": {
            "entrypoint": "0x08005a44",
            "current_name": "initialize_data_08005a44",
            "code": "\nvoid initialize_data_08005a44(int base_address)\n\n{\n  *(int *)(base_address + 0x130) = base_address + 0x11;\n  *(undefined2 *)(base_address + 0x134) = 0;\n  *(undefined2 *)(base_address + 0x136) = 0;\n  *(int *)(base_address + 0x138) = base_address + 0x51;\n  *(undefined2 *)(base_address + 0x13c) = 0;\n  *(undefined2 *)(base_address + 0x13e) = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005a44": "initialize_data_08005a44",
                "param_1": "base_address"
            },
            "calling": [
                "FUN_08005b54"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08005a44": {
                    "2": "initialize_function",
                    "1": "initialize_data_struct",
                    "7": "initialize_parameters",
                    "3": "initialize_memory",
                    "10": "initialize_data"
                },
                "param_1": {
                    "1": "data_struct_ptr",
                    "15": "base_address",
                    "2": "data_address",
                    "3": "param"
                },
                "param_1 + 0x130": {
                    "1": "address1"
                },
                "param_1 + 0x134": {
                    "1": "data_offset2"
                },
                "param_1 + 0x136": {
                    "1": "param_offset_3"
                },
                "param_1 + 0x138": {
                    "1": "data_struct.another_value"
                },
                "param_1 + 0x13c": {
                    "1": "data_offset5"
                },
                "param_1 + 0x13e": {
                    "1": "param_block->var6"
                },
                "*(int *)(param_1 + 0x130)": {
                    "1": "base_pointer"
                },
                "*(undefined2 *)(param_1 + 0x134)": {
                    "1": "param->value2",
                    "3": "value1"
                },
                "*(undefined2 *)(param_1 + 0x136)": {
                    "1": "flag2",
                    "3": "value2"
                },
                "*(int *)(param_1 + 0x138)": {
                    "1": "variable_d"
                },
                "*(undefined2 *)(param_1 + 0x13c)": {
                    "1": "third_undefined2",
                    "3": "value3"
                },
                "*(undefined2 *)(param_1 + 0x13e)": {
                    "1": "variable_f",
                    "3": "value4"
                },
                "0x130": {
                    "4": "offset1",
                    "1": "offset"
                },
                "0x11": {
                    "1": "init_value1"
                },
                "0x134": {
                    "1": "data_offset2",
                    "2": "offset2"
                },
                "0x136": {
                    "1": "flag2",
                    "2": "offset3"
                },
                "0x138": {
                    "1": "pointer_offset",
                    "2": "offset4"
                },
                "0x51": {
                    "1": "offset4_value"
                },
                "0x13c": {
                    "1": "data_offset5",
                    "2": "offset5"
                },
                "0x13e": {
                    "1": "value4",
                    "2": "offset6"
                },
                "param_1 + 0x11": {
                    "1": "data_value1"
                },
                "param_1 + 0x51": {
                    "1": "data_structure.end_pointer_value"
                },
                "<original_variable_name_1>": {
                    "1": "offset1"
                },
                "<original_variable_name_2>": {
                    "1": "offset2"
                },
                "<original_variable_name_n>": {
                    "1": "offset_n"
                }
            }
        },
        "FUN_08005a68": {
            "entrypoint": "0x08005a68",
            "current_name": "initialize_serial_communication_08005a68",
            "code": "\nvoid initialize_serial_communication_08005a68(int serial_port,undefined4 baud_rate,byte config)\n\n{\n  uint extra_output;\n  char *error_message;\n  byte config_bits;\n  int config_value;\n  byte *byte_pointer;\n  char character;\n  int offset;\n  code *jump_table;\n  \n  *(undefined4 *)(serial_port + 0x11c) = baud_rate;\n  *(byte *)(serial_port + 0x140) = config;\n  config_bits = config & 7;\n  if (config_bits == 4) {\n    config_value = 7;\n  }\n  else if (config_bits == 6) {\n    config_value = 8;\n  }\n  else if (config_bits == 2) {\n    config_value = 6;\n  }\n  else {\n    config_value = 0;\n  }\n  if ((config & 0x30) == 0x30) {\n    *(undefined4 *)(serial_port + 0x128) = 0x600;\n    config_value = config_value + 1;\n  }\n  else if ((config & 0x20) == 0) {\n    *(undefined4 *)(serial_port + 0x128) = 0;\n  }\n  else {\n    *(undefined4 *)(serial_port + 0x128) = 0x400;\n    config_value = config_value + 1;\n  }\n  if ((config & 8) == 0) {\n    *(undefined4 *)(serial_port + 0x124) = 0;\n  }\n  else {\n    *(undefined4 *)(serial_port + 0x124) = 0x2000;\n  }\n  if (config_value == 8) {\n    *(undefined4 *)(serial_port + 0x120) = 0;\n  }\n  else if (config_value == 9) {\n    *(undefined4 *)(serial_port + 0x120) = 0x1000;\n  }\n  else {\n    config_value = 0;\n  }\n  if (config_value != 0) {\n    initialize_uart(serial_port + 0xd4);\n    attach_rx_callback_to_uart(serial_port + 0xd4,0x800598b);\n    return;\n  }\n  error_message = \"void HardwareSerial::begin(long unsigned int, byte)\";\n  jump_table = (code *)0x8005b12;\n  __assert_func(\"/home/bo/.arduino15/packages/STM32/hardware/stm32/1.3.0/cores/arduino/HardwareSerial.cpp\"\n                ,299,\"void HardwareSerial::begin(long unsigned int, byte)\",\"databits!=0\");\n  byte_pointer = *(byte **)(extra_output + offset);\n  error_message[0x1e] = character;\n  *(undefined *)(*byte_pointer + 0x1e) = 0;\n  if (extra_output < 0x3c) {\n    data = (&DAT_080076f0)[extra_output];\n  }\n  else {\n    data = 0xff;\n  }\n                    /* WARNING: Could not recover jumptable at 0x08005b30. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jump_table)();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005a68": "initialize_serial_communication_08005a68",
                "param_1": "serial_port",
                "param_2": "baud_rate",
                "param_3": "config",
                "extraout_r1": "extra_output",
                "pcVar1": "error_message",
                "bVar2": "config_bits",
                "iVar3": "config_value",
                "pbVar4": "byte_pointer",
                "unaff_r4": "character",
                "unaff_r6": "offset",
                "UNRECOVERED_JUMPTABLE": "jump_table",
                "uart_init": "initialize_uart",
                "uart_attach_rx_callback": "attach_rx_callback_to_uart",
                "uRam0000012d": "data"
            },
            "calling": [
                "FUN_08000bcc"
            ],
            "called": [
                "FUN_08005510",
                "FUN_08004f4c",
                "FUN_0800611c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08005a68": {
                    "1": "initialize_serial_configuration",
                    "5": "initialize_serial_port",
                    "3": "initialize_serial",
                    "12": "initialize_serial_communication",
                    "2": "initialize_hardware_serial"
                },
                "param_1": {
                    "1": "serial_object",
                    "7": "serial_port_address",
                    "2": "uart_address",
                    "15": "serial_port",
                    "3": "port_address"
                },
                "param_2": {
                    "1": "param2",
                    "30": "baud_rate"
                },
                "param_3": {
                    "10": "config",
                    "1": "byte_size",
                    "2": "data_config",
                    "5": "config_byte",
                    "3": "configuration"
                },
                "extraout_r1": {
                    "1": "config_bits",
                    "2": "result",
                    "13": "extra_output"
                },
                "pcVar1": {
                    "1": "source_file_path",
                    "6": "error_string",
                    "18": "error_message"
                },
                "bVar2": {
                    "1": "config_option",
                    "4": "config_mask",
                    "2": "bits",
                    "3": "config_bit",
                    "8": "config_bits"
                },
                "iVar3": {
                    "3": "config_count",
                    "1": "config_option",
                    "11": "config_value",
                    "2": "config_index"
                },
                "pbVar4": {
                    "5": "byte_ptr",
                    "1": "pointer_byte",
                    "12": "byte_pointer",
                    "2": "ptr",
                    "3": "data_pointer"
                },
                "unaff_r4": {
                    "2": "unaff_r4",
                    "1": "serial_char",
                    "5": "temp_char",
                    "10": "character"
                },
                "unaff_r6": {
                    "1": "unaffected_register6",
                    "2": "temp_int",
                    "4": "base_address",
                    "3": "unaff_r6",
                    "11": "offset"
                },
                "UNRECOVERED_JUMPTABLE": {
                    "1": "jump_table_pointer",
                    "17": "jump_table",
                    "2": "jumptable"
                },
                "uart_init": {
                    "5": "initialize_uart"
                },
                "uart_attach_rx_callback": {
                    "2": "attach_rx_callback_to_uart",
                    "1": "attach_receive_callback"
                },
                "param_2 in FUN_08005510": {
                    "1": "baud_rate"
                },
                "param_3 in FUN_08005510": {
                    "1": "data_format"
                },
                "param_4 in FUN_08005510": {
                    "1": "stop_bits"
                },
                "FUN_08005510": {
                    "1": "configure_serial_port"
                },
                "FUN_08004f4c": {
                    "1": "check_serial_settings"
                },
                "FUN_0800611c": {
                    "2": "assert_function",
                    "1": "set_uart_callback"
                },
                "code *UNRECOVERED_JUMPTABLE": {
                    "1": "jump_table_func"
                },
                "uRam0000012d": {
                    "1": "memory_address"
                },
                "param_4": {
                    "1": "byte_value"
                }
            }
        },
        "FUN_08005b24": {
            "entrypoint": "0x08005b24",
            "current_name": "set_byte_value_08005b24",
            "code": "\nvoid set_byte_value_08005b24(int base_address,uint index)\n\n{\n  undefined updated_value;\n  code *jump_table;\n  \n  if (index < 0x3c) {\n    updated_value = (&DAT_080076f0)[index];\n  }\n  else {\n    updated_value = 0xff;\n  }\n  *(undefined *)(base_address + 0x12d) = updated_value;\n                    /* WARNING: Could not recover jumptable at 0x08005b30. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jump_table)();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005b24": "set_byte_value_08005b24",
                "param_1": "base_address",
                "param_2": "index",
                "uVar1": "updated_value",
                "UNRECOVERED_JUMPTABLE": "jump_table"
            },
            "calling": [
                "FUN_08005b54"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08005b24": {
                    "1": "set_random_value",
                    "2": "update_param",
                    "3": "set_byte_value"
                },
                "param_1": {
                    "6": "address",
                    "1": "character_pointer",
                    "2": "memory_address",
                    "8": "base_address"
                },
                "param_2": {
                    "2": "threshold",
                    "5": "input_value",
                    "1": "byte_index",
                    "6": "value",
                    "13": "index"
                },
                "uVar1": {
                    "1": "result",
                    "4": "return_value",
                    "2": "default_value",
                    "5": "byte_value"
                },
                "UNRECOVERED_JUMPTABLE": {
                    "10": "jump_table"
                }
            }
        },
        "FUN_08005b3c": {
            "entrypoint": "0x08005b3c",
            "current_name": "set_byte_value_08005b3c",
            "code": "\nvoid set_byte_value_08005b3c(int base_address,uint index)\n\n{\n  undefined byte_value;\n  \n  if (index < 0x3c) {\n    byte_value = (&DAT_080076f0)[index];\n  }\n  else {\n    byte_value = 0xff;\n  }\n  *(undefined *)(base_address + 300) = byte_value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005b3c": "set_byte_value_08005b3c",
                "param_1": "base_address",
                "param_2": "index",
                "uVar1": "byte_value"
            },
            "calling": [
                "FUN_08005b54"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08005b3c": {
                    "1": "set_default_value",
                    "11": "set_byte_value",
                    "2": "update_parameter_value"
                },
                "param_1": {
                    "2": "destination",
                    "1": "dest_address",
                    "13": "base_address",
                    "3": "target_address",
                    "6": "memory_address"
                },
                "param_2": {
                    "1": "param_value",
                    "3": "offset",
                    "27": "index"
                },
                "uVar1": {
                    "3": "new_value",
                    "2": "value_to_update",
                    "1": "copied_value",
                    "6": "value",
                    "7": "byte_value"
                }
            }
        },
        "FUN_08005b54": {
            "entrypoint": "0x08005b54",
            "current_name": "initialize_communication_08005b54",
            "code": "\nundefined4 *\ninitialize_communication_08005b54(undefined4 *communication_params,undefined4 pin_number,undefined4 rx_param,undefined4 tx_param)\n\n{\n  undefined pin_value;\n  \n  communication_params[1] = 0;\n  communication_params[2] = 1000;\n  *communication_params = &PTR_LAB_080059c8_1_08007804;\n  if (communication_params == (undefined4 *)&DAT_2000036c) {\n    configure_rx(&DAT_2000036c,0,rx_param,&DAT_2000036c,tx_param);\n    configure_tx(&DAT_2000036c,1);\n  }\n  else {\n    pin_value = get_pin_value(pin_number,&DAT_08007604);\n    *(undefined *)((int)communication_params + 0x12d) = pin_value;\n    pin_value = get_pin_value(pin_number,&DAT_0800764c);\n    *(undefined *)(communication_params + 0x4b) = pin_value;\n  }\n  initialize(communication_params);\n  return communication_params;\n}\n\n",
            "renaming": {
                "FUN_08005b54": "initialize_communication_08005b54",
                "param_1": "communication_params",
                "param_2": "pin_number",
                "param_3": "rx_param",
                "param_4": "tx_param",
                "uVar1": "pin_value",
                "setRx": "configure_rx",
                "setTx": "configure_tx",
                "pinmap_pin": "get_pin_value",
                "init": "initialize"
            },
            "calling": [
                "FUN_08005bb0"
            ],
            "called": [
                "FUN_08005a44",
                "FUN_08004ca2",
                "FUN_08005b24",
                "FUN_08005b3c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08005b54": {
                    "1": "initialize_parameters",
                    "16": "initialize_communication",
                    "13": "initialize_device"
                },
                "param_1": {
                    "1": "parameters",
                    "4": "communication_data",
                    "2": "communication_settings",
                    "6": "device",
                    "9": "communication_params"
                },
                "param_2": {
                    "1": "pin_id",
                    "19": "pin_number",
                    "9": "pin"
                },
                "param_3": {
                    "9": "rx_param",
                    "5": "rx_config",
                    "1": "rx_mode",
                    "2": "value"
                },
                "param_4": {
                    "1": "set_tx_parameter",
                    "2": "param",
                    "5": "tx_config",
                    "9": "tx_param"
                },
                "uVar1": {
                    "3": "pin_result",
                    "17": "pin_value",
                    "1": "pin_mapping_result",
                    "2": "pin_mapping"
                },
                "param_1[1]": {
                    "1": "connection_info.rx_enabled"
                },
                "param_1[2]": {
                    "1": "connection_info.baud_rate"
                },
                "&PTR_LAB_080059c8_1_08007804": {
                    "1": "default_pin_config"
                },
                "&DAT_2000036c": {
                    "1": "default_device"
                },
                "&DAT_08007604": {
                    "1": "pin_map1"
                },
                "&DAT_0800764c": {
                    "1": "pin_map2"
                },
                "setRx": {
                    "1": "set_receive_data",
                    "2": "set_receive"
                },
                "setTx": {
                    "1": "set_transmit_data",
                    "2": "set_transmit"
                },
                "pinmap_pin": {
                    "1": "get_pin_mapping",
                    "3": "get_pin_value",
                    "2": "map_pin"
                },
                "init": {
                    "1": "initialize_device",
                    "5": "initialize"
                },
                "FUN_08005a44": {
                    "1": "initialize_resources",
                    "2": "perform_action"
                },
                "FUN_08004ca2": {
                    "2": "set_rx",
                    "1": "assign_pin"
                },
                "FUN_08005b24": {
                    "1": "set_pin",
                    "2": "set_rx"
                },
                "FUN_08005b3c": {
                    "1": "set_transmit_action",
                    "2": "set_tx"
                },
                "*param_1": {
                    "1": "device_configuration"
                },
                "(undefined4 *)&DAT_2000036c": {
                    "1": "data_pointer"
                },
                "*(undefined *)((int)param_1 + 0x12d)": {
                    "1": "receive_pin_value"
                },
                "*(undefined *)(param_1 + 0x4b)": {
                    "1": "transmit_pin_value"
                },
                "param_1[0]": {
                    "1": "connection_info.connection_type"
                },
                "DAT_2000036c": {
                    "1": "default_connection"
                },
                "DAT_08007604": {
                    "1": "rx_pin_map"
                },
                "DAT_0800764c": {
                    "1": "tx_pin_map"
                }
            }
        },
        "FUN_08005bb0": {
            "entrypoint": "0x08005bb0",
            "current_name": "initialize_hardware_serial_08005bb0",
            "code": "\nvoid initialize_hardware_serial_08005bb0(int status,int value,undefined4 param3,undefined4 param4)\n\n{\n  if (status != 1) {\n    return;\n  }\n  if (value == 0xffff) {\n    configure_hardware_serial(&DAT_2000036c,0x40004400,param3,0xffff,param4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005bb0": "initialize_hardware_serial_08005bb0",
                "param_1": "status",
                "param_2": "value",
                "param_3": "param3",
                "param_4": "param4",
                "HardwareSerial": "configure_hardware_serial"
            },
            "calling": [],
            "called": [
                "FUN_08005b54"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08005bb0": {
                    "3": "initialize_serial_connection",
                    "1": "check_and_instantiate_hardware",
                    "9": "initialize_serial_communication",
                    "13": "initialize_hardware_serial"
                },
                "param_1": {
                    "4": "flag",
                    "1": "input_status",
                    "3": "condition",
                    "14": "status",
                    "2": "mode"
                },
                "param_2": {
                    "2": "baud_rate",
                    "1": "flag_value",
                    "19": "value"
                },
                "param_3": {
                    "1": "param_3",
                    "3": "param1",
                    "5": "arg1",
                    "2": "param_a"
                },
                "param_4": {
                    "3": "param2",
                    "5": "arg2",
                    "2": "parameter2",
                    "1": "param2_value"
                },
                "HardwareSerial": {
                    "1": "establish_serial_connection",
                    "3": "configure_hardware_serial",
                    "2": "initialize_hardware_serial"
                },
                "F_UNINITIALIZED_SERIAL_PORT": {
                    "1": "initialize_serial_port"
                }
            }
        },
        "FUN_08005c1c": {
            "entrypoint": "0x08005c1c",
            "current_name": "initialize_data_08005c1c",
            "code": "\nvoid initialize_data_08005c1c(undefined4 *data_pointer,undefined value1,undefined value2,undefined value3,\n                 undefined value4)\n\n{\n  *data_pointer = &DAT_08007858;\n  *(undefined *)(data_pointer + 1) = value1;\n  *(undefined *)((int)data_pointer + 5) = value2;\n  *(undefined *)((int)data_pointer + 6) = value3;\n  *(undefined *)((int)data_pointer + 7) = value4;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005c1c": "initialize_data_08005c1c",
                "param_1": "data_pointer",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3",
                "param_5": "value4"
            },
            "calling": [
                "FUN_08005c38"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08005c1c": {
                    "2": "initialize_function",
                    "1": "set_data",
                    "4": "initialize_parameters",
                    "18": "initialize_data"
                },
                "param_1": {
                    "3": "output",
                    "6": "output_data",
                    "2": "data_ptr",
                    "1": "result",
                    "7": "data_pointer"
                },
                "param_2": {
                    "2": "param_2",
                    "3": "value_1",
                    "1": "param1",
                    "20": "value1"
                },
                "param_3": {
                    "1": "value3",
                    "2": "param_3",
                    "3": "value_2",
                    "20": "value2"
                },
                "param_4": {
                    "2": "param_4",
                    "1": "value4",
                    "20": "value3",
                    "3": "value_3"
                },
                "param_5": {
                    "3": "value_4",
                    "1": "value5",
                    "2": "param5",
                    "20": "value4"
                },
                "DAT_08007858": {
                    "1": "initial_data"
                }
            }
        },
        "FUN_08005c38": {
            "entrypoint": "0x08005c38",
            "current_name": "initialize_ip_address_08005c38",
            "code": "\nvoid initialize_ip_address_08005c38(int condition1,int value)\n\n{\n  if ((condition1 == 1) && (value == 0xffff)) {\n    set_ip_address(&DAT_200004b0,0,0,0,0);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005c38": "initialize_ip_address_08005c38",
                "param_1": "condition1",
                "param_2": "value",
                "IPAddress": "set_ip_address"
            },
            "calling": [],
            "called": [
                "FUN_08005c1c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08005c38": {
                    "23": "initialize_ip_address",
                    "1": "initialize_ip_address_if_needed",
                    "2": "set_ip_address"
                },
                "param_1": {
                    "4": "flag",
                    "1": "check_param1",
                    "7": "condition1",
                    "3": "status",
                    "2": "param1"
                },
                "param_2": {
                    "1": "second_parameter",
                    "2": "value2",
                    "7": "condition2",
                    "9": "value",
                    "3": "flag2"
                },
                "IPAddress": {
                    "6": "set_ip_address",
                    "2": "initialize_ip_address"
                },
                "<original_function_name>": {
                    "1": "initialize_ip_address"
                },
                "DAT_200004b0": {
                    "3": "ip_address"
                }
            }
        },
        "FUN_08005c96": {
            "entrypoint": "0x08005c96",
            "current_name": "execute_function_08005c96",
            "code": "\nundefined4 execute_function_08005c96(int *input_array,int string,undefined4 param3,undefined4 param4)\n\n{\n  undefined4 string_length;\n  \n  if (string != 0) {\n    string_length = strlen(string);\n    string_length = (**(code **)(*input_array + 4))(input_array,string,string_length,*(code **)(*input_array + 4),param4);\n    return string_length;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08005c96": "execute_function_08005c96",
                "param_1": "input_array",
                "param_2": "string",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "string_length"
            },
            "calling": [
                "FUN_08000bcc",
                "FUN_08005da8",
                "FUN_08005cd4",
                "FUN_08000cd0"
            ],
            "called": [
                "FUN_08000178"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08005c96": {
                    "1": "execute_function_with_title",
                    "3": "process_data",
                    "5": "execute_function"
                },
                "param_1": {
                    "2": "function_list",
                    "4": "array",
                    "3": "array_pointer",
                    "1": "input_pointer",
                    "6": "input_array"
                },
                "param_2": {
                    "2": "size",
                    "1": "string_input",
                    "5": "input_string",
                    "7": "string",
                    "3": "length"
                },
                "param_3": {
                    "1": "first_param",
                    "6": "param3",
                    "5": "param_3",
                    "2": "param_a"
                },
                "param_4": {
                    "1": "parameter",
                    "6": "param4",
                    "2": "output",
                    "5": "arg2"
                },
                "uVar1": {
                    "18": "string_length",
                    "1": "title_length",
                    "3": "length",
                    "4": "result"
                },
                "FUN_08000178": {
                    "3": "get_string_length",
                    "1": "get_reverse_string",
                    "4": "reverse_string"
                }
            }
        },
        "FUN_08005cb6": {
            "entrypoint": "0x08005cb6",
            "current_name": "execute_function_08005cb6",
            "code": "\nvoid execute_function_08005cb6(undefined4 *function_pointer)\n\n{\n  (**(function_to_execute **)*function_pointer)();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005cb6": "execute_function_08005cb6",
                "param_1": "function_pointer",
                "code": "function_to_execute"
            },
            "calling": [
                "FUN_08005da8",
                "FUN_08005d42"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08005cb6": {
                    "5": "execute_code",
                    "22": "execute_function",
                    "1": "run_extracted_function",
                    "2": "execute_dynamic_function"
                },
                "param_1": {
                    "2": "function_ptr",
                    "3": "code_pointer",
                    "25": "function_pointer"
                },
                "*param_1": {
                    "1": "run_function"
                },
                "**(code **)*param_1": {
                    "1": "execute_function"
                },
                "<original_function_name>": {
                    "1": "execute_function"
                },
                "<param_1>": {
                    "1": "function_pointer"
                },
                "code": {
                    "1": "function_to_execute"
                }
            }
        },
        "FUN_08005cc0": {
            "entrypoint": "0x08005cc0",
            "current_name": "execute_function_08005cc0",
            "code": "\nvoid execute_function_08005cc0(int *function_pointer,undefined4 arg1,undefined4 arg2,undefined4 arg3)\n\n{\n  (**(code **)(*function_pointer + 4))(function_pointer,&DAT_0800786c,2,*(code **)(*function_pointer + 4),arg3);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005cc0": "execute_function_08005cc0",
                "param_1": "function_pointer",
                "param_2": "arg1",
                "param_3": "arg2",
                "param_4": "arg3"
            },
            "calling": [
                "FUN_08005f40",
                "FUN_08005cd4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08005cc0": {
                    "3": "execute_code",
                    "20": "execute_function",
                    "1": "perform_action",
                    "7": "execute_callback"
                },
                "param_1": {
                    "17": "function_pointer",
                    "1": "callback_table",
                    "4": "function_ptr",
                    "3": "callback_function",
                    "2": "callback_ptr"
                },
                "param_2": {
                    "1": "argument_1",
                    "2": "unused_param",
                    "18": "arg1"
                },
                "param_3": {
                    "1": "unused_param",
                    "2": "arg_2",
                    "18": "arg2"
                },
                "param_4": {
                    "1": "param",
                    "2": "additional_parameter",
                    "18": "arg3"
                },
                "int *param_1": {
                    "1": "input_param"
                },
                "(*(*param_1 + 4))": {
                    "1": "callback_function"
                },
                "**(*(function_pointer + 4)))": {
                    "1": "function_to_execute"
                },
                "&DAT_0800786c": {
                    "1": "data_parameter"
                },
                "*(function_pointer + 4)": {
                    "1": "function_pointer_to_execute"
                }
            }
        },
        "FUN_08005cd4": {
            "entrypoint": "0x08005cd4",
            "current_name": "calculate_sum_08005cd4",
            "code": "\nint calculate_sum_08005cd4(undefined4 input_value)\n\n{\n  int result1;\n  int result2;\n  \n  result1 = execute_function_with_array();\n  result2 = execute_function_with_pointer(input_value);\n  return result2 + result1;\n}\n\n",
            "renaming": {
                "FUN_08005cd4": "calculate_sum_08005cd4",
                "param_1": "input_value",
                "iVar1": "result1",
                "iVar2": "result2",
                "execute_function_08005cc0": "execute_function_with_pointer",
                "execute_function_08005c96": "execute_function_with_array"
            },
            "calling": [
                "FUN_08000cd0"
            ],
            "called": [
                "FUN_08005cc0",
                "FUN_08005c96"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08005cd4": {
                    "21": "calculate_sum",
                    "1": "add_executed_results",
                    "3": "calculate_sum_of_functions"
                },
                "param_1": {
                    "6": "input",
                    "1": "param",
                    "8": "arg",
                    "2": "arg1",
                    "3": "input_param"
                },
                "iVar1": {
                    "1": "executed_result_1",
                    "16": "result1",
                    "6": "result_1"
                },
                "iVar2": {
                    "1": "second_result",
                    "16": "result2",
                    "6": "result_2"
                },
                "execute_function_08005cd4": {
                    "1": "get_result"
                },
                "execute_function_08005cc0": {
                    "1": "execute_function_with_params",
                    "3": "execute_function_with_pointer",
                    "2": "execute_function_with_param"
                },
                "execute_function_08005c96": {
                    "1": "execute_function1",
                    "3": "execute_func_c96",
                    "4": "execute_function_with_array",
                    "2": "execute_function_2"
                },
                "function_pointer": {
                    "1": "func_ptr"
                },
                "arg1": {
                    "1": "argument_1"
                },
                "arg2": {
                    "1": "arg_b"
                },
                "arg3": {
                    "1": "arg_c"
                },
                "input_array": {
                    "2": "array"
                },
                "string": {
                    "2": "str"
                },
                "param3": {
                    "1": "param3"
                },
                "param4": {
                    "1": "param_b"
                },
                "param2_1": {
                    "1": "function_pointer"
                },
                "param2_2": {
                    "1": "arg1"
                },
                "param2_3": {
                    "1": "arg2"
                },
                "param2_4": {
                    "1": "arg3"
                },
                "param1_1": {
                    "1": "input_array"
                },
                "param1_2": {
                    "1": "string"
                },
                "param1_3": {
                    "1": "param3"
                },
                "param1_4": {
                    "1": "param4"
                }
            }
        },
        "FUN_08005ce8": {
            "entrypoint": "0x08005ce8",
            "current_name": "convert_base_08005ce8",
            "code": "\nundefined4 convert_base_08005ce8(int *output_buffer,uint number,uint base)\n\n{\n  char digit;\n  undefined4 result;\n  uint remainder;\n  uint quotient;\n  char *current_digit;\n  char converted_number [9];\n  \n  converted_number[1] = 0;\n  if ((int)base < 2) {\n    base = 10;\n  }\n  current_digit = converted_number + 1;\n  do {\n    quotient = number / base;\n    remainder = (number & 0xff) - (quotient * base & 0xff) & 0xff;\n    current_digit = current_digit + -1;\n    digit = (char)remainder;\n    if (remainder < 10) {\n      digit = digit + '0';\n    }\n    else {\n      digit = digit + '7';\n    }\n    *current_digit = digit;\n    number = quotient;\n  } while (quotient != 0);\n  if (current_digit == (char *)0x0) {\n    result = 0;\n  }\n  else {\n    result = strlen(current_digit);\n    result = (**(code **)(*output_buffer + 4))(output_buffer,current_digit,result);\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08005ce8": "convert_base_08005ce8",
                "param_1": "output_buffer",
                "param_2": "number",
                "param_3": "base",
                "local_15": "converted_number",
                "cVar1": "digit",
                "uVar2": "result",
                "uVar3": "remainder",
                "uVar4": "quotient",
                "pcVar5": "current_digit"
            },
            "calling": [
                "FUN_08005d8a",
                "FUN_08005d42"
            ],
            "called": [
                "FUN_08000178"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08005ce8": {
                    "5": "convert_to_base",
                    "1": "convert_decimal_to_another_base",
                    "10": "convert_base",
                    "4": "convert_number_to_string",
                    "3": "convert_number_to_base"
                },
                "param_1": {
                    "1": "result_array",
                    "2": "output_string",
                    "3": "input_array",
                    "14": "output_buffer"
                },
                "param_2": {
                    "6": "decimal_number",
                    "1": "number_to_convert",
                    "4": "input_number",
                    "18": "number"
                },
                "param_3": {
                    "31": "base"
                },
                "local_15": {
                    "1": "output_buffer",
                    "3": "digit_buffer",
                    "14": "converted_number",
                    "5": "buffer"
                },
                "cVar1": {
                    "3": "converted_char",
                    "1": "digit_char",
                    "5": "digit",
                    "2": "converted_digit"
                },
                "uVar2": {
                    "1": "output",
                    "3": "output_length",
                    "15": "result"
                },
                "uVar3": {
                    "23": "remainder"
                },
                "uVar4": {
                    "23": "quotient"
                },
                "pcVar5": {
                    "1": "result_pointer",
                    "7": "current_digit",
                    "3": "current_char",
                    "2": "string_ptr"
                }
            }
        },
        "FUN_08005d42": {
            "entrypoint": "0x08005d42",
            "current_name": "print_number_or_execute_function_08005d42",
            "code": "\nint print_number_or_execute_function_08005d42(undefined4 *function_pointer,uint number,uint base)\n\n{\n  int result;\n  int result2;\n  \n  if (base == 0) {\n    result = (**(code **)*function_pointer)(function_pointer,number & 0xff);\n    return result;\n  }\n  if (base != 10) {\n    result = print_number(function_pointer,number,base & 0xff);\n    return result;\n  }\n  if (-1 < (int)number) {\n    result = print_number(function_pointer,number,10);\n    return result;\n  }\n  result = execute_function(function_pointer,0x2d);\n  result2 = print_number(function_pointer,-number,10);\n  return result2 + result;\n}\n\n",
            "renaming": {
                "FUN_08005d42": "print_number_or_execute_function_08005d42",
                "param_1": "function_pointer",
                "param_2": "number",
                "param_3": "base",
                "iVar1": "result",
                "iVar2": "result2",
                "printNumber": "print_number",
                "execute_function_08005cb6": "execute_function"
            },
            "calling": [
                "FUN_08005d82"
            ],
            "called": [
                "FUN_08005cb6",
                "FUN_08005ce8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08005d42": {
                    "1": "print_or_execute_number",
                    "4": "print_number_or_execute",
                    "2": "print_formatted_number",
                    "11": "print_number_or_execute_function",
                    "5": "process_number"
                },
                "param_1": {
                    "1": "function_array",
                    "25": "function_pointer",
                    "4": "output_buffer"
                },
                "param_2": {
                    "31": "number"
                },
                "param_3": {
                    "31": "base"
                },
                "iVar1": {
                    "7": "return_value",
                    "1": "execution_result",
                    "3": "result1",
                    "17": "result"
                },
                "iVar2": {
                    "2": "print_return_value",
                    "1": "return_value2",
                    "4": "print_result",
                    "3": "negative_result"
                },
                "printNumber": {
                    "1": "print_number"
                },
                "execute_function_08005cb6": {
                    "2": "execute_function"
                }
            }
        },
        "FUN_08005d82": {
            "entrypoint": "0x08005d82",
            "current_name": "print_number_or_execute_function_08005d82",
            "code": "\nvoid print_number_or_execute_function_08005d82(void)\n\n{\n  print_or_execute();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005d82": "print_number_or_execute_function_08005d82",
                "print_number_or_execute_function_08005d42": "print_or_execute",
                "number": "num"
            },
            "calling": [
                "FUN_08005da8",
                "FUN_08000cd0"
            ],
            "called": [
                "FUN_08005d42"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08005d82": {
                    "2": "execute_or_print_number",
                    "1": "execute_print_or_execute_function",
                    "6": "print_number_or_execute_function",
                    "4": "execute_print_number_or_function",
                    "3": "execute_print_or_execute",
                    "5": "execute_print_or_function"
                },
                "print_number_or_execute_function_08005d42": {
                    "9": "print_number_or_execute",
                    "1": "execute_print_or_execute_function",
                    "6": "print_number_or_execute_function"
                },
                "function_pointer": {
                    "9": "function_ptr",
                    "10": "func_ptr",
                    "1": "function_pointer",
                    "5": "function"
                },
                "number": {
                    "2": "input_number",
                    "26": "num"
                },
                "base": {
                    "1": "b",
                    "7": "num_base",
                    "2": "number_base",
                    "18": "base"
                },
                "undefined4 *function_pointer": {
                    "1": "function"
                },
                "uint number": {
                    "1": "number"
                },
                "uint base": {
                    "1": "base"
                },
                "F_08005d82": {
                    "1": "execute_print"
                }
            }
        },
        "FUN_08005d8a": {
            "entrypoint": "0x08005d8a",
            "current_name": "print_or_call_function_08005d8a",
            "code": "\nvoid print_or_call_function_08005d8a(undefined4 *function_pointer,uint value1,uint value2,undefined4 extra_param)\n\n{\n  if (value2 != 0) {\n    print_number(function_pointer,value1,value2 & 0xff);\n    return;\n  }\n  (**(code **)*function_pointer)(function_pointer,value1 & 0xff,0,*(code **)*function_pointer,extra_param);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005d8a": "print_or_call_function_08005d8a",
                "param_1": "function_pointer",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "extra_param",
                "printNumber": "print_number"
            },
            "calling": [
                "FUN_08005da8"
            ],
            "called": [
                "FUN_08005ce8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08005d8a": {
                    "1": "print_or_callback",
                    "5": "print_number_or_call_function",
                    "4": "print_or_call",
                    "13": "print_or_call_function"
                },
                "param_1": {
                    "2": "data",
                    "14": "function_pointer",
                    "1": "array_param",
                    "8": "function_ptr"
                },
                "param_2": {
                    "1": "input_value1",
                    "2": "input_param",
                    "4": "input_param1",
                    "5": "value1"
                },
                "param_3": {
                    "3": "flag",
                    "2": "arg2",
                    "1": "input_2",
                    "4": "input_param2",
                    "5": "value2"
                },
                "param_4": {
                    "1": "unknown_param",
                    "4": "value3",
                    "2": "value_3"
                },
                "printNumber": {
                    "8": "print_number",
                    "2": "print_value",
                    "1": "print_given_number"
                },
                "FUN_08005ce8": {
                    "1": "calculate_result",
                    "3": "process_data",
                    "2": "reverse_bits"
                }
            }
        },
        "FUN_08005da8": {
            "entrypoint": "0x08005da8",
            "current_name": "calculate_and_print_result_08005da8",
            "code": "\nint calculate_and_print_result_08005da8(undefined4 function_pointer,undefined4 param_2,undefined4 param_3,uint param4,byte num_iterations)\n\n{\n  int result;\n  undefined4 temp1;\n  int temp2;\n  byte counter;\n  undefined8 floating_point_value;\n  undefined8 temp4;\n  \n  result = is_unordered(param_3,param4,param_3,param4);\n  if (result == 0) {\n    result = is_unordered(param_3,param4 & 0x7fffffff,0xffffffff,0x7fefffff);\n    if ((result == 0) &&\n       (result = is_less_or_equal(param_3,param4 & 0x7fffffff,0xffffffff,0x7fefffff), result == 0)) {\n      result = execute_function(function_pointer,&DAT_08007860);\n    }\n    else {\n      result = is_greater_than(param_3,param4,0xe0000000,0x41efffff);\n      if (result == 0) {\n        result = is_less_than(param_3,param4,0xe0000000,0xc1efffff);\n        if (result == 0) {\n          result = is_less_than(param_3,param4,0,0);\n          if (result == 0) {\n            result = 0;\n          }\n          else {\n            result = execute_function(function_pointer,0x2d);\n            param4 = param4 + 0x80000000;\n          }\n          floating_point_value = 0x3fe0000000000000;\n          for (counter = 0; temp1 = (undefined4)((ulonglong)floating_point_value >> 0x20), counter < num_iterations;\n              counter = counter + 1) {\n            floating_point_value = divide_double((int)floating_point_value,temp1,0,0x40240000);\n          }\n          floating_point_value = add_double(param_3,param4,(int)floating_point_value,temp1);\n          temp1 = convert_to_unsigned_int();\n          temp4 = convert_to_unsigned_float();\n          floating_point_value = subtract_double((int)floating_point_value,(int)((ulonglong)floating_point_value >> 0x20),(int)temp4,\n                           (int)((ulonglong)temp4 >> 0x20));\n          temp2 = print_or_call_function(function_pointer,temp1,10);\n          result = result + temp2;\n          if (num_iterations != 0) {\n            temp2 = execute_function(function_pointer,&DAT_08007868);\n            result = result + temp2;\n          }\n          while (num_iterations != 0) {\n            floating_point_value = multiply_double((int)floating_point_value,(int)((ulonglong)floating_point_value >> 0x20),0,0x40240000);\n            temp1 = convert_to_int();\n            temp2 = print_number_or_execute_function(function_pointer,temp1,10);\n            result = result + temp2;\n            temp4 = convert_to_float(temp1);\n            floating_point_value = subtract_double((int)floating_point_value,(int)((ulonglong)floating_point_value >> 0x20),(int)temp4,\n                             (int)((ulonglong)temp4 >> 0x20));\n            num_iterations = num_iterations - 1;\n          }\n        }\n        else {\n          result = execute_function(function_pointer,&DAT_08007864);\n        }\n      }\n      else {\n        result = execute_function(function_pointer,&DAT_08007864);\n      }\n    }\n  }\n  else {\n    result = execute_function(function_pointer,&DAT_0800785c);\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08005da8": "calculate_and_print_result_08005da8",
                "param_1": "function_pointer",
                "param_4": "param4",
                "param_5": "num_iterations",
                "iVar1": "result",
                "uVar2": "temp1",
                "iVar3": "temp2",
                "bVar4": "counter",
                "uVar5": "floating_point_value",
                "uVar6": "temp4",
                "__unorddf2": "is_unordered",
                "__aeabi_dcmple": "is_less_or_equal",
                "__aeabi_dcmpgt": "is_greater_than",
                "__aeabi_dcmplt": "is_less_than",
                "__divdf3": "divide_double",
                "__aeabi_dadd": "add_double",
                "__fixunsdfsi": "convert_to_unsigned_int",
                "__floatunsidf": "convert_to_unsigned_float",
                "__subdf3": "subtract_double",
                "execute_function_08005c96": "execute_function",
                "print_or_call_function_08005d8a": "print_or_call_function",
                "execute_function_08005cb6": "execute_function",
                "__muldf3": "multiply_double",
                "__fixdfsi": "convert_to_int",
                "print_number_or_execute_function_08005d82": "print_number_or_execute_function",
                "__floatsidf": "convert_to_float"
            },
            "calling": [
                "FUN_08005f2c"
            ],
            "called": [
                "FUN_080009dc",
                "FUN_08000a58",
                "FUN_0800042c",
                "FUN_08005d8a",
                "FUN_08000a18",
                "FUN_08005d82",
                "FUN_080004f8",
                "FUN_08000194",
                "FUN_08005cb6",
                "FUN_08000190",
                "FUN_080009f0",
                "FUN_0800074c",
                "FUN_08000aa8",
                "FUN_08000a2c",
                "FUN_08005c96",
                "FUN_0800040c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08005da8": {
                    "1": "process_floating_point_numbers",
                    "14": "calculate_and_print_result",
                    "2": "process_data",
                    "3": "calculate_result"
                },
                "param_1": {
                    "13": "function_pointer",
                    "2": "function_array",
                    "1": "arg1",
                    "12": "input_array"
                },
                "param_2": {
                    "1": "arg2",
                    "8": "string",
                    "2": "input_value1",
                    "14": "param_2"
                },
                "param_3": {
                    "1": "arg3",
                    "6": "param3",
                    "2": "input_value_2",
                    "8": "param_3",
                    "5": "input1",
                    "4": "input_value1"
                },
                "param_4": {
                    "1": "operand_2",
                    "6": "param4",
                    "5": "input2",
                    "4": "param_4",
                    "2": "input_value3",
                    "3": "input_value1"
                },
                "param_5": {
                    "9": "num_iterations",
                    "3": "param5",
                    "1": "bits_to_reverse",
                    "2": "number_of_iterations",
                    "8": "param_5"
                },
                "iVar1": {
                    "1": "is_order_valid",
                    "27": "result"
                },
                "uVar2": {
                    "1": "conversion_temp",
                    "2": "temp_var1",
                    "7": "temp1"
                },
                "iVar3": {
                    "3": "temp_result",
                    "1": "value2",
                    "2": "temp_var2",
                    "7": "print_result",
                    "8": "temp2"
                },
                "bVar4": {
                    "3": "loop_counter",
                    "2": "temp_byte",
                    "1": "digit",
                    "14": "counter",
                    "4": "iteration_count"
                },
                "uVar5": {
                    "1": "floating_result",
                    "6": "floating_point_value",
                    "2": "floating_point",
                    "5": "floating_point_result",
                    "4": "temp3"
                },
                "uVar6": {
                    "1": "floating_point2",
                    "2": "temp_floating_point_value",
                    "3": "converted_value",
                    "4": "temp4"
                },
                "__unorddf2": {
                    "1": "is_double_unordered",
                    "3": "is_unordered"
                },
                "__aeabi_dcmple": {
                    "1": "is_double_less_than_or_equal"
                },
                "__aeabi_dcmpgt": {
                    "1": "compare_double_greater_than",
                    "2": "is_greater_than"
                },
                "__aeabi_dcmplt": {
                    "1": "compare_less_than",
                    "2": "is_less_than"
                },
                "__divdf3": {
                    "1": "divide_floating_point",
                    "3": "divide_double",
                    "2": "divide"
                },
                "__aeabi_dadd": {
                    "1": "floating_point_addition",
                    "3": "add_double",
                    "2": "add"
                },
                "__fixunsdfsi": {
                    "1": "float_to_unsigned_int",
                    "3": "convert_to_unsigned_int"
                },
                "__floatunsidf": {
                    "1": "convert_int_to_unsigned_double",
                    "2": "convert_to_unsigned_float"
                },
                "__subdf3": {
                    "4": "subtract_double",
                    "2": "subtract",
                    "1": "subtract_floating_point"
                },
                "execute_function_08005c96": {
                    "1": "execute_function_2",
                    "9": "execute_function"
                },
                "print_or_call_function_08005d8a": {
                    "1": "print_or_execute_function",
                    "8": "print_or_call_function"
                },
                "execute_function_08005cb6": {
                    "1": "execute_function_2",
                    "6": "execute_function"
                },
                "__muldf3": {
                    "1": "floating_point_multiplication",
                    "2": "multiply_double"
                },
                "__fixdfsi": {
                    "2": "convert_to_int",
                    "1": "floating_point_to_int"
                },
                "print_number_or_execute_function_08005d82": {
                    "1": "print_number_or_exec_function",
                    "9": "print_number_or_execute_function"
                },
                "__floatsidf": {
                    "1": "int_to_floating_point",
                    "2": "convert_to_float"
                },
                "is_cy_null_080009dc": {
                    "1": "is_cy_null",
                    "8": "is_carry_null"
                },
                "calculate_result_08000a58": {
                    "1": "calculate_result_1",
                    "9": "calculate_result"
                },
                "reverse_bits_0800042c": {
                    "9": "reverse_bits"
                },
                "is_null_character_08000a18": {
                    "10": "is_null_character"
                },
                "calculate_result_080004f8": {
                    "2": "calculate_result_2",
                    "1": "calc_result_1",
                    "4": "calculate_result"
                },
                "calculate_08000194": {
                    "1": "calc_result_2",
                    "9": "calculate"
                },
                "check_equality_080009f0": {
                    "10": "check_equality"
                },
                "calculate_floating_point_0800074c": {
                    "1": "calc_floating_point",
                    "8": "calculate_floating_point"
                },
                "calculate_shifted_value_08000aa8": {
                    "10": "calculate_shifted_value"
                },
                "check_parameters_08000a2c": {
                    "10": "check_parameters"
                },
                "reverse_bits_0800040c": {
                    "1": "reverse_bits1",
                    "2": "reverse_bits_2",
                    "3": "reverse_bits"
                },
                "print_or_call_function_08005d82": {
                    "1": "print_or_call_func_08005d82"
                },
                "print_number_or_execute_function_08005d8a": {
                    "1": "print_number_or_call_func_08005d8a"
                },
                "calculate_result_08000190": {
                    "1": "calc_result_3",
                    "3": "calculate_result"
                },
                "DAT_08007860": {
                    "1": "function_parameter1"
                },
                "DAT_08007868": {
                    "1": "function_parameter2"
                },
                "DAT_08007864": {
                    "1": "function_parameter3"
                },
                "DAT_0800785c": {
                    "1": "function_ptr4"
                },
                "\tiVar3": {
                    "1": "result"
                },
                "calculate_result_0800042c": {
                    "1": "reverse_bits"
                }
            }
        },
        "FUN_08005f2c": {
            "entrypoint": "0x08005f2c",
            "current_name": "print_float_wrapper_08005f2c",
            "code": "\nvoid print_float_wrapper_08005f2c(void)\n\n{\n  printFloat();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005f2c": "print_float_wrapper_08005f2c"
            },
            "calling": [
                "FUN_08005f40",
                "FUN_08000cd0"
            ],
            "called": [
                "FUN_08005da8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08005f2c": {
                    "1": "print_float_and_return",
                    "23": "print_float_wrapper",
                    "3": "print_float",
                    "2": "print_float_value"
                },
                "param_1": {
                    "1": "value1",
                    "2": "param1",
                    "13": "arg1",
                    "5": "input1"
                },
                "param_2": {
                    "2": "input_2",
                    "5": "input2",
                    "1": "var2",
                    "13": "arg2"
                },
                "param_3": {
                    "2": "param3",
                    "1": "third_argument",
                    "13": "arg3",
                    "5": "input3"
                },
                "param_4": {
                    "1": "input4",
                    "3": "param4",
                    "2": "count",
                    "12": "arg4"
                },
                "param_5": {
                    "4": "flag",
                    "12": "arg5",
                    "2": "input_5",
                    "1": "unknown5",
                    "3": "param5"
                },
                "FUN_08005da8": {
                    "1": "process_parameters",
                    "2": "calculate_something",
                    "3": "calculate_float"
                },
                "undefined4 param_1": {
                    "1": "first_param"
                },
                "undefined4 param_2": {
                    "1": "second_param"
                },
                "undefined4 param_3": {
                    "1": "third_param"
                },
                "uint param_4": {
                    "1": "fourth_param"
                },
                "byte param_5": {
                    "1": "fifth_param"
                }
            }
        },
        "FUN_08005f40": {
            "entrypoint": "0x08005f40",
            "current_name": "calculate_sum_08005f40",
            "code": "\nint calculate_sum_08005f40(undefined4 arg)\n\n{\n  int print_result;\n  int execute_result;\n  \n  print_result = print();\n  execute_result = execute_function(arg);\n  return execute_result + print_result;\n}\n\n",
            "renaming": {
                "FUN_08005f40": "calculate_sum_08005f40",
                "param_1": "arg",
                "iVar1": "print_result",
                "iVar2": "execute_result",
                "execute_function_08005cc0": "execute_function"
            },
            "calling": [
                "FUN_08000cd0"
            ],
            "called": [
                "FUN_08005cc0",
                "FUN_08005f2c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08005f40": {
                    "22": "calculate_sum",
                    "4": "calculate_total",
                    "1": "add_and_execute",
                    "2": "calculate_result"
                },
                "param_1": {
                    "3": "input_parameter",
                    "1": "input_argument",
                    "5": "input_value",
                    "2": "value",
                    "17": "arg"
                },
                "iVar1": {
                    "28": "print_result",
                    "1": "num_printed"
                },
                "iVar2": {
                    "1": "exec_result",
                    "2": "function_result",
                    "17": "execute_result",
                    "8": "execution_result"
                },
                "execute_function_08005cc0": {
                    "1": "execute_function_with_args",
                    "6": "execute_function"
                },
                "print_float_wrapper_08005f2c": {
                    "1": "print_float_info",
                    "5": "print_float_wrapper"
                }
            }
        },
        "FUN_08005f5c": {
            "entrypoint": "0x08005f5c",
            "current_name": "FUNC_08005f5c",
            "code": "\nvoid FUNC_08005f5c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005f5c": "FUNC_08005f5c"
            },
            "calling": [
                "FUN_08005f6c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005f5e": {
            "entrypoint": "0x08005f5e",
            "current_name": "initialize_system_08005f5e",
            "code": "\nvoid initialize_system_08005f5e(void)\n\n{\n  HAL_NVIC_SetPriorityGrouping(3);\n  initialize_hardware_configuration();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005f5e": "initialize_system_08005f5e",
                "initialize_hardware_configuration_08001c32": "initialize_hardware_configuration"
            },
            "calling": [
                "FUN_08006198"
            ],
            "called": [
                "FUN_08001c32",
                "FUN_08002470"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08005f5e": {
                    "8": "configure_hardware",
                    "3": "initialize_and_configure_hardware",
                    "5": "initialize_hardware",
                    "13": "initialize_system",
                    "1": "initialize_and_set_priority_group"
                },
                "initialize_hardware_configuration_08001c32": {
                    "1": "initialize_hardware_config",
                    "3": "configure_hardware",
                    "18": "initialize_hardware_configuration",
                    "7": "initialize_hardware"
                },
                "update_register_value_08002470": {
                    "3": "update_register",
                    "28": "update_register_value"
                }
            }
        },
        "FUN_08005f6c": {
            "entrypoint": "0x08005f6c",
            "current_name": "initialize_and_run_08005f6c",
            "code": "\nvoid initialize_and_run_08005f6c(void)\n\n{\n  initVariant();\n  setup();\n  do {\n    loop();\n    serialEventRun();\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08005f6c": "initialize_and_run_08005f6c"
            },
            "calling": [
                "FUN_08001be8"
            ],
            "called": [
                "FUN_08005f5c",
                "FUN_08000bcc",
                "FUN_08005a18",
                "FUN_08000cd0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08005f6c": {
                    "3": "run_main_loop",
                    "9": "initialize_and_run",
                    "2": "execute_main_loop",
                    "8": "main_loop",
                    "1": "loop_forever"
                },
                "FUNC_08005f5c": {
                    "29": "init_variant",
                    "1": "initialize_variant"
                },
                "FUN_08000bcc": {
                    "29": "setup",
                    "1": "application_loop"
                },
                "FUNC_08005a18": {
                    "26": "loop",
                    "1": "application_loop",
                    "2": "main_loop"
                },
                "FUN_08000cd0": {
                    "8": "run_serial_event",
                    "1": "serial_event",
                    "3": "process_serial_event",
                    "10": "serial_event_run",
                    "4": "handle_serial_event"
                }
            }
        },
        "FUN_08005f8c": {
            "entrypoint": "0x08005f8c",
            "current_name": "count_set_bits_08005f8c",
            "code": "\nchar count_set_bits_08005f8c(uint number)\n\n{\n  char bit_count;\n  \n  bit_count = '\\0';\n  for (; number != 1; number = number >> 1) {\n    bit_count = bit_count + '\\x01';\n  }\n  return bit_count;\n}\n\n",
            "renaming": {
                "FUN_08005f8c": "count_set_bits_08005f8c",
                "param_1": "number",
                "cVar1": "bit_count"
            },
            "calling": [
                "FUN_080060e4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08005f8c": {
                    "1": "count_ones_in_binary",
                    "5": "count_bits_set",
                    "6": "count_bits",
                    "18": "count_set_bits"
                },
                "param_1": {
                    "1": "input_value",
                    "8": "input_number",
                    "5": "num",
                    "16": "number"
                },
                "cVar1": {
                    "5": "count",
                    "1": "bit_length",
                    "24": "bit_count"
                }
            }
        },
        "FUN_08005fc8": {
            "entrypoint": "0x08005fc8",
            "current_name": "initialize_data_08005fc8",
            "code": "\nvoid initialize_data_08005fc8(int flag,int value,undefined4 unused_param1,undefined4 unused_param2)\n\n{\n  if (flag != 1) {\n    return;\n  }\n  if (value == 0xffff) {\n    DAT_200004b8 = 6;\n    DAT_200004c4 = 0;\n    DAT_200004cc = 7;\n    DAT_200004d8 = 0;\n    DAT_200004e0 = 8;\n    DAT_200004ec = 0;\n    DAT_200004f4 = 9;\n    DAT_20000500 = 0;\n    DAT_20000508 = 10;\n    DAT_20000514 = 0;\n    DAT_2000051c = 0x17;\n    DAT_20000528 = 0;\n    DAT_20000530 = 0x17;\n    DAT_2000053c = 0;\n    DAT_20000544 = 0x17;\n    DAT_20000550 = 0;\n    DAT_20000558 = 0x17;\n    DAT_20000564 = 0;\n    DAT_2000056c = 0x17;\n    DAT_20000578 = 0;\n    DAT_20000580 = 0x28;\n    DAT_2000058c = 0;\n    DAT_20000594 = 0x28;\n    DAT_200005a0 = 0;\n    DAT_200005a8 = 0x28;\n    DAT_200005b4 = 0;\n    DAT_200005bc = 0x28;\n    DAT_200005c8 = 0;\n    DAT_200005d0 = 0x28;\n    DAT_200005dc = 0;\n    DAT_200005e4 = 0x28;\n    DAT_200005f0 = 0;\n    register_exit_function(0,&exit_handler,&DAT_20000000,&DAT_200004b8,unused_param2);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005fc8": "initialize_data_08005fc8",
                "param_1": "flag",
                "param_2": "value",
                "param_3": "unused_param1",
                "param_4": "unused_param2",
                "__aeabi_atexit": "register_exit_function",
                "LAB_08005fa0_1": "exit_handler"
            },
            "calling": [],
            "called": [
                "FUN_08006112"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08005fc8": {
                    "1": "initialize_memory",
                    "8": "initialize_parameters",
                    "2": "initialize_settings",
                    "18": "initialize_data"
                },
                "param_1": {
                    "15": "flag",
                    "1": "first_param",
                    "2": "input_flag",
                    "3": "condition",
                    "5": "status"
                },
                "param_2": {
                    "2": "input_value",
                    "1": "var2",
                    "23": "value"
                },
                "param_3": {
                    "1": "unused_param_1",
                    "5": "unused1",
                    "3": "unused",
                    "7": "unused_param1",
                    "4": "unused_param"
                },
                "param_4": {
                    "1": "unknown2",
                    "3": "param4",
                    "7": "unused_param2",
                    "4": "exit_function",
                    "2": "callback_function",
                    "5": "unused2"
                },
                "__aeabi_atexit": {
                    "9": "register_exit_function",
                    "1": "register_cleanup_func",
                    "5": "register_cleanup_function",
                    "2": "register_exit_handler"
                },
                "LAB_08005fa0_1": {
                    "5": "exit_handler",
                    "1": "exit_function_label",
                    "4": "cleanup_function"
                },
                "initializeSettings": {
                    "1": "initialize_settings"
                },
                "condition": {
                    "1": "condition"
                },
                "value": {
                    "1": "value"
                },
                "exitFuncPtr": {
                    "1": "exit_func_ptr"
                },
                "registerExitFunction": {
                    "1": "register_exit_function"
                },
                "exitFunction": {
                    "1": "exit_function"
                },
                "initializeData": {
                    "1": "initialize_data"
                },
                "registerExitHandler": {
                    "1": "register_exit_handler"
                },
                "exitHandler": {
                    "1": "exit_handler"
                }
            }
        },
        "FUN_080060d4": {
            "entrypoint": "0x080060d4",
            "current_name": "execute_function_080060d4",
            "code": "\nvoid execute_function_080060d4(int input)\n\n{\n  int pin_id;\n  \n  if (*(int *)(input + 8) != 0) {\n    (**(code **)(input + 0xc))();\n    return;\n  }\n  __throw_bad_function_call();\n  pin_id = get_pin_id();\n  if ((&DAT_200004c4)[pin_id * 5] != 0) {\n    execute_function_080060d4();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080060d4": "execute_function_080060d4",
                "param_1": "input",
                "iVar1": "pin_id"
            },
            "calling": [
                "FUN_080060e4"
            ],
            "called": [
                "FUN_08007090"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080060d4": {
                    "1": "execute_operation",
                    "2": "execute_or_throw",
                    "7": "process_function"
                },
                "param_1": {
                    "7": "input",
                    "2": "data",
                    "4": "input_parameter",
                    "3": "function_index",
                    "1": "func_param",
                    "5": "input_param"
                },
                "iVar1": {
                    "30": "pin_id",
                    "1": "index"
                },
                "FUN_08007090": {
                    "2": "perform_action",
                    "1": "execute_operation",
                    "3": "execute_sub_function"
                },
                "FUNC_PTR_08007090": {
                    "1": "do_something"
                },
                "DAT_200004c4": {
                    "1": "pin_array"
                }
            }
        },
        "FUN_080060e4": {
            "entrypoint": "0x080060e4",
            "current_name": "check_pin_and_call_operator_080060e4",
            "code": "\nvoid check_pin_and_call_operator_080060e4(void)\n\n{\n  int pin_id;\n  \n  pin_id = retrieve_pin_id();\n  if ((&DAT_200004c4)[pin_id * 5] != 0) {\n    call_operator();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080060e4": "check_pin_and_call_operator_080060e4",
                "iVar1": "pin_id",
                "get_pin_id": "retrieve_pin_id",
                "operator()": "call_operator",
                "operator()()": "call_operator()"
            },
            "calling": [
                "FUN_0800282c"
            ],
            "called": [
                "FUN_08005f8c",
                "FUN_080060d4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080060e4": {
                    "1": "run_function_if_pin_id_exists",
                    "2": "check_pin_and_invoke_operator",
                    "5": "check_and_call_operator",
                    "9": "check_pin_and_call_operator"
                },
                "iVar1": {
                    "1": "pin_index",
                    "21": "pin_id"
                },
                "FUN_08005f8c": {
                    "4": "check_pin_validity",
                    "1": "is_flag_set",
                    "3": "check_pin"
                },
                "FUN_080060d4": {
                    "1": "invoke_operator",
                    "3": "execute_operator",
                    "2": "call_operator",
                    "4": "perform_operation",
                    "6": "execute_operation"
                },
                "param_1": {
                    "11": "pin_id",
                    "1": "index"
                },
                "DAT_200004c4": {
                    "1": "pin_status_array"
                },
                "get_pin_id": {
                    "7": "retrieve_pin_id",
                    "1": "pin_id",
                    "5": "get_pin_id"
                },
                "&DAT_200004c4": {
                    "1": "pin_array",
                    "3": "pin_data_array"
                },
                "operator()": {
                    "1": "execute_function",
                    "3": "call_operator",
                    "2": "execute_operation"
                },
                "param_2": {
                    "1": "set_to_status"
                },
                "get_pin_id()": {
                    "1": "get_pin_id()"
                },
                "operator()()": {
                    "1": "call_operator()"
                },
                "uint param_1": {
                    "1": "pin_value"
                },
                "int param_1": {
                    "1": "operator_id"
                }
            }
        },
        "FUN_08006112": {
            "entrypoint": "0x08006112",
            "current_name": "register_exit_handler_08006112",
            "code": "\nvoid register_exit_handler_08006112(parameter input_value,parameter length)\n\n{\n  __cxa_atexit(length,input_value);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006112": "register_exit_handler_08006112",
                "param_1": "input_value",
                "param_2": "length",
                "undefined4": "parameter"
            },
            "calling": [
                "FUN_08005fc8"
            ],
            "called": [
                "FUN_08006158"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08006112": {
                    "7": "register_exit_function",
                    "4": "register_cleanup_function",
                    "3": "register_destructor",
                    "8": "register_exit_handler",
                    "1": "register_exit_callback",
                    "2": "initialize_exit_handler"
                },
                "param_1": {
                    "2": "input_data",
                    "4": "input_value",
                    "3": "input_parameter",
                    "1": "cleanup_function"
                },
                "param_2": {
                    "1": "exit_param",
                    "3": "data_size",
                    "4": "length",
                    "2": "value"
                },
                "FUN_08006158": {
                    "2": "calculate_result",
                    "1": "get_unsigned_long_long",
                    "3": "process_data",
                    "8": "calculate_checksum",
                    "5": "perform_operation"
                },
                "undefined4": {
                    "1": "parameter"
                },
                "longlong": {
                    "1": "modified_value"
                }
            }
        },
        "FUN_0800611c": {
            "entrypoint": "0x0800611c",
            "current_name": "print_assertion_error_0800611c",
            "code": "\nvoid print_assertion_error_0800611c(undefined4 file_name,undefined4 line_number,char *function_name,undefined4 assertion_message)\n\n{\n  undefined4 file_descriptor;\n  char *additional_info;\n  undefined8 abort_result;\n  undefined4 assertion_message_copy;\n  \n  file_descriptor = *(undefined4 *)(DAT_200000f8 + 0xc);\n  assertion_message_copy = assertion_message;\n  if (function_name == (char *)0x0) goto assertion_error_label;\n  additional_info = \", function: \";\n  do {\n    formatted_print(file_descriptor,\"assertion \\\"%s\\\" failed: file \\\"%s\\\", line %d%s%s\\n\",assertion_message,file_name,line_number,\n             additional_info,function_name,assertion_message_copy);\n    abort_result = abort_execution();\n    line_number = (undefined4)((ulonglong)abort_result >> 0x20);\n    file_descriptor = (undefined4)abort_result;\nassertion_error_label:\n    function_name = \"\";\n    additional_info = function_name;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_0800611c": "print_assertion_error_0800611c",
                "param_1": "file_name",
                "param_2": "line_number",
                "param_3": "function_name",
                "param_4": "assertion_message",
                "uVar1": "file_descriptor",
                "pcVar2": "additional_info",
                "uVar3": "abort_result",
                "uVar4": "assertion_message_copy",
                "LAB_08006140": "assertion_error_label",
                "fiprintf": "formatted_print",
                "abort": "abort_execution"
            },
            "calling": [
                "FUN_08005a68"
            ],
            "called": [
                "FUN_08006ac0",
                "FUN_08006174"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800611c": {
                    "2": "print_assertion_failure",
                    "1": "log_assertion_error",
                    "7": "print_assertion_failed_message",
                    "9": "print_assertion_error",
                    "6": "print_assertion_failed"
                },
                "param_1": {
                    "3": "filename",
                    "21": "file_name",
                    "7": "file"
                },
                "param_2": {
                    "24": "line_number",
                    "6": "line"
                },
                "param_3": {
                    "1": "msg",
                    "3": "assertion",
                    "18": "function_name",
                    "2": "function"
                },
                "param_4": {
                    "1": "message",
                    "12": "assertion_message",
                    "6": "assertion",
                    "3": "function"
                },
                "uVar1": {
                    "7": "file_pointer",
                    "1": "stream_ptr",
                    "4": "output_stream",
                    "9": "file_descriptor",
                    "3": "file_handle"
                },
                "pcVar2": {
                    "1": "function_message",
                    "4": "additional_message",
                    "2": "prefix",
                    "8": "additional_info"
                },
                "uVar3": {
                    "1": "abort_output",
                    "18": "abort_result",
                    "2": "abort_return_value",
                    "7": "result"
                },
                "uVar4": {
                    "3": "function_param",
                    "7": "assertion_message_copy",
                    "1": "assertion_expression2",
                    "2": "assertion_message_2",
                    "4": "assertion_copy"
                },
                "param_2_loop": {
                    "1": "line"
                },
                "param_3_loop": {
                    "1": "function_name"
                },
                "pcVar2_loop": {
                    "1": "extra_string"
                },
                "LAB_08006140": {
                    "1": "assertion_error_label"
                },
                "fiprintf": {
                    "1": "formatted_print"
                },
                "abort": {
                    "1": "abort_execution"
                }
            }
        },
        "FUN_08006158": {
            "entrypoint": "0x08006158",
            "current_name": "shift_left_by32_bits_08006158",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08006160) */\n\nlonglong shift_left_by32_bits_08006158(undefined4 param1,uint value)\n\n{\n  return (result)value << 0x20;\n}\n\n",
            "renaming": {
                "FUN_08006158": "shift_left_by32_bits_08006158",
                "param_1": "param1",
                "param_2": "value",
                "ulonglong": "result"
            },
            "calling": [
                "FUN_08006112"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08006158": {
                    "1": "shift_left_u_int64",
                    "4": "shift_left_by32_bits",
                    "3": "shift_left64_bits",
                    "2": "left_shift_uint64"
                },
                "param_1": {
                    "2": "param",
                    "1": "num_bits",
                    "3": "input1"
                },
                "param_2": {
                    "1": "value_to_shift_left",
                    "2": "param2",
                    "3": "value_to_shift",
                    "8": "value",
                    "5": "shift_amount"
                },
                "param_3": {
                    "1": "param3"
                },
                "ulonglong": {
                    "1": "result"
                }
            }
        },
        "FUN_08006174": {
            "entrypoint": "0x08006174",
            "current_name": "print_data_08006174",
            "code": "\nvoid print_data_08006174(undefined4 format_string,undefined4 arg1,undefined4 arg2,undefined4 arg3)\n\n{\n  undefined4 arg2_copy;\n  undefined4 arg3_copy;\n  \n  arg2_copy = arg2;\n  arg3_copy = arg3;\n  formatted_print(DAT_200000f8,format_string,arg1,&arg2_copy,format_string,&arg2_copy);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006174": "print_data_08006174",
                "param_1": "format_string",
                "param_2": "arg1",
                "param_3": "arg2",
                "param_4": "arg3",
                "uStack_8": "arg2_copy",
                "uStack_4": "arg3_copy",
                "_vfiprintf_r": "formatted_print"
            },
            "calling": [
                "FUN_0800611c"
            ],
            "called": [
                "FUN_08006394"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08006174": {
                    "1": "print_data_from_stack",
                    "5": "print_stack_values",
                    "9": "print_data",
                    "2": "print_parameters"
                },
                "param_1": {
                    "1": "format",
                    "28": "format_string"
                },
                "param_2": {
                    "2": "param1",
                    "1": "param_2",
                    "19": "arg1"
                },
                "param_3": {
                    "1": "value_2",
                    "17": "arg2"
                },
                "param_4": {
                    "1": "arg2",
                    "17": "arg3"
                },
                "uStack_8": {
                    "1": "param_value2_copy",
                    "3": "arg4",
                    "7": "arg2_copy"
                },
                "uStack_4": {
                    "1": "param_value3_copy",
                    "3": "arg5",
                    "7": "arg3_copy"
                },
                "_vfiprintf_r": {
                    "1": "print_formatted_string"
                },
                "FUN_08006394": {
                    "1": "process_data"
                }
            }
        },
        "FUN_08006198": {
            "entrypoint": "0x08006198",
            "current_name": "execute_functions_08006198",
            "code": "\nvoid execute_functions_08006198(void)\n\n{\n  int index;\n  \n  for (index = 0; index != 0; index = index + 1) {\n    (*(code *)(&DAT_08007944)[index])();\n  }\n  _init();\n  for (index = 0; index != 10; index = index + 1) {\n    (*(code *)(&DAT_08007944)[index])();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006198": "execute_functions_08006198",
                "iVar1": "index"
            },
            "calling": [
                "FUN_08001be8"
            ],
            "called": [
                "FUN_08005f5e",
                "FUN_08007328"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08006198": {
                    "1": "execute_all_functions",
                    "4": "execute_sub_functions",
                    "23": "execute_functions"
                },
                "FUN_08005f5e": {
                    "2": "print_hello",
                    "1": "perform_operation"
                },
                "FUNC_08007328": {
                    "1": "execute_tasks",
                    "2": "function_2",
                    "3": "initialize_data"
                },
                "iVar1": {
                    "1": "sub_function_index",
                    "5": "counter",
                    "18": "index"
                },
                "FUM_08005f5e": {
                    "1": "execute_first_function"
                }
            }
        },
        "FUN_080061e0": {
            "entrypoint": "0x080061e0",
            "current_name": "fill_memory_080061e0",
            "code": "\nvoid fill_memory_080061e0(undefined *destination,undefined value,int size)\n\n{\n  undefined *end_address;\n  \n  end_address = destination + size;\n  for (; destination != end_address; destination = destination + 1) {\n    *destination = value;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080061e0": "fill_memory_080061e0",
                "param_1": "destination",
                "param_2": "value",
                "param_3": "size",
                "puVar1": "end_address"
            },
            "calling": [
                "FUN_08006c40",
                "FUN_08004a4c",
                "FUN_08006d14",
                "FUN_08006c88"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080061e0": {
                    "2": "fill_memory_with_byte",
                    "1": "fill_with_constant",
                    "18": "fill_memory",
                    "3": "memset"
                },
                "param_1": {
                    "15": "destination",
                    "3": "array",
                    "9": "memory",
                    "1": "memory_pointer",
                    "2": "dest"
                },
                "param_2": {
                    "1": "constant",
                    "28": "value"
                },
                "param_3": {
                    "2": "count",
                    "15": "size",
                    "11": "length",
                    "1": "size_to_fill"
                },
                "puVar1": {
                    "1": "end",
                    "2": "end_pointer",
                    "8": "end_address",
                    "3": "end_of_memory"
                },
                "*param_1": {
                    "1": "current"
                }
            }
        },
        "FUN_080061f0": {
            "entrypoint": "0x080061f0",
            "current_name": "allocate_memory_080061f0",
            "code": "\nvoid allocate_memory_080061f0(undefined4 *result,int size,undefined4 param_3,undefined4 param_4)\n\n{\n  int **extra_output;\n  int **current_block;\n  int **ptr2;\n  int *temp;\n  int **ptr4;\n  int **new_block;\n  \n  if (size == 0) {\n    return;\n  }\n  new_block = (int **)(size + -4);\n  if (*(int *)(size + -4) < 0) {\n    new_block = (int **)((int)new_block + *(int *)(size + -4));\n  }\n  lock_memory();\n  ptr2 = (int **)&DAT_200005f8;\n  if (DAT_200005f8 == (int **)0x0) {\n    new_block[1] = (int *)0x0;\n    current_block = extra_output;\n    DAT_200005f8 = new_block;\n  }\n  else {\n    ptr2 = DAT_200005f8;\n    if (new_block < DAT_200005f8) {\n      current_block = (int **)*new_block;\n      ptr2 = (int **)((int)new_block + (int)current_block);\n      if (DAT_200005f8 == ptr2) {\n        temp = *DAT_200005f8;\n        DAT_200005f8 = (int **)DAT_200005f8[1];\n        ptr2 = (int **)((int)temp + (int)current_block);\n        *new_block = (int *)ptr2;\n      }\n      new_block[1] = (int *)DAT_200005f8;\n      DAT_200005f8 = new_block;\n    }\n    else {\n      do {\n        ptr4 = ptr2;\n        ptr2 = (int **)ptr4[1];\n        if (ptr2 == (int **)0x0) break;\n      } while (ptr2 <= new_block);\n      current_block = (int **)*ptr4;\n      if ((int **)((int)ptr4 + (int)current_block) == new_block) {\n        current_block = (int **)((int)current_block + (int)*new_block);\n        *ptr4 = (int *)current_block;\n        if (ptr2 == (int **)((int)ptr4 + (int)current_block)) {\n          temp = *ptr2;\n          ptr2 = (int **)ptr2[1];\n          current_block = (int **)((int)current_block + (int)temp);\n          *ptr4 = (int *)current_block;\n          ptr4[1] = (int *)ptr2;\n        }\n      }\n      else if (new_block < (int **)((int)ptr4 + (int)current_block)) {\n        *result = 0xc;\n      }\n      else {\n        current_block = (int **)((int)new_block + (int)*new_block);\n        if (ptr2 == current_block) {\n          temp = *ptr2;\n          ptr2 = (int **)ptr2[1];\n          current_block = (int **)((int)temp + (int)*new_block);\n          *new_block = (int *)current_block;\n        }\n        new_block[1] = (int *)ptr2;\n        ptr4[1] = (int *)new_block;\n      }\n    }\n  }\n  unlock_memory(result,current_block,ptr2,param_4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080061f0": "allocate_memory_080061f0",
                "param_1": "result",
                "param_2": "size",
                "extraout_r1": "extra_output",
                "ppiVar1": "current_block",
                "ppiVar2": "ptr2",
                "piVar3": "temp",
                "ppiVar4": "ptr4",
                "ppiVar5": "new_block",
                "__malloc_lock": "lock_memory",
                "__malloc_unlock": "unlock_memory"
            },
            "calling": [
                "FUN_080069e4",
                "FUN_08006ac0"
            ],
            "called": [
                "FUN_08006eae",
                "FUN_08006eac"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080061f0": {
                    "1": "initialize_dynamic_memory",
                    "2": "allocate_and_lock_memory",
                    "17": "allocate_memory"
                },
                "param_1": {
                    "2": "lock",
                    "1": "block_ptr",
                    "11": "result",
                    "3": "output_buffer"
                },
                "param_2": {
                    "1": "length",
                    "27": "size"
                },
                "param_3": {
                    "1": "input1",
                    "4": "arg3",
                    "7": "param_3",
                    "2": "unused_param_1"
                },
                "param_4": {
                    "2": "unused_param_2",
                    "1": "arg2",
                    "4": "arg4",
                    "7": "param_4"
                },
                "extraout_r1": {
                    "1": "extra_output_r1",
                    "2": "extra_out",
                    "5": "extra_output"
                },
                "ppiVar1": {
                    "2": "pointer_var1",
                    "1": "temp_variable_1",
                    "3": "temp_ptr1",
                    "4": "current_block"
                },
                "ppiVar2": {
                    "2": "temp_ptr_2",
                    "1": "var_5",
                    "3": "temp_ptr2"
                },
                "piVar3": {
                    "1": "pointer_value",
                    "2": "temp_int_ptr",
                    "6": "temp",
                    "4": "temp_var"
                },
                "ppiVar4": {
                    "1": "previous_chunk",
                    "3": "ptr4",
                    "2": "temp_ptr_3"
                },
                "ppiVar5": {
                    "1": "temp_ptr_4",
                    "5": "new_block",
                    "2": "temp_ptr4",
                    "3": "ptr5"
                },
                "__malloc_lock": {
                    "1": "lock",
                    "2": "lock_memory_allocation"
                },
                "__malloc_unlock": {
                    "1": "unlock",
                    "2": "unlock_memory_allocation"
                },
                "DAT_200005f8": {
                    "1": "data_pointer",
                    "3": "head"
                },
                "FUNC_08006eae": {
                    "1": "sub_function1"
                },
                "FUNC_08006eac": {
                    "1": "function_b"
                }
            }
        },
        "FUN_08006288": {
            "entrypoint": "0x08006288",
            "current_name": "allocate_memory_08006288",
            "code": "\nuint allocate_memory_08006288(undefined4 *size,uint size)\n\n{\n  uint *current_block;\n  int remaining_space;\n  uint *previous_block;\n  uint block_difference;\n  uint *new_block;\n  uint allocated_size;\n  \n  allocated_size = (size + 3 & 0xfffffffc) + 8;\n  if (allocated_size < 0xc) {\n    allocated_size = 0xc;\n  }\n  if (((int)allocated_size < 0) || (allocated_size < size)) {\n    *size = 0xc;\n  }\n  else {\n    lock_memory();\n    current_block = DAT_200005f8;\n    new_block = DAT_200005f8;\n    while (previous_block = current_block, previous_block != (uint *)0x0) {\n      block_difference = *previous_block - allocated_size;\n      if (-1 < (int)block_difference) {\n        if (block_difference < 0xc) {\n          if (new_block == previous_block) {\n            current_block = (uint *)pu_var5_next;\n            DAT_200005f8 = current_block;\n          }\n          else {\n            current_block = (uint *)pu_var3_next;\n          }\n          if (new_block != previous_block) {\n            pu_var5_next = (uint)current_block;\n            new_block = previous_block;\n          }\n        }\n        else {\n          *previous_block = block_difference;\n          *(uint *)((int)previous_block + block_difference) = allocated_size;\n          new_block = (uint *)((int)previous_block + block_difference);\n        }\n        goto LAB_080062ec;\n      }\n      new_block = previous_block;\n      current_block = (uint *)pu_var3_next;\n    }\n    if (DAT_200005fc == 0) {\n      DAT_200005fc = increase_heap_size;\n    }\n    current_block = (uint *)get_memory(size,allocated_size);\n    if ((current_block != (uint *)0xffffffff) &&\n       ((new_block = (uint *)((int)current_block + 3U & 0xfffffffc), current_block == new_block ||\n        (remaining_space = get_memory(size,(int)new_block - (int)current_block), remaining_space != -1)))) {\n      *new_block = allocated_size;\nLAB_080062ec:\n      unlock_memory(size);\n      allocated_size = (int)new_block + 0xbU & 0xfffffff8;\n      remaining_space = allocated_size - (int)(new_block + 1);\n      if (remaining_space != 0) {\n        *(int *)((int)new_block + remaining_space) = -remaining_space;\n        return allocated_size;\n      }\n      return allocated_size;\n    }\n    *size = 0xc;\n    unlock_memory(size);\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08006288": "allocate_memory_08006288",
                "param_1": "size",
                "param_2": "size",
                "uVar6": "allocated_size",
                "puVar1": "current_block",
                "iVar2": "remaining_space",
                "puVar3": "previous_block",
                "puVar5": "new_block",
                "uVar4": "block_difference",
                "puVar3[1]": "pu_var3_next",
                "puVar5[1]": "pu_var5_next",
                "__malloc_lock": "lock_memory",
                "_sbrk_r": "get_memory",
                "__malloc_unlock": "unlock_memory",
                "_sbrk_r(param_1)": "increase_heap_size"
            },
            "calling": [
                "FUN_08006e10",
                "FUN_08006c88"
            ],
            "called": [
                "FUN_08006eae",
                "FUN_08006eac",
                "FUN_08006920"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08006288": {
                    "1": "allocate_and_lock_memory",
                    "26": "allocate_memory",
                    "3": "allocate_memory_block"
                },
                "param_1": {
                    "2": "size_pointer",
                    "1": "buffer",
                    "7": "size_ptr",
                    "9": "size"
                },
                "param_2": {
                    "3": "requested_size",
                    "9": "alignment",
                    "18": "size",
                    "1": "desired_size"
                },
                "uVar6": {
                    "1": "memory_offset",
                    "2": "total_size",
                    "4": "adjusted_size",
                    "5": "aligned_size",
                    "8": "allocated_size"
                },
                "puVar1": {
                    "1": "current",
                    "23": "current_block",
                    "2": "free_block",
                    "3": "current_chunk"
                },
                "iVar2": {
                    "1": "remainder",
                    "6": "remaining_size",
                    "12": "remaining_space",
                    "5": "offset",
                    "2": "difference",
                    "3": "block_size"
                },
                "puVar3": {
                    "3": "current_block",
                    "1": "next_chunk",
                    "18": "previous_block",
                    "2": "previous_chunk"
                },
                "puVar5": {
                    "2": "previous_block_next",
                    "1": "last_chunk",
                    "5": "last_block",
                    "3": "previous_block",
                    "11": "new_block"
                },
                "uVar4": {
                    "4": "block_diff",
                    "1": "block_size_diff",
                    "6": "difference",
                    "2": "block_size"
                },
                "DATA_200005f8": {
                    "1": "free_list"
                },
                "DATA_200005fc": {
                    "1": "heap_start"
                },
                "DAT_200005f8": {
                    "1": "memory_pool",
                    "2": "head_block",
                    "3": "first_block"
                },
                "puVar1[1]": {
                    "1": "pu_var1_next"
                },
                "puVar3[1]": {
                    "1": "pu_var3_next"
                },
                "puVar5[1]": {
                    "1": "pu_var5_next"
                },
                "DAT_200005fc": {
                    "1": "brk_pointer",
                    "2": "brk_ptr"
                },
                "__malloc_lock": {
                    "1": "lock_malloc",
                    "2": "lock_memory"
                },
                "_sbrk_r": {
                    "1": "get_memory"
                },
                "__malloc_unlock": {
                    "2": "unlock_memory",
                    "1": "unlock_malloc"
                },
                "FUNC_08006eae": {
                    "1": "function_one"
                },
                "FUNC_08006eac": {
                    "1": "function_two"
                },
                "FUN_08006920": {
                    "1": "function3"
                },
                "_sbrk_r(param_1)": {
                    "1": "increase_heap_size"
                }
            }
        },
        "FUN_08006344": {
            "entrypoint": "0x08006344",
            "current_name": "process_input_08006344",
            "code": "\nuint process_input_08006344(int input_param,byte byte_value,byte **data_ptr)\n\n{\n  int index;\n  byte *temp_var2;\n  byte *temp_var3;\n  uint result;\n  \n  temp_var2 = data_ptr[2] + -1;\n  data_ptr[2] = temp_var2;\n  if ((-1 < (int)temp_var2) ||\n     (((int)data_ptr[6] <= (int)temp_var2 && (temp_var2 = (byte *)(uint)byte_value, temp_var2 != (byte *)0xa))))\n  {\n    temp_var2 = *data_ptr;\n    *data_ptr = temp_var2 + 1;\n    *temp_var2 = byte_value;\n    return (uint)byte_value;\n  }\n  if ((input_param != 0) && (*(int *)(input_param + 0x18) == 0)) {\n    initialize_s;\n  }\n  if (data_ptr == (byte **)&DAT_08007904) {\n    data_ptr = *(byte ***)(input_param + 4);\n  }\n  else if (data_ptr == (byte **)&DAT_08007924) {\n    data_ptr = *(byte ***)(input_param + 8);\n  }\n  else if (data_ptr == (byte **)&DAT_080078e4) {\n    data_ptr = *(byte ***)(input_param + 0xc);\n  }\n  data_ptr[2] = data_ptr[6];\n  temp_var3 = (byte *)(uint)*(ushort *)(data_ptr + 3);\n  index = (int)temp_var3 << 0x1c;\n  if (((index < 0) && (temp_var3 = data_ptr[4], temp_var3 != (byte *)0x0)) ||\n     (index = setup_r(input_param,data_ptr,index,temp_var3,temp_var2), index == 0)) {\n    result = (uint)byte_value;\n    index = (int)*data_ptr - (int)data_ptr[4];\n    if ((index < (int)data_ptr[5]) || (index = flush_buffer(input_param,data_ptr), index == 0)) {\n      data_ptr[2] = data_ptr[2] + -1;\n      temp_var2 = *data_ptr;\n      *data_ptr = temp_var2 + 1;\n      *temp_var2 = byte_value;\n      if ((byte *)(index + 1) != data_ptr[5]) {\n        if (-1 < (int)((uint)*(ushort *)(data_ptr + 3) << 0x1f)) {\n          return result;\n        }\n        if (result != 10) {\n          return result;\n        }\n      }\n      index = flush_buffer(input_param,data_ptr);\n      if (index == 0) {\n        return result;\n      }\n    }\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_08006344": "process_input_08006344",
                "param_1": "input_param",
                "param_2": "byte_value",
                "param_3": "data_ptr",
                "iVar1": "index",
                "pbVar2": "temp_var2",
                "pbVar3": "temp_var3",
                "uVar4": "result",
                "__sinit": "initialize",
                "__swsetup_r": "setup_r",
                "_fflush_r": "flush_buffer",
                "__sinit()": "initialize_s"
            },
            "calling": [
                "FUN_08006370"
            ],
            "called": [
                "FUN_08006be0",
                "FUN_080069e4",
                "FUN_08006cb4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08006344": {
                    "1": "parse_input",
                    "12": "process_input",
                    "6": "process_data",
                    "3": "process_byte",
                    "2": "process_input_byte"
                },
                "param_1": {
                    "1": "input1",
                    "4": "input_data",
                    "2": "param1",
                    "3": "input_ptr",
                    "5": "input_param"
                },
                "param_2": {
                    "1": "byte_param",
                    "3": "byte_to_process",
                    "5": "input_byte",
                    "2": "byte_to_write",
                    "10": "byte_value"
                },
                "param_3": {
                    "1": "input_pointer",
                    "4": "byte_ptr_ptr",
                    "3": "byte_array",
                    "5": "data_ptr",
                    "2": "input_data"
                },
                "iVar1": {
                    "1": "result",
                    "2": "status",
                    "4": "temp_var",
                    "3": "int_value",
                    "9": "index",
                    "6": "temp_var1"
                },
                "pbVar2": {
                    "1": "temp_pointer",
                    "2": "temp_ptr",
                    "4": "temp_var2",
                    "3": "ptr1"
                },
                "pbVar3": {
                    "1": "temp_pointer2",
                    "4": "temp_byte",
                    "2": "temp_byte_ptr2",
                    "3": "temp_ptr_2"
                },
                "uVar4": {
                    "8": "return_value",
                    "3": "processed_byte",
                    "1": "output",
                    "18": "result"
                },
                "__sinit": {
                    "1": "initialize_globals",
                    "5": "initialize"
                },
                "DAT_08007904": {
                    "1": "buffer_type_1"
                },
                "DAT_08007924": {
                    "1": "buffer_type_2"
                },
                "DAT_080078e4": {
                    "1": "data3"
                },
                "__swsetup_r": {
                    "1": "sub_func1",
                    "3": "setup_r"
                },
                "_fflush_r": {
                    "3": "flush_r",
                    "1": "sub_func2"
                },
                "FUN_08006be0": {
                    "1": "sub_function_1"
                },
                "FUN_080069e4": {
                    "1": "sub_function_2"
                },
                "FUN_08006cb4": {
                    "1": "sub_function_3"
                },
                "__sinit()": {
                    "1": "initialize_s"
                },
                "__swsetup_r()": {
                    "1": "setup_r"
                },
                "_fflush_r()": {
                    "1": "flush_r"
                }
            }
        },
        "FUN_08006370": {
            "entrypoint": "0x08006370",
            "current_name": "write_to_stream_08006370",
            "code": "\nint write_to_stream_08006370(undefined4 stream,undefined4 character,undefined *buffer,int length)\n\n{\n  int result;\n  undefined *end_of_buffer;\n  int remaining_length;\n  \n  end_of_buffer = buffer + length;\n  remaining_length = length;\n  do {\n    if (buffer == end_of_buffer) {\n      return 0;\n    }\n    result = write_byte_to_stream(stream,*buffer,character,length,remaining_length);\n    length = result + 1;\n    buffer = buffer + 1;\n  } while (length != 0);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08006370": "write_to_stream_08006370",
                "param_1": "stream",
                "param_2": "character",
                "param_3": "buffer",
                "param_4": "length",
                "iVar1": "result",
                "puVar2": "end_of_buffer",
                "iVar3": "remaining_length",
                "__sfputc_r": "write_byte_to_stream"
            },
            "calling": [
                "FUN_08006394"
            ],
            "called": [
                "FUN_08006344"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08006370": {
                    "1": "write_buffer",
                    "15": "write_to_stream",
                    "3": "write_data",
                    "2": "write_to_file"
                },
                "param_1": {
                    "21": "stream",
                    "1": "output_stream",
                    "5": "file_descriptor",
                    "3": "file"
                },
                "param_2": {
                    "1": "char",
                    "16": "character",
                    "3": "byte_to_write",
                    "4": "buffer"
                },
                "param_3": {
                    "1": "source",
                    "9": "data",
                    "2": "input_string",
                    "13": "buffer"
                },
                "param_4": {
                    "1": "input_string_length",
                    "4": "buffer_size",
                    "5": "data_length",
                    "3": "size",
                    "13": "length"
                },
                "iVar1": {
                    "1": "write_count",
                    "2": "status",
                    "6": "write_result",
                    "19": "result"
                },
                "puVar2": {
                    "3": "end_ptr",
                    "1": "end_position",
                    "11": "end_of_buffer",
                    "4": "end_of_data",
                    "2": "end"
                },
                "iVar3": {
                    "1": "current_position",
                    "4": "remaining_size",
                    "9": "remaining_length",
                    "2": "current_size",
                    "5": "current_length",
                    "3": "remaining_data_length"
                },
                "__sfputc_r": {
                    "1": "write_byte_to_stream"
                }
            }
        },
        "FUN_08006394": {
            "entrypoint": "0x08006394",
            "current_name": "print_formatted_string_08006394",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08006568) */\n\nint print_formatted_string_08006394(int stream,undefined4 *format,byte *args,int *count)\n\n{\n  int result;\n  int *arg;\n  bool is_digit;\n  byte *current_char;\n  byte *next_char;\n  int unaff_r9;\n  int temp;\n  int *arg_list;\n  uint flags;\n  int precision;\n  undefined4 width;\n  int width;\n  int total_chars;\n  byte conversion_specifier;\n  undefined space_flag;\n  undefined plus_flag;\n  undefined flag;\n  undefined4 length_modifier;\n  \n  arg_list = count;\n  if ((stream != 0) && (*(int *)(stream + 0x18) == 0)) {\n    initialize_stdio;\n  }\n  if (format == &DAT_08007904) {\n    format = *(undefined4 **)(stream + 4);\n  }\n  else if (format == (undefined4 *)&DAT_08007924) {\n    format = *(undefined4 **)(stream + 8);\n  }\n  else if (format == (undefined4 *)&DAT_080078e4) {\n    format = *(undefined4 **)(stream + 0xc);\n  }\n  if (((-1 < (int)((uint)*(ushort *)(format + 3) << 0x1c)) || (format[4] == 0)) &&\n     (temp = setup_stream(stream,format), temp != 0)) {\n    return -1;\n  }\n  total_chars = 0;\n  space_flag = 0x20;\n  plus_flag = 0x30;\n  current_char = args;\nLAB_080063d6:\n  next_char = current_char;\n  if (*next_char != 0) goto LAB_0800648c;\n  goto LAB_080063e0;\nLAB_0800648c:\n  current_char = next_char + 1;\n  if (*next_char != 0x25) goto LAB_080063d6;\nLAB_080063e0:\n  temp = (int)next_char - (int)args;\n  if (temp != 0) {\n    result = puts_to_stream(stream,format,args,temp);\n    if (result == -1) {\nLAB_08006580:\n      if ((int)((uint)*(ushort *)(format + 3) << 0x19) < 0) {\n        return -1;\n      }\n      return total_chars;\n    }\n    total_chars = total_chars + temp;\n  }\n  if (*next_char == 0) goto LAB_08006580;\n  flags = 0;\n  width = 0;\n  precision = -1;\n  width = 0;\n  flag = 0;\n  length_modifier = 0;\n  current_char = next_char + 1;\n  while( true ) {\n    temp = mem_char(\"#-0+ \",*current_char);\n    args = current_char + 1;\n    if (temp == 0) break;\n    flags = 1 << (temp + 0xf7ff8750U & 0xff) | flags;\n    current_char = args;\n  }\n  if ((int)(flags << 0x1b) < 0) {\n    flag = 0x20;\n  }\n  if ((int)(flags << 0x1c) < 0) {\n    flag = 0x2b;\n  }\n  if (*current_char == 0x2a) {\n    arg = arg_list + 1;\n    temp = *arg_list;\n    arg_list = arg;\n    if (temp < 0) {\n      width = -temp;\n      flags = flags | 2;\n      goto LAB_080064be;\n    }\n  }\n  else {\n    is_digit = false;\n    temp = width;\n    args = current_char;\n    while( true ) {\n      if (9 < *args - 0x30) break;\n      temp = temp * 10 + (*args - 0x30);\n      is_digit = true;\n      args = args + 1;\n    }\n    if (!is_digit) goto LAB_080064be;\n  }\n  width = temp;\nLAB_080064be:\n  if (*args == 0x2e) {\n    if (args[1] == 0x2a) {\n      args = args + 2;\n      arg = arg_list + 1;\n      precision = *arg_list;\n      arg_list = arg;\n      if (precision < 0) {\n        precision = -1;\n      }\n    }\n    else {\n      is_digit = false;\n      temp = 0;\n      precision = 0;\n      while( true ) {\n        args = args + 1;\n        if (9 < *args - 0x30) break;\n        temp = temp * 10 + (*args - 0x30);\n        is_digit = true;\n      }\n      if (is_digit) {\n        precision = temp;\n      }\n    }\n  }\n  temp = mem_char(&DAT_080078b6,*args,3);\n  if (temp != 0) {\n    args = args + 1;\n    flags = flags | 0x40 << (temp + 0xf7ff874aU & 0xff);\n  }\n  conversion_specifier = *args;\n  args = args + 1;\n  temp = mem_char(\"efgEFG\",conversion_specifier,6);\n  if (temp == 0) {\n    unaff_r9 = printf_integer(stream,&flags,format,0x8006371,&arg_list);\n    if (unaff_r9 == -1) goto LAB_08006580;\n  }\n  else {\n    arg_list = (int *)(((int)arg_list + 7U & 0xfffffff8) + 8);\n  }\n  total_chars = total_chars + unaff_r9;\n  current_char = args;\n  goto LAB_080063d6;\n}\n\n",
            "renaming": {
                "FUN_08006394": "print_formatted_string_08006394",
                "param_1": "stream",
                "param_2": "format",
                "param_3": "args",
                "param_4": "count",
                "iVar1": "result",
                "piVar2": "arg",
                "bVar3": "is_digit",
                "pbVar4": "current_char",
                "pbVar5": "next_char",
                "iVar6": "temp",
                "local_8c": "arg_list",
                "local_88": "flags",
                "local_84": "precision",
                "local_80": "width",
                "local_7c": "width",
                "local_74": "total_chars",
                "local_70": "conversion_specifier",
                "local_6f": "space_flag",
                "local_6e": "plus_flag",
                "local_45": "flag",
                "local_30": "length_modifier",
                "__sinit()": "initialize_stdio",
                "memchr": "mem_char",
                "__sinit": "initialize",
                "__swsetup_r": "setup_stream",
                "__sfputs_r": "puts_to_stream",
                "_printf_i": "printf_integer"
            },
            "calling": [
                "FUN_080068f0",
                "FUN_08006174"
            ],
            "called": [
                "FUN_08006e90",
                "FUN_080066b0",
                "FUN_080069e4",
                "FUN_08006370",
                "FUN_08006cb4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08006394": {
                    "1": "print_formatted",
                    "2": "print_formatted_text",
                    "8": "print_formatted_string",
                    "3": "improved_printf"
                },
                "param_1": {
                    "1": "file",
                    "15": "stream",
                    "4": "format_string",
                    "2": "output_stream"
                },
                "param_2": {
                    "1": "arguments",
                    "3": "format_string",
                    "8": "format_specifier",
                    "13": "format"
                },
                "param_3": {
                    "1": "output_buffer",
                    "6": "format_string",
                    "3": "arguments",
                    "2": "string"
                },
                "param_4": {
                    "1": "output_length",
                    "3": "arg_list",
                    "4": "length",
                    "2": "bytes_written"
                },
                "iVar1": {
                    "1": "fwrite_result",
                    "2": "status",
                    "27": "result"
                },
                "piVar2": {
                    "3": "ptr",
                    "1": "p_var",
                    "2": "arg_ptr",
                    "4": "arg"
                },
                "bVar3": {
                    "5": "is_digit",
                    "3": "is_num",
                    "2": "digit_found",
                    "1": "is_integer"
                },
                "pbVar4": {
                    "1": "p",
                    "18": "current_char",
                    "5": "ptr"
                },
                "pbVar5": {
                    "1": "end",
                    "14": "next_char",
                    "2": "ptr"
                },
                "unaff_r9": {
                    "1": "fallback",
                    "4": "unaff_r9",
                    "2": "temp_var"
                },
                "iVar6": {
                    "1": "var2",
                    "11": "temp",
                    "5": "temp_var",
                    "2": "value"
                },
                "local_8c": {
                    "1": "format_argument_position",
                    "6": "arg_list",
                    "4": "arg_ptr",
                    "2": "arg_pointer"
                },
                "local_88": {
                    "3": "flag",
                    "1": "format_flags",
                    "26": "flags"
                },
                "local_84": {
                    "7": "width",
                    "1": "field_width",
                    "23": "precision"
                },
                "local_80": {
                    "1": "prefix_string",
                    "9": "width",
                    "2": "size",
                    "5": "precision"
                },
                "local_7c": {
                    "1": "int_argument",
                    "8": "width",
                    "6": "arg_width",
                    "2": "precision",
                    "5": "field_width"
                },
                "local_74": {
                    "2": "output_length",
                    "3": "total_length",
                    "7": "total_chars",
                    "1": "total_bytes_written"
                },
                "local_70": {
                    "3": "conversion",
                    "8": "specifier",
                    "1": "current_specifier",
                    "5": "conversion_char",
                    "13": "conversion_specifier"
                },
                "local_6f": {
                    "2": "space_pad",
                    "1": "flag_1",
                    "3": "space",
                    "19": "space_flag"
                },
                "local_6e": {
                    "2": "flag_plus",
                    "3": "plus",
                    "19": "plus_flag",
                    "1": "zero_pad"
                },
                "local_45": {
                    "7": "flag",
                    "1": "flag_hash",
                    "2": "prefix",
                    "3": "zero_flag"
                },
                "local_30": {
                    "1": "temp_length",
                    "3": "length_modifier",
                    "2": "arg_count"
                },
                "__sinit()": {
                    "1": "initialize_stdio"
                },
                "__swsetup_r()": {
                    "1": "setup_wide_stream"
                },
                "__sfputs_r()": {
                    "1": "puts_to_stream"
                },
                "memchr()": {
                    "1": "find_char"
                },
                "_printf_i()": {
                    "1": "print_integer"
                },
                "F_UN_08006394": {
                    "1": "process_format_string"
                },
                "memchr": {
                    "1": "mem_char"
                },
                "__sinit": {
                    "2": "initialize",
                    "1": "__sinit"
                },
                "__swsetup_r": {
                    "1": "setup_stream"
                },
                "__sfputs_r": {
                    "1": "puts_to_stream"
                },
                "_printf_i": {
                    "1": "interpret_format_specifier"
                },
                "&DAT_08007904": {
                    "1": "constant_dat_08007904"
                },
                "&DAT_08007924": {
                    "1": "default_format_specifier2"
                },
                "&DAT_080078e4": {
                    "1": "default_format_specifier3"
                },
                "FUN_08006e90": {
                    "1": "find_conversion_specifier"
                },
                "FUN_080066b0": {
                    "1": "process_format_specifier"
                },
                "FUN_080069e4": {
                    "1": "convert_arg_to_string"
                },
                "FUN_08006370": {
                    "1": "write_to_stream"
                },
                "FUN_08006cb4": {
                    "1": "handle_error"
                },
                "&DAT_080078b6": {
                    "1": "constant_dat_080078b6"
                }
            }
        },
        "FUN_080065c0": {
            "entrypoint": "0x080065c0",
            "current_name": "process_data_080065c0",
            "code": "\nundefined4\nprocess_data_080065c0(undefined4 input,uint *data,uint *output,undefined4 param,code *callback)\n\n{\n  int index;\n  int result;\n  uint max_value;\n  uint offset;\n  bool condition;\n  \n  max_value = data[4];\n  if ((int)data[4] < (int)data[2]) {\n    max_value = data[2];\n  }\n  *output = max_value;\n  if (*(char *)((int)data + 0x43) != '\\0') {\n    *output = max_value + 1;\n  }\n  if ((int)(*data << 0x1a) < 0) {\n    *output = *output + 2;\n  }\n  if ((*data & 6) == 0) {\n    for (index = 0; index < (int)(data[3] - *output); index = index + 1) {\n      result = (*callback)(input,param,(int)data + 0x19,1);\n      if (result == -1) {\n        return 0xffffffff;\n      }\n    }\n  }\n  max_value = (uint)*(byte *)((int)data + 0x43);\n  if (max_value != 0) {\n    max_value = 1;\n  }\n  offset = max_value;\n  if ((int)(*data << 0x1a) < 0) {\n    *(undefined *)((int)data + max_value + 0x43) = 0x30;\n    offset = max_value + 2;\n    *(undefined *)((int)data + max_value + 0x44) = *(undefined *)((int)data + 0x45);\n  }\n  index = (*callback)(input,param,(int)data + 0x43,offset);\n  if (index != -1) {\n    max_value = data[3];\n    condition = (*data & 6) != 4;\n    if (condition) {\n      max_value = 0;\n    }\n    offset = 0;\n    if (!condition) {\n      max_value = max_value - *output;\n    }\n    if (!condition) {\n      max_value = max_value & ~((int)max_value >> 0x1f);\n    }\n    if ((int)data[4] < (int)data[2]) {\n      max_value = max_value + (data[2] - data[4]);\n    }\n    while( true ) {\n      if (max_value == offset) {\n        return 0;\n      }\n      index = (*callback)(input,param,(int)data + 0x1a,1);\n      if (index == -1) break;\n      offset = offset + 1;\n    }\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "param_1": "input",
                "param_2": "data",
                "param_3": "output",
                "param_4": "param",
                "param_5": "callback",
                "iVar1": "index",
                "iVar2": "result",
                "uVar3": "max_value",
                "uVar4": "offset",
                "bVar5": "condition",
                "FUN_080065c0": "process_data_080065c0"
            },
            "calling": [
                "FUN_080066b0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "param_1": {
                    "12": "input",
                    "8": "data",
                    "1": "input_param",
                    "7": "input_data"
                },
                "param_2": {
                    "3": "header",
                    "9": "data",
                    "6": "data_array",
                    "1": "buffer",
                    "2": "metadata"
                },
                "param_3": {
                    "1": "output_value",
                    "5": "result",
                    "2": "max_size",
                    "11": "output"
                },
                "param_4": {
                    "1": "constant_value",
                    "5": "param4",
                    "7": "param_4",
                    "2": "parameter",
                    "9": "param"
                },
                "param_5": {
                    "1": "process_byte",
                    "7": "callback_function",
                    "2": "callback_func",
                    "21": "callback"
                },
                "iVar1": {
                    "1": "loop_counter1",
                    "2": "index_1",
                    "6": "i",
                    "3": "loop_index",
                    "14": "index"
                },
                "iVar2": {
                    "1": "res",
                    "3": "callback_result",
                    "2": "index_2",
                    "5": "j",
                    "10": "result"
                },
                "uVar3": {
                    "1": "maximum_length",
                    "16": "max_value",
                    "6": "max_size"
                },
                "uVar4": {
                    "1": "temp_size",
                    "7": "count",
                    "2": "counter",
                    "10": "offset"
                },
                "bVar5": {
                    "7": "flag",
                    "3": "check_flag",
                    "1": "is_set",
                    "8": "condition",
                    "2": "is_flag_set"
                },
                "FUN_080065c0": {
                    "1": "decode_data",
                    "23": "process_data",
                    "2": "decode_and_process_data"
                },
                "*(char *)((int)param_2 + 0x43)": {
                    "1": "flag"
                },
                "(*(byte *)((int)param_2 + 0x43) != '\\0')": {
                    "1": "is_flag_set"
                },
                "*(undefined *)((int)param_2 + uVar3 + 0x43)": {
                    "1": "new_char1"
                },
                "*(undefined *)((int)param_2 + uVar3 + 0x44)": {
                    "1": "new_char2"
                },
                "*(undefined *)((int)param_2 + 0x45)": {
                    "1": "char_value"
                },
                "(*param_2 & 6) == 0": {
                    "1": "is_zero"
                },
                "(int)(*param_2 << 0x1a) < 0": {
                    "1": "is_negative"
                },
                "(*param_2 << 0x1a)": {
                    "1": "left_shift_value"
                },
                "(*param_2 & 6) != 4": {
                    "1": "is_not_equal_to_four"
                },
                "(int)uVar3 >> 0x1f": {
                    "1": "right_shift_value"
                },
                "(int)param_2[4] < (int)param_2[2]": {
                    "1": "is_less_than"
                },
                "(int)param_2[3] - *param_3": {
                    "1": "difference"
                }
            }
        },
        "FUN_080066b0": {
            "entrypoint": "0x080066b0",
            "current_name": "print_formatted_output_080066b0",
            "code": "\nuint print_formatted_output_080066b0(undefined4 format_string,uint *args,undefined4 width,code *output_function,uint **arg_pointer)\n\n{\n  byte byte_value;\n  int index;\n  uint *arg_ptr;\n  int result;\n  char *hex_chars;\n  uint base;\n  uint **pp_output_arg;\n  char **ppc_arg;\n  uint value;\n  uint length;\n  char *output_ptr;\n  char *formatted_string;\n  uint local_array [2];\n  \n  byte_value = *(byte *)(args + 6);\n  formatted_string = (char *)((int)args + 0x43);\n  if (byte_value != 0x6e) {\n    if (byte_value < 0x6f) {\n      if (byte_value != 99) {\n        if (byte_value < 100) {\n          if (byte_value == 0) goto LAB_0800686a;\n          if (byte_value != 0x58) goto LAB_080066e0;\n          *(undefined *)((int)args + 0x45) = 0x58;\n          hex_chars = \"0123456789ABCDEF\";\nLAB_080067fa:\n          base = *args;\n          arg_ptr = *arg_pointer;\n          *arg_pointer = arg_ptr + 1;\n          if (((base & 0x80) == 0) && ((int)(base << 0x19) < 0)) {\n            value = (uint)*(ushort *)arg_ptr;\n          }\n          else {\n            value = *arg_ptr;\n          }\n          if ((int)(base << 0x1f) < 0) {\n            *args = base | 0x20;\n          }\n          if (value == 0) {\n            *args = *args & 0xffffffdf;\n          }\n          base = 0x10;\nLAB_08006790:\n          *(undefined *)((int)args + 0x43) = 0;\n        }\n        else {\n          if ((byte_value != 100) && (byte_value != 0x69)) goto LAB_080066e0;\n          value = *args;\n          arg_ptr = *arg_pointer;\n          if ((value & 0x80) == 0) {\n            *arg_pointer = arg_ptr + 1;\n            if ((value & 0x40) == 0) goto LAB_08006700;\n            value = (uint)(short)*(ushort *)arg_ptr;\n          }\n          else {\n            *arg_pointer = arg_ptr + 1;\nLAB_08006700:\n            value = *arg_ptr;\n          }\n          if ((int)value < 0) {\n            value = -value;\n            *(undefined *)((int)args + 0x43) = 0x2d;\n          }\n          hex_chars = \"0123456789ABCDEF\";\n          base = 10;\n        }\n        length = args[1];\n        args[2] = length;\n        output_ptr = formatted_string;\n        if ((int)length < 0) {\n          if (value != 0) goto LAB_0800682e;\nLAB_080068dc:\n          *(char *)((int)args + 0x42) = *hex_chars;\n          output_ptr = (char *)((int)args + 0x42);\n        }\n        else {\n          *args = *args & 0xfffffffb;\n          if (value == 0) {\n            if (length != 0) goto LAB_080068dc;\n          }\n          else {\nLAB_0800682e:\n            do {\n              length = value / base;\n              output_ptr = output_ptr + -1;\n              *output_ptr = hex_chars[value - base * length];\n              value = length;\n            } while (length != 0);\n          }\n        }\n        if (((base == 8) && ((int)(*args << 0x1f) < 0)) && ((int)args[1] <= (int)args[4]))\n        {\n          output_ptr[-1] = '0';\n          output_ptr = output_ptr + -1;\n        }\n        args[4] = (int)formatted_string - (int)output_ptr;\n        formatted_string = output_ptr;\n        goto LAB_080067d6;\n      }\n      arg_ptr = *arg_pointer;\n      *arg_pointer = arg_ptr + 1;\n      *(char *)((int)args + 0x42) = (char)*arg_ptr;\nLAB_08006740:\n      formatted_string = (char *)((int)args + 0x42);\n      value = 1;\n    }\n    else {\n      if (byte_value != 0x73) {\n        if (byte_value < 0x74) {\n          if (byte_value == 0x6f) {\nLAB_08006766:\n            value = *args;\n            arg_ptr = *arg_pointer;\n            if ((value & 0x80) == 0) {\n              *arg_pointer = arg_ptr + 1;\n              if ((value & 0x40) == 0) goto LAB_08006774;\n              value = (uint)*(ushort *)arg_ptr;\n            }\n            else {\n              *arg_pointer = arg_ptr + 1;\nLAB_08006774:\n              value = *arg_ptr;\n            }\n            if (byte_value == 0x6f) {\n              base = 8;\n            }\n            else {\n              base = 10;\n            }\n            hex_chars = \"0123456789ABCDEF\";\n            goto LAB_08006790;\n          }\n          if (byte_value == 0x70) {\n            *args = *args | 0x20;\nLAB_08006726:\n            hex_chars = \"0123456789abcdef\";\n            *(undefined *)((int)args + 0x45) = 0x78;\n            goto LAB_080067fa;\n          }\n        }\n        else {\n          if (byte_value == 0x75) goto LAB_08006766;\n          if (byte_value == 0x78) goto LAB_08006726;\n        }\nLAB_080066e0:\n        *(byte *)((int)args + 0x42) = byte_value;\n        goto LAB_08006740;\n      }\n      ppc_arg = (char **)*arg_pointer;\n      *arg_pointer = (uint *)(ppc_arg + 1);\n      formatted_string = *ppc_arg;\n      index = find_null_byte(formatted_string,0,args[1]);\n      if (index != 0) {\n        args[1] = index - (int)formatted_string;\n      }\n      value = args[1];\n    }\n    args[4] = value;\n    *(undefined *)((int)args + 0x43) = 0;\n    goto LAB_080067d6;\n  }\n  value = *args;\n  pp_output_arg = (uint **)*arg_pointer;\n  base = args[5];\n  if ((value & 0x80) == 0) {\n    *arg_pointer = (uint *)(pp_output_arg + 1);\n    arg_ptr = *pp_output_arg;\n    if ((value & 0x40) == 0) goto LAB_08006856;\n    *(short *)arg_ptr = (short)base;\n  }\n  else {\n    *arg_pointer = (uint *)(pp_output_arg + 1);\n    arg_ptr = *pp_output_arg;\nLAB_08006856:\n    *arg_ptr = base;\n  }\nLAB_0800686a:\n  args[4] = 0;\nLAB_080067d6:\n  index = printf_common(format_string,args,local_array,width,output_function);\n  if ((index == -1) || (index = (*output_function)(format_string,width,formatted_string,args[4]), index == -1)) {\nLAB_080067ea:\n    value = 0xffffffff;\n  }\n  else {\n    if ((int)(*args << 0x1e) < 0) {\n      for (index = 0; index < (int)(args[3] - local_array[0]); index = index + 1) {\n        result = (*output_function)(format_string,width,(int)args + 0x19,1);\n        if (result == -1) goto LAB_080067ea;\n      }\n    }\n    value = args[3];\n    if ((int)args[3] < (int)local_array[0]) {\n      value = local_array[0];\n    }\n  }\n  return value;\n}\n\n",
            "renaming": {
                "FUN_080066b0": "print_formatted_output_080066b0",
                "param_1": "format_string",
                "param_2": "args",
                "param_3": "width",
                "param_4": "output_function",
                "param_5": "arg_pointer",
                "bVar1": "byte_value",
                "iVar2": "index",
                "puVar3": "arg_ptr",
                "iVar4": "result",
                "pcVar5": "hex_chars",
                "uVar6": "base",
                "uVar9": "value",
                "uVar10": "length",
                "pcVar11": "output_ptr",
                "pcVar12": "formatted_string",
                "local_24": "local_array",
                "ppuVar7": "pp_output_arg",
                "ppcVar8": "ppc_arg",
                "_printf_common": "printf_common",
                "memchr": "find_null_byte"
            },
            "calling": [
                "FUN_08006394"
            ],
            "called": [
                "FUN_08006e90",
                "FUN_080065c0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080066b0": {
                    "1": "display_formatted_output",
                    "4": "print_formatted_data",
                    "11": "print_formatted_output",
                    "3": "format_and_print",
                    "5": "print_formatted"
                },
                "param_1": {
                    "1": "param_1",
                    "2": "param1",
                    "4": "format",
                    "22": "format_string"
                },
                "param_2": {
                    "1": "arg2",
                    "11": "args",
                    "5": "arg_list",
                    "6": "arguments"
                },
                "param_3": {
                    "1": "num_arguments",
                    "2": "param3",
                    "3": "n",
                    "9": "width"
                },
                "param_4": {
                    "1": "arg4",
                    "3": "print_function",
                    "2": "output_func",
                    "4": "write_function"
                },
                "param_5": {
                    "1": "output_arg",
                    "2": "arg_ptr_ptr",
                    "5": "arg_pointer",
                    "3": "arg_ptr"
                },
                "bVar1": {
                    "2": "format_char",
                    "1": "first_character",
                    "12": "byte_value",
                    "4": "byte_val",
                    "3": "first_byte"
                },
                "iVar2": {
                    "1": "tmp_i2",
                    "3": "return_value",
                    "2": "i",
                    "13": "index",
                    "6": "result"
                },
                "puVar3": {
                    "1": "ptr_var",
                    "6": "arg_ptr",
                    "2": "next_arg",
                    "5": "ptr"
                },
                "iVar4": {
                    "2": "inner_index",
                    "1": "temp_variable",
                    "6": "result"
                },
                "pcVar5": {
                    "2": "char_ptr",
                    "8": "hex_chars",
                    "5": "hex_digits",
                    "3": "digits",
                    "1": "hexadecimal"
                },
                "uVar6": {
                    "1": "uint_val",
                    "2": "arg_value",
                    "15": "base"
                },
                "uVar9": {
                    "1": "format_size",
                    "2": "result",
                    "9": "value"
                },
                "uVar10": {
                    "1": "width_val",
                    "2": "temp",
                    "3": "length"
                },
                "pcVar11": {
                    "3": "output",
                    "1": "char_pointer_2",
                    "2": "new_string"
                },
                "pcVar12": {
                    "1": "format_char",
                    "3": "output_buffer",
                    "2": "format_ptr"
                },
                "local_24": {
                    "1": "sizes",
                    "2": "buffer",
                    "4": "local_array"
                },
                "uint *param_2": {
                    "1": "str_flags"
                },
                "undefined4 param_3": {
                    "1": "arg3"
                },
                "code *param_4": {
                    "1": "print_char_func"
                },
                "uint **param_5": {
                    "1": "arg5"
                },
                "byte bVar1": {
                    "1": "byte_var"
                },
                "int iVar2": {
                    "1": "int_var"
                },
                "uint *puVar3": {
                    "1": "uint_ptr"
                },
                "int iVar4": {
                    "1": "int_var"
                },
                "char *pcVar5": {
                    "1": "char_ptr"
                },
                "uint uVar6": {
                    "1": "uint_var"
                },
                "uint **ppuVar7": {
                    "1": "uint_ptr_ptr"
                },
                "char **ppcVar8": {
                    "1": "char_ptr_ptr"
                },
                "uint uVar9": {
                    "1": "uint_var"
                },
                "uint uVar10": {
                    "1": "uint_var"
                },
                "char *pcVar11": {
                    "1": "char_ptr"
                },
                "char *pcVar12": {
                    "1": "format_str"
                },
                "uint local_24 [2]": {
                    "1": "local_arr"
                },
                "ppuVar7": {
                    "1": "arg_ptr_temp_ptr"
                },
                "ppcVar8": {
                    "1": "ppcptr"
                },
                "local_24[2]": {
                    "1": "local_vars"
                },
                "_printf_common": {
                    "1": "print_common",
                    "2": "printf_common"
                },
                "memchr": {
                    "2": "find_null_byte",
                    "1": "mem_char"
                },
                "putc": {
                    "1": "putc_function"
                },
                "getc": {
                    "1": "getc_function"
                }
            }
        },
        "FUN_080068f0": {
            "entrypoint": "0x080068f0",
            "current_name": "print_formatted_string_080068f0",
            "code": "\nvoid print_formatted_string_080068f0(undefined4 format_string,undefined4 arg1,undefined4 arg2,undefined4 arg3)\n\n{\n  int data_ptr;\n  undefined4 format_string_copy;\n  undefined4 arg1_copy;\n  undefined4 arg2_copy;\n  undefined4 arg3_copy;\n  \n  data_ptr = DAT_200000f8;\n  format_string_copy = format_string;\n  arg1_copy = arg1;\n  arg2_copy = arg2;\n  arg3_copy = arg3;\n  if ((DAT_200000f8 != 0) && (*(int *)(DAT_200000f8 + 0x18) == 0)) {\n    __sinit(DAT_200000f8);\n  }\n  _vfiprintf_r(data_ptr,*(undefined4 *)(data_ptr + 8),format_string,&arg1_copy,format_string_copy,&arg1_copy);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080068f0": "print_formatted_string_080068f0",
                "param_1": "format_string",
                "param_2": "arg1",
                "param_3": "arg2",
                "param_4": "arg3",
                "iVar1": "data_ptr",
                "uVar2": "format_string_copy",
                "uStack_c": "arg1_copy",
                "uStack_8": "arg2_copy",
                "uStack_4": "arg3_copy"
            },
            "calling": [
                "FUN_08004f4c"
            ],
            "called": [
                "FUN_08006394",
                "FUN_08006cb4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080068f0": {
                    "4": "print_formatted_text",
                    "3": "print_formatted_message",
                    "1": "print_something",
                    "7": "print_formatted_output",
                    "2": "printf_wrapper",
                    "12": "print_formatted_string"
                },
                "param_1": {
                    "1": "input1",
                    "3": "output_stream",
                    "25": "format_string"
                },
                "param_2": {
                    "1": "param_2",
                    "24": "arg1",
                    "4": "arg_1"
                },
                "param_3": {
                    "4": "arg_2",
                    "1": "input3",
                    "24": "arg2"
                },
                "param_4": {
                    "1": "input4",
                    "24": "arg3",
                    "4": "arg_3"
                },
                "iVar1": {
                    "2": "data",
                    "1": "file_ptr",
                    "3": "data_address",
                    "9": "data_ptr",
                    "5": "data_pointer"
                },
                "uVar2": {
                    "2": "param1_copy",
                    "1": "message_data",
                    "3": "format_arg",
                    "4": "format_ptr",
                    "5": "format_string_copy"
                },
                "uStack_c": {
                    "3": "arg_1_copy",
                    "12": "arg1_copy",
                    "2": "local_variable2",
                    "1": "parg1"
                },
                "uStack_8": {
                    "3": "arg_2_copy",
                    "1": "param_3_cpy",
                    "11": "arg2_copy",
                    "2": "local_variable3"
                },
                "uStack_4": {
                    "1": "parg3",
                    "3": "arg3_ptr",
                    "10": "arg3_copy",
                    "2": "local_variable4"
                }
            }
        },
        "FUN_08006920": {
            "entrypoint": "0x08006920",
            "current_name": "allocate_memory_08006920",
            "code": "\nvoid allocate_memory_08006920(int *result,undefined4 size)\n\n{\n  int allocation_result;\n  \n  DAT_200006a4 = 0;\n  allocation_result = request_memory(size);\n  if ((allocation_result == -1) && (DAT_200006a4 != 0)) {\n    *result = DAT_200006a4;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006920": "allocate_memory_08006920",
                "param_1": "result",
                "param_2": "size",
                "iVar1": "allocation_result",
                "_sbrk": "request_memory"
            },
            "calling": [
                "FUN_08006288"
            ],
            "called": [
                "FUN_080056d8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08006920": {
                    "25": "allocate_memory",
                    "1": "update_memory",
                    "4": "initialize_memory"
                },
                "param_1": {
                    "1": "output",
                    "2": "result_address",
                    "4": "result_pointer",
                    "3": "result_ptr",
                    "9": "result"
                },
                "param_2": {
                    "1": "requested_size",
                    "5": "allocation_size",
                    "2": "memory_size",
                    "23": "size"
                },
                "iVar1": {
                    "1": "brk_result",
                    "5": "allocated_memory",
                    "9": "allocation_result",
                    "3": "memory_address",
                    "4": "result"
                },
                "FUN_080056d8": {
                    "1": "get_memory_chunk"
                },
                "_sbrk": {
                    "1": "increase_heap_size"
                },
                "DAT_200006a4": {
                    "1": "error_code"
                }
            }
        },
        "FUN_080069e4": {
            "entrypoint": "0x080069e4",
            "current_name": "process_data_080069e4",
            "code": "\nuint process_data_080069e4(undefined4 *output,undefined4 *input)\n\n{\n  int data_ptr;\n  uint result;\n  ushort flags;\n  \n  data_ptr = DAT_200000f8;\n  if ((DAT_200000f8 != 0) && (*(int *)(DAT_200000f8 + 0x18) == 0)) {\n    initialize_data(DAT_200000f8);\n  }\n  if (input == &DAT_08007904) {\n    input = *(undefined4 **)(data_ptr + 4);\n  }\n  else if (input == (undefined4 *)&DAT_08007924) {\n    input = *(undefined4 **)(data_ptr + 8);\n  }\n  else if (input == (undefined4 *)&DAT_080078e4) {\n    input = *(undefined4 **)(data_ptr + 0xc);\n  }\n  flags = *(ushort *)(input + 3);\n  result = (uint)flags;\n  if (-1 < (int)(result << 0x1c)) {\n    if (-1 < (int)(result << 0x1b)) {\n      *output = 9;\n      goto LAB_08006a14;\n    }\n    if ((int)(result << 0x1d) < 0) {\n      if ((undefined4 *)flag_pointer != (undefined4 *)0x0) {\n        if ((undefined4 *)flag_pointer != input + 0x11) {\n          free_memory(output);\n        }\n        flag_pointer = 0;\n      }\n      *(ushort *)(input + 3) = *(ushort *)(input + 3) & 0xffdb;\n      input[1] = 0;\n      *input = pointer_check;\n    }\n    *(ushort *)(input + 3) = *(ushort *)(input + 3) | 8;\n  }\n  if ((pointer_check == 0) && ((*(ushort *)(input + 3) & 0x280) != 0x200)) {\n    make_buffer(output,input);\n  }\n  flags = *(ushort *)(input + 3);\n  result = flags & 1;\n  if ((flags & 1) == 0) {\n    if (-1 < (int)((uint)flags << 0x1e)) {\n      result = value1;\n    }\n    value1 = result;\n  }\n  else {\n    value1 = 0;\n    value2 = -value1;\n  }\n  if (pointer_check == 0) {\n    flags = *(ushort *)(input + 3);\n    result = (int)short_flag & 0x80;\n    if (result != 0) {\nLAB_08006a14:\n      *(ushort *)(input + 3) = flags | 0x40;\n      return 0xffffffff;\n    }\n  }\n  else {\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080069e4": "process_data_080069e4",
                "param_1": "output",
                "param_2": "input",
                "iVar1": "data_ptr",
                "uVar2": "result",
                "uVar3": "flags",
                "__sinit": "initialize_data",
                "_free_r": "free_memory",
                "__smakebuf_r": "make_buffer",
                "param_2[0xd]": "flag_pointer",
                "param_2[4]": "pointer_check",
                "param_2[5]": "value1",
                "param_2[2]": "value1",
                "param_2[6]": "value2",
                "(short)uVar3": "short_flag"
            },
            "calling": [
                "FUN_08006344",
                "FUN_08006394"
            ],
            "called": [
                "FUN_080061f0",
                "FUN_08006e10",
                "FUN_08006cb4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080069e4": {
                    "1": "decode_and_process_data",
                    "21": "process_data"
                },
                "param_1": {
                    "1": "decoded_data",
                    "3": "output_data",
                    "9": "output",
                    "5": "output_buffer"
                },
                "param_2": {
                    "10": "input",
                    "5": "input_buffer",
                    "1": "input_param",
                    "7": "input_data"
                },
                "iVar1": {
                    "2": "data_pointer",
                    "1": "buffer_header",
                    "4": "base_address",
                    "11": "data_ptr",
                    "5": "data_address"
                },
                "uVar2": {
                    "1": "size",
                    "3": "value",
                    "23": "result"
                },
                "uVar3": {
                    "9": "flag",
                    "1": "input_param_value",
                    "15": "flags"
                },
                "__sinit": {
                    "9": "initialize_data",
                    "1": "initialize_globals",
                    "6": "initialize"
                },
                "&DAT_08007904": {
                    "4": "constant1",
                    "2": "data1",
                    "1": "data_1"
                },
                "(undefined4 *)&DAT_08007924": {
                    "1": "data_2",
                    "2": "constant2"
                },
                "(undefined4 *)&DAT_080078e4": {
                    "1": "data_3",
                    "2": "constant3"
                },
                "_free_r": {
                    "9": "free_memory",
                    "1": "release_resource",
                    "2": "free_resource"
                },
                "__smakebuf_r": {
                    "1": "allocate_memory",
                    "2": "create_buffer",
                    "13": "make_buffer"
                },
                "param_2[0xd]": {
                    "1": "flag_value"
                },
                "param_2[4]": {
                    "1": "param_2_flag"
                },
                "param_2[5]": {
                    "1": "param_2_value",
                    "2": "value1"
                },
                "param_2[2]": {
                    "1": "value2"
                },
                "param_2[6]": {
                    "1": "value2"
                },
                "FUN_080061f0": {
                    "1": "initialize_encoded_data",
                    "2": "initialize_buffer",
                    "4": "initialize_data"
                },
                "FUN_08006e10": {
                    "1": "perform_operation",
                    "2": "sub_function2"
                },
                "FUN_08006cb4": {
                    "1": "reset_array",
                    "2": "cleanup"
                },
                "&DAT_08007924": {
                    "2": "constant2",
                    "1": "constant_value_2"
                },
                "&DAT_080078e4": {
                    "2": "constant3",
                    "1": "constant_value_3"
                },
                "*>(iVar1 + 4)": {
                    "1": "ptr1"
                },
                "*>(iVar1 + 8)": {
                    "1": "ptr2"
                },
                "*>(iVar1 + 0xc)": {
                    "1": "ptr3"
                },
                "(undefined4 *)param_2[0xd]": {
                    "1": "ptr_value1"
                },
                "param_2 + 0x11": {
                    "1": "ptr_value2"
                },
                "*param_1": {
                    "1": "output_value"
                },
                "(ushort *)(param_2 + 3)": {
                    "1": "flag_ptr"
                },
                "(short)uVar3": {
                    "1": "short_flag"
                },
                "*(ushort *)(param_2 + 3) & 0x80": {
                    "1": "flag_value"
                },
                "0xffffffff": {
                    "1": "error_value"
                },
                "param_2 + 3": {
                    "1": "input_data_flags"
                },
                "(int)(uVar2 << 0x1c)": {
                    "1": "shifted_value1"
                },
                "(int)(uVar2 << 0x1b)": {
                    "1": "shifted_value2"
                },
                "(int)(uVar2 << 0x1d)": {
                    "1": "shifted_value3"
                },
                "*(ushort *)(param_2 + 3) & 0xffdb": {
                    "1": "modified_flags1"
                },
                "*(ushort *)(param_2 + 3) | 8": {
                    "1": "modified_flags2"
                },
                "(*(ushort *)(param_2 + 3) & 0x280) != 0x200": {
                    "1": "condition1"
                },
                "uVar3 & 1": {
                    "1": "flags_value2"
                },
                "(uint)uVar3 << 0x1e": {
                    "1": "shifted_value4"
                },
                "(int)(short)uVar3 & 0x80": {
                    "1": "condition2"
                },
                "param_2 + 11": {
                    "1": "param2_value_offset_11"
                },
                "*(ushort *)(param_2 + 3)": {
                    "1": "param2_value_short"
                },
                "*(ushort *)(param_2 + 3) & 0x280": {
                    "1": "param2_value_short_check"
                },
                "FON_080061f0": {
                    "1": "process_data_1"
                },
                "FON_08006e10": {
                    "1": "process_data_2"
                },
                "FON_08006cb4": {
                    "1": "process_data_3"
                }
            }
        },
        "FUN_08006ac0": {
            "entrypoint": "0x08006ac0",
            "current_name": "handle_exception_08006ac0",
            "code": "\nvoid handle_exception_08006ac0(void)\n\n{\n  uint *pointer;\n  int var2;\n  int *array_ptr;\n  int *temp_pointer;\n  uint ushort_value;\n  ushort ushort_var;\n  int var7;\n  code *function_pointer;\n  int var9;\n  uint uint_value;\n  code *jump_table;\n  bool bool_var;\n  undefined8 result;\n  \n  raise(6);\n  jump_table = (code *)0x8006acf;\n  result = _exit(1);\n  array_ptr = (int *)((ulonglong)result >> 0x20);\n  pointer = (uint *)result;\n  ushort_var = *(ushort *)(array_ptr + 3);\n  ushort_value = (uint)ushort_var;\n  if ((int)(ushort_value << 0x1c) < 0) {\n    var2 = array_ptr[4];\n    if (var2 != 0) {\n      var7 = ushort_value << 0x1e;\n      bool_var = var7 != 0;\n      if (bool_var) {\n        var7 = 0;\n      }\n      var9 = *array_ptr;\n      if (!bool_var) {\n        var7 = array_ptr[5];\n      }\n      *array_ptr = var2;\n      array_ptr[2] = var7;\n      for (var9 = var9 - var2; 0 < var9; var9 = var9 - var7) {\n        var7 = (*(code *)array_ptr[10])(pointer,array_ptr[8],var2,var9);\n        if (var7 < 1) {\n          ushort_var = *(ushort *)(array_ptr + 3);\n          goto LAB_08006bc6;\n        }\n        var2 = var2 + var7;\n      }\n    }\n  }\n  else if (((0 < array_ptr[1]) || (0 < array_ptr[0x10])) &&\n          (function_pointer = (code *)array_ptr[0xb], function_pointer != (code *)0x0)) {\n    uint_value = *pointer;\n    *pointer = 0;\n    if ((ushort_var & 0x1000) == 0) {\n      var2 = (*function_pointer)(pointer,array_ptr[8],ushort_value & 0x1000,1);\n      if ((var2 == -1) && (ushort_value = *pointer, ushort_value != 0)) {\n        if ((ushort_value != 0x1d) && (ushort_value != 0x16)) {\n          *(ushort *)(array_ptr + 3) = *(ushort *)(array_ptr + 3) | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x08006b90. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          (*jump_table)();\n          return;\n        }\n        *pointer = uint_value;\n        goto LAB_08006aea;\n      }\n    }\n    else {\n      var2 = array_ptr[0x15];\n    }\n    if (((int)((uint)*(ushort *)(array_ptr + 3) << 0x1d) < 0) &&\n       (var2 = var2 - array_ptr[1], array_ptr[0xd] != 0)) {\n      var2 = var2 - array_ptr[0x10];\n    }\n    var2 = (*(code *)array_ptr[0xb])(pointer,array_ptr[8],var2,0);\n    ushort_var = *(ushort *)(array_ptr + 3);\n    if ((var2 == -1) &&\n       ((0x1d < *pointer || (-1 < (int)((0x20400001U >> (*pointer & 0xff)) << 0x1f))))) {\nLAB_08006bc6:\n      *(ushort *)(array_ptr + 3) = ushort_var | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x08006bd0. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      (*jump_table)(0xffffffff);\n      return;\n    }\n    array_ptr[1] = 0;\n    *array_ptr = array_ptr[4];\n    if (((int)((uint)ushort_var << 0x13) < 0) && ((var2 != -1 || (*pointer == 0)))) {\n      array_ptr[0x15] = var2;\n    }\n    temp_pointer = (int *)array_ptr[0xd];\n    *pointer = uint_value;\n    if (temp_pointer != (int *)0x0) {\n      if (temp_pointer != array_ptr + 0x11) {\n        _free_r(pointer);\n      }\n      array_ptr[0xd] = 0;\n                    /* WARNING: Could not recover jumptable at 0x08006b66. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      (*jump_table)();\n      return;\n    }\n  }\nLAB_08006aea:\n                    /* WARNING: Could not recover jumptable at 0x08006aec. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jump_table)(0);\n  return;\n}\n\n",
            "renaming": {
                "piVar3": "array_ptr",
                "puVar1": "pointer",
                "uVar5": "ushort_value",
                "uVar6": "ushort_var",
                "iVar2": "var2",
                "iVar7": "var7",
                "piVar4": "temp_pointer",
                "iVar9": "var9",
                "bVar11": "bool_var",
                "uVar12": "result",
                "UNRECOVERED_JUMPTABLE_00": "jump_table",
                "pcVar8": "function_pointer",
                "uVar10": "uint_value",
                "FUN_08006ac0": "handle_exception_08006ac0",
                "iVar4": "var8"
            },
            "calling": [
                "FUN_08007090",
                "FUN_0800611c"
            ],
            "called": [
                "FUN_080061f0",
                "FUN_08006f00",
                "FUN_0800573c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "piVar3": {
                    "1": "ptr",
                    "2": "pointer_1"
                },
                "puVar1": {
                    "2": "pointer_2",
                    "1": "result",
                    "3": "pointer"
                },
                "uVar5": {
                    "1": "lower_bits",
                    "2": "uint_var",
                    "5": "ushort_value"
                },
                "uVar6": {
                    "1": "temp_ushort",
                    "2": "ushort_value",
                    "3": "flags"
                },
                "iVar2": {
                    "1": "int_var",
                    "3": "var2"
                },
                "iVar7": {
                    "1": "temp_var_10",
                    "2": "var7"
                },
                "piVar4": {
                    "1": "pointer3"
                },
                "iVar9": {
                    "3": "var9",
                    "1": "offset"
                },
                "bVar11": {
                    "1": "is_alternate",
                    "2": "is_zero",
                    "3": "bool_var"
                },
                "uVar12": {
                    "1": "exit_var",
                    "2": "exit_result",
                    "3": "result"
                },
                "UNRECOVERED_JUMPTABLE_00": {
                    "1": "unrecovered_jumptable_function_ptr",
                    "9": "jump_table",
                    "2": "jump_table_function"
                },
                "FUN_080061f0": {
                    "1": "initialize_ptr",
                    "4": "initialize_parameters",
                    "2": "initialize_variables"
                },
                "FUN_08006f00": {
                    "2": "calculate_value",
                    "1": "sub_function2",
                    "6": "process_data"
                },
                "FUN_0800573c": {
                    "4": "free_resources",
                    "1": "cleanup",
                    "3": "free_memory"
                },
                "param_1": {
                    "1": "ptr_array"
                },
                "param_2": {
                    "2": "array_length",
                    "1": "num_arguments"
                },
                "param_3": {
                    "1": "unused_param1",
                    "2": "value1"
                },
                "param_4": {
                    "1": "exception_param_4",
                    "2": "value2"
                },
                "pcVar8": {
                    "1": "ptr_to_var8",
                    "8": "function_pointer",
                    "2": "function_ptr"
                },
                "uVar10": {
                    "3": "var10",
                    "4": "uint_value",
                    "1": "temp_var10",
                    "2": "temp_value"
                },
                "FUN_08006ac0": {
                    "2": "handle_error",
                    "1": "execute_reverse_code"
                },
                "piVar7": {
                    "1": "ptr_to_var7"
                },
                "iVar4": {
                    "1": "var8"
                },
                "iVar5": {
                    "1": "var9"
                },
                "iVar10": {
                    "1": "return_value"
                }
            }
        },
        "FUN_08006be0": {
            "entrypoint": "0x08006be0",
            "current_name": "process_data_08006be0",
            "code": "\nundefined4 process_data_08006be0(uint *input_array,int *output_array)\n\n{\n  undefined4 return_value;\n  int var1;\n  int *pointer_var;\n  uint var3;\n  ushort flag;\n  int var5;\n  undefined4 unaff_r4;\n  undefined4 unaff_r5;\n  code *function_pointer;\n  int var8;\n  uint var9;\n  code *jump_table;\n  bool bool_var;\n  \n  if (output_array[4] != 0) {\n    if ((input_array != (uint *)0x0) && (input_array[6] == 0)) {\n      __sinit();\n    }\n    if (output_array == &DAT_08007904) {\n      output_array = (int *)input_array[1];\n    }\n    else if (output_array == (int *)&DAT_08007924) {\n      output_array = (int *)input_array[2];\n    }\n    else if (output_array == (int *)&DAT_080078e4) {\n      output_array = (int *)input_array[3];\n    }\n    if (*(short *)(output_array + 3) != 0) {\n      flag = *(ushort *)(output_array + 3);\n      var3 = (uint)flag;\n      if ((int)(var3 << 0x1c) < 0) {\n        var1 = output_array[4];\n        if (var1 != 0) {\n          var5 = var3 << 0x1e;\n          bool_var = var5 != 0;\n          if (bool_var) {\n            var5 = 0;\n          }\n          var8 = *output_array;\n          if (!bool_var) {\n            var5 = output_array[5];\n          }\n          *output_array = var1;\n          output_array[2] = var5;\n          for (var8 = var8 - var1; 0 < var8; var8 = var8 - var5) {\n            var5 = (*(code *)output_array[10])(input_array,output_array[8],var1,var8,unaff_r4,unaff_r5);\n            if (var5 < 1) {\n              flag = *(ushort *)(output_array + 3);\n              goto LAB_08006bc6;\n            }\n            var1 = var1 + var5;\n          }\n        }\n      }\n      else if (((0 < output_array[1]) || (0 < output_array[0x10])) &&\n              (function_pointer = (code *)output_array[0xb], function_pointer != (code *)0x0)) {\n        var9 = *input_array;\n        *input_array = 0;\n        if ((flag & 0x1000) == 0) {\n          var1 = (*function_pointer)(input_array,output_array[8],var3 & 0x1000,1);\n          if ((var1 == -1) && (var3 = *input_array, var3 != 0)) {\n            if ((var3 != 0x1d) && (var3 != 0x16)) {\n              *(ushort *)(output_array + 3) = *(ushort *)(output_array + 3) | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x08006b90. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n              return_value = (*jump_table)();\n              return return_value;\n            }\n            *input_array = var9;\n            goto LAB_08006aea;\n          }\n        }\n        else {\n          var1 = output_array[0x15];\n        }\n        if (((int)((uint)*(ushort *)(output_array + 3) << 0x1d) < 0) &&\n           (var1 = var1 - output_array[1], output_array[0xd] != 0)) {\n          var1 = var1 - output_array[0x10];\n        }\n        var1 = (*(code *)output_array[0xb])(input_array,output_array[8],var1,0);\n        flag = *(ushort *)(output_array + 3);\n        if ((var1 == -1) &&\n           ((0x1d < *input_array || (-1 < (int)((0x20400001U >> (*input_array & 0xff)) << 0x1f))))) {\nLAB_08006bc6:\n          *(ushort *)(output_array + 3) = flag | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x08006bd0. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          return_value = (*jump_table)(0xffffffff);\n          return return_value;\n        }\n        output_array[1] = 0;\n        *output_array = output_array[4];\n        if (((int)((uint)flag << 0x13) < 0) && ((var1 != -1 || (*input_array == 0)))) {\n          output_array[0x15] = var1;\n        }\n        pointer_var = (int *)output_array[0xd];\n        *input_array = var9;\n        if (pointer_var != (int *)0x0) {\n          if (pointer_var != output_array + 0x11) {\n            _free_r(input_array);\n          }\n          output_array[0xd] = 0;\n                    /* WARNING: Could not recover jumptable at 0x08006b66. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          return_value = (*jump_table)();\n          return return_value;\n        }\n      }\nLAB_08006aea:\n                    /* WARNING: Could not recover jumptable at 0x08006aec. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      return_value = (*jump_table)(0);\n      return return_value;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08006be0": "process_data_08006be0",
                "param_1": "input_array",
                "param_2": "output_array",
                "uVar1": "return_value",
                "iVar2": "var1",
                "piVar3": "pointer_var",
                "uVar4": "var3",
                "uVar5": "flag",
                "iVar6": "var5",
                "pcVar7": "function_pointer",
                "iVar8": "var8",
                "uVar9": "var9",
                "UNRECOVERED_JUMPTABLE_00": "jump_table",
                "bVar10": "bool_var"
            },
            "calling": [
                "FUN_08006344"
            ],
            "called": [
                "FUN_08006cb4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08006be0": {
                    "1": "decode_and_process_data",
                    "5": "process_data",
                    "2": "process_function"
                },
                "param_1": {
                    "2": "uint_array",
                    "1": "array_param",
                    "5": "param_array",
                    "7": "input_array"
                },
                "param_2": {
                    "1": "info",
                    "5": "output_array",
                    "2": "config_array",
                    "3": "int_array"
                },
                "uVar1": {
                    "10": "result",
                    "21": "return_value"
                },
                "iVar2": {
                    "1": "variable1",
                    "3": "index",
                    "2": "value",
                    "4": "var1"
                },
                "piVar3": {
                    "1": "config_ptr",
                    "4": "temp_pointer",
                    "2": "temp_ptr"
                },
                "uVar4": {
                    "4": "temp_value",
                    "1": "variable2",
                    "2": "u_var4"
                },
                "uVar5": {
                    "4": "var4",
                    "1": "val2",
                    "2": "u_var5"
                },
                "iVar6": {
                    "1": "i_var_value",
                    "3": "temp_var2",
                    "4": "var5"
                },
                "unaff_r4": {
                    "4": "var6",
                    "1": "variable1",
                    "2": "unaff_var4",
                    "5": "unaff_r4"
                },
                "unaff_r5": {
                    "1": "variable2",
                    "2": "unaff_var2",
                    "5": "unaff_r5",
                    "4": "var7"
                },
                "pcVar7": {
                    "17": "function_pointer",
                    "1": "temp_code_ptr",
                    "2": "callback",
                    "6": "function_ptr"
                },
                "iVar8": {
                    "3": "temp_var3",
                    "1": "temp3",
                    "2": "counter",
                    "4": "var8"
                },
                "uVar9": {
                    "1": "u_var_temp2",
                    "4": "u_var9",
                    "2": "temp4"
                },
                "uVar10": {
                    "2": "temp_bool",
                    "4": "bool_value",
                    "1": "bool_result",
                    "5": "bool_var"
                },
                "UNRECOVERED_JUMPTABLE_00": {
                    "1": "jump_table_pointer",
                    "9": "jump_table",
                    "4": "jumptable",
                    "2": "jmp_table"
                },
                "bVar11": {
                    "1": "condition"
                },
                "bVar10": {
                    "1": "var11",
                    "3": "bool_var"
                },
                "uVar11": {
                    "1": "var11"
                },
                "*param_1": {
                    "1": "uint_array"
                },
                "*param_2": {
                    "1": "int_array"
                }
            }
        },
        "FUN_08006c40": {
            "entrypoint": "0x08006c40",
            "current_name": "initialize_parameters_08006c40",
            "code": "\nvoid initialize_parameters_08006c40(undefined4 *data,undefined2 value1,undefined2 value2)\n\n{\n  *data = 0;\n  parameters[1] = 0;\n  parameters[2] = 0;\n  *(undefined2 *)(data + 3) = value1;\n  params[0x19] = 0;\n  *(undefined2 *)((int)data + 0xe) = value2;\n  parameters[4] = 0;\n  parameters[5] = 0;\n  parameters[6] = 0;\n  clear_memory(data + 0x17,0,8);\n  parameters[8] = data;\n  parameters[9] = 0x8006f39;\n  parameters[10] = 0x8006f5b;\n  params[0xb] = 0x8006f93;\n  params[0xc] = &label;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006c40": "initialize_parameters_08006c40",
                "param_1": "data",
                "param_2": "value1",
                "param_3": "value2",
                "LAB_08006fb6_1": "label",
                "memset": "clear_memory",
                "param_1[1]": "parameters[1]",
                "param_1[2]": "parameters[2]",
                "param_1[0x19]": "params[0x19]",
                "param_1[4]": "parameters[4]",
                "param_1[5]": "parameters[5]",
                "param_1[6]": "parameters[6]",
                "param_1[8]": "parameters[8]",
                "param_1[9]": "parameters[9]",
                "param_1[10]": "parameters[10]",
                "param_1[0xb]": "params[0xb]",
                "param_1[0xc]": "params[0xc]"
            },
            "calling": [
                "FUN_08006cb4"
            ],
            "called": [
                "FUN_080061e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08006c40": {
                    "6": "initialize_params",
                    "2": "initialize_struct",
                    "3": "initialize_data_structure",
                    "8": "initialize_parameters",
                    "1": "initialize_function",
                    "5": "initialize_data"
                },
                "param_1": {
                    "5": "params",
                    "3": "data_structure",
                    "1": "output_buffer",
                    "2": "param_array",
                    "4": "parameters"
                },
                "param_2": {
                    "2": "input_value1",
                    "1": "param2_value",
                    "22": "value1"
                },
                "param_3": {
                    "2": "input_value2",
                    "1": "length",
                    "22": "value2"
                },
                "LAB_08006fb6_1": {
                    "1": "label_1",
                    "4": "label",
                    "2": "some_label"
                },
                "memset": {
                    "5": "clear_memory",
                    "1": "initialize_memory"
                },
                "FUN_080061e0": {
                    "1": "sub_function",
                    "3": "process_data"
                },
                "param_1[1]": {
                    "2": "parameters[1]",
                    "1": "params[1]"
                },
                "param_1[2]": {
                    "1": "params[2]",
                    "2": "parameters[2]"
                },
                "param_1[0x19]": {
                    "1": "param_array[25]"
                },
                "param_1[4]": {
                    "1": "params[4]",
                    "2": "parameters[4]"
                },
                "param_1[5]": {
                    "1": "object_field7",
                    "2": "parameters[5]"
                },
                "param_1[6]": {
                    "2": "parameters[6]",
                    "1": "params[6]"
                },
                "param_1[8]": {
                    "1": "params[8]",
                    "2": "parameters[8]"
                },
                "param_1[9]": {
                    "1": "params[9]",
                    "2": "parameters[9]"
                },
                "param_1[10]": {
                    "1": "sub_function2",
                    "2": "parameters[10]"
                },
                "param_1[0xb]": {
                    "1": "parameters[11]"
                },
                "param_1[0xc]": {
                    "1": "parameters[0xc]"
                },
                "param_1 + 3": {
                    "1": "object_field3"
                },
                "*(undefined2 *)(param_1 + 3)": {
                    "1": "object_field3_value"
                },
                "*(undefined2 *)((int)param_1 + 0xe)": {
                    "1": "object_field5"
                },
                "param_1 + 0x17": {
                    "1": "object_field9"
                }
            }
        },
        "FUN_08006c88": {
            "entrypoint": "0x08006c88",
            "current_name": "allocate_memory_08006c88",
            "code": "\nundefined4 * allocate_memory_08006c88(undefined4 size,int num_elements)\n\n{\n  undefined4 *allocated_memory;\n  int total_size;\n  \n  total_size = (num_elements + -1) * 0x68;\n  allocated_memory = (undefined4 *)_allocate_memory_08006c88(size,total_size + 0x74);\n  if (allocated_memory != (undefined4 *)0x0) {\n    *allocated_memory = 0;\n    allocated_memory[1] = num_elements;\n    allocated_memory[2] = allocated_memory + 3;\n    initialize_memory(allocated_memory + 3,0,total_size + 0x68);\n  }\n  return allocated_memory;\n}\n\n",
            "renaming": {
                "FUN_08006c88": "allocate_memory_08006c88",
                "param_1": "size",
                "param_2": "num_elements",
                "iVar2": "total_size",
                "puVar1": "allocated_memory",
                "memset": "initialize_memory",
                "_malloc_r": "_allocate_memory"
            },
            "calling": [
                "FUN_08006d14"
            ],
            "called": [
                "FUN_080061e0",
                "FUN_08006288"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08006c88": {
                    "2": "create_data_structure",
                    "1": "allocate_memory_for_array",
                    "3": "allocate_and_initialize_array",
                    "14": "allocate_memory"
                },
                "param_1": {
                    "1": "size_of_data_structure",
                    "2": "size_of_allocation",
                    "15": "size"
                },
                "param_2": {
                    "2": "length",
                    "1": "num_of_chunks",
                    "3": "number_of_elements",
                    "8": "count",
                    "11": "num_elements"
                },
                "iVar2": {
                    "1": "block_size",
                    "2": "offset",
                    "13": "total_size",
                    "4": "array_size"
                },
                "puVar1": {
                    "1": "dynamic_array",
                    "10": "allocated_memory",
                    "2": "allocated_structure",
                    "6": "ptr",
                    "3": "array_ptr"
                },
                "FUN_080061e0": {
                    "2": "initialize_memory",
                    "1": "set_array_element"
                },
                "param_3": {
                    "1": "value",
                    "2": "length"
                },
                "FUN_08006288": {
                    "1": "fill_data_structure",
                    "2": "clear_memory"
                },
                "memset": {
                    "1": "initialize_array_elements",
                    "4": "initialize_memory"
                },
                "_malloc_r": {
                    "1": "_allocate_memory"
                }
            }
        },
        "FUN_08006cb4": {
            "entrypoint": "0x08006cb4",
            "current_name": "initialize_data_08006cb4",
            "code": "\nvoid initialize_data_08006cb4(undefined4 *parameters)\n\n{\n  undefined4 result;\n  undefined4 *pointer;\n  \n  if (data[6] == 0) {\n    data[18] = 0;\n    data[19] = 0;\n    data[20] = 0;\n    pointer = &DAT_200000fc;\n    data[10] = address_08006c34_1;\n    if (parameters == &DAT_200000fc) {\n      pointer = (undefined4 *)0x1;\n    }\n    if (parameters == &DAT_200000fc) {\n      data[6] = pointer;\n    }\n    result = get_sfp;\n    data[1] = result;\n    result = get_float_value(parameters);\n    data[2] = result;\n    result = get_float_value(parameters);\n    data[3] = result;\n    standardize_value(data[1],4,0);\n    standardize_value(data[2],9,1);\n    standardize_value(data[3],0x12,2);\n    data[6] = 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006cb4": "initialize_data_08006cb4",
                "param_1": "parameters",
                "uVar1": "result",
                "puVar2": "pointer",
                "__sfp": "get_float_value",
                "std_isra_0": "standardize_value",
                "param_1[6]": "data[6]",
                "param_1[0x12]": "data[18]",
                "param_1[0x13]": "data[19]",
                "param_1[0x14]": "data[20]",
                "&LAB_08006c34_1": "address_08006c34_1",
                "param_1[10]": "data[10]",
                "param_1[1]": "data[1]",
                "param_1[2]": "data[2]",
                "param_1[3]": "data[3]",
                "__sfp()": "get_sfp",
                "LAB_08006c34_1": "label1"
            },
            "calling": [
                "FUN_08006be0",
                "FUN_080068f0",
                "FUN_08006344",
                "FUN_08006d14",
                "FUN_08006394",
                "FUN_080069e4"
            ],
            "called": [
                "FUN_08006c40",
                "FUN_08006d14"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08006cb4": {
                    "2": "initialize_params",
                    "10": "initialize_parameters",
                    "4": "initialize_param",
                    "13": "initialize_data",
                    "1": "initialize_foo"
                },
                "param_1": {
                    "7": "data",
                    "3": "data_pointer",
                    "1": "foo_ptr",
                    "2": "param",
                    "10": "parameters"
                },
                "uVar1": {
                    "5": "return_value",
                    "1": "temp_var1",
                    "22": "result"
                },
                "puVar2": {
                    "1": "temp2",
                    "2": "pointer_var",
                    "7": "temp_ptr",
                    "8": "pointer",
                    "5": "ptr",
                    "3": "temp_pointer"
                },
                "__sfp": {
                    "5": "calculate_value",
                    "2": "get_some_value",
                    "6": "get_float_value",
                    "1": "get_float_number"
                },
                "std_isra_0": {
                    "2": "set_standard",
                    "1": "std_function",
                    "5": "standardize_value"
                },
                "param_2": {
                    "2": "value2",
                    "1": "parameter2"
                },
                "param_3": {
                    "2": "value2",
                    "1": "val2"
                },
                "FUN_08006c40": {
                    "2": "set_initial_values",
                    "1": "process_param"
                },
                "FUN_08006d14": {
                    "1": "calculate",
                    "2": "perform_operation"
                },
                "param_1[6]": {
                    "1": "data[6]"
                },
                "param_1[0x12]": {
                    "1": "data[18]"
                },
                "param_1[0x13]": {
                    "1": "data[19]"
                },
                "param_1[0x14]": {
                    "1": "data[20]"
                },
                "&LAB_08006c34_1": {
                    "1": "address_08006c34_1"
                },
                "&DAT_200000fc": {
                    "1": "data"
                },
                "param_1[10]": {
                    "1": "data[10]"
                },
                "param_1[1]": {
                    "1": "data[1]"
                },
                "param_1[2]": {
                    "1": "data[2]"
                },
                "param_1[3]": {
                    "1": "data[3]"
                },
                "__sfp()": {
                    "1": "get_sfp"
                },
                "std_isra_0()": {
                    "1": "standardize"
                },
                "param_4": {
                    "1": "param4",
                    "2": "value4"
                },
                "LAB_08006c34_1": {
                    "1": "label1"
                },
                "DAT_200000fc": {
                    "1": "constant_data"
                }
            }
        },
        "FUN_08006d14": {
            "entrypoint": "0x08006d14",
            "current_name": "initialize_data_structure_08006d14",
            "code": "\nint * initialize_data_structure_08006d14(undefined4 *result,undefined4 param2,undefined4 param3,undefined4 param_4)\n\n{\n  int *current_ptr;\n  int *nested_ptr;\n  int **data_ptr;\n  \n  if (DAT_20000114 == 0) {\n    initialize_static_data(&DAT_200000fc);\n  }\n  data_ptr = (int **)&DAT_20000144;\n  do {\n    nested_ptr = data_ptr[2];\n    current_ptr = data_ptr[1];\n    while (current_ptr = (int *)((int)current_ptr + -1), -1 < (int)current_ptr) {\n      if (*(short *)(nested_ptr + 3) == 0) {\n        *(undefined2 *)((int)nested_ptr + 0xe) = 0xffff;\n        nested_element_value = 0;\n        *(undefined2 *)(nested_ptr + 3) = 1;\n        *nested_ptr = 0;\n        nested_element_value2 = 0;\n        nested_element_value1 = 0;\n        nested_element_value4 = 0;\n        nested_element_value5 = 0;\n        nested_element_value6 = 0;\n        initialize_memory(nested_ptr + 0x17,0,8,1,param_4);\n        nested_element_value13 = 0;\n        nested_element_value14 = 0;\n        nested_element_value18 = 0;\n        nested_element_value19 = 0;\n        return nested_ptr;\n      }\n      nested_ptr = nested_ptr + 0x1a;\n    }\n    if (*data_ptr == (int *)0x0) {\n      current_ptr = (int *)allocate_memory(result,4);\n      *data_ptr = current_ptr;\n      if (current_ptr == (int *)0x0) {\n        *result = 0xc;\n        return (int *)0x0;\n      }\n    }\n    data_ptr = (int **)*data_ptr;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08006d14": "initialize_data_structure_08006d14",
                "param_1": "result",
                "param_2": "param2",
                "param_3": "param3",
                "piVar1": "current_ptr",
                "piVar2": "nested_ptr",
                "ppiVar3": "data_ptr",
                "__sinit": "initialize_static_data",
                "__sfmoreglue": "allocate_memory",
                "memset": "initialize_memory",
                "piVar2[0xe]": "nested_element_value14",
                "piVar2[0x19]": "nested_element_value",
                "piVar2[2]": "nested_element_value2",
                "piVar2[1]": "nested_element_value1",
                "piVar2[4]": "nested_element_value4",
                "piVar2[5]": "nested_element_value5",
                "piVar2[6]": "nested_element_value6",
                "piVar2[0xd]": "nested_element_value13",
                "piVar2[0x12]": "nested_element_value18",
                "piVar2[0x13]": "nested_element_value19"
            },
            "calling": [
                "FUN_08006cb4"
            ],
            "called": [
                "FUN_080061e0",
                "FUN_08006c88",
                "FUN_08006cb4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08006d14": {
                    "1": "find_initialized_int_array",
                    "7": "initialize_data_structure",
                    "4": "initialize_data_structures",
                    "2": "initialize_data"
                },
                "param_1": {
                    "1": "result_array",
                    "2": "array_ptr",
                    "3": "output",
                    "4": "result"
                },
                "param_2": {
                    "1": "input_arg1",
                    "9": "param2",
                    "2": "value1",
                    "4": "input1",
                    "7": "param_2"
                },
                "param_3": {
                    "2": "value2",
                    "1": "arg2",
                    "4": "input2",
                    "9": "param3",
                    "7": "param_3"
                },
                "param_4": {
                    "1": "arg3",
                    "9": "param_4",
                    "2": "value3",
                    "3": "input3"
                },
                "piVar1": {
                    "1": "inner_loop_counter",
                    "7": "current_ptr",
                    "3": "current_array",
                    "4": "current_pointer",
                    "2": "ptr1"
                },
                "piVar2": {
                    "1": "subarray_pointer",
                    "3": "nested_ptr",
                    "2": "nested_element"
                },
                "ppiVar3": {
                    "1": "array_pointer_pointer",
                    "2": "data_ptr"
                },
                "DAT_20000114": {
                    "4": "initialized",
                    "3": "global_flag",
                    "1": "initialized_flag"
                },
                "DAT_200000fc": {
                    "1": "initialization_value",
                    "2": "global_data"
                },
                "DAT_20000144": {
                    "1": "global_data_array"
                },
                "__sinit": {
                    "1": "initialize_singleton",
                    "6": "initialize_static_data"
                },
                "FUN_080061e0": {
                    "1": "set_resource_flags",
                    "2": "initialize_element"
                },
                "FUN_08006c88": {
                    "1": "allocate_subarray",
                    "2": "allocate_memory"
                },
                "FUN_08006cb4": {
                    "1": "deallocate_memory"
                },
                "__sfmoreglue": {
                    "1": "resize_buffer",
                    "10": "allocate_memory"
                },
                "memset": {
                    "3": "initialize_memory",
                    "1": "set_array_element_values_zero"
                },
                "piVar2[3]": {
                    "1": "nested_element_flag"
                },
                "piVar2[0xe]": {
                    "1": "field12"
                },
                "piVar2[0x19]": {
                    "1": "field2"
                },
                "*piVar2": {
                    "1": "nested_element_value0"
                },
                "piVar2[2]": {
                    "1": "field5"
                },
                "piVar2[1]": {
                    "1": "nested_element_value1"
                },
                "piVar2[4]": {
                    "1": "field7"
                },
                "piVar2[5]": {
                    "1": "nested_element_value5"
                },
                "piVar2[6]": {
                    "1": "nested_element_value6"
                },
                "piVar2[0x17]": {
                    "1": "nested_element_value17"
                },
                "piVar2[0xd]": {
                    "1": "nested_element_value13"
                },
                "piVar2[0x12]": {
                    "1": "field13"
                },
                "piVar2[0x13]": {
                    "1": "nested_element_value19"
                },
                "*ppiVar3": {
                    "1": "data_struct_ptr"
                },
                "*param_1": {
                    "1": "status_value"
                },
                "&DAT_200000fc": {
                    "2": "static_data",
                    "1": "global_data"
                },
                "&DAT_20000144": {
                    "1": "pointer_array"
                },
                "(int **)&DAT_20000144": {
                    "1": "current_memory_block_ptr"
                },
                "piVar2 + 3": {
                    "1": "field3"
                },
                "ptr2": {
                    "1": "data_structure"
                },
                "ptr2 + 0xe": {
                    "1": "field1"
                },
                "piVar2 + 0x17": {
                    "1": "field10"
                }
            }
        },
        "FUN_08006dc8": {
            "entrypoint": "0x08006dc8",
            "current_name": "check_file_permissions_08006dc8",
            "code": "\nundefined4 check_file_permissions_08006dc8(undefined4 file_descriptor,int file_info,undefined4 *result,uint *is_executable)\n\n{\n  int status;\n  undefined4 permission_flag;\n  undefined stack_buffer [4];\n  uint file_mode;\n  \n  if ((*(short *)(file_info + 0xe) < 0) ||\n     (status = _fstat_r(file_descriptor,(int)*(short *)(file_info + 0xe),stack_buffer), status < 0)) {\n    *is_executable = 0;\n    if ((int)((uint)*(ushort *)(file_info + 0xc) << 0x18) < 0) {\n      permission_flag = 0x40;\n      goto LAB_08006e08;\n    }\n  }\n  else {\n    *is_executable = (uint)((file_mode & 0xf000) == 0x2000);\n  }\n  permission_flag = 0x400;\nLAB_08006e08:\n  *result = permission_flag;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08006dc8": "check_file_permissions_08006dc8",
                "param_1": "file_descriptor",
                "param_2": "file_info",
                "param_3": "result",
                "param_4": "is_executable",
                "iVar1": "status",
                "auStack_4c": "stack_buffer",
                "local_48": "file_mode",
                "uVar2": "permission_flag"
            },
            "calling": [
                "FUN_08006e10"
            ],
            "called": [
                "FUN_08007004"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08006dc8": {
                    "1": "check_and_set_file_permissions",
                    "2": "check_file_access",
                    "3": "check_file_permission",
                    "21": "check_file_permissions"
                },
                "param_1": {
                    "1": "param_filename",
                    "28": "file_descriptor"
                },
                "param_2": {
                    "1": "param_file_info",
                    "18": "file_info",
                    "3": "file_information",
                    "2": "file_stat"
                },
                "param_3": {
                    "4": "permission_flags",
                    "1": "result_code",
                    "2": "access_mode",
                    "5": "permission_flag",
                    "7": "result"
                },
                "param_4": {
                    "1": "param_output_status",
                    "2": "output_result",
                    "16": "is_executable"
                },
                "iVar1": {
                    "4": "fstat_result",
                    "5": "file_status",
                    "11": "status",
                    "6": "result",
                    "1": "stat_result"
                },
                "auStack_4c": {
                    "1": "aux_stack",
                    "9": "stack_buffer",
                    "2": "stack_variable",
                    "3": "buffer",
                    "6": "stat_buffer"
                },
                "local_48": {
                    "1": "file_attributes",
                    "24": "file_mode",
                    "2": "file_permissions"
                },
                "uVar2": {
                    "2": "result",
                    "3": "permission",
                    "1": "flag_value",
                    "5": "permission_flag"
                }
            }
        },
        "FUN_08006e10": {
            "entrypoint": "0x08006e10",
            "current_name": "initialize_file_08006e10",
            "code": "\nvoid initialize_file_08006e10(int param,int *file_info)\n\n{\n  ushort result;\n  int allocated_memory;\n  int size;\n  int *buffer;\n  \n  if (-1 < (int)((uint)*(ushort *)(file_info + 3) << 0x1e)) {\n    size = param;\n    buffer = file_info;\n    result = read_content(param,file_info,&size,&buffer);\n    allocated_memory = allocate_memory(param,size);\n    if (allocated_memory != 0) {\n      *(undefined **)(param + 0x28) = &some_label;\n      *file_info = allocated_memory;\n      *(ushort *)(file_info + 3) = *(ushort *)(file_info + 3) | 0x80;\n      file_info[4] = allocated_memory;\n      file_info[5] = size;\n      if ((buffer != (int *)0x0) &&\n         (allocated_memory = is_terminal(param,(int)*(short *)((int)file_info + 0xe)), allocated_memory != 0)) {\n        *(ushort *)(file_info + 3) = *(ushort *)(file_info + 3) & 0xfffc | 1;\n      }\n      *(ushort *)(file_info + 3) = result | *(ushort *)(file_info + 3);\n      return;\n    }\n    if ((int)(short)*(ushort *)(file_info + 3) << 0x16 < 0) {\n      return;\n    }\n    *(ushort *)(file_info + 3) = *(ushort *)(file_info + 3) & 0xfffc | 2;\n  }\n  *file_info = (int)file_info + 0x47;\n  file_info[4] = (int)file_info + 0x47;\n  file_info[5] = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006e10": "initialize_file_08006e10",
                "param_1": "param",
                "param_2": "file_info",
                "uVar1": "result",
                "iVar2": "allocated_memory",
                "local_18": "size",
                "local_14": "buffer",
                "__swhatbuf_r": "read_content",
                "_malloc_r": "allocate_memory",
                "_isatty_r": "is_terminal",
                "LAB_08006c34_1": "some_label"
            },
            "calling": [
                "FUN_080069e4"
            ],
            "called": [
                "FUN_08006288",
                "FUN_08007028",
                "FUN_08006dc8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08006e10": {
                    "3": "initialize_device",
                    "1": "initialize_read_stream",
                    "2": "parse_input",
                    "5": "initialize_file"
                },
                "param_1": {
                    "1": "context",
                    "4": "file_descriptor",
                    "3": "buffer_size"
                },
                "param_2": {
                    "3": "buffer",
                    "1": "stream_info",
                    "4": "file_info",
                    "2": "connection_data"
                },
                "uVar1": {
                    "1": "return_value1",
                    "2": "flags",
                    "5": "buffer_size",
                    "7": "result"
                },
                "iVar2": {
                    "1": "memory_address",
                    "13": "allocated_memory",
                    "2": "result"
                },
                "local_18": {
                    "1": "context",
                    "2": "local_var1",
                    "3": "local_variable1",
                    "7": "size"
                },
                "local_14": {
                    "3": "local_variable2",
                    "2": "local_var2",
                    "1": "input_pointer",
                    "6": "buffer"
                },
                "FUN_08006288": {
                    "1": "allocate_buffer"
                },
                "FUN_08007028": {
                    "1": "set_flag"
                },
                "FUN_08006dc8": {
                    "1": "process_data"
                },
                "FUM_08006288": {
                    "1": "allocate_memory_block"
                },
                "FUM_08007028": {
                    "1": "set_connection_details"
                },
                "FUM_08006dc8": {
                    "1": "parse_connection_parameters"
                },
                "__swhatbuf_r": {
                    "1": "read_content"
                },
                "_malloc_r": {
                    "2": "allocate_memory"
                },
                "_isatty_r": {
                    "1": "check_terminal"
                },
                "LAB_08006c34_1": {
                    "2": "some_label"
                }
            }
        },
        "FUN_08006e90": {
            "entrypoint": "0x08006e90",
            "current_name": "find_character_08006e90",
            "code": "\nchar * find_character_08006e90(char *string,char character,int length)\n\n{\n  char *current_char;\n  char *next_char;\n  \n  current_char = string;\n  do {\n    next_char = current_char;\n    if (next_char == string + length) {\n      return (char *)0x0;\n    }\n    current_char = next_char + 1;\n  } while (*next_char != character);\n  return next_char;\n}\n\n",
            "renaming": {
                "FUN_08006e90": "find_character_08006e90",
                "param_1": "string",
                "param_2": "character",
                "param_3": "length",
                "pcVar1": "current_char",
                "pcVar2": "next_char"
            },
            "calling": [
                "FUN_080066b0",
                "FUN_08006394"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08006e90": {
                    "4": "find_char_in_string",
                    "2": "find_char",
                    "3": "find_first_occurrence",
                    "17": "find_character"
                },
                "param_1": {
                    "27": "string",
                    "1": "input_string",
                    "3": "str"
                },
                "param_2": {
                    "1": "search_char",
                    "4": "target_char",
                    "3": "target",
                    "23": "character"
                },
                "param_3": {
                    "2": "str_length",
                    "7": "string_length",
                    "21": "length",
                    "1": "n"
                },
                "pcVar1": {
                    "2": "current_ptr",
                    "15": "current_char",
                    "3": "current_position",
                    "1": "ptr_string"
                },
                "pcVar2": {
                    "1": "current_position",
                    "14": "next_char",
                    "3": "next_position"
                }
            }
        },
        "FUN_08006eac": {
            "entrypoint": "0x08006eac",
            "current_name": "FUNC_08006eac",
            "code": "\nvoid FUNC_08006eac(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006eac": "FUNC_08006eac"
            },
            "calling": [
                "FUN_080061f0",
                "FUN_08006288"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08006eae": {
            "entrypoint": "0x08006eae",
            "current_name": "FUNC_08006eae",
            "code": "\nvoid FUNC_08006eae(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006eae": "FUNC_08006eae"
            },
            "calling": [
                "FUN_080061f0",
                "FUN_08006288"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08006f00": {
            "entrypoint": "0x08006f00",
            "current_name": "process_signal_08006f00",
            "code": "\nint process_signal_08006f00(uint input_value)\n\n{\n  int *data_ptr;\n  undefined4 process_id;\n  int value;\n  code *function_pointer;\n  undefined4 unaff_r4;\n  undefined4 unaff_r5;\n  undefined4 in_lr;\n  undefined4 *signal_table_ptr;\n  \n  data_ptr = DAT_200000f8;\n  signal_table_ptr = &DAT_200000f8;\n  if (0x1f < input_value) {\n    *DAT_200000f8 = 0x16;\n    return -1;\n  }\n  value = DAT_200000f8[0x11];\n  if ((value != 0) && (function_pointer = *(code **)(value + input_value * 4), function_pointer != (code *)0x0)) {\n    if (function_pointer != (code *)0x1) {\n      if (function_pointer == (code *)0xffffffff) {\n        *DAT_200000f8 = 0x16;\n        return 1;\n      }\n      *(undefined4 *)(value + input_value * 4) = 0;\n      (*function_pointer)(input_value);\n    }\n    return 0;\n  }\n  process_id = get_process_id(DAT_200000f8);\n  DAT_200006a4 = 0;\n  value = kill_process(process_id,input_value,input_value,0,signal_table_ptr,unaff_r4,unaff_r5,in_lr);\n  if ((value == -1) && (DAT_200006a4 != 0)) {\n    *data_ptr = DAT_200006a4;\n  }\n  return value;\n}\n\n",
            "renaming": {
                "param_1": "input_value",
                "piVar1": "data_ptr",
                "uVar2": "process_id",
                "iVar3": "value",
                "pcVar4": "function_pointer",
                "puVar5": "signal_table_ptr",
                "FUN_08006f00": "process_signal_08006f00",
                "_getpid_r": "get_process_id",
                "_kill": "kill_process"
            },
            "calling": [
                "FUN_08006ac0"
            ],
            "called": [
                "FUN_08006f34",
                "FUN_08005740"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "param_1": {
                    "6": "input",
                    "2": "parameter",
                    "10": "input_value",
                    "3": "signal",
                    "1": "input_param",
                    "4": "signal_number"
                },
                "piVar1": {
                    "1": "variable1",
                    "2": "signal_handler",
                    "3": "data_ptr"
                },
                "uVar2": {
                    "1": "variable2",
                    "11": "pid",
                    "14": "process_id"
                },
                "iVar3": {
                    "1": "data_value",
                    "2": "temp_var",
                    "3": "signal_handler",
                    "6": "value"
                },
                "pcVar4": {
                    "1": "current_handler",
                    "9": "function_ptr",
                    "3": "handler_function"
                },
                "puVar5": {
                    "1": "handler_table",
                    "2": "signal_table_ptr"
                },
                "FUN_08006f00": {
                    "6": "process_signal",
                    "2": "handle_signal",
                    "1": "execute_command"
                },
                "unaff_r4": {
                    "1": "unaffected_register_4",
                    "3": "unaff_r4",
                    "2": "register4"
                },
                "unaff_r5": {
                    "1": "unused_register_5",
                    "2": "register5",
                    "3": "unaff_r5"
                },
                "in_lr": {
                    "1": "unused_register_lr",
                    "2": "in_link_register",
                    "4": "in_lr",
                    "3": "link_register"
                },
                "_getpid_r": {
                    "4": "get_process_id"
                },
                "_kill": {
                    "1": "terminate_process",
                    "3": "kill_process"
                },
                "DAT_200000f8": {
                    "1": "data_var1"
                },
                "DAT_200006a4": {
                    "1": "data_var2",
                    "2": "error_code"
                }
            }
        },
        "FUN_08006f34": {
            "entrypoint": "0x08006f34",
            "current_name": "FUN_08006f34",
            "code": "\nundefined4 _getpid(void)\n\n{\n  return 1;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_08006f00"
            ],
            "called": [
                "FUN_08005750"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006f38": {
            "entrypoint": "0x08006f38",
            "current_name": "update_data_08006f38",
            "code": "\nvoid update_data_08006f38(undefined4 buffer,int data)\n\n{\n  int read_result;\n  uint updated_value;\n  bool is_success;\n  \n  read_result = _read_r(buffer,(int)*(short *)(data + 0xe));\n  is_success = -1 < read_result;\n  if (is_success) {\n    updated_value = *(int *)(data + 0x54) + read_result;\n  }\n  else {\n    updated_value = *(ushort *)(data + 0xc) & 0xffffefff;\n  }\n  if (is_success) {\n    *(uint *)(data + 0x54) = updated_value;\n  }\n  if (!is_success) {\n    *(short *)(data + 0xc) = (short)updated_value;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006f38": "update_data_08006f38",
                "param_1": "buffer",
                "param_2": "data",
                "iVar1": "read_result",
                "uVar2": "updated_value",
                "bVar3": "is_success"
            },
            "calling": [],
            "called": [
                "FUN_0800706c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08006f38": {
                    "1": "update_values",
                    "2": "update_value",
                    "3": "read_and_update_value",
                    "19": "update_data"
                },
                "param_1": {
                    "2": "buffer_address",
                    "1": "input_data",
                    "3": "file_descriptor",
                    "12": "buffer"
                },
                "param_2": {
                    "7": "data",
                    "2": "data_offset",
                    "3": "data_address",
                    "4": "offset",
                    "1": "arg2"
                },
                "iVar1": {
                    "2": "bytes_read",
                    "1": "return_value",
                    "24": "read_result"
                },
                "uVar2": {
                    "1": "new_offset",
                    "7": "new_value",
                    "20": "updated_value",
                    "2": "new_data"
                },
                "bVar3": {
                    "12": "is_success",
                    "2": "is_successful",
                    "3": "is_valid",
                    "5": "is_read_successful",
                    "1": "is_successful_read",
                    "6": "is_positive"
                }
            }
        },
        "FUN_08006f5a": {
            "entrypoint": "0x08006f5a",
            "current_name": "write_to_file_08006f5a",
            "code": "\nvoid write_to_file_08006f5a(int *file_descriptor,int buffer_address,undefined4 data,undefined4 size)\n\n{\n  int write_result;\n  undefined4 unused1;\n  undefined4 unused2;\n  undefined4 unused3;\n  \n  if ((int)((uint)*(ushort *)(buffer_address + 0xc) << 0x17) < 0) {\n    _lseek_r(file_descriptor,(int)*(short *)(buffer_address + 0xe),0,2);\n  }\n  *(ushort *)(buffer_address + 0xc) = *(ushort *)(buffer_address + 0xc) & 0xefff;\n  DAT_200006a4 = 0;\n  write_result = _write((int)*(short *)(buffer_address + 0xe),data,size,size,size,unused1,unused2,\n                 unused3);\n  if ((write_result == -1) && (DAT_200006a4 != 0)) {\n    *file_descriptor = DAT_200006a4;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006f5a": "write_to_file_08006f5a",
                "param_1": "file_descriptor",
                "param_2": "buffer_address",
                "param_3": "data",
                "param_4": "size",
                "iVar1": "write_result",
                "unaff_r4": "unused1",
                "unaff_r5": "unused2",
                "in_lr": "unused3"
            },
            "calling": [],
            "called": [
                "FUN_08007048",
                "FUN_08005730"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08006f5a": {
                    "1": "rewrite_function",
                    "4": "write_data",
                    "14": "write_to_file",
                    "3": "write_data_to_file"
                },
                "param_1": {
                    "30": "file_descriptor",
                    "1": "buffer"
                },
                "param_2": {
                    "3": "file_info",
                    "2": "header_offset",
                    "1": "buffer_pointer",
                    "10": "buffer_address",
                    "7": "buffer"
                },
                "param_3": {
                    "14": "data",
                    "2": "data_buffer",
                    "1": "data_pointer",
                    "5": "data_address",
                    "8": "buffer"
                },
                "param_4": {
                    "1": "size_of_data",
                    "11": "size",
                    "2": "buffer_size",
                    "4": "count"
                },
                "iVar1": {
                    "26": "write_result",
                    "2": "write_status"
                },
                "unaff_r4": {
                    "2": "unused1",
                    "1": "unused_var1"
                },
                "unaff_r5": {
                    "1": "unused_var2",
                    "2": "unused2"
                },
                "in_lr": {
                    "2": "unused3",
                    "1": "unused_var3"
                }
            }
        },
        "FUN_08006f92": {
            "entrypoint": "0x08006f92",
            "current_name": "update_file_position_08006f92",
            "code": "\nvoid update_file_position_08006f92(undefined4 file_descriptor,int struct_address)\n\n{\n  int seek_result;\n  ushort modified_flags;\n  bool is_seek_error;\n  \n  seek_result = _lseek_r(file_descriptor,(int)*(short *)(struct_address + 0xe));\n  is_seek_error = seek_result == -1;\n  if (is_seek_error) {\n    modified_flags = *(ushort *)(struct_address + 0xc) & 0xefff;\n  }\n  else {\n    *(int *)(struct_address + 0x54) = seek_result;\n    modified_flags = *(ushort *)(struct_address + 0xc) | 0x1000;\n  }\n  if (is_seek_error) {\n    *(ushort *)(struct_address + 0xc) = modified_flags;\n  }\n  if (!is_seek_error) {\n    *(ushort *)(struct_address + 0xc) = modified_flags;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006f92": "update_file_position_08006f92",
                "param_1": "file_descriptor",
                "param_2": "struct_address",
                "iVar1": "seek_result",
                "uVar2": "modified_flags",
                "bVar3": "is_seek_error"
            },
            "calling": [],
            "called": [
                "FUN_08007048"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08006f92": {
                    "1": "perform_seek",
                    "2": "seek_and_set_flag",
                    "3": "update_file_position"
                },
                "param_1": {
                    "1": "fd",
                    "30": "file_descriptor"
                },
                "param_2": {
                    "2": "context",
                    "1": "data_struct_ptr",
                    "6": "struct_address",
                    "4": "data_struct",
                    "3": "struct_pointer"
                },
                "iVar1": {
                    "23": "seek_result",
                    "1": "result",
                    "3": "lseek_result"
                },
                "uVar2": {
                    "2": "new_flag",
                    "6": "modified_flags",
                    "1": "flag_value",
                    "3": "modified_flag",
                    "4": "flags",
                    "5": "updated_flag"
                },
                "bVar3": {
                    "8": "is_seek_error",
                    "1": "is_lseek_error",
                    "7": "is_error",
                    "6": "seek_failed"
                }
            }
        },
        "FUN_08007004": {
            "entrypoint": "0x08007004",
            "current_name": "get_file_status_08007004",
            "code": "\nvoid get_file_status_08007004(int *result,undefined4 file_descriptor,undefined4 stat_buffer,undefined4 buffer_size)\n\n{\n  int status;\n  \n  DAT_200006a4 = 0;\n  status = get_file_status_08007004(file_descriptor,stat_buffer,stat_buffer,0,buffer_size);\n  if ((status == -1) && (DAT_200006a4 != 0)) {\n    *result = DAT_200006a4;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007004": "get_file_status_08007004",
                "param_1": "result",
                "param_2": "file_descriptor",
                "param_3": "stat_buffer",
                "param_4": "buffer_size",
                "iVar1": "status",
                "_fstat": "get_file_status"
            },
            "calling": [
                "FUN_08006dc8"
            ],
            "called": [
                "FUN_0800571a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08007004": {
                    "4": "get_file_size",
                    "1": "update_param_if_fstat_fails",
                    "2": "check_and_assign",
                    "5": "get_file_status"
                },
                "param_1": {
                    "3": "output",
                    "1": "error_flag_ptr",
                    "2": "result_ptr",
                    "12": "result"
                },
                "param_2": {
                    "5": "fd",
                    "1": "param1",
                    "24": "file_descriptor"
                },
                "param_3": {
                    "1": "st",
                    "2": "buf",
                    "3": "buffer",
                    "16": "stat_buffer"
                },
                "param_4": {
                    "1": "buf",
                    "16": "buffer_size",
                    "2": "path"
                },
                "iVar1": {
                    "2": "result",
                    "6": "fstat_result",
                    "1": "status_check",
                    "10": "status",
                    "3": "stat_result"
                },
                "_fstat": {
                    "1": "get_file_stat",
                    "3": "get_file_status"
                },
                "DAT_200006a4": {
                    "1": "error_code"
                },
                "VAR_1": {
                    "1": "status"
                },
                "FUN_0800571a": {
                    "1": "some_function"
                }
            }
        },
        "FUN_08007028": {
            "entrypoint": "0x08007028",
            "current_name": "check_and_assign_terminal_08007028",
            "code": "\nvoid check_and_assign_terminal_08007028(int *result,undefined4 file_descriptor)\n\n{\n  int is_terminal;\n  \n  DAT_200006a4 = 0;\n  is_terminal = check_tty(file_descriptor);\n  if ((is_terminal == -1) && (DAT_200006a4 != 0)) {\n    *result = DAT_200006a4;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007028": "check_and_assign_terminal_08007028",
                "param_1": "result",
                "param_2": "file_descriptor",
                "iVar1": "is_terminal",
                "_isatty": "check_tty"
            },
            "calling": [
                "FUN_08006e10"
            ],
            "called": [
                "FUN_08005724"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08007028": {
                    "1": "set_terminal_width",
                    "3": "check_terminal_status",
                    "2": "check_and_assign_tty"
                },
                "param_1": {
                    "1": "output_buffer",
                    "4": "output_status",
                    "2": "result_ptr",
                    "8": "result"
                },
                "param_2": {
                    "1": "input",
                    "28": "file_descriptor"
                },
                "iVar1": {
                    "11": "is_terminal",
                    "8": "is_tty",
                    "2": "is_tty_result",
                    "4": "tty_status"
                },
                "_isatty": {
                    "1": "is_terminal_function",
                    "2": "check_tty"
                },
                "*param_1": {
                    "1": "output_width"
                },
                "DAT_200006a4": {
                    "1": "stored_tty_status",
                    "3": "saved_value"
                }
            }
        },
        "FUN_08007048": {
            "entrypoint": "0x08007048",
            "current_name": "seek_and_assign_08007048",
            "code": "\nvoid seek_and_assign_08007048(int *result,undefined4 file_descriptor,undefined4 offset,undefined4 whence)\n\n{\n  int seek_result;\n  \n  DAT_200006a4 = 0;\n  seek_result = perform_seek(file_descriptor,offset,whence,whence,whence);\n  if ((seek_result == -1) && (DAT_200006a4 != 0)) {\n    *result = DAT_200006a4;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007048": "seek_and_assign_08007048",
                "param_1": "result",
                "param_2": "file_descriptor",
                "param_3": "offset",
                "param_4": "whence",
                "iVar1": "seek_result",
                "_lseek": "perform_seek"
            },
            "calling": [
                "FUN_08006f5a",
                "FUN_08006f92"
            ],
            "called": [
                "FUN_08005728"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08007048": {
                    "1": "reposition_file_cursor",
                    "2": "seek_and_assign_error",
                    "3": "seek_and_assign"
                },
                "param_1": {
                    "1": "copied_data_ptr",
                    "4": "result_pointer",
                    "2": "output",
                    "13": "result"
                },
                "param_2": {
                    "1": "file_handle",
                    "30": "file_descriptor"
                },
                "param_3": {
                    "1": "file_offset",
                    "30": "offset"
                },
                "param_4": {
                    "8": "origin",
                    "1": "seek_type",
                    "22": "whence"
                },
                "iVar1": {
                    "2": "lseek_result",
                    "24": "seek_result"
                },
                "DAT_200006a4": {
                    "1": "error_flag"
                },
                "_lseek": {
                    "1": "perform_seek"
                },
                "FUN_08005728": {
                    "1": "get_default_value"
                }
            }
        },
        "FUN_0800706c": {
            "entrypoint": "0x0800706c",
            "current_name": "read_and_store_data_0800706c",
            "code": "\nvoid read_and_store_data_0800706c(int *result,undefined4 file_descriptor,undefined4 buffer,undefined4 count)\n\n{\n  int read_result;\n  \n  DAT_200006a4 = 0;\n  read_result = read_function(file_descriptor,buffer,count,count,count);\n  if ((read_result == -1) && (DAT_200006a4 != 0)) {\n    *result = DAT_200006a4;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800706c": "read_and_store_data_0800706c",
                "param_1": "result",
                "param_2": "file_descriptor",
                "param_3": "buffer",
                "param_4": "count",
                "iVar1": "read_result",
                "_read": "read_function"
            },
            "calling": [
                "FUN_08006f38"
            ],
            "called": [
                "FUN_0800572c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800572c": {
                    "1": "get_error_code"
                },
                "FUN_0800706c": {
                    "1": "read_and_assign_error",
                    "2": "read_and_assign",
                    "3": "read_and_assign_value",
                    "4": "read_and_assign_error_code"
                },
                "param_1": {
                    "1": "data_address",
                    "5": "output",
                    "8": "result",
                    "3": "result_pointer"
                },
                "param_2": {
                    "1": "source_file_descriptor",
                    "27": "file_descriptor"
                },
                "param_3": {
                    "28": "buffer",
                    "1": "buf"
                },
                "param_4": {
                    "1": "bytes_to_read",
                    "25": "count",
                    "3": "size"
                },
                "iVar1": {
                    "28": "read_result",
                    "1": "read_status"
                },
                "DAT_200006a4": {
                    "1": "error_value"
                },
                "_read": {
                    "1": "read_function"
                }
            }
        },
        "FUN_08007090": {
            "entrypoint": "0x08007090",
            "current_name": "handle_exception_08007090",
            "code": "\nvoid handle_exception_08007090(void)\n\n{\n  code *jump_table;\n  \n  jump_table = handle_exception_08007090;\n  abort();\n  if (-1 < DAT_2000062c << 0x1f) {\n    DAT_2000062c = 1;\n  }\n  if (-1 < DAT_20000628 << 0x1f) {\n    DAT_20000628 = 1;\n  }\n  if (-1 < DAT_20000624 << 0x1f) {\n    DAT_20000624 = 1;\n  }\n  if (-1 < DAT_20000620 << 0x1f) {\n    DAT_20000620 = 1;\n  }\n  if (-1 < DAT_2000061c << 0x1f) {\n    DAT_2000061c = 1;\n  }\n  if (-1 < DAT_20000618 << 0x1f) {\n    DAT_20000618 = 1;\n  }\n  if (-1 < DAT_20000614 << 0x1f) {\n    DAT_20000614 = 1;\n  }\n  if (-1 < DAT_20000610 << 0x1f) {\n    DAT_20000610 = 1;\n  }\n  if (-1 < DAT_2000060c << 0x1f) {\n    DAT_2000060c = 1;\n  }\n  if (-1 < DAT_20000608 << 0x1f) {\n    DAT_20000608 = 1;\n  }\n  if (-1 < DAT_20000604 << 0x1f) {\n    DAT_20000604 = 1;\n  }\n  if (-1 < DAT_20000600 << 0x1f) {\n    DAT_20000600 = 1;\n  }\n                    /* WARNING: Could not recover jumptable at 0x08007128. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jump_table)();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007090": "handle_exception_08007090",
                "UNRECOVERED_JUMPTABLE": "jump_table"
            },
            "calling": [
                "FUN_080060d4"
            ],
            "called": [
                "FUN_08006ac0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08007090": {
                    "10": "handle_exception",
                    "2": "initialize_flags",
                    "1": "handle_abort",
                    "8": "initialize_data"
                },
                "handle_exception_08006ac0": {
                    "23": "handle_exception",
                    "1": "exception_handler"
                },
                "UNRECOVERED_JUMPTABLE": {
                    "2": "jumptable",
                    "5": "exception_handler",
                    "7": "jump_table",
                    "1": "jmp_table"
                },
                "DAT_2000062c": {
                    "1": "data_1"
                },
                "DAT_20000628": {
                    "1": "data_2"
                },
                "DAT_20000624": {
                    "1": "data_3"
                },
                "DAT_20000620": {
                    "1": "data_4"
                },
                "DAT_2000061c": {
                    "1": "data_5"
                },
                "DAT_20000618": {
                    "1": "variable_f"
                },
                "DAT_20000614": {
                    "1": "variable_g"
                },
                "DAT_20000610": {
                    "1": "data8"
                },
                "DAT_2000060c": {
                    "1": "data_9"
                },
                "DAT_20000608": {
                    "1": "variable_j"
                },
                "DAT_20000604": {
                    "1": "variable_k"
                },
                "DAT_20000600": {
                    "1": "data12"
                }
            }
        },
        "FUN_08007328": {
            "entrypoint": "0x08007328",
            "current_name": "FUNC_08007328",
            "code": "\nvoid FUNC_08007328(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007328": "FUNC_08007328"
            },
            "calling": [
                "FUN_08006198",
                "FUN_0800010c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08007334": {
            "entrypoint": "0x08007334",
            "current_name": "FUNC_08007334",
            "code": "\nvoid FUNC_08007334(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007334": "FUNC_08007334"
            },
            "calling": [],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        }
    },
    "used_tokens": 921418,
    "layers": [
        [
            "FUN_0800010c",
            "FUN_08000178",
            "FUN_08000190",
            "FUN_08000194",
            "FUN_0800040c",
            "FUN_0800042c",
            "FUN_080006d4",
            "FUN_080008ba",
            "FUN_0800092c",
            "FUN_080009a8",
            "FUN_080009b8",
            "FUN_080009c8",
            "FUN_080009dc",
            "FUN_080009f0",
            "FUN_08000a04",
            "FUN_08000a18",
            "FUN_08000a2c",
            "FUN_08000a58",
            "FUN_08000aa8",
            "FUN_08000ae8",
            "FUN_08000aec",
            "FUN_08000b08",
            "FUN_08001294",
            "FUN_080012a2",
            "FUN_080012c0",
            "FUN_080012e8",
            "FUN_08001310",
            "FUN_0800134e",
            "FUN_0800135a",
            "FUN_08001366",
            "FUN_0800138e",
            "FUN_080013a4",
            "FUN_08001550",
            "FUN_0800157c",
            "FUN_080015b2",
            "FUN_080015f8",
            "FUN_080016b4",
            "FUN_08001814",
            "FUN_08001918",
            "FUN_08001960",
            "FUN_080019f6",
            "FUN_08001a44",
            "FUN_08001a66",
            "FUN_08001b48",
            "FUN_08001be8",
            "FUN_08001c32",
            "FUN_08001c3c",
            "FUN_08001c88",
            "FUN_08001cac",
            "FUN_08001cc4",
            "FUN_08001cd0",
            "FUN_08001e40",
            "FUN_08001e48",
            "FUN_08001f80",
            "FUN_08001f84",
            "FUN_08002004",
            "FUN_080020f0",
            "FUN_0800213c",
            "FUN_0800224c",
            "FUN_08002348",
            "FUN_08002384",
            "FUN_08002470",
            "FUN_08002494",
            "FUN_080024f8",
            "FUN_08002514",
            "FUN_08002540",
            "FUN_08002560",
            "FUN_08002582",
            "FUN_0800258c",
            "FUN_08002624",
            "FUN_08002810",
            "FUN_0800281e",
            "FUN_0800282c",
            "FUN_08002848",
            "FUN_080028d2",
            "FUN_080028de",
            "FUN_08002ab8",
            "FUN_08002ad8",
            "FUN_08002af8",
            "FUN_08002b84",
            "FUN_08002c10",
            "FUN_08002c54",
            "FUN_08002ca6",
            "FUN_08002cf2",
            "FUN_08002d1c",
            "FUN_08002db2",
            "FUN_08002efc",
            "FUN_08002f9c",
            "FUN_0800306c",
            "FUN_0800316c",
            "FUN_080032b4",
            "FUN_080033b8",
            "FUN_08003520",
            "FUN_0800365c",
            "FUN_08003688",
            "FUN_08003a68",
            "FUN_08003ad4",
            "FUN_08003afa",
            "FUN_08003c44",
            "FUN_08003c50",
            "FUN_08003c70",
            "FUN_08003c90",
            "FUN_08003da4",
            "FUN_08003ea0",
            "FUN_08003ed8",
            "FUN_08003f18",
            "FUN_08004092",
            "FUN_080040b0",
            "FUN_08004110",
            "FUN_0800412c",
            "FUN_0800417c",
            "FUN_08004198",
            "FUN_08004204",
            "FUN_080043b4",
            "FUN_0800441a",
            "FUN_08004478",
            "FUN_0800455a",
            "FUN_080045a2",
            "FUN_080045fe",
            "FUN_08004618",
            "FUN_080046b8",
            "FUN_080047e8",
            "FUN_080047f4",
            "FUN_0800480a",
            "FUN_08004828",
            "FUN_08004848",
            "FUN_08004884",
            "FUN_0800492c",
            "FUN_08004948",
            "FUN_08004974",
            "FUN_080049f0",
            "FUN_08004a4c",
            "FUN_08004b34",
            "FUN_08004b3c",
            "FUN_08004b94",
            "FUN_08004b9e",
            "FUN_08004bb0",
            "FUN_08004c30",
            "FUN_08004c48",
            "FUN_08004c52",
            "FUN_08004c5e",
            "FUN_08004c78",
            "FUN_08004c8a",
            "FUN_08004ca2",
            "FUN_08004cb2",
            "FUN_08004cce",
            "FUN_08004ce2",
            "FUN_08004d06",
            "FUN_08004d18",
            "FUN_08004d40",
            "FUN_08004d44",
            "FUN_08004d90",
            "FUN_08004df4",
            "FUN_08004df8",
            "FUN_08004e12",
            "FUN_08004e20",
            "FUN_08004e70",
            "FUN_08004e74",
            "FUN_08004ec4",
            "FUN_08004ef4",
            "FUN_08004f4c",
            "FUN_08005384",
            "FUN_080053d4",
            "FUN_0800548c",
            "FUN_080054b0",
            "FUN_080054d4",
            "FUN_08005510",
            "FUN_08005568",
            "FUN_080055bc",
            "FUN_080055e0",
            "FUN_08005604",
            "FUN_080056d8",
            "FUN_08005714",
            "FUN_0800571a",
            "FUN_08005724",
            "FUN_08005728",
            "FUN_0800572c",
            "FUN_08005730",
            "FUN_0800573c",
            "FUN_08005740",
            "FUN_08005750",
            "FUN_08005754",
            "FUN_080057b4",
            "FUN_08005848",
            "FUN_08005890",
            "FUN_080058e0",
            "FUN_0800591e",
            "FUN_0800598a",
            "FUN_08005a44",
            "FUN_08005a68",
            "FUN_08005b24",
            "FUN_08005b3c",
            "FUN_08005b54",
            "FUN_08005bb0",
            "FUN_08005c1c",
            "FUN_08005c38",
            "FUN_08005c96",
            "FUN_08005cb6",
            "FUN_08005cc0",
            "FUN_08005ce8",
            "FUN_08005d8a",
            "FUN_08005f2c",
            "FUN_08005f6c",
            "FUN_08005f8c",
            "FUN_08005fc8",
            "FUN_080060e4",
            "FUN_08006112",
            "FUN_0800611c",
            "FUN_08006158",
            "FUN_08006174",
            "FUN_08006198",
            "FUN_080061e0",
            "FUN_080061f0",
            "FUN_08006288",
            "FUN_08006344",
            "FUN_08006370",
            "FUN_08006394",
            "FUN_080065c0",
            "FUN_080066b0",
            "FUN_080068f0",
            "FUN_08006920",
            "FUN_080069e4",
            "FUN_08006ac0",
            "FUN_08006be0",
            "FUN_08006c40",
            "FUN_08006c88",
            "FUN_08006cb4",
            "FUN_08006d14",
            "FUN_08006dc8",
            "FUN_08006e10",
            "FUN_08006e90",
            "FUN_08006f00",
            "FUN_08006f38",
            "FUN_08006f5a",
            "FUN_08006f92",
            "FUN_08007004",
            "FUN_08007028",
            "FUN_08007048",
            "FUN_0800706c"
        ],
        [
            "FUN_080004f8",
            "FUN_0800074c",
            "FUN_08000bcc",
            "FUN_080014ba",
            "FUN_080018f8",
            "FUN_08001ab0",
            "FUN_08005cd4",
            "FUN_08005d42",
            "FUN_08005f40",
            "FUN_08005f5e"
        ],
        [
            "FUN_08001510",
            "FUN_08001b18",
            "FUN_08005d82"
        ],
        [
            "FUN_08000cd0",
            "FUN_08005da8"
        ],
        [
            "FUN_080060d4",
            "FUN_08007090"
        ]
    ],
    "locked_functions": []
}