{
    "functions": {
        "FUN_08002470": {
            "renaming": {
                "FUN_08002470": "set_param_value_08002470",
                "param_1": "param_value",
                "*(uint *)(DAT_08002490 + 0xc)": "current_value",
                "param_ptr": "param_ptr",
                "modified_value": "modified_value"
            },
            "code": "void set_param_value_08002470(uint param_value) {\n    uint* param_ptr = (uint*)(DAT_08002490 + 0xc);\n    uint *(uint *)(DAT_08002490 + 0xc) = *param_ptr;\n    uint modified_value = (param_value & 7) << 8 | (*(uint *)(DAT_08002490 + 0xc) & 0xf8ff) | 0x5fa0000;\n    *param_ptr = modified_value;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002470",
            "calling": [
                "FUN_08001c88",
                "FUN_08005f5e"
            ],
            "imported": false,
            "current_name": "set_param_value_08002470"
        },
        "FUN_08007004": {
            "renaming": {
                "FUN_08007004": "set_memory_permissions_08007004",
                "param_1": "result",
                "param_2": "address",
                "param_3": "size",
                "param_4": "permissions",
                "puVar1": "ptr",
                "iVar2": "return_value"
            },
            "code": "void set_memory_permissions_08007004(int *result, int address, int size, int permissions, int unknown) {\n    int return_value = set_memory_permissions_08007004_0800571a(address, size, size, permissions, unknown);\n    if (return_value == -1 && *PTR_DAT_08007024 != 0) {\n        *result = *PTR_DAT_08007024;\n    }\n    return;\n}",
            "called": [
                "FUN_0800571a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007004",
            "calling": [
                "FUN_08006dc8"
            ],
            "imported": false,
            "current_name": "set_memory_permissions_08007004"
        },
        "FUN_08006394": {
            "renaming": {
                "FUN_08006394": "FUNC_08006394"
            },
            "code": "\nint FUNC_08006394(int param_1,undefined *param_2,byte *param_3,int *param_4)\n\n{\n  undefined *puVar1;\n  int iVar2;\n  int *piVar3;\n  bool bVar4;\n  byte *pbVar5;\n  byte *pbVar6;\n  int unaff_r9;\n  int iVar7;\n  int *local_8c;\n  uint local_88;\n  int local_84;\n  undefined4 local_80;\n  int local_7c;\n  int local_74;\n  byte local_70;\n  undefined local_6f;\n  undefined local_6e;\n  undefined local_45;\n  undefined4 local_30;\n  \n  local_8c = param_4;\n  if ((param_1 != 0) && (*(int *)(param_1 + 0x18) == 0)) {\n    initialize_params_08006cb4();\n  }\n  if (param_2 == PTR_DAT_080065a0) {\n    param_2 = *(undefined **)(param_1 + 4);\n  }\n  else if (param_2 == PTR_DAT_080065a8) {\n    param_2 = *(undefined **)(param_1 + 8);\n  }\n  else if (param_2 == PTR_DAT_080065ac) {\n    param_2 = *(undefined **)(param_1 + 0xc);\n  }\n  if (((-1 < (int)((uint)*(ushort *)(param_2 + 0xc) << 0x1c)) || (*(int *)(param_2 + 0x10) == 0)) &&\n     (iVar7 = check_and_update_buffer_080069e4(param_1,param_2), iVar7 != 0)) {\n    return -1;\n  }\n  local_74 = 0;\n  local_6f = 0x20;\n  local_6e = 0x30;\n  pbVar5 = param_3;\nLAB_080063d6:\n  pbVar6 = pbVar5;\n  if (*pbVar6 != 0) goto LAB_0800648c;\n  goto LAB_080063e0;\nLAB_0800648c:\n  pbVar5 = pbVar6 + 1;\n  if (*pbVar6 != 0x25) goto LAB_080063d6;\nLAB_080063e0:\n  iVar7 = (int)pbVar6 - (int)param_3;\n  if (iVar7 != 0) {\n    iVar2 = process_input_08006370(param_1,param_2,param_3,iVar7);\n    if (iVar2 == -1) {\nLAB_08006580:\n      if ((int)((uint)*(ushort *)(param_2 + 0xc) << 0x19) < 0) {\n        return -1;\n      }\n      return local_74;\n    }\n    local_74 = local_74 + iVar7;\n  }\n  if (*pbVar6 == 0) goto LAB_08006580;\n  local_88 = 0;\n  local_7c = 0;\n  local_84 = -1;\n  local_80 = 0;\n  local_45 = 0;\n  local_30 = 0;\n  pbVar5 = pbVar6 + 1;\n  while( true ) {\n    iVar7 = find_char_in_string_08006e90(PTR_s___0__080065a4,*pbVar5);\n    puVar1 = PTR_DAT_080065b0;\n    param_3 = pbVar5 + 1;\n    if (iVar7 == 0) break;\n    local_88 = 1 << (iVar7 - (int)PTR_s___0__080065a4 & 0xffU) | local_88;\n    pbVar5 = param_3;\n  }\n  if ((int)(local_88 << 0x1b) < 0) {\n    local_45 = 0x20;\n  }\n  if ((int)(local_88 << 0x1c) < 0) {\n    local_45 = 0x2b;\n  }\n  if (*pbVar5 == 0x2a) {\n    piVar3 = local_8c + 1;\n    iVar7 = *local_8c;\n    local_8c = piVar3;\n    if (-1 < iVar7) goto LAB_080064b0;\n    local_7c = -iVar7;\n    local_88 = local_88 | 2;\n  }\n  else {\n    bVar4 = false;\n    iVar7 = local_7c;\n    param_3 = pbVar5;\n    while( true ) {\n      if (9 < *param_3 - 0x30) break;\n      iVar7 = iVar7 * 10 + (*param_3 - 0x30);\n      bVar4 = true;\n      param_3 = param_3 + 1;\n    }\n    if (bVar4) {\nLAB_080064b0:\n      local_7c = iVar7;\n    }\n  }\n  if (*param_3 == 0x2e) {\n    if (param_3[1] == 0x2a) {\n      param_3 = param_3 + 2;\n      piVar3 = local_8c + 1;\n      local_84 = *local_8c;\n      local_8c = piVar3;\n      if (local_84 < 0) {\n        local_84 = -1;\n      }\n    }\n    else {\n      bVar4 = false;\n      iVar7 = 0;\n      local_84 = 0;\n      while( true ) {\n        param_3 = param_3 + 1;\n        if (9 < *param_3 - 0x30) break;\n        iVar7 = iVar7 * 10 + (*param_3 - 0x30);\n        bVar4 = true;\n      }\n      if (bVar4) {\n        local_84 = iVar7;\n      }\n    }\n  }\n  iVar7 = find_char_in_string_08006e90(PTR_DAT_080065b0,*param_3,3);\n  if (iVar7 != 0) {\n    param_3 = param_3 + 1;\n    local_88 = local_88 | 0x40 << (iVar7 - (int)puVar1 & 0xffU);\n  }\n  local_70 = *param_3;\n  param_3 = param_3 + 1;\n  iVar7 = find_char_in_string_08006e90(PTR_s_efgEFG_080065b4,local_70,6);\n  if (iVar7 == 0) {\n    iVar7 = FUNC_080066b0(param_1,&local_88,param_2,DAT_080065bc,&local_8c);\n  }\n  else {\n    iVar7 = param_1;\n    if (DAT_080065b8 == 0) {\n      local_8c = (int *)(((int)local_8c + 7U & 0xfffffff8) + 8);\n      iVar7 = unaff_r9;\n      goto LAB_08006532;\n    }\n  }\n  if (iVar7 == -1) goto LAB_08006580;\nLAB_08006532:\n  local_74 = local_74 + iVar7;\n  pbVar5 = param_3;\n  unaff_r9 = iVar7;\n  goto LAB_080063d6;\n}\n\n",
            "called": [
                "FUN_080066b0",
                "FUN_080069e4",
                "FUN_08006e90",
                "FUN_08006cb4",
                "FUN_08006370"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08006394",
            "calling": [
                "FUN_08006174",
                "FUN_080068f0"
            ],
            "imported": false,
            "current_name": "FUNC_08006394"
        },
        "FUN_08005740": {
            "renaming": {
                "FUN_08005740": "set_pointer_value_08005740",
                "PTR_DAT_0800574c": "pointer_to_value",
                "0xffffffff": "return_value"
            },
            "code": "void set_pointer_value_08005740(void)\n{\n    int value_to_set = 22;\n    int* PTR_DAT_0800574c = (int*) PTR_DAT_0800574c;\n    *PTR_DAT_0800574c = value_to_set;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005740",
            "calling": [
                "FUN_08006f00"
            ],
            "imported": false,
            "current_name": "set_pointer_value_08005740"
        },
        "FUN_08006158": {
            "renaming": {
                "FUN_08006158": "concatenate_or_shift_08006158",
                "param_1": "value",
                "param_2": "shift_amount"
            },
            "code": "long long concatenate_or_shift_08006158(uint32_t value, uint64_t shift_amount) {\n  if (DAT_08006170 != 0) {\n    return CONCAT44(value, 2);\n  }\n  return (uint64_t)value << shift_amount;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006158",
            "calling": [
                "FUN_08006112"
            ],
            "imported": false,
            "current_name": "concatenate_or_shift_08006158"
        },
        "FUN_08003688": {
            "renaming": {
                "FUN_08003688": "FUNC_08003688"
            },
            "code": "\n/* WARNING: Globals starting with '_' overlap smaller symbols at the same address */\n\nundefined4 FUNC_08003688(uint *param_1)\n\n{\n  uint *puVar1;\n  uint *puVar2;\n  int iVar3;\n  int iVar4;\n  undefined4 uVar5;\n  uint uVar6;\n  bool bVar7;\n  \n  puVar1 = DAT_08003948;\n  if ((*param_1 & 1) != 0) {\n    if (((DAT_08003948[1] & 0xc) == 4) ||\n       (((DAT_08003948[1] & 0xc) == 8 && ((DAT_08003948[1] & 0x10000) != 0)))) {\n      if (((*DAT_08003948 & 0x20000) != 0) && (param_1[1] == 0)) {\n        return 1;\n      }\n    }\n    else {\n      uVar6 = param_1[1];\n      if (uVar6 == 0x10000) {\n        *DAT_08003948 = *DAT_08003948 | 0x10000;\n      }\n      else if (uVar6 == 0) {\n        _DAT_40021000 = _DAT_40021000 & 0xfffaffff;\n      }\n      else if (uVar6 == 0x50000) {\n        _DAT_40021000 = _DAT_40021000 | 0x50000;\n      }\n      else {\n        *DAT_08003948 = *DAT_08003948 & 0xfffeffff;\n        *puVar1 = *puVar1 & 0xfffbffff;\n      }\n      if (param_1[1] == 0) {\n        iVar3 = get_value_from_pointer_08001cc4();\n        while ((*DAT_08003948 & 0x20000) != 0) {\n          iVar4 = get_value_from_pointer_08001cc4();\n          if (100 < (uint)(iVar4 - iVar3)) {\n            return 3;\n          }\n        }\n      }\n      else {\n        iVar3 = get_value_from_pointer_08001cc4();\n        while ((*DAT_08003948 & 0x20000) == 0) {\n          iVar4 = get_value_from_pointer_08001cc4();\n          if (100 < (uint)(iVar4 - iVar3)) {\n            return 3;\n          }\n        }\n      }\n    }\n  }\n  if ((*param_1 & 2) != 0) {\n    if (((DAT_08003948[1] & 0xc) == 0) ||\n       (((DAT_08003948[1] & 0xc) == 8 && ((DAT_08003948[1] & 0x10000) == 0)))) {\n      if (((*DAT_08003948 & 2) != 0) && (param_1[4] != 1)) {\n        return 1;\n      }\n      *DAT_08003948 = *DAT_08003948 & 0xffffff07 | param_1[5] << 3;\n    }\n    else if (param_1[4] == 0) {\n      *DAT_0800394c = 0;\n      iVar3 = get_value_from_pointer_08001cc4();\n      while ((*DAT_08003948 & 2) != 0) {\n        iVar4 = get_value_from_pointer_08001cc4();\n        if (2 < (uint)(iVar4 - iVar3)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      *DAT_0800394c = 1;\n      iVar3 = get_value_from_pointer_08001cc4();\n      while ((*DAT_08003948 & 2) == 0) {\n        iVar4 = get_value_from_pointer_08001cc4();\n        if (2 < (uint)(iVar4 - iVar3)) {\n          return 3;\n        }\n      }\n      *DAT_08003948 = *DAT_08003948 & 0xffffff07 | param_1[5] << 3;\n    }\n  }\n  if ((*param_1 & 8) != 0) {\n    if (param_1[6] == 0) {\n      *DAT_08003950 = 0;\n      iVar3 = get_value_from_pointer_08001cc4();\n      while ((DAT_08003948[9] & 2) != 0) {\n        iVar4 = get_value_from_pointer_08001cc4();\n        if (2 < (uint)(iVar4 - iVar3)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      *DAT_08003950 = 1;\n      iVar3 = get_value_from_pointer_08001cc4();\n      while ((DAT_08003948[9] & 2) == 0) {\n        iVar4 = get_value_from_pointer_08001cc4();\n        if (2 < (uint)(iVar4 - iVar3)) {\n          return 3;\n        }\n      }\n      reverse_count_0800365c(1);\n    }\n  }\n  if ((*param_1 & 4) != 0) {\n    bVar7 = (DAT_08003948[7] & 0x10000000) == 0;\n    if (bVar7) {\n      DAT_08003948[7] = DAT_08003948[7] | 0x10000000;\n    }\n    if ((*DAT_08003954 & 0x100) == 0) {\n      *DAT_08003954 = *DAT_08003954 | 0x100;\n      iVar3 = get_value_from_pointer_08001cc4();\n      while ((*DAT_08003954 & 0x100) == 0) {\n        iVar4 = get_value_from_pointer_08001cc4();\n        if (100 < (uint)(iVar4 - iVar3)) {\n          return 3;\n        }\n      }\n    }\n    puVar2 = DAT_08003a60;\n    puVar1 = DAT_08003948;\n    uVar6 = param_1[3];\n    if (uVar6 == 1) {\n      DAT_08003948[8] = DAT_08003948[8] | 1;\n    }\n    else if (uVar6 == 0) {\n      _DAT_40021020 = _DAT_40021020 & 0xfffffffa;\n    }\n    else if (uVar6 == 5) {\n      DAT_08003a60[8] = DAT_08003a60[8] | 4;\n      puVar2[8] = puVar2[8] | 1;\n    }\n    else {\n      DAT_08003948[8] = DAT_08003948[8] & 0xfffffffe;\n      puVar1[8] = puVar1[8] & 0xfffffffb;\n    }\n    if (param_1[3] == 0) {\n      iVar3 = get_value_from_pointer_08001cc4();\n      while ((DAT_08003a60[8] & 2) != 0) {\n        iVar4 = get_value_from_pointer_08001cc4();\n        if (5000 < (uint)(iVar4 - iVar3)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      iVar3 = get_value_from_pointer_08001cc4();\n      while ((DAT_08003948[8] & 2) == 0) {\n        iVar4 = get_value_from_pointer_08001cc4();\n        if (5000 < (uint)(iVar4 - iVar3)) {\n          return 3;\n        }\n      }\n    }\n    if (bVar7) {\n      DAT_08003a60[7] = DAT_08003a60[7] & 0xefffffff;\n    }\n  }\n  if (param_1[7] == 0) {\n    uVar5 = 0;\n  }\n  else if ((DAT_08003a60[1] & 0xc) == 8) {\n    uVar5 = 1;\n  }\n  else if (param_1[7] == 2) {\n    *DAT_08003a64 = 0;\n    iVar3 = get_value_from_pointer_08001cc4();\n    do {\n      if ((*DAT_08003a60 & 0x2000000) == 0) {\n        if (param_1[8] == 0x10000) {\n          DAT_08003a60[1] = DAT_08003a60[1] & 0xfffdffff | param_1[2];\n        }\n        DAT_08003a60[1] = DAT_08003a60[1] & 0xffc2ffff | param_1[8] | param_1[9];\n        *DAT_08003a64 = 1;\n        iVar3 = get_value_from_pointer_08001cc4();\n        do {\n          if ((*DAT_08003a60 & 0x2000000) != 0) {\n            return 0;\n          }\n          iVar4 = get_value_from_pointer_08001cc4();\n        } while ((uint)(iVar4 - iVar3) < 3);\n        return 3;\n      }\n      iVar4 = get_value_from_pointer_08001cc4();\n    } while ((uint)(iVar4 - iVar3) < 3);\n    uVar5 = 3;\n  }\n  else {\n    *DAT_08003a64 = 0;\n    iVar3 = get_value_from_pointer_08001cc4();\n    do {\n      if ((*DAT_08003a60 & 0x2000000) == 0) {\n        return 0;\n      }\n      iVar4 = get_value_from_pointer_08001cc4();\n    } while ((uint)(iVar4 - iVar3) < 3);\n    uVar5 = 3;\n  }\n  return uVar5;\n}\n\n",
            "called": [
                "FUN_0800365c",
                "FUN_08001cc4"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08003688",
            "calling": [
                "FUN_08001b48"
            ],
            "imported": false,
            "current_name": "FUNC_08003688"
        },
        "FUN_08004ec4": {
            "renaming": {
                "FUN_08004ec4": "process_data_and_set_bits_08004ec4",
                "param_1": "input_data",
                "iVar1": "subtracted_value"
            },
            "code": "void process_data_and_set_bits_08004ec4(uint32_t input_data)\n{\n  int subtracted_value = subtract_four_from_param_08004e70();\n  if (((*(code **)(subtracted_value + 0x60) != (code *)0x0) && (*(char *)(subtracted_value + 0x5c) == '\\x01')) && (*(char *)(subtracted_value + 0x2c) != ' ')) {\n    (**(code **)(subtracted_value + 0x60))(subtracted_value + 0x68);\n  }\n  set_bits_in_uint_08002c10(input_data);\n  return;\n}",
            "called": [
                "FUN_08002c10",
                "FUN_08004e70"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004ec4",
            "calling": [
                "FUN_080032b4",
                "FUN_08002d1c",
                "FUN_0800316c"
            ],
            "imported": false,
            "current_name": "process_data_and_set_bits_08004ec4"
        },
        "FUN_08000178": {
            "renaming": {
                "FUN_08000178": "get_string_length_08000178",
                "param_1": "input_string",
                "pcVar2": "current_pointer",
                "pcVar3": "current_character_pointer",
                "cVar1": "current_character"
            },
            "code": "char* get_string_length_08000178(char* input_string) {\n  char current_character;\n  char* current_pointer = input_string;\n  while (current_character = *current_pointer) {\n    current_pointer++;\n  }\n  return current_pointer + (-1 - (int)input_string);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000178",
            "calling": [
                "FUN_08005ce8",
                "FUN_08005c96"
            ],
            "imported": false,
            "current_name": "get_string_length_08000178"
        },
        "FUN_08004418": {
            "renaming": {
                "FUN_08004418": "do_nothing_08004418"
            },
            "code": "\nvoid do_nothing_08004418(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004418",
            "calling": [
                "FUN_0800441a"
            ],
            "imported": false,
            "current_name": "do_nothing_08004418"
        },
        "FUN_08006c88": {
            "renaming": {
                "FUN_08006c88": "allocate_buffer_memory_08006c88",
                "param_1": "buffer_address",
                "param_2": "buffer_size",
                "puVar1": "buffer_pointer",
                "iVar2": "last_buffer_index",
                "allocate_memory_for_buffer_08006288": "allocate_memory_for_buffer",
                "fill_memory_with_value_080061e0": "fill_buffer_memory_with_value"
            },
            "code": "undefined4* allocate_buffer_memory_08006c88(undefined4 buffer_address, int buffer_size)\n{\n    undefined4* buffer_pointer;\n    int last_buffer_index = (buffer_size - 1) * 0x68;\n    buffer_pointer = (undefined4*)allocate_memory_for_buffer_08006288(buffer_address, last_buffer_index + 0x74);\n    if (buffer_pointer != (undefined4*)0x0) {\n        *buffer_pointer = 0;\n        buffer_pointer[1] = buffer_size;\n        buffer_pointer[2] = buffer_pointer + 3;\n        fill_buffer_memory_with_value_080061e0(buffer_pointer + 3, 0, last_buffer_index + 0x68);\n    }\n    return buffer_pointer;\n}",
            "called": [
                "FUN_080061e0",
                "FUN_08006288"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006c88",
            "calling": [
                "FUN_08006d14"
            ],
            "imported": false,
            "current_name": "allocate_buffer_memory_08006c88"
        },
        "FUN_080060e4": {
            "renaming": {
                "FUN_080060e4": "check_and_process_response_080060e4",
                "iVar1": "num_bits_set",
                "count_bits_set_08005f8c": "get_num_bits_set",
                "PTR_DAT_08006100": "ptr_dat",
                "process_input_and_wait_for_response_080060d4": "process_input_and_wait_for_response"
            },
            "code": "void check_and_process_response_080060e4(void)\n{\n  int num_bits_set = get_num_bits_set();\n  if (*(int *)(PTR_DAT_08006100 + num_bits_set * 0x14 + 0xc) != 0) {\n    process_input_and_wait_for_response();\n  }\n  return;\n}",
            "called": [
                "FUN_080060d4",
                "FUN_08005f8c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080060e4",
            "calling": [
                "FUN_0800282c"
            ],
            "imported": false,
            "current_name": "check_and_process_response_080060e4"
        },
        "FUN_0800258c": {
            "renaming": {
                "FUN_0800258c": "get_value_from_ptr_0800258c",
                "param_1": "ptr",
                "uVar1": "value",
                "puVar2": "ptr_value"
            },
            "code": "uint get_value_from_ptr_0800258c(uint **ptr)\n{\n    uint value;\n    if (*(char *)((int)ptr + 0x21) != '\\x02') {\n        ptr[0xe] = (uint *)0x4;\n        return 1;\n    }\n    **ptr &= 0xfffffff1;\n    **ptr &= 0xfffffffe;\n    uint *ptr_value = *ptr;\n    if (ptr_value == PTR_DAT_0800261c) {\n        value = 1;\n    }\n    else if (ptr_value == PTR_DAT_0800261c + 5) {\n        value = 0x10;\n    }\n    else if (ptr_value == PTR_DAT_0800261c + 10) {\n        value = 0x100;\n    }\n    else if (ptr_value == PTR_DAT_0800261c + 0xf) {\n        value = 0x1000;\n    }\n    else if (ptr_value == PTR_DAT_0800261c + 0x14) {\n        value = 0x10000;\n    }\n    else if (ptr_value == PTR_DAT_0800261c + 0x19) {\n        value = 0x100000;\n    }\n    else {\n        value = 0x1000000;\n    }\n    *(undefined4 *)(PTR_DAT_08002620 + 4) = value;\n    *(undefined *)((int)ptr + 0x21) = 1;\n    *(undefined *)(ptr + 8) = 0;\n    if (ptr[0xd] != (uint *)0x0) {\n        (*(code *)ptr[0xd])();\n        return 0;\n    }\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800258c",
            "calling": [
                "FUN_080046b8",
                "FUN_0800316c"
            ],
            "imported": false,
            "current_name": "get_value_from_ptr_0800258c"
        },
        "FUN_08004e20": {
            "renaming": {
                "FUN_08004e20": "execute_callbacks_if_flags_are_set_08004e20",
                "PTR_DAT_08004e30": "ptr_dat_08004e30",
                "execute_callbacks_if_flags_set_08003f18": "execute_callbacks_if_flags_set_08003f18"
            },
            "code": "void execute_callbacks_if_flags_are_set_08004e20() {\n  int* PTR_DAT_08004e30 = (int*) PTR_DAT_08004e30;\n  if (*PTR_DAT_08004e30 != 0) {\n    execute_callbacks_if_flags_set_08003f18();\n  }\n  return;\n}",
            "called": [
                "FUN_08003f18"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004e20",
            "calling": [],
            "imported": false,
            "current_name": "execute_callbacks_if_flags_are_set_08004e20"
        },
        "FUN_0800573c": {
            "renaming": {
                "FUN_0800573c": "wait_forever_0800573c"
            },
            "code": "void wait_forever_0800573c(void)\n{\n  while(true){\n    // Do nothing, just wait forever\n  }\n}",
            "called": [
                "FUN_0800573c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800573c",
            "calling": [
                "FUN_0800573c",
                "FUN_08006ac0"
            ],
            "imported": false,
            "current_name": "wait_forever_0800573c"
        },
        "FUN_080032b4": {
            "renaming": {
                "FUN_080032b4": "process_data_and_set_bits_080032b4",
                "param_1": "data",
                "cVar1": "current_char",
                "puVar2": "ptr_data",
                "puVar3": "ptr_data_9"
            },
            "code": "uint32_t process_data_and_set_bits_080032b4(uint32_t **data)\n{\n  char current_char = *(char *)((int)data + 0x3d);\n  (*data)[1] &= 0xfffff8ff;\n  **data |= 1;\n  **data &= 0xfffffbff;\n  uint32_t *ptr_data = *data;\n  if ((ptr_data[1] & 0x800) != 0) {\n    if ((*(char *)((int)data + 0x3d) == '\"') || (*(char *)((int)data + 0x3d) == '*')) {\n      *(int16_t *)((int)data + 0x2a) = (int16_t)*(uint32_t *)(*data[0xe] + 4);\n    }\n    else {\n      *(int16_t *)((int)data + 0x2a) = (int16_t)*(uint32_t *)(*data[0xd] + 4);\n    }\n  }\n  if (*(int16_t *)((int)data + 0x2a) != 0) {\n    if ((ptr_data[5] & 4) != 0) {\n      uint32_t *ptr_data_9 = data[9];\n      data[9] = (uint32_t *)((int)ptr_data_9 + 1);\n      *(char *)ptr_data_9 = (char)ptr_data[4];\n      *(int16_t *)((int)data + 0x2a) = *(int16_t *)((int)data + 0x2a) - 1;\n    }\n    if (((*data)[5] & 0x40) != 0) {\n      ptr_data = data[9];\n      data[9] = (uint32_t *)((int)ptr_data + 1);\n      *(char *)ptr_data = (char)(*data)[4];\n      *(int16_t *)((int)data + 0x2a) = *(int16_t *)((int)data + 0x2a) - 1;\n    }\n    data[0x10] = (uint32_t *)((uint32_t)data[0x10] | 4);\n  }\n  if (data[0x10] == (uint32_t *)0x0) {\n    if (((current_char == '(') || (current_char == '*')) || (current_char == ')')) {\n      data[0xb] = PTR_DAT_080033b4;\n      data[0xc] = (uint32_t *)0x0;\n      *(undefined *)((int)data + 0x3d) = 0x20;\n      *(undefined *)((int)data + 0x3e) = 0;\n      process_data_and_set_bits_080032b4_08004ec4();\n    }\n    else if ((data[0xc] == (uint32_t *)0x22) || (current_char == '\"')) {\n      data[0xc] = (uint32_t *)0x0;\n      *(undefined *)((int)data + 0x3d) = 0x20;\n      *(undefined *)((int)data + 0x3e) = 0;\n      do_nothing_08002ca4();\n    }\n  }\n  else {\n    process_data_and_set_bits_080032b4_0800316c();\n  }\n  return 0;\n}",
            "called": [
                "FUN_08002ca4",
                "FUN_08004ec4",
                "FUN_0800316c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080032b4",
            "calling": [
                "FUN_080033b8"
            ],
            "imported": false,
            "current_name": "process_data_and_set_bits_080032b4"
        },
        "FUN_08004d06": {
            "renaming": {
                "FUN_08004d06": "compare_and_return_nonzero_08004d06",
                "param_1": "value1",
                "param_2": "value2"
            },
            "code": "int compare_and_return_nonzero_08004d06(int value1, int value2) {\n  if (value1 != value2) {\n    if (value1 == 0) {\n      return value2;\n    }\n    if (value2 == 0) {\n      return value1;\n    }\n    value1 = 0;\n  }\n  return value1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004d06",
            "calling": [
                "FUN_08004f4c"
            ],
            "imported": false,
            "current_name": "compare_and_return_nonzero_08004d06"
        },
        "FUN_080056d8": {
            "renaming": {
                "FUN_080056d8": "calculate_offset_080056d8",
                "param_1": "offset",
                "iVar1": "current_offset",
                "puVar2": "current_pointer"
            },
            "code": "int calculate_offset_080056d8(int offset) {\n  int current_offset;\n  undefined *current_pointer;\n  if (*(int *)PTR_DAT_08005708 == 0) {\n    *(undefined **)PTR_DAT_08005708 = PTR_DAT_0800570c;\n  }\n  current_offset = *(int *)PTR_DAT_08005708;\n  current_pointer = (undefined *)(offset + current_offset);\n  if (current_pointer <= &stack0x00000000) {\n    *(undefined **)PTR_DAT_08005708 = current_pointer;\n    return current_offset;\n  }\n  *(undefined4 *)PTR_DAT_08005710 = 0xc;\n  return -1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080056d8",
            "calling": [
                "FUN_08006920"
            ],
            "imported": false,
            "current_name": "calculate_offset_080056d8"
        },
        "FUN_080019f6": {
            "renaming": {
                "FUN_080019f6": "check_end_of_string_080019f6",
                "param_1": "input_param",
                "iVar1": "is_end_of_string",
                "uVar2": "second_string_start",
                "uVar3": "string_start",
                "uVar4": "string_end",
                "uVar5": "second_string_end"
            },
            "code": "void check_end_of_string_080019f6(int input_param) {\n  int is_end_of_string;\n  undefined4 string_start = **(undefined4 **)(input_param + 0x3c);\n  undefined4 string_end = (*(undefined4 **)(input_param + 0x3c))[1];\n  *(undefined4 *)(input_param + 0x48) = string_start;\n  *(undefined4 *)(input_param + 0x4c) = string_end;\n  undefined4 second_string_start = (*(undefined4 **)(input_param + 0x38))[1];\n  *(undefined4 *)(input_param + 0x50) = **(undefined4 **)(input_param + 0x38);\n  *(undefined4 *)(input_param + 0x54) = second_string_start;\n  undefined4 second_string_end = *(undefined4 *)(input_param + 0x6c);\n  undefined4 second_string_start = *(undefined4 *)(input_param + 0x68);\n  is_end_of_string = is_end_of_string_08000a18(string_start, string_end, second_string_start, second_string_end);\n  if (is_end_of_string == 0) {\n    second_string_start = *(undefined4 *)(input_param + 0x60);\n    second_string_end = *(undefined4 *)(input_param + 100);\n    is_end_of_string = is_end_of_string_080009dc(string_start, string_end, second_string_start, second_string_end);\n    if (is_end_of_string != 0) {\n      *(undefined4 *)(input_param + 0x48) = second_string_start;\n      *(undefined4 *)(input_param + 0x4c) = second_string_end;\n    }\n    return;\n  }\n  *(undefined4 *)(input_param + 0x48) = second_string_start;\n  *(undefined4 *)(input_param + 0x4c) = second_string_end;\n  return;\n}",
            "called": [
                "FUN_08000a18",
                "FUN_080009dc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080019f6",
            "calling": [
                "FUN_08001a44"
            ],
            "imported": false,
            "current_name": "check_end_of_string_080019f6"
        },
        "FUN_08002f9c": {
            "renaming": {
                "FUN_08002f9c": "check_string_08002f9c",
                "param_1": "ptr_param",
                "puVar1": "ptr_temp"
            },
            "code": "uint32_t check_string_08002f9c(uint32_t **ptr_param) {\n  uint32_t *ptr_temp;\n  if (*(char *)((int)ptr_param + 0x3d) == '\"') {\n    if (*(uint16_t *)((int)ptr_param + 0x2a) < 4) {\n      if (*(uint16_t *)((int)ptr_param + 0x2a) - 2 < 2) {\n        if (ptr_param[0xb] == (uint32_t *)0x2) {\n          **ptr_param = **ptr_param | 0x400;\n        }\n        else {\n          **ptr_param = **ptr_param & 0xfffffbff;\n          **ptr_param = **ptr_param | 0x800;\n        }\n        (*ptr_param)[1] = (*ptr_param)[1] & 0xfffffbff;\n      }\n      else {\n        if (ptr_param[0xb] == (uint32_t *)0x2) {\n          **ptr_param = **ptr_param | 0x400;\n        }\n        else {\n          **ptr_param = **ptr_param & 0xfffffbff;\n        }\n        (*ptr_param)[1] = (*ptr_param)[1] & 0xfffff8ff;\n        ptr_temp = ptr_param[9];\n        ptr_param[9] = (uint32_t *)((int)ptr_temp + 1);\n        *(char *)ptr_temp = (char)(*ptr_param)[4];\n        *(uint16_t *)((int)ptr_param + 0x2a) = *(uint16_t *)((int)ptr_param + 0x2a) - 1;\n        *(undefined *)((int)ptr_param + 0x3d) = 0x20;\n        ptr_param[0xc] = (uint32_t *)0x0;\n        if (*(char *)((int)ptr_param + 0x3e) == '@') {\n          *(undefined *)((int)ptr_param + 0x3e) = 0;\n          do_nothing_08002f9a();\n        }\n        else {\n          *(undefined *)((int)ptr_param + 0x3e) = 0;\n          do_nothing_08002c50();\n        }\n      }\n    }\n    else {\n      ptr_temp = ptr_param[9];\n      ptr_param[9] = (uint32_t *)((int)ptr_temp + 1);\n      *(char *)ptr_temp = (char)(*ptr_param)[4];\n      *(uint16_t *)((int)ptr_param + 0x2a) = *(uint16_t *)((int)ptr_param + 0x2a) - 1;\n    }\n  }\n  return 0;\n}",
            "called": [
                "FUN_08002c50",
                "FUN_08002f9a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002f9c",
            "calling": [
                "FUN_080033b8"
            ],
            "imported": false,
            "current_name": "check_string_08002f9c"
        },
        "FUN_08005510": {
            "renaming": {
                "FUN_08005510": "process_combination_08005510",
                "param_1": "combination",
                "param_2": "data",
                "param_3": "data_size",
                "param_4": "bit_position",
                "iVar1": "is_valid",
                "uVar2": "index",
                "PTR_DAT_0800555c": "combination_data",
                "PTR_DAT_08005560": "combination_index",
                "process_data_08002494": "process_data",
                "set_bit_at_position_080024f8": "set_bit_at_position",
                "check_and_set_values_080045a2": "check_and_set_values"
            },
            "code": "void process_combination_08005510(int combination, int data, int data_size, int bit_position){\n  int is_valid = is_combination_valid();\n  if (is_valid == 0){\n    uint8_t index = *(uint8_t*)(combination + 0x44);\n    PTR_DAT_0800555c[index] = data;\n    PTR_DAT_08005560[index] = combination;\n    process_data(*(char*)(combination + 0x5a), 0, 1, index, bit_position);\n    set_bit_at_position(*(char*)(combination + 0x5a));\n    check_and_set_values(PTR_DAT_0800555c[index], combination + 0x45, 1);\n  }\n}",
            "called": [
                "FUN_08002494",
                "FUN_080024f8",
                "FUN_080045a2",
                "FUN_0800548c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005510",
            "calling": [
                "FUN_08005a68"
            ],
            "imported": false,
            "current_name": "process_combination_08005510"
        },
        "FUN_08002f9a": {
            "renaming": {
                "FUN_08002f9a": "do_nothing_08002f9a"
            },
            "code": "\nvoid do_nothing_08002f9a(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002f9a",
            "calling": [
                "FUN_08002f9c",
                "FUN_0800306c"
            ],
            "imported": false,
            "current_name": "do_nothing_08002f9a"
        },
        "FUN_08005750": {
            "renaming": {
                "FUN_08005750": "return_one_08005750"
            },
            "code": "int return_one_08005750(void)\n{\n  int result = 1;\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005750",
            "calling": [
                "thunk_FUN_08005750"
            ],
            "imported": false,
            "current_name": "return_one_08005750"
        },
        "FUN_08002cf2": {
            "renaming": {
                "FUN_08002cf2": "process_input_08002cf2",
                "param_1": "input_data_ptr",
                "param_2": "param_2",
                "param_3": "param_3",
                "param_4": "param_4",
                "uVar1": "input_data_value",
                "uVar2": "input_data_offset"
            },
            "code": "int process_input_08002cf2(int *input_data_ptr, int param_2, int param_3, int param_4) {\n  int input_data_offset = *(int *)(*input_data_ptr + 0x18);\n  int input_data_value;\n  if ((input_data_offset & 0x80) == 0) {\n    input_data_value = *(int *)(input_data_ptr + 3);\n  }\n  else {\n    input_data_value = *(int *)(input_data_ptr + 6);\n  }\n  process_input_08002cf2_08004e74(input_data_ptr, (input_data_offset & 4) == 0, input_data_value, input_data_offset, param_4);\n  return 0;\n}",
            "called": [
                "FUN_08004e74"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002cf2",
            "calling": [
                "FUN_080033b8"
            ],
            "imported": false,
            "current_name": "process_input_08002cf2"
        },
        "FUN_08006288": {
            "renaming": {
                "FUN_08006288": "allocate_memory_for_buffer_08006288",
                "param_1": "buffer",
                "param_2": "size",
                "puVar1": "current_byte",
                "uVar2": "result",
                "puVar3": "current_entry",
                "iVar4": "difference",
                "puVar5": "previous_entry",
                "uVar6": "entry_difference",
                "puVar7": "previous_valid_entry",
                "uVar8": "adjusted_size",
                "calculate_offset_and_set_value_08006920": "calculate_offset_and_set_value",
                "PTR_DAT_08006340": "current_buffer_pointer",
                "PTR_DAT_0800633c": "previous_buffer_pointer",
                "do_nothing_08006eac": "do_nothing_1",
                "do_nothing_08006eae": "do_nothing_2"
            },
            "code": "uint allocate_memory_for_buffer_08006288(uint *buffer, uint size) {\n  uint *current_buffer;\n  uint adjusted_size;\n  uint previous_buffer;\n  uint offset;\n  \n  adjusted_size = (size + 3 & 0xfffffffc) + 8;\n  if (adjusted_size < 0xc) {\n    adjusted_size = 0xc;\n  }\n  if (((int)adjusted_size < 0) || (adjusted_size < size)) {\n    *buffer = 0xc;\n  }\n  else {\n    do_nothing_08006eac();\n    current_buffer = PTR_DAT_08006340;\n    previous_buffer = *(uint **)PTR_DAT_0800633c;\n    while (current_buffer = previous_buffer, current_buffer != (uint *)0x0) {\n      offset = *current_buffer - adjusted_size;\n      if (-1 < (int)offset) {\n        if (offset < 0xc) {\n          if (previous_buffer == current_buffer) {\n            adjusted_size = previous_buffer[1];\n            *(uint *)PTR_DAT_0800633c = adjusted_size;\n          }\n          else {\n            adjusted_size = current_buffer[1];\n          }\n          if (previous_buffer != current_buffer) {\n            previous_buffer[1] = adjusted_size;\n            previous_buffer = current_buffer;\n          }\n        }\n        else {\n          *current_buffer = offset;\n          *(uint *)((int)current_buffer + offset) = adjusted_size;\n          previous_buffer = (uint *)((int)current_buffer + offset);\n        }\n        goto LAB_080062ec;\n      }\n      previous_buffer = (uint *)current_buffer[1];\n    }\n    if (*(int *)PTR_DAT_08006340 == 0) {\n      uVar2 = calculate_offset_and_set_value_08006920(buffer);\n      *(undefined4 *)current_buffer = uVar2;\n    }\n    current_buffer = (uint *)calculate_offset_and_set_value_08006920(buffer,adjusted_size);\n    if ((current_buffer != (uint *)0xffffffff) &&\n       ((previous_buffer = (uint *)((int)current_buffer + 3U & 0xfffffffc), current_buffer == previous_buffer ||\n        (offset = calculate_offset_and_set_value_08006920(buffer,(int)previous_buffer - (int)current_buffer), offset != -1)))) {\n      *previous_buffer = adjusted_size;\nLAB_080062ec:\n      do_nothing_08006eae(buffer);\n      adjusted_size = (int)previous_buffer + 0xbU & 0xfffffff8;\n      offset = adjusted_size - (int)(previous_buffer + 1);\n      if (offset != 0) {\n        *(int *)((int)previous_buffer + offset) = -offset;\n        return adjusted_size;\n      }\n      return adjusted_size;\n    }\n    *buffer = 0xc;\n    do_nothing_08006eae(buffer);\n  }\n  return 0;\n}",
            "called": [
                "FUN_08006eac",
                "FUN_08006eae",
                "FUN_08006920"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006288",
            "calling": [
                "FUN_08006c88",
                "FUN_08006e10"
            ],
            "imported": false,
            "current_name": "allocate_memory_for_buffer_08006288"
        },
        "FUN_08002004": {
            "renaming": {
                "FUN_08002004": "update_value_and_check_if_failed_08002004",
                "param_1": "value",
                "iVar1": "check_result",
                "puVar2": "ptr_to_value"
            },
            "code": "int update_value_and_check_if_failed_08002004(undefined4 *value)\n{\n  int check_result;\n  undefined4 *ptr_to_value;\n  \n  if (*(char *)(value + 9) != '\\x01') {\n    *(undefined *)(value + 9) = 1;\n    check_result = check_and_update_value();\n    if (check_result == 0) {\n      value[10] = (value[10] & 0xfffffcfe) | 0x100;\n      ptr_to_value = (undefined4 *)*value;\n      if ((ptr_to_value == PTR_DAT_080020e8) && ((PTR_DAT_080020e8[-0xff] & 0xf0000) != 0)) {\n        value[10] |= 0x100000;\n        if ((*(uint *)(PTR_DAT_080020ec + 4) & 0x400) != 0) {\n          value[10] = (value[10] & 0xffffcfff) | 0x1000;\n        }\n      }\n      else {\n        value[10] &= 0xffefffff;\n        if ((ptr_to_value[1] & 0x400) != 0) {\n          value[10] = (value[10] & 0xffffcfff) | 0x1000;\n        }\n      }\n      if ((value[10] & 0x1000) == 0) {\n        value[0xb] = 0;\n      }\n      else {\n        value[0xb] &= 0xfffffff9;\n      }\n      *(undefined *)(value + 9) = 0;\n      *ptr_to_value = 0xfffffffd;\n      value = (undefined4 *)*value;\n      if (((value[2] & 0xe0000) == 0xe0000) && ((value != PTR_DAT_080020e8) || ((PTR_DAT_080020e8[-0xff] & 0xf0000) == 0))) {\n        value[2] |= 0x500000;\n      }\n      else {\n        value[2] |= 0x100000;\n      }\n    }\n    else {\n      *(undefined *)(value + 9) = 0;\n    }\n    return check_result;\n  }\n  return 2;\n}",
            "called": [
                "FUN_08001f84"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002004",
            "calling": [
                "FUN_08004a4c"
            ],
            "imported": false,
            "current_name": "update_value_and_check_if_failed_08002004"
        },
        "FUN_08005754": {
            "renaming": {
                "FUN_08005754": "get_data_from_pointer_08005754",
                "param_1": "data",
                "bVar1": "is_less_than_60",
                "cVar2": "result_char",
                "uVar3": "result_uint",
                "uVar4": "ptr_dat"
            },
            "code": "uint get_data_from_pointer_08005754(uint data)\n{\n  bool is_less_than_14 = data < 0xe;\n  bool is_less_than_60 = data + 0x2e < 0x3c;\n  bool is_valid_data = is_less_than_14 ? is_less_than_60 : data < 0x3c;\n  char result_char = is_valid_data ? PTR_DAT_080057ac[data + 0x2e] : -1;\n  uint result_uint = 0;\n  if (result_char != -1) {\n    result_uint = get_result_08004a4c();\n    uint ptr_dat = *(uint *)PTR_DAT_080057b0;\n    if (ptr_dat != 0xc) {\n      if (ptr_dat < 0xc) {\n        return result_uint >> (0xc - ptr_dat & 0xff);\n      }\n      return result_uint << (ptr_dat - 0xc & 0xff);\n    }\n  }\n  return result_uint;\n}",
            "called": [
                "FUN_08004a4c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005754",
            "calling": [
                "FUN_08000cd0"
            ],
            "imported": false,
            "current_name": "get_data_from_pointer_08005754"
        },
        "FUN_08005fc8": {
            "renaming": {
                "FUN_08005fc8": "initialize_data_08005fc8",
                "param_1": "input_flag",
                "param_2": "input_value",
                "data_ptr": "data_pointer",
                "PTR_DAT_08006068": "data_pointer",
                "param_3": "unused_param_1",
                "param_4": "unused_param_2"
            },
            "code": "void initialize_data_08005fc8(int param_1, int param_2, undefined4 param_3, undefined4 param_4)\n{\n    undefined *data_ptr = PTR_DAT_08006068;\n    if (param_1 != 1) {\n        return;\n    }\n    if (param_2 == 0xffff) {\n        *data_ptr = 6;\n        *(undefined4 *)(data_ptr + 0xc) = 0;\n        data_ptr[0x14] = 7;\n        *(undefined4 *)(data_ptr + 0x20) = 0;\n        data_ptr[0x28] = 8;\n        *(undefined4 *)(data_ptr + 0x34) = 0;\n        data_ptr[0x3c] = 9;\n        *(undefined4 *)(data_ptr + 0x48) = 0;\n        data_ptr[0x50] = 10;\n        *(undefined4 *)(data_ptr + 0x5c) = 0;\n        data_ptr[100] = 0x17;\n        *(undefined4 *)(data_ptr + 0x70) = 0;\n        data_ptr[0x78] = 0x17;\n        *(undefined4 *)(data_ptr + 0x84) = 0;\n        data_ptr[0x8c] = 0x17;\n        *(undefined4 *)(data_ptr + 0x98) = 0;\n        data_ptr[0xa0] = 0x17;\n        *(undefined4 *)(data_ptr + 0xac) = 0;\n        data_ptr[0xb4] = 0x17;\n        *(undefined4 *)(data_ptr + 0xc0) = 0;\n        data_ptr[200] = 0x28;\n        *(undefined4 *)(data_ptr + 0xd4) = 0;\n        data_ptr[0xdc] = 0x28;\n        *(undefined4 *)(data_ptr + 0xe8) = 0;\n        data_ptr[0xf0] = 0x28;\n        *(undefined4 *)(data_ptr + 0xfc) = 0;\n        data_ptr[0x104] = 0x28;\n        *(undefined4 *)(data_ptr + 0x110) = 0;\n        data_ptr[0x118] = 0x28;\n        *(undefined4 *)(data_ptr + 0x124) = 0;\n        data_ptr[300] = 0x28;\n        *(undefined4 *)(data_ptr + 0x138) = 0;\n        concatenate_or_shift_params_08006112(0, PTR_LAB_08005fa0_1_08006070, PTR_DAT_0800606c, data_ptr, param_4);\n    }\n    return;\n}",
            "called": [
                "FUN_08006112"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005fc8",
            "calling": [],
            "imported": false,
            "current_name": "initialize_data_08005fc8"
        },
        "FUN_08002ab8": {
            "renaming": {
                "FUN_08002ab8": "increment_value_at_pointer_if_not_zero_08002ab8",
                "param_1": "ptr_param_1",
                "pbVar1": "byte_ptr_at_offset_0x24",
                "*(short *)((int)param_1 + 0x2a)": "*short_ptr_at_offset_0x2a",
                "*(uint *)(*param_1 + 0x10)": "*uint_ptr_at_offset_0x10"
            },
            "code": "int increment_value_at_pointer_if_not_zero_08002ab8(int *ptr_param_1)\n{\n    short *short_ptr_at_offset_0x2a = (short *)((int)ptr_param_1 + 0x2a);\n    if (*short_ptr_at_offset_0x2a != 0)\n    {\n        byte *byte_ptr_at_offset_0x24 = (byte *)ptr_param_1[9];\n        ptr_param_1[9] = (int)(byte_ptr_at_offset_0x24 + 1);\n        uint *uint_ptr_at_offset_0x10 = (uint *)(*ptr_param_1 + 0x10);\n        *uint_ptr_at_offset_0x10 = (uint)*byte_ptr_at_offset_0x24;\n        *short_ptr_at_offset_0x2a = *short_ptr_at_offset_0x2a - 1;\n    }\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ab8",
            "calling": [
                "FUN_080033b8"
            ],
            "imported": false,
            "current_name": "increment_value_at_pointer_if_not_zero_08002ab8"
        },
        "FUN_080068f0": {
            "renaming": {
                "FUN_080068f0": "process_data_080068f0",
                "param_1": "data_1",
                "param_2": "data_2",
                "param_3": "data_3",
                "param_4": "data_4",
                "iVar1": "ptr_var",
                "uVar2": "var_1",
                "uStack_c": "var_2",
                "uStack_8": "var_3",
                "uStack_4": "N/A",
                "PTR_PTR_DAT_0800691c": "PTR_PTR_DAT_0800691c"
            },
            "code": "void process_data_080068f0(undefined4 data_1, undefined4 data_2, undefined4 data_3, undefined4 data_4)\n{\n  int ptr_var;\n  undefined4 var_1;\n  undefined4 var_2;\n  undefined4 var_3;\n  \n  ptr_var = *(int *)PTR_PTR_DAT_0800691c;\n  var_1 = data_1;\n  var_2 = data_2;\n  var_3 = data_3;\n  \n  if ((ptr_var != 0) && (*(int *)(ptr_var + 0x18) == 0)) \n  {\n    free_memory(ptr_var);\n  }\n  \n  process_data_080068f0_helper(ptr_var, *(undefined4 *)(ptr_var + 0x8), data_1, &var_2, var_1, &var_3);\n  return;\n}",
            "called": [
                "FUN_08006394",
                "FUN_08006cb4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080068f0",
            "calling": [
                "FUN_08004f4c"
            ],
            "imported": false,
            "current_name": "process_data_080068f0",
            "code_backup": "\nvoid FUN_080068f0(undefined4 param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  int iVar1;\n  undefined4 uVar2;\n  undefined4 uStack_c;\n  undefined4 uStack_8;\n  undefined4 uStack_4;\n  \n  iVar1 = *(int *)PTR_PTR_DAT_0800691c;\n  uVar2 = param_1;\n  uStack_c = param_2;\n  uStack_8 = param_3;\n  uStack_4 = param_4;\n  if ((iVar1 != 0) && (*(int *)(iVar1 + 0x18) == 0)) {\n    FUNC_08006cb4(iVar1);\n  }\n  FUNC_08006394(iVar1,*(undefined4 *)(iVar1 + 8),param_1,&uStack_c,uVar2,&uStack_c);\n  return;\n}\n\n"
        },
        "FUN_080066b0": {
            "renaming": {
                "FUN_080066b0": "FUNC_080066b0"
            },
            "code": "\nuint FUNC_080066b0(undefined4 param_1,uint *param_2,undefined4 param_3,code *param_4,uint **param_5)\n\n{\n  byte bVar1;\n  int iVar2;\n  uint *puVar3;\n  int iVar4;\n  undefined *puVar5;\n  uint uVar6;\n  uint **ppuVar7;\n  uint uVar8;\n  uint uVar9;\n  undefined *puVar10;\n  undefined *puVar11;\n  uint local_24 [2];\n  \n  bVar1 = *(byte *)(param_2 + 6);\n  puVar11 = (undefined *)((int)param_2 + 0x43);\n  if (bVar1 != 0x6e) {\n    if (bVar1 < 0x6f) {\n      if (bVar1 != 99) {\n        if (bVar1 < 100) {\n          if (bVar1 == 0) goto LAB_0800686a;\n          if (bVar1 != 0x58) goto LAB_080066e0;\n          *(undefined *)((int)param_2 + 0x45) = 0x58;\n          puVar5 = PTR_s_0123456789ABCDEF_080068ec;\nLAB_080067fa:\n          uVar6 = *param_2;\n          puVar3 = *param_5;\n          *param_5 = puVar3 + 1;\n          if (((uVar6 & 0x80) == 0) && ((int)(uVar6 << 0x19) < 0)) {\n            uVar8 = (uint)*(ushort *)puVar3;\n          }\n          else {\n            uVar8 = *puVar3;\n          }\n          if ((int)(uVar6 << 0x1f) < 0) {\n            *param_2 = uVar6 | 0x20;\n          }\n          if (uVar8 == 0) {\n            *param_2 = *param_2 & 0xffffffdf;\n          }\n          uVar6 = 0x10;\nLAB_08006790:\n          *(undefined *)((int)param_2 + 0x43) = 0;\n        }\n        else {\n          if ((bVar1 != 100) && (bVar1 != 0x69)) goto LAB_080066e0;\n          uVar8 = *param_2;\n          puVar3 = *param_5;\n          if ((uVar8 & 0x80) == 0) {\n            *param_5 = puVar3 + 1;\n            if ((uVar8 & 0x40) == 0) goto LAB_08006700;\n            uVar8 = (uint)(short)*(ushort *)puVar3;\n          }\n          else {\n            *param_5 = puVar3 + 1;\nLAB_08006700:\n            uVar8 = *puVar3;\n          }\n          if ((int)uVar8 < 0) {\n            uVar8 = -uVar8;\n            *(undefined *)((int)param_2 + 0x43) = 0x2d;\n          }\n          uVar6 = 10;\n          puVar5 = PTR_s_0123456789ABCDEF_080068ec;\n        }\n        uVar9 = param_2[1];\n        param_2[2] = uVar9;\n        puVar10 = puVar11;\n        if ((int)uVar9 < 0) {\n          if (uVar8 != 0) goto LAB_0800682e;\nLAB_080068dc:\n          *(undefined *)((int)param_2 + 0x42) = *puVar5;\n          puVar10 = (undefined *)((int)param_2 + 0x42);\n        }\n        else {\n          *param_2 = *param_2 & 0xfffffffb;\n          if (uVar8 == 0) {\n            if (uVar9 != 0) goto LAB_080068dc;\n          }\n          else {\nLAB_0800682e:\n            do {\n              uVar9 = uVar8 / uVar6;\n              puVar10 = puVar10 + -1;\n              *puVar10 = puVar5[uVar8 - uVar6 * uVar9];\n              uVar8 = uVar9;\n            } while (uVar9 != 0);\n          }\n        }\n        if (((uVar6 == 8) && ((int)(*param_2 << 0x1f) < 0)) && ((int)param_2[1] <= (int)param_2[4]))\n        {\n          puVar10[-1] = 0x30;\n          puVar10 = puVar10 + -1;\n        }\n        param_2[4] = (int)puVar11 - (int)puVar10;\n        puVar11 = puVar10;\n        goto LAB_080067d6;\n      }\n      puVar3 = *param_5;\n      *param_5 = puVar3 + 1;\n      *(char *)((int)param_2 + 0x42) = (char)*puVar3;\nLAB_08006740:\n      puVar11 = (undefined *)((int)param_2 + 0x42);\n      uVar8 = 1;\n    }\n    else {\n      if (bVar1 != 0x73) {\n        if (bVar1 < 0x74) {\n          if (bVar1 == 0x6f) {\nLAB_08006766:\n            uVar8 = *param_2;\n            puVar3 = *param_5;\n            if ((uVar8 & 0x80) == 0) {\n              *param_5 = puVar3 + 1;\n              if ((uVar8 & 0x40) == 0) goto LAB_08006774;\n              uVar8 = (uint)*(ushort *)puVar3;\n            }\n            else {\n              *param_5 = puVar3 + 1;\nLAB_08006774:\n              uVar8 = *puVar3;\n            }\n            puVar5 = PTR_s_0123456789ABCDEF_080068ec;\n            if (bVar1 == 0x6f) {\n              uVar6 = 8;\n            }\n            else {\n              uVar6 = 10;\n            }\n            goto LAB_08006790;\n          }\n          if (bVar1 == 0x70) {\n            *param_2 = *param_2 | 0x20;\nLAB_08006726:\n            puVar5 = PTR_s_0123456789abcdef_080068e8;\n            *(undefined *)((int)param_2 + 0x45) = 0x78;\n            goto LAB_080067fa;\n          }\n        }\n        else {\n          if (bVar1 == 0x75) goto LAB_08006766;\n          if (bVar1 == 0x78) goto LAB_08006726;\n        }\nLAB_080066e0:\n        *(byte *)((int)param_2 + 0x42) = bVar1;\n        goto LAB_08006740;\n      }\n      puVar3 = *param_5;\n      *param_5 = puVar3 + 1;\n      puVar11 = (undefined *)*puVar3;\n      iVar2 = find_char_in_string_08006e90(puVar11,0,param_2[1]);\n      if (iVar2 != 0) {\n        param_2[1] = iVar2 - (int)puVar11;\n      }\n      uVar8 = param_2[1];\n    }\n    param_2[4] = uVar8;\n    *(undefined *)((int)param_2 + 0x43) = 0;\n    goto LAB_080067d6;\n  }\n  uVar8 = *param_2;\n  ppuVar7 = (uint **)*param_5;\n  uVar6 = param_2[5];\n  if ((uVar8 & 0x80) == 0) {\n    *param_5 = (uint *)(ppuVar7 + 1);\n    puVar3 = *ppuVar7;\n    if ((uVar8 & 0x40) == 0) goto LAB_08006856;\n    *(short *)puVar3 = (short)uVar6;\n  }\n  else {\n    *param_5 = (uint *)(ppuVar7 + 1);\n    puVar3 = *ppuVar7;\nLAB_08006856:\n    *puVar3 = uVar6;\n  }\nLAB_0800686a:\n  param_2[4] = 0;\nLAB_080067d6:\n  iVar2 = process_data_080065c0(param_1,param_2,local_24,param_3,param_4);\n  if ((iVar2 == -1) || (iVar2 = (*param_4)(param_1,param_3,puVar11,param_2[4]), iVar2 == -1)) {\nLAB_080067ea:\n    uVar8 = 0xffffffff;\n  }\n  else {\n    if ((int)(*param_2 << 0x1e) < 0) {\n      for (iVar2 = 0; iVar2 < (int)(param_2[3] - local_24[0]); iVar2 = iVar2 + 1) {\n        iVar4 = (*param_4)(param_1,param_3,(int)param_2 + 0x19,1);\n        if (iVar4 == -1) goto LAB_080067ea;\n      }\n    }\n    uVar8 = param_2[3];\n    if ((int)param_2[3] < (int)local_24[0]) {\n      uVar8 = local_24[0];\n    }\n  }\n  return uVar8;\n}\n\n",
            "called": [
                "FUN_08006e90",
                "FUN_080065c0"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x080066b0",
            "calling": [
                "FUN_08006394"
            ],
            "imported": false,
            "current_name": "FUNC_080066b0"
        },
        "FUN_08002c52": {
            "renaming": {
                "FUN_08002c52": "do_nothing_08002c52"
            },
            "code": "\nvoid do_nothing_08002c52(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002c52",
            "calling": [
                "FUN_08002c54",
                "FUN_08002d1c"
            ],
            "imported": false,
            "current_name": "do_nothing_08002c52"
        },
        "FUN_0800138e": {
            "renaming": {
                "FUN_0800138e": "decode_and_print_snake_case_0800138e",
                "param_1": "snake_case",
                "param_2": "bVar1",
                "param_3": "param_3",
                "param_4": "param_4",
                "*(byte *)(param_1 + 0x14)": "*(int *)(snake_case + 0x14)",
                "bVar1": "bVar1",
                "bVar1 | 4": "new_bVar1",
                "decode_and_print_snake_case_08001310": "decode_and_print_snake_case_08001310",
                "param_5": "param_5",
                "bVar1 | 0xc": "new_bVar1 | 0xc"
            },
            "code": "void decode_and_print_snake_case_0800138e(int snake_case, int bVar1, int param_3, int param_4, int param_5)\n{\n    int new_bVar1 = bVar1 | 4;\n    *(int *)(snake_case + 0x14) = new_bVar1;\n    decode_and_print_snake_case_0800138e_08001310(snake_case,new_bVar1 | 0xc,0,param_4,param_5);\n    return;\n}",
            "called": [
                "FUN_08001310"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800138e",
            "calling": [
                "FUN_080013a4"
            ],
            "imported": false,
            "current_name": "decode_and_print_snake_case_0800138e"
        },
        "FUN_08002c50": {
            "renaming": {
                "FUN_08002c50": "do_nothing_08002c50"
            },
            "code": "\nvoid do_nothing_08002c50(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002c50",
            "calling": [
                "FUN_08002f9c",
                "FUN_0800306c"
            ],
            "imported": false,
            "current_name": "do_nothing_08002c50"
        },
        "FUN_0800598a": {
            "renaming": {
                "FUN_0800598a": "update_combination_0800598a",
                "param_1": "combination",
                "iVar1": "is_valid_combination",
                "uVar2": "index",
                "local_9": "character"
            },
            "code": "void update_combination_0800598a(int combination)\n{\n  int is_valid_combination;\n  ushort index;\n  undefined character;\n  is_valid_combination = check_combination_validity(combination,&character);\n  if ((is_valid_combination == 0) &&\n     (index = *(short *)(combination + 0x60) + 1U & 0x3f, index != *(ushort *)(combination + 0x62))) {\n    *(undefined *)(*(int *)(combination + 0x5c) + (uint)*(ushort *)(combination + 0x60)) = character;\n    *(ushort *)(combination + 0x60) = index;\n  }\n  return;\n}",
            "called": [
                "FUN_080054d4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800598a",
            "calling": [],
            "imported": false,
            "current_name": "update_combination_0800598a"
        },
        "FUN_08001c88": {
            "renaming": {
                "FUN_08001c88": "set_flag_and_values_08001c88",
                "set_param_value_08002470": "set_parameter_value",
                "check_and_set_values_08001c3c": "check_and_set_values",
                "do_nothing_08001c3a": "do_nothing"
            },
            "code": "  \n    void set_flag_and_values_08001c88(void)\n    {\n      *DAT_08001ca8 |= 0x10;\n      set_parameter_value(3);\n      check_and_set_values(0xf);\n      do_nothing();\n    }",
            "called": [
                "FUN_08001c3a",
                "FUN_08001c3c",
                "FUN_08002470"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001c88",
            "calling": [
                "FUN_08004c52"
            ],
            "imported": false,
            "current_name": "set_flag_and_values_08001c88"
        },
        "FUN_08001a44": {
            "renaming": {
                "FUN_08001a44": "set_flag_if_param_is_one_08001a44",
                "param_1": "memory_address",
                "param_2": "flag_value",
                "uVar1": "flag",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "void set_flag_if_param_is_one_08001a44(int memory_address, int flag_value)\\n{\\n  bool flag = false;\\n  if (flag_value == 1) {\\n    flag = true;\\n    if (*(char *)(memory_address + 0x70) == \"\\0\") {\\n      check_end_of_string();\\n    }\\n  }\\n  *(bool *)(memory_address + 0x70) = flag;\\n  return;\\n}",
            "called": [
                "FUN_080019f6"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001a44",
            "calling": [
                "FUN_08000cd0"
            ],
            "imported": false,
            "current_name": "set_flag_if_param_is_one_08001a44"
        },
        "FUN_08002c54": {
            "renaming": {
                "FUN_08002c54": "decode_08002c54",
                "param_1": "input_array",
                "pbVar2": "byte_ptr",
                "cVar1": "last_char"
            },
            "code": "int decode_08002c54(int *input_array) {\n  char last_char = *(char *)((int)input_array + 0x3d);\n  if (*(short *)((int)input_array + 0x2a) != 0) {\n    byte *byte_ptr = (byte *)input_array[9];\n    input_array[9] = (int)(byte_ptr + 1);\n    *(uint *)(*input_array + 0x10) = (uint)*byte_ptr;\n    *(short *)((int)input_array + 0x2a) = *(short *)((int)input_array + 0x2a) + -1;\n    if ((*(short *)((int)input_array + 0x2a) == 0) && (last_char == ')')) {\n      *(uint *)(*input_array + 4) = *(uint *)(*input_array + 4) & 0xfffffbff;\n      input_array[0xc] = 0x21;\n      *(undefined *)((int)input_array + 0x3d) = 0x28;\n      do_nothing();\n    }\n    return 0;\n  }\n  return 0;\n}",
            "called": [
                "FUN_08002c52"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002c54",
            "calling": [
                "FUN_080033b8"
            ],
            "imported": false,
            "current_name": "decode_08002c54"
        },
        "FUN_080043b4": {
            "renaming": {
                "FUN_080043b4": "check_parameters_080043b4",
                "param_1": "ptr_param",
                "param_2": "param_2",
                "param_3": "param_3",
                "param_4": "param_4",
                "param_5": "param_5",
                "iVar1": "value"
            },
            "code": "uint32_t check_parameters_080043b4(uint32_t **ptr_param, uint32_t param_2, bool param_3, int param_4, uint32_t param_5) {\n    int value;\n    while(true) {\n        bool check = (param_2 & ~**ptr_param) == 0;\n        if(check != param_3) {\n            return 0;\n        }\n        if(param_5 == 0xffffffff) {\n            break;\n        }\n        if(param_5 != 0) {\n            value = get_value_from_pointer_08001cc4();\n            if((uint32_t)(value - param_4) > param_5) {\n                break;\n            }\n        }\n        (*ptr_param)[3] &= 0xfffffe5f;\n        (*ptr_param)[5] &= 0xfffffffe;\n        *((uint8_t*)ptr_param + 0x39) = 0x20;\n        *((uint8_t*)ptr_param + 0x3a) = 0x20;\n        *((uint32_t*)ptr_param + 0xe) = 0;\n        return 3;\n    }\n    (*ptr_param)[3] &= 0xfffffe5f;\n    (*ptr_param)[5] &= 0xfffffffe;\n    *((uint8_t*)ptr_param + 0x39) = 0x20;\n    *((uint8_t*)ptr_param + 0x3a) = 0x20;\n    *((uint32_t*)ptr_param + 0xe) = 0;\n    return 3;\n}",
            "called": [
                "FUN_08001cc4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080043b4",
            "calling": [
                "FUN_08004478"
            ],
            "imported": false,
            "current_name": "check_parameters_080043b4"
        },
        "FUN_0800441a": {
            "renaming": {
                "FUN_0800441a": "initialize_device_0800441a",
                "param_1": "device_ptr",
                "do_nothing_08004418": "do_nothing",
                "PTR_": "device_ptr",
                "DAT_": "data",
                "int": "int",
                "undefined4": "undefined4",
                "uint": "unsigned int",
                "char": "char",
                "NULL": "NULL"
            },
            "code": "int initialize_device_0800441a(int *PTR_) {\n    if (PTR_ != NULL) {\n        if (*(char *)((int)PTR_ + 0x39) == '\\0') {\n            *(undefined *)(PTR_ + 0xe) = 0;\n            do_nothing();\n        }\n        *(undefined *)((int)PTR_ + 0x39) = 0x24;\n        *(uint *)(*PTR_ + 0xc) &= 0xffffdfff;\n        calculate_values(PTR_);\n        *(uint *)(*PTR_ + 0x10) &= 0xffffb7ff;\n        *(uint *)(*PTR_ + 0x14) &= 0xffffffd5;\n        *(uint *)(*PTR_ + 0xc) |= 0x2000;\n        PTR_[0xf] = 0;\n        *(undefined *)((int)PTR_ + 0x39) = 0x20;\n        *(undefined *)((int)PTR_ + 0x3a) = 0x20;\n        return 0;\n    }\n    return 1;\n}",
            "called": [
                "FUN_08004204",
                "FUN_08004418"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800441a",
            "calling": [
                "FUN_08004f4c"
            ],
            "imported": false,
            "current_name": "initialize_device_0800441a"
        },
        "FUN_08004d18": {
            "renaming": {
                "FUN_08004d18": "execute_function_if_not_null_08004d18",
                "PTR_DAT_08004d28": "function_ptr_pointer",
                "PTR_DAT_08004d2c": "parameter_pointer"
            },
            "code": "void execute_function_if_not_null_08004d18(void)\n{\n  code* function_ptr = *(code **)PTR_DAT_08004d28;\n  if (function_ptr != (code *)0x0) {\n    function_ptr(*(undefined4 *)PTR_DAT_08004d2c);\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004d18",
            "calling": [
                "FUN_08003ea0"
            ],
            "imported": false,
            "current_name": "execute_function_if_not_null_08004d18"
        },
        "FUN_080006d4": {
            "renaming": {
                "FUN_080006d4": "calculate_value_from_parameters_080006d4",
                "param_1": "parameter1",
                "param_2": "parameter2",
                "param_3": "parameter3",
                "param_4": "parameter4",
                "uVar1": "temp3",
                "unaff_r4": "temp5",
                "uVar2": "temp1",
                "uVar3": "temp2",
                "in_r12": "constant1",
                "bVar4": "condition1",
                "constant1": "constant1",
                "constant2": "constant2",
                "constant3": "constant3",
                "constant4": "constant4"
            },
            "code": "ulonglong calculate_value_from_parameters_080006d4(uint parameter1, uint parameter2, uint parameter3, uint parameter4)\n{\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  uint temp4;\n  uint temp5;\n  uint temp6;\n  bool condition1;\n  bool condition2;\n  uint constant1 = 0x80000000;\n  uint constant2 = 0x100000;\n  uint constant3 = 0x7ff00000;\n  uint constant4 = 0x7ff8000000000000;\n  temp1 = parameter4 >> 0x14;\n  if ((parameter2 != parameter3) && (temp1 != parameter3)) {\n    condition1 = ((parameter1 | (parameter2 << 1)) == 0);\n    if (!condition1) {\n      condition1 = ((parameter3 | (parameter4 << 1)) == 0);\n    }\n    if (condition1) {\n      return ((ulonglong)((parameter2 ^ parameter4) & constant1)) << 0x20;\n    }\n    if (parameter2 == 0) {\n      temp2 = parameter1 & constant1;\n      do {\n        temp3 = parameter1 & constant1;\n        parameter1 = parameter1 << 1;\n        parameter2 = (parameter2 * 2) + (uint)(temp3 != 0);\n      } while ((parameter2 & constant2) == 0);\n      parameter2 = parameter2 | temp2;\n      if (temp1 != 0) {\n        return CONCAT44(parameter2, parameter1);\n      }\n    }\n    do {\n      temp4 = parameter3 & constant1;\n      parameter3 = parameter3 << 1;\n      parameter4 = (parameter4 * 2) + (uint)(temp4 != 0);\n    } while ((parameter4 & constant2) == 0);\n    return CONCAT44(parameter2, parameter1);\n  }\n  condition1 = ((parameter1 | (parameter2 << 1)) == 0);\n  if (condition1) {\n    temp2 = parameter4;\n    temp3 = parameter3;\n  }\n  if (!condition1) {\n    condition1 = ((parameter3 | (parameter4 << 1)) == 0);\n  }\n  temp5 = parameter2;\n  temp6 = parameter1;\n  if (((!condition1) && ((parameter2 != parameter3) || ((parameter1 | (parameter2 << 0xc)) == 0)))) {\n    if ((temp1 != parameter3) || ((parameter3 | (parameter4 << 0xc)) == 0)) {\n      return ((ulonglong)((parameter2 ^ parameter4) & constant1 | constant3)) << 0x20;\n    }\n  }\n  return (CONCAT44(temp5, temp6) | constant4);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080006d4",
            "calling": [
                "FUN_080004f8"
            ],
            "imported": false,
            "current_name": "calculate_value_from_parameters_080006d4"
        },
        "FUN_08000190": {
            "renaming": {
                "FUN_08000190": "FUNC_08000190"
            },
            "code": "\nulonglong FUNC_08000190(uint param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  int iVar1;\n  byte bVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  uint uVar7;\n  int iVar8;\n  uint uVar9;\n  uint uVar10;\n  uint uVar11;\n  uint uVar12;\n  bool bVar13;\n  bool bVar14;\n  bool bVar15;\n  \n  uVar6 = param_4 ^ 0x80000000;\n  uVar9 = param_2 << 1;\n  param_4 = param_4 << 1;\n  bVar13 = ((param_2 ^ uVar6) & 0x7fffffff) == 0;\n  bVar14 = bVar13 && param_1 == param_3;\n  if (!bVar13 || param_1 != param_3) {\n    bVar14 = (uVar9 | param_1) == 0;\n  }\n  if (!bVar14) {\n    bVar14 = (param_4 | param_3) == 0;\n  }\n  iVar8 = (int)uVar9 >> 0x15;\n  if (!bVar14) {\n    bVar14 = iVar8 == -1;\n  }\n  iVar1 = (int)param_4 >> 0x15;\n  if (!bVar14) {\n    bVar14 = iVar1 == -1;\n  }\n  if (bVar14) {\n    if (iVar8 == -1 || iVar1 == -1) {\n      uVar9 = uVar6;\n      uVar11 = param_3;\n      if (iVar8 == -1) {\n        uVar9 = param_2;\n        uVar11 = param_1;\n      }\n      if (iVar8 != -1 || iVar1 != -1) {\n        param_3 = uVar11;\n        uVar6 = uVar9;\n      }\n      bVar14 = (uVar11 | uVar9 << 0xc) == 0;\n      if (bVar14) {\n        bVar14 = (param_3 | uVar6 << 0xc) == 0;\n      }\n      if (bVar14) {\n        bVar14 = uVar9 == uVar6;\n      }\n      if (!bVar14) {\n        uVar9 = uVar9 | 0x80000;\n      }\n      return CONCAT44(uVar9,uVar11);\n    }\n    if (((param_2 ^ uVar6) & 0x7fffffff) != 0 || param_1 != param_3) {\n      if ((uVar9 | param_1) == 0) {\n        param_1 = param_3;\n        param_2 = uVar6;\n      }\n      return CONCAT44(param_2,param_1);\n    }\n    if (param_2 != uVar6) {\n      return 0;\n    }\n    if (uVar9 >> 0x15 == 0) {\n      bVar14 = (param_1 & 0x80000000) != 0;\n      uVar6 = param_2 * 2 + (uint)bVar14;\n      if (CARRY4(param_2,param_2) || CARRY4(param_2 * 2,(uint)bVar14)) {\n        uVar6 = uVar6 | 0x80000000;\n      }\n      return CONCAT44(uVar6,param_1 << 1);\n    }\n    if (uVar9 < 0xffc00000) {\n      return CONCAT44(param_2 + 0x100000,param_1);\n    }\n    param_2 = param_2 & 0x80000000;\nLAB_080003d4:\n    return (ulonglong)(param_2 | 0x7ff00000) << 0x20;\n  }\n  uVar9 = uVar9 >> 0x15;\n  param_4 = param_4 >> 0x15;\n  uVar11 = param_4 - uVar9;\n  bVar14 = uVar11 != 0;\n  if (param_4 < uVar9) {\n    uVar11 = -uVar11;\n  }\n  uVar10 = param_1;\n  uVar7 = param_2;\n  if (bVar14 && uVar9 <= param_4) {\n    uVar9 = uVar9 + uVar11;\n    uVar10 = param_3;\n    uVar7 = uVar6;\n    param_3 = param_1;\n    uVar6 = param_2;\n  }\n  if (0x36 < uVar11) {\n    return CONCAT44(uVar7,uVar10);\n  }\n  uVar4 = uVar7 & 0xfffff | 0x100000;\n  if ((uVar7 & 0x80000000) != 0) {\n    bVar14 = uVar10 != 0;\n    uVar10 = -uVar10;\n    uVar4 = -uVar4 - (uint)bVar14;\n  }\n  uVar7 = uVar6 & 0xfffff | 0x100000;\n  if ((uVar6 & 0x80000000) != 0) {\n    bVar14 = param_3 != 0;\n    param_3 = -param_3;\n    uVar7 = -uVar7 - (uint)bVar14;\n  }\n  if (uVar9 == uVar11) {\n    uVar7 = uVar7 ^ 0x100000;\n    if (uVar9 == 0) {\n      uVar4 = uVar4 ^ 0x100000;\n      uVar9 = 1;\n    }\n    else {\n      uVar11 = uVar11 - 1;\n    }\n  }\n  uVar6 = -uVar11 + 0x20;\n  if ((int)uVar11 < 0x21) {\n    uVar12 = param_3 << (uVar6 & 0xff);\n    param_3 = param_3 >> (uVar11 & 0xff);\n    uVar3 = uVar10 + param_3;\n    uVar5 = uVar7 << (uVar6 & 0xff);\n    uVar6 = uVar3 + uVar5;\n    uVar4 = uVar4 + CARRY4(uVar10,param_3) + ((int)uVar7 >> (uVar11 & 0xff)) +\n            (uint)CARRY4(uVar3,uVar5);\n  }\n  else {\n    uVar12 = uVar7 << (-uVar11 + 0x40 & 0xff);\n    if (param_3 != 0) {\n      uVar12 = uVar12 | 2;\n    }\n    uVar7 = (int)uVar7 >> (uVar11 - 0x20 & 0xff);\n    uVar6 = uVar10 + uVar7;\n    uVar4 = uVar4 + ((int)uVar7 >> 0x1f) + (uint)CARRY4(uVar10,uVar7);\n  }\n  param_2 = uVar4 & 0x80000000;\n  uVar11 = uVar4;\n  if ((int)uVar4 < 0) {\n    bVar14 = uVar12 == 0;\n    uVar12 = -uVar12;\n    uVar11 = -uVar6;\n    uVar6 = -(uint)!bVar14 - uVar6;\n    uVar11 = -(uint)(bVar14 <= uVar11) - uVar4;\n  }\n  if (0xfffff < uVar11) {\n    uVar10 = uVar9 - 1;\n    if (0x1fffff < uVar11) {\n      uVar10 = uVar11 & 1;\n      uVar11 = uVar11 >> 1;\n      bVar2 = (byte)uVar6;\n      uVar6 = (uint)(uVar10 != 0) << 0x1f | uVar6 >> 1;\n      uVar12 = (uint)(bVar2 & 1) << 0x1f | uVar12 >> 1;\n      uVar10 = uVar9;\n      if (0xffbfffff < uVar9 * 0x200000) goto LAB_080003d4;\n    }\nLAB_080002a0:\n    bVar14 = 0x7fffffff < uVar12;\n    if (uVar12 == 0x80000000) {\n      bVar14 = (uVar6 & 1) != 0;\n    }\n    return CONCAT44(uVar11 + uVar10 * 0x100000 + (uint)CARRY4(uVar6,(uint)bVar14) | param_2,\n                    uVar6 + bVar14);\n  }\n  bVar13 = (uVar12 & 0x80000000) != 0;\n  uVar12 = uVar12 << 1;\n  uVar10 = uVar6 * 2;\n  bVar14 = CARRY4(uVar6,uVar6);\n  uVar6 = uVar6 * 2 + (uint)bVar13;\n  uVar11 = uVar11 * 2 + (uint)(bVar14 || CARRY4(uVar10,(uint)bVar13));\n  uVar10 = uVar9 - 2;\n  if ((uVar11 & 0x100000) != 0) goto LAB_080002a0;\n  uVar7 = uVar6;\n  uVar9 = uVar11;\n  if (uVar11 == 0) {\n    uVar7 = 0;\n    uVar9 = uVar6;\n  }\n  iVar8 = count_leading_zeroes(uVar9);\n  if (uVar11 == 0) {\n    iVar8 = iVar8 + 0x20;\n  }\n  uVar11 = iVar8 - 0xb;\n  bVar15 = SBORROW4(uVar11,0x20);\n  uVar6 = iVar8 - 0x2b;\n  bVar14 = (int)uVar6 < 0;\n  bVar13 = uVar6 == 0;\n  if ((int)uVar11 < 0x20) {\n    bVar15 = SCARRY4(uVar6,0xc);\n    iVar8 = iVar8 + -0x1f;\n    bVar14 = iVar8 < 0;\n    bVar13 = iVar8 == 0;\n    uVar6 = uVar11;\n    if (!bVar13 && bVar14 == bVar15) {\n      uVar7 = uVar9 << (uVar11 & 0xff);\n      uVar9 = uVar9 >> (0xcU - iVar8 & 0xff);\n      goto LAB_08000318;\n    }\n  }\n  if (bVar13 || bVar14 != bVar15) {\n    uVar12 = 0x20 - uVar6;\n  }\n  uVar9 = uVar9 << (uVar6 & 0xff);\n  if (bVar13 || bVar14 != bVar15) {\n    uVar9 = uVar9 | uVar7 >> (uVar12 & 0xff);\n  }\n  if (bVar13 || bVar14 != bVar15) {\n    uVar7 = uVar7 << (uVar6 & 0xff);\n  }\nLAB_08000318:\n  if ((int)uVar11 <= (int)uVar10) {\n    return CONCAT44(uVar9 + (uVar10 - uVar11) * 0x100000 | param_2,uVar7);\n  }\n  uVar6 = ~(uVar10 - uVar11);\n  if ((int)uVar6 < 0x1f) {\n    iVar8 = uVar6 - 0x13;\n    if (iVar8 != 0 && iVar8 < 0 == SCARRY4(uVar6 - 0x1f,0xc)) {\n      return CONCAT44(uVar4,uVar7 >> (0x20 - (0xcU - iVar8) & 0xff) | uVar9 << (0xcU - iVar8 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    uVar6 = uVar6 + 1;\n    return CONCAT44(param_2 | uVar9 >> (uVar6 & 0xff),\n                    uVar7 >> (uVar6 & 0xff) | uVar9 << (0x20 - uVar6 & 0xff));\n  }\n  return CONCAT44(uVar4,uVar9 >> (uVar6 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08000190",
            "calling": [
                "FUN_08001a66",
                "FUN_080016b4",
                "FUN_08005da8",
                "FUN_08001814"
            ],
            "imported": false,
            "current_name": "FUNC_08000190"
        },
        "FUN_08006174": {
            "renaming": {
                "FUN_08006174": "process_data_08006174",
                "param_1": "data_start",
                "param_2": "data_end",
                "param_3": "output_1",
                "param_4": "output_2",
                "uStack_8": "output_3",
                "uStack_4": "output_4",
                "FUNC_08006394": "process_helper"
            },
            "code": "void process_data_08006174(undefined4 data_start, undefined4 data_end, undefined4* output_1, undefined4* output_2)\n{\n  undefined4 output_3 = *output_1;\n  undefined4 output_4 = *output_2;\n  process_helper(*(undefined4 *)PTR_PTR_DAT_08006194, data_start, data_end, &output_3, data_start, &output_3);\n  return;\n}",
            "called": [
                "FUN_08006394"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006174",
            "calling": [
                "FUN_0800611c"
            ],
            "imported": false,
            "current_name": "process_data_08006174"
        },
        "FUN_08007028": {
            "renaming": {
                "FUN_08007028": "process_parameter_08007028",
                "param_1": "result",
                "param_2": "input_parameter",
                "puVar1": "data_pointer",
                "iVar2": "function_result"
            },
            "code": "void process_parameter_08007028(int *result, undefined4 input_parameter) {\n  undefined *data_pointer = PTR_DAT_08007044;\n  *(undefined4 *)PTR_DAT_08007044 = 0;\n  int function_result = always_returns_one_08005724(input_parameter);\n  if ((function_result == -1) && (*(int *)data_pointer != 0)) {\n    *result = *(int *)data_pointer;\n  }\n  return;\n}",
            "called": [
                "FUN_08005724"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007028",
            "calling": [
                "FUN_08006e10"
            ],
            "imported": false,
            "current_name": "process_parameter_08007028"
        },
        "FUN_08000194": {
            "renaming": {
                "FUN_08000194": "FUNC_08000194"
            },
            "code": "\nulonglong FUNC_08000194(uint param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  int iVar1;\n  byte bVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  int iVar6;\n  uint uVar7;\n  uint uVar8;\n  uint uVar9;\n  uint uVar10;\n  uint uVar11;\n  uint uVar12;\n  bool bVar13;\n  bool bVar14;\n  bool bVar15;\n  \n  uVar7 = param_2 << 1;\n  uVar9 = param_4 << 1;\n  bVar13 = ((param_2 ^ param_4) & 0x7fffffff) == 0;\n  bVar14 = bVar13 && param_1 == param_3;\n  if (!bVar13 || param_1 != param_3) {\n    bVar14 = (uVar7 | param_1) == 0;\n  }\n  if (!bVar14) {\n    bVar14 = (uVar9 | param_3) == 0;\n  }\n  iVar6 = (int)uVar7 >> 0x15;\n  if (!bVar14) {\n    bVar14 = iVar6 == -1;\n  }\n  iVar1 = (int)uVar9 >> 0x15;\n  if (!bVar14) {\n    bVar14 = iVar1 == -1;\n  }\n  if (bVar14) {\n    if (iVar6 == -1 || iVar1 == -1) {\n      uVar9 = param_4;\n      uVar7 = param_3;\n      if (iVar6 == -1) {\n        uVar9 = param_2;\n        uVar7 = param_1;\n      }\n      if (iVar6 != -1 || iVar1 != -1) {\n        param_3 = uVar7;\n        param_4 = uVar9;\n      }\n      bVar14 = (uVar7 | uVar9 << 0xc) == 0;\n      if (bVar14) {\n        bVar14 = (param_3 | param_4 << 0xc) == 0;\n      }\n      if (bVar14) {\n        bVar14 = uVar9 == param_4;\n      }\n      if (!bVar14) {\n        uVar9 = uVar9 | 0x80000;\n      }\n      return CONCAT44(uVar9,uVar7);\n    }\n    if (((param_2 ^ param_4) & 0x7fffffff) != 0 || param_1 != param_3) {\n      if ((uVar7 | param_1) == 0) {\n        param_1 = param_3;\n        param_2 = param_4;\n      }\n      return CONCAT44(param_2,param_1);\n    }\n    if (param_2 != param_4) {\n      return 0;\n    }\n    if (uVar7 >> 0x15 == 0) {\n      bVar14 = (param_1 & 0x80000000) != 0;\n      uVar9 = param_2 * 2 + (uint)bVar14;\n      if (CARRY4(param_2,param_2) || CARRY4(param_2 * 2,(uint)bVar14)) {\n        uVar9 = uVar9 | 0x80000000;\n      }\n      return CONCAT44(uVar9,param_1 << 1);\n    }\n    if (uVar7 < 0xffc00000) {\n      return CONCAT44(param_2 + 0x100000,param_1);\n    }\n    param_2 = param_2 & 0x80000000;\nLAB_080003d4:\n    return (ulonglong)(param_2 | 0x7ff00000) << 0x20;\n  }\n  uVar7 = uVar7 >> 0x15;\n  uVar9 = uVar9 >> 0x15;\n  uVar10 = uVar9 - uVar7;\n  bVar14 = uVar10 != 0;\n  if (uVar9 < uVar7) {\n    uVar10 = -uVar10;\n  }\n  uVar8 = param_1;\n  uVar5 = param_2;\n  if (bVar14 && uVar7 <= uVar9) {\n    uVar7 = uVar7 + uVar10;\n    uVar8 = param_3;\n    uVar5 = param_4;\n    param_3 = param_1;\n    param_4 = param_2;\n  }\n  if (0x36 < uVar10) {\n    return CONCAT44(uVar5,uVar8);\n  }\n  uVar9 = uVar5 & 0xfffff | 0x100000;\n  if ((uVar5 & 0x80000000) != 0) {\n    bVar14 = uVar8 != 0;\n    uVar8 = -uVar8;\n    uVar9 = -uVar9 - (uint)bVar14;\n  }\n  uVar5 = param_4 & 0xfffff | 0x100000;\n  if ((param_4 & 0x80000000) != 0) {\n    bVar14 = param_3 != 0;\n    param_3 = -param_3;\n    uVar5 = -uVar5 - (uint)bVar14;\n  }\n  if (uVar7 == uVar10) {\n    uVar5 = uVar5 ^ 0x100000;\n    if (uVar7 == 0) {\n      uVar9 = uVar9 ^ 0x100000;\n      uVar7 = 1;\n    }\n    else {\n      uVar10 = uVar10 - 1;\n    }\n  }\n  uVar12 = -uVar10 + 0x20;\n  if ((int)uVar10 < 0x21) {\n    uVar11 = param_3 << (uVar12 & 0xff);\n    param_3 = param_3 >> (uVar10 & 0xff);\n    uVar3 = uVar8 + param_3;\n    uVar4 = uVar5 << (uVar12 & 0xff);\n    uVar12 = uVar3 + uVar4;\n    uVar9 = uVar9 + CARRY4(uVar8,param_3) + ((int)uVar5 >> (uVar10 & 0xff)) +\n            (uint)CARRY4(uVar3,uVar4);\n  }\n  else {\n    uVar11 = uVar5 << (-uVar10 + 0x40 & 0xff);\n    if (param_3 != 0) {\n      uVar11 = uVar11 | 2;\n    }\n    uVar5 = (int)uVar5 >> (uVar10 - 0x20 & 0xff);\n    uVar12 = uVar8 + uVar5;\n    uVar9 = uVar9 + ((int)uVar5 >> 0x1f) + (uint)CARRY4(uVar8,uVar5);\n  }\n  param_2 = uVar9 & 0x80000000;\n  uVar10 = uVar9;\n  if ((int)uVar9 < 0) {\n    bVar14 = uVar11 == 0;\n    uVar11 = -uVar11;\n    uVar10 = -uVar12;\n    uVar12 = -(uint)!bVar14 - uVar12;\n    uVar10 = -(uint)(bVar14 <= uVar10) - uVar9;\n  }\n  if (0xfffff < uVar10) {\n    uVar8 = uVar7 - 1;\n    if (0x1fffff < uVar10) {\n      uVar9 = uVar10 & 1;\n      uVar10 = uVar10 >> 1;\n      bVar2 = (byte)uVar12;\n      uVar12 = (uint)(uVar9 != 0) << 0x1f | uVar12 >> 1;\n      uVar11 = (uint)(bVar2 & 1) << 0x1f | uVar11 >> 1;\n      uVar8 = uVar7;\n      if (0xffbfffff < uVar7 * 0x200000) goto LAB_080003d4;\n    }\nLAB_080002a0:\n    bVar14 = 0x7fffffff < uVar11;\n    if (uVar11 == 0x80000000) {\n      bVar14 = (uVar12 & 1) != 0;\n    }\n    return CONCAT44(uVar10 + uVar8 * 0x100000 + (uint)CARRY4(uVar12,(uint)bVar14) | param_2,\n                    uVar12 + bVar14);\n  }\n  bVar13 = (uVar11 & 0x80000000) != 0;\n  uVar11 = uVar11 << 1;\n  uVar8 = uVar12 * 2;\n  bVar14 = CARRY4(uVar12,uVar12);\n  uVar12 = uVar12 * 2 + (uint)bVar13;\n  uVar10 = uVar10 * 2 + (uint)(bVar14 || CARRY4(uVar8,(uint)bVar13));\n  uVar8 = uVar7 - 2;\n  if ((uVar10 & 0x100000) != 0) goto LAB_080002a0;\n  uVar5 = uVar12;\n  uVar7 = uVar10;\n  if (uVar10 == 0) {\n    uVar5 = 0;\n    uVar7 = uVar12;\n  }\n  iVar6 = count_leading_zeroes(uVar7);\n  if (uVar10 == 0) {\n    iVar6 = iVar6 + 0x20;\n  }\n  uVar12 = iVar6 - 0xb;\n  bVar15 = SBORROW4(uVar12,0x20);\n  uVar10 = iVar6 - 0x2b;\n  bVar14 = (int)uVar10 < 0;\n  bVar13 = uVar10 == 0;\n  if ((int)uVar12 < 0x20) {\n    bVar15 = SCARRY4(uVar10,0xc);\n    iVar6 = iVar6 + -0x1f;\n    bVar14 = iVar6 < 0;\n    bVar13 = iVar6 == 0;\n    uVar10 = uVar12;\n    if (!bVar13 && bVar14 == bVar15) {\n      uVar5 = uVar7 << (uVar12 & 0xff);\n      uVar7 = uVar7 >> (0xcU - iVar6 & 0xff);\n      goto LAB_08000318;\n    }\n  }\n  if (bVar13 || bVar14 != bVar15) {\n    uVar11 = 0x20 - uVar10;\n  }\n  uVar7 = uVar7 << (uVar10 & 0xff);\n  if (bVar13 || bVar14 != bVar15) {\n    uVar7 = uVar7 | uVar5 >> (uVar11 & 0xff);\n  }\n  if (bVar13 || bVar14 != bVar15) {\n    uVar5 = uVar5 << (uVar10 & 0xff);\n  }\nLAB_08000318:\n  if ((int)uVar12 <= (int)uVar8) {\n    return CONCAT44(uVar7 + (uVar8 - uVar12) * 0x100000 | param_2,uVar5);\n  }\n  uVar10 = ~(uVar8 - uVar12);\n  if ((int)uVar10 < 0x1f) {\n    iVar6 = uVar10 - 0x13;\n    if (iVar6 != 0 && iVar6 < 0 == SCARRY4(uVar10 - 0x1f,0xc)) {\n      return CONCAT44(uVar9,uVar5 >> (0x20 - (0xcU - iVar6) & 0xff) | uVar7 << (0xcU - iVar6 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    uVar10 = uVar10 + 1;\n    return CONCAT44(param_2 | uVar7 >> (uVar10 & 0xff),\n                    uVar5 >> (uVar10 & 0xff) | uVar7 << (0x20 - uVar10 & 0xff));\n  }\n  return CONCAT44(uVar9,uVar7 >> (uVar10 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08000194",
            "calling": [
                "FUN_080015f8",
                "FUN_080016b4",
                "FUN_08005da8",
                "FUN_08000cd0"
            ],
            "imported": false,
            "current_name": "FUNC_08000194"
        },
        "FUN_08002494": {
            "renaming": {
                "FUN_08002494": "process_data_08002494",
                "param_1": "index",
                "param_2": "data_1",
                "param_3": "data_2",
                "uVar1": "shift_amount",
                "uVar2": "shift_value",
                "DAT_080024f0": "data_pointer_1",
                "DAT_080024f4": "data_pointer_2",
                "modified_data": "modified_data",
                "char": "char_type"
            },
            "code": "void process_data_08002494(uint index, uint data_1, uint data_2)\n{\n  uint shift_amount = (uint)(*(int *)(DAT_080024f0 + 0xc) << 0x15) >> 0x1d;\n  uint shift_value = 7 - shift_amount;\n  if (shift_value > 3) {\n    shift_value = 4;\n  }\n  if (shift_amount + 4 < 7) {\n    shift_amount = 0;\n  }\n  else {\n    shift_amount = shift_amount - 3;\n  }\n  uint modified_data = (data_1 & (1 << (shift_value & 0xff)) - 1U) << (shift_amount & 0xff) | (1 << (shift_amount & 0xff)) - 1U & data_2;\n  if ((int)index < 0) {\n    *(char *)(DAT_080024f4 + (index & 0xf)) = (char)(modified_data << 4);\n  }\n  else {\n    *(char *)(index + 0xe000e400) = (char)(modified_data << 4);\n  }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002494",
            "calling": [
                "FUN_08005568",
                "FUN_08001b48",
                "FUN_08001c3c",
                "FUN_08005510"
            ],
            "imported": false,
            "current_name": "process_data_08002494"
        },
        "FUN_08002c4e": {
            "renaming": {
                "FUN_08002c4e": "do_nothing_08002c4e"
            },
            "code": "\nvoid do_nothing_08002c4e(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002c4e",
            "calling": [
                "FUN_08002efc",
                "FUN_08002db2"
            ],
            "imported": false,
            "current_name": "do_nothing_08002c4e"
        },
        "FUN_08004f4c": {
            "renaming": {
                "FUN_08004f4c": "FUNC_08004f4c"
            },
            "code": "\nvoid FUNC_08004f4c(int *param_1)\n\n{\n  int iVar1;\n  int iVar2;\n  int iVar3;\n  int iVar4;\n  undefined4 uVar5;\n  uint uVar6;\n  uint local_20;\n  uint local_1c;\n  uint local_18;\n  undefined4 local_14;\n  \n  if (param_1 != (int *)0x0) {\n    iVar2 = find_value_in_list_if_not_negative_08004c78((int)*(char *)(param_1 + 0x16),PTR_DAT_08005204);\n    iVar3 = find_value_in_list_if_not_negative_08004c78((int)*(char *)((int)param_1 + 0x59),PTR_DAT_08005208);\n    if ((iVar3 == 0) || (iVar2 == 0)) {\n      process_data_080068f0(PTR_s_ERROR__at_least_one_UART_pin_has_0800521c,iVar3);\n    }\n    else {\n      iVar4 = compare_and_return_nonzero_08004d06(iVar2);\n      *param_1 = iVar4;\n      iVar1 = DAT_08005214;\n      iVar3 = DAT_08005210;\n      iVar2 = DAT_0800520c;\n      if (iVar4 == 0) {\n        process_data_080068f0(PTR_s_ERROR__U_S_ART_pins_mismatch_08005220);\n      }\n      else {\n        if (iVar4 == DAT_0800520c) {\n          *(uint *)(DAT_0800520c + 0xd80c) = *(uint *)(DAT_0800520c + 0xd80c) | 0x4000;\n          *(uint *)(iVar2 + 0xd80c) = *(uint *)(iVar2 + 0xd80c) & 0xffffbfff;\n          *(uint *)(iVar2 + 0xd818) = *(uint *)(iVar2 + 0xd818) | 0x4000;\n          *(undefined *)(param_1 + 0x11) = 0;\n          *(undefined *)((int)param_1 + 0x5a) = 0x25;\n        }\n        else if (iVar4 == DAT_08005210) {\n          *(uint *)(DAT_08005210 + 0x1cc10) = *(uint *)(DAT_08005210 + 0x1cc10) | 0x20000;\n          *(uint *)(iVar3 + 0x1cc10) = *(uint *)(iVar3 + 0x1cc10) & 0xfffdffff;\n          *(uint *)(iVar3 + 0x1cc1c) = *(uint *)(iVar3 + 0x1cc1c) | 0x20000;\n          *(undefined *)(param_1 + 0x11) = 1;\n          *(undefined *)((int)param_1 + 0x5a) = 0x26;\n        }\n        else if (iVar4 == DAT_08005214) {\n          *(uint *)(DAT_08005214 + 0x1c810) = *(uint *)(DAT_08005214 + 0x1c810) | 0x40000;\n          *(uint *)(iVar1 + 0x1c810) = *(uint *)(iVar1 + 0x1c810) & 0xfffbffff;\n          *(uint *)(iVar1 + 0x1c81c) = *(uint *)(iVar1 + 0x1c81c) | 0x40000;\n          *(undefined *)(param_1 + 0x11) = 2;\n          *(undefined *)((int)param_1 + 0x5a) = 0x27;\n        }\n        uVar5 = set_flag_08004884((uint)((int)*(char *)((int)param_1 + 0x59) << 0x18) >> 0x1c);\n        uVar6 = find_value_or_negative_one_08004cce((int)*(char *)((int)param_1 + 0x59),PTR_DAT_08005208);\n        local_20 = 1 << (*(byte *)((int)param_1 + 0x59) & 0xf) & 0xffff;\n        local_1c = (uVar6 >> 3 & 1) << 4 | uVar6 & 7;\n        local_18 = (uVar6 << 0x1a) >> 0x1e;\n        *(uint *)(DAT_08005218 + 0x18) = *(uint *)(DAT_08005218 + 0x18) | 1;\n        switch((uVar6 << 0x11) >> 0x19) {\n        case 1:\n          *(uint *)(DAT_08005224 + 4) = *(uint *)(DAT_08005224 + 4) | 0x7000001;\n          break;\n        case 2:\n          *(uint *)(DAT_08005224 + 4) = *(uint *)(DAT_08005224 + 4) & 0xfffffffe | 0x7000000;\n          break;\n        case 3:\n          *(uint *)(DAT_08005224 + 4) = *(uint *)(DAT_08005224 + 4) | 0x7000002;\n          break;\n        case 4:\n          *(uint *)(DAT_08005224 + 4) = *(uint *)(DAT_08005224 + 4) & 0xfffffffd | 0x7000000;\n          break;\n        case 5:\n          *(uint *)(DAT_08005224 + 4) = *(uint *)(DAT_08005224 + 4) | 0x7000004;\n          break;\n        case 6:\n          *(uint *)(DAT_08005224 + 4) = *(uint *)(DAT_08005224 + 4) & 0xfffffffb | 0x7000000;\n          break;\n        case 7:\n          *(uint *)(DAT_08005224 + 4) = *(uint *)(DAT_08005224 + 4) | 0x7000008;\n          break;\n        case 8:\n          *(uint *)(DAT_08005224 + 4) = *(uint *)(DAT_08005224 + 4) & 0xfffffff7 | 0x7000000;\n          break;\n        case 9:\n          *(uint *)(DAT_08005224 + 4) = *(uint *)(DAT_08005224 + 4) | 0x7000030;\n          break;\n        case 10:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xffffffcf | 0x7000010;\n          break;\n        case 0xb:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xffffffcf | 0x7000000;\n          break;\n        case 0xc:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) | 0x70000c0;\n          break;\n        case 0xd:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xffffff3f | 0x7000040;\n          break;\n        case 0xe:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xffffff3f | 0x7000000;\n          break;\n        case 0xf:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) | 0x7000300;\n          break;\n        case 0x10:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xfffffcff | 0x7000200;\n          break;\n        case 0x11:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xfffffcff | 0x7000100;\n          break;\n        case 0x12:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xfffffcff | 0x7000000;\n          break;\n        case 0x13:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) | 0x7000c00;\n          break;\n        case 0x14:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xfffff3ff | 0x7000800;\n          break;\n        case 0x15:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xfffff3ff | 0x7000000;\n          break;\n        case 0x16:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) | 0x7001000;\n          break;\n        case 0x17:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xffffefff | 0x7000000;\n          break;\n        case 0x1b:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) | 0x7008000;\n          break;\n        case 0x1c:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xffff7fff | 0x7000000;\n          break;\n        case 0x21:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xf8ffffff;\n          break;\n        case 0x22:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xf8ffffff | 0x1000000;\n          break;\n        case 0x23:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xf8ffffff | 0x2000000;\n          break;\n        case 0x24:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xf8ffffff | 0x4000000;\n        }\n        local_14 = 3;\n        update_bits_08002624(uVar5,&local_20);\n        uVar5 = set_flag_08004884((uint)((int)*(char *)(param_1 + 0x16) << 0x18) >> 0x1c);\n        uVar6 = find_value_or_negative_one_08004cce((int)*(char *)(param_1 + 0x16),PTR_DAT_08005204);\n        local_20 = 1 << (*(byte *)(param_1 + 0x16) & 0xf) & 0xffff;\n        local_1c = (uVar6 >> 3 & 1) << 4 | uVar6 & 7;\n        local_18 = (uVar6 << 0x1a) >> 0x1e;\n        update_bits_08002624(uVar5,&local_20);\n        *(int **)(PTR_DAT_08005228 + (uint)*(byte *)(param_1 + 0x11) * 4) = param_1 + 1;\n        param_1[1] = *param_1;\n        param_1[2] = param_1[0x12];\n        param_1[3] = param_1[0x13];\n        param_1[4] = param_1[0x14];\n        param_1[5] = param_1[0x15];\n        param_1[6] = 0xc;\n        param_1[7] = 0;\n        param_1[8] = 0;\n        initialize_device_0800441a(param_1 + 1);\n      }\n    }\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_08004d06",
                "FUN_08004cce",
                "FUN_08004884",
                "FUN_08002624",
                "FUN_08004c78",
                "FUN_0800441a",
                "FUN_080068f0"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08004f4c",
            "calling": [
                "FUN_08005384",
                "FUN_08005a68"
            ],
            "imported": false,
            "current_name": "FUNC_08004f4c"
        },
        "FUN_080055bc": {
            "renaming": {
                "FUN_080055bc": "find_index_of_value_in_array_080055bc",
                "param_1": "value_to_find",
                "uVar1": "index"
            },
            "code": "uint find_index_of_value_in_array_080055bc(int value_to_find) {\n  uint index = 0;\n  if (value_to_find == 0) {\n    index = 5;\n  }\n  else {\n    while (index < 5) {\n      if (value_to_find == *(int *)(PTR_DAT_080055dc + index * 4)) {\n        return index;\n      }\n      index++;\n    }\n  }\n  return index;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080055bc",
            "calling": [
                "FUN_08005604",
                "FUN_080055e0"
            ],
            "imported": false,
            "current_name": "find_index_of_value_in_array_080055bc"
        },
        "FUN_08001960": {
            "renaming": {
                "FUN_08001960": "update_params_08001960",
                "param_1": "base_address",
                "param_2": "param_2",
                "param_3": "param_3",
                "param_4": "old_param_1",
                "param_5": "old_param_2",
                "param_6": "new_param_1",
                "<unnamed_var_1>": "new_param_2",
                "iVar1": "should_check",
                "puVar2": "params",
                "uVar3": "old_param_3",
                "uVar4": "old_param_5",
                "uVar5": "old_param_4",
                "uVar6": "old_param_6",
                "is_end_of_string_080009dc": "is_end_of_string_1",
                "is_end_of_string_08000a18": "is_end_of_string_2"
            },
            "code": "void update_params_08001960(int base_address, undefined4 param_2, undefined4 param_3, undefined4 old_param_1, undefined4 old_param_2, undefined4 new_param_1, undefined4 new_param_2)\\n{\\n  int should_check = should_check_params_08000a04(param_3, old_param_1, old_param_2, new_param_1, old_param_2);\\n  if (should_check == 0) {\\n    *(undefined4 *)(base_address + 0x60) = new_param_1;\\n    *(undefined4 *)(base_address + 100) = new_param_2;\\n    if (*(char *)(base_address + 0x70) != \"\\0\") {\\n      undefined4 *params = *(undefined4 **)(base_address + 0x3c);\\n      undefined4 old_param_3 = *params;\\n      undefined4 old_param_4 = params[1];\\n      int is_end_1 = is_end_of_string_080009dc(old_param_2, old_param_2, old_param_3, old_param_4);\\n      if (is_end_1 == 0) {\\n        int is_end_2 = is_end_of_string_08000a18(new_param_1, new_param_2, old_param_3, old_param_4);\\n        if (is_end_2 != 0) {\\n          *params = new_param_1;\\n          params[1] = new_param_2;\\n        }\\n      }\\n      else {\\n        *params = old_param_1;\\n        params[1] = old_param_2;\\n      }\\n      undefined4 old_param_5 = *(undefined4 *)(base_address + 0x48);\\n      undefined4 old_param_6 = *(undefined4 *)(base_address + 0x4c);\\n      undefined4 current_param_1 = *(undefined4 *)(base_address + 0x68);\\n      undefined4 current_param_2 = *(undefined4 *)(base_address + 0x6c);\\n      int is_end_3 = is_end_of_string_08000a18(old_param_5, old_param_6, current_param_1, current_param_2);\\n      if (is_end_3 != 0) {\\n        *(undefined4 *)(base_address + 0x48) = current_param_1;\\n        *(undefined4 *)(base_address + 0x4c) = current_param_2;\\n        return;\\n      }\\n      current_param_1 = *(undefined4 *)(base_address + 0x60);\\n      current_param_2 = *(undefined4 *)(base_address + 100);\\n      int is_end_4 = is_end_of_string_080009dc(old_param_5, old_param_6, current_param_1, current_param_2);\\n      if (is_end_4 != 0) {\\n        *(undefined4 *)(base_address + 0x48) = current_param_1;\\n        *(undefined4 *)(base_address + 0x4c) = current_param_2;\\n      }\\n    }\\n  }\\n  return;\\n}",
            "called": [
                "FUN_08000a18",
                "FUN_080009dc",
                "FUN_08000a04"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001960",
            "calling": [
                "FUN_08000cd0",
                "FUN_08001ab0"
            ],
            "imported": false,
            "current_name": "update_params_08001960"
        },
        "FUN_08004ca2": {
            "renaming": {
                "FUN_08004ca2": "find_value_from_param_08004ca2",
                "param_1": "param",
                "uVar1": "value",
                "find_value_from_param_08004c8a": "get_value_from_param"
            },
            "code": "int find_value_from_param_08004ca2(int param) {\n  int value = -1;\n  if (param != 0) {\n    value = get_value_from_param();\n  }\n  return value;\n}",
            "called": [
                "FUN_08004c8a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004ca2",
            "calling": [
                "FUN_08005384",
                "FUN_08005b54"
            ],
            "imported": false,
            "current_name": "find_value_from_param_08004ca2"
        },
        "FUN_08002810": {
            "renaming": {
                "FUN_08002810": "is_param2_included_in_param1_08002810",
                "param_1": "ptr_param1",
                "param_2": "param2_mask",
                "PTR_": "ptr_",
                "DAT_": "data_"
            },
            "code": "int is_param2_included_in_param1_08002810(uint32_t PTR_param1, uint32_t param2_mask) {\n    uint32_t* PTR_param1_offset = (uint32_t*)(PTR_param1 + 8);\n    if((param2_mask & *PTR_param1_offset) == 0) {\n        return 0;\n    }\n    return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002810",
            "calling": [
                "FUN_08004c48"
            ],
            "imported": false,
            "current_name": "is_param2_included_in_param1_08002810"
        },
        "FUN_0800224c": {
            "renaming": {
                "FUN_0800224c": "clear_flags_0800224c",
                "param_1": "flag_array",
                "iVar1": "result"
            },
            "code": "int clear_flags_0800224c(int *flag_array)\n{\n    int result;\n    if (flag_array == NULL)\n    {\n        result = 1;\n    }\n    else\n    {\n        flag_array[10] |= 2;\n        result = check_and_update_flags();\n        if (result == 0)\n        {\n            flag_array[0] = -32;\n            flag_array[1] &= DAT_08002340;\n            flag_array[2] &= DAT_08002344;\n            flag_array[3] &= 0xFF000000;\n            flag_array[4] &= 0xC0000000;\n            flag_array[5] &= 0xFFFFF000;\n            flag_array[6] &= 0xFFFFF000;\n            flag_array[7] &= 0xFFFFF000;\n            flag_array[8] &= 0xFFFFF000;\n            flag_array[9] &= 0xFFFFF000;\n            flag_array[10] &= 0xFFFFF000;\n            flag_array[11] &= 0xFF000000;\n            flag_array[12] &= 0xFF000000;\n            flag_array[13] &= 0xC0000000;\n            flag_array[14] &= 0xC0000000;\n            flag_array[15] &= 0xFFC00000;\n            flag_array[16] &= 0xFFC00000;\n            update_flags(flag_array);\n            flag_array[11] = 0;\n            flag_array[10] = 0;\n        }\n        *(undefined *)(flag_array + 9) = 0;\n    }\n    return result;\n}",
            "called": [
                "FUN_080020f0",
                "FUN_080049f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800224c",
            "calling": [
                "FUN_08004a4c"
            ],
            "imported": false,
            "current_name": "clear_flags_0800224c"
        },
        "FUN_080054b0": {
            "renaming": {
                "FUN_080054b0": "check_flag_080054b0",
                "param_1": "index",
                "uVar1": "value",
                "PTR_DAT_080054d0": "pointer_array",
                "byte": "byte_value",
                "combine_two_bytes_080047e8": "combine_two_bytes",
                "*(undefined4 *)": "get_pointer_from_index"
            },
            "code": "bool check_flag_080054b0(int index)\n{\n  uint16_t value = combine_two_bytes(get_pointer_from_index(index));\n  return (value & 0x21) == 0x21;\n}",
            "called": [
                "FUN_080047e8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080054b0",
            "calling": [],
            "imported": false,
            "current_name": "check_flag_080054b0"
        },
        "FUN_08006f00": {
            "renaming": {
                "FUN_08006f00": "process_input_08006f00",
                "param_1": "input_size",
                "puVar1": "pointer_to_byte",
                "uVar2": "return_value",
                "piVar3": "function_pointer_array",
                "iVar4": "function_pointer",
                "pcVar5": "function",
                "unaff_r4": "unused_register_4",
                "unaff_r5": "unused_register_5",
                "in_lr": "link_register",
                "puVar6": "pointer_to_pointer_to_function_pointer_array",
                "PTR_PTR_DAT_08006f0c": "pointer_to_pointer_to_function_pointer_array",
                "PTR_DAT_08006f30": "pointer_to_return_code"
            },
            "code": "int process_input_08006f00(uint input_size) {\n  int *function_pointer_array = *(int **)PTR_PTR_DAT_08006f0c;\n  if (input_size > 0x1f) {\n    *function_pointer_array = 0x16;\n    return -1;\n  }\n  int function_pointer = function_pointer_array[0x11];\n  if ((function_pointer != 0) && (*(code **)(function_pointer + input_size * 4) != (code *)0x0)) {\n    code *function = *(code **)(function_pointer + input_size * 4);\n    if (function != (code *)0x1) {\n      if (function == (code *)0xffffffff) {\n        *function_pointer_array = 0x16;\n        return 1;\n      }\n      *(undefined4 *)(function_pointer + input_size * 4) = 0;\n      (*function)(input_size);\n    }\n    return 0;\n  }\n  undefined *PTR_PTR_DAT_08006f0c = PTR_PTR_DAT_08006f0c;\n  undefined4 return_value = thunk_return_one_08005750(function_pointer_array);\n  undefined *PTR_DAT_08006f30 = PTR_DAT_08006f30;\n  *(undefined4 *)PTR_DAT_08006f30 = 0;\n  int set_pointer_status = set_pointer_value_08005740(return_value, input_size, input_size, 0, PTR_PTR_DAT_08006f0c, unaff_r4, unaff_r5, in_lr);\n  if ((set_pointer_status == -1) && (*(int *)PTR_DAT_08006f30 != 0)) {\n    *function_pointer_array = *(int *)PTR_DAT_08006f30;\n  }\n  return set_pointer_status;\n}",
            "called": [
                "FUN_08005740",
                "thunk_FUN_08005750"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006f00",
            "calling": [
                "FUN_08006ac0"
            ],
            "imported": false,
            "current_name": "process_input_08006f00"
        },
        "FUN_080016b4": {
            "renaming": {
                "FUN_080016b4": "check_value_at_offset_080016b4",
                "param_1": "offset",
                "cVar1": "result",
                "iVar2": "value1",
                "iVar3": "is_end_of_string",
                "uVar4": "ptr4",
                "uVar5": "ptr2",
                "uVar6": "ptr6",
                "uVar7": "local_var1",
                "uVar8": "ptr5",
                "uVar9": "ptr3",
                "uVar10": "local_var2",
                "uVar11": "cVar1",
                "uVar12": "ptr7",
                "uVar13": "ptr4",
                "uVar14": "var4",
                "uVar15": "var1",
                "uVar16": "var2",
                "uVar17": "var3",
                "local_38": "local_var1",
                "uStack_34": "local_var2"
            },
            "code": "char check_value_at_offset_080016b4(int offset)\n{\n  char result;\n  int value1 = 0;\n  int value2 = 0;\n  undefined4 ptr1;\n  undefined4 ptr2;\n  undefined4 ptr3;\n  undefined4 ptr4;\n  undefined4 ptr5;\n  undefined4 ptr6;\n  undefined4 ptr7;\n  undefined8 var1;\n  undefined8 var2;\n  undefined8 var3;\n  undefined8 var4;\n  undefined4 local_var1;\n  undefined4 local_var2;\n  result = *(char *)(offset + 0x70);\n  if (result != '\\0') {\n    value1 = get_value_from_pointer_wrapper_080058e0();\n    if ((uint)(value1 - *(int *)(offset + 0x44)) < *(uint *)(offset + 0x58)) {\n      result = '\\0';\n    }\n    else {\n      ptr2 = **(undefined4 **)(offset + 0x38);\n      ptr5 = (*(undefined4 **)(offset + 0x38))[1];\n      var1 = FUNC_08000190(**(undefined4 **)(offset + 0x40),(*(undefined4 **)(offset + 0x40))[1]);\n      ptr4 = (undefined4)((ulonglong)var1 >> 0x20);\n      var2 = FUNC_08000190(ptr2,ptr5,*(undefined4 *)(offset + 0x50),*(undefined4 *)(offset + 0x54));\n      ptr1 = (undefined4)((ulonglong)var2 >> 0x20);\n      var3 = FUNC_080004f8((int)var1,ptr4,*(undefined4 *)(offset + 0x20),*(undefined4 *)(offset + 0x24));\n      var3 = FUNC_08000194((int)var3,(int)((ulonglong)var3 >> 0x20),*(undefined4 *)(offset + 0x48),*(undefined4 *)(offset + 0x4c));\n      *(undefined8 *)(offset + 0x48) = var3;\n      if (*(char *)(offset + 0x71) == '\\0') {\n        var4 = FUNC_080004f8((int)var2,ptr1,*(undefined4 *)(offset + 0x18),*(undefined4 *)(offset + 0x1c));\n        var3 = FUNC_08000190((int)var3,(int)((ulonglong)var3 >> 0x20),(int)var4,(int)((ulonglong)var4 >> 0x20));\n        *(undefined8 *)(offset + 0x48) = var3;\n      }\n      ptr6 = *(undefined4 *)(offset + 0x48);\n      ptr3 = *(undefined4 *)(offset + 0x4c);\n      ptr7 = *(undefined4 *)(undefined8 *)(offset + 0x68);\n      var3 = *(undefined8 *)(offset + 0x68);\n      if (!is_end_of_string_08000a18(ptr6,ptr3,ptr7,*(undefined4 *)(offset + 0x6c))) {\n        local_var1 = *(undefined4 *)(offset + 0x60);\n        local_var2 = *(undefined4 *)(offset + 100);\n        if (is_end_of_string_080009dc(ptr6,ptr3)) {\n          *(undefined4 *)(offset + 0x48) = local_var1;\n          *(undefined4 *)(offset + 0x4c) = local_var2;\n        }\n      }\n      else {\n        *(undefined4 *)(offset + 0x48) = ptr7;\n        *(undefined4 *)(offset + 0x4c) = *(undefined4 *)(offset + 0x6c);\n      }\n      if (*(char *)(offset + 0x71) != '\\0') {\n        var1 = FUNC_080004f8((int)var1,ptr4,*(undefined4 *)(offset + 0x18),*(undefined4 *)(offset + 0x1c));\n      }\n      var4 = (undefined8)0;\n      if (*(char *)(offset + 0x71) != '\\0') {\n        var4 = FUNC_080004f8((int)var1,ptr4,*(undefined4 *)(offset + 0x18),*(undefined4 *)(offset + 0x1c));\n      }\n      var2 = FUNC_080004f8((int)var2,ptr1,*(undefined4 *)(offset + 0x28),*(undefined4 *)(offset + 0x2c));\n      var2 = FUNC_08000190(ptr6,ptr3,(int)var2,(int)((ulonglong)var2 >> 0x20));\n      var2 = FUNC_08000194((int)var4,(int)((ulonglong)var4 >> 0x20),(int)var2,(int)((ulonglong)var2 >> 0x20));\n      ptr6 = (undefined4)((ulonglong)var2 >> 0x20);\n      if (!is_end_of_string_080009dc(ptr7,*(undefined4 *)(offset + 0x6c),(int)var2,ptr6)) {\n        var3 = *(undefined8 *)(offset + 0x60);\n        if (!is_end_of_string_080009dc((int)var2,ptr6,*(undefined4 *)(undefined8 *)(offset + 0x60),*(undefined4 *)(offset + 100))) {\n          var3 = var2;\n        }\n      }\n      **(undefined8 **)(offset + 0x3c) = var3;\n      *(undefined4 *)(offset + 0x50) = ptr2;\n      *(undefined4 *)(offset + 0x54) = ptr5;\n      *(int *)(offset + 0x44) = value1;\n    }\n  }\n  return result;\n}",
            "called": [
                "FUN_08000190",
                "FUN_080004f8",
                "FUN_08000a18",
                "FUN_080058e0",
                "FUN_080009dc",
                "FUN_08000194"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080016b4",
            "calling": [
                "FUN_08000cd0"
            ],
            "imported": false,
            "current_name": "check_value_at_offset_080016b4"
        },
        "FUN_0800074c": {
            "renaming": {
                "FUN_0800074c": "FUNC_0800074c"
            },
            "code": "\nulonglong FUNC_0800074c(undefined4 param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  uint uVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  uint uVar7;\n  int iVar8;\n  uint uVar9;\n  uint unaff_r5;\n  uint uVar10;\n  uint uVar11;\n  uint uVar12;\n  uint uVar13;\n  bool bVar14;\n  bool bVar15;\n  bool bVar16;\n  ulonglong uVar17;\n  \n  uVar17 = CONCAT44(param_2,param_1);\n  uVar13 = 0x7ff;\n  uVar7 = param_2 >> 0x14 & 0x7ff;\n  bVar14 = uVar7 == 0;\n  if (!bVar14) {\n    unaff_r5 = param_4 >> 0x14 & 0x7ff;\n    bVar14 = unaff_r5 == 0;\n  }\n  if (!bVar14) {\n    bVar14 = uVar7 == 0x7ff;\n  }\n  if (!bVar14) {\n    bVar14 = unaff_r5 == 0x7ff;\n  }\n  if (bVar14) {\n    uVar17 = calculate_result_080008ba();\n  }\n  uVar9 = (uint)(uVar17 >> 0x20);\n  uVar11 = (uint)uVar17;\n  iVar8 = uVar7 - unaff_r5;\n  if ((param_3 | param_4 << 0xc) == 0) {\n    uVar7 = (uVar9 ^ param_4) & 0x80000000 | uVar9 & 0xfffff;\n    bVar16 = SCARRY4(iVar8,uVar13 >> 1);\n    uVar9 = iVar8 + (uVar13 >> 1);\n    bVar14 = (int)uVar9 < 0;\n    bVar15 = uVar9 == 0;\n    if (!bVar15 && bVar14 == bVar16) {\n      bVar16 = SBORROW4(uVar13,uVar9);\n      bVar14 = (int)(uVar13 - uVar9) < 0;\n      bVar15 = uVar13 == uVar9;\n    }\n    if (!bVar15 && bVar14 == bVar16) {\n      uVar7 = uVar7 | uVar9 * 0x100000;\n    }\n    if (!bVar15 && bVar14 == bVar16) {\n      return uVar17 & 0xffffffff | (ulonglong)uVar7 << 0x20;\n    }\n    uVar7 = uVar7 | 0x100000;\n    uVar13 = 0;\n    bVar15 = SBORROW4(uVar9,1);\n    uVar9 = uVar9 - 1;\n    bVar14 = uVar9 == 0;\n    uVar3 = uVar9;\n  }\n  else {\n    uVar3 = (param_4 << 0xc) >> 4 | 0x10000000 | param_3 >> 0x18;\n    uVar13 = param_3 << 8;\n    uVar10 = (uVar9 << 0xc) >> 4 | 0x10000000 | uVar11 >> 0x18;\n    uVar11 = uVar11 * 0x100;\n    uVar7 = (uVar9 ^ param_4) & 0x80000000;\n    bVar14 = uVar3 <= uVar10;\n    if (uVar10 == uVar3) {\n      bVar14 = uVar13 <= uVar11;\n    }\n    iVar8 = iVar8 + (uint)bVar14;\n    uVar9 = iVar8 + 0x3fd;\n    if (bVar14 == false) {\n      uVar3 = uVar3 >> 1;\n      uVar13 = (uint)((param_3 >> 0x18 & 1) != 0) << 0x1f | uVar13 >> 1;\n    }\n    uVar12 = uVar11 - uVar13;\n    uVar10 = (uVar10 - uVar3) - (uint)(uVar11 < uVar13);\n    uVar4 = uVar3 >> 1;\n    uVar1 = (uint)((uVar3 & 1) != 0) << 0x1f | uVar13 >> 1;\n    uVar11 = 0x100000;\n    uVar3 = 0x80000;\n    while( true ) {\n      bVar14 = uVar1 <= uVar12;\n      if (uVar4 < uVar10 || uVar10 - uVar4 < (uint)bVar14) {\n        uVar12 = uVar12 - uVar1;\n        uVar11 = uVar11 | uVar3;\n        uVar10 = (uVar10 - uVar4) - (uint)!bVar14;\n      }\n      uVar5 = uVar4 >> 1;\n      uVar1 = (uint)((uVar4 & 1) != 0) << 0x1f | uVar1 >> 1;\n      bVar15 = uVar1 <= uVar12;\n      bVar14 = uVar10 - uVar5 < (uint)bVar15;\n      uVar13 = uVar10;\n      if (uVar5 < uVar10 || bVar14) {\n        uVar12 = uVar12 - uVar1;\n        uVar13 = (uVar10 - uVar5) - (uint)!bVar15;\n      }\n      if (uVar5 < uVar10 || bVar14) {\n        uVar11 = uVar11 | uVar3 >> 1;\n      }\n      uVar10 = uVar4 >> 2;\n      uVar2 = (uint)((uVar5 & 1) != 0) << 0x1f | uVar1 >> 1;\n      bVar15 = uVar2 <= uVar12;\n      bVar14 = uVar13 - uVar10 < (uint)bVar15;\n      uVar5 = uVar13;\n      if (uVar10 < uVar13 || bVar14) {\n        uVar12 = uVar12 - uVar2;\n        uVar5 = (uVar13 - uVar10) - (uint)!bVar15;\n      }\n      if (uVar10 < uVar13 || bVar14) {\n        uVar11 = uVar11 | uVar3 >> 2;\n      }\n      uVar6 = uVar4 >> 3;\n      uVar1 = (uint)((uVar10 & 1) != 0) << 0x1f | uVar2 >> 1;\n      bVar15 = uVar1 <= uVar12;\n      bVar14 = uVar5 - uVar6 < (uint)bVar15;\n      uVar10 = uVar5;\n      if (uVar6 < uVar5 || bVar14) {\n        uVar12 = uVar12 - uVar1;\n        uVar10 = (uVar5 - uVar6) - (uint)!bVar15;\n      }\n      if (uVar6 < uVar5 || bVar14) {\n        uVar11 = uVar11 | uVar3 >> 3;\n      }\n      uVar13 = uVar10 | uVar12;\n      if (uVar13 == 0) break;\n      uVar10 = uVar10 << 4 | uVar12 >> 0x1c;\n      uVar12 = uVar12 << 4;\n      uVar4 = uVar4 & 0xfffffff8 | uVar1 >> 0x1d;\n      uVar1 = (uVar2 >> 1) << 3;\n      uVar3 = uVar3 >> 4;\n      if (uVar3 == 0) {\n        uVar6 = uVar4;\n        if ((uVar7 & 0x100000) != 0) goto LAB_0800086a;\n        uVar7 = uVar7 | uVar11;\n        uVar11 = 0;\n        uVar3 = 0x80000000;\n      }\n    }\n    if ((uVar7 & 0x100000) == 0) {\n      uVar7 = uVar7 | uVar11;\n      uVar11 = 0;\n    }\nLAB_0800086a:\n    bVar16 = 0xfc < uVar9;\n    bVar15 = SBORROW4(uVar9,0xfd);\n    uVar4 = iVar8 + 0x300;\n    bVar14 = uVar4 == 0;\n    uVar3 = uVar4;\n    if (bVar16 && !bVar14) {\n      bVar16 = 0x6ff < uVar4;\n      bVar15 = SBORROW4(uVar4,0x700);\n      uVar3 = iVar8 - 0x400;\n      bVar14 = uVar4 == 0x700;\n    }\n    if (!bVar16 || bVar14) {\n      bVar14 = uVar6 <= uVar10;\n      if (uVar10 == uVar6) {\n        bVar14 = uVar1 <= uVar12;\n      }\n      if (uVar10 == uVar6 && uVar12 == uVar1) {\n        bVar14 = (uVar11 & 1) != 0;\n      }\n      return CONCAT44(uVar7 + uVar9 * 0x100000 + (uint)CARRY4(uVar11,(uint)bVar14),uVar11 + bVar14);\n    }\n  }\n  if (!bVar14 && (int)uVar3 < 0 == bVar15) {\n    return (ulonglong)(uVar7 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  bVar16 = SCARRY4(uVar9,0x36);\n  bVar14 = (int)(uVar9 + 0x36) < 0;\n  bVar15 = uVar9 == 0xffffffca;\n  if (bVar15 || bVar14 != bVar16) {\n    uVar11 = 0;\n  }\n  if (bVar15 || bVar14 != bVar16) {\n    uVar7 = uVar7 & 0x80000000;\n  }\n  if (bVar15 || bVar14 != bVar16) {\n    return CONCAT44(uVar7,uVar11);\n  }\n  uVar3 = -uVar9;\n  uVar10 = uVar3 - 0x20;\n  if (0x1f < (int)uVar3) {\n    uVar3 = uVar11 >> (uVar10 & 0xff) | uVar7 << (0x20 - uVar10 & 0xff);\n    uVar9 = (uVar7 >> (uVar10 & 0xff) & ~((uVar7 & 0x80000000) >> (uVar10 & 0xff))) -\n            ((int)uVar3 >> 0x1f);\n    if ((uVar13 | uVar11 << (0x20 - uVar10 & 0xff) | uVar3 << 1) == 0) {\n      uVar9 = uVar9 & ~(uVar3 >> 0x1f);\n    }\n    return CONCAT44(uVar7,uVar9) & 0x80000000ffffffff;\n  }\n  iVar8 = uVar3 - 0x14;\n  if (iVar8 != 0 && iVar8 < 0 == SCARRY4(uVar10,0xc)) {\n    uVar9 = 0xc - iVar8;\n    uVar3 = uVar11 << (uVar9 & 0xff);\n    uVar11 = uVar11 >> (0x20 - uVar9 & 0xff) | uVar7 << (uVar9 & 0xff);\n    uVar9 = uVar11 + -((int)uVar3 >> 0x1f);\n    if ((uVar13 | uVar3 << 1) == 0) {\n      uVar9 = uVar9 & ~(uVar3 >> 0x1f);\n    }\n    return CONCAT44((uVar7 & 0x80000000) + (uint)CARRY4(uVar11,-((int)uVar3 >> 0x1f)),uVar9);\n  }\n  uVar10 = uVar11 << (uVar9 + 0x20 & 0xff);\n  uVar11 = uVar11 >> (uVar3 & 0xff) | uVar7 << (uVar9 + 0x20 & 0xff);\n  uVar9 = uVar11 + -((int)uVar10 >> 0x1f);\n  if ((uVar13 | uVar10 << 1) == 0) {\n    uVar9 = uVar9 & ~(uVar10 >> 0x1f);\n  }\n  return CONCAT44((uVar7 & 0x80000000) +\n                  ((uVar7 & 0x7fffffff) >> (uVar3 & 0xff)) +\n                  (uint)CARRY4(uVar11,-((int)uVar10 >> 0x1f)),uVar9);\n}\n\n",
            "called": [
                "FUN_080008ba"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x0800074c",
            "calling": [
                "FUN_080015f8",
                "FUN_08005da8",
                "FUN_08001814",
                "FUN_08001918"
            ],
            "imported": false,
            "current_name": "FUNC_0800074c"
        },
        "FUN_080018f8": {
            "renaming": {
                "FUN_080018f8": "parse_input_string_and_return_080018f8",
                "parse_input_string_08001814": "parse_input_string"
            },
            "code": "void parse_input_string_and_return_080018f8(void)\n{\n  parse_input_string();\n  return;\n}",
            "called": [
                "FUN_08001814"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080018f8",
            "calling": [
                "FUN_08000cd0"
            ],
            "imported": false,
            "current_name": "parse_input_string_and_return_080018f8"
        },
        "FUN_08005890": {
            "renaming": {
                "FUN_08005890": "check_if_bit_set_at_position_08005890",
                "param_1": "position",
                "cVar1": "result",
                "iVar2": "bit_value",
                "uVar3": "data_value",
                "uVar4": "data_value"
            },
            "code": "char check_if_bit_set_at_position_08005890(uint position)\\n{\\n  char result;\\n  int bit_value;\\n  uint data_value;\\n\\n  if (position < 0x3c) {\\n    data_value = (uint)(char)PTR_DAT_080058d8[position];\\n  }\\n  else {\\n    data_value = 0xffffffff;\\n  }\\n  if (data_value == 0xffffffff) {\\n    result = \"\\0\";\\n  }\\n  else {\\n    bit_value = get_bit_at_position_080047f4(data_value,PTR_DAT_080058dc);\\n    if (bit_value == 0) {\\n      result = \"\\0\";\\n    }\\n    else {\\n      data_value = get_datum_by_index_08004848((data_value << 0x18) >> 0x1c);\\n      result = check_if_param2_is_included_in_param1_08004c48(data_value,1 << (data_value & 0xf) & 0xffff);\\n    }\\n  }\\n  if (result != \"\\0\") {\\n    result = \"\\x01\";\\n  }\\n  return result;\\n}",
            "called": [
                "FUN_08004848",
                "FUN_08004c48",
                "FUN_080047f4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005890",
            "calling": [
                "FUN_080015b2",
                "FUN_08000cd0"
            ],
            "imported": false,
            "current_name": "check_if_bit_set_at_position_08005890"
        },
        "FUN_08005da0": {
            "renaming": {
                "FUN_08005da0": "convert_base_08005da0"
            },
            "code": "void convert_base_08005da0() {\n  convert_base_08005da0_08005d8a();\n  return;\n}",
            "called": [
                "FUN_08005d8a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005da0",
            "calling": [],
            "imported": false,
            "current_name": "convert_base_08005da0"
        },
        "FUN_08004cb2": {
            "renaming": {
                "FUN_08004cb2": "find_value_in_array_08004cb2",
                "param_1": "value",
                "param_2": "array",
                "*param_2": "*array"
            },
            "code": "unsigned int find_value_in_array_08004cb2(int value, char* array) {\n    while (true) {\n        if (*array == -1) {\n            return 0xffffffff;\n        }\n        if (*array == value) {\n            break;\n        }\n        array += 0xc;\n    }\n    return *(unsigned int*)(array + 8);\n}",
            "called": [
                "FUN_08004cb2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004cb2",
            "calling": [
                "FUN_08004cce",
                "FUN_08004cb2"
            ],
            "imported": false,
            "current_name": "find_value_in_array_08004cb2"
        },
        "FUN_08004ef4": {
            "renaming": {
                "FUN_08004ef4": "check_and_set_bits_in_uint_08004ef4",
                "param_1": "uint_to_check_and_set",
                "iVar1": "index"
            },
            "code": "void check_and_set_bits_in_uint_08004ef4(unsigned int uint_to_check_and_set)\\n{\\n    int index = subtract_four_from_param();\\n    if (*(char *)(index + 0x5d) == \"\\0\") {\\n        set_bits_in_uint(uint_to_check_and_set);\\n    }\\n    return;\\n}",
            "called": [
                "FUN_08002c10",
                "FUN_08004e70"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004ef4",
            "calling": [
                "FUN_0800316c"
            ],
            "imported": false,
            "current_name": "check_and_set_bits_in_uint_08004ef4"
        },
        "FUN_08001294": {
            "renaming": {
                "FUN_08001294": "set_params_at_offset_08001294",
                "param_1": "base_offset",
                "param_2": "param_2",
                "param_3": "param_3",
                "param_4": "param_4",
                "param_5": "param_5"
            },
            "code": "void set_params_at_offset_08001294(int base_offset, undefined param_2, undefined param_3, undefined param_4, undefined param_5) {\n  *(undefined *)(base_offset + 0x18) = param_2;\n  *(undefined *)(base_offset + 0x19) = param_3;\n  *(undefined *)(base_offset + 0x1a) = param_4;\n  *(undefined *)(base_offset + 0x1b) = param_5;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001294",
            "calling": [
                "FUN_080013a4"
            ],
            "imported": false,
            "current_name": "set_params_at_offset_08001294"
        },
        "FUN_08002384": {
            "renaming": {
                "FUN_08002384": "process_data_08002384",
                "param_1": "data",
                "iVar1": "flag_value",
                "uVar2": "shift_value",
                "iVar3": "value_1",
                "iVar4": "value_2",
                "uVar5": "value_3",
                "local_14": "counter"
            },
            "code": "int process_data_08002384(int *data)\n{\n  int flag_value;\n  uint shift_value;\n  int value_1;\n  int value_2;\n  uint value_3;\n  int counter;\n  \n  if (*(char *)(data + 9) == 1)\n  {\n    return 2;\n  }\n  \n  *(undefined *)(data + 9) = 1;\n  flag_value = check_and_update_flag();\n  \n  if (flag_value == 0)\n  {\n    data[10] = (data[10] & 0xffffeefd) | 2;\n    value_3 = *(uint *)PTR_DAT_0800246c;\n    shift_value = calculate_shifted_value_08003da4(2);\n    \n    for (counter = value_3 / shift_value << 1; counter != 0; counter = counter + -1)\n    {\n    }\n    \n    check_and_update_value(data);\n    *(uint *)(*data + 8) = *(uint *)(*data + 8) | 8;\n    value_1 = get_value_from_pointer_08001cc4();\n    \n    while ((*(uint *)(*data + 8) & 8) != 0)\n    {\n      value_2 = get_value_from_pointer_08001cc4();\n      \n      if (10 < (uint)(value_2 - value_1))\n      {\n        data[10] = (data[10] & 0xffffffed) | 0x10;\n        *(undefined *)(data + 9) = 0;\n        return 1;\n      }\n    }\n    \n    *(uint *)(value_2 + 8) = *(uint *)(value_2 + 8) | 4;\n    value_1 = get_value_from_pointer_08001cc4();\n    \n    while ((*(uint *)(*data + 8) & 4) != 0)\n    {\n      value_2 = get_value_from_pointer_08001cc4();\n      \n      if (10 < (uint)(value_2 - value_1))\n      {\n        data[10] = (data[10] & 0xffffffed) | 0x10;\n        *(undefined *)(data + 9) = 0;\n        return 1;\n      }\n    }\n    \n    data[10] = (data[10] & 0xfffffffc) | 1;\n  }\n  \n  *(undefined *)(data + 9) = 0;\n  return flag_value;\n}",
            "called": [
                "FUN_080020f0",
                "FUN_08001cc4",
                "FUN_08001f84",
                "FUN_08003da4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002384",
            "calling": [
                "FUN_08004a4c"
            ],
            "imported": false,
            "current_name": "process_data_08002384"
        },
        "FUN_08005650": {
            "renaming": {
                "FUN_08005650": "do_nothing_08005650"
            },
            "code": "\nvoid do_nothing_08005650(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005650",
            "calling": [
                "FUN_080046b8"
            ],
            "imported": false,
            "current_name": "do_nothing_08005650"
        },
        "FUN_08002ad8": {
            "renaming": {
                "FUN_08002ad8": "increment_pointer_if_short_not_zero_08002ad8",
                "param_1": "ptr_param_1",
                "puVar1": "ptr_char_1",
                "PTR_": "ptr_",
                "DAT_": "dat_"
            },
            "code": "int increment_pointer_if_short_not_zero_08002ad8(int *PTR_param_1) {\n  short *PTR_short_1 = (short *)((int)PTR_param_1 + 0x2a);\n  if (*PTR_short_1 != 0) {\n    char *PTR_char_1 = (char *)PTR_param_1[9];\n    PTR_param_1[9] = (int)(PTR_char_1 + 1);\n    *PTR_char_1 = (char)*(int *)(*PTR_param_1 + 0x10);\n    *PTR_short_1 = *PTR_short_1 + -1;\n  }\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ad8",
            "calling": [
                "FUN_080033b8"
            ],
            "imported": false,
            "current_name": "increment_pointer_if_short_not_zero_08002ad8"
        },
        "FUN_08004204": {
            "renaming": {
                "FUN_08004204": "calculate_values_08004204",
                "param_1": "params",
                "*param_1": "base_val",
                "uVar1": "factor7",
                "uVar2": "PTR_DAT_080043b0",
                "iVar3": "val1",
                "iVar4": "val4",
                "iVar5": "val5",
                "iVar6": "val6",
                "iVar7": "val7",
                "iVar8": "val9",
                "iVar9": "val9",
                "iVar10": "val10",
                "iVar11": "val11",
                "iVar12": "base_val",
                "mask1": "0xffffcfff",
                "mask2": "0xffffe9f3",
                "mask3": "0xfffffcff",
                "factor1": "0x19",
                "factor2": "0x10",
                "factor3": "0x32",
                "factor4": "0x25",
                "factor5": "0x17",
                "factor6": "0xf0"
            },
            "code": "void calculate_values_08004204(int *params)\n{\n  uint mask1 = 0xffffcfff;\n  uint mask2 = 0xffffe9f3;\n  uint mask3 = 0xfffffcff;\n  uint factor1 = 0x19;\n  uint factor2 = 0x10;\n  uint factor3 = 0x32;\n  uint factor4 = 0x25;\n  uint factor5 = 0x17;\n  uint factor6 = 0xf0;\n  uint factor7 = -100;\n  uint val1 = params[3];\n  uint val2 = params[2] | params[4] | params[5];\n  uint val3 = params[6];\n  uint base_val = params[0];\n  if (base_val != PTR_DAT_080043ac)\n  {\n    uint val4 = get_shifted_value_by_pointer_08003c50();\n    uint val5 = get_shifted_value_by_pointer_08003c50();\n    uint val6 = get_shifted_value_by_pointer_08003c50();\n    uint val7 = get_shifted_value_by_pointer_08003c50();\n    uint val8 = get_shifted_value_by_pointer_08003c50();\n    uint val9 = get_shifted_value_by_pointer_08003c50();\n    uint val10 = get_shifted_value_by_pointer_08003c50();\n    uint val11 = get_shifted_value_by_pointer_08003c50();\n    uint val12 = (uint)(((ulonglong)PTR_DAT_080043b0 * (ulonglong)(((uint)(val6 * factor1) / (uint)(val11 << 2)) + (uint)(((ulonglong)PTR_DAT_080043b0 * ((ulonglong)(uint)(val7 * factor1) / (ulonglong)(uint)(params[1] << 2))) >> factor4) * factor7) * factor2 + factor3) >> factor5);\n    *(uint *)(base_val + 8) = ((uint)(((int)PTR_DAT_080043b0 * (int)val12) >> factor5) << factor6) >> 0x1c) + ((uint)(((ulonglong)PTR_DAT_080043b0 * (ulonglong)(((uint)(val4 * factor1) / (uint)(val9 << 2)) + (uint)(((ulonglong)PTR_DAT_080043b0 * ((ulonglong)(uint)(val5 * factor1) / (ulonglong)(uint)(val10 << 2))) >> factor4) * factor7) * factor2 + factor3) >> factor4) & factor6) + ((uint)(((ulonglong)PTR_DAT_080043b0 * (ulonglong)(((uint)(val3 * factor1) / (uint)(params[1] << 2)))) >> factor4) * factor2);\n  }\n  else\n  {\n    uint val4 = get_shifted_value_by_pointer_08003c70();\n    uint val5 = get_shifted_value_by_pointer_08003c70();\n    uint val6 = get_shifted_value_by_pointer_08003c70();\n    uint val7 = get_shifted_value_by_pointer_08003c70();\n    uint val8 = get_shifted_value_by_pointer_08003c70();\n    uint val9 = get_shifted_value_by_pointer_08003c70();\n    uint val10 = get_shifted_value_by_pointer_08003c70();\n    uint val11 = get_shifted_value_by_pointer_08003c70();\n    uint val12 = (uint)(((ulonglong)PTR_DAT_080043b0 * (ulonglong)(((uint)(val6 * factor1) / (uint)(val11 << 2)) + (uint)(((ulonglong)PTR_DAT_080043b0 * ((ulonglong)(uint)(val7 * factor1) / (ulonglong)(uint)(params[1] << 2))) >> factor4) * factor7) * factor2 + factor3) >> factor5);\n    *(uint *)(base_val + 8) = ((uint)(((int)PTR_DAT_080043b0 * (int)val12) >> factor5) << factor6) >> 0x1c) + ((uint)(((ulonglong)PTR_DAT_080043b0 * (ulonglong)(((uint)(val4 * factor1) / (uint)(val9 << 2)) + (uint)(((ulonglong)PTR_DAT_080043b0 * ((ulonglong)(uint)(val5 * factor1) / (ulonglong)(uint)(val10 << 2))) >> factor4) * factor7) * factor2 + factor3) >> factor4) & factor6) + ((uint)(((ulonglong)PTR_DAT_080043b0 * (ulonglong)(((uint)(val3 * factor1) / (uint)(params[1] << 2)))) >> factor4) * factor2);\n  }\n}",
            "called": [
                "FUN_08003c70",
                "FUN_08003c50"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004204",
            "calling": [
                "FUN_0800441a"
            ],
            "imported": false,
            "current_name": "calculate_values_08004204"
        },
        "FUN_08005da8": {
            "renaming": {
                "FUN_08005da8": "validate_input_and_return_length_08005da8",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "param_5": "input5",
                "iVar1": "isValidInput",
                "iVar3": "temp7",
                "bVar4": "i",
                "lVar5": "temp",
                "uVar2": "temp2",
                "uVar6": "temp4",
                "uVar7": "temp8"
            },
            "code": "int validate_input_and_return_length_08005da8(undefined4 input1, undefined4 input2, undefined4 input3, uint input4, byte input5) {\n    int isValidInput = is_valid_input(input3, input4, input3, input4);\n    if (isValidInput == 0) {\n        isValidInput = is_valid_input(input3, input4 & 0x7fffffff, 0xffffffff, DAT_08005f08);\n        if ((isValidInput == 0) && (check_params_and_return_result(input3, input4 & 0x7fffffff, 0xffffffff, DAT_08005f08) == 0)) {\n            return get_length_of_string(input1, PTR_DAT_08005f20);\n        }\n        else {\n            if (is_end_of_string(input3, input4, 0xe0000000, DAT_08005f0c) == 0) {\n                if (is_end_of_string(input3, input4, 0xe0000000, DAT_08005f10) == 0) {\n                    if (is_end_of_string(input3, input4, 0, 0) == 0) {\n                        return 0;\n                    }\n                    else {\n                        execute_function_pointer(input1, 0x2d);\n                        input4 += 0x80000000;\n                        longlong temp = (ulonglong)DAT_08005f14 << 0x20;\n                        for (byte i = 0; i < input5; i++) {\n                            temp = FUNC_0800074c((int)temp, (undefined4)((ulonglong)temp >> 0x20), 0, DAT_08005f18);\n                        }\n                        undefined8 temp1 = FUNC_08000194(input3, input4, (int)temp, (undefined4)((ulonglong)temp >> 0x20));\n                        undefined4 temp2 = convert_to_fixed_point();\n                        undefined8 temp3 = convert_uint64_to_uint32_with_shift();\n                        undefined8 temp4 = FUNC_08000190((int)temp1, (int)((ulonglong)temp1 >> 0x20), (int)temp3, (int)((ulonglong)temp3 >> 0x20));\n                        int temp5 = convert_base(input1, temp2, 10);\n                        int result = temp5;\n                        if (input5 != 0) {\n                            result += get_length_of_string(input1, PTR_DAT_08005f28);\n                        }\n                        while (input5 != 0) {\n                            temp4 = FUNC_080004f8((int)temp4, (int)((ulonglong)temp4 >> 0x20), 0, DAT_08005f18);\n                            undefined4 temp6 = calculate_value();\n                            int temp7 = convert_and_print_number_in_base(input1, temp6, 10);\n                            result += temp7;\n                            undefined8 temp8 = calculate_shifted(temp6);\n                            temp4 = FUNC_08000190((int)temp4, (int)((ulonglong)temp4 >> 0x20), (int)temp8, (int)((ulonglong)temp8 >> 0x20));\n                            input5--;\n                        }\n                        return result;\n                    }\n                }\n                else {\n                    return get_length_of_string(input1, PTR_DAT_08005f24);\n                }\n            }\n            else {\n                return get_length_of_string(input1, PTR_DAT_08005f24);\n            }\n        }\n    }\n    else {\n        return get_length_of_string(input1, PTR_DAT_08005f1c);\n    }\n}",
            "called": [
                "FUN_0800074c",
                "FUN_08005d8a",
                "FUN_0800040c",
                "FUN_080004f8",
                "FUN_08005cb6",
                "FUN_08000a18",
                "FUN_080009dc",
                "FUN_080009f0",
                "FUN_08005d82",
                "FUN_08000190",
                "FUN_0800042c",
                "FUN_08000a58",
                "FUN_08000aa8",
                "FUN_08005c96",
                "FUN_08000194",
                "FUN_08000a2c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005da8",
            "calling": [
                "FUN_08005f2c"
            ],
            "imported": false,
            "current_name": "validate_input_and_return_length_08005da8"
        },
        "FUN_080045fe": {
            "renaming": {
                "FUN_080045fe": "set_flag_and_check_value_080045fe",
                "*param_1": "*array_ptr",
                "*(uint *)(*param_1 + 0xc)": "*value_ptr",
                "*(undefined *)((int)param_1 + 0x39)": "*flag_ptr"
            },
            "code": "int set_flag_and_check_value_080045fe(int *array_ptr)\n{\n    uint32_t *value_ptr = (uint32_t *)(array_ptr + 0xc);\n    *value_ptr &= 0xffffffbf;\n    char *flag_ptr = (char *)(array_ptr + 0x39);\n    *flag_ptr = 0x20;\n    find_and_check_value_in_array();\n    return 0;\n}",
            "called": [
                "FUN_08005604"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080045fe",
            "calling": [
                "FUN_080046b8"
            ],
            "imported": false,
            "current_name": "set_flag_and_check_value_080045fe"
        },
        "FUN_08005f2c": {
            "renaming": {
                "FUN_08005f2c": "validate_and_return_length_08005f2c",
                "validate_input_and_return_length_08005da8": "validate_input_and_return_length"
            },
            "code": "void validate_and_return_length_08005f2c(void)\n{\n  // Code to validate input and return length\n}\n\nvoid validate_and_return_length_08005f2c(void)\n{\n  validate_and_return_length_08005f2c();\n  return;\n}",
            "called": [
                "FUN_08005da8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005f2c",
            "calling": [
                "FUN_08005f40",
                "FUN_08000cd0"
            ],
            "imported": false,
            "current_name": "validate_and_return_length_08005f2c"
        },
        "FUN_080055e0": {
            "renaming": {
                "FUN_080055e0": "execute_function_based_on_index_080055e0",
                "uVar1": "index_of_value",
                "find_index_of_value_in_array_080055bc": "find_index_of_value_in_array",
                "PTR_DAT_080055fc": "PTR_FUNCTION_TABLE",
                "PTR_DAT_08005600": "PTR_PARAMETER_TABLE"
            },
            "code": "void execute_function_based_on_index_080055e0(void)\n{\n  uint index_of_value = find_index_of_value_in_array();\n  if (index_of_value < 5) {\n    void (*function_pointer)(uint) = *(void (**)(uint))(PTR_DAT_080055fc + index_of_value * 4);\n    uint function_parameter = *(uint *)(PTR_DAT_08005600 + index_of_value * 4);\n    function_pointer(function_parameter);\n  }\n  return;\n}",
            "called": [
                "FUN_080055bc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080055e0",
            "calling": [
                "FUN_08004618"
            ],
            "imported": false,
            "current_name": "execute_function_based_on_index_080055e0"
        },
        "FUN_08005f40": {
            "renaming": {
                "FUN_08005f40": "calculate_length_and_execute_function_08005f40",
                "undefined4 param_1": "int input_param",
                "iVar1": "int length",
                "validate_and_return_length_08005f2c": "validate_and_return_length",
                "iVar2": "int result",
                "execute_function_on_pointer_08005cc0": "execute_function_on_pointer"
            },
            "code": "int calculate_length_and_execute_function_08005f40(int input_param) {\n  int length = validate_and_return_length();\n  int result = execute_function_on_pointer(input_param);\n  return result + length;\n}",
            "called": [
                "FUN_08005f2c",
                "FUN_08005cc0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005f40",
            "calling": [
                "FUN_08000cd0"
            ],
            "imported": false,
            "current_name": "calculate_length_and_execute_function_08005f40"
        },
        "FUN_0800213c": {
            "renaming": {
                "FUN_0800213c": "update_flag_and_check_0800213c",
                "param_1": "flag_array",
                "iVar1": "flag_value",
                "uVar2": "uVar2",
                "uVar3": "bit_flag"
            },
            "code": "int update_flag_and_check_0800213c(int *flag_array){\n  int flag_value;\n  uint32_t bit_flag;\n  if (flag_array == NULL){\n    return 1;\n  }\n  if (flag_array[10] == 0){\n    flag_array[11] = 0;\n    *(uint8_t *)(flag_array + 9) = 0;\n    set_bit_08004974();\n  }\n  flag_value = check_and_update_flag(flag_array);\n  bit_flag = flag_array[10] & 0x10;\n  if ((bit_flag == 0) && (flag_value == 0)){\n    flag_array[10] = flag_array[10] & 0xffffeefd | 2;\n    uint32_t uVar2 = flag_array[1] | flag_array[7] | flag_array[3] << 1;\n    if (flag_array[2] == 0x100){\n      bit_flag = 0x100;\n    }\n    else if (flag_array[2] == 1){\n      bit_flag = 0x100;\n    }\n    if (flag_array[5] == 1){\n      if (flag_array[3] == 0){\n        bit_flag = bit_flag | (flag_array[6] + -1) * 0x2000 | 0x800;\n      }\n      else{\n        flag_array[10] = flag_array[10] | 0x20;\n        flag_array[11] = flag_array[11] | 1;\n      }\n    }\n    *(uint32_t *)(*flag_array + 4) = bit_flag | *(uint32_t *)(*flag_array + 4) & 0xffff16ff;\n    *(uint32_t *)(*flag_array + 8) = DAT_08002244 & *(uint32_t *)(*flag_array + 8) | uVar2;\n    if ((flag_array[2] == 0x100) || (flag_array[2] == 1)){\n      bit_flag = (flag_array[4] + -1) * 0x100000;\n    }\n    else{\n      bit_flag = 0;\n    }\n    *(uint32_t *)(*flag_array + 0x2c) = bit_flag | *(uint32_t *)(*flag_array + 0x2c) & 0xff0fffff;\n    if (uVar2 != (DAT_08002248 & *(uint32_t *)(*flag_array + 8)))){\n      flag_array[10] = flag_array[10] & 0xffffffed | 0x10;\n      flag_array[11] = flag_array[11] | 1;\n      return 1;\n    }\n    flag_array[11] = 0;\n    flag_array[10] = flag_array[10] & 0xfffffffc | 1;\n    return 0;\n  }\n  flag_array[10] = flag_array[10] | 0x10;\n  return 1;\n}",
            "called": [
                "FUN_080020f0",
                "FUN_08004974"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800213c",
            "calling": [
                "FUN_08004a4c"
            ],
            "imported": false,
            "current_name": "update_flag_and_check_0800213c"
        },
        "FUN_0800455a": {
            "renaming": {
                "FUN_0800455a": "check_input_0800455a",
                "param_1": "input_array",
                "param_2": "input_size",
                "param_3": "input_value",
                "*(char *)((int)param_1 + 0x39)": "*(char *)((int)input_array + 0x39)",
                "return 2": "return 2; // Invalid input",
                "param_2 == 0": "input_size == 0",
                "return 1": "return 1; // Invalid input",
                "param_3 == 0": "input_value == 0",
                "*(char *)(param_1 + 0xe)": "*(char *)(input_array + 0xe)",
                "input_array[8]": "input_array[input_size]",
                "*(short *)(param_1 + 9)": "*(short *)(input_array + 9)",
                "*(short *)((int)param_1 + 0x26)": "*(short *)((int)input_array + 0x26)",
                "input_array[0xf]": "input_array[15]",
                "*(undefined *)((int)param_1 + 0x39)": "*(undefined *)((int)input_array + 0x39)",
                "0x21": "'!'",
                "*(undefined *)(param_1 + 0xe)": "*(undefined *)(input_array + 0xe)",
                "*(uint *)(*param_1 + 0xc)": "*(uint *)(*input_array + 0xc)",
                "| 0x80": "| 0b10000000"
            },
            "code": "int check_input_0800455a(int *input_array, int input_size, int input_value) {\n    if (*(char *)((int)input_array + 0x39) != ' ') {\n        return 2;\n    }\n    if (input_size == 0) {\n        return 1;\n    }\n    if (input_value == 0) {\n        return 1;\n    }\n    if (*(char *)(input_array + 0xe) != '\\x01') {\n        input_array[8] = input_size;\n        *(short *)(input_array + 9) = (short)input_value;\n        *(short *)((int)input_array + 0x26) = (short)input_value;\n        input_array[0xf] = 0;\n        *(undefined *)((int)input_array + 0x39) = 0x21;\n        *(undefined *)(input_array + 0xe) = 0;\n        *(uint *)(*input_array + 0xc) = *(uint *)(*input_array + 0xc) | 0x80;\n        return 0;\n    }\n    return 2;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800455a",
            "calling": [
                "FUN_08005604",
                "FUN_08005568"
            ],
            "imported": false,
            "current_name": "check_input_0800455a"
        },
        "FUN_08001a66": {
            "renaming": {
                "FUN_08001a66": "update_params_08001a66",
                "param_1": "params_start",
                "param_2": "new_param",
                "param_3": "param_3",
                "param_4": "param_4",
                "uVar1": "result",
                "*(char *)(param_1 + 0x70)": "condition",
                "*(int *)(param_1 + 0x30)": "previous_param",
                "*(undefined4 *)(param_1 + 0x18)": "param_1",
                "*(undefined4 *)(param_1 + 0x1c)": "param_2",
                "*(undefined4 *)(param_1 + 0x20)": "param_3",
                "*(undefined4 *)(param_1 + 0x24)": "param_4",
                "*(undefined4 *)(param_1 + 0x28)": "param_5",
                "*(undefined4 *)(param_1 + 0x2c)": "param_6",
                "*(undefined8 *)(param_1 + 0x18)": "result_1",
                "*(undefined8 *)(param_1 + 0x20)": "result_2",
                "*(undefined8 *)(param_1 + 0x28)": "result_3"
            },
            "code": "void update_params_08001a66(int params_start, int new_param, undefined4 param_3, undefined4 param_4)\n{\n    if (*(char *)(params_start + 0x70) != '\\0' && *(int *)(params_start + 0x30) != new_param)\n    {\n        *(undefined8 *)(params_start + 0x18) = FUNC_08000190(0, 0, *(undefined4 *)(params_start + 0x18), *(undefined4 *)(params_start + 0x1c), param_4);\n        *(undefined8 *)(params_start + 0x20) = FUNC_08000190(0, 0, *(undefined4 *)(params_start + 0x20), *(undefined4 *)(params_start + 0x24));\n        *(undefined8 *)(params_start + 0x28) = FUNC_08000190(0, 0, *(undefined4 *)(params_start + 0x28), *(undefined4 *)(params_start + 0x2c));\n    }\n    *(int *)(params_start + 0x30) = new_param;\n    return;\n}",
            "called": [
                "FUN_08000190"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001a66",
            "calling": [
                "FUN_08001ab0"
            ],
            "imported": false,
            "current_name": "update_params_08001a66"
        },
        "FUN_08003c44": {
            "renaming": {
                "FUN_08003c44": "get_value_from_pointer_08003c44",
                "undefined4": "int",
                "PTR_DAT_08003c4c": "ptr_to_value"
            },
            "code": "int get_value_from_pointer_08003c44(){\n                          int* PTR_DAT_08003c4c = (int*) PTR_DAT_08003c4c;\n                          return *PTR_DAT_08003c4c;\n                      }",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003c44",
            "calling": [
                "FUN_08001b48",
                "FUN_08003c70",
                "FUN_08003c50"
            ],
            "imported": false,
            "current_name": "get_value_from_pointer_08003c44"
        },
        "FUN_080028d2": {
            "renaming": {
                "FUN_080028d2": "set_value_from_array_index_080028d2",
                "*param_1": "array",
                "*(uint *)(*param_1 + 0x10)": "pointer",
                "param_1[0x11]": "value",
                "0xff": "mask",
                "undefined4": "int"
            },
            "code": "int set_value_from_array_index_080028d2(int *array)\n{\n    int index = 0x11;\n    int value = array[index] & 0xff;\n    uint *pointer = (uint *)(array + 0x10);\n    *pointer = value;\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080028d2",
            "calling": [
                "FUN_080033b8"
            ],
            "imported": false,
            "current_name": "set_value_from_array_index_080028d2"
        },
        "FUN_08000a18": {
            "renaming": {
                "FUN_08000a18": "is_end_of_string_08000a18",
                "in_CY": "input_char"
            },
            "code": "bool is_end_of_string_08000a18(void)\n{\n  char input_char;\n  check_and_return_params_in_order();\n  return input_char == '\\0';\n}",
            "called": [
                "FUN_080009a8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000a18",
            "calling": [
                "FUN_080016b4",
                "FUN_08005da8",
                "FUN_080019f6",
                "FUN_08001960",
                "FUN_08000cd0"
            ],
            "imported": false,
            "current_name": "is_end_of_string_08000a18"
        },
        "FUN_08005384": {
            "renaming": {
                "FUN_08005384": "process_data_08005384",
                "cVar1": "input_char",
                "puVar2": "data_pointer",
                "uVar3": "value_from_list",
                "iVar4": "index_of_char_in_list"
            },
            "code": "void process_data_08005384()\n{\n  char input_char;\n  int index_of_char_in_list;\n  undefined4 value_from_list;\n  undefined *data_pointer = PTR_DAT_080053d0;\n  input_char = PTR_DAT_080053c4[1];\n  index_of_char_in_list = find_value_in_list_if_not_negative_08004c78((int)input_char, PTR_DAT_080053c8);\n  if (index_of_char_in_list != 0) {\n    value_from_list = find_value_in_list_if_not_negative_08004c78((int)input_char, PTR_DAT_080053c8);\n    data_pointer[0x59] = find_value_from_param_08004ca2(value_from_list, PTR_DAT_080053cc);\n    data_pointer[0x58] = input_char;\n    *(undefined4 *)(data_pointer + 0x48) = 0x2580;\n    *(undefined4 *)(data_pointer + 0x54) = 0;\n    *(undefined4 *)(data_pointer + 0x4c) = 0;\n    *(undefined4 *)(data_pointer + 0x50) = 0;\n    FUNC_08004f4c(data_pointer);\n  }\n  return;\n}",
            "called": [
                "FUN_08004ca2",
                "FUN_08004c78",
                "FUN_08004f4c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005384",
            "calling": [
                "FUN_080053d4"
            ],
            "imported": false,
            "current_name": "process_data_08005384"
        },
        "FUN_08005b3c": {
            "renaming": {
                "FUN_08005b3c": "get_value_at_index_08005b3c",
                "param_1": "index",
                "param_2": "size",
                "uVar1": "value"
            },
            "code": "void get_value_at_index_08005b3c(int index, uint size)\n{\n  undefined value;\n  if (size < 60) {\n    value = PTR_DAT_08005b50[size];\n  }\n  else {\n    value = 0xff;\n  }\n  *(undefined *)(index + 300) = value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005b3c",
            "calling": [
                "FUN_08005b54"
            ],
            "imported": false,
            "current_name": "get_value_at_index_08005b3c"
        },
        "FUN_080046b8": {
            "renaming": {
                "FUN_080046b8": "process_data_080046b8",
                "param_1": "data",
                "iVar1": "value",
                "uVar2": "flags2",
                "puVar3": "data_ptr",
                "uVar4": "bit_flag",
                "uVar5": "flags"
            },
            "code": "void process_data_080046b8(uint **data){\n  uint *data_ptr = *data;\n  uint flags = *data_ptr;\n  uint flags2 = data_ptr[3];\n  \n  if (((flags & 0xf) == 0) && ((flags & 0x20) != 0)) && ((flags2 & 0x20) != 0)) {\n    process_data_080046b8_08004618(data);\n    return;\n  }\n  \n  if (((flags & 0xf) == 0) || ((data_ptr[5] & 1) == 0 && ((flags2 & 0x120) == 0)))) {\n    if (((flags & 0x80) != 0) && ((flags2 & 0x80) != 0)) {\n      parse_data(data);\n      return;\n    }\n    if (((flags & 0x40) != 0) && ((flags2 & 0x40) != 0)) {\n      set_flag_and_check_value(data);\n    }\n  } else {\n    if (((flags & 1) != 0) && ((flags2 & 0x100) != 0)) {\n      data[0xf] = (uint *)((uint)data[0xf] | 1);\n    }\n    if (((flags & 4) != 0) && ((data_ptr[5] & 1) != 0)) {\n      data[0xf] = (uint *)((uint)data[0xf] | 2);\n    }\n    if (((flags & 2) != 0) && ((data_ptr[5] & 1) != 0)) {\n      data[0xf] = (uint *)((uint)data[0xf] | 4);\n    }\n    if (((flags & 8) != 0) && ((data_ptr[5] & 1) != 0)) {\n      data[0xf] = (uint *)((uint)data[0xf] | 8);\n    }\n    if (data[0xf] != (uint *)0x0) {\n      if (((flags & 0x20) != 0) && ((flags2 & 0x20) != 0)) {\n        process_data_080046b8_08004618(data);\n      }\n      if ((((uint)data[0xf] & 8) == 0) && (((*data)[5] & 0x40) == 0)) {\n        do_nothing(data);\n        data[0xf] = (uint *)0x0;\n        return;\n      }\n      clear_bits_in_memory(data);\n      data_ptr = *data;\n      if ((data_ptr[5] & 0x40) == 0) {\n        do_nothing(data);\n        return;\n      }\n      data_ptr[5] = data_ptr[5] & 0xffffffbf;\n      if (data[0xd] == (uint *)0x0) {\n        do_nothing(data);\n        return;\n      }\n      data[0xd][0xd] = (uint *)PTR_LAB_080047d8_1_080047d4;\n      int value = get_value_from_ptr(data[0xd]);\n      if (value != 0) {\n        (*(code *)data[0xd][0xd])();\n        return;\n      }\n    }\n  }\n  return;\n}",
            "called": [
                "FUN_080045fe",
                "FUN_08005650",
                "FUN_08004198",
                "FUN_0800258c",
                "FUN_08004618",
                "FUN_0800417c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080046b8",
            "calling": [],
            "imported": false,
            "current_name": "process_data_080046b8"
        },
        "FUN_08004c8a": {
            "renaming": {
                "FUN_08004c8a": "find_value_from_param_08004c8a",
                "param_1": "search_value",
                "param_2": "data_array",
                "*param_2": "*data_array",
                "PTR_": "",
                "DAT_": ""
            },
            "code": "int find_value_from_param_08004c8a(int search_value, char *data_array) {\n    while (true) {\n        int array_value = *(int *)(data_array + 4);\n        if (array_value == 0) {\n            return -1;\n        }\n        if (array_value == search_value) {\n            break;\n        }\n        data_array = data_array + 0xc;\n    }\n    return (int)*data_array;\n}",
            "called": [
                "FUN_08004c8a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004c8a",
            "calling": [
                "FUN_08004ca2",
                "FUN_08004c8a"
            ],
            "imported": false,
            "current_name": "find_value_from_param_08004c8a"
        },
        "FUN_08001cd0": {
            "renaming": {
                "FUN_08001cd0": "calculate_result_08001cd0",
                "param_1": "params",
                "param_2": "param_count",
                "iVar1": "initial_value",
                "uVar2": "shifted_value",
                "iVar3": "temp_value",
                "uVar4": "result",
                "puVar5": "param_array",
                "uVar6": "constant_value",
                "local_1c": "local_var"
            },
            "code": "uint32_t calculate_result_08001cd0(uint32_t **params, uint32_t param_count) {\n  int32_t initial_value = get_value_from_pointer();\n  uint32_t *param_array = *params;\n  uint32_t local_var = 0;\n  if ((param_array[2] & 0x100) == 0) {\n    if (((param_array[1] & 0x100) == 0) && ((param_array[0xb] & 0xf00000) == 0)) {\n      do {\n        if ((**params & 2) != 0) goto LAB_08001de2;\n      } while ((param_count == 0xffffffff) || ((param_count != 0 && (int32_t)(get_value_from_pointer() - initial_value) <= param_count)));\n      params[10] = (uint32_t *)((uint32_t)params[10] | 4);\n      *(undefined *)(params + 9) = 0;\n      return 3;\n    }\n    else {\n      uint32_t uVar6 = *(uint32_t *)PTR_DAT_08001e2c;\n      uint32_t uVar2 = calculate_shifted_value_08003da4(2);\n      param_array = *params;\n      if (((param_array[4] & DAT_08001e30) == 0) && ((param_array[3] & DAT_08001e30 + 0xdc000000) == 0)) {\n        if ((param_array[4] & DAT_08001e34) == 0) {\n          if ((param_array[3] & DAT_08001e38) == 0) {\n            local_var = 0x14;\n          }\n          else {\n            local_var = 0x29;\n          }\n        }\n        else {\n          local_var = 0x29;\n        }\n      }\n      else if (((param_array[4] & DAT_08001e34) == 0) && ((param_array[3] & DAT_08001e34 + 0xee000000) == 0)) {\n        local_var = 0x54;\n      }\n      else if ((DAT_08001e3c & param_array[4]) == 0) {\n        if ((DAT_08001e3c & param_array[3]) == 0) {\n          local_var = 0x54;\n        }\n        else {\n          local_var = 0xfc;\n        }\n      }\n      else {\n        local_var = 0xfc;\n      }\n      uVar2 = (uVar6 / uVar2) * local_var;\n      for (; local_var <= uVar2 && uVar2 - local_var != 0; local_var = local_var + 1) {\n        if ((param_count != 0xffffffff) && ((param_count == 0 || (int32_t)(param_count - get_value_from_pointer()) < 0))) {\n          params[10] = (uint32_t *)((uint32_t)params[10] | 4);\n          *(undefined *)(params + 9) = 0;\n          return 3;\n        }\n      }\nLAB_08001de2:\n      **params = 0xffffffed;\n      params[10] = (uint32_t *)((uint32_t)params[10] | 0x200);\n      if (((*params)[2] & 0xe0000) == 0xe0000) {\n        if (params[3] == (uint32_t *)0x0) {\n          params[10] = (uint32_t *)((uint32_t)params[10] & 0xfffffeff);\n          if (((uint32_t)params[10] & 0x1000) == 0) {\n            params[10] = (uint32_t *)((uint32_t)params[10] | 1);\n            return 0;\n          }\n          else {\n            return 0;\n          }\n        }\n        else {\n          return 0;\n        }\n      }\n      else {\n        return 0;\n      }\n    }\n  }\n  else {\n    params[10] = (uint32_t *)((uint32_t)params[10] | 0x20);\n    *(undefined *)(params + 9) = 0;\n    return 1;\n  }\n}",
            "called": [
                "FUN_08001cc4",
                "FUN_08003da4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001cd0",
            "calling": [
                "FUN_08004a4c"
            ],
            "imported": false,
            "current_name": "calculate_result_08001cd0"
        },
        "FUN_08004178": {
            "renaming": {
                "FUN_08004178": "do_nothing_08004178"
            },
            "code": "\nvoid do_nothing_08004178(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004178",
            "calling": [
                "FUN_08003f18"
            ],
            "imported": false,
            "current_name": "do_nothing_08004178"
        },
        "FUN_08004a4c": {
            "renaming": {
                "FUN_08004a4c": "get_result_08004a4c",
                "param_1": "input_value",
                "local_46": "result",
                "local_44": "value_index",
                "local_40": "parameter1",
                "local_3c": "parameter2",
                "local_38": "find_value_index_result",
                "local_34": "unused",
                "local_30": "unused",
                "local_2c": "unused",
                "local_28": "unused",
                "local_24": "unused",
                "local_20": "unused",
                "local_1c": "unused",
                "local_10": "unused",
                "fill_memory_with_value_080061e0": "fill_memory_with_value",
                "PTR_DAT_08004b2c": "values_list",
                "find_value_in_list_if_not_negative_08004c78": "find_value_index_if_not_negative",
                "*PTR_DAT_08004b30": "flag_pointer",
                "update_flag_and_check_0800213c": "update_flag_and_check",
                "find_value_index_0800492c": "find_value_index",
                "set_parameters_08001e48": "set_parameters",
                "process_data_08002384": "process_data",
                "update_value_and_check_if_failed_08002004": "update_value",
                "calculate_result_08001cd0": "calculate_result",
                "get_value_at_offset_08001f80": "get_value_at_offset",
                "check_flag_and_update_08002348": "check_flag_and_update",
                "clear_flags_0800224c": "clear_flags",
                "get_flag_value": "get_flag_value"
            },
            "code": "int get_result_08004a4c(int value_to_find);\n\nint get_result_08004a4c(int input_value)\n{\n    int value_index = get_result_08004a4c(input_value);\n    if (value_index < 0 || value_index >= 18) {\n        return 0;\n    }\n    int parameter1 = 1;\n    int parameter2 = 2;\n    int parameter3 = set_parameters(parameter1, parameter2, value_index);\n    if (parameter3 != 0) {\n        return 0;\n    }\n    int process_data_result = process_data(parameter1, parameter2, value_index);\n    if (process_data_result != 0) {\n        return 0;\n    }\n    int update_value_result = update_value(value_index);\n    if (update_value_result != 0) {\n        return 0;\n    }\n    int calculate_result_result = calculate_result(value_index, 10);\n    if (calculate_result_result != 0) {\n        return 0;\n    }\n    int flag_value = get_flag_value();\n    if ((flag_value & 0x200) == 0) {\n        return 0;\n    }\n    return get_value_at_offset(value_index);\n}\n",
            "called": [
                "FUN_08002348",
                "FUN_080061e0",
                "FUN_0800213c",
                "FUN_08001cd0",
                "FUN_08001e40",
                "FUN_08002004",
                "FUN_0800224c",
                "FUN_08001e48",
                "FUN_08004c78",
                "FUN_08001f80",
                "FUN_0800492c",
                "FUN_08002384"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004a4c",
            "calling": [
                "FUN_08005754"
            ],
            "imported": false,
            "current_name": "get_result_08004a4c"
        },
        "FUN_08006112": {
            "renaming": {
                "FUN_08006112": "concatenate_or_shift_params_08006112",
                "param_1": "destination",
                "param_2": "source"
            },
            "code": "void concatenate_or_shift_params_08006112(undefined4 destination, undefined4 source)\n{\n  concatenate_or_shift_08006158(source, destination);\n  return;\n}",
            "called": [
                "FUN_08006158"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006112",
            "calling": [
                "FUN_08005fc8"
            ],
            "imported": false,
            "current_name": "concatenate_or_shift_params_08006112"
        },
        "FUN_08004974": {
            "renaming": {
                "FUN_08004974": "set_bit_08004974",
                "param_1": "flags",
                "param_2": "flag_value",
                "puVar1": "VAR_C",
                "iVar2": "VAR_A",
                "uVar3": "flag_result",
                "uVar4": "flag_mask",
                "uVar5": "current_flag",
                "local_18": "bit_mask",
                "local_14": "bit_count",
                "local_10": "padding"
            },
            "code": "void set_bit_08004974(uint *flags, undefined4 flag_value) {\n  uint current_flag = *flags;\n  uint flag_mask;\n  uint local_18;\n  undefined4 local_14;\n  undefined4 local_10;\n  if (current_flag == FLAG_A) {\n    flag_mask = *(uint *)(VAR_A + 0x18) | FLAG_B;\n    *(uint *)(VAR_A + 0x18) = flag_mask;\n    current_flag = *(uint *)(VAR_A + 0x18) & FLAG_B;\n  }\n  else {\n    flag_mask = FLAG_C;\n    if (current_flag == FLAG_C) {\n      flag_mask = *(uint *)(VAR_A + 0x18) | FLAG_D;\n      *(uint *)(VAR_A + 0x18) = flag_mask;\n      current_flag = *(uint *)(VAR_A + 0x18) & FLAG_D;\n    }\n  }\n  uint shift_amount = (uint)((int)(char)*VAR_B << 0x18) >> 0x1c;\n  uint flag_result = set_flag(shift_amount, flag_value, flag_mask, current_flag);\n  local_18 = 1 << ((byte)*VAR_C & 0xf) & 0xffff;\n  local_14 = 3;\n  local_10 = 0;\n  update_bits(flag_result, &local_18);\n}\n",
            "called": [
                "FUN_08004884",
                "FUN_08002624"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004974",
            "calling": [
                "FUN_0800213c"
            ],
            "imported": false,
            "current_name": "set_bit_08004974"
        },
        "FUN_08003520": {
            "renaming": {
                "FUN_08003520": "process_input_data_08003520",
                "param_1": "input_data",
                "puVar2": "data_ptr",
                "uVar3": "flags_1",
                "uVar4": "flags_2",
                "DAT_080035f8": "FLAG_1_MASK",
                "set_bits_and_process_data_08002d1c": "process_input_and_set_flags_1",
                "process_data_and_set_bits_0800316c": "process_input_and_set_flags_2"
            },
            "code": "void process_input_data_08003520(uint **input_data)\n{\n  char current_char;\n  uint *data_ptr;\n  uint flags_1;\n  uint flags_2;\n  data_ptr = *input_data;\n  flags_1 = data_ptr[5];\n  flags_2 = data_ptr[1];\n  if (((flags_1 & DAT_080035f8) != 0) && ((flags_2 & FLAG_2_MASK) != 0)) {\n    input_data[16] = (uint *)((uint)input_data[16] | 1);\n    data_ptr[5] = 0xfffffeff;\n    **input_data = **input_data | 0x8000;\n  }\n  if (((flags_1 & FLAG_2_1_MASK) != 0) && ((flags_2 & FLAG_2_MASK) != 0)) {\n    input_data[16] = (uint *)((uint)input_data[16] | 2);\n    (*input_data)[5] = 0xfffffdff;\n  }\n  if (((flags_1 & FLAG_2_2_MASK) != 0) && ((flags_2 & FLAG_2_MASK) != 0)) {\n    current_char = *(char *)((int)input_data + 0x3d);\n    if (((*(char *)((int)input_data + 0x3e) == ' ') && (*(short *)((int)input_data + 0x2a) == 0)) && (((current_char == '!' || (current_char == ')')) || ((current_char == '(' && (input_data[0xc] == (uint *)0x21)))))) {\n      process_input_and_set_flags_1(input_data);\n    }\n    else {\n      input_data[16] = (uint *)((uint)input_data[16] | 4);\n      if (*(char *)((int)input_data + 0x3e) == '\\x10') {\n        **input_data = **input_data | 0x200;\n      }\n      (*input_data)[5] = 0xfffffbff;\n    }\n  }\n  if (((flags_1 & FLAG_2_3_MASK) != 0) && ((flags_2 & FLAG_2_MASK) != 0)) {\n    input_data[16] = (uint *)((uint)input_data[16] | 8);\n    (*input_data)[5] = 0xfffff7ff;\n  }\n  if (input_data[16] != (uint *)0x0) {\n    process_input_and_set_flags_2(input_data);\n  }\n  return;\n}",
            "called": [
                "FUN_08002d1c",
                "FUN_0800316c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003520",
            "calling": [],
            "imported": false,
            "current_name": "process_input_data_08003520"
        },
        "FUN_08002ca6": {
            "renaming": {
                "FUN_08002ca6": "handle_data_08002ca6",
                "param_1": "data",
                "cVar1": "current_char",
                "puVar2": "data_ptr"
            },
            "code": "int handle_data_08002ca6(int *data){\n    char current_char = *(char *)((int)data + 0x3d);\n    if (*(short *)((int)data + 0x2a) != 0) {\n        undefined *data_ptr = (undefined *)data[9];\n        data[9] = (int)(data_ptr + 1);\n        *data_ptr = (char)*(undefined4 *)(*data + 0x10);\n        *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) - 1;\n        if ((*(short *)((int)data + 0x2a) == 0) && (current_char == '*')) {\n            *(uint *)(*data + 4) = *(uint *)(*data + 4) & 0xfffffbff;\n            data[0xc] = 0x22;\n            *(undefined *)((int)data + 0x3d) = 0x28;\n            do_nothing();\n        }\n    }\n    return 0;\n}",
            "called": [
                "FUN_08002ca4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ca6",
            "calling": [
                "FUN_080033b8"
            ],
            "imported": false,
            "current_name": "handle_data_08002ca6"
        },
        "FUN_08002ca4": {
            "renaming": {
                "FUN_08002ca4": "do_nothing_08002ca4"
            },
            "code": "\nvoid do_nothing_08002ca4(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ca4",
            "calling": [
                "FUN_08002ca6",
                "FUN_080032b4"
            ],
            "imported": false,
            "current_name": "do_nothing_08002ca4"
        },
        "FUN_08007328": {
            "renaming": {
                "FUN_08007328": "do_nothing_08007328"
            },
            "code": "\nvoid do_nothing_08007328(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007328",
            "calling": [
                "FUN_08006198",
                "FUN_0800010c"
            ],
            "imported": false,
            "current_name": "do_nothing_08007328"
        },
        "FUN_08005b54": {
            "renaming": {
                "FUN_08005b54": "initialize_structure_08005b54",
                "param_1": "structure",
                "param_2": "param2",
                "param_3": "value1",
                "param_4": "value3",
                "uVar1": "found_value1",
                "PTR_PTR_LAB_080059c8_1_08005ba0": "PTR_PTR_LAB_080059c8_1_08005ba0",
                "PTR_DAT_08005ba4": "PTR_DAT_08005ba4",
                "PTR_DAT_08005ba8": "PTR_DAT_08005ba8",
                "PTR_DAT_08005bac": "PTR_DAT_08005bac"
            },
            "code": "undefined4* initialize_structure_08005b54(undefined4* structure, undefined4 value1, undefined4 value2, undefined4 value3)\n{\n    // Set initial values\n    structure[1] = 0;\n    structure[2] = 1000;\n    *structure = PTR_PTR_LAB_080059c8_1_08005ba0;\n\n    // Conditionally set values based on input\n    if (structure == (undefined4*)PTR_DAT_08005ba4)\n    {\n        set_value_at_index(structure, 0, value1, PTR_DAT_08005ba4, value3);\n        get_value_at_index(structure, 1);\n    }\n    else\n    {\n        // Find and set values based on input\n        undefined found_value1 = find_value_from_param(param2, PTR_DAT_08005ba8);\n        *(undefined*)((int)structure + 0x12d) = found_value1;\n        undefined found_value2 = find_value_from_param(param2, PTR_DAT_08005bac);\n        *(undefined*)(structure + 0x4b) = found_value2;\n    }\n\n    // Initialize structure\n    initialize_struct(structure);\n    return structure;\n}",
            "called": [
                "FUN_08004ca2",
                "FUN_08005a44",
                "FUN_08005b3c",
                "FUN_08005b24"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005b54",
            "calling": [
                "FUN_08005bb0"
            ],
            "imported": false,
            "current_name": "initialize_structure_08005b54"
        },
        "FUN_08004618": {
            "renaming": {
                "FUN_08004618": "process_data_08004618",
                "param_1": "data",
                "pbVar1": "ptr",
                "puVar3": "ptr",
                "sVar2": "count"
            },
            "code": "int process_data_08004618(int *data) {\n  char *data_ptr = (char *)(data + 0x3a);\n  if (*data_ptr != '\"') {\n    return 2;\n  }\n  if (data[2] == 0x1000) {\n    if (data[4] == 0) {\n      *(unsigned short *)data[10] = (unsigned short)((unsigned int)(*(int *)(*data + 4) << 0x17) >> 0x17);\n      data[10] += 2;\n    }\n    else {\n      *(unsigned short *)data[10] = (unsigned short)*(unsigned int *)(*data + 4) & 0xff;\n      data[10]++;\n    }\n  }\n  else if (data[4] == 0) {\n    unsigned char *ptr = (unsigned char *)data[10];\n    data[10]++;\n    *ptr = (char)*(unsigned int *)(*data + 4);\n  }\n  else {\n    unsigned char *ptr = (unsigned char *)data[10];\n    data[10]++;\n    *ptr = (unsigned char)*(unsigned int *)(*data + 4) & 0x7f;\n  }\n  short *count = (short *)(data + 0x2e);\n  (*count)--;\n  if (*count != 0) {\n    return 0;\n  }\n  *(unsigned int *)(*data + 0xc) &= 0xffffffdf;\n  *(unsigned int *)(*data + 0xc) &= 0xfffffeff;\n  *(unsigned int *)(*data + 0x14) &= 0xfffffffe;\n  *data_ptr = ' ';\n  execute_function_based_on_index_080055e0();\n  return 0;\n}",
            "called": [
                "FUN_080055e0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004618",
            "calling": [
                "FUN_080046b8"
            ],
            "imported": false,
            "current_name": "process_data_08004618"
        },
        "FUN_08006c40": {
            "renaming": {
                "FUN_08006c40": "initialize_params_08006c40",
                "param_1": "params",
                "param_2": "param_2",
                "param_3": "param_3",
                "uVar1": "u_var_1"
            },
            "code": "void initialize_params_08006c40(undefined4 *params, undefined2 param_2, undefined2 param_3) {\n    *params = 0;\n    params[1] = 0;\n    params[2] = 0;\n    *(undefined2 *)(params + 3) = param_2;\n    params[25] = 0;\n    *(undefined2 *)((int)params + 14) = param_3;\n    params[4] = 0;\n    params[5] = 0;\n    params[6] = 0;\n    fill_memory_with_value_080061e0(params + 23, 0, 8);\n    params[8] = params;\n    params[9] = DAT_08006c78;\n    params[10] = PTR_process_data_08006f5a_1_08006c7c;\n    params[11] = PTR_process_data_08006f92_1_08006c80;\n    params[12] = PTR_LAB_08006fb6_1_08006c84;\n    return;\n}",
            "called": [
                "FUN_080061e0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006c40",
            "calling": [
                "FUN_08006cb4"
            ],
            "imported": false,
            "current_name": "initialize_params_08006c40"
        },
        "FUN_0800157c": {
            "renaming": {
                "FUN_0800157c": "decode_and_process_data_0800157c",
                "param_1": "data",
                "param_2": "data_length",
                "param_3": "first_char",
                "param_4": "second_char",
                "*param_1": "*data",
                "process_data_080057b4": "process_data",
                "decode_character_08005848": "decode_character"
            },
            "code": "char* decode_and_process_data_0800157c(char* data, int data_length, char first_char, char second_char)\n{\n  *data = first_char;\n  data[1] = second_char;\n  data[2] = 0;\n  process_data(data[0], 0);\n  process_data(data[1], 1);\n  process_data(data[2], 1);\n  decode_character(data[1], 1);\n  decode_character(data[2], 0);\n  return data;\n}",
            "called": [
                "FUN_08005848",
                "FUN_080057b4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800157c",
            "calling": [
                "FUN_08000b08"
            ],
            "imported": false,
            "current_name": "decode_and_process_data_0800157c"
        },
        "FUN_080045a2": {
            "renaming": {
                "FUN_080045a2": "check_and_set_values_080045a2",
                "param_1": "param_array",
                "param_2": "value1",
                "param_3": "value2"
            },
            "code": "int check_and_set_values_080045a2(int *param_array, int value1, int value2) {\n    if (*(char *)((int)param_array + 0x3a) != ' ') {\n        return 2;\n    }\n    if (value1 == 0) {\n        return 1;\n    }\n    if (value2 == 0) {\n        return 1;\n    }\n    if (*(char *)(param_array + 0xe) != '\\x01') {\n        param_array[10] = value1;\n        *(short *)(param_array + 0xb) = (short)value2;\n        *(short *)((int)param_array + 0x2e) = (short)value2;\n        param_array[0xf] = 0;\n        *(undefined *)((int)param_array + 0x3a) = 0x22;\n        *(undefined *)(param_array + 0xe) = 0;\n        *(uint *)(*param_array + 0xc) = *(uint *)(*param_array + 0xc) | 0x100;\n        *(uint *)(*param_array + 0x14) = *(uint *)(*param_array + 0x14) | 1;\n        *(uint *)(*param_array + 0xc) = *(uint *)(*param_array + 0xc) | 0x20;\n        return 0;\n    }\n    return 2;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080045a2",
            "calling": [
                "FUN_080054d4",
                "FUN_08005510"
            ],
            "imported": false,
            "current_name": "check_and_set_values_080045a2"
        },
        "FUN_08001c32": {
            "renaming": {
                "FUN_08001c32": "initialize_data_and_process_08001c32"
            },
            "code": "void initialize_data_and_process_08001c32(void)\n{\n  initialize_data_and_process_08001c32_08004c52();\n  return;\n}",
            "called": [
                "FUN_08004c52"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001c32",
            "calling": [
                "FUN_08005f5e"
            ],
            "imported": false,
            "current_name": "initialize_data_and_process_08001c32"
        },
        "FUN_080047e8": {
            "renaming": {
                "FUN_080047e8": "combine_two_bytes_080047e8",
                "param_1": "address",
                "*(byte *)(param_1 + 0x3a)": "byte1",
                "*(byte *)(param_1 + 0x39)": "byte2"
            },
            "code": "byte combine_two_bytes_080047e8(int address) {\n    byte byte1 = *(byte *)(address + 0x3a);\n    byte byte2 = *(byte *)(address + 0x39);\n    return byte1 | byte2;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080047e8",
            "calling": [
                "FUN_080054b0",
                "FUN_0800548c"
            ],
            "imported": false,
            "current_name": "combine_two_bytes_080047e8"
        },
        "FUN_080057b4": {
            "renaming": {
                "FUN_080057b4": "process_data_080057b4",
                "param_1": "data_index",
                "param_2": "flag_type",
                "param_3": "bitmask_index",
                "param_4": "data_array",
                "iVar1": "bit_value",
                "puVar2": "value_array",
                "iVar3": "value_index",
                "get_bit_at_position_080047f4": "get_bit_index_080047f4",
                "check_value_in_string_08004ce2": "check_value_in_string_08004ce2",
                "update_bitmask_if_value_found_08004b3c": "update_bitmask_if_value_found_08004b3c",
                "update_bit_at_index_08004828": "update_bit_at_index_08004828",
                "set_flag_and_update_bits_08004bb0": "set_flag_and_update_bits_08004bb0",
                "set_bit_0800480a": "set_bit_0800480a",
                "PTR_DAT_08005838": "value_array",
                "PTR_DAT_0800583c": "bitmask_array",
                "PTR_DAT_08005840": "string_array",
                "PTR_DAT_08005844": "flag_array"
            },
            "code": "void process_data_080057b4(uint data_index, undefined4 flag_type, undefined4 bitmask_index, undefined *data_array)\n{\n    int value_index;\n    undefined *PTR_DAT_08005838;\n    int bit_index;\n    int bit_value;\n    \n    if (data_index < 0x3c) {\n        value_index = (int)(char)PTR_DAT_08005838[data_index];\n        PTR_DAT_08005838 = PTR_DAT_08005838;\n    }\n    else {\n        value_index = -1;\n        PTR_DAT_08005838 = data_array;\n    }\n    if (value_index != -1) {\n        bit_index = get_bit_index_080047f4(value_index, PTR_DAT_0800583c, bitmask_index, PTR_DAT_08005838, data_array);\n        if (bit_index != 0) {\n            bit_value = check_value_in_string_08004ce2(value_index, PTR_DAT_08005840);\n            if (bit_value != 0) {\n                update_bitmask_if_value_found_08004b3c(value_index);\n            }\n            update_bit_at_index_08004828(value_index, PTR_DAT_0800583c);\n        }\n        switch(flag_type) {\n            case 0:\n                set_flag_and_update_bits_08004bb0(value_index, 0);\n                break;\n            case 1:\n                set_flag_and_update_bits_08004bb0(value_index, 1, 0);\n                break;\n            case 2:\n                set_flag_and_update_bits_08004bb0(value_index, 0, 1);\n                break;\n            case 3:\n                set_flag_and_update_bits_08004bb0(value_index, 0, 2);\n        }\n        set_bit_0800480a(value_index, PTR_DAT_08005844);\n    }\n    return;\n}",
            "called": [
                "FUN_08004828",
                "FUN_0800480a",
                "FUN_08004bb0",
                "FUN_080047f4",
                "FUN_08004ce2",
                "FUN_08004b3c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080057b4",
            "calling": [
                "FUN_0800157c",
                "FUN_08000bcc",
                "FUN_080013a4"
            ],
            "imported": false,
            "current_name": "process_data_080057b4"
        },
        "FUN_08007334": {
            "renaming": {
                "FUN_08007334": "do_nothing_08007334"
            },
            "code": "\nvoid do_nothing_08007334(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007334",
            "calling": [],
            "imported": false,
            "current_name": "do_nothing_08007334"
        },
        "FUN_08001b18": {
            "renaming": {
                "FUN_08001b18": "update_param_values_08001b18_08001b18",
                "param_1": "param_value",
                "update_param_values_08001ab0": "update_parameter_values"
            },
            "code": "undefined4 update_param_values_08001b18_08001b18(undefined4 param_value)\n{\n  update_parameter_values();\n  return param_value;\n}",
            "called": [
                "FUN_08001ab0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001b18",
            "calling": [
                "FUN_08000b08"
            ],
            "imported": false,
            "current_name": "update_param_values_08001b18_08001b18"
        },
        "thunk_FUN_08005750": {
            "renaming": {
                "thunk_FUN_08005750": "return_one_thunk_08005750"
            },
            "code": "int return_one_thunk_08005750(void)\n{\n    return 1;\n}",
            "called": [
                "FUN_08005750"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006f34",
            "calling": [
                "FUN_08006f00"
            ],
            "imported": false,
            "current_name": "return_one_thunk_08005750"
        },
        "FUN_0800092c": {
            "renaming": {
                "FUN_0800092c": "check_params_0800092c",
                "param_1": "x",
                "param_2": "y",
                "param_3": "z",
                "param_4": "w",
                "uVar1": "xor_y_w",
                "bVar2": "is_x_y_zero",
                "bVar3": "is_z_w_smaller_than_y_w"
            },
            "code": "uint check_params_0800092c(uint x, uint y, uint z, uint w) {\n  bool is_x_y_zero = (x | (y << 1)) == 0;\n  bool is_z_w_zero = (z | (w << 1)) == 0;\n  if (is_x_y_zero && is_z_w_zero) {\n    return 1;\n  }\n  if (is_x_y_zero || is_z_w_zero || x == z || y == w) {\n    return 0;\n  }\n  uint xor_y_w = y ^ w;\n  bool is_x_y_same_as_z_w = xor_y_w == 0;\n  bool is_z_w_smaller_than_y_w = -1 < (int)xor_y_w && w <= y;\n  if (is_x_y_same_as_z_w || (!is_z_w_smaller_than_y_w && z <= x)) {\n    return 1;\n  }\n  return 0x80000000 | 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800092c",
            "calling": [
                "FUN_080009b8"
            ],
            "imported": false,
            "current_name": "check_params_0800092c"
        },
        "FUN_08005d8a": {
            "renaming": {
                "FUN_08005d8a": "convert_base_08005d8a",
                "param_1": "values",
                "param_2": "size",
                "param_3": "base",
                "param_4": "extra_param",
                "convert_base_08005ce8": "do_conversion"
            },
            "code": "void convert_base_08005d8a(uint32_t *values, uint32_t size, uint32_t base, uint32_t extra_param)\n{\n  if (base != 0) {\n    do_conversion(values, size, base & 0xff);\n    return;\n  }\n  (**(code **)*values)(values, size & 0xff, 0, *(code **)*values, extra_param);\n  return;\n}",
            "called": [
                "FUN_08005ce8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005d8a",
            "calling": [
                "FUN_08005da8",
                "FUN_08005da0"
            ],
            "imported": false,
            "current_name": "convert_base_08005d8a"
        },
        "FUN_08002560": {
            "renaming": {
                "FUN_08002560": "update_flag_08002560",
                "param_1": "flag_value",
                "*DAT_0800257c": "*flag_ptr"
            },
            "code": "void update_flag_08002560(int flag_value) {\n  if (flag_value != 4) {\n    *DAT_0800257c = *DAT_0800257c & 0xfffffffb;\n    return;\n  }\n  *DAT_0800257c = *DAT_0800257c | 4;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002560",
            "calling": [
                "FUN_08001b48"
            ],
            "imported": false,
            "current_name": "update_flag_08002560"
        },
        "FUN_08006e90": {
            "renaming": {
                "FUN_08006e90": "find_char_in_string_08006e90",
                "param_1": "str",
                "param_2": "ch",
                "param_3": "length",
                "pcVar1": "current_char",
                "pcVar2": "temp_ptr"
            },
            "code": "char* find_char_in_string_08006e90(char* str, char ch, int length) {\n  char* current_char = str;\n  while (current_char != str + length) {\n    if (*current_char == ch) {\n      return current_char;\n    }\n    current_char++;\n  }\n  return NULL;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006e90",
            "calling": [
                "FUN_080066b0",
                "FUN_08006394"
            ],
            "imported": false,
            "current_name": "find_char_in_string_08006e90"
        },
        "FUN_0800417a": {
            "renaming": {
                "FUN_0800417a": "do_nothing_0800417a"
            },
            "code": "\nvoid do_nothing_0800417a(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800417a",
            "calling": [
                "FUN_08003f18"
            ],
            "imported": false,
            "current_name": "do_nothing_0800417a"
        },
        "FUN_08006920": {
            "renaming": {
                "FUN_08006920": "calculate_offset_and_set_value_08006920",
                "param_1": "output_value",
                "param_2": "input_value",
                "puVar1": "pointer_to_value",
                "iVar2": "offset"
            },
            "code": "void calculate_offset_and_set_value_08006920(int *output_value, undefined4 input_value)\n{\n  undefined *pointer_to_value = PTR_DAT_0800693c;\n  *(undefined4 *)PTR_DAT_0800693c = 0;\n  int offset = calculate_offset_080056d8(input_value);\n  if ((offset == -1) && (*(int *)pointer_to_value != 0)) {\n    *output_value = *(int *)pointer_to_value;\n  }\n  return;\n}",
            "called": [
                "FUN_080056d8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006920",
            "calling": [
                "FUN_08006288"
            ],
            "imported": false,
            "current_name": "calculate_offset_and_set_value_08006920"
        },
        "FUN_080008ba": {
            "renaming": {
                "FUN_080008ba": "calculate_result_080008ba",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "uVar1": "temp_6",
                "unaff_r4": "unaff_r4",
                "uVar2": "temp_9",
                "uVar3": "temp_2",
                "in_r12": "in_r12",
                "bVar4": "condition_1",
                "temp_1": "temp_1",
                "temp_2": "temp_2",
                "temp_3": "temp_3",
                "temp_4": "temp_4",
                "temp_5": "temp_5",
                "temp_6": "temp_6",
                "temp_7": "temp_7",
                "temp_8": "temp_8",
                "temp_9": "temp_9"
            },
            "code": "ulonglong calculate_result_080008ba(uint32_t input_1, uint32_t input_2, uint32_t input_3, uint32_t input_4) {\n  uint32_t temp_1, temp_2, temp_3, temp_4;\n  bool condition_1, condition_2;\n  \n  temp_2 = input_2;\n  temp_1 = input_1;\n  temp_3 = input_3;\n  temp_4 = input_4;\n  \n  if (temp_4 >> 0x14 != in_r12 && unaff_r4 != in_r12) {\n    if (unaff_r4 == in_r12) {\n      condition_1 = (temp_1 | temp_2 << 0xc) == 0;\n      if (condition_1) {\n        temp_1 = temp_3;\n        temp_2 = temp_4;\n        if (temp_4 >> 0x14 != in_r12) {\n          return (ulonglong)((temp_2 ^ temp_4) & 0x80000000 | 0x7ff00000) << 0x20;\n        }\n      }\n    }\n    else if (temp_4 >> 0x14 == in_r12) {\n      condition_1 = (temp_3 | temp_4 << 0xc) == 0;\n      if (condition_1) {\n        return (ulonglong)((temp_2 ^ temp_4) & 0x80000000) << 0x20;\n      }\n    }\n    else {\n      condition_1 = (temp_1 | temp_2 << 1) == 0;\n      if (!condition_1) {\n        condition_2 = (temp_3 | temp_4 << 1) == 0;\n        if (!condition_2) {\n          if (unaff_r4 == 0) {\n            uint32_t temp_5 = temp_2 & 0x80000000;\n            do {\n              uint32_t temp_6 = temp_1 & 0x80000000;\n              temp_1 = temp_1 << 1;\n              temp_2 = temp_2 * 2 + (uint32_t)(temp_6 != 0);\n            } while ((temp_2 & 0x100000) == 0);\n            temp_2 |= temp_5;\n            if (temp_4 >> 0x14 != 0) {\n              return ((ulonglong)temp_2 << 0x20) | temp_1;\n            }\n          }\n          uint32_t temp_7 = temp_4 & 0x80000000;\n          do {\n            uint32_t temp_8 = temp_3 & 0x80000000;\n            temp_3 = temp_3 << 1;\n            temp_4 = temp_4 * 2 + (uint32_t)(temp_8 != 0);\n          } while ((temp_4 & 0x100000) == 0);\n          return ((ulonglong)temp_2 << 0x20) | temp_1;\n        }\n        if ((temp_1 | temp_2 << 1) != 0) {\n          return (ulonglong)((temp_2 ^ temp_4) & 0x80000000 | 0x7ff00000) << 0x20;\n        }\n        if ((temp_3 | temp_4 << 1) != 0) {\n          return (ulonglong)((temp_2 ^ temp_4) & 0x80000000) << 0x20;\n        }\n      }\n      else if ((temp_3 | temp_4 << 1) != 0) {\n        return (ulonglong)((temp_2 ^ temp_4) & 0x80000000) << 0x20;\n      }\n    }\n  }\n  return ((ulonglong)temp_1 | 0x7ff8000000000000) << 0x20 | temp_2;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080008ba",
            "calling": [
                "FUN_0800074c"
            ],
            "imported": false,
            "current_name": "calculate_result_080008ba"
        },
        "FUN_08002d1c": {
            "renaming": {
                "FUN_08002d1c": "set_bits_and_process_data_08002d1c",
                "param_1": "bits_array",
                "param_1[0xb]": "bits_array[0xb]",
                "param_1[0xc]": "bits_array[0xc]",
                "(*param_1)[1]": "bits[1]",
                "(*param_1)[5]": "bits[5]",
                "**param_1": "*bits",
                "*(undefined *)((int)param_1 + 0x3d)": "*(char *)((int)bits_array + 0x3d)",
                "*(undefined *)((int)param_1 + 0x3e)": "*(char *)((int)bits_array + 0x3e)",
                "DAT_08002dac": "PTR_DAT_08002dac"
            },
            "code": "uint32_t set_bits_and_process_data_08002d1c(uint32_t **bits_array)\n{\n    uint32_t *bits = *bits_array;\n    if (((bits_array[0xb] == (uint32_t *)0x4) || (bits_array[0xb] == (uint32_t *)0x8)) &&\n     (*(char *)((int)bits_array + 0x3d) == '(')) {\n        bits_array[0xb] = DAT_08002dac;\n        bits[1] &= 0xfffff8ff;\n        bits[5] = 0xfffffbff;\n        *bits &= 0xfffffbff;\n        bits_array[0xc] = (uint32_t *)0x0;\n        *(char *)((int)bits_array + 0x3d) = ' ';\n        *(char *)((int)bits_array + 0x3e) = 0;\n        process_data_and_set_bits_08004ec4();\n    }\n    else if (*(char *)((int)bits_array + 0x3d) == '!') {\n        bits_array[0xb] = DAT_08002dac;\n        bits_array[0xc] = (uint32_t *)0x21;\n        *(char *)((int)bits_array + 0x3d) = ' ';\n        *(char *)((int)bits_array + 0x3e) = 0;\n        bits[1] &= 0xfffff8ff;\n        bits[5] = 0xfffffbff;\n        *bits &= 0xfffffbff;\n        do_nothing_08002c52();\n    }\n    else {\n        bits[5] = 0xfffffbff;\n    }\n    return 0;\n}",
            "called": [
                "FUN_08002c52",
                "FUN_08004ec4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002d1c",
            "calling": [
                "FUN_08003520"
            ],
            "imported": false,
            "current_name": "set_bits_and_process_data_08002d1c"
        },
        "FUN_08005714": {
            "renaming": {
                "FUN_08005714": "return_error_code_08005714",
                "undefined4": "int32_t"
            },
            "code": "int32_t return_error_code_08005714(void)\n{\n  return -1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005714",
            "calling": [],
            "imported": false,
            "current_name": "return_error_code_08005714"
        },
        "FUN_08003da4": {
            "renaming": {
                "FUN_08003da4": "calculate_shifted_value_08003da4",
                "param_1": "shift_type",
                "uVar1": "shifted_value",
                "local_24": "local_variable_1",
                "abStack_20": "byte_array",
                "uStack_1c": "variable_1",
                "uStack_18": "variable_2",
                "uStack_14": "variable_3"
            },
            "code": "uint calculate_shifted_value_08003da4(int shift_type) {\n  uint shifted_value;\n  undefined2 local_variable_1;\n  byte byte_array[4];\n  undefined4 variable_1;\n  undefined4 variable_2;\n  undefined4 variable_3;\n  variable_3 = *(undefined4 *)(PTR_DAT_08003e8c + 8);\n  variable_2 = *(undefined4 *)(PTR_DAT_08003e8c + 4);\n  variable_1 = *(undefined4 *)PTR_DAT_08003e8c;\n  local_variable_1 = *(undefined2 *)(PTR_DAT_08003e8c + 0x10);\n  if (shift_type == 2) {\n    shifted_value = get_shifted_value_from_pointer_08003c70();\n    shifted_value = shifted_value / ((((DAT_08003e90[1] << 0x10) >> 0x1e) + 1) * 2);\n  }\n  else if (shift_type == 16) {\n    if ((*DAT_08003e90 & 0x1000000) == 0) {\n      shifted_value = 0;\n    }\n    else {\n      shifted_value = DAT_08003e9c;\n      if ((DAT_08003e90[1] & 0x10000) != 0) {\n        shifted_value = DAT_08003e94 / *(byte *)((int)&local_variable_1 - ((int)(DAT_08003e90[1] << 0xe) >> 0x1f));\n      }\n      shifted_value = shifted_value * byte_array[(DAT_08003e90[1] << 10) >> 0x1c];\n      if ((DAT_08003e90[1] & 0x400000) == 0) {\n        shifted_value = (uint)((ulonglong)DAT_08003e98 * (ulonglong)(shifted_value * 2) >> 0x21);\n      }\n    }\n  }\n  else if (shift_type == 1) {\n    if ((DAT_08003e90[8] & 0x302) == 0x102) {\n      shifted_value = 0x8000;\n    }\n    else {\n      shifted_value = DAT_08003e90[8] & 0x300;\n      if ((shifted_value == 0x200) && ((DAT_08003e90[9] & 2) != 0)) {\n        shifted_value = 32000;\n      }\n      else if (shifted_value == 0x300) {\n        if ((*DAT_08003e90 & 0x20000) == 0) {\n          shifted_value = 0;\n        }\n        else {\n          shifted_value = 0xf424;\n        }\n      }\n      else {\n        shifted_value = 0;\n      }\n    }\n  }\n  else {\n    shifted_value = 0;\n  }\n  return shifted_value;\n}",
            "called": [
                "FUN_08003c70"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003da4",
            "calling": [
                "FUN_08001cd0",
                "FUN_08002384"
            ],
            "imported": false,
            "current_name": "calculate_shifted_value_08003da4"
        },
        "FUN_08005a44": {
            "renaming": {
                "FUN_08005a44": "initialize_struct_08005a44",
                "param_1": "struct_address",
                "*(int *)(param_1 + 0x130)": "*ptr1",
                "*(undefined2 *)(param_1 + 0x134)": "*ptr2",
                "*(undefined2 *)(param_1 + 0x136)": "*ptr3",
                "*(int *)(param_1 + 0x138)": "*ptr4",
                "*(undefined2 *)(param_1 + 0x13c)": "*ptr5",
                "*(undefined2 *)(param_1 + 0x13e)": "*ptr6"
            },
            "code": "void initialize_struct_08005a44(int struct_address)\n{\n    int* ptr1 = (int *)(struct_address + 0x130);\n    *ptr1 = struct_address + 0x11;\n    \n    short* ptr2 = (short *)(struct_address + 0x134);\n    *ptr2 = 0;\n    \n    short* ptr3 = (short *)(struct_address + 0x136);\n    *ptr3 = 0;\n    \n    int* ptr4 = (int *)(struct_address + 0x138);\n    *ptr4 = struct_address + 0x51;\n    \n    short* ptr5 = (short *)(struct_address + 0x13c);\n    *ptr5 = 0;\n    \n    short* ptr6 = (short *)(struct_address + 0x13e);\n    *ptr6 = 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005a44",
            "calling": [
                "FUN_08005b54"
            ],
            "imported": false,
            "current_name": "initialize_struct_08005a44"
        },
        "FUN_080009dc": {
            "renaming": {
                "FUN_080009dc": "is_end_of_string_080009dc",
                "in_CY": "current_char"
            },
            "code": "bool is_end_of_string_080009dc(void)\n{\n  char current_char;\n  check_and_return_param();\n  return current_char == '\\0';\n}",
            "called": [
                "FUN_080009b8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080009dc",
            "calling": [
                "FUN_080016b4",
                "FUN_08005da8",
                "FUN_080019f6",
                "FUN_08001960",
                "FUN_08001814",
                "FUN_08000cd0"
            ],
            "imported": false,
            "current_name": "is_end_of_string_080009dc"
        },
        "FUN_0800417c": {
            "renaming": {
                "FUN_0800417c": "clear_bits_in_memory_0800417c",
                "param_1": "memory_address",
                "*param_1": "*memory_address",
                "uint": "unsigned_int",
                "memory_address_uint": "unsigned_int_memory_address",
                "char": "character",
                "memory_address_char": "character_memory_address"
            },
            "code": "void clear_bits_in_memory_0800417c(int *memory_address)\n{\n  uint *memory_address_uint = (uint *)memory_address;\n  memory_address_uint[3] &= 0xfffffedf;\n  memory_address_uint[5] &= 0xfffffffe;\n  char *memory_address_char = (char *)(memory_address + 0x3a);\n  *memory_address_char = ' ';\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800417c",
            "calling": [
                "FUN_080046b8"
            ],
            "imported": false,
            "current_name": "clear_bits_in_memory_0800417c"
        },
        "FUN_08004b94": {
            "renaming": {
                "FUN_08004b94": "get_value_from_pointer_08001cc4_wrapper_08004b94"
            },
            "code": "void get_value_from_pointer_08001cc4_wrapper_08004b94(void)\n{\n  get_value_from_pointer_08001cc4();\n  return;\n}",
            "called": [
                "FUN_08001cc4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004b94",
            "calling": [
                "FUN_080058e0"
            ],
            "imported": false,
            "current_name": "get_value_from_pointer_08001cc4_wrapper_08004b94"
        },
        "FUN_080058e0": {
            "renaming": {
                "FUN_080058e0": "get_value_from_pointer_wrapper_080058e0",
                "get_value_from_pointer_08001cc4_wrapper_08004b94": "get_value_from_pointer_wrapper_helper"
            },
            "code": "void get_value_from_pointer_wrapper_080058e0(void)\n{\n  get_value_from_pointer_wrapper_080058e0_helper();\n  return;\n}",
            "called": [
                "FUN_08004b94"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080058e0",
            "calling": [
                "FUN_080016b4",
                "FUN_08000bcc",
                "FUN_08000cd0",
                "FUN_08001ab0"
            ],
            "imported": false,
            "current_name": "get_value_from_pointer_wrapper_080058e0"
        },
        "FUN_08001918": {
            "renaming": {
                "FUN_08001918": "calculate_new_value_from_params_08001918",
                "param_1": "address",
                "param_2": "shift_amount",
                "param_3": "param_3",
                "param_4": "param_4",
                "uVar1": "upper_32_bits",
                "uVar2": "shifted_value_1",
                "uVar3": "shifted_value_2",
                "calculate_shifted_0800042c": "calculate_shifted_value",
                "convert_uint64_to_uint32_with_shift_0800040c": "convert_uint64_to_uint32_with_shift",
                "FUNC_0800074c": "perform_operation",
                "FUNC_080004f8": "perform_operation_with_params"
            },
            "code": "void calculate_new_value_from_params_08001918(int address, int shift_amount, undefined4 param_3, undefined4 param_4) {\n  undefined4 upper_32_bits;\n  undefined8 shifted_value_1;\n  undefined8 shifted_value_2;\n\n  if (shift_amount > 0) {\n    shifted_value_1 = calculate_shifted_value(shift_amount);\n    uint64_t original_value = *(undefined4 *)(address + 0x58);\n    shifted_value_2 = convert_uint64_to_uint32_with_shift(original_value);\n    shifted_value_1 = perform_operation(shifted_value_1, shifted_value_2, param_4);\n    upper_32_bits = (undefined4)((ulonglong)shifted_value_1 >> 0x20);\n    shifted_value_2 = perform_operation_with_params(shifted_value_1, upper_32_bits, *(undefined4 *)(address + 0x20), *(undefined4 *)(address + 0x24));\n    *(undefined8 *)(address + 0x20) = shifted_value_2;\n    shifted_value_1 = perform_operation_with_params(*(undefined4 *)(address + 0x28), *(undefined4 *)(address + 0x2c), shifted_value_1, upper_32_bits);\n    *(undefined8 *)(address + 0x28) = shifted_value_1;\n    *(int *)(address + 0x58) = shift_amount;\n  }\n}\n",
            "called": [
                "FUN_0800074c",
                "FUN_0800042c",
                "FUN_0800040c",
                "FUN_080004f8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001918",
            "calling": [
                "FUN_08000cd0"
            ],
            "imported": false,
            "current_name": "calculate_new_value_from_params_08001918"
        },
        "FUN_0800611c": {
            "renaming": {
                "FUN_0800611c": "process_data_and_wait_for_response_0800611c",
                "param_1": "data1",
                "param_2": "data2",
                "param_3": "data3",
                "param_4": "data4",
                "uVar1": "ptr1",
                "puVar2": "ptr2",
                "uVar3": "var1",
                "uVar4": "ptr3"
            },
            "code": "void process_data_and_wait_for_response_0800611c(undefined4 data1, undefined4 data2, undefined *data3, undefined4 data4) {\n  undefined4 ptr1 = *(undefined4 *)(*(int *)PTR_PTR_DAT_08006148 + 0xc);\n  undefined *ptr2 = PTR_s___function__0800614c;\n  undefined4 ptr3 = data4;\n  if (data3 == (undefined *)0x0) {\n    goto LAB_08006140;\n  }\n  do {\n    process_data_08006174(ptr1, PTR_s_assertion___s__failed__file___s__08006150, data4, data1, data2, ptr2, data3, ptr3);\n    undefined8 var1 = process_input_and_wait_for_response_08006ac0();\n    data2 = (undefined4)((ulonglong)var1 >> 0x20);\n    ptr1 = (undefined4)var1;\n  } while (true);\n}\n",
            "called": [
                "FUN_08006174",
                "FUN_08006ac0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800611c",
            "calling": [
                "FUN_08005a68"
            ],
            "imported": false,
            "current_name": "process_data_and_wait_for_response_0800611c"
        },
        "FUN_080047f4": {
            "renaming": {
                "FUN_080047f4": "get_bit_at_position_080047f4",
                "param_1": "value",
                "param_2": "position",
                "PTR_0x12345678": "ptr",
                "uint": "unsigned int",
                "*(uint *)": "*(unsigned int *)",
                ">>": "right shift",
                "&": "bitwise and",
                "* 4": "times 4",
                "%": "modulus",
                "0x18": "24",
                "0x1c": "28",
                "0xf": "15"
            },
            "code": "uint get_bit_at_position_080047f4(uint value, int position) {\n    int index = ((value << 0x18) >> 0x1c) * 4 + position / 32;\n    int bit_position = position % 32;\n    uint* PTR_0x12345678 = (uint*)PTR_0x12345678;\n    uint data = *(PTR_0x12345678 + index);\n    return (data >> bit_position) & 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080047f4",
            "calling": [
                "FUN_08005890",
                "FUN_08005848",
                "FUN_080057b4"
            ],
            "imported": false,
            "current_name": "get_bit_at_position_080047f4"
        },
        "FUN_080009f0": {
            "renaming": {
                "FUN_080009f0": "check_params_and_return_result_080009f0",
                "in_ZR": "zero",
                "in_CY": "cy_flag"
            },
            "code": "bool check_params_and_return_result_080009f0(void)\n{\n    undefined zero = 0;\n    undefined cy_flag = 0;\n\n    check_and_return_param_080009b8_080009b8();\n\n    return !cy_flag || zero;\n}",
            "called": [
                "FUN_080009b8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080009f0",
            "calling": [
                "FUN_08005da8",
                "FUN_08000cd0"
            ],
            "imported": false,
            "current_name": "check_params_and_return_result_080009f0"
        },
        "FUN_0800134e": {
            "renaming": {
                "FUN_0800134e": "print_snake_case_string_0800134e",
                "param_1": "str_ptr",
                "param_2": "str_len",
                "param_3": "start_idx",
                "param_4": "end_idx",
                "decode_and_print_snake_case_08001310": "decode_and_print_snake_case"
            },
            "code": "undefined4 print_snake_case_string_0800134e(undefined4 str_ptr, undefined4 str_len, undefined4 start_idx, undefined4 end_idx)\n{\n  decode_and_print_snake_case(str_ptr, str_len, start_idx, end_idx, end_idx);\n  return 1;\n}",
            "called": [
                "FUN_08001310"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800134e",
            "calling": [
                "FUN_08000cd0"
            ],
            "imported": false,
            "current_name": "print_snake_case_string_0800134e"
        },
        "FUN_08002c10": {
            "renaming": {
                "FUN_08002c10": "set_bits_in_uint_08002c10",
                "param_1": "input_uint_ptr",
                "puVar1": "input_uint",
                "PTR_": "input_uint",
                "DAT_": "data_"
            },
            "code": "int set_bits_in_uint_08002c10(uint **PTR__ptr) {\n  uint *PTR_ = *PTR__ptr;\n  if (PTR_[15] != ' ') {\n    return 2;\n  }\n  PTR_[15] = 0x28;\n  if ((PTR_[0] & 1) == 0) {\n    PTR_[0] |= 1;\n  }\n  *PTR_ |= 0x400;\n  PTR_[1] |= 0x300;\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002c10",
            "calling": [
                "FUN_08004ef4",
                "FUN_08004ec4"
            ],
            "imported": false,
            "current_name": "set_bits_in_uint_08002c10"
        },
        "FUN_08006be0": {
            "renaming": {
                "FUN_08006be0": "process_data_08006be0",
                "param_1": "data_array",
                "param_2": "param_array",
                "uVar1": "result",
                "iVar2": "data_length",
                "piVar3": "param_ptr",
                "uVar4": "data_value",
                "uVar5": "control_bits",
                "iVar6": "block_offset",
                "unaff_r4": "unused_variable",
                "unaff_r5": "unused_variable",
                "pcVar7": "function_ptr",
                "iVar8": "function_result",
                "uVar9": "unused_variable",
                "UNRECOVERED_JUMPTABLE_00": "unrecovered_jumptable",
                "bVar10": "is_block_size_zero",
                "is_block_size_zero": "is_block_size_zero",
                "data_array": "data_array",
                "param_array": "param_array",
                "result": "result",
                "param_ptr": "param_ptr",
                "data_value": "data_value",
                "control_bits": "control_bits",
                "data_length": "data_length",
                "block_size": "block_size",
                "block_offset": "block_offset",
                "function_ptr": "function_ptr",
                "function_result": "function_result",
                "data_ptr": "data_ptr",
                "data_end": "data_end"
            },
            "code": "uint32_t process_data_08006be0(uint32_t *data_array, int *param_array)\n{\n    uint32_t result = 0;\n    int *param_ptr;\n    uint32_t data_value;\n    uint16_t control_bits;\n    int data_length;\n    int block_size;\n    int block_offset;\n    code *function_ptr;\n    int function_result;\n    uint32_t *data_ptr;\n    uint32_t *data_end;\n    bool is_block_size_zero;\n\n    if (param_array[4] != 0)\n    {\n        if ((data_array != NULL) && (data_array[6] == 0))\n        {\n            initialize_params_08006cb4();\n        }\n        if (param_array == (int *)PTR_DAT_08006c28)\n        {\n            param_ptr = (int *)data_array[1];\n        }\n        else if (param_array == (int *)PTR_DAT_08006c2c)\n        {\n            param_ptr = (int *)data_array[2];\n        }\n        else if (param_array == (int *)PTR_DAT_08006c30)\n        {\n            param_ptr = (int *)data_array[3];\n        }\n        if (*(uint16_t *)(param_ptr + 3) != 0)\n        {\n            control_bits = *(uint16_t *)(param_ptr + 3);\n            data_length = control_bits;\n            if ((int)(data_length << 0x1c) < 0)\n            {\n                block_size = param_array[4];\n                if (block_size != 0)\n                {\n                    block_offset = 0;\n                    if ((data_length << 0x1e) != 0)\n                    {\n                        block_offset = 0;\n                    }\n                    else\n                    {\n                        block_offset = param_ptr[5];\n                    }\n                    param_ptr[2] = block_offset;\n                    param_ptr[0] = block_size;\n                    data_ptr = (uint32_t *)param_ptr[10];\n                    data_end = data_array - block_size;\n                    while (data_end < data_ptr)\n                    {\n                        function_result = (*(code *)data_ptr)(data_array, param_ptr[8], block_size, data_ptr - data_array, 0, 0);\n                        if (function_result < 1)\n                        {\n                            control_bits = *(uint16_t *)(param_ptr + 3);\n                            goto LAB_08006bc6;\n                        }\n                        block_offset += function_result;\n                        data_ptr = data_array - block_offset;\n                    }\n                }\n            }\n            else if (((param_ptr[1] > 0) || (param_ptr[0x10] > 0)) && ((function_ptr = (code *)param_ptr[0xb]) != NULL))\n            {\n                data_value = *data_array;\n                *data_array = 0;\n                if ((control_bits & 0x1000) == 0)\n                {\n                    function_result = (*function_ptr)(data_array, param_ptr[8], control_bits & 0x1000, 1);\n                    if ((function_result == -1) && ((data_value = *data_array) != 0))\n                    {\n                        if ((data_value != 0x1d) && (data_value != 0x16))\n                        {\n                            control_bits = *(uint16_t *)(param_ptr + 3);\n                            goto LAB_08006bd0;\n                        }\n                        *data_array = data_value;\n                        goto LAB_08006aea;\n                    }\n                }\n                else\n                {\n                    function_result = param_ptr[0x15];\n                }\n                if (((int)((uint)control_bits << 0x1d) < 0) && ((function_result = function_result - param_ptr[1]), (param_ptr[0xd] != 0)))\n                {\n                    function_result = function_result - param_ptr[0x10];\n                }\n                function_result = (*(code *)param_ptr[0xb])(data_array, param_ptr[8], function_result, 0);\n                control_bits = *(uint16_t *)(param_ptr + 3);\n                if ((function_result == -1) && ((data_value = *data_array), (data_value > 0x1d) || ((DAT_08006bdc >> (data_value & 0xff)) << 0x1f >= 0)))\n                {\n                    goto LAB_08006bc6;\n                }\n                param_ptr[1] = 0;\n                *param_ptr = param_array[4];\n                if (((int)((uint)control_bits << 0x13) < 0) && ((function_result != -1) || (*data_array == 0)))\n                {\n                    param_ptr[0x15] = function_result;\n                }\n                if ((param_ptr[0xd] != 0) && (param_ptr != param_ptr + 0x11))\n                {\n                    insert_element_at_front_080061f0(data_array);\n                    param_ptr[0xd] = 0;\n                    goto LAB_08006b66;\n                }\n            }\n        }\n    }\nLAB_08006aea:\n    result = 0;\nLAB_08006aec:\n    return result;\n\nLAB_08006bc6:\n    control_bits |= 0x40;\nLAB_08006bd0:\n    result = (*UNRECOVERED_JUMPTABLE_00)(0xffffffff);\n    goto LAB_08006aec;\n\nLAB_08006b66:\n    result = (*UNRECOVERED_JUMPTABLE_00)();\n    goto LAB_08006aec;\n}",
            "called": [
                "FUN_08006cb4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006be0",
            "calling": [
                "FUN_08006344"
            ],
            "imported": false,
            "current_name": "process_data_08006be0",
            "code_backup": "\nundefined4 FUN_08006be0(uint *param_1,int *param_2)\n\n{\n  undefined4 uVar1;\n  int iVar2;\n  int *piVar3;\n  uint uVar4;\n  ushort uVar5;\n  int iVar6;\n  undefined4 unaff_r4;\n  undefined4 unaff_r5;\n  code *pcVar7;\n  int iVar8;\n  uint uVar9;\n  code *UNRECOVERED_JUMPTABLE_00;\n  bool bVar10;\n  \n  if (param_2[4] != 0) {\n    if ((param_1 != (uint *)0x0) && (param_1[6] == 0)) {\n      FUNC_08006cb4();\n    }\n    if (param_2 == (int *)PTR_DAT_08006c28) {\n      param_2 = (int *)param_1[1];\n    }\n    else if (param_2 == (int *)PTR_DAT_08006c2c) {\n      param_2 = (int *)param_1[2];\n    }\n    else if (param_2 == (int *)PTR_DAT_08006c30) {\n      param_2 = (int *)param_1[3];\n    }\n    if (*(short *)(param_2 + 3) != 0) {\n      uVar5 = *(ushort *)(param_2 + 3);\n      uVar4 = (uint)uVar5;\n      if ((int)(uVar4 << 0x1c) < 0) {\n        iVar2 = param_2[4];\n        if (iVar2 != 0) {\n          iVar6 = uVar4 << 0x1e;\n          bVar10 = iVar6 != 0;\n          if (bVar10) {\n            iVar6 = 0;\n          }\n          iVar8 = *param_2;\n          if (!bVar10) {\n            iVar6 = param_2[5];\n          }\n          *param_2 = iVar2;\n          param_2[2] = iVar6;\n          for (iVar8 = iVar8 - iVar2; 0 < iVar8; iVar8 = iVar8 - iVar6) {\n            iVar6 = (*(code *)param_2[10])(param_1,param_2[8],iVar2,iVar8,unaff_r4,unaff_r5);\n            if (iVar6 < 1) {\n              uVar5 = *(ushort *)(param_2 + 3);\n              goto LAB_08006bc6;\n            }\n            iVar2 = iVar2 + iVar6;\n          }\n        }\n      }\n      else if (((0 < param_2[1]) || (0 < param_2[0x10])) &&\n              (pcVar7 = (code *)param_2[0xb], pcVar7 != (code *)0x0)) {\n        uVar9 = *param_1;\n        *param_1 = 0;\n        if ((uVar5 & 0x1000) == 0) {\n          iVar2 = (*pcVar7)(param_1,param_2[8],uVar4 & 0x1000,1);\n          if ((iVar2 == -1) && (uVar4 = *param_1, uVar4 != 0)) {\n            if ((uVar4 != 0x1d) && (uVar4 != 0x16)) {\n              *(ushort *)(param_2 + 3) = *(ushort *)(param_2 + 3) | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x08006b90. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n              uVar1 = (*UNRECOVERED_JUMPTABLE_00)();\n              return uVar1;\n            }\n            *param_1 = uVar9;\n            goto LAB_08006aea;\n          }\n        }\n        else {\n          iVar2 = param_2[0x15];\n        }\n        if (((int)((uint)*(ushort *)(param_2 + 3) << 0x1d) < 0) &&\n           (iVar2 = iVar2 - param_2[1], param_2[0xd] != 0)) {\n          iVar2 = iVar2 - param_2[0x10];\n        }\n        iVar2 = (*(code *)param_2[0xb])(param_1,param_2[8],iVar2,0);\n        uVar5 = *(ushort *)(param_2 + 3);\n        if ((iVar2 == -1) &&\n           ((0x1d < *param_1 || (-1 < (int)((DAT_08006bdc >> (*param_1 & 0xff)) << 0x1f))))) {\nLAB_08006bc6:\n          *(ushort *)(param_2 + 3) = uVar5 | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x08006bd0. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          uVar1 = (*UNRECOVERED_JUMPTABLE_00)(0xffffffff);\n          return uVar1;\n        }\n        param_2[1] = 0;\n        *param_2 = param_2[4];\n        if (((int)((uint)uVar5 << 0x13) < 0) && ((iVar2 != -1 || (*param_1 == 0)))) {\n          param_2[0x15] = iVar2;\n        }\n        piVar3 = (int *)param_2[0xd];\n        *param_1 = uVar9;\n        if (piVar3 != (int *)0x0) {\n          if (piVar3 != param_2 + 0x11) {\n            insert_element_at_front_080061f0(param_1);\n          }\n          param_2[0xd] = 0;\n                    /* WARNING: Could not recover jumptable at 0x08006b66. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          uVar1 = (*UNRECOVERED_JUMPTABLE_00)();\n          return uVar1;\n        }\n      }\nLAB_08006aea:\n                    /* WARNING: Could not recover jumptable at 0x08006aec. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      uVar1 = (*UNRECOVERED_JUMPTABLE_00)(0);\n      return uVar1;\n    }\n  }\n  return 0;\n}\n\n"
        },
        "FUN_080012e8": {
            "renaming": {
                "FUN_080012e8": "decode_and_print_string_080012e8",
                "param_1": "string_address",
                "param_2": "bit_mask",
                "uVar1": "bit_position",
                "decode_character_08005848": "decode_character",
                "decode_and_print_string_080012a2": "print_decoded_string"
            },
            "code": "void decode_and_print_string_080012e8(int string_address, int bit_mask)\n{\n  uint8_t bit_position;\n  for (bit_position = 0; bit_position < 8; bit_position++) {\n    decode_character(*(uint8_t *)(string_address + bit_position + 0xb), bit_mask >> (bit_position & 0xff) & 1);\n  }\n  print_decoded_string(string_address);\n  return;\n}",
            "called": [
                "FUN_08005848",
                "FUN_080012a2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080012e8",
            "calling": [
                "FUN_08001310"
            ],
            "imported": false,
            "current_name": "decode_and_print_string_080012e8"
        },
        "FUN_080058e8": {
            "renaming": {
                "FUN_080058e8": "do_nothing_080058e8"
            },
            "code": "\nvoid do_nothing_080058e8(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080058e8",
            "calling": [
                "FUN_08000bcc"
            ],
            "imported": false,
            "current_name": "do_nothing_080058e8"
        },
        "FUN_08006370": {
            "renaming": {
                "FUN_08006370": "process_input_08006370",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "input",
                "param_4": "input_len",
                "puVar2": "end_of_input",
                "iVar1": "result",
                "iVar3": "index"
            },
            "code": "int process_input_08006370(int param1, int param2, char *input, int input_len) {\n  int index = 0;\n  char *end_of_input = input + input_len;\n  while (index != input_len) {\n    if (input == end_of_input) {\n      return 0;\n    }\n    int result = process_input_08006370_08006344_08006344(param1, *input, param2, input_len, index);\n    input++;\n    index++;\n  }\n  return result;\n}",
            "called": [
                "FUN_08006344"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006370",
            "calling": [
                "FUN_08006394"
            ],
            "imported": false,
            "current_name": "process_input_08006370"
        },
        "FUN_080024f8": {
            "renaming": {
                "FUN_080024f8": "set_bit_at_position_080024f8",
                "param_1": "position",
                "DAT_08002510": "data_ptr"
            },
            "code": "void set_bit_at_position_080024f8(uint position) {\n  if (position >= 0) {\n    int* DAT_08002510 = DAT_08002510 + (position >> 5) * 4;\n    int bit_mask = 1 << (position & 0x1f);\n    *DAT_08002510 = bit_mask;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080024f8",
            "calling": [
                "FUN_08005568",
                "FUN_08005510"
            ],
            "imported": false,
            "current_name": "set_bit_at_position_080024f8"
        },
        "FUN_08001ab0": {
            "renaming": {
                "FUN_08001ab0": "update_param_values_08001ab0",
                "param_1": "param_container",
                "param_2": "param1",
                "param_3": "param2",
                "param_4": "param3",
                "param_5": "param4",
                "param_6": "param5",
                "param_7": "param6",
                "param_8": "param7",
                "param_9": "param8",
                "param_10": "param9",
                "param_11": "param10",
                "param_12": "param11",
                "iVar1": "value"
            },
            "code": "int update_param_values_08001ab0(int param_container, int param1, int param2, int param3, int param4, int param5, int param6, int param7, int param8, int param9, int param10, int param11)\n{\n  int value;\n  *(int *)(param_container + 60) = param3;\n  *(int *)(param_container + 56) = param2;\n  *(int *)(param_container + 64) = param4;\n  *(char *)(param_container + 112) = 0;\n  update_params_08001960(param_container,param2,0,0,PTR_DAT_08001b10,PTR_DAT_08001b14);\n  *(int *)(param_container + 88) = 100;\n  update_params_08001a66(param_container,param11);\n  parse_input_string_08001814(param_container,extraout_r1,param5,param6,param7,param8,param9,param10,param11);\n  value = get_value_from_pointer_wrapper_080058e0();\n  *(int *)(param_container + 68) = value - *(int *)(param_container + 88);\n  return param_container;\n}",
            "called": [
                "FUN_08001a66",
                "FUN_08001960",
                "FUN_08001814",
                "FUN_080058e0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001ab0",
            "calling": [
                "FUN_08001b18"
            ],
            "imported": false,
            "current_name": "update_param_values_08001ab0"
        },
        "FUN_08006ac0": {
            "renaming": {
                "FUN_08006ac0": "process_input_and_wait_for_response_08006ac0",
                "puVar1": "response_ptr",
                "iVar2": "response_length",
                "piVar3": "request_ptr",
                "piVar4": "response_info_ptr",
                "uVar5": "response_info",
                "uVar6": "response_flags",
                "iVar7": "response_data_offset",
                "pcVar8": "response_handler",
                "iVar9": "response_data_length",
                "uVar10": "wait_result",
                "UNRECOVERED_JUMPTABLE_00": "jump_table",
                "bVar11": "is_response_error",
                "uVar12": "wait_forever_result"
            },
            "code": "void process_input_and_wait_for_response_08006ac0()\n{\n  uint *response_ptr;\n  int response_length;\n  int *request_ptr;\n  int *response_info_ptr;\n  uint response_info;\n  ushort response_flags;\n  int response_data_length;\n  code *response_handler;\n  int response_data_offset;\n  uint response_data_remaining;\n  code *UNRECOVERED_JUMPTABLE_00;\n  bool is_response_error;\n  undefined8 wait_result;\n  \n  process_input_08006f00(6);\n  UNRECOVERED_JUMPTABLE_00 = (code *)0x8006acf;\n  wait_result = wait_forever_0800573c(1);\n  request_ptr = (int *)((ulonglong)wait_result >> 0x20);\n  response_ptr = (uint *)wait_result;\n  response_flags = *(ushort *)(request_ptr + 3);\n  response_info = (uint)response_flags;\n  if ((int)(response_info << 0x1c) < 0) {\n    response_length = request_ptr[4];\n    if (response_length != 0) {\n      response_data_offset = response_info << 0x1e;\n      is_response_error = response_data_offset == 0;\n      if (is_response_error) {\n        response_data_offset = 0;\n      }\n      response_data_length = *request_ptr;\n      if (!is_response_error) {\n        response_data_offset = request_ptr[5];\n      }\n      *request_ptr = response_length;\n      request_ptr[2] = response_data_offset;\n      for (response_data_remaining = response_data_length - response_length; 0 < response_data_remaining; response_data_remaining = response_data_remaining - response_data_offset) {\n        response_data_offset = (*(code *)request_ptr[10])(response_ptr,request_ptr[8],response_length,response_data_remaining);\n        if (response_data_offset < 1) {\n          response_flags = *(ushort *)(request_ptr + 3);\n          goto LAB_08006bc6;\n        }\n        response_length = response_length + response_data_offset;\n      }\n    }\n  }\n  else if (((0 < request_ptr[1]) || (0 < request_ptr[0x10])) &&\n          (response_handler = (code *)request_ptr[0xb], response_handler != (code *)0x0)) {\n    response_info = *response_ptr;\n    *response_ptr = 0;\n    if ((response_flags & 0x1000) == 0) {\n      response_data_offset = (*response_handler)(response_ptr,request_ptr[8],response_info & 0x1000,1);\n      if ((response_data_offset == -1) && (response_info = *response_ptr, response_info != 0)) {\n        if ((response_info != 0x1d) && (response_info != 0x16)) {\n          *(ushort *)(request_ptr + 3) = *(ushort *)(request_ptr + 3) | 0x40;\n          (*UNRECOVERED_JUMPTABLE_00)();\n          return;\n        }\n        *response_ptr = response_data_length;\n        goto LAB_08006aea;\n      }\n    }\n    else {\n      response_data_offset = request_ptr[0x15];\n    }\n    if (((int)((uint)*(ushort *)(request_ptr + 3) << 0x1d) < 0) &&\n       (response_data_offset = response_data_offset - request_ptr[1], request_ptr[0xd] != 0)) {\n      response_data_offset = response_data_offset - request_ptr[0x10];\n    }\n    response_data_offset = (*(code *)request_ptr[0xb])(response_ptr,request_ptr[8],response_data_offset,0);\n    response_flags = *(ushort *)(request_ptr + 3);\n    if ((response_data_offset == -1) &&\n       ((0x1d < *response_ptr || (-1 < (int)((DAT_08006bdc >> (*response_ptr & 0xff)) << 0x1f)))) {\n      *(ushort *)(request_ptr + 3) = response_flags | 0x40;\n      (*UNRECOVERED_JUMPTABLE_00)(0xffffffff);\n      return;\n    }\n    request_ptr[1] = 0;\n    *request_ptr = request_ptr[4];\n    if (((int)((uint)response_flags << 0x13) < 0) && ((response_data_offset != -1 || (*response_ptr == 0)))) {\n      request_ptr[0x15] = response_data_offset;\n    }\n    response_info_ptr = (int *)request_ptr[0xd];\n    *response_ptr = response_data_length;\n    if (response_info_ptr != (int *)0x0) {\n      if (response_info_ptr != request_ptr + 0x11) {\n        insert_element_at_front_080061f0(response_ptr);\n      }\n      request_ptr[0xd] = 0;\n      (*UNRECOVERED_JUMPTABLE_00)();\n      return;\n    }\n  }\nLAB_08006aea:\n  (*UNRECOVERED_JUMPTABLE_00)(0);\n  return;\n}",
            "called": [
                "FUN_080061f0",
                "FUN_08006f00",
                "FUN_0800573c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006ac0",
            "calling": [
                "FUN_08007090",
                "FUN_0800611c"
            ],
            "imported": false,
            "current_name": "process_input_and_wait_for_response_08006ac0"
        },
        "FUN_08004198": {
            "renaming": {
                "FUN_08004198": "parse_data_08004198",
                "param_1": "data",
                "pbVar2": "byte_data",
                "sVar1": "counter",
                "*param_1": "result",
                "*(char *)((int)param_1 + 0x39)": "first_char",
                "param_1[2]": "data_type",
                "*(ushort *)param_1[8]": "ushort_data",
                "param_1[4]": "flag",
                "param_1[8]": "data_index",
                "*(short *)((int)param_1 + 0x26)": "counter"
            },
            "code": "uint32_t parse_data_08004198(int32_t *data)\n{\n    char first_char = *(char *)(data + 0x39);\n    if (first_char != '!') {\n        return 2;\n    }\n    uint32_t *result = (uint32_t *)(*data + 4);\n    uint32_t data_type = data[2];\n    if (data_type == 0x1000) {\n        *result = *(uint16_t *)data[8] & 0x1ff;\n        if (data[4] == 0) {\n            data[8] += 2;\n        }\n        else {\n            data[8]++;\n        }\n    }\n    else {\n        uint8_t *byte_data = (uint8_t *)data[8];\n        data[8] = (int32_t)(byte_data + 1);\n        *result = (uint32_t)*byte_data;\n    }\n    int16_t counter = *(int16_t *)(data + 0x26) - 1;\n    *(int16_t *)(data + 0x26) = counter;\n    if (counter == 0) {\n        uint32_t *flag = (uint32_t *)(*data + 0xc);\n        *flag = *flag & 0xffffff7f;\n        *flag = *flag | 0x40;\n        return 0;\n    }\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004198",
            "calling": [
                "FUN_080046b8"
            ],
            "imported": false,
            "current_name": "parse_data_08004198"
        },
        "FUN_08001c3c": {
            "renaming": {
                "FUN_08001c3c": "check_and_set_values_08001c3c",
                "param_1": "time_in_ms",
                "iVar1": "check_result",
                "byte_val": "byte_val",
                "PTR_DAT_08001c80": "PTR_DAT_08001c80",
                "PTR_DAT_08001c7c": "PTR_DAT_08001c7c",
                "PTR_DAT_08001c84": "PTR_DAT_08001c84",
                "process_data_08002494": "process_data_08002494",
                "uint": "uint",
                "int": "int",
                "0xf": "0xf",
                "0xffffffff": "0xffffffff"
            },
            "code": "int check_and_set_values_08001c3c(uint time_in_ms) {\n    uint byte_val = *(uint*)PTR_DAT_08001c80 / (1000 / (byte)*PTR_DAT_08001c7c);\n    int check_result = check_param_and_set_values_08002514(byte_val);\n    if (check_result != 0) {\n        return 1;\n    }\n    if (time_in_ms > 0xf) {\n        return 1;\n    }\n    process_data_08002494(0xffffffff, time_in_ms, 0);\n    *(uint*)PTR_DAT_08001c84 = time_in_ms;\n    return 0;\n}",
            "called": [
                "FUN_08002494",
                "FUN_08002514"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001c3c",
            "calling": [
                "FUN_08001c88",
                "FUN_08003afa"
            ],
            "imported": false,
            "current_name": "check_and_set_values_08001c3c"
        },
        "FUN_08001c3a": {
            "renaming": {
                "FUN_08001c3a": "do_nothing_08001c3a"
            },
            "code": "\nvoid do_nothing_08001c3a(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001c3a",
            "calling": [
                "FUN_08001c88"
            ],
            "imported": false,
            "current_name": "do_nothing_08001c3a"
        },
        "FUN_08000a2c": {
            "renaming": {
                "FUN_08000a2c": "is_valid_input_08000a2c",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4"
            },
            "code": "int is_valid_input_08000a2c(uint32_t input_1, int input_2, uint32_t input_3, int input_4) {\n    int is_input_2_valid = ((input_2 << 1) >> 0x15 != -1) || ((input_1 | input_2 << 0xc) == 0);\n    int is_input_4_valid = ((input_4 << 1) >> 0x15 != -1) || ((input_3 | input_4 << 0xc) == 0);\n    if (is_input_2_valid && is_input_4_valid) {\n        return 1;\n    }\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000a2c",
            "calling": [
                "FUN_08005da8"
            ],
            "imported": false,
            "current_name": "is_valid_input_08000a2c"
        },
        "FUN_08001366": {
            "renaming": {
                "FUN_08001366": "decode_and_print_snake_case_08001366",
                "param_1": "address",
                "param_2": "character",
                "param_3": "length",
                "param_4": "parameter",
                "cVar1": "decoded_character",
                "max_length": "3",
                "address_offset": "0x18",
                "length_offset": "0x17",
                "max_address_offset": "*(byte *)(address + length_offset)"
            },
            "code": "void decode_and_print_snake_case_08001366(int address, char character, uint length, undefined4 parameter) {\n  uint max_length = 3;\n  uint address_offset = 0x18;\n  uint length_offset = 0x17;\n  if (max_length < length) {\n    length = max_length;\n  }\n  uint max_address_offset = *(byte *)(address + length_offset);\n  if ((int)max_address_offset <= (int)length) {\n    length = (max_address_offset - 1) & 0xff;\n  }\n  char decoded_character = *(char *)(length + address + address_offset);\n  decode_and_print_snake_case_08001366_08001310(address, character + decoded_character | 0x80, 0, decoded_character, parameter);\n}\n",
            "called": [
                "FUN_08001310"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001366",
            "calling": [
                "FUN_08000bcc",
                "FUN_08000cd0"
            ],
            "imported": false,
            "current_name": "decode_and_print_snake_case_08001366"
        },
        "FUN_08005848": {
            "renaming": {
                "FUN_08005848": "decode_character_08005848",
                "param_1": "character_index",
                "param_2": "param_2",
                "param_3": "param_3",
                "param_4": "param_4",
                "uVar4": "character_mask",
                "puVar3": "index_mask",
                "iVar1": "character_datum_index",
                "uVar2": "character_value",
                "get_bit_at_position_080047f4": "get_datum_index_by_bit_position_080047f4",
                "PTR_DAT_08005888": "PTR_DAT_08005888",
                "PTR_DAT_0800588c": "PTR_DAT_0800588c",
                "get_datum_by_index_08004848": "get_datum_by_index_08004848",
                "set_param_value_if_zero_or_one_08004c30": "set_param_value_if_zero_or_one_08004c30"
            },
            "code": "void decode_character_08005848(uint character_index, uint param_2, uint param_3, undefined *param_4)\n{\n    uint character_mask;\n    uint index_mask;\n    uint character_datum_index;\n    uint bit_position;\n    uint bit_value;\n    uint character_value;\n\n    if (character_index < 0x3c) {\n        character_mask = (uint)(char)PTR_DAT_08005888[character_index];\n        index_mask = 0;\n    }\n    else {\n        character_mask = 0xffffffff;\n        index_mask = param_3;\n    }\n\n    if (character_mask != 0xffffffff) {\n        bit_position = (character_mask << 0x18) >> 0x1c;\n        bit_value = 1 << (character_mask & 0xf) & 0xffff;\n        character_datum_index = get_datum_index_by_bit_position_080047f4(character_mask, PTR_DAT_0800588c, index_mask, param_4);\n        if (character_datum_index != 0) {\n            character_value = get_datum_by_index_08004848(character_datum_index);\n            set_param_value_if_zero_or_one_08004c30(character_value, bit_value, param_2);\n        }\n    }\n}",
            "called": [
                "FUN_08004848",
                "FUN_080047f4",
                "FUN_08004c30"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005848",
            "calling": [
                "FUN_080015b2",
                "FUN_08001310",
                "FUN_080012a2",
                "FUN_0800157c",
                "FUN_08000bcc",
                "FUN_08000cd0",
                "FUN_080012c0",
                "FUN_080012e8",
                "FUN_080013a4"
            ],
            "imported": false,
            "current_name": "decode_character_08005848"
        },
        "FUN_08000ae8": {
            "renaming": {
                "FUN_08000ae8": "trigger_software_interrupt_08000ae8"
            },
            "code": "void trigger_software_interrupt_08000ae8(void)\n{\n  software_interrupt(0x3f);\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000ae8",
            "calling": [
                "FUN_08000aec"
            ],
            "imported": false,
            "current_name": "trigger_software_interrupt_08000ae8"
        },
        "FUN_08003ed8": {
            "renaming": {
                "FUN_08003ed8": "set_bitmask_08003ed8",
                "param_1": "param_array",
                "puVar1": "param_pointer"
            },
            "code": "void set_bitmask_08003ed8(uint **param_array)\n{\n  uint *param_pointer = *param_array;\n  *(undefined *)((int)param_array + 0x3d) = 2;\n  if ((param_pointer[8] & 0x1111) == 0) {\n    if ((param_pointer[8] & 0x444) == 0) {\n      *param_pointer = *param_pointer & 0xfffffffe;\n    }\n  }\n  set_bitmask_08003ed8_helper(param_array);\n  *(undefined *)((int)param_array + 0x3d) = 0;\n  *(undefined *)(param_array + 0xf) = 0;\n  return;\n}",
            "called": [
                "FUN_08004b34"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003ed8",
            "calling": [
                "FUN_08004b3c"
            ],
            "imported": false,
            "current_name": "set_bitmask_08003ed8"
        },
        "FUN_080061e0": {
            "renaming": {
                "FUN_080061e0": "fill_memory_with_value_080061e0",
                "param_1": "memory",
                "param_2": "value",
                "param_3": "size",
                "puVar1": "end_of_memory",
                "*puVar1": "*end_of_memory"
            },
            "code": "void fill_memory_with_value_080061e0(void* memory, char value, int size) {\n  void* end_of_memory = memory + size;\n  for (; memory != end_of_memory; memory++) {\n    *memory = value;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080061e0",
            "calling": [
                "FUN_08004a4c",
                "FUN_08006c40",
                "FUN_08006d14",
                "FUN_08006c88"
            ],
            "imported": false,
            "current_name": "fill_memory_with_value_080061e0"
        },
        "FUN_08005604": {
            "renaming": {
                "FUN_08005604": "find_and_check_value_in_array_08005604",
                "uVar1": "index_of_value",
                "iVar2": "array_index",
                "iVar3": "array_value",
                "find_index_of_value_in_array_080055bc": "find_index_of_value_in_array",
                "PTR_DAT_08005644": "ptr_dat_1",
                "PTR_DAT_08005648": "ptr_dat_2",
                "PTR_DAT_0800564c": "ptr_dat_3",
                "check_input_0800455a": "check_input"
            },
            "code": "void find_and_check_value_in_array_08005604(void)\n{\n  uint index_of_value = find_index_of_value_in_array();\n  int array_index = *(int *)(PTR_DAT_08005644 + index_of_value * 4);\n  if ((index_of_value < 5) && (array_index = (**(code **)(PTR_DAT_08005648 + index_of_value * 4))(array_index), array_index != -1)) {\n    check_input(*(undefined4 *)(PTR_DAT_0800564c + (uint)*(byte *)(array_index + 0x44) * 4),\n                 *(int *)(array_index + 100) + (uint)*(ushort *)(array_index + 0x6a),1);\n  }\n  return;\n}",
            "called": [
                "FUN_0800455a",
                "FUN_080055bc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005604",
            "calling": [
                "FUN_080045fe"
            ],
            "imported": false,
            "current_name": "find_and_check_value_in_array_08005604"
        },
        "FUN_08005724": {
            "renaming": {
                "FUN_08005724": "always_returns_one_08005724"
            },
            "code": "int always_returns_one_08005724(void) {\n    return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005724",
            "calling": [
                "FUN_08007028"
            ],
            "imported": false,
            "current_name": "always_returns_one_08005724"
        },
        "FUN_08005728": {
            "renaming": {
                "FUN_08005728": "return_zero_08005728"
            },
            "code": "int return_zero_08005728(void)\n{\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005728",
            "calling": [
                "FUN_08007048"
            ],
            "imported": false,
            "current_name": "return_zero_08005728"
        },
        "FUN_0800135a": {
            "renaming": {
                "FUN_0800135a": "print_snake_case_string_0800135a",
                "param_1": "snake_case_string",
                "param_2": "start_index",
                "param_3": "end_index",
                "param_4": "buffer",
                "decode_and_print_snake_case_08001310": "decode_and_print_snake_case",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "void print_snake_case_string_0800135a(void* snake_case_string, int start_index, int end_index, void* buffer, size_t buffer_size)\n{\n  decode_and_print_snake_case(snake_case_string, start_index, end_index, buffer, buffer_size);\n  return;\n}",
            "called": [
                "FUN_08001310"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800135a",
            "calling": [
                "FUN_08000bcc",
                "FUN_08000cd0",
                "FUN_080013a4"
            ],
            "imported": false,
            "current_name": "print_snake_case_string_0800135a"
        },
        "FUN_08005c96": {
            "renaming": {
                "FUN_08005c96": "get_length_of_string_08005c96",
                "param_1": "string_pointer",
                "param_2": "string_length",
                "uVar1": "result",
                "param_3": "param_3",
                "param_4": "param_4",
                "*param_1": "*string_pointer",
                "**(code **)(*param_1 + 4)": "**(code **)(*string_pointer + 4)"
            },
            "code": "int get_length_of_string_08005c96(int *string_pointer, int string_length, undefined4 param_3, undefined4 param_4) {\n  if (string_length != 0) {\n    int length_of_string = get_string_length_08000178(string_length);\n    int result = (**(code **)(*string_pointer + 4))(string_pointer, string_length, length_of_string, *(code **)(*string_pointer + 4), param_4);\n    return result;\n  }\n  return 0;\n}",
            "called": [
                "FUN_08000178"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005c96",
            "calling": [
                "FUN_08005da8",
                "FUN_08005cd4",
                "FUN_08000bcc",
                "FUN_08000cd0"
            ],
            "imported": false,
            "current_name": "get_length_of_string_08005c96"
        },
        "FUN_0800571a": {
            "renaming": {
                "FUN_0800571a": "set_memory_permissions_0800571a",
                "param_1": "base_address",
                "param_2": "permission_flags"
            },
            "code": "int set_memory_permissions_0800571a(int base_address, int permission_flags)\n{\n  *(int *)(base_address + 4) = 0x2000;\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800571a",
            "calling": [
                "FUN_08007004"
            ],
            "imported": false,
            "current_name": "set_memory_permissions_0800571a"
        },
        "FUN_08002efc": {
            "renaming": {
                "FUN_08002efc": "process_input_08002efc",
                "param_1": "input",
                "puVar1": "state",
                "PTR_DAT_08000400": "do_nothing_08002db0",
                "PTR_DAT_08000402": "do_nothing_08002c4e"
            },
            "code": "uint32_t process_input_08002efc(uint32_t **input)\n{\n  uint32_t *state = input[0xb];\n  if (*(char *)((int)input + 0x3d) == '!') {\n    if (*(int16_t *)((int)input + 0x2a) == 0) {\n      if (((state == (uint32_t *)0x4) || (state == (uint32_t *)0x8)) || (state == (uint32_t *)0xffff0000)) {\n        (*input)[1] &= 0xfffff8ff;\n        **input |= 0x200;\n        input[0xc] = NULL;\n        *(char *)((int)input + 0x3d) = ' ';\n        if (*(char *)((int)input + 0x3e) == '@') {\n          *(char *)((int)input + 0x3e) = 0;\n          PTR_DAT_08000400();\n        }\n        else {\n          *(char *)((int)input + 0x3e) = 0;\n          PTR_DAT_08000402();\n        }\n      }\n      else {\n        (*input)[1] &= 0xfffff8ff;\n        input[0xc] = (uint32_t *)0x11;\n        *(char *)((int)input + 0x3e) = 0;\n        *(char *)((int)input + 0x3d) = ' ';\n        PTR_DAT_08000402();\n      }\n    }\n    else {\n      uint32_t *read_ptr = input[9];\n      input[9] = (uint32_t *)((int)read_ptr + 1);\n      (*input)[4] = (uint32_t)*(char *)read_ptr;\n      *(int16_t *)((int)input + 0x2a) -= 1;\n    }\n  }\n  return 0;\n}",
            "called": [
                "FUN_08002c4e",
                "FUN_08002db0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002efc",
            "calling": [
                "FUN_080033b8"
            ],
            "imported": false,
            "current_name": "process_input_08002efc"
        },
        "FUN_0800365c": {
            "renaming": {
                "FUN_0800365c": "reverse_count_0800365c",
                "param_1": "input_num",
                "local_4": "product"
            },
            "code": "void reverse_count_0800365c(int input_num) {\n  int product = input_num * ((unsigned long long)DAT_08003684 * (unsigned long long)*(uint *)PTR_DAT_08003680 >> 0x29);\n  while (product != 0) {\n    product--;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800365c",
            "calling": [
                "FUN_08003688"
            ],
            "imported": false,
            "current_name": "reverse_count_0800365c"
        },
        "FUN_080033b8": {
            "renaming": {
                "FUN_080033b8": "decode_input_080033b8",
                "param_1": "input_ptr",
                "iVar1": "input_value",
                "uVar2": "value_1",
                "uVar3": "value_2",
                "uVar4": "value_3",
                "input_char": "input_char"
            },
            "code": "void decode_input_080033b8(int *input_ptr) {\n  int input_value = *input_ptr;\n  uint value_1 = *(uint *)(input_value + 0x18);\n  uint value_2 = *(uint *)(input_value + 0x14);\n  uint value_3 = *(uint *)(input_value + 4);\n  char input_char = *(char *)((int)input_ptr + 0x3e);\n  if (input_char == '\\x10' || input_char == '@') {\n    if ((value_2 & 0x10001) == 0 || (value_3 & 0x200) == 0) {\n      if ((DAT_08003518 & value_2) == 0 || (value_3 & 0x200) == 0) {\n        if ((DAT_08003504 & value_2) != 0 && (value_3 & 0x200) != 0) {\n          decode_string(input_ptr);\n        }\n      }\n      else {\n        set_value_from_array_index(input_ptr);\n      }\n    }\n    else {\n      set_status(input_ptr);\n    }\n    if ((DAT_0800350c & value_1) == 0) {\n      if ((DAT_0800351c & value_2) != 0 && (value_3 & 0x400) != 0 && (DAT_08003514 & value_2) == 0) {\n        check_string(input_ptr);\n        return;\n      }\n      if ((DAT_08003514 & value_2) != 0 && (value_3 & 0x200) != 0) {\n        process_input(input_ptr);\n        return;\n      }\n    }\n    else {\n      if ((DAT_08003510 & value_2) != 0 && (value_3 & 0x400) != 0 && (DAT_08003514 & value_2) == 0) {\n        process_data(input_ptr);\n        return;\n      }\n      if ((DAT_08003514 & value_2) != 0 && (value_3 & 0x200) != 0) {\n        process_input(input_ptr);\n        return;\n      }\n    }\n  }\n  else {\n    if ((DAT_08003504 & value_2) != 0 && (value_3 & 0x200) != 0) {\n      process_input_08002cf2();\n      return;\n    }\n    if ((DAT_08003508 & value_2) != 0 && (value_3 & 0x200) != 0) {\n      process_data_and_set_bits(input_ptr);\n      return;\n    }\n    if ((DAT_0800350c & value_1) == 0) {\n      if ((DAT_0800351c & value_2) != 0 && (value_3 & 0x400) != 0 && (DAT_08003514 & value_2) == 0) {\n        handle_data(input_ptr);\n        return;\n      }\n      if ((DAT_08003514 & value_2) != 0 && (value_3 & 0x200) != 0) {\n        increment_pointer_if_short_not_zero(input_ptr);\n      }\n    }\n    else {\n      if ((DAT_08003510 & value_2) != 0 && (value_3 & 0x400) != 0 && (DAT_08003514 & value_2) == 0) {\n        decode(input_ptr);\n        return;\n      }\n      if ((DAT_08003514 & value_2) != 0 && (value_3 & 0x200) != 0) {\n        increment_value_at_pointer_if_not_zero(input_ptr);\n        return;\n      }\n    }\n  }\n  return;\n}",
            "called": [
                "FUN_08002ad8",
                "FUN_08002ab8",
                "FUN_08002db2",
                "FUN_08002c54",
                "FUN_08002f9c",
                "FUN_0800306c",
                "FUN_08002cf2",
                "FUN_08002ca6",
                "FUN_08002efc",
                "FUN_080028d2",
                "FUN_080032b4",
                "FUN_080028de",
                "FUN_08002848"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080033b8",
            "calling": [],
            "imported": false,
            "current_name": "decode_input_080033b8"
        },
        "FUN_080069e4": {
            "renaming": {
                "FUN_080069e4": "check_and_update_buffer_080069e4",
                "*param_1": "*output",
                "*param_2": "*buffer",
                "uVar1": "result",
                "uVar2": "buffer_flags",
                "iVar3": "buffer_info_ptr"
            },
            "code": "uint check_and_update_buffer_080069e4(undefined4 *output, undefined4 *buffer) {\n  uint uVar1;\n  ushort buffer_flags;\n  int buffer_info_ptr;\n  buffer_info_ptr = *(int *)PTR_PTR_DAT_08006ab0;\n  if ((buffer_info_ptr != 0) && (*(int *)(buffer_info_ptr + 0x18) == 0)) {\n    initialize_params_08006cb4(buffer_info_ptr);\n  }\n  if (buffer == (undefined4 *)PTR_DAT_08006ab4) {\n    buffer = *(undefined4 **)(buffer_info_ptr + 4);\n  }\n  else if (buffer == (undefined4 *)PTR_DAT_08006ab8) {\n    buffer = *(undefined4 **)(buffer_info_ptr + 8);\n  }\n  else if (buffer == (undefined4 *)PTR_DAT_08006abc) {\n    buffer = *(undefined4 **)(buffer_info_ptr + 0xc);\n  }\n  buffer_flags = *(ushort *)(buffer + 3);\n  uVar1 = (uint)buffer_flags;\n  if (-1 < (int)(uVar1 << 0x1c)) {\n    if (-1 < (int)(uVar1 << 0x1b)) {\n      *output = 9;\n      goto LAB_08006a14;\n    }\n    if ((int)(uVar1 << 0x1d) < 0) {\n      if ((undefined4 *)buffer[0xd] != (undefined4 *)0x0) {\n        if ((undefined4 *)buffer[0xd] != buffer + 0x11) {\n          insert_element_at_front_080061f0(output);\n        }\n        buffer[0xd] = 0;\n      }\n      *(ushort *)(buffer + 3) = *(ushort *)(buffer + 3) & 0xffdb;\n      buffer[1] = 0;\n      *buffer = buffer[4];\n    }\n    *(ushort *)(buffer + 3) = *(ushort *)(buffer + 3) | 8;\n  }\n  if ((buffer[4] == 0) && ((*(ushort *)(buffer + 3) & 0x280) != 0x200)) {\n    allocate_and_initialize_buffer_08006e10(output,buffer);\n  }\n  buffer_flags = *(ushort *)(buffer + 3);\n  uVar1 = buffer_flags & 1;\n  if ((buffer_flags & 1) == 0) {\n    if (-1 < (int)((uint)buffer_flags << 0x1e)) {\n      uVar1 = buffer[5];\n    }\n    buffer[2] = uVar1;\n  }\n  else {\n    buffer[2] = 0;\n    buffer[6] = -buffer[5];\n  }\n  if (buffer[4] == 0) {\n    buffer_flags = *(ushort *)(buffer + 3);\n    uVar1 = (int)(short)buffer_flags & 0x80;\n    if (uVar1 != 0) {\nLAB_08006a14:\n      *(ushort *)(buffer + 3) = buffer_flags | 0x40;\n      return 0xffffffff;\n    }\n  }\n  else {\n    uVar1 = 0;\n  }\n  return uVar1;\n}",
            "called": [
                "FUN_080061f0",
                "FUN_08006e10",
                "FUN_08006cb4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080069e4",
            "calling": [
                "FUN_08006344",
                "FUN_08006394"
            ],
            "imported": false,
            "current_name": "check_and_update_buffer_080069e4",
            "code_backup": "\nuint FUN_080069e4(undefined4 *param_1,undefined4 *param_2)\n\n{\n  uint uVar1;\n  ushort uVar2;\n  int iVar3;\n  \n  iVar3 = *(int *)PTR_PTR_DAT_08006ab0;\n  if ((iVar3 != 0) && (*(int *)(iVar3 + 0x18) == 0)) {\n    FUNC_08006cb4(iVar3);\n  }\n  if (param_2 == (undefined4 *)PTR_DAT_08006ab4) {\n    param_2 = *(undefined4 **)(iVar3 + 4);\n  }\n  else if (param_2 == (undefined4 *)PTR_DAT_08006ab8) {\n    param_2 = *(undefined4 **)(iVar3 + 8);\n  }\n  else if (param_2 == (undefined4 *)PTR_DAT_08006abc) {\n    param_2 = *(undefined4 **)(iVar3 + 0xc);\n  }\n  uVar2 = *(ushort *)(param_2 + 3);\n  uVar1 = (uint)uVar2;\n  if (-1 < (int)(uVar1 << 0x1c)) {\n    if (-1 < (int)(uVar1 << 0x1b)) {\n      *param_1 = 9;\n      goto LAB_08006a14;\n    }\n    if ((int)(uVar1 << 0x1d) < 0) {\n      if ((undefined4 *)param_2[0xd] != (undefined4 *)0x0) {\n        if ((undefined4 *)param_2[0xd] != param_2 + 0x11) {\n          insert_element_at_front_080061f0(param_1);\n        }\n        param_2[0xd] = 0;\n      }\n      *(ushort *)(param_2 + 3) = *(ushort *)(param_2 + 3) & 0xffdb;\n      param_2[1] = 0;\n      *param_2 = param_2[4];\n    }\n    *(ushort *)(param_2 + 3) = *(ushort *)(param_2 + 3) | 8;\n  }\n  if ((param_2[4] == 0) && ((*(ushort *)(param_2 + 3) & 0x280) != 0x200)) {\n    allocate_and_initialize_buffer_08006e10(param_1,param_2);\n  }\n  uVar2 = *(ushort *)(param_2 + 3);\n  uVar1 = uVar2 & 1;\n  if ((uVar2 & 1) == 0) {\n    if (-1 < (int)((uint)uVar2 << 0x1e)) {\n      uVar1 = param_2[5];\n    }\n    param_2[2] = uVar1;\n  }\n  else {\n    param_2[2] = 0;\n    param_2[6] = -param_2[5];\n  }\n  if (param_2[4] == 0) {\n    uVar2 = *(ushort *)(param_2 + 3);\n    uVar1 = (int)(short)uVar2 & 0x80;\n    if (uVar1 != 0) {\nLAB_08006a14:\n      *(ushort *)(param_2 + 3) = uVar2 | 0x40;\n      return 0xffffffff;\n    }\n  }\n  else {\n    uVar1 = 0;\n  }\n  return uVar1;\n}\n\n"
        },
        "FUN_08002580": {
            "renaming": {
                "FUN_08002580": "do_nothing_08002580"
            },
            "code": "\nvoid do_nothing_08002580(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002580",
            "calling": [
                "FUN_08002582"
            ],
            "imported": false,
            "current_name": "do_nothing_08002580"
        },
        "FUN_08004b9e": {
            "renaming": {
                "FUN_08004b9e": "calculate_and_do_nothing_08004b9e",
                "calculate_new_value_08001cac": "calculate_new_value",
                "do_nothing_08002582": "do_nothing_1",
                "do_nothing_08004b9c": "do_nothing_2"
            },
            "code": "void calculate_and_do_nothing_08004b9e(void)\n{\n  calculate_new_value();\n  do_nothing_1();\n  do_nothing_2();\n  return;\n}",
            "called": [
                "FUN_08004b9c",
                "FUN_08002582",
                "FUN_08001cac"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004b9e",
            "calling": [],
            "imported": false,
            "current_name": "calculate_and_do_nothing_08004b9e"
        },
        "FUN_08004b9c": {
            "renaming": {
                "FUN_08004b9c": "do_nothing_08004b9c"
            },
            "code": "\nvoid do_nothing_08004b9c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004b9c",
            "calling": [
                "FUN_08004b9e"
            ],
            "imported": false,
            "current_name": "do_nothing_08004b9c"
        },
        "FUN_08005730": {
            "renaming": {
                "FUN_08005730": "process_data_using_list_08005730",
                "param_1": "list_head",
                "param_2": "data",
                "param_3": "data_size",
                "param_4": "func_ptr_1",
                "param_5": "func_ptr_2",
                "process_data_with_list_080053d4": "process_data_with_list"
            },
            "code": "void process_data_using_list_08005730(void *list_head, void *data, size_t data_size, void *func_ptr_1, void *func_ptr_2) {\n  process_data_with_list(list_head, data, data_size, func_ptr_1, func_ptr_2);\n  return;\n}",
            "called": [
                "FUN_080053d4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005730",
            "calling": [
                "FUN_08006f5a"
            ],
            "imported": false,
            "current_name": "process_data_using_list_08005730"
        },
        "FUN_08002582": {
            "renaming": {
                "FUN_08002582": "do_nothing_08002582",
                "do_nothing_08002580": "do_nothing"
            },
            "code": "void do_nothing_08002582() {\n  do_nothing_08002582_08002580();\n  return;\n}",
            "called": [
                "FUN_08002580"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002582",
            "calling": [
                "FUN_08004b9e"
            ],
            "imported": false,
            "current_name": "do_nothing_08002582"
        },
        "FUN_08004884": {
            "renaming": {
                "FUN_08004884": "set_flag_08004884",
                "param_1": "flag",
                "DAT_08004914": "data_ptr",
                "DAT_08004918": "flag_0_result",
                "DAT_0800491c": "flag_1_result",
                "DAT_08004920": "flag_2_result",
                "DAT_08004924": "flag_3_result",
                "DAT_08004928": "flag_4_result"
            },
            "code": "uint32_t set_flag_08004884(uint32_t flag)\n{\n  uint32_t* DAT_08004914 = (uint32_t*)DAT_08004914;\n  switch(flag) {\n    case 0:\n      DAT_08004914[6] |= 0x4;\n      return DAT_08004918;\n    case 1:\n      DAT_08004914[6] |= 0x8;\n      return DAT_0800491c;\n    case 2:\n      DAT_08004914[6] |= 0x10;\n      return DAT_08004920;\n    case 3:\n      DAT_08004914[6] |= 0x20;\n      return DAT_08004924;\n    case 4:\n      DAT_08004914[6] |= 0x40;\n      return DAT_08004928;\n    default:\n      return 0;\n  }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004884",
            "calling": [
                "FUN_08004bb0",
                "FUN_08004974",
                "FUN_08004f4c"
            ],
            "imported": false,
            "current_name": "set_flag_08004884"
        },
        "FUN_08001be8": {
            "renaming": {
                "FUN_08001be8": "copy_data_and_reset_flags_08001be8",
                "iVar1": "offset",
                "puVar2": "ptr",
                "UNRECOVERED_JUMPTABLE": "jump_table",
                "update_flags_08004d44": "update_flags",
                "execute_functions_08006198": "execute_functions",
                "process_decoded_data_08000bcc_08005f6c": "process_decoded_data"
            },
            "code": "void copy_data_and_reset_flags_08001be8(void)\n{\n  int offset = 0;\n  undefined4 *ptr = (undefined4 *)PTR_DAT_08001c28;\n  while (PTR_DAT_08001c20 + offset < DAT_08001c24) {\n    *(undefined4 *)(PTR_DAT_08001c20 + offset) = *(undefined4 *)(DAT_08001c1c + offset);\n    offset += 4;\n  }\n  while (ptr < PTR_DAT_08001c2c) {\n    *ptr = 0;\n    ptr++;\n  }\n  update_flags();\n  execute_functions();\n  code *jump_table = (code *)0x8001c1a;\n  process_decoded_data_08000bcc_08005f6c();\n  (*jump_table)();\n  return;\n}",
            "called": [
                "FUN_08006198",
                "FUN_08004d44",
                "FUN_08005f6c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001be8",
            "calling": [],
            "imported": false,
            "current_name": "copy_data_and_reset_flags_08001be8"
        },
        "FUN_080061f0": {
            "renaming": {
                "FUN_080061f0": "insert_element_at_front_080061f0",
                "param_1": "list_head",
                "param_2": "element",
                "param_3": "list_size",
                "param_4": "error_code",
                "puVar1": "pointer_to_list_start",
                "extraout_r1": "new_node",
                "ppiVar2": "next_node",
                "ppiVar3": "previous_node",
                "piVar4": "list_head_of_node",
                "ppiVar5": "list_start",
                "ppiVar6": "current_node",
                "ppiVar7": "current_node"
            },
            "code": "void insert_element_at_front_080061f0(int *list_head, int element, int list_size, int *error_code) {\n  if (list_size == 0) {\n    return;\n  }\n  int **current_node = (int **)(list_size + -4);\n  if (*(int *)(list_size + -4) < 0) {\n    current_node = (int **)((int)current_node + *(int *)(list_size + -4));\n  }\n  do_nothing_08006eac();\n  int **list_start = *(int ***)PTR_DAT_08006284;\n  if (list_start == (int **)0x0) {\n    current_node[1] = (int *)0x0;\n    *(int ***)PTR_DAT_08006284 = current_node;\n    int **new_node = extraout_r1;\n    int **previous_node = (int **)PTR_DAT_08006284;\n  }\n  else if (current_node < list_start) {\n    int **next_node = (int **)*current_node;\n    int **previous_node = (int **)((int)current_node + (int)next_node);\n    if (list_start == previous_node) {\n      int *list_head_of_next_node = *list_start;\n      list_start = (int **)list_start[1];\n      previous_node = (int **)((int)list_head_of_next_node + (int)next_node);\n      *current_node = (int *)previous_node;\n    }\n    current_node[1] = (int *)list_start;\n    *(int ***)PTR_DAT_08006284 = current_node;\n  }\n  else {\n    int **previous_node = list_start;\n    int **next_node = list_start[1];\n    while (next_node != (int **)0x0 && next_node <= current_node) {\n      previous_node = next_node;\n      next_node = next_node[1];\n    }\n    int **list_head_of_previous_node = (int **)*previous_node;\n    if ((int **)((int)previous_node + (int)list_head_of_previous_node) == current_node) {\n      list_head_of_previous_node = (int **)((int)list_head_of_previous_node + (int)*current_node);\n      *previous_node = (int *)list_head_of_previous_node;\n      if (next_node == (int **)((int)previous_node + (int)list_head_of_previous_node)) {\n        int *list_head_of_next_node = *next_node;\n        next_node = (int **)next_node[1];\n        list_head_of_previous_node = (int **)((int)list_head_of_previous_node + (int)list_head_of_next_node);\n        *previous_node = (int *)list_head_of_previous_node;\n        previous_node[1] = (int *)next_node;\n      }\n    }\n    else if (current_node < (int **)((int)previous_node + (int)list_head_of_previous_node)) {\n      *error_code = 0xc;\n    }\n    else {\n      list_head_of_previous_node = (int **)((int)current_node + (int)*current_node);\n      if (next_node == list_head_of_previous_node) {\n        int *list_head_of_next_node = *next_node;\n        next_node = (int **)next_node[1];\n        list_head_of_previous_node = (int **)((int)list_head_of_next_node + (int)*current_node);\n        *current_node = (int *)list_head_of_previous_node;\n      }\n      current_node[1] = (int *)next_node;\n      previous_node[1] = (int *)current_node;\n    }\n  }\n  do_nothing_08006eae(error_code,previous_node,next_node,0);\n  return;\n}",
            "called": [
                "FUN_08006eac",
                "FUN_08006eae"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080061f0",
            "calling": [
                "FUN_080069e4",
                "FUN_08006ac0"
            ],
            "imported": false,
            "current_name": "insert_element_at_front_080061f0"
        },
        "FUN_08002348": {
            "renaming": {
                "FUN_08002348": "check_flag_and_update_08002348",
                "param_1": "flag_ptr",
                "iVar1": "update_result",
                "*(char *)(param_1 + 0x24)": "flag_value",
                "'\\x01'": "1",
                "2": "2",
                "*(undefined *)(param_1 + 0x24)": "flag_ptr_update",
                "check_and_update_flag_080020f0()": "check_and_update_flag",
                "*(uint *)(param_1 + 0x28)": "flag_ptr_value",
                "0xffffeefe": "flag_mask",
                "1": "flag_mask_value"
            },
            "code": "int check_flag_and_update_08002348(int flag_ptr)\n{\n  int flag_value = *(char *)(flag_ptr + 0x24);\n  if (flag_value == 1) {\n    return 2;\n  }\n  *(undefined *)(flag_ptr + 0x24) = 1;\n  int update_result = check_and_update_flag_080020f0();\n  if (update_result == 0) {\n    *(uint *)(flag_ptr + 0x28) = *(uint *)(flag_ptr + 0x28) & 0xffffeefe | 1;\n  }\n  *(undefined *)(flag_ptr + 0x24) = 0;\n  return update_result;\n}\n",
            "called": [
                "FUN_080020f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002348",
            "calling": [
                "FUN_08004a4c"
            ],
            "imported": false,
            "current_name": "check_flag_and_update_08002348"
        },
        "FUN_080060d4": {
            "renaming": {
                "FUN_080060d4": "process_input_and_wait_for_response_080060d4",
                "param_1": "ptr_dat_index",
                "iVar1": "bit_count"
            },
            "code": "void process_input_and_wait_for_response_080060d4() {\n  int bit_count;\n  int ptr_dat_index = *(int *)(param_1 + 8);\n  if (ptr_dat_index != 0) {\n    (**(code **)(param_1 + 0xc))();\n    return;\n  }\n  process_input_and_wait_for_response_080060d4();\n  bit_count = count_bits_set();\n  if (*(int *)(PTR_DAT_08006100 + bit_count * 0x14 + 0xc) != 0) {\n    process_input_and_wait_for_response_080060d4();\n  }\n  return;\n}",
            "called": [
                "FUN_08007090"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080060d4",
            "calling": [
                "FUN_080060e4"
            ],
            "imported": false,
            "current_name": "process_input_and_wait_for_response_080060d4"
        },
        "FUN_08005a68": {
            "renaming": {
                "FUN_08005a68": "process_data_and_wait_for_response_08005a68",
                "param_1": "data",
                "param_2": "size",
                "param_3": "response",
                "extraout_r1": "response_index",
                "bVar1": "combination_type",
                "iVar2": "flags",
                "pbVar3": "response_data",
                "unaff_r4": "unused_register_4",
                "unaff_r6": "unused_register_6",
                "UNRECOVERED_JUMPTABLE": "jump_table"
            },
            "code": "void process_data_and_wait_for_response_08005a68(int data, int size, int response, int timeout) {\n  uint combination_type = *(byte *)(data + 0x140) & 7;\n  uint flags = 0;\n  \n  if (combination_type == 4) {\n    flags = 7;\n  }\n  else if (combination_type == 6) {\n    flags = 8;\n  }\n  else if (combination_type == 2) {\n    flags = 6;\n  }\n  \n  if ((*(byte *)(data + 0x140) & 0x30) == 0x30) {\n    *(int *)(data + 0x128) = 0x600;\n    flags += 1;\n  }\n  else if ((*(byte *)(data + 0x140) & 0x20) == 0) {\n    *(int *)(data + 0x128) = 0;\n  }\n  else {\n    *(int *)(data + 0x128) = 0x400;\n    flags += 1;\n  }\n  \n  if ((*(byte *)(data + 0x140) & 8) == 0) {\n    *(int *)(data + 0x124) = 0;\n  }\n  else {\n    *(int *)(data + 0x124) = 0x2000;\n  }\n  \n  if (flags == 8) {\n    *(int *)(data + 0x120) = 0;\n  }\n  else if (flags == 9) {\n    *(int *)(data + 0x120) = 0x1000;\n  }\n  else {\n    flags = 0;\n  }\n  \n  if (flags != 0) {\n    FUNC_08004f4c(data + 0xd4);\n    process_combination(data + 0xd4,uRam08005b14);\n    return;\n  }\n  \n  code *UNRECOVERED_JUMPTABLE = (code *)0x8005b12;\n  int response_index = iRam08005b1c;\n  process_data_and_wait_for_response_08005a68_0800611c(uRam08005b20,299,iRam08005b1c,uRam08005b18);\n  byte *response_data = *(byte **)(extraout_r1 + response);\n  *(undefined *)(response_index + 0x1e) = unaff_r4;\n  *(undefined *)(*response_data + 0x1e) = 0;\n  \n  if (extraout_r1 < 0x3c) {\n    uRam0000012d = PTR_DAT_08005b38[extraout_r1];\n  }\n  else {\n    uRam0000012d = 0xff;\n  }\n  \n  (*UNRECOVERED_JUMPTABLE)();\n  return;\n}",
            "called": [
                "FUN_08005510",
                "FUN_08004f4c",
                "FUN_0800611c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005a68",
            "calling": [
                "FUN_08000bcc"
            ],
            "imported": false,
            "current_name": "process_data_and_wait_for_response_08005a68"
        },
        "FUN_08001814": {
            "renaming": {
                "FUN_08001814": "parse_input_string_08001814",
                "param_1": "output",
                "param_2": "input1",
                "param_3": "input2",
                "param_4": "input3",
                "param_5": "input4",
                "param_6": "input5",
                "param_7": "input6",
                "param_8": "input7",
                "param_9": "input8",
                "iVar1": "is_end_of_string1",
                "uVar2": "uVar2",
                "uVar3": "uVar3",
                "bVar4": "is_input9_not_1",
                "uVar5": "uVar5",
                "uVar6": "uVar6",
                "uVar7": "uVar7"
            },
            "code": "void parse_input_string_08001814(uint32_t *output, uint32_t input1, uint32_t input2, uint32_t input3, uint32_t input4, uint32_t input5, uint32_t input6, uint32_t input7, uint32_t input8, int input9)\n{\n  bool is_end_of_string1 = is_end_of_string(input3, input4);\n  bool is_end_of_string2 = is_end_of_string(input5, input6);\n  bool is_end_of_string3 = is_end_of_string(input7, input8);\n  if(!is_end_of_string1 && !is_end_of_string2 && !is_end_of_string3)\n  {\n    output[13] = input9;\n    bool is_input9_not_1 = input9 != 1;\n    uint8_t uVar3 = is_input9_not_1 ? 0 : 1;\n    *(uint8_t *)((int)output + 0x71) = uVar3;\n    output[0] = input3;\n    output[1] = input4;\n    output[2] = input5;\n    output[3] = input6;\n    output[4] = input7;\n    output[5] = input8;\n    uint64_t uVar5 = convert_uint64_to_uint32_with_shift(output[22]);\n    uVar5 = FUNC_0800074c((int)uVar5, (int)(uVar5 >> 0x20), 0, DAT_080018f4);\n    uint32_t uVar2 = (uint32_t)(uVar5 >> 0x20);\n    output[6] = input3;\n    output[7] = input4;\n    uint64_t uVar6 = FUNC_080004f8(input5, input6, (int)uVar5, uVar2);\n    *(uint64_t *)(output + 8) = uVar6;\n    uint64_t uVar7 = FUNC_0800074c(input7, input8, (int)uVar5, uVar2);\n    *(uint64_t *)(output + 10) = uVar7;\n    if(output[12] == 1)\n    {\n      uVar6 = FUNC_08000190(0, 0, input3, input4);\n      *(uint64_t *)(output + 6) = uVar6;\n      uVar6 = FUNC_08000190(0, 0, (int)uVar6, (int)(uVar6 >> 0x20));\n      *(uint64_t *)(output + 8) = uVar6;\n      uVar7 = FUNC_08000190(0, 0, (int)uVar7, (int)(uVar7 >> 0x20));\n      *(uint64_t *)(output + 10) = uVar7;\n    }\n  }\n  return;\n}",
            "called": [
                "FUN_0800074c",
                "FUN_08000190",
                "FUN_0800040c",
                "FUN_080004f8",
                "FUN_080009dc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001814",
            "calling": [
                "FUN_080018f8",
                "FUN_08001ab0"
            ],
            "imported": false,
            "current_name": "parse_input_string_08001814"
        },
        "FUN_08000aec": {
            "renaming": {
                "FUN_08000aec": "handle_interrupt_08000aec",
                "param_1": "interrupt_num",
                "param_2": "param_1",
                "param_3": "param_2",
                "param_4": "param_4",
                "uVar1": "result"
            },
            "code": "int handle_interrupt_08000aec(int interrupt_num, int param_1, int param_2, int param_3, int param_4) {\n  int result = 0;\n  if (*(int *)PTR_DAT_08000b04 != 0) {\n    return result;\n  }\n  result = trigger_software_interrupt_08000ae8(interrupt_num, param_1, param_2, param_3, param_4);\n  return result;\n}",
            "called": [
                "FUN_08000ae8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000aec",
            "calling": [
                "FUN_08000bcc"
            ],
            "imported": false,
            "current_name": "handle_interrupt_08000aec"
        },
        "FUN_0800572c": {
            "renaming": {
                "FUN_0800572c": "return_zero_0800572c"
            },
            "code": "int return_zero_0800572c(void) {\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800572c",
            "calling": [
                "FUN_0800706c"
            ],
            "imported": false,
            "current_name": "return_zero_0800572c"
        },
        "FUN_08004e12": {
            "renaming": {
                "FUN_08004e12": "execute_function_if_not_null_08004e12",
                "iVar1": "input_subtracted_from_four",
                "subtract_four_from_input_08004df4": "subtract_four_from_input"
            },
            "code": "void execute_function_if_not_null_08004e12(void)\n{\n  int input_subtracted_from_four = subtract_four_from_input();\n  if (*(code **)(input_subtracted_from_four + 0x48) != (code *)0x0) {\n    (**(code **)(input_subtracted_from_four + 0x48))();\n  }\n  return;\n}",
            "called": [
                "FUN_08004df4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004e12",
            "calling": [
                "FUN_08003f18"
            ],
            "imported": false,
            "current_name": "execute_function_if_not_null_08004e12"
        },
        "FUN_08000a58": {
            "renaming": {
                "FUN_08000a58": "calculate_value_08000a58",
                "param_1": "input1",
                "param_2": "input2",
                "uVar1": "result1",
                "iVar2": "temp1",
                "uVar3": "result2"
            },
            "code": "uint calculate_value_08000a58(uint input1, uint input2) {\n  uint result1;\n  int temp1;\n  uint result2;\n  \n  temp1 = input2 * 2 + 0x200000;\n  if (input2 * 2 < 0xffe00000) {\n    if (-1 < temp1) {\n      return 0;\n    }\n    result1 = temp1 >> 0x15;\n    result2 = -result1 - 0x3e1;\n    if (result1 < 0xfffffc20 && result2 != 0) {\n      result1 = (input2 << 0xb | 0x80000000 | input1 >> 0x15) >> (result2 & 0xff);\n      if ((input2 & 0x80000000) != 0) {\n        result1 = -result1;\n      }\n      return result1;\n    }\n  }\n  else if ((input1 | input2 << 0xc) != 0) {\n    return 0;\n  }\n  input2 = input2 & 0x80000000;\n  if (input2 == 0) {\n    input2 = 0x7fffffff;\n  }\n  return input2;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000a58",
            "calling": [
                "FUN_08005da8"
            ],
            "imported": false,
            "current_name": "calculate_value_08000a58"
        },
        "FUN_08001b48": {
            "renaming": {
                "FUN_08001b48": "initialize_and_process_data_08001b48",
                "local_54": "local_flags",
                "local_4c": "local_flags[1]",
                "local_44": "local_parameters[0]",
                "local_40": "local_parameters[1]",
                "local_3c": "local_parameters[2]",
                "local_38": "local_parameters[3]",
                "local_34": "local_parameters[4]",
                "local_30": "local_values",
                "local_20": "local_values[1]",
                "local_1c": "local_parameters[2]",
                "local_14": "local_values[0]",
                "local_10": "local_parameters[4]",
                "local_c": "local_parameters[3]",
                "PTR_s__home_bo__arduino15_packages_STM_08001be4": "s__home_bo__arduino15_packages_STM"
            },
            "code": "void initialize_and_process_data_08001b48(void)\n{\n    int result;\n    uint value;\n    uint local_values[2] = {2, 0};\n    uint local_parameters[5] = {0xf, 2, 0, 0x400, 0};\n    uint local_flags[2] = {2, 0x8000};\n    result = set_values_from_parameters(local_parameters);\n    if (result != 0) {\n        wait_forever(\"PTR_s__home_bo__arduino15_packages_STM_08001be4\", 0x95);\n    }\n    result = set_flags(local_flags);\n    if (result != 0) {\n        wait_forever(\"PTR_s__home_bo__arduino15_packages_STM_08001be4\", 0x9c);\n    }\n    value = get_value_from_pointer();\n    check_parameter_and_set_values(DAT_08001be0 * value >> 0x26);\n    update_flag(4);\n    process_data(-1, 0);\n}\n",
            "called": [
                "FUN_08002560",
                "FUN_08003c90",
                "FUN_08003688",
                "FUN_08002494",
                "FUN_08004d40",
                "FUN_08003ad4",
                "FUN_08003c44",
                "FUN_08002514"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001b48",
            "calling": [
                "FUN_08004c52"
            ],
            "imported": false,
            "current_name": "initialize_and_process_data_08001b48"
        },
        "FUN_08004092": {
            "renaming": {
                "FUN_08004092": "update_bit_in_uint_array_08004092",
                "param_1": "array_ptr",
                "param_2": "bit_index",
                "param_3": "bit_value",
                "PTR_": "",
                "DAT_": "",
                "uint": "unsigned int",
                "mask": "bit_mask",
                "array": "uint_array"
            },
            "code": "void update_bit_in_uint_array_08004092(int array_ptr, uint bit_index, int bit_value){\n\tuint* array = (uint*) (array_ptr + 0x20);\n\tuint mask = ~(1 << (bit_index & 0xff));\n\t*array = (*array & mask) | (bit_value << (bit_index & 0xff));\n\treturn;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004092",
            "calling": [
                "FUN_080040b0"
            ],
            "imported": false,
            "current_name": "update_bit_in_uint_array_08004092"
        },
        "FUN_08005cd4": {
            "renaming": {
                "FUN_08005cd4": "calculate_string_length_and_execute_function_08005cd4",
                "param_1": "pointer_param",
                "iVar1": "string_length",
                "iVar2": "function_result",
                "get_length_of_string_08005c96": "get_length_of_string",
                "execute_function_on_pointer_08005cc0": "execute_function_on_pointer"
            },
            "code": "int calculate_string_length_and_execute_function_08005cd4(int* pointer_param){\n  int string_length = get_length_of_string();\n  int function_result = execute_function_on_pointer(pointer_param);\n  return function_result + string_length;\n}",
            "called": [
                "FUN_08005c96",
                "FUN_08005cc0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005cd4",
            "calling": [
                "FUN_08000cd0"
            ],
            "imported": false,
            "current_name": "calculate_string_length_and_execute_function_08005cd4"
        },
        "FUN_08005bb0": {
            "renaming": {
                "FUN_08005bb0": "initialize_structure_08005bb0",
                "param_1": "flag",
                "param_2": "value",
                "param_3": "param_3",
                "param_4": "param_4"
            },
            "code": "void initialize_structure_08005bb0(int flag, int value, int param_3, int max_value, int param_4)\n{\n    if (flag != 1) {\n        return;\n    }\n    if (value == max_value) {\n        initialize_structure_08005bb0_08005b54(PTR_DAT_08005bd0, DAT_08005bcc, param_3, max_value, param_4);\n    }\n    return;\n}",
            "called": [
                "FUN_08005b54"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005bb0",
            "calling": [],
            "imported": false,
            "current_name": "initialize_structure_08005bb0"
        },
        "FUN_080014ba": {
            "renaming": {
                "FUN_080014ba": "decode_and_print_data_080014ba",
                "param_1": "data_ptr",
                "param_2": "data_length",
                "param_3": "is_encoded",
                "param_4": "is_compressed",
                "param_5": "data_type",
                "param_6": "",
                "param_7": "",
                "param_8": "",
                "param_9": "",
                "param_10": "",
                "param_11": "",
                "param_12": "",
                "param_13": ""
            },
            "code": "void decode_and_print_data_080014ba(int data_ptr, int data_length, int is_encoded, int is_compressed, int data_type) {\n    *(undefined *)(data_ptr + 8) = data_length;\n    *(char *)(data_ptr + 9) = (char)data_type;\n    *(undefined *)(data_ptr + 10) = is_encoded;\n    *(undefined *)(data_ptr + 0xb) = is_compressed;\n    *(undefined *)(data_ptr + 0xc) = 0;\n    *(undefined *)(data_ptr + 0xd) = 0;\n    *(undefined *)(data_ptr + 0xe) = 0;\n    *(undefined *)(data_ptr + 0xf) = 0;\n    *(undefined *)(data_ptr + 0x10) = 0;\n    *(undefined *)(data_ptr + 0x11) = 0;\n    *(undefined *)(data_ptr + 0x12) = 0;\n    if (data_type == 0) {\n        *(undefined *)(data_ptr + 0x13) = 0x10;\n    }\n    else {\n        *(undefined *)(data_ptr + 0x13) = 0;\n    }\n    decode_and_print_data_080014ba_080013a4(data_ptr, 0x10, 1, 0, data_type);\n    return;\n}",
            "called": [
                "FUN_080013a4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080014ba",
            "calling": [
                "FUN_08001510"
            ],
            "imported": false,
            "current_name": "decode_and_print_data_080014ba"
        },
        "FUN_08003c90": {
            "renaming": {
                "FUN_08003c90": "set_flags_08003c90",
                "param_1": "flags",
                "puVar1": "ptr",
                "iVar2": "ptr_value",
                "iVar3": "ptr_value_2",
                "uVar4": "mask",
                "bVar5": "is_bit_set"
            },
            "code": "int set_flags_08003c90(uint *flags)\n{\n  bool is_flag_set = (*flags & 1) != 0;\n  if (is_flag_set) {\n    bool is_bit_set = (*(uint *)(PTR_DAT_08003d98 + 0x1c) & 0x10000000) == 0;\n    if (is_bit_set) {\n      *(uint *)(PTR_DAT_08003d98 + 0x1c) |= 0x10000000;\n    }\n    if ((*PTR_DAT_08003d9c & 0x100) == 0) {\n      *PTR_DAT_08003d9c |= 0x100;\n      int first_value = get_value_from_pointer_08001cc4();\n      while ((*PTR_DAT_08003d9c & 0x100) == 0) {\n        int second_value = get_value_from_pointer_08001cc4();\n        if (100 < (uint)(second_value - first_value)) {\n          return 3;\n        }\n      }\n    }\n    uint *ptr = PTR_DAT_08003da0;\n    int ptr_value = PTR_DAT_08003d98;\n    uint uVar4 = *(uint *)(PTR_DAT_08003d98 + 0x20) & 0x300;\n    if ((uVar4 != 0) && (uVar4 != (flags[1] & 0x300))) {\n      uVar4 = *(uint *)(PTR_DAT_08003d98 + 0x20);\n      *ptr = 1;\n      *ptr = 0;\n      *(uint *)(ptr_value + 0x20) = uVar4 & 0xfffffcff;\n      if ((uVar4 & 1) != 0) {\n        int first_value = get_value_from_pointer_08001cc4();\n        while ((*(uint *)(PTR_DAT_08003d98 + 0x20) & 2) == 0) {\n          int second_value = get_value_from_pointer_08001cc4();\n          if (5000 < (uint)(second_value - first_value)) {\n            return 3;\n          }\n        }\n      }\n    }\n    int ptr_value_2 = PTR_DAT_08003d98;\n    *(uint *)(PTR_DAT_08003d98 + 0x20) = *(uint *)(PTR_DAT_08003d98 + 0x20) & 0xfffffcff | flags[1];\n    if (is_bit_set) {\n      *(uint *)(ptr_value_2 + 0x1c) &= 0xefffffff;\n    }\n  }\n  if ((*flags & 2) != 0) {\n    *(uint *)(PTR_DAT_08003d98 + 4) &= 0xffff3fff | flags[2];\n  }\n  if ((*flags & 0x10) != 0) {\n    *(uint *)(PTR_DAT_08003d98 + 4) &= 0xffbfffff | flags[3];\n  }\n  return 0;\n}",
            "called": [
                "FUN_08001cc4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003c90",
            "calling": [
                "FUN_08001b48"
            ],
            "imported": false,
            "current_name": "set_flags_08003c90"
        },
        "FUN_08002514": {
            "renaming": {
                "FUN_08002514": "check_param_and_set_values_08002514",
                "param_1": "param",
                "puVar1": "ptr"
            },
            "code": "int check_param_and_set_values_08002514(unsigned int param)\n{\n  unsigned int* ptr = DAT_08002538;\n  if (param - 1U < 0x1000000)\n  {\n    ptr[1] = param - 1U;\n    *(unsigned char*)(DAT_0800253c + 0x23) = 0xf0;\n    ptr[2] = 0;\n    *ptr = 7;\n    return 0;\n  }\n  return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002514",
            "calling": [
                "FUN_08001b48",
                "FUN_08001c3c"
            ],
            "imported": false,
            "current_name": "check_param_and_set_values_08002514"
        },
        "FUN_08005c1c": {
            "renaming": {
                "FUN_08005c1c": "set_ptr_value_08005c1c",
                "param_1": "ptr",
                "param_2": "value_1",
                "param_3": "value_2",
                "param_4": "value_3",
                "param_5": "value_4"
            },
            "code": "void set_ptr_value_08005c1c(undefined4 *ptr, undefined value_1, undefined value_2, undefined value_3, undefined value_4){\n  *ptr = PTR_PTR_LAB_08005be2_1_08005c34;\n  *(undefined *)(ptr + 1) = value_1;\n  *(undefined *)((int)ptr + 5) = value_2;\n  *(undefined *)((int)ptr + 6) = value_3;\n  *(undefined *)((int)ptr + 7) = value_4;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005c1c",
            "calling": [
                "FUN_08005c38"
            ],
            "imported": false,
            "current_name": "set_ptr_value_08005c1c"
        },
        "FUN_08006dc8": {
            "renaming": {
                "FUN_08006dc8": "get_permissions_08006dc8",
                "param_1": "base_address",
                "param_2": "size",
                "param_3": "permissions",
                "param_4": "is_executable",
                "iVar1": "result",
                "uVar2": "page_type",
                "auStack_4c": "page_protection",
                "local_48": "unused_variable"
            },
            "code": "int get_permissions_08006dc8(uint32_t base_address, int16_t size, uint32_t *permissions, uint32_t *is_executable)\n{\n  int result;\n  uint32_t page_protection;\n  uint32_t page_type;\n\n  if (size < 0 || (result = set_memory_permissions(base_address, size, &page_protection)) < 0) {\n    *is_executable = 0;\n    if ((int32_t)(*(uint16_t *)(permissions + 0xc)) << 0x18 < 0) {\n      page_type = 0x40;\n      goto LAB_08006e08;\n    }\n  }\n  else {\n    *is_executable = (uint32_t)((page_protection & 0xf000) == 0x2000);\n  }\n  page_type = 0x400;\n\nLAB_08006e08:\n  *permissions = page_type;\n  return 0;\n}",
            "called": [
                "FUN_08007004"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006dc8",
            "calling": [
                "FUN_08006e10"
            ],
            "imported": false,
            "current_name": "get_permissions_08006dc8"
        },
        "FUN_0800412c": {
            "renaming": {
                "FUN_0800412c": "update_bits_and_check_0800412c",
                "param_1": "bits",
                "param_2": "bit_value",
                "puVar1": "bit_array"
            },
            "code": "uint32_t update_bits_and_check_0800412c(uint32_t **bits, uint32_t bit_value)\n{\n  uint32_t *bit_array = *bits;\n  update_bits_at_offset_08004110(bit_array, bit_value, 0);\n  if (((bit_array[8] & 0x1111) == 0) && ((bit_array[8] & 0x444) == 0)) {\n    bit_array[0x11] &= 0xffff7fff;\n  }\n  if (((bit_array[8] & 0x1111) == 0) && ((bit_array[8] & 0x444) == 0)) {\n    *bit_array &= 0xfffffffe;\n  }\n  return 0;\n}",
            "called": [
                "FUN_08004110"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800412c",
            "calling": [
                "FUN_08004b3c"
            ],
            "imported": false,
            "current_name": "update_bits_and_check_0800412c"
        },
        "FUN_08007090": {
            "renaming": {
                "FUN_08007090": "process_input_and_wait_for_response_08007090",
                "UNRECOVERED_JUMPTABLE": "jumptable"
            },
            "code": "void process_input_and_wait_for_response_08007090()\n{\n  code *jumptable = process_input_and_wait_for_response_08007090;\n  if (-1 < *(int *)PTR_DAT_0800712c << 0x1f) {\n    *(undefined4 *)PTR_DAT_0800712c = 1;\n  }\n  if (-1 < *(int *)PTR_DAT_08007130 << 0x1f) {\n    *(undefined4 *)PTR_DAT_08007130 = 1;\n  }\n  if (-1 < *(int *)PTR_DAT_08007134 << 0x1f) {\n    *(undefined4 *)PTR_DAT_08007134 = 1;\n  }\n  if (-1 < *(int *)PTR_DAT_08007138 << 0x1f) {\n    *(undefined4 *)PTR_DAT_08007138 = 1;\n  }\n  if (-1 < *(int *)PTR_DAT_0800713c << 0x1f) {\n    *(undefined4 *)PTR_DAT_0800713c = 1;\n  }\n  if (-1 < *(int *)PTR_DAT_08007140 << 0x1f) {\n    *(undefined4 *)PTR_DAT_08007140 = 1;\n  }\n  if (-1 < *(int *)PTR_DAT_08007144 << 0x1f) {\n    *(undefined4 *)PTR_DAT_08007144 = 1;\n  }\n  if (-1 < *(int *)PTR_DAT_08007148 << 0x1f) {\n    *(undefined4 *)PTR_DAT_08007148 = 1;\n  }\n  if (-1 < *(int *)PTR_DAT_0800714c << 0x1f) {\n    *(undefined4 *)PTR_DAT_0800714c = 1;\n  }\n  if (-1 < *(int *)PTR_DAT_08007150 << 0x1f) {\n    *(undefined4 *)PTR_DAT_08007150 = 1;\n  }\n  if (-1 < *(int *)PTR_DAT_08007154 << 0x1f) {\n    *(undefined4 *)PTR_DAT_08007154 = 1;\n  }\n  if (-1 < *(int *)PTR_DAT_08007158 << 0x1f) {\n    *(undefined4 *)PTR_DAT_08007158 = 1;\n  }\n  (*jumptable)();\n  return;\n}",
            "called": [
                "FUN_08006ac0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007090",
            "calling": [
                "FUN_080060d4"
            ],
            "imported": false,
            "current_name": "process_input_and_wait_for_response_08007090"
        },
        "FUN_0800492c": {
            "renaming": {
                "FUN_0800492c": "find_value_index_0800492c",
                "param_1": "search_value",
                "param_2": "data_array",
                "param_3": "array_length",
                "param_4": "start_index",
                "<iVar1>": "value_index",
                "<uVar2>": "shifted_value"
            },
            "code": "uint find_value_index_0800492c(uint search_value, uint* data_array, uint array_length, uint start_index, uint end_index)\n{\n    int value_index = find_value_or_negative_one(search_value, data_array, array_length, start_index, end_index);\n    uint shifted_value = (uint)(value_index << 12) >> 27;\n    if (shifted_value > 0x10) {\n        shifted_value = 0;\n    }\n    return shifted_value;\n}",
            "called": [
                "FUN_08004cce"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800492c",
            "calling": [
                "FUN_08004a4c"
            ],
            "imported": false,
            "current_name": "find_value_index_0800492c"
        },
        "FUN_0800480a": {
            "renaming": {
                "FUN_0800480a": "set_bit_0800480a",
                "param_1": "bit_index",
                "param_2": "array",
                "uVar1": "index",
                "PTR_": "",
                "DAT_": "",
                "mask": "mask",
                "*(uint *)(param_2 + uVar1 * 4)": "*ptr",
                "1 << (param_1 & 0xf)": "mask"
            },
            "code": "void set_bit_0800480a(uint bit_index, int* array){\n  uint index = (bit_index << 0x18) >> 0x1c;\n  uint* ptr = (uint*)(array + index * 4);\n  uint mask = 1 << (bit_index & 0xf);\n  *ptr |= mask;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800480a",
            "calling": [
                "FUN_080057b4"
            ],
            "imported": false,
            "current_name": "set_bit_0800480a"
        },
        "FUN_080015f8": {
            "renaming": {
                "FUN_080015f8": "decode_080015f8",
                "param_1": "decoded_bits",
                "param_2": "operation_flag",
                "param_3": "param_3",
                "param_4": "param_4",
                "uVar1": "bits",
                "uVar2": "converted_bits",
                "uVar3": "result",
                "DAT_0800169c": "upper_bits",
                "DAT_08001698": "lower_bits",
                "FUNC_08000194": "perform_operations",
                "FUNC_080004f8": "convert_to_uint32_with_shift",
                "FUNC_0800074c": "reverse_bits",
                "DAT_080016a0": "param_a",
                "DAT_080016a4": "param_b",
                "DAT_080016a8": "param_c",
                "DAT_080016ac": "param_d",
                "DAT_080016b0": "param_e",
                "DAT_0800168c": "const_a",
                "DAT_08001688": "const_b",
                "DAT_08001694": "const_c",
                "DAT_08001690": "const_d"
            },
            "code": "uint32_t decode_080015f8();\nuint32_t convert_to_uint32_with_shift(uint32_t value);\nuint32_t reverse_bits(uint32_t value);\nuint32_t perform_operations(uint32_t value);\n\nuint64_t decode_080015f8(uint32_t param_1, int param_2, uint32_t param_3, uint32_t param_4)\n{\n  uint32_t decode_080015f8d_bits = decode_080015f8();\n  uint64_t result = ((uint64_t)DAT_0800169c << 32) | DAT_08001698;\n  if ((decode_080015f8d_bits & 0x10000) == 0) {\n    uint32_t bits = decode_080015f8d_bits >> 0x12;\n    uint32_t converted_bits = convert_to_uint32_with_shift(bits & 0x1fff);\n    if ((bits & 0x2000) != 0) {\n      uint32_t reversed_bits = reverse_bits(~bits & 0x1fff);\n      uint64_t operation_result = perform_operations(reversed_bits);\n      result = (operation_result & 0xffffffff) | (((uint32_t)(operation_result >> 0x20) + 0x80000000) << 32);\n    }\n    uint32_t operation_result = perform_operations(converted_bits);\n    if (param_2 == 1) {\n      operation_result = perform_operations(operation_result);\n      operation_result = perform_operations(operation_result);\n      operation_result = perform_operations(operation_result);\n      result = decode_080015f8(operation_result, 0, 0, 0);\n      return result;\n    }\n  }\n  else {\n    uint32_t bits = decode_080015f8d_bits & 7;\n    if (bits == 2) {\n      result = ((uint64_t)DAT_0800168c << 32) | DAT_08001688;\n      return result;\n    }\n    if (bits == 4) {\n      result = ((uint64_t)DAT_08001694 << 32) | DAT_08001690;\n      return result;\n    }\n    if (bits == 1) {\n      return 0;\n    }\n  }\n  return result;\n}\n",
            "called": [
                "FUN_0800074c",
                "FUN_080015b2",
                "FUN_0800040c",
                "FUN_080004f8",
                "FUN_08000194"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080015f8",
            "calling": [
                "FUN_08000cd0"
            ],
            "imported": false,
            "current_name": "decode_080015f8"
        },
        "FUN_08005c38": {
            "renaming": {
                "FUN_08005c38": "set_ptr_value_to_zero_if_params_are_valid_08005c38",
                "param_1": "first_param",
                "param_2": "second_param",
                "set_ptr_value_08005c1c": "set_pointer_to_zero",
                "PTR_DAT_08005c60": "PTR_DAT_08005c60"
            },
            "code": "void set_ptr_value_to_zero_if_params_are_valid_08005c38(int first_param, int second_param) {\n    if ((first_param == 1) && (second_param == 0xffff)) {\n        set_pointer_to_zero(PTR_DAT_08005c60,0,0,0,0);\n        return;\n    }\n    return;\n}",
            "called": [
                "FUN_08005c1c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005c38",
            "calling": [],
            "imported": false,
            "current_name": "set_ptr_value_to_zero_if_params_are_valid_08005c38"
        },
        "FUN_08005f8c": {
            "renaming": {
                "FUN_08005f8c": "count_bits_set_08005f8c",
                "param_1": "number",
                "cVar1": "bits_set"
            },
            "code": "char count_bits_set_08005f8c(uint number) {\n  char bits_set = 0;\n  while (number != 1) {\n    bits_set++;\n    number = number >> 1;\n  }\n  return bits_set;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005f8c",
            "calling": [
                "FUN_080060e4"
            ],
            "imported": false,
            "current_name": "count_bits_set_08005f8c"
        },
        "FUN_08006f5a": {
            "renaming": {
                "FUN_08006f5a": "process_data_08006f5a",
                "param_1": "result",
                "param_2": "data_address",
                "param_3": "arg1",
                "param_4": "arg2",
                "sVar1": "data_value",
                "puVar2": "PTR_DAT_08006fe0",
                "iVar3": "list_result",
                "unaff_r4": "unused_arg",
                "unaff_r5": "unused_arg",
                "in_lr": "unused_arg",
                "zero_return_function_08007048": "zero_return_function",
                "process_data_using_list_08005730": "process_data_using_list"
            },
            "code": "void process_data_08006f5a(int *result, int data_address, int arg1, int arg2) {\n  short data_value = *(short *)(data_address + 0xe);\n  *(ushort *)(data_address + 0xc) &= 0xefff;\n  if ((int)((uint)*(ushort *)(data_address + 0xc) << 0x17) < 0) {\n    zero_return_function(result, data_value, 0, 2);\n  }\n  else {\n    int list_result = process_data_08006f5a_using_list(data_value, arg1, arg2, arg2, arg2, 0, 0, 0);\n    if ((list_result == -1) && (*(int *)PTR_DAT_08006fe0 != 0)) {\n      *result = *(int *)PTR_DAT_08006fe0;\n    }\n  }\n}",
            "called": [
                "FUN_08007048",
                "FUN_08005730"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006f5a",
            "calling": [],
            "imported": false,
            "current_name": "process_data_08006f5a"
        },
        "FUN_08000b08": {
            "renaming": {
                "FUN_08000b08": "decode_and_process_data_08000b08",
                "param_1": "input_1",
                "param_2": "input_2",
                "PTR_DAT_08000b9c": "PTR_CONFIG1",
                "PTR_DAT_08000b98": "PTR_CONFIG2",
                "PTR_DAT_08000b94": "PTR_CONFIG3",
                "PTR_DAT_08000b90": "PTR_CONFIG4",
                "*(undefined4 *)PTR_DAT_08000b8c": "PARAM1",
                "*(undefined4 *)(PTR_DAT_08000b8c + 4)": "PARAM2",
                "*(undefined4 *)PTR_DAT_08000b88": "PARAM3",
                "*(undefined4 *)(PTR_DAT_08000b88 + 4)": "PARAM4",
                "*(undefined4 *)PTR_DAT_08000b84": "PARAM5",
                "*(undefined4 *)(PTR_DAT_08000b84 + 4)": "PARAM6",
                "PTR_DAT_08000bb8": "PTR_OUTPUT",
                "*PTR_DAT_08000ba0": "*PTR_DATA1",
                "*PTR_DAT_08000ba4": "*PTR_DATA2",
                "*PTR_DAT_08000ba8": "*PTR_DATA3",
                "*PTR_DAT_08000bac": "*PTR_DATA4",
                "*PTR_DAT_08000bb0": "*PTR_DATA5",
                "*PTR_DAT_08000bb4": "*PTR_DATA6",
                "PTR_DAT_08000bc8": "PTR_INPUT",
                "*PTR_DAT_08000bc4": "*PTR_DATA7",
                "*PTR_DAT_08000bc0": "*PTR_DATA8",
                "*PTR_DAT_08000bbc": "*PTR_DATA9"
            },
            "code": "void decode_and_process_data_08000b08(int input_1, int input_2) {\n  if ((input_1 == 1) && (input_2 == 0xffff)) {\n    update_param_values(PTR_DAT_08000b9c, PTR_DAT_08000b98, PTR_DAT_08000b94, PTR_DAT_08000b90, *(undefined4 *)PTR_DAT_08000b8c, *(undefined4 *)(PTR_DAT_08000b8c + 4), *(undefined4 *)PTR_DAT_08000b88, *(undefined4 *)(PTR_DAT_08000b88 + 4), *(undefined4 *)PTR_DAT_08000b84, *(undefined4 *)(PTR_DAT_08000b84 + 4), 0);\n    print_decoded_data(PTR_DAT_08000bb8, *PTR_DAT_08000ba0, *PTR_DAT_08000ba4, *PTR_DAT_08000ba8, *PTR_DAT_08000bac, *PTR_DAT_08000bb0, *PTR_DAT_08000bb4);\n    decode_and_process_data_08000b08(PTR_DAT_08000bc8, *PTR_DAT_08000bc4, *PTR_DAT_08000bc0, *PTR_DAT_08000bbc);\n    return;\n  }\n  return;\n}",
            "called": [
                "FUN_0800157c",
                "FUN_08001510",
                "FUN_08001b18"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000b08",
            "calling": [],
            "imported": false,
            "current_name": "decode_and_process_data_08000b08"
        },
        "FUN_08006cb4": {
            "renaming": {
                "FUN_08006cb4": "initialize_params_08006cb4",
                "param_1": "param",
                "uVar1": "buffer",
                "iVar2": "iVar",
                "bVar3": "is_param_1_equal_to_iVar"
            },
            "code": "void initialize_params_08006cb4(int param_1)\n{\n    if (*(int *)(param_1 + 0x18) == 0) {\n        *(undefined4 *)(param_1 + 0x48) = 0;\n        *(undefined4 *)(param_1 + 0x4c) = 0;\n        *(undefined4 *)(param_1 + 0x50) = 0;\n        int iVar = *(int *)PTR_PTR_DAT_08006d0c;\n        *(undefined **)(param_1 + 0x28) = PTR_LAB_08006c34_1_08006d10;\n        bool is_param_1_equal_to_iVar = param_1 == iVar;\n        if (is_param_1_equal_to_iVar) {\n            iVar = 1;\n        }\n        if (is_param_1_equal_to_iVar) {\n            *(int *)(param_1 + 0x18) = iVar;\n        }\n        undefined4 buffer1 = allocate_memory_buffer_08006d14();\n        *(undefined4 *)(param_1 + 4) = buffer1;\n        undefined4 buffer2 = allocate_memory_buffer_08006d14(param_1);\n        *(undefined4 *)(param_1 + 8) = buffer2;\n        undefined4 buffer3 = allocate_memory_buffer_08006d14(param_1);\n        *(undefined4 *)(param_1 + 0xc) = buffer3;\n        initialize_params_08006cb4_08006c40(*(undefined4 *)(param_1 + 4), 4, 0);\n        initialize_params_08006cb4_08006c40(*(undefined4 *)(param_1 + 8), 9, 1);\n        initialize_params_08006cb4_08006c40(*(undefined4 *)(param_1 + 0xc), 0x12, 2);\n        *(int *)(param_1 + 0x18) = 1;\n    }\n    return;\n}",
            "called": [
                "FUN_08006c40",
                "FUN_08006d14"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006cb4",
            "calling": [
                "FUN_08006344",
                "FUN_08006d14",
                "FUN_08006394",
                "FUN_080069e4",
                "FUN_08006be0",
                "FUN_080068f0"
            ],
            "imported": false,
            "current_name": "initialize_params_08006cb4"
        },
        "FUN_08004c5e": {
            "renaming": {
                "FUN_08004c5e": "find_value_in_list_08004c5e",
                "param_1": "value_to_find",
                "param_2": "list",
                "*param_2": "*list",
                "undefined4": "int"
            },
            "code": "int find_value_in_list_08004c5e(int value_to_find, char* list){\n    while(true){\n        if (*list == -1){\n            return 0;\n        }\n        if (*list == value_to_find){\n            break;\n        }\n        list = list + 0xc;\n    }\n    return *(int*)(list + 4);\n}",
            "called": [
                "FUN_08004c5e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004c5e",
            "calling": [
                "FUN_08004c5e",
                "FUN_08004c78"
            ],
            "imported": false,
            "current_name": "find_value_in_list_08004c5e"
        },
        "FUN_08004b3c": {
            "renaming": {
                "FUN_08004b3c": "update_bitmask_if_value_found_08004b3c",
                "param_1": "value",
                "local_50": "found_value",
                "PTR_DAT_08004b90": "PTR_DAT_08004b90",
                "iVar1": "index",
                "find_value_in_list_if_not_negative_08004c78": "find_value_in_list_if_not_negative",
                "find_value_in_array_08004948": "find_value_in_array",
                "find_value_or_negative_one_08004cce": "find_value_or_negative_one",
                "update_bit_in_uint_array_080040b0": "update_bit_in_uint_array",
                "update_bits_and_check_0800412c": "update_bits_and_check",
                "set_bitmask_08003ed8": "set_bitmask"
            },
            "code": "void update_bitmask_if_value_found_08004b3c(uint32_t value) {\n    int index;\n    uint32_t found_value = find_value_in_list_if_not_negative(value, PTR_DAT_08004b90);\n    if ((found_value != 0) && ((index = find_value_in_array(value)) != -1) && ((index == 0) || (index == 4) || (index == 8) || (index == 0xc) || (index == 0x18))) {\n        uint32_t bitmask = find_value_or_negative_one(value, PTR_DAT_08004b90);\n        if ((bitmask & 0x100000) == 0) {\n            update_bit_in_uint_array(found_value, index);\n        }\n        else {\n            update_bits_and_check(found_value, index);\n        }\n        set_bitmask(found_value);\n    }\n    return;\n}",
            "called": [
                "FUN_08003ed8",
                "FUN_08004cce",
                "FUN_080040b0",
                "FUN_08004948",
                "FUN_08004c78",
                "FUN_0800412c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004b3c",
            "calling": [
                "FUN_080057b4"
            ],
            "imported": false,
            "current_name": "update_bitmask_if_value_found_08004b3c"
        },
        "FUN_08001550": {
            "renaming": {
                "FUN_08001550": "decode_and_print_snake_case_08001550",
                "param_1": "data",
                "param_2": "size",
                "param_3": "offset",
                "iVar1": "i",
                "*param_1": "*data",
                "*(undefined *)(param_3 + iVar1)": "*(undefined *)(offset + i)",
                "decode_and_print_snake_case_08001310": "decode_and_print_snake_case_08001310"
            },
            "code": "void decode_and_print_snake_case_08001550(uint8_t *data, uint size, int offset) {\n  uint8_t mask = (size & 7) << 3 | 0x40;\n  decode_and_print_snake_case_08001550_08001310(data, mask, 0);\n  for (int i = 0; i < 8; i++) {\n    (**(code **)*data)(data, *(undefined *)(offset + i));\n  }\n  return;\n}",
            "called": [
                "FUN_08001310"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001550",
            "calling": [
                "FUN_08000bcc"
            ],
            "imported": false,
            "current_name": "decode_and_print_snake_case_08001550"
        },
        "FUN_08000cd0": {
            "renaming": {
                "FUN_08000cd0": "FUNC_08000cd0"
            },
            "code": "\nvoid FUNC_08000cd0(void)\n\n{\n  char cVar1;\n  undefined *puVar2;\n  undefined *puVar3;\n  undefined *puVar4;\n  uint uVar5;\n  undefined4 uVar6;\n  int iVar7;\n  undefined4 extraout_r1;\n  undefined4 extraout_r1_00;\n  undefined4 extraout_r1_01;\n  undefined4 uVar8;\n  undefined8 uVar9;\n  \n  uVar5 = get_value_from_pointer_wrapper_080058e0();\n  if (*(uint *)PTR_DAT_08000f50 < uVar5) {\n    *(uint *)PTR_DAT_08000f50 = *(uint *)PTR_DAT_08000f50 + 1000;\n    uVar9 = decode_080015f8(PTR_DAT_08000f74,0);\n    uVar8 = (undefined4)((ulonglong)uVar9 >> 0x20);\n    uVar6 = (undefined4)uVar9;\n    *(undefined8 *)PTR_DAT_08000f6c = uVar9;\n    iVar7 = is_param_not_null_080009c8(uVar6,uVar8,DAT_08000f18,DAT_08000f1c);\n    if (((iVar7 != 0) || (iVar7 = is_param_not_null_080009c8(uVar6,uVar8,DAT_08000f20,DAT_08000f24), iVar7 != 0))\n       || (iVar7 = is_param_not_null_080009c8(uVar6,uVar8,DAT_08000f28,DAT_08000f2c), iVar7 != 0)) {\n      *PTR_DAT_08000f64 = 7;\n      *PTR_DAT_08000f58 = 0;\n    }\n  }\n  uVar5 = get_value_from_pointer_wrapper_080058e0();\n  if (*(uint *)PTR_DAT_08000f54 < uVar5) {\n    *(uint *)PTR_DAT_08000f54 = *(uint *)PTR_DAT_08000f54 + 1000;\n    if (*PTR_DAT_08000f58 == '\\x01') {\n      uVar8 = *(undefined4 *)PTR_DAT_08000f5c;\n      uVar6 = check_if_bit_set_at_position_08005890(uVar8);\n      uVar5 = count_leading_zeroes(uVar6);\n      decode_character_08005848(uVar8,uVar5 >> 5);\n      iVar7 = *(int *)PTR_DAT_08000f78;\n      *(int *)PTR_DAT_08000f78 = iVar7 + 1;\n      puVar2 = PTR_DAT_08000f7c;\n      convert_and_print_number_in_base_08005d82_08005d82(PTR_DAT_08000f7c,iVar7 + 1,10);\n      puVar3 = PTR_DAT_08000f80;\n      get_length_of_string_08005c96(puVar2,PTR_DAT_08000f80);\n      validate_and_return_length_08005f2c(puVar2,extraout_r1,*(undefined4 *)PTR_DAT_08000f84,\n                   *(undefined4 *)(PTR_DAT_08000f84 + 4),2);\n      get_length_of_string_08005c96(puVar2,puVar3);\n      validate_and_return_length_08005f2c(puVar2,extraout_r1_00,*(undefined4 *)PTR_DAT_08000f6c,\n                   *(undefined4 *)(PTR_DAT_08000f6c + 4),2);\n      get_length_of_string_08005c96(puVar2,puVar3);\n      calculate_length_and_execute_function_08005f40(puVar2,extraout_r1_01,*(undefined4 *)PTR_DAT_08000f88,\n                   *(undefined4 *)(PTR_DAT_08000f88 + 4),2);\n    }\n    else {\n      decode_character_08005848(*(undefined4 *)PTR_DAT_08000f5c,1);\n    }\n    puVar2 = PTR_DAT_08000f60;\n    print_snake_case_string_0800135a(PTR_DAT_08000f60);\n    puVar4 = PTR_DAT_08000f64;\n    get_length_of_string_08005c96(puVar2,*(undefined4 *)\n                         (PTR_PTR_s_Ready_08000f68 + (uint)(byte)*PTR_DAT_08000f64 * 4));\n    decode_and_print_snake_case_08001366(puVar2,0,1);\n    puVar3 = PTR_DAT_08000f60;\n    if (*puVar4 == '\\a') {\n      get_length_of_string_08005c96(puVar2,PTR_s_TC_Error__08000f8c);\n    }\n    else {\n      validate_and_return_length_08005f2c(PTR_DAT_08000f60,2,*(undefined4 *)PTR_DAT_08000f6c,\n                   *(undefined4 *)(PTR_DAT_08000f6c + 4),2);\n      print_snake_case_string_0800134e(puVar3,0);\n      get_length_of_string_08005c96(puVar3,PTR_DAT_08000f70);\n    }\n  }\n  if ((byte)*PTR_DAT_08000f64 < 8) {\n                    /* WARNING: Could not recover jumptable at 0x08000d5c. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n    (*(code *)(&switchD_08000d5c::switchdataD_08000d60 +\n              (&switchD_08000d5c::switchdataD_08000d60)[(byte)*PTR_DAT_08000f64]))();\n    return;\n  }\n  if ((*PTR_DAT_08001274 == '\\x01') && (*PTR_DAT_0800126c == '\\x01')) {\n    *PTR_DAT_0800126c = 0;\n    *PTR_DAT_08001258 = 0;\n  }\n  cVar1 = *PTR_DAT_08001278;\n  if (cVar1 == '\\x01') {\n    iVar7 = get_data_from_pointer_08005754(*(undefined4 *)PTR_DAT_08001280);\n    if (iVar7 == 0) {\n      iVar7 = get_value_from_pointer_wrapper_080058e0();\n      if (0x32 < (uint)(iVar7 - *(int *)PTR_DAT_08001284)) {\n        *PTR_DAT_08001278 = 2;\n      }\n    }\n    else {\n      *PTR_DAT_08001278 = 0;\n    }\n  }\n  else if (cVar1 == '\\0') {\n    *PTR_DAT_08001274 = 0;\n    iVar7 = get_data_from_pointer_08005754(*(undefined4 *)PTR_DAT_08001280);\n    if (iVar7 == 0) {\n      uVar6 = get_value_from_pointer_wrapper_080058e0();\n      *(undefined4 *)PTR_DAT_08001284 = uVar6;\n      *PTR_DAT_08001278 = 1;\n    }\n  }\n  else if ((cVar1 == '\\x02') && (iVar7 = get_data_from_pointer_08005754(*(undefined4 *)PTR_DAT_08001280), iVar7 != 0))\n  {\n    *PTR_DAT_08001274 = 1;\n    *PTR_DAT_08001278 = 0;\n  }\n  if (*PTR_DAT_0800126c == '\\x01') {\n    iVar7 = get_value_from_pointer_wrapper_080058e0();\n    check_value_at_offset_080016b4(PTR_DAT_08001250);\n    if (*(uint *)PTR_DAT_0800128c < (uint)(iVar7 - *(int *)PTR_DAT_08001288)) {\n      *(uint *)PTR_DAT_08001288 = *(int *)PTR_DAT_08001288 + *(uint *)PTR_DAT_0800128c;\n    }\n    uVar9 = convert_uint64_to_uint32_with_shift_0800040c(iVar7 - *(int *)PTR_DAT_08001288);\n    iVar7 = is_end_of_string_080009dc((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),*(undefined4 *)PTR_DAT_08001290,\n                         *(undefined4 *)(PTR_DAT_08001290 + 4));\n    if (iVar7 == 0) {\n      decode_character_08005848(*(undefined4 *)PTR_DAT_0800127c,0);\n    }\n    else {\n      decode_character_08005848(*(undefined4 *)PTR_DAT_0800127c,1);\n    }\n  }\n  else {\n    decode_character_08005848(*(undefined4 *)PTR_DAT_0800127c,0);\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_0800040c",
                "FUN_08005cd4",
                "FUN_080018f8",
                "FUN_080058e0",
                "FUN_08005f2c",
                "FUN_08001a44",
                "FUN_080009c8",
                "FUN_08005d82",
                "FUN_080015f8",
                "FUN_08005848",
                "FUN_0800042c",
                "FUN_08001366",
                "FUN_08005f40",
                "FUN_08000a18",
                "FUN_0800134e",
                "FUN_0800135a",
                "FUN_08005754",
                "FUN_08000a04",
                "FUN_080009dc",
                "FUN_08001918",
                "FUN_080009f0",
                "FUN_08005890",
                "FUN_080016b4",
                "FUN_08001960",
                "FUN_08005c96",
                "FUN_08000194"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08000cd0",
            "calling": [
                "FUN_08005f6c"
            ],
            "imported": false,
            "current_name": "FUNC_08000cd0"
        },
        "FUN_08001310": {
            "renaming": {
                "FUN_08001310": "decode_and_print_snake_case_08001310",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "decode_character_08005848": "decode_character",
                "decode_and_print_string_080012c0": "decode_and_print_string",
                "decode_and_print_string_080012e8": "decode_and_print_string"
            },
            "code": "void decode_and_print_snake_case_08001310(int input_1, uint32_t input_2, uint32_t input_3, uint32_t input_4)\n{\n    decode_character(*(uint8_t *)(input_1 + 8), input_3, input_3, input_4, input_4);\n    if (*(int8_t *)(input_1 + 9) != -1)\n    {\n        decode_character(*(int8_t *)(input_1 + 9), 0, input_3, input_3, input_4);\n    }\n    if ((*(uint8_t *)(input_1 + 0x13) & 0x10) == 0)\n    {\n        decode_and_print_string(input_1, input_2 >> 4);\n        decode_and_print_string(input_1, input_2);\n        return;\n    }\n    decode_and_print_string_080012e8(input_1, input_2);\n    return;\n}",
            "called": [
                "FUN_08005848",
                "FUN_080012c0",
                "FUN_080012e8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001310",
            "calling": [
                "FUN_08001550",
                "FUN_0800134e",
                "FUN_08001366",
                "FUN_0800135a",
                "FUN_080013a4",
                "FUN_0800138e"
            ],
            "imported": false,
            "current_name": "decode_and_print_snake_case_08001310"
        },
        "FUN_080009a8": {
            "renaming": {
                "FUN_080009a8": "check_and_return_params_in_order_080009a8",
                "param_1": "first_param",
                "param_2": "second_param",
                "param_3": "third_param",
                "param_4": "fourth_param"
            },
            "code": "void check_and_return_params_in_order_080009a8(int first_param, int second_param, int third_param, int fourth_param)\n{\n  check_and_return_params_in_order_080009a8(third_param, fourth_param, first_param, second_param);\n  return;\n}",
            "called": [
                "FUN_080009b8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080009a8",
            "calling": [
                "FUN_08000a18",
                "FUN_08000a04"
            ],
            "imported": false,
            "current_name": "check_and_return_params_in_order_080009a8"
        },
        "FUN_08004d90": {
            "renaming": {
                "FUN_08004d90": "set_bitmask_08004d90",
                "*param_1": "*value",
                "DAT_08004de4": "VALUE_1",
                "DAT_08004df0": "data_ptr",
                "DAT_08004df0 + 0x18": "data_ptr[0x18]",
                "DAT_08004df0 + 0x1c": "data_ptr[0x1c]",
                "0x40000000": "VALUE_2",
                "DAT_08004de8": "VALUE_3",
                "DAT_08004dec": "VALUE_4"
            },
            "code": "void set_bitmask_08004d90(int *value) {\n    uint *DAT_08004df0 = (uint *)DAT_08004df0;\n    if (*value == DAT_08004de4) {\n        DAT_08004df0 + 0x18 &= 0xfffff7ff;\n    }\n    if (*value == VALUE_2) {\n        DAT_08004df0 + 0x1c &= 0xfffffffe;\n    }\n    if (*value == DAT_08004de8) {\n        DAT_08004df0 + 0x1c &= 0xfffffffd;\n    }\n    if (*value == DAT_08004dec) {\n        DAT_08004df0 + 0x1c &= 0xfffffffb;\n    }\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004d90",
            "calling": [
                "FUN_08004b34"
            ],
            "imported": false,
            "current_name": "set_bitmask_08004d90"
        },
        "FUN_08005ce8": {
            "renaming": {
                "FUN_08005ce8": "convert_base_08005ce8",
                "param_1": "ptr_param_1",
                "param_2": "param_2",
                "param_3": "param_3",
                "cVar1": "digit",
                "uVar2": "result",
                "uVar3": "remainder",
                "uVar4": "quotient",
                "pcVar5": "digits_array",
                "local_15": "buffer"
            },
            "code": "undefined4 convert_base_08005ce8(int *ptr_param_1, uint param_2, uint param_3)\n{\n  char digit;\n  undefined4 result;\n  uint quotient;\n  uint remainder;\n  char *digits_array;\n  char buffer[9];\n  buffer[1] = 0;\n  if ((int)param_3 < 2) {\n    param_3 = 10;\n  }\n  digits_array = buffer + 1;\n  do {\n    quotient = param_2 / param_3;\n    remainder = (param_2 & 0xff) - (quotient * param_3 & 0xff) & 0xff;\n    digits_array = digits_array + -1;\n    digit = (char)remainder;\n    if (remainder < 10) {\n      digit = digit + '0';\n    }\n    else {\n      digit = digit + '7';\n    }\n    *digits_array = digit;\n    param_2 = quotient;\n  } while (quotient != 0);\n  if (digits_array == (char *)0x0) {\n    result = 0;\n  }\n  else {\n    result = get_string_length_08000178(digits_array);\n    result = (**(code **)(*ptr_param_1 + 4))(ptr_param_1, digits_array, result);\n  }\n  return result;\n}",
            "called": [
                "FUN_08000178"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005ce8",
            "calling": [
                "FUN_08005d8a",
                "FUN_08005d42"
            ],
            "imported": false,
            "current_name": "convert_base_08005ce8"
        },
        "FUN_0800316c": {
            "renaming": {
                "FUN_0800316c": "process_data_and_set_bits_0800316c",
                "param_1": "data",
                "puVar2": "ptr16",
                "puVar3": "ptr17",
                "iVar1": "index"
            },
            "code": "void process_data_and_set_bits_0800316c(uint **data)\n{\n  int index;\n  uint *current_data = *data;\n  uint *next_data = *(data + 1);\n  uint *bit_flags = *(data + 2);\n  uint *ptr1 = *(data + 3);\n  uint *ptr2 = *(data + 4);\n  uint *ptr3 = *(data + 5);\n  uint *ptr4 = *(data + 6);\n  uint *ptr5 = *(data + 7);\n  uint *ptr6 = *(data + 8);\n  uint *ptr7 = *(data + 9);\n  uint *ptr8 = *(data + 10);\n  uint *ptr9 = *(data + 11);\n  uint *ptr10 = *(data + 12);\n  uint *ptr11 = *(data + 13);\n  uint *ptr12 = *(data + 14);\n  uint *ptr13 = *(data + 15);\n  uint *ptr14 = *(data + 16);\n  uint *ptr15 = *(data + 17);\n  uint *ptr16 = *(data + 18);\n  uint *ptr17 = *(data + 19);\n  uint *ptr18 = *(data + 20);\n  uint *ptr19 = *(data + 21);\n  uint *ptr20 = *(data + 22);\n  \n  if (*(byte *)((int)data + 0x3d) - 0x29 < 2) {\n    ptr13 = (uint *)0x0;\n    *(undefined *)((int)data + 0x3d) = 0x28;\n  }\n  else {\n    if ((*(char *)((int)data + 0x3d) != '`') && ((current_data)[1] & 0x800) == 0) {\n      *(undefined *)((int)data + 0x3d) = 0x20;\n    }\n    ptr13 = (uint *)0x0;\n    *(undefined *)((int)data + 0x3e) = 0;\n  }\n  *current_data = *current_data & 0xfffff7ff;\n  if ((current_data[1] & 0x800) == 0) {\n    if (*(char *)((int)data + 0x3d) == '`') {\n      *(undefined *)((int)data + 0x3d) = 0x20;\n      ptr17 = (uint *)0x0;\n      if ((current_data[5] & 0x40) != 0) {\n        ptr16 = ptr7;\n        ptr7 = (uint *)((int)ptr16 + 1);\n        *(char *)ptr16 = (char)current_data[4];\n      }\n      *current_data = *current_data & 0xfffffffe;\n      do_nothing(data);\n    }\n    else {\n      if ((current_data[5] & 0x40) != 0) {\n        ptr16 = ptr7;\n        ptr7 = (uint *)((int)ptr16 + 1);\n        *(char *)ptr16 = (char)current_data[4];\n      }\n      check_and_set_bits(data);\n    }\n  }\n  else {\n    current_data[1] = current_data[1] & 0xfffff7ff;\n    if (*(char *)((int)data[14] + 0x21) == '\\x01') {\n      ptr14[0xd] = (uint)PTR_LAB_080035fc_1_080032ac;\n      index = get_value_from_ptr(ptr14);\n      if (index != 0) {\n        if ((current_data)[5] & 0x40) != 0) {\n          ptr16 = ptr7;\n          ptr7 = (uint *)((int)ptr16 + 1);\n          *(char *)ptr16 = (char)(*current_data)[4];\n        }\n        *current_data = *current_data & 0xfffffffe;\n        *(undefined *)((int)data + 0x3d) = 0x20;\n        (*(code *)ptr14[0xd])();\n      }\n    }\n    else {\n      data[13][0xd] = (uint)PTR_LAB_080035fc_1_080032ac;\n      index = get_value_from_ptr(data[13]);\n      if (index != 0) {\n        *current_data = *current_data & 0xfffffffe;\n        *(undefined *)((int)data + 0x3d) = 0x20;\n        (*(code *)data[13][0xd])();\n      }\n    }\n  }\n  if ((*(char *)((int)data + 0x3d) == '(') && ((uint)ptr7 & 4) != 0) {\n    ptr12 = DAT_080032b0;\n    ptr13 = (uint *)0x0;\n    *(undefined *)((int)data + 0x3d) = 0x20;\n    *(undefined *)((int)data + 0x3e) = 0;\n    process_data_and_set_bits_0800316c(data);\n  }\n  return;\n}",
            "called": [
                "FUN_08004ef4",
                "FUN_0800258c",
                "FUN_0800316a",
                "FUN_08004ec4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800316c",
            "calling": [
                "FUN_08003520",
                "FUN_080032b4"
            ],
            "imported": false,
            "current_name": "process_data_and_set_bits_0800316c"
        },
        "FUN_08004828": {
            "renaming": {
                "FUN_08004828": "update_bit_at_index_08004828",
                "param_1": "index",
                "param_2": "array",
                "uVar1": "shifted_index",
                "*(uint *)(param_2 + uVar1 * 4)": "target",
                "*(uint *)(param_2 + uVar1 * 4) & ~(1 << (param_1 & 0xf))": "*target & mask"
            },
            "code": "void update_bit_at_index_08004828(uint index, int *array) {\n  uint shifted_index = (index << 0x18) >> 0x1c;\n  uint *target = (uint *)(array + shifted_index * 4);\n  uint mask = ~(1 << (index & 0xf));\n  *target = *target & mask;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004828",
            "calling": [
                "FUN_080057b4"
            ],
            "imported": false,
            "current_name": "update_bit_at_index_08004828"
        },
        "FUN_08003afa": {
            "renaming": {
                "FUN_08003afa": "process_data_08003afa",
                "*param_1": "*data",
                "param_2": "length",
                "puVar1": "data_ptr",
                "iVar2": "start_time",
                "iVar3": "current_time",
                "uVar4": "value",
                "DAT_08003c38": "control_register"
            },
            "code": "uint32_t process_data_08003afa(uint32_t *data, uint32_t length)\n{\n  uint32_t *data_ptr;\n  int32_t start_time;\n  int32_t current_time;\n  uint32_t value;\n  \n  if ((*data & 2) != 0) {\n    DAT_08003c38[1] = DAT_08003c38[1] & 0xffffff0f | data[2];\n  }\n  \n  if ((*data & 1) != 0) {\n    value = data[1];\n    if (value == 1) {\n      if ((DAT_08003c38[0] & 0x20000) == 0) {\n        return 1;\n      }\n    }\n    else if ((value != 2) && ((DAT_08003c38[0] & 2) == 0)) {\n      return 1;\n    }\n    \n    DAT_08003c38[1] = value | DAT_08003c38[1] & 0xfffffffc;\n    start_time = get_time_from_pointer_08001cc4();\n    \n    if (value == 1) {\n      while ((DAT_08003c38[1] & 0xc) != 4) {\n        current_time = get_time_from_pointer_08001cc4();\n        if (5000 < (uint32_t)(current_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n    else if (value == 2) {\n      while ((DAT_08003c38[1] & 0xc) != 8) {\n        current_time = get_time_from_pointer_08001cc4();\n        if (5000 < (uint32_t)(current_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      while ((DAT_08003c38[1] & 0xc) != 0) {\n        current_time = get_time_from_pointer_08001cc4();\n        if (5000 < (uint32_t)(current_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n  }\n  \n  data_ptr = DAT_08003c38;\n  \n  if ((length < (*DAT_08003c38 & 7)) && (*DAT_08003c38 = *DAT_08003c38 & 0xfffffff8 | length, length != (*data_ptr & 7))) {\n    return 1;\n  }\n  \n  if ((*data & 4) != 0) {\n    DAT_08003c38[1] = DAT_08003c38[1] & 0xfffff8ff | data[3];\n  }\n  \n  if ((*data & 8) != 0) {\n    DAT_08003c38[1] = DAT_08003c38[1] & 0xffffc7ff | data[4] << 3;\n  }\n  \n  value = calculate_value_08003a68();\n  *(uint32_t *)PTR_DAT_08003c40 = value >> PTR_DAT_08003c3c[(DAT_08003c38[1] << 0x18) >> 0x1c];\n  check_and_set_values_08001c3c(0xf);\n  \n  return 0;\n}",
            "called": [
                "FUN_08001c3c",
                "FUN_08001cc4",
                "FUN_08003a68"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003afa",
            "calling": [
                "FUN_08003ad4"
            ],
            "imported": false,
            "current_name": "process_data_08003afa"
        },
        "FUN_08004948": {
            "renaming": {
                "FUN_08004948": "find_value_in_array_08004948",
                "param_1": "value",
                "param_2": "array",
                "param_3": "size",
                "param_4": "start_index",
                "iVar1": "index",
                "uVar2": "shifted_value"
            },
            "code": "int find_value_in_array_08004948(uint32_t value, uint32_t *array, uint32_t size, uint32_t start_index, uint32_t end_index) {\n    int index = find_value_or_negative_one(value, array, size, start_index, end_index);\n    uint32_t shifted_value = (uint32_t)(index << 0xc) >> 0x1b;\n    if (shifted_value == 3) {\n        return 8;\n    }\n    else if (shifted_value == 4) {\n        return 0xc;\n    }\n    else if (shifted_value == 2) {\n        return 4;\n    }\n    else {\n        return 0;\n    }\n}",
            "called": [
                "FUN_08004cce"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004948",
            "calling": [
                "FUN_08004b3c"
            ],
            "imported": false,
            "current_name": "find_value_in_array_08004948"
        },
        "FUN_0800316a": {
            "renaming": {
                "FUN_0800316a": "do_nothing_0800316a"
            },
            "code": "\nvoid do_nothing_0800316a(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800316a",
            "calling": [
                "FUN_0800316c"
            ],
            "imported": false,
            "current_name": "do_nothing_0800316a"
        },
        "FUN_08005b24": {
            "renaming": {
                "FUN_08005b24": "set_value_at_index_08005b24",
                "param_1": "index",
                "param_2": "value",
                "uVar1": "value_to_set",
                "UNRECOVERED_JUMPTABLE": "jump_table"
            },
            "code": "void set_value_at_index_08005b24(int index, uint value)\n{\n  undefined value_to_set;\n  code *jump_table;\n  if (value < 0x3c) {\n    value_to_set = PTR_DAT_08005b38[value];\n  }\n  else {\n    value_to_set = 0xff;\n  }\n  *(undefined *)(index + 0x12d) = value_to_set;\n  (*jump_table)();\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005b24",
            "calling": [
                "FUN_08005b54"
            ],
            "imported": false,
            "current_name": "set_value_at_index_08005b24"
        },
        "FUN_080049f0": {
            "renaming": {
                "FUN_080049f0": "update_flags_080049f0",
                "*param_1": "*flag_value",
                "iVar1": "current_flags",
                "DAT_08004a48": "current_flags",
                "DAT_08004a40": "FLAG_A",
                "DAT_08004a44": "FLAG_B",
                "*(uint *)(DAT_08004a48 + 0xc)": "*flag_ptr",
                "*(uint *)(iVar1 + 0xc)": "*flag_ptr",
                "*(uint *)(iVar1 + 0x18)": "*flag_ptr"
            },
            "code": "void update_flags_080049f0(int *flag_value)\n{\n  int DAT_08004a48 = DAT_08004a48;\n  if (*flag_value != DAT_08004a40) {\n    if (*flag_value == DAT_08004a44) {\n      uint *(uint *)(DAT_08004a48 + 0xc) = (uint *)(DAT_08004a48 + 0xc);\n      *(uint *)(DAT_08004a48 + 0xc) |= 0x400;\n      *(uint *)(DAT_08004a48 + 0xc) &= 0xfffffbff;\n      *(uint *)(DAT_08004a48 + 0x18) &= 0xfffffbff;\n    }\n    return;\n  }\n  uint *(uint *)(DAT_08004a48 + 0xc) = (uint *)(DAT_08004a48 + 0xc);\n  *(uint *)(DAT_08004a48 + 0xc) |= 0x200;\n  *(uint *)(DAT_08004a48 + 0xc) &= 0xfffffdff;\n  *(uint *)(DAT_08004a48 + 0x18) &= 0xfffffdff;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080049f0",
            "calling": [
                "FUN_0800224c"
            ],
            "imported": false,
            "current_name": "update_flags_080049f0"
        },
        "FUN_08001e40": {
            "renaming": {
                "FUN_08001e40": "get_value_at_offset_08001e40",
                "param_1": "memory_address",
                "*param_1": "memory_address",
                "PTR_": "memory_address",
                "DAT_": "memory_address",
                "*": "value_at_address",
                "undefined4": "int",
                "0x4c": "offset",
                "*param_1 + 0x4c": "address_to_value",
                "*(undefined4 *)(*param_1 + 0x4c)": "*address_to_value"
            },
            "code": "int get_value_at_offset_08001e40(int *PTR_)\n{\n    int offset = 0x4c;\n    int *address_to_value = PTR_ + offset;\n    return *address_to_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001e40",
            "calling": [
                "FUN_08004a4c"
            ],
            "imported": false,
            "current_name": "get_value_at_offset_08001e40"
        },
        "FUN_08003a68": {
            "renaming": {
                "FUN_08003a68": "calculate_value_08003a68",
                "uVar1": "value",
                "uVar2": "flags",
                "local_1c": "local_var",
                "abStack_18": "stack_array",
                "uStack_14": "stack_var_1",
                "uStack_10": "stack_var_2",
                "uStack_c": "stack_var_3"
            },
            "code": "uint calculate_value_08003a68(void)\n{\n  uint value;\n  uint flags;\n  undefined2 local_var;\n  byte stack_array[4];\n  undefined4 stack_var_1;\n  undefined4 stack_var_2;\n  undefined4 stack_var_3;\n  stack_var_3 = *(undefined4 *)(PTR_DAT_08003ac4 + 8);\n  stack_var_2 = *(undefined4 *)(PTR_DAT_08003ac4 + 4);\n  stack_var_1 = *(undefined4 *)PTR_DAT_08003ac4;\n  local_var = *(undefined2 *)(PTR_DAT_08003ac4 + 0x10);\n  flags = *(uint *)(DAT_08003ac8 + 4);\n  value = DAT_08003ad0;\n  if ((flags & 0xc) == 8) {\n    if ((flags & 0x10000) == 0) {\n      value = DAT_08003acc * (uint)stack_array[(flags << 10) >> 0x1c];\n    }\n    else {\n      value = (DAT_08003ad0 * stack_array[(flags << 10) >> 0x1c]) /\n              (uint)*(byte *)((int)&local_var - ((*(int *)(DAT_08003ac8 + 4) << 0xe) >> 0x1f));\n    }\n  }\n  return value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003a68",
            "calling": [
                "FUN_08003afa"
            ],
            "imported": false,
            "current_name": "calculate_value_08003a68"
        },
        "FUN_080012a2": {
            "renaming": {
                "FUN_080012a2": "decode_and_print_string_080012a2",
                "param_1": "str",
                "*(undefined *)(param_1 + 10)": "current_char",
                "decode_character_08005848": "decode_character"
            },
            "code": "void decode_and_print_string_080012a2(unsigned char* str){\n    unsigned char* current_char = str + 10;\n    decode_character_08005848(*current_char, 0);\n    decode_character_08005848(*current_char, 1);\n    decode_character_08005848(*current_char, 0);\n    return;\n}",
            "called": [
                "FUN_08005848"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080012a2",
            "calling": [
                "FUN_080012c0",
                "FUN_080012e8"
            ],
            "imported": false,
            "current_name": "decode_and_print_string_080012a2"
        },
        "FUN_08004c78": {
            "renaming": {
                "FUN_08004c78": "find_value_in_list_if_not_negative_08004c78",
                "param_1": "input_param",
                "uVar1": "result",
                "find_value_in_list_08004c5e": "find_value_in_list"
            },
            "code": "int find_value_in_list_if_not_negative_08004c78(int input_param) {\n    int result = 0;\n    if (input_param != -1) {\n        result = find_value_in_list();\n    }\n    return result;\n}",
            "called": [
                "FUN_08004c5e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004c78",
            "calling": [
                "FUN_08004a4c",
                "FUN_08005384",
                "FUN_080053d4",
                "FUN_08004b3c",
                "FUN_08004f4c"
            ],
            "imported": false,
            "current_name": "find_value_in_list_if_not_negative_08004c78"
        },
        "FUN_08001e48": {
            "renaming": {
                "FUN_08001e48": "set_parameters_08001e48",
                "param_1": "parameters",
                "param_2": "values",
                "uVar1": "result",
                "uVar2": "value",
                "iVar3": "local_var",
                "local_c": "local_var",
                "DAT_08001f74": "DAT_08001f74",
                "PTR_DAT_08001f78": "PTR_DAT_08001f78"
            },
            "code": "uint32_t set_parameters_08001e48(int *parameters, uint32_t *values)\n{\n  uint32_t result;\n  uint32_t value;\n  int *parameter;\n  int local_var;\n  \n  if (*(char *)(parameters + 9) == '\\x01') {\n    result = 2;\n  }\n  else {\n    *(undefined *)(parameters + 9) = 1;\n    value = values[1];\n    if (value < 7) {\n      value = value * 5 - 5;\n      *(uint32_t *)(*parameters + 0x34) = values[0] << (value & 0xff) | *(uint32_t *)(*parameters + 0x34) & ~(0x1f << (value & 0xff));\n    }\n    else if (value < 0xd) {\n      value = value * 5 - 0x23;\n      *(uint32_t *)(*parameters + 0x30) = values[0] << (value & 0xff) | *(uint32_t *)(*parameters + 0x30) & ~(0x1f << (value & 0xff));\n    }\n    else {\n      value = value * 5 - 0x41;\n      *(uint32_t *)(*parameters + 0x2c) = values[0] << (value & 0xff) | *(uint32_t *)(*parameters + 0x2c) & ~(0x1f << (value & 0xff));\n    }\n    value = values[0];\n    if (value < 10) {\n      *(uint32_t *)(*parameters + 0x10) = values[2] << (value * 3 & 0xff) | *(uint32_t *)(*parameters + 0x10) & ~(7 << (value * 3 & 0xff));\n    }\n    else {\n      value = value * 3 - 0x1e;\n      *(uint32_t *)(*parameters + 0xc) = values[2] << (value & 0xff) | *(uint32_t *)(*parameters + 0xc) & ~(7 << (value & 0xff));\n    }\n    if (values[0] - 0x10 < 2) {\n      parameter = parameters;\n      if (parameter == DAT_08001f74) {\n        if ((*(uint32_t *)(parameter + 8) & 0x800000) == 0) {\n          *(uint32_t *)(parameter + 8) = *(uint32_t *)(parameter + 8) | 0x800000;\n          if (values[0] == 0x10) {\n            for (local_var = (uint32_t)((uint64_t)DAT_08001f7c * (uint64_t)*values >> 0x32) * 10; local_var != 0; local_var = local_var + -1) {\n            }\n            result = 0;\n          }\n          else {\n            result = 0;\n          }\n        }\n        else {\n          result = 0;\n        }\n      }\n      else {\n        parameters[10] = parameters[10] | 0x20;\n        result = 1;\n      }\n    }\n    else {\n      result = 0;\n    }\n    *(undefined *)(parameters + 9) = 0;\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001e48",
            "calling": [
                "FUN_08004a4c"
            ],
            "imported": false,
            "current_name": "set_parameters_08001e48"
        },
        "FUN_080009b8": {
            "renaming": {
                "FUN_080009b8": "check_and_return_param_080009b8_080009b8",
                "param_1": "input_param",
                "check_params_0800092c": "check_parameters_0800092c"
            },
            "code": "undefined4 check_and_return_param_080009b8_080009b8(undefined4 input_param)\n{\n  check_parameters_0800092c();\n  return input_param;\n}",
            "called": [
                "FUN_0800092c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080009b8",
            "calling": [
                "FUN_080009a8",
                "FUN_080009dc",
                "FUN_080009f0",
                "FUN_080009c8"
            ],
            "imported": false,
            "current_name": "check_and_return_param_080009b8_080009b8"
        },
        "FUN_08000aa8": {
            "renaming": {
                "FUN_08000aa8": "convert_to_fixed_point_08000aa8",
                "param_1": "integer_part",
                "param_2": "fraction_part",
                "iVar1": "double_fraction",
                "uVar2": "shift_amount"
            },
            "code": "uint convert_to_fixed_point_08000aa8(uint integer_part, uint fraction_part) {\n  int double_fraction = fraction_part * 2 + 0x200000;\n  if (fraction_part * 2 < 0xffe00000) {\n    if (double_fraction >= 0) {\n      return 0;\n    }\n    uint shift_amount = -(double_fraction >> 0x15) - 0x3e1;\n    if (shift_amount >= 0) {\n      return (fraction_part << 0xb | 0x80000000 | integer_part >> 0x15) >> (shift_amount & 0xff);\n    }\n  }\n  else if ((integer_part | fraction_part << 0xc) != 0) {\n    return 0;\n  }\n  return 0xffffffff;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000aa8",
            "calling": [
                "FUN_08005da8"
            ],
            "imported": false,
            "current_name": "convert_to_fixed_point_08000aa8"
        },
        "FUN_08000a04": {
            "renaming": {
                "FUN_08000a04": "should_check_params_08000a04",
                "in_CY": "param2",
                "in_ZR": "param1",
                "check_and_return_params_in_order_080009a8": "check_and_return_params_in_order"
            },
            "code": "bool should_check_params_08000a04(void)\n{\n  undefined param1;\n  undefined param2;\n  check_and_return_params_in_order();\n  return !(bool)param2 || (bool)param1;\n}",
            "called": [
                "FUN_080009a8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000a04",
            "calling": [
                "FUN_08001960",
                "FUN_08000cd0"
            ],
            "imported": false,
            "current_name": "should_check_params_08000a04"
        },
        "FUN_0800010c": {
            "renaming": {
                "FUN_0800010c": "initialize_if_not_initialized_yet_0800010c",
                "param_1": "input_string",
                "*PTR_DAT_08000124": "*PTR_INITIALIZED_FLAG",
                "DAT_08000128": "DAT_HAS_INITIALIZED_FLAG",
                "PTR_FUN_0800012c": "PTR_INITIALIZED_FUNCTION"
            },
            "code": "char initialize_if_not_initialized_yet_0800010c(char *input_string)\\n{\\n  if (*PTR_DAT_08000124 == \"\\0\") {\\n    if (DAT_08000128) {\\n      input_string = PTR_FUN_0800012c;\\n    }\\n    *PTR_DAT_08000124 = 1;\\n  }\\n  return input_string;\\n}",
            "called": [
                "FUN_08007328"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800010c",
            "calling": [],
            "imported": false,
            "current_name": "initialize_if_not_initialized_yet_0800010c"
        },
        "FUN_08003f14": {
            "renaming": {
                "FUN_08003f14": "do_nothing_08003f14"
            },
            "code": "\nvoid do_nothing_08003f14(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003f14",
            "calling": [
                "FUN_08003f18"
            ],
            "imported": false,
            "current_name": "do_nothing_08003f14"
        },
        "FUN_08001cac": {
            "renaming": {
                "FUN_08001cac": "calculate_new_value_08001cac",
                "PTR_DAT_08001cbc": "data_pointer_3",
                "PTR_DAT_08001cc0": "data_pointer_1"
            },
            "code": "void calculate_new_value_08001cac(void)\n{\n  uint8_t byte_value = *PTR_DAT_08001cc0;\n  int* int_pointer = (int*)data_pointer_2;\n  uint32_t* uint_pointer = (uint32_t*)PTR_DAT_08001cbc;\n  *uint_pointer = (uint32_t)byte_value + *int_pointer;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001cac",
            "calling": [
                "FUN_08004b9e"
            ],
            "imported": false,
            "current_name": "calculate_new_value_08001cac"
        },
        "FUN_08003f12": {
            "renaming": {
                "FUN_08003f12": "do_nothing_08003f12"
            },
            "code": "\nvoid do_nothing_08003f12(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003f12",
            "calling": [
                "FUN_08003f18"
            ],
            "imported": false,
            "current_name": "do_nothing_08003f12"
        },
        "FUN_08005a18": {
            "renaming": {
                "FUN_08005a18": "calculate_checksum_if_data_exists_08005a18",
                "DAT_08005a3c": "data_exists",
                "PTR_DAT_08005a40": "data_ptr",
                "calculate_checksum_0800591e": "calculate_checksum"
            },
            "code": "void calculate_checksum_if_data_exists_08005a18(){\n  if (DAT_08005a3c != 0) {\n    calculate_checksum(PTR_DAT_08005a40);\n  }\n  return;\n}",
            "called": [
                "FUN_0800591e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005a18",
            "calling": [
                "FUN_08005f6c"
            ],
            "imported": false,
            "current_name": "calculate_checksum_if_data_exists_08005a18"
        },
        "FUN_08003f18": {
            "renaming": {
                "FUN_08003f18": "execute_callbacks_if_flags_set_08003f18",
                "param_1": "params",
                "iVar1": "ptr"
            },
            "code": "void execute_callbacks_if_flags_set_08003f18(int *params)\n{\n    int ptr = *params;\n    if (((*(uint *)(ptr + 0x10) & 2) != 0) && ((*(uint *)(ptr + 0xc) & 2) != 0)) {\n        *(undefined4 *)(ptr + 0x10) = 0xfffffffd;\n        *(undefined *)(params + 7) = 1;\n        if ((*(uint *)(*params + 0x18) & 3) == 0) {\n            execute_callback_if_flag_set_08004df8();\n            do_nothing_08003f14(params);\n        }\n        else {\n            do_nothing_08003f12();\n        }\n        *(undefined *)(params + 7) = 0;\n    }\n    ptr = *params;\n    if (((*(uint *)(ptr + 0x10) & 4) != 0) && ((*(uint *)(ptr + 0xc) & 4) != 0)) {\n        *(undefined4 *)(ptr + 0x10) = 0xfffffffb;\n        *(undefined *)(params + 7) = 2;\n        if ((*(uint *)(*params + 0x18) & 0x300) == 0) {\n            execute_callback_if_flag_set_08004df8(params);\n            do_nothing_08003f14(params);\n        }\n        else {\n            do_nothing_08003f12(params);\n        }\n        *(undefined *)(params + 7) = 0;\n    }\n    ptr = *params;\n    if (((*(uint *)(ptr + 0x10) & 8) != 0) && ((*(uint *)(ptr + 0xc) & 8) != 0)) {\n        *(undefined4 *)(ptr + 0x10) = 0xfffffff7;\n        *(undefined *)(params + 7) = 4;\n        if ((*(uint *)(*params + 0x1c) & 3) == 0) {\n            execute_callback_if_flag_set_08004df8(params);\n            do_nothing_08003f14(params);\n        }\n        else {\n            do_nothing_08003f12(params);\n        }\n        *(undefined *)(params + 7) = 0;\n    }\n    ptr = *params;\n    if (((*(uint *)(ptr + 0x10) & 0x10) != 0) && ((*(uint *)(ptr + 0xc) & 0x10) != 0)) {\n        *(undefined4 *)(ptr + 0x10) = 0xffffffef;\n        *(undefined *)(params + 7) = 8;\n        if ((*(uint *)(*params + 0x1c) & 0x300) == 0) {\n            execute_callback_if_flag_set_08004df8(params);\n            do_nothing_08003f14(params);\n        }\n        else {\n            do_nothing_08003f12(params);\n        }\n        *(undefined *)(params + 7) = 0;\n    }\n    ptr = *params;\n    if (((*(uint *)(ptr + 0x10) & 1) != 0) && ((*(uint *)(ptr + 0xc) & 1) != 0)) {\n        *(undefined4 *)(ptr + 0x10) = 0xfffffffe;\n        execute_function_if_not_null_08004e12(params);\n    }\n    ptr = *params;\n    if (((*(uint *)(ptr + 0x10) & 0x80) != 0) && ((*(uint *)(ptr + 0xc) & 0x80) != 0)) {\n        *(undefined4 *)(ptr + 0x10) = 0xffffff7f;\n        do_nothing_0800417a(params);\n    }\n    ptr = *params;\n    if (((*(uint *)(ptr + 0x10) & 0x40) != 0) && ((*(uint *)(ptr + 0xc) & 0x40) != 0)) {\n        *(undefined4 *)(ptr + 0x10) = 0xffffffbf;\n        do_nothing_08003f16(params);\n    }\n    ptr = *params;\n    if (((*(uint *)(ptr + 0x10) & 0x20) != 0) && ((*(uint *)(ptr + 0xc) & 0x20) != 0)) {\n        *(undefined4 *)(ptr + 0x10) = 0xffffffdf;\n        do_nothing_08004178(params);\n    }\n    return;\n}",
            "called": [
                "FUN_08003f12",
                "FUN_0800417a",
                "FUN_08004df8",
                "FUN_08003f14",
                "FUN_08004e12",
                "FUN_08004178",
                "FUN_08003f16"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003f18",
            "calling": [
                "FUN_08004e20"
            ],
            "imported": false,
            "current_name": "execute_callbacks_if_flags_set_08003f18"
        },
        "FUN_08003f16": {
            "renaming": {
                "FUN_08003f16": "do_nothing_08003f16"
            },
            "code": "\nvoid do_nothing_08003f16(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003f16",
            "calling": [
                "FUN_08003f18"
            ],
            "imported": false,
            "current_name": "do_nothing_08003f16"
        },
        "FUN_0800591e": {
            "renaming": {
                "FUN_0800591e": "calculate_checksum_0800591e",
                "param_1": "input_address",
                "*(short *)(param_1 + 0x134)": "first_short_ptr",
                "*(short *)(param_1 + 0x136)": "second_short_ptr",
                "checksum": "checksum"
            },
            "code": "ushort calculate_checksum_0800591e(int input_address) {\n    ushort checksum = (*(short *)(input_address + 0x134) + 0x40) - *(short *)(input_address + 0x136) & 0x3f;\n    return checksum;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800591e",
            "calling": [
                "FUN_08005a18"
            ],
            "imported": false,
            "current_name": "calculate_checksum_0800591e"
        },
        "FUN_08002540": {
            "renaming": {
                "FUN_08002540": "set_bit_at_index_08002540",
                "param_1": "bit_index",
                "DAT_0800255c": "target_array"
            },
            "code": "void set_bit_at_index_08002540(uint bit_index)\n{\n  if (bit_index >= 0)\n  {\n    uint word_index = (bit_index >> 5) + 0x60;\n    uint* target_word_ptr = (uint*)(DAT_0800255c + word_index * 4);\n    uint bit_mask = 1 << (bit_index & 0x1f);\n    *target_word_ptr = bit_mask;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002540",
            "calling": [],
            "imported": false,
            "current_name": "set_bit_at_index_08002540"
        },
        "FUN_08006344": {
            "renaming": {
                "FUN_08006344": "process_input_08006344_08006344",
                "param_1": "input_length",
                "param_2": "input_byte",
                "param_3": "input_buffer",
                "pbVar2": "previous_buffer",
                "pbVar3": "current_buffer",
                "uVar4": "output_byte",
                "iVar1": "buffer_index"
            },
            "code": "uint process_input_08006344_08006344(int input_length, byte input_byte, byte **input_buffer){\n  int buffer_index;\n  byte *current_buffer;\n  byte *previous_buffer;\n  uint output_byte;\n  previous_buffer = input_buffer[2] + -1;\n  input_buffer[2] = previous_buffer;\n  if ((-1 < (int)previous_buffer) || (((int)input_buffer[6] <= (int)previous_buffer && (previous_buffer = (byte *)(uint)input_byte, previous_buffer != (byte *)0xa)))){\n    current_buffer = *input_buffer;\n    *input_buffer = current_buffer + 1;\n    *current_buffer = input_byte;\n    return (uint)input_byte;\n  }\n  if ((input_length != 0) && (*(int *)(input_length + 0x18) == 0)) {\n    initialize_params_08006cb4();\n  }\n  if (input_buffer == (byte **)PTR_DAT_080069d8) {\n    input_buffer = *(byte ***)(input_length + 4);\n  }\n  else if (input_buffer == (byte **)PTR_DAT_080069dc) {\n    input_buffer = *(byte ***)(input_length + 8);\n  }\n  else if (input_buffer == (byte **)PTR_DAT_080069e0) {\n    input_buffer = *(byte ***)(input_length + 0xc);\n  }\n  input_buffer[2] = input_buffer[6];\n  current_buffer = (byte *)(uint)*(ushort *)(input_buffer + 3);\n  buffer_index = (int)current_buffer << 0x1c;\n  if (((buffer_index < 0) && (current_buffer = input_buffer[4], current_buffer != (byte *)0x0)) || (buffer_index = check_and_update_buffer_080069e4(input_length, input_buffer, buffer_index, current_buffer, previous_buffer), buffer_index == 0)) {\n    output_byte = (uint)input_byte;\n    buffer_index = (int)*input_buffer - (int)input_buffer[4];\n    if ((buffer_index < (int)input_buffer[5]) || (buffer_index = process_data_08006be0(input_length, input_buffer), buffer_index == 0)) {\n      input_buffer[2] = input_buffer[2] + -1;\n      current_buffer = *input_buffer;\n      *input_buffer = current_buffer + 1;\n      *current_buffer = input_byte;\n      if ((byte *)(buffer_index + 1) != input_buffer[5]) {\n        if (-1 < (int)((uint)*(ushort *)(input_buffer + 3) << 0x1f)) {\n          return output_byte;\n        }\n        if (output_byte != 10) {\n          return output_byte;\n        }\n      }\n      buffer_index = process_data_08006be0(input_length, input_buffer);\n      if (buffer_index == 0) {\n        return output_byte;\n      }\n    }\n  }\n  return 0xffffffff;\n}",
            "called": [
                "FUN_080069e4",
                "FUN_08006be0",
                "FUN_08006cb4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006344",
            "calling": [
                "FUN_08006370"
            ],
            "imported": false,
            "current_name": "process_input_08006344_08006344"
        },
        "FUN_080009c8": {
            "renaming": {
                "FUN_080009c8": "is_param_not_null_080009c8",
                "in_ZR": "input_char"
            },
            "code": "bool is_param_not_null_080009c8(void)\\n{\\n  char input_char;\\n  check_and_return_param_080009b8_080009b8();\\n  return input_char != \"\\0\";\\n}",
            "called": [
                "FUN_080009b8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080009c8",
            "calling": [
                "FUN_08000cd0"
            ],
            "imported": false,
            "current_name": "is_param_not_null_080009c8"
        },
        "FUN_08002db2": {
            "renaming": {
                "FUN_08002db2": "process_data_08002db2",
                "param_1": "data",
                "cVar1": "c",
                "puVar2": "ptr1"
            },
            "code": "uint32_t process_data_08002db2(uint32_t **data)\n{\n    char c;\n    uint32_t *ptr1;\n    \n    c = *(char *)((int)data + 0x3d);\n    ptr1 = data[0xb];\n    if ((*(short *)(data + 10) == 0) && (c == '!')) {\n        if ((ptr1 == (uint32_t *)0x4) || ((ptr1 == (uint32_t *)0x8 || (ptr1 == (uint32_t *)0xffff0000)))) {\n            (*data)[1] = (*data)[1] & 0xfffff8ff;\n            **data = **data | 0x200;\n            data[0xc] = (uint32_t *)0x0;\n            *(undefined *)((int)data + 0x3d) = 0x20;\n            if (*(char *)((int)data + 0x3e) == '@') {\n                *(undefined *)((int)data + 0x3e) = 0;\n                do_nothing_08002db0();\n            }\n            else {\n                *(undefined *)((int)data + 0x3e) = 0;\n                do_nothing_08002c4e();\n            }\n        }\n        else {\n            (*data)[1] = (*data)[1] & 0xfffff8ff;\n            data[0xc] = (uint32_t *)0x11;\n            *(undefined *)((int)data + 0x3e) = 0;\n            *(undefined *)((int)data + 0x3d) = 0x20;\n            do_nothing_08002c4e();\n        }\n    }\n    else if ((c == '!') || ((*(char *)((int)data + 0x3e) == '@' && (c == '\"')))) {\n        if (*(short *)((int)data + 0x2a) == 0) {\n            (*data)[1] = (*data)[1] & 0xfffffbff;\n        }\n        else if (*(char *)((int)data + 0x3e) == '@') {\n            if (data[0x14] == (uint32_t *)0x0) {\n                if (data[0x13] == (uint32_t *)0x1) {\n                    (*data)[4] = (uint32_t)data[0x12] & 0xff;\n                    data[0x14] = (uint32_t *)((int)data[0x14] + 2);\n                }\n                else {\n                    (*data)[4] = (uint32_t)((int)data[0x12] << 0x10) >> 0x18;\n                    data[0x14] = (uint32_t *)((int)data[0x14] + 1);\n                }\n            }\n            else if (data[0x14] == (uint32_t *)0x1) {\n                (*data)[4] = (uint32_t)data[0x12] & 0xff;\n                data[0x14] = (uint32_t *)((int)data[0x14] + 1);\n            }\n            else if (data[0x14] == (uint32_t *)0x2) {\n                if (*(char *)((int)data + 0x3d) == '\"') {\n                    **data = **data | 0x100;\n                }\n                else if (*(char *)((int)data + 0x3d) == '!') {\n                    ptr1 = data[9];\n                    data[9] = (uint32_t *)((int)ptr1 + 1);\n                    (*data)[4] = (uint32_t)*(byte *)ptr1;\n                    *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n                }\n            }\n        }\n        else {\n            ptr1 = data[9];\n            data[9] = (uint32_t *)((int)ptr1 + 1);\n            (*data)[4] = (uint32_t)*(byte *)ptr1;\n            *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n        }\n    }\n    return 0;\n}",
            "called": [
                "FUN_08002c4e",
                "FUN_08002db0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002db2",
            "calling": [
                "FUN_080033b8"
            ],
            "imported": false,
            "current_name": "process_data_08002db2"
        },
        "FUN_08001cc4": {
            "renaming": {
                "FUN_08001cc4": "get_value_from_pointer_08001cc4",
                "undefined4": "unsigned int"
            },
            "code": "unsigned int get_value_from_pointer_08001cc4() {\n    return *(unsigned int *)PTR_DAT_08001ccc;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001cc4",
            "calling": [
                "FUN_08003c90",
                "FUN_080053d4",
                "FUN_08004b94",
                "FUN_08003688",
                "FUN_08001cd0",
                "FUN_08003afa",
                "FUN_08004478",
                "FUN_080043b4",
                "FUN_080020f0",
                "FUN_08001f84",
                "FUN_08002384"
            ],
            "imported": false,
            "current_name": "get_value_from_pointer_08001cc4"
        },
        "FUN_08002db0": {
            "renaming": {
                "FUN_08002db0": "do_nothing_08002db0"
            },
            "code": "\nvoid do_nothing_08002db0(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002db0",
            "calling": [
                "FUN_08002efc",
                "FUN_08002db2"
            ],
            "imported": false,
            "current_name": "do_nothing_08002db0"
        },
        "FUN_08003ea0": {
            "renaming": {
                "FUN_08003ea0": "execute_function_if_not_null_and_set_flag_08003ea0",
                "param_1": "pointer_to_pointer_to_uint",
                "**param_1": "dereferenced_pointer_to_pointer_to_uint",
                "*param_1": "dereferenced_pointer_to_uint",
                "DAT_08003ed4": "data_section_start_address"
            },
            "code": "void execute_function_if_not_null_and_set_flag_08003ea0(uint **pointer_to_pointer_to_uint){\n    if (((**pointer_to_pointer_to_uint & 2) != 0) && (((*pointer_to_pointer_to_uint)[1] & 2) != 0)) {\n        execute_function_if_not_null_08004d18();\n        (*pointer_to_pointer_to_uint)[1] = 0xfffffffd;\n    }\n    *(undefined4 *)(DAT_08003ed4 + 0x14) = 0x20000;\n    *(undefined *)((int)pointer_to_pointer_to_uint + 0x11) = 1;\n    return;\n}",
            "called": [
                "FUN_08004d18"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003ea0",
            "calling": [],
            "imported": false,
            "current_name": "execute_function_if_not_null_and_set_flag_08003ea0"
        },
        "FUN_0800306c": {
            "renaming": {
                "FUN_0800306c": "process_input_0800306c",
                "param_1": "input_array",
                "puVar1": "current_element"
            },
            "code": "uint32_t process_input_0800306c(uint32_t **input_array)\n{\n  uint32_t *current_element;\n  current_element = input_array[0xB];\n  if (*(uint16_t *)((int)input_array + 0x2A) == 3)\n  {\n    if (((current_element == (uint32_t *)0x4) || (current_element == (uint32_t *)0x8)) || (current_element == (uint32_t *)0xFFFF0000))\n    {\n      **input_array = **input_array & 0xFFFFFBFF;\n    }\n    current_element = input_array[9];\n    input_array[9] = (uint32_t *)((int)current_element + 1);\n    *(char *)current_element = (char)(*input_array)[4];\n    *(uint16_t *)((int)input_array + 0x2A) = *(uint16_t *)((int)input_array + 0x2A) - 1;\n  }\n  else if (*(uint16_t *)((int)input_array + 0x2A) == 2)\n  {\n    if (((current_element == (uint32_t *)0x4) || (current_element == (uint32_t *)0x8)) || (current_element == (uint32_t *)0xFFFF0000))\n    {\n      (*input_array)[1] = (*input_array)[1] & 0xFFFFFCFF;\n      **input_array = **input_array | 0x200;\n    }\n    else\n    {\n      if (current_element == (uint32_t *)0x2)\n      {\n        **input_array = **input_array | 0x400;\n      }\n      else\n      {\n        **input_array = **input_array & 0xFFFFFBFF;\n      }\n      (*input_array)[1] = (*input_array)[1] & 0xFFFFFCFF;\n    }\n    current_element = input_array[9];\n    input_array[9] = (uint32_t *)((int)current_element + 1);\n    *(char *)current_element = (char)(*input_array)[4];\n    *(uint16_t *)((int)input_array + 0x2A) = *(uint16_t *)((int)input_array + 0x2A) - 1;\n    current_element = input_array[9];\n    input_array[9] = (uint32_t *)((int)current_element + 1);\n    *(char *)current_element = (char)(*input_array)[4];\n    *(undefined *)((int)input_array + 0x3D) = 0x20;\n    input_array[0xC] = (uint32_t *)0x0;\n    if (*(char *)((int)input_array + 0x3E) == '@')\n    {\n      *(undefined *)((int)input_array + 0x3E) = 0;\n      do_nothing_08002f9a();\n    }\n    else\n    {\n      *(undefined *)((int)input_array + 0x3E) = 0;\n      do_nothing_08002c50();\n    }\n  }\n  else\n  {\n    current_element = input_array[9];\n    input_array[9] = (uint32_t *)((int)current_element + 1);\n    *(char *)current_element = (char)(*input_array)[4];\n    *(uint16_t *)((int)input_array + 0x2A) = *(uint16_t *)((int)input_array + 0x2A) - 1;\n  }\n  return 0;\n}",
            "called": [
                "FUN_08002c50",
                "FUN_08002f9a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800306c",
            "calling": [
                "FUN_080033b8"
            ],
            "imported": false,
            "current_name": "process_input_0800306c"
        },
        "FUN_0800548c": {
            "renaming": {
                "FUN_0800548c": "is_combination_valid_0800548c",
                "param_1": "index",
                "uVar1": "combined_bytes",
                "PTR_DAT_080054ac": "get_combined_bytes_pointer"
            },
            "code": "bool is_combination_valid_0800548c(int index){\n    uint16_t combined_bytes = combine_two_bytes(PTR_DAT_080054ac(index));\n    bool is_valid = (combined_bytes & 0x22) == 0x22;\n    return is_valid;\n}",
            "called": [
                "FUN_080047e8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800548c",
            "calling": [
                "FUN_080054d4",
                "FUN_08005510"
            ],
            "imported": false,
            "current_name": "is_combination_valid_0800548c"
        },
        "FUN_08004848": {
            "renaming": {
                "FUN_08004848": "get_datum_by_index_08004848",
                "param_1": "index",
                "DAT_08004870": "data_0",
                "DAT_08004880": "data_1",
                "DAT_08004874": "data_2",
                "DAT_08004878": "data_3",
                "DAT_0800487c": "data_4"
            },
            "code": "undefined4 get_datum_by_index_08004848(undefined4 index) {\n  switch(index) {\n    case 0:\n      return DAT_08004870;\n    case 1:\n      return DAT_08004880;\n    case 2:\n      return DAT_08004874;\n    case 3:\n      return DAT_08004878;\n    case 4:\n      return DAT_0800487c;\n    default:\n      return 0;\n  }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004848",
            "calling": [
                "FUN_08005890",
                "FUN_08005848"
            ],
            "imported": false,
            "current_name": "get_datum_by_index_08004848"
        },
        "FUN_08005d82": {
            "renaming": {
                "FUN_08005d82": "convert_and_print_number_in_base_08005d82_08005d82",
                "convert_number_base_08005d42": "convert_number_to_base_08005d42"
            },
            "code": "void convert_and_print_number_in_base_08005d82_08005d82(void)\n{\n  convert_number_to_base_08005d42();\n  return;\n}",
            "called": [
                "FUN_08005d42"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005d82",
            "calling": [
                "FUN_08005da8",
                "FUN_08000cd0"
            ],
            "imported": false,
            "current_name": "convert_and_print_number_in_base_08005d82_08005d82"
        },
        "FUN_08006f92": {
            "renaming": {
                "FUN_08006f92": "process_data_08006f92",
                "param_1": "data",
                "param_2": "data_info",
                "iVar1": "result",
                "uVar2": "modified_data_info",
                "bVar3": "is_error"
            },
            "code": "void process_data_08006f92(int data, int data_info) {\n    int result = zero_return_function(data, *(short *)(data_info + 0xe));\n    bool is_error = result == -1;\n    ushort modified_data_info = *(ushort *)(data_info + 0xc);\n    if (is_error) {\n        modified_data_info = modified_data_info & 0xefff;\n    }\n    else {\n        *(int *)(data_info + 0x54) = result;\n        modified_data_info = modified_data_info | 0x1000;\n    }\n    *(ushort *)(data_info + 0xc) = modified_data_info;\n}",
            "called": [
                "FUN_08007048"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006f92",
            "calling": [],
            "imported": false,
            "current_name": "process_data_08006f92"
        },
        "FUN_080012c0": {
            "renaming": {
                "FUN_080012c0": "decode_and_print_string_080012c0",
                "param_1": "str_address",
                "param_2": "bit_mask",
                "uVar1": "current_bit",
                "decode_character_08005848": "decode_character",
                "decode_and_print_string_080012a2": "decode_and_print_string_helper"
            },
            "code": "void decode_and_print_string_080012c0(int str_address, int bit_mask) {\n  uint current_bit;\n  for (current_bit = 0; current_bit < 4; current_bit++) {\n    decode_character(*(undefined *)(str_address + current_bit + 0xb), bit_mask >> (current_bit & 0xff) & 1);\n  }\n  decode_and_print_string_080012c0_helper(str_address);\n  return;\n}",
            "called": [
                "FUN_08005848",
                "FUN_080012a2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080012c0",
            "calling": [
                "FUN_08001310",
                "FUN_080013a4"
            ],
            "imported": false,
            "current_name": "decode_and_print_string_080012c0"
        },
        "FUN_08001f80": {
            "renaming": {
                "FUN_08001f80": "get_value_at_offset_08001f80",
                "param_1": "base_address"
            },
            "code": "int get_value_at_offset_08001f80(int base_address) {\n    return *(int *)(base_address + 0x28);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001f80",
            "calling": [
                "FUN_08004a4c"
            ],
            "imported": false,
            "current_name": "get_value_at_offset_08001f80"
        },
        "FUN_08001f84": {
            "renaming": {
                "FUN_08001f84": "check_and_update_value_08001f84",
                "param_1": "value_ptr",
                "param_2": "value",
                "iVar1": "value_from_pointer_2",
                "iVar3": "value_ptr_value",
                "local_14": "i",
                "PTR_DAT_08001ffc": "PTR_DATA_08001ffc",
                "DAT_08002000": "DATA_08002000"
            },
            "code": "uint32_t check_and_update_value_08001f84(int *value_ptr, uint32_t value) {\n    int value_ptr_value = *value_ptr;\n    if ((*(uint32_t *)(value_ptr_value + 8) & 1) == 0) {\n        *(uint32_t *)(value_ptr_value + 8) |= 1;\n        for (uint32_t i = (uint32_t)((uint64_t)DAT_08002000 * (uint64_t)*(uint32_t *)PTR_DAT_08001ffc >> 0x32); i != 0; i--) {\n            // delay loop\n        }\n        int value_from_pointer = get_value_from_pointer_08001cc4(value_ptr, value, (int)((uint64_t)DAT_08002000 * (uint64_t)*(uint32_t *)PTR_DAT_08001ffc));\n        do {\n            if ((*(uint32_t *)(*value_ptr + 8) & 1) != 0) {\n                return 0;\n            }\n            int value_from_pointer_2 = get_value_from_pointer_08001cc4();\n        } while ((uint32_t)(value_from_pointer_2 - value_from_pointer) < 3);\n        value_ptr[10] |= 0x10;\n        value_ptr[0xb] |= 1;\n        *(uint8_t *)(value_ptr + 9) = 0;\n        return 1;\n    }\n    return 0;\n}",
            "called": [
                "FUN_08001cc4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001f84",
            "calling": [
                "FUN_08002004",
                "FUN_08002384"
            ],
            "imported": false,
            "current_name": "check_and_update_value_08001f84"
        },
        "FUN_08000bcc": {
            "renaming": {
                "FUN_08000bcc": "decode_and_process_data_08000bcc",
                "puVar1": "first_ptr",
                "puVar2": "second_ptr",
                "puVar3": "fourth_ptr",
                "uVar4": "val2"
            },
            "code": "void decode_and_process_data_08000bcc() {\n  undefined *first_ptr = PTR_DAT_08000c90;\n  decode_character_08005848(*(undefined4 *)PTR_DAT_08000c90,0);\n  process_data_080057b4(*(undefined4 *)first_ptr,1);\n  \n  undefined *second_ptr = PTR_DAT_08000c94;\n  decode_character_08005848(*(undefined4 *)PTR_DAT_08000c94,0);\n  process_data_080057b4(*(undefined4 *)second_ptr,1);\n  \n  undefined *third_ptr = PTR_DAT_08000c98;\n  decode_character_08005848(*(undefined4 *)PTR_DAT_08000c98,0);\n  process_data_080057b4(*(undefined4 *)third_ptr,1);\n  \n  decode_character_08005848(*(undefined4 *)second_ptr,1);\n  \n  undefined *fourth_ptr = PTR_DAT_08000c9c;\n  decode_and_print_data_080013a4(PTR_DAT_08000c9c,8,2,0);\n  decode_and_print_snake_case_08001550(fourth_ptr,0,PTR_DAT_08000ca0);\n  print_snake_case_string_0800135a(fourth_ptr);\n  get_length_of_string_08005c96(fourth_ptr,PTR_s_Reflow_08000ca4);\n  decode_and_print_snake_case_08001366(fourth_ptr,0,1);\n  get_length_of_string_08005c96(fourth_ptr,PTR_s_Oven_1_2_08000ca8);\n  decode_character_08005848(*(undefined4 *)second_ptr,0);\n  do_nothing_080058e8(0x9c4);\n  print_snake_case_string_0800135a(fourth_ptr);\n  process_data_and_wait_for_response_08005a68(PTR_DAT_08000cac,0xe100,6);\n  decode_character_08005848(*(undefined4 *)third_ptr,1);\n  *(undefined4 *)PTR_DAT_08000cb0 = 2000;\n  undefined4 val1 = get_value_from_pointer_wrapper_080058e0();\n  *(undefined4 *)PTR_DAT_08000cb4 = val1;\n  undefined4 val2 = get_value_from_pointer_wrapper_080058e0();\n  *(undefined4 *)PTR_DAT_08000cb8 = val2;\n  handle_interrupt_08000aec(0);\n  return;\n}",
            "called": [
                "FUN_08005848",
                "FUN_08001550",
                "FUN_080058e8",
                "FUN_08001366",
                "FUN_08005a68",
                "FUN_0800135a",
                "FUN_080058e0",
                "FUN_080057b4",
                "FUN_080013a4",
                "FUN_08005c96",
                "FUN_08000aec"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000bcc",
            "calling": [
                "FUN_08005f6c"
            ],
            "imported": false,
            "current_name": "decode_and_process_data_08000bcc"
        },
        "FUN_0800281e": {
            "renaming": {
                "FUN_0800281e": "set_param_value_0800281e",
                "param_1": "object_address",
                "param_2": "value",
                "param_3": "is_shifted",
                "*(int *)(param_1 + 0x10)": "*(int *)(object_address + 0x10)"
            },
            "code": "void set_param_value_0800281e(int object_address, int value, int is_shifted){\n  if (is_shifted == 0) {\n    *(int *)(object_address + 0x10) = value << 0x10;\n    return;\n  }\n  *(int *)(object_address + 0x10) = value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800281e",
            "calling": [
                "FUN_08004c30"
            ],
            "imported": false,
            "current_name": "set_param_value_0800281e"
        },
        "FUN_08006198": {
            "renaming": {
                "FUN_08006198": "execute_functions_08006198",
                "puVar1": "function_ptrs_start",
                "iVar2": "function_ptrs_count",
                "iVar3": "i"
            },
            "code": "void execute_functions_08006198(void)\n{\n  undefined *function_ptrs_start;\n  int function_ptrs_count;\n  int i;\n  function_ptrs_start = PTR_DAT_080061d0;\n  function_ptrs_count = (int)PTR_DAT_080061d4 - (int)PTR_DAT_080061d0;\n  for (i = 0; i != function_ptrs_count >> 2; i++) {\n    (**(code **)(function_ptrs_start + i * 4))();\n  }\n  do_nothing_08007328();\n  function_ptrs_start = PTR_DAT_080061d8;\n  function_ptrs_count = (int)PTR_DAT_080061dc - (int)PTR_DAT_080061d8;\n  for (i = 0; i != function_ptrs_count >> 2; i++) {\n    (**(code **)(function_ptrs_start + i * 4))();\n  }\n  return;\n}",
            "called": [
                "FUN_08007328",
                "FUN_08005f5e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006198",
            "calling": [
                "FUN_08001be8"
            ],
            "imported": false,
            "current_name": "execute_functions_08006198"
        },
        "FUN_08007048": {
            "renaming": {
                "FUN_08007048": "zero_return_function_08007048",
                "param_1": "result",
                "param_2": "arg1",
                "param_3": "arg2",
                "param_4": "arg3",
                "puVar1": "ptr",
                "iVar2": "return_value"
            },
            "code": "void zero_return_function_08007048(int *result, undefined4 arg1, undefined4 arg2, undefined4 arg3)\n{\n    undefined *ptr = PTR_DAT_08007068;\n    *(undefined4 *)PTR_DAT_08007068 = 0;\n    int return_value = return_zero_08005728(arg1, arg2, arg3, arg3, arg3);\n    if (return_value == -1 && *(int *)ptr != 0)\n    {\n        *result = *(int *)ptr;\n    }\n    return;\n}",
            "called": [
                "FUN_08005728"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007048",
            "calling": [
                "FUN_08006f5a",
                "FUN_08006f92"
            ],
            "imported": false,
            "current_name": "zero_return_function_08007048"
        },
        "FUN_08003c50": {
            "renaming": {
                "FUN_08003c50": "get_value_shifted_by_dat_08003c50",
                "uVar1": "value",
                "get_value_from_pointer_08003c44": "get_value_from_pointer",
                "PTR_DAT_08003c6c": "pointer_dat",
                "DAT_08003c68": "data_08003c68",
                "shifted_index": "shifted_index",
                "shifted_value": "shifted_value",
                "result": "result"
            },
            "code": "uint get_value_shifted_by_dat_08003c50(void)\n{\n  uint value = get_value_from_pointer();\n  uint shifted_index = *(int *)(DAT_08003c68 + 4) << 0x15;\n  uint shifted_value = shifted_index >> 0x1d;\n  uint result = value >> PTR_DAT_08003c6c[shifted_value];\n  return result;\n}",
            "called": [
                "FUN_08003c44"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003c50",
            "calling": [
                "FUN_08004204"
            ],
            "imported": false,
            "current_name": "get_value_shifted_by_dat_08003c50"
        },
        "FUN_080065c0": {
            "renaming": {
                "FUN_080065c0": "process_data_080065c0",
                "param_1": "input",
                "param_2": "data",
                "param_3": "output",
                "param_4": "param_4",
                "param_5": "callback",
                "iVar1": "index",
                "uVar2": "max_length",
                "uVar3": "length",
                "bVar4": "has_flags",
                "*(char *)((int)param_2 + 0x43)": "*(char *)((int)data + 0x43)",
                "*param_3": "*output",
                "*param_2 << 0x1a": "*data << 0x1a",
                "uVar2 = *param_2 & 6": "flags = *data & 6",
                "(int)uVar2 < (int)(param_2[3] - *param_3)": "(int)flags < (int)(data[3] - *output)",
                "(int)param_2[4] < (int)param_2[2]": "(int)data[4] < (int)data[2]",
                "(int)(*param_2 << 0x1a) < 0": "(int)(*data << 0x1a) < 0",
                "uVar2 = (uint)*(byte *)((int)param_2 + 0x43)": "length = (uint)*(byte *)((int)data + 0x43)",
                "uVar2 != 0": "length != 0",
                "uVar2 = 1": "length = 1",
                "uVar3 = uVar2": "uint new_length = length",
                "*(undefined *)((int)param_2 + uVar2 + 0x43)": "*(undefined *)((int)data + length + 0x43)",
                "*(undefined *)((int)param_2 + uVar2 + 0x44)": "*(undefined *)((int)data + length + 0x44)",
                "uVar3 = uVar2 + 2": "new_length = length + 2",
                "uVar2 = param_2[3]": "max_length = data[3]",
                "(*param_2 & 6) != 4": "(*data & 6) != 4",
                "uVar2 = 0": "max_length = 0",
                "uVar2 = uVar2 - *param_3": "max_length = max_length - *output",
                "uVar2 = uVar2 & ~((int)uVar2 >> 0x1f)": "max_length = max_length & ~((int)max_length >> 0x1f)",
                "return 0xffffffff": "return 0xffffffff;"
            },
            "code": "undefined4 process_data_080065c0(undefined4 input, uint *data, uint *output, undefined4 param_4, code *callback)\n{\n  int index;\n  uint max_length, length, flags;\n  bool has_flags;\n  \n  max_length = data[4];\n  if ((int)data[4] < (int)data[2]) {\n    max_length = data[2];\n  }\n  *output = max_length;\n  if (*(char *)((int)data + 0x43) != '\\0') {\n    *output = max_length + 1;\n  }\n  if ((int)(*data << 0x1a) < 0) {\n    *output = *output + 2;\n  }\n  flags = *data & 6;\n  if (flags == 0) {\n    for (; (int)flags < (int)(data[3] - *output); flags++) {\n      index = (*callback)(input, param_4, (int)data + 0x19, 1);\n      if (index == -1) {\n        return 0xffffffff;\n      }\n    }\n  }\n  length = (uint)*(byte *)((int)data + 0x43);\n  if (length != 0) {\n    length = 1;\n  }\n  uint new_length = length;\n  if ((int)(*data << 0x1a) < 0) {\n    *(undefined *)((int)data + length + 0x43) = 0x30;\n    new_length = length + 2;\n    *(undefined *)((int)data + length + 0x44) = *(undefined *)((int)data + 0x45);\n  }\n  index = (*callback)(input, param_4, (int)data + 0x43, new_length);\n  if (index != -1) {\n    max_length = data[3];\n    has_flags = (*data & 6) != 4;\n    if (has_flags) {\n      max_length = 0;\n    }\n    length = 0;\n    if (!has_flags) {\n      max_length = max_length - *output;\n    }\n    if (!has_flags) {\n      max_length = max_length & ~((int)max_length >> 0x1f);\n    }\n    if ((int)data[4] < (int)data[2]) {\n      max_length = max_length + (data[2] - data[4]);\n    }\n    while (true) {\n      if (max_length == length) {\n        return 0;\n      }\n      index = (*callback)(input, param_4, (int)data + 0x1a, 1);\n      if (index == -1) {\n        break;\n      }\n      length = length + 1;\n    }\n  }\n  return 0xffffffff;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080065c0",
            "calling": [
                "FUN_080066b0"
            ],
            "imported": false,
            "current_name": "process_data_080065c0"
        },
        "FUN_080054d4": {
            "renaming": {
                "FUN_080054d4": "check_combination_validity_080054d4",
                "param_1": "combination_length",
                "param_2": "combination_data",
                "param_3": "data_offset",
                "param_4": "data_selector",
                "iVar1": "is_valid",
                "is_combination_valid_0800548c": "is_combination_valid",
                "PTR_DAT_0800550c": "data_selector_values"
            },
            "code": "int check_combination_validity_080054d4(int combination_length, undefined *combination_data, int data_offset, int data_selector){\n  if (combination_length == 0) {\n    return -1;\n  }\n  int is_valid = is_combination_valid();\n  if (is_valid) {\n    *combination_data = *(undefined *)(combination_length + data_offset);\n    check_and_set_values(get_data_selector_value(data_selector, combination_length), combination_length + data_offset, 1, data_selector, data_selector);\n    return 0;\n  }\n  return -1;\n}",
            "called": [
                "FUN_080045a2",
                "FUN_0800548c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080054d4",
            "calling": [
                "FUN_0800598a"
            ],
            "imported": false,
            "current_name": "check_combination_validity_080054d4"
        },
        "FUN_08004d40": {
            "renaming": {
                "FUN_08004d40": "wait_forever_08004d40"
            },
            "code": "void wait_forever_08004d40(void)\n{\n  while(true) {\n    // Do nothing\n  }\n}",
            "called": [
                "FUN_08004d40"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004d40",
            "calling": [
                "FUN_08004d40",
                "FUN_08001b48"
            ],
            "imported": false,
            "current_name": "wait_forever_08004d40"
        },
        "FUN_08004d44": {
            "renaming": {
                "FUN_08004d44": "update_flags_08004d44",
                "puVar1": "flags_ptr"
            },
            "code": "void update_flags_08004d44(void)\n{\n  uint32_t *flags_ptr;\n  flags_ptr = PTR_DAT_08004d84;\n  *PTR_DAT_08004d84 |= 0x1;\n  flags_ptr[1] = PTR_DAT_08004d88 & flags_ptr[1];\n  *flags_ptr &= 0xfef6ffff;\n  *flags_ptr &= 0xfffbffff;\n  flags_ptr[1] &= 0xff80ffff;\n  flags_ptr[2] = 0x9f0000;\n  *(uint32_t *)(PTR_DAT_08004d8c + 8) = 0x8000000;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004d44",
            "calling": [
                "FUN_08001be8"
            ],
            "imported": false,
            "current_name": "update_flags_08004d44"
        },
        "FUN_0800282c": {
            "renaming": {
                "FUN_0800282c": "update_param_and_process_response_0800282c",
                "param_1": "param",
                "PTR_DAT_08002844_14": "ptr_dat_08002844_14",
                "DAT_08002844": "dat_08002844",
                "check_and_process_response_080060e4": "check_and_process_response"
            },
            "code": "void update_param_and_process_response_0800282c(uint param) {\n  uint* PTR_DAT_08002844_14 = (uint*)(DAT_08002844 + 0x14);\n  uint current_param = *PTR_DAT_08002844_14;\n  if ((current_param & param) != 0) {\n    *PTR_DAT_08002844_14 = param;\n    check_and_process_response_080060e4();\n  }\n  return;\n}",
            "called": [
                "FUN_080060e4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800282c",
            "calling": [],
            "imported": false,
            "current_name": "update_param_and_process_response_0800282c"
        },
        "FUN_080015b2": {
            "renaming": {
                "FUN_080015b2": "decode_bits_080015b2_080015b2",
                "*param_1": "*input",
                "iVar1": "bit_value",
                "uVar2": "bit_position",
                "uVar3": "result"
            },
            "code": "uint decode_bits_080015b2_080015b2(undefined *input)\n{\n  int bit_value;\n  uint result = 0;\n  decode_character_08005848(input[1], 0);\n  for (int bit_position = 31; bit_position >= 0; bit_position--) {\n    decode_character_08005848(input[2], 1);\n    bit_value = check_if_bit_set_at_position_08005890(*input);\n    if (bit_value != 0) {\n      result |= 1 << bit_position;\n    }\n    decode_character_08005848(input[2], 0);\n  }\n  decode_character_08005848(input[1], 1);\n  return result;\n}",
            "called": [
                "FUN_08005890",
                "FUN_08005848"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080015b2",
            "calling": [
                "FUN_080015f8"
            ],
            "imported": false,
            "current_name": "decode_bits_080015b2_080015b2"
        },
        "FUN_0800040c": {
            "renaming": {
                "FUN_0800040c": "convert_uint64_to_uint32_with_shift_0800040c",
                "param_1": "input",
                "uVar1": "upper_bits",
                "uVar2": "shift_amount",
                "iVar3": "shift_diff",
                "uVar4": "temp",
                "in_r12": "unused",
                "bVar5": "is_negative",
                "bVar6": "is_zero",
                "bVar7": "overflow"
            },
            "code": "ulonglong convert_uint64_to_uint32_with_shift_0800040c(uint input) {\n  if (input == 0) {\n    return 0;\n  }\n  uint shift_amount = count_leading_zeroes(input) + 21;\n  uint upper_bits = 0;\n  if (shift_amount < 32) {\n    shift_amount = shift_amount + 1;\n    upper_bits = input << (shift_amount & 0xff);\n    input = input >> ((0xcU - shift_amount) & 0xff);\n  }\n  uint lower_bits = input << (shift_amount & 0xff);\n  if (shift_amount < 0x433) {\n    return CONCAT44(lower_bits + (0x432 - shift_amount) * 0x100000, upper_bits);\n  }\n  uint inverse_shift_amount = ~(0x432 - shift_amount);\n  if (inverse_shift_amount > 0x1e) {\n    return (ulonglong)(input >> ((inverse_shift_amount - 0x1f) & 0xff));\n  }\n  int shift_diff = inverse_shift_amount - 0x13;\n  if (shift_diff == 0 || (shift_diff < 0) != SCARRY4(inverse_shift_amount - 0x1f, 0xc)) {\n    inverse_shift_amount = inverse_shift_amount + 1;\n    return CONCAT44(input >> (inverse_shift_amount & 0xff), upper_bits >> (inverse_shift_amount & 0xff) | input << ((0x20 - inverse_shift_amount) & 0xff));\n  }\n  return (ulonglong)(upper_bits >> ((0x20 - (0xcU - shift_diff)) & 0xff) | input << (shift_diff & 0xff));\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800040c",
            "calling": [
                "FUN_080015f8",
                "FUN_08005da8",
                "FUN_08001814",
                "FUN_08000cd0",
                "FUN_08001918"
            ],
            "imported": false,
            "current_name": "convert_uint64_to_uint32_with_shift_0800040c"
        },
        "FUN_08004df4": {
            "renaming": {
                "FUN_08004df4": "subtract_four_from_input_08004df4",
                "param_1": "input_num",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "int subtract_four_from_input_08004df4(int input_num)\n{\n    int result = input_num - 4;\n    return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004df4",
            "calling": [
                "FUN_08004df8",
                "FUN_08004e12"
            ],
            "imported": false,
            "current_name": "subtract_four_from_input_08004df4"
        },
        "FUN_08004bb0": {
            "renaming": {
                "FUN_08004bb0": "set_flag_and_update_bits_08004bb0",
                "param_1": "flag",
                "param_2": "ptr_param_2",
                "param_3": "ptr_param_3",
                "local_20": "bit_mask",
                "local_1c": "ptr_param_2",
                "local_18": "ptr_param_3",
                "local_14": "bit_mask_2",
                "uVar1": "flag_value"
            },
            "code": "void set_flag_and_update_bits_08004bb0(uint32_t flag, uint32_t* ptr_param_2, uint32_t* ptr_param_3)\n{\n  uint32_t flag_value = set_flag_value(flag);\n  uint32_t bit_mask = 1 << (flag & 0xf) & 0xffff;\n  uint32_t bit_mask_2 = 3;\n  *(uint32_t *)(DAT_08004c28 + 0x18) = *(uint32_t *)(DAT_08004c28 + 0x18) | 1;\n  if ((flag - 0xd & 0xff) < 2) {\n    *(uint32_t *)(DAT_08004c2c + 4) = *(uint32_t *)(DAT_08004c2c + 4) & 0xf8ffffff | 0x4000000;\n  }\n  if (((flag == 0xf) || (flag == 0x13)) || (flag == 0x14)) {\n    *(uint32_t *)(DAT_08004c2c + 4) = *(uint32_t *)(DAT_08004c2c + 4) & 0xf8ffffff | 0x2000000;\n  }\n  *ptr_param_2 = update_bits(flag_value, &bit_mask);\n  *ptr_param_3 = bit_mask_2;\n}\n",
            "called": [
                "FUN_08004884",
                "FUN_08002624"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004bb0",
            "calling": [
                "FUN_080057b4"
            ],
            "imported": false,
            "current_name": "set_flag_and_update_bits_08004bb0"
        },
        "FUN_08004df8": {
            "renaming": {
                "FUN_08004df8": "execute_callback_if_flag_set_08004df8",
                "param_1": "input_value",
                "iVar1": "callback_ptr",
                "subtract_four_from_input_08004df4": "subtract_four_from_input",
                "*(code **)(iVar1 + 0x4c)": "*(code **)(callback_ptr + 0x4c)",
                "*(char *)(param_1 + 0x1c)": "*(char *)(input_value + 0x1c)"
            },
            "code": "void execute_callback_if_flag_set_08004df8(int input_value) {\n  int callback_ptr = subtract_four_from_input();\n  if ((*(code **)(callback_ptr + 0x4c) != (code *)0x0) && (*(char *)(input_value + 0x1c) == '\\x01')) {\n    (**(code **)(callback_ptr + 0x4c))(callback_ptr,0);\n  }\n  return;\n}",
            "called": [
                "FUN_08004df4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004df8",
            "calling": [
                "FUN_08003f18"
            ],
            "imported": false,
            "current_name": "execute_callback_if_flag_set_08004df8"
        },
        "FUN_08001510": {
            "renaming": {
                "FUN_08001510": "print_decoded_data_08001510",
                "param_1": "data",
                "param_2": "data_size",
                "param_3": "param_2",
                "param_4": "param_3",
                "param_5": "param_4",
                "param_6": "param_5",
                "param_7": "param_6"
            },
            "code": "undefined4 print_decoded_data_08001510(undefined4 *data, undefined4 data_size, undefined4 param_2, undefined4 param_3, undefined param_4, undefined param_5, undefined param_6)\n{\n    data[1] = 0;\n    *data = PTR_PTR_print_snake_case_string_0800134e_1_0800154c;\n    decode_and_print_data_080014ba(data, 1, data_size, 0xff, param_2, param_3, param_4, param_5, param_6, 0, 0, 0, 0);\n    return data;\n}",
            "called": [
                "FUN_080014ba"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001510",
            "calling": [
                "FUN_08000b08"
            ],
            "imported": false,
            "current_name": "print_decoded_data_08001510"
        },
        "FUN_08002af8": {
            "renaming": {
                "FUN_08002af8": "check_function_08002af8",
                "param_1": "function_param",
                "param_2": "param_2",
                "param_3": "param_3",
                "param_4": "param_4",
                "uVar1": "result",
                "puVar2": "function_ptr",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "uint32_t check_function_08002af8(uint32_t **function_param, uint32_t *param_2, int param_3, uint32_t *param_4)\n{\n    uint32_t result = 0;\n    uint32_t *function_ptr;\n    char function_char;\n    \n    function_char = *(char *)((int)function_param + 0x3d);\n    \n    if (function_char == '(') {\n        if (param_2 == (uint32_t *)0x0 || param_3 == 0 || *(char *)(function_param + 0xf) == '\\x01') {\n            if (param_2 == (uint32_t *)0x0 || param_3 == 0) {\n                result = 1;\n            } else {\n                result = 2;\n            }\n        } else {\n            *(undefined *)(function_param + 0xf) = 1;\n            function_ptr = *function_param;\n            if ((*function_ptr & 1) == 0) {\n                *function_ptr = *function_ptr | 1;\n            }\n            **function_param = **function_param & 0xfffff7ff;\n            *(undefined *)((int)function_param + 0x3d) = 0x29;\n            *(undefined *)((int)function_param + 0x3e) = 0x20;\n            result = 0;\n            function_param[0x10] = (uint32_t *)0x0;\n            function_param[9] = param_2;\n            *(short *)((int)function_param + 0x2a) = (short)param_3;\n            function_param[0xb] = param_4;\n            *(undefined2 *)(function_param + 10) = *(undefined2 *)((int)function_param + 0x2a);\n            *(undefined *)(function_param + 0xf) = 0;\n            (*function_param)[1] = (*function_param)[1] | 0x700;\n        }\n    } else {\n        result = 2;\n    }\n    return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002af8",
            "calling": [
                "FUN_08004e74"
            ],
            "imported": false,
            "current_name": "check_function_08002af8"
        },
        "FUN_080028de": {
            "renaming": {
                "FUN_080028de": "decode_string_080028de",
                "param_1": "param_array",
                "puVar1": "ptr_1",
                "*(char *)((int)param_1 + 0x3d)": "*(char *)((int)param_array + 61)",
                "*(char *)((int)param_1 + 0x3e)": "*(char *)((int)param_array + 62)",
                "param_1[0x14]": "param_array[20]",
                "(uint *)0x0": "(uint *)0x0",
                "param_1[4]": "param_array[4]",
                "(uint *)0xc000": "(uint *)0xc000",
                "**param_1": "**param_array",
                "| 0x100": "| 0x100",
                "(uint *)((int)param_1[0x14] + 1)": "(uint *)((int)param_array[20] + 1)",
                "*(short *)((int)param_1 + 0x2a)": "*(short *)((int)param_array + 42)",
                "| 0x200": "| 0x200",
                "ptr_1": "ptr_1",
                "(uint *)0xffff0000": "(uint *)0xffff0000",
                "& 0xfffffbff": "& 0xfffffbff",
                "*param_1": "*param_array",
                "| 0x400": "| 0x400",
                "(uint *)0x4": "(uint *)0x4",
                "(uint *)0x8": "(uint *)0x8",
                "param_1[0xc]": "param_array[12]",
                "(uint *)0x12": "(uint *)0x12",
                "| 0x800": "| 0x800",
                "ptr_2": "ptr_2",
                "(ptr_2[1] & 0x800) == 0": "(ptr_2[1] & 0x800) == 0",
                "| 0x1000": "| 0x1000",
                "(ptr_2[1] & 0x800) != 0": "(ptr_2[1] & 0x800) != 0"
            },
            "code": "uint decode_string_080028de(uint **param_array)\n{\n  uint *ptr_1 = param_array[11];\n  if ((*(char *)((int)param_array + 61) == '\"') && ((param_array[20] != (uint *)0x0 || (*(char *)((int)param_array + 62) != '@')))) {\n    if ((param_array[20] == (uint *)0x0) && (param_array[4] == (uint *)0xc000)) {\n      **param_array = **param_array | 0x100;\n      param_array[20] = (uint *)((int)param_array[20] + 1);\n    }\n    else {\n      uint short_value = *(short *)((int)param_array + 42);\n      if (short_value == 0) {\n        **param_array = **param_array | 0x200;\n      }\n      else if (short_value == 1) {\n        if (ptr_1 == (uint *)0xffff0000) {\n          **param_array = **param_array & 0xfffffbff;\n          uint *ptr_2 = *param_array;\n          if ((ptr_2[1] & 0x800) == 0) {\n            *ptr_2 = *ptr_2 | 0x200;\n          }\n          else {\n            *ptr_2 = *ptr_2 & 0xfffffbff;\n          }\n        }\n        else if (((ptr_1 == (uint *)0x4) || (ptr_1 == (uint *)0x8)) || (param_array[12] == (uint *)0x12)) {\n          **param_array = **param_array & 0xfffffbff;\n          **param_array = **param_array | 0x200;\n        }\n        else if (param_array[11] == (uint *)0x2) {\n          **param_array = **param_array | 0x400;\n        }\n        else {\n          **param_array = **param_array & 0xfffffbff;\n        }\n      }\n      else if (short_value == 2) {\n        if (param_array[11] == (uint *)0x2) {\n          **param_array = **param_array | 0x400;\n        }\n        else {\n          **param_array = **param_array | 0x800;\n          **param_array = **param_array & 0xfffffbff;\n        }\n        uint *ptr_2 = *param_array;\n        if ((ptr_2[1] & 0x800) != 0) {\n          ptr_2[1] = ptr_2[1] | 0x1000;\n        }\n      }\n      else {\n        **param_array = **param_array | 0x400;\n        uint *ptr_2 = *param_array;\n        if ((ptr_2[1] & 0x800) != 0) {\n          ptr_2[1] = ptr_2[1] | 0x1000;\n        }\n      }\n      param_array[20] = (uint *)0x0;\n    }\n  }\n  return 0;\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080028de",
            "calling": [
                "FUN_080033b8"
            ],
            "imported": false,
            "current_name": "decode_string_080028de"
        },
        "FUN_08002848": {
            "renaming": {
                "FUN_08002848": "set_status_08002848",
                "param_1": "status",
                "char*": "char_ptr",
                "uint32_t*": "uint_ptr",
                "uint32_t* uint_ptr2": "uint_ptr2",
                "uint32_t* uint_ptr3": "uint_ptr3",
                "*param_1": "*status",
                "param_1[0x14]": "status[0x14]",
                "param_1[0x11]": "status[0x11]",
                "param_1[4]": "status[4]"
            },
            "code": "uint32_t set_status_08002848(uint32_t *status)\n{\n    char* char_ptr = (char*)(status + 0x3e);\n    uint32_t* uint_ptr = (uint32_t*)*status + 0x10;\n    uint32_t* uint_ptr2 = status + 0x11;\n    uint32_t* uint_ptr3 = (uint32_t*)*status;\n    \n    if (*char_ptr == '@') {\n        if (status[0x14] == 0) {\n            *uint_ptr = *uint_ptr2 & 0xfe;\n        }\n        else {\n            *uint_ptr = *uint_ptr2 & 0xff | 1;\n        }\n    }\n    else if (status[4] == 0x4000) {\n        char_ptr = (char*)(status + 0x3d);\n        if (*char_ptr == '!') {\n            *uint_ptr = *uint_ptr2 & 0xfe;\n        }\n        else {\n            *uint_ptr = *uint_ptr2 & 0xff | 1;\n        }\n    }\n    else if (status[0x14] == 0) {\n        *uint_ptr = (*uint_ptr2 << 0x10) >> 0x17 & 6 | 0xf0;\n    }\n    else if (status[0x14] == 1) {\n        *uint_ptr = (*uint_ptr2 << 0x10) >> 0x17 & 6 | 0xf1;\n    }\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002848",
            "calling": [
                "FUN_080033b8"
            ],
            "imported": false,
            "current_name": "set_status_08002848"
        },
        "FUN_08004e70": {
            "renaming": {
                "FUN_08004e70": "subtract_four_from_param_08004e70",
                "param_1": "input_param",
                "return": "result"
            },
            "code": "int subtract_four_from_param_08004e70(int input_param)\n{\n    int result = input_param - 4;\n    return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004e70",
            "calling": [
                "FUN_08004ef4",
                "FUN_08004e74",
                "FUN_08004ec4"
            ],
            "imported": false,
            "current_name": "subtract_four_from_param_08004e70"
        },
        "FUN_080020f0": {
            "renaming": {
                "FUN_080020f0": "check_and_update_flag_080020f0",
                "param_1": "ptr_param_1",
                "iVar1": "ptr_i_var_1",
                "iVar2": "ptr_i_var_2",
                "iVar3": "ptr_i_var_3"
            },
            "code": "int check_and_update_flag_080020f0(int *ptr_param_1)\n{\n    int ptr_i_var_2 = *ptr_param_1;\n    if ((*(uint *)(ptr_i_var_2 + 8) & 1) == 0) {\n        return 0;\n    }\n    *(uint *)(ptr_i_var_2 + 8) = *(uint *)(ptr_i_var_2 + 8) & 0xfffffffe;\n    int ptr_i_var_3 = get_value_from_pointer_08001cc4();\n    do {\n        if ((*(uint *)(*ptr_param_1 + 8) & 1) == 0) {\n            return 0;\n        }\n        int ptr_i_var_1 = get_value_from_pointer_08001cc4();\n    } while ((uint)(ptr_i_var_1 - ptr_i_var_3) < 3);\n    ptr_param_1[10] = ptr_param_1[10] | 0x10;\n    ptr_param_1[0xb] = ptr_param_1[0xb] | 1;\n    return 1;\n}",
            "called": [
                "FUN_08001cc4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080020f0",
            "calling": [
                "FUN_08002348",
                "FUN_0800213c",
                "FUN_0800224c",
                "FUN_08002384"
            ],
            "imported": false,
            "current_name": "check_and_update_flag_080020f0"
        },
        "FUN_08006e10": {
            "renaming": {
                "FUN_08006e10": "allocate_and_initialize_buffer_08006e10",
                "param_1": "buffer_address",
                "param_2": "buffer_info",
                "uVar1": "permissions",
                "iVar2": "allocated_buffer_address",
                "local_18": "buffer_size",
                "local_14": "param_2_copy"
            },
            "code": "void allocate_and_initialize_buffer_08006e10(int buffer_address,int *buffer_info){\n  ushort permissions;\n  int buffer_size;\n  int *param_2_copy;\n  \n  if ((uint)*(ushort *)(buffer_info + 3) << 0x1e >= 0) {\n    buffer_size = buffer_address;\n    param_2_copy = buffer_info;\n    permissions = get_permissions(buffer_address,buffer_info,&buffer_size,&param_2_copy);\n    int allocated_buffer_address = allocate_memory_for_buffer(buffer_address,buffer_size);\n    if (allocated_buffer_address != 0) {\n      *(undefined **)(buffer_address + 0x28) = PTR_LAB_08006c34_1_08006e8c;\n      *buffer_info = allocated_buffer_address;\n      *(ushort *)(buffer_info + 3) = *(ushort *)(buffer_info + 3) | 0x80;\n      buffer_info[4] = allocated_buffer_address;\n      buffer_info[5] = buffer_size;\n      if ((param_2_copy != (int *)0x0) && (process_parameter(buffer_address,(int)*(short *)((int)buffer_info + 0xe)) != 0)) {\n        *(ushort *)(buffer_info + 3) = *(ushort *)(buffer_info + 3) & 0xfffc | 1;\n      }\n      *(ushort *)(buffer_info + 3) = permissions | *(ushort *)(buffer_info + 3);\n      return;\n    }\n    if ((int)(short)*(ushort *)(buffer_info + 3) << 0x16 < 0) {\n      return;\n    }\n    *(ushort *)(buffer_info + 3) = *(ushort *)(buffer_info + 3) & 0xfffc | 2;\n  }\n  *buffer_info = (int)buffer_info + 0x47;\n  buffer_info[4] = (int)buffer_info + 0x47;\n  buffer_info[5] = 1;\n  return;\n}",
            "called": [
                "FUN_08006dc8",
                "FUN_08007028",
                "FUN_08006288"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006e10",
            "calling": [
                "FUN_080069e4"
            ],
            "imported": false,
            "current_name": "allocate_and_initialize_buffer_08006e10"
        },
        "FUN_08004e74": {
            "renaming": {
                "FUN_08004e74": "process_input_08004e74",
                "param_1": "input",
                "param_2": "offset2",
                "param_3": "offset3",
                "param_4": "param_4",
                "iVar1": "result"
            },
            "code": "void process_input_08004e74(int input, int offset1, int offset2, int offset3, undefined4 param_4) {\n  int result = subtract_four_from_param();\n  if (offset3 == *(int *)(input + 0xc)) {\n    if (offset2 == 0) {\n      *(undefined *)(result + 0x88) = 0;\n      *(undefined *)(result + 0x5c) = 0;\n      if (*(code **)(result + 100) != (code *)0x0) {\n        (**(code **)(result + 100))();\n      }\n      check_function(input, result + 0x68, *(undefined *)(result + 0x88), 8);\n      return;\n    }\n    *(undefined *)(result + 0x5c) = 1;\n    process_input_08004e74(input, result + 0x68, 0x20, 8, param_4);\n  }\n  return;\n}",
            "called": [
                "FUN_08002af8",
                "FUN_08002b84",
                "FUN_08004e70"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004e74",
            "calling": [
                "FUN_08002cf2"
            ],
            "imported": false,
            "current_name": "process_input_08004e74"
        },
        "FUN_08004c30": {
            "renaming": {
                "FUN_08004c30": "set_param_value_if_zero_or_one_08004c30",
                "param_1": "ptr1",
                "param_2": "param_id",
                "param_3": "param_value",
                "param_4": "ptr2",
                "set_param_value_0800281e": "set_param_value"
            },
            "code": "void set_param_value_if_zero_or_one_08004c30(int param_value, ushort param_id, void* ptr1, void* ptr2) {\n  if (param_value == 0) {\n    set_param_value(ptr1, param_id, 0, ptr2, ptr2);\n    return;\n  }\n  set_param_value(ptr1, param_id, 1, ptr2, ptr2);\n  return;\n}",
            "called": [
                "FUN_0800281e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004c30",
            "calling": [
                "FUN_08005848"
            ],
            "imported": false,
            "current_name": "set_param_value_if_zero_or_one_08004c30"
        },
        "FUN_08006f38": {
            "renaming": {
                "FUN_08006f38": "calculate_new_value_08006f38",
                "param_1": "input_value",
                "param_2": "input_offset",
                "iVar1": "calculated_value",
                "uVar2": "new_value",
                "bVar3": "is_calculated_value_valid"
            },
            "code": "void calculate_new_value_08006f38(undefined4 input_value, int input_offset)\n{\n  int calculated_value = zero_return_function(input_value, (int)*(short *)(input_offset + 0xe));\n  bool is_calculated_value_valid = calculated_value >= 0;\n  uint new_value;\n  if (is_calculated_value_valid) {\n    new_value = *(int *)(input_offset + 0x54) + calculated_value;\n  }\n  else {\n    new_value = *(ushort *)(input_offset + 0xc) & 0xffffefff;\n  }\n  if (is_calculated_value_valid) {\n    *(uint *)(input_offset + 0x54) = new_value;\n  }\n  if (!is_calculated_value_valid) {\n    *(short *)(input_offset + 0xc) = (short)new_value;\n  }\n  return;\n}",
            "called": [
                "FUN_0800706c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006f38",
            "calling": [],
            "imported": false,
            "current_name": "calculate_new_value_08006f38"
        },
        "FUN_08004cce": {
            "renaming": {
                "FUN_08004cce": "find_value_or_negative_one_08004cce",
                "param_1": "value_to_find",
                "uVar1": "found_value",
                "find_value_in_array_08004cb2": "find_value_in_array"
            },
            "code": "int find_value_or_negative_one_08004cce(int value_to_find) {\n  int found_value = -1;\n  if (value_to_find != -1) {\n    found_value = find_value_in_array();\n  }\n  return found_value;\n}",
            "called": [
                "FUN_08004cb2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004cce",
            "calling": [
                "FUN_08004948",
                "FUN_0800492c",
                "FUN_08004b3c",
                "FUN_08004f4c"
            ],
            "imported": false,
            "current_name": "find_value_or_negative_one_08004cce"
        },
        "FUN_08006eac": {
            "renaming": {
                "FUN_08006eac": "do_nothing_08006eac"
            },
            "code": "\nvoid do_nothing_08006eac(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006eac",
            "calling": [
                "FUN_080061f0",
                "FUN_08006288"
            ],
            "imported": false,
            "current_name": "do_nothing_08006eac"
        },
        "FUN_08006eae": {
            "renaming": {
                "FUN_08006eae": "do_nothing_08006eae"
            },
            "code": "\nvoid do_nothing_08006eae(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006eae",
            "calling": [
                "FUN_080061f0",
                "FUN_08006288"
            ],
            "imported": false,
            "current_name": "do_nothing_08006eae"
        },
        "FUN_08005f5c": {
            "renaming": {
                "FUN_08005f5c": "do_nothing_08005f5c"
            },
            "code": "\nvoid do_nothing_08005f5c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005f5c",
            "calling": [
                "FUN_08005f6c"
            ],
            "imported": false,
            "current_name": "do_nothing_08005f5c"
        },
        "FUN_08003ad4": {
            "renaming": {
                "FUN_08003ad4": "set_values_from_parameters_08003ad4",
                "param_1": "parameters",
                "param_2": "parameter_count",
                "puVar1": "data_ptr",
                "iVar2": "start_value",
                "iVar3": "current_value",
                "uVar4": "value",
                "DAT_08003c34": "data_ptr",
                "DAT_08003c38": "data_values",
                "PTR_DAT_08003c40": "pointer_data",
                "PTR_DAT_08003c3c": "pointer_values"
            },
            "code": "uint32_t set_values_from_parameters_08003ad4(uint32_t *parameters, uint32_t parameter_count)\n{\n    uint32_t *DAT_08003c34 = DAT_08003c34;\n    uint32_t value = *DAT_08003c34;\n    if ((value & 7) < parameter_count && (value = (value & 0xfffffff8) | parameter_count, parameter_count != (*DAT_08003c34 & 7))) {\n        return 1;\n    }\n    if ((*parameters & 2) != 0) {\n        DAT_08003c38[1] = (DAT_08003c38[1] & 0xffffff0f) | parameters[2];\n    }\n    if ((*parameters & 1) != 0) {\n        uint32_t parameter_value = parameters[1];\n        if (parameter_value == 1) {\n            if ((*DAT_08003c38 & 0x20000) == 0) {\n                return 1;\n            }\n        } else if (parameter_value != 2 && ((*DAT_08003c38 & 2) == 0)) {\n            return 1;\n        }\n        DAT_08003c38[1] = parameter_value | (DAT_08003c38[1] & 0xfffffffc);\n        uint32_t start_value = get_value_from_pointer_08001cc4();\n        if (parameter_value == 1) {\n            while ((DAT_08003c38[1] & 0xc) != 4) {\n                uint32_t current_value = get_value_from_pointer_08001cc4();\n                if (5000 < (current_value - start_value)) {\n                    return 3;\n                }\n            }\n        } else if (parameter_value == 2) {\n            while ((DAT_08003c38[1] & 0xc) != 8) {\n                uint32_t current_value = get_value_from_pointer_08001cc4();\n                if (5000 < (current_value - start_value)) {\n                    return 3;\n                }\n            }\n        } else {\n            while ((DAT_08003c38[1] & 0xc) != 0) {\n                uint32_t current_value = get_value_from_pointer_08001cc4();\n                if (5000 < (current_value - start_value)) {\n                    return 3;\n                }\n            }\n        }\n    }\n    DAT_08003c34 = DAT_08003c34;\n    if (parameter_count < (*DAT_08003c34 & 7) && (value = (value & 0xfffffff8) | parameter_count, parameter_count != (*DAT_08003c34 & 7))) {\n        return 1;\n    }\n    if ((*parameters & 4) != 0) {\n        DAT_08003c38[1] = (DAT_08003c38[1] & 0xfffff8ff) | parameters[3];\n    }\n    if ((*parameters & 8) != 0) {\n        DAT_08003c38[1] = (DAT_08003c38[1] & 0xffffc7ff) | (parameters[4] << 3);\n    }\n    uint32_t calculated_value = calculate_value_08003a68();\n    *(uint32_t *)PTR_DAT_08003c40 = calculated_value >> PTR_DAT_08003c3c[(DAT_08003c38[1] << 0x18) >> 0x1c];\n    check_and_set_values_08001c3c(0xf);\n    return 0;\n}",
            "called": [
                "FUN_08003afa"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003ad4",
            "calling": [
                "FUN_08001b48"
            ],
            "imported": false,
            "current_name": "set_values_from_parameters_08003ad4"
        },
        "FUN_08004110": {
            "renaming": {
                "FUN_08004110": "update_bits_at_offset_08004110",
                "param_1": "data",
                "param_2": "offset",
                "param_3": "value",
                "*(uint *)(param_1 + 0x20)": "*data",
                "*(uint *)(param_1 + 0x20) & ~(4 << (param_2 & 0xff))": "mask",
                "param_3 << (param_2 & 0xff)": "value << (offset & 0xff)"
            },
            "code": "void update_bits_at_offset_08004110(uint32_t *data, uint8_t offset, uint32_t value){\n    uint32_t mask = ~(4 << (offset & 0xff));\n    *data &= mask;\n    *data |= value << (offset & 0xff);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004110",
            "calling": [
                "FUN_0800412c"
            ],
            "imported": false,
            "current_name": "update_bits_at_offset_08004110"
        },
        "FUN_08004ce2": {
            "renaming": {
                "FUN_08004ce2": "check_value_in_string_08004ce2",
                "param_1": "value_to_check",
                "param_2": "string_to_search",
                "*param_2": "*string_to_search"
            },
            "code": "int check_value_in_string_08004ce2(int value_to_check, char* string_to_search)\n{\n    if (value_to_check == -1) {\n        return 0;\n    }\n    while( true ) {\n        if (*string_to_search == -1) {\n            return 0;\n        }\n        if (value_to_check == *string_to_search) break;\n        string_to_search = string_to_search + 0xc;\n    }\n    return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004ce2",
            "calling": [
                "FUN_080057b4"
            ],
            "imported": false,
            "current_name": "check_value_in_string_08004ce2"
        },
        "FUN_08005568": {
            "renaming": {
                "FUN_08005568": "process_data_08005568",
                "param_1": "data_ptr",
                "param_2": "data_value",
                "bVar1": "data_index",
                "PTR_DAT_080055b0": "data_array_ptr",
                "PTR_DAT_080055b4": "data_ptr_array_ptr",
                "process_data_08002494": "process_data_helper",
                "check_input_0800455a": "check_input",
                "PTR_DAT_080055b8": "data_ptr_array_index_ptr"
            },
            "code": "void process_data_08005568(int data_ptr, int data_value){\n    if (data_ptr != 0) {\n        byte data_index = *(byte *)(data_ptr + 0x44);\n        *(undefined4 *)(PTR_DAT_080055b0 + (uint)data_index * 4) = data_value;\n        *(int *)(PTR_DAT_080055b4 + (uint)data_index * 4) = data_ptr;\n        process_data_08005568_helper((int)*(char *)(data_ptr + 0x5a),0,2);\n        set_bit_at_position((int)*(char *)(data_ptr + 0x5a));\n        check_input(PTR_DAT_080055b8 + (uint)*(byte *)(data_ptr + 0x44) * 4,*(int *)(data_ptr + 100) + (uint)*(ushort *)(data_ptr + 0x6a),1);\n    }\n}",
            "called": [
                "FUN_0800455a",
                "FUN_080024f8",
                "FUN_08002494"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005568",
            "calling": [],
            "imported": false,
            "current_name": "process_data_08005568"
        },
        "FUN_08004478": {
            "renaming": {
                "FUN_08004478": "process_data_08004478",
                "param_1": "data_ptr",
                "param_2": "values_ptr",
                "param_3": "values_count",
                "param_4": "param_4",
                "uVar1": "value_from_pointer",
                "iVar2": "result"
            },
            "code": "int process_data_08004478(int *data_ptr, ushort *values_ptr, int values_count, undefined4 param_4) {\n  undefined4 uVar1;\n  int result;\n  \n  if (*(char *)((int)data_ptr + 0x39) == ' ') {\n    if (values_ptr == (ushort *)0x0) {\n      result = 1;\n    }\n    else if (values_count == 0) {\n      result = 1;\n    }\n    else if (*(char *)(data_ptr + 0xe) == '\\x01') {\n      result = 2;\n    }\n    else {\n      *(undefined *)(data_ptr + 0xe) = 1;\n      data_ptr[0xf] = 0;\n      *(undefined *)((int)data_ptr + 0x39) = 0x21;\n      uVar1 = get_value_from_pointer_08001cc4();\n      *(short *)(data_ptr + 9) = (short)values_count;\n      *(short *)((int)data_ptr + 0x26) = (short)values_count;\n      while (*(short *)((int)data_ptr + 0x26) != 0) {\n        *(short *)((int)data_ptr + 0x26) = *(short *)((int)data_ptr + 0x26) + -1;\n        if (data_ptr[2] == 0x1000) {\n          result = check_parameters_080043b4(data_ptr, 0x80, 0, uVar1, param_4);\n          if (result != 0) {\n            return 3;\n          }\n          *(uint *)(*data_ptr + 4) = *values_ptr & 0x1ff;\n          if (data_ptr[4] == 0) {\n            values_ptr = values_ptr + 1;\n          }\n          else {\n            values_ptr = (ushort *)((int)values_ptr + 1);\n          }\n        }\n        else {\n          result = check_parameters_080043b4(data_ptr, 0x80, 0, uVar1, param_4);\n          if (result != 0) {\n            return 3;\n          }\n          *(uint *)(*data_ptr + 4) = (uint)*(byte *)values_ptr;\n          values_ptr = (ushort *)((int)values_ptr + 1);\n        }\n      }\n      result = check_parameters_080043b4(data_ptr, 0x40, 0, uVar1, param_4);\n      if (result == 0) {\n        *(undefined *)((int)data_ptr + 0x39) = 0x20;\n        *(undefined *)(data_ptr + 0xe) = 0;\n      }\n      else {\n        result = 3;\n      }\n    }\n  }\n  else {\n    result = 2;\n  }\n  return result;\n}",
            "called": [
                "FUN_080043b4",
                "FUN_08001cc4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004478",
            "calling": [
                "FUN_080053d4"
            ],
            "imported": false,
            "current_name": "process_data_08004478"
        },
        "FUN_08005f5e": {
            "renaming": {
                "FUN_08005f5e": "initialize_data_and_process_08005f5e",
                "set_param_value_08002470": "set_param_value",
                "initialize_data_and_process_08001c32": "initialize_data_and_process"
            },
            "code": "void initialize_data_and_process_08005f5e(void)\n{\n  set_param_value(3);\n  initialize_data_and_process_08005f5e();\n  return;\n}",
            "called": [
                "FUN_08002470",
                "FUN_08001c32"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005f5e",
            "calling": [
                "FUN_08006198"
            ],
            "imported": false,
            "current_name": "initialize_data_and_process_08005f5e"
        },
        "FUN_08005cb6": {
            "renaming": {
                "FUN_08005cb6": "execute_function_pointer_08005cb6",
                "param_1": "function_pointer"
            },
            "code": "void execute_function_pointer_08005cb6(void *function_pointer){\n  (**(void (**)(void))function_pointer)();\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005cb6",
            "calling": [
                "FUN_08005da8",
                "FUN_08005d42"
            ],
            "imported": false,
            "current_name": "execute_function_pointer_08005cb6"
        },
        "FUN_08003c70": {
            "renaming": {
                "FUN_08003c70": "get_shifted_value_from_pointer_08003c70",
                "uVar1": "shifted_value",
                "get_value_from_pointer_08003c44": "get_value_from_pointer",
                "PTR_DAT_08003c8c": "pointer_array",
                "DAT_08003c88": "data_pointer"
            },
            "code": "uint get_shifted_value_from_pointer_08003c70(void)\n{\n  uint shifted_value = get_value_from_pointer();\n  uint index = (*(int *)(DAT_08003c88 + 4) << 0x12) >> 0x1d;\n  uint shifted_index = PTR_DAT_08003c8c[index];\n  return shifted_value >> shifted_index;\n}",
            "called": [
                "FUN_08003c44"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003c70",
            "calling": [
                "FUN_08004204",
                "FUN_08003da4"
            ],
            "imported": false,
            "current_name": "get_shifted_value_from_pointer_08003c70"
        },
        "FUN_080053d4": {
            "renaming": {
                "FUN_080053d4": "process_data_with_list_080053d4",
                "param_1": "value_1",
                "param_2": "value_2",
                "cVar1": "value_to_find",
                "iVar2": "value_1_initial",
                "iVar3": "index_of_value",
                "uVar4": "index_of_matching_value",
                "PTR_DAT_0800547c": "list_1",
                "PTR_DAT_08005480": "list_2",
                "PTR_DAT_08005484": "list_3",
                "PTR_DAT_08005488": "list_4"
            },
            "code": "uint process_data_with_list_080053d4(uint value_to_find, uint list[]) {\n  uint index_of_value = 0;\n  while (index_of_value < 5) {\n    if (list[index_of_value] == value_to_find) {\n      return index_of_value;\n    }\n    index_of_value++;\n  }\n  return -1;\n}\n\nuint process_data_with_list_080053d4(uint param_1, uint param_2, uint list[]) {\n  uint value_1 = get_value_from_pointer();\n  uint index_of_value = process_data_with_list_080053d4(PTR_DAT_0800547c[1], PTR_DAT_08005480);\n  if (index_of_value == -1) {\n    return 0;\n  }\n  uint index_of_matching_value = 0;\n  while (index_of_matching_value < 5 && (list[index_of_matching_value] == 0 || list[index_of_matching_value] != index_of_value)) {\n    index_of_matching_value++;\n  }\n  if (index_of_matching_value > 4) {\n    if (PTR_DAT_08005488[0x44] > 4) {\n      process_data();\n      if (PTR_DAT_08005488[0x44] > 4) {\n        return 0;\n      }\n    }\n    index_of_matching_value = PTR_DAT_08005488[0x44];\n  }\n  do {\n    if (process_data_with_value(*(uint *)(PTR_DAT_08005484 + index_of_matching_value * 4), param_1, param_2 & 0xffff, 1000) == 0) {\n      return param_2;\n    }\n    index_of_value = get_value_from_pointer();\n  } while (index_of_value - value_1 < 1000);\n  return 0;\n}",
            "called": [
                "FUN_08005384",
                "FUN_08004478",
                "FUN_08004c78",
                "FUN_08001cc4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080053d4",
            "calling": [
                "FUN_08005730"
            ],
            "imported": false,
            "current_name": "process_data_with_list_080053d4"
        },
        "FUN_08002b84": {
            "renaming": {
                "FUN_08002b84": "process_input_08002b84",
                "param_1": "input_ptr",
                "param_2": "input_len_ptr",
                "param_3": "input_type",
                "param_4": "input_data_ptr",
                "uVar1": "result",
                "puVar2": "input_data"
            },
            "code": "undefined4 process_input_08002b84(uint **input_ptr, uint *input_len_ptr, int input_type, uint *input_data_ptr) {\n  undefined4 result;\n  uint *input_data;\n  if (*(char *)((int)input_ptr + 0x3d) == '(') {\n    if (input_len_ptr == (uint *)0x0 || input_type == 0 || *(char *)(input_ptr + 0xf) == '\\x01') {\n      result = 1;\n    } else {\n      *(undefined *)(input_ptr + 0xf) = 1;\n      input_data = *input_ptr;\n      if ((*input_data & 1) == 0) {\n        *input_data = *input_data | 1;\n      }\n      **input_ptr = **input_ptr & 0xfffff7ff;\n      *(undefined *)((int)input_ptr + 0x3d) = 0x2a;\n      *(undefined *)((int)input_ptr + 0x3e) = 0x20;\n      result = 0;\n      input_ptr[0x10] = (uint *)0x0;\n      input_ptr[9] = input_len_ptr;\n      *(short *)((int)input_ptr + 0x2a) = (short)input_type;\n      input_ptr[0xb] = input_data_ptr;\n      *(undefined2 *)(input_ptr + 10) = *(undefined2 *)((int)input_ptr + 0x2a);\n      *(undefined *)(input_ptr + 0xf) = 0;\n      (*input_ptr)[1] = (*input_ptr)[1] | 0x700;\n    }\n  } else {\n    result = 2;\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002b84",
            "calling": [
                "FUN_08004e74"
            ],
            "imported": false,
            "current_name": "process_input_08002b84"
        },
        "FUN_08004c48": {
            "renaming": {
                "FUN_08004c48": "check_if_param2_is_included_in_param1_08004c48",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4"
            },
            "code": "void check_if_param2_is_included_in_param1_08004c48(undefined4 input1, undefined2 input2, undefined4 input3, undefined4 input4) {\n  is_param2_included_in_param1_08002810(input1, input2, input3, input4, input4);\n  return;\n}",
            "called": [
                "FUN_08002810"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004c48",
            "calling": [
                "FUN_08005890"
            ],
            "imported": false,
            "current_name": "check_if_param2_is_included_in_param1_08004c48"
        },
        "FUN_0800042c": {
            "renaming": {
                "FUN_0800042c": "calculate_shifted_0800042c",
                "param_1": "num",
                "uVar1": "mask_shift",
                "uVar2": "abs_num",
                "uVar3": "shift",
                "iVar4": "shift_diff2",
                "uVar5": "mask_shift2",
                "uVar6": "is_negative",
                "in_r12": "in_r12",
                "bVar7": "is_mask_shift_negative",
                "bVar8": "is_mask_shift_zero",
                "bVar9": "is_carry"
            },
            "code": "ulonglong calculate_shifted_0800042c(uint num) {\n  uint mask = 0x80000000;\n  for (int i = 0; i < 32; i++) {\n    if (num & mask) {\n      return i;\n    }\n    mask >>= 1;\n  }\n  return 32;\n}\n\nulonglong calculate_shifted_0800042c(uint num) {\n  if (num == 0) {\n    return 0;\n  }\n  bool is_negative = (num & 0x80000000) != 0;\n  uint abs_num = is_negative ? -num : num;\n  uint shift = calculate_shifted_0800042c(abs_num) + 0x15;\n  uint mask_shift = shift - 0xb;\n  bool is_mask_shift_negative = (int)mask_shift < 0;\n  bool is_mask_shift_zero = mask_shift == 0;\n  uint result = 0;\n  if (shift < 0x20) {\n    mask_shift = mask_shift + 0xc;\n    is_mask_shift_negative = (int)mask_shift < 0;\n    is_mask_shift_zero = mask_shift == 0;\n    shift = mask_shift + 0xb;\n    if (!is_mask_shift_zero && is_mask_shift_negative == (shift < 0)) {\n      result = abs_num << (shift & 0xff);\n      abs_num = abs_num >> ((0xc - mask_shift) & 0xff);\n    }\n  }\n  if (is_mask_shift_zero || is_mask_shift_negative != (shift < 0)) {\n    uint in_r12 = 0x20 - shift;\n    abs_num = abs_num << (mask_shift & 0xff);\n    if (is_mask_shift_zero || is_mask_shift_negative != (shift < 0)) {\n      abs_num = abs_num | 0U >> (in_r12 & 0xff);\n      if (is_mask_shift_zero || is_mask_shift_negative != (shift < 0)) {\n        result = 0 << (mask_shift & 0xff);\n      }\n    }\n  }\n  if (shift < 0x433) {\n    return CONCAT44(abs_num + (0x432 - shift) * 0x100000 | (ulonglong)is_negative,result);\n  }\n  uint shift_diff = ~(0x432 - shift);\n  if (0x1e < (int)shift_diff) {\n    return CONCAT44(num,abs_num >> ((shift_diff - 0x1f) & 0xff)) & 0x80000000ffffffff;\n  }\n  int shift_diff2 = shift_diff - 0x13;\n  if (shift_diff2 == 0 || shift_diff2 < 0 != SCARRY4(shift_diff - 0x1f,0xc)) {\n    shift_diff = shift_diff + 1;\n    return CONCAT44((ulonglong)is_negative | abs_num >> (shift_diff & 0xff),result >> (shift_diff & 0xff) | abs_num << ((0x20 - shift_diff) & 0xff));\n  }\n  return CONCAT44(num,result >> ((0x20 - (0xc - shift_diff2)) & 0xff) | abs_num << ((0xc - shift_diff2) & 0xff)) & 0x80000000ffffffff;\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800042c",
            "calling": [
                "FUN_08005da8",
                "FUN_08000cd0",
                "FUN_08001918"
            ],
            "imported": false,
            "current_name": "calculate_shifted_0800042c"
        },
        "FUN_08005f6c": {
            "renaming": {
                "FUN_08005f6c": "process_decoded_data_08000bcc_08005f6c",
                "FUNC_08000cd0": "process_data_08000cd0",
                "DAT_08005f88": "data_available_08005f88",
                "calculate_checksum_if_data_exists_08005a18": "calculate_checksum_08005a18"
            },
            "code": "void process_decoded_data_08000bcc_08005f6c(void)\n{\n  do_nothing_08005f5c();\n  decode_and_process_data_08000bcc();\n  do {\n    do {\n      process_data_08000cd0();\n    } while (DAT_08005f88 == 0);\n    calculate_checksum_if_data_exists_08005a18();\n  } while( true );\n}",
            "called": [
                "FUN_08005a18",
                "FUN_08005f5c",
                "FUN_08000cd0",
                "FUN_08000bcc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005f6c",
            "calling": [
                "FUN_08001be8"
            ],
            "imported": false,
            "current_name": "process_decoded_data_08000bcc_08005f6c"
        },
        "FUN_08005cc0": {
            "renaming": {
                "FUN_08005cc0": "execute_function_on_pointer_08005cc0",
                "param_1": "pointer_to_function",
                "param_2": "data",
                "param_3": "data_size",
                "param_4": "param_4"
            },
            "code": "void execute_function_on_pointer_08005cc0(int *pointer_to_function, void *data, int data_size, void *function_pointer, void *param_4) {\n    (**(void (**)(int *, void *, int, void *, void *))(*pointer_to_function + 4))(pointer_to_function, data, data_size, function_pointer, param_4);\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005cc0",
            "calling": [
                "FUN_08005f40",
                "FUN_08005cd4"
            ],
            "imported": false,
            "current_name": "execute_function_on_pointer_08005cc0"
        },
        "FUN_0800706c": {
            "renaming": {
                "FUN_0800706c": "zero_return_function_0800706c",
                "param_1": "output_value",
                "param_2": "param_2",
                "param_3": "param_3",
                "param_4": "param_4",
                "puVar1": "pointer_to_data",
                "iVar2": "return_value"
            },
            "code": "void zero_return_function_0800706c(int *output_value, undefined4 param_2, undefined4 param_3, undefined4 param_4) {\n  undefined *pointer_to_data = PTR_DAT_0800708c;\n  *(undefined4 *)PTR_DAT_0800708c = 0;\n  int return_value = return_zero_0800572c(param_2, param_3, param_4, param_4, param_4);\n  if ((return_value == -1) && (*(int *)pointer_to_data != 0)) {\n    *output_value = *(int *)pointer_to_data;\n  }\n  return;\n}",
            "called": [
                "FUN_0800572c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800706c",
            "calling": [
                "FUN_08006f38"
            ],
            "imported": false,
            "current_name": "zero_return_function_0800706c"
        },
        "FUN_08002624": {
            "renaming": {
                "FUN_08002624": "update_bits_08002624",
                "param_1": "bits",
                "param_2": "flags",
                "puVar1": "bits_ptr",
                "uVar2": "bit_mask",
                "uVar3": "flag_value",
                "uVar4": "flag_type",
                "uVar5": "flag_offset",
                "uVar6": "bit_offset",
                "uVar7": "bit_value",
                "iVar8": "flag_id",
                "uVar9": "flag_ptr",
                "iVar10": "flag_mask_ptr",
                "DAT_08002804": "flag_masks",
                "DAT_08002808": "flag_sets",
                "flag_mask": "flag_mask_offset",
                "flag_set": "flag_set_offset",
                "flag_clear": "flag_clear_offset",
                "flag_toggle": "flag_toggle_offset",
                "DAT_080027fc": "flag_offsets",
                "DAT_08002800": "flag_values",
                "DAT_080027f8": "flag_types",
                "DAT_0800280c": "flag_clears",
                "DAT_08002810": "flag_toggles"
            },
            "code": "void update_bits_08002624(uint *bits, uint *flags){\n  uint *bits_ptr;\n  uint bit_mask;\n  uint flag_value;\n  uint flag_type;\n  uint flag_offset;\n  uint bit_offset;\n  uint bit_value;\n  uint i;\n  uint flag_id;\n  uint *flag_ptr;\n  uint *flag_mask_ptr;\n  uint *flag_set_ptr;\n  uint *flag_clear_ptr;\n  uint *flag_toggle_ptr;\n  uint flag_mask;\n  uint flag_set;\n  uint flag_clear;\n  uint flag_toggle;\n  uint flag_mask_offset;\n  uint flag_set_offset;\n  uint flag_clear_offset;\n  uint flag_toggle_offset;\n  uint *DAT_080027fc;\n  uint *DAT_08002800;\n  uint *DAT_080027f8;\n  uint *DAT_08002804;\n  uint *DAT_08002808;\n  uint *DAT_0800280c;\n  uint *DAT_08002810;\n  DAT_080027fc = (uint *)DAT_080027fc;\n  DAT_08002800 = (uint *)DAT_08002800;\n  DAT_080027f8 = (uint *)DAT_080027f8;\n  DAT_08002804 = (uint *)DAT_08002804;\n  DAT_08002808 = (uint *)DAT_08002808;\n  DAT_0800280c = (uint *)DAT_0800280c;\n  DAT_08002810 = (uint *)DAT_08002810;\n  i = 0;\n  bit_offset = 0;\n  while (i <= 15) {\n    bit_mask = 1 << (bit_offset & 0x1f);\n    if (bit_offset > 15) {\n      return;\n    }\n    flag_value = *flags & bit_mask;\n    if (bit_mask == flag_value) {\n      flag_id = flags[1];\n      flag_ptr = DAT_08002800 + (flag_id >> 18 & 0x3ff);\n      flag_mask_ptr = DAT_08002804 + (flag_id >> 12 & 0x3f);\n      flag_set_ptr = DAT_08002808 + (flag_id >> 6 & 0x3f);\n      flag_clear_ptr = DAT_0800280c + (flag_id & 0x3f);\n      flag_toggle_ptr = DAT_08002810 + (flag_id >> 24 & 0x3f);\n      flag_mask_offset = *flag_mask_ptr;\n      flag_set_offset = *flag_set_ptr;\n      flag_clear_offset = *flag_clear_ptr;\n      flag_toggle_offset = *flag_toggle_ptr;\n      if (flag_id > 0x11) {\n        if (flag_id != 0x12) {\n          if (flag_id == 0x13) {\n            flag_value = 0;\n          }\n          else if (flag_id == 0x14) {\n            flag_value = flag_set_offset;\n          }\n        }\n        else {\n          flag_value = flag_toggle_offset + 12;\n        }\n      }\n      else {\n        if (flag_id == 0) {\nLAB_08002776:\n          flag_value = flag_mask_offset;\n        }\n        else {\n          if (flag_id == 1) {\n            flag_value = flag_mask_offset + 4;\n          }\n          else if (flag_id == 2) {\n            flag_value = flag_mask_offset + 8;\n          }\n        }\n      }\n      flag_type = DAT_080027f8[0];\n      if ((flag_type & 1) != 0) {\n        *flag_type = flag_type | 1;\n        *DAT_080027fc = *DAT_080027fc & ~(0xf << (bit_offset << 2 & 0x1f)) | flag_value << (bit_offset << 2 & 0x1f);\n        flag_mask = *flag_mask_ptr;\n        flag_set = *flag_set_ptr;\n        flag_clear = *flag_clear_ptr;\n        flag_toggle = *flag_toggle_ptr;\n        if ((flag_type & 0x10000) == 0) {\n          *flag_ptr = *flag_ptr & ~flag_mask | flag_set;\n        }\n        else {\n          *flag_ptr = *flag_ptr & ~flag_mask | flag_clear;\n        }\n        if ((flag_type & 0x20000) == 0) {\n          flag_ptr[1] = flag_ptr[1] & ~flag_mask | flag_set;\n        }\n        else {\n          flag_ptr[1] = flag_ptr[1] & ~flag_mask | flag_clear;\n        }\n        if ((flag_type & 0x100000) == 0) {\n          flag_ptr[2] = flag_ptr[2] & ~flag_mask | flag_set;\n        }\n        else {\n          flag_ptr[2] = flag_ptr[2] & ~flag_mask | flag_clear;\n        }\n        if ((flag_type & 0x200000) == 0) {\n          flag_ptr[3] = flag_ptr[3] & ~flag_mask | flag_set;\n        }\n        else {\n          flag_ptr[3] = flag_ptr[3] & ~flag_mask | flag_toggle;\n        }\n      }\n    }\n    bit_offset = bit_offset + 1;\n  }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002624",
            "calling": [
                "FUN_08004bb0",
                "FUN_08004974",
                "FUN_08004f4c"
            ],
            "imported": false,
            "current_name": "update_bits_08002624"
        },
        "FUN_080040b0": {
            "renaming": {
                "FUN_080040b0": "update_bit_in_uint_array_080040b0",
                "param_1": "uint_array",
                "param_2": "bit_value",
                "puVar1": "array_ptr",
                "DAT_0800410c": "array_ptr_global"
            },
            "code": "uint32_t update_bit_in_uint_array_080040b0(uint32_t **uint_array, uint32_t bit_value, int bit_index) {\n    uint32_t *array_ptr = *uint_array;\n    update_bit_in_uint_array_080040b0_08004092(array_ptr, bit_value, bit_index);\n    if (((array_ptr == DAT_0800410c) && ((array_ptr[8] & 0x1111) == 0)) && ((array_ptr[8] & 0x444) == 0)) {\n        array_ptr[17] &= 0xffff7fff;\n    }\n    if (((array_ptr[8] & 0x1111) == 0) && ((array_ptr[8] & 0x444) == 0)) {\n        *array_ptr &= 0xfffffffe;\n    }\n    *(uint8_t *)((int)uint_array + 0x3d) = 1;\n    return 0;\n}",
            "called": [
                "FUN_08004092"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080040b0",
            "calling": [
                "FUN_08004b3c"
            ],
            "imported": false,
            "current_name": "update_bit_in_uint_array_080040b0"
        },
        "FUN_08005d42": {
            "renaming": {
                "FUN_08005d42": "convert_number_base_08005d42",
                "*param_1": "*number",
                "param_2": "base",
                "param_3": "conversion_type",
                "iVar1": "result",
                "iVar2": "function_result"
            },
            "code": "int convert_number_base_08005d42(uint32_t *number, uint32_t base, uint32_t conversion_type){\n    int result;\n    int function_result;\n\n    if (conversion_type == 0) {\n        result = (**(code **)*number)(number, base & 0xff);\n        return result;\n    }\n    if (conversion_type != 10) {\n        result = convert_base_08005ce8(number, base, conversion_type & 0xff);\n        return result;\n    }\n    if (-1 < (int)base) {\n        result = convert_base_08005ce8(number, base, 10);\n        return result;\n    }\n    result = execute_function_pointer_08005cb6(number, 0x2d);\n    function_result = convert_base_08005ce8(number, -base, 10);\n    return function_result + result;\n}",
            "called": [
                "FUN_08005cb6",
                "FUN_08005ce8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005d42",
            "calling": [
                "FUN_08005d82"
            ],
            "imported": false,
            "current_name": "convert_number_base_08005d42"
        },
        "FUN_08004b34": {
            "renaming": {
                "FUN_08004b34": "set_bitmask_08004b34",
                "set_bitmask_08004d90": "set_bitmask_helper"
            },
            "code": "void set_bitmask_08004b34(void)\n{\n  set_bitmask_08004b34_helper();\n  return;\n}",
            "called": [
                "FUN_08004d90"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004b34",
            "calling": [
                "FUN_08003ed8"
            ],
            "imported": false,
            "current_name": "set_bitmask_08004b34"
        },
        "FUN_08004c52": {
            "renaming": {
                "FUN_08004c52": "initialize_data_and_process_08004c52",
                "set_flag_and_values_08001c88": "set_flag_and_values",
                "initialize_and_process_data_08001b48": "initialize_and_process_data"
            },
            "code": "void initialize_data_and_process_08004c52(void)\n{\n  set_flag_and_values();\n  initialize_and_process_data();\n  return;\n}",
            "called": [
                "FUN_08001c88",
                "FUN_08001b48"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004c52",
            "calling": [
                "FUN_08001c32"
            ],
            "imported": false,
            "current_name": "initialize_data_and_process_08004c52"
        },
        "FUN_080013a4": {
            "renaming": {
                "FUN_080013a4": "decode_and_print_data_080013a4",
                "param_1": "data_address",
                "param_2": "data_size",
                "param_3": "flag_1",
                "param_4": "flag_2",
                "iVar1": "index",
                "iVar2": "unused_index"
            },
            "code": "void decode_and_print_data_080013a4(int data_address, int data_size, int flag_1, int flag_2) {\n  int index = 0;\n  if (data_size > 1) {\n    *(byte *)(data_address + 0x13) = *(byte *)(data_address + 0x13) | 8;\n  }\n  *(char *)(data_address + 0x17) = (char)data_size;\n  set_params_at_offset(data_address, 0, 0x40, flag_1, flag_1 + 0x40);\n  if ((flag_2 != 0) && (data_size == 1)) {\n    *(byte *)(data_address + 0x13) = *(byte *)(data_address + 0x13) | 4;\n  }\n  process_data(*(undefined *)(data_address + 8));\n  if (*(char *)(data_address + 9) != -1) {\n    process_data(*(char *)(data_address + 9));\n  }\n  process_data(*(undefined *)(data_address + 10));\n  while (index < 8) {\n    if ((*(byte *)(data_address + 0x13) & 0x10) == 0) {\n      decode_character(*(undefined *)(data_address + index + 0xb));\n    }\n    else {\n      decode_character(*(undefined *)(data_address + index + 0xb));\n    }\n    index++;\n  }\n  decode_and_print_snake_case(data_address, *(byte *)(data_address + 0x13) | 0x20, 3);\n  decode_and_print_snake_case(data_address, *(byte *)(data_address + 0x13) | 0x20, 3);\n  decode_and_print_snake_case(data_address, *(byte *)(data_address + 0x13) | 0x20, 3);\n  decode_and_print_snake_case(data_address, *(byte *)(data_address + 0x13) | 0x20, 2);\n  decode_and_print_snake_case(data_address, *(byte *)(data_address + 0x13) | 0x20, 0);\n  decode_and_print_snake_case(data_address, *(byte *)(data_address + 0x13) | 0x20, 0);\n  decode_and_print_snake_case(data_address, *(byte *)(data_address + 0x13) | 0x20, 0);\n  decode_and_print_snake_case(data_address, *(byte *)(data_address + 0x13) | 0x20, 0);\n  *(undefined *)(data_address + 0x14) = 4;\n  decode_and_print_snake_case(data_address, 0, 0);\n  print_snake_case_string(data_address);\n  *(undefined *)(data_address + 0x15) = 2;\n  decode_and_print_snake_case(data_address, 6, 0);\n}\n",
            "called": [
                "FUN_08005848",
                "FUN_08001310",
                "FUN_080012c0",
                "FUN_08001294",
                "FUN_0800135a",
                "FUN_080057b4",
                "FUN_0800138e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080013a4",
            "calling": [
                "FUN_080014ba",
                "FUN_08000bcc"
            ],
            "imported": false,
            "current_name": "decode_and_print_data_080013a4"
        },
        "FUN_08006d14": {
            "renaming": {
                "FUN_08006d14": "allocate_memory_buffer_08006d14",
                "param_1": "error_code",
                "param_2": "param_2",
                "param_3": "param_3",
                "param_4": "param_4",
                "piVar1": "buffer_ptr",
                "piVar2": "current_ptr",
                "iVar3": "buffer_ptr",
                "ppiVar4": "buffer_list_ptr",
                "PTR_PTR_DAT_08006d88": "buffer_ptr_list",
                "initialize_buffer_08006cb4": "initialize_buffer",
                "fill_memory_with_value_080061e0": "fill_buffer_with_value",
                "allocated_buffer": "allocated_buffer",
                "list_value": "list_value",
                "*ppiVar4": "buffer_list_ptr",
                "current_value": "current_value"
            },
            "code": "int* allocate_memory_buffer_08006d14(undefined4* error_code, undefined4 param_2, undefined4 param_3, undefined4 param_4)\n{\n  int* buffer_ptr;\n  int* current_ptr;\n  int current_value;\n  int** buffer_list_ptr;\n  int list_value;\n  int* allocated_buffer;\n  buffer_ptr = *(int**)PTR_PTR_DAT_08006d88;\n  if (*(int*)(buffer_ptr + 0x18) == 0)\n  {\n    initialize_buffer_08006cb4(buffer_ptr);\n  }\n  buffer_list_ptr = (int**)(buffer_ptr + 0x48);\n  do\n  {\n    current_ptr = buffer_list_ptr[2];\n    buffer_ptr = buffer_list_ptr[1];\n    while (current_ptr = (int*)((int)current_ptr + -1), -1 < (int)current_ptr)\n    {\n      current_value = *(short*)(buffer_ptr + 3);\n      if (current_value == 0)\n      {\n        *(undefined2*)((int)buffer_ptr + 0xe) = 0xffff;\n        buffer_ptr[0x19] = 0;\n        *(undefined2*)(buffer_ptr + 3) = 1;\n        *buffer_ptr = 0;\n        buffer_ptr[2] = 0;\n        buffer_ptr[1] = 0;\n        buffer_ptr[4] = 0;\n        buffer_ptr[5] = 0;\n        buffer_ptr[6] = 0;\n        fill_memory_with_value_080061e0(buffer_ptr + 0x17, 0, 8, 1, param_4);\n        buffer_ptr[0xd] = 0;\n        buffer_ptr[0xe] = 0;\n        buffer_ptr[0x12] = 0;\n        buffer_ptr[0x13] = 0;\n        return buffer_ptr;\n      }\n      buffer_ptr = buffer_ptr + 0x1a;\n    }\n    list_value = (int)*buffer_list_ptr;\n    if (list_value == 0)\n    {\n      allocated_buffer = allocate_buffer_memory_08006c88(error_code, 4);\n      *buffer_list_ptr = allocated_buffer;\n      if (allocated_buffer == (int*)0x0)\n      {\n        *error_code = 0xc;\n        return (int*)0x0;\n      }\n    }\n    buffer_list_ptr = (int**)*buffer_list_ptr;\n  }\n  while (true);\n}",
            "called": [
                "FUN_080061e0",
                "FUN_08006c88",
                "FUN_08006cb4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006d14",
            "calling": [
                "FUN_08006cb4"
            ],
            "imported": false,
            "current_name": "allocate_memory_buffer_08006d14",
            "code_backup": "\nint * FUN_08006d14(undefined4 *param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  int *piVar1;\n  int *piVar2;\n  int iVar3;\n  int **ppiVar4;\n  \n  iVar3 = *(int *)PTR_PTR_DAT_08006d88;\n  if (*(int *)(iVar3 + 0x18) == 0) {\n    FUNC_08006cb4(iVar3);\n  }\n  ppiVar4 = (int **)(iVar3 + 0x48);\n  do {\n    piVar2 = ppiVar4[2];\n    piVar1 = ppiVar4[1];\n    while (piVar1 = (int *)((int)piVar1 + -1), -1 < (int)piVar1) {\n      if (*(short *)(piVar2 + 3) == 0) {\n        *(undefined2 *)((int)piVar2 + 0xe) = 0xffff;\n        piVar2[0x19] = 0;\n        *(undefined2 *)(piVar2 + 3) = 1;\n        *piVar2 = 0;\n        piVar2[2] = 0;\n        piVar2[1] = 0;\n        piVar2[4] = 0;\n        piVar2[5] = 0;\n        piVar2[6] = 0;\n        fill_memory_with_value_080061e0(piVar2 + 0x17,0,8,1,param_4);\n        piVar2[0xd] = 0;\n        piVar2[0xe] = 0;\n        piVar2[0x12] = 0;\n        piVar2[0x13] = 0;\n        return piVar2;\n      }\n      piVar2 = piVar2 + 0x1a;\n    }\n    if (*ppiVar4 == (int *)0x0) {\n      piVar1 = (int *)allocate_buffer_memory_08006c88(param_1,4);\n      *ppiVar4 = piVar1;\n      if (piVar1 == (int *)0x0) {\n        *param_1 = 0xc;\n        return (int *)0x0;\n      }\n    }\n    ppiVar4 = (int **)*ppiVar4;\n  } while( true );\n}\n\n"
        },
        "FUN_080004f8": {
            "renaming": {
                "FUN_080004f8": "FUNC_080004f8"
            },
            "code": "\nulonglong FUNC_080004f8(undefined4 param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  ulonglong uVar1;\n  longlong lVar2;\n  uint uVar3;\n  uint uVar4;\n  int iVar5;\n  uint uVar6;\n  uint unaff_r5;\n  uint uVar7;\n  uint uVar8;\n  bool bVar9;\n  bool bVar10;\n  bool bVar11;\n  ulonglong uVar12;\n  \n  uVar12 = CONCAT44(param_2,param_1);\n  uVar7 = 0x7ff;\n  uVar4 = param_2 >> 0x14 & 0x7ff;\n  bVar9 = uVar4 == 0;\n  if (!bVar9) {\n    unaff_r5 = param_4 >> 0x14 & 0x7ff;\n    bVar9 = unaff_r5 == 0;\n  }\n  if (!bVar9) {\n    bVar9 = uVar4 == 0x7ff;\n  }\n  if (!bVar9) {\n    bVar9 = unaff_r5 == 0x7ff;\n  }\n  if (bVar9) {\n    uVar12 = calculate_value_from_parameters_080006d4();\n  }\n  uVar3 = (uint)(uVar12 >> 0x20);\n  iVar5 = uVar4 + unaff_r5;\n  uVar4 = uVar3 ^ param_4;\n  uVar3 = uVar3 & ~(uVar7 << 0x15);\n  param_4 = param_4 & ~(uVar7 << 0x15);\n  bVar9 = ((uint)uVar12 | uVar3 << 0xc) == 0;\n  if (!bVar9) {\n    bVar9 = (param_3 | param_4 << 0xc) == 0;\n  }\n  uVar3 = uVar3 | 0x100000;\n  param_4 = param_4 | 0x100000;\n  if (bVar9) {\n    param_3 = (uint)uVar12 | param_3;\n    param_4 = (uVar4 & 0x80000000 | uVar3) ^ param_4;\n    uVar4 = uVar7 >> 1;\n    bVar11 = SBORROW4(iVar5,uVar4);\n    uVar6 = iVar5 - uVar4;\n    bVar9 = uVar6 == 0;\n    uVar3 = uVar6;\n    if (!bVar9 && (int)uVar4 <= iVar5) {\n      bVar11 = SBORROW4(uVar7,uVar6);\n      uVar3 = uVar7 - uVar6;\n      bVar9 = uVar7 == uVar6;\n    }\n    if (!bVar9 && (int)uVar3 < 0 == bVar11) {\n      param_4 = param_4 | uVar6 * 0x100000;\n    }\n    if (!bVar9 && (int)uVar3 < 0 == bVar11) {\n      return CONCAT44(param_4,param_3);\n    }\n    param_4 = param_4 | 0x100000;\n    uVar7 = 0;\n    bVar11 = SBORROW4(uVar6,1);\n    uVar6 = uVar6 - 1;\n    bVar9 = uVar6 == 0;\n    uVar4 = uVar6;\n  }\n  else {\n    uVar1 = (uVar12 & 0xffffffff) * (ulonglong)param_3;\n    uVar12 = (uVar12 & 0xffffffff) * (ulonglong)param_4 +\n             (ulonglong)uVar3 * (ulonglong)param_3 + (uVar1 >> 0x20);\n    uVar8 = (uint)uVar12;\n    lVar2 = (ulonglong)uVar3 * (ulonglong)param_4 + (uVar12 >> 0x20);\n    uVar7 = (uint)lVar2;\n    uVar3 = (uint)((ulonglong)lVar2 >> 0x20);\n    if ((int)uVar1 != 0) {\n      uVar8 = uVar8 | 1;\n    }\n    uVar6 = (iVar5 + -0x3ff) - (uint)(uVar3 < 0x200);\n    if (uVar3 < 0x200) {\n      bVar9 = (uVar8 & 0x80000000) != 0;\n      uVar8 = uVar8 << 1;\n      lVar2 = CONCAT44(uVar3 * 2 + (uint)(CARRY4(uVar7,uVar7) || CARRY4(uVar7 * 2,(uint)bVar9)),\n                       uVar7 * 2 + (uint)bVar9);\n    }\n    param_4 = uVar4 & 0x80000000 | (int)((ulonglong)lVar2 >> 0x20) << 0xb | (uint)lVar2 >> 0x15;\n    param_3 = (uint)lVar2 << 0xb | uVar8 >> 0x15;\n    uVar7 = uVar8 * 0x800;\n    bVar10 = 0xfc < uVar6;\n    bVar11 = SBORROW4(uVar6,0xfd);\n    uVar3 = uVar6 - 0xfd;\n    bVar9 = uVar3 == 0;\n    uVar4 = uVar3;\n    if (bVar10 && !bVar9) {\n      bVar10 = 0x6ff < uVar3;\n      bVar11 = SBORROW4(uVar3,0x700);\n      uVar4 = uVar6 - 0x7fd;\n      bVar9 = uVar3 == 0x700;\n    }\n    if (!bVar10 || bVar9) {\n      bVar9 = 0x7fffffff < uVar7;\n      if (uVar7 == 0x80000000) {\n        bVar9 = (uVar8 >> 0x15 & 1) != 0;\n      }\n      return CONCAT44(param_4 + uVar6 * 0x100000 + (uint)CARRY4(param_3,(uint)bVar9),param_3 + bVar9\n                     );\n    }\n  }\n  if (!bVar9 && (int)uVar4 < 0 == bVar11) {\n    return (ulonglong)(param_4 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  bVar10 = SCARRY4(uVar6,0x36);\n  bVar9 = (int)(uVar6 + 0x36) < 0;\n  bVar11 = uVar6 == 0xffffffca;\n  if (bVar11 || bVar9 != bVar10) {\n    param_3 = 0;\n  }\n  if (bVar11 || bVar9 != bVar10) {\n    param_4 = param_4 & 0x80000000;\n  }\n  if (bVar11 || bVar9 != bVar10) {\n    return CONCAT44(param_4,param_3);\n  }\n  uVar4 = -uVar6;\n  uVar3 = uVar4 - 0x20;\n  if (0x1f < (int)uVar4) {\n    uVar6 = param_3 >> (uVar3 & 0xff) | param_4 << (0x20 - uVar3 & 0xff);\n    uVar4 = (param_4 >> (uVar3 & 0xff) & ~((param_4 & 0x80000000) >> (uVar3 & 0xff))) -\n            ((int)uVar6 >> 0x1f);\n    if ((uVar7 | param_3 << (0x20 - uVar3 & 0xff) | uVar6 << 1) == 0) {\n      uVar4 = uVar4 & ~(uVar6 >> 0x1f);\n    }\n    return CONCAT44(param_4,uVar4) & 0x80000000ffffffff;\n  }\n  iVar5 = uVar4 - 0x14;\n  if (iVar5 == 0 || iVar5 < 0 != SCARRY4(uVar3,0xc)) {\n    uVar8 = param_3 << (uVar6 + 0x20 & 0xff);\n    uVar3 = param_3 >> (uVar4 & 0xff) | param_4 << (uVar6 + 0x20 & 0xff);\n    uVar6 = uVar3 + -((int)uVar8 >> 0x1f);\n    if ((uVar7 | uVar8 << 1) == 0) {\n      uVar6 = uVar6 & ~(uVar8 >> 0x1f);\n    }\n    return CONCAT44((param_4 & 0x80000000) +\n                    ((param_4 & 0x7fffffff) >> (uVar4 & 0xff)) +\n                    (uint)CARRY4(uVar3,-((int)uVar8 >> 0x1f)),uVar6);\n  }\n  uVar4 = 0xc - iVar5;\n  uVar6 = param_3 << (uVar4 & 0xff);\n  uVar4 = param_3 >> (0x20 - uVar4 & 0xff) | param_4 << (uVar4 & 0xff);\n  uVar3 = uVar4 + -((int)uVar6 >> 0x1f);\n  if ((uVar7 | uVar6 << 1) == 0) {\n    uVar3 = uVar3 & ~(uVar6 >> 0x1f);\n  }\n  return CONCAT44((param_4 & 0x80000000) + (uint)CARRY4(uVar4,-((int)uVar6 >> 0x1f)),uVar3);\n}\n\n",
            "called": [
                "FUN_080006d4"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x080004f8",
            "calling": [
                "FUN_080015f8",
                "FUN_080016b4",
                "FUN_08005da8",
                "FUN_08001814",
                "FUN_08001918"
            ],
            "imported": false,
            "current_name": "FUNC_080004f8"
        }
    },
    "used_tokens": 226928,
    "layers": [
        [
            "FUN_08002470",
            "FUN_08005740",
            "FUN_08006158",
            "FUN_08000178",
            "FUN_0800258c",
            "FUN_0800573c",
            "FUN_08004d06",
            "FUN_080056d8",
            "FUN_08002f9c",
            "FUN_08005750",
            "FUN_08002ab8",
            "FUN_08002c54",
            "FUN_08004d18",
            "FUN_080006d4",
            "FUN_08006174",
            "FUN_08002494",
            "FUN_080055bc",
            "FUN_08002810",
            "FUN_08004cb2",
            "FUN_08001294",
            "FUN_08002ad8",
            "FUN_0800455a",
            "FUN_08001a66",
            "FUN_08003c44",
            "FUN_080028d2",
            "FUN_08005b3c",
            "FUN_08004c8a",
            "FUN_08002ca6",
            "FUN_080045a2",
            "FUN_080047e8",
            "thunk_FUN_08005750",
            "FUN_0800092c",
            "FUN_08002560",
            "FUN_08006e90",
            "FUN_080008ba",
            "FUN_08005714",
            "FUN_08005a44",
            "FUN_0800417c",
            "FUN_080047f4",
            "FUN_08002c10",
            "FUN_080024f8",
            "FUN_08004198",
            "FUN_08000a2c",
            "FUN_08000ae8",
            "FUN_080061e0",
            "FUN_08005724",
            "FUN_08005728",
            "FUN_0800571a",
            "FUN_08002efc",
            "FUN_0800365c",
            "FUN_08002582",
            "FUN_08004884",
            "FUN_080061f0",
            "FUN_0800572c",
            "FUN_08000a58",
            "FUN_08004092",
            "FUN_08002514",
            "FUN_08005c1c",
            "FUN_0800480a",
            "FUN_08005f8c",
            "FUN_08004c5e",
            "FUN_08004d90",
            "FUN_08004828",
            "FUN_08005b24",
            "FUN_080049f0",
            "FUN_08001e40",
            "FUN_08003a68",
            "FUN_08001e48",
            "FUN_08000aa8",
            "FUN_0800010c",
            "FUN_08001cac",
            "FUN_0800591e",
            "FUN_08002540",
            "FUN_08002db2",
            "FUN_08001cc4",
            "FUN_0800306c",
            "FUN_08004848",
            "FUN_08001f80",
            "FUN_0800281e",
            "FUN_08006198",
            "FUN_080065c0",
            "FUN_08004d40",
            "FUN_08004d44",
            "FUN_0800040c",
            "FUN_08004df4",
            "FUN_08002af8",
            "FUN_080028de",
            "FUN_08002848",
            "FUN_08004e70",
            "FUN_08004110",
            "FUN_08004ce2",
            "FUN_08005cb6",
            "FUN_08002b84",
            "FUN_0800042c",
            "FUN_08005cc0",
            "FUN_08002624"
        ],
        [
            "FUN_08007004",
            "FUN_08004ec4",
            "FUN_080043b4",
            "FUN_08007028",
            "FUN_08004ca2",
            "FUN_080054b0",
            "FUN_08006f00",
            "FUN_08004ef4",
            "FUN_080055e0",
            "FUN_08006112",
            "FUN_08004974",
            "FUN_08006c40",
            "FUN_08006920",
            "FUN_08004b94",
            "FUN_08001918",
            "FUN_08001c3c",
            "FUN_08005604",
            "FUN_08005c96",
            "FUN_08004b9e",
            "FUN_08000aec",
            "FUN_08004e12",
            "FUN_08003c90",
            "FUN_0800412c",
            "FUN_08005c38",
            "FUN_08005ce8",
            "FUN_08004c78",
            "FUN_080009b8",
            "FUN_08005a18",
            "FUN_08003ea0",
            "FUN_0800548c",
            "FUN_08001f84",
            "FUN_08007048",
            "FUN_08003c50",
            "FUN_08004bb0",
            "FUN_08004df8",
            "FUN_080020f0",
            "FUN_08004e74",
            "FUN_08004c30",
            "FUN_08004cce",
            "FUN_08005568",
            "FUN_08003c70",
            "FUN_08004c48",
            "FUN_0800706c",
            "FUN_080040b0",
            "FUN_08004b34"
        ],
        [
            "FUN_08005510",
            "FUN_08002cf2",
            "FUN_08006288",
            "FUN_08002004",
            "FUN_08005fc8",
            "FUN_08001c88",
            "FUN_0800224c",
            "FUN_08005890",
            "FUN_08004204",
            "FUN_080045fe",
            "FUN_0800213c",
            "FUN_08005384",
            "FUN_08005b54",
            "FUN_08004618",
            "FUN_08005d8a",
            "FUN_08002d1c",
            "FUN_08003da4",
            "FUN_080009dc",
            "FUN_080058e0",
            "FUN_080009f0",
            "FUN_08006ac0",
            "FUN_08005848",
            "FUN_08003ed8",
            "FUN_08002348",
            "FUN_08005cd4",
            "FUN_08006dc8",
            "FUN_0800492c",
            "FUN_080009a8",
            "FUN_0800316c",
            "FUN_08003afa",
            "FUN_08004948",
            "FUN_08003f18",
            "FUN_080009c8",
            "FUN_08006f92",
            "FUN_080054d4",
            "FUN_08006f38",
            "FUN_08003ad4",
            "FUN_08004478",
            "FUN_08005d42"
        ],
        [
            "FUN_08006c88",
            "FUN_08004e20",
            "FUN_080032b4",
            "FUN_0800598a",
            "FUN_0800441a",
            "FUN_08005da0",
            "FUN_08002384",
            "FUN_08000a18",
            "FUN_080046b8",
            "FUN_08001cd0",
            "FUN_08003520",
            "FUN_0800611c",
            "FUN_08001814",
            "FUN_08001b48",
            "FUN_08005bb0",
            "FUN_08004b3c",
            "FUN_080012a2",
            "FUN_08000a04",
            "FUN_08005d82",
            "FUN_080015b2",
            "FUN_08006e10",
            "FUN_080053d4"
        ],
        [
            "FUN_080019f6",
            "FUN_08001960",
            "FUN_080016b4",
            "FUN_080018f8",
            "FUN_08005da8",
            "FUN_08004a4c",
            "FUN_080057b4",
            "FUN_080012e8",
            "FUN_080033b8",
            "FUN_08005730",
            "FUN_08005a68",
            "FUN_080015f8",
            "FUN_080012c0",
            "FUN_08004c52"
        ],
        [
            "FUN_08005754",
            "FUN_08001a44",
            "FUN_08005f2c",
            "FUN_0800157c",
            "FUN_08001c32",
            "FUN_08001ab0",
            "FUN_08006f5a",
            "FUN_08001310"
        ],
        [
            "FUN_0800138e",
            "FUN_08005f40",
            "FUN_08001b18",
            "FUN_0800134e",
            "FUN_08001366",
            "FUN_0800135a",
            "FUN_08001550",
            "FUN_08005f5e"
        ],
        [
            "FUN_080013a4"
        ],
        [
            "FUN_080014ba",
            "FUN_08000bcc"
        ],
        [
            "FUN_08001510",
            "FUN_08005f6c"
        ],
        [
            "FUN_08001be8",
            "FUN_08000b08"
        ],
        [
            "FUN_08007090"
        ],
        [
            "FUN_080060d4"
        ],
        [
            "FUN_080060e4"
        ],
        [
            "FUN_0800282c"
        ],
        [
            "FUN_080068f0",
            "FUN_08006be0",
            "FUN_080069e4",
            "FUN_08006d14"
        ],
        [
            "FUN_08006cb4"
        ],
        [
            "FUN_08006344"
        ],
        [
            "FUN_08006370"
        ]
    ],
    "locked_functions": []
}